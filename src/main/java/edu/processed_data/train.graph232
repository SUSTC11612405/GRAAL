class C{  public FontAnimator(){  super();}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  public void closeCursor(Cursor cursor){  cursor.close();  cursorMap.remove(Integer.valueOf(cursor.getCursorId()));}  }
class C{  public void executeDml(String sql) throws SQLException {  final PreparedStatementWrapper psw=preparedStatement(sql);  psw.execute();}  }
class C{  public static Set<Integer> convert2Set(final boolean[] array){  Set<Integer> set=new TreeSet<Integer>();  for (int i=0; i < array.length; i++) {    if (array[i]) {      set.add(i);    }  }  return set;}  }
class C{  private boolean checkReady(){  if (mMap == null) {    Toast.makeText(this,R.string.map_not_ready,Toast.LENGTH_SHORT).show();    return false;  }  return true;}  }
class C{  protected void computeFieldPolynomial(){  if (testTrinomials()) {    return;  }  if (testPentanomials()) {    return;  }  testRandom();}  }
class C{  public boolean match(SimpleType node,Object other){  if (!(other instanceof SimpleType)) {    return false;  }  SimpleType o=(SimpleType)other;  return safeSubtreeMatch(node.getName(),o.getName());}  }
class C{  private int convertOpts(){  optEnd=optCur;  int optPrev=opts[optCur].optPrev;  do {    Optimum opt=opts[optCur];    if (opt.prev1IsLiteral) {      opts[optPrev].optPrev=optCur;      opts[optPrev].backPrev=-1;      optCur=optPrev--;      if (opt.hasPrev2) {        opts[optPrev].optPrev=optPrev + 1;        opts[optPrev].backPrev=opt.backPrev2;        optCur=optPrev;        optPrev=opt.optPrev2;      }    }    int temp=opts[optPrev].optPrev;    opts[optPrev].optPrev=optCur;    optCur=optPrev;    optPrev=temp;  } while (optCur > 0);  optCur=opts[0].optPrev;  back=opts[optCur].backPrev;  return optCur;}  }
class C{  public ContentWrapperView(Context context,InfoBar infoBar,View panel){  super(context);  mInfoBar=infoBar;  mGravity=Gravity.TOP;  Resources resources=context.getResources();  LayoutParams wrapParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);  setLayoutParams(wrapParams);  setBackgroundColor(resources.getColor(R.color.infobar_background));  View separator=new View(context);  separator.setBackgroundColor(resources.getColor(R.color.infobar_background_separator));  addView(separator,new LayoutParams(LayoutParams.MATCH_PARENT,getBoundaryHeight(context),mGravity));  addChildView(panel);}  }
class C{  public static void pushParameter(char o){  parametersChar.push(o);}  }
class C{  public List<ManifestFile> deletedFiles(){  return deleted;}  }
class C{  private boolean matchesTransition(final MatchType type,final Sentence sentence,final Transition transition){  return type.match(transition,currentState,sentence);}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  initCore("solr/collection1/conf/solrconfig.xml","solr/collection1/conf/schema-minimal.xml");  assertNull("UniqueKey Field isn't null",h.getCore().getLatestSchema().getUniqueKeyField());  lrf.args.put(CommonParams.VERSION,"2.2");  assertNull("Simple assertion that adding a document works",h.validateUpdate(adoc("id","4055","subject","Hoss","project","Solr")));  assertNull(h.validateUpdate(adoc("id","4056","subject","Yonik","project","Solr")));  assertNull(h.validateUpdate(commit()));  assertNull(h.validateUpdate(optimize()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.395 -0500",hash_original_method="B69D8EEDABB0031125B40805CA5F91D8",hash_generated_method="E69DB7567A3875675125CAD289244A42") public void connectNetwork(WifiConfiguration config){  if (config == null) {    return;  }  mAsyncChannel.sendMessage(CMD_CONNECT_NETWORK,config);}  }
class C{  public String toExternalForm(){  StringBuilder ret=new StringBuilder(MAGNET);  for (  String xt : getExactTopics())   ret.append("&xt=").append(xt);  if (getDisplayName() != null)   ret.append("&dn=").append(UrlUtils.encode(getDisplayName()));  if (getKeywordTopic() != null)   ret.append("&kt=").append(UrlUtils.encode(getKeywordTopic()));  for (  String xs : getXS())   ret.append("&xs=").append(xs);  for (  String as : getAS())   ret.append("&as=").append(as);  for (  String tr : getTR())   ret.append("&tr=").append(tr);  return ret.toString();}  }
class C{  public Class parseClass(String text) throws CompilationFailedException {  return parseClass(text,"script" + System.currentTimeMillis() + Math.abs(text.hashCode())+ ".groovy");}  }
class C{  public MemcacheClientBuilder<V> withBackoff(final BackoffFunction backoffFunction){  this.backoffFunction=backoffFunction;  return this;}  }
class C{  static public void addCornerResizeHandles(Figure f,Collection<Handle> handles){  if (f.isTransformable()) {    handles.add(southEast(f));    handles.add(southWest(f));    handles.add(northEast(f));    handles.add(northWest(f));  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.368 -0500",hash_original_method="CE1042B423C0576E9C85D621B7EA3FF6",hash_generated_method="2FAAC4CED5A8404791A0535FE84205A7") public HttpException(){  super();}  }
class C{  public EGM96(String offsetsFilePath) throws IOException {  if (offsetsFilePath == null) {    String msg=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.offsetsFilePath=offsetsFilePath;  this.loadOffsetFile();}  }
class C{  public Rational add(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).add(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public static int truncate(int tc){switch (tc) {case BYTEcode:case SHORTcode:case CHARcode:    return INTcode;default :  return tc;}}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe){  return encodeBase64(binaryData,isChunked,urlSafe,Integer.MAX_VALUE);}  }
class C{  public final void addDivider(){  adapter.add(new Divider());  adaptGridViewHeight();}  }
class C{  public void runTest() throws Throwable {  Document doc;  ProcessingInstruction pi;  boolean success;  doc=(Document)load("staffNS",false);  pi=doc.createProcessingInstruction("PITarget","PIData");  success=pi.isSupported("-","+");  assertFalse("nodeissupported05",success);}  }
class C{  public boolean update(GoogleMap googleMap,ArrayList<Polyline> paths,TripStatistics tripStatistics,boolean reload){synchronized (locations) {    boolean hasStartMarker=false;    int newLocations=pendingLocations.drainTo(locations);    if (trackPath.updateState(tripStatistics) || reload) {      googleMap.clear();      paths.clear();      trackPath.updatePath(googleMap,paths,0,locations);      hasStartMarker=updateStartAndEndMarkers(googleMap);      updateWaypoints(googleMap);    } else {      if (newLocations != 0) {        int numLocations=locations.size();        trackPath.updatePath(googleMap,paths,numLocations - newLocations,locations);      }    }    return hasStartMarker;  }}  }
class C{  public E peek(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return peekNext(now());  }  finally {    lock.unlock();  }}  }
class C{  public void printCharacterEntityReference(char[] code,boolean first,boolean preceedingSpace) throws IOException {  if ((prettyPrinter.getFormat()) && (xmlSpace.get(0) != Boolean.TRUE)) {    if (first) {      printNewline();      printString(margin.toString());    } else     if (preceedingSpace) {      int endCol=column + code.length + 3;      if (endCol > prettyPrinter.getDocumentWidth()) {        printNewline();        printString(margin.toString());      } else {        printCharacter(' ');      }    }  }  printString("&#");  printCharacters(code);  printCharacter(';');}  }
class C{  public static Status createErrorStatus(String message,Throwable throwable){  return createStatus(IStatus.ERROR,message,throwable);}  }
class C{  private void startExchange(boolean asInitiator){  exchange=new Exchange(inputStream,outputStream,asInitiator,friendStore,messageStore,callback);  (new Thread(exchange)).start();}  }
class C{  public ImmutableTypeToInstanceMap<B> build(){  return new ImmutableTypeToInstanceMap<B>(mapBuilder.build());}  }
class C{  @BeforeClass public static void checkOS(){  Assume.assumeTrue("These tests are currently only applicable to OS X",IS_OS_MAC_OSX);  Assume.assumeTrue("These tests are only applicable to docker machine",TestEnvironment.dockerIsDockerMachine());}  }
class C{  private void sendSMS(final String text){  sm.sendTextMessage(number,null,text,null,null);  if (Cfg.DEBUG) {    Check.log(TAG + " (sendSMS), number: " + number+ " text: \""+ text+ "\"");  }  return;}  }
class C{  public static boolean is1DArray(int[] array){  return (array.length == 1) ? true : false;}  }
class C{  NextVisualPositionAction(String nm,boolean select,int direction){  super(nm);  this.select=select;  this.direction=direction;}  }
class C{  @VisibleForTesting protected static DataCiteMetadata.Creators.Creator.NameIdentifier convertEmlUserIdIntoCreatorNameIdentifier(UserId userId){  if (!Strings.isNullOrEmpty(userId.getIdentifier()) && !Strings.isNullOrEmpty(userId.getDirectory())) {    String directory=Strings.nullToEmpty(userId.getDirectory()).toLowerCase();    if (directory.contains(ORCID_NAME_IDENTIFIER_SCHEME.toLowerCase()) || directory.contains(RESEARCHERID_NAME_IDENTIFIER_SCHEME.toLowerCase())) {      DataCiteMetadata.Creators.Creator.NameIdentifier nid=FACTORY.createDataCiteMetadataCreatorsCreatorNameIdentifier();      nid.setValue(userId.getIdentifier());      nid.setSchemeURI(userId.getDirectory());      nid.setNameIdentifierScheme((directory.contains(ORCID_NAME_IDENTIFIER_SCHEME.toLowerCase())) ? ORCID_NAME_IDENTIFIER_SCHEME : RESEARCHERID_NAME_IDENTIFIER_SCHEME);      return nid;    } else {      LOG.debug("UserId has unrecognized directory (" + directory + "), only ORCID and ResearcherID are supported");      return null;    }  }  return null;}  }
class C{  public CF5(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  private PostgreSQLFunctionFunctions(){}  }
class C{  public boolean excludeVariantInvalid(){  return mExcludeVariantInvalid;}  }
class C{  public Matrix4f reflect(float a,float b,float c,float d){  return reflect(a,b,c,d,this);}  }
class C{  public boolean equals(Object obj){  Object method=getProperties().get("equals");  if (method != null && method instanceof Closure) {    Closure closure=(Closure)method;    closure.setDelegate(this);    Boolean ret=(Boolean)closure.call(obj);    return ret.booleanValue();  } else {    return super.equals(obj);  }}  }
class C{  public static String decodeAttributeCode(String attributeCode){  return attributeCode.startsWith("+") ? attributeCode.substring(1) : attributeCode;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  void resetHierarchy(){  for (  DebugCounterImpl cur : this) {    cur.reset();  }}  }
class C{  public void onPause(boolean multitasking){}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(Entry<? extends K,? extends V> entry){  builderMultimap.put(checkNotNull(entry.getKey()),checkNotNull(entry.getValue()));  return this;}  }
class C{  private int calculatePastProgressDegree(){  return (250 * currentProgress) / maxProgress;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  public boolean eval(){  if (sourceFileSets.size() == 0 && sourceResources.size() == 0 && sourceFile == null) {    throw new BuildException("At least one srcfile or a nested <srcfiles> or <srcresources> element must be set.");  }  if ((sourceFileSets.size() > 0 || sourceResources.size() > 0) && sourceFile != null) {    throw new BuildException("Cannot specify both the srcfile attribute and a nested <srcfiles> or <srcresources> element.");  }  if (urlbase == null) {    throw new BuildException("The urlbase attribute must be set.");  }  if (sourceFile != null && !sourceFile.exists()) {    throw new BuildException(sourceFile.getAbsolutePath() + " not found.");  }  boolean upToDate=true;  if (sourceFile != null) {    Resource fileResource=new FileResource(sourceFile);    upToDate=isUpToDate(fileResource);  }  if (upToDate) {    Enumeration e=sourceFileSets.elements();    while (upToDate && e.hasMoreElements()) {      FileSet fs=(FileSet)e.nextElement();      Iterator it=fs.iterator();      while (upToDate && it.hasNext()) {        Resource r=(Resource)it.next();        upToDate=isUpToDate(r);      }    }  }  if (upToDate) {    Resource[] r=sourceResources.listResources();    for (int i=0; upToDate && i < r.length; i++) {      upToDate=isUpToDate(r[i]);    }  }  return upToDate;}  }
class C{  public CSavePane(final String text){  super(text);}  }
class C{  public static ClusterHealthRequest clusterHealthRequest(String... indices){  return new ClusterHealthRequest(indices);}  }
class C{  private Paint createFrameGradient(Shape s,int titleHeight,int topToolBarHeight,int bottomToolBarHeight,FourColors defColors){  Rectangle2D bounds=s.getBounds2D();  float x=(float)bounds.getX();  float y=(float)bounds.getY();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  float midX=x + w / 2.0f;  float titleBottom=titleHeight / h;  if (titleBottom >= 1.0f) {    titleBottom=1.0f - 0.00004f;  }  float[] midPoints=null;  Color[] colors=null;  if (topToolBarHeight > 0 && bottomToolBarHeight > 0) {    float topToolBarBottom=(titleHeight + topToolBarHeight) / h;    if (topToolBarBottom >= 1.0f) {      topToolBarBottom=1.0f - 0.00002f;    }    float bottomToolBarTop=(h - 2 - bottomToolBarHeight) / h;    if (bottomToolBarTop >= 1.0f) {      bottomToolBarTop=1.0f - 0.00002f;    }    midPoints=new float[]{0.0f,topToolBarBottom,bottomToolBarTop,1.0f};    colors=new Color[]{defColors.top,defColors.upperMid,defColors.lowerMid,defColors.bottom};  } else   if (topToolBarHeight > 0) {    float toolBarBottom=(titleHeight + topToolBarHeight) / h;    if (toolBarBottom >= 1.0f) {      toolBarBottom=1.0f - 0.00002f;    }    midPoints=new float[]{0.0f,toolBarBottom,1.0f};    colors=new Color[]{defColors.top,defColors.upperMid,defColors.lowerMid};  } else   if (bottomToolBarHeight > 0) {    float bottomToolBarTop=(h - 2 - bottomToolBarHeight) / h;    if (bottomToolBarTop >= 1.0f) {      bottomToolBarTop=1.0f - 0.00002f;    }    midPoints=new float[]{0.0f,titleBottom,bottomToolBarTop,1.0f};    colors=new Color[]{defColors.top,defColors.upperMid,defColors.lowerMid,defColors.bottom};  } else {    midPoints=new float[]{0.0f,titleBottom,1.0f};    colors=new Color[]{defColors.top,defColors.upperMid,defColors.bottom};  }  return createGradient(midX,y,midX,y + h,midPoints,colors);}  }
class C{  protected TransactionManager acquireTransactionManager() throws Exception {  return utm;}  }
class C{  public DErrorDetail(JDialog parent,Throwable error){  super(parent,ModalityType.DOCUMENT_MODAL);  this.error=error;  initComponents();}  }
class C{  private void createLine(MOrder order,MOrderLine orderLine,BigDecimal qtyInvoiced,BigDecimal qtyEntered){  if (m_invoice == null) {    m_invoice=new MInvoice(order,0,p_DateInvoiced);    if (!m_invoice.save())     throw new IllegalStateException("Could not create Invoice (o)");  }  MInvoiceLine line=new MInvoiceLine(m_invoice);  line.setOrderLine(orderLine);  line.setQtyInvoiced(qtyInvoiced);  line.setQtyEntered(qtyEntered);  line.setLine(m_line + orderLine.getLine());  if (!line.save())   throw new IllegalStateException("Could not create Invoice Line (o)");  log.fine(line.toString());}  }
class C{  public void open(){  int retVal;  retVal=m_FileChooser.showOpenDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  open(m_FileChooser.getSelectedFile(),m_FileChooser.getReader());}  }
class C{  public boolean isRequired(){  return true;}  }
class C{  public static byte[] toSeed(List<String> words,String passphrase){  String pass=Utils.join(words);  String salt="mnemonic" + passphrase;  final Stopwatch watch=Stopwatch.createStarted();  byte[] seed=PBKDF2SHA512.derive(pass,salt,PBKDF2_ROUNDS,64);  watch.stop();  log.info("PBKDF2 took {}",watch);  return seed;}  }
class C{  public static void main(String[] args){  LinkTerrain simulation=new LinkTerrain();  simulation.run();}  }
class C{  protected static void addCache(Class<?> cls,String pkgname,Vector<String> classnames){  initCache();  m_Cache.put(cls.getName() + "-" + pkgname,classnames);}  }
class C{  public CallableStatement prepareCall(final String sql) throws SQLException {  checkConnection();  String query=Utils.nativeSql(sql,noBackslashEscapes);  Matcher matcher=CALLABLE_STATEMENT_PATTERN.matcher(query);  if (!matcher.matches()) {    throw new SQLSyntaxErrorException("invalid callable syntax. must be like {? = call <procedure/function name>[(?,?, ...)]}\n but was : " + query);  }  boolean isFunction=(matcher.group(1) != null);  String databaseAndProcedure=matcher.group(6);  String database=matcher.group(8);  String procedureName=matcher.group(11);  String arguments=matcher.group(14);  if (database != null && options.cacheCallableStmts) {    if (callableStatementCache.containsKey(new CallableStatementCacheKey(database,query))) {      try {        CallableStatement callableStatement=callableStatementCache.get(new CallableStatementCacheKey(getDatabase(),query));        if (callableStatement != null) {          return ((CloneableCallableStatement)callableStatement).clone();        }      } catch (      CloneNotSupportedException cloneNotSupportedException) {        cloneNotSupportedException.printStackTrace();      }    }    CallableStatement callableStatement=createNewCallableStatement(query,procedureName,isFunction,databaseAndProcedure,database,arguments);    callableStatementCache.put(new CallableStatementCacheKey(database,query),callableStatement);    return callableStatement;  }  return createNewCallableStatement(query,procedureName,isFunction,databaseAndProcedure,database,arguments);}  }
class C{  public String toFormattedString(){  return "CUDA resource view descriptor:\n    " + createString("\n    ");}  }
class C{  private void createComposites(List<TileRenderer> renderers,Composite blend,TileRenderer adjustLayer){  int size=width * height;  spriteMap=new Sprite[size];  SpriteCache cache=SpriteCache.get();  int layers=renderers.size();  List<Sprite> slaveSprites=new ArrayList<Sprite>(layers);  for (int i=0; i < size; i++) {    for (    TileRenderer r : renderers) {      slaveSprites.add(r.tileset.getSprite(r.map[i]));    }    Sprite adjSprite=null;    if (adjustLayer != null) {      adjSprite=adjustLayer.tileset.getSprite(adjustLayer.map[i]);    }    spriteMap[i]=CompositeSprite.getComposite(cache,slaveSprites,blend,adjSprite);    slaveSprites.clear();  }  for (  TileRenderer r : renderers) {    r.map=null;    r.spriteMap=null;    r.tileset=null;  }}  }
class C{  public int executeNativeQuery(String sql){  return 0;}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  public static Configuration createConfiguration(){  Configuration conf=new Configuration();  conf.addResource("nutch-default.xml");  conf.addResource("crawl-tests.xml");  return conf;}  }
class C{  public static Iterator<ResultSetMetaDataWrapper> iterator(ResultSetMetaData resultSetMetaData){  return new ResultSetMetaDataIterator(resultSetMetaData);}  }
class C{  public String classIndexTipText(){  return "Index of the class upon which to base the misclassifications. " + "If < 0 will use any current set class or default to the last attribute.";}  }
class C{  protected void tag(String tag,String name,String value,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print(' ');  m_out.print(name);  m_out.print('=');  m_out.print('\"');  escapeString(value);  m_out.print('\"');  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  @Override public String parse(WbXmlParser parser,byte[] data) throws IOException {  if (data == null) {    return null;  }  String value=new String(hexArrayToCharArray(data));  String year="0000";  if (value.length() >= 4) {    year=value.substring(0,4);  }  String month="00";  if (value.length() >= 6) {    month=value.substring(4,6);  }  String day="00";  if (value.length() >= 8) {    day=value.substring(6,8);  }  String hour="00";  if (value.length() >= 10) {    hour=value.substring(8,10);  }  String minute="00";  if (value.length() >= 12) {    minute=value.substring(10,12);  }  String second="00";  if (value.length() >= 14) {    second=value.substring(12,14);  }  return new StringBuilder(year).append("-").append(month).append("-").append(day).append("T").append(hour).append(":").append(minute).append(":").append(second).append("Z").toString();}  }
class C{  private void comprobarAlmacenamiento(String idRepositorioEcmDefecto,CampoDocumentoElectronico campoDocumentoElectronico) throws TransferenciaElectronicaException {  Almacenamiento almacenamiento=campoDocumentoElectronico.getAlmacenamiento();  if (campoDocumentoElectronico.getUbicacion().isBinario() || almacenamiento.isRepositorio()) {    Repositorio repositorioDestino=almacenamiento.getRepositorio();    if (repositorioDestino == null || StringUtils.isBlank(repositorioDestino.getIdRepositorio())) {      if (logger.isDebugEnabled()) {        logger.debug("No se ha definido repositorio de unidad documental, se utiliza el definido en la serie");      }      if (idRepositorioEcmDefecto != null) {        repositorioDestino=new Repositorio();        repositorioDestino.setIdRepositorio(idRepositorioEcmDefecto);        almacenamiento.setRepositorio(repositorioDestino);      } else {        throw new TransferenciaElectronicaException(TransferenciasElectronicasConstants.ERROR_SIN_REPOSITORIO_ALMACENAMIENTO_DEFECTO,new Object[]{repositorioDestino,campoDocumentoElectronico});      }    }    if (StringUtils.isBlank(repositorioDestino.getIdRepositorio())) {      throw new TransferenciaElectronicaException(TransferenciasElectronicasConstants.ERROR_INFORMACION_REQUERIDA,new Object[]{TransferenciasElectronicasConstants.PARAMETRO_REPOSITORIO_ALMACENAMIENTO,campoDocumentoElectronico});    }    comprobarRepositorioExterno(campoDocumentoElectronico,(Repositorio)repositorioDestino);  }}  }
class C{  public long tryReadLastConfirmed(LedgerDescriptor ledgerDesc) throws BKException {  return FutureUtils.bkResult(asyncTryReadLastConfirmed(ledgerDesc));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateTrx() == null)   setDateTrx(new Timestamp(System.currentTimeMillis()));  if (getDateAcct() == null) {    Timestamp ts=getNewerDateAcct();    if (ts == null)     ts=getDateTrx();    setDateAcct(ts);  }  if (getM_AttributeSetInstance_ID() == 0 && getM_InOutLine_ID() != 0) {    MInOutLine iol=new MInOutLine(getCtx(),getM_InOutLine_ID(),get_TrxName());    setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());  }  return true;}  }
class C{  public static void installExtraFunction(PredefinedJEPFunction foo){  singleReflectionFunctionTable.put(foo);}  }
class C{  @Override public boolean wasNull(){  return wasNull;}  }
class C{  public void reset(){  for (int i=0; i < delegates.size(); i++) {    delegates.set(i,AllowFilter.instance());  }}  }
class C{  public static MagicNotImplementedException UNEXPECTED(String s){  return new MagicNotImplementedException(s,false);}  }
class C{  public void release(){  cancelPendingAdjustTabMode();  cancelPendingSetTabsFromPagerAdapter();  cancelPendingUpdateScrollPosition();  if (mInternalDataSetObserver != null) {    mViewPager.getAdapter().unregisterDataSetObserver(mInternalDataSetObserver);    mInternalDataSetObserver=null;  }  if (mInternalOnTabSelectedListener != null) {    mTabLayout.setOnTabSelectedListener(null);    mInternalOnTabSelectedListener=null;  }  if (mInternalTabLayoutOnPageChangeListener != null) {    mViewPager.removeOnPageChangeListener(mInternalTabLayoutOnPageChangeListener);    mInternalTabLayoutOnPageChangeListener=null;  }  mUserOnTabSelectedListener=null;  mViewPager=null;  mTabLayout=null;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public MyHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  @Override protected void onSizeChanged(int width,int height,int oldWidth,int oldHeight){  super.onSizeChanged(width,height,oldWidth,oldHeight);  setVerticalDragRange(height);  setHorizontalDragRange(width);}  }
class C{  public DoStatement createDoStatement(){  DoStatementImpl doStatement=new DoStatementImpl();  return doStatement;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tAttribute type to delete. Valid options are \"nominal\", \n" + "\t\"numeric\", \"string\", \"date\" and \"relational\".\n" + "\t(default \"string\")","T",1,"-T <nominal|numeric|string|date|relational>"));  newVector.addElement(new Option("\tInvert matching sense (i.e. only keep specified columns)","V",0,"-V"));  return newVector.elements();}  }
class C{  @Deprecated public void listTags(OnClientCallback<List<Tag>> callback){  AsyncReflector.execute(mClient,callback,"listTags",mAuthenticationToken);}  }
class C{  public void addInstruction(final ReilInstruction instruction){  addInstructionWithDelta(instruction,0);}  }
class C{  private boolean tryToEnsureNumberOfBytesInBuffer(int minCapacity) throws IOException {  while (buffer.size() <= minCapacity && !eof) {    eof=inChannel.read(readBuffer) == -1;    readBuffer.flip();    buffer=buffer.concat(ByteString.copyFrom(readBuffer));    readBuffer.clear();  }  return buffer.size() >= minCapacity;}  }
class C{  public Person(Organization org,String firstName,String lastName,double salary,String resume){  id=ID_GEN.incrementAndGet();  orgId=org.id();  this.firstName=firstName;  this.lastName=lastName;  this.salary=salary;  this.resume=resume;}  }
class C{  public ElasticInterpolator(EasingMode easingMode){  super(easingMode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.849 -0500",hash_original_method="6737AABC2F88EDB7F71CE587CF7F9739",hash_generated_method="A0E45354F40988C3676D71B503879BA5") public void writeBytes(byte[] buffer,int srcOffset,int destOffset,int count) throws IOException {  if (isDeactivated()) {    throw new IOException("Can't write to deactivated memory file.");  }  if (srcOffset < 0 || srcOffset > buffer.length || count < 0 || count > buffer.length - srcOffset || destOffset < 0 || destOffset > mLength || count > mLength - destOffset) {    throw new IndexOutOfBoundsException();  }  native_write(mFD,mAddress,buffer,srcOffset,destOffset,count,mAllowPurging);}  }
class C{  public final void make() throws Exception {  makeParents(getParent());  if (_makeList != null) {    for (    Loader loader : _makeList) {      loader.make();    }  }}  }
class C{  public static boolean allChildrenAreNot(ASTExpression node){  for (  SimpleNode child : getNodeIterator(node)) {    if (!isNotFlag(child)) {      return false;    }  }  return true;}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{namespaceId}/users") @Description("Update users allowed to use this namespace.") public NamespaceDto updateUsersForNamespace(@Context HttpServletRequest req,@PathParam("namespaceId") final BigInteger namespaceId,final Set<String> usernames){  PrincipalUser remoteUser=getRemoteUser(req);  if (namespaceId == null || namespaceId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Namespace Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (usernames == null) {    throw new WebApplicationException("Cannot update with null users.",Status.BAD_REQUEST);  }  Namespace namespace=_namespaceService.findNamespaceByPrimaryKey(namespaceId);  if (namespace == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,namespace.getCreatedBy(),remoteUser);  namespace.setUsers(_getPrincipalUserByUserName(usernames));  namespace=_namespaceService.updateNamespace(namespace);  return NamespaceDto.transformToDto(namespace);}  }
class C{  public double linearDistance(final Vector v){  return Math.sqrt(linearDistanceSquared(v));}  }
class C{  public CSVShapeInfoFile(String name) throws MalformedURLException {  super(name);}  }
class C{  private static ReilOperand check3(final ReilOperand thirdOperand){  Preconditions.checkNotNull(thirdOperand,"Error: Third operand can not be null");  return thirdOperand;}  }
class C{  private void updateConfig(HttpServletRequest request,InstructionalOfferingConfigEditForm frm) throws Exception {  Vector sp=(Vector)sessionContext.getAttribute(SimpleItypeConfig.CONFIGS_ATTR_NAME);  if (sp == null || sp.size() == 0)   return;  RoomGroup rg=RoomGroup.getGlobalDefaultRoomGroup(sessionContext.getUser().getCurrentAcademicSessionId());  InstrOfferingConfig ioc=null;  InstructionalOffering io=null;  org.hibernate.Session hibSession=null;  Transaction tx=null;  try {    InstructionalOfferingDAO ioDao=new InstructionalOfferingDAO();    InstrOfferingConfigDAO iocDao=new InstrOfferingConfigDAO();    hibSession=iocDao.getSession();    tx=hibSession.beginTransaction();    io=ioDao.get(new Long(frm.getInstrOfferingId()));    Long configId=frm.getConfigId();    Boolean unlimitedEnroll=(frm.getUnlimited() == null) ? new Boolean(false) : frm.getUnlimited();    int limit=(unlimitedEnroll.booleanValue()) ? 0 : frm.getLimit();    ClassDurationType dtype=(frm.getDurationType() == null || frm.getDurationType() < 0 ? null : ClassDurationTypeDAO.getInstance().get(frm.getDurationType(),hibSession));    InstructionalMethod imeth=(frm.getInstructionalMethod() == null || frm.getInstructionalMethod() < 0 ? null : InstructionalMethodDAO.getInstance().get(frm.getInstructionalMethod(),hibSession));    if (configId == null || configId.intValue() == 0) {      ioc=new InstrOfferingConfig();      ioc.setLimit(new Integer(limit));      ioc.setName(frm.getName());      ioc.setUnlimitedEnrollment(unlimitedEnroll);      ioc.setInstructionalOffering(io);      ioc.setClassDurationType(dtype);      ioc.setInstructionalMethod(imeth);      io.addToinstrOfferingConfigs(ioc);      hibSession.saveOrUpdate(ioc);      hibSession.saveOrUpdate(io);    } else {      ioc=iocDao.get(configId);      ioc.setLimit(new Integer(limit));      ioc.setName(frm.getName());      ioc.setUnlimitedEnrollment(unlimitedEnroll);      ioc.setClassDurationType(dtype);      ioc.setInstructionalMethod(imeth);    }    HashMap notDeletedSubparts=new HashMap();    for (int i=0; i < sp.size(); i++) {      SimpleItypeConfig sic=(SimpleItypeConfig)sp.elementAt(i);      createOrUpdateSubpart(request,hibSession,sic,ioc,null,rg,notDeletedSubparts);      createOrUpdateClasses(request,hibSession,sic,ioc,null);    }    Set s=ioc.getSchedulingSubparts();    for (Iterator i=s.iterator(); i.hasNext(); ) {      SchedulingSubpart subp=(SchedulingSubpart)i.next();      if (subp.getParentSubpart() == null) {        Debug.debug("Setting parents for " + subp.getItypeDesc());        updateParentClasses(subp,null,hibSession,notDeletedSubparts);      }    }    deleteSubpart(request,hibSession,ioc,notDeletedSubparts);    hibSession.saveOrUpdate(ioc);    hibSession.saveOrUpdate(io);    String className=ApplicationProperty.ExternalActionInstrOffrConfigChange.value();    ExternalInstrOffrConfigChangeAction configChangeAction=null;    if (className != null && className.trim().length() > 0) {      configChangeAction=(ExternalInstrOffrConfigChangeAction)(Class.forName(className).newInstance());      if (!configChangeAction.validateConfigChangeCanOccur(io,hibSession)) {        throw new Exception("Configuration change violates rules for Add On, rolling back the change.");      }    }    io.computeLabels(hibSession);    ChangeLog.addChange(hibSession,sessionContext,ioc,ChangeLog.Source.INSTR_CFG_EDIT,(configId == null || configId.intValue() == 0 ? ChangeLog.Operation.CREATE : ChangeLog.Operation.UPDATE),ioc.getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),null);    hibSession.flush();    tx.commit();    hibSession.refresh(ioc);    hibSession.refresh(io);    if (configChangeAction != null) {      configChangeAction.performExternalInstrOffrConfigChangeAction(io,hibSession);    }  } catch (  Exception e) {    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    try {      if (ioc != null)       hibSession.refresh(ioc);    } catch (    Exception e2) {    }    try {      if (io != null)       hibSession.refresh(io);    } catch (    Exception e3) {    }    Debug.error(e);    throw (e);  }}  }
class C{  public boolean isFillPoints(){  return mFillPoints;}  }
class C{  protected SVGOMUseShadowRoot(){}  }
class C{  public void deactivate(URI id){  deactivate(id,false);}  }
class C{  public static boolean scalarDeclarationWrapper(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  boolean r=false;  assert b instanceof PerlBuilder;  boolean flagBackup=((PerlBuilder)b).setSpecialVariableNamesAllowed(false);  if (PerlParserImpl.scalar_variable(b,l)) {    m.done(VARIABLE_DECLARATION_WRAPPER);    r=true;  } else {    m.drop();  }  ((PerlBuilder)b).setSpecialVariableNamesAllowed(flagBackup);  return r;}  }
class C{  private void updateAction(){  boolean atLeastOneSynapseSelected=(networkPanel.getSelectedModelSynapses().size() > 0);  if (atLeastOneSynapseSelected) {    setEnabled(true);  } else {    setEnabled(false);  }}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  try {    if (XHTML_NS.equals(namespaceURI) && Arrays.binarySearch(emptyElements,localName) < 0) {      writer.write("</");      writer.write(localName);      writer.write('>');    }  } catch (  IOException e) {    throw (SAXException)new SAXException(e).initCause(e);  }}  }
class C{  @Ignore @Test public void testGatewaySenderEventListenerInvocationWithoutLocator(){  int mPort=AvailablePortHelper.getRandomAvailablePortForDUnitSite();  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  final Map keyValues=new HashMap();  for (int i=0; i < 1000; i++) {    keyValues.put(i,i);  }  vm4.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  fail("tried to invoke missing method");}  }
class C{  public static void validateOpenPort(String port,Application application) throws CheckException {  try {    Integer.parseInt(port);  } catch (  NumberFormatException e) {    String messageTranslated=messageSource.getMessage("port.format",null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + port);  }  if (Integer.parseInt(port) <= 0) {    String messageTranslated=messageSource.getMessage("port.format",null,Locale.ENGLISH);    throw new CheckException(messageTranslated + " : " + port);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  checkCosting();  return success;}  }
class C{  @SuppressWarnings("rawtypes") public static void main(final String[] args) throws Exception {  new RAMGASRunner(args).call();}  }
class C{  public static void MsgToast(Context context,String toask){  Toast.makeText(context,toask,Toast.LENGTH_LONG).show();}  }
class C{  public void addNearEvicted(KeyCacheObject key){  if (nearEvicted == null)   nearEvicted=new ArrayList<>();  nearEvicted.add(key);}  }
class C{  protected void attemptGridPaintSelection(){  Color c;  c=JColorChooser.showDialog(this,localizationResources.getString("Grid_Color"),Color.blue);  if (c != null) {    this.gridPaintSample.setPaint(c);  }}  }
class C{  public final void origin(ReadonlyVec3D o,float len){  final float x=o.x();  final float y=o.y();  final float z=o.z();  gfx.stroke(255,0,0);  gfx.line(x,y,z,x + len,y,z);  gfx.stroke(0,255,0);  gfx.line(x,y,z,x,y + len,z);  gfx.stroke(0,0,255);  gfx.line(x,y,z,x,y,z + len);}  }
class C{  public DomainElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public String toString(String field){  float boost=getBoost();  return super.getOptions() + (boost != 1.0 ? "(" : "") + (calcDist ? "geofilt" : "bbox")+ "(latlonSource="+ origField+ "("+ latSource+ ","+ lonSource+ ")"+ ",latCenter="+ latCenter+ ",lonCenter="+ lonCenter+ ",dist="+ dist+ ",latMin="+ latMin+ ",latMax="+ latMax+ ",lonMin="+ lonMin+ ",lonMax"+ lonMax+ ",lon2Min="+ lon2Min+ ",lon2Max"+ lon2Max+ ",calcDist="+ calcDist+ ",planetRadius="+ planetRadius+ ")"+ (boost == 1.0 ? "" : ")^" + boost);}  }
class C{  public boolean contains(final char c){  final byte low=(byte)(c & 0xFF);  final byte high=(byte)(c >> 8 & 0xFF);  for (int i=0; i < data.length; i+=2) {    if (data[i] == low && data[i + 1] == high) {      return true;    }  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(", unit: ");  result.append(unit);  result.append(')');  return result.toString();}  }
class C{  public void testInit_RequestsPatientDetails(){  mController.init();  mMockAppModel.fetchSinglePatient(mFakeCrudEventBus,PATIENT_UUID_1);}  }
class C{  @Override protected void reset(){  this.bowtie=null;}  }
class C{  public static float screenToScroll(float x,float warpSize){  if (x <= 0)   return 0;  if (x >= warpSize)   return x + warpSize;  return (float)Math.sqrt(x * warpSize) * 2;}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  int index;  if (noRoot) {    do {      index=MathUtils.nextInt(tree.getNodeCount());    } while (index == tree.getRoot().getNumber());  } else {    index=MathUtils.nextInt(tree.getNodeCount());  }  List<NodeRef> listNode=new ArrayList<NodeRef>();  getSubtree(listNode,tree.getNode(index));  double oldValue, newValue;  double logq=0;  for (  NodeRef node : listNode) {    oldValue=tree.getNodeRate(node);    newValue=oldValue * scale;    tree.setNodeRate(node,newValue);  }  logq=(listNode.size() - 2) * Math.log(scale);  return logq;}  }
class C{  void openPortButtonActionPerformed(java.awt.event.ActionEvent e){  log.info("Open button pushed");  openPortButton.setEnabled(false);  portBox.setEnabled(false);  openPort((String)portBox.getSelectedItem(),"JMRI");  readerThread=new Thread(new Reader());  readerThread.start();  checkButton.setEnabled(true);  log.info("Open button processing complete");}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  public BaseItemStreamRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Item.class);}  }
class C{  public T caseEntity_(Entity_ object){  return null;}  }
class C{  public static TypeMirror substituteMethodReturnType(TypeMirror methodType,TypeMirror substitutedReceiverType){  if (methodType.getKind() != TypeKind.TYPEVAR) {    return methodType;  }  String t=methodType.toString();  Type finalReceiverType=(Type)substitutedReceiverType;  int i=0;  for (  TypeSymbol typeParam : finalReceiverType.tsym.getTypeParameters()) {    if (t.equals(typeParam.toString())) {      return finalReceiverType.getTypeArguments().get(i);    }    i++;  }  assert false;  return null;}  }
class C{  public void testDecodeAttributeBody() throws StunException {  char offset=0;  UsernameAttribute decoded=new UsernameAttribute();  char length=(char)usernameValue.length();  decoded.decodeAttributeBody(usernameValue.getBytes(),offset,length);  assertEquals("decode failed",usernameAttribute,decoded);}  }
class C{  public String uploadVideo(Context context,Uri videoUri){  String filePath=VideoMediaStoreUtils.getPath(context,videoUri);  Video androidVideo=VideoMediaStoreUtils.getVideo(context,filePath);  if (androidVideo != null) {    File videoFile=new File(filePath);    if (videoFile.length() < Constants.MAX_SIZE_MEGA_BYTE) {      try {        Video receivedVideo=mVideoServiceProxy.addVideo(androidVideo);        if (receivedVideo != null) {          VideoStatus status=mVideoServiceProxy.setVideoData(receivedVideo.getId(),new TypedFile("video/mpeg",videoFile));          if (status.getState() == VideoState.READY) {            return STATUS_UPLOAD_SUCCESSFUL;          }        }      } catch (      Exception e) {        return STATUS_UPLOAD_ERROR;      }    } else     return STATUS_UPLOAD_ERROR_FILE_TOO_LARGE;  }  return STATUS_UPLOAD_ERROR;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CCombinedBottomPanel(final CGraphModel model,final CGraphPanelSynchronizer synchronizer,final CPerspectiveModel perspectiveModel){  super(new BorderLayout());  m_model=model;  m_synchronizer=synchronizer;  m_perspectiveModel=perspectiveModel;  m_debugBottomPanel=new CDebugBottomPanel(model,((CDebugPerspectiveModel)perspectiveModel.getModel(PerspectiveType.DebugPerspective)));  add(m_standardBottomPanel);  m_extensions=CAbstractGraphPanelExtensionFactory.getExtensions();  registerExtensions();  perspectiveModel.addListener(m_listener);}  }
class C{  public TilesetGroupAnimationMap(){  tilesets=new HashMap<String,TilesetAnimationMap>();}  }
class C{  public boolean checkProgressCBValues(int[] data){  boolean retFlag=false;  for (int i=0; i < 100; i++) {    if (data[i] == 100) {      retFlag=true;      break;    } else {      retFlag=false;    }  }  return retFlag;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  EntryLink.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.replaceElement(RecurrenceExceptionEntry.KEY);}  }
class C{  private Scenario createScenario(){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network net=sc.getNetwork();  NetworkFactory nf=sc.getNetwork().getFactory();  Node n1=nf.createNode(Id.create(1,Node.class),new Coord((double)0,(double)0));  net.addNode(n1);  Node n2=nf.createNode(Id.create(2,Node.class),new Coord((double)500,(double)0));  net.addNode(n2);  Link l=nf.createLink(Id.create(1,Link.class),n1,n2);  net.addLink(l);  l.setLength(600.0);  l.setCapacity(3600);  l.setFreespeed(6.0);  return sc;}  }
class C{  @Override public void close() throws IOException {  closed=true;  def.end();  in.close();}  }
class C{  public Object[] toArray(){  Object[] rv=new Object[delegate.size()];  delegate.copyInto(rv);  return rv;}  }
class C{  public static void deletePropertyFile(){  String fileName=getFileName(s_client);  File file=new File(fileName);  if (file.exists()) {    try {      if (!file.delete())       file.deleteOnExit();      s_prop=new Properties();      log.config(fileName);    } catch (    Exception e) {      log.log(Level.WARNING,"Cannot delete Property file",e);    }  }}  }
class C{  public void testRandomHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,analyzer,30 * RANDOM_MULTIPLIER,8192);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getAudioOutputOptions();  }  return null;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(KEY_ID)) {    id=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectKeyIdentifierExtension.");  }  encodeThis();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Partition(int[] elements,int numberOfPartitions){  init(elements,numberOfPartitions);}  }
class C{  public void columnMarginChanged(ChangeEvent e){  if (table.getTableHeader().getResizingColumn() == null)   return;  marginChanged=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.EMBEDDED) {    return new java.io.File("/app/sage/STVs/Cheetah/Cheetah.opt.stv");  } else   return new java.io.File(System.getProperty("user.dir"),"STVs" + java.io.File.separatorChar + ("SageTV7" + java.io.File.separatorChar + "SageTV7.xml"));}  }
class C{  private void init(){  nodesPanel=new JPanel();  chooserPanel=new JPanel();  this.setLayout(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.FIRST_LINE_START;  nodesPanel.setLayout(new BoxLayout(nodesPanel,BoxLayout.Y_AXIS));  nodesPanel.setBorder(BorderFactory.createTitledBorder(getBorder(),"Nodes"));  if (shownNodes.size() > MAX_NODE_COUNT) {    String[] groupNames=new String[(shownNodes.size() - 1) / MAX_NODE_COUNT + 1];    int last=0;    for (int i=0, n=shownNodes.size(); i <= (n - 1) / MAX_NODE_COUNT; i++) {      int next=MAX_NODE_COUNT * (i + 1) - 1;      if (next > n) {        next=n - 1;      }      groupNames[i]=(last + "..." + next);      last=next + 1;    }    groupChooser=new JComboBox(groupNames);    groupChooser.addActionListener(this);    chooserPanel.add(groupChooser);  }  setNodes(0);  c.gridy=0;  this.add(chooserPanel,c);  c.gridy=1;  this.add(nodesPanel,c);}  }
class C{  public double intercept(){  return alpha;}  }
class C{  public LinkedList<Diff> diff_fromDelta(String text1,String delta) throws IllegalArgumentException {  LinkedList<Diff> diffs=new LinkedList<Diff>();  int pointer=0;  String[] tokens=delta.split("\t");  for (  String token : tokens) {    if (token.length() == 0) {      continue;    }    String param=token.substring(1);switch (token.charAt(0)) {case '+':      param=param.replace("+","%2B");    try {      param=URLDecoder.decode(param,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new Error("This system does not support UTF-8.",e);    }catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Illegal escape in diff_fromDelta: " + param,e);    }  diffs.add(new Diff(Operation.INSERT,param));break;case '-':case '=':int n;try {n=Integer.parseInt(param);} catch (NumberFormatException e) {throw new IllegalArgumentException("Invalid number in diff_fromDelta: " + param,e);}if (n < 0) {throw new IllegalArgumentException("Negative number in diff_fromDelta: " + param);}String text;try {text=text1.substring(pointer,pointer+=n);} catch (StringIndexOutOfBoundsException e) {throw new IllegalArgumentException("Delta length (" + pointer + ") larger than source text length ("+ text1.length()+ ").",e);}if (token.charAt(0) == '=') {diffs.add(new Diff(Operation.EQUAL,text));} else {diffs.add(new Diff(Operation.DELETE,text));}break;default :throw new IllegalArgumentException("Invalid diff operation in diff_fromDelta: " + token.charAt(0));}}if (pointer != text1.length()) {throw new IllegalArgumentException("Delta length (" + pointer + ") smaller than source text length ("+ text1.length()+ ").");}return diffs;}  }
class C{  private void updateToolWindowTitle(){  final CommanderPanel panel=getActivePanel();  updateToolWindowTitle(panel);}  }
class C{  @Deprecated public static Result averageResults(Result folds[]){  Result r=new Result();  r.info=folds[0].info;  for (  String metric : folds[0].output.keySet()) {    if (folds[0].output.get(metric) instanceof Double) {      double values[]=new double[folds.length];      for (int i=0; i < folds.length; i++) {        values[i]=(Double)folds[i].output.get(metric);      }      String avg_sd=Utils.doubleToString(Utils.mean(values),5,3) + " +/- " + Utils.doubleToString(Math.sqrt(Utils.variance(values)),5,3);      r.output.put(metric,avg_sd);    } else     if (folds[0].output.get(metric) instanceof Integer) {      double values[]=new double[folds.length];      for (int i=0; i < folds.length; i++) {        values[i]=(Integer)folds[i].output.get(metric);      }      String avg_sd=Utils.doubleToString(Utils.mean(values),5,3) + " +/- " + Utils.doubleToString(Math.sqrt(Utils.variance(values)),5,3);      r.output.put(metric,avg_sd);    } else     if (folds[0].output.get(metric) instanceof double[]) {      double avg[]=new double[((double[])folds[0].output.get(metric)).length];      for (int i=0; i < folds.length; i++) {        for (int j=0; j < avg.length; j++) {          avg[j]=avg[j] + ((double[])folds[i].output.get(metric))[j] * 1. / folds.length;        }      }      r.output.put(metric,avg);    }  }  for (  String metric : folds[0].vals.keySet()) {    if (folds[0].vals.get(metric) instanceof Double) {      double values[]=new double[folds.length];      for (int i=0; i < folds.length; i++) {        values[i]=(Double)folds[i].vals.get(metric);      }      String avg_sd=Utils.doubleToString(Utils.mean(values),5,3) + " +/- " + Utils.doubleToString(Math.sqrt(Utils.variance(values)),5,3);      r.vals.put(metric,avg_sd);    }  }  if (r.getInfo("Type").equalsIgnoreCase("MLi")) {    r.output.put("Window indices",A.make_sequence(folds.length));    for (    String metric : folds[0].output.keySet()) {      if (folds[0].output.get(metric) instanceof Double) {        double values[]=new double[folds.length];        for (int i=0; i < folds.length; i++) {          values[i]=(Double)folds[i].output.get(metric);        }        r.output.put("" + metric + " per window",values);      } else       if (folds[0].output.get(metric) instanceof Integer) {        int values[]=new int[folds.length];        for (int i=0; i < folds.length; i++) {          values[i]=(Integer)folds[i].output.get(metric);        }        r.output.put("" + metric + " per window",values);      }    }  }  r.setInfo("Type","CV");  return r;}  }
class C{  @Override public Void call() throws Exception {  try {    NodeHolder nodeHolder=processDataRows(dataRows);    int indexInNodeHolderArray=(sequenceNumber - 1) % numberOfCores;    blockletDataHolder.put(nodeHolder,indexInNodeHolderArray);    return null;  } catch (  Throwable throwable) {    consumerExecutorService.shutdownNow();    resetBlockletProcessingCount();    throw new CarbonDataWriterException(throwable.getMessage());  }}  }
class C{  public Struct outer(){  return _outer;}  }
class C{  public boolean hasBillingInformation(){  return hasExtension(BillingInformation.class);}  }
class C{  protected void onFatalError(Throwable throwable){  Log.e(TAG,"Fatal error",throwable);  mView.showError(true,throwable);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORT_SPECIFIER;}  }
class C{  public GraphicsNode nodeHitAt(Point2D p){  if (hitCheckChildren)   return super.nodeHitAt(p);  return (contains(p) ? this : null);}  }
class C{  protected boolean beforeSave(boolean newRecord){  String value=getValue();  if (value == null)   value="";  if (value.equals("-1"))   setValue("");  return true;}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  public IntersectionMatrix(){  matrix=new int[3][3];  setAll(Dimension.FALSE);}  }
class C{  public static void iteratePrev(final int startInstruction,@NotNull final Instruction[] instructions,@NotNull final Function<Instruction,Operation> closure){  final IntStack stack=new IntStack(instructions.length);  final boolean[] visited=new boolean[instructions.length];  stack.push(startInstruction);  while (!stack.empty()) {    ProgressManager.checkCanceled();    final int num=stack.pop();    final Instruction instr=instructions[num];    final Operation nextOperation=closure.fun(instr);    if (nextOperation == Operation.CONTINUE) {      continue;    }    if (nextOperation == Operation.BREAK) {      break;    }    assert nextOperation == Operation.NEXT;    for (    Instruction pred : instr.allPred()) {      final int predNum=pred.num();      if (!visited[predNum]) {        visited[predNum]=true;        stack.push(predNum);      }    }  }}  }
class C{  public static long size(Path self) throws IOException {  return Files.size(self);}  }
class C{  public void tryRegex(Pattern pattern,Object obj){  if (obj instanceof IHelpable) {    if (pattern == null) {      help((IHelpable)obj);    } else {      if (pattern.matcher(((IHelpable)obj).getCommandName()).matches())       help((IHelpable)obj);    }  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  display.getSize(theScreenResolution);  screenResolution=theScreenResolution;  if (rotation == Surface.ROTATION_0) {    int temp=screenResolution.x;    screenResolution.x=screenResolution.y;    screenResolution.y=temp;  }  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public static void pad(ArrayDataOutput stream,long size,byte fill) throws FitsException {  int len=padding(size);  if (len > 0) {    byte[] buf=new byte[len];    Arrays.fill(buf,fill);    try {      stream.write(buf);      stream.flush();    } catch (    Exception e) {      throw new FitsException("Unable to write padding",e);    }  }}  }
class C{  public float length(){  return FastMath.sqrt(lengthSquared());}  }
class C{  public static String generateRandomString(int count){  Random random=new Random();  StringBuffer buffer=new StringBuffer();  while (count-- != 0) {    char ch=(char)(random.nextInt(96) + 32);    buffer.append(ch);  }  return buffer.toString();}  }
class C{  public Context createContext(Context parentContext){  return new MortarContextWrapper(parentContext,this);}  }
class C{  public static void arcPrint(final RasterPlotter matrix,final int cx,final int cy,final int radius,final double angle,final String message,final int intensity){  final int x=cx + (int)((radius + 1) * Math.cos(RasterPlotter.PI180 * angle));  final int y=cy - (int)((radius + 1) * Math.sin(RasterPlotter.PI180 * angle));  int yp=y + 3;  if ((angle > arcDist) && (angle < 180 - arcDist))   yp=y;  if ((angle > 180 + arcDist) && (angle < 360 - arcDist))   yp=y + 6;  if ((angle > (90 - arcDist)) && (angle < (90 + arcDist)))   yp-=6;  if ((angle > (270 - arcDist)) && (angle < (270 + arcDist)))   yp+=6;  int xp=x - 3 * message.length();  if ((angle > (90 + arcDist)) && (angle < (270 - arcDist)))   xp=x - 6 * message.length();  if ((angle < (90 - arcDist)) || (angle > (270 + arcDist)))   xp=x;  print(matrix,xp,yp,0,message,-1,intensity);}  }
class C{  public void merge(CompositeChange change){  Change[] others=change.getChildren();  for (int i=0; i < others.length; i++) {    Change other=others[i];    change.remove(other);    add(other);  }}  }
class C{  private JComponent buildCalculator(){  Box mainBox=Box.createHorizontalBox();  Box varBox=Box.createVerticalBox();  varBox.add(createLabel("Variables:"));  varBox.add(createVariableList());  varBox.add(Box.createVerticalGlue());  Box expressionBox=Box.createVerticalBox();  Box equationEditors=Box.createVerticalBox();  equationEditors.setBorder(new TitledBorder("Edit Expressions"));  JPanel editors1=initializeExpressionEditors();  JScrollPane pane=new JScrollPane(editors1);  pane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);  LayoutUtils.setAllSizes(pane,new Dimension(editors1.getPreferredSize().width + 25,100));  equationEditors.add(pane);  Box b=Box.createHorizontalBox();  JLabel label=new JLabel("Example using wildcard: New$ = $ + 1");  label.setFont(new Font("Dialog",Font.BOLD,10));  b.add(label);  b.add(Box.createHorizontalGlue());  equationEditors.add(b);  equationEditors.add(Box.createVerticalStrut(10));  equationEditors.add(createAddRemoveButtons());  equationEditors.add(Box.createVerticalGlue());  Box box=Box.createHorizontalBox();  box.add(createCalculatorNumberPad());  box.add(Box.createHorizontalStrut(40));  box.add(createFunctionList());  box.add(Box.createHorizontalStrut(10));  box.add(Box.createHorizontalGlue());  expressionBox.add(equationEditors);  expressionBox.add(Box.createVerticalStrut(15));  expressionBox.add(box);  expressionBox.add(Box.createVerticalGlue());  mainBox.add(varBox);  mainBox.add(Box.createHorizontalStrut(3));  mainBox.add(createSelectVariableButton());  mainBox.add(Box.createHorizontalStrut(3));  mainBox.add(expressionBox);  mainBox.add(Box.createHorizontalGlue());  return mainBox;}  }
class C{  public boolean nextBoolean(){  return next(1) != 0;}  }
class C{  @Override public MemBufferHolder<A> resize(long size){  return m_allocator.resizeBuffer(this,size);}  }
class C{  private void expParamChanged(){  if (m_Exp == null)   return;  if (m_ExperimentTypeCBox.getSelectedItem() == TYPE_CROSSVALIDATION_TEXT) {    try {      m_numFolds=Integer.parseInt(m_ExperimentParameterTField.getText());    } catch (    NumberFormatException e) {      return;    }  } else {    try {      m_trainPercent=Double.parseDouble(m_ExperimentParameterTField.getText());    } catch (    NumberFormatException e) {      return;    }  }  if (m_ExperimentTypeCBox.getSelectedItem() == TYPE_CROSSVALIDATION_TEXT) {    if (m_Exp.getResultProducer() instanceof CrossValidationResultProducer) {      CrossValidationResultProducer cvrp=(CrossValidationResultProducer)m_Exp.getResultProducer();      cvrp.setNumFolds(m_numFolds);    } else {      return;    }  } else {    if (m_Exp.getResultProducer() instanceof RandomSplitResultProducer) {      RandomSplitResultProducer rsrp=(RandomSplitResultProducer)m_Exp.getResultProducer();      rsrp.setRandomizeData(m_ExperimentTypeCBox.getSelectedItem() == TYPE_RANDOMSPLIT_TEXT);      rsrp.setTrainPercent(m_trainPercent);    } else {      return;    }  }  m_Support.firePropertyChange("",null,null);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.337 -0500",hash_original_method="90A08A9DD00D03BD7934A3A8059C60AE",hash_generated_method="AD0067790C40DF14C2A78239349B23A0") public static void apply(int gravity,int w,int h,Rect container,int xAdj,int yAdj,Rect outRect){  outRect.addTaint(gravity + w + h+ xAdj+ yAdj+ container.getTaintInt());}  }
class C{  @Override public CompletableFuture<Optional<T>> findFirst(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public BattleAggDialog(Shell parent){  super(parent,SWT.SHELL_TRIM | SWT.MODELESS);  this.setText("SWT Dialog");}  }
class C{  private void updateFileExtension(){  Object selection=treeViewer.getStructuredSelection().getFirstElement();  String elementFileName=elementNameInput.getText();  if (null == selection) {    setFileExtension(defaultFileExtension);  }  if (selection instanceof IFile && elementFileName.equals(((IFile)selection).getName())) {    setFileExtension(((IFile)selection).getFileExtension());  } else   if (selection instanceof IResource) {    IPath basepath;    if (selection instanceof IFile) {      basepath=((IFile)selection).getParent().getFullPath();    } else {      basepath=((IResource)selection).getFullPath();    }    IPath pathOfSelection=basepath.append(elementFileName);    IFile n4jsFile=workspaceRoot.getFile(pathOfSelection.addFileExtension(N4JSGlobals.N4JS_FILE_EXTENSION));    IFile n4jsdFile=workspaceRoot.getFile(pathOfSelection.addFileExtension(N4JSGlobals.N4JSD_FILE_EXTENSION));    if (n4jsdFile.exists()) {      setFileExtension(N4JSGlobals.N4JSD_FILE_EXTENSION);    } else     if (n4jsFile.exists()) {      setFileExtension(N4JSGlobals.N4JS_FILE_EXTENSION);    } else {      setFileExtension(defaultFileExtension);    }  }}  }
class C{  void addChangeListener(ChangeListener changeListener){  this.changeListeners.add(changeListener);}  }
class C{  final public void enable_tracing(){}  }
class C{  public static Context createContext(final Context c,final String path) throws NamingException {  Context crtContext=c;  for (StringTokenizer st=new StringTokenizer(path,"/"); st.hasMoreTokens(); ) {    String tok=st.nextToken();    try {      Object o=crtContext.lookup(tok);      if (!(o instanceof Context)) {        throw new NamingException("Path " + path + " overwrites and already bound object");      }      crtContext=(Context)o;      continue;    } catch (    NameNotFoundException e) {    }    crtContext=crtContext.createSubcontext(tok);  }  return crtContext;}  }
class C{  public static InlineQueryResultLocationBuilder builder(){  return new InlineQueryResultLocationBuilder();}  }
class C{  public String encode(final String value,final String charset) throws EncoderException {  if (value == null) {    return null;  }  try {    return encodeText(value,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  void finish(){  arrayValueMap.setValues();}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.822 -0500",hash_original_method="260530F70C73453962E6EA8579F649BC",hash_generated_method="376CC4AACE3D4EF2452DFC71C9AD511A") public CrashInfo(Parcel in){  exceptionClassName=in.readString();  exceptionMessage=in.readString();  throwFileName=in.readString();  throwClassName=in.readString();  throwMethodName=in.readString();  throwLineNumber=in.readInt();  stackTrace=in.readString();}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public TaskResourceRep hostVcenterChange(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter,URI eventId){  return hostClusterChange(hostId,clusterId,datacenterId,isVcenter,eventId);}  }
class C{  void updateInsets(){  short top=(short)painter.getInset(TOP,this);  short bottom=(short)painter.getInset(BOTTOM,this);  if (captionIndex != -1) {    View caption=getView(captionIndex);    short h=(short)caption.getPreferredSpan(Y_AXIS);    AttributeSet a=caption.getAttributes();    Object align=a.getAttribute(CSS.Attribute.CAPTION_SIDE);    if ((align != null) && (align.equals("bottom"))) {      bottom+=h;    } else {      top+=h;    }  }  setInsets(top,(short)painter.getInset(LEFT,this),bottom,(short)painter.getInset(RIGHT,this));}  }
class C{  public void saveIdentity(String name,IdentityKey identityKey,TrustLevel trustLevel,Date added){  List<Identity> identities=trustedKeys.get(name);  if (identities == null) {    identities=new ArrayList<>();    trustedKeys.put(name,identities);  } else {    for (    Identity id : identities) {      if (!id.identityKey.equals(identityKey))       continue;      if (id.trustLevel.compareTo(trustLevel) < 0) {        id.trustLevel=trustLevel;      }      if (added != null) {        id.added=added;      }      return;    }  }  identities.add(new Identity(identityKey,trustLevel,added != null ? added : new Date()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.861 -0500",hash_original_method="1D3D3676B67FC953B437D952E76D3E93",hash_generated_method="9E50874CE195A9258AD749128620A3E9") @Override public boolean hasWindowFocus(){  return this.isEnabled();}  }
class C{  public boolean fireEvent(EventType eventType,BaseEvent be){  if (firesEvents && listeners != null) {    activeEvent=true;    be.setType(eventType);    List<Listener<BaseEvent>> list=listeners.get(getKey(eventType));    if (list != null) {      List<Listener<BaseEvent>> copy=new ArrayList<Listener<BaseEvent>>(list);      for (      Listener<BaseEvent> l : copy) {        callListener(l,be);      }    }    activeEvent=false;    return !be.isCancelled();  }  return true;}  }
class C{  public double doubleValue(){  return 0.0d;}  }
class C{  public static void initializeEscapeMap(){  if (xmlLowValueEscapeStringsInitialized == true) {    return;  }synchronized (escapeInitLockObject) {    if (xmlLowValueEscapeStringsInitialized == true) {      return;    }    for (int i=0; i < xmlAllowedLowCharacterBound; i++) {      if (isInvalidXMLCharacter(i)) {        String escapedString=String.format("\\u%04x",i);        xmlLowValueEscapeStrings[i]=escapedString;      } else {        xmlLowValueEscapeStrings[i]=null;      }    }    xmlLowValueEscapeStringsInitialized=true;  }}  }
class C{  public void initQQ(String qqAppId){  mQQAppId=qqAppId;}  }
class C{  private void changeRefLink(TransitRoute transitRoute,String childStopFacilityIdStr,String newRefLinkIdStr){  TransitStopFacility childStopToReplace=schedule.getFacilities().get(Id.create(childStopFacilityIdStr,TransitStopFacility.class));  TransitStopFacility childStopReplaceWith=parentStops.getChildStopFacility(getParentId(childStopFacilityIdStr),newRefLinkIdStr);  replaceStopFacilityInRoute(transitRoute,childStopToReplace,childStopReplaceWith);}  }
class C{  public boolean isExclude(){  Object oo=get_Value(COLUMNNAME_IsExclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String resolvePath(Project project,String path){  if (StringUtils.isEmpty(path)) {    return null;  }  File filePath=new File(path);  if (filePath.isAbsolute()) {    if (!filePath.exists()) {      return null;    }    return path;  } else {    if (project == null) {      return null;    }    VirtualFile child=project.getBaseDir().findFileByRelativePath(path);    if (child == null || !child.exists()) {      return null;    }    return child.getPath();  }}  }
class C{  @Override public void mutateOptEventCounterInstruction(Instruction counterInst,IR ir){  if (VM.VerifyAssertions) {    VM._assert(InstrumentedCounter.conforms(counterInst));  }  IntConstantOperand intOp=InstrumentedCounter.getData(counterInst);  int handle=intOp.value;  intOp=InstrumentedCounter.getIndex(counterInst);  int index=intOp.value;  RegisterOperand counterArray=ConvertToLowLevelIR.getStatic(counterInst,ir,AosEntrypoints.counterArrayManagerCounterArraysField);  RegisterOperand array2=InsertALoadOffset(counterInst,ir,REF_ALOAD,TypeReference.JavaLangObject,counterArray,handle);  ConvertToLowLevelIR.doArrayLoad(counterInst.prevInstructionInCodeOrder(),ir,INT_LOAD,2);  RegisterOperand origVal=InsertALoadOffset(counterInst,ir,DOUBLE_ALOAD,TypeReference.Double,array2,index);  ConvertToLowLevelIR.doArrayLoad(counterInst.prevInstructionInCodeOrder(),ir,DOUBLE_LOAD,3);  Operand incOperand=InstrumentedCounter.getIncrement(counterInst);  RegisterOperand newValue=ConvertToLowLevelIR.insertBinary(counterInst,ir,DOUBLE_ADD,TypeReference.Double,origVal,incOperand.copy());  Instruction store=AStore.mutate(counterInst,DOUBLE_ASTORE,newValue,array2.copyU2D(),IRTools.IC(index),null,null);  ConvertToLowLevelIR.doArrayStore(store,ir,DOUBLE_STORE,3);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.142 -0400",hash_original_method="0DCCCF3C7FBF5B5E529AA17B2A2FB2B1",hash_generated_method="534FCB1961D01B4C57FC4404D13D9CF4") public String encode(final String pString,final String charset) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encodeText(pString,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public String format(LogRecord r){  StringBuffer sb=new StringBuffer();  sb.append(r.getLevel().getName() + "\t");  Calendar cal=Calendar.getInstance();  cal.setTime(new Date(r.getMillis()));  StringBuffer time=new StringBuffer();  time.append(format(cal.get(Calendar.YEAR),4) + "-");  time.append(format(cal.get(Calendar.MONTH) + 1,2)).append("-");  time.append(format(cal.get(Calendar.DATE),2)).append(" ");  time.append(format(cal.get(Calendar.HOUR_OF_DAY),2)).append(':');  time.append(format(cal.get(Calendar.MINUTE),2)).append(':');  time.append(format(cal.get(Calendar.SECOND),2)).append(".");  time.append(format(cal.get(Calendar.MILLISECOND),3));  sb.append(time.toString() + " \t");  String cnm=r.getSourceClassName();  String cn="";  if (cnm != null) {    int cnl=cnm.length();    if (cnl > 20) {      cn=r.getSourceClassName().substring(cnl - 19);    } else {      char sp[]={' '};      StringBuffer sb1=new StringBuffer().append(cnm);      cn=sb1.append(sp,0,1).toString();    }  }  sb.append(cn + "\t").append(" ");  sb.append(left(r.getSourceMethodName(),23,' ') + "\t");  sb.append(r.getThreadID() + "\t");  sb.append(formatMessage(r)).append(ls);  if (null != r.getThrown()) {    sb.append("Throwable occurred: ");    Throwable t=r.getThrown();    sb.append(t.toString());  }  return sb.toString();}  }
class C{  private static void addRating(BooksService service,String volumeId,int value) throws IOException, ServiceException {  VolumeEntry newEntry=new VolumeEntry();  newEntry.setId(volumeId);  Rating rating=new Rating();  rating.setMin(1);  rating.setMax(5);  rating.setValue(value);  newEntry.setRating(rating);  try {    service.insert(new URL(USER_ANNOTATION_FEED),newEntry);  } catch (  ServiceException se) {    System.out.println("There was an error adding your rating.\n");    return;  }  System.out.println("Added rating for " + volumeId);}  }
class C{  public final MutableDouble2D subtract(Double2D other1,MutableDouble2D other2){  x=other1.x - other2.x;  y=other1.y - other2.y;  return this;}  }
class C{  private static void writeUnitDisplaySkinSpec(Writer out) throws IOException {  if (udSpec == null) {    return;  }  out.write("\t<" + UI_ELEMENT + ">\n");  out.write("\t\t<" + NAME + ">");  out.write(SkinSpecification.UIComponents.UnitDisplay.getComp());  out.write("</" + NAME + ">\n");  out.write("\t\t\t<" + GeneralTabIdle + ">");  out.write(udSpec.getGeneralTabIdle());  out.write("</" + GeneralTabIdle + ">\n");  out.write("\t\t\t<" + PilotTabIdle + ">");  out.write(udSpec.getPilotTabIdle());  out.write("</" + PilotTabIdle + ">\n");  out.write("\t\t\t<" + ArmorTabIdle + ">");  out.write(udSpec.getArmorTabIdle());  out.write("</" + ArmorTabIdle + ">\n");  out.write("\t\t\t<" + SystemsTabIdle + ">");  out.write(udSpec.getSystemsTabIdle());  out.write("</" + SystemsTabIdle + ">\n");  out.write("\t\t\t<" + WeaponsTabIdle + ">");  out.write(udSpec.getWeaponsTabIdle());  out.write("</" + WeaponsTabIdle + ">\n");  out.write("\t\t\t<" + ExtrasTabIdle + ">");  out.write(udSpec.getExtrasTabIdle());  out.write("</" + ExtrasTabIdle + ">\n");  out.write("\t\t\t<" + GeneralTabActive + ">");  out.write(udSpec.getGeneralTabActive());  out.write("</" + GeneralTabActive + ">\n");  out.write("\t\t\t<" + PilotTabActive + ">");  out.write(udSpec.getPilotTabActive());  out.write("</" + PilotTabActive + ">\n");  out.write("\t\t\t<" + ArmorTabActive + ">");  out.write(udSpec.getArmorTabActive());  out.write("</" + ArmorTabActive + ">\n");  out.write("\t\t\t<" + SystemsTabActive + ">");  out.write(udSpec.getSystemsTabActive());  out.write("</" + SystemsTabActive + ">\n");  out.write("\t\t\t<" + WeaponsTabActive + ">");  out.write(udSpec.getWeaponsTabActive());  out.write("</" + WeaponsTabActive + ">\n");  out.write("\t\t\t<" + ExtraTabActive + ">");  out.write(udSpec.getExtraTabActive());  out.write("</" + ExtraTabActive + ">\n");  out.write("\t\t\t<" + CornerIdle + ">");  out.write(udSpec.getCornerIdle());  out.write("</" + CornerIdle + ">\n");  out.write("\t\t\t<" + CornerActive + ">");  out.write(udSpec.getCornerActive());  out.write("</" + CornerActive + ">\n");  out.write("\t\t\t<" + BackgroundTile + ">");  out.write(udSpec.getBackgroundTile());  out.write("</" + BackgroundTile + ">\n");  out.write("\t\t\t<" + TopLine + ">");  out.write(udSpec.getTopLine());  out.write("</" + TopLine + ">\n");  out.write("\t\t\t<" + BottomLine + ">");  out.write(udSpec.getBottomLine());  out.write("</" + BottomLine + ">\n");  out.write("\t\t\t<" + LeftLine + ">");  out.write(udSpec.getLeftLine());  out.write("</" + LeftLine + ">\n");  out.write("\t\t\t<" + RightLine + ">");  out.write(udSpec.getRightLine());  out.write("</" + RightLine + ">\n");  out.write("\t\t\t<" + TopLeftCorner + ">");  out.write(udSpec.getTopLeftCorner());  out.write("</" + TopLeftCorner + ">\n");  out.write("\t\t\t<" + BottomLeftCorner + ">");  out.write(udSpec.getBottomLeftCorner());  out.write("</" + BottomLeftCorner + ">\n");  out.write("\t\t\t<" + TopRightCorner + ">");  out.write(udSpec.getTopRightCorner());  out.write("</" + TopRightCorner + ">\n");  out.write("\t\t\t<" + BottomRightCorner + ">");  out.write(udSpec.getBottomRightCorner());  out.write("</" + BottomRightCorner + ">\n");  out.write("\t\t\t<" + MechOutline + ">");  out.write(udSpec.getMechOutline());  out.write("</" + MechOutline + ">\n");  out.write("\t</" + UI_ELEMENT + ">\n\n");}  }
class C{  public SVGOMHKernElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static byte[] encrypt(byte[] bytes) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);  byte[] encrypted=cipher.doFinal(bytes);  return Base64.encodeBase64(encrypted);}  }
class C{  public static void finalizeAllEnqueued() throws InterruptedException {  Sentinel sentinel=new Sentinel();  enqueueSentinelReference(sentinel);  sentinel.awaitFinalization();}  }
class C{  public boolean hideInfoMessage(){  View messageView=findViewById(R.id.flying_message);  if (messageView == null) {    logger.warn("Message view not available, so couldn't hide flying message");    return false;  }  ViewAnimationUtil.hideMessageBar(messageView);  return true;}  }
class C{  public Date(final java.util.Date date){  final Calendar c=Calendar.getInstance();  c.setTime(date);  final int d=c.get(Calendar.DAY_OF_MONTH);  final int m=c.get(Calendar.MONTH);  final int y=c.get(Calendar.YEAR);  this.serialNumber=fromDMY(d,m + 1,y);}  }
class C{  public ClientCacheFactory(){  this.dsProps=new Properties();}  }
class C{  public boolean isErrorValue(){  boolean b=m_errorValueFlag;  m_errorValueFlag=false;  return b;}  }
class C{  public void testIsEffective(){  IndexedParent x=new IndexedParent(0,2);  IndexedParent y=new IndexedParent(1,2);  IndexedParent z=new IndexedParent(2,3);  IndexedParent[] threeParents=new IndexedParent[]{x,y,z};  BooleanFunction function=null;  function=new BooleanFunction(threeParents);  function.setValue(0,true);  function.setValue(1,false);  function.setValue(2,false);  function.setValue(3,true);  function.setValue(4,false);  function.setValue(5,false);  function.setValue(6,false);  function.setValue(7,false);  assertTrue(function.isEffective());  function=new BooleanFunction(threeParents);  function.setValue(0,true);  function.setValue(1,false);  function.setValue(2,false);  function.setValue(3,true);  function.setValue(4,true);  function.setValue(5,false);  function.setValue(6,false);  function.setValue(7,true);  assertTrue(!(function.isEffective()));}  }
class C{  public ReplDBMSEvent eventFromRowInsert(long seqno,String schema,String table,String[] names,Object[] values,int fragNo,boolean lastFrag){  Timestamp ts=new Timestamp(System.currentTimeMillis());  return eventFromRowInsert(seqno,schema,table,names,values,fragNo,lastFrag,ts);}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout,Rectangle2D bounds){  this(group,layout,bounds,50);}  }
class C{  public DockNode(Node contents,String title,Node graphic){  this.titleProperty.setValue(title);  this.graphicProperty.setValue(graphic);  this.contents=contents;  dockTitleBar=new DockTitleBar(this);  getChildren().addAll(dockTitleBar,contents);  VBox.setVgrow(contents,Priority.ALWAYS);  this.getStyleClass().add("dock-node");}  }
class C{  public boolean hasCacheInterceptor(){  return m_hasCacheInterceptor;}  }
class C{  public final void putKey(DeterministicKey key){  ImmutableList<ChildNumber> path=key.getPath();  final DeterministicKey parent=key.getParent();  if (parent != null)   lastChildNumbers.put(parent.getPath(),key.getChildNumber());  keys.put(path,key);}  }
class C{  public void resize(int newRows,int newColumns){  rows=newRows;  columns=newColumns;  length=newRows * newColumns;  data=new float[rows * columns];}  }
class C{  public void displayCursor(Cursor cursor){  mCursor=cursor;  mCursorAdapter.changeCursor(cursor);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String docTypeName;  String nodeValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  docTypeName=docType.getName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeNameSVG","svg",docTypeName);  } else {    assertEquals("doctypeName","staff",docTypeName);  }  nodeValue=docType.getNodeValue();  assertNull("initiallyNull",nodeValue);}  }
class C{  public StackBlurFilter(int radius){  this(radius,3);}  }
class C{  private Cursor query(String selection,String[] selectionArgs){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(MAIN_TABLE_NAME + " INNER JOIN " + FREQ_TABLE_NAME+ " ON ("+ MAIN_TABLE_NAME+ "."+ MAIN_COLUMN_ID+ "="+ FREQ_TABLE_NAME+ "."+ FREQ_COLUMN_PAIR_ID+ ")");  qb.setProjectionMap(sDictProjectionMap);  SQLiteDatabase db=sOpenHelper.getReadableDatabase();  Cursor c=qb.query(db,new String[]{MAIN_COLUMN_WORD1,MAIN_COLUMN_WORD2,FREQ_COLUMN_FREQUENCY},selection,selectionArgs,null,null,null);  return c;}  }
class C{  public static Bitmap decodeSampled(Resources resources,int resId,int reqWidth,int reqHeight){  return decodeSampled(resources,resId,getSampleSize(resources,resId,reqWidth,reqHeight));}  }
class C{  public boolean isDynamic(){  return (dynamicStatus == DYNAMIC);}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPreview != null) {    mPreview.stop();  }}  }
class C{  void calcBins4Sec(double Range,double Angle,double Tolerance,double BandWidth){  int ad=0;  if (Range % this.LagSize == 0) {    ad=0;  }  double width=0;  if (this.Anisotropic) {    bins=new bin[(int)Math.ceil(Range / this.LagSize) + ad][1];    int r=0;    for (int i=0; i < Pairs.size(); i++) {      boolean tt=Between(Angle,Tolerance,Pairs.get(i).Direction);      width=Pairs.get(i).Distance * Math.cos((Math.PI / 2) - Angle + Pairs.get(i).Direction);      if (tt && Pairs.get(i).Distance < Range && Math.abs(width) <= BandWidth) {        r=(int)Math.floor(Pairs.get(i).Distance / LagSize);        if (bins[r][0] == null) {          bin bb=new bin();          bins[r][0]=bb;        }        bins[r][0].Distance+=Pairs.get(i).Distance;        bins[r][0].Value+=Pairs.get(i).MomentI;        bins[r][0].Size++;      }    }    for (int i=0; i < bins.length; i++) {      if (bins[i][0] == null) {        bin bb=new bin();        bins[i][0]=bb;      }      bins[i][0].Distance=bins[i][0].Distance / bins[i][0].Size;      bins[i][0].Value=bins[i][0].Value / bins[i][0].Size;    }  }}  }
class C{  void remove(ThreadLocal<?> key){  cleanUp();  for (int index=key.hash & mask; ; index=next(index)) {    Object reference=table[index];    if (reference == key.reference) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;      return;    }    if (reference == null) {      return;    }  }}  }
class C{  CertificateHolderFX(final Stage dialog){  initComponents();  this.frame=dialog;}  }
class C{  public boolean mouseDragged(MouseEvent e){  return false;}  }
class C{  public Downloader(){}  }
class C{  public HouseNumber(){}  }
class C{  public Complex(double a,double b){  this.a=a;  this.b=b;}  }
class C{  public static Security psk(String serverUri,int shortServerId,byte[] pskIdentity,byte[] privateKey){  return new Security(serverUri,false,0,pskIdentity.clone(),new byte[0],privateKey.clone(),shortServerId);}  }
class C{  protected void isCommentWellFormed(String data){  if (data == null || (data.length() == 0)) {    return;  }  char[] dataarray=data.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XML11Char.isXML11Invalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  } else {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XMLChar.isInvalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  }  return;}  }
class C{  protected void addViewVersion(DistributedRegion dr,long version){  viewVersions.put(dr,Long.valueOf(version));}  }
class C{  public void workerComplete(OMGraphicList aList){  if (layer != null) {    boolean repaintIt=layer.getList() != null;    layer.setList(aList);    if (repaintIt || aList != null) {      layer.repaint();    } else {      getLogger().fine("Not painting cause of nothin'");    }  }}  }
class C{  public static double log(final double x){  return log(x,null);}  }
class C{  public synchronized boolean saveLocation() throws MojangApiParsingException {  PlayerCoordinates currentCoordinates=this.currentCoordinates;  if (savedCoordinates != currentCoordinates) {    if (playerNbt.tryWriteCoordinates(currentCoordinates)) {      savedCoordinates=currentCoordinates;      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  @Override public void streamReply(WebSocket session,HeadersAmp headers,String to,long qid,int sequence,List<Object> values,Throwable exn,boolean isComplete) throws IOException {}  }
class C{  public ResultLogConfig(){}  }
class C{  public OMGeometryList(){}  }
class C{  private void validateBatchSize(final long batchSize){  if (batchSize <= 0 || batchSize > MAX_BATCH_SIZE) {    throw new InvalidBatchSizeException("The batch size is less than 1" + " or is greater than the supported maximum of " + String.valueOf(MAX_BATCH_SIZE));  }}  }
class C{  public GetContainerLogsParams withSince(long since){  this.since=since;  return this;}  }
class C{  public void selectDoNotFireEvent(final int[] indices){  select(indices,false);}  }
class C{  @Override public boolean beforeSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  if (sampler.getIteration() > lastIteration) {    File file=makeDirectories(String.format("%1$s/it.%2$s",getRootDirectory(),lastIteration));    analyze(sampler.getSampledGraph(),file.getAbsolutePath());    lastIteration=sampler.getIteration();  }  return true;}  }
class C{  public static Object evaluateOutputEval(CWLJob job,Object output,Object binding) throws CWLExpressionException {  Object outputEval=getOutputEval(binding);  return CWLExpressionResolver.resolve(outputEval,job,output);}  }
class C{  public void testNullStoredBytesField() throws Exception {  Directory dir=newDirectory();  Analyzer analyzer=new MockAnalyzer(random());  IndexWriter iw=new IndexWriter(dir,new IndexWriterConfig(analyzer));  Document doc=new Document();  iw.addDocument(doc);  expectThrows(NullPointerException.class,null);  assertNull(iw.getTragicException());  iw.close();  DirectoryReader r=DirectoryReader.open(dir);  assertEquals(1,r.numDocs());  r.close();  dir.close();}  }
class C{  public static boolean isReadable(int octalMode){  return hasPermission(ROLE_OWNER,PERM_READ,octalMode);}  }
class C{  @Override public String toString(){  return "GetCharacterCreationDateCommand [character=" + charname + "]";}  }
class C{  public PDFObject(Object obj) throws PDFParseException {  this.owner=null;  this.value=obj;  if ((obj instanceof Double) || (obj instanceof Integer)) {    this.type=NUMBER;  } else   if (obj instanceof String) {    this.type=NAME;  } else   if (obj instanceof PDFObject[]) {    this.type=ARRAY;  } else   if (obj instanceof Object[]) {    Object[] srcary=(Object[])obj;    PDFObject[] dstary=new PDFObject[srcary.length];    for (int i=0; i < srcary.length; i++) {      dstary[i]=new PDFObject(srcary[i]);    }    value=dstary;    this.type=ARRAY;  } else   if (obj instanceof HashMap) {    this.type=DICTIONARY;  } else   if (obj instanceof Boolean) {    this.type=BOOLEAN;  } else   if (obj instanceof PDFParser.Tok) {    PDFParser.Tok tok=(PDFParser.Tok)obj;    if (tok.name.equals("true")) {      this.value=Boolean.TRUE;      this.type=BOOLEAN;    } else     if (tok.name.equals("false")) {      this.value=Boolean.FALSE;      this.type=BOOLEAN;    } else {      this.value=tok.name;      this.type=NAME;    }  } else {    throw new PDFParseException("Bad type for raw PDFObject: " + obj);  }}  }
class C{  private void checkIfAllowedToModify(ProductReview review) throws OperationNotPermittedException {  if (!review.isAllowedToModify(getLoggedInUser())) {    throw new OperationNotPermittedException("You must be owner in order to modify.");  }}  }
class C{  public ModbusIOException(String message,boolean b){  super(message);  eof=b;}  }
class C{  public static String formatNumber(double value,int numberOfDigits,boolean groupingCharacters){  if (Double.isNaN(value)) {    return "?";  }  int numberDigits=numberOfDigits;  if (numberDigits < 0) {    numberDigits=numberOfFractionDigits;  }  NUMBER_FORMAT.setMinimumFractionDigits(numberDigits);  NUMBER_FORMAT.setMaximumFractionDigits(numberDigits);  NUMBER_FORMAT.setGroupingUsed(groupingCharacters);  return NUMBER_FORMAT.format(value);}  }
class C{  void fatalError(Exception e){  e.printStackTrace();}  }
class C{  public SublimeMenuInflater(Context context){  mContext=context;}  }
class C{  public void calculateValues(){  clearCachedValues();  boolean dyn=m_dynamic;  m_dynamic=true;  getMinimumRow();  getMaximumRow();  getMedianRow();  getUniqueCount();  if (TypeLib.isNumericType(m_table.getColumnType(m_field))) {    getMean();    getDeviation();    getSum();  }  getOrdinalArray();  getOrdinalMap();  m_init=true;  m_dynamic=dyn;}  }
class C{  private void cleanupQueue(){  long now=U.currentTimeMillis();  long queueOversize=evts.sizex() - expireCnt;  for (int i=0; i < queueOversize && evts.sizex() > expireCnt; i++) {    Event expired=evts.poll();    if (log.isDebugEnabled())     log.debug("Event expired by count: " + expired);  }  while (true) {    ConcurrentLinkedDeque8.Node<Event> node=evts.peekx();    if (node == null)     break;    Event evt=node.item();    if (evt == null)     continue;    if (now - evt.timestamp() < expireAgeMs)     break;    if (evts.unlinkx(node) && log.isDebugEnabled())     log.debug("Event expired by age: " + node.item());  }}  }
class C{  public boolean registered(){  return getRegistrationStatus().equals(RegistrationStatus.REGISTERED.name());}  }
class C{  void drawBricks(){  for (int i=0; i < mBricks.length; i++) {    Brick brick=mBricks[i];    if (brick.isAlive()) {      brick.draw();    }  }}  }
class C{  @Pointcut("!preinitialization(*.new(..))") public void all(){}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(_method.getModifiers());}  }
class C{  public void slashStarComments(boolean flag){  slashStarComments=flag;}  }
class C{  private String escapeJson(String string){  if (string != null) {    return string.replace("\\","\\\\").replace("\"","\\\"");  } else {    return "";  }}  }
class C{  public String toString(boolean extended){  StringBuilder sb=new StringBuilder();  boolean positive=(millis >= 0);  long hour=Math.abs(millisToHours(millis));  long minute=Math.abs(millisToMinutes(millis));  sb.append(positive ? '+' : '-');  if (hour < 10) {    sb.append('0');  }  sb.append(hour);  if (extended) {    sb.append(':');  }  if (minute < 10) {    sb.append('0');  }  sb.append(minute);  return sb.toString();}  }
class C{  public void removeStyleListener(StyleListener l){  if (listeners != null) {    listeners.removeListener(l);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("XML","");  assertTrue("hasXMLEmpty",state);}  }
class C{  public Lookup(LookupSubtableFactory factory,RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  type=raf.readUnsignedShort();  flag=raf.readUnsignedShort();  subTableCount=raf.readUnsignedShort();  subTableOffsets=new int[subTableCount];  subTables=new LookupSubtable[subTableCount];  for (int i=0; i < subTableCount; i++) {    subTableOffsets[i]=raf.readUnsignedShort();  }  for (int i=0; i < subTableCount; i++) {    subTables[i]=factory.read(type,raf,offset + subTableOffsets[i]);  }}  }
class C{  private void updateEditButtons(){  boolean somethingIsSelected=list.getSelectedIndex() != -1;  boolean exactlyOneIsSelected=list.getSelectedIndices().length == 1;  remove.setEnabled(somethingIsSelected);  change.setEnabled(exactlyOneIsSelected);  moveUp.setEnabled(exactlyOneIsSelected);  moveDown.setEnabled(exactlyOneIsSelected);}  }
class C{  public SnmpStringFixed(String v){  super(v);}  }
class C{  public MqttPersistenceException(int reasonCode){  super(reasonCode);}  }
class C{  public EntityMigrationBuilder renameProperty(String from,String to){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RenameProperty(from,to)));  return this;}  }
class C{  public void testCreateDelete() throws Exception {  IgfsLogger log=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  IgfsLogger sameLog0=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  assert log == sameLog0;  IgfsLogger otherLog=IgfsLogger.logger("other" + ENDPOINT,IGFS_NAME,LOG_DIR,10);  assert log != otherLog;  otherLog.close();  log.logDelete(PATH,PRIMARY,false);  log.close();  File logFile=new File(LOG_FILE);  assert !logFile.exists();  IgfsLogger sameLog1=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  assert sameLog0 == sameLog1;  sameLog0.close();  assert !logFile.exists();  sameLog1.close();  assert logFile.exists();  logFile.delete();  IgfsLogger sameLog2=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  assert sameLog0 != sameLog2;  sameLog2.close();  assert !logFile.exists();}  }
class C{  @Override public void writeNewAlias(String alias,Application application,String serverPort){  String dockerManagerIP=application.getServer().getContainerIP();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    logger.info("ALIAS VALUE IN ADD NEW ALIAS : " + alias);    String frontend="frontend:" + alias.toLowerCase();    jedis.rpush(frontend,alias.toLowerCase());    jedis.rpush(frontend,"http://" + dockerManagerIP + ":"+ serverPort);  } catch (  JedisConnectionException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public static int versionCompare(final String current,final String remote){  final String[] curComp=current.trim().split("\\.|-|\\s+");  final String[] remComp=remote.trim().split("\\.|-|\\s+");  int result=0;  for (int i=0; (result == 0) && (i < Math.min(curComp.length,remComp.length)); i++) {    try {      result=Integer.parseInt(curComp[i]) - Integer.parseInt(remComp[i]);    } catch (    final NumberFormatException e) {      result=curComp[i].compareToIgnoreCase(remComp[i]);    }  }  return result < -1 ? -1 : (result > 1 ? 1 : result);}  }
class C{  public PreferenceManager(String prefFileName){  this(prefFileName,null);}  }
class C{  public void transform(AffineTransform tx){  Point2D.Double p=new Point2D.Double();  for (  Node cp : this) {    for (int i=0; i < 3; i++) {      p.x=cp.x[i];      p.y=cp.y[i];      tx.transform(p,p);      cp.x[i]=p.x;      cp.y[i]=p.y;    }  }  invalidatePath();}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public void testSet(){  String[] values=null;  SpellCheckedMetadata meta=new SpellCheckedMetadata();  values=meta.getValues("contentype");  assertEquals(0,values.length);  meta.set("contentype","value1");  values=meta.getValues("contentype");  assertEquals(1,values.length);  assertEquals("value1",values[0]);  meta.set("Content-Type","value2");  values=meta.getValues("contentype");  assertEquals(1,values.length);  assertEquals("value2",values[0]);  meta.set("contenttype","new value 1");  meta.add("contenttype","new value 2");  values=meta.getValues("contentype");  assertEquals(2,values.length);  assertEquals("new value 1",values[0]);  assertEquals("new value 2",values[1]);}  }
class C{  public static long parseLong(final String s){  return parseLongDefault(s,0);}  }
class C{  public void removeContent(Component body){  body.getParent().remove();  body.remove();}  }
class C{  public RenderedImage createRendering(RenderContext renderContext){  Rectangle2D r2d=getBounds2D();  Shape aoi=renderContext.getAreaOfInterest();  if (aoi != null) {    Rectangle2D aoiR2d=aoi.getBounds2D();    if (!r2d.intersects(aoiR2d))     return null;    Rectangle2D.intersect(r2d,aoiR2d,r2d);  }  Filter background=getBackground(node,null,r2d);  if (background == null)   return null;  background=new PadRable8Bit(background,r2d,PadMode.ZERO_PAD);  RenderedImage ri=background.createRendering(new RenderContext(renderContext.getTransform(),r2d,renderContext.getRenderingHints()));  return ri;}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getScrollChildTop();    final int start=mListPadding.top;    final int end=(getBottom() - getTop()) - mListPadding.bottom;    int topOffset=firstTop - start;    final int lastBottom=getScrollChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        tryOffsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,getFillChildBottom() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  private void processFile(String file) throws IOException {  assert file != null;  String fileContent=readFileToString(file,Charset.forName("UTF-8"));  if (verify) {    Jerry doc=Jerry.jerry(fileContent);    if (file.endsWith("overview-summary.html")) {      Jerry otherPackages=doc.find("div.contentContainer table.overviewSummary caption span:contains('Other Packages')");      if (otherPackages.size() > 0)       throw new IllegalArgumentException("'Other Packages' section should not be present, " + "all packages should have corresponding documentation groups: " + file);    } else     if (!isViewHtml(file)) {      Jerry descBlock=doc.find("div.contentContainer div.description ul.blockList li.blockList div.block");      if (descBlock.size() == 0)       throw new IllegalArgumentException("Class doesn't have description in file: " + file);    }  }  GridJavadocCharArrayLexReader lexer=new GridJavadocCharArrayLexReader(fileContent.toCharArray());  Collection<GridJavadocToken> toks=new ArrayList<>();  StringBuilder tokBuf=new StringBuilder();  int ch;  while ((ch=lexer.read()) != GridJavadocCharArrayLexReader.EOF) {    if (ch == '<') {      if (tokBuf.length() > 0) {        toks.add(new GridJavadocToken(GridJavadocTokenType.TOKEN_TEXT,tokBuf.toString()));        tokBuf.setLength(0);      }      tokBuf.append('<');      ch=lexer.read();      if (ch == GridJavadocCharArrayLexReader.EOF)       throw new IOException("Unexpected EOF: " + file);      if (ch == '!') {        for (; ch != GridJavadocCharArrayLexReader.EOF && ch != '>'; ch=lexer.read())         tokBuf.append((char)ch);        if (ch == GridJavadocCharArrayLexReader.EOF)         throw new IOException("Unexpected EOF: " + file);        assert ch == '>';        tokBuf.append('>');        String val=tokBuf.toString();        toks.add(new GridJavadocToken(val.startsWith("<!--") ? GridJavadocTokenType.TOKEN_COMM : GridJavadocTokenType.TOKEN_INSTR,val));        tokBuf.setLength(0);      } else {        for (; ch != GridJavadocCharArrayLexReader.EOF && ch != '>'; ch=lexer.read())         tokBuf.append((char)ch);        if (ch == GridJavadocCharArrayLexReader.EOF)         throw new IOException("Unexpected EOF: " + file);        assert ch == '>';        tokBuf.append('>');        if (tokBuf.length() <= 2)         throw new IOException("Invalid HTML in [file=" + file + ", html="+ tokBuf+ ']');        String val=tokBuf.toString();        toks.add(new GridJavadocToken(val.startsWith("</") ? GridJavadocTokenType.TOKEN_CLOSE_TAG : GridJavadocTokenType.TOKEN_OPEN_TAG,val));        tokBuf.setLength(0);      }    } else     tokBuf.append((char)ch);  }  if (tokBuf.length() > 0)   toks.add(new GridJavadocToken(GridJavadocTokenType.TOKEN_TEXT,tokBuf.toString()));  for (  GridJavadocToken tok : toks) {    String val=tok.value();switch (tok.type()) {case TOKEN_COMM:{        break;      }case TOKEN_OPEN_TAG:{      tok.update(fixColors(tok.value()));      break;    }case TOKEN_CLOSE_TAG:{    if ("</head>".equalsIgnoreCase(val))     tok.update("<link rel='shortcut icon' href='https://ignite.apache.org/favicon.ico'/>\n" + "<link type='text/css' rel='stylesheet' href='" + SH_URL + "/styles/shCore.css'/>\n"+ "<link type='text/css' rel='stylesheet' href='"+ SH_URL+ "/styles/shThemeDefault.css'/>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shCore.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shLegacy.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushJava.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushPlain.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushJScript.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushBash.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushXml.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushScala.js'></script>\n"+ "<script type='text/javascript' src='"+ SH_URL+ "/scripts/shBrushGroovy.js'></script>\n"+ "</head>\n"); else     if ("</body>".equalsIgnoreCase(val))     tok.update("<!--FOOTER-->" + "<script type='text/javascript'>" + "SyntaxHighlighter.all();"+ "dp.SyntaxHighlighter.HighlightAll('code');"+ "</script>\n"+ "</body>\n");    break;  }case TOKEN_INSTR:{  break;}case TOKEN_TEXT:{tok.update(fixColors(val));break;}default :assert false;}}StringBuilder buf=new StringBuilder();StringBuilder tmp=new StringBuilder();boolean inPre=false;for (GridJavadocToken tok : toks) {String val=tok.value();switch (tok.type()) {case TOKEN_INSTR:case TOKEN_TEXT:case TOKEN_COMM:{tmp.append(val);break;}case TOKEN_OPEN_TAG:{if (val.toLowerCase().startsWith("<pre name=")) {inPre=true;buf.append(fixBrackets(tmp.toString()));tmp.setLength(0);}tmp.append(val);break;}case TOKEN_CLOSE_TAG:{if (val.toLowerCase().startsWith("</pre") && inPre) {inPre=false;buf.append(tmp.toString());tmp.setLength(0);}tmp.append(val);break;}default :assert false;}}String s=buf.append(fixBrackets(tmp.toString())).toString();s=fixExternalLinks(s);s=fixDeprecated(s);s=fixNullable(s);s=fixTodo(s);replaceFile(file,s);}  }
class C{  public void groupKeyAndDescendantsIterator(Session session,FDBStoreData storeData,FDBScanTransactionOptions transactionOptions){  groupIterator(session,storeData,GroupIteratorBoundary.KEY,GroupIteratorBoundary.LAST_DESCENDANT,Transaction.ROW_LIMIT_UNLIMITED,transactionOptions);}  }
class C{  public CVoucherHeader createPreApprovalVoucher(final Map<String,Object> headerdetails,final List<HashMap<String,Object>> accountcodedetails,final List<HashMap<String,Object>> subledgerdetails) throws ApplicationRuntimeException {  CVoucherHeader voucherHeaders=null;  try {    if (headerdetails instanceof HashMap)     voucherHeaders=createVoucher.createPreApprovedVoucher((HashMap<String,Object>)headerdetails,accountcodedetails,subledgerdetails);  } catch (  final ApplicationRuntimeException e) {    LOGGER.error("Exception while creating voucher!",e);    throw e;  }  return voucherHeaders;}  }
class C{  public void ctcpResponse(String message){  bot.sendIRC().ctcpResponse(serverUser.getNick(),message);}  }
class C{  protected String createDefaultDeployerUrl(Configuration configuration){  String protocol=configuration.getPropertyValue(GeneralPropertySet.PROTOCOL);  String host=configuration.getPropertyValue(GeneralPropertySet.HOSTNAME);  String port=configuration.getPropertyValue(ServletPropertySet.PORT);  String deployerUrl=protocol + "://" + host+ ":"+ port+ "/"+ DEFAULT_DEPLOYER_CONTEXT;  return deployerUrl;}  }
class C{  public final void writeChars(java.lang.String s) throws java.io.IOException {  return;}  }
class C{  private List<FacetResult> sumAssociations() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  Facets tags=new TaxonomyFacetSumIntAssociations("$tags",taxoReader,config,fc);  Facets genre=new TaxonomyFacetSumFloatAssociations("$genre",taxoReader,config,fc);  List<FacetResult> results=new ArrayList<>();  results.add(tags.getTopChildren(10,"tags"));  results.add(genre.getTopChildren(10,"genre"));  indexReader.close();  taxoReader.close();  return results;}  }
class C{  public Query unionAll(Query query){  if (immutable) {    return fork().unionAll(query);  }  addCompoundSelect(CompoundSelect.unionAll(query));  return this;}  }
class C{  public boolean isDisplayBoundingPoints(){  return mDisplayBoundingPoints;}  }
class C{  public static <A>StreamableTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public Id<DgCrossingNode> convertLinkId2ToCrossingNodeId(Id<Link> linkId){  String idString=linkId.toString() + "99";  return idPool.createId(idString,DgCrossingNode.class);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EXTENDED_STATE_MACHINE___ANONYMOUS_EXTENDED_STATE_MACHINE_11:    return anonymous_extendedStateMachine_1_1 != null && !anonymous_extendedStateMachine_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public HypervolumeFitnessEvaluator(Problem problem){  super(problem);}  }
class C{  private void expungeStaleEntries(){  Object r;  while ((r=queue.poll()) != null) {    Entry e=(Entry)r;    int h=e.hash;    int i=indexFor(h,table.length);    Entry prev=table[i];    Entry p=prev;    while (p != null) {      Entry next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        e.value=null;        size--;        break;      }      prev=p;      p=next;    }  }}  }
class C{  static MediaType createImageType(String subtype){  return create(IMAGE_TYPE,subtype);}  }
class C{  public static BufferedInputStream createInputStream(File file,boolean async) throws IOException {  if (FileUtils.isGzipFilename(file)) {    return createGzipInputStream(file,async);  } else   if (FileUtils.isBzip2Filename(file)) {    return createBzip2InputStream(file,async);  } else {    return createFileInputStream(file,async);  }}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  public void connect(final MqttCallback callback,final Runnable connectionRunnable) throws SpyException {  createClient(callback);  final ReconnectionSettings reconnectionSettings=getMqttConnectionDetails().getReconnectionSettings();  if (reconnectionSettings == null) {    new Thread(connectionRunnable).start();  } else {    reconnectionManager.addConnection(this,connectionRunnable);  }}  }
class C{  private static List<CategoryListItem> flattenRootCategory(CategoryListItem category){  CategoryListItem[] subCategories=category.subItems;  List<CategoryListItem> siblingCategories=new ArrayList<CategoryListItem>();  for (int i=0; i < subCategories.length; i++) {    CategoryListItem subCategory=subCategories[i];    CategoryListItem[] subSubCategories=subCategory.subItems;    if (subSubCategories.length != 0) {      CategoryListItem[] newSubCategories=new CategoryListItem[subCategories.length - 1];      System.arraycopy(subCategories,0,newSubCategories,0,i);      System.arraycopy(subCategories,i + 1,newSubCategories,i,subCategories.length - i - 1);      category=new CategoryListItem(category.name,category.fullName,category.key,newSubCategories);      CategoryListItem siblingCategory=new CategoryListItem(category.name + " / " + subCategory.name,null,subCategory.key,subSubCategories);      List<CategoryListItem> flattenedSiblingCategory=flattenRootCategory(siblingCategory);      siblingCategories.addAll(flattenedSiblingCategory);    }  }  if (!siblingCategories.isEmpty()) {    Log.v("FlattenCategories",category.fullName + " had " + siblingCategories.size()+ " "+ "sub-categories moved up by one level");  }  siblingCategories.add(0,category);  return siblingCategories;}  }
class C{  public static long readDWord(final ClientReader inputStream) throws IOException {  long dword, readByte;  readByte=inputStream.read();  if (readByte == -1) {    throw new IOException("End of input stream");  }  dword=(readByte & 0xFF) << 24 & 0xFF000000;  readByte=inputStream.read();  if (readByte == -1) {    throw new IOException("End of input stream");  }  dword|=(readByte & 0xFF) << 16 & 0x00FF0000;  readByte=inputStream.read();  if (readByte == -1) {    throw new IOException("End of input stream");  }  dword|=(readByte & 0xFF) << 8 & 0x0000FF00;  readByte=inputStream.read();  if (readByte == -1) {    throw new IOException("End of input stream");  }  dword|=(readByte & 0xFF) & 0x000000FF;  return dword;}  }
class C{  public void loadSchemasFromLocations() throws IOException {  log.info("||-Class Schema Manager started..");  InputStream is=schemaListFile.getInputStream();  InputStreamReader isr=new InputStreamReader(is);  BufferedReader br=new BufferedReader(isr);  ClassLoader classLoader=ClassSchemaManager.class.getClassLoader();  String schemaLocation=br.readLine();  while (null != schemaLocation) {    InputStream inputStream=classLoader.getResourceAsStream(schemaLocation);    if (null == inputStream) {      throw new IllegalArgumentException("Schema file '" + schemaLocation + "' can not be found.");    }    InputStreamReader inputStreamReader=new InputStreamReader(inputStream);    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);    loadSchemaFromReader(bufferedReader);    schemaLocation=br.readLine();    if (null != bufferedReader) {      bufferedReader.close();    }    if (null != inputStreamReader) {      inputStreamReader.close();    }    if (null != inputStream) {      inputStream.close();    }  }  if (null != br) {    br.close();  }  if (null != isr) {    isr.close();  }  if (null != is) {    is.close();  }}  }
class C{  public long cacheEntryFilterCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.cacheEntryFilterCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public boolean containsKey(K key){  return map.containsKey(key);}  }
class C{  @Override public void next(Long sinceId,Callback<TimelineResult<Tweet>> cb){  createSearchRequest(sinceId,null).enqueue(new SearchCallback(cb));}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  public void move(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin,boolean fixedAspectRatio,float aspectRatio){  float adjX=x + mTouchOffset.x;  float adjY=y + mTouchOffset.y;  if (mType == Type.CENTER) {    moveCenter(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin);  } else {    if (fixedAspectRatio) {      moveSizeWithFixedAspectRatio(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin,aspectRatio);    } else {      moveSizeWithFreeAspectRatio(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin);    }  }}  }
class C{  public static Point2D cubicBezierMidpoint(Point2D src,Point2D ctrl1,Point2D ctrl2,Point2D tar){  return midpoint(midpoint(midpoint(src,ctrl1),midpoint(ctrl1,ctrl2)),midpoint(midpoint(tar,ctrl1),midpoint(ctrl1,ctrl2)));}  }
class C{  public final void show(){  Log.write("cursor = ");  Log.write(cursor);  Log.write(" limit = ");  Log.writeln(limit);}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newObjectPage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  public void reset(){  major=0;  minor=0;  build=0;}  }
class C{  public static double toDouble(Object obj){  Double result=toDoubleObject(obj);  return result == null ? 0.0 : result.doubleValue();}  }
class C{  public String toString(){  return "NamespaceResponse [" + "personal = " + this.personal + " "+ "users = "+ this.users+ " "+ "shared = "+ this.shared+ " "+ " ]";}  }
class C{  public void createFontChars(){  int nextFontPositionX=0;  int nextFontPositionY=0;  char prev=(char)-1;  int kerningAmount=0;  int longestLine=0;  int totalHeight=0;  int quantityOfLines=1;  int stringLen=string_.length();  if (stringLen == 0)   return;  for (int i=0; i < stringLen - 1; i++) {    char c=string_.charAt(i);    if (c == '\n')     quantityOfLines++;  }  totalHeight=configuration_.commonHeight * quantityOfLines;  nextFontPositionY=-(configuration_.commonHeight - configuration_.commonHeight * quantityOfLines);  for (int i=0; i < stringLen; i++) {    char c=string_.charAt(i);    if (c == '\n') {      nextFontPositionX=0;      nextFontPositionY-=configuration_.commonHeight;      continue;    }    kerningAmount=kerningAmount(prev,c);    ccBitmapFontDef fontDef=configuration_.bitmapFontArray.get(c);    if (fontDef == null)     continue;    CGRect rect=fontDef.rect;    CCSprite fontChar;    fontChar=(CCSprite)getChildByTag(i);    if (fontChar == null) {      fontChar=CCSprite.sprite(this,rect);      addChild(fontChar,0,i);    } else {      fontChar.setTextureRect(rect);      fontChar.setVisible(true);      fontChar.setOpacity(255);    }    float yOffset=configuration_.commonHeight - fontDef.yOffset;    fontChar.setPosition((float)nextFontPositionX + fontDef.xOffset + fontDef.rect.size.width * 0.5f + kerningAmount,(float)nextFontPositionY + yOffset - rect.size.height * 0.5f);    nextFontPositionX+=fontDef.xAdvance + kerningAmount;    prev=c;    fontChar.setOpacityModifyRGB(opacityModifyRGB_);    fontChar.setColor(color_);    if (opacity_ != 255)     fontChar.setOpacity(opacity_);    if (longestLine < nextFontPositionX)     longestLine=nextFontPositionX;  }  setContentSize(longestLine,totalHeight);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.share:    new ExportTask(this).execute(sensorData);  break;case R.id.snapshot:Screenshot.takeScreenShot(this,getWindow().peekDecorView());break;}return super.onOptionsItemSelected(item);}  }
class C{  public static PatternStream create(PatternExpr expression,String optStreamName){  return new PatternStream(expression,optStreamName);}  }
class C{  public Expression makeLocalReference(Environment env,Context ctx){  if (ctx.field.getClassDefinition() != client) {    throw new CompilerError("makeLocalReference");  }  if (localArgumentAvailable(env,ctx)) {    return new IdentifierExpression(0,localArgument);  } else {    return makeFieldReference(env,ctx);  }}  }
class C{  public BusinessObjectDataAttributeCreateRequest createBusinessObjectDataAttributeCreateRequest(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,Integer businessObjectDataVersion,String businessObjectDataAttributeName,String businessObjectDataAttributeValue){  BusinessObjectDataAttributeCreateRequest request=new BusinessObjectDataAttributeCreateRequest();  request.setBusinessObjectDataAttributeKey(new BusinessObjectDataAttributeKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,businessObjectDataPartitionValue,businessObjectDataSubPartitionValues,businessObjectDataVersion,businessObjectDataAttributeName));  request.setBusinessObjectDataAttributeValue(businessObjectDataAttributeValue);  return request;}  }
class C{  @Override public int hashCode(){  return -2 * effects.hashCode();}  }
class C{  public BasicAnalyzer(XML xml){  this.xml=xml;}  }
class C{  protected static Collection<GridClientNode> selectDirectNodes(Collection<? extends GridClientNode> nodes){  return F.viewReadOnly(nodes,F.<GridClientNode>identity(),CONNECTABLE);}  }
class C{  protected Float wrapKey(float k){  return new Float(k);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK:    return "CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X:  return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y:return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z:return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z";case CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK:return "CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY:return "CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY";case CU_DEVICE_ATTRIBUTE_WARP_SIZE:return "CU_DEVICE_ATTRIBUTE_WARP_SIZE";case CU_DEVICE_ATTRIBUTE_MAX_PITCH:return "CU_DEVICE_ATTRIBUTE_MAX_PITCH";case CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK:return "CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_CLOCK_RATE:return "CU_DEVICE_ATTRIBUTE_CLOCK_RATE";case CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_GPU_OVERLAP:return "CU_DEVICE_ATTRIBUTE_GPU_OVERLAP";case CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT:return "CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT";case CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT:return "CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT";case CU_DEVICE_ATTRIBUTE_INTEGRATED:return "CU_DEVICE_ATTRIBUTE_INTEGRATED";case CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY:return "CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY";case CU_DEVICE_ATTRIBUTE_COMPUTE_MODE:return "CU_DEVICE_ATTRIBUTE_COMPUTE_MODE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS:return "CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS";case CU_DEVICE_ATTRIBUTE_ECC_ENABLED:return "CU_DEVICE_ATTRIBUTE_ECC_ENABLED";case CU_DEVICE_ATTRIBUTE_PCI_BUS_ID:return "CU_DEVICE_ATTRIBUTE_PCI_BUS_ID";case CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID:return "CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID";case CU_DEVICE_ATTRIBUTE_TCC_DRIVER:return "CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID";case CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE:return "CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE";case CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH:return "CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH";case CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE:return "CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE";case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR:return "CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR";case CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT:return "CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT";case CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING:return "CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER:return "CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE";case CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID:return "CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID";case CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT";case CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR:return "CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR";case CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR:return "CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH";case CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED";case CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED";case CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED";case CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR:return "CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR";case CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR:return "CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR";case CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY:return "CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY";case CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD:return "CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD";case CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID:return "CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID";case CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED";case CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO:return "CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO";case CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS:return "CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS";case CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS:return "CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS";case CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED";}return "INVALID CUdevice_attribute: " + n;}  }
class C{  public static String encode(String stringToEncode){  return CharEscapers.uriEscaper().escape(stringToEncode).replace("+","%20").replace("*","%2A").replace("%7E","~");}  }
class C{  private void fill(){  StringBuffer buffer=new StringBuffer();  for (int j=0; j < heightChars; j++) {    for (int i=0; i < widthChars; i++) {      buffer.append(" ");    }    if (j < heightChars - 1) {      buffer.append("\n");    }  }  setText(buffer.toString());}  }
class C{  public AsyncSenderConf(){  properties=new Properties();  String file=SystemProperties.getAsyncSenderConfFile();  try (InputStream in=new FileInputStream(file)){    load(in);  } catch (  Exception e) {    LOG.error("Failed to load server configuration file," + " using default parameters",e);  }}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public static void swap(List list,int i,int j){  list.set(i,list.set(j,list.get(i)));}  }
class C{  private boolean isLeapYear(int year){  return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0);}  }
class C{  public static double round(double number){  return (double)Math.round(number * Math.pow(10,0)) / Math.pow(10,0);}  }
class C{  public static SymbolToken newSymbolToken(SymbolTable symtab,String text){  if (text == null || text.length() == 0) {    throw new EmptySymbolException();  }  SymbolToken tok=(symtab == null ? null : symtab.find(text));  if (tok == null) {    tok=new SymbolTokenImpl(text,UNKNOWN_SYMBOL_ID);  }  return tok;}  }
class C{  private Signature loadPersistedSignature(){  final SignatureLibraryRelease release=loadCoilsRelease();  final Query query=entityManager.createQuery("select s from Signature s where s.signatureLibraryRelease = :release");  query.setParameter("release",release);  @SuppressWarnings("unchecked") List<Signature> retrievedSignatures=query.getResultList();  if (retrievedSignatures.size() == 0) {    final Signature.Builder builder=new Signature.Builder("Coil");    final Signature signature=builder.name("Coil").signatureLibraryRelease(release).build();    entityManager.persist(signature);    return signature;  } else   if (retrievedSignatures.size() > 1) {    throw new IllegalStateException("There is more than one Signature record for version " + coilsReleaseVersion + " of Coils in the database.");  } else {    return retrievedSignatures.get(0);  }}  }
class C{  @Override public void resourceResponseGet(String resourceId,ByteBuffer object) throws TException {  eventClient.putResponseGetResource(resourceId,object);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  throw new UnsupportedOperationException();}  }
class C{  private void checkCore(JavaContext context,Node node,TypeReference reference){  StrictListAccessor<TypeReference,TypeReference> types=reference.getTypeArguments();  if (types != null && types.size() == 2) {    TypeReference first=types.first();    String typeName=first.getTypeName();    int minSdk=context.getMainProject().getMinSdk();    if (typeName.equals(INTEGER) || typeName.equals(BYTE)) {      String valueType=types.last().getTypeName();      if (valueType.equals(INTEGER)) {        context.report(ISSUE,node,context.getLocation(node),"Use new SparseIntArray(...) instead for better performance");      } else       if (valueType.equals(LONG) && minSdk >= 18) {        context.report(ISSUE,node,context.getLocation(node),"Use new SparseLongArray(...) instead for better performance");      } else       if (valueType.equals(BOOLEAN)) {        context.report(ISSUE,node,context.getLocation(node),"Use new SparseBooleanArray(...) instead for better performance");      } else {        context.report(ISSUE,node,context.getLocation(node),String.format("Use new SparseArray<%1$s>(...) instead for better performance",valueType));      }    } else     if (typeName.equals(LONG) && (minSdk >= 16 || Boolean.TRUE == context.getMainProject().dependsOn(SdkConstants.SUPPORT_LIB_ARTIFACT))) {      boolean useBuiltin=minSdk >= 16;      String message=useBuiltin ? "Use new LongSparseArray(...) instead for better performance" : "Use new android.support.v4.util.LongSparseArray(...) instead for better performance";      context.report(ISSUE,node,context.getLocation(node),message);    }  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(super.toString());  if (this.soundfield_group_link_id != null) {    sb.append(String.format("soundfield_group_link_id = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.soundfield_group_link_id[0],this.soundfield_group_link_id[1],this.soundfield_group_link_id[2],this.soundfield_group_link_id[3],this.soundfield_group_link_id[4],this.soundfield_group_link_id[5],this.soundfield_group_link_id[6],this.soundfield_group_link_id[7],this.soundfield_group_link_id[8],this.soundfield_group_link_id[9],this.soundfield_group_link_id[10],this.soundfield_group_link_id[11],this.soundfield_group_link_id[12],this.soundfield_group_link_id[13],this.soundfield_group_link_id[14],this.soundfield_group_link_id[15]));  }  return sb.toString();}  }
class C{  public void render(int eye){  VideoSurfaceTexture.updateTexImage();  VideoSurfaceTexture.getTransformMatrix(videoTextureTransform);  GLES20.glUseProgram(shaderProgram);  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,videoTextureID);  GLES20.glUniformMatrix4fv(textureTranformParam,1,false,videoTextureTransform,0);  GLES20.glUniformMatrix4fv(MVPParam,1,false,MVPMatrix,0);  GLES20.glEnableVertexAttribArray(vertexCoordsParam);  GLES20.glVertexAttribPointer(vertexCoordsParam,3,GLES20.GL_FLOAT,false,0,screenVetrexCoordsBuffer);  GLES20.glEnableVertexAttribArray(textureCoordsParam);  GLES20.glVertexAttribPointer(textureCoordsParam,4,GLES20.GL_FLOAT,false,0,textureCoordsBuffer[eye]);  GLES20.glDrawElements(GLES20.GL_TRIANGLES,virtualScreenVetrexIndicies.length,GLES20.GL_UNSIGNED_SHORT,screenVetrexIndiciesBuffer);  parentMainActivity.checkGLError("render");}  }
class C{  public void fromArray(int[] members){  if (this.members.length != members.length) {    throw new IllegalArgumentException("invalid subset length");  }  memberSet.clear();  for (int i=0; i < members.length; i++) {    this.members[i]=members[i];    memberSet.add(members[i]);  }  validate();}  }
class C{  private boolean proxyippatternmatch(final String key){  final String cfgippattern=Switchboard.getSwitchboard().getConfig("proxyURL.access","*");  if (cfgippattern.equals("*")) {    return true;  }  final StringTokenizer st=new StringTokenizer(cfgippattern,",");  String pattern;  while (st.hasMoreTokens()) {    pattern=st.nextToken();    if (key.matches(pattern)) {      return true;    }  }  return false;}  }
class C{  private Proxy nextProxy(){  if (userSpecifiedProxy != null) {    hasNextProxy=false;    return userSpecifiedProxy;  }  if (proxySelectorProxies != null) {    while (proxySelectorProxies.hasNext()) {      Proxy candidate=proxySelectorProxies.next();      if (candidate.type() != Proxy.Type.DIRECT) {        return candidate;      }    }  }  hasNextProxy=false;  return Proxy.NO_PROXY;}  }
class C{  public void executeMethod(final HttpMethod method) throws IOException, HttpException {  if (method == null) {    throw new IllegalArgumentException("Method may not be null");  }  hostConfiguration.getParams().setDefaults(params);  method.getParams().setDefaults(hostConfiguration.getParams());  final Collection defaults=(Collection)hostConfiguration.getParams().getParameter(HostParams.DEFAULT_HEADERS);  if (defaults != null) {    final Iterator i=defaults.iterator();    while (i.hasNext()) {      method.addRequestHeader((Header)i.next());    }  }  try {    final int maxRedirects=params.getIntParameter(HttpClientParams.MAX_REDIRECTS,100);    for (int redirectCount=0; ; ) {      if (conn != null && !hostConfiguration.hostEquals(conn)) {        conn.setLocked(false);        conn.releaseConnection();        conn=null;      }      if (conn == null) {        conn=connectionManager.getConnectionWithTimeout(hostConfiguration,params.getConnectionManagerTimeout());        conn.setLocked(true);        final Credentials preemptiveCredentials=getPreemptiveCredentials(conn.getHost(),conn.getPort());        if (preemptiveCredentials != null && method.getDoAuthentication()) {          method.getHostAuthState().setPreemptive(preemptiveCredentials);          method.getHostAuthState().setAuthAttempted(true);        }      }      if (method.getDoAuthentication()) {        authenticate(method);      }      executeWithRetry(method);      if (connectMethod != null) {        fakeResponse(method);        break;      }      boolean retry=false;      if (isRedirectNeeded(method)) {        if (processRedirectResponse(method)) {          retry=true;          ++redirectCount;          if (redirectCount >= maxRedirects) {            LOG.error("Narrowly avoided an infinite loop in execute");            throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");          }          if (LOG.isDebugEnabled()) {            LOG.debug("Execute redirect " + redirectCount + " of "+ maxRedirects);          }        }      }      if (isAuthenticationNeeded(method)) {        if (processAuthenticationResponse(method)) {          LOG.debug("Retry authentication");          retry=true;        }      }      if (!retry) {        break;      }      if (method.getResponseBodyAsStream() != null) {        method.getResponseBodyAsStream().close();      }    }  }  finally {    if (conn != null) {      conn.setLocked(false);    }    if ((releaseConnection || method.getResponseBodyAsStream() == null) && conn != null) {      conn.releaseConnection();    }  }}  }
class C{  private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter){  return buildHttpDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);}  }
class C{  public static String bytesToHex(byte[] bytes,boolean withSpaces){  StringBuilder sb=new StringBuilder();  for (  byte hashByte : bytes) {    int intVal=0xff & hashByte;    if (intVal < 0x10) {      sb.append('0');    }    sb.append(Integer.toHexString(intVal));    if (withSpaces) {      sb.append(' ');    }  }  return sb.toString();}  }
class C{  private void initialize(String schema){  shardTable=new Table(schema,TABLE_NAME);  shardMaster=new Column(SHARD_MASTER_COL,Types.VARCHAR,128);  shardName=new Column(SHARD_ID_COL,Types.VARCHAR,128,true);  shardCritical=new Column(SHARD_CRIT_COL,Types.TINYINT,1);  Key shardKey=new Key(Key.Primary);  shardKey.AddColumn(shardName);  shardTable.AddColumn(shardName);  shardTable.AddColumn(shardMaster);  shardTable.AddColumn(shardCritical);  shardTable.AddKey(shardKey);}  }
class C{  public void pushNewMethodState(MethodState methodState){  methodState.setNext(firstCutpointPointer);  firstCutpointPointer=methodState;}  }
class C{  public SortedMap<String,String> properties(){  return props;}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new WSearchEditor("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));  initBPOrderDetails(C_BPartner_ID,forInvoice);}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  preference.setSummary((CharSequence)newValue);  return true;}  }
class C{  public Clustering<SubspaceModel> run(Database db,Relation<V> relation){  if (mu >= relation.size()) {    throw new AbortException("Parameter mu is chosen unreasonably large. This won't yield meaningful results.");  }  DiSHClusterOrder opticsResult=new Instance(db,relation).run();  if (LOG.isVerbose()) {    LOG.verbose("Compute Clusters.");  }  return computeClusters(relation,opticsResult);}  }
class C{  public static void Initialize(){  buildHashTable();  buildPrefixHashTable();  buildStringCharTable();  buildCanPrecedeLabelTable();}  }
class C{  private JCas runTest(String aLanguage,String aText) throws Exception {  return runTest(aLanguage,null,aText,false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String senTokenize(String text){  String ret=text;  if (isTokenization) {    ret=PennTokenizer.tokenize(text);  }  return ret.trim();}  }
class C{  private SavedState(Parcel in){  Parcelable superState=in.readParcelable(RecyclerView.class.getClassLoader());  this.superState=superState != null ? superState : EMPTY_STATE;  prevFirstVisiblePosition=in.readInt();  prevFirstVisibleChildHeight=in.readInt();  prevScrolledChildrenHeight=in.readInt();  prevScrollY=in.readInt();  scrollY=in.readInt();  childrenHeights=new SparseIntArray();  final int numOfChildren=in.readInt();  if (0 < numOfChildren) {    for (int i=0; i < numOfChildren; i++) {      final int key=in.readInt();      final int value=in.readInt();      childrenHeights.put(key,value);    }  }}  }
class C{  public static boolean checkIfDiffIsLegal(SolrDocumentList a,SolrDocumentList b,String aName,String bName,Set<String> bAddFails,Set<String> bDeleteFails){  boolean legal=true;  Set<Map> setA=new HashSet<>();  for (  SolrDocument sdoc : a) {    setA.add(new HashMap(sdoc));  }  Set<Map> setB=new HashSet<>();  for (  SolrDocument sdoc : b) {    setB.add(new HashMap(sdoc));  }  Set<Map> onlyInA=new HashSet<>(setA);  onlyInA.removeAll(setB);  Set<Map> onlyInB=new HashSet<>(setB);  onlyInB.removeAll(setA);  if (onlyInA.size() == 0 && onlyInB.size() == 0) {    throw new IllegalArgumentException("No difference between list a and b");  }  System.err.println("###### Only in " + aName + ": "+ onlyInA);  System.err.println("###### Only in " + bName + ": "+ onlyInB);  for (  Map doc : onlyInA) {    if (bAddFails == null || !bAddFails.contains(doc.get("id"))) {      legal=false;    } else {      System.err.println("###### Only in " + aName + ": "+ doc.get("id")+ ", but this is expected because we found an add fail for "+ doc.get("id"));    }  }  for (  Map doc : onlyInB) {    if (bDeleteFails == null || !bDeleteFails.contains(doc.get("id"))) {      legal=false;    } else {      System.err.println("###### Only in " + bName + ": "+ doc.get("id")+ ", but this is expected because we found a delete fail for "+ doc.get("id"));    }  }  return legal;}  }
class C{  public void rewind(){synchronized (used) {    for (    ParameterPair pair : used) {      current.addParameter(pair.option,pair.value);    }    used.clear();  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if (bevelType == RAISED) {    paintRaisedBevel(c,g,x,y,width,height);  } else   if (bevelType == LOWERED) {    paintLoweredBevel(c,g,x,y,width,height);  }}  }
class C{  public void syncFile(OCFile file){  if (!file.isFolder()) {    Intent intent=new Intent(mFileActivity,OperationsService.class);    intent.setAction(OperationsService.ACTION_SYNC_FILE);    intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS,true);    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(intent);    mFileActivity.showLoadingDialog(mFileActivity.getApplicationContext().getString(R.string.wait_a_moment));  } else {    Intent intent=new Intent(mFileActivity,OperationsService.class);    intent.setAction(OperationsService.ACTION_SYNC_FOLDER);    intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());    intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());    mFileActivity.startService(intent);  }}  }
class C{  public Keyboard(Context context,int xmlLayoutResId,int modeId,int width,int height){  mDisplayWidth=width;  mDisplayHeight=height;  mDefaultHorizontalGap=0;  mDefaultWidth=mDisplayWidth / 10;  mDefaultVerticalGap=0;  mDefaultHeight=mDefaultWidth;  mKeys=new ArrayList<Key>();  mModifierKeys=new ArrayList<Key>();  mKeyboardMode=modeId;  loadKeyboard(context,context.getResources().getXml(xmlLayoutResId));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.FIELD_ACCESSOR__DECLARED_ABSTRACT:    setDeclaredAbstract((Boolean)newValue);  return;case TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE:setDeclaredThisType((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Matrix4x3d m32(double m32){  this.m32=m32;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int lev=getInt(stack);  EPGDataSource ds=EPG.getInstance().getEPGDSForEPGDSName(getString(stack));  if (ds != null)   ds.applyServiceLevel(lev);  return null;}  }
class C{  @Override public boolean isDateAllowed(LocalDate date){  if ((date.getDayOfMonth() >= 7) && (date.getDayOfMonth() <= 11)) {    return false;  }  if ((date.getDayOfWeek() == DayOfWeek.SATURDAY) && ((date.getDayOfMonth() % 2) == 1)) {    return false;  }  return true;}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof IntegerSyntax && value == ((IntegerSyntax)object).value);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DE_ACTIVATE_FOR___DEACTIVATE_FOR_1:    setDeactivate_for_1(DEACTIVATE_FOR_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public DefaultHttpMethodRetryHandler(final int retryCount,final boolean requestSentRetryEnabled){  super();  this.retryCount=retryCount;  this.requestSentRetryEnabled=requestSentRetryEnabled;}  }
class C{  public boolean isElementContentWhitespace(){  return false;}  }
class C{  public boolean toBoolean(Element el,String attributeName,boolean defaultValue){  String value=el.getAttribute(attributeName);  if (value == null)   return defaultValue;  return Caster.toBooleanValue(value,false);}  }
class C{  public byte[] readHead(String id,int version){  final IKeyBuilder keyBuilder=getFileDataIndex().getIndexMetadata().getKeyBuilder();  final byte[] fromKey=keyBuilder.reset().appendText(id,true,false).append(version).append(0L).getKey();  final byte[] toKey=keyBuilder.reset().appendText(id,true,false).append(version).append(Long.MAX_VALUE).getKey();  final ITupleIterator itr=getFileDataIndex().rangeIterator(fromKey,toKey,1,IRangeQuery.KEYS | IRangeQuery.VALS,null);  if (!itr.hasNext()) {    if (INFO)     log.info("id=" + id + ", version="+ version+ " : no blocks");    return null;  }  return readBlock(id,version,itr.next());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  double biLinearInterpolation(double xCoord,double yCoord){  return biLinearValueInterpolation(this.sg,xCoord,yCoord);}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (int k=0; k < segments.length; ++k) {    Segment<V> seg=segments[k];    seg.lock();    try {      HashEntry<V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        for (HashEntry<V> e=tab[i]; e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public IndexRequest parent(String parent){  this.parent=parent;  if (routing == null) {    routing=parent;  }  return this;}  }
class C{  public static void goTo(WorldWindow wwd,Sector sector){  if (wwd == null) {    String message=Logging.getMessage("nullValue.WorldWindow");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Box extent=Sector.computeBoundingBox(wwd.getModel().getGlobe(),wwd.getSceneController().getVerticalExaggeration(),sector);  Angle fov=wwd.getView().getFieldOfView();  double zoom=extent.getRadius() / fov.cosHalfAngle() / fov.tanHalfAngle();  wwd.getView().goTo(new Position(sector.getCentroid(),0d),zoom);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_CASE_ACTIVATION___TRACECASE_ACT_NAME_1:    return getTracecase_act_name_1();case UmplePackage.TRACE_CASE_ACTIVATION___ANONYMOUS_TRACE_CASE_ACTIVATION_11:  return getAnonymous_traceCaseActivation_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isScramble2(String s1,String s2){  if (s1 == null || s2 == null || s1.length() != s2.length()) {    return false;  }  if (s1.equals(s2)) {    return true;  }  char[] c1=s1.toCharArray();  char[] c2=s2.toCharArray();  Arrays.sort(c1);  Arrays.sort(c2);  if (!Arrays.equals(c1,c2)) {    return false;  }  for (int i=1; i < s1.length(); i++) {    if (isScramble(s1.substring(0,i),s2.substring(0,i)) && isScramble(s1.substring(i),s2.substring(i))) {      return true;    }    if (isScramble(s1.substring(0,i),s2.substring(s2.length() - i)) && isScramble(s1.substring(i),s2.substring(0,s2.length() - i))) {      return true;    }  }  return false;}  }
class C{  public ClientConfig withRequestLoggingEnabled(){  setRequestLoggingEnabled(true);  return this;}  }
class C{  private static String cleanAlias(String alias){  char[] chars=alias.toCharArray();  if (!Character.isLetter(chars[0])) {    for (int i=1; i < chars.length; i++) {      if (Character.isLetter(chars[i])) {        return alias.substring(i);      }    }  }  return alias;}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  public ChoiceGenerator(int a,int b){  if ((a < 0) || (b < 0) || (a < b)) {    throw new IllegalArgumentException("For 'a choose b', a and b must be " + "nonnegative with a >= b: " + "a = " + a + ", b = "+ b);  }  this.a=a;  this.b=b;  choiceLocal=new int[b];  choiceReturned=new int[b];  diff=a - b;  for (int i=0; i < b - 1; i++) {    choiceLocal[i]=i;  }  if (b > 0) {    choiceLocal[b - 1]=b - 2;  }  begun=false;}  }
class C{  protected void showExplanation(){  if (!explain)   return;  try {    ExplainType explainType=(explainLevel != null) ? explainLevel.getExplainType() : ExplainType.RUNTIME;    System.out.println(Explain.explain(dmlProgram,runtimeProgram,explainType));  } catch (  Exception e) {    throw new MLContextException("Exception occurred while explaining dml program",e);  }}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  public ServerThread(Socket socket,Decoder decoder,JoshuaConfiguration joshuaConfiguration){  this.joshuaConfiguration=joshuaConfiguration;  this.socket=socket;  this.decoder=decoder;}  }
class C{  @Override public double calculateLikelihood(List<BranchOperation> branchOperations,List<NodeOperation> nodeOperations,int rootNodeNumber) throws LikelihoodUnderflowException {  if (RESCALING_OFF) {    useScaleFactors=false;    recomputeScaleFactors=false;  }  int k=0;  for (  EvolutionaryProcessDelegate evolutionaryProcessDelegate : evolutionaryProcessDelegates) {    if (updateSubstitutionModels[k]) {      evolutionaryProcessDelegate.updateSubstitutionModels(beagle,flip);    }    k++;  }  k=0;  for (  SiteRateModel siteRateModel : siteRateModels) {    if (updateSiteRateModels[k]) {      double[] categoryRates=siteRateModel.getCategoryRates();      beagle.setCategoryRates(categoryRates);    }    k++;  }  int branchUpdateCount=0;  for (  BranchOperation op : branchOperations) {    branchUpdateIndices[branchUpdateCount]=op.getBranchNumber();    branchLengths[branchUpdateCount]=op.getBranchLength();    branchUpdateCount++;  }  if (branchUpdateCount > 0) {    for (    EvolutionaryProcessDelegate evolutionaryProcessDelegate : evolutionaryProcessDelegates) {      evolutionaryProcessDelegate.updateTransitionMatrices(beagle,branchUpdateIndices,branchLengths,branchUpdateCount,flip);    }  }  if (flip) {    for (    NodeOperation op : nodeOperations) {      partialBufferHelper.flipOffset(op.getNodeNumber());    }  }  int operationCount=0;  k=0;  for (  NodeOperation op : nodeOperations) {    int nodeNum=op.getNodeNumber();    int writeScale, readScale;    if (useScaleFactors) {      int n=nodeNum - tipCount;      if (recomputeScaleFactors) {        scaleBufferHelper.flipOffset(n);        scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);        writeScale=scaleBufferIndices[n];        readScale=Beagle.NONE;      } else {        writeScale=Beagle.NONE;        readScale=scaleBufferIndices[n];      }    } else {      if (useAutoScaling) {        scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);      }      writeScale=Beagle.NONE;      readScale=Beagle.NONE;    }    int mapPartition=partitionCount / evolutionaryProcessDelegates.size();    for (int i=0; i < partitionCount; i++) {      EvolutionaryProcessDelegate evolutionaryProcessDelegate=evolutionaryProcessDelegates.get(i / (mapPartition));      operations[k]=partialBufferHelper.getOffsetIndex(nodeNum);      operations[k + 1]=writeScale;      operations[k + 2]=readScale;      operations[k + 3]=partialBufferHelper.getOffsetIndex(op.getLeftChild());      operations[k + 4]=evolutionaryProcessDelegate.getMatrixIndex(op.getLeftChild());      operations[k + 5]=partialBufferHelper.getOffsetIndex(op.getRightChild());      operations[k + 6]=evolutionaryProcessDelegate.getMatrixIndex(op.getRightChild());      k+=Beagle.OPERATION_TUPLE_SIZE;      operationCount++;    }  }  beagle.updatePartials(operations,operationCount,Beagle.NONE);  int rootIndex=partialBufferHelper.getOffsetIndex(rootNodeNumber);  int cumulateScaleBufferIndex=Beagle.NONE;  if (useScaleFactors) {    if (recomputeScaleFactors) {      scaleBufferHelper.flipOffset(internalNodeCount);      cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);      beagle.resetScaleFactors(cumulateScaleBufferIndex);      beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,cumulateScaleBufferIndex);    } else {      cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);    }  } else   if (useAutoScaling) {    beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,Beagle.NONE);  }  for (int i=0; i < siteRateModels.size(); i++) {    double[] categoryWeights=this.siteRateModels.get(i).getCategoryProportions();    beagle.setCategoryWeights(i,categoryWeights);    double[] frequencies=evolutionaryProcessDelegates.get(i).getRootStateFrequencies();    beagle.setStateFrequencies(i,frequencies);  }  double[] sumLogLikelihoods=new double[1];  beagle.calculateRootLogLikelihoods(new int[]{rootIndex},new int[]{0},new int[]{0},new int[]{cumulateScaleBufferIndex},1,sumLogLikelihoods);  double logL=sumLogLikelihoods[0];  if (Double.isNaN(logL) || Double.isInfinite(logL)) {    everUnderflowed=true;    flip=false;    throw new LikelihoodUnderflowException();  }  updateSubstitutionModels(false);  updateSiteRateModels(false);  return logL;}  }
class C{  public void reset(){  sourceMap=new HashMap<V,SourceData>();}  }
class C{  public void sendSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {  int startChunk=start >>> m_chunkBits;  int startColumn=start & m_chunkMask;  if (startColumn + length < m_chunkMask && m_innerFSB == null) {    ch.characters(m_array[startChunk],startColumn,length);    return;  }  int stop=start + length;  int stopChunk=stop >>> m_chunkBits;  int stopColumn=stop & m_chunkMask;  for (int i=startChunk; i < stopChunk; ++i) {    if (i == 0 && m_innerFSB != null)     m_innerFSB.sendSAXcharacters(ch,startColumn,m_chunkSize - startColumn); else     ch.characters(m_array[i],startColumn,m_chunkSize - startColumn);    startColumn=0;  }  if (stopChunk == 0 && m_innerFSB != null)   m_innerFSB.sendSAXcharacters(ch,startColumn,stopColumn - startColumn); else   if (stopColumn > startColumn) {    ch.characters(m_array[stopChunk],startColumn,stopColumn - startColumn);  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  public final void asserta(final JIPTerm term){synchronized (m_globalDB) {    m_globalDB.asserta(Clause.getClause(term.getTerm(),getEnvVariable("enable_clause_check").equals("true")),null,true);  }}  }
class C{  public static boolean exists(String filepath){  File f=new File(filepath);  if (f.exists()) {    return true;  }  return false;}  }
class C{  public static BufferedInputStream newInputStream(Path self) throws IOException {  return new BufferedInputStream(Files.newInputStream(self));}  }
class C{  public Help(Frame frame,String title,URL url){  super(frame,title,false);  try {    jbInit();    info.setPage(url);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  AEnv.positionCenterWindow(frame,this);}  }
class C{  public void testDrainToSelf(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.drainTo(q);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean usingNamespaces(String namespace){  if (!namespacesOn) {    return false;  }  if (inlineLocalMode) {    return true;  }  return false;}  }
class C{  public void valueChanged(ListSelectionEvent event){  if (!event.getValueIsAdjusting()) {    ListSelectionModel model=(ListSelectionModel)event.getSource();    if (model.getLeadSelectionIndex() > -1) {      selectedTradelogDetail=m_tradelogDetailModel.getData().getTradelogDetail().get(m_tableTradelogDetail.convertRowIndexToModel(model.getLeadSelectionIndex()));    }  }}  }
class C{  public static boolean readBoolean(){  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  n--;  boolean bit=((buffer >> n) & 1) == 1;  if (n == 0)   fillBuffer();  return bit;}  }
class C{  public RegisterOperand makeTempCondition(){  Register reg=getCondition();  return new RegisterOperand(reg,TypeReference.Int);}  }
class C{  public <T>TStream<T> traceStream(TStream<T> stream,String sensorId,Supplier<String> label){  return traceStream(stream,null);}  }
class C{  public static long bytesToLong(byte[] arr){  int high=(arr[0] << 24) | ((arr[1] & 0xff) << 16) | ((arr[2] & 0xff) << 8)| (arr[3] & 0xff);  int low=(arr[4] << 24) | ((arr[5] & 0xff) << 16) | ((arr[6] & 0xff) << 8)| (arr[7] & 0xff);  return (((long)high) << 32) | (low & 0x0ffffffffL);}  }
class C{  public static void freeMemory(View view){  if (view != null) {    if (view.getBackground() != null)     view.getBackground().setCallback(null);    if (view instanceof ImageView) {      ImageView imageView=(ImageView)view;      imageView.setImageBitmap(null);    } else     if (view instanceof ViewGroup) {      ViewGroup viewGroup=(ViewGroup)view;      for (int i=0; i < viewGroup.getChildCount(); i++)       freeMemory(viewGroup.getChildAt(i));      if (!(view instanceof AdapterView))       viewGroup.removeAllViews();    }  }}  }
class C{  public void testAdd(){  String[] values=null;  SpellCheckedMetadata meta=new SpellCheckedMetadata();  values=meta.getValues("contentype");  assertEquals(0,values.length);  meta.add("contentype","value1");  values=meta.getValues("contentype");  assertEquals(1,values.length);  assertEquals("value1",values[0]);  meta.add("Content-Type","value2");  values=meta.getValues("contentype");  assertEquals(2,values.length);  assertEquals("value1",values[0]);  assertEquals("value2",values[1]);  meta.add("ContentType","value1");  values=meta.getValues("Content-Type");  assertEquals(3,values.length);  assertEquals("value1",values[0]);  assertEquals("value2",values[1]);  assertEquals("value1",values[2]);}  }
class C{  @Override protected void before() throws Throwable {  previousThreads=Thread.getAllStackTraces();}  }
class C{  public boolean removeTunnel(String uuid){  return tunnels.remove(uuid) != null;}  }
class C{  public static String normalizeSystemName(String systemName){  try {    if (!validSystemNameFormat(systemName,systemName.charAt(1))) {      return "";    }    Matcher matcher=getAllPattern().matcher(systemName);    matcher.matches();    if (matcher.group(7) != null) {      int num=Integer.valueOf(matcher.group(7)).intValue();      return matcher.group(1) + matcher.group(2) + num;    } else {      int offset=typeOffset(matcher.group(5));      int node=Integer.valueOf(matcher.group(4)).intValue();      int bit=Integer.valueOf(matcher.group(6)).intValue();      return matcher.group(1) + matcher.group(2) + (node * 1000 + bit + offset);    }  } catch (  java.lang.StringIndexOutOfBoundsException sobe) {    throw new IllegalArgumentException("Invalid System Name Format: " + systemName);  }}  }
class C{  private String normalizeCommandLine(String commandLine){  return commandLine.trim().replaceAll(PART_SEPARATOR + "+",PART_SEPARATOR);}  }
class C{  @Override public boolean isInside(Point point){  return flyOverPoly.contains(point.x - bounds.x,point.y - bounds.y);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void deleteLogix(Logix x){  int numConditionals=x.getNumConditionals();  if (numConditionals > 0) {    Conditional c=null;    for (int i=0; i < numConditionals; i++) {      c=InstanceManager.getDefault(jmri.ConditionalManager.class).getBySystemName(x.getConditionalByNumberOrder(i));      InstanceManager.getDefault(jmri.ConditionalManager.class).deleteConditional(c);    }  }  deregister(x);  x.dispose();}  }
class C{  public static PDAppearanceStream createCheckboxAppearance(CheckboxStyle style,PDDocument doc,PDResources resources){  String appear="q\n" + "BT\n" + "1 0 0 1 15 20 Tm\n"+ "/OpenHTMLZap 100 Tf\n"+ "(" + (char)style.caption + ") Tj\n"+ "ET\n"+ "Q\n";  return createCheckboxAppearance(appear,doc,resources);}  }
class C{  public boolean tasks(){  log.info("Starting BluetoothSpeaker tasks.");  log.info("mServerSocket:" + (mServerSocket == null) + " mBluetoothAdapter:"+ (mBluetoothAdapter != null)+ " mConnectionAcceptingThread:"+ (mBluetoothAdapter != null));  if (mServerSocket == null && mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && (mConnectionAcceptingThread == null || !mConnectionAcceptingThread.isAlive())) {    try {      log.info("No ServerSocket, creating a new one.");      createListeningSocket();      spawnConnectionAcceptingThread();    } catch (    IOException e) {      log.error("Tasks: failed to create listening BT server socket. ",e);      log.error("Can't receive incoming connections.");      return false;    }  }  if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {    log.info("bluetooth tasks failed, bluetooth disabled");    return false;  }  log.info("finished BluetoothSpeaker tasks.");  return true;}  }
class C{  public long updateTop(){  downHeap();  return heap[1];}  }
class C{  public void disconnected(){}  }
class C{  @Override public void reset() throws IOException {}  }
class C{  public static void e(String msg){  if (Config.LOG <= Level.ERROR) {    Log.e(TAG,msg);  }}  }
class C{  public final boolean isListed(final BlacklistType blacklistType,final String hostlow,final String path){  if (hostlow == null) {    throw new IllegalArgumentException("hostlow may not be null");  }  if (path == null) {    throw new IllegalArgumentException("path may not be null");  }  final Map<String,Set<Pattern>> blacklistMapMatched=getBlacklistMap(blacklistType,true);  final Map<String,Set<Pattern>> blacklistMapNotMatched=getBlacklistMap(blacklistType,false);  return Blacklist.isListed(hostlow,path,blacklistMapMatched,blacklistMapNotMatched);}  }
class C{  public Hashtable<IPoint,List<ILineSegment>> intersections(ILineSegment[] segs){  startTime();  initialize();  for (  ILineSegment ils : segs) {    EventPoint old, ep=new EventPoint(ils.getStart());    if ((old=eq.event(ep)) == null) {      eq.insert(ep);    } else {      ep=old;    }    ep.addUpperLineSegment(ils);    ep=new EventPoint(ils.getEnd());    if ((old=eq.event(ep)) == null) {      eq.insert(ep);    } else {      ep=old;    }    ep.addLowerLineSegment(ils);  }  while (!eq.isEmpty()) {    EventPoint p=eq.min();    handleEventPoint(p);  }  computeTime();  return report;}  }
class C{  protected PropertyMapper createPropertyMapper(){  return new DefaultPropertyMapper();}  }
class C{  public final int read(byte[] b) throws java.io.IOException {  return 0;}  }
class C{  private boolean containsNode(List<Id<Node>> list,Id<Node> nodeId){  Iterator<Id<Node>> nodes=list.iterator();  while (nodes.hasNext()) {    Id<Node> node=nodes.next();    if (node.compareTo(nodeId) == 0)     return true;  }  return false;}  }
class C{  public static Double[] toSparseLocalFreqDoubleArray(Terms docTerms,Terms fieldTerms) throws IOException {  TermsEnum fieldTermsEnum=fieldTerms.iterator();  Double[] freqVector=null;  if (docTerms != null && fieldTerms.size() > -1) {    freqVector=new Double[(int)fieldTerms.size()];    int i=0;    TermsEnum docTermsEnum=docTerms.iterator();    BytesRef term;    while ((term=fieldTermsEnum.next()) != null) {      TermsEnum.SeekStatus seekStatus=docTermsEnum.seekCeil(term);      if (seekStatus.equals(TermsEnum.SeekStatus.END)) {        docTermsEnum=docTerms.iterator();      }      if (seekStatus.equals(TermsEnum.SeekStatus.FOUND)) {        long termFreqLocal=docTermsEnum.totalTermFreq();        freqVector[i]=Long.valueOf(termFreqLocal).doubleValue();      } else {        freqVector[i]=0d;      }      i++;    }  }  return freqVector;}  }
class C{  public void show(PopupVPosition vAlign,PopupHPosition hAlign,Pane popupContainer){  this.setPopupContainer(popupContainer);  this.show(vAlign,hAlign);}  }
class C{  public void decodeMessage(byte[] inputBytes,int byteCount) throws SnmpStatusException {  try {    BerDecoder bdec=new BerDecoder(inputBytes);    bdec.openSequence();    version=bdec.fetchInteger();    bdec.openSequence();    msgId=bdec.fetchInteger();    msgMaxSize=bdec.fetchInteger();    msgFlags=bdec.fetchOctetString()[0];    msgSecurityModel=bdec.fetchInteger();    bdec.closeSequence();    msgSecurityParameters=bdec.fetchOctetString();    if ((msgFlags & SnmpDefinitions.privMask) == 0) {      bdec.openSequence();      contextEngineId=bdec.fetchOctetString();      contextName=bdec.fetchOctetString();      data=bdec.fetchAny();      dataLength=data.length;      bdec.closeSequence();    } else {      encryptedPdu=bdec.fetchOctetString();    }    bdec.closeSequence();  } catch (  BerException x) {    x.printStackTrace();    throw new SnmpStatusException("Invalid encoding");  }  if (SNMP_LOGGER.isLoggable(Level.FINER)) {    final StringBuilder strb=new StringBuilder().append("Unmarshalled message : \n").append("version : ").append(version).append("\n").append("msgId : ").append(msgId).append("\n").append("msgMaxSize : ").append(msgMaxSize).append("\n").append("msgFlags : ").append(msgFlags).append("\n").append("msgSecurityModel : ").append(msgSecurityModel).append("\n").append("contextEngineId : ").append(contextEngineId == null ? null : SnmpEngineId.createEngineId(contextEngineId)).append("\n").append("contextName : ").append(contextName).append("\n").append("data : ").append(data).append("\n").append("dat len : ").append((data == null) ? 0 : data.length).append("\n").append("encryptedPdu : ").append(encryptedPdu).append("\n");    SNMP_LOGGER.logp(Level.FINER,SnmpV3Message.class.getName(),"decodeMessage",strb.toString());  }}  }
class C{  public synchronized void updateFromTrackParameters(TrackParameters track){  parameters.clear();  for (  TrackedParameter p : track.getAllParameters()) {    Parameter<?> option=p.getParameter();    String value=null;    if (option.isDefined()) {      if (option.tookDefaultValue()) {        value=DynamicParameters.STRING_USE_DEFAULT + option.getDefaultValueAsString();      } else {        value=option.getValueAsString();      }    }    if (value == null) {      value=(option instanceof Flag) ? Flag.NOT_SET : "";    }    int bits=0;    if (option.isOptional()) {      bits|=BIT_OPTIONAL;    }    if (option.hasDefaultValue() && option.tookDefaultValue()) {      bits|=BIT_DEFAULT_VALUE;    }    if (value.length() <= 0) {      if ((bits & BIT_DEFAULT_VALUE) == 0 && (bits & BIT_OPTIONAL) == 0) {        bits|=BIT_INCOMPLETE;      }    } else {      try {        if (!option.tookDefaultValue() && !option.isValid(value)) {          bits|=BIT_INVALID;        }      } catch (      ParameterException e) {        bits|=BIT_INVALID;      }    }    int depth=0;{      Object pos=track.getParent(option);      while (pos != null) {        pos=track.getParent(pos);        depth+=1;        if (depth > 10) {          break;        }      }    }    parameters.add(new Node(option,value,bits,depth));  }}  }
class C{  public Object invokeMethod(Class<?> clazz,String methodName,Class<?>[] parameterTypes,Object instance,Object[] values,Object errorValue,String interfaceName){  if ((null == clazz) || (null == methodName)) {    return errorValue;  }  Cache<String,Method> classCache=cache.getIfPresent(clazz);  if (null == classCache) {    classCache=CacheBuilder.newBuilder().expireAfterAccess(20 * 60,TimeUnit.SECONDS).weakKeys().build();    cache.put(clazz,classCache);  }  Method method=classCache.getIfPresent(methodName);  if (null == method) {    try {      Class<?> interfaceClass=null;      if (null != interfaceName) {        interfaceClass=ClassUtil.searchInterface(clazz,interfaceName);      }      if (interfaceClass != null) {        try {          method=interfaceClass.getMethod(methodName,parameterTypes);        } catch (        Throwable t) {          LOG.warn("Could not lookup method " + methodName + " on class "+ clazz.getName()+ ". Trying with the class.",t);        }      }      if (null == method) {        method=clazz.getMethod(methodName,parameterTypes);      }      method.setAccessible(true);    } catch (    Throwable t) {      LOG.warn("Could not lookup method " + methodName + " on class "+ clazz.getName(),t);      return errorValue;    }    classCache.put(methodName,method);  }  try {    return method.invoke(instance,values);  } catch (  Throwable t) {    LOG.warn("Could not invoke method " + methodName + " on instance "+ instance,t);    return errorValue;  }}  }
class C{  private Uri formatSipUri(String path){  return path.startsWith(PhoneUtils.SIP_URI_HEADER) ? Uri.parse(path) : Uri.parse(PhoneUtils.SIP_URI_HEADER + path);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  if (verbose) {    logger.log("info","Starting BK Orientation.");  }  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    if (verbose) {      logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));    }  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    if (verbose) {      System.out.println("Rule T3: Orienting " + from + "-->"+ to);    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    if (verbose) {      logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));    }  }  if (verbose) {    logger.log("info","Finishing BK Orientation.");  }}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  flushStartDoc();  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.comment(ch,start,length);}  }
class C{  public MultiplexingSocket(){  this((Socket)null);}  }
class C{  public void createAndRegister(MBeanServer mbs,int port,String username,String password){  try {    AuthInfo users[]={new AuthInfo(username,password)};    HtmlAdaptorServer adaptorServer;    if (username != null && password != null) {      adaptorServer=new HtmlAdaptorServer(port,users);    } else {      adaptorServer=new HtmlAdaptorServer(port);      logger.warn("Se ha arrancado la consola de monitorizacion sin usuario/contrase\361a. Debiera suministrarse un par usuario/contrase\361a en las propiedades JMX.HTTP.USERNAME/JMX.HTTP.PASSWORD en el fichero web.xml");    }    ObjectName adaptorObjectName=new ObjectName(mbs.getDefaultDomain() + ":type=htmladaptor,port=" + port);    logger.info("Se esta usando la autenticacion : " + adaptorServer.isAuthenticationOn());    mbs.registerMBean(adaptorServer,adaptorObjectName);    adaptorServer.start();  } catch (  Exception e) {    logger.error("Error creando consola HTML. Consola no se puede crear.",e);  }}  }
class C{  public double manhattanDistance(final Double2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  protected void addIdPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_PackageMember_id_feature"),getString("_UI_PropertyDescriptor_description","_UI_PackageMember_id_feature","_UI_PackageMember_type"),TypesPackage.Literals.PACKAGE_MEMBER__ID,false,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void drawCenteredText(ExecutionUnit process,Graphics2D g2,Font font,String text,Color color,double yOffset){  double width=model.getProcessWidth(process);  double height=model.getProcessHeight(process);  Graphics2D g2d=(Graphics2D)g2.create();  g2d.setFont(font);  Rectangle2D bounds=g2d.getFontMetrics().getStringBounds(text,g2d);  int x=(int)(width / 2 - bounds.getWidth() / 2);  int y=(int)(height / 2 + bounds.getHeight() / 2 + yOffset);  g2d.setColor(color);  g2d.drawString(text,x,y);  g2d.dispose();}  }
class C{  public void sort(){  Collections.sort(data);  super.fireContentsChanged(this,0,data.size() - 1);}  }
class C{  public T caseReaction(Reaction object){  return null;}  }
class C{  public void mouseReleased(java.awt.event.MouseEvent e){  if ((getTree() != null) && getTree().isEnabled()) {    javax.swing.tree.TreePath path=getClosestPathForLocation(getTree(),e.getX(),e.getY());    if (path != null) {      java.awt.Rectangle bounds=getPathBounds(getTree(),path);      if (bounds == null || e.getY() > (bounds.y + bounds.height)) {        return;      }      int x=e.getX();      if ((x > bounds.x) && (x <= (bounds.x + bounds.width)) && (alreadySelectedPath == path)) {        selectPath(path,e);      }    }  }  alreadySelectedPath=null;}  }
class C{  @Override public CertPathBuilderResult engineBuild(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  if (debug != null) {    debug.println("SunCertPathBuilder.engineBuild(" + params + ")");  }  buildParams=PKIX.checkBuilderParams(params);  return build();}  }
class C{  public void onDidBeginTransition(PLIView view,PLITransition transition){}  }
class C{  private void fetchMyServiceCardsFromServer(){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);  retroCallbackList.add(retroCallback);  mYeloApi.getMyServiceCards(retroCallback);}  }
class C{  public void registerAttribute(Label label) throws Exception {  String name=label.getName();  if (attributes.get(name) != null) {    throw new AttributeException("Duplicate annotation of name '%s' on %s",name,label);  }  attributes.put(name,label);}  }
class C{  private void rewriteMoveInstruction(Instruction s){  if (mutateMoveToNop(s))   return;  Operand result=MIR_Move.getResult(s);  Operand val=MIR_Move.getValue(s);  if (result instanceof StackLocationOperand) {    if (val instanceof MemoryOperand || val instanceof StackLocationOperand) {      int offset=((StackLocationOperand)result).getOffset();      byte size=((StackLocationOperand)result).getSize();      offset=FPOffset2SPOffset(offset) + size;      moveESPBefore(s,offset);      MIR_UnaryNoRes.mutate(s,IA32_PUSH,val);    }  } else {    if (result instanceof MemoryOperand) {      if (val instanceof StackLocationOperand) {        int offset=((StackLocationOperand)val).getOffset();        offset=FPOffset2SPOffset(offset);        moveESPBefore(s,offset);        MIR_Nullary.mutate(s,IA32_POP,result);      }    }  }}  }
class C{  public int drainPermits(){  return sync.drainPermits();}  }
class C{  @SuppressWarnings("unchecked") protected void heapifyUpComparable(int pos,Object elem){  final Comparable<Object> cur=(Comparable<Object>)elem;  while (pos > 0) {    final int parent=(pos - 1) >>> 1;    Object par=queue[parent];    if (cur.compareTo(par) >= 0) {      break;    }    queue[pos]=par;    pos=parent;  }  queue[pos]=cur;}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public void endBatchMode(){  mPreventInvalidateCount--;  invalidateSelf();}  }
class C{  public void generate(String currentSchemaOutputDirectory,String olderSchemaOutputDirectory) throws Exception {  System.out.println("Poirot\n" + "Copyright 2016 Vinay Shenoy, vinaysshenoy.com. Licensed under GPL V3.\n" + "This program comes with ABSOLUTELY NO WARRANTY");  if (isEmpty(currentSchemaOutputDirectory) || isEmpty(olderSchemaOutputDirectory)) {    throw new IllegalArgumentException("Either current or older output directories cannot be null or empty");  }  if (mSchemas.isEmpty()) {    throw new IllegalStateException("At least one schema must be added!");  }  Utils.ensureDirectory(currentSchemaOutputDirectory,olderSchemaOutputDirectory);  final DaoGenerator generator=new DaoGenerator();  for (int i=0; i < mSchemas.size(); i++) {    generator.generateAll(mSchemas.get(i),i == mSchemas.size() - 1 ? currentSchemaOutputDirectory : olderSchemaOutputDirectory);  }  final EntityVerifier entityVerifier=new EntityVerifier(mSchemas,mEntityRenameDescList);  try {    entityVerifier.verify();    final PoirotDbHelperGenerator helperGenerator=new PoirotDbHelperGenerator(mSchemas,mEntityRenameDescList);    helperGenerator.generateHelper(currentSchemaOutputDirectory);  } catch (  EntityVerifier.VerificationFailedException e) {    throw new RuntimeException("Failed to verify entities!",e);  }}  }
class C{  public static VOSubscription toVOSubscription(Subscription subscription,LocalizerFacade facade){  return toVOSubscription(subscription,facade,PerformanceHint.ALL_FIELDS);}  }
class C{  private void walk(Node node){  if (node instanceof Element) {    findLicenseUrl((Element)node);  }  if (node instanceof Comment) {    findRdf(((Comment)node).getData());  }  NodeList children=node.getChildNodes();  for (int i=0; children != null && i < children.getLength(); i++) {    walk(children.item(i));  }}  }
class C{  void reportError(String msg,Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public boolean isExposedOnEntry(){  return (number == 0);}  }
class C{  public void testGetSetterMethodName(){  assertEquals("setContext",this.element.getSetterMethodName("context"));}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  void dispose(){  if (popup != null) {    popup.removeAll();  }  popup=null;  for (  RayTrack ray : rayList) {    ray.dispose();  }}  }
class C{  public synchronized void destroy(){  if (log.isDebugEnabled()) {    log.debug("Destroying Esper DB Adapter");  }  executorFactory.destroy();}  }
class C{  public Wine runForeground(String executableToRun,List<String> arguments) throws CancelException {  runForeground(new File(executableToRun),arguments,null);  return this;}  }
class C{  public static void assertExceptions(final Exception occurred,final Class expectedClass,final String... expectedMessageParts){  assertEquals(occurred.getClass(),expectedClass);  final String actualMessage=occurred.getMessage();  final List<String> parts=Arrays.asList(expectedMessageParts);  for (  final String currentPart : parts)   assertTrue(actualMessage.contains(currentPart),String.format("Actual exception's message [%s] does not contain [%s] text.",actualMessage,currentPart));}  }
class C{  public void addParamPanel(String[] parentParams,String name,AbstractParamPanel panel,boolean sort){  if (parentParams != null) {    addNewNode(addParamNode(parentParams,sort),new DefaultMutableTreeNode(name),sort);  } else {  }  panel.setName(name);  getPanelParam().add(panel,name);  tablePanel.put(name,panel);}  }
class C{  public static void saveOptimizerData(){  File f=getOptimizeFile();  if (!f.getParentFile().exists()) {    f.getParentFile().mkdirs();    logger.info(Localization.Main.getText("optimizer.createPath",f.getParentFile()));  }  if (generatedConfig == null) {    generatedConfig=new ConfigurationHolder(f);    logger.info(Localization.Main.getText("optimizer.createDefaults"));  }  generatedConfig.setMaxBeforePaginate(currentProfile.getMaxBeforePaginate());  generatedConfig.setMaxSplitLevels(currentProfile.getMaxSplitLevels());  generatedConfig.setMaxBeforeSplit(currentProfile.getMaxBeforeSplit());  generatedConfig.setMaxSummaryLength(currentProfile.getMaxSummaryLength());  generatedConfig.setMaxBookSummaryLength(currentProfile.getMaxBookSummaryLength());  generatedConfig.setSecurityCode(Long.toString(System.currentTimeMillis()));  generatedConfig.setBrowseByCover(currentProfile.getBrowseByCover());  generatedConfig.save();  logger.info(Localization.Main.getText("optimizer.savedFile",f));}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  private int calculateNewCapacity(){  int oldCapacity=queue.length;  int newCapacity=(oldCapacity < 64) ? (oldCapacity + 1) * 2 : IntMath.checkedMultiply(oldCapacity / 2,3);  return capAtMaximumSize(newCapacity,maximumSize);}  }
class C{  public Composite createControl(final Composite parent,final KeyListener klisten,final StyleBuilder build){  final Composite part=AbstractSimpleConfigurator.subpart(parent,"Point");  this.on=new Button(part,SWT.CHECK);  this.size=new Combo(part,SWT.DROP_DOWN);  this.size.setItems(new String[]{"1","2","3","5","10","15"});  this.size.setTextLimit(2);  this.size.addKeyListener(klisten);  this.size.setToolTipText("Graphic size");  this.name=new Combo(part,SWT.DROP_DOWN);  this.name.setItems(build.getWellKnownMarkNames());  this.name.setTextLimit(9);  this.name.addKeyListener(klisten);  this.name.setToolTipText("Shape type");  return part;}  }
class C{  public <T>void bindInitializer(Initializer<T> initializer,Class<T> cls){  getEntityBinding(cls).setInitializer(initializer);}  }
class C{  private static Attributes encodeReference(char separator,Reference ref,Attributes attrs,Object orig) throws NamingException {  if (ref == null)   return attrs;  String s;  if ((s=ref.getClassName()) != null) {    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[CLASSNAME],s));  }  if ((s=ref.getFactoryClassName()) != null) {    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[FACTORY],s));  }  if ((s=ref.getFactoryClassLocation()) != null) {    attrs.put(new BasicAttribute(JAVA_ATTRIBUTES[CODEBASE],s));  }  if (orig != null && attrs.get(JAVA_ATTRIBUTES[TYPENAME]) != null) {    Attribute tAttr=LdapCtxFactory.createTypeNameAttr(orig.getClass());    if (tAttr != null) {      attrs.put(tAttr);    }  }  int count=ref.size();  if (count > 0) {    Attribute refAttr=new BasicAttribute(JAVA_ATTRIBUTES[REF_ADDR]);    RefAddr refAddr;    BASE64Encoder encoder=null;    for (int i=0; i < count; i++) {      refAddr=ref.get(i);      if (refAddr instanceof StringRefAddr) {        refAttr.add("" + separator + i+ separator+ refAddr.getType()+ separator+ refAddr.getContent());      } else {        if (encoder == null)         encoder=new BASE64Encoder();        refAttr.add("" + separator + i+ separator+ refAddr.getType()+ separator+ separator+ encoder.encodeBuffer(serializeObject(refAddr)));      }    }    attrs.put(refAttr);  }  return attrs;}  }
class C{  public ExceptionSensorData(Timestamp timeStamp,long platformIdent,long sensorTypeIdent,long methodIdent){  super(timeStamp,platformIdent,sensorTypeIdent,methodIdent);}  }
class C{  public static CommandLine parse(Options options,String... args) throws Exception {  return CommandLineParser.parse(options,args);}  }
class C{  public boolean applyPressed(){  landscapePath=landscapeText.getText().trim();  if (landscapePath.length() == 0) {    messageText.setText("Please select a landscape.");    return (false);  }  String filetxt=fileText.getText().trim();  if ((filetxt == null) || (filetxt.length() == 0)) {    messageText.setText("Please select an input file.");    return (false);  }  String str=null;  String missingValue=null;  if (equalToButton.isSelected()) {    str=equalToText.getText();    if (!str.isEmpty()) {      try {        Float.valueOf(str);        missingValue=str;      } catch (      Exception e) {        messageText.setText("Invalid entry for missing value.");        return (false);      }    }  }  str=(String)tileSizeMenu.getSelectedItem();  tileSize=Integer.parseInt(str);  layerType=(LayerType)typeMenu.getSelectedItem();  if (layerType == LayerType.elevation) {    layerName="elevation";  } else {    layerName=nameText.getText().trim();    if (layerName.isEmpty()) {      messageText.setText("Please enter a name for the layer.");      return (false);    }  }  globe=(String)globeMenu.getSelectedItem();  if (globe.equals("Use Metadata")) {    globe=null;  }  if (!autoMargin.isSelected()) {    try {      margin=new int[4];      String s=leftEdge.getText();      margin[0]=Integer.parseInt(s);      s=rightEdge.getText();      margin[1]=Integer.parseInt(s);      s=bottomEdge.getText();      margin[2]=Integer.parseInt(s);      s=topEdge.getText();      margin[3]=Integer.parseInt(s);    } catch (    Exception e) {      messageText.setText("Invalid margin value.");      return (false);    }  }  missing=missingValue;  if (landscapePath != null) {    messageText.setText("Creating pyramid . . .");    String fPath=filetxt.toLowerCase();    RasterFile rf=null;    if (fPath.endsWith(".img") || fPath.endsWith(".lbl")) {      rf=new PDS(filetxt,dertProperties);    } else     if (fPath.endsWith(".tiff") || fPath.endsWith(".tif") || fPath.endsWith(".gtif")|| fPath.endsWith(".gtiff")) {      rf=new GTIF(filetxt,dertProperties);    } else {      messageText.setText("Only NASA PDS and GeoTIFF formats are supported.");      return (false);    }    factory=new RasterPyramidLayerFactory(rf);    return (true);  }  return (false);}  }
class C{  public void actionPerformed(AnActionEvent event){  triggerAction(null,SearchContext.buildFromDataContext(event.getDataContext()));}  }
class C{  private void visitUnionType(VariableTree declaration){  UnionTypeTree type=(UnionTypeTree)declaration.getType();  builder.open(ZERO);  sync(declaration);  visitAndBreakModifiers(declaration.getModifiers(),Direction.HORIZONTAL,Optional.<BreakTag>absent());  List<? extends Tree> union=type.getTypeAlternatives();  boolean first=true;  for (int i=0; i < union.size() - 1; i++) {    if (!first) {      builder.breakOp(" ");      token("|");      builder.space();    } else {      first=false;    }    scan(union.get(i),null);  }  builder.breakOp(" ");  token("|");  builder.space();  Tree last=union.get(union.size() - 1);  declareOne(DeclarationKind.NONE,Direction.HORIZONTAL,Optional.<ModifiersTree>absent(),last,VarArgsOrNot.NO,ImmutableList.<AnnotationTree>of(),declaration.getName(),"","=",Optional.fromNullable(declaration.getInitializer()),Optional.<String>absent(),Optional.<ExpressionTree>absent(),Optional.<TypeWithDims>absent());  builder.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.775 -0500",hash_original_method="EF06BFAED4C963D2A51D5D03CF5F89C2",hash_generated_method="9E12C719D4E2F9DE70DB8E186EDBD052") @DSSafe(DSCat.SAFE_LIST) static public MotionEvent obtainNoHistory(MotionEvent other){  if (other == null) {    throw new IllegalArgumentException("other motion event must not be null");  }  MotionEvent ev=obtain();  ev.mNativePtr=nativeCopy(ev.mNativePtr,other.mNativePtr,false);  return ev;}  }
class C{  public int createNewAssembler(long timestamp){  int spot=-1;  if (numberOfAssemblers < NUMBER_OF_ASSEMBLERS) {    for (int i=0; i < numberOfAssemblers; i++) {      if (timestamp < assemblers[i].getTimestamp()) {        spot=i;      }    }    if (spot == -1) {      spot=numberOfAssemblers;    }    numberOfAssemblers++;    FrameAssembler oldAssembler=assemblers[numberOfAssemblers - 1];    for (int i=numberOfAssemblers - 1; i > spot; i--) {      assemblers[i]=assemblers[i - 1];    }    if (oldAssembler != null) {      assemblers[spot]=oldAssembler;      assemblers[spot].reset();    } else {      assemblers[spot]=new FrameAssembler();    }  } else {    FrameAssembler oldAssembler=assemblers[0];    for (int i=1; i < NUMBER_OF_ASSEMBLERS; i++) {      assemblers[i - 1]=assemblers[i];    }    spot=NUMBER_OF_ASSEMBLERS - 1;    if (oldAssembler != null) {      assemblers[spot]=oldAssembler;      assemblers[spot].reset();    } else {      assemblers[spot]=new FrameAssembler();    }  }  return spot;}  }
class C{  public LookupPaintScale(double lowerBound,double upperBound,Paint defaultPaint){  if (lowerBound >= upperBound) {    throw new IllegalArgumentException("Requires lowerBound < upperBound.");  }  ParamChecks.nullNotPermitted(defaultPaint,"defaultPaint");  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.defaultPaint=defaultPaint;  this.lookupTable=new java.util.ArrayList();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void endOfIntervalProcessing(long inputTime) throws AdeException {  final long[][] arrayOfSubIntervalMsg1UniqueMsgIdCount=new long[m_subIntervalSizeList.length][];  final long[][] arrayOfSubIntervalMsg1TotalMsgCount=new long[m_subIntervalSizeList.length][];  final long[][] arrayOfSubIntervalMsg2UniqueMsgIdCount=new long[m_subIntervalSizeList.length][];  final long[][] arrayOfSubIntervalMsg2TotalMsgCount=new long[m_subIntervalSizeList.length][];  for (int i=0; i < m_subIntervalSizeList.length; i++) {    final short intervalCount=m_subIntervalSizeList[i];    arrayOfSubIntervalMsg1UniqueMsgIdCount[i]=new long[m_numberOf10MinutesSlotsToKeep / intervalCount];    arrayOfSubIntervalMsg1TotalMsgCount[i]=new long[m_numberOf10MinutesSlotsToKeep / intervalCount];    arrayOfSubIntervalMsg2UniqueMsgIdCount[i]=new long[m_numberOf10MinutesSlotsToKeep / intervalCount];    arrayOfSubIntervalMsg2TotalMsgCount[i]=new long[m_numberOf10MinutesSlotsToKeep / intervalCount];  }  final Collection<MessageStats> msgStatsCollection=m_msgIdToMsgStatsMap.values();  for (  MessageStats msgStats : msgStatsCollection) {    for (int i=0; i < m_subIntervalSizeList.length; i++) {      final short subIntervalSize=m_subIntervalSizeList[i];      final long[] intervalCountArray=msgStats.getCountBasedOnIntervalSize(subIntervalSize);      for (int j=0; j < intervalCountArray.length; j++) {        final long intervalCount=intervalCountArray[j];        if (msgStats.isMsg1()) {          arrayOfSubIntervalMsg1TotalMsgCount[i][j]+=intervalCount;          if (intervalCount > 0) {            arrayOfSubIntervalMsg1UniqueMsgIdCount[i][j]++;          }        } else {          arrayOfSubIntervalMsg2TotalMsgCount[i][j]+=intervalCount;          if (intervalCount > 0) {            arrayOfSubIntervalMsg2UniqueMsgIdCount[i][j]++;          }        }      }    }  }  m_msgIdToMsgStatsMap.clear();  for (int i=0; i < m_subIntervalSizeList.length; i++) {    m_overallStatsForAllIntervals[i].addStats(arrayOfSubIntervalMsg1UniqueMsgIdCount[i],arrayOfSubIntervalMsg1TotalMsgCount[i],arrayOfSubIntervalMsg2UniqueMsgIdCount[i],arrayOfSubIntervalMsg2TotalMsgCount[i]);  }}  }
class C{  public static boolean isFilenameValid(String filename){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:17.676 -0500",hash_original_method="742AAF4B41AFCCB3DF4DF84474592F25",hash_generated_method="DB47A975A9AC8C2C01808AEA60F19D71") public static byte[] toUnsignedByteArray(BigInteger bi){  if (bi == null) {    return null;  }  byte[] bb=bi.toByteArray();  if (bb[0] == 0) {    byte[] noZero=new byte[bb.length - 1];    System.arraycopy(bb,1,noZero,0,noZero.length);    return noZero;  } else {    return bb;  }}  }
class C{  public StackMap toStackMap(ConstPool cp){  return new StackMap(cp,output.toByteArray());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void beforeIndexShardClosed(ShardId shardId,@Nullable IndexShard indexShard,Settings indexSettings){  try {    discoveryService.putShardRoutingState(indexShard.shardId().index().name(),ShardRoutingState.UNASSIGNED);    updateRoutingTable("shard [" + indexShard.shardId().getIndex() + "][0] closed",indexShard.shardId().getIndex());  } catch (  IOException e) {    logger.error("Unexpected error",e);  }}  }
class C{  public void processEndElement() throws ParseException {  Cell.this.value=this.value;  if (Cell.this.value != null && Cell.this.value.equals("")) {    Cell.this.value=null;  }}  }
class C{  void startPrediction(){  timeStamp=System.currentTimeMillis();}  }
class C{  public int size(){  return permutation.length;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.607 -0500",hash_original_method="BD80EAD073CED4ACABB1B92EBB481070",hash_generated_method="AD468FA240B2CFDF2CB2457F1BA5A08C") protected SipStackImpl(){  super();  NistSipMessageFactoryImpl msgFactory=new NistSipMessageFactoryImpl(this);  super.setMessageFactory(msgFactory);  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=new LinkedList<SipProviderImpl>();}  }
class C{  public final void lazySet(int newValue){  unsafe.putOrderedInt(this,valueOffset,newValue);}  }
class C{  public static void runTrialNormal(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  algs.model.array.QuickSort<Integer> qs=new algs.model.array.QuickSort<Integer>(ar);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public boolean isSslEnabled(){  return sslEnabled;}  }
class C{  private Value parseValue(Token tt,SimpleCharStream scs,TLAplusParserTokenManager tmgr) throws IOException {  if (tt.kind == TLAplusParserConstants.NUMBER_LITERAL) {    int val=Integer.parseInt(tt.image);    return IntValue.gen(val);  } else   if (tt.kind == TLAplusParserConstants.STRING_LITERAL) {    String tval=tt.image;    return new StringValue(tval.substring(1,tval.length() - 1));  } else   if (tt.image.equals("TRUE")) {    return ValTrue;  } else   if (tt.image.equals("FALSE")) {    return ValFalse;  } else   if (tt.image.equals("{")) {    ValueVec elems=new ValueVec();    tt=getNextToken(tmgr);    if (!tt.image.equals("}")) {      while (true) {        Value elem=this.parseValue(tt,scs,tmgr);        elems.addElement(elem);        tt=getNextToken(tmgr);        if (!tt.image.equals(","))         break;        tt=getNextToken(tmgr);      }    }    if (!tt.image.equals("}")) {      throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"}"});    }    return new SetEnumValue(elems,false);  } else   if (tt.kind != TLAplusParserConstants.EOF) {    return ModelValue.make(tt.image);  }  throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"a value"});}  }
class C{  public boolean isEmpty(){  if (lastBatch != null) {    if (!lastBatch.isEmpty()) {      return false;    }  }  return currentBatch.isEmpty();}  }
class C{  protected static boolean MASK(int value){  if (value < 0) {    value=~value;  }  return POSITIVE_MASK(value);}  }
class C{  @NonNull public static Animator fadeOut(float duration){  return alpha(0,duration);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  protected double[] prepareWeights(ExampleSet exampleSet){  Attribute weightAttr=exampleSet.getAttributes().getWeight();  if (weightAttr == null) {    this.oldWeights=null;    this.performance=exampleSet.size();    return this.createNewWeightAttribute(exampleSet);  } else {    this.oldWeights=new double[exampleSet.size()];    double[] priors=new double[exampleSet.getAttributes().getLabel().getMapping().size()];    double totalWeight=0;    Iterator<Example> reader=exampleSet.iterator();    for (int i=0; (reader.hasNext() && i < oldWeights.length); i++) {      Example example=reader.next();      if (example != null) {        double weight=example.getWeight();        this.oldWeights[i]=weight;        int label=(int)example.getLabel();        if (0 <= label && label < priors.length) {          priors[label]+=weight;          totalWeight+=weight;        } else {          example.setWeight(0);        }      }    }    this.performance=totalWeight;    for (int i=0; i < priors.length; i++) {      priors[i]/=totalWeight;    }    return priors;  }}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (action.has(TARGET)) {    final String whoName=action.get(TARGET);    final StendhalRPRuleProcessor rules=SingletonRepository.getRuleProcessor();    new GameEvent(player.getName(),WHERE,whoName).raise();    final Player who=rules.getPlayer(whoName);    final DomesticAnimal animal=player.searchAnimal(whoName,false);    if (who != null) {      if (who.isGhost() && !who.equals(player)) {        player.sendPrivateText("No player or pet named \"" + whoName + "\" is currently logged in.");      } else {        final StendhalRPZone zone=who.getZone();        if (zone != null) {          if (who.equals(player)) {            player.sendPrivateText("You are in " + zone.getName() + " at ("+ who.getX()+ ","+ who.getY()+ ")");          } else {            player.sendPrivateText(who.getTitle() + " is in " + zone.getName()+ " at ("+ who.getX()+ ","+ who.getY()+ ")");          }        }      }    }    if (animal != null) {      player.sendPrivateText("Your " + ItemTools.itemNameToDisplayName(animal.get("type")) + " is at ("+ animal.getX()+ ","+ animal.getY()+ ")");    }    if ((who == null) && (animal == null)) {      player.sendPrivateText("No player or pet named \"" + whoName + "\" is currently logged in.");    }    player.notifyWorldAboutChanges();  }}  }
class C{  public void testEstimateMinimumDemand(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  s.request=false;  p.subscribe(s);  s.awaitSubscribe();  assertEquals(0,p.estimateMinimumDemand());  s.sn.request(1);  assertEquals(1,p.estimateMinimumDemand());  p.submit(1);  s.awaitNext(1);  assertEquals(0,p.estimateMinimumDemand());}  }
class C{  private void refresh(){  String sql=m_sql;  int pos=m_sql.lastIndexOf(" ORDER BY ");  if (!showAll.isSelected()) {    sql=m_sql.substring(0,pos) + s_sqlWhereSameWarehouse;    if (s_sqlMinLife.length() > 0)     sql+=s_sqlMinLife;    sql+=m_sql.substring(pos);  }  log.finest(sql);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (!showAll.isSelected()) {      pstmt.setInt(2,m_M_Warehouse_ID);    }    rs=pstmt.executeQuery();    m_table.loadTable(rs);  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  enableButtons();}  }
class C{  public static void padFileName(File file){  StringBuilder newName=new StringBuilder(file.getName());  newName.insert(10,'0');  file.renameTo(new File(newName.toString()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void loadQueries() throws Exception {  queries=new ArrayList<>();  if (args.loadTestQueriesFile() != null) {    try (FileReader fr=new FileReader(args.loadTestQueriesFile())){      try (BufferedReader br=new BufferedReader(fr)){        String line;        while ((line=br.readLine()) != null) {          if (line.trim().isEmpty())           continue;          boolean distributedJoins=false;          int commentIdx=line.lastIndexOf('#');          if (commentIdx >= 0) {            if (line.toUpperCase().indexOf("DISTRIBUTEDJOINS",commentIdx) > 0)             distributedJoins=true;            line=line.substring(0,commentIdx);          }          line=line.trim();          TestQuery qry=new TestQuery(line,distributedJoins);          queries.add(qry);          BenchmarkUtils.println("Loaded query: " + qry);        }      }     }   }}  }
class C{  private void logGraphs(String message,List<? extends Graph> graphs){  if (message != null) {    TetradLogger.getInstance().log("graph",message);  }  for (  Graph graph : graphs) {    TetradLogger.getInstance().log("graph",graph.toString());  }}  }
class C{  public Map<String,Long> releaseAllLocks() throws Exception {  return releaseLocks(true);}  }
class C{  public void showIndeterminateProgress(){  if (progressStage == null) {    progressStage=initStage(PROGRESS_LAYOUT,"");    progressStage.initStyle(StageStyle.UNDECORATED);  }  showStage(progressStage);}  }
class C{  public void addEmotionReply(final String playerAction,final String npcAction){  add(ConversationStates.IDLE,Arrays.asList("!me "),new EmoteCondition(playerAction),ConversationStates.IDLE,null,new NPCEmoteAction(npcAction));  add(ConversationStates.ATTENDING,Arrays.asList("!me "),new EmoteCondition(playerAction),ConversationStates.ATTENDING,null,new NPCEmoteAction(npcAction));}  }
class C{  public boolean add(CharSequence input,CharSequence output){  final int length=input.length();  if (ignoreCase) {    charsSpare.grow(length);    final char[] buffer=charsSpare.chars();    for (int i=0; i < length; ) {      i+=Character.toChars(Character.toLowerCase(Character.codePointAt(input,i)),buffer,i);    }    spare.copyChars(buffer,0,length);  } else {    spare.copyChars(input,0,length);  }  if (hash.add(spare.get()) >= 0) {    outputValues.add(output);    return true;  }  return false;}  }
class C{  private static void loadBlocksFromXml(InputStream inStream,String inString,BlockFactory blockFactory,WorkspaceStats stats,List<Block> result) throws BlocklyParserException {  StringReader reader=null;  try {    XmlPullParser parser=mParserFactory.newPullParser();    if (inStream != null) {      parser.setInput(inStream,null);    } else {      reader=new StringReader(inString);      parser.setInput(reader);    }    int eventType=parser.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {switch (eventType) {case XmlPullParser.START_TAG:        if (parser.getName() == null) {          throw new BlocklyParserException("Malformed XML; aborting.");        }      if (parser.getName().equalsIgnoreCase("block")) {        result.add(blockFactory.fromXml(parser));      } else       if (parser.getName().equalsIgnoreCase("shadow")) {        throw new IllegalArgumentException("Shadow blocks may not be top level blocks.");      }    break;default :  break;}eventType=parser.next();}} catch (XmlPullParserException|IOException e) {throw new BlocklyParserException(e);}if (reader != null) {reader.close();}}  }
class C{  public static MinRowExpression min(Expression exprOne,Expression exprTwo,Expression... moreExpressions){  return new MinRowExpression(exprOne,exprTwo,moreExpressions);}  }
class C{  public static void dumpWhenSysErrContains(String trigger){  System.setErr(wrapAndDumpWhenContains(System.err,trigger));}  }
class C{  private void serialize(StringBuffer sb,Node node) throws Exception {switch (node.getNodeType()) {case Node.ELEMENT_NODE:    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("  Processing element node '" + node.getNodeName() + "'");    }  sb.append("<");sb.append(node.getNodeName());NamedNodeMap attrs=node.getAttributes();int n=attrs.getLength();for (int i=0; i < n; i++) {Node attr=attrs.item(i);sb.append(" ");sb.append(attr.getNodeName());sb.append("=\"");sb.append(attr.getNodeValue());sb.append("\"");}NodeList kids=node.getChildNodes();int m=kids.getLength();if (m > 0) {sb.append(">");for (int j=0; j < m; j++) {serialize(sb,kids.item(j));}sb.append("</");sb.append(node.getNodeName());sb.append(">");} else {sb.append(" />");}break;case Node.TEXT_NODE:if (digester.getLogger().isDebugEnabled()) {digester.getLogger().debug("  Processing text node '" + node.getNodeValue() + "'");}sb.append(node.getNodeValue());break;default :throw new IllegalArgumentException("Cannot process node '" + node.getNodeName() + "' of type '"+ node.getNodeType());}}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMPoint: null projection in generate!");    return false;  }  int x1=0;  int x2=0;  int y1=0;  int y2=0;switch (renderType) {case RENDERTYPE_XY:    x1=x - radius;  y1=y - radius;x2=x + radius;y2=y + radius;break;case RENDERTYPE_OFFSET:case RENDERTYPE_LATLON:if (!proj.isPlotable(lat1,lon1)) {setNeedToRegenerate(true);return false;}Point p1=(Point)proj.forward(lat1,lon1,new Point());x1=p1.x + x - radius;y1=p1.y + y - radius;x2=p1.x + x + radius;y2=p1.y + y + radius;break;case RENDERTYPE_UNKNOWN:System.err.println("OMPoint.generate(): invalid RenderType");return false;}if (oval) {setShape(new GeneralPath(new Ellipse2D.Float((float)Math.min(x2,x1),(float)Math.min(y2,y1),(float)Math.abs(x2 - x1),(float)Math.abs(y2 - y1))));} else {setShape(createBoxShape((int)Math.min(x2,x1),(int)Math.min(y2,y1),(int)Math.abs(x2 - x1),(int)Math.abs(y2 - y1)));}initLabelingDuringGenerate();setLabelLocation(new Point(x2,y1),proj);setNeedToRegenerate(false);return true;}  }
class C{  private static Throwable extractException(Exception ex){  if (ex instanceof UnableToTakeScreenshotException) {    return ex.getCause();  }  return ex;}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  super.handleModelChangedEvent(model,object,index);  if (model == tree) {    if (object instanceof TreeModel.TreeChangedEvent) {      TreeModel.TreeChangedEvent tce=(TreeModel.TreeChangedEvent)object;      flagForJulia=true;    } else {      if (object instanceof Parameter) {        flagForJulia=true;      } else {        throw new IllegalArgumentException("Not sure what type of model changed event occurred: " + object.getClass().toString());      }    }  }}  }
class C{  protected Location(){}  }
class C{  public void unwrap(LinearLayout wrappedLayout){  int count=wrappedLayout.getChildCount();  for (int i=0; i < count; i++) {    LinearLayout row=(LinearLayout)wrappedLayout.getChildAt(i);    row.removeAllViews();  }  wrappedLayout.removeAllViews();}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  public static long pop_union(long[] arr1,long[] arr2,int wordOffset,int numWords){  long popCount=0;  for (int i=wordOffset, end=wordOffset + numWords; i < end; ++i) {    popCount+=Long.bitCount(arr1[i] | arr2[i]);  }  return popCount;}  }
class C{  protected void removeUpdate(DefaultDocumentEvent chng){  removed.removeAllElements();  BranchElement map=(BranchElement)getDefaultRootElement();  int offset=chng.getOffset();  int length=chng.getLength();  int line0=map.getElementIndex(offset);  int line1=map.getElementIndex(offset + length);  if (line0 != line1) {    for (int i=line0; i <= line1; i++) {      removed.addElement(map.getElement(i));    }    int p0=map.getElement(line0).getStartOffset();    int p1=map.getElement(line1).getEndOffset();    Element[] aelems=new Element[1];    aelems[0]=createLeafElement(map,null,p0,p1);    Element[] relems=new Element[removed.size()];    removed.copyInto(relems);    ElementEdit ee=new ElementEdit(map,line0,relems,aelems);    chng.addEdit(ee);    map.replace(line0,relems.length,aelems);  } else {    Element line=map.getElement(line0);    if (!line.isLeaf()) {      Element leaf=line.getElement(line.getElementIndex(offset));      if (Utilities.isComposedTextElement(leaf)) {        Element[] aelem=new Element[1];        aelem[0]=createLeafElement(map,null,line.getStartOffset(),line.getEndOffset());        Element[] relem=new Element[1];        relem[0]=line;        ElementEdit ee=new ElementEdit(map,line0,relem,aelem);        chng.addEdit(ee);        map.replace(line0,1,aelem);      }    }  }  super.removeUpdate(chng);}  }
class C{  public static double MAEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  private void defineSplitPanes(UIDefaults d){  d.put("splitPaneDividerBackgroundOuter",new Color(0xd9d9d9));  String p="SplitPane";  d.put(p + ".contentMargins",new InsetsUIResource(1,1,1,1));  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,Vertical");  d.put(p + ".Vertical",new SplitPaneVerticalState());  d.put(p + ".size",new Integer(11));  d.put(p + ".dividerSize",new Integer(11));  d.put(p + ".centerOneTouchButtons",Boolean.TRUE);  d.put(p + ".oneTouchButtonOffset",new Integer(20));  d.put(p + ".oneTouchButtonVOffset",new Integer(3));  d.put(p + ".oneTouchExpandable",Boolean.FALSE);  d.put(p + ".continuousLayout",Boolean.TRUE);  String c=PAINTER_PREFIX + "SplitPaneDividerPainter";  p="SplitPane:SplitPaneDivider";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".States","Enabled,MouseOver,Pressed,Disabled,Focused,Selected,Vertical");  d.put(p + ".Vertical",new SplitPaneDividerVerticalState());  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Focused].foregroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.FOREGROUND_FOCUSED));  d.put(p + "[Enabled+Vertical].foregroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.FOREGROUND_ENABLED_VERTICAL));  d.put(p + "[Focused+Vertical].foregroundPainter",new LazyPainter(c,SplitPaneDividerPainter.Which.FOREGROUND_FOCUSED_VERTICAL));}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FUNCTION_BLOCK_PROPERTY_SOURCE;}  }
class C{  private void updateDownloadedStorages(){  downloadedStorages.clear();  downloadedStorages.addAll(InspectIT.getDefault().getInspectITStorageManager().getDownloadedStorages());}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  private String doTitleSplits(String title,String delimeter){  String largeText="";  int largetTextLen=0;  String[] titlePieces=title.split(delimeter);  for (  String p : titlePieces) {    if (p.length() > largetTextLen) {      largeText=p;      largetTextLen=p.length();    }  }  largeText=largeText.replace("&raquo;"," ");  largeText=largeText.replace("\u00BB"," ");  return largeText.trim();}  }
class C{  private void updateVplexBackendVolumes(UnManagedExportMask mask,List<Initiator> initiators){  StringBuilder nonVplexInitiators=new StringBuilder();  int vplexPortInitiatorCount=0;  for (  Initiator init : initiators) {    if (this._vplexPortInitiators.contains(init.getId())) {      _logger.info("export mask {} contains vplex backend port initiator {}",mask.getMaskName(),init.getInitiatorPort());      vplexPortInitiatorCount++;    } else {      nonVplexInitiators.append(init.getInitiatorPort()).append(" ");    }  }  if (vplexPortInitiatorCount > 0) {    _logger.info("export mask {} contains {} vplex backend port initiators",mask.getMaskName(),vplexPortInitiatorCount);    if (vplexPortInitiatorCount > initiators.size()) {      _logger.warn("   there are some ports in this mask that are not " + "vplex backend port initiators: " + nonVplexInitiators);    }    Set<String> unmanagedVplexBackendMasks=(Set<String>)_keyMap.get(Constants.UNMANAGED_VPLEX_BACKEND_MASKS_SET);    if (unmanagedVplexBackendMasks == null) {      unmanagedVplexBackendMasks=new HashSet<String>();      _keyMap.put(Constants.UNMANAGED_VPLEX_BACKEND_MASKS_SET,unmanagedVplexBackendMasks);    }    _logger.info("adding mask {} to unmanaged vplex backend masks list",mask.getMaskName());    unmanagedVplexBackendMasks.add(mask.getId().toString());  }}  }
class C{  private void scanFrameForObjects(int verbosity){  for (Address refaddr=iterator.getNextReferenceAddress(); !refaddr.isZero(); refaddr=iterator.getNextReferenceAddress()) {    if (VALIDATE_REFS)     checkReference(refaddr,verbosity);    if (verbosity >= 4)     dumpRef(refaddr,verbosity);    reportDelayedRootEdge(trace,refaddr);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public void deleteCinderEndpoints(String managerDN,StringSet serverUrls,String managerPassword){  KeystoneApiClient keystoneApi=getKeystoneApi(managerDN,serverUrls,managerPassword);  String serviceIdV2=findServiceId(keystoneApi,KeystoneUtils.OPENSTACK_CINDER_V2_NAME);  String serviceIdV1=findServiceId(keystoneApi,KeystoneUtils.OPENSTACK_CINDER_V1_NAME);  if (serviceIdV2 != null) {    deleteKeystoneEndpoint(keystoneApi,serviceIdV2);  }  if (serviceIdV1 != null) {    deleteKeystoneEndpoint(keystoneApi,serviceIdV1);  }}  }
class C{  public Item pop(){  return isEmpty() ? null : stack.remove(stack.size() - 1);}  }
class C{  private void tokenizeChinese(JCas jcas){  try {    Process proc=ttprops.getChineseTokenizationProcess();    Logger.printDetail(component,"Chinese tokenization: " + ttprops.chineseTokenizerPath);    BufferedReader in=new BufferedReader(new InputStreamReader(proc.getInputStream(),"UTF-8"));    BufferedWriter out=new BufferedWriter(new OutputStreamWriter(proc.getOutputStream(),"UTF-8"));    Integer tokenOffset=0;    String[] inSplits=jcas.getDocumentText().split("[\\r\\n]+");    for (    String inSplit : inSplits) {      out.write(inSplit);      out.newLine();      out.flush();      String s=in.readLine();      do {        if (s == null)         break;        String[] outSplits=s.split("\\s+");        for (        String tok : outSplits) {          if (jcas.getDocumentText().indexOf(tok,tokenOffset) < 0)           throw new RuntimeException("Could not find token " + tok + " in JCas after tokenizing with Chinese tokenization script.");          Token newToken=new Token(jcas);          newToken.setBegin(jcas.getDocumentText().indexOf(tok,tokenOffset));          newToken.setEnd(newToken.getBegin() + tok.length());          newToken.addToIndexes();          tokenOffset=newToken.getEnd();        }        if (!in.ready())         break;        s=in.readLine();      } while (true);    }    in.close();    proc.destroy();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? new Long(0) : new Long(s.getOriginalAirDate());}  }
class C{  public synchronized long lengthAdd(final byte[] key) throws IOException {  long l=0;  for (  final blobItem bi : this.blobs) {    l+=bi.blob.length(key);  }  return l;}  }
class C{  private int decodeTns(TemporalNoiseShaping tns,IndividualChannelStream ics){  final int is8=ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE ? 1 : 0;  final int tnsMaxOrder=is8 != 0 ? 7 : ac.oc[1].m4ac.objectType == AOT_AAC_MAIN ? 20 : 12;  for (int w=0; w < ics.numWindows; w++) {    tns.nFilt[w]=br.read(2 - is8);    if (tns.nFilt[w] != 0) {      int coefRes=br.read1();      for (int filt=0; filt < tns.nFilt[w]; filt++) {        tns.length[w][filt]=br.read(6 - 2 * is8);        tns.order[w][filt]=br.read(5 - 2 * is8);        if (tns.order[w][filt] > tnsMaxOrder) {          log.error(String.format("TNS filter order %d is greater than maximum %d",tns.order[w][filt],tnsMaxOrder));          tns.order[w][filt]=0;          return AAC_ERROR;        }        if (tns.order[w][filt] > 0) {          tns.direction[w][filt]=br.readBool();          int coefCompress=br.read1();          int coefLen=coefRes + 3 - coefCompress;          int tmp2Idx=2 * coefCompress + coefRes;          for (int i=0; i < tns.order[w][filt]; i++) {            tns.coef[w][filt][i]=tns_tmp2_map[tmp2Idx][br.read(coefLen)];          }        }      }    }  }  return 0;}  }
class C{  public final void invalidateProposalProbability(){  treeColouring=new DefaultTreeColouring(treeColouring);}  }
class C{  public UF1(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  private StringBuffer prepareOptimizedDeleteStatement(OneRowChange oneRowChange,String keyName){  StringBuffer stmt=new StringBuffer();  stmt.append("DELETE FROM ");  stmt.append(conn.getDatabaseObjectName(oneRowChange.getSchemaName()) + "." + conn.getDatabaseObjectName(oneRowChange.getTableName()));  stmt.append(" WHERE ");  stmt.append(conn.getDatabaseObjectName(keyName));  stmt.append(" IN (");  ArrayList<ArrayList<ColumnVal>> values=oneRowChange.getKeyValues();  ArrayList<ColumnSpec> keySpec=oneRowChange.getKeySpec();  boolean firstRow=true;  for (  ArrayList<ColumnVal> oneKeyValues : values) {    if (firstRow)     firstRow=false; else     stmt.append(", ");    printColumnSpec(stmt,keySpec,null,oneKeyValues,PrintMode.PLACE_HOLDER," , ");  }  stmt.append(")");  return stmt;}  }
class C{  private void update(Tuple input){  JSONObject message=(JSONObject)input.getValueByField("message");  try {    Map<String,String> expressions=profileConfig.getUpdate();    expressions.forEach(null);  } catch (  ParseException e) {    String msg=format("Bad 'update' expression: %s, profile=%s, entity=%s",e.getMessage(),measurement.getProfileName(),measurement.getEntity());    throw new ParseException(msg,e);  }}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new LoadFromFileGenerator(args[0]);}  }
class C{  public T peek(){  if (depth() == 0) {    return null;  }  return circularArray[getIndex(getCurrentIndex())].get();}  }
class C{  public void testReadWriteBasic() throws Exception {  File logDir=prepareLogDir("testReadWriteBasic");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  for (int i=0; i < 3; i++) {    THLEvent e=this.createTHLEvent(i);    conn.store(e,false);  }  conn.commit();  assertEquals("Should have seqnos 0-2",0,log.getMinSeqno());  assertEquals("Should have seqnos 0-2",2,log.getMaxSeqno());  assertTrue("Find first record",conn.seek(0));  for (int i=0; i < 3; i++) {    THLEvent e=conn.next();    assertNotNull("Should find an event",e);    assertEquals("Expect seqno: " + i,i,e.getSeqno());  }  conn.release();  log.release();}  }
class C{  private static void reply_Login2_Role(body body,MobileSessionCtx wsc,String formName,String fieldValue,String locationValue){  String form=null;  log.info("Location-Role: " + locationValue);  form=locationValue + MobileEnv.TARGET_WINDOW + ".document.forms."+ formName+ ".";  Login login=new Login(wsc.ctx);  KeyNamePair[] clients=login.getClients(new KeyNamePair(Integer.parseInt(fieldValue),fieldValue));  StringBuffer script=new StringBuffer();  script.append("var A=").append(form).append(WLogin.P_CLIENT).append(".options; ");  script.append("A.length=0; ");  for (int i=0; i < clients.length; i++) {    KeyNamePair p=clients[i];    script.append("A[").append(i).append("]=new Option('");    script.append(p.getName());    script.append("','");    script.append(p.getKey());    script.append("'); ");  }  script.append("\n");  if (clients.length > 0) {    script.append("var B=").append(form).append(WLogin.P_ORG).append(".options; ");    script.append("B.length=0; ");    KeyNamePair[] orgs=login.getOrgs(clients[0]);    for (int i=0; i < orgs.length; i++) {      KeyNamePair p=orgs[i];      script.append("B[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }    script.append("\n");    if (orgs.length > 0) {      script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");      script.append("C.length=0; ");      KeyNamePair[] whs=login.getWarehouses(orgs[0]);      if (whs != null) {        for (int i=0; i < whs.length; i++) {          KeyNamePair p=whs[i];          script.append("C[").append(i).append("]=new Option('");          script.append(p.getName());          script.append("','");          script.append(p.getKey());          script.append("'); ");        }      }    }  }  body.addElement(new p().addElement(WLogin.P_CLIENT + "="));  body.addElement(new script(script.toString()));}  }
class C{  public IgniteInternalFuture<?> flush(HadoopJobId jobId){  HadoopShuffleJob job=jobs.get(jobId);  if (job == null)   return new GridFinishedFuture<>();  try {    return job.flush();  } catch (  IgniteCheckedException e) {    return new GridFinishedFuture<>(e);  }}  }
class C{  private void reloadModelWithNewValue(final Long newValue){  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {    final PropertyChangeEvent event=new PropertyChangeEvent(this,"model",getModelUpdatePeriod(),newValueAsPrimitive);    listener.propertyChange(event);  }}  }
class C{  public static String stripLines(final String text,final String prefix,final String outLs) throws IOException {  final StringBuilder sb=new StringBuilder();  final BufferedReader sr=new BufferedReader(new StringReader(text));  String line;  while ((line=sr.readLine()) != null) {    if (!line.startsWith(prefix)) {      sb.append(line).append(outLs);    }  }  return sb.toString();}  }
class C{  public boolean hasSpecialized(){  return super.hasAttribute(SPECIALIZED);}  }
class C{  public URI toURILenient() throws URISyntaxException {  if (streamHandler == null) {    throw new IllegalStateException(protocol);  }  return new URI(streamHandler.toExternalForm(this,true));}  }
class C{  public void paintTableBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static BaggageImpl deserialize(byte[] byteRepr){  return create(ProtobufUtils.parse(byteRepr));}  }
class C{  protected static void writeTableDefinition(TableCreator creator) throws IOException {  createUsageMapDefinitionBuffer(creator);  JetFormat format=creator.getFormat();  int idxDataLen=(creator.getIndexCount() * (format.SIZE_INDEX_DEFINITION + format.SIZE_INDEX_COLUMN_BLOCK)) + (creator.getLogicalIndexCount() * format.SIZE_INDEX_INFO_BLOCK);  int colUmapLen=creator.getLongValueColumns().size() * 10;  int totalTableDefSize=format.SIZE_TDEF_HEADER + (format.SIZE_COLUMN_DEF_BLOCK * creator.getColumns().size()) + idxDataLen+ colUmapLen+ format.SIZE_TDEF_TRAILER;  for (  ColumnBuilder col : creator.getColumns()) {    totalTableDefSize+=DBMutator.calculateNameLength(col.getName());  }  for (  IndexBuilder idx : creator.getIndexes()) {    totalTableDefSize+=DBMutator.calculateNameLength(idx.getName());  }  ByteBuffer buffer=PageChannel.createBuffer(Math.max(totalTableDefSize,format.PAGE_SIZE));  writeTableDefinitionHeader(creator,buffer,totalTableDefSize);  if (creator.hasIndexes()) {    IndexData.writeRowCountDefinitions(creator,buffer);  }  ColumnImpl.writeDefinitions(creator,buffer);  if (creator.hasIndexes()) {    IndexData.writeDefinitions(creator,buffer);    IndexImpl.writeDefinitions(creator,buffer);  }  ColumnImpl.writeColUsageMapDefinitions(creator,buffer);  buffer.put((byte)0xff);  buffer.put((byte)0xff);  buffer.flip();  writeTableDefinitionBuffer(buffer,creator.getTdefPageNumber(),creator,Collections.<Integer>emptyList());}  }
class C{  @Override Object invokeMore(Object proxy,Method method,Object[] args) throws Throwable {  checkConnectionCapabilityForMethod(method);  boolean invokeAgain=false;  while (true) {    try {      Object result=method.invoke(this.thisAsConnection,args);      if (result != null && result instanceof Statement) {        ((Statement)result).setPingTarget(this);      }      return result;    } catch (    InvocationTargetException e) {      if (invokeAgain) {        invokeAgain=false;      } else       if (e.getCause() != null && e.getCause() instanceof SQLException && ((SQLException)e.getCause()).getSQLState() == SQLError.SQL_STATE_INVALID_TRANSACTION_STATE && ((SQLException)e.getCause()).getErrorCode() == MysqlErrorNumbers.ERROR_CODE_NULL_LOAD_BALANCED_CONNECTION) {        try {          setReadOnly(this.readOnly);          invokeAgain=true;        } catch (        SQLException sqlEx) {        }      }      if (!invokeAgain) {        throw e;      }    }  }}  }
class C{  public boolean isDrawCirclesEnabled(){  return mDrawCircles;}  }
class C{  public ScreenQuad(boolean createVBOs){  super();  init(createVBOs);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double gridRes;  double flowDir=0;  double efficiencyMultiplier=1d;  double eff, absorp;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    WhiteboxRaster efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    WhiteboxRaster absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i] && loading.getValue(row + dY[i],col + dX[i]) != noDataLoading && efficiency.getValue(row + dY[i],col + dX[i]) != noDataEfficiency && absorption.getValue(row + dY[i],col + dX[i]) != noDataAbsorption) {              z++;            }          }          tmpGrid.setValue(row,col,z);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          x=col;          y=row;          do {            z=output.getValue(y,x);            eff=efficiency.getValue(y,x) * efficiencyMultiplier;            absorp=absorption.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              z=((z - absorp) * eff);              if (z < 0) {                z=0;              }              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Function<JsonObject,byte[]> asBytes(){  return null;}  }
class C{  final public MutableString trim(){  final int length=length();  final char[] a=array;  int i=0;  if (length == 0)   return this;  while (i < length && a[i] <= ' ')   i++;  if (i == length) {    if (hashLength < 0) {      hashLength=-1;      array=CharArrays.EMPTY_ARRAY;      return this;    }    hashLength=0;    return this;  }  int j=length;  while (a[--j] <= ' ')   ;  final int newLength=j - i + 1;  if (length == newLength)   return this;  System.arraycopy(array,i,array,0,newLength);  if (hashLength < 0) {    setCapacity(newLength);    hashLength=-1;  } else   hashLength=newLength;  return this;}  }
class C{  public void tank(double leftSpeed,double rightSpeed,boolean squaredInputs){  leftSpeed=speedLimiter.applyAsDouble(leftSpeed);  rightSpeed=speedLimiter.applyAsDouble(rightSpeed);  if (squaredInputs) {    if (leftSpeed >= 0.0) {      leftSpeed=(leftSpeed * leftSpeed);    } else {      leftSpeed=-(leftSpeed * leftSpeed);    }    if (rightSpeed >= 0.0) {      rightSpeed=(rightSpeed * rightSpeed);    } else {      rightSpeed=-(rightSpeed * rightSpeed);    }  }  left.setSpeed(leftSpeed);  right.setSpeed(rightSpeed);}  }
class C{  public SnapshotException(String message){  super(message);}  }
class C{  boolean isActive(){  return false;}  }
class C{  public static Iterator<GetQueryResultsResponse> run(final String projectId,final String queryString,final boolean useBatchMode,final long waitTime,final boolean useLegacySql) throws IOException, InterruptedException {  Bigquery bigquery=BigQueryServiceFactory.getService();  Job query=asyncQuery(bigquery,projectId,queryString,useBatchMode,useLegacySql);  Bigquery.Jobs.Get getRequest=bigquery.jobs().get(projectId,query.getJobReference().getJobId());  BigQueryUtils.pollJob(getRequest,waitTime);  GetQueryResults resultsRequest=bigquery.jobs().getQueryResults(projectId,query.getJobReference().getJobId());  return BigQueryUtils.getPages(resultsRequest);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Serializable>T read(File file) throws ClassNotFoundException, IOException {  try (ObjectInputStream input=new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)))){    return (T)input.readObject();  } }  }
class C{  private boolean isNewClustering(List clusterings,List newClustering){  nextClustering:   for (Iterator it=clusterings.iterator(); it.hasNext(); ) {    List nextClustering=(List)it.next();    nextOldCluster:     for (Iterator it2=nextClustering.iterator(); it2.hasNext(); ) {      int cluster[]=(int[])it2.next();      nextNewCluster:       for (Iterator it3=newClustering.iterator(); it3.hasNext(); ) {        int newCluster[]=(int[])it3.next();        if (cluster.length == newCluster.length) {          nextElement:           for (int i=0; i < cluster.length; i++) {            for (int j=0; j < newCluster.length; j++) {              if (cluster[i] == newCluster[j]) {                continue nextElement;              }            }            continue nextNewCluster;          }          continue nextOldCluster;        }      }      continue nextClustering;    }    return false;  }  return true;}  }
class C{  @RequestMapping(value="/namespaces",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_NAMESPACES_POST) public Namespace createNamespace(@RequestBody NamespaceCreateRequest request){  return namespaceService.createNamespace(request);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  protected void process(List<String> messages){  setStatusBarMessage(messages.get(messages.size() - 1),BasePanel.INFORMATION);}  }
class C{  public void eliminarDetallesExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DetalleConsultaForm frm=(DetalleConsultaForm)form;  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_CONSULTAS_ELIMINARDETALLES,request);  eliminarDetallesCodeLogic(frm.getDetallesseleccionados(),frm.getIdsolicitud(),mapping,form,request,response);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[0];  for (int i=1; i < ROUNDS; i+=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i + 1];  }  xr^=P[ROUNDS + 1];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  public byte[] GETbytes(final MultiProtocolURL url,final String username,final String pass,final boolean concurrent) throws IOException {  return GETbytes(url,username,pass,Integer.MAX_VALUE,concurrent);}  }
class C{  public String openExternal(String url){  try {    Intent intent=null;    intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,webView.getResourceApi().getMimeType(uri));    } else {      intent.setData(uri);    }    this.cordova.getActivity().startActivity(intent);    return "";  } catch (  android.content.ActivityNotFoundException e) {    Log.d(LOG_TAG,"InAppBrowser: Error loading url " + url + ":"+ e.toString());    return e.toString();  }}  }
class C{  private Builder(){  super(com.linkedin.camus.example.records.DummyLog.SCHEMA$);}  }
class C{  public boolean isOnWednesday(){  Object oo=get_Value(COLUMNNAME_OnWednesday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void appendOp(int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  m_ops.setOp(totalLen,op);  m_ops.setOp(totalLen + OpMap.MAPINDEX_LENGTH,length);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  public Event addDetails(final Map<String,Object> details){  if (details == null)   throw new IllegalArgumentException();synchronized (this) {    if (this.details == null) {      this.details=newDetails();    }    this.details.putAll(details);  }  return this;}  }
class C{  public BoundedObject queryOne(BoundingBox box){  return queryOne(box,root);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public TransactionRollbackException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  protected void skipPad() throws IOException {  if (bytesRead > 0) {    int extra=(int)(bytesRead % TarConstants.DATA_BLOCK);    if (extra > 0) {      long bs=0;      while (bs < TarConstants.DATA_BLOCK - extra) {        long res=skip(TarConstants.DATA_BLOCK - extra - bs);        bs+=res;      }    }  }}  }
class C{  public synchronized void invalidateLayout(Container target){  checkContainer(target);  xChildren=null;  yChildren=null;  xTotal=null;  yTotal=null;}  }
class C{  public static Filter newInstance(String name,Map<String,String> properties,InputStream stream){  if (name == null) {    throw new IllegalArgumentException("Name of a filter can not be null");  }  if (properties == null) {    throw new IllegalArgumentException("Properties can not be null");  }  return new Filter(name,properties,stream);}  }
class C{  BlockingIOPbrpcClient(PbrpcClientConfiguration pbrpcClientConfiguration,boolean isShortAliveConnection,String ip,int port,int connTimeout,int readTimeout){  if (pbrpcClientConfiguration != null) {    this.pbrpcClientConfiguration=pbrpcClientConfiguration;  }  this.isShortAliveConn=isShortAliveConnection;  this.ip=ip;  this.port=port;  this.connTimeout=connTimeout;  this.readTimeout=readTimeout;}  }
class C{  private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){  if (epsilon <= 0 || entries.size() < 3) {    return entries;  }  keep[0]=true;  keep[entries.size() - 1]=true;  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);  List<Entry> reducedEntries=new ArrayList<Entry>();  for (int i=0; i < entries.size(); i++) {    if (keep[i]) {      Entry curEntry=entries.get(i);      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));    }  }  return reducedEntries;}  }
class C{  protected ObjectMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseObjectMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,0);}  }
class C{  public Polygon(PolygonPoint[] points){  this(Arrays.asList(points));}  }
class C{  private boolean translate(float tx,float ty){  mTranslateRect.set(mTempSrc);  mMatrix.mapRect(mTranslateRect);  final float maxLeft=mAllowCrop ? mCropRect.left : 0.0f;  final float maxRight=mAllowCrop ? mCropRect.right : getWidth();  float l=mTranslateRect.left;  float r=mTranslateRect.right;  final float translateX;  if (mAllowCrop) {    translateX=Math.max(maxLeft - mTranslateRect.right,Math.min(maxRight - mTranslateRect.left,tx));  } else {    if (r - l < maxRight - maxLeft) {      translateX=maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;    } else {      translateX=Math.max(maxRight - r,Math.min(maxLeft - l,tx));    }  }  float maxTop=mAllowCrop ? mCropRect.top : 0.0f;  float maxBottom=mAllowCrop ? mCropRect.bottom : getHeight();  float t=mTranslateRect.top;  float b=mTranslateRect.bottom;  final float translateY;  if (mAllowCrop) {    translateY=Math.max(maxTop - mTranslateRect.bottom,Math.min(maxBottom - mTranslateRect.top,ty));  } else {    if (b - t < maxBottom - maxTop) {      translateY=maxTop + ((maxBottom - maxTop) - (b + t)) / 2;    } else {      translateY=Math.max(maxBottom - b,Math.min(maxTop - t,ty));    }  }  mMatrix.postTranslate(translateX,translateY);  invalidate();  return (translateX == tx) && (translateY == ty);}  }
class C{  public final ISchedulingRule markerRule(IResource resource){  return null;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/protection/addJournalCapacity") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList addJournalCapacity(VolumeCreate param) throws InternalException {  ArgValidator.checkFieldNotNull(param,"volume_create");  ArgValidator.checkFieldNotNull(param.getName(),"name");  ArgValidator.checkFieldNotNull(param.getSize(),"size");  ArgValidator.checkFieldNotNull(param.getCount(),"count");  ArgValidator.checkFieldUriType(param.getProject(),Project.class,"project");  Project project=_permissionsHelper.getObjectById(param.getProject(),Project.class);  ArgValidator.checkEntity(project,param.getProject(),isIdEmbeddedInURL(param.getProject()));  final URI actualId=project.getId();  BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);  ArgValidator.checkFieldUriType(param.getVarray(),VirtualArray.class,"varray");  VirtualArray varray=BlockServiceUtils.verifyVirtualArrayForRequest(project,param.getVarray(),uriInfo,_permissionsHelper,_dbClient);  ArgValidator.checkEntity(varray,param.getVarray(),isIdEmbeddedInURL(param.getVarray()));  VirtualPool vpool=getVirtualPoolForVolumeCreateRequest(project,param);  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.ADD_JOURNAL_CAPACITY,Boolean.TRUE);  Integer volumeCount=1;  Long volumeSize=0L;  if (param.getCount() <= 0) {    throw APIException.badRequests.parameterMustBeGreaterThan("count",0);  }  if (param.getCount() > MAX_VOLUME_COUNT) {    throw APIException.badRequests.exceedingLimit("count",MAX_VOLUME_COUNT);  }  volumeCount=param.getCount();  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,volumeCount);  volumeSize=SizeUtil.translateSize(param.getSize());  if (volumeSize < GB) {    throw APIException.badRequests.leastVolumeSize("1");  }  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,volumeSize);  long size=volumeCount * SizeUtil.translateSize(param.getSize());  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());  ArgValidator.checkEntity(tenant,project.getTenantOrg().getURI(),false);  CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,project,tenant,size,"volume");  if (null != vpool.getThinVolumePreAllocationPercentage() && 0 < vpool.getThinVolumePreAllocationPercentage()) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_VOLUME_PRE_ALLOCATE_SIZE,VirtualPoolUtil.getThinVolumePreAllocationSize(vpool.getThinVolumePreAllocationPercentage(),volumeSize));  }  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,Boolean.TRUE);  }  BlockConsistencyGroup consistencyGroup=queryConsistencyGroup(param.getConsistencyGroup());  final URI expectedId=consistencyGroup.getProject().getURI();  checkProjectsMatch(expectedId,project.getId());  if (!consistencyGroup.getRequestedTypes().contains(BlockConsistencyGroup.Types.RP.toString())) {    throw APIException.badRequests.consistencyGroupIsNotCompatibleWithRequest(consistencyGroup.getId(),consistencyGroup.getTypes().toString(),BlockConsistencyGroup.Types.RP.toString());  }  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,consistencyGroup.getId());  String task=UUID.randomUUID().toString();  auditOp(OperationTypeEnum.ADD_JOURNAL_VOLUME,true,AuditLogManager.AUDITOP_BEGIN,param.getName(),volumeCount,varray.getId().toString(),actualId.toString());  RPBlockServiceApiImpl blockServiceImpl=(RPBlockServiceApiImpl)getBlockServiceImpl(DiscoveredDataObject.Type.rp.name());  return blockServiceImpl.addJournalCapacity(param,project,varray,vpool,consistencyGroup,capabilities,task);}  }
class C{  public CipherInputStream(InputStream is,BufferedBlockCipher cipher){  this(is,cipher,INPUT_BUF_SIZE);}  }
class C{  public boolean isWellFormed(){  return isToolWellFormed(tool) && isArtifactTypeWellFormed(artifactType) && isToolSpecificIDWellFormed(toolSpecificId);}  }
class C{  @Bean public Controller vaadinUiForwardingController(){  VaadinServlet servlet=vaadinServlet();  getLogger().info("Registering Vaadin servlet of type [{}]",servlet.getClass().getCanonicalName());  ServletForwardingController controller=new ServletForwardingController();  controller.setServletName(vaadinServletRegistration().getServletName());  return controller;}  }
class C{  public void transform(AffineTransform Tx){  transform.concatenate(Tx);  transformStack.add(TransformStackElement.createGeneralTransformElement(Tx));}  }
class C{  @Inline @Override public final boolean booleanRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset()) == 0;}  }
class C{  public EnumRowStatus(Enumerated valueIndex) throws IllegalArgumentException {  this(valueIndex.intValue());}  }
class C{  public boolean isTimed(){  return this.timed;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator keys=jo.keys();  String string;  StringBuffer sb=new StringBuffer();  while (keys.hasNext()) {    string=keys.next().toString();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  public VasaAssociationObject[] queryAssociatedProcessorsForArray(String[] arrayId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedProcessorsForArray(): ";  log.info(methodName + "Entry");  if (arrayId != null) {    log.info(methodName + "input array Ids: " + Arrays.asList(arrayId));  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  VasaAssociationObject[] vasaAsssociationObjs=sosManager.queryAssociatedProcessorsForArray(arrayId);  log.info(methodName + "Exit returning vasaAssociationObjs of size[" + vasaAsssociationObjs.length+ "]");  return vasaAsssociationObjs;}  }
class C{  @Override public BinaryObjectBuilderImpl removeField(String name){  if (assignedVals == null)   assignedVals=new LinkedHashMap<>();  assignedVals.put(name,REMOVED_FIELD_MARKER);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.607 -0500",hash_original_method="B1A721EFB2ABF6430D11EDB26008EF34",hash_generated_method="0F512FAE81769FBE457784B1828B9765") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onCallStateChanged(int state,String incomingNumber){}  }
class C{  public void addField(int tag,int type,int count,Object obj){  addField(factory.createField(tag,type,count,obj));}  }
class C{  ErrorElement(ErrorContent source){  this.errorDomainName=source.getDomainName();  this.errorCodeName=source.getCodeName();  this.errorLocation=source.getLocation();  this.errorLocationType=source.getLocationType();  this.errorInternalReason=source.getInternalReason();  this.errorExtendedHelp=source.getExtendedHelp();  this.errorSendReport=source.getSendReport();  this.errorDebugInfo=source.getDebugInfo();}  }
class C{  private void redrawComposite(){  for (  final Control c : this.getChildren()) {    c.dispose();  }  int numberOfColumns=1;  if (this.text != null) {    numberOfColumns++;  }  if (this.image != null) {    numberOfColumns++;  }  if (this.alignment == SWT.CENTER) {    numberOfColumns++;  }  super.setLayout(new GridLayout(numberOfColumns,false));  createContent();}  }
class C{  public int executeUpdate() throws SQLException {  procedureCall.checkParameters();synchronized (getSynchronizationObject()) {    try {      notifyStatementStarted();      prepareFixedStatement(procedureCall.getSQL(isSelectableProcedure()));      boolean hasResults=internalExecute(!isSelectableProcedure());      if (hasResults) {        setRequiredTypes();      }      return getUpdateCount();    }  finally {      notifyStatementCompleted();    }  }}  }
class C{  public void testLatitudeQuantization() throws Exception {  final double LATITUDE_DECODE=180.0D / (0x1L << 32);  Random random=random();  for (int i=0; i < 10000; i++) {    int encoded=random.nextInt();    double min=MIN_LAT_INCL + (encoded - (long)Integer.MIN_VALUE) * LATITUDE_DECODE;    double decoded=decodeLatitude(encoded);    assertEquals(min,decoded,0.0D);    assertEquals(encoded,encodeLatitude(decoded));    assertEquals(encoded,encodeLatitudeCeil(decoded));    if (encoded != Integer.MAX_VALUE) {      double max=min + LATITUDE_DECODE;      assertEquals(max,decodeLatitude(encoded + 1),0.0D);      assertEquals(encoded + 1,encodeLatitude(max));      assertEquals(encoded + 1,encodeLatitudeCeil(max));      double minEdge=Math.nextUp(min);      double maxEdge=Math.nextDown(max);      assertEquals(encoded,encodeLatitude(minEdge));      assertEquals(encoded + 1,encodeLatitudeCeil(minEdge));      assertEquals(encoded,encodeLatitude(maxEdge));      assertEquals(encoded + 1,encodeLatitudeCeil(maxEdge));      long minBits=NumericUtils.doubleToSortableLong(minEdge);      long maxBits=NumericUtils.doubleToSortableLong(maxEdge);      for (int j=0; j < 100; j++) {        double value=NumericUtils.sortableLongToDouble(TestUtil.nextLong(random,minBits,maxBits));        assertEquals(encoded,encodeLatitude(value));        assertEquals(encoded + 1,encodeLatitudeCeil(value));      }    }  }}  }
class C{  private Optional<List<Id>> generateIdsUsingRedis(final Redis redis,final long batchSize){  Optional<IcicleRedisResponse> optionalIcicleRedisResponse=executeOrLoadLuaScript(redis,batchSize);  if (!optionalIcicleRedisResponse.isPresent()) {    return Optional.absent();  }  IcicleRedisResponse icicleRedisResponse=optionalIcicleRedisResponse.get();  long timestamp=(icicleRedisResponse.getTimeSeconds() * ONE_MILLI_IN_MICRO_SECS) + (icicleRedisResponse.getTimeMicroseconds() / ONE_MILLI_IN_MICRO_SECS);  long logicalShardId=icicleRedisResponse.getLogicalShardId();  validateLogicalShardId(logicalShardId);  List<Id> ids=new ArrayList<>();  for (long i=icicleRedisResponse.getStartSequence(); i <= icicleRedisResponse.getEndSequence(); i++) {    long id=((timestamp - CUSTOM_EPOCH) << TIMESTAMP_SHIFT) | (logicalShardId << LOGICAL_SHARD_ID_SHIFT) | i;    ids.add(new Id(id,timestamp));  }  return Optional.of(ids);}  }
class C{  public boolean savedPatternExists(){  return sHaveNonZeroPatternFile.get();}  }
class C{  private static void fixInnerNetherOrEndRegionData(Path oldWorldPath){  try {    com.google.common.io.Files.move(oldWorldPath.resolve("DIM-1").resolve("region").toFile(),oldWorldPath.resolve("region").toFile());  } catch (  IOException ignore) {  }  try {    com.google.common.io.Files.move(oldWorldPath.resolve("DIM1").resolve("region").toFile(),oldWorldPath.resolve("region").toFile());  } catch (  IOException ignore) {  }}  }
class C{  public static boolean looksLikeABGPosition(String val){  return BACKGROUND_POSITIONS_IDENTS.contains(val) || looksLikeALength(val);}  }
class C{  public Parameter(String s,String[] s2){  if (s == null)   throw new BadParameterException("Parameter created with null string");  param=s;  for (int x=0; x < s2.length; x++) {    if (s2[x] == null)     throw new BadParameterException("Parameter created with null string"); else     param+=(delimiter + s2[x]);  }}  }
class C{  private String makeEscaped(String name){  int length=name.length();  if (length == 0) {    return name;  }  StringBuilder buf=new StringBuilder(length * 2);  for (int index=0; index < length; index++) {    char ch=name.charAt(index);switch (ch) {case ' ':      if (index == 0 || index == (length - 1)) {        buf.append('\\');      }    buf.append(' ');  break;case '"':case '\\':hasQE=true;buf.append('\\');buf.append(ch);break;case ',':case '+':case '<':case '>':case ';':case '#':case '=':buf.append('\\');buf.append(ch);break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  public final boolean readPGN(String pgn,PGNOptions options) throws ChessParseError {  PgnScanner scanner=new PgnScanner(pgn);  PgnToken tok=scanner.nextToken();  List<TagPair> tagPairs=new ArrayList<TagPair>();  while (tok.type == PgnToken.LEFT_BRACKET) {    TagPair tp=new TagPair();    tok=scanner.nextTokenDropComments();    if (tok.type != PgnToken.SYMBOL)     break;    tp.tagName=tok.token;    tok=scanner.nextTokenDropComments();    if (tok.type != PgnToken.STRING)     break;    tp.tagValue=tok.token;    tok=scanner.nextTokenDropComments();    if (tok.type != PgnToken.RIGHT_BRACKET) {      PgnToken prevTok=new PgnToken(PgnToken.STRING,"");      while ((tok.type == PgnToken.STRING) || (tok.type == PgnToken.SYMBOL)) {        if (tok.type != prevTok.type)         tp.tagValue+='"';        if ((tok.type == PgnToken.SYMBOL) && (prevTok.type == PgnToken.SYMBOL))         tp.tagValue+=' ';        tp.tagValue+=tok.token;        prevTok=tok;        tok=scanner.nextTokenDropComments();      }    }    tagPairs.add(tp);    tok=scanner.nextToken();  }  scanner.putBack(tok);  Node gameRoot=new Node();  Node.parsePgn(scanner,gameRoot,options);  if (tagPairs.size() == 0) {    gameRoot.verifyChildren(TextIO.readFEN(TextIO.startPosFEN));    if (gameRoot.children.size() == 0)     return false;  }  String fen=TextIO.startPosFEN;  int nTags=tagPairs.size();  for (int i=0; i < nTags; i++) {    if (tagPairs.get(i).tagName.equals("FEN")) {      fen=tagPairs.get(i).tagValue;    }  }  setStartPos(TextIO.readFEN(fen));  String result="";  for (int i=0; i < nTags; i++) {    String name=tagPairs.get(i).tagName;    String val=tagPairs.get(i).tagValue;    if (name.equals("FEN") || name.equals("SetUp")) {    } else     if (name.equals("Event")) {      event=val;    } else     if (name.equals("Site")) {      site=val;    } else     if (name.equals("Date")) {      date=val;    } else     if (name.equals("Round")) {      round=val;    } else     if (name.equals("White")) {      white=val;    } else     if (name.equals("Black")) {      black=val;    } else     if (name.equals("Result")) {      result=val;    } else     if (name.equals("TimeControl")) {      timeControl=val;    } else     if (name.equals("WhiteTimeControl")) {      whiteTimeControl=val;    } else     if (name.equals("BlackTimeControl")) {      blackTimeControl=val;    } else {      this.tagPairs.add(tagPairs.get(i));    }  }  rootNode=gameRoot;  currentNode=rootNode;{    while (variations().size() > 0)     goForward(0);    GameState state=getGameState();    if (state == GameState.ALIVE) {      if (result.equals("1-0")) {        if (currentPos.whiteMove) {          currentNode.playerAction="resign";        } else {          addMove("--","resign",0,"","");        }      } else       if (result.equals("0-1")) {        if (!currentPos.whiteMove) {          currentNode.playerAction="resign";        } else {          addMove("--","resign",0,"","");        }      } else       if (result.equals("1/2-1/2") || result.equals("1/2")) {        currentNode.playerAction="draw offer";        addMove("--","draw accept",0,"","");      }    }    while (currentNode != rootNode)     goBack();  }  updateListener();  return true;}  }
class C{  public void transformValues(TIntFunction function){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static int max(int a,int b,int c){  return a >= b ? (a >= c ? a : c) : (b >= c ? b : c);}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public void changeProject(ProjectContext context){  if (currentProject != null) {    currentProject.dispose();  }  currentProject=context;  registry.setLastProject(new ProjectRef());  registry.getLastOpenedProject().setName(context.name);  registry.getLastOpenedProject().setPath(context.path);  kryoManager.saveRegistry(registry);  Gdx.graphics.setTitle(constructWindowTitle());  Mundus.INSTANCE.postEvent(new ProjectChangedEvent(context));}  }
class C{  public boolean canAccess(Environment env,MemberDefinition f) throws ClassNotFound {  if (f.isPublic()) {    return true;  }  if (f.isProtected() && subClassOf(env,f.getClassDeclaration())) {    return true;  }  if (f.isPrivate()) {    return getTopClass().getClassDeclaration().equals(f.getTopClass().getClassDeclaration());  }  return getName().getQualifier().equals(f.getClassDeclaration().getName().getQualifier());}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,CSCActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_csc);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.csc_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  public BootstrapService(final String apiKey){  this.username=null;  this.password=null;  this.apiKey=apiKey;}  }
class C{  public static FuzzyQueryBuilder fuzzyQuery(String name,String value){  return new FuzzyQueryBuilder(name,value);}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public Whirlpool(){  super(T0,T1,T2,T3,T4,T5,T6,T7,RC);}  }
class C{  public static void e(String tag,String s,Throwable e){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s,e);}  }
class C{  public static void registerState(State state){  states.put(state.getName(),state);}  }
class C{  protected void attrRemoved(Attr node,String oldv){  LiveAttributeValue lav=getLiveAttributeValue(node);  if (lav != null) {    lav.attrRemoved(node,oldv);  }}  }
class C{  private IGraphAccessor newGraphAccessor(final AbstractTripleStore kb){  final BigdataGraphAccessor graphAccessor=new BigdataGraphAccessor(kb.getIndexManager(),kb.getNamespace(),kb.getIndexManager().getLastCommitTime());  return graphAccessor;}  }
class C{  int parseMonth(String month,int offset) throws ParseException {  if (month.length() < 3) {    return (parseNumber(month,offset,"month",1,12) - 1) + Calendar.JANUARY;  }  String months[]=getDateFormatSymbols().getMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  months=getDateFormatSymbols().getShortMonths();  for (int i=0; i < months.length; i++) {    if (month.equalsIgnoreCase(months[i])) {      return i + Calendar.JANUARY;    }  }  return throwInvalid("month",offset);}  }
class C{  protected void relaxNode(final Node outNode,final RouterPriorityQueue<Node> pendingNodes){  this.controlCounter++;  if (this.controlCounter == CONTROL_INTERVAL) {    int newLandmarkIndex=checkToAddLandmark(new InternalLandmarkData(outNode));    if (newLandmarkIndex >= 0) {      updatePendingNodes(newLandmarkIndex,pendingNodes);    }    this.controlCounter=0;  }  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  for (  Link l : outNode.getOutLinks().values()) {    relaxNodeLogic(l,pendingNodes,currTime,currCost);  }}  }
class C{  public String relativeArtifactPath(char separator){  String artifactId1=getArtifactId();  String version1=getVersion();  StringBuilder builder=new StringBuilder(getGroupId().replace('.',separator));  builder.append(separator).append(artifactId1).append(separator);  String pathVersion;  final Matcher versionMatcher=snapshotPattern.matcher(version1);  if (versionMatcher.find()) {    pathVersion=version1.substring(0,versionMatcher.start()) + "-SNAPSHOT";  } else {    pathVersion=version1;  }  builder.append(pathVersion).append(separator).append(artifactId1).append('-').append(version1);  return builder.toString();}  }
class C{  public void clearInputs(){  for (  Neuron neuron : this.getFlatNeuronList()) {    neuron.setInputValue(0);  }}  }
class C{  public static String dateToHumanDateAndTime(Date date){  if (date == null) {    return "missing";  }  return timestampToHumanDateAndTime(date.getTime());}  }
class C{  public Select<T> sortDesc(String... columns){  for (  String column : columns) {    mSortingOrderList.add(column + " DESC");  }  return this;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public boolean editCount(Link link,int h,double volumen){  Count<Link> c=counts.getCount(link.getId());  if (c == null)   return false;  if (c.getVolume(h) == null)   return false;  c.getVolumes().get(h).setValue(volumen);  return true;}  }
class C{  private void generateReconciliation(){  log.info("");  if (miniTable.getRowCount() == 0)   return;  if (m_noSelected == 0)   return;  String format="yyyy-MM-dd HH:mm:ss.SSS";  Calendar cal=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat(format);  String time=sdf.format(cal.getTime());  String matchcode="Manual: " + Env.getContext(Env.getCtx(),"#AD_User_Name") + " "+ time;  int[] rows=miniTable.getSelectedIndices();  Arrays.sort(rows);  int[] sortedRows=rows;  if (rows.length == 0)   return;  for (int row=sortedRows.length - 1; row >= 0; row--) {    int factId=miniTable.getRowKey(sortedRows[row]);    MFactReconciliation rec=new Query(Env.getCtx(),MFactReconciliation.Table_Name,"Fact_Acct_ID = ?",null).setParameters(new Object[]{factId}).first();    if (rec == null) {      rec=new MFactReconciliation(Env.getCtx(),0,null);      rec.setFact_Acct_ID(factId);    }    rec.setMatchCode(matchcode);    rec.setIsDirectLoad(true);    rec.saveEx();    miniTable.getModel().remove(rows[row]);  }  calculateSelection();}  }
class C{  public static DTMIterator newDTMIterator(Compiler compiler,int opPos,boolean isTopLevel) throws javax.xml.transform.TransformerException {  int firstStepPos=OpMap.getFirstChildPos(opPos);  int analysis=analyze(compiler,firstStepPos,0);  boolean isOneStep=isOneStep(analysis);  DTMIterator iter;  if (isOneStep && walksSelfOnly(analysis) && isWild(analysis)&& !hasPredicate(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("SelfIteratorNoPredicate",analysis,compiler);    iter=new SelfIteratorNoPredicate(compiler,opPos,analysis);  } else   if (walksChildrenOnly(analysis) && isOneStep) {    if (isWild(analysis) && !hasPredicate(analysis)) {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildIterator",analysis,compiler);      iter=new ChildIterator(compiler,opPos,analysis);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildTestIterator",analysis,compiler);      iter=new ChildTestIterator(compiler,opPos,analysis);    }  } else   if (isOneStep && walksAttributes(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("AttributeIterator",analysis,compiler);    iter=new AttributeIterator(compiler,opPos,analysis);  } else   if (isOneStep && !walksFilteredList(analysis)) {    if (!walksNamespaces(analysis) && (walksInDocOrder(analysis) || isSet(analysis,BIT_PARENT))) {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIteratorForward",analysis,compiler);      iter=new OneStepIteratorForward(compiler,opPos,analysis);    } else {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIterator",analysis,compiler);      iter=new OneStepIterator(compiler,opPos,analysis);    }  } else   if (isOptimizableForDescendantIterator(compiler,firstStepPos,0)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("DescendantIterator",analysis,compiler);    iter=new DescendantIterator(compiler,opPos,analysis);  } else {    if (isNaturalDocOrder(compiler,firstStepPos,0,analysis)) {      if (false || DEBUG_ITERATOR_CREATION) {        diagnoseIterator("WalkingIterator",analysis,compiler);      }      iter=new WalkingIterator(compiler,opPos,analysis,true);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("WalkingIteratorSorted",analysis,compiler);      iter=new WalkingIteratorSorted(compiler,opPos,analysis,true);    }  }  if (iter instanceof LocPathIterator)   ((LocPathIterator)iter).setIsTopLevel(isTopLevel);  return iter;}  }
class C{  public MemorySection(final com.google.security.zynamics.binnavi.debug.models.processmanager.MemorySection section){  this.section=section;}  }
class C{  void readData(byte[] data) throws IOException {  int count=data.length;  if (bufAvail >= count) {    System.arraycopy(buf,bufPtr,data,0,count);    bufAvail-=count;    bufPtr+=count;    return;  }  int offset=0;  if (bufAvail > 0) {    System.arraycopy(buf,bufPtr,data,0,bufAvail);    offset=bufAvail;    count-=bufAvail;    bufAvail=0;    bufPtr=0;  }  if (iis.read(data,offset,count) != count) {    throw new IIOException("Image format Error");  }}  }
class C{  public RemoveMissingValueCasesAction(DataEditor editor){  super("Remove Cases with Missing Values");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public ChannelHandlerContext removeSession(String clientId){  return this.repo.remove(clientId);}  }
class C{  public static JBBPCompiledBlock compile(final String script,final JBBPCustomFieldTypeProcessor customTypeFieldProcessor) throws IOException {  JBBPUtils.assertNotNull(script,"Script must not be null");  final JBBPCompiledBlock.Builder builder=JBBPCompiledBlock.prepare().setSource(script);  final List<JBBPNamedFieldInfo> namedFields=new ArrayList<JBBPNamedFieldInfo>();  final List<JBBPFieldTypeParameterContainer> customTypeFields=new ArrayList<JBBPFieldTypeParameterContainer>();  final List<JBBPIntegerValueEvaluator> varLengthEvaluators=new ArrayList<JBBPIntegerValueEvaluator>();  final ByteArrayOutputStream out=new ByteArrayOutputStream();  int offset=0;  final List<JBBPCompiler.StructStackItem> structureStack=new ArrayList<JBBPCompiler.StructStackItem>();  final JBBPTokenizer parser=new JBBPTokenizer(script,customTypeFieldProcessor);  int fieldUnrestrictedArrayOffset=-1;  boolean hasVarFields=false;  for (  final JBBPToken token : parser) {    if (token.isComment()) {      continue;    }    final int code=prepareCodeForToken(token,customTypeFieldProcessor);    final int startFieldOffset=offset;    final int extracode=code >>> 8;    out.write(code);    offset++;    if ((code & FLAG_WIDE) != 0) {      out.write(extracode);      offset++;    }    StructStackItem currentClosedStructure=null;    boolean writeExtraFieldNumberInCompiled=false;    int extraFieldNumberAsInt=-1;    int customTypeFieldIndex=-1;    if ((code & 0xF) != CODE_STRUCT_END && fieldUnrestrictedArrayOffset >= 0 && (structureStack.isEmpty() || structureStack.get(structureStack.size() - 1).startStructureOffset != fieldUnrestrictedArrayOffset)) {      throw new JBBPCompilationException("Attempt to read after a 'till-the-end' field",token);    }    final boolean extraFieldNumericDataAsExpression=((code >>> 8) & EXT_FLAG_EXTRA_AS_EXPRESSION) != 0;switch (code & 0xF) {case CODE_BOOL:case CODE_BYTE:case CODE_UBYTE:case CODE_SHORT:case CODE_USHORT:case CODE_INT:case CODE_CUSTOMTYPE:case CODE_LONG:{        if ((code & 0x0F) == CODE_CUSTOMTYPE) {          if (extraFieldNumericDataAsExpression) {            varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraDataExpression(),namedFields,out.toByteArray()));          } else {            final String extraDataAsStr=token.getFieldTypeParameters().getExtraData();            if (extraDataAsStr == null) {              extraFieldNumberAsInt=0;            } else {              try {                extraFieldNumberAsInt=Integer.parseInt(extraDataAsStr);              } catch (              NumberFormatException ex) {                throw new JBBPCompilationException("Can't parse extra data, must be numeric",token);              }            }            writeExtraFieldNumberInCompiled=true;          }          if (customTypeFieldProcessor.isAllowed(token.getFieldTypeParameters(),token.getFieldName(),extraFieldNumberAsInt,token.isArray())) {            customTypeFieldIndex=customTypeFields.size();            customTypeFields.add(token.getFieldTypeParameters());          } else {            throw new JBBPCompilationException("Illegal parameters for custom type field",token);          }        }      }    break;case CODE_SKIP:{    if (token.getArraySizeAsString() != null) {      throw new JBBPCompilationException("'skip' can't be array",token);    }    if (token.getFieldName() != null) {      throw new JBBPCompilationException("'skip' must not be named",token);    }    if (extraFieldNumericDataAsExpression) {      varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraDataExpression(),namedFields,out.toByteArray()));    } else {      final String extraNumberAsStr=token.getFieldTypeParameters().getExtraData();      writeExtraFieldNumberInCompiled=true;      if (extraNumberAsStr == null) {        extraFieldNumberAsInt=1;      } else {        try {          extraFieldNumberAsInt=Integer.parseInt(extraNumberAsStr);          assertNonNegativeValue(extraFieldNumberAsInt,token);        } catch (        NumberFormatException ex) {          extraFieldNumberAsInt=-1;        }      }    }  }break;case CODE_ALIGN:{if (token.getArraySizeAsString() != null) {  throw new JBBPCompilationException("'align' can't be array",token);}if (token.getFieldName() != null) {  throw new JBBPCompilationException("'align' must not be named",token);}if (extraFieldNumericDataAsExpression) {  varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraDataExpression(),namedFields,out.toByteArray()));} else {  final String extraNumberAsStr=token.getFieldTypeParameters().getExtraData();  writeExtraFieldNumberInCompiled=true;  if (extraNumberAsStr == null) {    extraFieldNumberAsInt=1;  } else {    try {      extraFieldNumberAsInt=Integer.parseInt(extraNumberAsStr);      assertNonNegativeValue(extraFieldNumberAsInt,token);    } catch (    NumberFormatException ex) {      extraFieldNumberAsInt=-1;    }    if (extraFieldNumberAsInt <= 0) {      throw new JBBPCompilationException("'align' size must be greater than zero [" + token.getFieldTypeParameters().getExtraData() + ']',token);    }  }}}break;case CODE_BIT:{if (extraFieldNumericDataAsExpression) {varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraDataExpression(),namedFields,out.toByteArray()));} else {final String extraFieldNumAsStr=token.getFieldTypeParameters().getExtraData();writeExtraFieldNumberInCompiled=true;if (extraFieldNumAsStr == null) {extraFieldNumberAsInt=1;} else {try {  extraFieldNumberAsInt=Integer.parseInt(extraFieldNumAsStr);  assertNonNegativeValue(extraFieldNumberAsInt,token);} catch (NumberFormatException ex) {  extraFieldNumberAsInt=-1;}if (extraFieldNumberAsInt < 1 || extraFieldNumberAsInt > 8) {  throw new JBBPCompilationException("Bit-width must be 1..8 [" + token.getFieldTypeParameters().getExtraData() + ']',token);}}}}break;case CODE_VAR:{hasVarFields=true;if (extraFieldNumericDataAsExpression) {varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraDataExpression(),namedFields,out.toByteArray()));} else {final String extraFieldNumStr=token.getFieldTypeParameters().getExtraData();writeExtraFieldNumberInCompiled=true;if (extraFieldNumStr == null) {extraFieldNumberAsInt=0;} else {if (extraFieldNumericDataAsExpression) {varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getFieldTypeParameters().getExtraData(),namedFields,out.toByteArray()));writeExtraFieldNumberInCompiled=false;} else {try {extraFieldNumberAsInt=Integer.parseInt(extraFieldNumStr);} catch (NumberFormatException ex) {throw new JBBPCompilationException("Can't parse the extra value of a VAR field, must be integer [" + token.getFieldTypeParameters().getExtraData() + ']',token);}}}}}break;case CODE_RESET_COUNTER:{if (token.getArraySizeAsString() != null) {throw new JBBPCompilationException("A Reset counter field can't be array",token);}if (token.getFieldName() != null) {throw new JBBPCompilationException("A Reset counter field can't be named [" + token.getFieldName() + ']',token);}if (token.getFieldTypeParameters().getExtraData() != null) {throw new JBBPCompilationException("A Reset counter field doesn't use extra value [" + token.getFieldName() + ']',token);}}break;case CODE_STRUCT_START:{structureStack.add(new StructStackItem(namedFields.size() + ((code & JBBPCompiler.FLAG_NAMED) == 0 ? 0 : 1),startFieldOffset,code,token));}break;case CODE_STRUCT_END:{if (structureStack.isEmpty()) {throw new JBBPCompilationException("Detected structure close tag without opening one",token);} else {currentClosedStructure=structureStack.remove(structureStack.size() - 1);offset+=writePackedInt(out,currentClosedStructure.startStructureOffset);}}break;default :throw new Error("Detected unsupported compiled code, notify the developer please [" + code + ']');}if ((code & FLAG_ARRAY) != 0) {if ((extracode & EXT_FLAG_EXPRESSION_OR_WHOLESTREAM) != 0) {if ("_".equals(token.getArraySizeAsString())) {if (fieldUnrestrictedArrayOffset >= 0) {throw new JBBPCompilationException("Detected two or more unlimited arrays [" + script + ']',token);} else {fieldUnrestrictedArrayOffset=startFieldOffset;}} else {varLengthEvaluators.add(JBBPEvaluatorFactory.getInstance().make(token.getArraySizeAsString(),namedFields,out.toByteArray()));}} else {final int fixedArraySize=token.getArraySizeAsInt();if (fixedArraySize <= 0) {throw new JBBPCompilationException("Detected an array with negative or zero fixed length",token);}offset+=writePackedInt(out,token.getArraySizeAsInt());}}if (writeExtraFieldNumberInCompiled) {offset+=writePackedInt(out,extraFieldNumberAsInt);}if (customTypeFieldIndex >= 0) {offset+=writePackedInt(out,customTypeFieldIndex);}if ((code & FLAG_NAMED) != 0) {final String normalizedName=JBBPUtils.normalizeFieldNameOrPath(token.getFieldName());assertName(normalizedName,token);registerNamedField(normalizedName,structureStack.isEmpty() ? 0 : structureStack.get(structureStack.size() - 1).namedFieldCounter,startFieldOffset,namedFields,token);} else {if (currentClosedStructure != null && (currentClosedStructure.code & FLAG_NAMED) != 0) {final String normalizedName=JBBPUtils.normalizeFieldNameOrPath(currentClosedStructure.token.getFieldName());for (int i=namedFields.size() - 1; i >= 0; i--) {final JBBPNamedFieldInfo f=namedFields.get(i);if (f.getFieldOffsetInCompiledBlock() <= currentClosedStructure.startStructureOffset) {break;}final String newFullName=normalizedName + '.' + f.getFieldPath();namedFields.set(i,new JBBPNamedFieldInfo(newFullName,f.getFieldName(),f.getFieldOffsetInCompiledBlock()));}}}}if (!structureStack.isEmpty()) {throw new JBBPCompilationException("Detected nonclosed " + structureStack.size() + " structure(s)");}final byte[] compiledBlock=out.toByteArray();if (fieldUnrestrictedArrayOffset >= 0) {compiledBlock[fieldUnrestrictedArrayOffset]=(byte)(compiledBlock[fieldUnrestrictedArrayOffset] & ~FLAG_ARRAY);}return builder.setNamedFieldData(namedFields).setArraySizeEvaluators(varLengthEvaluators).setCustomTypeFields(customTypeFields).setCompiledData(compiledBlock).setHasVarFields(hasVarFields).build();}  }
class C{  static private double fac2(int j){  long i=j;  if (j < 0)   i=Math.abs(j);  double d=1.0;  while (i > 1)   d*=i--;  if (j < 0)   return -d; else   return d;}  }
class C{  public boolean isRenderPoints(SimpleSeriesRenderer renderer){  return ((XYSeriesRenderer)renderer).getPointStyle() != PointStyle.POINT;}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix2D other){  if (other instanceof SelectedDenseObjectMatrix2D) {    SelectedDenseObjectMatrix2D otherMatrix=(SelectedDenseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix2D) {    DenseObjectMatrix2D otherMatrix=(DenseObjectMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public void testTimedInvokeAny5() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    long startTime=System.nanoTime();    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    l.add(new StringTask());    String result=e.invokeAny(l,LONG_DELAY_MS,MILLISECONDS);    assertSame(TEST_STRING,result);    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public static TaskResourceRep createFailedTaskOnVolume(DbClient dbClient,Volume volume,ResourceOperationTypeEnum opr,ServiceCoded sc){  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(opr);  dbClient.createTaskOpStatus(Volume.class,volume.getId(),taskId,op);  volume=dbClient.queryObject(Volume.class,volume.getId());  op=volume.getOpStatus().get(taskId);  op.error(sc);  volume.getOpStatus().updateTaskStatus(taskId,op);  dbClient.updateObject(volume);  return TaskMapper.toTask(volume,taskId,op);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMessageFromOperator);}  }
class C{  public String toString(){  String ret="";  if ((relations != null) && (relations.size() > 0)) {    ret=((AccessibleRelation)(relations.elementAt(0))).toDisplayString();    for (int i=1; i < relations.size(); i++) {      ret=ret + "," + ((AccessibleRelation)(relations.elementAt(i))).toDisplayString();    }  }  return ret;}  }
class C{  public static void assertTrue(boolean expression,String message){  Assert.True(expression,message);}  }
class C{  public static String xml(CharSequence text){  return encode(text,TEXT_XML,LEN_XML);}  }
class C{  public boolean isDnsAutoDetect(){  return dnsAutoDetect;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== Preface ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("last_modified_date = 0x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.last_modified_date[0],this.last_modified_date[1],this.last_modified_date[2],this.last_modified_date[3],this.last_modified_date[4],this.last_modified_date[5],this.last_modified_date[6],this.last_modified_date[7]));  sb.append(String.format("version = 0x%02x%02x%n",this.version[0],this.version[1]));  sb.append(String.format("content_storage = %s%n",this.content_storage.toString()));  sb.append(String.format("operational_pattern = %s%n",this.operational_pattern.toString()));  sb.append(this.essencecontainers.toString());  sb.append(this.dm_schemes.toString());  return sb.toString();}  }
class C{  public synchronized Integer updateAccess(DataCallback<Integer> callback,String unitId,boolean visited){  ContentValues values=new ContentValues();  values.put(DbStructure.Column.ASSESSMENT_TB_UNIT_WATCHED,visited);  DbOperationUpdate op=new DbOperationUpdate(DbStructure.Table.ASSESSMENT,values,DbStructure.Column.ASSESSMENT_TB_UNIT_ID + "=? AND " + DbStructure.Column.ASSESSMENT_TB_USERNAME+ "=?",new String[]{unitId,username()});  op.setCallback(callback);  return enqueue(op);}  }
class C{  public boolean removeAll(AbstractBooleanList other){  if (!(other instanceof BooleanArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  boolean[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    BooleanArrayList sortedList=(BooleanArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  @Override public synchronized void updateCharacterStream(String columnName,java.io.Reader reader,int length) throws SQLException {  updateCharacterStream(findColumn(columnName),reader,length);}  }
class C{  public int size(){  return mSize;}  }
class C{  protected boolean left(TextView widget,Spannable buffer){  return false;}  }
class C{  public void update(){  super.update();  if (!canModifyEditor()) {    setEnabled(false);    return;  }  ITextEditor editor=getTextEditor();  if (fOperationTarget == null && editor != null)   fOperationTarget=(ITextOperationTarget)editor.getAdapter(ITextOperationTarget.class);  boolean isEnabled=(fOperationTarget != null && fOperationTarget.canDoOperation(ITextOperationTarget.PREFIX) && fOperationTarget.canDoOperation(ITextOperationTarget.STRIP_PREFIX));  setEnabled(isEnabled);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  int nBands=1;  int nBits=8;  int skipBytes=0;  double xDim=1;  double yDim=1;  double ulxmap=0;  double ulymap=0;  String layout="bil";  String pixelType="unsignedint";  String xyUnits="not specified";  String zUnits="not specified";  String projection="not specified";  String byteOrder=java.nio.ByteOrder.nativeOrder().toString();  String[] imageFiles;  int numImages=0;  double noData=-32768;  String dataType="float";  String dataScale="continuous";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double west=0;  double north=0;  double east=0;  double south=0;  RandomAccessFile rIn=null;  FileChannel inChannel=null;  ByteBuffer buf=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames={"bil","bsq","bip"};      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      String fileHeader=fileName.replace("." + fileExtension,".hdr");      if (!whitebox.utilities.FileUtilities.fileExists(fileHeader) || !fileHeader.contains(".hdr")) {        showFeedback("This image header file (.hdr) could not be located.");        return;      }      FileInputStream fstream=new FileInputStream(fileHeader);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter=",";      String line;      String[] str;      rows=0;      cols=0;      while ((line=br.readLine()) != null) {        if (line.startsWith("data type")) {          line=line.replace("data type","datatype");        }        if (line.startsWith("header offset")) {          line=line.replace("header offset","headeroffset");        }        if (line.startsWith("x start")) {          line=line.replace("x start","xstart");        }        if (line.startsWith("y start")) {          line=line.replace("y start","ystart");        }        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("byteorder")) {          if (str[str.length - 1].toLowerCase().contains("i")) {            byteOrder="LITTLE_ENDIAN";          } else {            byteOrder="BIG_ENDIAN";          }        } else         if (str[0].toLowerCase().contains("nrows")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ncols")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("nbits")) {          nBits=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("skipbytes")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("xdim")) {          xDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ydim")) {          yDim=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulxmap")) {          ulxmap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("ulymap")) {          ulymap=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("layout")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("pixeltype")) {          if (str[str.length - 1].toLowerCase().contains("float")) {            pixelType="float";          } else           if (str[str.length - 1].toLowerCase().contains("signed") && !str[str.length - 1].toLowerCase().contains("unsigned")) {            pixelType="signedint";          } else {            pixelType="unsignedint";          }        } else         if (str[0].toLowerCase().contains("xyunits")) {          xyUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("zunits")) {          zUnits=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("projection")) {          projection=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().contains("nodata")) {          noData=Double.parseDouble(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("lines")) {          rows=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("samples")) {          cols=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("bands")) {          nBands=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("headeroffset")) {          skipBytes=Integer.parseInt(str[str.length - 1]);        } else         if (str[0].toLowerCase().contains("interleave")) {          layout=str[str.length - 1].toLowerCase();        } else         if (str[0].toLowerCase().equals("xstart")) {        } else         if (str[0].toLowerCase().equals("ystart")) {        } else         if (str[0].toLowerCase().contains("datatype")) {          int enviDTCode=Integer.parseInt(str[str.length - 1]);switch (enviDTCode) {case 1:            nBits=8;          pixelType="unsignedint";        break;case 2:      nBits=16;    pixelType="signedint";  break;case 3:nBits=32;pixelType="signedint";break;case 4:nBits=32;pixelType="float";break;case 5:nBits=64;pixelType="float";break;case 6:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 9:showFeedback("Whitebox does not support the import of complex number file formats.");return;case 12:nBits=(int)16;pixelType="unsignedint";break;case 13:nBits=32;pixelType="unsignedint";break;case 14:nBits=64;pixelType="unsignedint";break;}}}char[] extChars=fileExtension.toCharArray();boolean worldFileFound=false;String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";String worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=fileExtension + "w";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;} else {wfExtension=".wld";worldFile=imageFiles[i].replace(fileExtension,wfExtension);if ((new File(worldFile)).exists()) {worldFileFound=true;}}}if (worldFileFound) {double A=0, B=0, C=0, D=0, E=0, F=0;fstream=new FileInputStream(worldFile);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));int n=0;while ((line=br.readLine()) != null) {switch (n) {case 0:A=Double.parseDouble(line);break;case 1:D=Double.parseDouble(line);break;case 2:B=Double.parseDouble(line);break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {west=A * 0 + B * 0 + C;north=D * 0 + E * 0 + F;east=A * (cols - 1) + B * (rows - 1) + C;south=D * (cols - 1) + E * (rows - 1) + F;} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {west=ulxmap;north=ulymap;east=ulxmap + cols * xDim;south=ulymap - rows * yDim;}if (nBits <= 32 && pixelType.toLowerCase().contains("int")) {dataType="integer";} else if (nBits <= 32 && pixelType.toLowerCase().contains("float")) {dataType="float";} else {dataType="double";}for (int a=0; a < nBands; a++) {if (nBands > 1) {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,"_band" + (a + 1) + ".tas");} else {whiteboxHeaderFile=imageFiles[i].replace("." + fileExtension,".dep");whiteboxDataFile=imageFiles[i].replace("." + fileExtension,".tas");}(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String outputByteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + projection;out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "grey.pal";out.println(str1);str1="NoData:\t" + String.valueOf(noData);out.println(str1);if (outputByteOrder.toLowerCase().contains("lsb") || outputByteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int numBytes=nBits / 8;int pos;if (layout.equals("bil") || fileExtension.equals("bil")) {int readLengthInBytes=cols * numBytes;int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(readLengthInBytes);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength + a * readLengthInBytes;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bsq") || fileExtension.equals("bsq")) {int rowLength=cols * numBytes;int bandLength=rows * cols * numBytes;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + a * bandLength + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else if (layout.equals("bip") || fileExtension.equals("bip")) {int rowLength=cols * numBytes * nBands;buf=ByteBuffer.allocate(rowLength);if (byteOrder.toLowerCase().contains("little")) {buf.order(ByteOrder.LITTLE_ENDIAN);} else {buf.order(ByteOrder.BIG_ENDIAN);}rIn=new RandomAccessFile(fileName,"r");inChannel=rIn.getChannel();if (nBits == 8 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedByte(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 8 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.get(col * numBytes * a));}outputRow--;}} else if (nBits == 16 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedShort(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 16 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getShort(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("unsignedint")) {double z;int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {z=whitebox.utilities.Unsigned.getUnsignedInt(buf,col * numBytes * a);output.setValue(outputRow,col,z);}outputRow--;}} else if (nBits == 32 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getInt(col * numBytes * a));}outputRow--;}} else if (nBits == 32 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getFloat(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("unsignedint")) {showFeedback("We're sorry but this data type is not supported for import to Whitebox.");break;} else if (nBits == 64 && pixelType.equals("signedint")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getLong(col * numBytes * a));}outputRow--;}} else if (nBits == 64 && pixelType.equals("float")) {int outputRow=rows - 1;for (row=0; row < rows; row++) {pos=skipBytes + row * rowLength;inChannel.position(pos);buf.clear();inChannel.read(buf);for (col=0; col < cols; col++) {output.setValue(outputRow,col,buf.getDouble(col * numBytes * a));}outputRow--;}}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();}if (a < 10) {returnData(whiteboxHeaderFile);}}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected void onMode(String channel,String sourceNick,String sourceLogin,String sourceHostname,String mode){}  }
class C{  public void testBug62577() throws Exception {  Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);  String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY,"localhost");  String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");  String hostSpec=host;  if (!NonRegisteringDriver.isHostPropertiesList(host)) {    hostSpec=host + ":" + port;  }  String database=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);  removeHostRelatedProps(props);  props.remove(NonRegisteringDriver.DBNAME_PROPERTY_KEY);  StringBuilder configs=new StringBuilder();  for (  @SuppressWarnings("rawtypes") Map.Entry entry : props.entrySet()) {    configs.append(entry.getKey());    configs.append("=");    configs.append(entry.getValue());    configs.append("&");  }  String cfg1=configs.toString();  configs.append("pinGlobalTxToPhysicalConnection");  configs.append("=");  configs.append("true");  String cfg2=configs.toString();  testBug62577TestUrl(String.format("jdbc:mysql:loadbalance://%s,%s/%s?%s",hostSpec,hostSpec,database,cfg1));  testBug62577TestUrl(String.format("jdbc:mysql:loadbalance://%s,%s/%s?%s",hostSpec,hostSpec,database,cfg2));  testBug62577TestUrl(String.format("jdbc:mysql://%s,%s/%s?%s",hostSpec,hostSpec,database,cfg1));  testBug62577TestUrl(String.format("jdbc:mysql://%s,%s/%s?%s",hostSpec,hostSpec,database,cfg2));}  }
class C{  public void deleteMessage(DeleteMessageRequest deleteMessageRequest){  if (deleteMessageRequest == null) {    String errorMessage="deleteMessageRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  deleteMessageRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  if (!clientConfiguration.isLargePayloadSupportEnabled()) {    super.deleteMessage(deleteMessageRequest);    return;  }  String receiptHandle=deleteMessageRequest.getReceiptHandle();  String origReceiptHandle=receiptHandle;  if (isS3ReceiptHandle(receiptHandle)) {    deleteMessagePayloadFromS3(receiptHandle);    origReceiptHandle=getOrigReceiptHandle(receiptHandle);  }  deleteMessageRequest.setReceiptHandle(origReceiptHandle);  super.deleteMessage(deleteMessageRequest);}  }
class C{  public static String createBase64(Bitmap mBitmap){  ByteArrayOutputStream baos1=new ByteArrayOutputStream();  mBitmap.compress(Bitmap.CompressFormat.JPEG,100,baos1);  byte[] b1=baos1.toByteArray();  return Base64.encodeToString(b1,Base64.DEFAULT);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,TXCommitMessage val,ReplySender replySender) throws RemoteOperationException {  Assert.assertTrue(recipient != null,"TXRemoteCommitReply NULL reply message");  TXRemoteCommitReplyMessage m=new TXRemoteCommitReplyMessage(processorId,val);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:57.369 -0500",hash_original_method="977E904E5666EA1924971461B3999364",hash_generated_method="30B825BE9CB2E300173C549DFAB6AC4A") @Override public void write(int value){  digest.update((byte)value);}  }
class C{  public void testQoSPreserved(){  IMqttAsyncClient mqttClient=null;  IMqttToken connectToken;  IMqttToken subToken;  IMqttDeliveryToken pubToken;  IMqttToken disconnectToken;  String methodName="testQoSPreserved";  try {    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testQoSPreserved");    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    connectToken=mqttClient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    String[] topicNames=new String[]{methodName + "/Topic0",methodName + "/Topic1",methodName + "/Topic2"};    int[] topicQos={0,1,2};    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    for (int i=0; i < topicNames.length; i++) {      byte[] message=("Message payload " + classCanonicalName + "."+ methodName+ " "+ topicNames[i]).getBytes();      for (int iQos=0; iQos < 3; iQos++) {        pubToken=mqttClient.publish(topicNames[i],message,iQos,false,null,null);        pubToken.waitForCompletion(waitForCompletionTime);        boolean ok=mqttV3Receiver.validateReceipt(topicNames[i],Math.min(iQos,topicQos[i]),message);        if (!ok) {          fail("Receive failed sub Qos=" + topicQos[i] + " PublishQos="+ iQos);        }      }    }  } catch (  Exception exception) {    fail("Failed:" + methodName + " exception="+ exception);  } finally {    try {      disconnectToken=mqttClient.disconnect(null,null);      disconnectToken.waitForCompletion(waitForCompletionTime);      mqttClient.close();    } catch (    Exception exception) {    }  }}  }
class C{  public static Angle average(Angle a,Angle b){  if (a == null || b == null) {    throw new IllegalArgumentException("Angle Is Null");  }  return Angle.fromDegrees(0.5 * (a.degrees + b.degrees));}  }
class C{  public CustomGarbageCollectorMetricSet(Collection<GarbageCollectorMXBean> garbageCollectors){  this.garbageCollectors=new ArrayList<GarbageCollectorMXBean>(garbageCollectors);}  }
class C{  @SuppressWarnings("unchecked") final private KVO<BigdataValue>[] generateSortKeys(final LexiconKeyBuilder keyBuilder,final BigdataValue[] terms,final int numTerms){  final KVO<BigdataValue>[] a=new KVO[numTerms];  for (int i=0; i < numTerms; i++) {    final BigdataValue term=terms[i];    a[i]=new KVO<BigdataValue>(keyBuilder.value2Key(term),null,term);  }  return a;}  }
class C{  public String toXML(final XStream xstream,final Object obj) throws ObjectStreamException {  final Writer writer=new StringWriter();  try {    toXML(xstream,obj,writer);  } catch (  final ObjectStreamException e) {    throw e;  }catch (  final IOException e) {    throw new StreamException("Unexpected IO error from a StringWriter",e);  }  return writer.toString();}  }
class C{  public void arcLine(final int cx,final int cy,final int innerRadius,final int outerRadius,final double angle,final boolean in,final Long colorLine,final Long colorDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled){  final double a=PI180 * angle;  final double cosa=Math.cos(a);  final double sina=Math.sin(a);  final int xi=cx + (int)(innerRadius * cosa);  final int yi=cy - (int)(innerRadius * sina);  final int xo=cx + (int)(outerRadius * cosa);  final int yo=cy - (int)(outerRadius * sina);  if (in) {    line(xo,yo,xi,yi,colorLine,100,colorDot,100,dotDist,dotPos,dotRadius,dotFilled);  } else {    line(xi,yi,xo,yo,colorLine,100,colorDot,100,dotDist,dotPos,dotRadius,dotFilled);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void scroll(int row){  int rows=data.getRows();  if (rows < 1) {    return;  }  if (row < 0) {    data.setFirst(0);  } else   if (row >= data.getRowCount()) {    data.setFirst(data.getRowCount() - 1);  } else {    data.setFirst(row - (row % rows));  }}  }
class C{  public boolean isInDiskCacheSync(final Uri uri){  return isInDiskCacheSync(uri,ImageRequest.CacheChoice.SMALL) || isInDiskCacheSync(uri,ImageRequest.CacheChoice.DEFAULT);}  }
class C{  protected void adjustMinMax(LocalTile tile){  if (this.extremeElevations == null && tile != null) {    this.extremeElevations=new double[]{tile.minElevation,tile.maxElevation};  } else   if (tile != null) {    if (tile.minElevation < this.extremeElevations[0])     this.extremeElevations[0]=tile.minElevation;    if (tile.maxElevation > this.extremeElevations[1])     this.extremeElevations[1]=tile.maxElevation;  } else {    double min=Double.MAX_VALUE;    double max=-min;    for (    LocalTile t : this.tiles) {      if (t.minElevation < min)       min=t.minElevation;      if (t.maxElevation > max)       max=t.maxElevation;    }    this.extremeElevations=new double[]{min != Double.MAX_VALUE ? min : 0,max != -Double.MAX_VALUE ? max : 0};  }}  }
class C{  public void searchQuery(String query){  if (!networkConf.isNetworkAvailable()) {    networkConf.createNetErrorDialog();    return;  }  loadingProgressBar.setVisibility(View.VISIBLE);  onScrollIndex=0;  youTubeSearch.searchVideos(query);}  }
class C{  public static double SS(double M[][]){  double sum=0;  for (int i=0; i < M.length; i++) {    for (int j=0; j < M[i].length; j++) {      sum+=M[i][j];    }  }  return sum;}  }
class C{  public boolean isComplex(){  if (mElements == null) {    return false;  }  for (int ct=0; ct < mElements.length; ct++) {    if (mElements[ct].mElements != null) {      return true;    }  }  return false;}  }
class C{  public static void step5(SMState astate,byte[] input) throws SMException {  BigInteger[] msg4=unserialize(input);  astate.smProgState=PROG_CHEATED;  if (checkGroupElem(msg4[0]) || checkExpon(msg4[2])) {    throw new SMException("Invalid Parameter");  }  if (checkEqualLogs(msg4[1],msg4[2],msg4[0],astate,8) != 0)   throw new SMException("Invalid Parameter");  BigInteger rab=msg4[0].modPow(astate.x3,MODULUS_S);  int comp=rab.compareTo(astate.pab);  if (comp != 0) {  }  astate.smProgState=(comp != 0) ? PROG_FAILED : PROG_SUCCEEDED;  return;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static String toString(byte[] array,String prefix){  final String[] offsetPrefix={"","000","00","0",""};  StringBuilder sb=new StringBuilder();  StringBuilder charForm=new StringBuilder();  int i=0;  for (i=0; i < array.length; i++) {    if (i % 16 == 0) {      sb.append(prefix);      String offset=Integer.toHexString(i);      sb.append(offsetPrefix[offset.length()]);      sb.append(offset);      charForm.delete(0,charForm.length());    }    sb.append(' ');    sb.append(Byte.toHexString(array[i],false));    int currentByte=(0xff & array[i]);    char currentChar=(char)(currentByte & 0xffff);    charForm.append((Character.isISOControl(currentChar) ? '.' : currentChar));    if ((i + 1) % 8 == 0) {      sb.append(' ');    }    if ((i + 1) % 16 == 0) {      sb.append(' ');      sb.append(charForm.toString());      sb.append('\n');    }  }  if (i % 16 != 0) {    int ws2add=16 - i % 16;    for (int j=0; j < ws2add; j++) {      sb.append("   ");    }    if (ws2add > 8) {      sb.append(' ');    }    sb.append("  ");    sb.append(charForm.toString());    sb.append('\n');  }  return sb.toString();}  }
class C{  private void clearParameters(){  fieldValue.setText("");  fieldName.setText("");  fieldUPC.setText("");  fieldSKU.setText("");  fWarehouse_ID.setValue(null);  fPriceList_ID.setValue(null);  fProductCategory_ID.setValue(null);  fVendor_ID.setValue(null);  fAS_ID.setValue(null);  fASI_ID.setValue(null);  checkOnlyStock.setSelected(false);  checkAND.setSelected(true);}  }
class C{  @Override public void reconnect() throws RemotingException {  client.reconnect();}  }
class C{  protected MkCoPEntry createNewLeafEntry(DBID id,O object,double parentDistance){  MkCoPLeafEntry leafEntry=new MkCoPLeafEntry(id,parentDistance,null,null);  return leafEntry;}  }
class C{  public StackOverflowError(){  super();}  }
class C{  private void showPreferenceWindow(final GUIFactory currentGUI){  if (currentGUI.getFrame() instanceof JFrame) {    propertiesDialog=new JDialog(((Frame)currentGUI.getFrame()));  } else {    propertiesDialog=new JDialog();  }  propertiesDialog.setModal(true);  propertiesDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  if (!preferencesSetup) {    preferencesSetup=true;    createPreferenceWindow(currentGUI);  }  if (properties.getValue("readOnly").equalsIgnoreCase("true")) {    JOptionPane.showMessageDialog(this,"You do not have permission alter jPedal properties.\n" + "Access to the properties window has therefore been disabled.","Can not write to properties file",JOptionPane.INFORMATION_MESSAGE);  }  if (properties.isReadOnly()) {    JOptionPane.showMessageDialog(this,"Current properties file is read only.\n" + "Any alteration can only be saved as another properties file.","Properties file is read only",JOptionPane.INFORMATION_MESSAGE);    confirm.setEnabled(false);  } else {    confirm.setEnabled(true);  }  propertiesDialog.setLocationRelativeTo((Component)currentGUI.getFrame());  propertiesDialog.setVisible(true);}  }
class C{  public void testCookiesWithNonMatchingCase() throws Exception {  server=new MockWebServer();  server.enqueue(new MockResponse().addHeader("Set-Cookie: a=first; Domain=my.t-mobile.com").addHeader("Set-Cookie: b=second; Domain=.T-mobile.com").addHeader("Set-Cookie: c=third; Domain=.t-mobile.com").setBody("This response sets some cookies."));  server.enqueue(new MockResponse().setBody("This response gets those cookies back."));  server.play();  HttpClient client=new DefaultHttpClient();  client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,new HttpHost("localhost",server.getPort()));  HttpResponse getCookies=client.execute(new HttpGet("http://my.t-mobile.com/"));  getCookies.getEntity().consumeContent();  server.takeRequest();  HttpResponse sendCookies=client.execute(new HttpGet("http://my.t-mobile.com/"));  sendCookies.getEntity().consumeContent();  RecordedRequest sendCookiesRequest=server.takeRequest();  assertContains(sendCookiesRequest.getHeaders(),"Cookie: a=first; b=second; c=third");}  }
class C{  public void addSuperInterfaceNoBidirectionalUpdate(InterfaceType type){  if (null == superInterfaces) {    superInterfaces=new TypeSet<InterfaceType>();  }  superInterfaces.addOrUpdate(type);}  }
class C{  public boolean isArgPointer(int i){  return PTABridge.v().isPointer(getArgValue(i));}  }
class C{  public boolean hasProxyUri(){  return proxy_uri != null;}  }
class C{  public VNXeCommandJob deleteLunGroupSnap(String snapId){  _logger.info("deleting lun snap:" + snapId);  LunGroupSnapRequests req=new LunGroupSnapRequests(_khClient);  return req.deleteLunGroupSnap(snapId);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  int nBands=src.getNumBands();  if ((ncols != nBands) && (ncols != (nBands + 1))) {    throw new IllegalArgumentException("Number of columns in the " + "matrix (" + ncols + ") must be equal to the number"+ " of bands ([+1]) in src ("+ nBands+ ").");  }  if (src.getNumBands() == nrows) {    return src.createCompatibleWritableRaster();  } else {    throw new IllegalArgumentException("Don't know how to create a " + " compatible Raster with " + nrows + " bands.");  }}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public void validateInitiatorData(BaseInitiatorParam param,Initiator initiator){  String protocol=param.getProtocol() != null ? param.getProtocol() : (initiator != null ? initiator.getProtocol() : null);  String node=param.getNode() != null ? param.getNode() : (initiator != null ? initiator.getInitiatorNode() : null);  String port=param.getPort() != null ? param.getPort() : (initiator != null ? initiator.getInitiatorPort() : null);  ArgValidator.checkFieldValueWithExpected(param == null || HostInterface.Protocol.FC.toString().equals(protocol) || HostInterface.Protocol.iSCSI.toString().equals(protocol),"protocol",protocol,HostInterface.Protocol.FC,HostInterface.Protocol.iSCSI);  if (HostInterface.Protocol.FC.toString().equals(protocol)) {    ArgValidator.checkFieldNotNull(node,"node");    ArgValidator.checkFieldNotNull(port,"port");    if (!WWNUtility.isValidWWN(port)) {      throw APIException.badRequests.invalidWwnForFcInitiatorPort();    }    if (!WWNUtility.isValidWWN(node)) {      throw APIException.badRequests.invalidWwnForFcInitiatorNode();    }  } else {    if (!iSCSIUtility.isValidIQNPortName(port) && !iSCSIUtility.isValidEUIPortName(port)) {      throw APIException.badRequests.invalidIscsiInitiatorPort();    }    if (param.getNode() != null) {      throw APIException.badRequests.invalidNodeForiScsiPort();    }  }  if (initiator == null || (param.getPort() != null && !param.getPort().equalsIgnoreCase(initiator.getInitiatorPort()))) {    checkDuplicateAltId(Initiator.class,"iniport",EndpointUtility.changeCase(param.getPort()),"initiator","Initiator Port");  }}  }
class C{  public static String valueOf(char[] data,int start,int length){  return new String(data,start,length);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (strictMode: ");  result.append(strictMode);  result.append(", idAsText: ");  result.append(idAsText);  result.append(')');  return result.toString();}  }
class C{  public void removeCorruptionMarker() throws IOException {  ensureOpen();  final Directory directory=directory();  IOException firstException=null;  final String[] files=directory.listAll();  for (  String file : files) {    if (file.startsWith(CORRUPTED)) {      try {        directory.deleteFile(file);      } catch (      IOException ex) {        if (firstException == null) {          firstException=ex;        } else {          firstException.addSuppressed(ex);        }      }    }  }  if (firstException != null) {    throw firstException;  }}  }
class C{  private boolean isVowel(char value){  return (value == 'a') || (value == 'e') || (value == 'i')|| (value == 'o')|| (value == 'u');}  }
class C{  @Override protected void initListeners(){  this.pictureIV.setOnLongClickListener(this);}  }
class C{  public boolean isFeatureSelected(int recordNumber){  if (recordNumber >= selectedFeatures.length) {    return false;  }  return selectedFeatures[recordNumber];}  }
class C{  public void addDecoration(ShapeDecoration decoration){  decorations.add(decoration);}  }
class C{  public Switch(Context context){  this(context,null);}  }
class C{  public DenseMatrix(Vec a,Vec b){  matrix=new double[a.length()][b.length()];  for (int i=0; i < a.length(); i++) {    Vec rowVals=b.multiply(a.get(i));    for (int j=0; j < b.length(); j++)     matrix[i][j]=rowVals.get(j);  }}  }
class C{  public TestResult run(){  TestResult result=createResult();  run(result);  return result;}  }
class C{  public void ivrZonesetName(String zonesetName,boolean isActivate,boolean isRemove) throws NetworkDeviceControllerException {  ivrZoneName(true,zonesetName,isActivate,isRemove);}  }
class C{  public void drawIfNeeded(){synchronized (mWindowManagerService.mWindowMap) {    if (!mInvalidated) {      return;    }    mInvalidated=false;    Canvas canvas=null;    try {      if (mDirtyRect.isEmpty()) {        mBounds.getBounds(mDirtyRect);      }      mDirtyRect.inset(-mHalfBorderWidth,-mHalfBorderWidth);      canvas=mSurface.lockCanvas(mDirtyRect);      if (DEBUG_VIEWPORT_WINDOW) {        Slog.i(LOG_TAG,"Dirty rect: " + mDirtyRect);      }    } catch (    IllegalArgumentException iae) {    }catch (    OutOfResourcesException oore) {    }    if (canvas == null) {      return;    }    if (DEBUG_VIEWPORT_WINDOW) {      Slog.i(LOG_TAG,"Bounds: " + mBounds);    }    canvas.drawColor(Color.TRANSPARENT,Mode.CLEAR);    mPaint.setAlpha(mAlpha);    Path path=mBounds.getBoundaryPath();    canvas.drawPath(path,mPaint);    mSurface.unlockCanvasAndPost(canvas);    if (mAlpha > 0) {      mSurfaceControl.show();    } else {      mSurfaceControl.hide();    }  }}  }
class C{  public static String parseJsonMessage(String parsedMessage){  try {    JSONValue message=JSONParser.parseStrict(parsedMessage).isObject().get("message");    return message.isString().stringValue();  } catch (  Exception e) {    return parsedMessage;  }}  }
class C{  public void execute(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  double penaltyDiscount=getParams().getDouble("penaltyDiscount",4);  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    IndependenceTest test=new IndTestScore(gesScore);    fgs=new TsGFci(test,gesScore);  } else   if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (dataSet.isContinuous()) {      SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));      gesScore.setPenaltyDiscount(penaltyDiscount);      IndependenceTest test=new IndTestScore(gesScore);      fgs=new TsGFci(test,gesScore);    } else     if (dataSet.isDiscrete()) {      double samplePrior=getParams().getDouble("samplePrior",1);      double structurePrior=getParams().getDouble("structurePrior",1);      BDeuScore score=new BDeuScore(dataSet);      score.setSamplePrior(samplePrior);      score.setStructurePrior(structurePrior);      IndependenceTest test=new IndTestScore(score);      fgs=new TsGFci(test,score);    } else {      throw new IllegalStateException("Data set must either be continuous or discrete.");    }  } else   if (model instanceof ICovarianceMatrix) {    SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);    gesScore.setPenaltyDiscount(penaltyDiscount);    IndependenceTest test=new IndTestScore(gesScore);    fgs=new TsGFci(test,gesScore);  } else   if (model instanceof DataModelList) {    DataModelList list=(DataModelList)model;    for (    DataModel dataModel : list) {      if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {        throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single graph.");      }    }    Parameters Parameters=getParams();    if (allContinuous(list)) {      double penalty=penaltyDiscount;      SemBicScoreImages fgsScore=new SemBicScoreImages(list);      fgsScore.setPenaltyDiscount(penalty);      IndependenceTest test=new IndTestScore(fgsScore);      fgs=new TsGFci(test,fgsScore);    } else     if (allDiscrete(list)) {      double structurePrior=getParams().getDouble("structurePrior",1);      double samplePrior=getParams().getDouble("samplePrior",1);      BdeuScoreImages fgsScore=new BdeuScoreImages(list);      fgsScore.setSamplePrior(samplePrior);      fgsScore.setStructurePrior(structurePrior);      IndependenceTest test=new IndTestScore(fgsScore);      fgs=new TsGFci(test,fgsScore);    } else {      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");    }  } else {    System.out.println("No viable input.");  }  fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  fgs.setVerbose(true);  Graph graph=fgs.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  this.topGraphs=new ArrayList<>(getTopGraphs());  if (topGraphs.isEmpty()) {    topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  this.topGraphs=new ArrayList<>(getTopGraphs());  if (this.topGraphs.isEmpty()) {    this.topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  setIndex(topGraphs.size() - 1);}  }
class C{  public GaussianDensityLayerPlot(Plot p,int ax,double[] sigma){  super("Gauss quantile of " + p.name,p);  if (sigma != null)   PArray.checkLength(sigma,p.getData().length);  this.sigma=sigma;  axis=ax;  if (sigma != null) {    gausspdf_sigma=new float[sigma.length][4];    for (int i=0; i < gausspdf_sigma.length; i++) {      for (int j=0; j < 4; j++)       gausspdf_sigma[i][j]=(float)(Math.exp(-(j * j) / (2.0 * sigma[i] * sigma[i])));    }  }}  }
class C{  public boolean has(String key){  return this.json.has(key);}  }
class C{  final void addValue(String value){  m_Values=(FastVector)m_Values.copy();  m_Hashtable=(Hashtable)m_Hashtable.clone();  forceAddValue(value);}  }
class C{  MessageInstanceImpl(String sourceId,Date date,String messageId,String messageText,Severity severity,int count){  this(sourceId,date,messageId,messageText,severity);  m_count=count;}  }
class C{  public void addStatementEventListener(StatementEventListener listener){synchronized (this.statementEventListeners) {    this.statementEventListeners.put(listener,listener);  }}  }
class C{  public static double pdf(double val,int v){  return Math.exp(GammaDistribution.logGamma((v + 1) * .5) - GammaDistribution.logGamma(v * .5)) * (1 / Math.sqrt(v * Math.PI)) * Math.pow(1 + (val * val) / v,-((v + 1) * .5));}  }
class C{  public String toString(){  return v + "->" + w+ " "+ String.format("%5.2f",weight);}  }
class C{  public IntHashMap(){  this(20,0.75f);}  }
class C{  public void moveEvent(MouseEvent e){  Display d=(Display)e.getSource();  d.getAbsoluteCoordinate(e.getPoint(),m_tmp);  for (int i=0; i < m_layouts.length; i++)   m_layouts[i].setLayoutAnchor(m_tmp);  runAction(e);}  }
class C{  private synchronized void access(long key,int hash){  Entry<V> e=find(key,hash);  if (e == null || e.value == null) {    return;  }  if (e.isHot()) {    if (e != stack.stackNext) {      if (stackMoveDistance == 0 || stackMoveCounter - e.topMove > stackMoveDistance) {        boolean wasEnd=e == stack.stackPrev;        removeFromStack(e);        if (wasEnd) {          pruneStack();        }        addToStack(e);      }    }  } else {    removeFromQueue(e);    if (e.stackNext != null) {      removeFromStack(e);      convertOldestHotToCold();    } else {      addToQueue(queue,e);    }    addToStack(e);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public Position(){}  }
class C{  public void deprecated(String msg,Object... params){  logger.debug(msg,params);}  }
class C{  public void displayState(){  log.debug("displayState");  if (namedMemory == null) {    return;  }  if (getMemory().getValue() == null) {    return;  }  Integer num=null;  if (getMemory().getValue().getClass() == String.class) {    try {      num=Integer.valueOf((String)getMemory().getValue());    } catch (    NumberFormatException e) {      return;    }  } else   if (getMemory().getValue().getClass() == Integer.class) {    num=((Number)getMemory().getValue()).intValue();  } else   if (getMemory().getValue().getClass() == Float.class) {    num=Math.round((Float)getMemory().getValue());    log.debug("num= {}",num);  } else {    return;  }  int n=num;  if (n > _max) {    num=_max;  } else   if (n < _min) {    num=_min;  }  spinner.setValue(num);}  }
class C{  public void endVisit(VariableDeclarationFragment node){}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  @SuppressWarnings("UnusedReturnValue") private boolean executeEffect(@NonNull DecoEvent event){  if (event.getEventType() != DecoEvent.EventType.EVENT_EFFECT) {    return false;  }  if (mChartSeries == null) {    return false;  }  if (event.getIndexPosition() < 0) {    Log.e(TAG,"EffectType " + event.getEventType().toString() + " must specify valid data series index");    return false;  }  if (event.getEffectType() == DecoDrawEffect.EffectType.EFFECT_SPIRAL_EXPLODE) {    for (int i=0; i < mChartSeries.size(); i++) {      ChartSeries chartSeries=mChartSeries.get(i);      if (i != event.getIndexPosition()) {        chartSeries.startAnimateHideShow(event,false);      } else {        chartSeries.startAnimateEffect(event);      }    }    return true;  }  for (int i=0; i < mChartSeries.size(); i++) {    if ((event.getIndexPosition() == i) || event.getIndexPosition() < 0) {      ChartSeries chartSeries=mChartSeries.get(i);      chartSeries.startAnimateEffect(event);    }  }  return true;}  }
class C{  public Socket createSocket(String host,int port) throws IOException {  return new Socket(host,port,bindAddress,0);}  }
class C{  private void clearAtpTab(){  m_modelAtp=new ListModelTable();  m_tableAtp.setRowCount(0);  m_tableAtp.setModel(m_modelAtp);}  }
class C{  public Builder textSize(int textSize){  this.textSize=textSize;  return this;}  }
class C{  public boolean defineMethodToString(SymbolResolver resolver){  return isDefiningMethod("toString",Collections.emptyList(),resolver);}  }
class C{  public JInternalFrame(String title){  this(title,false,false,false,false);}  }
class C{  public SSLHandshakeException(Throwable cause){  super(cause);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_2__CONSTRAINT_EXPR_1:    return ((InternalEList<?>)getConstraintExpr_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testToEngineeringStringZeroNegExponent(){  String a="0.0E-16";  BigDecimal aNumber=new BigDecimal(a);  String result="0.00E-15";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public void loginWithEmail(final String email,final String password,final ResultListener listener){  login(null,email,password,listener);}  }
class C{  protected boolean doDamage(final RPEntity entity){  float attack;  float defense;  if (entity.getHP() == 0) {    return false;  }  if (entity.isGhost()) {    return true;  }  attack=damage;  defense=calculateDefense(entity);  int actualDamage=Math.round(Math.max(1,attack - defense));  actualDamage=Math.min(actualDamage,entity.getHP());  if (actualDamage != 0) {    entity.onDamaged(this,actualDamage);  }  return true;}  }
class C{  public void destroyScene(){  clearAnimations();  clearCameras();  clearLights();  clearPlugins();  clearChildren();  clearFrameCallbacks();}  }
class C{  public static Validator<String> disallowedChars(BiFunction<String,StringDisallowedCharsValidator,? extends IllegalArgumentException> exception,char... chars){  return disallowedChars(chars,exception);}  }
class C{  public InternalFunctionInvocationTargetException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException {  try {    final long startTime=TimeUtils.getMonotonicTime();    final int items=messages.size();    final long chunkSize=items / 10;    final MqttMessageLogParser parser=new MqttMessageLogParser();    final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>();    long item=0;    long reportAt=1;    for (int i=0; i < items; i++) {      final String message=messages.get(i);      if (progress != null) {        if (progress.isCancelled()) {          logger.info("Task cancelled!");          return null;        }        item++;        if (item % 1000 == 0) {          progress.update(current + item,max);        }      }      if ((i > 0) && (i == (chunkSize * reportAt))) {        final long currentTime=TimeUtils.getMonotonicTime();        final long timeTaken=currentTime - startTime;        final long totalTimeExpected=timeTaken * items / i;        if (timeTaken > 1000) {          logger.info("Processed {}%, estimated time left = {}s",reportAt * 10,(totalTimeExpected - timeTaken) / 1000);        }        reportAt++;      }      try {        list.add(parser.parse(message));      } catch (      XMLException e) {        logger.error("Can't process message " + message,e);      }    }    logger.info("Message audit log - parsed {} XML messages",list.size());    return list;  } catch (  XMLException e) {    throw new SpyException("Can't parse the message audit log file",e);  }}  }
class C{  public void manipulatePixel(Image image,int x,int y,ColorRGBA color,boolean write){  ByteBuffer buf=image.getData(0);  int width=image.getWidth();  int position=(y * width + x) * 4;  if (position > buf.capacity() - 1 || position < 0)   return;  if (write) {switch (image.getFormat()) {case RGBA8:      buf.position(position);    buf.put(float2byte(color.r)).put(float2byte(color.g)).put(float2byte(color.b)).put(float2byte(color.a));  return;case ABGR8:buf.position(position);buf.put(float2byte(color.a)).put(float2byte(color.b)).put(float2byte(color.g)).put(float2byte(color.r));return;default :throw new UnsupportedOperationException("Image format: " + image.getFormat());}} else {switch (image.getFormat()) {case RGBA8:buf.position(position);color.set(byte2float(buf.get()),byte2float(buf.get()),byte2float(buf.get()),byte2float(buf.get()));return;case ABGR8:buf.position(position);float a=byte2float(buf.get());float b=byte2float(buf.get());float g=byte2float(buf.get());float r=byte2float(buf.get());color.set(r,g,b,a);return;default :throw new UnsupportedOperationException("Image format: " + image.getFormat());}}}  }
class C{  public SGraphSwitch(){  if (modelPackage == null) {    modelPackage=SGraphPackage.eINSTANCE;  }}  }
class C{  public static Builder builder(){  return new Builder(new UnregisterResponse());}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public boolean addCallOnClickToInitLayout_ID(String strId,String onClickSignature){  logger.info("addCallOnClickToInitLayout_ID {} ",strId);  Integer intId=mNumberToIDMap.inverse().get(strId);  if (intId == null) {    logger.warn("No matching numeric Id for {} ",strId);    return false;  }  UISootObject uiObj=mUiObjectTable.get(intId);  if (uiObj == null || uiObj.sootField == null) {    logger.warn("findViewByID_{} is NULL ",String.format("%08x",intId));    return false;  }  SootMethod method=null;  if (onClickSignature.contains(":")) {    String className=onClickSignature.substring(1,onClickSignature.indexOf(":"));    try {      SootClass clz=Scene.v().getSootClass(className);      method=SootUtils.resolveCallbackMethod(clz,onClickSignature);    } catch (    Exception ex) {      logger.warn("onClick handler {} is not available",onClickSignature);      return false;    }  } else {    List<SootMethod> matches=SootUtils.matchApplicationMethodName(onClickSignature);    if (matches.size() > 0)     method=matches.get(0);  }  if (method == null) {    logger.warn("Cannot locate method {} ",onClickSignature);    return false;  }  logger.info("method {} OK for onclick",method);  Chain<Unit> units=mInitLayoutBody.getUnits();  String viewLocalName="_$viewLocal" + UNIQUE_ID;  Local viewLocal=Jimple.v().newLocal(viewLocalName,RefType.v("android.view.View"));  mInitLayoutBody.getLocals().add(viewLocal);  FieldRef fieldRef=Jimple.v().newStaticFieldRef(uiObj.sootField.makeRef());  Stmt stmt=Jimple.v().newAssignStmt(viewLocal,fieldRef);  units.add(stmt);  SootClass listenerClass=method.getDeclaringClass();  Local castLocal=Jimple.v().newLocal("_$castLocal" + UNIQUE_ID++,RefType.v(listenerClass));  mInitLayoutBody.getLocals().add(castLocal);  Stmt castStmt=Jimple.v().newAssignStmt(castLocal,Jimple.v().newCastExpr(mArgContext,RefType.v(listenerClass)));  units.add(castStmt);  Expr invokeExpr=Jimple.v().newVirtualInvokeExpr(castLocal,method.makeRef(),viewLocal);  stmt=Jimple.v().newInvokeStmt(invokeExpr);  units.add(stmt);  return true;}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int numPenalties=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      byte[] arrayY=array[y];      if (x + 6 < width && arrayY[x] == 1 && arrayY[x + 1] == 0 && arrayY[x + 2] == 1 && arrayY[x + 3] == 1 && arrayY[x + 4] == 1 && arrayY[x + 5] == 0 && arrayY[x + 6] == 1 && (isWhiteHorizontal(arrayY,x - 4,x) || isWhiteHorizontal(arrayY,x + 7,x + 11))) {        numPenalties++;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && (isWhiteVertical(array,x,y - 4,y) || isWhiteVertical(array,x,y + 7,y + 11))) {        numPenalties++;      }    }  }  return numPenalties * N3;}  }
class C{  public static Jerry jerry(char[] content){  return jerry().parse(content);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sin(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void closeWrite() throws IOException {  _next.closeWrite();}  }
class C{  protected boolean isAllowedToDequeueOneToOneChatMessage(ContactId contact){  Capabilities remoteCapabilities=mContactManager.getContactCapabilities(contact);  if (!remoteCapabilities.isImSessionSupported()) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue one-to-one chat messages right now as IM session capabilities are not supported for remote contact ").append(contact).append(" and IM_CAP_ALWAYS_ON is false!").toString());    }    return false;  }  return true;}  }
class C{  public void scale(VisualizationServer<?,?> vv,float amount,Point2D from){  MutableTransformer viewTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW);  viewTransformer.scale(amount,amount,from);  vv.repaint();}  }
class C{  public void incrementRow(Assignment condition,Value head,double prob){  if (table.containsKey(condition)) {    table.get(condition).incrementRow(head,prob);  } else {    addRow(condition,head,prob);  }}  }
class C{  @Nullable public synchronized V put(K key,V value){  V oldValue=mMap.remove(key);  mSizeInBytes-=getValueSizeInBytes(oldValue);  mMap.put(key,value);  mSizeInBytes+=getValueSizeInBytes(value);  return oldValue;}  }
class C{  public void testFullRemoval(){  int numItems=1000;  BasicQuadTree<Integer> tree=new BasicQuadTree<Integer>(5,Sector.FULL_SPHERE,null);  for (int i=1; i <= numItems; i++) {    tree.add(i,new double[]{i % 90,i % 180},Integer.toString(i));  }  assertEquals("Item count incorrect at start ",countItemsInTree(tree),numItems);  for (int i=numItems; i > 0; i--) {    tree.remove(i);    assertEquals("Item count incorrect ",countItemsInTree(tree),i - 1);  }}  }
class C{  public static String[] splitOptions(String quotedOptionString) throws Exception {  Vector<String> optionsVec=new Vector<String>();  String str=new String(quotedOptionString);  int i;  while (true) {    i=0;    while ((i < str.length()) && (Character.isWhitespace(str.charAt(i)))) {      i++;    }    str=str.substring(i);    if (str.length() == 0) {      break;    }    if (str.charAt(0) == '"') {      i=1;      while (i < str.length()) {        if (str.charAt(i) == str.charAt(0)) {          break;        }        if (str.charAt(i) == '\\') {          i+=1;          if (i >= str.length()) {            throw new Exception("String should not finish with \\");          }        }        i+=1;      }      if (i >= str.length()) {        throw new Exception("Quote parse error.");      }      String optStr=str.substring(1,i);      optStr=unbackQuoteChars(optStr);      optionsVec.addElement(optStr);      str=str.substring(i + 1);    } else {      i=0;      while ((i < str.length()) && (!Character.isWhitespace(str.charAt(i)))) {        i++;      }      String optStr=str.substring(0,i);      optionsVec.addElement(optStr);      str=str.substring(i);    }  }  String[] options=new String[optionsVec.size()];  for (i=0; i < optionsVec.size(); i++) {    options[i]=optionsVec.elementAt(i);  }  return options;}  }
class C{  public static final File URLToFile(URL url) throws MalformedURLException {  if (!"file".equals(url.getProtocol()))   throw new MalformedURLException("URL protocol must be 'file'.");  return new File(URIToFilename(url.getFile()));}  }
class C{  protected AbstractXYItemLabelGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){  this(formatString,NumberFormat.getInstance(),NumberFormat.getInstance());  this.xDateFormat=xFormat;  this.yDateFormat=yFormat;}  }
class C{  public Long zremrangeByScore(final byte[] key,final double start,final double end){  return zremrangeByScore(key,toByteArray(start),toByteArray(end));}  }
class C{  protected int consumeAvailableRecords(Consumer<SourceRecord> recordConsumer){  List<SourceRecord> records=new LinkedList<>();  consumedLines.drainTo(records);  if (recordConsumer != null) {    records.forEach(recordConsumer);  }  return records.size();}  }
class C{  protected FlyToFlyViewAnimator createFlyToLookAtAnimator(BasicFlyView view,Position lookAtPosition,Angle heading,Angle pitch,double range,long timeToMove,int altitudeMode){  BasicOrbitView targetView=new BasicOrbitView();  targetView.setGlobe(view.getGlobe());  targetView.setCenterPosition(lookAtPosition);  targetView.setHeading(heading);  targetView.setPitch(pitch);  targetView.setZoom(range);  Position beginEyePosition=view.getCurrentEyePosition();  Position endEyePosition=targetView.getCurrentEyePosition();  FlyToFlyViewAnimator.OnSurfacePositionAnimator centerAnimator=new FlyToFlyViewAnimator.OnSurfacePositionAnimator(view.getGlobe(),new ScheduledInterpolator(timeToMove),beginEyePosition,endEyePosition,ViewPropertyAccessor.createEyePositionAccessor(view),altitudeMode);  FlyToFlyViewAnimator.FlyToElevationAnimator elevAnimator=new FlyToFlyViewAnimator.FlyToElevationAnimator(view,view.getGlobe(),beginEyePosition.getElevation(),endEyePosition.getElevation(),beginEyePosition,endEyePosition,WorldWind.ABSOLUTE,ViewPropertyAccessor.createElevationAccessor(view));  AngleAnimator headingAnimator=new AngleAnimator(new ScheduledInterpolator(timeToMove),view.getHeading(),heading,ViewPropertyAccessor.createHeadingAccessor(view));  AngleAnimator pitchAnimator=new AngleAnimator(new ScheduledInterpolator(timeToMove),view.getPitch(),pitch,ViewPropertyAccessor.createPitchAccessor(view));  return new FlyToLookAtAnimator(new ScheduledInterpolator(timeToMove),targetView,lookAtPosition,altitudeMode,centerAnimator,elevAnimator,headingAnimator,pitchAnimator,null);}  }
class C{  public boolean isShrinkAllColumns(){  return mShrinkAllColumns;}  }
class C{  private void enlageIfNeeded(int i){  while (end + i > array.length)   array=Arrays.copyOf(array,Math.max(array.length * 2,8));}  }
class C{  public void reload(boolean loadHeaders){  this.loadHeaders=loadHeaders;  try {    load(file);  } catch (  Exception e) {    Bukkit.getLogger().log(Level.WARNING,"failed to reload file",e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.CONSTRAINT;}  }
class C{  public static char[] subarray(char[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_CHAR_ARRAY;  }  char[] subarray=new char[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public boolean isWritable(){  return (!readOnly && writeLock.isLocked());}  }
class C{  public boolean execute(){  DataGenerator generator;  boolean result;  String relName;  String cname;  String cmd;  result=true;  generator=(DataGenerator)m_GeneratorEditor.getValue();  relName=generator.getRelationName();  cname=generator.getClass().getName().replaceAll(".*\\.","");  cmd=generator.getClass().getName();  if (generator instanceof OptionHandler)   cmd+=" " + Utils.joinOptions(((OptionHandler)generator).getOptions());  try {    m_Log.logMessage("Started " + cname);    m_Log.logMessage("Command: " + cmd);    m_Output=new StringWriter();    generator.setOutput(new PrintWriter(m_Output));    DataGenerator.makeData(generator,generator.getOptions());    m_Instances=new Instances(new StringReader(getOutput()));    m_Log.logMessage("Finished " + cname);  } catch (  Exception e) {    e.printStackTrace();    JOptionPane.showMessageDialog(this,"Error generating data:\n" + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);    m_Instances=null;    m_Output=new StringWriter();    result=false;  }  generator.setRelationName(relName);  return result;}  }
class C{  protected Object createLookupItem(PsiElement candidate){  return null;}  }
class C{  public boolean remove(Envelope itemEnv,Object item){  Envelope posEnv=ensureExtent(itemEnv,minExtent);  return root.remove(posEnv,item);}  }
class C{  private void validateReplicationGroupDevices(Table<URI,String,List<Volume>> storageRgToVolumes){  for (  Cell<URI,String,List<Volume>> cell : storageRgToVolumes.cellSet()) {    List<Volume> volumeList=cell.getValue();    boolean metaDevices=false;    boolean nonMetaDevices=false;    for (    Volume vol : volumeList) {      if (vol.getMetaMemberCount() != null && vol.getMetaMemberCount() > 0) {        metaDevices=true;      } else {        nonMetaDevices=true;      }    }    if (metaDevices && nonMetaDevices) {      throw APIException.badRequests.cgSnapshotNotAllowedMixedDevices(cell.getColumnKey());    }  }}  }
class C{  public String toString(){  if (exception != null) {    return exception.toString();  } else {    return super.toString();  }}  }
class C{  protected PreparedStatement prepareStatement(Connection conn,String sql) throws SQLException {  return conn.prepareStatement(sql);}  }
class C{  @Override public void failedImage(String title,String text,String extra){  Notification notification=new NotificationCompat.Builder(this).setTicker(title).setContentTitle(title).setContentText(text).setStyle(new NotificationCompat.BigTextStyle().setBigContentTitle(title).bigText(text).setSummaryText(extra)).setSmallIcon(R.drawable.ic_action_error).setWhen(System.currentTimeMillis()).setAutoCancel(true).setContentIntent(PendingIntent.getActivity(this,0,new Intent(this,MainActivity.class),0)).build();  notificationManager.notify(DFG_NOTIFICATION_ID,notification);}  }
class C{  public HeaderCardBuilder card(IFitsHeader key){  return new HeaderCardBuilder(this,key);}  }
class C{  static private String orHyphen(String value){  if (value == null || value.isEmpty()) {    return "-";  } else {    return value;  }}  }
class C{  public int size(){  int size=0;  for (  List<V> value : map.values()) {    size+=value.size();  }  return size;}  }
class C{  public ECIESKeyEncapsulation(DerivationFunction kdf,SecureRandom rnd,boolean cofactorMode,boolean oldCofactorMode,boolean singleHashMode){  this.kdf=kdf;  this.rnd=rnd;  this.CofactorMode=cofactorMode;  this.OldCofactorMode=oldCofactorMode;  this.SingleHashMode=singleHashMode;}  }
class C{  private static String toStringBits_0_32_bitPosAlreadyChecked(final int bitSize,final int bits,final int firstBitPos,final int lastBitPosExcl,final boolean bigEndian,final boolean padding){  final int bitSizeM1=bitSize - 1;  final int lastBitPos=lastBitPosExcl - 1;  if (padding) {    final int nbrOfChars=bitSize;    final char[] chars=new char[nbrOfChars];    int bitIndex=bitSizeM1;    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      while (bitIndex > lastBitIndex) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitIndex) {        chars[bitSizeM1 - bitIndex]=(char)('0' + (bits >> bitIndex & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }    } else {      while (bitIndex > lastBitPos) {        chars[bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitPos) {        chars[bitIndex]=(char)('0' + (bits >> bitIndex & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitIndex]='_';        --bitIndex;      }    }    return new String(chars);  } else {    final int nbrOfChars=lastBitPosExcl - firstBitPos;    final char[] chars=new char[nbrOfChars];    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      int bitIndex=lastBitIndex;      while (bitIndex >= firstBitIndex) {        chars[lastBitIndex - bitIndex]=(char)('0' + (bits >> bitIndex & 1));        --bitIndex;      }    } else {      int bitIndex=lastBitPos;      while (bitIndex >= firstBitPos) {        chars[bitIndex - firstBitPos]=(char)('0' + (bits >> bitIndex & 1));        --bitIndex;      }    }    return new String(chars);  }}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (valueToConvert instanceof Date) {    if (null != valueToConvert) {      return m_dateFormatter.format(valueToConvert);    }  }  throw new IllegalArgumentException("The source object must be of type:java.util.Date");}  }
class C{  public static void process(SsaMethod ssaMeth){  new PhiTypeResolver(ssaMeth).run();}  }
class C{  public DagIterator(Graph pattern){  for (  Edge edge : pattern.getEdges()) {    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {      continue;    }    throw new IllegalArgumentException("The graph may consist only of " + "directed and undirected edges: " + edge);  }  decoratedGraphs.add(new DecoratedGraph(pattern));}  }
class C{  private SolrZkClient electNewOverseer(String address) throws KeeperException, InterruptedException, IOException {  SolrZkClient zkClient=new SolrZkClient(address,TIMEOUT);  ZkStateReader reader=new ZkStateReader(zkClient);  LeaderElector overseerElector=new LeaderElector(zkClient);  UpdateShardHandler updateShardHandler=new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);  Overseer overseer=new Overseer(new HttpShardHandlerFactory().getShardHandler(),updateShardHandler,"/admin/cores",reader,null,new CloudConfig.CloudConfigBuilder("127.0.0.1",8983,"solr").build());  overseer.close();  ElectionContext ec=new OverseerElectionContext(zkClient,overseer,address.replaceAll("/","_"));  overseerElector.setup(ec);  overseerElector.joinElection(ec,false);  reader.close();  return zkClient;}  }
class C{  private boolean showAppMenu(View view,boolean startDragging){  if (!mMenuHandler.isAppMenuShowing() && mMenuHandler.showAppMenu(view,startDragging)) {    if (!startDragging)     RecordUserAction.record("MobileUsingMenuBySwButtonTap");    if (mOnAppMenuShownListener != null) {      mOnAppMenuShownListener.run();    }    return true;  }  return false;}  }
class C{  public void configure() throws CoreException {  IProjectDescription desc=project.getDescription();  ICommand[] commands=desc.getBuildSpec();  boolean tlaBuilderFound=false;  boolean pcalBuilderFound=false;  int numberOfBuildersToInstall=2;  for (int i=0; i < commands.length; ++i) {    String builderName=commands[i].getBuilderName();    if (builderName.equals(TLAParsingBuilder.BUILDER_ID)) {      tlaBuilderFound=true;      numberOfBuildersToInstall--;    } else     if (builderName.equals(PCalDetectingBuilder.BUILDER_ID)) {      pcalBuilderFound=true;      numberOfBuildersToInstall--;    }    if (tlaBuilderFound && pcalBuilderFound) {      return;    }  }  ICommand[] newCommands=new ICommand[commands.length + numberOfBuildersToInstall];  System.arraycopy(commands,0,newCommands,0,commands.length);  int position=commands.length;  if (!tlaBuilderFound) {    ICommand command=desc.newCommand();    command.setBuilderName(TLAParsingBuilder.BUILDER_ID);    newCommands[position]=command;    position++;  }  if (!pcalBuilderFound) {    ICommand command=desc.newCommand();    command.setBuilderName(PCalDetectingBuilder.BUILDER_ID);    newCommands[position]=command;  }  desc.setBuildSpec(newCommands);  project.setDescription(desc,null);  Activator.getDefault().logDebug("Nature added");}  }
class C{  @RequestMapping(value="/api/greetings/{id}/send",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> sendGreeting(@PathVariable("id") final Long id,@RequestParam(value="wait",defaultValue="false") final boolean waitForAsyncResult){  logger.info("> sendGreeting");  Greeting greeting;  try {    greeting=greetingService.findOne(id);    if (greeting == null) {      logger.info("< sendGreeting");      return new ResponseEntity<Greeting>(HttpStatus.NOT_FOUND);    }    if (waitForAsyncResult) {      final Future<Boolean> asyncResponse=emailService.sendAsyncWithResult(greeting);      final boolean emailSent=asyncResponse.get();      logger.info("- greeting email sent? {}",emailSent);    } else {      emailService.sendAsync(greeting);    }  } catch (  ExecutionException|InterruptedException ex) {    logger.error("A problem occurred sending the Greeting.",ex);    return new ResponseEntity<Greeting>(HttpStatus.INTERNAL_SERVER_ERROR);  }  logger.info("< sendGreeting");  return new ResponseEntity<Greeting>(greeting,HttpStatus.OK);}  }
class C{  public void startEventLog(String tenant,int size) throws ClientException, ClientProtocolException, WebApplicationException, HttpException, IOException {  startEventLog(tenant,Integer.valueOf(size));}  }
class C{  void reinitialize(File old,File now){  if (contains(old)) {  }}  }
class C{  public V call(final Object arguments){  return call(new Object[]{arguments});}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public final void addArgument(final DebugMessageArgument argument){  arguments.add(argument);}  }
class C{  public void recordEndTime(){  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());  _log.info("Request response time: {} ms",msDiff);  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);  updateMinMaxReqRspMs(msDiff);  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {    _alertLog.warn(MessageFormat.format("Request took an unusually long time to complete: {0}ms",msDiff));  }  _currentRequestStartTime.remove();}  }
class C{  public DSubjectKeyIdentifier(JDialog parent,PublicKey subjectPublicKey){  super(parent);  setTitle(res.getString("DSubjectKeyIdentifier.Title"));  this.subjectPublicKey=subjectPublicKey;  initComponents();}  }
class C{  private Object read(InputNode node,Instance value,Class real) throws Exception {  Schema schema=context.getSchema(real);  Caller caller=schema.getCaller();  Builder builder=read(schema,value);  Object source=builder.read(node);  caller.validate(source);  caller.commit(source);  value.setInstance(source);  return readResolve(node,source,caller);}  }
class C{  public void testCountTableSql(){  final String expected="SELECT COUNT(*) FROM MockModel";  String actual=new Select().from(MockModel.class).toCountSql();  assertEquals(expected,actual);}  }
class C{  void copy(){  arraycopy(toCopy.currentMessage.toByteArray(),0,toCopy.currentPosition);  toCopy=null;}  }
class C{  public boolean isAnimated(){  return null == animated ? _animated : animated.get();}  }
class C{  public void keyboardSupportEnabled(Activity activity,boolean enable){  if (getContent() != null && getContent().getChildCount() > 0) {    if (mKeyboardUtil == null) {      mKeyboardUtil=new KeyboardUtil(activity,getContent().getChildAt(0));      mKeyboardUtil.disable();    }    if (enable) {      mKeyboardUtil.enable();    } else {      mKeyboardUtil.disable();    }  }}  }
class C{  public final static String formatProtocolVersion(final ProtocolVersion version,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.appendProtocolVersion(null,version).toString();}  }
class C{  public FixedSizeButton(int size){  this(size,null);  if (size <= 0) {    throw new IllegalArgumentException("wrong size: " + size);  }}  }
class C{  public span addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Ignore public static ShortArray instance(short[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public static ClassLoader resolveServerClassLoader(Map<String,?> env,MBeanServer mbs) throws InstanceNotFoundException {  if (env == null)   return Thread.currentThread().getContextClassLoader();  Object loader=env.get(DEFAULT_CLASS_LOADER);  Object name=env.get(DEFAULT_CLASS_LOADER_NAME);  if (loader != null && name != null) {    final String msg="Only one of " + DEFAULT_CLASS_LOADER + " or "+ DEFAULT_CLASS_LOADER_NAME+ " should be specified.";    throw new IllegalArgumentException(msg);  }  if (loader == null && name == null)   return Thread.currentThread().getContextClassLoader();  if (loader != null) {    if (loader instanceof ClassLoader) {      return (ClassLoader)loader;    } else {      final String msg="ClassLoader object is not an instance of " + ClassLoader.class.getName() + " : "+ loader.getClass().getName();      throw new IllegalArgumentException(msg);    }  }  ObjectName on;  if (name instanceof ObjectName) {    on=(ObjectName)name;  } else {    final String msg="ClassLoader name is not an instance of " + ObjectName.class.getName() + " : "+ name.getClass().getName();    throw new IllegalArgumentException(msg);  }  if (mbs == null)   throw new IllegalArgumentException("Null MBeanServer object");  return mbs.getClassLoader(on);}  }
class C{  public ScaledGraphics(Graphics g){  graphics=g;  localFont=g.getFont();  localLineWidth=g.getLineWidth();}  }
class C{  private void createNFSACL(UnManagedNFSShareACL origACL,List<NFSShareACL> shareACLList,FileShare fileshare){  NFSShareACL shareACL=new NFSShareACL();  shareACL.setFileSystemPath(origACL.getFileSystemPath());  shareACL.setDomain(origACL.getDomain());  shareACL.setType(origACL.getType());  shareACL.setPermissionType(origACL.getPermissionType());  String user=origACL.getUser();  if (user != null) {    shareACL.setUser(user);  }  String aclPermissions=origACL.getPermissions();  if (!StringUtils.isEmpty(aclPermissions)) {    StringBuilder permissionText=new StringBuilder();    boolean isFirstPermissionSet=false;    for (    String tempPermission : aclPermissions.toLowerCase().split(",")) {switch (tempPermission) {case "read":        tempPermission=FileControllerConstants.NFS_FILE_PERMISSION_READ;      break;case "write":    tempPermission=FileControllerConstants.NFS_FILE_PERMISSION_WRITE;  break;case "execute":tempPermission=FileControllerConstants.NFS_FILE_PERMISSION_EXECUTE;break;case "fullcontrol":tempPermission=FileControllerConstants.NFS_FILE_PERMISSION_FULLCONTROL;break;}if (!isFirstPermissionSet) {permissionText.append(tempPermission);isFirstPermissionSet=true;} else {permissionText.append("," + tempPermission);}}shareACL.setPermissions(permissionText.toString());} else {shareACL.setPermissions("");}shareACL.setFileSystemId(fileshare.getId());shareACL.setId(URIUtil.createId(NFSShareACL.class));shareACLList.add(shareACL);_logger.info("share ACLs details {}",shareACL.toString());}  }
class C{  public void render(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.frameNumber != dc.getFrameTimeStamp()) {    this.determineLabelLocation(dc);    this.frameNumber=dc.getFrameTimeStamp();  }  this.drawLabel(dc);}  }
class C{  private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  public RawAudioRecorder(int audioSource,int sampleRate){  super(audioSource,sampleRate);  try {    int bufferSize=getBufferSize();    int framePeriod=bufferSize / (2 * RESOLUTION_IN_BYTES * CHANNELS);    createRecorder(audioSource,sampleRate,bufferSize);    createBuffer(framePeriod);    setState(State.READY);  } catch (  Exception e) {    if (e.getMessage() == null) {      handleError("Unknown error occurred while initializing recorder");    } else {      handleError(e.getMessage());    }  }}  }
class C{  public final void push(int value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  @Override public void activate(){  scriptHelper=getSlingScriptHelper();  akismetService=scriptHelper.getService(AkismetService.class);  if (akismetService != null) {    apiKey=isAuthorable() ? akismetService.getApiKey() : PublickConstants.PASSWORD_REPLACEMENT;    domainName=akismetService.getDomainName();    enabled=akismetService.getEnabled();    akismetService.verifyKey();  }}  }
class C{  public AbortException(String message){  super(message);}  }
class C{  private static byte divmod(byte[] number,int firstDigit,int base,int divisor){  int remainder=0;  for (int i=firstDigit; i < number.length; i++) {    int digit=(int)number[i] & 0xFF;    int temp=remainder * base + digit;    number[i]=(byte)(temp / divisor);    remainder=temp % divisor;  }  return (byte)remainder;}  }
class C{  public final synchronized void stopSearch(){  if (!humansTurn() && (computerPlayer != null))   computerPlayer.moveNow();}  }
class C{  @Override public boolean isDefault(){  return false;}  }
class C{  private static String reasonToString(int reason){  if ((reason > 0) && (reason < REASON_STRINGS.length)) {    return REASON_STRINGS[reason];  }  return "Unknown reason " + reason;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  JFontChooser fontChooser=new JFontChooser(controller);  fontChooser.setSelectedFont(showPreferencesPanel.getSelectedFont());  int result=fontChooser.showDialog(showPreferencesPanel);  Font font=fontChooser.getSelectedFont();  if (result == JFontChooser.OK_OPTION) {    showPreferencesPanel.setSelectedFont(font);  }}  }
class C{  public Bagging(Classifier baseClassifier,int extraSamples,boolean simultaniousTraining,int rounds,Random random){  this(extraSamples,simultaniousTraining,rounds,random);  this.baseClassifier=baseClassifier;}  }
class C{  public Document authenticate(String tenant,AuthenticationFilter<AuthnRequestState> authenticator){  Document retval=null;  log.debug("authenticate, tenant " + tenant);  Validate.notNull(this.idmAccessor);  Validate.notNull(this.authnRequest);  Validate.notNull(authenticator);  try {    this.idmAccessor.setTenant(tenant);    authenticator.authenticate(this);  } catch (  SamlServiceException e) {    log.error("Caught Saml Service Exception from authenticate " + e.toString());    if (this.getValidationResult() == null || this.getValidationResult().isValid()) {      this.validationResult=new ValidationResult(HttpServletResponse.SC_UNAUTHORIZED,"Unauthorized",null);    }    return null;  }catch (  Exception e) {    log.error("Caught Exception from authenticate " + e.toString());    if (this.getValidationResult() == null || this.getValidationResult().isValid()) {      this.validationResult=new ValidationResult(OasisNames.RESPONDER);    }    return null;  }  if (this.getPrincipalId() == null || this.getIdentityFormat() == null || this.getSessionId() == null) {    return null;  }  try {    if (!this.isProxying) {      this.idmAccessor.setTenant(tenant);      retval=createToken();    }  } catch (  SamlServiceException e) {    log.error("Caught Saml Service Exception in creating token." + e);    this.validationResult=new ValidationResult(OasisNames.RESPONDER);  }catch (  com.vmware.identity.saml.SystemException e) {    log.error("Caught SystemException in creating token. ",e);    if (e.getCause() instanceof IDMReferralException) {      this.validationResult=new ValidationResult(HttpServletResponse.SC_NOT_IMPLEMENTED,"LdapReferralNotSupported",null);    } else {      this.validationResult=new ValidationResult(OasisNames.RESPONDER);    }  }  return retval;}  }
class C{  @Override public int read(final byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  public String passwordTipText(){  return "The database password";}  }
class C{  public PointF addCommands(PDFPage cmds,Matrix transform,int mode){  if (shape != null) {    Path outline=new Path();    shape.transform(transform,outline);    cmds.addCommand(new PDFShapeCmd(outline,mode));  } else   if (page != null) {    cmds.addCommands(page,transform);  }  return advance;}  }
class C{  private void removeAllNodes(@Nullable Object key){  Iterators.clear(new ValueForKeyIterator(key));}  }
class C{  public void addMarker(final Marker MARKER){  if (null == MARKER)   return;  markers.add(MARKER);  Collections.sort(markers,new MarkerComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public static void addNewDatabase(final JTree projectTree){  final CDatabase newDatabase=new CDatabase("New Database",CJdbcDriverNames.jdbcPostgreSQLDriverName,"localhost","new_database","user","password","identity",false,false);  CDatabaseManager.instance().addDatabase(newDatabase);  CNodeExpander.setSelectionPath(projectTree,newDatabase);}  }
class C{  public void removeTreeCheckingListener(TreeCheckingListener x){  this.listenerList.remove(TreeCheckingListener.class,x);}  }
class C{  public HtmlCell td(String s){  HtmlCell c=td();  c.text(s);  return (c);}  }
class C{  public void disableDucking(){  if (mIsDuckingEnabled) {    mMANativeHelper.setGeneratePreview(true);    mIsDuckingEnabled=false;  }}  }
class C{  UnknownFunctionException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  public T textColor(int color){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setTextColor(color);  }  return self();}  }
class C{  public boolean forEachEntry(TFloatObjectProcedure<V> procedure){  float[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  public boolean isIdentity(){  return transform == null;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public Source<Character> basicMultilingualPlane(){  return Compositions.weightWithValues(Characters.ofCharacters(FIRST_CODEPOINT,LARGEST_DEFINED_BMP_CODEPOINT),LARGEST_DEFINED_BMP_CHARACTER,SMALLEST_CHARACTER);}  }
class C{  public MutableValueBuffer(final int nvalues,final byte[][] values){  if (values == null)   throw new IllegalArgumentException();  if (nvalues < 0 || nvalues >= values.length)   throw new IllegalArgumentException();  this.nvalues=nvalues;  this.values=values;}  }
class C{  public PlayerHasItemWithHimCondition(final String itemName){  this.itemName=checkNotNull(itemName);  this.amount=1;}  }
class C{  public static void resolveQueryModel(QueryModel queryModel){  CarbonMetadata.getInstance().addCarbonTable(queryModel.getTable());  CarbonTable carbonTable=queryModel.getTable();  String tableName=queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName();  for (  QueryDimension queryDimension : queryModel.getQueryDimension()) {    queryDimension.setDimension(carbonTable.getDimensionByName(tableName,queryDimension.getColumnName()));  }  for (  QueryDimension sortDimension : queryModel.getSortDimension()) {    sortDimension.setDimension(carbonTable.getDimensionByName(tableName,sortDimension.getColumnName()));  }  for (  QueryMeasure queryMeasure : queryModel.getQueryMeasures()) {    if (queryMeasure.getColumnName().equals("count(*)")) {      if (carbonTable.getMeasureByTableName(tableName).size() > 0 && !carbonTable.getMeasureByTableName(tableName).get(0).getColName().equals(CarbonCommonConstants.DEFAULT_INVISIBLE_DUMMY_MEASURE)) {        queryMeasure.setMeasure(carbonTable.getMeasureByTableName(tableName).get(0));      } else {        CarbonMeasure dummyMeasure=new CarbonMeasure(carbonTable.getDimensionByTableName(tableName).get(0).getColumnSchema(),0);        queryMeasure.setMeasure(dummyMeasure);      }    } else {      queryMeasure.setMeasure(carbonTable.getMeasureByName(tableName,queryMeasure.getColumnName()));    }  }  for (  DimensionAggregatorInfo dimAggInfo : queryModel.getDimAggregationInfo()) {    dimAggInfo.setDim(carbonTable.getDimensionByName(tableName,dimAggInfo.getColumnName()));  }}  }
class C{  public void SetName(final String name){  ObjectName=name;}  }
class C{  private double subspaceOutlierDegree(V queryObject,double[] center,long[] weightVector){  final int card=BitsUtil.cardinality(weightVector);  if (card == 0) {    return 0;  }  final SubspaceEuclideanDistanceFunction df=new SubspaceEuclideanDistanceFunction(weightVector);  double distance=df.distance(queryObject,DoubleVector.wrap(center));  distance/=card;  return distance;}  }
class C{  public BlockAmount decrement(){  return new BlockAmount(this.getValue() - 1);}  }
class C{  public static <A>double[] alphaPWM(A data,NumberArrayAdapter<?,A> adapter,final int nmom){  final int n=adapter.size(data);  final double[] xmom=new double[nmom];  double weight=1. / n;  for (int i=0; i < n; i++) {    final double val=adapter.getDouble(data,i);    xmom[0]+=weight * val;    for (int j=1; j < nmom; j++) {      weight*=(n - i - j + 1) / (n - j + 1);      xmom[j]+=weight * val;    }  }  return xmom;}  }
class C{  public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  public Matrix4 transpose(){  double[] m=this.m;  double tmp=m[1];  m[1]=m[4];  m[4]=tmp;  tmp=m[2];  m[2]=m[8];  m[8]=tmp;  tmp=m[3];  m[3]=m[12];  m[12]=tmp;  tmp=m[6];  m[6]=m[9];  m[9]=tmp;  tmp=m[7];  m[7]=m[13];  m[13]=tmp;  tmp=m[11];  m[11]=m[14];  m[14]=tmp;  return this;}  }
class C{  public void updateIconPlaceholders(){  updateIconPlaceholders(selectedEntries);  updateIconPlaceholders(unselectedEntries);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.449 -0400",hash_original_method="074E489B2A417933ABDEFACED52DF48F",hash_generated_method="6960C760423E0F71D5FE511DC9E279C9") public WildcardFileFilter(List<String> wildcards){  this(wildcards,null);}  }
class C{  public void newFunction(EditorState editorState,String name,int initial){  MathSequence currentField=editorState.getCurrentField();  int currentOffset=editorState.getCurrentOffset();  if ("^".equals(name) && currentOffset > 0) {    if (currentField.getArgument(currentOffset - 1) instanceof MathFunction) {      MathFunction function=(MathFunction)currentField.getArgument(currentOffset - 1);      if ("sqrt".equals(function.getName()) || "nroot".equals(function.getName()) || "frac".equals(function.getName())) {        currentField.delArgument(currentOffset - 1);        MathArray array=new MathArray(metaModel.getArray(MetaArray.REGULAR),1);        currentField.addArgument(currentOffset - 1,array);        MathSequence field=new MathSequence();        array.setArgument(0,field);        field.addArgument(0,function);      }    }  }  MathFunction function;  if (metaModel.isGeneral(name)) {    MetaFunction meta=metaModel.getGeneral(name);    function=new MathFunction(meta);  } else {    MetaFunction meta=metaModel.getFunction(name);    function=new MathFunction(meta);  }  for (int i=0; i < function.size(); i++) {    MathSequence field=new MathSequence();    function.setArgument(i,field);  }  if ("frac".equals(name)) {    argumentHelper.passArgument(editorState,function);  }  currentOffset=editorState.getCurrentOffset();  currentField.addArgument(currentOffset,function);  if (function.hasChildren()) {    cursorController.firstField(editorState,function.getArgument(initial));    editorState.setCurrentOffset(editorState.getCurrentField().size());  } else {    editorState.incCurrentOffset();  }}  }
class C{  public long numBits(){  return values.size64() * 2 + count.length * Long.SIZE + offset.length * (long)Long.SIZE + seed.length * (long)Long.SIZE;}  }
class C{  public void verifyAccountWithCode(String verificationCode,String signalingKey,int signalProtocolRegistrationId,boolean voice) throws IOException {  this.pushServiceSocket.verifyAccountCode(verificationCode,signalingKey,signalProtocolRegistrationId,voice);}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,Route> output,Reporter reporter) throws IOException {  List<Route> routeList=new ArrayList<Route>();  Set<String> outlinkUrls=new LinkedHashSet<String>();  int numValues=0;  while (values.hasNext()) {    ObjectWritable next=values.next();    Object value=next.get();    if (value instanceof Route) {      routeList.add((Route)WritableUtils.clone((Route)value,conf));    } else     if (value instanceof Text) {      String outlinkUrl=((Text)value).toString();      if (!outlinkUrls.contains(outlinkUrl)) {        outlinkUrls.add(outlinkUrl);      }    }    numValues++;    if (numValues % 100 == 0) {      reporter.progress();    }  }  Iterator<Route> routeIt=routeList.listIterator();  while (routeIt.hasNext()) {    Route route=routeIt.next();    routeIt.remove();    if (route.isFound()) {      output.collect(key,route);    } else {      String lookingFor=route.getLookingFor();      if (outlinkUrls.contains(lookingFor)) {        route.setFound(true);        output.collect(key,route);      } else       if (!last) {        for (        String outlink : outlinkUrls) {          output.collect(new Text(outlink),route);        }      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.STATE;}  }
class C{  public void addFormField(String name,String value){  writer.append("--" + boundary).append(LINE_BREAK);  writer.append("Content-Disposition: form-data; name=\"" + name + "\"").append(LINE_BREAK);  writer.append(LINE_BREAK);  writer.append(value).append(LINE_BREAK);  writer.flush();}  }
class C{  protected Expression equals(int opPos) throws TransformerException {  return compileOperation(new Equals(),opPos);}  }
class C{  public boolean nextBoolean(float probability){  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  return nextFloat() < probability;}  }
class C{  public static boolean isRelated(Subject subject,Principal princ){  ensureAvailable();  return proxy.isRelated(subject,princ);}  }
class C{  @Override public void PO(final PdfObject pdfObject,final int type){  if (currentPdfFile == null) {    return;  }  if (showMethods) {    System.out.println("DefaultActionHandler.PO()");  }  final FormObject pageDictionary=(FormObject)pdfObject.getDictionary(type);  currentPdfFile.checkResolved(pageDictionary);  if (pageDictionary != null) {    final FormObject POdictionary=(FormObject)pageDictionary.getDictionary(PdfDictionary.PO);    currentPdfFile.checkResolved(POdictionary);    if (POdictionary != null) {      final String jsCode=POdictionary.getTextStreamValue(PdfDictionary.JS);      javascript.executeAction(jsCode);    }  }}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.611 -0500",hash_original_method="0268276F0AF2F185A8A983DF4EA54EFF",hash_generated_method="B6B9664ACA374B7893607D0B90FFC14C") public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  public void reset(){  visitedGet.clear();  visitedPost.clear();  for (  SpiderParser parser : parsers) {    parser.removeSpiderParserListener(this);  }}  }
class C{  private void sampleActionNode(ActionNode n,Sample sample){  String id=n.getId();  if (!evidence.containsVar(id) && n.getInputNodeIds().isEmpty()) {    Value newVal=n.sample();    sample.addPair(id,newVal);  } else {    Value evidenceValue=evidence.getValue(id);    sample.addPair(id,evidenceValue);  }}  }
class C{  public void translate(double dx,double dy){  if (!isRelative()) {    x+=dx;    y+=dy;  }  if (sourcePoint != null) {    sourcePoint.setX(sourcePoint.getX() + dx);    sourcePoint.setY(sourcePoint.getY() + dy);  }  if (targetPoint != null) {    targetPoint.setX(targetPoint.getX() + dx);    targetPoint.setY(targetPoint.getY() + dy);  }  if (TRANSLATE_CONTROL_POINTS && points != null) {    int count=points.size();    for (int i=0; i < count; i++) {      mxPoint pt=(mxPoint)points.get(i);      pt.setX(pt.getX() + dx);      pt.setY(pt.getY() + dy);    }  }}  }
class C{  protected VersionInfo(String pckg,String module,String release,String time,String clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  infoPackage=pckg;  infoModule=(module != null) ? module : UNAVAILABLE;  infoRelease=(release != null) ? release : UNAVAILABLE;  infoTimestamp=(time != null) ? time : UNAVAILABLE;  infoClassloader=(clsldr != null) ? clsldr : UNAVAILABLE;}  }
class C{  @Override protected Vector<DatabaseField> collectFields(){  return getReferenceFields();}  }
class C{  public static long Extend(long fp,String s){  final long[] mod=ByteModTable_7;  final int mask=0xFF;  final int len=s.length();  for (int i=0; i < len; i++) {    char c=s.charAt(i);    fp=((fp >>> 8) ^ (mod[(((int)c) ^ ((int)fp)) & mask]));  }  return fp;}  }
class C{  @Path("/status") @GET @ApiOperation(value="Get the platform build version.",authorizations={}) public String status(@Context HttpServletRequest request){  ServiceUtils.getInstance().logAPIRequest(null,null,null,null,request);  String res="{ \"bouquet-server\" : " + ServiceUtils.getInstance().getBuildVersionString();  res+=",\"bouquet-plugins\" : [ ";  boolean first=true;  for (  IVendorSupport plugin : VendorSupportRegistry.INSTANCE.listVendors()) {    if (!first) {      res+=",";    } else {      first=false;    }    res+="{\"" + plugin.getVendorId() + "\" : \""+ plugin.getVendorVersion()+ "\"";    res+=",\"vendorId\":\"" + plugin.getVendorId() + "\"";    res+=",\"version\":\"" + plugin.getVendorVersion() + "\"";    res+=",\"jdbcTemplate\":" + plugin.getJdbcUrlTemplate();    res+="}";  }  res+="]";  CoreVersion version=new CoreVersion();  res+=", \"bouquet-core\" : \"" + version.getVendorVersion() + "\"";  res+=" }";  return res;}  }
class C{  public OperationTimedOutException(String message){  super(message);}  }
class C{  private StrBuilder replaceImpl(final StrMatcher matcher,final String replaceStr,final int from,int to,int replaceCount){  if (matcher == null || size == 0) {    return this;  }  final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());  final char[] buf=buffer;  for (int i=from; i < to && replaceCount != 0; i++) {    final int removeLen=matcher.isMatch(buf,i,from,to);    if (removeLen > 0) {      replaceImpl(i,i + removeLen,removeLen,replaceStr,replaceLen);      to=to - removeLen + replaceLen;      i=i + replaceLen - 1;      if (replaceCount > 0) {        replaceCount--;      }    }  }  return this;}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  static void blur(byte[] srcPixels,byte[] dstPixels,int width,int height,float[] kernel,int radius){  float p;  int cp;  for (int y=0; y < height; y++) {    int index=y;    int offset=y * width;    for (int x=0; x < width; x++) {      p=0.0f;      for (int i=-radius; i <= radius; i++) {        int subOffset=x + i;        if (subOffset < 0 || subOffset >= width) {          subOffset=(x + width) % width;        }        int pixel=srcPixels[offset + subOffset] & 0xFF;        float blurFactor=kernel[radius + i];        p+=blurFactor * pixel;      }      cp=(int)(p + 0.5f);      dstPixels[index]=(byte)(cp > 255 ? 255 : cp);      index+=height;    }  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Color old_color=g.getColor();  int x1, y1, x2, y2;  g.setColor(m_color);  g.drawRect(x,y,width - m_width - 1,height - m_width - 1);  for (int i=0; i <= m_width; i++) {    x1=x + m_width;    y1=y + height - i;    x2=x + width;    y2=y1;    g.drawLine(x1,y1,x2,y2);    x1=x + width - m_width + i;    y1=y + m_width;    x2=x1;    y2=y + height;    g.drawLine(x1,y1,x2,y2);  }  if (c.getParent() != null) {    g.setColor(c.getParent().getBackground());    for (int i=0; i <= m_width; i++) {      x1=x;      y1=y + height - i;      x2=x + m_width;      y2=y1;      g.drawLine(x1,y1,x2,y2);      x1=x + width - m_width;      y1=y + i;      x2=x + width;      y2=y1;      g.drawLine(x1,y1,x2,y2);    }    g.setColor(g.getColor().darker());    for (int i=0; i < m_width; i++) {      x1=x + i + 1;      y1=y + height - m_width + i;      x2=x + m_width;      y2=y1;      g.drawLine(x1,y1,x2,y2);      x1=x + width - m_width;      y1=y + i + 1;      x2=x1 + i;      y2=y1;      g.drawLine(x1,y1,x2,y2);    }  }  g.setColor(old_color);}  }
class C{  public void updateLanguage(){  createLegendPanel(legendPanel);  directoryTreeModel.changeRootText(I18n.tr("Library Folders"));}  }
class C{  protected void isPIWellFormed(ProcessingInstruction node){  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"ProcessingInstruction",node.getTarget()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_PI,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  void perform(SectionState state) throws SAXException {  final ModeUsage modeUsage=getModeUsage();  state.reject();  state.addChildMode(modeUsage,null);  state.addAttributeValidationModeUsage(modeUsage);}  }
class C{  public static double[][] condDepMatrix(Instances D,Result result){  int L=D.classIndex();  int N=D.numInstances();  double T[][]=MLUtils.getYfromD(D);  double Y[][]=MatrixUtils.threshold(result.allPredictions(),0.5);  result.output=Result.getStats(result,"6");  double E[]=fillError(result,L);  double F[][][]=new double[3][L][L];  for (int i=0; i < N; i++) {    int y[]=A.toIntArray(Y[i],0.5);    int t[]=A.toIntArray(T[i],0.5);    for (int j=0; j < L; j++) {      for (int k=j + 1; k < L; k++) {        if (y[j] != t[j] && y[k] != t[k]) {          F[0][j][k]++;        } else         if (y[j] == t[j] && t[k] == y[k]) {          F[2][j][k]++;        } else {          F[1][j][k]++;        }      }    }  }  double E_norm[][][]=new double[3][L][L];  for (int j=0; j < L; j++) {    for (int k=j + 1; k < L; k++) {      E_norm[0][j][k]=N * (E[j] * E[k]);      E_norm[2][j][k]=N * ((1.0 - E[k]) * (1.0 - E[j]));      E_norm[1][j][k]=N * ((E[j] * (1.0 - E[k])) + (1.0 - E[j]) * E[k]);    }  }  return StatUtils.chi2(F,E_norm);}  }
class C{  private boolean isLabelTypePresent(AbstractStorageLabelType<?> selectedLabelType){  if (storageData.isLabelPresent(selectedLabelType)) {    return true;  }  for (  AbstractStorageLabel<?> label : labelsToAdd) {    if (ObjectUtils.equals(selectedLabelType,label.getStorageLabelType())) {      return true;    }  }  return false;}  }
class C{  @Override public XMLEventReader createXMLEventReader(Source source) throws XMLStreamException {  try {    if (source instanceof StreamSource) {      StreamSource ss=(StreamSource)source;      return new WbXmlEventReader(ss.getInputStream(),(WbXmlDefinition)props.get(DEFINITION_PROPERTY));    } else {      throw new XMLStreamException("WBXML only support StreamSource with InputStream!");    }  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public MarkData elementAt(int index){  int g0=getGapStart();  int g1=getGapEnd();  MarkData[] array=(MarkData[])getArray();  if (index < g0) {    return array[index];  } else {    index+=g1 - g0;    return array[index];  }}  }
class C{  public static void reset(){  traceState.remove();  suspendedState.clear();}  }
class C{  private BitmapUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  @Override public void onMouseOver(MouseOverEvent event){}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public EntityNotificationImpl(Referenceable entity,OperationType operationType,TypeSystem typeSystem) throws AtlasException {  this(entity,operationType,getAllTraits(entity,typeSystem));}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public static synchronized void stop(){  timerMethodListeners=new MethodListener[0];  timerContextListeners=new ContextListener[0];  timerNullListeners=new NullListener[0];  cbsMethodListeners=new MethodListener[0];  cbsContextListeners=new ContextListener[0];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FIXConfig(FIXVersion version,String senderCompId,String targetCompId,int heartBtInt,long incomingMsgSeqNum,long outgoingMsgSeqNum,int maxFieldCount,int fieldCapacity,int rxBufferCapacity,int txBufferCapacity){  this.version=version;  this.senderCompId=senderCompId;  this.targetCompId=targetCompId;  this.heartBtInt=heartBtInt;  this.incomingMsgSeqNum=incomingMsgSeqNum;  this.outgoingMsgSeqNum=outgoingMsgSeqNum;  this.maxFieldCount=maxFieldCount;  this.fieldCapacity=fieldCapacity;  this.rxBufferCapacity=rxBufferCapacity;  this.txBufferCapacity=txBufferCapacity;}  }
class C{  protected void fixupProjectArtifact() throws Exception {  MavenProject mp2=new MavenProject(mavenProject);  for (  Object artifact : mp2.createArtifacts(artifactFactory,null,null)) {    Artifact art=(Artifact)artifact;    if (art.getType().equals("war")) {      Artifact art2=artifactFactory.createArtifactWithClassifier(art.getGroupId(),art.getArtifactId(),art.getVersion(),"pom",null);      fixupRepositoryArtifact(art2);    }  }  Model pomFile=mp2.getModel();  File outFile=File.createTempFile("pom",".xml");  MavenXpp3Writer pomWriter=new MavenXpp3Writer();  pomWriter.write(new FileWriter(outFile),pomFile);  MavenXpp3Reader pomReader=new MavenXpp3Reader();  pomFile=pomReader.read(new FileReader(outFile));  Artifact art=mp2.getArtifact();  fixModelAndSaveInRepository(art,pomFile);  outFile.delete();}  }
class C{  public static void printHelp(){  String version=Builder.class.getPackage().getImplementationVersion();  if (version == null) {    version="unknown";  }  System.out.println("JavaCPP version " + version + "\n"+ "Copyright (C) 2011-2014 Samuel Audet <samuel.audet@gmail.com>\n"+ "Project site: https://github.com/bytedeco/javacpp\n\n"+ "Licensed under the GNU General Public License version 2 (GPLv2) with Classpath exception.\n"+ "Please refer to LICENSE.txt or http://www.gnu.org/licenses/ for details.");  System.out.println();  System.out.println("Usage: java -jar javacpp.jar [options] [class or package (suffixed with .* or .**)]");  System.out.println();  System.out.println("where options include:");  System.out.println();  System.out.println("    -classpath <path>      Load user classes from path");  System.out.println("    -d <directory>         Output all generated files to directory");  System.out.println("    -o <name>              Output everything in a file named after given name");  System.out.println("    -nocompile             Do not compile or delete the generated source files");  System.out.println("    -header                Generate header file with declarations of callbacks functions");  System.out.println("    -copylibs              Copy to output directory dependent libraries (link and preload)");  System.out.println("    -jarprefix <prefix>    Also create a JAR file named \"<prefix>-<platform>.jar\"");  System.out.println("    -properties <resource> Load all properties from resource");  System.out.println("    -propertyfile <file>   Load all properties from file");  System.out.println("    -D<property>=<value>   Set property to value");  System.out.println("    -Xcompiler <option>    Pass option directly to compiler");  System.out.println();}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.out.println("\nUsage: CSVtoArff <input.csv> <output.arff>");    System.out.println("Eample: CSVtoArff <data/hospital.csv> <hospital.arff>");    System.exit(1);  }  System.out.println("loading file " + args[0]);  CSVLoader loader=new CSVLoader();  loader.setSource(new File(args[0]));  Instances instances=loader.getDataSet();  System.out.println("\nDataset summary:\n");  System.out.println(instances.toSummaryString());  instances=changeType(instances);  Scanner sc=new Scanner(System.in);  System.out.println("\nDo you want to print the data to console (Y/N)?");  String answer=sc.next();  if (answer.toLowerCase().contentEquals("y"))   System.out.println(instances);  System.out.println("\nSaving Arff file...\n");  ArffSaver saver=new ArffSaver();  saver.setInstances(instances);  saver.setFile(new File(args[1]));  saver.writeBatch();  sc.close();  System.out.println("\nSaved.\n");}  }
class C{  static Set<Integer> findReturnsAndThrows(final List<Instruction> instructions){  return find(null,instructions);}  }
class C{  private Cluster.AsyncEventQueue initAsyncEventQueue(ObjectName mbeanName) throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException, AttributeNotFoundException, MBeanException {  Cluster.AsyncEventQueue asyncEventQueue=new Cluster.AsyncEventQueue();  AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.ASYNC_EVENT_QUEUE_MBEAN_ATTRIBUTES);  for (int i=0; i < attributeList.size(); i++) {    Attribute attribute=(Attribute)attributeList.get(i);    String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNCEVENTID:      asyncEventQueue.setId(getStringAttribute(attribute.getValue(),attribute.getName()));    break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_ASYNC_EVENT_LISTENER:  asyncEventQueue.setAsyncEventListener(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_CONFLATION_ENABLED:asyncEventQueue.setBatchConflationEnabled(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_TIME_INTERVAL:asyncEventQueue.setBatchTimeInterval(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_BATCH_SIZE:asyncEventQueue.setBatchSize(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_EVENT_QUEUE_SIZE:asyncEventQueue.setEventQueueSize(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PARALLEL:asyncEventQueue.setParallel(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AEQ_PRIMARY:asyncEventQueue.setPrimary(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;}}return asyncEventQueue;}  }
class C{  public static String readContent(String source) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try (InputStream inputStream=TestUtils.class.getResourceAsStream(source)){    copy(inputStream,outputStream);  }   return outputStream.toString(Charset.forName("UTF-8").name());}  }
class C{  private ProcessBuilder buildProcess(final String module,final String version,String func,List<String> args,String exepath,final List<File> repos,PrintStream output){  final String node=exepath == null ? findNode() : exepath;  if (exepath != null) {    if (!isExe(exepath)) {      throw new CeylonRunJsException("Specified Node.js executable is invalid.");    }  }  if (func.startsWith("::")) {    func=func.substring(2);  } else   if (func.indexOf('.') > 0 || func.indexOf("::") > 0) {    if (func.contains("::")) {      func=func.replace("::",".");    }    if (func.startsWith(module)) {      func=func.substring(module.length() + 1);    }    if (func.indexOf('.') > 0) {      final StringBuilder fsb=new StringBuilder();      final int lastDot=func.lastIndexOf('.');      fsb.append(func.substring(lastDot + 1)).append('$');      fsb.append(func.substring(0,lastDot).replaceAll("\\.","\\$"));      func=fsb.toString();    }  }  if (JsIdentifierNames.isReservedWord(func)) {    func="$_" + func;  }  final boolean isDefault=ModuleUtil.isDefaultModule(module);  String moduleString=isDefault ? module : module + "/" + version;  String eval=String.format("if(typeof setTimeout==='function'){setTimeout(function(){},50)};" + "var __entry_point__=require('%s%s/%s%s').%s;if (__entry_point__===undefined){" + "console.log('The specified method \"%s\" does not exist or is not shared in the %s module');"+ "process.exit(1);}else __entry_point__();",module.replace(".","/"),isDefault ? "" : "/" + version,module,isDefault ? "" : "-" + version,func,func,moduleString);  final ProcessBuilder versionProc=new ProcessBuilder(java.util.Arrays.asList(node,"-v"));  try {    Process versionProcess=versionProc.start();    BufferedReader lineReader=new BufferedReader(new InputStreamReader(versionProcess.getInputStream()));    String nodeVersion=lineReader.readLine();    versionProcess.destroy();    if (nodeVersion.charAt(0) == 'v') {      nodeVersion=nodeVersion.substring(1);    }    String[] versionParts=nodeVersion.split("\\.");    if (versionParts.length > 1) {      if (Integer.parseInt(versionParts[0],10) == 0 && Integer.parseInt(versionParts[1],10) < 8) {        System.out.println("Be warned, old timer: JavaScript code generated by the Ceylon compiler will most likely not run on Node.js versions older than 0.8");        System.out.println();      }    }  } catch (  IOException|NumberFormatException ex) {    System.out.println("Cannot determine Node.js version; you should be using 0.8 or above");  }  final ProcessBuilder proc;  if (args != null && !args.isEmpty()) {    ArrayList<String> newargs=new ArrayList<String>(args.size() + 4);    newargs.add(node);    newargs.add("-e");    newargs.add(eval);    newargs.add("dummy");    newargs.addAll(args);    proc=new ProcessBuilder(newargs.toArray(new String[0]));  } else {    proc=new ProcessBuilder(node,"-e",eval);  }  StringBuilder nodePath=new StringBuilder();  appendToNodePath(nodePath,getNodePath());  for (  File repo : repos) {    appendToNodePath(nodePath,repo.getPath());  }  if (debug) {    System.out.println("NODE_PATH=" + nodePath);  }  proc.environment().put("NODE_PATH",nodePath.toString());  if (output != null) {    proc.redirectErrorStream();  }  return proc;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Deprecated public boolean isUrlWhiteListed(String url){  return internalWhitelist.isUrlWhiteListed(url);}  }
class C{  public boolean remoteEquals(RemoteRef sub){  if (sub instanceof UnicastRef)   return ref.remoteEquals(((UnicastRef)sub).ref);  return false;}  }
class C{  public void parseReturnByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());  if (stream.peek() != ';') {    boolean with=stream.peekWord().toLowerCase().equals(WITH);    if (!with) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      with=stream.peekWord().toLowerCase().equals(WITH);    }    if (with) {      stream.skipWord();      stream.skipWhitespace();      dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        parseElementByteCode(stream,dataStream,elements,debug,network);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          parseElementByteCode(stream,dataStream,elements,debug,network);        }        ensureNext(')',stream);      } else {        parseElementByteCode(stream,dataStream,elements,debug,network);      }      dataStream.writeLong(0l);    }  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public static IgniteProductVersion productVersion(ClusterNode node){  String verStr=node.attribute(ATTR_BUILD_VER);  String buildDate=node.attribute(ATTR_BUILD_DATE);  if (buildDate != null)   verStr+='-' + buildDate;  return IgniteProductVersion.fromString(verStr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.224 -0500",hash_original_method="750162916D1917FF199EBD766435A4BC",hash_generated_method="E1BA738DAB805BEEA27EB43C611A7D52") @DSSink(DSSinkKind.DATABASE) public boolean putDouble(double value,int row,int column){  this.addTaint(value);  return true;}  }
class C{  static public JournalIndex createTransient(){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(JournalIndex.class.getName());  metadata.setTupleSerializer(new TupleSerializer(new ASCIIKeyBuilderFactory(Bytes.SIZEOF_LONG)));  return (JournalIndex)BTree.createTransient(metadata);}  }
class C{  public PutIndexTemplateRequest source(String templateSource){  try (XContentParser parser=XContentFactory.xContent(templateSource).createParser(templateSource)){    return source(parser.mapOrdered());  } catch (  Exception e) {    throw new IllegalArgumentException("failed to parse template source [" + templateSource + "]",e);  }}  }
class C{  public void write(java.lang.String str,int off,int len) throws java.io.IOException {  if (off > 0 || len != str.length()) {    str=str.substring(off,len);  }  os.write(str.getBytes(enc));}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public ExchangeRate lookup(final Currency source,final Currency target){  return lookup(source,target,Date.todaysDate(),ExchangeRate.Type.Derived);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.330 -0500",hash_original_method="7A9453157C5A8C4FD99B8F34DC853877",hash_generated_method="1045EE4969ECD81E537D6973B265F1AF") public PAssertedIdentityHeader createPAssertedIdentityHeader(Address address) throws NullPointerException, ParseException {  if (address == null)   throw new NullPointerException("null address!");  PAssertedIdentity assertedIdentity=new PAssertedIdentity();  assertedIdentity.setAddress(address);  return assertedIdentity;}  }
class C{  public ServiceCall<TranslationResult> translate(final String text,final String modelId){  return translate(Collections.singletonList(text),modelId);}  }
class C{  public ClassicTokenizerFactory(Map<String,String> args){  super(args);  maxTokenLength=getInt(args,"maxTokenLength",StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  public static String leftPad(String str,int size,String delim){  size=(size - str.length()) / delim.length();  if (size > 0) {    str=repeat(delim,size) + str;  }  return str;}  }
class C{  @Override public void commit() throws IOException {  if (!committed && currentFile.isPresent()) {    currentFile.get().getDeserializer().mark();    committed=true;  }}  }
class C{  private double normalDens(double x,double mean,double stdDev){  double diff=x - mean;  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));}  }
class C{  public static BridgeServerRequest createForStart(CacheInfo cache,RemoteBridgeServer bridge){  BridgeServerRequest request=new BridgeServerRequest();  request.cacheId=cache.getId();  request.operation=START_OPERATION;  request.friendlyName=LocalizedStrings.BridgeServerRequest_START_BRIDGE_SERVER_0.toLocalizedString(bridge);  request.bridgeInfo=bridge;  return request;}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  void error(String key,Object... args){  if (apiMode) {    String msg=log.localize(PrefixKind.JAVAC,key,args);    throw new PropagatedException(new IllegalStateException(msg));  }  warning(key,args);  log.printLines(PrefixKind.JAVAC,"msg.usage",ownName);}  }
class C{  public void mouseClicked(MouseEvent e){  int col=getColumnModel().getColumnIndexAtX(e.getX());  log.fine("Column " + col + " = "+ getColumnModel().getColumn(col).getHeaderValue()+ ", Table r="+ this.getSelectedRow()+ " c="+ this.getSelectedColumn());  if (e.getSource() == this) {  } else {    int mc=convertColumnIndexToModel(col);    sort(mc);  }}  }
class C{  public static void fill(int[] array,int start,int end,int value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public int hashCode(){  int retval=0;  int len=available();  int p=pos;  for (int i=0; i < len; i++)   retval+=buf[p + i] * i;  return retval;}  }
class C{  public static LoggerType loggerTypeFromValue(Integer value){switch (value) {case 0:    return LoggerType.Log4j;case 1:  return LoggerType.PythonLogger;default :return null;}}  }
class C{  public double thetaPerDay(final double spot,final double maturity){  return theta(spot,maturity) / 365.0;}  }
class C{  public void testOneIgfsSplitAffinity() throws Exception {  IgfsMock igfs=LocationsBuilder.create().add(0,NODE_1).add(50,NODE_2).add(100,NODE_3).buildIgfs();  List<HadoopInputSplit> splits=new ArrayList<>();  splits.add(new HadoopFileBlock(new String[]{HOST_1},URI.create("igfs://igfs@/file"),0,50));  final int expReducers=4;  HadoopPlannerMockJob job=new HadoopPlannerMockJob(splits,expReducers);  IgniteHadoopWeightedMapReducePlanner planner=createPlanner(igfs);  HadoopMapReducePlan plan=planner.preparePlan(job,NODES,null);  assert plan.mappers() == 1;  assert plan.mapperNodeIds().size() == 1;  assert plan.mapperNodeIds().contains(ID_1);  checkPlanMappers(plan,splits,NODES,false);  checkPlanReducers(plan,NODES,expReducers,false);}  }
class C{  public TLongHashSet(long[] array,TLongHashingStrategy strategy){  this(array.length,strategy);  addAll(array);}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public static void fill(byte[] a,int fromIndex,int toIndex,byte val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public VersionException(String message){  super(message);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args) throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("HelloWorld");  t.strings("Hello","World!").print();  tp.submit(t);}  }
class C{  protected Location createLocation(double lat,double lon,String name,String iconURL,List recordList){  Location loc=new URLRasterLocation(lat,lon,name,iconURL);  loc.setShowName(isShowNames());  loc.setShowLocation(isShowLocations());  loc.setLocationHandler(this);  getLocationDrawingAttributes().setTo(loc.getLocationMarker());  getNameDrawingAttributes().setTo(loc.getLabel());  loc.setDetails(name + " is at lat: " + lat+ ", lon: "+ lon);  if (iconURL != null) {    loc.setDetails(loc.getDetails() + " icon: " + iconURL);  }  logger.fine("CSVLocationHandler " + loc.getDetails());  return loc;}  }
class C{  public String physicalName(){  return metadata.name();}  }
class C{  public static String replaceBracketTokens(String line){  String result=line;  result=result.replaceAll("(?iu)" + "-lrb-","(");  result=result.replaceAll("(?iu)" + "-rrb-",")");  result=result.replaceAll("(?iu)" + "-lsb-","[");  result=result.replaceAll("(?iu)" + "-rsb-","]");  result=result.replaceAll("(?iu)" + "-lcb-","{");  result=result.replaceAll("(?iu)" + "-rcb-","}");  return result;}  }
class C{  static <T>GeneralRange<T> upTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,false,null,OPEN,true,endpoint,boundType);}  }
class C{  public String exportTranslations() throws IOException {  byte[] buf=createExcel();  if (buf == null) {    return OUTCOME_ERROR;  }  FacesContext fc=FacesContext.getCurrentInstance();  HttpServletResponse response=(HttpServletResponse)fc.getExternalContext().getResponse();  SimpleDateFormat sdf=new SimpleDateFormat("yyyy_MM_dd");  String filename=sdf.format(Calendar.getInstance().getTime()) + "_Translations.xls";  response.setContentType("application/vnd.ms-excel");  response.setHeader("Content-disposition","attachement; filename=\"" + filename + "\"");  response.setContentLength(buf.length);  OutputStream out;  out=response.getOutputStream();  out.write(buf);  out.flush();  out.close();  fc.responseComplete();  return null;}  }
class C{  public void append(TargetRoll other){  append(other,true);}  }
class C{  @Override public IMemoryManager createAllocationContext(){  assertOpen();  return new AllocationContext(this,true);}  }
class C{  public SVGOMFESpecularLightingElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @Override public String toString(){  return m_Display;}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,int size){  this(processorType,null,size,null);}  }
class C{  public boolean isRemote(){  return !isLocal();}  }
class C{  public NestedListsBonk(NestedListsBonk other){  if (other.isSetBonk()) {    List<List<List<Bonk>>> __this__bonk=new ArrayList<List<List<Bonk>>>(other.bonk.size());    for (    List<List<Bonk>> other_element : other.bonk) {      List<List<Bonk>> __this__bonk_copy=new ArrayList<List<Bonk>>(other_element.size());      for (      List<Bonk> other_element_element : other_element) {        List<Bonk> __this__bonk_copy_copy=new ArrayList<Bonk>(other_element_element.size());        for (        Bonk other_element_element_element : other_element_element) {          __this__bonk_copy_copy.add(new Bonk(other_element_element_element));        }        __this__bonk_copy.add(__this__bonk_copy_copy);      }      __this__bonk.add(__this__bonk_copy);    }    this.bonk=__this__bonk;  }}  }
class C{  public Lambda(Node node,String[] variableNames,Class<?>[] variableTypes){  super(node.getReturnType(),variableTypes);  this.node=node;  this.variableNames=variableNames;  if (!node.isValid()) {    throw new IllegalArgumentException("lambda function is not valid");  }}  }
class C{  public static Map<String,String> extractParams(final String challengeStr) throws MalformedChallengeException {  if (challengeStr == null) {    throw new IllegalArgumentException("Challenge may not be null");  }  final int idx=challengeStr.indexOf(' ');  if (idx == -1) {    throw new MalformedChallengeException("Invalid challenge: " + challengeStr);  }  final Map<String,String> map=new HashMap<String,String>();  final ParameterParser parser=new ParameterParser();  final List<NameValuePair> params=parser.parse(challengeStr.substring(idx + 1,challengeStr.length()),',');  for (int i=0; i < params.size(); i++) {    final NameValuePair param=params.get(i);    map.put(param.getName().toLowerCase(),param.getValue());  }  return map;}  }
class C{  private void primitiveArrayStoreHelper(RVMMethod target,Instruction inst,IR ir){  Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),AStore.getClearGuard(inst),AStore.getArray(inst).copy(),AStore.getIndex(inst).copy(),AStore.getValue(inst).copy());  replaceInstructionWithBarrier(inst,wb);  if (ir.options.H2L_INLINE_WRITE_BARRIER) {    inline(wb,ir,true);  }}  }
class C{  public void run() throws FaultException, ExitingException {  try {    DefinitionProcess definition=Interpreter.getInstance().getDefinition(definitionName);    definition.run();  } catch (  InvalidIdException e) {    throw new FaultException("FatalError","Definition not found: " + definitionName);  }}  }
class C{  public int lineStartOffset(int line) throws IllegalArgumentException {  if (textLength == 0) {    return 0;  }  if (lineOutOfRange(line)) {    throw new IllegalArgumentException("line out of bounds");  }  return nlOffsets[line - 1];}  }
class C{  public void addBannedUsername(final String username,final Date banTill){  if (isUsernameBanned(username).getFirst()) {    removeBannedUsername(username);  }  Timestamp banTillTs=null;  if (banTill != null) {    banTillTs=new Timestamp(banTill.getTime());  }  s_logger.fine("Banning username:" + username);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into banned_usernames (username, ban_till) values (?, ?)");    ps.setString(1,username);    ps.setTimestamp(2,banTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate banned username:" + username + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting banned username:" + username,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public static void sort(double[] array,int[] indices){  for (int i=0; i < indices.length; i++) {    indices[i]=i;  }  int temp;  int j, n=indices.length;  for (j=n / 2; j > 0; j--) {    adjust(array,indices,j,n);  }  for (j=n - 1; j > 0; j--) {    temp=indices[0];    indices[0]=indices[j];    indices[j]=temp;    adjust(array,indices,1,j);  }}  }
class C{  public boolean isTransient(){  return this.modifierKeyword == ModifierKeyword.TRANSIENT_KEYWORD;}  }
class C{  public boolean execute() throws SQLException {  procedureCall.checkParameters();  boolean hasResultSet=false;synchronized (getSynchronizationObject()) {    notifyStatementStarted();    try {      prepareFixedStatement(procedureCall.getSQL(isSelectableProcedure()));      hasResultSet=internalExecute(!isSelectableProcedure());      if (hasResultSet) {        setRequiredTypes();      }    }  finally {      if (!hasResultSet)       notifyStatementCompleted();    }    return hasResultSet;  }}  }
class C{  public TSIG(String algorithm,String name,String key){  this(HMAC_MD5,name,key);  if (algorithm.equalsIgnoreCase("hmac-md5"))   this.alg=HMAC_MD5; else   if (algorithm.equalsIgnoreCase("hmac-sha1"))   this.alg=HMAC_SHA1; else   if (algorithm.equalsIgnoreCase("hmac-sha224"))   this.alg=HMAC_SHA224; else   if (algorithm.equalsIgnoreCase("hmac-sha256"))   this.alg=HMAC_SHA256; else   if (algorithm.equalsIgnoreCase("hmac-sha384"))   this.alg=HMAC_SHA384; else   if (algorithm.equalsIgnoreCase("hmac-sha512"))   this.alg=HMAC_SHA512; else   throw new IllegalArgumentException("Invalid TSIG algorithm");  getDigest();}  }
class C{  public CActionSortModulesById(final CModuleContainerNode node){  super("By Creation Date");  m_node=node;}  }
class C{  public static boolean isUnaryOperator(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  PerlTokenData prevTokenData=((PerlBuilder)b).lookupToken(-1);  if (prevTokenData != null && prevTokenData.getTokenType() == OPERATOR_DEREFERENCE) {    return false;  }  IElementType tokenType=b.getTokenType();  IElementType nextTokenType=b.lookAhead(1);  if (CONVERTABLE_TOKENS.contains(tokenType) && nextTokenType != LEFT_PAREN && !PACKAGE_TOKENS.contains(nextTokenType)) {    return PerlSubUtil.BUILT_IN_UNARY.contains(b.getTokenText());  } else   if (PACKAGE_TOKENS.contains(tokenType) && CONVERTABLE_TOKENS.contains(SUB) && b.lookAhead(2) != LEFT_PAREN) {    PerlTokenData nextToken=((PerlBuilder)b).lookupToken(1);    if (nextToken != null) {      return PerlSubUtil.isUnary(b.getTokenText(),nextToken.getTokenText());    }  }  return false;}  }
class C{  public Certificate requestCertificate(byte[] csr) throws AcmeException {  return requestCertificate(csr,null,null);}  }
class C{  public static boolean isMacOSX(){  setType();  return (type == MACOSX);}  }
class C{  public static byte[] stringToGsm7BitPackedWithHeader(String data,byte[] header,int languageTable,int languageShiftTable) throws EncodeException {  if (header == null || header.length == 0) {    return stringToGsm7BitPacked(data,languageTable,languageShiftTable);  }  int headerBits=(header.length + 1) * 8;  int headerSeptets=(headerBits + 6) / 7;  byte[] ret=stringToGsm7BitPacked(data,headerSeptets,true,languageTable,languageShiftTable);  ret[1]=(byte)header.length;  System.arraycopy(header,0,ret,2,header.length);  return ret;}  }
class C{  private StorageCenterAPI validateConnection(StorageCenterAPI api,String key) throws StorageCenterAPIException {  StorageCenterAPI result=api;  try {    result.getApiConnection();  } catch (  StorageCenterAPIException e) {    LOG.warn(String.format("Connection failed, attempting to reconnection: %s",e));    Map<String,List<String>> connectionInfo=this.driverRegistry.getDriverAttributesForKey(DRIVER_NAME,key);    int port=3033;    try {      port=Integer.parseInt(connectionInfo.get(PORT_KEY).get(0));    } catch (    NumberFormatException nex) {      LOG.warn(String.format("Invalid port setting: %s",connectionInfo.get(PORT_KEY).get(0)));    }    result=StorageCenterAPI.openConnection(connectionInfo.get(HOST_KEY).get(0),port,connectionInfo.get(USER_KEY).get(0),connectionInfo.get(PASS_KEY).get(0));    connectionMap.put(api.getHost(),result);  }  return result;}  }
class C{  public void addSchemaObject(Session session,SchemaObject obj){  int id=obj.getId();  if (id > 0 && !starting) {    checkWritingAllowed();  }  lockMeta(session);synchronized (this) {    obj.getSchema().add(obj);    addMeta(session,obj);  }}  }
class C{  public static Test suite(){  return (new TestSuite(CommandLinkOnClickITCase.class));}  }
class C{  public DefaultMapWay(long id){  this.id=id;  nodes=Collections.emptyList();  latMinIdx=-1;}  }
class C{  public void sendWarningMessage(final SimulatedUpdate update,final List<String> updateResultMessages){  final Message message=createActionStatusMessage(update,updateResultMessages,ActionStatus.WARNING);  sendMessage(spExchange,message);}  }
class C{  public <T>void registerEntryPropertyClass(Class<T> type,Class<EntryProperty> entryAdapter){  this.entryPropertyClasses.put(type,entryAdapter);}  }
class C{  private static CalendarEntry updateSubscription(CalendarEntry calendar) throws IOException, ServiceException {  System.out.println("Updating the display color of the Doodles calendar");  calendar.setColor(new ColorProperty(RED));  return calendar.update();}  }
class C{  public boolean isNow(){  return now;}  }
class C{  private void sendChunkSize(){  ChunkSize chunkSizeMsg=new ChunkSize(chunkSize);  conn.getChannel((byte)2).write(chunkSizeMsg);  chunkSizeSent=true;}  }
class C{  public static boolean isArgument(Resource resource){  return JenaUtil.hasIndirectType(resource,SPL.Argument.inModel(resource.getModel()));}  }
class C{  public Space S(String relationName) throws ScopeException {  Relation relation=universe.getRelation(domain,relationName);  if (relation != null) {    return new Space(this,relation);  } else {    throw new ScopeException("relation '" + relationName + "' not found/applicable for source domain '"+ domain.getName()+ "'");  }}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig;  try {    flagConfig=FlagConfig.getFlagConfig(args);  } catch (  IllegalArgumentException e) {    System.err.println(usageMessage);    throw e;  }  if (flagConfig.luceneindexpath().isEmpty()) {    throw (new IllegalArgumentException("-luceneindexpath must be set."));  }  VerbatimLogger.info("Seedlength: " + flagConfig.seedlength() + ", Dimension: "+ flagConfig.dimension()+ ", Vector type: "+ flagConfig.vectortype()+ ", Minimum frequency: "+ flagConfig.minfrequency()+ ", Maximum frequency: "+ flagConfig.maxfrequency()+ ", Number non-alphabet characters: "+ flagConfig.maxnonalphabetchars()+ ", Contents fields are: "+ Arrays.toString(flagConfig.contentsfields())+ "\n");  String termFile=flagConfig.termvectorsfile();  String docFile=flagConfig.docvectorsfile();  LuceneUtils luceneUtils=new LuceneUtils(flagConfig);  try {    TermVectorsFromLucene termVectorIndexer;    if (!flagConfig.initialtermvectors().isEmpty()) {      VerbatimLogger.info("Creating elemental term vectors ... \n");      termVectorIndexer=TermVectorsFromLucene.createTermBasedRRIVectors(flagConfig);    } else {      VectorStore initialDocVectors=null;      if (!flagConfig.initialdocumentvectors().isEmpty()) {        VerbatimLogger.info(String.format("Loading initial document vectors from file: '%s'.\n",flagConfig.initialdocumentvectors()));        initialDocVectors=VectorStoreRAM.readFromFile(flagConfig,flagConfig.initialdocumentvectors());        VerbatimLogger.info(String.format("Loaded %d document vectors to use as elemental vectors.\n",initialDocVectors.getNumVectors()));      }      VerbatimLogger.info("Creating term vectors as superpositions of elemental document vectors ... \n");      termVectorIndexer=TermVectorsFromLucene.createTermVectorsFromLucene(flagConfig,initialDocVectors);    }    VerbatimLogger.info("Writing term vectors to " + termFile + "\n");    VectorStoreWriter.writeVectors(termFile,flagConfig,termVectorIndexer.getSemanticTermVectors());switch (flagConfig.docindexing()) {case INCREMENTAL:      IncrementalDocVectors.createIncrementalDocVectors(termVectorIndexer.getSemanticTermVectors(),flagConfig,luceneUtils);    IncrementalTermVectors itermVectors;  for (int i=1; i < flagConfig.trainingcycles(); ++i) {    itermVectors=new IncrementalTermVectors(flagConfig,luceneUtils);    VectorStoreWriter.writeVectors(VectorStoreUtils.getStoreFileName(flagConfig.termvectorsfile() + flagConfig.trainingcycles(),flagConfig),flagConfig,itermVectors);    IncrementalDocVectors.createIncrementalDocVectors(itermVectors,flagConfig,luceneUtils);  }break;case INMEMORY:DocVectors docVectors=new DocVectors(termVectorIndexer.getSemanticTermVectors(),flagConfig,luceneUtils);for (int i=1; i < flagConfig.trainingcycles(); ++i) {VerbatimLogger.info("\nRetraining with learned document vectors ...");termVectorIndexer=TermVectorsFromLucene.createTermVectorsFromLucene(flagConfig,docVectors);docVectors=new DocVectors(termVectorIndexer.getSemanticTermVectors(),flagConfig,luceneUtils);}VectorStoreWriter.writeVectors(VectorStoreUtils.getStoreFileName(flagConfig.termvectorsfile() + flagConfig.trainingcycles(),flagConfig),flagConfig,termVectorIndexer.getSemanticTermVectors());VectorStore writeableDocVectors=docVectors.makeWriteableVectorStore();VerbatimLogger.info("Writing doc vectors to " + docFile + "\n");VectorStoreWriter.writeVectors(docFile,flagConfig,writeableDocVectors);break;case NONE:break;default :throw new IllegalStateException("No procedure defined for -docindexing " + flagConfig.docindexing());}} catch (IOException e) {e.printStackTrace();}}  }
class C{  public void reset() throws java.io.IOException {  return;}  }
class C{  public synchronized void index(long offset,long term){  if (lookup(offset) != term) {    terms.put(offset,term);  }}  }
class C{  public static void assertBalanceDebitNotification(final Notification notification,final Account expectedAccount,final Amount expectedAmount){  final BalanceAdjustmentNotification n=(BalanceAdjustmentNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.BalanceDebit));  Assert.assertThat(n.getAccount(),IsEqual.equalTo(expectedAccount));  Assert.assertThat(n.getAmount(),IsEqual.equalTo(expectedAmount));}  }
class C{  private String antProjectToArtifactName(String origModule){  String module=origModule;  if (!origModule.startsWith("solr-")) {    module="lucene-" + module;  }  return module;}  }
class C{  public ByteArrayBuilder(){  this(null);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  filterChain.doFilter(request,response);  try {    org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection().rollback();  } catch (  SQLException e) {    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {      response.getWriter().println("Problem while rolling back!");      return;    } else     throw new ServletException(e);  }}  }
class C{  public boolean hasVisibility(){  return super.hasElement(Visibility.KEY);}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_setting)   return;  KeyNamePair resource=(KeyNamePair)fResource.getSelectedItem();  if (resource != null) {    int S_Resource_ID=resource.getKey();    m_mAssignment.setS_Resource_ID(S_Resource_ID);  }  Timestamp assignDateFrom=fDateFrom.getTimestamp();  if (assignDateFrom != null)   m_mAssignment.setAssignDateFrom(assignDateFrom);  BigDecimal qty=(BigDecimal)fQty.getValue();  if (qty != null)   m_mAssignment.setQty(qty);  m_mAssignment.setName((String)fName.getValue());  m_mAssignment.setDescription((String)fDescription.getValue());  if (e.getSource() == fResource) {    Object o=m_lookup.get(fResource.getSelectedItem());    if (o == null)     lUOM.setText(" ? "); else     lUOM.setText(o.toString());  } else   if (e.getActionCommand().equals(ConfirmPanel.A_ZOOM)) {    InfoSchedule is=new InfoSchedule(m_frame,m_mAssignment,true);    if (is.getMResourceAssignment() != null) {      m_mAssignment=is.getMResourceAssignment();      dispose();    }    is=null;  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_DELETE)) {    if (m_mAssignment.delete(true)) {      m_mAssignment=null;      dispose();    } else     ADialog.error(0,this,"ResourceAssignmentNotDeleted");  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (cmd_save())     dispose();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:22.803 -0400",hash_original_method="A0C1F272D157A3A99E9FD719A2632888",hash_generated_method="C1762171FA85031E6382CA2125245FA1") private void recoverStateMachine(int what,Object obj){  Log.e(TAG,"Get unexpected power on event, reset with: " + what);  transitionTo(mHotOff);  deferMessage(obtainMessage(TURN_COLD));  deferMessage(obtainMessage(what,obj));}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  @SuppressLint("InlinedApi") public static void startInstalledAppDetails(Context context,String packageName){  Intent intent=new Intent();  int sdkVersion=Build.VERSION.SDK_INT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));  } else {    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra((sdkVersion == Build.VERSION_CODES.FROYO ? "pkg" : "com.android.settings.ApplicationPkgName"),packageName);  }  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static List<File> sampleFiles(File folder,int number,FileFilter filter){  List<File> result=null;  if (!folder.exists() || !folder.isDirectory() || !folder.canRead()) {    LOG.error("Could not read from " + folder.getAbsolutePath());    return null;  }  File[] fileList=folder.listFiles(filter);  if (fileList.length > 0) {    result=new ArrayList<File>();    if (fileList.length < number) {      LOG.warn("Although " + number + " files were requested, only "+ fileList.length+ " are available");    }    int[] permutation=RandomPermutation.getRandomPermutation(fileList.length);    int index=0;    while (result.size() < number && index < permutation.length) {      result.add(fileList[permutation[index++] - 1]);    }    LOG.info("File sampling complete, " + result.size() + " returned.");    return result;  } else {    LOG.warn("The folder contains no relevant files. A null object is returned!");    return null;  }}  }
class C{  public String objectName(){  return objectName;}  }
class C{  @Override public Object put(Serializable key,Object value){  if (component.initialStateMarked() || value instanceof PartialStateHolder) {    Object retVal=deltaMap.put(key,value);    if (retVal == null) {      return defaultMap.put(key,value);    } else {      defaultMap.put(key,value);      return retVal;    }  } else {    return defaultMap.put(key,value);  }}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public boolean is_set_country(){  return this.country != null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.DECLARATION__TYPE_SPECIFIER:    return basicSetTypeSpecifier(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void addDialog(final Component comp){  pane.add(comp,JLayeredPane.PALETTE_LAYER);}  }
class C{  protected boolean isMatch(String methodName,String mappedName){  return PatternMatchUtils.simpleMatch(mappedName,methodName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 / z2);            } else {              outputFile.setValue(row,col,noData1);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 / constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 / z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public HGPersistentHandle store(HGPersistentHandle[] link){  return store(config.getHandleFactory().makeHandle(),link);}  }
class C{  public boolean importTypeSelected(){  return importTypeSelected;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double k=0.5;  double z;  int rIn, gIn, bIn, rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  k=Double.parseDouble(args[2]);  if (k < 0) {    k=0;  }  if (k > 1) {    k=1;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    int minVal;    double rMax=0, gMax=0, bMax=0;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          minVal=rIn;          if (gIn < minVal) {            minVal=gIn;          }          if (bIn < minVal) {            minVal=bIn;          }          rOut=(int)(rIn - k * minVal);          gOut=(int)(gIn - k * minVal);          bOut=(int)(bIn - k * minVal);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          if (rOut > rMax) {            rMax=rOut;          }          if (gOut > gMax) {            gMax=gOut;          }          if (bOut > bMax) {            bMax=bOut;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          rOut=(int)(rIn / rMax * 255);          gOut=(int)(gIn / gMax * 255);          bOut=(int)(bIn / bMax * 255);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  this.store=store == null ? new CookieStoreImpl() : store;  policy=cookiePolicy == null ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;}  }
class C{  private void updateCoProductCosts(MPPProductBOM bom,MCost baseDimension){  if (bom == null)   return;  BigDecimal costPriceTotal=Env.ZERO;  for (  MPPProductBOMLine bomLine : bom.getLines()) {    if (!bomLine.isCoProduct()) {      continue;    }    final BigDecimal costPrice=baseDimension.getCurrentCostPriceLL().multiply(bomLine.getCostAllocationPerc(true));    MCost dimension=MCost.getDimension((MProduct)bomLine.getM_Product(),baseDimension.getC_AcctSchema_ID(),baseDimension.getAD_Org_ID(),baseDimension.getM_Warehouse_ID(),0,baseDimension.getM_CostType_ID(),baseDimension.getM_CostElement_ID());    if (dimension == null) {      dimension=new MCost(baseDimension.getCtx(),0,baseDimension.get_TrxName());      dimension.setAD_Org_ID(baseDimension.getAD_Org_ID());      dimension.setM_Product_ID(bomLine.getM_Product_ID());      dimension.setM_CostType_ID(baseDimension.getM_CostType_ID());      dimension.setC_AcctSchema_ID(baseDimension.getC_AcctSchema_ID());      dimension.setM_CostElement_ID(baseDimension.getM_CostElement_ID());      dimension.setM_AttributeSetInstance_ID(0);    }    dimension.setCurrentCostPriceLL(costPrice);    dimension.saveEx();    costPriceTotal=costPriceTotal.add(costPrice);  }  if (costPriceTotal.signum() != 0) {    baseDimension.setCurrentCostPriceLL(costPriceTotal);  }}  }
class C{  public CamelProcessor(Mailet mailet,Logger logger,CamelMailetProcessor processor){  this.mailet=mailet;  this.logger=logger;  this.processor=processor;}  }
class C{  @Override public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  public boolean isGroupColumn(String columnName){  if (columnName == null || m_groups.size() == 0)   return false;  for (int i=0; i < m_groups.size(); i++) {    if (columnName.equals(m_groups.get(i)))     return true;  }  return false;}  }
class C{  public DoublyIndexedTable(int c){  initialCapacity=c;  table=new Entry[c];}  }
class C{  Document createNewDocument() throws ParserConfigurationException {  Document result=null;  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();  result=documentBuilder.newDocument();  return result;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
