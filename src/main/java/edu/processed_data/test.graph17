class C{  private <T>T constructObject(Class<T> newClass,Args mode,Stack<Class> stack) throws InstantiationException {  if (Modifier.isAbstract(newClass.getModifiers())) {    throw new InstantiationException();  }  if (Enum.class.isAssignableFrom(newClass)) {    return constructArg(newClass,mode,stack);  }  IllegalArgumentException cause=null;  try {    return newClass.newInstance();  } catch (  Throwable e) {    cause=new IllegalArgumentException(newClass + ":" + mode,e);  }  @SuppressWarnings("unchecked") Constructor<T>[] constructors=(Constructor<T>[])newClass.getDeclaredConstructors();  constructor:   for (  Constructor<T> constructor : constructors) {    Class<?>[] argClass=constructor.getParameterTypes();    Object[] args=new Object[argClass.length];    for (int i=0; i < argClass.length; i++) {      Class<?> cls=argClass[i];      if (cls.isAssignableFrom(HashSet.class)) {        cls=HashSet.class;      } else       if (cls.isAssignableFrom(ArrayList.class)) {        cls=ArrayList.class;      } else       if (cls.isAssignableFrom(HashMap.class)) {        cls=HashMap.class;      } else       if (cls.isAssignableFrom(Object[].class)) {        cls=Object[].class;      }      boolean notnull=false;      Args argMode=mode;      for (      Annotation annotation : constructor.getParameterAnnotations()[i]) {        if (annotation.annotationType().isAssignableFrom(NotNull.class)) {          argMode=Args.VALUES;          notnull=true;        }      }      Object arg=(cls == newClass ? null : constructArg(cls,argMode,stack));      if (notnull && arg == null) {        continue constructor;      }      args[i]=arg;    }    try {      constructor.setAccessible(true);      return constructor.newInstance(args);    } catch (    Throwable e) {      cause=new IllegalArgumentException(constructor + ":" + mode+ ":"+ Arrays.asList(args),e);    }  }  throw (InstantiationException)new InstantiationException().initCause(cause);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public void addPages(){  ISVNRepositorySourceProvider[] repositorySourceProviders=null;  try {    repositorySourceProviders=SVNUIPlugin.getRepositorySourceProviders();  } catch (  Exception e) {  }  if (repositorySourceProviders != null && repositorySourceProviders.length > 0) {    repositorySourceProviderPage=new ConfigurationWizardRepositorySourceProviderPage("source",Policy.bind("NewLocationWizard.heading"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION),repositorySourceProviders);    repositorySourceProviderPage.setDescription(Policy.bind("NewLocationWizard.0"));    addPage(repositorySourceProviderPage);    for (    ISVNRepositorySourceProvider repositorySourceProvider : repositorySourceProviders) {      SVNRepositoryProviderWizardPage wizardPage=repositorySourceProvider.getWizardPage();      addPage(wizardPage);      wizardPageMap.put(repositorySourceProvider,wizardPage);    }  }  mainPage=new ConfigurationWizardMainPage("main",Policy.bind("NewLocationWizard.heading"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION));  if (properties != null) {    mainPage.setProperties(properties);  }  mainPage.setDescription(Policy.bind("NewLocationWizard.description"));  mainPage.setDialogSettings(getDialogSettings());  addPage(mainPage);}  }
class C{  public void claimCodeName() throws LoginFailedException, RemoteServerException {  ClaimCodenameMessage claimCodenameMessage=ClaimCodenameMessage.newBuilder().setCodename(randomCodenameGenerator()).build();  ServerRequest[] requests=CommonRequest.fillRequest(new ServerRequest(RequestType.CLAIM_CODENAME,claimCodenameMessage),api);  api.getRequestHandler().sendServerRequests(requests);  String updatedCodename=null;  try {    api.getInventories().updateInventories(GetInventoryResponse.parseFrom(requests[2].getData()));    api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(requests[4].getData()));    ClaimCodenameResponse claimCodenameResponse=ClaimCodenameResponse.parseFrom(requests[0].getData());    if (claimCodenameResponse.getStatus() != ClaimCodenameResponse.Status.SUCCESS) {      if (claimCodenameResponse.getUpdatedPlayer().getRemainingCodenameClaims() > 0) {        claimCodeName();      }    } else {      updatedCodename=claimCodenameResponse.getCodename();      updateProfile(claimCodenameResponse.getUpdatedPlayer());    }  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  if (updatedCodename != null) {    markTutorial(TutorialStateOuterClass.TutorialState.NAME_SELECTION);    final GetPlayerMessage getPlayerReqMsg=GetPlayerMessage.newBuilder().setPlayerLocale(playerLocale.getPlayerLocale()).build();    requests=CommonRequest.fillRequest(new ServerRequest(RequestType.GET_PLAYER,getPlayerReqMsg),api);    api.getRequestHandler().sendServerRequests(requests);    try {      updateProfile(GetPlayerResponse.parseFrom(requests[0].getData()));      api.getInventories().updateInventories(GetInventoryResponse.parseFrom(requests[2].getData()));      api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(requests[4].getData()));    } catch (    InvalidProtocolBufferException e) {      throw new RemoteServerException(e);    }  }}  }
class C{  public boolean includesDate(Date date){  return super.includes(timestampToDate(date));}  }
class C{  @Override public void run(){  while (out == null) {synchronized (mutex) {      try {        mutex.wait();      } catch (      InterruptedException e) {      }    }  }  assert out != null;  ContentOutputStream outStream=new ContentOutputStream(out);  try {    AudioSystem.write(audio,audioType,outStream);    outStream.flush();    outStream.close();    Log.i(Mary.LOG,"Finished writing output");  } catch (  IOException ioe) {    Log.i(Mary.LOG,"Cannot write output, client seems to have disconnected. ",ioe);    maryRequest.abort();  }}  }
class C{  public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper){  return new UnwrappingBeanPropertyWriter(this,unwrapper);}  }
class C{  public WildcardFileFilter(List<String> wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard list must not be null");  }  this.wildcards=wildcards.toArray(new String[wildcards.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public static long ticks2microsec(long tick,double tempoMPQ,int resolution){  return (long)(((double)tick) * tempoMPQ / resolution);}  }
class C{  private void startWith(){  Observable.just(6).startWith(8).compose(bindToLifecycle()).subscribe(null);}  }
class C{  public static void register(String modelName,IWindModel model,int awesomeness){  models.put(modelName,model);  if (modelName.equalsIgnoreCase(userModelChoice)) {    awesomeness=Integer.MAX_VALUE;  }  if (awesomeness > best) {    best=awesomeness;    activeModel=model;  }}  }
class C{  public JList createList(){  JList list=new JList(m_model);  list.setSelectionModel(m_model);  return list;}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap){  return isDark(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2);}  }
class C{  boolean isXML11Version(){  return xml11Version;}  }
class C{  public void parseLib(Map<String,Object> dataModel,String fullText) throws ParseException {  Matcher m;  fullText=tmplHelper.normalizeText(fullText);  m=commentPat.matcher(fullText);  if (!m.find()) {    throw new ParseException("Missing file top comment");  }  String introText=tmplHelper.stripCommentLeadingAsterix(tmplHelper.cleanTextValue(m.group(1)));  dataModel.put("introText",introText);  Matcher introm=tmplHelper.getFirstLineMatcher(introText);  if (introm.matches()) {    dataModel.put("pageTitle",tmplHelper.cleanTextValue(introm.group(1)));    dataModel.put("pageDesc",tmplHelper.cleanTextValue(introm.group(2)));  }  String currentSectionName="default";  Map<String,Object> sectionInfo=makeObjectMap();  sectionInfo.put("name",currentSectionName);  sectionInfo.put("title",null);  sectionInfo.put("type","default");  sectionInfo.put("comment","");  Map<String,Map<String,Object>> sectionEntryMap=makeDataMap();  sectionInfo.put("entryMap",sectionEntryMap);  Map<String,Map<String,Object>> entryMap=makeDataMap();  Map<String,Map<String,Object>> sectionMap=makeDataMap();  sectionMap.put("default",sectionInfo);  while (m.find()) {    String comment=tmplHelper.cleanTextValue(m.group(1));    Matcher subm;    subm=sectionPat.matcher(comment);    if (subm.matches()) {      currentSectionName=tmplHelper.cleanTextValue(subm.group(1));      sectionInfo=makeObjectMap();      sectionInfo.put("name",currentSectionName);      sectionInfo.put("title",currentSectionName);      sectionInfo.put("type","sub");      sectionInfo.put("comment",tmplHelper.cleanTextValue(tmplHelper.stripCommentLeadingAsterix(subm.group(2))));      sectionEntryMap=makeDataMap();      sectionInfo.put("entryMap",sectionEntryMap);      sectionMap.put(currentSectionName,sectionInfo);    } else {      subm=entryPat.matcher(comment);      if (subm.matches()) {        String entryTitle=tmplHelper.cleanTextValue(subm.group(1));        String entryBody=tmplHelper.cleanTextValue(subm.group(2));        String postEntryText=fullText.substring(m.end());        try {          Map<String,Object> entryInfo=parseEntry(entryTitle,entryBody,postEntryText);          entryInfo.put("sectionName",currentSectionName);          String entryName=(String)entryInfo.get("name");          if (entryName == null || entryName.isEmpty()) {            throw new ParseException("Could not determine a formal name for the entry (function, macro or variable name)");          }          if (entryMap.containsKey(entryName)) {            throw new ParseException("Duplicate entry: " + entryName);          }          entryMap.put(entryName,entryInfo);          sectionEntryMap.put(entryName,entryInfo);        } catch (        ParseException e) {          throw new ParseException("Error parsing entry '" + entryTitle + "': "+ e.getMessage(),e);        }      } else {        ;      }    }  }  msgHandler.logInfo(" - entries: " + entryMap.size() + ", sections: "+ sectionMap.size());  dataModel.put("sectionMap",sectionMap);  dataModel.put("entryMap",entryMap);}  }
class C{  public boolean interiorContains(S2Point p){  return interiorContains(new S2LatLng(p));}  }
class C{  public boolean isNaN(){  return (nans == QNAN) || (nans == SNAN);}  }
class C{  synchronized void undo(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  if (!undoStack.empty()) {    Stack<Operation> redoStack=getRedoStack(editor);    Operation op=undoStack.pop();    push(op,redoStack);    op.undo(editor);    while (!undoStack.empty() && op.canMerge(undoStack.peek())) {      op=undoStack.pop();      push(op,redoStack);      op.undo(editor);    }  }}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  private T guessX(final T targetY,final T[] x,final T[] y,final int start,final int end){  for (int i=start; i < end - 1; ++i) {    final int delta=i + 1 - start;    for (int j=end - 1; j > i; --j) {      x[j]=x[j].subtract(x[j - 1]).divide(y[j].subtract(y[j - delta]));    }  }  T x0=field.getZero();  for (int j=end - 1; j >= start; --j) {    x0=x[j].add(x0.multiply(targetY.subtract(y[j])));  }  return x0;}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  public static String contextualEncode(String s,Type t){  return _encode(s,t,false,true);}  }
class C{  public MessagesGetChatQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){  super(client,"messages.getChat",ChatFull.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public void addHeader(Header header){  if (header == null) {    return;  }  headers.add(header);}  }
class C{  public void insertAudio(String inputtype,String locale,String voice,String inputtext,byte[] audio) throws SQLException {  insertAudio(inputtype,locale,voice,null,null,null,inputtext,audio);}  }
class C{  public void notifyDataSetInvalidated(){  mDataSetObservable.notifyInvalidated();}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public static <T extends PsiElement>boolean processChildrenOfType(PsiElement element,Processor<T> processor,Class<T> psiClass){  return processChildrenOfType(element,processor,psiClass,false);}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public CmplExpr newCmplExpr(Value op1,Value op2){  return new JCmplExpr(op1,op2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_PAUSE_END_OTHER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390191,value0,value1);}  }
class C{  @Override public boolean offer(E o){  int allWorkingThreads=executor.getActiveCount() + super.size();  return allWorkingThreads < executor.getPoolSize() && super.offer(o);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof GenericEntity))   return false;  try {    return this.compareTo((GenericEntity)obj) == 0;  } catch (  ClassCastException e) {    return false;  }}  }
class C{  @SuppressWarnings("unused") private void mapColumns(String[] columns){  for (int i=0; i < columns.length; i++) {    final String target=mProjectionMap.get(columns[i]);    if (target != null) {      columns[i]=target;    }  }}  }
class C{  @Subscribe public void onEvent(LoginEventResult result){  if (result.isLoggedIn()) {    LatLng latLng=LocationManager.getInstance(MainActivity.this).getLocation();    if (latLng != null) {      nianticManager.getCatchablePokemon(latLng.latitude,latLng.longitude,0D);    } else {      Snackbar.make(findViewById(R.id.root),getString(R.string.toast_login_error),Snackbar.LENGTH_LONG).show();    }  }}  }
class C{  public void save(SampleAttributeTable sampleAttributeTable,TableEdit edit){  sampleAttributeTable.clear();  sampleAttributeTable.getSampleOrder().addAll(samplesOrder);  if ((attributesOrder.size() - hiddenAttribute2Data.size()) == 0) {    if (edit != null && edit.getOp() == Operation.Append && edit.getCol() == 0) {      sampleAttributeTable.addAttribute(edit.getName(),"",true);      for (      String attribute : attributesOrder) {        if (sampleAttributeTable.isHiddenAttribute(attribute)) {          sampleAttributeTable.addAttribute(attribute,hiddenAttribute2Data.get(attribute),true,true);        }      }    }    if (edit != null && edit.getOp() == Operation.Unhide) {      sampleAttributeTable.addAttribute(edit.getName(),"",true);      for (      String attribute : attributesOrder) {        if (sampleAttributeTable.isHiddenAttribute(attribute)) {          final Map<String,Object> sample2value=hiddenAttribute2Data.get(attribute);          String originalName=attribute.replaceAll(" \\[hidden\\]$","");          sampleAttributeTable.addAttribute(originalName,sample2value,true,true);        }      }    }  } else {    int col=1;    for (    String attribute : attributesOrder) {      if (sampleAttributeTable.isHiddenAttribute(attribute)) {        final Map<String,Object> sample2value=hiddenAttribute2Data.get(attribute);        if (edit != null && edit.getOp() == Operation.Unhide) {          String originalName=attribute.replaceAll(" \\[hidden\\]$","");          if (Arrays.asList(edit.getNames()).contains(originalName))           attribute=originalName;        }        sampleAttributeTable.addAttribute(attribute,sample2value,true,true);      } else {        Map<String,Object> sample2value=new HashMap<>();        for (int row=1; row < gridBase.getRowCount(); row++) {          String sample=getRowName(row);          Object item=gridBase.getRows().get(row).get(col).getItem();          sample2value.put(sample,item != null ? item.toString() : "");        }        if (edit != null && edit.getOp() == Operation.Hide && Arrays.asList(edit.getNames()).contains(attribute) && !sampleAttributeTable.isHiddenAttribute(attribute))         attribute=attribute + " [hidden]"; else         if (edit != null && edit.getOp() == Operation.RenameAttribute && col == edit.getCol())         attribute=edit.getName();        sampleAttributeTable.addAttribute(attribute,sample2value,true,true);        if (edit != null && edit.getOp() == Operation.Append && col == edit.getCol()) {          sampleAttributeTable.addAttribute(edit.getName(),"",true);        }        col++;      }    }    if (edit != null && edit.getOp() == Operation.Delete) {      for (      String attribute : edit.getNames()) {        sampleAttributeTable.removeAttribute(attribute);      }    }  }  if (edit != null && (edit.getOp() == Operation.MoveLeft || edit.getOp() == Operation.MoveRight)) {    Set<String> toMove=new HashSet<>();    toMove.addAll(Arrays.asList(edit.getNames()));    String[] oldOrder=attributesOrder.toArray(new String[attributesOrder.size()]);    String[] newOrder=new String[attributesOrder.size()];    if (edit.getOp() == Operation.MoveLeft) {      oldOrder=Basic.reverse(oldOrder);    }    if (!toMove.contains(oldOrder[oldOrder.length - 1])) {      int oldPos=0;      int newPos=0;      while (oldPos < oldOrder.length) {        if (toMove.contains(oldOrder[oldPos])) {          int oldNext=oldPos;          while (oldNext < oldOrder.length && toMove.contains(oldOrder[oldNext])) {            oldNext++;          }          if (oldNext < oldOrder.length) {            newOrder[newPos++]=oldOrder[oldNext];          }          for (int i=oldPos; i < oldNext; i++) {            newOrder[newPos++]=oldOrder[i];          }          oldPos=oldNext + 1;        } else         newOrder[newPos++]=oldOrder[oldPos++];      }      if (newPos != oldPos)       System.err.println("Internal error: " + newPos + "!="+ oldPos);      attributesOrder.clear();      if (edit.getOp() == Operation.MoveLeft) {        newOrder=Basic.reverse(newOrder);      }      attributesOrder.addAll(Arrays.asList(newOrder));      sampleAttributeTable.getAttributeOrder().clear();      sampleAttributeTable.getAttributeOrder().addAll(attributesOrder);    }  }  if (edit != null && (edit.getOp() == Operation.MoveSamplesDown || edit.getOp() == Operation.MoveSamplesUp)) {    Set<String> toMove=new HashSet<>();    toMove.addAll(Arrays.asList(edit.getNames()));    String[] oldOrder=samplesOrder.toArray(new String[samplesOrder.size()]);    String[] newOrder=new String[samplesOrder.size()];    if (edit.getOp() == Operation.MoveSamplesUp) {      oldOrder=Basic.reverse(oldOrder);    }    if (!toMove.contains(oldOrder[oldOrder.length - 1])) {      int oldPos=0;      int newPos=0;      while (oldPos < oldOrder.length) {        if (toMove.contains(oldOrder[oldPos])) {          int oldNext=oldPos;          while (oldNext < oldOrder.length && toMove.contains(oldOrder[oldNext])) {            oldNext++;          }          if (oldNext < oldOrder.length) {            newOrder[newPos++]=oldOrder[oldNext];          }          for (int i=oldPos; i < oldNext; i++) {            newOrder[newPos++]=oldOrder[i];          }          oldPos=oldNext + 1;        } else         newOrder[newPos++]=oldOrder[oldPos++];      }      if (newPos != oldPos)       System.err.println("Internal error: " + newPos + "!="+ oldPos);      samplesOrder.clear();      if (edit.getOp() == Operation.MoveSamplesUp) {        newOrder=Basic.reverse(newOrder);      }      samplesOrder.addAll(Arrays.asList(newOrder));      sampleAttributeTable.getSampleOrder().clear();      sampleAttributeTable.getSampleOrder().addAll(samplesOrder);    }  }  for (  String attribute : secretAttributesOrder) {    sampleAttributeTable.addAttribute(attribute,secretAttribute2Data.get(attribute),true,true);  }}  }
class C{  public static String formatFraction(Fraction f){  return getImproperInstance().format(f);}  }
class C{  public static void main(String[] args){  String s="{age}>10";  TimeStamp t=TimeStamp.create();  for (int i=0; i < 100000; i++) {    Map<String,Object> m=new HashMap<String,Object>();    m.put("age",i);    try {      VEngine.test(s,m);    } catch (    Exception e) {      e.printStackTrace();    }  }  System.out.println(t.past() + "ms");}  }
class C{  public MessagesCreateChatQuery title(String value){  return unsafeParam("title",value);}  }
class C{  @RequestMapping(value="/race-results",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceResult> createRaceResult(@RequestBody RaceResult raceResult) throws URISyntaxException {  log.debug("REST request to save RaceResult : {}",raceResult);  if (raceResult.getRaceResultId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("raceResult","idexists","A new raceResult cannot already have an ID")).body(null);  }  RaceResult result=raceResultRepository.save(raceResult);  return ResponseEntity.created(new URI("/api/race-results/" + result.getRaceResultId())).headers(HeaderUtil.createEntityCreationAlert("raceResult",result.getRaceResultId().toString())).body(result);}  }
class C{  private boolean isIllegalIndex(int i){  return i < curStartIndex || i >= curEndIndex;}  }
class C{  public float[] mult(float[] vec4f){  if (null == vec4f || vec4f.length != 4) {    logger.warning("invalid array given, must be nonnull and length 4");    return null;  }  float x=vec4f[0], y=vec4f[1], z=vec4f[2], w=vec4f[3];  vec4f[0]=m00 * x + m01 * y + m02 * z + m03 * w;  vec4f[1]=m10 * x + m11 * y + m12 * z + m13 * w;  vec4f[2]=m20 * x + m21 * y + m22 * z + m23 * w;  vec4f[3]=m30 * x + m31 * y + m32 * z + m33 * w;  return vec4f;}  }
class C{  public void addItemBoundsListener(ItemBoundsListener ibl){  if (m_bounders == null)   m_bounders=new CopyOnWriteArrayList();  m_bounders.add(ibl);}  }
class C{  public static double[] computeLogPowerSpectrum(final double[] signal){  double[] spectrum=computePowerSpectrum(signal);  for (int i=0; i < spectrum.length; i++) {    spectrum[i]=MathUtils.db(spectrum[i]);  }  return spectrum;}  }
class C{  public static byte[] bufferedImageToJPEG(BufferedImage img,float quality) throws IOException {  Iterator<ImageWriter> writers=ImageIO.getImageWritersBySuffix("jpeg");  if (!writers.hasNext())   throw new IllegalStateException("No writers for jpeg...");  ImageWriter writer=(ImageWriter)writers.next();  ImageWriteParam imageWriteParam=writer.getDefaultWriteParam();  imageWriteParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);  imageWriteParam.setCompressionQuality(quality);  IIOImage iioImage=new IIOImage(img,null,null);  ByteArrayOutputStream baos=new ByteArrayOutputStream(img.getWidth() * img.getHeight() * 2);  MemoryCacheImageOutputStream mcios=new MemoryCacheImageOutputStream(baos);  writer.setOutput(mcios);  writer.write(null,iioImage,imageWriteParam);  baos.flush();  mcios.close();  return baos.toByteArray();}  }
class C{  public void init$Children(){}  }
class C{  XSWildcardDecl traverseAnyAttribute(Element elmNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){  Object[] attrValues=fAttrChecker.checkAttributes(elmNode,false,schemaDoc);  XSWildcardDecl wildcard=traverseWildcardDecl(elmNode,attrValues,schemaDoc,grammar);  fAttrChecker.returnAttrArray(attrValues,schemaDoc);  return wildcard;}  }
class C{  public static ServiceType[] toServiceType(Class[] classes) throws MarshalException {  if (classes == null)   return null;  if (classes.length == 0)   return empty;  ServiceType[] stypes=new ServiceType[classes.length];synchronized (serviceMap) {    for (int i=classes.length; --i >= 0; ) {      stypes[i]=toServiceType(classes[i]);    }  }  return stypes;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200534,skillcaster,skilltarget,skillname);}  }
class C{  public Builder padding(Point padding){  this.padding=padding;  return this;}  }
class C{  public boolean equals(Math_Vector other){  if (this.x == other.x && this.y == other.y)   return true;  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_CANT_UNSUMMON_STATE(String value0){  return new SM_SYSTEM_MESSAGE(1400735,value0);}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    refreshListOfFilesFragment();  } else {    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  public final void closeFallbackInputStream() throws DataFallbackException {  if (getInput() != null) {    try {      if (LOG.isDebugEnabled())       LOG.debug("closeInputStream() : Closing the file reader for the file " + dataFile.getName());      getInput().close();    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    } finally {      setInput(null);    }  }}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public BlockVector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public static boolean isClassSupport(String clzName){  try {    Class.forName(clzName);    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  private synchronized void reopenIndexSearcher(boolean firstTimeThrough){  lock.writeLock().lock();  try {    if (luceneIndexSearcher != null) {      luceneIndexSearcher.getIndexReader().close();    }    luceneIndexSearcher=new IndexSearcher(DirectoryReader.open(luceneDirectory));  } catch (  IOException reopenException) {    if (firstTimeThrough) {      IndexWriterConfig indexWriterConfig=new IndexWriterConfig(LUCENE_ANALYZER);      try (IndexWriter ignored=new IndexWriter(luceneDirectory,indexWriterConfig)){      } catch (      IOException emptyIndexWriteException) {        luceneIndexIsHealthy=false;        String message=String.format("Unable to write empty index to %s:",luceneIndexPath);        LOG.error(message,emptyIndexWriteException);        throw new RuntimeException(emptyIndexWriteException);      }      reopenIndexSearcher(false);    } else {      luceneIndexIsHealthy=false;      String message=String.format("Unable to open index searcher for %s:",luceneIndexPath);      LOG.error(message,reopenException);      throw new RuntimeException(reopenException);    }  } finally {    lock.writeLock().unlock();  }}  }
class C{  public K[] keys(K[] a){  int size=size();  if (a.length < size) {    a=(K[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      a[j++]=k[i];    }  }  return a;}  }
class C{  final void persistUpdatedAlarm(Alarm newAlarm,boolean showSnackbar){  mAlarmController.scheduleAlarm(newAlarm,showSnackbar);  mAlarmController.save(newAlarm);}  }
class C{  public PhotosCreateCommentQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  private boolean checkCameraHardware(Context context){  if (isInEditMode()) {    return false;  }  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    return true;  } else {    return false;  }}  }
class C{  public ResourcesPoet addBool(String name,boolean value){  addBool(name,String.valueOf(value));  return this;}  }
class C{  public ScrollImplementor(ScrollModel model,ScrollView view){  this.model=model;  this.view=view;}  }
class C{  public MarketSearchQueryWithExtended albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  @SafeVarargs public final Region<S> buildConvex(final Hyperplane<S>... hyperplanes){  if ((hyperplanes == null) || (hyperplanes.length == 0)) {    return null;  }  final Region<S> region=hyperplanes[0].wholeSpace();  BSPTree<S> node=region.getTree(false);  node.setAttribute(Boolean.TRUE);  for (  final Hyperplane<S> hyperplane : hyperplanes) {    if (node.insertCut(hyperplane)) {      node.setAttribute(null);      node.getPlus().setAttribute(Boolean.FALSE);      node=node.getMinus();      node.setAttribute(Boolean.TRUE);    } else {      SubHyperplane<S> s=hyperplane.wholeHyperplane();      for (BSPTree<S> tree=node; tree.getParent() != null && s != null; tree=tree.getParent()) {        final Hyperplane<S> other=tree.getParent().getCut().getHyperplane();        final SplitSubHyperplane<S> split=s.split(other);switch (split.getSide()) {case HYPER:          if (!hyperplane.sameOrientationAs(other)) {            return getComplement(hyperplanes[0].wholeSpace());          }        break;case PLUS:      throw new MathIllegalArgumentException(LocalizedGeometryFormats.NOT_CONVEX_HYPERPLANES);default :    s=split.getMinus();}}}}return region;}  }
class C{  public boolean isString(){  return value instanceof String;}  }
class C{  @Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){  Calendar cal=getCalendar();  dateTimeUnit.setDay(1);  dateTimeUnit=cal.minusMonths(dateTimeUnit,11);  List<Period> periods=Lists.newArrayList();  for (int i=0; i < 12; i++) {    periods.add(createPeriod(dateTimeUnit,cal));    dateTimeUnit=cal.plusMonths(dateTimeUnit,1);  }  return periods;}  }
class C{  private void finish(){  mmLastY=0;  mRunning=false;  removeCallbacks(this);  if (!mAbort) {    autoScrollFinished();  }}  }
class C{  private static void splitAdd(final double a[],final double b[],final double ans[]){  ans[0]=a[0] + b[0];  ans[1]=a[1] + b[1];  resplit(ans);}  }
class C{  public boolean removeByObject(T obj){  lock.lock();  IObjectInfo<T> oi=null;  try {    if (_objectsMap != null) {      if ((oi=_objectsMap.remove(obj)) != null) {        remove_impl((ObjectInfo<T>)oi);        if (m_Size == 0)         _objectsMap=null;        return true;      }      return false;    }    return removeByObject_impl(obj);  }  finally {    lock.unlock();  }}  }
class C{  public void sendRequest(String url,final IRequestCallback uiUpdater){  Request request=new Request.Builder().url(url).build();  sendRequest(request,uiUpdater);}  }
class C{  public static void println(double x){  out.println(x);}  }
class C{  public NotesEditCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public UsersGetFollowersQueryWithFields count(Integer value){  return unsafeParam("count",value);}  }
class C{  private static URL classpathOf(Class<?> c){  String name="/" + c.getName().replace('.','/') + ".class";  try {    URL url=IsolatedClassLoaderSuite.class.getResource(name);    if (url.getProtocol().equals("file")) {      String file=url.getPath();      if (file.endsWith(name))       file=file.substring(0,file.length() - name.length() + 1);      return new URL("file",null,file);    } else     if (url.getProtocol().equals("jar")) {      String file=url.getPath();      int i=file.lastIndexOf('!');      if (i >= 0)       file=file.substring(0,i);      return new URL(file);    } else     throw new UnsupportedOperationException();  } catch (  MalformedURLException mex) {    return null;  }}  }
class C{  public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$cup$do_action(act_num,parser,stack,top);}  }
class C{  public void remove() throws RecurrenceRuleException {  try {    rule.remove();  } catch (  GenericEntityException e) {    throw new RecurrenceRuleException(e.getMessage(),e);  }}  }
class C{  public void mouseReleased(){  mSnapCandidates.clear();}  }
class C{  private int nodeListGetLength(){  if (fNodeListCache == null) {    if (needsSyncChildren()) {      synchronizeChildren();    }    if (firstChild == null) {      return 0;    }    if (firstChild == lastChild()) {      return 1;    }    fNodeListCache=ownerDocument.getNodeListCache(this);  }  if (fNodeListCache.fLength == -1) {    int l;    ChildNode n;    if (fNodeListCache.fChildIndex != -1 && fNodeListCache.fChild != null) {      l=fNodeListCache.fChildIndex;      n=fNodeListCache.fChild;    } else {      n=firstChild;      l=0;    }    while (n != null) {      l++;      n=n.nextSibling;    }    fNodeListCache.fLength=l;  }  return fNodeListCache.fLength;}  }
class C{  @DELETE @Path("/exclusions/experiment1/{experimentID_1}/experiment2/{experimentID_2}") @ApiOperation(value="Delete a mutual exclusion relation",notes="Can only delete mutual exclusion relations that currently " + "exists.  This operation is symmetric") @Timed public Response removeExclusions(@PathParam("experimentID_1") @ApiParam(value="Experiment ID 1") final Experiment.ID experimentID_1,@PathParam("experimentID_2") @ApiParam(value="Experiment ID 2") final Experiment.ID experimentID_2,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID_1);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID_1);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);  mutex.deleteExclusion(experimentID_1,experimentID_2,authorization.getUserInfo(userName));  return httpHeader.headers(NO_CONTENT).build();}  }
class C{  void removePreDrawListener(){  if (mIsAttachedToWindow) {    if (mOnPreDrawListener != null) {      final ViewTreeObserver vto=getViewTreeObserver();      vto.removeOnPreDrawListener(mOnPreDrawListener);    }  }  mNeedsPreDrawListener=false;}  }
class C{  TaskManager.Task[] createTasks(){  TaskManager.Task[] tmp=new TaskManager.Task[handles.length];  for (int i=0; i < handles.length; i++) {    tmp[i]=new ParticipantTask(getPool(),getMgr(),this,handles[i]);  }  return tmp;}  }
class C{  @SuppressLint("DefaultLocale") public static String formatDuration(int duration){  duration/=1000;  int minute=duration / 60;  int hour=minute / 60;  minute%=60;  int second=duration % 60;  if (hour != 0)   return String.format("%2d:%02d:%02d",hour,minute,second); else   return String.format("%02d:%02d",minute,second);}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  public DuplicateAionObjectException(String s){  super(s);}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public MarshalledInstanceOutputStream(OutputStream objOut,OutputStream locOut,Collection context) throws IOException {  super(objOut,context);  this.locOut=new ObjectOutputStream(locOut);  hadAnnotations=false;}  }
class C{  public static UByte valueOf(int value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(value));}  }
class C{  @Override public void addObservation(final double[] x,final double y) throws MathIllegalArgumentException {  if ((!this.hasIntercept && x.length != nvars) || (this.hasIntercept && x.length + 1 != nvars)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INVALID_REGRESSION_OBSERVATION,x.length,nvars);  }  if (!this.hasIntercept) {    include(x.clone(),1.0,y);  } else {    final double[] tmp=new double[x.length + 1];    System.arraycopy(x,0,tmp,1,x.length);    tmp[0]=1.0;    include(tmp,1.0,y);  }  ++nobs;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof IntArrayWrapper) {    return Arrays.equals(data,((IntArrayWrapper)other).data);  }  return false;}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator -do=(char|word|all) [-summaryDir=summaries/] [-modelDir=models/]" + "[-wordMin=#] [-wordMax=#] [-wordDist=#] [-charMin=#] [-charMax=#] [-charDist=#] [-o=outFile] [-t=#]" + "[-s] [-use=o|d] [-progress]");  System.err.println("wordMin=#\tMin word n-gram size.\nwordMax=#\tMax word n-gram size.\nwordDist=#\tWord n-gram window\n" + "charMin=#\tMin char n-gram size.\ncharMax=#\tMax char n-gram size.\ncharDist=#\tChar n-gram window.\n" + "o=outFile\tThe file to output data. Default is stdout.\n-t=#\tNumber of threads. Defaults to 2.\n"+ "s\tFor non-verbose output (silent).\n"+ "progress\tFor progress indication (even in silent mode).\n"+ "use=o|d\tUse [o]ccurences or average [d]istance to assign weights to the graph. Defaults to o.\n"+ "-?\tShow this screen.");}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public void clear(){  if (mTimer != null) {    mTimer.cancel();    mTimer=null;  }  mHandler.removeMessages(MARKER_EXPIRED);}  }
class C{  public LanguageDetectionResult detect(String text,String expectedBcp47Tag) throws UnsupportedLanguageException {  LanguageDetectionResult languageDetectionResult=new LanguageDetectionResult();  try {    String detectorLanguageForBcp47Tag=getDetectorLanguageForBcp47Tag(expectedBcp47Tag);    Detector detector=getDetectorForLanguage(detectorLanguageForBcp47Tag);    detector.append(text);    String detect=detector.detect();    ArrayList<Language> probabilities=detector.getProbabilities();    for (    Language probability : probabilities) {      if (probability.lang.equals(detectorLanguageForBcp47Tag)) {        languageDetectionResult.setProbabilityExpected(probability.prob);      }    }    languageDetectionResult.setProbability(detector.getProbabilities().get(0).prob);    languageDetectionResult.setDetected(detect);    languageDetectionResult.setExpected(detectorLanguageForBcp47Tag);    languageDetectionResult.setDetector(detector);  } catch (  LangDetectException lde) {    logger.error("language detection failed\ntext: {}",text);    languageDetectionResult.setLangDetectException(lde);  }  return languageDetectionResult;}  }
class C{  private void performTemplateOnEntryCoreSA(Context context,ITemplateHolder template,IEntryHolder entry,boolean makeWaitForInfo,boolean needRematch) throws TransactionConflictException, EntryDeletedException, TemplateDeletedException, TransactionNotActiveException, SAException, NoMatchException, FifoException {  if (!context.isNonBlockingReadOp() && !needRematch)   needRematch=!template.isMatchByID() && entry.hasShadow(true);  boolean tryMaster=true;  boolean tryShadow=false;  if (!context.isNonBlockingReadOp()) {    if (template.isMatchByID()) {      tryShadow=entry.hasShadow(true);    } else {      if (needRematch) {        MatchResult mr=template.match(_cacheManager,entry,-1,null,true,context,_templateScanner.getRegexCache());        tryMaster=(mr == MatchResult.MASTER || mr == MatchResult.MASTER_AND_SHADOW);        tryShadow=(mr == MatchResult.SHADOW || mr == MatchResult.MASTER_AND_SHADOW);      }    }  } else {    tryMaster=(context.getLastMatchResult() == MatchResult.MASTER || context.getLastMatchResult() == MatchResult.MASTER_AND_SHADOW);    tryShadow=(context.getLastMatchResult() == MatchResult.SHADOW || context.getLastMatchResult() == MatchResult.MASTER_AND_SHADOW);  }  if (!tryMaster && !tryShadow)   throw NO_MATCH_EXCEPTION;  if (template.isInitiatedEvictionOperation()) {    if (!tryMaster)     throw NO_MATCH_EXCEPTION;    tryShadow=false;  }  if (tryMaster) {    try {      performTemplateOnEntryCoreSA_impl(context,template,entry,makeWaitForInfo,false,tryShadow);      return;    } catch (    TransactionConflictException ex) {      if (!template.isReadOperation())       tryShadow=false;      if (!tryShadow)       throw ex;      try {        performTemplateOnEntryCoreSA_impl(context,template,entry,makeWaitForInfo,true,true);        return;      } catch (      Exception ex_) {      }      throw ex;    }  }  performTemplateOnEntryCoreSA_impl(context,template,entry,makeWaitForInfo,true,true);  return;}  }
class C{  public long available(){  return arr.length - pos;}  }
class C{  public static long duelAbility(final PokemonId pokemonId,final PokemonMove move1,final PokemonMove move2,final int attackIV,final int defenseIV,final int staminaIV){  final double duelAbility=PokemonCalculationUtils.gymOffense(pokemonId,move1,move2,attackIV) * PokemonCalculationUtils.tankiness(pokemonId,defenseIV,staminaIV);  return Math.round(duelAbility);}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);  if (null == manager)   return false;  NetworkInfo info=manager.getActiveNetworkInfo();  if (null == info || !info.isAvailable())   return false;  return true;}  }
class C{  private static double tricube(final double x){  final double absX=FastMath.abs(x);  if (absX >= 1.0) {    return 0.0;  }  final double tmp=1 - absX * absX * absX;  return tmp * tmp * tmp;}  }
class C{  void sixLock(Object obj,long txNum){  Object anchor=getAnchor(obj);  txWaitMap.put(txNum,anchor);synchronized (anchor) {    Lockers lks=prepareLockers(obj);    if (hasSixLock(lks,txNum))     return;    try {      long timestamp=System.currentTimeMillis();      while (!sixLockable(lks,txNum) && !waitingTooLong(timestamp)) {        avoidDeadlock(lks,txNum,SIX_LOCK);        lks.requestSet.add(txNum);        anchor.wait(MAX_TIME);        lks.requestSet.remove(txNum);      }      if (!sixLockable(lks,txNum))       throw new LockAbortException();      lks.sixLocker=txNum;      getObjectSet(txNum).add(obj);    } catch (    InterruptedException e) {      throw new LockAbortException();    }  }  txWaitMap.remove(txNum);}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  @Override public TreeSet<DimensionRow> findAllOrderedDimensionRows(){  return dimensionRows;}  }
class C{  public static CompiledScript compileScriptFile(String filePath) throws ScriptException, IOException {  Assert.notNull("filePath",filePath);  CompiledScript script=parsedScripts.get(filePath);  if (script == null) {    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByExtension(getFileExtension(filePath));    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for location: " + filePath);    }    try {      Compilable compilableEngine=(Compilable)engine;      URL scriptUrl=FlexibleLocation.resolveLocation(filePath);      BufferedReader reader=new BufferedReader(new InputStreamReader(scriptUrl.openStream()));      script=compilableEngine.compile(reader);      if (Debug.verboseOn()) {        Debug.logVerbose("Compiled script " + filePath + " using engine "+ engine.getClass().getName(),module);      }    } catch (    ClassCastException e) {      if (Debug.verboseOn()) {        Debug.logVerbose("Script engine " + engine.getClass().getName() + " does not implement Compilable",module);      }    }    if (script != null) {      parsedScripts.putIfAbsent(filePath,script);    }  }  return script;}  }
class C{  public String toString(){  return Float.toString(start) + " " + Float.toString(mid)+ " "+ Float.toString(end);}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public static String formatQuantity(Double quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public void updateSymbol(TextSymbolizer textSymbolizer){  for (  VendorOptionInterface vendorOption : vendorOptionList) {    boolean displayVendorOption=VendorOptionManager.getInstance().isAllowed(vendorOptionVersionsList,vendorOption.getVendorOption());    if (displayVendorOption) {      vendorOption.updateSymbol(textSymbolizer);    }  }}  }
class C{  public Location toLocation(World world){  return new Location(world,x,y,z);}  }
class C{  @Override public void log(final DataTagCacheObject dataTagCacheObject){  tagCache.acquireReadLockOnKey(dataTagCacheObject.getId());  try {    TAGLOG.info(dataTagCacheObject.toString());  }  finally {    tagCache.releaseReadLockOnKey(dataTagCacheObject.getId());  }}  }
class C{  protected void updateNodeData(int r,boolean added){  if (added) {    m_links.addRow();  } else {    m_nodeTuples.invalidate(r);    m_links.removeRow(r);  }}  }
class C{  public static int spToPX(final Context ctx,float sp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,ctx.getResources().getDisplayMetrics());}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  private List<Contentlet> removeNonExactMatches(List<Contentlet> contentlets){  if (exactFieldLimitations.isEmpty()) {    return contentlets;  } else {    List<Contentlet> correctMatches=new ArrayList<Contentlet>();    for (    Contentlet contentlet : contentlets) {      for (      Entry<String,String> fieldLimitation : exactFieldLimitations.entrySet()) {        Object fieldValue=contentlet.get(fieldLimitation.getKey());        if (fieldValue != null && fieldValue.toString().equalsIgnoreCase(fieldLimitation.getValue())) {          correctMatches.add(contentlet);        }      }    }    return correctMatches;  }}  }
class C{  public double pelzGood(double d,int n){  final double sqrtN=FastMath.sqrt(n);  final double z=d * sqrtN;  final double z2=d * d * n;  final double z4=z2 * z2;  final double z6=z4 * z2;  final double z8=z4 * z4;  double ret=0;  double sum=0;  double increment=0;  double kTerm=0;  double z2Term=MathUtils.PI_SQUARED / (8 * z2);  int k=1;  for (; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm=2 * k - 1;    increment=FastMath.exp(-z2Term * kTerm * kTerm);    sum+=increment;    if (increment <= PG_SUM_RELATIVE_ERROR * sum) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  ret=sum * FastMath.sqrt(2 * FastMath.PI) / z;  final double twoZ2=2 * z2;  sum=0;  kTerm=0;  double kTerm2=0;  for (k=0; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm=k + 0.5;    kTerm2=kTerm * kTerm;    increment=(MathUtils.PI_SQUARED * kTerm2 - z2) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);    sum+=increment;    if (FastMath.abs(increment) < PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  final double sqrtHalfPi=FastMath.sqrt(FastMath.PI / 2);  ret+=sum * sqrtHalfPi / (3 * z4 * sqrtN);  final double z4Term=2 * z4;  final double z6Term=6 * z6;  z2Term=5 * z2;  final double pi4=MathUtils.PI_SQUARED * MathUtils.PI_SQUARED;  sum=0;  kTerm=0;  kTerm2=0;  for (k=0; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm=k + 0.5;    kTerm2=kTerm * kTerm;    increment=(z6Term + z4Term + MathUtils.PI_SQUARED * (z4Term - z2Term) * kTerm2 + pi4 * (1 - twoZ2) * kTerm2* kTerm2) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);    sum+=increment;    if (FastMath.abs(increment) < PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  double sum2=0;  kTerm2=0;  for (k=1; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm2=k * k;    increment=MathUtils.PI_SQUARED * kTerm2 * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);    sum2+=increment;    if (FastMath.abs(increment) < PG_SUM_RELATIVE_ERROR * FastMath.abs(sum2)) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  ret+=(sqrtHalfPi / n) * (sum / (36 * z2 * z2* z2* z) - sum2 / (18 * z2 * z));  final double pi6=pi4 * MathUtils.PI_SQUARED;  sum=0;  double kTerm4=0;  double kTerm6=0;  for (k=0; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm=k + 0.5;    kTerm2=kTerm * kTerm;    kTerm4=kTerm2 * kTerm2;    kTerm6=kTerm4 * kTerm2;    increment=(pi6 * kTerm6 * (5 - 30 * z2) + pi4 * kTerm4 * (-60 * z2 + 212 * z4) + MathUtils.PI_SQUARED * kTerm2 * (135 * z4 - 96 * z6) - 30 * z6 - 90 * z8) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);    sum+=increment;    if (FastMath.abs(increment) < PG_SUM_RELATIVE_ERROR * FastMath.abs(sum)) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  sum2=0;  for (k=1; k < MAXIMUM_PARTIAL_SUM_COUNT; k++) {    kTerm2=k * k;    kTerm4=kTerm2 * kTerm2;    increment=(-pi4 * kTerm4 + 3 * MathUtils.PI_SQUARED * kTerm2* z2) * FastMath.exp(-MathUtils.PI_SQUARED * kTerm2 / twoZ2);    sum2+=increment;    if (FastMath.abs(increment) < PG_SUM_RELATIVE_ERROR * FastMath.abs(sum2)) {      break;    }  }  if (k == MAXIMUM_PARTIAL_SUM_COUNT) {    throw new MathIllegalStateException(LocalizedCoreFormats.MAX_COUNT_EXCEEDED,MAXIMUM_PARTIAL_SUM_COUNT);  }  return ret + (sqrtHalfPi / (sqrtN * n)) * (sum / (3240 * z6 * z4) + +sum2 / (108 * z6));}  }
class C{  @Override public void onDestroy(){}  }
class C{  private void registerMetricsAppender(){  LoggerContext factory=(LoggerContext)LoggerFactory.getILoggerFactory();  ch.qos.logback.classic.Logger rootLogger=factory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);  InstrumentedAppender appender=new InstrumentedAppender(MetricRegistryFactory.getRegistry());  appender.setContext(rootLogger.getLoggerContext());  appender.start();  rootLogger.addAppender(appender);}  }
class C{  @Override public void applyFacets(XSFacets facets,short presentFacet,short fixedFacet,ValidationContext context) throws InvalidDatatypeFacetException {  if (context == null) {    context=fEmptyContext;  }  applyFacets(facets,presentFacet,fixedFacet,SPECIAL_PATTERN_NONE,context);}  }
class C{  public static Hash of(byte[] data){  return new Hash(hash(data,0,data.length));}  }
class C{  public boolean isScaleEnabled(){  return mIsScaleEnabled;}  }
class C{  public Set<E> keySet(){  return entries.keySet();}  }
class C{  public int hashCode(){  return (ClientMaxPrincipalType.class.hashCode() + Constraint.hash(classes));}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  public static <T>T toCompose(Observable<T> observable) throws LoginFailedException, RemoteServerException {  try {    return observable.toBlocking().first();  } catch (  RuntimeException e) {    if (e.getCause() instanceof AsyncLoginFailedException) {      throw new LoginFailedException(e.getMessage(),e.getCause());    }    if (e.getCause() instanceof AsyncRemoteServerException) {      throw new RemoteServerException(e.getMessage(),e.getCause());    }    throw new AsyncPokemonGoException("Unknown exception occurred. ",e);  }}  }
class C{  public AudioGetByIdQuery(VkApiClient client,UserActor actor,List<String> audios){  super(client,"audio.getById",Utils.buildParametrizedType(List.class,AudioFull.class));  accessToken(actor.getAccessToken());  audios(audios);}  }
class C{  public InnerClassSpecAttr(String a,String b,String c,short d){  inner_class_name=a;  outer_class_name=b;  inner_name=c;  access=d;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  final boolean isReflex(EarClippingVertex vertex){  Vector2 p=vertex.point;  Vector2 p0=vertex.prev.point;  Vector2 p1=vertex.next.point;  Vector2 v1=p.to(p0);  Vector2 v2=p.to(p1);  if (v1.cross(v2) < 0.0) {    return false;  } else {    return true;  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public TransformerException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  @Deprecated public int createDeferredElement(String elementURI,String elementName,Object type){  int elementNodeIndex=createNode(Node.ELEMENT_NODE);  int elementChunk=elementNodeIndex >> CHUNK_SHIFT;  int elementIndex=elementNodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,elementName,elementChunk,elementIndex);  setChunkValue(fNodeURI,elementURI,elementChunk,elementIndex);  setChunkValue(fNodeValue,type,elementChunk,elementIndex);  return elementNodeIndex;}  }
class C{  public ArrayCheckTag(boolean lower,boolean upper){  lowerCheck=lower;  upperCheck=upper;}  }
class C{  private void checkSufficientData(final RealMatrix matrix) throws MathIllegalArgumentException {  int nRows=matrix.getRowDimension();  int nCols=matrix.getColumnDimension();  if (nRows < 2 || nCols < 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_ROWS_AND_COLUMNS,nRows,nCols);  }}  }
class C{  public void nullifyItem(String sItem){  NGramHistogram.put(sItem,0.0);}  }
class C{  @VisibleForTesting public void clear(){  myLastChecked=0;}  }
class C{  public PhotosGetCommentsQuery sort(PhotosGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  public boolean hasChanged(){  return System.identityHashCode(config) != initialHash;}  }
class C{  public NameFileFilter(String[] names){  this(names,null);}  }
class C{  public FTPReply readFTPReply() throws IOException, FTPIllegalReplyException {  int code=0;  ArrayList messages=new ArrayList();  do {    String statement;    do {      statement=read();    } while (statement.trim().length() == 0);    if (statement.startsWith("\n")) {      statement=statement.substring(1);    }    int l=statement.length();    if (code == 0 && l < 3) {      throw new FTPIllegalReplyException();    }    int aux;    try {      aux=Integer.parseInt(statement.substring(0,3));    } catch (    Exception e) {      if (code == 0) {        throw new FTPIllegalReplyException();      } else {        aux=0;      }    }    if (code != 0 && aux != 0 && aux != code) {      throw new FTPIllegalReplyException();    }    if (code == 0) {      code=aux;    }    if (aux > 0) {      if (l > 3) {        char s=statement.charAt(3);        String message=statement.substring(4,l);        messages.add(message);        if (s == ' ') {          break;        } else         if (s == '-') {          continue;        } else {          throw new FTPIllegalReplyException();        }      } else       if (l == 3) {        break;      } else {        messages.add(statement);      }    } else {      messages.add(statement);    }  } while (true);  int size=messages.size();  String[] m=new String[size];  for (int i=0; i < size; i++) {    m[i]=(String)messages.get(i);  }  return new FTPReply(code,m);}  }
class C{  protected boolean enabledGlobally(){  return true;}  }
class C{  public void removeField(SootField f){  checkLevel(SIGNATURES);  if (!f.isDeclared() || f.getDeclaringClass() != this)   throw new RuntimeException("did not declare: " + f.getName());  fields.remove(f);  f.isDeclared=false;}  }
class C{  public NestedViewActionMenu(@NotNull String menuName,@NotNull Icon icon,@NotNull List<List<ViewAction>> actions){  this(-1,menuName,icon,actions);}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  @Override public void reset(XMLComponentManager componentManager) throws XMLConfigurationException {  super.reset(componentManager);  fDoctypeName=null;  fDoctypePublicId=null;  fDoctypeSystemId=null;  fSeenDoctypeDecl=false;  fScanningDTD=false;  fExternalSubsetSource=null;  if (!fParserSettings) {    fNamespaceContext.reset();    setScannerState(SCANNER_STATE_XML_DECL);    setDispatcher(fXMLDeclDispatcher);    return;  }  try {    fLoadExternalDTD=componentManager.getFeature(LOAD_EXTERNAL_DTD);  } catch (  XMLConfigurationException e) {    fLoadExternalDTD=true;  }  try {    fDisallowDoctype=componentManager.getFeature(DISALLOW_DOCTYPE_DECL_FEATURE);  } catch (  XMLConfigurationException e) {    fDisallowDoctype=false;  }  fDTDScanner=(XMLDTDScanner)componentManager.getProperty(DTD_SCANNER);  try {    fValidationManager=(ValidationManager)componentManager.getProperty(VALIDATION_MANAGER);  } catch (  XMLConfigurationException e) {    fValidationManager=null;  }  try {    fNamespaceContext=(NamespaceContext)componentManager.getProperty(NAMESPACE_CONTEXT);  } catch (  XMLConfigurationException e) {  }  if (fNamespaceContext == null) {    fNamespaceContext=new NamespaceSupport();  }  fNamespaceContext.reset();  setScannerState(SCANNER_STATE_XML_DECL);  setDispatcher(fXMLDeclDispatcher);}  }
class C{  public void handleCommittedTakenEntries(Context context,final XtnEntry xtnEntry) throws SAException {  ISAdapterIterator<IEntryHolder> entriesIter=null;  ILockObject entryLock=null;  try {    entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.TAKEN_ENTRIES,false);    if (entriesIter != null) {      final XtnData pXtn=xtnEntry.getXtnData();      while (true) {        entryLock=null;        IEntryHolder entry=entriesIter.next();        if (entry == null)         break;        if (entry.getWriteLockTransaction() == null || (entry.getWriteLockOperation() != SpaceOperations.TAKE && entry.getWriteLockOperation() != SpaceOperations.TAKE_IE))         continue;        try {          entryLock=getEntryLockObject(entry);synchronized (entryLock) {            IEntryHolder original=entry;            if (entry.getWriteLockTransaction() != null && entry.getWriteLockOwner() == xtnEntry && (entry.getWriteLockOperation() == SpaceOperations.TAKE || entry.getWriteLockOperation() == SpaceOperations.TAKE_IE)) {              IServerTypeDesc tte=_engine.getTypeManager().getServerTypeDesc(entry.getClassName());              context.setOperationID(pXtn.getOperationID(entry.getUID()));              _engine.removeEntrySA(context,entry,tte,xtnEntry.isFromReplication(),true,SpaceEngine.EntryRemoveReasonCodes.TAKE,true,false,true);            }          }          continue;        }  finally {          if (entryLock != null)           freeEntryLockObject(entryLock);          entryLock=null;        }      }    }  }  finally {    if (entriesIter != null)     entriesIter.close();  }}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public static String toString(final ByteBuffer buf){  buf.flip();  final byte arr[]=new byte[buf.remaining()];  buf.get(arr);  String ret=toString(arr);  buf.flip();  buf.put(arr);  return ret;}  }
class C{  public static Map<String,Object> addPrefToMap(GenericValue rec,Map<String,Object> userPrefMap) throws GeneralException {  String prefDataType=rec.getString("userPrefDataType");  if (UtilValidate.isEmpty(prefDataType)) {    userPrefMap.put(rec.getString("userPrefTypeId"),rec.getString("userPrefValue"));  } else {    userPrefMap.put(rec.getString("userPrefTypeId"),ObjectType.simpleTypeConvert(rec.get("userPrefValue"),prefDataType,null,null,false));  }  return userPrefMap;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public void runAsync(String localName,ModelService service,Map<String,? extends Object> context,boolean persist) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  this.runAsync(localName,service,context,null,persist);}  }
class C{  public final ProgressEvent increaseProgress(){  Progress++;  return this;}  }
class C{  public boolean closeDatabase(String dbfile){  if (databases.get(dbfile) != null) {    SQLiteDatabase db=(SQLiteDatabase)databases.get(dbfile);    db.close();    databases.remove(dbfile);    return true;  }  return false;}  }
class C{  public static MulticastRequest decodeMulticastRequest(ByteBuffer buf) throws IOException {  try {    String host=getUtf(buf);    int port=ushortToInt(buf.getShort());    String[] groups=new String[ushortToInt(buf.getShort())];    for (int i=0; i < groups.length; i++) {      groups[i]=getUtf(buf);    }    ServiceID[] ids=new ServiceID[ushortToInt(buf.getShort())];    for (int i=0; i < ids.length; i++) {      long hi=buf.getLong();      long lo=buf.getLong();      ids[i]=new ServiceID(hi,lo);    }    return new MulticastRequest(host,port,groups,ids);  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  public NewsfeedGetRecommendedQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static Object deepClone(Object obj){  try {    byte[] bArray=objectToByteBuffer(obj);    return objectFromByteBuffer(bArray);  } catch (  Exception ex) {    throw new IllegalArgumentException("Failed to perform deep clone on [" + obj + "] object. Check that the all object context are implements java.io.Serializable.",ex);  }}  }
class C{  public BufferMustBeDirectException(){  super("The buffer must be a direct buffer (not heap allocated");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200496,skilltarget,skillname);}  }
class C{  @Override public void run(){  logger.debug("Starting ZWave thread: Send");  try {    while (!interrupted()) {      if (!sendAllowed.tryAcquire(1,zWaveResponseTimeout,TimeUnit.MILLISECONDS)) {        sendAllowed.release();        logger.warn("Receive queue TIMEOUT:",recvQueue.size());        continue;      }      sendAllowed.release();      try {        lastSentMessage=sendQueue.take();        logger.debug("Took message from queue for sending. Queue length = {}",sendQueue.size());      } catch (      InterruptedException e) {        logger.error("Send thread aborted!!!!!!!! {}",e);        break;      }      if (lastSentMessage == null) {        continue;      }      ZWaveNode node=getNode(lastSentMessage.getMessageNode());      if (node != null && !node.isListening() && !node.isFrequentlyListening()) {        ZWaveWakeUpCommandClass wakeUpCommandClass=(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP);        if (wakeUpCommandClass != null && !wakeUpCommandClass.processOutgoingWakeupMessage(lastSentMessage)) {          continue;        }      }      transactionCompleted.drainPermits();      ioHandler.sendPacket(lastSentMessage);      lastMessageStartTime=System.currentTimeMillis();      if (lastSentMessage instanceof SecurityEncapsulatedSerialMessage) {        ((SecurityEncapsulatedSerialMessage)lastSentMessage).setTransmittedAt();        int callbackId=lastSentMessage.getCallbackId();        lastSentMessage=((SecurityEncapsulatedSerialMessage)lastSentMessage).getMessageBeingEncapsulated();        lastSentMessage.setCallbackId(callbackId);      }      try {        if (!transactionCompleted.tryAcquire(1,zWaveResponseTimeout,TimeUnit.MILLISECONDS)) {          timeOutCount.incrementAndGet();          if (lastSentMessage.getMessageClass() == SerialMessageClass.SendData && lastSentMessage.isAckPending()) {            SerialMessage serialMessage=new SerialMessage(SerialMessageClass.SendDataAbort,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Immediate);            logger.debug("NODE {}: Sending ABORT Message = {}",lastSentMessage.getMessageNode(),SerialMessage.bb2hex(serialMessage.getMessageBuffer()));            ioHandler.sendPacket(serialMessage);          }          if (--lastSentMessage.attempts >= 0) {            logger.error("NODE {}: Timeout while sending message. Requeueing - {} attempts left!",lastSentMessage.getMessageNode(),lastSentMessage.attempts);            if (lastSentMessage.getMessageClass() == SerialMessageClass.SendData) {              handleFailedSendDataRequest(lastSentMessage);            } else {              enqueue(lastSentMessage);            }          } else {            logger.warn("NODE {}: Too many retries. Discarding message: {}",lastSentMessage.getMessageNode(),lastSentMessage.toString());          }          continue;        }        long responseTime=System.currentTimeMillis() - lastMessageStartTime;        if (responseTime > longestResponseTime) {          longestResponseTime=responseTime;        }        logger.debug("NODE {}: Response processed after {}ms/{}ms.",lastSentMessage.getMessageNode(),responseTime,longestResponseTime);        logger.trace("Acquired. Transaction completed permit count -> {}",transactionCompleted.availablePermits());      } catch (      InterruptedException e) {        logger.error("Send thread aborted!!!!!!!! {}",e);        break;      }    }  } catch (  Exception e) {    logger.error("Exception during ZWave thread: Send",e);  }  logger.debug("Stopped ZWave thread: Send");}  }
class C{  public static boolean isAtLeastJava18(){  return getMajorJavaVersion() >= JAVA_18;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public FisheyeDistortion(double xfactor,double yfactor){  super();  dx=xfactor;  dy=yfactor;  m_distortX=dx > 0;  m_distortY=dy > 0;}  }
class C{  public Vec2d sub(Vec2d v){  return sub(v.x,v.y);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_PROCESSING_YOUR_REQUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300215,value0);}  }
class C{  public boolean determineBinary(String fileLocation,String fileName,List<String> codeLines,List<String[]> reportList){  SearchcodeLib scl=new SearchcodeLib();  BinaryFinding binaryFinding=scl.isBinary(codeLines,fileName);  if (binaryFinding.isBinary()) {    Singleton.getLogger().info("Appears to be binary will not index " + binaryFinding.getReason() + " "+ fileLocation);    reportList.add(new String[]{fileLocation,"excluded",binaryFinding.getReason()});    return true;  }  return false;}  }
class C{  @Override public void beforeFirst(){  currentScan=null;  s1.beforeFirst();  hasMore1=s1.next();  if (s2 != null) {    s2.beforeFirst();    hasMore2=s2.next();  }}  }
class C{  public static void main(String[] args) throws IOException, InterruptedException {  final JRServiceServer server=new JRServiceServer();  server.start();  server.blockUntilShutdown();}  }
class C{  public void stopObservingFontPrefs(){  mFontSizePrefs.removeObserver(mFontSizeObserver);}  }
class C{  public static boolean isPortBusy(int port,String bindAddr) throws UnknownHostException {  InetAddress inetBindAddr=bindAddr != null ? InetAddress.getByName(bindAddr) : null;  try {    new ServerSocket(port,0,inetBindAddr).close();  } catch (  IOException ex) {    return true;  }  return false;}  }
class C{  public void clear(){  lock.lock();  try {    onceUsedObservers.clear();  }  finally {    lock.unlock();  }  observers.clear();  attackCalcObservers.clear();}  }
class C{  @NotNull public Screen createScreen(){  Screen screen=new Screen();  screen.setMultitouch(Multitouch.JAZZ_HANDS);  screen.setMechanism(TouchScreen.FINGER);  screen.setScreenType(ScreenType.CAPACITIVE);  screen.setScreenRound((myDeviceData.isScreenRound().get()) ? ScreenRound.ROUND : ScreenRound.NOTROUND);  int screenWidth=myDeviceData.screenResolutionWidth().get();  int screenHeight=myDeviceData.screenResolutionHeight().get();  double screenDiagonal=myDeviceData.diagonalScreenSize().get();  screen.setDiagonalLength(screenDiagonal);  screen.setSize(getScreenSize(screenDiagonal));  screen.setXDimension(screenWidth);  screen.setYDimension(screenHeight);  screen.setRatio(getScreenRatio(screenWidth,screenHeight));  Double dpi=myDeviceData.screenDpi().get();  if (dpi <= 0) {    dpi=calculateDpi(screenWidth,screenHeight,screenDiagonal);  }  dpi=Math.round(dpi * 100) / 100.0;  screen.setYdpi(dpi);  screen.setXdpi(dpi);  screen.setPixelDensity(getScreenDensity(myDeviceData.isTv().get(),dpi,screenHeight));  return screen;}  }
class C{  public void startElement(QName element,XMLAttributes attributes){  if (DEBUG_METHODS2) {    System.out.println(toString() + "#startElement(" + "element={"+ element+ "},"+ "attributes=..."+ attributes+ ")");  }  for (int i=0; i < fLocationPaths.length; i++) {    int startStep=fCurrentStep[i];    fStepIndexes[i].push(startStep);    if ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED || fNoMatchDepth[i] > 0) {      fNoMatchDepth[i]++;      continue;    }    if ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED_DESCENDANT) {      fMatched[i]=MATCHED_DESCENDANT_PREVIOUS;    }    if (DEBUG_STACK) {      System.out.println(toString() + ": " + fStepIndexes[i]);    }    XPath.Step[] steps=fLocationPaths[i].steps;    while (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.SELF) {      if (DEBUG_MATCH) {        XPath.Step step=steps[fCurrentStep[i]];        System.out.println(toString() + " [SELF] MATCHED!");      }      fCurrentStep[i]++;    }    if (fCurrentStep[i] == steps.length) {      if (DEBUG_MATCH) {        System.out.println(toString() + " XPath MATCHED!");      }      fMatched[i]=MATCHED;      continue;    }    int descendantStep=fCurrentStep[i];    while (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.DESCENDANT) {      if (DEBUG_MATCH) {        XPath.Step step=steps[fCurrentStep[i]];        System.out.println(toString() + " [DESCENDANT] MATCHED!");      }      fCurrentStep[i]++;    }    boolean sawDescendant=fCurrentStep[i] > descendantStep;    if (fCurrentStep[i] == steps.length) {      if (DEBUG_MATCH) {        System.out.println(toString() + " XPath DIDN'T MATCH!");      }      fNoMatchDepth[i]++;      if (DEBUG_MATCH) {        System.out.println(toString() + " [CHILD] after NO MATCH");      }      continue;    }    if ((fCurrentStep[i] == startStep || fCurrentStep[i] > descendantStep) && steps[fCurrentStep[i]].axis.type == XPath.Axis.CHILD) {      XPath.Step step=steps[fCurrentStep[i]];      XPath.NodeTest nodeTest=step.nodeTest;      if (DEBUG_MATCH) {        System.out.println(toString() + " [CHILD] before");      }      if (!matches(nodeTest,element)) {        if (fCurrentStep[i] > descendantStep) {          fCurrentStep[i]=descendantStep;          continue;        }        fNoMatchDepth[i]++;        if (DEBUG_MATCH) {          System.out.println(toString() + " [CHILD] after NO MATCH");        }        continue;      }      fCurrentStep[i]++;      if (DEBUG_MATCH) {        System.out.println(toString() + " [CHILD] after MATCHED!");      }    }    if (fCurrentStep[i] == steps.length) {      if (sawDescendant) {        fCurrentStep[i]=descendantStep;        fMatched[i]=MATCHED_DESCENDANT;      } else {        fMatched[i]=MATCHED;      }      continue;    }    if (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.ATTRIBUTE) {      if (DEBUG_MATCH) {        System.out.println(toString() + " [ATTRIBUTE] before");      }      int attrCount=attributes.getLength();      if (attrCount > 0) {        XPath.NodeTest nodeTest=steps[fCurrentStep[i]].nodeTest;        for (int aIndex=0; aIndex < attrCount; aIndex++) {          attributes.getName(aIndex,fQName);          if (matches(nodeTest,fQName)) {            fCurrentStep[i]++;            if (fCurrentStep[i] == steps.length) {              fMatched[i]=MATCHED_ATTRIBUTE;              int j=0;              for (; j < i && ((fMatched[j] & MATCHED) != MATCHED); j++)               ;              if (j == i) {                AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(aIndex).getItem(Constants.ATTRIBUTE_PSVI);                fMatchedString=attrPSVI.getActualNormalizedValue();                matched(fMatchedString,attrPSVI.getActualNormalizedValueType(),attrPSVI.getItemValueTypes(),false);              }            }            break;          }        }      }      if ((fMatched[i] & MATCHED) != MATCHED) {        if (fCurrentStep[i] > descendantStep) {          fCurrentStep[i]=descendantStep;          continue;        }        fNoMatchDepth[i]++;        if (DEBUG_MATCH) {          System.out.println(toString() + " [ATTRIBUTE] after");        }        continue;      }      if (DEBUG_MATCH) {        System.out.println(toString() + " [ATTRIBUTE] after MATCHED!");      }    }  }}  }
class C{  public FDistribution(double numeratorDegreesOfFreedom,double denominatorDegreesOfFreedom) throws MathIllegalArgumentException {  this(numeratorDegreesOfFreedom,denominatorDegreesOfFreedom,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Process execInternal(java.lang.String[],java.lang.String[],java.lang.String)")) {    java_lang_Runtime_execInternal(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private boolean isNidoranFemale(Bitmap pokemonImage){  Bitmap pokemon=getImageCrop(pokemonImage,0.33,0.25,0.33,0.2);  int[] pixelArray=new int[pokemon.getHeight() * pokemon.getWidth()];  pokemon.getPixels(pixelArray,0,pokemon.getWidth(),0,0,pokemon.getWidth(),pokemon.getHeight());  int greenSum=0;  int blueSum=0;  for (  int pixel : pixelArray) {    blueSum+=Color.green(pixel);    greenSum+=Color.blue(pixel);  }  int greenAverage=greenSum / pixelArray.length;  int blueAverage=blueSum / pixelArray.length;  int femaleGreenLimit=175;  int femaleBlueLimit=130;  boolean isFemale=true;  if (greenAverage < femaleGreenLimit && blueAverage < femaleBlueLimit) {    isFemale=false;  }  return isFemale;}  }
class C{  public LruCachePolicy initialLoadPercentage(int initialLoadPercentage){  setInitialLoadPercentage(initialLoadPercentage);  return this;}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  private List<Iterator<Object[]>>[] partitionInputReaderIterators(){  int numberOfCores=CarbonProperties.getInstance().getNumberOfCores();  int parallelThreadNumber=Math.min(inputIterators.size(),numberOfCores);  List<Iterator<Object[]>>[] iterators=new List[parallelThreadNumber];  for (int i=0; i < parallelThreadNumber; i++) {    iterators[i]=new ArrayList<>();  }  for (int i=0; i < inputIterators.size(); i++) {    iterators[i % parallelThreadNumber].add(inputIterators.get(i));  }  return iterators;}  }
class C{  public static String removeOrderTerm(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String termIndexStr=request.getParameter("termIndex");  if (UtilValidate.isNotEmpty(termIndexStr)) {    try {      Integer termIndex=Integer.parseInt(termIndexStr);      if (termIndex >= 0) {        List<GenericValue> orderTerms=cart.getOrderTerms();        if (orderTerms != null && orderTerms.size() > termIndex) {          cart.removeOrderTerm(termIndex);        }      }    } catch (    NumberFormatException e) {      Debug.logWarning(e,"Error parsing termIndex: " + termIndexStr,module);    }  }  return "success";}  }
class C{  @Override public synchronized void stop(){  if (running) {    LOGGER.debug("Shutting down Multithreaded cache listener.");    running=false;    shutdownRequestMade=true;    while (!taskQueue.isEmpty()) {      try {        Thread.sleep(100);      } catch (      InterruptedException ex) {        LOGGER.error("Interrupted while waiting for shutdown to complete",ex);      }    }    try {      Thread.sleep(THREAD_SHUTDOWN_CHECK_INTERVAL);    } catch (    InterruptedException ex) {      LOGGER.error("Interrupted while waiting for shutdown to complete",ex);    }  }}  }
class C{  @Deprecated public void ignoreMissingProperties(boolean ignore){  setIgnoreMissingProperties(ignore);}  }
class C{  public void finalizeQueue(Queue<Future<Void>> taskQueue,CompletionService<Void> completionService,ExecutorService executorService){  try {    while (!taskQueue.isEmpty()) {      taskQueue.remove(completionService.take());    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  } finally {    while (!taskQueue.isEmpty()) {      taskQueue.poll().cancel(true);    }    executorService.shutdownNow();  }}  }
class C{  public static List<Writable> toRecord(INDArray array){  List<Writable> writables=new ArrayList<>();  writables.add(new NDArrayWritable(array));  return writables;}  }
class C{  @Override public void load(String fileName,InputStream dummy,String dummy2,float dummy3) throws IOException, MaryConfigurationException {  DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  hdr=new MaryHeader(dis);  if (hdr.getType() != MaryHeader.PRECOMPUTED_JOINCOSTS) {    throw new MaryConfigurationException("File [" + fileName + "] is not a valid Mary precompiled join costs file.");  }  int numberOfLeftUnits=dis.readInt();  if (numberOfLeftUnits < 0) {    throw new MaryConfigurationException("File [" + fileName + "] has a negative number of units. Aborting.");  }  left=new HashMap();  for (int i=0; i < numberOfLeftUnits; i++) {    int leftIndex=dis.readInt();    int numberOfRightUnits=dis.readInt();    Map right=new HashMap();    left.put(new Integer(leftIndex),right);    for (int j=0; j < numberOfRightUnits; j++) {      int rightIndex=dis.readInt();      float cost=dis.readFloat();      right.put(new Integer(rightIndex),new Float(cost));    }  }}  }
class C{  public void putImplementationEquipmentConfigurationChanger(final long equipmentId,final IEquipmentConfigurationChanger equipmentConfigurationChanger){  equipmentChangers.put(equipmentId,equipmentConfigurationChanger);}  }
class C{  public Value mapEntry(Value key,Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public void runActions(Context context,boolean onlyIfScreenIsOn){  assert mServiceRunnable != null;  assert mPowerManagerHelper != null;  if (!onlyIfScreenIsOn || mPowerManagerHelper.isScreenOn(context)) {    if (mNeedToRunActions.getAndSet(false)) {      unregisterReceiver(context);      mHandler.postDelayed(mServiceRunnable,mServiceRunnable.delayToRun());    }  }}  }
class C{  public String HmmF0Generation(HTSUttModel um,HMMData htsData) throws Exception {  int frame, uttFrame, lf0Frame;  int hmmState, k, n, i;  boolean nobound;  HTSModel m;  HTSPStream lf0Pst=null;  boolean voiced[];  CartTreeSet ms=htsData.getCartTreeSet();  lf0Pst=new HTSPStream(ms.getLf0Stream(),um.getLf0Frame(),HMMData.FeatureType.LF0,200);  uttFrame=lf0Frame=0;  voiced=new boolean[um.getTotalFrame()];  for (i=0; i < um.getNumUttModel(); i++) {    m=um.getUttModel(i);    for (hmmState=0; hmmState < ms.getNumStates(); hmmState++)     for (frame=0; frame < m.getDur(hmmState); frame++) {      voiced[uttFrame]=m.getVoiced(hmmState);      uttFrame++;      if (m.getVoiced(hmmState))       lf0Frame++;    }  }  uttFrame=0;  lf0Frame=0;  for (i=0; i < um.getNumUttModel(); i++) {    m=um.getUttModel(i);    for (hmmState=0; hmmState < ms.getNumStates(); hmmState++) {      for (frame=0; frame < m.getDur(hmmState); frame++) {        for (k=0; k < ms.getLf0Stream(); k++) {          int lw=lf0Pst.getDWLeftBoundary(k);          int rw=lf0Pst.getDWRightBoundary(k);          nobound=true;          for (n=lw; n <= rw; n++)           if ((uttFrame + n) <= 0 || um.getTotalFrame() <= (uttFrame + n))           nobound=false; else           nobound=(nobound && voiced[uttFrame + n]);          if (voiced[uttFrame]) {            lf0Pst.setMseq(lf0Frame,k,m.getLf0Mean(hmmState,k));            if (nobound || k == 0)             lf0Pst.setIvseq(lf0Frame,k,HTSParameterGeneration.finv(m.getLf0Variance(hmmState,k))); else             lf0Pst.setIvseq(lf0Frame,k,0.0);          }        }        if (voiced[uttFrame])         lf0Frame++;        uttFrame++;      }    }  }  double f0s[]=new double[voiced.length];  i=0;  if (lf0Frame > 0) {    Log.i(Mary.LOG,"Parameter generation for LF0: ");    lf0Pst.mlpg(htsData,htsData.getUseGV());    for (int t=0; t < voiced.length; t++) {      if (voiced[t]) {        f0s[t]=Math.exp(lf0Pst.getPar(i,0));        i++;      } else       f0s[t]=0.0;    }  }  double totalDur;  int totalFrames;  String f0Values="";  int t=0;  for (i=0; i < um.getNumUttModel(); i++) {    m=um.getUttModel(i);    f0Values+=m.getPhoneName() + " " + m.getTotalDurMillisec()+ " ";    totalDur=m.getTotalDur();    totalFrames=0;    if (checkModelVoiced(m,ms.getNumStates())) {      for (int j=0; j < ms.getNumStates(); j++) {        for (frame=0; frame < m.getDur(j); frame++) {          totalFrames++;          if (f0s[t] > 0.0)           f0Values+="(" + Integer.toString((int)((totalFrames / totalDur) * 100)) + ","+ Integer.toString((int)f0s[t])+ ")";          t++;        }      }    } else {      t=t + m.getTotalDur();      f0Values+="0";    }    f0Values+="\n";  }  return (f0Values);}  }
class C{  public static long calculateDifferentMinute(long startTimeMillis,long endTimeMillis){  return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Minute);}  }
class C{  public void propertiesDefined(X dataSource){  unregisterListeners();  for (int i=0; i < groups.size(); i++) {    List<PropertiesProvider<X>> providers=groups.get(i);    List<PropertiesPanel> categoriesPanels=new ArrayList();    if (providers.size() == 1) {      categoriesPanels.add(panels.get(i));    } else {      MultiPropertiesPanel multiPanel=(MultiPropertiesPanel)panels.get(i);      categoriesPanels.addAll(multiPanel.getPanels());    }    for (int j=0; j < providers.size(); j++)     providers.get(j).propertiesDefined(categoriesPanels.get(j),dataSource);  }}  }
class C{  private void testBasicLockUnlock(long timeout) throws Exception {  String lockPath="/test-basic-lock-unlock-" + timeout + System.currentTimeMillis();  String clientId="test-basic-lock-unlock";  createLockPath(zkc.get(),lockPath);  ZKSessionLock lock=new ZKSessionLock(zkc,lockPath,clientId,lockStateExecutor);  lock.tryLock(timeout,TimeUnit.MILLISECONDS);  assertEquals(State.CLAIMED,lock.getLockState());  List<String> children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  try {    lock.tryLock(timeout,TimeUnit.MILLISECONDS);    fail("Should fail on locking a failure lock.");  } catch (  LockStateChangedException lsce) {  }  assertEquals(State.CLAIMED,lock.getLockState());  children=getLockWaiters(zkc,lockPath);  assertEquals(1,children.size());  assertEquals(lock.getLockId(),Await.result(asyncParseClientID(zkc.get(),lockPath,children.get(0))));  lock.unlock();  assertEquals(State.CLOSED,lock.getLockState());  assertEquals(0,getLockWaiters(zkc,lockPath).size());}  }
class C{  public void addFreeShippingProductPromoAction(GenericValue productPromoAction){  if (productPromoAction == null)   return;  if (!"PROMO_FREE_SHIPPING".equals(productPromoAction.getString("productPromoActionEnumId")))   return;  this.removeFreeShippingProductPromoAction(productPromoAction.getPrimaryKey());  this.freeShippingProductPromoActions.add(productPromoAction);}  }
class C{  public static String derivePath(String baseDir,String fileName){  Logger logger=Logger.getLogger(COMPONENT);  if (logger.isLoggable(Level.FINE))   logger.log(Level.FINE,"Derive path for file: " + fileName + " | baseDir: "+ baseDir);  if (baseDir == null)   throw new NullPointerException("baseDir is null");  if (fileName == null)   throw new NullPointerException("fileName is null");  if (baseDir.startsWith("$")) {    String sysProp=baseDir.substring(1);    baseDir=System.getProperty(sysProp);    if (baseDir == null)     throw new IllegalArgumentException("baseDir [" + sysProp + "] "+ "does not reference a valid "+ "System Property");  }  File base=new File(baseDir);  if (!base.exists())   throw new IllegalArgumentException(baseDir + " does not exist");  if (!base.isDirectory())   throw new IllegalArgumentException(baseDir + " is not a directory");  if (!base.canRead())   throw new IllegalArgumentException("cannot read from " + baseDir);  String path=locate(base,fileName);  if (path != null) {    File checkDir=new File(path);    if (checkDir.isDirectory())     path=checkDirFormat(path);  }  return (path);}  }
class C{  public LayerStyleNode(StyleWrapper styleWrapper){  this.styleWrapper=styleWrapper;}  }
class C{  public <T>T removeEnv(String key){  String ekey=FlexibleStringExpander.expandString(key,this.env);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  return this.removeEnv(fma);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){  ClassReference objClassRef=objSubjectExpression.getClassReference();  if (null == objClassRef || null == objClassRef.getFQN()) {    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);    return;  }  objTypesSet.add(objClassRef.getFQN());}  }
class C{  private void openExternalDataSource(){  if (externalDataSource == null) {    ConsoleManager.getInstance().error(this,"No external data source creation object set");  } else {    List<DataSourceInfo> dataSourceInfoList=externalDataSource.connect(this.editorFileInterface);    if ((dataSourceInfoList != null) && (dataSourceInfoList.size() == 1)) {      dataSourceInfo=dataSourceInfoList.get(0);      if (dataSourceInfo.hasData()) {        dataSourceInfo.populateFieldMap();        connectedToDataSourceFlag=true;        notifyDataSourceLoaded();      } else {        openWithoutDataSource();      }    }  }}  }
class C{  public boolean equals(CONSTANT_Utf8_info cu){  int i, j;  j=bytes.length;  if (j != cu.bytes.length)   return false;  for (i=0; i < j; i++) {    if (bytes[i] != cu.bytes[i])     return false;  }  return true;}  }
class C{  protected MessagesDeleteChatPhotoQuery chatId(int value){  return unsafeParam("chat_id",value);}  }
class C{  private void drawDownLoaded(Canvas canvas,STATUS_MARK status,RectF bounds,float angle){  publicPaint.setColor(getProgressColor());switch (status) {case DRAW_ARC:    canvas.drawArc(bounds,DEGREE_END_ANGLE - angle,0.001f * TOTAL_ANGLE,false,publicPaint);  break;case DRAW_MARK:final Path dst=mDst;dst.reset();dst.lineTo(0,0);pathMeasure1.getSegment(mMarkOkstart * mMarkOklength,(mMarkOkstart + mMarkOkdegree) * mMarkOklength,dst,true);canvas.drawPath(dst,publicPaint);break;}}  }
class C{  private void commitForcedTransaction(Query query,QuerySession session) throws UnknownTransactionException, CannotCommitException, RemoteException {  if (session.isAutoCommit() && query.isForceUnderTransaction()) {    session.getTransaction().commit();    session.setSelectedForUpdate(null);    session.setTransaction(null);  }}  }
class C{  private void populateFieldMap(){  if (dataSourceInfo != null) {    geometryFieldName=dataSourceInfo.getGeometryFieldName();    fieldNameMap.clear();    fieldTypeMap.clear();    logger.debug("Datasource fields:");    int index=0;    Collection<PropertyDescriptor> descriptorList=dataSourceInfo.getPropertyDescriptorList();    if (descriptorList != null) {      for (      PropertyDescriptor property : descriptorList) {        logger.debug(String.format("    %-20s %s",property.getName(),property.getType().getBinding().getName()));        fieldNameMap.put(index,property.getName());        fieldTypeMap.put(index,property.getType().getBinding());        index++;      }    }  }}  }
class C{  public String clientAppId(){  return (String)httpRequest.getAttribute(AuthenticationFilter.AuthenticatedRoleAttributeName);}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){  super(client,"market.removeFromAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  albumIds(albumIds);}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public static void updateAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());  AirMap.getClient().patch(url,aircraft.getAsParamsPatch(),new GenericOkHttpCallback(listener,AirMapAircraft.class));}  }
class C{  public WallCreateCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority));}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public boolean isUseFifoGrouping(){  return useFifoGrouping;}  }
class C{  public void train(String sTrainingText){  sgOverallGraph.setDataString(sTrainingText + (new StringBuffer().append((char)StreamTokenizer.TT_EOF)).toString());  clLocator.resetCache();  getDelimiters();}  }
class C{  public TapTarget icon(Drawable icon,boolean hasSetBounds){  if (icon == null)   throw new IllegalArgumentException("Cannot use null drawable");  this.icon=icon;  if (!hasSetBounds) {    this.icon.setBounds(new Rect(0,0,this.icon.getIntrinsicWidth(),this.icon.getIntrinsicHeight()));  }  return this;}  }
class C{  @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  public String toString(){  return val ? "Delegation.YES" : "Delegation.NO";}  }
class C{  @Override public void visitCode(){  if (!disableRedirection) {    for (    Redirection redirection : redirections) {      resolvedRedirections.put(redirection.getPosition().getLabel(),redirection);    }    super.visitLabel(start);    change=newLocal(CHANGE_TYPE);    visitFieldInsn(Opcodes.GETSTATIC,visitedClassName,"$change",getRuntimeTypeName(CHANGE_TYPE));    storeLocal(change);    redirectAt(start);  }  super.visitCode();}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null)   return null;  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0)   return new byte[0];  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++])))     return null;    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0)       return null;      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0)       return null;      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  @Override protected void flowThrough(FlowSet<N> in,N block,FlowSet<N> out){  in.copy(out);  out.add(block);}  }
class C{  public GroupByPlan(Plan p,Set<String> groupFlds,Set<AggregationFn> aggFns,Transaction tx){  schema=new Schema();  this.groupFlds=groupFlds;  if (!this.groupFlds.isEmpty()) {    for (    String fld : groupFlds)     schema.add(fld,p.schema());    sp=new SortPlan(p,new ArrayList<String>(groupFlds),tx);  } else   sp=p;  this.aggFns=aggFns;  if (aggFns != null)   for (  AggregationFn fn : aggFns) {    Type t=fn.isArgumentTypeDependent() ? p.schema().type(fn.argumentFieldName()) : fn.fieldType();    schema.addField(fn.fieldName(),t);  }  hist=groupByHistogram(p.histogram(),this.groupFlds,aggFns);}  }
class C{  public boolean isTransient(){  return isTransient;}  }
class C{  public XSNamedMapImpl(String[] namespaces,SymbolHash[] maps,int num){  fNamespaces=namespaces;  fMaps=maps;  fNSNum=num;}  }
class C{  int onCount(String tableName,String[] conditions){  return mathQuery(tableName,new String[]{"count(1)"},conditions,int.class);}  }
class C{  protected void initializeWorld(){  this.world=new World();  Rectangle floorRect=new Rectangle(15.0,1.0);  GameObject floor=new GameObject();  floor.addFixture(new BodyFixture(floorRect));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  Triangle triShape=new Triangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5));  GameObject triangle=new GameObject();  triangle.addFixture(triShape);  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  Circle cirShape=new Circle(0.5);  GameObject circle=new GameObject();  circle.addFixture(cirShape);  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  Rectangle rectShape=new Rectangle(1.0,1.0);  GameObject rectangle=new GameObject();  rectangle.addFixture(rectShape);  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  Polygon polyShape=Geometry.createUnitCirclePolygon(10,1.0);  GameObject polygon=new GameObject();  polygon.addFixture(polyShape);  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  Circle c1=new Circle(0.5);  BodyFixture c1Fixture=new BodyFixture(c1);  c1Fixture.setDensity(0.5);  Circle c2=new Circle(0.5);  BodyFixture c2Fixture=new BodyFixture(c2);  c2Fixture.setDensity(0.5);  Rectangle rm=new Rectangle(2.0,1.0);  c1.translate(-1.0,0.0);  c2.translate(1.0,0.0);  GameObject capsule=new GameObject();  capsule.addFixture(c1Fixture);  capsule.addFixture(c2Fixture);  capsule.addFixture(rm);  capsule.setMass(MassType.NORMAL);  capsule.translate(0.0,4.0);  this.world.addBody(capsule);  GameObject issTri=new GameObject();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  GameObject equTri=new GameObject();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  GameObject rightTri=new GameObject();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);  GameObject cap=new GameObject();  cap.addFixture(new Capsule(1.0,0.5));  cap.setMass(MassType.NORMAL);  cap.translate(-3.0,3.0);  this.world.addBody(cap);  GameObject slice=new GameObject();  slice.addFixture(new Slice(0.5,Math.toRadians(120)));  slice.setMass(MassType.NORMAL);  slice.translate(-3.0,3.0);  this.world.addBody(slice);}  }
class C{  public PreResponse(ResultSet resultSet,ResponseContext responseContext){  this.resultSet=resultSet;  this.responseContext=responseContext;}  }
class C{  public static String grabSubjectString(String text) throws IOException {  BufferedReader r=new BufferedReader(new StringReader(text));  String aLine;  StringBuilder buf=new StringBuilder();  boolean passedScore=false;  while ((aLine=r.readLine()) != null) {    aLine=aLine.trim();    if (aLine.startsWith("Score")) {      if (!passedScore)       passedScore=true; else       break;    }    if (aLine.startsWith("Sbjct")) {      String[] words=aLine.split(" +");      buf.append(words[2]);    }  }  return buf.toString().replaceAll("\n","").replaceAll("\r","");}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_POLL_REWARD_MONEY(int num0){  return new SM_SYSTEM_MESSAGE(1300947,num0);}  }
class C{  @Override protected void runImpl(){  Player player=getConnection().getActivePlayer();  if (player.getLifeStats().isAlreadyDead()) {    return;  }  if (player.getEffectController().isAbnormalState(AbnormalState.CANT_MOVE_STATE2) || player.getEffectController().isUnderFear()) {    return;  }  if (player.getController().isUnderStance()) {    if (emotionType == EmotionType.SIT || emotionType == EmotionType.JUMP || emotionType == EmotionType.NEUTRALMODE || emotionType == EmotionType.NEUTRALMODE2 || emotionType == EmotionType.ATTACKMODE || emotionType == EmotionType.ATTACKMODE2) {      player.getController().stopStance();    }  }  if (player.getState() == CreatureState.PRIVATE_SHOP.getId() || player.isAttackMode() && (emotionType == EmotionType.CHAIR_SIT || emotionType == EmotionType.JUMP)) {    return;  }  if (player.getState() == CreatureState.LOOTING.getId() && emotionType == EmotionType.NEUTRALMODE) {    return;  }  player.getController().cancelUseItem();  if (emotionType != EmotionType.SELECT_TARGET) {    player.getController().cancelCurrentSkill();  }switch (emotionType) {case SELECT_TARGET:    return;case SIT:  if (player.isInState(CreatureState.PRIVATE_SHOP)) {    return;  }player.setState(CreatureState.RESTING);break;case STAND:player.unsetState(CreatureState.RESTING);break;case CHAIR_SIT:if (!player.isInState(CreatureState.WEAPON_EQUIPPED)) {player.setState(CreatureState.CHAIR);}break;case CHAIR_UP:player.unsetState(CreatureState.CHAIR);break;case LAND_FLYTELEPORT:player.getController().onFlyTeleportEnd();break;case FLY:if (player.getAccessLevel() < AdminConfig.GM_FLIGHT_FREE) {if (!player.isInsideZoneType(ZoneType.FLY)) {PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_FLYING_FORBIDDEN_HERE);return;}}if (player.isUnderNoFly()) {PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANT_FLY_NOW_DUE_TO_NOFLY);return;}player.getFlyController().startFly();break;case LAND:player.getFlyController().endFly(false);break;case ATTACKMODE2:case ATTACKMODE:player.setAttackMode(true);player.setState(CreatureState.WEAPON_EQUIPPED);break;case NEUTRALMODE2:case NEUTRALMODE:player.setAttackMode(false);player.unsetState(CreatureState.WEAPON_EQUIPPED);break;case WALK:if (player.getFlyState() > 0) {return;}player.setState(CreatureState.WALKING);break;case RUN:player.unsetState(CreatureState.WALKING);break;case OPEN_DOOR:case CLOSE_DOOR:break;case POWERSHARD_ON:if (!player.getEquipment().isPowerShardEquipped()) {PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_WEAPON_BOOST_NO_BOOSTER_EQUIPED);return;}PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_WEAPON_BOOST_BOOST_MODE_STARTED);player.setState(CreatureState.POWERSHARD);break;case POWERSHARD_OFF:PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_WEAPON_BOOST_BOOST_MODE_ENDED);player.unsetState(CreatureState.POWERSHARD);break;case START_SPRINT:if (!player.isInPlayerMode(PlayerMode.RIDE) || player.getLifeStats().getCurrentFp() < player.ride.getStartFp() || player.isInState(CreatureState.FLYING) || !player.ride.canSprint()) {return;}player.setSprintMode(true);player.getLifeStats().triggerFpReduceByCost(player.ride.getCostFp());break;case END_SPRINT:if (!player.isInPlayerMode(PlayerMode.RIDE) || !player.ride.canSprint()) {return;}player.setSprintMode(false);player.getLifeStats().triggerFpRestore();break;default :break;}if (player.getEmotions().canUse(emotion)) {PacketSendUtility.broadcastPacket(player,new SM_EMOTION(player,emotionType,emotion,x,y,z,heading,getTargetObjectId(player)),true);}}  }
class C{  public static Optional<String> wavefrontValue(MetricValue mv){  if (mv.isInfiniteOrNaN())   return Optional.empty();  return mv.value().map(null);}  }
class C{  public Z(Z a){  re=a.re;  im=a.im;}  }
class C{  public static FormatterDetails createBasicFormatter(final String id,final String name,final String description,final ConversionMethod conversionMethod){  final FormatterDetails formatter=new FormatterDetails();  formatter.setID(id);  formatter.setName(name);  formatter.setDescription(description);  formatter.getFunction().add(createBasicFormatterFunction(conversionMethod));  return formatter;}  }
class C{  private ViterbiPath findBestPath(){  ViterbiPoint t;  int best;  int worst;  ViterbiPath bestPath=null;  if (bigIsGood) {    worst=Integer.MIN_VALUE;  } else {    worst=Integer.MAX_VALUE;  }  best=worst;  t=lastPoint;  if (numStates != 0) {    if (DEBUG) {      debug("fbp ns " + numStates + " t "+ t.numStates+ " best "+ best);    }    for (int i=0; i < t.numStates; i++) {      if (t.statePaths[i] != null && (isBetterThan(t.statePaths[i].score,best))) {        best=t.statePaths[i].score;        bestPath=t.statePaths[i];      }    }  }  return bestPath;}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      scrollBy(delta,0);    } else {      smoothScrollBy(delta,0);    }  }  return scroll;}  }
class C{  public void add(String uid){  cleanIfNeeded();  if (currentSet) {    _idSet0.add(uid);  } else {    _idSet1.add(uid);  }}  }
class C{  public static boolean after(GenericRecord first,GenericRecord second,String timestampFieldName){  return compareTimestamp(first,second,timestampFieldName) == 1;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  public MarketReorderItemsQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,String webSiteId,Locale locale,String currencyUom,String billToCustomerPartyId,String billFromVendorPartyId){  this.delegator=delegator;  this.delegatorName=delegator.getDelegatorName();  this.productStoreId=productStoreId;  this.webSiteId=webSiteId;  this.locale=(locale != null) ? locale : Locale.getDefault();  this.currencyUom=(currencyUom != null) ? currencyUom : EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);  this.billToCustomerPartyId=billToCustomerPartyId;  this.billFromVendorPartyId=billFromVendorPartyId;  if (productStoreId != null) {    GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);    if (productStore == null) {      throw new IllegalArgumentException("Unable to locate ProductStore by ID [" + productStoreId + "]");    }    String storeViewCartOnAdd=productStore.getString("viewCartOnAdd");    if (storeViewCartOnAdd != null && "Y".equalsIgnoreCase(storeViewCartOnAdd)) {      this.viewCartOnAdd=true;    }    if (billFromVendorPartyId == null) {      this.billFromVendorPartyId=productStore.getString("payToPartyId");    }    this.facilityId=productStore.getString("inventoryFacilityId");  }}  }
class C{  private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));}  }
class C{  private static void expand2DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){  if (numberString.charAt(0) == '0') {    if (numberString.charAt(1) == '0') {    } else {      String number=digit2num[numberString.charAt(1) - '0'];      wordRelation.addWord(tokenItem,number);    }  } else   if (numberString.charAt(1) == '0') {    String number=digit2enty[numberString.charAt(0) - '0'];    wordRelation.addWord(tokenItem,number);  } else   if (numberString.charAt(0) == '1') {    String number=digit2teen[numberString.charAt(1) - '0'];    wordRelation.addWord(tokenItem,number);  } else {    String enty=digit2enty[numberString.charAt(0) - '0'];    wordRelation.addWord(tokenItem,enty);    expandDigits(numberString.substring(1,numberString.length()),wordRelation,tokenItem);  }}  }
class C{  public AccountSetSilenceModeQuery sound(Integer value){  return unsafeParam("sound",value);}  }
class C{  @Override public boolean isDataSource(){  return true;}  }
class C{  public SM_RIFT_ANNOUNCE(FastMap<Integer,Integer> rifts){  this.actionId=0;  this.rifts=rifts;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int numRead=zzReader.read(zzBuffer,zzEndRead,requested);  if (numRead == 0) {    throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");  }  if (numRead > 0) {    zzEndRead+=numRead;    if (numRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c,boolean enabledByDefault){  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);  if (_optComponents.containsKey(property)) {    throw new BindingException(Messages.getString("Bindings.duplicate.binding"));  }  _optComponents.put(property,b);  return this;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  void processIntent(Intent intent){  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);  NdefMessage msg=(NdefMessage)rawMsgs[0];  String playerMac=new String(msg.getRecords()[0].getPayload());  GameSetupManager.getInstance().addPlayer(playerMac);  addingPlayer.show();  Toast.makeText(getApplicationContext(),"Adding Player : " + playerMac,Toast.LENGTH_LONG).show();}  }
class C{  public T[] toArray(){  final T[] array=MathArrays.buildArray(x.getField(),3);  array[0]=x;  array[1]=y;  array[2]=z;  return array;}  }
class C{  public OverlapsExtended(){  super(null,null);}  }
class C{  @Override public StyledLayerDescriptor create(){  return DefaultSymbols.createNewPoint();}  }
class C{  public Builder zIndexOffset(Number zIndexOffset){  this.zIndexOffset=zIndexOffset;  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ClassDeclSubstituted fullCopy(){  ClassDeclSubstituted tree=(ClassDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 5:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public void updateContactList(List<User> contactInfoList){  for (  User u : contactInfoList) {    contactList.put(u.getUsername(),u);  }  ArrayList<User> mList=new ArrayList<User>();  mList.addAll(contactList.values());  ((DemoHXSDKModel)getModel()).saveContactList(mList);}  }
class C{  public static HttpConfigAspect create(Model model){  return new HttpConfigAspect(model);}  }
class C{  synchronized void checkStateAndTransmit() throws BKTransmitException, WriteException, InvalidEnvelopedEntryException, LockingException {  checkStateBeforeTransmit();  transmit();}  }
class C{  public TOverlapsExtended(){  super(null,null);}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  @Override public List<Symbolizer> convertToFill(String layerName,JsonElement element,int transparency){  if (layerName == null) {    return null;  }  if (element == null) {    return null;  }  List<Symbolizer> symbolizerList=new ArrayList<Symbolizer>();  JsonObject obj=element.getAsJsonObject();  Expression size=ff.literal(getDouble(obj,LineFillSymbolKeys.SEPARATION));  Expression opacity=null;  double lineAngle=normaliseAngle(getDouble(obj,CommonSymbolKeys.ANGLE));  Expression rotation=null;  AnchorPoint anchorPoint=null;  Displacement displacement=null;  Expression fillColour=getColour(obj.get(LineFillSymbolKeys.FILL_COLOUR));  Expression fillColourOpacity=null;  Expression join=null;  Expression cap=null;  float[] dashes=null;  Expression offset=null;  Expression width=ff.literal(1.0);  Stroke outlineStroke=null;  List<Stroke> strokeList=SymbolManager.getInstance().getStrokeList(obj.get(LineFillSymbolKeys.OUTLINE));  if ((strokeList != null) && (strokeList.size() == 1)) {    outlineStroke=strokeList.get(0);    width=outlineStroke.getWidth();  }  Expression wellKnownName=null;  if (isDoubleEqual(lineAngle,0.0) || isDoubleEqual(lineAngle,180.0)) {    wellKnownName=ff.literal("shape://horline");  } else   if (isDoubleEqual(lineAngle,90.0) || isDoubleEqual(lineAngle,270.0)) {    wellKnownName=ff.literal("shape://vertline");  } else   if (isDoubleEqual(lineAngle,45.0) || isDoubleEqual(lineAngle,225.0)) {    wellKnownName=ff.literal("shape://slash");  } else   if (isDoubleEqual(lineAngle,135.0) || isDoubleEqual(lineAngle,315.0)) {    wellKnownName=ff.literal("shape://backslash");  } else {    wellKnownName=ff.literal("shape://vertline");    rotation=ff.literal(lineAngle);  }  Fill fill=null;  Stroke markStroke=styleFactory.stroke(fillColour,fillColourOpacity,width,join,cap,dashes,offset);  Mark mark=styleFactory.createMark(wellKnownName,markStroke,fill,size,rotation);  List<GraphicalSymbol> symbolList=new ArrayList<GraphicalSymbol>();  symbolList.add(mark);  GraphicFill graphicFill=styleFactory.graphicFill(symbolList,opacity,size,rotation,anchorPoint,displacement);  Fill completeFill=styleFactory.fill(graphicFill,null,null);  PolygonSymbolizer polygonSymbolizer=styleFactory.createPolygonSymbolizer();  polygonSymbolizer.setFill(completeFill);  polygonSymbolizer.setStroke(outlineStroke);  symbolizerList.add(polygonSymbolizer);  return symbolizerList;}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  public final ProgressEvent updateSubtask(String sSubtaskName){  SubtaskName=sSubtaskName;  return this;}  }
class C{  private boolean misplacedUnderscore(){  if (idx == 0 || idx + 1 == getLITERAL().length())   return true;switch (kind) {case DECIMAL:    return !(isDecimalDigit(peek(-1)) && isDecimalDigit(peek(1)));case HEXADECIMAL:  return !(isHexadecimalDigit(peek(-1)) && isHexadecimalDigit(peek(1)));case BINARY:return !(isBinaryDigit(peek(-1)) && isBinaryDigit(peek(1)));}throw new IllegalStateException("Unexpected literal kind");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_MOVE(String value0){  return new SM_SYSTEM_MESSAGE(1300813,value0);}  }
class C{  protected SecureAddAppEventQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  protected Object cloneBody(){  return cloneObject(Body);}  }
class C{  public UnknownParameterException(final String name){  super(LocalizedFormats.UNKNOWN_PARAMETER,name);  this.name=name;}  }
class C{  public boolean intersects(Ray ray){  float rhs;  Vector3f vect1=Vector3f.newInstance();  Vector3f vect2=Vector3f.newInstance();  Vector3f diff=ray.origin.subtract(getCenter(vect2),vect1);  final Array3f fWdU=Array3f.newInstance();  final Array3f fAWdU=Array3f.newInstance();  final Array3f fDdU=Array3f.newInstance();  final Array3f fADdU=Array3f.newInstance();  final Array3f fAWxDdU=Array3f.newInstance();  fWdU.a=ray.getDirection().dot(Vector3f.UNIT_X);  fAWdU.a=FastMath.abs(fWdU.a);  fDdU.a=diff.dot(Vector3f.UNIT_X);  fADdU.a=FastMath.abs(fDdU.a);  if (fADdU.a > xExtent && fDdU.a * fWdU.a >= 0.0) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  fWdU.b=ray.getDirection().dot(Vector3f.UNIT_Y);  fAWdU.b=FastMath.abs(fWdU.b);  fDdU.b=diff.dot(Vector3f.UNIT_Y);  fADdU.b=FastMath.abs(fDdU.b);  if (fADdU.b > yExtent && fDdU.b * fWdU.b >= 0.0) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  fWdU.c=ray.getDirection().dot(Vector3f.UNIT_Z);  fAWdU.c=FastMath.abs(fWdU.c);  fDdU.c=diff.dot(Vector3f.UNIT_Z);  fADdU.c=FastMath.abs(fDdU.c);  if (fADdU.c > zExtent && fDdU.c * fWdU.c >= 0.0) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  Vector3f wCrossD=ray.getDirection().cross(diff,vect2);  fAWxDdU.a=FastMath.abs(wCrossD.dot(Vector3f.UNIT_X));  rhs=yExtent * fAWdU.c + zExtent * fAWdU.b;  if (fAWxDdU.a > rhs) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  fAWxDdU.b=FastMath.abs(wCrossD.dot(Vector3f.UNIT_Y));  rhs=xExtent * fAWdU.c + zExtent * fAWdU.a;  if (fAWxDdU.b > rhs) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  fAWxDdU.c=FastMath.abs(wCrossD.dot(Vector3f.UNIT_Z));  rhs=xExtent * fAWdU.b + yExtent * fAWdU.a;  if (fAWxDdU.c > rhs) {    Vector3f.recycle(vect1);    Vector3f.recycle(vect2);    Array3f.recycle(fWdU);    Array3f.recycle(fAWdU);    Array3f.recycle(fDdU);    Array3f.recycle(fADdU);    Array3f.recycle(fAWxDdU);    return false;  }  Vector3f.recycle(vect1);  Vector3f.recycle(vect2);  Array3f.recycle(fWdU);  Array3f.recycle(fAWdU);  Array3f.recycle(fDdU);  Array3f.recycle(fADdU);  Array3f.recycle(fAWxDdU);  return true;}  }
class C{  public void cancelAlarm(Alarm alarm,boolean showSnackbar,boolean rescheduleIfRecurring){  Log.d(TAG,"Cancelling alarm " + alarm);  AlarmManager am=(AlarmManager)mAppContext.getSystemService(Context.ALARM_SERVICE);  PendingIntent pi=alarmIntent(alarm,true);  if (pi != null) {    am.cancel(pi);    pi.cancel();    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {      Intent alarmChanged=new Intent("android.intent.action.ALARM_CHANGED");      alarmChanged.putExtra("alarmSet",false);      mAppContext.sendBroadcast(alarmChanged);    }  }  pi=notifyUpcomingAlarmIntent(alarm,true);  if (pi != null) {    am.cancel(pi);    pi.cancel();  }  removeUpcomingAlarmNotification(alarm);  final int hoursToNotifyInAdvance=AlarmPreferences.hoursBeforeUpcoming(mAppContext);  if ((hoursToNotifyInAdvance > 0 && showSnackbar && alarm.ringsWithinHours(hoursToNotifyInAdvance)) || alarm.isSnoozed()) {    long time=alarm.isSnoozed() ? alarm.snoozingUntil() : alarm.ringsAt();    String msg=mAppContext.getString(R.string.upcoming_alarm_dismissed,formatTime(mAppContext,time));    showSnackbar(msg);  }  if (alarm.isSnoozed()) {    alarm.stopSnoozing();  }  if (!alarm.hasRecurrence()) {    alarm.setEnabled(false);  } else   if (alarm.isEnabled() && rescheduleIfRecurring) {    if (alarm.ringsWithinHours(hoursToNotifyInAdvance)) {      alarm.ignoreUpcomingRingTime(true);      Intent intent=new Intent(mAppContext,PendingAlarmScheduler.class).putExtra(PendingAlarmScheduler.EXTRA_ALARM_ID,alarm.getId());      pi=PendingIntent.getBroadcast(mAppContext,alarm.getIntId(),intent,PendingIntent.FLAG_ONE_SHOT);      am.set(AlarmManager.RTC_WAKEUP,alarm.ringsAt(),pi);    } else {      scheduleAlarm(alarm,false);    }  }  save(alarm);  mAppContext.stopService(new Intent(mAppContext,AlarmRingtoneService.class));}  }
class C{  public Rect insert(Rect rect,FreeRectChoiceHeuristic method){  Rect newNode=scoreRect(rect,method);  if (newNode.height == 0)   return null;  int numRectanglesToProcess=freeRectangles.size;  for (int i=0; i < numRectanglesToProcess; ++i) {    if (splitFreeNode(freeRectangles.get(i),newNode)) {      freeRectangles.removeIndex(i);      --i;      --numRectanglesToProcess;    }  }  pruneFreeList();  Rect bestNode=new Rect();  bestNode.set(rect);  bestNode.score1=newNode.score1;  bestNode.score2=newNode.score2;  bestNode.x=newNode.x;  bestNode.y=newNode.y;  bestNode.width=newNode.width;  bestNode.height=newNode.height;  bestNode.rotated=newNode.rotated;  usedRectangles.add(bestNode);  return bestNode;}  }
class C{  private boolean allSuccesorsOfAreThePredecessorsOf(Block aFirstBlock,Block aSecondBlock){  int size=aFirstBlock.getSuccs().size();  Iterator<Block> it=aFirstBlock.getSuccs().iterator();  List<Block> preds=aSecondBlock.getPreds();  while (it.hasNext()) {    if (!preds.contains(it.next()))     return false;  }  if (size == preds.size())   return true; else   return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_LOGIN_WARNING_GET_ITEM2(String value0){  return new SM_SYSTEM_MESSAGE(1390261,value0);}  }
class C{  public double[] toArray(){  double[] daRes=new double[3];  daRes[0]=ValueSimilarity;  daRes[1]=ContainmentSimilarity;  daRes[2]=SizeSimilarity;  return daRes;}  }
class C{  public static void init(Configuration conf){  try {    _conf=conf;    classLoader=new GClassLoader(Module.class.getClassLoader());    Thread thread=Thread.currentThread();    thread.setContextClassLoader(classLoader);    File f=new File(Model.HOME + "/modules/");    if (f.exists()) {      File[] list=f.listFiles();      if (list != null) {        for (        File f1 : list) {          if (f1.isDirectory()) {            Module m=load(f1.getName());            if (m == null) {              log.info("[" + f1.getName() + "] is not a valid module");            } else             if (!m.enabled) {              log.info("[" + f1.getName() + "] is disabled");            } else             if (modules.containsKey(m.id)) {              log.error("the [id] duplicated, [" + m.name + ", "+ modules.get(m.id).name+ "], ignore the ["+ m.name+ "]");              m.error=Language.getLanguage().get("module.error.duplicatedid");            } else             if (!X.isSame(m.name,f1.getName())) {              log.error("the [name] is invlaid, folder=" + f1.getName() + ", module="+ m.name);              m.error=Language.getLanguage().get("module.error.name");            } else {              modules.put(m.id,m);            }          }        }      }    } else {      log.error("giiwa modules missed, please re-install it, modules=" + f.getCanonicalPath());    }    if (modules.size() > 0) {      home=modules.lastEntry().getValue();    }    log.debug("modules=" + modules);    Menu.reset();    for (    Module m : modules.values()) {      m.initModels();      m._init(_conf);    }    Menu.cleanup();    String locale=null;    Module f1=home;    while (locale == null && f1 != null) {      locale=f1.get("default.locale");      f1=f1.floor();    }    if (locale != null) {      Locale.setDefault(new Locale(locale));    }    boolean changed=false;    List<String> names=Jar.loadAll(W.create());    if (names != null && names.size() > 0) {      for (      Object name : names) {        List<String> modules=Jar.load(name.toString());        boolean used=false;        if (modules != null && modules.size() > 0) {          for (          Object m1 : modules) {            Module m2=Module.load(m1.toString());            if (m2 != null) {              used=true;            }          }        }        if (!used) {          File f2=new File(Model.HOME + File.separator + "WEB-INF"+ File.separator+ "lib"+ File.separator+ name);          if (f2.exists()) {            log.info("as not module used the jar, delete it, [" + name + "]");            f2.delete();            changed=true;          }          Jar.remove(name.toString());        }      }    }    if (changed) {      log.warn("jar files changed, restarting again...");      System.exit(0);    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  private static void expandBelow7DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){  expandLargeNumber(numberString,"thousand",3,wordRelation,tokenItem);}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  @Override protected final void synchronizeChildren(){  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  ownerDocument.synchronizeChildren(this,fNodeIndex);}  }
class C{  protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){  int l=(int)(4 / normalisedTransitionBandwidth);  if (l % 2 == 0)   l++;  return l;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200659,skillcaster,skillname);}  }
class C{  private boolean isValidSelection(int day){  if ((days == null) || (day > days.length)) {    return false;  }  int i=0;  while ((i < days.length) && (days[i] > 1)) {    if (i == day)     return false;    i++;  }  if (i == day) {    return true;  }  i++;  for (; (i < days.length) && (days[i] > 1); i++) {    if (i == day)     return true;  }  return false;}  }
class C{  protected void checkAndSendUnparsedEntity(UnparsedEntity ent){  if (isRootDocument()) {    int index=fUnparsedEntities.indexOf(ent);    if (index == -1) {      XMLResourceIdentifier id=new XMLResourceIdentifierImpl(ent.publicId,ent.systemId,ent.baseURI,ent.expandedSystemId);      addUnparsedEntity(ent.name,id,ent.notation,ent.augmentations);      if (fSendUEAndNotationEvents && fDTDHandler != null) {        fDTDHandler.unparsedEntityDecl(ent.name,id,ent.notation,ent.augmentations);      }    } else {      UnparsedEntity localEntity=(UnparsedEntity)fUnparsedEntities.get(index);      if (!ent.isDuplicate(localEntity)) {        reportFatalError("NonDuplicateUnparsedEntity",new Object[]{ent.name});      }    }  } else {    fParentXIncludeHandler.checkAndSendUnparsedEntity(ent);  }}  }
class C{  public void openProperties(DataSource dataSource){  openProperties(dataSource,PropertiesProvider.CATEGORY_GENERAL);}  }
class C{  @Deployment public void testNonInterruptingSignalWithSubProcess(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("nonInterruptingSignalWithSubProcess");  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(1,tasks.size());  Task currentTask=tasks.get(0);  assertEquals("Approve",currentTask.getName());  runtimeService.signalEventReceived("alert");  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(2,tasks.size());  for (  Task task : tasks) {    if (!task.getName().equals("Approve") && !task.getName().equals("Review")) {      fail("Expected: <Approve> or <Review> but was <" + task.getName() + ">.");    }  }  taskService.complete(taskService.createTaskQuery().taskName("Approve").singleResult().getId());  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(1,tasks.size());  currentTask=tasks.get(0);  assertEquals("Review",currentTask.getName());  taskService.complete(taskService.createTaskQuery().taskName("Review").singleResult().getId());  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(1,tasks.size());}  }
class C{  public void typeCheck(){  TypeDecl typeAutoCloseable=lookupType("java.lang","AutoCloseable");  if (typeAutoCloseable == null)   error("java.lang.AutoCloseable not found"); else   if (!getTypeAccess().type().instanceOf(typeAutoCloseable))   error("Resource specification must declare an AutoCloseable resource");}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("load taxonomyFile=");  String treeFile=np.getWordFileNamePunctuation();  String mapFile=null;  if (np.peekMatchAnyTokenIgnoreCase("mapFile")) {    np.matchIgnoreCase("mapFile=");    mapFile=np.getWordFileNamePunctuation();  }  np.matchIgnoreCase(";");  if (mapFile == null)   mapFile=Basic.replaceFileSuffix(treeFile,".map");  Classification classification=ClassificationManager.load(Classification.Taxonomy,treeFile,mapFile,getDoc().getProgressListener());  Node v=classification.getFullTree().getRoot();  if (v != null && (Integer)v.getInfo() == 0) {    v.setInfo(1);    classification.getFullTree().addId2Node(0,null);    classification.getFullTree().addId2Node(1,v);    classification.getIdMapper().getName2IdMap().put("Root",1);  }  Collection<Pair<String,String>> mappingFixes=new LinkedList<>();  mappingFixes=ProgramProperties.get(MeganProperties.TAXON_MAPPING_CHANGES,mappingFixes);  for (  Pair<String,String> pair : mappingFixes) {    String taxonName=pair.getFirst();    int taxId=Integer.parseInt(pair.getSecond());    System.err.println("Changing taxon mapping of '" + taxonName + "' from "+ TaxonomyData.getName2IdMap().get(taxonName)+ " to "+ taxId);    TaxonomyData.getName2IdMap().put(taxonName,taxId);    classification.getIdMapper().getName2IdMap().put(taxonName,taxId);    classification.getId2Rank().put(taxId,0);  }  ProgramProperties.put(MeganProperties.TAXONOMYFILE,treeFile);  Document.loadVersionInfo("Taxonomy",treeFile);}  }
class C{  private void logExpiration(Entry e){  if (e.renewalsDone()) {    logger.log(Level.FINE,"Reached desired expiration for lease {0}",e.lease);  } else {    logger.log(Levels.FAILED,"Lease {0} expired before reaching desired expiration",e.lease);  }}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    refreshListOfFilesFragment();  } else {    try {      Toast msg=Toast.makeText(FolderPickerActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  protected AdsGetCampaignsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public MatD(){  this(new double[]{1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1});}  }
class C{  private void cleanIndexTables() throws SAException {  IServerTypeDesc templateType=_cacheManager.getTypeManager().getServerTypeDesc(OBJECT_CLASS);  IServerTypeDesc[] subTypeDescs=templateType.getAssignableTypes();  for (  IServerTypeDesc subTypeDesc : subTypeDescs) {    TypeData typeData=_cacheManager.getTypeData(subTypeDesc);    if (typeData == null)     continue;    final TypeDataIndex[] indexes=typeData.getIndexes();    for (    TypeDataIndex index : indexes) {      checkTemplates(index._RTTemplates);      checkTemplates(index._NTemplates);    }    checkEntries(typeData.getNotifyUidTemplates());    checkEntries(typeData.getReadTakeUidTemplates());  }}  }
class C{  public LoadMetadataDetails[] readLoadMetadata(String tableFolderPath){  Gson gsonObjectToRead=new Gson();  DataInputStream dataInputStream=null;  BufferedReader buffReader=null;  InputStreamReader inStream=null;  String metadataFileName=tableFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.LOADMETADATA_FILENAME;  LoadMetadataDetails[] listOfLoadFolderDetailsArray;  AtomicFileOperations fileOperation=new AtomicFileOperationsImpl(metadataFileName,FileFactory.getFileType(metadataFileName));  try {    if (!FileFactory.isFileExist(metadataFileName,FileFactory.getFileType(metadataFileName))) {      return new LoadMetadataDetails[0];    }    dataInputStream=fileOperation.openForRead();    inStream=new InputStreamReader(dataInputStream,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));    buffReader=new BufferedReader(inStream);    listOfLoadFolderDetailsArray=gsonObjectToRead.fromJson(buffReader,LoadMetadataDetails[].class);  } catch (  IOException e) {    return new LoadMetadataDetails[0];  } finally {    closeStreams(buffReader,inStream,dataInputStream);  }  return listOfLoadFolderDetailsArray;}  }
class C{  public SketchRoundUpMapper(FieldName columnName){  this(columnName.asName());}  }
class C{  public boolean tryOnce(){  logger.finest("LookupLocatorDiscovery - DiscoveryTask started");synchronized (LookupLocatorDiscovery.this) {    if (terminated) {      return true;    }    if (undiscoveredLocators.isEmpty()) {      logger.finest("LookupLocatorDiscovery - DiscoveryTask " + "completed");      return true;    }    if (!undiscoveredLocators.contains(reg)) {      logger.finest("LookupLocatorDiscovery - DiscoveryTask " + "completed");      return true;    }  }  boolean noRetry=regTryGetProxy(reg);synchronized (LookupLocatorDiscovery.this) {    if (terminated) {      return true;    }    if (noRetry) {      logger.finest("LookupLocatorDiscovery - DiscoveryTask completed. locator: " + reg.l);    } else {      logger.finest("LookupLocatorDiscovery - DiscoveryTask failed, will retry later. locator: " + reg.l);    }    return noRetry;  }}  }
class C{  public boolean checkAndAssignTableData(QueryTableData tableData) throws SQLException {  ITypeDesc currentInfo=tableData.getTypeDesc();  for (int c=0; c < currentInfo.getNumOfFixedProperties(); c++) {    String columnName=getColumnName();    PropertyInfo fixedProperty=currentInfo.getFixedProperty(c);    if (fixedProperty.getName().equalsIgnoreCase(columnName)) {      QueryTableData columnTableData=getColumnTableData();      if (columnTableData != null && columnTableData != tableData)       throw new SQLException("Ambiguous column name [" + columnName + "]");      setColumnTableData(tableData);      setColumnIndexInTable(c);      return true;    }  }  return false;}  }
class C{  public Builder position(String position){  this.position=position;  return this;}  }
class C{  private int buildFlags(){  int flags=0;  if (DestinationName != null) {    flags|=BitMap.DESTINATION_NAME_BIT;  }  if (JMSDestination != null) {    flags|=BitMap.JMS_DESTINATION_BIT;  }  if (JMSDeliveryMode != null) {    flags|=BitMap.JMS_DELIVERY_MODE_BIT;  }  if (JMSExpiration != null) {    flags|=BitMap.JMS_EXPIRATION_BIT;  }  if (JMSPriority != null) {    flags|=BitMap.JMS_PRIORITY_BIT;  }  if (JMSMessageID != null) {    flags|=BitMap.JMS_MESSAGE_ID_BIT;  }  if (JMSTimestamp != null) {    flags|=BitMap.JMS_TIMESTAMP_BIT;  }  if (JMSCorrelationID != null) {    flags|=BitMap.JMS_CORRELATION_ID_BIT;  }  if (JMSReplyTo != null) {    flags|=BitMap.JMS_REPLY_TO_BIT;  }  if (JMSType != null) {    flags|=BitMap.JMS_TYPE_BIT;  }  if (JMSRedelivered != null) {    flags|=BitMap.JMS_REDELIVERED_BIT;  }  if (Body != null) {    flags|=BitMap.BODY_BIT;  }  if (Properties != null) {    flags|=BitMap.PROPERTIES_BIT;  }  return flags;}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200474,skilltarget);}  }
class C{  protected Uri onRestoreRingtone(){  final String uriString=getPersistedString(null);  return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((comboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      ValueComboBoxData valueComboBoxData=comboDataMap.get(oldValue);      if (valueComboBoxData != null) {        comboBox.setSelectedItem(valueComboBoxData);      }    }  }}  }
class C{  public RecognitionRequest(String... urls){  for (  String url : urls) {    items.add(new Item(url));  }}  }
class C{  public synchronized void addRoute(String to,String via){  if (routeExists(to,via)) {    return;  }  addForwardEntry(to,via);  inverseTable.add(via,to);}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.180535929306,0.262801138133,0.301905425199,0.330899152971,0.353441418887,0.000788590320203,0.00737060094841,0.0177576041516,0.0343043442574,0.065664589369};}  }
class C{  public MultiDirectionalSimplex(final int n,final double khi,final double gamma){  this(n,1d,khi,gamma);}  }
class C{  public static void main(String[] args){  if ((args.length != 2) && (args.length != 3)) {    System.out.println("Usage:");    System.out.println("ExportSLD <input JSON file> <destination folder> [<output format>]");    System.out.println("Where <output format> is SLD, YSLD.  The default IS SLD");    System.exit(0);  }  String filename=args[0];  File outputFolder=new File(args[1]);  if (!outputFolder.exists()) {    outputFolder.mkdirs();  }  if (args.length == 3) {    SLDOutputFormatEnum format;    try {      format=SLDOutputFormatEnum.valueOf(args[2]);      outputFormat=format;    } catch (    IllegalArgumentException e) {      System.err.println("Unknown output format : " + args[2]);      System.exit(1);    }  }  Map<String,SLDDataInterface> layerMap=MXDParser.readLayers(filename,outputFormat);  if (layerMap != null) {    for (    String layerName : layerMap.keySet()) {      File f=new File(outputFolder,generateFilename(layerName));      writeData(f,layerName,layerMap.get(layerName));    }  }}  }
class C{  public GeoServerLayerUpdateTool(GeoServerLayerUpdateInterface geoServerLayerUpdate){  super();  this.geoServerLayerUpdate=geoServerLayerUpdate;  populateSupportedTypes();  createUI();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_CANCELED(String value0){  return new SM_SYSTEM_MESSAGE(1300464,value0);}  }
class C{  public int seed(){  return seed;}  }
class C{  public final java_cup.runtime.Symbol CUP$cup$do_action(int CUP$cup$act_num,java_cup.runtime.lr_parser CUP$cup$parser,java.util.Stack CUP$cup$stack,int CUP$cup$top) throws java.lang.Exception {  return CUP$cup$do_action_part00000000(CUP$cup$act_num,CUP$cup$parser,CUP$cup$stack,CUP$cup$top);}  }
class C{  public static void logPromoOpenCount(int count){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoOpenCount",count);}  }
class C{  private void fixTies(double[] x,double[] y){  final double[] values=MathArrays.unique(MathArrays.concatenate(x,y));  if (values.length == x.length + y.length) {    return;  }  double minDelta=1;  double prev=values[0];  double delta=1;  for (int i=1; i < values.length; i++) {    delta=prev - values[i];    if (delta < minDelta) {      minDelta=delta;    }    prev=values[i];  }  minDelta/=2;  gen.setSeed(100);  int ct=0;  boolean ties=true;  do {    jitter(x,minDelta);    jitter(y,minDelta);    ties=hasTies(x,y);    ct++;  } while (ties && ct < 1000);  if (ties) {    throw MathRuntimeException.createInternalError();  }}  }
class C{  public void removeCommunicationListener(FTPCommunicationListener listener){  communicationListeners.remove(listener);}  }
class C{  public boolean simplify_offline(){  return soot.PhaseOptions.getBoolean(options,"simplify-offline");}  }
class C{  void write(BlockId blk,IoBuffer buffer){  try {    IoChannel fileChannel=getFileChannel(blk.fileName());    buffer.rewind();    fileChannel.write(buffer,blk.number() * BLOCK_SIZE);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("cannot write block" + blk);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  AddToValue that=(AddToValue)o;  return myId == that.myId;}  }
class C{  public MarketSearchQueryWithExtended q(String value){  return unsafeParam("q",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200616,skillcaster,skillname);}  }
class C{  @Override public ChiSquaredDistribution makeDistribution(){  return new ChiSquaredDistribution(5.0);}  }
class C{  private boolean shouldRescheduleInvoker(int idleTaskExecutionCount){synchronized (this.activeInvokerMonitor) {    boolean idle=(idleTaskExecutionCount >= this.idleTaskExecutionLimit);    return (this.scheduledInvokers.size() <= (idle ? this.concurrentConsumers : this.maxConcurrentConsumers));  }}  }
class C{  public int size(){  return nsplits;}  }
class C{  public GroupsCreateQuery subtype(GroupsCreateSubType value){  return unsafeParam("subtype",value);}  }
class C{  public static void addTimingSplit(String splitLabel){  mTimingLogger.addSplit(splitLabel);}  }
class C{  public static <T,R>Future<List<R>> processList(List<T> collection,Function<T,Future<R>> processFunc,@Nullable ExecutorService callbackExecutor){  ListFutureProcessor<T,R> processor=new ListFutureProcessor<T,R>(collection,processFunc,callbackExecutor);  if (null != callbackExecutor) {    callbackExecutor.submit(processor);  } else {    processor.run();  }  return processor.promise;}  }
class C{  public synchronized void reset(){}  }
class C{  public double readDouble() throws IOException {  return dis.readDouble();}  }
class C{  public EigenValueDecomposition eig(){  return new EigenValueDecomposition(this);}  }
class C{  private WindowStuffHelper(){}  }
class C{  public void deactivate(){  mSensorManager.unregisterListener(this);  mInitialRotationMatrix=null;  mActive=false;}  }
class C{  public boolean isLocaleSpecificLayout(){  return myEditedConfig.getLocaleQualifier() != null;}  }
class C{  public void addGetLatch(String ticket,CountDownLatch latch){  getLatches.put(ticket,latch);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(super.toString());  builder.append('{');  for (int i=0; i < delegates.length; i++) {    if (i > 0) {      builder.append(',');    }    builder.append(delegates[i]);  }  builder.append('}');  return builder.toString();}  }
class C{  public synchronized void clear(){  leases.clear();  leaseInRenew.clear();  calcActualRenews();  logger.log(Level.FINE,"Removed all leases");}  }
class C{  public boolean requiresReboot(){  return this.status != null && this.status.equals(ConfigConstants.Status.RESTART);}  }
class C{  public void acceptVisit(ExpressionVisitor visitor){  visitor.enter(this);  _expressions.filter.acceptVisit(visitor);  visitor.exit(this);}  }
class C{  public static String[] delimitedListToStringArray(String str,String delimiter){  if (str == null) {    return new String[0];  }  if (delimiter == null) {    return new String[]{str};  }  List<String> result=new ArrayList<String>();  if ("".equals(delimiter)) {    for (int i=0; i < str.length(); i++) {      result.add(str.substring(i,i + 1));    }  } else {    int pos=0;    int delPos;    while ((delPos=str.indexOf(delimiter,pos)) != -1) {      result.add(str.substring(pos,delPos));      pos=delPos + delimiter.length();    }    if (str.length() > 0 && pos <= str.length()) {      result.add(str.substring(pos));    }  }  return toStringArray(result);}  }
class C{  public DisjointExtended(){  super(null,null);}  }
class C{  private ReplicationSource newRemoteReplicationSource(DataCenter dataCenter){  MultiThreadedServiceFactory<ReplicationSource> clientFactory=new ReplicationClientFactory(_jerseyClient).usingApiKey(_replicationApiKey);  ServiceEndPoint endPoint=new ServiceEndPointBuilder().withServiceName(clientFactory.getServiceName()).withId(dataCenter.getName()).withPayload(new PayloadBuilder().withUrl(dataCenter.getServiceUri().resolve(ReplicationClient.SERVICE_PATH)).withAdminUrl(dataCenter.getAdminUri()).toString()).build();  return ServicePoolBuilder.create(ReplicationSource.class).withHostDiscovery(new FixedHostDiscovery(endPoint)).withServiceFactory(clientFactory).withCachingPolicy(ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()).withHealthCheckExecutor(_healthCheckExecutor).withMetricRegistry(_metrics).buildProxy(new ExponentialBackoffRetry(30,1,10,TimeUnit.SECONDS));}  }
class C{  public List<SerialMessage> receiveCommand(ZWaveThingChannel channel,ZWaveNode node,Command command){  return new ArrayList<SerialMessage>();}  }
class C{  public boolean addInsertion(Insertion insert){  setHasNewItems(true);  int insertPosition=getItemCount() <= getFootersCount() ? 0 : getItemCount() - getFootersCount();  boolean result;  if (getFootersCount() == 0) {    mInserts.add(insert);    result=getItems().add(null);  } else {    mInserts.add(insertPosition,insert);    getItems().add(insertPosition,null);    result=true;  }  updateCounter(insert);  notifyIfNeed();  return result;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (int i=0; i < controls.length; i++) {    if (i != 0) {      buf.append(", ");      if ((i + 1) == controls.length) {        buf.append("and ");      }    }    buf.append(controls[i].getType());  }  return new String(getType() + " Control containing " + buf+ " Controls.");}  }
class C{  @PostConstruct public void init() throws IDBPersistenceException {  waitForConnection();}  }
class C{  public static double mean(Iterator tuples,String field){  try {    int count=0;    double sum=0;    while (tuples.hasNext()) {      sum+=((Tuple)tuples.next()).getDouble(field);      ++count;    }    return sum / count;  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  public List<Pet> findAll(){  log.debug("Request to get all Pets");  List<Pet> result=petRepository.findAll();  return result;}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public Set<Value> mayAliasesAtExit(Value v){  Set<Value> res=new HashSet<Value>();  for (  Unit u : graph.getTails()) {    Set<Set<Value>> flow=getFlowAfter(u);    for (    Set<Value> set : flow) {      if (set.contains(v))       res.addAll(set);    }  }  return res;}  }
class C{  private void populateAllowedTypes(Class<?> key,Class<?>[] allowedTypeArray){  allowedTypeMap.put(key,Arrays.asList(allowedTypeArray));}  }
class C{  public static String loadAsset(String path,Context context){  if (path == null || context == null) {    return null;  }  StringBuilder builder;  try {    InputStream in=context.getAssets().open(path);    builder=new StringBuilder(in.available() + 10);    BufferedReader localBufferedReader=new BufferedReader(new InputStreamReader(in));    char[] data=new char[2048];    int len=-1;    while ((len=localBufferedReader.read(data)) > 0) {      builder.append(data,0,len);    }    localBufferedReader.close();    if (in != null) {      try {        in.close();      } catch (      IOException e) {        WXLogUtils.e("WXFileUtils loadAsset: ",e);      }    }    return builder.toString();  } catch (  IOException e) {    e.printStackTrace();    WXLogUtils.e("",e);  }  return "";}  }
class C{  public static DataFrame zeromeanUnitVariance(DataFrame frame,List<String> skipColumns){  String[] columnNames=frame.columns();  for (  String columnName : columnNames) {    if (skipColumns.contains(columnName))     continue;    DataFrame meanStd=frame.select(columnName).agg(mean(columnName),stddev(columnName));    Row r=meanStd.collect()[0];    double mean=((Number)r.get(0)).doubleValue();    double std=((Number)r.get(1)).doubleValue();    if (std == 0.0)     std=1;    frame=frame.withColumn(columnName,frame.col(columnName).minus(mean).divide(std));  }  return frame;}  }
class C{  public void storeInfoSection() throws IOException {  try (InputOutputReaderWriter io=new InputOutputReaderWriter(file,"rw")){    if (infoSection.getInfoSectionStart() <= 0)     throw new IOException("getInfoSectionStart(), illegal value: " + infoSection.getInfoSectionStart());    io.seek(infoSection.getInfoSectionStart());    infoSection.write(io);    io.setLength(io.getPosition());  } }  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_CAN_NOT_REMOVE_SKIN_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300482,value0);}  }
class C{  public DistributedLogNamespaceBuilder uri(URI uri){  this._uri=uri;  return this;}  }
class C{  ServerPeer export(Remote object,ITransportConfig config) throws RemoteException, ConfigurationException {  if (_isShutdown)   throw new RMIShutDownException("LRMIRuntime was shutdown");  if (_exporterLogger.isLoggable(Level.FINE)) {    _exporterLogger.log(Level.FINE,"Trying to export class=" + object.getClass());  }  String protocol=config.getProtocolName();synchronized (_objectRegistry) {    if (config != null)     init(config,Side.SERVER);    ProtocolAdapter<?> protocolAdapter=_protocolRegistry.get(protocol);    if (protocolAdapter == null) {      throw new RemoteException("Failed to export object: protocol " + protocol + " is not registered in protocol registry");    }    ObjectRegistry.Entry orEntry=_objectRegistry.getEntryFromObject(object);    if (orEntry == null) {      orEntry=_objectRegistry.createEntry(object,UIDGen.nextId(),LRMIUtilities.getSortedLRMIMethodList(object.getClass()));      ServerPeer serverPeer=protocolAdapter.newServerPeer(orEntry.m_ObjectId,orEntry.getExportedThreadClassLoader(),Pivot.getServiceDetails(object));      serverPeer.beforeExport(config);      orEntry.setProtocol(protocol);      orEntry.setServerPeer(serverPeer);      if (_exporterLogger.isLoggable(Level.FINE)) {        _exporterLogger.log(Level.FINE,"LRMIRuntime exported remote object [localObj=" + object.getClass().getName() + "@"+ Integer.toHexString(System.identityHashCode(object))+ ", protocol="+ protocol+ ", remoteObjID="+ orEntry.m_ObjectId+ ", RemoteObjectClassLoader="+ object.getClass().getClassLoader()+ ", ExportedThreadClassLoader: "+ orEntry.getExportedThreadClassLoader()+ "]");      }    }    return orEntry.getServerPeer();  }}  }
class C{  private void requestPhotosInCategoryOrders(Context c,int page,boolean refresh){  page=refresh ? 1 : page + 1;  listener=new OnRequestPhotosListener(c,page,model.getPhotosCategory(),refresh,false);  model.getService().requestPhotosInAGivenCategory(model.getPhotosCategory(),page,Mysplash.DEFAULT_PER_PAGE,listener);}  }
class C{  @Override public Expression createExpression(EnvVar envVar){  if (envVar == null) {    return null;  }  Function function=ff.function("env",ff.literal(envVar.getName()));  return function;}  }
class C{  public VideoSearchQueryWithExtended hd(Integer value){  return unsafeParam("hd",value);}  }
class C{  private static GroupName nameFromObjectName(ObjectName obj_name,NamedResolverMap resolvedMap){  String name=obj_name.getKeyProperty("name");  String type=obj_name.getKeyProperty("type");  String domain=obj_name.getDomain();  Map<String,MetricValue> tags=obj_name.getKeyPropertyList().entrySet().stream().filter(null).filter(null).map(null).collect(Collectors.toMap(null,null));  final List<String> path=new ArrayList<>();  if (name != null) {    path.addAll(Arrays.asList(name.split("\\.")));  } else   if (type != null) {    path.addAll(Arrays.asList(domain.split("\\.")));    path.add(type);  } else {    path.addAll(Arrays.asList(domain.split("\\.")));  }  return resolvedMap.getGroupName(path,tags);}  }
class C{  protected void copy(Object source,Object dest){  FlowSet fource=(FlowSet)source;  FlowSet fest=(FlowSet)dest;  fource.copy(fest);}  }
class C{  public Map<String,Object[]> highlightToObjects(String fieldsIn[],Query query,IndexSearcher searcher,int docidsIn[],int maxPassagesIn[]) throws IOException {  return super.highlightFieldsAsObjects(fieldsIn,query,searcher,docidsIn,maxPassagesIn);}  }
class C{  @Override public void mouseRelease(int x,int y,ViewTransform transform,Selection selection){  for (  TableClickTarget target : mTableClickTargets) {    if (target.contains(x,y)) {      ConstraintTableLayout table=target.getTable();      int column=target.getColumn();      table.cycleColumnAlignment(column);    }  }}  }
class C{  public SimpleCommand(String commandName,Argument... arguments){  _commandName=commandName;  _arguments=arguments;}  }
class C{  public double angle(){  double angle=Math.atan2(y,x) * TO_DEGREES;  if (angle < 0)   angle+=360;  return angle;}  }
class C{  Collection<? extends ClientRequestResult> handleApplyConfigurationRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){  final Collection<ConfigurationReport> reports=new ArrayList<>(configurationRequest.getTagIds().size());  for (  Long id : configurationRequest.getTagIds()) {    final int configId=castLongToInt(id);switch (configurationRequest.getResultType()) {case TRANSFER_CONFIGURATION_REPORT:      ClientRequestReportHandler reportHandler=new ClientRequestReportHandler(session,replyDestination,DEFAULT_REPLY_TTL);    reports.add(configurationLoader.applyConfiguration(configId,reportHandler));  if (LOG.isDebugEnabled()) {    LOG.debug("Finished processing reconfiguration request with id " + configId);  }break;default :LOG.error("handleConfigurationRequest() - Could not generate response message. Unknown enum ResultType " + configurationRequest.getResultType());}}return reports;}  }
class C{  public boolean localHostOrDomainIs(String host,String domain){  return domain.startsWith(host);}  }
class C{  protected void handleEnd(Collection<T> results) throws IOException {}  }
class C{  private String shortDescription(){  StringBuilder buffer=new StringBuilder();  if (refName.length() > 0)   buffer.append(String.format(">%s\n",Basic.fold(refName,ALIGNMENT_FOLD)));{    if (optionalFields.get("ZL") != null)     buffer.append(String.format("\tLength = %s\n\n",optionalFields.get("ZL").toString())); else     buffer.append("\n");  }{    boolean hasFirst=false;    boolean hasSecond=false;    if (optionalFields.get("AS") != null && optionalFields.get("AS") instanceof Integer) {      buffer.append(String.format(" Score = %d",getBitScore()));      if (optionalFields.get("ZR") != null && optionalFields.get("ZR") instanceof Integer) {        buffer.append(String.format(" bits (%d)",getRawScore()));      }      hasFirst=true;    }    if (optionalFields.get("ZE") != null && optionalFields.get("ZE") instanceof Float) {      if (hasFirst)       buffer.append(",");      if (getExpected() == 0)       buffer.append(" Expect = 0"); else       buffer.append(String.format(" Expect = %.1g",getExpected()));      hasSecond=true;    }    if (hasFirst || hasSecond)     buffer.append("\n");  }{    if (optionalFields.get("AL") != null)     buffer.append(optionalFields.get("AL").toString()).append("\n");  }  return buffer.toString();}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public float lengthSquared(){  return x * x + y * y + z * z;}  }
class C{  public Vector3D intersection(final Line line){  final Vector3D closest=closestPoint(line);  return line.contains(closest) ? closest : null;}  }
class C{  public UnsupportedAudioFileException(){  super();}  }
class C{  public synchronized void start() throws IllegalStateException, IOException {  if (!mStreaming) {    configure();    super.start();  }}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  public static String join(List<?> l,String glue){  StringBuilder sb=new StringBuilder();  for (int i=0; i < l.size(); i++) {    if (i > 0) {      sb.append(glue);    }    Object x=l.get(i);    sb.append(x.toString());  }  return sb.toString();}  }
class C{  public Future execute(Object seed,CompletionCallback callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.tasks_,seed,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public TapTarget titleTextSize(int sp){  if (sp < 0)   throw new IllegalArgumentException("Given negative text size");  this.titleTextSize=sp;  return this;}  }
class C{  public synchronized void reset(){  Iterator iter=m_focus.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    TupleSet ts=(TupleSet)entry.getValue();    ts.clear();  }  m_visual.clear();  m_source.clear();}  }
class C{  private void initModel(){  this.multiFilterBarModel=new MultiFilterBarObject();}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public WallCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  public void commitOutstandingModelState(long time){  mStacks[1].ensureCleaningUpDyingTabs(time);  mStacks[0].ensureCleaningUpDyingTabs(time);}  }
class C{  private SegmentNode generate_many_to_all(SegmentNode mp){  long left, right;  SegmentNode p;  left=mp.I1;  right=left + mp.L;  p=mp.next;  while (p != null) {    if (p.I1 < left)     left=p.I1;    long t=p.I1 + p.L;    if (t > right)     right=t;    p=p.next;  }  mp.I1=left;  mp.I2=0;  mp.L=right - left;  mp.next=null;  return mp;}  }
class C{  private Object tryToIgnoreInvalidTags(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  final Object[] valueTokens=splitToTokensAndAllowInvalidTags(pInputParams);  final Object result=InvalidExpressionParser.getInstance().eval(valueTokens);  return result;}  }
class C{  public static boolean isTryCatch(){  return Boolean.getBoolean(LOG_ERROR_PROPERTY);}  }
class C{  private void drawVertical(Canvas c,RecyclerView parent){  final int left=parent.getPaddingLeft();  final int right=parent.getWidth() - parent.getPaddingRight();  final int childCount=parent.getChildCount();  for (int i=0; i < childCount; i++) {    final View child=parent.getChildAt(i);    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();    final int top=child.getBottom() + params.bottomMargin;    final int bottom=top + divider.getIntrinsicHeight();    divider.setBounds(left,top,right,bottom);    divider.draw(c);  }}  }
class C{  private void methodInvoke(){  if (index < interceptors.length) {    interceptors[index++].intercept(this);  } else   if (index++ == interceptors.length) {    Resource resource;    try {      if (SpringHolder.alive) {        resource=SpringBuilder.getBean(route.getResourceClass());      } else {        resource=route.getResourceClass().newInstance();      }      checkNotNull(resource,"Could init '" + route.getResourceClass() + "' before invoke method.");      resource.setRouteMatch(routeMatch);      Params params=routeMatch.getParams();      validate(params);      Method method=route.getMethod();      method.setAccessible(true);      if (route.getAllParamNames().size() > 0) {        List<Class<?>> allParamTypes=route.getAllParamTypes();        List<String> allParamNames=route.getAllParamNames();        Object[] args=new Object[allParamNames.size()];        int i=0;        for (        String name : allParamNames) {          if (HttpRequest.class.isAssignableFrom(allParamTypes.get(i))) {            args[i++]=routeMatch.getRequest();          } else           if (HttpResponse.class.isAssignableFrom(allParamTypes.get(i))) {            args[i++]=routeMatch.getResponse();          } else           if (Headers.class.isAssignableFrom(allParamTypes.get(i))) {            args[i++]=routeMatch.getHeaders();          } else           if (Params.class.isAssignableFrom(allParamTypes.get(i))) {            args[i++]=routeMatch.getParams();          } else {            args[i++]=params.get(name);          }        }        invokeResult=method.invoke(resource,args);      } else {        invokeResult=method.invoke(resource);      }      wasInvoke=true;      render(invokeResult);    } catch (    Exception e) {      route.throwException(e);    }  }}  }
class C{  public void recover() throws LogException {}  }
class C{  public NewsfeedSearchQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void w(String c,String s){  if (isEnable()) {    if (s == null)     s="\"NULL\"";    Log.w(c,s);  }}  }
class C{  public boolean skipTo(long position) throws IOException {  if (position == position()) {    return true;  }  LogReader skipReader=dlm.getInputStream(position);  LogRecordWithInputStream logRecord=null;  try {    logRecord=nextLogRecord(skipReader);  } catch (  IOException ex) {    skipReader.close();    throw ex;  }  if (null == logRecord) {    return false;  }  currentPosition=logRecord.getOffset();  currentLogRecord=logRecord;  LogReader oldReader=reader;  reader=skipReader;  oldReader.close();  byte[] skipBuffer=new byte[SKIP_BUFFER_SIZE];  while (currentPosition < position) {    long bytesToRead=Math.min(position - currentPosition,SKIP_BUFFER_SIZE);    long bytesRead=read(skipBuffer,0,(int)bytesToRead);    if (bytesRead < bytesToRead) {      return false;    }  }  return true;}  }
class C{  public String authorizeConsumerRequestToken(String url) throws Exception {  WebTarget target=ClientBuilder.newClient().target(url);  Invocation.Builder builder=target.request();  builder.header("Accept","application/xml");  String base64Credentials=new String(Base64.encodeBytes("admin:admin".getBytes()));  builder.header("Authorization","Basic " + base64Credentials);  Response response=null;  try {    response=builder.get();    if (200 != response.getStatus()) {      throw new RuntimeException("No authorization request data is available");    }    String body=response.readEntity(String.class);    String consumerId=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:consumerId/text()");    String consumerName=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:consumerName/text()");    String requestScope=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:scopes/text()");    String requestPermission=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/ns:permissions/text()");    String message="Authorize " + ("".equals(consumerName) ? consumerId : consumerName) + System.getProperty("line.separator")+ " to access "+ ("".equals(requestScope) ? "your resources" : requestScope)+ (requestPermission == null ? "" : (System.getProperty("line.separator") + " and grant the following permissions : \"" + requestPermission+ "\""))+ " (yes/no) ?";    String decision=JOptionPane.showInputDialog(message);    if (decision == null || !"yes".equalsIgnoreCase(decision)) {      decision="no";    }    String replyTo=evaluateBody(new ByteArrayInputStream(body.getBytes()),"/ns:tokenAuthorizationRequest/@replyTo");    replyTo+="&xoauth_end_user_decision=" + decision.toLowerCase();    return confirmAuthorization(replyTo);  }  finally {    response.close();  }}  }
class C{  public void addSet(String name,TupleSet set){  if (hasSet(name)) {    throw new IllegalArgumentException("Name already in use: " + name);  }  m_map.put(name,set);  m_sets.add(set);  m_count+=set.getTupleCount();  if (m_lstnr != null)   set.addTupleSetListener(m_lstnr);}  }
class C{  @Override public QueryTemplatePacket and(UnionTemplatePacket template){  LinkedList<QueryTemplatePacket> optimizedPackets=new LinkedList<QueryTemplatePacket>();  for (  QueryTemplatePacket packet : getPackets()) {    for (    QueryTemplatePacket packet2 : template.getPackets()) {      QueryTemplatePacket newPacket=new QueryTemplatePacket(packet);      newPacket.intersectRanges(packet2);      newPacket.intersectUids(packet2);      if (!newPacket.isAlwaysEmpty())       optimizedPackets.add(newPacket);    }  }  setPackets(optimizedPackets);  if (optimizedPackets.isEmpty())   setAlwaysEmpty(true);  return this;}  }
class C{  public int drawText(Segment segment,int x,int y,Graphics graphics,TabExpander e,Token token){  SyntaxStyle s=getStyle(token.type);  return s.drawText(segment,x,y,graphics,e,token.start);}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer useScrollableResultSet(boolean useScrollableResultSet){  this.useScrollableResultSet=useScrollableResultSet;  return this;}  }
class C{  public void start() throws IOException {  logger.info(String.format("Starting Storage process"));  ProcessBuilder startBuilder=process(getStartCommand());  setStorageEnv(startBuilder.environment());  Process starter=startBuilder.start();  try {    sleeper.sleepQuietly(SCRIPT_EXECUTE_WAIT_TIME_MS);    int code=starter.exitValue();    if (code == 0) {      logger.info("Storage process has been started");      instanceState.setStorageProxyAlive(true);    } else {      logger.error("Unable to start Storage process. Error code: {}",code);    }    logProcessOutput(starter);  } catch (  Exception e) {    logger.warn("Starting Storage process has an error",e);  }}  }
class C{  protected BoardDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public boolean canIssueUserRoles(Collection<UserAuthorityGroup> groups,boolean canGrantOwnUserAuthorityGroups){  for (  UserAuthorityGroup group : groups) {    if (!canIssueUserRole(group,canGrantOwnUserAuthorityGroups)) {      return false;    }  }  return true;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public static synchronized void removeInstance(String providerName){  noOpProviders.remove(providerName);}  }
class C{  @Override public void onErrorResponse(VolleyError error){  Toast.makeText(Okhttp3FastjsonActivity.this,error != null && error.getMessage() != null ? error.getMessage() : "No error message",Toast.LENGTH_LONG).show();  Log.d("GsonRequest",error != null && error.getMessage() != null ? error.getMessage() : "No error message");}  }
class C{  static Object[] trim(Object[] elements,int len){  if (len == elements.length) {    return elements;  }  Object[] nelements=(Object[])Array.newInstance(elements.getClass().getComponentType(),len);  System.arraycopy(elements,0,nelements,0,len);  return nelements;}  }
class C{  protected Udb82DatabaseType(){}  }
class C{  public Scroller(Context context){  this(context,null);}  }
class C{  public static void main(String[] argv) throws ClassNotFoundException {  AltClassLoader.v().setAltClassPath(argv[0]);  for (int i=1; i < argv.length; i++) {    AltClassLoader.v().setAltClasses(new String[]{argv[i]});    G.v().out.println("main() loadClass(" + argv[i] + ")");    AltClassLoader.v().loadClass(argv[i]);  }}  }
class C{  @Deployment public void testJobEntityEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testJobEvents");  Job theJob=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(theJob);  assertEquals(3,listener.getEventsReceived().size());  ActivitiEvent event=listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.TIMER_SCHEDULED,event.getType());  checkEventContext(event,theJob);  listener.clearEventsReceived();  managementService.setTimerJobRetries(theJob.getId(),5);  assertEquals(1,listener.getEventsReceived().size());  event=listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  Job updatedJob=(Job)((ActivitiEntityEvent)event).getEntity();  assertEquals(5,updatedJob.getRetries());  checkEventContext(event,theJob);  checkEventCount(0,ActivitiEventType.TIMER_SCHEDULED);  listener.clearEventsReceived();  Calendar tomorrow=Calendar.getInstance();  tomorrow.add(Calendar.DAY_OF_YEAR,1);  processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());  String jobId=managementService.createTimerJobQuery().singleResult().getId();  managementService.moveTimerToExecutableJob(jobId);  managementService.executeJob(jobId);  assertEquals(6,listener.getEventsReceived().size());  event=listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.TIMER_FIRED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.JOB_EXECUTION_SUCCESS,event.getType());  checkEventContext(event,theJob);  checkEventCount(0,ActivitiEventType.TIMER_SCHEDULED);}  }
class C{  public static ITextComponent readTextComponent(PacketBuffer buf){  return ITextComponent.a.jsonToComponent(readString(buf));}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    uriString=uriString.substring(7);  }  return uriString;}  }
class C{  public boolean isInitializationComplete(){  return nodeInitStageAdvancer.isInitializationComplete();}  }
class C{  public PhotosSaveWallPhotoQuery saveWallPhoto(UserActor actor,String photo){  return new PhotosSaveWallPhotoQuery(getClient(),actor,photo);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_IS_MY_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300255,value0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();  np.matchIgnoreCase("select samples=");  String what=np.getWordMatchesIgnoringCase("all none");  if (what.equalsIgnoreCase("all"))   servicePanel.selectAll(true); else   if (what.equals("none"))   servicePanel.selectAll(false);  np.matchRespectCase(";");  System.err.println("Number of nodes selected: " + servicePanel.getSelectedFiles().size());}  }
class C{  protected void addRecognizedParamsAndSetDefaults(XMLComponent component){  String[] recognizedFeatures=component.getRecognizedFeatures();  addRecognizedFeatures(recognizedFeatures);  String[] recognizedProperties=component.getRecognizedProperties();  addRecognizedProperties(recognizedProperties);  if (recognizedFeatures != null) {    for (int i=0; i < recognizedFeatures.length; ++i) {      String featureId=recognizedFeatures[i];      Boolean state=component.getFeatureDefault(featureId);      if (state != null) {        if (!fFeatures.containsKey(featureId)) {          fFeatures.put(featureId,state);          fConfigUpdated=true;        }      }    }  }  if (recognizedProperties != null) {    for (int i=0; i < recognizedProperties.length; ++i) {      String propertyId=recognizedProperties[i];      Object value=component.getPropertyDefault(propertyId);      if (value != null) {        if (!fProperties.containsKey(propertyId)) {          fProperties.put(propertyId,value);          fConfigUpdated=true;        }      }    }  }}  }
class C{  protected void onAnimationFinished(){  if (mIsAnimatingPromoAcceptance) {    mIsAnimatingPromoAcceptance=false;    onPromoAcceptanceAnimationFinished();  }  if (mIsAnimatingPanelClosing) {    mIsAnimatingPanelClosing=false;  }  if (mAnimatingState != PanelState.UNDEFINED && getHeight() == getPanelHeightFromState(mAnimatingState)) {    setPanelState(mAnimatingState,mAnimatingStateReason);  }  mAnimatingState=PanelState.UNDEFINED;  mAnimatingStateReason=StateChangeReason.UNKNOWN;}  }
class C{  public void makeNothingCurrent(){  if (!EGL14.eglMakeCurrent(eGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public Lexicon removeLowDfWords(int minDf){  int id=0;  Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();  for (  Entry<Integer,Word> e : idHash.entrySet()) {    Word w=e.getValue();    if (w.df < minDf) {      continue;    }    translation.put(w.id,id);    ++id;  }  return map(translation);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED_INFO(String worldname1,int num0){  return new SM_SYSTEM_MESSAGE(1400360,worldname1,num0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public CommandManagerFX(IDirector dir,List<ICommand> commands){  super(dir,commands);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  System.arraycopy(bytes,offset,outputData,curIndex,size);  curIndex+=size;  return true;}  }
class C{  private int purgeDescending(final int lowIndex,final int highIndex,final RollingFileManager manager){  int suffixLength=0;  final List<FileRenameAction> renames=new ArrayList<FileRenameAction>();  final StringBuilder buf=new StringBuilder();  manager.getPatternProcessor().formatFileName(subst,buf,lowIndex);  String lowFilename=subst.replace(buf);  if (lowFilename.endsWith(EXT_GZIP)) {    suffixLength=EXT_GZIP.length();  } else   if (lowFilename.endsWith(EXT_ZIP)) {    suffixLength=EXT_ZIP.length();  }  for (int i=lowIndex; i <= highIndex; i++) {    File toRename=new File(lowFilename);    boolean isBase=false;    if (suffixLength > 0) {      final File toRenameBase=new File(lowFilename.substring(0,lowFilename.length() - suffixLength));      if (toRename.exists()) {        if (toRenameBase.exists()) {          LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.",toRenameBase,toRename);          toRenameBase.delete();        }      } else {        toRename=toRenameBase;        isBase=true;      }    }    if (toRename.exists()) {      if (i == highIndex) {        LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} at high index {}: all slots full.",toRename,i);        if (!toRename.delete()) {          return -1;        }        break;      }      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i + 1);      final String highFilename=subst.replace(buf);      String renameTo=highFilename;      if (isBase) {        renameTo=highFilename.substring(0,highFilename.length() - suffixLength);      }      renames.add(new FileRenameAction(toRename,new File(renameTo),true));      lowFilename=highFilename;    } else {      break;    }  }  for (int i=renames.size() - 1; i >= 0; i--) {    final Action action=renames.get(i);    try {      LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}",i,renames.size(),action);      if (!action.execute()) {        return -1;      }    } catch (    final Exception ex) {      LOGGER.warn("Exception during purge in RollingFileAppender",ex);      return -1;    }  }  return lowIndex;}  }
class C{  public NearbyUrlsAdapter(Context context){  super(context,0);  mIconUrlToIconMap=new HashMap<>();}  }
class C{  Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public boolean markSupported(){  return stream.markSupported();}  }
class C{  public SearchResult doPagingSearch(IndexReader reader,IndexSearcher searcher,Query query,int page) throws IOException {  TopDocs results=searcher.search(query,20 * this.PAGELIMIT);  ScoreDoc[] hits=results.scoreDocs;  int numTotalHits=results.totalHits;  int start=this.PAGELIMIT * page;  int end=Math.min(numTotalHits,(this.PAGELIMIT * (page + 1)));  int noPages=numTotalHits / this.PAGELIMIT;  if (noPages > 20) {    noPages=19;  }  List<Integer> pages=this.calculatePages(numTotalHits,noPages);  List<CodeResult> codeResults=new ArrayList<>();  for (int i=start; i < end; i++) {    Document doc=searcher.doc(hits[i].doc);    String filepath=doc.get(Values.PATH);    if (filepath != null) {      List<String> code=new ArrayList<>();      try {        code=Helpers.readFileLinesGuessEncoding(filepath,Helpers.tryParseInt(Properties.getProperties().getProperty(Values.MAXFILELINEDEPTH,Values.DEFAULTMAXFILELINEDEPTH),Values.DEFAULTMAXFILELINEDEPTH));      } catch (      Exception ex) {        LOGGER.warning("Indexed file appears to binary or missing: " + filepath);      }      CodeResult cr=new CodeResult(code,null);      cr.setCodePath(doc.get(Values.FILELOCATIONFILENAME));      cr.setFileName(doc.get(Values.FILENAME));      cr.setLanguageName(doc.get(Values.LANGUAGENAME));      cr.setMd5hash(doc.get(Values.MD5HASH));      cr.setCodeLines(doc.get(Values.CODELINES));      cr.setDocumentId(hits[i].doc);      cr.setRepoLocation(doc.get(Values.REPOLOCATION));      cr.setRepoName(doc.get(Values.REPONAME));      cr.setCodeOwner(doc.get(Values.CODEOWNER));      cr.setCodeId(doc.get(Values.CODEID));      codeResults.add(cr);    } else {      LOGGER.warning((i + 1) + ". " + "No path for this document");    }  }  List<CodeFacetLanguage> codeFacetLanguages=this.getLanguageFacetResults(searcher,reader,query);  List<CodeFacetRepo> repoFacetLanguages=this.getRepoFacetResults(searcher,reader,query);  List<CodeFacetOwner> repoFacetOwner=this.getOwnerFacetResults(searcher,reader,query);  return new SearchResult(numTotalHits,page,query.toString(),codeResults,pages,codeFacetLanguages,repoFacetLanguages,repoFacetOwner);}  }
class C{  protected int round(int n){  boolean inc=false;switch (field.getRoundingMode()) {case ROUND_DOWN:    inc=false;  break;case ROUND_UP:inc=n != 0;break;case ROUND_HALF_UP:inc=n >= 5000;break;case ROUND_HALF_DOWN:inc=n > 5000;break;case ROUND_HALF_EVEN:inc=n > 5000 || (n == 5000 && (mant[0] & 1) == 1);break;case ROUND_HALF_ODD:inc=n > 5000 || (n == 5000 && (mant[0] & 1) == 0);break;case ROUND_CEIL:inc=sign == 1 && n != 0;break;case ROUND_FLOOR:default :inc=sign == -1 && n != 0;break;}if (inc) {int rh=1;for (int i=0; i < mant.length; i++) {final int r=mant[i] + rh;rh=r / RADIX;mant[i]=r - rh * RADIX;}if (rh != 0) {shiftRight();mant[mant.length - 1]=rh;}}if (exp < MIN_EXP) {field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);return DfpField.FLAG_UNDERFLOW;}if (exp > MAX_EXP) {field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);return DfpField.FLAG_OVERFLOW;}if (n != 0) {field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);return DfpField.FLAG_INEXACT;}return 0;}  }
class C{  public static GenericPK create(ModelEntity modelEntity){  GenericPK newPK=new GenericPK();  newPK.init(modelEntity);  return newPK;}  }
class C{  public short value(){  return _map._values[_index];}  }
class C{  public static boolean hasAll(Intent intent,String... extras){  for (  String extra : extras) {    if (!intent.hasExtra(extra)) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public void pull(PullEvent event) throws PullException {  ProcessConfiguration processConfiguration=getConfigurationController().getProcessConfiguration();  LOGGER.debug("entering pull()..");  LOGGER.debug("\t Number of pulled objects : " + event.getPulled().size());  DataTagValueUpdate dataTagValueUpdate;  dataTagValueUpdate=new DataTagValueUpdate(processConfiguration.getProcessID(),processConfiguration.getprocessPIK());  long currentMsgSize=0;  for (  SourceDataTagValue sdtValue : (Collection<SourceDataTagValue>)event.getPulled()) {    if (currentMsgSize == processConfiguration.getMaxMessageSize()) {      try {        distributeValues(dataTagValueUpdate);        dataTagValueUpdate=null;        LOGGER.debug("\t sent " + currentMsgSize + " SourceDataTagValue objects");      } catch (      JMSException ex) {        LOGGER.error("\tpull : JMSException caught while invoking processValues methods :" + ex.getMessage());      }      currentMsgSize=0;      dataTagValueUpdate=new DataTagValueUpdate(processConfiguration.getProcessID(),processConfiguration.getprocessPIK());    }    if (!isMessageExpired(sdtValue)) {      dataTagValueUpdate.addValue(sdtValue);      currentMsgSize++;    } else {      LOGGER.debug("\t pull : Discarded value update for tag id " + sdtValue.getId() + ", because TTL was exceeded.");    }  }  if (dataTagValueUpdate != null && currentMsgSize > 0) {    try {      distributeValues(dataTagValueUpdate);      LOGGER.debug("\t sent " + dataTagValueUpdate.getValues().size() + " SourceDataTagValue objects");    } catch (    JMSException ex) {      LOGGER.error("\t pull : JMSException caught while invoking processValues methods :" + ex.getMessage());    }  }  LOGGER.debug("leaving pull method");}  }
class C{  public EqExpr newEqExpr(Value op1,Value op2){  return new GEqExpr(op1,op2);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  private static int[][] compileSizes(final int parameters,final int order,final DSCompiler valueCompiler){  final int[][] sizes=new int[parameters + 1][order + 1];  if (parameters == 0) {    Arrays.fill(sizes[0],1);  } else {    System.arraycopy(valueCompiler.sizes,0,sizes,0,parameters);    sizes[parameters][0]=1;    for (int i=0; i < order; ++i) {      sizes[parameters][i + 1]=sizes[parameters][i] + sizes[parameters - 1][i + 1];    }  }  return sizes;}  }
class C{  private static boolean isForbiddenByClient(String name){  if (!NameConfig.NAME_FORBIDDEN_ENABLE || NameConfig.NAME_FORBIDDEN_CLIENT.equals("")) {    return false;  }  if (forbiddenByClient == null || forbiddenByClient.length == 0) {    forbiddenByClient=NameConfig.NAME_FORBIDDEN_CLIENT.split(",");  }  for (  String s : forbiddenByClient) {    if (name.equalsIgnoreCase(s)) {      return true;    }  }  return false;}  }
class C{  public boolean number_nodes(){  return soot.PhaseOptions.getBoolean(options,"number-nodes");}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  private void internalPopulate(Map<NodeInterface,TreePath> selectedData){  if (selectedData != null) {    this.data=new TransferredData();    for (    NodeInterface selection : selectedData.keySet()) {      TreePath path=selectedData.get(selection);      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();      this.data.addData(path,node.getUserObject(),selection.getDataFlavour());    }  }}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual count(Integer value){  return unsafeParam("count",value);}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean validate(String ruleName,@Nullable Collection<BlazeValidationError> errors){  if (ruleName.isEmpty()) {    BlazeValidationError.collect(errors,new BlazeValidationError("target names cannot be empty"));    return false;  }  if (ruleName.charAt(0) == '/') {    BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not start with \"/\""));    return false;  } else   if (ruleName.charAt(0) == '.') {    if (ruleName.startsWith("../") || ruleName.equals("..")) {      BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain up-level references \"..\""));      return false;    } else     if (ruleName.equals(".")) {      return true;    } else     if (ruleName.startsWith("./")) {      BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain \".\" as a path segment"));      return false;    }  }  for (int i=0; i < ruleName.length(); ++i) {    char c=ruleName.charAt(i);    if (ALLOWED_META.contains(c)) {      continue;    }    if (c == '/') {      if (ruleName.contains("/../")) {        BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain up-level references \"..\""));        return false;      } else       if (ruleName.contains("/./")) {        BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain \".\" as a path segment"));        return false;      } else       if (ruleName.contains("//")) {        BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain \"//\" path separators"));        return false;      }      continue;    }    boolean isAlnum=ALNUM_REGEX.matcher(String.valueOf(c)).matches();    if (!isAlnum) {      BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain "+ c));      return false;    }  }  if (ruleName.endsWith("/..")) {    BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not contain up-level references \"..\""));    return false;  } else   if (ruleName.endsWith("/.")) {    return true;  } else   if (ruleName.endsWith("/")) {    BlazeValidationError.collect(errors,new BlazeValidationError("Invalid target name: " + ruleName + "\n"+ "target names may not end with \"/\""));    return false;  }  return true;}  }
class C{  public JimpleBody newJimpleBody(ShimpleBody body){  return body.toJimpleBody();}  }
class C{  public TaggedValueIterator(final String aLine,final String... tags){  this(aLine,false,tags);}  }
class C{  public CMUArcticVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){  super(name,gender,age,description,locale,domain,organization,lexicon,database);}  }
class C{  @Override public boolean containsVertex(Set<String> labels){  Objects.requireNonNull(labels,"labels cannot be null");  return this.labels.stream().allMatch(null);}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public Matrix gemm(Matrix B,Matrix C,double alpha,double beta){  int p=B.n;  Matrix X=new Matrix(m,p);  if (C == null) {    if (B.m != n) {      throw new IllegalArgumentException("Matrix inner dimensions must agree.");    }    for (int j=p; --j >= 0; ) {      for (int i=m; --i >= 0; ) {        double s=0;        for (int k=n; --k >= 0; ) {          s+=this.A[i][k] * B.A[k][j];        }        X.A[i][j]=alpha * s;      }    }    return X;  } else {    if (B.m != n) {      throw new IllegalArgumentException("Matrix inner dimensions must agree.");    }    if (C.m != m || C.n != p) {      throw new IllegalArgumentException("Incompatible result matrix.");    }    for (int j=p; --j >= 0; ) {      for (int i=m; --i >= 0; ) {        double s=0;        for (int k=n; --k >= 0; ) {          s+=this.A[i][k] * B.A[k][j];        }        X.A[i][j]=alpha * s + beta * C.A[i][j];      }    }  }  return X;}  }
class C{  public boolean isApplicable(){  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  return inspectorWindow != null;}  }
class C{  public AxisLabelAnimator(String group){  super(group);}  }
class C{  private void adjustBottom(RectF rect,float bottom,RectF bounds,int viewHeight,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){  float newBottom=bottom;  if (newBottom > viewHeight) {    newBottom=viewHeight + (newBottom - viewHeight) / 1.05f;    mTouchOffset.y-=(newBottom - viewHeight) / 1.1f;  }  if (newBottom > bounds.bottom) {    mTouchOffset.y-=(newBottom - bounds.bottom) / 2f;  }  if (bounds.bottom - newBottom < snapMargin) {    newBottom=bounds.bottom;  }  if (newBottom - rect.top < mMinCropHeight) {    newBottom=rect.top + mMinCropHeight;  }  if (newBottom - rect.top > mMaxCropHeight) {    newBottom=rect.top + mMaxCropHeight;  }  if (bounds.bottom - newBottom < snapMargin) {    newBottom=bounds.bottom;  }  if (aspectRatio > 0) {    float newWidth=(newBottom - rect.top) * aspectRatio;    if (newWidth < mMinCropWidth) {      newBottom=Math.min(bounds.bottom,rect.top + mMinCropWidth / aspectRatio);      newWidth=(newBottom - rect.top) * aspectRatio;    }    if (newWidth > mMaxCropWidth) {      newBottom=Math.min(bounds.bottom,rect.top + mMaxCropWidth / aspectRatio);      newWidth=(newBottom - rect.top) * aspectRatio;    }    if (leftMoves && rightMoves) {      newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + bounds.width() / aspectRatio));    } else {      if (leftMoves && rect.right - newWidth < bounds.left) {        newBottom=Math.min(bounds.bottom,rect.top + (rect.right - bounds.left) / aspectRatio);        newWidth=(newBottom - rect.top) * aspectRatio;      }      if (rightMoves && rect.left + newWidth > bounds.right) {        newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + (bounds.right - rect.left) / aspectRatio));      }    }  }  rect.bottom=newBottom;}  }
class C{  public void reset(){  this.stepFrequency=Settings.DEFAULT_STEP_FREQUENCY;  this.maximumTranslation=Settings.DEFAULT_MAXIMUM_TRANSLATION;  this.maximumTranslationSquared=Settings.DEFAULT_MAXIMUM_TRANSLATION * Settings.DEFAULT_MAXIMUM_TRANSLATION;  this.maximumRotation=Settings.DEFAULT_MAXIMUM_ROTATION;  this.maximumRotationSquared=Settings.DEFAULT_MAXIMUM_ROTATION * Settings.DEFAULT_MAXIMUM_ROTATION;  this.autoSleepingEnabled=true;  this.sleepLinearVelocity=Settings.DEFAULT_SLEEP_LINEAR_VELOCITY;  this.sleepLinearVelocitySquared=Settings.DEFAULT_SLEEP_LINEAR_VELOCITY * Settings.DEFAULT_SLEEP_LINEAR_VELOCITY;  this.sleepAngularVelocity=Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY;  this.sleepAngularVelocitySquared=Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY * Settings.DEFAULT_SLEEP_ANGULAR_VELOCITY;  this.sleepTime=Settings.DEFAULT_SLEEP_TIME;  this.velocityConstraintSolverIterations=Settings.DEFAULT_SOLVER_ITERATIONS;  this.positionConstraintSolverIterations=Settings.DEFAULT_SOLVER_ITERATIONS;  this.warmStartDistance=Settings.DEFAULT_WARM_START_DISTANCE;  this.warmStartDistanceSquared=Settings.DEFAULT_WARM_START_DISTANCE * Settings.DEFAULT_WARM_START_DISTANCE;  this.restitutionVelocity=Settings.DEFAULT_RESTITUTION_VELOCITY;  this.restitutionVelocitySquared=Settings.DEFAULT_RESTITUTION_VELOCITY * Settings.DEFAULT_RESTITUTION_VELOCITY;  this.linearTolerance=Settings.DEFAULT_LINEAR_TOLERANCE;  this.linearToleranceSquared=Settings.DEFAULT_LINEAR_TOLERANCE * Settings.DEFAULT_LINEAR_TOLERANCE;  this.maximumLinearCorrection=Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION;  this.maximumLinearCorrectionSquared=Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION * Settings.DEFAULT_MAXIMUM_LINEAR_CORRECTION;  this.angularTolerance=Settings.DEFAULT_ANGULAR_TOLERANCE;  this.angularToleranceSquared=Settings.DEFAULT_ANGULAR_TOLERANCE * Settings.DEFAULT_ANGULAR_TOLERANCE;  this.baumgarte=Settings.DEFAULT_BAUMGARTE;  this.continuousDetectionMode=ContinuousDetectionMode.ALL;}  }
class C{  public void drawUndirectedEdge(String label1,String label2){}  }
class C{  public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){  float scaleX=(float)(mViewPortHandler.contentWidth() / deltaX);  float scaleY=(float)(mViewPortHandler.contentHeight() / deltaY);  if (Float.isInfinite(scaleX)) {    scaleX=0;  }  if (Float.isInfinite(scaleY)) {    scaleY=0;  }  mMatrixValueToPx.reset();  mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);  mMatrixValueToPx.postScale(scaleX,-scaleY);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static String splitStringInArrayByComma(@ArrayRes int stringArray,int index,int part,Context context){  String fullString;  try {    fullString=context.getResources().getStringArray(stringArray)[index];  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e("App","The string array resource does not have the specified index.");    return "";  }  try {    return fullString.split(",")[part];  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e("App","The specified string in the array does not have a comma in it.");    return "";  }}  }
class C{  public CompositeComparator(int size,boolean reverse){  m_cmp=new Comparator[size];  m_rev=reverse ? -1 : 1;}  }
class C{  private double[] trsbox(double delta,ArrayRealVector gnew,ArrayRealVector xbdi,ArrayRealVector s,ArrayRealVector hs,ArrayRealVector hred){  printMethod();  final int n=currentBest.getDimension();  final int npt=numberOfInterpolationPoints;  double dsq=Double.NaN;  double crvmin=Double.NaN;  double ds;  int iu;  double dhd, dhs, cth, shs, sth, ssq, beta=0, sdec, blen;  int iact=-1;  int nact=0;  double angt=0, qred;  int isav;  double temp=0, xsav=0, xsum=0, angbd=0, dredg=0, sredg=0;  int iterc;  double resid=0, delsq=0, ggsav=0, tempa=0, tempb=0, redmax=0, dredsq=0, redsav=0, gredsq=0, rednew=0;  int itcsav=0;  double rdprev=0, rdnext=0, stplen=0, stepsq=0;  int itermax=0;  iterc=0;  nact=0;  for (int i=0; i < n; i++) {    xbdi.setEntry(i,ZERO);    if (trustRegionCenterOffset.getEntry(i) <= lowerDifference.getEntry(i)) {      if (gradientAtTrustRegionCenter.getEntry(i) >= ZERO) {        xbdi.setEntry(i,MINUS_ONE);      }    } else     if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i) && gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {      xbdi.setEntry(i,ONE);    }    if (xbdi.getEntry(i) != ZERO) {      ++nact;    }    trialStepPoint.setEntry(i,ZERO);    gnew.setEntry(i,gradientAtTrustRegionCenter.getEntry(i));  }  delsq=delta * delta;  qred=ZERO;  crvmin=MINUS_ONE;  int state=20;  for (; ; ) {switch (state) {case 20:{        printState(20);        beta=ZERO;      }case 30:{      printState(30);      stepsq=ZERO;      for (int i=0; i < n; i++) {        if (xbdi.getEntry(i) != ZERO) {          s.setEntry(i,ZERO);        } else         if (beta == ZERO) {          s.setEntry(i,-gnew.getEntry(i));        } else {          s.setEntry(i,beta * s.getEntry(i) - gnew.getEntry(i));        }        final double d1=s.getEntry(i);        stepsq+=d1 * d1;      }      if (stepsq == ZERO) {        state=190;        break;      }      if (beta == ZERO) {        gredsq=stepsq;        itermax=iterc + n - nact;      }      if (gredsq * delsq <= qred * 1e-4 * qred) {        state=190;        break;      }      state=210;      break;    }case 50:{    printState(50);    resid=delsq;    ds=ZERO;    shs=ZERO;    for (int i=0; i < n; i++) {      if (xbdi.getEntry(i) == ZERO) {        final double d1=trialStepPoint.getEntry(i);        resid-=d1 * d1;        ds+=s.getEntry(i) * trialStepPoint.getEntry(i);        shs+=s.getEntry(i) * hs.getEntry(i);      }    }    if (resid <= ZERO) {      state=90;      break;    }    temp=FastMath.sqrt(stepsq * resid + ds * ds);    if (ds < ZERO) {      blen=(temp - ds) / stepsq;    } else {      blen=resid / (temp + ds);    }    stplen=blen;    if (shs > ZERO) {      stplen=FastMath.min(blen,gredsq / shs);    }    iact=-1;    for (int i=0; i < n; i++) {      if (s.getEntry(i) != ZERO) {        xsum=trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i);        if (s.getEntry(i) > ZERO) {          temp=(upperDifference.getEntry(i) - xsum) / s.getEntry(i);        } else {          temp=(lowerDifference.getEntry(i) - xsum) / s.getEntry(i);        }        if (temp < stplen) {          stplen=temp;          iact=i;        }      }    }    sdec=ZERO;    if (stplen > ZERO) {      ++iterc;      temp=shs / stepsq;      if (iact == -1 && temp > ZERO) {        crvmin=FastMath.min(crvmin,temp);        if (crvmin == MINUS_ONE) {          crvmin=temp;        }      }      ggsav=gredsq;      gredsq=ZERO;      for (int i=0; i < n; i++) {        gnew.setEntry(i,gnew.getEntry(i) + stplen * hs.getEntry(i));        if (xbdi.getEntry(i) == ZERO) {          final double d1=gnew.getEntry(i);          gredsq+=d1 * d1;        }        trialStepPoint.setEntry(i,trialStepPoint.getEntry(i) + stplen * s.getEntry(i));      }      final double d1=stplen * (ggsav - HALF * stplen * shs);      sdec=FastMath.max(d1,ZERO);      qred+=sdec;    }    if (iact >= 0) {      ++nact;      xbdi.setEntry(iact,ONE);      if (s.getEntry(iact) < ZERO) {        xbdi.setEntry(iact,MINUS_ONE);      }      final double d1=trialStepPoint.getEntry(iact);      delsq-=d1 * d1;      if (delsq <= ZERO) {        state=190;        break;      }      state=20;      break;    }    if (stplen < blen) {      if (iterc == itermax) {        state=190;        break;      }      if (sdec <= qred * .01) {        state=190;        break;      }      beta=gredsq / ggsav;      state=30;      break;    }  }case 90:{  printState(90);  crvmin=ZERO;}case 100:{printState(100);if (nact >= n - 1) {  state=190;  break;}dredsq=ZERO;dredg=ZERO;gredsq=ZERO;for (int i=0; i < n; i++) {  if (xbdi.getEntry(i) == ZERO) {    double d1=trialStepPoint.getEntry(i);    dredsq+=d1 * d1;    dredg+=trialStepPoint.getEntry(i) * gnew.getEntry(i);    d1=gnew.getEntry(i);    gredsq+=d1 * d1;    s.setEntry(i,trialStepPoint.getEntry(i));  } else {    s.setEntry(i,ZERO);  }}itcsav=iterc;state=210;break;}case 120:{printState(120);++iterc;temp=gredsq * dredsq - dredg * dredg;if (temp <= qred * 1e-4 * qred) {state=190;break;}temp=FastMath.sqrt(temp);for (int i=0; i < n; i++) {if (xbdi.getEntry(i) == ZERO) {  s.setEntry(i,(dredg * trialStepPoint.getEntry(i) - dredsq * gnew.getEntry(i)) / temp);} else {  s.setEntry(i,ZERO);}}sredg=-temp;angbd=ONE;iact=-1;for (int i=0; i < n; i++) {if (xbdi.getEntry(i) == ZERO) {  tempa=trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i) - lowerDifference.getEntry(i);  tempb=upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i) - trialStepPoint.getEntry(i);  if (tempa <= ZERO) {    ++nact;    xbdi.setEntry(i,MINUS_ONE);    state=100;    break;  } else   if (tempb <= ZERO) {    ++nact;    xbdi.setEntry(i,ONE);    state=100;    break;  }  double d1=trialStepPoint.getEntry(i);  double d2=s.getEntry(i);  ssq=d1 * d1 + d2 * d2;  d1=trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i);  temp=ssq - d1 * d1;  if (temp > ZERO) {    temp=FastMath.sqrt(temp) - s.getEntry(i);    if (angbd * temp > tempa) {      angbd=tempa / temp;      iact=i;      xsav=MINUS_ONE;    }  }  d1=upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i);  temp=ssq - d1 * d1;  if (temp > ZERO) {    temp=FastMath.sqrt(temp) + s.getEntry(i);    if (angbd * temp > tempb) {      angbd=tempb / temp;      iact=i;      xsav=ONE;    }  }}}state=210;break;}case 150:{printState(150);shs=ZERO;dhs=ZERO;dhd=ZERO;for (int i=0; i < n; i++) {if (xbdi.getEntry(i) == ZERO) {shs+=s.getEntry(i) * hs.getEntry(i);dhs+=trialStepPoint.getEntry(i) * hs.getEntry(i);dhd+=trialStepPoint.getEntry(i) * hred.getEntry(i);}}redmax=ZERO;isav=-1;redsav=ZERO;iu=(int)(angbd * 17. + 3.1);for (int i=0; i < iu; i++) {angt=angbd * i / iu;sth=(angt + angt) / (ONE + angt * angt);temp=shs + angt * (angt * dhd - dhs - dhs);rednew=sth * (angt * dredg - sredg - HALF * sth * temp);if (rednew > redmax) {redmax=rednew;isav=i;rdprev=redsav;} else if (i == isav + 1) {rdnext=rednew;}redsav=rednew;}if (isav < 0) {state=190;break;}if (isav < iu) {temp=(rdnext - rdprev) / (redmax + redmax - rdprev - rdnext);angt=angbd * (isav + HALF * temp) / iu;}cth=(ONE - angt * angt) / (ONE + angt * angt);sth=(angt + angt) / (ONE + angt * angt);temp=shs + angt * (angt * dhd - dhs - dhs);sdec=sth * (angt * dredg - sredg - HALF * sth * temp);if (sdec <= ZERO) {state=190;break;}dredg=ZERO;gredsq=ZERO;for (int i=0; i < n; i++) {gnew.setEntry(i,gnew.getEntry(i) + (cth - ONE) * hred.getEntry(i) + sth * hs.getEntry(i));if (xbdi.getEntry(i) == ZERO) {trialStepPoint.setEntry(i,cth * trialStepPoint.getEntry(i) + sth * s.getEntry(i));dredg+=trialStepPoint.getEntry(i) * gnew.getEntry(i);final double d1=gnew.getEntry(i);gredsq+=d1 * d1;}hred.setEntry(i,cth * hred.getEntry(i) + sth * hs.getEntry(i));}qred+=sdec;if (iact >= 0 && isav == iu) {++nact;xbdi.setEntry(iact,xsav);state=100;break;}if (sdec > qred * .01) {state=120;break;}}case 190:{printState(190);dsq=ZERO;for (int i=0; i < n; i++) {final double min=FastMath.min(trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i),upperDifference.getEntry(i));newPoint.setEntry(i,FastMath.max(min,lowerDifference.getEntry(i)));if (xbdi.getEntry(i) == MINUS_ONE) {newPoint.setEntry(i,lowerDifference.getEntry(i));}if (xbdi.getEntry(i) == ONE) {newPoint.setEntry(i,upperDifference.getEntry(i));}trialStepPoint.setEntry(i,newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));final double d1=trialStepPoint.getEntry(i);dsq+=d1 * d1;}return new double[]{dsq,crvmin};}case 210:{printState(210);int ih=0;for (int j=0; j < n; j++) {hs.setEntry(j,ZERO);for (int i=0; i <= j; i++) {if (i < j) {hs.setEntry(j,hs.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(i));}hs.setEntry(i,hs.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(j));ih++;}}final RealVector tmp=interpolationPoints.operate(s).ebeMultiply(modelSecondDerivativesParameters);for (int k=0; k < npt; k++) {if (modelSecondDerivativesParameters.getEntry(k) != ZERO) {for (int i=0; i < n; i++) {hs.setEntry(i,hs.getEntry(i) + tmp.getEntry(k) * interpolationPoints.getEntry(k,i));}}}if (crvmin != ZERO) {state=50;break;}if (iterc > itcsav) {state=150;break;}for (int i=0; i < n; i++) {hred.setEntry(i,hs.getEntry(i));}state=120;break;}default :{throw new MathIllegalStateException(LocalizedCoreFormats.SIMPLE_MESSAGE,"trsbox");}}}}  }
class C{  public boolean onUpdateViewAnimation(long time,boolean jumpToEnd){  boolean finished=true;  if (mViewAnimations != null) {    finished=!mViewAnimations.isRunning();    finishAnimationsIfDone(time,jumpToEnd);  }  return finished;}  }
class C{  private static void quadMult(final double a[],final double b[],final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double zs[]=new double[2];  split(a[0],xs);  split(b[0],ys);  splitMult(xs,ys,zs);  result[0]=zs[0];  result[1]=zs[1];  split(b[1],ys);  splitMult(xs,ys,zs);  double tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;  split(a[1],xs);  split(b[0],ys);  splitMult(xs,ys,zs);  tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;  split(a[1],xs);  split(b[1],ys);  splitMult(xs,ys,zs);  tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;}  }
class C{  @Override public void onEnd(boolean result,BaseSliderView target){  if (target.isErrorDisappear() == false || result == true) {    return;  }  for (  BaseSliderView slider : mImageContents) {    if (slider.equals(target)) {      removeSlider(target);      break;    }  }}  }
class C{  public int toggle(long animationDurationMS){  state=state == FLAG_STATE_PLUS ? FLAG_STATE_CHECK : FLAG_STATE_PLUS;  percent=1 - percent;  ValueAnimator animator=ValueAnimator.ofFloat(percent,1);  animator.setInterpolator(new AccelerateDecelerateInterpolator());  animator.setDuration(animationDurationMS);  animator.addUpdateListener(animationListener);  animator.start();  return state;}  }
class C{  public UnitSelectionSynthesizer(){}  }
class C{  public Builder dashArray(String dashArray){  this.dashArray=dashArray;  return this;}  }
class C{  @Override public void updateSymbol(PolygonSymbolizer polygonSymbolizer){}  }
class C{  @deprecated public CompactCharArray(char[] indexArray,char[] newValues){  if (indexArray.length != 2048)   throw new IllegalArgumentException("Index out of bounds.");  for (int i=0; i < 2048; i++) {    char index=indexArray[i];    if ((index < 0) || (index >= newValues.length + 32))     throw new IllegalArgumentException("Index out of bounds.");  }  this.indices=indexArray;  this.values=newValues;  this.isCompact=true;}  }
class C{  public static void createFolder(String path){  File file=new File(path);  file.mkdirs();}  }
class C{  protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);  }}  }
class C{  public void testRegistrationWithSupervision(){  cache.setNodeBulkLoadEnabled(false);  cache.setNodeBulkLoadEnabled(true);  cache.registerCacheLoader(cacheLoader);  EasyMock.expect(cache.getCacheEventNotificationService()).andReturn(registeredEventListeners);  DataTag tag=new DataTagCacheObject(100L);  CacheSupervisionListener<DataTag> listenerWithSup=mockControl.createMock(CacheSupervisionListener.class);  CacheSupervisionListener<DataTag> listenerWithSup2=mockControl.createMock(CacheSupervisionListener.class);  C2monCacheListener<DataTag> listenerStandard=mockControl.createMock(C2monCacheListener.class);  listenerStandard.notifyElementUpdated(tag);  mockControl.replay();  ((DataTagCacheImpl)dataTagCache).init();  dataTagCache.registerSynchronousListener(listenerStandard);  dataTagCache.notifyListenersOfUpdate(tag);  mockControl.verify();}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public Range intersection(SegmentRange range){  if (!hasFunctionCallDescription(this) && !hasFunctionCallDescription(range)) {    return handleSegmentWithSegment(range);  } else   if (!twoBuiltInFunctions(this,range)) {    return new CompositeRange(this,range);  } else   if (hasFunctionOnlyOnOneSide(this,range)) {    return new CompositeRange(this,range);  } else   if (hasFunctionCallDescription(this) && hasFunctionCallDescription(range)) {    if (hasSameFunction(range)) {      return handleSegmentWithSegment(range);    } else {      return new CompositeRange(this,range);    }  }  return new CompositeRange(this,range);}  }
class C{  public static String delegateAndAcceptAssignment(HttpServletRequest request,HttpServletResponse response){  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");  Locale locale=UtilHttp.getLocale(request);  if (addToOrderRole(request)) {    try {      EventHandler eh=rh.getEventFactory().getEventHandler("service");      eh.invoke(new Event("service","","wfAcceptRoleAssignment",true),null,request,response);    } catch (    EventHandlerException e) {      Debug.logError(e,"Invocation error",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderFailedToInvokeTheWfDelegateAndAcceptAssignmentService",locale));      return "error";    }    return "success";  }  return "error";}  }
class C{  public static void validateApplicationUri(X509Certificate certificate,String applicationUri) throws UaException {  if (!validateSubjectAltNameField(certificate,SUBJECT_ALT_NAME_URI,null)) {    throw new UaException(StatusCodes.Bad_CertificateUriInvalid);  }}  }
class C{  public DotGraphEdge drawEdge(String from,String to){  DotGraphNode src=drawNode(from);  DotGraphNode dst=drawNode(to);  DotGraphEdge edge=new DotGraphEdge(src,dst);  this.drawElements.add(edge);  return edge;}  }
class C{  public synchronized ChangeReport onCommandTagRemove(final CommandTagRemove commandTagRemoveChange){  ChangeReport changeReport=new ChangeReport(commandTagRemoveChange);  Long equipmentId=commandTagRemoveChange.getEquipmentId();  Map<Long,SourceCommandTag> sourceCommandTags=getSourceCommandTags(equipmentId);  if (sourceCommandTags == null) {    changeReport.appendError("Equipment does not exists: " + equipmentId);    return changeReport;  }  SourceCommandTag sourceCommandTag=sourceCommandTags.remove(commandTagRemoveChange.getCommandTagId());  if (sourceCommandTag != null) {    changeReport.appendInfo("Core removed command tag with id " + commandTagRemoveChange.getCommandTagId() + " successfully from equipment "+ equipmentId);    List<ICoreCommandTagChanger> coreChangers=coreCommandTagChangers.get(equipmentId);    if (coreChangers != null) {      for (      ICoreCommandTagChanger commandTagChanger : coreChangers) {        commandTagChanger.onRemoveCommandTag(sourceCommandTag,changeReport);      }    }    ICommandTagChanger commandTagChanger=commandTagChangers.get(equipmentId);    if (commandTagChanger != null) {      commandTagChanger.onRemoveCommandTag(sourceCommandTag,changeReport);    } else {      changeReport.appendError("It was not possible to apply the changes" + " to the implementation part. No command tag changer was found.");      changeReport.setState(CHANGE_STATE.REBOOT);    }  } else {    changeReport.appendWarn("The command tag with id " + commandTagRemoveChange.getCommandTagId() + " to remove was not found"+ " in equipment with id "+ equipmentId);    changeReport.setState(CHANGE_STATE.SUCCESS);  }  return changeReport;}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  public FilterPanelv2(List<VersionData> vendorOptionList){  super(Controller.getInstance().getFrame(),"",true);  this.vendorOptionList=vendorOptionList;  setPreferredSize(new Dimension(800,415));  createUI();  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  if (dataSource != null) {    dataSource.addListener(this);  }  this.pack();  Controller.getInstance().centreDialog(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_CREATE(String value0){  return new SM_SYSTEM_MESSAGE(1300844,value0);}  }
class C{  public void mouseReleased(MouseEvent e){  int x=mViewTransform.getAndroidX(e.getX());  int y=mViewTransform.getAndroidY(e.getY());  mouseReleased(x,y);}  }
class C{  public static RemoteException createRemoteException(@NonNull String tag,@NonNull String message,@Nullable Exception exception){  boolean printed=false;  RemoteException remoteException;  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    remoteException=new RemoteException(message);  } else {    Log.e(tag,message,exception);    remoteException=new RemoteException();    printed=true;  }  if (exception != null) {    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {      remoteException.addSuppressed(exception);    } else {      if (!printed) {        Log.e(tag,message,exception);      }    }  }  return remoteException;}  }
class C{  public BoardAddTopicQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public boolean isApplicable(){  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();}  }
class C{  public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));}  }
class C{  public NamedColumnProjection(String[] names,boolean include){  m_names=new HashSet();  for (int i=0; i < names.length; ++i)   m_names.add(names[i]);  m_include=include;}  }
class C{  public static void transform(StreamSource src,StreamSource stylesheet,Fop fop) throws FOPException {  Result res=new SAXResult(fop.getDefaultHandler());  try {    TransformerFactory factory=TransformerFactory.newInstance();    Transformer transformer;    if (stylesheet == null) {      transformer=factory.newTransformer();    } else {      transformer=factory.newTransformer(stylesheet);    }    transformer.setURIResolver(new LocalResolver(transformer.getURIResolver()));    transformer.transform(src,res);  } catch (  Exception e) {    throw new FOPException(e);  }}  }
class C{  public static boolean isUi(final MultivaluedMap<String,String> headers){  return CLIENT_HEADER_VALUE.equals(headers.getFirst(CLIENT_HEADER_NAME)) && headers.get("referer") != null;}  }
class C{  public boolean addAll(Collection<? extends Dimension> dimensions){  boolean flag=false;  for (  Dimension dimension : dimensions) {    flag=add(dimension) || flag;  }  return flag;}  }
class C{  private boolean canUploadEmblemInfo(Player activePlayer){  if (!isBrigadeGeneral(activePlayer)) {    return false;  } else   if (activePlayer.getLegion().getLegionLevel() < 3) {    return false;  } else   if (activePlayer.getLegion().getLegionEmblem().isUploading()) {    activePlayer.getLegion().getLegionEmblem().setUploading(false);    return false;  }  return true;}  }
class C{  @Override public final void disconnect(){}  }
class C{  public static Vector3f cartesianZToSpherical(Vector3f cartCoords,Vector3f store){  if (cartCoords.x == 0) {    cartCoords.x=FastMath.FLT_EPSILON;  }  store.x=FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z));  store.z=FastMath.atan(cartCoords.z / cartCoords.x);  if (cartCoords.x < 0) {    store.z+=FastMath.PI;  }  store.y=FastMath.asin(cartCoords.y / store.x);  return store;}  }
class C{  private static int snapWidth(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int width,ArrayList<SnapCandidate> snapCandidates){  int rightPosition=widget.getDrawX() + width;  rightPosition=snapHorizontal(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.RIGHT),rightPosition,snapCandidates);  width=rightPosition - widget.getDrawX();  return width;}  }
class C{  public static void showPrefPanel(){  PrefPanel panel=new PrefPanel();  if (panel.showDialog(PrefManager.getInstance().getPrefData())) {    PrefData prefData=panel.getPrefData();    PrefManager.getInstance().setPrefData(prefData);  }}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  public Tree(final Material type,TreeSpecies species){  this(type,species,DEFAULT_DIRECTION);}  }
class C{  private boolean isJsonProcessingException(Exception e){  return e instanceof JsonProcessingException && !(e instanceof JsonParseException && e.getMessage() != null && e.getMessage().startsWith("Unexpected end-of-input"));}  }
class C{  public static int computeHash(byte[] key,int offset,int length,int mask){  return Math.abs(MurmurHash3.murmurhash3x8632(key,offset,length,666) & mask);}  }
class C{  private void skipToEndOfLine() throws IOException {  while (pos < limit || fillBuffer(1)) {    char c=buffer[pos++];    if (c == '\n') {      lineNumber++;      lineStart=pos;      break;    } else     if (c == '\r') {      break;    }  }}  }
class C{  protected static char parseNextCharacter(final String source,final ParsePosition pos){  int index=pos.getIndex();  final int n=source.length();  char ret=0;  if (index < n) {    char c;    do {      c=source.charAt(index++);    } while (Character.isWhitespace(c) && index < n);    pos.setIndex(index);    if (index < n) {      ret=c;    }  }  return ret;}  }
class C{  public ShortMessage(){  this(new byte[3]);  data[0]=(byte)(NOTE_ON & 0xFF);  data[1]=(byte)64;  data[2]=(byte)127;  length=3;}  }
class C{  public DateTimeUnit toUtc(){  return DateTimeUnit.fromJodaDateTime(toJodaDateTime().toDateTime(DateTimeZone.UTC),true);}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  protected void addToolbarActionsToMenu(@NotNull String label,@NotNull List<ViewAction> actions){  List<ViewAction> nestedActions=Lists.newArrayList();  addToolbarActions(nestedActions);  actions.add(new ViewActionMenu(label,null,nestedActions));}  }
class C{  public boolean remove(MidiEvent event){synchronized (eventsList) {    if (set.remove(event)) {      int i=eventsList.indexOf(event);      if (i >= 0) {        eventsList.remove(i);        return true;      }    }  }  return false;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (userData != null) {    userData=new WeakHashMap(userData);  }  if (nodeTable != null) {    nodeTable=new WeakHashMap(nodeTable);  }}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{-3,-3,-3,-3,-3,-3,-2,1,5,5,5,5,5,5};}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override public double value(double z){  return evaluate(a,c,z);}  }
class C{  public List<String> concernPackages(){  return null;}  }
class C{  public double quadraticMean(){  return quadraticMean.reduce(this);}  }
class C{  public void closeCurrentConnection(){  if (connection != null) {    closeUnderlyingConnection();    connection=null;  }}  }
class C{  public void assertTextPresent(String expected,String actual){  if ((actual == null) || (!actual.contains(expected))) {    throw new AssertionFailedError("expected presence of [" + expected + "], but was ["+ actual+ "]");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_SHOP(String value0){  return new SM_SYSTEM_MESSAGE(1300815,value0);}  }
class C{  public Response readDouble(double b){  return writeString(Double.toString(b));}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 7785;  }  return 997 * MathUtils.hash(x);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_me);}  }
class C{  public void writeAscii(String filename) throws IllegalArgumentException {  PrintWriter pw;  try {    pw=new PrintWriter(new File(filename));  } catch (  FileNotFoundException e) {    throw new IllegalArgumentException("there was a problem with the file " + filename);  }  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      pw.printf("%1$1.7e ",A[i][j]);    }    pw.printf("\r");  }  pw.close();}  }
class C{  public Builder takeLastColumns(String... columns){  return add(ReduceOp.TakeLast,columns);}  }
class C{  public static Predicate<Integer> greaterThan(Integer than){  return null;}  }
class C{  public StreamResult(OutputStream outputStream){  setOutputStream(outputStream);}  }
class C{  @Override public void close(){  try {    if (auth != null) {      auth.close();    }  } catch (  IOException e) {    LOG.error("Failed to close the authentication service",e);  }  client.close();}  }
class C{  public Object nextElement(){  if (iterator == null || !iterator.hasNext())   throw new NoSuchElementException();  Object o=iterator.next();  GSMessageImpl msg=(GSMessageImpl)o;  msg.setBodyReadOnly(true);  msg.setPropertiesReadOnly(true);  return o;}  }
class C{  @Override public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHostile_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200609,skillcaster,skillname);}  }
class C{  private boolean isDerivedByAny(String ancestorNS,String ancestorName,int derivationMethod,XSTypeDefinition type){  XSTypeDefinition oldType=null;  boolean derivedFrom=false;  while (type != null && type != oldType) {    if ((ancestorName.equals(type.getName())) && ((ancestorNS == null && type.getNamespace() == null) || (ancestorNS != null && ancestorNS.equals(type.getNamespace())))) {      derivedFrom=true;      break;    }    if (isDerivedByRestriction(ancestorNS,ancestorName,derivationMethod,type)) {      return true;    } else     if (!isDerivedByExtension(ancestorNS,ancestorName,derivationMethod,type)) {      return true;    }    oldType=type;    type=type.getBaseType();  }  return derivedFrom;}  }
class C{  public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public static void closeZipEntry(ZipOutputStream out){  try {    out.closeEntry();  } catch (  Exception ex) {    throw new RuntimeException("Failed to close the current ZipEntry",ex);  }}  }
class C{  private void deleteEntry(final SQLiteDatabase database,final String stringId){  database.delete(SongPlayCountColumns.NAME,WHERE_ID_EQUALS,new String[]{stringId});}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  private void onPtcLoginBtnClicked(final ActionEvent ignored){  final LoginData loginData=new LoginData();  loginData.setUsername(usernameField.getText());  loginData.setPassword(passwordField.getText());  loginData.setLoginType(LoginType.PTC);  tryLogin(loginData);}  }
class C{  private ServiceStarter(){}  }
class C{  public void tryToRestoreTabStateForId(int id){  if (isSessionRestoreInProgress())   mTabSaver.restoreTabStateForId(id);}  }
class C{  public static boolean isVisa(String cc){  if (((cc.length() == 16) || (cc.length() == 13)) && (cc.substring(0,1).equals("4")))   return isCreditCard(cc);  return false;}  }
class C{  public List<Patch> patch_fromText(String textline) throws IllegalArgumentException {  List<Patch> patches=new LinkedList<Patch>();  if (textline.length() == 0) {    return patches;  }  List<String> textList=Arrays.asList(textline.split("\n"));  LinkedList<String> text=new LinkedList<String>(textList);  Patch patch;  Pattern patchHeader=Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");  Matcher m;  char sign;  String line;  while (!text.isEmpty()) {    m=patchHeader.matcher(text.getFirst());    if (!m.matches()) {      throw new IllegalArgumentException("Invalid patch string: " + text.getFirst());    }    patch=new Patch();    patches.add(patch);    patch.start1=Integer.parseInt(m.group(1));    if (m.group(2).length() == 0) {      patch.start1--;      patch.length1=1;    } else     if (m.group(2).equals("0")) {      patch.length1=0;    } else {      patch.start1--;      patch.length1=Integer.parseInt(m.group(2));    }    patch.start2=Integer.parseInt(m.group(3));    if (m.group(4).length() == 0) {      patch.start2--;      patch.length2=1;    } else     if (m.group(4).equals("0")) {      patch.length2=0;    } else {      patch.start2--;      patch.length2=Integer.parseInt(m.group(4));    }    text.removeFirst();    while (!text.isEmpty()) {      try {        sign=text.getFirst().charAt(0);      } catch (      IndexOutOfBoundsException e) {        text.removeFirst();        continue;      }      line=text.getFirst().substring(1);      line=line.replace("+","%2B");      try {        line=URLDecoder.decode(line,"UTF-8");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }catch (      IllegalArgumentException e) {        throw new IllegalArgumentException("Illegal escape in patch_fromText: " + line,e);      }      if (sign == '-') {        patch.diffs.add(new Diff(Operation.DELETE,line));      } else       if (sign == '+') {        patch.diffs.add(new Diff(Operation.INSERT,line));      } else       if (sign == ' ') {        patch.diffs.add(new Diff(Operation.EQUAL,line));      } else       if (sign == '@') {        break;      } else {        throw new IllegalArgumentException("Invalid patch mode '" + sign + "' in: "+ line);      }      text.removeFirst();    }  }  return patches;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  if (remoteServiceBrowser != null) {    String url=remoteServiceBrowser.getURL();    String user=remoteServiceBrowser.getUser();    String password=remoteServiceBrowser.getPasswd();    String command="openServer url='" + url + "'";    if (user.length() > 0)     command+=" user='" + user + "'";    if (password.length() > 0) {synchronized (syncObject) {        OpenRemoteServerCommand.hiddenPassword=password;      }      command+=" password='" + HIDDEN_PASSWORD + "'";    }    command+=";";    if (url.length() > 0) {      execute(command);    }  }}  }
class C{  protected void verifyConsistency(PolynomialSplineFunction f,double x[]){  PolynomialFunction polynomials[]=f.getPolynomials();  for (int i=1; i < x.length - 2; i++) {    Assert.assertEquals(polynomials[i].value(x[i + 1] - x[i]),polynomials[i + 1].value(0),0.1);    Assert.assertEquals(polynomials[i].polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().value(0),0.5);    Assert.assertEquals(polynomials[i].polynomialDerivative().polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().polynomialDerivative().value(0),0.5);  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  PrefData prefData=(PrefData)undoRedoObject.getOldValue();  setPrefData(prefData);}  }
class C{  private static void estimateBinaryProbability(ScoutWidget from,int orientation,ScoutWidget to1,Direction toDir1,ScoutWidget to2,Direction toDir2,ScoutWidget[] list,float[] result){  result[RESULT_PROBABILITY]=0;  result[RESULT_MARGIN]=0;  if (from == to1 || from == to2) {    return;  }  if (from.isGuideline()) {    return;  }  if ((orientation == Direction.ORIENTATION_VERTICAL) & from.hasBaseline()) {    if (from.hasConnection(Direction.BASE)) {      return;    }  }  float scale=0.5f * ((orientation == Direction.ORIENTATION_VERTICAL) ? from.getParent().getHeight() : from.getParent().getWidth());  Direction fromLeft=Direction.getDirections(orientation)[0];  Direction fromRight=Direction.getDirections(orientation)[1];  float location1=from.getLocation(fromLeft);  float location2=from.getLocation(fromRight);  float toLoc1=to1.getLocation(toDir1);  float toLoc2=to2.getLocation(toDir2);  float positionDiff1=location1 - toLoc1;  float positionDiff2=toLoc2 - location2;  if (positionDiff1 < 0 || positionDiff2 < 0) {    boolean badCandidate=true;    if (positionDiff2 < 0 && to2.isRoot() && positionDiff2 > -MAX_ROOT_OVERHANG) {      badCandidate=false;      positionDiff2=0;    }    if (positionDiff1 < 0 && to1.isRoot() && positionDiff2 > -MAX_ROOT_OVERHANG) {      badCandidate=false;      positionDiff2=0;    }    if (badCandidate) {      result[RESULT_PROBABILITY]=NEGATIVE_GAP_FLAG;      return;    }  }  float distance1=ScoutWidget.distance(from,to1) / scale;  float distance2=ScoutWidget.distance(from,to2) / scale;  float diff=Math.abs(positionDiff1 - positionDiff2);  float probability=((diff < SLOPE_CENTER_CONNECTION) ? 1 : 0);  probability=probability / (1 + distance1 + distance2);  probability+=1 / (1 + Math.abs(positionDiff1 - positionDiff2));  probability*=(to1.isRoot() && to2.isRoot()) ? 2 : ((SUPPORT_CENTER_TO_NON_ROOT) ? 1f : 0);  result[RESULT_PROBABILITY]=probability;  result[RESULT_MARGIN]=Math.min(positionDiff1,positionDiff2);}  }
class C{  public static int sp2px(Context context,float spValue){  return (int)(spValue * getFontDensity(context) + 0.5);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public void remoteResourceCreated(ISVNRemoteFolder parent,String resourceName){  for (  ISVNListener listener : repositoryListeners) {    listener.remoteResourceCreated(parent,resourceName);  }}  }
class C{  @SuppressWarnings("unchecked") public boolean isInRange(final SourceDataTag sdt,final Object value){  this.equipmentLogger.trace("isInRange - entering isInRange()..");  boolean isInRange=true;  Comparable convertedValue;  setDataTypeOfRangeValue(sdt);  if (sdt.getMinValue() != null) {    convertedValue=(Comparable)TypeConverter.cast(value,sdt.getDataType());    if (compare(sdt.getMinValue(),convertedValue) > 0) {      this.equipmentLogger.trace("\tisInRange - out of range : " + convertedValue + " is less than the authorized minimum value "+ sdt.getMinValue());      isInRange=false;    }  }  if (isInRange) {    if (sdt.getMaxValue() != null) {      convertedValue=(Comparable)TypeConverter.cast(value,sdt.getDataType());      if (compare(sdt.getMaxValue(),convertedValue) < 0) {        this.equipmentLogger.trace("\tisInRange - out of range : " + convertedValue + " is greater than the authorized maximum value "+ sdt.getMaxValue());        isInRange=false;      }    }  }  this.equipmentLogger.trace("isInRange - leaving isInRange(). Is value in range?: " + isInRange);  return isInRange;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_ACCOUNT_WAREHOUSE_CANT_EXTEND_DUE_TO_MINIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300440,value0,value1);}  }
class C{  public boolean needsRewrite(){  ASTNode$State state=state();  try {    return false;  }  finally {  }}  }
class C{  public SelectBuilder<K,V> select(){  return new SelectBuilder<>(new Pattern<>());}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private AnovaStats anovaStats(final Collection<StreamingStatistics> categoryData,final boolean allowOneElementData) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(categoryData);  if (!allowOneElementData) {    if (categoryData.size() < 2) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,categoryData.size(),2);    }    for (    final StreamingStatistics array : categoryData) {      if (array.getN() <= 1) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,(int)array.getN(),2);      }    }  }  int dfwg=0;  double sswg=0;  double totsum=0;  double totsumsq=0;  int totnum=0;  for (  final StreamingStatistics data : categoryData) {    final double sum=data.getSum();    final double sumsq=data.getSumOfSquares();    final int num=(int)data.getN();    totnum+=num;    totsum+=sum;    totsumsq+=sumsq;    dfwg+=num - 1;    final double ss=sumsq - ((sum * sum) / num);    sswg+=ss;  }  final double sst=totsumsq - ((totsum * totsum) / totnum);  final double ssbg=sst - sswg;  final int dfbg=categoryData.size() - 1;  final double msbg=ssbg / dfbg;  final double mswg=sswg / dfwg;  final double F=msbg / mswg;  return new AnovaStats(dfbg,dfwg,F);}  }
class C{  @Override public int compare(final PhysicalTable table1,final PhysicalTable table2){  int compare=table1.getTimeGrain().getEstimatedDuration().compareTo(table2.getTimeGrain().getEstimatedDuration());  LOG.trace("{} {} {}",table1,compare < 0 ? "<" : ">",table2);  return -1 * compare;}  }
class C{  public boolean shouldCreateData(){  return userRepository.count() == 0;}  }
class C{  public void openThriftWriter(String filePath) throws IOException {  thriftWriter=new ThriftWriter(filePath,true);  thriftWriter.open();}  }
class C{  public void selectionChanged(SelectionChangedEvent event){  selectionChanged(event.getSelection());}  }
class C{  public Boolean isAutoStart(){  return autoStart;}  }
class C{  @Override public void close(){  ss1.close();  ss2.close();}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public boolean isSetLocalContext(){  return this.localContext != null;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  EqualsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new EqualsExtended();  } else {    filter=new EqualsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public static boolean autoCorrectOn(){  return "true".equals(UtilProperties.getPropertyValue("minilang.properties","autocorrect"));}  }
class C{  public ReadModifiers remove(ReadModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  public void changeSpaceBackgroundColor(@ColorInt int color){  if (color == spaceBackgroundColor) {    Log.d(TAG,"changeSpaceBackgroundColor: color already changed");    return;  }  spaceBackgroundColor=color;  setBackgroundColors();  centreContent.changeBackgroundColor(color);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DARK_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400142,value0,value1);}  }
class C{  public int targetSdkVersion(){  List<AXmlNode> usesSdk=this.manifest.getChildrenWithTag("uses-sdk");  if (usesSdk == null || usesSdk.isEmpty())   return -1;  AXmlAttribute<?> attr=usesSdk.get(0).getAttribute("targetSdkVersion");  if (attr == null)   return -1;  if (attr.getValue() instanceof Integer)   return (Integer)attr.getValue();  return Integer.getInteger((String)attr.getValue());}  }
class C{  public final void stopAliveTimer(){  aliveTimer.terminateTimer();}  }
class C{  @Nonnull public static Set<Flag> parse(@Nonnegative final int bitmask){  Check.notNegative(bitmask,"bitmask");  final Set<Flag> flags=new HashSet<Flag>();  for (  final Flag flag : values()) {    if ((bitmask & flag.getNumber()) != 0) {      flags.add(flag);    }  }  return flags;}  }
class C{  public void addObserver(Observer observer){  Assert.notNull("observer",observer);  observers.addIfAbsent(observer);}  }
class C{  @Override public ApplicationType createModelFor(Application application){  Jvm jvm=JvmFactory.getJVMFor(application);  if (jvm.isBasicInfoSupported()) {    String args=jvm.getJvmArgs();    int plugin_index=args.indexOf(JAVA_PLUGIN);    if (plugin_index != -1) {      String version;      int version_index=plugin_index + JAVA_PLUGIN.length();      int space_index=args.indexOf(' ',version_index);      if (space_index != -1) {        version=args.substring(version_index,space_index);      } else {        version=args.substring(version_index);      }      return new JavaPluginApplicationType(version);    }    if (JAVA_PLUGIN2_MAIN.equals(jvm.getMainClass())) {      return new JavaPluginApplicationType("2");    }  }  return null;}  }
class C{  public boolean hasNameChanged(final ISourceCommandTag sourceCommandTag,final ISourceCommandTag oldSourceCommandTag){  return !sourceCommandTag.getName().equals(oldSourceCommandTag.getName());}  }
class C{  public static Schema infer(List<Writable> record){  Schema.Builder builder=new Schema.Builder();  for (int i=0; i < record.size(); i++) {    if (record.get(i) instanceof DoubleWritable)     builder.addColumnDouble(String.valueOf(i)); else     if (record.get(i) instanceof IntWritable)     builder.addColumnInteger(String.valueOf(i)); else     if (record.get(i) instanceof LongWritable)     builder.addColumnLong(String.valueOf(i)); else     if (record.get(i) instanceof FloatWritable)     builder.addColumnFloat(String.valueOf(i)); else     throw new IllegalStateException("Illegal writable for infering schema of type " + record.get(i).getClass().toString() + " with record "+ record);  }  return builder.build();}  }
class C{  synchronized private boolean haveDataToTransmit(){  if (!transmitResult.compareAndSet(BKException.Code.OK,BKException.Code.OK)) {    return false;  }  return (recordSetWriter.getNumRecords() > 0);}  }
class C{  public byte[] readBytes(int len){  if (len <= 0)   return null;  len=Math.min(len,data.length - offset);  byte[] b=new byte[len];  System.arraycopy(data,offset,b,0,len);  offset+=len;  return b;}  }
class C{  public TapTarget cancelable(boolean status){  this.cancelable=status;  return this;}  }
class C{  static boolean isLocationDisabledForUrl(Uri uri,boolean isIncognito){  GeolocationInfo locationSettings=new GeolocationInfo(uri.toString(),null,isIncognito);  ContentSetting locationPermission=locationSettings.getContentSetting();  if (locationPermission == null || locationPermission == ContentSetting.ASK) {    String scheme=uri.getScheme();    if (scheme != null && scheme.toLowerCase(Locale.US).equals("https") && uri.getAuthority() != null && uri.getUserInfo() == null) {      String urlWithHttp="http://" + uri.getHost();      locationSettings=new GeolocationInfo(urlWithHttp,null,isIncognito);      locationPermission=locationSettings.getContentSetting();    }  }  return locationPermission == ContentSetting.BLOCK;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillAttack_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200385,skillname);}  }
class C{  public AuthConfirmQuery intro(Integer value){  return unsafeParam("intro",value);}  }
class C{  public TransactionStyle(int timeoutInSeconds,int retries){  this.retries=retries;  this.timeout=timeoutInSeconds;}  }
class C{  public String assignIfPossible(String value,Object... replacements){  if (setter() != null) {    String expr=format(value,replacements);    expr=cast(expr);    return format(setter(),expr);  } else {    return "";  }}  }
class C{  static public void apply(String fileName,Document doc,String[] cNames,boolean tabSeparator) throws IOException, CanceledException {  final char separator=(tabSeparator ? '\t' : ',');  System.err.println("Importing list of read to CLASS-id hits from CSV file");  System.err.println("Line format: readname,CLASS-id,score     - for one of the following classificiatons: " + Basic.toString(cNames," name,"));  System.err.println("Using topPercent=" + doc.getTopPercent() + " minScore="+ doc.getMinScore()+ (doc.getMinSupportPercent() > 0 ? " minSupportPercent=" + doc.getMinSupportPercent() : "")+ " minSupport="+ doc.getMinSupport());  final DataTable table=doc.getDataTable();  table.clear();  table.setCreator(ProgramProperties.getProgramName());  table.setCreationDate((new Date()).toString());  table.setAlgorithm(ClassificationType.Taxonomy.toString(),"Summary");  doc.getActiveViewers().clear();  doc.getActiveViewers().addAll(Arrays.asList(cNames));  IdParser[] parsers=new IdParser[cNames.length];  int taxonomyIndex=-1;  for (int i=0; i < cNames.length; i++) {    String cName=cNames[i];    if (!cName.equals(Classification.Taxonomy)) {      parsers[i]=ClassificationManager.get(cName,true).getIdMapper().createIdParser();      ClassificationManager.ensureTreeIsLoaded(cName);      doc.getActiveViewers().add(cName);    } else {      taxonomyIndex=i;    }  }  final Map<String,List<Pair<Integer,Float>>>[] readName2IdAndScore=new HashMap[cNames.length];  for (int i=0; i < readName2IdAndScore.length; i++) {    readName2IdAndScore[i]=new HashMap<>();  }  final int[] count=new int[parsers.length];  int numberOfErrors=0;  int numberOfLines=0;  final ProgressListener progress=doc.getProgressListener();  progress.setTasks("Importing CSV file","Reading " + fileName);  try (FileInputIterator it=new FileInputIterator(fileName)){    progress.setMaximum(it.getMaximumProgress());    progress.setProgress(0);    boolean warnedNoScoreGiven=false;    while (it.hasNext()) {      String aLine=it.next();      numberOfLines++;      aLine=aLine.trim();      if (aLine.length() == 0 || aLine.startsWith("#"))       continue;      try {        String[] tokens=Basic.split(aLine,separator);        if (tokens.length < 2 || tokens.length > 3)         throw new IOException("Line " + numberOfLines + ": incorrect number of columns, expected 2 or 3, got: "+ tokens.length);        String readName=tokens[0].trim();        boolean found=false;        for (int i=0; !found && i < parsers.length; i++) {          final int id=(parsers.length == 1 && Basic.isInteger(tokens[1]) ? Basic.parseInt(tokens[1]) : parsers[i].getIdFromHeaderLine(tokens[1]));          if (id != 0) {            float score;            if (tokens.length < 3) {              score=50;              if (!warnedNoScoreGiven) {                System.err.println("Setting score=50 for lines that only contained two tokens, such as line " + numberOfLines + ": '"+ aLine+ "'");                warnedNoScoreGiven=true;              }            } else             score=Float.parseFloat(tokens[2].trim());            List<Pair<Integer,Float>> taxonIdAndScore=readName2IdAndScore[i].get(readName);            if (taxonIdAndScore == null) {              taxonIdAndScore=new LinkedList<>();              readName2IdAndScore[i].put(readName,taxonIdAndScore);            }            taxonIdAndScore.add(new Pair<>(id,score));            count[i]++;            found=true;          }        }        if (!found)         System.err.println("Unrecognized name: " + tokens[1]);      } catch (      Exception ex) {        System.err.println("Error: " + ex + ", skipping");        numberOfErrors++;      }      progress.setProgress(it.getProgress());    }  }   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  final int totalReads=Basic.max(count);  if (taxonomyIndex >= 0) {    progress.setSubtask("Running LCA");    progress.setProgress(0);    progress.setMaximum(readName2IdAndScore[taxonomyIndex].size());    Map<Integer,Integer[]> class2counts=new HashMap<>();    Map<Integer,Integer> class2count=new HashMap<>();    for (    String readName : readName2IdAndScore[taxonomyIndex].keySet()) {      List<Pair<Integer,Float>> taxonIdAndScore=readName2IdAndScore[taxonomyIndex].get(readName);      final int taxId=computeTaxonId(doc,taxonIdAndScore);      if (taxId != 0) {        Integer[] counts=class2counts.get(taxId);        if (counts == null) {          counts=new Integer[]{0};          class2counts.put(taxId,counts);        }        counts[0]++;        if (class2count.get(taxId) == null)         class2count.put(taxId,1); else         class2count.put(taxId,class2count.get(taxId) + 1);      }      progress.incrementProgress();    }    if (progress instanceof ProgressPercentage)     ((ProgressPercentage)progress).reportTaskCompleted();    if (doc.getMinSupportPercent() > 0 || doc.getMinSupport() > 1) {      if (doc.getMinSupportPercent() > 0) {        long assigned=0;        for (        int taxId : class2count.keySet()) {          if (taxId > 0)           assigned+=class2count.get(taxId);        }        doc.setMinSupport((int)Math.max(1,(doc.getMinSupportPercent() / 100.0) * assigned));        System.err.println("MinSupport set to: " + doc.getMinSupport());      }      final MinSupportFilter minSupportFilter=new MinSupportFilter(Classification.Taxonomy,class2count,doc.getMinSupport(),progress);      try {        Map<Integer,Integer> changes=minSupportFilter.apply();        for (        Integer oldTaxId : changes.keySet()) {          Integer newTaxId=changes.get(oldTaxId);          Integer oldCount=class2counts.get(oldTaxId)[0];          Integer[] newCounts=class2counts.get(newTaxId);          if (newCounts == null || newCounts[0] == null) {            newCounts=new Integer[]{oldCount};            class2counts.put(newTaxId,newCounts);          } else {            newCounts[0]+=oldCount;          }          class2counts.remove(oldTaxId);        }      } catch (      CanceledException e) {      }    }    table.getClassification2Class2Counts().put(ClassificationType.Taxonomy.toString(),class2counts);  } else {    Map<Integer,Integer[]> class2counts=new HashMap<>();    class2counts.put(IdMapper.UNASSIGNED_ID,new Integer[]{totalReads});    table.getClassification2Class2Counts().put(ClassificationType.Taxonomy.toString(),class2counts);  }  for (int i=0; i < cNames.length; i++) {    if (i != taxonomyIndex) {      progress.setSubtask("Classifying " + cNames[i]);      progress.setProgress(0);      progress.setMaximum(readName2IdAndScore[i].size());      Map<Integer,Integer[]> class2counts=new HashMap<>();      Map<Integer,Integer> class2count=new HashMap<>();      for (      String readName : readName2IdAndScore[i].keySet()) {        final List<Pair<Integer,Float>> classIdAndScore=readName2IdAndScore[i].get(readName);        final int classId=getBestId(classIdAndScore);        if (classId != 0) {          Integer[] counts=class2counts.get(classId);          if (counts == null) {            counts=new Integer[]{0};            class2counts.put(classId,counts);          }          counts[0]++;          if (class2count.get(classId) == null)           class2count.put(classId,1); else           class2count.put(classId,class2count.get(classId) + 1);        }        progress.incrementProgress();      }      table.getClassification2Class2Counts().put(cNames[i],class2counts);      if (progress instanceof ProgressPercentage)       ((ProgressPercentage)progress).reportTaskCompleted();    }  }  table.setSamples(new String[]{Basic.getFileBaseName(new File(fileName).getName())},null,new Integer[]{totalReads},new BlastMode[]{BlastMode.Unknown});  table.setTotalReads(totalReads);  doc.setNumberReads(totalReads);  for (int i=0; i < cNames.length; i++) {    if (i != taxonomyIndex)     doc.getActiveViewers().remove(cNames[i]);  }  if (numberOfErrors > 0)   NotificationsInSwing.showWarning(MainViewer.getLastActiveFrame(),"Lines skipped during import: " + numberOfErrors + " (of "+ numberOfLines+ ")");  System.err.println("done (" + totalReads + " reads)");}  }
class C{  public void AICelculate(){  float nWeightTictactocBoard[][]=new float[Settings.nTicTacTocBlockWidth][Settings.nTicTacTocBlockHeight];  int _weight;  int _x=0, _y=0;  ArrayList<TicTacTocPoint> _selectTag=new ArrayList<TicTacTocPoint>();  for (int i=0; i < Settings.nTicTacTocBlockWidth; i++)   for (int j=0; j < Settings.nTicTacTocBlockHeight; j++)   if (tictactocBoardStatues[i][j] == Settings.ERRORCODE) {    nWeightTictactocBoard[i][j]=0;    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int y=j - 1; ; y--) {      if (y < 0)       break;      if (tictactocBoardStatues[i][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i - 1, y=j - 1; ; x--, y--) {      if (x < 0)       break;      if (y < 0)       break;      if (tictactocBoardStatues[x][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i - 1; ; x--) {      if (x < 0)       break;      if (tictactocBoardStatues[x][j] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i - 1, y=j + 1; ; x--, y++) {      if (x < 0)       break;      if (y >= Settings.nTicTacTocBlockHeight)       break;      if (tictactocBoardStatues[x][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int y=j + 1; ; y++) {      if (y >= Settings.nTicTacTocBlockHeight)       break;      if (tictactocBoardStatues[i][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i + 1, y=j + 1; ; x++, y++) {      if (x >= Settings.nTicTacTocBlockWidth)       break;      if (y >= Settings.nTicTacTocBlockHeight)       break;      if (tictactocBoardStatues[x][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i + 1; ; x++) {      if (x >= Settings.nTicTacTocBlockWidth)       break;      if (tictactocBoardStatues[x][j] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    _weight=Settings.nAiTicTacTocEnemyInitWeight;    for (int x=i + 1, y=j - 1; ; x++, y--) {      if (x >= Settings.nTicTacTocBlockWidth)       break;      if (y < 0)       break;      if (tictactocBoardStatues[x][y] == roomClients.get(0).getClientGameTag()) {        nWeightTictactocBoard[i][j]+=_weight;        _weight++;      } else       break;    }    if (isAITicTacToc()) {      for (int y=j - 1; ; y--) {        if (y < 0)         break;        if (tictactocBoardStatues[i][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i - 1, y=j - 1; ; x--, y--) {        if (x < 0)         break;        if (y < 0)         break;        if (tictactocBoardStatues[x][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i - 1; ; x--) {        if (x < 0)         break;        if (tictactocBoardStatues[x][j] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i - 1, y=j + 1; ; x--, y++) {        if (x < 0)         break;        if (y >= Settings.nTicTacTocBlockHeight)         break;        if (tictactocBoardStatues[x][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int y=j + 1; ; y++) {        if (y >= Settings.nTicTacTocBlockHeight)         break;        if (tictactocBoardStatues[i][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i + 1, y=j + 1; ; x++, y++) {        if (x >= Settings.nTicTacTocBlockWidth)         break;        if (y >= Settings.nTicTacTocBlockHeight)         break;        if (tictactocBoardStatues[x][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i + 1; ; x++) {        if (x >= Settings.nTicTacTocBlockWidth)         break;        if (tictactocBoardStatues[x][j] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;        } else         break;      }      for (int x=i + 1, y=j - 1; ; x++, y--) {        if (x >= Settings.nTicTacTocBlockWidth)         break;        if (y < 0)         break;        if (tictactocBoardStatues[x][y] == Settings.nComputerAiTagNumber) {          nWeightTictactocBoard[i][j]+=Settings.nAiTicTacTocWeight;          _weight++;        } else         break;      }    }  } else {    nWeightTictactocBoard[i][j]=Settings.ERRORCODE;  }  float temp=-1;  for (int i=0; i < Settings.nTicTacTocBlockWidth; i++)   for (int j=0; j < Settings.nTicTacTocBlockHeight; j++) {    if (nWeightTictactocBoard[i][j] > temp) {      temp=nWeightTictactocBoard[i][j];      _x=i;      _y=j;      _selectTag.clear();      _selectTag.add(new TicTacTocPoint(_x,_y));    } else     if (nWeightTictactocBoard[i][j] == temp) {      _x=i;      _y=j;      _selectTag.add(new TicTacTocPoint(_x,_y));    }  }  Random _rnd=new Random();  int _selectTheTag=_rnd.nextInt(_selectTag.size());  setTheTicTacTocBoard(_selectTag.get(_selectTheTag).getX(),_selectTag.get(_selectTheTag).getY(),Settings.nComputerAiTagNumber);  roomClients.get(0).sendPacket(Settings._ANSWER_TICTACTOC_AI + "","Computer AI",_selectTag.get(_selectTheTag).getX() + "",_selectTag.get(_selectTheTag).getY() + "",true + "",Settings.nComputerAiTagNumber + "");}  }
class C{  public BigFraction pow(final BigInteger exponent){  if (exponent.signum() == 0) {    return ONE;  }  if (numerator.signum() == 0) {    return this;  }  if (exponent.signum() == -1) {    final BigInteger eNeg=exponent.negate();    return new BigFraction(ArithmeticUtils.pow(denominator,eNeg),ArithmeticUtils.pow(numerator,eNeg));  }  return new BigFraction(ArithmeticUtils.pow(numerator,exponent),ArithmeticUtils.pow(denominator,exponent));}  }
class C{  public boolean isFullyZoomedOut(){  return isFullyZoomedOutX() && isFullyZoomedOutY();}  }
class C{  public UCSReader(InputStream inputStream,short encoding){  this(inputStream,DEFAULT_BUFFER_SIZE,encoding);}  }
class C{  boolean deleteTheClientInTheRooms(Client client){  boolean result=false;  for (int i=gameRooms.size() - 1; i > -1; i--) {    if (gameRooms.get(i).exitTheRoom(client)) {      result=true;      break;    }  }  return result;}  }
class C{  public void initRandom(){  if (_random == null) {    try {      _random=SecureRandom.getInstance(SESSION_ID_RANDOM_ALGORITHM);    } catch (    NoSuchAlgorithmException e) {      try {        _random=SecureRandom.getInstance(SESSION_ID_RANDOM_ALGORITHM_ALT);        _weakRandom=false;      } catch (      NoSuchAlgorithmException e_alt) {        Log.warn("Could not generate SecureRandom for session-id randomness",e);        _random=new Random();        _weakRandom=true;      }    }  }  _random.setSeed(_random.nextLong() ^ System.currentTimeMillis() ^ hashCode()^ Runtime.getRuntime().freeMemory());}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject o=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    o.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return o;}  }
class C{  public Boolean isLogBeforeScripts(){  return logBeforeScripts;}  }
class C{  public static void removeRunable(Runnable runnable){  HANDLER.removeCallbacks(runnable);}  }
class C{  public static boolean isNetworkChanged(Context context,String prevConnectivityType,String mPrevConnectionSubType){  String connectivityType=getNetworkType(context);  String connectivitySubType=getNetworkSubType(context);  if (null == prevConnectivityType) {    return false;  } else   if (!prevConnectivityType.equals(connectivityType)) {    return true;  } else   if (!mPrevConnectionSubType.equals(connectivitySubType)) {    return true;  }  return false;}  }
class C{  public boolean isInAABB(Vector min,Vector max){  return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;}  }
class C{  public SAMValidationError(final Type type,final String message,final String readName){  this.type=type;  this.message=message;  this.readName=readName;}  }
class C{  public final void updateZone(){  ZoneUpdateService.getInstance().add(getOwner());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_ATE_ALL_FOOD(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400623,value0,value1);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  NewsChannelTableDao.createTable(db,ifNotExists);}  }
class C{  public static void ignoreFidelityWarning(@NotNull Object clientData){  if (ourIgnoredFidelityWarnings == null) {    ourIgnoredFidelityWarnings=new HashSet<String>();  }  ourIgnoredFidelityWarnings.add((String)clientData);}  }
class C{  public static Iterator providers(Class service,ClassLoader loader) throws ServiceConfigurationError {  return new LazyIterator(service,loader);}  }
class C{  private void initView(){  this.progressView=(CircularProgressView)findViewById(R.id.container_user_profile_progressView);  progressView.setVisibility(VISIBLE);  this.profileContainer=(RelativeLayout)findViewById(R.id.container_user_profile_profileContainer);  profileContainer.setVisibility(GONE);  this.locationTxt=(TextView)findViewById(R.id.container_user_profile_locationTxt);  DisplayUtils.setTypeface(getContext(),locationTxt);  this.bioTxt=(TextView)findViewById(R.id.container_user_profile_bio);  DisplayUtils.setTypeface(getContext(),bioTxt);  if (Mysplash.getInstance().isLightTheme()) {    ((ImageView)findViewById(R.id.container_user_profile_locationIcon)).setImageResource(R.drawable.ic_location_light);  } else {    ((ImageView)findViewById(R.id.container_user_profile_locationIcon)).setImageResource(R.drawable.ic_location_dark);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_A_TO_B(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201151,skillcaster,skillname);}  }
class C{  public DWithinExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public boolean isAbnormalPresentBySkillId(int skillId){  for (  Effect effect : abnormalEffectMap.values()) {    if (effect.getSkillId() == skillId) {      return true;    }  }  return false;}  }
class C{  public PhotosGetAllQuery noServiceAlbums(Boolean value){  return unsafeParam("no_service_albums",value);}  }
class C{  public static <T>void writeArray(PacketBuffer buf,T[] value,BiConsumer<PacketBuffer,T> writer){  buf.writeInt(value.length);  for (  T t : value) {    writer.accept(buf,t);  }}  }
class C{  public void speakNow(){  long now=System.currentTimeMillis();  Calendar cal=new GregorianCalendar();  int hour=cal.get(Calendar.HOUR_OF_DAY);  int min=cal.get(Calendar.MINUTE);  timeToSpeech(hour,min);}  }
class C{  public void stop(){  running=false;}  }
class C{  public K[] keys(K[] a){  int size=size();  if (a.length < size) {    a=(K[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      a[j++]=k[i];    }  }  return a;}  }
class C{  @Override public void endDocument() throws SAXException {  return;}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.endGeneralEntity(name,augs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_SKIN_CHANGABLE_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300478,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_QUEST_LIMIT_START_WEEK(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400857,value1,value0);}  }
class C{  @Deprecated public ShapelessRecipe addIngredient(Material ingredient,int rawdata){  return addIngredient(1,ingredient,rawdata);}  }
class C{  public boolean isIncluded(){  return this.include;}  }
class C{  private void loadDatabase(ByteBuffer bb) throws IOException {  int size;  loadDatabaseHeader(bb);  size=bb.getInt();  diphoneIndex=new HashMap();  for (int i=0; i < size; i++) {    int pos=bb.position();    Diphone diphone=Diphone.loadBinary(bb);    add(diphone);    diphoneIndex.put(diphone.getName(),new Integer(pos));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT_NPC(String value0){  return new SM_SYSTEM_MESSAGE(1400002,value0);}  }
class C{  @Override public void onCreate(){  Log_OC.d(TAG,"onCreate");  super.onCreate();  mDownloadReceiver=new DownloadCompletedReceiver();  IntentFilter filter=new IntentFilter();  filter.addAction(FileDownloader.getDownloadAddedMessage());  filter.addAction(FileDownloader.getDownloadFinishMessage());  registerReceiver(mDownloadReceiver,filter);  mFolderObserversMap=new HashMap<String,FolderObserver>();}  }
class C{  private void updateButtons(){  List<ButtonData> buttonDatas=allAngleExpandableButton.buttonDatas;  int mainButtonRadius=allAngleExpandableButton.mainButtonSizePx / 2;  int subButtonRadius=allAngleExpandableButton.subButtonSizePx / 2;  Matrix matrix=matrixArray[0];  matrix.reset();  matrix.postRotate(allAngleExpandableButton.mainButtonRotateDegree * allAngleExpandableButton.rotateProgress,allAngleExpandableButton.rawButtonRectF.centerX(),allAngleExpandableButton.rawButtonRectF.centerY());  for (int i=1; i < buttonDatas.size(); i++) {    matrix=matrixArray[i];    ButtonData buttonData=buttonDatas.get(i);    matrix.reset();    if (allAngleExpandableButton.expanded) {      ExpandMoveCoordinate coordinate=expandDesCoordinateMap.get(buttonData);      float dx=allAngleExpandableButton.expandProgress * (coordinate.moveX);      float dy=allAngleExpandableButton.expandProgress * (-coordinate.moveY);      matrix.postTranslate(dx,dy);    } else {      int radius=mainButtonRadius + subButtonRadius + allAngleExpandableButton.buttonGapPx;      float moveX;      float moveY;      ExpandMoveCoordinate coordinate=expandDesCoordinateMap.get(buttonData);      if (coordinate == null) {        moveX=allAngleExpandableButton.angleCalculator.getMoveX(radius,i);        moveY=allAngleExpandableButton.angleCalculator.getMoveY(radius,i);        coordinate=new ExpandMoveCoordinate(moveX,moveY);        expandDesCoordinateMap.put(buttonData,coordinate);      } else {        moveX=coordinate.moveX;        moveY=coordinate.moveY;      }      float dx=allAngleExpandableButton.expandProgress * (moveX);      float dy=allAngleExpandableButton.expandProgress * (-moveY);      matrix.postTranslate(dx,dy);    }  }}  }
class C{  public static DateFormat toDateTimeFormat(String dateTimeFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(dateTimeFormat)) {    df=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM,locale);  } else {    df=new SimpleDateFormat(dateTimeFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  public void exec(final String service,final String action,final String callbackId,final String rawArgs){  CordovaPlugin plugin=getPlugin(service);  if (plugin == null) {    Log.d(TAG,"exec() call to unknown plugin: " + service);    PluginResult cr=new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);    app.sendPluginResult(cr,callbackId);    return;  }  CallbackContext callbackContext=new CallbackContext(callbackId,app);  try {    long pluginStartTime=System.currentTimeMillis();    boolean wasValidAction=plugin.execute(action,rawArgs,callbackContext);    long duration=System.currentTimeMillis() - pluginStartTime;    if (duration > SLOW_EXEC_WARNING_THRESHOLD) {      Log.w(TAG,"THREAD WARNING: exec() call to " + service + "."+ action+ " blocked the main thread for "+ duration+ "ms. Plugin should use CordovaInterface.getThreadPool().");    }    if (!wasValidAction) {      PluginResult cr=new PluginResult(PluginResult.Status.INVALID_ACTION);      callbackContext.sendPluginResult(cr);    }  } catch (  JSONException e) {    PluginResult cr=new PluginResult(PluginResult.Status.JSON_EXCEPTION);    callbackContext.sendPluginResult(cr);  }catch (  Exception e) {    Log.e(TAG,"Uncaught exception from plugin",e);    callbackContext.error(e.getMessage());  }}  }
class C{  public boolean hasResourceParameter(ResourceContextParameters resourceParameter,ContextInfo contextInfo){  return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.RESOURCE,resourceParameter.getName()),contextInfo);}  }
class C{  public final boolean isHtmlSafe(){  return htmlSafe;}  }
class C{  public String selectByExample(UserCriteria example){  SQL sql=new SQL();  if (example != null && example.isDistinct()) {    sql.SELECT_DISTINCT("id");  } else {    sql.SELECT("id");  }  sql.SELECT("username");  sql.SELECT("psw");  sql.FROM("user");  applyWhere(sql,example,false);  if (example != null && example.getOrderByClause() != null) {    sql.ORDER_BY(example.getOrderByClause());  }  return sql.toString();}  }
class C{  @Override protected void onHandleIntent(Intent intent){  try {    String refreshedToken=FirebaseInstanceId.getInstance().getToken();    PrefsHelper.saveFCMToken(this,refreshedToken);    PrefsHelper.sendFCMTokenToServer(this,true);  } catch (  Exception e) {    PrefsHelper.sendFCMTokenToServer(this,false);  }  LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(PrefsHelper.REGISTRATION_COMPLETE));}  }
class C{  public TLongObjectIterator(TLongObjectHashMap<V> map){  super(map);  this._map=map;}  }
class C{  public static void groupReturnItemsByOrder(List<GenericValue> returnItems,Map<String,List<GenericValue>> returnItemsByOrderId,Map<String,BigDecimal> totalByOrder,Delegator delegator,String returnId,String returnTypeId){  for (  GenericValue returnItem : returnItems) {    String orderId=returnItem.getString("orderId");    if (orderId != null) {      if (returnItemsByOrderId != null) {        BigDecimal totalForOrder=null;        if (totalByOrder != null) {          totalForOrder=totalByOrder.get(orderId);        }        List<GenericValue> returnItemList=returnItemsByOrderId.get(orderId);        if (returnItemList == null) {          returnItemList=FastList.newInstance();        }        if (totalForOrder == null) {          totalForOrder=BigDecimal.ZERO;        }        returnItemList.add(returnItem);        returnItemsByOrderId.put(orderId,returnItemList);        if (totalByOrder != null) {          BigDecimal quantity=returnItem.getBigDecimal("returnQuantity");          BigDecimal amount=returnItem.getBigDecimal("returnPrice");          if (quantity == null) {            quantity=BigDecimal.ZERO;          }          if (amount == null) {            amount=BigDecimal.ZERO;          }          BigDecimal thisTotal=amount.multiply(quantity);          BigDecimal existingTotal=totalForOrder;          Map<String,Object> condition=UtilMisc.toMap("returnId",returnItem.get("returnId"),"returnItemSeqId",returnItem.get("returnItemSeqId"));          BigDecimal newTotal=existingTotal.add(thisTotal).add(getReturnAdjustmentTotal(delegator,condition));          totalByOrder.put(orderId,newTotal);        }      }    }  }  if ((totalByOrder != null) && (totalByOrder.keySet() != null)) {    for (    String orderId : totalByOrder.keySet()) {      Map<String,Object> condition=UtilMisc.<String,Object>toMap("returnId",returnId,"returnItemSeqId",org.ofbiz.common.DataModelConstants.SEQ_ID_NA,"returnTypeId",returnTypeId);      BigDecimal existingTotal=(totalByOrder.get(orderId)).add(getReturnAdjustmentTotal(delegator,condition));      totalByOrder.put(orderId,existingTotal);    }  }}  }
class C{  private boolean isPopulatingTable(){  return tablePopulating;}  }
class C{  public boolean isSwipeable(final int _index){  if (getItemViewType(_index) == TYPE_HEADER) {    return false;  }  return true;}  }
class C{  public SplitSystem(Taxa allTaxa,PhyloTree tree){  this();  splitsFromTreeRec(tree.getRoot(),tree,allTaxa,allTaxa.getBits(),new NodeArray(tree),this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_INTERVAL_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200493,num0,skilltarget,skillname);}  }
class C{  @Override public boolean isEnableVersioning(){  return super.isEnableVersioning();}  }
class C{  public static int brighter(int c){  int r=red(c), g=green(c), b=blue(c);  int i=(int)(1.0 / (1.0 - scale));  if (r == 0 && g == 0 && b == 0) {    return rgba(i,i,i,alpha(c));  }  if (r > 0 && r < i)   r=i;  if (g > 0 && g < i)   g=i;  if (b > 0 && b < i)   b=i;  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  i(null,"--> onPageStarted() url = " + url);  super.onPageStarted(view,url,favicon);  onLoadPageStarted(view,url,favicon);}  }
class C{  public AdsGetTargetingStatsQuery criteria(String value){  return unsafeParam("criteria",value);}  }
class C{  protected void captureRequestSize(HttpContent httpContent){  ByteBuf bufferedContent=httpContent.content();  int contentSize=bufferedContent.readableBytes();  requestBodySize.addAndGet(contentSize);}  }
class C{  private CompositeFormat(){}  }
class C{  public Object convertFieldValue(ModelField modelField,Object value,ModelFieldTypeReader modelFieldTypeReader,Map<String,? extends Object> context){  if (value == null || value == GenericEntity.NULL_FIELD) {    return null;  }  String fieldJavaType=modelFieldTypeReader.getModelFieldType(modelField.getType()).getJavaType();  try {    return ObjectType.simpleTypeConvert(value,fieldJavaType,null,(TimeZone)context.get("timeZone"),(Locale)context.get("locale"),true);  } catch (  GeneralException e) {    String errMsg="Could not convert field value for the field: [" + modelField.getName() + "] on the ["+ this.getEntityName()+ "] entity to the ["+ fieldJavaType+ "] type for the value ["+ value+ "]: "+ e.toString();    Debug.logError(e,errMsg,module);    throw new IllegalArgumentException(errMsg);  }}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();  writeExternal(out,version);}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  private void mapStateProperties(ContainerState containerState,Map<String,Object> state){  if (state == null) {    return;  }  containerState.started=parseDate(state.get(DOCKER_CONTAINER_STATE_STARTED_PROP_NAME));  mapPowerState(containerState,state);}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  protected String filterDataString(String sStr,NamedDocumentNGramGraph cCat){  return sStr;}  }
class C{  public T end(){  T error=getField().getZero();  for (int i=0; i < after.length; ++i) {    after[i]=after[i].add(previous[i].add(scaled[i]));    if (i < mainSetDimension) {      final T yScale=MathUtils.max(previous[i].abs(),after[i].abs());      final T tol=(vecAbsoluteTolerance == null) ? yScale.multiply(scalRelativeTolerance).add(scalAbsoluteTolerance) : yScale.multiply(vecRelativeTolerance[i]).add(vecAbsoluteTolerance[i]);      final T ratio=after[i].subtract(before[i]).divide(tol);      error=error.add(ratio.multiply(ratio));    }  }  return error.divide(mainSetDimension).sqrt();}  }
class C{  public static boolean isValidEmail(String email){  return Patterns.EMAIL_ADDRESS.matcher(email).matches();}  }
class C{  public Hash(String hex){  if (hex.length() != 64) {    throw new IllegalArgumentException("Digest length must be 64 hex characters for Hash");  }  this.bytes=ByteUtils.reverse(ByteUtils.fromHex(hex));}  }
class C{  public PollsGetVotersQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public PolyhedronsSet rotate(final Vector3D center,final Rotation rotation){  return (PolyhedronsSet)applyTransform(new RotationTransform(center,rotation));}  }
class C{  public Tree(final Material type,TreeSpecies species,BlockFace dir){  super(type,species);  setDirection(dir);}  }
class C{  public boolean isElemhide(){  return isOptionEnabled(UrlFilterRuleOption.ELEMHIDE);}  }
class C{  public byte[] download_file(String group_name,String remote_filename,long file_offset,long download_bytes) throws IOException, MyException {  boolean bNewConnection=this.newReadableStorageConnection(group_name,remote_filename);  Socket storageSocket=this.storageServer.getSocket();  try {    ProtoCommon.RecvPackageInfo pkgInfo;    this.send_download_package(group_name,remote_filename,file_offset,download_bytes);    pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,-1);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return null;    }    return pkgInfo.body;  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public void clear(){  length=0;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    searchBarPresenter.touchNavigatorIcon(getActivity());  break;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200278,skillname);}  }
class C{  public boolean isDaemon(){  return daemon;}  }
class C{  public static Optional<String> createInputDialog(final Window owner,final String title,final String label){  final TextInputDialog dialog=new TextInputDialog();  dialog.setTitle(title);  dialog.setHeaderText(null);  dialog.setContentText(label);  dialog.initOwner(owner);  return dialog.showAndWait();}  }
class C{  public void run(){  SimilarityArray sa;switch (WeightingMethod) {case summaryGaussNormEvaluator.USE_DISTRO_AVERAGE_AS_WEIGHT:    sa=Caller.calcDistroSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);  break;case summaryGaussNormEvaluator.USE_OCCURENCES_AS_WEIGHT:sa=Caller.calcSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);break;default :sa=new SimilarityArray();}}  }
class C{  public static final void splitItem(Player player,int itemObjId,int destinationObjId,long splitAmount,short slotNum,byte sourceStorageType,byte destinationStorageType){  if (splitAmount <= 0) {    return;  }  if (player.isTrading()) {    PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300713));    return;  }  IStorage sourceStorage=player.getStorage(sourceStorageType);  IStorage destStorage=player.getStorage(destinationStorageType);  if (sourceStorage == null || destStorage == null) {    log.warn(String.format("storage null playerName sourceStorage destStorage %s %d %d",player.getName(),sourceStorageType,destinationStorageType));    return;  }  Item sourceItem=sourceStorage.getItemByObjId(itemObjId);  Item targetItem=destStorage.getItemByObjId(destinationObjId);  if (sourceItem == null) {    sourceItem=sourceStorage.getKinahItem();    if (sourceItem == null || sourceItem.getObjectId() != itemObjId) {      log.warn(String.format("CHECKPOINT: attempt to split null item %d %d %d",itemObjId,splitAmount,slotNum));      return;    }  }  if (sourceStorageType != destinationStorageType && (ItemRestrictionService.isItemRestrictedTo(player,sourceItem,destinationStorageType) || ItemRestrictionService.isItemRestrictedFrom(player,sourceItem,sourceStorageType))) {    sendStorageUpdatePacket(player,StorageType.getStorageTypeById(sourceStorageType),sourceItem);    return;  }  if (sourceItem.getItemTemplate().isKinah()) {    moveKinah(player,sourceStorage,splitAmount);    return;  }  if (targetItem == null) {    long oldItemCount=sourceItem.getItemCount() - splitAmount;    if (sourceItem.getItemCount() < splitAmount || oldItemCount == 0) {      return;    }    if (sourceStorageType != destinationStorageType) {      LegionService.getInstance().addWHItemHistory(player,sourceItem.getItemId(),splitAmount,sourceStorage,destStorage);    }    Item newItem=ItemFactory.newItem(sourceItem.getItemTemplate().getTemplateId(),splitAmount);    if (sourceStorageType == destinationStorageType) {      newItem.setEquipmentSlot(slotNum);    }    sourceStorage.decreaseItemCount(sourceItem,splitAmount,sourceStorageType == destinationStorageType ? ItemUpdateType.DEC_ITEM_SPLIT : ItemUpdateType.DEC_ITEM_SPLIT_MOVE);    PacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(sourceStorage.getStorageType(),player));    if (destStorage.add(newItem) == null) {      ItemService.releaseItemId(newItem);    }  } else   if (targetItem.getItemId() == sourceItem.getItemId()) {    if (sourceStorageType != destinationStorageType) {      LegionService.getInstance().addWHItemHistory(player,sourceItem.getItemId(),splitAmount,sourceStorage,destStorage);    }    mergeStacks(sourceStorage,destStorage,sourceItem,targetItem,splitAmount);  }}  }
class C{  @deprecated public TimeZoneFormat cloneAsThawed(){  TimeZoneFormat copy=(TimeZoneFormat)super.clone();  copy._frozen=false;  return copy;}  }
class C{  public int length(){  return values.size();}  }
class C{  public CommandTagAdd(){}  }
class C{  public ZWaveThermostatOperatingStateCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(getClass().getSimpleName());  builder.append('[');  builder.append(charsetName);  builder.append(": ");  for (int i=0; i < bytes.length; i++) {    if (i > 0) {      builder.append(",");    }    builder.append("0x");    builder.append(Integer.toHexString(0xFF & bytes[i]).toUpperCase());  }  builder.append(']');  return builder.toString();}  }
class C{  public Webster(int port,String roots,String bindAddress) throws BindException {  this.port=port;  initialize(roots,bindAddress);}  }
class C{  public String loadDocumentDatelineToString(String sDocID){  return loadDocumentElement(sDocID,DATELINE_TAG);}  }
class C{  private String pitchLabels2RelativeValues(String pitchAttribute){  if (pitchAttribute.equals("x-low")) {    return "-50%";  } else   if (pitchAttribute.equals("low")) {    return "-25%";  } else   if (pitchAttribute.equals("medium")) {    return "+0%";  } else   if (pitchAttribute.equals("high")) {    return "+100%";  } else   if (pitchAttribute.equals("x-high")) {    return "+200%";  }  return "+0%";}  }
class C{  public PhotosEditAlbumQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  private void applyProsodySpecifications(Document doc){  TreeWalker tw=DomUtils.createTreeWalker(doc,doc,MaryXML.PHONE,MaryXML.BOUNDARY,MaryXML.PROSODY);  Element e=null;  while ((e=(Element)tw.nextNode()) != null) {    if ("prosody".equals(e.getNodeName())) {      NodeList nl=e.getElementsByTagName("ph");      applyNewContourSpecifications(nl,e);      applySpeechRateSpecifications(nl,e);    }  }}  }
class C{  public static void main(String[] args){  System.out.println((new KevinVoiceDirectory()).toString());}  }
class C{  public static boolean isMac(){  return (OS.indexOf("mac") >= 0);}  }
class C{  protected boolean isOnSameScreenAsChildren(){  return true;}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapStatusAdvisory && getId().equals(((AirMapStatusAdvisory)o).getId());}  }
class C{  public CatalogException(String message,Exception e){  super(message);  this.exceptionType=WRAPPER;  this.exception=e;}  }
class C{  public Future<T>[] waitForResult(long timeout,TimeUnit unit) throws InterruptedException {  lock.lock();  try {    if (numberOfResults == numberOfResultsArrived) {      return results;    }    if (timeout == -1) {      resultArrived.await();    } else {      resultArrived.await(timeout,unit);    }    if (numberOfResultsArrived == numberOfResults) {      return results;    } else {      Future<T>[] partialResult=new Future[numberOfResultsArrived];      System.arraycopy(results,0,partialResult,0,numberOfResultsArrived);      return partialResult;    }  }  finally {    lock.unlock();  }}  }
class C{  public Expression newValue(String fldName){  return fldVals.get(fldName);}  }
class C{  private static Map<String,DimensionField> buildNameToDimensionField(@NotNull Set<DimensionField> dimensionFields){  Map<String,DimensionField> nameToDimensionField=new HashMap<>(dimensionFields.size());  for (  DimensionField dimensionField : dimensionFields) {    nameToDimensionField.put(dimensionField.getName(),dimensionField);  }  return nameToDimensionField;}  }
class C{  public NewsfeedGetCommentsQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static WebappInfo create(String id,String url,String icon,String name,String shortName,int orientation,int source,long themeColor,long backgroundColor,boolean isIconGenerated){  if (id == null || url == null) {    Log.e("WebappInfo","Data passed in was incomplete: " + id + ", "+ url);    return null;  }  Uri uri=Uri.parse(url);  return new WebappInfo(id,uri,icon,name,shortName,orientation,source,themeColor,backgroundColor,isIconGenerated);}  }
class C{  public static final void reverseWinding(List<Vector2> points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList"));  int size=points.size();  if (size == 1 || size == 0)   return;  Collections.reverse(points);}  }
class C{  public EquipmentUnitAdd(){}  }
class C{  protected Pair(ThrowableSet caught,ThrowableSet uncaught){  this.caught=caught;  this.uncaught=uncaught;}  }
class C{  public ActivityDelegate(@NonNull ActivityDelegateCallback<T,S> callback,@NonNull Activity delegatedActivity){  super(callback);  this.callback=callback;  this.delegatedActivity=delegatedActivity;}  }
class C{  public void runScript(Reader reader) throws IOException, SQLException {  try {    boolean originalAutoCommit=connection.getAutoCommit();    try {      if (originalAutoCommit != this.autoCommit) {        connection.setAutoCommit(this.autoCommit);      }      runScript(connection,reader);    }  finally {      connection.setAutoCommit(originalAutoCommit);    }  } catch (  IOException|SQLException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException("Error running script.  Cause: " + e,e);  }}  }
class C{  public boolean isPagePresent(String title){  return grid.isPageOnTheList(title);}  }
class C{  Augmentations handleStartElement(QName element,XMLAttributes attributes,Augmentations augs){  if (DEBUG) {    System.out.println("==>handleStartElement: " + element);  }  if (fElementDepth == -1 && fValidationManager.isGrammarFound()) {    if (fSchemaType == null) {      fSchemaDynamicValidation=true;    } else {    }  }  if (!fUseGrammarPoolOnly) {    String sLocation=attributes.getValue(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_SCHEMALOCATION);    String nsLocation=attributes.getValue(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_NONAMESPACESCHEMALOCATION);    storeLocations(sLocation,nsLocation);  }  if (fSkipValidationDepth >= 0) {    fElementDepth++;    if (fAugPSVI)     augs=getEmptyAugs(augs);    return augs;  }  Object decl=null;  if (fCurrentCM != null) {    decl=fCurrentCM.oneTransition(element,fCurrCMState,fSubGroupHandler);    if (fCurrCMState[0] == XSCMValidator.FIRST_ERROR) {      XSComplexTypeDecl ctype=(XSComplexTypeDecl)fCurrentType;      Vector next;      if (ctype.fParticle != null && (next=fCurrentCM.whatCanGoHere(fCurrCMState)).size() > 0) {        String expected=expectedStr(next);        final int[] occurenceInfo=fCurrentCM.occurenceInfo(fCurrCMState);        if (occurenceInfo != null) {          final int minOccurs=occurenceInfo[0];          final int maxOccurs=occurenceInfo[1];          final int count=occurenceInfo[2];          if (count < minOccurs) {            final int required=minOccurs - count;            if (required > 1) {              reportSchemaError("cvc-complex-type.2.4.h",new Object[]{element.rawname,fCurrentCM.getTermName(occurenceInfo[3]),Integer.toString(minOccurs),Integer.toString(required)});            } else {              reportSchemaError("cvc-complex-type.2.4.g",new Object[]{element.rawname,fCurrentCM.getTermName(occurenceInfo[3]),Integer.toString(minOccurs)});            }          } else           if (count >= maxOccurs && maxOccurs != SchemaSymbols.OCCURRENCE_UNBOUNDED) {            reportSchemaError("cvc-complex-type.2.4.e",new Object[]{element.rawname,expected,Integer.toString(maxOccurs)});          } else {            reportSchemaError("cvc-complex-type.2.4.a",new Object[]{element.rawname,expected});          }        } else {          reportSchemaError("cvc-complex-type.2.4.a",new Object[]{element.rawname,expected});        }      } else {        final int[] occurenceInfo=fCurrentCM.occurenceInfo(fCurrCMState);        if (occurenceInfo != null) {          final int maxOccurs=occurenceInfo[1];          final int count=occurenceInfo[2];          if (count >= maxOccurs && maxOccurs != SchemaSymbols.OCCURRENCE_UNBOUNDED) {            reportSchemaError("cvc-complex-type.2.4.f",new Object[]{element.rawname,Integer.toString(maxOccurs)});          } else {            reportSchemaError("cvc-complex-type.2.4.d",new Object[]{element.rawname});          }        } else {          reportSchemaError("cvc-complex-type.2.4.d",new Object[]{element.rawname});        }      }    }  }  if (fElementDepth != -1) {    ensureStackCapacity();    fSubElementStack[fElementDepth]=true;    fSubElement=false;    fElemDeclStack[fElementDepth]=fCurrentElemDecl;    fNilStack[fElementDepth]=fNil;    fNotationStack[fElementDepth]=fNotation;    fTypeStack[fElementDepth]=fCurrentType;    fStrictAssessStack[fElementDepth]=fStrictAssess;    fCMStack[fElementDepth]=fCurrentCM;    fCMStateStack[fElementDepth]=fCurrCMState;    fSawTextStack[fElementDepth]=fSawText;    fStringContent[fElementDepth]=fSawCharacters;  }  fElementDepth++;  fCurrentElemDecl=null;  XSWildcardDecl wildcard=null;  fCurrentType=null;  fStrictAssess=true;  fNil=false;  fNotation=null;  fBuffer.setLength(0);  fSawText=false;  fSawCharacters=false;  if (decl != null) {    if (decl instanceof XSElementDecl) {      fCurrentElemDecl=(XSElementDecl)decl;    } else {      wildcard=(XSWildcardDecl)decl;    }  }  if (wildcard != null && wildcard.fProcessContents == XSWildcard.PC_SKIP) {    fSkipValidationDepth=fElementDepth;    if (fAugPSVI)     augs=getEmptyAugs(augs);    return augs;  }  if (fElementDepth == 0) {    if (fRootElementDeclaration != null) {      fCurrentElemDecl=fRootElementDeclaration;      checkElementMatchesRootElementDecl(fCurrentElemDecl,element);    } else     if (fRootElementDeclQName != null) {      processRootElementDeclQName(fRootElementDeclQName,element);    } else     if (fRootTypeDefinition != null) {      fCurrentType=fRootTypeDefinition;    } else     if (fRootTypeQName != null) {      processRootTypeQName(fRootTypeQName);    }  }  if (fCurrentType == null) {    if (fCurrentElemDecl == null) {      SchemaGrammar sGrammar=findSchemaGrammar(XSDDescription.CONTEXT_ELEMENT,element.uri,null,element,attributes);      if (sGrammar != null) {        fCurrentElemDecl=sGrammar.getGlobalElementDecl(element.localpart);      }    }    if (fCurrentElemDecl != null) {      fCurrentType=fCurrentElemDecl.fType;    }  }  if (fElementDepth == fIgnoreXSITypeDepth && fCurrentElemDecl == null) {    fIgnoreXSITypeDepth++;  }  String xsiType=null;  if (fElementDepth >= fIgnoreXSITypeDepth) {    xsiType=attributes.getValue(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_TYPE);  }  if (fCurrentType == null && xsiType == null) {    if (fElementDepth == 0) {      if (fDynamicValidation || fSchemaDynamicValidation) {        if (fDocumentSource != null) {          fDocumentSource.setDocumentHandler(fDocumentHandler);          if (fDocumentHandler != null)           fDocumentHandler.setDocumentSource(fDocumentSource);          fElementDepth=-2;          return augs;        }        fSkipValidationDepth=fElementDepth;        if (fAugPSVI)         augs=getEmptyAugs(augs);        return augs;      }      fXSIErrorReporter.fErrorReporter.reportError(XSMessageFormatter.SCHEMA_DOMAIN,"cvc-elt.1.a",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_ERROR);    } else     if (wildcard != null && wildcard.fProcessContents == XSWildcard.PC_STRICT) {      reportSchemaError("cvc-complex-type.2.4.c",new Object[]{element.rawname});    }    fCurrentType=SchemaGrammar.fAnyType;    fStrictAssess=false;    fNFullValidationDepth=fElementDepth;    fAppendBuffer=false;    fXSIErrorReporter.pushContext();  } else {    fXSIErrorReporter.pushContext();    if (xsiType != null) {      XSTypeDefinition oldType=fCurrentType;      fCurrentType=getAndCheckXsiType(element,xsiType,attributes);      if (fCurrentType == null) {        if (oldType == null)         fCurrentType=SchemaGrammar.fAnyType; else         fCurrentType=oldType;      }    }    fNNoneValidationDepth=fElementDepth;    if (fCurrentElemDecl != null && fCurrentElemDecl.getConstraintType() == XSConstants.VC_FIXED) {      fAppendBuffer=true;    } else     if (fCurrentType.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {      fAppendBuffer=true;    } else {      XSComplexTypeDecl ctype=(XSComplexTypeDecl)fCurrentType;      fAppendBuffer=(ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_SIMPLE);    }  }  if (fCurrentElemDecl != null && fCurrentElemDecl.getAbstract())   reportSchemaError("cvc-elt.2",new Object[]{element.rawname});  if (fElementDepth == 0) {    fValidationRoot=element.rawname;  }  if (fNormalizeData) {    fFirstChunk=true;    fTrailing=false;    fUnionType=false;    fWhiteSpace=-1;  }  if (fCurrentType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {    XSComplexTypeDecl ctype=(XSComplexTypeDecl)fCurrentType;    if (ctype.getAbstract()) {      reportSchemaError("cvc-type.2",new Object[]{element.rawname});    }    if (fNormalizeData) {      if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_SIMPLE) {        if (ctype.fXSSimpleType.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) {          fUnionType=true;        } else {          try {            fWhiteSpace=ctype.fXSSimpleType.getWhitespace();          } catch (          DatatypeException e) {          }        }      }    }  } else   if (fNormalizeData) {    XSSimpleType dv=(XSSimpleType)fCurrentType;    if (dv.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) {      fUnionType=true;    } else {      try {        fWhiteSpace=dv.getWhitespace();      } catch (      DatatypeException e) {      }    }  }  fCurrentCM=null;  if (fCurrentType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {    fCurrentCM=((XSComplexTypeDecl)fCurrentType).getContentModel(fCMBuilder);  }  fCurrCMState=null;  if (fCurrentCM != null)   fCurrCMState=fCurrentCM.startContentModel();  String xsiNil=attributes.getValue(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_NIL);  if (xsiNil != null && fCurrentElemDecl != null)   fNil=getXsiNil(element,xsiNil);  XSAttributeGroupDecl attrGrp=null;  if (fCurrentType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {    XSComplexTypeDecl ctype=(XSComplexTypeDecl)fCurrentType;    attrGrp=ctype.getAttrGrp();  }  if (fIDCChecking) {    fValueStoreCache.startElement();    fMatcherStack.pushContext();    if (fCurrentElemDecl != null && fCurrentElemDecl.fIDCPos > 0) {      fIdConstraint=true;      fValueStoreCache.initValueStoresFor(fCurrentElemDecl,this);    }  }  processAttributes(element,attributes,attrGrp);  if (attrGrp != null) {    addDefaultAttributes(element,attributes,attrGrp);  }  int count=fMatcherStack.getMatcherCount();  for (int i=0; i < count; i++) {    XPathMatcher matcher=fMatcherStack.getMatcherAt(i);    matcher.startElement(element,attributes);  }  if (fAugPSVI) {    augs=getEmptyAugs(augs);    fCurrentPSVI.fValidationContext=fValidationRoot;    fCurrentPSVI.fDeclaration=fCurrentElemDecl;    fCurrentPSVI.fTypeDecl=fCurrentType;    fCurrentPSVI.fNotation=fNotation;    fCurrentPSVI.fNil=fNil;  }  return augs;}  }
class C{  public BasicProxyPreparer(boolean verify,Permission[] permissions){  this.verify=verify;  methodConstraintsSpecified=false;  methodConstraints=null;  this.permissions=checkPermissions(permissions);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Search_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200405,skillname);}  }
class C{  public DelimitedTextTableReader(){  this("\t");}  }
class C{  public summaryFuzzyEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress,String sSspellParams){  super(sOutputSemaphore,sDo,iWordMin,iWordMax,iWordDist,iCharMin,iCharMax,iCharDist,iThreads,sOutFile,sSummaryDir,sModelDir,bSilent,iWeightMethod,bProgress);  sspellParams=sSspellParams;}  }
class C{  public static Element addChildElementValue(Element element,String childElementName,String childElementValue,Document document){  Element newElement=addChildElement(element,childElementName,document);  newElement.appendChild(document.createTextNode(childElementValue));  return newElement;}  }
class C{  public AuthRestoreQuery(VkApiClient client,String phone){  super(client,"auth.restore",RestoreResponse.class);  phone(phone);}  }
class C{  private boolean onCheckCanRefresh(){  return mRefreshEnabled && !canChildScrollUp() && mHasHeaderView&& mRefreshTriggerOffset > 0;}  }
class C{  @Override public long addModule(Module module){  return sessionTemplate.insert(NAMESPACE + ".addModule",module);}  }
class C{  public static IOFileFilter ageFileFilter(File cutoffReference){  return new AgeFileFilter(cutoffReference);}  }
class C{  public void onUpdateFromPeekToExpand(float percentage){  if (!isVisible())   return;  mHeightPx=Math.round(MathUtils.interpolate(mDefaultHeightPx,0.f,percentage));  mTextOpacity=MathUtils.interpolate(1.f,0.f,percentage);}  }
class C{  public static boolean instanceOf(Class<?> objectClass,Class<?> typeClass){  if (typeClass.isInterface() && !objectClass.isInterface()) {    return interfaceOf(objectClass,typeClass);  } else {    return isOrSubOf(objectClass,typeClass);  }}  }
class C{  @Override public void populateField(Date value){  if ((dateModel != null) && (timePicker != null) && (value != null)) {    dateModel.setValue(value);    timePicker.setValue(value);    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));    oldValueObj=value;    valueUpdated();  }}  }
class C{  public void clear(){  this.n=0;  minImpl.clear();  maxImpl.clear();  sumImpl.clear();  sumOfLogsImpl.clear();  sumOfSquaresImpl.clear();  secondMoment.clear();}  }
class C{  public void removeListener(ISpaceModeListener listener){  _listeners.remove(listener);}  }
class C{  public void seekToAudio(String id,int milliseconds){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.seekToPlaying(milliseconds);  }}  }
class C{  public TagRegexViewFilter(@NonNull final String[] viewTagRegexes){  super(viewTagRegexes);}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ActiveElectionConfig copy=(ActiveElectionConfig)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public IdentityStmt newIdentityStmt(Value local,Value identityRef){  return new JIdentityStmt(local,identityRef);}  }
class C{  public static List<String> findBestTrailMatch(List<List<String>> trails,List<String> matchTrail,boolean containFullTrail,boolean exact){  List<String> best=null;  int partMatches=0;  for (  List<String> candidateTrail : trails) {    int candidatePartMatches=0;    Iterator<String> candidateIt=candidateTrail.iterator();    Iterator<String> matchIt=matchTrail.iterator();    while (candidateIt.hasNext() && matchIt.hasNext()) {      String candidatePart=candidateIt.next();      String matchPart=matchIt.next();      if (candidatePart.equals(matchPart)) {        candidatePartMatches++;      } else {        break;      }    }    if (candidatePartMatches == matchTrail.size() && matchTrail.size() == candidateTrail.size()) {      return candidateTrail;    } else {      if (candidatePartMatches > partMatches) {        partMatches=candidatePartMatches;        best=candidateTrail;      }    }  }  if (exact) {    return null;  } else {    if (containFullTrail) {      if (partMatches >= matchTrail.size()) {        return best;      } else {        return null;      }    } else {      return best;    }  }}  }
class C{  public UsersGetSubscriptionsQueryWithExtended fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {  stream.defaultReadObject();  super.source=source;}  }
class C{  public void forEach(TriConsumer<Integer,K,V> action){  Objects.requireNonNull(action);  forEach(null);}  }
class C{  public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public boolean insertIntoNextEmptySlot(){  boolean found=searchFor(EMPTY);  if (found) {    Constant flag=INUSE_CONST;    setVal(currentPos(),flag);  }  return found;}  }
class C{  public WallGetQuery(VkApiClient client,UserActor actor){  super(client,"wall.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void remove(String name){  features.remove(name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200783,skilltarget);}  }
class C{  public static String decryptString(CipherTextIvMac civ,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return decryptString(civ,secretKeys,"UTF-8");}  }
class C{  public static Vector3f cartesianToSpherical(Vector3f cartCoords,Vector3f store){  if (cartCoords.x == 0) {    cartCoords.x=FastMath.FLT_EPSILON;  }  store.x=FastMath.sqrt((cartCoords.x * cartCoords.x) + (cartCoords.y * cartCoords.y) + (cartCoords.z * cartCoords.z));  store.y=FastMath.atan(cartCoords.z / cartCoords.x);  if (cartCoords.x < 0) {    store.y+=FastMath.PI;  }  store.z=FastMath.asin(cartCoords.y / store.x);  return store;}  }
class C{  @Override public boolean isEnabled(){  return mIsEnabled;}  }
class C{  public ZWaveAssociationGroupInfoCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public SpaceTypeDescriptorBuilder addPropertyIndex(String propertyName,SpaceIndexType indexType){  return addPropertyIndex(propertyName,indexType,false);}  }
class C{  private JobField extractJobField(Matcher tokenizedQuery) throws BadFilterException {  String fieldName=tokenizedQuery.group(1);  return Arrays.stream(DefaultJobField.values()).filter(null).findFirst().orElseThrow(null);}  }
class C{  public void cloneCharacter(int taskId,int targetAccountId,String name,String account,byte[] db){  if (!PlayerService.isFreeName(name)) {    if (PlayerTransferConfig.BLOCK_SAMENAME) {      LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,"Name is already in use"));      return;    }    log.info("Name is already in use `" + name + "`");    textLog.info("taskId:" + taskId + "; [CloneCharacter:!isFreeName]");    String newName=name + PlayerTransferConfig.NAME_PREFIX;    int i=0;    while (!PlayerService.isFreeName(newName)) {      newName=name + PlayerTransferConfig.NAME_PREFIX + i;    }    name=newName;  }  if (AccountService.loadAccount(targetAccountId).size() >= GSConfig.CHARACTER_LIMIT_COUNT) {    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,"No free character slots"));    return;  }  CMT_CHARACTER_INFORMATION acp=new CMT_CHARACTER_INFORMATION(0,State.CONNECTED);  acp.setBuffer(ByteBuffer.wrap(db).order(ByteOrder.LITTLE_ENDIAN));  Player cha=acp.readInfo(name,targetAccountId,account,rsList,textLog);  if (cha == null) {    log.error("clone failed #" + taskId + " `"+ name+ "`");    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,"unexpected sql error while creating a clone"));  } else {    DAOManager.getDAO(PlayerDAO.class).setPlayerLastTransferTime(cha.getObjectId(),System.currentTimeMillis());    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.OK,taskId));    log.info("clone successful #" + taskId + " `"+ name+ "`");    textLog.info("taskId:" + taskId + "; [CloneCharacter:Done]");  }}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public boolean isMatched(){  for (int i=0; i < fLocationPaths.length; i++)   if (((fMatched[i] & MATCHED) == MATCHED) && ((fMatched[i] & MATCHED_DESCENDANT_PREVIOUS) != MATCHED_DESCENDANT_PREVIOUS) && ((fNoMatchDepth[i] == 0) || ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED_DESCENDANT)))   return true;  return false;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void start(){  this.documentUpdateTimeMicros=0;  verifySubscriptionTargetExists(null);}  }
class C{  @Override public UniformRealDistribution makeDistribution(){  return new UniformRealDistribution(-0.5,1.25);}  }
class C{  public void writeString(byte[] str,int offset,int length) throws IOException {  if (str == null)   writeInt(0); else {    if (useCompression && length >= Compressor.MIN_SIZE_FOR_DEFLATION) {      if (byteBuffer.length < length)       byteBuffer=new byte[2 * length];      int numberOfBytes=compressor.deflateString2ByteArray(str,offset,length,byteBuffer);      writeInt(numberOfBytes);      outs.write(byteBuffer,0,Math.abs(numberOfBytes));      position+=Math.abs(numberOfBytes);    } else {      writeInt(length);      outs.write(str,offset,length);      position+=length;    }  }}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("XERCES: " + msg);  }}  }
class C{  private void internalUpdateSymbol(Map<String,String> options,FieldIdEnum field,String key){  FieldConfigBase fieldConfig=fieldConfigManager.get(field);  if (fieldConfig instanceof FieldConfigBoolean) {    internal_updateSymbolBooleanField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigInteger) {    internal_updateSymbolIntegerField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigDouble) {    internal_updateSymbolDoubleField(options,field,key);  } else   if (fieldConfig instanceof FieldConfigEnum) {    internal_updateSymbolEnumField(options,field,key);  } else {    ConsoleManager.getInstance().error(this,"Unsupported field type : " + field + " "+ fieldConfig.getClass().getName());  }}  }
class C{  public String createToken(String ipOfClient){  cleanExpiredTokens();  if (this.tokens.size() < CONCURRENT_TOKEN_LIMIT) {    Token tkn=new Token(ipOfClient);    String tokenuid=UUID.randomUUID().toString();    this.tokens.put(tokenuid,tkn);    return tokenuid;  }  return null;}  }
class C{  public static boolean sameProxyClass(Object proxy1,Object proxy2){  return (proxy1.getClass() == proxy2.getClass() || (Proxy.isProxyClass(proxy2.getClass()) && equalInterfaces(proxy1,proxy2)));}  }
class C{  public static void debugInfo(String msg){  debugInfo(DEFAULT_TAG,msg);}  }
class C{  public List<Sweet> extractSweetsForFeatureWithOpenCV(Mat img,Mat feature,int i){  STEP=10;  DIFFERENCE_LIMIT=60;  Imgproc.pyrDown(feature,feature,new Size(feature.cols() / 2,feature.rows() / 2));  Mat result=createResultMat(img,feature);  result=matchFeature(img,feature,result);  if (i != 5) {    THRESHOLD=0.96;  } else {    THRESHOLD=0.85;  }  Core.MinMaxLocResult mmr=Core.minMaxLoc(result);  Point matchLoc=mmr.maxLoc;  int refX=(int)matchLoc.x + feature.cols() / 2;  int refY=(int)matchLoc.y + feature.rows() / 2;  if (!isFeatureAbsent(img,feature,refX,refY)) {    Imgproc.threshold(result,result,THRESHOLD,255,Imgproc.THRESH_BINARY);    return extractSweetsForFeatureWithOpenCV(result,i);  }  return Collections.emptyList();}  }
class C{  public List<Sequence<K,V>> matchPattern(Event<K,V> event){  int numberOfStateToProcess=computationStages.size();  List<ComputationStage<K,V>> finalStates=new LinkedList<>();  while (numberOfStateToProcess-- > 0) {    ComputationStage<K,V> computationStage=computationStages.poll();    Collection<ComputationStage<K,V>> states=matchPattern(new ComputationContext<>(event,computationStage));    if (states.isEmpty())     removePattern(computationStage); else     finalStates.addAll(getAllFinalStates(states));    computationStages.addAll(getAllNonFinalStates(states));  }  return matchConstruction(finalStates);}  }
class C{  public ConversionXmlProvider(InputStream conversionXml,String conversionXmlPath,IFormat format) throws XmlParsingException {  this.conversion=XmlParser.parse(conversionXml,conversionXmlPath,new String[]{CONVERSION_XSD},CONVERSION_PACKAGE,ConversionType.class);  this.formatType=conversion.getFormats().getMap().get(format.getName());  if (this.formatType == null) {    throw new ConversionException(String.format("'%s' doesn't contain configuration for '%s' format.",conversionXmlPath,format.getName()));  }}  }
class C{  public void onNewIntent(Intent intent){}  }
class C{  private void performReplIfChunkReached(Context context){  if (isReplicated()) {    final int maxMultipleOperChunkSize=_clusterPolicy.m_ReplicationPolicy.m_SyncReplPolicy.getMultipleOperationChunkSize();    IReplicationOutContext replicationContext=context.getReplicationContext();    if (maxMultipleOperChunkSize > 0 && replicationContext != null && replicationContext.pendingSize() >= maxMultipleOperChunkSize)     performReplication(context);  }}  }
class C{  @Override public boolean onMenuItemClick(MenuItem item){switch (item.getItemId()) {case R.id.action_notice:    if (getUserConstant().isLogin()) {      openActivity(UserMessageActivity.class);    } else {      showShortToast(getString(R.string.toast_no_login));    }  break;case R.id.action_about:OpenWebViewUtils.aboutMe(this);break;case R.id.action_search:showShortToast(getString(R.string.toast_adorn));break;case R.id.action_settings:openActivity(SettingActivity.class);break;}return true;}  }
class C{  @Override protected void close0(){}  }
class C{  public static double gaussian(){  double r, x, y;  do {    x=uniform(-1.0,1.0);    y=uniform(-1.0,1.0);    r=x * x + y * y;  } while (r >= 1 || r == 0);  return x * Math.sqrt(-2 * Math.log(r) / r);}  }
class C{  public boolean isInt(String key){  Object val=get(key);  return val instanceof Integer;}  }
class C{  public boolean end(){  return true;}  }
class C{  private void internal_setWMSEnvVarValues(){  if (wmsEnvVarValues == null) {    return;  }  EnvVar imageWidth=getEnvVar(WMS_WIDTH);  if (imageWidth != null) {    if (imageWidth.getValue() == null) {      EnvFunction.setGlobalValue(WMS_WIDTH,wmsEnvVarValues.getImageWidth());    } else {      EnvFunction.setGlobalValue(WMS_WIDTH,imageWidth.getValue());    }  }  EnvVar imageheight=getEnvVar(WMS_HEIGHT);  if (imageheight != null) {    if (imageheight.getValue() == null) {      EnvFunction.setGlobalValue(WMS_HEIGHT,wmsEnvVarValues.getImageHeight());    } else {      EnvFunction.setGlobalValue(WMS_HEIGHT,imageheight.getValue());    }  }  EnvVar bbox=getEnvVar(WMS_BBOX);  if (bbox != null) {    if (bbox.getValue() == null) {      EnvFunction.setGlobalValue(WMS_BBOX,wmsEnvVarValues.getMapBounds());    } else {      EnvFunction.setGlobalValue(WMS_BBOX,bbox.getValue());    }  }}  }
class C{  public int stringLength(){  String sqlTypeUpperCase=sqlType.toUpperCase();  if (sqlTypeUpperCase.indexOf("VARCHAR") >= 0) {    if (sqlTypeUpperCase.indexOf("(") > 0 && sqlTypeUpperCase.indexOf(")") > 0) {      String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf("(") + 1,sqlTypeUpperCase.indexOf(")"));      return Integer.parseInt(length);    } else {      return 255;    }  } else   if (sqlTypeUpperCase.indexOf("CHAR") >= 0) {    if (sqlTypeUpperCase.indexOf("(") > 0 && sqlTypeUpperCase.indexOf(")") > 0) {      String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf("(") + 1,sqlTypeUpperCase.indexOf(")"));      return Integer.parseInt(length);    } else {      return 255;    }  } else   if (sqlTypeUpperCase.indexOf("TEXT") >= 0 || sqlTypeUpperCase.indexOf("LONG") >= 0 || sqlTypeUpperCase.indexOf("CLOB") >= 0) {    return 5000;  }  return 20;}  }
class C{  @Override public String toString(){  return styleWrapper.getStyle();}  }
class C{  @deprecated public CompactCharArray(){  this('\000');}  }
class C{  public <T3>Pattern3<T1,T2,T3> and(Observable<T3> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern3<T1,T2,T3>(o1,o2,other);}  }
class C{  public boolean context_counts(){  return soot.PhaseOptions.getBoolean(options,"context-counts");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_ME_TO_SELF(String value0d,String skillname){  return new SM_SYSTEM_MESSAGE(1200337,value0d,skillname);}  }
class C{  public Disk(Vector position,Vector speed,double radius){  this.position=position;  this.speed=speed;  this.radius=radius;}  }
class C{  private void calcEntryCountIncludingStacks(List<BarEntry> yVals){  mEntryCountStacks=0;  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getYVals();    if (vals == null)     mEntryCountStacks++; else     mEntryCountStacks+=vals.length;  }}  }
class C{  public static <T>OperatorSemaphore<T> semaphoreLatestCache(Observable<Boolean> go){  return new OperatorSemaphore<>(go,true,true);}  }
class C{  private void transform(){  final int m=householderVectors.length;  final double[] z=new double[m];  for (int k=0; k < m - 1; k++) {    final double[] hK=householderVectors[k];    main[k]=hK[k];    double xNormSqr=0;    for (int j=k + 1; j < m; ++j) {      final double c=hK[j];      xNormSqr+=c * c;    }    final double a=(hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);    secondary[k]=a;    if (a != 0.0) {      hK[k + 1]-=a;      final double beta=-1 / (a * hK[k + 1]);      Arrays.fill(z,k + 1,m,0);      for (int i=k + 1; i < m; ++i) {        final double[] hI=householderVectors[i];        final double hKI=hK[i];        double zI=hI[i] * hKI;        for (int j=i + 1; j < m; ++j) {          final double hIJ=hI[j];          zI+=hIJ * hK[j];          z[j]+=hIJ * hKI;        }        z[i]=beta * (z[i] + zI);      }      double gamma=0;      for (int i=k + 1; i < m; ++i) {        gamma+=z[i] * hK[i];      }      gamma*=beta / 2;      for (int i=k + 1; i < m; ++i) {        z[i]-=gamma * hK[i];      }      for (int i=k + 1; i < m; ++i) {        final double[] hI=householderVectors[i];        for (int j=i; j < m; ++j) {          hI[j]-=hK[i] * z[j] + z[i] * hK[j];        }      }    }  }  main[m - 1]=householderVectors[m - 1][m - 1];}  }
class C{  public GroupsEditQuery places(Boolean value){  return unsafeParam("places",value);}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(0);  writeShort(0);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  public static int unbox(Integer integer){  return integer != null ? integer : -1;}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public PulsatorLayout(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  TypedArray attr=context.getTheme().obtainStyledAttributes(attrs,R.styleable.Pulsator4Droid,0,0);  mCount=DEFAULT_COUNT;  mDuration=DEFAULT_DURATION;  mRepeat=DEFAULT_REPEAT;  mStartFromScratch=DEFAULT_START_FROM_SCRATCH;  mColor=DEFAULT_COLOR;  mInterpolator=DEFAULT_INTERPOLATOR;  try {    mCount=attr.getInteger(R.styleable.Pulsator4Droid_pulse_count,DEFAULT_COUNT);    mDuration=attr.getInteger(R.styleable.Pulsator4Droid_pulse_duration,DEFAULT_DURATION);    mRepeat=attr.getInteger(R.styleable.Pulsator4Droid_pulse_repeat,DEFAULT_REPEAT);    mStartFromScratch=attr.getBoolean(R.styleable.Pulsator4Droid_pulse_startFromScratch,DEFAULT_START_FROM_SCRATCH);    mColor=attr.getColor(R.styleable.Pulsator4Droid_pulse_color,DEFAULT_COLOR);    mInterpolator=attr.getInteger(R.styleable.Pulsator4Droid_pulse_interpolator,DEFAULT_INTERPOLATOR);  }  finally {    attr.recycle();  }  mPaint=new Paint();  mPaint.setAntiAlias(true);  mPaint.setStyle(Paint.Style.FILL);  mPaint.setColor(mColor);  build();}  }
class C{  @Override public ConstantRealDistribution makeDistribution(){  return new ConstantRealDistribution(1);}  }
class C{  public static GenericValue findWebSite(Delegator delegator,String webSiteId){  return findWebSite(delegator,webSiteId,true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201050,skilltarget,num0,skillname);}  }
class C{  protected AccountLookupContactsQuery service(AccountLookupContactsService value){  return unsafeParam("service",value);}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  assert getLayoutParams().height == LayoutParams.WRAP_CONTENT : "InfoBar heights cannot be constrained.";  int unspecifiedSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  for (int i=0; i < getChildCount(); i++) {    measureChild(getChildAt(i),unspecifiedSpec,unspecifiedSpec);  }  mWidth=Math.max(MeasureSpec.getSize(widthMeasureSpec),mMinWidth);  mTop=mBottom=0;  placeGroups();  setMeasuredDimension(mWidth,resolveSize(mBottom,heightMeasureSpec));}  }
class C{  private void putLocalNotVersioned(Object key,CacheEntry cacheEntry){  CacheEntry oldCacheEntry;  if (_putFirst) {    oldCacheEntry=_cache.put(key,cacheEntry);  } else {    oldCacheEntry=_cache.replace(key,cacheEntry);  }  if (oldCacheEntry != null) {    if (!(oldCacheEntry instanceof DummyCacheEntry))     _evictionStrategy.discardEntry(oldCacheEntry);  } else   if (_putFirst && _cache.size() >= _sizeLimit) {    _evictionStrategy.evict(this);  }}  }
class C{  public boolean hasProgramEnrollmentStartDate(){  return programEnrollmentStartDate != null;}  }
class C{  @Override public void write(int b){}  }
class C{  private void processJAXPSchemaSource(Hashtable locationPairs) throws IOException {  fJAXPProcessed=true;  if (fJAXPSource == null) {    return;  }  Class componentType=fJAXPSource.getClass().getComponentType();  XMLInputSource xis=null;  String sid=null;  if (componentType == null) {    if (fJAXPSource instanceof InputStream || fJAXPSource instanceof InputSource) {      SchemaGrammar g=(SchemaGrammar)fJAXPCache.get(fJAXPSource);      if (g != null) {        fGrammarBucket.putGrammar(g);        return;      }    }    fXSDDescription.reset();    xis=xsdToXMLInputSource(fJAXPSource);    sid=xis.getSystemId();    fXSDDescription.fContextType=XSDDescription.CONTEXT_PREPARSE;    if (sid != null) {      fXSDDescription.setBaseSystemId(xis.getBaseSystemId());      fXSDDescription.setLiteralSystemId(sid);      fXSDDescription.setExpandedSystemId(sid);      fXSDDescription.fLocationHints=new String[]{sid};    }    SchemaGrammar g=loadSchema(fXSDDescription,xis,locationPairs);    if (g != null) {      if (fJAXPSource instanceof InputStream || fJAXPSource instanceof InputSource) {        fJAXPCache.put(fJAXPSource,g);        if (fIsCheckedFully) {          XSConstraints.fullSchemaChecking(fGrammarBucket,fSubGroupHandler,fCMBuilder,fErrorReporter);        }      }      fGrammarBucket.putGrammar(g);    }    return;  } else   if ((componentType != Object.class) && (componentType != String.class) && (componentType != File.class)&& (componentType != InputStream.class)&& (componentType != InputSource.class)&& !File.class.isAssignableFrom(componentType)&& !InputStream.class.isAssignableFrom(componentType)&& !InputSource.class.isAssignableFrom(componentType)&& !componentType.isInterface()) {    MessageFormatter mf=fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN);    throw new XMLConfigurationException(XMLConfigurationException.NOT_SUPPORTED,mf.formatMessage(fErrorReporter.getLocale(),"jaxp12-schema-source-type.2",new Object[]{componentType.getName()}));  }  Object[] objArr=(Object[])fJAXPSource;  ArrayList jaxpSchemaSourceNamespaces=new ArrayList();  for (int i=0; i < objArr.length; i++) {    if (objArr[i] instanceof InputStream || objArr[i] instanceof InputSource) {      SchemaGrammar g=(SchemaGrammar)fJAXPCache.get(objArr[i]);      if (g != null) {        fGrammarBucket.putGrammar(g);        continue;      }    }    fXSDDescription.reset();    xis=xsdToXMLInputSource(objArr[i]);    sid=xis.getSystemId();    fXSDDescription.fContextType=XSDDescription.CONTEXT_PREPARSE;    if (sid != null) {      fXSDDescription.setBaseSystemId(xis.getBaseSystemId());      fXSDDescription.setLiteralSystemId(sid);      fXSDDescription.setExpandedSystemId(sid);      fXSDDescription.fLocationHints=new String[]{sid};    }    String targetNamespace=null;    SchemaGrammar grammar=fSchemaHandler.parseSchema(xis,fXSDDescription,locationPairs);    if (fIsCheckedFully) {      XSConstraints.fullSchemaChecking(fGrammarBucket,fSubGroupHandler,fCMBuilder,fErrorReporter);    }    if (grammar != null) {      targetNamespace=grammar.getTargetNamespace();      if (jaxpSchemaSourceNamespaces.contains(targetNamespace)) {        MessageFormatter mf=fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN);        throw new java.lang.IllegalArgumentException(mf.formatMessage(fErrorReporter.getLocale(),"jaxp12-schema-source-ns",null));      } else {        jaxpSchemaSourceNamespaces.add(targetNamespace);      }      if (objArr[i] instanceof InputStream || objArr[i] instanceof InputSource) {        fJAXPCache.put(objArr[i],grammar);      }      fGrammarBucket.putGrammar(grammar);    } else {    }  }}  }
class C{  public boolean removeChild(Node n){  nodeCheck(n,true);  return removeChild(n.getRow());}  }
class C{  public static long microsecond2tick(Sequence seq,long micros,TempoCache cache){  if (seq.getDivisionType() != Sequence.PPQ) {    double dTick=(((double)micros) * ((double)seq.getDivisionType()) * ((double)seq.getResolution())) / ((double)1000000);    long tick=(long)dTick;    if (cache != null) {      cache.currTempo=(int)cache.getTempoMPQAt(tick);    }    return tick;  }  if (cache == null) {    cache=new TempoCache(seq);  }  long[] ticks=cache.ticks;  int[] tempos=cache.tempos;  int cacheCount=tempos.length;  int resolution=seq.getResolution();  long us=0;  long tick=0;  int newReadPos=0;  int i=1;  if (micros > 0 && cacheCount > 0) {    while (i < cacheCount) {      long nextTime=us + ticks2microsec(ticks[i] - ticks[i - 1],tempos[i - 1],resolution);      if (nextTime > micros) {        break;      }      us=nextTime;      i++;    }    tick=ticks[i - 1] + microsec2ticks(micros - us,tempos[i - 1],resolution);    if (Printer.debug)     Printer.debug("microsecond2tick(" + (micros / 1000) + ") = "+ tick+ " ticks.");  }  cache.currTempo=tempos[i - 1];  return tick;}  }
class C{  static boolean waitFor(Process process,long timeout) throws InterruptedException {  final int interval=1000 * 1;  long timeWaiting=0;  while (timeWaiting < timeout) {    if (!isProcessAlive(process))     return true;    if (_logger.isDebugEnabled())     _logger.debug("Process is still alive [" + process + "] time to wait ["+ (timeout - timeWaiting)+ "ms], timeout ["+ timeout+ "]ms");    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.fillInStackTrace();      throw e;    }    timeWaiting+=interval;  }  return false;}  }
class C{  private boolean isPopulating(){  return isPopulating;}  }
class C{  public static Document parseDocument(InputStream inputData) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(inputData,false);}  }
class C{  public static void toJasperReport(Grid grid,Map<String,Object> params,OutputStream out) throws Exception {  if (grid == null) {    return;  }  final StringWriter writer=new StringWriter();  render(grid,params,writer,JASPER_TEMPLATE);  String report=writer.toString();  JasperReport jasperReport=JasperCompileManager.compileReport(IOUtils.toInputStream(report,StandardCharsets.UTF_8));  JasperPrint print=JasperFillManager.fillReport(jasperReport,params,grid);  JasperExportManager.exportReportToPdfStream(print,out);}  }
class C{  @Override public Scan open(){  return new ExplainScan(p.open(),schema(),p.toString());}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo restructuringInfo){  return 0;}  }
class C{  public WallSearchQueryWithExtended(VkApiClient client){  super(client,"wall.search",SearchExtendedResponse.class);  extended(true);}  }
class C{  public static Hash merge(Hash a,Hash b){  try {    MessageDigest digest=MessageDigest.getInstance("SHA-256");    digest.update(a.bytes);    return Hash.createFromSafeArray(digest.digest(digest.digest(b.bytes)));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public Matrix4f adjoint(){  return adjoint(null);}  }
class C{  public static synchronized SnapshotsContainer sharedInstance(){  if (sharedInstance == null)   sharedInstance=new SnapshotsContainer();  return sharedInstance;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  final public static long updateCollection(String collection,Object id,V v){  return updateCollection(collection,new BasicDBObject(X.ID,id),v);}  }
class C{  @Override public synchronized boolean retry(ITestResult result){  if (!methods.containsKey(result.getMethod())) {    int maxTries=0;    Annotation[] annotations=result.getMethod().getConstructorOrMethod().getMethod().getAnnotations();    for (    Annotation annotation : annotations) {      if (annotation instanceof RetryTest) {        maxTries=((RetryTest)annotation).maxTries();      }    }    methods.put(result.getMethod(),new AtomicInteger(maxTries));  }  return methods.get(result.getMethod()).getAndDecrement() > 1;}  }
class C{  public String[] serverStatus() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("STAT");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    return r.getMessages();  }}  }
class C{  public double expectedWeightedValue(){  return this.weightedMean;}  }
class C{  private static String generatePassword(){  String password="sldEditor";  StringBuilder sb=new StringBuilder();  sb.append(getUniqueIdentifier());  sb.append(System.getProperty("user.name"));  password=sb.toString();  return password;}  }
class C{  public Result transferPokemon() throws LoginFailedException, RemoteServerException {  ReleasePokemonMessage reqMsg=ReleasePokemonMessage.newBuilder().setPokemonId(getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.RELEASE_POKEMON,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  ReleasePokemonResponse response;  try {    response=ReleasePokemonResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    return ReleasePokemonResponse.Result.FAILED;  }  if (response.getResult() == Result.SUCCESS) {    api.getInventories().getPokebank().removePokemon(this);  }  api.getInventories().getPokebank().removePokemon(this);  api.getInventories().updateInventories();  return response.getResult();}  }
class C{  public void recover(TxnManagerTransaction tmt) throws CannotRecoverException {  try {    for (int i=0; i < parts.length; i++) {      tmt.add(parts[i]);    }    tmt.modifyTxnState(VOTING);  } catch (  InternalManagerException ime) {    throw new CannotRecoverException("CommitRecord: recover: " + ime.getMessage());  }  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"CommitRecord:recover recovered");  }}  }
class C{  public CacheReadOnlyIterator(int fromIndex){  _externalIteratorExhausted=true;  _externalIterator=null;  _bufferIterator=_buffer.listIterator(fromIndex);}  }
class C{  public void updateYawAndPitch(){  long timeNow=System.currentTimeMillis();  long deltaTime=timeNow - this.lastAngularUpdateTime;  this.lastAngularUpdateTime=timeNow;  double overclockScale=50.0 / (double)TimeHelper.serverTickLength;  double deltaYaw=this.yawScale * overclockScale * this.maxAngularVelocityDegreesPerSecond* (deltaTime / 1000.0);  double deltaPitch=this.pitchScale * overclockScale * this.maxAngularVelocityDegreesPerSecond* (deltaTime / 1000.0);  mYaw+=deltaYaw;  mCameraPitch+=deltaPitch;  mCameraPitch=(mCameraPitch < -90) ? -90 : (mCameraPitch > 90 ? 90 : mCameraPitch);}  }
class C{  public void dumpIndex(){  for (  Map.Entry<String,IndexEntry> entry : datasetIndex.entrySet()) {    String dsName=entry.getKey();    TDFDataset ds=getDataset(dsName);    int size=0;    for (    int sz : ds.tileSizes) {      size+=sz;    }    System.out.println(dsName + "\t" + size);    datasetCache.clear();  }}  }
class C{  private void login(){  getCredentials();  disable();  try {    connectAPI.login(emailInput,passInput);  } catch (  BindingException e) {    e.printStackTrace();  }}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public FriendsDeleteAllRequestsQuery(VkApiClient client,UserActor actor){  super(client,"friends.deleteAllRequests",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){  parseNextCharacter(source,pos);  pos.setIndex(pos.getIndex() - 1);}  }
class C{  public MessagesGetChatQueryWithChatIds nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONArray response){}  }
class C{  public DHCPMessage(InetAddress inServername,int inPort){  initialize();  this.destination_IP=inServername;  this.gPort=inPort;}  }
class C{  public static <T1,T2>Pattern2<T1,T2> and(Observable<T1> left,Observable<T2> right){  if (left == null) {    throw new NullPointerException("left");  }  if (right == null) {    throw new NullPointerException("right");  }  return new Pattern2<T1,T2>(left,right);}  }
class C{  public ComponentConfiguration configureComponent(String parsys,String componentName,String configName){  ComponentConfiguration data=componentConfigs.getConfigs(componentName).get(configName.toLowerCase());  if (data == null) {    throw new IllegalArgumentException("Config does not exist: " + configName);  }  getParsys(parsys).configureComponent(componentName,data);  verifyParsysRerendered(parsys);  return data;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public final boolean canSetLong(String field){  return m_table.canSetLong(field);}  }
class C{  protected DurationImpl(final long durationInMilliSeconds){  boolean is0x8000000000000000L=false;  long l=durationInMilliSeconds;  if (l > 0) {    signum=1;  } else   if (l < 0) {    signum=-1;    if (l == 0x8000000000000000L) {      l++;      is0x8000000000000000L=true;    }    l*=-1;  } else {    signum=0;  }  this.years=null;  this.months=null;  this.seconds=BigDecimal.valueOf((l % 60000L) + (is0x8000000000000000L ? 1 : 0),3);  l/=60000L;  this.minutes=(l == 0) ? null : BigInteger.valueOf(l % 60L);  l/=60L;  this.hours=(l == 0) ? null : BigInteger.valueOf(l % 24L);  l/=24L;  this.days=(l == 0) ? null : BigInteger.valueOf(l);}  }
class C{  public void retry(Context context,OCUpload upload){  if (upload != null && context != null) {    Account account=AccountUtils.getOwnCloudAccountByName(context,upload.getAccountName());    retry(context,account,upload);  } else {    throw new IllegalArgumentException("Null parameter!");  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public void clear(){  emptySoftQueue();  Entry tab[]=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  emptySoftQueue();}  }
class C{  private static int countGapsDashDotStar(String sequence){  int count=0;  for (int i=0; i < sequence.length(); i++) {    int a=sequence.charAt(i);    if (a == '-' || a == '.' || a == '*')     count++;  }  return count;}  }
class C{  @Override public boolean next(){  if (isLhsEmpty)   return false;  if (idx.next()) {    ts.moveToRecordId(idx.getDataRecordId());    return true;  } else   if (!(isLhsEmpty=!s.next())) {    resetIndex();    return next();  } else   return false;}  }
class C{  public static Patterns packages(String[] includes){  return new Patterns(includes,new String[]{});}  }
class C{  public void updateProperties(DataElement dataElement){  this.dataElementId=dataElement.getUid();  this.operandId=String.valueOf(dataElementId);  this.operandName=getPrettyName(dataElement,null);  this.legendSet=dataElement.getLegendSet();  this.aggregationType=dataElement.getAggregationType();  this.valueType=dataElement.getValueType();  this.frequencyOrder=dataElement.getFrequencyOrder();  this.aggregationLevels=new ArrayList<>(dataElement.getAggregationLevels());  this.uid=dataElementId;  this.name=getPrettyName(dataElement,null);}  }
class C{  public T waitForResult(long timeout,TimeUnit unit) throws InterruptedException, TimeoutException {  lock.lock();  try {    if (result != null) {      return result;    }    if (timeout == -1) {      resultArrived.await();    } else {      resultArrived.await(timeout,unit);    }    if (result != null) {      return result;    }  }  finally {    lock.unlock();  }  throw new TimeoutException("Timeout waiting for result for [" + timeout + "]");}  }
class C{  public SCostFileReader(String fileName) throws IOException, MaryConfigurationException {  load(fileName);}  }
class C{  public static final void emoteStartFollowing(Npc owner){  owner.unsetState(CreatureState.WALKING);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));}  }
class C{  public static int nChooseK(int n,int k){  k=Math.min(k,n - k);  if (k == 0) {    return 1;  }  int accum=n;  for (int i=1; i < k; i++) {    accum*=(n - i);    accum/=i;  }  return accum / k;}  }
class C{  public ExitMonitorInst newExitMonitorInst(){  return new BExitMonitorInst();}  }
class C{  private void createArcPointer(){  arcParams.gravity=Gravity.TOP | Gravity.START;  arcPointer=new ImageView(this);  arcPointer.setImageResource(R.drawable.dot);  Drawable dot=getDrawableC(R.drawable.dot);  pointerHeight=dot.getIntrinsicHeight() / 2;  pointerWidth=dot.getIntrinsicWidth() / 2;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchPreferenceStyle);}  }
class C{  @Provides @Singleton @AdHocThrottleMapStore MapStore<AdHocThrottle> provideAdHocThrottleMapStore(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle){  CuratorFramework webCurator=withComponentNamespace(curator,"web");  return lifeCycle.manage(new ZkMapStore<>(webCurator,"/adhoc-throttles",new ZkAdHocThrottleSerializer()));}  }
class C{  public void loadMithraCache(List<MithraObjectPortal> portals,int threads) throws MithraBusinessException {  this.configManager.loadMithraCache(portals,threads);}  }
class C{  public Constraint(int row,int col,int colSpan){  if (colSpan < 1) {    throw new IllegalArgumentException("ProportionalLayout column span must be greater than 0");  }  myRow=row;  myCol=col;  myColSpan=colSpan;}  }
class C{  protected void processThermostatFanStateReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Thermostat fan state report value = {}",this.getNode().getNodeId(),value);  FanStateType fanStateType=FanStateType.getFanStateType(value);  if (fanStateType == null) {    logger.error("NODE {}: Unknown fan state Type = {}, ignoring report.",this.getNode().getNodeId(),value);    return;  }  if (!fanStateTypes.contains(fanStateType)) {    fanStateTypes.add(fanStateType);  }  dynamicDone=true;  logger.debug("NODE {}: Thermostat fan state  Report value = {}",this.getNode().getNodeId(),fanStateType.getLabel());  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  public void writeBytes(DataOutputStream dd) throws IOException {  int len;  len=bytes.length;  dd.writeShort(len - 2);  dd.write(bytes,2,len - 2);}  }
class C{  public AbstractSpaceRequestInfo(){}  }
class C{  public Tree(Table nodes,Table edges){  this(nodes,edges,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  public TimeAlignmentPhysicalTableMatcher(DataApiRequest request){  if (request.getIntervals().isEmpty()) {    throw new IllegalStateException("Intervals cannot be empty");  }  logicalTableName=request.getTable().getName();  requestIntervals=request.getIntervals();  isTableAligned=new IsTableStartAlignedWithIntervals(request.getIntervals());}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<>();}  }
class C{  public boolean isValid(){  return getFlightId() != null;}  }
class C{  public static Class resolvePrimitiveClassName(String name){  Class result=null;  if (name != null && name.length() <= 8) {    result=primitiveTypeNameMap.get(name);  }  return result;}  }
class C{  public static int toOffset(IBuffer buffer,int line,int column){  try {    return toDocument(buffer).getLineOffset(line) + column;  } catch (  BadLocationException e) {    e.printStackTrace();  }  return -1;}  }
class C{  public Dimension findByApiName(String dimensionName){  return apiNameToDimension.get(dimensionName);}  }
class C{  public static long stringToMilliseconds(String formattedDate,SimpleDateFormat dateFormat){  try {    return dateFormat.parse(formattedDate).getTime();  } catch (  ParseException e) {    e.printStackTrace();  }  return -1;}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  public FileFilterUtils(){}  }
class C{  public static void linkCyberware(Item item,ICyberware link){  if (item == null)   return;  ItemStack key=new ItemStack(item,1,OreDictionary.WILDCARD_VALUE);  linkedWare.put(key,link);}  }
class C{  public summaryEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    WordMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMin","1"));    WordMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMax","2"));    WordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordDist","3"));    CharMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMin","3"));    CharMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMax","5"));    CharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charDist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    String sWeightMethod=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"use","o");    if (sWeightMethod.equals("o"))     WeightMethod=USE_OCCURENCES_AS_WEIGHT; else     if (sWeightMethod.equals("d"))     WeightMethod=USE_DISTRO_AVERAGE_AS_WEIGHT; else {      printUsage();      System.exit(1);    }    Do=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"do","all");    if ((Do.length() == 0) || ("char_word_all__".indexOf(Do) % 5 != 0)) {      printUsage();      System.exit(0);    }    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  public void loadMeganFile() throws IOException, CanceledException {  clearReads();  getProgressListener().setTasks("Loading MEGAN File",getMeganFile().getName());  if (getMeganFile().hasDataConnector()) {    IConnector connector=getMeganFile().getDataConnector();    SyncArchiveAndDataTable.syncArchive2Summary(meganFile.getFileName(),connector,dataTable,sampleAttributeTable);    if (dataTable.getTotalReads() == 0 && connector.getNumberOfReads() > 0) {      SyncArchiveAndDataTable.syncRecomputedArchive2Summary(getMeganFile().getName(),"merge",dataTable.getBlastMode(),"",connector,dataTable,0);    }    setNumberReads(getDataTable().getTotalReads());    setAdditionalReads(getDataTable().getAdditionalReads());    getActiveViewers().clear();    getActiveViewers().addAll(Arrays.asList(connector.getAllClassificationNames()));    String parameters=getDataTable().getParameters();    if (parameters != null) {      parseParameterString(parameters);    }    getSampleAttributeTable().addAttribute(SampleAttributeTable.HiddenAttribute.Source.toString(),getMeganFile().getFileName(),true);  } else   if (getMeganFile().isMeganSummaryFile()) {    loadMeganSummaryFile();  } else   throw new IOException("File format not (or no longer) supported");  loadColorTableFromDataTable();  lastRecomputeTime=System.currentTimeMillis();  colorsArray=new Color[getNumberOfSamples()];}  }
class C{  public String toString(){  return "MultiFile8BitAudioPlayer";}  }
class C{  public ArrayRealVector(ArrayRealVector v) throws NullArgumentException {  this(v,true);}  }
class C{  protected BoardEditTopicQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  @Override public boolean isAlreadyMatched(){  return false;}  }
class C{  public Module module(String module){  for (  Module m : modules.values()) {    if (m.name.equals(module)) {      return m;    }  }  return null;}  }
class C{  private String defaultString(Symbolizer symbol){  String name="";  if (symbol instanceof PointSymbolizer) {    name=DEFAULT_MARKER_NAME;  } else   if (symbol instanceof TextSymbolizer) {    name=DEFAULT_TEXT_NAME;  } else   if (symbol instanceof LineSymbolizer) {    name=DEFAULT_LINE_NAME;  } else   if (symbol instanceof PolygonSymbolizer) {    name=DEFAULT_POLYGON_NAME;  } else   if (symbol instanceof RasterSymbolizer) {    name=DEFAULT_RASTER_NAME;  }  return name;}  }
class C{  public boolean levelEquals(DataApprovalLevel other){  if (other == null) {    return false;  }  if (level != other.getLevel()) {    return false;  }  if (categoryOptionGroupSet != null ? !categoryOptionGroupSet.equals(other.getCategoryOptionGroupSet()) : other.getCategoryOptionGroupSet() != null) {    return false;  }  return true;}  }
class C{  public SecureSetCounterQuery counter(Integer value){  return unsafeParam("counter",value);}  }
class C{  public static boolean isValidMajorVersion(String apiVersion){  return MAJOR_VERSION_REGEX_PATTERN.matcher(apiVersion).matches();}  }
class C{  public boolean adjustValue(short key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public static void encodeMulticastRequest(MulticastRequest request,DatagramBufferFactory bufs) throws IOException {  try {    LinkedList groups=new LinkedList();    groups.addAll(Arrays.asList(request.getGroups()));    do {      ByteBuffer buf=bufs.newBuffer();      putUtf(buf,request.getHost());      buf.putShort(intToUshort(request.getPort()));      int ngroups=0;      int ngroupsPos=buf.position();      buf.putShort((short)0);      if (!groups.isEmpty()) {        putUtf(buf,(String)groups.removeFirst());        ngroups++;      }      ServiceID[] ids=request.getServiceIDs();      int maxIds=Math.min(ids.length,MAX_USHORT);      int maxIdsLen=SHORT_LEN + maxIds * SERVICE_ID_LEN;      if (buf.remaining() > maxIdsLen && !groups.isEmpty()) {        int slim=buf.limit();        buf.limit(slim - maxIdsLen);        try {          do {            putUtf(buf,(String)groups.getFirst());            groups.removeFirst();            ngroups++;          } while (!groups.isEmpty() && ngroups < MAX_USHORT);        } catch (        BufferOverflowException e) {        }        buf.limit(slim);      }      buf.putShort(ngroupsPos,intToUshort(ngroups));      int nids=Math.min(maxIds,(buf.remaining() - SHORT_LEN) / SERVICE_ID_LEN);      buf.putShort(intToUshort(nids));      for (int i=0; i < nids; i++) {        ServiceID id=ids[i];        buf.putLong(id.getMostSignificantBits());        buf.putLong(id.getLeastSignificantBits());      }    } while (!groups.isEmpty());  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  private static boolean versionGreaterThan(GradleVersion v,int major,int minor,int micro,int beta,int alpha){  if (v == null) {    return true;  }  if (v.getMajor() != major) {    return v.getMajor() > major;  }  if (v.getMinor() != minor) {    return (v.getMinor() > minor);  }  if (v.getMicro() != micro) {    return (v.getMicro() > micro);  }  if (alpha > 0) {    if ("alpha".equals(v.getPreviewType())) {      return (v.getPreview() > alpha);    } else {      return true;    }  }  if (beta > 0) {    if ("beta".equals(v.getPreviewType())) {      return (v.getPreview() > beta);    } else {      return true;    }  }  return false;}  }
class C{  public String toString(){  return Graph.toString();}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  if (action.equals("start")) {    this.callbackContext=callbackContext;    if (this.status != AccelListener.RUNNING) {      this.start();    }  } else   if (action.equals("stop")) {    if (this.status == AccelListener.RUNNING) {      this.stop();    }  } else {    return false;  }  PluginResult result=new PluginResult(PluginResult.Status.NO_RESULT,"");  result.setKeepCallback(true);  callbackContext.sendPluginResult(result);  return true;}  }
class C{  public static LSOutput createLSOutput(DOMImplementationLS impl,OutputStream os,String encoding){  LSOutput out=impl.createLSOutput();  if (os != null) {    out.setByteStream(os);  }  if (encoding != null) {    out.setEncoding(encoding);  }  return out;}  }
class C{  public boolean isCurrentFileBestMatchFor(@NotNull FolderConfiguration config){  if (myResources != null && myFile != null) {    VirtualFile match=myResources.getMatchingFile(myFile,getResourceType(),config);    if (match != null) {      return myFile.equals(match);    } else {      LOG.info("Current file is not a match for the given config.");    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_PROPERTYCHANGE_MAXMEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300873,value0);}  }
class C{  @Override public String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  if (locale != fLocale) {    fResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XIncludeMessages",locale);    fLocale=locale;  }  String msg=fResourceBundle.getString(key);  if (arguments != null) {    try {      msg=java.text.MessageFormat.format(msg,arguments);    } catch (    Exception e) {      msg=fResourceBundle.getString("FormatFailed");      msg+=" " + fResourceBundle.getString(key);    }  }  if (msg == null) {    msg=fResourceBundle.getString("BadMessageKey");    throw new MissingResourceException(msg,"mf.org.apache.xerces.impl.msg.XIncludeMessages",key);  }  return msg;}  }
class C{  public boolean isFullyZoomedOutX(){  return !(mScaleX > mMinScaleX || mMinScaleX > 1f);}  }
class C{  @Override public void selectionChanged(@NotNull SelectionModel model,@NotNull List<NlComponent> selection){  if (selection.isEmpty()) {    return;  }  boolean different=selection.size() != mySelection.size();  if (!different) {    for (    NlComponent component : model.getSelection()) {      if (!mySelection.contains(myWidgetsScene.getWidget(component))) {        different=true;        break;      }    }  }  if (!different) {    return;  }  mySelection.silentClear();  for (  NlComponent component : model.getSelection()) {    ConstraintWidget widget=myWidgetsScene.getWidget(component);    if (widget != null && !widget.isRoot() && !widget.isRootContainer()) {      mySelection.silentAdd(widget);    }  }}  }
class C{  public XmlParser(Context context,int changeLogFileResourceId){  super(context);  this.mChangeLogFileResourceId=changeLogFileResourceId;}  }
class C{  public List<LinkedList<Integer>> shortestPaths(){  Dijkstra dijkstra=new Dijkstra(edges);  List<LinkedList<Integer>> allPaths=dijkstra.shortestPaths();  if (verbose) {    if (allPaths.size() > 16) {      StringBuilder phrase=new StringBuilder();      for (      String syllable : syllables) {        phrase.append(syllable);        phrase.append(' ');      }      System.out.printf("This phrase is too ambiguous, giving %d shortest paths!\n\t%s\n",allPaths.size(),phrase.toString().trim());    }  }  return allPaths;}  }
class C{  void bind(String name,Object value){  Preconditions.checkNotNull(value);  locals.peek().put(name,value);}  }
class C{  void modifiedCharacterData(NodeImpl node,String oldvalue,String value,boolean replace){}  }
class C{  public StringRequest(String url,String charset,Response.Listener<String> listener,Response.ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);  this.charset=charset;}  }
class C{  public static boolean performBuyFromAbyssShop(Npc npc,Player player,TradeList tradeList){  if (!RestrictionsManager.canTrade(player)) {    return false;  }  if (!validateBuyItems(npc,tradeList,player)) {    PacketSendUtility.sendMessage(player,"Some items are not allowed to be selled from this npc");    return false;  }  Storage inventory=player.getInventory();  int freeSlots=inventory.getFreeSlots();  if (!tradeList.calculateAbyssBuyListPrice(player)) {    return false;  }  if (tradeList.getRequiredAp() < 0) {    AuditLogger.info(player,"Posible client hack. tradeList.getRequiredAp() < 0");    PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300927));    return false;  }  if (freeSlots < tradeList.size()) {    PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300762));    return false;  }  AbyssPointsService.addAp(player,-tradeList.getRequiredAp());  Map<Integer,Long> requiredItems=tradeList.getRequiredItems();  for (  Integer itemId : requiredItems.keySet()) {    if (!player.getInventory().decreaseByItemId(itemId,requiredItems.get(itemId))) {      AuditLogger.info(player,"Possible hack. Not removed items on buy in abyss shop.");      return false;    }  }  LimitedItem item=null;  for (  TradeItem tradeItem : tradeList.getTradeItems()) {    item=LimitedItemTradeService.getInstance().getLimitedItem(tradeItem.getItemId(),npc.getNpcId());    if (item != null) {      if (item.getBuyLimit() == 0 && item.getDefaultSellLimit() != 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getSellLimit() - tradeItem.getCount() < 0)         return false;        item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());      } else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() == 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getBuyLimit() - tradeItem.getCount() < 0)         return false;        if (item.getBuyCount().containsKey(player.getObjectId())) {          if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {            item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());          } else           return false;        }      } else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() != 0) {        item.getBuyCount().putIfAbsent(player.getObjectId(),0);        if (item.getBuyLimit() - tradeItem.getCount() < 0 || item.getSellLimit() - tradeItem.getCount() < 0)         return false;        if (item.getBuyCount().containsKey(player.getObjectId())) {          if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {            item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());          } else           return false;        }        item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());      }    }    long count=ItemService.addItem(player,tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount());    if (count != 0) {      log.warn(String.format("CHECKPOINT: itemservice couldnt add all items on buy: %d %d %d %d",player.getObjectId(),tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount(),count));      return false;    }    if (tradeItem.getCount() > 1) {      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300785,new DescriptionId(tradeItem.getItemTemplate().getNameId()),tradeItem.getCount()));    } else {      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300784,new DescriptionId(tradeItem.getItemTemplate().getNameId())));    }  }  return true;}  }
class C{  @Override public void deleteNodes(NodeInterface nodeToTransfer,List<SLDDataInterface> sldDataList){}  }
class C{  @SuppressWarnings({"rawtypes"}) public void fileRead(Component c,final String parent,final String sCurrentLine){  final String[] tokens=sCurrentLine.split("[:]");  if (c instanceof JTextField) {    if (null != c.getName()) {      if (tokens[0].trim().contentEquals(parent)) {        if (tokens[1].trim().contentEquals(c.getName())) {          ((JTextField)c).setText(tokens[2].trim());        }      }    }  }  if (c instanceof JComboBox) {    if (null != c.getName()) {      if (tokens[0].trim().contentEquals(parent)) {        if (tokens[1].trim().contentEquals(c.getName())) {          ((JComboBox)c).setSelectedItem(tokens[2].trim());        }      }    }  }}  }
class C{  public static Object unflatten(Object array,int[] dimensions){  Class<?> type=getType(array);  return unflatten(type,array,dimensions,0);}  }
class C{  public boolean isEmpty(){  return dataMap.isEmpty();}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessInstanceVariableEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  runtimeService.setVariable(processInstance.getId(),"testVariable","The value");  assertEquals(1,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals("The value",event.getVariableValue());  listener.clearEventsReceived();  runtimeService.setVariable(processInstance.getId(),"testVariable","Updated value");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals("Updated value",event.getVariableValue());  listener.clearEventsReceived();  runtimeService.removeVariable(processInstance.getId(),"testVariable");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals(null,event.getVariableValue());  listener.clearEventsReceived();  Map<String,Object> vars=new HashMap<String,Object>();  vars.put("test",123);  vars.put("test2",456);  runtimeService.setVariables(processInstance.getId(),vars);  runtimeService.setVariables(processInstance.getId(),vars);  runtimeService.removeVariables(processInstance.getId(),vars.keySet());  assertEquals(6,listener.getEventsReceived().size());  assertEquals(ActivitiEventType.VARIABLE_CREATED,listener.getEventsReceived().get(0).getType());  assertEquals(ActivitiEventType.VARIABLE_CREATED,listener.getEventsReceived().get(1).getType());  assertEquals(ActivitiEventType.VARIABLE_UPDATED,listener.getEventsReceived().get(2).getType());  assertEquals(ActivitiEventType.VARIABLE_UPDATED,listener.getEventsReceived().get(3).getType());  assertEquals(ActivitiEventType.VARIABLE_DELETED,listener.getEventsReceived().get(4).getType());  assertEquals(ActivitiEventType.VARIABLE_DELETED,listener.getEventsReceived().get(5).getType());  listener.clearEventsReceived();  runtimeService.removeVariable(processInstance.getId(),"unexistingVariable");  assertTrue(listener.getEventsReceived().isEmpty());}  }
class C{  @Override public final String readAsciiString(final int n){  final char ret[]=new char[n];  for (int x=0; x < n; x++) {    ret[x]=(char)readByte();  }  return new String(ret);}  }
class C{  public final void openFallbackInputStream() throws DataFallbackException {  if (inputBuf == null) {    if (LOG.isDebugEnabled())     LOG.debug("openFallbackInputStream() : Opening the reader for the " + dataFile.getName() + "file");    try {      setInput(new BufferedReader(new FileReader(dataFile)));    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    }  }}  }
class C{  public TShortObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public ListModel(){}  }
class C{  private void clear(){  logId=null;  info=null;  mostRecentTimer=null;  times.clear();  threadIds.clear();  MDC.remove(ID_KEY);}  }
class C{  private void clearOldTraffic(){  List<AirMapTraffic> oldAllTraffic=new ArrayList<>();  for (  AirMapTraffic traffic : allTraffic) {    if (trafficExpired(traffic)) {      oldAllTraffic.add(traffic);      allTraffic.remove(traffic);    }  }  notifyRemoved(oldAllTraffic);}  }
class C{  public ServiceAdminImpl(AbstractService service,Exporter exporter) throws RemoteException {  m_service=service;  m_exporter=exporter;  m_thisRemoteRef=(ServiceAdmin)exporter.export(this);}  }
class C{  public void writeFloat(float a) throws IOException {  byteBuffer.putFloat(0,a);  byteBuffer.rewind();  byteBuffer.get(bytes,0,4);  swap(bytes,4);  outs.write(bytes,0,4);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_PVP_PT(int num0){  return new SM_SYSTEM_MESSAGE(1300584,num0);}  }
class C{  public void notifyObservers(){  notifyObservers(null);}  }
class C{  private static Bitmap cropForRotatedImage(Bitmap bitmap,float[] points,Rect rect,int degreesRotated,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY){  if (degreesRotated % 90 != 0) {    int adjLeft=0, adjTop=0, width=0, height=0;    double rads=Math.toRadians(degreesRotated);    int compareTo=degreesRotated < 90 || (degreesRotated > 180 && degreesRotated < 270) ? rect.left : rect.right;    for (int i=0; i < points.length; i+=2) {      if (points[i] >= compareTo - 1 && points[i] <= compareTo + 1) {        adjLeft=(int)Math.abs(Math.sin(rads) * (rect.bottom - points[i + 1]));        adjTop=(int)Math.abs(Math.cos(rads) * (points[i + 1] - rect.top));        width=(int)Math.abs((points[i + 1] - rect.top) / Math.sin(rads));        height=(int)Math.abs((rect.bottom - points[i + 1]) / Math.cos(rads));        break;      }    }    rect.set(adjLeft,adjTop,adjLeft + width,adjTop + height);    if (fixAspectRatio) {      fixRectForAspectRatio(rect,aspectRatioX,aspectRatioY);    }    Bitmap bitmapTmp=bitmap;    bitmap=Bitmap.createBitmap(bitmap,rect.left,rect.top,rect.width(),rect.height());    bitmapTmp.recycle();  }  return bitmap;}  }
class C{  public SlideInItemAnimator(){  this(Gravity.BOTTOM,-1);}  }
class C{  public void writeRequestHeader(String requestType,String uri,String version) throws IOException {  writeHeader(requestType + " " + uri+ " "+ version);}  }
class C{  public static long readSwappedLong(InputStream input) throws IOException {  byte[] bytes=new byte[8];  for (int i=0; i < 8; i++) {    bytes[i]=(byte)read(input);  }  return readSwappedLong(bytes,0);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void startPlayback() throws IllegalStateException {  startPlayback(1);}  }
class C{  public void addArgument(Access node){  List<Access> list=(parent == null || state == null) ? getArgumentListNoTransform() : getArgumentList();  list.addChild(node);}  }
class C{  public void beforeMemberAdded(MemberAddedEvent memberAddedEvent){}  }
class C{  public static long subtractExact(final long a,final long b){  final long sub=a - b;  if ((a ^ b) < 0 && (sub ^ b) >= 0) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_SUBTRACTION,a,b);  }  return sub;}  }
class C{  public static MaxIter unlimited(){  return new MaxIter(Integer.MAX_VALUE);}  }
class C{  public void onPageChanged(View currentView){  mCurrentView=currentView;  requestLayout();}  }
class C{  public static <T>T checkNotNull(T object,String message){  if (object == null) {    throw new NullPointerException(message);  }  return object;}  }
class C{  public void onRelease(K key,R resource){}  }
class C{  public AllSpacePredicate(ISpacePredicate... operands){  super(operands);}  }
class C{  private ImmutableList<BlazeSourceDirectory> calculateSourceDirectoriesForContentRoot(BlazeContext context,WorkspaceRoot workspaceRoot,ArtifactLocationDecoder artifactLocationDecoder,SourceTestConfig sourceTestConfig,WorkspacePath directoryRoot,Collection<SourceArtifact> sourceArtifacts,Collection<JavaPackageReader> javaPackageReaders){  List<SourceArtifact> javaArtifacts=Lists.newArrayList();  for (  SourceArtifact sourceArtifact : sourceArtifacts) {    if (isJavaFile(sourceArtifact.artifactLocation)) {      javaArtifacts.add(sourceArtifact);    }  }  List<BlazeSourceDirectory> result=Lists.newArrayList();  calculateJavaSourceDirectories(context,workspaceRoot,artifactLocationDecoder,directoryRoot,sourceTestConfig,javaArtifacts,javaPackageReaders,result);  Collections.sort(result,BlazeSourceDirectory.COMPARATOR);  return ImmutableList.copyOf(result);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  registrarID=new ServiceID(in);  if (!(server instanceof RemoteMethodControl)) {    throw new InvalidObjectException("server does not implement RemoteMethodControl");  } else   if (!(server instanceof TrustEquivalence)) {    throw new InvalidObjectException("server does not implement TrustEquivalence");  }}  }
class C{  public static Model create(FileDescriptorSet proto,Iterable<String> sources,Iterable<String> experiments,ExtensionPool extensionPool){  return new Model(proto,sources,experiments,extensionPool,new BoundedDiagCollector());}  }
class C{  public static boolean isUpdateOnly(int mod){  return Modifiers.contains(mod,UpdateModifiers.UPDATE_ONLY);}  }
class C{  static public double KL_asymmetric(Distribution p,Distribution q){  double sum=0;  if (p.asTreeMap().size() == q.asTreeMap().size()) {    Iterator iIter=p.asTreeMap().keySet().iterator();    while (iIter.hasNext()) {      Object i=iIter.next();      sum+=p.getValue(i) * Math.log10(p.getValue(i) / q.getValue(i)) / Math.log10(2);    }  } else {    return 0;  }  return sum;}  }
class C{  public void acquireWriteLock(){  for (int i=0; i < _numOfSegments; i++)   _writeLocks[i].lock();}  }
class C{  public Matrix inverse(){  return solve(identity(m,m));}  }
class C{  public int schedule(JobInfo job,int uId){  JobStatus jobStatus=new JobStatus(job,uId);  cancelJob(uId,job.getId());  startTrackingJob(jobStatus);  mHandler.obtainMessage(MSG_CHECK_JOB).sendToTarget();  return JobScheduler.RESULT_SUCCESS;}  }
class C{  private void selectColumn(int col){  for (int row=0; row < dataGrid.getRowCount(); row++)   spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(col));}  }
class C{  public int generateNextWord(Vector vCurrentText){  int iTopic=Model.generateNextLeafTopic();  Distribution dWordsAtSelectedTopic;  if (hmDistroPerTopic.containsKey(iTopic)) {    dWordsAtSelectedTopic=hmDistroPerTopic.get(iTopic);  } else {    dWordsAtSelectedTopic=Model.getTopicTermDistro(Model.getNumOfLevels(),iTopic);    hmDistroPerTopic.put(iTopic,dWordsAtSelectedTopic);  }  Distribution dOutputDistro=new Distribution();  Iterator iWords=dWordsAtSelectedTopic.asTreeMap().keySet().iterator();  while (iWords.hasNext()) {    Object oWord=iWords.next();    vCurrentText.add(oWord);    double dGram=Evaluator.getGrammaticallity(vCurrentText);    vCurrentText.remove(vCurrentText.size() - 1);    if (dGram != 0)     dOutputDistro.setValue(oWord,dWordsAtSelectedTopic.getValue(oWord) * dGram);  }  if (dOutputDistro.asTreeMap().size() == 0)   return ((Integer)dWordsAtSelectedTopic.getNextResult()).intValue();  return ((Integer)dOutputDistro.getNextResult()).intValue();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_HIGH_LEVEL(int value0,int value1){  return new SM_SYSTEM_MESSAGE(1400267,value0,value1);}  }
class C{  public void showMessage(String message){  showError(message);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((carbonTableIdentifier == null) ? 0 : carbonTableIdentifier.hashCode());  result=prime * result + ((storePath == null) ? 0 : storePath.hashCode());  return result;}  }
class C{  public NewMultiArrayExpr newNewMultiArrayExpr(ArrayType type,List<? extends Value> sizes){  return new JNewMultiArrayExpr(type,sizes);}  }
class C{  public InvokeStmt newInvokeStmt(Value op){  return new GInvokeStmt(op);}  }
class C{  public static String mapFullWidthLetterToHalfWidth(String text){}  }
class C{  final public void response(JSON jo){  if (jo == null) {    responseJson("{}");  } else {    responseJson(jo.toString());  }}  }
class C{  public static byte[] decrypt(CipherTextIvMac civ,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(civ.getIv(),civ.getCipherText());  byte[] computedMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  if (constantTimeEq(computedMac,civ.getMac())) {    Cipher aesCipherForDecryption=Cipher.getInstance(CIPHER_TRANSFORMATION);    aesCipherForDecryption.init(Cipher.DECRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(civ.getIv()));    return aesCipherForDecryption.doFinal(civ.getCipherText());  } else {    throw new GeneralSecurityException("MAC stored in civ does not match computed MAC.");  }}  }
class C{  public RecursiveFilter(double[] a){  this.a=a;}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public static void createRMA6FileFromDAA(String creator,String daaFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);  rma6Creator.parseFiles(progressListener);}  }
class C{  protected Class resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {  if (desc.getName().equals("net.jini.io.MarshalledObject")) {    return java.rmi.MarshalledObject.class;  }  return super.resolveClass(desc);}  }
class C{  @Override public JsonObject convert(IFeatureRenderer renderer){  ScaleDependentRenderer scaleDependentRenderer=(ScaleDependentRenderer)renderer;  logger.info(ScaleDependentRendererKeys.SCALE_DEPENDENT_RENDERER);  int index=-1;  try {    JsonObject jsonObject=new JsonObject();    JsonObject rendererObject=new JsonObject();    JsonArray rendererArray=new JsonArray();    rendererObject.addProperty(ScaleDependentRendererKeys.GRADUATED_SYMBOLS,scaleDependentRenderer.isSymbolsAreGraduated());    for (index=0; index < scaleDependentRenderer.getRendererCount(); index++) {      JsonObject jsonValueObject=new JsonObject();      try {        double breakValue=scaleDependentRenderer.getBreak(index);        jsonValueObject.addProperty(ScaleDependentRendererKeys.BREAK,breakValue);      } catch (      AutomationException e) {      }      try {        JsonElement rendererElement=ParseLayer.createRenderer((IFeatureRenderer)scaleDependentRenderer.getRenderer(index));        if (rendererElement != null) {          jsonValueObject.add(ScaleDependentRendererKeys.RENDERER,rendererElement);        }      } catch (      AutomationException e) {      }      rendererArray.add(jsonValueObject);    }    rendererObject.add(ScaleDependentRendererKeys.RENDERER_LISTS,rendererArray);    jsonObject.add(ScaleDependentRendererKeys.SCALE_DEPENDENT_RENDERER,rendererObject);    return jsonObject;  } catch (  AutomationException e) {    logger.error(String.format("ClassBreaksRender index : %d",index));    e.printStackTrace();    logger.error(e.getMessage());  }catch (  IOException e) {    e.printStackTrace();    logger.error(e.getMessage());  }  return null;}  }
class C{  private void finishPrecaching(boolean tryAgainSoon){  Log.v(TAG,"Finish precaching");  shutdownPrecaching(tryAgainSoon);}  }
class C{  private static void print(int values[],int start,int end,int middle,int target){  if (DEBUG_IDS) {    System.out.print(start);    System.out.print(" [");    for (int i=start; i < end; i++) {      if (middle == i) {        System.out.print("!");      }      System.out.print(values[i]);      if (values[i] == target) {        System.out.print("*");      }      if (i < end - 1) {        System.out.print(" ");      }    }    System.out.println("] " + end);  }}  }
class C{  public static Zmat row(Zmat A,int pvt[]) throws JampackException {  int np=pvt.length;  if (np > A.nrow)   throw new JampackException("Inconsistent array dimensions");  A.dirty=true;  for (int k=0; k < np; k++)   for (int j=0; j < A.ncol; j++) {    double t=A.re[k][j];    A.re[k][j]=A.re[pvt[k]][j];    A.re[pvt[k]][j]=t;    t=A.im[k][j];    A.im[k][j]=A.im[pvt[k]][j];    A.im[pvt[k]][j]=t;  }  return A;}  }
class C{  protected void performHighlight(Highlight h,MotionEvent e){  if (h == null || h.equalTo(mLastHighlighted)) {    mChart.highlightValue(null,true);    mLastHighlighted=null;  } else {    mChart.highlightValue(h,true);    mLastHighlighted=h;  }}  }
class C{  public RombergIntegrator(final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,ROMBERG_MAX_ITERATIONS_COUNT);  }}  }
class C{  protected static Object[] tokenize(String pExpression) throws RuleFormatException {  char[] chars=pExpression.toCharArray();  char currentChar;  StringBuffer tempStr=null;  int len=chars.length;  ArrayList buffer=new ArrayList(len);  int i=0;  while (i < len) {    currentChar=chars[i];switch (currentChar) {case Character.SPACE_SEPARATOR:case Character.LINE_SEPARATOR:case Character.PARAGRAPH_SEPARATOR:case '\t':      i++;    break;case '+':  buffer.add("+");i++;break;case '-':buffer.add("-");i++;break;case '*':buffer.add("*");i++;break;case '/':buffer.add("/");i++;break;case '^':buffer.add("^");i++;break;case '(':buffer.add("(");i++;break;case ')':buffer.add(")");i++;break;case '=':buffer.add("=");i++;break;case '<':i++;if (i != len && chars[i] == '=') {buffer.add("<=");i++;} else {buffer.add("<");}break;case '>':i++;if (i != len && chars[i] == '=') {buffer.add(">=");i++;} else {buffer.add(">");}break;case '!':i++;if (i != len && chars[i] == '=') {buffer.add("!=");i++;} else {buffer.add("!");}break;case '&':i++;if (i != len && chars[i] == '&') {buffer.add("&&");i++;} else {buffer.add("&");}break;case '|':i++;if (i != len && chars[i] == '|') {buffer.add("||");i++;} else {buffer.add("|");}break;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':tempStr=new StringBuffer();tempStr.append(currentChar);i++;while (i < len && Character.isDigit(chars[i])) {tempStr.append(chars[i]);i++;}if (i < len && chars[i] == '.') {tempStr.append('.');i++;while (i < len && Character.isDigit(chars[i])) {tempStr.append(chars[i]);i++;}}buffer.add(Double.valueOf(tempStr.toString()));break;case '.':tempStr=new StringBuffer();tempStr.append(currentChar);i++;while (i < len && Character.isDigit(chars[i])) {tempStr.append(chars[i]);i++;}buffer.add(Double.valueOf(tempStr.toString()));break;case '$':tempStr=new StringBuffer("$");i++;while (i < len && Character.isLetter(chars[i])) {tempStr.append(chars[i]);i++;}String invalidStr=tempStr.toString();if (invalidStr.equalsIgnoreCase(RuleConstant.INVALID_KEYWORD.toString())) {buffer.add(RuleConstant.INVALID_KEYWORD.toString());}break;case '#':tempStr=new StringBuffer();i++;while (i < len && Character.isDigit(chars[i])) {tempStr.append(chars[i]);i++;}buffer.add(new RuleInputTagId(tempStr.toString()));break;case 't':case 'f':tempStr=new StringBuffer();tempStr.append(currentChar);i++;while (i < len && Character.isLetter(chars[i])) {tempStr.append(chars[i]);i++;}String str=tempStr.toString();if (str.equalsIgnoreCase("true")) {buffer.add(Boolean.TRUE);} else if (str.equalsIgnoreCase("false")) {buffer.add(Boolean.FALSE);} else {throw new RuleFormatException("Unknown symbol in rule expression: " + str);}break;case '\"':tempStr=new StringBuffer();i++;while (i < len && chars[i] != '\"') {tempStr.append(chars[i]);i++;}if (i == len) {throw new RuleFormatException("Unterminated String (" + tempStr + " ) in expression : "+ pExpression);} else {buffer.add(tempStr.toString());i++;}break;default :i++;}}return buffer.toArray(new Object[0]);}  }
class C{  public static Zdiagmat o(Z z,Zdiagmat D){  Zdiagmat B=new Zdiagmat(D);  for (int i=0; i < D.order; i++) {    B.re[i]=z.re * D.re[i] - z.im * D.im[i];    B.im[i]=z.im * D.re[i] + z.re * D.im[i];  }  return B;}  }
class C{  public GroupsCreateQuery type(GroupsCreateType value){  return unsafeParam("type",value);}  }
class C{  public void union(int root1,int root2){  assert array[root1] < 0;  assert array[root2] < 0;  assert root1 != root2;  if (array[root2] < array[root1]) {    array[root2]+=array[root1];    array[root1]=root2;  } else {    array[root1]+=array[root2];    array[root2]=root1;  }}  }
class C{  private boolean isSpatialSupport(){  try {    jdbcTemplate.execute("create extension postgis;");  } catch (  Exception ex) {  }  try {    String version=jdbcTemplate.queryForObject("select postgis_full_version();",String.class);    return version != null;  } catch (  Exception ex) {    return false;  }}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public static void drawButtonTwitter(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){  if (!visible)   return;  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);  getTextureHandler().bindModTexture("textures/misc/twitter256.png");  getGlStateManager().color(1.0F,1.0F,1.0F);  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);}  }
class C{  public JsonSlurper(JsonSortStrategy sortStrategy,Comparator<Object> variableTypedComparator){  this.variableTypedComparator=variableTypedComparator;  this.sortStrategy=sortStrategy;switch (sortStrategy) {case SORT_BOTH:    sortMaps=true;  sortLists=true;break;case SORT_MAPS:sortMaps=true;sortLists=false;break;case SORT_LISTS:sortMaps=false;sortLists=true;break;case SORT_NONE:default :sortMaps=false;sortLists=false;}}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public static boolean isVicHost(ComputeState computeState){  boolean vic=false;  if (computeState != null && computeState.customProperties != null) {    String driver=computeState.customProperties.get(PROPERTY_NAME_DRIVER);    driver=driver != null ? driver.toLowerCase().trim() : "";    vic=driver.startsWith(VMWARE_VIC_DRIVER1) || driver.startsWith(VMWARE_VIC_DRIVER2);  }  return vic;}  }
class C{  public void loadStock(List<Product> products){  EntityManager em=emf.createEntityManager();  TypedQuery<Stock> queryStock;  List<Stock> resStock;  BigDecimal quantity;  BigDecimal minStock;  BigDecimal lotSize;  Product prod=null;  int lenProdName;  try {    em.getTransaction().begin();    queryStock=em.createQuery("SELECT st FROM Stock st",Stock.class);    resStock=queryStock.getResultList();    if (resStock.size() > 5) {      logger.info(resStock.size() + " Stock already available in the db");    } else {      Stock st=null;      for (int count=0; count < products.size(); count++) {        st=new Stock();        st.setProductId(products.get(count).getProductId());        lenProdName=products.get(count).getName().length();        quantity=BigDecimal.valueOf(lenProdName * 5);        if (lenProdName % 17 == 0) {          minStock=BigDecimal.valueOf(17);        } else {          minStock=BigDecimal.valueOf(lenProdName - 1);        }        lotSize=minStock.multiply(BigDecimal.valueOf(3));        st.setQuantity(quantity);        st.setMinStock(minStock);        st.setLotSize(lotSize);        prod=em.find(Product.class,products.get(count).getProductId());        st.setProduct(prod);        em.persist(st);      }      em.getTransaction().commit();      queryStock=em.createQuery("SELECT st FROM Stock st",Stock.class);      resStock=queryStock.getResultList();      logger.info(resStock.size() + " Stocks loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }}  }
class C{  private boolean sendEquipmentAliveFiltered(final SourceDataTagValue aliveTagValue,final long timestamp){  if (PREVENT_TOO_FREQUENT_EQUIPMENT_ALIVES) {    Long lastEquipmentAliveTimestamp=this.lastEquipmentAlives.get(aliveTagValue.getId());    boolean isSendEquipmentAlive=true;    if (lastEquipmentAliveTimestamp != null) {      long diff=timestamp - lastEquipmentAliveTimestamp;      long halfTime=Math.round(this.aliveTagInterval / 2.0);      if (diff < halfTime) {        if (this.equipmentLogger.isDebugEnabled()) {          this.equipmentLogger.debug(format("this EquipmentAlive of equipment %s will be skipped " + "and will not be sent the server due to enabled equipment alive filtering policy",this.confName));        }        isSendEquipmentAlive=false;      }    }    if (isSendEquipmentAlive) {      doSendEquipmentAlive(aliveTagValue);      this.lastEquipmentAlives.put(aliveTagValue.getId(),timestamp);      return true;    } else {      return false;    }  } else {    doSendEquipmentAlive(aliveTagValue);    return true;  }}  }
class C{  private static void sort(DefaultMutableTreeNode node){  for (int i=0; i < node.getChildCount() - 1; i++) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)node.getChildAt(i);    String nt=child.getUserObject().toString();    for (int j=i + 1; j <= node.getChildCount() - 1; j++) {      DefaultMutableTreeNode prevNode=(DefaultMutableTreeNode)node.getChildAt(j);      String np=prevNode.getUserObject().toString();      if (nt.compareToIgnoreCase(np) > 0) {        node.insert(child,j);        node.insert(prevNode,i);      }    }    if (child.getChildCount() > 0) {      sort(child);    }  }  for (int i=0; i < node.getChildCount() - 1; i++) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)node.getChildAt(i);    for (int j=i + 1; j <= node.getChildCount() - 1; j++) {      DefaultMutableTreeNode prevNode=(DefaultMutableTreeNode)node.getChildAt(j);      if (!prevNode.isLeaf() && child.isLeaf()) {        node.insert(child,j);        node.insert(prevNode,i);      }    }  }}  }
class C{  public FactoryConfigurationError(java.lang.Exception e){  nested=e;}  }
class C{  protected void warmStart(List<ContactConstraint> contactConstraints,Step step,Settings settings){  double ratio=1.0 / step.getDeltaTimeRatio();  int size=contactConstraints.size();  for (int i=0; i < size; i++) {    ContactConstraint contactConstraint=contactConstraints.get(i);    Body b1=contactConstraint.getBody1();    Body b2=contactConstraint.getBody2();    Mass m1=b1.getMass();    Mass m2=b2.getMass();    double invM1=m1.getInverseMass();    double invM2=m2.getInverseMass();    double invI1=m1.getInverseInertia();    double invI2=m2.getInverseInertia();    Vector2 N=contactConstraint.normal;    Vector2 T=contactConstraint.tangent;    List<Contact> contacts=contactConstraint.getContacts();    int cSize=contacts.size();    if (cSize == 0)     continue;    for (int j=0; j < cSize; j++) {      Contact contact=contacts.get(j);      contact.jn*=ratio;      contact.jt*=ratio;      Vector2 J=new Vector2(N.x * contact.jn + T.x * contact.jt,N.y * contact.jn + T.y * contact.jt);      b1.getLinearVelocity().add(J.x * invM1,J.y * invM1);      b1.setAngularVelocity(b1.getAngularVelocity() + invI1 * contact.r1.cross(J));      b2.getLinearVelocity().subtract(J.x * invM2,J.y * invM2);      b2.setAngularVelocity(b2.getAngularVelocity() - invI2 * contact.r2.cross(J));    }  }}  }
class C{  private void updateDomObj(WXComponent component){  if (component == null) {    return;  }  WXDomObject domObject=mRegistry.get(component.getRef());  if (domObject == null) {    return;  }  domObject.old();  component.updateDom(domObject.clone());  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=0; i < count; ++i) {      updateDomObj(container.getChild(i));    }  }}  }
class C{  public AuthenticationPermission(String name,String actions){  super(name);  this.actions=actions;  init();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  void saveToStream(DataOutputStream out) throws IOException {  out.writeUTF(mUrl);  out.writeUTF(mName);  out.writeUTF(mValue);  out.writeUTF(mDomain);  out.writeUTF(mPath);  out.writeLong(mCreation);  out.writeLong(mExpiration);  out.writeLong(mLastAccess);  out.writeBoolean(mSecure);  out.writeBoolean(mHttpOnly);  out.writeBoolean(mFirstPartyOnly);  out.writeInt(mPriority);}  }
class C{  public Lex(String code){  this(new StringReader(code));}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  public static void logSearchPanelLoadDuration(boolean wasPrefetch,long durationMs){  if (wasPrefetch) {    RecordHistogram.recordMediumTimesHistogram("Search.ContextualSearchDurationPrefetched",durationMs,TimeUnit.MILLISECONDS);  } else {    RecordHistogram.recordMediumTimesHistogram("Search.ContextualSearchDurationNonPrefetched",durationMs,TimeUnit.MILLISECONDS);  }  int code=!wasPrefetch ? NOT_PREFETCHED : (durationMs == 0 ? PREFETCHED_FULLY_LOADED : PREFETCHED_PARIALLY_LOADED);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchPrefetchSummary",code,PREFETCH_BOUNDARY);}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public void smoothOpenMenu(int position,@DirectionMode int direction,int duration){  if (mOldSwipedLayout != null) {    if (mOldSwipedLayout.isMenuOpen()) {      mOldSwipedLayout.smoothCloseMenu();    }  }  ViewHolder vh=findViewHolderForAdapterPosition(position);  if (vh != null) {    View itemView=getSwipeMenuView(vh.itemView);    if (itemView != null && itemView instanceof SwipeMenuLayout) {      mOldSwipedLayout=(SwipeMenuLayout)itemView;      if (direction == RIGHT_DIRECTION) {        mOldTouchedPosition=position;        mOldSwipedLayout.smoothOpenRightMenu(duration);      } else       if (direction == LEFT_DIRECTION) {        mOldTouchedPosition=position;        mOldSwipedLayout.smoothOpenLeftMenu(duration);      }    }  }}  }
class C{  public AudioEditQuery genreId(AudioGenre value){  return unsafeParam("genre_id",value);}  }
class C{  public NotesAddQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public static void updateOnlineResources(URL resourceLocator,StyledLayerDescriptor sld){  List<String> externalImageList=new ArrayList<String>();  internal_updateOnlineResources(resourceLocator,sld,externalImageList);}  }
class C{  public void addTab(int index,ITab tab){  JPanel panel=(JPanel)tab;  tabbedPane.insertTab(tab.getLabel(),null,panel,tab.getLabel(),index);  if (PCoA_TAB_INDEX >= index)   PCoA_TAB_INDEX++;  if (NJ_TAB_INDEX >= index)   NJ_TAB_INDEX++;  if (NNET_TAB_INDEX >= index)   NNET_TAB_INDEX++;  if (UPGMA_TAB_INDEX >= index)   UPGMA_TAB_INDEX++;  if (MATRIX_TAB_INDEX >= index)   MATRIX_TAB_INDEX++;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  ClusterViewer viewer=getViewer();  np.matchIgnoreCase("rotate axis=");  String axis=np.getWordMatchesIgnoringCase("x y z");  np.matchIgnoreCase("angle=");  double angle=np.getDouble();  Matrix3D matrix=viewer.getPcoaTab().getTransformation3D();  if (axis.equalsIgnoreCase("x")) {    matrix.rotateX(angle);  } else   if (axis.equalsIgnoreCase("y")) {    matrix.rotateY(angle);  } else   if (axis.equalsIgnoreCase("z")) {    matrix.rotateZ(angle);  }  viewer.getPcoaTab().updateTransform(true);  if (viewer.getPcoaTab().isShowGroupsAsConvexHulls())   viewer.getPcoaTab().computeConvexHullsAndEllipsesForGroups(viewer.getGroup2Nodes());  np.matchIgnoreCase(";");}  }
class C{  public PhotosCreateAlbumQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(this.getModifiers());}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public long start(){  t=System.currentTimeMillis();  return t;}  }
class C{  public void putAllEnv(Map<String,? extends Object> values){  for (  Map.Entry<String,? extends Object> entry : values.entrySet()) {    this.putEnv(entry.getKey(),entry.getValue());  }}  }
class C{  @Override public String toString(){  StringBuilder outBuffer=new StringBuilder();  String endl="\n";  outBuffer.append("StreamingStatistics:").append(endl);  outBuffer.append("n: ").append(getN()).append(endl);  outBuffer.append("min: ").append(getMin()).append(endl);  outBuffer.append("max: ").append(getMax()).append(endl);  outBuffer.append("sum: ").append(getSum()).append(endl);  outBuffer.append("mean: ").append(getMean()).append(endl);  outBuffer.append("variance: ").append(getVariance()).append(endl);  outBuffer.append("population variance: ").append(getPopulationVariance()).append(endl);  outBuffer.append("standard deviation: ").append(getStandardDeviation()).append(endl);  outBuffer.append("geometric mean: ").append(getGeometricMean()).append(endl);  outBuffer.append("second moment: ").append(getSecondMoment()).append(endl);  outBuffer.append("sum of squares: ").append(getSumOfSquares()).append(endl);  outBuffer.append("sum of logs: ").append(getSumOfLogs()).append(endl);  return outBuffer.toString();}  }
class C{  @Override public void startGeneralEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  try {    if (augs != null && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fContentHandler != null) {        fContentHandler.skippedEntity(name);      }    } else {      if (fLexicalHandler != null) {        fLexicalHandler.startEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200481,skillcaster,skilltarget,skillname);}  }
class C{  public static AlertDialog createOkDialog(final Activity activity,final String title,final String text,final DialogInterface.OnClickListener okListener){  AlertDialog dialog=new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(android.R.string.ok,okListener).create();  dialog.setOwnerActivity(activity);  return dialog;}  }
class C{  protected Resolver queryResolver(String resolver,String command,String arg1,String arg2){  InputStream iStream=null;  String RFC2483=resolver + "?command=" + command+ "&format=tr9401&uri="+ arg1+ "&uri2="+ arg2;  String line=null;  try {    URL url=new URL(RFC2483);    URLConnection urlCon=url.openConnection();    urlCon.setUseCaches(false);    Resolver r=(Resolver)newCatalog();    String cType=urlCon.getContentType();    if (cType.indexOf(";") > 0) {      cType=cType.substring(0,cType.indexOf(";"));    }    r.parseCatalog(cType,urlCon.getInputStream());    return r;  } catch (  CatalogException cex) {    if (cex.getExceptionType() == CatalogException.UNPARSEABLE) {      catalogManager.debug.message(1,"Unparseable catalog: " + RFC2483);    } else     if (cex.getExceptionType() == CatalogException.UNKNOWN_FORMAT) {      catalogManager.debug.message(1,"Unknown catalog format: " + RFC2483);    }    return null;  }catch (  MalformedURLException mue) {    catalogManager.debug.message(1,"Malformed resolver URL: " + RFC2483);    return null;  }catch (  IOException ie) {    catalogManager.debug.message(1,"I/O Exception opening resolver: " + RFC2483);    return null;  }}  }
class C{  public static int export(String classification,Collection<Integer> classIds,IConnector connector,String fileName,ProgressListener progressListener) throws IOException, CanceledException {  int total=0;  try {    progressListener.setTasks("Export","Writing selected reads");    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){      int maxProgress=100000 * classIds.size();      int currentProgress;      progressListener.setMaximum(maxProgress);      progressListener.setProgress(0);      int countClassIds=0;      for (      Integer classId : classIds) {        countClassIds++;        currentProgress=100000 * countClassIds;        IReadBlockIterator it=connector.getReadsIterator(classification,classId,0,10000,true,false);        long progressIncrement=100000 / (it.getMaximumProgress() + 1);        while (it.hasNext()) {          total++;          write(it.next(),w);          progressListener.setProgress(currentProgress);          currentProgress+=progressIncrement;        }      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return total;}  }
class C{  public XMLResourceIdentifierImpl(String publicId,String literalSystemId,String baseSystemId,String expandedSystemId,String namespace){  setValues(publicId,literalSystemId,baseSystemId,expandedSystemId,namespace);}  }
class C{  private static void printStartMessage(String host,String port,String logFilePath){  LOG.info(ConfigProperties.MINDMAPS_ASCII);  LOG.info("Mindmaps Engine is ready. Listening on [http://" + host + ":"+ port+ "]");  LOG.info("Mindmaps LOG file located at [" + logFilePath + "]");}  }
class C{  public Table<C,R,V> computeTransposedTable(){  final Table<C,R,V> transposed=new Table<>();  for (  R row : rowKeySet())   for (  C col : columnKeySet())   transposed.put(col,row,get(row,col));  return transposed;}  }
class C{  public ImageLoader(int height,int width,int channels){  super();  this.height=height;  this.width=width;  this.channels=channels;}  }
class C{  public int calculateCount(String desktopstate,int concurrentvms,int vmsperhost,double vcenterhamultiplier){  int i=0;  Float f=null;  if (desktopstate.equalsIgnoreCase("on")) {    f=((float)concurrentvms / (float)vmsperhost);  } else   if (desktopstate.equalsIgnoreCase("off")) {    f=((float)concurrentvms / (float)vmsperhost);  } else   if (desktopstate.equalsIgnoreCase("suspend")) {    f=((float)concurrentvms / (float)vmsperhost);  } else {    f=((float)concurrentvms / (float)vmsperhost);  }  f=(float)Math.ceil(f * 2) / 2;  f=(float)Math.round(f);  f=(float)(f * vcenterhamultiplier);  f=(float)Math.ceil(f * 2) / 2;  final Float ftemp=(float)0.5;  if (ftemp == (f % 1)) {    f+=ftemp;  }  i=f.intValue();  return i;}  }
class C{  public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String key,String switchName){  Object value=properties.get(key);  if (value != null) {    if (value.getClass().isArray()) {      Object[] valueArray=(Object[])value;      for (      Object valueArrayElement : valueArray) {        withLongSwitch(switchName,valueArrayElement);      }    } else {      withLongSwitch(switchName,value);    }  }  return this;}  }
class C{  public static boolean isURI(String tagName,String attrName){  return (attrName.equalsIgnoreCase("href") || attrName.equalsIgnoreCase("src"));}  }
class C{  public Spring(ForceItem fi1,ForceItem fi2,float k,float len){  item1=fi1;  item2=fi2;  coeff=k;  length=len;}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  private boolean isDisableIfEmpty(ModelMenuItem menuItem,Map<String,Object> context){  Boolean disabledDirect=menuItem.getDisabled(context);  if (disabledDirect != null) {    return disabledDirect;  }  boolean disabled=false;  String disableIfEmpty=menuItem.getDisableIfEmpty();  if (UtilValidate.isNotEmpty(disableIfEmpty)) {    List<String> keys=StringUtil.split(disableIfEmpty,"|");    for (    String key : keys) {      Object obj=context.get(key);      if (obj == null) {        disabled=true;        break;      }    }  }  return disabled;}  }
class C{  public StatementProcessor(){}  }
class C{  public Result removeItem(ItemId id,int quantity) throws RemoteServerException, LoginFailedException {  Item item=getItem(id);  if (item.getCount() < quantity) {    throw new IllegalArgumentException("You cannont remove more quantity than you have");  }  RecycleInventoryItemMessage msg=RecycleInventoryItemMessage.newBuilder().setItemId(id).setCount(quantity).build();  ServerRequest serverRequest=new ServerRequest(RequestType.RECYCLE_INVENTORY_ITEM,msg);  api.getRequestHandler().sendServerRequests(serverRequest);  RecycleInventoryItemResponseOuterClass.RecycleInventoryItemResponse response;  try {    response=RecycleInventoryItemResponseOuterClass.RecycleInventoryItemResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  if (response.getResult() == RecycleInventoryItemResponseOuterClass.RecycleInventoryItemResponse.Result.SUCCESS) {    item.setCount(response.getNewCount());  }  return response.getResult();}  }
class C{  public int error_sym(){  return 1;}  }
class C{  public void removeEntrySA(Context context,IEntryHolder entry,IServerTypeDesc typeDesc,boolean fromReplication,boolean origin,EntryRemoveReasonCodes removeReason) throws SAException {  removeEntrySA(context,entry,typeDesc,fromReplication,origin,removeReason,false,false,false);}  }
class C{  public Book toEntity(BookDTO dto,int depth){  if (dto == null) {    return null;  }  Book book=new Book();  book.setId(dto.id);  book.setTitle(dto.title);  book.setSummary(dto.summary);  book.setPublicationDate(dto.publicationDate);  book.setBestSeller(dto.bestSeller);  book.setPrice(dto.price);  if (depth-- > 0) {    book.setAuthor(authorDTOService.toEntity(dto.author,depth));  }  return book;}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public boolean isUpperLimitEnabled(){  return this.upperLimitEnabled;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @NotNull public Face findSingleFace(@NotNull String imageUrl){  List<Face> faces=faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();  if (Utils.isEmpty(faces) || faces.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(faces) ? 0 : faces.size(),"a single face was not present");  return faces.get(0);}  }
class C{  public boolean isIncludeGlobalWorld(){  return this.includeGlobalWorld;}  }
class C{  @NonNull public static StorableFence or(@NonNull Collection<StorableFence> fences){  StorableFence metaFence=new StorableFence(Type.META);  metaFence.mOrFences.addAll(fences);  return metaFence;}  }
class C{  public void put(String key,Object ser){  put(key,ser,null);  put("","",new Base64Cipher());}  }
class C{  public boolean isSelected(@NotNull NlComponent component){  return mySelection.contains(component);}  }
class C{  private void sendIntroductionRequest(Peer peer) throws IOException {  IntroductionRequest request=new IntroductionRequest(hashId,peer.getAddress(),connectionType,networkOperator);  sendMesssage(request,peer);}  }
class C{  public boolean subdivide(S2Cell children[]){  if (cellId.isLeaf()) {    return false;  }  R2Vector uvMid=getCenterUV();  S2CellId id=cellId.childBegin();  for (int pos=0; pos < 4; ++pos, id=id.next()) {    S2Cell child=children[pos];    child.face=face;    child.level=(byte)(level + 1);    child.orientation=(byte)(orientation ^ S2.posToOrientation(pos));    child.cellId=id;    int ij=S2.posToIJ(orientation,pos);    for (int d=0; d < 2; ++d) {      int m=1 - ((ij >> (1 - d)) & 1);      child.uv[d][m]=uvMid.get(d);      child.uv[d][1 - m]=uv[d][1 - m];    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_USE_VENDOR(String value0){  return new SM_SYSTEM_MESSAGE(1400398,value0);}  }
class C{  @Override public void onRequestCompleted(int code,Object result){  progressDialog.cancel();  if (code == ConnectAPI.SPEAKERS_CODE) {    SpeakersResult speakersResult=(SpeakersResult)result;    if (speakersResult != null && speakersResult.getStatus() == ErrorDefinitions.CODE_SUCCESS) {      DataHandler.getInstance(getContext()).saveSpeakers(speakersResult.getSpeakers());      setSpeakers();    } else {      showMessage(speakersResult.getMessage());    }  }}  }
class C{  public static OcrHelper init(String dataPath,int widthPixels,int heightPixels,String nidoFemale,String nidoMale,boolean isPokeSpamEnabled){  if (instance == null) {    instance=new OcrHelper(dataPath,widthPixels,heightPixels,nidoFemale,nidoMale,isPokeSpamEnabled);  }  return instance;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public CommandBuilder withArgumentIfPresent(Map<String,Object> properties,String... keys){  for (  String key : keys) {    Object value=properties.get(key);    if (value != null) {      if (value.getClass().isArray()) {        withArguments(ArrayUtils.toStringArray(value));      } else {        withArguments(value.toString());      }    }  }  return this;}  }
class C{  private static boolean isLayoutLibSupported(IAndroidTarget target){  if (target instanceof PlatformTarget) {    int layoutlibVersion=((PlatformTarget)target).getLayoutlibApi();    return layoutlibVersion <= Bridge.API_CURRENT;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200310,skillname);}  }
class C{  @PostConstruct public void init(){  commandExecutionManager.registerAsPersistenceListener(this);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());}  }
class C{  @Override public IBinder onBind(Intent arg0){  return mBinder;}  }
class C{  public PSVIAttrNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName){  super(ownerDocument,namespaceURI,qualifiedName);}  }
