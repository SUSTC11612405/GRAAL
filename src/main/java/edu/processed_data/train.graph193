class C{  public ActionQueueThread(String name,int maxSizeBeforeBlock,int completePercentUponBlocking){  this(name);  this.nonBlockingSize=maxSizeBeforeBlock;  this.freeFactor=1.0 - completePercentUponBlocking / 100.0;}  }
class C{  protected int writeUTF16Surrogate(char c,char ch[],int i,int end) throws IOException {  int codePoint=0;  if (i + 1 >= end) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c)}));  }  final char high=c;  final char low=ch[i + 1];  if (!Encodings.isLowUTF16Surrogate(low)) {    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c) + " " + Integer.toHexString(low)}));  }  final java.io.Writer writer=m_writer;  if (m_encodingInfo.isInEncoding(c,low)) {    writer.write(ch,i,2);  } else {    final String encoding=getEncoding();    if (encoding != null) {      codePoint=Encodings.toCodePoint(high,low);      writer.write('&');      writer.write('#');      writer.write(Integer.toString(codePoint));      writer.write(';');    } else {      writer.write(ch,i,2);    }  }  return codePoint;}  }
class C{  public ExecutionSlot basicGetReference(){  return reference;}  }
class C{  public static WildcardTypeImpl make(FieldTypeSignature[] ubs,FieldTypeSignature[] lbs,GenericsFactory f){  return new WildcardTypeImpl(ubs,lbs,f);}  }
class C{  public WarningMessage(int importance,String message,Object data,CSTNode context,SourceUnit owner){  super(message,data,context,owner);  this.importance=importance;}  }
class C{  public Rect guaranteedSafeCrop(int width,int height,@Nullable Rect crop){  if (crop == null) {    return new Rect(0,0,width,height);  }  Rect safeCrop=new Rect(crop);  if (crop.top > crop.bottom || crop.left > crop.right || crop.width() <= 0 || crop.height() <= 0) {    return new Rect(0,0,0,0);  }  safeCrop.left=Math.max(safeCrop.left,0);  safeCrop.top=Math.max(safeCrop.top,0);  safeCrop.right=Math.max(Math.min(safeCrop.right,width),safeCrop.left);  safeCrop.bottom=Math.max(Math.min(safeCrop.bottom,height),safeCrop.top);  if (safeCrop.width() <= 0 || safeCrop.height() <= 0) {    return new Rect(0,0,0,0);  }  return safeCrop;}  }
class C{  public LargeObjectScanner<T> scanner() throws IOException {  return new LargeObjectScanner<T>(this);}  }
class C{  public void stop(){  byte[] stopData=new byte[0];  this.upload(stopData);}  }
class C{  String convertNumberToI18N(String numericText){  if (zeroDigit == '0') {    return numericText;  }  int diff=zeroDigit - '0';  char[] array=numericText.toCharArray();  for (int i=0; i < array.length; i++) {    array[i]=(char)(array[i] + diff);  }  return new String(array);}  }
class C{  public String attrIndexRangeTipText(){  return "The attribute range(s).";}  }
class C{  public static ScreenOverlayType writeMatsimKMLLogo(final KMZWriter writer) throws IOException {  writer.addNonKMLFile(MatsimResource.getAsInputStream("matsim_logo_transparent.png"),"matsimLogo.png");  ObjectFactory kmlObjectFactory=new ObjectFactory();  ScreenOverlayType matsimLogo=kmlObjectFactory.createScreenOverlayType();  LinkType icon=kmlObjectFactory.createLinkType();  icon.setHref("./matsimLogo.png");  matsimLogo.setIcon(icon);  matsimLogo.setName("Matsim Logo");  Vec2Type overlayXY=kmlObjectFactory.createVec2Type();  overlayXY.setX(1.0);  overlayXY.setY(-0.7);  overlayXY.setXunits(UnitsEnumType.FRACTION);  overlayXY.setYunits(UnitsEnumType.FRACTION);  matsimLogo.setOverlayXY(overlayXY);  Vec2Type screenXY=kmlObjectFactory.createVec2Type();  screenXY.setX(0.85);  screenXY.setY(25.0);  screenXY.setXunits(UnitsEnumType.FRACTION);  screenXY.setYunits(UnitsEnumType.PIXELS);  matsimLogo.setScreenXY(screenXY);  Vec2Type sizeXY=kmlObjectFactory.createVec2Type();  sizeXY.setX(0.14);  sizeXY.setY(0.0);  sizeXY.setXunits(UnitsEnumType.FRACTION);  sizeXY.setYunits(UnitsEnumType.FRACTION);  matsimLogo.setSize(sizeXY);  matsimLogo.setDrawOrder(Integer.MAX_VALUE);  return matsimLogo;}  }
class C{  private KeyPairGeneratorSpi nextSpi(KeyPairGeneratorSpi oldSpi,boolean reinit){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      try {        Object inst=s.newInstance(null);        if (inst instanceof KeyPairGeneratorSpi == false) {          continue;        }        if (inst instanceof KeyPairGenerator) {          continue;        }        KeyPairGeneratorSpi spi=(KeyPairGeneratorSpi)inst;        if (reinit) {          if (initType == I_SIZE) {            spi.initialize(initKeySize,initRandom);          } else           if (initType == I_PARAMS) {            spi.initialize(initParams,initRandom);          } else           if (initType != I_NONE) {            throw new AssertionError("KeyPairGenerator initType: " + initType);          }        }        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      Exception e) {      }    }    disableFailover();    return null;  }}  }
class C{  public static LatLon interpolateRhumb(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (LatLon.equals(value1,value2))   return value1;  double t=WWMath.clamp(amount,0d,1d);  Angle azimuth=LatLon.rhumbAzimuth(value1,value2);  Angle distance=LatLon.rhumbDistance(value1,value2);  Angle pathLength=Angle.fromDegrees(t * distance.degrees);  return LatLon.rhumbEndPosition(value1,azimuth,pathLength);}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime\tdepartures_all\tarrivals_all\tstuck_all\ten-route_all");  for (  String legMode : this.data.keySet()) {    stream.print("\tdepartures_" + legMode + "\tarrivals_"+ legMode+ "\ten-route_"+ legMode);  }  stream.print("\n");  int allEnRoute=0;  int[] modeEnRoute=new int[this.data.size()];  DataFrame allModesData=getAllModesData();  for (int i=0; i < allModesData.countsDep.length; i++) {    allEnRoute=allEnRoute + allModesData.countsDep[i] - allModesData.countsArr[i];    stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);    stream.print("\t" + allModesData.countsDep[i] + "\t"+ allModesData.countsArr[i]+ "\t"+ "\t"+ allEnRoute);    int mode=0;    for (    DataFrame dataFrame : this.data.values()) {      modeEnRoute[mode]=modeEnRoute[mode] + dataFrame.countsDep[i] - dataFrame.countsArr[i];      stream.print("\t" + dataFrame.countsDep[i] + "\t"+ dataFrame.countsArr[i]+ "\t"+ "\t"+ modeEnRoute[mode]);      mode++;    }    stream.print("\n");  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.587 -0500",hash_original_method="E6F2985648B73053281BC07D9BFD7460",hash_generated_method="AE67E77026FB90BEAB4F6A3069598601") public void writeExternal(ObjectOutput objectOutput) throws IOException {  objectOutput.writeBoolean(areaCodeMapStorage.isFlyweight());  areaCodeMapStorage.writeExternal(objectOutput);}  }
class C{  public static void appendCriterium(final JCriteriumTree jtree,final CCriteriumTree ctree,final CConditionBox conditionBox){  final TreePath path=jtree.getSelectionPath();  if (path != null) {    final JCriteriumTreeNode criteriumTreeNode=(JCriteriumTreeNode)path.getLastPathComponent();    final CCriteriumTreeNode parent=CCriteriumFunctions.findNode(ctree.getRoot(),criteriumTreeNode.getCriterium());    final CCriteriumWrapper selectedItem=(CCriteriumWrapper)conditionBox.getSelectedItem();    if (selectedItem != null) {      final ICriterium criterium=selectedItem.getObject().createCriterium();      if (criterium != null) {        appendCriterium(ctree,parent,criterium);      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isUpdatable(){  return isUpdatable;}  }
class C{  public EventType(String name,String description,EventAttribute[] attributes){  this.index=getNextIndex();  this.name=name;  this.description=description;  this.attributes=attributes;  int ic=0;  int lc=0;  int dc=0;  int sc=0;  for (int i=0; i < attributes.length; i++) {    ScalarType at=attributes[i].getType();    if (at.equals(ScalarType.INT)) {      ic++;      checkOrder(lc + dc + sc);    } else     if (at.equals(ScalarType.LONG)) {      lc++;      checkOrder(dc + sc);    } else     if (at.equals(ScalarType.DOUBLE)) {      dc++;      checkOrder(sc);    } else     if (at.equals(ScalarType.STRING)) {      sc++;    } else {      throw new IllegalArgumentException("EventType constructor: Unsupported event attribute type");    }  }  numberOfInts=ic;  numberOfLongs=lc;  numberOfDoubles=dc;  numberOfStrings=sc;}  }
class C{  protected String doIt() throws Exception {  log.info("C_PaySelection_ID=" + p_HR_PaySelection_ID + ", Process="+ p_HR_Process_ID+ ", Payroll="+ p_HR_Payroll_ID+ ", BP Group="+ p_C_BP_Group_ID+ ", PaymentRule="+ p_PaymentRule+ ", Concept="+ p_HR_Concept_ID+ ", Depatment="+ p_HR_Department_ID+ ", Job="+ p_HR_Job_ID);  MHRPaySelection psel=new MHRPaySelection(getCtx(),p_HR_PaySelection_ID,get_TrxName());  MHRProcess process=new MHRProcess(getCtx(),p_HR_Process_ID,get_TrxName());  MHRPayroll payroll=new MHRPayroll(getCtx(),process.getHR_Payroll_ID(),get_TrxName());  ArrayList<Object> parameters=new ArrayList<Object>();  if (psel.get_ID() == 0)   throw new IllegalArgumentException("Not found HR_PaySelection_ID=" + p_HR_PaySelection_ID);  if (psel.isProcessed())   throw new IllegalArgumentException("@Processed@");  parameters.add(p_HR_Process_ID);  parameters.add(true);  parameters.add(p_HR_PaySelection_ID);  StringBuffer where=new StringBuffer("HR_Process_ID=?");  where.append(" AND HR_Concept_ID IN(SELECT HR_Concept_ID FROM HR_Concept WHERE IsPaid=?)");  where.append(" AND HR_Movement_ID NOT IN(SELECT HR_Movement_ID " + " FROM HR_PaySelectionLine " + " WHERE HR_PaySelectionCheck_ID > 0 OR HR_PaySelection_ID=?)");  if (p_C_BP_Group_ID > 0) {    where.append(" AND C_BPartner_ID IN(SELECT C_BPartner_ID FROM C_BPartner WHERE C_BP_Group_ID=? )");    parameters.add(p_C_BP_Group_ID);  }  if (p_C_BPartner_ID > 0) {    where.append(" AND C_BPartner_ID=?");    parameters.add(p_C_BPartner_ID);  }  if (p_PaymentRule != null) {    where.append(" AND C_BPartner_ID IN(SELECT C_BPartner_ID FROM C_BPartner WHERE PaymentRulePO=? )");    parameters.add(p_PaymentRule);  }  if (p_HR_Concept_ID > 0) {    where.append(" AND HR_Concept_ID=? ");    parameters.add(p_HR_Concept_ID);  }  if (p_HR_Department_ID > 0) {    where.append(" AND HR_Department_ID=?");    parameters.add(p_HR_Department_ID);  }  if (p_HR_Job_ID > 0) {    where.append(" AND HR_Job_ID=?");    parameters.add(p_HR_Job_ID);  }  int lines=0;  List<MHRMovement> movements=new Query(getCtx(),I_HR_Movement.Table_Name,where.toString(),get_TrxName()).setClient_ID().setParameters(parameters).list();  for (  MHRMovement m : movements) {    MBPartner bp=new MBPartner(getCtx(),m.getC_BPartner_ID(),get_TrxName());    String PaymentRule="";    if (bp.getPaymentRulePO() != null) {      PaymentRule=bp.getPaymentRule();    } else {      PaymentRule=payroll.getPaymentRule();    }    if (PaymentRule == null)     PaymentRule="D";    MHRPaySelectionLine psl=new MHRPaySelectionLine(getCtx(),0,get_TrxName());    psl.setHR_PaySelection_ID(p_HR_PaySelection_ID);    psl.setHR_Movement_ID(m.getHR_Movement_ID());    psl.setPaymentRule(PaymentRule);    psl.setAD_Org_ID(psel.getAD_Org_ID());    psl.setLine((lines + 1) * 10);    psl.setOpenAmt(m.getAmount().setScale(2,BigDecimal.ROUND_HALF_DOWN));    psl.setPayAmt(m.getAmount().setScale(2,BigDecimal.ROUND_HALF_DOWN));    psl.setDescription(bp.getName() + " " + bp.getName2());    psl.setDifferenceAmt(Env.ZERO);    psl.setDiscountAmt(Env.ZERO);    psl.setIsManual(false);    psl.setIsSOTrx(false);    psl.setIsActive(true);    psl.saveEx();    lines++;  }  return "@C_PaySelectionLine_ID@  - #" + lines;}  }
class C{  public static String decodePassword(final String value){  return ConversionUtils.base64ToString(value);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INLINE_COMMENT___INLINE_COMMENT_1:    setInlineComment_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static double sumOfInversions(DoubleArrayList data,int from,int to){  return sumOfPowerDeviations(data,-1,0.0,from,to);}  }
class C{  public TvShowUpdateDatasourceTask2(String datasource){  super(BUNDLE.getString("update.datasource") + " (" + datasource+ ")");  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(1);  dataSources.add(datasource);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("conn.options.title"));  this.add(getPanelProxyChain(),getPanelProxyChain().getName());}  }
class C{  public void printBitext(PrintWriter writer){  sa.stream().forEach(null);}  }
class C{  private static void addTranslation(String text,int type){  TEXTS.put(type,text);  LOOKUP.put(text,type);}  }
class C{  private void drawXTickMarks(Graphics gc,ArrayList<Integer> tickLabelPositions,LabelSide tickLabelSide,int width,int height){  updateMinorTickParas();  gc.setLineStyle(SWTConstants.LINE_SOLID);  if (scale.isLogScaleEnabled()) {    ArrayList<Boolean> tickLabelVisibilities=scale.getScaleTickLabels().getTickVisibilities();    for (int i=0; i < tickLabelPositions.size(); i++) {      int x=tickLabelPositions.get(i);      int y=0;      int tickLength=0;      if (tickLabelVisibilities.get(i))       tickLength=MAJOR_TICK_LENGTH; else       tickLength=MINOR_TICK_LENGTH;      if (tickLabelSide == LabelSide.Secondary) {        y=height - 1 - LINE_WIDTH- tickLength;      }      if (tickLabelVisibilities.get(i) || scale.isMinorTicksVisible())       gc.drawLine(x,y,x,y + tickLength);    }  } else {    for (int i=0; i < tickLabelPositions.size(); i++) {      int x=tickLabelPositions.get(i);      int y=0;      if (tickLabelSide == LabelSide.Secondary) {        y=height - 1 - LINE_WIDTH- MAJOR_TICK_LENGTH;      }      gc.drawLine(x,y,x,y + MAJOR_TICK_LENGTH);      if (scale.isMinorTicksVisible()) {        if (i > 0) {          if (i == 1 && (tickLabelPositions.get(1) - tickLabelPositions.get(0)) < scale.getScaleTickLabels().getGridStepInPixel()) {            x=tickLabelPositions.get(1);            while ((x - tickLabelPositions.get(0)) > minorGridStepInPixel + 3) {              x=x - minorGridStepInPixel;              drawXMinorTicks(gc,tickLabelSide,x,y);            }          } else           if (i == tickLabelPositions.size() - 1 && (tickLabelPositions.get(i) - tickLabelPositions.get(i - 1)) < scale.getScaleTickLabels().getGridStepInPixel()) {            x=tickLabelPositions.get(i - 1);            while ((tickLabelPositions.get(i) - x) > minorGridStepInPixel + 3) {              x=x + minorGridStepInPixel;              drawXMinorTicks(gc,tickLabelSide,x,y);            }          } else {            for (int j=0; j < minorTicksNumber; j++) {              x=tickLabelPositions.get(i - 1) + (tickLabelPositions.get(i) - tickLabelPositions.get(i - 1)) * j / minorTicksNumber;              drawXMinorTicks(gc,tickLabelSide,x,y);            }          }        }      }    }  }  if (scale.isScaleLineVisible()) {    if (tickLabelSide == LabelSide.Primary) {      gc.drawLine(scale.getMargin(),0,width - scale.getMargin(),0);    } else {      gc.drawLine(scale.getMargin(),height - 1,width - scale.getMargin(),height - 1);    }  }}  }
class C{  public FolderEntry createFolder(String name) throws ConflictException, ServerException, ForbiddenException {  return new FolderEntry(getWorkspace(),getVirtualFile().createFolder(name));}  }
class C{  public final boolean isBullet(){  return (m_flags & e_bulletFlag) == e_bulletFlag;}  }
class C{  public int size(){synchronized (elements) {    return elements.size();  }}  }
class C{  private Future<Void> passToStorageWriter(E data){  if (data instanceof IIdsAwareAggregatedData) {    ((IIdsAwareAggregatedData<?>)data).clearAggregatedIds();  }  if (!writeInvocationAffiliation) {    Map<String,Boolean> kryoPreferences=new HashMap<>(1);    kryoPreferences.put(KryoSerializationPreferences.WRITE_INVOCATION_AFFILIATION_DATA,Boolean.FALSE);    return getStorageWriter().write(data,kryoPreferences);  } else {    return getStorageWriter().write(data);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static long[][] johnsonNumberShortestPathsMatrix(final Network network,final EdgeMetric computer,final double precision){  final int N=getNumberNodes(network);  double[][] result=new double[N][N];  long[][] number=new long[N][N];  DoubleHeap heap=new DoubleHeap();  for (int i=0; i < N; i++) {    for (int j=0; j < N; j++) {      result[i][j]=Double.POSITIVE_INFINITY;      number[i][j]=0;    }    heap.clear();    heap.add(new Pair(network.allNodes.objs[i],-1),0d);    while (!heap.isEmpty()) {      boolean shouldExpand=true;      final double dist=heap.getMinKey();      final Pair node=(Pair)(heap.extractMin());      int nodeIndex=network.getNodeIndex(node.object);      if (result[i][nodeIndex] < dist - precision)       continue;      if (result[i][nodeIndex] > dist + precision) {        result[i][nodeIndex]=dist;        if (node.index < 0)         number[i][nodeIndex]=1; else         number[i][nodeIndex]=number[i][node.index];      } else {        if (node.index < 0)         number[i][nodeIndex]+=1; else         number[i][nodeIndex]+=number[i][node.index];        shouldExpand=false;      }      if (!shouldExpand)       continue;      final Bag edgesOut=network.getEdgesOut(node.object);      for (int j=0; j < edgesOut.numObjs; j++) {        final Edge edge=(Edge)(edgesOut.objs[j]);        int toNode=network.getNodeIndex(((Edge)(edgesOut.objs[j])).getOtherNode(node.object));        final double newDist=dist + computer.getWeight(edge);        if (result[i][toNode] >= newDist + precision) {          heap.add(new Pair(network.allNodes.objs[toNode],nodeIndex),newDist);        }      }    }    result[i][i]=0;  }  return number;}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  private final boolean checkString(String s,Condition condition){  String value=condition.getValue();  assert (value != null);  FilterOp op=condition.getConditionType();switch (op) {case NULL:{      return (s == null);    }case NOT_NULL:{    return (s != null);  }}if (s == null) {return false;}final int comp=s.compareTo(value);switch (op) {case EQUALS:{  return (comp == 0);}case NOT_EQUALS:{return (comp != 0);}case GREATER:{return (comp > 0);}case GREATER_EQ:{return (comp >= 0);}case LESS:{return (comp < 0);}case LESS_EQ:{return (comp <= 0);}default :{return false;}}}  }
class C{  public static String timeToString(long start,long finish){  Duration duration=new Duration(finish - start);  PeriodFormatter formatter=new PeriodFormatterBuilder().appendDays().appendSuffix("d").appendHours().appendSuffix("h").appendMinutes().appendSuffix("m").appendSeconds().appendSuffix("s").appendMillis().appendSuffix("ms").toFormatter();  return formatter.print(duration.toPeriod());}  }
class C{  public Statement notIn(Statement stmt){  statement.append(" NOT");  return in(stmt);}  }
class C{  public CustomPopupWindow(View contentView,int width,int height,int animationStyleId,boolean outsideTouchable){  mContentView=contentView;  mWidth=width;  mHeight=height;  mAnimationId=animationStyleId;  mOutsideTouchable=outsideTouchable;}  }
class C{  public static void sort(int[] array){  sort(0,array.length,array);}  }
class C{  public TermsQueryBuilder(String name,int... values){  this.name=name;  this.values=values;}  }
class C{  public SpanNearQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  private void updateProcess(ProgressListener listener,int currentRow,int numberOfRows){  if (numberOfRows > 0) {    listener.setCompleted(5 + 100 * currentRow / numberOfRows);  } else {    listener.setCompleted(50);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.681 -0500",hash_original_method="D8B7CD82B13D6307CBAC6FD1D2419AAD",hash_generated_method="4998544A91819B4B7C9FD64C661C81E8") private void detachOffScreenChildren(boolean toLeft){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toLeft) {    final int galleryLeft=mPaddingLeft;    for (int i=0; i < numChildren; i++) {      int n=mIsRtl ? (numChildren - 1 - i) : i;      final View child=getChildAt(n);      if (child.getRight() >= galleryLeft) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (!mIsRtl) {      start=0;    }  } else {    final int galleryRight=getWidth() - mPaddingRight;    for (int i=numChildren - 1; i >= 0; i--) {      int n=mIsRtl ? numChildren - 1 - i : i;      final View child=getChildAt(n);      if (child.getLeft() <= galleryRight) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }    if (mIsRtl) {      start=0;    }  }  detachViewsFromParent(start,count);  if (toLeft != mIsRtl) {    mFirstPosition+=count;  }}  }
class C{  @Override public void selectionChanged(IWorkbenchPart part,ISelection input){  if (input instanceof IStructuredSelection) {    IStructuredSelection selection=(IStructuredSelection)input;    if (selection.size() > 0 && selection.getFirstElement() instanceof TodoViewItem) {      for (Iterator iter=selection.iterator(); iter.hasNext(); ) {        if (!(iter.next() instanceof TodoViewItem)) {          setEnabled(false);          return;        }      }      if (checkRights()) {        setEnabled(true);      }      return;    }    CnATreeElement elmt=null;    if (selection.size() > 0 && selection.getFirstElement() instanceof DocumentReference) {      elmt=((DocumentReference)selection.getFirstElement()).getCnaTreeElement();    } else     if (selection.size() > 0 && selection.getFirstElement() instanceof CnATreeElement && ((CnATreeElement)selection.getFirstElement()).getEntity() != null) {      elmt=(CnATreeElement)selection.getFirstElement();    }    if (elmt != null) {      String type=elmt.getEntity().getEntityType();      for (Iterator iter=selection.iterator(); iter.hasNext(); ) {        Object o=iter.next();        if (o instanceof CnATreeElement) {          elmt=(CnATreeElement)o;        } else         if (o instanceof DocumentReference) {          DocumentReference ref=(DocumentReference)o;          elmt=ref.getCnaTreeElement();        }      }      if (elmt == null || elmt.getEntity() == null || !elmt.getEntity().getEntityType().equals(type)) {        setEnabled(false);        return;      }      if (checkRights()) {        setEnabled(true);      }      return;    }  }  setEnabled(false);}  }
class C{  private void writeJarPostResource(StringBuilder sb,String path){  sb.append("className=\"" + JAR_RESOURCE_SET + "\" base=\"");  sb.append(path.replace("&","&amp;"));}  }
class C{  private void notifyUploadResult(RemoteOperationResult uploadResult,UploadFileOperation upload){  Log_OC.d(TAG,"NotifyUploadResult with resultCode: " + uploadResult.getCode());  mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);  if (!uploadResult.isCancelled()) {    int tickerId=(uploadResult.isSuccess()) ? R.string.uploader_upload_succeeded_ticker : R.string.uploader_upload_failed_ticker;    String content;    boolean needsToUpdateCredentials=(uploadResult.getCode() == ResultCode.UNAUTHORIZED || uploadResult.isIdPRedirection());    tickerId=(needsToUpdateCredentials) ? R.string.uploader_upload_failed_credentials_error : tickerId;    mNotificationBuilder.setTicker(getString(tickerId)).setContentTitle(getString(tickerId)).setAutoCancel(true).setOngoing(false).setProgress(0,0,false);    content=ErrorMessageAdapter.getErrorCauseMessage(uploadResult,upload,getResources());    if (needsToUpdateCredentials) {      Intent updateAccountCredentials=new Intent(this,AuthenticatorActivity.class);      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,upload.getAccount());      updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);      updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);      mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT));      mUploadClient=null;    } else {      mNotificationBuilder.setContentText(content);      if (upload.isInstant()) {        DbHandler db=null;        try {          db=new DbHandler(this.getBaseContext());          String message=uploadResult.getLogMessage() + " errorCode: " + uploadResult.getCode();          Log_OC.e(TAG,message + " Http-Code: " + uploadResult.getHttpCode());          if (uploadResult.getCode() == ResultCode.QUOTA_EXCEEDED) {            if (db.updateFileState(upload.getOriginalStoragePath(),message) == 0) {              db.putFileForLater(upload.getOriginalStoragePath(),upload.getAccount().name,message);            }          }        }  finally {          if (db != null) {            db.close();          }        }      }    }    mNotificationBuilder.setContentText(content);    mNotificationManager.notify(tickerId,mNotificationBuilder.build());    if (uploadResult.isSuccess()) {      DbHandler db=new DbHandler(this.getBaseContext());      db.removeIUPendingFile(mCurrentUpload.getOriginalStoragePath());      db.close();      NotificationDelayer.cancelWithDelay(mNotificationManager,R.string.uploader_upload_succeeded_ticker,2000);    }  }}  }
class C{  private synchronized void checkOfflineServers(){  Iterator itr=offline.listIterator();  while (itr.hasNext()) {    Server server=(Server)itr.next();    String url=getServerURL(server);    GetMethod get=new GetMethod(url);    get.setFollowRedirects(false);    try {      httpClient.executeMethod(get);      if (okServerResponse(get.getStatusCode())) {        online.add(server);        itr.remove();        log.debug("Server back online " + getServerURL(server));        listener.serverOnline(server);      }    } catch (    Exception e) {      listener.serverOffline(server);    } finally {      get.releaseConnection();    }  }}  }
class C{  protected final void requireNotDisposed(){  requireState(!_disposed,"Cannot invoke a method on a disposed service.");}  }
class C{  public static int max(int a,int b){  return a >= b ? a : b;}  }
class C{  public void consume(){  m_bConsumed=true;}  }
class C{  public long enqueue(RequestBatch batch){  long batchId=insert(batch);  for (  Request request : batch.getRequests()) {    request.setBatchId(batchId);    insert(request);  }  notifyBatchesHaveChanged();  return batchId;}  }
class C{  public boolean isCompleted(){  return sliceType != NOT_SET;}  }
class C{  public Hashtable<IPoint,List<ILineSegment>> intersections(ILineSegment[] segs){  startTime();  initialize();  for (  ILineSegment ils : segs) {    EventPoint old, ep=new EventPoint(ils.getStart());    if ((old=eq.event(ep)) == null) {      eq.insert(ep);    } else {      ep=old;    }    ep.addUpperLineSegment(ils);    ep=new EventPoint(ils.getEnd());    if ((old=eq.event(ep)) == null) {      eq.insert(ep);    } else {      ep=old;    }    ep.addLowerLineSegment(ils);  }  while (!eq.isEmpty()) {    EventPoint p=eq.min();    handleEventPoint(p);  }  computeTime();  return report;}  }
class C{  @NoInline @Interruptible public static WordArray newNonMovingWordArray(int size){  if (!VM.runningVM) {    return WordArray.create(size);  }  RVMArray arrayType=RVMType.WordArrayType;  int headerSize=ObjectModel.computeArrayHeaderSize(arrayType);  int align=ObjectModel.getAlignment(arrayType);  int offset=ObjectModel.getOffsetForAlignment(arrayType,false);  int width=arrayType.getLogElementSize();  TIB arrayTib=arrayType.getTypeInformationBlock();  return (WordArray)allocateArray(size,width,headerSize,arrayTib,Plan.ALLOC_NON_MOVING,align,offset,Plan.DEFAULT_SITE);}  }
class C{  public IntSparseArrayDataRow(){  this(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.972 -0500",hash_original_method="F33520EFD859046BA24511601C4E309A",hash_generated_method="716B3D6BDC9F4141758E83666058F7D2") protected void jsAlert(String url,String message){  mCallbackProxy.onJsAlert(url,message);}  }
class C{  public boolean isUserInRole(String role){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(role));    }  }  return false;}  }
class C{  private void validateMinPaths(StorageSystem system,ExportPathParams pathParams,Map<Initiator,List<StoragePort>> existingAssignments,Map<Initiator,List<StoragePort>> assignments,List<Initiator> newInitiators){  Map<URI,Set<Initiator>> existingInitiatorsMap=generateNetworkToInitiatorsMap(existingAssignments,_dbClient);  Map<Initiator,List<StoragePort>> allAssignments=new HashMap<Initiator,List<StoragePort>>();  allAssignments.putAll(existingAssignments);  allAssignments.putAll(assignments);  Collection<Initiator> allInitiators=new HashSet<Initiator>(newInitiators);  for (  Set<Initiator> existingInitiators : existingInitiatorsMap.values()) {    allInitiators.addAll(existingInitiators);  }  Map<URI,List<Initiator>> hostInitiatorsMap=DefaultStoragePortsAssigner.makeHostInitiatorsMap(allInitiators);  validateMinPaths(pathParams,hostInitiatorsMap,allAssignments);  if (needToValidateHA(system)) {    validateHACapabilities(pathParams,allAssignments);  }}  }
class C{  @Override public String toString(){  if (m_tree != null) {    return "Logistic model tree \n------------------\n" + m_tree.toString();  } else {    return "No tree build";  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public Locator2Impl(Locator locator){  super(locator);  if (locator instanceof Locator2) {    Locator2 l2=(Locator2)locator;    version=l2.getXMLVersion();    encoding=l2.getEncoding();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodenull.class,args);}  }
class C{  public void testCatchAndRethrow() throws Exception {  ObjectMapper mapper=new ObjectMapper();  CustomSerializerFactory sf=new CustomSerializerFactory();  sf.addSpecificMapping(Bean.class,new SerializerWithErrors());  mapper.setSerializerFactory(sf);  try {    StringWriter sw=new StringWriter();    Bean[] b={new Bean()};    List<Bean[]> l=new ArrayList<Bean[]>();    l.add(b);    mapper.writeValue(sw,l);    fail("Should have gotten an exception");  } catch (  IOException e) {    verifyException(e,"test string");    Throwable root=e.getCause();    assertNotNull(root);    if (!(root instanceof IllegalArgumentException)) {      fail("Wrapped exception not IAE, but " + root.getClass());    }  }}  }
class C{  public boolean hasInfoFlowInfo(){  return hasHighLevelInfoFlowInfo() || hasLowLevelInfoFlowInfo();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean equals(Object other){  return (this.member.equals(((Listener)other).member)) ? true : false;}  }
class C{  public PartLibrary createPartLibrary(UCF ucf){  PartLibrary part_library=new PartLibrary();  HashMap<String,Part> all_parts=new HashMap();  ArrayList<Map> part_json_objects=ucf.get_parts();  for (  Map map : part_json_objects) {    String name=map.get("name").toString();    String type=map.get("type").toString();    String seq=map.get("dnasequence").toString();    Part p=new Part(name,type,seq);    all_parts.put(name,p);  }  part_library.set_ALL_PARTS(all_parts);  return part_library;}  }
class C{  public ScaffwizardVisualPanel1(){  initComponents();}  }
class C{  public SaveAsImageFileChooser(int width,int height){  super();  dqp.setFieldHeight(height);  dqp.setFieldWidth(width);  JPanel imageSizePanel=PaletteHelper.createPaletteJPanel(" Set Image Size ");  imageSizePanel.setLayout(new BorderLayout());  imageSizePanel.add(dqp,BorderLayout.CENTER);  setAccessory(imageSizePanel);}  }
class C{  protected boolean isSendBufferSizeChanged(){  return true;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (baseOperationID) {case N4JSPackage.PARAMETERIZED_ACCESS___IS_PARAMETERIZED:      return N4JSPackage.NEW_EXPRESSION___IS_PARAMETERIZED;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean checkConsistency(){  if (indexOptions != IndexOptions.NONE) {    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0 && storePayloads) {      throw new IllegalStateException("indexed field '" + name + "' cannot have payloads without positions");    }  } else {    if (storeTermVector) {      throw new IllegalStateException("non-indexed field '" + name + "' cannot store term vectors");    }    if (storePayloads) {      throw new IllegalStateException("non-indexed field '" + name + "' cannot store payloads");    }    if (omitNorms) {      throw new IllegalStateException("non-indexed field '" + name + "' cannot omit norms");    }  }  if (pointDimensionCount < 0) {    throw new IllegalStateException("pointDimensionCount must be >= 0; got " + pointDimensionCount);  }  if (pointNumBytes < 0) {    throw new IllegalStateException("pointNumBytes must be >= 0; got " + pointNumBytes);  }  if (pointDimensionCount != 0 && pointNumBytes == 0) {    throw new IllegalStateException("pointNumBytes must be > 0 when pointDimensionCount=" + pointDimensionCount);  }  if (pointNumBytes != 0 && pointDimensionCount == 0) {    throw new IllegalStateException("pointDimensionCount must be > 0 when pointNumBytes=" + pointNumBytes);  }  if (dvGen != -1 && docValuesType == DocValuesType.NONE) {    throw new IllegalStateException("field '" + name + "' cannot have a docvalues update generation without having docvalues");  }  return true;}  }
class C{  private int allocateBPPaymentWithInfo(){  int count=0;  for (int p=0; p < m_payments.length; p++) {    MPayment payment=m_payments[p];    if (payment.isAllocated())     continue;    BigDecimal allocatedAmt=payment.getAllocatedAmt();    log.info(payment + ", Allocated=" + allocatedAmt);    if (allocatedAmt != null && allocatedAmt.signum() != 0)     continue;    BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());    if (!payment.isReceipt())     availableAmt=availableAmt.negate();    log.fine("Available=" + availableAmt);    if (payment.getC_Invoice_ID() != 0) {      for (int i=0; i < m_invoices.length; i++) {        MInvoice invoice=m_invoices[i];        if (invoice.isPaid())         continue;        if (payment.getC_Invoice_ID() == invoice.getC_Invoice_ID()) {          if (payment.getC_Currency_ID() == invoice.getC_Currency_ID()) {            BigDecimal openAmt=invoice.getOpenAmt(true,null);            if (!invoice.isSOTrx())             openAmt=openAmt.negate();            log.fine(invoice + ", Open=" + openAmt);            if (availableAmt.compareTo(openAmt) == 0) {              if (payment.allocateIt()) {                addLog(0,payment.getDateAcct(),openAmt,payment.getDocumentNo() + " [1]");                count++;              }              break;            }          } else {          }        }      }    } else {      MPaySelectionCheck psCheck=MPaySelectionCheck.getOfPayment(getCtx(),payment.getC_Payment_ID(),get_TrxName());      if (psCheck == null)       continue;      BigDecimal totalInvoice=Env.ZERO;      MPaySelectionLine[] psLines=psCheck.getPaySelectionLines(false);      for (int i=0; i < psLines.length; i++) {        MPaySelectionLine line=psLines[i];        MInvoice invoice=line.getInvoice();        if (payment.getC_Currency_ID() == invoice.getC_Currency_ID()) {          BigDecimal invoiceAmt=invoice.getOpenAmt(true,null);          BigDecimal overUnder=line.getOpenAmt().subtract(line.getPayAmt()).subtract(line.getDiscountAmt()).subtract(line.getDifferenceAmt());          invoiceAmt=invoiceAmt.subtract(line.getDiscountAmt()).subtract(line.getDifferenceAmt()).subtract(overUnder);          if (!invoice.isSOTrx())           invoiceAmt=invoiceAmt.negate();          log.fine(invoice + ", Invoice=" + invoiceAmt);          totalInvoice=totalInvoice.add(invoiceAmt);        } else {        }      }      if (availableAmt.compareTo(totalInvoice) == 0) {        if (payment.allocateIt()) {          addLog(0,payment.getDateAcct(),availableAmt,payment.getDocumentNo() + " [n]");          count++;        }      }    }  }  return count;}  }
class C{  public RemoteVideoInfo(String title,int durationMillis,PlayerState state,int currentTimeMillis,String errorMessage){  this.title=title;  this.durationMillis=durationMillis;  this.state=state;  this.currentTimeMillis=currentTimeMillis;  this.errorMessage=errorMessage;}  }
class C{  public static String indent(String s,int spaces,boolean newline){  StringBuilder buff=new StringBuilder(s.length() + spaces);  for (int i=0; i < s.length(); ) {    for (int j=0; j < spaces; j++) {      buff.append(' ');    }    int n=s.indexOf('\n',i);    n=n < 0 ? s.length() : n + 1;    buff.append(s.substring(i,n));    i=n;  }  if (newline && !s.endsWith("\n")) {    buff.append('\n');  }  return buff.toString();}  }
class C{  private static List<BillingResult> createBillingResults(){  createBillingResultDataMock();  billingResults=new LinkedList<BillingResult>();  for (long subscriptionKey=1; subscriptionKey <= NUMBER_SUBSCRIPTIONS; subscriptionKey++) {    BillingResult billingResult=new BillingResult();    billingResult.setKey(getBillingKey(subscriptionKey));    billingResult.setSubscriptionKey(subscriptionKey);    billingResult.setCurrency(new SupportedCurrency(billingResultDataMock.get(subscriptionKey).currencyCode));    billingResult.setNetAmount(billingResultDataMock.get(subscriptionKey).netAmount);    billingResults.add(billingResult);  }  return billingResults;}  }
class C{  public void my(int i){  System.out.println("i=" + i);}  }
class C{  public static @Nullable DateTime min(DateTime a,DateTime b){  return a == null ? b : b == null ? a : a.isBefore(b) ? a : b;}  }
class C{  private void updateStateFromTypedArray(TypedArray a){  final LayerState state=mLayerState;  state.mChangingConfigurations|=TypedArrayCompat.getChangingConfigurations(a);  state.mThemeAttrs=TypedArrayCompat.extractThemeAttrs(a);  final int N=a.getIndexCount();  for (int i=0; i < N; i++) {    int attr=a.getIndex(i);    if (attr == R.styleable.LayerDrawable_android_opacity) {      state.mOpacityOverride=a.getInt(attr,state.mOpacityOverride);    } else     if (attr == R.styleable.LayerDrawable_android_paddingTop) {      state.mPaddingTop=a.getDimensionPixelOffset(attr,state.mPaddingTop);    } else     if (attr == R.styleable.LayerDrawable_android_paddingBottom) {      state.mPaddingBottom=a.getDimensionPixelOffset(attr,state.mPaddingBottom);    } else     if (attr == R.styleable.LayerDrawable_android_paddingLeft) {      state.mPaddingLeft=a.getDimensionPixelOffset(attr,state.mPaddingLeft);    } else     if (attr == R.styleable.LayerDrawable_android_paddingRight) {      state.mPaddingRight=a.getDimensionPixelOffset(attr,state.mPaddingRight);    } else     if (attr == R.styleable.LayerDrawable_android_paddingStart) {      state.mPaddingStart=a.getDimensionPixelOffset(attr,state.mPaddingStart);    } else     if (attr == R.styleable.LayerDrawable_android_paddingEnd) {      state.mPaddingEnd=a.getDimensionPixelOffset(attr,state.mPaddingEnd);    } else     if (attr == R.styleable.LayerDrawable_android_autoMirrored) {      state.mAutoMirrored=a.getBoolean(attr,state.mAutoMirrored);    } else     if (attr == R.styleable.LayerDrawable_android_paddingMode) {      state.mPaddingMode=a.getInteger(attr,state.mPaddingMode);    }  }}  }
class C{  protected int generateBinomial(int n,double p){  final double C1_3=0.33333333333333333;  final double C5_8=0.62500000000000000;  final double C1_6=0.16666666666666667;  final int DMAX_KM=20;  int bh, i, K, Km, nK;  double f, rm, U, V, X, T, E;  if (n != n_last || p != p_last) {    n_last=n;    p_last=p;    par=Math.min(p,1.0 - p);    q=1.0 - par;    np=n * par;    if (np <= 0.0)     return -1;    rm=np + par;    m=(int)rm;    if (np < 10) {      p0=Math.exp(n * Math.log(q));      bh=(int)(np + 10.0 * Math.sqrt(np * q));      b=Math.min(n,bh);    } else {      rc=(n + 1.0) * (pq=par / q);      ss=np * q;      i=(int)(2.195 * Math.sqrt(ss) - 4.6 * q);      xm=m + 0.5;      xl=(double)(m - i);      xr=(double)(m + i + 1L);      f=(rm - xl) / (rm - xl * par);      ll=f * (1.0 + 0.5 * f);      f=(xr - rm) / (xr * q);      lr=f * (1.0 + 0.5 * f);      c=0.134 + 20.5 / (15.3 + (double)m);      p1=i + 0.5;      p2=p1 * (1.0 + c + c);      p3=p2 + c / ll;      p4=p3 + c / lr;    }  }  if (np < 10) {    double pk;    K=0;    pk=p0;    U=randomGenerator.raw();    while (U > pk) {      ++K;      if (K > b) {        U=randomGenerator.raw();        K=0;        pk=p0;      } else {        U-=pk;        pk=(double)(((n - K + 1) * par * pk) / (K * q));      }    }    return ((p > 0.5) ? (n - K) : K);  }  for (; ; ) {    V=randomGenerator.raw();    if ((U=randomGenerator.raw() * p4) <= p1) {      K=(int)(xm - U + p1 * V);      return (p > 0.5) ? (n - K) : K;    }    if (U <= p2) {      X=xl + (U - p1) / c;      if ((V=V * c + 1.0 - Math.abs(xm - X) / p1) >= 1.0)       continue;      K=(int)X;    } else     if (U <= p3) {      if ((X=xl + Math.log(V) / ll) < 0.0)       continue;      K=(int)X;      V*=(U - p2) * ll;    } else {      if ((K=(int)(xr - Math.log(V) / lr)) > n)       continue;      V*=(U - p3) * lr;    }    if ((Km=Math.abs(K - m)) <= DMAX_KM || Km + Km + 2L >= ss) {      f=1.0;      if (m < K) {        for (i=m; i < K; ) {          if ((f*=(rc / ++i - pq)) < V)           break;        }      } else {        for (i=K; i < m; ) {          if ((V*=(rc / ++i - pq)) > f)           break;        }      }      if (V <= f)       break;    } else {      V=Math.log(V);      T=-Km * Km / (ss + ss);      E=(Km / ss) * ((Km * (Km * C1_3 + C5_8) + C1_6) / ss + 0.5);      if (V <= T - E)       break;      if (V <= T + E) {        if (n != n_prev || par != p_prev) {          n_prev=n;          p_prev=par;          nm=n - m + 1;          ch=xm * Math.log((m + 1.0) / (pq * nm)) + Arithmetic.stirlingCorrection(m + 1) + Arithmetic.stirlingCorrection(nm);        }        nK=n - K + 1;        if (V <= ch + (n + 1.0) * Math.log((double)nm / (double)nK) + (K + 0.5) * Math.log(nK * pq / (K + 1.0)) - Arithmetic.stirlingCorrection(K + 1) - Arithmetic.stirlingCorrection(nK))         break;      }    }  }  return (p > 0.5) ? (n - K) : K;}  }
class C{  private boolean checkCondition(int condition,char c1[],int c1off,int c1len,char c2[],int c2off,int c2len){  if (condition != 0) {    CharacterRunAutomaton pattern=dictionary.patterns.get(condition);    int state=0;    for (int i=c1off; i < c1off + c1len; i++) {      state=pattern.step(state,c1[i]);      if (state == -1) {        return false;      }    }    for (int i=c2off; i < c2off + c2len; i++) {      state=pattern.step(state,c2[i]);      if (state == -1) {        return false;      }    }    return pattern.isAccept(state);  }  return true;}  }
class C{  @Override public void nodeChanged(TreeNode node){  if (listenerList != null && node != null) {    TreeNode parent=node.getParent();    if (parent == null && node != root) {      parent=root;    }    if (parent != null) {      int anIndex=getIndexOfChild(parent,node);      if (anIndex != -1) {        int[] cIndexs=new int[1];        cIndexs[0]=anIndex;        nodesChanged(parent,cIndexs);      }    }  }}  }
class C{  public ParameterBlock add(long l){  return add(new Long(l));}  }
class C{  boolean[] compare(Object[] outputs,Record rec){  BreastCancerYRecord r=(BreastCancerYRecord)rec;  float result=(Float)outputs[0];  return new boolean[]{(r.recurrence == (result > 0 ? true : false))};}  }
class C{  @Override public void sendMail(MimeMessage message) throws MessagingException {  MailAddress sender=new MailAddress((InternetAddress)message.getFrom()[0]);  Collection<MailAddress> recipients=new HashSet<MailAddress>();  Address addresses[]=message.getAllRecipients();  if (addresses != null) {    for (    Address address : addresses) {      if (address instanceof InternetAddress) {        recipients.add(new MailAddress((InternetAddress)address));      }    }  }  sendMail(sender,recipients,message);}  }
class C{  protected void assertEqualReaders(Reader expected,Reader actual,int len) throws IOException {  for (int i=0; len < 0 || i < len; i++) {    int ce=expected.read();    int ca=actual.read();    assertEquals("pos:" + i,ce,ca);    if (ce == -1) {      break;    }  }  expected.close();  actual.close();}  }
class C{  public void copyResult(Object dst){  PurityGraph r=new PurityGraph();  Iterator it=graph.getTails().iterator();  while (it.hasNext()) {    Stmt stmt=(Stmt)it.next();    PurityGraphBox ref=(PurityGraphBox)getFlowAfter(stmt);    r.union(ref.g);  }  r.removeLocals();  ((PurityGraphBox)dst).g=r;}  }
class C{  public double asFloat(){  long value=0;  double factor=0.0;  long sign=bytes[offset] == '-' ? -1 : +1;  int start=sign < 0 ? offset + 1 : offset;  for (int i=start; i < offset + length; i++) {    byte b=bytes[i];    if (b < '0' || b > '9') {      if (factor == 0.0 && b == '.') {        factor=1.0;        continue;      }      throw new FIXValueFormatException("Not a float");    }    value=10 * value + b - '0';    factor*=10;  }  return sign * (factor > 0.0 ? value / factor : value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:19.765 -0500",hash_original_method="FF2C15D5C77CB986FFC483C5693D319F",hash_generated_method="8FC17E37CE7826FC731CFDA2E6F6822A") @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public boolean downloadMissing(IProgressListener ipl){  if (MCEF.SKIP_UPDATES) {    Log.warning("NOT downloading resources as specified in the configuration file");    return true;  }  Log.info("Checking for missing resources...");  resources.removeExistings();  if (resources.size() > 0) {    Log.info("Found %d missing resources. Downloading...",resources.size());    Log.info(Mirror.getCurrent().getMirrorString());    for (    Resource r : resources) {      if (!r.download(ipl))       return false;    }    for (    String r : extract) {      Resource res=resources.fromFileName(r);      if (res == null)       continue;      if (!res.extract(ipl))       Log.warning("Couldn't extract %s. MCEF may not work because of this.",r);    }    Log.info("Done; all resources were downloaded.");  } else   Log.info("None are missing. Good.");  return true;}  }
class C{  public int push(int i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  public void applyHeartbeat(Database database,Timestamp sourceTimestamp,String name) throws SQLException {  ArrayList<Column> whereClause=new ArrayList<Column>();  ArrayList<Column> values=new ArrayList<Column>();  if (logger.isDebugEnabled())   logger.debug("Applying heartbeat to slave: name=" + name + " sourceTstamp="+ sourceTimestamp);  hbId.setValue(KEY);  whereClause.add(hbId);  hbSourceTstamp.setValue(sourceTimestamp);  hbName.setValue(name);  values.add(hbSourceTstamp);  values.add(hbName);  database.update(hbTable,whereClause,values);}  }
class C{  public static void writeMiniLangDocument(URL xmlURL,Document document){  URL styleSheetURL=null;  InputStream styleSheetInStream=null;  Transformer transformer=null;  try {    styleSheetURL=FlexibleLocation.resolveLocation("component://minilang/config/MiniLang.xslt");    styleSheetInStream=styleSheetURL.openStream();    TransformerFactory transformerFactory=TransformerFactory.newInstance();    transformer=transformerFactory.newTransformer(new StreamSource(styleSheetInStream));  } catch (  Exception e) {    Debug.logWarning(e,"Error reading minilang/config/MiniLang.xslt: ",module);    return;  } finally {    if (styleSheetInStream != null) {      try {        styleSheetInStream.close();      } catch (      IOException e) {        Debug.logWarning(e,"Error closing minilang/config/MiniLang.xslt: ",module);      }    }  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(xmlURL.getFile());    UtilXml.transformDomDocument(transformer,document,fos);    Debug.logInfo("Saved Mini-language file " + xmlURL,module);  } catch (  Exception e) {    Debug.logWarning(e,"Error writing mini-language file " + xmlURL + ": ",module);  } finally {    if (fos != null) {      try {        fos.close();      } catch (      IOException e) {        Debug.logWarning(e,"Error closing " + xmlURL + ": ",module);      }    }  }}  }
class C{  public long rawValue(){  return value;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateFractalDimensionRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateFractalDimensionVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  protected void resetCutOffDay(long adminKey,UserRoleType userRole) throws Exception {  container.login(adminKey,ROLE_ORGANIZATION_ADMIN,userRole.name());  orgSetup.updateCutOffDay(oldCutOffDay);}  }
class C{  public void grantMembership(Collection<String> jids) throws XMPPException {  changeAffiliationByAdmin(jids,"member");}  }
class C{  public boolean isMatch(){  return match;}  }
class C{  public boolean handleUnresolvedVariableExpression(VariableExpression vexp){  return false;}  }
class C{  public static int floorPowerOf2(int n){  if (n <= 1) {    return 1;  }  return Integer.highestOneBit(n);}  }
class C{  public static void copy(String in,Writer out) throws IOException {  Preconditions.checkNotNull(in,"No input String specified");  Preconditions.checkNotNull(out,"No Writer specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS04.class,args);}  }
class C{  public QueryEntity(String keyType,String valType){  this.keyType=keyType;  this.valType=valType;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=generateWorkingKey(((KeyParameter)params).getKey());    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to Rijndael init - " + params.getClass().getName());}  }
class C{  @Override public int compareTo(CopyJob _other){  SimpleCopyJob other=(SimpleCopyJob)_other;  if (highPriority != other.highPriority) {    return highPriority ? -1 : 1;  } else   if (ord < other.ord) {    return -1;  } else   if (ord > other.ord) {    return 1;  } else {    return 0;  }}  }
class C{  public static Optional<PlayerProfile> lookup(String name){  if (Bukkit.getPlayerExact(name) != null) {    return Optional.of(fromPlayer(Bukkit.getPlayerExact(name)));  }  if (nameCache.contains(name))   Optional.of(nameCache.get(name));  List<PlayerProfile> response=postNames(ImmutableList.of(name));  if (response == null)   return Optional.empty();  if (response.isEmpty())   return Optional.empty();  return Optional.of(response.get(0));}  }
class C{  public static String toISOString(Date date,String format,TimeZone tz){  if (format == null)   format=FORMAT_DATE_ISO;  if (tz == null)   tz=TimeZone.getDefault();  DateFormat f=new SimpleDateFormat(format);  f.setTimeZone(tz);  return f.format(date);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  boolean horiz;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    horiz=true;  } else   if (orientation == PlotOrientation.VERTICAL) {    horiz=false;  } else {    return;  }  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  OHLCDataset highLowData=(OHLCDataset)dataset;  double x=highLowData.getXValue(series,item);  double yHigh=highLowData.getHighValue(series,item);  double yLow=highLowData.getLowValue(series,item);  double yOpen=highLowData.getOpenValue(series,item);  double yClose=highLowData.getCloseValue(series,item);  RectangleEdge domainEdge=plot.getDomainAxisEdge();  double xx=domainAxis.valueToJava2D(x,dataArea,domainEdge);  RectangleEdge edge=plot.getRangeAxisEdge();  double yyHigh=rangeAxis.valueToJava2D(yHigh,dataArea,edge);  double yyLow=rangeAxis.valueToJava2D(yLow,dataArea,edge);  double yyOpen=rangeAxis.valueToJava2D(yOpen,dataArea,edge);  double yyClose=rangeAxis.valueToJava2D(yClose,dataArea,edge);  double volumeWidth;  double stickWidth;  if (this.candleWidth > 0) {    volumeWidth=this.candleWidth;    stickWidth=this.candleWidth;  } else {    double xxWidth=0;    int itemCount;switch (this.autoWidthMethod) {case WIDTHMETHOD_AVERAGE:      itemCount=highLowData.getItemCount(series);    if (horiz) {      xxWidth=dataArea.getHeight() / itemCount;    } else {      xxWidth=dataArea.getWidth() / itemCount;    }  break;case WIDTHMETHOD_SMALLEST:itemCount=highLowData.getItemCount(series);double lastPos=-1;xxWidth=dataArea.getWidth();for (int i=0; i < itemCount; i++) {double pos=domainAxis.valueToJava2D(highLowData.getXValue(series,i),dataArea,domainEdge);if (lastPos != -1) {xxWidth=Math.min(xxWidth,Math.abs(pos - lastPos));}lastPos=pos;}break;case WIDTHMETHOD_INTERVALDATA:IntervalXYDataset intervalXYData=(IntervalXYDataset)dataset;double startPos=domainAxis.valueToJava2D(intervalXYData.getStartXValue(series,item),dataArea,plot.getDomainAxisEdge());double endPos=domainAxis.valueToJava2D(intervalXYData.getEndXValue(series,item),dataArea,plot.getDomainAxisEdge());xxWidth=Math.abs(endPos - startPos);break;}xxWidth-=2 * this.autoWidthGap;xxWidth*=this.autoWidthFactor;xxWidth=Math.min(xxWidth,this.maxCandleWidth);volumeWidth=Math.max(Math.min(1,this.maxCandleWidth),xxWidth);stickWidth=Math.max(Math.min(3,this.maxCandleWidth),xxWidth);}Paint p=getItemPaint(series,item);Paint outlinePaint=null;if (this.useOutlinePaint) {outlinePaint=getItemOutlinePaint(series,item);}Stroke s=getItemStroke(series,item);g2.setStroke(s);if (this.drawVolume) {int volume=(int)highLowData.getVolumeValue(series,item);double volumeHeight=volume / this.maxVolume;double min, max;if (horiz) {min=dataArea.getMinX();max=dataArea.getMaxX();} else {min=dataArea.getMinY();max=dataArea.getMaxY();}double zzVolume=volumeHeight * (max - min);g2.setPaint(getVolumePaint());Composite originalComposite=g2.getComposite();g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f));if (horiz) {g2.fill(new Rectangle2D.Double(min,xx - volumeWidth / 2,zzVolume,volumeWidth));} else {g2.fill(new Rectangle2D.Double(xx - volumeWidth / 2,max - zzVolume,volumeWidth,zzVolume));}g2.setComposite(originalComposite);}if (this.useOutlinePaint) {g2.setPaint(outlinePaint);} else {g2.setPaint(p);}double yyMaxOpenClose=Math.max(yyOpen,yyClose);double yyMinOpenClose=Math.min(yyOpen,yyClose);double maxOpenClose=Math.max(yOpen,yClose);double minOpenClose=Math.min(yOpen,yClose);if (yHigh > maxOpenClose) {if (horiz) {g2.draw(new Line2D.Double(yyHigh,xx,yyMaxOpenClose,xx));} else {g2.draw(new Line2D.Double(xx,yyHigh,xx,yyMaxOpenClose));}}if (yLow < minOpenClose) {if (horiz) {g2.draw(new Line2D.Double(yyLow,xx,yyMinOpenClose,xx));} else {g2.draw(new Line2D.Double(xx,yyLow,xx,yyMinOpenClose));}}Rectangle2D body;Rectangle2D hotspot;double length=Math.abs(yyHigh - yyLow);double base=Math.min(yyHigh,yyLow);if (horiz) {body=new Rectangle2D.Double(yyMinOpenClose,xx - stickWidth / 2,yyMaxOpenClose - yyMinOpenClose,stickWidth);hotspot=new Rectangle2D.Double(base,xx - stickWidth / 2,length,stickWidth);} else {body=new Rectangle2D.Double(xx - stickWidth / 2,yyMinOpenClose,stickWidth,yyMaxOpenClose - yyMinOpenClose);hotspot=new Rectangle2D.Double(xx - stickWidth / 2,base,stickWidth,length);}if (yClose > yOpen) {if (this.upPaint != null) {g2.setPaint(this.upPaint);} else {g2.setPaint(p);}g2.fill(body);} else {if (this.downPaint != null) {g2.setPaint(this.downPaint);} else {g2.setPaint(p);}g2.fill(body);}if (this.useOutlinePaint) {g2.setPaint(outlinePaint);} else {g2.setPaint(p);}g2.draw(body);if (entities != null) {addEntity(entities,hotspot,dataset,series,item,0.0,0.0);}}  }
class C{  public static void main(String[] args) throws IOException, ServiceException {  String queryString=null;  args=init(args,"Google-QueryExample-1.0");  if (args.length == 1) {    queryString=args[0];  } else {    System.err.println("Invalid argument count.");    System.err.println("Expected one argument:");    System.err.println(" query");    System.exit(1);  }  GoogleBaseQuery query=new GoogleBaseQuery(urlFactory.getSnippetsFeedURL());  query.setGoogleBaseQuery(queryString);  query.setResultFormat(GoogleBaseQuery.ResultFormat.ATOM);  query.setMaxResults(MAX_RESULTS);  System.out.println("Sending request to: " + query.getUrl());  try {    GoogleBaseFeed feed=service.query(query,GoogleBaseFeed.class);    printResult(feed);  } catch (  ServiceException e) {    printServiceException(e);  }}  }
class C{  public void testTxLocalOptimisticReadCommitted() throws Exception {  checkTx(LOCAL,OPTIMISTIC,READ_COMMITTED);}  }
class C{  public static void logError(Throwable e,boolean invalidRowsPresent){  if (!invalidRowsPresent) {    invalidRowsPresent=true;    LOGGER.error(e,CarbonCommonConstants.FILTER_INVALID_MEMBER + e.getMessage());  }}  }
class C{  public static DynamicClassLoader create(ClassLoader parent,PathImpl path,String prefix){  DynamicClassLoader loader=new DynamicClassLoader(parent,false,true);  SimpleLoader simpleLoader=new SimpleLoader(loader,path,prefix);  simpleLoader.init();  loader.addLoader(simpleLoader);  loader.init();  return loader;}  }
class C{  public synchronized int size(){  return tableLeft.size();}  }
class C{  public String toString(){  return "null";}  }
class C{  public LSDBC(DistanceMetric dm,double alpha,int neighbors){  setDistanceMetric(dm);  setAlpha(alpha);  setNeighbors(neighbors);}  }
class C{  public boolean InsertProc(AST.Procedure proc){  int i=FindProc(proc.name);  if (i < procs.size())   return false;  ProcedureEntry pe=new ProcedureEntry(proc);  procs.addElement(pe);  return true;}  }
class C{  private int calcAlpha(){  int alpha=255;  if (mSafeZone == null || mSafeZone.right == mSafeZone.left) {  } else {    int backWidth=mSafeZone.right - mConf.getThumbWidth() - mSafeZone.left;    if (backWidth > 0) {      alpha=(mThumbZone.left - mSafeZone.left) * 255 / backWidth;    }  }  return alpha;}  }
class C{  public void sendSprogMessage(SprogMessage m){  try {    if (ostream != null) {      ostream.write(m.getFormattedMessage(sprogState));    } else {      log.warn("sendMessage: no connection established");    }  } catch (  Exception e) {    log.warn("sendMessage: Exception: " + e.toString());  }}  }
class C{  public void casToTcfWriter(JCas aJCas,OutputStream aOs) throws WLFormatException {  TextCorpusStored textCorpus=new TextCorpusStored(aJCas.getDocumentLanguage());  textCorpus.createTextLayer().addText(aJCas.getDocumentText());  write(aJCas,textCorpus);  WLData wldata=new WLData(textCorpus);  WLDObjector.write(wldata,aOs);}  }
class C{  @Override public int put(final List<T> buffer,final int from,final int to) throws IOException {  int i=from;  while (i < to && queue.offer(buffer.get(i))) {    i++;  }  return i - from;}  }
class C{  public boolean hasChannels(){  return getChannels() != null;}  }
class C{  public static void updateOnlineConfig(final Context context){  init(context);  try {    if (aidlService != null) {      aidlService.updateConfig();    } else {      cacheEventList.add(new AIDLCacheEvent(EventType.UPDATE_ONLINE_CONFIG));    }  } catch (  RemoteException e) {    EventManager.onError(context,e.getMessage());    Ln.e("EventManager == ","updateOnlineConfig == ",e);  }}  }
class C{  public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {  boolean lenient=json.isLenient();  json.setLenient(true);  try {    return Streams.parse(json);  } catch (  StackOverflowError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  }catch (  OutOfMemoryError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  } finally {    json.setLenient(lenient);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();}throw new IllegalStateException();}  }
class C{  @Override protected void initData(){}  }
class C{  protected boolean isLevelEnabled(int logLevel){  return (logLevel >= currentLogLevel);}  }
class C{  private void validateNested(int key,EnumType val,boolean registered) throws Exception {  if (registered) {    EnumHolder res1=(EnumHolder)cache1.get(key);    EnumHolder res2=(EnumHolder)cache2.get(key);    assertEquals(val,res1.val);    assertEquals(val,res2.val);  }  BinaryObject resBinary1=(BinaryObject)cacheBinary1.get(key);  BinaryObject resBinary2=(BinaryObject)cacheBinary2.get(key);  validate((BinaryObject)resBinary1.field("val"),val);  validate((BinaryObject)resBinary2.field("val"),val);}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:00.276 -0500",hash_original_method="2C9B75B7F79417EB76D61370935CF9C8",hash_generated_method="3AE19D79D78EAE178365F31896C94E06") public void updateDynamicallyConfigurableProperties(AccessibilityServiceInfo other){  eventTypes=other.eventTypes;  packageNames=other.packageNames;  feedbackType=other.feedbackType;  notificationTimeout=other.notificationTimeout;  flags=other.flags;}  }
class C{  protected ShaderVar addVarying(IGlobalShaderVar var,int index){  return addVarying(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  private static boolean packageMatches(ResolveInfo app,ProcessError err){  final String appPkg=app.activityInfo.packageName;  final String errPkg=err.info.processName;  Log.d(TAG,String.format("packageMatches(%s, %s)",appPkg,errPkg));  return appPkg.equals(errPkg);}  }
class C{  @Override public void modifyVariableId(String nodeId,String newId){  Map<Assignment,UtilityEstimate> utilities2=new HashMap<Assignment,UtilityEstimate>();  for (  Assignment a : table.keySet()) {    Assignment b=new Assignment();    for (    String var : a.getVariables()) {      String newVar=(var.equals(nodeId)) ? newId : var;      b.addPair(newVar,a.getValue(var));    }    utilities2.put(b,table.get(a));  }  table=utilities2;}  }
class C{  public void append(int key,long value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    long[] nvalues=new long[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public byte[] nextBuffer(int offset) throws IOException {  _writeLength=0;  if (_source != null) {    _source.write(_writeBuffer,0,offset,false);    _position+=offset;    _isFlushRequired=true;  } else {    _position+=offset;  }  if (_implicitFlush) {    flush();  }  return _writeBuffer;}  }
class C{  public ArffTable(TableModel model){  super(model);  setAutoResizeMode(JTable.AUTO_RESIZE_OFF);}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  public double eval(double params[]){  return (Math.pow(10.0,params[0]));}  }
class C{  public static String httpPostString(String httpUrl,Map<String,String> parasMap){  HttpResponse response=httpPost(new HttpRequest(httpUrl,parasMap));  return response == null ? null : response.getResponseBody();}  }
class C{  public static String toString(Map<String,Object> map){  if (map == null) {    return "null";  }  if (map.isEmpty()) {    return "";  }  StringBuilder buf=new StringBuilder();  String delimiter="";  for (  Map.Entry<String,Object> entry : map.entrySet()) {    buf.append(delimiter);    buf.append(entry.getKey());    buf.append("=");    if (entry.getValue() instanceof EventBean) {      buf.append(EventBeanUtility.summarize((EventBean)entry.getValue()));    } else     if (entry.getValue() instanceof EventBean[]) {      buf.append(EventBeanUtility.summarize((EventBean[])entry.getValue()));    } else     if (entry.getValue() == null) {      buf.append("null");    } else {      buf.append(entry.getValue().toString());    }    delimiter=", ";  }  return buf.toString();}  }
class C{  private static void run(Recurrence recur,DateValue start,DateValue[] expected){  run(recur,start,UTC,null,expected);}  }
class C{  public EcuCodeList(String resourceBundleName,int idRadix){  this(resourceBundleName);  radix=idRadix;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  return multiTouchController.onTouchEvent(event);}  }
class C{  public LogCollectingService(Service<? super I,? extends O> delegate,MessageLogConsumer consumer){  super(delegate);  this.consumer=requireNonNull(consumer,"consumer");}  }
class C{  public static InjectorImpl create(){  return create(Thread.currentThread().getContextClassLoader());}  }
class C{  public static String indent(int numChars){  if (numChars < 0) {    throw new IllegalArgumentException("Number of characters less then zero");  }  char[] buf=new char[numChars];  Arrays.fill(buf,' ');  return String.valueOf(buf);}  }
class C{  public void loadChatFile(InputStream stream,String format,String encoding,int maxSize,boolean processUnderstanding,boolean pin){  try {    String text=Utils.loadTextFile(stream,encoding,maxSize);    loadChat(text,format,processUnderstanding,pin);  } catch (  BotException exception) {    throw exception;  }catch (  Exception exception) {    throw new BotException(exception);  }}  }
class C{  protected SesameSession createHTTPClient(){  SesameSession httpClient=getSesameClient().createSesameSession(serverURL);  httpClient.setValueFactory(SimpleValueFactory.getInstance());  if (repositoryURL != null) {    httpClient.setRepository(repositoryURL);  }  if (tupleFormat != null) {    httpClient.setPreferredTupleQueryResultFormat(tupleFormat);  }  if (rdfFormat != null) {    httpClient.setPreferredRDFFormat(rdfFormat);  }  if (username != null) {    httpClient.setUsernameAndPassword(username,password);  }  return httpClient;}  }
class C{  public AccessibilityNodeInfoRef makeOwned(){  if (mNode != null && !mOwned) {    reset(AccessibilityNodeInfoCompat.obtain(mNode));  }  return this;}  }
class C{  public ConjGoal interleave(Goal g1,Goal... gs){  Goal[] newAllGoals=new Goal[gs.length + allGoals.length + 1];  int newI=0;  int thisI=0;  newAllGoals[newI++]=allGoals[thisI++];  newAllGoals[newI++]=g1;  int thatI=0;  while (newI < newAllGoals.length) {    if (thisI < allGoals.length) {      newAllGoals[newI++]=allGoals[thisI++];    }    if (thatI < gs.length) {      newAllGoals[newI++]=gs[thatI++];    }  }  return new ConjGoal(newAllGoals);}  }
class C{  public void addNewDefinitions(String definitions,String attributeName){  if (definitions.trim().length() == 0) {    return;  }  tlaBuffer.append(COMMENT).append("New definitions ").append(ATTRIBUTE).append(attributeName).append(CR);  tlaBuffer.append(definitions).append(CR).append(SEP).append(CR);}  }
class C{  public Boolean isJitEnabled(){  return this.jitEnabled;}  }
class C{  public ClassFile(boolean isInterface,String classname,String superclass){  major=MAJOR_VERSION;  minor=0;  constPool=new ConstPool(classname);  thisClass=constPool.getThisClassInfo();  if (isInterface)   accessFlags=AccessFlag.INTERFACE | AccessFlag.ABSTRACT; else   accessFlags=AccessFlag.SUPER;  initSuperclass(superclass);  interfaces=null;  fields=new ArrayList();  methods=new ArrayList();  thisclassname=classname;  attributes=new ArrayList();  attributes.add(new SourceFileAttribute(constPool,getSourcefileName(thisclassname)));}  }
class C{  public static Mapping<BigDecimal> bigDecimal(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("bigDecimal",BigDecimal.class)).constraint(checking(null,"error.bigdecimal",true)).constraint(constraints);}  }
class C{  public StorageUnitNotificationRegistrationEntity createStorageUnitNotificationRegistrationEntity(NotificationRegistrationKey notificationRegistrationKey,String notificationEventTypeCode,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String storageName,String newStorageUnitStatus,String oldStorageUnitStatus,List<JobAction> jobActions,String notificationRegistrationStatus){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(notificationRegistrationKey.getNamespace());  if (namespaceEntity == null) {    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(notificationRegistrationKey.getNamespace());  }  NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventTypeCode);  if (notificationEventTypeEntity == null) {    notificationEventTypeEntity=createNotificationEventTypeEntity(notificationEventTypeCode);  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.BDEF_DESCRIPTION);  }  FileTypeEntity fileTypeEntity=null;  if (StringUtils.isNotBlank(businessObjectFormatFileType)) {    fileTypeEntity=fileTypeDao.getFileTypeByCode(businessObjectFormatFileType);    if (fileTypeEntity == null) {      fileTypeEntity=fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  StorageEntity storageEntity=storageDao.getStorageByName(storageName);  if (storageEntity == null) {    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);  }  StorageUnitStatusEntity newStorageUnitStatusEntity=null;  if (StringUtils.isNotBlank(newStorageUnitStatus)) {    newStorageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(newStorageUnitStatus);    if (newStorageUnitStatusEntity == null) {      newStorageUnitStatusEntity=storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(newStorageUnitStatus);    }  }  StorageUnitStatusEntity oldStorageUnitStatusEntity=null;  if (StringUtils.isNotBlank(oldStorageUnitStatus)) {    oldStorageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(oldStorageUnitStatus);    if (oldStorageUnitStatusEntity == null) {      oldStorageUnitStatusEntity=storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(oldStorageUnitStatus);    }  }  NotificationRegistrationStatusEntity notificationRegistrationStatusEntity=notificationRegistrationStatusDao.getNotificationRegistrationStatus(notificationRegistrationStatus);  if (notificationRegistrationStatusEntity == null) {    notificationRegistrationStatusEntity=createNotificationRegistrationStatusEntity(notificationRegistrationStatus);  }  StorageUnitNotificationRegistrationEntity storageUnitNotificationRegistrationEntity=new StorageUnitNotificationRegistrationEntity();  storageUnitNotificationRegistrationEntity.setNamespace(namespaceEntity);  storageUnitNotificationRegistrationEntity.setName(notificationRegistrationKey.getNotificationName());  storageUnitNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);  storageUnitNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  storageUnitNotificationRegistrationEntity.setUsage(businessObjectFormatUsage);  storageUnitNotificationRegistrationEntity.setFileType(fileTypeEntity);  storageUnitNotificationRegistrationEntity.setBusinessObjectFormatVersion(businessObjectFormatVersion);  storageUnitNotificationRegistrationEntity.setStorage(storageEntity);  storageUnitNotificationRegistrationEntity.setNewStorageUnitStatus(newStorageUnitStatusEntity);  storageUnitNotificationRegistrationEntity.setOldStorageUnitStatus(oldStorageUnitStatusEntity);  storageUnitNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);  if (!CollectionUtils.isEmpty(jobActions)) {    List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();    storageUnitNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);    for (    JobAction jobAction : jobActions) {      JobDefinitionEntity jobDefinitionEntity=jobDefinitionDao.getJobDefinitionByAltKey(jobAction.getNamespace(),jobAction.getJobName());      if (jobDefinitionEntity == null) {        jobDefinitionEntity=jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format("Description of \"%s.%s\" job definition.",jobAction.getNamespace(),jobAction.getJobName()),String.format("%s.%s.%s",jobAction.getNamespace(),jobAction.getJobName(),AbstractDaoTest.ACTIVITI_ID));      }      NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();      notificationActionEntities.add(notificationJobActionEntity);      notificationJobActionEntity.setNotificationRegistration(storageUnitNotificationRegistrationEntity);      notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);      notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());    }  }  return storageUnitNotificationRegistrationDao.saveAndRefresh(storageUnitNotificationRegistrationEntity);}  }
class C{  public void reset(){  this.currentList.clear();  this.currentList.add(root);}  }
class C{  public Optional<ChangeEdit> byChange(Change change) throws AuthException, IOException, OrmException {  try {    return byChange(changeControlFactory.controlFor(db.get(),change,user.get()));  } catch (  NoSuchChangeException e) {    throw new IOException(e);  }}  }
class C{  private static int read(Socket s,InputStream in) throws IOException {  try {    s.setSoTimeout(8000);    return in.read();  }  finally {    s.setSoTimeout(0);  }}  }
class C{  public E points(Coordinate... coordinates){  return this.points(Arrays.asList(coordinates));}  }
class C{  protected void deliveryReceiveCompleted(ReceivePacket packet){  if (mReceiveListener != null)   mReceiveListener.onReceiveCompleted(this,packet);}  }
class C{  public IpInfo(){}  }
class C{  public synchronized int read() throws IOException {  if (this.flow != null) {    try {      this.flow.acquire(1);    } catch (    InterruptedException exception) {      logger.error(exception);      this.close();      throw new IOException(exception);    }catch (    RegulationException exception) {      logger.error(exception);      this.close();      throw exception;    }  }  if (pos >= count) {    fill();    if (pos >= count)     return -1;  }  if (listener != null)   listener.bytesTransferred(pos,1,this.connectionParameters.getStreamSize());  return getBufIfOpen()[pos++] & 0xff;}  }
class C{  public FJListObjectIntProcedureTask(FJListObjectIntProcedureRunner<T,PT> newFJTaskRunner,ObjectIntProcedureFactory<PT> newBlockFactory,List<T> list,int index,int sectionSize,boolean isLast){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=newBlockFactory;  this.list=list;  this.start=index * sectionSize;  this.end=isLast ? this.list.size() - 1 : this.start + sectionSize - 1;}  }
class C{  public void appendBar(BarData bar){  barVector.add(bar);}  }
class C{  private void pinDayOfMonth(LocalGregorianCalendar.Date date){  int year=date.getYear();  int dom=date.getDayOfMonth();  if (year != getMinimum(YEAR)) {    date.setDayOfMonth(1);    jcal.normalize(date);    int monthLength=jcal.getMonthLength(date);    if (dom > monthLength) {      date.setDayOfMonth(monthLength);    } else {      date.setDayOfMonth(dom);    }    jcal.normalize(date);  } else {    LocalGregorianCalendar.Date d=jcal.getCalendarDate(Long.MIN_VALUE,getZone());    LocalGregorianCalendar.Date realDate=jcal.getCalendarDate(time,getZone());    long tod=realDate.getTimeOfDay();    realDate.addYear(+400);    realDate.setMonth(date.getMonth());    realDate.setDayOfMonth(1);    jcal.normalize(realDate);    int monthLength=jcal.getMonthLength(realDate);    if (dom > monthLength) {      realDate.setDayOfMonth(monthLength);    } else {      if (dom < d.getDayOfMonth()) {        realDate.setDayOfMonth(d.getDayOfMonth());      } else {        realDate.setDayOfMonth(dom);      }    }    if (realDate.getDayOfMonth() == d.getDayOfMonth() && tod < d.getTimeOfDay()) {      realDate.setDayOfMonth(Math.min(dom + 1,monthLength));    }    date.setDate(year,realDate.getMonth(),realDate.getDayOfMonth());  }}  }
class C{  public HighlightBuilder numOfFragments(Integer numOfFragments){  this.numOfFragments=numOfFragments;  return this;}  }
class C{  public UserNotifications splitNotifications(@Nonnull final String username,@Nonnull final SortedSet<Notification> notifications) throws NotificationStoreException {  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  if (notifications == null || notifications.isEmpty()) {    return new UserNotifications();  }  final long newestId=notifications.first().getId(0L);  LOGGER.debug("Newest notification ID: {}",newestId);  final Map<String,Rule> rules=ruleStore.fetchCached();  LOGGER.debug("Fetched {} rules from cache",rules.size());  final Rollup unseenRollup=new Rollup(rules);  final Optional<Long> cursor=cursors.fetch(username,CURSOR_NAME);  if (!cursor.isPresent()) {    LOGGER.debug("User ({}) has no cursor",username);    LOGGER.debug("Updating cursor to {}",newestId);    cursors.store(username,CURSOR_NAME,newestId);    return new UserNotifications(unseenRollup.rollup(setUnseenState(notifications,true)));  }  final long lastSeenId=cursor.orElse(0L);  LOGGER.debug("Last seen notification ID: {}",lastSeenId);  if (lastSeenId < newestId) {    LOGGER.debug("Updating cursor to {}",newestId);    cursors.store(username,CURSOR_NAME,newestId);  }  final Optional<Notification> lastNotification=tryFind(notifications,lastSeenId);  if (!lastNotification.isPresent()) {    return new UserNotifications(unseenRollup.rollup(setUnseenState(notifications,true)));  }  final Stream<Notification> unseen=setUnseenState(notifications.headSet(lastNotification.get()),true);  final Stream<Notification> seen=setUnseenState(notifications.tailSet(lastNotification.get()),false);  final Rollup seenRollup=new Rollup(rules);  return new UserNotifications(unseenRollup.rollup(unseen),seenRollup.rollup(seen));}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  public synchronized void logWarn(String className,String msg){  AtMostOnceLogger.warn(logger,msg);}  }
class C{  public static IBinding resolveExpressionBinding(Expression expression,boolean goIntoCast){switch (expression.getNodeType()) {case ASTNode.SIMPLE_NAME:case ASTNode.QUALIFIED_NAME:    return ((Name)expression).resolveBinding();case ASTNode.FIELD_ACCESS:  return ((FieldAccess)expression).resolveFieldBinding();case ASTNode.SUPER_FIELD_ACCESS:return ((SuperFieldAccess)expression).resolveFieldBinding();case ASTNode.METHOD_INVOCATION:return ((MethodInvocation)expression).resolveMethodBinding();case ASTNode.SUPER_METHOD_INVOCATION:return ((SuperMethodInvocation)expression).resolveMethodBinding();case ASTNode.CLASS_INSTANCE_CREATION:return ((ClassInstanceCreation)expression).resolveConstructorBinding();case ASTNode.MARKER_ANNOTATION:case ASTNode.SINGLE_MEMBER_ANNOTATION:case ASTNode.NORMAL_ANNOTATION:return ((Annotation)expression).resolveAnnotationBinding();case ASTNode.ARRAY_ACCESS:return resolveExpressionBinding(((ArrayAccess)expression).getArray(),goIntoCast);case ASTNode.CAST_EXPRESSION:if (goIntoCast) {return resolveExpressionBinding(((CastExpression)expression).getExpression(),true);} else {return null;}case ASTNode.PARENTHESIZED_EXPRESSION:return resolveExpressionBinding(((ParenthesizedExpression)expression).getExpression(),goIntoCast);case ASTNode.PREFIX_EXPRESSION:return resolveExpressionBinding(((PrefixExpression)expression).getOperand(),goIntoCast);case ASTNode.POSTFIX_EXPRESSION:return resolveExpressionBinding(((PostfixExpression)expression).getOperand(),goIntoCast);default :return null;}}  }
class C{  public void test_minLjava_util_CollectionLjava_util_Comparator(){  ReversedMyIntComparator rmic=new ReversedMyIntComparator();  assertTrue("Returned incorrect min element using custom comparator",Collections.min(mys,rmic) == myobjArray[objArray.length - 1]);  ArrayList al=new ArrayList();  try {    Collections.min(al,rmic);    fail("NoSuchElementException expected");  } catch (  NoSuchElementException e) {  }  al.add("String");  al.add(new Integer(1));  al.add(new Double(3.14));  try {    Collections.min(al,rmic);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public static final Parameter base(){  return new Parameter(P_EDA);}  }
class C{  private boolean containsNullValue(){  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;  return false;}  }
class C{  public static void clearCache(){  softCache=new SoftReference<String[]>(null);}  }
class C{  @Deprecated public void rememberChange(final Vector position,final BaseBlock existing,final BaseBlock block){  ChangeSet changeSet=getChangeSet();  if (changeSet != null) {    changeSet.add(new BlockChange(position.toBlockVector(),existing,block));  }}  }
class C{  @Override protected void generateIntermediatePositions(DrawContext dc,Iterable<? extends Position> positions){  Globe globe=dc.getGlobe();  boolean useDefaultWaveLength=false;  double waveLength=this.getWaveLength();  if (waveLength == 0) {    waveLength=this.computeDefaultWavelength(positions,globe);    useDefaultWaveLength=true;  }  List<Position> leftPositions=new ArrayList<Position>();  List<Position> rightPositions=new ArrayList<Position>();  this.generateParallelLines(positions.iterator(),leftPositions,rightPositions,waveLength / 2.0,globe);  if (useDefaultWaveLength)   waveLength=this.computeDefaultWavelength(leftPositions,globe);  double radius=(waveLength) / 2.0;  PositionIterator iterator=new PositionIterator(leftPositions,waveLength,globe);  this.computedPositions=this.generateWavePositions(iterator,radius / globe.getRadius(),false);  this.path.setPositions(this.computedPositions);  if (useDefaultWaveLength)   waveLength=this.computeDefaultWavelength(rightPositions,globe);  radius=(waveLength) / 2.0;  iterator=new PositionIterator(rightPositions,waveLength,globe);  this.path2.setPositions(this.generateWavePositions(iterator,radius / globe.getRadius(),true));}  }
class C{  public void startInplaceEditing(final int x,final int y){  final RadComponent inplaceComponent=FormEditingUtil.getRadComponentAt(myEditor.getRootContainer(),x,y);  if (inplaceComponent == null) {    return;  }  final Point p=SwingUtilities.convertPoint(this,x,y,inplaceComponent.getDelegee());  final Property inplaceProperty=inplaceComponent.getInplaceProperty(p.x,p.y);  if (inplaceProperty != null) {    final Rectangle bounds=inplaceComponent.getInplaceEditorBounds(inplaceProperty,p.x,p.y);    startInplaceEditing(inplaceComponent,inplaceProperty,bounds,new InplaceContext(true));  }}  }
class C{  public boolean hasProperty(int param){  if (param < 0 || param > 31) {    return false;  } else {    return (bits & (1 << param)) != 0;  }}  }
class C{  public String spreadInitialCountTipText(){  return "Spread initial count across all values instead of using the count per value.";}  }
class C{  public static void main(String[] argv){  runClassifier(new RandomTree(),argv);}  }
class C{  public void testFieldsAndNoObject(){  final Collection<PyPresenterTestMemberEntry> members=launchAndGetMembers("Child");  final Matcher<Iterable<? extends PyPresenterTestMemberEntry>> matcher=Matchers.containsInAnyOrder(new PyPresenterTestMemberEntry("CLASS_VAR",true,true,false),new PyPresenterTestMemberEntry("eggs(self)",true,false,true),new PyPresenterTestMemberEntry("__init__(self)",true,false,false),new PyPresenterTestMemberEntry("self.artur",true,false,false),new PyPresenterTestMemberEntry("extends date",true,false,false));  compareMembers(members,matcher);}  }
class C{  public static String millisToString(long millis){  return Strings.millisToString(millis,false);}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    cipher.init(true,ivParam.getParameters());  } else {    reset();    cipher.init(true,params);  }}  }
class C{  public synchronized void mark(int readlimit){}  }
class C{  public int match(final AuthScope that){  int factor=0;  if (paramsEqual(scheme,that.scheme)) {    factor+=1;  } else {    if (scheme != ANY_SCHEME && that.scheme != ANY_SCHEME) {      return -1;    }  }  if (paramsEqual(port,that.port)) {    factor+=4;  } else {    if (port != ANY_PORT && that.port != ANY_PORT) {      return -1;    }  }  if (paramsEqual(host,that.host)) {    factor+=8;  } else {    if (host != ANY_HOST && that.host != ANY_HOST) {      return -1;    }  }  return factor;}  }
class C{  public ResourceException(){}  }
class C{  public Flag register(final Flag flag){  if (flag instanceof AnonymousFlag) {    mAnonymousFlags.add(flag);    mRegisteredFlags.add(flag);  } else {    if (mLongNames.containsKey(flag.getName())) {      throw new IllegalArgumentException("A flag named " + flag.getName() + " already exists.");    }    if (flag.getChar() != null) {      if (mShortNames.containsKey(flag.getChar())) {        throw new IllegalArgumentException("A flag with short name " + flag.getChar() + " already exists.");      }      mShortNames.put(flag.getChar(),flag);    }    mRegisteredFlags.add(flag);    mLongNames.put(flag.getName(),flag);  }  return flag;}  }
class C{  private void initializeLayout(){  GridLayout layout=new GridLayout(0,2);  layout.setVgap(DEFAULT_VGAP);  layout.setHgap(DEFAULT_HGAP);  this.setLayout(layout);  this.add(idLabel);  this.add(idField);  this.add(nameLabel);  this.add(nameField);  this.add(populationLabel);  if (isEditable()) {    this.add(editablePopulationField);  } else {    this.add(populationField);  }  if (group instanceof SynapseGroup) {    this.add(new JLabel("Optimize as Group:"));    this.add(useGlobalSettings);  }  if (group instanceof NeuronGroup && !editable) {    this.add(new JLabel("Input Mode:"));    this.add(inputMode);  }  this.add(excitatoryTypeLabel);  this.add(excitatoryTypeField);  if (group instanceof SynapseGroup || inhibitoryTypeLabel.isVisible()) {    this.add(inhibitoryTypeLabel);    this.add(inhibitoryTypeField);  }  if (!isEditable()) {    this.add(parentGroupLabel);    this.add(parentGroupField);    if (group instanceof SynapseGroup || inhibitoryTypeLabel.isVisible()) {      this.add(incomingGroupLabel);      this.add(incomingField);      this.add(outgoingGroupLabel);      this.add(outgoingField);    }  }  this.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));}  }
class C{  @SideEffectFree public void logrb(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String bundleName,@Nullable String msg,@Nullable Object params[]){  throw new RuntimeException();}  }
class C{  private double calculateLogLikelihood(){  if (exclude != null) {    return speciationModel.calculateTreeLogLikelihood(tree,exclude);  }  if (calibration != null) {    return speciationModel.calculateTreeLogLikelihood(tree,calibration);  }  return speciationModel.calculateTreeLogLikelihood(tree);}  }
class C{  private void unregister(final CGraphWindow window){  if (!m_graphs.remove(window)) {    throw new IllegalStateException("IE01206: Graph window wasn't registered");  }  for (  final IWindowManagerListener listener : m_listeners) {    try {      listener.windowClosed(this,window);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);      NaviLogger.severe("Internal Error: Listener caused an unknown exception");    }  }}  }
class C{  @Override public boolean retainAll(Collection<?> collection){  int size=size();  Iterator it=iterator();  boolean changed=false;  while (size-- > 0) {    if (!collection.contains(it.next())) {      it.remove();      changed=true;    }  }  return changed;}  }
class C{  protected boolean hasTwoByTwo(int index){  return ((getFlag(index) & WE_HAVE_A_TWO_BY_TWO) != 0);}  }
class C{  public InjectionProviderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public MediaFileType parseType(){  String ext=getExtension().toLowerCase();  String basename=FilenameUtils.getBaseName(getFilename());  String foldername=FilenameUtils.getBaseName(getPath()).toLowerCase();  if (ext.equals("nfo")) {    return MediaFileType.NFO;  }  if (ext.equals("jpg") || ext.equals("jpeg") || ext.equals("png")|| ext.equals("tbn")) {    return parseImageType();  }  if (Globals.settings.getAudioFileType().contains("." + ext)) {    return MediaFileType.AUDIO;  }  if (Globals.settings.getSubtitleFileType().contains("." + ext)) {    return MediaFileType.SUBTITLE;  }  if (Globals.settings.getVideoFileType().contains("." + ext)) {    if (getFilename().contains(".EXTRAS.") || basename.matches("(?i).*[_.-]+extra[s]?$") || basename.matches("(?i).*[-]+extra[s]?[-].*")|| foldername.equalsIgnoreCase("extras")|| foldername.equalsIgnoreCase("extra")|| basename.matches("(?i).*[-](behindthescenes|deleted|featurette|interview|scene|short)$")|| PLEX_EXTRA_FOLDERS.contains(foldername)) {      return MediaFileType.VIDEO_EXTRA;    }    if (basename.matches("(?i).*[_.-]*trailer?$") || foldername.equalsIgnoreCase("trailer")) {      return MediaFileType.TRAILER;    }    if (basename.matches("(?i).*[_.-]*sample$") || foldername.equalsIgnoreCase("sample")) {      return MediaFileType.SAMPLE;    }    return MediaFileType.VIDEO;  }  if (ext.equals("txt")) {    return MediaFileType.TEXT;  }  return MediaFileType.UNKNOWN;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public void updateScreen(){  if (currentPageLeft != null)   currentPageLeft.updateScreen();  if (currentPageRight != null)   currentPageRight.updateScreen();}  }
class C{  public static ParamType serializableInstance(){  return ParamType.COEF;}  }
class C{  public DuplicateAction(){  this(null);}  }
class C{  public ModifySubscriptionResponse clone(){  ModifySubscriptionResponse result=new ModifySubscriptionResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.RevisedPublishingInterval=RevisedPublishingInterval;  result.RevisedLifetimeCount=RevisedLifetimeCount;  result.RevisedMaxKeepAliveCount=RevisedMaxKeepAliveCount;  return result;}  }
class C{  public static void executeQuery(Properties ctx,IMiniTable miniTable){  StringBuffer sqlQuery=new StringBuffer("SELECT DISTINCT o.Name,hp.Name," + " bp.Name,hc.Name,hm.ValidFrom," + "(" + getSQL_ColumnType(ctx,"hc.ColumnType") + ") AS ColumnType,"+ " hm.Qty,hm.Amount,hm.ServiceDate,hm.TextMsg,er.Name,hm.Description "+ " , HR_Movement_id, hm.AD_Org_ID,hp.HR_Process_ID,hm.HR_Concept_ID "+ " FROM HR_Movement hm "+ " INNER JOIN AD_Org o ON (hm.AD_Org_ID=o.AD_Org_ID)"+ " INNER JOIN HR_Process hp ON (hm.HR_Process_ID=hp.HR_Process_ID)"+ " INNER JOIN C_BPartner bp ON (hm.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN HR_Employee e ON (e.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN HR_Concept hc ON (hm.HR_Concept_ID=hc.HR_Concept_ID)"+ " LEFT OUTER JOIN AD_Rule er ON (hm.AD_Rule_ID=er.AD_Rule_ID)"+ " WHERE hm.Processed='N' AND hp.HR_Process_ID = "+ m_HR_Process_ID+ " AND hm.C_BPartner_ID = "+ m_C_BPartner_ID);  sqlQuery.append(" ORDER BY hm.AD_Org_ID,hp.HR_Process_ID,bp.Name,hm.ValidFrom,hm.HR_Concept_ID");  int row=0;  miniTable.setRowCount(row);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sqlQuery.toString(),null);    rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setColumnClass(0,IDColumn.class,false," ");      miniTable.setValueAt(rs.getString(1),row,1);      miniTable.setValueAt(rs.getString(4),row,2);      miniTable.setValueAt(rs.getTimestamp(5),row,3);      miniTable.setValueAt(rs.getString(6),row,4);      miniTable.setValueAt(rs.getObject(7) != null ? rs.getBigDecimal(7) : Env.ZERO,row,5);      miniTable.setValueAt(rs.getObject(8) != null ? rs.getBigDecimal(8) : Env.ZERO,row,6);      miniTable.setValueAt(rs.getTimestamp(9),row,7);      miniTable.setValueAt(rs.getString(10),row,8);      miniTable.setValueAt(rs.getString(12),row,9);      row++;    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sqlQuery.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  miniTable.autoSize();}  }
class C{  @Override public void initiateSpeculativeRequest(final ScheduledExecutorService scheduler,final SpeculativeRequestExecutor requestExecutor){  issueSpeculativeRequest(scheduler,requestExecutor);}  }
class C{  private void paint(SeaGlassContext context,Graphics g){  String title=frame.getTitle();  if (title != null) {    SynthStyle style=context.getStyle();    Color color=style.getColor(context,ColorType.TEXT_FOREGROUND);    if ((context.getComponentState() & 512) != 0) {      Object obj=style.get(context,"[WindowFocused].textForeground");      if (obj != null && obj instanceof Color) {        color=(Color)obj;      }      color=Color.WHITE;    }    g.setColor(color);    g.setFont(style.getFont(context));    FontMetrics fm=SwingUtilities2.getFontMetrics(frame,g);    int baseline=(getHeight() + fm.getAscent() - fm.getLeading() - fm.getDescent()) / 2;    JButton lastButton=null;    if (frame.isIconifiable()) {      lastButton=iconButton;    } else     if (frame.isMaximizable()) {      lastButton=maxButton;    } else     if (frame.isClosable()) {      lastButton=closeButton;    }    int maxX;    int minX;    boolean ltr=SeaGlassLookAndFeel.isLeftToRight(frame);    if (ltr) {      if (lastButton != null) {        maxX=lastButton.getX() - titleSpacing;      } else {        maxX=frame.getWidth() - frame.getInsets().right - titleSpacing;      }      minX=menuButton.getX() + menuButton.getWidth() + titleSpacing;    } else {      if (lastButton != null) {        minX=lastButton.getX() + lastButton.getWidth() + titleSpacing;      } else {        minX=frame.getInsets().left + titleSpacing;      }      maxX=menuButton.getX() - titleSpacing;    }    String clippedTitle=getTitle(title,fm,maxX - minX);    if (clippedTitle == title) {      int width=style.getGraphicsUtils(context).computeStringWidth(context,g.getFont(),fm,title);      minX=Math.max(minX,(getWidth() - width) / 2);      minX=Math.min(maxX - width,minX);    }    style.getGraphicsUtils(context).paintText(context,g,clippedTitle,minX,baseline - fm.getAscent(),-1);  }}  }
class C{  protected void paintComponent(Graphics g){  int xLoc=PADDING, yLoc=PADDING;  long startTime, endTime;  float totalTime;  int iterations=10;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);  startTime=System.nanoTime();  for (int i=0; i < iterations; ++i) {    g.drawImage(picture,xLoc,yLoc,scaleW,scaleH,null);  }  endTime=System.nanoTime();  totalTime=(float)((endTime - startTime) / 1000000) / iterations;  g.drawString("NEAREST ",xLoc,yLoc + scaleH + PADDING);  g.drawString(Float.toString(totalTime) + " ms",xLoc,yLoc + scaleH + PADDING+ 10);  System.out.println("NEAREST: " + ((endTime - startTime) / 1000000));  xLoc+=scaleW + PADDING;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  startTime=System.nanoTime();  for (int i=0; i < iterations; ++i) {    g.drawImage(picture,xLoc,yLoc,scaleW,scaleH,null);  }  endTime=System.nanoTime();  totalTime=(float)((endTime - startTime) / 1000000) / iterations;  g.drawString("BILINEAR",xLoc,yLoc + scaleH + PADDING);  g.drawString(Float.toString(totalTime) + " ms",xLoc,yLoc + scaleH + PADDING+ 10);  System.out.println("BILINEAR: " + ((endTime - startTime) / 1000000));  xLoc+=scaleW + PADDING;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);  startTime=System.nanoTime();  for (int i=0; i < iterations; ++i) {    g.drawImage(picture,xLoc,yLoc,scaleW,scaleH,null);  }  endTime=System.nanoTime();  totalTime=(float)((endTime - startTime) / 1000000) / iterations;  g.drawString("BICUBIC",xLoc,yLoc + scaleH + PADDING);  g.drawString(Float.toString(totalTime) + " ms",xLoc,yLoc + scaleH + PADDING+ 10);  System.out.println("BICUBIC: " + ((endTime - startTime) / 1000000));  xLoc+=scaleW + PADDING;  startTime=System.nanoTime();  for (int i=0; i < iterations; ++i) {    Image scaledPicture=picture.getScaledInstance(scaleW,scaleH,Image.SCALE_AREA_AVERAGING);    g.drawImage(scaledPicture,xLoc,yLoc,null);  }  endTime=System.nanoTime();  totalTime=(float)((endTime - startTime) / 1000000) / iterations;  g.drawString("getScaled",xLoc,yLoc + scaleH + PADDING);  g.drawString(Float.toString(totalTime) + " ms",xLoc,yLoc + scaleH + PADDING+ 10);  System.out.println("getScaled: " + ((endTime - startTime) / 1000000));  xLoc+=scaleW + PADDING;  startTime=System.nanoTime();  for (int i=0; i < iterations; ++i) {    Image scaledPicture=getFasterScaledInstance(picture,scaleW,scaleH,RenderingHints.VALUE_INTERPOLATION_BILINEAR,true);    g.drawImage(scaledPicture,xLoc,yLoc,null);  }  endTime=System.nanoTime();  totalTime=(float)((endTime - startTime) / 1000000) / iterations;  g.drawString("Progressive",xLoc,yLoc + scaleH + PADDING);  g.drawString(Float.toString(totalTime) + " ms",xLoc,yLoc + scaleH + PADDING+ 10);  System.out.println("Progressive: " + ((endTime - startTime) / 1000000));}  }
class C{  private static Map<String,LanguageCache> initializeLanguages(final ClassLoader loader){  Map<String,LanguageCache> map;  map=createLanguages(loader);  for (  LanguageCache info : map.values()) {    info.createLanguage();  }  return map;}  }
class C{  public void addProperties(Properties p){  String[] specialProps=new String[]{Environment.OpenMapPrefix + "." + LayerHandler.layersProperty,Environment.OpenMapPrefix + "." + LayerHandler.startUpLayersProperty,componentProperty};  Properties tmp=new Properties();  tmp.putAll(p);  for (int i=0; i < specialProps.length; i++) {    prependProperty(specialProps[i],tmp);    tmp.remove(specialProps[i]);  }  getProperties().putAll(tmp);}  }
class C{  public void newPixels(){  newPixels(0,0,width,height,true);}  }
class C{  public static CompletableFuture<ICluster> join(Address... seedMembers){  ClusterConfig config=ClusterConfig.builder().membershipConfig(MembershipConfig.builder().seedMembers(Arrays.asList(seedMembers)).build()).build();  return join(config);}  }
class C{  @Inject public DeleteRepositoryPresenter(GitServiceClient service,GitLocalizationConstant constant,GitOutputPartPresenter console,AppContext appContext,NotificationManager notificationManager,ProjectExplorerPresenter projectExplorer){  this.service=service;  this.constant=constant;  this.console=console;  this.appContext=appContext;  this.notificationManager=notificationManager;  this.projectExplorer=projectExplorer;}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  private static boolean arabicCharShaped(char c){  return arabicCharShapesRight(c);}  }
class C{  private static byte[] readInputStream(InputStream i) throws IOException {  ByteArrayOutputStream b=new ByteArrayOutputStream();  copy(i,b);  return b.toByteArray();}  }
class C{  private NullnessValue createDummyValue(){  TypeMirror dummy=analysis.getEnv().getTypeUtils().getPrimitiveType(TypeKind.BOOLEAN);  Set<AnnotationMirror> annos=AnnotationUtils.createAnnotationSet();  annos.addAll(analysis.getTypeFactory().getQualifierHierarchy().getBottomAnnotations());  return new NullnessValue(analysis,annos,dummy);}  }
class C{  public SVGOMRect(float x,float y,float w,float h){  this.x=x;  this.y=y;  this.w=w;  this.h=h;}  }
class C{  public PTRRecord(Name name,int dclass,long ttl,Name target){  super(name,Type.PTR,dclass,ttl,target,"target");}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public void testJoinWithSameNames(){  ParentJoinMockModel parent=new ParentJoinMockModel();  parent.booleanField=true;  parent.dateField=new Date();  parent.doubleField=2.0;  parent.intField=1;  parent.save();  Date dateValue=new Date();  double doubleValue=30.0;  int intValue=3;  ChildMockModel child1=new ChildMockModel();  child1.booleanField=false;  child1.dateField=dateValue;  child1.doubleField=doubleValue;  child1.intField=intValue;  child1.parent=parent;  child1.save();  ChildMockModel child2=new ChildMockModel();  child2.booleanField=false;  child2.dateField=dateValue;  child2.doubleField=doubleValue;  child2.intField=intValue;  child2.parent=parent;  child2.save();  List<Long> ids=new ArrayList<Long>();  ids.add(child1.getId());  ids.add(child2.getId());  List<ChildMockModel> result=new Select().from(ChildMockModel.class).join(ParentJoinMockModel.class).on("ParentJoinMockModel.Id = ChildMockModel.parent").execute();  assertNotNull(result);  assertEquals(result.size(),2);  for (  ChildMockModel currentModel : result) {    assertFalse(currentModel.booleanField);    assertEquals(currentModel.intField,intValue);    assertEquals(currentModel.doubleField,doubleValue);    assertTrue(ids.contains(currentModel.getId()));  }}  }
class C{  public synchronized void add(double x,double y){  add(x,y,0d);}  }
class C{  private void indent(){  out.print(currentIndention);}  }
class C{  protected Status readStatus() throws IOException {  FileInputStream fileIn=null;  ObjectInputStream objectIn=null;  try {    fileIn=new FileInputStream(new File(workingDirectory,statusFileName));    objectIn=new ObjectInputStream(fileIn);    this.status=(Status)objectIn.readObject();    return this.status;  } catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  } finally {    IOUtils.close(objectIn);    IOUtils.close(fileIn);  }}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public CertAndKeyGen(String keyType,String sigAlg,String providerName) throws NoSuchAlgorithmException, NoSuchProviderException {  if (providerName == null) {    keyGen=KeyPairGenerator.getInstance(keyType);  } else {    try {      keyGen=KeyPairGenerator.getInstance(keyType,providerName);    } catch (    Exception e) {      keyGen=KeyPairGenerator.getInstance(keyType);    }  }  this.sigAlg=sigAlg;}  }
class C{  public boolean explicitCallTransfer(BluetoothDevice device){  if (DBG)   log("explicitCallTransfer()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.explicitCallTransfer(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public FrequencyDistBase(String displayHeader,double endValue,String name){  this.monData.displayHeader=displayHeader;  this.endValue=endValue;  this.monData.name=name;}  }
class C{  public void addGroupAttribute(String groupName,Group group){  addAttribute(ConversionUtil.createAttribute(groupName,group));}  }
class C{  public boolean isTesting(){  return isTesting;}  }
class C{  @Override public void dispose(){  GL20 gl=Gdx.gl20;  gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,0);  gl.glDeleteBuffer(bufferHandle);  bufferHandle=0;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserDao.dropTable(db,ifExists);  MessageDao.dropTable(db,ifExists);}  }
class C{  @SuppressWarnings({"rawtypes"}) public void handleDependency(DependencyTracker tracker,Class sourceClazz,ColumnField field){  log.info("process dependency of class {} field {}",sourceClazz.getSimpleName(),field.getName());  if (field.getIndexRefType().equals(DataObject.class)) {    if (hasMutipleDependencies(field)) {      addMutilpleDependencies(tracker,sourceClazz,field);    }  } else {    addConcretDependencies(tracker,sourceClazz,field);  }}  }
class C{  public boolean hasId(){  return fieldSetFlags()[0];}  }
class C{  public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  private void checkForUnconditionallyDereferencedNullValues(Location thisLocation,Map<ValueNumber,SortedSet<Location>> knownNullAndDoomedAt,Map<ValueNumber,NullValueUnconditionalDeref> nullValueGuaranteedDerefMap,ValueNumberFrame vnaFrame,IsNullValueFrame invFrame,UnconditionalValueDerefSet derefSet,boolean isEdge){  if (DEBUG_DEREFS) {    System.out.println("vna *** " + vnaFrame);    System.out.println("inv *** " + invFrame);    System.out.println("deref * " + derefSet);  }  if (!vnaFrame.isValid() || !invFrame.isValid() || vnaFrame.getNumLocals() != invFrame.getNumLocals() || derefSet.isEmpty()) {    return;  }  int slots;  if (vnaFrame.getNumSlots() == invFrame.getNumSlots()) {    slots=vnaFrame.getNumSlots();  } else {    slots=vnaFrame.getNumLocals();  }  for (int j=0; j < slots; j++) {    IsNullValue isNullValue=invFrame.getValue(j);    ValueNumber valueNumber=vnaFrame.getValue(j);    if ((isNullValue.isDefinitelyNull() || isNullValue.isNullOnSomePath() && isNullValue.isReturnValue()) && (derefSet.isUnconditionallyDereferenced(valueNumber))) {      if (MY_DEBUG) {        System.out.println("Found NP bug");        System.out.println("Location: " + thisLocation);        System.out.println("Value number frame: " + vnaFrame);        System.out.println("Value number: " + valueNumber);        System.out.println("IsNullValue frame: " + invFrame);        System.out.println("IsNullValue value: " + isNullValue);        System.out.println("Unconditional dere framef: " + derefSet);        System.out.println("Unconditionally dereferenced: " + derefSet.isUnconditionallyDereferenced(valueNumber));      }      Location where=thisLocation;      if (!isEdge && isNullValue.isNullOnSomePath() && isNullValue.isReturnValue()) {        try {          where=classContext.getCFG(method).getPreviousLocation(where);        } catch (        CFGBuilderException e) {          AnalysisContext.logError("Error looking for previous instruction to " + where + " in "+ classContext.getFullyQualifiedMethodName(method),e);        }      }      noteUnconditionallyDereferencedNullValue(where,knownNullAndDoomedAt,nullValueGuaranteedDerefMap,derefSet,isNullValue,valueNumber);    }  }  for (  Map.Entry<ValueNumber,IsNullValue> entry : invFrame.getKnownValueMapEntrySet()) {    ValueNumber valueNumber=entry.getKey();    IsNullValue isNullValue=entry.getValue();    if ((isNullValue.isDefinitelyNull() || isNullValue.isNullOnSomePath() && (isNullValue.isReturnValue() || isNullValue.isFieldValue())) && derefSet.isUnconditionallyDereferenced(valueNumber)) {      noteUnconditionallyDereferencedNullValue(thisLocation,knownNullAndDoomedAt,nullValueGuaranteedDerefMap,derefSet,isNullValue,valueNumber);    }  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  lock();  try {    s.defaultWriteObject();  }  finally {    unlock();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"xchg");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a xchg instruction (invalid number of operands)");  }  final long reilOffsetBase=instruction.getAddress().toLong() * 0x100;  long offset=reilOffsetBase;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree firstOperand=operands.get(0);  final IOperandTree secondOperand=operands.get(1);  final OperandSize archSize=environment.getArchitectureSize();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,firstOperand,true);  instructions.addAll(firstResult.getInstructions());  offset=reilOffsetBase + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,secondOperand,true);  instructions.addAll(secondResult.getInstructions());  offset=reilOffsetBase + instructions.size();  if (firstResult.getSize() != secondResult.getSize()) {    throw new InternalTranslationException("Error: The operands of XCHG instructions must have equal size");  }  final OperandSize size=firstResult.getSize();  final String firstRegister=firstResult.getRegister();  final String secondRegister=secondResult.getRegister();  if (firstResult.getType() == TranslationResultType.REGISTER) {    if (secondResult.getType() == TranslationResultType.REGISTER) {      if (size == archSize) {        final String temp=environment.getNextVariableString();        instructions.add(ReilHelpers.createStr(offset,size,firstRegister,size,temp));        instructions.add(ReilHelpers.createStr(offset + 1,size,secondRegister,size,firstRegister));        instructions.add(ReilHelpers.createStr(offset + 2,size,temp,size,secondRegister));        Helpers.writeBack(environment,offset + instructions.size(),firstOperand,firstRegister,archSize,firstResult.getAddress(),firstResult.getType(),instructions);        Helpers.writeBack(environment,offset + instructions.size(),secondOperand,secondRegister,archSize,secondResult.getAddress(),secondResult.getType(),instructions);      } else {        Helpers.writeBack(environment,offset,secondOperand,firstRegister,size,secondResult.getAddress(),secondResult.getType(),instructions);        offset=reilOffsetBase + instructions.size();        Helpers.writeBack(environment,offset,firstOperand,secondRegister,size,firstResult.getAddress(),firstResult.getType(),instructions);      }    } else     if (secondResult.getType() == TranslationResultType.MEMORY_ACCESS) {      Helpers.writeBack(environment,offset,secondOperand,firstRegister,size,secondResult.getAddress(),secondResult.getType(),instructions);      offset=reilOffsetBase + instructions.size();      Helpers.writeBack(environment,offset,firstOperand,secondRegister,size,firstResult.getAddress(),firstResult.getType(),instructions);    } else {      assert false;    }  } else {    assert false;  }}  }
class C{  public static String dotme(int val){  int dit;  int x=val;  StringBuilder ret=new StringBuilder();  if (val == 0) {    return "0";  }  while (x != 0) {    dit=x % 10;    ret.insert(0,Integer.toString(dit));    x=x / 10;    if (x != 0) {      ret.insert(0,".");    }  }  return ret.toString();}  }
class C{  public UsersTableModel(List<User> users){  this.users=new ArrayList<>(users);}  }
class C{  private boolean mustAddRequiredParent(TagInfo tag,CleanTimeValues cleanTimeValues){  if (tag == null)   return false;  if (tag.getRequiredParentTags().isEmpty())   return false;  int fatalTagPosition=-1;  for (  String fatalTag : tag.getFatalTags()) {    if (fatalTag != null) {      TagPos tagPos=getOpenTags(cleanTimeValues).findTag(fatalTag);      if (tagPos != null) {        fatalTagPosition=tagPos.position;      }    }  }  boolean requiredTagMissing=true;  for (  String requiredTag : tag.getRequiredParentTags()) {    if (requiredTag != null) {      TagPos currTagPos=getOpenTags(cleanTimeValues).findTag(requiredTag);      if (currTagPos != null) {        requiredTagMissing=currTagPos.position <= fatalTagPosition;      }    }  }  if (!requiredTagMissing)   return false;  ListIterator it=getOpenTags(cleanTimeValues).list.listIterator(getOpenTags(cleanTimeValues).list.size());  while (it.hasPrevious()) {    TagPos currTagPos=(TagPos)it.previous();    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return currTagPos.position <= fatalTagPosition;    }    if (tag.isHigher(currTagPos.name)) {      return currTagPos.position <= fatalTagPosition;    }  }  return true;}  }
class C{  public String apply(String str){  if (str != null) {    return wrap(str);  } else {    return null;  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof CommandAPDU == false) {    return false;  }  CommandAPDU other=(CommandAPDU)obj;  return Arrays.equals(this.apdu,other.apdu);}  }
class C{  protected MovePath addStep(final MoveStep step,boolean compile){  if (step == null) {    System.err.println(new RuntimeException("Received NULL MoveStep"));    return this;  }  steps.addElement(step);  final MoveStep prev=getStep(steps.size() - 2);  if (compile) {    try {      step.compile(getGame(),getEntity(),prev);    } catch (    final RuntimeException re) {      step.setMovementType(EntityMovementType.MOVE_ILLEGAL);    }  }  final Coords start=getEntity().getPosition();  final Coords land=step.getPosition();  if ((start == null) || (land == null)) {    step.setMovementType(EntityMovementType.MOVE_ILLEGAL);  } else {    final int distance=start.distance(land);    if (isJumping() && (getEntity().getJumpType() != Mech.JUMP_BOOSTER)) {      if (step.isThisStepBackwards() || (step.getDistance() > distance)) {        step.setMovementType(EntityMovementType.MOVE_ILLEGAL);      }    }  }  if (!entity.isAirborne() && contains(MoveStepType.BACKWARDS) && contains(MoveStepType.EVADE)) {    step.setMovementType(EntityMovementType.MOVE_ILLEGAL);  }  if (game.getBoard().inSpace() && (entity instanceof Jumpship) && !(entity instanceof Warship)&& !step.isFirstStep()&& (contains(MoveStepType.TURN_LEFT) || contains(MoveStepType.TURN_RIGHT))) {    step.setMovementType(EntityMovementType.MOVE_ILLEGAL);  }  if (isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER) && (length() > 2)) {    Coords firstPos=getStep(0).getPosition();    Coords secondPos=getStep(1).getPosition();    Coords currPos=step.getPosition();    double tolerance=.00001;    double initialDir=firstPos.radian(secondPos);    double currentDir=firstPos.radian(currPos);    if ((currentDir > (initialDir + tolerance)) || (currentDir < (initialDir - tolerance))) {      step.setMovementType(EntityMovementType.MOVE_ILLEGAL);    }  }  if ((step.getType() == MoveStepType.LAY_MINE)) {    boolean containsOtherLayMineStep=false;    for (int i=0; i < steps.size() - 1; i++) {      if (steps.get(i).getType() == MoveStepType.LAY_MINE) {        containsOtherLayMineStep=true;      }    }    if (containsOtherLayMineStep) {      step.setMovementType(EntityMovementType.MOVE_ILLEGAL);    }  }  if (game.getOptions().booleanOption("psr_jump_heavy_woods")) {    IHex hex=game.getBoard().getHex(step.getPosition());    if ((hex != null) && isJumping() && step.isEndPos(this)) {      PilotingRollData psr=entity.checkLandingInHeavyWoods(step.getMovementType(false),hex);      if (psr.getValue() != PilotingRollData.CHECK_FALSE) {        step.setDanger(true);      }    }  }  if (containsLateralShift() && getEntity().isUsingManAce() && (getEntity() instanceof VTOL)&& getMpUsed() > getEntity().getWalkMP()) {    step.setMovementType(EntityMovementType.MOVE_ILLEGAL);  }  if (shouldMechanicalJumpCauseFallDamage()) {    step.setDanger(true);  }  if (step.isLegal(this) && (null != prev) && !land.equals(prev.getPosition())) {    int index=steps.size() - 2;    while ((index >= 0) && getStep(index).setEndPos(false)) {      index--;    }  }  return this;}  }
class C{  @Override public void start(BundleContext context) throws Exception {  super.start(context);  this.context=context;  if (LOG.isInfoEnabled()) {    final Bundle bundle=context.getBundle();    LOG.info("Starting bundle " + bundle.getSymbolicName() + " "+ bundle.getVersion());  }  context.registerService(IMain.class.getName(),this,null);  context.registerService(ILogPathService.class.getName(),LoggerInitializer.setupLogFilePath(),null);  templateDirTracker=new ServiceTracker(context,IReportLocalTemplateDirectoryService.class.getName(),null);  templateDirTracker.open();}  }
class C{  public void append(String str,int off,int len){  int restLength=buffer.length - pos;  if (len < restLength) {    str.getChars(off,off + len,buffer,pos);    pos+=len;  } else {    str.getChars(off,off + restLength,buffer,pos);    curr.next=new Entity(buffer);    curr=curr.next;    length+=buffer.length;    buffer=new char[(buffer.length > len - restLength) ? buffer.length : len - restLength];    str.getChars(off + restLength,off + len,buffer,0);    pos=len - restLength;  }}  }
class C{  public static void main(String[] args) throws Exception {  Banner.banner();{    for (    String filename : args) {      final File file=new File(filename);      if (!file.exists())       throw new RuntimeException("Not found: " + file);    }  }  final ParserSpeedTest u=new ParserSpeedTest();  try {    for (    String filename : args) {      u.parseFileOrDirectory(new File(filename));    }  }  finally {    u.shutdown();    final long elapsed=System.currentTimeMillis() - u.begin;    System.out.println("nstmts=" + u.nstmts + ", tps="+ u.triplesPerSecond()+ ", elapsed="+ elapsed);  }}  }
class C{  public void touch(){  candiesStore=null;}  }
class C{  public RandomSearch(Problem problem,Initialization generator,NondominatedPopulation archive){  super(problem);  this.generator=generator;  this.archive=archive;}  }
class C{  public JsonObject toJSON(){  JsonBuilder<JsonObject> obj=JsonObject.builder();  for (  ProfilerSection section : sections()) {    if (section != null) {      JsonObject object=section.toJSON();      if (section.name() != null && object != null)       obj.value(section.name(),object);    }  }  for (  ProfilerEntity entity : entities()) {    if (entity != null && entity.name() != null)     obj.value(entity.name(),entity.getDuration());  }  return obj.done();}  }
class C{  public static String string(int i){  return extflags.getText(i);}  }
class C{  public void putSpotPrice(MockSpotPrice spotPrice){  spotPrice.setAvailabilityZone(zoneName);  this.spotPrices.put(spotPrice.getInstanceType(),spotPrice);}  }
class C{  public static void showToast(String msg,int duration){  showToast(msg,duration,DEFAULT_POSITION,DEFAULT_XOFFSET,DEFAULT_YOFFSET);}  }
class C{  public int length(){  return length(this);}  }
class C{  protected void preShow(){  if (mRootView == null)   throw new IllegalStateException("setContentView was not called with a view to display");  onShow();  if (mBackground == null) {    mWindow.setBackgroundDrawable(new BitmapDrawable());  } else {    mWindow.setBackgroundDrawable(mBackground);  }  mWindow.setWidth(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);  mWindow.setTouchable(true);  mWindow.setFocusable(true);  mWindow.setOutsideTouchable(true);  mWindow.setContentView(mRootView);}  }
class C{  public GOCDataBuilder withClassName(final String smClassNamec){  this.smClassNamec=smClassNamec;  return this;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void addActionListener(ActionListener listener){  m_combo.addActionListener(listener);  m_text.addActionListener(listener);}  }
class C{  public void releaseManuallyDefinedIPAddresses() throws Exception {  logger.debug("");  int numNIC=Integer.parseInt(getServiceSetting(VMPropertyHandler.TS_NUMBER_OF_NICS));  for (int i=1; i <= numNIC; i++) {    if (isAdapterConfiguredByDatabase(i)) {      String ipAddress=getIpAddress(i);      if (ipAddress != null) {        String vcenter=getTargetVCenterServer();        String datacenter=getTargetDatacenter();        String cluster=getTargetCluster();        String vlan=getVLAN(i);        try {          DataAccessService das=getDataAccessService();          das.releaseIPAddress(vcenter,datacenter,cluster,vlan,ipAddress);        } catch (        Exception e) {          logger.error("Failed to release IP address " + ipAddress,e);        }      }    }  }}  }
class C{  public boolean contains(CharRange range){  if (range == null) {    throw new IllegalArgumentException("The Range must not be null");  }  if (negated) {    if (range.negated) {      return start >= range.start && end <= range.end;    } else {      return range.end < start || range.start > end;    }  } else {    if (range.negated) {      return start == 0 && end == Character.MAX_VALUE;    } else {      return start <= range.start && end >= range.end;    }  }}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  addActionLog(ACTION_FLUSH,null);  waitJobDone();}  }
class C{  void checkStrict() throws JMSException {  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("checkStrict()");  }  if (mc != null) {    throw new IllegalStateException(ActiveMQRASessionFactory.ISE);  }}  }
class C{  public static String textFileToString(String path) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(path));  return StandardCharsets.UTF_8.decode(ByteBuffer.wrap(encoded)).toString();}  }
class C{  @Nullable public static UUID readUuid(BinaryRawReader in){  if (in.readBoolean()) {    long most=in.readLong();    long least=in.readLong();    return new UUID(most,least);  } else   return null;}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,byte[] value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newBinaryResource(resourceId,value));}  }
class C{  public X509CertificateHolder(Certificate x509Certificate){  this.x509Certificate=x509Certificate;  this.extensions=x509Certificate.getTBSCertificate().getExtensions();}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  int zeros=0;  while (zeros < input.length && input[zeros] == 0) {    ++zeros;  }  input=Arrays.copyOf(input,input.length);  char[] encoded=new char[input.length * 2];  int outputStart=encoded.length;  for (int inputStart=zeros; inputStart < input.length; ) {    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];    if (input[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {    ++outputStart;  }  while (--zeros >= 0) {    encoded[--outputStart]=ENCODED_ZERO;  }  return new String(encoded,outputStart,encoded.length - outputStart);}  }
class C{  @SuppressWarnings("deprecation") public void resize(int width,int height){  Dimension d=size();  if ((d.width != width) || (d.height != height)) {    super.resize(width,height);    if (stub != null) {      stub.appletResize(width,height);    }  }}  }
class C{  private Increment createIncrement(byte[] rowKey,ColumnList cols,Durability durability,long timeToLiveMillis){  Increment inc=new Increment(rowKey);  inc.setDurability(durability);  inc.setTTL(timeToLiveMillis);  cols.getCounters().forEach(null);  return inc;}  }
class C{  public String toString(){  if (on == true) {    return "\nFan speed: " + getSpeed() + ", color: "+ color+ ", radius: "+ radius+ "\n";  } else {    return "\nFan color: " + color + ", radius: "+ radius+ "\nfan is off\n";  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  writeEsc(ch,start,length,false);  super.ignorableWhitespace(ch,start,length);}  }
class C{  public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod,Method bridgedMethod){  if (bridgeMethod == bridgedMethod) {    return true;  }  return (Arrays.equals(bridgeMethod.getParameterTypes(),bridgedMethod.getParameterTypes()) && bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()));}  }
class C{  public Spatial select(Ray3 pickRay,Vector3 position,Vector3 normal,Node pickTop,boolean shiftDown){  SpatialPickResults boundsPick=SpatialUtil.pickBounds(contents,pickRay,pickTop);  if (boundsPick != null) {    return (selectionHandler.doSelection(pickRay,position,normal,boundsPick,shiftDown));  }  return (null);}  }
class C{  public String toString(){  if (getEnvLanguage() != null) {    String nn=getTrlName();    if (nn != null)     return nn;  }  return getName();}  }
class C{  public static RightThreadedBinaryTree<Integer> buildLeftLinear(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  for (int i=n; i > 0; i--) {    bt.insert(i);  }  return bt;}  }
class C{  public BurpCertificate generateCertificate(BurpCertificate issuer) throws CertificateEncodingException, InvalidKeyException, IllegalStateException, NoSuchAlgorithmException, SignatureException, NoSuchProviderException, IOException, InvalidKeySpecException {  if (privateKey == null || publicKey == null) {    generateKeyPair();  }  burpCertificate=new BurpCertificate(generateX509Certificate(issuer.getPrivateKey()));  burpCertificate.setPrivateKey(privateKey);  burpCertificate.setPublicKey(publicKey);  burpCertificate.setSource("Signed by " + issuer.getSubject());  return burpCertificate;}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.405 -0500",hash_original_method="65B11A528910ED48D0A8C0B3A81DCA11",hash_generated_method="B5C901E1F01EEDB880F526FCDBB68387") public void put(String key,String value){  mValues.put(key,value);}  }
class C{  protected String makePrefixFromOsgiProperties(){  final String port=System.getProperty("org.osgi.service.http.port");  if (port == null) {    return null;  }  final StringBuilder sb=new StringBuilder();  sb.append("http://").append(discoverHostname());  if (!"80".equals(port)) {    sb.append(':').append(port);  }  return sb.toString();}  }
class C{  private ColorMatrixRable8Bit(){}  }
class C{  public String toExternalForm(){  if (streamHandler == null) {    return "unknown protocol(" + protocol + ")://"+ host+ file;  }  return streamHandler.toExternalForm(this);}  }
class C{  public void removeNotify(){  super.removeNotify();  if (focusedComponent == this)   focusedComponent=null;}  }
class C{  protected void initHost() throws UnknownHostException {  setHost(getInitParameter("host"));  if (isDebug()) {    log("host: " + getHost());  }}  }
class C{  @ApiOperation(value="Send schema updates for all tables or a list of tables to a list of nodes or to all nodes in a group.") @RequestMapping(value="engine/{engine}/sendschema",method=RequestMethod.POST) @ResponseStatus(HttpStatus.OK) @ResponseBody public final SendSchemaResponse postSendSchema(@PathVariable("engine") String engineName,@RequestBody SendSchemaRequest request){  return sendSchemaImpl(getSymmetricEngine(engineName),request);}  }
class C{  public static void removeBreakpoints(final Set<BreakpointAddress> addresses,final BreakpointManager manager){  Preconditions.checkNotNull(manager,"IE01708: Manager argument can not be null");  Preconditions.checkNotNull(addresses,"IE01709: Address argument can not be null");  final Set<BreakpointAddress> addressesToRemoveFromManager=new HashSet<BreakpointAddress>();  final Set<BreakpointAddress> addressesToRemoveFromDebugger=new HashSet<BreakpointAddress>();  for (  final BreakpointAddress address : addresses) {    final BreakpointStatus status=manager.getBreakpointStatus(address,BreakpointType.REGULAR);    if ((status == BreakpointStatus.BREAKPOINT_DISABLED) || (status == BreakpointStatus.BREAKPOINT_INACTIVE)) {      addressesToRemoveFromManager.add(address);    }    if (status != BreakpointStatus.BREAKPOINT_DELETING) {      addressesToRemoveFromDebugger.add(address);    }  }  if (addressesToRemoveFromManager.size() != 0) {    manager.removeBreakpoints(BreakpointType.REGULAR,addressesToRemoveFromManager);  }  if (addressesToRemoveFromDebugger.size() != 0) {    manager.setBreakpointStatus(addressesToRemoveFromDebugger,BreakpointType.REGULAR,BreakpointStatus.BREAKPOINT_DELETING);  }}  }
class C{  default T fold(final T identity,final BinaryOperator<T> accumulator){  final Optional<T> opt=toOptional();  if (opt.isPresent())   return accumulator.apply(identity,get());  return identity;}  }
class C{  @Override public int hashCode(){  return id;}  }
class C{  public JsonArray add(int value){  values.add(Json.value(value));  return this;}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);  assertNotNull("mTestFragment is null",mTestFragment);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.352 -0500",hash_original_method="B8EA6629A21322DA3947DE0C5AE42A40",hash_generated_method="465724610F97AA48C0FBD470721B05CD") @Override public boolean equals(Object other){  if (other == null)   return false;  if (other.getClass() != getClass()) {    return false;  }  Authority otherAuth=(Authority)other;  if (!this.hostPort.equals(otherAuth.hostPort)) {    return false;  }  if (this.userInfo != null && otherAuth.userInfo != null) {    if (!this.userInfo.equals(otherAuth.userInfo)) {      return false;    }  }  return true;}  }
class C{  public ListBodyElement(){}  }
class C{  private void scan(Detail detail) throws Exception {  order(detail);  field(detail);  method(detail);  validate(detail);  commit(detail);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private boolean scrollAndFocusHorizontally(int direction,int left,int right){  boolean handled=true;  int width=getWidth();  int containerLeft=getScrollX();  int containerRight=containerLeft + width;  boolean goLeft=direction == View.FOCUS_LEFT;  View newFocused=findFocusableViewInBoundsHorizontally(goLeft,left,right);  if (newFocused == null) {    newFocused=this;  }  if (left >= containerLeft && right <= containerRight) {    handled=false;  } else {    int delta=goLeft ? (left - containerLeft) : (right - containerRight);    doScrollX(delta);  }  if (newFocused != findFocus())   newFocused.requestFocus(direction);  return handled;}  }
class C{  void preModify(HashMapEntry<K,V> e){}  }
class C{  @Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.FORWARD_DICTIONARY));}  }
class C{  public void replyError(ApplicationError error) throws ApplicationError {  if (error == null || error.uri == null)   throw new NullPointerException();  replyError(error.uri,error.args,error.kwArgs);}  }
class C{  public JPASubscription(String username,String mailbox){  super();  this.username=username;  this.mailbox=mailbox;}  }
class C{  public Analysis(){  super();}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    Map<?,?> map=(Map<?,?>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    Collection<?> coll=(Collection<?>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public static void duplicate(File f,String fn){  for (  MassStorageDevice device : USBMassStorage.connectedDevices) {    if (!device.accept_logs)     continue;    File crash=new File(device.toast_directory,"log");    crash.mkdirs();    try {      Files.copy(f.toPath(),new File(crash,fn).toPath());    } catch (    IOException e) {    }  }}  }
class C{  @SuppressWarnings("unused") @Deprecated private void createDenverIndividual(final int HOME_END_TIME){  int currentId=1;  int duration=(int)(0.5 * 3600);  final int DEFAULT_CARS_PER_HOUR_PER_LANE=500;  currentId=addCommodity("168","166",HOME_END_TIME,duration,4 * DEFAULT_CARS_PER_HOUR_PER_LANE,"36 30 24 18 12 6",currentId);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public void put(String key,String customFileName,File file) throws FileNotFoundException {  put(key,file,null,customFileName);}  }
class C{  public void testRunFinished(Result result) throws Exception {}  }
class C{  public static TokenSpec[] findTokenSpecs(String inputLine,int inputPosition){  String line=Padding + inputLine + Padding;  int curPos=inputPosition + Padding.length();  TokenSpec[] foundTokenSpecs=new TokenSpec[0];  boolean lastToken=false;  boolean notLastToken=false;  TokenSpec currentToken;  if (line.charAt(curPos) == ' ') {    curPos=skipLeftOverSpaces(line,curPos);    if (line.charAt(curPos - 1) == '!' && line.charAt(curPos - 2) != '!') {      notLastToken=true;      curPos=curPos - 1;      curPos=skipLeftOverSpaces(line,curPos);    }  } else   if ((line.charAt(curPos) == '!') && (line.charAt(curPos - 1) != '!') && (line.charAt(curPos + 1) != '!')) {    notLastToken=true;    curPos=skipLeftOverSpaces(line,curPos);  }  ;  if ((notLastToken || line.charAt(curPos) == ' ') && (line.charAt(curPos - 1) == ')')) {    notLastToken=true;    int returnVal=findMatchingLeftParen(line,curPos);    if (returnVal < 0) {      return new TokenSpec[0];    }    curPos=returnVal;    curPos=skipLeftOverSpaces(line,curPos);  }  ;  if (notLastToken) {    curPos=curPos - 1;  } else {    if ((!(Character.isLetterOrDigit(line.charAt(curPos)) || (line.charAt(curPos) == '_'))) && (findTokenIn(line,curPos,Operators) == null)) {      curPos=curPos - 1;    }  }  if (Character.isLetterOrDigit(line.charAt(curPos)) || line.charAt(curPos) == '_') {    if ((line.charAt(curPos) == 'X') && findTokenIn(line,curPos,XOperators) != null) {      TokenSpec returnVal=findTokenIn(line,curPos,XOperators);      foundTokenSpecs=new TokenSpec[]{returnVal};      curPos=returnVal.leftPos;      lastToken=true;    } else {      currentToken=findMaximalIdCharSeq(line,curPos);      if (currentToken == null) {        TLAEditorActivator.getDefault().getLog().log(new Status(IStatus.WARNING,TLAEditorActivator.PLUGIN_ID,"Hyperlinking failed for " + inputLine));        return new TokenSpec[0];      }      if (line.charAt(currentToken.leftPos - 1) == '>') {        TokenSpec returnVal=findMaximalIdCharSeq(line,currentToken.leftPos - 1);        returnVal=checkIfStepName(line,returnVal,currentToken);        if (returnVal != null) {          return FixOrigin(new TokenSpec[]{returnVal});        }      }      ;      if (line.charAt(currentToken.rightPos) == '>') {        TokenSpec returnVal=findMaximalIdCharSeq(line,currentToken.rightPos + 1);        returnVal=checkIfStepName(line,currentToken,returnVal);        if (returnVal != null) {          return FixOrigin(new TokenSpec[]{returnVal});        }      }      ;      if (IsNumber(currentToken.token)) {        return new TokenSpec[0];      }      int left=currentToken.leftPos;      int rt=currentToken.rightPos;      if ((line.charAt(left - 1) == '\\') && (line.charAt(left - 2) != '\\') && IsTeXSymbol(line.substring(left - 1,rt))) {        lastToken=true;        currentToken.leftPos=left - 1;        currentToken.token=line.substring(left - 1,rt);      }      ;      foundTokenSpecs=new TokenSpec[]{currentToken};      curPos=left;    }  } else {    currentToken=findTokenIn(line,curPos,Operators);    if (currentToken == null) {      return new TokenSpec[0];    }    ;    TokenSpec returnVal=findTokenIn(line,curPos,NonOperators);    if (returnVal != null) {      return new TokenSpec[0];    }    ;    if (currentToken.token.equals("<")) {      TokenSpec temp1=findMaximalIdCharSeq(line,currentToken.rightPos);      if ((temp1 != null) && (line.charAt(temp1.rightPos) == '>')) {        TokenSpec temp2=findMaximalIdCharSeq(line,temp1.rightPos + 1);        returnVal=checkIfStepName(line,temp1,temp2);        if (returnVal != null) {          return FixOrigin(new TokenSpec[]{returnVal});        }      }    } else     if (currentToken.token.equals(">")) {      TokenSpec temp1=findMaximalIdCharSeq(line,currentToken.leftPos);      TokenSpec temp2=findMaximalIdCharSeq(line,currentToken.rightPos);      returnVal=checkIfStepName(line,temp1,temp2);      if (returnVal != null) {        return FixOrigin(new TokenSpec[]{returnVal});      }    }    if (currentToken.token.equals("\\")) {      returnVal=findMaximalIdCharSeq(line,currentToken.rightPos);      if ((returnVal != null) && IsTeXSymbol(line.substring(currentToken.leftPos,returnVal.rightPos))) {        currentToken.rightPos=returnVal.rightPos;        currentToken.token=line.substring(currentToken.leftPos,returnVal.rightPos);      }    }    ;    foundTokenSpecs=new TokenSpec[]{currentToken};    curPos=currentToken.leftPos;    lastToken=true;  }  ;  curPos=foundTokenSpecs[0].leftPos;  boolean notDone=true;  while (notDone) {    curPos=skipLeftOverSpaces(line,curPos);    if (curPos < 0 || line.charAt(curPos - 1) == PaddingChar) {      notDone=false;    } else {      if (line.charAt(curPos - 1) == '!' && (line.charAt(curPos - 2) != '!')) {        curPos=curPos - 1;        curPos=skipLeftOverSpaces(line,curPos);        curPos=findMatchingLeftParen(line,curPos);        if (curPos < 0) {          notDone=false;        } else {          curPos=skipLeftOverSpaces(line,curPos);          currentToken=findMaximalIdCharSeq(line,curPos);          if ((currentToken == null) || IsNumber(currentToken.token)) {            notDone=false;          } else {            curPos=currentToken.leftPos;            foundTokenSpecs[0]=new TokenSpec(currentToken.token + "!" + foundTokenSpecs[0].token,curPos,foundTokenSpecs[0].rightPos);          }        }      } else {        notDone=false;      }    }  }  if (lastToken == true) {    return FixOrigin(foundTokenSpecs);  }  curPos=foundTokenSpecs[0].rightPos;  boolean foundBangToken=false;  notDone=true;  while (notDone) {    curPos=skipRightOverSpaces(line,curPos);    curPos=findMatchingRightParen(line,curPos);    if (curPos < 0) {      notDone=false;    } else {      curPos=skipRightOverSpaces(line,curPos);      if ((line.charAt(curPos) != '!') || (line.charAt(curPos + 1) == '!')) {        notDone=false;      } else {        curPos=curPos + 1;        curPos=skipRightOverSpaces(line,curPos);        currentToken=findMaximalIdCharSeq(line,curPos);        if ((currentToken == null) || IsNumber(currentToken.token)) {          notDone=false;        } else {          foundBangToken=true;          TokenSpec[] temp=new TokenSpec[1 + foundTokenSpecs.length];          temp[0]=new TokenSpec(foundTokenSpecs[0].token + "!" + currentToken.token,foundTokenSpecs[0].leftPos,currentToken.rightPos);          for (int i=0; i < foundTokenSpecs.length; i++) {            temp[i + 1]=foundTokenSpecs[i];          }          foundTokenSpecs=temp;          curPos=currentToken.rightPos;        }      }    }  }  ;  if (notLastToken && !foundBangToken) {    return new TokenSpec[0];  }  ;  return FixOrigin(foundTokenSpecs);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public void register(AbstractAutomaton a){synchronized (automats) {    automats.add(a);  }  notify("Insert",null,Integer.valueOf(indexOf(a)));}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  public static boolean aboveThan(long a,long b){  return Long.compareUnsigned(a,b) > 0;}  }
class C{  public void decorate(@NotNull final String decoratorName,@NotNull final String value){  decorate(decoratorName);  myDecoratorValues.put(decoratorName,value);}  }
class C{  public static CompoundSelect union(Query query){  return new CompoundSelect(CompoundSelectOperator.UNION,query);}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return str().lastIndexOf(str,fromIndex);}  }
class C{  public TestEnvDlg(){  initComponents();  getRootPane().setDefaultButton(btMatch);  updateWordCount();  lbUnknownWarning.setVisible(false);}  }
class C{  @SuppressWarnings("unchecked") private void notifyIncrementalClassifierListeners(IncrementalClassifierEvent ce){  if (Thread.currentThread().isInterrupted()) {    return;  }  Vector<IncrementalClassifierListener> l;synchronized (this) {    l=(Vector<IncrementalClassifierListener>)m_incrementalClassifierListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptClassifier(ce);    }  }}  }
class C{  protected AbstractHttpParams(){  super();}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  @Nullable private String guessResourceName(PsiMethod method){  if (method.getReturnType() == PsiType.VOID) {    return null;  }  RestMethod restMethod=getDefaultRestMethod(method);  return restMethod.guessResourceName(method);}  }
class C{  public static char opaque(char value){  return value;}  }
class C{  protected void validateHostData(HostParam hostParam,URI tenanUri,Host host,Boolean validateConnection){  Cluster cluster=null;  VcenterDataCenter dataCenter=null;  Project project=null;  Volume volume=null;  if (hostParam.getType() != null) {    ArgValidator.checkFieldValueFromEnum(hostParam.getType(),"Type",Host.HostType.class);  }  if (!NullColumnValueGetter.isNullURI(hostParam.getProject())) {    project=queryObject(Project.class,hostParam.getProject(),true);    if (!project.getTenantOrg().getURI().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToHostTenantOrg("project");    }  }  if (!NullColumnValueGetter.isNullURI(hostParam.getBootVolume())) {    volume=queryObject(Volume.class,hostParam.getBootVolume(),true);    if (!volume.getTenant().getURI().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToHostTenantOrg("boot volume");    }  }  if (!NullColumnValueGetter.isNullURI(hostParam.getCluster())) {    cluster=queryObject(Cluster.class,hostParam.getCluster(),true);    if (!cluster.getTenant().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToHostTenantOrg("cluster");    }  }  if (!NullColumnValueGetter.isNullURI(hostParam.getVcenterDataCenter())) {    dataCenter=queryObject(VcenterDataCenter.class,hostParam.getVcenterDataCenter(),true);    if (!dataCenter.getTenant().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToHostTenantOrg("data center");    }  }  if (cluster != null) {    if (dataCenter != null) {      if (!dataCenter.getId().equals(cluster.getVcenterDataCenter())) {        throw APIException.badRequests.invalidParameterClusterNotInDataCenter(cluster.getLabel(),dataCenter.getLabel());      }    } else     if (project != null) {      if (!project.getId().equals(cluster.getProject())) {        throw APIException.badRequests.invalidParameterClusterNotInHostProject(cluster.getLabel());      }    }  }  if (host == null || (hostParam.getHostName() != null && !hostParam.getHostName().equals(host.getHostName()))) {    checkDuplicateAltId(Host.class,"hostName",EndpointUtility.changeCase(hostParam.getHostName()),"host");  }  if (host == null || (hostParam.getName() != null && !hostParam.getName().equals(host.getLabel()))) {    checkDuplicateLabel(Host.class,hostParam.getName());  }  if (host != null && !areEqual(host.getProject(),hostParam.getProject())) {    if (ComputeSystemHelper.isHostInUse(_dbClient,host.getId())) {      throw APIException.badRequests.hostProjectChangeNotAllowed(host.getHostName());    }  }  Boolean discoverable=hostParam.getDiscoverable() == null ? (host == null ? Boolean.FALSE : host.getDiscoverable()) : hostParam.getDiscoverable();  boolean vCenterManaged=host == null ? false : Host.HostType.Esx.name().equals(host.getType()) && !NullColumnValueGetter.isNullURI(host.getVcenterDataCenter());  if (!vCenterManaged && discoverable != null && discoverable) {    String username=hostParam.getUserName() == null ? (host == null ? null : host.getUsername()) : hostParam.getUserName();    String password=hostParam.getPassword() == null ? (host == null ? null : host.getPassword()) : hostParam.getPassword();    ArgValidator.checkFieldNotNull(username,"username");    ArgValidator.checkFieldNotNull(password,"password");    Host.HostType hostType=Host.HostType.valueOf(hostParam.getType() == null ? (host == null ? null : host.getType()) : hostParam.getType());    if (hostType != null && hostType == Host.HostType.Windows) {      Integer portNumber=hostParam.getPortNumber() == null ? (host == null ? null : host.getPortNumber()) : hostParam.getPortNumber();      ArgValidator.checkFieldNotNull(portNumber,"port_number");    }  }  if (validateConnection != null && validateConnection == true) {    if (!HostConnectionValidator.isHostConnectionValid(hostParam,host)) {      throw APIException.badRequests.invalidHostConnection();    }  }}  }
class C{  protected static void init(){  String notificationfactoryClassName=null;  try {    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);  } catch (  SecurityException e) {    throw new RuntimeException(e);  }  if (notificationfactoryClassName != null) {    Class<?> nfc;    try {      nfc=Class.forName(notificationfactoryClassName);      factory=(INotificationManagerFactory)nfc.newInstance();    } catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {      throw new RuntimeException(e);    }  } else {    factory=new SyslogNotificationFactory();  }}  }
class C{  public static void clearClassCache(){  classCache.clear();}  }
class C{  private void insertLocation(ITrackRecordingService trackRecordingService) throws RemoteException, InterruptedException {  Location location=new Location("gps");  location.setLongitude(35.0f);  location.setLatitude(45.0f);  location.setAccuracy(5);  location.setSpeed(10);  location.setTime(System.currentTimeMillis());  location.setBearing(3.0f);  trackRecordingService.insertTrackPoint(location);  Thread.sleep(200);}  }
class C{  public void mousePressed(MouseEvent e){  if ((e.getSource() == BasicSplitPaneDivider.this || e.getSource() == splitPane) && dragger == null && splitPane.isEnabled()) {    Component newHiddenDivider=splitPaneUI.getNonContinuousLayoutDivider();    if (hiddenDivider != newHiddenDivider) {      if (hiddenDivider != null) {        hiddenDivider.removeMouseListener(this);        hiddenDivider.removeMouseMotionListener(this);      }      hiddenDivider=newHiddenDivider;      if (hiddenDivider != null) {        hiddenDivider.addMouseMotionListener(this);        hiddenDivider.addMouseListener(this);      }    }    if (splitPane.getLeftComponent() != null && splitPane.getRightComponent() != null) {      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        dragger=new DragController(e);      } else {        dragger=new VerticalDragController(e);      }      if (!dragger.isValid()) {        dragger=null;      } else {        prepareForDragging();        dragger.continueDrag(e);      }    }    e.consume();  }}  }
class C{  final int timedOffer(T item,long nanos){  int stat;  if ((stat=offer(item)) == 0 && (timeout=nanos) > 0L) {    putItem=item;    putStat=0;    ForkJoinPool.helpAsyncBlocker(executor,this);    if ((stat=putStat) == 0) {      try {        ForkJoinPool.managedBlock(this);      } catch (      InterruptedException ie) {        timeout=INTERRUPTED;      }      stat=putStat;    }    if (timeout < 0L)     Thread.currentThread().interrupt();  }  return stat;}  }
class C{  private void loadAdminUserId(String entidad) throws Exception {  LdapUsersTable table=new LdapUsersTable();  String qual;  if (_logger.isDebugEnabled())   _logger.debug("loadAdminUserId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    qual=table.getLoadOwnerIdQual(_acsId);    _adminUserId=DbSelectFns.selectLongInteger(dbConn,table.getOwnershipTableName(),table.getOwnerIdColumnName(),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public long append(Entry entry){  Assert.notNull(entry,"entry");  assertIsOpen();  checkRoll();  long index=segments.currentSegment().append(entry);  entryBuffer.append(entry);  return index;}  }
class C{  protected void connectToSourceRegistry(){  TLCOutputSourceRegistry.getModelCheckSourceRegistry().connect(this);}  }
class C{  public String readThing(){  while (PDFFile.isWhiteSpace(data[loc])) {    loc++;  }  int start=loc;  while (!PDFFile.isWhiteSpace(data[loc])) {    loc++;    if (!PDFFile.isRegularCharacter(data[loc])) {      break;    }  }  String s=new String(data,start,loc - start);  return s;}  }
class C{  @Override public void put(String name,long value){  emulatedFields.put(name,value);}  }
class C{  public static void main(String... args) throws Exception {  System.setProperty("h2.socketConnectTimeout","30000");  String password=System.getProperty("h2.ftpPassword");  if (password == null) {    return;  }  FtpClient ftp=FtpClient.open("h2database.com");  ftp.login("h2database",password);  ftp.changeWorkingDirectory("/httpdocs");  boolean coverage=new File("coverage/index.html").exists();  boolean coverageFailed;  if (coverage) {    byte[] data=IOUtils.readBytesAndClose(new FileInputStream("coverage/index.html"),-1);    String index=new String(data,"ISO-8859-1");    coverageFailed=index.contains("CLASS=\"h\"");    while (true) {      int idx=index.indexOf("<A HREF=\"");      if (idx < 0) {        break;      }      int end=index.indexOf('>',idx) + 1;      index=index.substring(0,idx) + index.substring(end);      idx=index.indexOf("</A>");      index=index.substring(0,idx) + index.substring(idx + "</A>".length());    }    index=StringUtils.replaceAll(index,"[all","");    index=StringUtils.replaceAll(index,"classes]","");    FileOutputStream out=new FileOutputStream("coverage/overview.html");    out.write(index.getBytes("ISO-8859-1"));    out.close();    new File("details").mkdir();    zip("details/coverage_files.zip","coverage",true);    zip("coverage.zip","details",false);    FileUtils.delete("coverage.txt");    FileUtils.delete("details/coverage_files.zip");    FileUtils.delete("details");    if (ftp.exists("/httpdocs","coverage")) {      ftp.removeDirectoryRecursive("/httpdocs/coverage");    }    ftp.makeDirectory("/httpdocs/coverage");  } else {    coverageFailed=true;  }  String testOutput;  boolean error;  if (new File("docs/html/testOutput.html").exists()) {    testOutput=IOUtils.readStringAndClose(new FileReader("docs/html/testOutput.html"),-1);    error=testOutput.contains(OutputCatcher.START_ERROR);  } else   if (new File("log.txt").exists()) {    testOutput=IOUtils.readStringAndClose(new FileReader("log.txt"),-1);    testOutput=testOutput.replaceAll("\n","<br />");    error=true;  } else {    testOutput="No log.txt";    error=true;  }  if (!ftp.exists("/httpdocs","automated")) {    ftp.makeDirectory("/httpdocs/automated");  }  String buildSql;  if (ftp.exists("/httpdocs/automated","history.sql")) {    buildSql=new String(ftp.retrieve("/httpdocs/automated/history.sql"));  } else {    buildSql="create table item(id identity, title varchar, " + "issued timestamp, desc varchar);\n";  }  String ts=new java.sql.Timestamp(System.currentTimeMillis()).toString();  String now=ts.substring(0,16);  int idx=testOutput.indexOf("Statements per second: ");  if (idx >= 0) {    int end=testOutput.indexOf("<br />",idx);    if (end >= 0) {      String result=testOutput.substring(idx + "Statements per second: ".length(),end);      now+=" " + result + " op/s";    }  }  String sql="insert into item(title, issued, desc) values('Build " + now + (error ? " FAILED" : "")+ (coverageFailed ? " COVERAGE" : "")+ "', '"+ ts+ "', '<a href=\"http://www.h2database.com/"+ "html/testOutput.html\">Output</a>"+ " - <a href=\"http://www.h2database.com/"+ "coverage/overview.html\">Coverage</a>"+ " - <a href=\"http://www.h2database.com/"+ "automated/h2-latest.jar\">Jar</a>');\n";  buildSql+=sql;  Connection conn;  try {    Class.forName("org.h2.Driver");    conn=DriverManager.getConnection("jdbc:h2:mem:");  } catch (  Exception e) {    Class.forName("org.h2.upgrade.v1_1.Driver");    conn=DriverManager.getConnection("jdbc:h2v1_1:mem:");  }  conn.createStatement().execute(buildSql);  String newsfeed=IOUtils.readStringAndClose(new FileReader("src/tools/org/h2/build/doc/buildNewsfeed.sql"),-1);  ScriptReader r=new ScriptReader(new StringReader(newsfeed));  Statement stat=conn.createStatement();  ResultSet rs=null;  while (true) {    String s=r.readStatement();    if (s == null) {      break;    }    if (stat.execute(s)) {      rs=stat.getResultSet();    }  }  rs.next();  String content=rs.getString("content");  conn.close();  ftp.store("/httpdocs/automated/history.sql",new ByteArrayInputStream(buildSql.getBytes()));  ftp.store("/httpdocs/automated/news.xml",new ByteArrayInputStream(content.getBytes()));  ftp.store("/httpdocs/html/testOutput.html",new ByteArrayInputStream(testOutput.getBytes()));  String jarFileName="bin/h2-" + Constants.getVersion() + ".jar";  if (FileUtils.exists(jarFileName)) {    ftp.store("/httpdocs/automated/h2-latest.jar",new FileInputStream(jarFileName));  }  if (coverage) {    ftp.store("/httpdocs/coverage/overview.html",new FileInputStream("coverage/overview.html"));    ftp.store("/httpdocs/coverage/coverage.zip",new FileInputStream("coverage.zip"));    FileUtils.delete("coverage.zip");  }  String mavenRepoDir=System.getProperty("user.home") + "/.m2/repository/";  boolean mavenSnapshot=new File(mavenRepoDir + "com/h2database/h2/1.0-SNAPSHOT/h2-1.0-SNAPSHOT.jar").exists();  if (mavenSnapshot) {    if (!ftp.exists("/httpdocs","m2-repo")) {      ftp.makeDirectory("/httpdocs/m2-repo");    }    if (!ftp.exists("/httpdocs/m2-repo","com")) {      ftp.makeDirectory("/httpdocs/m2-repo/com");    }    if (!ftp.exists("/httpdocs/m2-repo/com","h2database")) {      ftp.makeDirectory("/httpdocs/m2-repo/com/h2database");    }    if (!ftp.exists("/httpdocs/m2-repo/com/h2database","h2")) {      ftp.makeDirectory("/httpdocs/m2-repo/com/h2database/h2");    }    if (!ftp.exists("/httpdocs/m2-repo/com/h2database/h2","1.0-SNAPSHOT")) {      ftp.makeDirectory("/httpdocs/m2-repo/com/h2database/h2/1.0-SNAPSHOT");    }    if (!ftp.exists("/httpdocs/m2-repo/com/h2database","h2-mvstore")) {      ftp.makeDirectory("/httpdocs/m2-repo/com/h2database/h2-mvstore");    }    if (!ftp.exists("/httpdocs/m2-repo/com/h2database/h2-mvstore","1.0-SNAPSHOT")) {      ftp.makeDirectory("/httpdocs/m2-repo/com/h2database/h2-mvstore/1.0-SNAPSHOT");    }    ftp.store("/httpdocs/m2-repo/com/h2database/h2" + "/1.0-SNAPSHOT/h2-1.0-SNAPSHOT.pom",new FileInputStream(mavenRepoDir + "com/h2database/h2/1.0-SNAPSHOT/h2-1.0-SNAPSHOT.pom"));    ftp.store("/httpdocs/m2-repo/com/h2database/h2" + "/1.0-SNAPSHOT/h2-1.0-SNAPSHOT.jar",new FileInputStream(mavenRepoDir + "com/h2database/h2/1.0-SNAPSHOT/h2-1.0-SNAPSHOT.jar"));    ftp.store("/httpdocs/m2-repo/com/h2database/h2-mvstore" + "/1.0-SNAPSHOT/h2-mvstore-1.0-SNAPSHOT.pom",new FileInputStream(mavenRepoDir + "com/h2database/h2-mvstore/1.0-SNAPSHOT/h2-mvstore-1.0-SNAPSHOT.pom"));    ftp.store("/httpdocs/m2-repo/com/h2database/h2-mvstore" + "/1.0-SNAPSHOT/h2-mvstore-1.0-SNAPSHOT.jar",new FileInputStream(mavenRepoDir + "com/h2database/h2-mvstore/1.0-SNAPSHOT/h2-mvstore-1.0-SNAPSHOT.jar"));  }  ftp.close();}  }
class C{  public I createInvocation(){  return getInvocationBuilder().createInvocation();}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  @SuppressWarnings("deprecation") public SolrIndexConfig(SolrConfig solrConfig,String prefix,SolrIndexConfig def){  if (prefix == null) {    prefix="indexConfig";    log.debug("Defaulting to prefix \"" + prefix + "\" for index configuration");  }  if (def == null) {    def=new SolrIndexConfig(solrConfig);  }  Object unused=solrConfig.getNode(prefix,false);  luceneVersion=solrConfig.luceneMatchVersion;  assertWarnOrFail("The <mergeScheduler>myclass</mergeScheduler> syntax is no longer supported in solrconfig.xml. Please use syntax <mergeScheduler class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergeScheduler",false) != null) && (solrConfig.get(prefix + "/mergeScheduler/@class",null) == null)),true);  assertWarnOrFail("The <mergePolicy>myclass</mergePolicy> syntax is no longer supported in solrconfig.xml. Please use syntax <mergePolicy class=\"myclass\"/> instead.",!((solrConfig.getNode(prefix + "/mergePolicy",false) != null) && (solrConfig.get(prefix + "/mergePolicy/@class",null) == null)),true);  assertWarnOrFail("The <luceneAutoCommit>true|false</luceneAutoCommit> parameter is no longer valid in solrconfig.xml.",solrConfig.get(prefix + "/luceneAutoCommit",null) == null,true);  defaultMergePolicyClassName=def.defaultMergePolicyClassName;  useCompoundFile=solrConfig.getBool(prefix + "/useCompoundFile",def.useCompoundFile);  effectiveUseCompountFileSetting=useCompoundFile;  maxBufferedDocs=solrConfig.getInt(prefix + "/maxBufferedDocs",def.maxBufferedDocs);  maxMergeDocs=solrConfig.getInt(prefix + "/maxMergeDocs",def.maxMergeDocs);  maxIndexingThreads=solrConfig.getInt(prefix + "/maxIndexingThreads",def.maxIndexingThreads);  mergeFactor=solrConfig.getInt(prefix + "/mergeFactor",def.mergeFactor);  ramBufferSizeMB=solrConfig.getDouble(prefix + "/ramBufferSizeMB",def.ramBufferSizeMB);  writeLockTimeout=solrConfig.getInt(prefix + "/writeLockTimeout",def.writeLockTimeout);  lockType=solrConfig.get(prefix + "/lockType",def.lockType);  mergeSchedulerInfo=getPluginInfo(prefix + "/mergeScheduler",solrConfig,def.mergeSchedulerInfo);  mergePolicyInfo=getPluginInfo(prefix + "/mergePolicy",solrConfig,def.mergePolicyInfo);  termIndexInterval=solrConfig.getInt(prefix + "/termIndexInterval",def.termIndexInterval);  boolean infoStreamEnabled=solrConfig.getBool(prefix + "/infoStream",false);  if (infoStreamEnabled) {    String infoStreamFile=solrConfig.get(prefix + "/infoStream/@file",null);    if (infoStreamFile == null) {      log.info("IndexWriter infoStream solr logging is enabled");      infoStream=new LoggingInfoStream();    } else {      log.warn("IndexWriter infoStream file log is enabled: " + infoStreamFile + "\nThis feature is deprecated. Remove @file from <infoStream> to output messages to solr's logfile");      File f=new File(infoStreamFile);      File parent=f.getParentFile();      if (parent != null)       parent.mkdirs();      try {        FileOutputStream fos=new FileOutputStream(f,true);        infoStream=new PrintStreamInfoStream(new PrintStream(fos,true,"UTF-8"));      } catch (      Exception e) {        log.error("Could not create info stream for file " + infoStreamFile,e);      }    }  }  mergedSegmentWarmerInfo=getPluginInfo(prefix + "/mergedSegmentWarmer",solrConfig,def.mergedSegmentWarmerInfo);  if (mergedSegmentWarmerInfo != null && solrConfig.nrtMode == false) {    throw new IllegalArgumentException("Supplying a mergedSegmentWarmer will do nothing since nrtMode is false");  }  checkIntegrityAtMerge=solrConfig.getBool(prefix + "/checkIntegrityAtMerge",def.checkIntegrityAtMerge);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.646 -0400",hash_original_method="DBAFCB33512F3BBC9B4B2170EE57E152",hash_generated_method="2BD1292746950290FAAB984D2EC79E9C") private void purgeOne(){synchronized (queue) {    WeakKey key=(WeakKey)queue.poll();    if (key != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  protected void transform(double a[],int n){  if (n >= 4) {    int i, j;    int half=n >> 1;    double tmp[]=new double[n];    i=0;    for (j=0; j < n - 3; j=j + 2) {      tmp[i]=a[j] * h0 + a[j + 1] * h1 + a[j + 2] * h2 + a[j + 3] * h3;      tmp[i + half]=a[j] * g0 + a[j + 1] * g1 + a[j + 2] * g2 + a[j + 3] * g3;      i++;    }    tmp[i]=a[n - 2] * h0 + a[n - 1] * h1 + a[0] * h2 + a[1] * h3;    tmp[i + half]=a[n - 2] * g0 + a[n - 1] * g1 + a[0] * g2 + a[1] * g3;    for (i=0; i < n; i++) {      a[i]=tmp[i];    }  }}  }
class C{  public void testAddResources() throws Exception {  Configuration configurationElement=new Configuration();  configurationElement.setImplementation(StandaloneLocalConfigurationStub.class.getName());  Resource resource=new Resource();  resource.setName("name");  resource.setType("someType");  Map<String,String> parameters=new HashMap<String,String>();  parameters.put("key","value");  resource.setParameters(parameters);  configurationElement.setResources(new Resource[]{resource});  org.codehaus.cargo.container.configuration.Configuration configuration=configurationElement.createConfiguration("testContainer",ContainerType.INSTALLED,null,new CargoProject(null,null,null,null,null,Collections.<Artifact>emptySet(),null));  StandaloneLocalConfigurationStub conf=(StandaloneLocalConfigurationStub)configuration;  List<org.codehaus.cargo.container.configuration.entry.Resource> resources=conf.getResources();  assertEquals("resources not of correct size",1,resources.size());  org.codehaus.cargo.container.configuration.entry.Resource r=(org.codehaus.cargo.container.configuration.entry.Resource)resources.get(0);  assertEquals("name not correct","name",r.getName());  assertEquals("type not correct","someType",r.getType());}  }
class C{  private void processStorageAdapterResponse(StorageSystem system,List<PortController> portControllerList,AccessProfile accessProfile) throws IOException {  List<StorageHADomain> newAdapters=new ArrayList<StorageHADomain>();  List<StorageHADomain> updateAdapters=new ArrayList<StorageHADomain>();  if (null != portControllerList && !portControllerList.isEmpty()) {    for (    PortController portControllerFromResponse : portControllerList) {      boolean isNew=false;      String nativeGuid=NativeGUIDGenerator.generateNativeGuid(system,portControllerFromResponse.getObjectID(),NativeGUIDGenerator.ADAPTER);      StorageHADomain adapter=checkAdapterExistsInDB(nativeGuid);      if (null == adapter) {        isNew=true;        adapter=new StorageHADomain();        adapter.setStorageDeviceURI(system.getId());        adapter.setId(URIUtil.createId(StorageHADomain.class));        adapter.setAdapterName(portControllerFromResponse.getDisplayName());        adapter.setLabel(portControllerFromResponse.getDisplayName());        adapter.setNativeGuid(nativeGuid);        newAdapters.add(adapter);      }      adapter.setAdapterName(portControllerFromResponse.getDisplayName());      adapter.setLabel(portControllerFromResponse.getDisplayName());      if (!HDSConstants.NO_CLUSTER_ID.equalsIgnoreCase(portControllerFromResponse.getCluster())) {        adapter.setSlotNumber(portControllerFromResponse.getCluster());      }      adapter.setName(portControllerFromResponse.getDisplayName());      if (!isNew) {        updateAdapters.add(adapter);      }    }    _dbClient.createObject(newAdapters);    _dbClient.persistObject(updateAdapters);  }}  }
class C{  public Object loadEntity(String entityName) throws ODataUnmarshallingException {  Object entity=null;  if (entityName != null) {    try {      StructuredType entityType=JsonParserUtils.getStructuredType(entityName,entityDataModel);      if (entityType != null) {        entity=entityType.getJavaType().newInstance();      } else {        LOG.warn("Given entity '{}' is not found in entity data model",entityName);        throw new ODataUnmarshallingException("Couldn't initiate entity because given entity [" + entityName + "] is not found in entity data model.");      }    } catch (    InstantiationException|IllegalAccessException e) {      throw new ODataUnmarshallingException("Cannot instantiate entity",e);    }  }  return entity;}  }
class C{  private void checkGETStatusCodeWithAwait(final String request,final Integer statusCode){  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(String.valueOf(statusCode)));}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private void parseAffix(String aHeader,BufferedReader aReader) throws IOException {  String args[]=aHeader.split("\\s+");  boolean crossProduct=args[2].equals("Y");  int numLines=Integer.parseInt(args[3]);  for (int i=0; i < numLines; i++) {    String line=aReader.readLine();    if (line == null) {      throw new IOException("Unexpected end of file after reading [" + i + "] lines. Expected were ["+ numLines+ "] lines.");    }    String ruleArgs[]=line.split("\\s+");    Character flag=ruleArgs[1].toCharArray()[0];    Affix a=new Affix(args[0]);    a.setCrossProduct(crossProduct);    a.setFlag(flag);    a.setStripping(ruleArgs[2]);    a.setAffix(ruleArgs[3]);    a.setCondition(ruleArgs[4]);    List<Affix> list=affixes.get(flag);    if (list == null) {      list=new ArrayList<Affix>();      affixes.put(flag,list);    }    list.add(a);  }}  }
class C{  @Override public boolean service(RequestBaratine request){  request.status(_status);  request.header("content-type","text/plain; charset=utf-8");  request.write("Status: " + _status);  request.ok();  return true;}  }
class C{  public void outdent(){  final int length=indent.length();  if (length == 0) {    throw new IllegalArgumentException(" Outdent() without matching Indent().");  }  indent.delete(length - 2,length);}  }
class C{  public static String convertToBox(String s){  String temp=s.replaceAll("_P_","+_");  if (temp.endsWith("_P")) {    temp=temp.substring(0,temp.length() - 2) + "+";  }  temp=temp.replaceAll("_"," ");  return WordUtils.capitalizeFully(temp);}  }
class C{  public static boolean isOutsideRange(int startFrame,int endFrame,int frameNumber){  if (startFrame == -1 || endFrame == -1) {    return true;  }  boolean outsideRange;  if (startFrame <= endFrame) {    outsideRange=frameNumber < startFrame || frameNumber > endFrame;  } else {    outsideRange=frameNumber < startFrame && frameNumber > endFrame;  }  return outsideRange;}  }
class C{  private void updateRange(double value){  mMinValue=Math.min(mMinValue,value);  mMaxValue=Math.max(mMaxValue,value);}  }
class C{  public static DataType lookupForField(Element variableElement,Messager messager,Types types){  Element fieldTypeElement=types.asElement(variableElement.asType());  boolean isTypeElement=false;  if (fieldTypeElement instanceof TypeElement) {    isTypeElement=true;    TypeElement typeElement=(TypeElement)fieldTypeElement;    TypeMirror superclass=typeElement.getSuperclass();    if (superclass instanceof DeclaredType) {      DeclaredType superclassDeclaredType=(DeclaredType)superclass;      if (JAVA_LANG_ENUM.equals(getCanonicalTypeName(superclassDeclaredType))) {        return DataType.ENUM_STRING;      }    }  }  String fieldClassName=findFieldClassname(variableElement);  DataType dataType=builtInMap.get(fieldClassName);  if (dataType != null) {    return dataType;  }  throw new RuntimeException("Couldn't find data type for " + fieldClassName + "/"+ variableElement.getKind()+ "/isTypeElement: "+ isTypeElement);}  }
class C{  private Map<URI,Volume> filterVolumeMap(Map<URI,Volume> volumeMap,StorageSystem array){  Map<URI,Volume> filteredMap=new HashMap<>();  for (  Volume volume : volumeMap.values()) {    if (volume.getStorageController().equals(array.getId())) {      filteredMap.put(volume.getId(),volume);    }  }  return filteredMap;}  }
class C{  public boolean isSetData(){  return this.data != null;}  }
class C{  private void drawWaypoints(Canvas canvas){synchronized (waypoints) {    for (int i=0; i < waypoints.size(); i++) {      final Waypoint waypoint=waypoints.get(i);      if (waypoint.getLocation() == null) {        continue;      }      double xValue=getWaypointXValue(waypoint);      if (xValue > maxX) {        continue;      }      canvas.save();      float x=getX(getWaypointXValue(waypoint));      canvas.drawLine(x,topBorder + spacer + markerHeight / 2,x,topBorder + effectiveHeight,markerPaint);      canvas.translate(x - (float)(markerWidth * MapOverlay.WAYPOINT_X_ANCHOR),topBorder + spacer);      if (waypoints.get(i).getType() == WaypointType.STATISTICS) {        statisticsMarker.draw(canvas);      } else {        waypointMarker.draw(canvas);      }      canvas.restore();    }  }}  }
class C{  protected void finalize() throws IOException {  close();}  }
class C{  public static TransitSchedule mergeEqualProfilesOfAllRoutes(TransitSchedule schedule,String outputDirectory){  return new TransitScheduleSimplifier().mergeEqualTransitRoutesV1(schedule,outputDirectory);}  }
class C{  public void writeNext(String[] nextLine,boolean applyQuotesToAll){  if (nextLine == null) {    return;  }  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  for (int i=0; i < nextLine.length; i++) {    if (i != 0) {      sb.append(separator);    }    String nextElement=nextLine[i];    if (nextElement == null) {      continue;    }    Boolean stringContainsSpecialCharacters=stringContainsSpecialCharacters(nextElement);    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      sb.append(quotechar);    }    if (stringContainsSpecialCharacters) {      sb.append(processLine(nextElement));    } else {      sb.append(nextElement);    }    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      sb.append(quotechar);    }  }  sb.append(lineEnd);  pw.write(sb.toString());}  }
class C{  private static void println(String msg){}  }
class C{  private String convertMaskCharacterToRegex(String maskCharacter){  String result=maskCharacter.replaceAll("9","\\\\d");  result=result.replaceAll("a","[a-z]");  result=result.replaceAll("A","[A-Z]");  result=result.replaceAll("\\*",".*");  return result;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.io.FileSystem getFileSystem()")) {    java_io_FileSystem_getFileSystem(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public static boolean execute(ExecutablePool pool,String region,Object key,MODE mode){  AbstractOp op=new ContainsKeyOpImpl(region,key,mode);  Boolean result=(Boolean)pool.execute(op);  return result.booleanValue();}  }
class C{  List<Key> subrecordKeys(long lowTime,long highTime){  List<Key> keys=new ArrayList<Key>();  long lowBucketNumber=bucketNumber(lowTime);  long highBucketNumber=bucketNumber(highTime);  for (long index=lowBucketNumber; index <= highBucketNumber; index+=this.bucketSize) {    keys.add(formSubrecordKey(index));  }  return keys;}  }
class C{  public static boolean isCreditCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (!isInteger(st))   return false;  if (st.length() > 19)   return false;  return sumIsMod10(getLuhnSum(st));}  }
class C{  public boolean isManagerApproved(){  Object oo=get_Value(COLUMNNAME_IsManagerApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void doStateLeaveHive(){  HiveEntrance entrance=hive.getEntrance();  if (entrance.isInSphere(this)) {    forward();    return;  }  if (hive.isInSphere(this)) {    headTo(hive.getEntrance());    forward();    return;  }  if (foodSource != null) {    setColor(foodSource.getColor());    repeatedDance=0;    setState(State.foraging);  }  if (foodSource == null) {    setColor(Color.green);    setState(State.scouting);  }}  }
class C{  private static boolean checkDeleteUnOrderListSpan(Editable editable,int start,int before,int after){  if (before == 0) {    return false;  }  MDUnOrderListSpan mdUnOrderListSpan=getUnOrderListSpan(editable,start,true);  if (mdUnOrderListSpan == null) {    return false;  }  int position=EditUtils.findBeforeNewLineChar(editable,start) + 1;  int totalPosition=position + mdUnOrderListSpan.getNested();  if (totalPosition >= start && start <= position) {    return true;  }  return false;}  }
class C{  public DetachParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_DETACH_SUCCESS);}  }
class C{  public static String generateNativeGuid(String deviceType,String serialNumber,String fileShareNativeId){  return String.format("%s+%s+" + FILESYSTEM + "+%s",_deviceTypeMap.get(deviceType),serialNumber,fileShareNativeId);}  }
class C{  public List<Block> removeDefinition(Block block){  String procedureName=getProcedureName(block);  if (mProcedureDefinitions.containsKey(procedureName)) {    List<Block> retval=mProcedureReferences.get(procedureName);    mProcedureReferences.remove(procedureName);    mProcedureDefinitions.remove(procedureName);    mProcedureNameManager.remove(procedureName);    return retval;  } else {    throw new IllegalStateException("Tried to remove an unknown procedure definition");  }}  }
class C{  public CombineSuggestion(SuggestWord suggestion,int[] originalTermIndexes){  this.suggestion=suggestion;  this.originalTermIndexes=originalTermIndexes;}  }
class C{  public static NbtTag readTag(File in,NbtLimiter limiter) throws IOException {  return readTag(new FileInputStream(in),limiter);}  }
class C{  public static double meterToFoot(double meter){  return 3.279 * meter;}  }
class C{  public Object decode(Object pObject){  if (!(pObject instanceof byte[])) {    throw new InvalidParameterException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  public static void sort(double[] keys,int[] values,int len){  sort(keys,values,0,len);}  }
class C{  public static boolean encodeToFile(final byte[] dataToEncode,final String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public Builder withLeaseRejectAction(Action1<VirtualMachineLease> leaseRejectAction){  this.leaseRejectAction=leaseRejectAction;  return this;}  }
class C{  @Override public String toString(){  return value.toString();}  }
class C{  private void updateCurrentWindowTitle(final INaviView view){  final IGraphPanel window=getActiveGraphWindow();  if (window == null) {    return;  }  final INaviView currentView=window.getModel().getGraph().getRawView();  if (view == currentView) {    setTitle(CWindowTitle.generate(window));  }}  }
class C{  public ConfigPaymentPanelEmpty(){  initComponents();}  }
class C{  public void format(long inDate,StringBuilder buffer){  buffer.append(format(inDate));}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success) {    String sqlDocAction="INSERT INTO AD_Document_Action_Access " + "(AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy," + "C_DocType_ID , AD_Ref_List_ID, AD_Role_ID) "+ "(SELECT " + getAD_Client_ID() + ",0,'Y', SysDate,"+ getUpdatedBy()+ ", SysDate,"+ getUpdatedBy()+ ", doctype.C_DocType_ID, action.AD_Ref_List_ID, rol.AD_Role_ID "+ "FROM AD_Client client "+ "INNER JOIN C_DocType doctype ON (doctype.AD_Client_ID=client.AD_Client_ID) "+ "INNER JOIN AD_Ref_List action ON (action.AD_Reference_ID=135) "+ "INNER JOIN AD_Role rol ON (rol.AD_Client_ID=client.AD_Client_ID) "+ "WHERE client.AD_Client_ID="+ getAD_Client_ID()+ " AND doctype.C_DocType_ID="+ get_ID()+ " AND rol.IsManual='N'"+ ")";    int docact=DB.executeUpdate(sqlDocAction,get_TrxName());    log.fine("AD_Document_Action_Access=" + docact);  }  return success;}  }
class C{  protected void selectPathForEvent(TreePath path,MouseEvent event){  if (isMultiSelectEvent(event)) {    TreePath anchor=getAnchorSelectionPath();    int anchorRow=(anchor == null) ? -1 : getRowForPath(tree,anchor);    if (anchorRow == -1 || tree.getSelectionModel().getSelectionMode() == TreeSelectionModel.SINGLE_TREE_SELECTION) {      tree.setSelectionPath(path);    } else {      int row=getRowForPath(tree,path);      TreePath lastAnchorPath=anchor;      if (isToggleSelectionEvent(event)) {        if (tree.isRowSelected(anchorRow)) {          tree.addSelectionInterval(anchorRow,row);        } else {          tree.removeSelectionInterval(anchorRow,row);          tree.addSelectionInterval(row,row);        }      } else       if (row < anchorRow) {        tree.setSelectionInterval(row,anchorRow);      } else {        tree.setSelectionInterval(anchorRow,row);      }      lastSelectedRow=row;      setAnchorSelectionPath(lastAnchorPath);      setLeadSelectionPath(path);    }  } else   if (isToggleSelectionEvent(event)) {    if (tree.isPathSelected(path))     tree.removeSelectionPath(path); else     tree.addSelectionPath(path);    lastSelectedRow=getRowForPath(tree,path);    setAnchorSelectionPath(path);    setLeadSelectionPath(path);  } else   if (SwingUtilities.isLeftMouseButton(event)) {    tree.setSelectionPath(path);    if (isToggleEvent(event)) {      toggleExpandState(path);    }  }}  }
class C{  public Tan(){  super(Number.class,Number.class);}  }
class C{  void extract(String fname,String files[]) throws IOException {  ZipFile zf=new ZipFile(fname);  Set<ZipEntry> dirs=newDirSet();  Enumeration<? extends ZipEntry> zes=zf.entries();  while (zes.hasMoreElements()) {    ZipEntry e=zes.nextElement();    if (files == null) {      dirs.add(extractFile(zf.getInputStream(e),e));    } else {      String name=e.getName();      for (      String file : files) {        if (name.startsWith(file)) {          dirs.add(extractFile(zf.getInputStream(e),e));          break;        }      }    }  }  zf.close();  updateLastModifiedTime(dirs);}  }
class C{  @Override public boolean isReadOnly(int columnIndex){  return true;}  }
class C{  public JFXDialog(StackPane dialogContainer,Region content,DialogTransition transitionType){  initialize();  setContent(content);  setDialogContainer(dialogContainer);  this.transitionType.set(transitionType);  initChangeListeners();}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof PackedColorModel)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  PackedColorModel cm=(PackedColorModel)obj;  int numC=cm.getNumComponents();  if (numC != numComponents) {    return false;  }  for (int i=0; i < numC; i++) {    if (maskArray[i] != cm.getMask(i)) {      return false;    }  }  return true;}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint,int minWidth,int minHeight){  checkState(STATE_ADDING,STATE_ADDING);  boolean drawBackground=background != null;  boolean drawText=(text != null) && (textPaint != null);  Rect padding=new Rect();  if (drawBackground) {    background.getPadding(padding);    minWidth=Math.max(minWidth,background.getMinimumWidth());    minHeight=Math.max(minHeight,background.getMinimumHeight());  }  int ascent=0;  int descent=0;  int measuredTextWidth=0;  if (drawText) {    ascent=(int)Math.ceil(-textPaint.ascent());    descent=(int)Math.ceil(textPaint.descent());    measuredTextWidth=(int)Math.ceil(textPaint.measureText(text));  }  int textHeight=ascent + descent;  int textWidth=Math.min(mStrikeWidth,measuredTextWidth);  int padHeight=padding.top + padding.bottom;  int padWidth=padding.left + padding.right;  int height=Math.max(minHeight,textHeight + padHeight);  int width=Math.max(minWidth,textWidth + padWidth);  int effectiveTextHeight=height - padHeight;  int effectiveTextWidth=width - padWidth;  int centerOffsetHeight=(effectiveTextHeight - textHeight) / 2;  int centerOffsetWidth=(effectiveTextWidth - textWidth) / 2;  int u=mU;  int v=mV;  int lineHeight=mLineHeight;  if (width > mStrikeWidth) {    width=mStrikeWidth;  }  if (u + width > mStrikeWidth) {    u=0;    v+=lineHeight;    lineHeight=0;  }  lineHeight=Math.max(lineHeight,height);  if (v + lineHeight > mStrikeHeight) {    throw new IllegalArgumentException("Out of texture space.");  }  int u2=u + width;  int vBase=v + ascent;  int v2=v + height;  if (drawBackground) {    background.setBounds(u,v,u + width,v + height);    background.draw(mCanvas);  }  if (drawText) {    mCanvas.drawText(text,u + padding.left + centerOffsetWidth,vBase + padding.top + centerOffsetHeight,textPaint);  }  mU=u + width;  mV=v;  mLineHeight=lineHeight;  mLabels.add(new Label(width,height,ascent,u,v + height,width,-height));  return mLabels.size() - 1;}  }
class C{  @Override public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen,Preference preference){  log("onPreferenceTreeClick: preference=" + preference);  if (preference == mAirplaneModePreference && Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {    startActivityForResult(new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS,null),REQUEST_CODE_EXIT_ECM);    return true;  } else   if (preference == findPreference(KEY_MANAGE_MOBILE_PLAN)) {    onManageMobilePlanClick();  }  return super.onPreferenceTreeClick(preferenceScreen,preference);}  }
class C{  public static SoapMessageImpl createResponse(String queryDir,String fileName) throws Exception {  Soap message=createSoapMessage(queryDir,fileName);  if (!(message instanceof SoapMessageImpl)) {    throw new RuntimeException("Got " + message.getClass() + " instead of SoapResponse");  }  if (((SoapMessageImpl)message).isRequest()) {    throw new RuntimeException("Got request instead of response");  }  return (SoapMessageImpl)message;}  }
class C{  private byte[] decryptFragment(byte[] ciphertextFragment,final DTLSConnectionState currentReadState) throws GeneralSecurityException {  if (currentReadState == null) {    return ciphertextFragment;  }  byte[] result=ciphertextFragment;  CipherSuite cipherSuite=currentReadState.getCipherSuite();  LOGGER.log(Level.FINEST,"Decrypting record fragment using current read state\n{0}",currentReadState);switch (cipherSuite.getCipherType()) {case NULL:    break;case AEAD:  result=decryptAEAD(ciphertextFragment,currentReadState);break;case BLOCK:result=decryptBlockCipher(ciphertextFragment,currentReadState);break;case STREAM:break;default :break;}return result;}  }
class C{  public void readDump() throws IOException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(input,this);  } catch (  ParserConfigurationException e) {    throw (IOException)new IOException(e.getMessage()).initCause(e);  }catch (  SAXException e) {    throw (IOException)new IOException(e.getMessage()).initCause(e);  }  writer.close();}  }
class C{  private static boolean updateIndex(final Project project,final VirtualFile root,final Collection<FilePath> added,final Collection<FilePath> removed,final List<VcsException> exceptions){  boolean rc=true;  if (!added.isEmpty()) {    try {      GitFileUtils.addPaths(project,root,added);    } catch (    VcsException ex) {      exceptions.add(ex);      rc=false;    }  }  if (!removed.isEmpty()) {    try {      GitFileUtils.delete(project,root,removed,"--ignore-unmatch");    } catch (    VcsException ex) {      exceptions.add(ex);      rc=false;    }  }  return rc;}  }
class C{  public static String truncate(final String value,final int length){  if (length < 0) {    throw new IllegalArgumentException("Length must be greater than equal to 0!");  }  return (value == null ? null : value.substring(0,Math.min(value.length(),length)));}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public static void copyFiles(File src,File dest) throws IOException {  if (src.getName().startsWith(".")) {    return;  }  if (!src.exists()) {    throw new IOException("copyFiles: Can not find source: " + src.getAbsolutePath() + ".");  } else   if (!src.canRead()) {    throw new IOException("copyFiles: No right to source: " + src.getAbsolutePath() + ".");  }  if (src.isDirectory()) {    if (!dest.exists()) {      if (!dest.mkdirs()) {        throw new IOException("copyFiles: Could not create direcotry: " + dest.getAbsolutePath() + ".");      }    }    String list[]=src.list();    for (    String element : list) {      File dest1=new File(dest,element);      File src1=new File(src,element);      copyFiles(src1,dest1);    }  } else {    FileInputStream fin=null;    FileOutputStream fout=null;    byte[] buffer=new byte[4096];    int bytesRead;    try {      fin=new FileInputStream(src);      fout=new FileOutputStream(dest);      while ((bytesRead=fin.read(buffer)) >= 0) {        fout.write(buffer,0,bytesRead);      }    } catch (    IOException e) {      IOException wrapper=new IOException("copyFiles: Unable to copy file: " + src.getAbsolutePath() + "to"+ dest.getAbsolutePath()+ ".");      wrapper.initCause(e);      wrapper.setStackTrace(e.getStackTrace());      throw wrapper;    } finally {      if (fin != null) {        try {          fin.close();        } catch (        Throwable t) {        }      }      if (fout != null) {        try {          fout.close();        } catch (        Throwable t) {        }      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (this.fixedRangeAxisSpace != null) {    if (this.orientation.isHorizontal()) {      space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);      space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);    } else     if (this.orientation == PlotOrientation.VERTICAL) {      space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);      space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);    }  } else {    for (    ValueAxis yAxis : this.rangeAxes.values()) {      if (yAxis != null) {        int i=findRangeAxisIndex(yAxis);        RectangleEdge edge=getRangeAxisEdge(i);        space=yAxis.reserveSpace(g2,this,plotArea,edge,space);      }    }  }  return space;}  }
class C{  private boolean bindBestPackageLocked(String justCheckThisPackage){  Intent intent=new Intent(mAction);  if (justCheckThisPackage != null) {    intent.setPackage(justCheckThisPackage);  }  List<ResolveInfo> rInfos=mPm.queryIntentServicesAsUser(intent,PackageManager.GET_META_DATA,UserHandle.USER_OWNER);  int bestVersion=Integer.MIN_VALUE;  String bestPackage=null;  boolean bestIsMultiuser=false;  if (rInfos != null) {    for (    ResolveInfo rInfo : rInfos) {      String packageName=rInfo.serviceInfo.packageName;      try {        PackageInfo pInfo;        pInfo=mPm.getPackageInfo(packageName,PackageManager.GET_SIGNATURES);        if (!isSignatureMatch(pInfo.signatures)) {          Log.w(mTag,packageName + " resolves service " + mAction+ ", but has wrong signature, ignoring");          continue;        }      } catch (      NameNotFoundException e) {        Log.wtf(mTag,e);        continue;      }      int version=Integer.MIN_VALUE;      boolean isMultiuser=false;      if (rInfo.serviceInfo.metaData != null) {        version=rInfo.serviceInfo.metaData.getInt(EXTRA_SERVICE_VERSION,Integer.MIN_VALUE);        isMultiuser=rInfo.serviceInfo.metaData.getBoolean(EXTRA_SERVICE_IS_MULTIUSER);      }      if (version > mVersion) {        bestVersion=version;        bestPackage=packageName;        bestIsMultiuser=isMultiuser;      }    }    if (D) {      Log.d(mTag,String.format("bindBestPackage for %s : %s found %d, %s",mAction,(justCheckThisPackage == null ? "" : "(" + justCheckThisPackage + ") "),rInfos.size(),(bestPackage == null ? "no new best package" : "new best package: " + bestPackage)));    }  } else {    if (D)     Log.d(mTag,"Unable to query intent services for action: " + mAction);  }  if (bestPackage != null) {    bindToPackageLocked(bestPackage,bestVersion,bestIsMultiuser);    return true;  }  return false;}  }
class C{  private boolean processAccessKey(String keyStr,HTMLComponent htmlC,Component ui,boolean override){  if (keyStr.startsWith("\\")) {    try {      int keyCode=Integer.parseInt(keyStr.substring(1),16);      htmlC.addAccessKey((char)keyCode,ui,override);      return true;    } catch (    NumberFormatException nfe) {      return false;    }  } else   if (keyStr.length() == 1) {    htmlC.addAccessKey(keyStr.charAt(0),ui,override);    return true;  } else {    if (specialKeys != null) {      Integer key=(Integer)specialKeys.get(keyStr);      if (key != null) {        htmlC.addAccessKey(key.intValue(),ui,override);        return true;      }    }    return false;  }}  }
class C{  private static byte CallByteMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallByteMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Byte,false);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected OneToOneMapping processEntityMapKeyClass(MappedKeyMapAccessor mappedKeyMapAccessor){  String mapKeyClassName=mappedKeyMapAccessor.getMapKeyClass().getName();  OneToOneMapping keyMapping=new OneToOneMapping();  keyMapping.setReferenceClassName(mapKeyClassName);  keyMapping.dontUseIndirection();  keyMapping.setDescriptor(getDescriptor().getClassDescriptor());  EntityAccessor mapKeyAccessor=getProject().getEntityAccessor(mapKeyClassName);  MetadataDescriptor mapKeyClassDescriptor=mapKeyAccessor.getDescriptor();  String defaultFKFieldName=getAttributeName() + DEFAULT_MAP_KEY_COLUMN_SUFFIX;  List<JoinColumnMetadata> joinColumns=getJoinColumns(mappedKeyMapAccessor.getMapKeyJoinColumns(),mapKeyClassDescriptor);  ForeignKeyMetadata foreignKey=getForeignKey(mappedKeyMapAccessor.getMapKeyForeignKey(),mapKeyClassDescriptor);  processForeignKeyRelationship(keyMapping,joinColumns,foreignKey,mapKeyClassDescriptor,defaultFKFieldName,getDefaultTableForEntityMapKey());  return keyMapping;}  }
class C{  public static Inet4Address fromInteger(int address){  return getInet4Address(Ints.toByteArray(address));}  }
class C{  public static SpecialCaseMap[] readSpecFile(File file,int plane) throws FileNotFoundException {  ArrayList<SpecialCaseMap> caseMaps=new ArrayList<>(150);  int count=0;  BufferedReader f=new BufferedReader(new FileReader(file));  String line=null;  loop:   while (true) {    try {      line=f.readLine();    } catch (    IOException e) {      break loop;    }    if (line == null)     break loop;    SpecialCaseMap item=parse(line.trim());    if (item != null) {      if (item.getCharSource() >> 16 < plane)       continue;      if (item.getCharSource() >> 16 > plane)       break;      caseMaps.add(item);      ++count;    }  }  caseMaps.trimToSize();  SpecialCaseMap[] result=new SpecialCaseMap[caseMaps.size()];  caseMaps.toArray(result);  Arrays.sort(result);  return result;}  }
class C{  public static void main(String[] argv){  runFilter(new SparseToNonSparse(),argv);}  }
class C{  public static void fill(long[][] matrix,long value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      matrix[r][c]=value;    }  }}  }
class C{  public E remove(){  E o=poll();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  public void storeCookies(URLConnection conn) throws IOException {  String domain=getDomainFromHost(conn.getURL().getHost());  Map domainStore;  if (store.containsKey(domain)) {    domainStore=(Map)store.get(domain);  } else {    domainStore=new HashMap();    store.put(domain,domainStore);  }  String headerName=null;  for (int i=1; (headerName=conn.getHeaderFieldKey(i)) != null; i++) {    if (headerName.equalsIgnoreCase(SET_COOKIE)) {      Map cookie=new HashMap();      StringTokenizer st=new StringTokenizer(conn.getHeaderField(i),COOKIE_VALUE_DELIMITER);      if (st.hasMoreTokens()) {        String token=st.nextToken();        String name=token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR));        String value=token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length());        domainStore.put(name,cookie);        cookie.put(name,value);      }      while (st.hasMoreTokens()) {        String token=st.nextToken();        if (StringUtil.containsChar(token,NAME_VALUE_SEPARATOR)) {          cookie.put(token.substring(0,token.indexOf(NAME_VALUE_SEPARATOR)).toLowerCase(),token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1,token.length()));        }      }    }  }}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.333 -0500",hash_original_method="3E6F4B689378892245F121C3B2A70863",hash_generated_method="C0F5598F3E4906D55CD1CB185842DAEC") public int size(){  return this.hmap.size();}  }
class C{  public void close(){  try {    in.close();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public void mouseClicked(MouseEvent e){  if (!e.isConsumed()) {    RTextArea textArea=getTextArea();    int nclicks=e.getClickCount();    if (SwingUtilities.isLeftMouseButton(e)) {      if (nclicks <= 2) {        if (IS_JAVA_1_4) {          if (nclicks == 1) {            selectedWordEvent=null;          } else {            selectWord(e);            selectedWordEvent=null;          }        }      } else {        nclicks%=2;switch (nclicks) {case 0:          selectWord(e);        selectedWordEvent=null;      break;case 1:    Action a=null;  ActionMap map=textArea.getActionMap();if (map != null) a=map.get(RTextAreaEditorKit.selectLineAction);if (a == null) {if (selectLine == null) {  selectLine=new RTextAreaEditorKit.SelectLineAction();}a=selectLine;}a.actionPerformed(new ActionEvent(textArea,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));}}} else if (SwingUtilities.isMiddleMouseButton(e)) {if (nclicks == 1 && textArea.isEditable() && textArea.isEnabled()) {JTextComponent c=(JTextComponent)e.getSource();if (c != null) {try {Toolkit tk=c.getToolkit();Clipboard buffer=tk.getSystemSelection();if (buffer != null) {adjustCaret(e);TransferHandler th=c.getTransferHandler();if (th != null) {Transferable trans=buffer.getContents(null);if (trans != null) th.importData(c,trans);}adjustFocus(true);} else {textArea.paste();}} catch (HeadlessException he) {}}}}}}  }
class C{  public Element appendChild(NewElement newElement){  checkNotRemoved();  requireNonNull(newElement,"Required not null new element");  if (isVoid()) {    throw new XMLTreeException("Append child is not permitted on void elements");  }  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  delegate.appendChild(newNode);  xmlTree.appendChild(newElement,element,this);  return this;}  }
class C{  public static void main(String[] args){  doLoop(SleuthWorld.class,args);  System.exit(0);}  }
class C{  public DataSet simulateDataFisher(int sampleSize){  return simulateDataFisher(getUncorrelatedGaussianShocks(sampleSize),50,1e-5);}  }
class C{  public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  protected OctalIntLiteralImpl(){  super();}  }
class C{  public static String joinClauses(final String separator,final String... clauses){  StringBuilder sql=new StringBuilder();  if (clauses != null) {    for (    String c : clauses) {      if (c != null) {        if (sql.length() > 0) {          sql.append(separator);        }        sql.append(c);      }    }  }  if (sql.length() > 0) {    return sql.toString();  } else {    return null;  }}  }
class C{  public int mask(){  return 1 << this.ordinal();}  }
class C{  int findEndText(String source,int ofs){  int slen=source.length();  for (int i=ofs; i < slen; i++) {    if (isAlpha(source.charAt(i)) == false && isNumeric(source.charAt(i)) == false) {      return i;    }  }  return -1;}  }
class C{  public TileEntityNoisyElectricBlock(String soundPath,String name,double maxEnergy){  super(name,maxEnergy);  soundURL=new ResourceLocation("mekanism","tile." + soundPath);}  }
class C{  public boolean fetchRootsAndNotify(@NotNull Collection<GitRepository> roots,@Nullable String errorNotificationTitle,boolean notifySuccess){  Map<VirtualFile,String> additionalInfo=new HashMap<VirtualFile,String>();  for (  GitRepository repository : roots) {    LOG.info("fetching " + repository);    GitFetchResult result=fetch(repository);    String ai=result.getAdditionalInfo();    if (!StringUtil.isEmptyOrSpaces(ai)) {      additionalInfo.put(repository.getRoot(),ai);    }    if (!result.isSuccess()) {      Collection<Exception> errors=new ArrayList<Exception>(getErrors());      errors.addAll(result.getErrors());      displayFetchResult(myProject,result,errorNotificationTitle,errors);      return false;    }  }  if (notifySuccess) {    VcsNotifier.getInstance(myProject).notifySuccess("Fetched successfully");  }  String addInfo=makeAdditionalInfoByRoot(additionalInfo);  if (!StringUtil.isEmptyOrSpaces(addInfo)) {    VcsNotifier.getInstance(myProject).notifyMinorInfo("Fetch details",addInfo);  }  return true;}  }
class C{  @SuppressWarnings("deprecation") public void resize(Dimension d){  resize(d.width,d.height);}  }
class C{  public boolean isTearOff(){  throw new Error("boolean isTearOff() {} not yet implemented");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void loadChat(String text,String format,boolean processUnderstanding,boolean pin){  try {    if ("Response List".equalsIgnoreCase(format)) {      processResponseLog(text,pin);    } else     if ("Chat Log".equalsIgnoreCase(format)) {      processChatLog(text,processUnderstanding,pin);    } else     if ("CSV List".equalsIgnoreCase(format)) {      processCSVLog(text,pin);    } else {      throw new BotException("Invalid chat log format '" + format + "'");    }  } catch (  BotException exception) {    throw exception;  }catch (  Exception exception) {    throw new BotException(exception);  }}  }
class C{  public Method element(){  return this.element;}  }
class C{  public HtmlPolicyBuilder allowCommonInlineFormattingElements(){  return allowElements("b","i","font","s","u","o","sup","sub","ins","del","strong","strike","tt","code","big","small","br","span","em");}  }
class C{  public ViPRSystemClient withLogin(String username,String password){  auth().login(username,password);  return this;}  }
class C{  public static Face drawUp(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face up=new Face();  up.normal=Direction.UP.toVector();  up.drawVertex(new Vertex(maxX,maxY,minZ,textureCoordinates.getTopMinU(),textureCoordinates.getTopMaxV()));  up.drawVertex(new Vertex(minX,maxY,minZ,textureCoordinates.getTopMaxU(),textureCoordinates.getTopMaxV()));  up.drawVertex(new Vertex(minX,maxY,maxZ,textureCoordinates.getTopMaxU(),textureCoordinates.getTopMinV()));  up.drawVertex(new Vertex(maxX,maxY,maxZ,textureCoordinates.getTopMinU(),textureCoordinates.getTopMinV()));  model.drawFace(up);  return up;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodename.class,args);}  }
class C{  public static boolean replicationGroupHasNoOtherSnapshot(DbClient dbClient,String rgName,Collection<URI> snapshots,URI storage){  List<BlockSnapshot> snapshotsInRG=getSnapshotsPartOfReplicationGroup(rgName,storage,dbClient);  List<URI> snapshotURsInRG=newArrayList(transform(snapshotsInRG,fctnDataObjectToID()));  s_logger.info("Snapshot count in RG: {}, given snapshots count: {}",snapshotsInRG.size(),snapshots.size());  snapshotURsInRG.removeAll(snapshots);  return snapshotURsInRG.isEmpty();}  }
class C{  public boolean isA0Enabled(){  return this.isAnalogEnabled(0);}  }
class C{  private void createActionElement(Action action,DirectedAcyclicGraph<Action,DefaultEdge> workflowGraph,Action transition,Action errorTransition,Directives directives){  ActionType type=getActionType(action.getType());  directives.add("action").attr("name",action.getName()).add(type.getTag());  if (type.getXmlns() != null) {    directives.attr("xmlns",type.getXmlns());  }  Map<String,List<String>> interpolated=NamedArgumentInterpolator.interpolate(type.getDefaultArgs(),action.getNamedArgs(),type.getDefaultInterpolations(),action.getPositionalArgs());  Map<String,String> mergedConfigurationProperties=new HashMap<>(type.getProperties());  if (action.getConfigurationProperties() != null) {    mergedConfigurationProperties.putAll(action.getConfigurationProperties());  }  addInnerActionElements(mergedConfigurationProperties,type.getConfigurationPosition(),directives,interpolated,action.getPositionalArgs());  directives.up();  String okTransitionName=action.getForceOk() != null ? action.getForceOk() : transition.getName();  directives.add("ok").attr("to",okTransitionName).up();  String interpolatedForceError=NamedArgumentInterpolator.interpolate(action.getForceError(),ImmutableMap.of("okTransition",okTransitionName),type.getDefaultInterpolations());  String errorTransitionName=interpolatedForceError != null ? interpolatedForceError : errorTransition.getName();  String enclosingJoinName=getEnclosingForkJoinName(action,workflowGraph);  if (enclosingJoinName != null) {    errorTransitionName=interpolatedForceError != null ? interpolatedForceError : enclosingJoinName;  }  directives.add("error").attr("to",errorTransitionName).up();}  }
class C{  public static Mono<Void> completableToMono(Completable source){  return new CompletableAsMono(source);}  }
class C{  @Override public void reset(){  if (!this.isLocked()) {    super.reset();    for (int i=0; i < mHotspots.size(); i++)     mHotspots.get(i).reset();  }}  }
class C{  private static List<String> deleteImport(List<String> lines){  return deleteSpecificImports(lines,JMap.class,JGlobalMap.class,JMapAccessors.class,JMapAccessor.class);}  }
class C{  public void importTechnicalServices(String tsXml) throws Exception {  VOTechServiceFactory.importTechnicalServices(srvProvService,tsXml);}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public void reset(){  digest.reset();}  }
class C{  public final Population nextGeneration(){  calculateCumulativeRelativeFitnesses();  int popSize=population.size();  List<Genome> nextPopulation=new ArrayList<Genome>();  for (int i=0; i < popSize; i++) {    Genome parent=population.get(pickParent());    nextPopulation.add(parent.replicate(mutator,fitnessFunction));  }  Population p=new Population(nextPopulation,mutator,fitnessFunction);  return p;}  }
class C{  public FileSelectView(Context context,int dialogid,CallbackBundle callback,String suffix,Map<String,Integer> images){  super(context);  this.imagemap=images;  this.suffix=suffix == null ? "" : suffix.toLowerCase(Locale.getDefault());  this.callback=callback;  this.dialogid=dialogid;  this.setOnItemClickListener(this);  refreshFileList();}  }
class C{  public String toGenericString(){  throw new Error("TODO");}  }
class C{  public MigrationException(final String message){  super(message);}  }
class C{  public static void threadWantsSharedResources(){  threadWantsOwnResources.set(Boolean.FALSE);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message,String title,int messageType){  showInternalMessageDialog(parentComponent,message,title,messageType,null);}  }
class C{  public ActionEvent(@NotNull String place,@NotNull Presentation presentation,@NotNull ActionManager actionManager,int modifiers){  this(place,presentation,actionManager,modifiers,null);}  }
class C{  protected IfImpl(){  super();}  }
class C{  public void dragGestureRecognized(DragGestureEvent e){}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public void updateBinaryStream(String columnLabel,java.io.InputStream x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.EXECUTION_CONTEXT;}  }
class C{  public long calculateStartTime(){  if (startTime == 0) {    return calculateEndTime() - 3600000;  } else   if (startTime < 0) {    return calculateEndTime() + startTime;  }  return startTime;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public boolean retainEntries(TDoubleDoubleProcedure procedure){  boolean modified=false;  byte[] states=_states;  double[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public static int dip2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  private static void writeProperties(Properties props,String keyPrefix,Map<String,Boolean> filters){  int counter=0;  Set<Entry<String,Boolean>> entrySet=filters.entrySet();  for (  Entry<String,Boolean> entry : entrySet) {    props.setProperty(keyPrefix + counter,entry.getKey() + BOOL_SEPARATOR + entry.getValue());    counter++;  }  boolean keyFound=true;  while (keyFound) {    String key=keyPrefix + counter;    String property=props.getProperty(key);    if (property == null) {      keyFound=false;    } else {      props.remove(key);    }  }}  }
class C{  public static <A>List<A> of(A x1){  return new List<A>(x1,List.<A>nil());}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  static <K extends Comparable<K>,V>SmallSortedMap<K,V> newInstanceForTest(int arraySize){  return new SmallSortedMap<K,V>(arraySize);}  }
class C{  public static final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public Street(){  super(KEY);}  }
class C{  public static void replaceContents(Element container,Element contents){  container.setInnerHTML("");  container.appendChild(contents);}  }
class C{  public void switchCamera(){  if (session != null) {    getPreview(session.getDescriptor()).setVisibility(View.INVISIBLE);    switchPending=true;    stop();  }}  }
class C{  public boolean isFailed(){  return getState().isError();}  }
class C{  protected OneToOneEncoder createEncoder(){  return null;}  }
class C{  public static int equalsOne(String src,String[] dest){  if (src == null || dest == null) {    return -1;  }  for (int i=0; i < dest.length; i++) {    if (src.equals(dest[i])) {      return i;    }  }  return -1;}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public int indexOf(Uri uri){  if (!mUriMap.containsKey(uri)) {    return -1;  }  return mList.indexOf(new UriWrapper(uri));}  }
class C{  static int compareVersion(Version a,Version b){  if (a == b) {    return 0;  }  if (a == null) {    return -1;  }  if (b == null) {    return 1;  }  int compare=MetadataKey.compareClass(a.getServiceClass(),b.getServiceClass());  if (compare != 0) {    return compare;  }  int aMajor=a.getMajor();  int bMajor=b.getMajor();  if (aMajor != bMajor) {    return aMajor < bMajor ? -1 : 1;  }  int aMinor=a.getMinor();  int bMinor=b.getMinor();  return aMinor < bMinor ? -1 : (aMinor == bMinor ? 0 : 1);}  }
class C{  public boolean enablesContinuousCopies(){  return continuousCopies != null && continuousCopies.getMaxMirrors() != null && continuousCopies.getMaxMirrors() != VirtualPoolProtectionMirrorParam.MAX_DISABLED;}  }
class C{  public static BigdataSailRepository open(final Map<String,String> overrides){  final Properties props=getProperties(tmpJournal());  overrides.entrySet().forEach(null);  return open(props);}  }
class C{  private XYDataset createDataset2(){  XYSeries series2=new XYSeries("Series 3");  series2.add(10.0,16853.2);  series2.add(20.0,19642.3);  series2.add(30.0,18253.5);  series2.add(40.0,15352.3);  series2.add(50.0,13532.0);  series2.add(100.0,12635.3);  series2.add(110.0,13998.2);  series2.add(120.0,11943.2);  series2.add(130.0,16943.9);  series2.add(140.0,17843.2);  series2.add(150.0,16495.3);  series2.add(160.0,17943.6);  series2.add(170.0,18500.7);  series2.add(180.0,19595.9);  return new XYSeriesCollection(series2);}  }
class C{  synchronized public void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  DCCppMessage msg=DCCppMessage.makeWriteOpsModeCVMsg(mAddress,CV,val);  tc.sendDCCppMessage(msg,this);  progListener=p;  value=val;  progState=DCCppProgrammer.REQUESTSENT;  restartTimer(msg.getTimeout());}  }
class C{  protected static double value(Object element){  return ((Number)element).doubleValue();}  }
class C{  public DateTime withZone(DateTimeZone newZone){  return withChronology(getChronology().withZone(newZone));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void preselectShipping(Shipping selectedShippingType){  if (selectedShippingType != null) {    selectedId=selectedShippingType.getId();  }}  }
class C{  @Deprecated public TimeOfDay toTimeOfDay(){  return new TimeOfDay(getMillis(),getChronology());}  }
class C{  public ProcessImage removeProcessImage(int unitId){  return processImages.remove(unitId);}  }
class C{  public Object methodException(Class claz,String method,Exception e) throws Exception {  if (meeh == null) {    throw e;  }  return meeh.methodException(claz,method,e);}  }
class C{  public void putAll(Map t){  throw new java.lang.UnsupportedOperationException("Method putAll() not implemented.");}  }
class C{  protected void discoverConnectedHostInitiators(HostSystem hostSystem,Host targetHost,List<Initiator> oldInitiators,List<Initiator> addedInitiators){  List<IpInterface> oldIpInterfaces=new ArrayList<IpInterface>();  Iterables.addAll(oldIpInterfaces,getIpInterfaces(targetHost));  for (  HostVirtualNic nic : getNics(hostSystem)) {    if (isIp6Interface(nic)) {      IpInterface ipInterface=getOrCreateIpInterface(oldIpInterfaces,nic.spec.getIp().ipAddress);      discoverIp6Interface(targetHost,ipInterface,nic);    }    if (isIp4Interface(nic)) {      IpInterface ipInterface=getOrCreateIpInterface(oldIpInterfaces,nic.spec.getIp().ipAddress);      discoverIp4Interface(targetHost,ipInterface,nic);    }  }  removeDiscoveredInterfaces(oldIpInterfaces);  Iterables.addAll(oldInitiators,getInitiators(targetHost));  for (  HostHostBusAdapter hba : getHostBusAdapters(hostSystem)) {    if (hba instanceof HostFibreChannelHba) {      String port=SanUtils.normalizeWWN(((HostFibreChannelHba)hba).getPortWorldWideName());      Initiator initiator;      if (findInitiatorByPort(oldInitiators,port) == null) {        initiator=getOrCreateInitiator(targetHost.getId(),oldInitiators,port);        addedInitiators.add(initiator);      } else {        initiator=getOrCreateInitiator(targetHost.getId(),oldInitiators,port);      }      discoverInitiator(targetHost,initiator,(HostFibreChannelHba)hba);    } else     if (hba instanceof HostInternetScsiHba) {      String iqn=((HostInternetScsiHba)hba).getIScsiName();      Initiator initiator;      if (findInitiatorByPort(oldInitiators,iqn) == null) {        initiator=getOrCreateInitiator(targetHost.getId(),oldInitiators,iqn);        addedInitiators.add(initiator);      } else {        initiator=getOrCreateInitiator(targetHost.getId(),oldInitiators,iqn);      }      discoverInitiator(targetHost,initiator,(HostInternetScsiHba)hba);    }  }  if (!oldInitiators.isEmpty()) {    clearScaleIOInitiators(oldInitiators);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null) {    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  }  return fields;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){  int count=0;  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;  if (count == 0)   return recordedAnnotations;  int index=recordedAnnotations.length;  AnnotationBinding[] result=new AnnotationBinding[index + count];  System.arraycopy(recordedAnnotations,0,result,0,index);  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);  return result;}  }
class C{  protected long outputOffset(){  return _bytesWritten + _outputTail;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initializeViews();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object rv=MMC.getInstance().getPreferredCaptureDevice();  return (rv == null) ? null : rv.toString();}  }
class C{  public void apply(){  baseMessage.getBotInstance().editMessageReplyMarkup(baseMessage,toKeyboard());}  }
class C{  public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  push((Instance)instance.copy());  return true;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private HashtableEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashtableEntry<K,V>[] newTable=(HashtableEntry<K,V>[])new HashtableEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Deprecated protected ActionListener createKeyboardDownRightListener(){  return new KeyboardDownRightHandler();}  }
class C{  @Factory public static Matcher<Object> anything(){  return new IsAnything<Object>();}  }
class C{  private String[] createVertices(int count){  String[] v=new String[count];  for (int i=0; i < count; i++) {    v[i]="V" + i;    graph.addVertex(v[i]);  }  return v;}  }
class C{  public SumProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public boolean hasChildrenCollection(final Long id,User user){  String userString="";  if (!cfgManager.isDataPublic() && (user != null) && !user.getRoles().contains(Role.DATA_MANAGER)) {    userString="(" + user.getId() + " in elements(sub.authorizedUsers) or "+ userDao.getPublicData().getId()+ " in elements(sub.authorizedUsers)) and ";  }  final String userRestriction=userString;  StringBuilder hql=new StringBuilder();  hql.append("SELECT count(*) ");  hql.append("FROM ").append(entityClass.getName()).append(" c ");  hql.append("LEFT OUTER JOIN ").append("c.subCollections sub ");  hql.append("WHERE ").append(userRestriction);  hql.append("c.id = ? ").append("AND NOT sub.name ");  hql.append("LIKE '").append(HIDDEN_PREFIX).append("%' ");  List<?> resultList=getHibernateTemplate().find(hql.toString(),id);  Long value=(Long)resultList.get(0);  return value.intValue() > 0;}  }
class C{  public void removeInterface(SootClass interfaceClass){  checkLevel(HIERARCHY);  if (!implementsInterface(interfaceClass.getName()))   throw new RuntimeException("no such interface: " + interfaceClass.getName());  interfaces.remove(interfaceClass);}  }
class C{  protected void sequence_AsyncNoTrailingLineBreak_FunctionBody_FunctionDeclaration_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <E extends Comparable<E>>void reverseList(DoubleLinkedList<E> list){  DoubleLinkedNode<E> curr=list.getNode(0);  DoubleLinkedNode<E> temp=curr;  while (curr != null) {    temp=curr.prev;    curr.prev=curr.next;    curr.next=temp;    curr=curr.prev;  }  if (temp != null) {    list.head=temp.prev;  }}  }
class C{  public VersionTimestamp(){}  }
class C{  public void mask(PImage alpha){  g.mask(alpha);}  }
class C{  public EventStoreBuilder unlimitedOperationRetries(){  settingsBuilder.maxOperationRetries(-1);  return this;}  }
class C{  protected Object invokeReadFromXML(Element node) throws Exception {  Method method;  Class<?>[] methodClasses;  Object[] methodArgs;  boolean array;  boolean useDefault;  useDefault=false;  method=null;  m_CurrentNode=node;  try {    if (stringToBoolean(node.getAttribute(ATT_NULL))) {      useDefault=true;    }    if (!useDefault) {      array=stringToBoolean(node.getAttribute(ATT_ARRAY));      if (m_CustomMethods.read().contains(node.getAttribute(ATT_NAME))) {        method=m_CustomMethods.read().get(node.getAttribute(ATT_NAME));      } else       if ((!array) && (m_CustomMethods.read().contains(determineClass(node.getAttribute(ATT_CLASS))))) {        method=m_CustomMethods.read().get(determineClass(node.getAttribute(ATT_CLASS)));      } else {        method=null;      }      useDefault=(method == null);    }    if (!useDefault) {      methodClasses=new Class[1];      methodClasses[0]=Element.class;      methodArgs=new Object[1];      methodArgs[0]=node;      return method.invoke(this,methodArgs);    } else {      return readFromXML(node);    }  } catch (  Exception e) {    if (DEBUG) {      e.printStackTrace();    }    if (m_CurrentNode != null) {      System.out.println("Happened near: " + getPath(m_CurrentNode));      m_CurrentNode=null;    }    System.out.println("PROBLEM (read): " + node.getAttribute("name"));    throw (Exception)e.fillInStackTrace();  }}  }
class C{  WebAppInterface(Context c){  mContext=c;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  WalletData perWalletModelData=super.bitcoinController.getModel().getActivePerWalletModelData();  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  if (walletInfo == null) {    walletInfo=new WalletInfoData(perWalletModelData.getWalletFilename(),perWalletModelData.getWallet(),MultiBitWalletVersion.PROTOBUF_ENCRYPTED);    perWalletModelData.setWalletInfo(walletInfo);  }  if (walletInfo.getSendingAddresses().isEmpty()) {    String address=super.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_ADDRESS);    String label=super.bitcoinController.getModel().getActiveWalletPreference(BitcoinModel.SEND_LABEL);    perWalletModelData.getWalletInfo().addSendingAddress(new WalletAddressBookData(label,address));    sendBitcoinPanel.getAddressesTableModel().fireTableDataChanged();    super.bitcoinController.getModel().getActivePerWalletModelData().setDirty(true);  } else {    perWalletModelData.getWalletInfo().addSendingAddress(new WalletAddressBookData("",""));    sendBitcoinPanel.getAddressesTableModel().fireTableDataChanged();    sendBitcoinPanel.selectRows();    super.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_ADDRESS,"");    super.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_LABEL,"");  }  sendBitcoinPanel.checkDeleteSendingEnabled();  controller.displayView(controller.getCurrentView());  if (sendBitcoinPanel.getLabelTextArea() != null) {    sendBitcoinPanel.getLabelTextArea().requestFocusInWindow();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PACKAGE__MEMBER:    return getMember();case TypesPackage.PACKAGE__DOMAIN:  return getDomain();case TypesPackage.PACKAGE__IMPORT:return getImport();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque())   CompierePanelUI.updateIt(g,c);  paint(g,c);}  }
class C{  public VNXeCommandResult createLunGroup(String name){  LunGroupCreateParam param=new LunGroupCreateParam();  param.setName(name);  LunGroupRequests req=new LunGroupRequests(_khClient);  return req.createLunGroup(param);}  }
class C{  private void startPlayback(boolean forceStart){  if (forceStart || playlistManager.getCurrentPosition() != selectedPosition) {    playlistManager.play(0,false);  }}  }
class C{  public Map<String,Object> readKeyValues(Deserializer deserializer){  Map<String,Object> result=new HashMap<String,Object>();  readKeyValues(result,deserializer);  return result;}  }
class C{  public void waitForAsyncHDSJob(HDSJob job) throws HDSException {  JobContext jobContext=new JobContext(dbClient,null,null,hdsApiFactory,null,null,null);  long startTime=System.currentTimeMillis();  while (true) {    JobPollResult result=job.poll(jobContext,trackingPeriodInMillis);    if (!job.isJobInTerminalState()) {      if (System.currentTimeMillis() - startTime > HDSJob.ERROR_TRACKING_LIMIT) {        log.error("Timed out waiting on hds job to complete after {} milliseconds",System.currentTimeMillis() - startTime);        throw HDSException.exceptions.asyncTaskFailedTimeout(HDSJob.ERROR_TRACKING_LIMIT);      } else {        try {          Thread.sleep(trackingPeriodInMillis);        } catch (        InterruptedException e) {          log.error("Thread waiting for hds job to complete was interrupted and " + "will be resumed");        }      }    } else {      if (job.isJobInTerminalFailedState()) {        throw HDSException.exceptions.asyncTaskFailed(result.getErrorDescription());      }      break;    }  }}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  Nonterminal v : g.getNonterminals()) {    AutomataUtil.RE cur=getRE(v);    if (cur != null) {      s.append(v).append(" -> ").append(cur.toString()).append("\n");    } else {      for (      Production p : v.getProductions()) {        s.append(v).append(" -> ").append(p);        s.append(p.getClass().getSimpleName()).append("\n");      }    }  }  return s.toString();}  }
class C{  public double[][] computeLocal(int states[][],int j,int[] otherSourcesToDestOffsets){  initialise();  int[] cleanedOthersOffsets=cleanOffsetOthers(otherSourcesToDestOffsets,j,k > 0);  addObservations(states,j,cleanedOthersOffsets,true);  return computeLocalFromPreviousObservations(states,j,cleanedOthersOffsets,true);}  }
class C{  public MonitoredFuturePool(FuturePool futurePool,StatsLogger statsLogger,boolean traceTaskExecution,long traceTaskExecutionWarnTimeUs){  this.futurePool=futurePool;  this.traceTaskExecution=traceTaskExecution;  this.traceTaskExecutionWarnTimeUs=traceTaskExecutionWarnTimeUs;  this.statsLogger=statsLogger;  this.taskPendingTime=statsLogger.getOpStatsLogger("task_pending_time");  this.taskExecutionTime=statsLogger.getOpStatsLogger("task_execution_time");  this.taskEnqueueTime=statsLogger.getOpStatsLogger("task_enqueue_time");  this.taskPendingCounter=statsLogger.getCounter("tasks_pending");}  }
class C{  public static boolean isJavaClassNameInternalForm(char[] val,int first,int last){  if (val[first++] != ClassTypeCode) {    return false;  }  if (val[last--] != ';') {    return false;  }  boolean identStart=true;  for (int i=first; i <= last; ++i) {    char c=val[i];    if (identStart) {      if (!isVMIdentifierStart(c)) {        return false;      }      identStart=false;      continue;    }    if (c == '/') {      identStart=true;      continue;    }    if (!isVMIdentifierPart(c)) {      return false;    }  }  return !identStart;}  }
class C{  public int allocateRankForNewItem(ShortcutInfo info){  int rank=getItemCount();  ArrayList<View> views=new ArrayList<View>(mFolder.getItemsInReadingOrder());  views.add(rank,null);  arrangeChildren(views,views.size(),false);  setCurrentPage(rank / mMaxItemsPerPage);  return rank;}  }
class C{  public Double wordAlternativesThreshold(){  return wordAlternativesThreshold;}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("HttpRoute[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (    HttpHost aProxyChain : this.proxyChain) {      cab.append(aProxyChain);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  private boolean decRef(String fileName){  assert locked();  RefCount rc=getRefCount(fileName);  if (infoStream.isEnabled("IFD")) {    if (VERBOSE_REF_COUNTS) {      infoStream.message("IFD","  DecRef \"" + fileName + "\": pre-decr count is "+ rc.count);    }  }  if (rc.DecRef() == 0) {    refCounts.remove(fileName);    return true;  } else {    return false;  }}  }
class C{  public static String showDialog(final Frame frame,final String title,final Object message,final String... buttons){  return showDialog(frame,title,message,JOptionPane.PLAIN_MESSAGE,buttons);}  }
class C{  public boolean hasDuration(){  return hasExtension(Duration.class);}  }
class C{  protected EntityCollection drawTitle(Title t,Graphics2D g2,Rectangle2D area,boolean entities){  ParamChecks.nullNotPermitted(t,"t");  ParamChecks.nullNotPermitted(area,"area");  Rectangle2D titleArea;  RectangleEdge position=t.getPosition();  double ww=area.getWidth();  if (ww <= 0.0) {    return null;  }  double hh=area.getHeight();  if (hh <= 0.0) {    return null;  }  RectangleConstraint constraint=new RectangleConstraint(ww,new Range(0.0,ww),LengthConstraintType.RANGE,hh,new Range(0.0,hh),LengthConstraintType.RANGE);  Object retValue=null;  BlockParams p=new BlockParams();  p.setGenerateEntities(entities);  if (position == RectangleEdge.TOP) {    Size2D size=t.arrange(g2,constraint);    titleArea=createAlignedRectangle2D(size,area,t.getHorizontalAlignment(),VerticalAlignment.TOP);    retValue=t.draw(g2,titleArea,p);    area.setRect(area.getX(),Math.min(area.getY() + size.height,area.getMaxY()),area.getWidth(),Math.max(area.getHeight() - size.height,0));  } else   if (position == RectangleEdge.BOTTOM) {    Size2D size=t.arrange(g2,constraint);    titleArea=createAlignedRectangle2D(size,area,t.getHorizontalAlignment(),VerticalAlignment.BOTTOM);    retValue=t.draw(g2,titleArea,p);    area.setRect(area.getX(),area.getY(),area.getWidth(),area.getHeight() - size.height);  } else   if (position == RectangleEdge.RIGHT) {    Size2D size=t.arrange(g2,constraint);    titleArea=createAlignedRectangle2D(size,area,HorizontalAlignment.RIGHT,t.getVerticalAlignment());    retValue=t.draw(g2,titleArea,p);    area.setRect(area.getX(),area.getY(),area.getWidth() - size.width,area.getHeight());  } else   if (position == RectangleEdge.LEFT) {    Size2D size=t.arrange(g2,constraint);    titleArea=createAlignedRectangle2D(size,area,HorizontalAlignment.LEFT,t.getVerticalAlignment());    retValue=t.draw(g2,titleArea,p);    area.setRect(area.getX() + size.width,area.getY(),area.getWidth() - size.width,area.getHeight());  } else {    throw new RuntimeException("Unrecognised title position.");  }  EntityCollection result=null;  if (retValue instanceof EntityBlockResult) {    EntityBlockResult ebr=(EntityBlockResult)retValue;    result=ebr.getEntityCollection();  }  return result;}  }
class C{  public void test_store_java_io_OutputStream_char() throws Exception {  KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyStore.store(new ByteArrayOutputStream(),"pwd".toCharArray());  } catch (  KeyStoreException expected) {  }  keyStore.load(null,"pwd".toCharArray());  try {    keyStore.store(null,"pwd".toCharArray());    fail();  } catch (  NullPointerException expected) {  }catch (  IOException expected) {  }}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public String toString(){  return name;}  }
class C{  static int applyMaskPenaltyRule3(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      if (x + 6 < width && array[y][x] == 1 && array[y][x + 1] == 0 && array[y][x + 2] == 1 && array[y][x + 3] == 1 && array[y][x + 4] == 1 && array[y][x + 5] == 0 && array[y][x + 6] == 1 && ((x + 10 < width && array[y][x + 7] == 0 && array[y][x + 8] == 0 && array[y][x + 9] == 0 && array[y][x + 10] == 0) || (x - 4 >= 0 && array[y][x - 1] == 0 && array[y][x - 2] == 0 && array[y][x - 3] == 0 && array[y][x - 4] == 0))) {        penalty+=N3;      }      if (y + 6 < height && array[y][x] == 1 && array[y + 1][x] == 0 && array[y + 2][x] == 1 && array[y + 3][x] == 1 && array[y + 4][x] == 1 && array[y + 5][x] == 0 && array[y + 6][x] == 1 && ((y + 10 < height && array[y + 7][x] == 0 && array[y + 8][x] == 0 && array[y + 9][x] == 0 && array[y + 10][x] == 0) || (y - 4 >= 0 && array[y - 1][x] == 0 && array[y - 2][x] == 0 && array[y - 3][x] == 0 && array[y - 4][x] == 0))) {        penalty+=N3;      }    }  }  return penalty;}  }
class C{  @Override public void addDetail(PlacemarkType kmlPlacemark,Object vertex){  StringBuilder builder=new StringBuilder();  builder.append("k = ");  builder.append(String.valueOf(kDistr.get((Vertex)vertex)));  kmlPlacemark.setDescription(builder.toString());}  }
class C{  protected CmapSubtable(short platformID,short platformSpecificID){  this.platformID=platformID;  this.platformSpecificID=platformSpecificID;}  }
class C{  protected HttpResponse doReceiveResponse(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  int statuscode=0;  while (response == null || statuscode < HttpStatus.SC_OK) {    response=conn.receiveResponseHeader();    if (canResponseHaveBody(request,response)) {      conn.receiveResponseEntity(response);    }    statuscode=response.getStatusLine().getStatusCode();  }  return response;}  }
class C{  public void addBreadth(Vertex vertex){  this.breadthSet.put(vertex,vertex);}  }
class C{  public CUmodule(){}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void test_ticket_1007_freshUri() throws Exception {  new TestHelper("ticket-1007-freshUri","ticket-1007-freshUri.rq","ticket-1007-custom.trig","ticket-1007-freshUri.srx",false).runTest();}  }
class C{  public boolean hasNotReachableNonTerminals(){  this.checkReachability();  Collection<SymbolInfo> c=this.symbolInfos.values();  for (  SymbolInfo i : c) {    if ((i.symbol instanceof NonTerminal) && !i.bReachable) {      return true;    }  }  return false;}  }
class C{  public String readString() throws IOException {  int firstByte=readByte();  int length=readInt(firstByte,PREFIX_8_BITS);  byte[] encoded=new byte[length];  bytesLeft-=length;  in.readFully(encoded);  return new String(encoded,"UTF-8");}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void createImage(){  int numberOfLines=1;  if (this.title != null && this.description != null) {    numberOfLines++;  }  final Label labelImage=new Label(this,SWT.NONE);  labelImage.setLayoutData(new GridData(GridData.FILL,GridData.BEGINNING,false,true,1,numberOfLines));  labelImage.setImage(this.image);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case VALUES:  return isSetValues();case ERROR:return isSetError();}throw new IllegalStateException();}  }
class C{  @SuppressWarnings("unused") public List<String> hostDatacenterChangeDetails(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter){  List<String> result=Lists.newArrayList();  Host host=_dbClient.queryObject(Host.class,hostId);  VcenterDataCenter datacenter=_dbClient.queryObject(VcenterDataCenter.class,datacenterId);  if (host != null && datacenter != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostDatacenterChangeDetails",host.getLabel(),datacenter.getLabel()));    result.addAll(hostClusterChangeDetails(hostId,clusterId,datacenterId,isVcenter));  }  return result;}  }
class C{  public void initialiseLongValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  longValues=new long[size];}  }
class C{  private Query rethrowUnlessLenient(RuntimeException e){  if (settings.lenient()) {    return null;  }  throw e;}  }
class C{  private void startAuthenticationActivity(){  Intent intent=new Intent(ServerDetails.this,LoginActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public MemoryCircuitBreaker(ByteSizeValue limit,double overheadConstant,MemoryCircuitBreaker oldBreaker,ESLogger logger){  this.memoryBytesLimit=limit.bytes();  this.overheadConstant=overheadConstant;  if (oldBreaker == null) {    this.used=new AtomicLong(0);    this.trippedCount=new AtomicLong(0);  } else {    this.used=oldBreaker.used;    this.trippedCount=oldBreaker.trippedCount;  }  this.logger=logger;  if (logger.isTraceEnabled()) {    logger.trace("Creating MemoryCircuitBreaker with a limit of {} bytes ({}) and a overhead constant of {}",this.memoryBytesLimit,limit,this.overheadConstant);  }}  }
class C{  public IterationObject(int id){  this.id=id;}  }
class C{  private LegendItem createTitleLegendItem(String titleString,PlotConfiguration plotConfiguration){  LegendItem titleItem=new LegendItem(titleString,"","","",false,new Rectangle(),false,Color.WHITE,false,Color.WHITE,new BasicStroke(),false,new Rectangle(),new BasicStroke(),Color.WHITE);  Font titleFont=titleItem.getLabelFont();  if (titleFont == null) {    titleFont=plotConfiguration.getLegendConfiguration().getLegendFont();  }  titleItem.setLabelFont(titleFont.deriveFont(Font.BOLD));  return titleItem;}  }
class C{  public synchronized void addImageListener(ImageListener cl){  m_imageListeners.add(cl);}  }
class C{  public boolean isMarkRemoteReceivedHeaderInvalidSeen(){  return fieldMarkRemoteReceivedHeaderInvalidSeen;}  }
class C{  private void interpretBsh(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final boolean isMsbSet=!(secondValue.second().and(BigInteger.valueOf((long)Math.pow(2,instruction.getSecondOperand().getSize().getBitSize() - 1))).equals(BigInteger.ZERO));    BigInteger result=BigInteger.ZERO;    if (secondValue.second().compareTo(BigInteger.ZERO) < 0) {      System.out.println("F" + firstValue.second());      System.out.println("S" + secondValue.second().negate());      result=firstValue.second().shiftRight(secondValue.second().negate().intValue());    } else     if (isMsbSet) {      result=firstValue.second().shiftRight(BigInteger.ZERO.subtract(secondValue.second()).and(BigInteger.valueOf(0xFF)).intValue());    } else {      result=firstValue.second().shiftLeft(secondValue.second().intValue());    }    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public Array(final double[] array,final Set<Address.Flags> flags){  super(1,array.length,null);  this.addr=new DirectArrayRowAddress(this.$,0,null,0,array.length - 1,flags,true,1,array.length);  System.arraycopy(array,0,$,0,this.size());}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomListForm roomListForm=(RoomListForm)form;  sessionContext.checkPermission(Right.Rooms);  roomListForm.load(request.getSession());  String deptCode=roomListForm.getDeptCodeX();  if (deptCode == null) {    deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);  }  if (deptCode == null) {    deptCode=request.getParameter("default");    if (deptCode != null)     sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,deptCode);  }  if (deptCode != null && !deptCode.isEmpty() && ("All".equals(deptCode) || deptCode.matches("Exam[0-9]*") || Department.findByDeptCode(deptCode,sessionContext.getUser().getCurrentAcademicSessionId()) != null)) {    roomListForm.setDeptCodeX(deptCode);    return mapping.findForward("roomList");  } else {    if (sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").size() == 1) {      roomListForm.setDeptCodeX(sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").get(0).getQualifierReference());      return mapping.findForward("roomList");    }    LookupTables.setupDepartments(request,sessionContext,true);    LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);    return mapping.findForward("showRoomSearch");  }}  }
class C{  public RandomSamplingAssistant(long n,long N,RandomEngine randomGenerator){  this.n=n;  this.sampler=new RandomSampler(n,N,0,randomGenerator);  this.buffer=new long[(int)Math.min(n,MAX_BUFFER_SIZE)];  if (n > 0)   this.buffer[0]=-1;  fetchNextBlock();}  }
class C{  static String truncateFileName(File directory,String name,String suffix){  int requiredLength=directory.getPath().length() + suffix.length() + 1;  if (name.length() + requiredLength > MAX_FAT32_PATH_LENGTH) {    int limit=MAX_FAT32_PATH_LENGTH - requiredLength;    return name.substring(0,limit);  } else {    return name;  }}  }
class C{  private CaseStruct findWildCardMatch(FacesContext ctx,String viewId,String fromAction,String outcome,String toFlowDocumentId,Map<String,Set<NavigationCase>> navMap){  CaseStruct result=null;  StringBuilder sb=new StringBuilder(32);  for (  String fromViewId : getWildCardMatchList(ctx)) {    if (!viewId.startsWith(fromViewId)) {      continue;    }    if (sb.length() != 0) {      sb.delete(0,sb.length());    }    String wcFromViewId=sb.append(fromViewId).append('*').toString();    Set<NavigationCase> ccaseSet=navMap.get(wcFromViewId);    if (ccaseSet == null) {      return null;    }    result=determineViewFromActionOutcome(ctx,ccaseSet,fromAction,outcome,toFlowDocumentId);    if (result != null) {      break;    }  }  if (null != result) {    FlowHandler flowHandler=ctx.getApplication().getFlowHandler();    if (null != flowHandler) {      result.currentFlow=flowHandler.getCurrentFlow(ctx);      result.newFlow=result.currentFlow;    }  }  return result;}  }
class C{  @Timed @ExceptionMetered @DELETE public Response evictClientFromGroup(@Auth AutomationClient automationClient,@PathParam("clientId") long clientId,@PathParam("groupId") long groupId){  try {    Map<String,String> extraInfo=new HashMap<>();    extraInfo.put("deprecated","true");    aclDAO.findAndEvictClient(clientId,groupId,auditLog,automationClient.getName(),extraInfo);  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void action_treeDeleteAll(){  log.info("");  ListModel model=centerList.getModel();  int size=model.getSize();  int index=-1;  for (index=0; index < size; index++) {    ListItem item=(ListItem)model.getElementAt(index);    action_treeDelete(item);  }}  }
class C{  private void checkCGForSnapshots(BlockConsistencyGroup consistencyGroup){  final URIQueryResultList cgSnapshotsResults=new URIQueryResultList();  _dbClient.queryByConstraint(getBlockSnapshotByConsistencyGroup(consistencyGroup.getId()),cgSnapshotsResults);  Iterator<BlockSnapshot> blockSnapshotIterator=_dbClient.queryIterativeObjects(BlockSnapshot.class,cgSnapshotsResults);  while (blockSnapshotIterator.hasNext()) {    BlockSnapshot next=blockSnapshotIterator.next();    if (!next.getTechnologyType().equalsIgnoreCase(TechnologyType.RP.name())) {      throw APIException.badRequests.cannotCreateVolumeAsConsistencyGroupHasSnapshots(consistencyGroup.getLabel(),consistencyGroup.getId());    }  }}  }
class C{  public static <T>void init(final Set<File> scriptFiles,final T pluginInterface,final IStandardDescriptionUpdater descriptionUpdater){  descriptionUpdater.reset();  descriptionUpdater.setMaximum(scriptFiles.size());  for (  final File file : scriptFiles) {    final String rawFilename=file.getName();    descriptionUpdater.next();    descriptionUpdater.setDescription(String.format("Loading script file '%s'",rawFilename));    executeScript(file,pluginInterface);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  ElemTemplateElement templElem=(ElemTemplateElement)xctxt.getNamespaceContext();  StylesheetRoot ss=templElem.getStylesheetRoot();  java.text.DecimalFormat formatter=null;  java.text.DecimalFormatSymbols dfs=null;  double num=getArg0().execute(xctxt).num();  String patternStr=getArg1().execute(xctxt).str();  if (patternStr.indexOf(0x00A4) > 0)   ss.error(XSLTErrorResources.ER_CURRENCY_SIGN_ILLEGAL);  try {    Expression arg2Expr=getArg2();    if (null != arg2Expr) {      String dfName=arg2Expr.execute(xctxt).str();      QName qname=new QName(dfName,xctxt.getNamespaceContext());      dfs=ss.getDecimalFormatComposed(qname);      if (null == dfs) {        warn(xctxt,XSLTErrorResources.WG_NO_DECIMALFORMAT_DECLARATION,new Object[]{dfName});      } else {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      }    }    if (null == formatter) {      dfs=ss.getDecimalFormatComposed(new QName(""));      if (dfs != null) {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      } else {        dfs=new java.text.DecimalFormatSymbols(java.util.Locale.US);        dfs.setInfinity(Constants.ATTRVAL_INFINITY);        dfs.setNaN(Constants.ATTRVAL_NAN);        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        if (null != patternStr)         formatter.applyLocalizedPattern(patternStr);      }    }    return new XString(formatter.format(num));  } catch (  Exception iae) {    templElem.error(XSLTErrorResources.ER_MALFORMED_FORMAT_STRING,new Object[]{patternStr});    return XString.EMPTYSTRING;  }}  }
class C{  public void registerActualCFG(ActualControlFlowGraph cfg){  String className=cfg.getClassName();  String methodName=cfg.getMethodName();  if (className == null || methodName == null)   throw new IllegalStateException("expect class and method name of CFGs to be set before entering the GraphPool");  if (!actualCFGs.containsKey(className)) {    actualCFGs.put(className,new HashMap<String,ActualControlFlowGraph>());  }  Map<String,ActualControlFlowGraph> methods=actualCFGs.get(className);  logger.debug("Added CFG for class " + className + " and method "+ methodName);  cfg.finalise();  methods.put(methodName,cfg);  if (Properties.WRITE_CFG)   cfg.toDot();  if (DependencyAnalysis.shouldInstrument(cfg.getClassName(),cfg.getMethodName())) {    createAndRegisterControlDependence(cfg);  }}  }
class C{  private boolean isCommonCauseRequired(String var1,String var2){  return requiredCommonCauses.contains(new KnowledgeEdge(var1,var2));}  }
class C{  public String namedPattern(){  return namedPattern;}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public static ImageIcon createIcon(BasicStroke stroke,int width,int height,boolean horizontalOrientation){  BufferedImage bigImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=(Graphics2D)bigImage.getGraphics();  g.setBackground(OMColor.clear);  g.setPaint(OMColor.clear);  g.fillRect(0,0,width,height);  g.setPaint(Color.black);  g.setStroke(stroke);  if (horizontalOrientation) {    g.drawLine(0,height / 2,width,height / 2);  } else {    g.drawLine(width / 2,0,width / 2,height);  }  return new ImageIcon(bigImage);}  }
class C{  public void updateGraphics(){  Set keys=beans.keySet();  Iterator iter=keys.iterator();  while (iter.hasNext()) {    Long id=(Long)iter.next();    SimpleBeanObject bean=(SimpleBeanObject)beans.get(id);    OMGraphic graphic=(OMGraphic)graphics.get(id);    if ((graphic instanceof CustomGraphic)) {      ((CustomGraphic)graphic).updateGraphic(bean);    } else     if (graphic instanceof OMRasterObject) {      ((OMRasterObject)graphic).setLat(bean.getLatitude());      ((OMRasterObject)graphic).setLon(bean.getLongitude());      ((OMRasterObject)graphic).setRotationAngle(Math.toRadians(bean.getBearingInDeg()));    }    graphic.setNeedToRegenerate(true);    if (projection != null)     graphic.generate(projection);  }  repaint();}  }
class C{  public void cancel(){  this.isCancelled=true;  if (this.thread != null) {    this.thread.interrupt();  }}  }
class C{  public void testReordering(){  final int GROUP_1_COUNT=10;  final String GROUP_1_QUERY="group1 ";  final String GROUP_1_LINE2="line2 ";  writeEntries(GROUP_1_COUNT,GROUP_1_QUERY,GROUP_1_LINE2);  checkOpenCursorCount(GROUP_1_COUNT);  writeDelay();  final int GROUP_2_COUNT=10;  final String GROUP_2_QUERY="group2 ";  final String GROUP_2_LINE2="line2 ";  writeEntries(GROUP_2_COUNT,GROUP_2_QUERY,GROUP_2_LINE2);  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);  writeDelay();  final int GROUP_3_COUNT=5;  final String GROUP_3_QUERY=GROUP_1_QUERY;  final String GROUP_3_LINE2="refreshed ";  writeEntries(GROUP_3_COUNT,GROUP_3_QUERY,GROUP_3_LINE2);  checkOpenCursorCount(GROUP_1_COUNT + GROUP_2_COUNT);  int newGroup1Count=GROUP_1_COUNT - GROUP_3_COUNT;  checkResultCounts(GROUP_1_QUERY,newGroup1Count,newGroup1Count,null,GROUP_1_LINE2);  checkResultCounts(GROUP_2_QUERY,GROUP_2_COUNT,GROUP_2_COUNT,null,null);  checkResultCounts(GROUP_3_QUERY,GROUP_3_COUNT,GROUP_3_COUNT,null,GROUP_3_LINE2);  Cursor c=getQueryCursor(null);  int colQuery=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_QUERY);  int colDisplay1=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_TEXT_1);  int colDisplay2=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);  c.moveToPosition(0);  assertTrue("group 3 did not properly reorder to head of list",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_3_QUERY,GROUP_3_LINE2));  c.move(GROUP_3_COUNT - 1);  assertTrue("group 3 did not properly reorder to head of list",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_3_QUERY,GROUP_3_LINE2));  c.move(1);  assertTrue("group 2 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_2_QUERY,GROUP_2_LINE2));  c.move(GROUP_2_COUNT - 1);  assertTrue("group 2 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_2_QUERY,GROUP_2_LINE2));  c.move(1);  assertTrue("group 1 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_1_QUERY,GROUP_1_LINE2));  c.move(newGroup1Count - 1);  assertTrue("group 1 not in expected position after reordering",checkRow(c,colQuery,colDisplay1,colDisplay2,GROUP_1_QUERY,GROUP_1_LINE2));  c.close();}  }
class C{  protected void writeRaw(CharSequence seq,CharBuf buffer){  if (seq != null) {    buffer.add(seq.toString());  }}  }
class C{  @Override public void configureSlider(int componentIndex,JSlider slider){  if (slider.getClientProperty("colorSliderModel") != null) {    ((DefaultColorSliderModel)slider.getClientProperty("colorSliderModel")).unconfigureSlider(slider);  }  if (!(slider.getUI() instanceof PaletteColorSliderUI)) {    slider.setUI((PaletteColorSliderUI)PaletteColorSliderUI.createUI(slider));  }  BoundedRangeModel brm=getBoundedRangeModel(componentIndex);  slider.setModel(brm);  slider.putClientProperty("colorSliderModel",this);  slider.putClientProperty("colorComponentIndex",componentIndex);  addColorSlider(slider);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  double noDataImage2=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  Object[] images;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  double image1TotalDeviation=0;  double image2TotalDeviation=0;  double totalProductDeviations=0;  double[][] correlationMatrix;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    correlationMatrix=new double[numImages][numImages];    for (a=0; a < numImages; a++) {      for (b=0; b < numImages; b++) {        correlationMatrix[a][b]=-99;      }    }    double[] data;    double[] data2;    updateProgress("Calculating image averages:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    updateProgress("Calculating the correlation matrix:",0);    i=0;    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      for (b=0; b <= i; b++) {        if (a == b) {          correlationMatrix[a][b]=1.0;        } else {          image1TotalDeviation=0;          image2TotalDeviation=0;          totalProductDeviations=0;          image2=new WhiteboxRaster(imageFiles[b],"r");          noDataImage2=image2.getNoDataValue();          for (row=0; row < rows; row++) {            data=image.getRowValues(row);            data2=image2.getRowValues(row);            for (col=0; col < cols; col++) {              if (data[col] != noData && data2[col] != noDataImage2) {                image1TotalDeviation+=(data[col] - imageAverages[a]) * (data[col] - imageAverages[a]);                image2TotalDeviation+=(data2[col] - imageAverages[b]) * (data2[col] - imageAverages[b]);                totalProductDeviations+=(data[col] - imageAverages[a]) * (data2[col] - imageAverages[b]);              }            }            if (cancelOp) {              cancelOperation();              return;            }          }          image2.close();          correlationMatrix[a][b]=totalProductDeviations / (Math.sqrt(image1TotalDeviation * image2TotalDeviation));        }      }      i++;      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating the correlation matrix:",(int)progress);    }    String retstr=null;    retstr="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numImages; a++) {      headers=headers + "Image" + (a + 1)+ "\t";    }    retstr+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\nImage" + (a + 1)+ "\t";      for (b=0; b < numImages; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            retstr=retstr + "  " + df.format(correlationMatrix[a][b])+ "\t";          } else {            retstr=retstr + df.format(correlationMatrix[a][b]) + "\t";          }        } else {          retstr=retstr + "\t";        }      }    }    retstr=retstr + "\n\n";    String shortFileName;    int j, k;    for (a=0; a < numImages; a++) {      j=imageFiles[a].toString().lastIndexOf(File.separator);      k=imageFiles[a].toString().lastIndexOf(".");      shortFileName=imageFiles[a].toString().substring(j + 1,k);      retstr=retstr + "Image" + (a + 1)+ " = "+ shortFileName+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.733 -0500",hash_original_method="CA294C4CBD805FDF86CE51E26A265568",hash_generated_method="FE05CBCA2255FD8334AEFE70F21493E4") public int enumerate(ThreadGroup[] groups){  return enumerate(groups,true);}  }
class C{  protected void commentLinesAfter(String content,int line){  int offset=m_RootElement.getElement(line).getEndOffset();  int endDelimiter=-1;  if (getMultiLineComment()) {    endDelimiter=indexOf(content,getMultiLineCommentEnd(),offset);  }  if (endDelimiter < 0) {    return;  }  int startDelimiter=lastIndexOf(content,getMultiLineCommentStart(),endDelimiter);  if (startDelimiter < 0 || startDelimiter <= offset) {    m_Self.setCharacterAttributes(offset,endDelimiter - offset + 1,DEFAULT_COMMENT,false);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  String baseFileHeader=null;  int row, col;  double x, y, z;  double east, west, north, south;  int i, j;  int progress=0;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double noData=-32768;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  baseFileHeader=args[3];  if (args[4].toLowerCase().contains("double")) {    dataType=WhiteboxRaster.DataType.DOUBLE;  } else   if (args[4].toLowerCase().contains("float")) {    dataType=WhiteboxRaster.DataType.FLOAT;  } else   if (args[4].toLowerCase().contains("int")) {    dataType=WhiteboxRaster.DataType.INTEGER;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    WhiteboxRaster baseImage=new WhiteboxRaster(baseFileHeader,"r");    double resolutionX=baseImage.getCellSizeX();    double resolutionY=baseImage.getCellSizeY();    noData=baseImage.getNoDataValue();    east=baseImage.getEast();    west=baseImage.getWest();    north=baseImage.getNorth();    south=baseImage.getSouth();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,noData);    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            row=(int)(Math.floor((y - south) / resolutionY));            col=(int)(Math.floor((x - west) / resolutionX));            output.setValue(row,col,z);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String constructDBName(String queueName,String shardName){  return String.format("%s_%s_%s",PINLATER_QUEUE_DB_PREFIX,shardName,queueName);}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public void findCoveredLineEdges(){  int startLoc=Location.NONE;  for (Iterator it=iterator(); it.hasNext(); ) {    DirectedEdge nextOut=(DirectedEdge)it.next();    DirectedEdge nextIn=nextOut.getSym();    if (!nextOut.isLineEdge()) {      if (nextOut.isInResult()) {        startLoc=Location.INTERIOR;        break;      }      if (nextIn.isInResult()) {        startLoc=Location.EXTERIOR;        break;      }    }  }  if (startLoc == Location.NONE)   return;  int currLoc=startLoc;  for (Iterator it=iterator(); it.hasNext(); ) {    DirectedEdge nextOut=(DirectedEdge)it.next();    DirectedEdge nextIn=nextOut.getSym();    if (nextOut.isLineEdge()) {      nextOut.getEdge().setCovered(currLoc == Location.INTERIOR);    } else {      if (nextOut.isInResult())       currLoc=Location.EXTERIOR;      if (nextIn.isInResult())       currLoc=Location.INTERIOR;    }  }}  }
class C{  boolean inHalfOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) < 0));}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  private void write(OutputNode node,Object source,Mode mode) throws Exception {  Collection list=(Collection)source;  for (  Object item : list) {    if (item != null) {      OutputNode child=node.getChild(parent);      if (!isOverridden(child,item)) {        child.setMode(mode);        root.write(child,item);      }    }  }}  }
class C{  public void testSetBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=191;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static void logStartSignalMessage(final Logger logger){  logger.logMessage(Level.INFO,"Consumer received START Signal");}  }
class C{  public RangeQueryBuilder gte(Object from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  public static boolean equalsWithThrowableInformation(ErThrowableInformation erTWI,ThrowableProxy twp) throws NoSuchFieldException, IllegalAccessException {  if (!ErThrowableTest.equalsWithThrowable(erTWI.getThrowable(),twp)) {    return false;  }  return true;}  }
class C{  @Override public final boolean isDoubleLinked(){  return b.getByte(0) == LINKED_LEAF;}  }
class C{  public void updateOriginalBox(){  int viewWidth=editableImage.getViewWidth();  int viewHeight=editableImage.getViewHeight();  int width=editableImage.getOriginalImage().getWidth();  int height=editableImage.getOriginalImage().getHeight();  float ratio=width / (float)height;  float viewRatio=viewWidth / (float)viewHeight;  float factor;  if (ratio > viewRatio) {    factor=viewWidth / (float)width;  } else {    factor=viewHeight / (float)height;  }  float coorX, coorY;  coorX=(viewWidth - width * factor) / 2f;  coorY=(viewHeight - height * factor) / 2f;  int originX1=(displayBox.getX1() - coorX) / factor <= width ? (int)((displayBox.getX1() - coorX) / factor) : width;  int originY1=(displayBox.getY1() - coorY) / factor <= height ? (int)((displayBox.getY1() - coorY) / factor) : height;  int originX2=(displayBox.getX2() - coorX) / factor <= width ? (int)((displayBox.getX2() - coorX) / factor) : width;  int originY2=(displayBox.getY2() - coorY) / factor <= height ? (int)((displayBox.getY2() - coorY) / factor) : height;  editableImage.getBox().setX1(originX1);  editableImage.getBox().setY1(originY1);  editableImage.getBox().setX2(originX2);  editableImage.getBox().setY2(originY2);}  }
class C{  public final boolean isSelectionRectangular(){  return rectSelect;}  }
class C{  public static boolean bernoulli(){  return bernoulli(0.5);}  }
class C{  public static <T1,T2>void forEachInBoth(List<T1> list1,List<T2> list2,Procedure2<? super T1,? super T2> procedure){  if (list1 != null && list2 != null) {    if (list1.size() == list2.size()) {      if (list1 instanceof RandomAccess && list2 instanceof RandomAccess) {        RandomAccessListIterate.forEachInBoth(list1,list2,procedure);      } else {        Iterator<T1> iterator1=list1.iterator();        Iterator<T2> iterator2=list2.iterator();        int size=list2.size();        for (int i=0; i < size; i++) {          procedure.value(iterator1.next(),iterator2.next());        }      }    } else {      throw new RuntimeException("Attempt to call forEachInBoth with two Lists of different sizes :" + list1.size() + ':'+ list2.size());    }  }}  }
class C{  public TFloatObjectHashMapDecorator(TFloatObjectHashMap<V> map){  super();  this._map=map;}  }
class C{  public synchronized void initialize() throws CouldntLoadDataException {  for (  final TypeInstance instance : backend.loadTypeInstances()) {    instancesByAddress.put(instance.getAddress(),instance);    instances.add(instance);  }  for (  final TypeInstanceReference reference : backend.loadTypeInstanceReferences()) {    referencesByInstance.put(reference.getTypeInstance(),reference);  }}  }
class C{  public void addKnownId(URI id){  if (_lastKnownUserIds == null) {    _lastKnownUserIds=new StringSet();  }  _lastKnownUserIds.add(id.toString());}  }
class C{  public final String rightSide(int index,Instances instances){  return "";}  }
class C{  public final boolean isSynchronized(){  return Modifier.isSynchronized(getModifiers());}  }
class C{  public DateTime toDateTimeToday(){  return toDateTimeToday(null);}  }
class C{  static int lastSchemaUpdate(Configuration conf){  return conf.getInt(SCHEMA_UPDATE_PROP,0);}  }
class C{  public FirstSets(Grammar grammar,NullableSet nullableSet){  Map<Symbol,EfficientTerminalSet> data=map();  EfficientTerminalSet emptySet=new EfficientTerminalSet(grammar.getTerminals());  for (  Terminal terminal : grammar.getTerminals()) {    data.put(terminal,emptySet);  }  for (  NonTerminal nonTerminal : grammar.getNonTerminals()) {    data.put(nonTerminal,emptySet);  }  for (  Terminal terminal : grammar.getTerminals()) {    data.put(terminal,data.get(terminal).plus(terminal));  }  data.put(Epsilon,emptySet.plus(Epsilon));  for (  NonTerminal nullableNonTerminal : nullableSet) {    data.put(nullableNonTerminal,data.get(nullableNonTerminal).plus(Epsilon));  }  boolean changed;  do {    changed=false;    for (    Production production : grammar.getProductions()) {      NonTerminal lhs=production.getLHS();      Symbol firstNotNullableSymbol=null;      for (      Symbol symbol : production.getRHS()) {        if (!(symbol == Epsilon || nullableSet.contains(symbol))) {          firstNotNullableSymbol=symbol;          break;        } else {          EfficientTerminalSet to=data.get(lhs);          EfficientTerminalSet from=data.get(symbol);          EfficientTerminalSet merged=to.plusAllExceptEpsilon(from);          data.put(lhs,merged);          changed|=(!merged.equals(to));        }      }      if (firstNotNullableSymbol != null) {        EfficientTerminalSet to=data.get(lhs);        EfficientTerminalSet from=data.get(firstNotNullableSymbol);        EfficientTerminalSet merged=to.plusAllExceptEpsilon(from);        data.put(lhs,merged);        changed|=(!merged.equals(to));      } else {        EfficientTerminalSet before=data.get(lhs);        EfficientTerminalSet after=before.plus(Epsilon);        data.put(lhs,after);        changed|=(!before.equals(after));      }    }  } while (changed);  this.data=data;}  }
class C{  public void search(String fullTextSearchString) throws IOException, ServiceException {  RecordQuery query=new RecordQuery(recordsFeedUrl);  query.setFullTextQuery(fullTextSearchString);  RecordFeed feed=service.query(query,RecordFeed.class);  out.println("Results for [" + fullTextSearchString + "]");  for (  RecordEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  public void endVisit(SimpleType node){}  }
class C{  private int parentHeight(){  Container parent=getParent();  if (parent != null) {    return parent.getHeight();  }  return getHeight();}  }
class C{  public static void escapeCssString(CharSequence s,Appendable out) throws IOException {  new Escaper(s,EMPTY_ESCAPES,CSS_STR_ESCAPES,CSS_ENCODER,out).escape();}  }
class C{  private int next(int index){  return (index + 2) & mask;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.505 -0500",hash_original_method="30351ACDB73035A90D0CFF564E4380CE",hash_generated_method="48DADB4CE0ACD3C0C678FBD72552DA66") public void connect(Context srcContext,Handler srcHandler,Handler dstHandler){  connect(srcContext,srcHandler,new Messenger(dstHandler));}  }
class C{  static void handleVItoScreenOp(SurfaceData src,SurfaceData dst){  if (src instanceof D3DSurfaceData && dst instanceof GDIWindowSurfaceData) {    D3DSurfaceData d3dsd=(D3DSurfaceData)src;    SurfaceManager mgr=SurfaceManager.getManager((Image)d3dsd.getDestination());    if (mgr instanceof D3DVolatileSurfaceManager) {      D3DVolatileSurfaceManager vsm=(D3DVolatileSurfaceManager)mgr;      if (vsm != null) {        d3dsd.setSurfaceLost(true);        GDIWindowSurfaceData wsd=(GDIWindowSurfaceData)dst;        WComponentPeer p=wsd.getPeer();        if (D3DScreenUpdateManager.canUseD3DOnScreen(p,(Win32GraphicsConfig)p.getGraphicsConfiguration(),p.getBackBuffersNum())) {          vsm.setRestoreCountdown(10);        } else {          vsm.setAccelerationEnabled(false);        }      }    }  }}  }
class C{  public int clusterNodeFilterApply(long memPtr){  enter();  try {    return PlatformCallbackUtils.clusterNodeFilterApply(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public void clear(){  myMap.clear();  myKeysToRemove.clear();}  }
class C{  public boolean canUndo(){  return m_nCurrentEditAction >= 0;}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=nodeAddrBox.getSelectedIndex();  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 0) || (addr > 255)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.CHECK__CONDITION:    return condition != null;case SexecPackage.CHECK__REFS:  return refs != null && !refs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static ObjectModel loadDdfFile(InputStream input,String streamName){  DDFFileParser ddfFileParser=new DDFFileParser();  return ddfFileParser.parse(input,streamName);}  }
class C{  public static boolean isAmqpUri(final URI uri){  return uri != null && AMPQP_SCHEME.equals(uri.getScheme());}  }
class C{  private String quoteGlueStrings(){  final String[] packageStrs=overriddenParameters.getGlue().split(",");  final StringBuilder sb=new StringBuilder();  for (int i=0; i < packageStrs.length; i++) {    final String packageStr=packageStrs[i];    sb.append(String.format("\"%s\"",packageStr.trim()));    if (i < packageStrs.length - 1) {      sb.append(", ");    }  }  return sb.toString();}  }
class C{  private void $$$setupUI$$$(){  myComponent=new JPanel();  myComponent.setLayout(new BorderLayout(0,10));  myComponent.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(4,4,4,4),null));  final JPanel panel1=new JPanel();  panel1.setLayout(new BorderLayout(0,10));  myComponent.add(panel1,BorderLayout.NORTH);  myCentralPanel=new JPanel();  myCentralPanel.setLayout(new BorderLayout(0,0));  panel1.add(myCentralPanel,BorderLayout.SOUTH);  myBenchmarkButton=new JButton();  myBenchmarkButton.setText("Benchmark");  myBenchmarkButton.setMnemonic('B');  myBenchmarkButton.setDisplayedMnemonicIndex(0);  myBenchmarkButton.setToolTipText("Start benchmarking process");  myCentralPanel.add(myBenchmarkButton,BorderLayout.WEST);  final JPanel panel2=new JPanel();  panel2.setLayout(new GridBagLayout());  panel1.add(panel2,BorderLayout.CENTER);  final JLabel label1=new JLabel();  label1.setText("Chars:");  label1.setDisplayedMnemonic('C');  label1.setDisplayedMnemonicIndex(0);  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=1;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,5);  panel2.add(label1,gbc);  myCount=new JSpinner();  myCount.setToolTipText("Total number of chars to type");  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=1;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,5,22);  panel2.add(myCount,gbc);  final JLabel label2=new JLabel();  label2.setText("Delay, ms:");  label2.setDisplayedMnemonic('D');  label2.setDisplayedMnemonicIndex(0);  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=1;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,5);  panel2.add(label2,gbc);  myDelay=new JSpinner();  myDelay.setToolTipText("Delay between key presses");  gbc=new GridBagConstraints();  gbc.gridx=3;  gbc.gridy=1;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,5,0);  panel2.add(myDelay,gbc);  final JLabel label3=new JLabel();  label3.setText("Period:");  label3.setDisplayedMnemonic('P');  label3.setDisplayedMnemonicIndex(0);  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=3;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,0,5);  panel2.add(label3,gbc);  myPausePeriod=new JSpinner();  myPausePeriod.setToolTipText("Number of chars in each batch");  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=3;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,0,22);  panel2.add(myPausePeriod,gbc);  final JLabel label4=new JLabel();  label4.setText("Length, ms:");  label4.setDisplayedMnemonic('L');  label4.setDisplayedMnemonicIndex(0);  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=3;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,0,5);  panel2.add(label4,gbc);  myPauseLength=new JSpinner();  myPauseLength.setToolTipText("Delay between batches");  gbc=new GridBagConstraints();  gbc.gridx=3;  gbc.gridy=3;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  panel2.add(myPauseLength,gbc);  myPausesEnabled=new JCheckBox();  myPausesEnabled.setText("Intermediate  pauses");  myPausesEnabled.setMnemonic('S');  myPausesEnabled.setDisplayedMnemonicIndex(17);  myPausesEnabled.setToolTipText("Periodical pauses between batches");  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=2;  gbc.gridwidth=4;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,0);  panel2.add(myPausesEnabled,gbc);  final JLabel label5=new JLabel();  label5.setText("Title:");  label5.setDisplayedMnemonic('T');  label5.setDisplayedMnemonicIndex(0);  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,5);  panel2.add(label5,gbc);  myTitle=new JTextField();  myTitle.setColumns(10);  myTitle.setToolTipText("Title of measurement");  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=0;  gbc.gridwidth=3;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(0,0,5,0);  panel2.add(myTitle,gbc);  myResetButton=new JButton();  myResetButton.setText("Reset");  myResetButton.setMnemonic('R');  myResetButton.setDisplayedMnemonicIndex(0);  myResetButton.setToolTipText("Reset parameters to default values");  gbc=new GridBagConstraints();  gbc.gridx=5;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.NORTHEAST;  panel2.add(myResetButton,gbc);  final JSeparator separator1=new JSeparator();  separator1.setOrientation(1);  gbc=new GridBagConstraints();  gbc.gridx=4;  gbc.gridy=1;  gbc.gridheight=2;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  gbc.insets=new Insets(0,8,0,8);  panel2.add(separator1,gbc);  myAsync=new JCheckBox();  myAsync.setText("Async");  myAsync.setMnemonic('A');  myAsync.setDisplayedMnemonicIndex(0);  myAsync.setToolTipText("Don't wait for char to appear before pausing and typing a next one");  gbc=new GridBagConstraints();  gbc.gridx=5;  gbc.gridy=2;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,0);  panel2.add(myAsync,gbc);  myNative=new JCheckBox();  myNative.setText("Native API");  myNative.setMnemonic('N');  myNative.setDisplayedMnemonicIndex(0);  myNative.setToolTipText("Access screen via direct platform API calls (faster)");  gbc=new GridBagConstraints();  gbc.gridx=5;  gbc.gridy=1;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,0);  panel2.add(myNative,gbc);  final JSplitPane splitPane1=new JSplitPane();  splitPane1.setOrientation(0);  splitPane1.setResizeWeight(0.3);  myComponent.add(splitPane1,BorderLayout.CENTER);  final JPanel panel3=new JPanel();  panel3.setLayout(new BorderLayout(0,0));  splitPane1.setLeftComponent(panel3);  myToolBar=new JToolBar();  myToolBar.setFloatable(false);  panel3.add(myToolBar,BorderLayout.NORTH);  final JScrollPane scrollPane1=new JScrollPane();  panel3.add(scrollPane1,BorderLayout.CENTER);  myTable=new MutableTable();  scrollPane1.setViewportView(myTable);  final JPanel panel4=new JPanel();  panel4.setLayout(new BorderLayout(0,0));  splitPane1.setRightComponent(panel4);  myChartPanel=new ChartPanel();  panel4.add(myChartPanel,BorderLayout.CENTER);  final JPanel panel5=new JPanel();  panel5.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));  panel4.add(panel5,BorderLayout.NORTH);  final JLabel label6=new JLabel();  label6.setText("Chart:");  panel5.add(label6);  mySeriesButton=new JRadioButton();  mySeriesButton.setSelected(true);  mySeriesButton.setText("Series (ms / n)");  mySeriesButton.setMnemonic('E');  mySeriesButton.setDisplayedMnemonicIndex(1);  panel5.add(mySeriesButton);  myDistributionButton=new JRadioButton();  myDistributionButton.setSelected(false);  myDistributionButton.setText("Distribution (% / ms)");  myDistributionButton.setMnemonic('I');  myDistributionButton.setDisplayedMnemonicIndex(1);  panel5.add(myDistributionButton);  label1.setLabelFor(myCount);  label2.setLabelFor(myDelay);  label3.setLabelFor(myPausePeriod);  label4.setLabelFor(myPauseLength);  label5.setLabelFor(myTitle);}  }
class C{  public final Double3D negate(){  return new Double3D(-x,-y,-z);}  }
class C{  private String uniquify(String label){  return label.replaceAll("\\s+","");}  }
class C{  public TraceBeginRunCycleItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void requestAntivenom(){  mixer.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(mixer.getName()),new PlayerHasItemWithHimCondition("note to apothecary"),new QuestNotStartedCondition(QUEST_SLOT)),ConversationStates.QUEST_OFFERED,"Oh, a message from Klaas. Is that for me?",null);  mixer.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(mixer.getName()),new PlayerHasItemWithHimCondition("note to apothecary"),new QuestNotStartedCondition(QUEST_SLOT)),ConversationStates.QUEST_OFFERED,"Oh, a message from Klaas. Is that for me?",null);  mixer.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.YES_MESSAGES,null,ConversationStates.ATTENDING,null,new MultipleActions(new SetQuestAction(QUEST_SLOT,0,MIX_ITEMS),new IncreaseKarmaAction(5.0),new DropItemAction("note to apothecary"),new SayRequiredItemsFromCollectionAction(QUEST_SLOT,0,"Klaas has asked me to assist you. I can make a ring that will increase your resistance to poison. I need you to bring me [items].  Do you have any of those with you?")));  mixer.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.GOODBYE_MESSAGES,null,ConversationStates.QUEST_OFFERED,"That is not a \"yes\" or \"no\" question. I said, Is that note you are carrying for me?",null);  mixer.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.NO_MESSAGES,null,ConversationStates.IDLE,"Oh, well, carry on then.",new SetQuestAndModifyKarmaAction(QUEST_SLOT,"rejected",-5.0));  mixer.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new NotCondition(new PlayerHasItemWithHimCondition("note to apothecary")),new QuestNotStartedCondition(QUEST_SLOT)),ConversationStates.ATTENDING,"I'm sorry, but I'm much too busy right now. Perhaps you could talk to #Klaas.",null);  mixer.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new QuestStartedCondition(QUEST_SLOT),new QuestNotCompletedCondition(QUEST_SLOT)),ConversationStates.ATTENDING,null,new SayRequiredItemsFromCollectionAction(QUEST_SLOT,"I am still waiting for you to bring me [items]. Do you have any of those with you?"));  mixer.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new QuestCompletedCondition(QUEST_SLOT),ConversationStates.QUESTION_1,"Thank you so much. It had been so long since I was able to enjoy a fairy cake. Are you enjoying your ring?",null);  mixer.add(ConversationStates.QUESTION_1,ConversationPhrases.YES_MESSAGES,new QuestCompletedCondition(QUEST_SLOT),ConversationStates.ATTENDING,"Wonderful!",null);  mixer.add(ConversationStates.QUESTION_1,ConversationPhrases.NO_MESSAGES,new QuestCompletedCondition(QUEST_SLOT),ConversationStates.ATTENDING,"Oh, that's too bad.",null);  mixer.add(ConversationStates.QUESTION_1,Arrays.asList("cake","fairy cake"),null,ConversationStates.QUESTION_1,"Oh, they are the best treat I have ever tasted. Only the most heavenly creatures could make such angelic food.",null);  mixer.add(ConversationStates.QUESTION_1,Arrays.asList("ring","rings"),null,ConversationStates.QUESTION_1,"There are many types of rings.",null);  mixer.add(ConversationStates.QUESTION_1,Arrays.asList("medicinal ring","medicinal rings"),null,ConversationStates.QUESTION_1,"Some poisonous creatures carry them.",null);  mixer.add(ConversationStates.QUESTION_1,Arrays.asList("antivenom ring","antivenom rings"),null,ConversationStates.QUESTION_1,"If you bring me what I need I may be able to strengthen a #medicinal #ring.",null);  mixer.add(ConversationStates.QUESTION_1,Arrays.asList("antitoxin ring","antitoxin rings","gm antitoxin ring","gm antitoxin rings"),null,ConversationStates.QUESTION_1,"Heh! This is the ultimate protection against poisoning. Good luck getting one!",null);  mixer.add(ConversationStates.ATTENDING,Arrays.asList("cake","fairy cake"),null,ConversationStates.ATTENDING,"Oh, they are the best treat I have ever tasted. Only the most heavenly creatures could make such angelic food.",null);  mixer.add(ConversationStates.ATTENDING,Arrays.asList("ring","rings"),null,ConversationStates.ATTENDING,"There are many types of rings.",null);  mixer.add(ConversationStates.ATTENDING,Arrays.asList("medicinal ring","medicinal rings"),null,ConversationStates.ATTENDING,"Some poisonous creatures carry them.",null);  mixer.add(ConversationStates.ATTENDING,Arrays.asList("antivenom ring","antivenom rings"),null,ConversationStates.ATTENDING,"If you bring me what I need I may be able to strengthen a #medicinal #ring.",null);  mixer.add(ConversationStates.ATTENDING,Arrays.asList("antitoxin ring","antitoxin rings","gm antitoxin ring","gm antitoxin rings"),null,ConversationStates.ATTENDING,"Heh! This is the ultimate protection against poisoning. Good luck getting one!",null);}  }
class C{  public LongKeyMap(){  keys=new long[16];  values=new Object[16];  flags=new byte[16];  mask=keys.length - 1;  size=0;  clear();}  }
class C{  @Override public void storeState(){  partialBufferHelper.storeState();  diffusionProcessDelegate.storeState();  flip=true;  storedBranchNormalization=branchNormalization;}  }
class C{  public void close() throws IOException {  ensureCapacity(0,true);  IOException error=null;  try {    if (bufferedBlockCipher != null) {      int outLen=bufferedBlockCipher.doFinal(buf,0);      if (outLen != 0) {        out.write(buf,0,outLen);      }    } else     if (aeadBlockCipher != null) {      int outLen=aeadBlockCipher.doFinal(buf,0);      if (outLen != 0) {        out.write(buf,0,outLen);      }    }  } catch (  final InvalidCipherTextException e) {    error=new InvalidCipherTextIOException("Error finalising cipher data",e);  }catch (  Exception e) {    error=new CipherIOException("Error closing stream: ",e);  }  try {    flush();    out.close();  } catch (  IOException e) {    if (error == null) {      error=e;    }  }  if (error != null) {    throw error;  }}  }
class C{  @Override public final boolean sendValues(){  return false;}  }
class C{  void save(){  if (registerSave == null) {    registerSave=new byte[blockSize];  }  System.arraycopy(register,0,registerSave,0,blockSize);}  }
class C{  public static Map<String,Object> captureOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  String invoiceId=(String)context.get("invoiceId");  String billingAccountId=(String)context.get("billingAccountId");  BigDecimal amountToCapture=(BigDecimal)context.get("captureAmount");  Locale locale=(Locale)context.get("locale");  amountToCapture=amountToCapture.setScale(decimals,rounding);  GenericValue orderHeader=null;  List<GenericValue> paymentPrefs=null;  List<GenericValue> paymentPrefsBa=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    paymentPrefs=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"statusId","PAYMENT_AUTHORIZED").orderBy("-maxAmount").queryList();    if (UtilValidate.isNotEmpty(billingAccountId)) {      paymentPrefsBa=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderId",orderId,"paymentMethodTypeId","EXT_BILLACT","statusId","PAYMENT_NOT_RECEIVED").orderBy("-maxAmount").queryList();    }  } catch (  GenericEntityException gee) {    Debug.logError(gee,"Problems getting entity record(s), see stack trace",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale) + " " + gee.toString());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"OrderOrderNotFound",UtilMisc.toMap("orderId",orderId),locale));  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal orderGrandTotal=orh.getOrderGrandTotal();  orderGrandTotal=orderGrandTotal.setScale(decimals,rounding);  BigDecimal totalPayments=PaymentWorker.getPaymentsTotal(orh.getOrderPayments());  totalPayments=totalPayments.setScale(decimals,rounding);  BigDecimal remainingTotal=orderGrandTotal.subtract(totalPayments);  if (Debug.infoOn()) {    Debug.logInfo("The Remaining Total for order: " + orderId + " is: "+ remainingTotal,module);  }  amountToCapture=amountToCapture.min(remainingTotal);  if (Debug.infoOn()) {    Debug.logInfo("Actual Expected Capture Amount : " + amountToCapture,module);  }  if (UtilValidate.isNotEmpty(paymentPrefsBa)) {    Iterator<GenericValue> paymentsBa=paymentPrefsBa.iterator();    while (paymentsBa.hasNext()) {      GenericValue paymentPref=paymentsBa.next();      BigDecimal authAmount=paymentPref.getBigDecimal("maxAmount");      if (authAmount == null)       authAmount=ZERO;      authAmount=authAmount.setScale(decimals,rounding);      if (authAmount.compareTo(ZERO) == 0) {        Debug.logInfo("Nothing to capture; authAmount = 0",module);        continue;      }      BigDecimal amountThisCapture=amountToCapture.min(authAmount);      amountToCapture=amountToCapture.subtract(amountThisCapture);      if (UtilValidate.isNotEmpty(invoiceId)) {        Map<String,Object> captureResult=null;        try {          captureResult=dispatcher.runSync("captureBillingAccountPayments",UtilMisc.<String,Object>toMap("invoiceId",invoiceId,"billingAccountId",billingAccountId,"captureAmount",amountThisCapture,"orderId",orderId,"userLogin",userLogin));          if (ServiceUtil.isError(captureResult)) {            return captureResult;          }        } catch (        GenericServiceException ex) {          return ServiceUtil.returnError(ex.getMessage());        }        if (captureResult != null) {          BigDecimal amountCaptured=(BigDecimal)captureResult.get("captureAmount");          if (Debug.infoOn())           Debug.logInfo("Amount captured for order [" + orderId + "] from unapplied payments associated to billing account ["+ billingAccountId+ "] is: "+ amountCaptured,module);          amountCaptured=amountCaptured.setScale(decimals,rounding);          if (amountCaptured.compareTo(BigDecimal.ZERO) == 0) {            continue;          }          captureResult.put("invoiceId",invoiceId);          captureResult.put("captureResult",Boolean.TRUE);          captureResult.put("orderPaymentPreference",paymentPref);          if (context.get("captureRefNum") == null) {            captureResult.put("captureRefNum","");          }          try {            processResult(dctx,captureResult,userLogin,paymentPref,locale);          } catch (          GeneralException e) {            Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale) + " " + captureResult);          }          if (authAmount.compareTo(amountCaptured) > 0) {            BigDecimal splitAmount=authAmount.subtract(amountCaptured);            try {              Map<String,Object> splitCtx=UtilMisc.<String,Object>toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);              dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);            } catch (            GenericServiceException e) {              Debug.logWarning(e,"Problem processing the capture split payment",module);            }            if (Debug.infoOn())             Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);          }        } else {          Debug.logError("Payment not captured for order [" + orderId + "] from billing account ["+ billingAccountId+ "]",module);        }      }    }  }  if (UtilValidate.isNotEmpty(paymentPrefs)) {    Iterator<GenericValue> payments=paymentPrefs.iterator();    while (payments.hasNext()) {      GenericValue paymentPref=payments.next();      GenericValue authTrans=getAuthTransaction(paymentPref);      if (authTrans == null) {        Debug.logWarning("Authorized OrderPaymentPreference has no corresponding PaymentGatewayResponse, cannot capture payment: " + paymentPref,module);        continue;      }      GenericValue captureTrans=getCaptureTransaction(paymentPref);      if (captureTrans != null) {        Debug.logWarning("Attempt to capture and already captured preference: " + captureTrans,module);        continue;      }      BigDecimal authAmount=authTrans.getBigDecimal("amount");      if (authAmount == null)       authAmount=ZERO;      authAmount=authAmount.setScale(decimals,rounding);      if (authAmount.compareTo(ZERO) == 0) {        Debug.logInfo("Nothing to capture; authAmount = 0",module);        continue;      }      BigDecimal amountThisCapture;      if (isReplacementOrder(orderHeader)) {        amountThisCapture=authAmount;      } else       if (authAmount.compareTo(amountToCapture) >= 0) {        amountThisCapture=amountToCapture;      } else       if (payments.hasNext()) {        amountThisCapture=authAmount;      } else {        Debug.logError("The amount to capture was more then what was authorized; we only captured the authorized amount : " + paymentPref,module);        amountThisCapture=authAmount;      }      Map<String,Object> captureResult=capturePayment(dctx,userLogin,orh,paymentPref,amountThisCapture,locale);      if (captureResult != null && !ServiceUtil.isError(captureResult)) {        BigDecimal amountCaptured=(BigDecimal)captureResult.get("captureAmount");        if (amountCaptured == null) {          amountCaptured=(BigDecimal)captureResult.get("processAmount");        }        amountCaptured=amountCaptured.setScale(decimals,rounding);        amountToCapture=amountToCapture.subtract(amountCaptured);        if (!isReplacementOrder(orderHeader)) {          captureResult.put("invoiceId",invoiceId);        }        try {          processResult(dctx,captureResult,userLogin,paymentPref,locale);        } catch (        GeneralException e) {          Debug.logError(e,"Trouble processing the result; captureResult: " + captureResult,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale) + " " + captureResult);        }        if (authAmount.compareTo(amountCaptured) > 0) {          BigDecimal splitAmount=authAmount.subtract(amountCaptured);          try {            Map<String,Object> splitCtx=UtilMisc.<String,Object>toMap("userLogin",userLogin,"orderPaymentPreference",paymentPref,"splitAmount",splitAmount);            dispatcher.addCommitService("processCaptureSplitPayment",splitCtx,true);          } catch (          GenericServiceException e) {            Debug.logWarning(e,"Problem processing the capture split payment",module);          }          if (Debug.infoOn())           Debug.logInfo("Captured: " + amountThisCapture + " Remaining (re-auth): "+ splitAmount,module);        }      } else {        Debug.logError("Payment not captured",module);      }    }  }  if (amountToCapture.compareTo(ZERO) > 0) {    GenericValue productStore=orh.getProductStore();    if (!UtilValidate.isEmpty(productStore)) {      boolean shipIfCaptureFails=UtilValidate.isEmpty(productStore.get("shipIfCaptureFails")) || "Y".equalsIgnoreCase(productStore.getString("shipIfCaptureFails"));      if (!shipIfCaptureFails) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,"AccountingPaymentCannotBeCaptured",locale));      } else {        Debug.logWarning("Payment capture failed, shipping order anyway as per ProductStore setting (shipIfCaptureFails)",module);      }    }    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("processResult","FAILED");    return result;  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("processResult","COMPLETE");    return result;  }}  }
class C{  public boolean containsInstruction(InstructionHandle handle){  Iterator<InstructionHandle> i=instructionIterator();  while (i.hasNext()) {    if (i.next() == handle) {      return true;    }  }  return false;}  }
class C{  @SuppressLint("InlinedApi") public static Map<Integer,String> TECHNOLOGY_MAP(){  Map<Integer,String> result=new HashMap<>();  result.put(TelephonyManager.NETWORK_TYPE_UNKNOWN,"NA");  result.put(TelephonyManager.NETWORK_TYPE_GPRS,"GSM");  result.put(TelephonyManager.NETWORK_TYPE_EDGE,"EDGE");  result.put(TelephonyManager.NETWORK_TYPE_UMTS,"UMTS");  result.put(TelephonyManager.NETWORK_TYPE_CDMA,"CDMA");  result.put(TelephonyManager.NETWORK_TYPE_EVDO_0,"EDVO_0");  result.put(TelephonyManager.NETWORK_TYPE_EVDO_A,"EDVO_A");  result.put(TelephonyManager.NETWORK_TYPE_1xRTT,"1xRTT");  result.put(TelephonyManager.NETWORK_TYPE_HSDPA,"HSDPA");  result.put(TelephonyManager.NETWORK_TYPE_HSUPA,"HSUPA");  result.put(TelephonyManager.NETWORK_TYPE_HSPA,"HSPA");  result.put(TelephonyManager.NETWORK_TYPE_IDEN,"IDEN");  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    result.put(TelephonyManager.NETWORK_TYPE_EVDO_B,"EDV0_B");  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    result.put(TelephonyManager.NETWORK_TYPE_LTE,"LTE");    result.put(TelephonyManager.NETWORK_TYPE_EHRPD,"eHRPD");  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    result.put(TelephonyManager.NETWORK_TYPE_HSPAP,"HSPA+");  }  return Collections.unmodifiableMap(result);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  @Override public synchronized void println(String x){  print(x);  println();}  }
class C{  protected void addSimplePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_State_simple_feature"),getString("_UI_PropertyDescriptor_description","_UI_State_simple_feature","_UI_State_type"),SGraphPackage.Literals.STATE__SIMPLE,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void randomizeIncompleteRows(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    if (isIncomplete(nodeIndex,rowIndex)) {      randomizeRow(nodeIndex,rowIndex);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.436 -0500",hash_original_method="338C56936DDCFBFAA814E2FE50D9D4C2",hash_generated_method="433ED912B3842AB0A69427C288A66E02") static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  public final void movlong(AMD64Address dst,long src){  if (NumUtil.isInt(src)) {    AMD64MIOp.MOV.emit(this,OperandSize.QWORD,dst,(int)src);  } else {    AMD64Address high=new AMD64Address(dst.getBase(),dst.getIndex(),dst.getScale(),dst.getDisplacement() + 4);    movl(dst,(int)(src & 0xFFFFFFFF));    movl(high,(int)(src >> 32));  }}  }
class C{  public static int capBetween(int min,int number,int max){  assertTrue(min <= max);  return Math.min(max,Math.max(min,number));}  }
class C{  protected boolean shouldUsePost(String fullQueryUrl){  return fullQueryUrl.length() > maximumUrlLength;}  }
class C{  private void addOpenFunction(final Window parent,final List<ITraceEvent> traces){  if (traces.size() == 1) {    final ITraceEvent trace=traces.get(0);    final INaviModule module=trace.getOffset().getModule();    if (module.isLoaded()) {      final INaviFunction function=module.getContent().getFunctionContainer().getFunction(trace.getOffset().getAddress().getAddress());      if (function != null) {        final IViewContainer container=graphModel.getViewContainer();        final INaviView view=container.getView(function);        if (view != null) {          add(new JMenuItem(CActionProxy.proxy(new COpenInLastWindowAction(parent,container,new INaviView[]{view}))));          addSeparator();        }      }    }  }}  }
class C{  public TcpSettings build(){  if (connectTimeout == null) {    connectTimeout=Duration.ofSeconds(10);  }  if (closeTimeout == null) {    closeTimeout=Duration.ofMillis(500);  }  if (keepAlive == null) {    keepAlive=true;  }  if (tcpNoDelay == null) {    tcpNoDelay=true;  }  if (sendBufferSize == null) {    sendBufferSize=64 * 1024;  } else {    checkArgument(isPositive(sendBufferSize),"sendBufferSize should be positive");  }  if (receiveBufferSize == null) {    receiveBufferSize=64 * 1024;  } else {    checkArgument(isPositive(receiveBufferSize),"receiveBufferSize should be positive");  }  if (writeBufferHighWaterMark == null) {    writeBufferHighWaterMark=64 * 1024;  } else {    checkArgument(!isNegative(writeBufferHighWaterMark),"writeBufferHighWaterMark should not be negative");  }  if (writeBufferLowWaterMark == null) {    writeBufferLowWaterMark=32 * 1024;  } else {    checkArgument(!isNegative(writeBufferLowWaterMark),"writeBufferLowWaterMark should not be negative");  }  return new TcpSettings(this);}  }
class C{  protected boolean removeEldestEntry(Map.Entry<K,V> eldest){  return false;}  }
class C{  public Intent putExtra(String name,String value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putString(name,value);  return this;}  }
class C{  public List<NamedRelatedResourceRep> ingest(FileSystemIngest input){  NamedFileSystemList response=client.post(NamedFileSystemList.class,input,baseUrl + "/ingest");  return defaultList(response.getFilesystems());}  }
class C{  static void generatePlainReturnCode(String returnType,CodeVisitor cv){  if (returnType.equals("V"))   cv.visitInsn(RETURN); else   if (isPrimitive(returnType)) {    int opcode=IRETURN;    if (returnType.equals("D"))     opcode=DRETURN; else     if (returnType.equals("F"))     opcode=FRETURN; else     if (returnType.equals("J"))     opcode=LRETURN;    cv.visitInsn(opcode);  } else {    cv.visitTypeInsn(CHECKCAST,descriptorToClassName(returnType));    cv.visitInsn(ARETURN);  }}  }
class C{  boolean isPermanent(){  return permanent;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.117 -0500",hash_original_method="9451F44BD5942680EA0D419B40FE27E5",hash_generated_method="9BC6DB09097B8FF862117A789E30ABF0") public int compareTo(Short object){  return compare(value,object.value);}  }
class C{  protected boolean hasPrefix(){  return (m_Prefix != null);}  }
class C{  public static Object invokeWithVarArg(Object obj,int methodID,Address argAddress,TypeReference expectReturnType,boolean skip4Args) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  Object[] argObjectArray=packageParameterFromVarArg(mr,argAddress);  return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);}  }
class C{  @NonNull public static RegistrationResponse fromJson(@NonNull RegistrationRequest request,@NonNull String jsonStr) throws JSONException, MissingArgumentException {  checkNotEmpty(jsonStr,"jsonStr cannot be null or empty");  return fromJson(request,new JSONObject(jsonStr));}  }
class C{  @Override public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  private void loadNoxItem(final int position,NoxItem noxItem,boolean useCircularTransformation){  imageLoader.load(noxItem.getUrl()).load(noxItem.getResourceId()).withPlaceholder(noxItem.getPlaceholderId()).size(noxItemSize).useCircularTransformation(useCircularTransformation).notify(getImageLoaderListener(position));}  }
class C{  public static ActivityFacilitiesImpl createGridLayerByGridSizeByShapeFileV2(Geometry boundary,double gridSize){  log.info("Setting statring points for accessibility measure ...");  int skippedPoints=0;  int setPoints=0;  GeometryFactory factory=new GeometryFactory();  ActivityFacilitiesImpl measuringPoints=new ActivityFacilitiesImpl("accessibility measuring points");  Envelope env=boundary.getEnvelopeInternal();  for (double x=env.getMinX(); x < env.getMaxX(); x+=gridSize) {    for (double y=env.getMinY(); y < env.getMaxY(); y+=gridSize) {      double centerX=x + (gridSize / 2);      double centerY=y + (gridSize / 2);      Point centroid=factory.createPoint(new Coordinate(centerX,centerY));      if (boundary.contains(centroid)) {        Coord center=new Coord(centerX,centerY);        measuringPoints.createAndAddFacility(Id.create(setPoints,ActivityFacility.class),center);        setPoints++;      } else       skippedPoints++;    }  }  log.info("Having " + setPoints + " inside the shape file boundary (and "+ skippedPoints+ " outside).");  log.info("Done with setting starting points!");  return measuringPoints;}  }
class C{  protected boolean parseLocationSection(BinaryFile binFile){  locationSection=new RpfLocationSection();  try {    locationSection.length=(int)binFile.readShort();    locationSection.tableOffset=(long)binFile.readInteger();    locationSection.numberRecords=(int)binFile.readShort();    locationSection.recordLength=(int)binFile.readShort();    locationSection.aggregateLength=(long)binFile.readInteger();    if (DEBUG_RPFDETAIL) {      Debug.output(locationSection.toString());    }    locationRecords=new RpfLocationRecord[locationSection.numberRecords];    for (int i=0; i < locationSection.numberRecords; i++) {      locationRecords[i]=new RpfLocationRecord();      locationRecords[i].id=binFile.readShort();      locationRecords[i].componentLength=(long)binFile.readInteger();      locationRecords[i].componentLocation=(long)(binFile.readInteger());      if (DEBUG_RPFDETAIL) {        Debug.output("** record " + i + ": "+ locationRecords[i].toString());      }    }  } catch (  IOException ioe) {    Debug.error("RpfFileSections: IO ERROR parsing locations!\n" + ioe);    return false;  }catch (  FormatException fe) {    Debug.error("RpfFileSections: Format ERROR parsing locations!\n" + fe);    return false;  }  return true;}  }
class C{  public MethodInfo[] findMethods(String name){  ArrayList<MethodInfo> result=new ArrayList<MethodInfo>();  ArrayDeque<ClassDetail> q=new ArrayDeque<ClassDetail>();  q.push(this);  while (!q.isEmpty()) {    ClassDetail detail=q.pop();    MethodInfo[] mis=detail.findMethodsHere(name);    for (    MethodInfo mi : mis) {      boolean overrided=false;      for (      MethodInfo mi0 : result) {        if (mi0.canOverride(mi)) {          overrided=true;          break;        }      }      if (!overrided)       result.add(mi);    }    if (detail.superClass != null)     q.push(detail.superClass.getDetails());    for (    ClassInfo i : detail.interfaces)     q.push(i.getDetails());  }  return result.toArray(new MethodInfo[result.size()]);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static void printSizes(Component c){  if (MainFrame.GUI2_DEBUG) {    System.out.println("minimumSize = " + c.getMinimumSize());    System.out.println("preferredSize = " + c.getPreferredSize());    System.out.println("maximumSize = " + c.getMaximumSize());  }}  }
class C{  public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  List<Integer> sigBitList=new ArrayList<Integer>();  BufferedImage image=null;  DWT dwt=null;  ImageTree dwtTree=null;  ImageTree p=null;  Signature sig=null;  Pixel pixel1=null;  Pixel pixel2=null;  Pixel pixel3=null;  int[][] luminance=null;  int cols=0;  int rows=0;  int n=0;  image=ImageUtil.makeImageSquare(ImageUtil.byteArrayToImage(stegoData,stegoFileName));  cols=image.getWidth();  rows=image.getHeight();  luminance=ImageUtil.getYuvFromImage(image).get(0);  sig=new Signature(origSigData);  dwt=new DWT(cols,rows,sig.filterID,sig.embeddingLevel,sig.waveletFilterMethod);  dwtTree=dwt.forwardDWT(luminance);  p=dwtTree;  while (p.getLevel() < sig.embeddingLevel) {    p=p.getCoarse();  }  for (int row=0; row < p.getImage().getHeight(); row++) {    for (int col=0; col < p.getImage().getWidth() - 3; col+=3) {      pixel1=new Pixel(0,DWTUtil.getPixel(p.getImage(),col + 0,row));      pixel2=new Pixel(1,DWTUtil.getPixel(p.getImage(),col + 1,row));      pixel3=new Pixel(2,DWTUtil.getPixel(p.getImage(),col + 2,row));      if (pixel1.value > pixel2.value) {        swapPix(pixel1,pixel2);      }      if (pixel2.value > pixel3.value) {        swapPix(pixel2,pixel3);      }      if (pixel1.value > pixel2.value) {        swapPix(pixel1,pixel2);      }      sigBitList.add(invWmTransform(sig.embeddingStrength,pixel1.value,pixel2.value,pixel3.value));      n++;    }  }  sig.setWatermark(convertBitListToByteArray(sigBitList));  return sig.getSigData();}  }
class C{  private Object convertFieldValueUsingType(SchemaField sf,final Object rawValue){  if (rawValue instanceof CharSequence) {    FieldType fieldType=userVersionField.getType();    BytesRef term=new BytesRef();    fieldType.readableToIndexed((CharSequence)rawValue,term);    return fieldType.toObject(userVersionField,term);  }  return rawValue;}  }
class C{  @RequestProcessing(value="/admin/user/{userId}",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateUser(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("admin/user.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject user=userQueryService.getUser(userId);  dataModel.put(User.USER,user);  final Enumeration<String> parameterNames=request.getParameterNames();  while (parameterNames.hasMoreElements()) {    final String name=parameterNames.nextElement();    final String value=request.getParameter(name);    if (name.equals(UserExt.USER_POINT) || name.equals(UserExt.USER_STATUS)) {      user.put(name,Integer.valueOf(value));    } else     if (name.equals(User.USER_PASSWORD)) {      final String oldPwd=(String)user.getString(name);      if (!oldPwd.equals(value) && !Strings.isEmptyOrNull(value)) {        user.put(name,MD5.hash(value));      }    } else {      user.put(name,value);    }  }  userMgmtService.updateUser(userId,user);  final String teamsStr=Symphonys.get("teams");  dataModel.put(Common.TEAMS,teamsStr.split(","));  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ResponseAPDU == false) {    return false;  }  ResponseAPDU other=(ResponseAPDU)obj;  return Arrays.equals(this.apdu,other.apdu);}  }
class C{  void performOperation(BayesNet bayesNet,Instances instances,Operation oOperation) throws Exception {switch (oOperation.m_nOperation) {case Operation.OPERATION_ADD:    applyArcAddition(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);  if (bayesNet.getDebug()) {    System.out.print("Add " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);  }break;case Operation.OPERATION_DEL:applyArcDeletion(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);if (bayesNet.getDebug()) {System.out.print("Del " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);}break;case Operation.OPERATION_REVERSE:applyArcDeletion(bayesNet,oOperation.m_nHead,oOperation.m_nTail,instances);applyArcAddition(bayesNet,oOperation.m_nTail,oOperation.m_nHead,instances);if (bayesNet.getDebug()) {System.out.print("Rev " + oOperation.m_nHead + " -> "+ oOperation.m_nTail);}break;}}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public _BuildServiceHostUpdate(final _BuildServiceHostUpdate_Flag[] flags){  super(flags);}  }
class C{  public static boolean isNonnegativeInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp >= 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Matrix4f rotateZYX(float angleZ,float angleY,float angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  public static void rename(File source,File target) throws RenameException {  Preconditions.checkNotNull(source);  Preconditions.checkNotNull(target);  target.delete();  if (source.renameTo(target)) {    return;  }  Throwable innerException=null;  if (target.exists()) {    innerException=new FileDeleteException(target.getAbsolutePath());  } else   if (!source.getParentFile().exists()) {    innerException=new ParentDirNotFoundException(source.getAbsolutePath());  } else   if (!source.exists()) {    innerException=new FileNotFoundException(source.getAbsolutePath());  }  throw new RenameException("Unknown error renaming " + source.getAbsolutePath() + " to "+ target.getAbsolutePath(),innerException);}  }
class C{  protected static void writeComment(XMLWriter writer,String comment){  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeComment(writer," ");  XmlWriterUtil.writeComment(writer,comment);  XmlWriterUtil.writeComment(writer," ");  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeLineBreak(writer);}  }
class C{  public synchronized IFloodlightModuleContext loadModulesFromList(Collection<String> configMods,Properties prop) throws FloodlightModuleException {  logger.debug("Starting module loader");  findAllModules(configMods);  ArrayList<IFloodlightModule> moduleList=new ArrayList<>();  Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap=new HashMap<>();  HashSet<String> modsVisited=new HashSet<>();  ArrayDeque<String> modsToLoad=new ArrayDeque<>(configMods);  while (!modsToLoad.isEmpty()) {    String moduleName=modsToLoad.removeFirst();    traverseDeps(moduleName,modsToLoad,moduleList,moduleMap,modsVisited);  }  parseConfigParameters(prop);  loadedModuleList=moduleList;  initModules(moduleList);  if (startupModules)   startupModules(moduleList);  return floodlightModuleContext;}  }
class C{  public void test() throws Exception {  byte[] data=array(F.t(wrap(1),8),F.t(wrap(SYM_LF),1),F.t(wrap(1),8),F.t(wrap(SYM_CR,SYM_LF),1),F.t(wrap(1),8));  assertSplit(0,4,0,9,data);  assertSplit(0,9,0,9,data);  assertSplit(0,13,0,19,data);  assertSplit(0,19,0,19,data);  assertSplit(0,23,0,27,data);  assertSplit(0,27,0,27,data);  assertSplitNull(2,2,data);  assertSplitNull(2,7,data);  assertSplit(2,11,9,10,data);  assertSplit(2,17,9,10,data);  assertSplit(2,21,9,18,data);  assertSplit(2,25,9,18,data);  assertSplit(9,4,9,10,data);  assertSplit(9,10,9,10,data);  assertSplit(9,14,9,18,data);  assertSplit(9,18,9,18,data);  assertSplitNull(11,2,data);  assertSplitNull(11,8,data);  assertSplit(11,12,19,8,data);  assertSplit(11,16,19,8,data);  assertSplit(19,4,19,8,data);  assertSplit(19,8,19,8,data);  assertSplitNull(21,2,data);  assertSplitNull(21,6,data);}  }
class C{  public String graph() throws Exception {  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graph(); else   throw new Exception("Classifier: " + m_Classifier.getClass().getName() + " "+ Utils.joinOptions(m_BestClassifierOptions)+ " cannot be graphed");}  }
class C{  void apMessage(AnnotationProcessingError ex){  out.println(getLocalizedString("msg.proc.annotation.uncaught.exception"));  ex.getCause().printStackTrace();}  }
class C{  protected void parseRotate() throws ParseException, IOException {  current=reader.read();  if (current != 'o') {    reportCharacterExpectedError('o',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float theta=parseFloat();  skipSpaces();switch (current) {case ')':    fragmentIdentifierHandler.rotate(theta);  return;case ',':current=reader.read();skipSpaces();}float cx=parseFloat();skipCommaSpaces();float cy=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}fragmentIdentifierHandler.rotate(theta,cx,cy);}  }
class C{  public Base64SharedPreferences(Context context,String preferenceName,String secureKey,boolean encryptKeys) throws SecurePreferencesException {  try {    this.writer=Cipher.getInstance(TRANSFORMATION);    this.reader=Cipher.getInstance(TRANSFORMATION);    this.keyWriter=Cipher.getInstance(KEY_TRANSFORMATION);    initCiphers(secureKey);    this.preferences=context.getSharedPreferences(preferenceName,Context.MODE_PRIVATE);    this.encryptKeys=encryptKeys;  } catch (  GeneralSecurityException e) {    throw new SecurePreferencesException(e);  }catch (  UnsupportedEncodingException e) {    throw new SecurePreferencesException(e);  }}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,2}) static void genBoundsCheck(Assembler asm,GPR indexReg,GPR arrayRefReg){  if (ARRAY_LENGTH_BYTES == 4) {    asm.emitCMP_RegDisp_Reg(arrayRefReg,ObjectModel.getArrayLengthOffset(),indexReg);  } else {    asm.emitCMP_RegDisp_Reg_Quad(arrayRefReg,ObjectModel.getArrayLengthOffset(),indexReg);  }  asm.emitBranchLikelyNextInstruction();  ForwardReference fr=asm.forwardJcc(LGT);  asm.emitMOV_RegDisp_Reg(THREAD_REGISTER,ArchEntrypoints.arrayIndexTrapParamField.getOffset(),indexReg);  asm.emitINT_Imm(RuntimeEntrypoints.TRAP_ARRAY_BOUNDS + RVM_TRAP_BASE);  fr.resolve(asm);}  }
class C{  private boolean findFinalDestinationForCarLoad(Car car) throws BuildFailedException {  boolean routeToSpurFound=false;  if (car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) || car.getLoadName().equals(CarLoads.instance().getDefaultLoadName()) || car.getDestination() != null || car.getFinalDestination() != null) {    return false;  }  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildSearchForSpur"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName(),car.getLocationName() + ", " + car.getTrackName()}));  if (car.getKernel() != null) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLeadKernel"),new Object[]{car.toString(),car.getKernelName(),car.getKernel().getSize(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));  }  List<Track> tracks=locationManager.getTracksByMoves(Track.SPUR);  log.debug("Found {} spurs",tracks.size());  List<Location> locations=new ArrayList<Location>();  for (  Track track : tracks) {    if (car.getTrack() == track || track.getSchedule() == null) {      continue;    }    if (locations.contains(track.getLocation())) {      continue;    }    if (!car.getTrack().acceptsDestination(track.getLocation())) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDestinationNotServiced"),new Object[]{track.getLocation().getName(),car.getTrackName()}));      locations.add(track.getLocation());      continue;    }    if (!_train.isAllowThroughCarsEnabled() && !_train.isLocalSwitcher() && !car.isCaboose()&& !car.hasFred()&& !car.isPassenger()&& splitString(car.getLocationName()).equals(splitString(_departLocation.getName()))&& splitString(track.getLocation().getName()).equals(splitString(_terminateLocation.getName()))&& !splitString(_departLocation.getName()).equals(splitString(_terminateLocation.getName()))) {      log.debug("Skipping track ({}), through cars not allowed to terminal ({})",track.getName(),_terminateLocation.getName());      continue;    }    String status=car.testDestination(track.getLocation(),track);    if (status.equals(Track.OKAY) && !_train.isAllowLocalMovesEnabled() && splitString(car.getLocationName()).equals(splitString(track.getLocation().getName()))) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoLocalMoveToSpur"),new Object[]{_train.getName(),track.getLocation().getName(),track.getName()}));      continue;    }    if (!status.equals(Track.OKAY)) {      if (track.getScheduleMode() == Track.SEQUENTIAL && status.startsWith(Track.SCHEDULE)) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackSequentialMode"),new Object[]{track.getName(),track.getLocation().getName(),status}));      }      if (!status.startsWith(Track.LENGTH) || !track.checkSchedule(car).equals(Track.OKAY)) {        continue;      }      if (track.getAlternateTrack() == null) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSpurFullNoAlternate"),new Object[]{track.getLocation().getName(),track.getName()}));        continue;      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackFullHasAlternate"),new Object[]{track.getLocation().getName(),track.getName(),track.getAlternateTrack().getName()}));        if (!_train.isLocalSwitcher() && (track.getTrainDirections() & track.getAlternateTrack().getTrainDirections()) == 0) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropRsUsingTrain4"),new Object[]{track.getName(),formatStringToCommaSeparated(Setup.getDirectionStrings(track.getTrainDirections())),track.getAlternateTrack().getName(),formatStringToCommaSeparated(Setup.getDirectionStrings(track.getAlternateTrack().getTrainDirections()))}));          continue;        }      }    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSetFinalDestination"),new Object[]{car.toString(),car.getLoadName(),track.getLocation().getName(),track.getName()}));    if (track.isHoldCarsWithCustomLoadsEnabled()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildHoldCarsCustom"),new Object[]{track.getLocation().getName(),track.getName()}));    }    if (!track.isSpaceAvailable(car)) {      String id=track.getScheduleItemId();      car.setFinalDestination(track.getLocation());      car.setFinalDestinationTrack(track);      if (Router.instance().setDestination(car,_train,_buildReport) && track.isHoldCarsWithCustomLoadsEnabled()) {        routeToSpurFound=true;      }      car.setDestination(null,null);      car.setFinalDestination(null);      car.setFinalDestinationTrack(null);      track.setScheduleItemId(id);      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoDestTrackSpace"),new Object[]{car.toString(),track.getLocation().getName(),track.getName(),track.getNumberOfCarsInRoute(),track.getReservedInRoute(),Setup.getLengthUnit().toLowerCase(),track.getReservationFactor()}));      continue;    }    car.setFinalDestination(track.getLocation());    car.setFinalDestinationTrack(track);    if (Router.instance().setDestination(car,_train,_buildReport) && track.isHoldCarsWithCustomLoadsEnabled()) {      routeToSpurFound=true;    }    if (car.getDestination() != null) {      car.updateKernel();      if (car.getDestinationTrack() != track) {        car.setScheduleItemId(track.getCurrentScheduleItem().getId());        track.bumpSchedule();      }      return true;    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNotAbleToSetDestination"),new Object[]{car.toString(),Router.instance().getStatus()}));    car.setFinalDestination(null);    car.setFinalDestinationTrack(null);  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCouldNotFindSpur"),new Object[]{car.toString(),car.getLoadName()}));  if (routeToSpurFound && !_train.isSendCarsWithCustomLoadsToStagingEnabled() && !car.getLocation().isStaging()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildHoldCarValidRoute"),new Object[]{car.toString(),car.getLocationName(),car.getTrackName()}));  } else {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildTrySendCarToStaging"),new Object[]{car.toString(),car.getLoadName()}));    tracks=locationManager.getTracks(Track.STAGING);    log.debug("Found {} staging tracks",tracks.size());    while (tracks.size() > 0) {      int rnd=(int)(Math.random() * tracks.size());      Track track=tracks.get(rnd);      tracks.remove(track);      log.debug("Staging track ({}, {})",track.getLocation().getName(),track.getName());      if (track.getLocation() == car.getLocation()) {        continue;      }      if (locations.contains(track.getLocation())) {        continue;      }      if (_terminateStageTrack != null && track.getLocation() == _terminateLocation && track != _terminateStageTrack) {        continue;      }      if (!car.getTrack().acceptsDestination(track.getLocation())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDestinationNotServiced"),new Object[]{track.getLocation().getName(),car.getTrackName()}));        locations.add(track.getLocation());        continue;      }      String status=track.accepts(car);      if (!status.equals(Track.OKAY) && !status.startsWith(Track.LENGTH)) {        log.debug("Staging track ({}) can't accept car ({})",track.getName(),car.toString());        continue;      }      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildStagingCanAcceptLoad"),new Object[]{track.getLocation(),track.getName(),car.getLoadName()}));      car.setFinalDestination(track.getLocation());      if (Router.instance().setDestination(car,_train,_buildReport)) {        routeToSpurFound=true;      }      if (car.getDestination() != null) {        car.updateKernel();        return true;      }      locations.add(track.getLocation());      car.setFinalDestination(null);    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoStagingForCarLoad"),new Object[]{car.toString(),car.getLoadName()}));  }  return routeToSpurFound;}  }
class C{  public LazySortedSetX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public void addedDistributedSystem(int remoteDsId){  addCount++;  List<Locator> locatorsConfigured=Locator.getLocators();  Locator locator=locatorsConfigured.get(0);  Map<Integer,Set<DistributionLocatorId>> allSiteMetaData=((InternalLocator)locator).getlocatorMembershipListener().getAllLocatorsInfo();  System.out.println("Added : allSiteMetaData : " + allSiteMetaData);}  }
class C{  public Class<? extends IEObjectDocumentationProvider> bindIEObjectDocumentationProvider(){  return TypesDocumentationProvider.class;}  }
class C{  public void derEncode(OutputStream out) throws IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream tmp=new DerOutputStream();  bytes.putOID(algid);  if (constructedFromDer == false) {    if (algParams != null) {      params=new DerValue(algParams.getEncoded());    } else {      params=null;    }  }  if (params == null) {    bytes.putNull();  } else {    bytes.putDerValue(params);  }  tmp.write(DerValue.tag_Sequence,bytes);  out.write(tmp.toByteArray());}  }
class C{  private void chargeForAction(final PoliticalActionAttachment paa){  final Resource PUs=getData().getResourceList().getResource(Constants.PUS);  final int cost=paa.getCostPU();  if (cost > 0) {    final String transcriptText=m_bridge.getPlayerID().getName() + " spend " + cost+ " PU on Political Action: "+ MyFormatter.attachmentNameToText(paa.getName());    m_bridge.getHistoryWriter().startEvent(transcriptText);    final Change charge=ChangeFactory.changeResourcesChange(m_bridge.getPlayerID(),PUs,-cost);    m_bridge.addChange(charge);  } else {    final String transcriptText=m_bridge.getPlayerID().getName() + " takes Political Action: " + MyFormatter.attachmentNameToText(paa.getName());    m_bridge.getHistoryWriter().startEvent(transcriptText);  }}  }
class C{  public int size(){  return events.size();}  }
class C{  public CAMatrix(int width){  this(width,1);}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  @Field(8) public int scode(){  return this.io.getIntField(this,8);}  }
class C{  public boolean isNeverVisible(LatLong loc){  if (loc.getLatitude() > 0.0f) {    return (this.dec < (loc.getLatitude() - 90.0f));  } else {    return (this.dec > (90.0f + loc.getLatitude()));  }}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  core.init(opmode,key,params,random);}  }
class C{  public void copyTo(@Name("destination") short[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  private void processJournal() throws IOException {  fileSystem.delete(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        fileSystem.delete(entry.cleanFiles[t]);        fileSystem.delete(entry.dirtyFiles[t]);      }      i.remove();    }  }}  }
class C{  private void raster(){  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,photonMapTexture);  glBindSampler(0,this.sampler);  glBindVertexArray(vaoScene);  glDrawArraysInstanced(GL_TRIANGLES,0,6 * 6,boxes.length / 2);  glBindVertexArray(0);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,0);  glUseProgram(0);}  }
class C{  public boolean isDue(){  return DUETYPE_Due.equals(getDueType());}  }
class C{  public Http(){  super(LOG);}  }
class C{  public void delete(){  ListView list=(ListView)findViewById(R.id.avatarsList);  int index=list.getCheckedItemPosition();  if (index < 0) {    MainActivity.showMessage("Select image",this);    return;  }  this.avatar=MainActivity.avatars.get(index);  this.avatar.instance=MainActivity.instance.id;  HttpDeleteAvatarAction action=new HttpDeleteAvatarAction(this,this.avatar);  action.execute();}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  public boolean isDisplayed(){  return displayed;}  }
class C{  public final void testToString02() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertNotNull(vr.toString());}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(_method.getModifiers());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tRandom number seed.\n" + "\t(default " + m_SeedDefault + ")","S",1,"-S <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public long addAndGet(long val){  return atomicLong.addAndGet(val);}  }
class C{  protected void fireMenuDragMouseReleased(MenuDragMouseEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuDragMouseListener.class) {      ((MenuDragMouseListener)listeners[i + 1]).menuDragMouseReleased(event);    }  }}  }
class C{  public TermQuery(Term t,TermContext states){  assert states != null;  term=Objects.requireNonNull(t);  perReaderTermState=Objects.requireNonNull(states);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected void addSerializer(String serializer){  if (!StringUtils.isEmpty(serializer)) {    serializers.add(serializer);  }}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public static Map<String,Object> updateContent(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=updateContentMethod(dctx,context);  return result;}  }
class C{  public static long usToPts(long us){  return (us * 90000) / C.MICROS_PER_SECOND;}  }
class C{  public static Protos.Payment createPaymentMessage(List<Transaction> transactions,@Nullable List<Protos.Output> refundOutputs,@Nullable String memo,@Nullable byte[] merchantData){  Protos.Payment.Builder builder=Protos.Payment.newBuilder();  for (  Transaction transaction : transactions) {    transaction.verify();    builder.addTransactions(ByteString.copyFrom(transaction.unsafeBitcoinSerialize()));  }  if (refundOutputs != null) {    for (    Protos.Output output : refundOutputs)     builder.addRefundTo(output);  }  if (memo != null)   builder.setMemo(memo);  if (merchantData != null)   builder.setMerchantData(ByteString.copyFrom(merchantData));  return builder.build();}  }
class C{  public static boolean isSourceFileSameAsTargetFile(CachedFile sourcefile,CachedFile targetfile){  assert sourcefile != null;  assert sourcefile.exists() == true;  assert targetfile != null;  if (!targetfile.exists()) {    assert targetfile.isChanged() == true;    return false;  }  if (!sourcefile.isChanged()) {    targetfile.setChanged(false);  }  if (!targetfile.isChanged()) {    return true;  }  if (sourcefile.length() != targetfile.length()) {    assert targetfile.isChanged() == true;    return false;  }  targetfile.setChanged(sourcefile.getCrc() != targetfile.getCrc());  return (targetfile.isChanged() == false);}  }
class C{  public SettableDrawable(Drawable drawable){  super(Preconditions.checkNotNull(drawable));}  }
class C{  @Override public boolean isReadOnly(){  return false;}  }
class C{  public boolean contains(Object key){  return map(key).contains(key);}  }
class C{  public void stopRecording(){  mHandler.sendMessage(mHandler.obtainMessage(MSG_STOP_RECORDING));  mHandler.sendMessage(mHandler.obtainMessage(MSG_QUIT));}  }
class C{  public VNXeCommandResult deleteFileSystemSnapSync(String snapId) throws VNXeException {  _logger.info("deleting file system snap: " + snapId);  String softwareVersion=getBasicSystemInfo().getSoftwareVersion();  FileSystemSnapRequests req=new FileSystemSnapRequests(_khClient,softwareVersion);  return req.deleteFileSystemSnapSync(snapId,softwareVersion);}  }
class C{  public IPRangeNode findRange(IPRangeNode child){  for (  IPRangeNode c : this.list) {    IPRangeNode result=c.findRange(child);    if (result != null)     return result;  }  return null;}  }
class C{  @Override public IgniteUuid classLoaderId(){  return clsLdrId;}  }
class C{  public void onPurpleButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(PURPLE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_purple));      storeRequestId(requestId,PURPLE_BUTTON);      Log.v("Amazon-IAP",String.format("Sending Request for Sku: %s Request ID: %s" + requestId,getResources().getString(R.string.entitlement_sku_purple),requestId));    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.purplebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public static void onCollectionDocuments(MongoClient client,String dbName,String collectionName,BlockingConsumer<Document> documentOperation){  onCollection(client,dbName,collectionName,null);}  }
class C{  public byte[] expand(SecretKey key,@Nullable byte[] info,int outputLength){  requireNonNull(key,"key must not be null");  if (outputLength < 1) {    throw new IllegalArgumentException("outputLength must be positive");  }  int hashLen=hash.getByteLength();  if (outputLength > 255 * hashLen) {    throw new IllegalArgumentException("outputLength must be less than or equal to 255*HashLen");  }  if (info == null) {    info=new byte[0];  }  int n=(outputLength % hashLen == 0) ? outputLength / hashLen : (outputLength / hashLen) + 1;  byte[] hashRound=new byte[0];  ByteBuffer generatedBytes=ByteBuffer.allocate(Math.multiplyExact(n,hashLen));  Mac mac=initMac(key);  for (int roundNum=1; roundNum <= n; roundNum++) {    mac.reset();    mac.update(hashRound);    mac.update(info);    mac.update((byte)roundNum);    hashRound=mac.doFinal();    generatedBytes.put(hashRound);  }  byte[] result=new byte[outputLength];  generatedBytes.rewind();  generatedBytes.get(result,0,outputLength);  return result;}  }
class C{  public void send(final OutputStream os) throws IOException {  PacketOutputStream buffer=(PacketOutputStream)os;  buffer.startPacket(0,true);  writeCmd(statementId,parameters,parameterCount,parameterTypeHeader,buffer);  buffer.finishPacketWithoutRelease(true);  buffer.releaseBuffer();}  }
class C{  public static byte[] unrollLegacyRead(final byte[] samRead,final byte[] gs,final String gc){  final int overlap=gs.length;  if (overlap == 0) {    return samRead;  } else {    if (gc == null) {      return null;    }    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    int lastCigarPos=0;    int readPos=0;    int attPos=0;    while (true) {      final int cigarPos=nextCigarPos(gc,lastCigarPos);      if (cigarPos == -1) {        break;      }      final int cigarLen=stringToInt(gc,lastCigarPos,cigarPos);      if (cigarLen < 0) {        return null;      }      if (gc.charAt(cigarPos) == 'S') {        if (readPos + cigarLen > samRead.length) {          return null;        }        baos.write(samRead,readPos,cigarLen);        lastCigarPos=cigarPos + 1;        readPos=readPos + cigarLen;      } else {        if (cigarLen == 0) {          return null;        }        final int consumed=cigarLen * 2;        if (attPos + consumed > gs.length) {          return null;        }        baos.write(gs,attPos,consumed);        attPos=attPos + consumed;        lastCigarPos=cigarPos + 1;        readPos+=cigarLen;      }    }    if (readPos != samRead.length || lastCigarPos != gc.length() || attPos != gs.length) {      return null;    }    return baos.toByteArray();  }}  }
class C{  public T inflate(){  return getObjectFromCacheOrInflate();}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  public boolean createModel(boolean simulation){  if (getModel() == null) {    if (lastModelClass != null) {      try {        createModel(this.lastModelClass,simulation);      } catch (      Exception e) {        getSessionSupport().fireModelUnclear(this);      }    } else {      getSessionSupport().fireModelUnclear(this);    }  }  return getModel() != null;}  }
class C{  private boolean eigenResultsRight(EigenValueDecomposition evd,Matrix A,double eps){  return A.multiply(evd.getV()).equals(evd.getV().multiply(evd.getD()),eps);}  }
class C{  public Vector3 rot(Matrix4 matrix){  float l_mat[]=matrix.val;  return this.set(x * l_mat[Matrix4.M00] + y * l_mat[Matrix4.M01] + z * l_mat[Matrix4.M02],x * l_mat[Matrix4.M10] + y * l_mat[Matrix4.M11] + z * l_mat[Matrix4.M12],x * l_mat[Matrix4.M20] + y * l_mat[Matrix4.M21] + z * l_mat[Matrix4.M22]);}  }
class C{  public String toResultsString(){  return m_selectionResults.toString();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USADA8");  translateAll(environment,instruction,"USADA8",instructions);}  }
class C{  public void initCustomEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,Object detailArg){  initEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg);  detail=detailArg;}  }
class C{  public static void copyToClipboard(String s){  ClipboardHelper.copyToClipboard(s);}  }
class C{  private void evaluate(){  log.trace("evaluating");  final EvaluateCheckinPoliciesCommand command=new EvaluateCheckinPoliciesCommand(evaluator,createPolicyContext(),false);  final ICommandExecutor executor=UICommandExecutorFactory.newUICommandExecutor(getShell());  final IStatus status=executor.execute(command);  if (status.isOK()) {    updateFailuresTableAndSummary(evaluator.getPolicyEvaluatorState(),command.getFailures());  }}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  public static void logReadTaskException(final Logger logger,final Task<Revision> task,final Exception e){  if (task != null) {    logger.logException(Level.SEVERE,"Error while reading a task: " + task.toString(),e);  } else {    logger.logException(Level.SEVERE,"Error while reading an unknown task",e);  }}  }
class C{  public NamingException(){  super();  resolvedName=remainingName=null;  resolvedObj=null;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  protected void handleServerHeartbeat(Event event){  logger.trace("Server heartbeat: {}",event);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:30.992 -0500",hash_original_method="1BAB8A1EF49695D9BD2CE878014B3A7C",hash_generated_method="C530EBE8B43236563249FD97A1A8E031") private void sendServerInternalErrorResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Sending 500 response for out of sequence message");  SIPResponse sipResponse=sipRequest.createResponse(Response.SERVER_INTERNAL_ERROR);  sipResponse.setReasonPhrase("Request out of order");  if (MessageFactoryImpl.getDefaultServerHeader() != null) {    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    sipResponse.setHeader(serverHeader);  }  try {    RetryAfter retryAfter=new RetryAfter();    retryAfter.setRetryAfter(10);    sipResponse.setHeader(retryAfter);    sipStack.addTransactionPendingAck(transaction);    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    sipStack.getStackLogger().logError("Problem sending response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  private static int hash(char[] key,int length){  int hash=17;  for (int i=length - 1; i >= 0; i--) {    char a=key[i];    if ('A' <= a && a <= 'Z')     a+='a' - 'A';    hash=65537 * hash + a;  }  return hash;}  }
class C{  @Deprecated public ExtendedErrorDialog(String key,Throwable error,Object... arguments){  this(key,error,false,arguments);}  }
class C{  public String asString(){  return (String)value;}  }
class C{  private void handleTailRecursion(){  while (nextFunction != NextFunction.DONE) {switch (nextFunction) {case LIVE_IN_AT_STATEMENT:      nextFunction=NextFunction.DONE;    liveInAtStatement();  break;case LIVE_OUT_AT_STATEMENT:nextFunction=NextFunction.DONE;liveOutAtStatement();break;case LIVE_OUT_AT_BLOCK:nextFunction=NextFunction.DONE;liveOutAtBlock();break;default :}}}  }
class C{  public ItemLabelPosition(){  this(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER,TextAnchor.CENTER,0.0);}  }
class C{  @Deprecated public SolrQuery removeSortField(String field,ORDER order){  String[] sorts=getSortFields();  if (sorts != null) {    String removeSort=toSortString(field,order);    String s=join(sorts,",",removeSort);    if (s.length() == 0)     s=null;    this.set(CommonParams.SORT,s);  }  return this;}  }
class C{  public ImmutableArray2<K> subArray(int fromIndex,int toIndex){  int len=toIndex - fromIndex;  if (fromIndex == 0) {    return new ImmutableArray2<K>(array,len);  }  @SuppressWarnings("unchecked") K[] a2=(K[])new Object[len];  System.arraycopy(array,fromIndex,a2,0,toIndex - fromIndex);  return new ImmutableArray2<K>(a2,len);}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  public URL createRelativeURL(URL base,String fileName) throws MalformedURLException {  return new URL(base,fileName);}  }
class C{  public EdgeRenderer(int edgeType){  this(edgeType,Constants.EDGE_ARROW_FORWARD);}  }
class C{  public void unauthenticateUser(final PwmRequest pwmRequest){  final LocalSessionStateBean ssBean=getSessionStateBean();  if (getLoginInfoBean().isAuthenticated()) {    getUserSessionDataCacheBean().clearPermissions();    final StringBuilder sb=new StringBuilder();    sb.append("unauthenticate session from ").append(ssBean.getSrcAddress());    if (getUserInfoBean().getUserIdentity() != null) {      sb.append(" (").append(getUserInfoBean().getUserIdentity()).append(")");    }    this.getLoginInfoBean().setAuthenticated(false);    getSessionManager().closeConnections();    LOGGER.debug(this,sb.toString());  }  if (pwmRequest != null) {    try {      pwmRequest.getPwmApplication().getSessionStateService().clearLoginSession(pwmRequest);    } catch (    PwmUnrecoverableException e) {      final String errorMsg="unexpected error writing removing login cookie from response: " + e.getMessage();      final ErrorInformation errorInformation=new ErrorInformation(PwmError.ERROR_UNKNOWN,errorMsg);      LOGGER.error(pwmRequest,errorInformation);    }    pwmRequest.getHttpServletRequest().setAttribute(PwmConstants.SESSION_ATTR_BEANS,null);  }  userInfoBean=null;  loginInfoBean=null;  userSessionDataCacheBean=null;}  }
class C{  public String addManager() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  User u=userManager.get(id);  if (u != null && !potentialManagers.contains(u)) {    addActionError(getText("manage.overview.manager.not.available",new String[]{id}));  } else   if (u != null) {    resource.addManager(u);    addActionMessage(getText("manage.overview.user.added",new String[]{u.getName()}));    saveResource();    potentialManagers.remove(u);  }  return execute();}  }
class C{  protected void makeUnitPyramid(int subdivisions,List<Geometry> meshes){  float radius=1.0f;  Geometry dest;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  for (int index=0; index < getFaceCount(); index++) {    GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellatePyramidBuffer(index,radius,subdivisions);    FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());    gb.makeIndexedTriangleBufferNormals(itb,normalBuffer);    FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());    gb.makeUnitPyramidTextureCoordinates(index,textureCoordBuffer,itb.getVertexCount());    dest=new Geometry();    dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());    dest.setVertexData(itb.getVertexCount(),itb.getVertices());    dest.setNormalData(normalBuffer.limit(),normalBuffer);    dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);    meshes.add(index,dest);  }}  }
class C{  public TemaDBEntityImpl(DbDataSource dataSource){  super(dataSource);}  }
class C{  boolean isValidMask(){  return validMask;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof RingPlot)) {    return false;  }  RingPlot that=(RingPlot)obj;  if (!this.centerTextMode.equals(that.centerTextMode)) {    return false;  }  if (!ObjectUtilities.equal(this.centerText,that.centerText)) {    return false;  }  if (!this.centerTextFormatter.equals(that.centerTextFormatter)) {    return false;  }  if (!this.centerTextFont.equals(that.centerTextFont)) {    return false;  }  if (!this.centerTextColor.equals(that.centerTextColor)) {    return false;  }  if (this.separatorsVisible != that.separatorsVisible) {    return false;  }  if (!ObjectUtilities.equal(this.separatorStroke,that.separatorStroke)) {    return false;  }  if (!PaintUtilities.equal(this.separatorPaint,that.separatorPaint)) {    return false;  }  if (this.innerSeparatorExtension != that.innerSeparatorExtension) {    return false;  }  if (this.outerSeparatorExtension != that.outerSeparatorExtension) {    return false;  }  if (this.sectionDepth != that.sectionDepth) {    return false;  }  return super.equals(obj);}  }
class C{  public RelNode convertSelect(SqlSelect select,boolean top){  final SqlValidatorScope selectScope=validator.getWhereScope(select);  final Blackboard bb=createBlackboard(selectScope,null,top);  convertSelectImpl(bb,select);  return bb.root;}  }
class C{  public boolean isFireAndForget(){  return isFireAndForget;}  }
class C{  public Socket connect(InetAddress inetadd,int port,int timeout,ConnectionWatcher optionalWatcher,boolean clientSide,int socketBufferSize) throws IOException {  return connect(inetadd,port,timeout,optionalWatcher,clientSide,socketBufferSize,sslConfig.isEnabled());}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  paint=new Paint();  paint.setAntiAlias(true);  paintBorder=new Paint();  paintBorder.setAntiAlias(true);  paintBorder.setStyle(Paint.Style.STROKE);  paintSelectorBorder=new Paint();  paintSelectorBorder.setAntiAlias(true);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)   setLayerType(LAYER_TYPE_SOFTWARE,null);  TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.CircularImageView,defStyle,0);  hasBorder=attributes.getBoolean(R.styleable.CircularImageView_civ_border,false);  hasSelector=attributes.getBoolean(R.styleable.CircularImageView_civ_selector,false);  shadowEnabled=attributes.getBoolean(R.styleable.CircularImageView_civ_shadow,SHADOW_ENABLED);  if (hasBorder) {    int defaultBorderSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setBorderWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_civ_borderWidth,defaultBorderSize));    setBorderColor(attributes.getColor(R.styleable.CircularImageView_civ_borderColor,Color.WHITE));  }  if (hasSelector) {    int defaultSelectorSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setSelectorColor(attributes.getColor(R.styleable.CircularImageView_civ_selectorColor,Color.TRANSPARENT));    setSelectorStrokeWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_civ_selectorStrokeWidth,defaultSelectorSize));    setSelectorStrokeColor(attributes.getColor(R.styleable.CircularImageView_civ_selectorStrokeColor,Color.BLUE));  }  if (shadowEnabled) {    shadowRadius=attributes.getFloat(R.styleable.CircularImageView_civ_shadowRadius,SHADOW_RADIUS);    shadowDx=attributes.getFloat(R.styleable.CircularImageView_civ_shadowDx,SHADOW_DX);    shadowDy=attributes.getFloat(R.styleable.CircularImageView_civ_shadowDy,SHADOW_DY);    shadowColor=attributes.getColor(R.styleable.CircularImageView_civ_shadowColor,SHADOW_COLOR);    setShadowEnabled(true);  }  attributes.recycle();}  }
class C{  public EncodingWriter create(String javaEncoding){  return _writer;}  }
class C{  protected void dockSomewhere(DockWrapper wrapper){  if (wrapper == null) {    throw new RuntimeException("Can't dock null!");  }  if (wrapper.canDockNorth()) {    dockNorth(wrapper);    return;  }  if (wrapper.canDockWest()) {    dockWest(wrapper);    return;  }  if (wrapper.canDockSouth()) {    dockSouth(wrapper);    return;  }  if (wrapper.canDockEast()) {    dockEast(wrapper);    return;  }  if (wrapper.canInternalFrame()) {    internalFrame(wrapper);    return;  }  if (wrapper.canExternalFrame()) {    externalFrame(wrapper);    return;  }  Debug.error("DockPanel: Can't dock anywhere...");  externalFrame(wrapper);}  }
class C{  public static final Color stringToColor(String str){  if ((str == null) || str.isEmpty()) {    return (null);  }  int[] col=stringToIntArray(str);  if (col.length < 3) {    return (null);  }  if (col.length == 3) {    return (new Color(col[0],col[1],col[2]));  } else {    return (new Color(col[0],col[1],col[2],col[3]));  }}  }
class C{  public void testRetrievalCached() throws Exception {  this.stmt.executeUpdate("SET QUERY_CACHE_TYPE = DEMAND");  double fullBegin=System.currentTimeMillis();  double averageQueryTimeMs=0;  double averageTraversalTimeMs=0;  for (int i=0; i < NUM_TESTS; i++) {    long queryBegin=System.currentTimeMillis();    this.rs=this.stmt.executeQuery("SELECT SQL_CACHE * FROM retrievalPerfTestHeap");    long queryEnd=System.currentTimeMillis();    averageQueryTimeMs+=((double)(queryEnd - queryBegin) / NUM_TESTS);    long traverseBegin=System.currentTimeMillis();    while (this.rs.next()) {      this.rs.getInt(1);      this.rs.getString(2);    }    long traverseEnd=System.currentTimeMillis();    averageTraversalTimeMs+=((double)(traverseEnd - traverseBegin) / NUM_TESTS);  }  double fullEnd=System.currentTimeMillis();  double fullTime=(fullEnd - fullBegin) / 1000;  double queriesPerSec=NUM_TESTS / fullTime;  double rowsPerSec=(NUM_ROWS * NUM_TESTS) / fullTime;  System.out.println("\nQuery Cache From Heap Retrieval\n");  System.out.println("Full test took: " + fullTime + " seconds.");  System.out.println("Queries/second: " + queriesPerSec);  System.out.println("Rows/second: " + rowsPerSec);  System.out.println("Avg. Query Exec Time: " + averageQueryTimeMs + " ms");  System.out.println("Avg. Traversal Time: " + averageTraversalTimeMs + " ms");  assertTrue(fullTime < 45);}  }
class C{  public ManagedStopFilterFactory(Map<String,String> args){  super(args);}  }
class C{  public void clear(){  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> s=segmentAt(segments,j);    if (s != null)     s.clear();  }}  }
class C{  public boolean isUpdate(){  if (update == null) {    return true;  } else {    return update;  }}  }
class C{  public static double staticNextDouble(double freedom){synchronized (shared) {    return shared.nextDouble(freedom);  }}  }
class C{  public static long parseCommitCounterFile(final String name,final String ext) throws NumberFormatException {  if (name == null)   throw new IllegalArgumentException();  if (ext == null)   throw new IllegalArgumentException();  final int len=name.length() - ext.length();  final String fileBaseName=name.substring(0,len);  final long commitCounter=Long.parseLong(fileBaseName);  return commitCounter;}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public CSVReader build(){  final CSVParser parser=(csvParser != null ? csvParser : parserBuilder.withFieldAsNull(nullFieldIndicator).build());  return new CSVReader(reader,skipLines,parser,keepCR,verifyReader);}  }
class C{  public void addCacheTransactionManagerCreation(CacheTransactionManagerCreation txm){  this.txMgrCreation=txm;}  }
class C{  public static Wallet loadFromFile(File f) throws UnreadableWalletException {  try {    FileInputStream stream=null;    try {      stream=new FileInputStream(f);      return loadFromFileStream(stream);    }  finally {      if (stream != null)       stream.close();    }  } catch (  IOException e) {    throw new UnreadableWalletException("Could not open file",e);  }}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  public Vector3(Double x,Double y,Double z){  this(x.floatValue(),y.floatValue(),z.floatValue());}  }
class C{  public static Number asinh(Number a){  return FastMath.asinh(a.doubleValue());}  }
class C{  public SendHandshakeResponsePacket(final String username,final String password,final String database,final long clientCapabilities,final byte serverLanguage,final byte[] seed,byte packetSeq,String plugin,String connectionAttributes,long serverThreadId){  this.packetSeq=packetSeq;  this.username=username;  this.password=password;  this.seed=seed;  this.clientCapabilities=clientCapabilities;  this.serverLanguage=serverLanguage;  this.database=database;  this.plugin=plugin;  this.connectionAttributes=connectionAttributes;  this.serverThreadId=serverThreadId;}  }
class C{  public void addAnnotation(String annotation,double x,double y){  mAnnotations.add(annotation);  while (mStringXY.get(x) != null) {    x+=getPadding(x);  }  mStringXY.put(x,y);}  }
class C{  protected void removePreviousRelation(Relation<?> relation){  if (keep) {    return;  }  boolean first=true;  for (Iter<Result> it=relation.getHierarchy().iterDescendants(relation); it.valid(); it.advance()) {    if (!(it.get() instanceof Index)) {      continue;    }    if (first) {      Logging.getLogger(getClass()).statistics("Index statistics when removing initial data relation.");      first=false;    }    ((Index)it.get()).logStatistics();  }  ResultUtil.removeRecursive(relation.getHierarchy(),relation);}  }
class C{  ObjectStreamField(String signature,String name){  if (name == null) {    throw new NullPointerException("name == null");  }  this.name=name;  this.typeString=signature.replace('.','/').intern();  defaultResolve();  this.isDeserialized=true;}  }
class C{  public FilterQuery(){  count=0;  follow=null;  track=null;  locations=null;}  }
class C{  public void checkShape(AbstractMatrix3D B){  if (slices != B.slices || rows != B.rows || columns != B.columns)   throw new IllegalArgumentException("Incompatible dimensions: " + toStringShort() + " and "+ B.toStringShort());}  }
class C{  protected final void putStringValue(byte[] s){  final int datalen=s.length;  java.lang.System.arraycopy(s,0,bytes,start - datalen,datalen);  start-=datalen;  putLength(datalen);}  }
class C{  private Retry processResponseHeaders() throws IOException {  Proxy selectedProxy=httpEngine.connection != null ? httpEngine.connection.getRoute().getProxy() : client.getProxy();  final int responseCode=getResponseCode();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=HttpAuthenticator.processAuthHeader(client.getAuthenticator(),getResponseCode(),httpEngine.getResponseHeaders().getHeaders(),rawRequestHeaders,selectedProxy,url);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > MAX_REDIRECTS) {throw new ProtocolException("Too many redirects: " + redirectionCount);}if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {return Retry.NONE;}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) {return Retry.NONE;}boolean sameProtocol=previousUrl.getProtocol().equals(url.getProtocol());if (!sameProtocol && !client.getFollowProtocolRedirects()) {return Retry.NONE;}boolean sameHost=previousUrl.getHost().equals(url.getHost());boolean samePort=getEffectivePort(previousUrl) == getEffectivePort(url);if (sameHost && samePort && sameProtocol) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  @PUT @Path("/internal/change-password") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response changeUserPassword(PasswordChangeParam passwordChange){  checkPasswordParameter(passwordChange);  String username=passwordChange.getUsername();  _logger.info("change password for user {}",username);  setUserPassword(username,passwordChange.getPassword(),null,false);  auditPassword(OperationTypeEnum.CHANGE_LOCAL_AUTHUSER_PASSWORD,AuditLogManager.AUDITLOG_SUCCESS,null,null,username);  return Response.ok("Password changed for " + username).build();}  }
class C{  public boolean acceptDrop(){  return support.isDrop() && support.isDataFlavorSupported(TypeDataFlavor.BASE_TYPE_FLAVOR) && support.getComponent() instanceof ZyGraph2DView;}  }
class C{  public void bindAppWidgetId(int appWidgetId,ComponentName provider,Bundle options){  try {    sService.bindAppWidgetId(appWidgetId,provider,options,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public void extendDefaultTables(boolean generateFKConstraints) throws EclipseLinkException {  JPAMTableCreator tableCreator=getDefaultTableCreator(generateFKConstraints);  tableCreator.extendTables(this.session,this);}  }
class C{  @LargeTest public void testSearchManagerAvailable(){  SearchManager searchManager1=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  assertNotNull(searchManager1);  SearchManager searchManager2=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  assertNotNull(searchManager2);  assertSame(searchManager1,searchManager2);}  }
class C{  public void stopShimmerAnimation(){  if (mAnimator != null) {    mAnimator.end();    mAnimator.removeAllUpdateListeners();    mAnimator.cancel();  }  mAnimator=null;  mAnimationStarted=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.818 -0500",hash_original_method="19EEF6F7A6D3ECB16FB052F6607F9998",hash_generated_method="012BF5070EC1B7DEF02B1136BB9913B4") public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (documentHandler != null) {    qAtts.setAttributes(atts);    documentHandler.startElement(qName,qAtts);  }}  }
class C{  private final void turbulenceFractal(final int[] rgb,double pointX,double pointY,final double[] fSum,final double[] noise){  double ratio=127.5;  int nOctave;  fSum[0]=fSum[1]=fSum[2]=fSum[3]=127.5;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;  for (nOctave=numOctaves; nOctave > 0; nOctave--) {    noise2(noise,pointX,pointY);switch (channels.length) {case 4:      fSum[3]+=(noise[3] * ratio);case 3:    fSum[2]+=(noise[2] * ratio);case 2:  fSum[1]+=(noise[1] * ratio);case 1:fSum[0]+=(noise[0] * ratio);}ratio*=.5;pointX*=2;pointY*=2;}switch (channels.length) {case 4:rgb[3]=(int)fSum[3];if ((rgb[3] & 0xFFFFFF00) != 0) rgb[3]=((rgb[3] & 0x80000000) != 0) ? 0 : 255;case 3:rgb[2]=(int)fSum[2];if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;case 2:rgb[1]=(int)fSum[1];if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;case 1:rgb[0]=(int)fSum[0];if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;}}  }
class C{  synchronized static boolean isNativeLibraryAvailable(){  if (sNativeLibraryLoaded == null) {    try {      System.loadLibrary("cmsdk_platform_jni");      sNativeLibraryLoaded=true;    } catch (    Throwable t) {      sNativeLibraryLoaded=false;      Log.w(TAG,"CMSDK native library unavailable");    }  }  return sNativeLibraryLoaded;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  instrOfferingId=null;  instrOffrConfigLimit=null;  instrOffrConfigUnlimited=false;  instrOffrConfigUnlimitedReadOnly=false;  instrOffrConfigId=null;  instrOfferingName="";  origSubparts="";  displayMaxLimit=new Boolean(false);  displayOptionForMaxLimit=new Boolean(false);  displayEnrollment=new Boolean(false);  displayDisplayInstructors=new Boolean(false);  displayEnabledForStudentScheduling=new Boolean(false);  displayExternalId=new Boolean(false);  editExternalId=new Boolean(false);  enableAllClassesForStudentScheduling="";  displayAllClassesInstructors="";  instructionalMethod=null;  resetLists();}  }
class C{  private void initializeConnection() throws GatewaySenderException, GemFireSecurityException {  this.connectionLifeCycleLock.writeLock().lock();  try {    if (this.sender.getProxy() == null || this.sender.getProxy().isDestroyed()) {      this.sender.initProxy();    } else {      this.processor.resetBatchId();    }    Connection con;    try {      if (this.sender.isParallel()) {        con=this.sender.getProxy().acquireConnection();        sender.setServerLocation(con.getServer());      } else {synchronized (this.sender.getLockForConcurrentDispatcher()) {          ServerLocation server=this.sender.getServerLocation();          if (server != null) {            if (logger.isDebugEnabled()) {              logger.debug("ServerLocation is: {}. Connecting to this serverLocation...",server);            }            con=this.sender.getProxy().acquireConnection(server);          } else {            if (logger.isDebugEnabled()) {              logger.debug("ServerLocation is null. Creating new connection. ");            }            con=this.sender.getProxy().acquireConnection();            if (this.sender.isPrimary()) {              if (sender.getServerLocation() == null) {                sender.setServerLocation(con.getServer());              }              new UpdateAttributesProcessor(this.sender).distribute(false);            }          }        }      }    } catch (    ServerConnectivityException e) {      this.failedConnectCount++;      Throwable ex=null;      if (e.getCause() instanceof GemFireSecurityException) {        ex=e.getCause();        if (logConnectionFailure()) {          logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayEventRemoteDispatcher_0_COULD_NOT_CONNECT_1,new Object[]{this.processor.getSender().getId(),ex.getMessage()}));        }        throw new GatewaySenderException(ex);      }      List<ServerLocation> servers=this.sender.getProxy().getCurrentServers();      String ioMsg=null;      if (servers.size() == 0) {        ioMsg=LocalizedStrings.GatewayEventRemoteDispatcher_THERE_ARE_NO_ACTIVE_SERVERS.toLocalizedString();      } else {        final StringBuilder buffer=new StringBuilder();        for (        ServerLocation server : servers) {          String endpointName=String.valueOf(server);          if (buffer.length() > 0) {            buffer.append(", ");          }          buffer.append(endpointName);        }        ioMsg=LocalizedStrings.GatewayEventRemoteDispatcher_NO_AVAILABLE_CONNECTION_WAS_FOUND_BUT_THE_FOLLOWING_ACTIVE_SERVERS_EXIST_0.toLocalizedString(buffer.toString());      }      ex=new IOException(ioMsg);      this.sender.setServerLocation(null);      if (this.failedConnectCount == 1) {        logger.warn(LocalizedMessage.create(LocalizedStrings.GatewayEventRemoteDispatcher__0___COULD_NOT_CONNECT,this.processor.getSender().getId()));      }      throw new GatewaySenderException(LocalizedStrings.GatewayEventRemoteDispatcher__0___COULD_NOT_CONNECT.toLocalizedString(this.processor.getSender().getId()),ex);    }    if (this.failedConnectCount > 0) {      Object[] logArgs=new Object[]{this.processor.getSender().getId(),con,Integer.valueOf(this.failedConnectCount)};      logger.info(LocalizedMessage.create(LocalizedStrings.GatewayEventRemoteDispatcher_0_USING_1_AFTER_2_FAILED_CONNECT_ATTEMPTS,logArgs));      this.failedConnectCount=0;    } else {      Object[] logArgs=new Object[]{this.processor.getSender().getId(),con};      logger.info(LocalizedMessage.create(LocalizedStrings.GatewayEventRemoteDispatcher_0_USING_1,logArgs));    }    this.connection=con;    this.processor.checkIfPdxNeedsResend(this.connection.getQueueStatus().getPdxSize());  } catch (  ConnectionDestroyedException e) {    throw new GatewaySenderException(LocalizedStrings.GatewayEventRemoteDispatcher__0___COULD_NOT_CONNECT.toLocalizedString(this.processor.getSender().getId()),e);  } finally {    this.connectionLifeCycleLock.writeLock().unlock();  }}  }
class C{  private void removeHolder(Holder<K,V> holder){  long order0=holder.order;  if (order0 > 0)   holder.order=-order0;  set.remove(holder);}  }
class C{  public Object open(){  createContents();  shlEvosuiteResult.open();  shlEvosuiteResult.layout();  Display display=getParent().getDisplay();  while (!shlEvosuiteResult.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return result;}  }
class C{  public static void main(final String[] args){  ensureDbIsSetup();  final JFileChooser chooser=new JFileChooser(Database.getBackupDir());  chooser.setMultiSelectionEnabled(false);  chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  final int rVal=chooser.showOpenDialog(null);  if (rVal == JFileChooser.APPROVE_OPTION) {    final File f=chooser.getSelectedFile();    if (!f.exists() && f.isDirectory()) {      throw new IllegalStateException("Does not exist, or not a directory");    }    try {      Database.restoreFromBackup(chooser.getSelectedFile());    } catch (    final SQLException e) {      ClientLogger.logQuietly(e);    }  }}  }
class C{  public MessageHeader(final INode from,final Serializable message){  this(null,from,message);}  }
class C{  public SimpleSequence(ObjectWrapper wrapper){  super(wrapper);  list=new ArrayList();}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public static int copy(InputStream in,OutputStream out,int workbuffsize) throws IOException {  return IOUtil.copy(in,out,new byte[workbuffsize]);}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public static KindName kindName(Symbol sym){switch (sym.getKind()) {case PACKAGE:    return KindName.PACKAGE;case ENUM:  return KindName.ENUM;case ANNOTATION_TYPE:case CLASS:return KindName.CLASS;case INTERFACE:return KindName.INTERFACE;case TYPE_PARAMETER:return KindName.TYPEVAR;case ENUM_CONSTANT:case FIELD:case PARAMETER:case LOCAL_VARIABLE:case EXCEPTION_PARAMETER:case RESOURCE_VARIABLE:return KindName.VAR;case CONSTRUCTOR:return KindName.CONSTRUCTOR;case METHOD:return KindName.METHOD;case STATIC_INIT:return KindName.STATIC_INIT;case INSTANCE_INIT:return KindName.INSTANCE_INIT;default :if (sym.kind == VAL) return KindName.VAL; else throw new AssertionError("Unexpected kind: " + sym.getKind());}}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  public boolean isFirst(){  return (this.flags & FIRST) != 0;}  }
class C{  protected double kernel(int n,char[] s,int endIndexS,char[] t,int endIndexT){  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {    return getReturnValue(n);  }  double result=0;  for (int iS=endIndexS; iS > n - 2; iS--) {    double buf=0;    char x=s[iS];    for (int j=0; j <= endIndexT; j++) {      if (t[j] == x) {        buf+=kernelHelper(n - 1,s,iS - 1,t,j - 1);      }    }    result+=buf * m_powersOflambda[2];  }  return result;}  }
class C{  public void hide(){  progressArc.stop();}  }
class C{  public BitFlip(double probability){  super();  this.probability=probability;}  }
class C{  public void resetRams(){  pendingRams.removeAllElements();}  }
class C{  public static Object findResult(Object self,Object defaultResult,Closure closure){  Object result=findResult(self,closure);  if (result == null)   return defaultResult;  return result;}  }
class C{  public static InputStream executeSolrCommandAndGetInputStreamWithTimeout(int timeout,String command) throws IOException {  URL obj=new URL(command);  HttpURLConnection con=(HttpURLConnection)obj.openConnection();  con.setRequestMethod("GET");  con.setConnectTimeout(timeout);  con.setReadTimeout(timeout);  return con.getInputStream();}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static void checkIfMultipleOf8AndGT0(long v,String argName){  if (((v & 0X7L) == 0L) && (v > 0L)) {    return;  }  throw new SketchesArgumentException("The value of the parameter \"" + argName + "\" must be a positive multiple of 8 and greater than zero: "+ v);}  }
class C{  public Boolean isForcePersistence(){  return forcePersistence;}  }
class C{  protected boolean createStreamingResultSet(){  return ((this.resultSetType == java.sql.ResultSet.TYPE_FORWARD_ONLY) && (this.resultSetConcurrency == java.sql.ResultSet.CONCUR_READ_ONLY) && (this.fetchSize == Integer.MIN_VALUE));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 / z2);            } else {              outputFile.setValue(row,col,noData1);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 / constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 / z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void checkPreviousNotifications() throws AndroidAgentException {  List<Operation> operations=NotificationService.getInstance(context.getApplicationContext()).checkPreviousNotifications();  for (  Operation operation : operations) {    operationManager.getResultBuilder().build(operation);  }}  }
class C{  public boolean isAggregatedType(){  return false;}  }
class C{  public int hashCode(){  return conn.hashCode();}  }
class C{  public void add(WFNode node){  m_nodes.add(node);}  }
class C{  static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public ToStringBuilder append(String fieldName,short[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private JButton addButton(final AbstractAction action,final String rolloverIcon,final String pressedIcon){  final JButton button=add(CActionProxy.proxy(action));  button.setFocusable(false);  button.setBorder(new EmptyBorder(new Insets(1,0,1,0)));  button.setRolloverIcon(new ImageIcon(CMain.class.getResource(rolloverIcon)));  button.setPressedIcon(new ImageIcon(CMain.class.getResource(pressedIcon)));  return button;}  }
class C{  public int read(final InputStream is,final int contentLength){  if (is != null) {    try {      final int capacity=(contentLength > 0) ? (contentLength + 4096) : 4096;      final ByteArrayOutputStream buffer=new ByteArrayOutputStream(capacity);      int nRead;      final byte[] data=new byte[16384];      while ((nRead=is.read(data,0,data.length)) != -1) {        buffer.write(data,0,nRead);      }      buffer.flush();      read(buffer.toByteArray());    } catch (    final IOException e) {      Log.w(TAG,"Error reading data from stream",e);    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  final Exception e) {    Log.w(TAG,"Error closing stream",e);  }  return status;}  }
class C{  public JPAModelSetupPanel(Project project,WizardDescriptor wizardDescriptor){  this.project=project;  this.wizardDescriptor=wizardDescriptor;}  }
class C{  public static void escapeJava(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,false);}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public static void substituteProperties(Node node,Properties properties){  Node child;  Node next=node.getFirstChild();  while ((child=next) != null) {    next=child.getNextSibling();    if (child.getNodeType() == Node.TEXT_NODE) {      child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(),properties));    } else     if (child.getNodeType() == Node.ELEMENT_NODE) {      NamedNodeMap attributes=child.getAttributes();      for (int i=0; i < attributes.getLength(); i++) {        Node attribute=attributes.item(i);        attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(),properties));      }      substituteProperties(child,properties);    }  }}  }
class C{  private Builder(){  super(org.apache.nutch.storage.ParseStatus.SCHEMA$);}  }
class C{  public NotificationChain basicSetExitAction(Step newExitAction,NotificationChain msgs){  Step oldExitAction=exitAction;  exitAction=newExitAction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__EXIT_ACTION,oldExitAction,newExitAction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  void reduceTrinomial(int m,int tc){  int i;  int p0, p1;  int q0, q1;  long t;  p0=m >>> 5;  q0=32 - (m & 0x1f);  p1=(m - tc) >>> 5;  q1=32 - ((m - tc) & 0x1f);  int max=((m << 1) - 2) >>> 5;  int min=p0;  for (i=max; i > min; i--) {    t=value[i] & 0x00000000ffffffffL;    value[i - p0 - 1]^=(int)(t << q0);    value[i - p0]^=t >>> (32 - q0);    value[i - p1 - 1]^=(int)(t << q1);    value[i - p1]^=t >>> (32 - q1);    value[i]=0x00;  }  t=value[min] & 0x00000000ffffffffL & (0xffffffffL << (m & 0x1f));  value[0]^=t >>> (32 - q0);  if (min - p1 - 1 >= 0) {    value[min - p1 - 1]^=(int)(t << q1);  }  value[min - p1]^=t >>> (32 - q1);  value[min]&=reverseRightMask[m & 0x1f];  blocks=((m - 1) >>> 5) + 1;  len=m;}  }
class C{  public Object execSync(String sql,Object[] params){  QueryBuilderKraken query=QueryParserKraken.parse(this,sql);  return _services.run(10,TimeUnit.SECONDS,null);}  }
class C{  public static String toHexString(long value){  return Long.toHexString(value);}  }
class C{  public int multipleIntegerVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof IntegerVectorIndividual))   state.output.fatal("Trying to produce integer vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(IntegerVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        int temp=((IntegerVectorIndividual)parents[j]).genome[i];        ((IntegerVectorIndividual)parents[j]).genome[i]=((IntegerVectorIndividual)parents[swapIndex]).genome[i];        ((IntegerVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(IntegerVectorIndividual)parents[i];    }  }  return n;}  }
class C{  public static boolean isTypeOfVoid(PsiType type){  return type != null && type.equalsToText("void");}  }
class C{  protected void invertY(MutableCoord coord){  coord.setY(getHeight() - coord.getY());}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MMovementConfirm[] confirmations=getConfirmations(true);  for (int i=0; i < confirmations.length; i++) {    MMovementConfirm confirm=confirmations[i];    if (!confirm.isProcessed()) {      m_processMsg="Open: @M_MovementConfirm_ID@ - " + confirm.getDocumentNo();      return DocAction.STATUS_InProgress;    }  }  if (!isApproved())   approveIt();  log.info(toString());  MMovementLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MMovementLine line=lines[i];    MTransaction trxFrom=null;    MProduct product=line.getProduct();    if (product != null && product.isStocked()) {      if (!isReversal())       checkMaterialPolicy(line);      if (line.getM_AttributeSetInstance_ID() == 0) {        MMovementLineMA mas[]=MMovementLineMA.get(getCtx(),line.getM_MovementLine_ID(),get_TrxName());        for (int j=0; j < mas.length; j++) {          MMovementLineMA ma=mas[j];          MLocator locator=new MLocator(getCtx(),line.getM_Locator_ID(),get_TrxName());          if (!MStorage.add(getCtx(),locator.getM_Warehouse_ID(),line.getM_Locator_ID(),line.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),0,ma.getMovementQty().negate(),Env.ZERO,Env.ZERO,get_TrxName())) {            m_processMsg="Cannot correct Inventory (MA)";            return DocAction.STATUS_Invalid;          }          int M_AttributeSetInstanceTo_ID=line.getM_AttributeSetInstanceTo_ID();          if (M_AttributeSetInstanceTo_ID == 0 && line.getM_Locator_ID() != line.getM_LocatorTo_ID()) {            M_AttributeSetInstanceTo_ID=ma.getM_AttributeSetInstance_ID();          }          if (!MStorage.add(getCtx(),locator.getM_Warehouse_ID(),line.getM_LocatorTo_ID(),line.getM_Product_ID(),M_AttributeSetInstanceTo_ID,0,ma.getMovementQty(),Env.ZERO,Env.ZERO,get_TrxName())) {            m_processMsg="Cannot correct Inventory (MA)";            return DocAction.STATUS_Invalid;          }          trxFrom=new MTransaction(getCtx(),locator.getAD_Org_ID(),MTransaction.MOVEMENTTYPE_MovementFrom,line.getM_Locator_ID(),line.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),ma.getMovementQty().negate(),getMovementDate(),get_TrxName());          trxFrom.setM_MovementLine_ID(line.getM_MovementLine_ID());          if (!trxFrom.save()) {            m_processMsg="Transaction From not inserted (MA)";            return DocAction.STATUS_Invalid;          }          MLocator locatorTo=new MLocator(getCtx(),line.getM_LocatorTo_ID(),get_TrxName());          MTransaction trxTo=new MTransaction(getCtx(),locatorTo.getAD_Org_ID(),MTransaction.MOVEMENTTYPE_MovementTo,line.getM_LocatorTo_ID(),line.getM_Product_ID(),M_AttributeSetInstanceTo_ID,ma.getMovementQty(),getMovementDate(),get_TrxName());          trxTo.setAD_Org_ID(locatorTo.getAD_Org_ID());          trxTo.setM_MovementLine_ID(line.getM_MovementLine_ID());          if (!trxTo.save()) {            m_processMsg="Transaction To not inserted (MA)";            return DocAction.STATUS_Invalid;          }        }      }      if (trxFrom == null) {        MLocator locator=new MLocator(getCtx(),line.getM_Locator_ID(),get_TrxName());        if (!MStorage.add(getCtx(),locator.getM_Warehouse_ID(),line.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),0,line.getMovementQty().negate(),Env.ZERO,Env.ZERO,get_TrxName())) {          m_processMsg="Cannot correct Inventory (MA)";          return DocAction.STATUS_Invalid;        }        if (!MStorage.add(getCtx(),locator.getM_Warehouse_ID(),line.getM_LocatorTo_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstanceTo_ID(),0,line.getMovementQty(),Env.ZERO,Env.ZERO,get_TrxName())) {          m_processMsg="Cannot correct Inventory (MA)";          return DocAction.STATUS_Invalid;        }        trxFrom=new MTransaction(getCtx(),line.getAD_Org_ID(),MTransaction.MOVEMENTTYPE_MovementFrom,line.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),line.getMovementQty().negate(),getMovementDate(),get_TrxName());        trxFrom.setM_MovementLine_ID(line.getM_MovementLine_ID());        if (!trxFrom.save()) {          m_processMsg="Transaction From not inserted";          return DocAction.STATUS_Invalid;        }        MLocator locatorTo=new MLocator(getCtx(),line.getM_LocatorTo_ID(),get_TrxName());        MTransaction trxTo=new MTransaction(getCtx(),line.getAD_Org_ID(),MTransaction.MOVEMENTTYPE_MovementTo,line.getM_LocatorTo_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstanceTo_ID(),line.getMovementQty(),getMovementDate(),get_TrxName());        trxTo.setM_MovementLine_ID(line.getM_MovementLine_ID());        trxTo.setAD_Org_ID(locatorTo.getAD_Org_ID());        if (!trxTo.save()) {          m_processMsg="Transaction To not inserted";          return DocAction.STATUS_Invalid;        }      }    }  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public static Map<String,Object> updatePostalAddress(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_UPDATE");  if (result.size() > 0) {    return result;  }  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_id_generation_failure",locale));  }  String contactMechId=(String)context.get("contactMechId");  GenericValue contactMech=null;  GenericValue partyContactMech=null;  try {    contactMech=EntityQuery.use(delegator).from("ContactMech").where("contactMechId",contactMechId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    contactMech=null;  }  if (!partyId.equals("_NA_")) {    try {      partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();      if (partyContactMech == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.cannot_update_specified_contact_info_not_corresponds",locale));      } else {        toBeStored.add(partyContactMech);      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      contactMech=null;    }  }  if (contactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_find_specified_contact_info_read",locale));  }  GenericValue newContactMech=GenericValue.create(contactMech);  GenericValue newPartyContactMech=null;  if (partyContactMech != null)   newPartyContactMech=GenericValue.create(partyContactMech);  GenericValue relatedEntityToSet=null;  if ("POSTAL_ADDRESS".equals(contactMech.getString("contactMechTypeId"))) {    GenericValue addr=null;    try {      addr=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",contactMechId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      addr=null;    }    relatedEntityToSet=GenericValue.create(addr);    relatedEntityToSet.set("toName",context.get("toName"));    relatedEntityToSet.set("attnName",context.get("attnName"));    relatedEntityToSet.set("address1",context.get("address1"));    relatedEntityToSet.set("address2",context.get("address2"));    relatedEntityToSet.set("directions",context.get("directions"));    relatedEntityToSet.set("city",context.get("city"));    relatedEntityToSet.set("postalCode",context.get("postalCode"));    relatedEntityToSet.set("postalCodeExt",context.get("postalCodeExt"));    relatedEntityToSet.set("stateProvinceGeoId",context.get("stateProvinceGeoId"));    relatedEntityToSet.set("countryGeoId",context.get("countryGeoId"));    relatedEntityToSet.set("postalCodeGeoId",context.get("postalCodeGeoId"));    if (addr == null || !relatedEntityToSet.equals(addr)) {      isModified=true;    }    relatedEntityToSet.set("contactMechId",newCmId);  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_update_contact_as_POSTAL_ADDRESS_specified",UtilMisc.toMap("contactMechTypeId",contactMech.getString("contactMechTypeId")),locale));  }  if (newPartyContactMech != null) {    newPartyContactMech.set("roleTypeId",context.get("roleTypeId"));    newPartyContactMech.set("allowSolicitation",context.get("allowSolicitation"));  }  if (!newContactMech.equals(contactMech))   isModified=true;  if (newPartyContactMech != null && !newPartyContactMech.equals(partyContactMech))   isModified=true;  toBeStored.add(newContactMech);  if (newPartyContactMech != null)   toBeStored.add(newPartyContactMech);  if (isModified) {    if (relatedEntityToSet != null)     toBeStored.add(relatedEntityToSet);    newContactMech.set("contactMechId",newCmId);    if (newPartyContactMech != null) {      newPartyContactMech.set("contactMechId",newCmId);      newPartyContactMech.set("fromDate",now);      newPartyContactMech.set("thruDate",null);      try {        Iterator<GenericValue> partyContactMechPurposes=UtilMisc.toIterator(partyContactMech.getRelated("PartyContactMechPurpose",null,null,false));        while (partyContactMechPurposes != null && partyContactMechPurposes.hasNext()) {          GenericValue tempVal=GenericValue.create(partyContactMechPurposes.next());          tempVal.set("contactMechId",newCmId);          toBeStored.add(tempVal);        }      } catch (      GenericEntityException e) {        Debug.logWarning(e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));      }      partyContactMech.set("thruDate",now);    }    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_change_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));    }  } else {    result.put("newContactMechId",contactMechId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"contactmechservices.no_changes_made_not_updating",locale));    return result;  }  result.put("newContactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_clock_day_center);}  }
class C{  static String calculateResponse(String algorithm,String hashUserNameRealmPasswd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger != null && stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ hashUserNameRealmPasswd+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (hashUserNameRealmPasswd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  if (cnonce_value == null || cnonce_value.length() == 0)   throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  public static int minDistanceOptimal(String word1,String word2){  if (word1.equals(word2))   return 0;  int m=word1.length();  int n=word2.length();  int[] d=new int[n + 1];  d[0]=0;  for (int j=1; j < n + 1; j++)   d[j]=j;  for (int i=1; i < m + 1; i++) {    int prev=d[0];    d[0]+=1;    for (int j=1; j < n + 1; j++) {      int temp=d[j];      d[j]=Math.min(Math.min(d[j - 1] + 1,d[j] + 1),word1.charAt(i - 1) == word2.charAt(j - 1) ? prev : prev + 1);      prev=temp;    }  }  return d[n];}  }
class C{  public Certificate retrieveCertificate(Device device) throws KeyStoreException {  byte[] bytes=DatatypeConverter.parseBase64Binary(device.getAuthentication().getX509Certificate());  ByteArrayInputStream is=new ByteArrayInputStream(bytes);  Certificate certificate=null;  try {    CertificateFactory certificateFactory=CertificateFactory.getInstance("X.509");    certificate=certificateFactory.generateCertificate(is);  } catch (  CertificateException e) {    throw new KeyStoreException("Unable to get X.509 certificate from RDMS response",e);  } finally {    closeStream(is);  }  return certificate;}  }
class C{  public boolean isCollapsed(){  if (!label.isArea())   return false;  if (pts.length != 3)   return false;  if (pts[0].equals(pts[2]))   return true;  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected JPanel createButtonsPanel(){  JPanel p=new JPanel(new FlowLayout(FlowLayout.RIGHT));  ButtonFactory bf=new ButtonFactory(bundle,this);  p.add(bf.createJButton("OKButton"));  p.add(bf.createJButton("CancelButton"));  return p;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMRectElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean isSpeedRequired(){  return mSpeedRequired;}  }
class C{  @Override public int hashCode(){  int hash=0;  if (altFormat != null) {    hash+=altFormat.hashCode();  }  if (projection != null) {    hash=hash * 37;    hash+=projection.hashCode();  }  if (version != null) {    hash=hash * 37;    hash+=version.hashCode();  }  return hash;}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void addSurface(Surface<T> surface){  SurfacePriviledged<T> s=(SurfacePriviledged<T>)surface;  if (visitors.get(s) != null) {    throw new IllegalArgumentException("Surface already registered with the engine.");  }  visitors.put(s,new PathVisitor[]{new LayoutVisitor<T>(s),new AlignmentVisitor<T>(s),new WeightAdjustmentVisitor<T>(s)});  s.setEngine(this);  surfaces.add(s);}  }
class C{  public static void addListener(ILogEventListener aListener){  loggerImpl.addListener(aListener);}  }
class C{  private HandshakeStatus runTasks(){  Runnable runnable;  while ((runnable=sslEngine.getDelegatedTask()) != null) {    if (log.isDebugEnabled())     log.debug("Running SSL engine task [task=" + runnable + ", ses="+ ses+ ']');    runnable.run();  }  if (log.isDebugEnabled())   log.debug("Finished running SSL engine tasks [handshakeStatus=" + sslEngine.getHandshakeStatus() + ", ses="+ ses+ ']');  return sslEngine.getHandshakeStatus();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.899 -0400",hash_original_method="08EB96B3976F162AB99C66BBE24B1EE1",hash_generated_method="8AAD2B13A98CD6FA07ECAD8FA050BE34") private int readFirstBytes() throws IOException {  getBOM();  return fbIndex < fbLength ? firstBytes[fbIndex++] : -1;}  }
class C{  public boolean hasEssenceContainer(){  return (this.body_SID != 0);}  }
class C{  @SuppressWarnings("unchecked") public List<Boundary> populateArea(final Long wardId){  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);  ;  List<Boundary> areaList=new LinkedList<Boundary>();  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType("Area",hType);  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));  LOGGER.info("***********Ajax AreaList: " + areaList.toString());  return areaList;}  }
class C{  @Override public String toString(){  return "ReadHallOfFamePointsCommand [playername=" + playername + ", fametype="+ fametype+ ", points="+ points+ "]";}  }
class C{  private void addCard(SharedPreferences sharedPreferences,String key){  String json=sharedPreferences.getString(key,null);  if (json != null) {    try {      JSONObject jsonData=new JSONObject(json);      if (jsonData.has(IMAGE_KEY)) {        String image=jsonData.getString(IMAGE_KEY);        List<ITopic> cards=getSourceTopicModel();switch (key) {case POOL_KEY:          cards.add(0,Cards.pool(image,getActivity()));        removeDuplicates(POOL_KEY,cards);      break;case VIDEO_KEY:switch (jsonData.getString(ID_KEY)) {case POOL_CAMERA_ID:      mGreatShotUrl=jsonData.getString(URL_KEY);    mElv.setOnGroupClickListener(greatShotListener);  cards.add(0,Cards.poolVideo(mGreatShotUrl,getActivity()));removeDuplicates(VIDEO_KEY,cards);break;}break;case FOOD_KEY:cards.add(0,Cards.food(image,getActivity()));removeDuplicates(FOOD_KEY,cards);break;case PRINTER_3D_KEY:cards.add(0,Cards.printer3d(image,getActivity()));removeDuplicates(PRINTER_3D_KEY,cards);break;}} else if (jsonData.has(MESSAGE_KEY)) {String message=jsonData.getString(MESSAGE_KEY);List<ITopic> cards=getSourceTopicModel();cards.add(0,Cards.test(message,getActivity()));}UI.execute(null);} catch (JSONException e) {e.printStackTrace();}}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.145 -0500",hash_original_method="F8C55B41037119D58D30171BDB7F39D2",hash_generated_method="7A70D09DFEE9FBC6BA095C3DA7D817B5") private RawContactsEntity(){}  }
class C{  void appendBits(byte[] bytes){  for (int i=0; i != bytes.length; i++) {    appendBits(bytes[i]);  }}  }
class C{  public TcpDiscoveryMulticastIpFinder(){  setShared(true);}  }
class C{  @ObjectiveCName("unbindRawUploadFileWithRid:withCallback:") public void unbindRawUploadFile(long rid,UploadFileCallback callback){  modules.getFilesModule().unbindUploadFile(rid,callback);}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("annotationsSplit",0);  optionArgDefs.put("sourceTokens",1);  optionArgDefs.put("targetTokens",1);  optionArgDefs.put("alignment",1);  optionArgDefs.put("annotations",1);  optionArgDefs.put("outdir",1);  optionArgDefs.put("transitive",0);  optionArgDefs.put("maxDepth",1);  return optionArgDefs;}  }
class C{  public SnippetInput(final Class<? extends Throwable> pExpected,final Object... parameters){  if (parameters == null) {    params=new Object[0];  } else {    params=new Object[parameters.length];    System.arraycopy(parameters,0,params,0,parameters.length);  }  expected=pExpected;}  }
class C{  public boolean isFullyDepreciated(){  Object oo=get_Value(COLUMNNAME_IsFullyDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void serveRequest(HttpServletRequest request,HttpServletResponse response,Fingerprint fingerprint) throws ServletException, IOException {  CharacteristicsBean chrsBean=new CharacteristicsBean();  UniquenessBean uniquenessBean=new UniquenessBean();  ImmutablePair<Integer,String> sampleIds=FingerprintDAO.processFingerprint(fingerprint,request.getSession(false),chrsBean,uniquenessBean);  if (sampleIds == null) {    response.sendError(500);    return;  }  String sampleUUID=sampleIds.right;  request.setAttribute("sampleUUID",sampleUUID);  request.setAttribute("chrsBean",chrsBean);  request.setAttribute("uniquenessBean",uniquenessBean);  SampleIDs.saveSampleSetID(response,fingerprint.getSampleSetID(),getServletContext());  request.getRequestDispatcher("/WEB-INF/output.jsp").forward(request,response);}  }
class C{  public void destroy(){  this.shouldDestroy.set(true);}  }
class C{  @SuppressWarnings("rawtypes") public static Class storageSystemClass(String systemType){  if (systemType.equals(StorageSystem.Type.isilon.toString()) || systemType.equals(StorageSystem.Type.vnxfile.toString()) || systemType.equals(StorageSystem.Type.netapp.toString())|| systemType.equals(StorageSystem.Type.netappc.toString())|| systemType.equals(StorageSystem.Type.vnxe.toString())|| systemType.equals(StorageSystem.Type.unity.toString())) {    return FileController.class;  } else   if (systemType.equals(StorageSystem.Type.rp.toString())) {    return RPController.class;  } else   if (systemType.equals(StorageSystem.Type.ecs.toString())) {    return ObjectController.class;  }  return BlockController.class;}  }
class C{  public static WeblogicXml parseWeblogicXml(InputStream input) throws IOException, JDOMException {  WeblogicXmlIo io=new WeblogicXmlIo();  return (WeblogicXml)io.parseXml(input);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  @Override public boolean isRunning(){  return !isPaused;}  }
class C{  public void addYTextLabel(double y,String text){  addYTextLabel(y,text,0);}  }
class C{  public Object[] toArray(Object[] a){  if (a.length < size) {    a=(Object[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  System.arraycopy(elementData,0,a,0,size);  if (a.length > size) {    a[size]=null;  }  return a;}  }
class C{  public static <U extends Key<?>>NameMatcher<U> nameContains(String compareTo){  return new NameMatcher<U>(compareTo,StringOperatorName.CONTAINS);}  }
class C{  public void onMarkReferenced(PsiElement what,PsiElement from,boolean referencedFromClassInitializer){}  }
class C{  public void cancel(){  if (DEBUG)   Log.d(TAG,"cancel()");  mHandler.sendEmptyMessage(MSG_CANCEL);}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  reset();  getCapabilities().testWithFail(data);  m_data=new Instances(data,0);  data=new Instances(data);  m_wordsPerClass=new double[data.numClasses()];  m_probOfClass=new double[data.numClasses()];  m_probOfWordGivenClass=new HashMap<Integer,LinkedHashMap<String,Count>>();  double laplace=1.0;  for (int i=0; i < data.numClasses(); i++) {    LinkedHashMap<String,Count> dict=new LinkedHashMap<String,Count>(10000 / data.numClasses());    m_probOfWordGivenClass.put(i,dict);    m_probOfClass[i]=laplace;    m_wordsPerClass[i]=0;  }  for (int i=0; i < data.numInstances(); i++) {    updateClassifier(data.instance(i));  }  if (data.numInstances() > 0) {    pruneDictionary(true);  }}  }
class C{  public static KindName kindName(Symbol sym){switch (sym.getKind()) {case PACKAGE:    return KindName.PACKAGE;case ENUM:  return KindName.ENUM;case ANNOTATION_TYPE:case CLASS:return KindName.CLASS;case INTERFACE:return KindName.INTERFACE;case TYPE_PARAMETER:return KindName.TYPEVAR;case ENUM_CONSTANT:case FIELD:case PARAMETER:case LOCAL_VARIABLE:case EXCEPTION_PARAMETER:case RESOURCE_VARIABLE:return KindName.VAR;case CONSTRUCTOR:return KindName.CONSTRUCTOR;case METHOD:return KindName.METHOD;case STATIC_INIT:return KindName.STATIC_INIT;case INSTANCE_INIT:return KindName.INSTANCE_INIT;default :if (sym.kind == VAL) return KindName.VAL; else throw new AssertionError("Unexpected kind: " + sym.getKind());}}  }
class C{  public static void launchRcsService(Context context,boolean boot,boolean user,RcsSettings rcsSettings){  Logger.sActivationFlag=rcsSettings.isTraceActivated();  Logger.traceLevel=rcsSettings.getTraceLevel();  if (rcsSettings.isServiceActivated()) {    StartService.LaunchRcsStartService(context,boot,user);  }}  }
class C{  public void addCertificate(byte[] x509certificateBytes){  this.add(new XMLX509Certificate(this.doc,x509certificateBytes));}  }
class C{  public boolean isGroupChatSupported() throws RcsGenericException {  try {    return mIConfig.isGroupChatSupported();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void wakeEvery(long period,AlarmListener al){  itsListeners.put(al,new Long(period));}  }
class C{  static public int round(float x){  return (int)(x + BIG_ENOUGH_ROUND) - BIG_ENOUGH_INT;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public static boolean isOnProperty(TemplateCall templateCall,Property onProperty){  return templateCall.hasProperty(SPL.predicate,onProperty) && JenaUtil.hasIndirectType(templateCall,SPL.PropertyConstraintTemplates);}  }
class C{  public static boolean isRPUnManagedVolumeInImageAccessState(UnManagedVolume unManagedVolume){  boolean isImageAccessState=false;  String rpAccessState=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_ACCESS_STATE.toString(),unManagedVolume.getVolumeInformation());  if (GetCopyAccessStateResponse.ENABLING_LOGGED_ACCESS.name().equals(rpAccessState) || GetCopyAccessStateResponse.ENABLING_VIRTUAL_ACCESS.name().equals(rpAccessState) || GetCopyAccessStateResponse.LOGGED_ACCESS.name().equals(rpAccessState)|| GetCopyAccessStateResponse.LOGGED_ACCESS_ROLL_COMPLETE.name().equals(rpAccessState)|| GetCopyAccessStateResponse.VIRTUAL_ACCESS.equals(rpAccessState)|| GetCopyAccessStateResponse.VIRTUAL_ACCESS_ROLLING_IMAGE.name().equals(rpAccessState)|| GetCopyAccessStateResponse.DIRECT_ACCESS.name().equals(rpAccessState)) {    isImageAccessState=true;  }  return isImageAccessState;}  }
class C{  @Override public final long fileLength(String name) throws IOException {  ensureOpen();  RAMFile file=fileMap.get(name);  if (file == null) {    throw new FileNotFoundException(name);  }  return file.getLength();}  }
class C{  public void clearEventLog(String tenant) throws ClientException, ClientProtocolException, WebApplicationException, HttpException, IOException {  URI uri=buildURI(parent.getHostRetriever(),EVENT_LOG_URI,tenant);  HttpDeleteWithBody delete=RequestFactory.createDeleteRequest(uri,parent.getToken());  execute(parent.getClient(),delete);}  }
class C{  public void dispose(){  memorySectionBox.removeItemListener(memoryBoxListener);  debugPerspectiveModel.removeListener(debugListener);  final IDebugger activeDebugger=debugPerspectiveModel.getCurrentSelectedDebugger();  if (activeDebugger != null) {    synchronizeThreads(activeDebugger.getProcessManager().getActiveThread(),null);  }  synchronizeDebugger(debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  public static final void warning(String message,Throwable e){  if (message == null && e != null) {    message=e.getMessage();  }  logExpensive(Level.WARNING,message,e);}  }
class C{  public BitField(int size){  bits=new int[(((size) - 1) >>> 0x5) + 1];}  }
class C{  @Override public void clear(){  this.entities.clear();}  }
class C{  public boolean isStatistics(){  return logger.isLoggable(Level.STATISTICS);}  }
class C{  public void restoreActionBar(){  ActionBar actionBar=getSupportActionBar();  if (actionBar != null) {    actionBar.setDisplayShowTitleEnabled(true);    actionBar.setTitle(mTitle);  }}  }
class C{  @RequestProcessing(value="/post",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showAddArticle(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/home/post.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final Auth auth=Auth.create(Symphonys.get("qiniu.accessKey"),Symphonys.get("qiniu.secretKey"));  final String uploadToken=auth.uploadToken(Symphonys.get("qiniu.bucket"));  dataModel.put("qiniuUploadToken",uploadToken);  dataModel.put("qiniuDomain",Symphonys.get("qiniu.domain"));  if (!Symphonys.getBoolean("qiniu.enabled")) {    dataModel.put("qiniuUploadToken","");  }  String tags=request.getParameter(Tag.TAGS);  if (StringUtils.isBlank(tags)) {    tags="";    dataModel.put(Tag.TAGS,tags);  } else {    tags=articleMgmtService.formatArticleTags(tags);    final String[] tagTitles=tags.split(",");    final StringBuilder tagBuilder=new StringBuilder();    for (    final String title : tagTitles) {      final String tagTitle=title.trim();      if (Strings.isEmptyOrNull(tagTitle)) {        continue;      }      if (!Tag.TAG_TITLE_PATTERN.matcher(tagTitle).matches()) {        continue;      }      if (Strings.isEmptyOrNull(tagTitle) || tagTitle.length() > Tag.MAX_TAG_TITLE_LENGTH || tagTitle.length() < 1) {        continue;      }      final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);      if (!Role.ADMIN_ROLE.equals(currentUser.optString(User.USER_ROLE)) && ArrayUtils.contains(Symphonys.RESERVED_TAGS,tagTitle)) {        continue;      }      tagBuilder.append(tagTitle).append(",");    }    if (tagBuilder.length() > 0) {      tagBuilder.deleteCharAt(tagBuilder.length() - 1);    }    dataModel.put(Tag.TAGS,tagBuilder.toString());  }  final String type=request.getParameter(Common.TYPE);  if (StringUtils.isBlank(type)) {    dataModel.put(Article.ARTICLE_TYPE,Article.ARTICLE_TYPE_C_NORMAL);  } else {    int articleType=Article.ARTICLE_TYPE_C_NORMAL;    try {      articleType=Integer.valueOf(type);    } catch (    final Exception e) {      LOGGER.log(Level.WARN,"Gets article type error [" + type + "]",e);    }    if (Article.isInvalidArticleType(articleType)) {      articleType=Article.ARTICLE_TYPE_C_NORMAL;    }    dataModel.put(Article.ARTICLE_TYPE,articleType);  }  if (Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH == (Integer)dataModel.get(Article.ARTICLE_TYPE)) {    dataModel.put(Article.ARTICLE_TITLE,DateFormatUtils.format(System.currentTimeMillis(),"yyyy-MM-dd"));  }  final String at=request.getParameter(Common.AT);  if (StringUtils.isNotBlank(at)) {    dataModel.put(Common.AT,at);  }  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public frameset removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public PopupMenuPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.NO_CACHING);}  }
class C{  public StackMapTableEntry(final int byte_code_offset,final int number_of_locals,final StackMapType[] types_of_locals,final int number_of_stack_items,final StackMapType[] types_of_stack_items,final ConstantPool constant_pool){  this.byte_code_offset=byte_code_offset;  this.types_of_locals=types_of_locals != null ? types_of_locals : new StackMapType[0];  this.types_of_stack_items=types_of_stack_items != null ? types_of_stack_items : new StackMapType[0];  this.constant_pool=constant_pool;}  }
class C{  private boolean doStringAVM(String oldString) throws SolverTimeoutException {  boolean improvement=false;  for (int i=0; i < oldString.length(); i++) {    if (isFinished()) {      throw new SolverTimeoutException();    }    log.info("Current character: " + i);    if (doCharacterAVM(i))     improvement=true;  }  return improvement;}  }
class C{  public boolean evaluateEarly(){  return true;}  }
class C{  @PreRemove public void preRemove(final Object entity){  notifyAll(null);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public boolean isImmediateUpdateSemantics(){  return getEnvVariable("update_semantics").equals("immediate");}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  public void encodeBegin(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  String id=component.getId();  Object value=((ValueHolder)component).getValue();  GameBoard board=(GameBoard)value;  writer.write(id + "=");  for (int i=0; i < board.getRows(); i++) {    if (i > 0) {      writer.write("+");    }    for (int j=0; j < board.getColumns(); j++) {      int cellValue=board.getCellValue(i,j);      boolean visited=false;      if (((cellValue & GameBoard.CLIENT_PLAYER) != 0) || ((cellValue & GameBoard.SERVER_PLAYER) != 0)) {        visited=true;      }      if (visited) {        writer.write('0' + cellValue);      } else {        writer.write('0');      }    }  }}  }
class C{  public static void reverseDisplay(String value){  reverseDisplay(value,value.length() - 1);}  }
class C{  public static JCas runTest(AnalysisEngineDescription aEngine,String aLanguage,String aDocument) throws UIMAException {  return runTest(createEngine(aEngine),aLanguage,aDocument);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.242 -0400",hash_original_method="CD2829CDE96B6ED8A5F4CBF7F6F67CA5",hash_generated_method="1AD03001AC524799F2E5DDE5E1DA5EF9") @Override public Writer append(CharSequence csq,int start,int end){  return this;}  }
class C{  public Object invokeMethod(String name,Object[] args) throws EvalError {  return invokeMethod(name,args,null,null,null,false);}  }
class C{  public void annotationRemoved(Annotation annotation){  annotationRemoved(annotation,null);}  }
class C{  public double nextDouble(double mean,double standardDeviation){  if (cacheFilled && this.mean == mean && this.standardDeviation == standardDeviation) {    cacheFilled=false;    return cache;  }  ;  double x, y, r, z;  do {    x=2.0 * randomGenerator.nextDouble() - 1.0;    y=2.0 * randomGenerator.nextDouble() - 1.0;    r=x * x + y * y;  } while (r >= 1.0);  z=Math.sqrt(-2.0 * Math.log(r) / r);  cache=mean + standardDeviation * x * z;  cacheFilled=true;  return mean + standardDeviation * y * z;}  }
class C{  public boolean isRoot(){  return root;}  }
class C{  public static void maintain(Properties ctx){  List<MLanguage> list=new Query(ctx,Table_Name,"IsSystemLanguage=? AND IsBaseLanguage=?",null).setParameters(true,false).setOnlyActiveRecords(true).list();  for (  MLanguage language : list) {    language.maintain(true);  }}  }
class C{  public void subscribeTo(final K key,final Subscriber<V> subscriber){  registered.get(key).stream().subscribe(subscriber);}  }
class C{  public boolean isRegularExpression(){  return (this.interestType == TP_REGEX);}  }
class C{  public void testRemoveAll(){  for (int i=1; i < SIZE; ++i) {    LinkedBlockingQueue q=populatedQueue(SIZE);    LinkedBlockingQueue p=populatedQueue(i);    assertTrue(q.removeAll(p));    assertEquals(SIZE - i,q.size());    for (int j=0; j < i; ++j) {      Integer I=(Integer)(p.remove());      assertFalse(q.contains(I));    }  }}  }
class C{  private void initTrees(ActivityFacilities facilities,DestinationChoiceConfigGroup config){  log.info("Doing location choice for activities: " + defineFlexibleActivities.getFlexibleTypes().toString());  TreesBuilder treesBuilder=new TreesBuilder(defineFlexibleActivities.getFlexibleTypes(),this.scenario.getNetwork(),config);  treesBuilder.setActTypeConverter(actTypeConverter);  treesBuilder.createTrees(facilities);  this.facilitiesOfType=treesBuilder.getFacilitiesOfType();  this.quadTreesOfType=treesBuilder.getQuadTreesOfType();}  }
class C{  public static void log_diffs(Logger log,List<Unit> orig_chain,SootMethod meth){  if (!log.isInfoEnabled())   return;  Chain<Unit> new_chain=meth.getActiveBody().getUnits();  boolean modified=new_chain.size() != orig_chain.size();  if (!modified) {    Iterator<Unit> newit=new_chain.iterator();    for (    Unit orig_u : orig_chain) {      Unit new_u=newit.next();      modified=orig_u != new_u;      if (modified)       break;    }  }  if (modified) {    log.info("Modified method {}",meth.getName());    log.info("Original Method:");    for (    Unit u : orig_chain)     log.info("  {}",u);    log.info("New Method");    for (    Unit u : new_chain) {      log.info("  {}",u);    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.455 -0500",hash_original_method="91B9FA80E0031C77B528C608AC4759E5",hash_generated_method="E6943E699166CD8D0B5A859437A889EA") void configureViewAnimator(int numVisibleViews,int activeOffset){  if (activeOffset > numVisibleViews - 1) {  }  mMaxNumActiveViews=numVisibleViews;  mActiveOffset=activeOffset;  mPreviousViews.clear();  mViewsMap.clear();  removeAllViewsInLayout();  mCurrentWindowStart=0;  mCurrentWindowEnd=-1;}  }
class C{  protected boolean mustGenerateShortTitle(Font titleFont,int titleAreaWidth){  return this.shortTitle == null || !titleFont.equals(this.shortFrameTitleFont) || titleAreaWidth != this.frameTitleWidth;}  }
class C{  public void onCreate(Bundle savedInstanceState){  Session session=Session.getActiveSession();  if (session == null) {    if (savedInstanceState != null) {      session=Session.restoreSession(activity,null,callback,savedInstanceState);    }    if (session == null) {      session=new Session(activity);    }    Session.setActiveSession(session);  }  if (savedInstanceState != null) {    pendingFacebookDialogCall=savedInstanceState.getParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY);  }}  }
class C{  public synchronized StreamScope<?> lookup(String name){  return byNameMap.get(name);}  }
class C{  protected void removeBackground(PositionableLabel b){  for (int i=0; i < backgroundImage.size(); i++) {    if (b == backgroundImage.get(i)) {      backgroundImage.remove(i);      setDirty(true);      return;    }  }}  }
class C{  public void create(View view){  ForumConfig instance=new ForumConfig();  saveProperties(instance);  Spinner spin=(Spinner)findViewById(R.id.postModeSpin);  instance.postAccessMode=(String)spin.getSelectedItem();  spin=(Spinner)findViewById(R.id.replyModeSpin);  instance.replyAccessMode=(String)spin.getSelectedItem();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.948 -0500",hash_original_method="02E069F093A33F917985EC0A146AF5DF",hash_generated_method="0A0A0938FE87EB252E42E40EFC5D116F") private void fireSharedTimer(){  mHasInstantTimer=false;  sharedTimerFired();}  }
class C{  public void keyReleased(KeyEvent e){  log.finest("Key=" + e.getKeyCode() + " - "+ e.getKeyChar()+ " -> "+ getText());  if (e.getKeyCode() == KeyEvent.VK_ESCAPE)   setText(m_initialText);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CONTINUE_STATEMENT__LABEL:    if (resolve)     return getLabel();  return basicGetLabel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void writeToElement(Element rootElement){  for (  String packageName : packageNameToPrefix.keys()) {    for (    String prefix : packageNameToPrefix.getElements(packageName)) {      rootElement.setAttributeNS(UiBinderConstants.XMLNS_NAMESPACE,UiBinderConstants.XMLNS_PREFIX + ":" + prefix,UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING + packageName);    }  }}  }
class C{  public float textAscent(){  return g.textAscent();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS02.class,args);}  }
class C{  public static float cos2(float fValue){  return sin2(fValue + HALF_PI);}  }
class C{  @Override void addCertToPath(X509Certificate cert,LinkedList<X509Certificate> certPathList){  certPathList.addFirst(cert);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean checkMandatory(){  log.config("VPayment.checkMandatory");  ValueNamePair vp=paymentCombo.getSelectedItem().toValueNamePair();  String PaymentRule=vp.getValue();  if (m_onlyRule)   return true;  int C_BankAccount_ID=0;  boolean dataOK=true;  if (PaymentRule.equals(MOrder.PAYMENTRULE_Cash)) {    if (m_Cash_As_Payment) {      ListItem selected=bBankAccountCombo.getSelectedItem();      KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;      if (kp != null)       C_BankAccount_ID=kp.getKey();    }  } else   if (PaymentRule.equals(MOrder.PAYMENTRULE_CreditCard)) {  } else   if (PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDeposit) || PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDebit)) {    ListItem selected=tAccountCombo.getSelectedItem();    KeyNamePair bpba=selected != null ? selected.toKeyNamePair() : null;    if (bpba == null) {      FDialog.error(m_WindowNo,this,"PaymentBPBankNotFound");      dataOK=false;    }  } else   if (PaymentRule.equals(X_C_Order.PAYMENTRULE_OnCredit)) {  } else   if (PaymentRule.equals(MOrder.PAYMENTRULE_Check)) {    ListItem selected=sBankAccountCombo.getSelectedItem();    KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;    if (kp != null)     C_BankAccount_ID=kp.getKey();    String error=MPaymentValidate.validateRoutingNo(sRoutingField.getText());    if (error.length() != 0) {      FDialog.error(m_WindowNo,this,error);      dataOK=false;    }    error=MPaymentValidate.validateAccountNo(sNumberField.getText());    if (error.length() != 0) {      FDialog.error(m_WindowNo,this,error);      dataOK=false;    }    error=MPaymentValidate.validateCheckNo(sCheckField.getText());    if (error.length() != 0) {      FDialog.error(m_WindowNo,this,error);      dataOK=false;    }  } else {    log.log(Level.SEVERE,"Unknown PaymentRule " + PaymentRule);    return false;  }  if (("KTSD".indexOf(PaymentRule) != -1 || (PaymentRule.equals(MOrder.PAYMENTRULE_Cash) && m_Cash_As_Payment)) && C_BankAccount_ID == 0) {    if (C_BankAccount_ID == 0 && (PaymentRule.equals(MOrder.PAYMENTRULE_Check)) || (PaymentRule.equals(MOrder.PAYMENTRULE_Cash) && m_Cash_As_Payment)) {      FDialog.error(m_WindowNo,this,"FillMandatory",bBankAccountLabel.getValue());      dataOK=false;    }  }  log.config("OK=" + dataOK);  return dataOK;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodevalue.class,args);}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  private void loadProfile(String userId,String name){  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);  startActivity(userProfileIntent);}  }
class C{  protected AbstractMatrix3D vPart(int slice,int row,int column,int depth,int height,int width){  checkBox(slice,row,column,depth,height,width);  this.sliceZero+=this.sliceStride * slice;  this.rowZero+=this.rowStride * row;  this.columnZero+=this.columnStride * column;  this.slices=depth;  this.rows=height;  this.columns=width;  this.isNoView=false;  return this;}  }
class C{  public static double rawLogProbability(double x,double lambda){  if (lambda == 0) {    return ((x == 0) ? 1. : Double.NEGATIVE_INFINITY);  }  if (Double.isInfinite(lambda) || x < 0) {    return Double.NEGATIVE_INFINITY;  }  if (x <= lambda * Double.MIN_NORMAL) {    return -lambda;  }  if (lambda < x * Double.MIN_NORMAL) {    return -lambda + x * Math.log(lambda) - GammaDistribution.logGamma(x + 1);  }  final double f=MathUtil.TWOPI * x;  final double y=-stirlingError(x) - devianceTerm(x,lambda);  return -0.5 * Math.log(f) + y;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return new Integer(sm.getType()); else   return null;}  }
class C{  public boolean supportsANSI92EntryLevelSQL() throws SQLException {  return true;}  }
class C{  public CstFieldRef(CstType definingClass,CstNat nat){  super(definingClass,nat);}  }
class C{  private void init(FileLocation loc,String defaultEnc) throws IOException {  if (loc == null) {    this.loc=FileLocation.create(DEFAULT_FILE_NAME);    charSet=defaultEnc == null ? getDefaultEncoding() : defaultEnc;    setLineSeparator(System.getProperty("line.separator"));  } else {    load(loc,defaultEnc);  }  if (this.loc.isLocalAndExists()) {    File file=new File(this.loc.getFileFullPath());    lastSaveOrLoadTime=file.lastModified();    setReadOnly(!file.canWrite());  } else {    lastSaveOrLoadTime=LAST_MODIFIED_UNKNOWN;    setReadOnly(false);  }  setDirty(false);}  }
class C{  private boolean doUpdateMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  final EntityTransaction transaction=entityManager.getTransaction();  try {    transaction.begin();    int updated=entityManager.createNamedQuery("updateMapping").setParameter("targetAddress",mapping).setParameter("user",user).setParameter("domain",domain).executeUpdate();    transaction.commit();    if (updated > 0) {      return true;    }  } catch (  PersistenceException e) {    getLogger().debug("Failed to update mapping",e);    if (transaction.isActive()) {      transaction.rollback();    }    throw new RecipientRewriteTableException("Unable to update mapping",e);  } finally {    entityManager.close();  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=1 * filterShape[a];              sum+=z * filterShape[a];              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          if ((n - 2) > 0) {            outputFile.setValue(row,col,(sum - min - max) / (n - 2));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void changeMode(boolean forward){  int wn=clientgui.mechD.wPan.getSelectedWeaponNum();  if (null == ce()) {    return;  }  Mounted m=ce().getEquipment(wn);  if ((m == null) || !m.getType().hasModes()) {    return;  }  final WeaponType wtype=(WeaponType)m.getType();  if ((ce() instanceof Dropship) && (wtype instanceof ArtilleryWeapon)) {    return;  }  int nMode=m.switchMode(forward);  clientgui.getClient().sendModeChange(cen,wn,nMode);  if (m.canInstantSwitch(nMode)) {    clientgui.systemMessage(Messages.getString("FiringDisplay.switched",new Object[]{m.getName(),m.curMode().getDisplayableName()}));  } else {    clientgui.systemMessage(Messages.getString("FiringDisplay.willSwitch",new Object[]{m.getName(),m.pendingMode().getDisplayableName()}));  }  updateTarget();  clientgui.mechD.wPan.displayMech(ce());  clientgui.mechD.wPan.selectWeapon(wn);}  }
class C{  public void write(int b) throws IOException {  if (len == buffer.length) {    flush();  }  buffer[len++]=(byte)(b & 0xff);  nwritten++;}  }
class C{  public ArrayIntCompressed(int[] ints,int offset,int length){  int mask=0x0;  for (int i=0; i < length; i++) {    mask|=ints[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,ints[offset + i]);  }}  }
class C{  public DefaultLmlParser(final LmlData data){  super(data,new DefaultLmlSyntax(),new DefaultLmlTemplateReader(),new DefaultLmlStyleSheet(),true);}  }
class C{  private boolean isAPriori(int varnum){  return (this.b.equals(this.m.entry.to) && varnum < this.m.getParams().length);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.962 -0500",hash_original_method="34082555FFD2A1D5F6DB38655C7C2C48",hash_generated_method="886C25356038296C284B1375A6AAF279") protected boolean scrollRight(TextView widget,Spannable buffer,int amount){  final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);  int scrollX=widget.getScrollX();  if (scrollX < maxScrollX) {    scrollX=Math.min(scrollX + getCharacterWidth(widget) * amount,maxScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static InputStream loadResource(String resourceFile){  InputStream stream=null;  try {    String file=localResourceDir + resourceFile;    if (!new File(file).exists()) {      log.debug("Loading {} from classpath",resourceFile);      List<URL> list=IOUtils.lsResources(ResourceUtilities.class,resourceFile);      if (list.isEmpty()) {        System.err.println("Could not load " + resourceFile);        System.exit(-1);      }      URL fileURL=list.get(0);      URLConnection connection=fileURL.openConnection();      stream=connection.getInputStream();    } else {      log.debug("Loading {} from local directory",resourceFile);      stream=new FileInputStream(file);    }    stream=checkGZipped(stream);  } catch (  Exception e) {    log.error("Could not load {}. Exception {}",resourceFile,e.toString());    System.exit(-1);  }  return stream;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public List<LPlatformDescriptor> listLPlatformDescriptors() throws IaasException {  HashMap<String,String> request=getBasicParameters();  request.put(LParameter.ACTION,LOperation.LIST_LPLATFORM_DESCR);  XMLConfiguration result=execute(request);  List<LPlatformDescriptor> resultList=new LinkedList<LPlatformDescriptor>();  if (result != null) {    List<HierarchicalConfiguration> descriptors=result.configurationsAt("lplatformdescriptors.lplatformdescriptor");    for (    HierarchicalConfiguration descriptor : descriptors) {      resultList.add(new LPlatformDescriptor(descriptor));    }  }  return resultList;}  }
class C{  public StringResponseHandler(String contentType,String response){  _contentType=contentType;  _response=response;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testAddressHostAndPortRange() throws Exception {  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999..10000"),true);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999..10000"),true);  check(new OdbcConfiguration().setEndpointAddress("127.0.0.1:9999..10000"),false);}  }
class C{  public void makeCall(View view){  String callNum=mCallNumET.getText().toString();  if (callNum.isEmpty() || callNum.equals(this.username)) {    showToast("Enter a valid user ID to call.");    return;  }  dispatchCall(callNum);}  }
class C{  public Task<HostRestRep> create(HostCreateParam input){  return create(input,false);}  }
class C{  public Matrix3f scale(float x,float y,float z){  return scale(x,y,z,this);}  }
class C{  public DrawerBuilder withStickyFooter(@LayoutRes int stickyFooterRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (stickyFooterRes != -1) {    this.mStickyFooterView=(ViewGroup)mActivity.getLayoutInflater().inflate(stickyFooterRes,null,false);  }  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.PRE_OR_POST_CONDITION___ANONYMOUS_PRE_OR_POST_CONDITION_11:    getAnonymous_PreOrPostCondition_1_1().clear();  getAnonymous_PreOrPostCondition_1_1().addAll((Collection<? extends String>)newValue);return;case UmplePackage.PRE_OR_POST_CONDITION___TRACE_CONDITION_1:getTraceCondition_1().clear();getTraceCondition_1().addAll((Collection<? extends TraceCondition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Deprecated public String asV1Beta2Path(){  if (type == Type.NORMAL) {    return "projects/" + project + "/topics/"+ topic;  } else {    return topic;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.durFormatPretty(getLong(stack));}  }
class C{  private void createCompressedRegion(final String regionName){  final Cache cache=getCache();  RegionFactory<String,Integer> dataRegionFactory=cache.createRegionFactory(RegionShortcut.REPLICATE);  dataRegionFactory.setCompressor(SnappyCompressor.getDefaultInstance());  dataRegionFactory.create(regionName);}  }
class C{  public CMemoryRangeDialog(final JFrame owner){  super(owner,"Enter a memory range",true);  setLayout(new BorderLayout());  setSize(400,170);  final JLabel startLabel=new JLabel("Start Address (Hex)");  final JLabel endLabel=new JLabel("Number of Bytes (Hex)");  m_startField=new JFormattedTextField(new CHexFormatter(8));  m_endField=new JFormattedTextField(new CHexFormatter(8));  final JPanel labelPanel=new JPanel(new GridBagLayout());  final GridBagConstraints constraints=new GridBagConstraints();  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=0.2;  constraints.insets=new Insets(5,5,0,0);  constraints.fill=GridBagConstraints.HORIZONTAL;  labelPanel.add(startLabel,constraints);  constraints.gridx=1;  constraints.gridy=0;  constraints.weightx=1;  constraints.insets=new Insets(5,0,0,0);  labelPanel.add(m_startField,constraints);  constraints.gridx=0;  constraints.gridy=1;  constraints.weightx=0.2;  constraints.insets=new Insets(5,5,0,0);  labelPanel.add(endLabel,constraints);  constraints.gridx=1;  constraints.gridy=1;  constraints.weightx=1;  constraints.insets=new Insets(5,0,0,0);  labelPanel.add(m_endField,constraints);  final JPanel topPanel=new JPanel(new BorderLayout());  final JTextArea area=new JTextArea("Please enter a memory range to display. \nBe careful. Displaying invalid memory can crash the device.");  area.setBorder(new EmptyBorder(0,5,0,0));  area.setEditable(false);  topPanel.add(area,BorderLayout.NORTH);  topPanel.add(labelPanel,BorderLayout.CENTER);  topPanel.setBorder(new TitledBorder(new LineBorder(Color.BLACK)));  final CPanelTwoButtons buttonPanel=new CPanelTwoButtons(new InternalListener(),"OK","Cancel");  add(topPanel,BorderLayout.NORTH);  add(buttonPanel,BorderLayout.SOUTH);  m_startField.requestFocusInWindow();  final InputMap windowImap=getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(HotKeys.APPLY_HK.getKeyStroke(),"APPLY");  getRootPane().getActionMap().put("APPLY",CActionProxy.proxy(new ApplyAction()));  setLocationRelativeTo(null);}  }
class C{  public String revert(String uri){  if (uri.startsWith("/")) {    return directory + uri.substring(1);  } else {    return uri;  }}  }
class C{  public void readDocs(Document[] docs,DocList ids,Set<String> fields) throws IOException {  DocIterator iter=ids.iterator();  for (int i=0; i < docs.length; i++) {    docs[i]=doc(iter.nextDoc(),fields);  }}  }
class C{  public GeneratingClassLoader(){  super(null);}  }
class C{  public void forEachVMInvoke(Class<?> targetClass,String methodName,Object[] args){  Host host=Host.getHost(0);  int vmCount=host.getVMCount();  for (int i=0; i < vmCount; i++) {    LogWriterUtils.getLogWriter().info("Invoking " + methodName + "on VM#"+ i);    host.getVM(i).invoke(targetClass,methodName,args);  }}  }
class C{  public void testCFII_ServerStartLater_NonBlock() throws Exception {  ensureServerClosed();  this.channel1.configureBlocking(false);  statusNotConnected_NotPending();  assertFalse(this.channel1.connect(localAddr1));  statusNotConnected_Pending();  ensureServerOpen();  try {    assertFalse(this.channel1.finishConnect());    statusNotConnected_Pending();    this.channel1.close();  } catch (  ConnectException e) {  }}  }
class C{  public void addAttribute(String attr){  addAttribute(attr,"");}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("quantity")) {    quantity=changes.getInt("quantity");    fireChange(PROP_QUANTITY);  }}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return true;}  }
class C{  public Binh4(){  super(2,3,2);}  }
class C{  public StackMapTable toStackMapTable(ConstPool cp){  return new StackMapTable(cp,toByteArray());}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  public boolean userHasGivenRole(StorageOSUser user,URI tenantId,Role... roles){  if (_disabler != null) {    return true;  }  Set<String> tenantRoles=null;  for (  Role role : roles) {    if (user.getRoles().contains(role.toString())) {      return true;    } else     if (isRoleTenantLevel(role.toString())) {      if (tenantRoles == null) {        tenantRoles=getTenantRolesForUser(user,tenantId,false);      }      if (tenantRoles.contains(role.toString())) {        return true;      }    }  }  return false;}  }
class C{  public void upload(File zippedFile){  throw new UnsupportedOperationException();}  }
class C{  @Override public int exec(){  int count=0;  try {    if (stmt != null) {      if (stmt instanceof PreparedStatement) {        PreparedStatement pstmt=(PreparedStatement)stmt;        for (int i=0; i < params.size(); i++) {          pstmt.setObject(i + 1,params.get(i));        }        count=pstmt.executeUpdate();        return count;      } else {        if (!strSql.equals("")) {          count=stmt.executeUpdate(strSql);          return count;        }      }    }  } catch (  Exception e) {    this.oManager.deBugInfo(e.getMessage());  }  return count;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static long shallowSizeOf(Object obj){  if (obj == null)   return 0;  final Class<?> clz=obj.getClass();  if (clz.isArray()) {    return shallowSizeOfArray(obj);  } else {    return shallowSizeOfInstance(clz);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (stateName_1: ");  result.append(stateName_1);  result.append(", final_1: ");  result.append(final_1);  result.append(')');  return result.toString();}  }
class C{  private void _deserializeQueryField(Query query,Element field) throws PageException, ConverterException {  String name=field.getAttribute("name");  NodeList list=field.getChildNodes();  int len=list.getLength();  int count=0;  for (int i=0; i < len; i++) {    Node node=list.item(i);    if (node instanceof Element) {      query.setAt(KeyImpl.init(name),++count,_deserialize((Element)node));    }  }}  }
class C{  public void putInt(String key,int value){  editor.putInt(key,value);  editor.apply();}  }
class C{  private void execServiceShut(){  ExecutorService execService=executor.getExecService();  execService.shutdown();  try {    execService.awaitTermination(120,TimeUnit.SECONDS);  } catch (  Exception e) {    _logger.info("TimeOut occured after waiting Client Threads to finish");  }}  }
class C{  public JDBCXYDataset(Connection con) throws SQLException {  this();  this.connection=con;}  }
class C{  public long available() throws IOException {  return (is.available() + avail) * 8 + fill;}  }
class C{  public void addEntries(ClassLoader ldr,Iterable<IgniteTxEntry> entries) throws IgniteCheckedException {  for (  IgniteTxEntry entry : entries) {    entry.unmarshal(cctx,true,ldr);    addEntry(entry);  }}  }
class C{  private void restoreFavorite(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking favorite " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackFavorite(buffer,dataSize);  cr.insert(Favorites.CONTENT_URI,values);}  }
class C{  @SuppressWarnings("RedundantNoArgConstructor") public RangeGroup(){  super();}  }
class C{  private void test(String type) throws Exception {  compareCount.set(0);  clazz.getMethod("sort",Object[].class,Comparator.class).invoke(null,array,comp);  verify(array);}  }
class C{  public void detectAndSendChanges(){  super.detectAndSendChanges();  for (int i=0; i < this.crafters.size(); ++i) {    ICrafting icrafting=(ICrafting)this.crafters.get(i);    icrafting.sendProgressBarUpdate(this,1,this.entity.storage.getEnergyStored());    icrafting.sendProgressBarUpdate(this,2,this.entity.HLevel);    icrafting.sendProgressBarUpdate(this,3,this.entity.DLevel);    icrafting.sendProgressBarUpdate(this,4,this.entity.TLevel);    icrafting.sendProgressBarUpdate(this,5,this.entity.HeLevel);    icrafting.sendProgressBarUpdate(this,6,this.entity.BLevel);    icrafting.sendProgressBarUpdate(this,7,this.entity.Li6Level);    icrafting.sendProgressBarUpdate(this,8,this.entity.Li7Level);    icrafting.sendProgressBarUpdate(this,9,this.entity.HLevel2);    icrafting.sendProgressBarUpdate(this,10,this.entity.DLevel2);    icrafting.sendProgressBarUpdate(this,11,this.entity.TLevel2);    icrafting.sendProgressBarUpdate(this,12,this.entity.HeLevel2);    icrafting.sendProgressBarUpdate(this,13,this.entity.BLevel2);    icrafting.sendProgressBarUpdate(this,14,this.entity.Li6Level2);    icrafting.sendProgressBarUpdate(this,15,this.entity.Li7Level2);    icrafting.sendProgressBarUpdate(this,16,this.entity.storage.getEnergyStored() >> 16);    icrafting.sendProgressBarUpdate(this,17,this.entity.HLevel >> 16);    icrafting.sendProgressBarUpdate(this,18,this.entity.DLevel >> 16);    icrafting.sendProgressBarUpdate(this,19,this.entity.TLevel >> 16);    icrafting.sendProgressBarUpdate(this,20,this.entity.HeLevel >> 16);    icrafting.sendProgressBarUpdate(this,21,this.entity.BLevel >> 16);    icrafting.sendProgressBarUpdate(this,22,this.entity.Li6Level >> 16);    icrafting.sendProgressBarUpdate(this,23,this.entity.Li7Level >> 16);    icrafting.sendProgressBarUpdate(this,24,this.entity.HLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,25,this.entity.DLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,26,this.entity.TLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,27,this.entity.HeLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,28,this.entity.BLevel2 >> 16);    icrafting.sendProgressBarUpdate(this,29,this.entity.Li6Level2 >> 16);    icrafting.sendProgressBarUpdate(this,30,this.entity.Li7Level2 >> 16);    icrafting.sendProgressBarUpdate(this,31,this.entity.SShown);    icrafting.sendProgressBarUpdate(this,32,this.entity.SShown >> 16);    icrafting.sendProgressBarUpdate(this,33,this.entity.size);    icrafting.sendProgressBarUpdate(this,34,this.entity.size >> 16);    icrafting.sendProgressBarUpdate(this,37,(int)this.entity.efficiency);    icrafting.sendProgressBarUpdate(this,38,(int)this.entity.efficiency >> 16);    icrafting.sendProgressBarUpdate(this,39,(int)this.entity.heat);    icrafting.sendProgressBarUpdate(this,40,(int)this.entity.heat >> 16);    icrafting.sendProgressBarUpdate(this,41,(int)this.entity.heatVar);    icrafting.sendProgressBarUpdate(this,42,(int)this.entity.heatVar >> 16);    icrafting.sendProgressBarUpdate(this,43,(int)this.entity.HOut);    icrafting.sendProgressBarUpdate(this,44,(int)this.entity.HOut >> 16);    icrafting.sendProgressBarUpdate(this,45,(int)this.entity.DOut);    icrafting.sendProgressBarUpdate(this,46,(int)this.entity.DOut >> 16);    icrafting.sendProgressBarUpdate(this,47,(int)this.entity.TOut);    icrafting.sendProgressBarUpdate(this,48,(int)this.entity.TOut >> 16);    icrafting.sendProgressBarUpdate(this,49,(int)this.entity.HE3Out);    icrafting.sendProgressBarUpdate(this,50,(int)this.entity.HE3Out >> 16);    icrafting.sendProgressBarUpdate(this,51,(int)this.entity.HE4Out);    icrafting.sendProgressBarUpdate(this,52,(int)this.entity.HE4Out >> 16);    icrafting.sendProgressBarUpdate(this,53,(int)this.entity.nOut);    icrafting.sendProgressBarUpdate(this,54,(int)this.entity.nOut >> 16);    icrafting.sendProgressBarUpdate(this,55,this.entity.complete);    icrafting.sendProgressBarUpdate(this,56,this.entity.complete >> 16);    icrafting.sendProgressBarUpdate(this,57,this.entity.tank.getFluidAmount());    icrafting.sendProgressBarUpdate(this,58,this.entity.tank.getFluidAmount() >> 16);    icrafting.sendProgressBarUpdate(this,59,(int)this.entity.steam);    icrafting.sendProgressBarUpdate(this,60,(int)this.entity.steam >> 16);  }}  }
