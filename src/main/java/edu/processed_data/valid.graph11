class C{  @Override public void dispose(){}  }
class C{  public void toString(StringBuilder buffer){  if (list != null && !list.isEmpty()) {    for (    Entry<DN,ServerState> entry : list.entrySet()) {      buffer.append(entry.getKey());      buffer.append(":");      entry.getValue().toString(buffer);      buffer.append(";");    }  }}  }
class C{  public JLayeredPane(){  setLayout(null);}  }
class C{  public void testRemoveWithProxies(){  Object bean=new Object();  PropertyChangeSupport support=new PropertyChangeSupport(bean);  EventLog all=new EventLog();  support.addPropertyChangeListener(all);  assertEquals(1,support.getPropertyChangeListeners().length);  EventLog proxiedA=new EventLog();  support.addPropertyChangeListener(new PropertyChangeListenerProxy("a",proxiedA));  assertEquals(2,support.getPropertyChangeListeners().length);  EventLog addA=new EventLog();  support.addPropertyChangeListener("a",addA);  assertEquals(3,support.getPropertyChangeListeners().length);  EventLog addAProxiedB=new EventLog();  support.addPropertyChangeListener("a",new PropertyChangeListenerProxy("b",addAProxiedB));  assertEquals(4,support.getPropertyChangeListeners().length);  EventLog proxiedAB=new EventLog();  PropertyChangeListenerProxy proxyAB=new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("b",proxiedAB));  support.addPropertyChangeListener(proxyAB);  assertEquals(5,support.getPropertyChangeListeners().length);  EventLog proxiedAAC=new EventLog();  support.addPropertyChangeListener(new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("c",proxiedAAC))));  assertEquals(6,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(all);  assertEquals(5,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",proxiedA);  assertEquals(4,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(new PropertyChangeListenerProxy("a",addA));  assertEquals(3,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("b",addAProxiedB));  assertEquals(2,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(proxyAB);  assertEquals(1,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener(proxiedAAC);  support.removePropertyChangeListener(new PropertyChangeListenerProxy("a",proxiedAAC));  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("c",proxiedAAC));  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("c",new PropertyChangeListenerProxy("a",proxiedAAC)));  assertEquals(1,support.getPropertyChangeListeners().length);  support.removePropertyChangeListener("a",new PropertyChangeListenerProxy("a",new PropertyChangeListenerProxy("c",proxiedAAC)));  assertEquals(0,support.getPropertyChangeListeners().length);}  }
class C{  private MandatoryPropertyInitializer(ManagedObject<?> mo,PropertyDefinition<?> pd){  this.mo=mo;  this.pd=pd;}  }
class C{  private String appendCookieToReturnURL(String returnURL,String cookieValue){  String classMethod="CookieReaderServlet.appendCookieToReturnURL: ";  if (cookieValue == null || cookieValue.trim().length() <= 0) {    CookieUtils.debug.error(classMethod + "Preferred IDPCookie not found");  }  char delimiter;  StringBuffer returnBuffer=null;  if (returnURL.indexOf(IDPDiscoveryConstants.QUESTION_MARK) < 0) {    delimiter=IDPDiscoveryConstants.QUESTION_MARK;  } else {    delimiter=IDPDiscoveryConstants.AMPERSAND;  }  returnBuffer=new StringBuffer(100);  returnBuffer.append(returnURL);  returnBuffer.append(delimiter);  returnBuffer.append(preferred_cookie_name);  returnBuffer.append(IDPDiscoveryConstants.EQUAL_TO);  try {    returnBuffer.append(java.net.URLEncoder.encode(cookieValue,"UTF-8"));  } catch (  Exception e) {    CookieUtils.debug.error("CookieReaderServlet:" + "appendCookieToReturnURL" + e.getMessage());  }  if (CookieUtils.debug.messageEnabled()) {    CookieUtils.debug.message(classMethod + "Return URL = " + returnBuffer.toString());  }  return returnBuffer.toString();}  }
class C{  public StringBuffer insert(int index,float f){  return insert(index,Float.toString(f));}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String[] params={serverName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_SERVER",params);    if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      ServerConfiguration.deleteServerInstance(adminSSOToken,serverName);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-server-config-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-server-config-dont-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_SERVER",params);  } catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("DeleteServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("DeleteServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  private static int checkStartability(ArgumentParser argParser){  boolean isServerRunning;  BooleanArgument noDetach=(BooleanArgument)argParser.getArgumentForLongID("nodetach");  BooleanArgument quietMode=(BooleanArgument)argParser.getArgumentForLongID(ArgumentConstants.OPTION_LONG_QUIET);  BooleanArgument windowsNetStart=(BooleanArgument)argParser.getArgumentForLongID("windowsnetstart");  boolean noDetachPresent=noDetach.isPresent();  boolean windowsNetStartPresent=windowsNetStart.isPresent();  String lockFile=LockFileManager.getServerLockFileName();  try {    StringBuilder failureReason=new StringBuilder();    if (LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      LockFileManager.releaseLock(lockFile,failureReason);      isServerRunning=false;    } else {      System.err.println(ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,failureReason));      isServerRunning=true;    }  } catch (  Exception e) {    LocalizableMessage message=ERR_CANNOT_ACQUIRE_EXCLUSIVE_SERVER_LOCK.get(lockFile,getExceptionMessage(e));    System.err.println(message);    isServerRunning=true;  }  final boolean configuredAsWindowsService=isRunningAsWindowsService();  if (isServerRunning) {    if (configuredAsWindowsService && !windowsNetStartPresent) {      return START_AS_WINDOWS_SERVICE;    } else {      return SERVER_ALREADY_STARTED;    }  } else   if (configuredAsWindowsService) {    if (noDetachPresent) {      System.err.println(ERR_DSCORE_ERROR_NODETACH_AND_WINDOW_SERVICE.get());      return CHECK_ERROR;    } else     if (windowsNetStartPresent) {      return START_AS_DETACH_CALLED_FROM_WINDOWS_SERVICE;    } else {      return START_AS_WINDOWS_SERVICE;    }  } else   if (noDetachPresent) {    if (quietMode.isPresent()) {      return START_AS_NON_DETACH_QUIET;    } else {      return START_AS_NON_DETACH;    }  } else   if (quietMode.isPresent()) {    return START_AS_DETACH_QUIET;  } else {    return START_AS_DETACH;  }}  }
class C{  @Override public synchronized void write(byte[] b,int off,int len) throws IOException {  super.write(b,off,len);  this.branch.write(b,off,len);}  }
class C{  public NSObject parse() throws ParseException {  index=0;  if (data.length >= 3 && (data[0] & 0xFF) == 0xEF && (data[1] & 0xFF) == 0xBB && (data[2] & 0xFF) == 0xBF)   skip(3);  skipWhitespacesAndComments();  expect(DICTIONARY_BEGIN_TOKEN,ARRAY_BEGIN_TOKEN,COMMENT_BEGIN_TOKEN);  try {    return parseObject();  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new ParseException("Reached end of input unexpectedly.",index);  }}  }
class C{  protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings){  return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern.split(commaDelimitedStrings);}  }
class C{  public boolean compressData(){  return compressData;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  if (GcmHelper.DEBUG_ENABLED) {    Log.d(GcmHelper.TAG,"GcmMessagingListener From: " + from);    GcmHelper.printBundle(data);  }  GcmHelper.getInstance().messageReceived(getApplicationContext(),from,data);}  }
class C{  public void joinGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.join(groupAddr);}  }
class C{  public Member[] expire(long maxtime){synchronized (membersLock) {    if (!hasMembers()) {      return EMPTY_MEMBERS;    }    ArrayList<Member> list=null;    Iterator<MbrEntry> i=map.values().iterator();    while (i.hasNext()) {      MbrEntry entry=i.next();      if (entry.hasExpired(maxtime)) {        if (list == null) {          list=new java.util.ArrayList<>();        }        list.add(entry.getMember());      }    }    if (list != null) {      Member[] result=new Member[list.size()];      list.toArray(result);      for (int j=0; j < result.length; j++) {        removeMember(result[j]);      }      return result;    } else {      return EMPTY_MEMBERS;    }  }}  }
class C{  @Override public boolean isActive(SSOToken token,IdType type,String name) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("isActive invoked");  }  if (!type.equals(IdType.USER)) {    throw new IdRepoUnsupportedOpException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.PLUGIN_OPERATION_NOT_SUPPORTED,new Object[]{CLASS_NAME,IdOperation.READ.getName(),type.getName()});  }  if (alwaysActive) {    try {      return isExists(token,type,name);    } catch (    IdRepoException ide) {      return false;    }  }  Map<String,Set<String>> attrMap;  try {    attrMap=getAttributes(token,type,name,asSet(userStatusAttr));    attrMap=new CaseInsensitiveHashMap(attrMap);  } catch (  IdRepoException ire) {    return false;  }  String status=CollectionHelper.getMapAttr(attrMap,userStatusAttr);  if (status != null) {    return helper.isActive(status,activeValue);  } else {    return true;  }}  }
class C{  public License(final String filename,final String text){  if (filename == null) {    throw new NullPointerException("license file name is null");  }  if (filename.isEmpty()) {    throw new IllegalArgumentException("license file name is empty");  }  this.filename=filename;  if (text == null) {    throw new NullPointerException("license text is null");  }  if (text.isEmpty()) {    throw new IllegalArgumentException("license text is empty");  }  this.text=text;}  }
class C{  public void addChunk(final Chunk toAdd){  final List<Chunk> list=assertChunkList(toAdd.getGuid());  if (!list.isEmpty() && !MULTI_CHUNKS.contains(toAdd.getGuid())) {    throw new IllegalArgumentException("The GUID of the given chunk indicates, that there is no more instance allowed.");  }  list.add(toAdd);  assert chunkstartsUnique(this) : "Chunk has equal start position like an already inserted one.";}  }
class C{  @Override public int hashCode(){  int code=0;  if (eSubjects != null) {    for (    EntitlementSubject eSubject : eSubjects) {      code+=eSubject.hashCode();    }  }  if (pSubjectName != null) {    code+=pSubjectName.hashCode();  }  return code;}  }
class C{  protected void sendSessionReplicationMessage(Request request,ClusterManager manager){  Session session=request.getSessionInternal(false);  if (session != null) {    String uri=request.getDecodedRequestURI();    if (!isRequestWithoutSessionChange(uri)) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.invoke.uri",uri));      }      sendMessage(session,manager);    } else     if (doStatistics()) {      nrOfFilterRequests++;    }  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LegalNameElement createLegalNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LegalNameElementImpl();}  }
class C{  public byte[] computeUserPassword(){  if (!encrypted || !decrypt.isOpenedWithFullPermission())   return null;  return decrypt.computeUserPassword(properties.password);}  }
class C{  public ParagraphView(Element elem){  super(elem);}  }
class C{  @Override public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken){  try {    final String metaAlias=ssoToken.getProperty(SAML2Constants.METAALIAS);    final String sessionIndex=ssoToken.getProperty(SAML2Constants.SESSION_INDEX);    final String spEntityId=ssoToken.getProperty(SAML2Constants.SPENTITYID);    final String idpEntityId=ssoToken.getProperty(SAML2Constants.IDPENTITYID);    final String nameIdXML=ssoToken.getProperty(SAML2Constants.NAMEID);    final NameID nameId=new NameIDImplWithoutSPNameQualifier(nameIdXML);    final boolean isTransient=Boolean.parseBoolean(ssoToken.getProperty(Constants.IS_TRANSIENT));    final String requestId=ssoToken.getProperty(Constants.REQUEST_ID);    final SessionProvider sessionProvider=SessionManager.getProvider();    final NameIDInfo info=new NameIDInfo(spEntityId,idpEntityId,nameId,SAML2Constants.SP_ROLE,false);    final String ssOutEnabled=ssoToken.getProperty(SAML2Constants.SINGLE_LOGOUT);    final String cacheKey=ssoToken.getProperty(Constants.CACHE_KEY);    final String realm=DNMapper.orgNameToRealmName(ssoToken.getProperty(com.sun.identity.shared.Constants.ORGANIZATION));    SAML2ResponseData data=(SAML2ResponseData)SAML2Store.getTokenFromStore(cacheKey);    if (data == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {      data=(SAML2ResponseData)SAML2FailoverUtils.retrieveSAML2Token(cacheKey);    }    if (data == null) {      throw new SAML2Exception("Unable to retrieve response map from data cache.");    }    if (Boolean.parseBoolean(ssOutEnabled)) {      setupSingleLogOut(ssoToken,metaAlias,sessionIndex,spEntityId,idpEntityId,nameId);    }    configureIdpInitSLO(sessionProvider,ssoToken,sessionIndex,metaAlias,info,isTransient,requestId);    configurePostSSO(spEntityId,realm,request,response,ssoToken,sessionProvider,data.getResponseInfo(),cacheKey);    clearSession(ssoToken);  } catch (  SAML2Exception|SessionException|SSOException|SAML2TokenRepositoryException e) {    DEBUG.warning("Error saving SAML assertion information in memory. SLO not configured for this session.",e);  }}  }
class C{  public AuthnQuery createAuthnQuery(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_QUERY,value);  if (obj == null) {    return new AuthnQueryImpl(value);  } else {    return (AuthnQuery)obj;  }}  }
class C{  public void wordChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]|=CT_ALPHA;}  }
class C{  private void updateOver(boolean o){  boolean old=isRollover();  this.over=o && isEnabled();  boolean newo=isRollover();  if (shouldActLikeButton() && old != newo) {    comboBox.repaint();  }}  }
class C{  private void addElements(int numberOfElements){  int newlen=m_firstFree + numberOfElements;  if (newlen > m_blocksize) {    int index=m_firstFree >>> m_SHIFT;    int newindex=(m_firstFree + numberOfElements) >>> m_SHIFT;    for (int i=index + 1; i <= newindex; ++i)     m_map[i]=new int[m_blocksize];  }  m_firstFree=newlen;}  }
class C{  public void commitEdit() throws ParseException {  JComponent editor=getEditor();  if (editor instanceof DefaultEditor) {    ((DefaultEditor)editor).commitEdit();  }}  }
class C{  public Cursor fetch(Long appID){  if (appID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_APPID + "=" + appID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public static int[] intersectRanges(int[] range1,int[] range2){  if (range1 == null) {    return range2;  } else   if (range2 == null) {    return range1;  }  int[] outputRange=new int[range1.length + range2.length];  int outputIndex=0;  int index1=0, lower1, upper1;  int index2=0, lower2, upper2;  while (index1 < range1.length && index2 < range2.length) {    int newRangeLower=Integer.MIN_VALUE, newRangeUpper=Integer.MAX_VALUE;    lower1=range1[index1];    upper1=Integer.MAX_VALUE;    lower2=range2[index2];    upper2=Integer.MAX_VALUE;    if (index1 < range1.length - 1) {      upper1=range1[index1 + 1];    }    if (index2 < range2.length - 1) {      upper2=range2[index2 + 1];    }    if (lower1 < lower2) {      if (upper1 > lower2) {        newRangeLower=lower2;        if (upper1 > upper2) {          newRangeUpper=upper2;          index2+=2;        } else {          newRangeUpper=upper1;          index1+=2;        }      } else {        index1+=2;      }    } else {      if (upper2 > lower1) {        newRangeLower=lower1;        if (upper2 > upper1) {          newRangeUpper=upper1;          index1+=2;        } else {          newRangeUpper=upper2;          index2+=2;        }      } else {        index2+=2;      }    }    if (newRangeLower != Integer.MIN_VALUE) {      outputRange[outputIndex++]=newRangeLower;      if (newRangeUpper != Integer.MAX_VALUE) {        outputRange[outputIndex++]=newRangeUpper;      } else {        break;      }    }  }  return Arrays.copyOf(outputRange,outputIndex);}  }
class C{  public HTMLWriter(Writer w,HTMLDocument doc,int pos,int len){  super(w,doc,pos,len);  completeDoc=(pos == 0 && len == doc.getLength());  setLineLength(80);}  }
class C{  public LikeButton(Context context,boolean isLiked){  super(context);  this.isLiked=isLiked;  initialize();}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr);}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  toJSONObject(jo);  jo.put("key",key);  jo.put("value",value);  jo.put("pConditionName",pConditionName);  return jo;}  }
class C{  private ResolvedServer update(ResolvedServer server){  final String resolvedServer=server.getResolvedServer();  if (serverToSite.containsKey(resolvedServer)) {    if (!server.inSite() && serverToSite.get(resolvedServer) != null) {      server.setSite(serverToSite.get(resolvedServer));    } else     if (server.inSite() && serverToSite.get(resolvedServer) == null) {      server.setSite(null);    }  }  return server;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ContactType createContactType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ContactTypeImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SSODescriptorType createSSODescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SSODescriptorTypeImpl();}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  static MonitoringAttributesViewPanel<MonitoringAttributes> createMonitoringAttributesInstance(LinkedHashSet<MonitoringAttributes> attributes){  return new MonitoringAttributesViewPanel<>(attributes);}  }
class C{  private static String parse(JsonValue base){  if (!base.isString()) {    return null;  }  return buildString(base.asString());}  }
class C{  public void curveFromTo(float x1,float y1,float x3,float y3){  if (currentPoint == null) {    throw new RuntimeException(START_PATH_ERR_MSG);  }  curveTo(x1,y1,x3,y3,x3,y3);}  }
class C{  public String toString(){  return (resourceMatch);}  }
class C{  private static Object callFunctionalObject(InvocationState invocationState,Object functionalObject,Class<?> callerClass,Object[] args) throws Throwable {  if (functionalObject == null)   throw new NullPointerException();  Class<?> cls=functionalObject.getClass();  Method theMethodToInvoke;  if (cls.getSuperclass() != null && isFunctionalAbstractClass(cls.getSuperclass())) {    theMethodToInvoke=findAbstractMethod(cls.getSuperclass());  } else   if (cls.getInterfaces().length == 1 && isFunctionalInterface(cls.getInterfaces()[0])) {    theMethodToInvoke=findAbstractMethod(cls.getInterfaces()[0]);  } else {    return invoke(invocationState,functionalObject.getClass(),functionalObject,null,callerClass,"apply",new boolean[args.length],args);  }  invocationState.methodFound=true;  try {    Object theRes=theMethodToInvoke.invoke(functionalObject,args);    if (theMethodToInvoke.getReturnType().equals(Void.TYPE)) {      return Unit.get();    }    return theRes;  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  void sqlUpdate(ContentValues values,String whereClause){  database.update(DATABASE_TABLE,values,whereClause,null);}  }
class C{  public ReplSessionSecurity() throws ConfigException {  this(DirectoryConfig.getCryptoManager().getSslCertNicknames(),DirectoryConfig.getCryptoManager().getSslProtocols(),DirectoryConfig.getCryptoManager().getSslCipherSuites(),DirectoryConfig.getCryptoManager().isSslEncryption());}  }
class C{  public AssertionArtifact createAssertionArtifact(String id,String destID) throws SAMLException {  return createAssertionArtifact(id,destID,null,null);}  }
class C{  protected void minimizeFrame(JInternalFrame f){  if (!f.isIcon()) {    BasicLookAndFeel.playSound(frame,"InternalFrame.restoreDownSound");  }  getDesktopManager().minimizeFrame(f);}  }
class C{  public boolean isUnderline(){  return underline;}  }
class C{  private void revealPanorama(){  getView().setVisibility(View.VISIBLE);  Animator circularReveal=ViewUtils.createCircularReveal(mRevealCenter,mRevealWidth,getView(),INTERPOLATOR);  ObjectAnimator colorChange=ViewUtils.createColorChange(((FrameLayout)getView()),R.color.foreground,android.R.color.transparent,INTERPOLATOR);  AnimatorSet animatorSet=new AnimatorSet();  animatorSet.play(circularReveal).with(colorChange);  animatorSet.start();}  }
class C{  public static CompoundBorder createCompoundBorder(){  return new CompoundBorder();}  }
class C{  public <M extends Configuration>void deregisterAddListener(InstantiableRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterAddListener(baseDN,listener);}  }
class C{  public void addSessionPartner(FSSessionPartner sessionPartner){  Iterator i=sessionPartners.iterator();  while (i.hasNext()) {    if (((FSSessionPartner)i.next()).equals(sessionPartner)) {      return;    }  }  sessionPartners.add(sessionPartner);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  protected void HandelStack(){  int StackHandel=StackOpp();  if (StackHandel < 2) {    if (StackHandel == 1)     PushStack(); else {      StackHandel*=-1;      for (int i=0; i < StackHandel; i++)       PopStack();    }  } else   EmptyStack();}  }
class C{  public int invalidPasswd(String userDN,String userName,AMIdentity amIdentity,AccountLockoutInfo acInfo){  if (acInfo == null) {    acInfo=new AccountLockoutInfo();    acInfo.setActualLockoutDuration(failureLockoutDuration);    loginFailHash.put(userDN,acInfo);  }  if (debug.messageEnabled()) {    debug.message("ISAccountLockout.invalidPasswd with userDN, AMIdentity");    debug.message("userDN : " + userDN);  }  long now=currentTimeMillis();  int fail_count=acInfo.getFailCount();  long lastFailTime=acInfo.getLastFailTime();  long lockedAt=acInfo.getLockoutAt();  if ((lastFailTime + failureLockoutTime) > now) {    fail_count=fail_count + 1;  } else {    fail_count=1;  }  if (((lastFailTime + failureLockoutTime) > now) && (fail_count == failureLockoutCount)) {    lockedAt=now;  }  if (debug.messageEnabled()) {    debug.message("ISAccountLockout.invalidPasswd:fail_count:" + fail_count);  }  if (storeInvalidAttemptsInDS) {    Map attrMap=new HashMap();    Set invalidAttempts=new HashSet();    String invalidXML=createInvalidAttemptsXML(fail_count,now,lockedAt,acInfo.getActualLockoutDuration());    invalidAttempts.add(invalidXML);    if (debug.messageEnabled()) {      debug.message("ISAccountLockout.invalidPasswd: " + "Invalid Attempt XML being inserted= " + invalidXML);    }    attrMap.put(invalidAttemptsDataAttrName,invalidAttempts);    try {      setLockoutObjectClass(amIdentity);      amIdentity.setAttributes(attrMap);      amIdentity.store();      debug.message("ISAccountLockout.invalidPasswd: Stored Invalid Attempt XML");    } catch (    Exception e) {      debug.error("ISAccountLockout.invalidPasswd",e);      return -1;    }  }  acInfo.setLastFailTime(now);  acInfo.setFailCount(fail_count);  acInfo.setLockoutAt(lockedAt);  if (lockedAt > 0) {    acInfo.setLockout(true);  }  acInfo.setUserToken(userName);  if (fail_count == failureLockoutCount) {    if (!memoryLocking) {      inactivateUserAccount(amIdentity);    }    try {      sendLockOutNotice(userName);      callbackImpl=AMAuthCallBackImpl.getInstance(amIdentity.getRealm());      callbackImpl.processedAccounttLockout(new Long(now),userName);    } catch (    AMAuthCallBackException e) {      if (debug.getState() >= IDebug.ERROR) {        debug.error("ISAccountLockout invalidPasswd : " + "error getting callback implementation " + "instance or error from callback module",e);      }    }catch (    Exception ex) {      debug.message("Error activating account/sending" + "notification ",ex);    }  }  setWarningCount(fail_count,failureLockoutCount);  return userWarningCount;}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode,final boolean doAuthentication) throws Throwable {  clientConnection.setDoInput(true);  clientConnection.setConnectTimeout(TIMEOUT);  clientConnection.setReadTimeout(TIMEOUT);  ServerWork server=new ServerWork(serverSocket,responseCode,doAuthentication);  ClientConnectionWork client=new ClientConnectionWork(clientConnection);  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<Void> serverFuture=executorService.submit(server);    Future<Void> clientFuture=executorService.submit(client);    Throwable t=null;    try {      serverFuture.get(30,TimeUnit.SECONDS);    } catch (    ExecutionException e) {      t=e.getCause();    }    try {      clientFuture.get(30,TimeUnit.SECONDS);    } catch (    ExecutionException e) {      if (t != null) {        t.printStackTrace();      }      t=e.getCause();    }    if (t != null) {      throw t;    }  } catch (  ExecutionException e) {    throw e.getCause();  } finally {    executorService.shutdown();  }  return server.peerSocket;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fchildNode;  String childName;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  fchildNode=employeeNode.getFirstChild();  childName=fchildNode.getNodeName();  if (equals("#text",childName)) {    assertEquals("firstChild_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","firstChild_wo_whitespace","em",childName);  }}  }
class C{  private void checkShutdownAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkPermission(shutdownPerm);    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      for (      Worker w : workers)       security.checkAccess(w.thread);    }  finally {      mainLock.unlock();    }  }}  }
class C{  public static net.aimeizi.person.Person.Builder newBuilder(net.aimeizi.person.Person.Builder other){  return new net.aimeizi.person.Person.Builder(other);}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  fInputStream.mark(readAheadLimit);}  }
class C{  public static <T>Collection<T> unmodifiableCollection(Collection<? extends T> c){  return new UnmodifiableCollection<>(c);}  }
class C{  public int hashCode(){  int hashcode=decimalAt;  for (int i=0; i < count; i++) {    hashcode=hashcode * 37 + digits[i];  }  return hashcode;}  }
class C{  @Inject public UserInfoService(TokenStore tokenStore,OAuth2ProviderSettingsFactory providerSettingsFactory,@Named(HEADER) AccessTokenVerifier headerTokenVerifier,@Named(FORM_BODY) AccessTokenVerifier formTokenVerifier,ClientRegistrationStore clientRegistrationStore){  this.tokenStore=tokenStore;  this.providerSettingsFactory=providerSettingsFactory;  this.headerTokenVerifier=headerTokenVerifier;  this.formTokenVerifier=formTokenVerifier;  this.clientRegistrationStore=clientRegistrationStore;}  }
class C{  public void warning(String message,Throwable th){  if (warningEnabled()) {    record("WARNING: " + message,th);  }}  }
class C{  public SearchResultEntryProtocolOp(SearchResultEntry searchEntry){  this(searchEntry.getName(),null,searchEntry,3);}  }
class C{  @Override public void attributeAdded(HttpSessionBindingEvent event){  log("attributeAdded('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"2500");  childData=child.getData();  assertEquals("characterdataReplaceDataBeginingAssert","2500 North Ave. Dallas, Texas 98551",childData);}  }
class C{  protected void prepareForEditing(){  if (editingComponent != null) {    editingContainer.add(editingComponent);  }}  }
class C{  @Override public void onCreate(@Nullable Bundle bundle){}  }
class C{  public void testGetAttributeNS2() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="district";  String qualifiedName="emp:district";  Document doc;  Attr newAttribute;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",builder);  newAttribute=doc.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.setAttributeNodeNS(newAttribute);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  private static boolean areAttributesEqual(AttributeType attr1,AttributeType attr2){  return attr1.getOID().equals(attr2.getOID()) && attr1.isCollective() == attr2.isCollective() && attr1.isNoUserModification() == attr2.isNoUserModification() && attr1.isObjectClass() == attr2.isObjectClass() && attr1.isObsolete() == attr2.isObsolete() && attr1.isOperational() == attr2.isOperational() && attr1.isSingleValue() == attr2.isSingleValue() && Objects.equals(attr1.getApproximateMatchingRule(),attr2.getApproximateMatchingRule()) && Objects.equals(getElementDefinitionWithFileName(attr1),getElementDefinitionWithFileName(attr2)) && Objects.equals(attr1.getDescription(),attr2.getDescription()) && Objects.equals(attr1.getEqualityMatchingRule(),attr2.getEqualityMatchingRule()) && Objects.equals(attr1.getOrderingMatchingRule(),attr2.getOrderingMatchingRule()) && Objects.equals(attr1.getSubstringMatchingRule(),attr2.getSubstringMatchingRule()) && Objects.equals(attr1.getSuperiorType(),attr2.getSuperiorType()) && Objects.equals(attr1.getSyntax(),attr2.getSyntax()) && Objects.equals(attr1.getSyntax().getOID(),attr2.getSyntax().getOID()) && Objects.equals(attr1.getExtraProperties().keySet(),attr2.getExtraProperties().keySet()) && Objects.equals(toSet(attr1.getNames()),toSet(attr2.getNames()));}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer NS=new StringBuffer(100);  String appendNS="";  if (declareNS) {    NS.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    NS.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    appendNS=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(appendNS).append(XACMLConstants.RESOURCE).append(NS);  sb.append(">");  int length=0;  if (attributes != null) {    sb.append("\n");    length=attributes.size();    for (int i=0; i < length; i++) {      Attribute attr=(Attribute)attributes.get(i);      sb.append(attr.toXMLString(includeNSPrefix,false));    }  }  if (resourceContent != null) {    sb.append("\n");    if (includeNSPrefix && (resourceContent.getPrefix() == null)) {      resourceContent.setPrefix(appendNS.substring(0,appendNS.length() - 1));    }    if (declareNS) {      int index=NS.indexOf("=");      String namespaceName=NS.substring(0,index);      String namespaceURI=NS.substring(index + 1);      if (resourceContent.getNamespaceURI() == null) {        resourceContent.setAttribute(namespaceName,namespaceURI);      }    }    sb.append(XMLUtils.print(resourceContent));  }  sb.append("</").append(appendNS).append(XACMLConstants.RESOURCE);  sb.append(">\n");  return sb.toString();}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public static void reversedMergesort(double[] a){  reversedMergesort(a,0,a.length);}  }
class C{  public void useTimings(boolean use){  useTimings=use;}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  EndLineAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  if (isXuiAdminConsoleEnabled()) {    redirectToXui(getRequestContext().getRequest(),XuiRedirectHelper.DEPLOYMENT_SERVERS);  } else {    super.beginDisplay(event);  }  resetButtonState(TBL_SERVER_BUTTON_DELETE);  resetButtonState(TBL_SERVER_BUTTON_CLONE);  resetButtonState(TBL_SITE_BUTTON_DELETE);  getSiteNames();  getServerNames();}  }
class C{  static DN create(ManagedObjectPath<?,?> path,SetRelationDefinition<?,?> relation,LDAPProfile profile){  DNBuilder builder=new DNBuilder(profile);  path.serialize(builder);  builder.appendManagedObjectPathElement(relation);  return builder.build();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  int expectedLength;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  expectedLength=(int)childList.getLength();  expectedLength+=1;  createdNode=doc.createElement("text3");  employeeNode=employeeNode.appendChild(createdNode);  length=(int)childList.getLength();  assertEquals("childNodeLength",expectedLength,length);}  }
class C{  public void appendByte(int value){  if (size == 0 || size >= bytes.length) {    int newSize=Math.max(INITIAL_SIZE,size << 1);    reserve(newSize);  }  bytes[size]=(byte)value;  size++;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      this.sendReInvite(sipProvider);    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    TlsTest.fail(s);  }}  }
class C{  public List<String> methodComments(Interface service,Method method){  MethodConfig config=getApiConfig().getInterfaceConfig(service).getMethodConfig(method);  StringBuilder paramTypesBuilder=new StringBuilder();  for (  Field field : removePageTokenFromFields(method.getInputType().getMessageType().getFields(),config)) {    if (config.isPageStreaming() && field.equals((config.getPageStreaming().getPageSizeField()))) {      paramTypesBuilder.append(fieldParamComment(field,"The maximum number of resources contained in the underlying API\n" + "response. If page streaming is performed per-resource, this\n" + "parameter does not affect the return value. If page streaming is\n"+ "performed per-page, this determines the maximum number of\n"+ "resources in a page."));    } else {      paramTypesBuilder.append(fieldParamComment(field,null));    }  }  paramTypesBuilder.append("@param options [Google::Gax::CallOptions] \n" + "  Overrides the default settings for this call, e.g, timeout,\n" + "  retries, etc.");  String paramTypes=paramTypesBuilder.toString();  String returnType=returnTypeComment(method,config);  StringBuilder contentBuilder=new StringBuilder();  if (method.hasAttribute(ElementDocumentationAttribute.KEY)) {    contentBuilder.append(RDocCommentFixer.rdocify(DocumentationUtil.getScopedDescription(method)));    if (!Strings.isNullOrEmpty(paramTypes)) {      contentBuilder.append("\n\n");    }  }  contentBuilder.append(paramTypes);  if (returnType != null) {    contentBuilder.append("\n" + returnType);  }  contentBuilder.append("\n@raise [Google::Gax::GaxError] if the RPC is aborted.");  return convertToCommentedBlock(contentBuilder.toString());}  }
class C{  public ParameterBlock add(char c){  return add(new Character(c));}  }
class C{  protected void releaseAudioDevices(){  if (mWZAudioDevice != null) {    if (mWZAudioDevice.isSamplingAudio())     mWZAudioDevice.stopAudioSampler();    mWZAudioDevice.unregisterAudioSampleListener(mAudioLevelMeter);  }}  }
class C{  public RAckHeader createRAckHeader(long rSeqNumber,long cSeqNumber,String method) throws InvalidArgumentException, ParseException {  if (method == null)   throw new NullPointerException("Bad method");  if (cSeqNumber < 0 || rSeqNumber < 0)   throw new InvalidArgumentException("bad cseq/rseq arg");  RAck rack=new RAck();  rack.setMethod(method);  rack.setCSequenceNumber(cSeqNumber);  rack.setRSequenceNumber(rSeqNumber);  return rack;}  }
class C{  public void exprAddChild(ExpressionNode n,int i){  appendChild((ElemTemplateElement)n);}  }
class C{  public HttpConstraintElement(){  this.emptyRoleSemantic=EmptyRoleSemantic.PERMIT;  this.transportGuarantee=TransportGuarantee.NONE;  this.rolesAllowed=new String[0];}  }
class C{  protected Document createDefaultModel(){  return new PlainDocument();}  }
class C{  public StateAttribute(String str){  super(OctetUtils.toOctets(AttributeType.STATE,str));  state=new String(super.getOctets(),2,super.getOctets().length - 2,Charset.forName("utf-8"));}  }
class C{  private Promise<ActionResponse,ResourceException> generateNewPasswordEmail(final Context context,final ActionRequest request,final String realm,final RestSecurity restSecurity){  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  final JsonValue jsonBody=request.getContent();  try {    ServiceConfig mailscm=getMailServiceConfig(realm);    String mailLDAPAttribute=CollectionHelper.getMapAttr(mailscm.getAttributes(),MAIL_ATTRIBUTE);    if (restSecurity == null) {      if (debug.warningEnabled()) {        debug.warning("Rest Security not created. restSecurity={}",restSecurity);      }      throw getException(UNAVAILABLE,"Rest Security Service not created");    }    if (!restSecurity.isSelfServiceRestEndpointEnabled()) {      if (debug.warningEnabled()) {        debug.warning("Forgot Password set to : {}",restSecurity.isSelfServiceRestEndpointEnabled());      }      throw getException(UNAVAILABLE,"Legacy Self Service REST Endpoint is not enabled.");    }    if (!restSecurity.isForgotPassword()) {      if (debug.warningEnabled()) {        debug.warning("Forgot Password set to : {}",restSecurity.isForgotPassword());      }      throw getException(UNAVAILABLE,"Forgot password is not accessible.");    }    SSOToken adminToken=getSSOToken(RestUtils.getToken().getTokenID().toString());    String username=getUsername(mailLDAPAttribute,realm,jsonBody,adminToken);    IdentityDetails identityDetails=identityServices.read(username,getIdentityServicesAttributes(realm,objectType),adminToken);    String email=null;    String uid=null;    for (    Map.Entry<String,Set<String>> attribute : asMap(identityDetails.getAttributes()).entrySet()) {      String attributeName=attribute.getKey();      if (mailLDAPAttribute.equalsIgnoreCase(attributeName)) {        if (attribute.getValue() != null && !attribute.getValue().isEmpty()) {          email=attribute.getValue().iterator().next();        }      } else       if (UNIVERSAL_ID.equalsIgnoreCase(attributeName)) {        if (attribute.getValue() != null && !attribute.getValue().isEmpty()) {          uid=attribute.getValue().iterator().next();        }      }    }    if (!isUserActive(uid)) {      throw new ForbiddenException("Request is forbidden for this user");    }    if (email == null || email.isEmpty()) {      throw new BadRequestException("No email provided in profile.");    }    HttpContext header=context.asContext(HttpContext.class);    String baseURL=baseURLProviderFactory.get(realm).getRootURL(header);    String subject=jsonBody.get("subject").asString();    String message=jsonBody.get("message").asString();    if (restSecurity == null) {      if (debug.warningEnabled()) {        debug.warning("Rest Security not created. restSecurity={}",restSecurity);      }      throw new NotFoundException("Rest Security Service not created");    }    Long tokenLifeTime=restSecurity.getForgotPassTLT();    org.forgerock.openam.cts.api.tokens.Token ctsToken=generateToken(email,username,tokenLifeTime,realm);    CTSHolder.getCTS().createAsync(ctsToken);    String confirmationId=Hash.hash(ctsToken.getTokenId() + username + SystemProperties.get(AM_ENCRYPTION_PWD));    String confURL=restSecurity.getForgotPasswordConfirmationUrl();    StringBuilder confURLBuilder=new StringBuilder(100);    if (StringUtils.isEmpty(confURL)) {      confURLBuilder.append(baseURL).append("/json/confirmation/forgotPassword");    } else     if (confURL.startsWith("/")) {      confURLBuilder.append(baseURL).append(confURL);    } else {      confURLBuilder.append(confURL);    }    String confirmationLink=confURLBuilder.append("?confirmationId=").append(requestParamEncode(confirmationId)).append("&tokenId=").append(requestParamEncode(ctsToken.getTokenId())).append("&username=").append(requestParamEncode(username)).append("&realm=").append(realm).toString();    sendNotification(email,subject,message,realm,confirmationLink);    String principalName=PrincipalRestUtils.getPrincipalNameFromServerContext(context);    if (debug.messageEnabled()) {      debug.message("IdentityResource.generateNewPasswordEmail :: ACTION of generate new password email " + " for username={} in realm={} performed by principalName={}",username,realm,principalName);    }    return newResultPromise(newActionResponse(result));  } catch (  ResourceException re) {    debug.warning(re.getMessage(),re);    return re.asPromise();  }catch (  Exception e) {    debug.error("Internal error",e);    return new InternalServerErrorException("Failed to send mail",e).asPromise();  }}  }
class C{  @Override public void readObjectData(ObjectInputStream stream) throws ClassNotFoundException, IOException {  doReadObject((ObjectInput)stream);}  }
class C{  public int vsCircumcircle(Pnt[] simplex){  Pnt[] matrix=new Pnt[simplex.length + 1];  for (int i=0; i < simplex.length; i++)   matrix[i]=simplex[i].extend(1,simplex[i].dot(simplex[i]));  matrix[simplex.length]=this.extend(1,this.dot(this));  double d=determinant(matrix);  int result=(d < 0) ? -1 : ((d > 0) ? +1 : 0);  if (content(simplex) < 0)   result=-result;  return result;}  }
class C{  void reinitialize(){  table=null;  entrySet=null;  keySet=null;  values=null;  modCount=0;  threshold=0;  size=0;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl();}  }
class C{  public Object clone(){  AuthRoleCondition theClone=null;  try {    theClone=(AuthRoleCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public boolean isRepeatable(){  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.PGPDataElement createPGPDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.PGPDataElementImpl();}  }
class C{  public static boolean isSuperscript(AttributeSet a){  Boolean superscript=(Boolean)a.getAttribute(Superscript);  if (superscript != null) {    return superscript.booleanValue();  }  return false;}  }
class C{  private void returnBuffer(ByteBuffer buf){  if (buf != null) {    buf.clear();    bufferPool.add(buf);  }}  }
class C{  private Set<Integer> computeDSsConnectedTo(int rsId,int dsServerId){  final Set<Integer> connectedDSs=new HashSet<>();  if (rsServerId == rsId) {    connectedDSs.add(dsServerId);  }  for (  DSInfo dsInfo : replicaInfos.values()) {    if (dsInfo.getRsId() == rsId) {      connectedDSs.add(dsInfo.getDsId());    }  }  return connectedDSs;}  }
class C{  @Override protected int afterParseMessageAction(int ret){  if (tlsContext.getProtocolVersion() == ProtocolVersion.DTLS12) {    protocolMessage.setCompleteResultingMessage(dtlsAllMessageBytes);    ret+=8;  }  byte[] pm=protocolMessage.getCompleteResultingMessage().getValue();  if (protocolMessage.getIncludeInDigest()) {    tlsContext.getDigest().update(pm);  }  return ret;}  }
class C{  @Override public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  public Map(){}  }
class C{  public void testJarVerificationModifiedEntry() throws IOException {  Support_Resources.copyFile(resources,null,integrateJar);  File f=new File(resources,integrateJar);  JarFile jarFile=new JarFile(f);  ZipEntry zipEntry=jarFile.getJarEntry(integrateJarEntry);  zipEntry.setSize(zipEntry.getSize() + 1);  jarFile.getInputStream(zipEntry).skip(Long.MAX_VALUE);  jarFile=new JarFile(f);  zipEntry=jarFile.getJarEntry(integrateJarEntry);  zipEntry.setSize(zipEntry.getSize() - 1);  try {    jarFile.getInputStream(zipEntry).read(new byte[5000],0,5000);    fail("SecurityException expected");  } catch (  SecurityException e) {  }}  }
class C{  public <T>void addProperty(PropertyDefinition<T> pd,Collection<T> defaultValues,Collection<T> activeValues){  MyProperty<T> p=new MyProperty<>(pd,defaultValues,activeValues);  properties.put(pd,p);}  }
class C{  @Override public void initParams(final HttpServletRequest request,final IConfiguration configuration,final Object... params) throws ConnectorException {  super.initParams(request,configuration,params);  this.cookies=request.getCookies();  this.sessionCookieName=((String)request.getAttribute("session.cookie.name"));  this.sessionPathParamName=((String)request.getAttribute("session.parameter.name"));}  }
class C{  public void test_getX() throws Exception {  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DSA");  keyGen.initialize(new DSAParameterSpec(Util.P,Util.Q,Util.G),new SecureRandom(new MySecureRandomSpi(),null){  });  KeyPair keyPair=keyGen.generateKeyPair();  DSAPrivateKey key=(DSAPrivateKey)keyPair.getPrivate();  assertNotNull("Invalid X value",key.getX());}  }
class C{  public static void fill(int[] a,int val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public boolean is_multiple_of_45_degree(){  return is_orthogonal() || is_diagonal();}  }
class C{  public boolean hasBufferStrategyChanged(){  Container root=getRoot();  if (root != null) {    BufferStrategy ourBS=null;    BufferStrategy componentBS=null;    ourBS=getBufferStrategy(false);    if (root instanceof Window) {      componentBS=((Window)root).getBufferStrategy();    } else {      try {        componentBS=(BufferStrategy)getGetBufferStrategyMethod().invoke(root);      } catch (      InvocationTargetException ite) {        assert false;      }catch (      IllegalArgumentException iae) {        assert false;      }catch (      IllegalAccessException iae2) {        assert false;      }    }    if (componentBS != ourBS) {      if (ourBS != null) {        ourBS.dispose();      }      weakBS=null;      return true;    }  }  return false;}  }
class C{  @Override public void rebind(Name name,Object obj) throws NamingException {  bind(name,obj,true);}  }
class C{  private static void parseArgs(String[] args){  if (args.length < 4 || args.length > 5) {    giveUp();  }  host=args[0];  port=Integer.parseInt(args[1]);  if (args.length == 5) {    authzid=args[2];    authcid=args[3];    passwd=args[4];  } else {    authzid=null;    authcid=args[2];    passwd=args[3];  }}  }
class C{  public Future<Job> complete(){  return this.setProgress(100).set("progress","100").compose(null);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html; charset=UTF-8");  if ((request == null) || (response == null)) {    String[] data={SAMLUtils.bundle.getString("nullInputParameter")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.NULL_PARAMETER,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"nullInputParameter",SAMLUtils.bundle.getString("nullInputParameter"));    return;  }  SAMLUtils.checkHTTPContentLength(request);  String target=request.getParameter(SAMLConstants.POST_TARGET_PARAM);  if (target == null || target.length() == 0) {    String[] data={SAMLUtils.bundle.getString("missingTargetSite")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.MISSING_TARGET,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"missingTargetSite",SAMLUtils.bundle.getString("missingTargetSite"));    return;  }  String samlResponse=request.getParameter(SAMLConstants.POST_SAML_RESPONSE_PARAM);  if (samlResponse == null) {    String[] data={SAMLUtils.bundle.getString("missingSAMLResponse")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.MISSING_RESPONSE,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"missingSAMLResponse",SAMLUtils.bundle.getString("missingSAMLResponse"));    return;  }  byte raw[]=null;  try {    raw=Base64.decode(samlResponse);  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLPOSTProfileServlet.doPost: Exception " + "when decoding SAMLResponse:",e);    SAMLUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"errorDecodeResponse",SAMLUtils.bundle.getString("errorDecodeResponse"));    return;  }  Response sResponse=SAMLUtils.getResponse(raw);  if (sResponse == null) {    String[] data={SAMLUtils.bundle.getString("errorObtainResponse")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.RESPONSE_MESSAGE_ERROR,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"errorObtainResponse",SAMLUtils.bundle.getString("errorObtainResponse"));    return;  }  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("SAMLPOSTProfileServlet.doPost: Received " + sResponse.toString());  }  StringBuffer requestUrl=request.getRequestURL();  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("SAMLPOSTProfileServlet.doPost: " + "requestUrl=" + requestUrl);  }  boolean valid=SAMLUtils.verifyResponse(sResponse,requestUrl.toString(),request);  if (!valid) {    String[] data={SAMLUtils.bundle.getString("invalidResponse")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_RESPONSE,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"invalidResponse",SAMLUtils.bundle.getString("invalidResponse"));    return;  }  Map attrMap=null;  List assertions=null;  javax.security.auth.Subject authSubject=null;  try {    Map sessionAttr=SAMLUtils.processResponse(sResponse,target);    Object token=SAMLUtils.generateSession(request,response,sessionAttr);  } catch (  Exception ex) {    SAMLUtils.debug.error("generateSession: ",ex);    String[] data={SAMLUtils.bundle.getString("failedCreateSSOToken")};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.FAILED_TO_CREATE_SSO_TOKEN,data);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedCreateSSOToken",ex.getMessage());    ;    return;  }  if (LogUtils.isAccessLoggable(java.util.logging.Level.FINE)) {    String[] data={SAMLUtils.bundle.getString("accessGranted"),new String(raw,"UTF-8")};    LogUtils.access(java.util.logging.Level.FINE,LogUtils.ACCESS_GRANTED,data);  } else {    String[] data={SAMLUtils.bundle.getString("accessGranted")};    LogUtils.access(java.util.logging.Level.INFO,LogUtils.ACCESS_GRANTED,data);  }  if (SAMLUtils.postYN(target)) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("POST to target:" + target);    }    SAMLUtils.postToTarget(response,response.getWriter(),assertions,target,attrMap);  } else {    response.setHeader("Location",target);    response.sendRedirect(target);  }}  }
class C{  public static Subject createSubject(String tokenId){  try {    SSOToken ssoToken=SSOTokenManager.getInstance().createSSOToken(tokenId);    return createSubject(ssoToken);  } catch (  SSOException e) {    return null;  }}  }
class C{  public DirectoryServerShutdownHook(){  super("Directory Server Shutdown Hook");}  }
class C{  public boolean isServerRunning(){  return isServerRunning;}  }
class C{  public SendRequestException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public <M extends Configuration>void registerDeleteListener(SetRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  ConfigDeleteListener adaptor=new ConfigDeleteListenerAdaptor<>(serverContext,path,d,listener);  registerDeleteListener(baseDN,adaptor);}  }
class C{  private static String sphinxifyCloudMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.CLOUD_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("`%s <https://cloud.google.com%s>`_",m.group(1),m.group(2)));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public SQLTransactionRollbackException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public synchronized void remove(String name){  for (int i=0; i < modifications.size(); i++) {    Modification mod=modifications.get(i);    Attribute attr=mod.getAttribute();    if (name.equalsIgnoreCase(attr.getAttributeDescriptionAsString())) {      modifications.remove(i);      return;    }  }}  }
class C{  private String retrieveFullID(String resourceID,JsonValue value){  String id=value.get("_id").required().asString();  return retrieveFullID(resourceID,id);}  }
class C{  public void remove(String jwt){  sessionInfoCache.remove(jwt);}  }
class C{  public static String generateNumricPassword(final int numberOfChar){  final Random randomGenerator=new Random();  String password="";  for (int i=1; i <= numberOfChar; ++i) {    password+=randomGenerator.nextInt(10);  }  return password;}  }
class C{  public void removeTabAt(int index){  checkIndex(index);  Component component=getComponentAt(index);  boolean shouldChangeFocus=false;  int selected=getSelectedIndex();  String oldName=null;  if (component == visComp) {    shouldChangeFocus=(SwingUtilities.findFocusOwner(visComp) != null);    visComp=null;  }  if (accessibleContext != null) {    if (index == selected) {      pages.get(index).firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.SELECTED,null);      oldName=accessibleContext.getAccessibleName();    }    accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,component,null);  }  setTabComponentAt(index,null);  pages.remove(index);  putClientProperty("__index_to_remove__",Integer.valueOf(index));  if (selected > index) {    setSelectedIndexImpl(selected - 1,false);  } else   if (selected >= getTabCount()) {    setSelectedIndexImpl(selected - 1,false);    Page newSelected=(selected != 0) ? pages.get(selected - 1) : null;    changeAccessibleSelection(null,oldName,newSelected);  } else   if (index == selected) {    fireStateChanged();    changeAccessibleSelection(null,oldName,pages.get(index));  }  if (component != null) {    Component components[]=getComponents();    for (int i=components.length; --i >= 0; ) {      if (components[i] == component) {        super.remove(i);        component.setVisible(true);        break;      }    }  }  if (shouldChangeFocus) {    SwingUtilities2.tabbedPaneChangeFocusTo(getSelectedComponent());  }  revalidate();  repaint();}  }
class C{  @Override public boolean completeCycle(){  return cycleStats;}  }
class C{  @Override public R visitVariable(VariableElement e,P p){  return scan(e.getEnclosedElements(),p);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getNextSibling();  assertNull("attrNextSiblingNullAssert",s);}  }
class C{  public StatusImpl() throws XACMLException {}  }
class C{  public BlockIterator(Location loc){  this(loc,0D);}  }
class C{  public String endTblDataActionDeleteHrefDisplay(ChildContentDisplayEvent event){  String lbl=(String)tblModel.getValue(TBL_DATA_ACTION_DELETE_LABEL);  return ((lbl != null) && (lbl.length() > 0)) ? event.getContent() : "";}  }
class C{  public SQLSyntaxErrorException(Throwable cause){  super(cause);}  }
class C{  public Expression predicate(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  protected void tearDown(){  hm=null;  objArray=null;  objArray2=null;}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.ExtensionTypeImpl();}  }
class C{  public static IOFileFilter makeFileOnly(IOFileFilter filter){  if (filter == null) {    return FileFileFilter.FILE;  }  return new AndFileFilter(FileFileFilter.FILE,filter);}  }
class C{  public static Document createDocument(boolean isSecureProcessing){  try {    DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();    dfactory.setNamespaceAware(true);    DocumentBuilder docBuilder=dfactory.newDocumentBuilder();    Document outNode=docBuilder.newDocument();    return outNode;  } catch (  ParserConfigurationException pce) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CREATEDOCUMENT_NOT_SUPPORTED,null));  }}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public IIOInvalidTreeException(String message,Throwable cause,Node offendingNode){  super(message,cause);  this.offendingNode=offendingNode;}  }
class C{  public PdfADocument(PdfReader reader,PdfWriter writer){  this(reader,writer,new StampingProperties());}  }
class C{  public int addNodeInDocOrder(int node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      int child=elementAt(i);      if (child == node) {        i=-2;        break;      }      DTM dtm=support.getDTM(node);      if (!dtm.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (i == node) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  public boolean isAssured(){  return assuredFlag;}  }
class C{  private void buildTAStore(MethodVisitor methodVisitor,CodeInfo info,Ins.TAStore TAStore){  buildValueAccess(methodVisitor,info,TAStore.array(),true);  buildValueAccess(methodVisitor,info,TAStore.index(),true);  buildValueAccess(methodVisitor,info,TAStore.value(),true);  methodVisitor.visitInsn(TAStore.mode());  info.pop(3);}  }
class C{  public boolean containsKey(Object key){  return isValidKey(key) && vals[((Enum<?>)key).ordinal()] != null;}  }
class C{  public void keyReleased(KeyEvent e){  ((KeyListener)a).keyReleased(e);  ((KeyListener)b).keyReleased(e);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeServiceType createAttributeServiceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeServiceTypeImpl();}  }
class C{  public SubjectDNToUserAttributeCertificateMapper(){  super();}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof File)) {    return compareTo((File)obj) == 0;  }  return false;}  }
class C{  public SipUri parseSIPUrl(String url) throws ParseException {  try {    return new URLParser(url).sipURL(true);  } catch (  ClassCastException ex) {    throw new ParseException(url + " Not a SIP URL ",0);  }}  }
class C{  private void updateMnemonicProperties(){  int newMnemonic=model.getMnemonic();  if (mnemonic != newMnemonic) {    int oldValue=mnemonic;    mnemonic=newMnemonic;    firePropertyChange(MNEMONIC_CHANGED_PROPERTY,oldValue,mnemonic);    updateDisplayedMnemonicIndex(getText(),mnemonic);    revalidate();    repaint();  }}  }
class C{  private Integer parseNumber(String number){  return parseNumber(number,null,INVALID);}  }
class C{  @Override public void objectChanged(String dn,int type){  Matcher matcher=schemaDnPattern.matcher(dn);  if (!matcher.matches()) {    return;  }  refreshServiceRoute(type,matcher.group(2),matcher.group(1));}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    finish();    this.out.flush();  }}  }
class C{  public ResponseEvent extractCollectedResponseEvent(){  if (responseCollector == null)   throw new TckInternalError("A response collect was attempted when the responseCollector was null");  ResponseEvent collectedEvent=responseCollector.collectedEvent;  responseCollector.provider.removeSipListener(responseCollector);  resetCollectors();  try {    Thread.sleep(200);  } catch (  InterruptedException ex) {  }  return collectedEvent;}  }
class C{  public static List<String> toList(String[] array){  List<String> list=new ArrayList<String>();  if ((array != null) && (array.length > 0)) {    for (int i=0; i < array.length; i++) {      list.add(array[i]);    }  }  return list;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return getService().fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append("BoardPanel ");  risul.append("available object: itera_board");  return risul.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node commentNode;  String commentNodeName;  int nodeType;  doc=(Document)load("hc_staff",false);  testList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < testList.getLength(); indexN10040++) {    commentNode=(Node)testList.item(indexN10040);    commentNodeName=commentNode.getNodeName();    if (equals("#comment",commentNodeName)) {      nodeType=(int)commentNode.getNodeType();      assertEquals("existingCommentNodeType",8,nodeType);    }  }  commentNode=doc.createComment("This is a comment");  nodeType=(int)commentNode.getNodeType();  assertEquals("createdCommentNodeType",8,nodeType);}  }
class C{  public void testGetFeatureDescriptors02(){  BeanNameELResolver resolver=createBeanNameELResolver();  Object result=resolver.getFeatureDescriptors(null,new Object());  Assert.assertNull(result);}  }
class C{  public void toString(StringBuilder buffer){switch (filterType) {case AND:    buffer.append("(&");  for (  SearchFilter f : filterComponents) {    f.toString(buffer);  }buffer.append(")");break;case OR:buffer.append("(|");for (SearchFilter f : filterComponents) {f.toString(buffer);}buffer.append(")");break;case NOT:buffer.append("(!");notComponent.toString(buffer);buffer.append(")");break;case EQUALITY:appendEquation(buffer,"=");break;case SUBSTRING:buffer.append("(");buffer.append(attributeDescription);buffer.append("=");if (subInitialElement != null) {valueToFilterString(buffer,subInitialElement);}if (subAnyElements != null && !subAnyElements.isEmpty()) {for (ByteString s : subAnyElements) {buffer.append("*");valueToFilterString(buffer,s);}}buffer.append("*");if (subFinalElement != null) {valueToFilterString(buffer,subFinalElement);}buffer.append(")");break;case GREATER_OR_EQUAL:appendEquation(buffer,">=");break;case LESS_OR_EQUAL:appendEquation(buffer,"<=");break;case PRESENT:buffer.append("(");buffer.append(attributeDescription);buffer.append("=*)");break;case APPROXIMATE_MATCH:appendEquation(buffer,"~=");break;case EXTENSIBLE_MATCH:buffer.append("(");if (attributeDescription != null) {buffer.append(attributeDescription);}if (dnAttributes) {buffer.append(":dn");}if (matchingRuleID != null) {buffer.append(":");buffer.append(matchingRuleID);}buffer.append(":=");valueToFilterString(buffer,assertionValue);buffer.append(")");break;}}  }
class C{  public static AnonymousSASLBindRequest newAnonymousSASLBindRequest(final String traceString){  return new AnonymousSASLBindRequestImpl(traceString);}  }
class C{  public String formatLoginURL(String loginUrl,String authnContext){  FSUtils.debug.message("FSSSOAndFedHandler.formatLoginURL: Called");  try {    if (loginUrl == null) {      FSUtils.debug.error("FSSSOAndFedHandler.formatLoginURL: ");      return null;    }    String ssoUrl=hostedDesc.getSingleSignOnServiceURL();    StringBuffer returnUrl=new StringBuffer(ssoUrl);    if (ssoUrl.indexOf('?') == -1) {      returnUrl.append("?");    } else {      returnUrl.append("&");    }    returnUrl.append(IFSConstants.AUTHN_INDICATOR_PARAM).append("=").append(IFSConstants.AUTHN_INDICATOR_VALUE).append("&").append(IFSConstants.AUTHN_CONTEXT).append("=").append(URLEncDec.encode(authnContext)).append("&").append(IFSConstants.REALM).append("=").append(URLEncDec.encode(realm)).append("&").append(IFSConstants.PROVIDER_ID_KEY).append("=").append(URLEncDec.encode(hostedEntityId)).append("&").append(IFSConstants.META_ALIAS).append("=").append(URLEncDec.encode(metaAlias)).append("&").append(IFSConstants.AUTH_REQUEST_ID).append("=").append(URLEncDec.encode(authnRequest.getRequestID()));    String postLoginUrl=FSServiceUtils.getBaseURL(request) + IFSConstants.POST_LOGIN_PAGE;    StringBuffer gotoUrl=new StringBuffer(postLoginUrl);    if (postLoginUrl.indexOf('?') == -1) {      gotoUrl.append("?");    } else {      gotoUrl.append("&");    }    gotoUrl.append(IFSConstants.LRURL).append("=").append(URLEncDec.encode(returnUrl.toString())).append("&").append(IFSConstants.SSOKEY).append("=").append(IFSConstants.SSOVALUE).append("&").append(IFSConstants.META_ALIAS).append("=").append(metaAlias);    StringBuffer redirectUrl=new StringBuffer(100);    redirectUrl.append(loginUrl);    if (loginUrl.indexOf('?') == -1) {      redirectUrl.append("?");    } else {      redirectUrl.append("&");    }    redirectUrl.append(IFSConstants.GOTO_URL_PARAM).append("=").append(URLEncDec.encode(gotoUrl.toString()));    redirectUrl.append("&").append(IFSConstants.ORGKEY).append("=").append(URLEncDec.encode(realm));    int len=redirectUrl.length() - 1;    if (redirectUrl.charAt(len) == '&') {      redirectUrl=redirectUrl.deleteCharAt(len);    }    return redirectUrl.toString();  } catch (  Exception e) {    FSUtils.debug.error("FSSSOAndFedHandler.formatLoginURL: Exception: ",e);    return null;  }}  }
class C{  private boolean isServerToUninstall(ServerDescriptor server){  Boolean sameInstanceInstallPaths=isSameInstanceInstallPaths(server);  return sameInstanceInstallPaths != null ? sameInstanceInstallPaths : isSamePort(server) && isSameHostName(server);}  }
class C{  public ListIterator<HDR> listIterator(){  return hlist.listIterator(0);}  }
class C{  public FieldFrameBodyIMG(ByteBuffer byteBuffer) throws InvalidTagException {  this.read(byteBuffer);}  }
class C{  public boolean equalsWithEpsilon(Rectangle that){  return equalsWithEpsilon(that,EPS);}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  private boolean isNavigationKey(KeyEvent event){  InputMap inputMap=tree.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);  return inputMap != null && inputMap.get(key) != null;}  }
class C{  public void delete(SSOToken token,String dn) throws SMSException, SSOException {  SMSAuditor auditor=newAuditor(token,dn,readCurrentState(dn));  Iterator se=subEntries(token,dn,"*",0,false,false).iterator();  while (se.hasNext()) {    String entry=(String)se.next();    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject: deleting sub-entry: " + entry);    }    delete(token,getNamingAttribute() + "=" + entry+ ","+ dn);  }  Set subOrgNames=searchSubOrgNames(token,dn,"*",0,false,false,false);  for (Iterator so=subOrgNames.iterator(); so.hasNext(); ) {    String subOrg=(String)so.next();    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject: deleting " + "suborganization: " + subOrg);    }    delete(token,subOrg);  }  DeleteOperation dop=icConn.processDelete(dn);  ResultCode resultCode=dop.getResultCode();  if (resultCode != ResultCode.SUCCESS) {    if (debug.warningEnabled()) {      debug.warning("SMSEmbeddedLdapObject.delete: " + "Unable to delete entry:" + dn);    }    throw (new SMSException("","sms-entry-cannot-delete"));  }  objectChanged(dn,DELETE);  if (auditor != null) {    auditor.auditDelete();  }}  }
class C{  @Override protected void addToken(SoapMessage message){  OpenAMSessionAssertion openAMSessionAssertion=(OpenAMSessionAssertion)assertTokens(message);  Header header=findSecurityHeader(message,true);  final Element element=(Element)header.getObject();  final Element openAMSessionAssertionElement=openAMSessionAssertion.getTokenElement();  element.appendChild(element.getOwnerDocument().importNode(openAMSessionAssertionElement,true));}  }
class C{  public static String insertXML(String xml,String insertXML,String marker,boolean afterMarker){  int idx=xml.indexOf(marker);  if (idx != -1) {    int start=(afterMarker) ? idx + marker.length() : idx;    xml=xml.substring(0,start) + insertXML + xml.substring(start);  }  return xml;}  }
class C{  public boolean isEncrypted(){  return isEncrypted;}  }
class C{  public void decIDPCounter(String realm,String idpName,String counter){}  }
class C{  private static int compareTo(byte[] ip1,byte[] ip2){  if (Arrays.areEqual(ip1,ip2)) {    return 0;  }  if (Arrays.areEqual(max(ip1,ip2),ip1)) {    return 1;  }  return -1;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.EmbeddedType createEmbeddedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.EmbeddedTypeImpl();}  }
class C{  private void upDataMeetingList(){  List<MeetingListEntity> list=TeamMeetingApp.getmSelfData().getMeetingLists();  for (int i=0; i < list.size(); i++) {    list.get(i).initUnReadMessage(mContext);  }  if (list != null) {    mRoomMeetingList=list;    Logger.e(list.toString() + "----" + mRoomMeetingList.toString());  }  if (mListView != null) {    mListView.setSelection(0);  }}  }
class C{  public SelfIteratorNoPredicate() throws javax.xml.transform.TransformerException {  super(null);}  }
class C{  public boolean isShowing(){  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ProxyInfoConfirmationType createProxyInfoConfirmationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ProxyInfoConfirmationTypeImpl();}  }
class C{  private static String asString(ByteBuffer buffer){  final ByteBuffer copy=buffer.duplicate();  final byte[] bytes=new byte[Math.min(copy.remaining(),50)];  copy.get(bytes);  return new String(bytes,StandardCharsets.UTF_8);}  }
class C{  protected boolean isSwitchOpen(){  return MotanSwitcherUtil.isOpen(swictherName);}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  public void install(JTextComponent c){  component=c;  Document doc=c.getDocument();  dot=mark=0;  dotLTR=markLTR=true;  dotBias=markBias=Position.Bias.Forward;  if (doc != null) {    doc.addDocumentListener(handler);  }  c.addPropertyChangeListener(handler);  c.addFocusListener(this);  c.addMouseListener(this);  c.addMouseMotionListener(this);  if (component.hasFocus()) {    focusGained(null);  }  Number ratio=(Number)c.getClientProperty("caretAspectRatio");  if (ratio != null) {    aspectRatio=ratio.floatValue();  } else {    aspectRatio=-1;  }  Integer width=(Integer)c.getClientProperty("caretWidth");  if (width != null) {    caretWidth=width.intValue();  } else {    caretWidth=-1;  }}  }
class C{  synchronized int next(DataOutputBuffer buffer) throws IOException {  try {    int length=readRecordLength();    if (length == -1) {      return -1;    }    int keyLength=in.readInt();    buffer.write(in,length);    return keyLength;  } catch (  ChecksumException e) {    handleChecksumException(e);    return next(buffer);  }}  }
class C{  public static void makeLdif(String ldifPath,TemplateFile template) throws IOException, MakeLDIFException {  LDIFExportConfig exportConfig=new LDIFExportConfig(ldifPath,ExistingFileBehavior.OVERWRITE);  LDIFWriter ldifWriter=new LDIFWriter(exportConfig);  template.generateLDIF(new LdifFileWriter(ldifWriter));}  }
class C{  public boolean undo(Set<Integer> p_changed_nets){  brd_components.undo(observers);  Collection<UndoObjectStorable> cancelled_objects=new LinkedList<UndoObjectStorable>();  Collection<UndoObjectStorable> restored_objects=new LinkedList<UndoObjectStorable>();  boolean result=undo_items.undo(cancelled_objects,restored_objects);  Iterator<UndoObjectStorable> iter=cancelled_objects.iterator();  while (iter.hasNext()) {    BrdItem curr_item=(BrdItem)iter.next();    search_tree_manager.remove(curr_item);    observers.notify_deleted(curr_item);    if (p_changed_nets != null) {      for (int i=0; i < curr_item.net_count(); ++i) {        p_changed_nets.add(new Integer(curr_item.get_net_no(i)));      }    }  }  iter=restored_objects.iterator();  while (iter.hasNext()) {    BrdItem curr_item=(BrdItem)iter.next();    curr_item.set_transient_field(this);    curr_item.art_item_clear();    search_tree_manager.insert(curr_item);    observers.notify_new(curr_item);    if (p_changed_nets != null) {      for (int i=0; i < curr_item.net_count(); ++i) {        p_changed_nets.add(new Integer(curr_item.get_net_no(i)));      }    }  }  return result;}  }
class C{  void updateWSFedEntityConfig(String realm,String cotName,Set trustedProviders) throws COTException {  String classMethod="COTManager:updateWSFedEntityConfig";  String entityId=null;  WSFederationCOTUtils wsfedCotUtils=new WSFederationCOTUtils(callerSession);  if (trustedProviders != null && !trustedProviders.isEmpty()) {    for (Iterator iter=trustedProviders.iterator(); iter.hasNext(); ) {      entityId=(String)iter.next();      try {        wsfedCotUtils.updateEntityConfig(realm,cotName,entityId);      } catch (      WSFederationMetaException sme) {        throw new COTException(sme);      }catch (      JAXBException e) {        debug.error(classMethod,e);        String[] data={e.getMessage(),cotName,entityId,realm};        LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_COT_DESCRIPTOR,data);        throw new COTException(e);      }    }  }}  }
class C{  public int size(){  return all.size();}  }
class C{  @Override public void forceLoad(){  createObjectFromFactory();  clearDataAfterCreation();  deliverResult(objectToRetain);}  }
class C{  private boolean hasNextProxy(){  return nextProxyIndex < proxies.size();}  }
class C{  public String toString(){  int[][] pageRanges=getPageRanges();  String prStr="[";  boolean first=true;  for (int i=0; i < pageRanges.length; i++) {    if (first) {      first=false;    } else {      prStr+=",";    }    prStr+=pageRanges[i][0] + ":" + pageRanges[i][1];  }  prStr+="]";  return "copies=" + getCopies() + ",defaultSelection="+ getDefaultSelection()+ ",destination="+ getDestination()+ ",dialog="+ getDialog()+ ",fileName="+ getFileName()+ ",fromPage="+ getFromPage()+ ",maxPage="+ getMaxPage()+ ",minPage="+ getMinPage()+ ",multiple-document-handling="+ getMultipleDocumentHandling()+ ",page-ranges="+ prStr+ ",printer="+ getPrinter()+ ",sides="+ getSides()+ ",toPage="+ getToPage();}  }
class C{  protected void translateFrame(AbstractID3v2Frame frame){  FrameBodyTDRC tmpBody=(FrameBodyTDRC)frame.getBody();  ID3v22Frame newFrame;  if (tmpBody.getYear().length() != 0) {    newFrame=new ID3v22Frame(ID3v22Frames.FRAME_ID_V2_TYER);    ((AbstractFrameBodyTextInfo)newFrame.getBody()).setText(tmpBody.getYear());    frameMap.put(newFrame.getIdentifier(),newFrame);  }  if (tmpBody.getTime().length() != 0) {    newFrame=new ID3v22Frame(ID3v22Frames.FRAME_ID_V2_TIME);    ((AbstractFrameBodyTextInfo)newFrame.getBody()).setText(tmpBody.getTime());    frameMap.put(newFrame.getIdentifier(),newFrame);  }}  }
class C{  public void trace(String msg){  traceException(msg,null);}  }
class C{  public static DataReplicationOptions createFirstInTopology(int replicationPort,boolean secureReplication){  DataReplicationOptions options=new DataReplicationOptions();  options.type=Type.FIRST_IN_TOPOLOGY;  options.replicationPort=replicationPort;  options.secureReplication=secureReplication;  return options;}  }
class C{  public void testDivideBigDecimalScaleRoundingModeDOWN(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=31;  RoundingMode rm=RoundingMode.DOWN;  String c="-50000.0000000000000000000000000000000";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  @Override public void sessionDestroyed(HttpSessionEvent event){  log("sessionDestroyed('" + event.getSession().getId() + "')");}  }
class C{  public void write(char buf[]){  write(buf,0,buf.length);}  }
class C{  public boolean isHtmlTag(){  return getLocalName().equals("html");}  }
class C{  boolean showAllAttributes(){  return this.currentConfig.isShowAllAttributes();}  }
class C{  public Map<String,byte[]> generate(){  Map<String,byte[]> result=new HashMap<>();  for (  STypeDef type : types) {    ClassWriter classWriter=new SClassWriter(ClassWriter.COMPUTE_FRAMES,typeDefMap);    List<SModifier> modifiers;    List<Instruction> staticIns;    List<ExceptionTable> exceptionTables;    List<SConstructorDef> constructors=null;    List<SFieldDef> fields;    List<SMethodDef> methods;    List<SAnno> annos=type.annos();    SClassDef superClass=null;    List<SInterfaceDef> superInterfaces;    String fileName=type.line_col().fileName;    if (type instanceof SClassDef) {      modifiers=((SClassDef)type).modifiers();      staticIns=((SClassDef)type).staticStatements();      exceptionTables=((SClassDef)type).staticExceptionTable();      constructors=((SClassDef)type).constructors();      fields=((SClassDef)type).fields();      methods=((SClassDef)type).methods();      superInterfaces=((SClassDef)type).superInterfaces();      superClass=((SClassDef)type).parent();    } else {      modifiers=((SInterfaceDef)type).modifiers();      staticIns=((SInterfaceDef)type).staticStatements();      exceptionTables=((SInterfaceDef)type).staticExceptionTable();      fields=((SInterfaceDef)type).fields();      methods=((SInterfaceDef)type).methods();      superInterfaces=((SInterfaceDef)type).superInterfaces();    }    classWriter.visitSource(fileName,fileName);    String[] interfaces=new String[superInterfaces.size()];    for (int i=0; i < interfaces.length; ++i) {      interfaces[i]=typeToInternalName(superInterfaces.get(i));    }    classWriter.visit(Opcodes.V1_8,acc(modifiers) | (type instanceof SClassDef ? 0 : Opcodes.ACC_INTERFACE),typeToInternalName(type),null,superClass == null ? "java/lang/Object" : typeToInternalName(superClass),interfaces);    for (    SAnno anno : annos) {      AnnotationVisitor annotationVisitor=classWriter.visitAnnotation(typeToDesc(anno.type()),annotationIsVisible(anno));      buildAnnotation(annotationVisitor,anno);    }    buildStatic(classWriter,staticIns,exceptionTables);    buildField(classWriter,fields);    if (constructors != null) {      buildConstructor(classWriter,constructors);    }    buildMethod(classWriter,methods);    classWriter.visitEnd();    result.put(type.fullName(),classWriter.toByteArray());  }  return result;}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.add(propertyName,listener);  }}  }
class C{  protected void verifyAttributes(AttrSet attrSet) throws AMException {  String userStatus=attrSet.getValue(USER_STATUS_ATTRIBUTE);  if (userStatus != null && userStatus.equalsIgnoreCase("deleted")) {    debug.warning("Compliance.verifyAttributes(): " + USER_STATUS_ATTRIBUTE + ": "+ userStatus);    throw new AMException(AMSDKBundle.getString("327"),"327");  }}  }
class C{  public synchronized void updateWindowAfterReplay(){  try {    updateDoneCount++;    final Session session=connectedRS.get().session;    if (updateDoneCount >= halfRcvWindow && session != null) {      session.publish(new WindowMsg(updateDoneCount));      rcvWindow+=updateDoneCount;      updateDoneCount=0;    }  } catch (  IOException e) {  }}  }
class C{  static Promise<Void> anyBlocking(final Promise<?>... promises){  return new AnyBlockingPromise(promises);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  private void unloadClient(String clientType){  loadedInternalClients.remove(clientType);  loadedExternalClients.remove(clientType);  loadedClientsMap.remove(clientType);}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return cacheResponse.cacheControl().maxAgeSeconds() == -1 && expires == null;}  }
class C{  public void deleteUsers(Set users) throws AMException, SSOException {  Iterator iter=users.iterator();  while (iter.hasNext()) {    String userDN=(String)iter.next();    AMUser user=new AMUserImpl(super.token,userDN);    user.delete();  }}  }
class C{  @Override public void startActivityFromFragment(final Fragment fragment,final Intent intent,final int requestCode){  super.startActivityFromFragment(fragment,intent,requestCode);}  }
class C{  public SyslogHandler(final String name){  logManager=LogManagerUtil.getLogManager();  String protocol=logManager.getProperty(LogConstants.SYSLOG_PROTOCOL);  boolean useUDP;  if ("UDP".equals(protocol)) {    useUDP=true;  } else   if ("TCP".equals(protocol)) {    useUDP=false;  } else {    Debug.error("Invalid syslog protocol " + protocol + ", defaulting to UDP");    useUDP=true;  }  String host=logManager.getProperty(LogConstants.SYSLOG_HOST);  int port=Integer.valueOf(logManager.getProperty(LogConstants.SYSLOG_PORT));  Debug.message("Starting syslogging to " + host + ":"+ port+ " over "+ protocol);  InetSocketAddress socketAddress=new InetSocketAddress(host,port);  if (useUDP) {    publisher=new SyslogUdpPublisher(socketAddress);  } else {    publisher=new SyslogTcpPublisher(socketAddress);  }  String bufferSizeStr=logManager.getProperty(LogConstants.BUFFER_SIZE);  int size;  if (bufferSizeStr != null && !bufferSizeStr.isEmpty()) {    try {      size=Integer.parseInt(bufferSizeStr);    } catch (    NumberFormatException e) {      size=1;    }  } else {    size=1;  }  this.bufferSize=size;  if ("ON".equalsIgnoreCase(logManager.getProperty(LogConstants.TIME_BUFFERING_STATUS))) {    startTimeBufferingThread();  }  Debug.message("Initialized syslog handler for " + name);}  }
class C{  public String writeToString(Node nodeArg) throws DOMException, LSException {  if (nodeArg == null) {    return null;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,"UTF-16");    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  StringWriter output=new StringWriter();  try {    serializer.setWriter(output);    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return output.toString();}  }
class C{  public IntHashtable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public static String toValidJson(final String jsonStr){  return jsonStr.replace("'","\"");}  }
class C{  private void readObject(ObjectInputStream s) throws ObjectStreamException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static boolean jwtHasAuthorizedPartyClaim(JwtClaimsSet jwtClaims) throws AuthLoginException {  String authorizedPartyClaim=(String)jwtClaims.getClaim(AUTHORIZED_PARTY_CLAIM_KEY);  return (authorizedPartyClaim != null && !authorizedPartyClaim.isEmpty());}  }
class C{  public CoreActionLogsDbHelper(Context context){  super(context);  logDbAdapter=new LogActionDbAdapter(database);}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public TransformException(String message){  super(message);}  }
class C{  public LogoutResponseImpl(Element element) throws SAML2Exception {  parseElement(element);  if (isSigned) {    signedXMLString=XMLUtils.print(element);  }}  }
class C{  private boolean isDNRestrictionOnly(){  if (!isInitialized) {    try {      ServiceSchema schema=serviceSchemaManager.getGlobalSchema();      Map attrs=schema.getAttributeDefaults();      dnRestrictionOnly=Boolean.parseBoolean(CollectionHelper.getMapAttr(attrs,SESSION_DNRESTRICTIONONLY_ATTR_NAME,"false"));      if (DEBUG.messageEnabled()) {        DEBUG.message("DN restriction enabled: " + dnRestrictionOnly);      }      isInitialized=true;    } catch (    Exception e) {      if (DEBUG.messageEnabled()) {        DEBUG.message("Failed to get the default dnRestrictionOnly setting. => Setting to false",e);      }    }  }  return dnRestrictionOnly;}  }
class C{  public boolean removeAttribute(AttributeType attributeType){  attachment=null;  if (attributeType.isObjectClass()) {    objectClasses.clear();    return true;  }  return userAttributes.remove(attributeType) != null || operationalAttributes.remove(attributeType) != null;}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public RebuildIndexParameters baseDN(String baseDN){  this.baseDN=baseDN;  return this;}  }
class C{  public void cancelSelection(){  returnValue=CANCEL_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(CANCEL_SELECTION);}  }
class C{  void removeFromEntityConfig(String realm,String cotName,String protocolType,String entityID) throws COTException, JAXBException {  if (protocolType.equalsIgnoreCase(COTConstants.IDFF)) {    try {      (new IDFFCOTUtils(callerSession)).removeFromEntityConfig(realm,cotName,entityID);    } catch (    IDFFMetaException idme) {      throw new COTException(idme);    }  } else   if (protocolType.equalsIgnoreCase(COTConstants.SAML2)) {    try {      (new SAML2COTUtils(callerSession)).removeFromEntityConfig(realm,cotName,entityID);    } catch (    SAML2MetaException sme) {      throw new COTException(sme);    }  } else   if (protocolType.equalsIgnoreCase(COTConstants.WS_FED)) {    try {      (new WSFederationCOTUtils(callerSession)).removeFromEntityConfig(realm,cotName,entityID);    } catch (    WSFederationMetaException e) {      throw new COTException(e);    }  } else {    String[] data={protocolType};    throw new COTException("invalidProtocolType",data);  }}  }
class C{  public void removeAttribute(String name){  int i=names.indexOf(name);  if (i != -1) {    names.remove(i);    types.remove(i);    values.remove(i);  }}  }
class C{  @AfterClass public void enableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.INFO);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  private void printEquivalentCommandToDelete(DN dn,boolean usingControl){  ArrayList<String> args=new ArrayList<>(getObfuscatedCommandLineArguments(getConnectionCommandLineArguments(useAdminCtx,true)));  args.add(getNoPropertiesFileArgument());  if (usingControl) {    args.add("-J");    args.add(ServerConstants.OID_SUBTREE_DELETE_CONTROL);  }  args.add(dn.toString());  printEquivalentCommandLine(getCommandLinePath("ldapdelete"),args,INFO_CTRL_PANEL_EQUIVALENT_CMD_TO_DELETE_ENTRY.get(dn));}  }
class C{  public void testSendResponse(){  try {    Request invite=createRiInviteRequest(null,null,null);    RequestEvent receivedRequestEvent=null;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      if (receivedRequestEvent == null || receivedRequestEvent.getRequest() == null)       throw new TiUnexpectedError("The sent request was not received by the RI!");    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("A TooManyListenersException was thrown while trying to add " + "a SipListener to a TI SipProvider.",ex);    }catch (    SipException ex) {      throw new TckInternalError("The RI failed to send the request!",ex);    }    Request receivedRequest=receivedRequestEvent.getRequest();    List via=new LinkedList();    via.add(receivedRequest.getHeader(ViaHeader.NAME));    Response ok=null;    try {      ok=tiMessageFactory.createResponse(Response.OK,(CallIdHeader)receivedRequest.getHeader(CallIdHeader.NAME),(CSeqHeader)receivedRequest.getHeader(CSeqHeader.NAME),(FromHeader)receivedRequest.getHeader(FromHeader.NAME),(ToHeader)receivedRequest.getHeader(ToHeader.NAME),via,(MaxForwardsHeader)receivedRequest.getHeader(MaxForwardsHeader.NAME));      ((ToHeader)ok.getHeader("To")).setTag("ok");      addStatus(receivedRequest,ok);    } catch (    ParseException ex) {      throw new TiUnexpectedError("Failed to create an OK response!",ex);    }    try {      eventCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Error while trying to add riSipProvider");    }    try {      tiSipProvider.sendResponse(ok);    } catch (    SipException ex) {      ex.printStackTrace();      fail("A SipException occurred while trying to send an ok response.");    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The sent response was not received by the RI!",responseEvent);    assertNotNull("The sent response was not received by the RI!",responseEvent.getResponse());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public boolean isRecordingEnabled(){  return enableRecording;}  }
class C{  public boolean canImageBeInline(){  Logger logger=LoggerFactory.getLogger(ImageData.class);  if (imageSize > 4096) {    logger.warn(LogMessageConstant.IMAGE_SIZE_CANNOT_BE_MORE_4KB);    return false;  }  if (imageMask != null) {    logger.warn(LogMessageConstant.IMAGE_HAS_MASK);    return false;  }  return true;}  }
class C{  public final void testEqualsObject05(){  ECFieldF2m f1=new ECFieldF2m(2000);  ECFieldF2m f2=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000));  assertFalse(f1.equals(f2) || f2.equals(f1));}  }
class C{  public ServerManagementContext(ConfigurationRepository repository){  configRepository=repository;}  }
class C{  public AgeFileFilter(Date cutoffDate){  this(cutoffDate,true);}  }
class C{  public static Element parseXML(String xml) throws DSTException {  try {    Document doc=XMLUtils.toDOMDocument(xml,debug);    return doc.getDocumentElement();  } catch (  Exception ex) {    debug.error("DSTUtils.parseXML: Parsing error.",ex);    throw new DSTException(ex);  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.endElement(uri,localName,qName);  }}  }
class C{  public JMenu(){  this("");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ProviderIDElement createProviderIDElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProviderIDElementImpl(value);}  }
class C{  public void addSessionListener(Session session,String url) throws SessionException {  sessionOperationStrategy.getOperation(session.getSessionID()).addSessionListener(session,url);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public boolean isDifferential(){  return differential;}  }
class C{  public void invokeDynamic(String name,String desc,Handle bsm,Object... bsmArgs){  mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);}  }
class C{  public static ZoneRules of(ZoneOffset offset){  Objects.requireNonNull(offset,"offset");  return new ZoneRules(offset);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrName;  String attrValue;  doc=(Document)load("staff",true);  element=doc.createElementNS("http://www.w3.org/DOM","dom:elem");  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr","value");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","attr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens01_attrName","attr",attrName);  assertEquals("elementsetattributens01_attrValue","value",attrValue);}  }
class C{  public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseNameValuePair(buffer,cursor);}  }
class C{  private boolean isGenerateFullConfig(JsonValue params){  return !params.get(ConnectorUtil.OPENICF_CONNECTOR_REF).isNull() && !params.get(ConnectorUtil.OPENICF_CONFIGURATION_PROPERTIES).isNull();}  }
class C{  synchronized void receive(char oneChar) throws IOException {  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  try {    while (buffer != null && out == in) {      notifyAll();      wait(1000);      if (lastReader != null && !lastReader.isAlive()) {        throw new IOException("Pipe broken");      }    }  } catch (  InterruptedException e) {    IoUtils.throwInterruptedIoException();  }  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (in == -1) {    in=0;  }  buffer[in++]=oneChar;  if (in == buffer.length) {    in=0;  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  int nodeType=_nodeType;  int node=_startNode;  int expType=getExpandedTypeID(node);  _currentNode=node;  if (nodeType >= DTM.NTYPES) {    if (nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == nodeType) {        return returnNode(node);      }    } else {      if (m_expandedNameTable.getType(expType) == nodeType) {        return returnNode(node);      }    }  }  return END;}  }
class C{  public Object remove(Object key){  return remove((Object[])key);}  }
class C{  private static void logOptionValues(final CommandLine cli){  final List<String> optionsString=Arrays.stream(cli.getOptions()).filter(null).filter(null).map(null).collect(Collectors.toList());  CommandLineInterface.LOGGER.debug("Processing command line: {}.",optionsString);}  }
class C{  public static void checkDNS(String dns) throws IOException {  String string=dns.toLowerCase(Locale.US);  int length=string.length();  boolean first_letter=true;  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (first_letter) {      if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9') && (ch != '*')) {        throw new IOException("DNS name must start with a letter: " + dns);      }      first_letter=false;      continue;    }    if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9') || (ch == '-')|| (ch == '.')|| (ch == '*'))) {      throw new IOException("Incorrect DNS name: " + dns);    }    if (ch == '.') {      if (string.charAt(i - 1) == '-') {        throw new IOException("Incorrect DNS name: label ends with '-': " + dns);      }      first_letter=true;    }  }}  }
class C{  public void onSettings(View v){  if (sGoCoderSDK == null)   return;  WZMediaConfig configs[]=(mWZCameraView != null ? getVideoConfigs(mWZCameraView) : new WZMediaConfig[0]);  WZProfileLevel avcProfileLevels[]=WZEncoderAPI.getProfileLevels();  if (avcProfileLevels.length > 1)   Arrays.sort(avcProfileLevels);  Intent intent=new Intent(this,ConfigPrefsActivity.class);  intent.putExtra(ConfigPrefs.PREFS_TYPE,ConfigPrefs.ALL_PREFS);  intent.putExtra(ConfigPrefs.VIDEO_CONFIGS,configs);  intent.putExtra(ConfigPrefs.H264_PROFILE_LEVELS,avcProfileLevels);  startActivity(intent);}  }
class C{  public String orgNameToDN(String orgName){  return DNMapper.orgNameToDN(orgName);}  }
class C{  public static NotificationSet parseXML(String xml){  NotificationSetParser parser=new NotificationSetParser(xml);  return parser.parseXML();}  }
class C{  public final void debug(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,null);  }}  }
class C{  private boolean processDeleteConflict(CSN csn,Modification m,Entry modifiedEntry){  Attribute modAttr=m.getAttribute();  if (modAttr.isEmpty()) {    m.setModificationType(ModificationType.REPLACE);    AttributeBuilder builder=new AttributeBuilder(modAttr.getAttributeDescription());    for (Iterator<AttrValueHistorical> it=valuesHist.iterator(); it.hasNext(); ) {      AttrValueHistorical valInfo=it.next();      if (csn.isOlderThan(valInfo.getValueUpdateTime())) {        builder.add(valInfo.getAttributeValue());      } else       if (csn.isNewerThanOrEqualTo(valInfo.getValueDeleteTime())) {        it.remove();      }    }    m.setAttribute(builder.toAttribute());    if (csn.isNewerThan(getDeleteTime())) {      deleteTime=csn;    }    if (csn.isNewerThan(getLastUpdateTime())) {      lastUpdateTime=csn;    }  } else {    AttributeBuilder builder=new AttributeBuilder(modAttr);    AttributeType attrType=modAttr.getAttributeDescription().getAttributeType();    for (    ByteString val : modAttr) {      boolean deleteIt=true;      boolean addedInCurrentOp=false;      AttrValueHistorical valInfo=new AttrValueHistorical(val,attrType,null,csn);      AttrValueHistorical oldValInfo=valuesHist.get(valInfo);      if (oldValInfo == null) {        valuesHist.add(valInfo);      } else {        if (csn.equals(oldValInfo.getValueUpdateTime())) {          addedInCurrentOp=true;        }        if (csn.isNewerThanOrEqualTo(oldValInfo.getValueDeleteTime()) && csn.isNewerThanOrEqualTo(oldValInfo.getValueUpdateTime())) {          valuesHist.addOrReplace(valInfo);        } else         if (oldValInfo.isUpdate()) {          deleteIt=false;        }      }      if (!deleteIt || (!modifiedEntry.hasValue(modAttr.getAttributeDescription(),val) && !addedInCurrentOp)) {        builder.remove(val);        if (builder.isEmpty()) {          return false;        }      }    }    m.setAttribute(builder.toAttribute());    if (csn.isNewerThan(getLastUpdateTime())) {      lastUpdateTime=csn;    }  }  return true;}  }
class C{  private org.opends.server.types.Control checkAuthzControl(LDAPConnection connection,String authorizationID) throws LDAPConnectionException {  LinkedHashSet<String> attributes=new LinkedHashSet<>(1);  attributes.add(SchemaConstants.NO_ATTRIBUTES);  ArrayList<org.opends.server.types.Control> controls=new ArrayList<>(1);  org.opends.server.types.Control proxyAuthzControl=new ProxiedAuthV2Control(true,ByteString.valueOfUtf8(authorizationID));  controls.add(proxyAuthzControl);  try {    SearchRequestProtocolOp protocolOp=new SearchRequestProtocolOp(ByteString.empty(),SearchScope.BASE_OBJECT,DereferenceAliasesPolicy.NEVER,0,0,true,LDAPFilter.objectClassPresent(),attributes);    byte opType;    LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),protocolOp,controls);    connection.getLDAPWriter().writeMessage(msg);    do {      LDAPMessage responseMessage=connection.getLDAPReader().readMessage();      opType=responseMessage.getProtocolOpType();switch (opType) {case LDAPConstants.OP_TYPE_SEARCH_RESULT_DONE:switch (responseMessage.getSearchResultDoneProtocolOp().getResultCode()) {default :          LocalizableMessage m=INFO_RESULT_AUTHORIZATION_DENIED.get();        throw new LDAPConnectionException(m,CLIENT_SIDE_CONNECT_ERROR,null);case LDAPResultCode.SUCCESS:      return proxyAuthzControl;  }}} while (true);} catch (LDAPException|IOException ie) {LocalizableMessage m=INFO_RESULT_CLIENT_SIDE_ENCODING_ERROR.get();throw new LDAPConnectionException(m,CLIENT_SIDE_CONNECT_ERROR,null,ie);}}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentGroupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  List agentNames=rc.getOption(IArgument.AGENT_NAMES);  String[] params={realm,agentGroupName,""};  String agentName="";  try {    AMIdentity amidGroup=new AMIdentity(adminSSOToken,agentGroupName,IdType.AGENTGROUP,realm,null);    for (Iterator i=agentNames.iterator(); i.hasNext(); ) {      agentName=(String)i.next();      params[2]=agentName;      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_AGENT_TO_GROUP",params);      AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);      AgentConfiguration.AddAgentToGroup(amidGroup,amid);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_AGENT_TO_GROUP",params);    }    if (agentNames.size() > 1) {      outputWriter.printlnMessage(getResourceString("add-agent-to-group-succeeded-pural"));    } else {      outputWriter.printlnMessage(getResourceString("add-agent-to-group-succeeded"));    }  } catch (  IdRepoException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("AddAgentsToGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AGENT_TO_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("AddAgentsToGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AGENT_TO_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("AddAgentsToGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AGENT_TO_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static String decryptWithAsymmetricKey(String data,String encAlgorithm,Key encKey) throws Exception {  try {    byte[] tmp=Base64.decode(data);    Map map=unwrapKeyWithEncodedData(tmp);    byte[] encData=(byte[])map.get(ENCRYPTED_DATA);    byte[] keyData=(byte[])map.get(ENCRYPTED_KEY);    Cipher cipher=Cipher.getInstance(encKey.getAlgorithm());    cipher.init(Cipher.UNWRAP_MODE,encKey);    Key secretKey=cipher.unwrap(keyData,encAlgorithm,Cipher.SECRET_KEY);    cipher=Cipher.getInstance(encAlgorithm);    cipher.init(Cipher.DECRYPT_MODE,secretKey);    byte[] decryptedData=cipher.doFinal(encData);    return Base64.encode(decryptedData);  } catch (  NoSuchAlgorithmException nse) {    throw new Exception(nse.getMessage());  }catch (  InvalidKeyException ike) {    throw new Exception(ike.getMessage());  }}  }
class C{  public FileUpload(FileItemFactory fileItemFactory){  super();  this.fileItemFactory=fileItemFactory;}  }
class C{  public void mouseExited(MouseEvent e){  ((MouseListener)a).mouseExited(e);  ((MouseListener)b).mouseExited(e);}  }
class C{  synchronized void updatePlatformServiceGlobals(ServiceSchemaManager scm) throws SMSException {  ServiceSchema platformSchema=scm.getGlobalSchema();  Map attrs=platformSchema.getAttributeDefaults();  platformLocale=CollectionHelper.getMapAttr(attrs,ISAuthConstants.PLATFORM_LOCALE_ATTR);  if (debug.messageEnabled()) {    debug.message("PlatformLocale = " + platformLocale);  }}  }
class C{  public static <T>T orderWrites(final T ref){  theVolatile=0;  return ref;}  }
class C{  public static JEditorPane makeHtmlPane(LocalizableMessage text,Font font){  return makeHtmlPane(text,null,font);}  }
class C{  private void timeKeys(ByteSequence attributeValue,Collection<ByteString> keys){  long timeInMillis=0L;  try {    timeInMillis=GeneralizedTime.valueOf(attributeValue.toString()).getTimeInMillis();  } catch (  IllegalArgumentException e) {    return;  }  GregorianCalendar cal=new GregorianCalendar(TIME_ZONE_UTC);  cal.setTimeInMillis(timeInMillis);  addKeyIfNotZero(keys,cal,Calendar.SECOND,SECOND);  addKeyIfNotZero(keys,cal,Calendar.MINUTE,MINUTE);  addKeyIfNotZero(keys,cal,Calendar.HOUR_OF_DAY,HOUR);  addKeyIfNotZero(keys,cal,Calendar.DAY_OF_MONTH,DAY);  addKeyIfNotZero(keys,cal,Calendar.MONTH,MONTH);  addKeyIfNotZero(keys,cal,Calendar.YEAR,YEAR);}  }
class C{  @Override public int hashCode(){  return pattern.hashCode();}  }
class C{  public String next(String pattern){  return next(patternCache.forName(pattern));}  }
class C{  public static Object put(Object object,Object element,Object value){  for (  Resolver resolver : resolvers(object)) {    Object resolved=resolver.put(object,element,value);    if (resolved != Resolver.UNRESOLVED) {      return resolved;    }  }  return Resolver.UNRESOLVED;}  }
class C{  private static void rdf_ParseTypeResourcePropertyElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  XMPNode newStruct=addChildNode(xmp,xmpParent,xmlNode,"",isTopLevel);  newStruct.getOptions().setStruct(true);  for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {    Node attribute=xmlNode.getAttributes().item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      continue;    }    String attrLocal=attribute.getLocalName();    String attrNS=attribute.getNamespaceURI();    if (XML_LANG.equals(attribute.getNodeName())) {      addQualifierNode(newStruct,XML_LANG,attribute.getNodeValue());    } else     if (NS_RDF.equals(attrNS) && ("ID".equals(attrLocal) || "parseType".equals(attrLocal))) {      continue;    } else {      throw new XMPException("Invalid attribute for ParseTypeResource property element",BADRDF);    }  }  rdf_PropertyElementList(xmp,newStruct,xmlNode,false);  if (newStruct.getHasValueChild()) {    fixupQualifiedNode(newStruct);  }}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if (proxyCount == -1) {    FSUtils.debug.error("FSScoping.toURLEncodedQueryString: " + "proxyCount is not defined.");    throw new FSMsgException("proxyCountNotDefined",null);  }  StringBuffer sb=new StringBuffer(100);  sb.append("ProxyCount=").append(proxyCount).append("&");  if (idpList != null) {    IDPEntries entries=idpList.getIDPEntries();    if (entries != null) {      List idps=entries.getIDPEntryList();      if (idps != null && idps.size() != 0) {        Iterator iter=idps.iterator();        StringBuffer strProviders=new StringBuffer(100);        String space="";        while (iter.hasNext()) {          IDPEntry entry=(IDPEntry)iter.next();          String providerID=entry.getProviderID();          strProviders.append(space).append(providerID);          space=" ";        }        sb.append("IDPEntries=").append(URLEncDec.encode(strProviders.toString()));      }    }  }  sb.append(IFSConstants.AMPERSAND);  return sb.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public Entitlement(String resourceName,Map<String,Boolean> actionValues){  setResourceName(resourceName);  setActionValues(actionValues);}  }
class C{  public void requestRemainingAuthenticationFailureCount(){  operations.add(PasswordPolicyStateOperationType.GET_REMAINING_AUTHENTICATION_FAILURE_COUNT);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  Subject adminSubject=SubjectUtils.createSubject(adminSSOToken);  String realm=getStringOptionValue(IArgument.REALM_NAME);  List policyNames=(List)rc.getOption(ARGUMENT_POLICY_NAMES);  String file=getStringOptionValue(IArgument.FILE);  if (policyNames == null) {    policyNames=new ArrayList();  }  if (file != null) {    policyNames.addAll(AttributeValues.parseValues(file));  }  if (policyNames.isEmpty()) {    throw new CLIException(getResourceString("missing-policy-names"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  IOutput outputWriter=getOutputWriter();  String currentPolicyName=null;  try {    PrivilegeManager pm=PrivilegeManager.getInstance(realm,adminSubject);    String[] params=new String[2];    params[0]=realm;    for (Iterator i=policyNames.iterator(); i.hasNext(); ) {      currentPolicyName=(String)i.next();      params[1]=currentPolicyName;      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_POLICY_IN_REALM",params);      pm.remove(currentPolicyName);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_POLICY_IN_REALM",params);    }    String[] arg={realm};    outputWriter.printlnMessage(MessageFormat.format(getResourceString("delete-policy-in-realm-succeed"),(Object[])arg));  } catch (  EntitlementException e) {    String[] args={realm,currentPolicyName,e.getMessage()};    debugError("DeleteXACML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_POLICY_IN_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  boolean isZero(){  return (intLen == 0);}  }
class C{  public boolean equals(Object obj){  if (obj == null || (!(obj instanceof CodeSigner))) {    return false;  }  CodeSigner that=(CodeSigner)obj;  if (this == that) {    return true;  }  Timestamp thatTimestamp=that.getTimestamp();  if (timestamp == null) {    if (thatTimestamp != null) {      return false;    }  } else {    if (thatTimestamp == null || (!timestamp.equals(thatTimestamp))) {      return false;    }  }  return signerCertPath.equals(that.getSignerCertPath());}  }
class C{  private static byte char64(char x){  if (x < 0 || x > index_64.length) {    return -1;  }  return index_64[x];}  }
class C{  @Override public void makeImmutable(){  if (isMutable) {    if (authnStatements != null) {      int length=authnStatements.size();      for (int i=0; i < length; i++) {        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);        authn.makeImmutable();      }      authnStatements=Collections.unmodifiableList(authnStatements);    }    if (authzDecisionStatements != null) {      int length=authzDecisionStatements.size();      for (int i=0; i < length; i++) {        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);        authz.makeImmutable();      }      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);    }    if (attributeStatements != null) {      int length=attributeStatements.size();      for (int i=0; i < length; i++) {        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);        attr.makeImmutable();      }      attributeStatements=Collections.unmodifiableList(attributeStatements);    }    if (statements != null) {      statements=Collections.unmodifiableList(statements);    }    if (conditions != null) {      conditions.makeImmutable();    }    if (issuer != null) {      issuer.makeImmutable();    }    if (subject != null) {      subject.makeImmutable();    }    if (advice != null) {      advice.makeImmutable();    }    isMutable=false;  }}  }
class C{  public FSAccountFedInfo readAccountFedInfo(String userID,String providerID,String nameIDValue) throws FSAccountMgmtException {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountManager.readAccountFedInfo() : user=" + userID + ", providerID="+ providerID+ ", nameIDValue="+ nameIDValue);  }  if (userID == null) {    FSUtils.debug.error("FSAccountManager.readAccountFedInfo():" + "Invalid Argument : user ID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_USER_DN,null);  }  if ((providerID == null) || (providerID.length() <= 0)) {    FSUtils.debug.error("FSAccountManager.readAccountFedInfo():" + "Invalid Argument : providerID is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_PROVIDER_ID,null);  }  Set existFedInfoSet=null;  try {    existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);  } catch (  DataStoreProviderException ame) {    FSUtils.debug.error("FSAccountManager.readAccountFedInfo():Exception:",ame);    throw new FSAccountMgmtException(ame.getMessage());  }  if (existFedInfoSet != null && !existFedInfoSet.isEmpty()) {    String filter=FSAccountUtils.createFilter(providerID);    Iterator i=existFedInfoSet.iterator();    while (i.hasNext()) {      String existFedInfoStr=(String)i.next();      if (existFedInfoStr.indexOf(filter) >= 0 && (SP_FILTER == null || existFedInfoStr.indexOf(SP_FILTER) >= 0) && (nameIDValue == null || existFedInfoStr.indexOf(nameIDValue) >= 0)) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAccountManager.readAccountFedInfo(): " + " value found: " + existFedInfoStr);        }        FSAccountFedInfo afi=FSAccountUtils.stringToObject(existFedInfoStr);        if (!afi.isFedStatusActive()) {          return null;        }        return afi;      }    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountManager.readAccountFedInfo(): value with user: " + userID + " and providerID : "+ providerID+ " not found");  }  return null;}  }
class C{  public FileAlterationObserver(String directoryName,FileFilter fileFilter){  this(new File(directoryName),fileFilter);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static void saveAsASCII(NSArray root,File out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toASCIIPropertyList());  w.close();}  }
class C{  public EasyDeviceMod(final Context context){  this.context=context;  tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);}  }
class C{  private synchronized void initialize() throws SMSException {  if (initialized) {    return;  }  debug=Debug.getInstance("amSMSLdap");  AMResourceBundleCache amCache=AMResourceBundleCache.getInstance();  bundle=amCache.getResBundle(IUMSConstants.UMS_BUNDLE_NAME,java.util.Locale.ENGLISH);  OU_ATTR[0]=getNamingAttribute();  O_ATTR[0]=getOrgNamingAttribute();  String enableP=SystemProperties.get(SMSEntry.DB_PROXY_ENABLE);  enableProxy=(enableP != null) && enableP.equalsIgnoreCase("true");  if (debug.messageEnabled()) {    debug.message("SMSLdapObject: proxy enable value: " + enableProxy);  }  try {    if (enableProxy) {      adminPrincipal=new AuthPrincipal((String)AccessController.doPrivileged(new AdminDNAction()));      dlayer=DataLayer.getInstance();      if (debug.messageEnabled()) {        debug.message("SMSLdapObject: DataLayer instance " + "obtained.");      }    } else {      smdlayer=SMDataLayer.getInstance();      if (debug.messageEnabled()) {        debug.message("SMSLdapObject: SMDataLayer instance " + "obtained.");      }    }    if ((dlayer == null) && (smdlayer == null)) {      debug.error("SMSLdapObject: Unable to initialize LDAP");      throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.CONFIG_MGR_ERROR,null));    }    debug.message("SMSLdapObject: LDAP Initialized successfully");    DataLayer.initConnectionParams();    connNumRetry=DataLayer.getConnNumRetry();    connRetryInterval=DataLayer.getConnRetryInterval();    retryErrorCodes=DataLayer.getRetryErrorCodes();    String serviceDN=SMSEntry.SERVICES_RDN + SMSEntry.COMMA + getRootSuffix();    if (!entryExists(serviceDN)) {      Map attrs=new HashMap();      Set attrValues=new HashSet();      attrValues.add(SMSEntry.OC_TOP);      attrValues.add(SMSEntry.OC_ORG_UNIT);      attrs.put(SMSEntry.ATTR_OBJECTCLASS,attrValues);      create(adminPrincipal,serviceDN,attrs);    }  } catch (  Exception e) {    debug.error("SMSEntry: Unable to initalize(exception):",e);    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.CONFIG_MGR_ERROR,null));  }  initialized=true;}  }
class C{  public void clearStore(){  if (store == null)   return;  try {    if (SecurityUtil.isPackageProtectionEnabled()) {      try {        AccessController.doPrivileged(new PrivilegedStoreClear());      } catch (      PrivilegedActionException ex) {        Exception exception=ex.getException();        log.error("Exception clearing the Store: " + exception,exception);      }    } else {      store.clear();    }  } catch (  IOException e) {    log.error("Exception clearing the Store: " + e,e);  }}  }
class C{  public Jwt validateJwtSessionCookie(MessageInfo messageInfo){  return getServerAuthModule().validateJwtSessionCookie(messageInfo);}  }
class C{  private boolean isVLVIndex(AbstractIndexDescriptor index){  return index instanceof VLVIndexDescriptor;}  }
class C{  public synchronized final Scheme unregister(String name){  if (name == null)   throw new IllegalArgumentException("Name must not be null.");  Scheme gone=registeredSchemes.remove(name);  return gone;}  }
class C{  public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  private static ArrayList<DataType> generateInitialData(Context context,ModelAction modelAction){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  ArrayList<DataType> initData=null;  if (modelAction.getTypeName().equals(SendSmsAction.ACTION_NAME) && sharedPreferences.getBoolean(context.getString(R.string.pref_key_sms_signature),true)) {    initData=new ArrayList<DataType>();    initData.add(null);    initData.add(new OmniText(sharedPreferences.getString(context.getString(R.string.pref_key_sms_signature_settings),"")));  } else   if (modelAction.getTypeName().equals(SendGmailAction.ACTION_NAME) && sharedPreferences.getBoolean(context.getString(R.string.pref_key_gmail_signature),true)) {    initData=new ArrayList<DataType>();    initData.add(null);    initData.add(null);    initData.add(null);    initData.add(new OmniText(sharedPreferences.getString(context.getString(R.string.pref_key_gmail_signature_settings),"")));  } else   if (modelAction.getTypeName().equals(ShowWebsiteAction.ACTION_NAME)) {    initData=new ArrayList<DataType>();    initData.add(new OmniText("http://"));  }  return initData;}  }
class C{  public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {  if ((pos < 0) || ((pos + len) > doc.getLength())) {    throw new BadLocationException("DefaultEditorKit.write",pos);  }  Segment data=new Segment();  int nleft=len;  int offs=pos;  Object endOfLineProperty=doc.getProperty(EndOfLineStringProperty);  if (endOfLineProperty == null) {    try {      endOfLineProperty=System.getProperty("line.separator");    } catch (    SecurityException se) {    }  }  String endOfLine;  if (endOfLineProperty instanceof String) {    endOfLine=(String)endOfLineProperty;  } else {    endOfLine=null;  }  if (endOfLineProperty != null && !endOfLine.equals("\n")) {    while (nleft > 0) {      int n=Math.min(nleft,4096);      doc.getText(offs,n,data);      int last=data.offset;      char[] array=data.array;      int maxCounter=last + data.count;      for (int counter=last; counter < maxCounter; counter++) {        if (array[counter] == '\n') {          if (counter > last) {            out.write(array,last,counter - last);          }          out.write(endOfLine);          last=counter + 1;        }      }      if (maxCounter > last) {        out.write(array,last,maxCounter - last);      }      offs+=n;      nleft-=n;    }  } else {    while (nleft > 0) {      int n=Math.min(nleft,4096);      doc.getText(offs,n,data);      out.write(data.array,data.offset,data.count);      offs+=n;      nleft-=n;    }  }  out.flush();}  }
class C{  protected Source findXsltSource(WebResource directory) throws IOException {  if (localXsltFile != null) {    WebResource resource=resources.getResource(directory.getWebappPath() + localXsltFile);    if (resource.isFile()) {      InputStream is=resource.getInputStream();      if (is != null) {        if (Globals.IS_SECURITY_ENABLED) {          return secureXslt(is);        } else {          return new StreamSource(is);        }      }    }    if (debug > 10) {      log("localXsltFile '" + localXsltFile + "' not found");    }  }  if (contextXsltFile != null) {    InputStream is=getServletContext().getResourceAsStream(contextXsltFile);    if (is != null) {      if (Globals.IS_SECURITY_ENABLED) {        return secureXslt(is);      } else {        return new StreamSource(is);      }    }    if (debug > 10)     log("contextXsltFile '" + contextXsltFile + "' not found");  }  if (globalXsltFile != null) {    File f=validateGlobalXsltFile();    if (f != null) {      try (FileInputStream fis=new FileInputStream(f)){        byte b[]=new byte[(int)f.length()];        fis.read(b);        return new StreamSource(new ByteArrayInputStream(b));      }     }  }  return null;}  }
class C{  public PlayerAnimationEvent(final Player player){  super(player);  animationType=PlayerAnimationType.ARM_SWING;}  }
class C{  public int size(){  return attrs.size();}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testDestroyFailedException01(){  DestroyFailedException dfE=new DestroyFailedException();  assertNull("getMessage() must return null.",dfE.getMessage());  assertNull("getCause() must return null",dfE.getCause());}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    Class<?> ct=contents.getClass().getComponentType();    contents=(T[])Array.newInstance(ct,elementCount);  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createDocumentFragment();  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public byte[] encodeAsBytes(String transport){  if (this.isNullRequest()) {    return "\r\n\r\n".getBytes();  } else   if (this.requestLine == null) {    return new byte[0];  }  byte[] rlbytes=null;  if (requestLine != null) {    try {      rlbytes=requestLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[rlbytes.length + superbytes.length];  System.arraycopy(rlbytes,0,retval,0,rlbytes.length);  System.arraycopy(superbytes,0,retval,rlbytes.length,superbytes.length);  return retval;}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  @SuppressWarnings("unchecked") public CompositeFileComparator(Iterable<Comparator<File>> delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    List<Comparator<File>> list=new ArrayList<Comparator<File>>();    for (    Comparator<File> comparator : delegates) {      list.add(comparator);    }    this.delegates=(Comparator<File>[])list.toArray(new Comparator<?>[list.size()]);  }}  }
class C{  public short acceptNode(int n){  XPathContext xctxt=getXPathContext();  try {    xctxt.pushCurrentNode(n);    for (int i=0; i < m_nodeTests.length; i++) {      PredicatedNodeTest pnt=m_nodeTests[i];      XObject score=pnt.execute(xctxt,n);      if (score != NodeTest.SCORE_NONE) {        if (pnt.getPredicateCount() > 0) {          if (pnt.executePredicates(n,xctxt))           return DTMIterator.FILTER_ACCEPT;        } else         return DTMIterator.FILTER_ACCEPT;      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();  }  return DTMIterator.FILTER_SKIP;}  }
class C{  public void select_items(Set<BrdItem> p_items){  if (board_is_read_only)   return;  display_layer_messsage();  if (interactive_state instanceof StateMenu) {    set_interactive_state(StateSelectedItem.get_instance(p_items,interactive_state,this,actlog));  } else   if (interactive_state instanceof StateSelectedItem) {    ((StateSelectedItem)interactive_state).get_item_list().addAll(p_items);    repaint();  }}  }
class C{  public void clear(){synchronized (names) {    names.clear();  }}  }
class C{  public MappedChannelRandomAccessSource(FileChannel channel,long offset,long length){  if (offset < 0)   throw new IllegalArgumentException(offset + " is negative");  if (length <= 0)   throw new IllegalArgumentException(length + " is zero or negative");  this.channel=channel;  this.offset=offset;  this.length=length;  this.source=null;}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){}  }
class C{  public void close(){  if (acceptT != null) {    log("Closing AcceptThread" + acceptT);    acceptT.close();    acceptT=null;  }}  }
class C{  public boolean retainAll(Collection<?> c){  if (c == null)   throw new NullPointerException();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len != 0) {      int newlen=0;      Object[] temp=new Object[len];      for (int i=0; i < len; ++i) {        Object element=elements[i];        if (c.contains(element))         temp[newlen++]=element;      }      if (newlen != len) {        setArray(Arrays.copyOf(temp,newlen));        return true;      }    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementElement createAsymmetricKeyAgreementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  boolean hasChild;  String name;  Node child;  String value;  NodeList addresses;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  addresses=aNewDoc.getElementsByTagName("emp:address");  element=(Element)addresses.item(0);  assertNotNull("empAddressNotNull",element);  aNode=doc.importNode(element,true);  hasChild=aNode.hasChildNodes();  assertTrue("throw_True",hasChild);  name=aNode.getNodeName();  assertEquals("nodeName","emp:address",name);  child=aNode.getFirstChild();  value=child.getNodeValue();  assertEquals("nodeValue","27 South Road. Dallas, texas 98556",value);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AuthenticationStatementType createAuthenticationStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementTypeImpl();}  }
class C{  public TagField createArtworkField(byte[] data,String mimeType){  AbstractID3v2Frame frame=createFrame(getFrameAndSubIdFromGenericKey(FieldKey.COVER_ART).getFrameId());  FrameBodyAPIC body=(FrameBodyAPIC)frame.getBody();  body.setObjectValue(DataTypes.OBJ_PICTURE_DATA,data);  body.setObjectValue(DataTypes.OBJ_PICTURE_TYPE,PictureTypes.DEFAULT_ID);  body.setObjectValue(DataTypes.OBJ_MIME_TYPE,mimeType);  body.setObjectValue(DataTypes.OBJ_DESCRIPTION,"");  return frame;}  }
class C{  static String expandEnvironmentVariables(String value){  if (null == value) {    return null;  }  Matcher m=ENV_VAR_PATTERN.matcher(value);  StringBuffer sb=new StringBuffer();  while (m.find()) {    String envVarValue=null;    String envVarName=null == m.group(1) ? m.group(2) : m.group(1);    if (envVarName.startsWith(("env."))) {      envVarValue=System.getenv(envVarName.substring(3));    } else {      envVarValue=System.getProperty(envVarName);    }    m.appendReplacement(sb,null == envVarValue ? "" : Matcher.quoteReplacement(envVarValue));  }  m.appendTail(sb);  return sb.toString();}  }
class C{  void recomposeAttributeSets(ElemAttributeSet attrSet){  ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName());  if (null == attrSetList) {    attrSetList=new ArrayList();    m_attrSets.put(attrSet.getName(),attrSetList);  }  attrSetList.add(attrSet);}  }
class C{  private void maximize(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.MAXIMIZED_BOTH);  }}  }
class C{  public void collapseRow(int row){  collapsePath(getPathForRow(row));}  }
class C{  public boolean skipString(String s) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  final int length=s.length();  for (int i=0; i < length; i++) {    char c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c != s.charAt(i)) {      fCurrentEntity.position-=i + 1;      return false;    }    if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);      if (load(i + 1,false)) {        fCurrentEntity.position-=i + 1;        return false;      }    }  }  return true;}  }
class C{  public Builder collective(boolean isCollective){  this.isCollective=isCollective;  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.HeaderType createHeaderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.HeaderTypeImpl();}  }
class C{  public Conditions(java.util.Date notBefore,java.util.Date notOnOrAfter,Condition condition,AudienceRestrictionCondition arc,DoNotCacheCondition doNotCacheCnd) throws SAMLException {  this(notBefore,notOnOrAfter,condition,arc);  if (doNotCacheCnd != null) {    doNotCache=doNotCacheCnd;  }}  }
class C{  public void writeAddRequest(final int messageID,final AddRequest request) throws IOException {  logger.trace("ENCODE LDAP ADD REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    LDAP.writeEntry(writer,LDAP.OP_TYPE_ADD_REQUEST,request);  }  writeMessageFooter(request.getControls());}  }
class C{  public Archiver(){  String filesPerKeyStoreString=lmanager.getProperty(LogConstants.FILES_PER_KEYSTORE);  if ((filesPerKeyStoreString == null) || (filesPerKeyStoreString.length() == 0)) {    Debug.error("Archiver:could not get the files per keystore string." + " Setting it to 1.");    filesPerKeyStoreString="1";  }}  }
class C{  public boolean isAccountExpired(){  if (isAccountExpired != ConditionResult.UNDEFINED) {    if (logger.isTraceEnabled()) {      logger.trace("Returning stored result of %b for user %s",isAccountExpired == ConditionResult.TRUE,userDNString);    }    return isAccountExpired == ConditionResult.TRUE;  }  try {    accountExpirationTime=getGeneralizedTime0(userEntry,OP_ATTR_ACCOUNT_EXPIRATION_TIME);  } catch (  Exception e) {    logger.traceException(e,"User %s is considered to have an expired account because an error occurred " + "while attempting to make the determination.",userDNString);    isAccountExpired=ConditionResult.TRUE;    return true;  }  if (accountExpirationTime > currentTime) {    isAccountExpired=ConditionResult.FALSE;    logger.trace("The account for user %s is not expired because the expiration time has not yet arrived.",userDNString);  } else   if (accountExpirationTime >= 0) {    isAccountExpired=ConditionResult.TRUE;    logger.trace("The account for user %s is expired because the expiration time in that account has passed.",userDNString);  } else {    isAccountExpired=ConditionResult.FALSE;    logger.trace("The account for user %s is not expired because there is no expiration time in the user's entry.",userDNString);  }  return isAccountExpired == ConditionResult.TRUE;}  }
class C{  public void resetStats(){  ConcurrentHashMap<String,QueryStats> queries=perPoolStats.get(poolName);  if (queries != null) {    Iterator<String> it=queries.keySet().iterator();    while (it.hasNext())     it.remove();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(5);  value=textNode.getNodeValue();  assertEquals("textSplitTextTwoAssert","Roger",value);}  }
class C{  Object adjustValue(Object value,Map attributes,Object key,int direction) throws BadLocationException, ParseException {  if (key != null) {    int field;    if (key == DateFormat.Field.HOUR1) {      key=DateFormat.Field.HOUR0;    }    field=((DateFormat.Field)key).getCalendarField();    Calendar calendar=getCalendar();    if (calendar != null) {      calendar.setTime((Date)value);      int fieldValue=calendar.get(field);      try {        calendar.add(field,direction);        value=calendar.getTime();      } catch (      Throwable th) {        value=null;      }      return value;    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamenomatch.class,args);}  }
class C{  private static Response createResponse(Response samlResponse,List assertions) throws SAML2Exception {  Response response=new ResponseImpl();  response.setVersion(samlResponse.getVersion());  response.setIssueInstant(samlResponse.getIssueInstant());  response.setID(samlResponse.getID());  response.setInResponseTo(samlResponse.getInResponseTo());  response.setIssuer(samlResponse.getIssuer());  response.setDestination(samlResponse.getDestination());  response.setExtensions(samlResponse.getExtensions());  response.setConsent(samlResponse.getConsent());  response.setStatus(samlResponse.getStatus());  response.setAssertion(assertions);  return response;}  }
class C{  public static int combine(int hashCode,Object value){  return combine(hashCode,value.hashCode());}  }
class C{  protected void installKeyboardActions(){  InputMap km=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(comboBox,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,km);  LazyActionMap.installLazyActionMap(comboBox,BasicComboBoxUI.class,"ComboBox.actionMap");}  }
class C{  LambdaFormBuffer replaceParameterByCopy(int pos,int valuePos){  assert (pos != valuePos);  replaceName(pos,names[valuePos]);  noteDuplicate(pos,valuePos);  return this;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiFileChooserUI();  return MultiLookAndFeel.createUIs(mui,((MultiFileChooserUI)mui).uis,a);}  }
class C{  protected void uninstallDefaults(JComponent c){  SynthContext context=getContext(c,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.CanonicalizationMethodType createCanonicalizationMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.CanonicalizationMethodTypeImpl();}  }
class C{  public boolean isInProgress(){  return inProgress;}  }
class C{  public NO_PERMISSION(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  private void stop(){  if (host.getLogger().isDebugEnabled())   host.getLogger().debug(sm.getString("userConfig.stop"));}  }
class C{  private JPanel createServerDetailsPanel(){  JPanel p=new JPanel(new GridBagLayout());  p.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=new Insets(0,0,0,0);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  setTitleBorder(p,INFO_CTRL_PANEL_SERVER_DETAILS_TITLE_BORDER.get());  JPanel auxPanel=new JPanel(new GridBagLayout());  auxPanel.setOpaque(false);  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.weightx=0.0;  JLabel[] leftLabels={Utilities.createPrimaryLabel(INFO_CTRL_PANEL_HOST_NAME_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_ADMINISTRATIVE_USERS_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_INSTALLATION_PATH_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_INSTANCE_PATH_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_OPENDS_VERSION_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_JAVA_VERSION_LABEL.get()),Utilities.createPrimaryLabel(INFO_CTRL_PANEL_ADMIN_CONNECTOR_LABEL.get())};  lInstancePath=leftLabels[3];  hostName=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  administrativeUsers=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  installPath=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  instancePath=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  opendsVersion=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  javaVersion=new SelectableLabelWithHelpIcon(LocalizableMessage.EMPTY,null);  adminConnector=Utilities.makeHtmlPane("",ColorAndFontConstants.defaultFont);  JComponent[] rightLabels={hostName,administrativeUsers,installPath,instancePath,opendsVersion,javaVersion,adminConnector};  for (int i=0; i < leftLabels.length; i++) {    gbc.insets.left=0;    if (i != 0) {      gbc.insets.top=10;    }    gbc.gridwidth=GridBagConstraints.RELATIVE;    auxPanel.add(leftLabels[i],gbc);    gbc.gridwidth=GridBagConstraints.REMAINDER;    gbc.insets.left=5;    auxPanel.add(rightLabels[i],gbc);    leftLabels[i].setLabelFor(rightLabels[i]);  }  gbc.insets.top=2;  gbc.insets.right=5;  gbc.insets.left=5;  gbc.insets.bottom=5;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  p.add(auxPanel,gbc);  return p;}  }
class C{  public static void configAgentsOnly(String realm,Map<String,Map<String,String>> agtAttrs){  String classMethod="Agent.configAgentsOnly:";  if ((agtAttrs == null) || agtAttrs.isEmpty()) {    if (debug.messageEnabled()) {      debug.message(classMethod + "got null attr map for realm " + realm);    }    return;  }  SsoServerPolicyAgents sss=sunMib.getPolicyAgentsGroup();  TableSsoServerPolicy22AgentTable t22tab=null;  TableSsoServerPolicyJ2EEAgentTable j2eetab=null;  TableSsoServerPolicyWebAgentTable watab=null;  SsoServerWSSAgents ssa=sunMib.getWssAgentsGroup();  TableSsoServerWSSAgentsSTSAgentTable ststab=null;  TableSsoServerWSSAgentsWSPAgentTable wsptab=null;  TableSsoServerWSSAgentsWSCAgentTable wsctab=null;  TableSsoServerWSSAgentsDSCAgentTable dsctab=null;  if (sss != null) {    try {      t22tab=sss.accessSsoServerPolicy22AgentTable();      j2eetab=sss.accessSsoServerPolicyJ2EEAgentTable();      watab=sss.accessSsoServerPolicyWebAgentTable();      ststab=ssa.accessSsoServerWSSAgentsSTSAgentTable();      wsptab=ssa.accessSsoServerWSSAgentsWSPAgentTable();      wsctab=ssa.accessSsoServerWSSAgentsWSCAgentTable();      dsctab=ssa.accessSsoServerWSSAgentsDSCAgentTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting Agents tables: ",ex);      return;    }  }  if (ssa != null) {    try {      ststab=ssa.accessSsoServerWSSAgentsSTSAgentTable();      wsptab=ssa.accessSsoServerWSSAgentsWSPAgentTable();      wsctab=ssa.accessSsoServerWSSAgentsWSCAgentTable();      dsctab=ssa.accessSsoServerWSSAgentsDSCAgentTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting WSS Agents tables: ",ex);      return;    }  }  StringBuilder sb=new StringBuilder(classMethod);  if (debug.messageEnabled()) {    sb.append("agents for realm ").append(realm).append(", # = ").append(agtAttrs.size()).append("\n");  }  int wai=1;  int j2eei=1;  int t22i=1;  int stsi=1;  int wspi=1;  int wsci=1;  int dsci=1;  Integer ri=getRealmIndexFromName(realm);  if (ri == null) {    debug.error(classMethod + "didn't find index for realm " + realm);    return;  }  for (  Map.Entry<String,Map<String,String>> entry : agtAttrs.entrySet()) {    String agtname=entry.getKey();    Map<String,String> hm=entry.getValue();    ;    String atype=hm.get(Constants.ATTR_NAME_AGENT_TYPE);    String grpmem=hm.get("groupmembership");    if (grpmem == null) {      grpmem=None;    } else {      grpmem=getEscapedString(grpmem);    }    agtname=getEscapedString(agtname);    if (debug.messageEnabled()) {      sb.append("  agent name = ").append(agtname).append(", type = ").append(atype).append(", membership = ").append(grpmem).append("\n");    }    if (atype.equals("WebAgent")) {      String aurl=hm.get("com.sun.identity.agents.config.agenturi.prefix");      String lurl=hm.get("com.sun.identity.agents.config.login.url");      SsoServerPolicyWebAgentEntryImpl aei=new SsoServerPolicyWebAgentEntryImpl(sunMib);      aei.SsoServerRealmIndex=ri;      aei.PolicyWebAgentIndex=new Integer(wai++);      aei.PolicyWebAgentName=agtname;      aei.PolicyWebAgentGroup=grpmem;      aei.PolicyWebAgentAgentURL=aurl;      aei.PolicyWebAgentServerURL=lurl;      ObjectName aname=aei.createSsoServerPolicyWebAgentEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for Policy WebAgent '" + agtname+ "'");        continue;      }      try {        watab.addEntry(aei,aname);        if ((server != null) && (aei != null)) {          server.registerMBean(aei,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }    } else     if (atype.equals("2.2_Agent")) {      SsoServerPolicy22AgentEntryImpl aei=new SsoServerPolicy22AgentEntryImpl(sunMib);      aei.SsoServerRealmIndex=ri;      aei.Policy22AgentIndex=new Integer(t22i++);      aei.Policy22AgentName=agtname;      ObjectName aname=aei.createSsoServerPolicy22AgentEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for Policy 2.2 Agent '" + agtname+ "'");        continue;      }      try {        t22tab.addEntry(aei,aname);        if ((server != null) && (aei != null)) {          server.registerMBean(aei,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }    } else     if (atype.equals("J2EEAgent")) {      SsoServerPolicyJ2EEAgentEntryImpl aei=new SsoServerPolicyJ2EEAgentEntryImpl(sunMib);      String aurl=hm.get("com.sun.identity.client.notification.url");      if (aurl == null) {        aurl=None;      }      String lurl=hm.get("com.sun.identity.agents.config.login.url");      aei.PolicyJ2EEAgentGroup=grpmem;      aei.PolicyJ2EEAgentAgentURL=aurl;      aei.PolicyJ2EEAgentServerURL=lurl;      aei.PolicyJ2EEAgentName=agtname;      aei.PolicyJ2EEAgentIndex=new Integer(j2eei++);      aei.SsoServerRealmIndex=ri;      ObjectName aname=aei.createSsoServerPolicyJ2EEAgentEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for Policy J2EE Agent '" + agtname+ "'");        continue;      }      try {        j2eetab.addEntry(aei,aname);        if ((server != null) && (aei != null)) {          server.registerMBean(aei,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + agtname + ": "+ ex.getMessage());      }    } else     if (atype.equals("SharedAgent")) {    } else {      debug.error(classMethod + "agent type = " + atype+ ", agent name = "+ agtname+ " not supported.");    }  }  if (debug.messageEnabled()) {    debug.message(sb.toString());  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (documentHandler != null)   documentHandler.processingInstruction(target,data);}  }
class C{  public final void testGetEncoded02() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);      byte[] refEnc=EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0],false);      byte[] actEnc=epki.getEncoded();      assertTrue(Arrays.equals(refEnc,actEnc));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  private boolean isCookieOutdatedForDomain(MultiDomainServerState cookie,DN domainDN){  final ServerState providedState=cookie.getServerState(domainDN);  if (providedState == null) {    return false;  }  final ServerState domainOldestState=getReplicationServerDomain(domainDN).getOldestState();  for (  final CSN oldestCsn : domainOldestState) {    final CSN providedCsn=providedState.getCSN(oldestCsn.getServerId());    if (providedCsn != null && providedCsn.isOlderThan(oldestCsn)) {      return true;    }  }  return false;}  }
class C{  private boolean isComplete(){  return m_isComplete2;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public int compareTo(Identifier that){  if (that == null) {    return 1;  }  if (this.size() < that.size()) {    return -1;  }  if (this.size() > that.size()) {    return 1;  }  int i=0;  int result=0;  while (result == 0 && i < size()) {    Object cThis=this.components.get(i);    Object cThat=that.components.get(i);    if (Identifier.areComparable(cThis,cThat)) {      result=((Comparable)cThis).compareTo(((Comparable)cThat));    } else {      result=(cThis.toString().compareTo(cThat.toString()));    }    ++i;  }  return result;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String outputFile=getStringOptionValue(IArgument.OUTPUT_FILE);  String encryptSecret=getStringOptionValue(IArgument.ENCRYPT_SECRET);  FileOutputStream fout=null;  String[] param={"tty"};  String[] paramException={"tty",""};  try {    if ((outputFile != null) && (outputFile.length() > 0)) {      fout=new FileOutputStream(outputFile);      param[0]=outputFile;      paramException[0]=outputFile;    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_EXPORT_SM_CONFIG_DATA",param);    ServiceManager sm=new ServiceManager(adminSSOToken);    AMEncryption encryptObj=new JCEEncryption();    ((ConfigurableKey)encryptObj).setPassword(encryptSecret);    String resultXML=sm.toXML(encryptObj);    resultXML+="<!-- " + Hash.hash(encryptSecret) + " -->";    if (fout != null) {      fout.write(resultXML.getBytes("UTF-8"));    } else {      System.out.write(resultXML.getBytes("UTF-8"));    }    getOutputWriter().printlnMessage(getResourceString("export-service-configuration-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_IMPORT_SM_CONFIG_DATA",param);  } catch (  UnsupportedEncodingException e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_EXPORT_SM_CONFIG_DATA",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_EXPORT_SM_CONFIG_DATA",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_EXPORT_SM_CONFIG_DATA",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_EXPORT_SM_CONFIG_DATA",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  Exception e) {    paramException[1]=e.getMessage();    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_EXPORT_SM_CONFIG_DATA",paramException);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  } finally {    if (fout != null) {      try {        fout.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void initialize(Map configParams) throws PolicyException {}  }
class C{  public void startDiskSpaceMonitor(){  DirectoryServer.registerMonitorProvider(this);  DirectoryServer.registerShutdownListener(this);  scheduleUpdate(this,0,5,TimeUnit.SECONDS);}  }
class C{  @Inject public UserInfo(OAuth2RequestFactory requestFactory,UserInfoService userInfoService,ExceptionHandler exceptionHandler){  this.requestFactory=requestFactory;  this.userInfoService=userInfoService;  this.exceptionHandler=exceptionHandler;}  }
class C{  @Override public void closeOutbound(){  if (logger != null) {    logger.println("closeOutbound() " + isOutboundDone);  }  if (isOutboundDone) {    return;  }  isOutboundDone=true;  if (handshake_started) {    alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);    close_notify_was_sent=true;  } else {    shutdown();  }  engine_was_closed=true;}  }
class C{  public AddressImpl parseAddress(String address) throws ParseException {  AddressParser addressParser=new AddressParser(address);  return addressParser.address(true);}  }
class C{  private void update(InternalSession session){  if (session.isStored()) {    if (session.getState() != SessionState.VALID) {      delete(session);    } else     if (!session.isTimedOut()) {      save(session);    }  }}  }
class C{  public void registerService(SSOToken token,String orgDN,String serviceName) throws AMException, SSOException {  try {    Set attrNames=getServiceAttributesWithQualifier(token,serviceName);    if ((attrNames != null) && !attrNames.isEmpty()) {      PersistentObject po=UMSObject.getObjectHandle(token,new Guid(orgDN));      DirectCOSDefinition dcos=createCOSDefinition(serviceName,attrNames);      COSManager cm=COSManager.getCOSManager(token,po.getGuid());      cm.addDefinition(dcos);    }  } catch (  AccessRightsException e) {    debug.error("DirectoryServicesImpl.registerService() " + "Insufficient access rights to register service: " + serviceName,e);    throw new AMException(token,"460");  }catch (  EntryAlreadyExistsException e) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.registerService() " + "Service " + serviceName + " already registered",e);    }    Object args[]={serviceName};    String locale=CommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString("464",args,locale),"464",args);  }catch (  SMSException e) {    debug.error("DirectoryServicesImpl.registerService() Unable to " + "register service: " + serviceName,e);    throw new AMException(token,"914");  }catch (  UMSException e) {    debug.error("DirectoryServicesImpl.registerService() Unable to " + "register service: " + serviceName,e);    throw new AMException(token,"914",e);  }}  }
class C{  public boolean isRequired(final AttributeType attributeType){  return requiredAttributes.contains(attributeType);}  }
class C{  @Override public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanOperationInfo))   return false;  MBeanOperationInfo p=(MBeanOperationInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getReturnType(),getReturnType()) && Objects.equals(p.getDescription(),getDescription())&& p.getImpact() == getImpact() && Arrays.equals(p.fastGetSignature(),fastGetSignature()) && Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  public FileEntry newChildInstance(File file){  return new FileEntry(this,file);}  }
class C{  @Override public String toString(){  return "not (" + exp + ")";}  }
class C{  private String[] parseLinesUntilEndOfBlock(final int startLineNumber,final String startLine,final String[] lines,final List<LocalizableMessage> warnings){  final List<String> lineList=new ArrayList<>();  String line=startLine;  lineList.add(line);  int lineNumber=startLineNumber;  while (true) {    lineNumber++;    if (lineNumber >= lines.length) {      break;    }    line=lines[lineNumber];    if (line.length() == 0) {      break;    }    line=replaceConstants(line,lineNumber,constants,warnings);    lineList.add(line);  }  return lineList.toArray(new String[lineList.size()]);}  }
class C{  public void convert(ByteChunk bc,CharChunk cc,boolean endOfInput) throws IOException {  if ((bb == null) || (bb.array() != bc.getBuffer())) {    bb=ByteBuffer.wrap(bc.getBuffer(),bc.getStart(),bc.getLength());  } else {    bb.limit(bc.getEnd());    bb.position(bc.getStart());  }  if ((cb == null) || (cb.array() != cc.getBuffer())) {    cb=CharBuffer.wrap(cc.getBuffer(),cc.getEnd(),cc.getBuffer().length - cc.getEnd());  } else {    cb.limit(cc.getBuffer().length);    cb.position(cc.getEnd());  }  CoderResult result=null;  if (leftovers.position() > 0) {    int pos=cb.position();    do {      leftovers.put(bc.substractB());      leftovers.flip();      result=decoder.decode(leftovers,cb,endOfInput);      leftovers.position(leftovers.limit());      leftovers.limit(leftovers.array().length);    } while (result.isUnderflow() && (cb.position() == pos));    if (result.isError() || result.isMalformed()) {      result.throwException();    }    bb.position(bc.getStart());    leftovers.position(0);  }  result=decoder.decode(bb,cb,endOfInput);  if (result.isError() || result.isMalformed()) {    result.throwException();  } else   if (result.isOverflow()) {    bc.setOffset(bb.position());    cc.setEnd(cb.position());  } else   if (result.isUnderflow()) {    bc.setOffset(bb.position());    cc.setEnd(cb.position());    if (bc.getLength() > 0) {      leftovers.limit(leftovers.array().length);      leftovers.position(bc.getLength());      bc.substract(leftovers.array(),0,bc.getLength());    }  }}  }
class C{  public static void handleThrowable(Throwable t){  if (t instanceof ThreadDeath) {    throw (ThreadDeath)t;  }  if (t instanceof StackOverflowError) {    return;  }  if (t instanceof VirtualMachineError) {    throw (VirtualMachineError)t;  }}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public boolean isOutputShutdown(){  return shutOut;}  }
class C{  private void start(){  if (host.getLogger().isDebugEnabled())   host.getLogger().debug(sm.getString("userConfig.start"));  deploy();}  }
class C{  public static void write(AudioFile f) throws CannotWriteException {  getDefaultAudioFileIO().writeFile(f);}  }
class C{  public AnyHolder(Any initial){  value=initial;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.HTTPType createHTTPType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPTypeImpl();}  }
class C{  public boolean hasAttributes(){  return DTM.NULL != dtm.getFirstAttribute(node);}  }
class C{  public boolean isStatic(){  if (innerClasses == null) {    return false;  } else {    int flags=innerClasses.getFlagsFor(getInternalName());    if (flags >= 0)     return java.lang.reflect.Modifier.isStatic(flags); else     return false;  }}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException {  return parse(new FileInputStream(f));}  }
class C{  static Object resolveToolbarConstraint(JToolBar toolbar){  if (toolbar != null) {    Container parent=toolbar.getParent();    if (parent != null) {      LayoutManager m=parent.getLayout();      if (m instanceof BorderLayout) {        BorderLayout b=(BorderLayout)m;        Object con=b.getConstraints(toolbar);        if (con == SOUTH || con == EAST || con == WEST) {          return con;        }        return NORTH;      }    }  }  return NORTH;}  }
class C{  private boolean validateAuthLevels(Set authLevelSet) throws PolicyException {  if (authLevelSet.isEmpty() || (authLevelSet.size() > 1)) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_or_multiple_values",args,null);  }  Iterator authLevels=authLevelSet.iterator();  authLevel=(String)authLevels.next();  try {    authRealm=AMAuthUtils.getRealmFromRealmQualifiedData(authLevel);    String authLevelIntString=AMAuthUtils.getDataFromRealmQualifiedData(authLevel);    authLevelInt=Integer.parseInt(authLevelIntString);  } catch (  NumberFormatException e) {    String args[]={AUTH_LEVEL};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_an_Integer",args,null);  }  return true;}  }
class C{  public TSAClientBouncyCastle(String url){  this(url,null,null,DEFAULTTOKENSIZE,DEFAULTHASHALGORITHM);}  }
class C{  public void testLength(){  try {    CoderResult.UNDERFLOW.length();    fail("Should throw UnsupportedOperationException");  } catch (  UnsupportedOperationException ex) {  }  try {    CoderResult.OVERFLOW.length();    fail("Should throw UnsupportedOperationException");  } catch (  UnsupportedOperationException ex) {  }  assertEquals(CoderResult.malformedForLength(1).length(),1);  assertEquals(CoderResult.unmappableForLength(1).length(),1);}  }
class C{  public static void writeSwappedDouble(byte[] data,int offset,double value){  writeSwappedLong(data,offset,Double.doubleToLongBits(value));}  }
class C{  private Style createResolvedStyle(String selector,Vector elements,HTML.Tag t){  int numElements=elements.size();  String tags[]=new String[numElements];  String ids[]=new String[numElements];  String classes[]=new String[numElements];  for (int counter=0; counter < numElements; counter++) {    Element e=(Element)elements.elementAt(counter);    AttributeSet attr=e.getAttributes();    if (counter == 0 && e.isLeaf()) {      Object testAttr=attr.getAttribute(t);      if (testAttr instanceof AttributeSet) {        attr=(AttributeSet)testAttr;      } else {        attr=null;      }    }    if (attr != null) {      HTML.Tag tag=(HTML.Tag)attr.getAttribute(StyleConstants.NameAttribute);      if (tag != null) {        tags[counter]=tag.toString();      } else {        tags[counter]=null;      }      if (attr.isDefined(HTML.Attribute.CLASS)) {        classes[counter]=attr.getAttribute(HTML.Attribute.CLASS).toString();      } else {        classes[counter]=null;      }      if (attr.isDefined(HTML.Attribute.ID)) {        ids[counter]=attr.getAttribute(HTML.Attribute.ID).toString();      } else {        ids[counter]=null;      }    } else {      tags[counter]=ids[counter]=classes[counter]=null;    }  }  tags[0]=t.toString();  return createResolvedStyle(selector,tags,ids,classes);}  }
class C{  private ImageIcon makeIcon(Set<String> objectClasses,int modifiers){  ImageIcon result;  if (objectClasses == null || objectClasses.isEmpty()) {    result=getDefaultContainerIcon();  } else {    String iconFile=null;    for (    String value : objectClasses) {      iconFile=pathTable.get(value.toLowerCase());      if (iconFile != null) {        break;      }    }    if (iconFile == null) {      if ((modifiers & MODIFIER_LEAF) != 0) {        result=getDefaultLeafIcon();      } else {        result=getDefaultContainerIcon();      }    } else {      String description=null;      for (      String value : objectClasses) {        description=descriptionTable.get(value.toLowerCase());        if (description != null) {          break;        }      }      if (description == null) {        description=GENERIC_OBJECT_DESCRIPTION;      }      result=createIcon(IMAGE_PATH + "/" + iconFile,description);    }  }  if ((modifiers & MODIFIER_REFERRAL) != 0) {    result=getReferralMaskIcon();  }  if ((modifiers & MODIFIER_ERROR) != 0) {    result=getErrorMaskIcon();  }  return result;}  }
class C{  private int readPlaintextData(final ByteBuffer dst){  if (dst.isDirect()) {    final int pos=dst.position();    final long addr=Buffer.address(dst) + pos;    final int len=dst.limit() - pos;    final int sslRead=SSL.readFromSSL(ssl,addr,len);    if (sslRead > 0) {      dst.position(pos + sslRead);      return sslRead;    }  } else {    final int pos=dst.position();    final int limit=dst.limit();    final int len=Math.min(MAX_ENCRYPTED_PACKET_LENGTH,limit - pos);    final ByteBuffer buf=ByteBuffer.allocateDirect(len);    try {      final long addr=memoryAddress(buf);      final int sslRead=SSL.readFromSSL(ssl,addr,len);      if (sslRead > 0) {        buf.limit(sslRead);        dst.limit(pos + sslRead);        dst.put(buf);        dst.limit(limit);        return sslRead;      }    }  finally {      buf.clear();      ByteBufferUtils.cleanDirectBuffer(buf);    }  }  return 0;}  }
class C{  public boolean equals(ImageGraphicAttribute rhs){  if (rhs == null) {    return false;  }  if (this == rhs) {    return true;  }  if (fOriginX != rhs.fOriginX || fOriginY != rhs.fOriginY) {    return false;  }  if (getAlignment() != rhs.getAlignment()) {    return false;  }  if (!fImage.equals(rhs.fImage)) {    return false;  }  return true;}  }
class C{  private void restoreFavorite(BackupProtos.Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking favorite " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackFavorite(buffer,dataSize);  cr.insert(LauncherSettings.Favorites.CONTENT_URI,values);}  }
class C{  protected static void appendCloseReasonWithTruncation(ByteBuffer msg,String reason){  byte[] reasonBytes=reason.getBytes(StandardCharsets.UTF_8);  if (reasonBytes.length <= 123) {    msg.put(reasonBytes);  } else {    int remaining=123 - ELLIPSIS_BYTES_LEN;    int pos=0;    byte[] bytesNext=reason.substring(pos,pos + 1).getBytes(StandardCharsets.UTF_8);    while (remaining >= bytesNext.length) {      msg.put(bytesNext);      remaining-=bytesNext.length;      pos++;      bytesNext=reason.substring(pos,pos + 1).getBytes(StandardCharsets.UTF_8);    }    msg.put(ELLIPSIS_BYTES);  }}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  public String nextToken(){  if (index == oid.length()) {    return null;  }  int end=index + 1;  boolean quoted=false;  boolean escaped=false;  buf.setLength(0);  while (end != oid.length()) {    char c=oid.charAt(end);    if (c == '"') {      if (!escaped) {        quoted=!quoted;      } else {        buf.append(c);      }      escaped=false;    } else {      if (escaped || quoted) {        buf.append(c);        escaped=false;      } else       if (c == '\\') {        escaped=true;      } else       if (c == ',') {        break;      } else {        buf.append(c);      }    }    end++;  }  index=end;  return buf.toString().trim();}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  metaAlias=getStringOptionValue(ARGUMENT_METADATA);  remoteEntityId=getStringOptionValue(ARGUMENT_REMOTE_ID);  userIdMappingFileName=getStringOptionValue(ARGUMENT_USER_ID_MAPPING);  outFile=getStringOptionValue(ARGUMENT_NAME_ID_MAPPING);  spec=FederationManager.getIDFFSubCommandSpecification(rc);  BufferedWriter out=null;  String[] params={metaAlias,remoteEntityId,userIdMappingFileName,outFile,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DO_BULK_FEDERATION",params);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      getEntityRoleAndIdSAML2();      out=validateFiles();      handleSAML2Request(out);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DO_BULK_FEDERATION",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      getEntityRoleAndIdIDFF();      out=validateFiles();      handleIDFFRequest(out);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DO_BULK_FEDERATION",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={metaAlias,remoteEntityId,userIdMappingFileName,outFile,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DO_BULK_FEDERATION",args);    throw e;  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ex) {      }    }  }}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,searchControl);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public boolean isSuccess(){  return rc.isSuccess();}  }
class C{  public synchronized void makeVisible(int index){  visibleIndex=index;  ListPeer peer=(ListPeer)this.peer;  if (peer != null) {    peer.makeVisible(index);  }}  }
class C{  public AMSearchResults searchPeopleContainers(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchPeopleContainers(wildcard,null,searchControl);}  }
class C{  public static boolean mkdir(final File dir,final IConfiguration configuration){  return dir.mkdir();}  }
class C{  @Override public void startDocument() throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("startDocument()");  }  if (locator instanceof Locator2 && root instanceof DocumentProperties.Encoding) {    ((DocumentProperties.Encoding)root).setEncoding(((Locator2)locator).getEncoding());  }  configure();}  }
class C{  public FrameBodyTIME(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  protected void handlePreflightCORS(final HttpServletRequest request,final HttpServletResponse response,final FilterChain filterChain) throws IOException, ServletException {  CORSRequestType requestType=checkRequestType(request);  if (requestType != CORSRequestType.PRE_FLIGHT) {    throw new IllegalArgumentException(sm.getString("corsFilter.wrongType1",CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));  }  final String origin=request.getHeader(CorsFilter.REQUEST_HEADER_ORIGIN);  if (!isOriginAllowed(origin)) {    handleInvalidCORS(request,response,filterChain);    return;  }  String accessControlRequestMethod=request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD);  if (accessControlRequestMethod == null) {    handleInvalidCORS(request,response,filterChain);    return;  } else {    accessControlRequestMethod=accessControlRequestMethod.trim();  }  String accessControlRequestHeadersHeader=request.getHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS);  List<String> accessControlRequestHeaders=new LinkedList<>();  if (accessControlRequestHeadersHeader != null && !accessControlRequestHeadersHeader.trim().isEmpty()) {    String[] headers=accessControlRequestHeadersHeader.trim().split(",");    for (    String header : headers) {      accessControlRequestHeaders.add(header.trim().toLowerCase(Locale.ENGLISH));    }  }  if (!allowedHttpMethods.contains(accessControlRequestMethod)) {    handleInvalidCORS(request,response,filterChain);    return;  }  if (!accessControlRequestHeaders.isEmpty()) {    for (    String header : accessControlRequestHeaders) {      if (!allowedHttpHeaders.contains(header)) {        handleInvalidCORS(request,response,filterChain);        return;      }    }  }  if (supportsCredentials) {    response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,origin);    response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS,"true");  } else {    if (anyOriginAllowed) {      response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,"*");    } else {      response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN,origin);    }  }  if (preflightMaxAge > 0) {    response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE,String.valueOf(preflightMaxAge));  }  response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS,accessControlRequestMethod);  if ((allowedHttpHeaders != null) && (!allowedHttpHeaders.isEmpty())) {    response.addHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_HEADERS,join(allowedHttpHeaders,","));  }}  }
class C{  synchronized void addExtendedStyle(Style attr){  insertAttributeSetAt(attr,getAttributes().length);}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public void addActionListener(ActionListener listener){  listenerList.add(ActionListener.class,listener);}  }
class C{  public BatchOptimize(BrdActionThread p_thread){  batch_thread=p_thread;  r_board=p_thread.hdlg.get_routing_board();  sorted_route_items=new BatchSortedRouteItems(r_board);}  }
class C{  public static List<String> wrapStringToListWithFormat(String string,int lnLength,boolean wrapLongWords,List<String> list,TextFormatting format){  final String lines[]=WordUtils.wrap(string,lnLength,null,wrapLongWords).split(SystemUtils.LINE_SEPARATOR);  for (  final String line : lines)   list.add(format + line);  return list;}  }
class C{  public DateTimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet) throws TransformerException {  applyAttrSets(transformer,stylesheet,m_attributeSetsNames);}  }
class C{  public void addValue(String value){  if (isNullSeperateMultipleValues()) {    setValue(this.value + "\u0000" + value);  } else {    setValue(this.value + value);  }}  }
class C{  public void init(Instrumentation inst,QueryReporter queryReporter,ConnectorConfiguration configuration){  executeStatementWrapper=new ExecuteStatementWrapper(queryReporter,configuration);  setIntercepters(inst);}  }
class C{  public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return true;}  }
class C{  public static String generateTOTP256(String key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA256");}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (dst == null) {    dst=createCompatibleDestRaster(src);  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  if (src.getNumBands() != dst.getNumBands()) {    throw new IllegalArgumentException("Number of src bands (" + src.getNumBands() + ") does not match number of "+ " dst bands ("+ dst.getNumBands()+ ")");  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to transform src image");  }  return dst;}  }
class C{  protected Expression visitChildren(final ExpressionVisitor visitor){  if (!canReduce()) {    throw Error.mustBeReducible();  }  return visitor.visit(reduceAndCheck());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation docImpl;  boolean state;  doc=(Document)load("staff",false);  docImpl=doc.getImplementation();  state=docImpl.hasFeature("XML","1.0");  assertTrue("documentGetImplementationAssert",state);}  }
class C{  private void initIndeterminateValues(){  initIndeterminateDefaults();  numFrames=cycleTime / repaintInterval;  initAnimationIndex();  boxRect=new Rectangle();  nextPaintRect=new Rectangle();  componentInnards=new Rectangle();  oldComponentInnards=new Rectangle();  progressBar.addHierarchyListener(getHandler());  if (progressBar.isDisplayable()) {    startAnimationTimer();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateelement.class,args);}  }
class C{  public XACMLAuthzDecisionStatement createXACMLAuthzDecisionStatement(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_STATEMENT,xml);  if (obj == null) {    return new XACMLAuthzDecisionStatementImpl(xml);  } else {    return (XACMLAuthzDecisionStatement)obj;  }}  }
class C{  public PlainDocument(){  this(new GapContent());}  }
class C{  public void forceDataStructureChange(){  updateDataArray();  fireTableStructureChanged();  fireTableDataChanged();}  }
class C{  public void increment(){  count.incrementAndGet();  rateWindow.incrementForTimestamp(timerGetter.now());}  }
class C{  protected String jmxSet(MBeanServerConnection jmxServerConnection,String name) throws Exception {  Object realValue;  if (type != null) {    realValue=convertStringToType(value,type);  } else {    if (isConvert()) {      String mType=getMBeanAttributeType(jmxServerConnection,name,attribute);      realValue=convertStringToType(value,mType);    } else     realValue=value;  }  jmxServerConnection.setAttribute(new ObjectName(name),new Attribute(attribute,realValue));  return null;}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public NodeTest(int whatToShow){  initNodeTest(whatToShow);}  }
class C{  private final void consumeExpected(String expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{expected,m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,EventsActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_logo).setContentTitle("Austin Feeds Me").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public String createStandardContext(String parent,String path,String docBase) throws Exception {  return createStandardContext(parent,path,docBase,false,false);}  }
class C{  public void testCreateRequest(){  try {    cliTran.terminate();    Request bye=null;    try {      bye=dialog.createRequest(Request.BYE);    } catch (    SipException ex) {      ex.printStackTrace();      fail("A dialog failed to create a BYE request.");    }    assertEquals("Dialog.createRequest() returned a request with a bad method.",Request.BYE,bye.getMethod());    assertEquals("Dialog.createRequest() returned a request with a bad sequence number.",dialog.getLocalSeqNumber() + 1,((CSeqHeader)bye.getHeader(CSeqHeader.NAME)).getSeqNumber());    FromHeader byeFrom=(FromHeader)bye.getHeader(FromHeader.NAME);    assertEquals("Dialog.createRequest() returned a request with a bad From header.",dialog.getLocalParty(),byeFrom.getAddress());    assertEquals("Dialog.createRequest() returned a request with a bad From tag.",dialog.getLocalTag(),byeFrom.getTag());    ToHeader byeTo=(ToHeader)bye.getHeader(ToHeader.NAME);    assertEquals("Dialog.createRequest() returned a request with a bad To header.",dialog.getRemoteParty(),byeTo.getAddress());    assertEquals("Dialog.createRequest() returned a request with a bad To tag.",dialog.getRemoteTag(),byeTo.getTag());    ClientTransaction ct=super.tiSipProvider.getNewClientTransaction(bye);    try {      eventCollector.collectDialogTermiatedEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("failed to regiser a listener iwth the TI",ex);    }    dialog.sendRequest(ct);    assertEquals("Dialog mismatch ",ct.getDialog(),dialog);    waitForMessage();    waitForTimeout();    DialogTerminatedEvent dte=eventCollector.extractCollectedDialogTerminatedEvent();    assertNotNull("No DTE received for early Dialog terminated via BYE",dte);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("one",null));}  }
class C{  public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  public String format(java.util.logging.LogRecord logRecord){  Map logInfoTable=null;  if ((LogManagerUtil.isAMLoggingMode()) && (logRecord instanceof com.sun.identity.log.ILogRecord)) {    logInfoTable=((com.sun.identity.log.ILogRecord)logRecord).getLogInfoMap();  }  StringBuilder sbuffer=new StringBuilder();  try {    String strTime=(String)logInfoTable.get(LogConstants.TIME);    if (strTime == null) {      if (secureTimestampGenerator != null) {        strTime=secureTimestampGenerator.getTimestamp();      } else {        strTime=NOTAVAIL;      }    }    sbuffer.append("\"").append(strTime).append("\"\t");    boolean escapeDone=false;    StringBuffer message=processString(formatMessage(logRecord));    for (int i=0; i < message.length(); i++) {      if ((message.charAt(i) == ' ') || (message.charAt(i) == '\t')) {        sbuffer.append("\"").append(message).append("\"\t");        escapeDone=true;        break;      }    }    if (!escapeDone) {      sbuffer.append(message).append("\t");    }    String[] allFields=lmanager.getAllFields();    if (logInfoTable != null) {      Set selectedFields=lmanager.getSelectedFieldSet();      String key=null;      String value=null;      if (allFields != null) {        for (int i=2; i < allFields.length; i++) {          key=allFields[i];          if ((key != null) && (key.length() != 0) && (selectedFields != null)&& (selectedFields.contains(key))) {            value=(String)logInfoTable.get(key);            StringBuffer valueBuffer;            if ((value != null) && (value.length() != 0)) {              valueBuffer=processString(value);              escapeDone=false;              for (int j=0; j < valueBuffer.length(); j++) {                if ((valueBuffer.charAt(j) == ' ') || (valueBuffer.charAt(j) == '\t')) {                  escapeDone=true;                  sbuffer.append("\"").append(valueBuffer).append("\"\t");                  break;                }              }              if (!escapeDone) {                sbuffer.append(valueBuffer).append("\t");              }            } else {              sbuffer.append("\"").append(NOTAVAIL).append("\"\t");            }          } else {            sbuffer.append("-").append("\t");          }        }      }    } else {      if (allFields != null) {        for (int i=2; i < allFields.length; i++) {          sbuffer.append("-").append("\t");        }      }    }  } catch (  Exception e) {    Debug.error("ELFFormatter: Exception in String handling loop",e);  }  sbuffer.append("\n");  return sbuffer.toString();}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public SmallSet(int initialCapacity){  Reject.ifFalse(initialCapacity >= 0);  if (initialCapacity > 1) {    elements=new LinkedHashMap<>(initialCapacity);  }}  }
class C{  public long insert(Long ruleActionID,Long actionParameterID,String ruleActionParameterData){  if (ruleActionID == null || actionParameterID == null || ruleActionParameterData == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_RULEACTIONID,ruleActionID);  initialValues.put(KEY_ACTIONPARAMETERID,actionParameterID);  initialValues.put(KEY_RULEACTIONPARAMETERDATA,ruleActionParameterData);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public static FSAuthnResponseEnvelope parseBASE64EncodedString(String encodedReq) throws FSMsgException {  if (encodedReq != null) {    String decodedAuthnReq=new String(Base64.decode(encodedReq));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponseEnvelope." + "parseBASE64EncodedString: decoded input string: \n" + decodedAuthnReq);    }    return parseXML(decodedAuthnReq);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponseEnvelope." + "parseBASE64EncodedString: null String passed" + "in as argument.");    }    throw new FSMsgException("nullInput",null);  }}  }
class C{  @Override public Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_First(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,observer);}  }
class C{  private ArrayList<BrdTracep> split_with_end_line(int p_line_no,PlaLineInt p_new_end_line){  ArrayList<BrdTracep> risul=new ArrayList<BrdTracep>(2);  if (!is_on_the_board())   return risul;  if (!split_inside_drill_pad_allowed(p_line_no,p_new_end_line))   return risul;  ArrayList<Polyline> split_polylines=polyline.split(p_line_no,p_new_end_line);  if (split_polylines.size() < 2)   return risul;  r_board.remove_item(this);  BrdTracep a_trace=r_board.insert_trace_without_cleaning(split_polylines.get(0),get_layer(),get_half_width(),net_nos,clearance_idx(),get_fixed_state());  if (a_trace != null)   risul.add(a_trace);  a_trace=r_board.insert_trace_without_cleaning(split_polylines.get(1),get_layer(),get_half_width(),net_nos,clearance_idx(),get_fixed_state());  if (a_trace != null)   risul.add(a_trace);  return risul;}  }
class C{  public ConfigManagerFatalException(){  super();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.HTTPElement createHTTPElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPElementImpl();}  }
class C{  public boolean is_obstacle(AwtreeObject p_obj){  for (int index=0; index < net_nos_arr.length; ++index) {    if (p_obj.is_obstacle(net_nos_arr[index]))     return true;  }  return false;}  }
class C{  public WorldCreator environment(World.Environment env){  this.environment=env;  return this;}  }
class C{  public PasswordExpiredControl(){  this(false);}  }
class C{  public Dimension minimumLayoutSize(Container container){  int minPrimary=0;  int minSecondary=0;  Insets insets=splitPane.getInsets();  for (int counter=0; counter < 3; counter++) {    if (components[counter] != null) {      Dimension minSize=components[counter].getMinimumSize();      int secSize=getSizeForSecondaryAxis(minSize);      minPrimary+=getSizeForPrimaryAxis(minSize);      if (secSize > minSecondary)       minSecondary=secSize;    }  }  if (insets != null) {    minPrimary+=getSizeForPrimaryAxis(insets,true) + getSizeForPrimaryAxis(insets,false);    minSecondary+=getSizeForSecondaryAxis(insets,true) + getSizeForSecondaryAxis(insets,false);  }  if (axis == 0) {    return new Dimension(minPrimary,minSecondary);  }  return new Dimension(minSecondary,minPrimary);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits,BlockCipherPadding padding){  if ((macSizeInBits % 8) != 0) {    throw new IllegalArgumentException("MAC size must be multiple of 8");  }  this.cipher=new CBCBlockCipher(cipher);  this.padding=padding;  this.macSize=macSizeInBits / 8;  mac=new byte[cipher.getBlockSize()];  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  private void updateHeader(){  updateHeaderShade();}  }
class C{  protected void addExtension(final String extension){  if (extension != null) {    if (extensions == null) {      extensions=new Vector<>();    }    extensions.add(extension);  }}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public static short parseShort(String string) throws NumberFormatException {  return parseShort(string,10);}  }
class C{  public ParagraphRenderer(Paragraph modelElement){  super(modelElement);}  }
class C{  public void processSubscribe(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("notifier: got an Subscribe sending OK");    logger.info("notifier:  " + request);    logger.info("notifier : dialog = " + requestEvent.getDialog());    EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);    if (eventHeader == null) {      logger.info("Cannot find event header.... dropping request.");      return;    }    Response response=null;    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    boolean isInitial=requestEvent.getDialog() == null;    if (isInitial) {      String toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));      response=messageFactory.createResponse(202,request);      ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);      if (toHeader.getTag() != null) {        System.err.println("####ERROR: To-tag!=null but no dialog match! My dialog=" + dialog.getState());      }      toHeader.setTag(toTag);      this.dialog=st.getDialog();      this.dialog.terminateOnBye(false);      if (dialog != null) {        logger.info("Dialog " + dialog);        logger.info("Dialog state " + dialog.getState());      }    } else {      response=messageFactory.createResponse(200,request);    }    Address address=addressFactory.createAddress("Notifier <sip:127.0.0.1>");    ((SipURI)address.getURI()).setPort(udpProvider.getListeningPoint("udp").getPort());    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ExpiresHeader expires=(ExpiresHeader)request.getHeader(ExpiresHeader.NAME);    if (expires == null) {      expires=headerFactory.createExpiresHeader(30);    }    response.addHeader(expires);    Address fromAddress=((ToHeader)response.getHeader(ToHeader.NAME)).getAddress();    String fromTag=((ToHeader)response.getHeader(ToHeader.NAME)).getTag();    FromHeader fromHeader=headerFactory.createFromHeader(fromAddress,fromTag);    Address toAddress=((FromHeader)response.getHeader(FromHeader.NAME)).getAddress();    String toTag=((FromHeader)response.getHeader(FromHeader.NAME)).getTag();    ToHeader toHeader=headerFactory.createToHeader(toAddress,toTag);    CallIdHeader callId=(CallIdHeader)response.getHeader(CallIdHeader.NAME);    ContactHeader requestContact=(ContactHeader)request.getHeader(ContactHeader.NAME);    SipURI notifyRuri=(SipURI)requestContact.getAddress().getURI();    CSeqHeader cSeq=headerFactory.createCSeqHeader(1L,Request.NOTIFY);    String ipAddress=sipProvider.getListeningPoint("udp").getIPAddress();    int port=sipProvider.getListeningPoint("udp").getPort();    ViaHeader viaHeader=headerFactory.createViaHeader(ipAddress,port,"udp",null);    LinkedList llist=new LinkedList<ViaHeader>();    llist.add(viaHeader);    MaxForwardsHeader maxForwards=headerFactory.createMaxForwardsHeader(70);    Request notifyRequest=messageFactory.createRequest(notifyRuri,Request.NOTIFY,callId,cSeq,fromHeader,toHeader,llist,maxForwards);    notifyRequest.addHeader(contactHeader);    ((SipURI)contactHeader.getAddress().getURI()).setParameter("id","not");    SubscriptionStateHeader sstate=headerFactory.createSubscriptionStateHeader(isInitial ? SubscriptionStateHeader.PENDING : SubscriptionStateHeader.TERMINATED);    if (sstate.getState().equalsIgnoreCase("terminated")) {      sstate.setReasonCode("deactivated");    }    notifyRequest.addHeader(sstate);    notifyRequest.setHeader(eventHeader);    notifyRequest.setHeader(contactHeader);    ClientTransaction ct=udpProvider.getNewClientTransaction(notifyRequest);    ct.sendRequest();    logger.info("NOTIFY Branch ID " + ((ViaHeader)request.getHeader(ViaHeader.NAME)).getParameter("branch"));    logger.info("Dialog " + dialog);    logger.info("Dialog state after pending NOTIFY: " + dialog.getState());    st.sendResponse(response);  } catch (  Throwable ex) {    ex.printStackTrace();  }}  }
class C{  public void insert_component_obstacle(PlaArea p_area,int p_layer,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,int p_clearance_class,int p_component_no,String p_name,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_component_obstacle: p_area is null");    return;  }  BrdAreaObstacleComp obs=new BrdAreaObstacleComp(p_area,p_layer,p_translation,p_rotation_in_degree,p_side_changed,p_clearance_class,0,p_component_no,p_name,p_fixed_state,this);  insert_item(obs);}  }
class C{  private static SearchScope elaborateScopeForSearchInSubordinates(SearchScope currentScope){switch (currentScope.asEnum()) {case BASE_OBJECT:    return null;case SINGLE_LEVEL:  return SearchScope.BASE_OBJECT;case SUBORDINATES:case WHOLE_SUBTREE:return SearchScope.WHOLE_SUBTREE;default :return currentScope;}}  }
class C{  @RequestMapping(value="/account/reset_password/finish",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<String> finishPasswordReset(@RequestBody KeyAndPasswordVM keyAndPassword){  if (!checkPasswordLength(keyAndPassword.getNewPassword())) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  return userService.completePasswordReset(keyAndPassword.getNewPassword(),keyAndPassword.getKey()).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  @Override public void close(){  if (importConfig.invokeImportPlugins()) {    pluginConfigManager.invokeLDIFImportEndPlugins(importConfig);  }  importConfig.close();}  }
class C{  public Iterator<Integer> ldapIterator(){  return ldapStates.keySet().iterator();}  }
class C{  public JsonValue update(String location,String resourceId,JsonValue payload,Context context) throws ResourceException {  Reject.ifTrue(StringUtils.isEmpty(location),"The endpoint destination may not be null or empty.");  Reject.ifTrue(StringUtils.isEmpty(resourceId),"The resourceId to update may not be null or empty.");  Reject.ifNull(payload,"The payload object to create must not be null.");  final Router rootRouter=router.get();  final UpdateRequest updateRequest=Requests.newUpdateRequest(location,resourceId,payload);  return rootRouter.handleUpdate(context,updateRequest).getOrThrowUninterruptibly().getContent();}  }
class C{  public void notationDecl(String name,String publicId,String systemId){}  }
class C{  public FramedMTUAttribute(byte[] octets){  super(octets);  mtu=OctetUtils.toIntVal(octets);}  }
class C{  public NamingExceptionEvent(EventContext source,NamingException exc){  super(source);  exception=exc;}  }
class C{  public boolean hasNextLine(){  saveCurrentStatus();  String result=findWithinHorizon(LINE_PATTERN,0);  recoverPreviousStatus();  return result != null;}  }
class C{  protected void drawLine(int lineIndex,Graphics g,int x,int y){  Element line=getElement().getElement(lineIndex);  Element elem;  try {    if (line.isLeaf()) {      drawElement(lineIndex,line,g,x,y);    } else {      int count=line.getElementCount();      for (int i=0; i < count; i++) {        elem=line.getElement(i);        x=drawElement(lineIndex,elem,g,x,y);      }    }  } catch (  BadLocationException e) {    throw new StateInvariantError("Can't render line: " + lineIndex);  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public TextHitInfo hitTestChar(float x,float y,Rectangle2D bounds){  LayoutPathImpl lp=textLine.getLayoutPath();  boolean prev=false;  if (lp != null) {    Point2D.Float pt=new Point2D.Float(x,y);    prev=lp.pointToPath(pt,pt);    x=pt.x;    y=pt.y;  }  if (isVertical()) {    if (y < bounds.getMinY()) {      return TextHitInfo.leading(0);    } else     if (y >= bounds.getMaxY()) {      return TextHitInfo.trailing(characterCount - 1);    }  } else {    if (x < bounds.getMinX()) {      return isLeftToRight() ? TextHitInfo.leading(0) : TextHitInfo.trailing(characterCount - 1);    } else     if (x >= bounds.getMaxX()) {      return isLeftToRight() ? TextHitInfo.trailing(characterCount - 1) : TextHitInfo.leading(0);    }  }  double distance=Double.MAX_VALUE;  int index=0;  int trail=-1;  CoreMetrics lcm=null;  float icx=0, icy=0, ia=0, cy=0, dya=0, ydsq=0;  for (int i=0; i < characterCount; ++i) {    if (!textLine.caretAtOffsetIsValid(i)) {      continue;    }    if (trail == -1) {      trail=i;    }    CoreMetrics cm=textLine.getCoreMetricsAt(i);    if (cm != lcm) {      lcm=cm;      if (cm.baselineIndex == GraphicAttribute.TOP_ALIGNMENT) {        cy=-(textLine.getMetrics().ascent - cm.ascent) + cm.ssOffset;      } else       if (cm.baselineIndex == GraphicAttribute.BOTTOM_ALIGNMENT) {        cy=textLine.getMetrics().descent - cm.descent + cm.ssOffset;      } else {        cy=cm.effectiveBaselineOffset(baselineOffsets) + cm.ssOffset;      }      float dy=(cm.descent - cm.ascent) / 2 - cy;      dya=dy * cm.italicAngle;      cy+=dy;      ydsq=(cy - y) * (cy - y);    }    float cx=textLine.getCharXPosition(i);    float ca=textLine.getCharAdvance(i);    float dx=ca / 2;    cx+=dx - dya;    double nd=Math.sqrt(4 * (cx - x) * (cx - x) + ydsq);    if (nd < distance) {      distance=nd;      index=i;      trail=-1;      icx=cx;      icy=cy;      ia=cm.italicAngle;    }  }  boolean left=x < icx - (y - icy) * ia;  boolean leading=textLine.isCharLTR(index) == left;  if (trail == -1) {    trail=characterCount;  }  TextHitInfo result=leading ? TextHitInfo.leading(index) : TextHitInfo.trailing(trail - 1);  return result;}  }
class C{  protected void deepMarkSizeInvalid(){  markSizeInvalid();  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((TreeStateNode)getChildAt(counter)).deepMarkSizeInvalid();}  }
class C{  protected Constraint(){}  }
class C{  public final PlaVectorInt relative_location(){  BrdComponent component=r_board.brd_components.get(get_component_no());  LibPackage lib_package=component.get_package();  LibPackagePin package_pin=lib_package.get_pin(pin_no);  PlaVectorInt rel_location=package_pin.relative_location();  int rotation_deg=component.get_rotation_in_degree();  if (!component.is_on_front() && !r_board.brd_components.get_flip_style_rotate_first()) {    rel_location=package_pin.relative_location().mirror_at_y_axis();  }  if (rotation_deg % 90 == 0) {    int component_ninety_degree_factor=rotation_deg / 90;    if (component_ninety_degree_factor != 0) {      rel_location=rel_location.rotate_90_deg(component_ninety_degree_factor);    }  } else {    PlaPointFloat location_approx=rel_location.to_float();    location_approx=location_approx.rotate_deg(rotation_deg,PlaPointFloat.ZERO);    rel_location=location_approx.to_vector();  }  if (!component.is_on_front() && r_board.brd_components.get_flip_style_rotate_first()) {    rel_location=rel_location.mirror_at_y_axis();  }  return rel_location;}  }
class C{  @Override public Foo remove(Serializable primaryKey) throws NoSuchFooException {  Session session=null;  try {    session=openSession();    Foo foo=(Foo)session.get(FooImpl.class,primaryKey);    if (foo == null) {      if (_log.isDebugEnabled()) {        _log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);      }      throw new NoSuchFooException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);    }    return remove(foo);  } catch (  NoSuchFooException nsee) {    throw nsee;  }catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  @Override public void initializeConnectionHandler(ServerContext serverContext,ConnectionHandlerCfg configuration) throws ConfigException, InitializationException {  this.configuration=configuration;}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(TAB_COMMON)) {    view=new CCTabs(this,tabModel,name);  } else   if (name.equals(MH_COMMON)) {    CCPrimaryMasthead mh=new CCPrimaryMasthead(this,createMastheadModel(),name);    mh.setLogoutCommand(AMLogoutCommand.class);    mh.setUserName(ESAPI.encoder().encodeForHTML(getUserDisplayName()));    view=mh;  } else   if (name.equals(BREAD_CRUMB)) {    view=createBreadCrumb(name);  } else   if (name.equals(BREAD_CRUMB_HREF)) {    view=new HREF(this,name,null);  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public ShapeTileOctagon bounding_octagon(){  if (bounding_octagon != null)   return bounding_octagon;  PlaPointFloat start_corner=start_point_approx();  PlaPointFloat end_corner=end_point_approx();  double lx=Math.floor(Math.min(start_corner.v_x,end_corner.v_x));  double ly=Math.floor(Math.min(start_corner.v_y,end_corner.v_y));  double rx=Math.ceil(Math.max(start_corner.v_x,end_corner.v_x));  double uy=Math.ceil(Math.max(start_corner.v_y,end_corner.v_y));  double start_x_minus_y=start_corner.v_x - start_corner.v_y;  double end_x_minus_y=end_corner.v_x - end_corner.v_y;  double ulx=Math.floor(Math.min(start_x_minus_y,end_x_minus_y));  double lrx=Math.ceil(Math.max(start_x_minus_y,end_x_minus_y));  double start_x_plus_y=start_corner.v_x + start_corner.v_y;  double end_x_plus_y=end_corner.v_x + end_corner.v_y;  double llx=Math.floor(Math.min(start_x_plus_y,end_x_plus_y));  double urx=Math.ceil(Math.max(start_x_plus_y,end_x_plus_y));  ShapeTileOctagon result=new ShapeTileOctagon(lx,ly,rx,uy,ulx,lrx,llx,urx);  bounding_octagon=result.normalize();  return bounding_octagon;}  }
class C{  public static Layout.Directions directions(int dir,byte[] levels,int lstart,char[] chars,int cstart,int len){  if (len == 0) {    return Layout.DIRS_ALL_LEFT_TO_RIGHT;  }  int baseLevel=dir == Layout.DIR_LEFT_TO_RIGHT ? 0 : 1;  int curLevel=levels[lstart];  int minLevel=curLevel;  int runCount=1;  for (int i=lstart + 1, e=lstart + len; i < e; ++i) {    int level=levels[i];    if (level != curLevel) {      curLevel=level;      ++runCount;    }  }  int visLen=len;  if ((curLevel & 1) != (baseLevel & 1)) {    while (--visLen >= 0) {      char ch=chars[cstart + visLen];      if (ch == '\n') {        --visLen;        break;      }      if (ch != ' ' && ch != '\t') {        break;      }    }    ++visLen;    if (visLen != len) {      ++runCount;    }  }  if (runCount == 1 && minLevel == baseLevel) {    if ((minLevel & 1) != 0) {      return Layout.DIRS_ALL_RIGHT_TO_LEFT;    }    return Layout.DIRS_ALL_LEFT_TO_RIGHT;  }  int[] ld=new int[runCount * 2];  int maxLevel=minLevel;  int levelBits=minLevel << Layout.RUN_LEVEL_SHIFT;{    int n=1;    int prev=lstart;    curLevel=minLevel;    for (int i=lstart, e=lstart + visLen; i < e; ++i) {      int level=levels[i];      if (level != curLevel) {        curLevel=level;        if (level > maxLevel) {          maxLevel=level;        } else         if (level < minLevel) {          minLevel=level;        }        ld[n++]=(i - prev) | levelBits;        ld[n++]=i - lstart;        levelBits=curLevel << Layout.RUN_LEVEL_SHIFT;        prev=i;      }    }    ld[n]=(lstart + visLen - prev) | levelBits;    if (visLen < len) {      ld[++n]=visLen;      ld[++n]=(len - visLen) | (baseLevel << Layout.RUN_LEVEL_SHIFT);    }  }  boolean swap;  if ((minLevel & 1) == baseLevel) {    minLevel+=1;    swap=maxLevel > minLevel;  } else {    swap=runCount > 1;  }  if (swap) {    for (int level=maxLevel - 1; level >= minLevel; --level) {      for (int i=0; i < ld.length; i+=2) {        if (levels[ld[i]] >= level) {          int e=i + 2;          while (e < ld.length && levels[ld[e]] >= level) {            e+=2;          }          for (int low=i, hi=e - 2; low < hi; low+=2, hi-=2) {            int x=ld[low];            ld[low]=ld[hi];            ld[hi]=x;            x=ld[low + 1];            ld[low + 1]=ld[hi + 1];            ld[hi + 1]=x;          }          i=e + 2;        }      }    }  }  return new Layout.Directions(ld);}  }
class C{  public void addDefaultValue(String value) throws SMSException, SSOException {  Set defaultValues=getDefaultValues();  if (defaultValues != Collections.EMPTY_SET) {    defaultValues.add(value);  } else {    defaultValues=new HashSet();    defaultValues.add(value);  }  updateDefaultValues(defaultValues);}  }
class C{  public static Set<String> removeBlankEntries(Set<String> originalSet){  if (isEmpty(originalSet)) {    return originalSet;  }  Set<String> result=new HashSet<>(originalSet.size());  for (  String entry : originalSet) {    if (StringUtils.isNotBlank(entry)) {      result.add(entry);    }  }  return result;}  }
class C{  public void preSSOFederationRequest(String hostedProviderID,String idpProviderID,HttpServletRequest request,HttpServletResponse response,FSAuthnRequest authnRequest){  FSUtils.debug.message("In FSDefaultSPAdapter.preSSOFederationRequest.");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("null","elementId");  assertSize("documentgetelementsbytagnameNS05",0,childList);}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public long countDown(){  sync.releaseShared(0);  long result=getCount();  if (log.isDebugEnabled()) {    log.debug("Counting down[" + Thread.currentThread().getName() + "] latch="+ result);  }  return result;}  }
class C{  public boolean newDNIsParent(DN targetDn){  try {    DN newDN=computeNewDN();    return newDN.isSuperiorOrEqualTo(targetDn);  } catch (  LocalizedIllegalArgumentException e) {    return false;  }}  }
class C{  private void insertMethodArgumentRecording() throws JavaSpecificationViolation {  addLoadAndTraceInstructions(EventKind.START_METHOD,false);  if (classname == QualifiedClassName.get("java/awt/LightweightDispatcher") && method.getInternalName().equals("retargetMouseEvent")) {    ClassInfo mouseEventClassInfo=pool.addClassInfo(MouseEvent.class);    instructions.add(new ALOAD_3(code));    instructions.add(new INVOKEVIRTUAL(code,pool.addMethodrefInfo(mouseEventClassInfo,"getComponent","()Ljava/awt/Component;")));    instructions.add(new ALOAD_3(code));    instructions.add(new INVOKEVIRTUAL(code,pool.addMethodrefInfo(mouseEventClassInfo,"getID","()I")));    instructions.add(new ALOAD_3(code));    instructions.add(new INVOKEVIRTUAL(code,pool.addMethodrefInfo(mouseEventClassInfo,"getX","()I")));    instructions.add(new ALOAD_3(code));    instructions.add(new INVOKEVIRTUAL(code,pool.addMethodrefInfo(mouseEventClassInfo,"getY","()I")));    instructions.add(new ALOAD_3(code));    instructions.add(new INVOKEVIRTUAL(code,pool.addMethodrefInfo(mouseEventClassInfo,"getButton","()I")));    addLoadAndTraceInstructions(EventKind.MOUSE_EVENT,true);  } else   if (classname == QualifiedClassName.get("java/awt/event/KeyEvent") && method.isInstanceInitializer() && method.getDescriptor().equals("(Ljava/awt/Component;IJIICI)V")) {    instructions.add(new ALOAD_1(code));    instructions.add(new ILOAD_2(code));    instructions.add(new ILOAD(code,5));    instructions.add(new ILOAD(code,6));    instructions.add(new ILOAD(code,7));    instructions.add(new ILOAD(code,8));    addLoadAndTraceInstructions(EventKind.KEY_EVENT,true);  } else   if (classname == QualifiedClassName.get("java/awt/Window") && method.getDescriptor().equals("()V")) {    String name=method.getInternalName();    if (name.equals("show") || name.equals("hide")) {      instructions.add(new ALOAD_0(code));      addLoadAndTraceInstructions(EventKind.WINDOW,true);    }  }  if (!method.isStatic() && !method.isInstanceInitializer()) {    instructions.add(new ALOAD(code,0));    addLoadAndTraceInstructions(EventKind.OBJECT_ARG,false);  }  int localID=method.isStatic() ? 0 : 1;  for (  String type : method.getParsedDescriptor()) {    EventKind typeProduced=null;    if (type.equals(MethodDescriptor.INT)) {      typeProduced=EventKind.INTEGER_ARG;      instructions.add(new ILOAD(code,localID));    } else     if (type.startsWith("[")) {      typeProduced=EventKind.OBJECT_ARG;      instructions.add(new ALOAD(code,localID));    } else     if (type.startsWith("L")) {      typeProduced=EventKind.OBJECT_ARG;      instructions.add(new ALOAD(code,localID));    } else     if (type.equals(MethodDescriptor.CHAR)) {      typeProduced=EventKind.CHARACTER_ARG;      instructions.add(new ILOAD(code,localID));    } else     if (type.equals(MethodDescriptor.FLOAT)) {      typeProduced=EventKind.FLOAT_ARG;      instructions.add(new FLOAD(code,localID));    } else     if (type.equals(MethodDescriptor.LONG)) {      typeProduced=EventKind.LONG_ARG;      instructions.add(new LLOAD(code,localID));    } else     if (type.equals(MethodDescriptor.DOUBLE)) {      typeProduced=EventKind.DOUBLE_ARG;      instructions.add(new DLOAD(code,localID));    } else     if (type.equals(MethodDescriptor.SHORT)) {      typeProduced=EventKind.SHORT_ARG;      instructions.add(new ILOAD(code,localID));    } else     if (type.equals(MethodDescriptor.BOOLEAN)) {      typeProduced=EventKind.BOOLEAN_ARG;      instructions.add(new ILOAD(code,localID));    } else     if (type.equals(MethodDescriptor.BYTE)) {      typeProduced=EventKind.BYTE_ARG;      instructions.add(new ILOAD(code,localID));    }    if (typeProduced != null) {      addLoadAndTraceInstructions(typeProduced,false);      if (typeProduced.isDoubleOrLong())       localID+=2; else       localID++;    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl();}  }
class C{  void load(byte[] data,int p0,int scanWidth){  Arrays.fill(min,255);  Arrays.fill(max,0);  Arrays.fill(bgColor,0);  Arrays.fill(fgColor,0);  int pos=p0;  for (int y=0; y < 8; y++) {    for (int x=0; x < 4; x++) {      for (int i=0; i < 3; i++) {        int d=data[pos++] & 255;        min[i]=Math.min(min[i],d);        max[i]=Math.max(max[i],d);      }      pos++;    }    pos+=scanWidth - 16;  }  int splitIndex=0;  int bestSplit=0;  for (int i=0; i < 3; i++) {    if (max[i] - min[i] > bestSplit) {      bestSplit=max[i] - min[i];      splitIndex=i;    }  }  int splitValue=min[splitIndex] + bestSplit / 2;  int bits=0;  int fgCount=0;  int bgCount=0;  pos=p0;  for (int y=0; y < 8; y++) {    for (int x=0; x < 4; x++) {      bits=bits << 1;      int[] avg;      if ((data[pos + splitIndex] & 255) > splitValue) {        avg=fgColor;        bits|=1;        fgCount++;      } else {        avg=bgColor;        bgCount++;      }      for (int i=0; i < 3; i++) {        avg[i]+=data[pos++] & 255;      }      pos++;    }    pos+=scanWidth - 16;  }  for (int i=0; i < 3; i++) {    if (bgCount != 0) {      bgColor[i]/=bgCount;    }    if (fgCount != 0) {      fgColor[i]/=fgCount;    }  }  int bestDiff=Integer.MAX_VALUE;  boolean invert=false;  for (int i=0; i < BITMAPS.length; i+=2) {    int diff=Integer.bitCount(BITMAPS[i] ^ bits);    if (diff < bestDiff) {      character=(char)BITMAPS[i + 1];      bestDiff=diff;      invert=false;    }    diff=Integer.bitCount((~BITMAPS[i]) ^ bits);    if (diff < bestDiff) {      character=(char)BITMAPS[i + 1];      bestDiff=diff;      invert=true;    }  }  if (bestDiff > 10) {    invert=false;    character=" \u2591\u2592\u2593\u2588".charAt(Math.min(4,fgCount * 5 / 32));  }  if (invert) {    int[] tmp=bgColor;    bgColor=fgColor;    fgColor=tmp;  }}  }
class C{  public TriggerContext(final JsonValue savedContext,final ClassLoader classLoader) throws ResourceException {  super(savedContext,classLoader);}  }
class C{  public void recon(ReconciliationContext reconContext) throws SynchronizationException {  EventEntry measure=Publisher.start(EVENT_RECON,reconContext.getReconId(),null);  doRecon(reconContext);  measure.end();}  }
class C{  public void testMaxGreater(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  private void hideToolTip(MouseEvent event){  if (tipWindow != null) {    tipWindow.hide();    tipWindow=null;    isTooltipVisible=false;  }}  }
class C{  public boolean canCreateRule(Policy policy,String realmName){  getSvcTypeNameToActionsMap(policy,realmName);  return !requiredResourceNameService.isEmpty() || !notRequiredResourceNameService.isEmpty();}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public void init() throws ServletException {  super.init();  try {    String def=PROVIDER_DEFAULT.toString();    String provider=getInitParameter(PARAM_PROVIDER,def);    this.factory=IdentityServicesFactory.getInstance(provider);  } catch (  Exception e) {    throw new ServletException(e);  }}  }
class C{  private static boolean matchDispatcher(FilterMap filterMap,DispatcherType type){switch (type) {case FORWARD:    if ((filterMap.getDispatcherMapping() & FilterMap.FORWARD) > 0) {      return true;    }  break;case INCLUDE:if ((filterMap.getDispatcherMapping() & FilterMap.INCLUDE) > 0) {  return true;}break;case REQUEST:if ((filterMap.getDispatcherMapping() & FilterMap.REQUEST) > 0) {return true;}break;case ERROR:if ((filterMap.getDispatcherMapping() & FilterMap.ERROR) > 0) {return true;}break;case ASYNC:if ((filterMap.getDispatcherMapping() & FilterMap.ASYNC) > 0) {return true;}break;}return false;}  }
class C{  public boolean isEditable(){  for (  final JKTableColumn col : this.tableColumns) {    if (col.isEditable()) {      return true;    }  }  return false;}  }
class C{  public static UIOutput createOutputText(final String value){  final UIOutput out=(UIOutput)JSFComponentFactory.createComponent(UIOutput.COMPONENT_TYPE);  if (value != null) {    out.setValueExpression("value",JSFComponentFactory.createLabelValueExpression(value));  }  return out;}  }
class C{  protected int MultiplicativeExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  UnaryExpr();  if (null != m_token) {    if (tokenIs('*')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MULT);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("div")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_DIV);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("mod")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MOD);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("quo")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_QUO);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  public boolean name_exists(String p_name){  for (  BrdViaInfo curr_via : vinfo_list) {    if (curr_via.get_name().equals(p_name))     return true;  }  return false;}  }
class C{  public JKValidationException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  if (diff == null) {    out.writeBoolean(false);  } else {    out.writeBoolean(false);    out.writeUTF(diff);  }}  }
class C{  @Override public byte[] read(int length) throws IOException {  if (length > available()) {    throw new EndOfBufferException();  }  byte[] res=new byte[length];  System.arraycopy(buffer,read_pos,res,0,length);  read_pos=read_pos + length;  return res;}  }
class C{  private AuthTargetMappingBuilder addMapping(String tokenTypeId,String authIndexType,String authIndexValue,Map<String,String> context){  mappings.put(tokenTypeId,new AuthTarget(authIndexType,authIndexValue,context));  return this;}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  if (debug.messageEnabled()) {    debug.message("SessionCondition.validateProperties(): " + "properties: " + properties);  }  String value=getPropertyStringValue(MAX_SESSION_TIME,true);  try {    int i=Integer.parseInt(value);    if (i > 0) {      maxSessionTime=i * 60000;    } else {      String args[]={MAX_SESSION_TIME,value};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }  } catch (  NumberFormatException e) {    String args[]={MAX_SESSION_TIME};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_an_Integer",args,null);  }  value=getPropertyStringValue(TERMINATE_SESSION,false);  if (value != null && value.equals(SESSION_CONDITION_TRUE_VALUE)) {    terminateSession=true;  }  return true;}  }
class C{  protected void ReadCommand(){  key=null;  boolean gotKey=false;  while (!gotKey) {    char b0=getCard8();    if (b0 == 28) {      int first=getCard8();      int second=getCard8();      args[arg_count]=first << 8 | second;      arg_count++;      continue;    }    if (b0 >= 32 && b0 <= 246) {      args[arg_count]=b0 - 139;      arg_count++;      continue;    }    if (b0 >= 247 && b0 <= 250) {      int w=getCard8();      args[arg_count]=(b0 - 247) * 256 + w + 108;      arg_count++;      continue;    }    if (b0 >= 251 && b0 <= 254) {      int w=getCard8();      args[arg_count]=-(b0 - 251) * 256 - w - 108;      arg_count++;      continue;    }    if (b0 == 255) {      int first=getCard8();      int second=getCard8();      int third=getCard8();      int fourth=getCard8();      args[arg_count]=first << 24 | second << 16 | third << 8 | fourth;      arg_count++;      continue;    }    if (b0 <= 31 && b0 != 28) {      gotKey=true;      if (b0 == 12) {        int b1=getCard8();        if (b1 > SubrsEscapeFuncs.length - 1)         b1=SubrsEscapeFuncs.length - 1;        key=SubrsEscapeFuncs[b1];      } else       key=SubrsFunctions[b0];      continue;    }  }}  }
class C{  public void play(URL url,String name){  AudioClip clip=getAudioClip(url,name);  if (clip != null) {    clip.play();  }}  }
class C{  public WindowRandomAccessSource(IRandomAccessSource source,long offset,long length){  this.source=source;  this.offset=offset;  this.length=length;}  }
class C{  @Override public Session load(String id) throws ClassNotFoundException, IOException {  StandardSession _session=null;  org.apache.catalina.Context context=getManager().getContext();  Log contextLog=context.getLogger();synchronized (this) {    int numberOfTries=2;    while (numberOfTries > 0) {      Connection _conn=getConnection();      if (_conn == null) {        return null;      }      ClassLoader oldThreadContextCL=context.bind(Globals.IS_SECURITY_ENABLED,null);      try {        if (preparedLoadSql == null) {          String loadSql="SELECT " + sessionIdCol + ", "+ sessionDataCol+ " FROM "+ sessionTable+ " WHERE "+ sessionIdCol+ " = ? AND "+ sessionAppCol+ " = ?";          preparedLoadSql=_conn.prepareStatement(loadSql);        }        preparedLoadSql.setString(1,id);        preparedLoadSql.setString(2,getName());        try (ResultSet rst=preparedLoadSql.executeQuery()){          if (rst.next()) {            try (ObjectInputStream ois=getObjectInputStream(rst.getBinaryStream(2))){              if (contextLog.isDebugEnabled()) {                contextLog.debug(sm.getString(getStoreName() + ".loading",id,sessionTable));              }              _session=(StandardSession)manager.createEmptySession();              _session.readObjectData(ois);              _session.setManager(manager);            }           } else           if (context.getLogger().isDebugEnabled()) {            contextLog.debug(getStoreName() + ": No persisted data object found");          }          numberOfTries=0;        }       } catch (      SQLException e) {        contextLog.error(sm.getString(getStoreName() + ".SQLException",e));        if (dbConnection != null)         close(dbConnection);      } finally {        context.unbind(Globals.IS_SECURITY_ENABLED,oldThreadContextCL);        release(_conn);      }      numberOfTries--;    }  }  return _session;}  }
class C{  public static String encodeOffline(byte[] passwordBytes) throws DirectoryException {  byte[] saltBytes=new byte[NUM_SALT_BYTES];  new Random().nextBytes(saltBytes);  byte[] passwordPlusSalt=new byte[passwordBytes.length + NUM_SALT_BYTES];  System.arraycopy(passwordBytes,0,passwordPlusSalt,0,passwordBytes.length);  System.arraycopy(saltBytes,0,passwordPlusSalt,passwordBytes.length,NUM_SALT_BYTES);  MessageDigest messageDigest;  try {    messageDigest=MessageDigest.getInstance(MESSAGE_DIGEST_ALGORITHM_SHA_1);  } catch (  Exception e) {    LocalizableMessage message=ERR_PWSCHEME_CANNOT_INITIALIZE_MESSAGE_DIGEST.get(MESSAGE_DIGEST_ALGORITHM_SHA_1,e);    throw new DirectoryException(ResultCode.OTHER,message,e);  }  byte[] digestBytes=messageDigest.digest(passwordPlusSalt);  byte[] digestPlusSalt=new byte[digestBytes.length + NUM_SALT_BYTES];  System.arraycopy(digestBytes,0,digestPlusSalt,0,digestBytes.length);  System.arraycopy(saltBytes,0,digestPlusSalt,digestBytes.length,NUM_SALT_BYTES);  Arrays.fill(passwordPlusSalt,(byte)0);  return "{" + STORAGE_SCHEME_NAME_SALTED_SHA_1 + "}"+ Base64.encode(digestPlusSalt);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  failNotEquals(message,expected,actual);}  }
class C{  public static ImageData create(java.awt.Image image,java.awt.Color color) throws java.io.IOException {  return AwtImageDataFactory.create(image,color,false);}  }
class C{  public static void deregisterBackendInitializationListener(BackendInitializationListener listener){  directoryServer.backendInitializationListeners.remove(listener);}  }
class C{  CollationEqualityMatchingRuleImpl(Locale locale){  super(locale);}  }
class C{  public Cursor fetchAll(Long ruleActionID,Long actionParameterID,String ruleActionParameterData){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (ruleActionID != null) {    qb.appendWhere(" AND " + KEY_RULEACTIONID + " = "+ ruleActionID);  }  if (actionParameterID != null) {    qb.appendWhere(" AND " + KEY_ACTIONPARAMETERID + " = "+ actionParameterID);  }  if (ruleActionParameterData != null) {    qb.appendWhere(" AND " + KEY_RULEACTIONPARAMETERDATA + " = ");    qb.appendWhereEscapeString(ruleActionParameterData);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public Object remove(Object oldInstance){  Expression exp=bindings.remove(oldInstance);  return getValue(exp);}  }
class C{  public static KeyStoreHandler open(final File keyStoreFile,final char[] password) throws IOException, KeyStoreException {  if (!keyStoreFile.exists()) {    throw new FileNotFoundException(keyStoreFile.getAbsolutePath());  }  final KeyStore ks=KeyStore.getInstance(KeyStoreHandler.KEYSTORE_TYPE);  try (final FileInputStream fis=new FileInputStream(keyStoreFile)){    ks.load(fis,password);    return new KeyStoreHandler(ks,password,keyStoreFile,KeyStoreHandler.getSecretKeyFactory());  } catch (  final NoSuchAlgorithmException|CertificateException ex) {    throw new IllegalStateException("Should not happen.",ex);  }}  }
class C{  @SuppressWarnings("null") @Override public void end(String namespace,String name) throws Exception {  Object parameters[]=null;  if (paramCount > 0) {    parameters=(Object[])digester.popParams();    if (digester.log.isTraceEnabled()) {      for (int i=0, size=parameters.length; i < size; i++) {        digester.log.trace("[CallMethodRule](" + i + ")"+ parameters[i]);      }    }    if (paramCount == 1 && parameters[0] == null) {      return;    }  } else   if (paramTypes != null && paramTypes.length != 0) {    if (bodyText == null) {      return;    }    parameters=new Object[1];    parameters[0]=bodyText;  }  Object paramValues[]=new Object[paramTypes.length];  for (int i=0; i < paramTypes.length; i++) {    if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {      paramValues[i]=IntrospectionUtils.convert((String)parameters[i],paramTypes[i]);    } else {      paramValues[i]=parameters[i];    }  }  Object target;  if (targetOffset >= 0) {    target=digester.peek(targetOffset);  } else {    target=digester.peek(digester.getCount() + targetOffset);  }  if (target == null) {    StringBuilder sb=new StringBuilder();    sb.append("[CallMethodRule]{");    sb.append(digester.match);    sb.append("} Call target is null (");    sb.append("targetOffset=");    sb.append(targetOffset);    sb.append(",stackdepth=");    sb.append(digester.getCount());    sb.append(")");    throw new org.xml.sax.SAXException(sb.toString());  }  if (digester.log.isDebugEnabled()) {    StringBuilder sb=new StringBuilder("[CallMethodRule]{");    sb.append(digester.match);    sb.append("} Call ");    sb.append(target.getClass().getName());    sb.append(".");    sb.append(methodName);    sb.append("(");    for (int i=0; i < paramValues.length; i++) {      if (i > 0) {        sb.append(",");      }      if (paramValues[i] == null) {        sb.append("null");      } else {        sb.append(paramValues[i].toString());      }      sb.append("/");      if (paramTypes[i] == null) {        sb.append("null");      } else {        sb.append(paramTypes[i].getName());      }    }    sb.append(")");    digester.log.debug(sb.toString());  }  Object result=IntrospectionUtils.callMethodN(target,methodName,paramValues,paramTypes);  processMethodCallResult(result);}  }
class C{  public LDAPRequestHandler(LDAPConnectionHandler connectionHandler,int requestHandlerID) throws InitializationException {  super("LDAP Request Handler " + requestHandlerID + " for connection handler "+ connectionHandler);  handlerName=getName();  try {    selector=Selector.open();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_REQHANDLER_OPEN_SELECTOR_FAILED.get(handlerName,e);    throw new InitializationException(message,e);  }  try {    selector.selectNow();  } catch (  IOException ioe) {    StackTraceElement[] stackElements=ioe.getStackTrace();    if (stackElements != null && stackElements.length > 0) {      StackTraceElement ste=stackElements[0];      if (ste.getClassName().equals("sun.nio.ch.DevPollArrayWrapper") && ste.getMethodName().contains("poll") && ioe.getMessage().equalsIgnoreCase("Invalid argument")) {        LocalizableMessage message=ERR_LDAP_REQHANDLER_DETECTED_JVM_ISSUE_CR6322825.get(ioe);        throw new InitializationException(message,ioe);      }    }  }}  }
class C{  public GridLayout(int rows,int cols){  this(rows,cols,0,0);}  }
class C{  public void testBoundedGenericMethods(){  assertLenghtOne(clazz.getTypeParameters());}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setParameters(params);  doLog(lr,bundleName);}  }
class C{  private void updateRecorderError(int errorType){  Log.d(TAG,"updateRecorderError.errorType: " + errorType);  String showString=null;  refreshRecordIdle();switch (errorType) {case FmRecorder.ERROR_SDCARD_NOT_PRESENT:    showString=getString(R.string.toast_sdcard_missing);  break;case FmRecorder.ERROR_SDCARD_INSUFFICIENT_SPACE:showString=getString(R.string.toast_sdcard_insufficient_space);break;case FmRecorder.ERROR_RECORDER_INTERNAL:showString=getString(R.string.toast_recorder_internal_error);break;case FmRecorder.ERROR_PLAYER_INTERNAL:showString=getString(R.string.toast_player_internal_error);break;case FmRadioListener.NOT_AUDIO_FOCUS:showString=getString(R.string.not_available);if (isRecordFileExist()) {refreshPlaybackIdle(true);}break;case FmRecorder.ERROR_RECORDER_INVALID_STATE:showString=getString(R.string.toast_powerup_before_record_warning);break;default :Log.d(TAG,"invalid recorder error");break;}showToast(showString);}  }
class C{  public final Map<String,String> asMap(){  final Map<String,String> map=new HashMap<String,String>();  map.put("error",getError());  if (!isEmpty(getErrorDescription())) {    map.put("error_description",getErrorDescription());  }  if (!isEmpty(getErrorUri())) {    map.put("error_uri",getErrorUri());  }  if (!isEmpty(getState())) {    map.put("state",getState());  }  return map;}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  private void showAverageClicked(){  boolean showAverages=showAveragesMenu.isSelected();  setChOperationsToDisplay(chOperations,showAverages);  updateTableSizes();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.SubjectElement createSubjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.SubjectElementImpl();}  }
class C{  private void doCreate(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryCreate(entry.getFile());    } else {      listener.onFileCreate(entry.getFile());    }  }  FileEntry[] children=entry.getChildren();  for (  FileEntry aChildren : children) {    doCreate(aChildren);  }}  }
class C{  public void add(char[] keyword,byte id){  int key=getStringMapKey(keyword);  loop:   for (  char ch : keyword) {    if (!Character.isLetterOrDigit(ch)) {      for (int j=0; j < noWordSep.length(); j++) {        if (noWordSep.charAt(j) == ch)         continue loop;      }      noWordSep.append(ch);    }  }  map[key]=new Keyword(keyword,id,map[key]);}  }
class C{  public void testDoubleValuePosMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  double result=8.98846567431158E307;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  @Override public int hashCode(){  return hashCode(buffer,offset,length);}  }
class C{  void recomposeOutput(OutputProperties oprops) throws TransformerException {  m_outputProperties.copyFrom(oprops);}  }
class C{  public boolean isNodeSibling(TreeNode anotherNode){  boolean retval;  if (anotherNode == null) {    retval=false;  } else   if (anotherNode == this) {    retval=true;  } else {    TreeNode myParent=getParent();    retval=(myParent != null && myParent == anotherNode.getParent());    if (retval && !((DefaultMutableTreeNode)getParent()).isNodeChild(anotherNode)) {      throw new Error("sibling has different parent");    }  }  return retval;}  }
class C{  private static boolean isPrintableString(String str){  for (int i=0; i < str.length(); ++i) {    char ch=str.charAt(i);    if (!(ch == 0x20 || ch >= 0x27 && ch <= 0x29 || ch >= 0x2B && ch <= 0x3A || ch == '=' || ch == '?' || ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {      return false;    }  }  return true;}  }
class C{  public static String parseSubCommandInfo(String name,String desc,Collection<String> mandatory,Collection<String> optional){  String description=desc.replaceAll("<","&lt;");  String req="";  for (  String m : mandatory)   req+=OptionXML.parseOption(m,false);  String opt="";  for (  String o : optional)   opt+=OptionXML.parseOption(o,true);  return "  <refsect2 xml:id=\"ssoadm-" + name + "\">\n"+ "   <title>ssoadm "+ name+ "</title>\n"+ "   <para>"+ description+ "</para>\n"+ "   <para>Usage: <literal>ssoadm "+ name+ " --options [--global-options]</literal></para>\n"+ "   <variablelist>\n"+ "    <title>Options</title>\n"+ req+ opt+ "   </variablelist>\n"+ "  </refsect2>";}  }
class C{  private boolean timeoutOccurred(long endMaxTime){  return TimeThread.getTime() > endMaxTime;}  }
class C{  public Executor env(Map<String,String> env){  this.env=env;  return this;}  }
class C{  private static void percentEncoder(final String urlElement,final StringBuilder encodedBuffer){  Reject.ifNull(urlElement);  for (int count=0; count < urlElement.length(); count++) {    final char c=urlElement.charAt(count);    if (VALID_CHARS.contains(c)) {      encodedBuffer.append(c);    } else {      encodedBuffer.append(PERCENT_ENCODING_CHAR);      encodedBuffer.append(Integer.toHexString(c));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node child;  String childName;  Node replacedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  newChild=doc.createElement("br");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  child=childList.item(0);  childName=child.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  State(TreeName name){  super(name);}  }
class C{  public SIPHeader parse() throws ParseException {  ProxyRequireList list=new ProxyRequireList();  if (debug)   dbg_enter("ProxyRequireParser.parse");  try {    headerName(TokenTypes.PROXY_REQUIRE);    while (lexer.lookAhead(0) != '\n') {      ProxyRequire r=new ProxyRequire();      r.setHeaderName(SIPHeaderNames.PROXY_REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      list.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new ProxyRequire();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        list.add(r);      }    }  }  finally {    if (debug)     dbg_leave("ProxyRequireParser.parse");  }  return list;}  }
class C{  @Deprecated public short toDamageValue(){  return 0;}  }
class C{  public void schedule(TimerTask task,Date time){  sched(task,time.getTime(),0);}  }
class C{  @Override public void write(String s,int off,int len) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(s,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(bufferSize - nextChar,t - b);    s.getChars(b,b + d,cb,nextChar);    b+=d;    nextChar+=d;    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  public boolean hasPlayerCount(){  return fieldSetFlags()[0];}  }
class C{  public FileBasedKeyManagerProvider(){}  }
class C{  public boolean isSignatureValid(){  if (signed & !validationDone) {    valid=SAMLUtils.checkSignatureValid(xmlString,RESPONSE_ID_ATTRIBUTE,issuer);    validationDone=true;  }  return valid;}  }
class C{  public CharsetMapper(String name){  try (InputStream stream=this.getClass().getResourceAsStream(name)){    map.load(stream);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    throw new IllegalArgumentException(t.toString());  }}  }
class C{  public FontKey(String family,int style,int size){  setValue(family,style,size);}  }
class C{  private static void updateAllUIs(){  Frame appFrames[]=Frame.getFrames();  for (  Frame frame : appFrames) {    updateWindowUI(frame);  }}  }
class C{  protected boolean end(TextView widget,Spannable buffer){  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenode.class,args);}  }
class C{  public TextEncodedStringSizeTerminated(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public String rubyTypeName(TypeRef typeRef){switch (typeRef.getKind()) {case TYPE_MESSAGE:    return rubyTypeNameForProtoElement(typeRef.getMessageType());case TYPE_ENUM:  return rubyTypeNameForProtoElement(typeRef.getEnumType());default :{  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());  if (!Strings.isNullOrEmpty(name)) {    return name;  }  throw new IllegalArgumentException("unknown type kind: " + typeRef.getKind());}}}  }
class C{  public static JTextArea createTextAreaWithBorder(LocalizableMessage text,int rows,int cols){  JTextArea ta=createTextArea(text,rows,cols);  if (ColorAndFontConstants.textAreaBorder != null) {    setBorder(ta,ColorAndFontConstants.textAreaBorder);  }  return ta;}  }
class C{  public void enableSuperAura(){  auraStateComplete=false;  spriteFrame.setFitHeight(0);  main.Main.auraLoop.stop();  frameControl=0;  effectiveYPos=0;  for (int i=0; i < 4; i++)   playerStates.remove(0);}  }
class C{  @DataProvider(name="passwordExpiredControlData") public Object[][] createPasswordExpiredControlData(){  return new Object[][]{{true},{false}};}  }
class C{  public void shutdown(){  if (replicationServer != null) {    replicationServer.shutdown();  }}  }
class C{  public void deleteSites(Set sites) throws AMConsoleException {  String siteName=null;  try {    if ((sites != null) && !sites.isEmpty()) {      SSOToken token=getUserSSOToken();      for (Iterator i=sites.iterator(); i.hasNext(); ) {        siteName=(String)i.next();        String[] param={siteName};        logEvent("ATTEMPT_DELETE_SITE",param);        SiteConfiguration.deleteSite(token,siteName);        logEvent("SUCCEED_DELETE_SITE",param);      }    }  } catch (  ConfigurationException e) {    String[] params={siteName,e.getMessage()};    logEvent("SMS_EXCEPTION_DELETE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={siteName,e.getMessage()};    logEvent("SMS_EXCEPTION_DELETE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={siteName,e.getMessage()};    logEvent("SSO_EXCEPTION_DELETE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  @Deprecated public PistonBaseMaterial(final int type){  super(type);}  }
class C{  private void createResouceTypesData(final Element rootElement) throws Exception {  Element element=creator.getDocument().createElement("ResourceTypes");  rootElement.appendChild(element);  List<String> types;  if (super.type != null && !super.type.equals("")) {    types=new ArrayList<>();    types.add(super.type);  } else {    types=getTypes();  }  for (  String key : types) {    ResourceType resourceType=configuration.getTypes().get(key);    if (((this.type == null || this.type.equals(key)) && resourceType != null) && AccessControlUtil.getInstance(this.configuration).checkFolderACL(key,"/",this.userRole,AccessControlUtil.CKFINDER_CONNECTOR_ACL_FOLDER_VIEW)) {      Element childElement=creator.getDocument().createElement("ResourceType");      childElement.setAttribute("name",resourceType.getName());      childElement.setAttribute("acl",String.valueOf(AccessControlUtil.getInstance(configuration).checkACLForRole(key,"/",this.userRole)));      childElement.setAttribute("hash",randomHash(resourceType.getPath()));      childElement.setAttribute("allowedExtensions",resourceType.getAllowedExtensions());      childElement.setAttribute("deniedExtensions",resourceType.getDeniedExtensions());      childElement.setAttribute("url",resourceType.getUrl() + "/");      Long maxSize=resourceType.getMaxSize();      childElement.setAttribute("maxSize",(maxSize != null && maxSize > 0) ? maxSize.toString() : "0");      childElement.setAttribute("hasChildren",FileUtils.hasChildren("/",new File(PathUtils.escape(resourceType.getPath())),configuration,resourceType.getName(),this.userRole).toString());      element.appendChild(childElement);    }  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  ApiDescription instanceApi(boolean isReadOnly){  if (allProperties.isEmpty() && superType == null && subTypes.isEmpty()) {    return null;  }  org.forgerock.api.models.Resource.Builder resource=org.forgerock.api.models.Resource.resource().title(id).description(toLS(description)).resourceSchema(schemaRef("#/definitions/" + id)).mvccSupported(isMvccSupported());  resource.read(readOperation());  if (!isReadOnly) {    resource.update(updateOperation());    resource.patch(patchOperation());    for (    Action action : supportedActions) {      resource.action(actions(action));    }  }  return ApiDescription.apiDescription().id("unused").version("unused").definitions(definitions()).services(services(resource)).paths(paths()).errors(errors()).build();}  }
class C{  public static void main(String[] args) throws IOException {  final File cfg=new File("./" + CONFIG_FILE);  if (!cfg.exists() || !cfg.isFile()) {    usage();  }  final Properties props=new Properties();  props.load(new FileReader(cfg));  final ConsoleClient client=new ConsoleClient(props);  client.run();}  }
class C{  public boolean remove(final URI uri){  return this.uris.remove(uri);}  }
class C{  @Override public void handleUpstream(ChannelHandlerContext context,ChannelEvent e) throws Exception {  try {    super.handleUpstream(context,e);  } catch (  RejectedExecutionException rejectException) {    if (e instanceof MessageEvent) {      if (((MessageEvent)e).getMessage() instanceof Request) {        Request request=(Request)((MessageEvent)e).getMessage();        DefaultResponse response=new DefaultResponse();        response.setRequestId(request.getRequestId());        response.setException(new MotanServiceException("process thread pool is full, reject",MotanErrorMsgConstant.SERVICE_REJECT));        e.getChannel().write(response);        LoggerUtil.debug("process thread pool is full, reject, active={} poolSize={} corePoolSize={} maxPoolSize={} taskCount={} requestId={}",threadPoolExecutor.getActiveCount(),threadPoolExecutor.getPoolSize(),threadPoolExecutor.getCorePoolSize(),threadPoolExecutor.getMaximumPoolSize(),threadPoolExecutor.getTaskCount(),request.getRequestId());      }    }  }}  }
class C{  public void testCertPathValidator01(){  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String propName="certpathvalidator.type";  String defCPV=Security.getProperty(propName);  String dt=CertPathValidator.getDefaultType();  String resType=defCPV;  if (resType == null) {    resType=defaultType;  }  assertNotNull("Default type have not be null",dt);  assertEquals("Incorrect default type",dt,resType);  if (defCPV == null) {    Security.setProperty(propName,defaultType);    dt=CertPathValidator.getDefaultType();    resType=Security.getProperty(propName);    assertNotNull("Incorrect default type",resType);    assertNotNull("Default type have not be null",dt);    assertEquals("Incorrect default type",dt,resType);  }}  }
class C{  public INVALID_TRANSACTION(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public AddOperation processAdd(AddChangeRecordEntry addRecord){  Entry e=newEntry(addRecord.getDN());  ArrayList<ByteString> duplicateValues=new ArrayList<>();  for (  Attribute a : addRecord.getAttributes()) {    if (a.getAttributeDescription().getAttributeType().isObjectClass()) {      for (      ByteString v : a) {        String ocName=v.toString();        e.getObjectClasses().put(DirectoryServer.getSchema().getObjectClass(ocName),ocName);      }    } else {      e.addAttribute(a,duplicateValues);    }  }  return processAdd(e,null);}  }
class C{  protected static Map convertJAXBToAttrMap(String attrName,Object jaxbObj) throws JAXBException {  String xmlString=convertJAXBToString(jaxbObj);  Map attrs=new HashMap();  Set values=new HashSet();  values.add(xmlString);  attrs.put(attrName,values);  return attrs;}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public void post(String uri) throws IOException {  post(uri,null,null);}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,this);}  }
class C{  public void message(String message,Throwable th){  if (messageEnabled()) {    record(message,th);  }}  }
class C{  static String makeSessionID(String encryptedID,SessionIDExtensions extensions,String tail) throws SessionException {  try {    StringBuilder buf=new StringBuilder();    buf.append(encryptedID);    if (extensions != null || tail != null) {      buf.append("@");    }    if (extensions != null) {      ByteArrayOutputStream baOut=new ByteArrayOutputStream();      DataOutputStream dataOut=new DataOutputStream(baOut);      for (      Map.Entry<String,String> entry : extensions.asMap().entrySet()) {        dataOut.writeUTF(entry.getKey());        dataOut.writeUTF(entry.getValue());      }      dataOut.close();      buf.append(Base64.encode(baOut.toByteArray()));      buf.append("#");    }    if (tail != null) {      buf.append(tail);    }    String returnValue=buf.toString();    if (c66EncodeCookie()) {      returnValue=c66EncodeSidString(returnValue);    }    return returnValue;  } catch (  Exception e) {    throw new SessionException(e);  }}  }
class C{  public boolean equals(Object authStatus){  if (authStatus instanceof Status) {    Status s=(Status)authStatus;    return (s.status.equalsIgnoreCase(status));  }  return (false);}  }
class C{  public void testFlipBitLeftmostPositive(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=1;  int number=48;  byte rBytes[]={0,-128,56,100,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public LinkException(String explanation){  super(explanation);  linkResolvedName=null;  linkResolvedObj=null;  linkRemainingName=null;  linkExplanation=null;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public static Date parseDate(String date){  return parseDate(date,JKFormatUtil.DEFAULT_DATE_PATTERN);}  }
class C{  private boolean acquireValidLock(){  if (shutdownCalled) {    return false;  } else {    rwlock.writeLock().lock();  }  return true;}  }
class C{  public LDIFReader(LDIFImportConfig importConfig) throws IOException {  ifNull(importConfig);  this.importConfig=importConfig;  reader=importConfig.getReader();  lastEntryBodyLines=new LinkedList<>();  lastEntryHeaderLines=new LinkedList<>();  pluginConfigManager=DirectoryServer.getPluginConfigManager();  if (importConfig.invokeImportPlugins()) {    pluginConfigManager.invokeLDIFImportBeginPlugins(importConfig);  }}  }
class C{  TraceSettings(DebugTargetCfg config){  this.level=Level.getLevel(config.isEnabled(),config.isDebugExceptionsOnly());  this.noArgs=config.isOmitMethodEntryArguments();  this.noRetVal=config.isOmitMethodReturnValue();  this.stackDepth=config.getThrowableStackFrames();  this.includeCause=config.isIncludeThrowableCause();  config.addChangeListener(this);}  }
class C{  public static boolean isBackground(Context context){  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> appProcesses=activityManager.getRunningAppProcesses();  for (  RunningAppProcessInfo appProcess : appProcesses) {    if (appProcess.processName.equals(context.getPackageName())) {      if (appProcess.importance != RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  public String toStringImpl(){  return str;}  }
class C{  public Element signXMLUsingKeyPass(Document doc,String certAlias,String encryptedKeyPass,String algorithm,String idAttrName,String id,boolean includeCert,String xpath) throws XMLSignatureException {  if (doc == null) {    SAMLUtilsCommon.debug.error("signXML: doc is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Element root=null;  XMLSignature sig=null;  try {    ElementProxy.setDefaultPrefix(Constants.SignatureSpecNS,SAMLConstants.PREFIX_DS);    PrivateKey privateKey;    if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {      privateKey=keystore.getPrivateKey(certAlias);    } else {      privateKey=keystore.getPrivateKey(certAlias,encryptedKeyPass);    }    if (privateKey == null) {      SAMLUtilsCommon.debug.error("private key is null");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullprivatekey"));    }    root=(Element)XPathAPI.selectSingleNode(doc,"//*[@" + idAttrName + "=\""+ id+ "\"]");    if (root == null) {      SAMLUtilsCommon.debug.error("signXML: could not" + " resolv id attribute");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidIDAttribute"));    }    if (!idAttrName.equals(DEF_ID_ATTRIBUTE)) {      root.setIdAttribute(idAttrName,true);    }    if (algorithm == null || algorithm.length() == 0) {      algorithm=getKeyAlgorithm(privateKey);      ;    }    if (!isValidAlgorithm(algorithm)) {      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("invalidalgorithm"));    }    sig=new XMLSignature(doc,"",algorithm,Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);    if (xpath == null) {      root.appendChild(sig.getElement());    } else {      Node beforeNode=XPathAPI.selectSingleNode(doc,xpath);      root.insertBefore(sig.getElement(),beforeNode);    }    sig.getSignedInfo().addResourceResolver(new OfflineResolver());    Transforms transforms=new Transforms(doc);    transforms.addTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE);    transforms.addTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS);    String ref="#" + id;    sig.addDocument(ref,transforms,digestAlg);    if (includeCert) {      X509Certificate cert=(X509Certificate)keystore.getX509Certificate(certAlias);      sig.addKeyInfo(cert);    }    sig.sign(privateKey);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return (sig.getElement());}  }
class C{  private PlaPointFloat calc_door_left_corner(ArtBacktrackElement p_to_info){  ExpandRoomComplete from_room=p_to_info.door.other_room_complete(p_to_info.next_room);  if (from_room == null)   return null;  PlaPointFloat pole=from_room.get_shape().centre_of_gravity();  ShapeTile curr_to_door_shape=p_to_info.door.get_shape();  int left_most_corner_no=curr_to_door_shape.index_of_left_most_corner(pole);  return curr_to_door_shape.corner_approx(left_most_corner_no);}  }
class C{  public boolean isGetAllReturnAttributesEnabled(){  return getAllAttributesEnabled;}  }
class C{  public CheckedInputStream(InputStream in,Checksum cksum){  super(in);  this.cksum=cksum;}  }
class C{  @Override public void backgroundProcess(){  if (!getState().isAvailable())   return;  Cluster cluster=getClusterInternal();  if (cluster != null) {    try {      cluster.backgroundProcess();    } catch (    Exception e) {      log.warn(sm.getString("containerBase.backgroundProcess.cluster",cluster),e);    }  }  Realm realm=getRealmInternal();  if (realm != null) {    try {      realm.backgroundProcess();    } catch (    Exception e) {      log.warn(sm.getString("containerBase.backgroundProcess.realm",realm),e);    }  }  Valve current=pipeline.getFirst();  while (current != null) {    try {      current.backgroundProcess();    } catch (    Exception e) {      log.warn(sm.getString("containerBase.backgroundProcess.valve",current),e);    }    current=current.getNext();  }  fireLifecycleEvent(Lifecycle.PERIODIC_EVENT,null);}  }
class C{  public LDAPException(int resultCode,LocalizableMessage message){  super(message);  this.resultCode=resultCode;  errorMessage=null;  matchedDN=null;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl();}  }
class C{  @Override public int hashCode(){  return getClass().hashCode() + Boolean.valueOf(needClientCertificate).hashCode() + sslSocketFactory.hashCode();}  }
class C{  public boolean beginToLogoutDisplay(ChildDisplayEvent event){  boolean display=false;  if (!validSession) {    HttpServletRequest req=getRequestContext().getRequest();    AMConsoleConfig config=AMConsoleConfig.getInstance();    setDisplayFieldValue(LOGOUT_URL,config.getLogoutURL(req));    display=true;  }  return display;}  }
class C{  public Boolean isMustUnderstand(){  return mustUnderstand;}  }
class C{  public static synchronized void showNotification(Context context,int notifyType,String title,String message){  if (message == null) {    Log.w("showNotification","No user message provided");    message=context.getString(R.string.action_default_message);  }  if (title == null) {    Log.i("showNotification","No title provided");    title=message;  }  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=sharedPreferences.edit();  int numOfNotifications;switch (notifyType) {case NOTIFICATION_ACTION:    numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_action_count),0);  if (++numOfNotifications == 1) {    editor.putString(context.getString(R.string.pref_key_notification_action_message),message);  }editor.putInt(context.getString(R.string.pref_key_notification_action_count),numOfNotifications);break;case NOTIFICATION_WARN:numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_warn_count),0);if (++numOfNotifications == 1) {editor.putString(context.getString(R.string.pref_key_notification_warn_message),message);}editor.putInt(context.getString(R.string.pref_key_notification_warn_count),numOfNotifications);break;case NOTIFICATION_RULE:numOfNotifications=sharedPreferences.getInt(context.getString(R.string.pref_key_notification_rule_count),0);if (++numOfNotifications == 1) {editor.putString(context.getString(R.string.pref_key_notification_rule_message),message);editor.putString(context.getString(R.string.pref_key_notification_rule_title),title);}editor.putInt(context.getString(R.string.pref_key_notification_rule_count),numOfNotifications);break;default :Log.w(TAG,new IllegalArgumentException());return;}editor.commit();notify(context,notifyType,numOfNotifications,title,message);}  }
class C{  private void copyACls(final List<AccessControlLevel> accessControlLevels2){  for (  AccessControlLevel acl : this.accessControlLevels) {    accessControlLevels2.add(new AccessControlLevel(acl));  }}  }
class C{  public void handleTblSubConfigButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  CCActionTable tbl=(CCActionTable)getChild(AMPropertySheetModel.TBL_SUB_CONFIG);  tbl.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)tbl.getModel();  Integer[] selected=tblModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    SMSubConfig sc=(SMSubConfig)list.get(selected[i].intValue());    names.add(sc.getName());  }  try {    SubSchemaModel model=(SubSchemaModel)getModel();    model.deleteSubConfigurations(names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","subconfig.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","subconfig.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  submitCycle=false;  forwardTo();}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public MemoryImageSource(int w,int h,int pix[],int off,int scan){  initialize(w,h,ColorModel.getRGBdefault(),(Object)pix,off,scan,null);}  }
class C{  public static char[] copyOf(char[] original,int newLength){  char[] copy=new char[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static RunStats delegateGetBucketForBoolean(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.BOOLEAN,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,null,ibg.generateBuckets(),null,null,null,null);  logger.debug("Test to getBucket for the bucket distribution on Boolean values");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  for (int i=0; i < 20000; i++) {    Boolean randomBoolean=RandomUtils.nextBoolean();    Long bucketId=locator.getBucket(randomBoolean,FieldDataType.BOOLEAN);    TestUtils.calculate(hm,stats,bucketId,randomBoolean);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForBoolean",FieldDataType.BOOLEAN,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public void writeLDIF(LDIFExportConfig exportConfig) throws DirectoryException {  try (LDIFEntryWriter writer=new LDIFEntryWriter(exportConfig.getWriter())){    writer.writeComment(INFO_CONFIG_FILE_HEADER.get().toString());    for (    Entry entry : new ArrayList<Entry>(backend.getAll())) {      try {        writer.writeEntry(entry);      } catch (      IOException e) {        logger.traceException(e);        LocalizableMessage message=ERR_CONFIG_FILE_WRITE_ERROR.get(entry.getName(),e);        throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);      }    }  } catch (  IOException e) {    logger.traceException(e);    LocalizableMessage message=ERR_CONFIG_LDIF_WRITE_ERROR.get(e);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }}  }
class C{  void clear(){  for (int i=1; i <= size; i++)   queue[i]=null;  size=0;}  }
class C{  public void testInsert2() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  DatabaseCreator.fillFKCascadeTable(conn);  try {    statement.execute("INSERT INTO " + DatabaseCreator.FKSTRICT_TABLE + " VALUES(4, 4, 'testInsert')");  } catch (  SQLException ex) {  }  try {    statement.execute("INSERT INTO " + DatabaseCreator.FKCASCADE_TABLE + " VALUES(4, 4, 'testInsert')");  } catch (  SQLException ex) {  }}  }
class C{  public AttributeSet copyAttributes(){  return (AttributeSet)clone();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemthatexists.class,args);}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int begOffs=Utilities.getWordStart(target,offs);      if (select) {        target.moveCaretPosition(begOffs);      } else {        target.setCaretPosition(begOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public AuthnSvcException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public Builder syntaxOID(final String syntax){  this.syntaxOID=syntax;  return this;}  }
class C{  public SocketSecurityException(String s){  super(s);}  }
class C{  private static String formatList(String[] stringList,String listPattern,String listCompositionPattern){  if (listPattern == null || listCompositionPattern == null) {    StringBuilder result=new StringBuilder();    for (int i=0; i < stringList.length; ++i) {      if (i > 0) {        result.append(',');      }      result.append(stringList[i]);    }    return result.toString();  }  if (stringList.length > 3) {    MessageFormat format=new MessageFormat(listCompositionPattern);    stringList=composeList(format,stringList);  }  Object[] args=new Object[stringList.length + 1];  System.arraycopy(stringList,0,args,1,stringList.length);  args[0]=new Integer(stringList.length);  MessageFormat format=new MessageFormat(listPattern);  return format.format(args);}  }
class C{  void addNewEntryForNullKey(V value){  entryForNullKey=new HashMapEntry<K,V>(null,value,0,null);}  }
class C{  public <T extends IElement>Div add(BlockElement<T> element){  childElements.add(element);  return this;}  }
class C{  public void save(File fileToSave) throws IOException {  File file=fileToSave.getAbsoluteFile();  logger.config("Saving  : " + file.getPath());  precheck(file);  RandomAccessFile rfile=null;  try {    if (TagOptionSingleton.getInstance().isId3v2Save()) {      if (id3v2tag == null) {        rfile=new RandomAccessFile(file,"rw");        (new ID3v24Tag()).delete(rfile);        (new ID3v23Tag()).delete(rfile);        (new ID3v22Tag()).delete(rfile);        logger.config("Deleting ID3v2 tag:" + file.getName());        rfile.close();      } else {        logger.config("Writing ID3v2 tag:" + file.getName());        final MP3AudioHeader mp3AudioHeader=(MP3AudioHeader)this.getAudioHeader();        final long mp3StartByte=mp3AudioHeader.getMp3StartByte();        final long newMp3StartByte=id3v2tag.write(file,mp3StartByte);        if (mp3StartByte != newMp3StartByte) {          logger.config("New mp3 start byte: " + newMp3StartByte);          mp3AudioHeader.setMp3StartByte(newMp3StartByte);        }      }    }    rfile=new RandomAccessFile(file,"rw");    if (TagOptionSingleton.getInstance().isLyrics3Save()) {      if (lyrics3tag != null) {        lyrics3tag.write(rfile);      }    }    if (TagOptionSingleton.getInstance().isId3v1Save()) {      logger.config("Processing ID3v1");      if (id3v1tag == null) {        logger.config("Deleting ID3v1");        (new ID3v1Tag()).delete(rfile);      } else {        logger.config("Saving ID3v1");        id3v1tag.write(rfile);      }    }  } catch (  FileNotFoundException ex) {    logger.log(Level.SEVERE,ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE_FILE_NOT_FOUND.getMsg(file.getName()),ex);    throw ex;  }catch (  IOException iex) {    logger.log(Level.SEVERE,ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE.getMsg(file.getName(),iex.getMessage()),iex);    throw iex;  }catch (  RuntimeException re) {    logger.log(Level.SEVERE,ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE.getMsg(file.getName(),re.getMessage()),re);    throw re;  } finally {    if (rfile != null) {      rfile.close();    }  }}  }
class C{  public void fireEvent(final String instanceId,String ref,String type,Map<String,Object> params){  if (WXEnvironment.isApkDebugable() && Looper.getMainLooper().getThread().getId() != Thread.currentThread().getId()) {    throw new WXRuntimeException("[WXSDKManager]  fireEvent error");  }  mBridgeManager.fireEvent(instanceId,ref,type,params);}  }
class C{  public boolean isLocked(){  return lockedDueToIdleInterval() || lockedDueToMaximumResetAge() || lockedDueToFailures();}  }
class C{  private void removeAllChildNodes(BasicNode parentNode,boolean keepSuffixes){  for (int i=parentNode.getChildCount() - 1; i >= 0; i--) {    BasicNode child=(BasicNode)parentNode.getChildAt(i);    if (child instanceof SuffixNode && keepSuffixes) {      removeAllChildNodes(child,true);      child.setRefreshNeededOnExpansion(true);    } else {      child.removeFromParent();    }  }  treeModel.nodeStructureChanged(parentNode);}  }
class C{  public void printMessage(String str){  System.out.print(str);}  }
class C{  public void endElement(String name) throws SAXException {}  }
class C{  public boolean isNoUserModification(){  return isNoUserModification;}  }
class C{  private String addXACMLAuthzQueryTemplate(String extended,String cot){  String buff="    <XACMLAuthzDecisionQueryConfig metaAlias=\"/pep\">\n" + "        <Attribute name=\"signingCertAlias\">\n" + "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"encryptionCertAlias\">\n"+ "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"basicAuthOn\">\n"+ "            <Value>" + false + "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"basicAuthUser\">\n"+ "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"basicAuthPassword\">\n"+ "            <Value>"+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"wantXACMLAuthzDecisionResponseSigned\">\n"+ "            <Value>"+ false+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"wantAssertionEncrypted\">\n"+ "            <Value>"+ false+ "</Value>\n"+ "        </Attribute>\n"+ "        <Attribute name=\"cotlist\">\n"+ "            <Value>"+ cot+ "</Value>\n"+ "        </Attribute>\n"+ "    </XACMLAuthzDecisionQueryConfig>\n";  int idx=extended.indexOf("</EntityConfig>");  if (idx != -1) {    extended=extended.substring(0,idx) + buff + "</EntityConfig>";  }  return extended;}  }
class C{  public boolean hasAgeStart(){  return fieldSetFlags()[0];}  }
class C{  public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("MessageProcessorThread-TLS-" + getIpAddress().getHostAddress() + '/'+ getPort());  thread.setPriority(sipStack.getThreadPriority());  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createSSLServerSocket(this.getPort(),0,this.getIpAddress());  if (sipStack.getClientAuth() == ClientAuthType.Want || sipStack.getClientAuth() == ClientAuthType.Default) {    ((SSLServerSocket)this.sock).setWantClientAuth(true);  } else {    ((SSLServerSocket)this.sock).setWantClientAuth(false);  }  if (sipStack.getClientAuth() == ClientAuthType.Enabled) {    ((SSLServerSocket)this.sock).setNeedClientAuth(true);  } else {    ((SSLServerSocket)this.sock).setNeedClientAuth(false);  }  ((SSLServerSocket)this.sock).setUseClientMode(false);  String[] enabledCiphers=((SipStackImpl)sipStack).getEnabledCipherSuites();  ((SSLServerSocket)sock).setEnabledProtocols(((SipStackImpl)sipStack).getEnabledProtocols());  ((SSLServerSocket)this.sock).setEnabledCipherSuites(enabledCiphers);  if (sipStack.getClientAuth() == ClientAuthType.Want || sipStack.getClientAuth() == ClientAuthType.Default) {    ((SSLServerSocket)this.sock).setWantClientAuth(true);  } else {    ((SSLServerSocket)this.sock).setWantClientAuth(false);  }  if (logger.isLoggingEnabled(StackLogger.TRACE_DEBUG)) {    logger.logDebug("SSLServerSocket want client auth " + ((SSLServerSocket)this.sock).getWantClientAuth());    logger.logDebug("SSLServerSocket need client auth " + ((SSLServerSocket)this.sock).getNeedClientAuth());  }  this.isRunning=true;  thread.start();}  }
class C{  public void endDTD() throws SAXException {  m_insideDTD=false;}  }
class C{  public boolean isBool(STypeDef requiredType,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof BoolTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Boolean",lineCol)));}  }
class C{  public AMOrganization createTopOrganization(String orgName,Map avPairs) throws AMException, SSOException {  StringBuilder orgDNSB=new StringBuilder();  orgDNSB.append(AMNamingAttrManager.getNamingAttr(AMObject.ORGANIZATION)).append("=").append(orgName).append(",").append(rootSuffix);  AMOrganizationImpl orgImpl=new AMOrganizationImpl(this.token,orgDNSB.toString());  orgImpl.setAttributes(avPairs);  orgImpl.create();  return orgImpl;}  }
class C{  public ExpressionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ "]";}  }
class C{  public AppLauncher appLauncherCallback(AppLauncherCallback callback){  this.appLauncherCallback=callback;  return this;}  }
class C{  public EasyLocationMod(Context context){  hasFineLocationPermission=PermissionUtil.hasPermission(context,Manifest.permission.ACCESS_FINE_LOCATION);  hasCoarseLocationPermission=PermissionUtil.hasPermission(context,Manifest.permission.ACCESS_COARSE_LOCATION);  if (hasCoarseLocationPermission || hasFineLocationPermission) {    lm=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  }}  }
class C{  public JCheckBox(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  public static void main(final String[] args){  final int retCode=new AuthRate().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public void testReceiveRequest(){  try {    Request invite=createRiInviteRequest(null,null,null);    RequestEvent receivedRequestEvent=null;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      assertNotNull("The sent request was not received at the other end!",receivedRequestEvent);      assertNotNull("The sent request was not received at the other end!",receivedRequestEvent.getRequest());    } catch (    TooManyListenersException ex) {      ex.printStackTrace();      fail("A TooManyListenersException was thrown while trying to add " + "a SipListener to a TI SipProvider.");    }catch (    SipException ex) {      throw new TckInternalError("The RI failed to send the request!",ex);    }    assertNull("The Tested Implementation has implicitly created a ServerTransaction " + "for the received request. Transactions should only be created " + "explicitly using the SipProvider.getNewXxxTransaction() method.",receivedRequestEvent.getServerTransaction());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMessageFromOperator);}  }
class C{  public NameFileFilter(String name,IOCase caseSensitivity){  if (name == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.names=new String[]{name};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.lang.String certAlias,int kekStrength) throws EncryptionException {  return ep.encryptAndReplace(doc,element,secretKeyAlg,keySize,certAlias,kekStrength);}  }
class C{  public void testPosZero(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public AMGroup createAssignableDynamicGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.ASSIGNABLE_DYNAMIC_GROUP);}  }
class C{  public void testNormalize() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Node firstChild;  NodeList textList;  CharacterData textNode;  String data;  doc=(Document)load("staff",builder);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  firstChild=elementList.item(2);  textList=firstChild.getChildNodes();  textNode=(CharacterData)textList.item(0);  data=textNode.getData();  assertEquals("data","Roger\n Jones",data);}  }
class C{  static <T>T find(Class<T> type,String fallbackClassName) throws TransformerFactoryConfigurationError {  assert type != null;  final String factoryId=type.getName();  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(type,systemProp,null,true,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    final String factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(type,factoryClassName,null,true,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  T provider=findServiceProvider(type);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new TransformerFactoryConfigurationError(null,"Provider for " + factoryId + " cannot be found");  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(type,fallbackClassName,null,true,true);}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  private InterfaceDef parse_interface() throws SyntaxException {  LineCol lineCol=current.getLineCol();  Set<Modifier> set=new HashSet<>(modifiers);  modifiers.clear();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  nextNode(false);  if (current instanceof Element) {    String name=((Element)current).getContent();    List<AST.Access> accesses;    if (current.getTokenType() == TokenType.VALID_NAME) {      nextNode(true);      accesses=new ArrayList<>();      if (current instanceof Element) {        expecting(":",current.previous(),current,err);        nextNode(false);        while (true) {          if (current.getTokenType() == TokenType.VALID_NAME) {            Expression e=get_exp(true);            if (e instanceof AST.Access) {              accesses.add((AST.Access)e);            } else {              err.UnexpectedTokenException("super interface",e.toString(),e.line_col());              err.debug("ignore this super interface");            }            if (current instanceof EndingNode && ((EndingNode)current).getType() == EndingNode.STRONG) {              nextNode(true);            } else {              break;            }          } else {            break;          }        }      }    } else {      err.UnexpectedTokenException("valid interface name",name,current.getLineCol());      err.debug("ignore the interface");      throw new ParseFail();    }    List<Statement> statements=null;    if (current instanceof ElementStartNode) {      statements=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);      nextNode(true);    }    InterfaceDef interfaceDef=new InterfaceDef(name,set,accesses,annos,statements == null ? Collections.emptyList() : statements,lineCol);    annos.clear();    return interfaceDef;  } else {    err.UnexpectedTokenException("interface name",current.toString(),current.getLineCol());    err.debug("ignore this interface declaration");    return null;  }}  }
class C{  public boolean exists(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkRead(path);  }  if (isInvalid()) {    return false;  }  return ((fs.getBooleanAttributes(this) & FileSystem.BA_EXISTS) != 0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  Node cdataNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  cdataNode=cdataName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (!equals(4,nodeType)) {    cdataNode=doc.createCDATASection("");  }  attrList=cdataNode.getAttributes();  assertNull("cdataSection",attrList);}  }
class C{  public static Border makeTitledBorder(LocalizableMessage msg){  TitledBorder border=new TitledBorder(new EtchedBorder()," " + msg + " ");  border.setTitleFont(ColorAndFontConstants.titleFont);  border.setTitleColor(ColorAndFontConstants.foreground);  return border;}  }
class C{  private void sendSubscribeMessage(){  currWSstateLock.lock();  currWSstate=WSstate.WS_SUBSCRIBED;  currWSstateLock.unlock();  String instrumentString=getInstrumentString(instrumentList);  String msg="{\"a\": \"subscribe\", \"v\": [" + instrumentString + "]}";  System.out.println("WebsocketThread.sendSubscribeMessage(): WS Subscribe msg: " + msg);  clientEndPoint.sendMessage(msg);}  }
class C{  @Override public boolean validate(Set<String> values){  boolean valid=true;  if (!CollectionUtils.isEmpty(values)) {    for (    String val : values) {      final String trimmed=val.trim();      if (trimmed.length() > 0) {        Matcher matcher=pattern.matcher(trimmed);        valid=matcher.matches();      }    }  }  return valid;}  }
class C{  public Tree(TreeSpecies species,BlockFace dir){  this(DEFAULT_TYPE,species,dir);}  }
class C{  public static int readSwappedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);}  }
class C{  private static void addAttributeLevelRights(AciLDAPOperationContainer container,AciHandler handler,int mask,final Entry retEntry,List<AttributeType> attrList,boolean skipCheck,boolean specificAttr){  if (attrList == null) {    return;  }  for (  AttributeType a : attrList) {    StringBuilder evalInfo=new StringBuilder();    container.setCurrentAttributeType(a);    container.setCurrentAttributeValue(null);    container.setRights(ACI_SEARCH | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"search"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"search");    evalInfo.append(',');    container.setRights(ACI_READ | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"read"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"read");    evalInfo.append(',');    container.setRights(ACI_COMPARE | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"compare"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"compare");    evalInfo.append(',');    ByteString val=ByteString.valueOfUtf8("dum###Val");    container.setCurrentAttributeValue(val);    evalInfo.append(attributeLevelWriteRights(container,handler,skipCheck));    addAttrLevelRightsInfo(container,mask,a,retEntry,"write");    evalInfo.append(',');    ByteString val1=ByteString.valueOfUtf8(container.getClientDN().toString());    if (!specificAttr) {      container.setCurrentAttributeType(dnAttributeType);    }    container.setCurrentAttributeValue(val1);    container.setRights(ACI_WRITE_ADD | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"selfwrite_add"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"selfwrite_add");    evalInfo.append(',');    container.setRights(ACI_WRITE_DELETE | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"selfwrite_delete"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"selfwrite_delete");    evalInfo.append(',');    container.setCurrentAttributeType(a);    container.setCurrentAttributeValue(null);    container.setRights(ACI_PROXY | ACI_SKIP_PROXY_CHECK);    evalInfo.append(rightsString(container,handler,skipCheck,"proxy"));    addAttrLevelRightsInfo(container,mask,a,retEntry,"proxy");    if (hasAttrMask(mask,ACL_RIGHTS)) {      String typeStr=aclRightsAttributeLevelStr + ";" + a.getNameOrOID();      AttributeType attributeType=DirectoryServer.getSchema().getAttributeType(typeStr);      Attribute attr=Attributes.create(attributeType,evalInfo.toString());      if (!retEntry.hasAttribute(attributeType)) {        retEntry.addAttribute(attr,null);      }    }  }  container.setCurrentAttributeValue(null);  container.setCurrentAttributeType(null);}  }
class C{  private void prune_clearance_matrix(){  final RoutingBoard routing_board=board_frame.board_panel.itera_board.get_routing_board();  ClearanceMatrix clearance_matrix=routing_board.brd_rules.clearance_matrix;  for (int i=clearance_matrix.get_class_count() - 1; i >= 2; --i) {    for (int j=clearance_matrix.get_class_count() - 1; j >= 0; --j) {      if (i == j) {        continue;      }      if (clearance_matrix.is_equal(i,j)) {        String message=resources.getString("confirm_remove") + " " + clearance_matrix.get_name(i);        int selected_option=JOptionPane.showConfirmDialog(getJFrame(),message,null,JOptionPane.YES_NO_OPTION);        if (selected_option == JOptionPane.YES_OPTION) {          java.util.Collection<board.items.BrdItem> board_items=routing_board.get_items();          routing_board.brd_rules.change_clearance_class_no(i,j,board_items);          if (!routing_board.brd_rules.remove_clearance_class(i,board_items)) {            System.out.println("WindowClearanceMatrix.prune_clearance_matrix error removing clearance class");            return;          }          routing_board.search_tree_manager.clearance_class_removed(i);          adjust_clearance_table();        }        break;      }    }  }}  }
class C{  private static void update_board_rules(DsnReadScopeParameters p_par,DsnBoardConstruction p_board_construction_info,BoardRules p_board_rules){  boolean smd_to_turn_gap_found=false;  Iterator<DsnRule> it=p_board_construction_info.default_rules.iterator();  while (it.hasNext()) {    DsnRule curr_ob=it.next();    if (curr_ob instanceof DsnRuleClearance) {      DsnRuleClearance curr_rule=(DsnRuleClearance)curr_ob;      if (set_clearance_rule(curr_rule,-1,p_par.coordinate_transform,p_board_rules,p_par.string_quote)) {        smd_to_turn_gap_found=true;      }    }  }  it=p_board_construction_info.default_rules.iterator();  while (it.hasNext()) {    Object curr_ob=it.next();    if (curr_ob instanceof DsnRuleWidth) {      double wire_width=((DsnRuleWidth)curr_ob).value;      int trace_halfwidth=(int)Math.round(p_par.coordinate_transform.dsn_to_board(wire_width) / 2);      p_board_rules.set_default_trace_half_widths(trace_halfwidth);    }  }  Iterator<DsnLayerRule> it3=p_board_construction_info.layer_dependent_rules.iterator();  while (it3.hasNext()) {    DsnLayerRule layer_rule=it3.next();    int layer_no=p_par.layer_structure.get_no(layer_rule.layer_name);    if (layer_no < 0) {      continue;    }    Iterator<DsnRule> it2=layer_rule.rule.iterator();    while (it2.hasNext()) {      DsnRule curr_ob=it2.next();      if (curr_ob instanceof DsnRuleWidth) {        double wire_width=((DsnRuleWidth)curr_ob).value;        int trace_halfwidth=(int)Math.round(p_par.coordinate_transform.dsn_to_board(wire_width) / 2);        p_board_rules.set_default_trace_half_width(layer_no,trace_halfwidth);      } else       if (curr_ob instanceof DsnRuleClearance) {        DsnRuleClearance curr_rule=(DsnRuleClearance)curr_ob;        set_clearance_rule(curr_rule,layer_no,p_par.coordinate_transform,p_board_rules,p_par.string_quote);      }    }  }  if (!smd_to_turn_gap_found) {    p_board_rules.set_pin_edge_to_turn_dist(p_board_rules.get_min_trace_half_width());  }}  }
class C{  public Value parseValueFromRegex(RegexLiteral exp) throws SyntaxException {  SMethodDef compile=getPattern_compile();  Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(compile,exp.line_col());  String regexStr=CompileUtil.getRegexStr(exp.literal());  Pattern p;  try {    p=Pattern.compile(regexStr);  } catch (  PatternSyntaxException e) {    err.SyntaxException("Invalid regular expression " + regexStr + " : "+ e.getMessage(),exp.line_col());    return null;  }  StringConstantValue theRegex=new StringConstantValue(p.pattern());  theRegex.setType((SClassDef)getTypeWithName("java.lang.String",LineCol.SYNTHETIC));  invokeStatic.arguments().add(theRegex);  return invokeStatic;}  }
class C{  private static String makeQualifiedMethodName(String name,String[] params){  StringBuffer sb=new StringBuffer(name);  sb.append('=');  for (int i=0; i < params.length; i++) {    sb.append(':');    sb.append(params[i]);  }  return sb.toString();}  }
class C{  public synchronized void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) - b.length > 0)) {    throw new IndexOutOfBoundsException();  }  ensureCapacity(count + len);  System.arraycopy(b,off,buf,count,len);  count+=len;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  UIManager.getLookAndFeel().provideErrorFeedback(target);}  }
class C{  public static Entry modifyEntry(final Entry entry,final Modification change,final Collection<? super ByteString> conflictingValues) throws LdapException {  return modifyEntry0(entry,change,conflictingValues,true);}  }
class C{  public static boolean isErrorLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isErrorLoggable(level);  }}  }
class C{  public void assignRole(AMRole role) throws AMException, SSOException {  assignRole(role.getDN());}  }
class C{  public Mp4TagReverseDnsField(Mp4FieldKey id,String content){  super(id.getFieldName());  this.issuer=id.getIssuer();  this.descriptor=id.getIdentifier();  this.content=content;}  }
class C{  @Override public void attributeRemoved(HttpSessionBindingEvent event){  log("attributeRemoved('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  public void stop(){  stopStreamingQuote();}  }
class C{  public void componentResized(ComponentEvent e){  ((ComponentListener)a).componentResized(e);  ((ComponentListener)b).componentResized(e);}  }
class C{  public static CompareRequest copyOfCompareRequest(final CompareRequest request){  return new CompareRequestImpl(request);}  }
class C{  @Deactivate public void deactivate(ComponentContext context){  logger.debug("OpenIDM MessagingService deactivating.");  for (  MessageSubscriber<?> subscriber : subscribers) {    try {      subscriber.unsubscribe();      logger.debug("MessageSubscriber {} has unsubscribed.",subscriber.getName());    } catch (    Exception e) {      logger.warn("Failure to unsubscribe MessageSubscriber {}.",subscriber.getName(),subscriber,e);    }  }  subscribers.clear();  config=null;}  }
class C{  public boolean warningEnabled(){  return this.debugLevel.compareLevel(DebugLevel.WARNING) >= 0;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public void paint(Graphics g,Shape allocation){  Container host=getContainer();  if (host != null && visible != ((JTextComponent)host).isEditable()) {    visible=((JTextComponent)host).isEditable();  }  if (!isVisible()) {    return;  }  super.paint(g,allocation);}  }
class C{  public SendRequestException(String msg){  super(msg);  fillInStackTrace();}  }
class C{  public void updateUI(){  setUI((DesktopPaneUI)UIManager.getUI(this));}  }
class C{  private synchronized void seekToCurrentValue() throws IOException {  valBuffer.reset();}  }
class C{  public CCUnOrderedList(ContainerView parent,CCEditableListModelInterface model,String name){  super(parent,model,name);}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(200);  xml.append("<NamingResponse vers=").append(QUOTE).append(responseVersion).append(QUOTE).append(" reqid=").append(QUOTE).append(requestID).append(QUOTE).append('>').append(NL);  xml.append("<GetNamingProfile>").append(NL);  if (exception != null) {    xml.append("<Exception>").append(exception).append("</Exception>").append(NL);  } else {    Enumeration e=namingTable.keys();    while (e.hasMoreElements()) {      String name=(String)e.nextElement();      String value=(String)namingTable.get(name);      xml.append("<Attribute name=").append(QUOTE).append(name).append(QUOTE).append(" value=").append(QUOTE).append(value).append(QUOTE).append('>').append("</Attribute>").append(NL);    }  }  xml.append("</GetNamingProfile>").append(NL);  xml.append("</NamingResponse>");  return xml.toString();}  }
class C{  private LDAPProfile(){}  }
class C{  public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public final int ordinal(){  return ordinal;}  }
class C{  protected void notifyRowSetChanged() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.rowSetChanged(event);    }  }}  }
class C{  private AppConfigurationEntry[] newConfiguration(String name,AMAuthenticationManager amAM){  if (debug.messageEnabled()) {    debug.message("newConfig, name = " + name);  }  AMAuthConfigType type=new AMAuthConfigType(name);  AppConfigurationEntry[] entries=null;  try {switch (type.getIndexType()) {case AMAuthConfigType.USER:      entries=getUserBasedConfig(type.getOrganization(),type.getIndexName(),name,amAM);    break;case AMAuthConfigType.ORGANIZATION:  entries=getOrgBasedConfig(type.getOrganization(),name,false,amAM);break;case AMAuthConfigType.ROLE:entries=getRoleBasedConfig(type.getOrganization(),type.getIndexName(),name,amAM);break;case AMAuthConfigType.SERVICE:if (type.getIndexName().equals(ISAuthConstants.CONSOLE_SERVICE)) {entries=getOrgBasedConfig(type.getOrganization(),name,true,amAM);} else {entries=getServiceBasedConfig(type.getOrganization(),type.getIndexName(),name,amAM);}break;case AMAuthConfigType.MODULE:entries=getModuleBasedConfig(type.getOrganization(),type.getIndexName(),name,amAM);break;default :if (debug.messageEnabled()) {debug.message("Unable to find config " + name + " in OpenSSO config");}debug.message("Getting default configuration.");if (defConfig != null) {entries=defConfig.getAppConfigurationEntry(name);}if (entries == null) {debug.message("Getting configuration from confFile.");entries=ConfigFileHolder.INSTANCE.configFile.getAppConfigurationEntry(name);}if (entries == null) {debug.error("newConfiguration, invalid config " + name);}return entries;}} catch (Exception e) {debug.error("newConfiguration.switch",e);}if (entries == null) {if (debug.messageEnabled()) {debug.message("newConfig, config not defined " + name);}return null;}synchronized (jaasConfig) {jaasConfig.put(name,entries);}return cloneConfigurationEntry(entries,type.getOrganization(),amAM);}  }
class C{  private boolean configExists(){  File configDir=Installation.getLocal().getConfigurationDirectory();  File[] children=configDir.listFiles();  return children != null && children.length > 0;}  }
class C{  protected Size2DSyntax(float x,float y,int units){  if (x < 0.0f) {    throw new IllegalArgumentException("x < 0");  }  if (y < 0.0f) {    throw new IllegalArgumentException("y < 0");  }  if (units < 1) {    throw new IllegalArgumentException("units < 1");  }  this.x=(int)(x * units + 0.5f);  this.y=(int)(y * units + 0.5f);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.ResponseType createResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.ResponseTypeImpl();}  }
class C{  public ArrayList<ShapeTile> offset_shapes(int p_half_width){  return offset_shapes(p_half_width,0,plaline_len(-1));}  }
class C{  public static TokenRestriction unmarshal(String data) throws Exception {  return IOUtils.deserialise(Base64.decode(data),false);}  }
class C{  public static int calcChecksum(long num,int digits){  boolean doubleDigit=true;  int total=0;  while (0 < digits--) {    int digit=(int)(num % 10);    num/=10;    if (doubleDigit) {      digit=doubleDigits[digit];    }    total+=digit;    doubleDigit=!doubleDigit;  }  int result=total % 10;  if (result > 0) {    result=10 - result;  }  return result;}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  public final DetectorResult detect(Map<DecodeHintType,?> hints) throws NotFoundException, FormatException {  resultPointCallback=hints == null ? null : (ResultPointCallback)hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);  FinderPatternFinder finder=new FinderPatternFinder(image,resultPointCallback);  FinderPatternInfo info=finder.find(hints);  return processFinderPatternInfo(info);}  }
class C{  boolean isForceUpgradeMode(){  return isForceUpgradeMode;}  }
class C{  public DSMLSearchOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public void combine_traces(int p_net_no){  for (int counter=0; counter < 3; counter++) {    boolean something_changed=false;    Iterator<UndoObjectNode> iter=undo_items.start_read_object();    for (; ; ) {      BrdItem curr_item=(BrdItem)undo_items.read_next(iter);      if (curr_item == null)       break;      if (!(curr_item instanceof BrdTracep))       continue;      BrdTracep a_trace=(BrdTracep)curr_item;      if (!a_trace.contains_net_wildcard(p_net_no))       continue;      if (!a_trace.is_on_the_board())       continue;      something_changed|=a_trace.combine(20);    }    if (!something_changed)     break;  }}  }
class C{  public boolean is_hidden(){  return hidden;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public static long numStripFIFO(String zid){  return Long.parseLong(zid.substring(zid.indexOf('|') + 1));}  }
class C{  public SubMenuCallback(ConsoleApplication app,RelationDefinition<?,?> rd,CreateSubCommandHandler<?,?> ch,DeleteSubCommandHandler dh,ListSubCommandHandler lh,SetPropSubCommandHandler sh){  LocalizableMessage userFriendlyName=rd.getUserFriendlyName();  LocalizableMessage userFriendlyPluralName=null;  if (rd instanceof InstantiableRelationDefinition<?,?>) {    InstantiableRelationDefinition<?,?> ir=(InstantiableRelationDefinition<?,?>)rd;    userFriendlyPluralName=ir.getUserFriendlyPluralName();  } else   if (rd instanceof SetRelationDefinition<?,?>) {    SetRelationDefinition<?,?> sr=(SetRelationDefinition<?,?>)rd;    userFriendlyPluralName=sr.getUserFriendlyPluralName();  }  final MenuBuilder<Integer> builder=new MenuBuilder<>(app);  builder.setTitle(INFO_DSCFG_HEADING_COMPONENT_MENU_TITLE.get(userFriendlyName));  builder.setPrompt(INFO_DSCFG_HEADING_COMPONENT_MENU_PROMPT.get());  if (lh != null) {    final SubCommandHandlerMenuCallback callback=new SubCommandHandlerMenuCallback(lh);    final LocalizableMessage msg=getMsg(INFO_DSCFG_OPTION_COMPONENT_MENU_LIST_SINGULAR,userFriendlyName,INFO_DSCFG_OPTION_COMPONENT_MENU_LIST_PLURAL,userFriendlyPluralName);    builder.addNumberedOption(msg,callback);  }  if (ch != null) {    final SubCommandHandlerMenuCallback callback=new SubCommandHandlerMenuCallback(ch);    builder.addNumberedOption(INFO_DSCFG_OPTION_COMPONENT_MENU_CREATE.get(userFriendlyName),callback);  }  if (sh != null) {    final SubCommandHandlerMenuCallback callback=new SubCommandHandlerMenuCallback(sh);    final LocalizableMessage msg=getMsg(INFO_DSCFG_OPTION_COMPONENT_MENU_MODIFY_SINGULAR,userFriendlyName,INFO_DSCFG_OPTION_COMPONENT_MENU_MODIFY_PLURAL,userFriendlyPluralName);    builder.addNumberedOption(msg,callback);  }  if (dh != null) {    final SubCommandHandlerMenuCallback callback=new SubCommandHandlerMenuCallback(dh);    builder.addNumberedOption(INFO_DSCFG_OPTION_COMPONENT_MENU_DELETE.get(userFriendlyName),callback);  }  builder.addBackOption(true);  builder.addQuitOption();  this.menu=builder.toMenu();}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public AccessChallenge(){  super(PacketType.ACCESS_CHALLENGE);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("AttrSet: ");  int size=_attrs.size();  for (int i=0; i < size; i++) {    sb.append(_attrs.get(i).toString()).append("\n");  }  return sb.toString();}  }
class C{  @Override public Collection<T> visitDefined(DefinedDefaultBehaviorProvider<T> provider,Void p){  SortedSet<T> values=new TreeSet<>();  for (  String stringValue : provider.getDefaultValues()) {    values.add(propertyDef.decodeValue(stringValue));  }  return values;}  }
class C{  void processPolicyNotification(PolicyNotification pn){  try {    resourceResultCache.processPolicyNotification(pn);  } catch (  Exception e) {    debug.error("PolicyNotificationHandler.processPolicyNotification():" + "Error while handling policy notification",e);  }}  }
class C{  protected String jmxQuery(MBeanServerConnection jmxServerConnection,String qry){  String isError=null;  Set<ObjectName> names=null;  String resultproperty=getResultproperty();  try {    names=jmxServerConnection.queryNames(new ObjectName(qry),null);    if (resultproperty != null) {      setProperty(resultproperty + ".Length",Integer.toString(names.size()));    }  } catch (  Exception e) {    if (isEcho())     handleErrorOutput(e.getMessage());    return "Can't query mbeans " + qry;  }  if (resultproperty != null) {    Iterator<ObjectName> it=names.iterator();    int oindex=0;    String pname=null;    while (it.hasNext()) {      ObjectName oname=it.next();      pname=resultproperty + "." + Integer.toString(oindex)+ ".";      oindex++;      setProperty(pname + "Name",oname.toString());      if (isAttributebinding()) {        bindAttributes(jmxServerConnection,pname,oname);      }    }  }  return isError;}  }
class C{  public static double distanceToRadians(double distance,String units) throws TurfException {  Double factor=factors.get(units);  if (factor == null) {    throw new TurfException("Invalid unit.");  }  return distance / factor;}  }
class C{  @Override public final void normalize(){  Node next;  for (Node node=getFirstChild(); node != null; node=next) {    next=node.getNextSibling();    node.normalize();    if (node.getNodeType() == Node.TEXT_NODE) {      ((TextImpl)node).minimize();    }  }}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  if (decodedKeyList != null) {    writeValueFromString(writer);  } else {    writeValueFromSortOrder(writer);  }}  }
class C{  public final void update(byte[] data) throws SignatureException {  update(data,0,data.length);}  }
class C{  protected void sourceInUse(IRandomAccessSource source) throws java.io.IOException {}  }
class C{  public XString(String val){  super(val);}  }
class C{  public Kue process(String type,int n,Handler<Job> handler){  if (n <= 0) {    throw new IllegalStateException("The process times must be positive");  }  while (n-- > 0) {    processInternal(type,handler,false);  }  setupTimers();  return this;}  }
class C{  private void broadcastTimerTick(){  for (  Player p : players) {    StringBuilder sb=new StringBuilder();    List<DrawMessage> drawMessages=p.getBufferedDrawMessages();    if (drawMessages.size() > 0) {      for (int i=0; i < drawMessages.size(); i++) {        DrawMessage msg=drawMessages.get(i);        String s=String.valueOf(p.getLastReceivedMessageId()) + "," + msg.toString();        if (i > 0)         sb.append("|");        sb.append(s);      }      drawMessages.clear();      p.sendRoomMessage(MessageType.DRAW_MESSAGE,sb.toString());    }  }}  }
class C{  public Axial(PdfColorSpace cs,float x0,float y0,float[] color0,float x1,float y1,float[] color1){  super(new PdfDictionary(),ShadingType.AXIAL,cs);  setCoords(x0,y0,x1,y1);  PdfFunction func=new PdfFunction.Type2(new PdfArray(new float[]{0,1}),null,new PdfArray(color0),new PdfArray(color1),new PdfNumber(1));  setFunction(func);}  }
class C{  public ElemTemplateElement(){}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public boolean isXfaPresent(){  return xfaPresent;}  }
class C{  public void addedProvider(Object originId,MetaDataProvider provider){  for (  DelayedConfig config : delayedConfigs) {    if (configCrypto != null) {      List<JsonPointer> props=null;      try {        props=config.configCrypto.getPropertiesToEncrypt(config.pidOrFactory,config.factoryAlias,config.parsedConfig);        try {          config.configInstaller.setConfig(config.newConfig,new String[]{config.pidOrFactory,config.factoryAlias},config.file);        } catch (        Exception ex) {          logger.warn("Setting delayed configuration failed for {} {}",config.pidOrFactory,config.factoryAlias,ex);        }      } catch (      WaitForMetaData ex) {        logger.trace("Still no meta data provider for {}-{}",config.pidOrFactory,config.factoryAlias);      }    } else {      logger.warn("Provider change received before DelayedConfigHandler properly initialized");    }  }}  }
class C{  public static float[] copyOf(float[] original,int newLength){  float[] copy=new float[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public BAD_QOS(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public StreamReaderDelegate(XMLStreamReader reader){  this.reader=reader;}  }
class C{  public PChargingFunctionAddressesHeader createPChargingFunctionAddressesHeader(){  PChargingFunctionAddresses cfa=new PChargingFunctionAddresses();  return cfa;}  }
class C{  public FileWriter(FileDescriptor fd){  super(new FileOutputStream(fd));}  }
class C{  public SmAuthStatus init(String parameter,String secret){  try {    logw=new PrintStream(new FileOutputStream("/tmp/FMAuth"));    logw.println("RYA:init");  } catch (  Exception ex) {  }  return SmAuthStatus.SMAUTH_SUCCESS;}  }
class C{  public boolean isMenuDrivenMode(){  return false;}  }
class C{  @Override public void close(){  manager.checkAccess();  target.close();  setLevel(Level.OFF);}  }
class C{  public static void registerEditorKitForContentType(String type,String classname){  registerEditorKitForContentType(type,classname,Thread.currentThread().getContextClassLoader());}  }
class C{  String toXMLFragment(int beginTokenIndex,int endTokenIndex){  StringBuffer buff=new StringBuffer();  ArrayList rawTokens=this.getRawTokens();  Iterator it=rawTokens.iterator();  int index=0;  boolean inRange=false;  while (it.hasNext()) {    Token nextToken=(Token)it.next();    if (!inRange) {      if (nextToken.getTokenIndex() == beginTokenIndex) {        inRange=true;      }    }    if (inRange) {      buff.append(nextToken.toString());      if (nextToken.getTokenIndex() == endTokenIndex) {        inRange=false;      }    }  }  return buff.toString();}  }
class C{  public PdfCollectionSort(String[] keys){  this(new PdfDictionary());  getPdfObject().put(PdfName.S,new PdfArray(Arrays.asList(keys),true));}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  AMServiceProfileModel model=(AMServiceProfileModel)getModel();  if (model != null) {    try {      Map values=getValues();      onBeforeSaveProfile(values);      model.setAttributeValues(values);      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }  }  forwardTo();}  }
class C{  public synchronized E peek(){  int len=size();  if (len == 0)   throw new EmptyStackException();  return elementAt(len - 1);}  }
class C{  public void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public AMX509TrustManager(){}  }
class C{  public EntitlementException(int errorCode){  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node docNode;  Document ownerDocument;  Element docElement;  String elementName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  docNode=elementList.item(1);  ownerDocument=docNode.getOwnerDocument();  docElement=ownerDocument.getDocumentElement();  elementName=docElement.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEqualsAutoCase("element","ownerDocElemTagName","html",elementName);  }}  }
class C{  public static boolean syncReplicatedServers(Set currServerSet,String port,String passwd){  Debug debug=Debug.getInstance(SetupConstants.DEBUG_NAME);  debug.message("EmbeddedOPenDS:syncReplication:start processing.");  String[] args={"-p",port,"-h","localhost","-D","cn=directory manager","-w",passwd,"list-replication-server","--provider-name","Multimaster Synchronization","--property","replication-server","--property","replication-port","--no-prompt","--trustAll","--noPropertiesFile"};  if (debug.messageEnabled()) {    String dbgcmd=concat(args).replaceAll(passwd,"****");    debug.message("EmbeddedOpenDS:syncReplication:exec dsconfig:" + dbgcmd);  }  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ByteArrayOutputStream boe=new ByteArrayOutputStream();  DSConfig.main(args,bos,boe);  String str=bos.toString();  String stre=boe.toString();  final boolean hasReplicationServers=!stre.contains("Unable to continue since there are no Replication " + "Server currently");  if (!stre.isEmpty() && hasReplicationServers) {    debug.error("EmbeddedOpenDS:syncReplication: stderr is not empty:" + stre);    return false;  } else {    if (debug.messageEnabled()) {      debug.message("EmbeddedOpenDS:syncReplication: stderr is not empty:" + stre);    }  }  BufferedReader brd=new BufferedReader(new StringReader(str));  String line=null;  try {    line=brd.readLine();    line=brd.readLine();    line=brd.readLine();  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS:syncReplication:Failed:",ex);  }  if (line == null) {    if (hasReplicationServers) {      debug.error("EmbeddedOpenDS:syncReplication:cmd failed" + str);    }    return false;  }  try {    int lastcolon=line.lastIndexOf(':');    int stcolon=line.indexOf(':');    String replservers=line.substring(stcolon + 1,lastcolon);    StringTokenizer stok=new StringTokenizer(replservers,",");    List cmdlist=new ArrayList();    cmdlist.add("-p");    cmdlist.add(port);    cmdlist.add("-h");    cmdlist.add("localhost");    cmdlist.add("-D");    cmdlist.add("cn=directory manager");    cmdlist.add("-w");    cmdlist.add(passwd);    cmdlist.add("--no-prompt");    cmdlist.add("--trustAll");    cmdlist.add("set-replication-server-prop");    cmdlist.add("--provider-name");    cmdlist.add("Multimaster Synchronization");    cmdlist.add("--noPropertiesFile");    int numremoved=0;    while (stok.hasMoreTokens()) {      String tok=stok.nextToken().trim();      if (!currServerSet.contains(tok)) {        cmdlist.add("--remove");        cmdlist.add("replication-server:" + tok);        numremoved++;      }    }    if (numremoved > 0) {      String[] args1=(String[])cmdlist.toArray(new String[cmdlist.size()]);      if (debug.messageEnabled()) {        String dbgcmd1=concat(args1).replaceAll(passwd,"****");        debug.message("EmbeddedOpenDS:syncReplication:Execute:" + dbgcmd1);      }      bos=new ByteArrayOutputStream();      boe=new ByteArrayOutputStream();      DSConfig.main(args1,bos,boe);      str=bos.toString();      stre=boe.toString();      if (debug.messageEnabled()) {        debug.message("EmbeddedOpenDS:syncReplication:Result:" + str);      }      if (stre.length() != 0) {        debug.error("EmbeddedOpenDS:syncReplication:cmd stderr:" + stre);      }    }  } catch (  Exception ex) {    debug.error("EmbeddedOpenDS:syncReplication:Failed:",ex);    return false;  }  return true;}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public boolean verifySignature(String data,byte[] signature,String algorithm,X509Certificate cert) throws FSSignatureException {  if (data == null || data.length() == 0) {    FSUtils.debug.error("FSSignatureProvider.verifySignature: " + "data to be signed is null.");    throw new FSSignatureException(FSUtils.bundle.getString("nullInput"));  }  try {    if (algorithm == null || algorithm.length() == 0) {      throw new FSSignatureException(FSUtils.bundle.getString("invalidAlgorithm"));    }    if (!isValidAlgorithm(algorithm)) {      throw new FSSignatureException(FSUtils.bundle.getString("invalidAlgorithm"));    }    Signature sig=Signature.getInstance(algorithm);    if (cert != null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSignatureProvider.verifySignature:" + " Certificate: " + cert.toString());      }      sig.initVerify(cert);      sig.update(data.getBytes());      return sig.verify(signature);    } else {      return false;    }  } catch (  Exception ex) {    String stackTrace=null;    ByteArrayOutputStream bop=new ByteArrayOutputStream();    ex.printStackTrace(new PrintStream(bop));    stackTrace=bop.toString();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureProvider.verifySignature: " + stackTrace);    }    throw new FSSignatureException(ex.getMessage());  }}  }
class C{  Map encodedAttrs(Map attrs,AMEncryption encryptObj){  Set values=(Set)attrs.get(as.getName());  if (values == null) {    return attrs;  }  if (as.getSyntax().equals(AttributeSchema.Syntax.PASSWORD) || as.getSyntax().equals(AttributeSchema.Syntax.ENCRYPTED_PASSWORD)) {    Set vals=new HashSet();    for (Iterator items=values.iterator(); items.hasNext(); ) {      String tString=(String)items.next();      try {        vals.add(AccessController.doPrivileged(new EncodeAction(tString,encryptObj)));      } catch (      Throwable e) {        debug.error("AttributeValidator.encodedAttrs: Unable to encode",e);        vals.add(tString);      }    }    attrs.put(as.getName(),vals);  }  return (attrs);}  }
class C{  public String encode(){  String encoded_string;  encoded_string=KEY_FIELD + type;  if (keyData != null) {    encoded_string+=Separators.COLON;    encoded_string+=keyData;  }  encoded_string+=Separators.NEWLINE;  return encoded_string;}  }
class C{  private static void connectStartTLS(){  secureConnect();}  }
class C{  private JPanel createBrowseButtonPanel(FieldName fieldName,JButton browseButton){  return Utilities.createBrowseButtonPanel(getLabel(fieldName),getField(fieldName),browseButton);}  }
class C{  public static MatchedValuesFilter createApproximateFilter(AttributeType attributeType,ByteString assertionValue){  Reject.ifNull(attributeType,assertionValue);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(APPROXIMATE_MATCH_TYPE,rawAttributeType,assertionValue,null,null,null,null);  filter.attributeType=attributeType;  filter.assertionValue=assertionValue;  return filter;}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public void testToEngineeringStringZeroPosExponent(){  String a="0.0E+16";  BigDecimal aNumber=new BigDecimal(a);  String result="0E+15";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  @Override public boolean isEnabled(){  return this.pEnabled;}  }
class C{  public AtomicReference(){}  }
class C{  public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_component",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.current_component();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected Client addToClientMap(String ct,Map cMap){  return addToClientMap(ct,cMap,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textValue=textNode.getNodeValue();  assertEquals("nodeTextNodeValueAssert1","1230 North Ave. Dallas, Texas 98551",textValue);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public static boolean isCallerValid(String className){  if (!checkCaller) {    return (true);  }  String parentClass=getParentClass(className);  for (int i=0; i < VALID_PACKAGES.length; i++) {    if (parentClass.startsWith(VALID_PACKAGES[i])) {      return (true);    }  }  for (int i=0; i < VALID_CLASSES.length; i++) {    if (parentClass.equals(VALID_CLASSES[i])) {      return (true);    }  }  return (false);}  }
class C{  public boolean isIPValid(Session sess,String clientIP) throws SSOException {  boolean check=false;  try {    InetAddress sessIPAddress=InetAddress.getByName(sess.getProperty("Host"));    InetAddress clientIPAddress=InetAddress.getByName(clientIP);    if (sessIPAddress.equals(clientIPAddress)) {      check=true;    }  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("IP address check of Token Failed",e);    }  }  return check;}  }
class C{  private void loadAttsMap(){  final AttributeSet atts=requestPacket.getAttributeSet();  for (int i=0; i < atts.size(); i++) {    final Attribute att=atts.getAttributeAt(i);    attributeMap.put(att.getClass(),att);  }}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=79 * hash + (int)(Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));  hash=79 * hash + (int)(Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));  hash=79 * hash + (int)(Double.doubleToLongBits(this.z) ^ (Double.doubleToLongBits(this.z) >>> 32));  return hash;}  }
class C{  @Override public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns10.class,args);}  }
class C{  protected void sendMessage(Session session,ClusterManager manager){  String id=session.getIdInternal();  if (id != null) {    send(manager,id);  }}  }
class C{  public final String toString(){  return name;}  }
class C{  public void push(short val){  this.push(new BaseTypeWrapper(val));}  }
class C{  void ensureIsUsable() throws ConstraintViolationException {  boolean isUsable=true;  List<LocalizableMessage> reasons=new LinkedList<>();  for (  Constraint constraint : definition.getAllConstraints()) {    for (    ServerConstraintHandler handler : constraint.getServerConstraintHandlers()) {      try {        if (!handler.isUsable(this,reasons)) {          isUsable=false;        }      } catch (      ConfigException e) {        LocalizableMessage message=ERR_SERVER_CONSTRAINT_EXCEPTION.get(e.getMessageObject());        reasons.add(message);        isUsable=false;      }    }  }  if (!isUsable) {    throw new ConstraintViolationException(this,reasons);  }}  }
class C{  private String updateFieldName(ClassNode fieldOwner,FieldNode fin){  while (!fieldOwner.name.equals("java/lang/Object")) {    FieldNode field=getField(fieldOwner,fin.name,fin.desc);    if (field != null) {      return getRefactoredName(field);    }    fieldOwner=getClassNode(fieldOwner.superName);  }  return fin.name;}  }
class C{  public int nextIntUTF8() throws DataFormatException {  return Integer.valueOf(nextString());}  }
class C{  public static Location deserialize(Map<String,Object> args){  World world=Bukkit.getWorld((String)args.get("world"));  if (world == null) {    throw new IllegalArgumentException("unknown world");  }  return new Location(world,NumberConversions.toDouble(args.get("x")),NumberConversions.toDouble(args.get("y")),NumberConversions.toDouble(args.get("z")),NumberConversions.toFloat(args.get("yaw")),NumberConversions.toFloat(args.get("pitch")));}  }
class C{  protected void drawLine(int p0,int p1,Graphics g,int x,int y){  Element lineMap=getElement();  Element line=lineMap.getElement(lineMap.getElementIndex(p0));  Element elem;  try {    if (line.isLeaf()) {      drawText(line,p0,p1,g,x,y);    } else {      int idx=line.getElementIndex(p0);      int lastIdx=line.getElementIndex(p1);      for (; idx <= lastIdx; idx++) {        elem=line.getElement(idx);        int start=Math.max(elem.getStartOffset(),p0);        int end=Math.min(elem.getEndOffset(),p1);        x=drawText(elem,start,end,g,x,y);      }    }  } catch (  BadLocationException e) {    throw new StateInvariantError("Can't render: " + p0 + ","+ p1);  }}  }
class C{  public static Note sharp(int octave,Tone tone){  return new Note(octave,tone,true);}  }
class C{  protected boolean onBackPressed(){  return true;}  }
class C{  public void testUnsupportedCallbackException04(){  UnsupportedCallbackException ucE;  for (int i=0; i < msgs.length; i++) {    ucE=new UnsupportedCallbackException(null,msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),ucE.getMessage(),msgs[i]);    assertNull("getCallback() must return null.",ucE.getCallback());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeIdNode;  Node nsNode;  String nsName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employeeId");  employeeIdNode=elementList.item(1);  nsNode=employeeIdNode.getNextSibling();  nsName=nsNode.getNodeName();  if (equals("#text",nsName)) {    nsNode=nsNode.getNextSibling();    nsName=nsNode.getNodeName();  }  assertEquals("nodeName","name",nsName);}  }
class C{  public static int runOpenDSSetup(Map map){  String[] setupCmd={"--cli","--adminConnectorPort","4444","--baseDN",Constants.DEFAULT_ROOT_SUFFIX,"--rootUserDN","cn=Directory Manager","--ldapPort","50389","--skipPortCheck","--rootUserPassword","xxxxxxx","--jmxPort","1689","--no-prompt","--doNotStart","--hostname","hostname","--noPropertiesFile","--backendType","je"};  setupCmd[2]=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_ADMIN_SERVER_PORT);  setupCmd[4]=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);  setupCmd[6]=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);  setupCmd[8]=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);  setupCmd[13]=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_JMX_SERVER_PORT);  setupCmd[17]=getOpenDJHostName(map);  setupCmd[20]=SystemProperties.get(SetupConstants.DJ_BACKEND_TYPE_CONFIG_NAME,SetupConstants.DJ_BACKEND_TYPE_DEFAULT);  Object[] params={concat(setupCmd)};  SetupProgress.reportStart("emb.setupcommand",params);  setupCmd[11]=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);  int ret=InstallDS.mainCLI(setupCmd,SetupProgress.getOutputStream(),SetupProgress.getOutputStream(),TempLogFile.newTempLogFile("opendj-setup-"));  if (ret == 0) {    SetupProgress.reportEnd("emb.success",null);  } else {    SetupProgress.reportEnd("emb.failed",null);  }  return ret;}  }
class C{  public static boolean isFromECP(HttpServletRequest request){  PAOSHeader paosHeader=null;  try {    paosHeader=new PAOSHeader(request);  } catch (  PAOSException pex) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SPSSOFederate.initiateECPRequest:" + "no PAOS header");    }    return false;  }  Map svcOpts=paosHeader.getServicesAndOptions();  if ((svcOpts == null) || (!svcOpts.containsKey(SAML2Constants.PAOS_ECP_SERVICE))) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SPSSOFederate.initiateECPRequest:" + "PAOS header doesn't contain ECP service");    }    return false;  }  String acceptHeader=request.getHeader("Accept");  if (acceptHeader == null) {    return false;  }  return (acceptHeader.indexOf(PAOSConstants.PAOS_MIME_TYPE) != -1);}  }
class C{  public Object clone(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"clone()","Entry");  }  return (new ModelMBeanNotificationInfo(this));}  }
class C{  void updateValue(Object value){  try {    if (value == null) {      String string=getFormattedTextField().getText();      value=stringToValue(string);    }    if (getCommitsOnValidEdit()) {      commitEdit();    }    setEditValid(true);  } catch (  ParseException pe) {    setEditValid(false);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedatacountnegative.class,args);}  }
class C{  public void add(AbstractButton b){  if (b == null) {    return;  }  buttons.addElement(b);  if (b.isSelected()) {    if (selection == null) {      selection=b.getModel();    } else {      b.setSelected(false);    }  }  b.getModel().setGroup(this);}  }
class C{  public boolean equals(Object arg){  boolean equalObjects=false;  if (arg == null) {    equalObjects=false;  } else   if (arg == this) {    equalObjects=true;  } else   if (!(arg instanceof Syntax)) {    equalObjects=false;  } else   if (_type.equals(((Syntax)arg)._type)) {    equalObjects=true;  }  return equalObjects;}  }
class C{  public Triangle neighborOpposite(Pnt site,Triangle triangle){  if (!triangle.contains(site))   throw new IllegalArgumentException("Bad vertex; not in triangle");  for (  Triangle neighbor : triGraph.neighbors(triangle)) {    if (!neighbor.contains(site))     return neighbor;  }  return null;}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void dumpBaselessKeys(Writer writer) throws IOException {  dumpEntries(writer,blamer.getBaselessKeys());}  }
class C{  public static AbandonRequest copyOfAbandonRequest(final AbandonRequest request){  return new AbandonRequestImpl(request);}  }
class C{  private static int[] add(int[] x,int[] y){  if (x.length < y.length) {    int[] tmp=x;    x=y;    y=tmp;  }  int xIndex=x.length;  int yIndex=y.length;  int result[]=new int[xIndex];  long sum=0;  if (yIndex == 1) {    sum=(x[--xIndex] & LONG_MASK) + (y[0] & LONG_MASK);    result[xIndex]=(int)sum;  } else {    while (yIndex > 0) {      sum=(x[--xIndex] & LONG_MASK) + (y[--yIndex] & LONG_MASK) + (sum >>> 32);      result[xIndex]=(int)sum;    }  }  boolean carry=(sum >>> 32 != 0);  while (xIndex > 0 && carry)   carry=((result[--xIndex]=x[xIndex] + 1) == 0);  while (xIndex > 0)   result[--xIndex]=x[xIndex];  if (carry) {    int bigger[]=new int[result.length + 1];    System.arraycopy(result,0,bigger,1,result.length);    bigger[0]=0x01;    return bigger;  }  return result;}  }
class C{  private void restoreNestedVariables(){  if (nestedVars != null) {    Iterator<String> iter=nestedVars.iterator();    while (iter.hasNext()) {      String varName=iter.next();      varName=findAlias(varName);      Object obj=originalNestedVars.get(varName);      if (obj != null) {        invokingJspCtxt.setAttribute(varName,obj);      } else {        invokingJspCtxt.removeAttribute(varName,PAGE_SCOPE);      }    }  }}  }
class C{  protected void clearOrCreateWindow(String name){  if (mWindow == null) {    mWindow=new CursorWindow(name);  } else {    mWindow.clear();  }}  }
class C{  public OfflineUpdateException(LocalizableMessage msg,Throwable rootCause){  super(msg,rootCause);}  }
class C{  private void postProcessOnSuccess(){  if (!processDone) {    if (debug.messageEnabled()) {      debug.message("postProcessOnSuccess ");    }    authContext.getLoginState().postProcess(indexType,indexName,LoginState.PostProcessEvent.SUCCESS);    processDone=true;  }}  }
class C{  public static JKPrivilige createPrivilige(String name,JKPrivilige parent,int number){  logger.debug("createPriviligeObject(): Id : ",".name",name,", Parent:[",parent,"] , ",number);  JKPrivilige p=new JKPrivilige(name,parent,number);  p.setDesc(p.getFullName());  return p;}  }
class C{  public boolean isModified(){  return getStatus() == RecordStatus.MODIFIED;}  }
class C{  public void tunnelTarget(boolean secure,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (this.tracker.isTunnelled()) {    throw new IllegalStateException("Connection is already tunnelled.");  }  this.connection.update(null,tracker.getTargetHost(),secure,params);  this.tracker.tunnelTarget(secure);}  }
class C{  static void evaluateProxyAuthControls(Operation operation) throws DirectoryException {  for (  Control control : operation.getRequestControls()) {    final String oid=control.getOID();    if (isProxyAuthzControl(oid)) {      DN authDN=operation.getClientConnection().getAuthenticationInfo().getAuthenticationDN();      if (getAccessControlHandler().isAllowed(authDN,operation,control)) {        processProxyAuthControls(operation,oid);      } else {        if (control.isCritical()) {          throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(control.getOID()));        }      }    }  }}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("--------------------------------------");  buf.append("Got UMS Exception\n");  String msg=getMessage();  if (msg != null && msg.length() > 0) {    buf.append("Message: ").append(getMessage());  }  if (rootCause != null) {    buf.append("\nLower level exception: ");    buf.append(getRootCause());  }  return buf.toString();}  }
class C{  public boolean containsAttributes(AttributeSet attrs){  return attributes.containsAttributes(attrs);}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("IDPPServiceManager:configChanged:");  }  try {    initializeService();  } catch (  IDPPException ie) {    IDPPUtils.debug.error("IDPPServiceManager:configChanged: " + "Error in updating service configuration.",ie);  }}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,searchControl);}  }
class C{  public static ArgumentException missingNameInPropertyArgument(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_NAME_IN_PROPERTY_VALUE.get(arg);  return new ArgumentException(msg);}  }
class C{  boolean isLogoutAllowed(final ZonkyApiToken token){  if (!this.tokenBased) {    return true;  }  final Optional<Reader> tokenStream=this.data.getToken();  if (tokenStream.isPresent()) {    return false;  } else   try {    final String marshalled=ZonkyApiToken.marshal(token);    final boolean tokenStored=this.data.setToken(new StringReader(marshalled));    if (tokenStored) {      AuthenticationHandler.LOGGER.debug("Token stored successfully.");      return false;    } else {      AuthenticationHandler.LOGGER.debug("Failed storing token.");      return true;    }  } catch (  final JAXBException ex) {    AuthenticationHandler.LOGGER.info("Failed writing access token, will need to use password next time.",ex);    return true;  }}  }
class C{  public Destination(URI uri){  super(uri);}  }
class C{  protected void processTextEvent(TextEvent e){  TextListener listener=textListener;  if (listener != null) {    int id=e.getID();switch (id) {case TextEvent.TEXT_VALUE_CHANGED:      listener.textValueChanged(e);    break;}}}  }
class C{  @Override public void write(byte[] b){}  }
class C{  public static long parseUnsignedInt(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  l&=0xFFFFFFFFL;  return l;}  }
class C{  public FramedIPAddressAttribute(Type type,int msb,int msb2,int msb3,int msb4){  super(FramedIPAddressAttribute.toOctets(type,msb,msb2,msb3,msb4));  byte[] octets=super.getOctets();  addr[0]=octets[2];  addr[1]=octets[3];  addr[2]=octets[4];  addr[3]=octets[5];}  }
class C{  private static String escapeString(String s){  if (s == null)   return null;  s=s.replace("\\","\\\\");  s=s.replace("*","\\*");  s=s.replace("?","\\?");  s=s.replace("[","\\[");  return s;}  }
class C{  public static String capitalizeFully(String label){  return WordUtils.capitalizeFully(label);}  }
class C{  public static MBeanServer createMBeanServer(){  return createMBeanServer(null);}  }
class C{  public EMail createEMail(String value){  EmailField emailImpl=new EmailField();  try {    emailImpl.setValue(value);  } catch (  SdpException s) {    s.printStackTrace();  }  return emailImpl;}  }
class C{  public boolean readChunk() throws IOException {  long rawTimestamp=Utils.readUint32(raf);  Date timestamp=AiffUtil.timestampToDate(rawTimestamp);  aiffHeader.setTimestamp(timestamp);  return true;}  }
class C{  @DataProvider(name="passwordPolicyWarningTypeData") public Object[][] createPasswordPolicyWarningTypeData(){  HashMap<Byte,String> values=new HashMap<>();  values.put((byte)0x80,"timeBeforeExpiration");  values.put((byte)0x81,"graceAuthNsRemaining");  return new Object[][]{{values}};}  }
class C{  public UncheckedIOException(IOException cause){  super(Objects.requireNonNull(cause));}  }
class C{  PlaPointRational(BigInteger p_x,BigInteger p_y,BigInteger p_z){  rp_x=p_x;  rp_y=p_y;  rp_z=p_z;  is_nan=p_z.signum() <= 0;}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  protected boolean isValid(){  return (maxX > 0);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMediaSheetsSupported);}  }
class C{  public ID3v1Tag(){}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private COSTemplate createCOSTemplate(String serviceID,AttrSet attrset,String entryDN) throws UMSException {  TemplateManager tempMgr=TemplateManager.getTemplateManager();  CreationTemplate basicCOSTemplate=tempMgr.getCreationTemplate("BasicCOSTemplate",null);  COSTemplate cosTemplate=new COSTemplate(basicCOSTemplate,"\"" + entryDN + "\"");  cosTemplate.addTemplateAttribute("objectclass","extensibleObject");  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl.newCOSTemplate: cn = " + entryDN + " COSTemplate = "+ cosTemplate);  }  int size=attrset.size();  for (int i=0; i < size; i++) {    Attr attr=attrset.elementAt(i);    cosTemplate.modify(attr,ModificationType.ADD);  }  return cosTemplate;}  }
class C{  @Override public void remove(String name) throws EntitlementException {  if (name == null) {    throw new EntitlementException(12);  }  Privilege privilege=findByName(name);  if (privilege != null) {    String currentRealm=getRealm();    Subject adminSubject=getAdminSubject();    PolicyDataStore pdb=PolicyDataStore.getInstance();    pdb.removePrivilege(adminSubject,currentRealm,privilege);    notifyPrivilegeChanged(currentRealm,null,privilege,PolicyEventType.DELETE);  }}  }
class C{  public RuntimePermission(String name){  super(name);}  }
class C{  protected MessageDigest(String algorithm){  this.algorithm=algorithm;}  }
class C{  private Map<String,String> loadProps(String bootFileLocation,IdentityServer identityServer){  File bootFile=IdentityServer.getFileForPath(bootFileLocation,getServerRoot());  Map<String,String> entries=new HashMap<>();  if (null == bootFile) {    System.out.println("No boot file properties: " + ServerConstants.PROPERTY_BOOT_FILE_LOCATION);  } else   if (!bootFile.exists()) {    System.out.println("No boot properties file detected at " + bootFile.getAbsolutePath());  } else   if (null != identityServer && bootFile.equals(identityServer.bootPropertyFile)) {    return identityServer.bootFileProperties;  } else {    System.out.println("Using boot properties at " + bootFile.getAbsolutePath());    bootPropertyFile=bootFile;    InputStream in=null;    try {      Properties prop=new Properties();      in=new BufferedInputStream(new FileInputStream(bootFile));      prop.load(in);      for (      Map.Entry<Object,Object> entry : prop.entrySet()) {        entries.put((String)entry.getKey(),(String)entry.getValue());      }    } catch (    FileNotFoundException ex) {    }catch (    IOException ex) {      throw new RuntimeException("Failed to load boot properties file " + bootFile.getAbsolutePath() + " "+ ex.getMessage(),ex);    } finally {      if (in != null) {        try {          in.close();        } catch (        IOException ex) {        }      }    }  }  return entries;}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  void saveResourceIndex(String resourceType) throws PolicyException, SSOException {  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType);  if (resourceIndex != null) {    String resourceIndexXML=resourceIndex.toXML();    resourceManager.saveResourceIndex(resourceType,resourceIndexXML);  }}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  impl.add(posn,comp);  return this;}  }
class C{  public Action createAction(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ACTION,elem);  if (obj == null) {    return new ActionImpl(elem);  } else {    return (Action)obj;  }}  }
class C{  public TRANSIENT(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public FrameBodyWPAY(){}  }
class C{  SelectParagraphAction(){  super(selectParagraphAction);  start=new BeginParagraphAction("pigdog",false);  end=new EndParagraphAction("pigdog",true);}  }
class C{  public void destroyToken(SSOToken destroyer,SSOToken destroyed) throws SSOException {  try {    Session requester=((SSOTokenImpl)destroyer).getSession();    Session target=((SSOTokenImpl)destroyed).getSession();    requester.destroySession(target);  } catch (  SessionException e) {    throw new SSOException(e);  }}  }
class C{  private HashSet<String> loadDictionary(DictionaryPasswordValidatorCfg configuration) throws ConfigException, InitializationException {  File dictionaryFile=getFileForPath(configuration.getDictionaryFile());  if (!dictionaryFile.exists()) {    LocalizableMessage message=ERR_DICTIONARY_VALIDATOR_NO_SUCH_FILE.get(configuration.getDictionaryFile());    throw new ConfigException(message);  }  BufferedReader reader=null;  HashSet<String> dictionary=new HashSet<>();  try {    reader=new BufferedReader(new FileReader(dictionaryFile));    String line=reader.readLine();    while (line != null) {      if (!configuration.isCaseSensitiveValidation()) {        line=line.toLowerCase();      }      dictionary.add(line);      line=reader.readLine();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_DICTIONARY_VALIDATOR_CANNOT_READ_FILE.get(configuration.getDictionaryFile(),e);    throw new InitializationException(message);  } finally {    close(reader);  }  return dictionary;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS02.class,args);}  }
class C{  private boolean canBeRDFAttrProp(XMPNode node){  return !node.hasQualifier() && !node.getOptions().isURI() && !node.getOptions().isCompositeProperty()&& !node.getOptions().containsOneOf(PropertyOptions.SEPARATE_NODE)&& !XMPConst.ARRAY_ITEM_NAME.equals(node.getName());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.CipherDataType createCipherDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.CipherDataTypeImpl();}  }
class C{  public void addChild(PersistentObject object) throws AccessRightsException, EntryAlreadyExistsException, UMSException {  if (object == null) {    String args[]=new String[1];    args[0]=this.toString();    String msg=i18n.getString(IUMSConstants.ADD_NULL_OBJ,args);    throw new IllegalArgumentException(msg);  }  String idAttr=object.getNamingAttribute();  String idValue=null;  Attr idAttrObj=object.getAttribute(idAttr);  if (idAttrObj != null) {    idValue=idAttrObj.getValue();  } else {    throw new UMSException(BAD_NAMING_ATTR + idAttr);  }  if (idAttr == null || idValue == null || idValue.length() == 0) {    String args[]=new String[1];    args[0]=object.toString();    String msg=i18n.getString(IUMSConstants.COMPOSE_GUID_FAILED,args);    throw new IllegalArgumentException(msg);  }  String childStr=null;  if (getGuid().getDn().length() > 0) {    childStr=idAttr + "=" + idValue+ ","+ getGuid().getDn();  } else {    childStr=idAttr + "=" + idValue;  }  Guid childGuid=new Guid(childStr);  object.setGuid(childGuid);  DataLayer.getInstance().addEntry(getPrincipal(),childGuid,object.getAttrSet());  object.setModSet(null);  object.setPrincipal(getPrincipal());  EntityManager em=EntityManager.getEntityManager();  try {    em.execute(getPrincipal(),object,m_guid);  } catch (  UMSException e) {    if (debug.messageEnabled()) {      debug.message("PersistentObject.addChild : UMSException : " + e.getMessage());    }  }}  }
class C{  @SuppressWarnings("unused") public static void swapArrayPosition(int[] source,int first,int second){  int temp=source[first];  source[first]=source[second];  source[second]=temp;}  }
class C{  public PdfPatternCanvas(PdfStream contentStream,PdfResources resources,PdfDocument document){  super(contentStream,resources,document);  this.tilingPattern=new PdfPattern.Tiling(contentStream);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BasicSplitPaneUI();}  }
class C{  public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  public void startElement(String uri,String localName,String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document docAlt;  DocumentType docType=null;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attrAlt;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  domImpl=doc.getImplementation();  docAlt=domImpl.createDocument(nullNS,"newDoc",docType);  attrAlt=docAlt.createAttributeNS(nullNS,"street");{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attrAlt);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s6_matching_and_non_matching_versions_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  void dump(){  System.out.println("=============");  System.out.println("         node: " + getNode().getDN());  System.out.println("    recursive: " + recursive);  System.out.println(" differential: " + differential);  System.out.println("        state: " + state);  System.out.println("   localEntry: " + localEntry);  System.out.println("  remoteEntry: " + remoteEntry);  System.out.println("    remoteUrl: " + remoteUrl);  System.out.println("   isLeafNode: " + isLeafNode);  System.out.println("    exception: " + exception);  System.out.println(" exceptionArg: " + exceptionArg);  System.out.println("=============");}  }
class C{  public static SchemaBuilder addJsonSyntaxesAndMatchingRulesToSchema(final SchemaBuilder builder){  builder.buildSyntax(SYNTAX_JSON_OID).description(SYNTAX_JSON_DESCRIPTION).implementation(new JsonSyntaxImpl()).extraProperties("X-ORIGIN","OpenDJ Directory Server").addToSchema();  builder.buildSyntax(SYNTAX_JSON_QUERY_OID).description(SYNTAX_JSON_QUERY_DESCRIPTION).implementation(new JsonQuerySyntaxImpl()).extraProperties("X-ORIGIN","OpenDJ Directory Server").addToSchema();  final JsonQueryEqualityMatchingRuleImpl caseIgnoreImpl=new JsonQueryEqualityMatchingRuleImpl(EMR_CASE_IGNORE_JSON_QUERY_NAME,defaultOptions().set(CASE_SENSITIVE_STRINGS,false).set(IGNORE_WHITE_SPACE,true));  builder.buildMatchingRule(EMR_CASE_IGNORE_JSON_QUERY_OID).names(EMR_CASE_IGNORE_JSON_QUERY_NAME).syntaxOID(SYNTAX_JSON_QUERY_OID).extraProperties("X-ORIGIN","OpenDJ Directory Server").implementation(caseIgnoreImpl).addToSchema();  final JsonQueryEqualityMatchingRuleImpl caseExactImpl=new JsonQueryEqualityMatchingRuleImpl(EMR_CASE_EXACT_JSON_QUERY_NAME,defaultOptions().set(CASE_SENSITIVE_STRINGS,true).set(IGNORE_WHITE_SPACE,true));  builder.buildMatchingRule(EMR_CASE_EXACT_JSON_QUERY_OID).names(EMR_CASE_EXACT_JSON_QUERY_NAME).syntaxOID(SYNTAX_JSON_QUERY_OID).extraProperties("X-ORIGIN","OpenDJ Directory Server").implementation(caseExactImpl).addToSchema();  return builder;}  }
class C{  public boolean isExists() throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  return idServices.isExists(token,type,name,orgName);}  }
class C{  protected synchronized void engineNextBytes(byte[] bytes){  int i, n;  long bits;  int nextByteToReturn;  int lastWord;  final int extrabytes=7;  if (bytes == null) {    throw new NullPointerException("bytes == null");  }  lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  if (state == UNDEFINED) {    updateSeed(getRandomBytes(DIGEST_LENGTH));    nextBIndex=HASHBYTES_TO_USE;    lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  } else   if (state == SET_SEED) {    System.arraycopy(seed,HASH_OFFSET,copies,HASHCOPY_OFFSET,EXTRAFRAME_OFFSET);    for (i=lastWord + 3; i < FRAME_LENGTH + 2; i++) {      seed[i]=0;    }    bits=(seedLength << 3) + 64;    if (seed[BYTES_OFFSET] < MAX_BYTES) {      seed[14]=(int)(bits >>> 32);      seed[15]=(int)(bits & 0xFFFFFFFF);    } else {      copies[EXTRAFRAME_OFFSET + 14]=(int)(bits >>> 32);      copies[EXTRAFRAME_OFFSET + 15]=(int)(bits & 0xFFFFFFFF);    }    nextBIndex=HASHBYTES_TO_USE;  }  state=NEXT_BYTES;  if (bytes.length == 0) {    return;  }  nextByteToReturn=0;  n=(HASHBYTES_TO_USE - nextBIndex) < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE - nextBIndex : bytes.length - nextByteToReturn;  if (n > 0) {    System.arraycopy(nextBytes,nextBIndex,bytes,nextByteToReturn,n);    nextBIndex+=n;    nextByteToReturn+=n;  }  if (nextByteToReturn >= bytes.length) {    return;  }  n=seed[BYTES_OFFSET] & 0x03;  for (; ; ) {    if (n == 0) {      seed[lastWord]=(int)(counter >>> 32);      seed[lastWord + 1]=(int)(counter & 0xFFFFFFFF);      seed[lastWord + 2]=END_FLAGS[0];    } else {      seed[lastWord]|=(int)((counter >>> RIGHT1[n]) & MASK[n]);      seed[lastWord + 1]=(int)((counter >>> RIGHT2[n]) & 0xFFFFFFFF);      seed[lastWord + 2]=(int)((counter << LEFT[n]) | END_FLAGS[n]);    }    if (seed[BYTES_OFFSET] > MAX_BYTES) {      copies[EXTRAFRAME_OFFSET]=seed[FRAME_LENGTH];      copies[EXTRAFRAME_OFFSET + 1]=seed[FRAME_LENGTH + 1];    }    SHA1Impl.computeHash(seed);    if (seed[BYTES_OFFSET] > MAX_BYTES) {      System.arraycopy(seed,0,copies,FRAME_OFFSET,FRAME_LENGTH);      System.arraycopy(copies,EXTRAFRAME_OFFSET,seed,0,FRAME_LENGTH);      SHA1Impl.computeHash(seed);      System.arraycopy(copies,FRAME_OFFSET,seed,0,FRAME_LENGTH);    }    counter++;    int j=0;    for (i=0; i < EXTRAFRAME_OFFSET; i++) {      int k=seed[HASH_OFFSET + i];      nextBytes[j]=(byte)(k >>> 24);      nextBytes[j + 1]=(byte)(k >>> 16);      nextBytes[j + 2]=(byte)(k >>> 8);      nextBytes[j + 3]=(byte)(k);      j+=4;    }    nextBIndex=0;    j=HASHBYTES_TO_USE < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE : bytes.length - nextByteToReturn;    if (j > 0) {      System.arraycopy(nextBytes,0,bytes,nextByteToReturn,j);      nextByteToReturn+=j;      nextBIndex+=j;    }    if (nextByteToReturn >= bytes.length) {      break;    }  }}  }
class C{  public SortKey(final AttributeDescription attributeDescription,final boolean isReverseOrder,final MatchingRule orderingMatchingRule){  Reject.ifNull(attributeDescription);  this.attributeDescription=attributeDescription.toString();  this.orderingMatchingRule=orderingMatchingRule != null ? orderingMatchingRule.getNameOrOID() : null;  this.isReverseOrder=isReverseOrder;}  }
class C{  void init(JsonObject config){  period=config.getLong("period",3000L);  variation=config.getInteger("variation",100);  name=config.getString("name");  Objects.requireNonNull(name);  symbol=config.getString("symbol",name);  stocks=config.getInteger("volume",10000);  price=config.getDouble("price",100.0);  value=price;  ask=price + random.nextInt(variation / 2);  bid=price + random.nextInt(variation / 2);  share=stocks / 2;}  }
class C{  @Override public PdfFormXObject createFormXObject(Color foreground,PdfDocument document){  return createFormXObject(foreground,DEFAULT_MODULE_SIZE,document);}  }
class C{  protected void registerChildren(){  model.registerChildren(this);}  }
class C{  private void closeSearch(){  try {    if (searchStatus != null) {      searchStatus.cancel(true);      searchStatus=null;    }  } catch (  Exception e) {    DEBUG.warning("Connection failed to close.",e);  }}  }
class C{  public static GetComplete parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("GetComplete.parseXML:Error " + "while parsing input xml string");    }    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new GetComplete(root);}  }
class C{  public IssueService(GitHubClient client){  super(client);}  }
class C{  public LDIFChangeRecordReader(final Reader reader){  super(reader);}  }
class C{  public void reset_compensated_trees(){  Iterator<AwtreeShapeSearch> iter=search_trees.iterator();  while (iter.hasNext()) {    AwtreeShapeSearch curr_tree=iter.next();    if (curr_tree != default_tree)     iter.remove();  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String qualifiedName="econm:local";  Document doc;  Attr newAttr;  String attrName;  doc=(Document)load("staffNS",false);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  attrName=newAttr.getName();  assertEquals("throw_Equals",qualifiedName,attrName);}  }
class C{  @Override public void body(String namespace,String name,String bodyText) throws Exception {  if (paramCount == 0) {    this.bodyText=bodyText.trim();  }}  }
class C{  private boolean isLeftCompleted(long target){  long size=completed ? thisNodeSize : completedSize(target);  if (size >= target)   return true;  for (SliceTask<P_IN,P_OUT> parent=getParent(), node=this; parent != null; node=parent, parent=parent.getParent()) {    if (node == parent.rightChild) {      SliceTask<P_IN,P_OUT> left=parent.leftChild;      if (left != null) {        size+=left.completedSize(target);        if (size >= target)         return true;      }    }  }  return size >= target;}  }
class C{  public void testToPlainStringPosNegExp(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-100";  BigDecimal aNumber=new BigDecimal(a);  String result="0.000000000000000000000000000000000000000000000000000000000000000000012380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  public void initialize(Map configParams){}  }
class C{  public TokenFilterBuilder withSizeLimit(int sizeLimit){  tokenFilter.setSizeLimit(sizeLimit);  return this;}  }
class C{  public FrameBodyTDOR(){}  }
class C{  public final void testGetAffineY02(){  assertNull(ECPoint.POINT_INFINITY.getAffineY());}  }
class C{  @Override public long end() throws IOException {  return 0;}  }
class C{  public CallMethodRule(int targetOffset,String methodName,int paramCount,Class<?> paramTypes[]){  this.targetOffset=targetOffset;  this.methodName=methodName;  this.paramCount=paramCount;  if (paramTypes == null) {    this.paramTypes=new Class[paramCount];    for (int i=0; i < this.paramTypes.length; i++) {      this.paramTypes[i]=String.class;    }  } else {    this.paramTypes=new Class[paramTypes.length];    for (int i=0; i < this.paramTypes.length; i++) {      this.paramTypes[i]=paramTypes[i];    }  }  this.paramClassNames=null;}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  Object result=getValue(name);  if (result instanceof String) {    return new StringValueExp((String)result);  } else {    throw new BadAttributeValueExpException(result);  }}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public SQLPermission(String name){  super(name);}  }
class C{  public synchronized Principal authenticate(Connection dbConnection,String username,String credentials){  if (username == null || credentials == null) {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("jdbcRealm.authenticateFailure",username));    return null;  }  String dbCredentials=getPassword(username);  if (dbCredentials == null) {    getCredentialHandler().mutate(credentials);    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("jdbcRealm.authenticateFailure",username));    return null;  }  boolean validated=getCredentialHandler().matches(credentials,dbCredentials);  if (validated) {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("jdbcRealm.authenticateSuccess",username));  } else {    if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString("jdbcRealm.authenticateFailure",username));    return null;  }  ArrayList<String> roles=getRoles(username);  return (new GenericPrincipal(username,credentials,roles));}  }
class C{  public void testEquals(){  int version=1;  int rounds=5;  int wordSize=16;  byte[] iv={1,2,3,4,5,6};  RC5ParameterSpec ps1=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps2=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps3=new RC5ParameterSpec(version,rounds,wordSize,new byte[]{1,2,3,4});  assertTrue("The equivalence relation should be reflexive.",ps1.equals(ps1));  assertTrue("Objects built on the same parameters should be equal.",ps1.equals(ps2));  assertTrue("The equivalence relation should be symmetric.",ps2.equals(ps1));  assertTrue("Objects built on the equal parameters should be equal.",ps2.equals(ps3));  assertTrue("The equivalence relation should be transitive.",ps1.equals(ps3));  assertFalse("Should return not be equal to null object.",ps1.equals(null));  ps2=new RC5ParameterSpec(version + 1,rounds,wordSize,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds + 1,wordSize,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds,wordSize / 2,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC5ParameterSpec(version,rounds,wordSize,new byte[]{4,3,2,1});  assertFalse("Objects should not be equal.",ps1.equals(ps2));}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  void copyArea(JComponent c,Graphics g,int x,int y,int w,int h,int deltaX,int deltaY,boolean clip){  getPaintManager().copyArea(c,g,x,y,w,h,deltaX,deltaY,clip);}  }
class C{  public int purge(){synchronized (impl) {    return impl.purge();  }}  }
class C{  public void stop(){  try {    myServerSocket.close();    myThread.join();  } catch (  IOException ioe) {  }catch (  InterruptedException e) {  }}  }
class C{  public void testRadix10Pos(){  String value="2387627892347567398736473476";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public PlaPointFloat change_size(double p_new_size){  if (v_x == 0 && v_y == 0) {    return this;  }  double length=Math.sqrt(v_x * v_x + v_y * v_y);  double new_x=(v_x * p_new_size) / length;  double new_y=(v_y * p_new_size) / length;  return new PlaPointFloat(new_x,new_y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateattribute1.class,args);}  }
class C{  public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  private int startOfWeekOffset(int day,int dow){  int weekStart=Math.floorMod(day - dow,7);  int offset=-weekStart;  if (weekStart + 1 > weekDef.getMinimalDaysInFirstWeek()) {    offset=7 - weekStart;  }  return offset;}  }
class C{  @Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){  super.dump(prefix,fd,writer,args);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  updateKeyMaskFields();  out.defaultWriteObject();}  }
class C{  public void testGenKeyPair02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  for (int i=0; i < kpg.length; i++) {    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  public void addPageStreamingDescriptorImports(ModelTypeTable typeTable){}  }
class C{  public INPUT_STREAM(String mimeType){  super(mimeType,"java.io.InputStream");}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.FederationConfigType createFederationConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.FederationConfigTypeImpl();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void requestRemainingGraceLoginCount(){  operations.add(PasswordPolicyStateOperationType.GET_REMAINING_GRACE_LOGIN_COUNT);}  }
class C{  public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  public static boolean isBinaryAttribute(String attributeName){  return attributeName != null && attributeName.endsWith(BINARY_FLAG);}  }
class C{  Worker(Runnable firstTask){  setState(-1);  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  public void testasIntBuffer() throws IOException {  FileInputStream fis=new FileInputStream(tmpFile);  FileChannel fc=fis.getChannel();  MappedByteBuffer mmb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());  int len=mmb.capacity();  assertEquals("Got wrong number of bytes",46,len);  for (int i=0; i < 26; i++) {    byte b=mmb.get();    assertEquals("Got wrong byte value",(byte)'A' + i,b);  }  IntBuffer ibuffer=mmb.asIntBuffer();  for (int i=0; i < 5; i++) {    int val=ibuffer.get();    assertEquals("Got wrong int value",i + 1,val);  }  fc.close();}  }
class C{  boolean impliesIgnoreMask(SocketPermission that){  int i, j;  if ((that.mask & RESOLVE) != that.mask) {    if ((that.portrange[0] < this.portrange[0]) || (that.portrange[1] > this.portrange[1])) {      if (this.includesEphemerals() || that.includesEphemerals()) {        if (!inRange(this.portrange[0],this.portrange[1],that.portrange[0],that.portrange[1])) {          return false;        }      } else {        return false;      }    }  }  if (this.wildcard && "".equals(this.cname))   return true;  if (this.invalid || that.invalid) {    return compareHostnames(that);  }  try {    if (this.init_with_ip) {      if (that.wildcard)       return false;      if (that.init_with_ip) {        return (this.addresses[0].equals(that.addresses[0]));      } else {        if (that.addresses == null) {          that.getIP();        }        for (i=0; i < that.addresses.length; i++) {          if (this.addresses[0].equals(that.addresses[i]))           return true;        }      }      return false;    }    if (this.wildcard || that.wildcard) {      if (this.wildcard && that.wildcard)       return (that.cname.endsWith(this.cname));      if (that.wildcard)       return false;      if (that.cname == null) {        that.getCanonName();      }      return (that.cname.endsWith(this.cname));    }    if (this.addresses == null) {      this.getIP();    }    if (that.addresses == null) {      that.getIP();    }    if (!(that.init_with_ip && this.isUntrusted())) {      for (j=0; j < this.addresses.length; j++) {        for (i=0; i < that.addresses.length; i++) {          if (this.addresses[j].equals(that.addresses[i]))           return true;        }      }      if (this.cname == null) {        this.getCanonName();      }      if (that.cname == null) {        that.getCanonName();      }      return (this.cname.equalsIgnoreCase(that.cname));    }  } catch (  UnknownHostException uhe) {    return compareHostnames(that);  }  return false;}  }
class C{  public static String URLEncode(String s,String enc){  if (s == null) {    return "null";  }  if (enc == null) {    enc="ISO-8859-1";  }  StringBuilder out=new StringBuilder(s.length());  ByteArrayOutputStream buf=new ByteArrayOutputStream();  OutputStreamWriter writer=null;  try {    writer=new OutputStreamWriter(buf,enc);  } catch (  java.io.UnsupportedEncodingException ex) {    writer=new OutputStreamWriter(buf);  }  for (int i=0; i < s.length(); i++) {    int c=s.charAt(i);    if (c == ' ') {      out.append('+');    } else     if (isSafeChar(c)) {      out.append((char)c);    } else {      try {        writer.write(c);        writer.flush();      } catch (      IOException e) {        buf.reset();        continue;      }      byte[] ba=buf.toByteArray();      for (int j=0; j < ba.length; j++) {        out.append('%');        out.append(Character.forDigit((ba[j] >> 4) & 0xf,16));        out.append(Character.forDigit(ba[j] & 0xf,16));      }      buf.reset();    }  }  return out.toString();}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  protected Object allocateArray(int len){  return new MarkData[len];}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=false;  m_inEntityRef=false;  if (m_tracer != null)   this.fireEndEntity(name);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  private void socksBind() throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort());  } catch (  Exception e) {    throw new IOException("Unable to connect to SOCKS server",e);  }  if (lastConnectedAddress == null) {    throw new SocketException("Invalid SOCKS client");  }  socksSendRequest(Socks4Message.COMMAND_BIND,lastConnectedAddress,lastConnectedPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }  if (reply.getIP() == 0) {    address=socksGetServerAddress();  } else {    byte[] replyBytes=new byte[4];    Memory.pokeInt(replyBytes,0,reply.getIP(),ByteOrder.BIG_ENDIAN);    address=InetAddress.getByAddress(replyBytes);  }  localport=reply.getPort();}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.StatusTypeImpl();}  }
class C{  public void gotoMark(){  _currentNode=_markedNode;}  }
class C{  public Observable<Void> createOrderObservable(Order order){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  createOrder(order,resultHandler.toHandler());  return resultHandler;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens05.class,args);}  }
class C{  public synchronized void keyPress(int keycode){  checkKeycodeArgument(keycode);  peer.keyPress(keycode);  afterEvent();}  }
class C{  public NSData(byte[] bytes){  this.bytes=bytes;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("xml","1.0");  assertTrue("throw_True",state);}  }
class C{  public void addSessionListener(SessionListener listener) throws SessionException {  addSessionListener(listener,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument03.class,args);}  }
class C{  protected void createMBeans(){  Context context=null;  try {    context=(Context)(new InitialContext()).lookup("java:/");  } catch (  NamingException e) {    log.error("No global naming context defined for server");    return;  }  try {    createMBeans("",context);  } catch (  NamingException e) {    log.error("Exception processing Global JNDI Resources",e);  }}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.addFoo(foo);}  }
class C{  public static int mainModify(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  LDAPModifyOptions modifyOptions=new LDAPModifyOptions();  LDAPConnection connection=null;  final BooleanArgument continueOnError;  final BooleanArgument defaultAdd;  final BooleanArgument noop;  final BooleanArgument reportAuthzID;  final BooleanArgument saslExternal;  final BooleanArgument showUsage;  final BooleanArgument startTLS;  final BooleanArgument trustAll;  final BooleanArgument useSSL;  final BooleanArgument verbose;  final FileBasedArgument bindPasswordFile;  final FileBasedArgument keyStorePasswordFile;  final FileBasedArgument trustStorePasswordFile;  final IntegerArgument connectTimeout;  final IntegerArgument port;  final IntegerArgument version;  final StringArgument assertionFilter;  final StringArgument bindDN;  final StringArgument bindPassword;  final StringArgument certNickname;  final StringArgument controlStr;  final StringArgument encodingStr;  final StringArgument filename;  final StringArgument hostName;  final StringArgument keyStorePath;  final StringArgument keyStorePassword;  final StringArgument postReadAttributes;  final StringArgument preReadAttributes;  final StringArgument proxyAuthzID;  final StringArgument saslOptions;  final StringArgument trustStorePath;  final StringArgument trustStorePassword;  final StringArgument propertiesFileArgument;  final BooleanArgument noPropertiesFileArgument;  LocalizableMessage toolDescription=INFO_LDAPMODIFY_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPMODIFY.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    hostName=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_DESCRIPTION_HOST.get()).defaultValue("localhost").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(389).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useSSL=BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildAndAddToParser(argParser);    startTLS=BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPassword=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPasswordFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    defaultAdd=BooleanArgument.builder("defaultAdd").shortIdentifier('a').description(INFO_MODIFY_DESCRIPTION_DEFAULT_ADD.get()).buildAndAddToParser(argParser);    filename=StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(INFO_LDAPMODIFY_DESCRIPTION_FILENAME.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    saslExternal=BooleanArgument.builder("useSASLExternal").shortIdentifier('r').description(INFO_DESCRIPTION_USE_SASL_EXTERNAL.get()).buildAndAddToParser(argParser);    saslOptions=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_DESCRIPTION_SASL_PROPERTIES.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    keyStorePath=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_DESCRIPTION_KEYSTOREPATH.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePassword=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder("certNickname").shortIdentifier('N').description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePath=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_DESCRIPTION_TRUSTSTOREPATH.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePassword=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    proxyAuthzID=StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_DESCRIPTION_PROXY_AUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildAndAddToParser(argParser);    reportAuthzID=BooleanArgument.builder("reportAuthzID").shortIdentifier('E').description(INFO_DESCRIPTION_REPORT_AUTHZID.get()).buildAndAddToParser(argParser);    assertionFilter=StringArgument.builder(OPTION_LONG_ASSERTION_FILE).description(INFO_DESCRIPTION_ASSERTION_FILTER.get()).valuePlaceholder(INFO_ASSERTION_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    preReadAttributes=StringArgument.builder("preReadAttributes").description(INFO_DESCRIPTION_PREREAD_ATTRS.get()).valuePlaceholder(INFO_ATTRIBUTE_LIST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    postReadAttributes=StringArgument.builder("postReadAttributes").description(INFO_DESCRIPTION_POSTREAD_ATTRS.get()).valuePlaceholder(INFO_ATTRIBUTE_LIST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    version=IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    connectTimeout=IntegerArgument.builder(OPTION_LONG_CONNECT_TIMEOUT).description(INFO_DESCRIPTION_CONNECTION_TIMEOUT.get()).lowerBound(0).defaultValue(CliConstants.DEFAULT_LDAP_CONNECT_TIMEOUT).valuePlaceholder(INFO_TIMEOUT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodingStr=StringArgument.builder("encoding").shortIdentifier('i').description(INFO_DESCRIPTION_ENCODING.get()).valuePlaceholder(INFO_ENCODING_PLACEHOLDER.get()).buildAndAddToParser(argParser);    continueOnError=BooleanArgument.builder("continueOnError").shortIdentifier('c').description(INFO_DESCRIPTION_CONTINUE_ON_ERROR.get()).buildAndAddToParser(argParser);    noop=BooleanArgument.builder(OPTION_LONG_DRYRUN).shortIdentifier(OPTION_SHORT_DRYRUN).description(INFO_DESCRIPTION_NOOP.get()).buildAndAddToParser(argParser);    verbose=verboseArgument();    argParser.addArgument(verbose);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return SUCCESS;  }  if (bindPassword.isPresent() && bindPasswordFile.isPresent()) {    printWrappedText(err,conflictingArgsErrorMessage(bindPassword,bindPasswordFile));    return CLIENT_SIDE_PARAM_ERROR;  }  String hostNameValue=hostName.getValue();  int portNumber=389;  try {    portNumber=port.getIntValue();  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  try {    int versionNumber=version.getIntValue();    if (versionNumber != 2 && versionNumber != 3) {      printWrappedText(err,ERR_DESCRIPTION_INVALID_VERSION.get(versionNumber));      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setVersionNumber(versionNumber);  } catch (  ArgumentException ae) {    logger.traceException(ae);    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  String bindDNValue=bindDN.getValue();  String fileNameValue=filename.getValue();  String bindPasswordValue;  try {    bindPasswordValue=getPasswordValue(bindPassword,bindPasswordFile,bindDNValue,out,err);  } catch (  Exception ex) {    logger.traceException(ex);    printWrappedText(err,ex.getMessage());    return CLIENT_SIDE_PARAM_ERROR;  }  String keyStorePathValue=keyStorePath.getValue();  String trustStorePathValue=trustStorePath.getValue();  String keyStorePasswordValue=null;  if (keyStorePassword.isPresent()) {    keyStorePasswordValue=keyStorePassword.getValue();  } else   if (keyStorePasswordFile.isPresent()) {    keyStorePasswordValue=keyStorePasswordFile.getValue();  }  String trustStorePasswordValue=null;  if (trustStorePassword.isPresent()) {    trustStorePasswordValue=trustStorePassword.getValue();  } else   if (trustStorePasswordFile.isPresent()) {    trustStorePasswordValue=trustStorePasswordFile.getValue();  }  modifyOptions.setShowOperations(noop.isPresent());  modifyOptions.setVerbose(verbose.isPresent());  modifyOptions.setContinueOnError(continueOnError.isPresent());  modifyOptions.setEncoding(encodingStr.getValue());  modifyOptions.setDefaultAdd(defaultAdd.isPresent());  if (controlStr.isPresent()) {    for (    String ctrlString : controlStr.getValues()) {      Control ctrl=LDAPToolUtils.getControl(ctrlString,err);      if (ctrl == null) {        printWrappedText(err,ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        return CLIENT_SIDE_PARAM_ERROR;      }      modifyOptions.getControls().add(ctrl);    }  }  if (proxyAuthzID.isPresent()) {    Control proxyControl=new ProxiedAuthV2Control(true,ByteString.valueOfUtf8(proxyAuthzID.getValue()));    modifyOptions.getControls().add(proxyControl);  }  if (assertionFilter.isPresent()) {    String filterString=assertionFilter.getValue();    LDAPFilter filter;    try {      filter=LDAPFilter.decode(filterString);      Control assertionControl=new LDAPAssertionRequestControl(true,filter);      modifyOptions.getControls().add(assertionControl);    } catch (    LDAPException le) {      printWrappedText(err,ERR_LDAP_ASSERTION_INVALID_FILTER.get(le.getMessage()));      return CLIENT_SIDE_PARAM_ERROR;    }  }  if (preReadAttributes.isPresent()) {    String valueStr=preReadAttributes.getValue();    Set<String> attrElements=new LinkedHashSet<>();    StringTokenizer tokenizer=new StringTokenizer(valueStr,", ");    while (tokenizer.hasMoreTokens()) {      attrElements.add(tokenizer.nextToken());    }    Control c=new LDAPPreReadRequestControl(true,attrElements);    modifyOptions.getControls().add(c);  }  if (postReadAttributes.isPresent()) {    String valueStr=postReadAttributes.getValue();    Set<String> attrElements=new LinkedHashSet<>();    StringTokenizer tokenizer=new StringTokenizer(valueStr,", ");    while (tokenizer.hasMoreTokens()) {      attrElements.add(tokenizer.nextToken());    }    Control c=new LDAPPostReadRequestControl(true,attrElements);    modifyOptions.getControls().add(c);  }  connectionOptions.setSASLExternal(saslExternal.isPresent());  if (saslOptions.isPresent()) {    for (    String saslOption : saslOptions.getValues()) {      boolean val=saslOption.startsWith("mech=") ? connectionOptions.setSASLMechanism(saslOption) : connectionOptions.addSASLProperty(saslOption);      if (!val) {        return CLIENT_SIDE_PARAM_ERROR;      }    }  }  connectionOptions.setUseSSL(useSSL.isPresent());  connectionOptions.setStartTLS(startTLS.isPresent());  connectionOptions.setReportAuthzID(reportAuthzID.isPresent());  if (connectionOptions.useSASLExternal()) {    if (!connectionOptions.useSSL() && !connectionOptions.useStartTLS()) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_SSL_OR_TLS.get());      return CLIENT_SIDE_PARAM_ERROR;    }    if (keyStorePathValue == null) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_KEYSTORE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  connectionOptions.setVerbose(verbose.isPresent());  LDAPModify ldapModify=null;  try {    if (initializeServer) {      DirectoryServer.bootstrapClient();    }    SSLConnectionFactory sslConnectionFactory=null;    if (connectionOptions.useSSL() || connectionOptions.useStartTLS()) {      String clientAlias;      if (certNickname.isPresent()) {        clientAlias=certNickname.getValue();      } else {        clientAlias=null;      }      sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(trustAll.isPresent(),keyStorePathValue,keyStorePasswordValue,clientAlias,trustStorePathValue,trustStorePasswordValue);      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    }    AtomicInteger nextMessageID=new AtomicInteger(1);    connection=new LDAPConnection(hostNameValue,portNumber,connectionOptions,out,err);    int timeout=connectTimeout.getIntValue();    connection.connectToHost(bindDNValue,bindPasswordValue,nextMessageID,timeout);    ldapModify=new LDAPModify(nextMessageID,out,err);    ldapModify.readAndExecute(connection,fileNameValue,modifyOptions);  } catch (  LDAPException le) {    logger.traceException(le);    LDAPToolUtils.printErrorMessage(err,le.getMessageObject(),le.getResultCode(),le.getErrorMessage(),le.getMatchedDN());    return le.getResultCode();  }catch (  LDAPConnectionException lce) {    logger.traceException(lce);    LDAPToolUtils.printErrorMessage(err,lce.getMessageObject(),lce.getResultCode(),lce.getErrorMessage(),lce.getMatchedDN());    return lce.getResultCode();  }catch (  FileNotFoundException fe) {    logger.traceException(fe);    printWrappedText(err,fe.getMessage());    return CLIENT_SIDE_PARAM_ERROR;  }catch (  ArgumentException e) {    argParser.displayMessageAndUsageReference(err,e.getMessageObject());    return 1;  }catch (  Exception e) {    logger.traceException(e);    printWrappedText(err,e.getMessage());    return OPERATIONS_ERROR;  } finally {    if (connection != null) {      if (ldapModify == null) {        connection.close(null);      } else {        connection.close(ldapModify.nextMessageID);      }    }  }  return SUCCESS;}  }
class C{  public boolean isAlreadyConnectedToRS(ReplicationServerHandler rsHandler) throws DirectoryException {  ReplicationServerHandler oldRsHandler=connectedRSs.get(rsHandler.getServerId());  if (oldRsHandler == null) {    return false;  }  if (oldRsHandler.getServerAddressURL().equals(rsHandler.getServerAddressURL())) {    return true;  }  LocalizableMessage message=ERR_DUPLICATE_REPLICATION_SERVER_ID.get(localReplicationServer.getMonitorInstanceName(),oldRsHandler.getServerAddressURL(),rsHandler.getServerAddressURL(),rsHandler.getServerId());  throw new DirectoryException(ResultCode.OTHER,message);}  }
class C{  private void checkTopoView(int[] dsIdList,TopoView theoricalTopoView) throws Exception {  Thread.sleep(500);  for (  int currentDsId : dsIdList) {    LDAPReplicationDomain rd=null;switch (currentDsId) {case DS1_ID:      rd=rd1;    break;case DS2_ID:  rd=rd2;break;case DS3_ID:rd=rd3;break;case DS4_ID:rd=rd4;break;case DS5_ID:rd=rd5;break;case DS6_ID:rd=rd6;break;default :fail("Unknown replication domain server id.");}final DSInfo dsInfo=new DSInfo(rd.getServerId(),"dummy:1234",rd.getRsServerId(),TEST_DN_WITH_ROOT_ENTRY_GENID,rd.getStatus(),rd.isAssured(),rd.getAssuredMode(),rd.getAssuredSdLevel(),rd.getGroupId(),rd.getRefUrls(),rd.getEclIncludes(),rd.getEclIncludesForDeletes(),ProtocolVersion.getCurrentVersion());final List<DSInfo> dsList=new ArrayList<>(rd.getReplicaInfos().values());dsList.add(dsInfo);TopoView dsTopoView=new TopoView(dsList,rd.getRsInfos());assertEquals(dsTopoView,theoricalTopoView," in DSid=" + currentDsId);}}  }
class C{  public void addHeader(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null header!");  }  mHeaders.add(view);}  }
class C{  public void redo() throws CannotRedoException {  super.redo();  Enumeration cursor=edits.elements();  while (cursor.hasMoreElements()) {    ((UndoableEdit)cursor.nextElement()).redo();  }}  }
class C{  public static String encode(final String s){  return new String(encode(Utils.getDefaultBytes(s,"ISO-8859-1")));}  }
class C{  public String[] allKeys(){  return dict.keySet().toArray(new String[count()]);}  }
class C{  static int sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler,int edgeTreatmentFlags) throws org.xml.sax.SAXException {  boolean processingLeadingWhitespace=((edgeTreatmentFlags & SUPPRESS_LEADING_WS) != 0);  boolean seenWhitespace=((edgeTreatmentFlags & CARRY_WS) != 0);  int currPos=start;  int limit=start + length;  if (processingLeadingWhitespace) {    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (currPos == limit) {      return edgeTreatmentFlags;    }  }  while (currPos < limit) {    int startNonWhitespace=currPos;    for (; currPos < limit && !XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startNonWhitespace != currPos) {      if (seenWhitespace) {        handler.characters(SINGLE_SPACE,0,1);        seenWhitespace=false;      }      handler.characters(ch,startNonWhitespace,currPos - startNonWhitespace);    }    int startWhitespace=currPos;    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {    }    if (startWhitespace != currPos) {      seenWhitespace=true;    }  }  return (seenWhitespace ? CARRY_WS : 0) | (edgeTreatmentFlags & SUPPRESS_TRAILING_WS);}  }
class C{  private static ArrayList createListValue(String fileName,String property,String value){  ArrayList returnList=new ArrayList();  try {    ArrayList lineNums=new ArrayList();    File file=new File(fileName);    if (file.exists() && file.canRead()) {      LineNumberReader lineRead=new LineNumberReader(new FileReader(file));      String presentLine=lineRead.readLine();      while (presentLine != null) {        if (presentLine.startsWith(property) && presentLine.length() > property.length()) {          char ch=presentLine.charAt(property.length());          if (ch == '[' || ch == ' ' || ch == '=') {            int presentLineNo=lineRead.getLineNumber();            if (presentLineNo > 0) {              lineNums.add(new Integer(presentLineNo));            }          }        }        presentLine=lineRead.readLine();      }      if (lineRead != null) {        lineRead.close();      }    }    if ((lineNums != null) && (lineNums.size() > 0)) {      Iterator iter=lineNums.iterator();      int count=0;      while (iter.hasNext()) {        int lineNum=((Integer)iter.next()).intValue();        if (lineNum > 0) {          if (count > 0) {            lineNum=lineNum - count;          }          String line=FileUtils.removeLinesByNumber(fileName,lineNum,1);          if (line != null) {            count++;            String val=isPropertyValid(line);            if ((val != null) && (val.length() > 0)) {              returnList.add(val);            }          }        }      }    }  } catch (  Exception ex) {    Debug.log("FileUtils.createListValue() threw exception :",ex);  }  returnList.add(SPACE + value);  return returnList;}  }
class C{  public void insertRecord(final int selectedRow){  insertRecord(selectedRow,createEmptyRecord());}  }
class C{  public AttributeSet parseDeclaration(String string){  try {    return parseDeclaration(new StringReader(string));  } catch (  IOException ioe) {  }  return null;}  }
class C{  public Document createDocument(String namespaceURI,String qualifiedName,DocumentType doctype) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not Implemented");}  }
class C{  protected Explanation(Answer answer,int eventID){  this.answer=answer;  this.eventID=eventID;  owner=answer.getBlockRepresentingControlDependencyOf(this);  if (owner != null)   owner.addExplanation(this);}  }
class C{  public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  public void connect() throws SQLException {  if (released.get())   throw new SQLException("A connection once released, can't be reestablished.");  if (connection != null) {    try {      this.disconnect(false);    } catch (    Exception x) {      log.debug("Unable to disconnect previous connection.",x);    }  }  if (poolProperties.getDataSource() == null && poolProperties.getDataSourceJNDI() != null) {  }  if (poolProperties.getDataSource() != null) {    connectUsingDataSource();  } else {    connectUsingDriver();  }  if (poolProperties.getJdbcInterceptors() == null || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getName()) < 0 || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getSimpleName()) < 0) {    if (poolProperties.getDefaultTransactionIsolation() != DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION)     connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());    if (poolProperties.getDefaultReadOnly() != null)     connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());    if (poolProperties.getDefaultAutoCommit() != null)     connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());    if (poolProperties.getDefaultCatalog() != null)     connection.setCatalog(poolProperties.getDefaultCatalog());  }  this.discarded=false;  this.lastConnected=System.currentTimeMillis();}  }
class C{  public TabStop(float tabPosition,TabAlignment tabAlignment){  this(tabPosition,tabAlignment,null);}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean disableAdminDataSynchronization(){  return isPropertyTrue(PROPERTY_DISABLE_ADMIN_DATA_SYNCHRONIZATION);}  }
class C{  static void useManageDsaITRequestControl(Connection connection) throws LdapException {  if (isSupported(ManageDsaITRequestControl.OID)) {    final String dn="dc=ref,dc=com";    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    try {      System.out.println("Referral without the ManageDsaIT control.");      SearchRequest request=Requests.newSearchRequest(dn,SearchScope.SUBORDINATES,"(objectclass=*)","");      final ConnectionEntryReader reader=connection.search(request);      while (reader.hasNext()) {        if (reader.isReference()) {          final SearchResultReference ref=reader.readReference();          System.out.println("Reference: " + ref.getURIs());        }      }      System.out.println("Referral with the ManageDsaIT control.");      request.addControl(ManageDsaITRequestControl.newControl(true));      final SearchResultEntry entry=connection.searchSingleEntry(request);      writer.writeEntry(entry);      writer.close();    } catch (    final LdapException e) {      System.err.println(e.getMessage());      System.exit(e.getResult().getResultCode().intValue());    }catch (    final SearchResultReferenceIOException e) {      System.err.println("Got search reference(s): " + e.getReference().getURIs());    }catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("ManageDsaITRequestControl not supported.");  }}  }
class C{  @Override public void onItemsRemoved(RecyclerView recyclerView,int positionStart,int itemCount){  if (isBeforePreLayout) {    if (firstChangedPosition > positionStart || firstChangedPosition == -1)     firstChangedPosition=positionStart;    if (firstChangedPosition < firstAttachedItemPosition)     removedTopAndBoundPositionCount+=itemCount;  }}  }
class C{  public void removeChild(Guid childGuid) throws AccessRightsException, EntryNotFoundException, UMSException {  DN parentEntry=DN.valueOf(getDN());  DN childEntry=DN.valueOf(childGuid.getDn());  if (!childEntry.isInScopeOf(parentEntry,SearchScope.SUBORDINATES)) {    String msg=i18n.getString(IUMSConstants.BAD_CHILD_OBJ);    throw new IllegalArgumentException(msg);  }  DataLayer.getInstance().deleteEntry(getPrincipal(),childGuid);}  }
class C{  public boolean equals(String s){  if (s == null) {    return false;  }  if (length != s.length()) {    return false;  }  for (int i=0; i < length; i++) {    if (ch[offset + i] != s.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public void intersectPermittedSubtree(GeneralSubtree[] permitted){  Map subtreesMap=new HashMap();  for (int i=0; i != permitted.length; i++) {    GeneralSubtree subtree=permitted[i];    Integer tagNo=Integers.valueOf(subtree.getBase().getTagNo());    if (subtreesMap.get(tagNo) == null) {      subtreesMap.put(tagNo,new HashSet());    }    ((Set)subtreesMap.get(tagNo)).add(subtree);  }  for (Iterator it=subtreesMap.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();switch (((Integer)entry.getKey()).intValue()) {case 1:      permittedSubtreesEmail=intersectEmail(permittedSubtreesEmail,(Set)entry.getValue());    break;case 2:  permittedSubtreesDNS=intersectDNS(permittedSubtreesDNS,(Set)entry.getValue());break;case 4:permittedSubtreesDN=intersectDN(permittedSubtreesDN,(Set)entry.getValue());break;case 6:permittedSubtreesURI=intersectURI(permittedSubtreesURI,(Set)entry.getValue());break;case 7:permittedSubtreesIP=intersectIP(permittedSubtreesIP,(Set)entry.getValue());}}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceexistingattribute.class,args);}  }
class C{  public MaterialBarcodeScannerBuilder withCenterTracker(){  mScannerMode=MaterialBarcodeScanner.SCANNER_MODE_CENTER;  return this;}  }
class C{  public static long gauge32Value(long v){  if (v > (pow(2,32) - 1)) {    return (pow(2,32) - 1);  } else {    return v;  }}  }
class C{  @Override public void handle(Callback[] callbacks) throws UnsupportedCallbackException {}  }
class C{  protected MouseWheelListener createMouseWheelListener(){  return getHandler();}  }
class C{  public InsertContentAction(){  super(insertContentAction);}  }
class C{  public String listSessionIds(){  StringBuilder sb=new StringBuilder();  Iterator<String> keys=sessions.keySet().iterator();  while (keys.hasNext()) {    sb.append(keys.next()).append(" ");  }  return sb.toString();}  }
class C{  private void doPostDelete(PluginOperation deleteOperation,Entry entry){  if (hasGroupMembershipUpdateControl(deleteOperation)) {    return;  }  lock.writeLock().lock();  try {    if (groupInstances.removeSubtree(entry.getName(),null)) {      refreshToken++;    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  public void put(String name,String supported,String key,String value,String level){  IDFFAuthContext c=new IDFFAuthContext();  c.name=name;  c.supported=supported;  c.key=key;  c.value=value;  c.level=level;  collections.put(name,c);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  } else   if (o instanceof AttributeValue) {    AttributeValue attrValue=(AttributeValue)o;    try {      return getNormalizedValue().equals(attrValue.getNormalizedValue());    } catch (    Exception e) {      logger.traceException(e);      return value.equals(attrValue.getValue());    }  }  return false;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer NS=new StringBuffer(100);  includeNSPrefix=false;  declareNS=false;  String appendNS="";  if (declareNS) {    NS.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    NS.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    appendNS=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(appendNS).append(XACMLConstants.SUBJECT).append(NS);  if (subjectCategory != null) {    sb.append(" ").append(XACMLConstants.SUBJECT_CATEGORY).append("=");    sb.append("\"").append(subjectCategory.toString()).append("\"");  }  sb.append(">");  int length=0;  if (attributes != null) {    sb.append("\n");    length=attributes.size();    for (int i=0; i < length; i++) {      Attribute attr=(Attribute)attributes.get(i);      sb.append(attr.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(appendNS).append(XACMLConstants.SUBJECT);  sb.append(">\n");  return sb.toString();}  }
class C{  public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {  Object result;switch (t) {case CLASS_STRING:    result=str();  break;case CLASS_NUMBER:result=new Double(num());break;case CLASS_NODESET:result=iter();break;case CLASS_BOOLEAN:result=new Boolean(bool());break;case CLASS_UNKNOWN:result=m_obj;break;default :error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});result=null;}return result;}  }
class C{  @Override public void attributeReplaced(ServletContextAttributeEvent event){  log("attributeReplaced('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  public FileAlreadyExistsException(String file){  super(file);}  }
class C{  public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.error(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void postEvent(AWTEvent theEvent){  SunToolkit.flushPendingEvents(appContext);  postEventPrivate(theEvent);}  }
class C{  private void resetCipher(CipherState state,long position,byte[] iv) throws IOException {  final long counter=getCounter(position);  CtrCryptoInputStream.calculateIV(getInitIV(),counter,iv);  try {    state.getCryptoCipher().init(Cipher.DECRYPT_MODE,key,new IvParameterSpec(iv));  } catch (  InvalidKeyException e) {    throw new IOException(e);  }catch (  InvalidAlgorithmParameterException e) {    throw new IOException(e);  }  state.reset(false);}  }
class C{  public javax.sip.address.SipURI createSipURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null URI");  try {    StringMsgParser smp=new StringMsgParser();    SipUri sipUri=smp.parseSIPUrl(uri);    return (SipURI)sipUri;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_double);}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  private void parse_oneVarPreOperation() throws SyntaxException {  Element opNode=(Element)current;  String op=opNode.getContent();  last1VarUnaryOps.push(op);  Expression e=next_exp(false);  UnaryOneVariableOperation uovo=new UnaryOneVariableOperation(op,e,opNode.getLineCol());  parsedExps.push(uovo);  last1VarUnaryOps.pop();  parse_expression();}  }
class C{  public void recycle(){  cookies.clear();  outputBuffer.recycle();  usingOutputStream=false;  usingWriter=false;  appCommitted=false;  included=false;  errorState.set(0);  isCharacterEncodingSet=false;  applicationResponse=null;  if (Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES) {    if (facade != null) {      facade.clear();      facade=null;    }    if (outputStream != null) {      outputStream.clear();      outputStream=null;    }    if (writer != null) {      writer.clear();      writer=null;    }  } else {    writer.recycle();  }}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public void insertEntries(int start,int length,int value){  int sizes[]=getSizes();  int end=start + length;  int n=a.length + length;  a=new int[n];  for (int i=0; i < start; i++) {    a[i]=sizes[i];  }  for (int i=start; i < end; i++) {    a[i]=value;  }  for (int i=end; i < n; i++) {    a[i]=sizes[i - length];  }  setSizes(a);}  }
class C{  @Inject OpenIdConnectClientRegistrationService(ClientDAO clientDAO,OAuth2ProviderSettingsFactory providerSettingsFactory,AccessTokenVerifier tokenVerifier,TokenStore tokenStore,OpenIDConnectURLValidator urlValidator){  this.clientDAO=clientDAO;  this.providerSettingsFactory=providerSettingsFactory;  this.tokenVerifier=tokenVerifier;  this.tokenStore=tokenStore;  this.urlValidator=urlValidator;}  }
class C{  private int readHeaders(InputStream is){  int nread=0;  log("Read headers");  while (true) {    int headerLen=0;    headerLen=parseHeader(is);    if (headerLen == -1)     return -1;    nread+=headerLen;    if (headerLen <= 2) {      return nread;    }  }}  }
class C{  public void logAbandonResult(AbandonOperation abandonOperation){}  }
class C{  public void addUniqueAttribute(String rawName,String value,int flags) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addUniqueAttribute(rawName,value,flags);}  }
class C{  @Override protected CBORParser _createParser(byte[] data,int offset,int len,IOContext ctxt) throws IOException {  return new CBORParserBootstrapper(ctxt,data,offset,len).constructParser(_factoryFeatures,_parserFeatures,_formatParserFeatures,_objectCodec,_byteSymbolCanonicalizer);}  }
class C{  public Set<String> searchSubOrgNames(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder,boolean recursive) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSLdapObject.searchSubOrgNames search: " + dn);  }  String[] objs={filter};  String FILTER_PATTERN_ORG="(&(objectclass=" + SMSEntry.OC_REALM_SERVICE + ")("+ SMSEntry.ORGANIZATION_RDN+ "={0}))";  String sfilter=MessageFormat.format(FILTER_PATTERN_ORG,(Object[])objs);  return searchSubOrganizationNames(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder,recursive);}  }
class C{  public PdfPage addAnnotation(PdfAnnotation annotation){  return addAnnotation(-1,annotation,true);}  }
class C{  @Override public long end() throws IOException {  if (remaining > 0)   return remaining;  return 0;}  }
class C{  public static boolean needsBase64Encoding(String valueString){  int length;  if (valueString == null || ((length=valueString.length()) == 0)) {    return false;  }switch (valueString.charAt(0)) {case ' ':case ':':case '<':    return true;}if (length > 1 && valueString.charAt(length - 1) == ' ') {  return true;}for (int i=0; i < length; i++) {  char c=valueString.charAt(i);  if (c <= 0 || c == 0x0A || c == 0x0D || c > 127) {    return true;  }}return false;}  }
class C{  public FrameBodyTYER(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  if (getParent() != null) {    sb.append(getParent().toString());    sb.append(".");  }  sb.append("StandardContext[");  sb.append(getName());  sb.append("]");  return (sb.toString());}  }
class C{  public ServerSideSortRequestControl(List<SortKey> sortKeys){  this(false,sortKeys);}  }
class C{  private Duration plus(long secondsToAdd,long nanosToAdd){  if ((secondsToAdd | nanosToAdd) == 0) {    return this;  }  long epochSec=Math.addExact(seconds,secondsToAdd);  epochSec=Math.addExact(epochSec,nanosToAdd / NANOS_PER_SECOND);  nanosToAdd=nanosToAdd % NANOS_PER_SECOND;  long nanoAdjustment=nanos + nanosToAdd;  return ofSeconds(epochSec,nanoAdjustment);}  }
class C{  public SSOToken createSSOToken(String tokenId,String clientIP) throws SSOException, UnsupportedOperationException {  try {    SessionID sessionId=new SessionID(tokenId);    Session session=sessionCache.getSession(sessionId);    if (checkIP && !isIPValid(session,clientIP)) {      throw new Exception(SSOProviderBundle.getString("invalidIP"));    }    SSOToken ssoToken=new SSOTokenImpl(session);    return ssoToken;  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("could not create SSOToken for token ID \"" + tokenId + "\" ("+ e.getMessage()+ ")");    }    throw new SSOException(e);  }}  }
class C{  protected boolean parseMarkupDeclarations(StringBuffer strBuff) throws IOException {  if ((strBuff.length() == "DOCTYPE".length()) && (strBuff.toString().toUpperCase().equals("DOCTYPE"))) {    parseDTDMarkup();    return true;  }  return false;}  }
class C{  @Override public void messageReceived(ClusterMessage msg){  try {    if (msg instanceof FileMessage) {      FileMessage fmsg=(FileMessage)msg;      if (log.isDebugEnabled())       log.debug(sm.getString("farmWarDeployer.msgRxDeploy",fmsg.getContextName(),fmsg.getFileName()));      FileMessageFactory factory=getFactory(fmsg);      if (factory.writeMessage(fmsg)) {        String name=factory.getFile().getName();        if (!name.endsWith(".war"))         name=name + ".war";        File deployable=new File(getDeployDirFile(),name);        try {          String contextName=fmsg.getContextName();          if (!isServiced(contextName)) {            addServiced(contextName);            try {              remove(contextName);              if (!factory.getFile().renameTo(deployable)) {                log.error(sm.getString("farmWarDeployer.renameFail",factory.getFile(),deployable));              }              check(contextName);            }  finally {              removeServiced(contextName);            }            if (log.isDebugEnabled())             log.debug(sm.getString("farmWarDeployer.deployEnd",contextName));          } else           log.error(sm.getString("farmWarDeployer.servicingDeploy",contextName,name));        } catch (        Exception ex) {          log.error(ex);        } finally {          removeFactory(fmsg);        }      }    } else     if (msg instanceof UndeployMessage) {      try {        UndeployMessage umsg=(UndeployMessage)msg;        String contextName=umsg.getContextName();        if (log.isDebugEnabled())         log.debug(sm.getString("farmWarDeployer.msgRxUndeploy",contextName));        if (!isServiced(contextName)) {          addServiced(contextName);          try {            remove(contextName);          }  finally {            removeServiced(contextName);          }          if (log.isDebugEnabled())           log.debug(sm.getString("farmWarDeployer.undeployEnd",contextName));        } else         log.error(sm.getString("farmWarDeployer.servicingUneploy",contextName));      } catch (      Exception ex) {        log.error(ex);      }    }  } catch (  java.io.IOException x) {    log.error(sm.getString("farmWarDeployer.msgIoe"),x);  }}  }
class C{  public PdfCollectionSort(String key){  this(new PdfDictionary());  getPdfObject().put(PdfName.S,new PdfName(key));}  }
class C{  @Provides Activity provideActivity(){  return mActivity;}  }
class C{  public void initialization(String sessionID) throws SecurityTokenException {  try {    Object session=SessionManager.getProvider().getSession(sessionID);    securityTokenManager=new SecurityTokenManager(session);  } catch (  Exception e) {    SecurityTokenManager.debug.error("SecurityTokenManagerImpl: Unable to get " + "SecurityTokenManager",e);    throw (new SecurityTokenException(e.getMessage()));  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("flattening iterator out of bounds");  }  int type=holdType;  if (type != SEG_CLOSE) {    coords[0]=hold[holdIndex + 0];    coords[1]=hold[holdIndex + 1];    if (type != SEG_MOVETO) {      type=SEG_LINETO;    }  }  return type;}  }
class C{  private Backend<?> retrieveBackend(final DN selectedDN) throws ConfigException, Exception {  final List<Backend<?>> backendList=new ArrayList<>();  final List<BackendCfg> entryList=new ArrayList<>();  final List<List<DN>> dnList=new ArrayList<>();  BackendToolUtils.getBackends(backendList,entryList,dnList);  Backend<?> backend=null;  final int numBackends=backendList.size();  for (int i=0; i < numBackends; i++) {    final Backend<?> b=backendList.get(i);    final List<DN> baseDNs=dnList.get(i);    if (baseDNs.contains(selectedDN)) {      if (backend != null) {        throw new ConfigException(ERR_MULTIPLE_BACKENDS_FOR_BASE.get(baseDNString.getValue()));      }      backend=b;    }  }  if (backend == null) {    throw new ConfigException(ERR_NO_BACKENDS_FOR_BASE.get(baseDNString.getValue()));  }  if (!backend.supports(BackendOperation.INDEXING)) {    throw new ConfigException(ERR_BACKEND_NO_INDEXING_SUPPORT.get());  }  return backend;}  }
class C{  private ShortCutUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  private boolean reduce_nets_of_route_items_changed(){  boolean something_changed=false;  Iterator<UndoObjectNode> it=undo_items.start_read_object();  for (; ; ) {    UndoObjectStorable curr_ob=undo_items.read_next(it);    if (curr_ob == null)     break;    BrdItem curr_item=(BrdItem)curr_ob;    if (curr_item.net_nos.size() <= 1 || curr_item.get_fixed_state() == ItemFixState.SYSTEM_FIXED)     continue;    if (curr_ob instanceof BrdAbitVia) {      Collection<BrdItem> contacts=curr_item.get_normal_contacts();      for (      int curr_net_no : curr_item.net_nos) {        for (        BrdItem curr_contact : contacts) {          if (!curr_contact.contains_net(curr_net_no)) {            curr_item.remove_from_net(curr_net_no);            something_changed=true;            break;          }        }        if (something_changed)         break;      }    } else     if (curr_ob instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_ob;      Collection<BrdItem> contacts=curr_trace.get_start_contacts();      for (int i=0; i < 2; ++i) {        for (        int curr_net_no : curr_item.net_nos) {          boolean pin_found=false;          for (          BrdItem curr_contact : contacts) {            if (curr_contact instanceof BrdAbitPin) {              pin_found=true;              if (!curr_contact.contains_net(curr_net_no)) {                curr_item.remove_from_net(curr_net_no);                something_changed=true;                break;              }            }          }          if (!pin_found) {            for (            BrdItem curr_contact : contacts) {              if (!(curr_contact instanceof BrdAbitPin) && !curr_contact.contains_net(curr_net_no)) {                curr_item.remove_from_net(curr_net_no);                something_changed=true;                break;              }            }          }        }        if (something_changed)         break;        contacts=curr_trace.get_end_contacts();      }      if (something_changed)       break;    }    if (something_changed)     break;  }  return something_changed;}  }
class C{  public void testGetOwnerDocument() throws Throwable {  Document doc;  DocumentType ownerDocument;  doc=(Document)load("staff",builder);  ownerDocument=(DocumentType)doc.getOwnerDocument();  assertNull("throw_Null",ownerDocument);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureValueType createSignatureValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureValueTypeImpl();}  }
class C{  private SOAPMessage FormMessageResponse(HttpServletResponse servletResp,Response resp){  SOAPMessage msg=null;  MimeHeaders mimeHeaders=new MimeHeaders();  mimeHeaders.addHeader("Content-Type","text/xml");  StringBuffer envBegin=new StringBuffer(100);  envBegin.append("<").append(sc.SOAP_ENV_PREFIX).append(":Envelope").append(sc.SPACE).append("xmlns:").append(sc.SOAP_ENV_PREFIX).append("=\"").append(sc.SOAP_URI).append("\">").append(sc.NL);  envBegin.append("<").append(sc.SOAP_ENV_PREFIX).append(":Body>").append(sc.NL);  StringBuffer envEnd=new StringBuffer(100);  envEnd.append(sc.START_END_ELEMENT).append(sc.SOAP_ENV_PREFIX).append(":Body>").append(sc.NL);  envEnd.append(sc.START_END_ELEMENT).append(sc.SOAP_ENV_PREFIX).append(":Envelope>").append(sc.NL);  try {    StringBuffer sb=new StringBuffer(300);    sb.append(envBegin).append(resp.toString()).append(envEnd);    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("response created is: " + sb.toString());    }    ByteArrayOutputStream bop=new ByteArrayOutputStream();    bop.write(sb.toString().getBytes(sc.DEFAULT_ENCODING));    msg=msgFactory.createMessage(mimeHeaders,new ByteArrayInputStream(bop.toByteArray()));  } catch (  Exception e) {    SAMLUtils.debug.error("could not build response:" + e.getMessage());    servletResp.setStatus(servletResp.SC_INTERNAL_SERVER_ERROR);    return FormSOAPError(servletResp,"Server","cannotBuildResponse","cannotVerifyIdentity");  }  return msg;}  }
class C{  public OpendsRmiServerSocketFactory(InetAddress listenAddress){  this.listenAddress=listenAddress;}  }
class C{  private void writeResults(List<Long> buckets) throws FileNotFoundException, UnsupportedEncodingException {  StringBuilder contentToWrite=new StringBuilder(bucketSize * 8);  for (  Long l : buckets) {    contentToWrite.append(l).append(DE);  }  Utils.writeFile(contentToWrite.toString(),bucketSize + "bucketsFor" + dataType.toString()+ "withPruneFactor"+ pruneFactor+ "MaxSize"+ bucketMax+ ".buckets");}  }
class C{  WalkingIterator(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);  int firstStepPos=OpMap.getFirstChildPos(opPos);  if (shouldLoadWalkers) {    m_firstWalker=WalkerFactory.loadWalkers(this,compiler,firstStepPos,0);    m_lastUsedWalker=m_firstWalker;  }}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  private static int enableService(PrintStream out,PrintStream err,String serviceName,String serviceDescription){  String serverRoot=getServerRoot();  String[] cmd;  if (hasUAC()) {    cmd=new String[]{getLauncherBinaryFullPath(),LAUNCHER_OPTION,getLauncherAdministratorBinaryFullPath(),LAUNCHER_OPTION,getBinaryFullPath(),"create",serverRoot,serviceName,serviceDescription,DEBUG_OPTION};  } else {    cmd=new String[]{getBinaryFullPath(),"create",serverRoot,serviceName,serviceDescription,DEBUG_OPTION};  }  try {    boolean isServerRunning=Utilities.isServerRunning(new File(serverRoot));    int resultCode=Runtime.getRuntime().exec(cmd).waitFor();switch (resultCode) {case 0:      if (isServerRunning) {        final int returnValue=StartWindowsService.startWindowsService(out,err);        if (returnValue == 0) {          printWrappedText(out,INFO_WINDOWS_SERVICE_SUCCESSULLY_ENABLED.get());          return SERVICE_ENABLE_SUCCESS;        } else {          printWrappedText(err,ERR_WINDOWS_SERVICE_ENABLING_ERROR_STARTING_SERVER.get(SERVICE_ENABLE_ERROR));          return SERVICE_ENABLE_ERROR;        }      } else {        printWrappedText(out,INFO_WINDOWS_SERVICE_SUCCESSULLY_ENABLED.get());        return SERVICE_ENABLE_SUCCESS;      }case 1:    printWrappedText(out,INFO_WINDOWS_SERVICE_ALREADY_ENABLED.get());  return SERVICE_ALREADY_ENABLED;case 2:printWrappedText(err,ERR_WINDOWS_SERVICE_NAME_ALREADY_IN_USE.get());return SERVICE_NAME_ALREADY_IN_USE;case 3:printWrappedText(err,ERR_WINDOWS_SERVICE_ENABLE_ERROR.get());return SERVICE_ENABLE_ERROR;default :printWrappedText(err,ERR_WINDOWS_SERVICE_ENABLE_ERROR.get());return SERVICE_ENABLE_ERROR;}} catch (Throwable t) {err.println("Unexpected throwable: " + t);t.printStackTrace();printWrappedText(err,ERR_WINDOWS_SERVICE_ENABLE_ERROR.get());return SERVICE_ENABLE_ERROR;}}  }
class C{  public static CompareDates compareTwoDates(Date date1,Date date2){  Date d1=new Date(date1.getTime());  Date d2=new Date(date2.getTime());  if (d1.compareTo(d2) < 0)   return CompareDates.DATE1_LESS_THAN_DATE2; else   if (d1.compareTo(d2) > 0)   return CompareDates.DATE1_GREATER_THAN_DATE2; else   return CompareDates.DATE1_EQUAL_DATE2;}  }
class C{  public static void removeAttributeSchemaWithoutI18nKey(Set attributeSchemas){  for (Iterator iter=attributeSchemas.iterator(); iter.hasNext(); ) {    AttributeSchema as=(AttributeSchema)iter.next();    String i18n=as.getI18NKey();    if ((i18n == null) || (i18n.trim().length() == 0)) {      iter.remove();    }  }}  }
class C{  public static void registerAlertGenerator(AlertGenerator alertGenerator){  DirectoryServer.registerAlertGenerator(alertGenerator);}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  public MemberName(Class<?> type){  init(type.getDeclaringClass(),type.getSimpleName(),type,flagsMods(IS_TYPE,type.getModifiers(),REF_NONE));  initResolved(true);}  }
class C{  protected static boolean isCachingEnabled(){  return cachingEnabled;}  }
