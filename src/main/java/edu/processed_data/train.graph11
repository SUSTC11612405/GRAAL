class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(SitemapsMobileEntry.class,ExtensionDescription.getDefaultDescription(MarkupLanguage.class));}  }
class C{  public static IByteSequence readAllBytesFromStream(InputStream inputStream,int capacity) throws IOException {  try {    final int BUFFER_SIZE=1024;    byte[] buffer=new byte[BUFFER_SIZE];    ByteArrayOutputStreamExt bytes=new ByteArrayOutputStreamExt(capacity);    int read;    while ((read=inputStream.read(buffer)) != EOF) {      bytes.write(buffer,0,read);    }    return bytes;  }  finally {    inputStream.close();  }}  }
class C{  private void showPopupMenu(final MouseEvent event){  final ITagTreeNode selectedNode=(ITagTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    final JPopupMenu popupMenu=new JPopupMenu();    popupMenu.add(CActionProxy.proxy(new CAddRootTagNodeAction(m_parent,m_tagManager,m_rootNode.getTag())));    popupMenu.show(this,event.getX(),event.getY());  } else {    final JPopupMenu menu=selectedNode.getPopupMenu();    if (menu != null) {      menu.show(this,event.getX(),event.getY());    }  }}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding URL safe base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void addXTextLabel(double x,String text){  mXTextLabels.put(x,text);}  }
class C{  public static String localString(RegisterSpec spec){  return spec.regString() + ' ' + spec.getLocalItem().toString()+ ": "+ spec.getTypeBearer().toHuman();}  }
class C{  public void parseConflictString(String conflictString){  setConflict(conflictString);  this.conflictStringWithoutConflictMarker=conflictString;  this.lastModified=null;  this.conflict=false;  this.timeStampMatchesFile=false;  if (conflictString == null || conflictString.equals(DUMMY_TIMESTAMP) || conflictString.equals(MERGE_TIMESTAMP) || conflictString.equals(DUMMY_TIMESTAMP_NEW_ENTRY)) {    return;  }  int parseStartIndex=0;  final int conflictIndex=conflictStringWithoutConflictMarker.indexOf(HAD_CONFLICTS);  if (conflictIndex >= 0) {    conflict=true;    parseStartIndex=conflictIndex + 1;  }  final int timeMatchIndex=conflictStringWithoutConflictMarker.indexOf(TIMESTAMP_MATCHES_FILE);  if (timeMatchIndex >= 0) {    timeStampMatchesFile=true;    parseStartIndex=Math.max(parseStartIndex,timeMatchIndex + 1);  }  if (parseStartIndex > 0) {    conflictStringWithoutConflictMarker=conflictStringWithoutConflictMarker.substring(parseStartIndex);  }  if (conflictStringWithoutConflictMarker.length() == 0) {    conflictStringWithoutConflictMarker=null;    return;  }  if (conflictStringWithoutConflictMarker.startsWith(INITIAL_PREFIX)) {    return;  }  try {    this.lastModified=getLastModifiedDateFormatter().parse(conflictStringWithoutConflictMarker);  } catch (  Exception ex) {    lastModified=null;    System.err.println("[Entry] can't parse conflict '" + conflictStringWithoutConflictMarker + "'");  }}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public WrongPredictionCondition(){}  }
class C{  public Rectangle(Rectangle rect){  x=rect.x;  y=rect.y;  width=rect.width;  height=rect.height;}  }
class C{  public static VOCountryVatRate toVOCountryVatRate(VatRate domObj){  if (domObj == null) {    return null;  }  VOCountryVatRate vo=new VOCountryVatRate();  vo.setRate(domObj.getRate());  vo.setCountry(domObj.getTargetCountry().getCountryISOCode());  updateValueObject(vo,domObj);  return vo;}  }
class C{  public JLTransform(final int k){  this(k,TransformMode.SPARSE);}  }
class C{  public MapOptions zoom(int zoom){  this.zoom=zoom;  return this;}  }
class C{  protected void configureImageReaderLoaders(){  imageReaderLoaders=new Vector<ImageReaderLoader>();  ImageReaderLoader idl=(ImageReaderLoader)ComponentFactory.create("com.bbn.openmap.dataAccess.image.geotiff.GeoTIFFImageReaderLoader");  if (idl != null) {    imageReaderLoaders.add(idl);  } else {    logger.warning("ImageTileLayer needs JAI installed in order to use GeoTIFF Image Reader.");  }  idl=(ImageReaderLoader)ComponentFactory.create("com.bbn.openmap.dataAccess.image.WorldFileImageReaderLoader");  if (idl != null) {    imageReaderLoaders.add(idl);  } else {    logger.warning("ImageTileLayer needs JAI installed in order to use World File Image Reader.");  }}  }
class C{  public OrderRestRep submit(OrderCreateParam input){  OrderRestRep order=client.post(OrderRestRep.class,input,PathConstants.ORDER2_URL);  return order;}  }
class C{  public void testSamplingChange() throws Exception {  startUp();  assert !logEnabled();  fs.close();  igfs.globalSampling(true);  fs=fileSystem();  assert logEnabled();  fs.close();  igfs.globalSampling(null);  fs=fileSystem();  assert !logEnabled();  igfs.globalSampling(false);  fs=fileSystem();  assert !logEnabled();  fs.close();  igfs.globalSampling(null);  fs=fileSystem();  assert !logEnabled();  fs.close();  igfs.globalSampling(true);  igfs.globalSampling(false);  fs=fileSystem();  assert !logEnabled();  fs.close();  igfs.globalSampling(true);  fs=fileSystem();  assert logEnabled();}  }
class C{  private void doClearTurret(){  String title=Messages.getString("FiringDisplay.ClearTurret.title");  String body=Messages.getString("FiringDisplay.ClearTurret.message");  if (!clientgui.doYesNoDialog(title,body)) {    return;  }  if ((((attacks.size() == 0) && (ce() instanceof Tank) && (((Tank)ce()).isTurretJammed(((Tank)ce()).getLocTurret()))) || ((Tank)ce()).isTurretJammed(((Tank)ce()).getLocTurret2()))) {    UnjamTurretAction uta=new UnjamTurretAction(ce().getId());    attacks.add(uta);    ready();  }}  }
class C{  public void removeFromActiveList(DownloadInfoRunnable downloadInfoRunnable){  mActiveList.remove(downloadInfoRunnable);}  }
class C{  public void evenMore(int i,int j){  if (true)   System.out.println("True");}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public final boolean isHeartbeatActive(){  return _isHeartbeatActive;}  }
class C{  public Bindings add(String property,JComboBox<String> combo,int defaultValue){  registerPropertyChangeListener(combo);  return add(new JComboBoxBinding(property,combo,defaultValue));}  }
class C{  public void checkinConnectionOnError(DBConnectionWrapper conn){  conn.setCurrentStatement(null);  conn.close();synchronized (this) {    for (int i=0; i < this.connections.size(); i++) {      if (conn == this.connections.get(i)) {        logger.fine("Remove closed connection (" + conn.getAppUser() + ","+ conn.getDb());        this.connections.remove(i);        break;      }    }  }}  }
class C{  @Override public String globalInfo(){  return "Duplicates each multi-labelled example, and assigns one of the labels (only) to each copy; then trains a regular multi-class base classifier.\n" + "At test time, a threshold separates relevant from irrelevant labels using the posterior for each class value (i.e., label).";}  }
class C{  static <T>T[] newArray(T[] reference,int length){  Class<?> type=reference.getClass().getComponentType();  @SuppressWarnings("unchecked") T[] result=(T[])Array.newInstance(type,length);  return result;}  }
class C{  @Override public void abort() throws IOException {  super.abort();}  }
class C{  public TouchlessScrollView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);}  }
class C{  boolean isPotentialDragTarget(){  return isVisibleNow() && !mRemoved && mInputChannel != null && mInputWindowHandle != null;}  }
class C{  public final void expectToken(TokenType tokenType,String message) throws IOException {  if (mCurrentToken.mType != tokenType) {    parseError(message + "(token found " + mCurrentToken.mType+ ")");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT:    return getVersionConstraint();case N4mfPackage.PROJECT_DEPENDENCY__DECLARED_SCOPE:  return getDeclaredScope();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public IntersectionFinderAdder(LineIntersector li){  this.li=li;  interiorIntersections=new ArrayList();}  }
class C{  public static void clearScreen(final float r,final float g,final float b){  Gdx.gl.glClearColor(r,g,b,1f);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);}  }
class C{  private static void localListen() throws IgniteException {  System.out.println();  System.out.println(">>> Local event listener example.");  Ignite ignite=Ignition.ignite();  IgnitePredicate<TaskEvent> lsnr=null;  ignite.events().localListen(lsnr,EVTS_TASK_EXECUTION);  ignite.compute().withName("example-event-task").run(null);  ignite.events().stopLocalListen(lsnr);}  }
class C{  public static FastBitmapDrawable createIconDrawable(Bitmap icon){  FastBitmapDrawable d=new FastBitmapDrawable(icon);  d.setFilterBitmap(true);  resizeIconDrawable(d);  return d;}  }
class C{  public void testDelete(){  File file=FileTesting.createFile();  FileBuffer buffer=FileBuffer.allocate(file,16);  buffer.writeLong(10).writeLong(11).flip();  assertEquals(buffer.readLong(),10);  assertEquals(buffer.readLong(),11);  assertTrue(Files.exists(file.toPath()));  buffer.delete();  assertFalse(Files.exists(file.toPath()));}  }
class C{  public View addProperty(String name,View view){  properties.put(name,new ViewProperty(name,view));  return this;}  }
class C{  public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  protected int addHeaderToOutput(byte[] msg,jmri.jmrix.AbstractMRMessage m){  if (log.isDebugEnabled()) {    log.debug("Appending '<' to start of outgoing message. msg length = {}",msg.length);  }  msg[0]=(byte)'<';  return 1;}  }
class C{  public static GraphFromAgentContainerSynchronizer synchronize(final IScope scope,final IContainer popVertices,final IContainer popEdges,final IGraph graph){  final GraphFromAgentContainerSynchronizer res=new GraphFromAgentContainerSynchronizer(scope,popVertices,popEdges,graph);  if (res.getEdgesPopulation() != null) {    res.getEdgesPopulation().addListener(res);  }  if (res.getVerticesPopulation() != null) {    res.getVerticesPopulation().addListener(res);  }  return res;}  }
class C{  private void saveBitmap(Bitmap currentBitmap,int frameNum){  if (mRootFolder == null) {    File filesDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);    String pictureFolderName=getContext().getString(R.string.app_name);    mRootFolder=new File(filesDir,pictureFolderName);    if (!mRootFolder.exists()) {      mRootFolder.mkdirs();    }    MediaScannerConnection.scanFile(getContext(),new String[]{mRootFolder.getAbsolutePath()},null,null);  }  try {    File filePicture=new File(mRootFolder,getName() + frameNum + ".png");    filePicture.setWritable(true);    FileOutputStream fos=new FileOutputStream(filePicture);    currentBitmap.compress(Bitmap.CompressFormat.PNG,100,fos);    fos.flush();    fos.close();    currentBitmap.recycle();    MediaScannerConnection.scanFile(getContext(),new String[]{filePicture.getAbsolutePath()},null,null);    Log.d("LinearLayoutScreenRec","The file has been recorded as " + filePicture.getName() + " in "+ mRootFolder);  } catch (  FileNotFoundException e) {    Log.e("LinearLayoutScreenRec","Fuck occurs FileNotFoundException",e);  }catch (  IOException e) {    Log.e("LinearLayoutScreenRec","Fuck occurs IOException",e);  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    in.close();  }}  }
class C{  public static ConnectionManager createInstance(Context ctx,RcsServiceControl rcsServiceControl,Set<RcsServiceName> managedServices){  if (sInstance != null) {    return sInstance;  }synchronized (ConnectionManager.class) {    if (sInstance == null) {      if (ctx == null) {        throw new IllegalArgumentException("Context is null");      }      sInstance=new ConnectionManager(ctx,managedServices,rcsServiceControl);    }  }  return sInstance;}  }
class C{  private void saveasPropFile(){  File pfile=new File(sb.dataPath,"DATA/SETTINGS/autosearch.conf");  if (querystack.size() == 0) {    if (pfile.exists()) {      pfile.delete();    }  } else {    try {      Properties prop=new Properties();      for (      String s : querystack) {        prop.put("query" + s.hashCode(),s);      }      OutputStream fileOut=new FileOutputStream(pfile);      prop.store(fileOut,"AutoSearch query list");      fileOut.close();    } catch (    FileNotFoundException ex) {      ConcurrentLog.warn(AutoSearch.class.getName(),"can not create file " + pfile.getAbsolutePath());    }catch (    IOException ex) {      ConcurrentLog.warn(AutoSearch.class.getName(),"IO error writing to file " + pfile.getAbsolutePath());    }  }}  }
class C{  public final static byte[] base64Decode(byte[] data){  if (data == null) {    return null;  }  int tail=data.length;  while (data[tail - 1] == '=') {    tail--;  }  byte dest[]=new byte[tail - data.length / 4];  for (int idx=0; idx < data.length; idx++) {    data[idx]=Base64DecMap[data[idx]];  }  int sidx, didx;  for (sidx=0, didx=0; didx < dest.length - 2; sidx+=4, didx+=3) {    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));    dest[didx + 1]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));    dest[didx + 2]=(byte)(((data[sidx + 2] << 6) & 255) | (data[sidx + 3] & 077));  }  if (didx < dest.length) {    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));  }  if (++didx < dest.length) {    dest[didx]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));  }  return dest;}  }
class C{  public WritableRaster copyData(WritableRaster argbWR){  try {    RenderedImage img=getSource();    ColorModel imgCM=img.getColorModel();    ColorSpace imgCS=imgCM.getColorSpace();    int nImageComponents=imgCS.getNumComponents();    int nProfileComponents=colorSpace.getNumComponents();    if (nImageComponents != nProfileComponents) {      System.err.println("Input image and associated color profile have" + " mismatching number of color components: conversion is not possible");      return argbWR;    }    int w=argbWR.getWidth();    int h=argbWR.getHeight();    int minX=argbWR.getMinX();    int minY=argbWR.getMinY();    WritableRaster srcWR=imgCM.createCompatibleWritableRaster(w,h);    srcWR=srcWR.createWritableTranslatedChild(minX,minY);    img.copyData(srcWR);    if (!(imgCM instanceof ComponentColorModel) || !(img.getSampleModel() instanceof BandedSampleModel) || (imgCM.hasAlpha() && imgCM.isAlphaPremultiplied())) {      ComponentColorModel imgCompCM=new ComponentColorModel(imgCS,imgCM.getComponentSize(),imgCM.hasAlpha(),false,imgCM.getTransparency(),DataBuffer.TYPE_BYTE);      WritableRaster wr=Raster.createBandedRaster(DataBuffer.TYPE_BYTE,argbWR.getWidth(),argbWR.getHeight(),imgCompCM.getNumComponents(),new Point(0,0));      BufferedImage imgComp=new BufferedImage(imgCompCM,wr,imgCompCM.isAlphaPremultiplied(),null);      BufferedImage srcImg=new BufferedImage(imgCM,srcWR.createWritableTranslatedChild(0,0),imgCM.isAlphaPremultiplied(),null);      Graphics2D g=imgComp.createGraphics();      g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);      g.drawImage(srcImg,0,0,null);      img=imgComp;      imgCM=imgCompCM;      srcWR=wr.createWritableTranslatedChild(minX,minY);    }    ComponentColorModel newCM=new ComponentColorModel(colorSpace,imgCM.getComponentSize(),false,false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);    DataBufferByte data=(DataBufferByte)srcWR.getDataBuffer();    srcWR=Raster.createBandedRaster(data,argbWR.getWidth(),argbWR.getHeight(),argbWR.getWidth(),new int[]{0,1,2},new int[]{0,0,0},new Point(0,0));    BufferedImage newImg=new BufferedImage(newCM,srcWR,newCM.isAlphaPremultiplied(),null);    ComponentColorModel sRGBCompCM=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),new int[]{8,8,8},false,false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);    WritableRaster wr=Raster.createBandedRaster(DataBuffer.TYPE_BYTE,argbWR.getWidth(),argbWR.getHeight(),sRGBCompCM.getNumComponents(),new Point(0,0));    BufferedImage sRGBImage=new BufferedImage(sRGBCompCM,wr,false,null);    ColorConvertOp colorConvertOp=new ColorConvertOp(null);    colorConvertOp.filter(newImg,sRGBImage);    if (imgCM.hasAlpha()) {      DataBufferByte rgbData=(DataBufferByte)wr.getDataBuffer();      byte[][] imgBanks=data.getBankData();      byte[][] rgbBanks=rgbData.getBankData();      byte[][] argbBanks={rgbBanks[0],rgbBanks[1],rgbBanks[2],imgBanks[3]};      DataBufferByte argbData=new DataBufferByte(argbBanks,imgBanks[0].length);      srcWR=Raster.createBandedRaster(argbData,argbWR.getWidth(),argbWR.getHeight(),argbWR.getWidth(),new int[]{0,1,2,3},new int[]{0,0,0,0},new Point(0,0));      sRGBCompCM=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),new int[]{8,8,8,8},true,false,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);      sRGBImage=new BufferedImage(sRGBCompCM,srcWR,false,null);    }    BufferedImage result=new BufferedImage(sRGBCM,argbWR.createWritableTranslatedChild(0,0),false,null);    Graphics2D g=result.createGraphics();    g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);    g.drawImage(sRGBImage,0,0,null);    g.dispose();    return argbWR;  } catch (  Exception e) {    e.printStackTrace();    throw new Error(e.getMessage());  }}  }
class C{  public FileAlreadyExistsException(final Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  public boolean isHasWeeks(){  return hasWeeks;}  }
class C{  public ConfuseStatus(){  super("confuse");}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String description,String fileExtension,PortProvider portProvider){  return makeFileParameterType(parameterHandler,parameterName,description,portProvider,fileExtension);}  }
class C{  protected DataAccessException convertJdbcAccessException(JDBCException ex,SQLExceptionTranslator translator){  return translator.translate("Hibernate operation: " + ex.getMessage(),ex.getSQL(),ex.getSQLException());}  }
class C{  public void testClearBitNegativeInside4(){  String as="-4294967295";  String res="-4294967296";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(res,result.toString());}  }
class C{  MatlabNumericArray(double[] real,double[] imaginary,int[] lengths){  _fromMatlab=true;  _realValues=real;  _imaginaryValues=imaginary;  _isReal=(imaginary == null);  _lengths=lengths;  _arrayType=DoubleArrayType.getInstance(lengths.length);}  }
class C{  public static float mixRestitution(float restitution1,float restitution2){  return restitution1 > restitution2 ? restitution1 : restitution2;}  }
class C{  public static String createBoundary(){  return "--------------------" + Long.toString(System.currentTimeMillis(),16);}  }
class C{  public String valueString(int index) throws Exception {  return value(index);}  }
class C{  public final void unmarkResourceAbsent(Tile tile){  if (tile == null) {    String msg=Logging.getMessage("nullValue.TileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  tile.getLevel().unmarkResourceAbsent(this.getTileNumber(tile));}  }
class C{  public void editPolicy(String policyName) throws IOException, InterruptedException {  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.profile.encryption"))).click();  WebElement enableElement=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.profile.encryption.enable")));  actions.moveToElement(enableElement).click().perform();  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.add.profile.edit.continue")));  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.add.groups.continue.button.xpath")));  WebElement policyNameField=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.name.input.xpath")));  policyNameField.sendKeys(policyName);  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.publish.button.xpath"))).click();  String resultText=driver.findElement(By.id(uiElementMapper.getElement("emm.policy.add.publish.created.msg"))).getText();  if (!resultText.contains("POLICY IS SUCCESSFULLY RE-CONFIGURED.")) {    throw new IllegalStateException("Policy was not updated");  }}  }
class C{  protected boolean shouldSpawnJvm(){  return true;}  }
class C{  public static HashMap<String,String> parseMimeAttributes(StringMap stringMap){  if (stringMap == null || stringMap.empty()) {    return null;  }  HashMap<String,String> messageKeyValue=new HashMap<>();  String origin=stringMap.keys().toString().replace("[","");  origin=origin.replace("]","");  String elements[]=origin.split(";");  if (elements.length < 2) {    return messageKeyValue;  }  messageKeyValue.put(VCARD_KEY_MIME_TYPE,elements[0]);  String[] pairs=elements[1].split(",");  for (  String pair : pairs) {    String[] kv=pair.split("=");    messageKeyValue.put(kv[0].trim(),kv[1]);  }  return messageKeyValue;}  }
class C{  public final synchronized boolean sameSearchId(int id){  return (searchRequest != null) && (searchRequest.searchId == id);}  }
class C{  @Override public void contextDestroyed(ServletContextEvent event){  log("contextDestroyed()");  this.context=null;}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return (columnIndex > 0) && !isReadOnly();}  }
class C{  @Override public JsonObject asGeoJSON(boolean isRoot){  JsonObject json=new JsonObject();  if (isRoot) {    json.add("crs",geoJSONNamedCRS("urn:ogc:def:crs:OGC:1.3:CRS84"));  }  JsonArray features=new JsonArray();  for (  KmlFeature item : mItems) {    JsonObject subJson=item.asGeoJSON(false);    if (item instanceof KmlFolder) {      JsonArray subFeatures=subJson.getAsJsonArray("features");      if (subFeatures != null) {        for (int i=0; i < subFeatures.size(); i++) {          JsonElement j=subFeatures.get(i);          features.add(j);        }      }    } else     if (subJson != null) {      features.add(subJson);    }  }  json.add("features",features);  json.addProperty("type","FeatureCollection");  return json;}  }
class C{  public EventBean adapterForBean(Object theEvent){  EventType eventType=typesPerJavaBean.get(theEvent.getClass());  if (eventType == null) {    eventType=beanEventAdapter.createBeanType(theEvent.getClass().getName(),theEvent.getClass(),false,false,false);  }  return new BeanEventBean(theEvent,eventType);}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  @Override public void previous(Long maxId,Callback<TimelineResult<Tweet>> cb){  createListTimelineRequest(null,decrementMaxId(maxId)).enqueue(new TweetsCallback(cb));}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  public void testSyncCancellation_closesActivityWhenUserInitiatedAndDataModelAvailable(){  mController.init();  mFakeEventBus.post(new SyncCancelRequestedEvent());  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncCanceledEvent());  verify(mMockUi).finish();}  }
class C{  public final double mean(){  long count=0;  double mean=0;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        mean+=fieldxy[z];        count++;      }    }  }  return (count == 0 ? 0 : mean / count);}  }
class C{  public void testmodInversePos2(){  byte aBytes[]={15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={2,122,45,36,100};  int aSign=1;  int mSign=1;  byte rBytes[]={1,-93,40,127,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public Duration toStandardDuration(){  long seconds=getValue();  return new Duration(seconds * DateTimeConstants.MILLIS_PER_SECOND);}  }
class C{  public static void resetState() throws SQLException {  DbConnectionFactory dbConnectionFactory=getDbConnectionFactory();  ReplicationTestUtils.dropDatabase(dbConnectionFactory,DB_NAME);  AuditLogHookUtils.setupAuditLogTables(dbConnectionFactory,DB_NAME,AUDIT_LOG_TABLE_NAME,OUTPUT_OBJECTS_TABLE_NAME,MAP_RED_STATS_TABLE_NAME);}  }
class C{  public byte[] decryptRaw(byte[] baseKey,int usage,byte[] ivec,byte[] ciphertext,int start,int len,byte[] seqNum) throws GeneralSecurityException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  if (debug) {    System.out.println("\nARCFOUR: decryptRaw with usage = " + usage);  }  byte[] klocal=new byte[baseKey.length];  for (int i=0; i <= 15; i++) {    klocal[i]=(byte)(baseKey[i] ^ 0xF0);  }  byte[] salt=new byte[4];  byte[] kcrypt=getHmac(klocal,salt);  byte[] sequenceNum=new byte[4];  System.arraycopy(seqNum,0,sequenceNum,0,sequenceNum.length);  kcrypt=getHmac(kcrypt,sequenceNum);  Cipher cipher=Cipher.getInstance("ARCFOUR");  SecretKeySpec secretKey=new SecretKeySpec(kcrypt,"ARCFOUR");  cipher.init(Cipher.DECRYPT_MODE,secretKey);  byte[] output=cipher.doFinal(ciphertext,start,len);  return output;}  }
class C{  public static void testVerifyPos() throws AssertFailException {  boolean result=false;  byte[] data=BaseEncoding.base16().lowerCase().decode("CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90".toLowerCase());  byte[] sig=BaseEncoding.base16().lowerCase().decode("3044022079BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F817980220294F14E883B3F525B5367756C2A11EF6CF84B730B36C17CB0C56F0AAB2C98589".toLowerCase());  byte[] pub=BaseEncoding.base16().lowerCase().decode("040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40".toLowerCase());  result=NativeSecp256k1.verify(data,sig,pub);  assertEquals(result,true,"testVerifyPos");}  }
class C{  public boolean visitInstruction(ElemTemplateElement elem){  return true;}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  @PublishJmsMessages private void mockMethod(){}  }
class C{  @Override public void moveUp(int i){  super.moveUp(i);  List<Vector3f> controlPoints=jmeMotionPath.getMotionPath().getSpline().getControlPoints();  if (i < 1 || i > controlPoints.size()) {    throw new IndexOutOfBoundsException();  }  Vector3f element=controlPoints.get(i);  Vector3f over_element=controlPoints.get(i - 1);  controlPoints.set(i - 1,element);  controlPoints.set(i,over_element);  jmeMotionPath.getMotionPath().getSpline().setType(jmeMotionPath.getMotionPath().getSpline().getType());  refreshChildren(true);  jmeMotionPath.updateSpline(true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public Executor pool(byte plc) throws IgniteCheckedException {switch (plc) {case P2P_POOL:    return p2pPool;case SYSTEM_POOL:  return sysPool;case PUBLIC_POOL:return pubPool;case MANAGEMENT_POOL:return mgmtPool;case AFFINITY_POOL:return affPool;case UTILITY_CACHE_POOL:assert utilityCachePool != null : "Utility cache pool is not configured.";return utilityCachePool;case MARSH_CACHE_POOL:assert marshCachePool != null : "Marshaller cache pool is not configured.";return marshCachePool;case IGFS_POOL:assert igfsPool != null : "IGFS pool is not configured.";return igfsPool;case IDX_POOL:assert idxPool != null : "Indexing pool is not configured.";return idxPool;default :{assert plc >= 0 : "Negative policy: " + plc;if (isReservedGridIoPolicy(plc)) throw new IgniteCheckedException("Failed to process message with policy of reserved" + " range (0-31), [policy=" + plc + ']');IoPool pool=ioPools[plc];if (pool == null) throw new IgniteCheckedException("Failed to process message because no pool is registered " + "for policy. [policy=" + plc + ']');assert plc == pool.id();Executor ex=pool.executor();if (ex == null) throw new IgniteCheckedException("Failed to process message because corresponding executor " + "is null. [id=" + plc + ']');return ex;}}}  }
class C{  private void testBug71396StatementCheck(Statement testStmt,String query,int expRowCount) throws SQLException {  ResultSet testRS;  testRS=testStmt.executeQuery(query);  assertTrue(testRS.last());  assertEquals(String.format("Wrong number of rows for query '%s'",query),expRowCount,testRS.getRow());  testRS.close();  testStmt.execute(query);  testRS=testStmt.getResultSet();  assertTrue(testRS.last());  assertEquals(String.format("Wrong number of rows for query '%s'",query),expRowCount,testRS.getRow());  testRS.close();}  }
class C{  public Builder<V> valueType(DataType valueType){  this.valueType=valueType;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.326 -0500",hash_original_method="DB40CF4190456B2BE2224926B4D8156A",hash_generated_method="7240BE9063BFF72D528C947ED57FEB0C") public boolean hasNameValue(String name){  return hmap.containsKey(name.toLowerCase());}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  getWorldWindow().getLayers().addLayer(this.airportLayer);  getWorldWindow().getLayers().addLayer(this.aircraftLayer);  statusText.setText("");  PlacemarksMilStd2525DemoActivity.this.startAnimation();}  }
class C{  public void openRealtimeSearcher(){synchronized (this) {    try {      RefCounted<SolrIndexSearcher> holder=uhandler.core.openNewSearcher(true,true);      holder.decref();    } catch (    Exception e) {      SolrException.log(log,"Error opening realtime searcher",e);      return;    }    if (map != null)     map.clear();    if (prevMap != null)     prevMap.clear();    if (prevMap2 != null)     prevMap2.clear();  }}  }
class C{  public synchronized void notifyExceptionFromOutputStream(Throwable e){  pendingExceptionFromOutputStream=e;  notifyAll();}  }
class C{  public void writeFile(String dir){  String filePath=dir + File.separator + mSootClass.toString();  PrintWriter writer;  try {    writer=new PrintWriter(filePath + "_steps.jimple");  } catch (  Exception ex) {    logger.warn("Cannot open file {} ",filePath);    return;  }  writer.printf("class %s { \n",mSootClass.toString());  writer.println("");  logger.info("fields ");  for (  SootField field : mSootClass.getFields()) {    logger.info("field {} ",field);    writer.printf("\t%s %s \n",Modifier.toString(field.getModifiers()),field);  }  logger.info("methods ");  writer.println("");  for (  SootMethod method : mSootClass.getMethods()) {    Body body=method.getActiveBody();    logger.info("====== method {} ======== ",method);    writer.printf("\t%s %s { \n",Modifier.toString(method.getModifiers()),method);    for (    Local local : body.getLocals()) {      logger.info("{}",local);      writer.printf("\t\t%s %s \n",local.getType(),local);    }    writer.println("");    Chain<Unit> units=body.getUnits();    for (    Unit unit : units) {      String unitString;      try {        unitString=unit.toString();      } catch (      Exception ex) {        unitString="***Invalid Statement ";      }      writer.printf("\t\t%s \n",unitString);      logger.info("{} ",unitString);    }    writer.printf("\t} \n");    logger.info("");  }  writer.printf("} \n");  writer.flush();}  }
class C{  @Optional.Method(modid="CoFHAPI|energy") @Override public int extractEnergy(EnumFacing facing,int maxExtract,boolean simulate){  return MetaphaserRF.INSTANCE.extractEnergy(this,facing,maxExtract,simulate,false);}  }
class C{  @Deprecated public synchronized void addPlugin(Plugin plugin){  if (!mPlugins.contains(plugin)) {    mPlugins.add(plugin);  }}  }
class C{  public LineBreakMeasurer(AttributedCharacterIterator text,BreakIterator breakIter,FontRenderContext frc){  if (text.getEndIndex() - text.getBeginIndex() < 1) {    throw new IllegalArgumentException("Text must contain at least one character.");  }  this.breakIter=breakIter;  this.measurer=new TextMeasurer(text,frc);  this.limit=text.getEndIndex();  this.pos=this.start=text.getBeginIndex();  charIter=new CharArrayIterator(measurer.getChars(),this.start);  this.breakIter.setText(charIter);}  }
class C{  public void writeRVV(LocalRegion region,Boolean isRVVTrusted){  if (this.getFlags().contains(DiskRegionFlag.IS_WITH_VERSIONING)) {    getDiskStore().writeRVV(this,region,isRVVTrusted);  }}  }
class C{  public static int px2dp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  @Override public boolean isNamed(){  return (flags & NO_NAME) == 0;}  }
class C{  @Override public void onAddPartition(AddPartitionEvent event) throws MetaException {  try {    Table table=new Table(event.getTable());    Set<ReadEntity> readEntities=new HashSet<>();    Set<WriteEntity> writeEntities=new HashSet<>();    for (    org.apache.hadoop.hive.metastore.api.Partition partition : event.getPartitions()) {      writeEntities.add(new WriteEntity(new Partition(table,partition),WriteType.INSERT));    }    run(readEntities,writeEntities,HiveOperation.THRIFT_ADD_PARTITION);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected void init_actions(){  action_obj=new CUP$Parser$actions(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void $$$setupUI$$$(){  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(7,1,new Insets(0,0,0,0),-1,-1));  commentLabel=new JLabel();  this.$$$loadLabelText$$$(commentLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackDialog.CommentLabel.Smile"));  contentPanel.add(commentLabel,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  privacyLink=new Hyperlink();  this.$$$loadLabelText$$$(privacyLink,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.PrivacyLink"));  contentPanel.add(privacyLink,new GridConstraints(6,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.EmailLabel"));  contentPanel.add(label1,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  email=new JTextField();  contentPanel.add(email,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  commentScrollPane=new JScrollPane();  contentPanel.add(commentScrollPane,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  comment=new JTextArea();  comment.setLineWrap(true);  comment.setWrapStyleWord(true);  commentScrollPane.setViewportView(comment);  thankYouLabel=new WrappingLabel();  thankYouLabel.setText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.ThankYouLabel"));  contentPanel.add(thankYouLabel,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackDialog.HeaderLabel"));  contentPanel.add(label2,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  commentLabel.setLabelFor(comment);  label1.setLabelFor(email);}  }
class C{  public void emitDirect(int taskId,List<Object> tuple,Object messageId){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  public boolean isPingDisabled(){  return (null != healthcheck && !healthcheck.exists());}  }
class C{  private boolean isLink(){  return ((state & LINK_FLAG) == LINK_FLAG);}  }
class C{  public void removeTab(Component comp){  if (tabs.getTabCount() == 0) {    if (firstComp == null || firstComp != comp) {      return;    }    super.remove(firstComp);    firstComp=null;    this.validate();    this.repaint();    return;  }  tabs.remove(comp);  if (tabs.getTabCount() == 1) {    if (firstComp != tabs.getSelectedComponent()) {      firstComp=tabs.getSelectedComponent();    }    tabs.remove(firstComp);    add(firstComp,BorderLayout.CENTER);    super.remove(tabs);  }}  }
class C{  public static void modifySpanAnnotation(AnnotationFS aOldFs,AnnotationFS aNewFs,JCas aJCas){  Feature[] features=getAllFeatures(aOldFs);  for (  Feature f : features) {    if (isLinkOrBasicFeatures(aOldFs,f)) {      continue;    }    setFeatureValue(aNewFs,f,getFeatureValue(aOldFs,f));  }  aJCas.addFsToIndexes(aNewFs);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void close(Connection conn) throws SQLException {  if (conn != null) {    conn.close();  }}  }
class C{  public TollAnalyzer(final String eventsFile,final double simulationEndTime,final int noOfTimeBins,final String shapeFile,final Network network){  this(eventsFile,simulationEndTime,noOfTimeBins,shapeFile,network,null);}  }
class C{  private void genId(){  setId(Long.valueOf(System.currentTimeMillis() % Long.MAX_VALUE).toString());}  }
class C{  public NSGAII(Problem problem,NondominatedSortingPopulation population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization){  super(problem,population,archive,initialization);  this.variation=variation;  this.selection=selection;}  }
class C{  public Grammar(int size){  this(new int[size]);}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    if (pathSegs != null) {      pathSegs.invalidate();    }    if (normalizedPathSegs != null) {      normalizedPathSegs.invalidate();    }  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public HttpSessionsSite(ExtensionHttpSessions extension,String site){  super();  this.extension=extension;  this.site=site;  this.sessions=new LinkedHashSet<>();  this.model=new HttpSessionsTableModel(this);  this.activeSession=null;}  }
class C{  public void buildDistanceTables(Geometry rebuildZone){  LOG.info("Finding distances from transit stops to street vertices.");  if (rebuildZone != null) {    LOG.info("Selectively finding distances for only those stops potentially affected by scenario application.");  }  LambdaCounter buildCounter=new LambdaCounter(LOG,getStopCount(),1000,"Computed distances to street vertices from {} of {} transit stops.");  stopToVertexDistanceTables=IntStream.range(0,getStopCount()).parallel().mapToObj(null).collect(Collectors.toList());  buildCounter.done();}  }
class C{  public Timer(String name){  this.name=name;  duration=0;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  protected void NCName(){  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementempty.class,args);}  }
class C{  protected void sequence_RequiredRuntimeLibraries(ISerializationContext context,RequiredRuntimeLibraries semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @TargetApi(21) public static TVShowDetailsFragment newInstance(TVShowListFragment.ViewHolder vh){  TVShowDetailsFragment fragment=new TVShowDetailsFragment();  Bundle args=new Bundle();  args.putInt(BUNDLE_KEY_TVSHOWID,vh.tvshowId);  args.putInt(BUNDLE_KEY_EPISODE,vh.episode);  args.putString(BUNDLE_KEY_GENRES,vh.genres);  args.putString(BUNDLE_KEY_PLOT,vh.plot);  args.putString(BUNDLE_KEY_PREMIERED,vh.premiered);  args.putDouble(BUNDLE_KEY_RATING,vh.rating);  args.putString(BUNDLE_KEY_STUDIO,vh.studio);  args.putString(BUNDLE_KEY_TITLE,vh.tvshowTitle);  args.putInt(BUNDLE_KEY_WATCHEDEPISODES,vh.watchedEpisodes);  if (Utils.isLollipopOrLater()) {    args.putString(POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void process(V tuple){  if (!flag) {    low=tuple;    flag=true;  } else   if (low.doubleValue() > tuple.doubleValue()) {    low=tuple;  }}  }
class C{  @Override public String findNumBinsTipText(){  return "Ignored.";}  }
class C{  public float seconds(){  return ((float)millis()) / UNIT;}  }
class C{  public static <DTO>List<DTO> createListDtoFromJson(String json,Class<DTO> dtoInterface){  return DtoFactory.getInstance().createListDtoFromJson(json,dtoInterface);}  }
class C{  public LoadFactor60ScoringFunctionFactory(ScoringFunctionFactory delegate,EventsManager events,ScoreTracker scoreTracker,Scenario scenario){  this.delegate=delegate;  this.events=events;  this.scoreTracker=scoreTracker;  this.scenario=scenario;}  }
class C{  public PerFieldAnalyzerWrapper(Analyzer defaultAnalyzer,Map<String,Analyzer> fieldAnalyzers){  super(PER_FIELD_REUSE_STRATEGY);  this.defaultAnalyzer=defaultAnalyzer;  this.fieldAnalyzers=(fieldAnalyzers != null) ? fieldAnalyzers : Collections.<String,Analyzer>emptyMap();}  }
class C{  protected void readImage(){  ix=readShort();  iy=readShort();  iw=readShort();  ih=readShort();  int packed=read();  lctFlag=(packed & 0x80) != 0;  interlace=(packed & 0x40) != 0;  lctSize=2 << (packed & 7);  if (lctFlag) {    lct=readColorTable(lctSize);    act=lct;  } else {    act=gct;    if (bgIndex == transIndex)     bgColor=0;  }  int save=0;  if (transparency) {    save=act[transIndex];    act[transIndex]=0;  }  if (act == null) {    status=STATUS_FORMAT_ERROR;  }  if (err())   return;  decodeImageData();  skip();  if (err())   return;  frameCount++;  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);  setPixels();  frames.add(new GifFrame(image,delay));  if (transparency) {    act[transIndex]=save;  }  resetFrame();}  }
class C{  private void returnJson500(RequestAndResponse requestAndResponse,String text) throws ServletException, IOException {  requestAndResponse.setResponseContentTypeJson();  requestAndResponse.response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  requestAndResponse.print("{\"errors\":[" + JsonBuilder.quote(text) + "] }");}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  public static Drawable generateRoundBorderDrawable(Resources res,float radii,int pressColor,int defaultColor){  radii=dpToPx(res,radii);  float[] outRadii=new float[]{radii,radii,radii,radii,radii,radii,radii,radii};  Shape roundRectShape=new RoundRectShape(outRadii,null,null);  ShapeDrawable shopDrawablePress=new ShapeDrawable(roundRectShape);  shopDrawablePress.getPaint().setColor(pressColor);  Shape roundRectShapeNormal=new RoundRectShape(outRadii,null,null);  ShapeDrawable shopDrawableNormal=new ShapeDrawable(roundRectShapeNormal);  shopDrawableNormal.getPaint().setColor(defaultColor);  StateListDrawable bgStateDrawable=new StateListDrawable();  bgStateDrawable.addState(new int[]{android.R.attr.state_pressed},shopDrawablePress);  bgStateDrawable.addState(new int[]{},shopDrawableNormal);  return bgStateDrawable;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  protected SingleAssociationEnd_Impl(){  super();}  }
class C{  protected static DHPublicKeyParameters decodeDHPublicKey(byte[] encoded){  BigInteger i=new BigInteger(encoded);  return new DHPublicKeyParameters(i,DH_GROUP_PARAMETERS);}  }
class C{  public DrawerBuilder withScrollToTopAfterClick(boolean scrollToTopAfterClick){  this.mScrollToTopAfterClick=scrollToTopAfterClick;  return this;}  }
class C{  public synchronized void notifyWaitingThread(final HostConnectionPool hostPool){  WaitingThread waitingThread=null;  if (hostPool.waitingThreads.size() > 0) {    if (LOG.isDebugEnabled()) {      LOG.debug("Notifying thread waiting on host pool, hostConfig=" + hostPool.hostConfiguration);    }    waitingThread=(WaitingThread)hostPool.waitingThreads.removeFirst();    waitingThreads.remove(waitingThread);  } else   if (waitingThreads.size() > 0) {    if (LOG.isDebugEnabled()) {      LOG.debug("No-one waiting on host pool, notifying next waiting thread.");    }    waitingThread=(WaitingThread)waitingThreads.removeFirst();    waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);  } else   if (LOG.isDebugEnabled()) {    LOG.debug("Notifying no-one, there are no waiting threads");  }  if (waitingThread != null) {    waitingThread.interruptedByConnectionPool=true;    waitingThread.thread.interrupt();  }}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public void removeSetting(final int index){  Assert.isTrue(index >= 0);  fSettings.remove(index);}  }
class C{  public void addProgressListener(ChartProgressListener listener){  this.progressListeners.add(ChartProgressListener.class,listener);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_erased.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      rows=input.getNumberRows();      cols=input.getNumberColumns();      double[] data;      for (row=0; row < rows; row++) {        data=input.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,noData));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,noData));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        for (part=0; part < numParts; part++) {          if (partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      if (numCellsToWrite > 0) {        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void execAndCheckOutput(ProcessBuilder builder,String expectedOut,String expectedErr) throws Exception {  Process process=builder.start();  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream()));    Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream()));    assertEquals(expectedOut,outFuture.get(10,TimeUnit.SECONDS));    assertEquals(expectedErr,errFuture.get(10,TimeUnit.SECONDS));  }  finally {    executorService.shutdown();    process.waitFor();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void sinhAndCosh(double value,DoubleWrapper hsine,DoubleWrapper hcosine){  if (USE_JDK_MATH) {    hsine.value=STRICT_MATH ? StrictMath.sinh(value) : Math.sinh(value);    hcosine.value=STRICT_MATH ? StrictMath.cosh(value) : Math.cosh(value);    return;  }  double h;  if (value < 0.0) {    value=-value;    h=-0.5;  } else {    h=0.5;  }  if (value < LOG_TWO_POW_27) {    if (value < TWO_POW_N28) {      hsine.value=(h < 0.0) ? -value : value;    } else {      double t=FastMath.expm1(value);      hsine.value=h * (t + t / (t + 1.0));    }    if (value < TWO_POW_N27) {      hcosine.value=1;    } else {      double t=FastMath.exp(value);      hcosine.value=0.5 * (t + 1 / t);    }  } else   if (value < 22.0) {    double t=FastMath.expm1(value);    hsine.value=h * (t + t / (t + 1.0));    hcosine.value=0.5 * (t + 1.0);  } else {    if (value < LOG_DOUBLE_MAX_VALUE) {      hsine.value=h * FastMath.exp(value);    } else {      double t=FastMath.exp(value * 0.5);      hsine.value=(h * t) * t;    }    hcosine.value=Math.abs(hsine.value);  }}  }
class C{  public static SpannableString typeface(Context context,int strResId){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(context.getString(strResId),sDefaultTypefaceCollection,Typeface.NORMAL);}  }
class C{  @Override public void onAccept(){}  }
class C{  public int findReferencePosition(int offset,boolean danglingElse,boolean matchBrace,boolean matchParen,boolean matchCase,boolean throwsClause){  fIndent=0;  fAlign=JavaHeuristicScanner.NOT_FOUND;  fPosition=offset;  if (matchBrace) {    if (skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE)) {      try {        int lineOffset=fDocument.getLineOffset(fLine);        if (lineOffset <= fPosition && fDocument.get(lineOffset,fPosition - lineOffset).trim().length() == 0)         return fPosition;      } catch (      BadLocationException e) {      }      int pos=skipToStatementStart(true,true);      fIndent=0;      return pos;    } else {      int pos=findReferencePosition(offset,danglingElse,false,matchParen,matchCase,throwsClause);      fIndent--;      return pos;    }  }  if (matchParen) {    if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN)) {      fIndent=fPrefs.prefContinuationIndent;      return fPosition;    } else {      int pos=findReferencePosition(offset,danglingElse,matchBrace,false,matchCase,throwsClause);      fIndent--;      return pos;    }  }  if (matchCase) {    return matchCaseAlignment();  }  nextToken();switch (fToken) {case Symbols.TokenGREATERTHAN:case Symbols.TokenRBRACE:    int pos=fPosition;  if (!skipScope())   fPosition=pos;return skipToStatementStart(danglingElse,false);case Symbols.TokenSEMICOLON:pos=fPosition;if (isSemicolonPartOfForStatement()) {fIndent=fPrefs.prefContinuationIndent;return fPosition;} else {fPosition=pos;if (isTryWithResources()) {fIndent=fPrefs.prefContinuationIndent;return fPosition;} else {fPosition=pos;return skipToStatementStart(danglingElse,false);}}case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:return handleScopeIntroduction(offset + 1);case Symbols.TokenEOF:return JavaHeuristicScanner.NOT_FOUND;case Symbols.TokenEQUAL:return handleEqual();case Symbols.TokenCOLON:fIndent=fPrefs.prefCaseBlockIndent;return fPosition;case Symbols.TokenQUESTIONMARK:if (fPrefs.prefTernaryDeepAlign) {setFirstElementAlignment(fPosition,offset + 1);return fPosition;} else {fIndent=fPrefs.prefTernaryIndent;return fPosition;}case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenELSE:fIndent=fPrefs.prefSimpleIndent;return fPosition;case Symbols.TokenTRY:return skipToStatementStart(danglingElse,false);case Symbols.TokenRBRACKET:fIndent=fPrefs.prefContinuationIndent;return fPosition;case Symbols.TokenRPAREN:if (throwsClause) {fIndent=fPrefs.prefContinuationIndent;return fPosition;}int line=fLine;if (skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN)) {int scope=fPosition;nextToken();if (fToken == Symbols.TokenIF || fToken == Symbols.TokenWHILE || fToken == Symbols.TokenFOR) {fIndent=fPrefs.prefSimpleIndent;return fPosition;}fPosition=scope;if (looksLikeMethodDecl()) {return skipToStatementStart(danglingElse,false);}if (fToken == Symbols.TokenCATCH) {return skipToStatementStart(danglingElse,false);}fPosition=scope;if (looksLikeAnonymousTypeDecl()) {return skipToStatementStart(danglingElse,false);}fPosition=scope;if (looksLikeAnnotation()) {return skipToStatementStart(danglingElse,false);}}fPosition=offset;fLine=line;return skipToPreviousListItemOrListStart();case Symbols.TokenRETURN:fIndent=fPrefs.prefContinuationIndent;return fPosition;case Symbols.TokenPLUS:if (isStringContinuation(fPosition)) {try {if (isSecondLineOfStringContinuation(offset)) {fAlign=JavaHeuristicScanner.NOT_FOUND;fIndent=fPrefs.prefContinuationIndent;} else {int previousLineOffset=fDocument.getLineOffset(fDocument.getLineOfOffset(offset) - 1);fAlign=fScanner.findNonWhitespaceForwardInAnyPartition(previousLineOffset,JavaHeuristicScanner.UNBOUND);}} catch (BadLocationException e) {Log.error(JavaIndenter.class,e);}return fPosition;}fPosition=offset;return skipToPreviousListItemOrListStart();case Symbols.TokenCOMMA:default :return skipToPreviousListItemOrListStart();}}  }
class C{  public boolean isDrawerOpen(){  return mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START);}  }
class C{  public Builder withOpenSettingsButton(@StringRes int buttonTextResourceId){  return withOpenSettingsButton(rootView.getContext().getString(buttonTextResourceId));}  }
class C{  public static boolean withinGetter(Tree.Declaration decl){  return withinGetter(decl.getDeclarationModel());}  }
class C{  public Translation translate(Sentence sentence){  LOG.info("Input {}: {}",sentence.id(),sentence.fullSource());  if (sentence.target() != null)   LOG.info("Input {}: Constraining to target sentence '{}'",sentence.id(),sentence.target());  if (sentence.isEmpty()) {    LOG.info("Translation {}: Translation took 0 seconds",sentence.id());    return new Translation(sentence,null,featureFunctions,joshuaConfiguration);  }  long startTime=System.currentTimeMillis();  int numGrammars=allGrammars.size();  Grammar[] grammars=new Grammar[numGrammars];  for (int i=0; i < allGrammars.size(); i++)   grammars[i]=allGrammars.get(i);  if (joshuaConfiguration.segment_oovs)   sentence.segmentOOVs(grammars);  HyperGraph hypergraph=null;  try {    if (joshuaConfiguration.search_algorithm.equals("stack")) {      Stacks stacks=new Stacks(sentence,this.featureFunctions,grammars,joshuaConfiguration);      hypergraph=stacks.search();    } else {      Chart chart=new Chart(sentence,this.featureFunctions,grammars,joshuaConfiguration.goal_symbol,joshuaConfiguration);      hypergraph=(joshuaConfiguration.use_dot_chart) ? chart.expand() : chart.expandSansDotChart();    }  } catch (  java.lang.OutOfMemoryError e) {    LOG.error("Input {}: out of memory",sentence.id());    hypergraph=null;  }  float seconds=(System.currentTimeMillis() - startTime) / 1000.0f;  LOG.info("Input {}: Translation took {} seconds",sentence.id(),seconds);  LOG.info("Input {}: Memory used is {} MB",sentence.id(),(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000.0);  if (!joshuaConfiguration.parse || hypergraph == null) {    return new Translation(sentence,hypergraph,featureFunctions,joshuaConfiguration);  }  Grammar newGrammar=getGrammarFromHyperGraph(joshuaConfiguration.goal_symbol,hypergraph);  newGrammar.sortGrammar(this.featureFunctions);  long sortTime=System.currentTimeMillis();  LOG.info("Sentence {}: New grammar has {} rules.",sentence.id(),newGrammar.getNumRules());  Grammar[] newGrammarArray=new Grammar[]{newGrammar};  Sentence targetSentence=new Sentence(sentence.target(),sentence.id(),joshuaConfiguration);  Chart chart=new Chart(targetSentence,featureFunctions,newGrammarArray,"GOAL",joshuaConfiguration);  int goalSymbol=GrammarBuilderWalkerFunction.goalSymbol(hypergraph);  String goalSymbolString=Vocabulary.word(goalSymbol);  LOG.info("Sentence {}: goal symbol is {} ({}).",sentence.id(),goalSymbolString,goalSymbol);  chart.setGoalSymbolID(goalSymbol);  HyperGraph englishParse=chart.expand();  long secondParseTime=System.currentTimeMillis();  LOG.info("Sentence {}: Finished second chart expansion ({} seconds).",sentence.id(),(secondParseTime - sortTime) / 1000);  LOG.info("Sentence {} total time: {} seconds.\n",sentence.id(),(secondParseTime - startTime) / 1000);  LOG.info("Memory used after sentence {} is {} MB",sentence.id(),(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1000000.0);  return new Translation(sentence,englishParse,featureFunctions,joshuaConfiguration);}  }
class C{  public <T extends Fragment>T into(T fragment){  fragment.setArguments(get());  return fragment;}  }
class C{  protected void addIntermediateNode(BTreeNode curNode,List<BTreeNode[]> childNodeGroups,BTreeNode[] currentGroup,List<List<IndexKey>> interNSKeyList,int numberOfInternalNode){  int groupCounter;  int remainder;  int nHigh=numberOfInternalNode;  boolean bRootBuilt=false;  remainder=nLeaf % (maxNumberOfEntriesInNonLeafNodes);  List<IndexKey> interNSKeys=null;  while (nHigh > 1 || !bRootBuilt) {    List<BTreeNode[]> internalNodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.CONSTANT_SIZE_TEN);    List<List<IndexKey>> interNSKeyTmpList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.CONSTANT_SIZE_TEN);    numberOfInternalNode=0;    for (int i=0; i < nHigh; i++) {      curNode=new BTreeNonLeafNode();      groupCounter=i % (maxNumberOfEntriesInNonLeafNodes);      if (groupCounter == 0) {        currentGroup=new BTreeNonLeafNode[maxNumberOfEntriesInNonLeafNodes];        internalNodeGroups.add(currentGroup);        numberOfInternalNode++;        interNSKeys=new ArrayList<IndexKey>(CarbonCommonConstants.CONSTANT_SIZE_TEN);        interNSKeyTmpList.add(interNSKeys);      }      if (null != currentGroup) {        currentGroup[groupCounter]=curNode;      }      int nNodes;      if (i == nHigh - 1 && remainder != 0) {        nNodes=remainder;      } else {        nNodes=maxNumberOfEntriesInNonLeafNodes;      }      curNode.setChildren(childNodeGroups.get(i));      for (int j=0; j < nNodes; j++) {        curNode.setKey(interNSKeyList.get(i).get(j));        if (j == 0 && null != interNSKeys) {          interNSKeys.add(interNSKeyList.get(i).get(j));        }      }    }    if (nHigh == 1) {      bRootBuilt=true;    }    remainder=nHigh % (maxNumberOfEntriesInNonLeafNodes);    nHigh=numberOfInternalNode;    childNodeGroups=internalNodeGroups;    interNSKeyList=interNSKeyTmpList;  }  root=curNode;}  }
class C{  public void updateClusterGroupsFromGossiper(){  for (  Entry<InetAddress,EndpointState> entry : Gossiper.instance.getEndpointStates()) {    DiscoveryNodeStatus status=(entry.getValue().isAlive()) ? DiscoveryNode.DiscoveryNodeStatus.ALIVE : DiscoveryNode.DiscoveryNodeStatus.DEAD;    if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(entry.getKey()).equals(localDc)) {      VersionedValue vv=entry.getValue().getApplicationState(ApplicationState.HOST_ID);      if (vv != null) {        String hostId=vv.value;        DiscoveryNode dn=clusterGroup.get(hostId);        if (dn == null) {          Map<String,String> attrs=Maps.newHashMap();          attrs.put("data","true");          attrs.put("master","true");          attrs.put("data_center",localDc);          attrs.put("rack",DatabaseDescriptor.getEndpointSnitch().getRack(entry.getKey()));          InetAddress rpc_address=com.google.common.net.InetAddresses.forString(entry.getValue().getApplicationState(ApplicationState.RPC_ADDRESS).value);          dn=new DiscoveryNode(buildNodeName(entry.getKey()),hostId.toString(),new InetSocketTransportAddress(rpc_address,publishPort()),attrs,version);          dn.status(status);          if (localAddress.equals(entry.getKey())) {            logger.debug("Update local node host_id={} status={} timestamp={}",entry.getKey().toString(),dn.getId(),dn.getName(),entry.getValue().isAlive(),entry.getValue().getUpdateTimestamp());            clusterGroup.remove(this.localNode.id());            this.localNode=dn;          } else {            logger.debug("New node addr_ip={} node_name={} host_id={} status={} timestamp={}",entry.getKey().toString(),dn.getId(),dn.getName(),entry.getValue().isAlive(),entry.getValue().getUpdateTimestamp());          }          clusterGroup.put(dn.getId(),dn);          if (entry.getValue().getApplicationState(ApplicationState.X1) != null || entry.getValue().getApplicationState(ApplicationState.X2) != null) {            SystemKeyspace.updatePeerInfo(entry.getKey(),"workload","elasticsearch");          }        } else {          if (!dn.getStatus().equals(status)) {            dn.status(status);          }        }      }    }  }}  }
class C{  @Override public boolean updatesAreDetected(int type){  debugCodeCall("updatesAreDetected",type);  return false;}  }
class C{  protected int findAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  MultistepExprHolder head=null;  MultistepExprHolder tail=null;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  int stepCount=countSteps(lpi);  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (null == head) {          head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);          tail=head;          numPathsFound++;        }        tail.m_next=new MultistepExprHolder(owner2,stepCount,null);        tail=tail.m_next;        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && isGlobal) {    head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);    numPathsFound++;  }  if (null != head) {    ElemTemplateElement root=isGlobal ? psuedoVarRecipient : findCommonAncestor(head);    LocPathIterator sharedIter=(LocPathIterator)head.m_exprOwner.getExpression();    ElemVariable var=createPseudoVarDecl(root,sharedIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    QName uniquePseudoVarName=var.getName();    while (null != head) {      ExpressionOwner owner=head.m_exprOwner;      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(owner.getExpression());      changeToVarRef(uniquePseudoVarName,owner,paths,root);      head=head.m_next;    }    paths.setElementAt(var.getSelect(),firstOccuranceIndex);  }  return numPathsFound;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  static void testAccess1(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible1");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed");    cnfe.printStackTrace();    return;  }  Object obj;  try {    obj=altClass.newInstance();    System.err.println("ERROR: Inaccessible1 was accessible");  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.out.println("Got expected access exception #1");    return;  }}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static double incompleteBeta(double aa,double bb,double xx){  double a, b, t, x, xc, w, y;  boolean flag;  if (aa <= 0.0 || bb <= 0.0)   throw new ArithmeticException("ibeta: Domain error!");  if ((xx <= 0.0) || (xx >= 1.0)) {    if (xx == 0.0)     return 0.0;    if (xx == 1.0)     return 1.0;    throw new ArithmeticException("ibeta: Domain error!");  }  flag=false;  if ((bb * xx) <= 1.0 && xx <= 0.95) {    t=powerSeries(aa,bb,xx);    return t;  }  w=1.0 - xx;  if (xx > (aa / (aa + bb))) {    flag=true;    a=bb;    b=aa;    xc=xx;    x=w;  } else {    a=aa;    b=bb;    xc=w;    x=xx;  }  if (flag && (b * x) <= 1.0 && x <= 0.95) {    t=powerSeries(a,b,x);    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;    return t;  }  y=x * (a + b - 2.0) - (a - 1.0);  if (y < 0.0)   w=incompleteBetaFraction1(a,b,x); else   w=incompleteBetaFraction2(a,b,x) / xc;  y=a * Math.log(x);  t=b * Math.log(xc);  if ((a + b) < MAXGAM && Math.abs(y) < MAXLOG && Math.abs(t) < MAXLOG) {    t=Math.pow(xc,b);    t*=Math.pow(x,a);    t/=a;    t*=w;    t*=gamma(a + b) / (gamma(a) * gamma(b));    if (flag) {      if (t <= MACHEP)       t=1.0 - MACHEP; else       t=1.0 - t;    }    return t;  }  y+=t + lnGamma(a + b) - lnGamma(a) - lnGamma(b);  y+=Math.log(w / a);  if (y < MINLOG)   t=0.0; else   t=Math.exp(y);  if (flag) {    if (t <= MACHEP)     t=1.0 - MACHEP; else     t=1.0 - t;  }  return t;}  }
class C{  public void finer(String msg){  log(Level.FINER,msg);}  }
class C{  public LinkedList(){}  }
class C{  public SkinFileChooserUI(JFileChooser filechooser){  super(filechooser);}  }
class C{  public synchronized void resetAddressItemList(){  addressItemList=null;}  }
class C{  private void loadMap(String extension,String mimeType){  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {    mimeTypeToExtensionMap.put(mimeType,extension);  }  extensionToMimeTypeMap.put(extension,mimeType);  if (isImageType(mimeType)) {    imageMimeTypeSet.add(mimeType);  }}  }
class C{  static String instructionToString(IR ir,Instruction instr){  StringBuilder sb=new StringBuilder();  sb.append(instr.getBytecodeIndex()).append("\t").append(instr.isPEI() ? "E" : " ").append(instr.isGCPoint() ? "G " : "  ");  if (instr.operator() == LABEL) {    sb.append("LABEL").append(Label.getBlock(instr).block.getNumber());    if (Label.getBlock(instr).block.getInfrequent()) {      sb.append(" (Infrequent)");    }  } else {    IREnumeration.AllDefsEnum defs=new IREnumeration.AllDefsEnum(ir,instr);    IREnumeration.AllUsesEnum uses=new IREnumeration.AllUsesEnum(ir,instr);    sb.append(instr.operator()).append("\n\t     defs: ");    while (defs.hasMoreElements()) {      sb.append(defs.nextElement().toString());      if (defs.hasMoreElements()) {        sb.append(", ");      }    }    sb.append("\n\t     uses: ");    while (uses.hasMoreElements()) {      sb.append(uses.nextElement().toString());      if (uses.hasMoreElements()) {        sb.append(", ");      }    }  }  sb.append("\n");  return sb.toString();}  }
class C{  protected void createChildrenLazily(SourcePrinter out,WidgetCreatorContext context){  out.println(context.getWidget() + ".addAttachHandler(new " + Handler.class.getCanonicalName()+ "(){");  out.println("private boolean childrenCreated = false;");  out.println("public void onAttachOrDetach(" + AttachEvent.class.getCanonicalName() + " event){");  out.println("if (!childrenCreated && event.isAttached()){");  createPostProcessingScope();  createChildrenWidgets(out,context);  commitPostProcessing(out);  out.println("childrenCreated = true;");  out.println("}");  out.println("}");  out.println("});");}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements,int length){switch (length) {case 0:    return of();case 1:  @SuppressWarnings("unchecked") ImmutableList<E> list=new SingletonImmutableList<E>((E)elements[0]);return list;default :if (length < elements.length) {elements=arraysCopyOf(elements,length);}return new RegularImmutableList<E>(elements);}}  }
class C{  protected void checkIndex(int index){  if (index < 0 || index >= size)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at index="+ index);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ChannelInfo) {    ChannelInfo other=(ChannelInfo)o;    if (this.channelId != null) {      if (this.channelId.equals(other.channelId))       return true;    } else     if (this.channelName != null && this.channelNumber != null) {      return this.channelName.equals(other.channelName) && this.channelNumber.equals(other.channelNumber) && this.majorNumber == other.majorNumber && this.minorNumber == other.minorNumber;    }    Log.d(Util.T,"Could not compare channel values, no data to compare against");    Log.d(Util.T,"This channel info: \n" + this.rawData.toString());    Log.d(Util.T,"Other channel info: \n" + other.rawData.toString());    return false;  }  return super.equals(o);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private View findChildUnder(float x,float y){  return findChildUnder(this,x,y);}  }
class C{  public QRBase(){}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.646 -0500",hash_original_method="439F40B8AE0DFA06D4CE3EB843023A82",hash_generated_method="EAF5CD1C7D4E570AFF0CBE3F9A1D9217") public void switchToHeader(Header header){  if (mCurHeader == header) {    getFragmentManager().popBackStack(BACK_STACK_PREFS,FragmentManager.POP_BACK_STACK_INCLUSIVE);  } else {    int direction=mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader);    switchToHeaderInner(header.fragment,header.fragmentArguments,direction);    setSelectedHeader(header);  }}  }
class C{  protected boolean isOnlyReceipt(){  super.setIsOnlyReceipt(pickcombo.getSelectedIndex() == 2);  return super.isOnlyReceipt();}  }
class C{  public SuggestRequest routing(String... routings){  this.routing=Strings.arrayToCommaDelimitedString(routings);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void createFieldEditors(){  Composite fep=getFieldEditorParent();  addField(new BooleanFieldEditor(PreferenceConstants.CRYPTO_VERINICE_SSL_SECURITY_ENABLED,Messages.getString("CryptoPreferencePage.0"),fep));  addField(new BooleanFieldEditor(PreferenceConstants.CRYPTO_SERVER_AUTHENTICATION_VIA_CERTIFICATE_ENABLED,Messages.getString("CryptoPreferencePage.1"),fep));  if (isPKCS11Supported()) {    RadioGroupFieldEditor trustStoreSourceRadioField=new RadioGroupFieldEditor(PreferenceConstants.CRYPTO_TRUSTSTORE_SOURCE,Messages.getString("CryptoPreferencePage.2"),1,new String[][]{{Messages.getString("CryptoPreferencePage.3"),PreferenceConstants.CRYPTO_TRUSTSTORE_SOURCE_FROM_FILE},{Messages.getString("CryptoPreferencePage.4"),PreferenceConstants.CRYPTO_TRUSTSTORE_SOURCE_FROM_PKCS11_LIBRARY}},fep);    addField(trustStoreSourceRadioField);  } else {    RadioGroupFieldEditor trustStoreSourceRadioFieldWin=new RadioGroupFieldEditor(PreferenceConstants.CRYPTO_TRUSTSTORE_SOURCE,Messages.getString("CryptoPreferencePage.2"),1,new String[][]{{Messages.getString("CryptoPreferencePage.3"),PreferenceConstants.CRYPTO_TRUSTSTORE_SOURCE_FROM_FILE}},fep);    addField(trustStoreSourceRadioFieldWin);  }  if (isPKCS11Supported()) {    RadioGroupFieldEditor keyStoreSourceRadioField=new RadioGroupFieldEditor(PreferenceConstants.CRYPTO_KEYSTORE_SOURCE,Messages.getString("CryptoPreferencePage.5"),1,new String[][]{{Messages.getString("CryptoPreferencePage.6"),PreferenceConstants.CRYPTO_KEYSTORE_SOURCE_NONE},{Messages.getString("CryptoPreferencePage.7"),PreferenceConstants.CRYPTO_KEYSTORE_SOURCE_FROM_FILE},{Messages.getString("CryptoPreferencePage.8"),PreferenceConstants.CRYPTO_KEYSTORE_SOURCE_FROM_PKCS11_LIBRARY}},fep);    addField(keyStoreSourceRadioField);  } else {    RadioGroupFieldEditor keyStoreSourceRadioFieldWin=new RadioGroupFieldEditor(PreferenceConstants.CRYPTO_KEYSTORE_SOURCE,Messages.getString("CryptoPreferencePage.5"),1,new String[][]{{Messages.getString("CryptoPreferencePage.6"),PreferenceConstants.CRYPTO_KEYSTORE_SOURCE_NONE},{Messages.getString("CryptoPreferencePage.7"),PreferenceConstants.CRYPTO_KEYSTORE_SOURCE_FROM_FILE}},fep);    addField(keyStoreSourceRadioFieldWin);  }  addField(new FileFieldEditor(PreferenceConstants.CRYPTO_KEYSTORE_FILE,Messages.getString("CryptoPreferencePage.9"),fep));  addField(new FileFieldEditor(PreferenceConstants.CRYPTO_TRUSTSTORE_FILE,Messages.getString("CryptoPreferencePage.10"),fep));  if (isPKCS11Supported()) {    addField(new FileFieldEditor(PreferenceConstants.CRYPTO_PKCS11_LIBRARY_PATH,Messages.getString("CryptoPreferencePage.11"),fep));    addField(new StringFieldEditor(PreferenceConstants.CRYPTO_PKCS11_CERTIFICATE_ALIAS,Messages.getString("CryptoPreferencePage.15"),fep));  }}  }
class C{  public void updateItem(int identifier){  if (mDrawer != null && mDrawerAdapter != null && mDrawerAdapter.getDrawerItems() != null && identifier != -1) {    IDrawerItem drawerItem=mDrawer.getDrawerItem(identifier);    for (int i=0; i < mDrawerAdapter.getDrawerItems().size(); i++) {      if (mDrawerAdapter.getDrawerItems().get(i).getIdentifier() == drawerItem.getIdentifier()) {        IDrawerItem miniDrawerItem=generateMiniDrawerItem(drawerItem);        if (miniDrawerItem != null) {          mDrawerAdapter.setDrawerItem(i,miniDrawerItem);        }      }    }  }}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof RFC822Name))   return false;  RFC822Name other=(RFC822Name)obj;  return name.equalsIgnoreCase(other.name);}  }
class C{  public static int compare(String id1,String id2){  int result=-1;  String seed1=IdGenerator.getSeedFromId(id1);  String seed2=IdGenerator.getSeedFromId(id2);  if (seed1 != null && seed2 != null) {    result=seed1.compareTo(seed2);    if (result == 0) {      long count1=IdGenerator.getSequenceFromId(id1);      long count2=IdGenerator.getSequenceFromId(id2);      result=(int)(count1 - count2);    }  }  return result;}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(_method.getModifiers());}  }
class C{  private void cmd_history(){  log.info("");  if (m_mWorkbench.getMWindow(getWindowIndex()).isTransaction()) {    if (m_curTab.needSave(true,true) && !cmd_save(false))     return;    Point pt=new Point(0,aHistory.getButton().getBounds().height);    SwingUtilities.convertPointToScreen(pt,aHistory.getButton());    VOnlyCurrentDays ocd=new VOnlyCurrentDays(Env.getFrame(this),pt);    if (!ocd.isCancel()) {      m_onlyCurrentDays=ocd.getCurrentDays();      if (m_onlyCurrentDays == 1) {        m_onlyCurrentRows=true;        m_onlyCurrentDays=0;      } else       m_onlyCurrentRows=false;      m_curTab.setQuery(null);      MRole role=MRole.getDefault();      int maxRows=role.getMaxQueryRecords();      log.config("OnlyCurrent=" + m_onlyCurrentRows + ", Days="+ m_onlyCurrentDays+ ", MaxRows="+ maxRows);      m_curGC.query(m_onlyCurrentRows,m_onlyCurrentDays,maxRows);    } else {      if (isFirstTab())       aHistory.setPressed(!m_curTab.isOnlyCurrentRows());    }  }}  }
class C{  final String[] tokenize(String cmdLine){  cmdLine=cmdLine.trim();  return cmdLine.split("\\s+");}  }
class C{  public boolean hasAttributes(){  return this.hasAttributes;}  }
class C{  public Drawer buildView(){  mSliderLayout=(ScrimInsetsRelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  if (params != null) {    params.gravity=mDrawerGravity;    params=DrawerUtils.processDrawerLayoutParams(this,params);    mSliderLayout.setLayoutParams(params);  }  createContent();  Drawer result=new Drawer(this);  if (mAccountHeader != null) {    mAccountHeader.setDrawer(result);  }  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  handleShowOnFirstLaunch();  if (!mAppended && mGenerateMiniDrawer) {    mMiniDrawer=new MiniDrawer().withDrawer(result).withAccountHeader(mAccountHeader).withPositionBasedStateManagement(mPositionBasedStateManagement);  }  mActivity=null;  return result;}  }
class C{  private List<CompletionProposal> jsToList(List<AngularJSCompletionProposal> autocompletions,InvocationContext context){  final List<CompletionProposal> proposals=new ArrayList<>();  if (autocompletions != null) {    for (    AngularJSCompletionProposal proposal : autocompletions) {      proposals.add(proposal);      proposal.setInvocationContext(context);    }  }  return proposals;}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600 baud"};}  }
class C{  public ValidationWarnings validate(VCardVersion version){  ValidationWarnings warnings=new ValidationWarnings();  if (getStructuredName() == null && (version == VCardVersion.V2_1 || version == VCardVersion.V3_0)) {    warnings.add(null,new Warning(0));  }  if (getFormattedName() == null && (version == VCardVersion.V3_0 || version == VCardVersion.V4_0)) {    warnings.add(null,new Warning(1));  }  for (  VCardProperty property : this) {    List<Warning> propWarnings=property.validate(version,this);    if (!propWarnings.isEmpty()) {      warnings.add(property,propWarnings);    }  }  return warnings;}  }
class C{  @Override public boolean isClosed(){  return getDelegate().isClosed();}  }
class C{  @Override public boolean spawnPig(World world,double x,double y,double z){  final EntityPig pig=new EntityPig(world);  pig.setPosition(x,y,z);  return world.spawnEntityInWorld(pig);}  }
class C{  public boolean isBasic(){  return equals(basic());}  }
class C{  public ProjectComparisonEntry compareModules(TModule module,String implementationID){  return compareModules(module,implementationID,false);}  }
class C{  private int handleW(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"WR")) {    result.append('R');    index+=2;  } else {    if (index == 0 && (isVowel(charAt(value,index + 1)) || contains(value,index,2,"WH"))) {      if (isVowel(charAt(value,index + 1))) {        result.append('A','F');      } else {        result.append('A');      }      index++;    } else     if ((index == value.length() - 1 && isVowel(charAt(value,index - 1))) || contains(value,index - 1,5,"EWSKI","EWSKY","OWSKI","OWSKY") || contains(value,0,3,"SCH")) {      result.appendAlternate('F');      index++;    } else     if (contains(value,index,4,"WICZ","WITZ")) {      result.append("TS","FX");      index+=4;    } else {      index++;    }  }  return index;}  }
class C{  public void createAccrualBasedJournalEntriesAndReversalsForLoan(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long paymentTypeId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal){  int accountTypeToDebitId=accountTypeToBeDebited;  int accountTypeToCreditId=accountTypeToBeCredited;  if (isReversal) {    accountTypeToDebitId=accountTypeToBeCredited;    accountTypeToCreditId=accountTypeToBeDebited;  }  createJournalEntriesForLoan(office,currencyCode,accountTypeToDebitId,accountTypeToCreditId,loanProductId,paymentTypeId,loanId,transactionId,transactionDate,amount);}  }
class C{  public ObjectName createDistributionLocator(String host,int port,String workingDirectory,String productDirectory) throws MalformedObjectNameException {  return createDistributionLocator(host,port,workingDirectory,productDirectory,getRemoteCommand());}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public JSearchPanel(Visualization vis,String group,String searchGroup,String[] fields,boolean autoIndex,boolean monitorKeystrokes){  m_lock=vis;  m_fields=fields;  m_autoIndex=autoIndex;  m_monitorKeys=monitorKeystrokes;  TupleSet search=vis.getGroup(searchGroup);  if (search != null) {    if (search instanceof SearchTupleSet) {      m_searcher=(SearchTupleSet)search;    } else {      throw new IllegalStateException("Search focus set not instance of SearchTupleSet!");    }  } else {    m_searcher=new PrefixSearchTupleSet();    vis.addFocusGroup(searchGroup,m_searcher);  }  init(vis.getGroup(group));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SESSION_IDS;case 2:  return PACKET;default :return null;}}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScrollX() || !canScrollY()) {    if (isFocused()) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (canScrollY()) {    if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_UP:        if (!event.isAltPressed()) {          handled=arrowScroll(View.FOCUS_UP);        } else {          handled=fullScroll(View.FOCUS_UP);        }      break;case KeyEvent.KEYCODE_DPAD_DOWN:    if (!event.isAltPressed()) {      handled=arrowScroll(View.FOCUS_DOWN);    } else {      handled=fullScroll(View.FOCUS_DOWN);    }  break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);break;}}}if (canScrollX()) {if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:if (!event.isAltPressed()) {handled=arrowScroll(View.FOCUS_LEFT);} else {handled=fullScroll(View.FOCUS_LEFT);}break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (!event.isAltPressed()) {handled=arrowScroll(View.FOCUS_RIGHT);} else {handled=fullScroll(View.FOCUS_RIGHT);}break;}}}return handled;}  }
class C{  static public String executeFunction(String[] values){  try {    if (values[2].equalsIgnoreCase("currentdate"))     return DateFunctions.getCurrentDate(values[3]); else     if (values[2].equalsIgnoreCase("adddays"))     return DateFunctions.addDays(Integer.valueOf(values[3]),values[4]);    return null;  } catch (  Exception ex) {    return null;  }}  }
class C{  public int executeNativeQuery(String sql){  throwReadOnly();  return 0;}  }
class C{  public static void init(){  try {    providers=new Vector<CrashInfoProvider>();    crashDir=new File(ToastBootstrap.toastHome,"crash");    crashDir.mkdirs();  } catch (  Exception e) {  }  dateFormat=new SimpleDateFormat("yyyy-MM-dd_hh-mm-ss");  instance=new CrashHandler();  Thread.setDefaultUncaughtExceptionHandler(instance);  Thread.currentThread().setUncaughtExceptionHandler(instance);  providers.add(new CrashInfoToast());  providers.add(new CrashInfoEnvironment());  providers.add(new CrashInfoModules());}  }
class C{  public void testGetAlgorithm() throws Exception {  String secret="secret string";  String algorithm="DES";  KeyGenerator kg=KeyGenerator.getInstance(algorithm);  Key key=kg.generateKey();  Cipher cipher=Cipher.getInstance(algorithm);  cipher.init(Cipher.ENCRYPT_MODE,key);  SealedObject so=new SealedObject(secret,cipher);  assertEquals("The algorithm name should be the same as used " + "in cipher.",algorithm,so.getAlgorithm());}  }
class C{  public static String rowToString(JSONArray ja){  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  public FormIndex stepIndexOut(FormIndex index){  if (index.isTerminal()) {    return null;  } else {    return new FormIndex(stepIndexOut(index.getNextLevel()),index);  }}  }
class C{  public IndexElemArray(){  this(IndexManager.INDEX_ELEMARRAY_SIZE);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.BLOCK__STATEMENTS:    return statements != null && !statements.isEmpty();case GamlPackage.BLOCK__FUNCTION:  return function != null;}return super.eIsSet(featureID);}  }
class C{  public int availableProcessors(){  return RVMThread.availableProcessors;}  }
class C{  public void receiveResultgetNumberOfServiceSessions(org.oscm.example.client.SessionServiceStub.GetNumberOfServiceSessionsResponseE result){}  }
class C{  public static void startActionBaz(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService1.class);  intent.setAction(ACTION_BAZ);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  public WrongClassTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  void acquireReadLock() throws IOException {  try {    readLock.acquire();  } catch (  InterruptedException e) {    throw new IOException("Interrupted while waiting for read lock",e);  }}  }
class C{  public void showDialog(@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setUrl("");  view.setName("");  view.setEnableOkButton(false);  view.showDialog();}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public double untransform(double value){  return Math.pow(10.0,value);}  }
class C{  private void validateInvalidate(){  Collection entries=((LocalRegion)region).entries.regionEntries();  if (entries.size() != 1) {    fail("expected size to be 1 but is " + entries.size());  }  RegionEntry entry=(RegionEntry)entries.iterator().next();  DiskId id=((DiskEntry)entry).getDiskId();  Object obj=((LocalRegion)region).getDiskRegion().get(id);  if (!(obj.equals(Token.INVALID))) {    fail(" incorrect invalidation");  }}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series,int category){  return null;}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.J48";}  }
class C{  final boolean matches(String s){  return matches(s,0,s.length());}  }
class C{  @Thunk static CharSequence ensureValidName(Context context,Intent intent,CharSequence name){  if (name == null) {    try {      PackageManager pm=context.getPackageManager();      ActivityInfo info=pm.getActivityInfo(intent.getComponent(),0);      name=info.loadLabel(pm);    } catch (    PackageManager.NameNotFoundException nnfe) {      return "";    }  }  return name;}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  private void validateText(Class type) throws Exception {  Label label=root.getText();  if (label != null) {    if (!label.isTextList()) {      if (!elements.isEmpty()) {        throw new TextException("Elements used with %s in %s",label,type);      }      if (root.isComposite()) {        throw new TextException("Paths used with %s in %s",label,type);      }    }  } else {    if (scanner.isEmpty()) {      primitive=isEmpty();    }  }}  }
class C{  private static Query makeStatKindQuery(String namespace,long timestamp){  Query.Builder statQuery=Query.newBuilder();  if (namespace == null) {    statQuery.addKindBuilder().setName("__Stat_Kind__");  } else {    statQuery.addKindBuilder().setName("__Stat_Ns_Kind__");  }  statQuery.setFilter(makeAndFilter(makeFilter("kind_name",EQUAL,makeValue(KIND).build()).build(),makeFilter("timestamp",EQUAL,makeValue(timestamp * 1000000L).build()).build()));  return statQuery.build();}  }
class C{  private static BigInteger evaluateOperator(final INaviOperandTreeNode node,final ImmutableList<RegisterValue> registers,final IDebugger debugger,final INaviModule module) throws CExpressionEvaluationException {  final List<INaviOperandTreeNode> children=node.getChildren();  BigInteger initial=evaluateExpression(children.get(0),registers,debugger,module);  for (int i=1; i < children.size(); i++) {    if (node.getValue().equals("+")) {      initial=initial.add(evaluateExpression(children.get(i),registers,debugger,module));    } else     if (node.getValue().equals("-")) {      initial=initial.subtract(evaluateExpression(children.get(i),registers,debugger,module));    } else     if (node.getValue().equals("*")) {      initial=initial.multiply(evaluateExpression(children.get(i),registers,debugger,module));    } else {      throw new CExpressionEvaluationException(String.format("Unknown operand '%s'",node.getValue()));    }  }  return initial;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,Distance<V> distance,boolean averaging){  this(graph,distance,averaging,true,true);}  }
class C{  @Inline public ObjectReference fastTraceObject(TransitiveClosure trace,ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(defrag.determined(false));  traceObjectWithoutMoving(trace,object);  return object;}  }
class C{  public FlyweightText(String text){  this.text=text;}  }
class C{  public static SassValue convertToSassValue(Object value){  if (null == value) {    return SassNull.SINGLETON;  }  if (value instanceof SassValue) {    return (SassValue)value;  }  Class cls=value.getClass();  if (isaBoolean(cls)) {    return new SassBoolean((Boolean)value);  }  if (isaNumber(cls)) {    return new SassNumber(((Number)value).doubleValue(),"");  }  if (isaString(cls) || isaCharacter(cls)) {    return new SassString(value.toString());  }  if (value instanceof Collection) {    return new SassList(((Collection<?>)value).stream().map(null).collect(Collectors.toList()));  }  if (value instanceof Map) {    return ((Map<?,?>)value).entrySet().stream().collect(Collectors.toMap(null,null,null,null));  }  if (value instanceof Throwable) {    Throwable throwable=(Throwable)value;    StringWriter stringWriter=new StringWriter();    PrintWriter printWriter=new PrintWriter(stringWriter);    String message=throwable.getMessage();    if (StringUtils.isNotEmpty(message)) {      printWriter.append(message).append(System.lineSeparator());    }    throwable.printStackTrace(printWriter);    return new SassError(stringWriter.toString());  }  return new SassError(String.format("Could not convert object of type %s into a sass value",value.getClass().toString()));}  }
class C{  private boolean testPin(int v1,int v2,int v3,int v4){  return testWheelValue(R.id.passw_1,v1) && testWheelValue(R.id.passw_2,v2) && testWheelValue(R.id.passw_3,v3)&& testWheelValue(R.id.passw_4,v4);}  }
class C{  public MorphTransition morph(String source,String to){  fromTo.put(source,to);  return this;}  }
class C{  public static URI createVirtualDataCenterId(String vdcId){  return newId(VirtualDataCenter.class,vdcId);}  }
class C{  public PyClassTypeImpl(@NotNull PyClass source,boolean isDefinition){  PyClass originalElement=CompletionUtil.getOriginalElement(source);  myClass=originalElement != null ? originalElement : source;  myIsDefinition=isDefinition;}  }
class C{  public WeakHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  public static int value(String s,boolean numberok){  int val=types.getValue(s);  if (val == -1 && numberok) {    val=types.getValue("TYPE" + s);  }  return val;}  }
class C{  boolean matches(JComponent c){  return matches(c,parts.length - 1);}  }
class C{  public void warn(String msg,Object arg0){  innerLog(Level.WARNING,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public <T>Builder row(T firstCell,T secondCell,T thirdCell,T fourthCell){  return tag("tr").cell(firstCell,false).cell(secondCell,false).cell(thirdCell,false).cell(fourthCell).end();}  }
class C{  public boolean contains(Object triangle){  return triGraph.getNodes().contains(triangle);}  }
class C{  public IntStack(int blocksize){  super(blocksize);}  }
class C{  private void computePseudoReferences(String pseudoRefOptions,String tmpPath){  createPseudoReferences=true;  tempDirectory=tmpPath;  String[] options=pseudoRefOptions.split(",");  assert options.length == 2 : "Invalid pseudoreference option string";  numPseudoReferences=Integer.valueOf(options[0]);  pseudoReferenceBurnIn=Integer.valueOf(options[1]);  int tuneSetSize=tuneSource.size();  pseudoReferences=new ArrayList<List<Sequence<IString>>>(tuneSetSize);  for (int i=0; i < tuneSetSize; ++i) {    pseudoReferences.add(new LinkedList<Sequence<IString>>());  }  logger.info("Creating {} pseudoreferences",numPseudoReferences);  logger.info("Pseudoreference temp directory: {}",tempDirectory);}  }
class C{  public ReplicationJob createJobForDropTable(long auditLogId,long auditLogEntryCreateTime,Table table) throws StateUpdateException {  ReplicationOperation replicationOperation=ReplicationOperation.DROP_TABLE;  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  HiveObjectSpec tableSpec=new HiveObjectSpec(table);  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,ReplicationUtils.getLocation(table),srcCluster.getName(),tableSpec,Collections.emptyList(),ReplicationUtils.getTldt(table),Optional.empty(),Optional.empty(),extras);  return new ReplicationJob(conf,new DropTableTask(srcCluster,destCluster,tableSpec,ReplicationUtils.getTldt(table)),onStateChangeHandler,persistedJobInfo);}  }
class C{  private int[] joinMap(int[] a,int[] b){  if (a == null) {    return b;  }  if (b == null) {    return a;  }  int[] result=new int[a.length + b.length];  System.arraycopy(a,0,result,0,a.length);  System.arraycopy(b,0,result,a.length,b.length);  return result;}  }
class C{  private void unregisterSMSObserver(){  if (crSMS != null) {    crSMS.unregisterContentObserver(observerSMS);  }  if (observerSMS != null) {    observerSMS=null;  }  if (BuildConfig.DEBUG)   Log.v("Unregistered SMS Observer");}  }
class C{  @JmsListener(id=HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,containerFactory="jmsListenerContainerFactory",destination=HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public void processMessage(String payload,@Headers Map<Object,Object> allHeaders){  LOGGER.info("JMS message received from the queue. jmsQueueName=\"{}\" jmsMessageHeaders=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,allHeaders,payload);  boolean messageProcessed=processS3Notification(payload);  if (!messageProcessed) {    messageProcessed=processEsbSystemMonitorMessage(payload);  }  if (!messageProcessed) {    LOGGER.error("Failed to process message from the JMS queue. jmsQueueName=\"{}\" jmsMessagePayload={}",HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,payload);  }}  }
class C{  private void handleSecurityPanel(int idx){  listener.onSecurityPanelButtonClick(idx);}  }
class C{  public EnhancedForStatement newEnhancedForStatement(){  return new EnhancedForStatement(this);}  }
class C{  public boolean isCritical(){  return (number & 1) != 0;}  }
class C{  protected int addObservationsAfterParamsDetermined(double[] source,double[] destination) throws Exception {  if (source.length != destination.length) {    throw new Exception(String.format("Source and destination lengths (%d and %d) must match!",source.length,destination.length));  }  if (source.length < startTimeForFirstDestEmbedding + 2) {    return 0;  }  double[][] currentDestPastVectors=MatrixUtils.makeDelayEmbeddingVector(destination,k,k_tau,startTimeForFirstDestEmbedding,destination.length - startTimeForFirstDestEmbedding - 1);  double[][] currentDestNextVectors=MatrixUtils.makeDelayEmbeddingVector(destination,1,startTimeForFirstDestEmbedding + 1,destination.length - startTimeForFirstDestEmbedding - 1);  double[][] currentSourcePastVectors=MatrixUtils.makeDelayEmbeddingVector(source,l,l_tau,startTimeForFirstDestEmbedding + 1 - delay,source.length - startTimeForFirstDestEmbedding - 1);  condMiCalc.addObservations(currentSourcePastVectors,currentDestNextVectors,currentDestPastVectors);  return destination.length - startTimeForFirstDestEmbedding - 1;}  }
class C{  public void testStateFormatUpdateWithTimeDelay() throws Exception {  testStateFormatUpdate(false,true);}  }
class C{  public static void longToIntArray(long lValue,int[] buffer,int nStartIndex){  buffer[nStartIndex]=(int)(lValue >>> 32);  buffer[nStartIndex + 1]=(int)lValue;}  }
class C{  public LineString toGeometry(GeometryFactory geomFactory){  return geomFactory.createLineString(new Coordinate[]{p0,p1});}  }
class C{  private Token scanFlowScalar(char style){  boolean _double;  if (style == '"') {    _double=true;  } else {    _double=false;  }  StringBuilder chunks=new StringBuilder();  Mark startMark=reader.getMark();  char quote=reader.peek();  reader.forward();  chunks.append(scanFlowScalarNonSpaces(_double,startMark));  while (reader.peek() != quote) {    chunks.append(scanFlowScalarSpaces(startMark));    chunks.append(scanFlowScalarNonSpaces(_double,startMark));  }  reader.forward();  Mark endMark=reader.getMark();  return new ScalarToken(chunks.toString(),false,startMark,endMark,style);}  }
class C{  private static String extractClientName(String clientId,String host){  String hostExcludedId="";  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {    hostExcludedId=clientId.substring(host.length());  } else {    int firstDotIndex=host.indexOf(".");    if (firstDotIndex != -1) {      String hostShortName=host.substring(0,firstDotIndex);      hostExcludedId=clientId.substring(hostShortName.length());    }  }  String vmPIDAndKindRegex="\\(\\w+:\\w+\\)";  String regex="(\\<ec\\>)?:[0-9]+(:\\w+){2}+";  String name=NOT_AVAILABLE;  String temp=hostExcludedId;  int openIndex=temp.indexOf("(");  if (openIndex != -1) {    regex=vmPIDAndKindRegex + regex;  }  if (temp.matches(regex)) {    String[] splitted=temp.split(":");    name=splitted[splitted.length - 1];  }  return name;}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  public static void trackAppOpenedInBackground(Intent intent,SaveCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(trackAppOpenedInBackground(intent),callback);}  }
class C{  public boolean isDirectory(){  return false;}  }
class C{  private static boolean hasSuitableSelection(Editor editor){  if (!editor.getSelectionModel().hasSelection()) {    return false;  }  Document document=editor.getDocument();  int selectionStart=editor.getSelectionModel().getSelectionStart();  int selectionEnd=editor.getSelectionModel().getSelectionEnd();  return !CharArrayUtil.containsOnlyWhiteSpaces(document.getCharsSequence().subSequence(selectionStart,selectionEnd));}  }
class C{  public PluginEntry(String service,CordovaPlugin plugin){  this(service,plugin.getClass().getName(),true,plugin);}  }
class C{  public void removeAction(String category,Action action){  JMenu categoryMenu=categories.get(getCaption(category));  if (categoryMenu == null) {    return;  }  for (int i=0; i < categoryMenu.getItemCount(); i++) {    JMenuItem item=categoryMenu.getItem(i);    if (item.getAction() == action) {      categoryMenu.remove(i);      return;    }  }}  }
class C{  public Boolean isNetworkReservationSupported(){  return networkReservationSupported;}  }
class C{  public static List<Integer> preorderTraversalIterative(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null) {    return res;  }  Stack<TreeNode> stack=new Stack<TreeNode>();  stack.push(root);  while (!stack.isEmpty()) {    TreeNode node=stack.pop();    res.add(node.val);    if (node.right != null) {      stack.push(node.right);    }    if (node.left != null) {      stack.push(node.left);    }  }  return res;}  }
class C{  private void doPut(E kkey){  Comparable<? super E> key=comparable(kkey);  for (; ; ) {    Node<E> b=findPredecessor(key);    Node<E> n=b.next;    for (; ; ) {      if (n != null) {        Node<E> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c >= 0) {          b=n;          n=f;          continue;        }      }      Node<E> z=new Node<E>(kkey,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return;    }  }}  }
class C{  public void unblock(Address destination){  if (config.isUseNetworkEmulator()) {    networkEmulatorHandler.unblock(destination);    LOGGER.info("Unblock network from {} to {}",address,destination);  } else {    LOGGER.warn("Noop on 'unblock({})' since network emulator is disabled",destination);  }}  }
class C{  public Spline3D add(ReadonlyVec3D p){  pointList.add(p.copy());  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int cardinality(){  int sum=0;  for (int i=0; i < wordsInUse; i++)   sum+=Long.bitCount(words[i]);  return sum;}  }
class C{  public void wakeup(){  if (this.waiter == null) {    throw new IllegalStateException("Nobody waiting on this object.");  }  this.cond.signalAll();}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  private void sendProfileUpdate(){  if (this.getDistributionManager().getSystem().isLoner()) {    return;  }  Assert.assertTrue(!Thread.holdsLock(this),"Attempting to sendProfileUpdate while synchronized may result in deadlock");  final int partitionedRegionId=this.pRegion.getPRId();  final int bucketId=((ProxyBucketRegion)getAdvisee()).getBucketId();  BucketProfile bp=(BucketProfile)createProfile();  updateServerBucketProfile(bp);  InternalDistributedMember primary=basicGetPrimaryMember();  HashSet hostsAndProxyMembers=new HashSet();  if (primary != null && !primary.equals(getDistributionManager().getId())) {    hostsAndProxyMembers.add(primary);  }  hostsAndProxyMembers.addAll(adviseGeneric());  hostsAndProxyMembers.addAll(adviseProfileUpdate());  ReplyProcessor21 reply=BucketProfileUpdateMessage.send(hostsAndProxyMembers,getDistributionManager(),partitionedRegionId,bucketId,bp,true);  if (reply != null) {    reply.waitForRepliesUninterruptibly();  }}  }
class C{  public StateCaseItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void resetOnErrorDropped(){  log.info("Reset to factory defaults : onErrorDropped");  onErrorDroppedHook=null;}  }
class C{  public void addLiteralResultAttribute(String att){  if (null == m_xslAttr)   m_xslAttr=new ArrayList();  m_xslAttr.add(att);}  }
class C{  public LockingIteration(Lock lock,Iteration<? extends E,X> iter){  super(iter);  assert lock != null;  this.lock=lock;}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  public SimpleType newSimpleType(Name typeName){  SimpleType result=new SimpleType(this);  result.setName(typeName);  return result;}  }
class C{  public RandomPolicyMin(){  super(Harness.options,"Random Policy Min","Minimum yield interval for the random scheduler policy",Integer.valueOf(System.getProperty("mmtk.harness.yieldpolicy.random.min","1")));}  }
class C{  public static boolean isPowerOfTwo(int value){  return (value == powerOfTwoCeiling(value));}  }
class C{  public boolean isExpired(){  return System.currentTimeMillis() >= creationTime + lifetime;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public JSONNode(String name,Integer value){  this(name,value,NodeType.PRIMITIVE);}  }
class C{  public void paintToolTipBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected boolean skipReceiverSubtypeCheck(MethodInvocationTree node,AnnotatedTypeMirror methodDefinitionReceiver,AnnotatedTypeMirror methodCallReceiver){  return false;}  }
class C{  public static void encodeByteIntoTwoAsciiCharBytes(final int decoded,final byte[] encoded){  encoded[0]=(byte)encodeNibbleToHexAsciiCharByte((decoded >> 4) & 0x0F);  encoded[1]=(byte)encodeNibbleToHexAsciiCharByte(decoded & 0x0F);}  }
class C{  private void clearAllTables(){  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_10) == 0) {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().build();    this.sw.write(deleteFlows);  } else {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().setTableId(TableId.ALL).build();    this.sw.write(deleteFlows);    OFGroupDelete delgroup=this.sw.getOFFactory().buildGroupDelete().setGroup(OFGroup.ALL).setGroupType(OFGroupType.ALL).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.FF).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.INDIRECT).build();    this.sw.write(delgroup);    delgroup.createBuilder().setGroupType(OFGroupType.SELECT).build();    this.sw.write(delgroup);    OFBarrierRequest barrier=factory.buildBarrierRequest().setXid(handshakeTransactionIds--).build();    sw.write(barrier);  }}  }
class C{  public World(Vector2 gravity,boolean doSleep){  world=new org.jbox2d.dynamics.World(tmp.set(gravity.x,gravity.y));  world.setAllowSleep(doSleep);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public String displayAST(Node node,int maxDepth,Node markNode){  StringWriter out=new StringWriter();  printTree(new PrintWriter(out),node,maxDepth,markNode);  return out.toString();}  }
class C{  public static int dragViewTo(View v,int gravity,int toX,int toY){  int[] xy=new int[2];  getStartLocation(v,gravity,xy);  int fromX=xy[0];  int fromY=xy[1];  int deltaX=fromX - toX;  int deltaY=fromY - toY;  int distance=(int)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  drag(fromX,toX,fromY,toY,distance);  return distance;}  }
class C{  @Override protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[0]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0]) && i >= 0 && i < mXAxis.getValues().size()) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      c.drawText(label,position[0],pos,mAxisLabelPaint);    }  }}  }
class C{  public void disconnect(final IMqttActionListener diconnectionResultHandler) throws SpyException {  reconnectionManager.removeConnection(this);  setConnectionStatus(ConnectionStatus.DISCONNECTING);  unsubscribeAll(true);  try {    logger.info("Disconnecting " + getMqttConnectionDetails().getClientID() + " from "+ getMqttConnectionDetails().getServerURI());    if (getClient() != null && getClient().isConnected()) {      getClient().disconnect(this,diconnectionResultHandler);    } else {      logger.debug("Already disconnected");    }  } catch (  MqttException e) {    throw new SpyException("Cannot disconnect from connection " + getMqttConnectionDetails().getId() + " "+ getMqttConnectionDetails().getName(),e);  }}  }
class C{  @Override public String toString(){  StringBuilder msg=new StringBuilder();  msg.append("x = ").append(FormatUtil.format(x,9,4,"[","]\n",", "));  msg.append("\ny = ").append(FormatUtil.format(y,9,4));  msg.append("\nb = ").append(FormatUtil.format(b,9,4));  msg.append("\ne = ").append(FormatUtil.format(e,9,4));  msg.append("error variance = ").append(FormatUtil.NF4.format(variance));  return msg.toString();}  }
class C{  private Ed25519FieldElement pow2to9(){  Ed25519FieldElement f;  f=this.square();  f=f.square();  f=f.square();  return this.multiply(f);}  }
class C{  void _m12(float m12){  this.m12=m12;}  }
class C{  @Override protected RStarTreeNode createNewDirectoryNode(){  return new RStarTreeNode(dirCapacity,false);}  }
class C{  public ClientDetailsException(String message,Object params){  this(message,params,false);}  }
class C{  final public SyntaxTreeNode Proof() throws ParseException {  SyntaxTreeNode tn;  Token t=null;  Token t0=null;  pushProofLevel();  bpa("Proof");  if ((getToken(1).kind == BY) || (getToken(2).kind == BY)) {    tn=UseOrHideOrBy();  } else   if (jj_2_27(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case PROOF:      t0=jj_consume_token(PROOF);    break;default :  jj_la1[55]=jj_gen;;}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case OBVIOUS:t=jj_consume_token(OBVIOUS);break;case OMITTED:t=jj_consume_token(OMITTED);break;default :jj_la1[56]=jj_gen;jj_consume_token(-1);throw new ParseException();}SyntaxTreeNode sn[];if (t0 != null) {sn=new SyntaxTreeNode[2];sn[0]=new SyntaxTreeNode(mn,t0);sn[1]=new SyntaxTreeNode(mn,t);} else {sn=new SyntaxTreeNode[1];sn[0]=new SyntaxTreeNode(mn,t);};tn=new SyntaxTreeNode(mn,N_TerminalProof,sn);} else if (jj_2_28(1)) {if (jj_2_26(2)) {t=jj_consume_token(PROOF);addHeir(new SyntaxTreeNode(mn,t));} else {;}label_14: while (true) {if (getToken(2).kind != QED) {;} else {break label_14;}tn=Step();addHeir(tn);expecting="a proof step";}tn=QEDStep();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();tn=new SyntaxTreeNode(mn,N_Proof,sn);} else {jj_consume_token(-1);throw new ParseException();}epa();popProofLevel();{if (true) return tn;}throw new Error("Missing return statement in function");}  }
class C{  private void initializeLayout(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  Border padding=BorderFactory.createEmptyBorder(5,5,5,5);  JPanel tPanel=new JPanel();  tPanel.setLayout(new BoxLayout(tPanel,BoxLayout.X_AXIS));  tPanel.add(cbNeuronType);  int horzStrut=30;  tPanel.add(Box.createHorizontalStrut(horzStrut));  tPanel.add(Box.createHorizontalGlue());  tPanel.add(neuronRulePanelTriangle);  tPanel.setAlignmentX(Component.CENTER_ALIGNMENT);  tPanel.setBorder(padding);  this.add(tPanel);  this.add(Box.createRigidArea(new Dimension(0,5)));  neuronRulePanel.setAlignmentX(Component.CENTER_ALIGNMENT);  neuronRulePanel.setBorder(padding);  neuronRulePanel.setVisible(neuronRulePanelTriangle.isDown());  this.add(neuronRulePanel);  TitledBorder tb=BorderFactory.createTitledBorder("Update Rule");  this.setBorder(tb);}  }
class C{  public KMLLocation(String namespaceURI){  super(namespaceURI);}  }
class C{  public ProtocolVersion forVersion(int major,int minor){  if ((major == this.major) && (minor == this.minor)) {    return this;  }  if (major == 1) {    if (minor == 0) {      return HTTP_1_0;    }    if (minor == 1) {      return HTTP_1_1;    }  }  if ((major == 0) && (minor == 9)) {    return HTTP_0_9;  }  return new HttpVersion(major,minor);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tChoose attribute to be used for selection.","C",1,"-C <num>"));  newVector.addElement(new Option("\tNumber of values to retain for the sepcified attribute, \n" + "\ti.e. the ones with the most instances (default 2).","N",1,"-N <num>"));  newVector.addElement(new Option("\tInstead of values with the most instances the ones with the \n" + "\tleast are retained.\n","L",0,"-L"));  newVector.addElement(new Option("\tWhen selecting on nominal attributes, removes header\n" + "\treferences to excluded values.","H",0,"-H"));  newVector.addElement(new Option("\tInvert matching sense.","V",0,"-V"));  return newVector.elements();}  }
class C{  public static final <T extends EObject>List<T> collectNodes(EObject root,Class<T> cls,boolean searchForNestedNodes){  final List<T> result=new ArrayList<>();  final TreeIterator<EObject> iter=root.eAllContents();  while (iter.hasNext()) {    final EObject obj=iter.next();    if (cls.isAssignableFrom(obj.getClass())) {      @SuppressWarnings("unchecked") final T objCasted=(T)obj;      result.add(objCasted);      if (!searchForNestedNodes)       iter.prune();    }  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.347 -0400",hash_original_method="17B283E675F13C0A62946A353F07CD53",hash_generated_method="E45B81EF177F99E3E73457DF095A84DF") @Override public boolean equals(Object obj){  if (!(obj instanceof ByteOrderMark)) {    return false;  }  ByteOrderMark bom=(ByteOrderMark)obj;  if (bytes.length != bom.length()) {    return false;  }  for (int i=0; i < bytes.length; i++) {    if (bytes[i] != bom.get(i)) {      return false;    }  }  return true;}  }
class C{  public CollectionObject(int id){  this.id=id;}  }
class C{  private void plasmaStore(){  Set<BigInteger> subs=new HashSet<BigInteger>();  ByteArrayOutputStream baos=new ByteArrayOutputStream(subscriptions.size() * 16);  for (  Set<String> s : subscriptions.values()) {    for (    String ss : s) {      try {        baos.write(GTSHelper.unpackGTSId(ss));      } catch (      IOException ioe) {      }    }  }  for (  String znode : currentPlasmaZnodes) {    try {      this.subsCurator.delete().guaranteed().forPath(znode);    } catch (    Exception e) {      LOG.error("Error while deleting subscription znodes",e);    }  }  currentPlasmaZnodes.clear();  byte[] bytes=baos.toByteArray();  int idx=0;  while (idx < bytes.length) {    int chunksize=Math.min(this.maxPlasmaZnodeSize,bytes.length - idx);    chunksize=chunksize - (chunksize % 16);    byte[] data=new byte[chunksize];    System.arraycopy(bytes,idx,data,0,data.length);    UUID uuid=UUID.randomUUID();    long sip=SipHashInline.hash24(uuid.getMostSignificantBits(),uuid.getLeastSignificantBits(),data,0,data.length);    String path=this.plasmaZnodeRoot + "/0." + uuid.toString()+ "."+ this.plasmaTopic+ "."+ idx+ "."+ Long.toHexString(sip);    try {      this.subsCurator.create().withMode(CreateMode.EPHEMERAL).forPath(path,data);      currentPlasmaZnodes.add(path);    } catch (    Exception e) {      LOG.error("Error while creating ZK subscription znode " + path,e);    }    idx+=data.length;  }  byte[] randomData=(this.plasmaTopic + "." + System.currentTimeMillis()).getBytes(Charsets.UTF_8);  try {    this.subsCurator.setData().forPath(this.plasmaZnodeRoot,randomData);  } catch (  Exception e) {    LOG.error("Error while storing data for " + this.plasmaZnodeRoot,e);  }}  }
class C{  @Override public boolean deleteFile(String path){  try {    mDBApi.delete(path);    return true;  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }}  }
class C{  private void require(int len){  int offset=_offset;  int length=_length;  if (offset + len < length) {    return;  }  flush(_offset);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 164) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void multiplyParametersByPrepending(Object... args){  cartesianProduct(false,args);}  }
class C{  public static Date parseDate(final String dateValue,final Collection dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public SpherePortrayal3D(Color color,double scale){  this(color,scale,DEFAULT_DIVISIONS);}  }
class C{  public TemporalInstantRfc3339(final DateTime datetime){  dateTime=datetime;}  }
class C{  public void display() throws IOException, ObjectNotFoundException, OperationNotPermittedException, ValidationException, OrganizationAuthoritiesException {  VOSubscriptionDetails subscriptionDetails=getSubscriptionService().getSubscriptionDetails(model.getSubscription().getSubscriptionId());  VOPriceModel priceModel=subscriptionDetails.getPriceModel();  ExternalPriceModelDisplayHandler displayHandler=new ExternalPriceModelDisplayHandler();  displayHandler.setContent(priceModel.getPresentation());  displayHandler.setContentType(priceModel.getPresentationDataType());  displayHandler.display();}  }
class C{  public byte[] read(byte[] b) throws IOException {  if (b.length == 0) {    return b;  }  int offset=0;  if (nextByte != null) {    b[0]=nextByte;    nextByte=null;    offset=1;  }  int i=this.is.read(b,offset,b.length - offset);  if (i + offset < b.length) {    throw new IOException(String.format("End of file reading a byte[] of size %d",b.length));  }  currentByte=b[b.length - 1];  return b;}  }
class C{  public void deleteBucketLogging(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_LOGGING,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.882 -0400",hash_original_method="FF8F0C2386839E04CA9A4F5B5DAFF53D",hash_generated_method="E650BB0D76E023F97A3B86724FA751F7") public static IOFileFilter sizeRangeFileFilter(long minSizeInclusive,long maxSizeInclusive){  IOFileFilter minimumFilter=new SizeFileFilter(minSizeInclusive,true);  IOFileFilter maximumFilter=new SizeFileFilter(maxSizeInclusive + 1L,false);  return new AndFileFilter(minimumFilter,maximumFilter);}  }
class C{  public void resetTrigger(){  mHasTriggered=false;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public boolean isDynamic(){  return true;}  }
class C{  @Override public void rehashFieldDependancies(AbstractSession session){  getReferenceDescriptor().rehashFieldDependancies(session);}  }
class C{  public void outputNodePop(){  pop();}  }
class C{  @SuppressWarnings("unchecked") @Override protected Collection<Header> headers(SMTPSession session){  StringBuilder headerLineBuffer=new StringBuilder();  String heloMode=(String)session.getAttachment(SMTPSession.CURRENT_HELO_MODE,State.Connection);  String heloName=(String)session.getAttachment(SMTPSession.CURRENT_HELO_NAME,State.Connection);  headerLineBuffer.append("from ").append(session.getRemoteAddress().getHostName());  if (heloName != null) {    headerLineBuffer.append(" (").append(heloMode).append(" ").append(heloName).append(")");  }  headerLineBuffer.append(" ([").append(session.getRemoteAddress().getAddress().getHostAddress()).append("])");  Header header=new Header("Received",headerLineBuffer.toString());  headerLineBuffer=new StringBuilder();  headerLineBuffer.append("by ").append(session.getConfiguration().getHelloName()).append(" (").append(session.getConfiguration().getSoftwareName()).append(") with ").append(getServiceType(session,heloMode));  headerLineBuffer.append(" ID ").append(session.getSessionID());  if (((Collection<?>)session.getAttachment(SMTPSession.RCPT_LIST,State.Transaction)).size() == 1) {    header.add(headerLineBuffer.toString());    headerLineBuffer=new StringBuilder();    headerLineBuffer.append("for <").append(((List<MailAddress>)session.getAttachment(SMTPSession.RCPT_LIST,State.Transaction)).get(0).toString()).append(">;");  } else {    headerLineBuffer.append(";");  }  header.add(headerLineBuffer.toString());  headerLineBuffer=new StringBuilder();  headerLineBuffer.append(DATEFORMAT.get().format(new Date()));  header.add(headerLineBuffer.toString());  return Arrays.asList(header);}  }
class C{  private void disposeDecoderOut(IoSession session){  session.removeAttribute(DECODER_OUT);}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mDatePicker.init(ldt.getYear(),ldt.getMonthOfYear() - 1,ldt.getDayOfMonth(),mDateListener);  mTimePicker.setCurrentHour(ldt.getHourOfDay());  mTimePicker.setCurrentMinute(ldt.getMinuteOfHour());}  }
class C{  public static final String parseInputStreamToString(InputStream stream,boolean html) throws IOException {  try (InputStreamReader inputStreamReader=new InputStreamReader(stream,StandardCharsets.UTF_8);BufferedReader reader=new BufferedReader(inputStreamReader)){    StringBuilder contentBuilder=new StringBuilder();    if (html) {      contentBuilder.append("<html>");    }    String line=reader.readLine();    while (line != null) {      contentBuilder.append(line);      if (html) {        contentBuilder.append("<br/>");      }      line=reader.readLine();    }    if (html) {      contentBuilder.append("</html>");    }    return contentBuilder.toString();  } }  }
class C{  public void openRegisters(UseCaseConf useCaseConf,Integer bookID,List listIdsRegister) throws BookException, SessionException, ValidationException, ParseException, AttributesException, SecurityException {  FlushFdrField field=new FlushFdrField();  field.setFldid(AxSf.FLD6_FIELD_ID);  field.setValue(new Integer(ISicresKeys.SCR_ESTADO_REGISTRO_COMPLETO).toString());  List fields=new ArrayList(1);  fields.add(field);  String sessionID=useCaseConf.getSessionID();  boolean canCloseRegs=SecuritySession.canOpenCloseReg(sessionID,bookID);  updateFields(useCaseConf,bookID,fields,listIdsRegister);  if (_logger.isDebugEnabled()) {    _logger.debug("openRegisters");  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private static void logAndPrintError(PrintStream newStderr,String message,Throwable ex){  Log.e(TAG,message,ex);  if (newStderr != null) {    newStderr.println(message + (ex == null ? "" : ex));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void handleUpgradeSubscription(TriggerProcess process,LocalizerFacade facade) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  VOTriggerProcess vo=TriggerProcessAssembler.toVOTriggerProcess(process,facade);  VOSubscription current=getParamValue(process.getParamValueForName(TriggerProcessParameterName.SUBSCRIPTION),VOSubscription.class);  VOService newProduct=getParamValue(process.getParamValueForName(TriggerProcessParameterName.PRODUCT),VOService.class);  serviceClient.onUpgradeSubscription(VOConverter.convertToApi(vo),VOConverter.convertToApi(current),VOConverter.convertToApi(newProduct));  updateProcessState(process);}  }
class C{  protected synchronized void addLater(Object obj){  if (addLaterVector == null) {    addLaterVector=new ArrayList<Object>();  }  if (DEBUG) {    logger.fine("=== Adding " + obj.getClass().getName() + " to list for later addition");  }  addLaterVector.add(obj);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE:  return isSetNode();}throw new IllegalStateException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.434 -0500",hash_original_method="D10825FCC1F6D574D203B7119B0DE21D",hash_generated_method="D32709D4990037470D7B2A06E09FBEA3") public void writeUint8(long n){  check(1);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  offset-=increment;  int last=positions.length - 1;  int min=-positions[last];  if (offset < min) {    offset=0;  }  repaint();}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ExtendedCategoryAxis clone=(ExtendedCategoryAxis)super.clone();  clone.sublabels=new HashMap(this.sublabels);  return clone;}  }
class C{  public boolean hasArchive(){  return !this.archives.isEmpty();}  }
class C{  public static String dec2Bin(int value,String result){  if (value / 2 == 0)   return (value % 2) + result; else   return dec2Bin(value / 2,(value % 2) + result);}  }
class C{  public void removeChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  if (!this.delete(ccfAddress,ParameterNamesIms.CCF)) {    throw new ParseException("CCF Address Not Removed",0);  }}  }
class C{  public boolean isSolvable(){  return solvable && solved;}  }
class C{  public void testIntMissingFacet() throws Exception {  checkSortMissingFacet("intdv","-1","4");}  }
class C{  private boolean matchesField(Format.Field attribute,int field){  if (this.attribute != null) {    return this.attribute.equals(attribute);  }  return (field == this.field);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceCaseDeactivation_();}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Week) {    Week w=(Week)o1;    result=this.year - w.getYear().getYear();    if (result == 0) {      result=this.week - w.getWeek();    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  protected double calculateBarW0(CategoryPlot plot,PlotOrientation orientation,Rectangle2D dataArea,CategoryAxis domainAxis,CategoryItemRendererState state,int row,int column){  double space;  if (orientation == PlotOrientation.HORIZONTAL) {    space=dataArea.getHeight();  } else {    space=dataArea.getWidth();  }  double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  int seriesCount=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : getRowCount();  int categoryCount=getColumnCount();  if (seriesCount > 1) {    double seriesGap=space * getItemMargin() / (categoryCount * (seriesCount - 1));    double seriesW=calculateSeriesWidth(space,domainAxis,categoryCount,seriesCount);    barW0=barW0 + row * (seriesW + seriesGap) + (seriesW / 2.0) - (state.getBarWidth() / 2.0);  } else {    barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  }  return barW0;}  }
class C{  public HypergraphSorter(final int numEdges){  this(numEdges,true);}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  return inflater.inflate(R.layout.fragment_course_unit_discussion,container,false);}  }
class C{  public WebView(Context context,AttributeSet attrs){  this(context,attrs,com.android.internal.R.attr.webViewStyle);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:    return N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS;default :  return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);  if ((currentState.tagsToAdd == null || currentState.tagsToAdd.size() == 0) && (currentState.tagsToRemove == null || currentState.tagsToRemove.size() == 0)) {    throw new IllegalArgumentException("tagsToAdd and tagsToRemove parameters are both empty");  }  if (currentState.idsToMatch != null && currentState.idsToMatch.size() > 0 && currentState.typeToMatch != null && currentState.typeToMatch.trim().length() > 0) {    throw new IllegalArgumentException("idsToMatch and typeToMatch parameters cannot be supplied at the same time");  }}  }
class C{  public OkHttp3Downloader(Context context){  this(defaultCacheDir(context));}  }
class C{  public void fullFrame(int pos,int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData) throws BadBytecode {}  }
class C{  private void handleException(Exception e){  System.err.println("Can't write to output stream:");  e.printStackTrace();  close();  System.exit(1);}  }
class C{  public static byte[] strToUtf8Bytes(String val){  int strLen=val.length();  int utfLen=0;  int c, cnt;  for (cnt=0; cnt < strLen; cnt++) {    c=val.charAt(cnt);    if (c >= 0x0001 && c <= 0x007F)     utfLen++; else     if (c > 0x07FF)     utfLen+=3; else     utfLen+=2;  }  byte[] arr=new byte[utfLen];  int position=0;  for (cnt=0; cnt < strLen; cnt++) {    c=val.charAt(cnt);    if (c >= 0x0001 && c <= 0x007F)     arr[position++]=(byte)c; else     if (c > 0x07FF) {      arr[position++]=(byte)(0xE0 | (c >> 12) & 0x0F);      arr[position++]=(byte)(0x80 | (c >> 6) & 0x3F);      arr[position++]=(byte)(0x80 | (c & 0x3F));    } else {      arr[position++]=(byte)(0xC0 | ((c >> 6) & 0x1F));      arr[position++]=(byte)(0x80 | (c & 0x3F));    }  }  return arr;}  }
class C{  private int parseAlgoId(final byte[] b,final int off) throws ParseException {  cryptoAlgoVal_=PrimitivesParser.parseShort(b,off);  if (CryptoAlgorithm.deserialize(cryptoAlgoVal_) == null) {    throw new BadCiphertextException("Invalid algorithm identifier in ciphertext");  }  return Short.SIZE / Byte.SIZE;}  }
class C{  public void dispose(){  if (m_addressSpace.isLoaded()) {    m_addressSpace.getContent().removeListener(m_addressSpaceContentListener);  }  m_addressSpace.removeListener(m_addressSpaceListener);  m_addressSpace.getConfiguration().removeListener(m_addressSpaceConfigurationListener);}  }
class C{  public SampleReader(File file,ParameterFile parameterFile) throws IOException {  this(new MatrixReader(file,parameterFile.size()),parameterFile);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  boolean showSidePanel=!abstractTradePanel.isShowSidePanel();  abstractTradePanel.setShowSidePanel(showSidePanel);  controller.getModel().setUserPreference(BitcoinModel.SHOW_SIDE_PANEL,(Boolean.valueOf(showSidePanel)).toString());  abstractTradePanel.displaySidePanel();}  }
class C{  public static URL urlify(final String helpfile){  final String urlString=Constants.startPath + "manual/html/" + helpfile;  try {    return new File(urlString).toURI().toURL();  } catch (  final MalformedURLException exception) {    CUtilityFunctions.logException(exception);    return null;  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(ACCELERATE_DECELERATE).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static Month asMonth(String month){  Month aMonth=MONTHMAP.get(month.toLowerCase());  if (aMonth == null)   LOGGER.warn("Couldn't parse month {}",month);  return aMonth;}  }
class C{  private IV joinLabels(){  StringBuilder b=new StringBuilder();  String language=null;  boolean first=true;  for (  IV label : bestLabels) {    Literal literal=(Literal)lexiconRelation.getTerm(label);    if (!first) {      b.append(", ");    } else {      first=false;    }    b.append(literal.stringValue());    if (language == null) {      language=literal.getLanguage();    }  }  return mock(new LiteralImpl(b.toString(),language));}  }
class C{  public boolean isSecured(){  return secured;}  }
class C{  @Override public Instances next(){  while (m_Current < m_Providers.length) {    if (m_Providers[m_Current].hasNext()) {      log("Dataset provider #" + (m_Current + 1));      return m_Providers[m_Current].next();    }    m_Current++;  }  return null;}  }
class C{  public static FSDirectory newFSDirectory(String clazzName,Path path){  return newFSDirectory(clazzName,path,FSLockFactory.getDefault());}  }
class C{  private void copyRawToFile(int rawResId,File outFile) throws NotFoundException {  Resources res=mContext.getResources();  InputStream is=null;  try {    is=res.openRawResource(rawResId);  } catch (  NotFoundException e) {    Log.i(LOG_TAG,"Failed to load resource with id: " + rawResId);    throw e;  }  FileUtils.setPermissions(outFile.getPath(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IRWXO,-1,-1);  assertTrue(FileUtils.copyToFile(is,outFile));  FileUtils.setPermissions(outFile.getPath(),FileUtils.S_IRWXU | FileUtils.S_IRWXG | FileUtils.S_IRWXO,-1,-1);}  }
class C{  private String findParentFqcn(TypeElement typeElement,Set<String> parents){  TypeMirror type;  while (true) {    type=typeElement.getSuperclass();    if (type.getKind() == TypeKind.NONE) {      return null;    }    typeElement=(TypeElement)((DeclaredType)type).asElement();    if (parents.contains(typeElement.toString())) {      String packageName=getPackageName(typeElement);      return packageName + "." + getClassName(typeElement,packageName);    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent evt){  final Application app=getApplication();  final String filename=evt.getActionCommand();  if (app.isEnabled()) {    URI uri=new File(filename).toURI();    if (!app.getModel().isAllowMultipleViewsPerURI()) {      for (      View v : app.getViews()) {        if (v.getURI() != null && v.getURI().equals(uri)) {          v.getComponent().requestFocus();          return;        }      }    }    app.setEnabled(false);    View emptyView=app.getActiveView();    if (emptyView == null || emptyView.getURI() != null || emptyView.hasUnsavedChanges()) {      emptyView=null;    }    final View p;    if (emptyView == null) {      p=app.createView();      app.add(p);      app.show(p);    } else {      p=emptyView;    }    openView(p,uri);  }}  }
class C{  private Optional<IcicleRedisResponse> executeOrLoadLuaScript(final Redis redis,final long batchSize){  Optional<IcicleRedisResponse> response=executeLuaScript(redis,batchSize);  if (response.isPresent()) {    return response;  }  redis.loadLuaScript(luaScript);  return executeLuaScript(redis,batchSize);}  }
class C{  @Override public boolean shouldFilter(){  String requestUri=RequestContext.getCurrentContext().getRequest().getRequestURI();  for (  Route route : routeLocator.getRoutes()) {    String serviceUrl=route.getFullPath();    String serviceName=route.getId();    if (requestUri.startsWith(serviceUrl.substring(0,serviceUrl.length() - 2))) {      if (isAuthorizedRequest(serviceUrl,serviceName,requestUri)) {        return false;      }    }  }  return true;}  }
class C{  public boolean intersects(Geometry geom){  if (!rectEnv.intersects(geom.getEnvelopeInternal()))   return false;  EnvelopeIntersectsVisitor visitor=new EnvelopeIntersectsVisitor(rectEnv);  visitor.applyTo(geom);  if (visitor.intersects())   return true;  GeometryContainsPointVisitor ecpVisitor=new GeometryContainsPointVisitor(rectangle);  ecpVisitor.applyTo(geom);  if (ecpVisitor.containsPoint())   return true;  RectangleIntersectsSegmentVisitor riVisitor=new RectangleIntersectsSegmentVisitor(rectangle);  riVisitor.applyTo(geom);  if (riVisitor.intersects())   return true;  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static boolean removeFiles(){  if (Cfg.DEBUG) {    Check.log(TAG + " (removeFiles)");  }  final int fileNum=EvidenceCollector.self().removeHidden();  if (Cfg.DEBUG) {    Check.log(TAG + " (removeFiles): " + fileNum);  }  return true;}  }
class C{  synchronized protected int next(int bits){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return y >>> (32 - bits);}  }
class C{  private String joinEnumNames(String separator){  E[] enumTypes=enumClass.getEnumConstants();  StringBuilder sb=new StringBuilder();  for (int i=0; i < enumTypes.length; ++i) {    if (i > 0) {      sb.append(separator);    }    sb.append(enumTypes[i].name());  }  return sb.toString();}  }
class C{  public Builder backButtonSkips(boolean backButtonSkips){  this.backButtonSkips=backButtonSkips;  return this;}  }
class C{  @SuppressWarnings({"ConstantConditions","EmptyTryBlock","UnusedDeclaration"}) public void testCreate() throws Exception {  create(igfs,paths(DIR,SUBDIR),null);  createFile(igfs,FILE,true,chunk);  checkFile(igfs,igfsSecondary,FILE,chunk);  try (IgfsOutputStream os=igfs.create(new IgfsPath("/r"),false)){    checkExist(igfs,igfsSecondary,new IgfsPath("/r"));    assert igfs.info(new IgfsPath("/r")).isFile();  }   try (IgfsOutputStream os=igfs.create(new IgfsPath("/k/l"),false)){    checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));    assert igfs.info(new IgfsPath("/k/l")).isFile();  }   try {    try (IgfsOutputStream os=igfs.create(new IgfsPath("/k/l"),false)){    }     fail("Exception expected");  } catch (  IgniteException e) {  }  checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));  assert igfs.info(new IgfsPath("/k/l")).isFile();  try {    try (IgfsOutputStream os=igfs.create(new IgfsPath("/k/l/m"),true)){    }     fail("Exception expected");  } catch (  IgniteException e) {  }  checkNotExist(igfs,igfsSecondary,new IgfsPath("/k/l/m"));  checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));  assert igfs.info(new IgfsPath("/k/l")).isFile();  try {    try (IgfsOutputStream os=igfs.create(new IgfsPath("/k/l/m/n/o/p"),true)){    }     fail("Exception expected");  } catch (  IgniteException e) {  }  checkNotExist(igfs,igfsSecondary,new IgfsPath("/k/l/m"));  checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));  assert igfs.info(new IgfsPath("/k/l")).isFile();  igfs.mkdirs(new IgfsPath("/x/y"),null);  try {    try (IgfsOutputStream os=igfs.create(new IgfsPath("/x/y"),true)){    }     fail("Exception expected");  } catch (  IgniteException e) {  }  checkExist(igfs,igfsSecondary,new IgfsPath("/x/y"));  assert igfs.info(new IgfsPath("/x/y")).isDirectory();  try (IgfsOutputStream os=igfs.create(new IgfsPath("/x/y/f"),false)){    assert igfs.info(new IgfsPath("/x/y/f")).isFile();  }   try (IgfsOutputStream os=igfs.create(new IgfsPath("/x/y/z/f"),false)){    assert igfs.info(new IgfsPath("/x/y/z/f")).isFile();  }   try (IgfsOutputStream os=igfs.create(new IgfsPath("/x/y/z/t/f"),false)){    assert igfs.info(new IgfsPath("/x/y/z/t/f")).isFile();  }   try (IgfsOutputStream os=igfs.create(new IgfsPath("/x/y/z/t/t2/t3/t4/t5/f"),false)){    assert igfs.info(new IgfsPath("/x/y/z/t/t2/t3/t4/t5/f")).isFile();  } }  }
class C{  public JSearchPanel(SearchTupleSet search,String field,boolean monitorKeystrokes){  this(null,search,new String[]{field},false,monitorKeystrokes);}  }
class C{  public static final boolean isNCName(String name){  int nameLength=name.length();  if (nameLength == 0) {    return false;  }  char c=name.charAt(0);  if (isNCNameStartChar(c)) {    for (int i=1; i < nameLength; i++) {      c=name.charAt(i);      if (!isNCNameChar(c)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public InputTextMessageContent.InputTextMessageContentBuilder disableWebPagePreview(boolean disableWebPagePreview){  this.disable_web_page_preview=disableWebPagePreview;  return this;}  }
class C{  private State applyPatch(State current,State patch){  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    if (debug != null) {      debug.markGoal(initial);      debug.visitNode(new Legend("Breadth-First Search Processed:" + 0 + " , open:"+ 0));    }    return new Solution(initial,goal,debug);  }  INodeSet open=StateStorageFactory.create(StateStorageFactory.QUEUE);  INode copy=initial.copy();  open.insert(copy);  INodeSet closed=StateStorageFactory.create(closedStorage);  if (debug != null) {    debug.visitNode(copy);    debug.markStart(copy);  }  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      numMoves++;      if (closed.contains(successor) != null) {        continue;      }      successor.storedData(new Transition(move,n));      if (debug != null) {        debug.visitNode(successor);        debug.visitEdge(n,successor);      }      if (successor.equals(goal)) {        if (debug != null) {          debug.markGoal(successor);          for (Iterator<INode> it2=open.iterator(); it2.hasNext(); ) {            debug.markUnexplored(it2.next());          }        }        numOpen=open.size();        numClosed=closed.size();        return new Solution(initial,successor,debug);      }      open.insert(successor);    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,debug,false);}  }
class C{  public void run(){  while (true) {    try {      handleOneIncomingReply();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  protected void resetHeaderHeight(){  int height=mHeaderView.getVisiableHeight();  System.out.println("height = " + height);  System.out.println("mHeadViewHeight = " + mHeaderViewHeight);  if (height == 0)   return;  if (mPullRefreshing && height <= mHeaderViewHeight) {    return;  }  int finalHeight=0;  if (mPullRefreshing && height > mHeaderViewHeight) {    finalHeight=mHeaderViewHeight;  }  Log.d("xlistview","resetHeaderHeight-->" + (finalHeight - height));  mScrollBack=SCROLLBACK_HEADER;  mScroller.startScroll(0,height,0,finalHeight - height,SCROLL_DURATION);  invalidate();}  }
class C{  public String toString(){  return user;}  }
class C{  @Override public void render(final int text_fill_type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){  if (cached_current_path != null) {    final GeneralPath[] paths=cached_current_path.get();    for (    final GeneralPath path : paths) {      if (path == null) {        break;      }      if ((text_fill_type == GraphicsState.FILL)) {        if (isStroked) {          final Paint fillPaint=g2.getPaint();          if (!(fillPaint instanceof PdfTexturePaint) && ((Color)strokePaint).getRGB() != ((Color)fillPaint).getRGB() && strokedPositions.containsKey(String.valueOf((int)g2.getTransform().getTranslateX()) + '-' + (int)g2.getTransform().getTranslateY())) {            final Stroke fillStroke=g2.getStroke();            g2.setPaint(strokePaint);            float w=(float)(scaling / g2.getTransform().getScaleX());            if (w < 0) {              w=-w;            }            g2.setStroke(new BasicStroke(w));            g2.draw(path);            g2.setPaint(fillPaint);            g2.setStroke(fillStroke);          }        }        g2.fill(path);      }      if (text_fill_type == GraphicsState.STROKE) {        if (text_fill_type != GraphicsState.FILL && scaling > 1.0f) {          float w=(float)(scaling / g2.getTransform().getScaleX());          if (w < 0) {            w=-w;          }          g2.setStroke(new BasicStroke(w));        }        g2.draw(path);        strokePaint=g2.getPaint();        strokedPositions.put(String.valueOf((int)g2.getTransform().getTranslateX()) + '-' + (int)g2.getTransform().getTranslateY(),"x");      }    }  }}  }
class C{  public void doDoubleClickAction(){  doDoubleClickAction(null);}  }
class C{  private String keyManagerFactory(){  return KeyManagerFactory.getDefaultAlgorithm();}  }
class C{  private void parseAttributes(Context context,AttributeSet attrs){  if (this.isInEditMode()) {    return;  }  final TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.CircularProgressView);  if (array != null) {    this.borderOffset=array.getInt(R.styleable.CircularProgressView_borderOffset,this.borderOffset);    this.progressColor=array.getInt(R.styleable.CircularProgressView_progressColor,this.progressColor);    this.progressTextSize=array.getInt(R.styleable.CircularProgressView_progressTextSize,this.progressTextSize);    this.progressFont=array.getString(R.styleable.CircularProgressView_progressTextFont);    this.parseText(array.getString(R.styleable.CircularProgressView_progressText));    this.fadeTimeMs=array.getInt(R.styleable.CircularProgressView_fadeTimeMs,this.fadeTimeMs);    this.setAlpha(this.fadeTimeMs > 0f ? 0f : 1f);    array.recycle();  }}  }
class C{  public static boolean isPower2(int n){  return (n & (n - 1)) == 0;}  }
class C{  public boolean allMatch(Predicate<Object> predicate){  return FluentIterable.from(this.nodes).allMatch(predicate);}  }
class C{  private void showContacts(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && checkSelfPermission(Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {    requestPermissions(new String[]{Manifest.permission.READ_CONTACTS},PERMISSIONS_REQUEST_READ_CONTACTS);  } else {    List<String> contacts=getContactNames();    ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,contacts);    lstNames.setAdapter(adapter);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double alpha;  double globalMean;  double predefinedStdDev;  double yij=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  alpha=Double.parseDouble(args[4]);  if (alpha < 0 || alpha > 1.0) {    showFeedback("The alpha parameter should be within the range of \n0.0 and 1.0. Please reset and try again.");    return;  }  globalMean=Double.parseDouble(args[5]);  predefinedStdDev=Double.parseDouble(args[6]);  filterRounded=Boolean.parseBoolean(args[7]);  reflectAtBorders=Boolean.parseBoolean(args[8]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);              if (alpha >= 0 && alpha <= 1) {                yij=(alpha * globalMean) + ((1 - alpha) * average) + (z - average) * (predefinedStdDev / (stdDev + 1));                outputFile.setValue(row,col,yij);              }            } else {              outputFile.setValue(row,col,noData);            }          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void print(char x){  out.print(x);  out.flush();}  }
class C{  public void testByteChannel() throws IOException {  InfoStreamListener stream=new InfoStreamListener("newByteChannel");  Path dir=wrap(createTempDir(),stream);  SeekableByteChannel channel=Files.newByteChannel(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);  assertTrue(stream.sawMessage());  channel.close();  try {    Files.newByteChannel(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public T lastItem(){  if (mDataList == null || mDataList.size() == 0) {    return null;  }  return mDataList.get(mDataList.size() - 1);}  }
class C{  MetricProcessor(BatchService batchService){  this.batchService=batchService;}  }
class C{  public void readCache(){  final File userConfigFile=FileSystemService.getUserConfigFile(CACHE_FILE_NAME);  if (!userConfigFile.exists()) {    return;  }  LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.security.Wallet.reading_secrets_file");  Document doc;  try {    doc=XMLTools.parse(userConfigFile);  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.security.Wallet.reading_secrets_file_error",e),e);    return;  }  readCache(doc);}  }
class C{  public static double[] minus(double[] v1,double[] v2){  checkLength(v2,v1.length);  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] - v2[i];  return array;}  }
class C{  public static String UTF8toUTF16(byte[] utf8,int offset,int len){  char[] out=new char[len];  int n=UTF8toUTF16(utf8,offset,len,out,0);  return new String(out,0,n);}  }
class C{  public void addAudioFileTypes(String type){  if (!type.startsWith(".")) {    type="." + type;  }  if (!audioFileTypes.contains(type)) {    audioFileTypes.add(type);    firePropertyChange(AUDIO_FILE_TYPE,null,audioFileTypes);  }}  }
class C{  private static boolean emptyMeet(Type p,Type q,Unit unit){  if (p == null || q == null) {    return false;  }  if (p.isExactlyNothing() || q.isExactlyNothing()) {    return true;  }  TypeDeclaration pd=p.getDeclaration();  TypeDeclaration qd=q.getDeclaration();  if (q.isUnion()) {    for (    Type t : q.getCaseTypes()) {      if (!emptyMeet(p,t,unit)) {        return false;      }    }    return true;  } else   if (qd.getCaseTypes() != null) {    boolean all=true;    for (    Type t : qd.getCaseTypes()) {      if (t.getDeclaration().isSelfType() || !emptyMeet(p,t,unit)) {        all=false;        break;      }    }    if (all)     return true;  }  if (p.isUnion()) {    for (    Type t : p.getCaseTypes()) {      if (!emptyMeet(q,t,unit)) {        return false;      }    }    return true;  } else   if (pd.getCaseTypes() != null) {    boolean all=true;    for (    Type t : pd.getCaseTypes()) {      if (t.getDeclaration().isSelfType() || !emptyMeet(q,t,unit)) {        all=false;        break;      }    }    if (all)     return true;  }  if (q.isIntersection() || q.isTypeParameter()) {    for (    Type t : q.getSatisfiedTypes()) {      if (emptyMeet(p,t,unit)) {        return true;      }    }    return false;  }  if (p.isIntersection() || p.isTypeParameter()) {    for (    Type t : p.getSatisfiedTypes()) {      if (emptyMeet(q,t,unit)) {        return true;      }    }    return false;  }  if (p.isClass() && q.isClass() || p.isInterface() && q.isNull() || q.isInterface() && p.isNull()) {    if (!qd.inherits(pd) && !pd.inherits(qd)) {      return true;    }  }  if (pd.isFinal()) {    if (pd.getTypeParameters().isEmpty() && !q.involvesTypeParameters() && !p.isSubtypeOf(q)&& !(qd instanceof UnknownType)) {      return true;    }    if (q.isClassOrInterface() && !pd.inherits(qd)) {      return true;    }  }  if (qd.isFinal()) {    if (qd.getTypeParameters().isEmpty() && !p.involvesTypeParameters() && !q.isSubtypeOf(p)&& !(p.isUnknown())) {      return true;    }    if (p.isClassOrInterface() && !qd.inherits(pd)) {      return true;    }  }  Interface st=unit.getSequentialDeclaration();  if (q.isClassOrInterface() && pd.inherits(st) && !qd.inherits(st)&& !st.inherits(qd) || p.isClassOrInterface() && qd.inherits(st) && !pd.inherits(st)&& !st.inherits(pd)) {    return true;  }  Interface nst=unit.getSequenceDeclaration();  if (pd.inherits(nst) && qd.inherits(st) || qd.inherits(nst) && pd.inherits(st)) {    Type pet=unit.getSequentialElementType(p);    Type qet=unit.getSequentialElementType(q);    if (emptyMeet(pet,qet,unit)) {      return true;    }  }  Class td=unit.getTupleDeclaration();  if (pd.inherits(td) && qd.inherits(td)) {    List<Type> pal=p.getTypeArgumentList();    List<Type> qal=q.getTypeArgumentList();    if (pal.size() >= 3 && qal.size() >= 3) {      if (emptyMeet(pal.get(1),qal.get(1),unit) || emptyMeet(pal.get(2),qal.get(2),unit)) {        return true;      }    }  }  if (pd.inherits(td) && qd.inherits(st)) {    List<Type> pal=p.getTypeArgumentList();    Type qet=unit.getSequentialElementType(q);    if (pal.size() >= 3) {      if (emptyMeet(pal.get(1),qet,unit) || emptyMeet(pal.get(2),unit.getSequentialType(qet),unit)) {        return true;      }    }  }  if (qd.inherits(td) && pd.inherits(st)) {    List<Type> qal=q.getTypeArgumentList();    Type pet=unit.getSequentialElementType(p);    if (qal.size() >= 3) {      if (emptyMeet(qal.get(1),pet,unit) || emptyMeet(qal.get(2),unit.getSequentialType(pet),unit)) {        return true;      }    }  }  return false;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.571 -0500",hash_original_method="5333FFC8A800A9BDD5C93C0D81F44606",hash_generated_method="8ABBA94AFCE96480E8CA6B2F52A5AE36") public Paint(Paint paint){  mNativePaint=native_initWithPaint(paint.mNativePaint);  setClassVariablesFrom(paint);}  }
class C{  public static String toHexString(final byte[] data){  return toHexString(data,0,data.length);}  }
class C{  public jMatrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  public void invite(Player player,Player targetPlayer){  openInvites.put(targetPlayer.getName(),Long.valueOf(System.currentTimeMillis()));  targetPlayer.addEvent(new GroupInviteEvent(player.getName(),false));  targetPlayer.notifyWorldAboutChanges();}  }
class C{  private void migrateBlockVolumes(){  log.info("Migrating BlockConsistencyGroup references on Volume objects.");  DbClient dbClient=getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs,true);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (volumes.hasNext()) {    blockObjects.add(volumes.next());  }  migrateBlockObjects(blockObjects);}  }
class C{  JavaFile brewClassDataFile(){  CodeBlock.Builder staticBlockBuilder=CodeBlock.builder();  String addRealNameStmt="realNames.add($S)";  staticBlockBuilder.add("// Add all real names of classes.\n");  for (  String realName : realClassNames)   staticBlockBuilder.addStatement(addRealNameStmt,realName);  String addQueryableNameStmt="queryable.add($S)";  staticBlockBuilder.add("// Add names of classes annotated with @Queryable.\n");  for (  String queryableName : queryable)   staticBlockBuilder.addStatement(addQueryableNameStmt,queryableName);  String addClassStmt="classMap.put($S, $T.class)";  staticBlockBuilder.add("// Add class objects.\n");  for (  Map.Entry<String,ClassName> entry : classMap.entrySet())   staticBlockBuilder.addStatement(addClassStmt,entry.getKey(),entry.getValue());  String addVisibleNameStmt="visibleNames.put($S, $S)";  staticBlockBuilder.add("// Add visible names.\n");  for (  Map.Entry<String,String> entry : visibleNames.entrySet())   staticBlockBuilder.addStatement(addVisibleNameStmt,entry.getKey(),entry.getValue());  String addFieldDataStmt="fieldData.put($S, new $T())";  staticBlockBuilder.add("// Add field data classes.\n");  for (  Map.Entry<String,FieldDataBuilder> entry : fieldData.entrySet())   staticBlockBuilder.addStatement(addFieldDataStmt,entry.getKey(),entry.getValue().getClassName());  CodeBlock staticBlock=staticBlockBuilder.build();  TypeSpec clazz=TypeSpec.classBuilder(C.GEN_CLASS_DATA_CLASS_NAME).superclass(TypeNames.CLASS_DATA).addModifiers(Modifier.FINAL).addStaticBlock(staticBlock).build();  messager.printMessage(Diagnostic.Kind.NOTE,"Creating " + C.GEN_CLASS_DATA_CLASS_NAME);  return JavaFile.builder(C.GEN_PKG,clazz).addFileComment(C.GEN_CODE_FILE_COMMENT).build();}  }
class C{  private void addWebsphereDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("WEB-INF/ibm-web-bnd.xmi");    if (in != null) {      IbmWebBndXmi descr=IbmWebBndXmiIo.parseIbmWebBndXmi(in);      if (descr != null) {        this.webXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public void openCamera(Activity activity,String path){  openCamera(activity,path,"IMG_" + System.currentTimeMillis() + ".jpg");}  }
class C{  private void initialize(){  cardLayout=new CardLayout();  this.setLayout(cardLayout);  this.setName("AlertView");  if (!editable) {    this.add(getDefaultPane(),getDefaultPane().getName());  }  this.add(getAlertPane(),getAlertPane().getName());}  }
class C{  public static synchronized TypeReference findOrCreateInternal(ClassLoader cl,Atom tn){  TypeReference key=new TypeReference(cl,tn,nextId);  TypeReference val=dictionary.get(key);  if (val == null) {    val=key;    nextId++;    int column=val.id >> LOG_ROW_SIZE;    if (column == types.length) {      TypeReference[][] tmp=new TypeReference[column + 1][];      for (int i=0; i < column; i++) {        tmp[i]=types[i];      }      types=tmp;      types[column]=new TypeReference[1 << LOG_ROW_SIZE];    }    types[column][val.id & ROW_MASK]=val;    dictionary.add(val);  }  return val;}  }
class C{  public TomcatManager(URL url,String username){  this(url,username,"");}  }
class C{  public void addCandle(Candle candle){  this.candles.add(candle);}  }
class C{  public void addTarget(IStreamTarget<T> target) throws AdeFlowException {  if (m_targets.contains(target)) {    throw new AdeFlowException(target + " has already been added as a target!");  }  m_targets.add(target);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VERSIONS;case 2:  return TIMESTAMP;default :return null;}}  }
class C{  public T recycle(View root){  this.root=root;  this.view=root;  reset();  this.context=null;  return self();}  }
class C{  public BufferedScanner(Scanner usedScanner) throws IllegalArgumentException {  if (usedScanner == null)   throw new IllegalArgumentException("The Scanner passed to BufferedScanner may not be null!");  fScanner=usedScanner;  fTokenQueue=new LinkedList<ScannerToken<? extends Object>>();}  }
class C{  private static boolean mightCombineWithDecimalPoint(String token){  char last=token.charAt(token.length() - 1);  return ('0' <= last && last <= '9') && !ParserBase.isJavascriptIdentifier(token.substring(0,1));}  }
class C{  public void initUIEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int detailArg){  initEvent(typeArg,canBubbleArg,cancelableArg);  this.view=viewArg;  this.detail=detailArg;}  }
class C{  public boolean hasMatches(String type){  if (hasMatchCache.containsKey(type)) {    return hasMatchCache.get(type);  }  EntryType entryType=EntryType.valueOf(type);  if (entryType == null) {    throw new IllegalArgumentException("The argument to hasMatches MUST be the name of a member of the uk.ac.ebi.interpro.scan.web.model.EntryType enum.");  }  for (  final SimpleEntry entry : entries) {    if (entryType == entry.getType()) {      hasMatchCache.put(type,true);      return true;    }  }  hasMatchCache.put(type,false);  return false;}  }
class C{  private void addRandomPoint(final int width,final int height){  Point location=geometryFactory.createPoint(new Coordinate(random.nextInt(width),random.nextInt(height)));  objects.addGeometry(new MasonGeometry(location));}  }
class C{  @Override public void invalidateLayout(Container target){}  }
class C{  public CudaException(String message){  super(message);}  }
class C{  public MethodRefConstant(ConstantPool pool,int index,int classIndex,int nameAndTypeIndex){  super(pool,index);  _classIndex=classIndex;  _nameAndTypeIndex=nameAndTypeIndex;}  }
class C{  public final double trace(){  int i, l;  double t;  if (nRow < nCol) {    l=nRow;  } else {    l=nCol;  }  t=0.0;  for (i=0; i < l; i++) {    t+=values[i][i];  }  return t;}  }
class C{  final public SyntaxTreeNode Recursive() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t;  bpa("Recursive");  expecting="RECURSIVE";  t=jj_consume_token(RECURSIVE);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier, operator or _";  tn=ConstantDeclarationItems();  addHeir(tn);  expecting=",";  label_6:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[15]=jj_gen;break label_6;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, operator or _";tn=ConstantDeclarationItems();addHeir(tn);expecting="`,' or `)'";}sn=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Recursive,sn);}throw new Error("Missing return statement in function");}  }
class C{  public void fullyConnect(Endpoint endpoint){  throw new UnsupportedOperationException();}  }
class C{  public boolean[][] fillIn(int[] order,boolean[][] bAdjacencyMatrix){  int nNodes=bAdjacencyMatrix.length;  int[] inverseOrder=new int[nNodes];  for (int iNode=0; iNode < nNodes; iNode++) {    inverseOrder[order[iNode]]=iNode;  }  for (int i=nNodes - 1; i >= 0; i--) {    int iNode=order[i];    for (int j=0; j < i; j++) {      int iNode2=order[j];      if (bAdjacencyMatrix[iNode][iNode2]) {        for (int k=j + 1; k < i; k++) {          int iNode3=order[k];          if (bAdjacencyMatrix[iNode][iNode3]) {            if (m_debug && (!bAdjacencyMatrix[iNode2][iNode3] || !bAdjacencyMatrix[iNode3][iNode2])) {              System.out.println("Fill in " + iNode2 + "--"+ iNode3);            }            bAdjacencyMatrix[iNode2][iNode3]=true;            bAdjacencyMatrix[iNode3][iNode2]=true;          }        }      }    }  }  return bAdjacencyMatrix;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  @Override public Instances generateExamples() throws Exception {  getGenerator().setOptions(getGenerator().getOptions());  getGenerator().generateRandomNetwork();  getGenerator().generateInstances();  getGenerator().m_Instances.renameAttribute(0,"class");  getGenerator().m_Instances.setRelationName(getRelationNameToUse());  return getGenerator().m_Instances;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.658 -0500",hash_original_method="A55E654199D420BD447FD45C56E388DE",hash_generated_method="04E26C740CBB268443E88B1C4173063B") @Override public final boolean equals(Object socketAddr){  if (this == socketAddr) {    return true;  }  if (!(socketAddr instanceof InetSocketAddress)) {    return false;  }  InetSocketAddress iSockAddr=(InetSocketAddress)socketAddr;  if (port != iSockAddr.port) {    return false;  }  if ((addr == null) && (iSockAddr.addr == null)) {    return hostname.equals(iSockAddr.hostname);  }  if (addr == null) {    return false;  }  return addr.equals(iSockAddr.addr);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  double bufferSize=1;  boolean bufferInGridCells=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      bufferSize=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("cells")) {        bufferInGridCells=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}if (bufferInGridCells) {bufferSize=bufferSize * bufferSize;} else {bufferSize=(bufferSize / gridRes) * (bufferSize / gridRes);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (image.getValue(row,col) != noData) {z=outputImage.getValue(row,col);if (z <= bufferSize) {outputImage.setValue(row,col,allocation.getValue(row,col));} else {outputImage.setValue(row,col,0);}} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public EventType(int eventCode){  this();  this.eventCode=eventCode;}  }
class C{  private final void lockRoot(){  if (!U.compareAndSwapInt(this,LOCKSTATE,0,WRITER))   contendedLock();}  }
class C{  public boolean simulateConnections(){  return this.simulateConnections;}  }
class C{  public VisualTable(Visualization vis,String group,Schema schema,Class tupleType){  super(tupleType);  init(vis,group,schema);}  }
class C{  public T caretDecoding(boolean enable){  caretDecoding=enable;  return this_;}  }
class C{  public static void restore(Context ctx){  if (isAdaptiveBacklightSupported()) {    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ctx);    final boolean enabled=prefs.getBoolean(KEY_ADAPTIVE_BACKLIGHT,true);    if (!AdaptiveBacklight.setEnabled(enabled)) {      Log.e(TAG,"Failed to restore adaptive backlight settings.");    } else {      Log.d(TAG,"Adaptive backlight settings restored.");    }  }}  }
class C{  public MediaInfo(){}  }
class C{  private void mergeUpdates(BSPPeer<LongWritable,FloatVectorWritable,NullWritable,NullWritable,ParameterMessage> peer) throws IOException {  int numMessages=peer.getNumCurrentMessages();  boolean converge=false;  if (numMessages == 0) {    converge=true;    return;  }  double avgTrainingError=0;  FloatMatrix[] matricesUpdates=null;  FloatMatrix[] prevMatricesUpdates=null;  while (peer.getNumCurrentMessages() > 0) {    ParameterMessage message=peer.getCurrentMessage();    if (matricesUpdates == null) {      matricesUpdates=message.getCurMatrices();      prevMatricesUpdates=message.getPrevMatrices();    } else {      LayeredNeuralNetwork.matricesAdd(matricesUpdates,message.getCurMatrices());      LayeredNeuralNetwork.matricesAdd(prevMatricesUpdates,message.getPrevMatrices());    }    avgTrainingError+=message.getTrainingError();  }  if (numMessages > 1) {    avgTrainingError/=numMessages;    for (int i=0; i < matricesUpdates.length; ++i) {      matricesUpdates[i]=matricesUpdates[i].divide(numMessages);      prevMatricesUpdates[i]=prevMatricesUpdates[i].divide(numMessages);    }  }  this.inMemoryModel.updateWeightMatrices(matricesUpdates);  this.inMemoryModel.setPrevWeightMatrices(prevMatricesUpdates);  if (peer.getSuperstepCount() > 0 && iterations % convergenceCheckInterval == 0) {    if (prevAvgTrainingError < curAvgTrainingError) {      converge=true;    }    prevAvgTrainingError=curAvgTrainingError;    LOG.info("Training error: " + curAvgTrainingError + " at "+ (iterations)+ " iteration.");    curAvgTrainingError=0;  }  curAvgTrainingError+=avgTrainingError / convergenceCheckInterval;  this.isConverge=converge;  if (iterations < maxIterations) {    for (    String peerName : peer.getAllPeerNames()) {      ParameterMessage msg=new ParameterMessage(0,converge,this.inMemoryModel.getWeightMatrices(),this.inMemoryModel.getPrevMatricesUpdates());      if (!peer.getPeerName().equals(peerName))       peer.send(peerName,msg);    }  }}  }
class C{  public boolean supportsCustomEditor(){  return true;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__STATE_1:getState_1().clear();getState_1().addAll((Collection<? extends State_>)newValue);return;case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__TRACE_1:getTrace_1().clear();getTrace_1().addAll((Collection<? extends Trace_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static final boolean isJavaOperator(char ch){  return (ch <= '~') && (dataTable[ch] & JAVA_OPERATOR_MASK) > 0;}  }
class C{  public BrowsableEditableData(ListProvider dataprov,SaveProvider saveprov,EditorRecord ed,DirtyManager dirty){  this(new BrowsableData(dataprov,saveprov,null),ed,dirty);}  }
class C{  public static int binarySearch(char[] array,int startIndex,int endIndex,char value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public static Appendable format(double d,int digits,boolean scientific,boolean showZero,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  if (a instanceof TextBuilder)   return ((TextBuilder)a).append(d,digits,scientific,showZero);  TextBuilder tb=new TextBuilder();  tb.append(d,digits,scientific,showZero);  return a.append(tb);}  }
class C{  public final static double plus(double left,double right){  return left + right;}  }
class C{  public static List<HistoryDTO> transformToDto(List<History> list){  if (list == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<HistoryDTO> result=new ArrayList<HistoryDTO>();  for (  History history : list) {    result.add(transformToDto(history));  }  return result;}  }
class C{  private final void consumeExpected(String expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{expected,m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  public int indexOf(int data){  for (int i=0; i < size; i++) {    if (array[i] == data) {      return i;    }  }  return -1;}  }
class C{  private static String generateDA(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String wBit,final IOperandTreeNode rootNodeOfRegisterList){  final String startAddress=environment.getNextVariableString();  final String endAddress=environment.getNextVariableString();  final String tmpStartAddress=environment.getNextVariableString();  long baseOffset=offset;  final Integer numberOfSetBits=rootNodeOfRegisterList.getChildren().size();  instructions.add(ReilHelpers.createSub(baseOffset++,dw,registerNodeValue,wd,String.valueOf((numberOfSetBits * 4)),dw,tmpStartAddress));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,tmpStartAddress,wd,String.valueOf(4),dw,startAddress));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue,dw,endAddress));  if (wBit.equals("2")) {    instructions.add(ReilHelpers.createStr(baseOffset++,dw,tmpStartAddress,dw,registerNodeValue));  }  return startAddress;}  }
class C{  private static void err(String message,Throwable t){  if (!LOGGER.isErrorEnabled()) {    System.err.println(message);    t.printStackTrace();  } else {    LOGGER.error(message,t);  }}  }
class C{  public void translateX(double x){  setX(getX() + x);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.789 -0500",hash_original_method="A6990485F5A51C8B42D23EBD17A2489C",hash_generated_method="2A6442F3D03BF7CBAC6B03C1CC234357") public static Bitmap decodeFileDescriptor(FileDescriptor fd,Rect outPadding,Options opts){  if (nativeIsSeekable(fd)) {    Bitmap bm=nativeDecodeFileDescriptor(fd,outPadding,opts);    if (bm == null && opts != null && opts.inBitmap != null) {      throw new IllegalArgumentException("Problem decoding into existing bitmap");    }    return finishDecode(bm,outPadding,opts);  } else {    FileInputStream fis=new FileInputStream(fd);    try {      return decodeStream(fis,outPadding,opts);    }  finally {      try {        fis.close();      } catch (      Throwable t) {      }    }  }}  }
class C{  @Override public synchronized void write(byte b[],int off,int len) throws IOException {  String s=new String(b,off,len);  appendMessage(s);  flushTextArea();}  }
class C{  protected void messageReceived(){synchronized (this) {    this.receiveCount++;synchronized (this.messageReceiveSync) {      this.messageReceiveSync.notifyAll();    }  }}  }
class C{  @Override public void collectStatisticsInformation(AccessProfile accessProfile) throws BaseCollectionException {  try {    _logger.info("Access Profile Details :" + accessProfile.toString());    _wbemClient=getCIMClient(accessProfile);    initMap(accessProfile);    StorageSystem storageSystem=queryStorageSystem(accessProfile);    String providerVersion=getProviderVersionString(storageSystem);    if (null != providerVersion) {      _keyMap.put(Constants.VERSION,providerVersion);      _keyMap.put(Constants.IS_NEW_SMIS_PROVIDER,isSMIS8XProvider(providerVersion));    }    Namespace _ns=null;    _ns=(Namespace)namespaces.getNsList().get(METERING);    _logger.info("CIMClient initialized successfully");    executor.setKeyMap(_keyMap);    executor.execute(_ns);    _logger.info("Started Injection of Stats to Cassandra");    dumpStatRecords();    injectStats();  } catch (  Exception e) {    throw new SMIPluginException(e.getMessage());  } finally {    releaseResources();  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_ASSIGNMENT_ANNOTATION_LIST;}  }
class C{  public static void isDN(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_DN,flag);}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public JsonWriter endObject() throws IOException {  return close(JsonScope.EMPTY_OBJECT,JsonScope.NONEMPTY_OBJECT,"}");}  }
class C{  public ForumPostConfig fetch(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/check-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig post=new ForumPostConfig();    post.parseXML(root);    return post;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public boolean hasFeedLink(){  return hasExtension(FeedLink.class);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public boolean isLegalOutputEvent(Method inputEvent,Method outputEvent){  if (!eventBlocks.containsKey(inputEvent))   return false;  for (  Method m : eventBlocks.get(inputEvent)) {    if (m.isMethodCallEnabled(outputEvent)) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private ColtDataBox(int rows,int cols){  this.data=new TetradMatrix(rows,cols);  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      data.set(i,j,Double.NaN);    }  }}  }
class C{  private synchronized CimConnection addConnection(String smisIPAddress,String port){  CimConnection connection=null;  try {    connection=_connectionManager.getConnection(smisIPAddress,Integer.parseInt(port));    if (null == connection) {      String smisAltId=smisIPAddress + "-" + port;      List<StorageProvider> providers=CustomQueryUtility.getActiveStorageProvidersByProviderId(_dbClient,smisAltId);      if (providers.isEmpty()) {        _log.error("No SMISProvider found with id {}",smisAltId);        return connection;      }      StorageProvider smisProvider=providers.get(0);      final CimConnectionInfo connInfo=new CimConnectionInfo();      connInfo.setHost(smisProvider.getIPAddress());      connInfo.setPort(smisProvider.getPortNumber());      connInfo.setUser(smisProvider.getUserName());      connInfo.setPassword(smisProvider.getPassword());      connInfo.setUseSSL(smisProvider.getUseSSL());      if (smisProvider.getInterfaceType().equals(StorageProvider.InterfaceType.ibmxiv.name()) || "IBM".equals(smisProvider.getManufacturer())) {        connInfo.setType(CimConstants.CIM_CONNECTION_TYPE);        connInfo.setImplNS(CimConstants.DFLT_IBM_CIM_CONNECTION_IMPL_NS);      } else {        connInfo.setType(CimConstants.ECOM_CONNECTION_TYPE);        connInfo.setImplNS(CimConstants.DFLT_CIM_CONNECTION_IMPL_NS);      }      connInfo.setInteropNS(CimConstants.DFLT_CIM_CONNECTION_INTEROP_NS);      _connectionManager.addConnection(connInfo);      connection=_connectionManager.getConnection(smisIPAddress,Integer.parseInt(port));      _log.info("Connection Added to Cache {}",ConnectionManager.generateConnectionCacheKey(smisProvider.getIPAddress(),smisProvider.getPortNumber()));    }  } catch (  ConnectionManagerException ex) {    _log.error("Exception occurred while adding connections due to ",ex);  }catch (  Exception ex) {    _log.error("Exception occurred while adding connections due to ",ex);  }  return connection;}  }
class C{  public boolean isBound(){  return isBound;}  }
class C{  public Flockers(long seed){  super(seed);}  }
class C{  public TDoubleDoubleHashMapDecorator(TDoubleDoubleHashMap map){  super();  this._map=map;}  }
class C{  public void addTable(TableKelp tableKelp,String sql,BackupKelp backupCb){  RowCursor cursor=_metaTable.cursor();  cursor.setBytes(1,tableKelp.tableKey(),0);  cursor.setString(2,tableKelp.getName());  cursor.setString(3,sql);  _metaTable.put(cursor,backupCb,Result.ignore());}  }
class C{  public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName,Directory directory) throws IOException {  final SegmentInfos si=readSegmentInfos(segmentsFileName,directory);  try (Lock writeLock=directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)){    int foundSegmentFiles=0;    for (    final String file : directory.listAll()) {      if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {        foundSegmentFiles++;        if (file.equals(si.getSegmentsFileName()) == false) {          directory.deleteFile(file);        }      }    }    assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);    if (foundSegmentFiles == 0) {      throw new IllegalStateException("no commit found in the directory");    }  }   final CommitPoint cp=new CommitPoint(si,directory);  try (IndexWriter writer=new IndexWriter(directory,new IndexWriterConfig(Lucene.STANDARD_ANALYZER).setIndexCommit(cp).setCommitOnClose(false).setMergePolicy(NoMergePolicy.INSTANCE).setOpenMode(IndexWriterConfig.OpenMode.APPEND))){  }   return si;}  }
class C{  @SuppressWarnings("unchecked") @Override public void preProcess(ResultProducer rp) throws Exception {  m_RP=rp;  if ((m_OutputFile == null) || (m_OutputFile.getName().equals("-"))) {    m_Out=new PrintWriter(System.out,true);  } else {    m_Out=new PrintWriter(new BufferedOutputStream(new FileOutputStream(m_OutputFile)),true);  }  Object[] keyTypes=m_RP.getKeyTypes();  Object[] resultTypes=m_RP.getResultTypes();  m_AttributeTypes=new int[keyTypes.length + resultTypes.length];  m_NominalIndexes=new Hashtable[m_AttributeTypes.length];  m_NominalStrings=new ArrayList[m_AttributeTypes.length];  m_Instances=new ArrayList<Instance>();  for (int i=0; i < m_AttributeTypes.length; i++) {    Object attribute=null;    if (i < keyTypes.length) {      attribute=keyTypes[i];    } else {      attribute=resultTypes[i - keyTypes.length];    }    if (attribute instanceof String) {      m_AttributeTypes[i]=Attribute.NOMINAL;      m_NominalIndexes[i]=new Hashtable<String,Double>();      m_NominalStrings[i]=new ArrayList<String>();    } else     if (attribute instanceof Double) {      m_AttributeTypes[i]=Attribute.NUMERIC;    } else {      throw new Exception("Unknown attribute type in column " + (i + 1));    }  }}  }
class C{  private void useItemOnGround(final Player player,final RPAction action){  final Entity entity=EntityHelper.entityFromTargetName(action.get(TARGET),player);  if (entity != null) {    tryUse(player,entity);  }}  }
class C{  void torsoTwist(Coords twistTarget){  int direction=ce().getFacing();  if (twistTarget != null) {    direction=ce().clipSecondaryFacing(ce().getPosition().direction(twistTarget));  }  if (direction != ce().getSecondaryFacing()) {    clearAttacks();    attacks.addElement(new TorsoTwistAction(cen,direction));    ce().setSecondaryFacing(direction);    refreshAll();  }}  }
class C{  @Override public boolean loadWeapon(Mounted mounted,Mounted mountedAmmo){  boolean success=false;  WeaponType wtype=(WeaponType)mounted.getType();  AmmoType atype=(AmmoType)mountedAmmo.getType();  if (mounted.getLocation() != mountedAmmo.getLocation()) {    return success;  }  Mounted bay=whichBay(getEquipmentNum(mounted));  if ((bay != null) && !bay.ammoInBay(getEquipmentNum(mountedAmmo))) {    return success;  }  if (mountedAmmo.isAmmoUsable() && !wtype.hasFlag(WeaponType.F_ONESHOT) && (atype.getAmmoType() == wtype.getAmmoType())&& (atype.getRackSize() == wtype.getRackSize())) {    mounted.setLinked(mountedAmmo);    success=true;  }  return success;}  }
class C{  public AttributeDefinitionBuilder immutable(){  this.writable=false;  return this;}  }
class C{  public void putConfig(java.lang.String key,PListObject value){  configMap.put(key,value);}  }
class C{  protected void error(Throwable error){  doClose();}  }
class C{  public Builder url(String url){  return url(HttpUrl.parse(url));}  }
class C{  public String name(){  return this.name;}  }
class C{  public DOMReference(Element refElem,XMLCryptoContext context,Provider provider) throws MarshalException {  boolean secVal=Utils.secureValidation(context);  Element nextSibling=DOMUtils.getFirstChildElement(refElem);  List<Transform> transforms=new ArrayList<Transform>(5);  if (nextSibling.getLocalName().equals("Transforms")) {    Element transformElem=DOMUtils.getFirstChildElement(nextSibling,"Transform");    transforms.add(new DOMTransform(transformElem,context,provider));    transformElem=DOMUtils.getNextSiblingElement(transformElem);    while (transformElem != null) {      String localName=transformElem.getLocalName();      if (!localName.equals("Transform")) {        throw new MarshalException("Invalid element name: " + localName + ", expected Transform");      }      transforms.add(new DOMTransform(transformElem,context,provider));      if (secVal && (transforms.size() > MAXIMUM_TRANSFORM_COUNT)) {        String error="A maxiumum of " + MAXIMUM_TRANSFORM_COUNT + " "+ "transforms per Reference are allowed with secure validation";        throw new MarshalException(error);      }      transformElem=DOMUtils.getNextSiblingElement(transformElem);    }    nextSibling=DOMUtils.getNextSiblingElement(nextSibling);  }  if (!nextSibling.getLocalName().equals("DigestMethod")) {    throw new MarshalException("Invalid element name: " + nextSibling.getLocalName() + ", expected DigestMethod");  }  Element dmElem=nextSibling;  this.digestMethod=DOMDigestMethod.unmarshal(dmElem);  String digestMethodAlgorithm=this.digestMethod.getAlgorithm();  if (secVal && MessageDigestAlgorithm.ALGO_ID_DIGEST_NOT_RECOMMENDED_MD5.equals(digestMethodAlgorithm)) {    throw new MarshalException("It is forbidden to use algorithm " + digestMethod + " when secure validation is enabled");  }  Element dvElem=DOMUtils.getNextSiblingElement(dmElem,"DigestValue");  try {    this.digestValue=Base64.decode(dvElem);  } catch (  Base64DecodingException bde) {    throw new MarshalException(bde);  }  if (DOMUtils.getNextSiblingElement(dvElem) != null) {    throw new MarshalException("Unexpected element after DigestValue element");  }  this.uri=DOMUtils.getAttributeValue(refElem,"URI");  Attr attr=refElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    this.id=attr.getValue();    refElem.setIdAttributeNode(attr,true);  } else {    this.id=null;  }  this.type=DOMUtils.getAttributeValue(refElem,"Type");  this.here=refElem.getAttributeNodeNS(null,"URI");  this.refElem=refElem;  this.transforms=transforms;  this.allTransforms=transforms;  this.appliedTransformData=null;  this.provider=provider;}  }
class C{  public static GeneralizedSemPm serializableInstance(){  Dag dag=new Dag();  GraphNode node1=new GraphNode("X");  dag.addNode(node1);  return new GeneralizedSemPm(Dag.serializableInstance());}  }
class C{  public void testConstrStringWithExponentWithPoint4(){  String a="23809648392384754573567356745735635678.90295784902768787678287E+21";  int aScale=2;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected MimeBodyPart createAttachedOriginal(Mail originalMail,int attachmentType) throws MessagingException {  MimeBodyPart part=new MimeBodyPart();  MimeMessage originalMessage=originalMail.getMessage();  if (attachmentType == HEADS) {    part.setContent(getMessageHeaders(originalMessage),"text/plain");    part.setHeader("Content-Type","text/rfc822-headers");  } else {    part.setContent(originalMessage,"message/rfc822");  }  if ((originalMessage.getSubject() != null) && (originalMessage.getSubject().trim().length() > 0)) {    part.setFileName(originalMessage.getSubject().trim());  } else {    part.setFileName("No Subject");  }  part.setDisposition("Attachment");  return part;}  }
class C{  @Override public void start(){  super.start();  scenarioSimpleRoom();  peds=new ArrayList<Pedestrian>();  for (  Space s : landscape) {    boolean addAll=peds.addAll(s.populate(this,initialAgentsPerFloor));  }}  }
class C{  public void unlock(){  if (!VM.runningVM)   return;  Magic.sync();  Offset latestContenderOffset=Entrypoints.latestContenderField.getOffset();  RVMThread i=RVMThread.getCurrentThread();  if (!MCS_Locking) {    Magic.setObjectAtOffset(this,latestContenderOffset,null);    VM.enableYieldpoints();    return;  }  RVMThread p;  do {    p=Magic.objectAsThread(Magic.addressAsObject(Magic.prepareAddress(this,latestContenderOffset)));    if (p == i) {      if (Magic.attemptAddress(this,latestContenderOffset,Magic.objectAsAddress(p),Address.zero())) {        break;      }    } else     if (Magic.objectAsAddress(p).NE(IN_FLUX)) {      if (Magic.attemptAddress(this,latestContenderOffset,Magic.objectAsAddress(p),IN_FLUX)) {        break;      }    } else {      handleMicrocontention(-1);    }  } while (true);  if (p != i) {    RVMThread q=p.contenderLink;    if (p == q) {      q.awaitingSpinLock=null;      Magic.sync();      Magic.setObjectAtOffset(this,latestContenderOffset,q);    } else {      p.contenderLink=q.contenderLink;      q.awaitingSpinLock=null;      Magic.sync();      Magic.setObjectAtOffset(this,latestContenderOffset,p);    }  }  VM.enableYieldpoints();}  }
class C{  private void requestLocationInternal(){  Log.v(TAG,ACTION_REQUEST_LOCATION);  if (!Utils.checkFineLocationPermission(this)) {    return;  }  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Intent locationUpdatedIntent=new Intent(this,UtilityService.class);    locationUpdatedIntent.setAction(ACTION_LOCATION_UPDATED);    Location location=FusedLocationApi.getLastLocation(googleApiClient);    if (location != null) {      Intent lastLocationIntent=new Intent(locationUpdatedIntent);      lastLocationIntent.putExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED,location);      startService(lastLocationIntent);    }    LocationRequest mLocationRequest=new LocationRequest().setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);    FusedLocationApi.requestLocationUpdates(googleApiClient,mLocationRequest,PendingIntent.getService(this,0,locationUpdatedIntent,0));    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  @Override @Inline protected Address allocPages(int reservedPages,int requiredPages,boolean zeroed){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || requiredPages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);  lock();  boolean newChunk=false;  int pageOffset=freeList.alloc(requiredPages);  if (pageOffset == GenericFreeList.FAILURE && growable) {    pageOffset=allocateContiguousChunks(requiredPages);    newChunk=true;  }  if (pageOffset == GenericFreeList.FAILURE) {    unlock();    return Address.zero();  } else {    pagesCurrentlyOnFreeList-=requiredPages;    if (pageOffset > highWaterMark) {      if (highWaterMark == 0 || (pageOffset ^ highWaterMark) > EmbeddedMetaData.PAGES_IN_REGION) {        int regions=1 + ((pageOffset - highWaterMark) >> EmbeddedMetaData.LOG_PAGES_IN_REGION);        int metapages=regions * metaDataPagesPerRegion;        reserved+=metapages;        committed+=metapages;        newChunk=true;      }      highWaterMark=pageOffset;    }    Address rtn=start.plus(Conversions.pagesToBytes(pageOffset));    Extent bytes=Conversions.pagesToBytes(requiredPages);    commitPages(reservedPages,requiredPages);    space.growSpace(rtn,bytes,newChunk);    unlock();    HeapLayout.mmapper.ensureMapped(rtn,requiredPages);    if (zeroed)     VM.memory.zero(zeroNT,rtn,bytes);    VM.events.tracePageAcquired(space,rtn,requiredPages);    return rtn;  }}  }
class C{  public boolean visit(CompilationUnit node){  return true;}  }
class C{  public boolean stoplistContains(String x){  if (stopwords == null)   return false;  return stopwords.contains(x);}  }
class C{  public void testSetAttributeNS1() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:qual?name";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isExternalZoomEnabled(){  return mExternalZoomEnabled;}  }
class C{  public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){  List<OFInstruction> newIl=new ArrayList<OFInstruction>();  List<OFInstruction> oldIl=fmb.getInstructions();  if (oldIl != null) {    newIl.addAll(fmb.getInstructions());  }  for (  OFInstruction i : newIl) {    if (i.getType() == inst.getType()) {      newIl.remove(i);    }  }  newIl.add(inst);  fmb.setInstructions(newIl);}  }
class C{  public MemoryExampleTable(List<Attribute> attributes){  super(attributes);  this.columns=attributes.size();}  }
class C{  public String validate(){  StringBuffer errors=new StringBuffer();  if (getAD_WF_Node_ID() == 0)   errors.append(" - No Start Node");  if (WORKFLOWTYPE_DocumentValue.equals(getWorkflowType()) && (getDocValueLogic() == null || getDocValueLogic().length() == 0))   errors.append(" - No Document Value Logic");  if (getWorkflowType().equals(MWorkflow.WORKFLOWTYPE_Manufacturing)) {    this.setAD_Table_ID(0);  }  boolean valid=errors.length() == 0;  setIsValid(valid);  if (!valid)   log.info("validate: " + errors);  return errors.toString();}  }
class C{  public InlineQueryResultCachedGifBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public static String inleinHome(){  String res=System.getenv("INLEIN_HOME");  if (res == null) {    res=new File(System.getProperty("user.home"),".inlein").getAbsolutePath();  }  return res;}  }
class C{  public void add(PlanarGraph graph){  add(graph.getEdgeEnds(),graph.getNodes());}  }
class C{  public Program(String name,boolean parallel){  this(name,parallel,false,QueryOptions.NONE);}  }
class C{  @Override public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  @Override public void insertNormalPrologue(){  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  Register ESP=phys.getESP();  MemoryOperand fpHome=MemoryOperand.BD(ir.regpool.makeTROp(),ArchEntrypoints.framePointerField.getOffset(),(byte)WORDSIZE,null,null);  Instruction plg=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();  Instruction inst=plg.nextInstructionInCodeOrder();  int frameFixedSize=getFrameFixedSize();  ir.compiledMethod.setFrameFixedSize(frameFixedSize);  if (frameFixedSize >= 256) {    insertBigFrameStackOverflowCheck(plg);    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD)));    int cmid=ir.compiledMethod.getId();    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,VM.BuildFor32Addr ? IC(cmid) : LC(cmid)));  } else {    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,fpHome));    inst.insertBefore(MIR_Move.create(IA32_MOV,fpHome.copy(),new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD)));    int cmid=ir.compiledMethod.getId();    inst.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,VM.BuildFor32Addr ? IC(cmid) : LC(cmid)));    insertNormalStackOverflowCheck(plg);  }  if (ir.compiledMethod.isSaveVolatile()) {    saveVolatiles(inst);    saveFloatingPointState(inst);  }  saveNonVolatiles(inst);}  }
class C{  public BaseCheckBox(SafeHtml label,Direction dir){  this();  setHTML(label,dir);}  }
class C{  public boolean isAcctSchemaElement(String segmentType){  return getAcctSchemaElement(segmentType) != null;}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.300 -0400",hash_original_method="E35E96FBBA5328024F5002F5E092C0FA",hash_generated_method="1A0885D5DE908CF5CF99681124D5053A") @Override public Enumeration<URL> findResources(final String name) throws IOException {  if (name == null) {    return null;  }  ArrayList<URL> result=new ArrayList<URL>();  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    handler.findResources(name,result);  }  return Collections.enumeration(result);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public static ReferenceElement.ReferenceElementResult parseBuiltInType(PsiBuilder builder){  PsiBuilder.Marker arrMarker=builder.mark();  ParserUtils.eatElement(builder,GroovyElementTypes.BUILT_IN_TYPE);  if (GroovyTokenTypes.mLBRACK.equals(builder.getTokenType())) {    declarationBracketsParse(builder,arrMarker);  } else {    arrMarker.drop();  }  return ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS;}  }
class C{  public CreateSessionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final ChunkedUploadSessionDescriptor item){  super(requestUrl,client,options,item);}  }
class C{  private GlowTask schedule(GlowTask task){  tasks.put(task.getTaskId(),task);  return task;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.602 -0500",hash_original_method="004FDF3B00128708010F53C563B52195",hash_generated_method="2FE4F18604C14FE634FC58F7E4689B4F") public void loadHeadersFromResource(int resid,List<Header> target){  XmlResourceParser parser=null;  try {    parser=getResources().getXml(resid);    AttributeSet attrs=Xml.asAttributeSet(parser);    int type;    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {    }    String nodeName=parser.getName();    if (!"preference-headers".equals(nodeName)) {      throw new RuntimeException("XML document must start with <preference-headers> tag; found" + nodeName + " at "+ parser.getPositionDescription());    }    Bundle curBundle=null;    final int outerDepth=parser.getDepth();    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {        continue;      }      nodeName=parser.getName();      if ("header".equals(nodeName)) {        Header header=new Header();        TypedArray sa=getResources().obtainAttributes(attrs,com.android.internal.R.styleable.PreferenceHeader);        header.id=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)HEADER_ID_UNDEFINED);        TypedValue tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_title);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.titleRes=tv.resourceId;          } else {            header.title=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_summary);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.summaryRes=tv.resourceId;          } else {            header.summary=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbTitle);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.breadCrumbTitleRes=tv.resourceId;          } else {            header.breadCrumbTitle=tv.string;          }        }        tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbShortTitle);        if (tv != null && tv.type == TypedValue.TYPE_STRING) {          if (tv.resourceId != 0) {            header.breadCrumbShortTitleRes=tv.resourceId;          } else {            header.breadCrumbShortTitle=tv.string;          }        }        header.iconRes=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_icon,0);        header.fragment=sa.getString(com.android.internal.R.styleable.PreferenceHeader_fragment);        sa.recycle();        if (curBundle == null) {          curBundle=new Bundle();        }        final int innerDepth=parser.getDepth();        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth)) {          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {            continue;          }          String innerNodeName=parser.getName();          if (innerNodeName.equals("extra")) {            getResources().parseBundleExtra("extra",attrs,curBundle);            XmlUtils.skipCurrentTag(parser);          } else           if (innerNodeName.equals("intent")) {            header.intent=Intent.parseIntent(getResources(),parser,attrs);          } else {            XmlUtils.skipCurrentTag(parser);          }        }        if (curBundle.size() > 0) {          header.fragmentArguments=curBundle;          curBundle=null;        }        target.add(header);      } else {        XmlUtils.skipCurrentTag(parser);      }    }  } catch (  XmlPullParserException e) {    throw new RuntimeException("Error parsing headers",e);  }catch (  IOException e) {    throw new RuntimeException("Error parsing headers",e);  } finally {    if (parser != null)     parser.close();  }}  }
class C{  public StreamingSound(URL url){  this.url=url;}  }
class C{  public static void main(String[] args){  ProgressBarDemo demo=new ProgressBarDemo(null);  demo.mainImpl();}  }
class C{  public GradlePluginsRuntimeException(String message){  super(message);}  }
class C{  protected boolean storeEventData(@NonNull Collection<ActEvent> eventSet,@NonNull Context context){  throw new UnsupportedOperationException();}  }
class C{  public String buildVmFolderPath(){  return String.format("[%s] vm_%s",datastoreName,getId());}  }
class C{  private void handleStateBootstrap(InetAddress endpoint){  Collection<Token> tokens;  tokens=getTokensFor(endpoint);  if (logger.isDebugEnabled())   logger.debug("Node {} state bootstrapping, token {}",endpoint,tokens);  if (tokenMetadata.isMember(endpoint)) {    if (!tokenMetadata.isLeaving(endpoint))     logger.info("Node {} state jump to bootstrap",endpoint);    tokenMetadata.removeEndpoint(endpoint);  }  tokenMetadata.addBootstrapTokens(tokens,endpoint);  PendingRangeCalculatorService.instance.update();  tokenMetadata.updateHostId(Gossiper.instance.getHostId(endpoint),endpoint);}  }
class C{  public ScanAndMarkSSO(IBurpExtenderCallbacks callbacks){  this.callbacks=callbacks;  this.helpers=callbacks.getHelpers();}  }
class C{  protected static boolean parsePartHeaders(ByteArrayInputStream pduDataStream,PduPart part,int length){  assert (null != pduDataStream);  assert (null != part);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int header=pduDataStream.read();    assert (-1 != header);    lastLen--;    if (header > TEXT_MAX) {switch (header) {case PduPart.P_CONTENT_LOCATION:        byte[] contentLocation=parseWapString(pduDataStream,TYPE_TEXT_STRING);      if (null != contentLocation) {        part.setContentLocation(contentLocation);      }    tempPos=pduDataStream.available();  lastLen=length - (startPos - tempPos);break;case PduPart.P_CONTENT_ID:byte[] contentId=parseWapString(pduDataStream,TYPE_QUOTED_STRING);if (null != contentId) {part.setContentId(contentId);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_CONTENT_DISPOSITION:case PduPart.P_CONTENT_DISPOSITION:Resources resources=Resources.getSystem();int id=resources.getIdentifier("config_mms_content_disposition_support","boolean","android");Log.w("PduParser","config_mms_content_disposition_support ID: " + id);boolean contentDisposition=(id != 0) && (resources.getBoolean(id));Log.w("PduParser","Content Disposition supported: " + contentDisposition);if (contentDisposition) {int len=parseValueLength(pduDataStream);pduDataStream.mark(1);int thisStartPos=pduDataStream.available();int thisEndPos=0;int value=pduDataStream.read();if (value == PduPart.P_DISPOSITION_FROM_DATA) {part.setContentDisposition(PduPart.DISPOSITION_FROM_DATA);} else if (value == PduPart.P_DISPOSITION_ATTACHMENT) {part.setContentDisposition(PduPart.DISPOSITION_ATTACHMENT);} else if (value == PduPart.P_DISPOSITION_INLINE) {part.setContentDisposition(PduPart.DISPOSITION_INLINE);} else {pduDataStream.reset();part.setContentDisposition(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {value=pduDataStream.read();if (value == PduPart.P_FILENAME) {part.setFilename(parseWapString(pduDataStream,TYPE_TEXT_STRING));}thisEndPos=pduDataStream.available();if (thisStartPos - thisEndPos < len) {int last=len - (thisStartPos - thisEndPos);byte[] temp=new byte[last];pduDataStream.read(temp,0,last);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);}break;default :if (LOCAL_LOGV) {Log.v(LOG_TAG,"Not supported Part headers: " + header);}if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}lastLen=0;break;}} else if ((header >= TEXT_MIN) && (header <= TEXT_MAX)) {byte[] tempHeader=parseWapString(pduDataStream,TYPE_TEXT_STRING);byte[] tempValue=parseWapString(pduDataStream,TYPE_TEXT_STRING);if (true == PduPart.CONTENT_TRANSFER_ENCODING.equalsIgnoreCase(new String(tempHeader))) {part.setContentTransferEncoding(tempValue);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);} else {if (LOCAL_LOGV) {Log.v(LOG_TAG,"Not supported Part headers: " + header);}if (-1 == skipWapValue(pduDataStream,lastLen)) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}lastLen=0;}}if (0 != lastLen) {Log.e(LOG_TAG,"Corrupt Part headers");return false;}return true;}  }
class C{  public void finishActivity(Activity activity){  if (activity != null) {    activityStack.remove(activity);    activity.finish();    activity=null;  }}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private boolean isStreamOpenLocation(Location location){  return streamOpenLocationMap.get(location) != null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.PACKAGE__MEMBER:    return member != null && !member.isEmpty();case TypesPackage.PACKAGE__DOMAIN:  return domain != null;case TypesPackage.PACKAGE__IMPORT:return import_ != null && !import_.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Deprecated static public DCCppEthernetAdapter instance(){  if (mInstance == null) {    mInstance=new DCCppEthernetAdapter();  }  return mInstance;}  }
class C{  public static void showToast(Context context,String msg){  Toast.makeText(context,msg,Toast.LENGTH_LONG).show();}  }
class C{  public MonitoredItemNotification clone(){  MonitoredItemNotification result=new MonitoredItemNotification();  result.ClientHandle=ClientHandle;  result.Value=Value;  return result;}  }
class C{  public String checkOnHand(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  I_M_InventoryLine line=GridTabWrapper.create(mTab,I_M_InventoryLine.class);  if (line.getM_Product_ID() == 0)   return "";  if (line.getM_Product().isStocked() && line.getQtyInternalUse().signum() > 0) {    BigDecimal qtyInternalUse=line.getQtyInternalUse();    BigDecimal qtyOnHand=DB.getSQLValueBD(null,"SELECT bomQtyOnHand(M_Product_ID,?,?) FROM M_Product WHERE M_Product_ID=?",line.getM_Inventory().getM_Warehouse_ID(),0,line.getM_Product_ID());    if (qtyOnHand == null)     qtyOnHand=Env.ZERO;    if (qtyOnHand.signum() == 0)     mTab.fireDataStatusEEvent("NoQtyAvailable","0",false); else     if (qtyOnHand.compareTo(qtyInternalUse) < 0)     mTab.fireDataStatusEEvent("InsufficientQtyAvailable",qtyOnHand.toString(),false);  }  return "";}  }
class C{  public String outerClass(int nth){  int i=outerClassIndex(nth);  if (i == 0)   return null; else   return constPool.getClassInfo(i);}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public Task<Void> handleRegistrationIntentAsync(Intent intent){  List<Task<Void>> tasks=new ArrayList<>();  String registrationId=intent.getStringExtra(REGISTRATION_ID_EXTRA);  if (registrationId != null && registrationId.length() > 0) {    PLog.v(TAG,"Received deviceToken <" + registrationId + "> from GCM.");    ParseInstallation installation=ParseInstallation.getCurrentInstallation();    if (!registrationId.equals(installation.getDeviceToken())) {      installation.setPushType(PushType.GCM);      installation.setDeviceToken(registrationId);      tasks.add(installation.saveInBackground());    }    tasks.add(updateLocalDeviceTokenLastModifiedAsync());  }synchronized (lock) {    if (request != null) {      request.onReceiveResponseIntent(intent);    }  }  return Task.whenAll(tasks);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public static boolean compareSignatures(Method first,Method second){  if (first.getName().equals(second.getName()) == false) {    return false;  }  return compareParameters(first.getParameterTypes(),second.getParameterTypes());}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(ContactEntry.class,Email.getDefaultDescription());  extProfile.declare(ContactEntry.class,Im.getDefaultDescription(false,true));  extProfile.declare(ContactEntry.class,PhoneNumber.getDefaultDescription());  extProfile.declare(ContactEntry.class,PostalAddress.getDefaultDescription());  extProfile.declare(ContactEntry.class,Organization.getDefaultDescription(false,false));  extProfile.declare(ContactEntry.class,GeoPt.getDefaultDescription());  extProfile.declare(ContactEntry.class,Deleted.class);}  }
class C{  public void updateItem(int identifier){  if (mDrawer != null && mDrawerAdapter != null && mDrawerAdapter.getDrawerItems() != null && identifier != -1) {    IDrawerItem drawerItem=DrawerUtils.getDrawerItem(getDrawerItems(),identifier);    for (int i=0; i < mDrawerAdapter.getDrawerItems().size(); i++) {      if (mDrawerAdapter.getDrawerItems().get(i).getIdentifier() == drawerItem.getIdentifier()) {        IDrawerItem miniDrawerItem=generateMiniDrawerItem(drawerItem);        if (miniDrawerItem != null) {          mDrawerAdapter.setDrawerItem(i,miniDrawerItem);        }      }    }  }}  }
class C{  public void putFloat(String key,float value){  map.put(key,value);}  }
class C{  public boolean hasMouseLock(){  return false;}  }
class C{  public SoftInputWindow(Context context,int theme,KeyEvent.DispatcherState dispatcherState){  super(context,theme);  mDispatcherState=dispatcherState;  initDockWindow();}  }
class C{  @SmallTest public void testPreconditions(){}  }
class C{  public static List<Object> mergeLists(final List<Object> col1,final List<Object> col2){  final List<Object> m=new ArrayList<>();  m.addAll(col1);  m.addAll(col2);  return m;}  }
class C{  public static <T>TopResults<T> shortestPaths(FST<T> fst,FST.Arc<T> fromNode,T startOutput,Comparator<T> comparator,int topN,boolean allowEmptyString) throws IOException {  TopNSearcher<T> searcher=new TopNSearcher<>(fst,topN,topN,comparator);  searcher.addStartPaths(fromNode,startOutput,allowEmptyString,new IntsRefBuilder());  return searcher.search();}  }
class C{  public HistogramResult run(Database database,Relation<O> relation){  final DistanceQuery<O> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<O> knnQuery=database.getKNNQuery(distanceQuery,relation.size());  if (LOG.isVerbose()) {    LOG.verbose("Preprocessing clusters...");  }  Collection<Cluster<Model>> split=(new ByLabelOrAllInOneClustering()).run(database).getAllClusters();  DoubleStaticHistogram hist=new DoubleStaticHistogram(numbins,0.0,1.0);  if (LOG.isVerbose()) {    LOG.verbose("Processing points...");  }  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Computing ROC AUC values",relation.size(),LOG) : null;  MeanVariance mv=new MeanVariance();  for (  Cluster<?> clus : split) {    for (DBIDIter iter=clus.getIDs().iter(); iter.valid(); iter.advance()) {      KNNList knn=knnQuery.getKNNForDBID(iter,relation.size());      double result=new ROCEvaluation().evaluate(clus,knn);      mv.put(result);      hist.increment(result,1. / relation.size());      LOG.incrementProcessed(progress);    }  }  LOG.ensureCompleted(progress);  Collection<double[]> res=new ArrayList<>(relation.size());  for (DoubleStaticHistogram.Iter iter=hist.iter(); iter.valid(); iter.advance()) {    res.add(new double[]{iter.getCenter(),iter.getValue()});  }  HistogramResult result=new HistogramResult("Ranking Quality Histogram","ranking-histogram",res);  result.addHeader("Mean: " + mv.getMean() + " Variance: "+ mv.getSampleVariance());  return result;}  }
class C{  public boolean isHealthy(boolean doExtensiveChecks){  if (socket.isClosed() || socket.isInputShutdown() || socket.isOutputShutdown()) {    return false;  }  if (framedConnection != null) {    return true;  }  if (doExtensiveChecks) {    try {      int readTimeout=socket.getSoTimeout();      try {        socket.setSoTimeout(1);        if (source.exhausted()) {          return false;        }        return true;      }  finally {        socket.setSoTimeout(readTimeout);      }    } catch (    SocketTimeoutException ignored) {    }catch (    IOException e) {      return false;    }  }  return true;}  }
class C{  public ImmutableArray(final boolean ordered,final Type[] array,final int start,final int count){  super(ordered,array,start,count);}  }
class C{  private boolean isInputValid(){  if (nameBox.getText().isEmpty()) {    return false;  }  if (ipBox.getText().isEmpty()) {    return false;  }  if (portBox.getText().isEmpty()) {    return false;  } else {    try {      Integer.parseInt(portBox.getText());    } catch (    NumberFormatException e) {      return false;    }  }  return true;}  }
class C{  public void shear(float x,float y){  impl.shear(nativeGraphics,x,y);}  }
class C{  public JListData(java.awt.Frame parent){  super(parent,true);  initComponents();  getRootPane().setDefaultButton(m_jOK);}  }
class C{  public void replaceWithLocal(CustomElementCollection other){  values.clear();  values.putAll(other.values);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.624 -0500",hash_original_method="B3310D4E2482FAA9B08EEBCB55A9E59A",hash_generated_method="9B7D670C9DC0EB16FE01142237FB60EC") public Point createFromParcel(Parcel in){  Point r=new Point();  r.readFromParcel(in);  return r;}  }
class C{  public static int dp2px(Context context,float dp){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());  return Math.round(px);}  }
class C{  public void javacError(String message,Throwable t){  messager.printMessage(Diagnostic.Kind.ERROR,message + (t == null ? "" : (": " + t)));  if (t != null)   t.printStackTrace();}  }
class C{  public boolean intersects(double x,double y,double w,double h){  return contains(x,y) || contains(x + w,y) || contains(x,y + h)|| contains(x + w,y + h);}  }
class C{  public boolean repOK(){  assert topGraphsForTopInvocation();  return true;}  }
class C{  public void testMultipleDriverPropertiesDelimitedBySemiColon(){  Properties driverProperties=new Properties();  driverProperties.setProperty("user","APP");  driverProperties.setProperty("CreateDatabase","create");  String driverPropertyString="user=APP;CreateDatabase=create";  String propertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + driverPropertyString;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals(driverProperties,ds.getConnectionProperties());}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(9,4,new Insets(0,0,0,0),-1,-1));  sourceBranchLabel=new JLabel();  this.$$$loadLabelText$$$(sourceBranchLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreatePullRequestDialog.SourceBranchLabel"));  contentPanel.add(sourceBranchLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  titleLabel=new JLabel();  this.$$$loadLabelText$$$(titleLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreatePullRequestDialog.TitleLabel"));  contentPanel.add(titleLabel,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  descriptionLabel=new JLabel();  this.$$$loadLabelText$$$(descriptionLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreatePullRequestDialog.DescriptionLabel"));  contentPanel.add(descriptionLabel,new GridConstraints(6,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  titleTextField=new JTextField();  contentPanel.add(titleTextField,new GridConstraints(5,0,1,4,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  targetBranchLabel=new JLabel();  this.$$$loadLabelText$$$(targetBranchLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreatePullRequestDialog.TargetBranchLabel"));  contentPanel.add(targetBranchLabel,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  contentPanel.add(targetBranchDropdown,new GridConstraints(2,0,1,4,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  sourceBranch=new JLabel();  sourceBranch.setText("");  contentPanel.add(sourceBranch,new GridConstraints(0,1,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  splitPane=new JSplitPane();  splitPane.setOrientation(0);  contentPanel.add(splitPane,new GridConstraints(7,0,1,4,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,new Dimension(200,200),null,0,false));  descriptionScrollPane=new JScrollPane();  splitPane.setLeftComponent(descriptionScrollPane);  descriptionTextArea=new JTextArea();  descriptionTextArea.setLineWrap(true);  descriptionTextArea.setWrapStyleWord(true);  descriptionScrollPane.setViewportView(descriptionTextArea);  final JPanel panel1=new JPanel();  panel1.setLayout(new GridLayoutManager(2,1,new Insets(0,0,0,0),-1,-1));  splitPane.setRightComponent(panel1);  quickDiffPane=new JTabbedPane();  panel1.add(quickDiffPane,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,new Dimension(200,200),null,0,false));  spinnerPanel=new JPanel();  spinnerPanel.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));  panel1.add(spinnerPanel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,1,null,null,null,0,false));  spinner=new BusySpinnerPanel();  spinnerPanel.add(spinner);  loadingLabel=new JLabel();  this.$$$loadLabelText$$$(loadingLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreatePullRequestDialog.LoadingDiffLabel"));  spinnerPanel.add(loadingLabel);}  }
class C{  public boolean hasActionAtTime(long eventTime){  return !((mStartTime == -1) || (mStartTime > eventTime)) && !((mFinishTime >= mStartTime) && (mFinishTime < eventTime));}  }
class C{  public static boolean write(Writer writer,Object toSerialize) throws Exception {  Class<?> xstreamClass;  java.lang.reflect.Constructor<?> constructor;  Object xstream;  Class<?>[] serializeArgsClasses=new Class[2];  Object[] serializeArgs=new Object[2];  java.lang.reflect.Method methodSerialize;  boolean result=false;  xstreamClass=Class.forName("com.thoughtworks.xstream.XStream");  constructor=xstreamClass.getConstructor();  xstream=constructor.newInstance();  serializeArgsClasses[0]=Object.class;  serializeArgsClasses[1]=Writer.class;  serializeArgs[0]=toSerialize;  serializeArgs[1]=writer;  methodSerialize=xstreamClass.getMethod("toXML",serializeArgsClasses);  try {    methodSerialize.invoke(xstream,serializeArgs);    result=true;  } catch (  Exception ex) {    result=false;  }  return result;}  }
class C{  public void decided(Decision dec){  dec.setRegency(syncher.getLCManager().getLastReg());  dec.setLeader(execManager.getCurrentLeader());  this.dt.delivery(dec);}  }
class C{  protected void fireStartEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name);  }}  }
class C{  public boolean saveAsKML(File file){  try {    Log.d(BonusPackHelper.LOG_TAG,"Saving " + file.getAbsolutePath());    OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(file),"UTF-8");    BufferedWriter writer=new BufferedWriter(out,8192);    boolean result=saveAsKML(writer);    writer.close();    Log.d(BonusPackHelper.LOG_TAG,"Saved.");    return result;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static CompleteMultipartUploadResult parseCompleteMultipartUpload(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    CompleteMultipartUploadResult result=new CompleteMultipartUploadResult();    result.setBucketName(root.getChildText("Bucket"));    result.setETag(trimQuotes(root.getChildText("ETag")));    result.setKey(root.getChildText("Key"));    result.setLocation(root.getChildText("Location"));    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean nextPage() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static String deserializeString(byte[] buffer,MutableInt offset){  int length=deserializeInt(buffer,offset);  String val=new String(buffer,offset.intValue(),length);  offset.add(length);  return val;}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(mViewPortHandler.offsetLeft(),-mViewPortHandler.offsetTop());    mMatrixOffset.postScale(1.0f,-1.0f);  }}  }
class C{  public TestChromosome generateNewTest(final TestChromosome test,Set<Integer> statementIndexes,LocalSearchObjective<TestChromosome> objective){  logger.info("APPLYING DSE EEEEEEEEEEEEEEEEEEEEEEE");  logger.info(test.getTestCase().toCode());  logger.info("Starting concolic execution");  test.clone();  DefaultTestCase clone_test_case=(DefaultTestCase)test.getTestCase().clone();  List<BranchCondition> branchConditions=ConcolicExecution.executeConcolic(clone_test_case);  final PathCondition collectedPathCondition=new PathCondition(branchConditions);  logger.info("Done concolic execution");  if (collectedPathCondition.isEmpty()) {    return null;  }  for (  BranchCondition c : collectedPathCondition.getBranchConditions()) {    logger.info(" -> " + c.getConstraint());  }  Set<VariableReference> symbolicVariables=new HashSet<VariableReference>();  for (  Integer position : statementIndexes) {    final VariableReference variableReference=test.getTestCase().getStatement(position).getReturnValue();    symbolicVariables.add(variableReference);  }  logger.info("Checking {} conditions",collectedPathCondition.size());  List<Integer> conditionIndexesNotCoveredTwoWays=computeConditionIndexesNotCoveredTwoWays(test,collectedPathCondition);  for (int conditionIndex=0; conditionIndex < collectedPathCondition.size(); conditionIndex++) {    BranchCondition condition=collectedPathCondition.get(conditionIndex);    if (LocalSearchBudget.getInstance().isFinished()) {      logger.debug("Local search budget used up: " + Properties.LOCAL_SEARCH_BUDGET_TYPE);      break;    }    logger.debug("Local search budget not yet used up");    if (!conditionIndexesNotCoveredTwoWays.contains(conditionIndex)) {      continue;    }    logger.info("Current condition: " + conditionIndex + "/"+ collectedPathCondition.size()+ ": "+ condition.getConstraint());    Constraint<?> currentConstraint=condition.getConstraint();    if (!isRelevant(currentConstraint,symbolicVariables)) {      logger.info("Is not relevant for " + symbolicVariables);      continue;    }    logger.info("Is relevant for " + symbolicVariables);    List<Constraint<?>> query=buildQuery(collectedPathCondition,conditionIndex);    logger.info("Trying to solve: ");    for (    Constraint<?> c : query) {      logger.info("  " + c);    }    DSEStats.getInstance().reportNewConstraints(query);    Solver solver=SolverFactory.getInstance().buildNewSolver();    long startSolvingTime=System.currentTimeMillis();    SolverCache solverCache=SolverCache.getInstance();    SolverResult solverResult=solverCache.solve(solver,query);    long estimatedSolvingTime=System.currentTimeMillis() - startSolvingTime;    DSEStats.getInstance().reportNewSolvingTime(estimatedSolvingTime);    if (solverResult == null) {      logger.info("Found no result");    } else     if (solverResult.isUNSAT()) {      logger.info("Found UNSAT result");      DSEStats.getInstance().reportNewUNSAT();    } else {      logger.info("Found SAT result");      DSEStats.getInstance().reportNewSAT();      Map<String,Object> model=solverResult.getModel();      TestCase oldTest=test.getTestCase();      ExecutionResult oldResult=test.getLastExecutionResult().clone();      TestCase newTest=updateTest(oldTest,model);      logger.info("New test: " + newTest.toCode());      test.setTestCase(newTest);      test.clearCachedResults();      if (objective.hasImproved(test)) {        DSEStats.getInstance().reportNewTestUseful();        logger.info("Solution improves fitness, finishing DSE");        return test;      } else {        DSEStats.getInstance().reportNewTestUnuseful();        test.setTestCase(oldTest);        if (oldResult != null)         test.setLastExecutionResult(oldResult);      }    }  }  return null;}  }
class C{  public void updatePoly(int[] xpoints,int[] ypoints,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(xpoints,ypoints,properties,link.dos);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public IMethod findDeclaringMethod(IMethod overriding,boolean testVisibility) throws JavaModelException {  IMethod result=null;  IMethod overridden=findOverriddenMethod(overriding,testVisibility);  while (overridden != null) {    result=overridden;    overridden=findOverriddenMethod(result,testVisibility);  }  return result;}  }
class C{  public IllegalBinaryStateDialog(final IllegalBinaryStateException cause){  this(cause,cause.getBinary().getLabel() + " Configuration Error",cause.getMessage());}  }
class C{  public boolean retainAll(long[] array){  Arrays.sort(array);  long[] set=_set;  byte[] states=_states;  boolean changed=false;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && Arrays.binarySearch(array,set[i]) < 0) {      remove(set[i]);      changed=true;    }  }  return changed;}  }
class C{  public SynchronizedProtocolEncoder(ProtocolEncoder encoder){  if (encoder == null) {    throw new IllegalArgumentException("encoder");  }  this.encoder=encoder;}  }
class C{  public static ReilInstruction createAdd(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.ADD,firstOperand,secondOperand,thirdOperand);}  }
class C{  public T caseBindingProperty(BindingProperty object){  return null;}  }
class C{  public static <E extends Comparable<E>>void quickSort(InplaceList<E> array){  if (array.isEmpty()) {    return;  }  recursiveQuickSort(array,0,array.size() - 1);}  }
class C{  public boolean canTick(){  return canTick;}  }
class C{  private int encryptColumnContents(String columnName,int tableID) throws Exception {  String tableName=MTable.getTableName(getCtx(),tableID);  return encryptColumnContents(columnName,tableName);}  }
class C{  @NotNull public static SqlQuery namedQuery(@NotNull @SQL String sql,@NotNull Object bean){  return namedQuery(sql,VariableResolver.forBean(bean));}  }
class C{  public FileAttribute(String fileName,int fileSize) throws ParameterException {  if (fileName == null || fileName.length() == 0) {    throw new ParameterException("FileAttribute(): Error - invalid file name.");  }  if (fileSize <= 0) {    throw new ParameterException("FileAttribute(): Error - size <= 0.");  }  size=fileSize;  name=fileName;  Date date=CloudSim.getSimulationCalendar().getTime();  if (date == null) {    creationTime=0;  } else {    creationTime=date.getTime();  }  ownerName=null;  id=File.NOT_REGISTERED;  checksum=0;  type=File.TYPE_UNKOWN;  lastUpdateTime=0;  cost=0;  resourceId=-1;  masterCopy=true;  readOnly=false;}  }
class C{  public final void send(byte[] data,boolean useMAC) throws InterruptedException {  if (useSenderThread) {    if (!useMAC) {      Logger.println("(ServerConnection.send) Not sending defaultMAC " + System.identityHashCode(data));      noMACs.add(System.identityHashCode(data));    }    if (!outQueue.offer(data)) {      Logger.println("(ServerConnection.send) out queue for " + remoteId + " full (message discarded).");    }  } else {    sendLock.lock();    sendBytes(data,useMAC);    sendLock.unlock();  }}  }
class C{  protected void drawXLegend(){  float[] position=new float[]{0f,0f};  for (int i=0; i < mData.getXValCount(); i++) {    if (i % mLegendGridModulus == 0) {      position[0]=i;      if (mCenterXLegendText)       position[0]+=0.5f;      transformPointArray(position);      if (position[0] >= mOffsetLeft && position[0] <= getWidth() - mOffsetRight + 10) {        mDrawCanvas.drawText(mData.getXVals().get(i),position[0],mOffsetTop - 5,mXLegendPaint);      }    }  }}  }
class C{  public WrappingStringBuilder wrapWord(final String s){  if (mWrapWidth - mPrefix.length() < 20) {    append(s);    return this;  }  final int available=mWrapWidth - lineLength();  if (s.length() >= available) {    if (lineLength() != mPrefix.length()) {      wrap();    }    appendTrimmed(s);  } else {    append(s);  }  return this;}  }
class C{  public static String encodeObject(final java.io.Serializable serializableObject){  return Base64.encodeObject(serializableObject,Base64.NO_OPTIONS);}  }
class C{  private RPObject findSpell(KeyEvent e){  RPObject player=StendhalClient.get().getPlayer();  Integer position=keyEventMapping.get(e.getKeyCode());  RPSlot slot=player.getSlot("spells");  Integer counter=Integer.valueOf(1);  for (  RPObject spell : slot) {    if (counter.equals(position)) {      return spell;    }    counter=Integer.valueOf(counter.intValue() + 1);  }  return null;}  }
class C{  public LocalDate withDayOfWeek(int dayOfWeek){  return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(),dayOfWeek));}  }
class C{  private Colors(){  throw new Error("Do not need instantiate!");}  }
class C{  public div addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public CustomLayoutManager(@Orientation int orientation,int itemLineCount){  setOrientation(orientation);  setItemLineCount(itemLineCount);}  }
class C{  private static Outcome parseOutcomeElement(Element outcomeElement){  boolean depleteWeapon=Boolean.valueOf(outcomeElement.getAttribute(OUTCOME_ATTRIBUTE_DEPLETE_WEAPON));  boolean incrementEnemies=Boolean.valueOf(outcomeElement.getAttribute(OUTCOME_ATTRIBUTE_INCREMENT_ENEMIES));  return new Outcome(depleteWeapon,incrementEnemies);}  }
class C{  private void verifyAddReplicaToCG(URI blockURI,BlockConsistencyGroup cg,StorageSystem cgStorageSystem){  BlockObject blockObject=BlockObject.fetch(_dbClient,blockURI);  BlockServiceUtils.validateNotAnInternalBlockObject(blockObject,false);  URI sourceVolumeURI=null;  URI blockProjectURI=null;  if (blockObject instanceof BlockSnapshot) {    BlockSnapshot snapshot=(BlockSnapshot)blockObject;    blockProjectURI=snapshot.getProject().getURI();    sourceVolumeURI=snapshot.getParent().getURI();  } else   if (blockObject instanceof BlockMirror) {    BlockMirror mirror=(BlockMirror)blockObject;    blockProjectURI=mirror.getProject().getURI();    sourceVolumeURI=mirror.getSource().getURI();  } else   if (blockObject instanceof Volume) {    Volume volume=(Volume)blockObject;    blockProjectURI=volume.getProject().getURI();    sourceVolumeURI=volume.getAssociatedSourceVolume();  }  Volume sourceVolume=null;  if (!NullColumnValueGetter.isNullURI(sourceVolumeURI)) {    sourceVolume=_dbClient.queryObject(Volume.class,sourceVolumeURI);  }  if (sourceVolume == null || !cg.getId().equals(sourceVolume.getConsistencyGroup())) {    throw APIException.badRequests.invalidParameterSourceVolumeNotInGivenConsistencyGroup(sourceVolumeURI,cg.getId());  }  if (!NullColumnValueGetter.isNullURI(blockObject.getConsistencyGroup()) && !cg.getId().equals(blockObject.getConsistencyGroup())) {    throw APIException.badRequests.invalidParameterVolumeAlreadyInAConsistencyGroup(cg.getId(),blockObject.getConsistencyGroup());  }  URI cgProjectURI=cg.getProject().getURI();  if (!blockProjectURI.equals(cgProjectURI)) {    List<Project> projects=_dbClient.queryObjectField(Project.class,"label",Arrays.asList(cgProjectURI,blockProjectURI));    throw APIException.badRequests.consistencyGroupAddVolumeThatIsInDifferentProject(blockObject.getLabel(),projects.get(0).getLabel(),projects.get(1).getLabel());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Integer(0); else {    java.awt.Dimension d=uiMgr.getUIDisplayResolution();    return (d == null) ? new Integer(720) : new Integer(d.width);  }}  }
class C{  public String toString(){  if (m_barcode == null)   return super.toString();  return super.toString() + " " + m_barcode.getData();}  }
class C{  public void startSpinning(){  isSpinning=true;  postInvalidate();}  }
class C{  public static String javaDecode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\\') {      if (i + 1 >= s.length()) {        throw getFormatException(s,i);      }      c=s.charAt(++i);switch (c) {case 't':        buff.append('\t');      break;case 'r':    buff.append('\r');  break;case 'n':buff.append('\n');break;case 'b':buff.append('\b');break;case 'f':buff.append('\f');break;case '#':buff.append('#');break;case '=':buff.append('=');break;case ':':buff.append(':');break;case '"':buff.append('"');break;case '\\':buff.append('\\');break;case 'u':{try {c=(char)(Integer.parseInt(s.substring(i + 1,i + 5),16));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=4;buff.append(c);break;}default :if (c >= '0' && c <= '9') {try {c=(char)(Integer.parseInt(s.substring(i,i + 3),8));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=2;buff.append(c);} else {throw getFormatException(s,i);}}} else {buff.append(c);}}return buff.toString();}  }
class C{  public final void testSetMaxPathLength() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertEquals(5,p.getMaxPathLength());  p.setMaxPathLength(10);  assertEquals(10,p.getMaxPathLength());  p.setMaxPathLength(0);  assertEquals(0,p.getMaxPathLength());  p.setMaxPathLength(-1);  assertEquals(-1,p.getMaxPathLength());  int[] maxPathLength={-2,-10,Integer.MIN_VALUE};  for (int i=0; i < maxPathLength.length; i++) {    try {      p.setMaxPathLength(maxPathLength[i]);      fail("InvalidParameterException expected ");    } catch (    InvalidParameterException e) {    }  }}  }
class C{  private static <T extends AbstractBlockBase<T>>void computeCodeEmittingOrder(List<T> order,PriorityQueue<T> worklist,BitSet visitedBlocks){  while (!worklist.isEmpty()) {    T nextImportantPath=worklist.poll();    addPathToCodeEmittingOrder(nextImportantPath,order,worklist,visitedBlocks);  }}  }
class C{  public void selectEvent(final Event event){  final XTableModel model=table.getXTableModel();  for (int i=table.getRowCount() - 1; i >= 0; i--) {    final Event e=(Event)model.getValueAt(table.convertRowIndexToModel(i),eventColIdx);    if (e == event) {      programmaticSelection=true;      table.getSelectionModel().setSelectionInterval(i,i);      table.scrollRectToVisible(table.getCellRect(i,i,true));      programmaticSelection=false;      break;    }  }}  }
class C{  @Override public String toString(){  if (methOp != null)   return methOp.toString();switch (type) {case METHOD_ACCESS:    return "<mem loc: methOp is null!>";case FIELD_ACCESS:  return "<mem loc: " + fieldRef.getType().getName() + "."+ fieldRef.getName()+ ">";case ARRAY_ACCESS:return "<mem loc: array " + arrayElementType + "[]>";case JTOC_ACCESS:return "<mem loc: JTOC @" + Services.addressAsHexString(JTOCoffset.toWord().toAddress()) + ">";case SPILL_ACCESS:return "<mem loc: spill FP " + spillOffset + ">";case ALENGTH_ACCESS:return "<mem loc: array length>";}return "<mem loc: no aliases>";}  }
class C{  protected void executeTasksUntilEmpty(String queueName,@Nullable FakeClock clock) throws Exception {  while (true) {    ofy().clearSessionCache();    List<QueueStateInfo.TaskStateInfo> taskInfo=taskQueue.getQueueStateInfo().get(queueName).getTaskInfo();    if (taskInfo.isEmpty()) {      break;    }    QueueStateInfo.TaskStateInfo taskStateInfo=taskInfo.get(0);    taskQueue.deleteTask(queueName,taskStateInfo.getTaskName());    executeTask(queueName,taskStateInfo);    if (clock != null) {      clock.advanceOneMilli();    }  }}  }
class C{  public Vector2i add(Vector2i v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  public static void main(String[] args){  System.out.println("\nFeet     Meters     |     Meters     Feet\n" + "----------------------------------------------");  for (double feet=1.0, meters=20.0; feet <= 10.0; feet++, meters+=5) {    System.out.printf("%4.1f     ",feet);    System.out.printf("%6.3f",footToMeter(feet));    System.out.print("     |     ");    System.out.printf("%-11.1f",meters);    System.out.printf("%7.3f\n",meterToFoot(meters));  }}  }
class C{  public Object newTransport(HttpEngine httpEngine) throws IOException {  return (spdyConnection != null) ? new SpdyTransport(httpEngine,spdyConnection) : new HttpTransport(httpEngine,out,in);}  }
class C{  public boolean isCovered(final Coordinate point){  Envelope e=new Envelope(point);  List<?> gList=spatialIndex.query(e);  PreparedPoint p=new PreparedPoint(geomFactory.createPoint(point));  for (int i=0; i < gList.size(); i++) {    Geometry g1=((MasonGeometry)gList.get(i)).getGeometry();    if (p.intersects(g1)) {      return true;    }  }  return false;}  }
class C{  public void showPassiveFocusIndicator(){  if (mFocusRing != null) {    mFocusRing.startPassiveFocus();  }}  }
class C{  public OCSPAndCRLCertificateVerifier(final CRLSource crlSource,final OCSPSource ocspSource,final CertificatePool validationCertPool){  this.crlSource=crlSource;  this.ocspSource=ocspSource;  this.validationCertPool=validationCertPool;}  }
class C{  private void updatePostFailoverCancel(Volume volume) throws InternalException {  _log.info("Setting respective flags after failover of failover");  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());  List<URI> volumeIDs=new ArrayList<URI>();  for (  String volumeString : protectionSet.getVolumes()) {    URI volumeURI;    try {      volumeURI=new URI(volumeString);      volumeIDs.add(volumeURI);    } catch (    URISyntaxException e) {      _log.error("URI syntax incorrect: ",e);    }  }  for (  URI protectionVolumeID : volumeIDs) {    Volume protectionVolume=_dbClient.queryObject(Volume.class,protectionVolumeID);    if ((protectionVolume.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) && (protectionVolume.getRpCopyName().equals(volume.getRpCopyName()))) {      _log.info("Change flags of failover target " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));      protectionVolume.setAccessState(Volume.VolumeAccessState.NOT_READY.name());      protectionVolume.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());      _dbClient.updateObject(protectionVolume);    } else     if (protectionVolume.checkPersonality(Volume.PersonalityTypes.SOURCE.toString())) {      _log.info("Change flags of failover source " + RPHelper.getRPWWn(protectionVolume.getId(),_dbClient));      protectionVolume.setLinkStatus(Volume.LinkStatus.IN_SYNC.name());      _dbClient.updateObject(protectionVolume);    }  }}  }
class C{  public int next(){  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_expandedNameTable.getType(expType) == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  public void disableCompatibilityMode(){  flags|=(FLAG_SUPPORTS_LARGE_SCREENS | FLAG_SUPPORTS_NORMAL_SCREENS | FLAG_SUPPORTS_SMALL_SCREENS| FLAG_RESIZEABLE_FOR_SCREENS| FLAG_SUPPORTS_SCREEN_DENSITIES| FLAG_SUPPORTS_XLARGE_SCREENS);}  }
class C{  public boolean isGuideLinesVisible(){  return this.guideLinesVisible;}  }
class C{  public GridReversedLinesFileReader(final File file,final int blockSize,final Charset charset) throws IOException {  this.blockSize=blockSize;  this.encoding=charset;  randomAccessFile=new RandomAccessFile(file,"r");  totalByteLength=randomAccessFile.length();  int lastBlockLength=(int)(totalByteLength % blockSize);  if (lastBlockLength > 0) {    totalBlockCount=totalByteLength / blockSize + 1;  } else {    totalBlockCount=totalByteLength / blockSize;    if (totalByteLength > 0) {      lastBlockLength=blockSize;    }  }  currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);  CharsetEncoder charsetEncoder=charset.newEncoder();  float maxBytesPerChar=charsetEncoder.maxBytesPerChar();  if (maxBytesPerChar == 1f) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-8")) {    byteDecrement=1;  } else   if (charset == Charset.forName("Shift_JIS")) {    byteDecrement=1;  } else   if (charset == Charset.forName("UTF-16BE") || charset == Charset.forName("UTF-16LE")) {    byteDecrement=2;  } else   if (charset == Charset.forName("UTF-16")) {    throw new UnsupportedEncodingException("For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)");  } else {    throw new UnsupportedEncodingException("Encoding " + charset + " is not supported yet (feel free to submit a patch)");  }  newLineSequences=new byte[][]{"\r\n".getBytes(charset),"\n".getBytes(charset),"\r".getBytes(charset)};  avoidNewlineSplitBufferSize=newLineSequences[0].length;}  }
class C{  public void stop(){  if (mRunning.compareAndSet(true,false)) {    mTargetDataLine.stop();    mTargetDataLine.close();  }}  }
class C{  static public Automaton intersection(Automaton a1,Automaton a2){  if (a1 == a2) {    return a1;  }  if (a1.getNumStates() == 0) {    return a1;  }  if (a2.getNumStates() == 0) {    return a2;  }  Transition[][] transitions1=a1.getSortedTransitions();  Transition[][] transitions2=a2.getSortedTransitions();  Automaton c=new Automaton();  c.createState();  LinkedList<StatePair> worklist=new LinkedList<>();  HashMap<StatePair,StatePair> newstates=new HashMap<>();  StatePair p=new StatePair(0,0,0);  worklist.add(p);  newstates.put(p,p);  while (worklist.size() > 0) {    p=worklist.removeFirst();    c.setAccept(p.s,a1.isAccept(p.s1) && a2.isAccept(p.s2));    Transition[] t1=transitions1[p.s1];    Transition[] t2=transitions2[p.s2];    for (int n1=0, b2=0; n1 < t1.length; n1++) {      while (b2 < t2.length && t2[b2].max < t1[n1].min)       b2++;      for (int n2=b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)       if (t2[n2].max >= t1[n1].min) {        StatePair q=new StatePair(t1[n1].dest,t2[n2].dest);        StatePair r=newstates.get(q);        if (r == null) {          q.s=c.createState();          worklist.add(q);          newstates.put(q,q);          r=q;        }        int min=t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;        int max=t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;        c.addTransition(p.s,r.s,min,max);      }    }  }  c.finishState();  return removeDeadStates(c);}  }
class C{  public int computeEdgePoints(List<Object> facevec,List<CoordFloatString> allLLPoints) throws FormatException {  int ring_ptr=((Number)facevec.get(ringIDColumn)).intValue();  List<Object> ring1=new ArrayList<Object>(rings.getColumnCount());  rings.getRow(ring1,ring_ptr);  int fac_id=((Number)ring1.get(faceIDColumn)).intValue();  int startedgeid=((Number)ring1.get(ringStartColumn)).intValue();  if (startedgeid <= 0) {    return 0;  }  int nextedgeid=startedgeid;  boolean firsttime=true;  allLLPoints.clear();  int polySize=0;  int prev_node=-1;  final List<Object> edge=new ArrayList<Object>(edges.getColumnCount());  do {    edges.getRow(edge,nextedgeid);    int start_node=edges.getStartNode(edge);    int end_node=edges.getEndNode(edge);    int rht_face=edgeRightFaceAdapter.getPrimId(edge);    int lft_face=edgeLeftFaceAdapter.getPrimId(edge);    int right_edge=edgeRightEdgeAdapter.getPrimId(edge);    int left_edge=edgeLeftEdgeAdapter.getPrimId(edge);    if (firsttime) {      prev_node=start_node;      firsttime=false;    }    CoordFloatString cfs=edges.getCoordinates(edge);    if ((fac_id == rht_face) && (fac_id == lft_face)) {      if (start_node == prev_node) {        nextedgeid=right_edge;        prev_node=end_node;      } else       if (end_node == prev_node) {        nextedgeid=left_edge;        prev_node=start_node;      } else {        throw new FormatException(" node matching assertion failed ");      }    } else     if (fac_id == rht_face) {      nextedgeid=right_edge;      prev_node=end_node;      polySize+=cfs.tcount;      allLLPoints.add(cfs);    } else     if (fac_id == lft_face) {      nextedgeid=left_edge;      prev_node=start_node;      polySize+=cfs.tcount;      cfs.tcount*=-1;      allLLPoints.add(cfs);    } else {      throw new FormatException("Node Assertion failed");    }  } while (nextedgeid != startedgeid);  return polySize;}  }
class C{  public static boolean withinPackage(Tree.Declaration decl){  return container(decl) instanceof com.redhat.ceylon.model.typechecker.model.Package;}  }
class C{  public void encodeSolution(final DataOutputBuffer out,final IBindingSet bset){  out.append(encodeSolution(bset));}  }
class C{  public int exprGetNumChildren(){  return getLength();}  }
class C{  public void putElements(K key,Set<E> elements){synchronized (this) {    removeKey(key);    if (!elements.isEmpty()) {      for (      E element : elements) {        addElement(key,element);      }    }  }}  }
class C{  protected void createSubsample(){  for (int i=0; i < m_SampleSize; i++) {    if (m_subSample[i] != null) {      Instance copy=(Instance)m_subSample[i].copy();      push(copy);    } else {      break;    }  }  m_subSample=null;}  }
class C{  protected void parseArgs(String[] args) throws AdeUsageException {  if (args.length == 0) {    usageError("No arguments supplied");  }  m_myArgs=args;}  }
class C{  public void selectNavItem(int selectedId){  if (mRootView != null) {    final LinearLayout navMenu=(LinearLayout)mRootView.findViewById(R.id.library_nav_menu);    for (int i=0; i < navMenu.getChildCount(); i++) {      View v=navMenu.getChildAt(i);      if (v instanceof TextView) {        TextView tv=(TextView)v;        if (tv.getId() == selectedId)         tv.setTextAppearance(getActivity(),R.style.SelectedNavigationMenuItem); else         tv.setTextAppearance(getActivity(),R.style.NavigationMenuItem);      }    }  }}  }
class C{  private void createFullCopyForApplicationCGs(Workflow workflow,VolumeGroup volumeGroup,List<URI> fullCopyVolumes,Boolean createInactive,TaskCompleter taskCompleter){  boolean isCG=true;  taskCompleter.addVolumeGroupId(volumeGroup.getId());  List<Volume> allVolumes=ControllerUtils.getVolumeGroupVolumes(_dbClient,volumeGroup);  Map<String,List<Volume>> arrayGroupToVolumes=ControllerUtils.groupVolumesByArrayGroup(allVolumes,_dbClient);  for (  String arrayGroupName : arrayGroupToVolumes.keySet()) {    List<Volume> arrayGroupVolumes=arrayGroupToVolumes.get(arrayGroupName);    List<URI> fullCopyVolumesAG=getFullCopiesForVolumes(fullCopyVolumes,arrayGroupVolumes);    if (fullCopyVolumesAG.isEmpty()) {      _log.debug("Looks Full copy not requested for array group {}",arrayGroupName);      continue;    }    Volume sourceVolumeAG=arrayGroupVolumes.iterator().next();    if (!NullColumnValueGetter.isNullURI(sourceVolumeAG.getConsistencyGroup())) {      taskCompleter.addConsistencyGroupId(sourceVolumeAG.getConsistencyGroup());    }    URI storage=sourceVolumeAG.getStorageController();    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    _log.info("Creating full copy for group {}",arrayGroupName);    createCGFullCopy(storage,sourceVolumeAG.getId(),fullCopyVolumesAG,storageSystem,workflow,createInactive,isCG);  }}  }
class C{  public void onCombineSetup() throws IOException, InterruptedException {}  }
class C{  private static int binarySearch(int[] index,double[] vals,double target){  int lo=0, hi=index.length - 1;  while (hi - lo > 1) {    int mid=lo + (hi - lo) / 2;    double midval=vals[index[mid]];    if (target > midval) {      lo=mid;    } else     if (target < midval) {      hi=mid;    } else {      while ((mid > 0) && (vals[index[mid - 1]] == target)) {        mid--;      }      return mid;    }  }  return lo;}  }
class C{  public VPAttribute(boolean mandatory,boolean isReadOnly,boolean isUpdateable,int WindowNo,MPAttributeLookup lookup,boolean searchOnly){  this(null,mandatory,isReadOnly,isUpdateable,WindowNo,lookup,searchOnly);}  }
class C{  @ExceptionHandler(AccessDeniedException.class) @ResponseBody @ResponseStatus(HttpStatus.FORBIDDEN) public String handleException(final AccessDeniedException cause){  return convertErrorAsJson(cause.getMessage());}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public boolean aggregateOnly(){  if (this.hasAllCols())   return false;  for (  Column s : columns)   if (s.getOp() == Operation.NONE && s.getCalculation() == null)   return false;  return true;}  }
class C{  public CodedException withPrefix(String... prefixes){  String prefix=StringUtils.join(prefixes,".");  if (!faultCode.startsWith(prefix)) {    faultCode=prefix + "." + faultCode;  }  return this;}  }
class C{  public void compute(Vertex<LongWritable,DoubleWritable,FloatWritable> vertex,Iterable<DoubleWritable> messages){  if (getSuperstep() == 0) {    vertex.setValue(new DoubleWritable(0d));  }  double count=0d;  for (  DoubleWritable message : messages) {    count+=1d;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Vertex " + vertex.getId() + " got a message. New total = "+ count);  }  vertex.setValue(new DoubleWritable(count));  for (  Edge<LongWritable,FloatWritable> edge : vertex.getEdges()) {    if (LOG.isDebugEnabled()) {      LOG.debug("Vertex " + vertex.getId() + " sent a message to "+ edge.getTargetVertexId());    }    if (getSuperstep() < 2) {      sendMessage(edge.getTargetVertexId(),new DoubleWritable(1d));    }  }  vertex.voteToHalt();}  }
class C{  public void findAll(String sql,Object[] args,Result<Iterable<Cursor>> result){  QueryBuilderKraken builder=QueryParserKraken.parse(this,sql);  if (builder.isTableLoaded()) {    QueryKraken query=builder.build();    findAll(query,args,result);  } else {    String tableName=builder.getTableName();    _tableService.loadTable(tableName,result.then(null));    return;  }}  }
class C{  protected final Object applyImplicitConversion(final ConversionType conversionType,final Class<?> dClass,final Class<?> sClass,final Object sourceContent){  if (!conversionType.isAbsent()) {    if (!conversionType.isUndefined())     return getConversion(conversionType,sourceContent);    if (isCastCase(dClass,sClass))     return write("(",dClass.getName(),")",sourceContent);  } else {    if (isBoxing(dClass,sClass))     return write("new ",dClass.getName(),"(",sourceContent,")");    if (isUnBoxing(dClass,sClass))     return write(sourceContent,".",dClass.getName(),"Value()");  }  return sourceContent;}  }
class C{  public Builder negativeExamples(File negativeExamples){  this.negativeExamples=negativeExamples;  return this;}  }
class C{  private boolean expressionMatch(){  ArrayList<String> values=new ArrayList<>(Arrays.asList(textField.getText().split("[ ,(,),+,-,/,*]")));  values.removeAll(Arrays.asList("+","-","/","*"," ","(",")",""));  return values.containsAll(cardNumbers);}  }
class C{  public boolean match(T value){  return match(value,blacklist);}  }
class C{  public Object lookup(FacesContext facesContext,String name){  Object object=null;  try {    InitialContext context=new InitialContext();    object=context.lookup(name);  } catch (  NamingException ne) {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"Unable to lookup: " + name,ne);    }    if (facesContext.isProjectStage(ProjectStage.Development)) {      facesContext.addMessage(null,new FacesMessage("Unable to lookup: " + name,"Unable to lookup: " + name));    }  }  return object;}  }
class C{  private static String normalize(final String str){  char c;  StringBuffer buf=new StringBuffer();  for (int i=0; i < str.length(); i++) {    c=str.charAt(i);    if (Character.isLetter(c)) {      buf.append(Character.toLowerCase(c));    }  }  return buf.toString();}  }
class C{  public void dropPcjTable(final Connector accumuloConn,final String pcjTableName) throws PCJStorageException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  try {    accumuloConn.tableOperations().delete(pcjTableName);  } catch (  AccumuloException|AccumuloSecurityException|TableNotFoundException e) {    throw new PCJStorageException("Could not delete PCJ table named: " + pcjTableName,e);  }}  }
class C{  public CSSLangCondition(String lang){  this.lang=lang.toLowerCase();  this.langHyphen=lang + '-';}  }
class C{  private void renameReplay(){  Path targetFile;  try {    final TemplateEngine engine=new TemplateEngine(Env.APP_SETTINGS.get(Settings.RENAME_NEW_REPS_TEMPLATE));    targetFile=engine.apply(file);  } catch (  final InvalidTemplateException ite) {    Env.LOGGER.error("Failed to rename new replay, template is invalid: " + Env.APP_SETTINGS.get(Settings.RENAME_NEW_REPS_TEMPLATE),ite);    return;  }  if (targetFile == null) {    return;  }  targetFile=Utils.uniqueFile(targetFile);  boolean ignore=true;  if (!file.getParent().equals(targetFile.getParent()) && !folderInfo.recursive)   ignore=false;  if (ignore)   Env.WATCHER.addIgnoredPath(targetFile);  if (!Files.exists(targetFile.getParent()))   try {    Files.createDirectories(targetFile.getParent());  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to create subfolders, new replay renaming will probably fail: " + targetFile.getParent(),ie);  }  try {    Files.move(file,targetFile);    Env.LOGGER.info("Renamed new replay: \"" + file + "\" to \""+ targetFile+ "\"");    file=targetFile;  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to rename new replay: \"" + file + "\" to \""+ targetFile+ "\"",ie);    if (ignore)     Env.WATCHER.removeIgnoredPath(targetFile);  }}  }
class C{  static long toLong(String v){  String buildPart="1";  long buildType=700;  if (v.endsWith("-SNAPSHOT")) {    buildPart="";    v=v.substring(0,v.indexOf("-SNAPSHOT"));    buildType=0;  } else   if (v.contains("-alpha-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-alpha-"));    buildType=100;  } else   if (v.contains("-beta-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-beta-"));    buildType=300;  } else   if (v.contains("-rc-")) {    buildPart=v.substring(v.lastIndexOf('-') + 1);    v=v.substring(0,v.indexOf("-rc-"));    buildType=500;  }  String[] parts=v.split("\\.");  if (parts.length > 3) {    throw new IllegalArgumentException("Illegal version number: " + v);  }  long major=parts.length > 0 ? Long.parseLong(parts[0]) : 0;  long minor=parts.length > 1 ? Long.parseLong(parts[1]) : 0;  long rev=parts.length > 2 ? Long.parseLong(parts[2]) : 0;  long build=buildPart.isEmpty() ? 0 : Long.parseLong(buildPart);  long result=(((major * 1000 + minor) * 1000 + rev) * 1000) + build + buildType;  return result;}  }
class C{  @SuppressWarnings("unchecked") public LiteralExtensionIV createIV(final Value value){  if (value instanceof Literal == false)   throw new IllegalArgumentException();  final Literal lit=(Literal)value;  final AbstractLiteralIV delegate=new XSDNumericIV<BigdataLiteral>(XMLDatatypeUtil.parseFloat(lit.getLabel()));  return new LiteralExtensionIV(delegate,datatype.getIV());}  }
class C{  public StaticNodeSettings build(){  checkNotNull(address,"address");  return new StaticNodeSettings(this);}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SYMBOL_TABLE_ENTRY_IM_ONLY;}  }
class C{  public void detachSprite(Sprite sprite){  Collection<AttachedSprite> sprites=attachedSprites;  if (sprites != null) {    Iterator<AttachedSprite> it=sprites.iterator();    while (it.hasNext()) {      AttachedSprite as=it.next();      if (as.sprite == sprite) {        it.remove();        break;      }    }  }}  }
class C{  public Date lastModified(){  return DateFormat.RESPONSE_DATE_FORMAT.parseDateTime(lastModified).toDate();}  }
class C{  public List<ChallengeHandler> lookup(String location){  List<ChallengeHandler> result=Collections.emptyList();  if (location != null) {    Node<ChallengeHandler,UriElement> resultNode=findBestMatchingNode(location);    if (resultNode != null) {      return resultNode.getValues();    }  }  return result;}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public static void fill(int[] a,int val){  fill(a,0,a.length,val);}  }
class C{  public static void main(String[] argv){  runClassifier(new DecisionStump(),argv);}  }
class C{  public static void copyRemaining(ByteBuffer src,ByteBuffer dst){  int n=Math.min(src.remaining(),dst.remaining());  copy(src,dst,n);}  }
class C{  public CountProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public synchronized void remove(Aspect transientInstance){  try {    if (null != transientInstance.getId()) {      EntityManager entityManager=EntityManagerHelper.getEntityManager();      entityManager.getTransaction().begin();      Object aspect=entityManager.find(transientInstance.getClass(),transientInstance.getId());      if (null != aspect) {        entityManager.remove(aspect);      }      entityManager.getTransaction().commit();    }  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static Double[] toObject(final double[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;  }  final Double[] result=new Double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Double(array[i]);  }  return result;}  }
class C{  public Boolean isRecordReplayEnabled(){  return recordReplayEnabled;}  }
class C{  public static int randomInt(int lowerThan){  return RANDOM.nextInt(lowerThan);}  }
class C{  public void postIdle(final Runnable runnable){  postIdle(runnable,0);}  }
class C{  public static PortInfoBubble displayPrecheckInputPortDisconnectedWarning(final Port port){  return displayPrecheckInputPortDisconnectedWarning(port,true);}  }
class C{  @ExpectWarning("IL") private static void case1(){  case1();}  }
class C{  protected OMGraphic drawFeature(int primitiveID,VPFFeatureWarehouse warehouse,LatLonPoint ll1,LatLonPoint ll2,double dpplat,double dpplon,String currentFeature,int featurePrimID) throws FormatException {  if (aft != null || tft != null || edg != null || ent != null || cnt != null) {    if ((aft != null) && aft.getRow(primitiveVector,primitiveID)) {      return aft.drawFeature(warehouse,dpplat,dpplon,ll1,ll2,primitiveVector,currentFeature,featurePrimID);    }    if ((tft != null) && tft.getRow(primitiveVector,primitiveID)) {      return tft.drawFeature(warehouse,dpplat,dpplon,ll1,ll2,primitiveVector,currentFeature,featurePrimID);    }    if ((ent != null) && ent.getRow(primitiveVector,primitiveID)) {      return ent.drawFeature(warehouse,dpplat,dpplon,ll1,ll2,primitiveVector,currentFeature,featurePrimID);    }    if ((cnt != null) && cnt.getRow(primitiveVector,primitiveID)) {      return cnt.drawFeature(warehouse,dpplat,dpplon,ll1,ll2,primitiveVector,currentFeature,featurePrimID);    }    if ((edg != null) && edg.getRow(primitiveVector,primitiveID)) {      return edg.drawFeature(warehouse,dpplat,dpplon,ll1,ll2,primitiveVector,currentFeature,featurePrimID);    }  }  return null;}  }
class C{  public byte[] reSample(byte[] sourceData,int bitsPerSample,int sourceRate,int targetRate){  int bytePerSample=bitsPerSample / 8;  int numSamples=sourceData.length / bytePerSample;  short[] amplitudes=new short[numSamples];  int pointer=0;  for (int i=0; i < numSamples; i++) {    short amplitude=0;    for (int byteNumber=0; byteNumber < bytePerSample; byteNumber++) {      amplitude|=(short)((sourceData[pointer++] & 0xFF) << (byteNumber * 8));    }    amplitudes[i]=amplitude;  }  LinearInterpolation reSample=new LinearInterpolation();  short[] targetSample=reSample.interpolate(sourceRate,targetRate,amplitudes);  int targetLength=targetSample.length;  byte[] bytes;  if (bytePerSample == 1) {    bytes=new byte[targetLength];    for (int i=0; i < targetLength; i++) {      bytes[i]=(byte)targetSample[i];    }  } else {    bytes=new byte[targetLength * 2];    for (int i=0; i < targetSample.length; i++) {      bytes[i * 2]=(byte)(targetSample[i] & 0xff);      bytes[i * 2 + 1]=(byte)((targetSample[i] >> 8) & 0xff);    }  }  return bytes;}  }
class C{  public static String removeIllegalCharacter(final String text){  final StringBuilder rVal=new StringBuilder();  for (int i=0; i < text.length(); ++i) {    if (!isIllegalFileNameChar(text.charAt(i))) {      rVal.append(text.charAt(i));    }  }  return rVal.toString();}  }
class C{  public Sheep retrieveSheep(){  if (player.hasSlot("#flock")) {    final RPSlot slot=player.getSlot("#flock");    if (slot.size() > 0) {      final RPObject object=slot.getFirst();      slot.remove(object.getID());      player.removeSlot("#flock");      object.put("x",player.getX());      object.put("y",player.getY());      return new Sheep(object,player);    }  }  return null;}  }
class C{  public void sendChunk(ServerConnection servConn) throws IOException {  if (this.sc != servConn)   throw new IllegalStateException("this.sc was not correctly set");  sendChunk();}  }
class C{  public boolean isAutoRange(){  return this.autoRange;}  }
class C{  public void testDeleteOneTracksInMyTracks() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.createTrackIfEmpty(2,false);  EndToEndTestUtils.SOLO.clickOnMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_delete));  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackListActivity.getString(R.string.generic_yes));  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFile(EndToEndTestUtils.trackName,false,drive);}  }
class C{  private void writeObject(final ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();}  }
class C{  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,final SSLTestConfig sslConfig) throws Exception {  cluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve("collection1").resolve("conf"),CONF_NAME);  checkCreateCollection(cluster,"first_collection");  checkClusterJettys(cluster,sslConfig);  JettySolrRunner stoppedServer=cluster.stopJettySolrRunner(0);  assertTrue(stoppedServer.isStopped());  assertEquals(NUM_SERVERS - 1,cluster.getJettySolrRunners().size());  JettySolrRunner startedServer=cluster.startJettySolrRunner();  assertTrue(startedServer.isRunning());  assertEquals(NUM_SERVERS,cluster.getJettySolrRunners().size());  checkClusterJettys(cluster,sslConfig);  checkCreateCollection(cluster,"second_collection");}  }
class C{  public static void pushNamespaces(BindingExpression be,Stack<PrefixMapping> namespaces){  for (int i=0, count=namespaces.size(); i < count; i++) {    PrefixMapping pm=namespaces.get(i);    be.addNamespace(pm.getUri(),pm.getNs());  }}  }
class C{  private String prefix(){  return configClass.getSimpleName() + "$";}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  private static File GetFileFromPath(String path){  boolean ret;  boolean isExist;  boolean isWritable;  File file=null;  if (TextUtils.isEmpty(path)) {    Log.e("Error","The path of Log file is Null.");    return file;  }  file=new File(path);  isExist=file.exists();  isWritable=file.canWrite();  if (isExist) {    if (isWritable) {    } else {      Log.e("Error","The Log file can not be written.");    }  } else {    try {      ret=file.createNewFile();      if (ret) {        Log.i("Success","The Log file was successfully created! -" + file.getAbsolutePath());      } else {        Log.i("Success","The Log file exist! -" + file.getAbsolutePath());      }      isWritable=file.canWrite();      if (!isWritable) {        Log.e("Error","The Log file can not be written.");      }    } catch (    IOException e) {      Log.e("Error","Failed to create The Log file.");      e.printStackTrace();    }  }  return file;}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0))   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (next >= length)   return -1;  int n=Math.min(length - next,len);  text.getChars(next,next + n,cbuf,off);  next+=n;  return n;}  }
class C{  public static ArrayList<Instruction> recompileHopsDag2Forced(Hop hops,long tid,ExecType et) throws DMLRuntimeException, HopsException, LopsException, IOException {  ArrayList<Instruction> newInst=null;synchronized (hops) {    LOG.debug("\n**************** Optimizer (Recompile) *************\nMemory Budget = " + OptimizerUtils.toMB(OptimizerUtils.getLocalMemBudget()) + " MB");    hops.resetVisitStatus();    rClearLops(hops);    hops.resetVisitStatus();    rSetExecType(hops,et);    hops.resetVisitStatus();    Dag<Lop> dag=new Dag<Lop>();    Lop lops=hops.constructLops();    lops.addToDag(dag);    newInst=dag.getJobs(null,ConfigurationManager.getDMLConfig());  }  if (tid != 0)   newInst=ProgramConverter.createDeepCopyInstructionSet(newInst,tid,-1,null,null,null,false,false);  return newInst;}  }
class C{  public void reset(){  super.reset();  this.V[0]=0x7380166F;  this.V[1]=0x4914B2B9;  this.V[2]=0x172442D7;  this.V[3]=0xDA8A0600;  this.V[4]=0xA96F30BC;  this.V[5]=0x163138AA;  this.V[6]=0xE38DEE4D;  this.V[7]=0xB0FB0E4E;  this.xOff=0;}  }
class C{  public GMLWriter(boolean emitNamespace){  this.setNamespace(emitNamespace);}  }
class C{  public RMIException(VM vm,String className,String methodName,Throwable cause){  super("While invoking " + className + "."+ methodName+ " in "+ vm,cause);  this.cause=cause;  this.className=className;  this.methodName=methodName;  this.vm=vm;}  }
class C{  protected static void checkRectangularShape(Object[][] array){  int columns=-1;  for (int row=array.length; --row >= 0; ) {    if (array[row] != null) {      if (columns == -1)       columns=array[row].length;      if (array[row].length != columns)       throw new IllegalArgumentException("All rows of array must have same number of columns.");    }  }}  }
class C{  public static SelectResults execute(ExecutablePool pool,String queryPredicate,Object[] queryParams){  AbstractOp op=null;  if (queryParams != null && queryParams.length > 0) {    op=new QueryOpImpl(queryPredicate,queryParams);  } else {    op=new QueryOpImpl(queryPredicate);  }  return (SelectResults)pool.execute(op);}  }
class C{  static String determineSourceHome(){  try {    File file;    try {      file=new File("solr/conf");      if (!file.exists()) {        file=new File(Thread.currentThread().getContextClassLoader().getResource("solr/conf").toURI());      }    } catch (    Exception e) {      file=new File(".");    }    File base=file.getAbsoluteFile();    while (!(new File(base,"solr/CHANGES.txt").exists()) && null != base) {      base=base.getParentFile();    }    return (null == base) ? null : new File(base,"solr/").getAbsolutePath();  } catch (  RuntimeException e) {    return null;  }}  }
class C{  private static VirtualPoolChangeOperationEnum vplexCommonChecks(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff,String[] include){  s_logger.info(String.format("Checking vplexCommonChecks from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  boolean isRPVPlex=VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool);  if ((!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) && (!newVpool.getMultivolumeConsistency())) {    notSuppReasonBuff.append("The volume is in a consistency group but the target virtual pool does not specify multi-volume consistency");    return null;  }  include=new String[]{HIGH_AVAILABILITY};  if (!analyzeChanges(currentVpool,newVpool,include,null,null).isEmpty()) {    if (volume.isIngestedVolumeWithoutBackend(dbClient)) {      notSuppReasonBuff.append("The high availability of an ingested VPLEX volume cannot be modified.");      return null;    }    boolean isConvertToDistributed=isVPlexConvertToDistributed(currentVpool,newVpool,notSuppReasonBuff);    if (isConvertToDistributed && !VirtualPoolUtil.checkMatchingRemoteCopyVarraysettings(currentVpool,newVpool,dbClient)) {      isConvertToDistributed=false;      notSuppReasonBuff.append("Incompatible Remote Copy Varray Settings");    }    if (isConvertToDistributed) {      URI haVarrayURI=getHaVarrayURI(newVpool);      URI volumeVarray=volume.getVirtualArray();      URI cgURI=volume.getConsistencyGroup();      if (haVarrayURI.equals(volumeVarray)) {        notSuppReasonBuff.append("The High Availability Virtual Array in the target " + "Virtual Pool must be different than the Virtual Array for the volume.");        return null;      } else       if (!NullColumnValueGetter.isNullURI(cgURI)) {        notSuppReasonBuff.append("The volume is in a consistency group");        return null;      } else {        if (!isRPVPlex) {          return VirtualPoolChangeOperationEnum.VPLEX_LOCAL_TO_DISTRIBUTED;        }      }    } else {      return null;    }  }  VirtualPool newHaVpool=null;  VirtualPool currentHaVpool=getHaVpool(currentVpool,dbClient);  if (currentHaVpool != null) {    try {      newHaVpool=getNewHaVpool(currentVpool,newVpool,dbClient);    } catch (    Exception e) {      s_logger.error(e.getMessage());      notSuppReasonBuff.append(String.format("Could not get new HA vpool from [%s]",newVpool.getLabel()));      return null;    }    if (!currentHaVpool.getId().toString().equals(newHaVpool.getId().toString())) {      s_logger.info("HA varray vpools are different");      if (isRPVPlex && newVpoolDoesNotSpecifyHaVpool) {        include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,NUM_PATHS};      } else {        include=new String[]{TYPE,VARRAYS,PROTECTION_VARRAY_SETTINGS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,NUM_PATHS};      }      Map<String,Change> changes=analyzeChanges(currentHaVpool,newHaVpool,include,null,null);      if (!changes.isEmpty()) {        notSuppReasonBuff.append("Changes in the following high availability virtual pool properties are not permitted: ");        fillInNotSupportedReasons(changes,notSuppReasonBuff);        return null;      }    }  }  boolean migrateHAVolume=false;  boolean migrateSourceVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool);  if (currentHaVpool != null) {    migrateHAVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool);  }  if (!migrateSourceVolume && !migrateHAVolume) {    notSuppReasonBuff.append("The virtual pool does not specify a change in any of the " + "following virtual pool properties: " + PROTOCOLS + ", "+ PROVISIONING_TYPE+ ", "+ USE_MATCHED_POOLS+ ", "+ ARRAY_INFO+ ", "+ DRIVE_TYPE+ ", "+ AUTO_TIER_POLICY_NAME+ ", "+ HOST_IO_LIMIT_IOPS+ ", "+ HOST_IO_LIMIT_BANDWIDTH+ ", "+ IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED+ ", "+ ASSIGNED_STORAGE_POOLS+ ", "+ VMAX_COMPRESSION_ENABLED);    if (!isRPVPlex) {      return null;    }  }  if (!isRPVPlex) {    return VirtualPoolChangeOperationEnum.VPLEX_DATA_MIGRATION;  }  return VirtualPoolChangeOperationEnum.RP_PROTECTED;}  }
class C{  public static String dateToString(Date date,Resolution resolution){  return timeToString(date.getTime(),resolution);}  }
class C{  void doubleBufferingChanged(JRootPane rootPane){  getPaintManager().doubleBufferingChanged(rootPane);}  }
class C{  public MmsException(String message){  super(message);}  }
class C{  public void searchDeclarationsOfAccessedFields(IJavaElement enclosingElement,SearchRequestor requestor,IProgressMonitor monitor) throws JavaModelException {  if (VERBOSE) {    Util.verbose("BasicSearchEngine.searchDeclarationsOfAccessedFields(IJavaElement, SearchRequestor, SearchPattern, IProgressMonitor)");  }switch (enclosingElement.getElementType()) {case IJavaElement.FIELD:case IJavaElement.METHOD:case IJavaElement.TYPE:case IJavaElement.COMPILATION_UNIT:    break;default :  throw new IllegalArgumentException();}SearchPattern pattern=new DeclarationOfAccessedFieldsPattern(enclosingElement);searchDeclarations(enclosingElement,requestor,pattern,monitor);}  }
class C{  public final String sourceExpression(int index,Instances data){  return "true";}  }
class C{  public double f1Measure(){  return fMeasure(1.0);}  }
class C{  public boolean removeNode(Node node){  if (!nodes.contains(node)) {    return false;  }  boolean changed=false;  List<Edge> edgeList1=edgeLists.get(node);  for (Iterator<Edge> i=edgeList1.iterator(); i.hasNext(); ) {    Edge edge=(i.next());    Node node2=edge.getDistalNode(node);    if (node2 != node) {      List<Edge> edgeList2=edgeLists.get(node2);      edgeList2.remove(edge);      edgesSet.remove(edge);      changed=true;    }    i.remove();    getPcs().firePropertyChange("edgeRemoved",edge,null);  }  edgeLists.remove(node);  nodes.remove(node);  namesHash.remove(node.getName());  stuffRemovedSinceLastTripleAccess=true;  getPcs().firePropertyChange("nodeRemoved",node,null);  return changed;}  }
class C{  private static IdUrlPair bestSchedulerInfoMatchLikeValue(String value,String schedulerIdField){  String schedulerUrlField;  if (schedulerIdField.equals(AppResult.TABLE.FLOW_DEF_ID)) {    schedulerUrlField=AppResult.TABLE.FLOW_DEF_URL;  } else   if (schedulerIdField.equals(AppResult.TABLE.FLOW_EXEC_ID)) {    schedulerUrlField=AppResult.TABLE.FLOW_EXEC_URL;  } else   if (schedulerIdField.equals(AppResult.TABLE.JOB_DEF_ID)) {    schedulerUrlField=AppResult.TABLE.JOB_DEF_URL;  } else   if (schedulerIdField.equals(AppResult.TABLE.JOB_EXEC_ID)) {    schedulerUrlField=AppResult.TABLE.JOB_EXEC_URL;  } else {    throw new RuntimeException(String.format("%s is not a valid scheduler info id field",schedulerIdField));  }  AppResult result=AppResult.find.select(String.format("%s, %s",schedulerIdField,schedulerUrlField)).where().like(schedulerIdField,value).order().desc(AppResult.TABLE.FINISH_TIME).setMaxRows(1).findUnique();  if (result != null) {    if (schedulerIdField.equals(AppResult.TABLE.FLOW_DEF_ID)) {      return new IdUrlPair(result.flowDefId,result.flowDefUrl);    } else     if (schedulerIdField.equals(AppResult.TABLE.FLOW_EXEC_ID)) {      return new IdUrlPair(result.flowExecId,result.flowExecUrl);    } else     if (schedulerIdField.equals(AppResult.TABLE.JOB_DEF_ID)) {      return new IdUrlPair(result.jobDefId,result.jobDefUrl);    } else     if (schedulerIdField.equals(AppResult.TABLE.JOB_EXEC_ID)) {      return new IdUrlPair(result.jobExecId,result.jobExecUrl);    }  }  return null;}  }
class C{  public static WritableIntegerDataStore makeIntegerStorage(DBIDs ids,int hints){  return DataStoreFactory.FACTORY.makeIntegerStorage(ids,hints);}  }
class C{  public static int toIntValue(Object o) throws PageException {  if (o instanceof Number)   return ((Number)o).intValue(); else   if (o instanceof Boolean)   return ((Boolean)o).booleanValue() ? 1 : 0; else   if (o instanceof String)   return toIntValue(o.toString().trim()); else   if (o instanceof Castable)   return (int)((Castable)o).castToDoubleValue(); else   if (o instanceof Date)   return (int)new DateTimeImpl((Date)o).castToDoubleValue();  if (o instanceof String)   throw new ExpressionException("Can't cast String [" + o.toString() + "] to a number"); else   if (o instanceof ObjectWrap)   return toIntValue(((ObjectWrap)o).getEmbededObject());  throw new CasterException(o,"number");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.144 -0400",hash_original_method="276BA2998AD5CA6CB8793024631853D4",hash_generated_method="732998B786CE877AAFBD00A9B900A155") public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.THIS_LITERAL;}  }
class C{  public static void printMessage(int errorCode,String parameter){  printMessage(errorCode,new String[]{parameter});}  }
class C{  public int V(){  return N * N;}  }
class C{  public final static boolean isNotNullOrEmptyOrZero(Object object){  return !(isNullOrEmpty(object,true));}  }
class C{  protected ShaderVar addVarying(IGlobalShaderVar var){  return addVarying(var.getVarString(),var.getDataType());}  }
class C{  void computeMinMaxScroll(ArrayList<T> data,boolean launchedWithAltTab,boolean launchedFromHome){  mTaskProgressMap.clear();  if (data.isEmpty()) {    mMinScrollP=mMaxScrollP=0;    return;  }  int taskHeight=mTaskRect.height();  float pAtBottomOfStackRect=screenYToCurveProgress(mStackVisibleRect.bottom);  float pWithinAffiliateTop=screenYToCurveProgress(mStackVisibleRect.bottom - mWithinAffiliationOffset);  float scale=curveProgressToScale(pWithinAffiliateTop);  int scaleYOffset=(int)(((1f - scale) * taskHeight) / 2);  pWithinAffiliateTop=screenYToCurveProgress(mStackVisibleRect.bottom - mWithinAffiliationOffset + scaleYOffset);  float pWithinAffiliateOffset=pAtBottomOfStackRect - pWithinAffiliateTop;  float pBetweenAffiliateOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - mBetweenAffiliationOffset);  float pTaskHeightOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - taskHeight);  float pNavBarOffset=pAtBottomOfStackRect - screenYToCurveProgress(mStackVisibleRect.bottom - (mStackVisibleRect.bottom - mStackRect.bottom));  float pAtBackMostCardTop=0.5f;  float pAtFrontMostCardTop=pAtBackMostCardTop;  int taskCount=data.size();  for (int i=0; i < taskCount; i++) {    mTaskProgressMap.put(data.get(i),pAtFrontMostCardTop);    if (i < (taskCount - 1)) {      float pPeek=pBetweenAffiliateOffset;      pAtFrontMostCardTop+=pPeek;    }  }  mMaxScrollP=pAtFrontMostCardTop - ((1f - pTaskHeightOffset - pNavBarOffset));  mMinScrollP=data.size() == 1 ? Math.max(mMaxScrollP,0f) : 0f;  if (launchedWithAltTab && launchedFromHome) {    mInitialScrollP=mMaxScrollP;  } else {    mInitialScrollP=pAtFrontMostCardTop - 0.825f;  }  mInitialScrollP=Math.min(mMaxScrollP,Math.max(0,mInitialScrollP));}  }
class C{  protected boolean labelsHaveSameBaselines(){  if (!checkedLabelBaselines) {    checkedLabelBaselines=true;    Dictionary dictionary=slider.getLabelTable();    if (dictionary != null) {      sameLabelBaselines=true;      Enumeration elements=dictionary.elements();      int baseline=-1;      while (elements.hasMoreElements()) {        JComponent label=(JComponent)elements.nextElement();        Dimension pref=label.getPreferredSize();        int labelBaseline=label.getBaseline(pref.width,pref.height);        if (labelBaseline >= 0) {          if (baseline == -1) {            baseline=labelBaseline;          } else           if (baseline != labelBaseline) {            sameLabelBaselines=false;            break;          }        } else {          sameLabelBaselines=false;          break;        }      }    } else {      sameLabelBaselines=false;    }  }  return sameLabelBaselines;}  }
class C{  private static String formatTo2Digits(String str){  if (str.length() < 2) {    str="0" + str;  }  return str;}  }
class C{  private static TreeNode next(TreeNode x){  if (x == null) {    return null;  }  TreeNode r=x.right;  if (r != null) {    x=r;    TreeNode l=x.left;    while (l != null) {      x=l;      l=x.left;    }    return x;  }  TreeNode ch=x;  x=x.parent;  while (x != null && ch == x.right) {    ch=x;    x=x.parent;  }  return x;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="emp:qualifiedName";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public boolean gaussianElimination(final long[] solution){  assert solution.length == numVars;  for (  Modulo2Equation equation : equations)   equation.updateFirstVar();  if (!echelonForm())   return false;  for (int i=equations.size(); i-- != 0; ) {    final Modulo2Equation equation=equations.get(i);    if (equation.isIdentity())     continue;    assert solution[equation.firstVar] == 0 : equation.firstVar;    solution[equation.firstVar]=equation.c ^ Modulo2Equation.scalarProduct(equation.bits,solution);  }  return true;}  }
class C{  public void addEmail(Email email){  email.save();  emails.add(email);}  }
class C{  public static int deleteMovementMA(int M_Movement_ID,String trxName){  String sql="DELETE FROM M_MovementLineMA ma WHERE EXISTS " + "(SELECT * FROM M_MovementLine l WHERE l.M_MovementLine_ID=ma.M_MovementLine_ID" + " AND M_Movement_ID=" + M_Movement_ID + ")";  return DB.executeUpdate(sql,trxName);}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  @Override public void putAll(K key,V value,Object... others){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void removeClientDirection(final Direction direction){  directions.remove(direction);}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(String nativeGuid){  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  List<URI> filesystemUris=new ArrayList<URI>();  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemUris.add(unFileSystemtURI);  }  if (!filesystemUris.isEmpty()) {    filesystemInfo=_dbClient.queryObject(UnManagedFileSystem.class,filesystemUris.get(0));  }  return filesystemInfo;}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  for (int i=0; i < m_AttValues.length; i++) {    if (i > 0)     text.append(",");    text.append(toString(i));  }  return text.toString();}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  private void buildKDCConfigurations(OMElement kdcConfigElement) throws EmbeddingLDAPException {  Map<String,String> propertyMap=getChildPropertyElements(kdcConfigElement);  String booleanString;  if ((booleanString=propertyMap.get("enabled")) != null) {    this.kdcEnabled=Boolean.parseBoolean(booleanString);    if (!this.kdcEnabled) {      logger.info("KDC server is disabled.");      return;    }  } else {    logger.info("KDC server is disabled.");    return;  }  this.kdcConfigurations=new KdcConfiguration();  this.kdcConfigurations.setKdcName(propertyMap.get("name"));  try {    this.kdcConfigurations.setKdcCommunicationProtocol(propertyMap.get("protocol"));  } catch (  DirectoryServerException e) {    String errorMessage="Can not read/set protocol parameter in KDCConfig.";    logger.error(errorMessage,e);    throw new EmbeddingLDAPException(errorMessage,e);  }  this.kdcConfigurations.setKdcHostAddress(propertyMap.get("host"));  int port=Integer.parseInt(propertyMap.get("port"));  if (port == -1) {    logger.warn("KDC port defined in carbon.xml's " + CARBON_KDC_PORT_CONFIG_SECTION + " config section or embedded-ldap.xml is invalid. "+ "Setting KDC server port to default - "+ DEFAULT_KDC_SERVER_PORT);    port=DEFAULT_KDC_SERVER_PORT;  }  this.kdcConfigurations.setKdcCommunicationPort(port);  this.kdcConfigurations.setMaxTicketLifeTime(getIntegerValue(propertyMap.get("maximumTicketLifeTime")));  this.kdcConfigurations.setMaxRenewableLifeTime(getIntegerValue(propertyMap.get("maximumRenewableLifeTime")));  if ((booleanString=propertyMap.get("preAuthenticationTimeStampEnabled")) != null) {    boolean preAuthenticationTSEnabled=Boolean.parseBoolean(booleanString);    this.kdcConfigurations.setPreAuthenticateTimeStampRequired(preAuthenticationTSEnabled);  }}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  hashCodeUpToDate=false;  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  int numMoved=size - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Entry.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addElement(Comments.KEY);  builder.addElement(EventStatus.KEY);  builder.addElement(Where.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(OriginalEvent.KEY);  builder.addElement(Who.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(Recurrence.KEY);  builder.addElement(RecurrenceException.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(Reminder.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(When.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(Transparency.KEY);  builder.addElement(Visibility.KEY);  registry.adapt(Entry.KEY,KIND,KEY);}  }
class C{  protected boolean isIncludePayload(){  return includePayload;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void successExecutionCycle(){  if (nextUnloadPointer != null) {    nextUnloadPointer.setNext(firstCutpointPointer);  } else {    firstPointer=firstCutpointPointer;  }  nextLoadPointer=firstPointer;  nextUnloadPointer=null;  firstCutpointPointer=null;}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice){  return blackFormulaImpliedStdDevApproximation(optionType,strike,forward,blackPrice,1.0,0.0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int watchProcess(Process proc) throws Exception {  BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));  String line;  while ((line=reader.readLine()) != null)   log().info(line);  return proc.waitFor();}  }
class C{  public boolean isRepresentationClassCharBuffer(){  return java.nio.CharBuffer.class.isAssignableFrom(representationClass);}  }
class C{  public Shingles manySeriesToShingles(Map<String,ArrayList<double[]>> data,int windowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy strategy,double normalizationThreshold,int shingleSize) throws SAXException {  Shingles res=new Shingles(alphabetSize,shingleSize);  for (  Entry<String,ArrayList<double[]>> e : data.entrySet()) {    for (    double[] series : e.getValue()) {      Map<String,Integer> shingles=ts2Shingles(series,windowSize,paaSize,alphabetSize,strategy,normalizationThreshold,shingleSize);      int[] counts=new int[res.getIndex().size()];      for (      String str : shingles.keySet()) {        Integer idx=res.getIndex().get(str);        counts[idx]=shingles.get(str);      }      res.addShingledSeries(e.getKey(),counts);    }  }  return res;}  }
class C{  public TimeReachedCondition(final String questname){  this.questname=checkNotNull(questname);  this.index=-1;}  }
class C{  @BeforeMethod public void init(){  MockitoAnnotations.initMocks(this);  cmrStorageRecorder=new CmrStorageRecorder();  cmrStorageRecorder.storageDataDao=storageDataDao;  cmrStorageRecorder.cmrStorageManager=cmrStorageManager;  cmrStorageRecorder.executorService=executorService;  cmrStorageRecorder.log=LoggerFactory.getLogger(CmrStorageRecorder.class);  when(storageWriter.isWritingOn()).thenReturn(true);}  }
class C{  private CloseableReference(SharedReference<T> sharedReference){  mSharedReference=Preconditions.checkNotNull(sharedReference);  sharedReference.addReference();}  }
class C{  public static long moduloSignedPowerOfTwo(long value,long spot){  if (ASSERTIONS)   assert (isSignedPowerOfTwo(spot));  if (spot == Long.MIN_VALUE) {    return (value != Long.MIN_VALUE) ? value : 0;  } else {    long s=(value >> 63);    return ((((value + s) ^ s) & (abs(spot) - 1)) + s) ^ s;  }}  }
class C{  private Protos.TaskInfo createTask(Protos.Offer offer,IgniteTask igniteTask,Protos.TaskID taskId){  String cfgUrl=clusterProps.igniteConfigUrl() != null ? clusterProps.igniteConfigUrl() : resourceProvider.igniteConfigUrl();  Protos.CommandInfo.Builder builder=Protos.CommandInfo.newBuilder().setEnvironment(Protos.Environment.newBuilder().addVariables(Protos.Environment.Variable.newBuilder().setName("IGNITE_TCP_DISCOVERY_ADDRESSES").setValue(getAddress(offer.getHostname()))).addVariables(Protos.Environment.Variable.newBuilder().setName("JVM_OPTS").setValue(clusterProps.jmvOpts()))).addUris(Protos.CommandInfo.URI.newBuilder().setValue(clusterProps.ignitePackageUrl() != null ? clusterProps.ignitePackageUrl() : resourceProvider.igniteUrl()).setExtract(true)).addUris(Protos.CommandInfo.URI.newBuilder().setValue(cfgUrl));  Collection<String> usersLibs=new ArrayList<>();  if (clusterProps.usersLibsUrl() != null && !clusterProps.usersLibsUrl().isEmpty())   Collections.addAll(usersLibs,clusterProps.usersLibsUrl().split(DELIM));  if (resourceProvider.resourceUrl() != null && !resourceProvider.resourceUrl().isEmpty())   usersLibs.addAll(resourceProvider.resourceUrl());  for (  String url : usersLibs)   builder.addUris(Protos.CommandInfo.URI.newBuilder().setValue(url));  String cfgName=resourceProvider.configName();  if (clusterProps.igniteConfigUrl() != null)   cfgName=fileName(clusterProps.igniteConfigUrl());  String licenceFile=null;  if (clusterProps.licenceUrl() != null)   licenceFile=fileName(clusterProps.licenceUrl());  builder.setValue((licenceFile != null ? "find . -maxdepth 1 -name \"" + licenceFile + "\" -exec cp {} ./*/ \\; && " : "") + "find . -maxdepth 1 -name \"*.jar\" -exec cp {} ./*/libs/ \\; && " + "./*/bin/ignite.sh "+ cfgName+ " -J-Xmx"+ String.valueOf((int)igniteTask.mem() + "m")+ " -J-Xms"+ String.valueOf((int)igniteTask.mem())+ "m");  return Protos.TaskInfo.newBuilder().setName("Ignite node " + taskId.getValue()).setTaskId(taskId).setSlaveId(offer.getSlaveId()).setCommand(builder).addResources(Protos.Resource.newBuilder().setName(CPU).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.cpuCores()))).addResources(Protos.Resource.newBuilder().setName(MEM).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.mem()))).addResources(Protos.Resource.newBuilder().setName(DISK).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.disk()))).build();}  }
class C{  public void startWorkflow(final ReceiptHeader receiptHeader) throws ApplicationRuntimeException {  final Boolean createVoucherForBillingService=collectionsUtil.checkVoucherCreation(receiptHeader);  Position position=null;  if (!collectionsUtil.isEmployee(receiptHeader.getCreatedBy()))   position=collectionsUtil.getPositionByDeptDesgAndBoundary(receiptHeader.getReceiptMisc().getBoundary()); else   position=collectionsUtil.getPositionOfUser(receiptHeader.getCreatedBy());  if (receiptHeader.getState() == null && !createVoucherForBillingService)   receiptHeader.transition().start().withSenderName(receiptHeader.getCreatedBy().getUsername() + "::" + receiptHeader.getCreatedBy().getName()).withComments(CollectionConstants.WF_STATE_RECEIPT_CREATED).withStateValue(CollectionConstants.WF_STATE_RECEIPT_CREATED).withOwner(position).withDateInfo(new Date()).withNextAction(CollectionConstants.WF_ACTION_SUBMIT); else   if (createVoucherForBillingService) {    createVoucherForReceipt(receiptHeader);    receiptHeader.transition().start().withSenderName(receiptHeader.getCreatedBy().getUsername() + "::" + receiptHeader.getCreatedBy().getName()).withComments("Receipt voucher created").withStateValue(CollectionConstants.WF_ACTION_CREATE_VOUCHER).withOwner(position).withDateInfo(new Date()).withNextAction(CollectionConstants.WF_ACTION_SUBMIT);  }  if (receiptHeader.getReceiptMisc().getDepositedInBank() != null)   receiptHeader.transition(true).withSenderName(receiptHeader.getCreatedBy().getUsername() + "::" + receiptHeader.getCreatedBy().getName()).withComments("Receipts Submitted for Approval").withStateValue(CollectionConstants.WF_ACTION_CREATE_VOUCHER).withOwner(position).withDateInfo(new Date()).withNextAction(CollectionConstants.WF_ACTION_SUBMIT);  LOGGER.debug("Workflow state transition complete");}  }
class C{  public RowSet createShared() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static void selectAllText(Element e){  Range range=Browser.getDocument().createRange();  range.selectNode(e);  Browser.getWindow().getSelection().addRange(range);}  }
class C{  public E replace(int key,E value){  if (value == null) {    return get(key);  }synchronized (this) {    Object[] arr=array;    if (arr.length <= key) {      return null;    }    E prev=(E)arr[key];    if (prev != null) {      arr[key]=value;      array=arr;      size++;    }    return prev;  }}  }
class C{  public void clear(){  for (int i=0; i < individuals.length; i++)   individuals[i]=null;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=IqrMc.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mc";  String parameter="1.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public byte[] serializeValue(Object value) throws IOException {  serializeObject(value,dataInputOutput.reset(),compression);  return dataInputOutput.toByteArray();}  }
class C{  public final void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static String decode(String s1){  StringBuffer buf=new StringBuffer();  int i;  for (i=0; i < s1.length(); ++i) {    char ch=s1.charAt(i);    if (ch == '&') {      int semi=s1.indexOf(';',i + 1);      if (semi == -1) {        buf.append(ch);        continue;      }      String entity=s1.substring(i + 1,semi);      Integer iso;      if (entity.charAt(0) == '#') {        iso=new Integer(entity.substring(1));      } else {        iso=e2i.get(entity);      }      if (iso == null) {        buf.append("&" + entity + ";");      } else {        buf.append((char)(iso.intValue()));      }      i=semi;    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public double[] computeLocalJointEntropyUsingPreviousObservations(double states[][]){  return computeLocalJointEntropyUsingPreviousObservations(states,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CSVReaderBuilder withCSVParser(final CSVParser csvParser){  this.csvParser=csvParser;  return this;}  }
class C{  public boolean hasAnnotatedQuery(){  return getAnnotatedQuery() != null;}  }
class C{  public Block(NetworkParameters params,long version,Sha256Hash prevBlockHash,Sha256Hash merkleRoot,long time,long difficultyTarget,long nonce,List<Transaction> transactions){  super(params);  this.version=version;  this.prevBlockHash=prevBlockHash;  this.merkleRoot=merkleRoot;  this.time=time;  this.difficultyTarget=difficultyTarget;  this.nonce=nonce;  this.transactions=new LinkedList<Transaction>();  this.transactions.addAll(transactions);}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.DOCUMENT_TYPE_NODE:  serializeDocType((DocumentType)node,false);break;case Node.ELEMENT_NODE:serializeElement((Element)node,false);break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,false);break;default :}}  }
class C{  public LayerSupport(Object sourceBean){  super(sourceBean);  logger.fine("LayerSupport created");}  }
class C{  @Beta public static <K,V>ImmutableListMultimap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  return new Builder<K,V>().putAll(entries).build();}  }
class C{  public XString(String val){  super(val);}  }
class C{  public int currentAsSource(){  return currentAsSource.get();}  }
class C{  private static int bitCount(long val){  val-=(val & 0xaaaaaaaaaaaaaaaaL) >>> 1;  val=(val & 0x3333333333333333L) + ((val >>> 2) & 0x3333333333333333L);  val=(val + (val >>> 4)) & 0x0f0f0f0f0f0f0f0fL;  val+=val >>> 8;  val+=val >>> 16;  return ((int)(val) + (int)(val >>> 32)) & 0xff;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void assertAlmostEquals(String message,Number expected,Number actual,int decimals){  double exp;  double act;  double factor;  factor=Math.pow(10,decimals);  exp=Math.round(expected.doubleValue() * factor) / factor;  act=Math.round(actual.doubleValue() * factor) / factor;  if (message == null)   TestCase.assertEquals(exp,act); else   TestCase.assertEquals(message,exp,act);}  }
class C{  public synchronized void removeSession(Session session){  if (session != null) {    userSessions.remove(session);  }}  }
class C{  public synchronized void store(String fileName) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  store(out,null);  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  InputStreamReader reader=new InputStreamReader(in,"ISO8859-1");  LineNumberReader r=new LineNumberReader(reader);  Writer w;  try {    w=new OutputStreamWriter(FileUtils.newOutputStream(fileName,false));  } catch (  Exception e) {    throw new IOException(e.toString(),e);  }  PrintWriter writer=new PrintWriter(new BufferedWriter(w));  while (true) {    String line=r.readLine();    if (line == null) {      break;    }    if (!line.startsWith("#")) {      writer.print(line + "\n");    }  }  writer.close();}  }
class C{  DoublesAuxiliary(DoublesSketch qs){  int k=qs.getK();  long n=qs.getN();  long bitPattern=qs.getBitPattern();  double[] combinedBuffer=qs.getCombinedBuffer();  int baseBufferCount=qs.getBaseBufferCount();  int numSamples=qs.getRetainedItems();  double[] itemsArr=new double[numSamples];  long[] cumWtsArr=new long[numSamples + 1];  populateFromQuantilesSketch(k,n,bitPattern,combinedBuffer,baseBufferCount,numSamples,itemsArr,cumWtsArr);  DoublesMergeImpl.blockyTandemMergeSort(itemsArr,cumWtsArr,numSamples,k);  long subtot=0;  for (int i=0; i < numSamples + 1; i++) {    long newSubtot=subtot + cumWtsArr[i];    cumWtsArr[i]=subtot;    subtot=newSubtot;  }  assert subtot == n;  auxN_=n;  auxSamplesArr_=itemsArr;  auxCumWtsArr_=cumWtsArr;}  }
class C{  public static boolean canSwapRows(Matrix matrix,int row1,int row2,int col1){  boolean response=true;  for (int col=0; col < col1; ++col) {    if (0 == matrix.getAsDouble(row1,col)) {      if (0 != matrix.getAsDouble(row2,col)) {        response=false;        break;      }    }  }  return response;}  }
class C{  public Move makeMove(int startSquare,int endSquare,int promotePiece) throws IllegalArgumentException {  Move move=null;  Move[] legals=getLegalMoves().asArray();  for (int i=0; move == null && i < legals.length; i++) {    Move candidate=legals[i];    if (candidate.getFrom() == startSquare && candidate.getTo() == endSquare && candidate.getPiecePromotedTo() == promotePiece) {      move=candidate;    }  }  if (move == null) {    throw new IllegalArgumentException("Invalid move: " + getSan(startSquare) + "-"+ getSan(endSquare)+ "="+ toString());  } else {    forceMove(move);  }  return move;}  }
class C{  public boolean isMediaProfileSource(){  return mediaProfileSource;}  }
class C{  public boolean isLeftMouseButton(MouseEvent me){  return SwingUtilities.isLeftMouseButton(me);}  }
class C{  public LabelRenderer(){}  }
class C{  public void clear(){  Assert.check(currentState != BitsState.UNKNOWN);  for (int i=0; i < bits.length; i++) {    bits[i]=0;  }  currentState=BitsState.NORMAL;}  }
class C{  @Override public boolean swipe(String obj,String dir,int steps) throws UiObjectNotFoundException {  return swipe(getUiObject(obj),dir,steps);}  }
class C{  private static int packBits(byte[] input,int inOffset,int inCount,byte[] output,int outOffset){  int inMax=inOffset + inCount - 1;  int inMaxMinus1=inMax - 1;  while (inOffset <= inMax) {    int run=1;    byte replicate=input[inOffset];    while (run < 127 && inOffset < inMax && input[inOffset] == input[inOffset + 1]) {      run++;      inOffset++;    }    if (run > 1) {      inOffset++;      output[outOffset++]=(byte)(-(run - 1));      output[outOffset++]=replicate;    }    run=0;    int saveOffset=outOffset;    while (run < 128 && ((inOffset < inMax && input[inOffset] != input[inOffset + 1]) || (inOffset < inMaxMinus1 && input[inOffset] != input[inOffset + 2]))) {      run++;      output[++outOffset]=input[inOffset++];    }    if (run > 0) {      output[saveOffset]=(byte)(run - 1);      outOffset++;    }    if (inOffset == inMax) {      if (run > 0 && run < 128) {        output[saveOffset]++;        output[outOffset++]=input[inOffset++];      } else {        output[outOffset++]=(byte)0;        output[outOffset++]=input[inOffset++];      }    }  }  return outOffset;}  }
class C{  public void testMergeOneFilterIntoDocumentWithSameFilter() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public JEditorPassword(){  super();}  }
class C{  static int computePreferredBufferSize(int dataLength){  if (dataLength > DEFAULT_BUFFER_SIZE)   return DEFAULT_BUFFER_SIZE;  return dataLength;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public Cache(int pref_size){  this(pref_size,9);}  }
class C{  public Inference(){}  }
class C{  public void testOneTrackTwoSegments() throws Exception {  Capture<Track> track=new Capture<Track>();  Location location0=createLocation(0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());  myTracksProviderUtils.clearTrack(getContext(),TRACK_ID_0);  expectFirstTrackPoint(location0,TRACK_ID_0,TRACK_POINT_ID_0);  expect(myTracksProviderUtils.bulkInsertTrackPoint((Location[])AndroidMock.anyObject(),eq(5),eq(TRACK_ID_0))).andStubReturn(5);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID_0)).andReturn(TRACK_POINT_ID_3);  expect(myTracksProviderUtils.getTrack(PreferencesUtils.getLong(getContext(),R.string.recording_track_id_key))).andStubReturn(null);  expectUpdateTrack(track,true,TRACK_ID_0);  AndroidMock.replay(myTracksProviderUtils);  InputStream inputStream=new ByteArrayInputStream(VALID_ONE_TRACK_TWO_SEGMENTS_GPX.getBytes());  KmlFileTrackImporter kmlFileTrackImporter=new KmlFileTrackImporter(getContext(),TRACK_ID_0,myTracksProviderUtils);  long trackId=kmlFileTrackImporter.importFile(inputStream);  assertEquals(TRACK_ID_0,trackId);  long time0=DATE_FORMAT_0.parse(TRACK_TIME_0).getTime();  long time1=DATE_FORMAT_1.parse(TRACK_TIME_1).getTime();  long time2=DATE_FORMAT_1.parse(TRACK_TIME_2).getTime();  long time3=DATE_FORMAT_1.parse(TRACK_TIME_3).getTime();  assertEquals(time1 - time0 + time3 - time2,track.getValue().getTripStatistics().getTotalTime());  AndroidMock.verify(myTracksProviderUtils);  verifyTrack(track.getValue(),TRACK_NAME_0,TRACK_DESCRIPTION_0,DATE_FORMAT_0.parse(TRACK_TIME_0).getTime());}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  super.preferenceChanged(child,width,height);  if (TableView.this.multiRowCells && height) {    for (int i=rowIndex - 1; i >= 0; i--) {      RowView rv=TableView.this.getRow(i);      if (rv.multiRowCells) {        rv.preferenceChanged(null,false,true);        break;      }    }  }}  }
class C{  public OutputModelObject buildParserOutputModel(){  Grammar g=delegate.getGrammar();  CodeGenerator gen=delegate.getGenerator();  ParserFile file=parserFile(gen.getRecognizerFileName());  setRoot(file);  Parser parser=parser(file);  file.parser=parser;  for (  Rule r : g.rules.values()) {    buildRuleFunction(parser,r);  }  return file;}  }
class C{  public int FindSym(int type,String id,String context){  int i=0;  while (i < symtab.size()) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.id.equals(id) && se.context.equals(context) && se.type == type)     return i;    i=i + 1;  }  return i;}  }
class C{  private JSONObject extractMetaDataFromFields(JSONObject metaData){  try {    metaData.put("title",mTitleText.getText().toString());    metaData.put("caption",mCaptionText.getText().toString());    metaData.put("alt",mAltText.getText().toString());    if (mAlignmentSpinner.getSelectedItemPosition() < mAlignmentKeyArray.length) {      metaData.put("align",mAlignmentKeyArray[mAlignmentSpinner.getSelectedItemPosition()]);    }    metaData.put("linkUrl",mLinkTo.getText().toString());    int newWidth=getEditTextIntegerClamped(mWidthText,10,mMaxImageWidth);    metaData.put("width",newWidth);    metaData.put("height",getRelativeHeightFromWidth(newWidth));  } catch (  JSONException e) {    AppLog.d(AppLog.T.EDITOR,"Unable to build JSON object from new meta data");  }  return metaData;}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Protos.TaskInfo createTask(Configuration configuration,FrameworkState frameworkState,Protos.Offer offer,Clock clock){  long elasticSearchNodeId=configuration.getExternalVolumeDriver() != null && configuration.getExternalVolumeDriver().length() > 0 ? clusterState.getElasticNodeId() : ExecutorEnvironmentalVariables.EXTERNAL_VOLUME_NOT_CONFIGURED;  LOGGER.debug("Elastic Search Node Id: " + elasticSearchNodeId);  if (configuration.isFrameworkUseDocker()) {    LOGGER.debug("Building Docker task");    Protos.TaskInfo taskInfo=buildDockerTask(offer,configuration,clock,elasticSearchNodeId);    LOGGER.debug(taskInfo.toString());    return taskInfo;  } else {    LOGGER.debug("Building native task");    Protos.TaskInfo taskInfo=buildNativeTask(offer,configuration,clock,elasticSearchNodeId);    LOGGER.debug(taskInfo.toString());    return taskInfo;  }}  }
class C{  public static final byte[] encodeQuotedPrintable(BitSet printable,byte[] bytes){  if (bytes == null) {    return null;  }  if (printable == null) {    printable=PRINTABLE_CHARS;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (printable.get(b)) {      buffer.write(b);    } else {      encodeQuotedPrintable(b,buffer);    }  }  return buffer.toByteArray();}  }
class C{  public PEModule(File peFile,Architecture arch) throws IOException, BinaryParseException {  InputStream inStream=new FileInputStream(peFile);  fileName=peFile.getName();  inBuf=new BinaryFileInputBuffer(inStream);  msdos_stub=new MSDOS_Stub(inBuf);  inBuf.seek(msdos_stub.getHeaderAddress());  if (!inBuf.match(PE_Header.PE_TAG))   throw new BinaryParseException("PEModule: Missing PE signature");  coff_header=new COFF_Header(inBuf);  pe_header=new PE_Header(inBuf);  section_headers=new SectionHeader[coff_header.getNumberOfSections()];  for (int i=0; i < coff_header.getNumberOfSections(); i++) {    section_headers[i]=new SectionHeader(inBuf);  }  long expTableRVA=pe_header.getDataDirectory()[ImageDataDirectory.EXPORT_TABLE_INDEX].VirtualAddress;  if (expTableRVA > 0) {    logger.debug("-- Reading export table...");    inBuf.seek(getFilePointerFromRVA(expTableRVA));    ImageExportDirectory imageExportDirectory=new ImageExportDirectory(inBuf);    inBuf.seek(getFilePointerFromRVA(imageExportDirectory.AddressOfFunctions));    ExportEntry[] tmpEntries=new ExportEntry[(int)imageExportDirectory.NumberOfFunctions];    int eatEntries=0;    for (int i=0; i < tmpEntries.length; i++) {      long rva=inBuf.readDWORD();      if (rva > 0) {        tmpEntries[i]=new ExportEntry((int)(i + imageExportDirectory.Base),new AbsoluteAddress(rva + getBaseAddress()));        eatEntries++;      }    }    long namePtr=getFilePointerFromRVA(imageExportDirectory.AddressOfNames);    long ordPtr=getFilePointerFromRVA(imageExportDirectory.AddressOfNameOrdinals);    for (int i=0; i < imageExportDirectory.NumberOfNames; i++) {      inBuf.seek(namePtr);      long rva=inBuf.readDWORD();      namePtr=inBuf.getCurrent();      inBuf.seek(getFilePointerFromRVA(rva));      String expName=inBuf.readASCII();      inBuf.seek(ordPtr);      int ord=inBuf.readWORD();      ordPtr=inBuf.getCurrent();      tmpEntries[ord].setName(expName);    }    exportEntries=new ExportEntry[eatEntries];    int j=0;    for (int i=0; i < tmpEntries.length; i++)     if (tmpEntries[i] != null)     exportEntries[j++]=tmpEntries[i];    logger.debug("-- Got " + exportEntries.length + " exported symbols.");  } else   logger.debug("-- File contains no exports");  importTable=new HashMap<AbsoluteAddress,Pair<String,String>>();  long impTableRVA=pe_header.getDataDirectory()[ImageDataDirectory.IMPORT_TABLE_INDEX].VirtualAddress;  if (impTableRVA > 0) {    logger.debug("-- Reading image import descriptors...");    inBuf.seek(getFilePointerFromRVA(impTableRVA));    List<ImageImportDescriptor> imageImportDescriptors=new LinkedList<ImageImportDescriptor>();    while (true) {      ImageImportDescriptor cur=new ImageImportDescriptor(inBuf);      if (cur.isZero())       break;      imageImportDescriptors.add(cur);    }    for (    ImageImportDescriptor descriptor : imageImportDescriptors) {      inBuf.seek(getFilePointerFromRVA(descriptor.Name));      String libraryFileName=inBuf.readASCII();      logger.debug("-- Parsing imports from " + libraryFileName + "...");      libraryFileName=libraryFileName.toLowerCase();      boolean bound=descriptor.TimeDateStamp != 0;      long iatFilePtr;      if (bound)       iatFilePtr=getFilePointerFromRVA(descriptor.OriginalFirstThunk); else       iatFilePtr=getFilePointerFromRVA(descriptor.FirstThunk);      AbsoluteAddress iatAddress=new AbsoluteAddress(descriptor.FirstThunk + getBaseAddress());      while (true) {        inBuf.seek(iatFilePtr);        long thunk=inBuf.readDWORD();        iatFilePtr=inBuf.getCurrent();        if (thunk == 0)         break;        if ((thunk & 0x80000000) != 0) {          int ord=(int)(thunk & 0x7FFFFFFF);          String ordName="ord(" + ord + ")";          importTable.put(iatAddress,Pair.create(libraryFileName,ordName));        } else {          long rva=getFilePointerFromRVA(thunk);          if (rva < 0)           throw new BinaryParseException("RVA in thunk points outside of image!");          inBuf.seek(rva + 2);          String funcName=inBuf.readASCII();          importTable.put(iatAddress,Pair.create(libraryFileName,funcName));        }        iatAddress=new AbsoluteAddress(iatAddress.getValue() + 4);      }    }  }  logger.debug("-- Got " + importTable.size() + " imported function symbols.");  symbolFinder=new PESymbolFinder(this);}  }
class C{  public PriceModelException(Reason reason){  super(reason.toString());  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public PathTool(SVGPathFigure pathPrototype,SVGBezierFigure bezierPrototype,@Nullable Map<AttributeKey,Object> attributes){  super(bezierPrototype,attributes);  this.pathPrototype=pathPrototype;}  }
class C{  public void clearLearnedTable(){  macVlanToSwitchPortMap.clear();}  }
class C{  public BigdataLiteral evaluate(final BigdataValueFactory valueFactory,final Value... args) throws ValueExprEvaluationException {  if (args.length < 3 || args.length > 4) {    throw new ValueExprEvaluationException("Incorrect number of arguments for REPLACE: " + args.length);  }  try {    Literal arg=(Literal)args[0];    Literal pattern=(Literal)args[1];    Literal replacement=(Literal)args[2];    Literal flags=null;    if (args.length == 4) {      flags=(Literal)args[3];    }    if (!QueryEvaluationUtil.isStringLiteral(arg)) {      throw new ValueExprEvaluationException("incompatible operand for REPLACE: " + arg);    }    if (!QueryEvaluationUtil.isSimpleLiteral(replacement)) {      throw new ValueExprEvaluationException("incompatible operand for REPLACE: " + replacement);    }    String argString=arg.getLabel();    String replacementString=replacement.getLabel();    Pattern p=(Pattern)getProperty(Annotations.PATTERN);    if (p == null) {      p=getPattern(pattern,flags);    }    String result=p.matcher(argString).replaceAll(replacementString);    String lang=arg.getLanguage();    URI dt=arg.getDatatype();    if (lang != null) {      return valueFactory.createLiteral(result,lang);    } else     if (dt != null) {      return valueFactory.createLiteral(result,dt);    } else {      return valueFactory.createLiteral(result);    }  } catch (  ClassCastException e) {    throw new ValueExprEvaluationException("literal operands expected",e);  }}  }
class C{  public QualityDirectedStagedDeepening(IScore eval,IVisitor visitor){  super(visitor);  this.eval=eval;}  }
class C{  private Constants(){}  }
class C{  public boolean isInDiscoveryOnlyMode(){  return _inDiscoveryOnlyMode;}  }
class C{  private List<AuditRecord> auditUpdate(DatabaseDataSet databaseDataSet,OperationGroup updateGroup) throws IllegalPersistStateException {  List<AuditRecord> records=new LinkedList<>();  for (  Entity entity : updateGroup.getEntities()) {    AuditRecord auditRecord=null;    Entity originalEntity=databaseDataSet.getEntity(entity.getEntityType(),entity.getKey().getValue());    for (    Node node : entity.getChildren()) {      if (node instanceof ValueNode) {        ValueNode updatedNode=(ValueNode)node;        ValueNode origNode=originalEntity.getChild(node.getName(),ValueNode.class);        if (!Objects.equals(origNode.getValue(),updatedNode.getValue())) {          if (auditRecord == null) {            auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());          }          auditRecord.addChange(node,origNode.getValue(),updatedNode.getValue());        }      } else       if (node instanceof RefNode) {        RefNode origNode=originalEntity.getChild(node.getName(),RefNode.class);        RefNode updatedNode=(RefNode)node;        if (!Objects.equals(origNode.getEntityKey(),updatedNode.getEntityKey())) {          if (auditRecord == null) {            auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());          }          auditRecord.addChange(node,origNode.getEntityKey(),updatedNode.getEntityKey());        }      }    }    if (auditRecord != null) {      records.add(auditRecord);      LOG.debug("Changes found for " + entity);    } else {      LOG.debug("No changes found for " + entity);    }  }  return records;}  }
class C{  private TestClient(Socket sock,InetAddress addr,int port,int connTimeout) throws IgniteCheckedException {  this.sock=sock;  try {    sock.connect(new InetSocketAddress(addr,port),connTimeout);    if (sock instanceof SSLSocket)     ((SSLSocket)sock).startHandshake();    out=sock.getOutputStream();    in=sock.getInputStream();  } catch (  IOException e) {    close();    throw new IgniteCheckedException(e);  }}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  FolderTokenDocument doc;  int id;  id=super.generateNextNewNodeId();  doc=new FolderTokenDocument(id,name,parentId,id,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile,FolderEditFlag.NEW);  super.add(doc);}  }
class C{  public LayoutLensSupport(VisualizationViewer<V,E> vv,LensTransformer lensTransformer,ModalGraphMouse lensGraphMouse){  super(vv,lensGraphMouse);  this.lensTransformer=lensTransformer;  this.pickSupport=vv.getPickSupport();  Dimension d=vv.getSize();  if (d.width <= 0 || d.height <= 0) {    d=vv.getPreferredSize();  }  lensTransformer.setViewRadius(d.width / 5);}  }
class C{  public static void integerAxes(final JFreeChart chart){  integerXAxis(chart);  integerYAxis(chart);}  }
class C{  public Object invokeMethod(String name,Object args){  throw new NullPointerException("Cannot invoke method " + name + "() on null object");}  }
class C{  public static void refreshExportMask(DbClient dbClient,VPlexStorageViewInfo storageView,ExportMask exportMask,Map<String,String> targetPortToPwwnMap,NetworkDeviceController networkDeviceController){  refreshExportMask(dbClient,storageView,exportMask,targetPortToPwwnMap,networkDeviceController,false);}  }
class C{  public void pvChanged(PvChangeEvent event){  if (isDisplayable()) {    Component edit=(Component)fields.get(event.getKey());    Object value=event.getValue();    if (edit != null) {      edit.setBackground(event.getType() == PvChangeEvent.PV_MANUAL_MOD ? changedColor : unchangedColor);      if (edit instanceof JTextComponent) {        ((JTextComponent)edit).setText(value != null ? value.toString() : "");      } else       if (edit instanceof JLabel) {        ((JLabel)edit).setText(value != null ? value.toString() : "");      } else       if (edit instanceof PvDetailPanel) {        ((PvDetailPanel)edit).setProcessVar((ProcessVar)value);      }    }  }}  }
class C{  private void unrollConditions(Block block){  if (visitedBlocks.contains(block))   return;  visitedBlocks.add(block);  visitingSuccs.add(block);  Iterator succsIt=block.getSuccs().iterator();  while (succsIt.hasNext()) {    Block succ=(Block)succsIt.next();    if (visitedBlocks.contains(succ)) {      if (succ != block && visitingSuccs.contains(succ)) {        if (succ.getPreds().size() >= 2 && succ.getSuccs().size() == 2) {          Block condition=succ;          Block loopTailBlock=block;          if (getSize(condition) <= maxSize) {            Unit copiedHead=copyBlock(condition);            Unit loopTail=loopTailBlock.getTail();            if (loopTail instanceof GotoStmt)             ((GotoStmt)loopTail).setTarget(copiedHead); else             if (loopTail instanceof IfStmt) {              if (((IfStmt)loopTail).getTarget() == condition.getHead())               ((IfStmt)loopTail).setTarget(copiedHead); else               insertGotoAfter(loopTail,copiedHead);            } else             insertGotoAfter(loopTail,copiedHead);          }        }      }    } else {      unrollConditions(succ);    }  }  visitingSuccs.remove(block);}  }
class C{  public void fillData(int leftResId,int stringResId){  fillData(leftResId,getResources().getString(stringResId),false);}  }
class C{  public String invertSelectionTipText(){  return "Invert matching sense.";}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  @Override public boolean equals(Object that){  if (that == null) {    return false;  }  if (that instanceof SimpleTrigger) {    return this.equals((SimpleTrigger)that);  }  return false;}  }
class C{  public void log(Level level,String msg){  if (isLoggable(level)) {    delegate.log(level,msg);  }}  }
class C{  public static double cosh(double x){  if (x != x) {    return x;  }  if (x > 20) {    if (x >= LOG_MAX_VALUE) {      final double t=exp(0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(x);    }  } else   if (x < -20) {    if (x <= -LOG_MAX_VALUE) {      final double t=exp(-0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(-x);    }  }  final double hiPrec[]=new double[2];  if (x < 0.0) {    x=-x;  }  exp(x,0.0,hiPrec);  double ya=hiPrec[0] + hiPrec[1];  double yb=-(ya - hiPrec[0] - hiPrec[1]);  double temp=ya * HEX_40000000;  double yaa=ya + temp - temp;  double yab=ya - yaa;  double recip=1.0 / ya;  temp=recip * HEX_40000000;  double recipa=recip + temp - temp;  double recipb=recip - recipa;  recipb+=(1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;  recipb+=-yb * recip * recip;  temp=ya + recipa;  yb+=-(temp - ya - recipa);  ya=temp;  temp=ya + recipb;  yb+=-(temp - ya - recipb);  ya=temp;  double result=ya + yb;  result*=0.5;  return result;}  }
class C{  private static HashSet<Object> cloneAndCheckIssuerNames(Collection<?> names) throws IOException {  HashSet<Object> namesCopy=new HashSet<Object>();  Iterator<?> i=names.iterator();  while (i.hasNext()) {    Object nameObject=i.next();    if (!(nameObject instanceof byte[]) && !(nameObject instanceof String))     throw new IOException("name not byte array or String");    if (nameObject instanceof byte[])     namesCopy.add(((byte[])nameObject).clone()); else     namesCopy.add(nameObject);  }  return (namesCopy);}  }
class C{  @Override public void filesDropped(File[] files){  if (files == null) {    return;  }  if (files.length == 0) {    return;  }  File dest=files[0];  if (dropFolder != null) {    dest=new File(dropFolder + File.separatorChar + files[0].getName());    if (files[0].getParent().compareTo(dest.getParent()) != 0) {      try {        FileUtil.createDirectory(dest.getParentFile().getPath());        FileUtil.copy(files[0],dest);      } catch (      IOException ex) {        log.error("filesDropped: error while copying new file, using original file");        dest=files[0];      }    }  }  setImagePath(dest.getPath());}  }
class C{  public SimulationPaneCtrl(List<Parameter> params,List<ComboBox<String>> paramCombos,Runnable initMethod,Runnable simMethod,Button simBtn,Label statusLabel){  this.params=params;  this.paramCombos=paramCombos;  this.initMethod=initMethod;  this.simMethod=simMethod;  this.simBtn=simBtn;  this.statusLabel=statusLabel;  ChangeListener<String> listener=null;  for (  ComboBox<String> combo : paramCombos)   if (!combo.getId().equals(PARAM_SIM_SPEED))   combo.getSelectionModel().selectedItemProperty().addListener(listener);  simBtn.setOnAction(null);  simBtn.setOnMouseClicked(null);  updateParamVisibility();  state.addListener(null);  setState(State.READY);}  }
class C{  private void clearRemoteNotifications(){  Log.v(TAG,ACTION_CLEAR_REMOTE_NOTIFICATIONS);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }    googleApiClient.disconnect();  }}  }
class C{  public SerializationInputOutputFormat(String description,String fileExtension,Drawing prototype){  this.description=description;  this.fileExtension=fileExtension;  this.mimeType=DataFlavor.javaSerializedObjectMimeType;  this.prototype=prototype;  this.dataFlavor=new DataFlavor(prototype.getClass(),description);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Vector2i negate(Vector2i dest){  dest.x=-x;  dest.y=-y;  return dest;}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:44.754 -0500",hash_original_method="6BC73F7388CF8F913A045B88BC2AD5D8",hash_generated_method="02D1E84EDD88A1B1D8D962D865C80497") public byte[] readByteArray(int bits) throws AccessException {  int bytes=(bits >>> 3) + ((bits & 0x07) > 0 ? 1 : 0);  byte[] arr=new byte[bytes];  for (int i=0; i < bytes; i++) {    int increment=Math.min(8,bits - (i << 3));    arr[i]=(byte)(read(increment) << (8 - increment));  }  return arr;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String line(boolean includeNewLine){  int start=myPosition;  while (!isEol()) {    myPosition++;  }  int end;  if (includeNewLine) {    nextLine();    end=myPosition;  } else {    end=myPosition;    nextLine();  }  return myText.substring(start,end);}  }
class C{  public Object clone() throws CloneNotSupportedException {  Account account=(Account)super.clone();  return account;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:48.746 -0500",hash_original_method="ECB16241B0AB765E13051ACDAE33A02C",hash_generated_method="1F56D9702D0332A1D17344B96D52752A") public TypedProperties(){  super();}  }
class C{  public void errorHandling(Exception error,CoordinatorLayout coordinatorLayout){  showSpinner(false);  error.printStackTrace();  String errorMessage=mDomoticz.getErrorMessage(error);  if (mPhoneConnectionUtil == null)   mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    if (error instanceof JSONException && errorMessage.equalsIgnoreCase("No value for result")) {      setMessage(getString(R.string.no_data_on_domoticz));    } else     setErrorMessage(errorMessage);  } else {    if (coordinatorLayout != null) {      UsefulBits.showSnackbar(getContext(),coordinatorLayout,R.string.error_notConnected,Snackbar.LENGTH_SHORT);      if (getActivity() instanceof MainActivity)       ((MainActivity)getActivity()).Talk(R.string.error_notConnected);    }  }}  }
class C{  public void flushMessages(){  if (sLogger.isActivated()) {    sLogger.info("Request messages flush");  }  if (mTxPendingMessageIds.isEmpty()) {    onMessagesFlushed();  } else {    mFlushRequested=true;  }}  }
class C{  public void updateEcmList(){  Map<Coords,Color> newECMHexes=new HashMap<Coords,Color>();  Map<Coords,Color> newECMCenters=new HashMap<Coords,Color>();  Map<Coords,Color> newECCMHexes=new HashMap<Coords,Color>();  Map<Coords,Color> newECCMCenters=new HashMap<Coords,Color>();  final List<ECMInfo> allEcmInfo=ComputeECM.computeAllEntitiesECMInfo(game.getEntitiesVector());  for (  Entity e : game.getEntitiesVector()) {    if (e.getPosition() == null) {      continue;    }    if ((localPlayer != null) && game.getOptions().booleanOption("double_blind") && e.getOwner().isEnemyOf(localPlayer)&& !e.hasSeenEntity(localPlayer)&& !e.hasDetectedEntity(localPlayer)) {      continue;    }    final Color ecmColor=ECMEffects.getECMColor(e.getOwner());    if (e.getECMInfo() != null) {      newECMCenters.put(e.getPosition(),ecmColor);    }    if (e.getECCMInfo() != null) {      newECCMCenters.put(e.getPosition(),ecmColor);    }    int secondaryIdx=-1;    if (e.getSecondaryPositions().size() > 0) {      secondaryIdx=0;    }    EntitySprite eSprite=entitySpriteIds.get(getIdAndLoc(e.getId(),secondaryIdx));    if (eSprite != null) {      Coords pos=e.getPosition();      eSprite.setAffectedByECM(ComputeECM.isAffectedByECM(e,pos,pos,allEcmInfo));    }  }  Map<Coords,ECMEffects> ecmAffectedCoords=new HashMap<Coords,ECMEffects>();  Map<Coords,ECMEffects> eccmAffectedCoords=new HashMap<Coords,ECMEffects>();  for (  ECMInfo ecmInfo : allEcmInfo) {    if ((ecmInfo.getEntity() != null) && (localPlayer != null) && game.getOptions().booleanOption("double_blind")&& ecmInfo.getEntity().getOwner().isEnemyOf(localPlayer)&& !ecmInfo.getEntity().hasSeenEntity(localPlayer)&& !ecmInfo.getEntity().hasDetectedEntity(localPlayer)) {      continue;    }    final Coords ecmPos=ecmInfo.getPos();    final int range=ecmInfo.getRange();    for (int x=-range; x <= range; x++) {      for (int y=-range; y <= range; y++) {        Coords c=new Coords(x + ecmPos.getX(),y + ecmPos.getY());        int dist=ecmPos.distance(c);        int dir=ecmInfo.getDirection();        boolean inArc=(dir == -1) || Compute.isInArc(ecmPos,dir,c,Compute.ARC_NOSE);        if ((dist > range) || !inArc) {          continue;        }        if ((!ecmInfo.isOpposed(localPlayer) && ecmInfo.isECCM()) || (ecmInfo.isOpposed(localPlayer) && ecmInfo.isECCM())) {          ECMEffects ecmEffects=eccmAffectedCoords.get(c);          if (ecmEffects == null) {            ecmEffects=new ECMEffects();            eccmAffectedCoords.put(c,ecmEffects);          }          ecmEffects.addECM(ecmInfo);        } else {          ECMEffects ecmEffects=ecmAffectedCoords.get(c);          if (ecmEffects == null) {            ecmEffects=new ECMEffects();            ecmAffectedCoords.put(c,ecmEffects);          }          ecmEffects.addECM(ecmInfo);        }      }    }  }  for (  Coords c : ecmAffectedCoords.keySet()) {    ECMEffects ecm=ecmAffectedCoords.get(c);    ECMEffects eccm=eccmAffectedCoords.get(c);    processAffectedCoords(c,ecm,eccm,newECMHexes,newECCMHexes);  }  for (  Coords c : eccmAffectedCoords.keySet()) {    ECMEffects ecm=ecmAffectedCoords.get(c);    ECMEffects eccm=eccmAffectedCoords.get(c);    if (ecm != null) {      continue;    }    processAffectedCoords(c,ecm,eccm,newECMHexes,newECCMHexes);  }  Set<Coords> updatedHexes=new HashSet<>();  if (ecmHexes != null) {    updatedHexes.addAll(ecmHexes.keySet());  }  if (eccmHexes != null) {    updatedHexes.addAll(eccmHexes.keySet());  }  updatedHexes.addAll(newECMHexes.keySet());  updatedHexes.addAll(newECCMHexes.keySet());  clearHexImageCache(updatedHexes);synchronized (this) {    ecmHexes=newECMHexes;    ecmCenters=newECMCenters;    eccmHexes=newECCMHexes;    eccmCenters=newECCMCenters;  }  repaint();}  }
class C{  public void paintCurrentValueBackground(Graphics g,Rectangle bounds,boolean hasFocus){  if (MetalLookAndFeel.usingOcean()) {    g.setColor(MetalLookAndFeel.getControlDarkShadow());    g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height - 1);    g.setColor(MetalLookAndFeel.getControlShadow());    g.drawRect(bounds.x + 1,bounds.y + 1,bounds.width - 2,bounds.height - 3);    if (hasFocus && !isPopupVisible(comboBox) && arrowButton != null) {      g.setColor(listBox.getSelectionBackground());      Insets buttonInsets=arrowButton.getInsets();      if (buttonInsets.top > 2) {        g.fillRect(bounds.x + 2,bounds.y + 2,bounds.width - 3,buttonInsets.top - 2);      }      if (buttonInsets.bottom > 2) {        g.fillRect(bounds.x + 2,bounds.y + bounds.height - buttonInsets.bottom,bounds.width - 3,buttonInsets.bottom - 2);      }    }  } else   if (g == null || bounds == null) {    throw new NullPointerException("Must supply a non-null Graphics and Rectangle");  }}  }
class C{  public static Predicate<Job> withBranchTriggerRepo(final String repo){  return new WithBranchTriggerRepo(repo);}  }
class C{  @Override public int hashCode(){  int hashCode=this.operator.toString().hashCode();  if (operator == QueryOp.LEAF) {    hashCode=hashCode ^ this.leaf.hashCode();  }  return hashCode;}  }
class C{  public TraceEndRunCycleItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static AndroidHttpClient newInstance(String userAgent){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,20 * 1000);  HttpConnectionParams.setSoTimeout(params,20 * 1000);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  schemeRegistry.register(new Scheme("https",SSLSocketFactory.getSocketFactory(),443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public ColladaTechnique(String ns){  super(ns);}  }
class C{  public void testBug16791() throws Exception {  MysqlDataSource myDs=new MysqlDataSource();  myDs.setUrl(dbUrl);  Reference asRef=myDs.getReference();  System.out.println(asRef);  removeFromRef(asRef,"port");  removeFromRef(asRef,NonRegisteringDriver.USER_PROPERTY_KEY);  removeFromRef(asRef,NonRegisteringDriver.PASSWORD_PROPERTY_KEY);  removeFromRef(asRef,"serverName");  removeFromRef(asRef,"databaseName");  new MysqlDataSourceFactory().getObjectInstance(asRef,null,null,null);}  }
class C{  public PlainSaslAuthenticatorFactory(final Vertx vertx){  this.vertx=Objects.requireNonNull(vertx);}  }
class C{  @Override public void removeOne(String id){}  }
class C{  void checkRemoved(int expected){  checkEventCount(expected,removedListenerFiredCount);}  }
class C{  public static OrientedBoundingBox computeOrientedBoundingBox(float[] originalPoints){  int size=originalPoints.length;  float[] points=new float[size];  for (int i=0; i < size; i++) {    points[i]=originalPoints[i];  }  float[] meanVector=computeCentroid(points);  return computeOrientedBoundingBox(points,meanVector);}  }
class C{  public boolean remove(int val){  Integer v=val;  boolean flag=list.contains(v);  list.remove(v);  return flag;}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  public void writeParameter(int num,String wrapperName,String id,PartitionSubstitutionModel model,XMLWriter writer){  writer.writeOpenTag(wrapperName);  writeParameter(num,id,model,writer);  writer.writeCloseTag(wrapperName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    int minValue=(int)(image.getMinimumValue());    int maxValue=(int)(image.getMaximumValue());    range=maxValue - minValue;    double[] data;    double[][] totals=new double[4][range + 1];    double[] radius=new double[range + 1];    double[][] centroid=new double[2][range + 1];    double[] DFCSum=new double[range + 1];    long[][] minRowAndCol=new long[2][range + 1];    for (a=0; a <= range; a++) {      minRowAndCol[0][a]=Long.MAX_VALUE;      minRowAndCol[1][a]=Long.MAX_VALUE;    }    updateProgress("Finding patch min row and columns:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          if (row < minRowAndCol[0][a]) {            minRowAndCol[0][a]=row;          }          if (col < minRowAndCol[1][a]) {            minRowAndCol[1][a]=col;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Finding patch min row and columns:",(int)progress);    }    updateProgress("Loop 1 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          totals[0][a]+=(col - minRowAndCol[1][a]);          totals[1][a]+=(row - minRowAndCol[0][a]);          totals[2][a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        centroid[0][a]=totals[0][a] / totals[2][a] + minRowAndCol[1][a];        centroid[1][a]=totals[1][a] / totals[2][a] + minRowAndCol[0][a];        radius[a]=Math.sqrt((totals[2][a]) / Math.PI) - 0.5;      }    }    updateProgress("Loop 2 of 3:",0);    double d;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          d=Math.sqrt(Math.pow((col - centroid[0][a]),2d) + Math.pow((row - centroid[1][a]),2));          DFCSum[a]+=(double)d;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    for (a=0; a <= range; a++) {      if (totals[2][a] > 0) {        DFCSum[a]=DFCSum[a] / totals[2][a];      }    }    updateProgress("Loop 3 of 3:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col] - minValue);          output.setValue(row,col,DFCSum[a]);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 3 of 3:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Radius of Gyration\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (DFCSum[a] > 0) {          retstr=retstr + "\n" + (a + minValue)+ "\t"+ df.format(DFCSum[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void update(String baseColor){  this.baseColor=baseColor;  updated();}  }
class C{  public static void print(double x){  out.print(x);  out.flush();}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  void draw(final Graphics g,final int scale,final Color color,final Color outline){  final int rx=worldToCanvas(x,scale);  final int ry=worldToCanvas(y,scale);  final int rwidth=width * scale;  final int rheight=height * scale;  g.setColor(color);  g.fillRect(rx,ry,rwidth,rheight);  if (outline != null) {    g.setColor(outline);    g.drawRect(rx,ry,rwidth - 1,rheight - 1);  }}  }
class C{  public TextCallbackHandler(){}  }
class C{  public DiscreteVariable(String name,List<String> categories){  super(name);  setCategories(categories.toArray(new String[categories.size()]));  setCategoryNamesDisplayed(true);}  }
class C{  public static byte[] responseData(byte[] response){  return Arrays.copyOfRange(response,0,response.length - 2);}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,AmazonWebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  if (estimatedSize < MAX_QUOTA) {    long newQuota=estimatedSize;    LOG.d(LOG_TAG,"calling quotaUpdater.updateQuota newQuota: %d",newQuota);    quotaUpdater.updateQuota(newQuota);  } else {    quotaUpdater.updateQuota(currentQuota);  }}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  public static void populateSeries(StrategyData strategyData,List<Candle> candles){  strategyData.clearBaseCandleDataset();  for (  Candle candle : candles) {    strategyData.buildCandle(candle.getStartPeriod(),candle.getOpen().doubleValue(),candle.getHigh().doubleValue(),candle.getLow().doubleValue(),candle.getClose().doubleValue(),candle.getVolume(),candle.getVwap().doubleValue(),candle.getTradeCount(),1,null);    strategyData.getBaseCandleSeries().getContract().setLastAskPrice(candle.getClose());    strategyData.getBaseCandleSeries().getContract().setLastBidPrice(candle.getClose());    strategyData.getBaseCandleSeries().getContract().setLastPrice(candle.getClose());  }}  }
class C{  public Builder userName(final String user_name){  this.userName=user_name;  return this;}  }
class C{  protected void renderPageNumbers(int mouseX,int mouseY,float partialTicks){  if (this.currentCategory != null) {    int leftPageStrWidth=this.fontRendererObj.getStringWidth(String.valueOf(this.currentCategory.getCurrentPage()));    GlStateManager.enableBlend();    this.fontRendererObj.drawString(String.valueOf(this.currentCategory.getCurrentPage()),this.xStart + this.WIDTH / 2 - 11 - leftPageStrWidth,this.yStart + this.HEIGHT - 17,0x804f4314);    this.fontRendererObj.drawString(String.valueOf(this.currentCategory.getCurrentPage() + 1),this.xStart + this.WIDTH / 2 + 11,this.yStart + this.HEIGHT - 17,0x804f4314);  }}  }
class C{  private String mapDateProperty(String value){  if (StringUtils.isNotEmpty(value)) {    try {      return tryParseDate(value);    } catch (    Exception e) {      LOG.error("Error on mapping date property: [" + value + "]",e);    }  }  return value;}  }
class C{  public int size(){  return permutation.length;}  }
class C{  protected void sequence_TypeRefWithModifiers_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private ContentValues makeRawContact(int starred){  ContentValues values=new ContentValues();  values.put(RawContacts.ACCOUNT_TYPE,getArgs().getOps().getAccountType());  values.put(RawContacts.ACCOUNT_NAME,getArgs().getOps().getAccountName());  values.put(Contacts.STARRED,starred);  return values;}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public Response deactivateCatalogService(@PathParam("id") URI id) throws DatabaseException {  CatalogService catalogService=queryResource(id);  ArgValidator.checkEntity(catalogService,id,true);  catalogServiceManager.deleteCatalogService(catalogService);  auditOpSuccess(OperationTypeEnum.DELETE_CATALOG_SERVICE,catalogService.auditParameters());  return Response.ok().build();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isTypeImage(){  return getPrintFormatType().equals(PRINTFORMATTYPE_Image);}  }
class C{  private void cleanUpLabels(){  int id=0;  for (Iterator<Label> i=labels.iterator(); i.hasNext(); ) {    Label label=i.next();    if (label.isEmpty()) {      i.remove();    } else {      label.compact();      label.id=id++;    }  }}  }
class C{  public TabbedPaneLeftTabState(){  super("Left");}  }
class C{  public static boolean isNumber(String s){  if (s.length() == 0) {    return false;  }  for (  char c : s.toCharArray()) {    if (!Character.isDigit(c)) {      return false;    }  }  return true;}  }
class C{  public boolean requiresAuthentication(){  return username != null;}  }
class C{  public Line2D toLine2DWithPointAtDistance(float dist){  return new Line2D(this,getPointAtDistance(dist));}  }
class C{  public void removeElementAt(final int index){  entries.remove(index);}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  StringBuffer rs=new StringBuffer();  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds,(int[])bf_crypt_ciphertext.clone());  rs.append("$2");  if (minor >= 'a') {    rs.append(minor);  }  rs.append("$");  if (rounds < 10) {    rs.append("0");  }  if (rounds > 30) {    throw new IllegalArgumentException("rounds exceeds maximum (30)");  }  rs.append(Integer.toString(rounds));  rs.append("$");  rs.append(encode_base64(saltb,saltb.length));  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));  return rs.toString();}  }
class C{  public void enableFiltering(Approximator a){  mFilterData=true;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public boolean isElementSelectable(Object element){  return element != null;}  }
class C{  static void verifyApplicationDomainMatchesTargetId(DomainApplication application,String targetId) throws EppException {  if (!application.getFullyQualifiedDomainName().equals(targetId)) {    throw new ApplicationDomainNameMismatchException();  }}  }
class C{  public boolean lessThan(RegisterPriority other){  return ordinal() < other.ordinal();}  }
class C{  public static int countOfOffsetOthers(int[] otherSourcesToDestOffsets,int j,boolean removeDest){  int countOfOthers=0;  for (int index=0; index < otherSourcesToDestOffsets.length; index++) {    if ((otherSourcesToDestOffsets[index] != j) && ((otherSourcesToDestOffsets[index] != 0) || !removeDest)) {      countOfOthers++;    }  }  return countOfOthers;}  }
class C{  public Point chartToScreenCoord(int x,int y){  x+=getAbsoluteX();  y+=getAbsoluteY();  if (currentTransform != null) {    float[] pt=currentTransform.transformPoint(new float[]{x,y,0});    x=(int)pt[0];    y=(int)pt[1];  }  return new Point(x,y);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  if (!getItemVisible(row,column)) {    return;  }  if (!(dataset instanceof StatisticalCategoryDataset)) {    super.drawItem(g2,state,dataArea,plot,domainAxis,rangeAxis,dataset,row,column,pass);    return;  }  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  int visibleRowCount=state.getVisibleSeriesCount();  StatisticalCategoryDataset statDataset=(StatisticalCategoryDataset)dataset;  Number meanValue=statDataset.getMeanValue(row,column);  if (meanValue == null) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double x1;  if (getUseSeriesOffset()) {    x1=domainAxis.getCategorySeriesMiddle(column,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());  } else {    x1=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  }  double y1=rangeAxis.valueToJava2D(meanValue.doubleValue(),dataArea,plot.getRangeAxisEdge());  Number sdv=statDataset.getStdDevValue(row,column);  if (pass == 1 && sdv != null) {    RectangleEdge yAxisLocation=plot.getRangeAxisEdge();    double valueDelta=sdv.doubleValue();    double highVal, lowVal;    if ((meanValue.doubleValue() + valueDelta) > rangeAxis.getRange().getUpperBound()) {      highVal=rangeAxis.valueToJava2D(rangeAxis.getRange().getUpperBound(),dataArea,yAxisLocation);    } else {      highVal=rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta,dataArea,yAxisLocation);    }    if ((meanValue.doubleValue() + valueDelta) < rangeAxis.getRange().getLowerBound()) {      lowVal=rangeAxis.valueToJava2D(rangeAxis.getRange().getLowerBound(),dataArea,yAxisLocation);    } else {      lowVal=rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta,dataArea,yAxisLocation);    }    if (this.errorIndicatorPaint != null) {      g2.setPaint(this.errorIndicatorPaint);    } else {      g2.setPaint(getItemPaint(row,column));    }    if (this.errorIndicatorStroke != null) {      g2.setStroke(this.errorIndicatorStroke);    } else {      g2.setStroke(getItemOutlineStroke(row,column));    }    Line2D line=new Line2D.Double();    if (orientation == PlotOrientation.HORIZONTAL) {      line.setLine(lowVal,x1,highVal,x1);      g2.draw(line);      line.setLine(lowVal,x1 - 5.0d,lowVal,x1 + 5.0d);      g2.draw(line);      line.setLine(highVal,x1 - 5.0d,highVal,x1 + 5.0d);      g2.draw(line);    } else {      line.setLine(x1,lowVal,x1,highVal);      g2.draw(line);      line.setLine(x1 - 5.0d,highVal,x1 + 5.0d,highVal);      g2.draw(line);      line.setLine(x1 - 5.0d,lowVal,x1 + 5.0d,lowVal);      g2.draw(line);    }  }  Shape hotspot=null;  if (pass == 1 && getItemShapeVisible(row,column)) {    Shape shape=getItemShape(row,column);    if (orientation == PlotOrientation.HORIZONTAL) {      shape=ShapeUtilities.createTranslatedShape(shape,y1,x1);    } else     if (orientation == PlotOrientation.VERTICAL) {      shape=ShapeUtilities.createTranslatedShape(shape,x1,y1);    }    hotspot=shape;    if (getItemShapeFilled(row,column)) {      if (getUseFillPaint()) {        g2.setPaint(getItemFillPaint(row,column));      } else {        g2.setPaint(getItemPaint(row,column));      }      g2.fill(shape);    }    if (getDrawOutlines()) {      if (getUseOutlinePaint()) {        g2.setPaint(getItemOutlinePaint(row,column));      } else {        g2.setPaint(getItemPaint(row,column));      }      g2.setStroke(getItemOutlineStroke(row,column));      g2.draw(shape);    }    if (isItemLabelVisible(row,column)) {      if (orientation == PlotOrientation.HORIZONTAL) {        drawItemLabel(g2,orientation,dataset,row,column,y1,x1,(meanValue.doubleValue() < 0.0));      } else       if (orientation == PlotOrientation.VERTICAL) {        drawItemLabel(g2,orientation,dataset,row,column,x1,y1,(meanValue.doubleValue() < 0.0));      }    }  }  if (pass == 0 && getItemLineVisible(row,column)) {    if (column != 0) {      Number previousValue=statDataset.getValue(row,column - 1);      if (previousValue != null) {        double previous=previousValue.doubleValue();        double x0;        if (getUseSeriesOffset()) {          x0=domainAxis.getCategorySeriesMiddle(column - 1,dataset.getColumnCount(),visibleRow,visibleRowCount,getItemMargin(),dataArea,plot.getDomainAxisEdge());        } else {          x0=domainAxis.getCategoryMiddle(column - 1,getColumnCount(),dataArea,plot.getDomainAxisEdge());        }        double y0=rangeAxis.valueToJava2D(previous,dataArea,plot.getRangeAxisEdge());        Line2D line=null;        if (orientation == PlotOrientation.HORIZONTAL) {          line=new Line2D.Double(y0,x0,y1,x1);        } else         if (orientation == PlotOrientation.VERTICAL) {          line=new Line2D.Double(x0,y0,x1,y1);        }        g2.setPaint(getItemPaint(row,column));        g2.setStroke(getItemStroke(row,column));        g2.draw(line);      }    }  }  if (pass == 1) {    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addEntity(entities,hotspot,dataset,row,column,x1,y1);    }  }}  }
class C{  private void paintMinimizePressed(Graphics2D g,JComponent c,int width,int height){  iconifyPainter.paintPressed(g,c,width,height);}  }
class C{  private void addRightOnlyOccurence(List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,MemoryExampleTable unionTable,Example rightExample,Attribute[] leftKeyAttributes,Attribute[] rightKeyAttributes,boolean keepBoth,boolean removeDoubleAttributes){  double[] unionDataRow=new double[unionAttributeList.size()];  int attributeIndex=0;  for (  AttributeSource attributeSource : originalAttributeSources) {    if (attributeSource.getSource() == AttributeSource.FIRST_SOURCE) {      int id=-1;      for (int i=0; i < leftKeyAttributes.length; ++i) {        if (attributeSource.getAttribute() == leftKeyAttributes[i]) {          id=i;          break;        }      }      if (id >= 0) {        boolean sameName=leftKeyAttributes[id].getName().equals(rightKeyAttributes[id].getName());        if (keepBoth && !(removeDoubleAttributes && sameName)) {          unionDataRow[attributeIndex]=Double.NaN;        } else {          if (leftKeyAttributes[id].isNominal()) {            Attribute rightAttribute=rightKeyAttributes[id];            Attribute leftAttribute=leftKeyAttributes[id];            int rightIndex=(int)rightExample.getValue(rightAttribute);            String valueAsString=rightAttribute.getMapping().mapIndex(rightIndex);            int leftIndex=leftAttribute.getMapping().mapString(valueAsString);            unionDataRow[attributeIndex]=leftIndex;          } else {            unionDataRow[attributeIndex]=rightExample.getValue(rightKeyAttributes[id]);          }        }      } else {        unionDataRow[attributeIndex]=Double.NaN;      }    } else     if (attributeSource.getSource() == AttributeSource.SECOND_SOURCE) {      unionDataRow[attributeIndex]=rightExample.getValue(attributeSource.getAttribute());    }    attributeIndex++;  }  unionTable.addDataRow(new DoubleArrayDataRow(unionDataRow));}  }
class C{  public JdbcTransactionalResource(String serverName,XADataSource xads){  super(serverName);  Assert.notNull("XADataSource must not be null",xads);  this.xaDataSource=xads;  this.xaConnection=null;}  }
class C{  public void next(int frames,boolean broadcast) throws IOException {  if (mInputStream != null) {    byte[] buffer=new byte[mBytesPerFrame * frames];    int samplesRead=mInputStream.read(buffer);    mFrameCounter+=samplesRead;    broadcast(mFrameCounter);    if (broadcast && mListener != null) {      if (samplesRead < buffer.length) {        if (samplesRead == -1) {          throw new IOException("End of recording");        }        buffer=Arrays.copyOf(buffer,samplesRead);      }      float[] samples=ConversionUtils.convertFromSigned16BitSamples(buffer);      mListener.receive(new RealBuffer(samples));    }  }}  }
class C{  public void closeAllConnections(){  this.pcClient.closeAllConnections();}  }
class C{  public Faculty(String name,String address,String phone,String email,int office,double salary,String officeHours,String rank){  super(name,address,phone,email,office,salary);  this.officeHours=officeHours;  this.rank=rank;}  }
class C{  public void addMenuKeyListener(MenuKeyListener l){  listenerList.add(MenuKeyListener.class,l);}  }
class C{  public void toggleQuality() throws IOException {  print("toggleQuality",null);}  }
class C{  public void log(Date time,String message){  try {    PrintWriter w=new PrintWriter(new FileWriter(filename,true));    w.println("\n\u001b[32m" + format.format(time) + "\u001b[0m "+ message);    w.close();  } catch (  IOException e) {  }}  }
class C{  public boolean toDestroying(){  return toNextState(DESTROYING);}  }
class C{  public EntryPointSpec createEntryPointSpec(){  EntryPointSpecImpl entryPointSpec=new EntryPointSpecImpl();  return entryPointSpec;}  }
class C{  FileSetting(Properties defaultProps,Properties props,String key,File defaultFile){  super(defaultProps,props,key,defaultFile.getAbsolutePath());  setPrivate(true);}  }
class C{  private String _serializeDateTime(DateTime dateTime){  return goIn() + JSONDateFormat.format(dateTime,null);}  }
class C{  public static void main(String[] arg){  try {    String filename=arg[arg.length - 1];    boolean use_default_md5=false;    boolean use_native_lib=true;    for (int i=0; i < arg.length - 1; i++) {      if (arg[i].equals("--use-default-md5")) {        use_default_md5=true;      } else       if (arg[i].equals("--no-native-lib")) {        use_native_lib=false;      }    }    byte[] buf=new byte[65536];    int num_read;    if (use_default_md5) {      InputStream in=new BufferedInputStream(new FileInputStream(filename));      java.security.MessageDigest digest=java.security.MessageDigest.getInstance("MD5");      while ((num_read=in.read(buf)) != -1) {        digest.update(buf,0,num_read);      }      System.out.println(MD5.asHex(digest.digest()) + "  " + filename);      in.close();    } else {      if (!use_native_lib) {        MD5.initNativeLibrary(true);      }      MD5InputStream in=new MD5InputStream(new BufferedInputStream(new FileInputStream(filename)));      while ((num_read=in.read(buf)) != -1)       ;      System.out.println(MD5.asHex(in.hash()) + "  " + filename);      in.close();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public TestParams excludeTypeCheck(String field){  mExcludeTypeCheck.add(field);  return this;}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  StringVector processSTRINGLIST(StylesheetHandler handler,String uri,String name,String rawName,String value){  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nStrings=tokenizer.countTokens();  StringVector strings=new StringVector(nStrings);  for (int i=0; i < nStrings; i++) {    strings.addElement(tokenizer.nextToken());  }  return strings;}  }
class C{  protected void internalError(String s) throws Error {  throw new Error("RE internal error: " + s);}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  public void gotoLine(int line){  Element element=getDocument().getDefaultRootElement().getElement(line);  if (element == null) {    return;  }  int pos=element.getStartOffset();  setCaretPosition(pos);}  }
class C{  public boolean isCanceled(){  return cancelled;}  }
class C{  public SampleVcpcRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public ValidationException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected void validateAlternateName(java.lang.String[] param){}  }
class C{  public String toString(){  return name;}  }
class C{  public static void wtf(String msg){  log(LEVEL.ASSERT,null,msg,null);}  }
class C{  public static String toString(final int value){  return Integer.toString(value);}  }
class C{  RosterGroup(String name,Connection connection){  this.name=name;  this.connection=connection;  entries=new ArrayList<RosterEntry>();}  }
class C{  @Override public void didBeginAnimation(Object sender,PLICamera camera,PLCameraAnimationType type){switch (type) {case PLCameraAnimationTypeLookAt:    mView.setValidForCameraAnimation(true);  break;default :break;}PLViewListener listener=mView.getListener();if (listener != null) listener.onDidBeginCameraAnimation(mView,sender,camera,type);}  }
class C{  public void dropDatabase(Handler<ExtendedAsyncResult<Void>> fut){  cli.getCollections(null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowDVDPlayer.getDVDAudioDecoderFilter();}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=ElemVariable.rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public BarChart(final String title,final String xAxisLabel,final String yAxisLabel,final String[] categories){  super(title,xAxisLabel,yAxisLabel);  this.dataset=new DefaultCategoryDataset();  this.chart=createChart(title,xAxisLabel,yAxisLabel,this.dataset);  this.plot=this.chart.getCategoryPlot();  this.categories=categories.clone();  addDefaultFormatting();  final CategoryAxis axis1=this.plot.getDomainAxis();  axis1.setCategoryMargin(0.20);  BarRenderer renderer=(BarRenderer)this.plot.getRenderer();  renderer.setItemMargin(0.10);}  }
class C{  public List<Object> readField(Map<String,Object> source,String name){  final List<String> keys=Arrays.asList(name.split("\\."));  List<Object> values=new ArrayList<>();  if (!keys.isEmpty()) {    readField(source.get(keys.get(0)),keys.subList(1,keys.size()),values);  }  final List<Object> result;  if (!values.isEmpty()) {    result=values;  } else {    result=null;  }  return result;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  protected String columnToTypeString(Column c,String tableType){switch (c.getType()) {case Types.TINYINT:    return "SMALLINT";case Types.SMALLINT:  return "SMALLINT";case Types.INTEGER:return "INTEGER";case Types.BIGINT:return "BIGINT";case Types.CHAR:{if (c.getLength() == 1) return "CHAR(5)"; else return "CHAR(" + c.getLength() + ")";}case Types.VARCHAR:return "VARCHAR(" + c.getLength() + ")";case Types.DATE:return "DATE";case Types.TIMESTAMP:return "TIMESTAMP";case Types.CLOB:return "VARCHAR(65000)";case Types.BLOB:return "VARBINARY(65000)";default :return "UNKNOWN";}}  }
class C{  public Builder t(){  this.withThread=true;  this.threadSet=true;  return this;}  }
class C{  private Hop fuseDatagenAndBinaryOperation(Hop hi) throws HopsException {  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    if (left instanceof DataGenOp && ((DataGenOp)left).getOp() == DataGenMethod.RAND && right instanceof LiteralOp && left.getParent().size() == 1) {      DataGenOp inputGen=(DataGenOp)left;      HashMap<String,Integer> params=inputGen.getParamIndexMap();      Hop pdf=left.getInput().get(params.get(DataExpression.RAND_PDF));      Hop min=left.getInput().get(params.get(DataExpression.RAND_MIN));      Hop max=left.getInput().get(params.get(DataExpression.RAND_MAX));      double sval=((LiteralOp)right).getDoubleValue();      if ((bop.getOp() == OpOp2.MULT || bop.getOp() == OpOp2.PLUS || bop.getOp() == OpOp2.MINUS) && min instanceof LiteralOp && max instanceof LiteralOp&& pdf instanceof LiteralOp&& DataExpression.RAND_PDF_UNIFORM.equals(((LiteralOp)pdf).getStringValue())) {        DataGenOp gen=null;        if (bop.getOp() == OpOp2.MULT)         gen=HopRewriteUtils.copyDataGenOp(inputGen,sval,0); else {          sval*=(bop.getOp() == OpOp2.MINUS) ? -1 : 1;          gen=HopRewriteUtils.copyDataGenOp(inputGen,1,sval);        }        List<Hop> parents=new ArrayList<Hop>(bop.getParent());        for (        Hop p : parents) {          int cpos=HopRewriteUtils.getChildReferencePos(p,bop);          HopRewriteUtils.removeChildReferenceByPos(p,bop,cpos);          HopRewriteUtils.addChildReference(p,gen,cpos);          p.refreshSizeInformation();        }        hi=gen;        LOG.debug("Applied fuseDatagenAndBinaryOperation1 (line " + bop.getBeginLine() + ").");      }    } else     if (right instanceof DataGenOp && ((DataGenOp)right).getOp() == DataGenMethod.RAND && left instanceof LiteralOp && right.getParent().size() == 1) {      DataGenOp inputGen=(DataGenOp)right;      HashMap<String,Integer> params=inputGen.getParamIndexMap();      Hop pdf=right.getInput().get(params.get(DataExpression.RAND_PDF));      Hop min=right.getInput().get(params.get(DataExpression.RAND_MIN));      Hop max=right.getInput().get(params.get(DataExpression.RAND_MAX));      double sval=((LiteralOp)left).getDoubleValue();      if ((bop.getOp() == OpOp2.MULT || bop.getOp() == OpOp2.PLUS) && min instanceof LiteralOp && max instanceof LiteralOp&& pdf instanceof LiteralOp&& DataExpression.RAND_PDF_UNIFORM.equals(((LiteralOp)pdf).getStringValue())) {        DataGenOp gen=null;        if (bop.getOp() == OpOp2.MULT)         gen=HopRewriteUtils.copyDataGenOp(inputGen,sval,0); else {          gen=HopRewriteUtils.copyDataGenOp(inputGen,1,sval);        }        List<Hop> parents=new ArrayList<Hop>(bop.getParent());        for (        Hop p : parents) {          int cpos=HopRewriteUtils.getChildReferencePos(p,bop);          HopRewriteUtils.removeChildReferenceByPos(p,bop,cpos);          HopRewriteUtils.addChildReference(p,gen,cpos);          p.refreshSizeInformation();        }        hi=gen;        LOG.debug("Applied fuseDatagenAndBinaryOperation2 (line " + bop.getBeginLine() + ").");      }    }  }  return hi;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.KeyUsage_Id;    this.critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public static OEmbed createOEmbed(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return oembedConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public boolean startsWith(String prefix){  return m_str.startsWith(prefix);}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  public static void main(String[] args){  Rectangle r1=new Rectangle(3,5,"blue",true);  Rectangle r2=new Rectangle(5,3,"gray",false);  Rectangle r3=new Rectangle(3.1,5,"blue",true);  System.out.println("Rectangle1 Area :" + r1.getArea());  System.out.println("Rectangle2 Area :" + r2.getArea());  System.out.println("Rectangle3 Area :" + r3.getArea());  System.out.println("Rectangle1 is " + (r1.equals(r2) ? "" : "not ") + "equal to Rectangle2");  System.out.println("Rectangle1 is " + (r1.equals(r3) ? "" : "not ") + "equal to Rectangle3");}  }
class C{  public static List<PlanElement> linkParentPlansToGivenPlanElements(List<PlanElement> planElements){  Map<Id<Operator>,HashMap<Id<PPlan>,PlanElement>> operatorId2planId2planElement=new HashMap<Id<Operator>,HashMap<Id<PPlan>,PlanElement>>();  for (  PlanElement planElement : planElements) {    Id<Operator> operatorId=planElement.getOperatorId();    if (operatorId2planId2planElement.get(operatorId) == null) {      operatorId2planId2planElement.put(operatorId,new HashMap<Id<PPlan>,PlanElement>());    }    operatorId2planId2planElement.get(operatorId).put(planElement.getPlanId(),planElement);  }  for (  PlanElement planElement : planElements) {    try {      HashMap<Id<PPlan>,PlanElement> plans=operatorId2planId2planElement.get(planElement.getOperatorId());      PlanElement parent=plans.get(planElement.getParentId());      planElement.setParentPlan(parent);    } catch (    Exception e) {      log.error("Could not find parent plan element " + planElement.getParentId() + " for operator "+ planElement.getOperatorId()+ " plan "+ planElement.getPlanId());    }  }  return planElements;}  }
class C{  public byte[] genBytecode() throws Exception {  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);  FieldVisitor fv;  MethodVisitor mv;  final boolean itf=false;  cw.visit(V1_8,ACC_FINAL + ACC_SUPER,arrayImplClassName,null,"java/lang/Object",new String[]{arrayInterfaceClassName});{    fv=cw.visitField(ACC_PRIVATE + ACC_FINAL,"length","J",null,null);    fv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(J)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"length","J");    mv.visitInsn(RETURN);    mv.visitMaxs(3,3);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"getLength","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }  if (byte.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)B",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitInsn(LCONST_1);      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getByte","(Ljava/lang/Object;J)B",itf);      mv.visitInsn(IRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JB)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitInsn(LCONST_1);      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(ILOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putByte","(Ljava/lang/Object;JB)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitInsn(LCONST_1);      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/ByteArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + this.arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (boolean.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)Z",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getBoolean","(Ljava/lang/Object;J)Z",itf);      mv.visitInsn(IRETURN);      mv.visitMaxs(6,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JZ)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitInsn(LADD);      mv.visitVarInsn(ILOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putBoolean","(Ljava/lang/Object;JZ)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(6,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/BooleanArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (short.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)S",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getShort","(Ljava/lang/Object;J)S",itf);      mv.visitInsn(IRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JS)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(ILOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putShort","(Ljava/lang/Object;JS)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/ShortArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"range","(JJ)L" + arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (char.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)C",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getChar","(Ljava/lang/Object;J)C",itf);      mv.visitInsn(IRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JC)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(ILOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putChar","(Ljava/lang/Object;JC)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(2L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/CharArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + this.arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (int.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)I",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getInt","(Ljava/lang/Object;J)I",itf);      mv.visitInsn(IRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JI)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(ILOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putInt","(Ljava/lang/Object;JI)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/IntArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + this.arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (long.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)J",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getLong","(Ljava/lang/Object;J)J",itf);      mv.visitInsn(LRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JJ)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putLong","(Ljava/lang/Object;JJ)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,5);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/LongArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + this.arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (float.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)F",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getFloat","(Ljava/lang/Object;J)F",itf);      mv.visitInsn(FRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JF)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(FLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putFloat","(Ljava/lang/Object;JF)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,4);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(4L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/FloatArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"range","(JJ)L" + this.arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else   if (double.class == elementInterfaceClass) {{      mv=cw.visitMethod(ACC_PUBLIC,"at","(J)D",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","getDouble","(Ljava/lang/Object;J)D",itf);      mv.visitInsn(DRETURN);      mv.visitMaxs(8,3);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"put","(JD)V",null,null);      mv.visitCode();      mv.visitFieldInsn(GETSTATIC,this.arrayImplClassName,"unsafe","Lsun/misc/Unsafe;");      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getData","()[B",itf);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitMethodInsn(INVOKEVIRTUAL,"com/ibm/layout/Location","getOffset","()J",itf);      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitInsn(LADD);      mv.visitVarInsn(DLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,"sun/misc/Unsafe","putDouble","(Ljava/lang/Object;JD)V",itf);      mv.visitInsn(RETURN);      mv.visitMaxs(8,5);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)L" + this.arrayInterfaceClassName + ";",null,null);      mv.visitCode();      mv.visitTypeInsn(NEW,this.arrayImplClassName);      mv.visitInsn(DUP);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(J)V",itf);      mv.visitVarInsn(ASTORE,5);      mv.visitTypeInsn(NEW,"com/ibm/layout/Location");      mv.visitInsn(DUP);      mv.visitVarInsn(ALOAD,0);      mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"location","Lcom/ibm/layout/Location;");      mv.visitVarInsn(LLOAD,1);      mv.visitLdcInsn(new Long(8L));      mv.visitInsn(LMUL);      mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);      mv.visitVarInsn(ASTORE,6);      mv.visitVarInsn(ALOAD,5);      mv.visitVarInsn(ALOAD,6);      mv.visitMethodInsn(INVOKEVIRTUAL,this.arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);      mv.visitVarInsn(ALOAD,5);      mv.visitInsn(ARETURN);      mv.visitMaxs(7,7);      mv.visitEnd();    }{      mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"range","(JJ)Lcom/ibm/layout/DoubleArray1D;",null,null);      mv.visitCode();      mv.visitVarInsn(ALOAD,0);      mv.visitVarInsn(LLOAD,1);      mv.visitVarInsn(LLOAD,3);      mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"range","(JJ)L" + arrayInterfaceClassName + ";",itf);      mv.visitInsn(ARETURN);      mv.visitMaxs(5,5);      mv.visitEnd();    }  } else {    throw new Exception();  }{    mv=cw.visitMethod(ACC_PUBLIC,"sizeof","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }  ImplHelper.genLayoutTypeImpl(cw,mv,fv,arrayImplClassName,false);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public Taxi(){  super();}  }
class C{  public void testAddServletWithNameAndClass() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServlet(webXml,"s1","s1class");  assertTrue(WebXmlUtils.hasServlet(webXml,"s1"));}  }
class C{  public static long parseLong(CharSequence csq){  return parseLong(csq,10);}  }
class C{  private void cleanupDestination(State state,int finalStatus){  closeDestination(state);  if (state.mFilename != null && DownloaderService.isStatusError(finalStatus)) {    new File(state.mFilename).delete();    state.mFilename=null;  }}  }
class C{  public static int hash(int item){  return item;}  }
class C{  private void processMatchableNode(Element element){  if (!processedMatchableNode.contains(element)) {    try {      processedMatchableNode.add(element);      AnnotationMirror mirror=findAnnotationMirror(element,matchableNodesTypeMirror);      if (mirror == null) {        mirror=findAnnotationMirror(element,matchableNodeTypeMirror);      }      if (mirror == null) {        return;      }      TypeElement topDeclaringType=topDeclaringType(element);      List<AnnotationMirror> mirrors=null;      if (typeUtils().isSameType(mirror.getAnnotationType(),matchableNodesTypeMirror)) {        mirrors=getAnnotationValueList(AnnotationMirror.class,mirror,"value");      }      int i=0;      for (      MatchableNode matchableNode : element.getAnnotationsByType(MatchableNode.class)) {        processMatchableNode(element,topDeclaringType,matchableNode,mirrors != null ? mirrors.get(i++) : mirror);      }    } catch (    Throwable t) {      reportExceptionThrow(element,t);    }  }}  }
class C{  void lineLine(){  int lineCount=1;  int lineIncrement=1;  int njplsStart;  int jplsStart;  njplsStart=readNumber();  if (sdePeek() == '#') {    sdeAdvance();    currentFileId=readNumber();  }  if (sdePeek() == ',') {    sdeAdvance();    lineCount=readNumber();  }  if (sdeRead() != ':') {    syntax();  }  jplsStart=readNumber();  if (sdePeek() == ',') {    sdeAdvance();    lineIncrement=readNumber();  }  ignoreLine();  storeLine(jplsStart,jplsStart + (lineCount * lineIncrement) - 1,lineIncrement,njplsStart,njplsStart + lineCount - 1,currentFileId);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void endVisit(CastExpression node){}  }
class C{  public static byte[] altBase64ToByteArray(String s){  return base64ToByteArray(s,true);}  }
class C{  public void addTimeToBounds(TimeBounds timeBounds){  addTimeToBounds(timeBounds.getStartTime());  addTimeToBounds(timeBounds.getEndTime());}  }
class C{  public RangeQueryBuilder to(double to){  this.to=to;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.868 -0500",hash_original_method="5FFF4B907A3EDB23E7C228BF47F3F987",hash_generated_method="76D5886473A7D16C3BEA42F2523EF201") public void startTest(Test test){  mTimingValid=true;  mStartTime=System.currentTimeMillis();}  }
class C{  public static byte[] loadData(final AbstractSQLProvider provider,final CModule module) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE01265: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE01266: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00532: Module is not stored in the given database");  try {    return ByteHelpers.combine(loadDataChunks(provider,module));  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public boolean isPerVmSwapFiles(){  return perVmSwapFiles;}  }
class C{  final boolean cannotPrecede(boolean haveData){  boolean d=isData;  Object x;  return d != haveData && (x=item) != this && (x != null) == d;}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    throw new IllegalArgumentException("No configuration file specified");  }  String configPath=args[0];  File configFile=new File(configPath);  if (System.getProperty("log.name") == null) {    String logName=StringUtils.substringBefore(configFile.getName(),".");    System.setProperty("log.name",logName);  }  String productHome=System.getProperty("product.home");  if (StringUtils.isBlank(productHome)) {    throw new IllegalStateException("product.home is not set");  }  File homeDir=new File(productHome);  initLogging(homeDir);  if (!configFile.isFile()) {    if (configFile.isAbsolute()) {      throw new IllegalArgumentException("Configuration file does not exist: " + configFile);    }    configFile=new File(homeDir,args[0]);    if (!configFile.isFile()) {      throw new IllegalArgumentException("Configuration file does not exist: " + configFile);    }  }  Properties config=readConfig(configFile);  launchServices(config);}  }
class C{  private Properties loadProperties(String subDirectory) throws Exception {  File jettyBase=new File("target/jetty-base");  assertTrue(jettyBase + " is not a directory",jettyBase.isDirectory());  File propertiesFile=new File(jettyBase,subDirectory + "/test.properties");  assertTrue(propertiesFile + " is not a file",propertiesFile.isFile());  Properties properties=new Properties();  FileInputStream fis=new FileInputStream(propertiesFile);  try {    properties.load(fis);  }  finally {    fis.close();    fis=null;    System.gc();  }  return properties;}  }
class C{  public CreateSubscriptionResponse CreateSubscription(CreateSubscriptionRequest req) throws ServiceFaultException, ServiceResultException {  return (CreateSubscriptionResponse)channel.serviceRequest(req);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","xdkj");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public BytecodeOffsetTag(int offset){  this.offset=offset;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public void deleteImageSharings2(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  mRichcallService.tryToDeleteImageSharings(contact);}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  dialog.setTitle(getTitle());  initBPartner(true);  bPartnerField.addVetoableChangeListener(this);  loadRMA();  return true;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>QuintFunction<T4,T5,T6,T7,T8,R> partial8(final T1 t1,final T2 t2,final T3 t3,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  private static boolean isASCIISuperset(String encoding) throws Exception {  String chkS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz-_.!~*'();/?:@&=+$,";  byte[] chkB={48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,45,95,46,33,126,42,39,40,41,59,47,63,58,64,38,61,43,36,44};  byte[] b=chkS.getBytes(encoding);  return Arrays.equals(b,chkB);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.846 -0500",hash_original_method="18514752AF9765DC2B592BA63E6E31BB",hash_generated_method="0BBE24FD00D06DA5CCB82C2749A74814") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public SMTPConnectionClosedException(){  super();}  }
class C{  private ModelMBeanInfo createModelMBeanInfo() throws Exception {  String descriptionOp1Set="ManagedResource description setter";  Class[] paramsSet1={Class.forName("java.lang.Object"),Class.forName("java.lang.String")};  Method oper1Set=RequiredModelMBean.class.getMethod("setManagedResource",paramsSet1);  ModelMBeanOperationInfo operation1Set=new ModelMBeanOperationInfo(descriptionOp1Set,oper1Set);  String descriptionop2Set="addAttributeChangeNotificationListener description";  Class[] paramsSet2={Class.forName("javax.management.NotificationListener"),Class.forName("java.lang.String"),Class.forName("java.lang.Object")};  Method oper2Set=RequiredModelMBean.class.getMethod("addAttributeChangeNotificationListener",paramsSet2);  ModelMBeanOperationInfo operation2Set=new ModelMBeanOperationInfo(descriptionop2Set,oper2Set);  String className="ModelMBeansInfo";  String descriptionmodel="Model MBean Test";  ModelMBeanAttributeInfo[] attributes=null;  ModelMBeanOperationInfo[] operations={operation1Set,operation2Set};  ModelMBeanNotificationInfo[] notifications=null;  ModelMBeanConstructorInfo[] constructors=null;  ModelMBeanInfoSupport modelMBeanInfo=new ModelMBeanInfoSupport(className,descriptionmodel,attributes,constructors,operations,notifications);  return modelMBeanInfo;}  }
class C{  void execute(String command) throws XAException {  try {    connection.createStatement().execute(command);  } catch (  SQLException sqle) {    throw mapXaException(sqle);  }}  }
class C{  public int scale(){  if (scale == null)   return 1;  return scale;}  }
class C{  public URL find(String classname){  try {    URLConnection con=openClassfile0(classname);    InputStream is=con.getInputStream();    if (is != null) {      is.close();      return con.getURL();    }  } catch (  IOException e) {  }  return null;}  }
class C{  private ListenableFuture sendSingleGetData(GetDataMessage getdata){  Preconditions.checkArgument(getdata.getItems().size() == 1);  GetDataRequest req=new GetDataRequest(getdata.getItems().get(0).hash,SettableFuture.create());  getDataFutures.add(req);  sendMessage(getdata);  return req.future;}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public double value(final Array x){  functionEvaluation_++;  return costFunction_.value(x);}  }
class C{  public static int dialogUnitYAsPixel(int dluY,Component component){  return dluY == 0 ? 0 : getUnitConverter().dialogUnitYAsPixel(dluY,component);}  }
class C{  MethodHandle linkMethodHandleConstant(byte refKind,Class<?> defc,String name,Object type) throws ReflectiveOperationException {  if (!(type instanceof Class || type instanceof MethodType))   throw new InternalError("unresolved MemberName");  MemberName member=new MemberName(refKind,defc,name,type);  MethodHandle mh=LOOKASIDE_TABLE.get(member);  if (mh != null) {    checkSymbolicClass(defc);    return mh;  }  if (defc == MethodHandle.class && refKind == REF_invokeVirtual) {    mh=findVirtualForMH(member.getName(),member.getMethodType());    if (mh != null) {      return mh;    }  }  MemberName resolved=resolveOrFail(refKind,member);  mh=getDirectMethodForConstant(refKind,defc,resolved);  if (mh instanceof DirectMethodHandle && canBeCached(refKind,defc,resolved)) {    MemberName key=mh.internalMemberName();    if (key != null) {      key=key.asNormalOriginal();    }    if (member.equals(key)) {      LOOKASIDE_TABLE.put(key,(DirectMethodHandle)mh);    }  }  return mh;}  }
class C{  public ScriptEditor(){  textArea=new RSyntaxTextArea(DEFAULT_HEIGHT,DEFAULT_WIDTH);  initPanel();}  }
class C{  public void changeStarted(GraphicsNodeChangeEvent gnce){  GraphicsNode gn=gnce.getGraphicsNode();  WeakReference gnWRef=gn.getWeakReference();  boolean doPut=false;  if (dirtyNodes == null) {    dirtyNodes=new HashMap();    doPut=true;  } else   if (!dirtyNodes.containsKey(gnWRef))   doPut=true;  if (doPut) {    AffineTransform at=gn.getTransform();    if (at != null)     at=(AffineTransform)at.clone(); else     at=new AffineTransform();    dirtyNodes.put(gnWRef,at);  }  GraphicsNode chngSrc=gnce.getChangeSrc();  Rectangle2D rgn=null;  if (chngSrc != null) {    Rectangle2D drgn=getNodeDirtyRegion(chngSrc);    if (drgn != null)     rgn=new ChngSrcRect(drgn);  } else {    rgn=gn.getBounds();  }  Rectangle2D r2d=(Rectangle2D)fromBounds.remove(gnWRef);  if (rgn != null) {    if ((r2d != null) && (r2d != NULL_RECT)) {      r2d.add(rgn);    } else     r2d=rgn;  }  if (r2d == null)   r2d=NULL_RECT;  fromBounds.put(gnWRef,r2d);}  }
class C{  public boolean isSetSwPortTuple(){  return this.swPortTuple != null;}  }
class C{  public TestHiveServer(int localThreadCount){  serverAddress="local[" + localThreadCount + "]";}  }
class C{  private void appendMultiPointText(MultiPoint multiPoint,int level,Writer writer) throws IOException {  if (multiPoint.isEmpty()) {    writer.write("EMPTY");  } else {    writer.write("(");    for (int i=0; i < multiPoint.getNumGeometries(); i++) {      if (i > 0) {        writer.write(", ");        indentCoords(i,level + 1,writer);      }      writer.write("(");      appendCoordinate(((Point)multiPoint.getGeometryN(i)).getCoordinate(),writer);      writer.write(")");    }    writer.write(")");  }}  }
class C{  public void addHistoryChangedListener(HistoryChangedListener l){  m_ConnectionPanel.addHistoryChangedListener(l);  m_QueryPanel.addHistoryChangedListener(l);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.atan(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void computeDefaultVisibilityMap(JsonObject jsonObj){  defaultVisibilityMap=new TreeMap<String,Boolean>();  JsonElement visibility=jsonObj.get("visibility");  if (visibility != null && visibility.isJsonObject()) {    for (    Map.Entry<String,JsonElement> entry : visibility.getAsJsonObject().entrySet()) {      String key=entry.getKey();      Boolean value=Boolean.valueOf(entry.getValue().getAsBoolean());      defaultVisibilityMap.put(key,value);    }  }}  }
class C{  public NetView(NetView other,int viewId){  this.creator=other.creator;  this.viewId=viewId;  this.members=new ArrayList<>(other.members);  this.hashedMembers=new HashSet<>(other.members);  this.failureDetectionPorts=new int[other.failureDetectionPorts.length];  System.arraycopy(other.failureDetectionPorts,0,this.failureDetectionPorts,0,other.failureDetectionPorts.length);  this.shutdownMembers=new HashSet<>(other.shutdownMembers);  this.crashedMembers=new HashSet<>(other.crashedMembers);  this.publicKeys=new HashMap<>(other.publicKeys);}  }
class C{  protected void cascade(Component comp){  Dimension paneSize=getSize();  int targetWidth=(3 * paneSize.width) / 4;  int targetHeight=(3 * paneSize.height) / 4;  DesktopManager manager=getDesktopManager();  if (manager == null) {    comp.setBounds(0,0,targetWidth,targetHeight);    return;  }  if (((nextX + targetWidth) > paneSize.width) || ((nextY + targetHeight) > paneSize.height)) {    nextX=0;    nextY=0;  }  if (((JInternalFrame)comp).isResizable()) {    manager.setBoundsForFrame((JComponent)comp,nextX,nextY,targetWidth,targetHeight);  } else {    manager.setBoundsForFrame((JComponent)comp,nextX,nextY,comp.getSize().width,comp.getSize().height);  }  nextX+=offsetX;  nextY+=offsetY;}  }
class C{  @Override public boolean isBusy(){  return m_busy;}  }
class C{  public boolean isAddressLinesReverse(){  Object oo=get_Value(COLUMNNAME_IsAddressLinesReverse);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private TopDocs searchByVersion(String selfLink,IndexSearcher s,Long version) throws IOException {  Query tqSelfLink=new TermQuery(new Term(ServiceDocument.FIELD_NAME_SELF_LINK,selfLink));  BooleanQuery.Builder builder=new BooleanQuery.Builder();  builder.add(tqSelfLink,Occur.MUST);  if (version != null) {    Query versionQuery=LongPoint.newRangeQuery(ServiceDocument.FIELD_NAME_VERSION,version,version);    builder.add(versionQuery,Occur.MUST);  }  TopDocs hits=s.search(builder.build(),1,this.versionSort,false,false);  return hits;}  }
class C{  void uploadSessionFinished(){  uploadAborted=false;  if (!errorOccured && !artifactUploadState.isStatusPopupMinimized()) {    clearWindow();  }  artifactUploadState.setUploadCompleted(true);  minimizeButton.setEnabled(false);  closeButton.setEnabled(true);  confirmDialog.getWindow().close();  UI.getCurrent().removeWindow(confirmDialog.getWindow());}  }
class C{  public Long addState(String name,String shortName,int code){  try {    States st=new States();    st.setName(name);    st.setShortName(shortName);    st.setCode(code);    st.setStarttime(new Date());    st.setDeleted("false");    st=em.merge(st);    Long id=st.getState_id();    log.debug("added id " + id);    return id;  } catch (  Exception ex2) {    log.error("addState",ex2);  }  return null;}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  private static Object[] splitLine(String line,Pattern delim,char quote,BufferedReader in,int numColumns) throws IOException {  List<String> tokens=new ArrayList<String>();  StringBuilder sb=new StringBuilder();  Matcher m=delim.matcher(line);  int idx=0;  while (idx < line.length()) {    if (line.charAt(idx) == quote) {      sb.setLength(0);      ++idx;      while (true) {        int endIdx=line.indexOf(quote,idx);        if (endIdx >= 0) {          sb.append(line,idx,endIdx);          ++endIdx;          if ((endIdx < line.length()) && (line.charAt(endIdx) == quote)) {            sb.append(quote);            idx=endIdx + 1;          } else {            idx=endIdx;            break;          }        } else {          sb.append(line,idx,line.length());          sb.append(LINE_SEPARATOR);          idx=0;          line=in.readLine();          if (line == null) {            throw new EOFException("Missing end of quoted value " + sb);          }        }      }      tokens.add(sb.toString());      idx=(m.find(idx) ? m.end() : line.length());    } else     if (m.find(idx)) {      tokens.add(line.substring(idx,m.start()));      idx=m.end();    } else {      tokens.add(line.substring(idx));      idx=line.length();    }  }  return tokens.toArray(new Object[Math.max(tokens.size(),numColumns)]);}  }
class C{  private void testAdd() throws Exception {  LOG.info("add");  long msgCount=messageMapper.countMessagesInMailbox(MBOXES.get(1));  LOG.info(msgCount + " " + MESSAGE_NO.size());  assertEquals(MESSAGE_NO.size(),msgCount);}  }
class C{  public boolean isDirectory(){  return getWrappedPath().isDirectory();}  }
class C{  public static boolean containsAny(CharSequence cs,CharSequence searchChars){  if (searchChars == null) {    return false;  }  return containsAny(cs,toCharArray(searchChars));}  }
class C{  public Query(final String indexName,final QueryBuilder queryBuilder,String order_field,int timezoneOffset,int resultCount,long histogram_interval,String histogram_timefield,int aggregationLimit,String... aggregationFields){  SearchRequestBuilder request=elasticsearchClient.prepareSearch(indexName).setSearchType(SearchType.QUERY_THEN_FETCH).setQuery(queryBuilder).setFrom(0).setSize(resultCount);  request.clearRescorers();  if (resultCount > 0) {    request.addSort(SortBuilders.fieldSort(order_field).unmappedType(order_field).order(SortOrder.DESC));  }  boolean addTimeHistogram=false;  DateHistogramInterval dateHistogrammInterval=histogram_interval > DateParser.WEEK_MILLIS ? DateHistogramInterval.DAY : histogram_interval > DateParser.HOUR_MILLIS * 3 ? DateHistogramInterval.HOUR : DateHistogramInterval.MINUTE;  for (  String field : aggregationFields) {    if (field.equals(histogram_timefield)) {      addTimeHistogram=true;      request.addAggregation(AggregationBuilders.dateHistogram(histogram_timefield).field(histogram_timefield).timeZone("UTC").minDocCount(0).interval(dateHistogrammInterval));    } else {      request.addAggregation(AggregationBuilders.terms(field).field(field).minDocCount(1).size(aggregationLimit));    }  }  SearchResponse response=request.execute().actionGet();  hitCount=(int)response.getHits().getTotalHits();  SearchHit[] hits=response.getHits().getHits();  this.result=new ArrayList<Map<String,Object>>(hitCount);  for (  SearchHit hit : hits) {    Map<String,Object> map=hit.getSource();    this.result.add(map);  }  this.aggregations=new HashMap<>();  for (  String field : aggregationFields) {    if (field.equals(histogram_timefield))     continue;    Terms fieldCounts=response.getAggregations().get(field);    List<Bucket> buckets=fieldCounts.getBuckets();    Map<String,Long> checkMap=new HashMap<>();    for (    Bucket bucket : buckets) {      String key=bucket.getKeyAsString().trim();      if (key.length() > 0) {        String k=key.toLowerCase();        Long v=checkMap.get(k);        checkMap.put(k,v == null ? bucket.getDocCount() : v + bucket.getDocCount());      }    }    ArrayList<Map.Entry<String,Long>> list=new ArrayList<>(buckets.size());    for (    Bucket bucket : buckets) {      String key=bucket.getKeyAsString().trim();      if (key.length() > 0) {        Long v=checkMap.remove(key.toLowerCase());        if (v == null)         continue;        list.add(new AbstractMap.SimpleEntry<String,Long>(key,v));      }    }    aggregations.put(field,list);  }  if (addTimeHistogram) {    InternalHistogram<InternalHistogram.Bucket> dateCounts=response.getAggregations().get(histogram_timefield);    ArrayList<Map.Entry<String,Long>> list=new ArrayList<>();    for (    InternalHistogram.Bucket bucket : dateCounts.getBuckets()) {      Calendar cal=Calendar.getInstance(DateParser.UTCtimeZone);      org.joda.time.DateTime k=(org.joda.time.DateTime)bucket.getKey();      cal.setTime(k.toDate());      cal.add(Calendar.MINUTE,-timezoneOffset);      long docCount=bucket.getDocCount();      Map.Entry<String,Long> entry=new AbstractMap.SimpleEntry<String,Long>((dateHistogrammInterval == DateHistogramInterval.DAY ? DateParser.dayDateFormat : DateParser.minuteDateFormat).format(cal.getTime()),docCount);      list.add(entry);    }    aggregations.put(histogram_timefield,list);  }}  }
class C{  public static void register(){  DdmServer.registerHandler(CHUNK_HELO,mInstance);  DdmServer.registerHandler(CHUNK_FEAT,mInstance);}  }
class C{  public MutableTriple(){  super();}  }
class C{  public static <E extends Comparable<E>>E max(ArrayList<E> list){  E max=list.get(0);  for (int i=1; i < list.size(); i++) {    if (max.compareTo(list.get(i)) < 0)     max=list.get(i);  }  return max;}  }
class C{  public void start(){  stop();  for (int i=0; i < mDispatchers.length; i++) {    DownloadDispatcher networkDispatcher=new DownloadDispatcher(mUnFinishQueue,mDownloadQueue);    mDispatchers[i]=networkDispatcher;    networkDispatcher.start();  }}  }
class C{  public NoRouteToHostException(String detailMessage){  super(detailMessage);}  }
class C{  @Override @SuppressWarnings("unchecked") public Object invoke(Object object,Method nativeMethod,Object[] objects) throws Throwable {  log.debug("Invoked. NativeMethod={}, method args length={}",nativeMethod.getName(),objects.length);  E event=(E)createGenericEvent(objects[0]);  try {    log.debug("Created event {}",genericEventClass.getSimpleName());    Method method=genericHandler.getClass().getMethod(nativeMethod.getName(),new Class[]{genericEventClass});    log.debug("Invoking {}.{}({}) ",new Object[]{genericHandler.getClass().getSimpleName(),method.getName(),method.getParameterTypes()[0].getSimpleName()});    return method.invoke(genericHandler,event);  } catch (  NoSuchMethodException e) {    log.warn("Got a NoSuchMethodException");    if (nativeMethod.getName().equals("equals") && objects.length == 1) {      return object == objects[0];    }    return null;  }}  }
class C{  private void startShadowAnimation(){  animator=ObjectAnimator.ofFloat(view,"scaleX",1,1.5f,1);  animator.setInterpolator(new AccelerateInterpolator());  animator.setRepeatCount(ObjectAnimator.INFINITE);  animator.setDuration(jumpingView.getmDuration() * 2).start();}  }
class C{  public Salsa(BipartiteGraph bipartiteGraph,int expectedNodesToHit,StatsReceiver statsReceiver){  SalsaInternalState salsaInternalState=new SalsaInternalState(bipartiteGraph,new SalsaStats(),expectedNodesToHit);  this.salsaIterations=new SalsaIterations<BipartiteGraph>(salsaInternalState,new LeftSalsaIteration(salsaInternalState),new RightSalsaIteration(salsaInternalState),new FinalSalsaIteration(salsaInternalState));  this.salsaSelectResults=new SalsaSelectResults<BipartiteGraph>(salsaInternalState);  this.statsReceiver=statsReceiver.scope("SALSA");  this.numRequestsCounter=this.statsReceiver.counter("numRequests");}  }
class C{  public boolean zoneExportRemoveInitiators(List<NetworkZoningParam> zoningParams,String stepId) throws ControllerException {  if (zoningParams.isEmpty()) {    _log.info("zoningParams is empty, returning");    WorkflowStepCompleter.stepSucceded(stepId);    return true;  }  NetworkFCContext context=new NetworkFCContext();  boolean status=false;  URI exportGroupId=zoningParams.get(0).getExportGroupId();  URI virtualArray=zoningParams.get(0).getVirtualArray();  _log.info(String.format("Entering zoneExportRemoveInitiators for ExportGroup: %s",zoningParams.get(0).getExportGroupDisplay()));  try {    if (!checkZoningRequired(stepId,virtualArray)) {      return true;    }    context.setAddingZones(false);    List<NetworkFCZoneInfo> zoneInfos=_networkScheduler.getZoningRemoveTargets(zoningParams,null);    context.getZoneInfos().addAll(zoneInfos);    logZones(zoneInfos);    if (context.getZoneInfos().isEmpty()) {      WorkflowStepCompleter.stepSucceded(stepId);      return true;    }    BiosCommandResult result=addRemoveZones(exportGroupId,context.getZoneInfos(),true);    status=result.isCommandSuccess();    completeWorkflowState(stepId,"zoneExportRemoveInitiators",result);    if (result.isCommandSuccess()) {      removeInitiatorsFromZoningMap(zoningParams);    }    return status;  } catch (  Exception ex) {    _log.error("Exception zoning remove initiators",ex);    ServiceError svcError=NetworkDeviceControllerException.errors.zoneExportRemoveInitiatorsFailed(ex.getMessage(),ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);    return status;  }}  }
class C{  public long postGraphML(final String path) throws Exception {  final UUID uuid=UUID.randomUUID();  final ConnectOptions opts=mgr.newConnectOptions(sparqlEndpointURL,uuid,tx);  opts.addRequestParam("blueprints");  JettyResponseListener response=null;  try {    final File file=new File(path);    if (!file.exists()) {      throw new RuntimeException("cannot locate file: " + file.getAbsolutePath());    }    final byte[] data=IOUtil.readBytes(file);    final ByteArrayEntity entity=new ByteArrayEntity(data);    entity.setContentType(ConnectOptions.MIME_GRAPH_ML);    opts.entity=entity;    opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);    checkResponseCode(response=doConnect(opts));    final MutationResult result=mutationResults(response);    return result.mutationCount;  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public static ByteList Traits(ByteList bytes,ObjectList<ByteList> traits){  for (  ByteList list : traits) {    bytes.addAll(list);  }  return bytes;}  }
class C{  public void leaveGroup(SocketAddress groupAddress,NetworkInterface netInterface) throws IOException {  checkJoinOrLeave(groupAddress,netInterface);  impl.leaveGroup(groupAddress,netInterface);}  }
class C{  @Override public void refresh(){}  }
class C{  public static synchronized void loadMacro(Macro macro){  currentMacro=macro;}  }
class C{  public JPanelButtons(String sConfigKey,JPanelTicket panelticket){  initComponents();  tnbmacro=new ThumbNailBuilder(18,18,"uk/chromis/images/run_script.png");  this.panelticket=panelticket;  props=new Properties();  events=new HashMap<>();  String sConfigRes=panelticket.getResourceAsXML(sConfigKey);  if (sConfigRes != null) {    try {      if (m_sp == null) {        SAXParserFactory spf=SAXParserFactory.newInstance();        m_sp=spf.newSAXParser();      }      m_sp.parse(new InputSource(new StringReader(sConfigRes)),new ConfigurationHandler());    } catch (    ParserConfigurationException ePC) {      logger.log(Level.WARNING,LocalRes.getIntString("exception.parserconfig"),ePC);    }catch (    SAXException eSAX) {      logger.log(Level.WARNING,LocalRes.getIntString("exception.xmlfile"),eSAX);    }catch (    IOException eIO) {      logger.log(Level.WARNING,LocalRes.getIntString("exception.iofile"),eIO);    }  }}  }
class C{  public void toRootSIFT(){  double max=0;  for (int i=0; i < descriptor.length; i++) {    max=Math.max(max,Math.abs(descriptor[i]));  }  for (int i=0; i < descriptor.length; i++) {    descriptor[i]=Math.sqrt(Math.abs(descriptor[i]) / max);  }}  }
class C{  @Override public boolean doesGuiPauseGame(){  return false;}  }
class C{  @Override public void relocate(){  int w=310, h=255;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  taskLimitationsLabel.setLocation(x,y);  articleTaskLabel.setLocation(x,y + 30);  articleTaskLimitField.setLocation(x + 110,y + 30);  diffTaskLabel.setLocation(x,y + 60);  diffTaskLimitField.setLocation(x + 110,y + 60);  sqlProducerLimitationsLabel.setLocation(x,y + 100);  maxAllowedPacketLabel.setLocation(x,y + 130);  maxAllowedPacketField.setLocation(x + 170,y + 130);}  }
class C{  public RedisReport(final ConnectionManager connectionManager,final String name){  super(new RedisReportCodec(),new CommandSyncService(connectionManager),null == name || name.trim().isEmpty() ? DEFAULT_NAME : name);  this.connectionManager=connectionManager;}  }
