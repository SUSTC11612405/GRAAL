class C{  public void testTrackColor_fixed(){  testTrackColor(R.string.settings_map_track_color_mode_fixed,R.string.settings_map_track_color_mode_fixed_summary);}  }
class C{  public NumberOfNodesBasedConfig(int numberOfNodes){  this.numberOfNodes=numberOfNodes;}  }
class C{  public BandPassBuilder stopRipple(double rippleDb){  mStopRipple=rippleDb;  return this;}  }
class C{  public void onDrag(float elasticOffset,float elasticOffsetPixels,float rawOffset,float rawOffsetPixels){}  }
class C{  public static <T>ImmutableList<SonarField<T>> findFieldsWithType(Class<?> clazz,Class<T> fieldType){  Preconditions.checkNotNull(clazz,"Null class");  Preconditions.checkNotNull(fieldType,"Null type");  ImmutableList.Builder<SonarField<T>> builder=ImmutableList.builder();  for (  Field field : clazz.getDeclaredFields()) {    if (Reflection.isLenientlyAssignableFrom(fieldType,field.getType())) {      builder.add(new SonarField<T>(field));    }  }  return builder.build();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.631 -0500",hash_original_method="A8702F14B58AAD20058746FC81F4589D",hash_generated_method="FA9F84C4830C5AB60D417F152BB76B01") public void startWithFragment(String fragmentName,Bundle args,Fragment resultTo,int resultRequestCode,int titleRes,int shortTitleRes){  Intent intent=onBuildStartFragmentIntent(fragmentName,args,titleRes,shortTitleRes);  if (resultTo == null) {    startActivity(intent);  } else {    resultTo.startActivityForResult(intent,resultRequestCode);  }}  }
class C{  protected String doIt() throws Exception {  AD_PInstance_ID=getAD_PInstance_ID();  try {    loadBOM();    print();  } catch (  Exception e) {    log.log(Level.SEVERE,"PrintBOM",e.toString());    throw new Exception(e.getLocalizedMessage());  } finally {    String sql="DELETE FROM T_BomLine WHERE AD_PInstance_ID = " + AD_PInstance_ID;    DB.executeUpdate(sql,null);  }  return "@OK@";}  }
class C{  public void processTag(Tag tag){  String key=tag.getKey();  String value=tag.getValue();  if (key.equals("name")) {    wayName=value;  } else {    EntityAttribute att=EntityAttributeManager.instance().intern(new EntityAttribute(key,value));    if (att != null)     wayAttributes.add(att);  }}  }
class C{  public final static byte[] positionToHash(final long l){  byte[] h=Base64Order.enhancedCoder.uncardinal(l);  assert h.length == 12;  return h;}  }
class C{  public boolean followSymLinks(){  return followLinks;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private static void serviceInjectionExample(Ignite ignite) throws Exception {  System.out.println(">>>");  System.out.println(">>> Starting service injection example.");  System.out.println(">>>");  SimpleMapService<Integer,String> mapSvc=ignite.services().serviceProxy("myClusterSingletonService",SimpleMapService.class,true);  int cnt=10;  for (int i=0; i < cnt; i++)   mapSvc.put(i,Integer.toString(i));  final Collection<Integer> mapSizes=ignite.compute().broadcast(new SimpleClosure());  System.out.println("Closure execution result: " + mapSizes);  for (  int mapSize : mapSizes)   if (mapSize != cnt)   throw new Exception("Invalid map size [expected=" + cnt + ", actual="+ mapSize+ ']');}  }
class C{  @Override public void onException(final JMSException exception){  if (ActiveMQConnection.EXCEPTION_FAILOVER.equals(exception.getErrorCode())) {    return;  }  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("onException(" + exception + ")");  }  if (isDestroyed.get()) {    if (ActiveMQRAManagedConnection.trace) {      ActiveMQRALogger.LOGGER.trace("Ignoring error on already destroyed connection " + this,exception);    }    return;  }  ActiveMQRALogger.LOGGER.handlingJMSFailure(exception);  try {    connection.setExceptionListener(null);  } catch (  JMSException e) {    ActiveMQRALogger.LOGGER.debug("Unable to unset exception listener",e);  }  ConnectionEvent event=new ConnectionEvent(this,ConnectionEvent.CONNECTION_ERROR_OCCURRED,exception);  sendEvent(event);}  }
class C{  @Override public void acceptInstance(InstanceEvent e){  m_busy=true;  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_throughput=new StreamThroughput(statusMessagePrefix());    Instances structure=e.getStructure();    try {      makeOutputStructure(structure);    } catch (    Exception ex) {      String msg=statusMessagePrefix() + "ERROR: unable to create output instances structure.";      if (m_log != null) {        m_log.statusMessage(msg);        m_log.logMessage("[SubstringLabeler] " + ex.getMessage());      }      stop();      ex.printStackTrace();      m_busy=false;      return;    }    if (!e.m_formatNotificationOnly) {      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "Processing stream...");      }    }    m_ie.setStructure(m_matches.getOutputStructure());    m_ie.m_formatNotificationOnly=e.m_formatNotificationOnly;    notifyInstanceListeners(m_ie);  } else {    Instance inst=e.getInstance();    Instance out=null;    if (inst != null) {      m_throughput.updateStart();      try {        out=m_matches.makeOutputInstance(inst,false);      } catch (      Exception e1) {        e1.printStackTrace();      }      m_throughput.updateEnd(m_log);    }    if (inst == null || out != null || e.getStatus() == InstanceEvent.BATCH_FINISHED) {      m_ie.setInstance(out);      m_ie.setStatus(e.getStatus());      notifyInstanceListeners(m_ie);    }    if (e.getStatus() == InstanceEvent.BATCH_FINISHED || inst == null) {      m_throughput.finished(m_log);    }  }  m_busy=false;}  }
class C{  public CreatureInfo(final Map<Double,String> probabilityLiterals,final Map<Integer,String> amountLiterals,final Map<Double,String> dangerLiterals,final String[] lineStartTexts,final String[] respawnTexts,final String[] carryTexts,final String[] carryNothingTexts,final String[] locationTexts,final String[] locationUnknownTexts){  this.probabilityLiterals=probabilityLiterals;  this.amountLiterals=amountLiterals;  this.dangerLiterals=dangerLiterals;  this.lineStartTexts=lineStartTexts.clone();  this.respawnTexts=respawnTexts.clone();  this.carryTexts=carryTexts.clone();  this.carryNothingTexts=carryNothingTexts.clone();  this.locationTexts=locationTexts.clone();  this.locationUnknownTexts=locationUnknownTexts.clone();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void cancelAllRequestInQueueByTag(Object tag){  if (queue != null) {    queue.cancelAll(tag);  }}  }
class C{  Map<Integer,Class<?>> types(){  return reader.getMap(TYPES,null,null);}  }
class C{  public void addConnectionOptions(MqttConnectOptions connectOptions){  conOpt=connectOptions;}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] vectorFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  ShapeType shapeType=ShapeType.POINT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    vectorFiles=inputFilesString.split(";");    int numVectorFiles=vectorFiles.length;    long numPointsInFile=0;    for (int j=0; j < numVectorFiles; j++) {      String fileName=vectorFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      long fileLength=file.length();      if (fileLength > Integer.MAX_VALUE) {        showFeedback("File is too large!");      }      buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      FileChannel inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      buf.order(ByteOrder.LITTLE_ENDIAN);      buf.rewind();      minValue=buf.getFloat(0);      maxValue=buf.getFloat(4);      north=Math.max(buf.getDouble(8),buf.getDouble(16));      south=Math.min(buf.getDouble(8),buf.getDouble(16));      east=Math.max(buf.getDouble(24),buf.getDouble(32));      west=Math.min(buf.getDouble(24),buf.getDouble(32));      loc=40;      do {        numVertices=buf.getInt(loc);        featureValue=buf.getFloat(loc + 4);        if (numVertices == 1) {          shapeType=ShapeType.POINT;        } else {          shapeType=ShapeType.POLYLINE;        }        break;      } while (loc < fileLength);      String outputFile=fileName.replace(".vtr",".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType);      DBFField fields[]=new DBFField[2];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("VALUE");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      String DBFName=output.getDatabaseFile();      DBFWriter writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      progress=(int)((j + 1) * 100d / numVectorFiles);      updateProgress("Loop " + (j + 1) + " of "+ numVectorFiles+ ":",progress);      buf.rewind();      loc=40;      if (shapeType == ShapeType.POINT) {        do {          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          x=buf.getFloat(loc + 8) + west;          y=buf.getFloat(loc + 12) + south;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      } else {        ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();        int[] parts={0};        do {          pnts.clear();          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          int startingByte=loc + 8;          for (a=0; a < numVertices; a++) {            x=buf.getFloat(startingByte + a * 8) + west;            y=buf.getFloat(startingByte + a * 8 + 4) + south;            pnts.add(new ShapefilePoint(x,y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      }      output.write();      writer.write();    }    returnData(vectorFiles[0].replace(".vtr",".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void clear(){  internalMap.clear();}  }
class C{  private void statsClose(){  this.stats.close();  if (this.directories != null) {    for (int i=0; i < this.directories.length; i++) {      this.directories[i].close();    }  }}  }
class C{  private void executeGetTaint(Stmt stmt,InvokeExpr invokeExpr,State state){  Block block=this.superControlFlowGraph.unitToBlock.get(stmt);  Body body=block.getBody();  SootMethod method=body.getMethod();  if (stmt instanceof AssignStmt) {    Local lLocal=(Local)((AssignStmt)stmt).getLeftOp();    Local baseLocal=(Local)((VirtualInvokeExpr)invokeExpr).getBase();    Set<MethodOrMethodContext> methodContexts=PTABridge.v().getMethodContexts(method);    for (    MethodOrMethodContext methodContext : methodContexts) {      Context context=methodContext.context();      if (ignoreContext(context)) {        continue;      }      HashSet<InfoValue> values=new HashSet<InfoValue>();      Set<IAllocNode> allocNodes=(Set<IAllocNode>)PTABridge.v().getPTSet(baseLocal,context);      for (      IAllocNode allocNode : allocNodes) {        ImmutableSet<InfoValue> vs=state.instances.get(allocNode,this.objectUtils.taint);        values.addAll(vs);      }      state.locals.putW(context,lLocal,values);    }  }}  }
class C{  public static GaussianPower serializableInstance(){  return new GaussianPower(2);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  KeyDeclaration kd=new KeyDeclaration(handler.getStylesheet(),handler.nextUid());  kd.setDOMBackPointer(handler.getOriginatingNode());  kd.setLocaterInfo(handler.getLocator());  setPropertiesFromAttributes(handler,rawName,attributes,kd);  handler.getStylesheet().setKey(kd);}  }
class C{  public boolean isIncludeBody(){  return parseBoolean(getFieldValue(SubscribeOptionFields.include_body));}  }
class C{  public MultilabelResult(int[][] goldstandard,double[][] predictions,String bipartitionThreshold) throws TextClassificationException {  this.actuals=goldstandard;  this.predictions=predictions;  try {    this.bipartitionThreshold=Double.parseDouble(bipartitionThreshold);  } catch (  NumberFormatException e) {    throw new TextClassificationException("Currenty, only one global bipartition threshold value is supported. Please set a double as threshold.");  }}  }
class C{  public static void drawStringUnderlineCharAt(Graphics g,String text,int underlinedIndex,int x,int y){  SwingUtilities2.drawStringUnderlineCharAt(null,g,text,underlinedIndex,x,y);}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  private boolean tryUnregisterFromContext(){  assert !isRunning.get();  if (lock.tryLock()) {    try {      unregisterFromContext();    }  finally {      lock.unlock();    }    return true;  }  return false;}  }
class C{  static double sin_roquen_newk(double v){  double i=java.lang.Math.rint(v * PI_INV);  double x=v - i * Math.PI;  double qs=1 - 2 * ((int)i & 1);  double x2=x * x;  double r;  x=qs * x;  r=k7;  r=r * x2 + k6;  r=r * x2 + k5;  r=r * x2 + k4;  r=r * x2 + k3;  r=r * x2 + k2;  r=r * x2 + k1;  return x + x * x2 * r;}  }
class C{  public boolean removeFirst(K obj){  int p=readPos;  int idx=getIndex(p);  if (buffer[idx] != obj) {    return false;  }  buffer[idx]=null;  readPos=p + 1;  return true;}  }
class C{  public void createUI(){  if (uiCreated)   return;  uiCreated=true;  Columns columns=new Columns();  grid.appendChild(columns);  Column col=new Column();  col.setWidth("14%");  columns.appendChild(col);  col=new Column();  col.setWidth("35%");  columns.appendChild(col);  col=new Column();  col.setWidth("14%");  columns.appendChild(col);  col=new Column();  col.setWidth("35%");  columns.appendChild(col);  col=new Column();  col.setWidth("2%");  columns.appendChild(col);  Rows rows=grid.newRows();  GridField fields[]=gridTab.getFields();  org.zkoss.zul.Row row=new Row();  rows.appendChild(row);  String currentFieldGroup=null;  for (int i=0; i < fields.length; i++) {    GridField field=fields[i];    if (field.isDisplayed()) {      if (field.getIncluded_Tab_ID() > 0) {        if (row.getChildren().size() == 2) {          row.appendChild(createSpacer());          row.appendChild(createSpacer());          row.appendChild(createSpacer());          rows.appendChild(row);          if (rowList != null)           rowList.add(row);        } else         if (row.getChildren().size() > 0) {          rows.appendChild(row);          if (rowList != null)           rowList.add(row);        }        if (currentGroup != null) {          row=new Groupfoot();          rows.appendChild(row);          currentGroup=null;          currentFieldGroup=null;        }        row=new Row();        row.setSpans("5");        row.appendChild(new Separator());        rows.appendChild(row);        row=new Group();        row.setSpans("2,3");        rows.appendChild(row);        includedTab.put(field.getIncluded_Tab_ID(),(Group)row);        org.zkoss.zul.Div div=new Div();        div.setWidth("100%");        row=new org.adempiere.webui.component.Row();        row.setSpans("5");        row.appendChild(div);        rows.appendChild(row);        horizontalIncludedTab.put(field.getIncluded_Tab_ID(),div);        row=new Groupfoot();        rows.appendChild(row);        includedTabFooter.put(field.getIncluded_Tab_ID(),(Groupfoot)row);        for (        EmbeddedPanel ep : includedPanel) {          if (ep.adTabId == field.getIncluded_Tab_ID()) {            ep.group=includedTab.get(ep.adTabId);            createEmbeddedPanelUI(ep);            ((ADTabPanel)ep.tabPanel).autoResize();            break;          }        }        for (        HorizontalEmbeddedPanel ep : horizontalIncludedPanel) {          if (ep.adTabId == field.getIncluded_Tab_ID()) {            ep.divComponent=horizontalIncludedTab.get(ep.adTabId);            createHorizontalEmbeddedPanelUI(ep);            ((ADTabPanel)ep.tabPanel).autoResize();            break;          }        }        row=new Row();        continue;      }      String fieldGroup=field.getFieldGroup();      if (fieldGroup != null && fieldGroup.trim().length() > 0) {        if (!fieldGroup.equals(currentFieldGroup)) {          currentFieldGroup=fieldGroup;          if (row.getChildren().size() == 2) {            row.appendChild(createSpacer());            row.appendChild(createSpacer());            row.appendChild(createSpacer());            rows.appendChild(row);            if (rowList != null)             rowList.add(row);            row=new Row();          } else           if (row.getChildren().size() > 0) {            rows.appendChild(row);            if (rowList != null)             rowList.add(row);            row=new Row();          }          List<org.zkoss.zul.Row> headerRows=new ArrayList<org.zkoss.zul.Row>();          fieldGroupHeaders.put(fieldGroup,headerRows);          row.setSpans("5");          row.appendChild(new Separator());          rows.appendChild(row);          headerRows.add(row);          rowList=new ArrayList<org.zkoss.zul.Row>();          fieldGroupContents.put(fieldGroup,rowList);          if (X_AD_FieldGroup.FIELDGROUPTYPE_Label.equals(field.getFieldGroupType())) {            row=new Row();            row.setSpans("4");            Label groupLabel=new Label(fieldGroup);            row.appendChild(groupLabel);            row.appendChild(createSpacer());            rows.appendChild(row);            headerRows.add(row);            row=new Row();            row.setSpans("4");            Separator separator=new Separator();            separator.setBar(true);            row.appendChild(separator);            row.appendChild(createSpacer());            rows.appendChild(row);            headerRows.add(row);          } else {            row=new Group(fieldGroup);            if (X_AD_FieldGroup.FIELDGROUPTYPE_Tab.equals(field.getFieldGroupType()) || field.getIsCollapsedByDefault()) {              ((Group)row).setOpen(false);            }            currentGroup=(Group)row;            rows.appendChild(row);            headerRows.add(row);          }          row=new Row();        }      }      if (!field.isSameLine() || field.isLongField()) {        if (row.getChildren().size() > 0) {          if (row.getChildren().size() == 2) {            row.appendChild(createSpacer());            row.appendChild(createSpacer());            row.appendChild(createSpacer());          }{            row.appendChild(createSpacer());          }          rows.appendChild(row);          if (rowList != null)           rowList.add(row);          row=new Row();        }      } else       if (row.getChildren().size() == 4) {        row.appendChild(createSpacer());        rows.appendChild(row);        if (rowList != null)         rowList.add(row);        row=new Row();      }      WEditor editor=WebEditorFactory.getEditor(gridTab,field,false);      if (editor != null) {        editor.setGridTab(this.getGridTab());        editor.setADTabPanel(this);        field.addPropertyChangeListener(editor);        editors.add(editor);        editorIds.add(editor.getComponent().getUuid());        if (field.isFieldOnly()) {          row.appendChild(createSpacer());        } else {          Div div=new Div();          div.setSclass("field-label");          Label label=editor.getLabel();          div.appendChild(label);          if (label.getDecorator() != null)           div.appendChild(label.getDecorator());          row.appendChild(div);        }        row.appendChild(editor.getComponent());        if (field.isLongField()) {          row.setSpans("1,3,1");          row.appendChild(createSpacer());          rows.appendChild(row);          if (rowList != null)           rowList.add(row);          row=new Row();        }        if (editor instanceof WButtonEditor) {          if (windowPanel != null)           ((WButtonEditor)editor).addActionListener(windowPanel);        } else {          editor.addValueChangeListener(dataBinder);        }        editor.fillHorizontal();        WEditorPopupMenu popupMenu=editor.getPopupMenu();        if (popupMenu != null) {          popupMenu.addMenuListener((ContextMenuListener)editor);          this.appendChild(popupMenu);          if (!field.isFieldOnly()) {            Label label=editor.getLabel();            if (popupMenu.isZoomEnabled() && editor instanceof IZoomableEditor) {              label.setStyle("cursor: pointer; text-decoration: underline;");              label.addEventListener(Events.ON_CLICK,new ZoomListener((IZoomableEditor)editor));            }            label.setContext(popupMenu.getId());          }        }      } else       if (field.isHeading()) {        Label label=new Label(field.getHeader());        Div div=new Div();        div.setAlign("center");        row.appendChild(createSpacer());        div.appendChild(label);        row.appendChild(div);      }    }  }  if (row.getChildren().size() > 0) {    if (row.getChildren().size() == 2) {      row.appendChild(createSpacer());      row.appendChild(createSpacer());      row.appendChild(createSpacer());    }    rows.appendChild(row);    if (rowList != null)     rowList.add(row);  }  if (gridTab.isTreeTab() && treePanel != null) {    int AD_Tree_ID=MTree.getDefaultAD_Tree_ID(Env.getAD_Client_ID(Env.getCtx()),gridTab.getKeyColumnName());    treePanel.initTree(AD_Tree_ID,windowNo);  }  if (!gridTab.isSingleRow() && !isGridView())   switchRowPresentation();}  }
class C{  public boolean exists(String path){  try {    ZipEntry entry=getZipEntry(path);    return entry != null;  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }  return false;}  }
class C{  public MeekRulesPattern(){}  }
class C{  public Set<String> entrySet(){  HashSet<String> set=new HashSet<String>(m_values);  return set;}  }
class C{  @Override public ServicesBuilderImpl autoServices(boolean isAutoServices){  _isAutoServices=isAutoServices;  return this;}  }
class C{  public boolean isMember(Principal p){  if ((p.hashCode() & super.hashCode()) == p.hashCode())   return true; else   return false;}  }
class C{  public static Integer createServerCacheTwo(Integer maxThreads) throws Exception {  new DataSerializerPropogationDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setMirrorType(MirrorType.KEYS_VALUES);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  CacheServer server1=cache.addCacheServer();  server1.setPort(port);  server1.setMaxThreads(maxThreads.intValue());  server1.setNotifyBySubscription(true);  server1.start();  return new Integer(port);}  }
class C{  private void addResources(String containerId,LocalConfiguration configuration,CargoProject project) throws MojoExecutionException {  for (int i=0; i < getResources().length; i++) {    configuration.addResource(getResources()[i].createResource(containerId,project));  }}  }
class C{  @Interruptible public void recordJSRSubroutineMap(int byteindex,byte[] currReferenceMap,int BBLastPtr,int returnAddrIndex,boolean replacemap){  int mapNum=0;  int unusualMapIndex=0;  int internalReturnIndex;  UnusualMaps jsrSiteMap;  if (replacemap) {    jsrSiteMap=null;    findJSRSiteMap:     for (mapNum=0; mapNum < mapCount; mapNum++) {      if (MCSites[mapNum] == byteindex) {        unusualMapIndex=JSR_INDEX_MASK & referenceMaps[mapNum * bytesPerMap()];        internalReturnIndex=returnAddrIndex - 1;        if (unusualMapIndex == JSR_INDEX_MASK) {          for (unusualMapIndex=JSR_INDEX_MASK; unusualMapIndex < jsrInfo.numberUnusualMaps; unusualMapIndex++) {            if (jsrInfo.unusualMaps[unusualMapIndex].getReturnAddressIndex() == internalReturnIndex) {              jsrSiteMap=jsrInfo.unusualMaps[unusualMapIndex];              break findJSRSiteMap;            }          }          VM.sysFail(" can't find unusual map !!!!!!! - should never occur");        } else {          jsrSiteMap=jsrInfo.unusualMaps[unusualMapIndex];          break;        }      }    }  } else {    mapNum=mapCount++;    MCSites[mapNum]=byteindex;    jsrSiteMap=new UnusualMaps();    unusualMapIndex=addUnusualMap(jsrSiteMap);    jsrSiteMap.setNormalMapIndex(mapNum);    if (unusualMapIndex > JSR_INDEX_MASK) {      unusualMapIndex=JSR_INDEX_MASK;    }    referenceMaps[mapNum * bytesPerMap()]=(byte)((byte)unusualMapIndex | JSR_MASK);    internalReturnIndex=returnAddrIndex - 1 + 2;    jsrSiteMap.setReturnAddressIndex(internalReturnIndex);    if (VM.TraceStkMaps) {      VM.sysWrite("ReferenceMaps-recordJSRSubroutineMap- input map = ");      for (int i=0; i < BBLastPtr + 1; i++) {        VM.sysWrite(currReferenceMap[i]);      }      VM.sysWrite("\n");      VM.sysWrite("ReferenceMaps-recordJSRSubroutineMap- mapNum = ");      VM.sysWrite(mapNum);      VM.sysWrite(" - byteindex = ");      VM.sysWrite(byteindex);      VM.sysWrite(" - return address index = ");      VM.sysWrite(internalReturnIndex);      VM.sysWrite(" - reference map byte = ");      VM.sysWrite(referenceMaps[mapNum * bytesPerMap()]);      VM.sysWrite("\n");    }  }  int refindex=scanByteArray(currReferenceMap,BBLastPtr,BuildReferenceMaps.SET_TO_REFERENCE,jsrSiteMap.getReferenceMapIndex(),true);  jsrSiteMap.setReferenceMapIndex(refindex);  if (VM.TraceStkMaps) {    VM.sysWrite("                 - reference map index = ");    VM.sysWrite(refindex);    VM.sysWrite(" - reference map  = ");    for (int i=refindex; i < refindex + bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[i]);    }    VM.sysWrite("\n");  }  int nonrefindex=scanByteArray(currReferenceMap,BBLastPtr,BuildReferenceMaps.SET_TO_NONREFERENCE,jsrSiteMap.getNonReferenceMapIndex(),true);  jsrSiteMap.setNonReferenceMapIndex(nonrefindex);  if (VM.TraceStkMaps) {    VM.sysWrite("                 - NONreference map index = ");    VM.sysWrite(nonrefindex);    VM.sysWrite(" - NON reference map  = ");    for (int i=nonrefindex; i < nonrefindex + bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[i]);    }    VM.sysWrite("\n");  }  int addrindex=scanByteArray(currReferenceMap,BBLastPtr,BuildReferenceMaps.RETURN_ADDRESS,jsrSiteMap.getReturnAddressMapIndex(),false);  jsrSiteMap.setReturnAddressMapIndex(addrindex);  if (VM.TraceStkMaps) {    VM.sysWrite("                 - returnAddress map index = ");    VM.sysWrite(addrindex);    VM.sysWrite(" - return Address map  = ");    for (int i=addrindex; i < addrindex + bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[i]);    }    VM.sysWrite("\n");  }  if (VM.TraceStkMaps) {    VM.sysWrite("ReferenceMaps-recordJSRSubroutineMap- unusualmap index = ");    VM.sysWrite(unusualMapIndex);    VM.sysWrite("\n");  }  if (VM.ReferenceMapsStatistics) {    if (!replacemap) {    }  }}  }
class C{  public static synchronized String format(String pattern,Date date){  Object obj=data.get(pattern);  if (obj != null) {    return ((SimpleDateFormat)obj).format(date);  }  SimpleDateFormat sdf=new SimpleDateFormat(pattern);  data.put(pattern,sdf);  return sdf.format(date);}  }
class C{  public Object clone(){  Poisson copy=(Poisson)super.clone();  if (this.pp != null)   copy.pp=(double[])this.pp.clone();  return copy;}  }
class C{  public static int computeLpcCoefs(float autoc[],int maxOrder,float lpc[],int lpcStride,boolean fail,boolean normalize){  float err=0f;  int autocOffset=0;  int lpcOffset=0;  int lpcLast=lpcOffset;  if (!(normalize || !fail)) {    log.error(String.format("computeLpcCoefs invalid parameters"));  }  if (normalize) {    err=autoc[autocOffset++];  }  if (fail && (autoc[autocOffset + maxOrder - 1] == 0 || err <= 0f)) {    return -1;  }  for (int i=0; i < maxOrder; i++) {    float r=-autoc[autocOffset + i];    if (normalize) {      for (int j=0; j < i; j++) {        r-=lpc[lpcLast + j] * autoc[autocOffset + i - j - 1];      }      r/=err;      err*=1f - (r * r);    }    lpc[lpcOffset + i]=r;    for (int j=0; j < ((i + 1) >> 1); j++) {      float f=lpc[lpcLast + j];      float b=lpc[lpcLast + i - 1 - j];      lpc[lpcOffset + j]=f + r * b;      lpc[lpcOffset + i - 1 - j]=b + r * f;    }    if (fail && err < 0) {      return -1;    }    lpcLast=lpcOffset;    lpcOffset+=lpcStride;  }  return 0;}  }
class C{  public static long hexToLong(final String src,final int srcPos,final long dstInit,final int dstPos,final int nHex){  if (0 == nHex) {    return dstInit;  }  if ((nHex - 1) * 4 + dstPos >= 64) {    throw new IllegalArgumentException("(nHexs-1)*4+dstPos is greather or equal to than 64");  }  long out=dstInit;  int shift=0;  for (int i=0; i < nHex; i++) {    shift=i * 4 + dstPos;    final long bits=(0xfL & hexDigitToInt(src.charAt(i + srcPos))) << shift;    final long mask=0xfL << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  @Override public void put(String key,WeatherData obj){  putImpl(key,obj,mDefaultTimeout);}  }
class C{  public static void gpCompare(AArch64MacroAssembler masm,Value x,Value y){  final int size=x.getPlatformKind().getSizeInBytes() * Byte.SIZE;  if (isRegister(y)) {    masm.cmp(size,asRegister(x),asRegister(y));  } else {    JavaConstant constant=asJavaConstant(y);    if (constant.isDefaultForKind()) {      masm.cmp(size,asRegister(x),0);    } else {      final long longValue=constant.asLong();      assert NumUtil.isInt(longValue);      int maskedValue;switch (constant.getJavaKind()) {case Boolean:case Byte:        maskedValue=(int)(longValue & 0xFF);      break;case Char:case Short:    maskedValue=(int)(longValue & 0xFFFF);  break;case Int:case Long:maskedValue=(int)longValue;break;default :throw GraalError.shouldNotReachHere();}masm.cmp(size,asRegister(x),maskedValue);}}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  protected TSDBEntity(){}  }
class C{  public void mark(long n){  tickIfNecessary();  count.add(n);  m1Rate.update(n);}  }
class C{  public final Observable<Intent> onOpenDetails(){  return mOnOpenDetailsSubject.asObservable();}  }
class C{  public DistractableAdapter(){  this.isDistracted=false;}  }
class C{  public CSSElementSelector(String uri,String name){  super(uri,name);}  }
class C{  private void horizontallyFromSrcToWork(BufferedImage srcImg,byte[][] workPixels,int start,int delta){  if (nrChannels == 1) {    horizontallyFromSrcToWorkGray(srcImg,workPixels,start,delta);    return;  }  final int[] tempPixels=new int[srcWidth];  final byte[] srcPixels=new byte[srcWidth * nrChannels];  final boolean useChannel3=nrChannels > 3;  for (int k=start; k < srcHeight; k=k + delta) {    ImageUtils.getPixelsBGR(srcImg,k,srcWidth,srcPixels,tempPixels);    for (int i=dstWidth - 1; i >= 0; i--) {      int sampleLocation=i * nrChannels;      final int max=horizontalSubsamplingData.arrN[i];      float sample0=0.0f;      float sample1=0.0f;      float sample2=0.0f;      float sample3=0.0f;      int index=i * horizontalSubsamplingData.numContributors;      for (int j=max - 1; j >= 0; j--) {        float arrWeight=horizontalSubsamplingData.arrWeight[index];        int pixelIndex=horizontalSubsamplingData.arrPixel[index] * nrChannels;        sample0+=(srcPixels[pixelIndex] & 0xff) * arrWeight;        sample1+=(srcPixels[pixelIndex + 1] & 0xff) * arrWeight;        sample2+=(srcPixels[pixelIndex + 2] & 0xff) * arrWeight;        if (useChannel3) {          sample3+=(srcPixels[pixelIndex + 3] & 0xff) * arrWeight;        }        index++;      }      workPixels[k][sampleLocation]=toByte(sample0);      workPixels[k][sampleLocation + 1]=toByte(sample1);      workPixels[k][sampleLocation + 2]=toByte(sample2);      if (useChannel3) {        workPixels[k][sampleLocation + 3]=toByte(sample3);      }    }    processedItems++;    if (start == 0) {      setProgress();    }  }}  }
class C{  public boolean visit(CastExpression node){  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public ShortArrayCodeInput(short[] array){  if (array == null) {    throw new NullPointerException("array == null");  }  this.array=array;}  }
class C{  public HttpMeta(){  this.httpMethod=null;  this.requestUrlPostfix=null;  this.entityBody=null;  this.requestPort=null;  this.parallecHeader=null;  this.httpPollerProcessor=null;  this.isPollable=false;  this.asyncHttpClient=null;  this.responseHeaderMeta=null;}  }
class C{  public boolean closed(GridCacheContext ctx){  return !ctxMap.containsKey(ctx.cacheId());}  }
class C{  public boolean visit(SynchronizedStatement node){  return true;}  }
class C{  public LongHashSet(final int size){  this(size,DEFAULT_FILLFACTOR);}  }
class C{  public OptionSet clearETags(){  getETags().clear();  return this;}  }
class C{  void composeTemplates(ElemTemplateElement templ) throws TransformerException {  templ.compose(this);  for (ElemTemplateElement child=templ.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {    composeTemplates(child);  }  templ.endCompose(this);}  }
class C{  private static void prepareRedis(BenchmarkConfig benchmarkConfig,EventGeneratorSource eventGenerator){  RedisHelper redisHelper=new RedisHelper(benchmarkConfig);  redisHelper.prepareRedis(eventGenerator.getCampaigns());  redisHelper.writeCampaignFile(eventGenerator.getCampaigns());}  }
class C{  @EventHandler public void onQuit(PlayerQuitEvent event){  nametagManager.reset(event.getPlayer().getName());}  }
class C{  public LocationConfiguration useOnlyGPServices(boolean onlyGPServices){  this.useOnlyGPServices=onlyGPServices;  return this;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  double transX1=domainAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double transY1=rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);  State s=(State)state;  if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {    float x=(float)transX1;    float y=(float)transY1;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      x=(float)transY1;      y=(float)transX1;    }    if (s.lastPointGood) {      if ((Math.abs(x - s.lastX) > s.dX)) {        s.seriesPath.lineTo(x,y);        if (s.lowY < s.highY) {          s.intervalPath.moveTo((float)s.lastX,(float)s.lowY);          s.intervalPath.lineTo((float)s.lastX,(float)s.highY);        }        s.lastX=x;        s.openY=y;        s.highY=y;        s.lowY=y;        s.closeY=y;      } else {        s.highY=Math.max(s.highY,y);        s.lowY=Math.min(s.lowY,y);        s.closeY=y;      }    } else {      s.seriesPath.moveTo(x,y);      s.lastX=x;      s.openY=y;      s.highY=y;      s.lowY=y;      s.closeY=y;    }    s.lastPointGood=true;  } else {    s.lastPointGood=false;  }  if (item == s.getLastItemIndex()) {    PathIterator pi=s.seriesPath.getPathIterator(null);    int count=0;    while (!pi.isDone()) {      count++;      pi.next();    }    g2.setStroke(getItemStroke(series,item));    g2.setPaint(getItemPaint(series,item));    g2.draw(s.seriesPath);    g2.draw(s.intervalPath);  }}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashMapEntry<K,V> e=oldTable[i]; e != null; ) {        HashMapEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashMapEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  public static byte[] toByteArray(final URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  static protected void assertField(final String header,final String[] fields,final int field,final String expected){  if (header == null)   throw new IllegalArgumentException();  if (fields == null)   throw new IllegalArgumentException();  if (expected == null)   throw new IllegalArgumentException();  if (field < 0)   throw new IllegalArgumentException();  if (field >= fields.length)   throw new AssertionFailedError("There are only " + fields.length + " fields, but field="+ field+ "\n"+ header);  if (!expected.equals(fields[field])) {    throw new AssertionFailedError("Expected field=" + field + " to be ["+ expected+ "], actual="+ fields[field]+ "\n"+ header);  }}  }
class C{  public void mousePressed(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  public CharMemberValue(ConstPool cp){  super('C',cp);  setValue('\0');}  }
class C{  public TaxesException(String msg){  super(msg);}  }
class C{  public T orElseGet(Supplier<? extends T> supplier){  return value != null ? value : supplier.get();}  }
class C{  public DefaultUserProject(Codenvy codenvy,UserProjectReference projectReference,Project project,UserWorkspace workspace){  this.codenvy=codenvy;  this.projectReference=projectReference;  this.project=project;  this.workspace=workspace;  String fullID=workspace.id() + project.name();  this.sha1Id=sha1("p",fullID);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    mMemoryCache.put(data,value);  }synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      final String key=hashKeyForDisk(data);      OutputStream out=null;      try {        DiskLruCache.Snapshot snapshot=mDiskLruCache.get(key);        if (snapshot == null) {          final DiskLruCache.Editor editor=mDiskLruCache.edit(key);          if (editor != null) {            out=editor.newOutputStream(DISK_CACHE_INDEX);            value.getBitmap().compress(mCacheParams.compressFormat,mCacheParams.compressQuality,out);            editor.commit();            out.close();          }        } else {          snapshot.getInputStream(DISK_CACHE_INDEX).close();        }      } catch (      final IOException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }catch (      Exception e) {        Log.e(TAG,"addBitmapToCache - " + e);      } finally {        try {          if (out != null) {            out.close();          }        } catch (        IOException e) {        }      }    }  }}  }
class C{  @Override public void layout(){  changingDepth++;  for (  Figure child : getChildren()) {    if (child instanceof CompositeFigure) {      CompositeFigure cf=(CompositeFigure)child;      cf.layout();    }  }  changingDepth--;  if (getLayouter() != null) {    Rectangle2D.Double bounds=getBounds();    Point2D.Double p=new Point2D.Double(bounds.x,bounds.y);    Rectangle2D.Double r=getLayouter().layout(this,p,p);    setBounds(new Point2D.Double(r.x,r.y),new Point2D.Double(r.x + r.width,r.y + r.height));    invalidate();  }}  }
class C{  private static String arrayToString(short[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  @Override public E push(E item){  top=new Node<>(item,top);  return item;}  }
class C{  public static void shutdownForcely(int status) throws Exception {  Class z=Class.forName("java.lang.Shutdown");  Method exit=z.getDeclaredMethod("exit",int.class);  exit.setAccessible(true);  exit.invoke(z,status);}  }
class C{  public void addSelectionListener(final NetworkSelectionListener l){  selectionModel.addSelectionListener(l);}  }
class C{  public CacheSet query(Predicate selector){  checkNotNull(selector);  LinkedList<Object> setItems=new LinkedList<>();  CollectionUtils.select(items,selector,setItems);  return new CacheSet(setItems);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public ParallelTaskBuilder prepareHttpPut(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.PUT);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  public boolean isDurableWriteEnabled(){  return getBoolean(SERVER_DURABLE_WRITE_ENABLED,SERVER_DURABLE_WRITE_ENABLED_DEFAULT);}  }
class C{  public static void register(){}  }
class C{  public String explainRestriction(Resource type){  StringBuilder sb=new StringBuilder();  if (classes.containsKey(type)) {    OwlClass pr=classes.get(type);    sb.append("owl:Restriction");    for (    URI p : pr.getOnProperty()) {      sb.append(" (owl:onProperty ").append(p.toString()).append(")");    }    for (    Value v : pr.hasValue()) {      sb.append(" (owl:hasValue ").append(v.toString()).append(")");    }    for (    Resource c : pr.someValuesFrom()) {      sb.append(" (owl:someValuesFrom ").append(c.toString()).append(")");    }    for (    Resource c : pr.allValuesFrom()) {      sb.append(" (owl:allValuesFrom ").append(c.toString()).append(")");    }    int mc=pr.getMaxCardinality();    int mqc=pr.getMaxQualifiedCardinality();    if (mc >= 0) {      sb.append(" (owl:maxCardinality ").append(mc).append(")");    }    if (mqc >= 0) {      sb.append(" (owl:maxQualifiedCardinality ").append(mqc);    }    for (    Resource c : pr.onClass()) {      sb.append(" owl:onClass ").append(c.toString()).append(")");    }  }  return sb.toString();}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  private boolean isProductToBeUpdated(TechnicalProduct technicalProduct,Product product){  if (technicalProduct.getKey() == product.getTechnicalProduct().getKey() && product.getStatus() != ServiceStatus.DELETED && product.getOwningSubscription() == null) {    return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void startBackup(File targetDir,BackupInspector baselineInspector,RestoreScript restoreScript) throws IOException {  getDiskInitFile().setBackupThread(Thread.currentThread());  boolean done=false;  try {    for (; ; ) {      Oplog childOplog=persistentOplogs.getChild();      if (childOplog == null) {        this.diskStoreBackup=new DiskStoreBackup(new Oplog[0],targetDir);        break;      }      Object childLock=childOplog == null ? new Object() : childOplog.lock;      ;synchronized (childLock) {        if (persistentOplogs.getChild() != childOplog) {          continue;        }        if (logger.isDebugEnabled()) {          logger.debug("snapshotting oplogs for disk store {}",getName());        }        for (int i=0; i < directories.length; i++) {          File dir=getBackupDir(targetDir,i);          if (!FileUtil.mkdirs(dir)) {            throw new IOException("Could not create directory " + dir);          }          restoreScript.addFile(directories[i].getDir(),dir);        }        restoreScript.addExistenceTest(this.initFile.getIFFile());        Oplog[] allOplogs=null;        if (null != baselineInspector) {          Map<File,File> baselineCopyMap=new HashMap<File,File>();          allOplogs=filterBaselineOplogs(baselineInspector,baselineCopyMap);          restoreScript.addBaselineFiles(baselineCopyMap);        } else {          allOplogs=getAllOplogsForBackup();        }        this.diskStoreBackup=new DiskStoreBackup(allOplogs,targetDir);        File firstDir=getBackupDir(targetDir,infoFileDirIndex);        initFile.copyTo(firstDir);        persistentOplogs.forceRoll(null);        if (logger.isDebugEnabled()) {          logger.debug("done snaphotting for disk store {}",getName());        }        break;      }    }    done=true;  }  finally {    if (!done) {      clearBackup();    }  }}  }
class C{  public final String toString(){  if (this.initialized == false) {    return null;  }  return paramSpi.engineToString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public boolean isNetworkResourceManagementSupported(){  return networkResourceManagementSupported;}  }
class C{  public XBeeResponse parsePacket(){  Exception exception=null;  try {    int msbLength=this.read("Length MSB");    int lsbLength=this.read("Length LSB");    this.length=new XBeePacketLength(msbLength,lsbLength);    log.debug("packet length is " + String.format("[0x%03X]",length.getLength()));    intApiId=this.read("API ID");    this.apiId=ApiId.get(intApiId);    if (apiId == null) {      this.apiId=ApiId.UNKNOWN;    }    log.info("Handling ApiId: " + apiId);    for (    Integer handlerApiId : handlerMap.keySet()) {      if (intApiId == handlerApiId) {        log.debug("Found response handler for apiId [" + ByteUtils.toBase16(intApiId) + "]: "+ handlerMap.get(handlerApiId).getCanonicalName());        response=(XBeeResponse)handlerMap.get(handlerApiId).newInstance();        response.parse(this);        break;      }    }    if (response == null) {      log.info("Did not find a response handler for ApiId [" + ByteUtils.toBase16(intApiId) + "].  Returning GenericResponse");      response=new GenericResponse();      response.parse(this);    }    response.setChecksum(this.read("Checksum"));    if (!this.isDone()) {      throw new XBeeParseException("There are remaining bytes according to stated packet length but we have read all the bytes we thought were required for this packet (if that makes sense)");    }    response.finish();  } catch (  Exception e) {    log.error("Failed due to exception.  Returning ErrorResponse.  bytes read: " + ByteUtils.toBase16(rawBytes.getIntArray()),e);    exception=e;    response=new ErrorResponse();    ((ErrorResponse)response).setErrorMsg(exception.getMessage());    ((ErrorResponse)response).setException(e);  }  if (response != null) {    response.setLength(length);    response.setApiId(apiId);    response.setRawPacketBytes(rawBytes.getIntArray());  }  return response;}  }
class C{  public void signInPassword(){  String email=mEditTextEmailInput.getText().toString();  String password=mEditTextPasswordInput.getText().toString();  if (email.equals("")) {    mEditTextEmailInput.setError(getString(R.string.error_cannot_be_empty));    return;  }  if (password.equals("")) {    mEditTextPasswordInput.setError(getString(R.string.error_cannot_be_empty));    return;  }  mAuthProgressDialog.show();  mFirebaseRef.authWithPassword(email,password,new MyAuthResultHandler(Constants.PASSWORD_PROVIDER));}  }
class C{  public SessionIndexNotFoundException(){}  }
class C{  public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {  classPool=cp;  translator=t;  t.start(classPool);}  }
class C{  public FixedsizeForgetfulHashSet(int size,int initialCapacity){  map=new FixedsizeForgetfulHashMap<E,Object>(size,initialCapacity);}  }
class C{  Operation findBestArcToAdd(BayesNet bayesNet,Instances instances,Operation oBestOperation) throws Exception {  int nNrOfAtts=instances.numAttributes();  for (int iAttributeHead=0; iAttributeHead < nNrOfAtts; iAttributeHead++) {    if (bayesNet.getParentSet(iAttributeHead).getNrOfParents() < m_nMaxNrOfParents) {      for (int iAttributeTail=0; iAttributeTail < nNrOfAtts; iAttributeTail++) {        if (addArcMakesSense(bayesNet,instances,iAttributeHead,iAttributeTail)) {          Operation oOperation=new Operation(iAttributeTail,iAttributeHead,Operation.OPERATION_ADD);          double fScore=calcScoreWithExtraParent(oOperation.m_nHead,oOperation.m_nTail);          if (fScore > oBestOperation.m_fScore) {            if (isNotTabu(oOperation)) {              oBestOperation=oOperation;              oBestOperation.m_fScore=fScore;            }          }        }      }    }  }  return oBestOperation;}  }
class C{  @Override public void consumeItem(final DataCollectionJob job,final DistributedQueueItemProcessedCallback callback) throws Exception {  try {    if (!job.isActiveJob(_dbClient)) {      return;    }    if (job instanceof DataCollectionScanJob) {      triggerScanning((DataCollectionScanJob)job);    } else {      invokeJob(job);    }  } catch (  InternalException e) {    _logger.error(job.getType() + " job failed for {}---> ",job.systemString(),e);    try {      job.error(_dbClient,e);    } catch (    Exception ex) {      _logger.error("Failed to record status error for system : {}. Caused by: ",job.systemString(),ex);    }  }catch (  Exception e) {    _logger.error(job.getType() + " job failed for {}---> ",job.systemString(),e);    try {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      job.error(_dbClient,serviceError);    } catch (    Exception ex) {      _logger.error("Failed to record status error for system: {}. Caused by: ",job.systemString(),ex);    }  } finally {    try {      callback.itemProcessed();    } catch (    Exception e) {      _logger.warn("Queue Item removal failed :" + job.systemString());    }  }}  }
class C{  public static int LEW(byte[] arr,int off){  return arr[off + 3] << 24 & 0xff000000 | arr[off + 2] << 16 & 0xff0000 | arr[off + 1] << 8 & 0xff00 | arr[off] & 0xFF;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public ChannelAdapter(Context context){  super(context,null,0);  this.context=context;  mInflater=LayoutInflater.from(context);  final String alphabet=context.getString(R.string.alphabet);  mAlphabetIndexer=new AlphabetIndexer(null,1,alphabet);  highlightTextSpan=new TextAppearanceSpan(getActivity(),R.style.searchTextHiglight);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {      if (e.value == null) {        return true;      }    }    return false;  }  for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {    if (value.equals(e.value)) {      return true;    }  }  return false;}  }
class C{  public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  w.startElement(Namespaces.getAtomPubNs(),"control",null,null);  if (isDraft()) {    w.simpleElement(Namespaces.getAtomPubNs(),"draft",null,"yes");  }  generateExtensions(w,extProfile);  w.endElement();}  }
class C{  public void testPosNegFirstLonger(){  String numA="2837462783428374767845648748973847593874837948575684767";  String numB="-293478573489347658763745839457637";  String res="-2837462783428374767845615168483972194300564226167553532";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public ManageSieveException(Throwable cause){  super(cause);}  }
class C{  public boolean isCommitted(int logId,int pos){  if (logId != lastCommitLog) {    return lastCommitLog > logId;  }  return lastCommitPos >= pos;}  }
class C{  protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {  Thread.sleep(sleepMillis,sleepNanos);}  }
class C{  public void DbConnectionDialog(String url,String uname){  DbConnectionDialog(url,uname,true);}  }
class C{  private void requestFollowedStreams(){  if (client.settings.getBoolean("requestFollowedStreams") && client.settings.getBoolean("token_user")) {    client.api.getFollowedStreams(client.settings.getString("token"));  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static long encodePosition(int x,int y,int z){  return ((long)x << 38) | ((long)y << 26) | (z & 0x3FFFFFF);}  }
class C{  public void valueChanged(ListSelectionEvent e){  m_M_AttributeSetInstance_ID=-1;  m_M_AttributeSetInstanceName=null;  m_M_Locator_ID=0;  int row=m_table.getSelectedRow();  if (row > -1) {    Integer ID=m_table.getSelectedRowKey();    if (ID != null) {      m_M_AttributeSetInstance_ID=ID.intValue();      m_M_AttributeSetInstanceName=(String)m_table.getValueAt(row,1);      Object oo=m_table.getValueAt(row,5);      if (oo instanceof KeyNamePair) {        KeyNamePair pp=(KeyNamePair)oo;        m_M_Locator_ID=pp.getKey();      }    }  }  log.fine("M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID + " - "+ m_M_AttributeSetInstanceName+ "; M_Locator_ID="+ m_M_Locator_ID);  enableButtons();}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr){  this(context,attrs,defStyleAttr,0);}  }
class C{  @Override public void restoreEntity(BackupDataInputStream data){  if (!restoreSuccessful) {    return;  }  int dataSize=data.size();  if (mBuffer.length < dataSize) {    mBuffer=new byte[dataSize];  }  try {    int bytesRead=data.read(mBuffer,0,dataSize);    if (DEBUG)     Log.d(TAG,"read " + bytesRead + " of "+ dataSize+ " available");    String backupKey=data.getKey();    if (JOURNAL_KEY.equals(backupKey)) {      if (VERBOSE)       Log.v(TAG,"Journal entry restored");      if (!mKeys.isEmpty()) {        Log.wtf(TAG,keyToBackupKey(mKeys.get(0)) + " received after " + JOURNAL_KEY);        restoreSuccessful=false;        return;      }      Journal journal=new Journal();      MessageNano.mergeFrom(journal,readCheckedBytes(mBuffer,dataSize));      applyJournal(journal);      restoreSuccessful=false;      return;    }    if (!mExistingKeys.isEmpty() && !mExistingKeys.contains(backupKey)) {      if (DEBUG)       Log.e(TAG,"Ignoring key not present in the backup state " + backupKey);      return;    }    Key key=backupKeyToKey(backupKey);    mKeys.add(key);switch (key.type) {case Key.FAVORITE:      restoreFavorite(key,mBuffer,dataSize);    break;case Key.SCREEN:  restoreScreen(key,mBuffer,dataSize);break;case Key.ICON:restoreIcon(key,mBuffer,dataSize);break;case Key.WIDGET:restoreWidget(key,mBuffer,dataSize);break;default :Log.w(TAG,"unknown restore entity type: " + key.type);mKeys.remove(key);break;}} catch (IOException e) {Log.w(TAG,"ignoring unparsable backup entry",e);}}  }
class C{  protected void tearDown(){  objArray=null;  objArray2=null;  hm=null;}  }
class C{  protected void randomize(List<Neuron> layer){  for (  Neuron neuron : layer) {    neuron.clear();    for (    Synapse synapse : neuron.getFanIn()) {      synapse.setStrength(.1 * Math.random() - .05);    }    ((BiasedUpdateRule)neuron.getUpdateRule()).setBias(.1 * Math.random() - .05);  }  revalidateSynapseGroups();}  }
class C{  public Vector3 div(float value){  float d=1 / value;  return this.set(this.x * d,this.y * d,this.z * d);}  }
class C{  public StateMachineState(S id,StateMachine<S,E> submachine,PseudoState<S,E> pseudoState){  super(id,null,null,null,pseudoState,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public static void saveGraph(DirectedGraph<Integer,DefaultEdge> graph,File file) throws IOException {  SerializableDirectedGraph serialGraph=new SerializableDirectedGraph(graph);  FileOutputStream fos=null;  ObjectOutputStream out=null;  fos=new FileOutputStream(file);  out=new ObjectOutputStream(fos);  out.writeObject(serialGraph);  out.close();}  }
class C{  private void addRequestTagsForParentSpan(HttpServletRequest request,Span spanFromRequest){  if (spanFromRequest.getName().contains("parent")) {    addRequestTags(spanFromRequest,request);  }}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView handleAllException(Exception exception){  return new JsonError(exception).asModelAndView();}  }
class C{  private void request(){  if (isVisible() && stream != null && !stream.isEmpty()) {    loading=true;    if (type == Type.FOLLOWERS) {      api.getFollowers(stream);    } else     if (type == Type.SUBSCRIBERS) {      api.getSubscribers(stream);    }  }}  }
class C{  @Inline static void compilePutfieldBarrierInt(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.intFieldWriteBarrierMethod);}  }
class C{  public int countProcess(long groupId,String keywords){  return serviceProcessFinder.countProcess(groupId,keywords);}  }
class C{  final void appendOut(SpaceEffGraphEdge e){  nextOut=e;}  }
class C{  private boolean existsFdrs(String entidad) throws Exception {  ArchivesTable table=new ArchivesTable();  boolean exists=false;  String tblName;  int count;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    tblName=DaoUtil.getFdrHdrTblName(_tblPrefix);    count=DbSelectFns.selectCount(dbConn,tblName,null);    if (count > 0)     exists=true;    dbConn.open(DBSessionManager.getSession());  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return exists;}  }
class C{  public String name(){  return name;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public static MultiplexingDiscovery forServices(NetworkParameters params,long services){  List<PeerDiscovery> discoveries=Lists.newArrayList();  HttpDiscovery.Details[] httpSeeds=params.getHttpSeeds();  if (httpSeeds != null) {    OkHttpClient httpClient=new OkHttpClient();    for (    HttpDiscovery.Details httpSeed : httpSeeds)     discoveries.add(new HttpDiscovery(params,httpSeed,httpClient));  }  if (services == 0) {    String[] dnsSeeds=params.getDnsSeeds();    if (dnsSeeds != null)     for (    String dnsSeed : dnsSeeds)     discoveries.add(new DnsSeedDiscovery(params,dnsSeed));  }  return new MultiplexingDiscovery(params,discoveries);}  }
class C{  private boolean isDifferentTalkgroup(String talkgroup){  return talkgroup != null && mCurrentCallEvent != null && mCurrentCallEvent.getToID() != null && !mCurrentCallEvent.getToID().contentEquals(talkgroup);}  }
class C{  public void addAload(int n){  if (n < 4)   addOpcode(42 + n); else   if (n < 0x100) {    addOpcode(ALOAD);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ALOAD);    addIndex(n);  }}  }
class C{  public Script parse(final Reader reader,final String fileName) throws CompilationFailedException {  return parse(new GroovyCodeSource(reader,fileName,DEFAULT_CODE_BASE));}  }
class C{  public static void sort(Object[] a,Comparator comparator){  int n=a.length;  for (int i=0; i < n; i++) {    int min=i;    for (int j=i + 1; j < n; j++) {      if (less(comparator,a[j],a[min]))       min=j;    }    exch(a,i,min);    assert isSorted(a,comparator,0,i);  }  assert isSorted(a,comparator);}  }
class C{  public static void addCategory(LexiconCategory category){  categories.add(category);}  }
class C{  public CorePlusQueriesParser(String defaultField,Analyzer analyzer){  this(defaultField,analyzer,null);}  }
class C{  protected void installRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    if (component instanceof JComponent) {      ((JComponent)component).updateUI();      setBorderToRollover(component);    }  }}  }
class C{  public static void swipeFullRightAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By by,int waitTimeInSeconds,int pressInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(by);  WebElement element=augmentedFunctions.findElementPresentAfter(by,waitTimeInSeconds);  Dimension size=driver.manage().window().getSize();  int to=size.getWidth() * 85 / 100;  int from=size.getWidth() * 15 / 100;  int y=element.getLocation().getY() + element.getSize().getHeight() / 2;  driver.swipe(from,y,to,y,pressInMilliSeconds);}  }
class C{  public double tdx(final double x1,final double x2){  double width=this.width;  if (Math.abs(x1 - x2) <= width / 2)   return x1 - x2;  double dx=_stx(x1,width) - _stx(x2,width);  if (dx * 2 > width)   return dx - width;  if (dx * 2 < -width)   return dx + width;  return dx;}  }
class C{  private void wrap(int[] cellXY,BoundSize gapSize){  boolean flowx=lc.isFlowX();  cellXY[0]=flowx ? 0 : cellXY[0] + 1;  cellXY[1]=flowx ? cellXY[1] + 1 : 0;  if (gapSize != null) {    if (wrapGapMap == null)     wrapGapMap=new HashMap<Integer,BoundSize>(8);    wrapGapMap.put(cellXY[flowx ? 1 : 0],gapSize);  }  if (flowx) {    rowIndexes.add(cellXY[1]);  } else {    colIndexes.add(cellXY[0]);  }}  }
class C{  public void runGenerateBuilderActions(String expectedFile,String... filesToLoad){  configureSourceFiles(filesToLoad);  runIntention(new AddBuilderIntention(),expectedFile);  runAction(new GenerateAutoValueBuilderAction(),expectedFile);}  }
class C{  public static Properties fetchProperties(URL propsURL){  if (logger.isLoggable(Level.FINE)) {    logger.fine("checking (" + propsURL + ")");  }  Properties p=new Properties();  if (propsURL != null) {    try {      InputStream is=propsURL.openStream();      p.load(is);      is.close();    } catch (    IOException e) {      logger.warning("Exception reading map properties at " + propsURL + ": "+ e);    }  }  return p;}  }
class C{  @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null)   o=nullObject;  int hash=o.hashCode();  int index=(hash & 0x7FFFFFFF) % objects.length;  int offset=1;  while (objects[index] != null && !(objects[index].hashCode() == hash && objects[index].equals(o))) {    index=((index + offset) & 0x7FFFFFFF) % objects.length;    offset=offset * 2 + 1;    if (offset == -1)     offset=2;  }  if (objects[index] != null) {    objects[index]=(E)deletedObject;    modCount++;    elements--;    return true;  } else   return false;}  }
class C{  private void perform() throws OptimizingCompilerException {  if (loop == null) {    return;  }  try {    processHeader();    Enumeration<BasicBlock> loopBlocks=getBasicBlocks();    while (loopBlocks.hasMoreElements()) {      BasicBlock curLoopBB=loopBlocks.nextElement();      if (curLoopBB == header) {      } else {        processLoopBlock(curLoopBB);      }    }  } catch (  NonRegularLoopException e) {    if (DEBUG) {      VM.sysWrite(e.summary() + "\n");    }    initialIteratorValue=null;  }  if (DEBUG && (!isNonRegularLoop())) {    dump();  }}  }
class C{  public static MatPalette createFromTheme(Context context){  TypedArray attrs=context.getTheme().obtainStyledAttributes(R.styleable.GreenMatter);  int primary=attrs.getColor(R.styleable.GreenMatter_matColorPrimary,DEFAULT_COLOR);  int primaryDark=attrs.getColor(R.styleable.GreenMatter_matColorPrimaryDark,0);  int accent=attrs.getColor(R.styleable.GreenMatter_matColorAccent,DEFAULT_COLOR);  int controlNormal=attrs.getColor(R.styleable.GreenMatter_matColorControlNormal,DEFAULT_COLOR);  int controlActivated=attrs.getColor(R.styleable.GreenMatter_matColorControlActivated,DEFAULT_COLOR);  int controlHighlighted=attrs.getColor(R.styleable.GreenMatter_matColorControlHighlight,DEFAULT_COLOR);  int buttonNormal=attrs.getColor(R.styleable.GreenMatter_matColorButtonNormal,DEFAULT_COLOR);  int switchThumbNormal=attrs.getColor(R.styleable.GreenMatter_matColorSwitchThumbNormal,DEFAULT_COLOR);  int edgeEffect=attrs.getColor(R.styleable.GreenMatter_matColorEdgeEffect,DEFAULT_COLOR);  float disabledAlpha=attrs.getFloat(R.styleable.GreenMatter_android_disabledAlpha,DEFAULT_DISABLED_ALPHA);  attrs.recycle();  return new MatPalette(primary,primaryDark,accent,controlNormal,controlActivated,controlHighlighted,buttonNormal,switchThumbNormal,edgeEffect,disabledAlpha);}  }
class C{  private CompositeFilter makeArticleShowingFilter(){  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Article.ARTICLE_STATUS,FilterOperator.EQUAL,Article.ARTICLE_STATUS_C_VALID));  filters.add(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.NOT_EQUAL,Article.ARTICLE_TYPE_C_DISCUSSION));  return new CompositeFilter(CompositeFilterOperator.AND,filters);}  }
class C{  @ApiMethod(httpMethod="DELETE") public final void removeCheckIn(@Named("id") final Long id,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  CheckIn checkIn=findCheckIn(id);  if (checkIn == null) {    LOG.info("CheckIn " + id + " not found, skipping deletion.");    return;  }  ofy().delete().entity(checkIn).now();}  }
class C{  @SuppressWarnings("PrimitiveArrayArgumentToVariableArgMethod") private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODES.JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODES.JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public void print(){  print(rootNode,0);}  }
class C{  private void findStream(QueryKraken query,Object[] args,ResultStream<Cursor> result){  try {    TableKraken table=query.table();    TableKelp tableKelp=table.getTableKelp();    TablePod tablePod=table.getTablePod();    if (query.isStaticNode()) {      RowCursor cursor=tableKelp.cursor();      query.fillKey(cursor,args);      int hash=query.calculateHash(cursor);      if (tablePod.getNode(hash).isSelfCopy() || true) {        query.findStream(result,args);        return;      } else {        result.ok();        return;      }    }    query.findStream(result,args);  } catch (  Exception e) {    result.fail(e);  }}  }
class C{  private void findModeledMethods(){  markClinitsAsModeled();  for (  SootMethod method : all_sys_methods) {    if (method.isConcrete()) {      method.retrieveActiveBody();      if (!method.hasActiveBody()) {        logger.error("Modeled api method has no active body: {}",method);        droidsafe.main.Main.exit(1);      }    }    Classification c=Classification.NONE;    boolean verified=false;    boolean sink=false;    boolean source=false;    boolean sourceTaintArgs=false;    String category="";    for (    Tag tag : method.getTags()) {      if (tag instanceof VisibilityAnnotationTag) {        VisibilityAnnotationTag vat=(VisibilityAnnotationTag)tag;        for (        AnnotationTag at : vat.getAnnotations()) {          if (at.getType().contains("droidsafe/annotations/DSSafe")) {            c=Classification.SAFE;            category=getCategoryFromClassificationTag(at);            addSafeMethod(method);            logger.info("Found method with SAFE classification: {}",method);          } else           if (at.getType().contains("droidsafe/annotations/DSSpec")) {            category=getCategoryFromClassificationTag(at);            if ("ABSTRACT_METHOD".equals(category)) {              c=Classification.SAFE;              addSafeMethod(method);              logger.info("Found SPEC method with ABSTRACT, making SAFE: {}",method);            } else {              c=Classification.SPEC;              addSpecMethod(method);              logger.info("Found method with SPEC classification: {}",method);            }          } else           if (at.getType().contains("droidsafe/annotations/DSBan")) {            c=Classification.BAN;            category=getCategoryFromClassificationTag(at);            addBanMethod(method);            logger.info("Found method with BAN classification: {}",method);          } else           if (at.getType().contains("droidsafe/annotations/DSVerified")) {            verified=true;          } else           if (at.getType().contains("droidsafe/annotations/DSSourceTaintArgs")) {            sourceTaintArgs=true;            sourcesThatTaintArgs.add(method);            logger.info("Noting that source taints args: {}",method);          } else           if (at.getType().contains("droidsafe/annotations/DSSink")) {            logger.info("Found sink method: {}",method);            addSinkTag(method,at);            sink=true;          } else           if (at.getType().contains("droidsafe/annotations/DSSource")) {            logger.info("Found source method: {}",method);            addSourceTag(method,at);            source=true;          }        }      }    }    if ("IPC".equals(category)) {      ipcMethods.addMethod(method);      logger.info("Noting method as ipc: " + method);    }    if ("IPC_CALLBACK".equals(category)) {      ipcCallBackMethods.addMethod(method);      logger.info("Noting method as ipc callback: " + method);    }    if (sourceTaintArgs && !source) {      logger.error("Method that taints all args but is not a source: {}",method);    }    if (c != Classification.NONE && !category.isEmpty()) {      logger.info("Adding classification category for {}: {}",method,category);      classificationCat.put(method,category);    }    if (c == Classification.NONE) {      logger.info("Found method with no classification: {}",method);    }    if (verified) {      logger.info("Found verified method: {}",method);      api_modeled_methods.addMethod(method);      verified_methods.addMethod(method);    }  }}  }
class C{  private static void informListeners(){  Iterator<ActivityListener> it=listeners.iterator();  while (it.hasNext()) {    it.next().activity();    it.remove();  }}  }
class C{  public void scrollRectToVisible(Rectangle contentRect){  Component view=getView();  if (view == null) {    return;  } else {    if (!view.isValid()) {      validateView();    }    int dx, dy;    dx=positionAdjustment(getWidth(),contentRect.width,contentRect.x);    dy=positionAdjustment(getHeight(),contentRect.height,contentRect.y);    if (dx != 0 || dy != 0) {      Point viewPosition=getViewPosition();      Dimension viewSize=view.getSize();      int startX=viewPosition.x;      int startY=viewPosition.y;      Dimension extent=getExtentSize();      viewPosition.x-=dx;      viewPosition.y-=dy;      if (view.isValid()) {        if (getParent().getComponentOrientation().isLeftToRight()) {          if (viewPosition.x + extent.width > viewSize.width) {            viewPosition.x=Math.max(0,viewSize.width - extent.width);          } else           if (viewPosition.x < 0) {            viewPosition.x=0;          }        } else {          if (extent.width > viewSize.width) {            viewPosition.x=viewSize.width - extent.width;          } else {            viewPosition.x=Math.max(0,Math.min(viewSize.width - extent.width,viewPosition.x));          }        }        if (viewPosition.y + extent.height > viewSize.height) {          viewPosition.y=Math.max(0,viewSize.height - extent.height);        } else         if (viewPosition.y < 0) {          viewPosition.y=0;        }      }      if (viewPosition.x != startX || viewPosition.y != startY) {        setViewPosition(viewPosition);        scrollUnderway=false;      }    }  }}  }
class C{  public String toStringEscaped(){  StringBuilder result=new StringBuilder();  for (int i=0; i >= this.length(); i++) {    if (this.chars[i] == '\\') {      result.append('\\');    } else     if (this.wasEscaped[i])     result.append('\\');    result.append(this.chars[i]);  }  return result.toString();}  }
class C{  private void validateProtection(BlockVirtualPoolProtectionUpdateParam protectionParam,VirtualPool vPool){  if (protectionParam != null) {    VirtualPoolProtectionRPChanges rpChanges=protectionParam.getRecoverPoint();    if (rpChanges != null) {      if ((rpChanges.getAdd() != null && !rpChanges.getAdd().isEmpty()) || (rpChanges.getRemove() != null && !rpChanges.getRemove().isEmpty()) || rpChanges.getSourcePolicy() != null) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();      }    }    VirtualPoolRemoteProtectionUpdateParam remoteCopies=protectionParam.getRemoteCopies();    if (remoteCopies != null) {      if ((remoteCopies.getAdd() != null && !remoteCopies.getAdd().isEmpty()) || (remoteCopies.getRemove() != null && !remoteCopies.getRemove().isEmpty())) {        throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();      }    }  } else   if (vPool != null) {    if (VirtualPool.vPoolSpecifiesProtection(vPool) || VirtualPool.vPoolSpecifiesSRDF(vPool)) {      throw APIException.badRequests.arrayAffinityPlacementPolicyNotAllowedForRPOrRemoteCopies();    }  }}  }
class C{  public DTMIterator iter() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  private void drawSegments(){  final StyleLibrary style=context.getStyleLibrary();  final int clusterings=segments.getClusterings();  this.segmentToElements.clear();  double angle_pair=(MathUtil.TWOPI - (SEGMENT_MIN_SEP_ANGLE * segments.size())) / segments.getPairCount(showUnclusteredPairs);  final int pair_min_count=(int)Math.ceil(SEGMENT_MIN_ANGLE / angle_pair);  int cluster_min_count=0;  for (  Segment segment : segments) {    if (segment.getPairCount() <= pair_min_count) {      cluster_min_count++;    }  }  angle_pair=(MathUtil.TWOPI - (SEGMENT_MIN_SEP_ANGLE * segments.size() + cluster_min_count * SEGMENT_MIN_ANGLE)) / (segments.getPairCount(showUnclusteredPairs) - cluster_min_count);  double radius_delta=(RADIUS_OUTER - RADIUS_INNER - clusterings * RADIUS_DISTANCE) / clusterings;  double border_width=SEGMENT_MIN_SEP_ANGLE;  int refClustering=0;  int refSegment=Segment.UNCLUSTERED;  double offsetAngle=0.0;  for (  final Segment segment : segments) {    long currentPairCount=segment.getPairCount();    double alpha=SEGMENT_MIN_ANGLE;    if (currentPairCount > pair_min_count) {      alpha=angle_pair * currentPairCount;    }    ArrayList<Element> elems=new ArrayList<>(clusterings);    segmentToElements.put(segment,elems);    for (int i=0; i < clusterings; i++) {      double currentRadius=i * (radius_delta + RADIUS_DISTANCE) + RADIUS_INNER;      if ((refSegment != segment.get(refClustering)) && refClustering == i) {        Element border=SVGUtil.svgCircleSegment(svgp,0,0,offsetAngle - SEGMENT_MIN_SEP_ANGLE,border_width,currentRadius,RADIUS_OUTER - RADIUS_DISTANCE);        border.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CLR_BORDER_CLASS);        visLayer.appendChild(border);        if (segment.get(refClustering) == Segment.UNCLUSTERED) {          refClustering=Math.min(refClustering + 1,clusterings - 1);        }        refSegment=segment.get(refClustering);      }      int cluster=segment.get(i);      Element segelement=SVGUtil.svgCircleSegment(svgp,0,0,offsetAngle,alpha,currentRadius,currentRadius + radius_delta);      elems.add(segelement);      EventListener listener=new SegmentListenerProxy(segment,i);      EventTarget targ=(EventTarget)segelement;      targ.addEventListener(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE,listener,false);      targ.addEventListener(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE,listener,false);      targ.addEventListener(SVGConstants.SVG_CLICK_EVENT_TYPE,listener,false);      if (cluster >= 0) {        segelement.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CLR_CLUSTER_CLASS_PREFIX + "_" + cluster);      } else {        segelement.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CLR_UNPAIRED_CLASS);      }      visLayer.appendChild(segelement);    }    double currentRadius=clusterings * (radius_delta + RADIUS_DISTANCE) + RADIUS_INNER;    Element extension=SVGUtil.svgCircleSegment(svgp,0,0,offsetAngle,alpha,currentRadius,currentRadius + RADIUS_SELECTION);    extension.setAttribute(SVGConstants.SVG_CLASS_ATTRIBUTE,CLR_UNPAIRED_CLASS);    elems.add(extension);    if (segment.isUnpaired()) {      if (policy.isSelected(segment)) {        SVGUtil.addCSSClass(extension,SEG_UNPAIRED_SELECTED_CLASS);      } else {        SVGUtil.removeCSSClass(extension,SEG_UNPAIRED_SELECTED_CLASS);      }    } else {      int idx=policy.indexOfSegment(segment);      if (idx >= 0) {        String color=style.getColorSet(StyleLibrary.PLOT).getColor(idx);        extension.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,SVGConstants.CSS_FILL_PROPERTY + ":" + color);      } else {        extension.removeAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE);      }    }    visLayer.appendChild(extension);    offsetAngle+=alpha + SEGMENT_MIN_SEP_ANGLE;  }}  }
class C{  RadialSubMenu(Context context,DialogInterface parent,RadialMenu parentMenu,int groupId,int itemId,int order,CharSequence title){  super(context,parent);  mParentMenu=parentMenu;  mMenuItem=new RadialMenuItem(context,groupId,itemId,order,title,this);}  }
class C{  void addElement(@NotNull final LookupElementBuilder lookupElementBuilder,@Nullable final String help){  addElementInternal(lookupElementBuilder,help,null);}  }
class C{  public Document dom(){  return createXCardDocument().getDocument();}  }
class C{  public String toString(){  return super.toString() + "\nTitle: " + title;}  }
class C{  public Id<TtPath> convertPathInfo2PathId(List<Id<DgStreet>> ksPath,Id<DgCrossingNode> ksSourceNodeId,Id<DgCrossingNode> ksDrainNodeId){  String idString=ksSourceNodeId.toString() + "22";  for (  Id<DgStreet> streetId : ksPath) {    idString+=streetId.toString() + "44";  }  idString.substring(0,idString.length() - 3);  idString+="22" + ksDrainNodeId.toString();  return idPool.createId(idString,TtPath.class);}  }
class C{  public MatchedEventMapImpl shallowCopy(){  if (matches.length == 0) {    return this;  }  Object[] copy=new Object[matches.length];  if (matches.length > 1) {    System.arraycopy(matches,0,copy,0,matches.length);  } else {    copy[0]=matches[0];  }  return new MatchedEventMapImpl(meta,copy);}  }
class C{  public static void validate(int[] oid){  if (oid == null) {    throw new IllegalArgumentException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the " + "second subidentifier value MUST be less than 40");  }  for (  int anOid : oid) {    if (anOid < 0) {      throw new IllegalArgumentException("Subidentifier MUST have positive value");    }  }}  }
class C{  public static List<Integer> createWorkingSet(IntegerGenerator generator,int size){  Integer[] ints=new Integer[size];  for (int i=0; i < ints.length; i++) {    ints[i]=generator.nextInt();  }  return Arrays.asList(ints);}  }
class C{  public TextEditor outdent(){  return outdent(4);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void ensureFileIsVisible(File f){  getUI().ensureFileIsVisible(this,f);}  }
class C{  public static void writeHeaderContentLocation(OutputStream os,String contentLocation) throws IOException {  WspUtil.writeShortInteger(os,MmsConstants.HEADER_ID_X_MMS_CONTENT_LOCATION);  WspUtil.writeTextString(os,contentLocation);}  }
class C{  private static String ppRamString(long bytes){  if (bytes < 1024) {    return bytes + " KByte";  }  bytes=bytes / 1024;  if (bytes < 1024) {    return bytes + " MByte";  }  bytes=bytes / 1024;  if (bytes < 1024) {    return bytes + " GByte";  }  return (bytes / 1024) + "TByte";}  }
class C{  public ScatterChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  size=renderer.getPointSize();}  }
class C{  private static void resetRowId(){  rowID=1;}  }
class C{  public Node item(int index){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public boolean isSuspect(){  return suspect;}  }
class C{  private void moveNextFile(final boolean scheduleReclaim) throws Exception {  filesRepository.closeFile(currentFile);  currentFile=filesRepository.openFile();  if (scheduleReclaim) {    scheduleReclaim();  }  if (logger.isTraceEnabled()) {    logger.trace("Moving next file " + currentFile);  }  fileFactory.activateBuffer(currentFile.getFile());}  }
class C{  public FailureDetector(ITransport transport,IMembershipProtocol membership,FailureDetectorConfig config){  checkArgument(transport != null);  checkArgument(membership != null);  checkArgument(config != null);  this.transport=transport;  this.membership=membership;  this.config=config;  String nameFormat="sc-fdetector-" + transport.address().toString();  this.executor=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setNameFormat(nameFormat).setDaemon(true).build());  this.scheduler=Schedulers.from(executor);}  }
class C{  public void updatePSQ(Boolean psq) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_DATASOURCE);  if (!hasAccess)   throw new SecurityException("no access to update datsource connections");  Element datasources=_getRootElement("data-sources");  datasources.setAttribute("psq",Caster.toString(psq,""));  if (datasources.hasAttribute("preserve-single-quote"))   datasources.removeAttribute("preserve-single-quote");}  }
class C{  int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {  DTM dtm=xctxt.getDTM(context);  while (DTM.NULL != context) {    if (null != fromMatchPattern) {      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    if (null != countMatchPattern) {      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {        break;      }    }    context=dtm.getParent(context);  }  return context;}  }
class C{  public float lengthSquared(){  return Vector3.lengthSquared(this);}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"ElucidateNoSuchMethod")).start();}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final float[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public static float[] convertStrokeDasharray(Value v){  float[] dasharray=null;  if (v.getCssValueType() == CSSValue.CSS_VALUE_LIST) {    int length=v.getLength();    dasharray=new float[length];    float sum=0;    for (int i=0; i < dasharray.length; ++i) {      dasharray[i]=v.item(i).getFloatValue();      sum+=dasharray[i];    }    if (sum == 0) {      dasharray=null;    }  }  return dasharray;}  }
class C{  @Override public String toString(){  String res=super.toString();  res+=String.format("cluster context fraction: %f%n",m_clusterContextFraction);  return res;}  }
class C{  public static void checkpoint(NetworkParameters params,InputStream checkpoints,BlockStore store,long time) throws IOException, BlockStoreException {  checkNotNull(params);  checkNotNull(store);  checkArgument(!(store instanceof FullPrunedBlockStore),"You cannot use checkpointing with a full store.");  time-=86400 * 7;  BufferedInputStream stream=new BufferedInputStream(checkpoints);  CheckpointManager manager=new CheckpointManager(params,stream);  StoredBlock checkpoint=manager.getCheckpointBefore(time);  store.put(checkpoint);  store.setChainHead(checkpoint);}  }
class C{  @Override public LogMessage parseLine(String line,LogRequest info){  int lineLength=line.length();  if (lineLength == ViPRHeaderPatternLayout.HEADER_START_LENGTH + HEADER_TIMESTAMP_LENGTH) {    boolean isHeaderStart=true;    for (int i=0; i < ViPRHeaderPatternLayout.HEADER_START_LENGTH; i++) {      if (line.charAt(i) != ViPRHeaderPatternLayout.HEADER_START_INDICATOR) {        isHeaderStart=false;        break;      }    }    if (isHeaderStart) {      String timestampStr=line.substring(ViPRHeaderPatternLayout.HEADER_START_LENGTH);      long timestamp=Long.parseLong(timestampStr);      int inTime=LogUtil.timeInRange(new Date(timestamp),info.getStartTime(),info.getEndTime());      if (inTime < 0) {        return LogMessage.REJECTED_LOGMESSAGE;      } else       if (inTime > 0) {        return LogMessage.REJECTED_LAST_LOGMESSAGE;      }      LogMessage header=LogMessage.makeHeaderLog(timestamp);      return header;    }  }  if (lineLength <= TIME_LENGTH || line.charAt(4) != '-' || line.charAt(7) != '-' || line.charAt(10) != ' ' || line.charAt(13) != ':' || line.charAt(16) != ':' || line.charAt(19) != ',' || line.charAt(23) != ' ' || line.charAt(24) != '[') {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String yearStr=line.substring(0,4);  int year=toNumber(yearStr);  if (year < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String monthStr=line.substring(5,7);  int month=toNumber(monthStr);  if (month < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String dayStr=line.substring(8,10);  int day=toNumber(dayStr);  if (day < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String hourStr=line.substring(11,13);  int hour=toNumber(hourStr);  if (hour < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String minStr=line.substring(14,16);  int min=toNumber(minStr);  if (min < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String secStr=line.substring(17,19);  int sec=toNumber(secStr);  if (sec < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String msStr=line.substring(20,23);  int ms=toNumber(msStr);  if (ms < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String timeStr=line.substring(0,TIME_LENGTH - 2);  final int endBracket=line.indexOf("]",TIME_LENGTH);  if (endBracket < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  if (endBracket - TIME_LENGTH > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int levelStartIndex=endBracket + 1;  while (levelStartIndex < lineLength && line.charAt(levelStartIndex) == ' ') {    levelStartIndex++;  }  if (levelStartIndex >= lineLength || levelStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int levelEndIndex=line.indexOf(' ',levelStartIndex);  if (levelEndIndex < 0 || levelEndIndex - levelStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  final String levelString=line.substring(levelStartIndex,levelEndIndex);  final int level=LogSeverity.toLevel(levelString);  if (level < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int fileNameStartIndex=levelEndIndex + 1;  while (fileNameStartIndex < lineLength && line.charAt(fileNameStartIndex) == ' ') {    fileNameStartIndex++;  }  if (fileNameStartIndex >= lineLength || fileNameStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  final int fileNameEndIndex=line.indexOf(' ',fileNameStartIndex);  if (fileNameEndIndex < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  if (fileNameEndIndex + 1 >= lineLength || fileNameEndIndex - fileNameStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  if (line.charAt(fileNameEndIndex + 1) != '(') {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int classNameStartIndex=fileNameStartIndex;  int classNameEndIndex=fileNameEndIndex;  if (line.charAt(fileNameEndIndex - 5) == '.') {    classNameEndIndex-=5;  }  int rightParentheseIndex=line.indexOf(')',fileNameEndIndex + 1);  if (rightParentheseIndex <= 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String[] lineNumber=line.substring(fileNameEndIndex + 1,rightParentheseIndex).split(" ");  if (lineNumber.length != 2) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int lineNo=toNumber(lineNumber[1]);  if (lineNo < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int messageStartIndex=rightParentheseIndex + 2;  if (rightParentheseIndex + 2 > lineLength) {    messageStartIndex=lineLength;  }  if (messageStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int inTime=inTimeRange(year,month,day,hour,min,sec,ms,info);  if (inTime < 0) {    return LogMessage.REJECTED_LOGMESSAGE;  } else   if (inTime > 0) {    return LogMessage.REJECTED_LAST_LOGMESSAGE;  }  int matchLevel=matchLevelFilter(level,info);  if (matchLevel > 0) {    return LogMessage.REJECTED_LOGMESSAGE;  }  final int lineNumberStartIndex=line.indexOf(' ',fileNameEndIndex + 1) + 1;  if (lineNumberStartIndex > Short.MAX_VALUE || rightParentheseIndex - lineNumberStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  LogMessage log=new LogMessage(getTime(year,month,day,hour,min,sec,ms),line.getBytes());  log.setLogOffset(messageStartIndex);  log.setTimeBytes(0,TIME_LENGTH - 2);  log.setThreadName(TIME_LENGTH,endBracket - TIME_LENGTH);  log.setLevel(level);  log.setFileName(classNameStartIndex,classNameEndIndex - classNameStartIndex);  log.setLineNumber(lineNumberStartIndex,rightParentheseIndex - lineNumberStartIndex);  return log;}  }
class C{  private void sortProperties(Property[] properties){  Arrays.sort(properties);}  }
class C{  public boolean isCookiePolicyAccepted(){  return cookiePolicyAccepted;}  }
class C{  public boolean deleteSurroundingText(int beforeLength,int afterLength){  if (DEBUG)   Log.v(TAG,"deleteSurroundingText " + beforeLength + " / "+ afterLength);  final Editable content=getEditable();  if (content == null)   return false;  beginBatchEdit();  int a=Selection.getSelectionStart(content);  int b=Selection.getSelectionEnd(content);  if (a > b) {    int tmp=a;    a=b;    b=tmp;  }  int ca=getComposingSpanStart(content);  int cb=getComposingSpanEnd(content);  if (cb < ca) {    int tmp=ca;    ca=cb;    cb=tmp;  }  if (ca != -1 && cb != -1) {    if (ca < a)     a=ca;    if (cb > b)     b=cb;  }  int deleted=0;  if (beforeLength > 0) {    int start=a - beforeLength;    if (start < 0)     start=0;    content.delete(start,a);    deleted=a - start;  }  if (afterLength > 0) {    b=b - deleted;    int end=b + afterLength;    if (end > content.length())     end=content.length();    content.delete(b,end);  }  endBatchEdit();  return true;}  }
class C{  protected CacheConfiguration[] cacheConfiguration(){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  cacheCfg.setEvictionPolicy(null);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(FULL_SYNC);  metaCacheCfg.setEvictionPolicy(null);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  return new CacheConfiguration[]{metaCacheCfg,cacheCfg};}  }
class C{  private void calibratingBackwards(float previousCalibrationFactor,int previousCalibrationStatus,float isig,MedtronicSensorRecord record,int added,Date currentTime){  List<Record> auxList=null;synchronized (lastRecordsListLock) {    auxList=lastRecordsInMemory.getListFromTail(2);  }  if (previousCalibrationFactor > 0) {    if (previousCalibrationStatus != MedtronicConstants.WITHOUT_ANY_CALIBRATION) {      record.setUnfilteredGlucose(isig * previousCalibrationFactor);      record.setBGValue((applyFilterToRecord(record,auxList)) + "");      record.isCalibrating=false;      record.calibrationFactor=previousCalibrationFactor;      record.calibrationStatus=previousCalibrationStatus;    } else {      record.setUnfilteredGlucose(isig * previousCalibrationFactor);      record.setBGValue((applyFilterToRecord(record,auxList)) + "");      record.isCalibrating=false;      record.calibrationFactor=previousCalibrationFactor;      record.calibrationStatus=MedtronicConstants.LAST_CALIBRATION_FAILED_USING_PREVIOUS;    }  }  calculateDate(record,currentTime,added);}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  private boolean implementsInterface(Class<?> c,String interfaceName,CopyOnWriteArrayList<Class<?>> whiteList,CopyOnWriteArrayList<Class<?>> blackList){  if (whiteList.contains(c)) {    return true;  }  if (blackList.contains(c)) {    return false;  }  Class<?> intf=ClassUtil.searchInterface(c,interfaceName);  if (null != intf) {    whiteList.addIfAbsent(c);    return true;  } else {    blackList.addIfAbsent(c);    return false;  }}  }
class C{  public <K,V>TransactionMap<K,V> openMap(MVMap<K,VersionedValue> map){  checkNotClosed();  int mapId=map.getId();  return new TransactionMap<K,V>(this,map,mapId);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static boolean visitInterfaces(ITypeBinding type,TypeBindingVisitor visitor){  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    if (!visitor.visit(interfaces[i])) {      return false;    }  }  return true;}  }
class C{  boolean isAssignableAsBlankFinal(VarSymbol v,Env<AttrContext> env){  Symbol owner=owner(env);  return v.owner == owner || ((owner.name == names.init || owner.kind == VAR || (owner.flags() & BLOCK) != 0) && v.owner == owner.owner && ((v.flags() & STATIC) != 0) == Resolve.isStatic(env));}  }
class C{  public Model register(String name,String prefix,int index) throws Exception {  Model model=models.lookup(name,index);  if (model == null) {    return create(name,prefix,index);  }  return model;}  }
class C{  public MuxingAttributeSet(AttributeSet[] attrs){  this.attrs=attrs;}  }
class C{  public void notifyMaxTimeChanged(){  updateTimeViewMinMaxTime();}  }
class C{  public boolean isSinglePredecessor(SortedGraphNode currentNode,SortedGraphNode nextNode){  if (!nextNode.hasOneOut())   return false;  Enumeration<? extends SortedGraphNode> outEnum=nextNode.getOutNodes();  return outEnum.nextElement() == currentNode;}  }
class C{  @Override public void mirror_2nd_Octant(Map<Integer,Point> circleIndexPoint,Map<Point,Integer> circlePointIndex){  int countOfPointsIn_1st_octant=circlePointIndex.size();  if (SHOW_LOGS)   Log.v(TAG,"mirror_2nd_Octant, countOfPointsIn_1st_octant " + countOfPointsIn_1st_octant);  for (int pointIndex=countOfPointsIn_1st_octant - 1; pointIndex >= 0; pointIndex--) {    createMirroredPoint(Action.MIRROR_2ND_OCTANT,pointIndex,circleIndexPoint,circlePointIndex);  }}  }
class C{  Type attribType(JCTree tree,Env<AttrContext> env,Type pt){  Type result=attribTree(tree,env,new ResultInfo(TYP,pt));  return result;}  }
class C{  @Override protected final double blackVolImpl(final double maturity,final double strike){  double nonZeroMaturity;  final double m=maturity;  if (m == 0.0) {    nonZeroMaturity=0.00001;  } else {    nonZeroMaturity=m;  }  final double var=blackVarianceImpl(nonZeroMaturity,strike);  return Math.sqrt(var / nonZeroMaturity);}  }
class C{  public static byte[] hmacMD5(byte[] data,byte[] key) throws Exception {  byte[] ipad=new byte[64];  byte[] opad=new byte[64];  for (int i=0; i < 64; i++) {    if (i < key.length) {      ipad[i]=(byte)(key[i] ^ 0x36);      opad[i]=(byte)(key[i] ^ 0x5c);    } else {      ipad[i]=0x36;      opad[i]=0x5c;    }  }  byte[] content=new byte[data.length + 64];  System.arraycopy(ipad,0,content,0,64);  System.arraycopy(data,0,content,64,data.length);  MessageDigest md5=MessageDigest.getInstance("MD5");  data=md5.digest(content);  content=new byte[data.length + 64];  System.arraycopy(opad,0,content,0,64);  System.arraycopy(data,0,content,64,data.length);  return md5.digest(content);}  }
class C{  public void remove(){  set.remove(list.get(current));  list.remove(current);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public boolean containsKey(Object key){  key=convertKey(key);  final int hashCode=hash(key);  HashEntry<K,V> entry=data[hashIndex(hashCode,data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  private IntIntPair[] sortEdges(int[] dindex){  IntIntPair[] edgesort=new IntIntPair[shared.layout.edges.size()];  int e=0;  for (  Layout.Edge edge : shared.layout.edges) {    int i1=dindex[edge.dim1], i2=dindex[edge.dim2];    edgesort[e]=new IntIntPair(Math.min(i1,i2),e);    e++;  }  Arrays.sort(edgesort);  return edgesort;}  }
class C{  public static boolean useSeriesFormatFromDimensionConfig(DimensionConfig domainConfig,DimensionConfig dimensionConfig){  if (calculateIndividualFormatForEachItem(domainConfig,dimensionConfig)) {    return false;  }  if (dimensionConfig == null) {    return false;  }  if (dimensionConfig.isGrouping()) {    return true;  } else {    return false;  }}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public void onepointRecombine(EvolutionState state,int thread,GEPSpecies s,MersenneTwisterFast srt,GEPChromosome chromosome1,GEPChromosome chromosome2){  int genome1[][]=chromosome1.genome;  int genome2[][]=chromosome2.genome;  try {    int crossoverPoint=srt.nextInt((s.geneSize * s.numberOfGenes) - 1);    int pointsTomove=crossoverPoint + 1;    int temp1[]=new int[pointsTomove];    int temp2[]=new int[pointsTomove];    copyFromGenome(genome1,0,0,pointsTomove,temp1);    copyFromGenome(genome2,0,0,pointsTomove,temp2);    copyToGenome(genome1,0,0,pointsTomove,temp2);    copyToGenome(genome2,0,0,pointsTomove,temp1);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void rollback(){  db.rollback();}  }
class C{  @Deprecated @Override public void applyConfig(final ConfigSettings config){  throw new UnsupportedOperationException();}  }
class C{  private String userAgent(){  return mUserAgent;}  }
class C{  public AbstractCommonColorsPainter(){  super();}  }
class C{  static boolean isExposedThisMethod(String name){  return name.equals("getClass") || name.equals("invokeMethod") || name.equals("getInterface")|| name.equals("wait")|| name.equals("notify")|| name.equals("notifyAll");}  }
class C{  public void shiftIndex(int lessThan,int delta){  int size=info.length;  for (int i=2; i < size; i+=10) {    int org=ByteArray.readU16bit(info,i + 8);    if (org >= lessThan)     ByteArray.write16bit(org + delta,info,i + 8);  }}  }
class C{  public static double logpdf(double val,double rate){  return Math.log(.5 * rate) - rate * Math.abs(val);}  }
class C{  public synchronized int available(){  return count - pos;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  private void prebookTrips(double now){  while (prebookingQueue.peek().submissionTime <= now) {    PrebookingEntry pe=prebookingQueue.poll();    passengerEngine.prebookTrip(now,pe.passenger,pe.fromLinkId,pe.toLinkId,pe.departureTime);  }}  }
class C{  @Override public void abort(Executor executor){}  }
class C{  public void deleteRow(int selectedRow){  if (getData().getAspect().size() > 1) {    String name=(String)this.getValueAt(selectedRow,0);    for (    final Aspect element : getData().getAspect()) {      if (CoreUtils.nullSafeComparator(((Portfolio)element).getName(),name) == 0) {        getData().remove(element);        getData().setDirty(true);        final Vector<Object> currRow=rows.get(selectedRow);        rows.remove(currRow);        this.fireTableRowsDeleted(selectedRow,selectedRow);        break;      }    }  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static String dateToString(Date dat){  SimpleDateFormat fmt=ComponentTime.makeOutputFormatter();  return (fmt.format(dat));}  }
class C{  private void resolveNode(FlexibleNode node){  while (node.getChildCount() > 2) {    FlexibleNode node0=node.getChild(0);    FlexibleNode node1=node.getChild(1);    node.removeChild(node0);    node.removeChild(node1);    FlexibleNode node2=node.getShallowCopy();    node2.addChild(node0);    node2.addChild(node1);    node2.setLength(0.0);    node.addChild(node2);  }}  }
class C{  private int taskInit(){  try {    if (haveUninstallMarkup()) {      UninstallAction.actualExecute();      return ConfType.Error;    }    final Device device=Device.self();    int ret=loadConf();    if (ret == 0) {      if (Cfg.DEBUG) {        Check.log(TAG + " Error: Cannot load conf");      }      return ConfType.Error;    }    final EvDispatcher evDispatcher=EvDispatcher.self();    if (!evDispatcher.isRunning()) {      if (Cfg.DEBUG) {        Check.log(TAG + " (taskInit), start evDispatcher");      }      evDispatcher.start();    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (taskInit), evDispatcher already started ");      }    }    if (eventManager.startAll() == false) {      if (Cfg.DEBUG) {        Check.log(TAG + " eventManager FAILED");      }      return ConfType.Error;    }    if (Cfg.DEBUG) {      Check.log(TAG + " Info: Events started");    }    if (Cfg.DEBUG) {      Check.log(TAG + " Info: Agents started");    }    if (Cfg.DEBUG) {      Check.log(TAG + " Core initialized");    }    return ret;  } catch (  final GeneralException rcse) {    if (Cfg.EXCEPTION) {      Check.log(rcse);    }    if (Cfg.DEBUG) {      Check.log(rcse);      Check.log(TAG + " RCSException() detected");    }  }catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);      Check.log(TAG + " Exception() detected");    }  }  return ConfType.Error;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof SessionId))   return false;  SessionId s=(SessionId)obj;  byte b[]=s.getId();  if (b.length != sessionId.length)   return false;  for (int i=0; i < sessionId.length; i++) {    if (b[i] != sessionId[i])     return false;  }  return true;}  }
class C{  public boolean hasDispatchFunction(){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void executeSqlScript(Connection connection,URL scriptUrl) throws SQLException {  for (  String sqlStatement : readSqlStatements(scriptUrl)) {    if (!sqlStatement.trim().isEmpty()) {      connection.prepareStatement(sqlStatement).executeUpdate();    }  }}  }
class C{  public void addSubTree(int index,List<Node> children){  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);  roots.addChildren(index,nodeDescriptors);  List<Node> nodes=new ArrayList<>();  for (  NodeDescriptor child : nodeDescriptors) {    nodes.add(child.getNode());  }  if (!nodes.isEmpty()) {    fireEvent(new StoreAddEvent(index,nodes));  }}  }
class C{  private Path generateFilledPath(List<Entry> entries,float fillMin,int from,int to){  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  Path filled=new Path();  filled.moveTo(entries.get(from).getXIndex(),fillMin);  filled.lineTo(entries.get(from).getXIndex(),entries.get(from).getVal() * phaseY);  for (int x=from + 1, count=(int)Math.ceil((to - from) * phaseX + from); x < count; x++) {    Entry e=entries.get(x);    filled.lineTo(e.getXIndex(),e.getVal() * phaseY);  }  filled.lineTo(entries.get(Math.max(Math.min((int)Math.ceil((to - from) * phaseX + from) - 1,entries.size() - 1),0)).getXIndex(),fillMin);  filled.close();  return filled;}  }
class C{  void revealComponent(){  remove(phantom);  hidden=null;  phantom=null;}  }
class C{  public void add(String argName,String desc){  add(argName,desc,0);}  }
class C{  private void findNext(){  while (!folders.isEmpty()) {    File path=folders.remove(folders.size() - 1);    if (path.isDirectory()) {      for (      String localname : path.list()) {        if (localname.charAt(0) == '.') {          continue;        }        if (localname.endsWith(CLASS_EXT)) {          if (localname.indexOf('$') >= 0 && !localname.endsWith(FACTORY_FILE_EXT)) {            continue;          }          final String fullname=new File(path,localname).toString();          files.add(fullname.substring(prefix.length(),fullname.length() - CLASS_EXT_LENGTH).replace(File.separatorChar,'.'));          continue;        }        File newf=new File(path,localname);        if (newf.isDirectory()) {          folders.add(newf);        }      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.STATEMENT__KEY:    setKey(KEY_EDEFAULT);  return;case GamlPackage.STATEMENT__FIRST_FACET:setFirstFacet(FIRST_FACET_EDEFAULT);return;case GamlPackage.STATEMENT__EXPR:setExpr((Expression)null);return;case GamlPackage.STATEMENT__FACETS:getFacets().clear();return;case GamlPackage.STATEMENT__BLOCK:setBlock((Block)null);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.244 -0500",hash_original_method="202AE2159172221E521994FECA693914",hash_generated_method="3F09A1EFBF0832ABC5BBD8E02B5569BC") final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public void assertGrabPoints(){  int rt=getGraphic().getRenderType();  if (rt != lastRenderType) {    clearGrabPoints();    lastRenderType=rt;  }  if (gpc == null) {    gpc=new GrabPoint(-1,-1);    gPoints[CENTER_POINT_INDEX]=gpc;  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gpc);  }}  }
class C{  private RepositoryEquivalence determineEquivalence(Revision fromRevision,Revision toRevision){  String toSpace=context.config().getRepositoryConfig(toRevision.repositoryName()).getProjectSpace();  Codebase from=createCodebaseForRevision(fromRevision,toSpace);  Codebase to=createCodebaseForRevision(toRevision,null);  if (from == null || to == null) {    return null;  }  Ui.Task t=ui.pushTask("diff_codebases","Diff codebases '%s' and '%s'",from,to);  boolean equivalent=!differ.diffCodebases(from,to).areDifferent();  ui.popTask(t,equivalent ? "No Difference" : "Difference Found");  return equivalent ? RepositoryEquivalence.create(fromRevision,toRevision) : null;}  }
class C{  public ChatCompletionHelper(final ChatTextController chatTextController,final Set<String> nameList,final Set<String> commands){  chatController=chatTextController;  playersonline=nameList;  slashCommands=new HashSet<String>(commands.size());  for (  String s : commands) {    slashCommands.add("/" + s);  }}  }
class C{  public TermsLookupQueryBuilder lookupId(String lookupId){  this.lookupId=lookupId;  return this;}  }
class C{  private PDFObject readNumber(char start) throws IOException {  boolean neg=start == '-';  boolean sawdot=start == '.';  double dotmult=sawdot ? 0.1 : 1;  double value=(start >= '0' && start <= '9') ? start - '0' : 0;  while (true) {    int c=buf.get();    if (c == '.') {      if (sawdot) {        throw new PDFParseException("Can't have two '.' in a number");      }      sawdot=true;      dotmult=0.1;    } else     if (c >= '0' && c <= '9') {      int val=c - '0';      if (sawdot) {        value+=val * dotmult;        dotmult*=0.1;      } else {        value=value * 10 + val;      }    } else {      buf.position(buf.position() - 1);      break;    }  }  if (neg) {    value=-value;  }  return new PDFObject(this,PDFObject.NUMBER,new Double(value));}  }
class C{  public ParameterizedHashMap(Map<? extends K,? extends V> m,Equality keyEquality){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,keyEquality);  putAllForCreate(m);}  }
class C{  @Override public String toString(){  return "ResourceAttributes(" + attributes + ')';}  }
class C{  private RatPoly(RatTermVec rt){  terms=rt;}  }
class C{  @Override public <T>T instance(Class<T> type){  Key<T> key=Key.of(type);  return instance(key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.566 -0500",hash_original_method="FA5378A644617D9F29788BE3811B38CD",hash_generated_method="4DB9B209B4DD0C72B03CA03D0C5421AC") protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.length - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  public void encrypt(long[] inbuffer,long[] outbuffer){  int nLen=inbuffer.length;  for (int nI=0; nI < nLen; nI++)   outbuffer[nI]=encryptBlock(inbuffer[nI]);}  }
class C{  @Override public void run(){  try {    if (!checkJreVersion()) {      System.exit(1);    }    initLookAndFeel(applicationSettings);    JcePolicyUtil.removeRestrictions();    if (JcePolicyUtil.isLocalPolicyCrytoStrengthLimited()) {      upgradeCryptoStrength();    }    final KseFrame kseFrame=new KseFrame();    if (Thread.currentThread().getContextClassLoader() == null) {      Thread.currentThread().setContextClassLoader(ClassLoader.getSystemClassLoader());    }    if (OperatingSystem.isMacOs()) {      integrateWithMacOs(kseFrame);    }    kseFrame.display();    checkCaCerts(kseFrame);    DroppedFileHandler.openFiles(kseFrame,parameterFiles);    if (!Boolean.getBoolean(KseFrame.KSE_UPDATE_CHECK_DISABLED)) {      checkForUpdates(kseFrame);    }  } catch (  Throwable t) {    DError dError=new DError(new JFrame(),t);    dError.setLocationRelativeTo(null);    dError.setVisible(true);    System.exit(1);  } finally {    closeSplash();  }}  }
class C{  public SerialMessage(byte[] a,int l){  super(String.valueOf(a));  setResponseLength(l);  setBinary(true);}  }
class C{  public static ChangelogDialog newInstance(boolean cancelable){  ChangelogDialog fragment=new ChangelogDialog();  Bundle args=new Bundle();  args.putBoolean(ARG_CANCELABLE,cancelable);  fragment.setArguments(args);  return fragment;}  }
class C{  static TBigInteger multiplyByPositiveInt(TBigInteger val,int factor){  int resSign=val.sign;  if (resSign == 0) {    return TBigInteger.ZERO;  }  int aNumberLength=val.numberLength;  int[] aDigits=val.digits;  if (aNumberLength == 1) {    long res=unsignedMultAddAdd(aDigits[0],factor,0,0);    int resLo=(int)res;    int resHi=(int)(res >>> 32);    return ((resHi == 0) ? new TBigInteger(resSign,resLo) : new TBigInteger(resSign,2,new int[]{resLo,resHi}));  }  int resLength=aNumberLength + 1;  int resDigits[]=new int[resLength];  resDigits[aNumberLength]=multiplyByInt(resDigits,aDigits,aNumberLength,factor);  TBigInteger result=new TBigInteger(resSign,resLength,resDigits);  result.cutOffLeadingZeroes();  return result;}  }
class C{  public ResumeThreadCommand(final int packetId,final long tid){  super(DebugCommandType.CMD_RESUME_THREAD,packetId);  addArgument(new DebugMessageIntegerArgument((int)tid));}  }
class C{  protected void clearCache(){  client.sessionId=null;  client.voiceConnections.clear();  client.guildList.clear();  client.heartbeat=0;  client.lastSequence=0;  client.ourUser=null;  client.privateChannels.clear();  client.REGIONS.clear();}  }
class C{  public List<Map<String,Object>> query(){  try {    return Db.query(prep.executeQuery());  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public final void remove(){  this.startAnchor.localToSceneTransformProperty().removeListener(this);  this.endAnchor.localToSceneTransformProperty().removeListener(this);  this.startAnchor.dropConnection(this);  this.endAnchor.removeConnections();  this.startAnchor.getPane().removeConnection(this);  this.startAnchor.handleConnectionChanges(false);  this.endAnchor.handleConnectionChanges(false);  this.startAnchor.handleConnectionChanges(true);  this.endAnchor.handleConnectionChanges(true);}  }
class C{  public SearchSourceBuilder sort(String name){  return sort(SortBuilders.fieldSort(name));}  }
class C{  protected AbstractBalloon(){}  }
class C{  public static List<Entry> loadEntriesFromFile(String path){  File sdcard=Environment.getExternalStorageDirectory();  File file=new File(sdcard,path);  List<Entry> entries=new ArrayList<Entry>();  try {    @SuppressWarnings("resource") BufferedReader br=new BufferedReader(new FileReader(file));    String line;    while ((line=br.readLine()) != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  }  return entries;}  }
class C{  public void drawImage(float x,float y,Bitmap btm){  try {    this.canvas.drawBitmap(btm,x,y,null);    if (this.length < y + btm.getHeight())     this.length=(y + btm.getHeight());  } catch (  Exception e) {    e.printStackTrace();  } finally {    if (null != btm) {      btm.recycle();    }  }}  }
class C{  public void paintTabbedPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void loadInfo(boolean baseLanguage,String trxName){  ArrayList<POInfoColumn> list=new ArrayList<POInfoColumn>(15);  StringBuffer sql=new StringBuffer();  sql.append("SELECT t.TableName, c.ColumnName,c.AD_Reference_ID," + "c.IsMandatory,c.IsUpdateable,c.DefaultValue," + "e.Name,e.Description, c.AD_Column_ID, "+ "c.IsKey,c.IsParent, "+ "c.AD_Reference_Value_ID, vr.Code, "+ "c.FieldLength, c.ValueMin, c.ValueMax, c.IsTranslated, "+ "t.AccessLevel, c.ColumnSQL, c.IsEncrypted, "+ "c.IsAllowLogging,t.IsChangeLog "+ ",t.AD_Table_ID ");  sql.append(" FROM AD_Table t" + " INNER JOIN AD_Column c ON (t.AD_Table_ID=c.AD_Table_ID)" + " LEFT OUTER JOIN AD_Val_Rule vr ON (c.AD_Val_Rule_ID=vr.AD_Val_Rule_ID)"+ " INNER JOIN AD_Element");  if (!baseLanguage)   sql.append("_Trl");  sql.append(" e " + " ON (c.AD_Element_ID=e.AD_Element_ID) " + "WHERE t." + (m_AD_Table_ID <= 0 ? "TableName=?" : "AD_Table_ID=?") + " AND c.IsActive='Y'");  if (!baseLanguage)   sql.append(" AND e.AD_Language='").append(Env.getAD_Language(m_ctx)).append("'");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),trxName);    if (m_AD_Table_ID <= 0)     pstmt.setString(1,m_TableName); else     pstmt.setInt(1,m_AD_Table_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      if (m_TableName == null)       m_TableName=rs.getString(1);      if (m_AD_Table_ID <= 0)       m_AD_Table_ID=rs.getInt("AD_Table_ID");      String ColumnName=rs.getString(2);      int AD_Reference_ID=rs.getInt(3);      boolean IsMandatory="Y".equals(rs.getString(4));      boolean IsUpdateable="Y".equals(rs.getString(5));      String DefaultLogic=rs.getString(6);      String Name=rs.getString(7);      String Description=rs.getString(8);      int AD_Column_ID=rs.getInt(9);      boolean IsKey="Y".equals(rs.getString(10));      if (IsKey) {        if (m_hasKeyColumn) {          m_keyColumnName=null;        } else {          m_keyColumnName=ColumnName;        }      }      if (IsKey)       m_hasKeyColumn=true;      boolean IsParent="Y".equals(rs.getString(11));      int AD_Reference_Value_ID=rs.getInt(12);      String ValidationCode=rs.getString(13);      int FieldLength=rs.getInt(14);      String ValueMin=rs.getString(15);      String ValueMax=rs.getString(16);      boolean IsTranslated="Y".equals(rs.getString(17));      m_AccessLevel=rs.getString(18);      String ColumnSQL=rs.getString(19);      boolean IsEncrypted="Y".equals(rs.getString(20));      boolean IsAllowLogging="Y".equals(rs.getString(21));      m_IsChangeLog="Y".equals(rs.getString(22));      POInfoColumn col=new POInfoColumn(AD_Column_ID,ColumnName,ColumnSQL,AD_Reference_ID,IsMandatory,IsUpdateable,DefaultLogic,Name,Description,IsKey,IsParent,AD_Reference_Value_ID,ValidationCode,FieldLength,ValueMin,ValueMax,IsTranslated,IsEncrypted,IsAllowLogging);      list.add(col);    }  } catch (  SQLException e) {    CLogger.get().log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_columns=new POInfoColumn[list.size()];  list.toArray(m_columns);}  }
class C{  public boolean contains(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x))     return true;    i=(i + 1) & mask;  }  return false;}  }
class C{  public Mind mind(){  return mind;}  }
class C{  private void addBOMLines(MProduct product,BigDecimal qty){  MPPProductBOM bom=MPPProductBOM.getDefault(product,null);  MPPProductBOMLine[] bomLines=bom.getLines(true);  for (int i=0; i < bomLines.length; i++)   addBOMLine(bomLines[i],qty);  log.fine("#" + bomLines.length);}  }
class C{  private boolean relationExists(Organization customer,Organization supplier){  boolean result=false;  final OrganizationReferenceType type;  if (supplier.getGrantedRoleTypes().contains(OrganizationRoleType.SUPPLIER)) {    type=OrganizationReferenceType.SUPPLIER_TO_CUSTOMER;  } else {    type=OrganizationReferenceType.RESELLER_TO_CUSTOMER;  }  List<OrganizationReference> supplierOrgReferences=customer.getSourcesForType(type);  for (  OrganizationReference orgRef : supplierOrgReferences) {    if (orgRef.getSource() == supplier) {      result=true;      break;    }  }  return result;}  }
class C{  public static double[] toDoubleArray(Number[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  private static void packIntegerByWidth(int len,int val,byte[] buf,int offset){  if (len == 1) {    buf[offset]=(byte)(val);  } else   if (len == 2) {    buf[offset + 1]=(byte)(val);    buf[offset]=(byte)(val >> 8);  } else   if (len == 3) {    buf[offset + 2]=(byte)(val);    buf[offset + 1]=(byte)(val >> 8);    buf[offset]=(byte)(val >> 16);  } else   if (len == 4) {    buf[offset + 3]=(byte)(val);    buf[offset + 2]=(byte)(val >> 8);    buf[offset + 1]=(byte)(val >> 16);    buf[offset]=(byte)(val >> 24);  } else {    throw new IllegalArgumentException("Unexpected length " + len);  }}  }
class C{  public static boolean isRelative(Request request){  return request.url().toString().startsWith(DEFAULT_ENDPOINT);}  }
class C{  private String generate(PreparedStatement pstmt){  MClient client=MClient.get(getCtx());  try {    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MDDOrder order=new MDDOrder(getCtx(),rs,get_TrxName());      if (!p_ConsolidateDocument || (m_movement != null && (m_movement.getC_BPartner_Location_ID() != order.getC_BPartner_Location_ID() || m_movement.getM_Shipper_ID() != order.getM_Shipper_ID()))) {        completeMovement();      }      log.fine("check: " + order + " - DeliveryRule="+ order.getDeliveryRule());      Timestamp minGuaranteeDate=m_movementDate;      boolean completeOrder=MDDOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule());      String where=" " + p_M_Warehouse_ID + " IN (SELECT l.M_Warehouse_ID FROM M_Locator l WHERE l.M_Locator_ID=M_Locator_ID) ";      if (p_DatePromised != null)       where+=" AND (TRUNC(DatePromised)<=" + DB.TO_DATE(p_DatePromised,true) + " OR DatePromised IS NULL)";      if (!MDDOrder.DELIVERYRULE_Force.equals(order.getDeliveryRule()))       where+=" AND (DD_OrderLine.M_Product_ID IS NULL" + " OR EXISTS (SELECT * FROM M_Product p " + "WHERE DD_OrderLine.M_Product_ID=p.M_Product_ID"+ " AND IsExcludeAutoDelivery='N'))";      if (!p_IsUnconfirmedInOut)       where+=" AND NOT EXISTS (SELECT * FROM M_MovementLine iol" + " INNER JOIN M_Movement io ON (iol.M_Movement_ID=io.M_Movement_ID) " + "WHERE iol.DD_OrderLine_ID=DD_OrderLine.DD_OrderLine_ID AND io.DocStatus IN ('IP','WC'))";      MDDOrderLine[] lines=order.getLines(where,"M_Product_ID");      for (int i=0; i < lines.length; i++) {        MDDOrderLine line=lines[i];        MLocator l=new MLocator(getCtx(),line.getM_Locator_ID(),get_TrxName());        if (l.getM_Warehouse_ID() != p_M_Warehouse_ID)         continue;        log.fine("check: " + line);        BigDecimal onHand=Env.ZERO;        BigDecimal toDeliver=line.getConfirmedQty();        MProduct product=line.getProduct();        if (product != null && toDeliver.signum() == 0)         continue;        if (line.getC_Charge_ID() != 0 && toDeliver.signum() == 0)         continue;        BigDecimal unconfirmedShippedQty=Env.ZERO;        if (p_IsUnconfirmedInOut && product != null && toDeliver.signum() != 0) {          String where2="EXISTS (SELECT * FROM M_Movement io WHERE io.M_Movement_ID=M_MovementLine.M_Movement_ID AND io.DocStatus IN ('IP','WC'))";          MMovementLine[] iols=MMovementLine.getOfOrderLine(getCtx(),line.getDD_OrderLine_ID(),where2,null);          for (int j=0; j < iols.length; j++)           unconfirmedShippedQty=unconfirmedShippedQty.add(iols[j].getMovementQty());          String logInfo="Unconfirmed Qty=" + unconfirmedShippedQty + " - ToDeliver="+ toDeliver+ "->";          toDeliver=toDeliver.subtract(unconfirmedShippedQty);          logInfo+=toDeliver;          if (toDeliver.signum() < 0) {            toDeliver=Env.ZERO;            logInfo+=" (set to 0)";          }          onHand=onHand.subtract(unconfirmedShippedQty);          log.fine(logInfo);        }        if ((product == null || !product.isStocked()) && (line.getQtyOrdered().signum() == 0 || toDeliver.signum() != 0)) {          if (!MDDOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule()))           createLine(order,line,toDeliver,null,false);          continue;        }        MProductCategory pc=MProductCategory.get(order.getCtx(),product.getM_Product_Category_ID());        String MMPolicy=pc.getMMPolicy();        if (MMPolicy == null || MMPolicy.length() == 0)         MMPolicy=client.getMMPolicy();        MStorage[] storages=getStorages(l.getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),product.getM_AttributeSet_ID(),line.getM_AttributeSetInstance_ID() == 0,minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy));        for (int j=0; j < storages.length; j++) {          MStorage storage=storages[j];          onHand=onHand.add(storage.getQtyOnHand());        }        boolean fullLine=onHand.compareTo(toDeliver) >= 0 || toDeliver.signum() < 0;        if (completeOrder && !fullLine) {          log.fine("Failed CompleteOrder - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ " - "+ line);          completeOrder=false;          break;        } else         if (fullLine && MDDOrder.DELIVERYRULE_CompleteLine.equals(order.getDeliveryRule())) {          log.fine("CompleteLine - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ ", ToDeliver="+ toDeliver+ " - "+ line);          createLine(order,line,toDeliver,storages,false);        } else         if (MDDOrder.DELIVERYRULE_Availability.equals(order.getDeliveryRule()) && (onHand.signum() > 0 || toDeliver.signum() < 0)) {          BigDecimal deliver=toDeliver;          if (deliver.compareTo(onHand) > 0)           deliver=onHand;          log.fine("Available - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ ", Delivering="+ deliver+ " - "+ line);          createLine(order,line,deliver,storages,false);        } else         if (MDDOrder.DELIVERYRULE_Force.equals(order.getDeliveryRule())) {          BigDecimal deliver=toDeliver;          log.fine("Force - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ ", Delivering="+ deliver+ " - "+ line);          createLine(order,line,deliver,storages,true);        } else         if (MDDOrder.DELIVERYRULE_Manual.equals(order.getDeliveryRule()))         log.fine("Manual - OnHand=" + onHand + " (Unconfirmed="+ unconfirmedShippedQty+ ") - "+ line); else         log.fine("Failed: " + order.getDeliveryRule() + " - OnHand="+ onHand+ " (Unconfirmed="+ unconfirmedShippedQty+ "), ToDeliver="+ toDeliver+ " - "+ line);      }      if (completeOrder && MDDOrder.DELIVERYRULE_CompleteOrder.equals(order.getDeliveryRule())) {        for (int i=0; i < lines.length; i++) {          MDDOrderLine line=lines[i];          MLocator l=new MLocator(getCtx(),line.getM_Locator_ID(),get_TrxName());          if (l.getM_Warehouse_ID() != p_M_Warehouse_ID)           continue;          MProduct product=line.getProduct();          BigDecimal toDeliver=line.getQtyOrdered().subtract(line.getQtyDelivered());          MStorage[] storages=null;          if (product != null && product.isStocked()) {            MProductCategory pc=MProductCategory.get(order.getCtx(),product.getM_Product_Category_ID());            String MMPolicy=pc.getMMPolicy();            if (MMPolicy == null || MMPolicy.length() == 0)             MMPolicy=client.getMMPolicy();            storages=getStorages(l.getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),product.getM_AttributeSet_ID(),line.getM_AttributeSetInstance_ID() == 0,minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy));          }          createLine(order,line,toDeliver,storages,false);        }      }      m_line+=1000;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,m_sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  completeMovement();  return "@Created@ = " + m_created;}  }
class C{  protected long copyCollection(MongoClient primary,CollectionId collectionId,long timestamp) throws InterruptedException {  RecordsForCollection factory=recordMakers.forCollection(collectionId);  MongoDatabase db=primary.getDatabase(collectionId.dbName());  MongoCollection<Document> docCollection=db.getCollection(collectionId.name());  long counter=0;  try (MongoCursor<Document> cursor=docCollection.find().iterator()){    while (cursor.hasNext()) {      Document doc=cursor.next();      logger.trace("Found existing doc in {}: {}",collectionId,doc);      counter+=factory.recordObject(collectionId,doc,timestamp);    }  }   return counter;}  }
class C{  private static void flipScanEdgeEvent(DTSweepContext tcx,TriangulationPoint ep,TriangulationPoint eq,DelaunayTriangle flipTriangle,DelaunayTriangle t,TriangulationPoint p){  DelaunayTriangle ot;  TriangulationPoint op, newP;  boolean inScanArea;  ot=t.neighborAcross(p);  op=ot.oppositePoint(t,p);  if (ot == null) {    throw new RuntimeException("[BUG:FIXME] FLIP failed due to missing triangle");  }  if (tcx.isDebugEnabled()) {    System.out.println("[FLIP:SCAN] - scan next point");    tcx.getDebugContext().setPrimaryTriangle(t);    tcx.getDebugContext().setSecondaryTriangle(ot);  }  inScanArea=inScanArea(eq,flipTriangle.pointCCW(eq),flipTriangle.pointCW(eq),op);  if (inScanArea) {    flipEdgeEvent(tcx,eq,op,ot,op);  } else {    newP=nextFlipPoint(ep,eq,ot,op);    flipScanEdgeEvent(tcx,ep,eq,flipTriangle,ot,newP);  }}  }
class C{  public static void waitTillOperationReceived(){synchronized (lockObject) {    if (!receivedOperation) {      try {        lockObject.wait(10000);      } catch (      InterruptedException e) {        fail("interrupted");      }    }    if (!receivedOperation) {      fail(" operation should have been received but it has not been received yet");    }  }}  }
class C{  public void clear(){synchronized (_queue) {    _queue.removeAllElements();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("invalid^Name","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public Attribute(String nsAlias,String name,String value){  if (nsAlias == null) {    int separator=name.indexOf(':');    if (separator > 0) {      nsAlias=name.substring(0,separator);      name=name.substring(separator + 1);    }  }  this.nsAlias=nsAlias;  this.name=name;  this.value=value;}  }
class C{  public void normalize(){  if (getOp() == IfOp.NE && getB().isLiteral() && getB().equals(LiteralArg.FALSE)) {    insn.changeCondition(IfOp.EQ,getA(),LiteralArg.TRUE);  }}  }
class C{  public void loadConfiguration(){  general.updateNotifications=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"UpdateNotifications",true).getBoolean();  general.controlCircuitOreDict=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"ControlCircuitOreDict",true).getBoolean();  general.logPackets=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"LogPackets",false).getBoolean();  general.dynamicTankEasterEgg=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"DynamicTankEasterEgg",false).getBoolean();  general.voiceServerEnabled=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"VoiceServerEnabled",true).getBoolean();  general.cardboardSpawners=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"AllowSpawnerBoxPickup",true).getBoolean();  general.enableWorldRegeneration=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"EnableWorldRegeneration",false).getBoolean();  general.creativeOverrideElectricChest=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"CreativeOverrideElectricChest",true).getBoolean();  general.spawnBabySkeletons=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"SpawnBabySkeletons",true).getBoolean();  general.obsidianTNTDelay=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"ObsidianTNTDelay",100).getInt();  general.obsidianTNTBlastRadius=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"ObsidianTNTBlastRadius",12).getInt();  general.UPDATE_DELAY=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"ClientUpdateDelay",10).getInt();  general.osmiumPerChunk=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"OsmiumPerChunk",12).getInt();  general.copperPerChunk=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"CopperPerChunk",16).getInt();  general.tinPerChunk=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"TinPerChunk",14).getInt();  general.saltPerChunk=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"SaltPerChunk",2).getInt();  general.userWorldGenVersion=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"WorldRegenVersion",0).getInt();  general.FROM_IC2=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"JoulesToEU",10D).getDouble();  general.TO_IC2=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"EUToJoules",.1D).getDouble();  general.FROM_TE=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"JoulesToRF",2.5D).getDouble();  general.TO_TE=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"RFToJoules",0.4D).getDouble();  general.FROM_H2=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"HydrogenEnergyDensity",200D,"Determines Electrolytic Separator usage").getDouble();  general.ETHENE_BURN_TIME=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"EthyleneBurnTime",40).getInt();  general.ENERGY_PER_REDSTONE=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"EnergyPerRedstone",10000D).getDouble();  general.DISASSEMBLER_USAGE=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"DisassemblerEnergyUsage",10).getInt();  general.VOICE_PORT=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"VoicePort",36123,null,1,65535).getInt();  general.maxUpgradeMultiplier=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"UpgradeModifier",10,null,1,Integer.MAX_VALUE).getInt();  general.minerSilkMultiplier=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"MinerSilkMultiplier",6).getDouble();  general.prefilledPortableTanks=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"PrefilledPortableTanks",true).getBoolean();  general.blacklistIC2=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"BlacklistIC2Power",false).getBoolean();  general.blacklistRF=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"BlacklistRFPower",false).getBoolean();  String s=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"EnergyType","J",null,new String[]{"J","RF","MJ","EU"}).getString();  if (s != null) {    if (s.trim().equalsIgnoreCase("j") || s.trim().equalsIgnoreCase("joules")) {      general.activeType=EnergyType.J;    } else     if (s.trim().equalsIgnoreCase("rf") || s.trim().equalsIgnoreCase("te") || s.trim().equalsIgnoreCase("thermal expansion")) {      general.activeType=EnergyType.RF;    } else     if (s.trim().equalsIgnoreCase("eu") || s.trim().equalsIgnoreCase("ic2")) {      general.activeType=EnergyType.EU;    } else     if (s.trim().equalsIgnoreCase("mj") || s.trim().equalsIgnoreCase("bc") || s.trim().equalsIgnoreCase("buildcraft")) {      general.activeType=EnergyType.MJ;    }  }  s=Mekanism.configuration.get(Configuration.CATEGORY_GENERAL,"Temperature Units","K",null,new String[]{"K","C","R","F"}).getString();  if (s != null) {    if (s.trim().equalsIgnoreCase("k") || s.trim().equalsIgnoreCase("kelvin")) {      general.tempUnit=TempType.K;    } else     if (s.trim().equalsIgnoreCase("c") || s.trim().equalsIgnoreCase("celsius") || s.trim().equalsIgnoreCase("centigrade")) {      general.tempUnit=TempType.C;    } else     if (s.trim().equalsIgnoreCase("r") || s.trim().equalsIgnoreCase("rankine")) {      general.tempUnit=TempType.R;    } else     if (s.trim().equalsIgnoreCase("f") || s.trim().equalsIgnoreCase("fahrenheit")) {      general.tempUnit=TempType.F;    } else     if (s.trim().equalsIgnoreCase("a") || s.trim().equalsIgnoreCase("ambient") || s.trim().equalsIgnoreCase("stp")) {      general.tempUnit=TempType.STP;    }  }  general.laserRange=Mekanism.configuration.get("general","LaserRange",64).getInt();  general.laserEnergyNeededPerHardness=Mekanism.configuration.get("general","LaserDiggingEnergy",100000).getInt();  general.destroyDisabledBlocks=Mekanism.configuration.get("general","DestroyDisabledBlocks",true).getBoolean();  general.enableAmbientLighting=Mekanism.configuration.get("general","EnableAmbientLighting",true).getBoolean();  general.ambientLightingLevel=Mekanism.configuration.get("general","AmbientLightingLevel",15).getInt();  for (  MachineType type : MachineType.getValidMachines()) {    machines.setEntry(type.name,Mekanism.configuration.get("machines",type.name + "Enabled",true).getBoolean());  }  usage.enrichmentChamberUsage=Mekanism.configuration.get("usage","EnrichmentChamberUsage",50D).getDouble();  usage.osmiumCompressorUsage=Mekanism.configuration.get("usage","OsmiumCompressorUsage",100D).getDouble();  usage.combinerUsage=Mekanism.configuration.get("usage","CombinerUsage",50D).getDouble();  usage.crusherUsage=Mekanism.configuration.get("usage","CrusherUsage",50D).getDouble();  usage.factoryUsage=Mekanism.configuration.get("usage","FactoryUsage",50D).getDouble();  usage.metallurgicInfuserUsage=Mekanism.configuration.get("usage","MetallurgicInfuserUsage",50D).getDouble();  usage.purificationChamberUsage=Mekanism.configuration.get("usage","PurificationChamberUsage",200D).getDouble();  usage.energizedSmelterUsage=Mekanism.configuration.get("usage","EnergizedSmelterUsage",50D).getDouble();  usage.digitalMinerUsage=Mekanism.configuration.get("usage","DigitalMinerUsage",100D).getDouble();  usage.electricPumpUsage=Mekanism.configuration.get("usage","ElectricPumpUsage",100D).getDouble();  usage.rotaryCondensentratorUsage=Mekanism.configuration.get("usage","RotaryCondensentratorUsage",50D).getDouble();  usage.oxidationChamberUsage=Mekanism.configuration.get("usage","OxidationChamberUsage",200D).getDouble();  usage.chemicalInfuserUsage=Mekanism.configuration.get("usage","ChemicalInfuserUsage",200D).getDouble();  usage.chemicalInjectionChamberUsage=Mekanism.configuration.get("usage","ChemicalInjectionChamberUsage",400D).getDouble();  usage.precisionSawmillUsage=Mekanism.configuration.get("usage","PrecisionSawmillUsage",50D).getDouble();  usage.chemicalDissolutionChamberUsage=Mekanism.configuration.get("usage","ChemicalDissolutionChamberUsage",400D).getDouble();  usage.chemicalWasherUsage=Mekanism.configuration.get("usage","ChemicalWasherUsage",200D).getDouble();  usage.chemicalCrystallizerUsage=Mekanism.configuration.get("usage","ChemicalCrystallizerUsage",400D).getDouble();  usage.seismicVibratorUsage=Mekanism.configuration.get("usage","SeismicVibratorUsage",50D).getDouble();  usage.pressurizedReactionBaseUsage=Mekanism.configuration.get("usage","PressurizedReactionBaseUsage",5D).getDouble();  usage.fluidicPlenisherUsage=Mekanism.configuration.get("usage","FluidicPlenisherUsage",100D).getDouble();  usage.laserUsage=Mekanism.configuration.get("usage","LaserUsage",5000D).getDouble();  usage.gasCentrifugeUsage=Mekanism.configuration.get("usage","GasCentrifugeUsage",100D).getDouble();  usage.heavyWaterElectrolysisUsage=Mekanism.configuration.get("usage","HeavyWaterElectrolysisUsage",800D).getDouble();  Tier.loadConfig();  if (Mekanism.configuration.hasChanged()) {    Mekanism.configuration.save();  }}  }
class C{  public Node represent(Object data){  return representer.represent(data);}  }
class C{  public LazyTokenStream(TokenSource tokenSource,ITokenDefProvider tokenDefProvider){  super(tokenSource,tokenDefProvider);  tokens=new JSTokenList();}  }
class C{  public boolean isTheme(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_THEME_LEGACY || b == MAGIC_THEME;}  }
class C{  public Company untilNow(boolean untilNow){  this.untilNow=untilNow;  return this;}  }
class C{  protected void addAxioms(final Collection<BigdataStatement> axioms){  super.addAxioms(axioms);  final BigdataValueFactory valueFactory=getValueFactory();  axioms.add(valueFactory.createStatement(SAMPLE.SIMILAR_TO,RDF.TYPE,RDF.PROPERTY,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(SAMPLE.SIMILAR_TO,RDF.TYPE,RDFS.RESOURCE,null,StatementEnum.Axiom));  axioms.add(valueFactory.createStatement(SAMPLE.SIMILAR_TO,RDFS.SUBPROPERTYOF,SAMPLE.SIMILAR_TO,null,StatementEnum.Axiom));}  }
class C{  public static ActiveMQBuffer dynamicBuffer(final int size){  return new ChannelBufferWrapper(Unpooled.buffer(size));}  }
class C{  private static void insertionSort(double[] keys,int[] vals,final int start,final int end){  for (int i=start + 1; i < end; i++) {    for (int j=i; j > start; j--) {      if (keys[j] >= keys[j - 1]) {        break;      }      swap(keys,vals,j,j - 1);    }  }}  }
class C{  public static TimeoutException createTimeoutException(final ErrorKeys errorId,final long sleepPeriod){  return new TimeoutException(errorId.toString() + "\r\n" + "Timeout after "+ sleepPeriod+ " miliseconds.");}  }
class C{  private static float strength(final Collection<Unit> units,final boolean attacking,final boolean sea,final boolean transportsFirst){  float strength=0.0F;  if (units.isEmpty()) {    return strength;  }  if (attacking && Match.noneMatch(units,Matches.unitHasAttackValueOfAtLeast(1))) {    return strength;  } else   if (!attacking && Match.noneMatch(units,Matches.unitHasDefendValueOfAtLeast(1))) {    return strength;  }  for (  final Unit u : units) {    final UnitAttachment unitAttachment=UnitAttachment.get(u.getType());    if (unitAttachment.getIsInfrastructure()) {      continue;    } else     if (unitAttachment.getIsSea() == sea) {      final int unitAttack=unitAttachment.getAttack(u.getOwner());      strength+=1.00F;      if (attacking) {        strength+=unitAttack * unitAttachment.getHitPoints();      } else {        strength+=unitAttachment.getDefense(u.getOwner()) * unitAttachment.getHitPoints();      }      if (attacking) {        if (unitAttack == 0) {          strength-=0.50F;        }      }      if (unitAttack == 0 && unitAttachment.getTransportCapacity() > 0 && !transportsFirst) {        strength-=0.50F;      }    } else     if (unitAttachment.getIsAir() == sea) {      strength+=1.00F;      if (attacking) {        strength+=unitAttachment.getAttack(u.getOwner()) * unitAttachment.getAttackRolls(u.getOwner());      } else {        strength+=unitAttachment.getDefense(u.getOwner());      }    }  }  if (attacking && !sea) {    final int art=Match.countMatches(units,Matches.UnitIsArtillery);    final int artSupport=Match.countMatches(units,Matches.UnitIsArtillerySupportable);    strength+=Math.min(art,artSupport);  }  return strength;}  }
class C{  public static final void registerClass(int ad_table_id,Class<? extends ICreateFrom> cl){  s_registeredClasses.put(ad_table_id,cl);  s_log.info("Registered AD_Table_ID=" + ad_table_id + ", Class="+ cl);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getVideoFrame().getVideoZoomX(VideoFrame.getAspectRatioCode(getString(stack))));}  }
class C{  @SafeVarargs public final Zipper<A> insertNext(A... as){  return new Zipper<>(front,back.plus(as),position);}  }
class C{  public static <T,V>void show(BackgroundTask<T,V> task){  show(task,null,null,false);}  }
class C{  public void vorticityConfinement(float[] Fvc_x,float[] Fvc_y){  float dw_dx, dw_dy;  float length;  float v;  for (int i=1, j=1, idx=i + totalWidth; j <= height; ) {    float c=curl(idx);    curl[idx]=c > 0 ? c : -c;    if (i < width) {      i++;      idx++;    } else {      i=1;      j++;      idx+=3;    }  }  for (int i=2, j=2, idx=i + totalWidth * j; j < height; ) {    dw_dx=(curl[idx + 1] - curl[idx - 1]) * 0.5f;    dw_dy=(curl[idx + totalWidth] - curl[idx - totalWidth]) * 0.5f;    length=1f / ((float)Math.sqrt(dw_dx * dw_dx + dw_dy * dw_dy) + 0.000001f);    dw_dx*=length;    dw_dy*=length;    v=curl[idx];    Fvc_x[idx]=dw_dy * -v;    Fvc_y[idx]=dw_dx * v;    if (i < width - 1) {      i++;      idx++;    } else {      i=2;      j++;      idx+=5;    }  }}  }
class C{  public List<Patch> patch_fromText(String textline) throws IllegalArgumentException {  List<Patch> patches=new LinkedList<Patch>();  if (textline.length() == 0) {    return patches;  }  List<String> textList=Arrays.asList(textline.split("\n"));  LinkedList<String> text=new LinkedList<String>(textList);  Patch patch;  Pattern patchHeader=Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");  Matcher m;  char sign;  String line;  while (!text.isEmpty()) {    m=patchHeader.matcher(text.getFirst());    if (!m.matches()) {      throw new IllegalArgumentException("Invalid patch string: " + text.getFirst());    }    patch=new Patch();    patches.add(patch);    patch.start1=Integer.parseInt(m.group(1));    if (m.group(2).length() == 0) {      patch.start1--;      patch.length1=1;    } else     if (m.group(2).equals("0")) {      patch.length1=0;    } else {      patch.start1--;      patch.length1=Integer.parseInt(m.group(2));    }    patch.start2=Integer.parseInt(m.group(3));    if (m.group(4).length() == 0) {      patch.start2--;      patch.length2=1;    } else     if (m.group(4).equals("0")) {      patch.length2=0;    } else {      patch.start2--;      patch.length2=Integer.parseInt(m.group(4));    }    text.removeFirst();    while (!text.isEmpty()) {      try {        sign=text.getFirst().charAt(0);      } catch (      IndexOutOfBoundsException e) {        text.removeFirst();        continue;      }      line=text.getFirst().substring(1);      line=line.replace("+","%2B");      try {        line=URLDecoder.decode(line,"UTF-8");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }catch (      IllegalArgumentException e) {        throw new IllegalArgumentException("Illegal escape in patch_fromText: " + line,e);      }      if (sign == '-') {        patch.diffs.add(new Diff(Operation.DELETE,line));      } else       if (sign == '+') {        patch.diffs.add(new Diff(Operation.INSERT,line));      } else       if (sign == ' ') {        patch.diffs.add(new Diff(Operation.EQUAL,line));      } else       if (sign == '@') {        break;      } else {        throw new IllegalArgumentException("Invalid patch mode '" + sign + "' in: "+ line);      }      text.removeFirst();    }  }  return patches;}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  protected final void fireServiceRevoked(BeanContextServiceRevokedEvent bcsre){  Object[] copy;synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServiceRevokedListener)copy[i]).serviceRevoked(bcsre);  }}  }
class C{  private static AppletListener addInternal(AppletListener a,AppletListener b){  if (a == null)   return b;  if (b == null)   return a;  return new AppletEventMulticaster(a,b);}  }
class C{  @DSComment("Data serialization/deserialization") @DSSpec(DSCat.SERIALIZATION) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:50.831 -0500",hash_original_method="E613A4CA88B6248C79E5606341D1D797",hash_generated_method="96BFC0D30548295B2B07F5B529143609") public ParcelFileDescriptor openAccessory(UsbAccessory accessory){  try {    return mService.openAccessory(accessory);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in openAccessory",e);    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:07:29.082 -0500",hash_original_method="9F54CDA31FAC4F483D73C146FF485B4D",hash_generated_method="24C07D7E853778412BE894D7A9C6759E") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void closeEntry() throws IOException {  checkClosed();  if (currentEntry == null) {    return;  }  if (currentEntry instanceof java.util.jar.JarEntry) {    Attributes temp=((JarEntry)currentEntry).getAttributes();    if (temp != null && temp.containsKey("hidden")) {      return;    }  }  Exception failure=null;  try {    Streams.skipAll(this);  } catch (  Exception e) {    failure=e;  }  int inB, out;  if (currentEntry.compressionMethod == ZipEntry.DEFLATED) {    inB=inf.getTotalIn();    out=inf.getTotalOut();  } else {    inB=inRead;    out=inRead;  }  int diff=entryIn - inB;  if (diff != 0) {    ((PushbackInputStream)in).unread(buf,len - diff,diff);  }  try {    readAndVerifyDataDescriptor(inB,out);  } catch (  Exception e) {    if (failure == null) {      failure=e;    }  }  inf.reset();  lastRead=inRead=entryIn=len=0;  crc.reset();  currentEntry=null;  if (failure != null) {    if (failure instanceof IOException) {      throw (IOException)failure;    } else     if (failure instanceof RuntimeException) {      throw (RuntimeException)failure;    }    AssertionError error=new AssertionError();    error.initCause(failure);    throw error;  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  @Override public void deleteToken(String tokenIn){  try {    if (tokenIn == null) {      _log.error("Null token passed for deletion");      return;    }    URI tkId=_tokenEncoder.decode(tokenIn).getTokenId();    Token verificationToken=_dbClient.queryObject(Token.class,tkId);    if (verificationToken == null) {      _log.error("Could not fetch token from the database: {}",tkId);      return;    }    deleteTokenInternal(verificationToken);  } catch (  DatabaseException ex) {    throw SecurityException.fatals.databseExceptionDuringTokenDeletion(tokenIn,ex);  }catch (  SecurityException e) {    _log.error("Token decoding exception during deleteToken.",e);  }}  }
class C{  public static Map<String,RamlQueryParameter> convertClassToQueryParameters(final Parameter param,final JavaDocStore javaDocStore){  final Map<String,RamlQueryParameter> outParams=new TreeMap<>();  if (param == null || param.equals(Void.class)) {    return outParams;  }  final ApiParameterMetadata parameterMetadata=new ApiParameterMetadata(param);  if (mapSimpleType(param.getType()) != null) {    throw new IllegalArgumentException("This method should only be called on non primitive classes which will be broken down into query parameters");  }  try {    RamlModelFactory ramlModelFactory=RamlModelFactoryOfFactories.createRamlModelFactory();    for (    Field field : param.getType().getDeclaredFields()) {      if (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && !java.lang.reflect.Modifier.isTransient(field.getModifiers()) && !java.lang.reflect.Modifier.isVolatile(field.getModifiers())) {        RamlQueryParameter queryParam=ramlModelFactory.createRamlQueryParameter();        JavaDocEntry paramComment=javaDocStore == null ? null : javaDocStore.getJavaDoc(field.getName());        if (paramComment != null && StringUtils.hasText(paramComment.getComment())) {          queryParam.setDescription(paramComment.getComment());        }        queryParam.setDisplayName(field.getName());        RamlParamType simpleType=mapSimpleType(field.getType());        queryParam.setType(simpleType == null ? RamlParamType.STRING : simpleType);        queryParam.setRequired(parameterMetadata.isNullable());        queryParam.setRepeat(false);        outParams.put(field.getName(),queryParam);      }    }    return outParams;  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  private void createRecentSessionsMenu(){  String[] recentFiles=PrefManager.get().getRecentSessions();  recentSessionsMenu=new JMenu(ResourceManager.translate("file.recentsessions"));  recentSessionsMenu.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("file.recentsessions.mnem")).getKeyCode());  if (recentFiles.length > 1) {    for (int i=1; i < recentFiles.length; i++) {      if (!recentFiles[i].equals("")) {        JMenuItem item=new JMenuItem(recentFiles[i]);        ((JMenu)recentSessionsMenu).add(item);        item.addActionListener(listener);      }    }  } else {    recentSessionsMenu.setEnabled(false);  }}  }
class C{  public void applyFormat(File file) throws IOException {  byte[] rawBytes=Files.readAllBytes(file.toPath());  String raw=new String(rawBytes,encoding);  String rawUnix=LineEnding.toUnix(raw);  String formattedUnix=applySteps(rawUnix,file);  String formatted=applyLineEndings(formattedUnix,file);  byte[] formattedBytes=formatted.getBytes(encoding);  if (!Arrays.equals(rawBytes,formattedBytes)) {    Files.write(file.toPath(),formattedBytes,StandardOpenOption.TRUNCATE_EXISTING);  }}  }
class C{  private static boolean rectDisjoint(final double aMinLat,final double aMaxLat,final double aMinLon,final double aMaxLon,final double bMinLat,final double bMaxLat,final double bMinLon,final double bMaxLon){  return (aMaxLon < bMinLon || aMinLon > bMaxLon || aMaxLat < bMinLat || aMinLat > bMaxLat);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start:{      ProgressBarAsyncTask asyncTask=new ProgressBarAsyncTask(this.progressBar,this.textview);      asyncTask.execute("%");      break;    }}}  }
class C{  @Override public void handle(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  HttpMon httpMon=null;  try {    httpMon=httpMonFactory.start(request,response);    super.handle(target,baseRequest,request,response);  } catch (  Throwable e) {    httpMon.throwException(e);  } finally {    httpMon.stop();  }}  }
class C{  @NonNull public final View child(){  return child;}  }
class C{  private void jbInit() throws Exception {  this.setIconImage(org.compiere.Adempiere.getImage16());  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  this.setJMenuBar(menuBar);}  }
class C{  private void navigate(String url){  InputMethodManager imm=(InputMethodManager)this.cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(edittext.getWindowToken(),0);  if (!url.startsWith("http") && !url.startsWith("file:")) {    this.inAppWebView.loadUrl("http://" + url);  } else {    this.inAppWebView.loadUrl(url);  }  this.inAppWebView.requestFocus();}  }
class C{  public static LuaValue callFunction(LuaValue target){  try {    return (target != null && target.isfunction()) ? target.call() : LuaValue.NIL;  } catch (  Exception e) {    e.printStackTrace();    return LuaValue.NIL;  }}  }
class C{  public static void notEmpty(String string,String message){  if ((string == null) || (string.length() == 0)) {    throw new IllegalArgumentException(message);  }}  }
class C{  protected MailboxSession createSession(String userName,String password,Logger log,SessionType type){  return new SimpleMailboxSession(randomId(),userName,password,log,new ArrayList<Locale>(),getDelimiter(),type);}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (buffer == null) {    buffer=new byte[PipedInputStream.PIPE_SIZE];  }  isConnected=true;}  }
class C{  public ConfigurationException(Exception cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  static private double calcLogProbAtMu(double mu){  final double sigma=calcSigmaFromMu(mu);  return (-s_logSqrtTwoPi - Math.log(sigma));}  }
class C{  private Workflow.Method detachMirrorDeviceMethod(URI vplexURI,URI vplexMirrorURI,URI promotedVolumeURI,boolean discard){  return new Workflow.Method(DETACH_MIRROR_DEVICE_METHOD_NAME,vplexURI,vplexMirrorURI,promotedVolumeURI,discard);}  }
class C{  protected synchronized void open(){  if (!isOpen()) {    super.open();    writeHead();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    if (resolve)     return getDoclet();  return basicGetDoclet();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void createFileFromText(String sourceText,IPath path) throws IOException {  Preconditions.checkArgument(path.isAbsolute());  Path file=FileSystems.getDefault().getPath(path.toOSString());  Files.write(file,sourceText.getBytes());}  }
class C{  private Poi revertPoi(Long poiId){  Poi poi=poiDao.queryForId(poiId);  Poi backup=null;  Long oldPoiId=poi.getOldPoiId();  if (oldPoiId != null) {    backup=poiDao.queryForId(oldPoiId);    backup.setOld(false);    backup.setId(poi.getId());    savePoi(backup);    poi.setId(oldPoiId);  }  deletePoi(poi);  return backup;}  }
class C{  public List<T> find(int loc){  return findRange(loc).getMeta();}  }
class C{  private static int groupCount(String regex){  regex=" " + regex;  int idxOpen=regex.indexOf('[');  if (idxOpen != -1) {    int idxClose=regex.indexOf(']',idxOpen);    if (idxClose != -1) {      regex=regex.substring(0,idxOpen) + regex.substring(idxClose + 1);    }  }  Matcher matcher=GROUP.matcher(regex);  int groupCount=0;  while (matcher.find())   groupCount++;  return groupCount;}  }
class C{  public MultipartFormWriter(MultipartFormContentType contentType,OutputStream os){  if (os == null) {    throw new IllegalArgumentException("Output stream is required.");  }  this.out=new DataOutputStream(os);  this.boundary=contentType.getBoundary();}  }
class C{  NextWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public FastStringBuffer append(char[] chars){  int newCount=count + chars.length;  if (newCount > value.length) {    resizeForMinimum(newCount);  }  System.arraycopy(chars,0,value,count,chars.length);  count=newCount;  return this;}  }
class C{  public void readFromObject(Object object){  try {    Method method=BeanUtils.getReadMethod(object.getClass(),getName());    if (method != null) {      Object value=method.invoke(object,(Object[])null);      initializeValue(value);      if (value != null) {        for (Iterator iter=subProperties.iterator(); iter.hasNext(); ) {          Property subProperty=(Property)iter.next();          subProperty.readFromObject(value);        }      }    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected ExpressionImpl(){  super();}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(Context context,Fragment fragment){  fragment.startActivityForResult(getIntent(context),REQUEST_CROP);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.052 -0400",hash_original_method="EE56C51BBF77F8839109E7F97EF2C650",hash_generated_method="984A51642E868B1A8453A2229F0FFDDA") @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public Tourism(){  super();}  }
class C{  public boolean isEqual(ReadableInstant instant){  long instantMillis=DateTimeUtils.getInstantMillis(instant);  return isEqual(instantMillis);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOKE_CACHE'";  db.execSQL(sql);}  }
class C{  public static void format(String format,Object... args){  if (!isDisabled()) {    print(String.format(format,args));  }}  }
class C{  @Override public boolean ready() throws IOException {  ensureOpen();  return (count - pos) > 0;}  }
class C{  private ResultSet executeQuery(String query) throws SQLException {  if (m_stmt == null)   m_stmt=m_conn.createStatement();  long timein=System.currentTimeMillis();  s_logger.info("Issuing query: " + query);  ResultSet rset=m_stmt.executeQuery(query);  long time=System.currentTimeMillis() - timein;  s_logger.info("External query processing completed: " + (time / 1000) + "."+ (time % 1000)+ " seconds.");  return rset;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static PeriodFormatter alternateWithWeeks(){  if (cAlternateWithWeeks == null) {    cAlternateWithWeeks=new PeriodFormatterBuilder().appendLiteral("P").printZeroAlways().minimumPrintedDigits(4).appendYears().minimumPrintedDigits(2).appendPrefix("W").appendWeeks().appendDays().appendSeparatorIfFieldsAfter("T").appendHours().appendMinutes().appendSecondsWithOptionalMillis().toFormatter();  }  return cAlternateWithWeeks;}  }
class C{  public void testInvalidArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("maximum length must not be greater than minimum length"));}  }
class C{  public Skein384(){  super();}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  @PUT @Path("/{id}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updatePolicy(@Context final HttpServletRequest httpServletRequest,@PathParam("id") String policyId,String jsonString){  try {    logger.debug("Update policy " + policyId + "Received JSON string:\n"+ jsonString);    AutoScalerPolicy policy=PolicyParser.parse(jsonString);    policy.setPolicyId(policyId);    generatePolicyFromJsonString(policy,jsonString);    PolicyManager policyManager=PolicyManagerImpl.getInstance();    policyManager.updatePolicy(policy);    ApplicationManager appManager=ApplicationManagerImpl.getInstance();    List<Application> apps=appManager.getApplicationByPolicyId(policyId);    for (    Application app : apps) {      appManager.updatePolicyOfApplication(app.getAppId(),app.getPolicyState(),policy);    }    policyManager.updatePolicy(policy);    logger.info("Update policy for id: " + policyId + " for policy content : "+ jsonString);    return RestApiResponseHandler.getResponseOk(new JSONObject());  } catch (  IOException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_parse_JSON_error,e,httpServletRequest.getLocale());  }catch (  DataStoreException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_database_error,e,httpServletRequest.getLocale());  }catch (  MonitorServiceException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_cloud_error,e,httpServletRequest.getLocale());  }catch (  MetricNotSupportedException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_metric_not_supported_error,e,httpServletRequest.getLocale());  }catch (  NoMonitorServiceBoundException e) {    return RestApiResponseHandler.getResponseOk(new JSONObject());  }}  }
class C{  private ArticleConsumerLogMessages(){}  }
class C{  public boolean isAnimateShow(){  return animateShow;}  }
class C{  @Override public int compareTo(IntArrayListWritable message){  if (message == null) {    return 1;  }  if (this.size() < message.size()) {    return -1;  }  if (this.size() > message.size()) {    return 1;  }  for (int i=0; i < this.size(); i++) {    if (this.get(i) == null && message.get(i) == null) {      continue;    }    if (this.get(i) == null) {      return -1;    }    if (message.get(i) == null) {      return 1;    }    if (this.get(i).get() < message.get(i).get()) {      return -1;    }    if (this.get(i).get() > message.get(i).get()) {      return 1;    }  }  return 0;}  }
class C{  @NonNull @Contract(pure=true) private <Output>ChronosOperationResult<Output> createEmptyResult(@NonNull final ChronosOperation<Output> operation,final boolean broadcastResult){  final ChronosOperationResult<Output> operationResult;  final Class<? extends ChronosOperationResult<Output>> resultClass=operation.getResultClass();  try {    operationResult=resultClass.newInstance();  } catch (  InstantiationException e) {    throw new RuntimeException("Can't create a new instance of " + resultClass.getName());  }catch (  IllegalAccessException e) {    throw new RuntimeException(resultClass.getName() + " constructor is not accessible");  }  operationResult.setId(mLastOperationId.incrementAndGet());  operationResult.setOperation(operation);  operationResult.setBroadcast(broadcastResult);  return operationResult;}  }
class C{  public boolean hasFamilyName(){  return hasExtension(FamilyName.class);}  }
class C{  public Builder(Recurrence recur){  frequency=recur.frequency;  interval=recur.interval;  count=recur.count;  until=recur.until;  bySecond=new ArrayList<Integer>(recur.bySecond);  byMinute=new ArrayList<Integer>(recur.byMinute);  byHour=new ArrayList<Integer>(recur.byHour);  byDay=new ArrayList<ByDay>(recur.byDay);  byMonthDay=new ArrayList<Integer>(recur.byMonthDay);  byYearDay=new ArrayList<Integer>(recur.byYearDay);  byWeekNo=new ArrayList<Integer>(recur.byWeekNo);  byMonth=new ArrayList<Integer>(recur.byMonth);  bySetPos=new ArrayList<Integer>(recur.bySetPos);  workweekStarts=recur.workweekStarts;  xrules=new ListMultimap<String,String>(recur.xrules);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMPathElement(prefix,(AbstractDocument)doc);}  }
class C{  public MalformedStreamException(){  super();}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  transIndex=0;  out=null;  image=null;  pixels=null;  indexedPixels=null;  colorTab=null;  closeStream=false;  firstFrame=true;  return ok;}  }
class C{  public boolean isWorking(){  boolean result=false;  if (getNumberOfFailedHosts() == 0) {    result=true;  }  return result;}  }
class C{  final public void enable_tracing(){}  }
class C{  @Override public String toString(){  return harvesterName + ": time=" + getHarvestDuration()+ "ms harvests="+ getHarvestCount()+ " candidates="+ getTotalCandidateCount();}  }
class C{  public Pair reversePairList(){  Pair curResult=new Pair(null,this.info);  Pair nextOriginal=this.link;  while (nextOriginal != null) {    curResult=new Pair(curResult,nextOriginal.info);    nextOriginal=nextOriginal.link;  }  return curResult;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.953 -0500",hash_original_method="7245F245408FA6FEC683585F2431BE34",hash_generated_method="A9BC3AD2BEFC181DC641ACC40C3AFB3B") public Token peekNextToken() throws ParseException {  return (Token)peekNextToken(1)[0];}  }
class C{  public void revokeMembership(Collection<String> jids) throws XMPPException {  changeAffiliationByAdmin(jids,"none");}  }
class C{  static void testSetUp() throws Exception {  InstallSDE.install(new File(System.getProperty("test.classes","."),"SourceDebugExtensionTarg.class"),new File(System.getProperty("test.src","."),"testString"));}  }
class C{  public OdbcResponse(Object obj){  this.status=STATUS_SUCCESS;  this.obj=obj;  this.err=null;}  }
class C{  public Token(Word w,Token p,String type){  super(w.form,w.partOfSpeech,w.lemma,w.wordSense,p,w.start,w.end);  label=type;}  }
class C{  @Override @SuppressWarnings("unused") public void createPartControl(Composite parent){  parent.setLayout(new GridLayout());  DatabaseViewerToolBar databaseViewerToolBar=new DatabaseViewerToolBar();  databaseViewerToolBar.addSelectionChangedListener(this);  databaseViewerToolBar.createToolBar(parent,getSite().getShell());  PatternFilter filter=new PatternFilter();  FilteredTree tree=new FilteredTree(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL,filter,true);  viewer=tree.getViewer();  DrillDownAdapter drillDownAdapter=new DrillDownAdapter(viewer);  viewer.setContentProvider(initContentProvider());  viewer.setLabelProvider(new DatabaseViewLabelProvider(this));  viewer.setSorter(new NameSorter());  viewer.setInput(getViewSite());  makeActions();  hookContextMenu();  hookDoubleClickAction();  contributeToActionBars();}  }
class C{  public static boolean useRF(){  return Mekanism.hooks.CoFHCoreLoaded && !general.blacklistRF;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  @ExceptionHandler(ObjectOptimisticLockingFailureException.class) public String onConflict(HttpServletRequest req,Exception ex){  return handleError(req,ex,CONFLICT_MSG);}  }
class C{  protected boolean[] canHandleClassAsNthAttribute(AttrTypes attrTypes,int numAtts,int attrIndex,int classType,int classIndex){  if (classIndex == TestInstances.CLASS_IS_LAST) {    print("class attribute as last attribute");  } else {    print("class attribute as " + (classIndex + 1) + ". attribute");  }  printAttributeSummary(attrTypes,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  return runBasicTest(attrTypes,numAtts,attrIndex,classType,classIndex,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @Override public Client register(Object o){  providerComponents.add(o);  return this;}  }
class C{  public static void addMultRow(Matrix A,int i,int start,int to,double t,double[] c){  for (int j=start; j < to; j++)   A.increment(i,j,c[j] * t);}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (uriRequest == null) {    throw new IllegalArgumentException("HttpUriRequest must not be null");  }  if (responseHandler == null) {    throw new IllegalArgumentException("ResponseHandler must not be null");  }  if (responseHandler.getUseSynchronousMode() && !responseHandler.getUsePoolThread()) {    throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");  }  if (contentType != null) {    if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase)uriRequest).getEntity() != null && uriRequest.containsHeader(HEADER_CONTENT_TYPE)) {      Log.w(LOG_TAG,"Passed contentType will be ignored because HttpEntity sets content type");    } else {      uriRequest.setHeader(HEADER_CONTENT_TYPE,contentType);    }  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  AsyncHttpRequest request=newAsyncHttpRequest(client,httpContext,uriRequest,contentType,responseHandler,context);  threadPool.submit(request);  RequestHandle requestHandle=new RequestHandle(request);  if (context != null) {    List<RequestHandle> requestList;synchronized (requestMap) {      requestList=requestMap.get(context);      if (requestList == null) {        requestList=Collections.synchronizedList(new LinkedList<RequestHandle>());        requestMap.put(context,requestList);      }    }    requestList.add(requestHandle);    Iterator<RequestHandle> iterator=requestList.iterator();    while (iterator.hasNext()) {      if (iterator.next().shouldBeGarbageCollected()) {        iterator.remove();      }    }  }  return requestHandle;}  }
class C{  public boolean forEach(ObjectProcedure procedure){  Object[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public Control createControl(Composite parent,SelectionListener listener){  table=new TableViewer(parent,SWT.V_SCROLL | SWT.BORDER);  table.setContentProvider(CollectionContentProvider.newProvider(task.getMigrationGroups()));  table.getTable().addSelectionListener(listener);  return table.getControl();}  }
class C{  private static int[][] parse(int[][] members){  Vector ranges=new Vector();  int n=(members == null ? 0 : members.length);  for (int i=0; i < n; ++i) {    int lb, ub;    if (members[i].length == 1) {      lb=ub=members[i][0];    } else     if (members[i].length == 2) {      lb=members[i][0];      ub=members[i][1];    } else {      throw new IllegalArgumentException();    }    if (lb <= ub && lb < 0) {      throw new IllegalArgumentException();    }    accumulate(ranges,lb,ub);  }  return canonicalArrayForm(ranges);}  }
class C{  public synchronized void join(String nickname,String password,DiscussionHistory history,long timeout) throws XMPPException {  if (nickname == null || nickname.equals("")) {    throw new IllegalArgumentException("Nickname must not be null or blank.");  }  if (joined) {    leave();  }  Presence joinPresence=new Presence(Presence.Type.available);  joinPresence.setTo(room + "/" + nickname);  MUCInitialPresence mucInitialPresence=new MUCInitialPresence();  if (password != null) {    mucInitialPresence.setPassword(password);  }  if (history != null) {    mucInitialPresence.setHistory(history.getMUCHistory());  }  joinPresence.addExtension(mucInitialPresence);  for (  PacketInterceptor packetInterceptor : presenceInterceptors) {    packetInterceptor.interceptPacket(joinPresence);  }  PacketFilter responseFilter=new AndFilter(new FromMatchesFilter(room + "/" + nickname),new PacketTypeFilter(Presence.class));  PacketCollector response=null;  Presence presence;  try {    response=connection.createPacketCollector(responseFilter);    connection.sendPacket(joinPresence);    presence=(Presence)response.nextResult(timeout);  }  finally {    if (response != null) {      response.cancel();    }  }  if (presence == null) {    throw new XMPPException("No response from server.");  } else   if (presence.getError() != null) {    throw new XMPPException(presence.getError());  }  this.nickname=nickname;  joined=true;  userHasJoined();}  }
class C{  @Override public void ACONST_NULL(){  env.topFrame().operandStack.pushNullRef();}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("[");  buf.append(attributeId);  buf.append(": ");  if (hasValue()) {    buf.append(textValue);  }  if (hasSubElements()) {    buf.append(subElements.toString());  }  if (hasSubAttributes()) {    buf.append(subAttributes.toString());  }  buf.append("]");  return buf.toString();}  }
class C{  public SQLClientInfoException(String reason,String SQLState,int vendorCode,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,SQLState,vendorCode);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean applicable(Example example){  if (this.hypothesis.applicable(example)) {    return true;  } else {    return false;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean isUseClassName(){  return useClassName;}  }
class C{  public RoundChart(CategorySeries dataset,DefaultRenderer renderer){  mDataset=dataset;  mRenderer=renderer;}  }
class C{  @Override public boolean isBored(){  return this.state.ordinal() >= MentalState.ASLEEP.ordinal();}  }
class C{  public static int count(final String text){  return text.length();}  }
class C{  public UCrop useSourceImageAspectRatio(){  mCropOptionsBundle.putBoolean(EXTRA_ASPECT_RATIO_SET,true);  mCropOptionsBundle.putInt(EXTRA_ASPECT_RATIO_X,0);  mCropOptionsBundle.putInt(EXTRA_ASPECT_RATIO_Y,0);  return this;}  }
class C{  public void startLocal(int address,RegisterSpec startedLocal){  if (DEBUG) {    System.err.printf("%04x start %s\n",address,startedLocal);  }  int regNum=startedLocal.getReg();  startedLocal=filterSpec(startedLocal);  aboutToProcess(address,regNum);  RegisterSpec existingLocal=regs.get(regNum);  if (startedLocal.equalsUsingSimpleType(existingLocal)) {    return;  }  RegisterSpec movedLocal=regs.findMatchingLocal(startedLocal);  if (movedLocal != null) {    addOrUpdateEnd(address,Disposition.END_MOVED,movedLocal);  }  int endAt=endIndices[regNum];  if (existingLocal != null) {    add(address,Disposition.END_REPLACED,existingLocal);  } else   if (endAt >= 0) {    Entry endEntry=result.get(endAt);    if (endEntry.getAddress() == address) {      if (endEntry.matches(startedLocal)) {        result.set(endAt,null);        nullResultCount++;        regs.put(startedLocal);        endIndices[regNum]=-1;        return;      } else {        endEntry=endEntry.withDisposition(Disposition.END_REPLACED);        result.set(endAt,endEntry);      }    }  }  if (regNum > 0) {    RegisterSpec justBelow=regs.get(regNum - 1);    if ((justBelow != null) && justBelow.isCategory2()) {      addOrUpdateEnd(address,Disposition.END_CLOBBERED_BY_NEXT,justBelow);    }  }  if (startedLocal.isCategory2()) {    RegisterSpec justAbove=regs.get(regNum + 1);    if (justAbove != null) {      addOrUpdateEnd(address,Disposition.END_CLOBBERED_BY_PREV,justAbove);    }  }  add(address,Disposition.START,startedLocal);}  }
class C{  private void calcXValAverageLength(){  if (mXVals.size() <= 0) {    mXValAverageLength=1;    return;  }  float sum=1f;  for (int i=0; i < mXVals.size(); i++) {    sum+=mXVals.get(i).length();  }  mXValAverageLength=sum / (float)mXVals.size();}  }
class C{  public static float minX(final CGRect aRect){  return aRect.origin.x;}  }
class C{  public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.INTERFACE_SCOPE__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public static Buffer toBuffer(ByteBuffer data){  if (data == null) {    return null;  }  Buffer rc;  if (data.isDirect()) {    rc=new Buffer(data.remaining());    data.get(rc.data);  } else {    rc=new Buffer(data);    data.position(data.position() + data.remaining());  }  return rc;}  }
class C{  public Period(final Frequency f){switch (f) {case Once:case NoFrequency:    units=TimeUnit.Days;  length=0;break;case Annual:units=TimeUnit.Years;length=1;break;case Semiannual:case EveryFourthMonth:case Quarterly:case Bimonthly:case Monthly:units=TimeUnit.Months;length=12 / f.toInteger();break;case EveryFourthWeek:case Biweekly:case Weekly:units=TimeUnit.Weeks;length=52 / f.toInteger();break;case Daily:units=TimeUnit.Days;length=1;break;default :throw new LibraryException(UNKNOWN_FREQUENCY);}}  }
class C{  public int length(){  return bits.length << LOG_BITS_PER_UNIT;}  }
class C{  public final static boolean isReallyDialable(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+';}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.100 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public Polygon2D(){  xpoints=new float[4];  ypoints=new float[4];}  }
class C{  public Type resolveNames(ClassDefinition c,Type t,boolean synth){  if (tracing)   dtEvent("Environment.resolveNames: " + c + ", "+ t);switch (t.getTypeCode()) {case TC_CLASS:{      Identifier name=t.getClassName();      Identifier rname;      if (synth) {        rname=resolvePackageQualifiedName(name);      } else {        rname=c.resolveName(this,name);      }      if (name != rname) {        t=Type.tClass(rname);      }      break;    }case TC_ARRAY:  t=Type.tArray(resolveNames(c,t.getElementType(),synth));break;case TC_METHOD:{Type ret=t.getReturnType();Type rret=resolveNames(c,ret,synth);Type args[]=t.getArgumentTypes();Type rargs[]=new Type[args.length];boolean changed=(ret != rret);for (int i=args.length; i-- > 0; ) {  Type arg=args[i];  Type rarg=resolveNames(c,arg,synth);  rargs[i]=rarg;  if (arg != rarg) {    changed=true;  }}if (changed) {  t=Type.tMethod(rret,rargs);}break;}}return t;}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  @Override public boolean match(SimEvent ev){  return false;}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  SVGOMPolygonElement pe=(SVGOMPolygonElement)e;  try {    SVGOMAnimatedPoints _points=pe.getSVGOMAnimatedPoints();    _points.check();    SVGPointList pl=_points.getAnimatedPoints();    int size=pl.getNumberOfItems();    if (size == 0) {      shapeNode.setShape(DEFAULT_SHAPE);    } else {      AWTPolygonProducer app=new AWTPolygonProducer();      app.setWindingRule(CSSUtilities.convertFillRule(e));      app.startPoints();      for (int i=0; i < size; i++) {        SVGPoint p=pl.getItem(i);        app.point(p.getX(),p.getY());      }      app.endPoints();      shapeNode.setShape(app.getShape());    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public void addSubjectAlternativeName(int tag,String name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public String toString(){  return "move " + tile;}  }
class C{  @SuppressWarnings("unused") public void log(final Map<byte[],CRV> rm){  SolrConnector connector=segment.fulltext().getDefaultConnector();  for (  Map.Entry<byte[],CRV> entry : rm.entrySet()) {    if (entry == null || entry.getValue() == null)     continue;    try {      LoadTimeURL md=connector.getLoadTimeURL(ASCII.String(entry.getKey()));      ConcurrentLog.info("CollectionConfiguration","CR for " + md.url);      ConcurrentLog.info("CollectionConfiguration",">> " + entry.getValue().toString());    } catch (    final IOException e) {      ConcurrentLog.logException(e);    }  }}  }
class C{  private static boolean tryNewConfiguration(){  for (int i=0; i < numFlows; i++) {    if (++flows[i][2] <= network[flows[i][0]][flows[i][1]]) {      outgoing[flows[i][0]][flows[i][1]]=flows[i][2];      return true;    }    flows[i][2]=0;    outgoing[flows[i][0]][flows[i][1]]=0;  }  return false;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public void popStack(){  stackPointer--;}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof TObjectFloatHashMap)) {    return false;  }  TObjectFloatHashMap that=(TObjectFloatHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<K>(that));}  }
class C{  public XYEntry<K,V> removeByIndex(int index){  K key=indexList.remove(index);  return new XYEntry<K,V>(key,this.remove(key));}  }
class C{  public void addImplicitCollection(final Class<?> ownerType,final String fieldName,final Class<?> itemType){  addImplicitCollection(ownerType,fieldName,null,itemType);}  }
class C{  public UnsignedLong add(long increment){  long v=getValue() + increment;  if (increment > 0 && (getValue() < 0 || v < getValue()))   return new UnsignedLong(bigIntegerValue().add(BigInteger.valueOf(increment)));  return valueOf(v);}  }
class C{  public static String[] arraySplit(String s,char separatorChar,boolean trim){  if (s == null) {    return null;  }  int length=s.length();  if (length == 0) {    return new String[0];  }  ArrayList<String> list=New.arrayList();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == separatorChar) {      String e=buff.toString();      list.add(trim ? e.trim() : e);      buff.setLength(0);    } else     if (c == '\\' && i < length - 1) {      buff.append(s.charAt(++i));    } else {      buff.append(c);    }  }  String e=buff.toString();  list.add(trim ? e.trim() : e);  String[] array=new String[list.size()];  list.toArray(array);  return array;}  }
class C{  public static void add(List<String> options,String option,String value){  options.add("-" + option);  options.add("" + value);}  }
class C{  public Object executeQuery(DefaultQuery query,Object[] parameters,Set buckets) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  long startTime=0L;  Object result=null;  boolean traceOn=DefaultQuery.QUERY_VERBOSE || query.isTraced();  if (traceOn && this.proxy != null) {    startTime=NanoTimer.getTime();  }  QueryObserver indexObserver=query.startTrace();  try {    result=this.proxy.executeQuery(query,parameters,buckets);  }  finally {    query.endTrace(indexObserver,startTime,result);  }  return result;}  }
class C{  public RegisterSpecList withoutLast(){  int newSize=size() - 1;  if (newSize == 0) {    return EMPTY;  }  RegisterSpecList result=new RegisterSpecList(newSize);  for (int i=0; i < newSize; i++) {    result.set0(i,get0(i));  }  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  public byte[] receive() throws IOException {  if (connection != null) {    packet.setLength(DatagramConnection.DEFAULT_DATAGRAM_SIZE);    connection.receive(packet);    int packetLength=packet.getLength();    byte[] data=new byte[packetLength];    System.arraycopy(packet.getData(),0,data,0,packetLength);    return data;  } else {    throw new IOException("Connection not openned");  }}  }
class C{  public HaskellCatalog(final String path){  this.functions=new HashMap<>();  this.categories=HashMultimap.create();  Document doc=getDocument(path,HaskellCatalog.XSD_PATH);  NodeList dataNodes=doc.getElementsByTagName("datatype");  NodeList classNodes=doc.getElementsByTagName("class");  NodeList functionNodes=doc.getElementsByTagName("function");  this.datatypes=this.parseDataType(dataNodes);  this.classes=this.parseClasses(classNodes);  Set<CatalogFunction> entries=this.parseFunctions(functionNodes,this.classes);  for (  CatalogFunction entry : entries) {    this.functions.put(entry.getName(),entry);    this.categories.put(entry.getCategory(),entry);  }}  }
class C{  @Ignore @Test public void testNotFirstLineNoLeadingSpaces(){  doReturn("").when(document).getLineContent(0);  doReturn("/*").when(document).getLineContent(1);  doReturn(" *").when(document).getLineContent(2);  final TextChange input=new TextChange.Builder().from(new TextPosition(1,2)).to(new TextPosition(2,2)).insert("\n *").build();  final TextChange output=interceptor.processChange(input,document);  assertNotNull(output);  final TextChange expected=new TextChange.Builder().from(new TextPosition(1,2)).to(new TextPosition(3,3)).insert("\n * \n */").build();  Assert.assertEquals(expected,output);}  }
class C{  private boolean isDelim(char c){  for (  Character ch : END_DELIMS) {    if (ch.charValue() == c)     return true;  }  return false;}  }
class C{  public ChangeableHighlightPainter(Paint paint,boolean rounded,float alpha){  setPaint(paint);  setRoundedEdges(rounded);  setAlpha(alpha);}  }
class C{  public static boolean isLatinSquare(char[][] s){  return isDistinctRow(s) && isDistinctColumn(s);}  }
class C{  private void loadExternal(){  Properties properties=new Properties();  try {    properties.loadFromXML(new FileInputStream(PROPERTIES_PATH));    for (    String key : properties.stringPropertyNames()) {      externalSupport.put(key,properties.getProperty(key));    }  } catch (  IOException ignore) {  }}  }
class C{  public WeakObjectRegistry(Collection<? extends E> c){  this();  addAll(c);}  }
class C{  private LRGenerator<? extends Object,? extends Object> createGenerator(CUP2Specification spec) throws GeneratorException {  LRGenerator<? extends Object,? extends Object> generator=null;  if (verbose)   log("algorithm = " + algorithm);  if (this.algorithm == null || this.algorithm.equals("lr1")) {    if (verbose)     log("instantiating lr1 generator...");    generator=new LR1Generator(spec);  } else   if (this.algorithm.equals("lr0")) {    if (verbose)     log("instantiating lr0 generator...");    generator=new LR0Generator(spec);  } else   if (this.algorithm.equals("lalr1")) {    if (verbose)     log("instantiating lalr1 generator...");    generator=new LALR1Generator(spec);  }  return generator;}  }
class C{  public static String readString(ByteBuffer buffer,boolean utf8){  if (utf8) {    readLen(buffer);    int bytesLen=readLen(buffer);    byte[] bytes=Buffers.readBytes(buffer,bytesLen);    String str=new String(bytes,CHARSET_UTF_8);    Buffers.readUByte(buffer);    return str;  } else {    int strLen=readLen16(buffer);    String str=Buffers.readString(buffer,strLen);    Buffers.readUShort(buffer);    return str;  }}  }
class C{  public static int convertType(final int type){switch (type) {case Types.BOOLEAN:    return PG_TYPE_BOOL;case Types.VARCHAR:  return PG_TYPE_VARCHAR;case Types.CLOB:return PG_TYPE_TEXT;case Types.CHAR:return PG_TYPE_BPCHAR;case Types.SMALLINT:return PG_TYPE_INT2;case Types.INTEGER:return PG_TYPE_INT4;case Types.BIGINT:return PG_TYPE_INT8;case Types.DECIMAL:return PG_TYPE_NUMERIC;case Types.REAL:return PG_TYPE_FLOAT4;case Types.DOUBLE:return PG_TYPE_FLOAT8;case Types.TIME:return PG_TYPE_TIME;case Types.DATE:return PG_TYPE_DATE;case Types.TIMESTAMP:return PG_TYPE_TIMESTAMP_NO_TMZONE;case Types.VARBINARY:return PG_TYPE_BYTEA;case Types.BLOB:return PG_TYPE_OID;case Types.ARRAY:return PG_TYPE_TEXTARRAY;default :return PG_TYPE_UNKNOWN;}}  }
class C{  public static int lookupHost(String hostname){  InetAddress inetAddress;  try {    inetAddress=InetAddress.getByName(hostname);  } catch (  UnknownHostException e) {    return -1;  }  byte[] addrBytes;  int addr;  addrBytes=inetAddress.getAddress();  addr=((addrBytes[3] & 0xff) << 24) | ((addrBytes[2] & 0xff) << 16) | ((addrBytes[1] & 0xff) << 8)| (addrBytes[0] & 0xff);  return addr;}  }
class C{  @Override public boolean wasNull() throws SQLException {  try {    debugCodeCall("wasNull");    checkClosed();    return wasNull;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public FibonacciHeap(){}  }
class C{  public static boolean isUnix(){  return (OS_NAME.contains("nix") || OS_NAME.contains("nux") || OS_NAME.indexOf("aix") > 0 || OS_NAME.contains("sunos"));}  }
class C{  public DrawerBuilder withDelayDrawerClickEvent(int delayDrawerClickEvent){  this.mDelayDrawerClickEvent=delayDrawerClickEvent;  return this;}  }
class C{  public static Test suite(final TestMode testMode){  return suite(getTemporaryJournal(),testMode);}  }
class C{  public double longestSideLength(){  return longestSideLength(this.p0,this.p1,this.p2);}  }
class C{  public static void initialize(Context context,@Nullable ImagePipelineConfig imagePipelineConfig,@Nullable DraweeConfig draweeConfig){  if (sIsInitialized) {    FLog.w(TAG,"Fresco has already been initialized! `Fresco.initialize(...)` should only be called " + "1 single time to avoid memory leaks!");  } else {    sIsInitialized=true;  }  context=context.getApplicationContext();  if (imagePipelineConfig == null) {    ImagePipelineFactory.initialize(context);  } else {    ImagePipelineFactory.initialize(imagePipelineConfig);  }  initializeDrawee(context,draweeConfig);}  }
class C{  protected void close(Statement stmt) throws SQLException {  DbUtils.close(stmt);}  }
class C{  public Vector3 floor(){  return new Vector3(Math.floor(x),Math.floor(y),Math.floor(z));}  }
class C{  private void fileBrowse(){  Shell shell=new Shell(Display.getDefault());  FilteredResourcesSelectionDialog dialog=new FilteredResourcesSelectionDialog(shell,false,ResourcesPlugin.getWorkspace().getRoot(),IResource.FILE);  dialog.setInitialPattern("*.dpans");  if (dialog.open() == ResourceSelectionDialog.OK) {    Object[] result=dialog.getResult();    if (result.length == 1) {      System.out.println(result[0].getClass());      if (result[0] instanceof File) {        File resource=(File)result[0];        file.setText(resource.getFullPath().toOSString());      }    }  }}  }
class C{  public static DeterministicKey deserialize(NetworkParameters params,byte[] serializedKey){  return deserialize(params,serializedKey,null);}  }
class C{  private void generalInformationDialogs(){  final SpeakerNPC npc=npcs.get("Nishiya");  npc.add(ConversationStates.ATTENDING,"Sato",null,ConversationStates.ATTENDING,"Sato is the sheep buyer of Semos city. " + "You will find him if you follow the path to the east.",null);  npc.add(ConversationStates.QUEST_OFFERED,"Sato",null,ConversationStates.QUEST_OFFERED,"Sato is the sheep buyer of Semos city. " + "You will find him if you follow the path to the east.",null);  List<String> berryStrings=new ArrayList<String>();  berryStrings.add("red berries");  berryStrings.add("berries");  berryStrings.add("sheepfood");  berryStrings.add("sheep food");  npc.addReply(berryStrings,"Sheep like to eat the red berries from the aeryberry bushes.");  npc.addReply("sheep","I sell fluffy sheep, it's my #job.");}  }
class C{  public LMDirichletSimilarity(float mu){  this.mu=mu;}  }
class C{  public ShowWorldPrefsAction(final OdorWorldPanel component){  super("World Preferences...");  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;  this.putValue(this.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_P,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(SMALL_ICON,ResourceManager.getImageIcon("Prefs.png"));  putValue(SHORT_DESCRIPTION,"Odor world preferences...");}  }
class C{  public static Result flowHistory(){  return getFlowHistory(Version.NEW);}  }
class C{  public VcfFormatDoubleAnnotator(AbstractDerivedFormatAnnotation annotation,int decimalPlaces){  assert annotation != null && annotation.getType().getClassType() == Double.class;  mAnnotation=annotation;  mDecimalPlaces=decimalPlaces;}  }
class C{  public static List<VOLocalizedText> trim(final List<VOLocalizedText> values,final Iterator<Locale> locales){  final Map<String,VOLocalizedText> mappedValues=new HashMap<String,VOLocalizedText>();  for (  final VOLocalizedText value : values) {    mappedValues.put(value.getLocale(),value);  }  final List<VOLocalizedText> result=new ArrayList<VOLocalizedText>();  while (locales.hasNext()) {    final String locale=locales.next().toString();    VOLocalizedText entry=mappedValues.get(locale);    if (entry == null) {      entry=new VOLocalizedText(locale,"");    }    result.add(entry);  }  return result;}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  return (Statement)clone();}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_ConversionType_ID"))     p_C_ConversionType_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("ValidFrom"))     p_ValidFrom=(Timestamp)para[i].getParameter(); else     if (name.equals("CreateReciprocalRate"))     p_CreateReciprocalRate="Y".equals(para[i].getParameter()); else     if (name.equals("DeleteOldImported"))     p_DeleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private String prepareWhere(String where){  where=combineWhere(where,"LocalCopyType != 300");  if (mOfflineOnly)   where=combineWhere(where,"LocalCopyPath IS NOT NULL");  if (!TextUtils.isEmpty(mSearchKey)) {    String searchKey=DatabaseUtils.sqlEscapeString("%" + mSearchKey + "%");    String searchWhere=COLUMN_ALBUM + " LIKE " + searchKey;    searchWhere+=" OR " + COLUMN_TITLE + " LIKE "+ searchKey;    searchWhere+=" OR " + COLUMN_ALBUM_ARTIST + " LIKE "+ searchKey;    searchWhere+=" OR " + COLUMN_ARTIST + " LIKE "+ searchKey;    where=combineWhere(where,searchWhere);  }  return where;}  }
class C{  public Instrumenter attachAdaptiveMultimethodVariationCollector(){  includeAdaptiveMultimethodVariation=true;  return this;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.REACTION__NAME:    setName((String)newValue);  return;case SexecPackage.REACTION__CHECK:setCheck((Check)newValue);return;case SexecPackage.REACTION__EFFECT:setEffect((Step)newValue);return;case SexecPackage.REACTION__TRANSITION:setTransition((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ToastBuilder customViewMessageViewId(int customViewMessageViewId){  this.customViewMessageViewId=customViewMessageViewId;  return this;}  }
class C{  public static void removeValue(Map<String,Object> context,String expression){  if (Debug.verboseOn()) {    Debug.logVerbose("UelUtil.removeValue invoked, expression = " + expression,module);  }  ELContext elContext=new BasicContext(context);  ValueExpression ve=exprFactory.createValueExpression(elContext,expression,Object.class);  ve.setValue(elContext,null);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.125 -0500",hash_original_method="A7FE0DFAA40049E1860E732454FD3827",hash_generated_method="15D1FF33625977AED0227A30DCFD7BC4") public void clearTestProviderEnabled(String provider){  try {    mService.clearTestProviderEnabled(provider);  } catch (  RemoteException ex) {    Log.e(TAG,"clearTestProviderEnabled: RemoteException",ex);  }}  }
class C{  private boolean calculateRepresentation(){  double normalized=0.5 + Math.atan(SCALING * value) / Math.PI;  return setRepresentation((int)Math.round(normalized * maxRepresentation));}  }
class C{  public CannotInvokeException(ClassNotFoundException e){  super("by " + e.toString());  err=e;}  }
class C{  public boolean isSolutions(){  return getProperty(Annotations.NAMED_SET) != null;}  }
class C{  @Override public boolean matches(SolrDocument doc){  return !this.term.matches(doc);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.021 -0500",hash_original_method="43122228A318CAFA2BE5FD8EB8B7119A",hash_generated_method="43122228A318CAFA2BE5FD8EB8B7119A") boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  @Override public int numElements() throws Exception {  return m_root.numNodes();}  }
class C{  public String loadPaymentRuleInfo(int HR_PaySelection_ID,String PaymentRule){  String msg=null;  String sql="SELECT COUNT(*) " + "FROM HR_PaySelectionCheck " + "WHERE HR_PaySelection_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,HR_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     noPayments=String.valueOf(rs.getInt(1));    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  sql="SELECT CurrentNext " + "FROM C_BankAccountDoc " + "WHERE C_BankAccount_ID=? AND PaymentRule=? AND IsActive='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_C_BankAccount_ID);    pstmt.setString(2,PaymentRule);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     documentNo=new Integer(rs.getInt(1)); else {      log.log(Level.SEVERE,"VPayPrint.loadPaymentRuleInfo - No active BankAccountDoc for C_BankAccount_ID=" + m_C_BankAccount_ID + " AND PaymentRule="+ PaymentRule);      msg="VPayPrintNoDoc";    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  return msg;}  }
class C{  public Matrix4x3f pick(float x,float y,float width,float height,int[] viewport){  return pick(x,y,width,height,viewport,this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.865 -0500",hash_original_method="742053359AC2416542EBDE8E8736FB44",hash_generated_method="FDBA56ED74BB7C2A89FD0B5E19A0277E") public void onTrackballEvent(MotionEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_TRACKBALL)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int source=event.getSource();    if ((source & InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {switch (action) {case MotionEvent.ACTION_DOWN:        if (mTrackballDown && !mTrackballUnhandled) {          problem("ACTION_DOWN but trackball is already down.");        } else {          mTrackballDown=true;          mTrackballUnhandled=false;        }      ensureHistorySizeIsZeroForThisAction(event);    ensurePointerCountIsOneForThisAction(event);  break;case MotionEvent.ACTION_UP:if (!mTrackballDown) {  problem("ACTION_UP but trackball is not down.");} else {  mTrackballDown=false;  mTrackballUnhandled=false;}ensureHistorySizeIsZeroForThisAction(event);ensurePointerCountIsOneForThisAction(event);break;case MotionEvent.ACTION_MOVE:ensurePointerCountIsOneForThisAction(event);break;default :problem("Invalid action " + MotionEvent.actionToString(action) + " for trackball event.");break;}if (mTrackballDown && event.getPressure() <= 0) {problem("Trackball is down but pressure is not greater than 0.");} else if (!mTrackballDown && event.getPressure() != 0) {problem("Trackball is up but pressure is not equal to 0.");}} else {problem("Source was not SOURCE_CLASS_TRACKBALL.");}}  finally {finishEvent();}}  }
class C{  protected void checkDataSource(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,pathToDataSource + "/@Name",configuration);  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,pathToDataSource + "/@JNDIName",configuration);  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,pathToDataSource + "/@PoolName",configuration);  XMLAssert.assertXpathEvaluatesTo(serverName,pathToDataSource + "/@Targets",configuration);  XMLAssert.assertXpathEvaluatesTo("server",pathToDataSource + "/@Targets",configuration);  XMLAssert.assertXpathNotExists(pathToTxDataSource,configuration);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int begOffs=Utilities.getWordStart(target,offs);      if (select) {        target.moveCaretPosition(begOffs);      } else {        target.setCaretPosition(begOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public MonitoredItemCreateResult clone(){  MonitoredItemCreateResult result=new MonitoredItemCreateResult();  result.StatusCode=StatusCode;  result.MonitoredItemId=MonitoredItemId;  result.RevisedSamplingInterval=RevisedSamplingInterval;  result.RevisedQueueSize=RevisedQueueSize;  result.FilterResult=FilterResult;  return result;}  }
class C{  public static <E>ArrayList2<E> copyExcept(E[] orig,E excludedElem){  ArrayList2<E> rejectedElements=new ArrayList2<E>(orig.length);  for (int i=0; i < orig.length; i++) {    if (!orig[i].equals(excludedElem)) {      rejectedElements.add(orig[i]);    }  }  return rejectedElements;}  }
class C{  public ScatterPlotGui(final GenericFrame frame,final ScatterPlotComponent component){  super(frame,component);  this.component=component;  setPreferredSize(new Dimension(PREFERRED_SIZE));  actionManager=new PlotActionManager(this);  setLayout(new BorderLayout());  JButton deleteButton=new JButton("Delete");  deleteButton.setActionCommand("Delete");  deleteButton.addActionListener(this);  JButton addButton=new JButton("Add");  addButton.setActionCommand("Add");  addButton.addActionListener(this);  JPanel buttonPanel=new JPanel();  buttonPanel.add(deleteButton);  buttonPanel.add(addButton);  createAttachMenuBar();  add("Center",chartPanel);  add("South",buttonPanel);}  }
class C{  public CompressingCodec(String name,CompressionMode compressionMode,int chunkSize,int maxDocsPerChunk,int blockSize){  this(name,"",compressionMode,chunkSize,maxDocsPerChunk,blockSize);}  }
class C{  public IgniteDataStreamerTimeoutException(String msg){  super(msg);}  }
class C{  protected void updateOverlayColor(@WorldWind.NavigatorAction int eventAction){  int color=(eventAction == WorldWind.NAVIGATOR_STOPPED) ? 0xA0FFFF00 : Color.YELLOW;  latView.setTextColor(color);  lonView.setTextColor(color);  altView.setTextColor(color);}  }
class C{  private void startCameraSource(){  int code=GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(getApplicationContext());  if (code != ConnectionResult.SUCCESS) {    Dialog dlg=GoogleApiAvailability.getInstance().getErrorDialog(this,code,RC_HANDLE_GMS);    dlg.show();  }  if (mCameraSource != null) {    try {      mPreview.start(mCameraSource,mGraphicOverlay);    } catch (    IOException e) {      Log.e(TAG,"Unable to start camera source.",e);      mCameraSource.release();      mCameraSource=null;    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static Match.Builder createRetentiveBuilder(Match m){  Match.Builder mb=m.createBuilder();  Iterator<MatchField<?>> itr=m.getMatchFields().iterator();  while (itr.hasNext()) {    MatchField mf=itr.next();    if (m.isExact(mf)) {      mb.setExact(mf,m.get(mf));    } else     if (m.isPartiallyMasked(mf)) {      mb.setMasked(mf,m.getMasked(mf));    } else {    }  }  return mb;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ProgressBarDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ProgressBarDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public final synchronized Enumeration<T> elements(){  return new LIFOQueueEnumerator<>(this);}  }
class C{  public boolean isSetState(){  return this.state != null;}  }
class C{  public void readProcedures(DatabaseMetaData meta) throws SQLException {  ResultSet rs=meta.getProcedures(null,name,null);  ArrayList<DbProcedure> list=New.arrayList();  while (rs.next()) {    list.add(new DbProcedure(this,rs));  }  rs.close();  procedures=new DbProcedure[list.size()];  list.toArray(procedures);  if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {    for (    DbProcedure procedure : procedures) {      procedure.readParameters(meta);    }  }}  }
class C{  public GridQueryTypeDescriptor type(@Nullable String space,String typeName) throws IgniteCheckedException {  TypeDescriptor type=typesByName.get(new TypeName(space,typeName));  if (type == null || !type.registered())   throw new IgniteCheckedException("Failed to find type descriptor for type name: " + typeName);  return type;}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ex) {    throw FormatException.getFormatInstance(ex);  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  public static java.io.BufferedReader openReaderDetectCharset(java.io.File filePath,String defaultCharset,boolean local) throws java.io.IOException {  java.io.InputStream fis=null;  try {    if (local)     fis=new java.io.FileInputStream(filePath); else {      sage.NetworkClient.getSN().requestMediaServerAccess(filePath,true);      fis=new SageInputStream(new RemoteSageFile(Sage.preferredServer,filePath,true));    }    if (fis.markSupported())     fis.mark(32768);    int b1=fis.read();    int b2=fis.read();    String targetCharset=defaultCharset;    if (b1 == 0xFF && b2 == 0xFE)     targetCharset="UTF-16LE"; else     if (b1 == 0xFE && b2 == 0xFF)     targetCharset="UTF-16BE"; else     if (Sage.I18N_CHARSET.equals(defaultCharset)) {      byte[] extraData=new byte[16384];      extraData[0]=(byte)(b1 & 0xFF);      extraData[1]=(byte)(b2 & 0xFF);      int dataLen=2 + fis.read(extraData,2,extraData.length - 2);      boolean utf8valid=true;      for (int i=0; i < dataLen && utf8valid; i++) {        int c=extraData[i] & 0xFF;        if (c <= 127)         continue;        if (i + 1 >= dataLen) {          break;        }switch (c >> 4) {case 12:case 13:          i++;        c=extraData[i] & 0xFF;      if ((c & 0xC0) != 0x80)       utf8valid=false;    break;case 14:  i++;c=extraData[i] & 0xFF;if ((c & 0xC0) != 0x80 || i + 1 >= dataLen) utf8valid=false; else {i++;c=extraData[i] & 0xFF;if ((c & 0xC0) != 0x80) utf8valid=false;}break;default :utf8valid=false;break;}}if (!utf8valid) {if (Sage.DBG) System.out.println("Charset autodetection found invalid UTF8 data in the file; switching to default charset instead");targetCharset=Sage.EMBEDDED ? Sage.BYTE_CHARSET : null;}}if (fis.markSupported()) {fis.reset();} else {fis.close();if (local) fis=new java.io.FileInputStream(filePath); else fis=new SageInputStream(new RemoteSageFile(Sage.preferredServer,filePath,true));}if (targetCharset == null) return new java.io.BufferedReader(new java.io.InputStreamReader(fis)); else return new java.io.BufferedReader(new java.io.InputStreamReader(fis,targetCharset));} catch (java.io.IOException e) {if (fis != null) fis.close();throw e;} finally {if (!local) sage.NetworkClient.getSN().requestMediaServerAccess(filePath,false);}}  }
class C{  public UdpEchoServer(boolean similateSlowResponse){  try {    this.similateSlowResponse=similateSlowResponse;    setServer(new DatagramSocket(port));  } catch (  Exception ex) {    System.err.println("Could not listen on port: " + port + " "+ PcStringUtils.printStackTrace(ex));  }}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  public Boolean isRemoteDiscovery(){  return remoteDiscovery;}  }
class C{  public void add(CommandMarker commandMarker){  Method[] methods=commandMarker.getClass().getMethods();  for (  Method method : methods) {    if (method.getAnnotation(CliCommand.class) != null) {      LinkedList<Argument> arguments=new LinkedList<Argument>();      LinkedList<Option> options=new LinkedList<Option>();      GfshOptionParser optionParser=getOptionParser();      Annotation[][] parameterAnnotations=method.getParameterAnnotations();      Class<?>[] parameterTypes=method.getParameterTypes();      int parameterNo=0;      for (int i=0; i < parameterAnnotations.length; i++) {        Annotation[] annotations=parameterAnnotations[i];        Class<?> parameterType=parameterTypes[i];        boolean paramFound=false;        String valueSeparator=CliMetaData.ANNOTATION_NULL_VALUE;        for (        Annotation annotation : annotations) {          if (annotation instanceof CliArgument) {            Argument argumentToAdd=createArgument((CliArgument)annotation,parameterType,parameterNo);            arguments.add(argumentToAdd);            parameterNo++;          } else           if (annotation instanceof CliOption) {            Option createdOption=createOption((CliOption)annotation,parameterType,parameterNo);            if (!CliMetaData.ANNOTATION_NULL_VALUE.equals(valueSeparator)) {              createdOption.setValueSeparator(valueSeparator);              valueSeparator=CliMetaData.ANNOTATION_NULL_VALUE;            } else {              paramFound=true;            }            options.add(createdOption);            parameterNo++;          } else           if (annotation instanceof CliMetaData) {            valueSeparator=((CliMetaData)annotation).valueSeparator();            if (!CliMetaData.ANNOTATION_NULL_VALUE.equals(valueSeparator)) {              if (paramFound) {                Option lastAddedOption=options.getLast();                lastAddedOption.setValueSeparator(valueSeparator);                valueSeparator=CliMetaData.ANNOTATION_NULL_VALUE;              }            } else {              valueSeparator=CliMetaData.ANNOTATION_NULL_VALUE;            }          }        }      }      optionParser.setArguments(arguments);      optionParser.setOptions(options);      GfshMethodTarget gfshMethodTarget=new GfshMethodTarget(method,commandMarker);      CliCommand cliCommand=method.getAnnotation(CliCommand.class);      String[] values=cliCommand.value();      String commandName=null;      String[] synonyms=null;      if (values.length > 1) {        synonyms=new String[values.length - 1];      }      commandName=values[0];      for (int j=1; j < values.length; j++) {        synonyms[j - 1]=values[j];      }      CommandTarget commandTarget=new CommandTarget(commandName,synonyms,gfshMethodTarget,optionParser,null,cliCommand.help());      for (      String string : values) {        if (commands.get(string) == null) {          commands.put(string,commandTarget);        } else {          logWrapper.info("Multiple commands configured with the same name: " + string);        }      }      if (CliUtil.isGfshVM()) {        CliMetaData commandMetaData=method.getAnnotation(CliMetaData.class);        if (commandMetaData != null) {          String[] relatedTopics=commandMetaData.relatedTopic();          for (          String topicName : relatedTopics) {            CliTopic topic=topics.get(topicName);            if (topic == null) {              topic=new CliTopic(topicName);              topics.put(topicName,topic);            }            topic.addCommandTarget(commandTarget);          }        }      }    } else     if (method.getAnnotation(CliAvailabilityIndicator.class) != null) {      CliAvailabilityIndicator cliAvailabilityIndicator=method.getAnnotation(CliAvailabilityIndicator.class);      AvailabilityTarget availabilityIndicator=new AvailabilityTarget(commandMarker,method);      String[] value=cliAvailabilityIndicator.value();      for (      String string : value) {        availabilityIndicators.put(string,availabilityIndicator);      }    }  }  updateAvailabilityIndicators();}  }
class C{  protected Revision readRevision() throws IOException, ArticleReaderException {  this.taskRevisionCounter++;  Revision revision=new Revision(this.taskRevisionCounter);  int size, r=read();  boolean hasId=false;  StringBuilder buffer=null;  this.keywords.reset();  while (r != -1) {    if (buffer != null) {      buffer.append((char)r);    }    if (this.keywords.check((char)r)) {switch (this.keywords.getValue()) {case KEY_START_TEXT:case KEY_START_TIMESTAMP:case KEY_START_COMMENT:case KEY_START_CONTRIBUTOR:        buffer=new StringBuilder();      break;case KEY_START_ID:    if (!hasId) {      buffer=new StringBuilder();    }  break;case KEY_END_ID:if (!hasId) {  size=buffer.length();  buffer.delete(size - WikipediaXMLKeys.KEY_END_ID.getKeyword().length(),size);  revision.setRevisionID(Integer.parseInt(buffer.toString()));  buffer=null;  hasId=true;}break;case KEY_END_TIMESTAMP:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_TIMESTAMP.getKeyword().length(),size);revision.setTimeStamp(buffer.toString());buffer=null;break;case KEY_END_TEXT:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_TEXT.getKeyword().length(),size);revision.setRevisionText(buffer.toString());buffer=null;break;case KEY_END_COMMENT:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_COMMENT.getKeyword().length(),size);revision.setComment(SQLEscape.escape(buffer.toString()));buffer=null;break;case KEY_END_CONTRIBUTOR:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_CONTRIBUTOR.getKeyword().length(),size);readContributor(revision,buffer.toString());buffer=null;break;case KEY_MINOR_FLAG:revision.setMinor(true);buffer=null;break;case KEY_END_REVISION:this.keywords.reset();buffer=null;return revision;case KEY_START_IP:case KEY_END_IP:case KEY_START_USERNAME:case KEY_END_USERNAME:break;default :System.out.println(keywords.getValue());throw ErrorFactory.createArticleReaderException(ErrorKeys.DELTA_CONSUMERS_TASK_READER_WIKIPEDIAXMLREADER_UNEXPECTED_KEYWORD);}this.keywords.reset();}r=read();}throw ErrorFactory.createArticleReaderException(ErrorKeys.DELTA_CONSUMERS_TASK_READER_WIKIPEDIAXMLREADER_UNEXPECTED_END_OF_FILE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.754 -0400",hash_original_method="704AD8FAAAA6D050CB91ECF7DD8F01C8",hash_generated_method="F7A44ECF235A01291AE90E3760F0FAC8") synchronized void receive(char oneChar) throws IOException {  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (lastReader != null && !lastReader.isAlive()) {    throw new IOException("Pipe broken");  }  lastWriter=Thread.currentThread();  try {    while (buffer != null && out == in) {      notifyAll();      wait(1000);      if (lastReader != null && !lastReader.isAlive()) {        throw new IOException("Pipe broken");      }    }  } catch (  InterruptedException e) {    throw new InterruptedIOException();  }  if (buffer == null) {    throw new IOException("Pipe is closed");  }  if (in == -1) {    in=0;  }  buffer[in++]=oneChar;  if (in == buffer.length) {    in=0;  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public void actionPerformed(ActionEvent e){  int chip;  if ((chip=getChipCommandMatchingAction(e,COMMAND_IMAGE_LOAD)) != Constants.CHIP_NONE) {    openLoadImageDialog(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_ANALYSE_DISASSEMBLE)) != Constants.CHIP_NONE) {    openAnalyseDialog(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_EMULATOR_PLAY)) != Constants.CHIP_NONE) {    startEmulator(chip,EmulationFramework.ExecutionMode.RUN,null);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_EMULATOR_DEBUG)) != Constants.CHIP_NONE) {    startEmulator(chip,EmulationFramework.ExecutionMode.DEBUG,null);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_EMULATOR_PAUSE)) != Constants.CHIP_NONE) {    framework.pauseEmulator(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_EMULATOR_STEP)) != Constants.CHIP_NONE) {    startEmulator(chip,EmulationFramework.ExecutionMode.STEP,null);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_EMULATOR_STOP)) != Constants.CHIP_NONE) {    if (framework.isEmulatorPlaying(chip)) {      framework.pauseEmulator(chip);    }    if (JOptionPane.showConfirmDialog(this,"Are you sure you want to reset the " + Constants.CHIP_LABEL[chip] + " emulator and lose the current state ?","Reset ?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {      framework.stopEmulator(chip);      reset(chip);    }  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_SETUP_BREAKPOINTS)) != Constants.CHIP_NONE) {    toggleBreakTriggerList(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_MEMORY_HEX_EDITOR)) != Constants.CHIP_NONE) {    toggleMemoryHexEditor(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_MEMORY_ACTIVITY_VIEWER)) != Constants.CHIP_NONE) {    toggleMemoryActivityViewer(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_DISASSEMBLY_WINDOW)) != Constants.CHIP_NONE) {    toggleDisassemblyLog(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_CPUSTATE_WINDOW)) != Constants.CHIP_NONE) {    toggleCPUState(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_CUSTOM_LOGGER_WINDOW)) != Constants.CHIP_NONE) {    toggleCustomMemoryRangeLoggerComponentFrame(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_PROGRAMMABLE_TIMERS_WINDOW)) != Constants.CHIP_NONE) {    toggleProgrammableTimersWindow(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_CALL_STACK_WINDOW)) != Constants.CHIP_NONE) {    toggleCallStack(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_ITRON_OBJECT_WINDOW)) != Constants.CHIP_NONE) {    toggleITronObject(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_ITRON_RETURN_STACK_WINDOW)) != Constants.CHIP_NONE) {    toggleITronReturnStack(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_SAVE_LOAD_MEMORY)) != Constants.CHIP_NONE) {    openSaveLoadMemoryDialog(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_CODE_STRUCTURE_WINDOW)) != Constants.CHIP_NONE) {    toggleCodeStructureWindow(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_SOURCE_CODE_WINDOW)) != Constants.CHIP_NONE) {    toggleSourceCodeWindow(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_INTERRUPT_CONTROLLER_WINDOW)) != Constants.CHIP_NONE) {    toggleInterruptController(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_SERIAL_INTERFACES)) != Constants.CHIP_NONE) {    toggleSerialInterfaces(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_SERIAL_DEVICES)) != Constants.CHIP_NONE) {    toggleGenericSerialFrame(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_IO_PORTS_WINDOW)) != Constants.CHIP_NONE) {    toggleIoPortsWindow(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_TOGGLE_AD_CONVERTER)) != Constants.CHIP_NONE) {    toggleAdConverterFrame(chip);  } else   if ((chip=getChipCommandMatchingAction(e,COMMAND_CHIP_OPTIONS)) != Constants.CHIP_NONE) {    openChipOptionsDialog(chip);  } else   if (COMMAND_GENERATE_SYS_SYMBOLS.equals(e.getActionCommand())) {    openGenerateSysSymbolsDialog();  } else   if (COMMAND_UI_OPTIONS.equals(e.getActionCommand())) {    openUIOptionsDialog();  } else   if (COMMAND_DECODE.equals(e.getActionCommand())) {    openDecodeDialog();  } else   if (COMMAND_ENCODE.equals(e.getActionCommand())) {    openEncodeDialog();  } else   if (COMMAND_DECODE_NKLD.equals(e.getActionCommand())) {    openDecodeNkldDialog();  } else   if (COMMAND_LOAD_STATE.equals(e.getActionCommand())) {    loadState();  } else   if (COMMAND_SAVE_STATE.equals(e.getActionCommand())) {    saveState();  } else   if (COMMAND_TOGGLE_SCREEN_EMULATOR.equals(e.getActionCommand())) {    toggleScreenEmulator();  } else   if (COMMAND_TOGGLE_COMPONENT_4006_WINDOW.equals(e.getActionCommand())) {    toggleComponent4006();  } else   if (COMMAND_TOGGLE_FRONT_PANEL.equals(e.getActionCommand())) {    toggleFrontPanel();  } else   if (COMMAND_QUIT.equals(e.getActionCommand())) {    quit();  } else   if (COMMAND_ABOUT.equals(e.getActionCommand())) {    showAboutDialog();  } else   if (COMMAND_TEST.equals(e.getActionCommand())) {  } else {    System.err.println("Unknown menu command : " + e.getActionCommand());  }}  }
class C{  public DefaultsDisplay(){  defaultsTablesMap=new HashMap<String,JComponent>();  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    if (System.getProperty("os.name").equals("Mac OS X")) {      OSXLookAndFeelName=UIManager.getLookAndFeel().getName();    }  } catch (  Exception ex) {  }  setLayout(new BorderLayout());  JPanel controls=new JPanel();  controls.add(createLookAndFeelControl());  controls.add(createFilterControl());  add(controls,BorderLayout.NORTH);  tabPane=new JTabbedPane();  add(tabPane,BorderLayout.CENTER);  addDefaultsTab();}  }
class C{  MethodIdentifier parse(String method,Class[] argTypes){  MethodIdentifier id=new MethodIdentifier(method,argTypes);  if (changed) {    callStacks.clear();    changed=false;  }  if (!callStacks.containsKey(id)) {    Vector<MethodContainer> callStack=new Vector<>();    for (    Object o : objects) {      try {        if (o == null)         continue;        Method m=o.getClass().getMethod(method,argTypes);        if (m != null) {          Priority[] annotations=m.getAnnotationsByType(Priority.class);          double pri;          if (annotations != null && annotations.length > 0) {            Priority priority=annotations[0];            pri=priority.level();          } else {            pri=0;          }          callStack.add(new MethodContainer(o,m,pri));        }      } catch (      NoSuchMethodException e) {      }    }    Collections.sort(callStack);    callStacks.put(id,callStack);  }  return id;}  }
class C{  public void testMapLayer(){  EndToEndTestUtils.createTrackIfEmpty(1,false);  selectMapLayer(R.string.menu_terrain);  selectMapLayer(R.string.menu_satellite_with_streets);  selectMapLayer(R.string.menu_satellite);  selectMapLayer(R.string.menu_map);}  }
class C{  @Override public String toString(){  return allRecords.stream().flatMap(null).sorted(null).map(null).collect(Collectors.joining());}  }
class C{  public void initiateSession(ContactId contact){  Intent intent=new Intent(InitiateStreamingSession.this,StreamingSessionView.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(StreamingSessionView.EXTRA_MODE,StreamingSessionView.MODE_OUTGOING);  intent.putExtra(StreamingSessionView.EXTRA_CONTACT,(Parcelable)contact);  startActivity(intent);}  }
class C{  public static @Nullable <T>CloseableReference<T> of(@Nullable T t,ResourceReleaser<T> resourceReleaser){  if (t == null) {    return null;  } else {    return new CloseableReference<T>(t,resourceReleaser);  }}  }
class C{  public void addListener(final ITraceListener listener){  listeners.addListener(listener);}  }
class C{  private void parseSubject(SubjectType subject) throws MalformedTokenException {  NameIDType subjectNameID=subject.getNameID();  _subjectId=getSubjectId(subjectNameID);  try {    if (_subjectId.getFormat().equalsIgnoreCase(UPN_FORMAT_URI)) {      this._subjectUPN=PrincipalIdParser.parseUpn(subjectNameID.getValue());    }  } catch (  ParserException e) {    String upnParsingErrMsg="Cannot parse subject because its value is not in UPN format";    _log.debug(upnParsingErrMsg,e);    throw new MalformedTokenException(upnParsingErrMsg,e);  }  SubjectConfirmationType subConf=subject.getSubjectConfirmation();  if (subConf.getMethod().equalsIgnoreCase(BEARER_CONFIRMATION)) {    SubjectConfirmationDataType subConfData=subConf.getSubjectConfirmationData();    _subjConfExp=subConfData.getNotOnOrAfter();    _confirmationType=ConfirmationType.BEARER;  } else   if (subConf.getMethod().equalsIgnoreCase(HOLDER_OF_KEY_CONFIRMATION)) {    parseHolderOfKeyConfirmation(subject);    _confirmationType=ConfirmationType.HOLDER_OF_KEY;  }  if (_log.isDebugEnabled()) {    _log.debug(_subjectId + " successfully extracted from the token");    _log.debug("Got confirmation type: " + _confirmationType);  }}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Builder withTcpNoDelay(){  return withTcpNoDelay(true);}  }
class C{  public String createHash(String password){  return createHash(password.toCharArray());}  }
class C{  private static OdbcEscapeParseResult parse0(String text,int startPos,boolean earlyExit){  StringBuilder res=new StringBuilder();  int curPos=startPos;  int plainPos=startPos;  int openPos=-1;  boolean insideLiteral=false;  LinkedList<OdbcEscapeParseResult> nested=null;  while (curPos < text.length()) {    char curChar=text.charAt(curPos);    if (curChar == '\'')     insideLiteral=!insideLiteral; else     if (!insideLiteral) {      if (curChar == '{') {        if (openPos == -1) {          res.append(text,plainPos,curPos);          openPos=curPos;        } else {          OdbcEscapeParseResult nestedRes=parse0(text,curPos,true);          if (nested == null)           nested=new LinkedList<>();          nested.add(nestedRes);          curPos+=nestedRes.originalLength() - 1;          plainPos=curPos + 1;        }      } else       if (curChar == '}') {        if (openPos == -1)         throw new IgniteException("Malformed escape sequence " + "(closing curly brace without opening curly brace): " + text); else {          String parseRes;          if (nested == null)           parseRes=parseEscapeSequence(text,openPos,curPos + 1 - openPos); else {            String res0=appendNested(text,openPos,curPos + 1,nested);            nested=null;            parseRes=parseEscapeSequence(res0,0,res0.length());          }          if (earlyExit)           return new OdbcEscapeParseResult(startPos,curPos + 1 - startPos,parseRes); else           res.append(parseRes);          openPos=-1;          plainPos=curPos + 1;        }      }    }    curPos++;  }  if (openPos != -1)   throw new IgniteException("Malformed escape sequence (closing curly brace missing): " + text);  if (insideLiteral)   throw new IgniteException("Malformed literal expression (closing quote missing): " + text);  if (curPos > plainPos)   res.append(text,plainPos,curPos);  return new OdbcEscapeParseResult(startPos,curPos - startPos + 1,res.toString());}  }
class C{  public final void addStrategy(final PlanStrategy strategy,final double weight,final Id<Population> populationId){  ArrayList<PlanStrategy> strategies=this.strategies.get(populationId);  if (strategies == null) {    strategies=new ArrayList<PlanStrategy>();    this.strategies.put(populationId,strategies);    this.weights.put(populationId,new ArrayList<Double>());    this.totalWeights.put(populationId,0.0);  }  strategies.add(strategy);  this.weights.get(populationId).add(Double.valueOf(weight));  this.totalWeights.put(populationId,this.totalWeights.get(populationId) + weight);}  }
class C{  private Builder(com.ebay.jetstream.event.processor.hdfs.TestRecord other){  super(com.ebay.jetstream.event.processor.hdfs.TestRecord.SCHEMA$);  if (isValidValue(fields()[0],other.key1)) {    this.key1=data().deepCopy(fields()[0].schema(),other.key1);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.key2)) {    this.key2=data().deepCopy(fields()[1].schema(),other.key2);    fieldSetFlags()[1]=true;  }}  }
class C{  public Cursor query(Query query){  Cursor underlyingCursor=query.runQuery(contentResolver,UNDERLYING_COLUMNS,downloadsUriProvider.getDownloadsByBatchUri());  if (underlyingCursor == null) {    return null;  }  PublicFacingStatusTranslator statusTranslator=new PublicFacingStatusTranslator();  return new CursorTranslator(underlyingCursor,downloadsUriProvider.getDownloadsByBatchUri(),statusTranslator);}  }
class C{  public void markLastKeyForPreload(){  assert idx > 0;  if (preloadKeys == null)   preloadKeys=new BitSet();  preloadKeys.set(idx - 1,true);}  }
class C{  @Override public DummyProjectBuilder withIdeUrl(String ideUrl){  return this;}  }
class C{  private boolean hasJavaDoc(Tree bodyDeclaration){  int position=((JCTree)bodyDeclaration).getStartPosition();  Input.Token token=builder.getInput().getPositionTokenMap().get(position);  if (token != null) {    for (    Input.Tok tok : token.getToksBefore()) {      if (tok.getText().startsWith("/**")) {        return true;      }    }  }  return false;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private void onMapClick(){  MapMode mapMode=mapFragment.getMapMode();  if (mapMode == MapMode.DETAIL_POI || mapMode == MapMode.DETAIL_NOTE) {    mapFragment.setMarkerSelectedId(-1L);    mapFragment.switchMode(MapMode.DEFAULT);  }  if (mapMode == MapMode.WAY_EDITION) {    mapFragment.unselectWayMarker();  }  if (mapMode == MapMode.DEFAULT && mapFragment.getAddPoiFloatingMenu().isOpened()) {    mapFragment.getAddPoiFloatingMenu().close(true);  }}  }
class C{  public boolean shouldSpreadItems(){  return true;}  }
class C{  public static BigInteger squareRoot(BigInteger a){  int bl;  BigInteger result, remainder, b;  if (a.compareTo(ZERO) < 0) {    throw new ArithmeticException("cannot extract root of negative number" + a + ".");  }  bl=a.bitLength();  result=ZERO;  remainder=ZERO;  if ((bl & 1) != 0) {    result=result.add(ONE);    bl--;  }  while (bl > 0) {    remainder=remainder.multiply(FOUR);    remainder=remainder.add(BigInteger.valueOf((a.testBit(--bl) ? 2 : 0) + (a.testBit(--bl) ? 1 : 0)));    b=result.multiply(FOUR).add(ONE);    result=result.multiply(TWO);    if (remainder.compareTo(b) != -1) {      result=result.add(ONE);      remainder=remainder.subtract(b);    }  }  return result;}  }
class C{  protected void checkCursorMove() throws SQLException {  checkOpen();  closeFields();}  }
class C{  public PcalSymTab(AST ast) throws PcalSymTabException {  symtab=new Vector();  iPC=null;  disambiguateReport=new Vector();  procs=new Vector();  processes=new Vector();  errorReport="";  InsertSym(GLOBAL,"pc","","",0,0);  ExtractSym(ast,"");  if (errorReport.length() > 0)   throw new PcalSymTabException(errorReport);}  }
class C{  public boolean isLowerLimitEnabled(){  return this.lowerLimitEnabled;}  }
class C{  void codeFinally(Environment env,Context ctx,Assembler asm,Context stopctx,Type save){  Integer num=null;  boolean haveCleanup=false;  boolean haveNonLocalFinally=false;  for (Context c=ctx; (c != null) && (c != stopctx); c=c.prev) {    if (c.node == null)     continue;    if (c.node.op == SYNCHRONIZED) {      haveCleanup=true;    } else     if (c.node.op == FINALLY && ((CodeContext)c).contLabel != null) {      haveCleanup=true;      FinallyStatement st=((FinallyStatement)(c.node));      if (!st.finallyCanFinish) {        haveNonLocalFinally=true;        break;      }    }  }  if (!haveCleanup) {    return;  }  if (save != null) {    ClassDefinition def=ctx.field.getClassDefinition();    if (!haveNonLocalFinally) {      LocalMember lf=ctx.getLocalField(idFinallyReturnValue);      num=new Integer(lf.number);      asm.add(where,opc_istore + save.getTypeCodeOffset(),num);    } else {switch (ctx.field.getType().getReturnType().getTypeCode()) {case TC_VOID:        break;case TC_DOUBLE:case TC_LONG:      asm.add(where,opc_pop2);    break;default :  asm.add(where,opc_pop);break;}}}for (Context c=ctx; (c != null) && (c != stopctx); c=c.prev) {if (c.node == null) continue;if (c.node.op == SYNCHRONIZED) {asm.add(where,opc_jsr,((CodeContext)c).contLabel);} else if (c.node.op == FINALLY && ((CodeContext)c).contLabel != null) {FinallyStatement st=((FinallyStatement)(c.node));Label label=((CodeContext)c).contLabel;if (st.finallyCanFinish) {asm.add(where,opc_jsr,label);} else {asm.add(where,opc_goto,label);break;}}}if (num != null) {asm.add(where,opc_iload + save.getTypeCodeOffset(),num);}}  }
class C{  public ResourceManager(Properties props_){  properties=props_;}  }
class C{  private int decodeChannelSoundUnit(ChannelUnit snd,float[] output,int channelNum,int codingMode){  int ret;  GainBlock gain1=snd.gainBlock[snd.gcBlkSwitch];  GainBlock gain2=snd.gainBlock[1 - snd.gcBlkSwitch];  if (codingMode == JOINT_STEREO && channelNum == 1) {    if (br.read(2) != 3) {      log.error(String.format("JS mono Sound Unit id != 3"));      return AT3_ERROR;    }  } else {    if (br.read(6) != 0x28) {      log.error(String.format("Sound Unit id != 0x28"));      return AT3_ERROR;    }  }  snd.bandsCoded=br.read(2);  ret=decodeGainControl(gain2,snd.bandsCoded);  if (ret != 0) {    return ret;  }  snd.numComponents=decodeTonalComponents(snd.components,snd.bandsCoded);  if (snd.numComponents < 0) {    return snd.numComponents;  }  int numSubbands=decodeSpectrum(snd.spectrum);  int lastTonal=addTonalComponents(snd.spectrum,snd.numComponents,snd.components);  int numBands=(subband_tab[numSubbands] - 1) >> 8;  if (lastTonal >= 0) {    numBands=max((lastTonal + 256) >> 8,numBands);  }  for (int band=0; band < 4; band++) {    if (band <= numBands) {      imlt(snd.spectrum,band * 256,snd.imdctBuf,0,(band & 1) != 0);    } else {      Arrays.fill(snd.imdctBuf,0,512,0f);    }    ctx.gaincCtx.gainCompensation(snd.imdctBuf,0,snd.prevFrame,band * 256,gain1.gBlock[band],gain2.gBlock[band],256,output,band * 256);  }  snd.gcBlkSwitch^=1;  return 0;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public boolean isFieldAlignDefault(){  return getFieldAlignmentType().equals(FIELDALIGNMENTTYPE_Default);}  }
class C{  public static Object xml(String xml){  Object o=null;  try {    o=Gestion.getXStream().fromXML(xml);  } catch (  com.thoughtworks.xstream.mapper.CannotResolveClassException e) {    System.out.println("excepcion: " + e.getMessage());    String nombre="";    String nombreClase="ieci.tecdoc.sgm.xml." + nombre.toLowerCase() + "."+ nombre;    try {      Class.forName(nombreClase).newInstance();    } catch (    Exception ee) {      System.out.println("excepcion: " + ee.getMessage());    }    o=Gestion.getXStream().fromXML(xml);  }  return o;}  }
class C{  @Override public int hashCode(){  int result=version + rounds + wordSize;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element & 0xFF;  }  return result;}  }
class C{  private CButton createDay(){  CButton button=new CButton();  button.setBorder(BorderFactory.createEmptyBorder());  button.setHorizontalTextPosition(SwingConstants.CENTER);  button.setMargin(ZERO_INSETS);  button.addActionListener(this);  button.addMouseListener(this);  button.addKeyListener(this);  button.setFocusPainted(false);  button.putClientProperty("Plastic.is3D",Boolean.FALSE);  return button;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            output.setValue(row,col,val);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void decrement(int i){  decrement(i,0);}  }
class C{  private void loadFbTexture(){  if (!isFbTextureNeeded()) {    return;  }  int width=viewportWidth;  int height=viewportHeight;  int bufferWidth=context.fbw;  int pixelFormat=context.psm;  if (useRenderToTexture) {    if (renderTexture.getResizedWidth() >= width && renderTexture.getResizedHeight() >= height && renderTexture.getBufferWidth() >= bufferWidth) {      if (useTextureBarrier) {        renderTexture.bind(re,false);        re.bindActiveTexture(ACTIVE_TEXTURE_FRAMEBUFFER,renderTexture.getTextureId());        re.textureBarrier();      } else {        if (copyOfRenderTexture == null) {          copyOfRenderTexture=new FBTexture(renderTexture);        }        copyOfRenderTexture.blitFrom(re,renderTexture);        re.bindActiveTexture(ACTIVE_TEXTURE_FRAMEBUFFER,copyOfRenderTexture.getTextureId());      }      return;    }  }  if (fbTexture != null && !fbTexture.isCompatible(width,height,bufferWidth,pixelFormat)) {    fbTexture.delete(re);    fbTexture=null;  }  if (fbTexture == null) {    fbTexture=new GETexture(Modules.sceDisplayModule.getTopAddrGe(),bufferWidth,width,height,pixelFormat,true);  }  re.setActiveTexture(ACTIVE_TEXTURE_FRAMEBUFFER);  fbTexture.copyScreenToTexture(re);  re.setActiveTexture(ACTIVE_TEXTURE_NORMAL);}  }
class C{  protected SelectUniversal createSelect() throws SQLScopeException, ScopeException {  SelectUniversal subselect=new SelectUniversal(getUniverse());  subselect.from(getUniverse().S(getSubject()));  for (  MeasureMapping mx : getMapper().getMeasureMapping()) {    ISelectPiece piece=subselect.select(mx.getMapping().getDefinition(),mx.getPiece().getAlias());    piece.addComment(mx.getMapping().getName() + " (Metric)");  }  for (  ExpressionAST condition : getQuery().getConditions()) {    subselect.where(condition);  }  for (  Filter filter : getQuery().getFilters()) {    filter.applyFilter(subselect);  }  return subselect;}  }
class C{  public static void parallelSort(byte[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1); else   new ArraysParallelSortHelpers.FJByte.Sorter(null,a,new byte[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public a addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> endBy(Parser<I,A> p,Parser<I,SEP> sep){  return many(bind(p,null));}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public boolean visit(NullLiteral node){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:21.176 -0500",hash_original_method="B1B4D5F6DCA8EF0F22789512858C9AFE",hash_generated_method="B3ECD37125ED3587B94ECCC77B8D6BA4") public static String intToString(int i){  String str=new String();  str.addTaint(i);  return str;}  }
class C{  public T charAttr(String value){  return attr("char",value);}  }
class C{  public void clearHash(){  internedTexts.clear();  internedAttributes.clear();}  }
class C{  static boolean handleIconKeyEvent(View v,int keyCode,KeyEvent e){  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout layout=(CellLayout)parent.getParent();  final Workspace workspace=(Workspace)layout.getParent();  final ViewGroup launcher=(ViewGroup)workspace.getParent();  final ViewGroup tabs=(ViewGroup)launcher.findViewById(R.id.search_drop_target_bar);  final ViewGroup hotseat=(ViewGroup)launcher.findViewById(R.id.hotseat);  int pageIndex=workspace.indexOfChild(layout);  int pageCount=workspace.getChildCount();  final int action=e.getAction();  final boolean handleKeyEvent=(action != KeyEvent.ACTION_UP);  boolean wasHandled=false;switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (handleKeyEvent) {      View newIcon=getIconInDirection(layout,parent,v,-1);      if (newIcon != null) {        newIcon.requestFocus();        v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);      } else {        if (pageIndex > 0) {          parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);          newIcon=getIconInDirection(layout,parent,parent.getChildCount(),-1);          if (newIcon != null) {            newIcon.requestFocus();          } else {            workspace.snapToPage(pageIndex - 1);          }          v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);        }      }    }  wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,v,1);if (newIcon != null) {  newIcon.requestFocus();  v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);} else {  if (pageIndex < (pageCount - 1)) {    parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);    newIcon=getIconInDirection(layout,parent,-1,1);    if (newIcon != null) {      newIcon.requestFocus();    } else {      workspace.snapToPage(pageIndex + 1);    }    v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);  }}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_UP:if (handleKeyEvent) {View newIcon=getClosestIconOnLine(layout,parent,v,-1);if (newIcon != null) {newIcon.requestFocus();wasHandled=true;} else {tabs.requestFocus();}v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}break;case KeyEvent.KEYCODE_DPAD_DOWN:if (handleKeyEvent) {View newIcon=getClosestIconOnLine(layout,parent,v,1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);wasHandled=true;} else if (hotseat != null) {hotseat.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}break;case KeyEvent.KEYCODE_PAGE_UP:if (handleKeyEvent) {if (pageIndex > 0) {parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);View newIcon=getIconInDirection(layout,parent,-1,1);if (newIcon != null) {newIcon.requestFocus();} else {workspace.snapToPage(pageIndex - 1);}v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);} else {View newIcon=getIconInDirection(layout,parent,-1,1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}}wasHandled=true;break;case KeyEvent.KEYCODE_PAGE_DOWN:if (handleKeyEvent) {if (pageIndex < (pageCount - 1)) {parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);View newIcon=getIconInDirection(layout,parent,-1,1);if (newIcon != null) {newIcon.requestFocus();} else {workspace.snapToPage(pageIndex + 1);}v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);} else {View newIcon=getIconInDirection(layout,parent,parent.getChildCount(),-1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_HOME:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,-1,1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_END:if (handleKeyEvent) {View newIcon=getIconInDirection(layout,parent,parent.getChildCount(),-1);if (newIcon != null) {newIcon.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}wasHandled=true;break;default :break;}return wasHandled;}  }
class C{  public boolean isIPVoiceCallSupported(){  return mIpVoiceCall;}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isDate()) {        ((ChangeDateFormat)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  protected byte[] engineUpdate(byte[] in,int inOffset,int inLen){  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenomodificationallowederr.class,args);}  }
class C{  @Override public void topologyChanged(List<LDUpdate> updateList){  Iterator<Device> diter=deviceMap.values().iterator();  if (updateList != null) {    if (logger.isTraceEnabled()) {      for (      LDUpdate update : updateList) {        logger.trace("Topo update: {}",update);      }    }  }  while (diter.hasNext()) {    Device d=diter.next();    if (d.updateAttachmentPoint()) {      if (logger.isDebugEnabled()) {        logger.debug("Attachment point changed for device: {}",d);      }      sendDeviceMovedNotification(d);    }  }  debugEventService.flushEvents();}  }
class C{  public boolean hasExternalIds(){  return hasRepeatingExtension(ExternalId.class);}  }
class C{  private static Event<Entity> createEventsForEntity(Entity entity,RPEvent rpevent){  String name=rpevent.getName();  Event<Entity> event=null;  if (name.equals("examine")) {    event=new ExamineEvent();  } else   if (name.equals("show_item_list")) {    event=new ShowItemListEvent();  } else   if (name.equals(Events.SOUND)) {    event=new SoundEvent();  } else   if (name.equals("transition_graph")) {    event=new TransitionGraphEvent();  } else   if (name.equals(Events.PLAYER_LOGGED_ON)) {    event=new PlayerLoggedOnEvent();  } else   if (name.equals(Events.PLAYER_LOGGED_OUT)) {    event=new PlayerLoggedOutEvent();  } else   if (name.equals(Events.VIEW_CHANGE)) {    event=new ViewChangeEvent();  } else   if (name.equals(Events.IMAGE)) {    event=new ImageEffectEvent();  } else   if (name.equals(Events.PUBLIC_TEXT)) {    event=new EntityMessageEvent();  } else   if (name.equals(Events.GLOBAL_VISUAL)) {    event=new GlobalVisualEffectEvent();  }  if (event != null) {    event.init(entity,rpevent);  }  return event;}  }
class C{  boolean processKeyBindings(KeyEvent e,boolean pressed){  if (!SwingUtilities.isValidKeyEventForKeyBindings(e)) {    return false;  }  KeyStroke ks;  KeyStroke ksE=null;  if (e.getID() == KeyEvent.KEY_TYPED) {    ks=KeyStroke.getKeyStroke(e.getKeyChar());  } else {    ks=KeyStroke.getKeyStroke(e.getKeyCode(),e.getModifiers(),(pressed ? false : true));    if (e.getKeyCode() != e.getExtendedKeyCode()) {      ksE=KeyStroke.getKeyStroke(e.getExtendedKeyCode(),e.getModifiers(),(pressed ? false : true));    }  }  if (ksE != null && processKeyBinding(ksE,e,WHEN_FOCUSED,pressed)) {    return true;  }  if (processKeyBinding(ks,e,WHEN_FOCUSED,pressed))   return true;  Container parent=this;  while (parent != null && !(parent instanceof Window) && !(parent instanceof Applet)) {    if (parent instanceof JComponent) {      if (ksE != null && ((JComponent)parent).processKeyBinding(ksE,e,WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,pressed))       return true;      if (((JComponent)parent).processKeyBinding(ks,e,WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,pressed))       return true;    }    if ((parent instanceof JInternalFrame) && JComponent.processKeyBindingsForAllComponents(e,parent,pressed)) {      return true;    }    parent=parent.getParent();  }  if (parent != null) {    return JComponent.processKeyBindingsForAllComponents(e,parent,pressed);  }  return false;}  }
class C{  public void saveWorkingInstancesToFileQ(){  if (m_IOThread == null) {    m_FileChooser.setCapabilitiesFilter(m_FilterEditor.getCapabilitiesFilter());    m_FileChooser.setAcceptAllFileFilterUsed(false);    int returnVal=m_FileChooser.showSaveDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      Instances inst=new Instances(m_Instances);      inst.setClassIndex(m_AttVisualizePanel.getColoringIndex());      saveInstancesToFile(m_FileChooser.getSaver(),inst);    }    FileFilter temp=m_FileChooser.getFileFilter();    m_FileChooser.setAcceptAllFileFilterUsed(true);    m_FileChooser.setFileFilter(temp);  } else {    JOptionPane.showMessageDialog(this,"Can't save at this time,\n" + "currently busy with other IO","Save Instances",JOptionPane.WARNING_MESSAGE);  }}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Set<Id<TransitStopFacility>> stopsInArea){  log.info("Cutting schedule...");  log.info("   area contains " + stopsInArea.size() + " stops.");  int routesRemoved=0;  Set<TransitLine> linesToRemove=new HashSet<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      boolean toKeep=false;      for (      TransitRouteStop stop : transitRoute.getStops()) {        if (stopsInArea.contains(stop.getStopFacility().getId())) {          toKeep=true;        }      }      if (!toKeep) {        transitLine.removeRoute(transitRoute);        routesRemoved++;      }    }    if (transitLine.getRoutes().isEmpty()) {      linesToRemove.add(transitLine);    }  }  log.info("   routes removed: " + routesRemoved);  for (  TransitLine lineToRemove : linesToRemove) {    schedule.removeTransitLine(lineToRemove);  }  log.info("   lines removed: " + linesToRemove.size());  removeNotUsedStopFacilities(schedule);}  }
class C{  public final double length(){  return Math.sqrt(x * x + y * y);}  }
class C{  public static NumberAuto newInstance(NumberAutoAsEnum numberAutoAsEnum){  NumberAuto numberAuto=new NumberAuto();  numberAuto.numberAutoAsEnum=numberAutoAsEnum;  numberAuto.dataType=Type.ENUM;  return numberAuto;}  }
class C{  private void generateNearSideOnlyEventOffset(TXState txState){  generateNearSideEventOffset(txState);}  }
class C{  public SyncOfferMessage(SyncOfferMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetVersions()) {    List<KeyedVersions> __this__versions=new ArrayList<KeyedVersions>();    for (    KeyedVersions other_element : other.versions) {      __this__versions.add(new KeyedVersions(other_element));    }    this.versions=__this__versions;  }}  }
class C{  public void removeItem(int position){  contents.remove(position);  notifyItemRemoved(position);}  }
class C{  public static String toString(short[] self){  return InvokerHelper.toString(self);}  }
class C{  public void check(){  if (!OBFUSCATED) {    paramsTest();  }  if (mError) {    Assert.fail(toString());  }}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  if (jjtGetNumChildren() > 0)   type=((BSHType)jjtGetChild(0)).getType(callstack,interpreter); else   type=UNTYPED;  return type;}  }
class C{  public Object storedData(Object o){  Object last=stored;  stored=o;  return last;}  }
class C{  private void subFormat(int patternCharIndex,int count,FieldDelegate delegate,StringBuffer buffer,boolean useDateFormatSymbols){  int maxIntCount=Integer.MAX_VALUE;  String current=null;  int beginOffset=buffer.length();  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];  int value;  if (field == CalendarBuilder.WEEK_YEAR) {    if (calendar.isWeekDateSupported()) {      value=calendar.getWeekYear();    } else {      patternCharIndex=PATTERN_YEAR;      field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];      value=calendar.get(field);    }  } else   if (field == CalendarBuilder.ISO_DAY_OF_WEEK) {    value=CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));  } else {    value=calendar.get(field);  }  int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;  if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) {    current=calendar.getDisplayName(field,style,locale);  }switch (patternCharIndex) {case PATTERN_ERA:    if (useDateFormatSymbols) {      String[] eras=formatData.getEras();      if (value < eras.length) {        current=eras[value];      }    }  if (current == null) {    current="";  }break;case PATTERN_WEEK_YEAR:case PATTERN_YEAR:if (calendar instanceof GregorianCalendar) {if (count != 2) {  zeroPaddingNumber(value,count,maxIntCount,buffer);} else {  zeroPaddingNumber(value,2,2,buffer);}} else {if (current == null) {  zeroPaddingNumber(value,style == Calendar.LONG ? 1 : count,maxIntCount,buffer);}}break;case PATTERN_MONTH:if (useDateFormatSymbols) {String[] months;if (count >= 4) {months=formatData.getMonths();current=months[value];} else if (count == 3) {months=formatData.getShortMonths();current=months[value];}} else {if (count < 3) {current=null;} else if (forceStandaloneForm) {current=calendar.getDisplayName(field,style | 0x8000,locale);if (current == null) {current=calendar.getDisplayName(field,style,locale);}}}if (current == null) {zeroPaddingNumber(value + 1,count,maxIntCount,buffer);}break;case PATTERN_MONTH_STANDALONE:assert current == null;if (locale == null) {String[] months;if (count >= 4) {months=formatData.getMonths();current=months[value];} else if (count == 3) {months=formatData.getShortMonths();current=months[value];}} else {if (count >= 3) {current=calendar.getDisplayName(field,style | 0x8000,locale);}}if (current == null) {zeroPaddingNumber(value + 1,count,maxIntCount,buffer);}break;case PATTERN_HOUR_OF_DAY1:if (current == null) {if (value == 0) {zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1,count,maxIntCount,buffer);} else {zeroPaddingNumber(value,count,maxIntCount,buffer);}}break;case PATTERN_DAY_OF_WEEK:if (useDateFormatSymbols) {String[] weekdays;if (count >= 4) {weekdays=formatData.getWeekdays();current=weekdays[value];} else {weekdays=formatData.getShortWeekdays();current=weekdays[value];}}break;case PATTERN_AM_PM:if (useDateFormatSymbols) {String[] ampm=formatData.getAmPmStrings();current=ampm[value];}break;case PATTERN_HOUR1:if (current == null) {if (value == 0) {zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1,count,maxIntCount,buffer);} else {zeroPaddingNumber(value,count,maxIntCount,buffer);}}break;case PATTERN_ZONE_NAME:if (current == null) {if (formatData.locale == null || formatData.isZoneStringsSet) {int zoneIndex=formatData.getZoneIndex(calendar.getTimeZone().getID());if (zoneIndex == -1) {value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);buffer.append(ZoneInfoFile.toCustomID(value));} else {int index=(calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3;if (count < 4) {index++;}String[][] zoneStrings=formatData.getZoneStringsWrapper();buffer.append(zoneStrings[zoneIndex][index]);}} else {TimeZone tz=calendar.getTimeZone();boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);int tzstyle=(count < 4 ? TimeZone.SHORT : TimeZone.LONG);buffer.append(tz.getDisplayName(daylight,tzstyle,formatData.locale));}}break;case PATTERN_ZONE_VALUE:value=(calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000;int width=4;if (value >= 0) {buffer.append('+');} else {width++;}int num=(value / 60) * 100 + (value % 60);CalendarUtils.sprintf0d(buffer,num,width);break;case PATTERN_ISO_ZONE:value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);if (value == 0) {buffer.append('Z');break;}value/=60000;if (value >= 0) {buffer.append('+');} else {buffer.append('-');value=-value;}CalendarUtils.sprintf0d(buffer,value / 60,2);if (count == 1) {break;}if (count == 3) {buffer.append(':');}CalendarUtils.sprintf0d(buffer,value % 60,2);break;default :if (current == null) {zeroPaddingNumber(value,count,maxIntCount,buffer);}break;}if (current != null) {buffer.append(current);}int fieldID=PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];Field f=PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];delegate.formatted(fieldID,f,f,beginOffset,buffer.length(),buffer);}  }
class C{  public final void skipFully(long n) throws IOException {  long total=0;  long cur=0;  while ((total < n) && ((cur=(int)in.skip(n - total)) > 0)) {    total+=cur;  }  if (total < n) {    throw new EOFException();  }}  }
class C{  public final boolean isZeroVector(){  return this.matrix.isZeroMatrix();}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public void addSingleBlock(BasicBlock bb){  dominators.set(bb.getNumber());}  }
class C{  public boolean removeCertificate(@NotNull String alias){  myWriteLock.lock();  try {    if (isBroken()) {      return false;    }    X509Certificate certificate=getCertificate(alias);    if (certificate == null) {      LOG.error("No certificate found for alias: " + alias);      return false;    }    myKeyStore.deleteEntry(alias);    flushKeyStore();    myTrustManager=initFactoryAndGetManager();    myDispatcher.getMulticaster().certificateRemoved(certificate);    return true;  } catch (  Exception e) {    LOG.error("Can't remove certificate for alias: " + alias,e);    return false;  } finally {    myWriteLock.unlock();  }}  }
class C{  public int hashCode(){  long bits=java.lang.Double.doubleToLongBits(values[0]);  for (int i=2; i < dimensionality; i++) {    bits^=java.lang.Double.doubleToLongBits(values[i - 1]) * 31;  }  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  private BusinessObjectDefinitionColumn createBusinessObjectDefinitionColumnFromEntity(BusinessObjectDefinitionColumnEntity businessObjectDefinitionColumnEntity){  BusinessObjectDefinitionColumn businessObjectDefinitionColumn=new BusinessObjectDefinitionColumn();  businessObjectDefinitionColumn.setId(businessObjectDefinitionColumnEntity.getId());  businessObjectDefinitionColumn.setBusinessObjectDefinitionColumnKey(getBusinessObjectDefinitionColumnKey(businessObjectDefinitionColumnEntity));  businessObjectDefinitionColumn.setDescription(businessObjectDefinitionColumnEntity.getDescription());  if (CollectionUtils.isNotEmpty(businessObjectDefinitionColumnEntity.getSchemaColumns())) {    businessObjectDefinitionColumn.setSchemaColumnName(IterableUtils.get(businessObjectDefinitionColumnEntity.getSchemaColumns(),0).getName());  }  return businessObjectDefinitionColumn;}  }
class C{  private void updateHighlightSetUsernameHighlighted(boolean highlight){  highlighter.setHighlightUsername(highlight);}  }
class C{  private static boolean searchInClassPath(){  logInfo("Searching in Java classpath for RapidMiner Studio jars...");  String classpath=System.getProperty("java.class.path");  String[] pathComponents=classpath.split(File.pathSeparator);  for (int i=0; i < pathComponents.length; i++) {    String path=pathComponents[i].trim();    if (path.matches(RAPIDMINER_STUDIO_CORE_REGEX) || path.endsWith(RAPIDMINER_STUDIO_LAUNCHER_JAR)) {      File jar=new File(path).getAbsoluteFile();      logInfo("Trying parent directory of '" + jar + "'...");      File dir=jar.getParentFile();      if (dir == null) {        logSevere("Failed to retrieve 'rapidminer.home'. Parent of jar is not a directory!");      } else {        dir=retrieveRMHomeFromLibraryDir(dir);        if (dir != null && dir.isDirectory()) {          logInfo("Gotcha! 'rapidminer.home' is: " + dir);          System.setProperty(PROPERTY_RAPIDMINER_HOME,dir.getAbsolutePath());          return true;        } else {          logSevere("Failed to retrieve 'rapidminer.home'. Parent of jar directory is not a directory!");        }      }    }  }  return false;}  }
class C{  private void loadHighways(){  ShapeAttributes attrs=new ShapeAttributes();  attrs.getOutlineColor().set(1.0f,1.0f,0.0f,1.0f);  attrs.setOutlineWidth(3);  ShapeAttributes highlightAttrs=new ShapeAttributes();  highlightAttrs.getOutlineColor().set(1.0f,0.0f,0.0f,1.0f);  highlightAttrs.setOutlineWidth(7);  BufferedReader reader=null;  try {    InputStream in=getResources().openRawResource(R.raw.world_highways);    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    List<String> headers=Arrays.asList(line.split(","));    final int WKT=headers.indexOf("WKT");    final int HWY=headers.indexOf("Highway");    final String WKT_START="\"LINESTRING (";    final String WKT_END=")\"";    while ((line=reader.readLine()) != null) {      int featureBegin=line.indexOf(WKT_START) + WKT_START.length();      int featureEnd=line.indexOf(WKT_END,featureBegin);      String feature=line.substring(featureBegin,featureEnd);      String attributes=line.substring(featureEnd + WKT_END.length() + 1);      List<Position> positions=new ArrayList<>();      String[] tuples=feature.split(",");      for (int i=0; i < tuples.length; i++) {        String[] xy=tuples[i].split(" ");        positions.add(Position.fromDegrees(Double.parseDouble(xy[1]),Double.parseDouble(xy[0]),0));      }      Path path=new Path(positions,attrs);      path.setHighlightAttributes(highlightAttrs);      path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);      path.setPathType(WorldWind.LINEAR);      path.setFollowTerrain(true);      path.setDisplayName(attributes);      publishProgress(path);      this.numHighwaysCreated++;    }  } catch (  IOException e) {    Logger.log(Logger.ERROR,"Exception attempting to read/parse world_highways file.");  } finally {    WWUtil.closeSilently(reader);  }}  }
class C{  public static Object popParameter(Object o){  return parametersObject.pop();}  }
class C{  public ZkClusterData fetchLeaderStatus(){  LinkedHashMap<String,ZkCollectionState> zkState=getZkClusterData().getClusterState();  Map<String,Map<String,String>> collectionToShardLeaderMapping=new HashMap<String,Map<String,String>>();  for (  String collection : zkState.keySet()) {    if (collection.equals("collection1")) {      continue;    }    ZkCollectionState collectionMetadata=zkState.get(collection);    Map<String,String> shardToLeaderMapping=new HashMap<String,String>();    for (    String shard : collectionMetadata.getShards().keySet()) {      ZkShardInfo shardInfo=collectionMetadata.getShards().get(shard);      shardToLeaderMapping.put(shard,EMPTY_LEADER);      for (      String replica : shardInfo.getReplicas().keySet()) {        ZkReplicaInfo replicaInfo=shardInfo.getReplicas().get(replica);        if (replicaInfo.getLeader() != null) {          if (replicaInfo.getLeader().equalsIgnoreCase("true")) {            String nodeNameFull=replicaInfo.getNodeName();            String coreName=replicaInfo.getCore();            shardToLeaderMapping.put(shard,String.format("%s,%s",nodeNameFull,coreName));            break;          }        }      }    }    collectionToShardLeaderMapping.put(collection,shardToLeaderMapping);  }  for (  String collection : collectionToShardLeaderMapping.keySet()) {    Map<String,String> shardLeaderMap=collectionToShardLeaderMapping.get(collection);    logger.info("Collection: " + collection);    for (    String shard : shardLeaderMap.keySet()) {      logger.info("Shard = > " + shard + ". Leader => "+ shardLeaderMap.get(shard));    }  }  getZkClusterData().setCollectionToShardLeaderMapping(collectionToShardLeaderMapping);  return getZkClusterData();}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  return drawImage(img,x,y,null,observer);}  }
class C{  protected SurfacePolygon createPolygon(){  SurfacePolygon polygon=new SurfacePolygon();  polygon.setDelegateOwner(this.getActiveDelegateOwner());  polygon.setAttributes(this.getActiveShapeAttributes());  return polygon;}  }
class C{  public static boolean compareAndSwapLong(Object obj,long off,long exp,long upd){  return UNSAFE.compareAndSwapLong(obj,off,exp,upd);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(KEY_ID)) {    id=null;  } else   if (name.equalsIgnoreCase(AUTH_NAME)) {    names=null;  } else   if (name.equalsIgnoreCase(SERIAL_NUMBER)) {    serialNum=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:AuthorityKeyIdentifier.");  }  encodeThis();}  }
class C{  public AnnotationJSONArrayConverter(DataFetcher<JSONArray> proxy,Class<DATA> clazz){  super(proxy);  mDataClazz=clazz;  mSingler=clazz.getAnnotation(Singler.class);  Class<?> c=clazz;  while (c != Object.class) {    processAnnotation(c);    c=c.getSuperclass();  }}  }
class C{  public boolean hasNoDragOffset(){  return mViewPortHandler.hasNoDragOffset();}  }
class C{  public WmsLayer(Sector sector,Globe globe,double metersPerPixel,WmsLayerConfig config){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","missingSector"));  }  if (globe == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","missingGlobe"));  }  if (metersPerPixel <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","invalidResolution"));  }  if (config == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","missingConfig"));  }  this.init();  this.setConfiguration(sector,globe,metersPerPixel,config);}  }
class C{  public static void registerSubtileModel(String subTileName,ModelResourceLocation model){  registerSubtileModel(subTileName,model,new ModelResourceLocation(model.getResourceDomain() + ":" + model.getResourcePath(),"inventory"));}  }
class C{  private void recordTransportZoneEvent(Network tz,String type,String description){  if (tz == null) {    _log.error("Invalid Network event");    return;  }  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(tz,type,description,null,dbClient,EVENT_SERVICE_TYPE,RecordType.Event.name(),EVENT_SERVICE_SOURCE);  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  public boolean tryToRestoreTabStateForUrl(String url){  if (!isSessionRestoreInProgress())   return false;  return mTabSaver.restoreTabStateForUrl(url);}  }
class C{  public ConfigurableJtaPlatform(TransactionManager tm,UserTransaction ut){  Assert.notNull(tm,"TransactionManager reference must not be null");  this.transactionManager=tm;  this.userTransaction=(ut != null ? ut : new UserTransactionAdapter(tm));}  }
class C{  @Override protected Result check() throws Exception {  return Result.healthy();}  }
class C{  private void readAuthorizedListFile(){  alwaysAuthorized=false;  if (authorizedListFile == null) {    if (SNMP_LOGGER.isLoggable(Level.FINER)) {      SNMP_LOGGER.logp(Level.FINER,SnmpAcl.class.getName(),"readAuthorizedListFile","alwaysAuthorized set to true");    }    alwaysAuthorized=true;  } else {    Parser parser=null;    try {      parser=new Parser(new FileInputStream(getAuthorizedListFile()));    } catch (    FileNotFoundException e) {      if (SNMP_LOGGER.isLoggable(Level.FINEST)) {        SNMP_LOGGER.logp(Level.FINEST,SnmpAcl.class.getName(),"readAuthorizedListFile","The specified file was not found, authorize everybody");      }      alwaysAuthorized=true;      return;    }    try {      JDMSecurityDefs n=parser.SecurityDefs();      n.buildAclEntries(owner,acl);      n.buildTrapEntries(trapDestList);      n.buildInformEntries(informDestList);    } catch (    ParseException e) {      if (SNMP_LOGGER.isLoggable(Level.FINEST)) {        SNMP_LOGGER.logp(Level.FINEST,SnmpAcl.class.getName(),"readAuthorizedListFile","Got parsing exception",e);      }      throw new IllegalArgumentException(e.getMessage());    }catch (    Error err) {      if (SNMP_LOGGER.isLoggable(Level.FINEST)) {        SNMP_LOGGER.logp(Level.FINEST,SnmpAcl.class.getName(),"readAuthorizedListFile","Got unexpected error",err);      }      throw new IllegalArgumentException(err.getMessage());    }    for (Enumeration<AclEntry> e=acl.entries(); e.hasMoreElements(); ) {      AclEntryImpl aa=(AclEntryImpl)e.nextElement();      if (SNMP_LOGGER.isLoggable(Level.FINER)) {        SNMP_LOGGER.logp(Level.FINER,SnmpAcl.class.getName(),"readAuthorizedListFile","===> " + aa.getPrincipal().toString());      }      for (Enumeration<java.security.acl.Permission> eee=aa.permissions(); eee.hasMoreElements(); ) {        java.security.acl.Permission perm=eee.nextElement();        if (SNMP_LOGGER.isLoggable(Level.FINER)) {          SNMP_LOGGER.logp(Level.FINER,SnmpAcl.class.getName(),"readAuthorizedListFile","perm = " + perm);        }      }    }  }}  }
class C{  public String text(){  return this.value;}  }
class C{  public ImageInputFormat(ImageHolderFigure prototype,String formatName,String description,String fileExtensions[],String[] mimeTypes){  this.prototype=prototype;  this.formatName=formatName;  this.description=description;  this.fileExtensions=fileExtensions.clone();  this.mimeTypes=mimeTypes.clone();}  }
class C{  public <T>T invokeAPI(String path,String method,List<Pair> queryParams,Object body,byte[] binaryBody,Map<String,String> headerParams,Map<String,Object> formParams,String accept,String contentType,String[] authNames,TypeRef returnType) throws ApiException {  Response response=getAPIResponse(path,method,queryParams,body,binaryBody,headerParams,formParams,accept,contentType,authNames);  statusCode=response.getStatusInfo().getStatusCode();  responseHeaders=response.getHeaders();  if (statusCode == 401) {    throw new ApiException(response.getStatusInfo().getStatusCode(),"HTTP Error 401 - Unauthorized: Access is denied due to invalid credentials.",response.getHeaders(),null);  } else   if (response.getStatusInfo() == Response.Status.NO_CONTENT) {    return null;  } else   if (response.getStatusInfo().getFamily() == Family.SUCCESSFUL) {    if (returnType == null)     return null; else     return deserialize(response,returnType);  } else {    String message="error";    String respBody=null;    if (response.hasEntity()) {      try {        respBody=response.readEntity(String.class);        message=respBody;      } catch (      RuntimeException e) {      }    }    throw new ApiException(response.getStatusInfo().getStatusCode(),message,response.getHeaders(),respBody);  }}  }
class C{  public void unregisterDropControllers(){  dropControllerList.clear();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  DirectArrayOfDoublesCompactSketch(final Memory mem,final long seed){  super(mem.getByte(NUM_VALUES_BYTE));  mem_=mem;  SerializerDeserializer.validateFamily(mem.getByte(FAMILY_ID_BYTE),mem.getByte(PREAMBLE_LONGS_BYTE));  SerializerDeserializer.validateType(mem_.getByte(SKETCH_TYPE_BYTE),SerializerDeserializer.SketchType.ArrayOfDoublesCompactSketch);  byte version=mem_.getByte(SERIAL_VERSION_BYTE);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  boolean isBigEndian=mem.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_BIG_ENDIAN.ordinal()));  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Byte order mismatch");  }  Util.checkSeedHashes(mem.getShort(SEED_HASH_SHORT),Util.computeSeedHash(seed));  isEmpty_=mem_.isAnyBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_EMPTY.ordinal()));  theta_=mem_.getLong(THETA_LONG);}  }
class C{  public static <T>T preventNullAnalysis(T value){  return value;}  }
class C{  @Override public boolean doSearch(TestSuiteChromosome suite,LocalSearchObjective<TestSuiteChromosome> objective){  updateFitness(suite,objective.getFitnessFunctions());  double fitnessBefore=suite.getFitness();  List<TestChromosome> originalTests=new ArrayList<TestChromosome>(suite.getTestChromosomes());  List<TestChromosome> tests=suite.getTestChromosomes();  Randomness.shuffle(tests);  if (Properties.LOCAL_SEARCH_ENSURE_DOUBLE_EXECUTION) {    ensureDoubleExecution(suite,objective);  }  if (Properties.LOCAL_SEARCH_RESTORE_COVERAGE) {    restoreBranchCoverage(suite,(TestSuiteFitnessFunction)objective.getFitnessFunctions().get(0));  }  if (Properties.LOCAL_SEARCH_EXPAND_TESTS) {    expandTestSuite(suite,objective);  }  applyLocalSearch(suite,objective);  LocalSearchBudget.getInstance().countLocalSearchOnTestSuite();  boolean hasImproved=hasImproved(fitnessBefore,suite,objective);  if (!hasImproved) {    suite.clearTests();    suite.addTests(originalTests);  }  return hasImproved;}  }
class C{  private SecretKeyFactorySpi nextSpi(SecretKeyFactorySpi oldSpi){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      if (JceSecurity.canUseProvider(s.getProvider()) == false) {        continue;      }      try {        Object obj=s.newInstance(null);        if (obj instanceof SecretKeyFactorySpi == false) {          continue;        }        SecretKeyFactorySpi spi=(SecretKeyFactorySpi)obj;        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      NoSuchAlgorithmException e) {      }    }    serviceIterator=null;    return null;  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == PrimaryExpression.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == AnnotableExpression.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:  return N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public LUDecomposition(final Matrix A){  this.LU=A.clone().toJava();  this.m=LU.rows();  this.n=LU.cols();  this.piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  this.pivsign=1;  final double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU.$[LU.addr.op(i,j)];    }    for (int i=0; i < m; i++) {      final int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LU.$[LU.addr.op(i,k)] * LUcolj[k];      }      LU.$[LU.addr.op(i,j)]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        final double t=LU.$[LU.addr.op(p,k)];        LU.$[LU.addr.op(p,k)]=LU.$[LU.addr.op(j,k)];        LU.$[LU.addr.op(j,k)]=t;      }      final int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m && LU.$[LU.addr.op(j,j)] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU.$[LU.addr.op(i,j)]/=LU.$[LU.addr.op(j,j)];      }    }  }}  }
class C{  @Override public boolean onDown(MotionEvent e){  return false;}  }
class C{  @Deprecated public static Tuple<Point2D.Double,Point2D.Double> scaleVectorStart(final Point2D.Double start,final Point2D.Double end,double scaleFactor){  Tuple<Point2D.Double,Point2D.Double> scaledVector=calculateScaledVector(start,end,scaleFactor);  return new Tuple<Point2D.Double,Point2D.Double>(scaledVector.getFirst(),end);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public boolean isShort(String input){  return GenericValidator.isShort(input);}  }
class C{  public void test_getEntry() throws Exception {  String type="DSA";  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.getEntry("anAlias",new KeyStore.PasswordProtection(new char[]{}));    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,pssWord);  try {    keyTest.getEntry(null,new KeyStore.PasswordProtection(new char[]{}));    fail();  } catch (  NullPointerException expected) {  }  keyTest.getEntry("anAlias",null);  try {    keyTest.getEntry(null,null);    fail();  } catch (  NullPointerException expected) {  }  assertNull(keyTest.getEntry("alias",null));  Certificate[] chain={new MyCertificate(type,testEncoding),new MyCertificate(type,testEncoding)};  DSAPrivateKey privateKey1=(DSAPrivateKey)KeyFactory.getInstance(type).generatePrivate(new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4")));  KeyStore.PasswordProtection pp=new KeyStore.PasswordProtection(pssWord);  assertNull(keyTest.getEntry("alias",pp));  KeyStore.PrivateKeyEntry pke1=new KeyStore.PrivateKeyEntry(getPrivateKey(),chain);  KeyStore.PrivateKeyEntry pke2=new KeyStore.PrivateKeyEntry(privateKey1,chain);  keyTest.setEntry("alias1",pke1,pp);  keyTest.setEntry("alias2",pke2,pp);  assertNull(keyTest.getEntry("alias",pp));  KeyStore.PrivateKeyEntry pkeActual1=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias1",pp);  KeyStore.PrivateKeyEntry pkeActual2=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias2",pp);  assertTrue(Arrays.equals(chain,pkeActual1.getCertificateChain()));  assertEquals(getPrivateKey(),pkeActual1.getPrivateKey());  assertEquals(new MyCertificate(type,testEncoding),pkeActual1.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias1",KeyStore.PrivateKeyEntry.class));  assertTrue(Arrays.equals(chain,pkeActual2.getCertificateChain()));  DSAPrivateKey entryPrivateKey=(DSAPrivateKey)pkeActual2.getPrivateKey();  assertEquals(privateKey1.getX(),entryPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),entryPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),entryPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),entryPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual2.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias2",KeyStore.PrivateKeyEntry.class));}  }
class C{  @Override public void run(){  try {    while (running) {      step();      try {        Thread.sleep(stepPause);      } catch (      InterruptedException e) {        e.printStackTrace();      }    }  } catch (  NullPointerException e) {    robotGui.notifyInitialize();  }catch (  RobotException e) {  }  try {    runningLock.acquire();  } catch (  InterruptedException e) {    e.printStackTrace();  }  running=false;  gui.enableButtons(gui.buttonStateNormal);  button.setText(gui.autoLocateTitle);  runningLock.release();}  }
class C{  void layoutDefault(int size,String startingStepId){  super.layoutDefault(cardPanel,size,previousButton,nextButton,finishButton,cancelButton);  final Dimension nextSize=new Dimension(nextButton.getWidth(),nextButton.getHeight());  nextButton.setMinimumSize(nextSize);  nextButton.setPreferredSize(nextSize);  final Dimension previousSize=new Dimension(previousButton.getWidth(),previousButton.getHeight());  previousButton.setMinimumSize(previousSize);  previousButton.setPreferredSize(previousSize);  showStep(startingStepId,WizardDirection.STARTING);}  }
class C{  private void makeVisible(){  setVisible(true);  setState(NORMAL);  toFront();}  }
class C{  public synchronized void contextDestroyed(ServletContextEvent event){  servletContext=null;  users=null;  counter=0;}  }
class C{  @Override public void close(){  throw new UnsupportedOperationException();}  }
class C{  @SuppressWarnings("unchecked") public void findEntries(@NonNull File file) throws IOException {  Cardinal.getPluginLogger().info("Loading modules from " + file.getAbsolutePath());  Set<String> classStrings=Sets.newLinkedHashSet();  Set<Class> found=Sets.newLinkedHashSet();  ZipFile zipFile=new ZipFile(file);  Enumeration<? extends ZipEntry> entries=zipFile.entries();  while (entries.hasMoreElements()) {    ZipEntry entry=entries.nextElement();    if (entry.isDirectory() || !entry.getName().endsWith(".class")) {      continue;    }    try (InputStream in=zipFile.getInputStream(entry)){      ClassReader reader=new ClassReader(in);      ClassNode node=new ClassNode();      reader.accept(node,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);      if (node.visibleAnnotations != null) {        node.visibleAnnotations.forEach(null);      }    }   }  classStrings.forEach(null);  Cardinal.getPluginLogger().info("Identified " + classStrings.size() + " modules");  Cardinal.getPluginLogger().info("Found " + found.size() + " modules");  moduleEntries.addAll(found);}  }
class C{  public static boolean isZero(int[] n){  for (int i=0; i < n.length; i++) {    if (n[i] != 0) {      return false;    }  }  return true;}  }
class C{  public ListReportSeries(final String name,final Number... values){  this(name);  setData(values);}  }
class C{  private static String arrayToString(byte[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  @Override public boolean logModified(Logger log){  if (_depend.logModified(log)) {    return true;  } else   if (_sourcePath == null)   return false; else   if (_sourcePath.getLastModified() != _sourceLastModified) {    log.info("source modified time: " + _sourcePath + " old:"+ new Date(_sourceLastModified)+ " new:"+ new Date(_sourcePath.getLastModified()));    return true;  } else   if (_sourcePath.length() != _sourceLength) {    log.info("source modified length: " + _sourcePath + " old:"+ _sourceLength+ " new:"+ _sourcePath.length());    return true;  } else {    return false;  }}  }
class C{  private void hash(long qAddr,int hash){  mem.writeInt(qAddr + 6,hash);}  }
class C{  public RSAAMResult authenticateRsaSecurId(String tenantName,String sessionId,String principal,String passcode) throws Exception {  return getService().authenticateRsaSecurId(tenantName,sessionId,principal,passcode,this.getServiceContext());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.EMBEDDED ? LinuxUtils.scanForWifiAPs(Sage.get("WirelessInterface","ra0")) : new java.util.HashMap();}  }
class C{  public boolean is3D(){  return is3D;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public static Resources resources(){  return _resources;}  }
class C{  public Test findTest(List<String> suiteNames,String testClassName,String testName,boolean insertIfMissing){  if (suiteNames.size() <= 0) {    TestCase testCase=getTestCase(testClassName);    return testCase.findTest(testName,insertIfMissing);  } else {    String rootName=suiteNames.remove(0);    TestSuite suite=getTestSuite(rootName);    return suite.findTest(suiteNames,testClassName,testName,insertIfMissing);  }}  }
class C{  public static String toString(final InputStream input,final String encoding) throws IOException {  return IOUtils.toString(input,Charsets.toCharset(encoding));}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  public boolean isIdle(){  return mWorkQueue.isEmpty() && (mPendingWorkers.get() == 0);}  }
class C{  @Check public void checkVariableStatement(VariableStatement variableStatement){  if (variableStatement.getVarStmtKeyword() == VariableStatementKeyword.CONST) {    variableStatement.getVarDecl().stream().forEach(null);  }}  }
class C{  public cudaPitchedPtr(){}  }
class C{  protected void broadcastDownloadSuccessful(DownloadInfo downloadInfo){}  }
class C{  public EmptyStackException(){}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (list.get(currentIndex).compareTo(list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  private void validateSignature(SoapMessage message) throws SignatureException {  XMLSignatureFactory fac=XMLSignatureFactory.getInstance();  DOMValidateContext valContext=new DOMValidateContext(hokConfig.getCertificate().getPublicKey(),getSignatureElementList(message).item(0));  boolean isValid=false;  try {    XMLSignature signature=fac.unmarshalXMLSignature(valContext);    isValid=signature.validate(valContext);  } catch (  MarshalException e) {    throw new SignatureException(SIGNATURE_VALIDATION_ERROR_MSG,e);  }catch (  XMLSignatureException e) {    throw new SignatureException(SIGNATURE_VALIDATION_ERROR_MSG,e);  }  assertTrue(isValid);}  }
class C{  protected void computeBoundaryVertices(Terrain terrain,BoundaryInfo boundary,Vec4 refPoint,Matrix rotationMatrix){  int n=boundary.positions.size();  Vec4[] boundaryVertices=new Vec4[n];  for (int i=0; i < n; i++) {    if (rotationMatrix == null)     boundaryVertices[i]=this.computePoint(terrain,boundary.positions.get(i)).subtract3(refPoint); else     boundaryVertices[i]=this.computePoint(terrain,boundary.positions.get(i)).transformBy4(rotationMatrix).subtract3(refPoint);  }  boundary.vertices=boundaryVertices;}  }
class C{  public static void uiImpl(){  UIManager.put("FileChooser.listViewBorder",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch4_scroll.ScrollPaneBorder()));  UIManager.put("ToolBar.shadow",new ColorUIResource(new Color(249,248,243)));}  }
class C{  public static void buyPageIntentResponse(PendingIntent pendingIntent,Intent intent){  if (sPurchaseObserver == null) {    if (Consts.DEBUG) {      Log.d(TAG,"UI is not running");    }    return;  }  sPurchaseObserver.startBuyPageActivity(pendingIntent,intent);}  }
class C{  public void useOld(){  state=State.USE_OLD;}  }
class C{  public List<Integer> emit(String streamId,Tuple anchor,List<Object> tuple){  return emit(streamId,Arrays.asList(anchor),tuple);}  }
class C{  public static synchronized void installCBSMethodListener(MethodListener s){  int numListeners=cbsMethodListeners.length;  MethodListener[] tmp=new MethodListener[numListeners + 1];  for (int i=0; i < numListeners; i++) {    tmp[i]=cbsMethodListeners[i];  }  tmp[numListeners]=s;  cbsMethodListeners=tmp;}  }
class C{  public FastByteBuffer append(byte[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public final static SSLCapabilities explore(byte[] source,int offset,int length) throws IOException {  ByteBuffer byteBuffer=ByteBuffer.wrap(source,offset,length).asReadOnlyBuffer();  return explore(byteBuffer);}  }
class C{  public Signature(Document document,XMLSignature signature,ObjectContainer objectContainer){  this.document=document;  this.xmlSignature=signature;  this.objectContainer=objectContainer;}  }
class C{  protected static IVCount[] classUsage(final AbstractTripleStore kb,final IV<?,?> civ,final IVCount[] classPartitionCounts){  final SPORelation r=kb.getSPORelation();  final boolean quads=kb.isQuads();  if (!quads) {    throw new IllegalArgumentException();  }  final BigdataURI rdfType=kb.getValueFactory().asValue(RDF.TYPE);  kb.getLexiconRelation().addTerms(new BigdataValue[]{rdfType},1,true);  if (rdfType.getIV() == null) {    return new IVCount[0];  }  final List<IVCount> counts=new LinkedList<IVCount>();  for (  IVCount in : classPartitionCounts) {    final long n=r.getAccessPath(null,rdfType.getIV(),in.iv,civ).rangeCount(false);    if (n == 0)     continue;    final IVCount out=new IVCount(in.iv,n);    out.setValue(in.getValue());    counts.add(out);  }  final IVCount[] a=counts.toArray(new IVCount[counts.size()]);  Arrays.sort(a);  return a;}  }
class C{  protected boolean resumeReliability(InternalDistributedMember id,Set newlyAcquiredRoles){  boolean async=false;  try {    ResumptionAction ra=getMembershipAttributes().getResumptionAction();    if (ra.isNone()) {      if (logger.isDebugEnabled()) {        logger.debug("Reliability resumption for action of none");      }      resumeExpiration();    } else     if (ra.isReinitialize()) {      async=true;      asyncResumeReliability(id,newlyAcquiredRoles);    }  } catch (  Exception e) {    logger.fatal(LocalizedMessage.create(LocalizedStrings.DistributedRegion_UNEXPECTED_EXCEPTION),e);  }  return async;}  }
class C{  public static ToHitData checkIllegal(IGame game,Entity ae,Targetable target,int grappleSide){  if (ae == null)   return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  if (!game.getOptions().booleanOption("tacops_grappling"))   return new ToHitData(TargetRoll.IMPOSSIBLE,"grappling attack not allowed");  String impossible=toHitIsImpossible(game,ae,target);  if (impossible != null && !impossible.equals("Locked in Grapple")) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if (target.getTargetType() == Targetable.TYPE_ENTITY && (((Entity)target).getOwnerId() == ae.getOwnerId() || (((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))     return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct " + "attack.");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  if ((!(ae instanceof BipedMech) && !(ae instanceof Protomech)) || (!(target instanceof Mech) && !(target instanceof Protomech))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only biped mechs can grapple 'Mechs and Protomechs");  }  Entity te=(Entity)target;  final boolean counter=ae.getGrappled() != Entity.NONE && !ae.isGrappleAttacker();  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No/minimal arms");  }  if (grappleSide == Entity.GRAPPLE_BOTH) {    if (ae.isLocationBad(Mech.LOC_LARM) || ae.isLocationBad(Mech.LOC_RARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM) || !ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder missing/destroyed");    }  } else   if (grappleSide == Entity.GRAPPLE_LEFT) {    if (ae.isLocationBad(Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder missing/destroyed");    }  } else {    if (ae.isLocationBad(Mech.LOC_RARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Arm missing");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Shoulder missing/destroyed");    }  }  final int range=ae.getPosition().distance(target.getPosition());  if (range != 1 && !counter) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in range");  }  if (Math.abs(attackerElevation - targetElevation) > ae.getMaxElevationChange()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");  }  if (!counter && !Compute.isInArc(ae.getPosition(),ae.getFacing(),target,Compute.ARC_FORWARD)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if (((Entity)target).isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target is prone");  }  if (!counter) {    for (    Mounted mounted : ae.getWeaponList()) {      if (mounted.isUsedThisRound()) {        return new ToHitData(TargetRoll.IMPOSSIBLE,"Fired weapons");      }    }  }  int atGr=ae.getGrappled();  int deGr=te.getGrappled();  if ((atGr != Entity.NONE || deGr != Entity.NONE) && atGr != target.getTargetId() && te.isGrappleAttacker()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Already grappled");  }  return null;}  }
class C{  public static Image gray(Image img){  return GrayFilter.createDisabledImage(img);}  }
class C{  public MySQLConnection(Configuration config){  super(config,FACTORY,null,null);}  }
class C{  public String optString(int index,String defaultValue){  Object o=opt(index);  return o != null ? o.toString() : defaultValue;}  }
class C{  @Override public XMLEventReader createXMLEventReader(String systemId,Reader reader) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  public String[] split(String s){  ArrayList v=new ArrayList();  int pos=0;  int len=s.length();  while (pos < len && match(s,pos)) {    int start=getParenStart(0);    int newpos=getParenEnd(0);    if (newpos == pos) {      v.add(s.substring(pos,start + 1));      newpos++;    } else {      v.add(s.substring(pos,start));    }    pos=newpos;  }  String remainder=s.substring(pos);  if (remainder.length() != 0) {    v.add(remainder);  }  String[] ret=new String[v.size()];  v.toArray(ret);  return ret;}  }
class C{  public CJKWidthFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public SequenceResource(Resource... resources){  this(Arrays.asList(resources));}  }
class C{  public LogMessage readLogBatch(LogMessage startLog,List<LogMessage> logBatch) throws IOException, CompressorException {  long batchTime=startLog.getTime();  logBatch.add(startLog);  LogMessage msg;  while ((msg=readNextMergedLogMessage()) != null) {    if (msg.getTime() == batchTime) {      logBatch.add(msg);    } else {      return msg;    }  }  return null;}  }
class C{  public V put(K key,V value){  Entry<V> oldValue=_cache.put(key,new Entry<V>(_expireInterval,value));  if (oldValue != null)   return oldValue.getValue(); else   return null;}  }
class C{  public ResolveResult(Object robj,Name rname){  resolvedObj=robj;  setRemainingName(rname);}  }
class C{  public String allocateCosts(){  MInvoiceLine il=new MInvoiceLine(getCtx(),getC_InvoiceLine_ID(),get_TrxName());  return il.allocateLandedCosts();}  }
class C{  public CountingInputStream(InputStream in){  super(checkNotNull(in));}  }
class C{  public static void navigateToTrafficPurchasePage(Context context,int slotId,String sourceFrom){  Intent intent=new Intent(NETWORKASSISTANT_PURCHASE_ACTION);  Bundle bundle=new Bundle();  bundle.putInt(BUNDLE_KEY_SLOTID,slotId);  bundle.putString(BUNDLE_KEY_PURCHASE_FROM,sourceFrom);  intent.putExtra(BUNDLE_KEY_COMMON,bundle);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static String build(byte[] bytes,final int size,MsgType type){  checkNotNull(bytes,"Argument [bytes] may not be null");  checkNotNull(type,"Argument [type] may not be null");  StringBuilder debugMsg=new StringBuilder();switch (type) {case RECEIVE:    debugMsg.append("Received: ");  break;case SEND:debugMsg.append("Sent: ");break;default :break;}for (int i=0; i < size; i++) {int x=UnsignedByte.toInt(bytes[i]);debugMsg.append(Integer.toHexString(x)).append(" ");}return debugMsg.toString();}  }
class C{  boolean compareMethods(Method a,Method b){  if ((a == null) != (b == null)) {    return false;  }  if (a != null && b != null) {    if (!a.equals(b)) {      return false;    }  }  return true;}  }
class C{  public void testClear(){  LinkedBlockingDeque q=populatedDeque(SIZE);  q.clear();  assertTrue(q.isEmpty());  assertEquals(0,q.size());  assertEquals(SIZE,q.remainingCapacity());  q.add(one);  assertFalse(q.isEmpty());  assertTrue(q.contains(one));  q.clear();  assertTrue(q.isEmpty());}  }
class C{  @Override protected void initData(){  if (ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION)) {    } else {      ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},REQUEST_ACCESS_FINE_LOCATION);    }  } else {    this.setData();  }}  }
class C{  public static FrameBlock convertToFrameBlock(MatrixBlock mb){  return convertToFrameBlock(mb,ValueType.DOUBLE);}  }
class C{  public boolean visit(String newHref,boolean forceLoad){  try {    if (forceLoad || !newHref.equals(currentHref)) {      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      Message message=new Message(getLoadingMessage(newHref,loadingMessage));      message.setShowInMessagesTab(false);      MessageManager.INSTANCE.addMessage(message);      getUrlContentInBackground(this,new URL(newHref),forceLoad);      currentHref=newHref;      int index=newHref.indexOf(HelpContentsPanel.HELP_BASE_URL);      if (index > -1) {        String helpContext=newHref.substring(index + HelpContentsPanel.HELP_BASE_URL.length());        mainFrame.setHelpContext(helpContext);      }    }    return true;  } catch (  IOException ex) {    showUnableToLoadMessage(ex.getClass().getCanonicalName() + " " + ex.getMessage());    return false;  } finally {    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  }}  }
class C{  public NightModeHelper(Activity activity,int theme,int defaultUiMode){  init(activity,theme,defaultUiMode);}  }
class C{  protected void colorCalcARGB(int argb,float alpha){  if (alpha == colorModeA) {    calcAi=(argb >> 24) & 0xff;    calcColor=argb;  } else {    calcAi=(int)(((argb >> 24) & 0xff) * (alpha / colorModeA));    calcColor=(calcAi << 24) | (argb & 0xFFFFFF);  }  calcRi=(argb >> 16) & 0xff;  calcGi=(argb >> 8) & 0xff;  calcBi=argb & 0xff;  calcA=(float)calcAi / 255.0f;  calcR=(float)calcRi / 255.0f;  calcG=(float)calcGi / 255.0f;  calcB=(float)calcBi / 255.0f;  calcAlpha=(calcAi != 255);}  }
class C{  public Boolean isAcrdIntrstInd(){  return acrdIntrstInd;}  }
class C{  private GenericFeed batchInsertGmailFilters(GenericEntry... filters) throws ServiceException, IOException {  GenericFeed feed=new GenericFeed();  for (int i=0; i < filters.length; i++) {    BatchUtils.setBatchId(filters[i],Integer.toString(i));    feed.getEntries().add(filters[i]);  }  return gmailFilterService.batch(domain,feed);}  }
class C{  public ChunksGeneratorThread(UniversalDataSource datasource,int extractChannels,BlockingQueue<Chunk> chunks,String chunkDefinitionFile,long chunkSize){  this.setName("ChunkGeneratorThread");  this.dataSource=datasource;  this.chunks=chunks;  this.chunkDefFile=chunkDefinitionFile;  this.extractChannels=extractChannels;  if (chunkSize > 0)   this.chunkSize=chunkSize;}  }
class C{  private void buildExampleTitle(String title,MarkupDocBuilder docBuilder){  if (config.getPathsGroupedBy() == GroupBy.AS_IS) {    docBuilder.sectionTitleLevel4(title);  } else {    docBuilder.sectionTitleLevel5(title);  }}  }
class C{  public int diff_levenshtein(LinkedList<Diff> diffs){  int levenshtein=0;  int insertions=0;  int deletions=0;  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      insertions+=aDiff.text.length();    break;case DELETE:  deletions+=aDiff.text.length();break;case EQUAL:levenshtein+=Math.max(insertions,deletions);insertions=0;deletions=0;break;}}levenshtein+=Math.max(insertions,deletions);return levenshtein;}  }
class C{  synchronized void connect(String cId,String username,String password,boolean will,String willMessage,String willTopic,boolean willRetain,int willQosLevel,boolean cleanSession) throws Exception {  String clientId=validateClientId(cId,cleanSession);  if (clientId == null) {    session.getProtocolHandler().sendConnack(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED);    session.getProtocolHandler().disconnect();    return;  }  session.setSessionState(getSessionState(clientId,cleanSession));  ServerSessionImpl serverSession=createServerSession(username,password);  serverSession.start();  session.setServerSession(serverSession);  if (will) {    ServerMessage w=MQTTUtil.createServerMessageFromString(session,willMessage,willTopic,willQosLevel,willRetain);    session.getSessionState().setWillMessage(w);  }  session.getConnection().setConnected(true);  session.start();  session.getProtocolHandler().sendConnack(MqttConnectReturnCode.CONNECTION_ACCEPTED);}  }
class C{  public boolean isValid(Date startDate,Date date){  return isValid(startDate.getTime(),date.getTime());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (vendorName: ");  result.append(vendorName);  result.append(", projectType: ");  result.append(projectType);  result.append(", mainModule: ");  result.append(mainModule);  result.append(", implementationId: ");  result.append(implementationId);  result.append(", outputPath: ");  result.append(outputPath);  result.append(", libraryPaths: ");  result.append(libraryPaths);  result.append(", resourcePaths: ");  result.append(resourcePaths);  result.append(", moduleLoader: ");  result.append(moduleLoader);  result.append(')');  return result.toString();}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public NotificationChain basicSetVarRef(Expression newVarRef,NotificationChain msgs){  Expression oldVarRef=varRef;  varRef=newVarRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF,oldVarRef,newVarRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private List reverse(List seq){  LinkedList newSeq=new LinkedList();  for (Iterator i=seq.iterator(); i.hasNext(); ) {    DirectedEdge de=(DirectedEdge)i.next();    newSeq.addFirst(de.getSym());  }  return newSeq;}  }
class C{  public void deleteReplicationGroup(URI storage,URI consistencyGroup,String groupName,Boolean keepRGName,Boolean markInactive,String sourceGroupName,String opId) throws ControllerException {  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem storageObj=_dbClient.queryObject(StorageSystem.class,storage);    completer=new BlockConsistencyGroupDeleteCompleter(consistencyGroup,opId);    getDevice(storageObj.getSystemType()).doDeleteConsistencyGroup(storageObj,consistencyGroup,groupName,keepRGName,markInactive,sourceGroupName,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    }    throw DeviceControllerException.exceptions.deleteConsistencyGroupFailed(e);  }}  }
class C{  public void addSelectionListener(SelectionListener listener){  if (selectionListener == null) {    selectionListener=new EventDispatcher();  }  selectionListener.addListener(listener);}  }
class C{  public void onOffHeapWrite(){  offHeapPuts.incrementAndGet();  if (delegate != null)   delegate.onOffHeapWrite();}  }
class C{  public void blockContact(){  Log.i(TAG,"testBlockContact");  try {    contactApi.blockContact(remote);    RcsContact contact=contactApi.getRcsContact(remote);    assertTrue(contact.isBlocked());  } catch (  RcsServiceNotAvailableException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsPersistentStorageException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsGenericException e) {    Log.e(TAG,"Unexpected error",e);  }}  }
class C{  protected BasicButtonListener createButtonListener(AbstractButton b){  return new CompiereButtonListener(b);}  }
class C{  public void testDetectLanguageZh(){  LOGGER.debug("detectLanguage zh");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "zh.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("zh-tw",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("zh-tw",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("zh-tw",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public MessageDeleteHandler(ImplDiscordAPI api){  super(api,true,"MESSAGE_DELETE");}  }
class C{  public UnderlineAction(){  super("font-underline");}  }
class C{  public static String separatorsToSystem(String path){  if (path == null)   return null;  if (isSystemWindows())   return separatorsToWindows(path); else   return separatorsToUnix(path);}  }
class C{  public Dam(){  super();}  }
class C{  public static void write16bit(int value,byte[] code,int index){  code[index]=(byte)(value >>> 8);  code[index + 1]=(byte)value;}  }
class C{  public NodeViewer(Shell parent,int style,IDevice[] devices){  super(parent,style);  this.devices=devices;  setText("Node Viewer");}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  if (this.remaining == 0) {    return -1;  } else {    if (this.remaining < length) {      length=(int)this.remaining;    }    length=this.in.read(buffer,offset,length);    if (length >= 0) {      this.remaining-=length;      if (this.remaining == 0 && !endOfLineFound) {        endOfLineFound=true;        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      } else       if (endOfLineFound) {        int end=offset + length;        for (int i=offset; i < end; i++) {          if (buffer[i] == END_OF_LINE_BYTE_VALUE) {            this.remaining=0;            return (i - offset) + 1;          }        }        this.remaining+=NUMBER_OF_EXTRA_CHARACTER_TO_READ;      }    }    return length;  }}  }
class C{  private void indexSparse(DBIDRef ref,SparseNumberVector obj){  double len=0.;  for (int iter=obj.iter(); obj.iterValid(iter); iter=obj.iterAdvance(iter)) {    final int dim=obj.iterDim(iter);    final double val=obj.iterDoubleValue(iter);    if (val == 0. || val != val) {      continue;    }    len+=val * val;    getOrCreateColumn(dim).add(val,ref);  }  length.put(ref,len);}  }
class C{  @Override protected void removeAt(int index){  _values[index]=(V)TObjectHash.REMOVED;  super.removeAt(index);}  }
class C{  public static final String interpretSlaveManufacturerDevice(Integer slaveMfr,Integer slaveDevice){  String s;  s="Unknown Slave Manufacturer/Device";switch (slaveMfr) {case LnConstants.RE_IPL_MFR_DIGITRAX:{switch (slaveDevice) {case LnConstants.RE_IPL_DIGITRAX_SLAVE_RF24:        s="Digitrax RF24";      break;default :    s="Digitrax (Unknown device)";  break;}break;}case LnConstants.RE_IPL_MFR_RR_CIRKITS:{s="RR-Cirkits (unknown device)";break;}default :break;}return s;}  }
class C{  public static Impp xmpp(String handle){  return new Impp(XMPP,handle);}  }
class C{  @Override public void angularObjectAdd(String name,String noteId,String paragraphId,String object) throws TException {  AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();  AngularObject ao=registry.get(name,noteId,paragraphId);  if (ao != null) {    angularObjectUpdate(name,noteId,paragraphId,object);    return;  }  Object value=null;  try {    value=gson.fromJson(object,new TypeToken<Map<String,Object>>(){    }.getType());  } catch (  Exception e) {    logger.debug(e.getMessage(),e);  }  if (value == null) {    value=gson.fromJson(object,String.class);  }  registry.add(name,value,noteId,paragraphId,false);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  final String matchesToBlastFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastMatchesFileName);  final String blastOutputFileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastResultOutputFileName);  final String blastedMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastedMatchesFileName);  Set<RawProtein<PIRSFHmmer2RawMatch>> proteinsToBlast;  try {    proteinsToBlast=PirsfMatchTempParser.parse(matchesToBlastFilePath);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when parsing blast matches file " + matchesToBlastFilePath);  }  try {    Map<String,Integer> blastResultMap=PirsfBlastResultParser.parseBlastOutputFile(blastOutputFileName);    postProcessor.process(proteinsToBlast,blastResultMap,blastedMatchesFilePath);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to read BLAST result output file.",e);  }}  }
class C{  public void write(byte tag,byte[] buf) throws IOException {  write(tag);  putLength(buf.length);  write(buf,0,buf.length);}  }
class C{  @Override public void onViewReleased(View releasedChild,float xVel,float yVel){  super.onViewReleased(releasedChild,xVel,yVel);  if (draggerView.isDragViewAboveTheLimit()) {switch (draggerView.getDragPosition()) {case LEFT:      draggerView.closeFromCenterToLeft();    break;case RIGHT:  draggerView.closeFromCenterToRight();break;case TOP:default :draggerView.closeFromCenterToBottom();break;case BOTTOM:draggerView.closeFromCenterToTop();break;}} else {draggerView.moveToCenter();}}  }
class C{  private void resolveTypeParameters(Type type,JSONObject meta) throws JSONException {  if (type instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)type;    JSONArray typeArgs=new JSONArray();    for (    Type argType : ptype.getActualTypeArguments()) {      JSONObject argMeta=new JSONObject();      resolveTypeParameters(argType,argMeta);      typeArgs.put(argMeta);    }    meta.put("typeArgs",typeArgs);    meta.put("type",((Class<?>)ptype.getRawType()).getName());    UI_TYPE uiType=UI_TYPE.getEnumFor((Class<?>)ptype.getRawType());    if (uiType != null) {      meta.put("uiType",uiType.getName());    }  } else   if (type instanceof GenericArrayType) {    GenericArrayType gat=(GenericArrayType)type;    JSONArray typeArgs=new JSONArray();    JSONObject argMeta=new JSONObject();    Type componentType=gat.getGenericComponentType();    componentType=this.typeArguments.get(componentType.toString());    if (componentType == null) {      componentType=gat.getGenericComponentType();    }    resolveTypeParameters(componentType,argMeta);    typeArgs.put(argMeta);    meta.put("typeArgs",typeArgs);    if (componentType instanceof Class) {      meta.put("type",Array.newInstance((Class<?>)componentType,0).getClass().getName());    } else {      meta.put("type",Object[].class.getName());    }  } else   if (type instanceof WildcardType) {    meta.put("type",type);    WildcardType wtype=(WildcardType)type;    JSONObject wtMeta=new JSONObject();    wtMeta.put("upper",getTypes(wtype.getUpperBounds()));    wtMeta.put("lower",getTypes(wtype.getLowerBounds()));    meta.put("typeBounds",wtMeta);  } else {    Type ta=this.typeArguments.get(type.toString());    if (ta == null) {      ta=type;    }    if (ta instanceof Class) {      meta.put("type",((Class<?>)ta).getName());      UI_TYPE uiType=UI_TYPE.getEnumFor(((Class<?>)ta));      if (uiType != null) {        meta.put("uiType",uiType.getName());      }    } else     if (ta instanceof ParameterizedType) {      resolveTypeParameters(ta,meta);    } else {      meta.put("type",ta.toString());    }  }}  }
class C{  protected ConstantDeclaration_Impl(){  super();}  }
class C{  public ElGamalParameters generateParameters(){  BigInteger[] safePrimes=DHParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger p=safePrimes[0];  BigInteger q=safePrimes[1];  BigInteger g=DHParametersHelper.selectGenerator(p,q,random);  return new ElGamalParameters(p,g);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static DiffObject patchSet(PatchSet.Id psId){  return new DiffObject(psId);}  }
class C{  public CameraCoordinateTransformer(boolean mirrorX,int displayOrientation,RectF previewRect){  if (!hasNonZeroArea(previewRect)) {    throw new IllegalArgumentException("previewRect");  }  mCameraToPreviewTransform=cameraToPreviewTransform(mirrorX,displayOrientation,previewRect);  mPreviewToCameraTransform=inverse(mCameraToPreviewTransform);}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static boolean isReplicated(Object result){  boolean replicated=result != null && !Boolean.FALSE.equals(result);  if (replicated)   replicated=result.toString().endsWith("Errors=0");  return replicated;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void precomputeSlope(){  float invDirX=1.0f / dirX;  float invDirY=1.0f / dirY;  float invDirZ=1.0f / dirZ;  s_yx=dirX * invDirY;  s_xy=dirY * invDirX;  s_zy=dirY * invDirZ;  s_yz=dirZ * invDirY;  s_xz=dirZ * invDirX;  s_zx=dirX * invDirZ;  c_xy=originY - s_xy * originX;  c_yx=originX - s_yx * originY;  c_zy=originY - s_zy * originZ;  c_yz=originZ - s_yz * originY;  c_xz=originZ - s_xz * originX;  c_zx=originX - s_zx * originZ;  int sgnX=signum(dirX);  int sgnY=signum(dirY);  int sgnZ=signum(dirZ);  classification=(byte)((sgnZ + 1) << 4 | (sgnY + 1) << 2 | (sgnX + 1));}  }
class C{  @RequestMapping(value="/businessObjectFormats",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_FORMATS_POST) public BusinessObjectFormat createBusinessObjectFormat(@RequestBody BusinessObjectFormatCreateRequest request){  return businessObjectFormatService.createBusinessObjectFormat(request);}  }
class C{  public void remove(int priority){synchronized (lock) {    queue.remove(priority);    highestPriority=queue.isEmpty() ? Integer.MAX_VALUE : queue.peek();    lock.notifyAll();  }}  }
class C{  TestWebData(int length,int lastModified,String name,String type,boolean isDir){  testLength=length;  testLastModified=lastModified;  testName=name;  testType=type;  testDir=isDir;}  }
class C{  public void replot(){  width=co.size();  height=(int)Math.ceil(width * .2);  ratio=width / (double)height;  height=height < MIN_HEIGHT ? MIN_HEIGHT : height > MAX_HEIGHT ? MAX_HEIGHT : height;  if (scale == null) {    scale=computeScale(co);  }  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  int x=0;  for (DBIDIter it=co.iter(); it.valid(); it.advance()) {    double reach=co.getReachability(it);    final int y=scaleToPixel(reach);    try {      int col=colors.getColorForDBID(it);      for (int y2=height - 1; y2 >= y; y2--) {        img.setRGB(x,y2,col);      }    } catch (    ArrayIndexOutOfBoundsException e) {      LOG.error("Plotting out of range: " + x + ","+ y+ " >= "+ width+ "x"+ height);    }    x++;  }  plot=img;}  }
class C{  public C1 method(C1 param){  return param;}  }
class C{  private void processAnsiCommand_atsign(){  int charactersToInsert=getAnsiParameter(0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int readPid() throws IOException {  BufferedReader fileReader=null;  String pidValue=null;  try {    fileReader=new BufferedReader(new FileReader(this.pidFile));    pidValue=fileReader.readLine();    final int pid=Integer.parseInt(pidValue);    if (pid < 1) {      throw new IllegalArgumentException("Invalid pid '" + pid + "' found in "+ this.pidFile.getCanonicalPath());    }    return pid;  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Invalid pid '" + pidValue + "' found in "+ this.pidFile.getCanonicalPath());  } finally {    IOUtils.close(fileReader);  }}  }
class C{  public final void invert(){  invertGeneral(this);}  }
class C{  public static String posBitMask(final long bits){  return String.valueOf(((0xFFFFFFFFL << bits) & 0xFFFFFFFFL) ^ 0xFFFFFFFFL);}  }
class C{  @Override public void onDestroy(){  upnpService.shutdown();  super.onDestroy();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String aggregationType="mean";  int aggregationFactor=2;  int progress, oldProgress;  int rIn, cIn, rOut, cOut, r, c;  double value;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  aggregationFactor=Integer.parseInt(args[2]);  aggregationType=args[3].toLowerCase();  if (inputHeader.isEmpty() || outputHeader.isEmpty() || aggregationType.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (aggregationFactor < 2) {    aggregationFactor=2;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    double nodata=input.getNoDataValue();    int nColsIn=input.getNumberColumns();    int nRowsIn=input.getNumberRows();    int nColsOut=(int)((double)nColsIn / aggregationFactor);    int nRowsOut=(int)((double)nRowsIn / aggregationFactor);    double north=input.getNorth();    double south=north - (input.getCellSizeY() * aggregationFactor * nRowsOut);    double west=input.getWest();    double east=west + (input.getCellSizeX() * aggregationFactor * nColsOut);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,north,south,east,west,nRowsOut,nColsOut,input.getDataScale(),input.getDataType(),0,nodata);    output.setPreferredPalette(input.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    if (aggregationType.equals("mean")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            stat=stat / count;            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.equals("sum")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=0;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                stat+=value;                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("max")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value > stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("min")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double stat=Double.POSITIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < stat) {                  stat=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,stat);          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    } else     if (aggregationType.contains("range")) {      oldProgress=-1;      for (rOut=0; rOut < nRowsOut; rOut++) {        for (cOut=0; cOut < nColsOut; cOut++) {          rIn=rOut * aggregationFactor;          cIn=cOut * aggregationFactor;          double min=Double.POSITIVE_INFINITY;          double max=Double.NEGATIVE_INFINITY;          double count=0;          for (r=rIn; r < rIn + aggregationFactor; r++) {            for (c=cIn; c < cIn + aggregationFactor; c++) {              value=input.getValue(r,c);              if (value != nodata) {                if (value < min) {                  min=value;                }                if (value > max) {                  max=value;                }                count++;              }            }          }          if (count > 0) {            output.setValue(rOut,cOut,(max - min));          } else {            output.setValue(rOut,cOut,nodata);          }        }        progress=(int)(100f * rOut / (nRowsOut - 1));        if (progress > oldProgress) {          oldProgress=progress;          updateProgress(progress);        }      }    }    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  default ListX<T> toListX(){  return ListX.fromIterable(toList());}  }
class C{  public static boolean bookmarkNodeExists(Context context,long nodeId){  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_BOOKMARK_NODE_EXISTS,context,argsToBundle(nodeId));  return result != null ? result.booleanValue() : false;}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private static long findSeed(long v1,long v2){  v1=v1 & 0xFFFFFFFFL;  v2=v2 & 0xFFFFFFFFL;  for (int i=0; i < 0x10000; i++) {    long seed=(v1 << 16) + i;    if ((((seed * multiplier + addend) & mask) >>> 16) == v2) {      return seed;    }  }  return -1;}  }
class C{  protected static Document createDocumentInterActionForm(String action,int initRow,int maxResult,Object results,String name,String value,String parentName,String parentRef,List fieldsInfo,Locale locale){  int totalSize=0;  if (results instanceof ValidationResults) {    totalSize=((ValidationResults)results).getTotalSize();  } else   if (results instanceof List) {    totalSize=((List)results).size();  } else {    totalSize=((Integer)results).intValue();  }  int init=initRow + 1;  if (init > totalSize) {    init=totalSize;  }  int end=initRow + Integer.parseInt(Configurator.getInstance().getProperty(ConfigurationKeys.KEY_DESKTOP_DEFAULT_PAGE_PERSON_SIZE));  if (end > totalSize) {    end=totalSize;  }  int paso=Integer.parseInt(Configurator.getInstance().getProperty(ConfigurationKeys.KEY_DESKTOP_DEFAULT_PAGE_PERSON_SIZE));  if (init > totalSize) {    paso=totalSize;  }  return createDocumentActionForm(action,init,paso,end,totalSize,maxResult,name,value,parentName,parentRef,fieldsInfo,locale);}  }
class C{  public TOMConfiguration(int processId){  super(processId);}  }
class C{  public void callback(Object callbackValue){  if (latch.getCount() > 0) {    this.value=callbackValue;    latch.countDown();  }}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  static public void open(String filename){  open(new String[]{filename});}  }
class C{  public void appendBytes(byte[] bs){  appendBytes(bs,0,bs.length);}  }
class C{  public boolean isConsideredInAllocation(){  return this.consideredInAllocation;}  }
class C{  void onDragExit(){  if (mDragging) {    mDragging=false;  }  mDragCell[0]=mDragCell[1]=-1;  mDragOutlineAnims[mDragOutlineCurrent].animateOut();  mDragOutlineCurrent=(mDragOutlineCurrent + 1) % mDragOutlineAnims.length;  revertTempState();  setIsDragOverlapping(false);}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  @Override public boolean isRendered(){  return true;}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(new Configuration(),new MapReduceIndexerTool(),args);  System.exit(res);}  }
class C{  public DefaultColumnPreferenceHandler(LimeJTable t){  table=t;  startListening();}  }
class C{  public StoredChest(){  super();  store();}  }
class C{  public static void insertStatement(ArrayList<File> list,File dir) throws Exception {  for (int i=0; i < list.size(); i++) {    ArrayList<String> lines=new ArrayList<>();    lines.add("package " + dir.getName() + ";");    try (Scanner input=new Scanner(list.get(i))){      while (input.hasNext()) {        lines.add(input.nextLine());      }    }     try (PrintWriter output=new PrintWriter(list.get(i))){      for (int j=0; j < lines.size(); j++) {        output.println(lines.get(j));      }    }   }}  }
class C{  public Boolean isDelegatable(){  return delegatable;}  }
class C{  protected StateMachineDefinition_Impl(){  super();}  }
class C{  public boolean startScan(){  return false;}  }
class C{  public static PrintWriter openPrintWriterToFile(File file,boolean verbose) throws AdeUsageException {  try {    if (verbose) {      logger.info("Opening " + file.getPath());    }    return new PrintWriter(file,FILE_ENCODING);  } catch (  FileNotFoundException e) {    throw new AdeUsageException("Cannot open file " + file.getPath(),e);  }catch (  UnsupportedEncodingException e) {    throw new AdeUsageException("Platform does not support encoding " + FILE_ENCODING,e);  }}  }
class C{  @Override public String toString(){  return "Tag Manager";}  }
class C{  public void recordSuccess(){  try {    state.get().recordSuccess();  }  finally {    currentExecutions.decrementAndGet();  }}  }
class C{  protected void prepareTable(Info_Column[] layout,String from,String staticWhere,String orderBy){  p_layout=layout;  StringBuffer sql=new StringBuffer("SELECT ");  for (int i=0; i < layout.length; i++) {    if (i > 0)     sql.append(", ");    sql.append(layout[i].getColSQL());    if (layout[i].isIDcol())     sql.append(",").append(layout[i].getIDcolSQL());    p_table.addColumn(layout[i].getColHeader());    if (layout[i].isColorColumn())     p_table.setColorColumn(i);    if (layout[i].getColClass() == IDColumn.class)     m_keyColumnIndex=i;  }  for (int i=0; i < layout.length; i++)   p_table.setColumnClass(i,layout[i].getColClass(),layout[i].isReadOnly(),layout[i].getColHeader());  sql.append(" FROM ").append(from);  if (!staticWhere.equals(""))   sql.append(" WHERE ").append(staticWhere);  m_sqlMain=sql.toString();  m_sqlAdd="";  if (orderBy != null && orderBy.length() > 0)   m_sqlAdd=" ORDER BY " + orderBy;  if (m_keyColumnIndex == -1)   log.log(Level.SEVERE,"Info.prepareTable - No KeyColumn - " + sql);  p_table.setRowSelectionAllowed(true);  p_table.setMultiSelection(false);  p_table.setEditingColumn(0);  p_table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  parameterPanel.setPreferredSize(new Dimension(INFO_WIDTH,parameterPanel.getPreferredSize().height));  scrollPane.setPreferredSize(new Dimension(INFO_WIDTH,400));}  }
class C{  public final void addTab(final String title,final JComponent component){  Preconditions.checkNotNull(title,"IE01228: Title argument can not be null");  Preconditions.checkNotNull(component,"IE01229: Component argument can not be null");  m_tabbedPane.addTab(title,component);}  }
class C{  public Instrumenter attachPopulationSizeCollector(){  includePopulationSize=true;  return this;}  }
class C{  public boolean isValid(){  if (bytes == null) {    throw new IllegalStateException("bytes is null");  }  if (length < 0) {    throw new IllegalStateException("length is negative: " + length);  }  if (length > bytes.length) {    throw new IllegalStateException("length is out of bounds: " + length + ",bytes.length="+ bytes.length);  }  if (offset < 0) {    throw new IllegalStateException("offset is negative: " + offset);  }  if (offset > bytes.length) {    throw new IllegalStateException("offset out of bounds: " + offset + ",bytes.length="+ bytes.length);  }  if (offset + length < 0) {    throw new IllegalStateException("offset+length is negative: offset=" + offset + ",length="+ length);  }  if (offset + length > bytes.length) {    throw new IllegalStateException("offset+length out of bounds: offset=" + offset + ",length="+ length+ ",bytes.length="+ bytes.length);  }  return true;}  }
class C{  protected boolean updateNextIndex(){  if (nextIndex == -1 && !parent.isExpanded()) {    return false;  }  if (childCount == 0) {    return false;  } else   if (++nextIndex >= childCount) {    return false;  }  FHTreeStateNode child=parent.getChildAtModelIndex(nextIndex);  if (child != null && child.isExpanded()) {    parent=child;    nextIndex=-1;    childCount=treeModel.getChildCount(child.getUserObject());  }  return true;}  }
class C{  public static void nextMonth(int year,int month,int[] nextDate){  if (month == 11) {    year++;    month=0;  } else {    month++;  }  nextDate[0]=year;  nextDate[1]=month;}  }
class C{  @Override public double[] distributionForInstance(BayesNet bayesNet,Instance instance) throws Exception {  Instances instances=bayesNet.m_Instances;  int nNumClasses=instances.numClasses();  double[] fProbs=new double[nNumClasses];  for (int iClass=0; iClass < nNumClasses; iClass++) {    fProbs[iClass]=1.0;  }  for (int iClass=0; iClass < nNumClasses; iClass++) {    double logfP=0;    for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {      double iCPT=0;      for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {        int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);        if (nParent == instances.classIndex()) {          iCPT=iCPT * nNumClasses + iClass;        } else {          iCPT=iCPT * instances.attribute(nParent).numValues() + instance.value(nParent);        }      }      if (iAttribute == instances.classIndex()) {        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(iClass));      } else {        logfP+=Math.log(bayesNet.m_Distributions[iAttribute][(int)iCPT].getProbability(instance.value(iAttribute)));      }    }    fProbs[iClass]+=logfP;  }  double fMax=fProbs[0];  for (int iClass=0; iClass < nNumClasses; iClass++) {    if (fProbs[iClass] > fMax) {      fMax=fProbs[iClass];    }  }  for (int iClass=0; iClass < nNumClasses; iClass++) {    fProbs[iClass]=Math.exp(fProbs[iClass] - fMax);  }  Utils.normalize(fProbs);  return fProbs;}  }
class C{  @Override public String toString(){  return "cudaPitchedPtr[" + "ptr=" + ptr + ","+ "pitch="+ pitch+ ","+ "xsize="+ xsize+ ","+ "ysize="+ ysize+ "]";}  }
class C{  protected int score(MediaType contentTypeFromRequest,MediaType... expectedTypes){  if (contentTypeFromRequest == null) {    return DEFAULT_SCORE;  }  for (  MediaType expected : expectedTypes) {    if (contentTypeFromRequest.matches(expected)) {      return MAXIMUM_FORMAT_SCORE;    }  }  return DEFAULT_SCORE;}  }
class C{  protected DateAttribute(String name){  this(name,Ontology.DATE);}  }
class C{  protected double delta(double val1,double val2){  double diff=val1 - val2;  return diff * diff;}  }
class C{  public Level(long points){  this.points=points;  exactLevel=1 + MathUtil.logOfBase(1.05,points + 6600) - MathUtil.logOfBase(1.05,6600);}  }
class C{  public String toString(byte[] b){  ByteArrayOutputStream os=new ByteArrayOutputStream();  for (int i=0; i < (b.length + 4) / 5; i++) {    short s[]=new short[5];    int t[]=new int[8];    int blocklen=5;    for (int j=0; j < 5; j++) {      if ((i * 5 + j) < b.length)       s[j]=(short)(b[i * 5 + j] & 0xFF); else {        s[j]=0;        blocklen--;      }    }    int padlen=blockLenToPadding(blocklen);    t[0]=(byte)((s[0] >> 3) & 0x1F);    t[1]=(byte)(((s[0] & 0x07) << 2) | ((s[1] >> 6) & 0x03));    t[2]=(byte)((s[1] >> 1) & 0x1F);    t[3]=(byte)(((s[1] & 0x01) << 4) | ((s[2] >> 4) & 0x0F));    t[4]=(byte)(((s[2] & 0x0F) << 1) | ((s[3] >> 7) & 0x01));    t[5]=(byte)((s[3] >> 2) & 0x1F);    t[6]=(byte)(((s[3] & 0x03) << 3) | ((s[4] >> 5) & 0x07));    t[7]=(byte)(s[4] & 0x1F);    for (int j=0; j < t.length - padlen; j++) {      char c=alphabet.charAt(t[j]);      if (lowercase)       c=Character.toLowerCase(c);      os.write(c);    }    if (padding) {      for (int j=t.length - padlen; j < t.length; j++)       os.write('=');    }  }  return new String(os.toByteArray());}  }
class C{  private Query analyzePhrase(String field,TokenStream stream,int slop) throws IOException {  PhraseQuery.Builder builder=new PhraseQuery.Builder();  builder.setSlop(slop);  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);  PositionIncrementAttribute posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);  int position=-1;  stream.reset();  while (stream.incrementToken()) {    if (enablePositionIncrements) {      position+=posIncrAtt.getPositionIncrement();    } else {      position+=1;    }    builder.add(new Term(field,termAtt.getBytesRef()),position);  }  return builder.build();}  }
class C{  public static Value fromObject(Object object){  final TInstance type;  Value value=null;  if (object == null) {    value=new Value(null);    value.putNull();  } else   if (object instanceof String) {    String s=(String)object;    type=MString.VARCHAR.instance(s.length(),StringFactory.DEFAULT_CHARSET.ordinal(),StringFactory.NULL_COLLATION_ID,false);    value=new Value(type,s);  } else   if (object instanceof Long) {    type=MNumeric.BIGINT.instance(false);    value=new Value(type,(Long)object);  } else   if (object instanceof Integer) {    type=MNumeric.INT.instance(false);    value=new Value(type,(Integer)object);  } else   if (object instanceof Double) {    type=MApproximateNumber.DOUBLE.instance(false);    value=new Value(type,(Double)object);  } else   if (object instanceof Float) {    type=MApproximateNumber.FLOAT.instance(false);    value=new Value(type,(Float)object);  } else   if (object instanceof BigDecimalWrapper) {    BigDecimalWrapper bdw=(BigDecimalWrapper)object;    type=MNumeric.DECIMAL.instance(bdw.getPrecision(),bdw.getScale(),false);    value=new Value(type);    value.putObject(bdw);  } else   if (object instanceof BigDecimal) {    BigDecimal bd=(BigDecimal)object;    type=MNumeric.DECIMAL.instance(BigDecimalWrapperImpl.sqlPrecision(bd),BigDecimalWrapperImpl.sqlScale(bd),false);    value=new Value(type);    value.putObject(new BigDecimalWrapperImpl(bd));  } else   if (object instanceof ByteSource || object instanceof byte[]) {    byte[] bytes;    if (object instanceof byte[]) {      bytes=(byte[])object;    } else {      ByteSource source=(ByteSource)object;      byte[] srcArray=source.byteArray();      int offset=source.byteArrayOffset();      int end=offset + source.byteArrayLength();      bytes=Arrays.copyOfRange(srcArray,offset,end);    }    type=MBinary.VARBINARY.instance(bytes.length,false);    value=new Value(type,bytes);  } else   if (object instanceof BigInteger) {    type=MNumeric.BIGINT_UNSIGNED.instance(false);    BigInteger bi=(BigInteger)object;    value=new Value(type,bi.longValue());  } else   if (object instanceof Boolean) {    type=AkBool.INSTANCE.instance(false);    value=new Value(type,(Boolean)object);  } else   if (object instanceof Character) {    type=MString.VARCHAR.instance(1,false);    value=new Value(type,object.toString());  } else   if (object instanceof Short) {    type=MNumeric.SMALLINT.instance(false);    value=new Value(type,(Short)object);  } else   if (object instanceof Byte) {    type=MNumeric.TINYINT.instance(false);    value=new Value(type,(Byte)object);  } else   if (object instanceof UUID) {    type=AkGUID.INSTANCE.instance(false);    value=new Value(type);    value.putObject(object);  } else   if (object instanceof BlobRef) {    type=AkBlob.INSTANCE.instance(false);    value=new Value(type);    value.putObject(type);  } else {    throw new UnsupportedOperationException("can't convert " + object + " of type "+ object.getClass());  }  return value;}  }
class C{  public static RelationshipType find(String value){  return enums.find(value);}  }
class C{  @Override public int hashCode(){  if (mBluetoothDevice == null) {    return 0;  }  return mBluetoothDevice.hashCode();}  }
class C{  protected void _createChildren(IOutlineNode parentNode,FDPropertyDecl node){  if (node.getType().getComplex() != null)   for (  EObject element : node.getType().getComplex().eContents())   createNode(parentNode,element);  FDComplexValue value=GenericPropertyAccessor.getDefault(node);  if (value != null && (node.getType().getComplex() == null || !(node.getType().getComplex() instanceof FDEnumType)))   if (value.getSingle() != null)   createNode(parentNode,value.getSingle()); else   for (  FDValue arrayVal : value.getArray().getValues())   createNode(parentNode,arrayVal);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void addProjectedField(String s){  try {    Field f=inClazz.getDeclaredField(s);    TypeInfo t=new TypeInfo(f.getName(),ClassUtils.primitiveToWrapper(f.getType()));    t.getter=PojoUtils.createGetter(inClazz,t.name,t.type);    t.setter=PojoUtils.createSetter(projectedClazz,t.name,t.type);    projectedFields.add(t);  } catch (  NoSuchFieldException e) {    throw new RuntimeException("Field " + s + " not found in class "+ inClazz,e);  }}  }
class C{  @NotNull public <T extends JsonValue>T createValue(@NotNull String content){  final PsiFile file=createDummyFile("{\"foo\": " + content + "}");  return (T)((JsonObject)file.getFirstChild()).getPropertyList().get(0).getValue();}  }
class C{  public void clear(){  removeAllElements();}  }
class C{  public ReplyProcessor21(InternalDistributedSystem system,InternalDistributedMember member){  this(system,Collections.singleton(member));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.338 -0500",hash_original_method="303C743BABF91BBE1D2B949725040AC0",hash_generated_method="303C743BABF91BBE1D2B949725040AC0") Values values(Thread current){  return current.localValues;}  }
class C{  public static void register(final IGraphPanelExtensionCreator creator){  m_creators.add(creator);}  }
class C{  public Bot createBot(){  if (hasBot()) {    throw new RuntimeException("Can't create a 2nd Bot for this Application!");  }  Requester.Response response=api.getRequester().post(Requester.DISCORD_API_PREFIX + "oauth2/applications/" + id+ "/bot",new JSONObject());  if (response.isOk()) {    JSONObject botO=response.getObject();    bot=new Bot(botO.getString("username"),botO.getString("discriminator"),botO.getString("token"),botO.getString("id"),botO.isNull("avatar") ? null : botO.getString("avatar"));    return bot;  }  throw new RuntimeException("Error creating a new Bot: " + response.toString());}  }
class C{  public JAMonListener copy(){  return new JAMonBufferListener(getName(),list.copy());}  }
class C{  public SortingParams alpha(){  params.add(ALPHA.raw);  return this;}  }
class C{  public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  ProjectList response=client.get(ProjectList.class,PathConstants.PROJECT_BY_TENANT_URL,tenantId);  return ResourceUtils.defaultList(response.getProjects());}  }
class C{  public HandshakeFailedException(String message){  super(message);}  }
class C{  private void deleteSelectedBusinessTransactions(){  ISelection selection=tableViewer.getSelection();  if ((selection instanceof StructuredSelection) && !selection.isEmpty()) {    boolean itemsDeleted=false;    for (    Object selectedElement : ((StructuredSelection)selection).toList()) {      BusinessTransactionDefinition businessTxDefinition=(BusinessTransactionDefinition)selectedElement;      if (businessTxDefinition.getId() != BusinessTransactionDefinition.DEFAULT_ID) {        getApplication().deleteBusinessTransactionDefinition(businessTxDefinition);        validationManager.validationStatesRemoved(businessTxDefinition);        itemsDeleted=true;      }    }    if (itemsDeleted) {      updateContent(StructuredSelection.EMPTY);      managedForm.fireSelectionChanged(BusinessTransactionMasterBlock.this,StructuredSelection.EMPTY);      markDirty();    }  }}  }
class C{  private static void d_uakp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  int len=Math.min((ru - rl) * n,a.length);  sum(a,rl * n,len,kbuff,kplus);  c[0]=kbuff._sum;  c[1]=kbuff._correction;}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public Interval withPeriodBeforeEnd(ReadablePeriod period){  if (period == null) {    return withDurationBeforeEnd(null);  }  Chronology chrono=getChronology();  long endMillis=getEndMillis();  long startMillis=chrono.add(period,endMillis,-1);  return new Interval(startMillis,endMillis,chrono);}  }
class C{  public EntryStream<K,V> nonNullKeys(){  return filter(null);}  }
class C{  public void testZeroOne(){  byte aBytes[]={0};  byte bBytes[]={1};  int aSign=0;  int bSign=1;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public BigDecimal optBigDecimal(int index,BigDecimal defaultValue){  try {    return this.getBigDecimal(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public boolean addAll(int index,RoleUnresolvedList roleList) throws IllegalArgumentException, IndexOutOfBoundsException {  if (roleList == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  return (super.addAll(index,roleList));}  }
class C{  public Element store(Object o){  PositionablePolygon p=(PositionablePolygon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionablePolygon");  storeCommonAttributes(p,element);  element.addContent(storePath(p));  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionablePolygonXml");  return element;}  }
class C{  private static void killCurrentProcess(){  android.os.Process.killProcess(android.os.Process.myPid());  System.exit(10);}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public Set<Integer> keySet(){  Set<Integer> ks=keySet;  return (ks != null ? ks : (keySet=new KeySet()));}  }
class C{  public void testUrlRerwriteTestCase(){}  }
class C{  void registerTap(){  if (isPromoAvailable()) {    DisableablePromoTapCounter promoTapCounter=getPromoTapCounter();    if (promoTapCounter.isEnabled()) {      promoTapCounter.increment();    }  }  int tapsSinceOpen=mPreferenceManager.getContextualSearchTapCount();  mPreferenceManager.setContextualSearchTapCount(++tapsSinceOpen);  if (isUserUndecided()) {    ContextualSearchUma.logTapsSinceOpenForUndecided(tapsSinceOpen);  } else {    ContextualSearchUma.logTapsSinceOpenForDecided(tapsSinceOpen);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.031 -0500",hash_original_method="D60A69CC97C8202C3B8342511B9B0E17",hash_generated_method="650895162A56A032665DB40B814BA737") private static byte[] encodeUCS2(String message,byte[] header) throws UnsupportedEncodingException {  byte[] userData, textPart;  textPart=message.getBytes("utf-16be");  if (header != null) {    userData=new byte[header.length + textPart.length + 1];    userData[0]=(byte)header.length;    System.arraycopy(header,0,userData,1,header.length);    System.arraycopy(textPart,0,userData,header.length + 1,textPart.length);  } else {    userData=textPart;  }  byte[] ret=new byte[userData.length + 1];  ret[0]=(byte)(userData.length & 0xff);  System.arraycopy(userData,0,ret,1,userData.length);  return ret;}  }
class C{  public static boolean isImage(String path,boolean jpgOnly){  if (path == null)   return false;  String lcPath=path.toLowerCase();  if ((!jpgOnly) && (lcPath.endsWith(".gif") || lcPath.endsWith(".png") || lcPath.endsWith(".tiff")|| lcPath.endsWith(".bmp"))) {    return true;  }  return lcPath.endsWith(".jpg") || lcPath.endsWith(".jpeg");}  }
class C{  public static Object call0(Callable fun,Scriptable thisObj,Context cx,Scriptable scope){  return fun.call(cx,scope,thisObj,ScriptRuntime.emptyArgs);}  }
class C{  public void run(){  try {    try {      Socket temp=factory.createSocket(host,port);synchronized (this) {        socket=temp;        notify();      }      rememberFactory(host,factory);synchronized (this) {        if (cleanUp)         try {          socket.close();        } catch (        IOException e) {        }      }    } catch (    Exception e) {synchronized (this) {        exception=e;        notify();      }    }  }  finally {  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__RETURN_TYPE:    setReturnType(RETURN_TYPE_EDEFAULT);  return;case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)null);return;}super.eUnset(featureID);}  }
class C{  public void testStringWithSemicolon() throws IOException {  final String sql="INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some ; text', 'some ; text' )";  final InputStream stream=this.getStream(R.raw.string_with_semicolon);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql,commands.get(0));}  }
class C{  ArrayCreation(AST ast){  super(ast);}  }
class C{  public boolean isDelegationTargetIsAbstract(){  return delegationTargetIsAbstract;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static boolean isSameLength(final float[] array1,final float[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public ManagerFactory(){  this(getDatabaseUrl(),new Manager.Pool(),IDLE_TXN_POLL_SECONDS,TimeUnit.SECONDS,ConnectionMode.READ_WRITE);}  }
class C{  public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  public static double[][] johnsonShortestPathsMatrix(final Network network,final EdgeMetric computer){  final int N=getNumberNodes(network);  double[][] result=new double[N][N];  DoubleHeap heap=new DoubleHeap();  for (int i=0; i < N; i++) {    for (int j=0; j < result.length; j++)     result[i][j]=Double.POSITIVE_INFINITY;    heap.clear();    heap.add(network.allNodes.objs[i],0.0);    while (!heap.isEmpty()) {      final double dist=heap.getMinKey();      final Object node=heap.extractMin();      int nodeIndex=network.getNodeIndex(node);      if (result[i][nodeIndex] > -1 && result[i][nodeIndex] <= dist)       continue;      result[i][nodeIndex]=dist;      final Bag edgesOut=network.getEdgesOut(node);      for (int j=0; j < edgesOut.numObjs; j++) {        final Edge edge=(Edge)(edgesOut.objs[j]);        int toNode=network.getNodeIndex(((Edge)(edgesOut.objs[j])).getOtherNode(node));        final double newDist=dist + computer.getWeight(edge);        if (result[i][toNode] > newDist)         heap.add(network.allNodes.objs[toNode],newDist);      }    }    result[i][i]=0;  }  return result;}  }
class C{  public boolean nullsAreSortedAtStart() throws SQLException {  return false;}  }
class C{  public void tryScheduleAction(Runnable action){  try {    scheduler.submit(action);  } catch (  RejectedExecutionException e) {  }}  }
class C{  public boolean include(){  if (write == null) {    if (parent != null) {      if (parent.isMatch()) {        write=true;        match=true;        return write;      }      if (parent.matchings() != null) {        for (        String[] matcher : parent.matchings()) {          if (matcher.length > 0) {            String field=matcher[0];            if ("**".equals(field)) {              addMatching(matcher);            }            if ((field != null) && (Regex.simpleMatch(field,property))) {              int remaining=matcher.length - 1;              if (remaining == 0) {                write=true;                match=true;                return write;              } else {                String[] submatching=new String[remaining];                System.arraycopy(matcher,1,submatching,0,remaining);                addMatching(submatching);              }            }          }        }      }    } else {      write=true;    }    if (write == null) {      write=false;    }  }  return write;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  if (a == null)   return new Long(0);  Watched w=Wizard.getInstance().getWatch(a);  if (stack.getUIMgrSafe() != null && stack.getUIMgrSafe().getVideoFrame().hasFile()) {    MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();    if (mf != null && mf.getContentAiring() == a) {      return new Long(Sage.time());    }  }  return (w == null) ? new Long(0) : new Long(w.getRealWatchEnd());}  }
class C{  protected void fireBrokerError(BrokerModelException brokerError){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).brokerError(brokerError);    }  }}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  private void release(RealConnection connection){  for (int i=0, size=connection.allocations.size(); i < size; i++) {    Reference<StreamAllocation> reference=connection.allocations.get(i);    if (reference.get() == this) {      connection.allocations.remove(i);      return;    }  }  throw new IllegalStateException();}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public URI(){}  }
class C{  @SmallTest public void testCreateSpeechRules_multipleRuleParsing() throws Exception {  final String strategy="<ss:rule>" + "  <ss:formatter>" + "    <ss:property>packageName</ss:property>"+ "  </ss:formatter>"+ "</ss:rule>"+ "<ss:rule>"+ "  <ss:formatter>"+ "    <ss:property>packageName</ss:property>"+ "  </ss:formatter>"+ "</ss:rule>";  loadSpeechRulesAssertingCorrectness(strategy,2);}  }
class C{  public Source<Float> fromNegativeInfinityToNegativeZero(){  return Compositions.weightWithValues(Floats.fromNegativeInfinityToNegativeZero(),Float.NEGATIVE_INFINITY,-0f);}  }
class C{  @Override public void onTransferProgress(long progressRate,long totalTransferredSoFar,long totalToTransfer,String filePath){  int percent=(int)(100.0 * ((double)totalTransferredSoFar) / ((double)totalToTransfer));  if (percent != mLastPercent) {    mNotificationBuilder.setProgress(100,percent,false);    String fileName=filePath.substring(filePath.lastIndexOf(FileUtils.PATH_SEPARATOR) + 1);    String text=String.format(getString(R.string.uploader_upload_in_progress_content),percent,fileName);    mNotificationBuilder.setContentText(text);    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());  }  mLastPercent=percent;}  }
class C{  protected void saveHistory(){  BufferedOutputStream str;  try {    str=new BufferedOutputStream(new FileOutputStream(getHistoryFilename()));    m_History.store(str,"SQL-Viewer-History");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public TextProperty(String value){  super(value);}  }
class C{  public static List<StructuralPropertyDescriptor> propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element elementNS;  Attr attr;  Attr attrNS;  String elemNSURI;  String elemNSURINull;  String attrNSURI;  String attrNSURINull;  String nullNS=null;  doc=(Document)load("staff",false);  element=doc.createElementNS(nullNS,"elem");  elementNS=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS(nullNS,"attr");  attrNS=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNSURI=elementNS.getNamespaceURI();  elemNSURINull=element.getNamespaceURI();  attrNSURI=attrNS.getNamespaceURI();  attrNSURINull=attr.getNamespaceURI();  assertEquals("nodegetnamespaceuri03_elemNSURI","http://www.w3.org/DOM/Test/elem",elemNSURI);  assertNull("nodegetnamespaceuri03_1",elemNSURINull);  assertEquals("nodegetnamespaceuri03_attrNSURI","http://www.w3.org/DOM/Test/attr",attrNSURI);  assertNull("nodegetnamespaceuri03_2",attrNSURINull);}  }
class C{  @Interruptible public static Address initializeScalarHeader(BootImageInterface bootImage,Address ptr,TIB tib,int size,boolean needsIdentityHash,int identityHashValue){  Address ref=ptr.plus(OBJECT_REF_OFFSET);  if (needsIdentityHash) {    bootImage.setFullWord(ref.plus(STATUS_OFFSET),HASH_STATE_HASHED_AND_MOVED.toInt());    if (DYNAMIC_HASH_OFFSET) {      RVMType t=tib.getType();      bootImage.setFullWord(ptr.plus(t.asClass().getInstanceSize()),identityHashValue);    } else {      ref=ref.plus(HASHCODE_BYTES);      bootImage.setFullWord(ref.plus(HASHCODE_OFFSET),(identityHashValue << 1) | ALIGNMENT_MASK);    }  } else {    bootImage.setFullWord(ref.plus(STATUS_OFFSET),HASH_STATE_HASHED.toInt());  }  return ref;}  }
class C{  public boolean isFinalResponse(){  return isFinalResponse(statusLine.getStatusCode());}  }
class C{  public boolean isSetKeys(){  return this.keys != null;}  }
class C{  public static void deviceReportPressed(String devName,Frame parent){  JTextArea text=null;  JScrollPane scrollPane=null;  text=new javax.swing.JTextArea(25,50);  text.setEditable(false);  text.setTabSize(4);  search(devName,text);  scrollPane=new JScrollPane(text);  makeDialog(scrollPane,null,parent,rbm.getString("CrossReferenceTitle"));}  }
class C{  public int locationToIndex(JList a,Point b){  int returnValue=((ListUI)(uis.elementAt(0))).locationToIndex(a,b);  for (int i=1; i < uis.size(); i++) {    ((ListUI)(uis.elementAt(i))).locationToIndex(a,b);  }  return returnValue;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  protected void copyRequestHeaders(HttpServletRequest servletRequest,HttpRequest proxyRequest){  Enumeration enumerationOfHeaderNames=servletRequest.getHeaderNames();  while (enumerationOfHeaderNames.hasMoreElements()) {    String headerName=(String)enumerationOfHeaderNames.nextElement();    if (headerName.equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH))     continue;    if (hopByHopHeaders.containsHeader(headerName))     continue;    Enumeration headers=servletRequest.getHeaders(headerName);    while (headers.hasMoreElements()) {      String headerValue=(String)headers.nextElement();      if (headerName.equalsIgnoreCase(HttpHeaders.HOST)) {        HttpHost host=getTargetHost(servletRequest);        headerValue=host.getHostName();        if (host.getPort() != -1)         headerValue+=":" + host.getPort();      } else       if (headerName.equalsIgnoreCase(org.apache.http.cookie.SM.COOKIE)) {        headerValue=getRealCookie(headerValue);      }      proxyRequest.addHeader(headerName,headerValue);    }  }}  }
class C{  @Override public void resumeLocking(){  checkDestroyed();  try {    unlock(SUSPEND_LOCKING_TOKEN);  } catch (  IllegalStateException e) {    checkDestroyed();    throw e;  }}  }
class C{  public void testUnchangedOrder(){  m_Filter=getFilter(SortLabels.SORT_CASESENSITIVE,"first-last");  testBuffered();  Instances result=performTest();  for (int i=0; i < m_Instances.attribute(2).numValues(); i++)   assertEquals("Values differ for index #" + (i + 1),m_Instances.attribute(2).value(i),result.attribute(2).value(i));}  }
class C{  public AllInstructionsEnum(IR ir,BasicBlock block){  explicitInstructions=block.forwardInstrEnumerator();  if (ir.inSSAForm()) {    implicitInstructions=ir.HIRInfo.dictionary.getHeapPhiInstructions(block);  } else {    implicitInstructions=null;  }  labelInstruction=explicitInstructions.nextElement();}  }
class C{  public static int totalNQueens(int n){  int res[]={0};  int[] board=new int[n];  totalNQueensDFS(n,0,board,res);  return res[0];}  }
class C{  public long computeMillis(boolean resetFields){  return computeMillis(resetFields,null);}  }
class C{  public String next(String pattern){  return next(patternCache.forName(pattern));}  }
class C{  public AssociationException(){  super();}  }
class C{  private void popupExplanation(JLabel label){  if (Helper.isNotNullOrEmpty(label.getToolTipText()))   JOptionPane.showMessageDialog(this,label.getToolTipText(),Localization.Main.getText("gui.tooltip"),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public int initializeBlockingSensors(){  int numErrors=0;  for (int i=0; i < mTransitSectionList.size(); i++) {    Section s=mTransitSectionList.get(i).getSection();    try {      if (s.getForwardBlockingSensor() != null) {        if (s.getState() == Section.FREE) {          s.getForwardBlockingSensor().setState(Sensor.ACTIVE);        }      } else {        log.warn("Missing forward blocking sensor for section " + s.getSystemName());        numErrors++;      }    } catch (    jmri.JmriException reason) {      log.error("Exception when initializing forward blocking Sensor for Section " + s.getSystemName());      numErrors++;    }    try {      if (s.getReverseBlockingSensor() != null) {        if (s.getState() == Section.FREE) {          s.getReverseBlockingSensor().setState(Sensor.ACTIVE);        }      } else {        log.warn("Missing reverse blocking sensor for section " + s.getSystemName());        numErrors++;      }    } catch (    jmri.JmriException reason) {      log.error("Exception when initializing reverse blocking Sensor for Section " + s.getSystemName());      numErrors++;    }  }  return numErrors;}  }
class C{  static public Properties fuse(Map defaults,Map override,boolean ignoreConflicts){  if (defaults == null) {    throw new IllegalArgumentException();  }  if (override == null) {    throw new IllegalArgumentException();  }  if (override instanceof Properties) {    override=flatten((Properties)override);  }  if (!(defaults instanceof Properties)) {    Properties tmp=new Properties();    tmp.putAll(defaults);    defaults=tmp;  }  list("defaults : ",((Properties)defaults),System.err);  Iterator itr=override.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry entry=(Map.Entry)itr.next();    String property=(String)entry.getKey();    String overrideValue=(String)entry.getValue();    String existingValue=((Properties)defaults).getProperty(property);    System.err.println("property=" + property + " : existingValue="+ existingValue+ ", overrideValue="+ overrideValue);    if (existingValue != null) {      if (existingValue.equals(overrideValue)) {        continue;      } else       if (ignoreConflicts) {        defaults.put(property,overrideValue);      } else {        throw new RuntimeException("Would override property=" + property + ": existingValue="+ existingValue+ ", overrideValue="+ overrideValue);      }    } else {      defaults.put(property,overrideValue);    }  }  return (Properties)defaults;}  }
class C{  public String readString(){  short utfLength=readShort();  if (utfLength == -1)   return null;  String result=readUTF(utfLength);  return result;}  }
class C{  public ActionEvent(Object source,int keyEvent){  this.source=source;  this.keyEvent=keyEvent;  this.trigger=Type.KeyRelease;}  }
class C{  public JLabel(Icon image){  this(null,image,CENTER);}  }
class C{  public void shutdown(){  this.waitingForAuthentication=true;  this.shutDown=true;  this.peacefulShutdown=true;}  }
class C{  public DateRange modify(DateRange range){  return modify(range.getStart(),range.getEnd());}  }
class C{  public RetriesLimitReachedException(String item,int retries){  super(String.format("Item %s reached retries limit : %d",item,retries));}  }
class C{  public AzureAllocationContext(ComputeInstanceRequest computeReq){  this.computeRequest=computeReq;  this.stage=AzureStages.VMDESC;}  }
class C{  public C lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 1)   reportWrongNumberArgs();}  }
class C{  protected void writeCSVData(Zone<Id> measurePoint,Coord coordFromZone,Node fromNode,double freeSpeedAccessibility,double carAccessibility,double bikeAccessibility,double walkAccessibility){}  }
class C{  @Provides @Config("integrationEmail") public static String provideIntegrationEmail(RegistryEnvironment environment){  return "integration@example.com";}  }
class C{  protected JWSAlgorithm mapSignatureAlgorithm(String signatureAlgorithm) throws IdentityOAuth2Exception {  if (NONE.equals(signatureAlgorithm)) {    return new JWSAlgorithm(JWSAlgorithm.NONE.getName());  } else   if (SHA256_WITH_RSA.equals(signatureAlgorithm)) {    return JWSAlgorithm.RS256;  } else   if (SHA384_WITH_RSA.equals(signatureAlgorithm)) {    return JWSAlgorithm.RS384;  } else   if (SHA512_WITH_RSA.equals(signatureAlgorithm)) {    return JWSAlgorithm.RS512;  } else   if (SHA256_WITH_HMAC.equals(signatureAlgorithm)) {    return JWSAlgorithm.HS256;  } else   if (SHA384_WITH_HMAC.equals(signatureAlgorithm)) {    return JWSAlgorithm.HS384;  } else   if (SHA512_WITH_HMAC.equals(signatureAlgorithm)) {    return JWSAlgorithm.HS512;  } else   if (SHA256_WITH_EC.equals(signatureAlgorithm)) {    return JWSAlgorithm.ES256;  } else   if (SHA384_WITH_EC.equals(signatureAlgorithm)) {    return JWSAlgorithm.ES384;  } else   if (SHA512_WITH_EC.equals(signatureAlgorithm)) {    return JWSAlgorithm.ES512;  }  throw new IdentityOAuth2Exception("Unsupported Signature Algorithm in identity.xml");}  }
class C{  void injectAll(final Errors errors){  for (  InjectableReference<?> reference : new ArrayList<>(pendingInjection.values())) {    try {      reference.get(errors);    } catch (    ErrorsException e) {      errors.merge(e.getErrors());    }  }  if (!pendingInjection.isEmpty()) {    throw new AssertionError("Failed to satisfy " + pendingInjection);  }  ready.countDown();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean gaussianElimination(final LongArrayBitVector solution){  assert solution.length() == numVars * 2;  for (  Modulo3Equation equation : equations)   equation.updateFirstVar();  if (!echelonForm())   return false;  final long[] solutionBits=solution.bits();  final LongBigList solutionList=solution.asLongBigList(2);  for (int i=equations.size(); i-- != 0; ) {    final Modulo3Equation equation=equations.get(i);    if (equation.isIdentity())     continue;    assert solutionList.getLong(equation.firstVar) == 0 : equation.firstVar;    int sum=(equation.c - Modulo3Equation.scalarProduct(equation.bits,solutionBits)) % 3;    if (sum < 0)     sum+=3;    solutionList.set(equation.firstVar,sum == 0 ? 0 : equation.firstCoeff == sum ? 1 : 2);  }  return true;}  }
class C{  public final void print(float f) throws IOException {  print(String.valueOf(f));}  }
class C{  private final void subMod3(final long[] y){  final long[] x=this.bits;  long isNotEmpty=0;  for (int i=x.length; i-- != 0; )   isNotEmpty|=(x[i]=subMod3(x[i],y[i]));  isEmpty=isNotEmpty == 0;}  }
class C{  private void initializeTransientFields(final Class<L> listenerInterface,final ClassLoader classLoader){  @SuppressWarnings("unchecked") final L[] array=(L[])Array.newInstance(listenerInterface,0);  this.prototypeArray=array;  createProxy(listenerInterface,classLoader);}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  TypeTupleSet(){  this.typeTuples=new ArrayList<>();  this.typeTuples.add(new ArrayList<ReferenceType>());  this.tupleLength=0;}  }
class C{  public static boolean areFilePathsSame(final String path1,final String path2){  return PathFileComparator.PATH_SYSTEM_COMPARATOR.compare(new File(path1),new File(path2)) == 0 ? true : false;}  }
class C{  static boolean isJavaAssignable(Class lhsType,Class rhsType){  return isJavaBaseAssignable(lhsType,rhsType) || isJavaBoxTypesAssignable(lhsType,rhsType);}  }
class C{  public Value createValue(Object instance){  if (instance instanceof RDFObjectBehaviour) {    RDFObjectBehaviour support=(RDFObjectBehaviour)instance;    Object entity=support.getBehaviourDelegate();    if (entity != instance)     return createValue(entity);  }  if (instance instanceof RDFObject)   return ((RDFObject)instance).getResource();  if (instance instanceof Class<?>) {    URI type=getNameOf((Class<?>)instance);    if (type != null)     return type;  }  return lm.createLiteral(instance);}  }
class C{  public void bindLong(int index,long value){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void onPush(final RPEntity entity){  turnOfLastPush=SingletonRepository.getRuleProcessor().getTurn();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + BigramCount.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - num reducers: " + args.numReducers);  Job job=Job.getInstance(getConf());  job.setJobName(BigramCount.class.getSimpleName());  job.setJarByClass(BigramCount.class);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(IntWritable.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(IntWritable.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapperClass(MyMapper.class);  job.setCombinerClass(MyReducer.class);  job.setReducerClass(MyReducer.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  static void validateFail(File file){  if (System.getProperty("jmri.skipschematests","false").equals("true"))   return;  boolean original=XmlFile.getVerify();  try {    XmlFile.setVerify(true);    XmlFile xf=new XmlFile(){    };    xf.rootFromFile(file);    Assert.fail("Validation should have failed: " + file.getName());  } catch (  Exception ex) {    XmlFile.setVerify(original);    return;  } finally {    XmlFile.setVerify(original);  }}  }
class C{  public static boolean urlEqualsHostIgnoreCase(URI uri,URI requestedUri){  return uri.getScheme().equalsIgnoreCase(requestedUri.getScheme()) && uri.getPort() == requestedUri.getPort() && uri.getPath().equalsIgnoreCase(requestedUri.getPath());}  }
class C{  public StringBuffer computeIndentation(int offset){  return computeIndentation(offset,false);}  }
class C{  public MyString2 toUpperCase(){  String n="";  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')     n+=String.valueOf((char)(s.charAt(i) - 32)); else     n+=String.valueOf(s.charAt(i));  }  return new MyString2(n);}  }
class C{  public Vec3d transformVec(Vec3d point,Vec3d centerPoint){  double px=point.xCoord - centerPoint.xCoord;  double py=point.yCoord - centerPoint.yCoord;  double pz=point.zCoord - centerPoint.zCoord;  return new Vec3d(this.matrix[0] * px + this.matrix[1] * py + this.matrix[2] * pz + centerPoint.xCoord,this.matrix[3] * px + this.matrix[4] * py + this.matrix[5] * pz + centerPoint.yCoord,this.matrix[6] * px + this.matrix[7] * py + this.matrix[8] * pz + centerPoint.zCoord);}  }
class C{  private void runWebSphereCommand(String wsCommand,String... arguments){  StringBuffer command=new StringBuffer();  command.append(getHome());  command.append(File.separator);  command.append("bin");  command.append(File.separator);  command.append(wsCommand);  if (JdkUtils.isWindows()) {    command.append(WINDOWS_SUFFIX);  } else {    command.append(LINUX_SUFFIX);  }  for (  String argument : arguments) {    command.append(" ");    command.append(argument);  }  getLogger().debug("Executing command: " + command.toString(),this.getClass().getName());  getProcessExecutor().executeAndWait(command.toString());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    return entryForNullKey != null;  }  int hash=key.hashCode();  hash^=(hash >>> 20) ^ (hash >>> 12);  hash^=(hash >>> 7) ^ (hash >>> 4);  HashMapEntry<K,V>[] tab=table;  for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) {    K eKey=e.key;    if (eKey == key || (e.hash == hash && key.equals(eKey))) {      return true;    }  }  return false;}  }
class C{  public void saveLockPassword(String password,int quality){  this.saveLockPassword(password,quality,false,getCurrentOrCallingUserId());}  }
class C{  public boolean requiresChangedRegions(){  return fRequiresChangedRegions;}  }
class C{  public void move(int originalPosition,int endPosition){synchronized (lock) {    if (items == null || originalPosition < 0 || endPosition < 0 || originalPosition >= getItemCount()) {      return;    }    if (endPosition >= getItemCount()) {      endPosition=getItemCount();    }    if (originalPosition == endPosition) {      return;    }    T temp=items.get(originalPosition);    items.remove(originalPosition);    items.add(endPosition,temp);  }  if (notifyOnChange) {    notifyItemMoved(originalPosition,endPosition);  }}  }
class C{  public static void startWaveFilter(final Activity activity,WaveDrawable waveDrawable,final Intent intent,int backgroundColor){  intent.putExtra(IntentKey.BACKGROUND_COLOR,backgroundColor);  startWaveFilter(activity,waveDrawable,intent);}  }
class C{  @Override public MemBufferHolder<BigDataPMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<BigDataPMemAllocator> ret=null;  ByteBuffer bb=m_nvmasvc.createByteBuffer(m_nid,size);  if (null == bb && m_activegc) {    forceGC();    bb=m_nvmasvc.createByteBuffer(m_nid,size);  }  if (null != bb) {    ret=new MemBufferHolder<BigDataPMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public static void configureLogging(ServerProperties serverProperties){  System.setProperty("Log4jContextSelector","org.apache.logging.log4j.core.async.AsyncLoggerContextSelector");  System.setProperty("AsyncLogger.RingBufferSize",serverProperties.getProperty("async.logger.ring.buffer.size",String.valueOf(8 * 1024)));  if (serverProperties.getProperty("logs.folder") == null) {    System.out.println("logs.folder property is empty.");    System.exit(1);  }  System.setProperty("logs.folder",serverProperties.getProperty("logs.folder"));  changeLogLevel(serverProperties.getProperty("log.level"));}  }
class C{  public Document(String title){  body=new ListElement();  this.title=title;}  }
class C{  public TypeVariableMapping createTypeVariableMapping(){  TypeVariableMappingImpl typeVariableMapping=new TypeVariableMappingImpl();  return typeVariableMapping;}  }
class C{  protected double defaultAmplitude(){  return 1.0;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void scan(List<? extends JCTree> trees){  if (trees != null)   for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail)   scan(l.head);}  }
class C{  private static JSONObject makeRequest(String requestUrl) throws JSONException {  String response=Network.get(requestUrl);  if (response != null) {    return new JSONObject(response);  } else {    Log.w(TAG,"Empty response.");    return null;  }}  }
class C{  public static int dischargeElectricItem(ItemStack aStack,int aCharge,int aTier,boolean aIgnoreLimit,boolean aSimulate,boolean aIgnoreDischargability){  try {    if (isElectricItem(aStack)) {      int tTier=((ic2.api.item.IElectricItem)aStack.getItem()).getTier(aStack);      if (tTier < 0 || tTier == aTier || aTier == Integer.MAX_VALUE) {        if (!aIgnoreLimit && tTier >= 0)         aCharge=(int)Math.min(aCharge,V[Math.max(0,Math.min(V.length - 1,tTier))]);        if (aCharge > 0) {          int rCharge=(int)Math.max(0,ic2.api.item.ElectricItem.manager.discharge(aStack,aCharge + (aCharge * 4 > aTier ? aTier : 0),tTier,true,!aIgnoreDischargability,aSimulate));          return rCharge - (rCharge * 4 > aTier ? aTier : 0);        }      }    }  } catch (  Throwable e) {  }  return 0;}  }
class C{  static MapMaker tryWeakKeys(MapMaker mapMaker){  return mapMaker.weakKeys();}  }
class C{  static public int packInt(DataOutput os,int value) throws IOException {  if (value < 0) {    throw new IllegalArgumentException("negative value: v=" + value);  }  int i=1;  while ((value & ~0x7F) != 0) {    os.write(((value & 0x7F) | 0x80));    value>>>=7;    i++;  }  os.write((byte)value);  return i;}  }
class C{  protected void remove(int itemPosition){  if (itemPosition >= 0 && itemPosition < getItemCount()) {    list.remove(itemPosition);  }}  }
class C{  public static EventStoreBuilder newBuilder(){  return new EventStoreBuilder(Settings.newBuilder(),TcpSettings.newBuilder());}  }
class C{  public Duration(long startInstant,long endInstant){  super(startInstant,endInstant);}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  public Entry(float val,int xIndex){  mVal=val;  mXIndex=xIndex;}  }
class C{  public static String[] nullToEmpty(final String[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  return array;}  }
class C{  public void message(SerialMessage r){  log.warn("unexpected message");}  }
class C{  @Override public boolean visit(final FieldDeclaration node){  for (  final Object fragment : node.fragments()) {    final VariableDeclarationFragment frag=(VariableDeclarationFragment)fragment;    addBinding(node,frag.getName(),node.getType());  }  return true;}  }
class C{  public TypeVariable<?> lookup(String name){  return null;}  }
class C{  public static boolean isValidAccessorName(String accessorName){  if (accessorName.startsWith("get") || accessorName.startsWith("is") || accessorName.startsWith("set")) {    int prefixLength=accessorName.startsWith("is") ? 2 : 3;    return accessorName.length() > prefixLength;  }  ;  return false;}  }
class C{  protected void ensureViewOpened(){  if (isViewClosed) {    workspaceAgent.openPart(console,PartStackType.INFORMATION);    isViewClosed=false;  }}  }
class C{  public DateTimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public T loadObjectFromNBT(@Nonnull NBTTagCompound data,@Nonnull String name){  final NBTTagCompound effectData=data.getCompoundTag(name);  final String factoryName=effectData.getString("__name__");  final Class<? extends T> klass=getClass(factoryName);  T instance=null;  try {    instance=klass.newInstance();  } catch (  InstantiationException e) {    throw new IllegalStateException("Failed to create a new instance of an illegal class " + klass,e);  }catch (  IllegalAccessException e) {    throw new IllegalStateException("Failed to create a new instance of " + klass + ", because lack of permissions",e);  }  instance.readFromNBT(data,name);  return instance;}  }
class C{  public static AuthenticationCodeResponse parseAuthenticationCodeResponse(Map<String,String> parameterMap) throws OIDCClientException, OIDCServerException {  Validate.notNull(parameterMap,"parameterMap");  return parseAuthenticationCodeResponse(httpRequestFromMap(parameterMap));}  }
class C{  public SaveAsyncTask(SaveActivity saveActivity,long[] trackIds,TrackFileFormat trackFileFormat,boolean playTrack,File directory){  this.saveActivity=saveActivity;  this.trackIds=trackIds;  this.trackFileFormat=trackFileFormat;  this.playTrack=playTrack;  this.directory=directory;  context=saveActivity.getApplicationContext();  myTracksProviderUtils=MyTracksProviderUtils.Factory.get(context);  completed=false;  successCount=0;  totalCount=0;  savedPath=null;}  }
class C{  public byte[] crypt_raw(final byte password[],final byte salt[],final int log_rounds,final int cdata[]){  int rounds, i, j;  final int clen=cdata.length;  byte ret[];  if (log_rounds < 4 || log_rounds > 30) {    throw new IllegalArgumentException("Bad number of rounds");  }  rounds=1 << log_rounds;  if (salt.length != BCRYPT_SALT_LEN) {    throw new IllegalArgumentException("Bad salt length");  }  init_key();  ekskey(salt,password);  for (i=0; i != rounds; i++) {    key(password);    key(salt);  }  for (i=0; i < 64; i++) {    for (j=0; j < clen >> 1; j++) {      encipher(cdata,j << 1);    }  }  ret=new byte[clen * 4];  for (i=0, j=0; i < clen; i++) {    ret[j++]=(byte)(cdata[i] >> 24 & 0xff);    ret[j++]=(byte)(cdata[i] >> 16 & 0xff);    ret[j++]=(byte)(cdata[i] >> 8 & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public LiftDataGenerator(){}  }
class C{  public void run(){  try {    Activator.inheritVeriniceContextState();    this.numberOfElements=selectedTargetList.size() * this.elements.size();    StringBuilder sb=new StringBuilder();    sb.append("Copying ").append(numberOfElements).append(" elements.");    progressObserver.beginTask(sb.toString(),numberOfElements);    numberProcessed=0;    CnATreeElement saveNew=null;    for (    CnATreeElement target : selectedTargetList) {      saveNew=pasteBausteine(this.elements,target);    }    CnAElementFactory.getLoadedModel().databaseChildAdded(saveNew);  } catch (  Exception e) {    log.error("Error while copying element",e);    throw new RuntimeException("Error while copying element",e);  } finally {    progressObserver.done();  }}  }
class C{  protected void reset(){  Arrays.fill(m_isCandidate,true);}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  protected double findMaxAltitude(List<? extends Position> positions){  double maxAltitude=-Double.MAX_VALUE;  for (  Position p : positions) {    double altitude=p.getAltitude();    if (altitude > maxAltitude)     maxAltitude=altitude;  }  return maxAltitude;}  }
class C{  public static int ceilPowerOf2Bits(final long x){  if (x >= (1L << 62) || x < 0) {    throw new IllegalArgumentException("Number out of range:" + x);  }  long i=1L;  int n=0;  while (i <= x) {    assert i > 0;    assert n >= 0;    n++;    i=i << 1;  }  assert 1L << n == i;  return n;}  }
class C{  public static <T>T withObjectOutputStream(OutputStream outputStream,@ClosureParams(value=SimpleType.class,options="java.io.ObjectOutputStream") Closure<T> closure) throws IOException {  return withStream(newObjectOutputStream(outputStream),closure);}  }
class C{  protected void verifyValueDefined(String valueName,Set<String> valueNames){  if (valueNames == null || !valueNames.contains(valueName)) {    throw new IllegalArgumentException("The additional value " + valueName + "Does not have a corresponding value "+ valueName+ " defined in the "+ FIELD_VALUES+ " section.");  }}  }
class C{  public String toJson(){  StringBuilder result=new StringBuilder();  result.append("{\n");  boolean notTheFirst=false;  List<?> entries=getAllParentlessEntries();  for (  Object entryUncasted : entries) {    Entry entry=(Entry)entryUncasted;    if (notTheFirst) {      result.append(",\n");    }    appendIndentation(1,result);    result.append(JsonBuilder.quote(entry.getId()));    result.append(": ");    toJsonEntryHelper(entry,result,1,false,true);    notTheFirst=true;  }  result.append("\n}");  return result.toString();}  }
class C{  public Pair(final A a,final B b){  if (a == null) {    throw new NullPointerException();  }  if (b == null) {    throw new NullPointerException();  }  mA=a;  mB=b;}  }
class C{  public ObjectIntHashMap(int initialCapacity,float loadFactor,HashingStrategy hs){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new Entry[capacity];  hashingStrategy=(hs == null) ? new IntHashMapStrategy() : hs;  init();}  }
class C{  public void openPetDataMenu(Player player,boolean sendMessage){  IPet pet=EchoPet.getManager().getPet(player);  if (pet == null) {    return;  }  ArrayList<MenuOption> options=MenuUtil.createOptionList(pet.getPetType());  PetMenu menu=new PetMenu(pet,options,pet.getPetType() == PetType.HORSE ? 18 : 9);  menu.open(sendMessage);}  }
class C{  private void renderFormsOntoG2WithHTML(final int pageIndex,final Map componentsToIgnore){  this.componentsToIgnore=componentsToIgnore;  FormObject formObject;  for (  final FormObject nextVal : formsOrdered[pageIndex]) {    if (nextVal != null) {      formObject=nextVal;      checkGUIObjectResolved(formObject);    }  }}  }
class C{  protected void reportAccurateFieldReference(SearchMatch[] matches,QualifiedNameReference qNameRef) throws CoreException {  if (matches == null)   return;  int matchesLength=matches.length;  int sourceStart=qNameRef.sourceStart;  int sourceEnd=qNameRef.sourceEnd;  char[][] tokens=qNameRef.tokens;  Scanner scanner=this.parser.scanner;  scanner.setSource(this.currentPossibleMatch.getContents());  scanner.resetTo(sourceStart,sourceEnd);  int sourceLength=sourceEnd - sourceStart + 1;  int refSourceStart=-1, refSourceEnd=-1;  int length=tokens.length;  int token=-1;  int previousValid=-1;  int i=0;  int index=0;  do {    int currentPosition=scanner.currentPosition;    try {      token=scanner.getNextToken();    } catch (    InvalidInputException e) {    }    if (token != TerminalTokens.TokenNameEOF) {      char[] currentTokenSource=scanner.getCurrentTokenSource();      boolean equals=false;      while (i < length && !(equals=this.pattern.matchesName(tokens[i++],currentTokenSource))) {      }      if (equals && (previousValid == -1 || previousValid == i - 2)) {        previousValid=i - 1;        if (refSourceStart == -1)         refSourceStart=currentPosition;        refSourceEnd=scanner.currentPosition - 1;      } else {        i=0;        refSourceStart=-1;        previousValid=-1;      }      try {        token=scanner.getNextToken();      } catch (      InvalidInputException e) {      }    }    SearchMatch match=matches[index];    if (match != null && match.getRule() != 0) {      if (!encloses((IJavaElement)match.getElement()))       return;      if (refSourceStart != -1) {        match.setOffset(refSourceStart);        match.setLength(refSourceEnd - refSourceStart + 1);        report(match);      } else {        match.setOffset(sourceStart);        match.setLength(sourceLength);        report(match);      }      i=0;    }    refSourceStart=-1;    previousValid=-1;    if (index < matchesLength - 1) {      index++;    }  } while (token != TerminalTokens.TokenNameEOF);}  }
class C{  public static int floorLog2(double d){  if (d <= 0)   throw new ArithmeticException("Negative number or zero");  long bits=Double.doubleToLongBits(d);  int exp=((int)(bits >> 52)) & 0x7FF;  if (exp == 0x7FF)   throw new ArithmeticException("Infinity or NaN");  if (exp == 0)   return floorLog2(d * 18014398509481984L) - 54;  return exp - 1023;}  }
class C{  public ICalReader(File file,ICalVersion defaultVersion) throws FileNotFoundException {  this(new BufferedReader(new Utf8Reader(file)),defaultVersion);}  }
class C{  final short findParserAction(int state,short lookahead){  int index=actn_offsets[state];  if (index != UNUSED_OFFSET) {    index+=lookahead;    if (0 <= index && index < actions.length && lookaheads[index] == lookahead) {      return actions[index];    }  }  return compressed ? default_actions[state] : 0;}  }
class C{  public int indexOf(Object o){  if (o == null) {    for (int i=0; i < size; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=0; i < size; i++)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public void add_return(StorageAlarm param){  if (local_return == null) {    local_return=new StorageAlarm[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageAlarm[])list.toArray(new StorageAlarm[list.size()]);}  }
class C{  public void addOrganization(Organization organization){  getOrganizations().add(organization);}  }
class C{  public CacheTable(){  this(101,0.75f);}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public void changedUpdate(DocumentEvent e){  m_ApplyButton.setEnabled(isValidFormat());}  }
class C{  public CSelectVisibleNodesAction(final ZyGraph graph,final CTag tag){  super("Select Visible Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02317: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02318: Tag can't be null");}  }
class C{  public static void R3_DTLZ3_M5(double[] x,double[] f,int nx,int n_obj){  int k=nx - n_obj + 1;  double g=0;  double[][] M_10D={{-0.2861,0.2796,-0.8507,0.2837,0.1893,0,0,0,0,0},{0.2837,0.8861,0.1219,-0.3157,0.1407,0,0,0,0,0},{0.6028,0.1119,-0.0810,0.5963,-0.5119,0,0,0,0,0},{-0.6450,0.3465,0.4447,0.4753,-0.2005,0,0,0,0,0},{0.2414,-0.0635,0.2391,0.4883,0.8013,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,1}};  double[] lamda_l_10D={0.313,0.312,0.321,0.316,0.456,1,1,1,1,1};  double[][] M_30D={{-0.1565,-0.2418,0.5427,-0.2191,0.2522,-0.0563,0.1991,0.1166,0.2140,-0.0973,-0.0755,0.4073,0.4279,-0.1876,-0.0968,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.1477,-0.2396,-0.0022,0.4180,0.2675,-0.1365,-0.0729,0.4761,-0.0685,0.2105,0.1388,0.1465,-0.0256,0.0292,0.5767,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.0322,0.3727,-0.0467,0.1651,-0.0672,0.0638,-0.1168,0.4055,0.6714,-0.1948,-0.1451,0.1734,-0.2788,-0.0769,-0.1433,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.3688,0.1935,0.3691,0.4298,0.2340,0.2593,-0.3081,-0.2013,-0.2779,-0.0932,0.0003,0.0149,-0.2303,-0.3261,-0.0517,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.0580,-0.0609,0.0004,-0.1831,0.0003,0.4742,-0.2530,-0.0750,0.0839,0.1606,0.6020,0.4103,-0.0857,0.2954,-0.0819,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.2145,-0.0056,-0.0251,0.2288,-0.4870,-0.5486,0.1253,-0.1512,-0.0390,0.0722,0.3074,0.4160,-0.1304,-0.1610,-0.0848,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.2557,-0.1087,0.0679,-0.3120,0.3567,-0.4644,-0.3535,0.1060,-0.2158,-0.1330,-0.0154,0.0911,-0.4154,0.0356,-0.3085,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.2303,0.4996,0.1883,0.1870,0.1850,-0.0216,0.4409,-0.0573,-0.2396,0.1471,-0.1540,0.2731,-0.0398,0.4505,-0.1131,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.1576,-0.0023,0.2588,0.2105,0.2250,-0.2978,0.0175,-0.1157,0.3717,0.0562,0.4068,-0.5081,0.0718,0.3443,-0.1488,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.1047,-0.0568,-0.2771,0.3803,0.0046,0.0188,-0.1500,0.2053,-0.2290,-0.4582,0.1191,0.0639,0.4946,0.1121,-0.4018,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.3943,-0.0374,0.3004,0.1472,-0.2988,0.0443,-0.2483,0.1350,-0.0160,0.5834,-0.1095,-0.1398,0.1711,-0.1867,-0.3518,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.1244,-0.6134,0.1823,0.3012,-0.1968,0.1616,0.1025,-0.1972,0.1162,-0.2079,-0.3062,0.0585,-0.3286,0.3187,-0.0812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0.1832,-0.1559,-0.4327,0.2059,0.4677,0.0317,0.2233,-0.3589,0.2393,0.2468,0.0148,0.1193,-0.0279,-0.3600,-0.2261,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0.5027,0.1935,0.1571,0.0503,-0.0503,-0.1443,-0.3080,-0.4939,0.1847,-0.2762,0.0042,0.0960,0.2239,-0.0579,0.3840,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0.3948,-0.0002,0.2172,-0.0293,-0.0835,0.1614,0.4559,0.1626,-0.1155,-0.3087,0.4331,-0.2223,-0.2213,-0.3658,-0.0188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};  double[] lamda_l_30D={0.113,0.105,0.117,0.119,0.108,0.110,0.101,0.107,0.111,0.109,0.120,0.108,0.101,0.105,0.116,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000};  double[] z=new double[nx];  double[] zz=new double[nx];  double[] p=new double[nx];  double[] psum=new double[n_obj];  double[][] M=new double[nx][nx];  double[] lamda_l=new double[nx];  if (nx == 10) {    for (int i=0; i < nx; i++) {      for (int j=0; j < nx; j++) {        M[i][j]=M_10D[i][j];      }      lamda_l[i]=lamda_l_10D[i];    }  } else {    for (int i=0; i < nx; i++) {      for (int j=0; j < nx; j++) {        M[i][j]=M_30D[i][j];      }      lamda_l[i]=lamda_l_30D[i];    }  }  for (int i=0; i < nx; i++) {    z[i]=0;    for (int j=0; j < nx; j++) {      z[i]+=M[i][j] * x[j];    }    if (z[i] >= 0 && z[i] <= 1) {      zz[i]=z[i];      p[i]=0;    } else     if (z[i] < 0) {      zz[i]=-lamda_l[i] * z[i];      p[i]=-z[i];    } else {      zz[i]=1 - lamda_l[i] * (z[i] - 1);      p[i]=z[i] - 1;    }  }  for (int j=0; j < n_obj; j++) {    psum[j]=0;  }  for (int i=nx - k + 1; i <= nx; i++) {    g+=Math.pow(zz[i - 1] - 0.5,2) - Math.cos(20 * PI * (zz[i - 1] - 0.5));    for (int j=0; j < n_obj; j++) {      psum[j]=Math.sqrt(Math.pow(psum[j],2) + Math.pow(p[i - 1],2));    }  }  g=100 * (k + g);  for (int i=1; i <= n_obj; i++) {    double ff=(1 + g);    for (int j=n_obj - i; j >= 1; j--) {      ff*=Math.cos(zz[j - 1] * PI / 2.0);      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[j - 1],2));    }    if (i > 1) {      ff*=Math.sin(zz[(n_obj - i + 1) - 1] * PI / 2.0);      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[(n_obj - i + 1) - 1],2));    }    f[i - 1]=2.0 / (1 + Math.exp(-psum[i - 1])) * (ff + 1);  }}  }
class C{  @Nullable public String loadString(@Nullable String messagesPack,@Nullable String ref){  if (ref != null) {    if (ref.startsWith(MARK)) {      String path=ref.substring(6);      final String[] strings=path.split("/");      if (strings.length == 1 && messagesPack != null) {        ref=messages.getMessage(messagesPack,strings[0]);      } else       if (strings.length == 2) {        ref=messages.getMessage(strings[0],strings[1]);      } else {        throw new UnsupportedOperationException("Unsupported resource string format: '" + ref + "', messagesPack="+ messagesPack);      }    } else     if (ref.startsWith(MAIN_MARK)) {      String path=ref.substring(10);      return messages.getMainMessage(path);    }  }  return ref;}  }
class C{  public void updateRaster(float lt,float ln,int offset_x1,int offset_y1,int w,int h,int[] pix,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,offset_x1,offset_y1,w,h,pix,properties,link.dos);}  }
class C{  public JSLibSingleTestConfig(ZipEntry entry,String resourceName,String modifier){  this.entry=entry;  this.resourceName=resourceName;  this.modifier=modifier;}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void startDrag(Cursor dragCursor,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,transferable,dsl);}  }
class C{  public int updateEntry(long rowIndex,ArrayList<String> key,ArrayList<String> value){  String where=KEY_ID + "=" + rowIndex;  ContentValues contentValues=new ContentValues();  for (int i=0; key.size() > i; i++) {    contentValues.put(key.get(i),value.get(i));  }  return db.update(mDefaultTable,contentValues,where,null);}  }
class C{  public static long[] join(long[]... arrays){  if (arrays.length == 0) {    return new long[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  long[] array : arrays) {    length+=array.length;  }  long[] result=new long[length];  length=0;  for (  long[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public static boolean testAarCircle(double minX,double minY,double maxX,double maxY,double centerX,double centerY,double radiusSquared){  double radius2=radiusSquared;  if (centerX < minX) {    double d=(centerX - minX);    radius2-=d * d;  } else   if (centerX > maxX) {    double d=(centerX - maxX);    radius2-=d * d;  }  if (centerY < minY) {    double d=(centerY - minY);    radius2-=d * d;  } else   if (centerY > maxY) {    double d=(centerY - maxY);    radius2-=d * d;  }  return radius2 >= 0.0;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Writer render(String templatePath) throws SurveyWrapperException {  URL templateUrl=null;  try {    templateUrl=FlexibleLocation.resolveLocation(templatePath);  } catch (  MalformedURLException e) {    throw new SurveyWrapperException(e);  }  if (templateUrl == null) {    String errMsg="Problem getting the template for Survey from URL: " + templatePath;    Debug.logError(errMsg,module);    throw new IllegalArgumentException(errMsg);  }  Writer writer=new StringWriter();  this.render(templateUrl,writer);  return writer;}  }
class C{  public BaggageImpl split(){  Handlers.preSplit(this);  Map<ByteString,SetMultimap<ByteString,ByteString>> copiedData=Maps.newHashMapWithExpectedSize(contents.size());  for (  ByteString namespace : contents.keySet()) {    copiedData.put(namespace,HashMultimap.create(contents.get(namespace)));  }  BaggageImpl newImpl=new BaggageImpl(copiedData);  Handlers.postSplit(this,newImpl);  return newImpl;}  }
class C{  public static void generateDebug(final String errCode,final Logger logger,final Exception exception){  generateDebug(errCode,null,logger,exception);}  }
class C{  byte[] doFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input,inputOffset,inputLen);}  }
class C{  public DTN2Events(Settings s){  this.events=new LinkedList<ExternalEvent>();  this.bundle_list=new HashMap<String,Bundle>();  DTN2Manager.setEvents(this);}  }
class C{  @SuppressWarnings("deprecation") private void renderConnectionsBackground(final InputPorts inputPorts,final OutputPorts ports,final Graphics2D g2){  for (int i=0; i < ports.getNumberOfPorts(); i++) {    OutputPort from=ports.getPortByIndex(i);    Port to=from.getDestination();    if (to != null) {      Shape connector=ProcessDrawUtils.createConnector(from,to,model);      if (connector == null) {        return;      }      g2.setColor(Color.WHITE);      if (from.getMetaData() instanceof CollectionMetaData) {        g2.setStroke(CONNECTION_COLLECTION_LINE_BACKGROUND_STROKE);      } else {        g2.setStroke(CONNECTION_LINE_BACKGROUND_STROKE);      }      g2.draw(connector);    }  }}  }
class C{  public void breakIntoShards(Asteroids asteroids){  Double2D location=asteroids.field.getObjectLocation(this);  PathIterator p=new Area(shape).getPathIterator(null);  float[] vals=new float[6];  float lastX=0;  float lastY=0;  float firstX=0;  float firstY=0;  float midX=0;  float midY=0;  Shard shard=null;  Double2D vec=null;  while (!p.isDone()) {    GeneralPath s=new GeneralPath();    int type=p.currentSegment(vals);    double force=asteroids.random.nextDouble() * Shard.MAXIMUM_EXPLOSION_FORCE;switch (type) {case PathIterator.SEG_MOVETO:      lastX=firstX=vals[0];    lastY=firstY=vals[1];  break;case PathIterator.SEG_LINETO:midX=(lastX + vals[0]) / 2;midY=(lastY + vals[1]) / 2;s.moveTo((float)(0 - midX),(float)(0 - midY));s.lineTo(lastX - midX,lastY - midY);s.lineTo(vals[0] - midX,vals[1] - midY);s.closePath();vec=new Double2D(midX,midY).normalize().multiply(force);shard=new Shard(asteroids,s,orientation,new MutableDouble2D(vec),new Double2D(location.x + midX,location.y + midY),getColor());lastX=vals[0];lastY=vals[1];break;case PathIterator.SEG_CLOSE:midX=(lastX + vals[0]) / 2;midY=(lastY + vals[1]) / 2;s.moveTo((float)(0 - midX),(float)(0 - midY));s.lineTo(lastX - midX,lastY - midY);s.lineTo(firstX - midX,firstY - midY);s.closePath();vec=new Double2D(midX,midY).normalize().multiply(force);shard=new Shard(asteroids,s,orientation,new MutableDouble2D(vec),new Double2D(location.x + midX,location.y + midY),getColor());lastX=vals[0];lastY=vals[1];break;case PathIterator.SEG_QUADTO:midX=(lastX + vals[0] + vals[2]) / 3;midY=(lastY + vals[1] + vals[3]) / 3;s.moveTo((float)(0 - midX),(float)(0 - midY));s.lineTo(lastX - midX,lastY - midY);s.quadTo(vals[0] - midX,vals[1] - midY,vals[2] - midX,vals[3] - midY);s.closePath();vec=new Double2D(midX,midY).normalize().multiply(force);shard=new Shard(asteroids,s,orientation,new MutableDouble2D(vec),new Double2D(location.x + midX,location.y + midY),getColor());lastX=vals[2];lastY=vals[3];break;case PathIterator.SEG_CUBICTO:midX=(lastX + vals[0] + vals[2]+ vals[4]) / 4;midY=(lastY + vals[1] + vals[3]+ vals[5]) / 4;s.moveTo((float)(0 - midX),(float)(0 - midY));s.lineTo(lastX - midX,lastY - midY);s.curveTo(vals[0] - midX,vals[1] - midY,vals[2] - midX,vals[3] - midY,vals[4] - midX,vals[5] - midY);s.closePath();vec=new Double2D(midX,midY).normalize().multiply(force);shard=new Shard(asteroids,s,orientation,new MutableDouble2D(vec),new Double2D(location.x + midX,location.y + midY),getColor());lastX=vals[4];lastY=vals[5];break;default :throw new RuntimeException("default case should never occur");}p.next();}}  }
class C{  protected void drag(boolean top){  int screenHeight=getActivity().getWindowManager().getDefaultDisplay().getHeight();  int fromY, toY;  fromY=top ? (screenHeight / 4) : (screenHeight - (screenHeight / 4));  toY=top ? (screenHeight - (screenHeight / 4)) : (screenHeight / 4);  solo.drag(100,100,fromY,toY,10);}  }
class C{  public static void main(String[] argv){  runFilter(new StringToNominal(),argv);}  }
class C{  final boolean isSignaturePolymorphic(){  return tree.sym.kind == MTH && types.isSignaturePolymorphic((MethodSymbol)tree.sym);}  }
class C{  public void gotoEnterVsoURL(){  model.getTfsModel().signOut();  model.setVsoSelected(false);}  }
class C{  public void registerCore(String collection){  AtomicBoolean reconstructState=new AtomicBoolean(false);  collectionWatches.compute(collection,null);  if (reconstructState.get()) {    new StateWatcher(collection).refreshAndWatch();  }}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (!portMatch(port,cookie.getPorts())) {      throw new MalformedCookieException("Port attribute violates RFC 2965: " + "Request port not found in cookie's port list.");    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  private static synchronized boolean isUpdatePending(){  return updatePending;}  }
class C{  public void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing headers is not supported.");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.051 -0500",hash_original_method="9CD6B8DA260D9BA7ACF3634EA114A1DD",hash_generated_method="ACBDA07FB96BD213D87D2BDC60BC03D5") public static void fill(boolean[] array,int start,int end,boolean value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static VisorThreadInfo from(ThreadInfo ti){  assert ti != null;  VisorThreadLockInfo[] linfos=ti.getLockedSynchronizers() != null ? new VisorThreadLockInfo[ti.getLockedSynchronizers().length] : null;  if (ti.getLockedSynchronizers() != null)   for (int i=0; i < ti.getLockedSynchronizers().length; i++)   linfos[i]=VisorThreadLockInfo.from(ti.getLockedSynchronizers()[i]);  VisorThreadMonitorInfo[] minfos=ti.getLockedMonitors() != null ? new VisorThreadMonitorInfo[ti.getLockedMonitors().length] : null;  if (ti.getLockedMonitors() != null)   for (int i=0; i < ti.getLockedMonitors().length; i++)   minfos[i]=VisorThreadMonitorInfo.from(ti.getLockedMonitors()[i]);  return new VisorThreadInfo(ti.getThreadName(),ti.getThreadId(),ti.getThreadState(),ti.getLockInfo() != null ? VisorThreadLockInfo.from(ti.getLockInfo()) : null,ti.getLockName(),ti.getLockOwnerId(),ti.getLockOwnerName(),ti.isInNative(),ti.isSuspended(),ti.getWaitedCount(),ti.getWaitedTime(),ti.getBlockedCount(),ti.getBlockedTime(),ti.getStackTrace(),linfos,minfos);}  }
class C{  protected final void _skipCR() throws IOException {  if (_inputPtr < _inputEnd || loadMore()) {    if (_inputBuffer[_inputPtr] == '\n') {      ++_inputPtr;    }  }  ++_currInputRow;  _currInputRowStart=_inputPtr;}  }
class C{  private Request createTunnelRequest() throws IOException {  return new Request.Builder().url(route.address().url()).header("Host",Util.hostHeader(route.address().url())).header("Proxy-Connection","Keep-Alive").header("User-Agent",Version.userAgent()).build();}  }
class C{  public double newValue(int x,int y,int z,double value){  if (field instanceof IntGrid2D || field instanceof IntGrid3D)   value=(int)value;  if (map.validLevel(value))   return value;  if (field != null) {    if (field instanceof DoubleGrid3D)     return ((DoubleGrid3D)field).field[x][y][z]; else     if (field instanceof IntGrid3D)     return ((IntGrid3D)field).field[x][y][z]; else     if (field instanceof DoubleGrid2D)     return ((DoubleGrid2D)field).field[x][y]; else     return ((IntGrid2D)field).field[x][y];  } else   return map.defaultValue();}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  @ReactMethod public void start(ReadableArray requestBatch,int timeout,Callback batchCallback){  GraphRequestBatch batch=new GraphRequestBatch();  int potentialID=0;  int batchID=0;synchronized (this) {    do {      batchID=potentialID++;    } while (mResponses.get(batchID) != null);    mResponses.put(batchID,Arguments.createMap());  }  for (int i=0; i < requestBatch.size(); i++) {    GraphRequest request=buildRequest(requestBatch.getMap(i));    request.setCallback(new GraphRequestCallback(i,batchID));    batch.add(request);  }  batch.setTimeout(timeout);  GraphRequestBatchCallback callback=new GraphRequestBatchCallback(batchID,batchCallback);  batch.addCallback(callback);  batch.executeAsync();}  }
class C{  private PostgreSQLDataFunctions(){}  }
class C{  @Override public void updateUI(){  if (this.popup != null) {    SwingUtilities.updateComponentTreeUI(this.popup);  }  super.updateUI();}  }
class C{  public IXMLElement createPCDataElement(){  return new XMLElement();}  }
class C{  private Value read(Type type,NodeMap<InputNode> node,Value value) throws Exception {  Converter converter=scanner.getConverter(type,value);  InputNode parent=node.getNode();  if (converter != null) {    Object data=converter.read(parent);    Class actual=type.getType();    if (value != null) {      value.setValue(data);    }    return new Reference(value,data,actual);  }  return value;}  }
class C{  public static double[] max(double[][] M){  double[] max=new double[M[0].length];  for (int j=0; j < max.length; j++) {    max[j]=M[0][j];    for (int i=1; i < M.length; i++)     max[j]=Math.max(max[j],M[i][j]);  }  return max;}  }
class C{  private static void requestPermission(final AllowMeCallback callback,int requestCode,final String permission){  if (!isPermissionGranted(permission)) {    requestPermissions(callback,requestCode,permission);  }}  }
class C{  private Matches(){}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 2) {    service.getConnection(server.getId()).changeNick(params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public Matrix3d m00(double m00){  this.m00=m00;  return this;}  }
class C{  public void unregister(T listener){  listeners.remove(listener);}  }
class C{  public Builder neverStreamDeletes(){  this.streamDeletes=false;  return this;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private static String buildMessage(String systemID,int lineNr,Exception e,String msg,boolean reportParams){  String str=msg;  if (reportParams) {    if (systemID != null) {      str+=", SystemID='" + systemID + "'";    }    if (lineNr >= 0) {      str+=", Line=" + lineNr;    }    if (e != null) {      str+=", Exception: " + e;    }  }  return str;}  }
class C{  private void startEmailOwnershipValidation(HashMap<String,String> aMapParams){  Log.d(LOG_TAG,"## startEmailOwnershipValidation(): IN aMapParams=" + aMapParams);  if (null != aMapParams) {    enableLoadingScreen(true);    hideMainLayoutAndToast("");    mMode=MODE_ACCOUNT_CREATION;    String token=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_TOKEN);    String clientSecret=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_CLIENT_SECRET);    String identityServerSessId=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_IDENTITY_SERVER_SESSION_ID);    String sessionId=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_SESSION_ID);    String homeServer=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_HOME_SERVER_URL);    String identityServer=aMapParams.get(VectorRegistrationReceiver.KEY_MAIL_VALIDATION_IDENTITY_SERVER_URL);    try {      Uri.parse(homeServer);      Uri.parse(identityServer);    } catch (    Exception e) {      Toast.makeText(LoginActivity.this,getString(R.string.login_error_invalid_home_server),Toast.LENGTH_SHORT).show();      return;    }    submitEmailToken(token,clientSecret,identityServerSessId,sessionId,homeServer,identityServer);  } else {    Log.d(LOG_TAG,"## startEmailOwnershipValidation(): skipped");  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static String concatenateName(String name1,String name2){  StringBuffer buf=new StringBuffer();  if (name1 != null && name1.length() > 0) {    buf.append(name1);  }  if (name2 != null && name2.length() > 0) {    if (buf.length() > 0) {      buf.append('.');    }    buf.append(name2);  }  return buf.toString();}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  public GoTo(int playerId,String to){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("to",to);}  }
class C{  public synchronized Object deleteMin(){  if (isEmpty())   return null;  Object returnValue=queue[1].data;  queue[1].priority=queue[numElements].priority;  queue[1].data=queue[numElements].data;  numElements--;  int current=1;  int child1=2 * current;  while (child1 <= numElements) {    int child2=2 * current + 1;    int smaller;    if (child2 <= numElements && queue[child2].priority > queue[child1].priority) {      smaller=child2;    } else {      smaller=child1;    }    if (queue[smaller].priority <= queue[current].priority) {      break;    } else {      PriorityQueueNode tmp=queue[smaller];      queue[smaller]=queue[current];      queue[current]=tmp;      current=smaller;      child1=2 * current;    }  }  return returnValue;}  }
class C{  protected boolean isKeyType(ReferenceStrength type){  return this.keyType == type;}  }
class C{  public void connect(TransactionOutput out){  outpoint.fromTx=checkNotNull(out.parentTransaction);  out.markAsSpent(this);}  }
class C{  private String readLog(int from,int to,File logFile) throws IgniteCheckedException {  StringBuilder content=new StringBuilder();  try (BufferedReader reader=new BufferedReader(new FileReader(logFile))){    String line;    int start=0;    while (start <= to && (line=reader.readLine()) != null) {      if (start >= from)       content.append(line);      start++;    }    if (content.length() == 0)     throw new IgniteCheckedException("Request parameter 'from' and 'to' are for lines that " + "do not exist in log file.");  } catch (  IOException e) {    throw new IgniteCheckedException(e);  }  return content.toString();}  }
class C{  public static String capitalize(String str){  return changeFirstCharacterCase(true,str);}  }
class C{  @GET @Path("remove") public String removeKeys(@QueryParam("host") String host,@QueryParam("callback") String calback){  try {    keyStore.removeKeys(host);  } catch (  SshKeyStoreException e) {    throw new WebApplicationException(Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build());  }  return calback + "();";}  }
class C{  public ConditionOperand translateUNSIGNED(){switch (value) {case CMPL_EQUAL:    value=EQUAL;  break;case CMPL_GREATER:value=HIGHER;break;case CMPG_LESS:value=LOWER;break;case CMPL_GREATER_EQUAL:value=HIGHER_EQUAL;break;case CMPG_LESS_EQUAL:value=LOWER_EQUAL;break;case CMPL_NOT_EQUAL:value=NOT_EQUAL;break;case CMPL_LESS:value=LOWER;break;case CMPG_GREATER_EQUAL:value=HIGHER_EQUAL;break;case CMPG_GREATER:value=HIGHER;break;case CMPL_LESS_EQUAL:value=LOWER_EQUAL;break;default :throw new OptimizingCompilerException("invalid condition " + this);}return this;}  }
class C{  @Override public boolean service(RequestBaratine request){  ServiceWebSocket<T,S> service=_factory.apply(request);  WebSocketManager wsManager=request.webApp().wsManager();  WebSocketBaratineImpl<T,S> ws=new WebSocketBaratineImpl<>(wsManager,service,_type);  try {    if (ws.handshake(request)) {      return true;    } else {      log.fine("WebSocket handshake failed for " + request);      return false;    }  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    e.printStackTrace();    request.fail(e);    return true;  }}  }
class C{  public static void addRow(Matrix A,int i,double c){  addRow(A,i,0,A.cols(),c);}  }
class C{  public TestDataLoader(TestHiveServer hiveServer){  this.hiveServer=hiveServer;  stagingLocation=new TemporaryFolder();}  }
class C{  public void removePointerPressedListener(ActionListener l){  if (pointerPressedListeners != null) {    pointerPressedListeners.removeListener(l);  }}  }
class C{  public AbstractColumn(){  this(Object.class,null);}  }
class C{  public void clearIlluminatedPositions(){  if (illuminatedPositions == null) {    return;  }  illuminatedPositions.clear();}  }
class C{  public static TextEncodingDetails countGsmSeptets(CharSequence s,boolean use7bitOnly){  if (!sDisableCountryEncodingCheck) {    enableCountrySpecificEncodings();  }  if (sEnabledSingleShiftTables.length + sEnabledLockingShiftTables.length == 0) {    TextEncodingDetails ted=new TextEncodingDetails();    int septets=GsmAlphabet.countGsmSeptetsUsingTables(s,use7bitOnly,0,0);    if (septets == -1) {      return null;    }    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;    ted.codeUnitCount=septets;    if (septets > SmsConstants.MAX_USER_DATA_SEPTETS) {      ted.msgCount=(septets + (SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER - 1)) / SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER;      ted.codeUnitsRemaining=(ted.msgCount * SmsConstants.MAX_USER_DATA_SEPTETS_WITH_HEADER) - septets;    } else {      ted.msgCount=1;      ted.codeUnitsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - septets;    }    ted.codeUnitSize=SmsConstants.ENCODING_7BIT;    return ted;  }  int maxSingleShiftCode=sHighestEnabledSingleShiftCode;  List<LanguagePairCount> lpcList=new ArrayList<LanguagePairCount>(sEnabledLockingShiftTables.length + 1);  lpcList.add(new LanguagePairCount(0));  for (  int i : sEnabledLockingShiftTables) {    if (i != 0 && !sLanguageTables[i].isEmpty()) {      lpcList.add(new LanguagePairCount(i));    }  }  int sz=s.length();  for (int i=0; i < sz && !lpcList.isEmpty(); i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Log.w(TAG,"countGsmSeptets() string contains Escape character, ignoring!");      continue;    }    for (    LanguagePairCount lpc : lpcList) {      int tableIndex=sCharsToGsmTables[lpc.languageCode].get(c,-1);      if (tableIndex == -1) {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            int shiftTableIndex=sCharsToShiftTables[table].get(c,-1);            if (shiftTableIndex == -1) {              if (use7bitOnly) {                lpc.septetCounts[table]++;                lpc.unencodableCounts[table]++;              } else {                lpc.septetCounts[table]=-1;              }            } else {              lpc.septetCounts[table]+=2;            }          }        }      } else {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            lpc.septetCounts[table]++;          }        }      }    }  }  TextEncodingDetails ted=new TextEncodingDetails();  ted.msgCount=Integer.MAX_VALUE;  ted.codeUnitSize=SmsConstants.ENCODING_7BIT;  int minUnencodableCount=Integer.MAX_VALUE;  for (  LanguagePairCount lpc : lpcList) {    for (int shiftTable=0; shiftTable <= maxSingleShiftCode; shiftTable++) {      int septets=lpc.septetCounts[shiftTable];      if (septets == -1) {        continue;      }      int udhLength;      if (lpc.languageCode != 0 && shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_TWO_SHIFT_TABLES;      } else       if (lpc.languageCode != 0 || shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_ONE_SHIFT_TABLE;      } else {        udhLength=0;      }      int msgCount;      int septetsRemaining;      if (septets + udhLength > SmsConstants.MAX_USER_DATA_SEPTETS) {        if (udhLength == 0) {          udhLength=UDH_SEPTET_COST_LENGTH;        }        udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;        int septetsPerMessage=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;        msgCount=(septets + septetsPerMessage - 1) / septetsPerMessage;        septetsRemaining=(msgCount * septetsPerMessage) - septets;      } else {        msgCount=1;        septetsRemaining=SmsConstants.MAX_USER_DATA_SEPTETS - udhLength - septets;      }      int unencodableCount=lpc.unencodableCounts[shiftTable];      if (use7bitOnly && unencodableCount > minUnencodableCount) {        continue;      }      if ((use7bitOnly && unencodableCount < minUnencodableCount) || msgCount < ted.msgCount || (msgCount == ted.msgCount && septetsRemaining > ted.codeUnitsRemaining)) {        minUnencodableCount=unencodableCount;        ted.msgCount=msgCount;        ted.codeUnitCount=septets;        ted.codeUnitsRemaining=septetsRemaining;        ted.languageTable=lpc.languageCode;        ted.languageShiftTable=shiftTable;      }    }  }  if (ted.msgCount == Integer.MAX_VALUE) {    return null;  }  return ted;}  }
class C{  public static void clear(){  table=null;}  }
class C{  public boolean deregisterProducer(IProducer producer,Class<?> iface){  if (producer != null && iface != null && iface.isInterface()) {    Set<IProducer> producers=producerMap.get(iface);    if (producers != null)     return producers.remove(producer);  }  return false;}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException {  Object value=right.value(context);  if (value == null) {    if (blather) {      EventCartridge ec=context.getEventCartridge();      boolean doit=true;      if (ec != null) {        doit=ec.shouldLogOnNullSet(left.literal(),right.literal());      }      if (doit) {        rsvc.error("RHS of #set statement is null. Context will not be modified. " + context.getCurrentTemplateName() + " [line "+ getLine()+ ", column "+ getColumn()+ "]");      }    }    return false;  }  if (left.jjtGetNumChildren() == 0) {    context.put(leftReference,value);  } else {    left.setValue(context,value);  }  return true;}  }
class C{  public static double atan2(double y,double x){  if (x != x || y != y) {    return Double.NaN;  }  if (y == 0) {    final double result=x * y;    final double invx=1d / x;    final double invy=1d / y;    if (invx == 0) {      if (x > 0) {        return y;      } else {        return copySign(Math.PI,y);      }    }    if (x < 0 || invx < 0) {      if (y < 0 || invy < 0) {        return -Math.PI;      } else {        return Math.PI;      }    } else {      return result;    }  }  if (y == Double.POSITIVE_INFINITY) {    if (x == Double.POSITIVE_INFINITY) {      return Math.PI * F_1_4;    }    if (x == Double.NEGATIVE_INFINITY) {      return Math.PI * F_3_4;    }    return Math.PI * F_1_2;  }  if (y == Double.NEGATIVE_INFINITY) {    if (x == Double.POSITIVE_INFINITY) {      return -Math.PI * F_1_4;    }    if (x == Double.NEGATIVE_INFINITY) {      return -Math.PI * F_3_4;    }    return -Math.PI * F_1_2;  }  if (x == Double.POSITIVE_INFINITY) {    if (y > 0 || 1 / y > 0) {      return 0d;    }    if (y < 0 || 1 / y < 0) {      return -0d;    }  }  if (x == Double.NEGATIVE_INFINITY) {    if (y > 0.0 || 1 / y > 0.0) {      return Math.PI;    }    if (y < 0 || 1 / y < 0) {      return -Math.PI;    }  }  if (x == 0) {    if (y > 0 || 1 / y > 0) {      return Math.PI * F_1_2;    }    if (y < 0 || 1 / y < 0) {      return -Math.PI * F_1_2;    }  }  final double r=y / x;  if (Double.isInfinite(r)) {    return atan(r,0,x < 0);  }  double ra=doubleHighPart(r);  double rb=r - ra;  final double xa=doubleHighPart(x);  final double xb=x - xa;  rb+=(y - ra * xa - ra * xb - rb * xa - rb * xb) / x;  final double temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  if (ra == 0) {    ra=copySign(0d,y);  }  final double result=atan(ra,rb,x < 0);  return result;}  }
class C{  public void add(ByteBuffer buf,int len){  requestFreeSize(len);  buf.get(data,size,len);  size+=len;}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public CurrencyException(String message){  super(message);}  }
class C{  public void dispose(){  if (m_frame != null)   m_frame.dispose();  m_frame=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.235 -0400",hash_original_method="C08E184A516295B7BF20ABCE746571ED",hash_generated_method="357E5ABF0E0719E98E02C88719CE5D0C") private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public static <T>void randomSample(List<T> source,List<T> dest,int samples){  randomSample(source,dest,samples,new Random());}  }
