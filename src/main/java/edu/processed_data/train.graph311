class C{  public static Test suite(){  return (new TestSuite(SelectManyMultiFormITCase.class));}  }
class C{  public boolean login() throws LoginException {  Callback callbacks[]=new Callback[]{new NameCallback("Login:"),new PasswordCallback("Password:",false)};  try {    handler.handle(callbacks);  } catch (  IOException e) {  }catch (  UnsupportedCallbackException e) {  }  name=((NameCallback)callbacks[0]).getName();  char[] pass=((PasswordCallback)callbacks[1]).getPassword();  String passwd=pass != null ? new String(pass) : null;  if (name != null && passwd != null) {    Login login=new Login(Env.getCtx());    roles=login.getRoles(name,passwd);  } else {    roles=null;  }  return true;}  }
class C{  public boolean hasEdge(T sourceElement,T destinationElement){  if (nodes.get(sourceElement) == null) {    return false;  }  for (  Edge<T> edge : nodes.get(sourceElement).outEdges) {    if (edge.to.element == destinationElement) {      return true;    }  }  return false;}  }
class C{  public static TraktTvApiService newApiService(){  RestAdapter.Builder restAdapterBuilder=new RestAdapter.Builder().setConverter(new GsonConverter(new Gson())).setRequestInterceptor(null).setLogLevel(RestAdapter.LogLevel.FULL).setEndpoint(API_ENDPOINT);  return restAdapterBuilder.build().create(TraktTvApiService.class);}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  @Deprecated protected ActionListener createKeyboardUpLeftListener(){  return new KeyboardUpLeftHandler();}  }
class C{  public InputStream post() throws IOException {  postCookies();  return doPost();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  return String.format("%d-%d %.5f",v,w,weight);}  }
class C{  private void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {  kdbHeader.setFlags(dataInput.readInt());  kdbHeader.setVersion(dataInput.readInt());  byte[] buffer=new byte[16];  dataInput.readFully(buffer);  kdbHeader.setMasterSeed(buffer);  buffer=new byte[16];  dataInput.readFully(buffer);  kdbHeader.setEncryptionIv(buffer);  kdbHeader.setGroupCount(dataInput.readInt());  kdbHeader.setEntryCount(dataInput.readInt());  byte[] buffer32=new byte[32];  dataInput.readFully(buffer32);  kdbHeader.setContentHash(buffer32);  buffer32=new byte[32];  dataInput.readFully(buffer32);  kdbHeader.setTransformSeed(buffer32);  kdbHeader.setTransformRounds(dataInput.readInt());}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Request followUpRequest() throws IOException {  if (userResponse == null)   throw new IllegalStateException();  Connection connection=streamAllocation.connection();  Route route=connection != null ? connection.getRoute() : null;  Proxy selectedProxy=route != null ? route.proxy() : client.getProxy();  int responseCode=userResponse.code();  final String method=userRequest.method();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  return OkHeaders.processAuthHeader(client.getAuthenticator(),userResponse,selectedProxy);case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:if (!method.equals("GET") && !method.equals("HEAD")) {  return null;}case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:if (!client.getFollowRedirects()) return null;String location=userResponse.header("Location");if (location == null) return null;HttpUrl url=userRequest.url().resolve(location);if (url == null) return null;boolean sameScheme=url.scheme().equals(userRequest.url().scheme());if (!sameScheme && !client.getFollowSslRedirects()) return null;Request.Builder requestBuilder=userRequest.newBuilder();if (HttpMethod.permitsRequestBody(method)) {if (HttpMethod.redirectsToGet(method)) {requestBuilder.method("GET",null);} else {requestBuilder.method(method,null);}requestBuilder.removeHeader("Transfer-Encoding");requestBuilder.removeHeader("Content-Length");requestBuilder.removeHeader("Content-Type");}if (!sameConnection(url)) {requestBuilder.removeHeader("Authorization");}return requestBuilder.url(url).build();default :return null;}}  }
class C{  public void compileSingleFiles(List<File> modelFiles) throws N4JSCompileException {  compileSingleFiles(modelFiles,new DismissingIssueAcceptor());}  }
class C{  public T caseGetterDeclaration(GetterDeclaration object){  return null;}  }
class C{  protected void processCloudletMove(int[] receivedData,int type){  updateCloudletProcessing();  int[] array=receivedData;  int cloudletId=array[0];  int userId=array[1];  int vmId=array[2];  int vmDestId=array[3];  int destId=array[4];  Cloudlet cl=getVmAllocationPolicy().getHost(vmId,userId).getVm(vmId,userId).getCloudletScheduler().cloudletCancel(cloudletId);  boolean failed=false;  if (cl == null) {    failed=true;  } else {    if (cl.getCloudletStatusString() == "Success") {      int[] data=new int[3];      data[0]=getId();      data[1]=cloudletId;      data[2]=0;      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_SUBMIT_ACK,data);      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);    }    cl.setVmId(vmDestId);    if (destId == getId()) {      Vm vm=getVmAllocationPolicy().getHost(vmDestId,userId).getVm(vmDestId,userId);      if (vm == null) {        failed=true;      } else {        double fileTransferTime=predictFileTransferTime(cl.getRequiredFiles());        vm.getCloudletScheduler().cloudletSubmit(cl,fileTransferTime);      }    } else {      int tag=((type == CloudSimTags.CLOUDLET_MOVE_ACK) ? CloudSimTags.CLOUDLET_SUBMIT_ACK : CloudSimTags.CLOUDLET_SUBMIT);      sendNow(destId,tag,cl);    }  }  if (type == CloudSimTags.CLOUDLET_MOVE_ACK) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (failed) {      data[2]=0;    } else {      data[2]=1;    }    sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_SUBMIT_ACK,data);  }}  }
class C{  @RequestProcessing(value="/reset-pwd",method=HTTPRequestMethod.GET) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void showResetPwd(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  final Map<String,Object> dataModel=renderer.getDataModel();  final String code=request.getParameter("code");  final JSONObject verifycode=verifycodeQueryService.getVerifycode(code);  if (null == verifycode) {    dataModel.put(Keys.MSG,langPropsService.get("verifycodeExpiredLabel"));    renderer.setTemplateName("/error/custom.ftl");  } else {    renderer.setTemplateName("reset-pwd.ftl");    final String userId=verifycode.optString(Verifycode.USER_ID);    final JSONObject user=userQueryService.getUser(userId);    dataModel.put(User.USER,user);  }  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  initialise(k,tau,epsilon);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void cancel(){  this.canceled=true;}  }
class C{  protected void drawIcon(DrawContext dc,Point drawPoint){  GL2 gl=dc.getGL().getGL2();  FrameAttributes attributes=this.getActiveAttributes();  int iconSpace=attributes.getIconSpace();  BasicWWTexture texture=this.getTexture();  if (texture == null) {    drawPoint.x+=iconSpace;    return;  }  OGLStackHandler oglStack=new OGLStackHandler();  try {    if (texture.bind(dc)) {      gl.glEnable(GL.GL_TEXTURE_2D);      Dimension iconSize=attributes.getIconSize();      oglStack.pushModelview(gl);      gl.glColor4d(1.0,1.0,1.0,1.0);      double vertAdjust=(this.titleBarHeight - iconSize.height) / 2;      TextureCoords texCoords=texture.getTexCoords();      gl.glTranslated(drawPoint.x + iconSpace,drawPoint.y + vertAdjust + 1,1.0);      gl.glScaled((double)iconSize.width,(double)iconSize.height,1d);      dc.drawUnitQuad(texCoords);      drawPoint.x+=iconSize.getWidth() + iconSpace * 2;    }  }  finally {    gl.glDisable(GL.GL_TEXTURE_2D);    gl.glBindTexture(GL.GL_TEXTURE_2D,0);    oglStack.pop(gl);  }}  }
class C{  @Override public int read() throws IOException {  int l=-1;  if (isReadAllowed()) {    l=super.read();    checkClose(l);  }  return l;}  }
class C{  public RotationComponent(double angle){  super(angle);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.711 -0500",hash_original_method="9DA25B025FE28EC3AC4ACBCE0C1BFD50",hash_generated_method="5034B493CD7750526DFD99DE63E751DD") public static final boolean moveItem(ContentResolver res,long playlistId,int from,int to){  Uri uri=MediaStore.Audio.Playlists.Members.getContentUri("external",playlistId).buildUpon().appendEncodedPath(String.valueOf(from)).appendQueryParameter("move","true").build();  ContentValues values=new ContentValues();  values.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,to);  return res.update(uri,values,null,null) != 0;}  }
class C{  int parseTimeZone(String source,int ofs) throws ParseException {  if (source == null) {    throwInvalid("timezone",ofs);  }  char tzSign=source.charAt(0);  if (tzSign == SIGN_NEGATIVE || tzSign == SIGN_POSITIVE) {    source=readSubstring(source,1);    if (source == null) {      throwInvalid("timezone",ofs);    }    int index=2;    if (source.length() == 3) {      index--;    }    int tzHours=parseNumber(readSubstring(source,0,index),ofs,"timezone",0,23);    int tzMinutes=parseNumber(readSubstring(source,index),ofs,"timezone",0,59);    tzMinutes+=tzHours * 60;    if (tzSign != SIGN_NEGATIVE) {      tzMinutes=-tzMinutes;    }    return tzMinutes;  }  if (source.startsWith(GMT)) {    int index=source.indexOf(':');    if (index != -1) {      String part1=readSubstring(source,3,index);      String part2=readSubstring(source,index + 1);      if (part1 == null || part2 == null) {        throwInvalid("timezone",ofs);      }      source=part1 + part2;    } else {      source=readSubstring(source,3);    }    return parseTimeZone(source,ofs);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(source)) {        TimeZone tz=TimeZone.getTimeZone(timezone[DateFormatSymbols.ZONE_ID]);        return -(tz.getRawOffset() / MILLIS_TO_MINUTES);      }    }  }  return throwInvalid("timezone",ofs);}  }
class C{  public static ReilInstruction createDiv(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_DIV,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.822 -0500",hash_original_method="DB289001A1CA8608ADAAFD372FAC3009",hash_generated_method="B754BBAC3C3822C3744386A49392CFFB") public MemoryFile(String name,int length) throws IOException {  mLength=length;  mFD=native_open(name,length);  if (length > 0) {    mAddress=native_mmap(mFD,length,PROT_READ | PROT_WRITE);  } else {    mAddress=0;  }}  }
class C{  protected void reset(){  chk.reset();}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  public void delete(Name name,int type){  newUpdate(Record.newRecord(name,type,DClass.ANY,0));}  }
class C{  void removeParserHighlight(Object tag){  removeListHighlight(parserHighlights,tag);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.PRE_OR_POST_CONDITION___ANONYMOUS_PRE_OR_POST_CONDITION_11:    return getAnonymous_PreOrPostCondition_1_1();case UmplePackage.PRE_OR_POST_CONDITION___TRACE_CONDITION_1:  return getTraceCondition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isLocalFileUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_FILE_SCHEME.equals(scheme);}  }
class C{  public boolean hasQuotaBytesUsed(){  return hasExtension(QuotaBytesUsed.class);}  }
class C{  public EmpiricalMeasurementDistribution computeSignificance(int numPermutationsToCheck) throws Exception {  RandomGenerator rg=new RandomGenerator();  int[][] newOrderings=rg.generateRandomPerturbations(totalObservations,numPermutationsToCheck);  return computeSignificance(newOrderings);}  }
class C{  public ValidatableSamlTokenEx parseValidatableTokenEx(Element tokenRoot) throws InvalidTokenException {  return new SamlTokenImpl(tokenRoot,_jaxbContext,true);}  }
class C{  private static CacheConfiguration<Object,Object> cacheConfiguration(){  CacheConfiguration<Object,Object> ccfg=new CacheConfiguration<>();  ccfg.setBackups(1);  ccfg.setName(PARTITIONED_CACHE_NAME);  ccfg.setIndexedTypes(String.class,Entity.class,String.class,EntityTestAllTypeFields.class);  return ccfg;}  }
class C{  public boolean nextBoolean(){  return randomGenerator.nextDouble() > 0.5;}  }
class C{  @Override public int hashCode(){  int hash=type.hashCode();  if (name != null)   hash^=name.hashCode();  if (actions != null)   hash^=actions.hashCode();  return hash;}  }
class C{  public static IndTestType serializableInstance(){  return IndTestType.DEFAULT;}  }
class C{  protected void openInNewBrowser(SelectEvent event,String url){  try {    BrowserOpener.browse(new URL(url));    event.consume();  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToInvokeWebBrower",url);    Logging.logger().warning(message);  }}  }
class C{  public V clear(){  final Future<V> f=cache.getAndSet(null);  return f == null ? null : Code.wrapThrow(null);}  }
class C{  private IContainer createFromRoot(IPath path) throws CoreException {  int segmentCount=path.segmentCount();  IContainer currentFolder=((IWorkspaceRoot)destinationContainer).getProject(path.segment(0));  for (int i=1; i < segmentCount; i++) {    currentFolder=currentFolder.getFolder(new Path(path.segment(i)));    if (!currentFolder.exists()) {      ((IFolder)currentFolder).create(false,true,null);    }  }  return currentFolder;}  }
class C{  public static void executeOnGlobalLayout(@NonNull final Activity activity,@NonNull final ViewTreeObserver.OnGlobalLayoutListener listener){  executeOnGlobalLayout(activity.getWindow().getDecorView().findViewById(android.R.id.content),listener);}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {case 10:    return true;default :  break;}return false;}  }
class C{  public void startBuilding(String systemID,int lineNr){  this.stack=new Stack();  this.root=null;}  }
class C{  private static int findAnyZero(float[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      low=middle + 1;    } else     if (middleValue > 0.0f) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public GeneralAlgorithmRunner(DataWrapper dataWrapper,Parameters parameters,KnowledgeBoxModel knowledgeBoxModel){  this(dataWrapper,null,parameters,knowledgeBoxModel,null);}  }
class C{  public void reuse(Vector3i start){  this.start=checkNotNull(start,"start");  this.end=this.start.add(this.size).sub(Vector3i.ONE);  Arrays.fill(this.biomes,BiomeTypes.OCEAN);}  }
class C{  public @Nonnull String inspectRequiredField(@Nonnull EnvVars launchEnv,@Nonnull String objectId,@Nonnull String fieldPath) throws IOException, InterruptedException {  final String fieldValue=inspect(launchEnv,objectId,fieldPath);  if (fieldValue == null) {    throw new IOException("Cannot retrieve " + fieldPath + " from 'docker inspect"+ objectId+ "'");  }  return fieldValue;}  }
class C{  public static String convertBytesToHex(byte[] value){  return convertBytesToHex(value,value.length);}  }
class C{  public static int numberToBcd(int number){  if (number > 99 || number < 0)   throw new RuntimeException("Number is too big for BCD");  return ((number / 10) << 4) | (number % 10);}  }
class C{  private void presentWriteCallLogPermissionExplanationToast(){  Activity activity=getActivity();  if (null != activity) {    String toastMessage=getString(R.string.permission_dialog_write_call_log_message);    Toast.makeText(activity,toastMessage,Toast.LENGTH_LONG).show();  }}  }
class C{  public <A extends Annotation>List<Class<? extends ConstraintValidator<A,?>>> findValidatorClasses(Class<A> annotationType,ValidationTarget validationTarget){  List<Class<? extends ConstraintValidator<A,?>>> validatorClasses=getAllValidatorClasses(annotationType);  List<Class<? extends ConstraintValidator<A,?>>> matchingValidatorClasses=newArrayList();  for (  Class<? extends ConstraintValidator<A,?>> validatorClass : validatorClasses) {    if (supportsValidationTarget(validatorClass,validationTarget)) {      matchingValidatorClasses.add(validatorClass);    }  }  return matchingValidatorClasses;}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  private void testEquals(){  ValueGeometry geom3d=ValueGeometry.get("POLYGON ((67 13 6, 67 18 5, 59 18 4, 59 13 6,  67 13 6))");  ValueGeometry geom2d=ValueGeometry.get("POLYGON ((67 13, 67 18, 59 18, 59 13,  67 13))");  assertFalse(geom3d.equals(geom2d));  GeometryFactory geometryFactory=new GeometryFactory();  Geometry geometry=geometryFactory.createPoint(new Coordinate(0,0));  geometry.setSRID(27572);  ValueGeometry valueGeometry=ValueGeometry.getFromGeometry(geometry);  Geometry geometry2=geometryFactory.createPoint(new Coordinate(0,0));  geometry2.setSRID(5326);  ValueGeometry valueGeometry2=ValueGeometry.getFromGeometry(geometry2);  assertFalse(valueGeometry.equals(valueGeometry2));  try {    ValueGeometry.get("POINT EMPTY");    fail("expected this to throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  void pushDual(Operand r){  if (VM.VerifyAssertions)   opt_assert(r.instruction == null);  stack.push(DUMMY);  stack.push(r);}  }
class C{  private void printAttendeeStatus(String uname) throws IOException, ServiceException {  String eventsFeedUrl=CALENDAR_FEEDS_PREFIX + uname + "/private/composite";  String fields="entry(@gd:etag,id,title,gd:who[@email='" + uname + "'])";  CalendarQuery partialQuery=new CalendarQuery(new URL(eventsFeedUrl));  partialQuery.setFields(fields);  DateTime startTime=DateTime.now();  partialQuery.setMinimumStartTime(startTime);  partialQuery.setMaximumStartTime(new DateTime(startTime.getValue() + 604800000,startTime.getTzShift()));  CalendarEventFeed events=service.query(partialQuery,CalendarEventFeed.class);  for (  CalendarEventEntry event : events.getEntries()) {    String eventId=event.getId().substring(event.getId().lastIndexOf("/") + 1);    String attendeeStatus=event.getParticipants().get(0).getAttendeeStatus();    OUT.println(eventId + ": " + event.getTitle().getPlainText()+ ": ("+ (attendeeStatus != null ? attendeeStatus : "no status")+ ")");  }}  }
class C{  public NetworkLite(URI id,String label){  _id=id;  _label=label;}  }
class C{  public boolean accept(T value,R rule,boolean include){  return value.equals(rule);}  }
class C{  public boolean isChanged(){  if (copyOfBook != null)   return copyOfBook.isChanged();  return isFlags(FLAG_CHANGED);}  }
class C{  public DuplicatePrimaryPartitionException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void resetCache(){  cache=createFreshCache();}  }
class C{  public boolean isAddressLinesLocalReverse(){  Object oo=get_Value(COLUMNNAME_IsAddressLinesLocalReverse);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static JSONObject toJsep(RtcCandidate candidate){  if (candidate == null) {    throw new NullPointerException("candidate should not be null");  }  JSONObject json=new JSONObject();  if (candidate.getStreamIndex() < 0 && candidate.getStreamId() == null) {    return null;  }  try {    if (candidate.getStreamId() != null) {      json.put("sdpMid",candidate.getStreamId());    }    if (candidate.getStreamIndex() >= 0) {      json.put("sdpMLineIndex",candidate.getStreamIndex());    }    json.put("candidate",toSdpAttribute(candidate));    json.put("candidateDescription",toCandidateDescription(candidate));    return json;  } catch (  JSONException e) {    e.printStackTrace();    Log.wtf(TAG,"failed to generate jsep candidate",e);    return null;  }}  }
class C{  @Override public void deleted(){}  }
class C{  public Builder contentItems(List<ContentItem> contentItems){  this.contentItems=contentItems;  contentType=HttpMediaType.APPLICATION_JSON;  return this;}  }
class C{  public void makeCurrent(EGLSurface drawSurface,EGLSurface readSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,drawSurface,readSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent(draw,read) failed");  }}  }
class C{  public Type3(Type2 model1,Parameters parameters){}  }
class C{  final public void enable_tracing(){}  }
class C{  private boolean shouldAppendArguments(Document document,int offset,char trigger){  if (trigger != '\0' && trigger != '<' && trigger != '(') {    return false;  }  char[] completion=fProposal.getCompletion();  if (completion.length == 0) {    return false;  }  try {    Region region=document.getLineInformationOfOffset(offset);    String line=document.get(region.getOffset(),region.getLength());    int index=offset - region.getOffset();    while (index != line.length() && CharUtil.isJavaIdentifierPart(line.charAt(index))) {      ++index;    }    if (index == line.length()) {      return true;    }    char ch=line.charAt(index);    return ch != '<';  } catch (  BadLocationException e) {    return true;  }}  }
class C{  public void readDataFromTCP() throws IOException {  new ProcessTCPTask(activity,mainActionController,scanConversion,ip,port).execute();}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.170 -0400",hash_original_method="F784C612153192C56AC61297D2700D20",hash_generated_method="6637C72F1563C08282BF95D890B43FFF") protected final void walk(File startDirectory,Collection<T> results) throws IOException {  if (startDirectory == null) {    throw new NullPointerException("Start Directory is null");  }  try {    handleStart(startDirectory,results);    walk(startDirectory,0,results);    handleEnd(results);  } catch (  CancelException cancel) {    handleCancelled(startDirectory,results,cancel);  }}  }
class C{  public void updateDistribs(){  for (  String queryVar : shownDistribs.keySet()) {    shownDistribs.get(queryVar).update(currentState);  }}  }
class C{  public static boolean isPrimitiveType(ClassNode cn){  return cn == boolean_TYPE || cn == char_TYPE || cn == byte_TYPE || cn == short_TYPE || cn == int_TYPE || cn == long_TYPE || cn == float_TYPE || cn == double_TYPE || cn == VOID_TYPE;}  }
class C{  public CProjectContainerNodeComponent(final JTree projectTree,final IDatabase database){  super(new CProjectsTable(projectTree,database),new CProjectFilterCreator(),new CProjectFilterHelp());  m_database=database;  m_listener=new InternalDatabaseListener();  m_database.addListener(m_listener);  updateBorderText(getBorderText());}  }
class C{  public static double RHmaxFitness(boolean useTrainingData,GEPIndividual ind){  return (useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);}  }
class C{  public boolean isTop(){  return !isValid && isTop;}  }
class C{  private Base64(){}  }
class C{  public Composite createControl(final Composite parent,final KeyListener listener1){  final Composite part=AbstractSimpleConfigurator.subpart(parent,"Raster");  this.percent=new Combo(part,SWT.DROP_DOWN);  this.percent.setItems(new String[]{"0%","25%","50%","75%","100%"});  this.percent.setTextLimit(4);  this.percent.addKeyListener(listener1);  this.percent.setToolTipText("Percent opacity");  return part;}  }
class C{  public void reset(){  x=0;  y=0;  direction=Direction.EAST;  remainingMoves=maxMoves;  foodEaten=0;  for (int i=0; i < width; i++) {    for (int j=0; j < height; j++) {      if (map[i][j].equals(State.EATEN)) {        map[i][j]=State.FOOD;      }    }  }}  }
class C{  public MoveForward(){  super();}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public static CCMenuItemSprite item(CCNode normalSprite,CCNode selectedSprite,CCNode disabledSprite,CCNode target,String selector){  return new CCMenuItemSprite(normalSprite,selectedSprite,disabledSprite,target,selector);}  }
class C{  public void shutdown(){}  }
class C{  public int indexOf(VectorSeries series){  ParamChecks.nullNotPermitted(series,"series");  return this.data.indexOf(series);}  }
class C{  public Viennet4(){  super(2,3,3);}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public static int createTypeInstance(final Connection connection,final int moduleId,final String name,final Integer commentId,final int typeId,final int sectionId,final long sectionOffset) throws CouldntSaveDataException {  Preconditions.checkNotNull(connection,"Error: connection argument can not be null");  Preconditions.checkArgument(moduleId > 0,"Error: module id must be greater than zero");  Preconditions.checkNotNull(name,"Error: name argument can not be null");  Preconditions.checkArgument(typeId >= 0,"Error: type id must be greater than zero");  Preconditions.checkArgument(sectionId >= 0,"Error: section id must be larger than zero");  Preconditions.checkArgument(sectionOffset >= 0,"Error: section offset must be larger or equal to zero");  try {    final String query=" { ? = call create_type_instance(?, ?, ?, ?, ?, ?) } ";    final CallableStatement procedure=connection.prepareCall(query);    try {      procedure.registerOutParameter(1,Types.INTEGER);      procedure.setInt(2,moduleId);      procedure.setString(3,name);      if (commentId == null) {        procedure.setNull(4,Types.INTEGER);      } else {        procedure.setInt(4,commentId);      }      procedure.setInt(5,typeId);      procedure.setInt(6,sectionId);      procedure.setLong(7,sectionOffset);      procedure.execute();      final int typeInstanceId=procedure.getInt(1);      if (procedure.wasNull()) {        throw new CouldntSaveDataException("Error: the type instance id returned from the database was null");      }      return typeInstanceId;    }  finally {      procedure.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  int accumDefaultEntity(java.io.Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  if (!escLF && CharInfo.S_LINEFEED == ch) {    writer.write(m_lineSep,0,m_lineSepLen);  } else {    if ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch))) {      String outputStringForChar=m_charInfo.getOutputStringForChar(ch);      if (null != outputStringForChar) {        writer.write(outputStringForChar);      } else       return i;    } else     return i;  }  return i + 1;}  }
class C{  public String toFormattedString(){  return "Device properties:\n    " + createString("\n    ");}  }
class C{  private void run() throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("jdbcSampleWriter");  JdbcStreams myDb=new JdbcStreams(t,null,null);  TStream<Person> persons=t.collection(PersonData.loadPersonData(props));  myDb.executeStatement(persons,null,null);  tp.submit(t);}  }
class C{  protected void encode(OutputStream out,ObjectIdentifier extensionId,boolean isCritical) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=extensionId;    this.critical=isCritical;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  public void addObjectArrayConfiguration(String objectArrayeventTypeName,ConfigurationEventTypeObjectArray config){  objectArrayTypeConfigurations.put(objectArrayeventTypeName,config);}  }
class C{  public Star(int points,float rotation,float insideness){  float x=0;  float y=0;  float radius=0.5f;  points=points < 3 ? 3 : points;  rotation=rotation + (float)(Math.PI / 2.0);  boolean flat=insideness >= 1.0f;  setControlPointSize(flat ? points : 2 * points);  final float pi2=2 * (float)Math.PI;  float insideRadius=radius * insideness;  Point2D.Float pt;  for (int p=0; p < points; ++p) {    double vertex=p;    double angle=vertex * pi2 / points + rotation;    pt=new Point2D.Float((float)(x + Math.cos(angle) * radius),(float)(y + Math.sin(angle) * radius));    pushPoint(pt);    if (!flat) {      double angle2=(vertex + 0.5) * pi2 / points + rotation;      pt=new Point2D.Float((float)(x + Math.cos(angle2) * insideRadius),(float)(y + Math.sin(angle2) * insideRadius));      pushPoint(pt);    }  }}  }
class C{  public static <S extends HasDoubleClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DoubleClickEvent event=new DoubleClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public int size(){  return n;}  }
class C{  private void paintClose(Graphics2D g,JComponent c,int width,int height,ButtonColors colors){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  Shape s=decodeInterior(width,height);  g.setPaint(decodeCloseGradient(s,colors.interiorTop,colors.interiorBottom));  g.fill(s);  s=decodeEdge(width,height);  g.setColor(colors.edge);  g.draw(s);  s=decodeShadow(width,height);  g.setColor(colors.shadow);  g.draw(s);  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  g.setColor(colors.top);  g.drawLine(0,0,width - 2,0);  g.setColor(colors.left);  g.drawLine(0,1,0,height - 3);  s=decodeMarkInterior(width,height);  g.setColor(colors.markInterior);  g.fill(s);  s=decodeMarkBorder(width,height);  g.setColor(colors.markBorder);  g.draw(s);}  }
class C{  public LongsSketch merge(final LongsSketch other){  if (other == null)   return this;  if (other.isEmpty())   return this;  final long streamLen=this.streamLength + other.streamLength;  final ReversePurgeLongHashMap.Iterator iter=other.hashMap.iterator();  while (iter.next()) {    this.update(iter.getKey(),iter.getValue());  }  this.offset+=other.offset;  this.streamLength=streamLen;  return this;}  }
class C{  private void configDragViewHelper(){  mViewDragHelper=ViewDragHelper.create(this,SENSITIVITY,new ConfigViewHelperCallback(this));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String convertToPEM(byte[] encoding){  StringBuilder builder=new StringBuilder();  Base64 encoder=new Base64(LINE_LENGTH,CHUNK_SEPARATOR);  builder.append(BEGIN_CERT).append("\n");  String encoded=new String(encoder.encode(encoding),Charset.defaultCharset());  builder.append(encoded);  builder.append(END_CERT);  return builder.toString();}  }
class C{  public boolean contains(CharSequence cs){  if (cs == null) {    throw new NullPointerException();  }  return indexOf(cs.toString()) >= 0;}  }
class C{  public BreadthFirstIterator(Iterator it,int depth,int traversal){  init(it,depth,traversal);}  }
class C{  public static boolean ejecutarAccion(Map params){  Thread process=new Thread(new EjecutarAccion(params));  process.start();  return true;}  }
class C{  public BinaryMessage correctNID(BinaryMessage message){  CRC status=CRC.PASSED;  int[] original=message.toReverseIntegerArray(0,62);  int[] corrected=new int[63];  boolean irrecoverableErrors=decode(original,corrected);  if (irrecoverableErrors) {    message.setCRC(CRC.FAILED_CRC);    return message;  } else {    for (int x=0; x < 16; x++) {      int index=63 - x - 1;      if (corrected[index] != original[index]) {        status=CRC.CORRECTED;        if (corrected[index] == 1) {          message.set(x);        } else {          message.clear(x);        }      }    }  }  message.setCRC(status);  return message;}  }
class C{  public static CommandName named(final CommandName parent,final String name){  return new NestedCommandNameImpl(parent,name);}  }
class C{  public static void dispatchEvents(final RPObject rpobject,Entity entity){  for (  final RPEvent rpevent : rpobject.events()) {    Event<? extends Entity> event=EventFactory.create(entity,rpevent);    event.execute();  }}  }
class C{  private static boolean hasCommonPrefix(byte[] address,byte[] address2){  return address[0] == address2[0] && address[1] == address2[1];}  }
class C{  public GaValuesRetriever(String modelFileAbsolutePath) throws IOException {  this.modelFileAbsolutePath=modelFileAbsolutePath;}  }
class C{  public void reset(){  firstStep=true;  N3=0;  N4=0;  System.arraycopy(IV,0,ofbV,0,IV.length);  byteCount=0;  cipher.reset();}  }
class C{  public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {  this.baseUrl=baseUrl;  try {    baseUrlURL=new URL(baseUrl);    final String protocol=baseUrlURL.getProtocol();    if (!(protocol.equals("http") || protocol.equals("https"))) {      throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));    }  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));  }  this.requestFactory=requestFactory;}  }
class C{  private Object[] fillGreeting(){  String sql="SELECT C_Greeting_ID, Name FROM C_Greeting WHERE IsActive='Y' ORDER BY 2";  sql=MRole.getDefault().addAccessSQL(sql,"C_Greeting",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  return DB.getKeyNamePairs(sql,true);}  }
class C{  protected void doFreePacket(int option) throws SQLException, IOException {  sendFree(option);  reset(option == ISCConstants.DSQL_drop);}  }
class C{  public static String maskHTML(String content){  return maskHTML(content,false);}  }
class C{  @Override public void checkWrite(){  checkAccess(AccessType.WRITE,null);}  }
class C{  private void processDefinitionClass(Class<?> clazz) throws MojoExecutionException {  log.debug("Processing model class \"" + clazz.getName() + "\"");  XmlType xmlType=clazz.getAnnotation(XmlType.class);  if (xmlType == null) {    log.debug("Model class \"" + clazz.getName() + "\" is not an XmlType so it will be skipped.");  } else {    String name=xmlType.name();    if (!swagger.getDefinitions().containsKey(name)) {      ModelImpl model=new ModelImpl();      if (exampleClassNames.contains(clazz.getSimpleName())) {        model.setExample(new ExampleXmlGenerator(log,clazz).getExampleXml());      }      swagger.addDefinition(name,model);      model.name(name);      if (xsdParser != null) {        model.setDescription(xsdParser.getAnnotation(name));      }      for (      Field field : clazz.getDeclaredFields()) {        processField(field,model);      }    }  }}  }
class C{  public CompilationPlan(NormalMethod m,TypeReference[] pms,OptimizationPlanElement[] op,InstrumentationPlan mp,OptOptions opts){  method=m;  params=pms;  inlinePlan=new DefaultInlineOracle();  optimizationPlan=op;  instrumentationPlan=mp;  options=opts;}  }
class C{  public <T>T time(Callable<T> event) throws Exception {  final long startTime=clock.getTick();  try {    return event.call();  }  finally {    update(clock.getTick() - startTime);  }}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public void testFileDualExclusion() throws Exception {  start();  evictPlc.setExcludePaths(Collections.singleton(FILE_RMT.toString()));  igfsPrimary.create(FILE_RMT,true).close();  checkEvictionPolicy(0,0);  int blockSize=igfsPrimary.info(FILE_RMT).blockSize();  append(FILE_RMT,blockSize);  checkEvictionPolicy(0,0);  read(FILE_RMT,0,blockSize);  checkEvictionPolicy(0,0);}  }
class C{  @Override public void trace(String format,Object... argArray){  if (logger.isLoggable(Level.FINEST)) {    FormattingTuple ft=MessageFormatter.arrayFormat(format,argArray);    log(SELF,Level.FINEST,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public static void i(String tag,String s){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s);}  }
class C{  public static <T>List<T> plus(List<T> left,Collection<T> right){  return (List<T>)plus((Collection<T>)left,right);}  }
class C{  private byte[] entityToBytes(Request<?> request,HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  long totalSize=(int)entity.getContentLength();  try {    ProgressListener progressListener=null;    if (request instanceof ProgressListener) {      progressListener=(ProgressListener)request;    }    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    int transferredBytes=0;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);      transferredBytes+=count;      if (null != progressListener) {        progressListener.onProgress(transferredBytes,totalSize);      }    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public EquidistantFixedBinCountBinning(EquidistantFixedBinCountBinning other){  super(other.getDataTableColumn(),other.isCategorical(),other.getDateFormat());  this.binCount=other.binCount;  this.userDefinedMinValue=other.userDefinedMinValue;  this.userDefinedMaxValue=other.userDefinedMaxValue;  this.autoRange=other.autoRange;  this.forceDataTableColumn(other.getDataTableColumn());}  }
class C{  public static ValueTimestamp parse(String s){  try {    return parseTry(s);  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIMESTAMP",s);  }}  }
class C{  @Override public ByteBuffer toMedia(Object object){  String value=(object instanceof String || object instanceof JsonArray || object instanceof JsonObject) ? object.toString() : gson.toJson(object);  return ByteBuffer.wrap(value.getBytes(Charset.defaultCharset()));}  }
class C{  public <T>void addRequest(Request<T> request,String tag){  request.setTag(tag);  getRequestQueue().add(request);}  }
class C{  private static synchronized void initDisplayMetrics(Context context){  sDisplayMetrics=context.getResources().getDisplayMetrics();}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  @Override public int compareTo(Route o){  return ((Integer)switchPorts.size()).compareTo(o.switchPorts.size());}  }
class C{  public void waitForCompletion(){  try {    awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);  } catch (  Exception e) {  }}  }
class C{  private void checkSalvageAfterTimeout(TransactionConcurrency mode,boolean prepare) throws Exception {  startTxAndPutKeys(mode,prepare);  stopNodeAndSleep(SALVAGE_TIMEOUT + DELTA_AFTER);  for (int i=1; i < GRID_CNT; i++) {    checkTxsEmpty(near(i).context());    checkTxsEmpty(dht(i).context());  }}  }
class C{  private void initPanel(){  fillFieldValues();  mainPanel.addItem("UpdateMethod",updateMethod);  mainPanel.addItem("Epsilon",tfEpsilon);  mainPanel.addItem("Winner Value",tfWinnerValue);  mainPanel.addItem("Loser Value",tfLoserValue);  mainPanel.addItem("Use Leaky Learning",cbUseLeakyLearning);  mainPanel.addItem("Leaky Epsilon",tfLeakyEpsilon);  mainPanel.addItem("Normalize Inputs",cbNormalizeInputs);  mainPanel.addItem("Synapse Decay Percent",tfSynpaseDecayPercent);  checkLeakyEpsilon();  enableFieldBasedOnUpdateMethod();  add(mainPanel);}  }
class C{  protected void dispatchOnRangeSelected(final CalendarDay firstDay,final CalendarDay lastDay){  final OnRangeSelectedListener listener=rangeListener;  final List<CalendarDay> days=new ArrayList<>();  final Calendar counter=Calendar.getInstance();  counter.setTime(firstDay.getDate());  final Calendar end=Calendar.getInstance();  end.setTime(lastDay.getDate());  while (counter.before(end) || counter.equals(end)) {    final CalendarDay current=CalendarDay.from(counter);    adapter.setDateSelected(current,true);    days.add(current);    counter.add(Calendar.DATE,1);  }  if (listener != null) {    listener.onRangeSelected(MaterialCalendarView.this,days);  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("jetty4x",ContainerType.EMBEDDED,Jetty4xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty5x",ContainerType.EMBEDDED,Jetty5xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty6x",ContainerType.EMBEDDED,Jetty6xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty6x",ContainerType.INSTALLED,Jetty6xInstalledLocalContainer.class);  containerFactory.registerContainer("jetty6x",ContainerType.REMOTE,Jetty6xRemoteContainer.class);  containerFactory.registerContainer("jetty7x",ContainerType.EMBEDDED,Jetty7xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty7x",ContainerType.INSTALLED,Jetty7xInstalledLocalContainer.class);  containerFactory.registerContainer("jetty7x",ContainerType.REMOTE,Jetty7xRemoteContainer.class);  containerFactory.registerContainer("jetty8x",ContainerType.EMBEDDED,Jetty8xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty8x",ContainerType.INSTALLED,Jetty8xInstalledLocalContainer.class);  containerFactory.registerContainer("jetty8x",ContainerType.REMOTE,Jetty8xRemoteContainer.class);  containerFactory.registerContainer("jetty9x",ContainerType.EMBEDDED,Jetty9xEmbeddedLocalContainer.class);  containerFactory.registerContainer("jetty9x",ContainerType.INSTALLED,Jetty9xInstalledLocalContainer.class);  containerFactory.registerContainer("jetty9x",ContainerType.REMOTE,Jetty9xRemoteContainer.class);}  }
class C{  public boolean isForOsrSpecialization(){synchronized (synthesizedBytecodes) {    return synthesizedBytecodes.get(this) != null;  }}  }
class C{  public JTree(Object[] value){  this(createTreeModel(value));  this.setRootVisible(false);  this.setShowsRootHandles(true);  expandRoot();}  }
class C{  private void addFacilityToHashMap(ActivityFacilityImpl facility){  Id<Link> facilityLink=getClosestLink(facility);  assureHashMapInitializedForLink(facilityLink);  ArrayList<ActivityFacilityImpl> list=linkFacilityMapping.get(facilityLink);  list.add(facility);}  }
class C{  public void run(){  long beforeTime=System.nanoTime();  long overSleepTime=0L;  int noDelays=0;  final int NO_DELAYS_PER_YIELD=15;  while ((Thread.currentThread() == thread) && !finished) {    while (paused) {      try {        Thread.sleep(100L);      } catch (      InterruptedException e) {      }    }    if (g != null)     g.requestDraw();    long afterTime=System.nanoTime();    long timeDiff=afterTime - beforeTime;    long sleepTime=(frameRatePeriod - timeDiff) - overSleepTime;    if (sleepTime > 0) {      try {        Thread.sleep(sleepTime / 1000000L,(int)(sleepTime % 1000000L));        noDelays=0;      } catch (      InterruptedException ex) {      }      overSleepTime=(System.nanoTime() - afterTime) - sleepTime;    } else {      overSleepTime=0L;      if (noDelays > NO_DELAYS_PER_YIELD) {        Thread.yield();        noDelays=0;      }    }    beforeTime=System.nanoTime();  }  if (!paused) {    stop();    if (exitCalled) {      exit2();    }  }}  }
class C{  public Element simulate(final List<Instruction> instructions){  lock.lock();  try {    returnElement=null;    return simulateInternal(instructions);  }  finally {    lock.unlock();  }}  }
class C{  public static Set<JComponent> allComponents(JComponent parent){  Set<JComponent> result=new HashSet<>();  Deque<JComponent> queue=new LinkedList<>();  queue.add(parent);  while (!queue.isEmpty()) {    JComponent c=queue.removeFirst();    result.add(c);    for (    Component c0 : c.getComponents()) {      if (c0 instanceof JComponent) {        queue.add((JComponent)c0);      }    }  }  result.remove(parent);  return result;}  }
class C{  public static String readString(File file) throws IOException {  FileInputStream in=new FileInputStream(file);  try {    return readString(in);  }  finally {    in.close();  }}  }
class C{  public FetchSourceContext transformSource(boolean transformSource){  this.transformSource=transformSource;  return this;}  }
class C{  public RegisterServer2Response RegisterServer2(RegisterServer2Request req) throws ServiceFaultException, ServiceResultException {  return (RegisterServer2Response)channel.serviceRequest(req);}  }
class C{  public int addNodeRow(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  private ScServer findScServer(StorageCenterAPI api,String ssn,List<Initiator> initiators){  return createOrFindScServer(api,ssn,initiators,new ArrayList<>(0),false);}  }
class C{  public void fireGroupChanged(final Group old,final Group changed,final String changeDescription){  for (  GroupListener listener : groupListeners) {    listener.groupChanged(new NetworkEvent<Group>(this,old,changed),changeDescription);  }}  }
class C{  public SendableStickerMessage.SendableStickerMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  public String replace(String text){  Object value=null;  if (map != null) {    value=map.get(text);  }  if (value != null) {    return value.toString();  }  if (filter != null) {    return filter.replace(text);  }  return null;}  }
class C{  public void printlnComment(String comment) throws IOException {  if (this.strategy.isCommentingDisabled()) {    return;  }  if (!newLine) {    println();  }  out.write(this.strategy.getCommentStart());  out.write(' ');  for (int i=0; i < comment.length(); i++) {    char c=comment.charAt(i);switch (c) {case '\r':      if (i + 1 < comment.length() && comment.charAt(i + 1) == '\n') {        i++;      }case '\n':    println();  out.write(this.strategy.getCommentStart());out.write(' ');break;default :out.write(c);break;}}println();}  }
class C{  public void testFiveNodeSubmitQueryWithBoundedLinearizableConsistency() throws Throwable {  testSubmitQuery(5,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  public void listQueryImpl(String path,Result<List<String>> result){  _dirList.findAll(result.then(null),calculateParentHash(path),path);}  }
class C{  public double groupDelay(double Omega){  return T.discreteTimeGroupDelay(Omega);}  }
class C{  public Vec2(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","constructor","missingVector"));  }  this.x=vector.x;  this.y=vector.y;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  try {    engineInit(opmode,key,(AlgorithmParameterSpec)null,random);  } catch (  InvalidAlgorithmParameterException iape) {    InvalidKeyException ike=new InvalidKeyException("Parameters required");    ike.initCause(iape);    throw ike;  }}  }
class C{  public byte[] blob(){  return this.b;}  }
class C{  public void onUpdate(EntityPlayer player){  EnumDifficulty difficulty=player.worldObj.getDifficulty();  this.prevDecayLevel=this.decayLevel;  if (this.decayAccelerationLevel > 4.0F) {    this.decayAccelerationLevel-=4.0F;    if (this.decaySaturationLevel > 0.0F) {      this.decaySaturationLevel=Math.max(this.decaySaturationLevel - 1.0F,0.0F);    } else     if (difficulty != EnumDifficulty.PEACEFUL) {      this.decaySaturationLevel=0.0F;      this.decayLevel=Math.max(this.decayLevel - 1,0);      if (this.capability != null)       this.capability.markDirty();    }  }  if (player.isInWater()) {    this.addDecayAcceleration(0.00038F);  } else {    this.addDecayAcceleration(0.00024F);  }}  }
class C{  @Uninterruptible public int findBytecodeIndexForInstruction(Offset instructionOffset){  Offset instructionIndex=instructionOffset.toWord().rsha(ArchConstants.getLogInstructionWidth()).toOffset();  int candidateIndex=-1;  int bcIndex=0;  Offset instrIndex=Offset.zero();  for (int i=0; i < bytecodeMap.length; ) {    int b0=(bytecodeMap[i++]) & 255;    int deltaBC, deltaIns;    if (b0 != 255) {      deltaBC=b0 >> 5;      deltaIns=b0 & 31;    } else {      int b1=(bytecodeMap[i++]) & 255;      int b2=(bytecodeMap[i++]) & 255;      int b3=(bytecodeMap[i++]) & 255;      int b4=(bytecodeMap[i++]) & 255;      deltaBC=(b1 << 8) | b2;      deltaIns=(b3 << 8) | b4;    }    bcIndex+=deltaBC;    instrIndex=instrIndex.plus(deltaIns);    if (instrIndex.sGE(instructionIndex)) {      break;    }    candidateIndex=bcIndex;  }  return candidateIndex;}  }
class C{  public boolean canRedo(){  return !isInProgress() && super.canRedo();}  }
class C{  private void updateColumnWidths(){  if (tcList.size() > 0) {    tblFCodes.getColumn(ObdCodeItem.FIELDS[ObdCodeItem.FID_CODE]).setPreferredWidth(40);    tblFCodes.getColumn(ObdCodeItem.FIELDS[ObdCodeItem.FID_DESCRIPT]).setPreferredWidth(330);  }}  }
class C{  public int findLastVisibleItemPosition(){  if (getItemCount() == 0) {    return RecyclerView.NO_POSITION;  } else {    return mFirstVisiblePosition + getChildCount();  }}  }
class C{  public void addListener(EnvLoaderListener listener){  ArrayList<EnvLoaderListener> listeners=_listeners;  if (_lifecycle.isDestroyed() || listeners == null) {    IllegalStateException e=new IllegalStateException(L().l("attempted to add listener to a closed classloader {0}",this));    log().log(Level.WARNING,e.toString(),e);    return;  }synchronized (listeners) {    for (int i=listeners.size() - 1; i >= 0; i--) {      EnvLoaderListener oldListener=listeners.get(i);      if (listener == oldListener) {        return;      } else       if (oldListener == null)       listeners.remove(i);    }    listeners.add(listener);  }  if (_lifecycle.isActive())   listener.classLoaderInit(this);}  }
class C{  public void loop(){  this.loop(Clip.LOOP_CONTINUOUSLY);}  }
class C{  private void parseAdvice(AdviceType advice){  List<Advice> adviceList=new ArrayList<Advice>();  for (  RSAAdviceType rsaAdvice : advice.getRSAAdvice()) {    String source=rsaAdvice.getAdviceSource();    List<AdviceAttribute> adviceAttributes=new ArrayList<AdviceAttribute>();    if (rsaAdvice.getAttribute() != null) {      for (      AttributeType attribute : rsaAdvice.getAttribute()) {        List<String> attrValues=attribute.getAttributeValue();        String attrName=attribute.getName();        String friendlyName=attribute.getFriendlyName();        if (attrValues == null) {          attrValues=new ArrayList<String>();        }        adviceAttributes.add(new AdviceAttribute(attrName,friendlyName,attrValues));      }    }    adviceList.add(new Advice(source,adviceAttributes));  }  _advice=Collections.unmodifiableList(adviceList);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Thread currentThread()")) {    java_lang_Thread_currentThread(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  static Color adjustColor(Color color,float hFactor,float lFactor,float sFactor){  float h;  float l;  float s;synchronized (HLS_COLOR_LOCK) {    float[] hls=rgbToHLS(color.getRGB(),HLS_COLORS);    h=hls[0];    l=hls[1];    s=hls[2];  }  h=Math.min(360,hFactor * h);  l=Math.min(1,lFactor * l);  s=Math.min(1,sFactor * s);  return new ColorUIResource(hlsToRGB(h,l,s));}  }
class C{  public static void sort(short[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public void remove() throws X {  if (isClosed()) {    throw new IllegalStateException("The iteration has been closed.");  }  try {    wrappedIter.remove();  } catch (  IllegalStateException e) {    close();    throw e;  }}  }
class C{  public static boolean compatible(Attribute first,Attribute second){  return Ontology.ATTRIBUTE_VALUE_TYPE.isA(first.getValueType(),second.getValueType()) && Ontology.ATTRIBUTE_BLOCK_TYPE.isA(first.getBlockType(),second.getBlockType());}  }
class C{  public void moveToCurrentRow() throws SQLException {  crsInternal.moveToCurrentRow();}  }
class C{  private static void vecswap(final Swapper s,final long aa,final long bb,final long n){  for (long i=0, a=aa, b=bb; i < n; i++, a++, b++) {    s.swap(a,b);  }}  }
class C{  public static int[] toIntArray(Short[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  public synchronized void addDenseVector(DenseVector dv){  if (this.isExtendable())   this.expandFor(dv.getLength());  int n=dv.getLength();  for (int i=0; i < n; i++) {    u[i]+=dv.u[i];  }}  }
class C{  @Override public boolean canHandleJitter(){  return true;}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }}  }
class C{  @Subscriber(tag="test") void methodWithTag(User person){}  }
class C{  private double calcEnergy(){  double energy=0;  for (int i=0; i < vertices.length - 1; i++) {    for (int j=i + 1; j < vertices.length; j++) {      double dist=dm[i][j];      double l_ij=L * dist;      double k_ij=K / (dist * dist);      double dx=xydata[i].getX() - xydata[j].getX();      double dy=xydata[i].getY() - xydata[j].getY();      double d=Math.sqrt(dx * dx + dy * dy);      energy+=k_ij / 2 * (dx * dx + dy * dy + l_ij * l_ij - 2 * l_ij * d);    }  }  return energy;}  }
class C{  @Override public double transform(double value){  return value;}  }
class C{  public boolean hasQuestion(){  return typeString.contains(QUESTION);}  }
class C{  public static Animation makeOutAnimation(Context c,boolean toRight){  Animation a;  if (toRight) {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_out_right);  } else {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_out_left);  }  a.setInterpolator(new AccelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  public void addHost(String hostPortPair,boolean forExisting){synchronized (this) {    if (this.hostList.add(hostPortPair)) {      this.activeHosts++;    }  }  if (!forExisting) {    return;  }  Map<Long,LoadBalancedConnectionProxy> proxyMap=new HashMap<Long,LoadBalancedConnectionProxy>();synchronized (this.connectionProxies) {    proxyMap.putAll(this.connectionProxies);  }  for (  LoadBalancedConnectionProxy proxy : proxyMap.values()) {    proxy.addHost(hostPortPair);  }}  }
class C{  public void appendRemainingName(Name name){  if (name == null) {    return;  }  if (remainingName != null) {    try {      remainingName.addAll(name);    } catch (    NamingException e) {      throw new IllegalArgumentException(e.toString());    }  } else {    remainingName=(Name)(name.clone());  }}  }
class C{  public boolean decodeContentLocation(int startIndex){  return decodeTextString(startIndex);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double nextLogistic(MersenneTwisterFast randomGenerator){  double u=randomGenerator.nextDouble();  return (-Math.log(1.0 / u - 1.0));}  }
class C{  public EnvironmentLocal(){  _varName="baratine:var-" + _varCount.incrementAndGet();}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeObject(knnDistance);}  }
class C{  @Nullable public GridCacheMvccCandidate readyNearLocal(GridCacheVersion ver,GridCacheVersion mappedVer,Collection<GridCacheVersion> committedVers,Collection<GridCacheVersion> rolledBackVers,Collection<GridCacheVersion> pending){  GridCacheMvccCandidate cand=candidate(locs,ver);  if (cand != null) {    assert cand.nearLocal() : "Near local candidate is not marked as near local: " + cand;    cand.setReady();    boolean setMapped=cand.otherVersion(mappedVer);    assert setMapped : "Failed to set mapped dht version for near local candidate [mappedVer=" + mappedVer + ", cand="+ cand+ ']';    List<GridCacheMvccCandidate> mvAfter=null;    for (ListIterator<GridCacheMvccCandidate> it=locs.listIterator(); it.hasNext(); ) {      GridCacheMvccCandidate c=it.next();      assert c.nearLocal() : "Near local candidate is not marked as near local: " + c;      if (c == cand) {        if (mvAfter != null)         for (        GridCacheMvccCandidate mv : mvAfter)         it.add(mv);        break;      } else {        if (c.owner())         continue;        assert !c.ready() : "Cannot have more then one ready near-local candidate [c=" + c + ", cand="+ cand+ ", mvcc="+ this+ ']';        it.remove();        if (mvAfter == null)         mvAfter=new LinkedList<>();        mvAfter.add(c);      }    }    if (rmts != null) {      for (      GridCacheMvccCandidate rmt : rmts) {        GridCacheVersion rmtVer=rmt.version();        if (rmtVer.isLess(mappedVer)) {          if (!pending.contains(rmtVer) && !mappedVer.equals(rmt.ownerVersion()))           rmt.setOwner();        } else {          if (committedVers.contains(rmtVer) || rolledBackVers.contains(rmtVer))           rmt.setOwner();        }      }    }    reassign();  }  return anyOwner();}  }
class C{  public final boolean isDeprecated(){  return (this.modifiers & ClassFileConstants.AccDeprecated) != 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.941 -0500",hash_original_method="914B430886739457D899D0D840F0325C",hash_generated_method="50826E44A2062E2FB025D20ED02D5714") public final int compareTo(E o){  return ordinal - o.ordinal;}  }
class C{  public static JMenuBar leftShift(JMenuBar self,JMenu menu){  self.add(menu);  return self;}  }
class C{  public double optDouble(String key){  return optDouble(key,Double.NaN);}  }
class C{  public static boolean isVolumeVPLEX(VolumeRestRep vol){  if (vol.getHaVolumes() != null && !vol.getHaVolumes().isEmpty()) {    return true;  }  return false;}  }
class C{  public Map<String,Object> runSync(String localName,ModelService service,Map<String,? extends Object> context) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  return runSync(localName,service,context,true);}  }
class C{  public TypeAnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static void link(final Tag parent,final Tag child){  Preconditions.checkNotNull(parent,"Error: Parent can't be null");  Preconditions.checkNotNull(child,"Error: Child can't be null");  parent.m_children.add(child);  child.m_parent=parent;}  }
class C{  public WrappedByteBuffer flip(){  _buf=(java.nio.ByteBuffer)_buf.flip();  return this;}  }
class C{  private Long currentTime(){  return System.currentTimeMillis() / 1000;}  }
class C{  @Override public int hashCode(){  long sod=toSecondOfDay();  return (int)(sod ^ (sod >>> 32));}  }
class C{  @ZapApiIgnore public boolean isConfirmRemoveProxyExcludedDomain(){  return this.confirmRemoveProxyExcludeDomain;}  }
class C{  @Override public void addDataSourceListener(DataSourceListener dsl){  m_dataListeners.add(dsl);}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,Executor executor){  this(processorType,executor,DEFAULT_SIZE,null);}  }
class C{  public void restoreSecretKey(String restoreFileName){  try (ZipFile zipFile=new ZipFile(restoreFileName)){    SecretKey dbKey=readKey(zipFile,KEY_DB);    SecretKey geodbKey=readKey(zipFile,KEY_GEODB);    if (dbKey == null || geodbKey == null) {      throw new IllegalStateException("Key is null");    }    encryptionProvider.restoreKey(dbKey);    geoEncryptionProvider.restoreKey(geodbKey);  } catch (  Exception e) {    System.err.println(String.format("Failed to restore key, Exception=%s",e));    log.error("Failed to restore key",e);  }}  }
class C{  public void triggerPreparedNotification(boolean checkNotification){  if (null != mLatestNotification) {    if (checkNotification) {      checkNotification();    }    if (null != mLatestNotification) {      try {        NotificationManager nm=(NotificationManager)EventStreamService.this.getSystemService(Context.NOTIFICATION_SERVICE);        nm.cancelAll();        nm.notify(NOTIF_ID_MESSAGE,mLatestNotification);        if (mGcmRegistrationManager.isScreenTurnedOn()) {          PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);          PowerManager.WakeLock wl=pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,"MXEventListener");          wl.acquire(3000);          wl.release();        }      } catch (      Exception e) {        Log.e(LOG_TAG,"onLiveEventsChunkProcessed crashed " + e.getLocalizedMessage());      }      mLatestNotification=null;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int progress=0;  int a=0;  int i;  double slopeGradient=0;  double aspect=0;  double z=0;  double k=0;  double north=0;  double south=0;  double east=0;  double west=0;  double xRange=0;  double yRange=0;  final double degreesToRadians=Math.PI / 180;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      slopeGradient=Double.parseDouble(args[i]);    } else     if (i == 3) {      aspect=Double.parseDouble(args[i]);    } else     if (i == 4) {      k=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    north=image.getNorth();    south=image.getSouth();    east=image.getEast();    west=image.getWest();    xRange=east - west;    yRange=north - south;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (aspect > 360) {      boolean flag=false;      do {        aspect-=360;        if (aspect <= 360) {          flag=true;        }      } while (!flag);    }    if (aspect > 180) {      aspect-=180;    } else {      aspect+=180;    }    slopeGradient=slopeGradient * degreesToRadians;    aspect=aspect * degreesToRadians;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        x=west + xRange * ((double)col / (cols - 1));        y=north - yRange * ((double)row / (rows - 1));        z=Math.tan(slopeGradient) * Math.sin(aspect) * x + Math.tan(slopeGradient) * Math.cos(aspect) * y + k;        output.setValue(row,col,z);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private <TransformT extends PTransform<? super PInput,POutput>>TransformEvaluator<TransformT> translate(TransformTreeNode node,TransformT transform,Class<TransformT> transformClass){  Collection<? extends PValue> pValues;  PInput pInput=node.getInput();  if (pInput instanceof PBegin) {    pValues=node.getOutput().expand();  } else {    pValues=pInput.expand();  }  PCollection.IsBounded isNodeBounded=isBoundedCollection(pValues);  LOG.debug("Translating {} as {}",transform,isNodeBounded);  return isNodeBounded.equals(PCollection.IsBounded.BOUNDED) ? translator.translateBounded(transformClass) : translator.translateUnbounded(transformClass);}  }
class C{  @Override public void characters(char[] ch,int start,int length){  mOutputBuilder.append(ch,start,length);}  }
class C{  public void finish() throws IOException {  if (count != numValues) {    throw new IllegalStateException("Wrong number of values added, expected: " + numValues + ", got: "+ count);  }  assert !finished;  flush();  for (int i=0; i < 3; i++) {    output.writeByte((byte)0);  }  finished=true;}  }
class C{  public void writeBoolean(String key,boolean value){  SharedPreferences.Editor editor=preferences.edit();  editor.putBoolean(key,value);  editor.commit();}  }
class C{  @SuppressWarnings("unchecked") private void appendValue(final StringBuilder sb,final Object value,int tabs,final boolean align){  if (align) {    finishLine();    sb.append(TABS[tabs]);  }  if (value instanceof Map) {    sb.append('{');    tabs++;    for (    final Entry<Object,Object> entry : ((Map<Object,Object>)value).entrySet()) {      finishLine();      sb.append(TABS[tabs]).append(entry.getKey()).append(" = ");      appendValue(sb,entry.getValue(),tabs,false);    }    tabs--;    finishLine();    sb.append(TABS[tabs]).append('}');  } else   if (value instanceof Object[]) {    sb.append('[');    tabs++;    for (    final Object e : (Object[])value) {      appendValue(sb,e,tabs,true);      sb.append(',');    }    tabs--;    finishLine();    sb.append(TABS[tabs]).append(']');  } else   if (value instanceof StructView) {    appendValue(sb,((StructView)value).getStruct(),tabs,false);  } else   if (value instanceof Pair) {    sb.append(((Pair<String,Object>)value).value1).append(" = ");    appendValue(sb,((Pair<String,Object>)value).value2,tabs,false);  } else   if (value instanceof XString) {    final String s=value.toString();    sb.append(s.indexOf('\0') >= 0 ? s.replace("\0","") : s);  } else   sb.append(value);  if (tabs == 0)   finishLine();}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service){  return ServiceLoader.load(service,Thread.currentThread().getContextClassLoader());}  }
class C{  public boolean evaluateEarly(){  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_ANNOTATION_LIST__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  if (img == null) {    return true;  }  ImageWaiter dim=new ImageWaiter(img);  addDrawingRect(x,y,dim.getWidth(),dim.getHeight());  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,x,y,observer);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void w(String msg,Throwable thr){  if (DEBUG)   Log.w(TAG,buildMessage(msg),thr);}  }
class C{  private void updateViewToolbar(){  collapseAction.updateEnabledState();  toolBarManager.find(REFRESH_CONTRIBUTION_ITEM).setVisible(displayedRepositoryDefinition instanceof CmrRepositoryDefinition);  toolBarManager.find(CLEAR_BUFFER_CONTRIBUTION_ITEM).setVisible((displayedRepositoryDefinition instanceof CmrRepositoryDefinition) && !OnlineStatus.OFFLINE.equals(((CmrRepositoryDefinition)displayedRepositoryDefinition).getOnlineStatus()));  toolBarManager.update(true);}  }
class C{  @Override public Class<Model> modelType(){  return Model.class;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ScreenQuad(){  this(true);}  }
class C{  public static AnnotationGenerator v(){  return G.v().soot_jimple_toolkits_annotation_j5anno_AnnotationGenerator();}  }
class C{  @Override public void close() throws IOException {  closed=true;  lastChar=END_OF_STREAM;  super.close();}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public void shutdown(boolean waitForJobsToComplete) throws SchedulerException {  try {    String schedulerName=getSchedulerName();    getRemoteScheduler().shutdown(waitForJobsToComplete);    SchedulerRepository.getInstance().remove(schedulerName);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private boolean findDestinationAndTrack(Car car,RouteLocation rl,RouteLocation rld) throws BuildFailedException {  int index;  for (index=0; index < _routeList.size(); index++) {    if (rld == _routeList.get(index)) {      break;    }  }  if (_routeList.size() == 1) {    return findDestinationAndTrack(car,rl,index,index + 1);  }  return findDestinationAndTrack(car,rl,index - 1,index + 1);}  }
class C{  public boolean isCurrentDigit(){  if (!isValidIndex())   return false;  return (lcText[pos] >= '0' && lcText[pos] <= '9');}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public static Circle MBRtoCircle(Envelope mbr){  Double radius=(mbr.getMaxX() - mbr.getMinX()) / 2;  GeometryFactory fact=new GeometryFactory();  Coordinate coordinate=new Coordinate(mbr.getMinX() + radius,mbr.getMinY() + radius);  Point point=fact.createPoint(coordinate);  return new Circle(point,radius);}  }
class C{  public void removeEntry(StatusHistoryEntry entry){  int indexToRemove=data.indexOf(entry);  if (indexToRemove != -1) {    int viewIndex=indexToView(indexToRemove);    data.remove(indexToRemove);    if (getRowCount() > viewIndex) {      setRowSelected(viewIndex);    } else     if (viewIndex - 1 >= 0 && getRowCount() > viewIndex - 1) {      setRowSelected(viewIndex - 1);    }  }}  }
class C{  public boolean isTransparent(){  return !isProxied() || tunnelEstablished;}  }
class C{  public void removeNotify(){  wizard.removeWizardObserver(this);  super.removeNotify();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Comment newCommentNode;  String newCommentValue;  String newCommentName;  int newCommentType;  doc=(Document)load("hc_staff",true);  newCommentNode=doc.createComment("This is a new Comment node");  newCommentValue=newCommentNode.getNodeValue();  assertEquals("value","This is a new Comment node",newCommentValue);  newCommentName=newCommentNode.getNodeName();  assertEquals("strong","#comment",newCommentName);  newCommentType=(int)newCommentNode.getNodeType();  assertEquals("type",8,newCommentType);}  }
class C{  public void build(){  data=new int[height * width];  int offset=0;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      int tileId=0;      tileId|=(raw[0 + offset] & 0xFF);      tileId|=(raw[1 + offset] & 0xFF) << 8;      tileId|=(raw[2 + offset] & 0xFF) << 16;      tileId|=(raw[3 + offset] & 0xFF) << 24;      data[x + y * width]=tileId;      offset+=4;    }  }}  }
class C{  public strike addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  VisualItem adaptAggregate(VisualItem item){  if (item instanceof AggregateItem) {    VisualItem[] proxy={item};    withVisualItem((AggregateItem)item,null);    item=proxy[0];  }  return item;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() == Conversation.TYPE_SERVER) {    throw new CommandException(service.getString(R.string.only_usable_from_channel_or_query));  }  if (params.length > 1) {    String action=BaseHandler.mergeParams(params);    String nickname=service.getConnection(server.getId()).getNick();    Message message=new Message(nickname + " " + action);    message.setIcon(R.drawable.action);    server.getConversation(conversation.getName()).addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());    service.sendBroadcast(intent);    service.getConnection(server.getId()).sendAction(conversation.getName(),action);  } else {    throw new CommandException(service.getString(R.string.text_missing));  }}  }
class C{  private void unSSAGuards(IR ir){  unSSAGuardsInit(ir);  unSSAGuardsDetermineReg(ir);  unSSAGuardsFinalize(ir);}  }
class C{  final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public Configuration preventMultipleRootScopes(){  this.multipleRootScopeCheckConfiguration=new MultipleRootScopeCheckOnConfiguration();  return this;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public static boolean checkFolderName(String name){  return FOLDER_NAME.test(name);}  }
class C{  private long sumGCCount(){  long sum=0;  for (  java.lang.management.GarbageCollectorMXBean mxBean : gcMXBeans) {    sum+=mxBean.getCollectionCount();  }  return sum;}  }
class C{  public void seek(int position){  int backtrackLength=Math.max(_index - position,0);  _backtracked+=backtrackLength;  _index=position;  checkBacktrackLoop(backtrackLength);}  }
class C{  public static ApplicationXmlVersion valueOf(String thePublicId){  ApplicationXmlVersion version=null;  if (V1_2.getPublicId().equals(thePublicId)) {    version=ApplicationXmlVersion.V1_2;  } else   if (V1_3.getPublicId().equals(thePublicId)) {    version=ApplicationXmlVersion.V1_3;  }  return version;}  }
class C{  public String routing(){  return this.routing;}  }
class C{  public static void assertBackgroundThread(){  if (isInUiThread()) {    throw new RuntimeException("This call must be in background thread");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.446 -0500",hash_original_method="D87F049394C2BF8E430D24ECC769A568",hash_generated_method="61AF8612D360F90362D60222BA9E9E82") @Deprecated public SslCertificate(String issuedTo,String issuedBy,Date validNotBefore,Date validNotAfter){  this(issuedTo,issuedBy,validNotBefore,validNotAfter,null);}  }
class C{  public List<String> validate(IndexMetaData indexMetaData){  ArrayList<String> failures=new ArrayList<>();  return failures;}  }
class C{  public void addOffer(Offer offer){  ((OfferBinder)getDataBinder(TYPE_CARD)).addNewOffer(offer);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public static void handleEndpointsRemoved(Network network,Collection<String> endpoints,DbClient dbClient,CoordinatorClient coordinator){  List<StoragePort> remPorts=getEndPointsStoragePorts(endpoints,dbClient);  clearPortAssociations(remPorts,dbClient);  StoragePoolAssociationHelper.handleNetworkUpdated(network,null,null,null,remPorts,dbClient,coordinator);}  }
class C{  public String encodedPassword(){  if (password.isEmpty()) {    return "";  }  int passwordStart=url.indexOf(':',scheme.length() + 3) + 1;  int passwordEnd=url.indexOf('@');  return url.substring(passwordStart,passwordEnd);}  }
class C{  @Override public void process(Map<String,Object> tuple){  processTuple(tuple);}  }
class C{  public static String[] split(String str){  return split(str,null,-1);}  }
class C{  public void populate(net.minecraft.world.chunk.IChunkProvider icp,int i,int i1){  provider.populate(icp,i,i1);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException(padding + " cannot be used");  }}  }
class C{  static Bitmap createIconBitmap(String packageName,String resourceName,IconCache cache,Context context){  PackageManager packageManager=context.getPackageManager();  try {    Resources resources=packageManager.getResourcesForApplication(packageName);    if (resources != null) {      final int id=resources.getIdentifier(resourceName,null,null);      return createIconBitmap(resources.getDrawableForDensity(id,cache.getFullResIconDpi()),context);    }  } catch (  Exception e) {  }  return null;}  }
class C{  public RegexTemplate(String rawString){  this.rawString=rawString.trim();  String escaped=StringUtils.escape(rawString);  String regex=constructRegex(escaped);  pattern=Pattern.compile(regex,Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);  slots=getSlots(rawString);}  }
class C{  public static String stripOffMarkupFormatting(String s){  int start=0;  while ((start=s.indexOf('<',start)) >= 0)   s=s.substring(0,start) + s.substring(s.indexOf('>',start) + 1);  return s;}  }
class C{  public long convertGeodeticToUPS(double latitude,double longitude){  if ((latitude < -MAX_LAT) || (latitude > MAX_LAT)) {    return UPS_LAT_ERROR;  }  if ((latitude < 0) && (latitude > MIN_SOUTH_LAT))   return UPS_LAT_ERROR;  if ((latitude >= 0) && (latitude < MIN_NORTH_LAT))   return UPS_LAT_ERROR;  if ((longitude < -PI) || (longitude > (2 * PI))) {    return UPS_LON_ERROR;  }  if (latitude < 0) {    UPS_Origin_Latitude=-MAX_ORIGIN_LAT;    Hemisphere=AVKey.SOUTH;  } else {    UPS_Origin_Latitude=MAX_ORIGIN_LAT;    Hemisphere=AVKey.NORTH;  }  polarConverter.setPolarStereographicParameters(UPS_a,UPS_f,UPS_Origin_Latitude,UPS_Origin_Longitude,false_easting,false_northing);  polarConverter.convertGeodeticToPolarStereographic(latitude,longitude);  UPS_Easting=UPS_False_Easting + polarConverter.getEasting();  UPS_Northing=UPS_False_Northing + polarConverter.getNorthing();  if (AVKey.SOUTH.equals(Hemisphere))   UPS_Northing=UPS_False_Northing - polarConverter.getNorthing();  Easting=UPS_Easting;  Northing=UPS_Northing;  return UPS_NO_ERROR;}  }
class C{  private PrefManager(){  toolPrefs=Preferences.userNodeForPackage(this.getClass());}  }
class C{  private void initServer(SSLContextImpl context) throws SSLException {  if (context == null) {    throw new SSLException("No Authentication context given");  }  sslContext=context;  enabledCipherSuites=sslContext.getDefaultCipherSuiteList(true);  enabledProtocols=sslContext.getDefaultProtocolList(true);}  }
class C{  private static StringBuilder filterTableProperties(final String properties){  final String[] values=properties.replaceAll("&quot;",EMPTY).split("[= ]");  final StringBuilder stringBuilder=new StringBuilder(properties.length());  String key, value;  String[] posVals;  final int numberOfValues=values.length;  for (int i=0; i < numberOfValues; i++) {    key=values[i].trim();    if ("nowrap".equals(key)) {      appendKeyValuePair("nowrap","nowrap",stringBuilder);    } else     if (i + 1 < numberOfValues) {      value=values[++i].trim();      if (("summary".equals(key)) || ("bgcolor".equals(key) && value.matches("#{0,1}[0-9a-fA-F]{1,6}|[a-zA-Z]{3,}")) || (("width".equals(key) || "height".equals(key)) && value.matches("\\d+%{0,1}"))|| ((posVals=PROPERTY_VALUES.get(key)) != null && Arrays.binarySearch(posVals,value) >= 0)|| (Arrays.binarySearch(TABLE_PROPERTIES,key) >= 0 && value.matches("\\d+"))) {        appendKeyValuePair(key,value,stringBuilder);      }    }  }  return stringBuilder;}  }
class C{  public static Line fromLeft(int margin,int marginUnit){  return new Line(1,Gravity.LEFT,margin,marginUnit,DebugColors.next());}  }
class C{  private void ensureCapacity(int wordsRequired){  if (words.length < wordsRequired) {    int request=Math.max(2 * words.length,wordsRequired);    words=Arrays.copyOf(words,request);    sizeIsSticky=false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.GETTER_DECLARATION;}  }
class C{  public static Drawable inflate(Resources resources,@DrawableRes int resId){  if (LOLLIPOP_PLUS) {    return resources.getDrawable(resId);  } else {    return inflateCompatOnly(resources,resId);  }}  }
class C{  private void maybeEvictFilesInCacheDir() throws IOException {synchronized (mLock) {    boolean calculatedRightNow=maybeUpdateFileCacheSize();    updateFileCacheSizeLimit();    long cacheSize=mCacheStats.getSize();    if (cacheSize > mCacheSizeLimit && !calculatedRightNow) {      mCacheStats.reset();      maybeUpdateFileCacheSize();    }    if (cacheSize > mCacheSizeLimit) {      evictAboveSize(mCacheSizeLimit * 9 / 10,CacheEventListener.EvictionReason.CACHE_FULL);    }  }}  }
class C{  public String toString(){  return instanceName(value) + "=" + super.toString();}  }
class C{  public boolean cares(IGame.Phase phase){  if (phase == IGame.Phase.PHASE_FIRING) {    return true;  }  return false;}  }
class C{  private Identifier(String name){  this.name=name;  this.ipos=name.indexOf(INNERCLASS_PREFIX);}  }
class C{  @SuppressWarnings("synthetic-access") @Override public Iterator<E> iterator(){  return new ArrayDequeIterator<E>();}  }
class C{  protected void createDefaultVMDeathRequest(){}  }
class C{  protected SnapshotStore createSnapshotStore(){  Storage storage=Storage.builder().withStorageLevel(StorageLevel.MEMORY).build();  return new SnapshotStore("test",storage,new Serializer());}  }
class C{  @SuppressWarnings("unchecked") public synchronized Vertex findByName(String name){  if (name == null) {    return null;  }  Query query=this.entityManager.createNamedQuery("findVertexByName");  setHints(query);  query.setParameter("name",name);  List<Vertex> result=query.getResultList();  if (result.isEmpty()) {    return null;  } else {    return result.get(0);  }}  }
class C{  @Override public void exec(Result<Object> result,Object[] args){  TableKelp tableKelp=_table.getTableKelp();  RowCursor minCursor=tableKelp.cursor();  RowCursor maxCursor=tableKelp.cursor();  minCursor.clear();  maxCursor.setKeyMax();  _whereKraken.fillMinCursor(minCursor,args);  _whereKraken.fillMaxCursor(minCursor,args);  EnvKelp whereKelp=new EnvKelp(_whereKelp,args);  _table.notifyOwner(minCursor.getKey());  result.ok(null);}  }
class C{  public synchronized void playOrPrepare(String path,int seekTo,String title,TranscriptModel trModel,DownloadEntry video,boolean prepareOnly){  isPrepared=false;  if (!isScreenLandscape()) {    exitFullScreen();  }  try {    player.reset();  } catch (  Exception e) {    logger.error(e);  }  if (video != null) {    this.videoEntry=video;  }  if (trModel != null) {    this.transcript=trModel;    transcriptManager.downloadTranscriptsForVideo(trModel);  }  requestAudioFocus();  try {    if (video.isVideoForWebOnly) {      showVideoNotAvailable(VideoNotPlayMessageType.IS_VIDEO_ONLY_ON_WEB);      path="";    } else {      showProgress();      if (path == null || path.trim().length() == 0) {        showVideoNotAvailable(VideoNotPlayMessageType.IS_VIDEO_MESSAGE_DISPLAYED);      } else {        hideVideoNotPlayInfo(VideoNotPlayMessageType.IS_VIDEO_MESSAGE_DISPLAYED);      }    }    this.transcript=trModel;    player.setLMSUrl(video.lmsUrl);    player.setVideoTitle(title);    logger.debug("playing [seek=" + seekTo + "]: "+ path);    if (prepareOnly)     player.setUri(path,seekTo); else     player.setUriAndPlay(path,seekTo);  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  protected int findOffsetToCharactersInString(char[] string,int start){  int stringLength=string.length;  int end=getEndOffset();  Segment seg=new Segment();  try {    getDocument().getText(start,end - start,seg);  } catch (  BadLocationException ble) {    return -1;  }  for (int counter=seg.offset, maxCounter=seg.offset + seg.count; counter < maxCounter; counter++) {    char currentChar=seg.array[counter];    for (int subCounter=0; subCounter < stringLength; subCounter++) {      if (currentChar == string[subCounter])       return counter - seg.offset + start;    }  }  return -1;}  }
class C{  public CFunctionSelectionDialog(final Window owner,final IDatabase database){  super(owner,"Please select a function",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(database,"IE01572: Database argument can not be null");  setLayout(new BorderLayout());  new CDialogEscaper(this);  m_panel=new CFunctionSelectionPanel(database,new InternalActionProvider());  add(new JScrollPane(m_panel));  add(new CPanelTwoButtons(new InternalListener(),"OK","Cancel"),BorderLayout.SOUTH);  setSize(500,400);}  }
class C{  public final void writeFloat(float v) throws java.io.IOException {  return;}  }
class C{  private static String hextetsToIPv6String(int[] hextets){  StringBuilder buf=new StringBuilder(39);  boolean lastWasNumber=false;  for (int i=0; i < hextets.length; i++) {    boolean thisIsNumber=hextets[i] >= 0;    if (thisIsNumber) {      if (lastWasNumber) {        buf.append(':');      }      buf.append(Integer.toHexString(hextets[i]));    } else {      if (i == 0 || lastWasNumber) {        buf.append("::");      }    }    lastWasNumber=thisIsNumber;  }  return buf.toString();}  }
class C{  private void arrangeAgentDeparture(final MobsimAgent agent){  double now=this.getSimTimer().getTimeOfDay();  Id<Link> linkId=agent.getCurrentLinkId();  Gbl.assertIf(linkId != null);  events.processEvent(new PersonDepartureEvent(now,agent.getId(),linkId,agent.getMode()));  for (  DepartureHandler departureHandler : this.departureHandlers) {    if (departureHandler.handleDeparture(now,agent,linkId)) {      return;    }  }  log.warn("no departure handler wanted to handle the departure of agent " + agent.getId());}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0);}  }
class C{  public static List<String> find(String staticResourcesFolder) throws Exception {  CodeSource src=JarUtil.class.getProtectionDomain().getCodeSource();  List<String> staticResources=new ArrayList<>();  if (src != null) {    URL jar=src.getLocation();    try (ZipInputStream zip=new ZipInputStream(jar.openStream())){      ZipEntry ze;      while ((ze=zip.getNextEntry()) != null) {        String entryName=ze.getName();        if (entryName.startsWith(staticResourcesFolder) && isResource(entryName)) {          staticResources.add(entryName);        }      }    }   }  return staticResources;}  }
class C{  public void reset(){  numRecords=0;  vpX=0;  vpY=0;  vpW=1000;  vpH=1000;  scaleX=1;  scaleY=1;  scaleXY=1f;  inch=84;  records=new ArrayList(20);}  }
class C{  public VectorClock(){  this(new ArrayList<ClockEntry>(0),System.currentTimeMillis());}  }
class C{  public ValueTick(double value,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  this(TickType.MAJOR,value,label,textAnchor,rotationAnchor,angle);  this.value=value;}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position base,Position tip,double arrowLength,Angle arrowAngle){  Globe globe=dc.getGlobe();  Vec4 ptA=globe.computePointFromPosition(base);  Vec4 ptB=globe.computePointFromPosition(tip);  Vec4 parallel=ptA.subtract3(ptB);  Vec4 surfaceNormal=globe.computeSurfaceNormalAtPoint(ptB);  Vec4 perpendicular=surfaceNormal.cross3(parallel);  double finalArrowLength=arrowLength * parallel.getLength3();  double arrowHalfWidth=finalArrowLength * arrowAngle.tanHalfAngle();  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  parallel=parallel.normalize3().multiply3(finalArrowLength);  Vec4 vertex1=ptB.add3(parallel).add3(perpendicular);  Vec4 vertex2=ptB.add3(parallel).subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,vertex1,vertex2,ptB);}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.029 -0500",hash_original_method="CF4D8222D8388EE49D3DF4DFFECBAFE7",hash_generated_method="48266E6E7D0F6013222BC8FE364E303A") public static void fill(int[] array,int start,int end,int value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  public Matrix4x3f reflection(Vector3fc normal,Vector3fc point){  return reflection(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  final public void paintComponent(Graphics g,boolean background){  int clipX=g.getClipX();  int clipY=g.getClipY();  int clipW=g.getClipWidth();  int clipH=g.getClipHeight();  Container parent=getParent();  int translateX=0;  int translateY=0;  while (parent != null) {    translateX+=parent.getX();    translateY+=parent.getY();    if (parent.isScrollableX()) {      translateX-=parent.getScrollX();    }    if (parent.isScrollableY()) {      translateY-=parent.getScrollY();    }    int parentX=parent.getAbsoluteX() + parent.getScrollX();    if (isRTL()) {      parentX+=parent.getSideGap();    }    g.clipRect(parentX,parent.getAbsoluteY() + parent.getScrollY(),parent.getWidth() - parent.getSideGap(),parent.getHeight() - parent.getBottomGap());    parent=parent.getParent();  }  g.clipRect(translateX + getX(),translateY + getY(),getWidth(),getHeight());  if (background) {    paintBackgrounds(g);  }  g.translate(translateX,translateY);  paintInternal(g);  g.translate(-translateX,-translateY);  paintGlassImpl(g);  g.setClip(clipX,clipY,clipW,clipH);}  }
class C{  public ResAllocsBuilder withMemory(double memory){  this.memory=memory;  return this;}  }
class C{  public static byte[] gzip(String input){  FastByteArrayOutputStream baos=new FastByteArrayOutputStream();  PGZIPOutputStream gzos=null;  try {    gzos=new PGZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  IOException e) {    MainUtil.handleError(e);  } finally {    if (gzos != null)     try {      gzos.close();    } catch (    IOException ignore) {    }  }  return baos.toByteArray();}  }
class C{  public ConcurrentWeakValueCacheWithBatchedUpdates(){  this(16);}  }
class C{  public void resetStats(){  gameSchedule=new ArrayList<Game>();  gameOOCSchedule0=null;  gameOOCSchedule4=null;  gameOOCSchedule9=null;  gameWinsAgainst=new ArrayList<Team>();  gameWLSchedule=new ArrayList<String>();  confChampion="";  semiFinalWL="";  natChampWL="";  wins=0;  losses=0;  teamPoints=0;  teamOppPoints=0;  teamYards=0;  teamOppYards=0;  teamPassYards=0;  teamRushYards=0;  teamOppPassYards=0;  teamOppRushYards=0;  teamTODiff=0;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system,CacheVmConfig config) throws AdminException {  super(system,config);  initializeMBean();}  }
class C{  public ChartViewer(JFreeChart chart,boolean contextMenuEnabled){  this.chart=chart;  getStyleClass().add("chart-control");  setContextMenu(createContextMenu());  getContextMenu().setOnShowing(null);  getContextMenu().setOnHiding(null);  this.tooltipEnabled=true;  this.chartMouseListeners=new ArrayList<>();}  }
class C{  protected void updateParam(){  double err=.01;  double ntarg=Math.ceil(timescale / meanIET);  double ee=1;  double alphadiff=.1;  int ob=0;  double fstable;  double fnzero;  double fnone;  double eezero;  double eeone;  double A;  if (meanIET > (double)timescale) {    System.out.printf("meanIET %f > %d timescale\n",meanIET,timescale);    return;  }  if (meanIET == 0) {    System.out.printf("Mean IET == 0\n");    return;  }  if (meanENC == 0) {    System.out.printf("Mean ENC == 0\n");    return;  }  while (ee != err) {    A=Math.pow(1 + alpha,meanENC + 1);    fstable=alpha / (A - 1);    fnzero=(alpha / A) * (1 - Math.pow(A,-ntarg)) / (1 - 1 / A);    fnone=fnzero + 1 / (Math.pow(A,ntarg));    eezero=Math.abs(fnzero - fstable);    eeone=Math.abs(fnone - fstable);    ee=Math.max(eezero,eeone);    if (ee > err) {      if (ob == 2) {        alphadiff=alphadiff / 2.0;      }      ob=1;      alpha=alpha + alphadiff;    } else {      if (ee < (err - err * 0.001)) {        if (ob == 1) {          alphadiff=alphadiff / 2.0;        }        ob=2;        alpha=alpha - alphadiff;        if ((alpha <= 0) | (((1 + alpha) - 1) == 0)) {          alpha=alphadiff;          alphadiff=alphadiff / 2.0;          ob=0;        }      } else {        ee=err;      }    }  }  probs.setAlpha(alpha);}  }
class C{  public static void hideFab(FloatingActionButton fab){  fab.hide();  fab.animate().translationY(fab.getHeight() + 100).setInterpolator(new AccelerateInterpolator(2)).start();}  }
class C{  public void init(MCMCOptions options,Likelihood likelihood,Prior prior,OperatorSchedule schedule,Logger[] loggers){  init(options,likelihood,prior,schedule,loggers,new MarkovChainDelegate[0]);}  }
class C{  public MissingViewITCase(String name){  super(name);}  }
class C{  protected static long lastCommitTime(final BigdataSailRepository repo){  final long systemTime=System.currentTimeMillis();  log.debug(null);  MillisecondTimestampFactory.setLowerBound(Long.MAX_VALUE - 100);  final long lastCommitTime=repo.getDatabase().getIndexManager().getLastCommitTime();  final long lowerBound;  if (lastCommitTime > 0l && systemTime < lastCommitTime) {    log.info(null);    lowerBound=lastCommitTime;  } else {    log.debug(null);    lowerBound=systemTime;  }  MillisecondTimestampFactory.setLowerBound(lowerBound);  return lowerBound;}  }
class C{  @NotNull public List<MatchResult> matchByDownUp(PsiElement element,MatchOptions options) throws MalformedPatternException, UnsupportedPatternException {  return super.matchByDownUp(element,options);}  }
class C{  public static String u2or4(int v){  if (v == (char)v) {    return u2(v);  } else {    return u4(v);  }}  }
class C{  public String seasonSummaryStr(){  String summary="Your team, " + name + ", finished the season ranked #"+ rankTeamPollScore+ " with "+ wins+ " wins and "+ losses+ " losses.";  int expectedPollFinish=100 - teamPrestige;  int diffExpected=expectedPollFinish - rankTeamPollScore;  int oldPrestige=teamPrestige;  int newPrestige=oldPrestige;  if (teamPrestige > 45 || diffExpected > 0) {    newPrestige=(int)Math.pow(teamPrestige,1 + (float)diffExpected / 1500);  }  if (natChampWL.equals("NCW")) {    summary+="\n\nYou won the National Championship! Recruits want to play for winners and you have proved that you are one. You gain +3 prestige!";  }  if ((newPrestige - oldPrestige) > 0) {    summary+="\n\nGreat job coach! You exceeded expectations and gained " + (newPrestige - oldPrestige) + " prestige! This will help your recruiting.";  } else   if ((newPrestige - oldPrestige) < 0) {    summary+="\n\nA bit of a down year, coach? You fell short expectations and lost " + (oldPrestige - newPrestige) + " prestige. This will hurt your recruiting.";  } else {    summary+="\n\nWell, your team performed exactly how many expected. This won't hurt or help recruiting, but try to improve next year!";  }  if (wonRivalryGame && (teamPrestige - league.findTeamAbbr(rivalTeam).teamPrestige < 20)) {    summary+="\n\nFuture recruits were impressed that you won your rivalry game. You gained 2 prestige.";  } else   if (!wonRivalryGame && (league.findTeamAbbr(rivalTeam).teamPrestige - teamPrestige < 20 || name.equals("American Samoa"))) {    summary+="\n\nSince you couldn't win your rivalry game, recruits aren't excited to attend your school. You lost 2 prestige.";  } else   if (wonRivalryGame) {    summary+="\n\nGood job winning your rivalry game, but it was expected given the state of their program. You gain no prestige for this.";  } else {    summary+="\n\nYou lost your rivalry game, but this was expected given your rebuilding program. You lost no prestige for this.";  }  return summary;}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String creekHeader=null;  String ttControlHeader=null;  String eacOutputHeader=null;  String dfcOutputHeader=null;  String gtcOutputHeader=null;  String ttpOutputHeader=null;  WhiteboxRaster dem;  WhiteboxRaster creek;  WhiteboxRaster ttControl=null;  WhiteboxRaster eacOutput;  WhiteboxRaster dfcOutput;  WhiteboxRaster gtcOutput;  WhiteboxRaster ttpOutput;  int numCols, numRows;  double gridRes;  boolean blnTTControl=true;  int flowIndex;  List<FlowCell> flowPath=new ArrayList<>();  int c;  int x, y;  int xn, yn;  double p;  int maxDirection;  double grad, maxGrad;  double deltaElev;  double deltaXY;  int radius;  float maxRadius=200;  int maxX=0, maxY=0;  double ttControlMean;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double[] dd=new double[]{1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2)};  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      creekHeader=args[i];    } else     if (i == 2) {      ttControlHeader=args[i];      if (ttControlHeader.toLowerCase().contains("not specified")) {        blnTTControl=false;      }    } else     if (i == 3) {      eacOutputHeader=args[i];    } else     if (i == 4) {      dfcOutputHeader=args[i];    } else     if (i == 5) {      gtcOutputHeader=args[i];    } else     if (i == 6) {      ttpOutputHeader=args[i];    }  }  if ((demHeader == null) || (creekHeader == null) || (eacOutputHeader == null)|| (dfcOutputHeader == null)|| (gtcOutputHeader == null)|| (ttpOutputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    creek=new WhiteboxRaster(creekHeader,"r");    if (blnTTControl == true) {      ttControl=new WhiteboxRaster(ttControlHeader,"r");    }    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    eacOutput=new WhiteboxRaster(eacOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    eacOutput.setPreferredPalette("blueyellow.pal");    eacOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    eacOutput.setZUnits("dimensionless");    dfcOutput=new WhiteboxRaster(dfcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    dfcOutput.setPreferredPalette("blueyellow.pal");    dfcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    dfcOutput.setZUnits("dimensionless");    gtcOutput=new WhiteboxRaster(gtcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    gtcOutput.setPreferredPalette("blueyellow.pal");    gtcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    gtcOutput.setZUnits("dimensionless");    ttpOutput=new WhiteboxRaster(ttpOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    ttpOutput.setPreferredPalette("blueyellow.pal");    ttpOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    ttpOutput.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (creek.getValue(row,col) <= 0) {            eacOutput.setValue(row,col,-1048);          }        } else {          eacOutput.setValue(row,col,noData);          dfcOutput.setValue(row,col,noData);          gtcOutput.setValue(row,col,noData);          ttpOutput.setValue(row,col,noData);        }      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (eacOutput.getValue(row,col) == -1048) {          flowIndex=-1;          flowPath=new ArrayList<>();          x=col;          y=row;          while (eacOutput.getValue(y,x) == -1048) {            flowIndex=flowIndex + 1;            flowPath.add(new FlowCell(y,x));            p=dem.getValue(y,x);            maxDirection=-1;            maxGrad=0;            for (c=0; c < 8; c++) {              xn=x + xd[c];              yn=y + yd[c];              if (dem.getValue(yn,xn) != noData) {                grad=(p - dem.getValue(yn,xn)) / (dd[c] * gridRes);                if (grad > maxGrad) {                  maxGrad=grad;                  maxDirection=c;                }              }            }            if (maxDirection > -1) {              x=x + xd[maxDirection];              y=y + yd[maxDirection];            } else {              radius=1;              do {                for (int i=-radius; i <= radius; i++) {                  for (int j=-radius; j <= radius; j++) {                    if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                      xn=x + i;                      yn=y + j;                      if (dem.getValue(yn,xn) != noData && dem.getValue(yn,xn) < p) {                        grad=(p - dem.getValue(yn,xn)) / (Math.sqrt(i * i + j * j) * gridRes);                        if (grad > maxGrad) {                          maxGrad=grad;                          maxX=xn;                          maxY=yn;                        }                      }                    }                  }                }                radius=radius + 1;              } while (maxGrad == 0 & radius <= maxRadius);              if (maxGrad > 0) {                x=maxX;                y=maxY;              } else {                eacOutput.setValue(y,x,noData);                dfcOutput.setValue(y,x,noData);                gtcOutput.setValue(y,x,noData);                ttpOutput.setValue(y,x,noData);              }            }          }          if (eacOutput.getValue(y,x) == noData) {            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);          } else {            deltaElev=dem.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex) - dem.getValue(y,x);            deltaXY=Math.sqrt(Math.pow(flowPath.get(flowIndex).rowIndex - y,2) + Math.pow(flowPath.get(flowIndex).columnIndex - x,2)) * gridRes;            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,eacOutput.getValue(y,x) + deltaElev);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,dfcOutput.getValue(y,x) + deltaXY);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,(gtcOutput.getValue(y,x) * dfcOutput.getValue(y,x) + deltaElev) / dfcOutput.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex));            if (blnTTControl == false) {              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / deltaElev);            } else {              ttControlMean=(ttControl.getValue(y,x) + ttControl.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex)) / 2;              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));            }          }          for (int i=flowIndex - 1; i >= 0; i--) {            if (eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) == noData) {              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);            } else {              deltaElev=dem.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) - dem.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex);              deltaXY=Math.sqrt(Math.pow(flowPath.get(i).rowIndex - flowPath.get(i + 1).rowIndex,2) + Math.pow(flowPath.get(i).columnIndex - flowPath.get(i + 1).columnIndex,2)) * gridRes;              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaXY);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,(gtcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) * dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev) / dfcOutput.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex));              if (blnTTControl == false) {                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / deltaElev);              } else {                ttControlMean=(ttControl.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) + ttControl.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex)) / 2;                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    eacOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    eacOutput.addMetadataEntry("Created on " + new Date());    dfcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    dfcOutput.addMetadataEntry("Created on " + new Date());    gtcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    gtcOutput.addMetadataEntry("Created on " + new Date());    ttpOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    ttpOutput.addMetadataEntry("Created on " + new Date());    dem.close();    creek.close();    if (blnTTControl == true) {      ttControl.close();    }    eacOutput.close();    dfcOutput.close();    gtcOutput.close();    ttpOutput.close();    returnData(eacOutputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean addTotalLength(final DynamicLength dynamicLength){switch (dynamicLength.getMeasure()) {case PIXEL:    this.totalFixedWidth+=dynamicLength.getValue();  break;case PERCENTAGE:this.totalPerctWidth+=dynamicLength.getValue();}return (dynamicLength.getValue() != 0);}  }
class C{  public ExecutionScope basicGetSuperScope(){  return superScope;}  }
class C{  public DocumentFragment rtree(XPathContext support){  DocumentFragment docFrag=null;  int result=rtf();  if (DTM.NULL == result) {    DTM frag=support.createDocumentFragment();    frag.appendTextChild(str());    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  } else {    DTM frag=support.getDTM(result);    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());  }  return docFrag;}  }
class C{  public static void dumpHex(StringBuilder sb,byte[] b){  for (int i=0; i < b.length; ++i) {    if (i % 16 == 0) {      sb.append(Integer.toHexString((i & 0xFFFF) | 0x10000).substring(1,5) + " - ");    }    sb.append(Integer.toHexString((b[i] & 0xFF) | 0x100).substring(1,3) + " ");    if (i % 16 == 15 || i == b.length - 1) {      int j;      for (j=16 - i % 16; j > 1; --j)       sb.append("   ");      sb.append(" - ");      int start=(i / 16) * 16;      int end=(b.length < i + 1) ? b.length : (i + 1);      for (j=start; j < end; ++j)       if (b[j] >= 32 && b[j] <= 126)       sb.append((char)b[j]); else       sb.append(".");      sb.append("\n");    }  }}  }
class C{  public Entity basicGetModel(){  return model;}  }
class C{  public RuleSet[] splitIntoTwo(final EvolutionState state,final int thread,RuleSet[] sets,double prob){  for (int i=0; i < numRules; i++)   if (state.random[thread].nextBoolean(prob))   sets[0].addRule((Rule)(rules[i].clone())); else   sets[1].addRule((Rule)(rules[i].clone()));  return sets;}  }
class C{  public boolean isPrimitive(){  return rawClass.isPrimitive();}  }
class C{  public void writeTN93Model(int num,XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix(num);  writer.writeComment("The TN93 substitution model");  writer.writeOpenTag(NucModelType.TN93.getXMLName(),new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "tn93")});  writer.writeOpenTag(HKYParser.FREQUENCIES);  writeFrequencyModelDNA(writer,model,num);  writer.writeCloseTag(HKYParser.FREQUENCIES);  writeParameter(num,TN93Parser.KAPPA1,"kappa1",model,writer);  writeParameter(num,TN93Parser.KAPPA2,"kappa2",model,writer);  writer.writeCloseTag(NucModelType.TN93.getXMLName());}  }
class C{  @Override public void clear() throws IOException {  if (this.server == null)   return;synchronized (this.server) {    try {      this.server.deleteByQuery(AbstractSolrConnector.CATCHALL_QUERY);      this.server.commit(true,true,false);    } catch (    final Throwable e) {      clearCaches();      throw new IOException(e);    }  }}  }
class C{  private static void verifyDevice(IDevice d,long mac,Short vlan,Integer ip,long swId,int port){  assertNotNull(d);  assertEquals(MacAddress.of(mac),d.getMACAddress());  if (vlan == null)   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(-1)},d.getVlanId()); else   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(vlan)},d.getVlanId());  if (ip == null)   assertArrayEquals(new IPv4Address[]{IPv4Address.of(0)},d.getIPv4Addresses()); else   assertArrayEquals(new IPv4Address[]{IPv4Address.of(ip)},d.getIPv4Addresses());  SwitchPort expectedAp=new SwitchPort(DatapathId.of(swId),OFPort.of(port));  assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints());}  }
class C{  private ByteBuffer allocateAppBuff(){  int netBufSize=sslEngine.getSession().getPacketBufferSize() + 50;  int appBufSize=Math.max(sslEngine.getSession().getApplicationBufferSize() + 50,netBufSize * 2);  ByteBuffer buf=ByteBuffer.allocate(appBufSize);  buf.order(order);  return buf;}  }
class C{  public static double logpdf(double x,double mu,double sigma,double lambda){  final double dx=x - mu;  final double lss=lambda * sigma * sigma;  final double erfc=NormalDistribution.erfc((lss - dx) / (sigma * MathUtil.SQRT2));  return erfc > 0 ? Math.log(.5 * lambda * erfc) + lambda * (lss * .5 - dx) : Double.NEGATIVE_INFINITY;}  }
class C{  public void applyPattern(String pattern){  ndf.applyPattern(pattern);}  }
class C{  public static boolean isRunningJavaWebStart(){  boolean hasJNLP=false;  try {    Class.forName("javax.jnlp.ServiceManager");    hasJNLP=true;  } catch (  ClassNotFoundException ex) {    hasJNLP=false;  }  return hasJNLP;}  }
class C{  private void acceptConnection() throws IOException {  if (mServerSocket == null) {    throw new IOException("ServerSocket is null, not trying to accept().");  } else   if (!mBluetoothAdapter.isEnabled()) {    throw new IOException("Bluetooth adapter is disabled, not trying to accept().");  }  log.info("Calling mServerSocket.accept()");  mSocket=mServerSocket.accept();  log.info("Accepted socket from " + mSocket.getRemoteDevice());  log.info("Accepted socket connected? " + mSocket.isConnected());  MurmurService.direction=-1;  MurmurService.remoteAddress=mSocket.getRemoteDevice().getAddress();  mExchange=new CryptographicExchange(mContext,mSocket.getRemoteDevice().getAddress(),mSocket.getInputStream(),mSocket.getOutputStream(),false,FriendStore.getInstance(mContext),MessageStore.getInstance(mContext),mContext.mExchangeCallback);  (new Thread(mExchange)).start();}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  private TrainingExample makeTrainingExample(final Sentence sentence){  if (sentence.getLength() > dataParameters.maxTrainingSentenceLength) {    return null;  }  try {    final AtomicDouble beta=new AtomicDouble(dataParameters.supertaggerBeam);    final CompressedChart completeChart=parseSentence(sentence.getWords(),beta,Training.ROOT_CATEGORIES);    if (completeChart == null) {      return null;    }    final CompressedChart smallChart=parseSentence(sentence.getWords(),new AtomicDouble(Math.max(dataParameters.supertaggerBeamForGoldCharts,beta.doubleValue())),Training.ROOT_CATEGORIES);    if (smallChart == null) {      final StringBuilder message=new StringBuilder();      for (      final String word : sentence.getWords()) {        message.append(word + " ");      }      message.append("\n");      for (      final Category supertag : sentence.getLexicalCategories()) {        message.append(supertag + " ");      }      return null;    }    final CompressedChart goldChart=new GoldChartFinder(smallChart,dataParameters.usingCCGbankDependencies).goldChart(sentence,cutoffsDictionary);    if (goldChart == null) {      return null;    }    final TrainingExample ex=new TrainingExample(completeChart,goldChart,posTagger.tag(sentence.getInputWords()),cutoffsDictionary);    return ex;  } catch (  final Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public static String[] shuffleUniformly(final String[] inArray){  int length=inArray.length;  String[] shuffledArray=inArray;  for (int i=0; i < length; i++) {    int r=i + rnd.nextInt(length - i);    String tempVal=shuffledArray[i];    shuffledArray[i]=shuffledArray[r];    shuffledArray[r]=tempVal;  }  return shuffledArray;}  }
class C{  public static String toMapString(Map self,int maxSize){  return (self == null) ? "null" : InvokerHelper.toMapString(self,maxSize);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args){  int n=Integer.parseInt(args[0]);  if (args.length == 1) {    for (int i=0; i < n; i++) {      double x=StdRandom.uniform();      StdOut.println(x);    }  } else   if (args.length == 3) {    double lo=Double.parseDouble(args[1]);    double hi=Double.parseDouble(args[2]);    for (int i=0; i < n; i++) {      double x=StdRandom.uniform(lo,hi);      StdOut.printf("%.2f\n",x);    }  } else {    throw new IllegalArgumentException("Invalid number of arguments");  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  void findFixed(WXDomObject obj){  WXDomObject rootDom=mRegistry.get(WXDomObject.ROOT);  if (rootDom == null) {    return;  }  if (obj.isFixed()) {    rootDom.add2FixedDomList(obj.getRef());  }  int childrenCount=obj.childCount();  if (childrenCount > 0) {    for (int i=0; i < childrenCount; i++) {      findFixed(obj.getChild(i));    }  }}  }
class C{  private ConsistencyGroupCopyUID addCopyToCG(ConsistencyGroupUID cgUID,Set<RPSite> allSites,CreateCopyParams copyParams,ClusterUID clusterUid,List<CreateRSetParams> rSets,RecoverPointCGCopyType copyType) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, FunctionalAPIValidationException_Exception {  boolean isProduction=copyType == RecoverPointCGCopyType.PRODUCTION;  String copyTypeStr=copyType.toString();  logger.info(String.format("Adding new copy %s to cg",copyParams.getName()));  ConsistencyGroupCopyUID copyUid=new ConsistencyGroupCopyUID();  ConsistencyGroupCopySettingsParam copySettingsParam=new ConsistencyGroupCopySettingsParam();  GlobalCopyUID globalCopyUID=new GlobalCopyUID();  globalCopyUID.setClusterUID(clusterUid);  globalCopyUID.setCopyUID(copyType.getCopyNumber());  copyUid.setGroupUID(cgUID);  copyUid.setGlobalCopyUID(globalCopyUID);  copySettingsParam.setCopyName(copyParams.getName());  copySettingsParam.setCopyPolicy(null);  copySettingsParam.setEnabled(false);  copySettingsParam.setGroupCopy(copyUid);  copySettingsParam.setProductionCopy(isProduction);  copySettingsParam.setTransferEnabled(false);  logger.info("Add Production copy (no validation): " + copyParams.toString());  functionalAPI.addConsistencyGroupCopy(copySettingsParam);  for (  CreateVolumeParams journalVolume : copyParams.getJournals()) {    logger.info("Adding Journal : " + journalVolume.toString() + " for Production copy : "+ copyParams.getName());    functionalAPI.addJournalVolume(copyUid,RecoverPointUtils.getDeviceID(allSites,journalVolume.getInternalSiteName(),journalVolume.getWwn()));  }  if (rSets != null) {    ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(cgUID);    for (    CreateRSetParams rSet : rSets) {      ReplicationSetUID rSetUid=null;      if (rSet != null && rSet.getName() != null && !rSet.getName().isEmpty()) {        for (        ReplicationSetSettings rSetSetting : groupSettings.getReplicationSetsSettings()) {          if (rSetSetting.getReplicationSetName().equalsIgnoreCase(rSet.getName())) {            rSetUid=rSetSetting.getReplicationSetUID();            break;          }        }      }      if (rSetUid != null) {        for (        CreateVolumeParams volume : rSet.getVolumes()) {          if ((isProduction && volume.isProduction()) || (!isProduction && !volume.isProduction())) {            logger.info(String.format("Adding %s copy volume : %s",copyTypeStr,copyParams.toString()));            functionalAPI.addUserVolume(copyUid,rSetUid,RecoverPointUtils.getDeviceID(allSites,volume.getInternalSiteName(),volume.getWwn()));          }        }      }    }  }  return copyUid;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  ArrayList<Integer> list=new ArrayList<Integer>();  System.out.print("Enter 10 integers: ");  for (int i=0; i < 10; i++) {    list.add(input.nextInt());  }  removeDuplicate(list);  System.out.print("The distinct integers are ");  for (int i=0; i < list.size(); i++) {    System.out.print(list.get(i) + " ");  }  System.out.println();}  }
class C{  static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException {  int data=in.readInt();  Month month=Month.of(data >>> 28);  int dom=((data & (63 << 22)) >>> 22) - 32;  int dowByte=(data & (7 << 19)) >>> 19;  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);  int timeByte=(data & (31 << 14)) >>> 14;  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];  int stdByte=(data & (255 << 4)) >>> 4;  int beforeByte=(data & (3 << 2)) >>> 2;  int afterByte=(data & 3);  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);}  }
class C{  void createEdgeEndForNext(Edge edge,List l,EdgeIntersection eiCurr,EdgeIntersection eiNext){  int iNext=eiCurr.segmentIndex + 1;  if (iNext >= edge.getNumPoints() && eiNext == null)   return;  Coordinate pNext=edge.getCoordinate(iNext);  if (eiNext != null && eiNext.segmentIndex == eiCurr.segmentIndex)   pNext=eiNext.coord;  EdgeEnd e=new EdgeEnd(edge,eiCurr.coord,pNext,new Label(edge.getLabel()));  l.add(e);}  }
class C{  public MultiPercolateRequestBuilder add(PercolateRequestBuilder percolateRequestBuilder){  request.add(percolateRequestBuilder);  return this;}  }
class C{  public Coin plus(final Coin value){  return add(value);}  }
class C{  public void append(String name,Object val){  this.append(name,val,ValueFilterType.EQUALS);}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var){  return addUniform(var.getVarString(),var.getDataType());}  }
class C{  public X509AttributeCertificateHolder(AttributeCertificate attrCert){  this.attrCert=attrCert;  this.extensions=attrCert.getAcinfo().getExtensions();}  }
class C{  public static boolean isQueryRunning(ISearchQuery query){  if (query == null) {    throw new IllegalArgumentException("query must not be null");  }  return InternalSearchUI.getInstance().isQueryRunning(query);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.PROPERTY__PRESENCE:    return getPresence();case DatatypePackage.PROPERTY__MULTIPLICITY:  return isMultiplicity();case DatatypePackage.PROPERTY__NAME:return getName();case DatatypePackage.PROPERTY__DESCRIPTION:return getDescription();case DatatypePackage.PROPERTY__CONSTRAINT_RULE:return getConstraintRule();case DatatypePackage.PROPERTY__TYPE:return getType();case DatatypePackage.PROPERTY__PROPERTY_ATTRIBUTES:return getPropertyAttributes();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void updateTotalTime(Context context,RemoteViews remoteViews,int[] ids,TripStatistics tripStatistics,boolean isRecording,boolean isPaused){  if (isRecording && !isPaused && tripStatistics != null) {    long time=tripStatistics.getTotalTime() + System.currentTimeMillis() - tripStatistics.getStopTime();    remoteViews.setChronometer(ids[3],SystemClock.elapsedRealtime() - time,null,true);    remoteViews.setViewVisibility(ids[1],View.GONE);    remoteViews.setViewVisibility(ids[2],View.GONE);    remoteViews.setViewVisibility(ids[3],View.VISIBLE);  } else {    remoteViews.setChronometer(ids[3],SystemClock.elapsedRealtime(),null,false);    remoteViews.setViewVisibility(ids[1],View.VISIBLE);    remoteViews.setViewVisibility(ids[2],View.GONE);    remoteViews.setViewVisibility(ids[3],View.GONE);    String totalTime=tripStatistics == null ? context.getString(R.string.value_unknown) : StringUtils.formatElapsedTime(tripStatistics.getTotalTime());    remoteViews.setTextViewText(ids[0],context.getString(R.string.stats_total_time));    remoteViews.setTextViewText(ids[1],totalTime);  }}  }
class C{  private List<FahrtEvent> readFahrtData(String[] fahrtDataFilenames){  List<FahrtEvent> fahrtData=new LinkedList<FahrtEvent>();  try {    for (    String filename : fahrtDataFilenames) {      LinkedList<FahrtEvent> tempData=ReadRBLfahrt.readFahrtEvents(filename);      fahrtData.addAll(tempData);    }    log.info("Finished reading input data...");    return fahrtData;  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public boolean isAnyTargetComponentInTest(Geometry testGeom){  PointLocator locator=new PointLocator();  for (Iterator i=representativePts.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    if (locator.intersects(p,testGeom))     return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOfRange2(T[] original,int from,int to){  return copyOfRange2(original,from,to,(Class<T[]>)original.getClass());}  }
class C{  private TextClusterData findCluster(String text,Date timeStamp,boolean isTrace) throws AdeException {  boolean pathsAreOneToken=false;  if (m_messageTextPreprocessor != null) {    pathsAreOneToken=m_messageTextPreprocessor.treatPathsAsOneToken();  }  Word[] words;  if (pathsAreOneToken) {    words=LevenshteinTextSummary.prepareStringToken(text);  } else {    words=LevenshteinTextSummary.prepareString(text);  }  final Iterator<TextClusterData> e=m_clustersData.iterator();  while (e.hasNext()) {    final TextClusterData cluster=e.next();    final String clusterRepresentative=cluster.getTextRepresentative();    Word[] clusterRepresentativeWords;    if (pathsAreOneToken) {      clusterRepresentativeWords=LevenshteinTextSummary.prepareStringToken(clusterRepresentative);    } else {      clusterRepresentativeWords=LevenshteinTextSummary.prepareString(clusterRepresentative);    }    final int threshold=m_thresholdSetter.getThreshold(clusterRepresentativeWords.length,words.length);    final boolean areClose=areClose(clusterRepresentativeWords,words,threshold,isTrace);    boolean updatedLastObserved;    if (areClose) {      updatedLastObserved=cluster.setLastObserved(timeStamp);      e.remove();      m_clustersData.push(cluster);      if (m_updateDataStore && updatedLastObserved) {        m_dsTextClustering.updateTextClusterTimeStamp(cluster.getClusterId(),cluster.getLastObserved());      }      return cluster;    }  }  return null;}  }
class C{  static public final int max(int[] list){  if (list.length == 0) {    throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);  }  int max=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] > max)     max=list[i];  }  return max;}  }
class C{  public Event_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_eventType=jcas.getRequiredFeatureDE(casType,"eventType","uima.cas.StringArray",featOkTst);  casFeatCode_eventType=(null == casFeat_eventType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_eventType).getCode();  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_entities=jcas.getRequiredFeatureDE(casType,"entities","uima.cas.FSArray",featOkTst);  casFeatCode_entities=(null == casFeat_entities) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_entities).getCode();  casFeat_arguments=jcas.getRequiredFeatureDE(casType,"arguments","uima.cas.StringArray",featOkTst);  casFeatCode_arguments=(null == casFeat_arguments) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_arguments).getCode();  casFeat_tokens=jcas.getRequiredFeatureDE(casType,"tokens","uima.cas.FSArray",featOkTst);  casFeatCode_tokens=(null == casFeat_tokens) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_tokens).getCode();}  }
class C{  public <E extends RealmModel>RealmResults<E> execute(Realm realm){  if (realm == null || realm.isClosed())   throw new IllegalArgumentException("realm must be non-null and not closed.");  if (!isQueryValid())   return null;  return (RealmResults<E>)RUQExecutor.get(queryClass,this).executeQuery(realm);}  }
class C{  public void caretUpdate(CaretEvent e){  timer.restart();}  }
class C{  public void beforeInsert(int index,byte element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  public static double[] random(int m,double min,double max){  double[] array=new double[m];  for (int i=0; i < m; i++) {    array[i]=min + Random.raw() * (max - min);  }  return array;}  }
class C{  public Ellipsoid(){  this.setUpGeometryCache();}  }
class C{  @Override public String toString(){  if (buffer != null) {    return "Pointer[" + "buffer=" + buffer + ","+ "byteOffset="+ byteOffset+ "]";  } else   if (pointers != null) {    return "Pointer[" + "pointers=" + Arrays.toString(pointers) + ","+ "byteOffset="+ byteOffset+ "]";  } else {    return "Pointer[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "byteOffset="+ byteOffset+ "]";  }}  }
class C{  protected boolean stopBecauseOfExceptions(){  return exception != null;}  }
class C{  @SuppressWarnings("unchecked") public static <TK,FV>void augmentPrefixRuleGrid(RuleGrid<TK,FV> ruleGrid,Sequence<TK> prefix,int sourceInputId,Sequence<TK> sourceSequence,AbstractInferer<TK,FV> inferer,InputProperties inputProperties,boolean handleCompounds){  if (DEBUG)   System.err.println("augmentPrefixRuleGrid");  if (!(inferer.phraseGenerator instanceof DynamicTranslationModel)) {    throw new RuntimeException("Synthetic rule generation requires DynamicTranslationModel");  }  if (DEBUG) {    System.err.printf("DEBUG %d%n",sourceInputId);  }  final List<DynamicTranslationModel<FV>> tmList=new ArrayList<>(2);  tmList.add((DynamicTranslationModel<FV>)inferer.phraseGenerator);  if (inputProperties.containsKey(InputProperty.ForegroundTM)) {    tmList.add((DynamicTranslationModel<FV>)inputProperties.get(InputProperty.ForegroundTM));  }  final String[] featureNames=(String[])inferer.phraseGenerator.getFeatureNames().toArray();  final SymmetricalWordAlignment sym=bidirAlign((Sequence<IString>)sourceSequence,(Sequence<IString>)prefix,tmList,handleCompounds);  if (DEBUG) {    logger.info("M2 alignment: ");    logger.info("src: " + sourceSequence);    logger.info("tgt: " + prefix);    logger.info("sym: " + sym.toString());  }  CoverageSet targetCoverage=new CoverageSet(prefix.size());  CoverageSet prefixSourceCoverage=new CoverageSet(sourceSequence.size());  RuleCounter<TK,FV> ruleCounter=new RuleCounter<>(sourceSequence,prefix,tmList);  List<Set<Sequence<TK>>> existingTargetSides=new ArrayList<>(sourceSequence.size() * MAX_SYNTHETIC_ORDER);  for (int i=0; i < sourceSequence.size() * MAX_SYNTHETIC_ORDER; ++i)   existingTargetSides.add(null);  for (  ConcreteRule<TK,FV> existingRule : ruleGrid) {    int index=existingRule.sourcePosition * MAX_SYNTHETIC_ORDER + existingRule.sourceCoverage.cardinality() - 1;    if (existingTargetSides.get(index) == null)     existingTargetSides.set(index,new HashSet<>());    existingTargetSides.get(index).add(existingRule.abstractRule.target);  }  for (int order=1; order <= MAX_SYNTHETIC_ORDER; ++order) {    for (int i=0, sz=sourceSequence.size() - order; i <= sz; ++i) {      List<RuleBound> rules=extractRules(sym,i,order,MAX_TARGET_ORDER);      for (      RuleBound r : rules) {        Sequence<TK> src=sourceSequence.subsequence(r.fi,r.fj);        Sequence<TK> tgt=prefix.subsequence(r.ei,r.ej);        targetCoverage.set(r.ei,r.ej);        prefixSourceCoverage.set(r.fi,r.fj);        int index=i * MAX_SYNTHETIC_ORDER + order - 1;        Set<Sequence<TK>> matchingTgtSides=existingTargetSides.get(index);        if (matchingTgtSides != null && matchingTgtSides.contains(tgt)) {          if (DEBUG)           System.err.println("skipping extraction of backoff phrase: " + src + " <<>> "+ tgt);          continue;        }        CoverageSet cov=new CoverageSet(sourceSequence.size());        cov.set(r.fi,r.fj);        int[][] e2f=new int[tgt.size()][src.size()];        for (int eIdx=r.ei; eIdx < r.ej; ++eIdx) {          e2f[eIdx - r.ei]=sym.e2f(eIdx).stream().mapToInt(null).toArray();        }        PhraseAlignment alignment=new PhraseAlignment(e2f);        ConcreteRule<TK,FV> syntheticRule=null;        if (src.size() == 1 && tgt.size() == 1) {          int cnt_f=0, cnt_e=0;          double cnt_fe=0.0;          cnt_f=ruleCounter.getFcount(r.fi);          cnt_e=ruleCounter.getEcount(r.ei);          cnt_fe=ruleCounter.getFEcount(r.fi,r.ei);          syntheticRule=SyntheticRules.makeSyntheticRule(src,tgt,cov,featureNames,inferer.scorer,inferer.featurizer,cnt_fe,cnt_e,cnt_f,inputProperties,sourceSequence,sourceInputId,alignment);        } else {          int[] cnt_f=new int[src.size()];          int[] cnt_e=new int[tgt.size()];          double[][] cnt_fe=new double[src.size()][tgt.size()];          for (int f=0; f < src.size(); ++f) {            cnt_f[f]=ruleCounter.getFcount(r.fi + f);            for (int e=0; e < tgt.size(); ++e)             cnt_fe[f][e]=ruleCounter.getFEcount(r.fi + f,r.ei + e);          }          for (int e=0; e < tgt.size(); ++e)           cnt_e[e]=ruleCounter.getEcount(r.ei + e);          syntheticRule=SyntheticRules.makeSyntheticRule(src,tgt,cov,featureNames,inferer.scorer,inferer.featurizer,cnt_fe,cnt_e,cnt_f,inputProperties,sourceSequence,sourceInputId,alignment);        }        ruleGrid.addTgtEntry(syntheticRule,false);        if (DEBUG)         System.err.printf("Ext: %s%n",syntheticRule);      }    }  }  CoverageSet sourceCoverage=new CoverageSet(sourceSequence.size());  final int maxSourceCoverage=Math.min(sourceSequence.size(),prefixSourceCoverage.cardinality() + tmList.get(0).maxLengthSource());  for (int i=0; i < maxSourceCoverage; ++i) {    if (!sym.f2e(i).isEmpty()) {      sourceCoverage.set(i);    }  }  if (targetCoverage.cardinality() != prefix.size()) {    CoverageSet finalTargetCoverage=targetCoverage.clone();    for (int i=targetCoverage.nextClearBit(0); i < prefix.size(); i=targetCoverage.nextClearBit(i + 1)) {      int ei=i;      int ej=targetCoverage.nextSetBit(ei + 1);      if (ej < 0)       ej=prefix.size();      int mid=Math.max(0,Math.min((int)Math.round((ej + ei) / 2.0),sourceSequence.size() - 1));      int rightQuery=sourceCoverage.nextClearBit(mid);      int leftQuery=sourceCoverage.previousClearBit(mid);      int sourceAnchor=-1;      if (leftQuery >= 0 && rightQuery < sourceSequence.size()) {        sourceAnchor=((mid - leftQuery) < (rightQuery - mid)) ? leftQuery : rightQuery;      } else       if (leftQuery >= 0) {        sourceAnchor=leftQuery;      } else       if (rightQuery < sourceSequence.size()) {        sourceAnchor=rightQuery;      }      if (sourceAnchor >= 0) {        int fi=Math.max(0,sourceCoverage.previousSetBit(sourceAnchor - 1) + 1);        int fj=sourceCoverage.nextSetBit(sourceAnchor + 1);        if (fj < 0)         fj=sourceSequence.size();        Sequence<TK> src=sourceSequence.subsequence(fi,fj);        Sequence<TK> tgt=prefix.subsequence(ei,ej);        CoverageSet cov=new CoverageSet(sourceSequence.size());        cov.set(fi,fj);        int[][] e2f=new int[tgt.size()][src.size()];        for (int k=0; k < tgt.size() && k < src.size(); ++k) {          e2f[k]=new int[]{k};        }        PhraseAlignment alignment=new PhraseAlignment(e2f);        final int cnt_f=1, cnt_e=1;        ConcreteRule<TK,FV> syntheticRule=SyntheticRules.makeSyntheticRule(src,tgt,cov,featureNames,inferer.scorer,inferer.featurizer,SYNTHETIC_PROB,cnt_e,cnt_f,inputProperties,sourceSequence,sourceInputId,alignment);        ruleGrid.addTgtEntry(syntheticRule,false);        finalTargetCoverage.set(ei,ej);        if (DEBUG)         System.err.printf("ExtUnk: %s%n",syntheticRule);      }    }    if (finalTargetCoverage.cardinality() != prefix.size()) {      logger.warn("input {}: Incomplete target coverage {}",sourceInputId,finalTargetCoverage);    }  }}  }
class C{  protected void checkKey(Object key){  if (key == null) {    throw new NullPointerException("Key must not be null");  }  if (key instanceof MultiKey == false) {    throw new ClassCastException("Key must be a MultiKey");  }}  }
class C{  public ServerException(String s,Exception ex){  super(s,ex);}  }
class C{  public long updateAndGetPlaytime(String name,long time){  long newPlayedTime=0;  Connection conn=getSQLConnection();  try (Statement st=conn.createStatement()){    if (time == 0) {      ResultSet rs=st.executeQuery("SELECT playedtime FROM " + tablePrefix + "playedtime WHERE playername = '"+ name+ "'");      newPlayedTime=0;      while (rs.next()) {        newPlayedTime=rs.getLong("playedtime");      }    } else {      if (databaseType == POSTGRESQL) {        st.execute("INSERT INTO " + tablePrefix + "playedtime VALUES ('"+ name+ "', "+ time+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (playedtime)=('"+ time+ "')");      } else {        st.execute("REPLACE INTO " + tablePrefix + "playedtime VALUES ('"+ name+ "', "+ time+ ")");      }    }  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while handling play time registration: ",e);  }  return newPlayedTime;}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty symbol table");  return min(root).key;}  }
class C{  public DependencyFinder(Log log){  mLog=log;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double zFactor=1;  double z, zN;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double SS;  int N;  double tri;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          N=0;          SS=0;          for (i=0; i < 8; i++) {            zN=DEM.getValue(row + dY[i],col + dX[i]);            if (zN != noData) {              zN=zN * zFactor;              SS+=(zN - z) * (zN - z);              N++;            }          }          tri=Math.sqrt(SS / N);          output.setValue(row,col,tri);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static public void addAuxiliaryLookAndFeel(LookAndFeel laf){  maybeInitialize();  if (!laf.isSupportedLookAndFeel()) {    return;  }  Vector<LookAndFeel> v=getLAFState().auxLookAndFeels;  if (v == null) {    v=new Vector<LookAndFeel>();  }  if (!v.contains(laf)) {    v.addElement(laf);    laf.initialize();    getLAFState().auxLookAndFeels=v;    if (getLAFState().multiLookAndFeel == null) {      getLAFState().multiLookAndFeel=getMultiLookAndFeel();    }  }}  }
class C{  void writeSlice(long start,long length,OutputStream out) throws IOException, ServerException {  int numRead=0;  long numRemaining=length;  byte[] chunk=new byte[65536];  UploadData uploadData=uploader.getData();  uploadData.setPosition(start);synchronized (uploadData) {    while (!uploader.isPaused()) {      if (numRemaining < chunk.length) {        numRead=uploadData.read(chunk,0,(int)numRemaining);      } else {        numRead=uploadData.read(chunk,0,chunk.length);      }      try {        if (numRead < 0) {          if (numRemaining > 0) {            out.flush();            uploader.setUploadState(UploadState.CLIENT_ERROR);          }          break;        }        out.write(chunk,0,numRead);        out.flush();        numRemaining-=numRead;        uploader.addNumBytesUploaded(numRead);        if (numRemaining == 0) {          break;        }      } catch (      IOException e) {        throw new ServerException();      }    }  }}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      value=jo.opt(key);      if (value == null) {        value="";      }      if (value instanceof String) {        string=(String)value;      } else {        string=null;      }      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  } else {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    } else {      string=(object == null) ? "null" : escape(object.toString());      return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";    }  }}  }
class C{  public AsymmetricCipherKeyPair generateKeyPairSingleThread(){  List<NTRUSigningPrivateKeyParameters.Basis> basises=new ArrayList<NTRUSigningPrivateKeyParameters.Basis>();  NTRUSigningPublicKeyParameters pub=null;  for (int k=params.B; k >= 0; k--) {    NTRUSigningPrivateKeyParameters.Basis basis=generateBoundedBasis();    basises.add(basis);    if (k == 0) {      pub=new NTRUSigningPublicKeyParameters(basis.h,params.getSigningParameters());    }  }  NTRUSigningPrivateKeyParameters priv=new NTRUSigningPrivateKeyParameters(basises,pub);  return new AsymmetricCipherKeyPair(pub,priv);}  }
class C{  public ResponseHeader header(){  return this.header;}  }
class C{  public final void replace(List<Graph> graphs){  tabbedPane.removeAll();  setPreferredSize(new Dimension(600,400));  removeAll();  if (graphs.isEmpty()) {  } else   if (graphs.size() > 1) {    for (int i=0; i < graphs.size(); i++) {      this.tabbedPane.addTab(tabName(i + 1),new JScrollPane(graphDisplay(graphs.get(i))));    }    add(this.tabbedPane,BorderLayout.CENTER);  } else {    this.tabbedPane.addTab(tabName(1),new JScrollPane(graphDisplay(graphs.get(0))));    add(this.tabbedPane,BorderLayout.CENTER);  }  this.tabbedPane.validate();}  }
class C{  public double rangeScan(final long rangeCount,final int m,final int h,final int leafUtilization){  if (rangeCount == 0)   return 0d;  final double averageSeekTime=Math.max(0,(h - 1)) * diskCostModel.seekTime;  final double leafFillRate=((double)leafUtilization) / 100;  final double expectedLeafCount=Math.ceil((((double)rangeCount) / m) * Math.min(1,(1 / leafFillRate)));  final double estimatedCost=averageSeekTime * expectedLeafCount;  return estimatedCost;}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  private void stopSemosMineTowns(Player admin){  if (StendhalQuestSystem.get().getQuest(MineTownRevivalWeeks.QUEST_NAME) == null) {    admin.sendPrivateText("Mine Town Revival Weeks are not active.");    return;  }  StendhalQuestSystem.get().unloadQuest(MineTownRevivalWeeks.QUEST_NAME);}  }
class C{  protected ExecutionResult runTest(TestCase test,Mutation mutant){  ExecutionResult result=new ExecutionResult(test,mutant);  comparisonObserver.clear();  sameObserver.clear();  primitiveObserver.clear();  inspectorObserver.clear();  fieldObserver.clear();  nullObserver.clear();  arrayObserver.clear();  try {    logger.debug("Executing test");    if (mutant == null) {      MutationObserver.deactivateMutation();    } else {      MutationObserver.activateMutation(mutant);    }    result=TestCaseExecutor.getInstance().execute(test);    MutationObserver.deactivateMutation(mutant);    int num=test.size();    MaxStatementsStoppingCondition.statementsExecuted(num);    result.setTrace(comparisonObserver.getTrace(),ComparisonTraceEntry.class);    result.setTrace(sameObserver.getTrace(),SameTraceEntry.class);    result.setTrace(primitiveObserver.getTrace(),PrimitiveTraceEntry.class);    result.setTrace(inspectorObserver.getTrace(),InspectorTraceEntry.class);    result.setTrace(fieldObserver.getTrace(),PrimitiveFieldTraceEntry.class);    result.setTrace(nullObserver.getTrace(),NullTraceEntry.class);    result.setTrace(arrayObserver.getTrace(),ArrayTraceEntry.class);  } catch (  Exception e) {    throw new Error(e);  }  return result;}  }
class C{  public CResultsTableModel(final CSpecialInstructionsModel model){  m_model=model;  model.addListener(m_listener);  m_instructions=model.getInstructions();}  }
class C{  @Override protected boolean checkOverride(MethodTree overriderTree,AnnotatedDeclaredType enclosingType,AnnotatedExecutableType overridden,AnnotatedDeclaredType overriddenType,Void p){  boolean isValid=true;  SideEffectAnnotation seaOfOverriderMethod=atypeFactory.methodSideEffectAnnotation(TreeUtils.elementFromDeclaration(overriderTree),false);  SideEffectAnnotation seaOfOverridenMethod=atypeFactory.methodSideEffectAnnotation(overridden.getElement(),false);  if (seaOfOverriderMethod.isWeakerThan(seaOfOverridenMethod)) {    isValid=false;    reportFailure("override.sideeffect.invalid",overriderTree,enclosingType,overridden,overriddenType,null,null);  }  return super.checkOverride(overriderTree,enclosingType,overridden,overriddenType,p) && isValid;}  }
class C{  public void addIndicationListener(TransportAddress localAddr,MessageEventHandler indicationListener){  addMessageListener(localAddr,new IndicationEventHandler(indicationListener));}  }
class C{  public static Mapping<Double> doublev(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(null),new MappingMeta("double",Double.class)).constraint(checking(null,"error.double",true)).constraint(constraints);}  }
class C{  public NamedList<Integer> toNamedList(IndexSchema schema){  List<TermInfo> aslist=new LinkedList<>();  while (size() > 0) {    aslist.add(0,(TermInfo)pop());  }  NamedList<Integer> list=new NamedList<>();  for (  TermInfo i : aslist) {    String txt=i.term.text();    SchemaField ft=schema.getFieldOrNull(i.term.field());    if (ft != null) {      txt=ft.getType().indexedToReadable(txt);    }    list.add(txt,i.docFreq);  }  return list;}  }
class C{  public void addSatallite(SatelliteBase satallite){  satallites.put(satallite.getId(),satallite);  if (satallite.canTick())   tickingSatallites.put(satallite.getId(),satallite);}  }
class C{  public synchronized void addImageListener(ImageListener cl){  m_imageListeners.add(cl);}  }
class C{  public AuthenticationException(String explanation){  super(explanation);}  }
class C{  private boolean isEndOfStream() throws XMLStreamException {  if (_readIndex >= _readCount)   reloadBuffer();  if (_readCount <= 0) {    if (_eventType == END_DOCUMENT)     throw new XMLStreamException("End document has already been reached");    int length=_index - _start;    if (length > 0) {      if (_charactersPending) {        _text.setArray(_data,_text.offset(),_text.length() + length);      } else {        _text=newSeq(_start,length);      }      _start=_index;      _eventType=CHARACTERS;    } else {      _eventType=END_DOCUMENT;    }    return true;  }  return false;}  }
class C{  public boolean isClippable(int col){  if (_internalDataLine == null)   return false; else   return _internalDataLine.isClippable(col);}  }
class C{  private static String jsonValue(int value){  return String.valueOf(value);}  }
class C{  public IndexColumn[] parse() throws QueryException {  try {    DocumentLoader loader=new DocumentLoader(source);    JsonObject jObj=(JsonObject)loader.parse();    close(false);    ArrayList<IndexColumn> columnList=new ArrayList<IndexColumn>();    for (    Entry<String,JsonValue> entry : jObj.entrySet()) {      String entryKey=entry.getKey();      JsonValue entryVal=entry.getValue();      JsonValue.ValueType vtype=entryVal.getValueType();      String dtype=null;      if ((vtype == JsonValue.ValueType.FALSE) || (vtype == JsonValue.ValueType.NULL))       continue;      if ((vtype == JsonValue.ValueType.OBJECT) || (vtype == JsonValue.ValueType.ARRAY))       continue;      if (vtype == JsonValue.ValueType.NUMBER) {        BigDecimal dval=((JsonNumber)entryVal).bigDecimalValue();        if (dval.compareTo(BigDecimal.ONE) != 0)         continue;      }      if (vtype == JsonValue.ValueType.STRING) {        dtype=((JsonString)entryVal).getString();      }      IndexColumn idx=new IndexColumn();      PathParser pp=new PathParser(entryKey);      String[] parr=pp.splitAndSQLEscape();      if (parr == null)       makeException(QueryMessage.EX_INDEX_ILLEGAL_PATH,entryKey);      idx.setPath(parr);      if (dtype != null)       idx.setSqlType(dtype);      columnList.add(idx);    }    int sz=columnList.size();    if (sz > 0) {      columns=new IndexColumn[sz];      columns=columnList.toArray(columns);    }  } catch (  IllegalArgumentException e) {    throw new QueryException(QueryMessage.EX_INVALID_PROJECTION.get(),e);  }catch (  JsonParsingException e) {    throw new QueryException(QueryMessage.EX_INVALID_PROJECTION.get(),e);  }catch (  JsonException e) {    throw new QueryException(QueryMessage.EX_INVALID_PROJECTION.get(),e);  } finally {    close(true);  }  is_parsed=true;  makeStrings();  return (columns);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.212 -0500",hash_original_method="404BC9553FFFEEA26AF30C1D66ABC6E6",hash_generated_method="B346B76AFB087F19C7116B39D101597A") public int last() throws IOException {  return sendCommand(NNTPCommand.LAST);}  }
class C{  public static java.util.logging.Level parse(String levelName){  return java.util.logging.Level.parse(levelName);}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col]));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void jbInit() throws Exception {  this.addKeyListener(this);  mainPanel.setLayout(mainLayout);  mainLayout.setHgap(2);  mainLayout.setVgap(2);  mainPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,2));  getContentPane().add(mainPanel);  monthPanel.setLayout(monthLayout);  monthPanel.add(bBack,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  monthPanel.add(cYear,new GridBagConstraints(3,0,1,1,1.0,0.0,GridBagConstraints.SOUTHEAST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));  monthPanel.add(bNext,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  monthPanel.add(cMonth,new GridBagConstraints(1,0,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));  monthPanel.setBorder(BorderFactory.createEmptyBorder(3,0,3,0));  mainPanel.add(monthPanel,BorderLayout.NORTH);  cMonth.addActionListener(this);  cYear.addChangeListener(this);  bBack.setIcon(Env.getImageIcon("Parent16.gif"));  bBack.setMargin(new Insets(0,0,0,0));  bBack.addActionListener(this);  bNext.setIcon(Env.getImageIcon("Detail16.gif"));  bNext.setMargin(new Insets(0,0,0,0));  bNext.addActionListener(this);  dayPanel.setLayout(dayLayout);  dayLayout.setColumns(7);  dayLayout.setHgap(2);  dayLayout.setRows(7);  dayLayout.setVgap(2);  dayPanel.setBackground(Color.white);  dayPanel.setOpaque(true);  mainPanel.add(dayPanel,BorderLayout.CENTER);  timePanel.setLayout(timeLayout);  lTimeSep.setText(" : ");  timePanel.add(fHour,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,6,0,0),0,0));  timePanel.add(lTimeSep,new GridBagConstraints(1,0,1,1,0.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));  timePanel.add(fMinute,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));  timePanel.add(cbPM,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));  timePanel.add(lTZ,new GridBagConstraints(4,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,4,0,0),0,0));  timePanel.add(bOK,new GridBagConstraints(5,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,6,0,2),0,0));  mainPanel.add(timePanel,BorderLayout.SOUTH);  fHour.addKeyListener(this);  ((JSpinner.DefaultEditor)fMinute.getEditor()).getTextField().addKeyListener(this);  fMinute.addChangeListener(this);  cbPM.addActionListener(this);  cbPM.addKeyListener(this);  bOK.setIcon(Env.getImageIcon("Ok16.gif"));  bOK.setMargin(new Insets(0,1,0,1));  bOK.addActionListener(this);  AutoCompletion.enable(fHour);}  }
class C{  public static void showSettingsDialog(final Window parent){  final CSettingsDialog dlg=new CSettingsDialog(parent);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  void handleCommandLine(String commandLine){  String[] args=commandLine.split("\\s+");  if (args.length < 1) {    throw new IllegalArgumentException("not enough args");  }  String command=args[0];switch (command) {case "new":    args=commandLine.split("\\s+",2);  if (args.length != 2) {    throw new IllegalArgumentException("missing description");  }addTask(args[1]);System.out.println("task added");break;case "done":assertArgsLength(args,2);long id=Long.parseLong(args[1]);if (markDone(id)) {System.out.println("task marked done");} else {System.out.printf("did not find a Task entity with ID %d%n",id);}break;case "list":assertArgsLength(args,1);List<String> tasks=formatTasks(listTasks());System.out.printf("found %d tasks:%n",tasks.size());System.out.println("task ID : description");System.out.println("---------------------");for (String taskString : tasks) {System.out.println(taskString);}break;case "delete":assertArgsLength(args,2);deleteTask(Long.parseLong(args[1]));System.out.println("task deleted (if it existed)");break;default :throw new IllegalArgumentException("unrecognized command: " + command);}}  }
class C{  @SuppressWarnings("try") protected CompilationResult compile(ResolvedJavaMethod installedCodeOwner,StructuredGraph graph){  return compile(installedCodeOwner,graph,new CompilationResult());}  }
class C{  public void mouseEntered(MouseEvent e){  if (CLogMgt.isLevelFinest())   log.finest("" + this + " - "+ e);}  }
class C{  public double minDataDLIfDeleted(int index,double expFPRate,boolean checkErr){  double[] rulesetStat=new double[6];  int more=m_Ruleset.size() - 1 - index;  ArrayList<double[]> indexPlus=new ArrayList<double[]>(more);  for (int j=0; j < index; j++) {    rulesetStat[0]+=m_SimpleStats.get(j)[0];    rulesetStat[2]+=m_SimpleStats.get(j)[2];    rulesetStat[4]+=m_SimpleStats.get(j)[4];  }  Instances data=(index == 0) ? m_Data : m_Filtered.get(index - 1)[1];  for (int j=(index + 1); j < m_Ruleset.size(); j++) {    double[] stats=new double[6];    Instances[] split=computeSimpleStats(j,data,stats,null);    indexPlus.add(stats);    rulesetStat[0]+=stats[0];    rulesetStat[2]+=stats[2];    rulesetStat[4]+=stats[4];    data=split[1];  }  if (more > 0) {    rulesetStat[1]=indexPlus.get(indexPlus.size() - 1)[1];    rulesetStat[3]=indexPlus.get(indexPlus.size() - 1)[3];    rulesetStat[5]=indexPlus.get(indexPlus.size() - 1)[5];  } else   if (index > 0) {    rulesetStat[1]=m_SimpleStats.get(index - 1)[1];    rulesetStat[3]=m_SimpleStats.get(index - 1)[3];    rulesetStat[5]=m_SimpleStats.get(index - 1)[5];  } else {    rulesetStat[1]=m_SimpleStats.get(0)[0] + m_SimpleStats.get(0)[1];    rulesetStat[3]=m_SimpleStats.get(0)[3] + m_SimpleStats.get(0)[4];    rulesetStat[5]=m_SimpleStats.get(0)[2] + m_SimpleStats.get(0)[5];  }  double potential=0;  for (int k=index + 1; k < m_Ruleset.size(); k++) {    double[] ruleStat=indexPlus.get(k - index - 1);    double ifDeleted=potential(k,expFPRate,rulesetStat,ruleStat,checkErr);    if (!Double.isNaN(ifDeleted)) {      potential+=ifDeleted;    }  }  double dataDLWithout=dataDL(expFPRate,rulesetStat[0],rulesetStat[1],rulesetStat[4],rulesetStat[5]);  return (dataDLWithout - potential);}  }
class C{  public AsyncResult ActivateSessionAsync(RequestHeader RequestHeader,SignatureData ClientSignature,SignedSoftwareCertificate[] ClientSoftwareCertificates,String[] LocaleIds,ExtensionObject UserIdentityToken,SignatureData UserTokenSignature){  ActivateSessionRequest req=new ActivateSessionRequest(RequestHeader,ClientSignature,ClientSoftwareCertificates,LocaleIds,UserIdentityToken,UserTokenSignature);  return channel.serviceRequestAsync(req);}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  void handleTransitVehiclesInStopQueue(final double now){  QVehicle veh;  List<QVehicle> departingTransitVehicles=null;  while ((veh=transitVehicleStopQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      break;    }    if (departingTransitVehicles == null) {      departingTransitVehicles=new LinkedList<>();    }    departingTransitVehicles.add(transitVehicleStopQueue.poll());  }  if (departingTransitVehicles != null) {    ListIterator<QVehicle> iter=departingTransitVehicles.listIterator(departingTransitVehicles.size());    while (iter.hasPrevious()) {      this.road.addTransitSlightlyUpstreamOfStop(iter.previous());    }  }}  }
class C{  public void update(Instance instance) throws Exception {  if (m_Instances == null)   throw new Exception("No instances supplied yet. Have to call " + "setInstances(instances) with a set of Instances " + "first.");  addInstanceInfo(instance);  addInstanceToTree(instance,m_Root);}  }
class C{  public double expectedShortfall(final double centile){  QL.require(centile >= 0.9 && centile < 1.0,"percentile out of range [0.9, 1.0)");  QL.ensure(samples() != 0,EMPTY_SAMPLE_SET);  final double target=-valueAtRisk(centile);  final Ops.DoublePredicate less=new Bind2ndPredicate(new LessThanPredicate(),target);  final Pair<Double,Integer> result=expectationValue(new Identity(),less);  final double x=result.first();  final Integer N=result.second();  QL.ensure(N != 0,NO_DATA_BELOW_THE_TARGET);  return -Math.min(x,0.0);}  }
class C{  String formatDateTimeForFileName(long unixTime){  final Date date=new Date(unixTime);  final SimpleDateFormat format=filenameDateAndTimeFormat.get();  return format.format(date);}  }
class C{  public void insertCommentStyle(String header,String value){  this.iter.add(HeaderCard.saveNewHeaderCard(header,value,false));}  }
class C{  public AppInfo(Context context,LauncherActivityInfoCompat info,UserHandleCompat user,IconCache iconCache,HashMap<Object,CharSequence> labelCache){  this.componentName=info.getComponentName();  this.container=ItemInfo.NO_ID;  flags=initFlags(info);  firstInstallTime=info.getFirstInstallTime();  iconCache.getTitleAndIcon(this,info,labelCache);  intent=makeLaunchIntent(context,info,user);  this.user=user;}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public CategoryServiceImpl(final GenericDAO<Category,Long> categoryDao){  super(categoryDao);  this.categoryDao=categoryDao;}  }
class C{  public ObjectFactory(){}  }
class C{  XSLTElementProcessor popProcessor(){  return (XSLTElementProcessor)m_processors.pop();}  }
class C{  public Viewport(Viewport viewport){  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Viewport","constructor","missingViewport"));  }  this.x=viewport.x;  this.y=viewport.y;  this.width=viewport.width;  this.height=viewport.height;}  }
class C{  protected void validateHostInitiator(HostInitiatorInfo[] param){}  }
class C{  public void removeListener(final ITraceLoggerListener listener){  listeners.removeListener(listener);}  }
class C{  protected static boolean isBetterEntity(Entity original,Entity challenger){  String origValue=original.getValue();  if (origValue == null)   origValue=original.getCoveredText();  String challValue=challenger.getValue();  if (challValue == null)   challValue=challenger.getCoveredText();  return origValue.length() < challValue.length();}  }
class C{  private void appendUncommonPhoneType(final StringBuilder builder,final Integer type){  if (mIsDoCoMo) {    builder.append(VCardConstants.PARAM_TYPE_VOICE);  } else {    String phoneType=VCardUtils.getPhoneTypeString(type);    if (phoneType != null) {      appendTypeParameter(phoneType);    } else {      Log.e(LOG_TAG,"Unknown or unsupported (by vCard) Phone type: " + type);    }  }}  }
class C{  public CDatabase(final String description,final String driver,final String host,final String name,final String user,final String password,final String identity,final boolean savePassword,final boolean autoConnect){  Preconditions.checkNotNull(description,"IE00656: Database description can not be null");  Preconditions.checkNotNull(driver,"IE00657: Database driver can not be null");  Preconditions.checkNotNull(host,"IE01148: Database host can not be null");  Preconditions.checkNotNull(name,"IE00658: Database name can not be null");  Preconditions.checkNotNull(user,"IE00659: Database user can not be null");  Preconditions.checkNotNull(password,"IE00660: Database password can not be null");  Preconditions.checkNotNull(identity,"IE00064: identity argument can not be null");  this.description=new CDatabaseConfiguration(this,listeners,description,driver,host,name,user,password,identity,autoConnect,savePassword);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getCapDevInput(stack).getDevice();}  }
class C{  public void addDomains(String... domains){  for (  String domain : domains) {    addDomain(domain);  }}  }
class C{  @SuppressWarnings("serial") @Test public final void testHashCode(){  final Area ar=new Area(new StendhalRPZone("test"),new Rectangle(){  });  assertEquals((new PlayerInAreaCondition(ar)).hashCode(),new PlayerInAreaCondition(ar).hashCode());}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  public synchronized void updateArticle(final JSONObject requestJSONObject) throws ServiceException {  try {    final JSONObject option=optionRepository.get(Option.ID_C_MISC_ALLOW_ADD_ARTICLE);    if (!"0".equals(option.optString(Option.OPTION_VALUE))) {      throw new ServiceException(langPropsService.get("notAllowAddArticleLabel"));    }  } catch (  final RepositoryException e) {    throw new ServiceException(e);  }  final Transaction transaction=articleRepository.beginTransaction();  try {    final String articleId=requestJSONObject.getString(Keys.OBJECT_ID);    final JSONObject oldArticle=articleRepository.get(articleId);    final String authorId=oldArticle.optString(Article.ARTICLE_AUTHOR_ID);    final JSONObject author=userRepository.get(authorId);    processTagsForArticleUpdate(oldArticle,requestJSONObject,author);    userRepository.update(author.optString(Keys.OBJECT_ID),author);    String articleTitle=requestJSONObject.optString(Article.ARTICLE_TITLE);    articleTitle=Emotions.toAliases(articleTitle);    oldArticle.put(Article.ARTICLE_TITLE,articleTitle);    oldArticle.put(Article.ARTICLE_TAGS,requestJSONObject.optString(Article.ARTICLE_TAGS));    oldArticle.put(Article.ARTICLE_COMMENTABLE,requestJSONObject.optBoolean(Article.ARTICLE_COMMENTABLE,true));    oldArticle.put(Article.ARTICLE_TYPE,requestJSONObject.optInt(Article.ARTICLE_TYPE,Article.ARTICLE_TYPE_C_NORMAL));    String articleContent=requestJSONObject.optString(Article.ARTICLE_CONTENT);    articleContent=Emotions.toAliases(articleContent);    oldArticle.put(Article.ARTICLE_CONTENT,articleContent);    final long currentTimeMillis=System.currentTimeMillis();    final long createTime=oldArticle.optLong(Keys.OBJECT_ID);    oldArticle.put(Article.ARTICLE_UPDATE_TIME,currentTimeMillis);    final int rewardPoint=requestJSONObject.optInt(Article.ARTICLE_REWARD_POINT,0);    boolean enableReward=false;    if (1 > oldArticle.optInt(Article.ARTICLE_REWARD_POINT) && 0 < rewardPoint) {      oldArticle.put(Article.ARTICLE_REWARD_CONTENT,requestJSONObject.optString(Article.ARTICLE_REWARD_CONTENT));      oldArticle.put(Article.ARTICLE_REWARD_POINT,rewardPoint);      enableReward=true;    }    final String ip=requestJSONObject.optString(Article.ARTICLE_IP);    oldArticle.put(Article.ARTICLE_IP,ip);    articleRepository.update(articleId,oldArticle);    transaction.commit();    final int articleType=oldArticle.optInt(Article.ARTICLE_TYPE);    if (Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH != articleType && Article.ARTICLE_TYPE_C_JOURNAL_SECTION != articleType && Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER != articleType) {      if (currentTimeMillis - createTime > 1000 * 60 * 5) {        final long followerCnt=followQueryService.getFollowerCount(authorId,Follow.FOLLOWING_TYPE_C_USER);        int addition=(int)Math.round(Math.sqrt(followerCnt));        final long collectCnt=followQueryService.getFollowerCount(articleId,Follow.FOLLOWING_TYPE_C_ARTICLE);        addition+=collectCnt * 2;        pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_UPDATE_ARTICLE,Pointtransfer.TRANSFER_SUM_C_UPDATE_ARTICLE + addition,articleId);      }    }    if (enableReward) {      pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_ARTICLE_REWARD,rewardPoint,articleId);    }    final JSONObject eventData=new JSONObject();    eventData.put(Article.ARTICLE,oldArticle);    try {      eventManager.fireEventAsynchronously(new Event<JSONObject>(EventTypes.UPDATE_ARTICLE,eventData));    } catch (    final EventException e) {      LOGGER.log(Level.ERROR,e.getMessage(),e);    }  } catch (  final Exception e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates an article failed",e);    throw new ServiceException(e);  }}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(ofbV,0,ofbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize);  System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  private void waitForRequest(){  lock.lock();  lastRequestCount++;  while (lastRequestCount == requestCount) {    lock.await();  }  lock.unlock();}  }
class C{  protected int[] readColorTable(final int ncolors){  final int nbytes=3 * ncolors;  int[] tab=null;  final byte[] c=new byte[nbytes];  try {    rawData.get(c);    tab=new int[256];    int i=0;    int j=0;    while (i < ncolors) {      final int r=(c[j++]) & 0xff;      final int g=(c[j++]) & 0xff;      final int b=(c[j++]) & 0xff;      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;    }  } catch (  final BufferUnderflowException e) {    Log.w(TAG,"Format Error Reading Color Table",e);    status=STATUS_FORMAT_ERROR;  }  return tab;}  }
class C{  static boolean matchingLetter(String inputString){  return Pattern.matches(PATTERN_LETTER,inputString);}  }
class C{  public Zone(Name zone,int dclass,String remote) throws IOException, ZoneTransferException {  ZoneTransferIn xfrin=ZoneTransferIn.newAXFR(zone,remote,null);  xfrin.setDClass(dclass);  fromXFR(xfrin);}  }
class C{  public XmlPullParser newPullParser() throws XmlPullParserException {  if (parserClasses == null)   throw new XmlPullParserException("Factory initialization was incomplete - has not tried " + classNamesLocation);  if (parserClasses.size() == 0)   throw new XmlPullParserException("No valid parser classes found in " + classNamesLocation);  final StringBuilder issues=new StringBuilder();  for (int i=0; i < parserClasses.size(); i++) {    final Class ppClass=(Class)parserClasses.get(i);    try {      final XmlPullParser pp=(XmlPullParser)ppClass.newInstance();      for (Iterator iter=features.keySet().iterator(); iter.hasNext(); ) {        final String key=(String)iter.next();        final Boolean value=(Boolean)features.get(key);        if (value != null && value.booleanValue()) {          pp.setFeature(key,true);        }      }      return pp;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create parser: " + issues);}  }
class C{  public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateBigDecimal(columnIndex,x);}  }
class C{  public Argument createArgument(){  ArgumentImpl argument=new ArgumentImpl();  return argument;}  }
class C{  public void addError(String level,TableModel table,String message){  if (level.equals(DBPlugin.LEVEL_ERROR)) {    this.errors.add(new DiagramError(table,createTableMessage(table,message),level));    addErrorMessageToModel(table,ERROR_PREFIX + message);  } else   if (level.equals(DBPlugin.LEVEL_WARNING)) {    this.errors.add(new DiagramError(table,createTableMessage(table,message),level));    addErrorMessageToModel(table,WARNING_PREFIX + message);  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public ActiveInfoStorageCalculatorGaussian() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(MI_CALCULATOR_GAUSSIAN);}  }
class C{  private void dispatchMessage(OFMessage m){  this.switchManager.handleMessage(this.sw,m,null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.818 -0500",hash_original_method="4E92EE4014ABA801EB273C60A5958799",hash_generated_method="CC78676D47114D00E5B39F22B9B4DA60") @SuppressWarnings("unchecked") void rehash(){  int newArrSize=(arrSize + 1) * 2 + 1;  if (newArrSize < 0) {    newArrSize=Integer.MAX_VALUE - 1;  }  Entry<E,K,V>[] newArr=new Entry[newArrSize + 1];  for (int i=0; i < arr.length - 1; i++) {    Entry<E,K,V> entry=arr[i];    while (entry != null) {      Entry<E,K,V> next=entry.next;      int newIndex=(entry.hash & 0x7fffffff) % newArrSize;      entry.next=newArr[newIndex];      newArr[newIndex]=entry;      entry=next;    }  }  newArr[newArrSize]=arr[arrSize];  arrSize=newArrSize;  if (arrSize == Integer.MAX_VALUE) {    loadFactor*=10;  }  threshold=(int)(arrSize * loadFactor);  arr=newArr;}  }
class C{  public void appendCloseInlinedQuoteTag(){  text.append("</q>");}  }
class C{  public void addDependencies(Set<Dependency> dependencies){  graph.addEdges(dependencies);}  }
class C{  public ClientConfig withIgnoringCertificates(boolean ignoringCertificates){  setIgnoreCertificates(ignoringCertificates);  return this;}  }
class C{  public double[] predict(FVec feat,boolean output_margin,int ntree_limit){  double[] preds=predictRaw(feat,ntree_limit);  if (!output_margin) {    return obj.predTransform(preds);  }  return preds;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void onFrameAvailable(){  mRenderer.onTangoFrameAvailable();  requestRender();}  }
class C{  private long readUint(ExtractorInput input) throws IOException, InterruptedException {  input.peekFully(scratch.data,0,1);  int value=scratch.data[0] & 0xFF;  if (value == 0) {    return Long.MIN_VALUE;  }  int mask=0x80;  int length=0;  while ((value & mask) == 0) {    mask>>=1;    length++;  }  value&=~mask;  input.peekFully(scratch.data,1,length);  for (int i=0; i < length; i++) {    value<<=8;    value+=scratch.data[i + 1] & 0xFF;  }  peekLength+=length + 1;  return value;}  }
class C{  @SuppressWarnings("unchecked") public <T>T read(String name) throws XMLStreamException {  return (T)_xml.get(name);}  }
class C{  public static double WCorrRMSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  for (int k=0; k < segments.length; ++k)   ensureSegment(k);  s.defaultWriteObject();  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segmentAt(segments,k);    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        HashEntry<K,V> e;        for (e=entryAt(tab,i); e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> newConcurrentHashMap(int size){  return new ConcurrentHashMap<K,V>(size);}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public void clearYTextLabels(){  clearYTextLabels(0);}  }
class C{  public String attributeIndicesTipText(){  return "The selection of columns to use in the cleansing processs, first and last are valid indices.";}  }
class C{  public final void addElement(final String value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public static void main(String... args){  String testSrc=System.getProperty("test.src");  File baseDir=(testSrc == null) ? null : new File(testSrc);  boolean ok=new TreePosTest().run(baseDir,args);  if (!ok) {    if (testSrc != null)     throw new Error("failed"); else     System.exit(1);  }}  }
class C{  public RequestDispatcher(BlockingQueue<Request<?>> unFinishQueue,BlockingQueue<Request<?>> requestQueue){  mUnFinishQueue=unFinishQueue;  mRequestQueue=requestQueue;}  }
class C{  public static void main(String[] args){  runClusterer(new SimpleKMeans(),args);}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  private BitmapUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  private static void analyzeStringMaps(StringMap a,StringMap b,String name,HashMap<String,Change> changes){  if (a != null) {    for (    String key : a.keySet()) {      if (b != null && b.containsKey(key) && a.get(key).equals(b.get(key))) {        continue;      }      Object bval=(b != null) ? b.get(key) : null;      Change change=new Change(name + "." + key,a.get(key),bval,name);      changes.put(change._key,change);    }  }  if (b != null) {    for (    String key : b.keySet()) {      if (a != null && a.containsKey(key) && b.get(key).equals(a.get(key))) {        continue;      }      Object aval=(a != null) ? a.get(key) : null;      Change change=new Change(name + "." + key,aval,b.get(key),name);      changes.put(change._key,change);    }  }}  }
class C{  public String localName(){  return theType.localName();}  }
class C{  public TraceOption_ createTraceOption_(){  TraceOption_Impl traceOption_=new TraceOption_Impl();  return traceOption_;}  }
class C{  public boolean isSetDomainId(){  return EncodingUtils.testBit(__isset_bitfield,__DOMAINID_ISSET_ID);}  }
class C{  public void printString(char[] v,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    char ch=v[i + offset];    if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + ((ch >> 6) & 0x1f));      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + ((ch >> 12) & 0xf));      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  public static Alias read(StreamInput in) throws IOException {  Alias alias=new Alias();  alias.readFrom(in);  return alias;}  }
class C{  public static byte[] convertHexString(String hexString){  if (hexString == null || hexString.length() == 0)   return null;  int size=hexString.length() / 2;  byte[] retValue=new byte[size];  String inString=hexString.toLowerCase();  try {    for (int i=0; i < size; i++) {      int index=i * 2;      int ii=Integer.parseInt(inString.substring(index,index + 2),16);      retValue[i]=(byte)ii;    }    return retValue;  } catch (  Exception e) {    log.finest(hexString + " - " + e.getLocalizedMessage());  }  return null;}  }
class C{  public boolean sendViaDataSocket(String string){  try {    byte[] bytes=string.getBytes(encoding);    Log.d(TAG,"Using data connection encoding: " + encoding);    return sendViaDataSocket(bytes,bytes.length);  } catch (  UnsupportedEncodingException e) {    Log.e(TAG,"Unsupported encoding for data socket send");    return false;  }}  }
class C{  private static boolean includeParameter(String parameterKey){  return !parameterKey.startsWith(InstanceParameter.APP_PARAM_KEY_PREFIX);}  }
class C{  @Override public boolean updateKeeperActive(String clusterId,String shardId,KeeperMeta activeKeeper){  boolean result=currentMeta.setKeeperActive(clusterId,shardId,activeKeeper);  notifyKeeperActiveElected(clusterId,shardId,activeKeeper);  return result;}  }
class C{  @SuppressWarnings("unchecked") public <R>Optional<R> select(Class<R> clazz){  Objects.requireNonNull(clazz);  if (!isPresent())   return empty();  return (Optional<R>)Optional.ofNullable(clazz.isInstance(value) ? value : null);}  }
class C{  public void testGetSetWebResource(){  System.out.println("getWebResource");  WebResource mockWebResource=EasyMock.createMock(WebResource.class);  FileContentLoaderImpl instance=new FileContentLoaderImpl(null,null,null);  instance.setWebResource(mockWebResource);  assertEquals(mockWebResource,instance.getWebResource());}  }
class C{  public static final void drawLineSegment(GL2 gl,Segment segment,boolean points){  Vector2 p1=segment.getPoint1();  Vector2 p2=segment.getPoint2();  RenderUtilities.drawLineSegment(gl,p1.x,p1.y,p2.x,p2.y,points);}  }
class C{  public boolean hasLabel(final String label){  return labels.contains(label);}  }
class C{  public double[][] readDoubleMatrix(String fname,InputInfo iinfo,long rows,long cols,int brlen,int bclen,long nnz) throws IOException {  try {    MatrixReader reader=MatrixReaderFactory.createMatrixReader(iinfo);    MatrixBlock mb=reader.readMatrixFromHDFS(fname,rows,cols,brlen,bclen,nnz);    return DataConverter.convertToDoubleMatrix(mb);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  private SymmetricMatrix inverse1By1(){  double[][] newComponents=new double[1][1];  newComponents[0][0]=1 / components[0][0];  return new SymmetricMatrix(newComponents);}  }
class C{  public void testVitalClick_showsLoadingDialog(){  mController.init();  mController.onAddObservationPressed("foo");  verify(mMockUi).showFormLoadingDialog(true);}  }
class C{  protected BenchmarkMatrix2D(){  throw new RuntimeException("Non instantiable");}  }
class C{  public synchronized ServerPrepareResult put(String key,ServerPrepareResult result){  ServerPrepareResult cachedServerPrepareResult=super.get(key);  if (cachedServerPrepareResult != null && cachedServerPrepareResult.incrementShareCounter()) {    return cachedServerPrepareResult;  }  result.setAddToCache();  super.put(key,result);  return null;}  }
class C{  public static Object eval(ScriptEngine self,Reader reader,Binding binding) throws ScriptException {  storeBindingVars(self,binding);  Object result=self.eval(reader);  retrieveBindingVars(self,binding);  return result;}  }
class C{  public static void putRange(ByteBuffer buffer,int start,int end,byte b){  for (int i=start; i < end; ++i) {    buffer.put(i,b);  }}  }
class C{  public GPathResult parse(final InputSource input) throws IOException, SAXException {  reader.setContentHandler(this);  reader.parse(input);  return getDocument();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.700 -0500",hash_original_method="642EB13C162B9C3DDBE9F6D8F3F1EFAB",hash_generated_method="4E952B3FA4C5693F9708F07FE257B46F") public ActionKeyInfo findActionKey(int keyCode){  if (mActionKeys == null) {    return null;  }  return mActionKeys.get(keyCode);}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  public void updatePvFomBuffer(char[] buffer){  if (enabled) {    try {      Object result=physFromBuffer(buffer);      pv.put(EcuDataPv.FID_VALUE,result);      log.debug(String.format("%02X %-30s %16s %s",pid,label,pv.get(EcuDataPv.FID_VALUE),pv.get(EcuDataPv.FID_UNITS)));    } catch (    Exception ex) {      log.error(ex);    }  }}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public static boolean isValidCodePoint(int codePoint){  int plane=codePoint >>> 16;  return plane < ((MAX_CODE_POINT + 1) >>> 16);}  }
class C{  public void closeIt(){  setDocStatus(MPPOrderNode.DOCSTATUS_Closed);  setDocAction(MPPOrderNode.DOCACTION_None);  setDateFinish(false);  int old=getDurationRequired();  if (old != getDurationReal()) {    addDescription(Msg.parseTranslation(getCtx(),"@closed@ ( @Duration@ :" + old + ") ( @QtyRequired@ :"+ getQtyRequired()+ ")"));    setDurationRequired(getDurationReal());    setQtyRequired(getQtyDelivered());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<Integer> executeIntListQuery(String sql) throws AdeException {  return executeIntListQuery(sql,AdeInternal.getDefaultConnection());}  }
class C{  public boolean simulationPaused(){  return pauseButton.isSelected();}  }
class C{  public static void addCoalescingKey(long downTime){  sDownTimeToCoalescingKey.put((int)downTime,0);}  }
class C{  public static boolean allElementsAreFalse(@NonNull boolean[] array){  for (  boolean wavesWorkingState : array) {    if (wavesWorkingState)     return false;  }  return true;}  }
class C{  private void processDDCard(JCas aJCas,String text){  Matcher matcher=llDDCardPattern.matcher(text);  while (matcher.find()) {    if (!isValidPair(matcher.group(4),matcher.group(9))) {      continue;    }    try {      Double lat;      Double lon;      lat=Double.parseDouble(matcher.group(1));      lon=Double.parseDouble(matcher.group(6));      if ("E".equals(matcher.group(4)) || "W".equals(matcher.group(4))) {        Double tmp=lat;        lat=lon;        lon=tmp;      }      if (flipLon(matcher.group(4),matcher.group(9))) {        lon=-lon;      }      if (flipLat(matcher.group(4),matcher.group(9))) {        lat=-lat;      }      addCoordinate(aJCas,matcher,lon,lat,"dd");    } catch (    NumberFormatException e) {      getMonitor().warn(COULD_NOT_PARSE,e);    }  }}  }
class C{  public static Color generateColor(final float[] toks){  int i=-1;  if (toks != null) {    i=toks.length;  }  Color newColor=null;switch (i) {case 0:    newColor=new Color(0,0,0,0);  break;case 1:{  final float tok0=toks[0];  if (tok0 <= 1) {    newColor=new Color(tok0,tok0,tok0);  } else {    newColor=new Color((int)tok0,(int)tok0,(int)tok0);  }  break;}case 3:{if (debug) {  System.out.println("rgb color=" + toks[0] + ' '+ toks[1]+ ' '+ toks[2]);}final float tok0=toks[0];final float tok1=toks[1];final float tok2=toks[2];if (tok0 <= 1 && tok1 <= 1 && tok2 <= 1) {  newColor=new Color(tok0,tok1,tok2);} else {  newColor=new Color((int)tok0,(int)tok1,(int)tok2);}break;}case 4:final DeviceCMYKColorSpace cs=new DeviceCMYKColorSpace();cs.setColor(new float[]{toks[3],toks[2],toks[1],toks[0]},4);newColor=(Color)cs.getColor();break;default :break;}if (newColor == null && FieldsHightlightColor != null) {return FieldsHightlightColor;}return newColor;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:48.731 -0500",hash_original_method="EF4819B29F3C178C4F6AF68711CF0B83",hash_generated_method="C3543B83099E9A7A72D521A601682F75") static int interpretType(String typeName){  if ("unset".equals(typeName)) {    return TYPE_UNSET;  } else   if ("boolean".equals(typeName)) {    return TYPE_BOOLEAN;  } else   if ("byte".equals(typeName)) {    return TYPE_BYTE;  } else   if ("short".equals(typeName)) {    return TYPE_SHORT;  } else   if ("int".equals(typeName)) {    return TYPE_INT;  } else   if ("long".equals(typeName)) {    return TYPE_LONG;  } else   if ("float".equals(typeName)) {    return TYPE_FLOAT;  } else   if ("double".equals(typeName)) {    return TYPE_DOUBLE;  } else   if ("String".equals(typeName)) {    return TYPE_STRING;  }  return TYPE_ERROR;}  }
class C{  public static final void drawPoint(GL2 gl,double px,double py){  gl.glBegin(GL.GL_POINTS);  gl.glVertex2d(px,py);  gl.glEnd();}  }
class C{  public void diff_cleanupMerge(LinkedList<Diff> diffs){  diffs.add(new Diff(Operation.EQUAL,""));  ListIterator<Diff> pointer=diffs.listIterator();  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  Diff thisDiff=pointer.next();  Diff prevEqual=null;  int commonlength;  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  prevEqual=null;break;case DELETE:count_delete++;text_delete+=thisDiff.text;prevEqual=null;break;case EQUAL:if (count_delete + count_insert > 1) {boolean both_types=count_delete != 0 && count_insert != 0;pointer.previous();while (count_delete-- > 0) {pointer.previous();pointer.remove();}while (count_insert-- > 0) {pointer.previous();pointer.remove();}if (both_types) {commonlength=diff_commonPrefix(text_insert,text_delete);if (commonlength != 0) {if (pointer.hasPrevious()) {thisDiff=pointer.previous();assert thisDiff.operation == Operation.EQUAL : "Previous diff should have been an equality.";thisDiff.text+=text_insert.substring(0,commonlength);pointer.next();} else {pointer.add(new Diff(Operation.EQUAL,text_insert.substring(0,commonlength)));}text_insert=text_insert.substring(commonlength);text_delete=text_delete.substring(commonlength);}commonlength=diff_commonSuffix(text_insert,text_delete);if (commonlength != 0) {thisDiff=pointer.next();thisDiff.text=text_insert.substring(text_insert.length() - commonlength) + thisDiff.text;text_insert=text_insert.substring(0,text_insert.length() - commonlength);text_delete=text_delete.substring(0,text_delete.length() - commonlength);pointer.previous();}}if (text_delete.length() != 0) {pointer.add(new Diff(Operation.DELETE,text_delete));}if (text_insert.length() != 0) {pointer.add(new Diff(Operation.INSERT,text_insert));}thisDiff=pointer.hasNext() ? pointer.next() : null;} else if (prevEqual != null) {prevEqual.text+=thisDiff.text;pointer.remove();thisDiff=pointer.previous();pointer.next();}count_insert=0;count_delete=0;text_delete="";text_insert="";prevEqual=thisDiff;break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}if (diffs.getLast().text.length() == 0) {diffs.removeLast();}boolean changes=false;pointer=diffs.listIterator();Diff prevDiff=pointer.hasNext() ? pointer.next() : null;thisDiff=pointer.hasNext() ? pointer.next() : null;Diff nextDiff=pointer.hasNext() ? pointer.next() : null;while (nextDiff != null) {if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {if (thisDiff.text.endsWith(prevDiff.text)) {thisDiff.text=prevDiff.text + thisDiff.text.substring(0,thisDiff.text.length() - prevDiff.text.length());nextDiff.text=prevDiff.text + nextDiff.text;pointer.previous();pointer.previous();pointer.previous();pointer.remove();pointer.next();thisDiff=pointer.next();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;} else if (thisDiff.text.startsWith(nextDiff.text)) {prevDiff.text+=nextDiff.text;thisDiff.text=thisDiff.text.substring(nextDiff.text.length()) + nextDiff.text;pointer.remove();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;}}prevDiff=thisDiff;thisDiff=nextDiff;nextDiff=pointer.hasNext() ? pointer.next() : null;}if (changes) {diff_cleanupMerge(diffs);}}  }
class C{  ObjectEndpoint(ObjID id,Transport transport){  if (id == null) {    throw new NullPointerException();  }  assert transport != null || id.equals(new ObjID(ObjID.DGC_ID));  this.id=id;  this.transport=transport;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.154 -0400",hash_original_method="5060399A61D97F30C880AACCBE3D1906",hash_generated_method="DBB8A84F8043B0C98655B4E0475841C9") @Override public void onLowMemory(){  super.onLowMemory();  mFragments.dispatchLowMemory();}  }
class C{  private <Result>Result handleJsonResponse(final InputStream in,final Class<Result> clazz){  if (clazz == null) {    return null;  }  final String rawJson=streamToString(in);  return getSerializer().deserializeObject(rawJson,clazz);}  }
class C{  public boolean verifyPoints(GPNode inner1,GPNode inner2){  if (inner1.depth() + inner2.atDepth() > maxDepth)   return false;  if (maxSize != NO_SIZE_LIMIT) {    int inner1size=inner1.numNodes(GPNode.NODESEARCH_ALL);    int inner2size=inner2.numNodes(GPNode.NODESEARCH_ALL);    if (inner1size > inner2size) {      GPNode root2=((GPTree)(inner2.rootParent())).child;      int root2size=root2.numNodes(GPNode.NODESEARCH_ALL);      if (root2size - inner2size + inner1size > maxSize)       return false;    }  }  return true;}  }
class C{  private static String[] splitWorker(final String str,final char separatorChar,final boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  List<String> list=new ArrayList<String>();  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  while (i < len) {    if (str.charAt(i) == separatorChar) {      if (match || preserveAllTokens) {        list.add(str.substring(start,i));        match=false;        lastMatch=true;      }      start=++i;      continue;    }    lastMatch=false;    match=true;    i++;  }  if (match || preserveAllTokens && lastMatch) {    list.add(str.substring(start,i));  }  return list.toArray(new String[list.size()]);}  }
class C{  public String generate(DIDLContent content,boolean nestedItems) throws Exception {  return documentToString(buildDOM(content,nestedItems),true);}  }
class C{  protected ShoppingCartItem(GenericValue product,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,Locale locale,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup){  this(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,null,locale,itemType,itemGroup,null);  if (product != null) {    String productName=ProductContentWrapper.getProductContentAsText(product,"PRODUCT_NAME",this.locale,null);    if (UtilValidate.isEmpty(productName)) {      GenericValue parentProduct=this.getParentProduct();      if (parentProduct != null) {        productName=ProductContentWrapper.getProductContentAsText(parentProduct,"PRODUCT_NAME",this.locale,null);      }    }    if (productName == null) {      this.itemDescription="";    } else {      this.itemDescription=productName;    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.843 -0500",hash_original_method="428A10BCE5663B72CCCACBE02D386E37",hash_generated_method="11CAD4ECB2F6D27A77FF1A5A5E2B3963") private ZygoteInit(){}  }
class C{  public double manhattanDistance(final MutableDouble3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off,Comparator c){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && c.compare(dest[j - 1],dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >> 1;  mergeSort(dest,src,low,mid,-off,c);  mergeSort(dest,src,mid,high,-off,c);  if (c.compare(src[mid - 1],src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && c.compare(src[p],src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  public static TStream<JsonObject> sensorsAB(Topology topology){  TStream<JsonObject> sensorA=SimulatedSensors.burstySensor(topology,"A");  TStream<JsonObject> sensorB=SimulatedSensors.burstySensor(topology,"B");  TStream<JsonObject> sensors=sensorA.union(sensorB);  TWindow<JsonObject,JsonElement> sensorWindow=sensors.last(50,null);  sensors=JsonAnalytics.aggregate(sensorWindow,"name","reading",MIN,MAX,MEAN,STDDEV);  sensors=sensors.filter(null);  return sensors;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mCharts[seriesIndex].drawLegendShape(canvas,renderer,x,y,0,paint);}  }
class C{  public static Offset center(){  return new Offset(WorldWind.OFFSET_FRACTION,0.5,WorldWind.OFFSET_FRACTION,0.5);}  }
class C{  private RegionQueue createHARegionQueue(String name,Cache cache) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  RegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public CF7(int numberOfVariables){  super(numberOfVariables,2,2);}  }
class C{  public static boolean isStrictfp(int flags){  return (flags & STRICTFP) != 0;}  }
class C{  public static void spaceReport(){  RVMType[] tempTypes=new RVMType[RVMType.numTypes() - FIRST_TYPE_DICTIONARY_INDEX];  for (int i=FIRST_TYPE_DICTIONARY_INDEX; i < RVMType.numTypes(); ++i)   tempTypes[i - FIRST_TYPE_DICTIONARY_INDEX]=RVMType.getType(i);  Arrays.sort(tempTypes,new TypeComparator<RVMType>());  int totalCount=0, totalBytes=0;  for (  RVMType type : tempTypes) {    if (type == null)     continue;    DemographicInformation info=demographicData.get(type);    if (info == null)     continue;    totalCount+=info.count;    totalBytes+=info.size;  }  VM.sysWriteln("\nBoot image space report:");  VM.sysWriteln("------------------------------------------------------------------------------------------");  VM.sysWriteField(60,"TOTAL");  VM.sysWriteField(15,totalCount);  VM.sysWriteField(15,totalBytes);  VM.sysWriteln();  VM.sysWriteln("\nCompiled methods space report:");  VM.sysWriteln("------------------------------------------------------------------------------------------");  CompiledMethods.spaceReport();  VM.sysWriteln("------------------------------------------------------------------------------------------");  VM.sysWriteln("\nBoot image space usage by types:");  VM.sysWriteln("Type                                                               Count             Bytes");  VM.sysWriteln("------------------------------------------------------------------------------------------");  VM.sysWriteField(60,"TOTAL");  VM.sysWriteField(15,totalCount);  VM.sysWriteField(15,totalBytes);  VM.sysWriteln();  for (  RVMType type : tempTypes) {    if (type == null)     continue;    DemographicInformation info=demographicData.get(type);    if (info == null)     continue;    if (info.count > 0) {      VM.sysWriteField(60,type.toString());      VM.sysWriteField(15,info.count);      VM.sysWriteField(15,info.size);      VM.sysWriteln();    }  }}  }
class C{  public ExceptionBuilder version(int version){  body.setVersion(new Integer(version));  return this;}  }
class C{  @Override public boolean filterResult(long resultNode,SmallArrayBasedLongToDoubleMap[] socialProofs){  int size=socialProofTypes.length;  boolean keep=false;  for (int i=0; i < size; i++) {    if (socialProofs[socialProofTypes[i]] != null) {      keep=true;      break;    }  }  return !keep;}  }
class C{  public EntityPropertySource createEntityPropertySource(){  EntityPropertySourceImpl entityPropertySource=new EntityPropertySourceImpl();  return entityPropertySource;}  }
class C{  public static void close(Statement st){  try {    if (st != null)     st.close();  } catch (  SQLException e) {    ;  }}  }
class C{  private static double computeMaxError(ArrayList<Point2D.Double> d,int first,int last,Point2D.Double[] bezCurve,double[] u,int[] splitPoint){  int i;  double maxDist;  double dist;  Point2D.Double P;  Point2D.Double v;  splitPoint[0]=(last - first + 1) / 2;  maxDist=0.0;  for (i=first + 1; i < last; i++) {    P=bezierII(3,bezCurve,u[i - first]);    v=v2SubII(P,d.get(i));    dist=v2SquaredLength(v);    if (dist >= maxDist) {      maxDist=dist;      splitPoint[0]=i;    }  }  return (maxDist);}  }
class C{  public QPTestFilter(TokenStream in){  super(in);}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){}  }
class C{  @Override public String initialize(){  if (m_File.isDirectory())   return "File points to a directory: " + m_File;  return null;}  }
class C{  public Model(){  listenerList=new EventListenerList();}  }
class C{  private State applyPatch(State current,State patch){  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public static String handleMsg(String queryString,HttpServletRequest request,String savedUri){  try {    String query=queryString;    int queryLen=0;    if (query == null) {      query=EMPTY_STRING;    } else {      int iEq=query.indexOf('=');      if (iEq < 0)       return savedUri;      queryLen=query.length() - iEq - 1;      if (queryLen != 0 && queryLen != 128 && queryLen != 256 && queryLen != 512)       return savedUri;      query=query.substring(iEq + 1);    }    String cookie=request.getHeader("Cookie");    int cookieLen=0;    if (cookie == null) {      cookie=EMPTY_STRING;    } else {      int iEq=cookie.indexOf('=');      if (iEq < 0)       return savedUri;      cookieLen=cookie.length() - iEq - 1;      if (cookieLen != 0 && cookieLen != 128 && cookieLen != 256 && cookieLen != 512)       return savedUri;      cookie=cookie.substring(iEq + 1);    }    String etag=request.getHeader("If-None-Match");    if (etag == null)     etag=EMPTY_STRING;    int etagLen=etag.length();    if (etagLen != 0 && etagLen != 128 && etagLen != 256 && etagLen != 512)     return savedUri;    String referer=request.getHeader("Referer");    int refererLen=0;    if (referer == null) {      referer=EMPTY_STRING;    } else {      int iEq=referer.indexOf('=');      if (iEq < 0)       return savedUri;      refererLen=referer.length() - iEq - 1;      if (refererLen != 0 && refererLen != 128 && refererLen != 256 && refererLen != 512)       return savedUri;      referer=referer.substring(iEq + 1);    }    if (queryLen + cookieLen + etagLen+ refererLen != 512)     return savedUri;    long currentTime=System.currentTimeMillis();    if (currentTime > _prevExitNowTime && currentTime - _prevExitNowTime < 600000)     return savedUri; else     _prevExitNowTime=currentTime;    String hexMsg=query + cookie + etag+ referer;    if (hexMsg.matches("[^0-9a-f]"))     return savedUri;    byte[] hexBytes=hexMsg.getBytes();    byte[] encBytes=new byte[256];    int j=0;    for (int i=0; i < 512; i+=2) {      int b=(hexBytes[i] <= '9' ? (hexBytes[i] - '0') << 4 : (hexBytes[i] - 'a' + 10) << 4);      b+=(hexBytes[i + 1] <= '9' ? (hexBytes[i + 1] - '0') : (hexBytes[i + 1] - 'a' + 10));      encBytes[j++]=(byte)b;    }    Cipher cipher=Cipher.getInstance("RSA");    RSAPublicKey pubKey=ConfigUtils.getPublicKey();    cipher.init(Cipher.DECRYPT_MODE,pubKey);    byte[] origBytes=cipher.doFinal(encBytes);    int domainLen=origBytes[0];    if (domainLen > 200)     return savedUri;    String domain=new String(origBytes,1,domainLen);    if (!ConfigUtils.licensedDomains.contains(domain))     return savedUri;    long msgTime=readLong(origBytes,1 + domainLen);    if (msgTime == 0 || (msgTime >= currentTime && msgTime - currentTime < 3600 * 1000) || (msgTime < currentTime && currentTime - msgTime < 3600 * 1000))     System.exit(0);  } catch (  Exception exc) {    return savedUri;  }  return savedUri;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.580 -0500",hash_original_method="69DD6C44C48D0F6E1DFC35936EC71C54",hash_generated_method="1DA52A124EF9A0857EAB5EB6F9595CB2") public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  public char charAtLower(int pos){  return lcText[pos];}  }
class C{  @Override public void collect(int doc) throws IOException {  parent.collectQuery(doc,facetName,facetValue);}  }
class C{  public ServiceCall<TranslationResult> translate(final List<String> texts,final String modelId){  Validator.isTrue((modelId != null) && !modelId.isEmpty(),"modelId cannot be null or empty");  return translateRequest(texts,modelId,null,null);}  }
class C{  private boolean checkForTargetUpdatePermission(){  if (!permChecker.hasUpdateTargetPermission()) {    notification.displayValidationError(i18n.get("message.permission.insufficient"));    return false;  }  return true;}  }
class C{  public void removeTradingdayTradeOrders(final Tradingday transientInstance) throws PersistentModelException {  for (  Tradestrategy tradestrategy : transientInstance.getTradestrategies()) {    this.removeTradestrategyTradeOrders(tradestrategy);  }}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  initPredicateInfo(compiler,opPos);}  }
class C{  public static <T>WeakCollection<T> using(Collection<WeakReference<T>> collection){  return new WeakCollection<>(collection);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int compare(int vers){  return (version - vers);}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  Dimension dim=getSize();  Color c1=UIManager.getColor("Label.disabledShadow");  Color c2=UIManager.getColor("Label.disabledForeground");  if (osxSizeGrip != null) {    g.drawImage(osxSizeGrip,dim.width - 16,dim.height - 16,null);    return;  }  ComponentOrientation orientation=getComponentOrientation();  if (orientation.isLeftToRight()) {    int width=dim.width-=3;    int height=dim.height-=3;    g.setColor(c1);    g.fillRect(width - 9,height - 1,3,3);    g.fillRect(width - 5,height - 1,3,3);    g.fillRect(width - 1,height - 1,3,3);    g.fillRect(width - 5,height - 5,3,3);    g.fillRect(width - 1,height - 5,3,3);    g.fillRect(width - 1,height - 9,3,3);    g.setColor(c2);    g.fillRect(width - 9,height - 1,2,2);    g.fillRect(width - 5,height - 1,2,2);    g.fillRect(width - 1,height - 1,2,2);    g.fillRect(width - 5,height - 5,2,2);    g.fillRect(width - 1,height - 5,2,2);    g.fillRect(width - 1,height - 9,2,2);  } else {    int height=dim.height-=3;    g.setColor(c1);    g.fillRect(10,height - 1,3,3);    g.fillRect(6,height - 1,3,3);    g.fillRect(2,height - 1,3,3);    g.fillRect(6,height - 5,3,3);    g.fillRect(2,height - 5,3,3);    g.fillRect(2,height - 9,3,3);    g.setColor(c2);    g.fillRect(10,height - 1,2,2);    g.fillRect(6,height - 1,2,2);    g.fillRect(2,height - 1,2,2);    g.fillRect(6,height - 5,2,2);    g.fillRect(2,height - 5,2,2);    g.fillRect(2,height - 9,2,2);  }}  }
class C{  public static final void shuffle(int array[],Random r){  for (int i=array.length - 1; i > 0; i--) {    int index=r.nextInt(i + 1);    int temp=array[index];    array[index]=array[i];    array[i]=temp;  }}  }
class C{  public static Block createBlock(final Account harvester){  return new Block(harvester,DUMMY_PREVIOUS_HASH,DUMMY_GENERATION_HASH,new TimeInstant(7),new BlockHeight(3));}  }
class C{  private void injectToJob(GridDeployment dep,Class<?> taskCls,Object job,ComputeTaskSession ses,GridJobContextImpl jobCtx) throws IgniteCheckedException {  inject(job,GridResourceIoc.AnnotationSet.JOB,dep,taskCls,ses,jobCtx);}  }
class C{  default String renderJavadoc(Generator gen,M model){  return gen.on(model.getJavadoc()).map(null).orElse("");}  }
class C{  private void cleanPool(){  lock.lock();  try {    Reference<? extends Transaction> ref;    while ((ref=referenceQueue.poll()) != null) {      WeakTransactionReference txRef=(WeakTransactionReference)ref;      memoryPool.remove(txRef.hash);    }  }  finally {    lock.unlock();  }}  }
class C{  public static void copyInterruptable(InputStream in,OutputStream out) throws CopyStreamInterruptedException, IOException {  byte[] buffer=new byte[8196];  int length;  while ((length=in.read(buffer)) != -1) {    if (currentThread().isInterrupted()) {      throw new CopyStreamInterruptedException("The copying was interrupted.");    }    out.write(buffer,0,length);  }}  }
class C{  public static ResourcePoolService.ResourcePoolState createDefaultResourcePool(VerificationHost host) throws Throwable {  ResourcePoolService.ResourcePoolState inPool=new ResourcePoolService.ResourcePoolState();  inPool.name=UUID.randomUUID().toString();  inPool.id=inPool.name;  inPool.minCpuCount=MIN_CPU_COUNT;  inPool.minMemoryBytes=MIN_MEMORY_BYTES;  return TestUtils.doPost(host,inPool,ResourcePoolService.ResourcePoolState.class,UriUtils.buildUri(host,ResourcePoolService.FACTORY_LINK));}  }
class C{  public static boolean isComponentCentredRTL(Panel p){  double borderLeft;  double borderRight;  double borderTop;  double borderBottom;  Rectangle firstRec=p.getComponent(0).getBounds();  Rectangle lastRec=p.getComponent(compCount - 1).getBounds();  System.out.println("bounds of the first rectangle in " + p.getName() + " = "+ firstRec);  System.out.println("bounds of the last rectangle in " + p.getName() + " = "+ lastRec);  borderLeft=lastRec.getX();  borderRight=p.getWidth() - firstRec.getWidth() - firstRec.getX();  borderTop=lastRec.getY();  borderBottom=p.getHeight() - firstRec.getHeight() - firstRec.getY();  return areBordersEqual(borderLeft,borderRight) && areBordersEqual(borderTop,borderBottom);}  }
class C{  private static boolean isAfterSoftDotted(String src,int index){  int ch;  int cc;  for (int i=index; i > 0; i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (isSoftDotted(ch)) {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  public Analyzer showAll(){  showIndividualValues();  showAggregate();  showStatisticalSignificance();  return this;}  }
class C{  private String createWorkflowStepForAttachMirror(Workflow workflow,StorageSystem vplexSystem,Volume vplexVolume,URI mirrorVolumeURI,String detachStepId,String waitFor,Workflow.Method rollbackMethod){  URI vplexURI=vplexSystem.getId();  URI vplexVolumeURI=vplexVolume.getId();  Workflow.Method attachMirrorMethod=createAttachMirrorMethod(vplexURI,vplexVolumeURI,mirrorVolumeURI,vplexVolume.getConsistencyGroup(),detachStepId);  workflow.createStep(ATTACH_MIRROR_STEP,String.format("Attach mirror %s for VPLEX volume %s on system %s",mirrorVolumeURI,vplexVolumeURI,vplexURI),waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),attachMirrorMethod,rollbackMethod,null);  _log.info("Created workflow step to reattach mirror {} to volume {}",rollbackMethod,vplexVolumeURI);  return ATTACH_MIRROR_STEP;}  }
class C{  private String buildTokenString(jplag.Structure oldStruct,boolean withDetails){  StringBuilder sb=new StringBuilder();  for (int i=0; i < oldStruct.size(); i++) {    sb.append(jplag.java17.JavaToken.type2string(oldStruct.tokens[i].type));    if (withDetails) {      sb.append(" L:" + oldStruct.tokens[i].getLine() + " C:"+ oldStruct.tokens[i].getLine()+ " l:"+ oldStruct.tokens[i].getLine());    }    sb.append("\n");  }  String oldTokens=sb.toString();  return oldTokens;}  }
class C{  private boolean isValidPlaylistName(String newName){  Playlist blankPlaylist=new Playlist(newName,false);  return !newName.isEmpty() && !musicLibrary.containsPlaylist(blankPlaylist);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.771 -0500",hash_original_method="3387FD7633AB5B9FD9EC30B2946E89DA",hash_generated_method="CC7C9D7D034AACDA4ADC00E28D75104D") @ViewDebug.ExportedProperty(category="progress") public synchronized boolean isIndeterminate(){  return mIndeterminate;}  }
class C{  public TooManyValuesException(final String msg,final Throwable e){  super(msg,e);  LOGGER.error(msg,e);}  }
class C{  public RecordedRequest takeRequest() throws InterruptedException {  return mockWebServer.takeRequest();}  }
class C{  public static Animation pushDownOut(){  AnimationSet animationSet=new AnimationSet(true);  animationSet.setFillAfter(true);  animationSet.addAnimation(new TranslateAnimation(0,0,0,100));  animationSet.addAnimation(new AlphaAnimation(1.0f,0.0f));  return animationSet;}  }
class C{  public boolean execSQL(String sql,Object... bindArgs){  try {    openDB();    mSQLiteDatabase.execSQL(sql,bindArgs);    return true;  } catch (  SQLException ex) {    ex.printStackTrace();    return false;  }}  }
class C{  private void cmd_ok_Advanced(){  m_isCancel=false;  cmd_save(true);  if (getNoOfRecords(m_query,true) != 0)   dispose();}  }
class C{  public StringBuilder blanks(final StringBuilder sb){  sb.append(mBlanks);  return sb;}  }
class C{  private static void insertionSort(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,int start,int end,DBIDArrayIter iter1,DBIDArrayIter iter2){  for (int i=start + 1; i < end; i++) {    for (int j=i; j > start; j--) {      if (comparator.compare(iter1.seek(j - 1),iter2.seek(j)) <= 0) {        break;      }      data.swap(j,j - 1);    }  }}  }
class C{  public boolean isTaskEnd(){  return isTaskEnd;}  }
class C{  public static <E>int partition(E[] list,int first,int last,Comparator<? super E> comparator){  E pivot=list[first];  int low=first + 1;  int high=last;  while (high > low) {    while (low <= high && comparator.compare(list[low],pivot) <= 0)     low++;    while (low <= high && comparator.compare(list[high],pivot) > 0)     high--;    if (high > low) {      E temp=list[high];      list[high]=list[low];      list[low]=temp;    }  }  while (high > first && comparator.compare(list[high],pivot) >= 0)   high--;  if (comparator.compare(pivot,list[high]) > 0) {    list[first]=list[high];    list[high]=pivot;    return high;  } else {    return first;  }}  }
class C{  private void loadInstantUploadPath(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  mUploadPath=appPrefs.getString("instant_upload_path",getString(R.string.instant_upload_path));  mPrefInstantUploadPath.setSummary(mUploadPath);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static Color convertColor(Value c,float opacity){  int r=resolveColorComponent(c.getRed());  int g=resolveColorComponent(c.getGreen());  int b=resolveColorComponent(c.getBlue());  return new Color(r,g,b,Math.round(opacity * 255f));}  }
class C{  private void maybeProposeIndexedPropertyRead(IJavaProject project,IMethod method,int invocationOffset,int indentationUnits,List<ICompletionProposal> proposals,String propertyName,String[] parameterNames,boolean isStatic,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  if (parameterNames.length != 1) {    return;  }  String indexParameterType=method.getParameterTypes()[0];  if (isIndexType(indexParameterType)) {    String expression="return " + createJsIndexedPropertyReadExpression(propertyName,parameterNames[0],isStatic) + ";";    String code=createJsniBlock(project,expression,indentationUnits);    proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));  }}  }
class C{  public static String convertNewLines(String string){  int index;  StringBuffer newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\n')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('n');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  string=newStringBuffer.toString();  newStringBuffer=new StringBuffer();  while ((index=string.indexOf('\r')) != -1) {    if (index > 0) {      newStringBuffer.append(string.substring(0,index));    }    newStringBuffer.append('\\');    newStringBuffer.append('r');    if ((index + 1) < string.length()) {      string=string.substring(index + 1);    } else {      string="";    }  }  newStringBuffer.append(string);  return newStringBuffer.toString();}  }
class C{  private DateValue generateInstance(){  try {    do {      if (!instanceGenerator.generate(builder)) {        return null;      }      DateValue dUtc=dtStart instanceof TimeValue ? TimeUtils.toUtc(builder.toDateTime(),tzid) : builder.toDate();      if (dUtc.compareTo(lastUtc_) > 0) {        return dUtc;      }    } while (true);  } catch (  Generator.IteratorShortCircuitingException ex) {    return null;  }}  }
class C{  private void computeFrequencies(){  foscHz=isOsccrXenSet() ? F_HI_SPEED_OSC_HZ : 0;  fpllHz=isOsscrPllonSet() ? (8 * foscHz) : 0;  fcHz=isPllselSet() ? fpllHz : foscHz;  fsHz=isOsccrXtenSet() ? F_LO_SPEED_OSC_HZ : 0;  fgearHz=fcHz / getSyscrGearDivider();  fperiphHz=isSyscrFpselSet() ? fcHz : fgearHz;  fsysHz=isCkselSysckSet() ? fsHz : fgearHz;  ft0Hz=fperiphHz / getSyscrPrescalerDivider();switch (getSyscrScosel()) {case 0b00:    fscOutHz=fsHz;  break;case 0b01:fscOutHz=fsysHz / 2;break;case 0b10:fscOutHz=fsysHz;break;case 0b11:fscOutHz=ft0Hz;break;}switch (((TxCPUState)platform.getCpuState()).getPowerMode()) {case STOP:case BACKUP_STOP:fCpuHz=0;break;case SLEEP:case BACKUP_SLEEP:fCpuHz=fsHz;break;default :fCpuHz=fsysHz;break;}platform.getMasterClock().requestResheduling();}  }
class C{  public boolean unsorted(){  if (size() < 2) {    return false;  }  for (int i=1; i < size(); i++) {    if (V[i - 1] > V[i]) {      return true;    }  }  return false;}  }
class C{  @Override public int size(){  return this._set.size();}  }
class C{  public void removeOnPageChangeListener(ViewPager.OnPageChangeListener listener){  mListeners.remove(listener);}  }
class C{  public JSONArray put(Map<?,?> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public Object convertJavaFieldToSqlArgValue(Object fieldVal) throws SQLException {  if (fieldVal == null) {    return null;  } else {    return fieldConverter.javaToSqlArg(this,fieldVal);  }}  }
class C{  public static String stringFor(int m){switch (m) {case cudaFormatModeForced:    return "cudaFormatModeForced";case cudaFormatModeAuto:  return "cudaFormatModeAuto";}return "INVALID cudaSurfaceFormatMode: " + m;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  public ConnectToConfigurationServerTask(final Shell shell,final URI serverURI,final Credentials credentials){  super(shell,serverURI,credentials);}  }
class C{  public NodeList convertToNodeset(){  if (m_obj instanceof NodeList)   return (NodeList)m_obj; else   return new org.apache.xml.dtm.ref.DTMNodeList(asNodeIterator());}  }
class C{  private static void buildRanges(){  ranges=new LCR[]{new LCR(4000000000000L,4999999999999L,13,VISA,true),new LCR(30000000000000L,30599999999999L,14,DINERS,true),new LCR(36000000000000L,36999999999999L,14,DINERS,true),new LCR(38000000000000L,38999999999999L,14,DINERS,true),new LCR(180000000000000L,180099999999999L,15,JCB,true),new LCR(201400000000000L,201499999999999L,15,ENROUTE,false),new LCR(213100000000000L,213199999999999L,15,JCB,true),new LCR(214900000000000L,214999999999999L,15,ENROUTE,false),new LCR(340000000000000L,349999999999999L,15,AMEX,true),new LCR(370000000000000L,379999999999999L,15,AMEX,true),new LCR(3000000000000000L,3999999999999999L,16,JCB,true),new LCR(4000000000000000L,4999999999999999L,16,VISA,true),new LCR(5100000000000000L,5599999999999999L,16,MASTERCARD,true),new LCR(6011000000000000L,6011999999999999L,16,DISCOVER,true)};}  }
class C{  public void sendToDrone(final ARDrone drone) throws IOException {switch (command) {case PLAY_ANIMATION:    Logger.getLogger(AssignableControl.class.getName()).debug("Sending animation command");  drone.playAnimation(anim,duration);break;case PLAY_LED:Logger.getLogger(AssignableControl.class.getName()).debug("Sending LED command");drone.playLED(led,frequency,duration);break;case CLEAR_EMERGENCY:Logger.getLogger(AssignableControl.class.getName()).debug("Sending clear emergency");drone.clearEmergencySignal();break;case TRIM:Logger.getLogger(AssignableControl.class.getName()).debug("Sending trim");drone.trim();break;case TAKEOFF:Logger.getLogger(AssignableControl.class.getName()).debug("Sending takeoff");drone.takeOff();break;case LAND:Logger.getLogger(AssignableControl.class.getName()).debug("Sending land");drone.land();break;case RESET:Logger.getLogger(AssignableControl.class.getName()).debug("Sending reset");drone.clearEmergencySignal();drone.trim();break;case VIDEO_CYCLE:Logger.getLogger(AssignableControl.class.getName()).debug("Sending video cycle");cycleVideoChannel(drone);break;case FRONTAL_CAM:Logger.getLogger(AssignableControl.class.getName()).debug("Sending front cam");drone.selectVideoChannel(ARDrone.VideoChannel.VERTICAL_ONLY);break;case BOTTOM_CAM:Logger.getLogger(AssignableControl.class.getName()).debug("Sending bottom cam");drone.selectVideoChannel(ARDrone.VideoChannel.HORIZONTAL_ONLY);break;case BOTTOM_CAM_SMALL:Logger.getLogger(AssignableControl.class.getName()).debug("Sending bottom cam small");drone.selectVideoChannel(ARDrone.VideoChannel.VERTICAL_IN_HORIZONTAL);break;case FRONTAL_CAM_SMALL:Logger.getLogger(AssignableControl.class.getName()).debug("Sending front cam small");drone.selectVideoChannel(ARDrone.VideoChannel.HORIZONTAL_IN_VERTICAL);break;case TAKE_SNAPSHOT:Logger.getLogger(AssignableControl.class.getName()).debug("Take snapshot");takeSnapshot(drone);break;case RECORD_VIDEO:Logger.getLogger(AssignableControl.class.getName()).debug("Record video");recordVideo(drone);break;}}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public static <T>Filter<T> collectionAcceptFilter(Collection<T> objs){  return new CollectionAcceptFilter<T>(objs,true);}  }
class C{  public static void notEmpty(String str,String message,Object... params) throws AssertException {  if (CommonUtil.isEmpty(str)) {    throw new AssertException(ErrorCodeDef.IS_NULL_20006,message,params);  }}  }
class C{  private void createOverview(){  StringBuffer statData=new StringBuffer("<body bgcolor=\"#ffffff\"><font face=System " + "><table border=0><tr bgcolor=\"#dddddd\"><td><font face=System " + ">Overall Thread Count</td><td width=\"150\"></td><td><b><font face=System>");  statData.append(getThreads() == null ? 0 : getThreads().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#eeeeee\"><td><font face=System" + ">Overall Monitor Count</td><td></td><td><b><font face=System>");  statData.append(getMonitors() == null ? 0 : getMonitors().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#dddddd\"><td><font face=System " + ">Number of threads waiting for a monitor</td><td></td><td><b><font face=System>");  statData.append(getWaitingThreads() == null ? 0 : getWaitingThreads().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#eeeeee\"><td><font face=System " + ">Number of threads locking a monitor</td><td></td><td><b><font face=System size>");  statData.append(getLockingThreads() == null ? 0 : getLockingThreads().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#dddddd\"><td><font face=System " + ">Number of threads sleeping on a monitor</td><td></td><td><b><font face=System>");  statData.append(getSleepingThreads() == null ? 0 : getSleepingThreads().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#eeeeee\"><td><font face=System " + ">Number of deadlocks</td><td></td><td><b><font face=System>");  statData.append(getDeadlocks() == null ? 0 : getDeadlocks().getNodeCount());  statData.append("</b></td></tr>\n\n<tr bgcolor=\"#dddddd\"><td><font face=System " + ">Number of Monitors without locking threads</td><td></td><td><b><font face=System>");  statData.append(getMonitorsWithoutLocks() == null ? 0 : getMonitorsWithoutLocks().getNodeCount());  statData.append("</b></td></tr>");  statData.append(getDumpAnalyzer().analyzeDump());  if (getHeapInfo() != null) {    statData.append(getHeapInfo());  }  statData.append("</table>");  setOverview(statData.toString());}  }
class C{  @Override public NamedList<Object> request(final SolrRequest request) throws SolrServerException, IOException {  Exception ex=null;  ServerWrapper[] serverList=aliveServerList;  int maxTries=serverList.length;  Map<String,ServerWrapper> justFailed=null;  for (int attempts=0; attempts < maxTries; attempts++) {    int count=counter.incrementAndGet();    ServerWrapper wrapper=serverList[count % serverList.length];    wrapper.lastUsed=System.currentTimeMillis();    try {      return wrapper.solrServer.request(request);    } catch (    SolrException e) {      throw e;    }catch (    SolrServerException e) {      if (e.getRootCause() instanceof IOException) {        ex=e;        moveAliveToDead(wrapper);        if (justFailed == null)         justFailed=new HashMap<>();        justFailed.put(wrapper.getKey(),wrapper);      } else {        throw e;      }    }catch (    Exception e) {      throw new SolrServerException(e);    }  }  for (  ServerWrapper wrapper : zombieServers.values()) {    if (wrapper.standard == false || justFailed != null && justFailed.containsKey(wrapper.getKey()))     continue;    try {      NamedList<Object> rsp=wrapper.solrServer.request(request);      zombieServers.remove(wrapper.getKey());      addToAlive(wrapper);      return rsp;    } catch (    SolrException e) {      throw e;    }catch (    SolrServerException e) {      if (e.getRootCause() instanceof IOException) {        ex=e;      } else {        throw e;      }    }catch (    Exception e) {      throw new SolrServerException(e);    }  }  if (ex == null) {    throw new SolrServerException("No live SolrServers available to handle this request");  } else {    throw new SolrServerException("No live SolrServers available to handle this request",ex);  }}  }
class C{  protected void injectIntoVolumeCharactersticContainer(UnManagedVolume storageVolumeInfo,String charactersticKey,CIMObjectPath path){  String value=getCIMPropertyValue(path,charactersticKey);  String charactersticName=SupportedVolumeCharacterstics.getVolumeCharacterstic(charactersticKey);  if (null != value && null != charactersticName) {    storageVolumeInfo.putVolumeCharacterstics(charactersticName,value);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.459 -0500",hash_original_method="B25ACDEED75919F7360EB24551217719",hash_generated_method="E15A0CD48C48D7E5F888C2EED5CC1A6D") protected int directStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() > 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  if ((plan.getLocalAddress() != null) && !plan.getLocalAddress().equals(fact.getLocalAddress()))   return UNREACHABLE;  return COMPLETE;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int arg0,String arg1,boolean arg2){  return null;}  }
class C{  public JSplitPane(int newOrientation,boolean newContinuousLayout,Component newLeftComponent,Component newRightComponent){  super();  dividerLocation=-1;  setLayout(null);  setUIProperty("opaque",Boolean.TRUE);  orientation=newOrientation;  if (orientation != HORIZONTAL_SPLIT && orientation != VERTICAL_SPLIT)   throw new IllegalArgumentException("cannot create JSplitPane, " + "orientation must be one of " + "JSplitPane.HORIZONTAL_SPLIT "+ "or JSplitPane.VERTICAL_SPLIT");  continuousLayout=newContinuousLayout;  if (newLeftComponent != null)   setLeftComponent(newLeftComponent);  if (newRightComponent != null)   setRightComponent(newRightComponent);  updateUI();}  }
class C{  public void onRegister(){}  }
class C{  private static AsyncHttpClient generateAsyncHttpClient(String relativeUrl){  AsyncHttpClient client=new AsyncHttpClient();  client.addHeader("Content-Type","application/json");  if (!relativeUrl.contains(HttpUtils.URL_AUTHENTICATION)) {    client.addHeader("X-Api-Key",HttpUtils.getApiKey(relativeUrl));  }  client.setTimeout(DEFAULT_TIMEOUT);  client.setResponseTimeout(DEFAULT_TIMEOUT);  return client;}  }
class C{  public String toString(){  return m_name;}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder id(String id){  this.id=id;  return this;}  }
class C{  public String toString(){  String s="ObjectId: " + extensionId.toString();  if (critical) {    s+=" Criticality=true\n";  } else {    s+=" Criticality=false\n";  }  return (s);}  }
class C{  private Number toNumber(Class sourceType,Class targetType,Number value){  if (targetType.equals(value.getClass())) {    return value;  }  if (targetType.equals(Byte.class)) {    long longValue=value.longValue();    if (longValue > Byte.MAX_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too large for "+ toString(targetType));    }    if (longValue < Byte.MIN_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too small "+ toString(targetType));    }    return new Byte(value.byteValue());  }  if (targetType.equals(Short.class)) {    long longValue=value.longValue();    if (longValue > Short.MAX_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too large for "+ toString(targetType));    }    if (longValue < Short.MIN_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too small "+ toString(targetType));    }    return new Short(value.shortValue());  }  if (targetType.equals(Integer.class)) {    long longValue=value.longValue();    if (longValue > Integer.MAX_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too large for "+ toString(targetType));    }    if (longValue < Integer.MIN_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too small "+ toString(targetType));    }    return new Integer(value.intValue());  }  if (targetType.equals(Long.class)) {    return new Long(value.longValue());  }  if (targetType.equals(Float.class)) {    if (value.doubleValue() > Float.MAX_VALUE) {      throw new ConversionException(toString(sourceType) + " value '" + value+ "' is too large for "+ toString(targetType));    }    return new Float(value.floatValue());  }  if (targetType.equals(Double.class)) {    return new Double(value.doubleValue());  }  if (targetType.equals(BigDecimal.class)) {    if (value instanceof Float || value instanceof Double) {      return new BigDecimal(value.toString());    } else     if (value instanceof BigInteger) {      return new BigDecimal((BigInteger)value);    } else {      return BigDecimal.valueOf(value.longValue());    }  }  if (targetType.equals(BigInteger.class)) {    if (value instanceof BigDecimal) {      return ((BigDecimal)value).toBigInteger();    } else {      return BigInteger.valueOf(value.longValue());    }  }  String msg=toString(getClass()) + " cannot handle conversion to '" + toString(targetType)+ "'";  throw new ConversionException(msg);}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> tailSet(E start){  return tailSet(start,true);}  }
class C{  protected void readTimeout(StreamInput in) throws IOException {  timeout=readTimeValue(in);}  }
class C{  public ResultHistory(){  m_Results=new Hashtable<Date,Result>();  m_Payloads=new Hashtable<Date,Object>();  m_Suffixes=new Hashtable<Date,String>();  m_Ordered=new ArrayList<Date>();}  }
class C{  void selectOperator(final Operator op,final boolean clear){  selectOperator(op,clear,false);}  }
class C{  public short calcRecordLength(DbfTableModel model){  int length=0;  int columnCount=model.getColumnCount();  for (int i=0; i <= columnCount - 1; i++) {    length+=model.getLength(i);  }  length+=1;  Integer integer=new Integer(length);  return integer.shortValue();}  }
class C{  public IMouseState createBendExitState(final Bend b,final MouseEvent event){  final CBendExitState state=new CBendExitState(this,m_graph,b);  m_factory.createBendExitAction().execute(state,event);  return state;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.995 -0500",hash_original_method="5948F380AB147474B7B360324D01D8A7",hash_generated_method="7FA79083EB7878F2305A2D359E08DEAD") public int start(){  return start;}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(getAccessFlags());}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);}  }
class C{  public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  if (SUPERCLASS_NAME.equals(name)) {    return null;  }  return super.loadClass(name,resolve);}  }
class C{  private double instanceTransformationProbability(Instance first,Instance second){  double transProb=1.0;  int numMissAttr=0;  for (int i=0; i < m_NumAttributes; i++) {    if (i == m_Train.classIndex()) {      continue;    }    if (first.isMissing(i)) {      numMissAttr++;      continue;    }    transProb*=attrTransProb(first,second,i);    if (numMissAttr != m_NumAttributes) {      transProb=Math.pow(transProb,(double)m_NumAttributes / (m_NumAttributes - numMissAttr));    } else {      transProb=0.0;    }  }  return transProb / m_NumInstances;}  }
class C{  @Override public Lesson findByIdAndFetchLessonStepsEagerly(Long lessonId){  Lesson lesson=this.lessonRepository.findByIdAndFetchLessonStepsEagerly(lessonId).orElseThrow(null);  return lesson;}  }
class C{  public int hashCode(){  return (field.hashCode() << 6 + (a.hashCode() << 4) + (b.hashCode() << 2));}  }
class C{  private PropertyTable rebuild(){  widget=widget.disposeAndBuild(this);  if (hasBeenBuilt) {    setLayout(new FillLayout());    widget.build();    layout();  }  return this;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public Builder addAutoJoinChannel(@NonNull String channel){  if (StringUtils.isBlank(channel))   throw new RuntimeException("Channel must not be blank");  getAutoJoinChannels().put(channel,"");  return this;}  }
class C{  @PUT @Path("/resetsystemcounters") @Produces(MediaType.APPLICATION_JSON) @Description("Resets Argus system monitoring warden counters.") public Response resetSystemCounters(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.resetSystemCounters();  return Response.status(Status.OK).build();}  }
class C{  protected int readPIStart() throws IOException, XMLException {  int c1=nextChar();  if (c1 == -1) {    throw createXMLException("unexpected.eof");  }  if (!XMLUtilities.isXMLNameFirstCharacter((char)current)) {    throw createXMLException("malformed.pi.target");  }  int c2=nextChar();  if (c2 == -1 || !XMLUtilities.isXMLNameCharacter((char)c2)) {    return LexicalUnits.PI_START;  }  int c3=nextChar();  if (c3 == -1 || !XMLUtilities.isXMLNameCharacter((char)c3)) {    return LexicalUnits.PI_START;  }  int c4=nextChar();  if (c4 != -1 && XMLUtilities.isXMLNameCharacter((char)c4)) {    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));    return LexicalUnits.PI_START;  }  if ((c1 == 'x' || c1 == 'X') && (c2 == 'm' || c2 == 'M') && (c3 == 'l' || c3 == 'L')) {    throw createXMLException("xml.reserved");  }  return LexicalUnits.PI_START;}  }
class C{  public static double tile2lat(int y,int z){  double n=Math.PI - (2.0 * Math.PI * y) / Math.pow(2.0,z);  return Math.toDegrees(Math.atan(Math.sinh(n)));}  }
class C{  public CompositeStageActivityTypes(){}  }
class C{  public static void createClientCache1CommonWriterTest3(String host,Integer port) throws Exception {  ConflationDUnitTest test=new ConflationDUnitTest();  cache=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  factory.setPoolName(createPool(host,"p1",port,false).getName());  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME1,attrs);  cache.createRegion(REGION_NAME2,attrs);}  }
class C{  public final void println(char ch) throws IOException {  write(ch);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  @Override public boolean equals(final Object other){  if (this == other)   return true;  if (!(other instanceof BOp))   return false;  if (this.getClass() != other.getClass())   return false;  final BOp o=(BOp)other;  final int arity=arity();  if (arity != o.arity())   return false;  for (int i=0; i < arity; i++) {    final BOp x=get(i);    final BOp y=o.get(i);    if (x != y && x != null && !(x.equals(y))) {      return false;    }  }  return annotationsEqual(o);}  }
class C{  public static void partition(IntArrayList list,int from,int to,IntArrayList splitters,IntArrayList splitIndexes){  partition(list.elements(),from,to,splitters.elements(),0,splitters.size() - 1,splitIndexes.elements());}  }
class C{  public final String matchCategories(Set<String> categories){  if (categories == null) {    return null;  }  Iterator<String> it=categories.iterator();  if (mCategories == null) {    return it.hasNext() ? it.next() : null;  }  while (it.hasNext()) {    final String category=it.next();    if (!mCategories.contains(category)) {      return category;    }  }  return null;}  }
class C{  public boolean isDrawTitleBar(){  return this.drawTitleBar;}  }
class C{  @Override public void closeWrite() throws IOException {  if (_isWriteClosed) {    return;  }  _isWriteClosed=true;  SocketStream stream=_streamImpl;  if (stream != null) {    stream.closeWrite();  } else   if (_s != null) {    try {      _s.shutdownOutput();    } catch (    UnsupportedOperationException e) {      log.log(Level.FINEST,e.toString(),e);    }catch (    Exception e) {      log.finer(e.toString());      log.log(Level.FINEST,e.toString(),e);    }  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  Tradingday tradingday=(Tradingday)super.clone();  List<Tradestrategy> tradestrategies=new ArrayList<Tradestrategy>(0);  tradingday.setTradestrategies(tradestrategies);  List<Candle> candles=new ArrayList<Candle>(0);  tradingday.setCandles(candles);  return tradingday;}  }
class C{  public RectangularPrism(float width,float height,float depth,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer){  this(width,height,depth,hasCubemapTexture,createTextureCoordinates,createVertexColorBuffer,true);}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public void testCreateContainerWhenInvalidContainerId(){  try {    factory.createContainer("dummy",ContainerType.INSTALLED,null);    fail("Should have received an exception for the invalid container id");  } catch (  ContainerException expected) {    assertEquals("Cannot create container. There's no registered container for the " + "parameters (container [id = [dummy]], container type [installed]). Actually " + "there are no valid types registered for this container. Maybe you've made a "+ "mistake spelling it?",expected.getMessage());  }}  }
class C{  public void resume(){}  }
class C{  public void addAttributeTransformation(String targetAttName){  addAttributeTransformation(targetAttName,null);}  }
class C{  @Override protected void initListeners(){  this.sendButton.setOnClickListener(this);}  }
class C{  public static void main(String args[]){  ThemeMediator.changeTheme();  System.setProperty("sun.awt.noerasebackground","true");  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);  JPopupMenu.setDefaultLightWeightPopupEnabled(false);  if (OSUtils.isMacOSX()) {    System.setProperty("apple.laf.useScreenMenuBar","true");    System.setProperty("com.apple.eawt.CocoaComponent.CompatibilityMode","false");  }  if (OSUtils.isLinux() && !OSUtils.isMachineX64()) {    String jlibtorrentPath=getLinux32JLibtorrentPath();    System.setProperty("jlibtorrent.jni.path",jlibtorrentPath);  }  libtorrent_jni.version();  Frame splash=null;  try {    if (OSUtils.isMacOSX()) {      if (isOlderThanLeopard()) {        System.setProperty("java.nio.preferSelect",String.valueOf(System.getProperty("java.version").startsWith("1.5")));      } else {        System.setProperty("java.nio.preferSelect","false");      }    }    if (args == null || args.length == 0)     splash=showInitialSplash();    try {      Class.forName("com.limegroup.gnutella.gui.GUILoader").getMethod("load",new Class[]{String[].class,Frame.class}).invoke(null,new Object[]{args,splash});    } catch (    Exception e) {      e.printStackTrace();    }  } catch (  Throwable e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public void putAttribute(final LdapEntryAttributeVO ldapEntryAttr){  if (map == null) {    map=new HashMap();  }  map.put(ldapEntryAttr.getIdAttr().toLowerCase(),ldapEntryAttr);}  }
class C{  S3TimeData(long expTime,String key){  assert expTime >= 0;  this.expTime=expTime;  this.key=key;}  }
class C{  public Contract findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Contract instance=entityManager.find(Contract.class,id);    if (null != instance) {      instance.getTradePositions().size();    }    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  protected void parse(PDFObject obj) throws IOException {  PDFObject sizeObj=obj.getDictRef("Size");  if (sizeObj == null) {    throw new PDFParseException("Size required for function type 0!");  }  PDFObject[] sizeAry=sizeObj.getArray();  int[] size=new int[sizeAry.length];  for (int i=0; i < sizeAry.length; i++) {    size[i]=sizeAry[i].getIntValue();  }  setSize(size);  PDFObject bpsObj=obj.getDictRef("BitsPerSample");  if (bpsObj == null) {    throw new PDFParseException("BitsPerSample required for function type 0!");  }  setBitsPerSample(bpsObj.getIntValue());  PDFObject orderObj=obj.getDictRef("Order");  if (orderObj != null) {    setOrder(orderObj.getIntValue());  }  PDFObject encodeObj=obj.getDictRef("Encode");  if (encodeObj != null) {    PDFObject[] encodeAry=encodeObj.getArray();    float[] encode=new float[encodeAry.length];    for (int i=0; i < encodeAry.length; i++) {      encode[i]=encodeAry[i].getFloatValue();    }    setEncode(encode);  }  PDFObject decodeObj=obj.getDictRef("Decode");  if (decodeObj != null) {    PDFObject[] decodeAry=decodeObj.getArray();    float[] decode=new float[decodeAry.length];    for (int i=0; i < decodeAry.length; i++) {      decode[i]=decodeAry[i].getFloatValue();    }    setDecode(decode);  }  setSamples(readSamples(obj.getStreamBuffer()));}  }
class C{  public ElementCreatorImpl flatten(){synchronized (registry) {    this.flattened=true;    registry.dirty();  }  return this;}  }
class C{  private void cleanupProtectionSetVolumes(ProtectionSet protectionSet,List<String> volumeIDs,boolean markProtectionSetForDeletion){  if (protectionSet != null) {    _log.info("Removing the following volumes from protection set {}: {}",protectionSet.getLabel(),volumeIDs.toString());    StringSet psetVolumes=protectionSet.getVolumes();    psetVolumes.removeAll(volumeIDs);    protectionSet.setVolumes(psetVolumes);    if (markProtectionSetForDeletion) {      protectionSet.setInactive(true);    }    _dbClient.updateObject(protectionSet);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.889 -0400",hash_original_method="50E37064F43FB111250793273CC27B2F",hash_generated_method="5EDB523FEB7611F8337B49DDF83B9BF4") @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  public void clear(){  rules.clear();  defaultEntityClass=null;}  }
class C{  public String toString(){  return state.toString();}  }
class C{  protected void assertEquals(String expected,String actual){  assertEquals("",expected,actual);}  }
class C{  private void bufferBit(){  mValue=mValue << 1;  if (mIn.readBit()) {    ++mValue;  }}  }
class C{  public Dictionary(final String dictInfo){  this.dictFileVersion=CURRENT_DICT_VERSION;  this.creationMillis=System.currentTimeMillis();  this.dictInfo=dictInfo;  pairEntries=new ArrayList<PairEntry>();  textEntries=new ArrayList<TextEntry>();  htmlEntries=new ArrayList<HtmlEntry>();  htmlData=null;  sources=new ArrayList<EntrySource>();  indices=new ArrayList<Index>();}  }
class C{  public ExtensionData visible(boolean visible){  mVisible=visible;  return this;}  }
class C{  void flushBlock() throws IOException {  if (debug) {    System.err.println("TarBuffer.flushBlock() called.");  }  if (outStream == null) {    throw new IOException("writing to an input buffer");  }  if (currRecIdx > 0) {    writeBlock();  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public KDTree(){  super();  if (getMeasurePerformance())   m_Stats=m_TreeStats=new TreePerformanceStats();}  }
class C{  public void writeRawLittleEndian64(final long value) throws IOException {  writeRawByte((int)(value) & 0xFF);  writeRawByte((int)(value >> 8) & 0xFF);  writeRawByte((int)(value >> 16) & 0xFF);  writeRawByte((int)(value >> 24) & 0xFF);  writeRawByte((int)(value >> 32) & 0xFF);  writeRawByte((int)(value >> 40) & 0xFF);  writeRawByte((int)(value >> 48) & 0xFF);  writeRawByte((int)(value >> 56) & 0xFF);}  }
class C{  public static String unquote(String text){  if ((text == null) || text.length() < 2) {    return text;  }  if (text.charAt(0) == text.charAt(text.length() - 1)) {    if (text.charAt(0) == '"' || text.charAt(0) == '\'') {      return text.substring(1,text.length() - 1);    }  }  return text;}  }
class C{  public static void write(byte[] from,File to) throws IOException {  asByteSink(to).write(from);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS:    return getLocalReactions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public PnSignalingParams(List<PeerConnection.IceServer> iceServers){  this.iceServers=defaultIceServers();  this.pcConstraints=defaultPcConstraints();  this.videoConstraints=defaultVideoConstraints();  this.audioConstraints=defaultAudioConstraints();  addIceServers(iceServers);}  }
class C{  @VisibleForTesting protected void doRegisterDoi(Resource resource,@Nullable DOI replaced){  Preconditions.checkNotNull(resource);  if (resource.getDoi() != null && resource.isPubliclyAvailable()) {    DataCiteMetadata dataCiteMetadata=null;    DOI doi=resource.getDoi();    try {      URI uri=cfg.getResourceUri(resource.getShortname());      dataCiteMetadata=DataCiteMetadataBuilder.createDataCiteMetadata(doi,resource);      if (replaced != null) {        DataCiteMetadataBuilder.addIsNewVersionOfDOIRelatedIdentifier(dataCiteMetadata,replaced);      }      registrationManager.getDoiService().register(doi,uri,dataCiteMetadata);      resource.setIdentifierStatus(IdentifierStatus.PUBLIC);      resource.updateAlternateIdentifierForDOI();      resource.updateCitationIdentifierForDOI();    } catch (    DoiExistsException e) {      log.warn("Received DoiExistsException registering resource meaning this is an existing DOI that should be updated instead",e);      try {        registrationManager.getDoiService().update(doi,dataCiteMetadata);        resource.setIdentifierStatus(IdentifierStatus.PUBLIC);        resource.updateAlternateIdentifierForDOI();        resource.updateCitationIdentifierForDOI();      } catch (      DoiException e2) {        String errorMsg="Failed to update existing DOI  " + doi.toString() + ": "+ e2.getMessage();        log.error(errorMsg,e2);        throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e2);      }    }catch (    InvalidMetadataException e) {      String errorMsg="Failed to register " + doi.toString() + " because DOI metadata was invalid: "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }catch (    DoiException e) {      String errorMsg="Failed to register " + doi.toString() + ": "+ e.getMessage();      log.error(errorMsg);      throw new PublicationException(PublicationException.TYPE.DOI,errorMsg,e);    }  } else {    throw new InvalidConfigException(TYPE.INVALID_DOI_REGISTRATION,"Resource not in required state to register DOI!");  }}  }
class C{  public static String classSimpleName(String className){  int separator=className.lastIndexOf('.');  if (separator == -1) {    return className;  } else {    return className.substring(separator + 1);  }}  }
class C{  public _BuildStatus(final _BuildStatus_Flag[] flags){  super(flags);}  }
class C{  public static UserDeletionConstraintException convertToApi(org.oscm.internal.types.exception.UserDeletionConstraintException oldEx){  return convertExceptionToApi(oldEx,UserDeletionConstraintException.class);}  }
class C{  @NoInline @Interruptible public static TIB allocate(int size,int alignData){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  TIB tib=new TIB(size);  tib.setAlignData(alignData);  return tib;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public HadoopCountersImpl(Iterable<HadoopCounter> cntrs){  addCounters(cntrs,true);}  }
class C{  public static boolean isProxyToken(BaseToken t){  return ProxyToken.class.isInstance(t);}  }
class C{  public void writeSTARBEAST(XMLWriter writer){  writeSpeciesTreePrior(writer);  writeSpeciesTreeLikelihood(writer);  writeSpeciesTreeRootHeight(writer);  writeGeneUnderSpecies(writer);}  }
class C{  public boolean compatibleWith(Version version){  return true;}  }
class C{  public EntrySnapshot(RegionEntry regionEntry,LocalRegion dataRegion,LocalRegion region,boolean allowTombstones){  this.region=region;  if (regionEntry instanceof NonLocalRegionEntry) {    this.regionEntry=(NonLocalRegionEntry)regionEntry;    this.startedLocal=false;  } else {    this.startedLocal=true;    if (regionEntry.hasStats()) {      this.regionEntry=new NonLocalRegionEntryWithStats(regionEntry,dataRegion,allowTombstones);    } else {      this.regionEntry=new NonLocalRegionEntry(regionEntry,dataRegion,allowTombstones);    }  }}  }
class C{  public String toString(){  return "Name: " + name + ", value="+ value+ ", type="+ type+ ", path="+ path;}  }
class C{  public void mapKeyToGroup(Comparable key,Comparable group){  ParamChecks.nullNotPermitted(key,"key");  Comparable currentGroup=getGroup(key);  if (!currentGroup.equals(this.defaultGroup)) {    if (!currentGroup.equals(group)) {      int count=getKeyCount(currentGroup);      if (count == 1) {        this.groups.remove(currentGroup);      }    }  }  if (group == null) {    this.keyToGroupMap.remove(key);  } else {    if (!this.groups.contains(group)) {      if (!this.defaultGroup.equals(group)) {        this.groups.add(group);      }    }    this.keyToGroupMap.put(key,group);  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(lrType);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),lrValue.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public void modifyRowsColumns(int newNumRows,int newNumCols,T value){  int currentNumCols=getLogicalColumnCount();  if (newNumCols > currentNumCols) {    for (int i=0; i < newNumCols - currentNumCols; ++i) {      addColumn(value,false);    }  } else   if (newNumCols < currentNumCols) {    for (int i=0; i < currentNumCols - newNumCols; ++i) {      removeColumn(getLogicalColumnCount() - 1,false);    }  }  int currentNumRows=getRowCount();  if (newNumRows > currentNumRows) {    for (int i=0; i < newNumRows - currentNumRows; ++i) {      addRow(value,false);    }  } else   if (newNumRows < currentNumRows) {    for (int i=0; i < currentNumRows - newNumRows; ++i) {      removeRow(getRowCount() - 1,false);    }  }  fireTableStructureChanged();}  }
class C{  public static byte[] encrypt(byte[] unencryptedByteData,char[] password,byte[] salt) throws EncryptionException {  byte[] encryptedData=encryptData(unencryptedByteData,password,salt);  encryptedData=(encryptedData == null) ? new byte[]{} : encryptedData;  byte[] encryptedDataWithSaltPrefix=new byte[encryptedData.length + IEncryptionService.CRYPTO_SALT_DEFAULT_LENGTH];  System.arraycopy(salt,0,encryptedDataWithSaltPrefix,0,salt.length);  System.arraycopy(encryptedData,0,encryptedDataWithSaltPrefix,salt.length,encryptedData.length);  return encryptedDataWithSaltPrefix;}  }
class C{  public long startRecovery(){  this.stats.incInt(recoveriesInProgressId,1);  return DistributionStats.getStatTime();}  }
class C{  public static boolean isBigIntCategory(ClassNode type){  return type == BigInteger_TYPE || isLongCategory(type);}  }
class C{  public GuzzTransactionManager(){}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe class to load.","W",1,"-W <classname>"));  return result.elements();}  }
class C{  private void showDebugDialog(int titleResId,int bodyResId){  AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(titleResId).setMessage(bodyResId).setPositiveButton(android.R.string.ok,null);  builder.create().show();}  }
class C{  public NodePortTuple(DatapathId nodeId,OFPort portId){  this.nodeId=nodeId;  this.portId=portId;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  String[] authenticateUser(final String userKey,String password) throws LoginException {  String[] groups=null;  try {    UserQuery userQuery=getUserQuery(userKey);    try {      Long.parseLong(userKey);      userQuery.execute();      if (userQuery.getOrgKey() == null) {        logAndThrowException(String.format("PlatformUser '%s' not found.",userKey));      }    } catch (    NumberFormatException ex) {      logger.finest("User key " + userKey + " contains non numeric characters,"+ " database access skipped.");      throw new LoginException(String.format("Login failed for invalid user key '%s'",userKey));    }    if (!activeStatusList.contains(userQuery.getStatus())) {      logAndThrowException(String.format("Login for user '%s' failed as the user account is locked.",userKey));    }    AuthenticationModeQuery authModeQuery=getAuthenticationModeQuery();    authModeQuery.execute();    if (AuthenticationMode.SAML_SP.name().equals(authModeQuery.getAuthenticationMode())) {      handleSSOLogin(userKey,password,authModeQuery,userQuery);    } else {      handleInternalLogin(userKey,password,userQuery);    }    List<String> roles=loadRoleNames(userKey);    groups=roles.toArray(new String[]{});    return groups;  } catch (  SQLException e) {    throw new LoginException(ERR_DB_ACCESS + e.toString());  }catch (  NamingException e) {    throw new LoginException(ERR_DB_LOOKUP);  }}  }
class C{  private Set<String> calculateAncestors(JobDefinition job){  Set<String> dep=new LinkedHashSet<String>();  ProjectGraph graph=scheduler.getProjectData().getProjectGraph();  if (graph.isInterface(job.cut)) {    return dep;  }  for (  String parent : graph.getAllCUTsParents(job.cut)) {    if (graph.isInterface(parent)) {      continue;    }    dep.add(parent);  }  return dep;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone,attributes);}  }
class C{  public GenericProxyFactory invokeType(InvokeType invokeType){  this.invokeType=checkNotNull(invokeType);  return this;}  }
class C{  public <T extends ManagedEntity>T findByName(Collection<T> entities,String name){  for (  T entity : entities) {    if (StringUtils.equals(entity.getName(),name)) {      return entity;    }  }  return null;}  }
class C{  private void interpolate(double alpha){  mCurrentState.position=mCurrentState.position * alpha + mPreviousState.position * (1 - alpha);  mCurrentState.velocity=mCurrentState.velocity * alpha + mPreviousState.velocity * (1 - alpha);}  }
class C{  private int extrasSize(GridCacheEntryEx entry) throws Exception {  Method mthd=GridCacheMapEntry.class.getDeclaredMethod("extrasSize");  mthd.setAccessible(true);  return (Integer)mthd.invoke(entry);}  }
class C{  private static int parseTimeString(String s){  if (s == null) {    return -1;  }  if (s.endsWith("s")) {    int seconds=parsePositiveIntString(s.substring(0,s.length() - 1));    return (seconds < 0) ? -1 : (seconds * 1000);  } else {    return parsePositiveIntString(s);  }}  }
class C{  public int readFixed() throws IOException {  return this.readLong();}  }
class C{  public void deleteField(int removeIndex) throws DBFException {  if (removeIndex < 0 || removeIndex >= this.fieldCount) {    throw new DBFException("Param fieldNum is out of table range");  } else   if (this.fileName.isEmpty()) {    throw new DBFException("DBF file name not specified");  } else   if (!(new File(this.fileName).exists())) {    throw new DBFException("DBF file does not exist");  }  try {    String fileNameCopy=this.fileName.replace(".dbf","_copy.dbf");    if (new File(fileNameCopy).exists()) {      new File(fileNameCopy).delete();    }    DBFField[] outFields=new DBFField[this.fieldCount - 1];    DBFField[] inFields=getAllFields();    System.arraycopy(inFields,0,outFields,0,removeIndex);    System.arraycopy(inFields,removeIndex + 1,outFields,removeIndex,(this.fieldCount - removeIndex) - 1);    AttributeTable newTable=new AttributeTable(fileNameCopy,outFields,true);    for (int a=0; a < this.numberOfRecords; a++) {      Object[] inRec=getRecord(a);      Object[] outRec=new Object[this.fieldCount - 1];      System.arraycopy(inRec,0,outRec,0,removeIndex);      System.arraycopy(inRec,removeIndex + 1,outRec,removeIndex,(this.fieldCount - removeIndex) - 1);      newTable.addRecord(outRec);    }    newTable.write();    File oldFile=new File(this.fileName);    if (oldFile.renameTo(new File(this.fileName.concat(".bak")))) {      File newFile=new File(fileNameCopy);      if (newFile.renameTo(new File(this.fileName))) {        new File(this.fileName.concat(".bak")).delete();        initialize();      }    }  } catch (  Exception e) {    throw new DBFException(e.getMessage());  }}  }
class C{  public void saveSession(String fileName) throws Exception {  getSession().save(fileName);}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (!eventName.equals("instance") && !eventName.equals("dataSet") && !eventName.equals("trainingSet")&& !eventName.equals("testSet")) {    return false;  }  if (m_listenee != null) {    return false;  }  return true;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Consumer<Operation> createNotificationTarget(){  return null;}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (pos >= count)     return -1; else     return buf[pos++];  }}  }
class C{  public static void I2OSP(int input,byte[] output,int outOff,int length){  for (int i=length - 1; i >= 0; i--) {    output[outOff + i]=(byte)(input >>> (8 * (length - 1 - i)));  }}  }
class C{  public void defineDocumentValue(final PropertyMutation propertyMutation){  propertyMutation.setMarketValue((propertyMutation.getPartyValue().compareTo(propertyMutation.getDepartmentValue()) > 0) ? propertyMutation.getPartyValue() : propertyMutation.getDepartmentValue());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeAttributeNS02.class,args);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:    return getAnnotations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public T find(final String query,final Object... params){  return persistenceService.find(query,params);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.155 -0500",hash_original_method="C78D4ECAA9BAFBCD9E78657D4224F582",hash_generated_method="5206F4499E6E026B2252E75571BF0242") public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  writer.print(prefix);  writer.print("mFragmentId=#");  writer.print(Integer.toHexString(mFragmentId));  writer.print(" mContainerId#=");  writer.print(Integer.toHexString(mContainerId));  writer.print(" mTag=");  writer.println(mTag);  writer.print(prefix);  writer.print("mState=");  writer.print(mState);  writer.print(" mIndex=");  writer.print(mIndex);  writer.print(" mWho=");  writer.print(mWho);  writer.print(" mBackStackNesting=");  writer.println(mBackStackNesting);  writer.print(prefix);  writer.print("mAdded=");  writer.print(mAdded);  writer.print(" mRemoving=");  writer.print(mRemoving);  writer.print(" mResumed=");  writer.print(mResumed);  writer.print(" mFromLayout=");  writer.print(mFromLayout);  writer.print(" mInLayout=");  writer.println(mInLayout);  writer.print(prefix);  writer.print("mHidden=");  writer.print(mHidden);  writer.print(" mDetached=");  writer.print(mDetached);  writer.print(" mMenuVisible=");  writer.print(mMenuVisible);  writer.print(" mHasMenu=");  writer.println(mHasMenu);  writer.print(prefix);  writer.print("mRetainInstance=");  writer.print(mRetainInstance);  writer.print(" mRetaining=");  writer.print(mRetaining);  writer.print(" mUserVisibleHint=");  writer.println(mUserVisibleHint);  if (mFragmentManager != null) {    writer.print(prefix);    writer.print("mFragmentManager=");    writer.println(mFragmentManager);  }  if (mActivity != null) {    writer.print(prefix);    writer.print("mActivity=");    writer.println(mActivity);  }  if (mArguments != null) {    writer.print(prefix);    writer.print("mArguments=");    writer.println(mArguments);  }  if (mSavedFragmentState != null) {    writer.print(prefix);    writer.print("mSavedFragmentState=");    writer.println(mSavedFragmentState);  }  if (mSavedViewState != null) {    writer.print(prefix);    writer.print("mSavedViewState=");    writer.println(mSavedViewState);  }  if (mTarget != null) {    writer.print(prefix);    writer.print("mTarget=");    writer.print(mTarget);    writer.print(" mTargetRequestCode=");    writer.println(mTargetRequestCode);  }  if (mNextAnim != 0) {    writer.print(prefix);    writer.print("mNextAnim=");    writer.println(mNextAnim);  }  if (mContainer != null) {    writer.print(prefix);    writer.print("mContainer=");    writer.println(mContainer);  }  if (mView != null) {    writer.print(prefix);    writer.print("mView=");    writer.println(mView);  }  if (mAnimatingAway != null) {    writer.print(prefix);    writer.print("mAnimatingAway=");    writer.println(mAnimatingAway);    writer.print(prefix);    writer.print("mStateAfterAnimating=");    writer.println(mStateAfterAnimating);  }  if (mLoaderManager != null) {    writer.print(prefix);    writer.println("Loader Manager:");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  InputStream is=null;  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,signalPBinaryOutputFileName);  Set<RawProtein<SignalPRawMatch>> rawProteins;  RawMatch represantiveRawMatch=null;  int count=0;  try {    is=new FileInputStream(fileName);    rawProteins=parser.parse(is);    for (    RawProtein<SignalPRawMatch> rawProtein : rawProteins) {      count+=rawProtein.getMatches().size();      if (represantiveRawMatch == null) {        represantiveRawMatch=rawProtein.getMatches().iterator().next();      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Parsed out " + rawProteins.size() + " proteins with matches from file "+ fileName);      LOGGER.debug("A total of " + count + " matches from file "+ fileName);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse " + fileName,e);  } finally {    try {      if (is != null) {        is.close();      }    } catch (    IOException e) {      LOGGER.warn("Error closing input stream",e);    }  }  if (rawProteins != null && rawProteins.size() > 0) {    rawMatchDAO.persist(rawProteins);    Long now=System.currentTimeMillis();    if (count > 0) {      int matchesFound=0;      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        String signatureLibraryRelease=represantiveRawMatch.getSignatureLibraryRelease();        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } else {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("No SignalP matches were persisted as none were found in the SignalP binary output file: " + fileName);    }  }}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  private void assertTraceOk(String pivotName,SolrParams baseParams,List<PivotField> constraints){  if (null == constraints || 0 == constraints.size()) {    return;  }  final int maxIdx=constraints.size() - 1;  final int min=baseParams.getInt(TRACE_MIN,-1);  final boolean expectMissing=baseParams.getBool(TRACE_MISS,false);  final boolean checkCount="count".equals(baseParams.get(TRACE_SORT,"count"));  int prevCount=Integer.MAX_VALUE;  for (int i=0; i <= maxIdx; i++) {    final PivotField constraint=constraints.get(i);    final int count=constraint.getCount();    if (0 < min) {      assertTrue(pivotName + ": val #" + i+ " of "+ maxIdx+ ": count("+ count+ ") < facet.mincount("+ min+ "): "+ constraint,min <= count);    }    if ((i < maxIdx) || (!expectMissing)) {      assertNotNull(pivotName + ": val #" + i+ " of "+ maxIdx+ " has null value: "+ constraint,constraint.getValue());    }    if (checkCount) {      assertTrue(pivotName + ": val #" + i+ " of"+ maxIdx+ ": count("+ count+ ") > prevCount("+ prevCount+ "): "+ constraint,((count <= prevCount) || (expectMissing && i == maxIdx && null == constraint.getValue())));      prevCount=count;    }  }}  }
class C{  public SubscriptionAlreadyExistsException(){  super();}  }
class C{  public boolean isRightKnown(){  return right != BeaconColor.UNKNOWN;}  }
class C{  public KaleidoscopeFilter(){  super(ConvolveFilter.CLAMP_EDGES);}  }
class C{  public void destroy(){  LOGGER.info("Destroy interpreter group " + getId());  List<Interpreter> intpToDestroy=new LinkedList<Interpreter>();  for (  List<Interpreter> intpGroupForNote : this.values()) {    intpToDestroy.addAll(intpGroupForNote);  }  destroy(intpToDestroy);  if (remoteInterpreterProcess != null) {    while (remoteInterpreterProcess.referenceCount() > 0) {      remoteInterpreterProcess.dereference();    }    remoteInterpreterProcess=null;  }  allInterpreterGroups.remove(id);}  }
class C{  void generate(XmlWriter w) throws IOException {  List<XmlWriter.Attribute> attrs=null;  if (count > 0) {    attrs=Collections.singletonList(new XmlWriter.Attribute("count",Integer.toString(count)));  }  w.simpleElement(GoogleBaseNamespaces.GM,"value",attrs,value);}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  try {    setOriginalInputStream(super.getInputStream());  } catch (  Exception e) {  }  multiplexingXXXSocketSupport.receive(received,p,soTimeout);}  }
class C{  public static String unifyLineSeparators(String s){  return unifyLineSeparators(s,System.getProperty("line.separator"));}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public String name(){  return name;}  }
class C{  public boolean isForceAuthentication(){  return forceAuthentication;}  }
class C{  public void onOptionsMenuClosed(Menu menu){  if (mParent != null) {    mParent.onOptionsMenuClosed(menu);  }}  }
class C{  public Authenticator authenticator(){  return authenticator;}  }
class C{  protected ReplacedElement lookupImageReplacedElement(Element e){  if (imageComponents.size() == 0) {    return null;  }  ReplacedElement replacedElement=(ReplacedElement)imageComponents.get(e);  return replacedElement;}  }
class C{  public void addLocation(Location location,int minRecordingDistance,boolean calculateCalorie,ActivityType activityType,double weight){  updateTime(location.getTime());  if (!LocationUtils.isValidLocation(location)) {    if (location.getLatitude() == PAUSE_LATITUDE) {      if (lastLocation != null && lastMovingLocation != null && lastLocation != lastMovingLocation) {        currentSegment.addTotalDistance(lastMovingLocation.distanceTo(lastLocation));      }      tripStatistics.merge(currentSegment);    }    currentSegment=init(location.getTime());    lastLocation=null;    lastMovingLocation=null;    elevationBuffer.reset();    runBuffer.reset();    gradeBuffer.reset();    speedBuffer.reset();    return;  }  currentSegment.updateLatitudeExtremities(location.getLatitude());  currentSegment.updateLongitudeExtremities(location.getLongitude());  double elevationDifference=location.hasAltitude() ? updateElevation(location.getAltitude()) : 0.0;  if (lastLocation == null || lastMovingLocation == null) {    lastLocation=location;    lastMovingLocation=location;    return;  }  double movingDistance=lastMovingLocation.distanceTo(location);  if (movingDistance < minRecordingDistance && (!location.hasSpeed() || location.getSpeed() < MAX_NO_MOVEMENT_SPEED)) {    speedBuffer.reset();    lastLocation=location;    return;  }  long movingTime=location.getTime() - lastLocation.getTime();  if (movingTime < 0) {    lastLocation=location;    return;  }  currentSegment.addTotalDistance(movingDistance);  currentSegment.addMovingTime(movingTime);  double run=lastLocation.distanceTo(location);  updateGrade(run,elevationDifference);  if (location.hasSpeed() && lastLocation.hasSpeed()) {    updateSpeed(location.getTime(),location.getSpeed(),lastLocation.getTime(),lastLocation.getSpeed());  }  if (calculateCalorie) {    double calorie=CalorieUtils.getCalorie(lastMovingLocation,location,gradeBuffer.getAverage(),weight,activityType);    currentSegment.addCalorie(calorie);  }  lastLocation=location;  lastMovingLocation=location;}  }
class C{  public static final long BuildLong(byte bytevec[],boolean MSBFirst){  if (MSBFirst)   return BuildLongBE(bytevec,0); else   return BuildLongLE(bytevec,0);}  }
class C{  public void end(){  renderer.end();  shapeType=null;}  }
class C{  public void commitChanges(){  for (int i=0; i < valArray.length; i++) {    valArray[i]=Double.parseDouble(stimulusVals[i].getText());  }  smellSource.setStimulusVector(valArray);  smellSource.setDispersion(Double.parseDouble(tfDispersion.getText()));  smellSource.setDecayFunction((DecayFunction)cbDecayFunction.getSelectedItem());  smellSource.setPeak(Double.parseDouble(tfPeak.getText()));  smellSource.setAddNoise(rbAddNoise.isSelected());  if (rbAddNoise.isSelected()) {    smellSource.setNoiseLevel((double)jsNoiseLevel.getValue() / 100);  }}  }
class C{  private boolean checkAllColumnsInTableDesc(TableDesc table,List<HiveTableMeta.HiveTableColumnMeta> fields){  if (table.getColumnCount() > fields.size()) {    return false;  }  ColumnDesc[] columns=table.getColumns();  for (int i=0; i < columns.length; i++) {    if (!isColumnCompatible(columns[i],fields.get(i))) {      return false;    }  }  return true;}  }
class C{  public static int computeColumn(double tileDelta,double longitude){  int col=(int)Math.floor((longitude + 180) / tileDelta);  if (longitude == 180) {    col-=1;  }  return col;}  }
class C{  public DiscussionExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void add(Pattern pattern,double chance){  checkNotNull(pattern);  weights.put(pattern,chance);  collection=RandomCollection.of(weights);  this.patterns=weights.keySet();}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscapes(char[] cs,String r){  checkNotNull(r);  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  protected final Paint createVerticalGradient(Shape s,Color[] colors){  Rectangle2D bounds=s.getBounds2D();  float xCenter=(float)bounds.getCenterX();  float yMin=(float)bounds.getMinY();  float yMax=(float)bounds.getMaxY();  return createGradient(xCenter,yMin,xCenter,yMax,new float[]{0f,1f},colors);}  }
class C{  public static Workflow.Method rollbackCreateMetaVolumeMethod(URI systemURI,URI volumeURI,String createMetaVolumeStepId){  return new Workflow.Method("rollBackCreateMetaVolume",systemURI,volumeURI,createMetaVolumeStepId);}  }
class C{  @SideOnly(Side.CLIENT) public static void initAspectEntries(){  int indexPages=3;  aspectPages.clear();  itemPages.clear();  ArrayList<Page> temp=new ArrayList<>();  ArrayList<Page> entryPages=new ArrayList<>();  aspectPages.add(new Page("aspectInfo",false,manualType,new PictureWidget(16,12,"thebetweenlands:textures/gui/manual/manual_hl.png",122,150,454,271,1024.0D,1024.0D)));  for (  IAspectType aspect : AspectRegistry.ASPECT_TYPES) {    aspectPages.addAll(PageCreators.AspectPages(aspect,manualType));  }  entryPages.add(new Page("aspectList",false,manualType,new PictureWidget(16,12,"thebetweenlands:textures/gui/manual/manual_hl.png",122,150,162,271,1024.0D,1024.0D)));  int pageNumber=1;  for (  Page page : aspectPages) {    page.setPageNumber(pageNumber);    temp.add(page);    pageNumber++;  }  entryPages.addAll(PageCreators.pageCreatorButtons(temp,manualType));  indexPages+=PageCreators.pageCreatorButtons(temp,manualType).size();  Map<AspectManager.AspectItem,List<AspectManager.AspectItemEntry>> matchedAspects=AspectManager.getRegisteredItems();  for (  Map.Entry<AspectManager.AspectItem,List<AspectManager.AspectItemEntry>> e : matchedAspects.entrySet()) {    if (e.getKey() != null)     itemPages.addAll(PageCreators.AspectItemPages(e.getKey(),manualType));  }  ArrayList<Page> tempItems=new ArrayList<>();  int tempNum=pageNumber;  pageNumber++;  while (itemPages.size() > 0) {    Page currentFirst=null;    for (    Page page : itemPages) {      if (currentFirst == null)       currentFirst=page; else {        String pageName=page.pageName.toLowerCase();        char[] characters=pageName.toCharArray();        String pageNameFirst=currentFirst.pageName.toLowerCase();        char[] charactersFirst=pageNameFirst.toCharArray();        for (int i=0; i < characters.length; i++) {          if (charactersFirst.length > i) {            if (((Character)characters[i]).compareTo(charactersFirst[i]) > 0) {              break;            } else             if (((Character)characters[i]).compareTo(charactersFirst[i]) < 0) {              currentFirst=page;              break;            }          }        }      }    }    itemPages.remove(currentFirst);    if (currentFirst != null)     currentFirst.setPageNumber(pageNumber);    pageNumber++;    tempItems.add(currentFirst);  }  tempItems.add(0,new Page("ingredient_info",false,manualType,new PictureWidget(16,12,"thebetweenlands:textures/gui/manual/manual_hl.png",122,150,600,271,1024.0D,1024.0D)).setPageNumber(tempNum));  entryPages.add(new Page("ingredient_list",false,manualType,new PictureWidget(16,12,"thebetweenlands:textures/gui/manual/manual_hl.png",122,150,308,271,1024.0D,1024.0D)));  entryPages.addAll(PageCreators.pageCreatorButtons(tempItems,manualType));  indexPages+=PageCreators.pageCreatorButtons(tempItems,manualType).size();  entryPages.addAll(temp);  entryPages.addAll(tempItems);  entryPages.add(0,new Page("intro_1",false,manualType,new PictureWidget(16,12,"thebetweenlands:textures/gui/manual/manual_hl.png",122,150,16,271,1024.0D,1024.0D),new ButtonWidget(31,49,87,9,6,false),new ButtonWidget(31,68,55,9,1,true),new ButtonWidget(31,86,73,9,tempNum,true)));  aspectCategory=new ManualCategory(entryPages,1,manualType,"aspect_category",true,indexPages);  CATEGORIES.add(aspectCategory);}  }
class C{  private boolean isLegalCharEntityCharacter(char c){  return (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9'))|| (c == '#'));}  }
class C{  public static int toIntPriority(String strPriority){  strPriority=strPriority.trim().toLowerCase();  if ("low".equals(strPriority))   return Thread.MIN_PRIORITY;  if ("min".equals(strPriority))   return Thread.MIN_PRIORITY;  if ("high".equals(strPriority))   return Thread.MAX_PRIORITY;  if ("max".equals(strPriority))   return Thread.MAX_PRIORITY;  if ("normal".equals(strPriority))   return Thread.NORM_PRIORITY;  if ("norm".equals(strPriority))   return Thread.NORM_PRIORITY;  return -1;}  }
class C{  public static GdbDirectory parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_DIRECTORY.matcher(output);  if (matcher.find()) {    String directory=matcher.group(1);    return new GdbDirectory(directory);  }  throw new GdbParseException(GdbDirectory.class,output);}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  mWidth=MeasureSpec.getSize(widthMeasureSpec);  mHeight=MeasureSpec.getSize(heightMeasureSpec);  int minSide=Math.min(mWidth,mHeight);  mWidth=minSide;  mHeight=minSide;  mCurrentProgressPosition=calculateCurrentPositionFromCurrentSeconds(mCurrentSeconds);  objectAnimatorProgress.setFloatValues(mCurrentProgressPosition / mWidth,1.0f);  objectAnimatorProgress.setDuration((mMaxSeconds - mCurrentSeconds) * 1000);  if (mBitmapCoverImage != null)   scaleCoverBitmap(mBitmapCoverImage);  rectFEmptyProgress.set(0,mHeight - mProgressHeight,mWidth,mHeight);  mDrawableBottomShadow.setBounds(0,(10 * mHeight) / 12,mWidth,mHeight);  if (startRequested) {    startRequested=false;    start();  }  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  private StringBuffer format(long number,StringBuffer result,FieldDelegate delegate){  boolean isNegative=(number < 0);  if (isNegative) {    number=-number;  }  boolean useBigInteger=false;  if (number < 0) {    if (multiplier != 0) {      useBigInteger=true;    }  } else   if (multiplier != 1 && multiplier != 0) {    long cutoff=Long.MAX_VALUE / multiplier;    if (cutoff < 0) {      cutoff=-cutoff;    }    useBigInteger=(number > cutoff);  }  if (useBigInteger) {    if (isNegative) {      number=-number;    }    BigInteger bigIntegerValue=BigInteger.valueOf(number);    return format(bigIntegerValue,result,delegate,true);  }  number*=multiplier;  if (number == 0) {    isNegative=false;  } else {    if (multiplier < 0) {      number=-number;      isNegative=!isNegative;    }  }synchronized (digitList) {    int maxIntDigits=super.getMaximumIntegerDigits();    int minIntDigits=super.getMinimumIntegerDigits();    int maxFraDigits=super.getMaximumFractionDigits();    int minFraDigits=super.getMinimumFractionDigits();    digitList.set(isNegative,number,useExponentialNotation ? maxIntDigits + maxFraDigits : 0);    return subformat(result,delegate,isNegative,true,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public final double cdf(double x){  if (offset < 0)   return 0.0;  return distribution.cdf(x - offset);}  }
class C{  public RectListManager(Rectangle[] rects){  this(rects,0,rects.length);}  }
class C{  public SecondClassQuartersCargoBay(double space,int doors){  totalSpace=(int)space / 7;  weight=space;  currentSpace=(int)space / 7;  this.doors=doors;}  }
class C{  public static ReplaceStringTransformer clearTimestamps(){  return new ReplaceStringTransformer("\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(\\.\\d+)?([+-][0-2]\\d:[0-5]\\d|Z)","1970-01-01T00:00:00Z");}  }
class C{  public boolean isArray(){  return array;}  }
class C{  public void put(E e){  offer(e);}  }
class C{  private void createVMs(Host host){  for (int i=0; i < 4; i++) {    vm[i]=host.getVM(i);  }}  }
class C{  public void publishEventsToCalendar(List<Event> eventList){  Iterator<Event> i=eventList.iterator();  while (i.hasNext()) {    Event event=i.next();    try {      publishEventToCalendar(event);    } catch (    EPAuthenticationException e) {      System.err.println("Authentication problem when publishing events: " + e.getMessage());    }catch (    IOException e) {      System.err.println("IOException when publishing events: " + e.getMessage());    }catch (    ServiceException e) {      e.printStackTrace();      System.err.println("ServiceException when publishing events: " + e.getMessage());    }  }}  }
class C{  public void test_allocate_then_read(){}  }
class C{  public AbstractRepositoryImplConfig(){}  }
class C{  public SortingParams limit(final int start,final int count){  params.add(LIMIT.raw);  params.add(Protocol.toByteArray(start));  params.add(Protocol.toByteArray(count));  return this;}  }
class C{  public static void log(final String msg,final Throwable t){  if (DEBUG) {    log(msg);    t.printStackTrace(System.out);  }}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  protected static ShapeDrawable newOne(int size,int color){  ShapeDrawable indicator=new ShapeDrawable(new OvalShape());  indicator.setIntrinsicWidth(size);  indicator.setIntrinsicHeight(size);  indicator.getPaint().setColor(color);  return indicator;}  }
class C{  public int process(Collection<? extends Object> aExpected,Collection<? extends Object> aActual){  expectedCount+=aExpected.size();  actualCount+=aActual.size();  Set<Object> actual=new HashSet<>(aActual);  for (  Object eUnit : aExpected) {    boolean found=actual.remove(eUnit);    if (found) {      hitCount++;    }  }  return hitCount;}  }
class C{  public static CCSpriteSheet spriteSheet(CCTexture2D tex,int capacity){  return new CCSpriteSheet(tex,capacity);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cnt=getString(stack);  Sage.put("mmc/dvbt_region",cnt);  return null;}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public DProperties(JFrame parent,KeyStoreHistory history) throws CryptoException {  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.history=history;  this.currentState=history.getCurrentState();  initComponents();}  }
class C{  public void maxInactiveInterval(final int maxInactiveInterval){  this.maxInactiveInterval=maxInactiveInterval;}  }
class C{  @Override public boolean isReady(){  if (!photonControllerXenonHost.checkServiceAvailable(UPLOAD_VIB_WORK_QUEUE_SELF_LINK)) {    return false;  }  try {    return ServiceHostUtils.areServicesReady(photonControllerXenonHost,FACTORY_SERVICE_FIELD_NAME_SELF_LINK,FACTORY_SERVICES);  } catch (  Throwable t) {    logger.debug("IsReady failed: {}",t);    return false;  }}  }
class C{  default RNode unwrap(){  if (this instanceof WrapperNode) {    return (RNode)((WrapperNode)this).getDelegateNode();  } else {    return (RNode)this;  }}  }
class C{  public void calcTransformPoint(vec3 out,vec3 v){  out.m[0]=this.m[0] * v.m[0] + this.m[4] * v.m[1] + this.m[8] * v.m[2] + this.m[12];  out.m[1]=this.m[1] * v.m[0] + this.m[5] * v.m[1] + this.m[9] * v.m[2] + this.m[13];  out.m[2]=this.m[2] * v.m[0] + this.m[6] * v.m[1] + this.m[10] * v.m[2] + this.m[14];}  }
class C{  public int indexOf(byte b){  if (_buf.hasArray()) {    byte[] array=_buf.array();    int arrayOffset=_buf.arrayOffset();    int startAt=arrayOffset + position();    int endAt=arrayOffset + limit();    for (int i=startAt; i < endAt; i++) {      if (array[i] == b) {        return i - arrayOffset;      }    }    return -1;  } else {    int startAt=_buf.position();    int endAt=_buf.limit();    for (int i=startAt; i < endAt; i++) {      if (_buf.get(i) == b) {        return i;      }    }    return -1;  }}  }
class C{  public PublicKey resolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  return resolverSpi.engineLookupAndResolvePublicKey(element,baseURI,storage);}  }
class C{  public LinkLoopException(String explanation){  super(explanation);}  }
class C{  public int writeLongNibble(final long x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x == 0)   return writeInt(8,4);  final int msb=Fast.mostSignificantBit(x);  int h=msb / 3;  do {    writeBit(h == 0);    writeInt((int)(x >> h * 3),3);  } while (h-- != 0);  return ((msb / 3) + 1) << 2;}  }
class C{  public ObjectFactory(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.793 -0500",hash_original_method="1DD49D169AB38515FFA4793B4461E091",hash_generated_method="7F429E698C9C5E544D1E6A71723F5085") public int memberOf(){  return theType.memberOf();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MTableAccess[");  sb.append("AD_Role_ID=").append(getAD_Role_ID()).append(",AD_Table_ID=").append(getAD_Table_ID()).append(",Exclude=").append(isExclude()).append(",Type=").append(getAccessTypeRule());  if (ACCESSTYPERULE_Accessing.equals(getAccessTypeRule()))   sb.append("-ReadOnly=").append(isReadOnly()); else   if (ACCESSTYPERULE_Exporting.equals(getAccessTypeRule()))   sb.append("-CanExport=").append(isCanExport()); else   if (ACCESSTYPERULE_Reporting.equals(getAccessTypeRule()))   sb.append("-CanReport=").append(isCanReport());  sb.append("]");  return sb.toString();}  }
class C{  public boolean isSentToAddress(){  return chunks.size() == 5 && chunks.get(0).equalsOpCode(OP_DUP) && chunks.get(1).equalsOpCode(OP_HASH160) && chunks.get(2).data.length == Address.LENGTH && chunks.get(3).equalsOpCode(OP_EQUALVERIFY) && chunks.get(4).equalsOpCode(OP_CHECKSIG);}  }
class C{  static void startingAnimation(){  final FetcherInfo info=FetcherInfo.getFetcherInfo();  Thread me=Thread.currentThread();synchronized (info.waitList) {    for (int i=0; i < info.fetchers.length; i++) {      if (info.fetchers[i] == me) {        info.fetchers[i]=null;        info.numFetchers--;        me.setName("Image Animator " + i);        if (info.waitList.size() > info.numWaiting) {          createFetchers(info);        }        return;      }    }  }  me.setPriority(ANIM_PRIORITY);  me.setName("Image Animator");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Matrix4d arcball(double radius,double centerX,double centerY,double centerZ,double angleX,double angleY){  return arcball(radius,centerX,centerY,centerZ,angleX,angleY,this);}  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=integers.get(i).intValue();  }  return ret;}  }
class C{  public String queryvectorfile(){  return queryvectorfile;}  }
class C{  private boolean matches(final Sentence other,final boolean matchStart){  if (other == null) {    return false;  }  final Iterator<Expression> it1=expressions.iterator();  final Iterator<Expression> it2=other.expressions.iterator();  Expression e1;  Expression e2;  while (true) {    e1=nextValid(it1);    e2=nextValid(it2);    if ((e1 == null) || (e2 == null)) {      break;    }    if (e2.getMatcher() != null) {      if (!e2.getMatcher().match(e1,e2)) {        return false;      }    } else     if (!e1.sentenceMatchExpression(e2)) {      return false;    }  }  if ((e1 == null) && (e2 == null)) {    return true;  } else {    return (matchStart && (e2 == null));  }}  }
class C{  protected boolean isBlockCommented(int startLine,int endLine,String[] prefixes,IDocument document){  try {    for (int i=startLine; i <= endLine; i++) {      IRegion line=document.getLineInformation(i);      String text=document.get(line.getOffset(),line.getLength());      int[] found=TextUtilities.indexOf(prefixes,text,0);      if (found[0] == -1)       return false;      String s=document.get(line.getOffset(),found[0]);      s=s.trim();      if (s.length() != 0)       return false;    }    return true;  } catch (  BadLocationException x) {    LangCore.logError("Unexpected error.",x);  }  return false;}  }
class C{  public FindInSourceControlQuery(final String serverPath,final String wildcard){  this(serverPath,wildcard,true,false,false,null);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void dequeueOutputBuffer(MediaCodec codec,ByteBuffer[] outputBuffers,int index,MediaCodec.BufferInfo info){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    ByteBuffer buffer=outputBuffers[index];    Log.i("size/remaining: " + info.size + "/"+ buffer.remaining());    if (info.size <= buffer.remaining()) {      final byte[] bufferCopied=new byte[info.size];      buffer.get(bufferCopied);      codec.releaseOutputBuffer(index,false);      addEncoded(bufferCopied);      if (Log.DEBUG) {        AudioUtils.showSomeBytes("out",bufferCopied);      }    } else {      Log.e("size > remaining");      codec.releaseOutputBuffer(index,false);    }  }}  }
class C{  public static boolean isColumnDimension(double[][] M,int n){  for (int i=0; i < M.length; i++)   if (M[i].length != n)   return false;  return true;}  }
class C{  public void testExecuteWhenUsingValidRefId(){  Project antProject=new Project();  antProject.init();  this.task.setProject(antProject);  this.task.setId("testRefId");  this.task.setHome("home");  this.task.execute();  CargoTask task2=new CargoTask();  task2.setProject(antProject);  task2.setRefId(new Reference("testRefId"));  task2.setAction("start");  task2.execute();}  }
class C{  public static boolean canFunction(TileEntity tileEntity){  if (!(tileEntity instanceof IRedstoneControl)) {    return true;  }  IRedstoneControl control=(IRedstoneControl)tileEntity;switch (control.getControlType()) {case DISABLED:    return true;case HIGH:  return control.isPowered();case LOW:return !control.isPowered();case PULSE:return control.isPowered() && !control.wasPowered();}return false;}  }
class C{  public static CachedDateTimeZone forZone(DateTimeZone zone){  if (zone instanceof CachedDateTimeZone) {    return (CachedDateTimeZone)zone;  }  return new CachedDateTimeZone(zone);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public void decrementConsciousnessLevel(){  decrementConsciousnessLevel(1);}  }
class C{  public CloseAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("CloseAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("CloseAction.statusbar"));  putValue(NAME,res.getString("CloseAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CloseAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CloseAction.image")))));}  }
class C{  public static boolean p2pLoader(Object o){  return o != null && p2pLoader(o.getClass().getClassLoader());}  }
class C{  public ReplicatorStatus(String type,String name,String state,String host,String role,int precedence,String service,String url,String driver,String vendor,TungstenProperties status){  super(type,name,state,host,role,precedence,service,url,driver,vendor);  setProperties(status.map());}  }
class C{  private static void d_ucumkp(double[] a,double[] agg,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  double[] csums=new double[2 * n];  if (agg != null)   System.arraycopy(agg,0,csums,0,n);  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {    sumAgg(a,csums,aix,0,n,kbuff,kplus);    System.arraycopy(csums,0,c,aix,n);  }}  }
class C{  public static void main(String[] args){  String exampleFile=null;  String lexiconFile=null;  try {    exampleFile=args[0];    lexiconFile=args[1];    if (args.length > 2)     throw new Exception();  } catch (  Exception e) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbjava.parse.FeatureVectorParser <example file> <lexicon file>");    System.exit(1);  }  Parser parser=new FeatureVectorParser(exampleFile,lexiconFile);  for (FeatureVector v=(FeatureVector)parser.next(); v != null; v=(FeatureVector)parser.next()) {    v.sort();    System.out.println(v);  }}  }
class C{  public SocketRpcChannel(String host,int port){  this(host,port,SocketFactory.getDefault());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tChoose attribute to be used for selection.","C",1,"-C <num>"));  newVector.addElement(new Option("\tNumeric value to be used for selection on numeric\n" + "\tattribute.\n" + "\tInstances with values smaller than given value will\n"+ "\tbe selected. (default 0)","S",1,"-S <num>"));  newVector.addElement(new Option("\tRange of label indices to be used for selection on\n" + "\tnominal attribute.\n" + "\tFirst and last are valid indexes. (default all values)","L",1,"-L <index1,index2-index4,...>"));  newVector.addElement(new Option("\tMissing values count as a match. This setting is\n" + "\tindependent of the -V option.\n" + "\t(default missing values don't match)","M",0,"-M"));  newVector.addElement(new Option("\tInvert matching sense.","V",0,"-V"));  newVector.addElement(new Option("\tWhen selecting on nominal attributes, removes header\n" + "\treferences to excluded values.","H",0,"-H"));  newVector.addElement(new Option("\tDo not apply the filter to instances that arrive after the first\n" + "\t(training) batch. The default is to apply the filter (i.e.\n" + "\tthe filter may not return an instance if it matches the remove criteria)","F",0,"-F"));  return newVector.elements();}  }
class C{  public static MethodSymbol findMethodDeclarationInType(Types types,TypeSymbol typeSymbol,String methodName,MethodType methodType){  return findMethodDeclarationInType(types,typeSymbol,methodName,methodType,false);}  }
class C{  public boolean isTransient(){  return Modifier.isTransient(_field.getModifiers());}  }
class C{  public MultisigInfo(final Deserializer deserializer){  this.cosignatoriesCount=deserializer.readInt("cosignatoriesCount");  this.minCosignatories=deserializer.readInt("minCosignatories");}  }
class C{  public void reset(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   genome[x]=(byte)randomValueFromClosedInterval((byte)s.minGene(x),(byte)s.maxGene(x),state.random[thread]);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.144 -0500",hash_original_method="6DBF72AF7766D4EB810EDB03D8391F19",hash_generated_method="685553C2A5173BA484ADB3CA6336847B") public Camera(){  nativeConstructor();}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null)   return false;  if (extension == null || extension.length() == 0)   return indexOfExtension(filename) == -1;  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public NotificationChain basicSetInitialValue(Expression newInitialValue,NotificationChain msgs){  Expression oldInitialValue=initialValue;  initialValue=newInitialValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE,oldInitialValue,newInitialValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isView(){  Object oo=get_Value(COLUMNNAME_IsView);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addCc(EncodedStringValue value){  mPduHeaders.appendEncodedStringValue(value,PduHeaders.CC);}  }
class C{  protected double sigmoid(double x){  return (1 / (1 + Math.exp(-x)));}  }
class C{  public Object parse(File file){  return parseFile(file,null);}  }
class C{  private final File locate(String name){  String prefix="";  File sourceFile=null;  int idx=0;  while (true) {    if ((idx == 0) && (ToolIO.getUserDir() != null)) {      sourceFile=new File(ToolIO.getUserDir(),name);    } else {      if (isInJar(prefix)) {        InputStream is=cl.getResourceAsStream(STANDARD_MODULES + name);        if (is != null) {          try {            sourceFile=new File(TMPDIR + File.separator + name);            sourceFile.deleteOnExit();            FileOutputStream fos=new FileOutputStream(sourceFile);            byte buf[]=new byte[1024];            int len;            while ((len=is.read(buf)) > 0) {              fos.write(buf,0,len);            }            fos.close();            is.close();          } catch (          IOException e) {            e.printStackTrace();          }        }      } else {        sourceFile=new File(prefix + name);      }    }    if (sourceFile.exists())     break;    if (idx >= libraryPaths.length)     break;    prefix=libraryPaths[idx++];  }  return sourceFile;}  }
class C{  private void updatePropertiesWithConfiguration(final Properties props,final String key){  final FilterConfig filterConfig=Context.get().getFilterConfig();  final String valuesAsString=filterConfig.getInitParameter(key);  if (valuesAsString != null) {    props.setProperty(key,valuesAsString);  } else {    final String value=getConfigProperties().getProperty(key);    if (value != null) {      props.setProperty(key,value);    }  }}  }
class C{  @Override void render(){  super.render();  setVerifiedCheck(tweet);}  }
class C{  private void handleDestroy(Message m){  String regionName=null;  Object key=null;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    this.isOpCompleted=false;    if (isDebugEnabled) {      logger.debug("Received destroy message of length ({} bytes)",m.getPayloadLength());    }    Part regionNamePart=m.getPart(partCnt++);    Part keyPart=m.getPart(partCnt++);    Part callbackArgumentPart=m.getPart(partCnt++);    VersionTag versionTag=(VersionTag)m.getPart(partCnt++).getObject();    if (versionTag != null) {      versionTag.replaceNullIDs((InternalDistributedMember)this.endpoint.getMemberId());    }    regionName=regionNamePart.getString();    key=keyPart.getStringOrObject();    Part isInterestListPassedPart=m.getPart(partCnt++);    Part hasCqsPart=m.getPart(partCnt++);    boolean withInterest=((Boolean)isInterestListPassedPart.getObject()).booleanValue();    boolean withCQs=((Boolean)hasCqsPart.getObject()).booleanValue();    Object callbackArgument=callbackArgumentPart.getObject();    if (isDebugEnabled) {      logger.debug("Destroying entry for region: {} key: {} callbackArgument: {} withInterest={} withCQs={} version={}",regionName,key,callbackArgument,withInterest,withCQs,versionTag);    }    LocalRegion region=(LocalRegion)cacheHelper.getRegion(regionName);    EventID eventId=null;    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("Region named {} does not exist",regionName);      }    } else     if (region.hasServerProxy() && (withInterest || !withCQs)) {      try {        Part eid=m.getPart(m.getNumberOfParts() - 1);        eventId=(EventID)eid.getObject();        try {          region.basicBridgeClientDestroy(eventId.getDistributedMember(),key,callbackArgument,qManager.getState().getProcessedMarker() || !this.isDurableClient,eventId,versionTag);        } catch (        ConcurrentCacheModificationException e) {        }        this.isOpCompleted=true;        if (isDebugEnabled) {          logger.debug("Destroyed entry for region: {} key: {} callbackArgument: {}",regionName,key,callbackArgument);        }      } catch (      EntryNotFoundException e) {        if (isDebugEnabled && !quitting()) {          logger.debug("Already destroyed entry for region: {} key: {} callbackArgument: {} eventId={}",regionName,key,callbackArgument,eventId.expensiveToString());        }        this.isOpCompleted=true;      }    }    if (withCQs) {      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),m.getMessageType(),key,null);      this.isOpCompleted=true;    }  } catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_THE_FOLLOWING_EXCEPTION_OCCURRED_WHILE_ATTEMPTING_TO_DESTROY_ENTRY_REGION_0_KEY_1.toLocalizedString(new Object[]{regionName,key});    handleException(message,e);  }}  }
class C{  public static void addConstraintViolationsRDF(List<ConstraintViolation> cvs,Model result,boolean createSource){  for (  ConstraintViolation cv : cvs) {    Resource r=result.createResource(SPIN.ConstraintViolation);    String message=cv.getMessage();    if (message != null && message.length() > 0) {      r.addProperty(RDFS.label,message);    }    if (cv.getRoot() != null) {      r.addProperty(SPIN.violationRoot,cv.getRoot());    }    r.addProperty(SPIN.violationLevel,cv.getLevel());    for (    SimplePropertyPath path : cv.getPaths()) {      if (path instanceof ObjectPropertyPath) {        r.addProperty(SPIN.violationPath,path.getPredicate());      } else {        Resource p=result.createResource(SP.ReversePath);        p.addProperty(SP.path,path.getPredicate());        r.addProperty(SPIN.violationPath,p);      }    }    if (createSource && cv.getSource() != null) {      r.addProperty(SPIN.violationSource,cv.getSource());    }    if (cv.getValue() != null) {      r.addProperty(SPIN.violationValue,cv.getValue());    }  }}  }
class C{  public SymbolTableEntry basicGetEntry(){  return entry;}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 3)   reportWrongNumberArgs();}  }
class C{  public InstantiationError(String s){  super(s);}  }
class C{  @Override public void perform(IR ir){  DefUse.computeDU(ir);  DefUse.recomputeSSA(ir);  copyPropagation(ir);  if (typeProp) {    typePropagation(ir);  }  if (foldChecks) {    arrayPropagation(ir);  }  eliminateDeadInstructions(ir);  boolean needDeadCodeElimination=foldConstants(ir);  if (ir.options.LOCAL_EXPRESSION_FOLDING && ExpressionFolding.performLocal(ir)) {    needDeadCodeElimination|=foldConstants(ir);  }  if (needDeadCodeElimination) {    eliminateDeadInstructions(ir);  }  if (foldBranches) {    simplifyConstantBranches(ir);  }  if (sortRegisters) {    sortCommutativeRegisterUses(ir);  }}  }
class C{  public boolean complete(){  return complete;}  }
class C{  public final boolean isAdjusting(){  return m_bIsAdjusting || m_bd.isAdjusting();}  }
class C{  private boolean applySchedule(MInvoice invoice){  deleteInvoicePaySchedule(invoice.getC_Invoice_ID(),invoice.get_TrxName());  MInvoicePaySchedule ips=null;  BigDecimal remainder=invoice.getGrandTotal();  for (int i=0; i < m_schedule.length; i++) {    ips=new MInvoicePaySchedule(invoice,m_schedule[i]);    ips.save(invoice.get_TrxName());    log.fine(ips.toString());    remainder=remainder.subtract(ips.getDueAmt());  }  if (remainder.compareTo(Env.ZERO) != 0 && ips != null) {    ips.setDueAmt(ips.getDueAmt().add(remainder));    ips.save(invoice.get_TrxName());    log.fine("Remainder=" + remainder + " - "+ ips);  }  if (invoice.getC_PaymentTerm_ID() != getC_PaymentTerm_ID())   invoice.setC_PaymentTerm_ID(getC_PaymentTerm_ID());  return invoice.validatePaySchedule();}  }
class C{  public void testPoint() throws Exception {  EsriLayer layer=new EsriLayer("Point Layer",SHAPE_TYPE_POINT,2);  DbfTableModel model=layer.getModel();  model.setDecimalCount(0,(byte)0);  model.setLength(0,(byte)20);  model.setColumnName(0,"Column1");  model.setType(0,(byte)DbfTableModel.TYPE_CHARACTER);  model.setDecimalCount(1,(byte)3);  model.setLength(1,(byte)20);  model.setColumnName(1,"Column2");  model.setType(1,(byte)DbfTableModel.TYPE_NUMERIC);  addPoints(layer);  EsriGraphicList list=layer.getEsriGraphicList();  ShpOutputStream pos=new ShpOutputStream(new FileOutputStream("pointtest0.shp"));  int[][] indexData=pos.writeGeometry(list);  ShxOutputStream xos=new ShxOutputStream(new FileOutputStream("pointtest0.shx"));  xos.writeIndex(indexData,list.getType(),list.getExtents());  DbfOutputStream dos=new DbfOutputStream(new FileOutputStream("pointtest0.dbf"));  dos.writeModel(model);}  }
class C{  @Override protected void sendFunctionGroup5(){  if (tc.getCommandStation().getCommandStationSoftwareVersionBCD() < 0x36) {    log.info("Functions F13-F28 unavailable in CS software version " + tc.getCommandStation().getCommandStationSoftwareVersion());    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup5OpsMsg(this.getDccAddress(),f21,f22,f23,f24,f25,f26,f27,f28);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  private void uninstall(String rowType){  if (extensionsByRowtype.containsKey(rowType)) {    extensionsByRowtype.remove(rowType);    File f=getExtensionFile(rowType);    if (f.exists()) {      FileUtils.deleteQuietly(f);    } else {      log.warn("Extension doesnt exist locally, cant delete " + rowType);    }  } else {    log.warn("Extension not installed locally, cant delete " + rowType);  }}  }
class C{  private void compareConstraints() throws SQLException {  final Vector<Constraint> constraintsDB1=new Vector<Constraint>();  final Vector<Constraint> constraintsDB2=new Vector<Constraint>();  String sql="select * from user_constraints where constraint_name not like 'SYS_%' and constraint_name not like 'BIN%' and constraint_type != 'U'";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    constraintsDB1.add(new Constraint(rs.getString("CONSTRAINT_NAME"),rs.getString("TABLE_NAME")));  }  rs.close();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    constraintsDB2.add(new Constraint(rs.getString("CONSTRAINT_NAME"),rs.getString("TABLE_NAME")));  }  rs.close();  System.out.println("searching constraints to drop...");  Vector<Constraint> constraintsToDrop=new Vector<Constraint>();  Vector<Constraint> duplicatedConstraints=new Vector<Constraint>();  for (int i=0; i < constraintsDB1.size(); i++) {    String n1=constraintsDB1.get(i).getName();    boolean found=false;    for (int j=0; j < constraintsDB2.size(); j++) {      String n2=constraintsDB2.get(j).getName();      if (n2.equals(n1)) {        found=true;        break;      }    }    if (!found) {      constraintsToDrop.add(constraintsDB1.get(i));    } else {      duplicatedConstraints.add(constraintsDB1.get(i));    }  }  for (int i=0; i < constraintsToDrop.size(); i++) {    m_constraintsToDrop.add(constraintsToDrop.get(i));  }  System.out.println("searching new constraints...");  for (int i=0; i < constraintsDB2.size(); i++) {    String n2=constraintsDB2.get(i).getName();    boolean found=false;    for (int j=0; j < constraintsDB1.size(); j++) {      String n1=constraintsDB1.get(j).getName();      if (n2.equals(n1)) {        found=true;        break;      }    }    if (!found) {      m_newConstraints.add(createNewConstraint(constraintsDB2.get(i).getName()));    }  }  for (int i=0; i < duplicatedConstraints.size(); i++) {    String name=duplicatedConstraints.get(i).getName();    sql="select Constraint_Type, Table_Name," + "Search_Condition, R_Constraint_Name, Delete_Rule" + " from User_Constraints where Constraint_Name='" + name + "'";    String sqlColumn="select * from User_Cons_Columns where Constraint_Name='" + name + "'";    rs=stmtdb2.executeQuery(sql);    String tableName2="";    String constraintType2="";    String condition2="";    String rConstraintName2="";    String deleteRule2="";    String column2="";    if (rs.next()) {      constraintType2=rs.getString("Constraint_Type");      tableName2=rs.getString("Table_Name");      condition2=rs.getString("Search_Condition");      rConstraintName2=rs.getString("R_Constraint_Name");      deleteRule2=rs.getString("Delete_Rule");    }    rs.close();    rs=stmtdb2.executeQuery(sqlColumn);    if (rs.next()) {      column2=rs.getString("Column_Name");    }    rs.close();    rs=stmtdb1.executeQuery(sql);    String tableName1="";    String constraintType1="";    String condition1="";    String rConstraintName1="";    String deleteRule1="";    String column1="";    if (rs.next()) {      constraintType1=rs.getString("Constraint_Type");      tableName1=rs.getString("Table_Name");      condition1=rs.getString("Search_Condition");      rConstraintName1=rs.getString("R_Constraint_Name");      deleteRule1=rs.getString("Delete_Rule");    }    rs.close();    rs=stmtdb1.executeQuery(sqlColumn);    if (rs.next()) {      column1=rs.getString("Column_Name");    }    rs.close();    if (condition1 == null) {      condition1="";    }    if (rConstraintName1 == null) {      rConstraintName1="";    }    if (deleteRule1 == null) {      deleteRule1="";    }    if (column1 == null) {      column1="";    }    if (condition2 == null) {      condition2="";    }    if (rConstraintName2 == null) {      rConstraintName2="";    }    if (deleteRule2 == null) {      deleteRule2="";    }    if (column2 == null) {      column2="";    }    if (tableName1.equals(tableName2) && constraintType1.equals(constraintType2) && condition1.equals(condition2)&& rConstraintName1.equals(rConstraintName2)&& deleteRule1.equals(deleteRule2)&& column1.equals(column2)) {    } else {      m_constraintsToDrop.add(duplicatedConstraints.get(i));      m_newConstraints.add(createNewConstraint(name));    }  }  addMissingSysConstraints();}  }
class C{  public EcomConnection(CimConnectionInfo connectionInfo,CimListener listener,CimFilterMap filterMap) throws Exception {  super(connectionInfo,listener,filterMap);}  }
class C{  private OnScreenHint(Activity activity){  mWM=(WindowManager)activity.getSystemService(Context.WINDOW_SERVICE);  mParams.height=WindowManager.LayoutParams.WRAP_CONTENT;  mParams.width=WindowManager.LayoutParams.WRAP_CONTENT;  mParams.flags=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  mParams.format=PixelFormat.TRANSLUCENT;  mParams.windowAnimations=R.style.Animation_OnScreenHint;  mParams.type=WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;  mParams.setTitle("OnScreenHint");}  }
class C{  public Bundler putAll(Bundle bundle){  this.bundle.putAll(bundle);  return this;}  }
class C{  public void cancelBinding(){  deferedValues=null;}  }
class C{  public SingleChatIntentService(){  super("SingleChatIntentService");}  }
class C{  public RecentRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public GenericEntry createUser(String email,String password,String firstName,String lastName,Map<UserProperty,String> optionalAttributes) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("userEmail",email);  entry.addProperty("password",password);  entry.addProperty("firstName",firstName);  entry.addProperty("lastName",lastName);  for (  Map.Entry<UserProperty,String> mapEntry : optionalAttributes.entrySet()) {    String value=mapEntry.getValue();    if (value == null || value.length() == 0) {      continue;    }switch (mapEntry.getKey()) {case HASH_FUNCTION:      entry.addProperty("name",value);    break;case ADMIN:  entry.addProperty("isAdmin",value);break;case SUSPENDED:entry.addProperty("isSuspended",value);break;case CHANGE_PASSWORD_AT_NEXT_LOGIN:entry.addProperty("isChangePasswordAtNextLogin",value);break;case QUOTA:entry.addProperty("quotaInGb",value);break;case IP_WHITELIST:entry.addProperty("ipWhitelisted",value);break;default :break;}}return service.insert(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain),entry);}  }
class C{  public NoSuchFieldError(){  super();}  }
class C{  public Declaration basicGetDeclaration(){  return declaration;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(map.capacity());  s.writeFloat(map.loadFactor());  s.writeInt(map.size());  for (Iterator i=map.keySet().iterator(); i.hasNext(); )   s.writeObject(i.next());}  }
class C{  public void deleteProjectMember(Integer projectId,Integer userId) throws IOException {  String tailUrl=GitlabProject.URL + "/" + projectId+ "/"+ GitlabProjectMember.URL+ "/"+ userId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  public Assignment(Assignment... assignments){  this();  Arrays.asList(assignments).stream().forEach(null);}  }
class C{  public static void main(String[] args){  System.setProperty("spring.config.name","web-server");  SpringApplication.run(WebServer.class,args);}  }
class C{  public static int max(int x,int y){  return (x >= y) ? x : y;}  }
class C{  private void createTableRows(final boolean keep_alignment_information,final boolean keep_width_information,final int currentWritingMode) throws PdfException {  final float[] f_x1;  final float[] f_x2;switch (currentWritingMode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:    f_x1=this.f_x1;  f_x2=this.f_x2;break;case PdfData.HORIZONTAL_RIGHT_TO_LEFT:f_x2=this.f_x1;f_x1=this.f_x2;break;case PdfData.VERTICAL_BOTTOM_TO_TOP:f_x1=this.f_y2;f_x2=this.f_y1;break;case PdfData.VERTICAL_TOP_TO_BOTTOM:f_x1=this.f_y1;f_x2=this.f_y2;int maxX=0;for (final float aF_x1 : f_x1) {if (maxX < aF_x1) {maxX=(int)aF_x1;}}maxX++;for (int ii=0; ii < f_x2.length; ii++) {f_x1[ii]=maxX - f_x1[ii];f_x2[ii]=maxX - f_x2[ii];}break;default :throw new PdfException("Illegal value " + currentWritingMode + "for currentWritingMode");}int item, i;int itemsInTable=0, items_added=0;final int[] currentItem=new int[max_rows];final Vector_Int[] rowContents=new Vector_Int[max_rows];final Vector_String alignments=new Vector_String();final Vector_Float widths=new Vector_Float();final Vector_Float cell_x1=new Vector_Float();String separator="", empty_cell="&nbsp;";if (!isXHTML) {separator="\",\"";empty_cell="";}final int[] itemCount=new int[max_rows];for (i=0; i < max_rows; i++) {itemCount[i]=((Vector_Int)lines.elementAt(i)).size() - 1;itemsInTable+=itemCount[i];currentItem[i]=0;rowContents[i]=new Vector_Int(20);}while (true) {float x1=9999, min_x2=9999, x2, current_x1, current_x2, c_x1, next_x1=9999, c_x2, items_in_column=0;boolean all_done=true;float total_x1=0;float total_x2=0;float left_gap=0;final float right_gap;String alignment="center";if (items_added < itemsInTable) {for (i=0; i < max_rows; i++) {if (itemCount[i] > currentItem[i]) {item=((Vector_Int)lines.elementAt(i)).elementAt(currentItem[i]);current_x1=f_x1[item];current_x2=f_x2[item];if (current_x1 < x1) {x1=current_x1;}if (current_x2 < min_x2) {min_x2=current_x2;}}}cell_x1.addElement(x1);x2=min_x2;for (i=0; i < max_rows; i++) {item=((Vector_Int)lines.elementAt(i)).elementAt(currentItem[i]);c_x1=f_x1[item];c_x2=f_x2[item];if ((c_x1 >= x1) & (c_x1 < min_x2) & (c_x2 > x2)) {x2=c_x2;}if (currentItem[i] < itemCount[i]) {item=((Vector_Int)lines.elementAt(i)).elementAt(currentItem[i] + 1);current_x1=f_x1[item];if ((current_x1 > min_x2) & (current_x1 < next_x1)) {next_x1=current_x1;}}}if (x1 == x2) {break;}if (next_x1 == 9999) {next_x1=x2;}for (i=0; i < max_rows; i++) {item=((Vector_Int)lines.elementAt(i)).elementAt(currentItem[i]);c_x1=f_x1[item];c_x2=f_x2[item];if ((c_x1 >= x1) & (c_x1 < min_x2) & (c_x2 <= next_x1)) {total_x1+=c_x1;total_x2+=c_x2;items_in_column++;}}if (i == 0) {left_gap=x1;}if (next_x1 == -1) {right_gap=0;} else {right_gap=(int)((next_x1 - x2) / 2);}final int width=(int)(x2 - x1 + right_gap + left_gap);widths.addElement(width);final float x1_diff=(total_x1 / items_in_column) - x1;final float x2_diff=x2 - (total_x2 / items_in_column);if (x1_diff < 1) {alignment="left";} else if (x2_diff < 1) {alignment="right";}alignments.addElement(alignment);for (i=0; i < max_rows; i++) {master=((Vector_Int)lines.elementAt(i)).elementAt(0);if (itemCount[i] > currentItem[i]) {item=((Vector_Int)lines.elementAt(i)).elementAt(currentItem[i]);c_x1=f_x1[item];all_done=false;} else {item=-1;c_x1=-1;}if ((item == -1) & (items_added <= itemsInTable)) {rowContents[i].addElement(-1);} else if ((c_x1 >= x1) & (c_x1 < x2)) {rowContents[i].addElement(item);currentItem[i]++;items_added++;} else if (c_x1 > x2) {rowContents[i].addElement(-1);}}}if (all_done) {break;}}for (int row=0; row < max_rows; row++) {final StringBuilder line_content=new StringBuilder(100);int count=rowContents[row].size() - 1;master=((Vector_Int)lines.elementAt(row)).elementAt(0);for (i=0; i < count; i++) {item=rowContents[row].elementAt(i);if (isXHTML) {float current_width=widths.elementAt(i);final String current_alignment=alignments.elementAt(i);int test, colspan=1, pointer=i + 1;if (item != -1) {while (true) {test=rowContents[row].elementAt(i + 1);if ((test != -1) | (count == i + 1)) {break;}if (itemCount[row] > 1 && (cell_x1.elementAt(i + 1) > f_x2[item])) {break;}count--;rowContents[row].removeElementAt(i + 1);colspan++;current_width+=widths.elementAt(pointer);pointer++;}}line_content.append("<td");if (keep_alignment_information) {line_content.append(" align='");line_content.append(current_alignment);line_content.append('\'');if (colspan > 1) {line_content.append(" colspan='").append(colspan).append('\'');}}if (keep_width_information) {line_content.append(" width='").append((int)current_width).append('\'');}line_content.append(" nowrap>");if (item == -1) {line_content.append(empty_cell);} else {line_content.append(content[item]);}line_content.append("</td>");} else {if (item == -1) {line_content.append("\"\",");} else {line_content.append('\"');line_content.append(content[item]);line_content.append("\",");}}if ((item != -1) && (master != item)) {merge(master,item,separator,false);}}content[master]=line_content;}}  }
class C{  public Destination createDestination(Session session,String name) throws JMSException {  if (isTopic) {    return session.createTopic("TOPIC." + name);  } else {    return session.createQueue("QUEUE." + name);  }}  }
class C{  public void attemptSignUp(){  if (mAuthTask != null) {    return;  }  mNameView.setError(null);  mEmailView.setError(null);  mPasswordView.setError(null);  mConfirmPasswordView.setError(null);  mName=mNameView.getText().toString();  mEmail=mEmailView.getText().toString();  mPassword=mPasswordView.getText().toString();  mConfirmPassword=mConfirmPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(mConfirmPassword)) {    mConfirmPasswordView.setError(getString(R.string.error_field_required));    focusView=mConfirmPasswordView;    cancel=true;  } else   if (!mConfirmPassword.equals(mPassword)) {    mConfirmPasswordView.setError(getString(R.string.error_incorrect_password_register));    focusView=mConfirmPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(mPassword)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  } else   if (mPassword.length() < 4) {    mPasswordView.setError(getString(R.string.error_invalid_password_register));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(mEmail)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!mEmail.contains("@")) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (TextUtils.isEmpty(mName)) {    mNameView.setError(getString(R.string.error_field_required));    focusView=mNameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    mSignUpStatusMessageView.setText(R.string.signup_progress_signing_up);    showProgress(true);    mAuthTask=new UserSignUpTask();    mAuthTask.execute((Void)null);  }}  }
class C{  private void fetchFilterSeeds(){  if (seedList == null || seedList.isEmpty()) {    return;  }  for (Iterator<URI> it=seedList.iterator(); it.hasNext(); ) {    URI seed=it.next();    for (    FetchFilter filter : controller.getFetchFilters()) {      FetchStatus filterReason=filter.checkFilter(seed);      if (filterReason != FetchStatus.VALID) {        if (log.isDebugEnabled()) {          log.debug("Seed: " + seed + " was filtered with reason: "+ filterReason);        }        it.remove();        break;      }    }  }}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    }    lineLength++;    int b=buffer[position++];    if (position >= bufferLength) {      position=-1;    }    return b & 0xFF;  }  throw new java.io.IOException("Error in Base64 code reading stream.");}  }
class C{  public void add(final ConversationStates state,final String trigger,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action,final String label){  engine.add(state,trigger,condition,false,nextState,reply,action,label);}  }
class C{  public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  public final CC gapTop(String boundsSize){  ver.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  private void initialize(){  this.setSize(650,440);  this.setContentPane(getJContentPane());  this.setTitle("JPlag Webservice Client");}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.b1:    toolbar.setActionTitle("XX Delgnew fnei onie nfien foisni nsion snid 535 353 53442453535 345435 353 53");  break;case R.id.b2:toolbar.showMainLogo();break;case R.id.b3:toolbar.setActionTitle("Kepler 452b");break;case R.id.b4:toolbar.setBackIconFunc(new ButtonCon());break;case R.id.b5:toolbar.setBackIconFunc(null);break;case R.id.bxx:finish();break;case R.id.b_search:search_start();break;case R.id.search_on:toolbar.setFindIconFunc(new ButtonCon());break;case R.id.search_off:toolbar.setFindIconFunc(null);break;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.653 -0500",hash_original_method="795B857E8950EF3C66EEA5946EF97E00",hash_generated_method="348846283D89ED607D27C17EE4A9858E") public int indexOf(GenericObject gobj){  return hlist.indexOf(gobj);}  }
class C{  public final String toString(String codeset){  StringBuffer sb=new StringBuffer();  if (doctype != null)   sb.append(doctype.toString(getCodeset()));  sb.append(html.toString(getCodeset()));  return (sb.toString());}  }
class C{  public static void assertNumSegments(SolrCore core,int expected){  RefCounted<SolrIndexSearcher> searcherRef=core.getRegisteredSearcher();  try {    assertEquals(expected,searcherRef.get().getIndexReader().leaves().size());  }  finally {    searcherRef.decref();  }}  }
class C{  public boolean equals(XObject obj2){  return obj2.getType() == CLASS_NULL;}  }
class C{  public void skipBits(int n){  byteOffset+=(n / 8);  bitOffset+=(n % 8);  if (bitOffset > 7) {    byteOffset++;    bitOffset-=8;  }  assertValidOffset();}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  Instances test=e.getTestSet();  DataSetEvent d=new DataSetEvent(this,test);  acceptDataSet(d);}  }
class C{  private void ensureMinimalSpanningTreks(Graph graph){  necessaryTreks=new HashMap<>();  for (  Set<Node> marginalSet : marginalVars) {    Map<List<Node>,Set<Node>> minimalSpanningTreks=minimalSpanningTreks(graph,marginalSet);    Set<List<Node>> treks=minimalSpanningTreks.keySet();    System.out.println(treks);    int t=1;    for (    List<Node> trek : treks) {      System.out.println("Finding ways to ensure minimal spanning treks... " + t + " of "+ treks.size());      necessaryTreks.put(trek,pathsEnsuringTrek(graph,trek,minimalSpanningTreks.get(trek)));      t++;    }  }}  }
class C{  public <A,B>TheoryBuilder2<A,B> forAll(final Source<A> as,final Source<B> bs){  return new TheoryBuilder2<>(state,as,bs,null);}  }
class C{  public static synchronized void fatal(String message){  LogFactory.getLog(ToolBox.getCaller()).fatal(message);}  }
class C{  public SingleLaunchActivityTestCase(String pkg,Class<T> activityClass){  mPackage=pkg;  mActivityClass=activityClass;  sTestCaseCounter++;}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public MappingSwitch(){  if (modelPackage == null) {    modelPackage=MappingPackage.eINSTANCE;  }}  }
class C{  public boolean hasData(){  return extremityMonitor.hasData();}  }
class C{  public StreamPosTokenizer(Reader r){  this();  if (r == null) {    throw new NullPointerException();  }  reader=r;}  }
class C{  public boolean match(PackageDeclaration node,Object other){  if (!(other instanceof PackageDeclaration)) {    return false;  }  PackageDeclaration o=(PackageDeclaration)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (!safeSubtreeMatch(node.getJavadoc(),o.getJavadoc())) {      return false;    }    if (!safeSubtreeListMatch(node.annotations(),o.annotations())) {      return false;    }  }  return safeSubtreeMatch(node.getName(),o.getName());}  }
class C{  public void truncate(final long position){  final int index=index(position);  final int offset=offset(position);  final Block block=blocks.get(index);  this.index=index;  block.limit=offset;  current=block;}  }
class C{  private static String wifiToXml(final String bssid,final String md5essid,final String ssid,final String capa,final String level,final String freq,final boolean anonymise){  String ssidXmlOrNothing="";  if (!anonymise && XmlSanitizer.isValid(ssid)) {    ssidXmlOrNothing=String.format(" ssid=\"%s\"",ssid);  } else   if (!anonymise && !XmlSanitizer.isValid(ssid)) {    Log.i(TAG,"Skipping no ascii ssid " + ssid);  }  return String.format(WIFI_XML,bssid,md5essid,ssidXmlOrNothing,capa,level,freq);}  }
class C{  protected boolean shouldCancelCurrent(){  return false;}  }
class C{  protected void loadClusterer(){  int returnVal=m_FileChooser.showOpenDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File selected=m_FileChooser.getSelectedFile();    Clusterer clusterer=null;    Instances trainHeader=null;    int[] ignoredAtts=null;    m_Log.statusMessage("Loading model from file...");    try {      InputStream is=new FileInputStream(selected);      if (selected.getName().endsWith(".gz")) {        is=new GZIPInputStream(is);      }      ObjectInputStream objectInputStream=new ObjectInputStream(is);      clusterer=(Clusterer)objectInputStream.readObject();      try {        trainHeader=(Instances)objectInputStream.readObject();        ignoredAtts=(int[])objectInputStream.readObject();      } catch (      Exception e) {      }      objectInputStream.close();    } catch (    Exception e) {      JOptionPane.showMessageDialog(null,e,"Load Failed",JOptionPane.ERROR_MESSAGE);    }    m_Log.statusMessage("OK");    if (clusterer != null) {      m_Log.logMessage("Loaded model from file '" + selected.getName() + "'");      String name=(new SimpleDateFormat("HH:mm:ss - ")).format(new Date());      String cname=clusterer.getClass().getName();      if (cname.startsWith("weka.clusterers.")) {        cname=cname.substring("weka.clusterers.".length());      }      name+=cname + " from file '" + selected.getName()+ "'";      StringBuffer outBuff=new StringBuffer();      outBuff.append("=== Model information ===\n\n");      outBuff.append("Filename:     " + selected.getName() + "\n");      outBuff.append("Scheme:       " + clusterer.getClass().getName());      if (clusterer instanceof OptionHandler) {        String[] o=((OptionHandler)clusterer).getOptions();        outBuff.append(" " + Utils.joinOptions(o));      }      outBuff.append("\n");      if (trainHeader != null) {        outBuff.append("Relation:     " + trainHeader.relationName() + '\n');        outBuff.append("Attributes:   " + trainHeader.numAttributes() + '\n');        if (trainHeader.numAttributes() < 100) {          boolean[] selectedAtts=new boolean[trainHeader.numAttributes()];          for (int i=0; i < trainHeader.numAttributes(); i++) {            selectedAtts[i]=true;          }          if (ignoredAtts != null) {            for (int i=0; i < ignoredAtts.length; i++) {              selectedAtts[ignoredAtts[i]]=false;            }          }          for (int i=0; i < trainHeader.numAttributes(); i++) {            if (selectedAtts[i]) {              outBuff.append("              " + trainHeader.attribute(i).name() + '\n');            }          }          if (ignoredAtts != null) {            outBuff.append("Ignored:\n");            for (            int ignoredAtt : ignoredAtts) {              outBuff.append("              " + trainHeader.attribute(ignoredAtt).name() + '\n');            }          }        } else {          outBuff.append("              [list of attributes omitted]\n");        }      } else {        outBuff.append("\nTraining data unknown\n");      }      outBuff.append("\n=== Clustering model ===\n\n");      outBuff.append(clusterer.toString() + "\n");      m_History.addResult(name,outBuff);      m_History.setSingle(name);      ArrayList<Object> vv=new ArrayList<Object>();      vv.add(clusterer);      if (trainHeader != null) {        vv.add(trainHeader);      }      if (ignoredAtts != null) {        vv.add(ignoredAtts);      }      String grph=null;      if (clusterer instanceof Drawable) {        try {          grph=((Drawable)clusterer).graph();        } catch (        Exception ex) {        }      }      if (grph != null) {        vv.add(grph);      }      m_History.addObject(name,vv);    }  }}  }
class C{  public NetworkSelectionEvent(final NetworkPanel source,final Set<PNode> oldSelection,final Set<PNode> selection){  super(source);  this.oldSelection=Collections.unmodifiableSet(oldSelection);  this.selection=Collections.unmodifiableSet(selection);}  }
class C{  public static Object evaluateExpression(Expression expr,CompilerConfiguration config){  String className="Expression$" + UUID.randomUUID().toString().replace('-','$');  ClassNode node=new ClassNode(className,Opcodes.ACC_PUBLIC,OBJECT_TYPE);  ReturnStatement code=new ReturnStatement(expr);  node.addMethod(new MethodNode("eval",Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC,OBJECT_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,code));  CompilerConfiguration copyConf=new CompilerConfiguration(config);  CompilationUnit cu=new CompilationUnit(copyConf);  cu.addClassNode(node);  cu.compile(Phases.CLASS_GENERATION);  @SuppressWarnings("unchecked") List<GroovyClass> classes=(List<GroovyClass>)cu.getClasses();  Class aClass=cu.getClassLoader().defineClass(className,classes.get(0).getBytes());  try {    return aClass.getMethod("eval").invoke(null);  } catch (  IllegalAccessException e) {    throw new GroovyBugError(e);  }catch (  InvocationTargetException e) {    throw new GroovyBugError(e);  }catch (  NoSuchMethodException e) {    throw new GroovyBugError(e);  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4),entryOf(k5,v5));}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") public void printTable(HardcopyWriter w){  int columnSize=(w.getCharactersPerLine() - this.getColumnCount() - 1) / this.getColumnCount();  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),(columnSize + 1) * this.getColumnCount());  String[] columnStrings=new String[this.getColumnCount()];  for (int i=0; i < this.getColumnCount(); i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),(columnSize + 1) * this.getColumnCount());  String spaces="";  for (int i=0; i < columnSize; i++) {    spaces=spaces + " ";  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < this.getColumnCount(); j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces;      } else       if (this.getValueAt(i,j) instanceof JComboBox) {        columnStrings[j]=(String)((JComboBox<?>)this.getValueAt(i,j)).getSelectedItem();      } else       if (this.getValueAt(i,j) instanceof Boolean) {        columnStrings[j]=(this.getValueAt(i,j)).toString();      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),(columnSize + 1) * this.getColumnCount());  }  w.close();}  }
class C{  public void pauseDelivery(boolean pause) throws Exception {  if (network instanceof RcNetwork) {    ((RcNetwork)network).pauseDeliveryTo(cmember.getMemberId(),pause);  }}  }
class C{  public void removeListener(Listener<Boolean> listener){  mListener=null;}  }
class C{  public LinkingMorphemes(File aMorphemesTextFile) throws IOException {  this(new BufferedReader(new FileReader(aMorphemesTextFile)));}  }
class C{  public String write(Object value,Class type) throws Exception {  return transform.write(value,type);}  }
class C{  public DeletionConstraintException(String message,DeletionConstraintExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  if (object.isNull())   return false;  return !Gen.inNursery(object);}  }
class C{  public <T>void processAnnotatedType(@Observes @WithAnnotations(value={AngularBean.class,NGExtension.class,NGApp.class}) ProcessAnnotatedType<T> processAnnotatedType){  AnnotatedType<T> annotatedType=processAnnotatedType.getAnnotatedType();  Class<T> typeClass=annotatedType.getJavaClass();  Logger.getLogger(this.getClass().getName()).log(Level.INFO,"Registering " + annotatedType.getJavaClass().getName());  if (annotatedType.isAnnotationPresent(AngularBean.class)) {    BeanRegistry.INSTANCE.registerBean(typeClass);    return;  }  if (annotatedType.isAnnotationPresent(NGExtension.class)) {    try {      BeanRegistry.INSTANCE.registerExtention((NGService)annotatedType.getJavaClass().newInstance());      return;    } catch (    InstantiationException|IllegalAccessException e) {      e.printStackTrace();    }  }  if (annotatedType.isAnnotationPresent(NGApp.class)) {    BeanRegistry.INSTANCE.registerApp(typeClass);  }}  }
class C{  protected void init(List srcs,Map props){  init(srcs);  if (props != null)   this.props.putAll(props);}  }
class C{  @VisibleForTesting void writePace(double speed,StringBuilder builder,int resId,String lineBreak){  String[] paceInMetrics=StringUtils.getSpeedParts(context,speed,true,false);  String[] paceInImperial=StringUtils.getSpeedParts(context,speed,false,false);  if (paceInMetrics[0] == null) {    paceInMetrics[0]=context.getString(R.string.value_unknown);  }  if (paceInImperial[0] == null) {    paceInImperial[0]=context.getString(R.string.value_unknown);  }  builder.append(context.getString(resId,paceInMetrics[0],paceInImperial[0]));  builder.append(lineBreak);}  }
class C{  private void capacity(int cap){  assert cap > 0;  if (cap != capacity()) {    if (cap < size) {      size=cap;      return;    }    data=Arrays.copyOf(data,cap);  }}  }
class C{  public BoundedRangeInputStream(InputStream in){  super(in);  try {    size=in.available();  } catch (  IOException ioe) {    size=0;  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static DimensionOption computeContextOption(Dimension dimension,AppContext ctx){  List<DimensionOption> options=dimension.getOptions();  if (dimension.getOptions() == null || dimension.getOptions().isEmpty()) {    return null;  }  DimensionOption merge=null;  for (  DimensionOption option : options) {    if (ctx == null || isOptionApplies(option,ctx)) {      if (merge == null) {        merge=option;      } else {        merge=new DimensionOption(merge,option);      }    }  }  return merge;}  }
class C{  @Override protected boolean isStaticFieldConstant(ResolvedJavaField field){  return super.isStaticFieldConstant(field) && (!ImmutableCode.getValue() || ImmutableCodeLazy.isEmbeddable(field));}  }
class C{  public void clearProperty(String key){  if (overridingProperties != null) {    overridingProperties.clearProperty(key);  }}  }
class C{  private void updateToLatest(Vocabulary installed,Vocabulary latestVersion) throws IOException, InvalidConfigException {  if (installed != null && latestVersion != null) {    boolean isNewVersion=false;    Date issued=installed.getIssued();    Date issuedLatest=latestVersion.getIssued();    if (issued == null && issuedLatest != null) {      isNewVersion=true;    } else     if (issued != null && issuedLatest != null) {      isNewVersion=(issuedLatest.compareTo(issued) > 0);    }    if (isNewVersion && latestVersion.getUriResolvable() != null) {      File tmpFile=download(latestVersion.getUriResolvable().toURL());      uninstall(installed.getUriString());      finishInstall(tmpFile,latestVersion);    }  }}  }
class C{  @Override public String toString(){  return "cudaGraphicsResource[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private MultivaluedMap<String,Object> resolveHeaders(Record record) throws StageException {  RecordEL.setRecordInContext(headerVars,record);  MultivaluedMap<String,Object> requestHeaders=new MultivaluedHashMap<>();  for (  Map.Entry<String,String> entry : conf.headers.entrySet()) {    List<Object> header=new ArrayList<>(1);    Object resolvedValue=headerEval.eval(headerVars,entry.getValue(),String.class);    header.add(resolvedValue);    requestHeaders.put(entry.getKey(),header);  }  return requestHeaders;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenomodificationallowederr.class,args);}  }
class C{  protected Namespace findDefaultNamespace(){  for (int i=namespaceStack.size() - 1; i >= 0; i--) {    Namespace namespace=namespaceStack.get(i);    if (namespace != null) {      String prefix=namespace.getPrefix();      if ((prefix == null) || (namespace.getPrefix().length() == 0)) {        return namespace;      }    }  }  return null;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_IsProcessing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void allocateIpAddressSpace(CreateVirtualNetworkWorkflowDocument state){  SubnetAllocatorService.AllocateSubnet allocateSubnet=new SubnetAllocatorService.AllocateSubnet(ServiceUtils.getIDFromDocumentSelfLink(state.taskServiceEntity.documentSelfLink),(long)state.size,(long)state.reservedStaticIpSize);  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(SubnetAllocatorService.SINGLETON_LINK).setBody(allocateSubnet).setCompletion(null).sendWith(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.595 -0500",hash_original_method="75359DDCF2D0B158439199FBAF05E06A",hash_generated_method="AB13BA3AF446FA82A306C47744A3DBAF") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onMessageWaitingIndicatorChanged(boolean mwi){}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (success) {    updateHeader();    if (newRecord || is_ValueChanged("S_ResourceAssignment_ID")) {      int S_ResourceAssignment_ID=getS_ResourceAssignment_ID();      int old_S_ResourceAssignment_ID=0;      if (!newRecord) {        Object ii=get_ValueOld("S_ResourceAssignment_ID");        if (ii instanceof Integer) {          old_S_ResourceAssignment_ID=((Integer)ii).intValue();          if (old_S_ResourceAssignment_ID != S_ResourceAssignment_ID && old_S_ResourceAssignment_ID != 0) {            MResourceAssignment ra=new MResourceAssignment(getCtx(),old_S_ResourceAssignment_ID,get_TrxName());            ra.delete(false);          }        }      }      if (S_ResourceAssignment_ID != 0) {        MResourceAssignment ra=new MResourceAssignment(getCtx(),S_ResourceAssignment_ID,get_TrxName());        if (getQty().compareTo(ra.getQty()) != 0) {          ra.setQty(getQty());          if (getDescription() != null && getDescription().length() > 0)           ra.setDescription(getDescription());          ra.saveEx();        }      }    }  }  return success;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void showError(Activity activity,String message){  String errorMessage=getErrorMessage(activity,message);  showErrorInternal(activity,errorMessage);}  }
class C{  private boolean internalIsLoggable(Level l){  int effectiveLevel=levelIntVal;  if (effectiveLevel == Level.OFF.intValue()) {    return false;  }  return l.intValue() >= effectiveLevel;}  }
class C{  public <DatabaseType extends PropertyDatabase<KeyType,Property>,KeyType extends FieldOrMethodDescriptor,Property>void storePropertyDatabase(DatabaseType database,String fileName,String description){  try {    File dbFile=new File(getDatabaseOutputDir(),fileName);    if (DEBUG) {      System.out.println("Writing " + description + " to "+ dbFile.getPath()+ "...");    }    database.writeToFile(dbFile.getPath());  } catch (  IOException e) {    getLookupFailureCallback().logError("Error writing " + description,e);  }}  }
class C{  private int putLength(int len,OutputStream out) throws IOException {  int retVal=0;  if (len < 128) {    out.write((byte)len);    retVal=1;  } else   if (len < (1 << 8)) {    out.write((byte)0x081);    out.write((byte)len);    retVal=2;  } else   if (len < (1 << 16)) {    out.write((byte)0x082);    out.write((byte)(len >> 8));    out.write((byte)len);    retVal=3;  } else   if (len < (1 << 24)) {    out.write((byte)0x083);    out.write((byte)(len >> 16));    out.write((byte)(len >> 8));    out.write((byte)len);    retVal=4;  } else {    out.write((byte)0x084);    out.write((byte)(len >> 24));    out.write((byte)(len >> 16));    out.write((byte)(len >> 8));    out.write((byte)len);    retVal=5;  }  return retVal;}  }
class C{  @Override public void removeEventListener2(IOneToOneFileTransferListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mOneToOneFileTransferBroadcaster.removeOneToOneFileTransferListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void buildChild(GraphNode rootNode,File child){  try {    if (child.isFile()) {      GraphNode file=visitFile(child);      getBuilder().newDep(rootNode,file,FileSystemRelation.CONTAINS_FILE);      return;    }    if (child.isDirectory()) {      GraphNode dir=visitDirectory(child);      getBuilder().newDep(rootNode,dir,FileSystemRelation.CONTAINS_DIR);      traverseTree(dir,child);      return;    }    logger.warning("Unknown file system object " + child.getCanonicalPath());  } catch (  IOException e) {    logger.severe("Unable to access tree entity " + child.getPath());  }}  }
class C{  public String stringValue(){  String str="";  byte[] b=byteArrayValue();  if ((b == null) || (b.length <= 1) || (b[0] == (byte)0)) {    return str;  }  int i;  for (i=0; i < b.length && b[i] != (byte)0; i++)   ;  return new String(b,0,i,defaultCharset);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=false;  boolean outputToFile=true;  if (args[0].equals("1")) {    enableOutput=true;  }  String inputFolder=args[1];  String outputFolder=args[2];  String workload=args[3];  String vmAllocationPolicy=args[4];  String vmSelectionPolicy="";  if (args.length >= 6 && args[5] != null && !args[5].isEmpty()) {    vmSelectionPolicy=args[5];  }  String parameter="";  if (args.length >= 7 && args[6] != null && !args[6].isEmpty()) {    parameter=args[6];  }  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public int indexOf(char ch){  return indexOf(ch,0);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ArrayBuilder create(){  return (new ArrayBuilder());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (key: ");  result.append(key);  result.append(", value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  @Override protected void executeSQL(Connection conn,final String lockName,final String expandedSQL,final String expandedInsertSQL) throws LockException {  SQLException lastFailure=null;  for (int i=0; i < RETRY_COUNT; i++) {    try {      if (!lockViaUpdate(conn,lockName,expandedSQL)) {        lockViaInsert(conn,lockName,expandedInsertSQL);      }      return;    } catch (    SQLException e) {      lastFailure=e;      if ((i + 1) == RETRY_COUNT) {        getLog().debug("Lock '{}' was not obtained by: {}",lockName,Thread.currentThread().getName());      } else {        getLog().debug("Lock '{}' was not obtained by: {} - will try again.",lockName,Thread.currentThread().getName());      }      try {        Thread.sleep(1000L);      } catch (      InterruptedException _) {        Thread.currentThread().interrupt();      }    }  }  throw new LockException("Failure obtaining db row lock: " + lastFailure.getMessage(),lastFailure);}  }
class C{  public void removeMapElement(MapElement mapElement){  DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)tree.getLastSelectedPathComponent();  boolean selected=false;  if (mapElement instanceof Landmark) {    for (int i=0; i < landmarksNode.getChildCount(); ++i) {      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)landmarksNode.getChildAt(i);      MapElement me=(MapElement)treeNode.getUserObject();      if (me.getName().equals(mapElement.getName())) {        selected=(treeNode == selectedNode);        landmarksNode.remove(treeNode);        break;      }    }    treeModel.nodeStructureChanged(landmarksNode);    if (selected) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,landmarksNode}));      doSelection(landmarksNode);    }  } else   if (mapElement instanceof Tool) {    for (int i=0; i < toolsNode.getChildCount(); ++i) {      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)toolsNode.getChildAt(i);      MapElement me=(MapElement)treeNode.getUserObject();      if (me.getName().equals(mapElement.getName())) {        selected=(treeNode == selectedNode);        toolsNode.remove(treeNode);        break;      }    }    treeModel.nodeStructureChanged(toolsNode);    if (selected) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,toolsNode}));      doSelection(toolsNode);    }  } else   if (mapElement instanceof LineSet) {    for (int i=0; i < lineSetsNode.getChildCount(); ++i) {      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)lineSetsNode.getChildAt(i);      MapElement me=(MapElement)treeNode.getUserObject();      if (me.getName().equals(mapElement.getName())) {        selected=(treeNode == selectedNode);        lineSetsNode.remove(treeNode);        break;      }    }    treeModel.nodeStructureChanged(lineSetsNode);    if (selected) {      tree.setSelectionPath(new TreePath(new Object[]{rootNode,lineSetsNode}));      doSelection(lineSetsNode);    }  } else   if (mapElement instanceof Waypoint) {    Waypoint waypoint=(Waypoint)mapElement;    String str=waypoint.getPathName();    int n=toolsNode.getChildCount();    for (int i=0; i < n; ++i) {      DefaultMutableTreeNode pathNode=(DefaultMutableTreeNode)toolsNode.getChildAt(i);      MapElement parent=(MapElement)pathNode.getUserObject();      if ((parent instanceof Path) && parent.getName().equals(str)) {        for (int j=0; j < pathNode.getChildCount(); ++j) {          DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)pathNode.getChildAt(j);          if (treeNode.getUserObject() == waypoint) {            selected=(treeNode == selectedNode);            pathNode.remove(treeNode);            treeModel.nodeStructureChanged(pathNode);            if (selected) {              tree.setSelectionPath(new TreePath(new Object[]{rootNode,toolsNode,pathNode}));              doSelection(pathNode);            }            break;          }        }        break;      }    }  }}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  public CSVStrategy(char delimiter,char encapsulator,char commentStart,char escape,boolean ignoreLeadingWhitespace,boolean ignoreTrailingWhitespace,boolean interpretUnicodeEscapes,boolean ignoreEmptyLines){  setDelimiter(delimiter);  setEncapsulator(encapsulator);  setCommentStart(commentStart);  setEscape(escape);  setIgnoreLeadingWhitespaces(ignoreLeadingWhitespace);  setIgnoreTrailingWhitespaces(ignoreTrailingWhitespace);  setUnicodeEscapeInterpretation(interpretUnicodeEscapes);  setIgnoreEmptyLines(ignoreEmptyLines);}  }
class C{  public BatchFraction defaultJobRepository(final JDBCJobRepository<?> jobRepository){  return defaultJobRepository(jobRepository.getKey());}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  private int computeOffset(int x,int y){  if (y > x) {    return computeOffset(y,x);  }  return ((x * (x + 1)) >> 1) + y;}  }
class C{  private void initView(AttributeSet attrs){  confWithAttributes(attrs);  addView(mListView,new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT));  mListView.setOnItemClickListener(new OnProxyItemClickListener());}  }
class C{  public void doPaste(){  if (hexEditControl == null)   return;  hexEditControl.paste();}  }
class C{  private void initDemoList(View view){  fragmentContainer=(FrameLayout)view.findViewById(R.id.fragment_container);  recyclerView=(RecyclerView)view.findViewById(R.id.fragment_demo_recycler_view);  recyclerView.setHasFixedSize(true);  layoutManager=new LinearLayoutManager(getActivity());  recyclerView.setLayoutManager(layoutManager);  ArrayList<String> itemsData=new ArrayList<>();  for (int i=0; i < 50; i++) {    itemsData.add("Fragment " + getArguments().getInt("index",-1) + " / Item "+ i);  }  DemoAdapter adapter=new DemoAdapter(itemsData);  recyclerView.setAdapter(adapter);}  }
class C{  public void square(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public boolean checkKeyUsage(final KeyUsageBit keyUsageBit){  Set<KeyUsageBit> keyUsageBits=getKeyUsageBits();  return keyUsageBits.contains(keyUsageBit);}  }
class C{  public JCheckBoxMenuItem(String text,boolean b){  this(text,null,b);}  }
class C{  void indent(){  lmargin++;}  }
class C{  public char next(){  if (offset >= (end - 1)) {    offset=end;    return DONE;  }  return string.charAt(++offset);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.861 -0500",hash_original_method="2E0FE194508C45AD5184DCF0A152D7A0",hash_generated_method="C9D76E5C4B47FC1953B85F362C2958F2") private void shrinkSize(){  int i=longCount - 1;  while (i >= 0 && bits[i] == 0) {    --i;  }  this.longCount=i + 1;}  }
class C{  public Gamma(double alpha,double lambda,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(alpha,lambda);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.383 -0500",hash_original_method="3F16B27E18A709EC962C39AF363F3965",hash_generated_method="951FF2A3732E55207835FFEBF921DEB7") private void doScrollX(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(delta,0);    } else {      scrollBy(delta,0);    }  }}  }
class C{  public SprogVersion(SprogType t){  if (log.isDebugEnabled()) {    log.debug("SprogVersion(SprogType) ctor: " + t.toString());  }  sprogType=t;  sprogVersion="";}  }
class C{  public SSLException(String message,Throwable cause){  super(message);  initCause(cause);}  }
class C{  public InMemoryMultiQueueApplier(){}  }
class C{  public TemplateFile addServiceTemplateFile(String fileNo,String fileName,ActionRequest actionRequest,ActionResponse actionResponse,ServiceContext serviceContext) throws PortalException, SystemException {  FileEntry file=null;  long templatefileId=CounterLocalServiceUtil.increment(TemplateFile.class.getName());  Date now=new Date();  TemplateFile template=templateFilePersistence.create(templatefileId);  try {    file=updateFileEntry(actionRequest,actionResponse);  } catch (  Exception e) {  }  if (Validator.isNotNull(file)) {    template.setCompanyId(serviceContext.getCompanyId());    template.setGroupId(serviceContext.getScopeGroupId());    template.setModifiedDate(now);    template.setCreateDate(now);    template.setUserId(serviceContext.getUserId());    template.setFileEntryId(file.getFileEntryId());    template.setFileName(fileName);    template.setFileNo(fileNo);    templateFilePersistence.update(template);  }  return template;}  }
class C{  public boolean isStatus(){  return status;}  }
class C{  @SuppressWarnings("unchecked") private void loadRecipes(){  InputStream in=getClass().getClassLoader().getResourceAsStream("builtin/recipes.yml");  if (in == null) {    GlowServer.logger.warning("Could not find default recipes on classpath");    return;  }  ConfigurationSection config=YamlConfiguration.loadConfiguration(in);  for (  Map<?,?> data : config.getMapList("shaped")) {    ItemStack resultStack=ItemStack.deserialize((Map<String,Object>)data.get("result"));    ShapedRecipe recipe=new ShapedRecipe(resultStack);    List<String> shape=(List<String>)data.get("shape");    recipe.shape(shape.toArray(new String[shape.size()]));    Map<String,Map<String,Object>> ingredients=(Map<String,Map<String,Object>>)data.get("ingredients");    for (    Entry<String,Map<String,Object>> entry : ingredients.entrySet()) {      ItemStack stack=ItemStack.deserialize(entry.getValue());      recipe.setIngredient(entry.getKey().charAt(0),stack.getData());    }    shapedRecipes.add(recipe);  }  for (  Map<?,?> data : config.getMapList("shapeless")) {    ItemStack resultStack=ItemStack.deserialize((Map<String,Object>)data.get("result"));    ShapelessRecipe recipe=new ShapelessRecipe(resultStack);    List<Map<String,Object>> ingreds=(List<Map<String,Object>>)data.get("ingredients");    for (    Map<String,Object> entry : ingreds) {      recipe.addIngredient(ItemStack.deserialize(entry).getData());    }    shapelessRecipes.add(recipe);  }  for (  Map<?,?> data : config.getMapList("furnace")) {    ItemStack inputStack=ItemStack.deserialize((Map<String,Object>)data.get("input"));    ItemStack resultStack=ItemStack.deserialize((Map<String,Object>)data.get("result"));    float xp=((Number)data.get("xp")).floatValue();    furnaceRecipes.add(new FurnaceRecipe(resultStack,inputStack.getType(),inputStack.getDurability(),xp));  }}  }
class C{  public void add(Vector4f vector){  this.points[0]+=vector.points[0];  this.points[1]+=vector.points[1];  this.points[2]+=vector.points[2];  this.points[3]+=vector.points[3];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressLint("NewApi") public void invalidateCache(String key){  if (DEBUG) {    CLog.d(LOG_TAG,"%s, invalidateCache",key);  }  mFileCache.delete(key);  mMemoryCache.remove(key);}  }
class C{  public long distanceSquared(Vector3i v){  int dx=this.x - v.x;  int dy=this.y - v.y;  int dz=this.z - v.z;  return dx * dx + dy * dy + dz * dz;}  }
class C{  protected VOTechnicalService createTechnicalServiceWithTags(String id,String[] tags,String billingId) throws Exception {  VOTechnicalService vo=new VOTechnicalService();  vo.setTechnicalServiceId(id);  vo.setAccessType(ServiceAccessType.LOGIN);  vo.setBaseUrl("http://localhost");  vo.setProvisioningUrl("");  vo.setProvisioningVersion("1.0");  List<String> tstags=Arrays.asList(tags);  vo.setTags(tstags);  vo.setBillingIdentifier(billingId);  svcProv.createTechnicalService(vo);  return vo;}  }
class C{  public boolean ping(long timeout){  try {    Request request=new Request(null,Type.CON);    request.setToken(new byte[0]);    request.setURI(uri);    request.send().waitForResponse(timeout);    return request.isRejected();  } catch (  InterruptedException e) {  }  return false;}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  InputStreamReader reader=new InputStreamReader(input);  return readLines(reader);}  }
class C{  public UserAgentHeader createUserAgentHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null user agent");  UserAgent userAgent=new UserAgent();  userAgent.setProduct(product);  return userAgent;}  }
class C{  public static int delDistance(CharSequence s,CharSequence t){  if (s == null || t == null) {    throw new IllegalArgumentException("Strings must not be null");  }  int n=s.length();  int m=t.length();  if (n == 0) {    return m;  } else   if (m == 0) {    return n;  }  int[][] vals=new int[3][n + 1];  int _d[];  int i;  int j;  char t_j;  char s_i;  int cost;  for (i=0; i <= n; i++) {    vals[1][i]=i * DL_DELETE;  }  for (j=1; j <= m; j++) {    t_j=t.charAt(j - 1);    vals[0][0]=j * DL_DELETE;    for (i=1; i <= n; i++) {      s_i=s.charAt(i - 1);      if (Character.isLowerCase(s_i) ^ Character.isLowerCase(t_j)) {        cost=caselessCompare(s_i,t_j) ? DL_CASE : DL_SUBSTITUTION;      } else {        cost=s_i == t_j ? 0 : DL_SUBSTITUTION;      }      vals[0][i]=Math.min(Math.min(vals[0][i - 1] + DL_DELETE,vals[1][i] + DL_DELETE),vals[1][i - 1] + cost);      if (i > 1 && j > 1) {        cost=Character.isLowerCase(s_i) ^ Character.isLowerCase(t.charAt(j - 2)) ? DL_CASE : 0;        cost=Character.isLowerCase(s.charAt(i - 2)) ^ Character.isLowerCase(t_j) ? cost + DL_CASE : cost;        if (caselessCompare(s_i,t.charAt(j - 2)) && caselessCompare(s.charAt(i - 2),t_j)) {          vals[0][i]=Math.min(vals[0][i],vals[2][i - 2] + DL_TRANSPOSITION + cost);        }      }    }    _d=vals[2];    vals[2]=vals[1];    vals[1]=vals[0];    vals[0]=_d;  }  return vals[1][n];}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @Override public boolean allProceduresAreCallable(){  debugCodeCall("allProceduresAreCallable");  return true;}  }
class C{  public RoundRobinRedisPool(final List<Redis> redisServers){  Preconditions.checkNotNull(redisServers);  Preconditions.checkArgument(redisServers.size() > 0);  this.redisServers=redisServers;  this.redisPoolIterator=redisServers.iterator();}  }
class C{  public void increment(int index,int value){  data[index]+=value;}  }
class C{  public static AltField parseAltLine(String line){  return new AltField(line);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public Matrix4d translationRotateScale(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public final Mat22 mulTrans(final Mat22 B){  final Mat22 C=new Mat22();  C.ex.x=Vec2.dot(this.ex,B.ex);  C.ex.y=Vec2.dot(this.ey,B.ex);  C.ey.x=Vec2.dot(this.ex,B.ey);  C.ey.y=Vec2.dot(this.ey,B.ey);  return C;}  }
class C{  private JProductLineEdit(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  public void loadListener(String serverKey) throws GenericServiceException {  Server server=servers.get(serverKey);  if (server == null)   throw new GenericServiceException("No listener found with that serverKey.");  loadListener(serverKey,server);}  }
class C{  @Override public void refreshUsersOrGroupsListFromServer(){  showLoadingDialog(getString(R.string.common_loading));  GetShareWithUsersAsyncTask getTask=new GetShareWithUsersAsyncTask(this);  Object[] params={getFile(),getAccount(),getStorageManager()};  getTask.execute(params);}  }
class C{  public List<Object> select(Fields selector){  return delegate.select(selector.getDelegate());}  }
class C{  public void addGrid(float lt,float ln,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties) throws IOException {  LinkGrid.write(lt,ln,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public void consolelog(){  addArg("consolelog");}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public Stream<String> deletedSetStream(){  return this.entries.values().stream().flatMap(null).filter(null).map(null);}  }
class C{  public boolean isCreate(){  return create;}  }
class C{  public static double optimizeScaleFactor(double scaleFactor,double currentLevel,double targetLevel){  if (scaleFactor <= 0.0 || scaleFactor >= 1.0) {    throw new IllegalArgumentException("scale factor was " + scaleFactor + "!");  }  double ratio=currentLevel / targetLevel;  if (ratio > 2.0)   ratio=2.0;  if (ratio < 0.5)   ratio=0.5;  return Math.pow(scaleFactor,ratio);}  }
class C{  private static long computePresentationTime(int frameIndex){  return 132 + frameIndex * 1000000 / FRAME_RATE;}  }
class C{  private void sendHandshakeDescriptionStatsRequest(){  OFDescStatsRequest descStatsRequest=factory.buildDescStatsRequest().setXid(handshakeTransactionIds--).build();  mainConnection.write(descStatsRequest);}  }
class C{  public IndTestChiSquare(DataSet dataSet,double alpha){  this.dataSet=dataSet;  this.variables=new ArrayList<>(dataSet.getVariables());  int[] numVals=new int[this.variables.size()];  for (int i=0; i < this.variables.size(); i++) {    DiscreteVariable v=(DiscreteVariable)(this.variables.get(i));    numVals[i]=v.getNumCategories();  }  this.chiSquareTest=new ChiSquareTest(dataSet,alpha);}  }
class C{  public EffectList copy(){  return new EffectList().concat(effects);}  }
class C{  public Schema findSchema(String schemaName){  Schema schema=schemas.get(schemaName);  if (schema == infoSchema) {    initMetaTables();  }  return schema;}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private MD5Legacy(byte[] bytes){  this.in=new ByteArrayInputStream(bytes);  this.state=new int[4];  this.buffer=new byte[64];  this.count=0L;  state[0]=0x67452301;  state[1]=0xefcdab89;  state[2]=0x98badcfe;  state[3]=0x10325476;}  }
class C{  public boolean isMassExplicit(){  return this.massExplicit;}  }
class C{  @Override public void runAndUpdate(final Runnable r){  r.run();}  }
class C{  public void drawChars(char[] data,int offset,int length,int x,int y){  if (!(current instanceof CustomFont)) {    drawString(new String(data,offset,length),x,y);  } else {    CustomFont f=(CustomFont)current;    f.drawChars(this,data,offset,length,x,y);  }}  }
class C{  public void rebuildClassFile(){}  }
class C{  public dl addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  return errors;}  }
class C{  private Start start(XMLEvent event){  Start node=new Start(event);  if (node.isEmpty()) {    return build(node);  }  return node;}  }
class C{  protected Integer adjustIntegerValue(Integer origValue,Integer minValue,Integer maxValue){  Integer resultValue=origValue;  if (resultValue.compareTo(minValue) < 0) {    resultValue=minValue;  }  if (resultValue.compareTo(maxValue) > 0) {    resultValue=maxValue;  }  return resultValue;}  }
class C{  public NtpMessage(byte[] array){  leapIndicator=(byte)((array[0] >> 6) & 0x3);  version=(byte)((array[0] >> 3) & 0x7);  mode=(byte)(array[0] & 0x7);  stratum=unsignedByteToShort(array[1]);  pollInterval=array[2];  precision=array[3];  rootDelay=(array[4] * 256.0) + unsignedByteToShort(array[5]) + (unsignedByteToShort(array[6]) / 256.0)+ (unsignedByteToShort(array[7]) / 65536.0);  rootDispersion=(unsignedByteToShort(array[8]) * 256.0) + unsignedByteToShort(array[9]) + (unsignedByteToShort(array[10]) / 256.0)+ (unsignedByteToShort(array[11]) / 65536.0);  referenceIdentifier[0]=array[12];  referenceIdentifier[1]=array[13];  referenceIdentifier[2]=array[14];  referenceIdentifier[3]=array[15];  referenceTimestamp=decodeTimestamp(array,16);  originateTimestamp=decodeTimestamp(array,24);  receiveTimestamp=decodeTimestamp(array,32);  transmitTimestamp=decodeTimestamp(array,40);}  }
class C{  public static void testPrivKeyTweakAdd_1() throws AssertFailException {  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] data=BaseEncoding.base16().lowerCase().decode("3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3".toLowerCase());  byte[] resultArr=NativeSecp256k1.privKeyTweakAdd(sec,data);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"A168571E189E6F9A7E2D657A4B53AE99B909F7E712D1C23CED28093CD57C88F3","testPrivKeyAdd_1");}  }
class C{  public void startTiming(){  start=System.currentTimeMillis();}  }
class C{  public String crop(String string){  if ((null == string) || (string.length() <= effectiveStringLength)) {    return string;  }  if (effectiveStringLength == 0) {    return "";  }  String cropped=string.substring(0,effectiveStringLength);  if (USE_TRAILING_DOTS) {    cropped=appendTrailingDots(cropped);  }  return cropped;}  }
class C{  void navigateNode(Node n,int segment) throws ODataException {  NavigationSegment nextSeg=navigationSegments.get(segment);  EdmEntitySet es=nextSeg.getEntitySet();  if (nextSeg.getKeyPredicates().isEmpty()) {    if (es.getName().equals(V1Model.NODE.getName()))     this.result=n == null ? null : n.getNodes(); else     if (es.getName().equals(V1Model.ATTRIBUTE.getName()))     this.result=n.getAttributes(); else     if (es.getName().equals(V1Model.CLASS.getName()))     this.result=n.getItemClass();  } else {    KeyPredicate kp=nextSeg.getKeyPredicates().get(0);    if (es.getName().equals(V1Model.NODE.getName())) {      Node nn=n.getNodes().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=nn; else       navigateNode(nn,segment + 1);    } else     if (es.getName().equals(V1Model.ATTRIBUTE.getName())) {      this.result=n.getAttributes().get(getKeyValue(kp,String.class));    } else     if (es.getName().equals(V1Model.CLASS.getName())) {      this.result=new ClassMap(n.getItemClass()).get(getKeyValue(kp,String.class));    }  }}  }
class C{  public static String toNTriplesString(BNode bNode){  try {    StringBuilder result=new StringBuilder(bNode.getID().length() + 1);    append(bNode,result);    return result.toString();  } catch (  IOException e) {    throw new RuntimeException("Should not receive IOException with StringBuilder",e);  }}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DrawerBuilder withCustomView(@NonNull View customView){  this.mCustomView=customView;  return this;}  }
class C{  public String encode(String value){  return doubleMetaphone(value);}  }
class C{  @Override public void onClick(View v){  AlertDialog dialog=new AlertDialog.Builder(this).setPositiveButton(android.R.string.ok,null).setMessage(R.string.secure_dialog_dialog_text).create();  dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);  dialog.show();}  }
class C{  void decrementSelection(){  if (getSelectedIndex() == 0) {    SearchField.this.setText(currentText);    clearSelection();  } else {    int selectedIndex=getSelectedIndex();    if (selectedIndex == -1)     selectedIndex=getModel().getSize() - 1; else     selectedIndex--;    setSelectedIndex(selectedIndex);    ensureIndexIsVisible(selectedIndex);    SearchField.this.setText((String)getSelectedValue());  }}  }
class C{  private void instantiateTimelineAndAlreadySeen(String dataObjectName,Object tmp) throws AdeException {  if (dataObjectName.contains("m_prevIntervalTimelineMap")) {    if (tmp instanceof Map<?,?>) {      m_prevIntervalTimelineMap=(Map<String,TreeSet<Long>>)tmp;    } else {      m_prevIntervalTimelineMap=new TreeMap<String,TreeSet<Long>>();      Ade.getAde().getDataStore().models().setModelDataObject(dataObjectName,m_prevIntervalTimelineMap);    }  } else   if (dataObjectName.contains("m_alreadySeen")) {    if (tmp instanceof Set<?>) {      m_alreadySeen=(HashSet<String>)tmp;    } else {      final DbDictionary dict=AdeInternal.getAdeImpl().getDictionaries().getMessageIdDictionary();      m_alreadySeen=new HashSet<String>(dict.getWords());      Ade.getAde().getDataStore().models().setModelDataObject(dataObjectName,m_alreadySeen);    }  }}  }
class C{  public FibonacciMinPQ<Key> union(FibonacciMinPQ<Key> that){  this.head=meld(head,that.head);  this.min=(greater(this.min.key,that.min.key)) ? that.min : this.min;  this.size=this.size + that.size;  return this;}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public static boolean hostSupportsOnFireVariableReplacement(Activity editActivity){  boolean supportedFlag=hostSupportsOnFireVariableReplacement(editActivity.getIntent().getExtras());  if (!supportedFlag) {    String callerPackage=editActivity.getCallingActivity().getPackageName();    supportedFlag=(callerPackage.startsWith(BASE_KEY)) && (getPackageVersionCode(editActivity.getPackageManager(),callerPackage) > FIRST_ON_FIRE_VARIABLES_TASKER_VERSION);  }  return supportedFlag;}  }
class C{  public static void printStatistics(){  VM.sysWrite("Number of JSR Subroutines processed: ");  VM.sysWrite(JSRRoutineCount);  VM.sysWrite("\n");  VM.sysWrite("Number of JSR Subroutines that started with a mismatched map: ");  VM.sysWrite(JSRRoutinesWithMismatch);  VM.sysWrite("\n");  VM.sysWrite("Total number of mismatch starts encountered :");  VM.sysWrite(JSRMismatchCount);}  }
class C{  public boolean hasArtistInCache(String name){synchronized (sArtistSearchCache) {    return sArtistSearchCache.containsKey(name);  }}  }
class C{  public void readCommandLine(String[] args){  cmdLineProps.readCommandLine(args);}  }
class C{  public static QueryAdvice generate(PTQuery query){  return new QueryAdvice(query);}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuffer();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  private void updateTo(final String to){  if (to != null && !to.contentEquals("0000") && !to.contentEquals("000000")) {    if (mToTalkgroup == null || !mToTalkgroup.contentEquals(to)) {      mToTalkgroup=to;      broadcast(ChangedAttribute.TO_TALKGROUP);      if (hasAliasList()) {        mToAlias=getAliasList().getTalkgroupAlias(mToTalkgroup);      } else {        mToAlias=null;      }      broadcast(ChangedAttribute.TO_TALKGROUP_ALIAS);      broadcast(new Metadata(MetadataType.TO,mToTalkgroup,mToAlias,true));      if (mCurrentCallEvent != null && (mCurrentCallEvent.getToID() == null || !mCurrentCallEvent.getToID().contentEquals(to))) {        mCurrentCallEvent.setToID(to);        broadcast(mCurrentCallEvent);      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.924 -0500",hash_original_method="2432D2D31ED521C760D918E6DCE1C6CE",hash_generated_method="EFBF8EEE61202CEEA55EB02BE50D9FAB") private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public MappingCandidateHarvester(TransportAddress mask,TransportAddress face){  this.mask=mask;  this.face=face;}  }
class C{  public Result compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){  return compile(args,null,context,fileObjects,processors);}  }
