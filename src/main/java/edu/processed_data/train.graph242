class C{  private PooledByteBuffer readFromDiskCache(final CacheKey key) throws IOException {  try {    FLog.v(TAG,"Disk cache read for %s",key.toString());    final BinaryResource diskCacheResource=mFileCache.getResource(key);    if (diskCacheResource == null) {      FLog.v(TAG,"Disk cache miss for %s",key.toString());      mImageCacheStatsTracker.onDiskCacheMiss();      return null;    } else {      FLog.v(TAG,"Found entry in disk cache for %s",key.toString());      mImageCacheStatsTracker.onDiskCacheHit();    }    PooledByteBuffer byteBuffer;    final InputStream is=diskCacheResource.openStream();    try {      byteBuffer=mPooledByteBufferFactory.newByteBuffer(is,(int)diskCacheResource.size());    }  finally {      is.close();    }    FLog.v(TAG,"Successful read from disk cache for %s",key.toString());    return byteBuffer;  } catch (  IOException ioe) {    FLog.w(TAG,ioe,"Exception reading from cache for %s",key.toString());    mImageCacheStatsTracker.onDiskCacheGetFail();    throw ioe;  }}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!MPaySelectionCheck.deleteGeneratedDraft(getCtx(),getC_Payment_ID(),get_TrxName())) {    m_processMsg="Could not delete draft generated payment selection lines";    return DocAction.STATUS_Invalid;  }  if (!MPeriod.isOpen(getCtx(),getDateAcct(),isReceipt() ? X_C_DocType.DOCBASETYPE_ARReceipt : X_C_DocType.DOCBASETYPE_APPayment,getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  if (isOnline() && !isApproved()) {    if (getR_Result() != null)     m_processMsg="@OnlinePaymentFailed@"; else     m_processMsg="@PaymentNotProcessed@";    return DocAction.STATUS_Invalid;  }  if (getC_Order_ID() != 0 && getC_Invoice_ID() == 0) {    MOrder order=new MOrder(getCtx(),getC_Order_ID(),get_TrxName());    if (DOCSTATUS_WaitingPayment.equals(order.getDocStatus())) {      order.setC_Payment_ID(getC_Payment_ID());      order.setDocAction(X_C_Order.DOCACTION_WaitComplete);      order.set_TrxName(get_TrxName());      order.processIt(X_C_Order.DOCACTION_WaitComplete);      m_processMsg=order.getProcessMsg();      order.saveEx(get_TrxName());      MInvoice[] invoices=order.getInvoices();      int length=invoices.length;      if (length > 0)       setC_Invoice_ID(invoices[length - 1].getC_Invoice_ID());      if (getC_Invoice_ID() == 0) {        m_processMsg="@NotFound@ @C_Invoice_ID@";        return DocAction.STATUS_Invalid;      }    }  }  MPaymentAllocate[] pAllocs=MPaymentAllocate.get(this);  if (!verifyDocType(pAllocs)) {    m_processMsg="@PaymentDocTypeInvoiceInconsistent@";    return DocAction.STATUS_Invalid;  }  if (!verifyPaymentAllocateVsHeader(pAllocs)) {    m_processMsg="@PaymentAllocateIgnored@";    return DocAction.STATUS_Invalid;  }  if (!verifyPaymentAllocateSum(pAllocs)) {    m_processMsg="@PaymentAllocateSumInconsistent@";    return DocAction.STATUS_Invalid;  }  if (!isReceipt()) {    MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());    if (X_C_BPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus())) {      m_processMsg="@BPartnerCreditStop@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();      return DocAction.STATUS_Invalid;    }    if (X_C_BPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus())) {      m_processMsg="@BPartnerCreditHold@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();      return DocAction.STATUS_Invalid;    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  public void reset(){  index=0;}  }
class C{  public float distance(vec3 b){  float x=this.m[0] - b.m[0];  float y=this.m[1] - b.m[1];  float z=this.m[2] - b.m[2];  float result=(float)Math.sqrt(x * x + y * y + z * z);  return result;}  }
class C{  private void abortWithError(String msg,Element e) throws CompileException {  reportError(msg,e);  throw new CompileException();}  }
class C{  public static int loadShader(int shaderType,String source){  int shader=GLES20.glCreateShader(shaderType);  checkGlError("glCreateShader type=" + shaderType);  GLES20.glShaderSource(shader,source);  GLES20.glCompileShader(shader);  int[] compiled=new int[1];  GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);  if (compiled[0] == 0) {    Log.e(TAG,"Could not compile shader " + shaderType + ":");    Log.e(TAG," " + GLES20.glGetShaderInfoLog(shader));    GLES20.glDeleteShader(shader);    shader=0;  }  return shader;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public List<JCTypeParameter> TypeParams(List<Type> typarams){  ListBuffer<JCTypeParameter> tparams=new ListBuffer<JCTypeParameter>();  for (List<Type> l=typarams; l.nonEmpty(); l=l.tail)   tparams.append(TypeParam(l.head.tsym.name,(TypeVar)l.head));  return tparams.toList();}  }
class C{  public void pause(){}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  @Override protected void profileRemoved(Profile profile){  if (profile != null) {    this.regionAdvisor.updateBucketStatus(this.getBucket().getId(),profile.getDistributedMember(),true);    this.regionAdvisor.decrementsBucketCount(profile);  }  updateRedundancy();  if (logger.isDebugEnabled()) {    logger.debug("Profile removed {} the member lost {} Profile : {}",getBucket().getFullPath(),profile.getDistributedMember(),profile);  }synchronized (this) {    updateServerBucketProfile();  }}  }
class C{  public void testTrackName_number(){  PreferencesUtils.setString(getContext(),R.string.track_name_key,getContext().getString(R.string.settings_recording_track_name_number_value));  assertEquals("Track " + TRACK_ID,TrackNameUtils.getTrackName(getContext(),TRACK_ID,START_TIME,null));}  }
class C{  public int makeTrees(EvolutionState state,GEIndividual ind,GPTree[] trees,int threadnum,HashMap ercMapsForFancyPrint){  int[] genome=ind.genome;  int position=0;  for (int i=1; i <= passes; i*=2) {    position=makeTrees(state,genome,trees,threadnum,ercMapsForFancyPrint);    if (position < 0 && i < passes) {      int[] old=genome;      genome=new int[old.length * 2];      System.arraycopy(old,0,genome,0,old.length);      System.arraycopy(old,0,genome,old.length,old.length);    }  }  return (Math.min(position,ind.genome.length));}  }
class C{  private ArcInfoASCGridImporter(){}  }
class C{  protected LambertConformal(LatLonPoint center,float scale,int width,int height){  super(center,scale,width,height);}  }
class C{  public void addBannedMac(final String mac){  addBannedMac(mac,null);}  }
class C{  public static boolean addExtractionRecipe(ItemStack aInput,ItemStack aOutput){  aOutput=GT_OreDictUnificator.get(true,aOutput);  if (aInput == null || aOutput == null)   return false;  GT_Utility.removeSimpleIC2MachineRecipe(aInput,getExtractorRecipeList(),null);  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.extractor,aInput,true))   return false;  GT_Utility.addSimpleIC2MachineRecipe(aInput,getExtractorRecipeList(),null,aOutput);  return true;}  }
class C{  public static Automaton determinize(Automaton a,int maxDeterminizedStates){  if (a.isDeterministic()) {    return a;  }  if (a.getNumStates() <= 1) {    return a;  }  Automaton.Builder b=new Automaton.Builder();  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);  b.createState();  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();  worklist.add(initialset);  b.setAccept(0,a.isAccept(0));  newstate.put(initialset,0);  final PointTransitionSet points=new PointTransitionSet();  final SortedIntSet statesSet=new SortedIntSet(5);  Transition t=new Transition();  while (worklist.size() > 0) {    SortedIntSet.FrozenIntSet s=worklist.removeFirst();    for (int i=0; i < s.values.length; i++) {      final int s0=s.values[i];      int numTransitions=a.getNumTransitions(s0);      a.initTransition(s0,t);      for (int j=0; j < numTransitions; j++) {        a.getNextTransition(t);        points.add(t);      }    }    if (points.count == 0) {      continue;    }    points.sort();    int lastPoint=-1;    int accCount=0;    final int r=s.state;    for (int i=0; i < points.count; i++) {      final int point=points.points[i].point;      if (statesSet.upto > 0) {        assert lastPoint != -1;        statesSet.computeHash();        Integer q=newstate.get(statesSet);        if (q == null) {          q=b.createState();          if (q >= maxDeterminizedStates) {            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);          }          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);          worklist.add(p);          b.setAccept(q,accCount > 0);          newstate.put(p,q);        } else {          assert (accCount > 0 ? true : false) == b.isAccept(q) : "accCount=" + accCount + " vs existing accept="+ b.isAccept(q)+ " states="+ statesSet;        }        b.addTransition(r,q,lastPoint,point - 1);      }      int[] transitions=points.points[i].ends.transitions;      int limit=points.points[i].ends.next;      for (int j=0; j < limit; j+=3) {        int dest=transitions[j];        statesSet.decr(dest);        accCount-=a.isAccept(dest) ? 1 : 0;      }      points.points[i].ends.next=0;      transitions=points.points[i].starts.transitions;      limit=points.points[i].starts.next;      for (int j=0; j < limit; j+=3) {        int dest=transitions[j];        statesSet.incr(dest);        accCount+=a.isAccept(dest) ? 1 : 0;      }      lastPoint=point;      points.points[i].starts.next=0;    }    points.reset();    assert statesSet.upto == 0 : "upto=" + statesSet.upto;  }  Automaton result=b.finish();  assert result.isDeterministic();  return result;}  }
class C{  @Override public int hashCode(){  int result=17;  result=31 * result + type;  result=31 * result + Arrays.hashCode(encoded);  return result;}  }
class C{  public int size(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return count;  }  finally {    lock.unlock();  }}  }
class C{  public void clear() throws Exception {  m_Document=new XMLDocument();  m_Document.setValidating(true);  m_Document.newDocument(DOCTYPE,ROOT_NODE);  m_Properties=new PropertyHandler();  m_CustomMethods=new XMLSerializationMethodHandler(this);  m_ClassnameOverride=new Hashtable<Class<?>,String>();  m_ClassnameOverride.put(java.io.File.class,java.io.File.class.getName());  setVersion(Version.VERSION);  m_CurrentNode=null;}  }
class C{  protected void selectDrawItem(int position){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.238 -0500",hash_original_method="963E643D37666FF20B3A3B029F181389",hash_generated_method="E5D3FDE45AA5BD19E1FD088D74ECF497") public boolean quickContains(Rect r){  return (((r.getTaintInt() + getTaintInt())) == 1);}  }
class C{  private void adjustPoints(){  float xMin=decodeArr[0];  float xMax=decodeArr[1];  float yMin=decodeArr[2];  float yMax=decodeArr[3];  float xw=xMax - xMin;  float yw=yMax - yMin;  ArrayList<Point2D> triPoints=new ArrayList<Point2D>();  for (  Point2D p : triangles) {    double xx=p.getX();    double yy=p.getY();    xx=(xw * xx) + xMin;    yy=(yw * yy) + yMin;    triPoints.add(new Point2D.Double(xx,yy));  }  triangles.clear();  float scaleX=1 / (matrix[0][0]);  float scaleY=1 / (matrix[1][1]);  float tx=matrix[2][0] * scaleX;  float ty=matrix[2][1] * scaleY;  for (  Point2D t : triPoints) {    double x=t.getX();    double y=t.getY();    float b=0;    float c=0;    double xx=(x) + (c * y) + tx;    double yy=(b * x) + (y) + ty;    xx=(int)xx;    yy=(int)yy;    triangles.add(new Point2D.Double(xx,yy));  }  for (int t=0; t < triangles.size(); t+=3) {    GeneralPath sh=new GeneralPath();    sh.moveTo(triangles.get(t).getX(),triangles.get(t).getY());    sh.lineTo(triangles.get(t + 1).getX(),triangles.get(t + 1).getY());    sh.lineTo(triangles.get(t + 2).getX(),triangles.get(t + 2).getY());    sh.closePath();    shapes.add(sh);  }}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void main(String args[]){  String tmpOutputLocation=TempDirectoryUtil.createCustomTempDirectory("test");  Network network=LeastCostPathTreeExtended.createTriangularNetwork();  Config config=ConfigUtils.createConfig();  ControlerConfigGroup controlerCG=(ControlerConfigGroup)config.getModule(ControlerConfigGroup.GROUP_NAME);  controlerCG.setLastIteration(1);  controlerCG.setOutputDirectory(tmpOutputLocation);  ScenarioUtils.ScenarioBuilder builder=new ScenarioUtils.ScenarioBuilder(config);  builder.setNetwork(createTriangularNetwork());  Scenario scenario=builder.build();  Controler controler=new Controler(scenario);  controler.run();  LeastCostPathTreeExtended lcpte=new LeastCostPathTreeExtended(controler.getLinkTravelTimes(),controler.createTravelDisutilityCalculator(),(RoadPricingSchemeImpl)controler.getScenario().getScenarioElement(RoadPricingScheme.ELEMENT_NAME));  Map<Id<Node>,? extends Node> networkNodesMap=network.getNodes();  Id<Node> originNodeID=Id.create(1,Node.class);  Id<Node> destinationNodeId=Id.create(4,Node.class);  lcpte.calculateExtended(network,networkNodesMap.get(originNodeID),3600.);  double time=lcpte.getTree().get(destinationNodeId).getTime();  double disutility=lcpte.getTree().get(destinationNodeId).getCost();  double distance=lcpte.getTreeExtended().get(destinationNodeId).getDistance();  double toll=lcpte.getTreeExtended().get(destinationNodeId).getToll();  log.info("Time = " + time);  log.info("Disutility = " + disutility);  log.info("Distance = " + distance);  log.info("Toll = " + toll);  TempDirectoryUtil.cleanUpCustomTempDirectories();}  }
class C{  protected Todo(Context context){  context.put(todoKey,this);}  }
class C{  public CertificacionException(String message){  this(message,null);}  }
class C{  public void groupingTags(TagInfo tagInfo){  tagInfo=new TagInfo("div",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("div",tagInfo);  tagInfo=new TagInfo("figure",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("figure",tagInfo);  tagInfo=new TagInfo("figcaption",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineRequiredEnclosingTags("figure");  this.put("figcaption",tagInfo);  tagInfo=new TagInfo("p",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("p,address,summary,label,abbr,acronym,dfn,kbd,samp,var,cite,code,param,xml,time");  this.put("p",tagInfo);  tagInfo=new TagInfo("pre",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("pre",tagInfo);  tagInfo=new TagInfo("ul",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("dl," + CLOSE_BEFORE_TAGS);  tagInfo.defineAllowedChildrenTags("li,ul,ol,div");  this.put("ul",tagInfo);  tagInfo=new TagInfo("ol",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("dl," + CLOSE_BEFORE_TAGS);  tagInfo.defineAllowedChildrenTags("li,ul,ol,div");  this.put("ol",tagInfo);  tagInfo=new TagInfo("li",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags("li," + CLOSE_BEFORE_TAGS);  tagInfo.defineRequiredEnclosingTags("ol,menu,ul");  this.put("li",tagInfo);  tagInfo=new TagInfo("dl",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineAllowedChildrenTags("dt,dd");  this.put("dl",tagInfo);  tagInfo=new TagInfo("dt",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineCloseBeforeTags("dt,dd");  tagInfo.defineRequiredEnclosingTags("dl");  this.put("dt",tagInfo);  tagInfo=new TagInfo("dd",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.optional,Display.block);  tagInfo.defineCloseBeforeTags("dt,dd");  tagInfo.defineRequiredEnclosingTags("dl");  this.put("dd",tagInfo);  tagInfo=new TagInfo("hr",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("hr",tagInfo);  tagInfo=new TagInfo("blockquote",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("blockquote",tagInfo);}  }
class C{  public void remove(Value key){  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    Value k=keys[index];    if (k == null) {      return;    } else     if (k == ValueNull.DELETED) {    } else     if (k.equals(key)) {      keys[index]=ValueNull.DELETED;      values[index]=null;      deletedCount++;      size--;      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  int dequeueTelegram(){  int result=-1;  if (txTelegramQueue.size() > 0) {    currTxTgm=txTelegramQueue.remove(0);    if (currTxTgm[1] != (blockCounter + 1)) {      log.info(String.format("MsgCounter adjusted:%02x->%02x",(int)currTxTgm[1],(int)blockCounter + 1));      currTxTgm[1]=++blockCounter;    }    currTxCharPos=0;    result=0;  } else {    currTxTgm=getAckTelegram();    currTxCharPos=0;    result=0;  }  return (result);}  }
class C{  public DrawerBuilder withFooterClickable(boolean footerClickable){  this.mFooterClickable=footerClickable;  return this;}  }
class C{  public IntentBuilder sizeLimit(int limit){  result.putExtra(MediaStore.EXTRA_SIZE_LIMIT,limit);  return (this);}  }
class C{  private void readSegments() throws IOException {  for (  SegmentExtent10 extent : _segmentExtents) {    try (ReadStream is=openRead(extent.address(),extent.length())){      is.skip(extent.length() - BLOCK_SIZE);      long sequence=BitsUtil.readLong(is);      byte[] tableKey=new byte[TABLE_KEY_SIZE];      is.readAll(tableKey,0,tableKey.length);      if (sequence > 0) {        Segment10 segment=new Segment10(sequence,tableKey,extent);        _segments.add(segment);      }    }   }}  }
class C{  public ColladaExtra(String namespaceURI){  super(namespaceURI);}  }
class C{  public JavaCore(){  super();}  }
class C{  public void trackNextPageLoadFromTimestamp(long timestamp){  mIntentReceivedTimestamp=timestamp;  mCurrentState=STATE_WAITING_LOAD_START;}  }
class C{  public JVM(){  this(System.getProperty("java.version"));}  }
class C{  @Override public void fromBytes(ByteBuf buf){  final int numProperties=buf.readInt();  fluidTankProperties=new IFluidTankProperties[numProperties];  for (int i=0; i < numProperties; i++) {    final NBTTagCompound tagCompound=ByteBufUtils.readTag(buf);    final FluidStack contents=FluidStack.loadFluidStackFromNBT(tagCompound);    final int capacity=buf.readInt();    fluidTankProperties[i]=new FluidTankProperties(contents,capacity);  }}  }
class C{  protected void writeCastExpression(Column sourceColumn,Column targetColumn,StringBuilder ddl){  printIdentifier(getColumnName(sourceColumn),ddl);}  }
class C{  public T documentPath(String value){  setString(DOCUMENT_PATH,value);  return (T)this;}  }
class C{  private void endControlWord(){  String word=controlWord.toString();  if ("par".equals(word)) {    sb.append('\n');  } else   if ("tab".equals(word)) {    sb.append('\t');  }  controlWord.setLength(0);  inControlWord=false;}  }
class C{  public static void loadVariableModel(Element loco,VariableTableModel varModel){  Element values=loco.getChild("values");  if (values == null) {    log.error("no values element found in config file; Variable values not loaded for \"{}\"",loco.getAttributeValue("id"));    return;  }  Element decoderDef=values.getChild("decoderDef");  if (decoderDef == null) {    log.error("no decoderDef element found in config file; Variable values not loaded for \"{}\"",loco.getAttributeValue("id"));    return;  }  if (log.isDebugEnabled()) {    log.debug("Found " + decoderDef.getChildren("varValue").size() + " varValue elements");  }  HashMap<String,VariableValue> map=new HashMap<>();  for (int i=0; i < varModel.getRowCount(); i++) {    log.debug("  map put {} to {}",varModel.getItem(i),varModel.getVariable(i));    map.put(varModel.getItem(i),varModel.getVariable(i));    map.put(varModel.getLabel(i),varModel.getVariable(i));  }  for (  Element element : decoderDef.getChildren("varValue")) {    if (element.getAttribute("item") == null) {      if (log.isDebugEnabled()) {        log.debug("unexpected null in item {} {}",element,element.getAttributes());      }      break;    }    if (element.getAttribute("value") == null) {      if (log.isDebugEnabled()) {        log.debug("unexpected null in value {} {}",element,element.getAttributes());      }      break;    }    String item=element.getAttribute("item").getValue();    String value=element.getAttribute("value").getValue();    log.debug("Variable \"{}\" has value: {}",item,value);    VariableValue var=map.get(item);    if (var != null) {      var.setValue(value);    } else {      if (selectMissingVarResponse(item) == MessageResponse.REPORT) {        log.warn("Did not find locofile variable \"{}\" in decoder definition, not loading",item);      }    }  }}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  private void initData(){  dataOffset=findHeader(0x64,0x61,0x74,0x61);  if (dataOffset > 0) {    return;  }  log.error("Didn't find data chunk");}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,org.xml.sax.ContentHandler ch,boolean normalize) throws org.xml.sax.SAXException {}  }
class C{  private void updateActionsEnabledStatus(ISelection selection){  if (selection.isEmpty()) {    moveUpAction.setEnabled(false);    moveDownAction.setEnabled(false);    deleteAction.setEnabled(false);    editAction.setEnabled(false);  } else   if (selection instanceof StructuredSelection) {    StructuredSelection sSelection=(StructuredSelection)selection;    if (sSelection.size() == 1) {      ApplicationDefinition application=getApplication();      boolean isDefaultBTx=propertyTester.test(sSelection.getFirstElement(),BusinessContextTester.IS_DEFAULT_BTX_PROPERTY,new Object[]{application},null);      boolean canMoveUp=propertyTester.test(sSelection.getFirstElement(),BusinessContextTester.CAN_MOVE_UP_PROPERTY,new Object[]{application},null);      boolean canMoveDown=propertyTester.test(sSelection.getFirstElement(),BusinessContextTester.CAN_MOVE_DOWN_PROPERTY,new Object[]{application},null);      moveUpAction.setEnabled(canMoveUp && !isDefaultBTx);      moveDownAction.setEnabled(canMoveDown && !isDefaultBTx);      deleteAction.setEnabled(!isDefaultBTx);      editAction.setEnabled(!isDefaultBTx);    } else     if (sSelection.size() > 1) {      boolean containsDefaultBTx=false;      ApplicationDefinition application=getApplication();      for (      Object element : sSelection.toList()) {        if (propertyTester.test(element,BusinessContextTester.IS_DEFAULT_BTX_PROPERTY,new Object[]{application},null)) {          containsDefaultBTx=true;          break;        }      }      moveUpAction.setEnabled(false);      moveDownAction.setEnabled(false);      editAction.setEnabled(false);      deleteAction.setEnabled(!containsDefaultBTx);    }  }}  }
class C{  public Process(){  try {    ProcessRootOperator root=OperatorService.createOperator(ProcessRootOperator.class);    root.rename(root.getOperatorDescription().getName());    setRootOperator(root);  } catch (  Exception e) {    throw new RuntimeException("Cannot initialize root operator of the process: " + e.getMessage(),e);  }  initContext();}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public T invoke(Object instance,Object... parameters){  Preconditions.checkNotNull(parameters,"Null parameters");  Object[] args=new Object[parameters.length + 1];  parameters[0]=Preconditions.checkNotNull(instance,"Null instance");  System.arraycopy(parameters,0,args,1,parameters.length);  try {    return (T)invoker.invokeWithArguments(args);  } catch (  ClassCastException|WrongMethodTypeException e) {    validateArgs(instance,parameters);    throw new AssertionError("Unknown error",e);  }}  }
class C{  public void add(final Extension<?,?> extension){  if (extension.getExtensionType() != Extension.ExtensionType.IMMUTABLE && extension.getExtensionType() != Extension.ExtensionType.MUTABLE) {    return;  }  add(newExtensionInfo(extension),extension.getExtensionType());}  }
class C{  public ServiceChangedException(Reason reason){  super("Service changed");  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void globalCSE(BasicBlock b){  Instruction next, inst;  inst=b.firstInstruction();  while (!BBend.conforms(inst)) {    next=inst.nextInstructionInCodeOrder();    if (!shouldCSE(inst)) {      inst=next;      continue;    }    RegisterOperand result=getResult(inst);    if (result == null) {      inst=next;      continue;    }    int vn=valueNumbers.getValueNumber(result);    if (vn < 0) {      inst=next;      continue;    }    Integer Vn=vn;    Instruction former=avail.get(Vn);    if (former == null) {      avail.put(Vn,inst);    } else {      RegisterOperand formerDef=getResult(former);      Register reg=result.getRegister();      formerDef.getRegister().setSpansBasicBlock();      Enumeration<RegisterOperand> uses=DefUse.uses(reg);      while (uses.hasMoreElements()) {        RegisterOperand use=uses.nextElement();        DefUse.transferUse(use,formerDef);      }      if (verbose) {        VM.sysWrite("using      " + former + "\n"+ "instead of "+ inst+ "\n");      }      inst.remove();    }    inst=next;  }  Enumeration<TreeNode> e=dominator.getChildren(b);  while (e.hasMoreElements()) {    DominatorTreeNode n=(DominatorTreeNode)e.nextElement();    BasicBlock bl=n.getBlock();    if (ir.options.FREQ_FOCUS_EFFORT && bl.getInfrequent())     continue;    globalCSE(bl);  }  inst=b.firstInstruction();  while (!BBend.conforms(inst)) {    next=inst.nextInstructionInCodeOrder();    if (!shouldCSE(inst)) {      inst=next;      continue;    }    RegisterOperand result=getResult(inst);    if (result == null) {      inst=next;      continue;    }    int vn=valueNumbers.getValueNumber(result);    if (vn < 0) {      inst=next;      continue;    }    Integer Vn=vn;    Instruction former=avail.get(Vn);    if (former == inst) {      avail.remove(Vn);    }    inst=next;  }}  }
class C{  private E dequeue(){  final Object[] items=this.items;  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];  items[takeIndex]=null;  takeIndex=inc(takeIndex);  count--;  if (itrs != null)   itrs.elementDequeued();  notFull.signal();  return x;}  }
class C{  public Option(int number,long val){  this.number=number;  setLongValue(val);}  }
class C{  public ArgParser(String pName){  programName=pName;  args=new Vector();  args.add(new HelpArg());}  }
class C{  private void onNear(){  Ignite near=ignite;  UUID nearId=ignite.cluster().localNode().id();  GridCacheEntryEx nearEntry=near(near).peekEx(CNTR_KEY);  try {    for (int i=0; i < RETRIES; i++) {      if (DEBUG)       log.info("***");      if (DEBUG || i % LOG_FREQ == 0)       log.info("*** Near Iteration #" + i + " ***");      if (DEBUG)       log.info("***");      IgniteCache<String,Integer> c=near.cache(null);      Integer oldCntr=c.localPeek(CNTR_KEY,CachePeekMode.ONHEAP);      try (Transaction tx=near.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){        if (DEBUG)         log.info("Started tx [grid=" + near.name() + ", primary=false, xid="+ tx.xid()+ ", oldCntr="+ oldCntr+ ", node="+ nearId+ ", nearEntry="+ nearEntry+ ']');        int curCntr=c.get(CNTR_KEY);        assertTrue(lockedMultiNode.compareAndSet(false,true));        if (DEBUG)         log.info("Read counter [grid=" + near.name() + ", primary=false, curCntr="+ curCntr+ ", oldCntr="+ oldCntr+ ", node="+ nearId+ ", nearEntry="+ nearEntry+ ']');        int global=globalCntrMultiNode.get();        assert curCntr >= global : invalid("Counter mismatch",near,false,curCntr,global);        int newCntr=curCntr + 1;        if (DEBUG)         log.info("Setting global counter [old=" + global + ", new="+ newCntr+ ']');        assert globalCntrMultiNode.compareAndSet(global,newCntr) : invalid("Invalid global counter",near,false,newCntr,global);        int prev=c.getAndPut(CNTR_KEY,newCntr);        if (DEBUG)         log.info("Put new value [grid=" + near.name() + ", primary=false, prev="+ prev+ ", newCntr="+ newCntr+ ']');        assert curCntr == prev : invalid("Counter mismatch",near,false,curCntr,prev);        assertTrue(lockedMultiNode.compareAndSet(true,false));        tx.commit();        if (DEBUG)         log.info("Committed tx: " + tx);      }     }  } catch (  Throwable t) {    log.error(t.getMessage(),t);    fail(t.getMessage());  }}  }
class C{  public final static String formatStatusLine(final StatusLine statline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatStatusLine(null,statline).toString();}  }
class C{  public VNXeCommandResult updateFileSystemQuotaSync(String quotaId,FileSystemQuotaModifyParam param) throws VNXeException {  _logger.info("Sync update quota with ID: " + quotaId);  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();  queryParams.add(VNXeConstants.TIMEOUT,"0");  setQueryParameters(queryParams);  VNXUnityTreeQuota quota=getFileSystemQuota(quotaId);  _url=URL_INSTANCE + quota.getId() + URL_MODIFY;  return postRequestSync(param);}  }
class C{  public MapObject(Object id,Drawable drawable,int x,int y,int pivotX,int pivotY){  this(id,drawable,x,y,pivotX,pivotY,false,false);}  }
class C{  public IntVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public void addDevices(Collection<IEspDevice> devices){  addDevices(devices,UpgradeDevice.UPGRADE_TYPE_AUTO);}  }
class C{  public void testFlat() throws IOException {  BooleanQuery.Builder q=new BooleanQuery.Builder();  q.add(new BooleanClause(t1,BooleanClause.Occur.SHOULD));  q.add(new BooleanClause(t2,BooleanClause.Occur.SHOULD));  q.add(new BooleanClause(c1,BooleanClause.Occur.SHOULD));  q.add(new BooleanClause(c2,BooleanClause.Occur.SHOULD));  assertEquals(1,search(q.build()));}  }
class C{  @Autowired public ForwardingTelemetryAdapterFactory(final SenderFactory senderFactory){  this.senderFactory=Objects.requireNonNull(senderFactory);}  }
class C{  private void processBackspace(){}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int length=s.readInt();  this.longs=new AtomicLongArray(length);  for (int i=0; i < length; i++) {    set(i,s.readDouble());  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public NumericalValue(final BigInteger value){  this.value=value;}  }
class C{  public static String byteToHexString(byte in){  StringBuffer out=new StringBuffer(2);  byte ch=(byte)(in & 0xF0);  ch=(byte)(ch >>> 4);  ch=(byte)(ch & 0x0F);  out.append(hexChars[(int)ch]);  ch=(byte)(in & 0x0F);  out.append(hexChars[(int)ch]);  return out.toString();}  }
class C{  public boolean hasSamplingrate(){  return getSamplingrate() != null;}  }
class C{  public static byte[] toByteArray(RenderedImage image,String format,String encoding,Properties props) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  OutputStream os=bos;  if (ImageConstants.ENCODING_ASCII85.equals(encoding) || ImageConstants.ENCODING_FLATE_ASCII85.equals(encoding)) {    os=new ASCII85OutputStream(os);  }  if (ImageConstants.ENCODING_FLATE.equals(encoding) || ImageConstants.ENCODING_FLATE_ASCII85.equals(encoding)) {    os=new FlateOutputStream(os);  }  if (props == null) {    props=new Properties();  }  ImageGraphics2D.writeImage(image,format.toLowerCase(),props,os);  os.close();  return bos.toByteArray();}  }
class C{  public void testNoCallback() throws RpcException {  rpcForwarder.registerService(new FakeServiceImpl(REQUEST));  SocketRpcProtos.Response rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertFalse(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());  Callback<SocketRpcProtos.Response> rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertFalse(rpcCallback.isInvoked());  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).toBlockingService());  rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());  rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertTrue(rpcCallback.isInvoked());  rpcResponse=rpcCallback.getResponse();  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());}  }
class C{  public short[] readShortArray(final int items,final JBBPByteOrder byteOrder) throws IOException {  int pos=0;  if (items < 0) {    short[] buffer=new short[INITIAL_ARRAY_BUFFER_SIZE];    while (hasAvailableData()) {      final int next=readUnsignedShort(byteOrder);      if (buffer.length == pos) {        final short[] newbuffer=new short[buffer.length << 1];        System.arraycopy(buffer,0,newbuffer,0,buffer.length);        buffer=newbuffer;      }      buffer[pos++]=(short)next;    }    if (buffer.length == pos) {      return buffer;    }    final short[] result=new short[pos];    System.arraycopy(buffer,0,result,0,pos);    return result;  } else {    final short[] buffer=new short[items];    for (int i=0; i < items; i++) {      buffer[i]=(short)readUnsignedShort(byteOrder);    }    return buffer;  }}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static String toString(final char value){  return Character.toString(value);}  }
class C{  public void skipTranslogRecovery() throws IOException {  assert engineUnsafe() == null : "engine was already created";  Map<String,Mapping> recoveredTypes=internalPerformTranslogRecovery(true,true);  assert recoveredTypes.isEmpty();  assert recoveryState.getTranslog().recoveredOperations() == 0;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  protected static void drawDataPoint(double x,double y,int size,int shape,Graphics gx){  Font lf=new Font("Monospaced",Font.PLAIN,12);  FontMetrics fm=gx.getFontMetrics(lf);  if (size == 0) {    size=1;  }  if (shape != ERROR_SHAPE && shape != MISSING_SHAPE) {    shape=shape % 5;  }switch (shape) {case X_SHAPE:    drawX(gx,x,y,size);  break;case PLUS_SHAPE:drawPlus(gx,x,y,size);break;case DIAMOND_SHAPE:drawDiamond(gx,x,y,size);break;case TRIANGLEUP_SHAPE:drawTriangleUp(gx,x,y,size);break;case TRIANGLEDOWN_SHAPE:drawTriangleDown(gx,x,y,size);break;case ERROR_SHAPE:gx.drawRect((int)(x - size),(int)(y - size),(size * 2),(size * 2));break;case MISSING_SHAPE:int hf=fm.getAscent();int width=fm.stringWidth("M");gx.drawString("M",(int)(x - (width / 2)),(int)(y + (hf / 2)));break;}}  }
class C{  private boolean canMakeSmores(){  return (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1);}  }
class C{  public static void printState(TLCState currentState){  MP.printState(EC.TLC_STATE_PRINT1,new String[]{"",currentState.toString()},currentState,-1);}  }
class C{  private static void initializeFontMeasures(){  platformSpecificFont=DEFAULT_FONT;  Graphics2D testGraphics=new BufferedImage(10,10,BufferedImage.TYPE_INT_ARGB).createGraphics();  float[] possibleFontSizes={25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10};  for (  float size : possibleFontSizes) {    Font deriveFont=DEFAULT_FONT.deriveFont(size);    testGraphics.setFont(deriveFont);    String testString="54";    Rectangle2D stringBounds=deriveFont.getStringBounds(testString,testGraphics.getFontRenderContext());    if (stringBounds.getWidth() <= MAXIMAL_TEXT_WIDTH) {      platformSpecificFont=deriveFont;      textWidth=stringBounds.getWidth();      textHeight=deriveFont.createGlyphVector(testGraphics.getFontRenderContext(),testString).getVisualBounds().getHeight();      break;    }  }}  }
class C{  private void addNewlines(Node n){  Node nextNode=n.getNext();  if (nextNode != null) {    if (nodeComments.getComment(nextNode) == null && TOKENS_TO_ADD_NEWLINES_BEFORE.contains(nextNode.getToken())) {      add("\n");    }  }}  }
class C{  public void appendByte(int val){  buf[pos++]=(byte)val;}  }
class C{  public void nodeSelected(SiteNode node){  if (node != null) {    siteModel.setSelectedItem(ScanPanel.cleanSiteName(node,true));  }}  }
class C{  void addRadioButton(String key,RadioButton rb,String value){  if (rb.isSelected()) {    defaultCheckedButtons.addElement(rb);  } else {    defaultUncheckedButtons.addElement(rb);  }  if (key == null) {    return;  }  Hashtable internal=(Hashtable)comps.get(key);  ButtonGroup group=null;  if (internal == null) {    internal=new Hashtable();    comps.put(key,internal);    group=new ButtonGroup();    buttonGroups.put(key,group);  } else {    group=(ButtonGroup)buttonGroups.get(key);  }  group.add(rb);  internal.put(rb,value);}  }
class C{  public Collection<String> queryTypes(){  String[] types=getTypes();  if (types == null || types.length == 0) {    return mapperService().types();  }  if (types.length == 1 && types[0].equals("_all")) {    return mapperService().types();  }  return Arrays.asList(types);}  }
class C{  public static IssuingDistributionPoint decode(byte[] encoding) throws IOException {  IssuingDistributionPoint idp=(IssuingDistributionPoint)ASN1.decode(encoding);  idp.encoding=encoding;  return idp;}  }
class C{  public String selectTriggerState(Connection conn,TriggerKey triggerKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    String state=null;    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_STATE));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      state=rs.getString(COL_TRIGGER_STATE);    } else {      state=STATE_DELETED;    }    return state.intern();  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public Object parse(byte[] bytes){  if (bytes == null) {    throw new IllegalArgumentException("bytes must not be null");  }  Object content;  content=createParser().parse(bytes);  return content;}  }
class C{  public static boolean hasExportMaskForStorageAndVArray(DbClient dbClient,ExportGroup exportGroup,URI storageURI){  Set<String> storagePortURIsAssociatedWithVArrayAndStorageArray=ExportMaskUtils.getStoragePortUrisAssociatedWithVarrayAndStorageArray(storageURI,exportGroup.getVirtualArray(),dbClient);  StringSet maskUriSet=exportGroup.getExportMasks();  if (maskUriSet != null) {    for (    String maskUriString : maskUriSet) {      ExportMask mask=dbClient.queryObject(ExportMask.class,URI.create(maskUriString));      URI maskStorageURI=mask.getStorageDevice();      if (maskStorageURI.equals(storageURI)) {        for (        String storagePort : mask.getStoragePorts()) {          if (storagePortURIsAssociatedWithVArrayAndStorageArray.contains(storagePort))           return true;        }      }    }  }  return false;}  }
class C{  public boolean isAvailable(){  try {    ApplicationInfo appInfo=mContext.getPackageManager().getApplicationInfo(RCS_STACK_PACKAGENAME,0);    return (appInfo.flags & ApplicationInfo.FLAG_STOPPED) == 0;  } catch (  NameNotFoundException e) {    return false;  }}  }
class C{  public void readData(DataInput din) throws IOException {}  }
class C{  private static double[] note(double hz,double duration,double amplitude){  int N=(int)(StdAudio.SAMPLE_RATE * duration);  double[] a=new double[N + 1];  for (int i=0; i <= N; i++)   a[i]=amplitude * Math.sin(2 * Math.PI * i* hz / StdAudio.SAMPLE_RATE);  return a;}  }
class C{  public ThreadDeath(){}  }
class C{  @Override protected void processException(ReplyException ex){  if (logger.isDebugEnabled()) {    logger.debug("DestroyRegionResponse ignoring exception",ex);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public ProjectExtensionProperties(Project project,String[] keyList,boolean privateProps){  this.project=project;  this.keyList=keyList;  properties=new EditableProperties(true);  if (project instanceof J2SEProject) {    load();  }  if (privateProps) {    propertyFileName=AntProjectHelper.PRIVATE_PROPERTIES_PATH;  } else {    propertyFileName=AntProjectHelper.PROJECT_PROPERTIES_PATH;  }}  }
class C{  public void incCqsClosed(){  this._stats.incLong(_numCqsClosedId,1);}  }
class C{  private static void parseLine(Class<?> parent,char[] line,int begin,int end,URL nam){  while (begin < end && line[begin] == ' ') {    begin++;  }  if (begin >= end || line[begin] == '#') {    return;  }  int cend=begin + 1;  while (cend < end && line[cend] != ' ') {    cend++;  }  String cname=new String(line,begin,cend - begin);  ELKIServiceRegistry.register(parent,cname);  for (int abegin=cend + 1, aend=-1; abegin < end; abegin=aend + 1) {    while (abegin < end && line[abegin] == ' ') {      abegin++;    }    aend=abegin + 1;    while (aend < end && line[aend] != ' ') {      aend++;    }    if (abegin < aend) {      ELKIServiceRegistry.registerAlias(parent,new String(line,abegin,aend - abegin),cname);    }  }  return;}  }
class C{  public void showLoadingView(){  if (mLoadingView == null) {    mLoadingView=mLoadingViewStub.inflate();  }  mRootView.setVisibility(View.VISIBLE);  mLoadingView.setVisibility(View.VISIBLE);  if (mEmptyView != null) {    mEmptyView.setVisibility(View.GONE);  }}  }
class C{  public static float[] toFloatArray(Byte[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public static String lcs(String s,String t){  SuffixArray suffix1=new SuffixArray(s);  SuffixArray suffix2=new SuffixArray(t);  String lcs="";  int i=0, j=0;  while (i < s.length() && j < t.length()) {    int p=suffix1.index(i);    int q=suffix2.index(j);    String x=lcp(s,p,t,q);    if (x.length() > lcs.length())     lcs=x;    if (compare(s,p,t,q) < 0)     i++; else     j++;  }  return lcs;}  }
class C{  public static Appendable format(long l,int radix,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  if (a instanceof TextBuilder)   return ((TextBuilder)a).append(l,radix);  TextBuilder tb=new TextBuilder();  tb.append(l,radix);  return a.append(tb);}  }
class C{  public boolean isProductLicensed(LicenseType licenseType){  return true;}  }
class C{  protected void removeLayer(Layer[] currentLayers,int index){  Layer rLayer=currentLayers[index];  if (!rLayer.isRemovable()) {    logger.warning("received command to remove " + rLayer.getName() + ", which has been designated as *NOT* removeable");    return;  }  rLayer.setVisible(false);  Layer[] newLayers=new Layer[currentLayers.length - 1];  System.arraycopy(currentLayers,0,newLayers,0,index);  System.arraycopy(currentLayers,index + 1,newLayers,index,currentLayers.length - index - 1);  BeanContext bc=getBeanContext();  if (bc != null) {    bc.remove(rLayer);  }  turnLayerOn(false,rLayer);  rLayer.clearListeners();  rLayer=null;  setLayers(newLayers);}  }
class C{  public void order(long order){  this.order=order;}  }
class C{  public CacheClientNotifierStats(StatisticsFactory f){  this._stats=f.createAtomicStatistics(_type,"cacheClientNotifierStats");}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  SequenceStreamManager(final File dir,final long numberSequences,final boolean quality,IndexFile mainIndex,DataFileOpenerFactory openerFactory) throws IOException {  super(dir,numberSequences,SdfFileUtils.SEQUENCE_INDEX_FILENAME,SdfFileUtils.SEQUENCE_DATA_FILENAME,SdfFileUtils.SEQUENCE_POINTER_FILENAME,mainIndex.dataIndexVersion(),openerFactory.getSequenceOpener());  mOpenQuality=quality;  if (mOpenQuality) {    mQuality=new DataRollingFile(mDir,SdfFileUtils.SEQUENCE_QUALITY_DATA_FILENAME,mIndex.numberEntries(),mIndex,openerFactory.getQualityOpener());  } else {    mQuality=null;  }  mPointerHandler=PointerFileHandler.getHandler(mainIndex,PointerFileHandler.SEQUENCE_POINTER);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static boolean CallNonvirtualBooleanMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualBooleanMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Boolean,true);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  public void registerScriptContext(ScriptContext.Plugin scriptContext){  customScriptContexts.add(scriptContext);}  }
class C{  @Inject public CassandraDaemonController(Executor executor){  LOGGER.info("Setting executor to {}",executor);  this.executor=(CassandraExecutor)executor;  LOGGER.info("Set executor to {}",this.executor);}  }
class C{  public final boolean canGetDate(String field){  return m_table.canGetDate(field);}  }
class C{  protected void writeInitialStyles() throws IOException {  this.out.flushBits();  int fillCount=fillStyles.size() / 2;  int lineCount=lineStyles.size() / 2;  fillBitSize=OutStream.determineUnsignedBitSize(fillCount);  lineBitSize=OutStream.determineUnsignedBitSize(lineCount);  if (shapeCount == 2) {    if (fillCount < 255) {      this.out.writeUI8(fillCount);    } else {      this.out.writeUI8(255);      this.out.writeUI16(fillCount);    }    for (Iterator enumumerator=fillStyles.iterator(); enumumerator.hasNext(); ) {      FillStyle startStyle=(FillStyle)enumumerator.next();      FillStyle endStyle=(FillStyle)enumumerator.next();      FillStyle.writeMorphFillStyle(this.out,startStyle,endStyle);    }    if (lineCount < 255) {      this.out.writeUI8(lineCount);    } else {      this.out.writeUI8(255);      this.out.writeUI16(lineCount);    }    for (Iterator enumerator=lineStyles.iterator(); enumerator.hasNext(); ) {      LineStyle startStyle=(LineStyle)enumerator.next();      LineStyle endStyle=(LineStyle)enumerator.next();      LineStyle.writeMorphLineStyle(this.out,startStyle,endStyle);    }  }  if (shapeStart == 0) {    shapeStart=(int)this.out.getBytesWritten();  }  this.out.writeUBits(4,fillBitSize);  this.out.writeUBits(4,lineBitSize);}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((sourceHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(sourceImage.getPreferredPalette());    updateProgress("Loop 1 of 2:",0);    double[] data;    for (row=0; row < rows; row++) {      data=sourceImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (backLink.getValue(row,col) != noData && output.getValue(row,col) == noData) {          x=col;          y=row;          z=noData;          flag=true;          do {            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                z=output.getValue(y,x);                flag=false;              }            } else {              z=output.getValue(y,x);              flag=false;            }          } while (flag);          x=col;          y=row;          flag=true;          do {            output.setValue(y,x,z);            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    sourceImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isRegularChannel(String channel){  return validateChannel(channel) && channel.startsWith("#");}  }
class C{  private void updateBranches(){  myBranchComboBox.removeAllItems();  for (  GitBranch b : myLocalBranches) {    myBranchComboBox.addItem(b.getName());  }  if (myCurrentBranch != null) {    myBranchComboBox.setSelectedItem(myCurrentBranch.getName());  } else {    myBranchComboBox.setSelectedItem(0);  }  updateOntoFrom();  updateTrackedBranch();}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("jo1x",ContainerType.INSTALLED,Jo1xInstalledLocalContainer.class);}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public void quit(){  super.quit();  display=null;}  }
class C{  public static void assertTrue(boolean value){  if (verbose) {    log("assertTrue(" + value + ")");  }  assertBool(value);}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + nRow;  bits=31L * bits + nCol;  for (int i=0; i < nRow; i++) {    for (int j=0; j < nCol; j++) {      bits=31L * bits + VecMathUtil.doubleToLongBits(values[i][j]);    }  }  return (int)(bits ^ (bits >> 32));}  }
class C{  private String printDFormat(final short x){  return printDFormat(Short.toString(x));}  }
class C{  private NamedList<Number> createStatistics(long totalBytes,long localBytes,int totalCount,int localCount){  NamedList<Number> statistics=new SimpleOrderedMap<Number>();  statistics.add(LOCALITY_BYTES_TOTAL,totalBytes);  statistics.add(LOCALITY_BYTES_LOCAL,localBytes);  if (localBytes == 0) {    statistics.add(LOCALITY_BYTES_RATIO,0);  } else {    statistics.add(LOCALITY_BYTES_RATIO,localBytes / (double)totalBytes);  }  statistics.add(LOCALITY_BLOCKS_TOTAL,totalCount);  statistics.add(LOCALITY_BLOCKS_LOCAL,localCount);  if (localCount == 0) {    statistics.add(LOCALITY_BLOCKS_RATIO,0);  } else {    statistics.add(LOCALITY_BLOCKS_RATIO,localCount / (double)totalCount);  }  return statistics;}  }
class C{  public Glyph[] createAltGlyphArray(BridgeContext ctx,Element altGlyphElement,float fontSize,AttributedCharacterIterator aci){  String uri=XLinkSupport.getXLinkHref(altGlyphElement);  Element refElement=null;  try {    refElement=ctx.getReferencedElement(altGlyphElement,uri);  } catch (  BridgeException e) {    if (ERR_URI_UNSECURE.equals(e.getCode())) {      ctx.getUserAgent().displayError(e);    }  }  if (refElement == null) {    return null;  }  if (!SVG_NAMESPACE_URI.equals(refElement.getNamespaceURI()))   return null;  if (refElement.getLocalName().equals(SVG_GLYPH_TAG)) {    Glyph glyph=getGlyph(ctx,uri,altGlyphElement,fontSize,aci);    if (glyph == null) {      return null;    }    Glyph[] glyphArray=new Glyph[1];    glyphArray[0]=glyph;    return glyphArray;  }  if (refElement.getLocalName().equals(SVG_ALT_GLYPH_DEF_TAG)) {    SVGOMDocument document=(SVGOMDocument)altGlyphElement.getOwnerDocument();    SVGOMDocument refDocument=(SVGOMDocument)refElement.getOwnerDocument();    boolean isLocal=(refDocument == document);    Element localRefElement=(isLocal) ? refElement : (Element)document.importNode(refElement,true);    if (!isLocal) {      String base=AbstractNode.getBaseURI(altGlyphElement);      Element g=document.createElementNS(SVG_NAMESPACE_URI,SVG_G_TAG);      g.appendChild(localRefElement);      g.setAttributeNS(XMLConstants.XML_NAMESPACE_URI,"xml:base",base);      CSSUtilities.computeStyleAndURIs(refElement,localRefElement,uri);    }    NodeList altGlyphDefChildren=localRefElement.getChildNodes();    boolean containsGlyphRefNodes=false;    int numAltGlyphDefChildren=altGlyphDefChildren.getLength();    for (int i=0; i < numAltGlyphDefChildren; i++) {      Node altGlyphChild=altGlyphDefChildren.item(i);      if (altGlyphChild.getNodeType() == Node.ELEMENT_NODE) {        Element agc=(Element)altGlyphChild;        if (SVG_NAMESPACE_URI.equals(agc.getNamespaceURI()) && SVG_GLYPH_REF_TAG.equals(agc.getLocalName())) {          containsGlyphRefNodes=true;          break;        }      }    }    if (containsGlyphRefNodes) {      NodeList glyphRefNodes=localRefElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_GLYPH_REF_TAG);      int numGlyphRefNodes=glyphRefNodes.getLength();      Glyph[] glyphArray=new Glyph[numGlyphRefNodes];      for (int i=0; i < numGlyphRefNodes; i++) {        Element glyphRefElement=(Element)glyphRefNodes.item(i);        String glyphUri=XLinkSupport.getXLinkHref(glyphRefElement);        Glyph glyph=getGlyph(ctx,glyphUri,glyphRefElement,fontSize,aci);        if (glyph == null) {          return null;        }        glyphArray[i]=glyph;      }      return glyphArray;    } else {      NodeList altGlyphItemNodes=localRefElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_ALT_GLYPH_ITEM_TAG);      int numAltGlyphItemNodes=altGlyphItemNodes.getLength();      if (numAltGlyphItemNodes > 0) {        boolean foundMatchingGlyph=false;        Glyph[] glyphArray=null;        for (int i=0; i < numAltGlyphItemNodes && !foundMatchingGlyph; i++) {          Element altGlyphItemElement=(Element)altGlyphItemNodes.item(i);          NodeList altGlyphRefNodes=altGlyphItemElement.getElementsByTagNameNS(SVG_NAMESPACE_URI,SVG_GLYPH_REF_TAG);          int numAltGlyphRefNodes=altGlyphRefNodes.getLength();          glyphArray=new Glyph[numAltGlyphRefNodes];          foundMatchingGlyph=true;          for (int j=0; j < numAltGlyphRefNodes; j++) {            Element glyphRefElement=(Element)altGlyphRefNodes.item(j);            String glyphUri=XLinkSupport.getXLinkHref(glyphRefElement);            Glyph glyph=getGlyph(ctx,glyphUri,glyphRefElement,fontSize,aci);            if (glyph != null) {              glyphArray[j]=glyph;            } else {              foundMatchingGlyph=false;              break;            }          }        }        if (!foundMatchingGlyph) {          return null;        }        return glyphArray;      }    }  }  return null;}  }
class C{  boolean removeDisplay(Display display){  return m_displays.remove(display);}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2,Object o3){  if (o0 == null) {    throw new NullPointerException(FIRST_ARG_IS_NULL);  }  if (o1 == null) {    throw new NullPointerException(SECOND_ARG_IS_NULL);  }  if (o2 == null) {    throw new NullPointerException(THIRD_ARG_IS_NULL);  }  if (o3 == null) {    throw new NullPointerException(FOURTH_ARG_IS_NULL);  }}  }
class C{  protected Query createTermQuery(final String field,final String value){  return new TermQuery(new Term(field,value));}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  public DocTermOrds(LeafReader reader,Bits liveDocs,String field,BytesRef termPrefix,int maxTermDocFreq,int indexIntervalBits) throws IOException {  this(field,maxTermDocFreq,indexIntervalBits);  uninvert(reader,liveDocs,termPrefix);}  }
class C{  @Pure @Inline private static boolean isPrimitiveArgumentCompatible(RVMType expectedType,Object arg){  if (arg instanceof java.lang.Void) {    if (expectedType.isVoidType())     return true;  } else   if (arg instanceof java.lang.Boolean) {    if (expectedType.isBooleanType())     return true;  } else   if (arg instanceof java.lang.Byte) {    if (expectedType.isByteType())     return true;    if (expectedType.isShortType())     return false;    if (expectedType.isIntType())     return false;    if (expectedType.isLongType())     return false;  } else   if (arg instanceof java.lang.Short) {    if (expectedType.isShortType())     return true;    if (expectedType.isIntType())     return false;    if (expectedType.isLongType())     return false;  } else   if (arg instanceof java.lang.Character) {    if (expectedType.isCharType())     return true;    if (expectedType.isIntType())     return false;    if (expectedType.isLongType())     return false;  } else   if (arg instanceof java.lang.Integer) {    if (expectedType.isIntType())     return true;    if (expectedType.isLongType())     return false;  } else   if (arg instanceof java.lang.Long) {    if (expectedType.isLongType())     return true;  } else   if (arg instanceof java.lang.Float) {    if (expectedType.isFloatType())     return true;    if (expectedType.isDoubleType())     return false;  } else   if (arg instanceof java.lang.Double) {    if (expectedType.isDoubleType())     return true;  }  throwNewIllegalArgumentException();  return false;}  }
class C{  public static <I>SimpleFastItemIndex<I> load(Stream<I> items){  SimpleFastItemIndex<I> itemIndex=new SimpleFastItemIndex<>();  items.forEach(null);  return itemIndex;}  }
class C{  @Override public <T extends ParseObject.State.Init<?>>T decode(T builder,JSONObject json,ParseDecoder decoder){  try {    if (json.has(KEY_OLD_OBJECT_ID)) {      String newObjectId=json.getString(KEY_OLD_OBJECT_ID);      builder.objectId(newObjectId);    }    if (json.has(KEY_OLD_CREATED_AT)) {      String createdAtString=json.getString(KEY_OLD_CREATED_AT);      if (createdAtString != null) {        builder.createdAt(ParseImpreciseDateFormat.getInstance().parse(createdAtString));      }    }    if (json.has(KEY_OLD_UPDATED_AT)) {      String updatedAtString=json.getString(KEY_OLD_UPDATED_AT);      if (updatedAtString != null) {        builder.updatedAt(ParseImpreciseDateFormat.getInstance().parse(updatedAtString));      }    }    if (json.has(KEY_OLD_POINTERS)) {      JSONObject newPointers=json.getJSONObject(KEY_OLD_POINTERS);      Iterator<?> keys=newPointers.keys();      while (keys.hasNext()) {        String key=(String)keys.next();        JSONArray pointerArray=newPointers.getJSONArray(key);        builder.put(key,ParseObject.createWithoutData(pointerArray.optString(0),pointerArray.optString(1)));      }    }    JSONObject data=json.optJSONObject(KEY_DATA);    if (data != null) {      Iterator<?> keys=data.keys();      while (keys.hasNext()) {        String key=(String)keys.next();        if (key.equals(KEY_OBJECT_ID)) {          String newObjectId=data.getString(key);          builder.objectId(newObjectId);          continue;        }        if (key.equals(KEY_CREATED_AT)) {          builder.createdAt(ParseDateFormat.getInstance().parse(data.getString(key)));          continue;        }        if (key.equals(KEY_UPDATED_AT)) {          builder.updatedAt(ParseDateFormat.getInstance().parse(data.getString(key)));          continue;        }        Object value=data.get(key);        Object decodedObject=decoder.decode(value);        builder.put(key,decodedObject);      }    }    return builder;  } catch (  JSONException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean addValuableOre(Block aBlock,int aMeta,int aValue){  if (aValue <= 0)   return false;  try {    Class.forName("ic2.core.IC2").getMethod("addValuableOre",IRecipeInput.class,int.class).invoke(null,new RecipeInputItemStack(new ItemStack(aBlock,1,aMeta)),aValue);  } catch (  Throwable e) {  }  return true;}  }
class C{  public BaseRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final Class responseClass){  mRequestUrl=requestUrl;  mClient=client;  mResponseClass=responseClass;  mHeadersOptions=new ArrayList<>();  mQueryOptions=new ArrayList<>();  if (options != null) {    for (    final Option option : options) {      if (option instanceof HeaderOption) {        mHeadersOptions.add((HeaderOption)option);      }      if (option instanceof QueryOption) {        mQueryOptions.add((QueryOption)option);      }    }  }  final HeaderOption requestStatsHeader=new HeaderOption(REQUEST_STATS_HEADER_NAME,String.format(REQUEST_STATS_HEADER_VALUE_FORMAT_STRING,BuildConfig.VERSION_NAME));  mHeadersOptions.add(requestStatsHeader);}  }
class C{  private boolean detectSpecialInitializationCase(FacesContext facesContext){  boolean result=false;  if (null == facesContext) {    logNullFacesContext.compareAndSet(false,true);  } else {    logNonNullFacesContext.compareAndSet(false,true);  }  result=logNullFacesContext.get() && logNonNullFacesContext.get();  return result;}  }
class C{  public synchronized void registerSuspendedResponse(WorkerCategory category,Response response){  String workerId=response.getRequest().getHeader(AnalystWorker.WORKER_ID_HEADER);  if (workerId != null && !workerId.isEmpty()) {    workerCatalog.catalog(workerId,category);  } else {    LOG.error("Worker did not supply a unique ID for itself . Ignoring it.");    return;  }  Deque<Response> deque=workersByCategory.get(category);  if (deque == null) {    deque=new ArrayDeque<>();    workersByCategory.put(category,deque);  }  deque.addLast(response);  nWaitingConsumers+=1;  notify();}  }
class C{  public PooledExecutorWithDMStats(BlockingQueue<Runnable> q,int poolSize,ThreadFactory tf){  this(q,poolSize,null,tf);}  }
class C{  public static void shareMyApp(Context context,String subject,String message){  try {    String appUrl="https://play.google.com/store/apps/details?id=" + context.getPackageName();    Intent i=new Intent(Intent.ACTION_SEND);    i.setType("text/plain");    i.putExtra(Intent.EXTRA_SUBJECT,subject);    String leadingText="\n" + message + "\n\n";    leadingText+=appUrl + "\n\n";    i.putExtra(Intent.EXTRA_TEXT,leadingText);    context.startActivity(Intent.createChooser(i,"Share using"));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * (3 + 3) * 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  DemoUtils.triangulateUnitBox(fv);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);  int ivbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,ivbo);  bb=BufferUtils.createByteBuffer(4 * (3 + 3) * boxes.length);  fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put((max.x + min.x) / 2.0f).put((max.y + min.y) / 2.0f).put((max.z + min.z) / 2.0f);    fv.put((max.x - min.x) / 2.0f).put((max.y - min.y) / 2.0f).put((max.z - min.z) / 2.0f);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(2);  glVertexAttribPointer(2,3,GL_FLOAT,false,4 * (3 + 3),0L);  glVertexAttribDivisor(2,1);  glEnableVertexAttribArray(3);  glVertexAttribPointer(3,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glVertexAttribDivisor(3,1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public DirScpOperation(@NotNull final String name){  myDirName=name;}  }
class C{  public void removeIncidenceLink(HGPersistentHandle handle,HGPersistentHandle oldLink){  impl.removeIncidenceLink(handle,oldLink);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<String,V> toMap(Object... data){  if (data.length == 1 && data[0] instanceof Map) {    return UtilGenerics.<String,V>checkMap(data[0]);  }  if (data.length % 2 == 1) {    IllegalArgumentException e=new IllegalArgumentException("You must pass an even sized array to the toMap method (size = " + data.length + ")");    Debug.logInfo(e,module);    throw e;  }  Map<String,V> map=new HashMap<String,V>();  for (int i=0; i < data.length; ) {    map.put((String)data[i++],(V)data[i++]);  }  return map;}  }
class C{  public ArabicStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") public static synchronized KDTree generate(IMultiPoint[] points){  if (points.length == 0) {    return null;  }  int maxD=points[0].dimensionality();  KDTree tree=new KDTree(maxD);  comparators=new Comparator[maxD + 1];  for (int i=1; i <= maxD; i++) {    comparators[i]=new DimensionalComparator(i);  }  tree.setRoot(generate(1,maxD,points,0,points.length - 1));  return tree;}  }
class C{  public static boolean isValid(Timestamp validFrom,Timestamp validTo,Timestamp testDate){  if (testDate == null)   return true;  if (validFrom == null && validTo == null)   return true;  if (validFrom != null && validFrom.after(testDate))   return false;  if (validTo != null && validTo.before(testDate))   return false;  return true;}  }
class C{  public SymbolTableEntryInternal steFor_exports(){  return getSymbolTableEntryInternal("exports",true);}  }
class C{  @Override public String generateStart(){  return "";}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  private int modifyAllContacts(Iterator<String> contactsIter){  int totalContactsModified=0;  while (contactsIter.hasNext())   totalContactsModified+=modifyContact(contactsIter.next(),contactsIter.next());  return totalContactsModified;}  }
class C{  public boolean shouldParseRouting(){  return shouldParseRouting;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(", fqName: ");  result.append(fqName);  result.append(", writable: ");  result.append(writable);  result.append(", snapshot: ");  result.append(snapshot);  result.append(')');  return result.toString();}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Amount amount){  serializer.writeLong(label,amount.getNumMicroNem());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.849 -0500",hash_original_method="D65E8A245B5C473707AFD205D57D3AF8",hash_generated_method="FE011AEB3F054A1198AF58D1F19BD9CC") public InputEventConsistencyVerifier(Object caller,int flags){  this(caller,flags,InputEventConsistencyVerifier.class.getSimpleName());}  }
class C{  public OffsetGrabPoint(int x,int y,int radius){  super(x,y,radius);  offsetPoints=new Hashtable<GrabPoint,Offset>();}  }
class C{  public void stateChanged(ChangeEvent e){  _activeSearchListener.stateChanged(e);  fixIcons();}  }
class C{  public static int toIntValue(double d){  return (int)d;}  }
class C{  protected void handleTriggerCopies(final State current){  ServiceUtils.logInfo(this,"Start to trigger ImageHostToHostCopyService for image: %s",current.image);  Set<String> datastoreSet=new HashSet<>();  Operation queryImageDatastoreSet=buildImageDatastoreSetQuery(current);  OperationSequence.create(queryImageDatastoreSet).setCompletion(null).sendWith(this);}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    if (getInputFormat().classIndex() >= 0) {      if (!getInputFormat().classAttribute().isNominal() || getInputFormat().attributeStats(getInputFormat().classIndex()).missingCount == getInputFormat().numInstances()) {        m_doNotOperateOnPerClassBasis=true;      }    }    determineDictionary();    ArrayList<Instance> fv=new ArrayList<Instance>();    int firstCopy=0;    for (int i=0; i < m_NumInstances; i++) {      firstCopy=convertInstancewoDocNorm(getInputFormat().instance(i),fv);    }    if (m_filterType != FILTER_NONE) {      m_AvgDocLength=0;      for (int i=0; i < fv.size(); i++) {        Instance inst=fv.get(i);        double docLength=0;        for (int j=0; j < inst.numValues(); j++) {          if (inst.index(j) >= firstCopy) {            docLength+=inst.valueSparse(j) * inst.valueSparse(j);          }        }        m_AvgDocLength+=Math.sqrt(docLength);      }      m_AvgDocLength/=m_NumInstances;    }    if (m_filterType == FILTER_NORMALIZE_ALL) {      for (int i=0; i < fv.size(); i++) {        normalizeInstance(fv.get(i),firstCopy);      }    }    for (int i=0; i < fv.size(); i++) {      push(fv.get(i));    }  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  private boolean isLatestDssKeystore(TSLParserResult parseResult){  List<String> englishSchemeInformationURIs=parseResult.getEnglishSchemeInformationURIs();  return englishSchemeInformationURIs.contains(ojUrl);}  }
class C{  public void readOctetString() throws IOException {  if (tag == ASN1Constants.TAG_OCTETSTRING) {    readContent();  } else   if (tag == ASN1Constants.TAG_C_OCTETSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 octet string type is not supported");  } else {    throw expected("octetstring");  }}  }
class C{  public static void print(ArrayList<Integer> l){  for (int i=0; i < l.size(); i++) {    System.out.print(l.get(i) + " ");  }  System.out.println();}  }
class C{  @Override void doConstrainedMaxCScores(List<String> sentence,Grammar grammar,Lexicon lexicon,final boolean scale){  numSubStatesArray=grammar.numSubStates;  double initVal=Double.NEGATIVE_INFINITY;  chartBeforeU=new LazyList[length][length + 1][numStates];  chartAfterU=new LazyList[length][length + 1][numStates];  double logNormalizer=iScore[0][length][0][0];  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      if (diff > 1) {        for (int pState=0; pState < numSubStatesArray.length; pState++) {          if (!allowedStates[start][end][pState])           continue;          chartBeforeU[start][end][pState]=new LazyList(grammar.isGrammarTag);          BinaryRule[] parentRules=grammar.splitRulesWithP(pState);          int nParentStates=numSubStatesArray[pState];          double bestScore=Double.NEGATIVE_INFINITY;          HyperEdge bestElement=null;          for (int i=0; i < parentRules.length; i++) {            BinaryRule r=parentRules[i];            int lState=r.leftChildState;            int rState=r.rightChildState;            int narrowR=narrowRExtent[start][lState];            boolean iPossibleL=(narrowR < end);            if (!iPossibleL) {              continue;            }            int narrowL=narrowLExtent[end][rState];            boolean iPossibleR=(narrowL >= narrowR);            if (!iPossibleR) {              continue;            }            int min1=narrowR;            int min2=wideLExtent[end][rState];            int min=(min1 > min2 ? min1 : min2);            if (min > narrowL) {              continue;            }            int max1=wideRExtent[start][lState];            int max2=narrowL;            int max=(max1 < max2 ? max1 : max2);            if (min > max) {              continue;            }            double[][][] scores=r.getScores2();            int nLeftChildStates=numSubStatesArray[lState];            int nRightChildStates=numSubStatesArray[rState];            for (int split=min; split <= max; split++) {              double ruleScore=0;              if (!allowedStates[start][split][lState])               continue;              if (!allowedStates[split][end][rState])               continue;              HyperEdge bestLeft=chartAfterU[start][split][lState].getKbest(0);              double leftChildScore=(bestLeft == null) ? Double.NEGATIVE_INFINITY : bestLeft.score;              HyperEdge bestRight=chartAfterU[split][end][rState].getKbest(0);              double rightChildScore=(bestRight == null) ? Double.NEGATIVE_INFINITY : bestRight.score;              if (leftChildScore == initVal || rightChildScore == initVal)               continue;              double scalingFactor=0.0;              if (scale)               scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][split][lState] + iScale[split][end][rState] - iScale[0][length][0]));              double gScore=leftChildScore + scalingFactor + rightChildScore;              if (gScore == Double.NEGATIVE_INFINITY)               continue;              for (int lp=0; lp < nLeftChildStates; lp++) {                double lIS=iScore[start][split][lState][lp];                if (lIS == 0)                 continue;                for (int rp=0; rp < nRightChildStates; rp++) {                  if (scores[lp][rp] == null)                   continue;                  double rIS=iScore[split][end][rState][rp];                  if (rIS == 0)                   continue;                  for (int np=0; np < nParentStates; np++) {                    double pOS=oScore[start][end][pState][np];                    if (pOS == 0)                     continue;                    double ruleS=scores[lp][rp][np];                    if (ruleS == 0)                     continue;                    ruleScore+=(pOS * ruleS * lIS* rIS) / logNormalizer;                  }                }              }              if (ruleScore == 0)               continue;              ruleScore=Math.log(ruleScore);              gScore+=ruleScore;              if (gScore > Double.NEGATIVE_INFINITY) {                HyperEdge newElement=new HyperEdge(pState,lState,rState,0,0,0,start,split,end,gScore,ruleScore);                if (gScore > bestScore) {                  bestScore=gScore;                  bestElement=newElement;                }                if (diff > 2)                 chartBeforeU[start][end][pState].addToFringe(newElement);              }            }          }          if (diff == 2 && bestElement != null)           chartBeforeU[start][end][pState].addToFringe(bestElement);        }      } else {        for (int tag=0; tag < numSubStatesArray.length; tag++) {          if (!allowedStates[start][end][tag])           continue;          chartBeforeU[start][end][tag]=new LazyList(grammar.isGrammarTag);          int nTagStates=numSubStatesArray[tag];          String word=sentence.get(start);          if (grammar.isGrammarTag(tag))           continue;          double[] lexiconScoreArray=lexicon.score(word,(short)tag,start,false,false);          double lexiconScores=0;          for (int tp=0; tp < nTagStates; tp++) {            double pOS=oScore[start][end][tag][tp];            double ruleS=lexiconScoreArray[tp];            lexiconScores+=(pOS * ruleS) / logNormalizer;          }          double scalingFactor=0.0;          if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][tag] - iScale[0][length][0]));          lexiconScores=Math.log(lexiconScores);          double gScore=lexiconScores + scalingFactor;          HyperEdge newElement=new HyperEdge(tag,-1,-1,0,0,0,start,start,end,gScore,lexiconScores);          chartBeforeU[start][end][tag].addToFringe(newElement);        }      }      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (!allowedStates[start][end][pState])         continue;        chartAfterU[start][end][pState]=new LazyList(grammar.isGrammarTag);        int nParentStates=numSubStatesArray[pState];        UnaryRule[] unaries=grammar.getClosedSumUnaryRulesByParent(pState);        HyperEdge bestElement=null;        double bestScore=Double.NEGATIVE_INFINITY;        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          if (iScore[start][end][cState] == null)           continue;          double childScore=Double.NEGATIVE_INFINITY;          if (chartBeforeU[start][end][cState] != null) {            HyperEdge bestChild=chartBeforeU[start][end][cState].getKbest(0);            childScore=(bestChild == null) ? Double.NEGATIVE_INFINITY : bestChild.score;          }          if (childScore == initVal)           continue;          double scalingFactor=0.0;          if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][end][cState] - iScale[0][length][0]));          double gScore=scalingFactor + childScore;          double[][] scores=ur.getScores2();          int nChildStates=numSubStatesArray[cState];          double ruleScore=0;          for (int cp=0; cp < nChildStates; cp++) {            double cIS=iScore[start][end][cState][cp];            if (cIS == 0)             continue;            if (scores[cp] == null)             continue;            for (int np=0; np < nParentStates; np++) {              double pOS=oScore[start][end][pState][np];              if (pOS < 0)               continue;              double ruleS=scores[cp][np];              if (ruleS == 0)               continue;              ruleScore+=(pOS * ruleS * cIS) / logNormalizer;            }          }          if (ruleScore == 0)           continue;          ruleScore=Math.log(ruleScore);          gScore+=ruleScore;          if (gScore > Double.NEGATIVE_INFINITY) {            HyperEdge newElement=new HyperEdge(pState,cState,0,0,start,end,gScore,ruleScore);            if (gScore > bestScore) {              bestScore=gScore;              bestElement=newElement;            }            if (diff > 1)             chartAfterU[start][end][pState].addToFringe(newElement);          }        }        if (diff == 1 && bestElement != null)         chartAfterU[start][end][pState].addToFringe(bestElement);        if (chartBeforeU[start][end][pState] != null) {          HyperEdge bestSelf=chartBeforeU[start][end][pState].getKbest(0);          if (bestSelf != null) {            HyperEdge selfRule=new HyperEdge(pState,pState,0,0,start,end,bestSelf.score,0);            chartAfterU[start][end][pState].addToFringe(selfRule);          }        }      }    }  }}  }
class C{  public ClassDefinitionBuilder attribute(AttributeDefinitionBuilder adb){  if (adb != null) {    defs(adb.build());  }  return this;}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public void addIdentityField(String fieldName,Class type,int fieldSize){  FieldDefinition fieldDef=new FieldDefinition(fieldName,type,fieldSize);  fieldDef.setIsIdentity(true);  fieldDef.setIsPrimaryKey(true);  addField(fieldDef);}  }
class C{  public View breakView(int axis,float len,Shape a){  if (axis == View.Y_AXIS) {    if (a != null) {      Rectangle alloc=a.getBounds();      setSize(alloc.width,alloc.height);    }    return this;  }  return this;}  }
class C{  public MemcacheClientBuilder<V> withAddresses(final List<HostAndPort> addresses){  checkArgument(!addresses.isEmpty());  this.addresses=ImmutableList.copyOf(checkNotNull(addresses));  return this;}  }
class C{  final Executor executor(){  return executor;}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  @Override public String toString(){  return ("< " + toString(s) + ", "+ toString(p)+ ", "+ toString(o)) + (c == null ? "" : ", " + toString(c)) + (type() == null ? "" : " : " + type() + (override() ? ", override" : ""))+ (isModified() ? ", modified (" + modified() + ")" : "")+ " >";}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (listener != null) {    super.addPropertyChangeListener(listener);    listener.propertyChange(new PropertyChangeEvent(this,LoadersProperty,null,rawLoaders));  }}  }
class C{  public ExclusivePositionUpdater(String category){  fCategory=category;}  }
class C{  public void destroySceneGraph(){  mSelectBehavior.detach();  root.detach();  universe.getLocale().removeBranchGraph(root);  canvas.stopRenderer();}  }
class C{  public synchronized void updatePath(PropertyChangeListener listener,Object newObject,Set updateSet){  if (currentObject != newObject) {    removeListeners();  }  if ((children != null) && (children.length > 0)) {    try {      Object newValue=null;      if (newObject != null) {        updateSet.add(newObject);        newValue=extractNewValue(newObject);      }      for (      BindPath child : children) {        child.updatePath(listener,newValue,updateSet);      }    } catch (    Exception e) {    }  }  if (currentObject != newObject) {    addListeners(listener,newObject,updateSet);  }}  }
class C{  public void scanForPeripherals(int scanTimeoutMillis,OnScanCompletedListener scanCompletedListener){  Timber.d("scanForPeripheralsWithTimeout");  mOnScanCompletedListener=scanCompletedListener;  scanForPeripherals();  mHandler.postDelayed(null,scanTimeoutMillis);}  }
class C{  public boolean mouseReleased(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|undefined state|mouseReleased");  ((EditableOMPoly)graphic).addMovingPoint(e.getX(),e.getY());  ((PolyStateMachine)graphic.getStateMachine()).setAddPoint();  graphic.fireEvent(EOMGEvent.EOMG_AUX);  graphic.redraw(e);  return false;}  }
class C{  public AssignmentExpression createAssignmentExpression(){  AssignmentExpressionImpl assignmentExpression=new AssignmentExpressionImpl();  return assignmentExpression;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public final static String base64Decode(String str){  if (str == null)   return null;  return new String(base64Decode(str.getBytes()));}  }
class C{  public Set<Class<?>> interfaces(){  return interfaces;}  }
class C{  public TaxInfo(String id,String name,String taxcategoryid,String taxcustcategoryid,String parentid,double rate,boolean cascade,Integer order){  this.id=id;  this.name=name;  this.taxcategoryid=taxcategoryid;  this.taxcustcategoryid=taxcustcategoryid;  this.parentid=parentid;  this.rate=rate;  this.cascade=cascade;  this.order=order;}  }
class C{  public static Table normalizeNames(Table table){  table.setDbName(table.getDbName().toLowerCase());  table.setTableName(table.getTableName().toLowerCase());  return table;}  }
class C{  public HistogramAction(DataEditor editor){  super("Histograms...");  this.dataEditor=editor;}  }
class C{  UncheckedCast(Type type){  this.type=type;}  }
class C{  MyDate(){  GregorianCalendar calander=new GregorianCalendar();  year=calander.get(GregorianCalendar.YEAR);  month=calander.get(GregorianCalendar.MONTH);  day=calander.get(GregorianCalendar.DAY_OF_MONTH);}  }
class C{  private RawProtein<PantherRawMatch> processProtein(final RawProtein<PantherRawMatch> rawProtein){  RawProtein<PantherRawMatch> result=new RawProtein<>(rawProtein.getProteinIdentifier());  for (  PantherRawMatch rawProteinMatch : rawProtein.getMatches()) {    if (rawProteinMatch.getEvalue() <= geteValueCutoff()) {      result.addMatch(rawProteinMatch);    } else {      LOGGER.info("Discarding the following protein raw match because it is not hold on the evalue cutoff: " + rawProteinMatch.getModelId());    }  }  return result;}  }
class C{  public SphinxASR(DialogueSystem system){  this.system=system;  Properties params=system.getSettings().params;  configuration=new Configuration();  if (params.containsKey("acousticmodel")) {    String acousticModel=getFile(params.getProperty("acousticmodel"));    configuration.setAcousticModelPath(acousticModel);    log.info("Acoustic model: " + acousticModel);  } else {    throw new RuntimeException("Acoustic model must be provided");  }  if (params.containsKey("dictionary")) {    String dictionary=getFile(params.getProperty("dictionary"));    configuration.setDictionaryPath(dictionary);    log.info("Dictionary: " + dictionary);  } else {    throw new RuntimeException("Dictionary must be provided");  }  if (params.containsKey("grammar")) {    File grammarFile=new File(getFile(params.getProperty("grammar")));    configuration.setGrammarPath(grammarFile.getParent() + File.separator);    configuration.setGrammarName(grammarFile.getName().replace(".gram",""));    configuration.setUseGrammar(true);    log.info("Recognition grammar: " + grammarFile.getPath());  } else   if (params.containsKey("lm")) {    String slm=getFile(params.getProperty("lm"));    configuration.setLanguageModelPath(slm);    configuration.setUseGrammar(false);    log.info("Statistical language model: " + slm);  } else {    throw new RuntimeException("Must provide either grammar or language model");  }  System.getProperties().setProperty("logLevel","OFF");  try {    asr=new StreamSpeechRecognizer(configuration);  } catch (  IOException e) {    throw new RuntimeException("cannot start Sphinx recognizer: " + e);  }  system.enableSpeech(true);}  }
class C{  public long start(String name){  this.name=name;  startTime=System.currentTimeMillis();  log.debug("TIMER STARTED: " + name);  return startTime;}  }
class C{  public static File resolveAbsolutePath(String root,String path){  File file=new File(normalizeFileName(path));  if (!file.isAbsolute()) {    String rootPath=normalizeFileName(root);    if (!rootPath.endsWith("/")) {      rootPath=rootPath.concat("/");    }    file=new File(rootPath + path);  }  return file;}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  try {    meta=(CarbonSliceMergerStepMeta)smi;    StandardLogService.setThreadName(StandardLogService.getPartitionID(meta.getCubeName()),null);    data=(CarbonSliceMergerStepData)sdi;    Object[] row=getRow();    if (null == row) {      renameFolders();      LOGGER.info("Record Procerssed For table: " + meta.getTabelName());      String logMessage="Summary: Carbon Slice Merger Step: Read: " + readCounter + ": Write: "+ writeCounter;      LOGGER.info(logMessage);      setOutputDone();      return false;    }    if (first) {      first=false;      if (getInputRowMeta() != null) {        this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());        this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);      }    }    readCounter++;  } catch (  Exception ex) {    LOGGER.error(ex);    throw new RuntimeException(ex);  }  return true;}  }
class C{  private void processQueue(){  WeakElement wv=null;  while ((wv=(WeakElement)this.queue.poll()) != null) {    super.remove(wv);  }}  }
class C{  public void testGetFilterMappingsWithMultipleMappings() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter-mapping>" + "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping1</url-pattern>"+ "  </filter-mapping>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping2</url-pattern>"+ "  </filter-mapping>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping3</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> filterMappings=WebXmlUtils.getFilterMappings(webXml,"f1");  assertEquals(3,filterMappings.size());  assertEquals("/f1mapping1",filterMappings.get(0));  assertEquals("/f1mapping2",filterMappings.get(1));  assertEquals("/f1mapping3",filterMappings.get(2));}  }
class C{  public void textSize(float size){  g.textSize(size);}  }
class C{  private long yearToDayOfEpoch(long year){  if (year > 0) {    year-=1601;    return (365 * year + year / 4 - year / 100 + year / 400 - ((1970 - 1601) * 365 + (1970 - 1601) / 4 - 3));  } else {    year=2000 - year;    return ((2000 - 1970) * 365 + (2000 - 1970) / 4 - (365 * year + year / 4 - year / 100 + year / 400));  }}  }
class C{  public boolean evaluateCq(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (this.whereClause == null) {    return true;  }  context.newScope((Integer)context.cacheGet(scopeID));  context.pushExecCache((Integer)context.cacheGet(scopeID));  try {    CompiledIteratorDef iterDef=(CompiledIteratorDef)iterators.get(0);    RuntimeIterator rIter=iterDef.getRuntimeIterator(context);    context.bindIterator(rIter);    Collection coll;{      Object evalResult=iterDef.getCollectionExpr().evaluate(context);      if (evalResult == null || evalResult == QueryService.UNDEFINED) {        return false;      }      coll=(Collection)evalResult;    }    if (coll.isEmpty()) {      return false;    }    if (this.whereClause.isDependentOnCurrentScope(context)) {      Iterator cIter=coll.iterator();      Object currObj=cIter.next();      rIter.setCurrent(currObj);    }    Object b=this.whereClause.evaluate(context);    if (b == null) {      return false;    } else     if (b == QueryService.UNDEFINED) {      if (this.whereClause.getType() == COMPARISON) {        int operator=((CompiledComparison)this.whereClause).getOperator();        if ((operator != TOK_NE && operator != TOK_NE_ALT)) {          return false;        } else {          return true;        }      } else {        return false;      }    } else {      return (((Boolean)b).booleanValue());    }  }  finally {    context.popExecCache();    context.popScope();  }}  }
class C{  public <U>SimpleReactStream<U> from(final Stream<U> stream){  final Stream s=stream.map(null);  return construct(s);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__OPERATOR:setOperator(OPERATOR_EDEFAULT);return;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("unchecked") public void forward(){  pos++;  if (pos == stack.length) {    T[] stack0=stack;    stack=(T[])Array.newInstance(stack.getClass().getComponentType(),stack.length << 1);    System.arraycopy(stack0,0,stack,0,stack0.length);  }  if (stack[pos] == null)   stack[pos]=factory.apply();}  }
class C{  private void resetToSAXHandler(){  this.m_lexHandler=null;  this.m_saxHandler=null;  this.m_state=null;  this.m_shouldGenerateNSAttribute=false;}  }
class C{  protected ECPoint multiplyPositive(ECPoint p,BigInteger k){  ECPoint addP=p.normalize(), subP=addP.negate();  ECPoint R0=addP;  int n=k.bitLength();  int s=k.getLowestSetBit();  int i=n;  while (--i > s) {    R0=R0.twicePlus(k.testBit(i) ? addP : subP);  }  R0=R0.timesPow2(s);  return R0;}  }
class C{  private final void output(final Priority priority,final String message,final Throwable throwable){  final LogEvent event=new LogEvent();  event.setCategory(m_category);  event.setContextMap(ContextMap.getCurrentContext(false));  if (null != message) {    event.setMessage(message);  } else {    event.setMessage("");  }  event.setThrowable(throwable);  event.setPriority(priority);  event.setTime(System.currentTimeMillis());  output(event);}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public boolean isRetained(){  return retained;}  }
class C{  public int encodeButtons(){  int base=0x0;  for (int i=buttonCount - 1; i >= 0; i--) {    base=base << 1;    base=base | (buttons[i] ? 0b1 : 0b0);  }  return base;}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.size=size;  this.certainty=certainty;  this.random=random;}  }
class C{  public boolean isBuffering(){  return bufferToggle == null ? false : true;}  }
class C{  public long millis(){  long elapsed=elapsedTime;  if (baseTime != 0) {    elapsed+=System.currentTimeMillis() - baseTime;  }  return elapsed;}  }
class C{  public long incrementAndGet(){  return atomicLong.incrementAndGet();}  }
class C{  public void drawTextBox(){  if (func_146176_q()) {    if (func_146181_i()) {      drawRect(field_146209_f - 1,field_146210_g - 1,field_146209_f + field_146218_h + 1,field_146210_g + field_146219_i + 1,-6250336);      drawRect(field_146209_f,field_146210_g,field_146209_f + field_146218_h,field_146210_g + field_146219_i,-16777216);    }    int var1=field_146226_p ? field_146222_t : field_146221_u;    int var2=field_146224_r - field_146225_q;    int var3=field_146223_s - field_146225_q;    String var4=field_146211_a.trimStringToWidth(field_146216_j.substring(field_146225_q),func_146200_o());    boolean var5=var2 >= 0 && var2 <= var4.length();    boolean var6=field_146213_o && field_146214_l / 6 % 2 == 0 && var5;    int var7=field_146215_m ? field_146209_f + 4 : field_146209_f;    int var8=field_146215_m ? field_146210_g + (field_146219_i - 8) / 2 : field_146210_g;    int var9=var7;    if (var3 > var4.length())     var3=var4.length();    if (var4.length() > 0) {      String var10=var5 ? var4.substring(0,var2) : var4;      String stars="";      for (int i=0; i < var10.length(); i++)       stars=stars.concat("*");      var9=field_146211_a.drawStringWithShadow(stars,var7,var8,var1);    }    boolean var13=field_146224_r < field_146216_j.length() || field_146216_j.length() >= func_146208_g();    int var11=var9;    if (!var5)     var11=var2 > 0 ? var7 + field_146218_h : var7; else     if (var13) {      var11=var9 - 1;      --var9;    }    if (var4.length() > 0 && var5 && var2 < var4.length()) {      String stars="";      for (int i=0; i < var4.substring(var2).length(); i++)       stars=stars.concat("*");      field_146211_a.drawStringWithShadow(stars,var9,var8,var1);    }    if (var6)     if (var13)     Gui.drawRect(var11,var8 - 1,var11 + 1,var8 + 1 + field_146211_a.FONT_HEIGHT,-3092272); else     field_146211_a.drawStringWithShadow("_",var11,var8,var1);    if (var3 != var2) {      String stars="";      for (int i=0; i < var4.substring(0,var3).length(); i++)       stars=stars.concat("*");      int var12=var7 + field_146211_a.getStringWidth(stars);      func_146188_c(var11,var8 - 1,var12 - 1,var8 + 1 + field_146211_a.FONT_HEIGHT);    }  }}  }
class C{  public int size(){  return RESULT_SET_SIZE_UNKNOWN;}  }
class C{  public MessageInfoBar(CharSequence title){  this(null,0,title);}  }
class C{  public StochasticRidgeRegression(double lambda,int epochs,int batchSize,double learningRate,DecayRate learningDecay){  setLambda(lambda);  setEpochs(epochs);  setBatchSize(batchSize);  setLearningRate(learningRate);  setLearningDecay(learningDecay);}  }
class C{  public E poll(long timeout,TimeUnit unit) throws InterruptedException {  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null) {        if (nanos <= 0)         return null; else         nanos=available.awaitNanos(nanos);      } else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        if (nanos <= 0)         return null;        first=null;        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            long timeLeft=available.awaitNanos(delay);            nanos-=delay - timeLeft;          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public void testDoConfigureSetsDomainVersion() throws Exception {  configuration.setProperty(WebLogicPropertySet.DOMAIN_VERSION,DOMAIN_VERSION);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(DOMAIN_VERSION,"//weblogic:domain-version",config);}  }
class C{  @Override public void onPacketReceiving(PacketEvent packetEvent){  if (packetEvent.isCancelled() || plugin.getCore().getAuthPluginHook() == null || !plugin.isServerFullyStarted()) {    return;  }  Player player=packetEvent.getPlayer();  String sessionKey=player.getAddress().toString();  plugin.getSessions().remove(sessionKey);  PacketContainer packet=packetEvent.getPacket();  String username=packet.getGameProfiles().read(0).getName();  plugin.getLogger().log(Level.FINER,"Player {0} with {1} connecting",new Object[]{sessionKey,username});  packetEvent.getAsyncMarker().incrementProcessingDelay();  NameCheckTask nameCheckTask=new NameCheckTask(plugin,packetEvent,random,player,username);  Bukkit.getScheduler().runTaskAsynchronously(plugin,nameCheckTask);}  }
class C{  public int member(JIPTerm term){  return ((List)getTerm()).member(term.getTerm());}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public void initializeSerialNode(SerialNode node){synchronized (this) {    for (int i=0; i < getNumNodes(); i++) {      if (getNode(i) == node) {        setMustInit(i,true);        return;      }    }  }}  }
class C{  public CuboidRegionSelector(@Nullable World world){  region=new CuboidRegion(world,new Vector(),new Vector());}  }
class C{  public static <E extends Comparable<E>>int partition(E[] list,int first,int last){  E pivot=list[first];  int low=first + 1;  int high=last;  while (high > low) {    while (low <= high && list[low].compareTo(pivot) <= 0)     low++;    while (low <= high && list[high].compareTo(pivot) > 0)     high--;    if (high > low) {      E temp=list[high];      list[high]=list[low];      list[low]=temp;    }  }  while (high > first && list[high].compareTo(pivot) >= 0)   high--;  if (pivot.compareTo(list[high]) > 0) {    list[first]=list[high];    list[high]=pivot;    return high;  } else {    return first;  }}  }
class C{  public boolean isMsg1(){  return !m_isMsg2;}  }
class C{  public static boolean isAtLeastJava16(){  return getMajorJavaVersion() >= JAVA_16;}  }
class C{  public static PcStableRunner serializableInstance(){  return new PcStableRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  String cmd=e.getActionCommand();  if (cmd == RedrawCmd) {    if (isVisible()) {      doPrepare();    }  }}  }
class C{  private List<CatalogCategory> filterCategoriesByACLs(List<CatalogCategory> categories){  List<CatalogCategory> filteredCatalogCategories=Lists.newArrayList();  StorageOSUser storageOSUser=getUserFromContext();  String username=storageOSUser.getName();  if (isAdministrator(storageOSUser)) {    log.debug(username + " has SystemAdmin or TenantAdmin Role, can view all categories.");    filteredCatalogCategories.addAll(categories);    return filteredCatalogCategories;  }  for (  CatalogCategory category : categories) {    if (hasAccess(storageOSUser,category)) {      filteredCatalogCategories.add(category);    }  }  return filteredCatalogCategories;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.903 -0500",hash_original_method="BBFB621282CA0716A19F3267ACDEEE7E",hash_generated_method="D4439C1BC1A6C37C21C21979D42281B9") protected int read() throws IOException {  if (offset == buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    return buffer[offset++] & 0xFF;  } else {    int octet=in.read();    if (octet == -1) {      throw new ASN1Exception("Unexpected end of encoding");    }    buffer[offset++]=(byte)octet;    return octet;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DistinctValueGrouping(DistinctValueGrouping other){  super(other.getDataTableColumn(),other.isCategorical(),other.getDateFormat());}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public boolean isRectangle(){  if (getNumInteriorRing() != 0)   return false;  if (shell == null)   return false;  if (shell.getNumPoints() != 5)   return false;  CoordinateSequence seq=shell.getCoordinateSequence();  Envelope env=getEnvelopeInternal();  for (int i=0; i < 5; i++) {    double x=seq.getX(i);    if (!(x == env.getMinX() || x == env.getMaxX()))     return false;    double y=seq.getY(i);    if (!(y == env.getMinY() || y == env.getMaxY()))     return false;  }  double prevX=seq.getX(0);  double prevY=seq.getY(0);  for (int i=1; i <= 4; i++) {    double x=seq.getX(i);    double y=seq.getY(i);    boolean xChanged=x != prevX;    boolean yChanged=y != prevY;    if (xChanged == yChanged)     return false;    prevX=x;    prevY=y;  }  return true;}  }
class C{  public boolean hasWildcard(){  return WILDCARD.equals(type) || WILDCARD.equals(subtype);}  }
class C{  public RangeQueryBuilder to(int to){  this.to=to;  return this;}  }
class C{  public static <U extends AbstractUser<U,ID>,ID extends Serializable>void validateVersion(VersionedEntity<U,ID> original,VersionedEntity<U,ID> updated){  if (original.getVersion() != updated.getVersion())   throw new VersionException(original.getClass().getSimpleName());}  }
class C{  public void allowTypesByRegExp(final String... regexps){  addPermission(new RegExpTypePermission(regexps));}  }
class C{  public static void assertNull(Object object){  assertTrue(object == null);}  }
class C{  public boolean swapChildren(@NonNull DisplayBase child1,@NonNull DisplayBase child2){  int childIndex1=mDisplayList.indexOf(child1);  int childIndex2=mDisplayList.indexOf(child2);  if (childIndex1 == -1 || childIndex2 == -1) {    return false;  }  removeChildAt(childIndex1);  addChildAt(childIndex1,child2);  removeChildAt(childIndex2);  addChildAt(childIndex2,child1);  return true;}  }
class C{  public void displayHelp(PrintStream out){  for (  Option option : this.options) {    option.displayHelp(out);  }}  }
class C{  public ScriptRun(char[] chars,int start,int count){  init(chars,start,count);}  }
class C{  public static CoreContainer createAndLoad(String solrHome,File configFile){  SolrResourceLoader loader=new SolrResourceLoader(solrHome);  CoreContainer cc=new CoreContainer(loader,ConfigSolr.fromFile(loader,configFile));  cc.load();  return cc;}  }
class C{  static Object convertBytesAndBitsToSerializedForm(BytesAndBits bb){  final byte[] bytes=bb.getBytes();  Object value;  if (EntryBits.isInvalid(bb.getBits())) {    value=Token.INVALID;  } else   if (EntryBits.isSerialized(bb.getBits())) {    value=DiskEntry.Helper.readSerializedValue(bytes,bb.getVersion(),null,false);  } else   if (EntryBits.isLocalInvalid(bb.getBits())) {    value=Token.LOCAL_INVALID;  } else   if (EntryBits.isTombstone(bb.getBits())) {    value=Token.TOMBSTONE;  } else {    value=DiskEntry.Helper.readRawValue(bytes,bb.getVersion(),null);  }  return value;}  }
class C{  final void forgetNext(){  UNSAFE.putObject(this,nextOffset,this);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private GridNearAtomicAbstractUpdateFuture createSingleUpdateFuture(K key,@Nullable V val,@Nullable EntryProcessor proc,@Nullable Object[] invokeArgs,boolean retval,@Nullable CacheEntryPredicate filter,boolean waitTopFut){  CacheOperationContext opCtx=ctx.operationContextPerCall();  GridCacheOperation op;  Object val0;  if (val != null) {    op=UPDATE;    val0=val;  } else   if (proc != null) {    op=TRANSFORM;    val0=proc;  } else {    op=DELETE;    val0=null;  }  GridCacheDrInfo conflictPutVal=null;  GridCacheVersion conflictRmvVer=null;  if (opCtx != null && opCtx.hasDataCenterId()) {    Byte dcId=opCtx.dataCenterId();    assert dcId != null;    if (op == UPDATE) {      conflictPutVal=new GridCacheDrInfo(ctx.toCacheObject(val),ctx.versions().next(dcId));      val0=null;    } else     if (op == GridCacheOperation.TRANSFORM) {      conflictPutVal=new GridCacheDrInfo(proc,ctx.versions().next(dcId));      val0=null;    } else     conflictRmvVer=ctx.versions().next(dcId);  }  CacheEntryPredicate[] filters=CU.filterArray(filter);  if (conflictPutVal == null && conflictRmvVer == null && !isFastMap(filters,op)) {    return new GridNearAtomicSingleUpdateFuture(ctx,this,ctx.config().getWriteSynchronizationMode(),op,key,val0,invokeArgs,retval,false,opCtx != null ? opCtx.expiry() : null,filters,ctx.subjectIdPerCall(null,opCtx),ctx.kernalContext().job().currentTaskNameHash(),opCtx != null && opCtx.skipStore(),opCtx != null && opCtx.isKeepBinary(),opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,waitTopFut);  } else {    return new GridNearAtomicUpdateFuture(ctx,this,ctx.config().getWriteSynchronizationMode(),op,Collections.singletonList(key),val0 != null ? Collections.singletonList(val0) : null,invokeArgs,conflictPutVal != null ? Collections.singleton(conflictPutVal) : null,conflictRmvVer != null ? Collections.singleton(conflictRmvVer) : null,retval,false,opCtx != null ? opCtx.expiry() : null,filters,ctx.subjectIdPerCall(null,opCtx),ctx.kernalContext().job().currentTaskNameHash(),opCtx != null && opCtx.skipStore(),opCtx != null && opCtx.isKeepBinary(),opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,waitTopFut);  }}  }
class C{  boolean addPlayer(Player player){  Member member=memberList.getMember(player.getName());  if (member != null) {    member.setHpRatio(player.getHpRatio());    member.setPresent(true);    player.addChangeListener(new MemberHealthListener(member));    memberList.memberChanged(member);    return true;  }  return false;}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  public void testCargo() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargocpc/index.html");  final String expected="Cargo Ping Component used to verify if the container is started.";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private static int alterEntries(final String blacklistToUse,final BlacklistType[] supportedBlacklistTypes,final String[] oldEntry,final String[] newEntry){  removeEntries(blacklistToUse,supportedBlacklistTypes,oldEntry);  String host, path;  for (  final String n : newEntry) {    final int pos=n.indexOf('/',0);    if (pos < 0) {      host=n;      path=".*";    } else {      host=n.substring(0,pos);      path=n.substring(pos + 1);    }    for (    final BlacklistType s : supportedBlacklistTypes) {      if (ListManager.listSetContains(s + ".BlackLists",blacklistToUse)) {        try {          Switchboard.urlBlacklist.add(s,blacklistToUse,host,path);        } catch (        PunycodeException e) {          ConcurrentLog.warn(APP_NAME,"Unable to add blacklist entry to blacklist " + s,e);        }      }    }    SearchEventCache.cleanupEvents(true);  }  return newEntry.length;}  }
class C{  public static void main(String[] args){  String root;  String linkFilename;  String networkFilename;  if (args.length == 3) {    root=args[0];    linkFilename=args[1];    networkFilename=args[2];  } else {    throw new IllegalArgumentException("Incorrect number of arguments passed.");  }  MyCountingStationCleaner ccs=new MyCountingStationCleaner();  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sc.getNetwork());  nr.readFile(networkFilename);  ccs.readLinkIds(linkFilename);  ccs.cleanCounts(root,sc.getNetwork());}  }
class C{  public JpaRepositoryState(String state){  this.state=state;}  }
class C{  private static boolean isArray(Class<?> aClass){  return aClass.isArray();}  }
class C{  public void validateDownloadSingleInitiationResponse(UploadSingleInitiationResponse uploadSingleInitiationResponse,DownloadSingleInitiationResponse downloadSingleInitiationResponse){  BusinessObjectData targetBusinessObjectData=uploadSingleInitiationResponse.getTargetBusinessObjectData();  validateDownloadSingleInitiationResponse(targetBusinessObjectData.getNamespace(),targetBusinessObjectData.getBusinessObjectDefinitionName(),targetBusinessObjectData.getBusinessObjectFormatUsage(),targetBusinessObjectData.getBusinessObjectFormatFileType(),targetBusinessObjectData.getBusinessObjectFormatVersion(),targetBusinessObjectData.getAttributes(),targetBusinessObjectData.getStorageUnits().get(0).getStorageFiles().get(0).getFileSizeBytes(),downloadSingleInitiationResponse);}  }
class C{  protected void onTrackSegmentStart(){  trackData.numberOfSegments++;  if (trackData.numberOfSegments > 1 && trackData.lastLocationInCurrentSegment != null) {    insertLocation(createLocation(TrackRecordingService.PAUSE_LATITUDE,0.0,0.0,trackData.lastLocationInCurrentSegment.getTime()));  }  trackData.lastLocationInCurrentSegment=null;}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  protected <T>Provider<T> findProvider(Class<T> type,Annotation qualifier) throws ProviderMissingException {  String key=PokeHelper.makeProviderKey(type,qualifier);  Component targetComponent=getRootComponent().componentLocator.get(key);  Provider provider=null;  if (targetComponent != null) {    provider=targetComponent.providers.get(key);  }  if (provider == null) {    String msg=String.format("Provider(%s) cannot be found",key);    throw new ProviderMissingException(msg);  } else {    return provider;  }}  }
class C{  @Override public String toString(){  String dsc=null;switch (this.type) {case TYPE_UNDERFLOW:    dsc="UNDERFLOW error";  break;case TYPE_OVERFLOW:dsc="OVERFLOW error";break;case TYPE_UNMAPPABLE_CHAR:dsc="Unmappable-character error with erroneous input length " + this.length;break;case TYPE_MALFORMED_INPUT:dsc="Malformed-input error with erroneous input length " + this.length;break;default :dsc="";break;}return getClass().getName() + "[" + dsc+ "]";}  }
class C{  public static String toHTML(String string){  String str=string;  str=str.replaceAll(">","&gt;");  str=str.replaceAll("<","&lt;");  str=str.replaceAll(Tools.getLineSeparator(),"<br>");  return str;}  }
class C{  public static BooleanGlassGeneIm serializableInstance(){  return new BooleanGlassGeneIm(BooleanGlassGenePm.serializableInstance(),new Parameters());}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  @LargeTest public void testRemoveDownload() throws Exception {  int fileSize=1024;  byte[] blobData=generateData(fileSize,DataType.BINARY);  long dlRequest=doBasicDownload(blobData,DOWNLOAD_TO_DOWNLOAD_CACHE_DIR);  Cursor cursor=mDownloadManager.query(new Query().setFilterById(dlRequest));  try {    assertEquals("The count of downloads with this ID is not 1!",1,cursor.getCount());    mDownloadManager.remove(dlRequest);    cursor.requery();    assertEquals("The count of downloads with this ID is not 0!",0,cursor.getCount());  }  finally {    cursor.close();  }}  }
class C{  public static byte[] encode(BufferedImage image,String format,boolean encodeAlpha) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,encodeAlpha);  return imageEncoder.encode(image);}  }
class C{  public static boolean equals(Object left,Object right,boolean caseSensitive) throws PageException {  if (caseSensitive) {    try {      return Caster.toString(left).equals(Caster.toString(right));    } catch (    ExpressionException e) {      return compare(left,right) == 0;    }  }  return compare(left,right) == 0;}  }
class C{  public void print(List<BOMNode> arr){  print(arr,0,false);}  }
class C{  public void deleteVirtualVolumes(URI vplexURI,List<URI> volumeURIs,List<URI> doNotFullyDeleteVolumeList,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    StringBuilder errMsgBuilder=new StringBuilder();    boolean failed=false;    for (    URI volumeURI : volumeURIs) {      Volume volume=_dbClient.queryObject(Volume.class,volumeURI);      if (volume == null || volume.getInactive() == true) {        continue;      }      if (volume.getDeviceLabel() == null) {        _log.info("Volume {} with Id {} was never created on the Vplex as device label is null " + "hence skip volume delete on VPLEX",volume.getLabel(),volume.getId());        continue;      }      try {        client.findVirtualVolume(volume.getDeviceLabel(),volume.getNativeId());      } catch (      VPlexApiException ex) {        if (ex.getServiceCode() == ServiceCode.VPLEX_CANT_FIND_REQUESTED_VOLUME) {          _log.info("VPlex virtual volume: " + volume.getNativeId() + " has already been deleted; will skip deletion of virtual volume");          continue;        } else {          _log.error("Exception finding Virtual Volume",ex);          throw ex;        }      }      try {        if (volume.getNativeId() != null) {          BlockConsistencyGroup cg=null;          if (!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {            cg=getDataObject(BlockConsistencyGroup.class,volume.getConsistencyGroup(),_dbClient);          }          if (cg != null) {            ConsistencyGroupManager consistencyGroupManager=getConsistencyGroupManager(volume);            consistencyGroupManager.deleteConsistencyGroupVolume(vplexURI,volume,cg);          }          if (doNotFullyDeleteVolumeList == null || doNotFullyDeleteVolumeList.isEmpty() || !doNotFullyDeleteVolumeList.contains(volume.getId())) {            _log.info(String.format("Deleting VPlex virtual volume %s (%s)",volume.getDeviceLabel(),volume.getNativeId()));            boolean isIngestedWithoutBackend=volume.isIngestedVolumeWithoutBackend(_dbClient);            client.deleteVirtualVolume(volume.getDeviceLabel(),!isIngestedWithoutBackend,!isIngestedWithoutBackend);          }          recordBourneVolumeEvent(volume.getId(),OperationTypeEnum.DELETE_BLOCK_VOLUME.getEvType(true),Operation.Status.ready,OperationTypeEnum.DELETE_BLOCK_VOLUME.getDescription());          if (volume.getMirrors() != null && !(volume.getMirrors().isEmpty())) {            for (            String mirrorId : volume.getMirrors()) {              VplexMirror mirror=_dbClient.queryObject(VplexMirror.class,URI.create(mirrorId));              if (null != mirror) {                _log.info("Marking mirror {} {} for deletion.",mirror.getId(),mirror.getDeviceLabel());                _dbClient.markForDeletion(mirror);              }            }          }        }      } catch (      Exception ex) {        _log.error("Exception deleting Virtual Volume: " + volumeURI,ex);        recordBourneVolumeEvent(volume.getId(),OperationTypeEnum.DELETE_BLOCK_VOLUME.getEvType(false),Operation.Status.error,OperationTypeEnum.DELETE_BLOCK_VOLUME.getDescription());        if (errMsgBuilder.length() != 0) {          errMsgBuilder.append("\n");        } else {          errMsgBuilder.append("Exception deleting vplex virtual volume(s):\n");        }        errMsgBuilder.append(volume.getLabel());        errMsgBuilder.append(":");        errMsgBuilder.append(ex.getMessage());        failed=true;      }    }    if (failed) {      String opName=ResourceOperationTypeEnum.DELETE_VIRTUAL_VOLUME.getName();      ServiceError serviceError=VPlexApiException.errors.jobFailedOp(opName);      serviceError.setMessage(errMsgBuilder.toString());      WorkflowStepCompleter.stepFailed(stepId,serviceError);    } else {      WorkflowStepCompleter.stepSucceded(stepId);    }  } catch (  VPlexApiException vae) {    _log.error("Exception deleting VPlex Virtual Volume: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception deleting VPlex Virtual Volume: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_VIRTUAL_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.deleteVirtualVolumesFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public SigningStream(final OutputStream stream,final PGPPrivateKey privateKey,final int digestAlgorithm,final boolean inline){  this(stream,privateKey,digestAlgorithm,inline,null);}  }
class C{  public List<VirtualArrayRestRep> findByConnectedCluster(URI clusterId){  return search().byCluster(clusterId).run();}  }
class C{  public static Term toKeyTerm(Object key){  if (key instanceof String) {    return new Term(KEY_FIELD,(String)key);  } else {    return new Term(KEY_FIELD,keyToBytes(key));  }}  }
class C{  protected boolean shouldCancelCurrent(){  return false;}  }
class C{  public void unloadSound(int resourceId){  Integer soundId=mResourceToSoundId.get(resourceId);  if (soundId == null) {    throw new IllegalStateException("Sound not loaded. Must call #loadSound first.");  }  mSoundPool.unload(soundId);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.188 -0500",hash_original_method="1121260B2872F4C8288BF6DC851005F3",hash_generated_method="6D64E5549536322AD01BC3C2F5F7B309") public boolean clipRect(float left,float top,float right,float bottom){  addTaint(left);  addTaint(top);  addTaint(right);  addTaint(bottom);  return getTaintBoolean();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.488 -0500",hash_original_method="42225DFCDD57D6590F4D09D0862811E2",hash_generated_method="91BF5452E2FC2358B7FC58DB9218920A") protected final void transitionToHaltingState(){  mSmHandler.transitionTo(mSmHandler.mHaltingState);}  }
class C{  public void testBlindRedirect() throws IOException, ServletException, InvocationTargetException {  NormalRule rule=new NormalRule();  rule.setFrom("^/logo\\.gif$");  rule.setToType("permanent-redirect");  rule.setTo("http://de010009\\.de\\.ina\\.com:8080/urlrewrite/artifact_type\\.gif");  rule.initialise(null);  MockRequest request=new MockRequest("/logo.gif");  NormalRewrittenUrl rewrittenUrl=(NormalRewrittenUrl)rule.matches(request.getRequestURI(),request,response);  assertEquals("http://de010009.de.ina.com:8080/urlrewrite/artifact_type.gif",rewrittenUrl.getTarget());  assertTrue(rewrittenUrl.isPermanentRedirect());  assertFalse(rewrittenUrl.isEncode());}  }
class C{  public final int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  public static Class<?> createCompositeInterface(Class<?>[] interfaces,ClassLoader classLoader){  Assert.notNull(classLoader,"ClassLoader must not be null");  return Proxy.getProxyClass(classLoader,interfaces);}  }
class C{  public void populateStdCmdLineOptions(CmdLineOptions options) throws OpenStegoException {}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Entry newMap[]=new Entry[newCapacity];  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public boolean isOrderBy(){  Object oo=get_Value(COLUMNNAME_IsOrderBy);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addDependency(int target,SortedSet<Integer> requiredStreams){  if (requiredStreams.contains(target)) {    throw new IllegalArgumentException("Dependency between same streams is not allowed for stream " + target);  }  Set<Integer> toSet=dependencies.get(target);  if (toSet != null) {    throw new IllegalArgumentException("Dependencies from stream " + target + " already in collection");  }  dependencies.put(target,requiredStreams);}  }
class C{  public void start(){  Debug.message("app","OpenMapApplet.start()");  super.start();}  }
class C{  private static VplexMirror initializeMirror(Volume vplexVolume,VirtualPool vPool,VirtualArray varray,String mirrorLabel,long thinPreAllocationSize,DbClient dbClient){  List<VplexMirror> mirrorList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,VplexMirror.class,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(VplexMirror.class,"project",vplexVolume.getProject().getURI(),mirrorLabel));  if (!mirrorList.isEmpty()) {    throw APIException.badRequests.duplicateLabel(mirrorLabel);  }  VplexMirror createdMirror=new VplexMirror();  createdMirror.setSource(new NamedURI(vplexVolume.getId(),vplexVolume.getLabel()));  createdMirror.setId(URIUtil.createId(VplexMirror.class));  createdMirror.setLabel(mirrorLabel);  createdMirror.setStorageController(vplexVolume.getStorageController());  createdMirror.setVirtualArray(varray.getId());  createdMirror.setCapacity(vplexVolume.getCapacity());  createdMirror.setProject(new NamedURI(vplexVolume.getProject().getURI(),createdMirror.getLabel()));  createdMirror.setTenant(new NamedURI(vplexVolume.getTenant().getURI(),createdMirror.getLabel()));  createdMirror.setVirtualPool(vPool.getId());  createdMirror.setThinPreAllocationSize(thinPreAllocationSize);  createdMirror.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vPool.getSupportedProvisioningType()));  dbClient.createObject(createdMirror);  addVplexMirrorToVolume(vplexVolume,createdMirror,dbClient);  return createdMirror;}  }
class C{  public boolean isWritable(){  return setter != null;}  }
class C{  private static GeoTimeSerie applyBinOp(WarpScriptBinaryOp op,String name,Map<String,String> labels,GeoTimeSerie x,GeoTimeSerie y){  long lastbucket=0L;  long bucketspan=0L;  int bucketcount=0;  if (isBucketized(x) && isBucketized(y)) {    if (x.bucketspan == y.bucketspan) {      if ((x.lastbucket % x.bucketspan) == (y.lastbucket % y.bucketspan)) {        lastbucket=Math.max(x.lastbucket,y.lastbucket);        bucketspan=x.bucketspan;        long firstbucket=Math.min(x.lastbucket - x.bucketcount * bucketspan,y.lastbucket - y.bucketcount * bucketspan);        bucketcount=(int)((lastbucket - firstbucket) / bucketspan);      }    }  }  GeoTimeSerie gts=new GeoTimeSerie(lastbucket,bucketcount,bucketspan,16);  gts.setName(name);  gts.setLabels(labels);  sort(x);  sort(y);  int xidx=0;  int yidx=0;  Object[] params=new Object[7];  params[1]=new String[2];  params[2]=new Map[3];  params[3]=new long[2];  params[4]=new long[2];  params[5]=new long[2];  params[6]=new Object[2];  Map<String,String> xlabels=ImmutableMap.copyOf(x.getLabels());  Map<String,String> ylabels=ImmutableMap.copyOf(y.getLabels());  labels=ImmutableMap.copyOf(labels);  while (xidx < x.values || yidx < y.values) {    while (yidx < y.values && x.ticks[xidx] >= y.ticks[yidx]) {      long tick=y.ticks[yidx];      Object xelt=x.ticks[xidx] == y.ticks[yidx] ? GTSHelper.valueAtIndex(x,xidx) : null;      Object yelt=GTSHelper.valueAtIndex(y,yidx);      params[0]=tick;      ((String[])params[1])[0]=x.getName();      ((Map[])params[2])[0]=xlabels;      ((long[])params[3])[0]=tick;      if (null == xelt) {        ((long[])params[4])[0]=GeoTimeSerie.NO_LOCATION;        ((long[])params[5])[0]=GeoTimeSerie.NO_ELEVATION;      } else {        ((long[])params[4])[0]=GTSHelper.locationAtIndex(x,xidx);        ((long[])params[5])[0]=GTSHelper.elevationAtIndex(x,xidx);      }      ((Object[])params[6])[0]=xelt;      ((String[])params[1])[1]=y.getName();      ((Map[])params[2])[1]=ylabels;      ((long[])params[3])[1]=tick;      ((long[])params[4])[1]=GTSHelper.locationAtIndex(y,yidx);      ((long[])params[5])[1]=GTSHelper.elevationAtIndex(y,yidx);      ((Object[])params[6])[1]=yelt;      ((Map[])params[2])[2]=labels;      Object[] result=(Object[])op.apply(params);      Object value=result[3];      if (null != value) {        long location=(long)result[1];        long elevation=(long)result[2];        GTSHelper.setValue(gts,tick,location,elevation,value,false);      }      yidx++;    }    xidx++;    while (xidx < x.values && ((yidx < y.values && x.ticks[xidx] < y.ticks[yidx]) || yidx >= y.values)) {      long tick=x.ticks[xidx];      Object xelt=x.ticks[xidx];      Object yelt=null;      params[0]=tick;      ((String[])params[1])[0]=x.getName();      ((Map[])params[2])[0]=xlabels;      ((long[])params[3])[0]=tick;      if (null == xelt) {        ((long[])params[4])[0]=GeoTimeSerie.NO_LOCATION;        ((long[])params[5])[0]=GeoTimeSerie.NO_ELEVATION;      } else {        ((long[])params[4])[0]=GTSHelper.locationAtIndex(x,xidx);        ((long[])params[5])[0]=GTSHelper.elevationAtIndex(x,xidx);      }      ((Object[])params[6])[0]=xelt;      ((String[])params[1])[1]=y.getName();      ((Map[])params[2])[1]=ylabels;      ((long[])params[3])[1]=tick;      ((long[])params[4])[1]=GeoTimeSerie.NO_LOCATION;      ((long[])params[5])[1]=GeoTimeSerie.NO_ELEVATION;      ((Object[])params[6])[1]=yelt;      ((Map[])params[2])[2]=labels;      Object[] result=(Object[])op.apply(params);      Object value=result[3];      if (null != value) {        long location=(long)result[1];        long elevation=(long)result[2];        GTSHelper.setValue(gts,tick,location,elevation,value,false);      }      xidx++;    }  }  return gts;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodeattributes.class,args);}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new java.util.Random());}  }
class C{  public Shape ellipse(double x,double y,double width,double height){  m_ellipse.setFrame(x,y,width,height);  return m_ellipse;}  }
class C{  @Override public void close() throws IOException {  if (!def.finished()) {    finish();  }  def.end();  out.close();}  }
class C{  private Token parseEncapsulatedToken(final Token token) throws IOException {  final long startLineNumber=getCurrentLineNumber();  int c;  while (true) {    c=in.read();    if (isEscape(c)) {      final int unescaped=readEscape();      if (unescaped == Constants.END_OF_STREAM) {        token.content.append((char)c).append((char)in.getLastChar());      } else {        token.content.append((char)unescaped);      }    } else     if (isQuoteChar(c)) {      if (isQuoteChar(in.lookAhead())) {        c=in.read();        token.content.append((char)c);      } else {        while (true) {          c=in.read();          if (isDelimiter(c)) {            token.type=TOKEN;            return token;          } else           if (isEndOfFile(c)) {            token.type=EOF;            token.isReady=true;            return token;          } else           if (readEndOfLine(c)) {            token.type=EORECORD;            return token;          } else           if (!isWhitespace(c)) {            throw new IOException("(line " + getCurrentLineNumber() + ") invalid char between encapsulated token and delimiter");          }        }      }    } else     if (isEndOfFile(c)) {      throw new IOException("(startline " + startLineNumber + ") EOF reached before encapsulated token finished");    } else {      token.content.append((char)c);    }  }}  }
class C{  ArchivedComponent addComponent(final WorkspaceComponent workspaceComponent){  ArchivedComponent component=new ArchivedComponent(serializer,workspaceComponent);  archivedComponents.add(component);  componentUris.put(workspaceComponent,component.uri);  return component;}  }
class C{  public void triangulate(PointSet ps){  _triangulations.clear();  _triangulations.add(ps);  start();}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  if (isDoomed()) {    return new HitData(1);  }  if ((aimedLocation != LOC_NONE) && (aimingMode != IAimingModes.AIM_MODE_NONE)) {    int roll=Compute.d6(2);    if ((5 < roll) && (roll < 9)) {      return new HitData(aimedLocation,side == ToHitData.SIDE_REAR,true);    }  }  int loc=Compute.d6();  while ((loc >= locations()) || (IArmorState.ARMOR_NA == this.getInternal(loc)) || (IArmorState.ARMOR_DESTROYED == this.getInternal(loc))|| ((IArmorState.ARMOR_DOOMED == this.getInternal(loc)) && !isDoomed())) {    loc=Compute.d6();  }  int critLocation=Compute.d6();  if (game.getOptions().booleanOption("tacops_ba_criticals") && (loc == critLocation)) {    return new HitData(loc,false,HitData.EFFECT_CRITICAL);  }  return new HitData(loc);}  }
class C{  public boolean isMinorGridX(){  return minorGridX;}  }
class C{  public boolean lint(String s){  return isSet(XLINT_CUSTOM,s) || (isSet(XLINT) || isSet(XLINT_CUSTOM,"all")) && isUnset(XLINT_CUSTOM,"-" + s);}  }
class C{  public InfoResponse info(final InfoRequest request) throws SubversionException, IOException {  final List<String> args=defaultArgs();  if (request.getRevision() != null && !request.getRevision().trim().isEmpty()) {    addOption(args,"--revision",request.getRevision());  }  if (true == request.getChildren()) {    addOption(args,"--depth","immediates");  }  args.add("info");  List<String> paths=new ArrayList<String>();  paths.add(request.getTarget());  final CommandLineResult result=runCommand(null,args,new File(request.getProjectPath()),addWorkingCopyPathIfNecessary(paths));  final InfoResponse response=DtoFactory.getInstance().createDto(InfoResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrorOutput(result.getStderr());  if (result.getExitCode() == 0) {    List<SubversionItem> items=new ArrayList<SubversionItem>();    response.withItems(items);    Iterator<String> iterator=result.getStdout().iterator();    List<String> itemProperties=new ArrayList<String>();    while (iterator.hasNext()) {      String propertyLine=iterator.next();      if (propertyLine.isEmpty()) {        final SubversionItem item=DtoFactory.getInstance().createDto(SubversionItem.class).withPath(InfoUtils.getPath(itemProperties)).withName(InfoUtils.getName(itemProperties)).withURL(InfoUtils.getUrl(itemProperties)).withRelativeURL(InfoUtils.getRelativeUrl(itemProperties)).withRepositoryRoot(InfoUtils.getRepositoryRoot(itemProperties)).withRepositoryUUID(InfoUtils.getRepositoryUUID(itemProperties)).withRevision(InfoUtils.getRevision(itemProperties)).withNodeKind(InfoUtils.getNodeKind(itemProperties)).withSchedule(InfoUtils.getSchedule(itemProperties)).withLastChangedRev(InfoUtils.getLastChangedRev(itemProperties)).withLastChangedDate(InfoUtils.getLastChangedDate(itemProperties));        items.add(item);        itemProperties.clear();      } else {        itemProperties.add(propertyLine);      }    }  } else {    response.withErrorOutput(result.getStderr());  }  return response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.412 -0400",hash_original_method="B29D45870A29045F43463B3631BB6C4B",hash_generated_method="B7A5FDF561F20A03F1B3A4E23BF2116F") public FileSystemUtils(){  super();}  }
class C{  public static void grantUriPermissions(Context context,Intent intent,int permissions){  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {    List<ResolveInfo> resInfoList=context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);    for (    ResolveInfo resolveInfo : resInfoList) {      String packageName=resolveInfo.activityInfo.packageName;      context.grantUriPermission(packageName,intent.getData(),permissions);    }  } else {    intent.addFlags(permissions);  }}  }
class C{  public void stopCommands(){  for (  CommandHandlerBase c : mCommandHandlersSet) {    c.stop();  }}  }
class C{  private boolean isHookListenerUnregistration(HttpServerRequest request){  return request.uri().contains(HOOKS_LISTENERS_URI_PART) && HttpMethod.DELETE == request.method();}  }
class C{  public static int toIntAccess(String access) throws ApplicationException {  access=StringUtil.toLowerCase(access.trim());  if (access.equals("package"))   return Component.ACCESS_PACKAGE; else   if (access.equals("private"))   return Component.ACCESS_PRIVATE; else   if (access.equals("public"))   return Component.ACCESS_PUBLIC; else   if (access.equals("remote"))   return Component.ACCESS_REMOTE;  throw new ApplicationException("invalid access type [" + access + "], access types are remote, public, package, private");}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  m_functionExpr.fixupVariables(vars,globalsSize);}  }
class C{  public void reverse(){  char tmp;  int limit=size / 2;  int j=size - 1;  char[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public boolean hasAttributes(){  return DTM.NULL != dtm.getFirstAttribute(node);}  }
class C{  public static int prefixCodedToInt(final BytesRef val){  int sortableBits=0;  for (int i=val.offset + 1, limit=val.offset + val.length; i < limit; i++) {    sortableBits<<=7;    final byte b=val.bytes[i];    if (b < 0) {      throw new NumberFormatException("Invalid prefixCoded numerical value representation (byte " + Integer.toHexString(b & 0xff) + " at position "+ (i - val.offset)+ " is invalid)");    }    sortableBits|=b;  }  return (sortableBits << getPrefixCodedIntShift(val)) ^ 0x80000000;}  }
class C{  public LinkedHashMap<String,InputStream> fetchTranscriptsForVideo(TranscriptModel transcript,Context context){  LinkedHashMap<String,InputStream> transcriptList=new LinkedHashMap<String,InputStream>();  try {    if (transcript.chineseUrl != null) {      transcriptList.put(context.getString(R.string.cc_chinese_code),fetchTranscriptResponse(transcript.chineseUrl));    }    if (transcript.englishUrl != null) {      transcriptList.put(context.getString(R.string.cc_english_code),fetchTranscriptResponse(transcript.englishUrl));    }    if (transcript.frenchUrl != null) {      transcriptList.put(context.getString(R.string.cc_french_code),fetchTranscriptResponse(transcript.frenchUrl));    }    if (transcript.germanUrl != null) {      transcriptList.put(context.getString(R.string.cc_german_code),fetchTranscriptResponse(transcript.germanUrl));    }    if (transcript.portugueseUrl != null) {      transcriptList.put(context.getString(R.string.cc_portugal_code),fetchTranscriptResponse(transcript.portugueseUrl));    }    if (transcript.spanishUrl != null) {      transcriptList.put(context.getString(R.string.cc_spanish_code),fetchTranscriptResponse(transcript.spanishUrl));    }    return transcriptList;  } catch (  Exception e) {    logger.error(e);  }  return null;}  }
class C{  public UTMCoord(Angle latitude,Angle longitude,int zone,String hemisphere,double easting,double northing,Angle centralMeridian){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.latitude=latitude;  this.longitude=longitude;  this.hemisphere=hemisphere;  this.zone=zone;  this.easting=easting;  this.northing=northing;  this.centralMeridian=centralMeridian;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  fullyLock();  try {    s.defaultWriteObject();    for (Node<E> p=head.next; p != null; p=p.next)     s.writeObject(p.item);    s.writeObject(null);  }  finally {    fullyUnlock();  }}  }
class C{  public static boolean equal(double x,double y){  return (Double.isNaN(x) && Double.isNaN(y)) || (x == y);}  }
class C{  public void mark(long n){  tickIfNecessary();  count.addAndGet(n);  m1Rate.update(n);  m5Rate.update(n);  m15Rate.update(n);}  }
class C{  @Override public void onPause(){  super.onPause();  this.wwd.onPause();}  }
class C{  @VisibleForTesting protected static ReleaseIPTask buildPatch(TaskState.TaskStage patchStage,boolean isDirect,Throwable t){  ReleaseIPTask state=new ReleaseIPTask();  state.taskState=new TaskState();  state.taskState.stage=patchStage;  state.taskState.isDirect=isDirect;  if (null != t) {    state.taskState.failure=Utils.toServiceErrorResponse(t);  }  return state;}  }
class C{  final public int yystate(){  return yy_lexical_state;}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer,int numTextureTiles){  this(width,height,segmentsW,segmentsH,upAxis,createTextureCoordinates,createVertexColorBuffer,numTextureTiles,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String prop=getString(stack);  return ((Agent)stack.pop()).getProperty(prop);}  }
class C{  public boolean isCachedMemory(){  return false;}  }
class C{  public boolean addCustomLogger(Logger logger){  if (logger.getClass().getName().startsWith("java"))   return false;  Logger oldLogger=_localLoggers.get();  if (oldLogger != null)   return false;  _localLoggers.set(logger);  if (_parent != null) {    logger.setParent(_parent);  }  return true;}  }
class C{  public static synchronized void loop(String filename){  if (filename == null)   throw new NullPointerException();  try {    Clip clip=AudioSystem.getClip();    InputStream is=StdAudio.class.getResourceAsStream(filename);    AudioInputStream ais=AudioSystem.getAudioInputStream(is);    clip.open(ais);    clip.loop(Clip.LOOP_CONTINUOUSLY);  } catch (  RuntimeException e) {    System.out.println("could not play '" + filename + "'");    throw e;  }catch (  Exception e) {    System.out.println("could not play '" + filename + "'");    e.printStackTrace();  }}  }
class C{  private void backpropagateStoreError(Trainable network,int row){  int i=0;  for (  Neuron outputNeuron : bptt.getOutputNeurons()) {    double targetValue=network.getTrainingSet().getTargetData()[row][i++];    double outputError=targetValue - outputNeuron.getActivation();    storeErrorAndDeltas(outputNeuron,outputError);    mse+=Math.pow(outputError,2);  }  for (  Neuron neuron : bptt.getHiddenLayer().getNeuronList()) {    double sumFanOutErrors=0;    for (    Synapse synapse : neuron.getFanOut().values()) {      Neuron nextLayerNeuron=synapse.getTarget();      sumFanOutErrors+=(errorMap.get(nextLayerNeuron) * synapse.getStrength());    }    storeErrorAndDeltas(neuron,sumFanOutErrors);  }}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initializeViews();}  }
class C{  private static void fixLastAssignInTry(MethodNode mth){  for (  BlockNode block : mth.getBasicBlocks()) {    PhiListAttr phiList=block.get(AType.PHI_LIST);    if (phiList != null && block.contains(AType.EXC_HANDLER)) {      for (      PhiInsn phi : phiList.getList()) {        fixPhiInTryCatch(phi);      }    }  }}  }
class C{  public Object lookup(String type,String url) throws IOException {  return new BurlapRemote(type,url);}  }
class C{  private void updateProgress(int progressVal){  progressBar.setValue(progressVal);}  }
class C{  public EmbeddedActiveMQResource(){  configuration=new ConfigurationImpl().setName(SERVER_NAME).setPersistenceEnabled(false).setSecurityEnabled(false).addAcceptorConfiguration(new TransportConfiguration(InVMAcceptorFactory.class.getName()));  init();}  }
class C{  public void expandBy(double deltaX,double deltaY){  if (isNull())   return;  minx-=deltaX;  maxx+=deltaX;  miny-=deltaY;  maxy+=deltaY;  if (minx > maxx || miny > maxy)   setToNull();}  }
class C{  public static void main(String[] args) throws IOException, InterruptedException {  final RecordStats rs=getLocalStats("err",5,"sda","eth0");  rs.run();}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  public void mousePressed(MouseEvent e){}  }
class C{  public String nextTo(String delimiters){  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public boolean checkLocalUserName(String username){  return usernameEquals(LongTermCredential.getBytes(username));}  }
class C{  public void addConfigurationListener(NodeConfigListener listener){  PacketListener conListener=new NodeConfigTranslator(listener);  configEventToListenerMap.put(listener,conListener);  con.addPacketListener(conListener,new EventContentFilter(EventElementType.configuration.toString()));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  Entry removeMapping(Object o){  if (!(o instanceof Map.Entry))   return null;  Entry[] tab=getTable();  Map.Entry entry=(Map.Entry)o;  Object k=maskNull(entry.getKey());  int h=HashMap.hash(k);  int i=indexFor(h,tab.length);  Entry prev=tab[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    if (h == e.hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return null;}  }
class C{  public static void cp(String sourceFileName,String destFileName) throws IOException {  File sourceFile=new File(sourceFileName);  File destFile=new File(destFileName);  if (!destFile.exists()) {    boolean createNewFile=destFile.createNewFile();    if (!createNewFile) {      throw new IOException("Unable to create " + destFileName);    }  }  FileChannel source=null;  FileChannel destination=null;  try {    source=new FileInputStream(sourceFile).getChannel();    destination=new FileOutputStream(destFile).getChannel();    destination.transferFrom(source,0,source.size());  }  finally {    if (source != null) {      source.close();    }    if (destination != null) {      destination.close();    }  }}  }
class C{  protected UnManagedNFSShareACL checkUnManagedFsNfssACLExistsInDB(DbClient dbClient,String nfsACLNativeGuid){  UnManagedNFSShareACL unManagedNfsAcl=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileNfsACLNativeGUIdConstraint(nfsACLNativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI cifsAclURI=iter.next();    unManagedNfsAcl=dbClient.queryObject(UnManagedNFSShareACL.class,cifsAclURI);    return unManagedNfsAcl;  }  return unManagedNfsAcl;}  }
class C{  public SVGPaintManager(String prop){  super(prop);}  }
class C{  public JSONNode(String name,Boolean value){  this(name,value,NodeType.PRIMITIVE);}  }
class C{  public float distance(double x,double y){  if (getShape() != null) {    return super.distance(x,y);  }  float temp, distance=Float.POSITIVE_INFINITY;  if (getNeedToRegenerate()) {    return distance;  }  float[][] xpts=xpoints;  float[][] ypts=ypoints;  int len=xpts.length;  for (int i=0; i < len; i++) {    float[] _x=xpts[i];    float[] _y=ypts[i];    temp=DrawUtil.closestPolyDistance(_x,_y,x,y,false);    if (temp < distance)     distance=temp;  }  return distance;}  }
class C{  @Override protected void process(DistributionManager dm){  SearchLoadAndWriteProcessor processor=null;  processor=(SearchLoadAndWriteProcessor)getProcessorKeeper().retrieve(processorId);  if (processor == null) {    if (logger.isDebugEnabled()) {      logger.debug("NetSearchReplyMessage() SearchLoadAndWriteProcessor {} no longer exists",processorId);    }    return;  }  long lastModifiedSystemTime=0;  if (this.lastModified != 0) {    lastModifiedSystemTime=this.lastModified;  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());  }  processor.incomingNetSearchReply(this.value,lastModifiedSystemTime,this.isSerialized,this.requestorTimedOut,this.authoritative,this.versionTag);}  }
class C{  public sun.net.ftp.FtpClient noop() throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("NOOP");  return this;}  }
class C{  public void add(Record record){  newUpdate(record);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Boolean smartFormatting(){  return smartFormatting;}  }
class C{  @SuppressWarnings("unchecked") private static <P_IN>Spliterator<P_IN> sliceSpliterator(StreamShape shape,Spliterator<P_IN> s,long skip,long limit){  assert s.hasCharacteristics(Spliterator.SUBSIZED);  long sliceFence=calcSliceFence(skip,limit);switch (shape) {case REFERENCE:    return new StreamSpliterators.SliceSpliterator.OfRef<>(s,skip,sliceFence);case INT_VALUE:  return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfInt((Spliterator.OfInt)s,skip,sliceFence);case LONG_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfLong((Spliterator.OfLong)s,skip,sliceFence);case DOUBLE_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfDouble((Spliterator.OfDouble)s,skip,sliceFence);default :throw new IllegalStateException("Unknown shape " + shape);}}  }
class C{  public byte[] wrap(byte[] outgoing,int start,int len) throws SaslException {  if (len == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] wrapped=new byte[len + 10 + 2+ 4];  System.arraycopy(outgoing,start,wrapped,0,len);  incrementSeqNum();  byte[] mac=getHMAC(myKi,sequenceNum,outgoing,start,len);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DI_CLASS_NAME,"wrap","DIGEST14:outgoing: ",outgoing,start,len);    traceOutput(DI_CLASS_NAME,"wrap","DIGEST15:seqNum: ",sequenceNum);    traceOutput(DI_CLASS_NAME,"wrap","DIGEST16:MAC: ",mac);  }  System.arraycopy(mac,0,wrapped,len,10);  System.arraycopy(messageType,0,wrapped,len + 10,2);  System.arraycopy(sequenceNum,0,wrapped,len + 12,4);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DI_CLASS_NAME,"wrap","DIGEST17:wrapped: ",wrapped);  }  return wrapped;}  }
class C{  @Override protected void init(){  swmMetadataTable=new SoftwareModuleMetadatadetailslayout();  swmMetadataTable.init(getI18n(),getPermissionChecker(),softwareManagement,swMetadataPopupLayout,entityFactory);  super.init();}  }
class C{  public ICalDate(){  this(true);}  }
class C{  @Override public Query parse() throws SyntaxError {  Query q=super.parse();  if (!(q instanceof BooleanQuery)) {    return q;  }  BooleanQuery obq=(BooleanQuery)q;  Collection<Query> should=new ArrayList<>();  Collection<BooleanClause> prohibOrReq=new ArrayList<>();  BooleanQuery newq=new BooleanQuery();  for (  BooleanClause clause : obq.getClauses()) {    if (clause.isProhibited() || clause.isRequired()) {      prohibOrReq.add(clause);    } else {      BooleanQuery bq=new BooleanQuery();      bq.add(clause);      should.add(bq);    }  }  if (should.size() > 0) {    DisjunctionMaxQuery dmq=new DisjunctionMaxQuery(should,tie);    newq.add(dmq,BooleanClause.Occur.SHOULD);  }  for (  BooleanClause c : prohibOrReq) {    newq.add(c);  }  newq.setBoost(obq.getBoost());  return newq;}  }
class C{  public String testBoolean(String value){  String s=((String)value).toLowerCase();  if (s.equals("true") || s.equals("on") || s.equals("yes")) {    return "true";  } else   if (s.equals("false") || s.equals("off") || s.equals("no")) {    return "false";  } else {    return null;  }}  }
class C{  protected int calculateLength(){  int len=0;  for (int i=0; i < index; i++) {    len+=array[i].length();  }  return len;}  }
class C{  private Field(final String str,final int id){  this.str=str;  this.id=id;}  }
class C{  public void show(){  if (isVisible()) {    return;  }  if (!opened) {    fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_OPENED);    opened=true;  }  getDesktopIcon().setVisible(true);  toFront();  super.show();  if (isIcon) {    return;  }  if (!isSelected()) {    try {      setSelected(true);    } catch (    PropertyVetoException pve) {    }  }}  }
class C{  public SpinnerNumberModel(int min,int max,int currentValue,int step){  this.max=max;  this.min=min;  this.currentValue=currentValue;  this.step=step;}  }
class C{  public void allowUpdatesAutoInstall(boolean isAllowed){  allowUpdatesAutoInstall=isAllowed;}  }
class C{  public synchronized OMGraphicList prepare(){  Debug.message("basic",getName() + "|DTEDCoverageLayer.prepare(): doing it");  Projection projection=getProjection();  if (Debug.debugging("dtedcov")) {    Debug.output(getName() + "|DTEDCoverageLayer.prepare(): " + "calling prepare with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  if (coverageManager == null) {    coverageManager=new DTEDCoverageManager(paths);    if (Debug.debugging("dtedcov")) {      Debug.output(getName() + "|DTEDCoverageLayer.prepare(): created DTEDCoverageManager");    }  }  return coverageManager.getCoverageRects(projection);}  }
class C{  public static QueryExp lt(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(LT,v1,v2);}  }
class C{  public static double logInterp(double val,double min,double max){  double logMin=safeLog10(min);  double denominator=(safeLog10(max) - logMin);  if (denominator == 0)   return 0;  return (safeLog10(val) - logMin) / denominator;}  }
class C{  public Property dayOfWeek(){  return new Property(this,getChronology().dayOfWeek());}  }
class C{  void handleSubscriberException(Throwable e,SubscriberExceptionContext context){  checkNotNull(e);  checkNotNull(context);  try {    exceptionHandler.handleException(e,context);  } catch (  Throwable e2) {    logger.log(Level.SEVERE,String.format(Locale.ROOT,"Exception %s thrown while handling exception: %s",e2,e),e2);  }}  }
class C{  public static void compressTGZ(Resource[] sources,Resource target,int mode) throws IOException {  File tmpTarget=File.createTempFile("_temp","tmp");  try {    OutputStream tmpOs=new FileOutputStream(tmpTarget);    try {      compressTar(sources,tmpOs,mode);    }  finally {      IOUtil.closeEL(tmpOs);    }    InputStream is=null;    OutputStream os=null;    try {      is=new FileInputStream(tmpTarget);      os=target.getOutputStream();      compressGZip(is,os);    }  finally {      IOUtil.closeEL(is,os);    }  }  finally {    tmpTarget.delete();  }}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);  in2=createLiveAnimatedString(null,SVG_IN2_ATTRIBUTE);  scale=createLiveAnimatedNumber(null,SVG_SCALE_ATTRIBUTE,0f);  xChannelSelector=createLiveAnimatedEnumeration(null,SVG_X_CHANNEL_SELECTOR_ATTRIBUTE,CHANNEL_SELECTOR_VALUES,(short)4);  yChannelSelector=createLiveAnimatedEnumeration(null,SVG_Y_CHANNEL_SELECTOR_ATTRIBUTE,CHANNEL_SELECTOR_VALUES,(short)4);}  }
class C{  public void startDrag() throws IOException {  print("startDrag",null);}  }
class C{  public boolean isEditable(){  return isEditable;}  }
class C{  public IntervalXYItemLabelGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.451 -0500",hash_original_method="AA7244FCF81F32F7DEF3D51FAE032B7D",hash_generated_method="E94CE4BFF5CEED1491FA622961AF3AF5") public boolean commitCompletion(CompletionInfo text){  return false;}  }
class C{  public Stoppable scheduleRepeating(final Steppable event){synchronized (lock) {    return scheduleRepeating(time + 1.0,0,event,1.0);  }}  }
class C{  public void addResources(Resources resources){  addProperty(resources);}  }
class C{  public void addInterface(Class<?> i){  getDtoInterfaces().add(createDtoImplTemplate(i));}  }
class C{  public static long safeAdd(long val1,long val2){  long sum=val1 + val2;  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {    throw new ArithmeticException("The calculation caused an overflow: " + val1 + " + "+ val2);  }  return sum;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static Mean[] newArray(int dimensionality){  Mean[] arr=new Mean[dimensionality];  for (int i=0; i < dimensionality; i++) {    arr[i]=new Mean();  }  return arr;}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public void put(long key,long value){  int i=Arrays.binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      growKeyAndValueArrays(mSize + 1);    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  private static String arrayToString(long[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  public void addBlocksDownloadedEventListener(Executor executor,BlocksDownloadedEventListener listener){  peersBlocksDownloadedEventListeners.add(new ListenerRegistration<BlocksDownloadedEventListener>(checkNotNull(listener),executor));  for (  Peer peer : getConnectedPeers())   peer.addBlocksDownloadedEventListener(executor,listener);  for (  Peer peer : getPendingPeers())   peer.addBlocksDownloadedEventListener(executor,listener);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  private void sendProgressTypes(Player player){  List<String> list=Arrays.asList("Open Quests","Completed Quests","Production");  player.addEvent(new ProgressStatusEvent(list));  player.notifyWorldAboutChanges();}  }
class C{  private boolean isPageBreak(int row){  for (int i=0; i < m_pageBreak.size(); i++) {    Integer rr=(Integer)m_pageBreak.get(i);    if (rr.intValue() + 1 == row)     return true; else     if (rr.intValue() > row)     return false;  }  return false;}  }
class C{  public float r(){  return this.m[0];}  }
class C{  public RosterExchange(Roster roster){  for (  RosterEntry rosterEntry : roster.getEntries()) {    this.addRosterEntry(rosterEntry);  }}  }
class C{  private void removeCopyFieldSource(String sourceFieldName,List<CopyField> removedCopyFields){  List<CopyField> sourceCopyFields=copyFieldsMap.remove(sourceFieldName);  if (null != sourceCopyFields) {    for (    CopyField sourceCopyField : sourceCopyFields) {      decrementCopyFieldTargetCount(sourceCopyField.getDestination());      removedCopyFields.add(sourceCopyField);    }  }}  }
class C{  public boolean startsWith(Name n){  if (n == null) {    return false;  }  int len1=rdns.size();  int len2=n.size();  return (len1 >= len2 && matches(0,len2,n));}  }
class C{  public static boolean isDatasetUptodate(Dataset dataset,List<ExternalFile> metadataFiles,List<ExternalFile> addedFiles,List<ExternalFile> deletedFiles,List<ExternalFile> appendedFiles) throws MetadataException, AlgebricksException {  boolean uptodate=true;  int newFileNumber=metadataFiles.get(metadataFiles.size() - 1).getFileNumber() + 1;  ArrayList<ExternalFile> fileSystemFiles=getSnapshotFromExternalFileSystem(dataset);  for (  ExternalFile fileSystemFile : fileSystemFiles) {    boolean fileFound=false;    Iterator<ExternalFile> mdFilesIterator=metadataFiles.iterator();    while (mdFilesIterator.hasNext()) {      ExternalFile metadataFile=mdFilesIterator.next();      if (fileSystemFile.getFileName().equals(metadataFile.getFileName())) {        if (fileSystemFile.getLastModefiedTime().equals(metadataFile.getLastModefiedTime())) {          if (fileSystemFile.getSize() == metadataFile.getSize()) {            mdFilesIterator.remove();            fileFound=true;          } else {            metadataFile.setPendingOp(ExternalFilePendingOp.PENDING_APPEND_OP);            fileSystemFile.setPendingOp(ExternalFilePendingOp.PENDING_APPEND_OP);            appendedFiles.add(fileSystemFile);            fileFound=true;            uptodate=false;          }        } else {          metadataFile.setPendingOp(ExternalFilePendingOp.PENDING_DROP_OP);          deletedFiles.add(new ExternalFile(metadataFile.getDataverseName(),metadataFile.getDatasetName(),0,metadataFile.getFileName(),metadataFile.getLastModefiedTime(),metadataFile.getSize(),ExternalFilePendingOp.PENDING_DROP_OP));          fileSystemFile.setPendingOp(ExternalFilePendingOp.PENDING_ADD_OP);          fileSystemFile.setFileNumber(newFileNumber);          addedFiles.add(fileSystemFile);          newFileNumber++;          fileFound=true;          uptodate=false;        }      }      if (fileFound) {        break;      }    }    if (!fileFound) {      fileSystemFile.setPendingOp(ExternalFilePendingOp.PENDING_ADD_OP);      fileSystemFile.setFileNumber(newFileNumber);      addedFiles.add(fileSystemFile);      newFileNumber++;      uptodate=false;    }  }  for (  ExternalFile deletedFile : deletedFiles) {    deletedFile.setFileNumber(newFileNumber);    newFileNumber++;  }  for (  ExternalFile appendedFile : appendedFiles) {    appendedFile.setFileNumber(newFileNumber);    newFileNumber++;  }  Iterator<ExternalFile> mdFilesIterator=metadataFiles.iterator();  while (mdFilesIterator.hasNext()) {    ExternalFile metadataFile=mdFilesIterator.next();    if (metadataFile.getPendingOp() == ExternalFilePendingOp.PENDING_NO_OP) {      metadataFile.setPendingOp(ExternalFilePendingOp.PENDING_DROP_OP);      deletedFiles.add(new ExternalFile(metadataFile.getDataverseName(),metadataFile.getDatasetName(),newFileNumber,metadataFile.getFileName(),metadataFile.getLastModefiedTime(),metadataFile.getSize(),metadataFile.getPendingOp()));      newFileNumber++;      uptodate=false;    }  }  return uptodate;}  }
class C{  private double approximateObjective(Map<Integer,Sequence<IString>> nbestLists,int epoch,String scoreMetricStr){  assert nbestLists.keySet().size() == references.size();  EvaluationMetric<IString,String> metric=CorpusLevelMetricFactory.newMetric(scoreMetricStr,references);  IncrementalEvaluationMetric<IString,String> incMetric=metric.getIncrementalMetric();  Map<Integer,Sequence<IString>> sortedMap=new TreeMap<Integer,Sequence<IString>>(nbestLists);  for (  Map.Entry<Integer,Sequence<IString>> entry : sortedMap.entrySet()) {    incMetric.add(new ScoredFeaturizedTranslation<IString,String>(entry.getValue(),null,0.0));  }  double objectiveValue=incMetric.score() * 100.0;  logger.info("Epoch {} expected {}: {}",epoch,scoreMetricStr.toUpperCase(),objectiveValue);  return objectiveValue;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.DEINTERLACE_NAMES.clone();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xD4876173,version=271) public int sceUsbCamSetImageEffectMode(int imageEffectMode){  this.imageEffectMode=imageEffectMode;  return 0;}  }
class C{  public Boolean isVideoSourceMode(){  return videoSourceMode;}  }
class C{  public Boolean isEmployee(final User user){  for (  final Role role : user.getRoles())   for (  final AppConfigValues appconfig : getThirdPartyUserRoles())   if (role != null && role.getName().equals(appconfig.getValue()))   return false;  return true;}  }
class C{  public void mark(int readAheadLimit) throws IOException {  in.mark(readAheadLimit);}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public void addRaster(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(x1,y1,image,image_width,image_height,properties,link.dos);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public KeyedValues(KeyedValues other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }}  }
class C{  public static void addTransmutation(Item input,ItemStack output,float xp){  TransmutatorRecipes.instance().transmute(input,output,xp);}  }
class C{  public void removeAllAnimations(){  for (int i=0, size=mAnimationList.size(); i < size; i++) {    mAnimationList.get(i).removeAnimationListener(mAnimationListener);  }  mAnimationList.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.373 -0500",hash_original_method="C2DB210B9AE13E0849500530EB26AF9F",hash_generated_method="148E380D1EF6B778045A602221D318B4") public Name(String name) throws IOException {  rdn=new DNParser(name).parse();}  }
class C{  public Vertex evaluateMINUS(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    return new org.botlibre.tool.Math().instance.minus(expression,left,right);  }  expression.getNetwork().getBot().log(this,"Invalid numbers for operation",Level.WARNING,expression,left,right);  return network.createVertex(Primitive.NULL);}  }
class C{  public static boolean canAppendAny(ArrayList children,Node parentNode){  if (!canHaveChildren(parentNode)) {    return false;  }  int n=children.size();  for (int i=0; i < n; i++) {    Node child=(Node)children.get(i);    if (canAppend(child,parentNode)) {      return true;    }  }  return false;}  }
class C{  public int add(String uri){  return add(-1,uri);}  }
class C{  public static Node parseXML(String text,Document doc,String uri,Map prefixes,String wrapperElementName,SAXDocumentFactory documentFactory){  String wrapperElementPrefix="";  String wrapperElementSuffix="";  if (wrapperElementName != null) {    wrapperElementPrefix="<" + wrapperElementName;    if (prefixes != null) {      wrapperElementPrefix+=" ";      Set keySet=prefixes.keySet();      Iterator iter=keySet.iterator();      while (iter.hasNext()) {        String currentKey=(String)iter.next();        String currentValue=(String)prefixes.get(currentKey);        wrapperElementPrefix+=currentKey + "=\"" + currentValue+ "\" ";      }    }    wrapperElementPrefix+=">";    wrapperElementSuffix+="</" + wrapperElementName + ">";  }  if (wrapperElementPrefix.trim().length() == 0 && wrapperElementSuffix.trim().length() == 0) {    try {      Document d=documentFactory.createDocument(uri,new StringReader(text));      if (doc == null) {        return d;      }      Node result=doc.createDocumentFragment();      result.appendChild(doc.importNode(d.getDocumentElement(),true));      return result;    } catch (    Exception ex) {    }  }  StringBuffer sb=new StringBuffer(wrapperElementPrefix.length() + text.length() + wrapperElementSuffix.length());  sb.append(wrapperElementPrefix);  sb.append(text);  sb.append(wrapperElementSuffix);  String newText=sb.toString();  try {    Document d=documentFactory.createDocument(uri,new StringReader(newText));    if (doc == null) {      return d;    }    for (Node node=d.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {      if (node.getNodeType() == Node.ELEMENT_NODE) {        node=doc.importNode(node,true);        Node result=doc.createDocumentFragment();        result.appendChild(node);        return result;      }    }  } catch (  Exception exc) {  }  return null;}  }
class C{  public PrecisionModel(double scale,double offsetX,double offsetY){  modelType=FIXED;  setScale(scale);}  }
class C{  public void save() throws IOException {  if (pom == null) {    throw new IllegalStateException("Model is not associated with any pom file");  }  writeTo(pom);}  }
class C{  public static <T extends Date>T lastOfMonth(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).withDayOfMonth(1).plusMonths(1).minusSeconds(1).getMillis());  return cloned;}  }
class C{  private final void moveRowGapTo(int where){  if (where == mRowGapStart) {    return;  } else   if (where > mRowGapStart) {    int moving=where + mRowGapLength - (mRowGapStart + mRowGapLength);    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=gapend; i < gapend + moving; i++) {      int destrow=i - gapend + mRowGapStart;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  } else {    int moving=mRowGapStart - where;    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=where + moving - 1; i >= where; i--) {      int destrow=i - where + gapend - moving;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  }  mRowGapStart=where;}  }
class C{  public GeoInternodeAuthenticator(){  blacklist=new HashSet<InetAddress>();}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public int supportsUpdatableView(){  return SyncProvider.NONUPDATABLE_VIEW_SYNC;}  }
class C{  AttributeMetadataImpl(Schema schema,AttributeTransform transform,ElementKey<?,?> parent,AttributeKey<D> key,MetadataContext context){  super(schema,transform,parent,key,context);  this.attKey=key;}  }
class C{  public static CarrierCapabilities newInstance(){  return new CarrierCapabilities();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ImplMessageHistory(ImplDiscordAPI api,String channelId,String messageId,boolean before,int limit) throws Exception {  int step=0;  if (messageId == null) {    before=true;  }  logger.debug("Trying to get message history (channel id: {}, message id: {}, before: {}, limit: {}",channelId,messageId == null ? "none" : messageId,before,limit);  for (int i=limit / 100; i > 0; i--) {    int receivedMessages;    if (step++ == 0) {      receivedMessages=request(api,channelId,messageId,before,100);    } else {      receivedMessages=request(api,channelId,before ? oldestMessage.getId() : newestMessage.getId(),before,100);    }    if (receivedMessages == 0) {      return;    }  }  if (step == 0) {    request(api,channelId,messageId,before,limit % 100);  } else {    request(api,channelId,before ? oldestMessage.getId() : newestMessage.getId(),before,limit % 100);  }  logger.debug("Got message history (channel id: {}, message id: {}, before: {}, limit: {}, amount: {}",channelId,messageId == null ? "none" : messageId,before,limit,messages.size());}  }
class C{  private void executeAddTaint(Stmt stmt,InvokeExpr invokeExpr,State state){  Block block=this.superControlFlowGraph.unitToBlock.get(stmt);  Body body=block.getBody();  SootMethod method=body.getMethod();  Local baseLocal=(Local)((InstanceInvokeExpr)invokeExpr).getBase();  Immediate argImmediate=(Immediate)invokeExpr.getArg(0);  if (argImmediate instanceof Local) {    Local argLocal=(Local)argImmediate;    Set<MethodOrMethodContext> methodContexts=PTABridge.v().getMethodContexts(method);    for (    MethodOrMethodContext methodContext : methodContexts) {      Context context=methodContext.context();      if (ignoreContext(context)) {        continue;      }      ImmutableSet<InfoValue> values=state.locals.get(context,argLocal);      Set<IAllocNode> allocNodes=(Set<IAllocNode>)PTABridge.v().getPTSet(baseLocal,context);      for (      IAllocNode allocNode : allocNodes) {        state.instances.putW(allocNode,this.objectUtils.taint,values);      }    }  }}  }
class C{  @Override public void reset(){  mActionBarHeaderPullingProgressLayout.setVisibility(View.VISIBLE);  mActionBarHeaderRefreshingProgressBar.setVisibility(View.INVISIBLE);  mActionBarHeaderPullingProgressLayout.setPercent(0);}  }
class C{  public BERSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  private void drawShapes(final Rectangle visibleRect,final ReferencedEnvelope areaOfInterest,final boolean boundsChanged){  final Display display=Display.getDefault();  final Color white=display.getSystemColor(SWT.COLOR_WHITE);  final PaletteData palette=new PaletteData(new RGB[]{white.getRGB()});  final ImageData sourceData=new ImageData(visibleRect.width,visibleRect.height,1,palette);  sourceData.transparentPixel=0;  final Image img=new Image(display,sourceData);  final GC gc=new GC(img);  gc.setAntialias(SWT.ON);  double[] worldCoords;  if (odd) {    worldCoords=new double[]{10.0,40.0,11.2,43.3,11.3,45.2,11.4,46.5};  } else {    worldCoords=new double[]{11.0,41.0,12.2,44.3,11.3,45.2,11.4,46.5};  }  odd=!odd;  final double[] screenCoords=new double[8];  final AffineTransform worldToScreenTransform=getMapPane().getWorldToScreenTransform();  worldToScreenTransform.transform(worldCoords,0,screenCoords,0,worldCoords.length / 2);  gc.setForeground(display.getSystemColor(SWT.COLOR_MAGENTA));  gc.setLineWidth(2);  gc.drawLine((int)screenCoords[0],(int)screenCoords[1],(int)screenCoords[2],(int)screenCoords[3]);  gc.drawLine((int)screenCoords[2],(int)screenCoords[3],(int)screenCoords[4],(int)screenCoords[5]);  final int size=10;  gc.setBackground(display.getSystemColor(SWT.COLOR_RED));  gc.fillOval((int)screenCoords[0] - size / 2,(int)screenCoords[1] - size / 2,size,size);  gc.fillOval((int)screenCoords[2] - size / 2,(int)screenCoords[3] - size / 2,size,size);  gc.fillOval((int)screenCoords[4] - size / 2,(int)screenCoords[5] - size / 2,size,size);  gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));  gc.drawOval((int)screenCoords[0] - size / 2,(int)screenCoords[1] - size / 2,size,size);  gc.drawOval((int)screenCoords[2] - size / 2,(int)screenCoords[3] - size / 2,size,size);  gc.drawOval((int)screenCoords[4] - size / 2,(int)screenCoords[5] - size / 2,size,size);  gc.setAntialias(SWT.OFF);  gc.dispose();  getMapPane().setOverlay(img,areaOfInterest,false,boundsChanged);}  }
class C{  public boolean isMinXSet(int scale){  return mMinX[scale] != MathHelper.NULL_VALUE;}  }
class C{  public String findBaseURL(){  String appBase=req.getRequestURL().toString().replaceAll(req.getServletPath(),"");  LOG.info("Auto-Detected IPT BaseURL=" + appBase);  return appBase;}  }
class C{  @Override public void userCancelledMove(int fromSquare){  if (isDisposed()) {    return;  }  if (LOG.isDebugEnabled()) {    LOG.debug("userCancelledMove " + getSan(fromSquare));  }  adjustForIllegalMove(false);}  }
class C{  @Override protected void configChanged(){}  }
class C{  public MemoryHandler(){  sealed=false;  configure();  sealed=true;  LogManager manager=LogManager.getLogManager();  String handlerName=getClass().getName();  String targetName=manager.getProperty(handlerName + ".target");  if (targetName == null) {    throw new RuntimeException("The handler " + handlerName + " does not specify a target");  }  Class<?> clz;  try {    clz=ClassLoader.getSystemClassLoader().loadClass(targetName);    target=(Handler)clz.newInstance();  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {    throw new RuntimeException("MemoryHandler can't load handler target \"" + targetName + "\"",e);  }  init();}  }
class C{  public void addRule(DelphiRule delphiRule){  delphiRules.add(delphiRule);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2)   throw new IllegalArgumentException("must supply a path and set of host:port tuples");  String[] mainParts=args[1].split(":");  Address address=new Address(mainParts[0],Integer.valueOf(mainParts[1]));  List<Address> members=new ArrayList<>();  for (int i=1; i < args.length; i++) {    String[] parts=args[i].split(":");    members.add(new Address(parts[0],Integer.valueOf(parts[1])));  }  CopycatServer server=CopycatServer.builder(address).withStateMachine(null).withTransport(new NettyTransport()).withStorage(Storage.builder().withDirectory(args[0]).withMaxSegmentSize(1024 * 1024 * 32).withMinorCompactionInterval(Duration.ofMinutes(1)).withMajorCompactionInterval(Duration.ofMinutes(15)).build()).build();  server.serializer().register(SetCommand.class,1);  server.serializer().register(GetQuery.class,2);  server.serializer().register(DeleteCommand.class,3);  server.bootstrap(members).join();  while (server.isRunning()) {    Thread.sleep(1000);  }}  }
class C{  public void createFromBytes(GcsFilename filename,byte[] bytes) throws IOException {  gcsService.createOrReplace(filename,getOptions(filename),ByteBuffer.wrap(bytes));}  }
class C{  public TcpDiscoveryNode creatorNode(){  return creatorNode;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a hex number: ");  String hex=input.nextLine();  try {    System.out.println("The decimal value for hex number " + hex + " is "+ hexToDecimal(hex.toUpperCase()));  } catch (  HexFormatException ex) {    System.out.println(ex.getMessage());  }}  }
class C{  private ServiceCall<TranslationResult> translateRequest(List<String> texts,String modelId,Language source,Language target){  Validator.isTrue((texts != null) && !texts.isEmpty(),"texts cannot be null or empty");  final JsonObject contentJson=new JsonObject();  final JsonArray paragraphs=new JsonArray();  for (  String text : texts) {    Validator.notNull(text,"text cannot be null");    paragraphs.add(new JsonPrimitive(text));  }  contentJson.add(TEXT,paragraphs);  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_TRANSLATE).header(HttpHeaders.ACCEPT,HttpMediaType.APPLICATION_JSON);  if (source != null) {    contentJson.addProperty(SOURCE,source.toString());  }  if (target != null) {    contentJson.addProperty(TARGET,target.toString());  }  if ((modelId != null) && !modelId.isEmpty()) {    contentJson.addProperty(MODEL_ID,modelId);  }  requestBuilder.bodyJson(contentJson);  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(TranslationResult.class));}  }
class C{  public static void applyToOrTransparent(ColorHolder colorHolder,Context ctx,GradientDrawable gradientDrawable){  if (colorHolder != null && gradientDrawable != null) {    colorHolder.applyTo(ctx,gradientDrawable);  } else   if (gradientDrawable != null) {    gradientDrawable.setColor(Color.TRANSPARENT);  }}  }
class C{  public CBreakpointTable(final BackEndDebuggerProvider debuggerProvider,final ZyGraph graph,final IViewContainer viewContainer){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01335: Debugger provider can't be null");  m_graph=Preconditions.checkNotNull(graph,"IE02093: Graph argument can not be null");  m_viewContainer=Preconditions.checkNotNull(viewContainer,"IE02099: View container argument can not be null");  m_tableModel=new CBreakpointTableModel(debuggerProvider);  setModel(m_tableModel);  for (  final IDebugger debugger : debuggerProvider.getDebuggers()) {    addDebuggerListeners(debugger);  }  debuggerProvider.addListener(m_debuggerListener);  getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_STATUS).setCellRenderer(new CBreakpointStatusRenderer());  final DefaultTableCellRenderer tcrColumn=new DefaultTableCellRenderer();  tcrColumn.setHorizontalAlignment(SwingConstants.CENTER);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_UNRELOCATED_ADDRESS).setCellRenderer(tcrColumn);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_RELOCATED_ADDRESS).setCellRenderer(tcrColumn);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_MODULE_NAME).setCellRenderer(tcrColumn);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_DEBUGGER).setCellRenderer(tcrColumn);  getColumnModel().getColumn(CBreakpointTableModel.COLUMN_CONDITION).setCellEditor(new CConditionEditor());  addMouseListener(new InternalMouseListener());}  }
class C{  public boolean isSyntheticPublic(){  return syntheticPublic;}  }
class C{  public ServerConnectivityException(String message){  super(message);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  @Override protected IMember resolveMember() throws JavaModelException {  char[] declarationSignature=fProposal.getDeclarationSignature();  if (declarationSignature == null)   return null;  String typeName=SignatureUtil.stripSignatureToFQN(String.valueOf(declarationSignature));  IType type=fJavaProject.findType(typeName);  if (type != null) {    String name=String.valueOf(fProposal.getName());    IMethod method=type.getMethod(name,CharOperation.NO_STRINGS);    if (method.exists())     return method;  }  return null;}  }
class C{  public RoundedTransformationBuilder borderWidthDp(float widthDp){  mBorderWidth=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,widthDp,mDisplayMetrics);  return this;}  }
class C{  public void paste(){  Clipboard.paste(this);  numberOfPastes++;}  }
class C{  @Override public void add(ChartEntity entity){  ParamChecks.nullNotPermitted(entity,"entity");  this.entities.add(entity);}  }
class C{  public DownloadRequest(String url,String download_path,Listener<String> listener,ErrorListener errorListener){  super(Method.GET,url,errorListener);  mDownloadPath=download_path;  mListener=listener;}  }
class C{  public UF8(int numberOfVariables){  super(numberOfVariables,3);}  }
class C{  public static <S extends Annotation>boolean isScopeActive(Class<S> scope){  BeanManager beanManager=Util.getCdiBeanManager(FacesContext.getCurrentInstance());  try {    Context context=beanManager.getContext(scope);    return context.isActive();  } catch (  ContextNotActiveException ignore) {    return false;  }}  }
class C{  public static <T>String toString(final T object,final ToStringStyle style,final boolean outputTransients,final boolean outputStatics,final Class<? super T> reflectUpToClass){  return new ReflectionToStringBuilder(object,style,null,reflectUpToClass,outputTransients,outputStatics).toString();}  }
class C{  public final boolean readBoolean() throws java.io.IOException {  return false;}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  private void paintForegroundPressed(Graphics2D g,int width,int height){  Shape s=decodeArrowPath(width,height);  g.setPaint(pressedColor);  g.fill(s);}  }
class C{  public void timingEvent(float fraction){  current.x=(int)(start.x + (end.x - start.x) * fraction);  current.y=(int)(start.y + (end.y - start.y) * fraction);  track.setCarPosition(current);}  }
class C{  public PutRepositoryRequest name(String name){  this.name=name;  return this;}  }
class C{  private void handleMousePressed(MouseEvent e){  if (this.liveHandler == null) {    for (    MouseHandlerFX handler : this.availableMouseHandlers) {      if (handler.isEnabled() && handler.hasMatchingModifiers(e)) {        this.liveHandler=handler;      }    }  }  if (this.liveHandler != null) {    this.liveHandler.handleMousePressed(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleMousePressed(this,e);    }  }}  }
class C{  public ColorGRAY(int v){  super(new Scalar(v));}  }
class C{  public static void info(int WindowNo,Container c,String clearHeading,String clearMessage,String clearText){  log.info(clearHeading + ": " + clearMessage+ " "+ clearText);  String out=clearMessage;  if (clearText != null && !clearText.equals(""))   out+="\n" + clearText;  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  if (showDialog && parent != null) {    if (parent instanceof JFrame)     new ADialogDialog((JFrame)parent,clearHeading,out,JOptionPane.INFORMATION_MESSAGE); else     new ADialogDialog((JDialog)parent,clearHeading,out,JOptionPane.INFORMATION_MESSAGE);  } else   JOptionPane.showMessageDialog(parent,out + "\n",clearHeading,JOptionPane.INFORMATION_MESSAGE);}  }
class C{  private static String undefinedXML(){  return null;}  }
class C{  public ModuleCallResolverTarget(final Module module){  this.module=module;  module.addListener(internalModuleListener);}  }
class C{  public static int combineHashCodes(int hashCode1,int hashCode2){  return hashCode1 * 31 + hashCode2;}  }
class C{  public CacheObject load(Object key,int x,int y,int zoomLevel,Projection proj){  if (key instanceof String) {    String imagePath=(String)key;    if (verbose) {      logger.fine("fetching file for cache: " + imagePath);    }    try {      URL imageURL=PropUtils.getResourceOrFileOrURL(imagePath);      if (imageURL != null) {        BufferedImage bi=BufferedImageHelper.getBufferedImage(imageURL);        OMGraphic raster=createOMGraphicFromBufferedImage(bi,x,y,zoomLevel,proj);        if (raster != null) {          return new CacheObject(imagePath,raster);        }      } else {        logger.fine("Can't find resource located at " + imagePath);      }    } catch (    MalformedURLException e) {      logger.fine("Can't find resource located at " + imagePath);    }catch (    InterruptedException e) {      logger.fine("Reading the image file was interrupted: " + imagePath);    }catch (    Exception fnfe) {      logger.fine("file not found: " + imagePath);    }  }  return null;}  }
class C{  public UUID client(){  return client;}  }
class C{  public static Start given(RepositoryFactoryConfiguration configuration){  final RepositoryFactoryBuilder builder=new RepositoryFactoryBuilder();  builder.metadataResolver=getOrDefault(configuration.getRepositoryMetadataResolver(),builder.metadataResolver);  builder.queryDescriptionExtractor=getOrDefault(configuration.getDescriptionExtractor(),builder.queryDescriptionExtractor);  builder.functionRegistry=getOrDefault(configuration.getFunctionRegistry(),builder.functionRegistry);  builder.dataStoreRegistry=getOrDefault(configuration.getDataStoreRegistry(),builder.dataStoreRegistry);  builder.resultAdapterContext=getOrDefault(configuration.getResultAdapterContext(),builder.resultAdapterContext);  builder.typeMappingContext=getOrDefault(configuration.getTypeMappingContext(),builder.typeMappingContext);  builder.eventListenerContext=getOrDefault(configuration.getEventListenerContext(),builder.eventListenerContext);  builder.operationInvocationHandler=getOrDefault(configuration.getOperationInvocationHandler(),builder.operationInvocationHandler);  builder.defaultKeyGenerator=getOrDefault(configuration.getDefaultKeyGenerator(),builder.defaultKeyGenerator);  return builder;}  }
class C{  @Override public ProjectTodoIdObject copy(){  return new ProjectTodoIdObject(this);}  }
class C{  public void pushContext(){  Context2 parentContext=currentContext;  currentContext=parentContext.getChild();  if (currentContext == null) {    currentContext=new Context2(parentContext);  } else {    currentContext.setParent(parentContext);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementById02.class,args);}  }
class C{  public boolean contains(DccLocoAddress address){  if (ConsistType == ADVANCED_CONSIST || ConsistType == CS_CONSIST) {    return (ConsistList.contains(address));  } else {    log.error("Consist Type Not Supported");    notifyConsistListeners(address,ConsistListener.NotImplemented);  }  return false;}  }
class C{  public boolean isWriteable(){  return true;}  }
class C{  public boolean containsTransientData(){  if (!getAllowsTransientData()) {    return false;  }  String[] keys=getKeys();  for (int i=0; i < keys.length; i++) {    Object o=super.get(keys[i]);    if (!(o instanceof Serializable)) {      return true;    }  }  return false;}  }
class C{  public void finishDecode(IoSession session,ProtocolDecoderOutput out) throws Exception {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected File createObbFile(String name,int rawResId){  File outFile=null;  try {    final File filesDir=mContext.getFilesDir();    outFile=new File(filesDir,name);    copyRawToFile(rawResId,outFile);  } catch (  NotFoundException e) {    if (outFile != null) {      outFile.delete();    }  }  return outFile;}  }
class C{  public Boolean isPerVMNetworkTrafficShapingSupported(){  return perVMNetworkTrafficShapingSupported;}  }
class C{  public Status stopDriver(boolean failover){  this.driverLock.lock();  try {    if (isRunning()) {      if (failover) {        LOGGER.info("Stopping driver ...");      } else {        LOGGER.info("Stopping driver and terminating tasks...");      }      this.driverStatus=this.driver.stop(failover);      LOGGER.info("Stopped driver with status: {}",this.driverStatus);    }  }  finally {    this.driverLock.unlock();  }  return driverStatus;}  }
class C{  static Object immutable(Object obj){  if (obj instanceof JSONObject) {    return immutable((JSONObject)obj);  } else   if (obj instanceof JSONArray) {    return immutable((JSONArray)obj);  } else   if (obj == null || obj instanceof Boolean || obj instanceof Number || obj instanceof String) {    return obj;  } else {    throw new SomethingWidgyHappenedError(obj.getClass().getSimpleName());  }}  }
class C{  private ExecutionContext executeUsingSimplifiedCompilationChain(String dmlScriptFilePath,boolean isFile,Map<String,String> argVals,boolean parsePyDML,String[] inputs,String[] outputs,LocalVariableMap inputSymbolTable,String configFilePath) throws IOException, DMLException {  DMLConfig config=(configFilePath == null) ? new DMLConfig() : new DMLConfig(configFilePath);  for (  Entry<String,String> param : _additionalConfigs.entrySet()) {    config.setTextValue(param.getKey(),param.getValue());  }  ConfigurationManager.setGlobalConfig(config);  CompilerConfig cconf=new CompilerConfig();  cconf.set(ConfigType.IGNORE_UNSPECIFIED_ARGS,true);  cconf.set(ConfigType.REJECT_READ_WRITE_UNKNOWNS,false);  cconf.set(ConfigType.ALLOW_CSE_PERSISTENT_READS,false);  ConfigurationManager.setGlobalConfig(cconf);  String dmlScriptStr=DMLScript.readDMLScript(isFile ? "-f" : "-s",dmlScriptFilePath);  if (_monitorUtils != null) {    _monitorUtils.setDMLString(dmlScriptStr);  }  _rtprog=null;  AParserWrapper parser=AParserWrapper.createParser(parsePyDML);  DMLProgram prog;  if (isFile) {    prog=parser.parse(dmlScriptFilePath,null,argVals);  } else {    prog=parser.parse(null,dmlScriptStr,argVals);  }  DMLTranslator dmlt=new DMLTranslator(prog);  dmlt.liveVariableAnalysis(prog);  dmlt.validateParseTree(prog);  dmlt.constructHops(prog);  dmlt.rewriteHopsDAG(prog);  Explain.explain(prog);  if (inputSymbolTable != null) {    RewriteRemovePersistentReadWrite rewrite=new RewriteRemovePersistentReadWrite(inputs,outputs,inputSymbolTable);    ProgramRewriter rewriter2=new ProgramRewriter(rewrite);    rewriter2.rewriteProgramHopDAGs(prog);  }  dmlt.constructLops(prog);  _rtprog=prog.getRuntimeProgram(config);  if (OptimizerUtils.isOptLevel(OptimizationLevel.O4_GLOBAL_TIME_MEMORY)) {    _rtprog=GlobalOptimizerWrapper.optimizeProgram(prog,_rtprog);  }  ExplainCounts counts=Explain.countDistributedOperations(_rtprog);  Statistics.resetNoOfCompiledJobs(counts.numJobs);  DMLScript.initHadoopExecution(config);  JMLCUtils.cleanupRuntimeProgram(_rtprog,outputs);  ExecutionContext ec=ExecutionContextFactory.createContext(_rtprog);  if (inputSymbolTable != null) {    ec.setVariables(inputSymbolTable);  }  _rtprog.execute(ec);  if (_monitorUtils != null)   _monitorUtils.setExplainOutput(Explain.explain(_rtprog));  return ec;}  }
class C{  public int next(){  final int startNode=_startNode;  if (_startNode == NULL) {    return NULL;  }  int node=_currentNode;  int expType;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType != nodeType);  } else   if (startNode == DTMDefaultBase.ROOTNODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  } else {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  private void paintAxis(Graphics gx){  setFonts(gx);  int mxs=m_XaxisStart;  int mxe=m_XaxisEnd;  int mys=m_YaxisStart;  int mye=m_YaxisEnd;  m_plotResize=false;  int h=this.getHeight();  int w=this.getWidth();  int hf=m_labelMetrics.getAscent();  int mswx=0;  int mswy=0;  int precisionXmax=1;  int precisionXmin=1;  int precisionXmid=1;  int whole=(int)Math.abs(m_maxX);  double decimal=Math.abs(m_maxX) - whole;  int nondecimal;  nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;  precisionXmax=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_maxX)) / Math.log(10)))) + 2 : 1;  if (precisionXmax > VisualizeUtils.MAX_PRECISION) {    precisionXmax=1;  }  String maxStringX=Utils.doubleToString(m_maxX,nondecimal + 1 + precisionXmax,precisionXmax);  whole=(int)Math.abs(m_minX);  decimal=Math.abs(m_minX) - whole;  nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;  precisionXmin=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_minX)) / Math.log(10)))) + 2 : 1;  if (precisionXmin > VisualizeUtils.MAX_PRECISION) {    precisionXmin=1;  }  String minStringX=Utils.doubleToString(m_minX,nondecimal + 1 + precisionXmin,precisionXmin);  mswx=m_labelMetrics.stringWidth(maxStringX);  int precisionYmax=1;  int precisionYmin=1;  int precisionYmid=1;  whole=(int)Math.abs(m_maxY);  decimal=Math.abs(m_maxY) - whole;  nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;  precisionYmax=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_maxY)) / Math.log(10)))) + 2 : 1;  if (precisionYmax > VisualizeUtils.MAX_PRECISION) {    precisionYmax=1;  }  String maxStringY=Utils.doubleToString(m_maxY,nondecimal + 1 + precisionYmax,precisionYmax);  whole=(int)Math.abs(m_minY);  decimal=Math.abs(m_minY) - whole;  nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;  precisionYmin=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_minY)) / Math.log(10)))) + 2 : 1;  if (precisionYmin > VisualizeUtils.MAX_PRECISION) {    precisionYmin=1;  }  String minStringY=Utils.doubleToString(m_minY,nondecimal + 1 + precisionYmin,precisionYmin);  if (m_plotInstances.attribute(m_yIndex).isNumeric()) {    mswy=(m_labelMetrics.stringWidth(maxStringY) > m_labelMetrics.stringWidth(minStringY)) ? m_labelMetrics.stringWidth(maxStringY) : m_labelMetrics.stringWidth(minStringY);    mswy+=m_labelMetrics.stringWidth("M");  } else {    mswy=m_labelMetrics.stringWidth("MM");  }  m_YaxisStart=m_axisPad;  m_XaxisStart=0 + m_axisPad + m_tickSize+ mswy;  m_XaxisEnd=w - m_axisPad - (mswx / 2);  m_YaxisEnd=h - m_axisPad - (2 * hf)- m_tickSize;  gx.setColor(m_axisColour);  if (m_plotInstances.attribute(m_xIndex).isNumeric()) {    if (w > (2 * mswx)) {      gx.drawString(maxStringX,m_XaxisEnd - (mswx / 2),m_YaxisEnd + hf + m_tickSize);      mswx=m_labelMetrics.stringWidth(minStringX);      gx.drawString(minStringX,(m_XaxisStart - (mswx / 2)),m_YaxisEnd + hf + m_tickSize);      if (w > (3 * mswx) && (m_plotInstances.attribute(m_xIndex).isNumeric())) {        double mid=m_minX + ((m_maxX - m_minX) / 2.0);        whole=(int)Math.abs(mid);        decimal=Math.abs(mid) - whole;        nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;        precisionXmid=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(mid)) / Math.log(10)))) + 2 : 1;        if (precisionXmid > VisualizeUtils.MAX_PRECISION) {          precisionXmid=1;        }        String maxString=Utils.doubleToString(mid,nondecimal + 1 + precisionXmid,precisionXmid);        int sw=m_labelMetrics.stringWidth(maxString);        double mx=m_XaxisStart + ((m_XaxisEnd - m_XaxisStart) / 2.0);        gx.drawString(maxString,(int)(mx - ((sw) / 2.0)),m_YaxisEnd + hf + m_tickSize);        gx.drawLine((int)mx,m_YaxisEnd,(int)mx,m_YaxisEnd + m_tickSize);      }    }  } else {    int numValues=m_plotInstances.attribute(m_xIndex).numValues();    int maxXStringWidth=(m_XaxisEnd - m_XaxisStart) / numValues;    for (int i=0; i < numValues; i++) {      String val=m_plotInstances.attribute(m_xIndex).value(i);      int sw=m_labelMetrics.stringWidth(val);      int rm;      if (sw > maxXStringWidth) {        int incr=(sw / val.length());        rm=(sw - maxXStringWidth) / incr;        if (rm == 0) {          rm=1;        }        val=val.substring(0,val.length() - rm);        sw=m_labelMetrics.stringWidth(val);      }      if (i == 0) {        gx.drawString(val,(int)convertToPanelX(i),m_YaxisEnd + hf + m_tickSize);      } else       if (i == numValues - 1) {        if ((i % 2) == 0) {          gx.drawString(val,m_XaxisEnd - sw,m_YaxisEnd + hf + m_tickSize);        } else {          gx.drawString(val,m_XaxisEnd - sw,m_YaxisEnd + (2 * hf) + m_tickSize);        }      } else {        if ((i % 2) == 0) {          gx.drawString(val,(int)convertToPanelX(i) - (sw / 2),m_YaxisEnd + hf + m_tickSize);        } else {          gx.drawString(val,(int)convertToPanelX(i) - (sw / 2),m_YaxisEnd + (2 * hf) + m_tickSize);        }      }      gx.drawLine((int)convertToPanelX(i),m_YaxisEnd,(int)convertToPanelX(i),m_YaxisEnd + m_tickSize);    }  }  if (m_plotInstances.attribute(m_yIndex).isNumeric()) {    if (h > (2 * hf)) {      gx.drawString(maxStringY,m_XaxisStart - mswy - m_tickSize,m_YaxisStart + (hf));      gx.drawString(minStringY,(m_XaxisStart - mswy - m_tickSize),m_YaxisEnd);      if (w > (3 * hf) && (m_plotInstances.attribute(m_yIndex).isNumeric())) {        double mid=m_minY + ((m_maxY - m_minY) / 2.0);        whole=(int)Math.abs(mid);        decimal=Math.abs(mid) - whole;        nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;        precisionYmid=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(mid)) / Math.log(10)))) + 2 : 1;        if (precisionYmid > VisualizeUtils.MAX_PRECISION) {          precisionYmid=1;        }        String maxString=Utils.doubleToString(mid,nondecimal + 1 + precisionYmid,precisionYmid);        int sw=m_labelMetrics.stringWidth(maxString);        double mx=m_YaxisStart + ((m_YaxisEnd - m_YaxisStart) / 2.0);        gx.drawString(maxString,m_XaxisStart - sw - m_tickSize- 1,(int)(mx + ((hf) / 2.0)));        gx.drawLine(m_XaxisStart - m_tickSize,(int)mx,m_XaxisStart,(int)mx);      }    }  } else {    int numValues=m_plotInstances.attribute(m_yIndex).numValues();    int div=((numValues % 2) == 0) ? (numValues / 2) : (numValues / 2 + 1);    int maxYStringHeight=(m_YaxisEnd - m_XaxisStart) / div;    int sw=m_labelMetrics.stringWidth("M");    for (int i=0; i < numValues; i++) {      if (maxYStringHeight >= (2 * hf)) {        String val=m_plotInstances.attribute(m_yIndex).value(i);        int numPrint=((maxYStringHeight / hf) > val.length()) ? val.length() : (maxYStringHeight / hf);        for (int j=0; j < numPrint; j++) {          String ll=val.substring(j,j + 1);          if (val.charAt(j) == '_' || val.charAt(j) == '-') {            ll="|";          }          if (i == 0) {            gx.drawString(ll,m_XaxisStart - sw - m_tickSize- 1,(int)convertToPanelY(i) - ((numPrint - 1) * hf) + (j * hf) + (hf / 2));          } else           if (i == (numValues - 1)) {            if ((i % 2) == 0) {              gx.drawString(ll,m_XaxisStart - sw - m_tickSize- 1,(int)convertToPanelY(i) + (j * hf) + (hf / 2));            } else {              gx.drawString(ll,m_XaxisStart - (2 * sw) - m_tickSize- 1,(int)convertToPanelY(i) + (j * hf) + (hf / 2));            }          } else {            if ((i % 2) == 0) {              gx.drawString(ll,m_XaxisStart - sw - m_tickSize- 1,(int)convertToPanelY(i) - (((numPrint - 1) * hf) / 2) + (j * hf) + (hf / 2));            } else {              gx.drawString(ll,m_XaxisStart - (2 * sw) - m_tickSize- 1,(int)convertToPanelY(i) - (((numPrint - 1) * hf) / 2) + (j * hf) + (hf / 2));            }          }        }      }      gx.drawLine(m_XaxisStart - m_tickSize,(int)convertToPanelY(i),m_XaxisStart,(int)convertToPanelY(i));    }  }  gx.drawLine(m_XaxisStart,m_YaxisStart,m_XaxisStart,m_YaxisEnd);  gx.drawLine(m_XaxisStart,m_YaxisEnd,m_XaxisEnd,m_YaxisEnd);  if (m_XaxisStart != mxs || m_XaxisEnd != mxe || m_YaxisStart != mys || m_YaxisEnd != mye) {    m_plotResize=true;  }}  }
class C{  protected void onFailedClosingUrlConnection(URLConnection urlConnection,IOException cause){}  }
class C{  public void toNativeArray(double[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  private static LambdaForm preparedLambdaForm(MemberName m){  assert (m.isInvocable()) : m;  MethodType mtype=m.getInvocationType().basicType();  assert (!m.isMethodHandleInvoke() || "invokeBasic".equals(m.getName())) : m;  int which;switch (m.getReferenceKind()) {case REF_invokeVirtual:    which=LF_INVVIRTUAL;  break;case REF_invokeStatic:which=LF_INVSTATIC;break;case REF_invokeSpecial:which=LF_INVSPECIAL;break;case REF_invokeInterface:which=LF_INVINTERFACE;break;case REF_newInvokeSpecial:which=LF_NEWINVSPECIAL;break;default :throw new InternalError(m.toString());}if (which == LF_INVSTATIC && shouldBeInitialized(m)) {preparedLambdaForm(mtype,which);which=LF_INVSTATIC_INIT;}LambdaForm lform=preparedLambdaForm(mtype,which);maybeCompile(lform,m);assert (lform.methodType().dropParameterTypes(0,1).equals(m.getInvocationType().basicType())) : Arrays.asList(m,m.getInvocationType().basicType(),lform,lform.methodType());return lform;}  }
class C{  public PortfolioQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public void reserveConnections(long startTime,long ackTimeout,long ackSDTimeout){  for (Iterator it=cons.iterator(); it.hasNext(); ) {    Connection con=(Connection)it.next();    con.setInUse(true,startTime,ackTimeout,ackSDTimeout,cons);    if (ackTimeout > 0) {      con.scheduleAckTimeouts();    }  }}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public Set<WbXmlAttributeDef> locateAttribute(String name){  return this.attrsByName.get(name);}  }
class C{  private static LosEffects losStraight(IGame game,AttackInfo ai,boolean diagramLoS,boolean partialCover){  ArrayList<Coords> in=Coords.intervening(ai.attackPos,ai.targetPos);  LosEffects los=new LosEffects();  boolean targetInBuilding=false;  if (ai.targetEntity) {    targetInBuilding=Compute.isInBuilding(game,ai.targetAbsHeight - game.getBoard().getHex(ai.targetPos).surface(),ai.targetPos);  }  if (targetInBuilding && Compute.isInBuilding(game,ai.attackAbsHeight - game.getBoard().getHex(ai.attackPos).surface(),ai.attackPos)) {    los.setThruBldg(game.getBoard().getBuildingAt(in.get(0)));    los.buildingLevelsOrHexes+=(Math.abs((ai.attackAbsHeight - ai.attackHeight) - (ai.targetAbsHeight - ai.targetHeight)));  }  for (  Coords c : in) {    los.add(LosEffects.losForCoords(game,ai,c,los.getThruBldg(),diagramLoS,partialCover));  }  if ((ai.minimumWaterDepth < 1) && ai.underWaterCombat) {    los.blocked=true;  }  if (ai.targetInfantry && targetInBuilding && (null == los.getThruBldg())) {    los.infProtected=true;  }  return los;}  }
class C{  public Double3D(final MutableInt2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  public static void printDMLScript(String dmlScriptFile){  try {    System.out.println("Running script: " + dmlScriptFile + "\n");    System.out.println("******************* DML script *******************");    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(dmlScriptFile)));    String content;    while ((content=in.readLine()) != null) {      System.out.println(content);    }    in.close();    System.out.println("**************************************************\n\n");  } catch (  IOException e) {    e.printStackTrace();    fail("unable to print dml script: " + e.getMessage());  }}  }
class C{  public CompoundPainter(){  this((Painter<T>[])null);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];if ((options & NO_PADDING) == 0) {destination[destOffset + 3]=EQUALS_SIGN;}return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];if ((options & NO_PADDING) == 0) {destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;}return destination;default :return destination;}}  }
class C{  private void authenticateUser(HttpServletRequest servletRequest){  try {    PreAuthenticatedAuthenticationToken preAuthenticatedAuthenticationToken=new PreAuthenticatedAuthenticationToken(applicationUserBuilder.build(servletRequest),"N/A");    preAuthenticatedAuthenticationToken.setDetails(authenticationDetailsSource.buildDetails(servletRequest));    Authentication authentication=authenticationManager.authenticate(preAuthenticatedAuthenticationToken);    successfulAuthentication(authentication);  } catch (  AuthenticationException e) {    unsuccessfulAuthentication(servletRequest,e);    throw e;  }}  }
class C{  private static Credential authorize(String methodId,List<String> scopes) throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(DiscoverySample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ " + "into discovery-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,scopes).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public boolean isTraitAdditive(String ns,String tn){  return false;}  }
class C{  void handleOnChange(File logFile){  try {    long lastModif=logFile.lastModified();    if (lastModif > logFileLastModified) {      logFileLastModified=lastModif;      logger.debug("Reload log4j configuration from " + logFile.getAbsolutePath());      new PropertyConfigurator().doConfigure(logFile.getAbsolutePath(),LogManager.getLoggerRepository());      logFileWarning=false;    }  } catch (  Exception e) {    if (!logFileWarning) {      logFileWarning=true;      logger.error(logFile.getAbsolutePath(),e);    }  }}  }
class C{  protected Record(ModelRecord modelRecord,Map<String,Object> fields){  if (modelRecord == null)   throw new IllegalArgumentException("Cannont create a Record with a null modelRecord parameter");  this.recordName=modelRecord.name;  this.modelRecord=modelRecord;  this.fields=(fields == null ? new HashMap<String,Object>() : new HashMap<String,Object>(fields));}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.FIELD_ACCESSOR;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.702 -0500",hash_original_method="5822F81CA7F02DBEFB349FF1928E2AAF",hash_generated_method="39C61B259BA1261CD6245AE66BFEBE04") public void startFlipping(){  mStarted=true;  updateRunning();}  }
class C{  public Iterator iterator(){  return new LongMapIterator();}  }
class C{  protected void addDeprecatedPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_deprecated_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_deprecated_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__DEPRECATED,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ChunkedOutputStream(final OutputStream stream) throws IOException {  this(stream,2048);}  }
class C{  public void cancelRequestsByTAG(Object TAG,boolean mayInterruptIfRunning){  if (TAG == null) {    log.d(LOG_TAG,"cancelRequestsByTAG, passed TAG is null, cannot proceed");    return;  }  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        if (TAG.equals(requestHandle.getTag()))         requestHandle.cancel(mayInterruptIfRunning);      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     continue; else     if (name.equals("C_ProjectType_ID"))     m_C_ProjectType_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public final boolean isSupported(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  @Override public void save(Note note,AuthenticationInfo subject) throws IOException {  getRepo(0).save(note,subject);  if (getRepoCount() > 1) {    try {      getRepo(1).save(note,subject);    } catch (    IOException e) {      LOG.info(e.getMessage() + ": Failed to write to secondary storage");    }  }}  }
class C{  public InsecureStore(final File backingFile){  this.backingFile=backingFile;  reload();}  }
class C{  protected void removeInvalid(String cacheName){  try {    grid(0).cache(cacheName).remove(KEY_VAL);    assert false : "topology validation broken";  } catch (  CacheException ex) {    assert ex.getCause() instanceof IgniteCheckedException && ex.getCause().getMessage().contains("cache topology is not valid");  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.FULL_TYPE_REFERENCE__MODULE_NAME:    setModuleName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  @NonNull public JSONObject jsonSerialize(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_REQUEST,request.jsonSerialize());  JsonUtil.putIfNotNull(json,KEY_STATE,state);  JsonUtil.putIfNotNull(json,KEY_TOKEN_TYPE,tokenType);  JsonUtil.putIfNotNull(json,KEY_AUTHORIZATION_CODE,authorizationCode);  JsonUtil.putIfNotNull(json,KEY_ACCESS_TOKEN,accessToken);  JsonUtil.putIfNotNull(json,KEY_EXPIRES_AT,accessTokenExpirationTime);  JsonUtil.putIfNotNull(json,KEY_ID_TOKEN,idToken);  JsonUtil.putIfNotNull(json,KEY_SCOPE,scope);  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  public String toString(Tag tag){  return "<u>" + tag.text() + "</u>";}  }
class C{  static Instruction lookup(Instruction switchInstr,IR ir){  Instruction bbend=switchInstr.nextInstructionInCodeOrder();  BasicBlock thisBB=bbend.getBasicBlock();  BasicBlock nextBB=thisBB.nextBasicBlockInCodeOrder();  thisBB.deleteNormalOut();  switchInstr.remove();  BranchOperand defTarget=LookupSwitch.getClearDefault(switchInstr);  BasicBlock defaultBB=defTarget.target.getBasicBlock();  int high=LookupSwitch.getNumberOfTargets(switchInstr) - 1;  if (high < 0) {    thisBB.appendInstruction(Goto.create(GOTO,defTarget));    thisBB.insertOut(defaultBB);  } else {    Operand match=LookupSwitch.getValue(switchInstr);    if (match.isConstant()) {      int value=match.asIntConstant().value;      int numMatches=LookupSwitch.getNumberOfMatches(switchInstr);      BranchOperand target=LookupSwitch.getDefault(switchInstr);      for (int i=0; i < numMatches; i++) {        if (value == LookupSwitch.getMatch(switchInstr,i).value) {          target=LookupSwitch.getTarget(switchInstr,i);          break;        }      }      thisBB.appendInstruction(Goto.create(GOTO,target));      thisBB.insertOut(target.target.getBasicBlock());    } else {      RegisterOperand reg=match.asRegister();      if (nextBB != null) {        ir.cfg.breakCodeOrder(thisBB,nextBB);      }      BasicBlock lastNewBB=_lookupswitchHelper(switchInstr,reg,defaultBB,ir,thisBB,0,high,Integer.MIN_VALUE,Integer.MAX_VALUE);      if (nextBB != null) {        ir.cfg.linkInCodeOrder(lastNewBB,nextBB);      }    }  }  if (nextBB != null) {    return nextBB.firstInstruction();  } else {    return thisBB.lastInstruction();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.808 -0500",hash_original_method="452DC75F155E1CC98FB8D0CBD4BB0B6D",hash_generated_method="4E7BB90CD6FCB70AE2C45964E3FC6C49") public void append(byte[] src){  if (buffer != null) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("Attempt to override the data"));  }  buffer=src;}  }
class C{  public void clear(){  for (int i=0; i < table.length; i++) {    table[i]=null;  }  count=0;}  }
class C{  public void testEqualsDocumentsWithChildren() throws Exception {  final String xml="<dom><a/></dom>";  XppDom dom1=XppFactory.buildDom(xml);  XppDom dom2=XppFactory.buildDom(xml);  assertEquals(comparator,dom1,dom2);  assertNull(xpath.get());}  }
class C{  public void testZonesAndTentsDisplayed_afterPatientLocationChanged(){  inUserLoginGoToPatientCreation();  String id=generateId();  populateNewPatientFields(id);  click(viewWithText("OK"));  waitForProgressFragment();  click(viewWithId(R.id.attribute_location));  click(viewWithText(LOCATION_NAME));  pressBack();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public static int compareInt(int a,int b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  public RegressionResult regress(Node target,List<Node> regressors){  int n=getRows().length;  int k=regressors.size() + 1;  int _target=variables.indexOf(target);  int[] _regressors=new int[regressors.size()];  for (int i=0; i < regressors.size(); i++) {    _regressors[i]=variables.indexOf(regressors.get(i));    if (_regressors[i] == -1) {      System.out.println();    }  }  if (_target == -1) {    System.out.println();  }  TetradMatrix y=data.getSelection(getRows(),new int[]{_target}).copy();  TetradMatrix xSub=data.getSelection(getRows(),_regressors);  TetradMatrix x;  if (regressors.size() > 0) {    x=new TetradMatrix(xSub.rows(),xSub.columns() + 1);    for (int i=0; i < x.rows(); i++) {      for (int j=0; j < x.columns(); j++) {        if (j == 0) {          x.set(i,j,1);        } else {          x.set(i,j,xSub.get(i,j - 1));        }      }    }  } else {    x=new TetradMatrix(xSub.rows(),xSub.columns());    for (int i=0; i < x.rows(); i++) {      for (int j=0; j < x.columns(); j++) {        x.set(i,j,xSub.get(i,j));      }    }  }  TetradMatrix xT=x.transpose();  TetradMatrix xTx=xT.times(x);  TetradMatrix xTxInv=xTx.inverse();  TetradMatrix xTy=xT.times(y);  TetradMatrix b=xTxInv.times(xTy);  TetradMatrix yHat=x.times(b);  if (yHat.columns() == 0)   yHat=y.like();  TetradMatrix res=y.minus(yHat);  TetradVector _yHat=yHat.getColumn(0);  TetradVector _res=res.getColumn(0);  TetradMatrix b2=b.copy();  TetradMatrix yHat2=x.times(b2);  if (yHat.columns() == 0)   yHat2=y.like();  TetradMatrix res2=y.minus(yHat2);  this.res2=res2.getColumn(0);  double rss=rss(x,y,b);  double se=Math.sqrt(rss / (n - k));  double tss=tss(y);  double r2=1.0 - (rss / tss);  TetradVector sqErr=new TetradVector(x.columns());  TetradVector t=new TetradVector(x.columns());  TetradVector p=new TetradVector(x.columns());  for (int i=0; i < x.columns(); i++) {    double _s=se * se * xTxInv.get(i,i);    double _se=Math.sqrt(_s);    double _t=b.get(i,0) / _se;    double _p=2 * (1.0 - ProbUtils.tCdf(Math.abs(_t),n - k));    sqErr.set(i,_se);    t.set(i,_t);    p.set(i,_p);  }  this.graph=createOutputGraph(target.getName(),x,regressors,p);  String[] vNames=new String[regressors.size()];  for (int i=0; i < regressors.size(); i++) {    vNames[i]=regressors.get(i).getName();  }  double[] bArray=b.columns() == 0 ? new double[0] : b.getColumn(0).toArray();  double[] tArray=t.toArray();  double[] pArray=p.toArray();  double[] seArray=sqErr.toArray();  return new RegressionResult(regressors.size() == 0,vNames,n,bArray,tArray,pArray,seArray,r2,rss,alpha,_yHat,_res);}  }
class C{  @Override default String swim(){  return "I can swim on the surface of the water.";}  }
class C{  public void bySshWithEveryRetryWaitFor(int time,TimeUnit units) throws IOException {  checkState(withEveryRetryWaitFor(time,units),"Port %s is not opened to connect to",hostAndPort.getPort());  for (int i=1; i <= retries; i++) {    Connection connection=new Connection(hostAndPort.getHostText(),hostAndPort.getPort());    try {      connection.connect(null,0,sshTimeoutMillis,sshTimeoutMillis);      LOG.info("SSH port is open on {}:{}",hostAndPort.getHostText(),hostAndPort.getPort());      return;    } catch (    IOException e) {      LOG.error("Failed to connect to {}:{} (try {}/{}) - {}",hostAndPort.getHostText(),hostAndPort.getPort(),i,retries,e.getMessage());      if (i == retries) {        throw e;      }    } finally {      connection.close();    }    sleepFor(time,units);  }}  }
class C{  private void validateXmlFieldNotPresent(String message,String xmlTagName){  for (  String xmlTag : Arrays.asList(String.format("<%s>",xmlTagName),String.format("</%s>",xmlTagName))) {    assertTrue(String.format("%s tag not expected, but found.",xmlTag),!message.contains(xmlTag));  }}  }
class C{  public ScannerException(File file,ErrorMessages message){  this(file,ErrorMessages.get(message),message,-1,-1);}  }
class C{  public static AbstractMessage receiveAuthPathProto(){  AbstractMessage serverMsg=receiveMsgProto();  AbstractMessage authPath=null;  if (serverMsg != null && serverMsg instanceof ServerResp) {    authPath=(ServerResp)serverMsg;  } else   if (serverMsg != null && serverMsg instanceof AuthPath) {    authPath=(AuthPath)serverMsg;  }  return authPath;}  }
class C{  public Task<QuotaDirectoryRestRep> deleteQuotaDirectory(URI id,QuotaDirectoryDeleteParam input){  return postTask(input,getDeactivateUrl(),id);}  }
class C{  public AnnotationMirror multiplication(AnnotatedTypeMirror lht,AnnotatedTypeMirror rht){  return null;}  }
class C{  public String toValue(){  return value;}  }
class C{  public static int readExtendedMediumInt(IoBuffer in){  int result=in.getInt();  result=(result >>> 8) | ((result & 0x000000ff) << 24);  return result;}  }
class C{  static public void updateStatusBar(Context context,String iconTitle,@DrawableRes int iconId,int notificationId){  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(iconId).setContentTitle(iconTitle);  Intent resultIntent=new Intent(context,MainActivity.class);  PendingIntent resultPendingIntent=PendingIntent.getActivity(context,0,resultIntent,PendingIntent.FLAG_UPDATE_CURRENT);  mBuilder.setContentIntent(resultPendingIntent);  Notification notification=mBuilder.build();  notification.flags|=Notification.FLAG_NO_CLEAR | Notification.FLAG_ONGOING_EVENT;  ((NotificationManager)context.getSystemService(NOTIFICATION_SERVICE)).notify(notificationId,notification);}  }
class C{  public static void main(String[] ops){  try {    Attribute length=new Attribute("length");    Attribute weight=new Attribute("weight");    FastVector my_nominal_values=new FastVector(3);    my_nominal_values.addElement("first");    my_nominal_values.addElement("second");    my_nominal_values.addElement("third");    Attribute position=new Attribute("position",my_nominal_values);    System.out.println("Name of \"position\": " + position.name());    Enumeration attValues=position.enumerateValues();    while (attValues.hasMoreElements()) {      String string=(String)attValues.nextElement();      System.out.println("Value of \"position\": " + string);    }    Attribute copy=(Attribute)position.copy();    System.out.println("Copy is the same as original: " + copy.equals(position));    System.out.println("Index of attribute \"weight\" (should be -1): " + weight.index());    System.out.println("Index of value \"first\" of \"position\" (should be 0): " + position.indexOfValue("first"));    System.out.println("\"position\" is numeric: " + position.isNumeric());    System.out.println("\"position\" is nominal: " + position.isNominal());    System.out.println("\"position\" is string: " + position.isString());    System.out.println("Name of \"position\": " + position.name());    System.out.println("Number of values for \"position\": " + position.numValues());    for (int i=0; i < position.numValues(); i++) {      System.out.println("Value " + i + ": "+ position.value(i));    }    System.out.println(position);switch (position.type()) {case Attribute.NUMERIC:      System.out.println("\"position\" is numeric");    break;case Attribute.NOMINAL:  System.out.println("\"position\" is nominal");break;case Attribute.STRING:System.out.println("\"position\" is string");break;default :System.out.println("\"position\" has unknown type");}} catch (Exception e) {e.printStackTrace();}}  }
class C{  public Socks5(SocketAddress socketAddress,String username,String password){  this(socketAddress);  setCredentials(new UsernamePasswordCredentials(username,password));}  }
class C{  public Message(String type){  Preconditions.checkNotNull(type);  this.type=type;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public synchronized void execute() throws Exception {  if (executed) {    throw new IllegalStateException("Benchmark was already executed");  }  executed=true;  runData.setStartTimeMillis();  algorithm.execute();}  }
class C{  public double differencesBetweenNeighborhoodsHorizontal(int x,int y,int k){  double result=0;  result=Math.abs(this.averageOverNeighborhoods(x + (int)Math.pow(2,k - 1),y,k) - this.averageOverNeighborhoods(x - (int)Math.pow(2,k - 1),y,k));  return result;}  }
class C{  VPlexStorageViewInfo findStorageViewOnCluster(String viewName,String clusterName,Boolean includeDetails,boolean retry) throws VPlexApiException {  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(clusterName);  uriBuilder.append(VPlexApiConstants.URI_STORAGE_VIEWS.toString());  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Storage views request URI is {}",requestURI.toString());  int retryCount=0;  VPlexStorageViewInfo storageViewInfo=null;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      ClientResponse response=_vplexApiClient.get(requestURI);      String responseStr=response.getEntity(String.class);      s_logger.info("Response is {}",responseStr);      int status=response.getStatus();      response.close();      if (status != VPlexApiConstants.SUCCESS_STATUS) {        throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Failed getting storage view info for cluster %s with status: %s",clusterName,status));      }      List<VPlexStorageViewInfo> storageViewInfoList=VPlexApiUtils.getChildrenFromResponse(uriBuilder.toString(),responseStr,VPlexStorageViewInfo.class);      storageViewInfo=null;      for (      VPlexStorageViewInfo clusterStorageViewInfo : storageViewInfoList) {        s_logger.info("Storage View Info: {}",clusterStorageViewInfo.toString());        if (clusterStorageViewInfo.getName().equals(viewName)) {          storageViewInfo=clusterStorageViewInfo;          storageViewInfo.setClusterId(clusterName);          if (includeDetails) {            updateStorageViewInfo(storageViewInfo);          }          break;        }      }      if ((storageViewInfo != null) || (!retry) || (retryCount >= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        break;      } else {        s_logger.warn("Storage view not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error("Exception finding storage view on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw vae;      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error("Exception finding storage view on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Exception getting storage view: %s",e.getMessage()));      }    }  }  return storageViewInfo;}  }
class C{  private List<Rule<IString>> samplesToRules(List<SentencePair> samples,final int order,double sampleRate,Sequence<IString> sourceSpan){  final List<SampledRule> rawRuleList=new ArrayList<>(2 * samples.size());  for (  SentencePair sample : samples)   rawRuleList.addAll(extractRules(sample,order,maxTargetPhrase));  Map<TargetSpan,Counter<AlignmentTemplate>> tgtToTemplate=new HashMap<>(rawRuleList.size());  Map<SampledRule,ReorderingCounts> reorderingCounts=reorderingEnabled ? new HashMap<>(rawRuleList.size()) : null;  for (  SampledRule rule : rawRuleList) {    TargetSpan tgtSpan=new TargetSpan(rule.tgt);    Counter<AlignmentTemplate> alTemps=tgtToTemplate.get(tgtSpan);    if (alTemps == null) {      alTemps=new ClassicCounter<>();      tgtToTemplate.put(tgtSpan,alTemps);    }    alTemps.incrementCount(new AlignmentTemplate(rule));    if (reorderingEnabled) {      ReorderingCounts counts=reorderingCounts.get(rule);      if (counts == null) {        counts=new ReorderingCounts();        reorderingCounts.put(rule,counts);      }      counts.incrementForward(lexModel.forwardOrientation(rule));      counts.incrementBackward(lexModel.backwardOrientation(rule));    }  }  List<TargetSpan> tgtSpanList=new ArrayList<>(tgtToTemplate.keySet());  List<SampledRule> maxRuleList=new ArrayList<>(tgtToTemplate.size());  int[] histogram=new int[tgtSpanList.size()];  final int ef_denom=rawRuleList.size();  for (int i=0; i < histogram.length; ++i) {    TargetSpan tgtSpan=tgtSpanList.get(i);    Counter<AlignmentTemplate> alTemps=tgtToTemplate.get(tgtSpan);    AlignmentTemplate maxAlignment=Counters.argmax(alTemps);    SampledRule maxRule=maxAlignment.rule;    scoreLex(maxRule);    maxRuleList.add(maxRule);    histogram[i]=(int)alTemps.totalCount();  }  List<Rule<IString>> scoredRules=new ArrayList<>(maxRuleList.size());  for (int r=0, sz=maxRuleList.size(); r < sz; ++r) {    final SampledRule rule=maxRuleList.get(r);    float[] scores=new float[featureTemplate.getNumFeatures()];    int eCnt=sa.count(rule.tgt,false);    assert eCnt > 0 : Arrays.toString(rule.tgt);    int adjustedCount=(int)(histogram[r] / sampleRate);    adjustedCount=Math.min(adjustedCount,eCnt);    scores[0]=(float)(Math.log(adjustedCount) - Math.log(eCnt));    scores[1]=(float)Math.log(rule.lex_f_e);    scores[2]=(float)(Math.log(histogram[r]) - Math.log(ef_denom));    scores[3]=(float)Math.log(rule.lex_e_f);    if (featureTemplate == FeatureTemplate.DENSE_EXT || featureTemplate == FeatureTemplate.DENSE_EXT_LOPEZ || featureTemplate == FeatureTemplate.DENSE_EXT_GREEN) {      scores[4]=adjustedCount > 1 ? (float)Math.log(adjustedCount) : 0.0f;      scores[5]=adjustedCount == 1 ? -1.0f : 0.0f;    }    if (featureTemplate == FeatureTemplate.DENSE_EXT_LOPEZ || featureTemplate == FeatureTemplate.DENSE_EXT_GREEN) {      scores[6]=(float)(Math.log(rawRuleList.size()) - Math.log(samples.size()));      scores[7]=(float)Math.log(sampleRate);    }    if (featureTemplate == FeatureTemplate.DENSE_EXT_GREEN) {      scores[8]=rule.isFullSentence() ? -1.0f : 0.0f;      scores[9]=(float)Math.log(eCnt);    }    Rule<IString> scoredRule=convertRule(rule,scores,featureNames,sourceSpan,this.tm2Sys);    if (reorderingEnabled) {      scoredRule.reoderingScores=reorderingCounts.get(rule).getFeatureVector();      scoredRule.forwardOrientation=lexModel.forwardOrientation(rule);      scoredRule.backwardOrientation=lexModel.backwardOrientation(rule);    }    scoredRules.add(scoredRule);  }  return scoredRules;}  }
class C{  public QRBase(String id,String type){  super(type);  this.id=Preconditions.checkNotNull(id);}  }
class C{  public TriangleFigure(){  this(0,0,0,0);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (!inputHeader.contains(".dep")) {      throw new Exception("No input file found");    }    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,0);        } else {          outputFile.setValue(row,col,1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void installProxies(N4JSResource resource,EObject obj,IDiagnosticProducer producer,ICompositeNode parentNode,boolean dontCheckParent){  final EClass eClass=obj.eClass();  if (eClass.getEAllReferences().size() - eClass.getEAllContainments().size() == 0)   return;  for (INode node=parentNode.getFirstChild(); node != null; node=node.getNextSibling()) {    EObject grammarElement=node.getGrammarElement();    if (grammarElement instanceof CrossReference && hasLeafNodes(node)) {      producer.setNode(node);      CrossReference crossReference=(CrossReference)grammarElement;      final EReference eRef=GrammarUtil.getReference(crossReference,eClass);      if (eRef == null) {        ParserRule parserRule=GrammarUtil.containingParserRule(crossReference);        final String feature=GrammarUtil.containingAssignment(crossReference).getFeature();        throw new IllegalStateException("Couldn't find EReference for crossreference '" + eClass.getName() + "::"+ feature+ "' in parser rule '"+ parserRule.getName()+ "'.");      }      createAndSetProxy(resource,obj,node,eRef,crossReference,producer);      afterCreateAndSetProxy(obj,node,eRef,crossReference,producer);    } else     if (grammarElement instanceof RuleCall && node instanceof ICompositeNode) {      RuleCall ruleCall=(RuleCall)grammarElement;      AbstractRule calledRule=ruleCall.getRule();      if (calledRule instanceof ParserRule && ((ParserRule)calledRule).isFragment()) {        installProxies(resource,obj,producer,(ICompositeNode)node,true);      }    }  }  if (!dontCheckParent && shouldCheckParentNode(parentNode)) {    installProxies(resource,obj,producer,parentNode.getParent(),dontCheckParent);  }}  }
class C{  public String deleteDoi() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  if (registrationManager.getDoiService() == null) {    String msg=getText("manage.overview.doi.operation.failed.noAccount");    LOG.error(msg);    addActionError(msg);  }  if (deleteDoi) {    DOI reservedDoi=resource.getDoi();    if (reservedDoi != null && resource.getIdentifierStatus() == IdentifierStatus.PUBLIC_PENDING_PUBLICATION) {      DOI assignedDoi=resource.getAssignedDoi();      if (assignedDoi != null) {        LOG.info("Deleting reserved " + reservedDoi.toString() + " and reassigning "+ assignedDoi.toString());        try {          doDeleteReservedDOI(reservedDoi,resource,assignedDoi);          String msg=getText("manage.overview.publishing.doi.delete.reassign.success",new String[]{reservedDoi.toString(),assignedDoi.toString()});          LOG.info(msg);          addActionMessage(msg);        } catch (        DoiException e) {          String errorMsg=getText("manage.overview.publishing.doi.delete.failed.exception",new String[]{resource.getDoi().toString(),e.getMessage()});          LOG.error(errorMsg,e);          addActionError(errorMsg);        }      } else {        LOG.info("Deleting reserved " + reservedDoi.toString());        try {          doDeleteReservedDOI(reservedDoi,resource,null);          String msg=getText("manage.overview.publishing.doi.delete.success",new String[]{reservedDoi.toString()});          LOG.info(msg);          addActionMessage(msg);        } catch (        DoiException e) {          String errorMsg=getText("manage.overview.publishing.doi.delete.failed.exception",new String[]{resource.getDoi().toString(),e.getMessage()});          LOG.error(errorMsg,e);          addActionError(errorMsg);        }      }    } else {      addActionWarning(getText("manage.overview.resource.doi.invalid.operation",new String[]{resource.getShortname(),resource.getIdentifierStatus().toString()}));    }  } else {    addActionWarning(getText("manage.overview.resource.doi.invalid.operation",new String[]{resource.getShortname(),resource.getIdentifierStatus().toString()}));  }  return execute();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.513 -0400",hash_original_method="19AEE2BCACE3F3EB35661DA4ED623440",hash_generated_method="8602F35AA82184B0E47D6BF62DCC2CD2") public boolean isQueued(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_QUEUED;}  }
class C{  @PreUpdate public void updateModified(){  this.modified=new Date();}  }
class C{  static String clean(String str){  if (str == null || str.length() == 0) {    return str;  }  int len=str.length();  char[] chars=new char[len];  int count=0;  for (int i=0; i < len; i++) {    if (Character.isLetter(str.charAt(i))) {      chars[count++]=str.charAt(i);    }  }  if (count == len) {    return str.toUpperCase();  }  return new String(chars,0,count).toUpperCase();}  }
class C{  public static void resetTrap(String key){  checkLibraryInstantiation();  actManipulator.resetTransition(key);}  }
class C{  public void addInterestedClients(InternalDistributedMember member,Set clients,Set clientsInv,boolean longIDs){  this.memberWithFilterInfoExists=true;  FilterInfo fInfo=this.serverFilterInfo.get(member);  if (fInfo == null) {    fInfo=new FilterInfo();    this.serverFilterInfo.put(member,fInfo);  }  if (clients != null && clients.size() > 0) {    fInfo.setInterestedClients(clients);  }  if (clientsInv != null && clientsInv.size() > 0) {    fInfo.setInterestedClientsInv(clientsInv);  }  if (longIDs) {    fInfo.longIDs=longIDs;  }}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,Value arg){  return new JInterfaceInvokeExpr(base,method,Arrays.asList(new Value[]{arg}));}  }
class C{  @Transactional public void deleteWorkFlowforObject(final Map workflowsearchparams){  final Criteria workFlowCrit=getCriteriaForDeleteorModify(workflowsearchparams);  for (  final WorkFlowMatrix matrix : (List<WorkFlowMatrix>)workFlowCrit.list()) {    workflowMatrixRepository.delete(matrix);  }}  }
class C{  public static String randomString(char[] sourceChar,int length){  if (sourceChar == null || sourceChar.length == 0 || length < 0) {    return null;  }  StringBuilder builder=new StringBuilder(length);  for (int i=0; i < length; i++) {    builder.append(sourceChar[randomInt(sourceChar.length)]);  }  return builder.toString();}  }
class C{  private void hqr2(){  int nn=this.n;  int n=nn - 1;  int low=0;  int high=nn - 1;  double eps=Math.pow(2.0,-52.0);  double exshift=0.0;  double p=0, q=0, r=0, s=0, z=0, t, w, x, y;  double norm=0.0;  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      d[i]=H[i][i];      e[i]=0.0;    }    for (int j=Math.max(i - 1,0); j < nn; j++) {      norm=norm + Math.abs(H[i][j]);    }  }  int iter=0;  while (n >= low) {    int l=n;    while (l > low) {      s=Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);      if (s == 0.0) {        s=norm;      }      if (Math.abs(H[l][l - 1]) < eps * s) {        break;      }      l--;    }    if (l == n) {      H[n][n]=H[n][n] + exshift;      d[n]=H[n][n];      e[n]=0.0;      n--;      iter=0;    } else     if (l == n - 1) {      w=H[n][n - 1] * H[n - 1][n];      p=(H[n - 1][n - 1] - H[n][n]) / 2.0;      q=p * p + w;      z=Math.sqrt(Math.abs(q));      H[n][n]=H[n][n] + exshift;      H[n - 1][n - 1]=H[n - 1][n - 1] + exshift;      x=H[n][n];      if (q >= 0) {        if (p >= 0) {          z=p + z;        } else {          z=p - z;        }        d[n - 1]=x + z;        d[n]=d[n - 1];        if (z != 0.0) {          d[n]=x - w / z;        }        e[n - 1]=0.0;        e[n]=0.0;        x=H[n][n - 1];        s=Math.abs(x) + Math.abs(z);        p=x / s;        q=z / s;        r=Math.sqrt(p * p + q * q);        p=p / r;        q=q / r;        for (int j=n - 1; j < nn; j++) {          z=H[n - 1][j];          H[n - 1][j]=q * z + p * H[n][j];          H[n][j]=q * H[n][j] - p * z;        }        for (int i=0; i <= n; i++) {          z=H[i][n - 1];          H[i][n - 1]=q * z + p * H[i][n];          H[i][n]=q * H[i][n] - p * z;        }        for (int i=low; i <= high; i++) {          z=V[i][n - 1];          V[i][n - 1]=q * z + p * V[i][n];          V[i][n]=q * V[i][n] - p * z;        }      } else {        d[n - 1]=x + p;        d[n]=x + p;        e[n - 1]=z;        e[n]=-z;      }      n=n - 2;      iter=0;    } else {      x=H[n][n];      y=0.0;      w=0.0;      if (l < n) {        y=H[n - 1][n - 1];        w=H[n][n - 1] * H[n - 1][n];      }      if (iter == 10) {        exshift+=x;        for (int i=low; i <= n; i++) {          H[i][i]-=x;        }        s=Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);        x=y=0.75 * s;        w=-0.4375 * s * s;      }      if (iter == 30) {        s=(y - x) / 2.0;        s=s * s + w;        if (s > 0) {          s=Math.sqrt(s);          if (y < x) {            s=-s;          }          s=x - w / ((y - x) / 2.0 + s);          for (int i=low; i <= n; i++) {            H[i][i]-=s;          }          exshift+=s;          x=y=w=0.964;        }      }      iter=iter + 1;      int m=n - 2;      while (m >= l) {        z=H[m][m];        r=x - z;        s=y - z;        p=(r * s - w) / H[m + 1][m] + H[m][m + 1];        q=H[m + 1][m + 1] - z - r- s;        r=H[m + 2][m + 1];        s=Math.abs(p) + Math.abs(q) + Math.abs(r);        p=p / s;        q=q / s;        r=r / s;        if (m == l) {          break;        }        if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {          break;        }        m--;      }      for (int i=m + 2; i <= n; i++) {        H[i][i - 2]=0.0;        if (i > m + 2) {          H[i][i - 3]=0.0;        }      }      for (int k=m; k <= n - 1; k++) {        boolean notlast=(k != n - 1);        if (k != m) {          p=H[k][k - 1];          q=H[k + 1][k - 1];          r=(notlast ? H[k + 2][k - 1] : 0.0);          x=Math.abs(p) + Math.abs(q) + Math.abs(r);          if (x != 0.0) {            p=p / x;            q=q / x;            r=r / x;          }        }        if (x == 0.0) {          break;        }        s=Math.sqrt(p * p + q * q + r * r);        if (p < 0) {          s=-s;        }        if (s != 0) {          if (k != m) {            H[k][k - 1]=-s * x;          } else           if (l != m) {            H[k][k - 1]=-H[k][k - 1];          }          p=p + s;          x=p / s;          y=q / s;          z=r / s;          q=q / p;          r=r / p;          for (int j=k; j < nn; j++) {            p=H[k][j] + q * H[k + 1][j];            if (notlast) {              p=p + r * H[k + 2][j];              H[k + 2][j]=H[k + 2][j] - p * z;            }            H[k][j]=H[k][j] - p * x;            H[k + 1][j]=H[k + 1][j] - p * y;          }          for (int i=0; i <= Math.min(n,k + 3); i++) {            p=x * H[i][k] + y * H[i][k + 1];            if (notlast) {              p=p + z * H[i][k + 2];              H[i][k + 2]=H[i][k + 2] - p * r;            }            H[i][k]=H[i][k] - p;            H[i][k + 1]=H[i][k + 1] - p * q;          }          for (int i=low; i <= high; i++) {            p=x * V[i][k] + y * V[i][k + 1];            if (notlast) {              p=p + z * V[i][k + 2];              V[i][k + 2]=V[i][k + 2] - p * r;            }            V[i][k]=V[i][k] - p;            V[i][k + 1]=V[i][k + 1] - p * q;          }        }      }    }  }  if (norm == 0.0) {    return;  }  for (n=nn - 1; n >= 0; n--) {    p=d[n];    q=e[n];    if (q == 0) {      int l=n;      H[n][n]=1.0;      for (int i=n - 1; i >= 0; i--) {        w=H[i][i] - p;        r=0.0;        for (int j=l; j <= n; j++) {          r=r + H[i][j] * H[j][n];        }        if (e[i] < 0.0) {          z=w;          s=r;        } else {          l=i;          if (e[i] == 0.0) {            if (w != 0.0) {              H[i][n]=-r / w;            } else {              H[i][n]=-r / (eps * norm);            }          } else {            x=H[i][i + 1];            y=H[i + 1][i];            q=(d[i] - p) * (d[i] - p) + e[i] * e[i];            t=(x * s - z * r) / q;            H[i][n]=t;            if (Math.abs(x) > Math.abs(z)) {              H[i + 1][n]=(-r - w * t) / x;            } else {              H[i + 1][n]=(-s - y * t) / z;            }          }          t=Math.abs(H[i][n]);          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n]=H[j][n] / t;            }          }        }      }    } else     if (q < 0) {      int l=n - 1;      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {        H[n - 1][n - 1]=q / H[n][n - 1];        H[n - 1][n]=-(H[n][n] - p) / H[n][n - 1];      } else {        cdiv(0.0,-H[n - 1][n],H[n - 1][n - 1] - p,q);        H[n - 1][n - 1]=cdivr;        H[n - 1][n]=cdivi;      }      H[n][n - 1]=0.0;      H[n][n]=1.0;      for (int i=n - 2; i >= 0; i--) {        double ra, sa, vr, vi;        ra=0.0;        sa=0.0;        for (int j=l; j <= n; j++) {          ra=ra + H[i][j] * H[j][n - 1];          sa=sa + H[i][j] * H[j][n];        }        w=H[i][i] - p;        if (e[i] < 0.0) {          z=w;          r=ra;          s=sa;        } else {          l=i;          if (e[i] == 0) {            cdiv(-ra,-sa,w,q);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;          } else {            x=H[i][i + 1];            y=H[i + 1][i];            vr=(d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;            vi=(d[i] - p) * 2.0 * q;            if (vr == 0.0 & vi == 0.0) {              vr=eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x)+ Math.abs(y)+ Math.abs(z));            }            cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi);            H[i][n - 1]=cdivr;            H[i][n]=cdivi;            if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {              H[i + 1][n - 1]=(-ra - w * H[i][n - 1] + q * H[i][n]) / x;              H[i + 1][n]=(-sa - w * H[i][n] - q * H[i][n - 1]) / x;            } else {              cdiv(-r - y * H[i][n - 1],-s - y * H[i][n],z,q);              H[i + 1][n - 1]=cdivr;              H[i + 1][n]=cdivi;            }          }          t=Math.max(Math.abs(H[i][n - 1]),Math.abs(H[i][n]));          if ((eps * t) * t > 1) {            for (int j=i; j <= n; j++) {              H[j][n - 1]=H[j][n - 1] / t;              H[j][n]=H[j][n] / t;            }          }        }      }    }  }  for (int i=0; i < nn; i++) {    if (i < low | i > high) {      for (int j=i; j < nn; j++) {        V[i][j]=H[i][j];      }    }  }  for (int j=nn - 1; j >= low; j--) {    for (int i=low; i <= high; i++) {      z=0.0;      for (int k=low; k <= Math.min(j,high); k++) {        z=z + V[i][k] * H[k][j];      }      V[i][j]=z;    }  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(bytes[0]);  buffer.setAtIndexAndInc(bytes[1]);  buffer.setAtIndexAndInc(bytes[2]);  buffer.setAtIndexAndInc(bytes[3]);  super.loadByteArray(buffer);}  }
class C{  public Matrix prob_X(Matrix Z){  Matrix X=new Matrix(MatrixUtils.sigma(Z.times(W.transpose()).getArray()));  MatrixUtils.fillCol(X.getArray(),0,1.0);  return X;}  }
class C{  private boolean checkSubKeyInSuspendedTransactionSubKeyList(long subKey){  if (sessionCtx != null && sessionCtx.getContextData() != null && sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION) != null && sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION) instanceof List<?> && ((List<?>)sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION)).size() > 0) {    List<Long> list=ParameterizedTypes.list((List<?>)sessionCtx.getContextData().get(SUSPENDED_SUBSCRIPTIONS_IN_TRANSACTION),Long.class);    return list.contains(new Long(subKey));  }  return false;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void performTests(Instances result){  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  for (int i=0; i < result.numAttributes(); i++) {    assertEquals(m_Instances.attribute(i).type(),result.attribute(i).type());    assertEquals(m_Instances.attribute(i).name(),result.attribute(i).name());  }  boolean orderEqual=true;  for (int i=0; i < result.numClasses(); i++) {    if (!m_Instances.classAttribute().value(i).equals(result.classAttribute().value(i))) {      orderEqual=false;      break;    }  }  if (orderEqual)   fail("Order wasn't changed!");}  }
class C{  public DocCollection copyWithSlices(Map<String,Slice> slices){  return new DocCollection(getName(),slices,propMap,router,znodeVersion,znode);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new SourceFileAttribute(newCp,getFileName());}  }
class C{  public void printState(){  for (  StaticCache cache : cacheList) {    cache.printCache();  }}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  private void displayQuantity(int numberOfCoffees){  TextView quantityTextView=(TextView)findViewById(R.id.quantity_text_view);  quantityTextView.setText("" + numberOfCoffees);}  }
class C{  public static String shortDebugString(final MessageOrBuilder message){  try {    final StringBuilder sb=new StringBuilder();    SINGLE_LINE_PRINTER.print(message,new TextGenerator(sb));    return sb.toString().trim();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public boolean ownUpdatesAreVisible(int type){  debugCodeCall("ownUpdatesAreVisible",type);  return true;}  }
class C{  public void removeTexture(CCTexture2D tex){  if (tex == null)   return;  textures.values().remove(tex);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.111 -0500",hash_original_method="DD0A1E37D5A6E0D61FD3265D348DFEF0",hash_generated_method="993B7A16D49BFB39DEAEA6DF2B396C59") public boolean isNamespaceAware(){  return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);}  }
class C{  public Matrix solve(Matrix b,ExecutorService threadpool){  Matrix x=U.transposeMultiply(b,threadpool);  Matrix.diagMult(DenseVector.toDenseVec(getInverseSingularValues()),x);  return V.multiply(x,threadpool);}  }
class C{  protected Optional<String> checkIpAddress(final String subject,final int expectedLength,final String failureFormat){  return asInetAddress(subject).filter(null).map(null).orElse(Optional.of(String.format(failureFormat,subject)));}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,PartitionMemberInfoImpl details,DM dm,OfflineMemberDetails offlineDetails,ReplyException re){  Assert.assertTrue(recipient != null,"FetchPartitionDetailsReplyMessage NULL recipient");  FetchPartitionDetailsReplyMessage m=new FetchPartitionDetailsReplyMessage(processorId,details,offlineDetails,re);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static InvalidArgumentE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidArgumentE object=new InvalidArgumentE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidArgument".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidArgumentE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","InvalidArgument").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setInvalidArgument(null);        reader.next();        reader.next();      } else {        object.setInvalidArgument(InvalidArgument.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void clear(JavaFileObject source){  Consumer<JavaFileObject> removeFromLog=logRemover(log);  removeFromLog.accept(source);  log.nerrors=0;  log.nwarnings=0;  List<Name> remove=new ArrayList<>();  Consumer<Type> removeFromClosureCache=closureCacheRemover(types);  check.compiled.forEach(null);  remove.forEach(null);}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  private synchronized void saveClassFile(){  if (classfile == null || hasMemberCache() != null)   return;  ByteArrayOutputStream barray=new ByteArrayOutputStream();  DataOutputStream out=new DataOutputStream(barray);  try {    classfile.write(out);    barray.close();    rawClassfile=barray.toByteArray();    classfile=null;  } catch (  IOException e) {  }}  }
class C{  public Email(){  super(EMAIL_REGEX,false,1.0);}  }
class C{  public void removeService(Service serviceImplementation){  String serviceName=getServiceName(serviceImplementation.getDescriptorForType());  if (serviceNameMap.remove(serviceName) != null) {    log.info("Removed " + serviceName);  }}  }
class C{  public Request(final DigestURL url,final byte[] referrerhash){  this(null,url,referrerhash,null,null,null,0,0);}  }
class C{  @POST @Path("/{fileName}") public void postFile(@Context HttpStreamer httpStreamer,@PathParam("fileName") String fileName) throws IOException {  httpStreamer.callback(new HttpStreamHandlerImpl(fileName));}  }
class C{  public boolean hasVectors(){  return storeTermVector;}  }
class C{  public static String evaluateHostName(String template){  if (template.contains(HOSTNAME_PLACEHOLDER)) {    String hostname;    try {      hostname=InetAddress.getLocalHost().getHostName();    } catch (    UnknownHostException e) {      throw Throwables.propagate(e);    }    return template.replaceFirst(HOSTNAME_PLACEHOLDER,hostname);  }  return template;}  }
class C{  public static boolean isLessThanOrEqualToUnsigned(long n1,long n2){  return UnsignedLongs.compare(n1,n2) <= 0;}  }
class C{  void fixSize(){  Dimension d=textArea.getPreferredSize();  Rectangle r=null;  try {    r=textArea.modelToView(textArea.getDocument().getLength() - 1);    d.height=r.y + r.height;    d=textArea.getPreferredSize();    d.width=Math.min(d.width + 25,320);    d.height=Math.min(d.height,150);    textArea.setPreferredSize(d);  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  pack();}  }
class C{  public static int[] eliminateDuplicates(int[] list){  int[] distinctList=new int[list.length];  int i=0;  for (  int e : list) {    if (linearSearch(distinctList,e) == -1) {      distinctList[i]=e;      i++;    }  }  return distinctList;}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  private void trimPc(Node t){  for (  Node x : new LinkedList<>(pc.get(t))) {    if (!pc.containsKey(x)) {      pc.put(x,hitonPc(x));    }    if (!pc.get(x).contains(t)) {      pc.get(t).remove(x);    }  }}  }
class C{  private static JCheckBox configureCheckBox(JCheckBox checkBox){  checkBox.setHorizontalAlignment(JCheckBox.LEFT);  checkBox.setFont(UIManager.getFont("Tree.font"));  checkBox.setBorderPainted(false);  checkBox.setFocusPainted(false);  checkBox.setFocusable(false);  checkBox.setOpaque(false);  return checkBox;}  }
class C{  public boolean isZoomIn(){  return mZoomIn;}  }
class C{  private void updateArchTbls(DbConnection dbConn) throws Exception {  String tableName;  ArchiveFldsImpl flds=new ArchiveFldsImpl();  ArchiveIdxsImpl idxs=new ArchiveIdxsImpl();  boolean crtMTxtTbl=false;  boolean crtMDateTbl=false;  boolean crtMDecTbl=false;  boolean crtMIntTbl=false;  boolean isMTxt=false, isMInt=false;  boolean isMDec=false, isMDate=false;  if (_logger.isDebugEnabled())   _logger.debug("updateArchTbls");  isMTxt=isTxtTblMultCreated();  isMInt=isIntTblMultCreated();  isMDec=isDecTblMultCreated();  isMDate=isDateTblMultCreated();  getUpdFldsIdxsDef(flds,idxs);  try {    if (isMTxt) {      dropTxtMultTbl(dbConn);    }    if (isMInt) {      dropIntMultTbl(dbConn);    }    if (isMDec) {      dropDecMultTbl(dbConn);    }    if (isMDate) {      dropDateMultTbl(dbConn);    }  } catch (  Exception e) {    _logger.error("updateArchTbls: Error eliminando tablas Multivalor");  }  tableName=DaoUtil.getRelFldsTblName(_tblPrefix);  try {    DbTableFns.dropTable(dbConn,tableName);    createRelFldsTable(dbConn,tableName,flds,idxs);    for (int i=0; i < flds.count(); i++) {      ArchiveFldImpl fldDef=(ArchiveFldImpl)flds.get(i);      if (fldDef.isMult()) {switch (fldDef.getType()) {case ArchiveFldType.SHORT_TEXT:          crtMTxtTbl=true;        break;case ArchiveFldType.DATE:case ArchiveFldType.DATE_TIME:case ArchiveFldType.TIME:      crtMDateTbl=true;    break;case ArchiveFldType.SHORT_DECIMAL:case ArchiveFldType.LONG_DECIMAL:  crtMDecTbl=true;break;case ArchiveFldType.SHORT_INTEGER:case ArchiveFldType.LONG_INTEGER:crtMIntTbl=true;break;}}}if (crtMTxtTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_TEXT);createMultTbl(dbConn,tableName,DbDataType.SHORT_TEXT);}if (crtMDateTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.DATE_TIME);createMultTbl(dbConn,tableName,DbDataType.DATE_TIME);}if (crtMDecTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_DECIMAL);createMultTbl(dbConn,tableName,DbDataType.SHORT_DECIMAL);}if (crtMIntTbl) {tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_INTEGER);createMultTbl(dbConn,tableName,DbDataType.SHORT_INTEGER);}} catch (Exception e) {_logger.error(e);throw e;}}  }
class C{  private void readFieldDescripters() throws IOException {  _columnNames=new String[_columnCount];  _types=new byte[_columnCount];  _lengths=new int[_columnCount];  _decimalCounts=new byte[_columnCount];  for (int n=0; n <= _columnCount - 1; n++) {    _columnNames[n]=_leis.readString(11).trim();    int ix=_columnNames[n].indexOf((char)0);    if (ix > 0) {      _columnNames[n]=_columnNames[n].substring(0,ix);    }    _types[n]=(byte)_leis.readByte();    _leis.skipBytes(4);    _lengths[n]=_leis.readUnsignedByte();    _decimalCounts[n]=_leis.readByte();    _leis.skipBytes(14);  }}  }
class C{  static long divideLongByInt(long a,int b){  long quot;  long rem;  long bLong=b & 0xffffffffL;  if (a >= 0) {    quot=(a / bLong);    rem=(a % bLong);  } else {    long aPos=a >>> 1;    long bPos=b >>> 1;    quot=aPos / bPos;    rem=aPos % bPos;    rem=(rem << 1) + (a & 1);    if ((b & 1) != 0) {      if (quot <= rem) {        rem-=quot;      } else {        if (quot - rem <= bLong) {          rem+=bLong - quot;          quot-=1;        } else {          rem+=(bLong << 1) - quot;          quot-=2;        }      }    }  }  return (rem << 32) | (quot & 0xffffffffL);}  }
class C{  public void testStartFireLoop(){  String patternExpr="not " + SupportBean.class.getName();  EPStatement patternStmt=epService.getEPAdministrator().createPattern(patternExpr);  patternStmt.addListener(new PatternUpdateListener());  patternStmt.stop();  patternStmt.start();}  }
class C{  public String handle(){  return clientHandle;}  }
class C{  public static synchronized void logRunId(SAMFileHeader header){  for (  final String comment : header.getComments()) {    if (comment.replaceAll("@CO\t","").startsWith(RUN_ID_ATTRIBUTE)) {      final String stringGuid=comment.substring(comment.indexOf(':') + 1);      if (ALREADY_REPORTED_SAM.add(stringGuid)) {        Diagnostic.userLog("Referenced SAM file with RUN-ID: " + stringGuid);      }    }  }}  }
class C{  public void readEnd() throws IOException {  int code=read();  if (code != 'z')   throw error("unknown code at " + codeName(code));}  }
class C{  public static int EISDIR(){  return Errno.EISDIR.intValue();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case USERID:    return isSetUserid();case PASSWD:  return isSetPasswd();}throw new IllegalStateException();}  }
class C{  public int deviceCodeAsValueFromSystemName(String systemName){  int dCode=-1;  if ((!aCodes.reset(systemName).matches()) || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {  } else {    if (hCodes.reset(systemName).matches() && hCodes.groupCount() == 4) {      try {        dCode=Integer.parseInt(hCodes.group(4));      } catch (      Exception e) {        log.error("illegal character in number field system name: " + systemName);        return -1;      }    }  }  return dCode;}  }
class C{  public boolean httpOnly(){  return this.isHttpOnly;}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static final boolean isStoreAndForwardMode(byte esmClass){  return isMessagingMode(esmClass,SMPPConstant.ESMCLS_STORE_FORWARD);}  }
class C{  public static boolean isWindowsXp(){  return osName.indexOf("Windows") > -1 && osVersion.equals("5.1");}  }
class C{  @SuppressWarnings("unchecked") public static <U>Function<U,IntPredicate> and(Function<U,IntPredicate>... filters){  return null;}  }
class C{  public SitemapsRegularEntry(){  super();  this.getCategories().add(CATEGORY);}  }
class C{  public void raycast(ParticleRaycastCallback particleCallback,Vec2 point1,Vec2 point2){  m_particleSystem.raycast(particleCallback,point1,point2);}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  mZoomListeners.add(listener);}  }
class C{  public static String exceptionToString(Throwable t){  StringWriter sw=new StringWriter();  PrintWriter out=new PrintWriter(sw);  printExceptionStack(t,out,0);  return sw.toString();}  }
class C{  protected void fire(final SelectionEvent event){  if (this.listener == null)   return;  this.listener.widgetSelected(event);}  }
class C{  private void process(){  while (reader.getPointer() < reader.getTotalBitLen()) {    int flag=reader.getPositive(bitsPerFlag);    Point2D p=getPointCoords();    float[] cc={1f,1f,1f,1f};    for (int z=0; z < colCompCount; z++) {      cc[z]=reader.getFloat(bitsPerComponent);    }    Color c=new Color(cc[0],cc[1],cc[2],cc[3]);switch (flag) {case 0:      break;case 1:    Point2D temp[]=new Point2D[2];  temp[0]=triangles.get(triangles.size() - 2);temp[1]=triangles.get(triangles.size() - 1);triangles.addAll(Arrays.asList(temp));Color tc[]=new Color[2];tc[0]=triColors.get(triColors.size() - 2);tc[1]=triColors.get(triColors.size() - 1);triColors.addAll(Arrays.asList(tc));break;case 2:Point2D ff[]=new Point2D[2];ff[0]=triangles.get(triangles.size() - 3);ff[1]=triangles.get(triangles.size() - 1);triangles.addAll(Arrays.asList(ff));Color fc[]=new Color[2];fc[0]=triColors.get(triColors.size() - 3);fc[1]=triColors.get(triColors.size() - 1);triColors.addAll(Arrays.asList(fc));break;}triangles.add(p);triColors.add(c);}}  }
class C{  public JdpPacketWriter() throws IOException {  baos=new ByteArrayOutputStream();  pkt=new DataOutputStream(baos);  pkt.writeInt(JdpGenericPacket.getMagic());  pkt.writeShort(JdpGenericPacket.getVersion());}  }
class C{  protected int engineGetBlockSize(){  return blksize;}  }
class C{  default CompactionMode compaction(){  return CompactionMode.DEFAULT;}  }
class C{  public static <S extends HasMouseUpHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseUpEvent event=new MouseUpEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:20.334 -0500",hash_original_method="1D6F662958C1BDF1FC8B33D262C45E26",hash_generated_method="06E099A51E41BDFBEEA6871660A43A37") public static void parse(InputStream in,Encoding encoding,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  InputSource source=new InputSource(in);  source.setEncoding(encoding.expatName);  reader.parse(source);}  }
class C{  public In(java.net.Socket socket){  try {    InputStream is=socket.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + socket);  }}  }
class C{  public ProcessParameter(Frame frame,int WindowNo,ProcessInfo pi){  super(frame,pi.getTitle(),true);  m_frame=frame;  try {    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,ex.getMessage());  }  m_WindowNo=WindowNo;  m_processInfo=pi;}  }
class C{  public void diff(TLCVariableValue other){  if (!this.toSimpleString().equals(other.toSimpleString())) {    other.setChanged();    if (this.getClass().equals(other.getClass())) {      innerDiff(other);    }  }}  }
class C{  protected void pluginInitialize(){}  }
class C{  public boolean isSatisfied(XMLObject xo){  for (  XMLSyntaxRule rule : rules) {    if (!rule.isSatisfied(xo))     return false;  }  return true;}  }
class C{  private Collection singleton(Object element){  ArrayList result=new ArrayList();  result.add(element);  return result;}  }
class C{  private void populateDefaultsForAllOrders(Order order){  Provider orderer=order.getOrderer();  if (orderer == null) {    order.setOrderer(getProvider());  }  User creator=Utils.getUserFromProvider(orderer);  order.setEncounter(createEncounter(order.getPatient(),creator,new Date()));  order.setCreator(creator);}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  @Override public synchronized Set<Map.Entry<Object,Object>> entrySet(){  checkInitialized();  if (entrySet == null) {    if (entrySetCallCount++ == 0)     entrySet=Collections.unmodifiableMap(this).entrySet(); else     return super.entrySet();  }  if (entrySetCallCount != 2)   throw new RuntimeException("Internal error.");  return entrySet;}  }
class C{  public DefaultDrawingView(){  initComponents();  eventHandler=createEventHandler();  setToolTipText("dummy");  setFocusable(true);  addFocusListener(eventHandler);  setTransferHandler(new DefaultDrawingViewTransferHandler());  setBackground(new Color(0xb0b0b0));  setOpaque(true);}  }
class C{  public ValidatorTagTestCase(String name){  super(name);}  }
class C{  private final void cancelNotification(){  if (localLOGV)   Slog.i(TAG,"Canceling low memory notification");  NotificationManager mNotificationMgr=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);  mNotificationMgr.cancelAsUser(null,LOW_MEMORY_NOTIFICATION_ID,UserHandle.ALL);  mContext.removeStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL);  mContext.sendBroadcastAsUser(mStorageOkIntent,UserHandle.ALL);}  }
class C{  public TransactionHashesNotification(final List<HashMetaDataPair> pairs){  super(NotificationType.TransactionHashes);  this.pairs=pairs;}  }
class C{  public static final Instances deleteAttributesAt(Instances D,int indicesToRemove[]){  Arrays.sort(indicesToRemove);  for (int j=indicesToRemove.length - 1; j >= 0; j--) {    D.deleteAttributeAt(indicesToRemove[j]);  }  return D;}  }
class C{  Element renameElementAndCloneChild(Element source,Document targetDocument,String newName){  Element newElement=targetDocument.createElement(newName);  NamedNodeMap namedNodeMap=source.getAttributes();  for (int iAttr=0; iAttr < namedNodeMap.getLength(); iAttr++) {    Node node=namedNodeMap.item(iAttr);    newElement.setAttribute(node.getNodeName(),node.getNodeValue());  }  NodeList listofChilds=source.getChildNodes();  for (int iChild=0; iChild < listofChilds.getLength(); iChild++) {    Node node=listofChilds.item(iChild);    newElement.appendChild(node.cloneNode(true));  }  return newElement;}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  float halfDiffX=getHalfDiffX(points,points.size(),seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < points.size(); i+=4) {    int index=startIndex + i / 2;    float x=points.get(i);    if (mType == Type.DEFAULT) {      x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;    }    if (!isNullValue(series.getY(index + 1)) && points.size() > i + 3) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index + 1)),x,points.get(i + 3) - renderer.getChartValuesSpacing(),paint,0);    }    if (!isNullValue(series.getY(index)) && points.size() > i + 1) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index)),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);    }  }}  }
class C{  public String nextString(char quote){  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw new RuntimeException("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw new RuntimeException("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public ListFigure(@Nullable Figure presentationFigure){  super(presentationFigure);  setLayouter(new VerticalLayouter());  set(LAYOUT_INSETS,new Insets2D.Double(4,8,4,8));}  }
class C{  public void removeCustomParser(SpiderParser parser){  validateParameterNonNull(parser,"parser");  this.customParsers.remove(parser);}  }
class C{  public LofsSearchEditor(LofsRunner runner){  super(runner,"Result Graph");}  }
class C{  protected void doLogOobMessageOutbound(Message message){  if (rpcLogger != null) {    rpcLogger.logOobMessage(clientInfo,serverInfo,message,System.currentTimeMillis());  }}  }
class C{  private boolean isSet(int position){  return (position < bitString.length) && bitString[position];}  }
class C{  public void tabPageLoadStarted(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.pageLoadingStarted();}  }
class C{  private void normalizeInstance(Instance inst,int firstCopy) throws Exception {  double docLength=0;  if (m_AvgDocLength < 0) {    throw new Exception("Average document length not set.");  }  for (int j=0; j < inst.numValues(); j++) {    if (inst.index(j) >= firstCopy) {      docLength+=inst.valueSparse(j) * inst.valueSparse(j);    }  }  docLength=Math.sqrt(docLength);  for (int j=0; j < inst.numValues(); j++) {    if (inst.index(j) >= firstCopy) {      double val=inst.valueSparse(j) * m_AvgDocLength / docLength;      inst.setValueSparse(j,val);      if (val == 0) {        System.err.println("setting value " + inst.index(j) + " to zero.");        j--;      }    }  }}  }
class C{  public static @Lightness int isDark(Palette palette){  Palette.Swatch mostPopulous=getMostPopulousSwatch(palette);  if (mostPopulous == null)   return LIGHTNESS_UNKNOWN;  return isDark(mostPopulous.getHsl()) ? IS_DARK : IS_LIGHT;}  }
class C{  public static String formatCSV(Iterable<String> values){  StrBuilder sb=new StrBuilder();  for (  String value : values) {    sb.appendSeparator(",");    sb.append("\"");    if (StringUtils.isNotEmpty(value)) {      for (int i=0; i < value.length(); i++) {        char ch=value.charAt(i);        if (ch == '"') {          sb.append('"');        }        sb.append(ch);      }    }    sb.append("\"");  }  return sb.toString();}  }
class C{  public Collection entries(){  throw new UnsupportedOperationException();}  }
class C{  public void addFrame(CCTexture2D tex,CGRect rect){  CCSpriteFrame frame=CCSpriteFrame.frame(tex,rect,CGPoint.zero());  frames_.add(frame);}  }
class C{  public boolean checkTree(Graph G,Vertex<T> V){  if (G.edges.size() != G.vertices.size() - 1)   return false;  HashSet<Vertex<T>> set=new HashSet<Vertex<T>>();  boolean hasCycle=dfs(G,V,set);  if (hasCycle)   return false;  if (set.size() != G.vertices.size())   return false;  return true;}  }
class C{  public boolean isCurrentTopic(Object topicObject){  if (topicObject == null) {    throw new IllegalArgumentException(LocalizedStrings.Collaboration_TOPIC_MUST_BE_SPECIFIED.toLocalizedString());  }synchronized (this.topicsQueue) {    if (this.currentTopic == null) {      return false;    }    return this.currentTopic.getTopicObject().equals(topicObject);  }}  }
class C{  @Override public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public SeriesAttributes addSeries(final XYSeries series,final SeriesChangeListener stopper){  XYSeriesCollection xysc=(XYSeriesCollection)getSeriesDataset();  int i=xysc.getSeriesCount();  series.setKey(new ChartGenerator.UniqueString(series.getKey()));  xysc.addSeries(series);  TimeSeriesAttributes csa=new TimeSeriesAttributes(this,series,i,stopper);  seriesAttributes.add(csa);  revalidate();  return csa;}  }
class C{  public void addTable(final String tableName){  entireTables.add(tableName);}  }
class C{  public void assertEquals(byte[] expected,byte[] actual){  if (expected == null || actual == null) {    assertTrue(expected == actual);    return;  }  assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    if (expected[i] != actual[i]) {      fail("[" + i + "]: expected: "+ (int)expected[i]+ " actual: "+ (int)actual[i]);    }  }}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void applyStyle(int resid,boolean force){  AssetManager.applyThemeStyle(mTheme,resid,force);}  }
class C{  public JSONObject put(String name,long value){  put(name,JSON.value(value));  return this;}  }
class C{  private void updateFromSystemSensorManager(){  Sensor.SensorState sensorState=Sensor.SensorState.NONE;  Sensor.SensorDataSet sensorDataSet=null;  ITrackRecordingService trackRecordingService=trackRecordingServiceConnection.getServiceIfBound();  if (trackRecordingService == null) {    Log.d(TAG,"Cannot get teh track recording service.");  } else {    try {      sensorState=Sensor.SensorState.valueOf(trackRecordingService.getSensorState());    } catch (    RemoteException e) {      Log.e(TAG,"Cannote read sensor state.",e);      sensorState=Sensor.SensorState.NONE;    }    try {      byte[] buff=trackRecordingService.getSensorData();      if (buff != null) {        sensorDataSet=Sensor.SensorDataSet.parseFrom(buff);      }    } catch (    RemoteException e) {      Log.e(TAG,"Cannot read sensor data set.",e);    }catch (    InvalidProtocolBufferException e) {      Log.e(TAG,"Cannot read sensor data set.",e);    }  }  updateSensorStateAndDataSet(sensorState,sensorDataSet);}  }
class C{  public static boolean isSubTypeOfIncluding(Type child,Type parent){  if (child.equals(parent))   return true; else   if (child instanceof NullType || parent instanceof NullType)   return true; else   if (parent instanceof PrimType) {    if (isIntegral(parent) && isIntegral(child))     return true;    return parent.equals(child);  } else   if (child instanceof ArrayType && parent instanceof RefType && ((RefType)parent).getSootClass().equals(Scene.v().getSootClass("java.lang.Object"))) {    return true;  } else   if (parent instanceof ArrayType && child instanceof ArrayType) {    return isSubTypeOfIncluding(((ArrayType)child).getElementType(),((ArrayType)parent).getElementType());  } else   if (parent instanceof RefType && child instanceof RefType) {    SootClass pClass=((RefType)parent).getSootClass();    SootClass cClass=((RefType)child).getSootClass();    Set<SootClass> parents=getParents(cClass);    return parents.contains(pClass);  } else   if (parent instanceof VoidType && child instanceof VoidType) {    return true;  } else {    return false;  }}  }
class C{  private void updateDatabase(int fromDatabaseVersion,SQLiteDatabase db) throws SQLiteException {  try {    while (fromDatabaseVersion < DATABASE_VERSION) {switch (fromDatabaseVersion) {case 6:        updateDatabaseFrom6(db);      break;  }  fromDatabaseVersion++;}Log.d(TAG,"Database has been updated to the last version.");} catch (SQLiteException exc) {Log.e(TAG,"Database has failed to update to the last version.");throw exc;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.900 -0500",hash_original_method="6B42F025815F6D5CF3C9CA43230A22B6",hash_generated_method="6B42F025815F6D5CF3C9CA43230A22B6") JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  private void mergeNotesAndPush(RevWalk revWalk,String refName,RevCommit baseCommit,RevCommit localCommit,RevCommit originCommit) throws GitClientException {  int remainingLockFailureCalls=JgitUtils.MAX_LOCK_FAILURE_CALLS;  while (true) {    try {      NoteMap theirNoteMap=NoteMap.read(revWalk.getObjectReader(),originCommit);      NoteMap ourNoteMap=NoteMap.read(revWalk.getObjectReader(),localCommit);      NoteMap baseNoteMap;      if (baseCommit != null) {        baseNoteMap=NoteMap.read(revWalk.getObjectReader(),baseCommit);      } else {        baseNoteMap=NoteMap.newEmptyMap();      }      NoteMapMerger merger=new NoteMapMerger(repo,new DefaultNoteMerger(),MergeStrategy.RESOLVE);      NoteMap merged=merger.merge(baseNoteMap,ourNoteMap,theirNoteMap);      try (ObjectInserter inserter=repo.newObjectInserter()){        RevCommit mergeCommit=createNotesCommit(merged,inserter,revWalk,"Merged note commits\n",localCommit,originCommit);        RefUpdate update=JgitUtils.updateRef(repo,mergeCommit,localCommit,refName);        Result result=update.update();        if (result == Result.LOCK_FAILURE) {          if (--remainingLockFailureCalls > 0) {            Thread.sleep(JgitUtils.SLEEP_ON_LOCK_FAILURE_MS);          } else {            throw new GitClientException("Failed to lock the ref: " + refName);          }        } else         if (result == Result.REJECTED) {          throw new GitClientException("Rejected update to " + refName + ", this is unexpected");        } else         if (result == Result.IO_FAILURE) {          throw new GitClientException("I/O failure merging notes");        } else {          break;        }      }     } catch (    Exception e) {      throw new GitClientException("Error merging notes commits",e);    }  }  try {    pushCommentsAndReviews();  } catch (  Exception e) {    throw new GitClientException("Error pushing merge commit",e);  }}  }
class C{  public static boolean isValidKSideCastle(String san){  return san.equals("O-O");}  }
class C{  public void storeProperties(@Nullable Map<String,String> newProperties) throws IOException {  if (newProperties != null && !newProperties.isEmpty()) {    Path storageFile=getStorageFile().orElse(createStorage());    Properties properties=loadProperties(storageFile);    for (    Map.Entry<String,String> entry : newProperties.entrySet()) {      properties.put(entry.getKey(),entry.getValue());    }    try (OutputStream out=new BufferedOutputStream(newOutputStream(storageFile))){      properties.store(out,null);    }   }}  }
class C{  public void updateHamTokens(Connection conn) throws java.sql.SQLException {  updateTokens(conn,getHamTokenCounts(),sqlQueries.getSqlString("insertHamToken",true),sqlQueries.getSqlString("updateHamToken",true));  setMessageCount(conn,sqlQueries.getSqlString("updateHamMessageCounts",true),getHamMessageCount());}  }
class C{  public HousePortal(final String doorId){  super("The door is locked.");  setRPClass(RPCLASS_NAME);  put("type","house_portal");  put(DOOR_ID,doorId);  put(OWNER,"");  put(LOCK_NUMBER,0);  store();}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.097 -0500",hash_original_method="5A9A40099BD4C3938AFF91F9B1097812",hash_generated_method="9BD1637300A18F5DCD6CAE440482C7C2") public WeakReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  public Boolean isTpmSupported(){  return tpmSupported;}  }
class C{  @Override public String toString(){  return "RegionAttributesData [asyncConflationEnabled=" + asyncConflationEnabled + ", cacheListeners="+ Arrays.toString(cacheListeners)+ ", cacheLoaderClassName="+ cacheLoaderClassName+ ", cacheWriterClassName="+ cacheWriterClassName+ ", cloningEnabled="+ cloningEnabled+ ", compressorClassName="+ compressorClassName+ ", concurrencyLevel="+ concurrencyLevel+ ", customEntryIdleTimeout="+ customEntryIdleTimeout+ ", customEntryTimeToLive="+ customEntryTimeToLive+ ", dataPolicy="+ dataPolicy+ ", diskStoreName="+ diskStoreName+ ", diskSynchronous="+ diskSynchronous+ ", entryIdleTimeout="+ entryIdleTimeout+ ", entryTimeToLive="+ entryTimeToLive+ ", ignoreJTA="+ ignoreJTA+ ", indexMaintenanceSynchronous="+ indexMaintenanceSynchronous+ ", initialCapacity="+ initialCapacity+ ", interestPolicy="+ interestPolicy+ ", keyConstraintClassName="+ keyConstraintClassName+ ", loadFactor="+ loadFactor+ ", lockGrantor="+ lockGrantor+ ", multicastEnabled="+ multicastEnabled+ ", offHeap="+ offHeap+ ", poolName="+ poolName+ ", regionIdleTimeout="+ regionIdleTimeout+ ", regionTimeToLive="+ regionTimeToLive+ ", scope="+ scope+ ", statisticsEnabled="+ statisticsEnabled+ ", subscriptionConflationEnabled="+ subscriptionConflationEnabled+ ", valueConstraintClassName="+ valueConstraintClassName+ "]";}  }
class C{  public MandatoryWarningHandler(Log log,boolean verbose,boolean enforceMandatory,String prefix,LintCategory lc){  this.log=log;  this.verbose=verbose;  this.prefix=prefix;  this.enforceMandatory=enforceMandatory;  this.lintCategory=lc;}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(hashCode());  viewHolder.itemView.setSelected(isSelected());  viewHolder.itemView.setEnabled(isEnabled());  viewHolder.itemView.setTag(this);  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  ColorStateList selectedTextColor=getTextColorStateList(color,getSelectedTextColor(ctx));  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,UIUtils.getSelectableBackground(ctx,selectedColor,true));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(selectedTextColor);  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,selectedTextColor);  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  Drawable icon=ImageHolder.decideIcon(getIcon(),ctx,iconColor,isIconTinted(),1);  if (icon != null) {    Drawable selectedIcon=ImageHolder.decideIcon(getSelectedIcon(),ctx,selectedIconColor,isIconTinted(),1);    ImageHolder.applyMultiIconTo(icon,iconColor,selectedIcon,selectedIconColor,isIconTinted(),viewHolder.icon);  } else {    ImageHolder.applyDecidedIconOrSetGone(getIcon(),viewHolder.icon,iconColor,isIconTinted(),1);  }  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view,level);}  }
class C{  protected boolean home(TextView widget,Spannable buffer){  return false;}  }
class C{  public RangeSelectorHelper withSavedInstanceState(Bundle savedInstanceState,String prefix){  if (savedInstanceState != null && savedInstanceState.containsKey(BUNDLE_LAST_LONG_PRESS))   mLastLongPressIndex=savedInstanceState.getInt(BUNDLE_LAST_LONG_PRESS);  return this;}  }
class C{  public boolean performOperation(int generation){  return true;}  }
class C{  public void authenticate(String username,String host,CallbackHandler cbh) throws IOException, XMPPException {  String[] mechanisms={getName()};  Map<String,String> props=new HashMap<String,String>();  props.put(Sasl.SERVER_AUTH,"TRUE");  sc=Sasl.createSaslClient(mechanisms,username,"xmpp",host,props,cbh);  authenticate();}  }
class C{  public CannotParseException(int code,Object... args){  this(Messages.INSTANCE.getParseMessage(code,args));}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  throw new UnsupportedOperationException();}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException();  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  private void listAllWorksheets() throws IOException, ServiceException {  WorksheetFeed worksheetFeed=service.getFeed(worksheetFeedUrl,WorksheetFeed.class);  for (  WorksheetEntry worksheet : worksheetFeed.getEntries()) {    String title=worksheet.getTitle().getPlainText();    int rowCount=worksheet.getRowCount();    int colCount=worksheet.getColCount();    System.out.println("\t" + title + " - rows:"+ rowCount+ " cols: "+ colCount);  }}  }
class C{  public void invalidate(long newFileSize){  if (newFileSize < fileSize) {    fileSize=newFileSize;    counters.clear();    blockSize=calcBlockSize(fileSize);  } else   if (newFileSize > fileSize)   compact(newFileSize);}  }
class C{  @Override Map<String,Object> extractFields(String line){  try {    return reader.readValue(line);  } catch (  IOException e) {    logger.error("Exception while extracting fields {}",e);  }  return null;}  }
class C{  public TVariable basicGetDefinedVariable(){  return definedVariable;}  }
class C{  public static List<Transaction> parseTransactionsFromPaymentMessage(NetworkParameters params,Protos.Payment paymentMessage){  final List<Transaction> transactions=new ArrayList<Transaction>(paymentMessage.getTransactionsCount());  for (  final ByteString transaction : paymentMessage.getTransactionsList())   transactions.add(params.getDefaultSerializer().makeTransaction(transaction.toByteArray()));  return transactions;}  }
class C{  public frame addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private Pointer(NativePointerObject pointers[]){  buffer=null;  this.pointers=pointers;  byteOffset=0;}  }
class C{  public BaseStringCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseStringCollectionResponse.class,IStringCollectionPage.class);}  }
class C{  public void virtualViewToWorkspaceDelta(ViewPoint viewPointIn,WorkspacePoint workspacePointOut){  workspacePointOut.set((mRtl ? -1 : 1) * virtualViewToWorkspaceUnits(viewPointIn.x),virtualViewToWorkspaceUnits(viewPointIn.y));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public NbtTagString(){}  }
class C{  private static String dblString(double decimalValue,int availableSpace){  return dblString(BigDecimal.valueOf(decimalValue),-1,availableSpace);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public void addReference(SequencesReader reference){  final SdfId sdfId=reference.getSdfId();  if (sdfId != null && sdfId.available()) {    addLine(VcfHeader.META_STRING + "TEMPLATE-SDF-ID=" + sdfId);  }  addLine(VcfHeader.META_STRING + "reference=" + reference.path());}  }
class C{  public void forEach(Action1<? super T> action){  for (  T value : this)   action.call(value);}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public HeadingSensor(SensorManager sensorManager){  mSensorManager=sensorManager;  mAccelerometerSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  mMagneticSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);}  }
class C{  public TDoubleFloatHashMap(TDoubleHashingStrategy strategy){  super(strategy);}  }
class C{  public NovaLauncher(DependencyInjectionEntryPoint diep,Set<Class<?>> modClasses){  super(Mod.class,diep,modClasses);  javaClasses.keySet().stream().flatMap(null).forEach(null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void specifyAmbiguousValues(JCas jcas){  List<Timex3> linearDates=new ArrayList<Timex3>();  FSIterator iterTimex=jcas.getAnnotationIndex(Timex3.type).iterator();  while (iterTimex.hasNext()) {    Timex3 timex=(Timex3)iterTimex.next();    if (timex.getTimexType().equals("DATE") || timex.getTimexType().equals("TIME")) {      linearDates.add(timex);    }    if (timex.getTimexType().equals("DURATION") && !timex.getEmptyValue().equals("")) {      linearDates.add(timex);    }  }  for (int i=0; i < linearDates.size(); i++) {    Timex3 t_i=(Timex3)linearDates.get(i);    String value_i=t_i.getTimexValue();    String valueNew=value_i;    if (t_i.getTimexType().equals("TIME") || t_i.getTimexType().equals("DATE"))     valueNew=specifyAmbiguousValuesString(value_i,t_i,i,linearDates,jcas);    if (t_i.getEmptyValue() != null && t_i.getEmptyValue().length() > 0) {      String emptyValueNew=specifyAmbiguousValuesString(t_i.getEmptyValue(),t_i,i,linearDates,jcas);      t_i.setEmptyValue(emptyValueNew);    }    t_i.removeFromIndexes();    Logger.printDetail(t_i.getTimexId() + " DISAMBIGUATION PHASE: foundBy:" + t_i.getFoundByRule()+ " text:"+ t_i.getCoveredText()+ " value:"+ t_i.getTimexValue()+ " NEW value:"+ valueNew);    t_i.setTimexValue(valueNew);    t_i.addToIndexes();    linearDates.set(i,t_i);  }}  }
class C{  public void update(int index,int value){  if (index < 0 || index >= size) {    throw new ArrayIndexOutOfBoundsException("Index " + index + " out of range.");  }  index+=1;  while (index <= size) {    BITree[index]+=value;    index+=index & (-index);  }}  }
class C{  public TabbedPreferencesAction(String s,String category,String subCategory){  super(s);  preferencesItem=category;  preferenceSubCat=subCategory;}  }
class C{  public static TitledBorder createTitledBorder(String title){  return new TitledBorder(title);}  }
class C{  private void unSSAGuardsFinalize(IR ir){  DefUse.computeDU(ir);  for (Register r=ir.regpool.getFirstSymbolicRegister(); r != null; r=r.getNext()) {    if (!r.isValidation())     continue;    Register nreg=guardFind(r);    Enumeration<RegisterOperand> uses=DefUse.uses(r);    while (uses.hasMoreElements()) {      RegisterOperand use=uses.nextElement();      use.setRegister(nreg);    }    Enumeration<RegisterOperand> defs=DefUse.defs(r);    while (defs.hasMoreElements()) {      RegisterOperand def=defs.nextElement();      def.setRegister(nreg);    }  }  Instruction inst=guardPhis;  while (inst != null) {    inst.remove();    inst=inst2guardPhi.get(inst);  }}  }
class C{  public boolean visit(Modifier node){  return true;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public static void pushParameter(long o){  parametersLong.push(o);}  }
class C{  public SequenceCollection(Collection<Sequence> initialSequences){  if (initialSequences == null)   throw new IllegalArgumentException("initialSequences is null.");  this.sequenceMap=new LinkedHashMap<>();  this.typeSet=new SubTypeSet(false);  sequenceCount=0;  addAll(initialSequences);  checkRep();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  newVector.addElement("measureTreeSize");  newVector.addElement("measureNumLeaves");  newVector.addElement("measureMaxDepth");  if (m_Stats != null) {    newVector.addAll(Collections.list(m_Stats.enumerateMeasures()));  }  return newVector.elements();}  }
class C{  public synchronized int read(byte b[],int off,int len) throws IOException {  ensureOpen();  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int avail=chunkCount - chunkPos;  if (avail <= 0) {    if (state == STATE_READING_CHUNK) {      return fastRead(b,off,len);    }    avail=readAhead(true);    if (avail < 0) {      return -1;    }  }  int cnt=(avail < len) ? avail : len;  System.arraycopy(chunkData,chunkPos,b,off,cnt);  chunkPos+=cnt;  return cnt;}  }
class C{  public Cube(){  final float vertices[]={-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1};  final float colors[]={0,0,0,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1};  final byte indices[]={0,4,5,0,5,1,1,5,6,1,6,2,2,6,7,2,7,3,3,7,4,3,4,0,4,7,6,4,6,5,3,0,1,3,1,2};  ByteBuffer vbb=ByteBuffer.allocateDirect(vertices.length * 4);  vbb.order(ByteOrder.nativeOrder());  mVertexBuffer=vbb.asFloatBuffer();  mVertexBuffer.put(vertices);  mVertexBuffer.position(0);  ByteBuffer cbb=ByteBuffer.allocateDirect(colors.length * 4);  cbb.order(ByteOrder.nativeOrder());  mColorBuffer=cbb.asFloatBuffer();  mColorBuffer.put(colors);  mColorBuffer.position(0);  mIndexBuffer=ByteBuffer.allocateDirect(indices.length);  mIndexBuffer.put(indices);  mIndexBuffer.position(0);}  }
class C{  public TxRequest16(XBeeAddress16 remoteAddr16,int frameId,int[] payload){  this(remoteAddr16,frameId,Option.UNICAST,payload);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof StrBuilder) {    return equals((StrBuilder)obj);  }  return false;}  }
class C{  public StunClientTransaction(StunStack stackCallback,Request request,TransportAddress requestDestination,TransportAddress localAddress,ResponseCollector responseCollector){  this(stackCallback,request,requestDestination,localAddress,responseCollector,TransactionID.createNewTransactionID());}  }
class C{  protected Query newTermQuery(Term term){  return new TermQuery(term);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public int locations(){  int retVal=Math.round(getTroopers());  if (retVal == 0) {    if (!isInitialized) {      retVal=6 + 1;    } else     if (isClan()) {      retVal=5 + 1;    } else {      retVal=4 + 1;    }  } else {    retVal++;  }  return retVal;}  }
class C{  public void dispose(){  detach();}  }
class C{  public static float clampf(float value,float min_inclusive,float max_inclusive){  if (min_inclusive > max_inclusive) {    float tmp=min_inclusive;    min_inclusive=max_inclusive;    max_inclusive=tmp;  }  return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;}  }
class C{  protected TypeQualifierAnnotation combine(TypeQualifierAnnotation a,TypeQualifierAnnotation b){  return null;}  }
class C{  protected String stringWithoutHeader(){  StringBuffer text=new StringBuffer();  for (int i=0; i < numInstances(); i++) {    text.append(instance(i));    if (i < numInstances() - 1) {      text.append('\n');    }  }  return text.toString();}  }
class C{  private Instruction locateInstr(int index,int mini,int maxi){  int mid=(maxi - mini) / 2 + mini;  if (mini > maxi)   return null;  if (instructions[mid].label == index)   return instructions[mid];  if (instructions[mid].label > index)   return locateInstr(index,mini,mid - 1);  return locateInstr(index,mid + 1,maxi);}  }
class C{  public void saveSettings(final JFrame parent){  final Point location=parent.getLocation();  final GeneralSettingsConfigItem.LastOpenWindowConfigItem window=generalSettings.getLastOpenWindow();  window.setTop((int)location.getY());  window.setLeft((int)location.getX());  window.setHeight(parent.getHeight());  window.setWidth(parent.getWidth());  generalSettings.setMaximizeWindow((parent.getExtendedState() == Frame.ICONIFIED) || (parent.getExtendedState() == Frame.MAXIMIZED_BOTH));  databases.clear();  for (  final IDatabase database : CDatabaseManager.instance()) {    final DatabaseConfigItem databaseConfig=new DatabaseConfigItem();    databaseConfig.setAutoConnect(database.getConfiguration().isAutoConnect());    databaseConfig.setDescription(database.getConfiguration().getDescription());    databaseConfig.setDriver(database.getConfiguration().getDriver());    databaseConfig.setPassword(database.getConfiguration().isSavePassword() ? database.getConfiguration().getPassword() : "");    databaseConfig.setSavePassword(database.getConfiguration().isSavePassword());    databaseConfig.setHost(database.getConfiguration().getHost());    databaseConfig.setName(database.getConfiguration().getName());    databaseConfig.setUser(database.getConfiguration().getUser());    databaseConfig.setIdentity(database.getConfiguration().getIdentity());    databases.add(databaseConfig);  }  try {    write();  } catch (  final FileWriteException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00150: " + "Could not write configuration file";    final String innerDescription=CUtilityFunctions.createDescription("The configuration file where the settings are stored could not be written.",new String[]{"There was a problem writing the file. Please see the stacktrace for more " + "information."},new String[]{"The active configuration was not saved and will be lost."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public <T>TStream<T> traceStream(TStream<T> stream,String sensorId,Supplier<String> label){  return traceStream(stream,null);}  }
class C{  private DataType fromExternalToWrapperDataType(org.carbondata.format.DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return DataType.STRING;case INT:  return DataType.INT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    delta=getHighestChildTop() - getListPaddingTop();    if (delta < 0) {      delta=0;    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static boolean validate(Subscription current,Subscription next){  Objects.requireNonNull(next,"Subscription cannot be null");  if (current != null) {    next.cancel();    return false;  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.INT_LITERAL;}  }
class C{  public ToHitData toHit(IGame game){  return toHit(game,getEntityId(),game.getTarget(getTargetType(),getTargetId()));}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public void printTable(HardcopyWriter w,int colWidth[]){  int[] columnSize=new int[4];  int charPerLine=w.getCharactersPerLine();  int tableLineWidth=0;  int totalColWidth=0;  for (int j=0; j < 4; j++) {    totalColWidth+=colWidth[j];  }  float ratio=((float)charPerLine) / ((float)totalColWidth);  for (int j=0; j < 4; j++) {    columnSize[j]=((int)(colWidth[j] * ratio)) - 1;    tableLineWidth+=(columnSize[j] + 1);  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] columnStrings=new String[4];  for (int i=0; i < 4; i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] spaces=new String[4];  for (int k=0; k < 4; k++) {    spaces[k]="";    for (int i=0; i < columnSize[k]; i++) {      spaces[k]=spaces[k] + " ";    }  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < 4; j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces[j];      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  }  w.close();}  }
class C{  private NodeList nodes(Node root,String xpathExpr){  try {    return (NodeList)xpath().evaluate(xpathExpr,root,XPathConstants.NODESET);  } catch (  XPathExpressionException e) {    throw new RuntimeException(e);  }}  }
class C{  public static String shortFormat(Date dt){  return createDateFormatter().shortFormat(dt);}  }
class C{  public <E extends GenericEvent>Event waitFor(@NonNull List<Class<? extends E>> eventClasses) throws InterruptedException {  return waitFor(eventClasses,Long.MAX_VALUE,TimeUnit.MILLISECONDS);}  }
class C{  public RestoreRevisionDialog(PanboxClient client,ICSPAPIIntegration apiInt,String shareName,String pathInsideShare){  initComponents();  this.client=client;  this.apiInt=apiInt;  this.shareName=shareName;  fileTextField.setText(File.separator + shareName + pathInsideShare);  fillRevisionsForFileName(pathInsideShare);}  }
class C{  protected JvmRTLibraryPathTableMeta createJvmRTLibraryPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTLibraryPathTableMeta(mib,objectserver);}  }
class C{  public boolean constraintsMet(){  return TextUtils.isEmpty(mConstraintViolationSummary);}  }
class C{  void emitPropertyValueAliasesArray(PrintWriter writer){  writer.append("  public static final String[] propertyValueAliases").append(" = {\n        ");  int count=0;  boolean isFirstLine=true;  for (  SortedMap.Entry<String,String> entry : getUsedPropertyValueAliases().entrySet()) {    if (++count > PROPERTY_VALUE_ALIAS_MAPPINGS_PER_LINE) {      writer.append(",\n        ");      count=1;    } else     if (!isFirstLine) {      writer.append(",   ");    } else {      isFirstLine=false;    }    String alias=entry.getKey();    String propertyValue=entry.getValue();    writer.append("\"").append(alias).append("\", \"").append(propertyValue).append("\"");  }  writer.append("\n  };\n");}  }
class C{  public static int negativeExtend(int numBits,int value){  int mask=(1 << numBits) - 1;  return ~mask | value;}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(table.length);  s.writeInt(count);  for (int index=table.length - 1; index >= 0; index--) {    Entry entry=table[index];    while (entry != null) {      s.writeObject(entry.key);      s.writeObject(entry.value);      entry=entry.next;    }  }}  }
class C{  private CReilInstructionDialog(final Window parent,final String title,final String text) throws InternalTranslationException {  super(parent,title);  m_textArea=new JTextArea(text);  m_textArea.setEditable(false);  m_textArea.setFont(GuiHelper.MONOSPACED_FONT);  m_textArea.addMouseListener(new PopupListener());  addMenuBar();  setLayout(new BorderLayout());  add(new JScrollPane(m_textArea));  setSize(500,300);}  }
class C{  public void testEmptyHandler() throws Exception {  testDefaultConfiguration();  try {    Callback[] callbacks=new Callback[]{new NameCallback("test")};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new NameCallback("test"),new PasswordCallback("test",false)};    factory.handle(callbacks);    fail();  } catch (  NullPointerException expected) {  }  try {    Callback[] callbacks=new Callback[]{new TextInputCallback("test")};    factory.handle(callbacks);    fail();  } catch (  UnsupportedCallbackException expected) {  }}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=Math.log(((area[col]) / (Math.tan(Math.toRadians(slope[col])))));          } else {            z=areaNoData;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.915 -0500",hash_original_method="3F6686FAC1641E4D3DFFC3F0DB33E5B2",hash_generated_method="216981D45436EB231A375BC2B77503BC") protected boolean top(TextView widget,Spannable buffer){  return false;}  }
class C{  @Override public void visitStmt2R1N(Op op,int distReg,int srcReg,int content){  if (op.format == kFmt22s) {    ops.add(new PreBuildInsn(build22s(op,distReg,srcReg,content)));  } else   if (op.format == kFmt22b) {    ops.add(new PreBuildInsn(build22b(op,distReg,srcReg,content)));  } else {  }}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public final static boolean groupButtonsShareSize(){  if (WindowSystem.isCurrentWindowSystem(WindowSystem.AQUA)) {    return true;  }  return false;}  }
class C{  public static <T>HashSet<T> hashSet(){  return new HashSet<T>();}  }
class C{  public void addBatch(Tuple tuple){  tupleBatch.add(tuple);  if (tupleBatch.size() >= batchSize) {    forceFlush=true;  }}  }
class C{  public <T>List<ValidationRemark> validateModel(T model,boolean throwOnError){  try {    TableInspector inspector=getTable(model);    inspector.read(metaData);    @SuppressWarnings("unchecked") Class<T> clazz=(Class<T>)model.getClass();    TableDefinition<T> def=db.define(clazz);    return inspector.validate(def,throwOnError);  } catch (  SQLException s) {    throw new RuntimeException(s);  }}  }
class C{  public static void matrixMult(MatrixBlock m1,MatrixBlock m2,MatrixBlock ret) throws DMLRuntimeException {  matrixMult(m1,m2,ret,0,m1.rlen);}  }
class C{  public void subtract(){  if (getChildren().size() > 0) {    ArrayList<Node> nodes=new ArrayList(getChildren());    ArrayList<Ball> balls=new ArrayList(nodes);    getChildren().remove(Collections.max(balls));  }}  }
class C{  public void testInconsistentTermVectorOptions() throws IOException {  FieldType a, b;  a=new FieldType(TextField.TYPE_NOT_STORED);  b=new FieldType(TextField.TYPE_NOT_STORED);  b.setStoreTermVectors(true);  doTestMixup(a,b);  a=new FieldType(TextField.TYPE_NOT_STORED);  a.setStoreTermVectors(true);  b=new FieldType(TextField.TYPE_NOT_STORED);  b.setStoreTermVectors(true);  b.setStoreTermVectorPositions(true);  doTestMixup(a,b);  a=new FieldType(TextField.TYPE_NOT_STORED);  a.setStoreTermVectors(true);  b=new FieldType(TextField.TYPE_NOT_STORED);  b.setStoreTermVectors(true);  b.setStoreTermVectorOffsets(true);  doTestMixup(a,b);  a=new FieldType(TextField.TYPE_NOT_STORED);  a.setStoreTermVectors(true);  a.setStoreTermVectorPositions(true);  b=new FieldType(TextField.TYPE_NOT_STORED);  b.setStoreTermVectors(true);  b.setStoreTermVectorPositions(true);  b.setStoreTermVectorOffsets(true);  doTestMixup(a,b);  a=new FieldType(TextField.TYPE_NOT_STORED);  a.setStoreTermVectors(true);  a.setStoreTermVectorPositions(true);  b=new FieldType(TextField.TYPE_NOT_STORED);  b.setStoreTermVectors(true);  b.setStoreTermVectorPositions(true);  b.setStoreTermVectorPayloads(true);  doTestMixup(a,b);}  }
class C{  private final static String canClaimDraw(Position pos,long[] posHashList,int posHashListSize,Move move){  String drawStr="";  if (canClaimDraw50(pos)) {    drawStr="draw 50";  } else   if (canClaimDrawRep(pos,posHashList,posHashListSize,posHashListSize)) {    drawStr="draw rep";  } else   if (move != null) {    String strMove=TextIO.moveToString(pos,move,false,false);    posHashList[posHashListSize++]=pos.zobristHash();    UndoInfo ui=new UndoInfo();    pos.makeMove(move,ui);    if (canClaimDraw50(pos)) {      drawStr="draw 50 " + strMove;    } else     if (canClaimDrawRep(pos,posHashList,posHashListSize,posHashListSize)) {      drawStr="draw rep " + strMove;    }    pos.unMakeMove(move,ui);  }  return drawStr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.088 -0500",hash_original_method="E93BEE50684598E86CF4860142BFC855",hash_generated_method="5E58DC0AD70210253ADAC11CE7F86386") @DSSafe(DSCat.SAFE_OTHERS) public void close() throws IOException {  super.close();  __socket.close();}  }
class C{  public final int chooseIndex(){  int minIndex=-1;  double estimated, min=Double.MAX_VALUE;  int i, j;  for (i=0; i < m_sons.length; i++) {    if (son(i) == null) {      if (Utils.sm(localModel().distribution().perBag(i),m_minNumObj)) {        estimated=Double.MAX_VALUE;      } else {        estimated=0;        for (j=0; j < localModel().distribution().numClasses(); j++) {          estimated-=m_splitCrit.lnFunc(localModel().distribution().perClassPerBag(i,j));        }        estimated+=m_splitCrit.lnFunc(localModel().distribution().perBag(i));        estimated/=(localModel().distribution().perBag(i) * ContingencyTables.log2);      }      if (Utils.smOrEq(estimated,0)) {        return i;      }      if (Utils.sm(estimated,min)) {        min=estimated;        minIndex=i;      }    }  }  return minIndex;}  }
class C{  public boolean doTransaction(DB db,Object threadstate) throws WorkloadException {  boolean ret=true;  long st=System.nanoTime();  String op=operationchooser.nextString();  if (op.compareTo("READ") == 0) {    ret=doTransactionRead(db);  } else   if (op.compareTo("UPDATE") == 0) {    ret=doTransactionUpdate(db);  } else   if (op.compareTo("INSERT") == 0) {    ret=doTransactionInsert(db);  } else   if (op.compareTo("SCAN") == 0) {    ret=doTransactionScan(db);  } else {    ret=doTransactionReadModifyWrite(db);  }  long en=System.nanoTime();  _measurements.measure(_operations.get(op),(int)((en - st) / 1000));  if (ret)   _measurements.reportReturnCode(_operations.get(op),-1); else {    _measurements.reportReturnCode(_operations.get(op),0);  }  actualopcount.addAndGet(1);  return ret;}  }
class C{  public Photo(String url,ImageType type){  super(url,type);}  }
class C{  public SessionWrapper(Session ses){  this.ses=ses;  this.time=System.currentTimeMillis();}  }
class C{  @Override public Integer read(){  if (isEnSet() && isMod1TxeSet() && isMod1FdpxTxSet()) {    return getTxValue();  } else {    if (!isEnSet()) {      if (logSerialMessages)       System.out.println(getName() + " is disabled. Returning null.");    } else     if (!isMod1TxeSet()) {      if (logSerialMessages)       System.out.println("TX is disabled on " + getName() + ". Returning null.");    } else {      if (logSerialMessages)       System.out.println("Duplex mode on " + getName() + " is "+ getMod1Fdpx()+ ". Returning null.");    }    return null;  }}  }
class C{  public static Color deriveDarker(Color color){  return deriveWithAlpha(blend(color,Color.BLACK,0.5),color.getAlpha());}  }
class C{  public RangeBarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer,type);}  }
class C{  public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public void append(final String s){  if (first) {    first=false;  } else {    builder.append(space);  }  builder.append(s);}  }
class C{  public void validate(FacesContext facesContext,UIComponent uiComponent,Object value) throws ValidatorException {  if (value == null) {    return;  }  BigDecimal valueBigDecimal=(BigDecimal)value;  BigDecimal maxValue=new BigDecimal("100.00");  BigDecimal minValue=new BigDecimal("0");  if (valueBigDecimal.scale() > MAXIMUM_FRACTION_DIGIT) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_DISCOUNT_INVALID_FRACTIONAL_PART);    throw new ValidatorException(facesMessage);  }  if (valueBigDecimal.compareTo(maxValue) == 1) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_DISCOUNT_VALUE);    throw new ValidatorException(facesMessage);  }  if (valueBigDecimal.compareTo(minValue) == -1 || valueBigDecimal.compareTo(minValue) == 0) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_DISCOUNT_VALUE);    throw new ValidatorException(facesMessage);  }}  }
class C{  @AfterSuite(alwaysRun=true,groups={"Android","iOS"}) public void createIndexFile(ITestContext testContext) throws IOException {  String root=PropertyLoader.loadProperty("output.path").get();  testLogger.info("report path " + root);  int pathLevel=root.split("/").length;  String reportFolder=root.split("/")[pathLevel - 1];  int numberOfPassedTests=testContext.getPassedTests().size();  int numberOfFailedTests=testContext.getFailedTests().size();  int numberOfSkippedTests=testContext.getSkippedTests().size();  String summaryFileName="runSummary.csv";  String summaryFilePath=root + "/..";  String summaryReport=reportFolder + "," + numberOfPassedTests+ ","+ numberOfFailedTests+ ","+ numberOfSkippedTests;  FileGenerator.appendTextToBeginingOfFile(summaryFilePath,summaryFileName,summaryReport);  testLogger.info(reportFolder);  testLogger.info("Passed: " + numberOfPassedTests);  testLogger.info("Failed: " + numberOfFailedTests);  testLogger.info("Skipped: " + numberOfSkippedTests);  FileGenerator.generateBarGraphIndexHTML(summaryFilePath);  String parentFolder=root + "/../..";  for (int i=1; i < pathLevel; i++) {    FileGenerator.generateIndexHTML(parentFolder.toString());    parentFolder=parentFolder + "/..";  }}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  try {    return Aes128.calculateChecksum(key,usage,data,0,size);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  double C(){  int N=data.size();  double C=0.0;  int i=0;  while (i < N) {    int j=i + 1;    while ((j < N) && (data.get(i).getValue() == data.get(j).getValue())) {      j++;    }    C+=Math.pow(j - i,3.0) - (j - i);    i=j;  }  return 1 - C / (Math.pow(N,3.0) - N);}  }
class C{  public DenseObjectMatrix3D(Object[][][] values){  this(values.length,(values.length == 0 ? 0 : values[0].length),(values.length == 0 ? 0 : values[0].length == 0 ? 0 : values[0][0].length));  assign(values);}  }
class C{  static long readCRC(IndexInput input) throws IOException {  long value=input.readLong();  if ((value & 0xFFFFFFFF00000000L) != 0) {    throw new CorruptIndexException("Illegal CRC-32 checksum: " + value,input);  }  return value;}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView webView,String url){  if (url.startsWith(WebView.SCHEME_TEL)) {    try {      Intent intent=new Intent(Intent.ACTION_DIAL);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);      return true;    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error dialing " + url + ": "+ e.toString());    }  } else   if (url.startsWith("geo:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith("market:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);      return true;    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error with " + url + ": "+ e.toString());    }  } else   if (url.startsWith("sms:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      String address=null;      int parmIndex=url.indexOf('?');      if (parmIndex == -1) {        address=url.substring(4);      } else {        address=url.substring(4,parmIndex);        Uri uri=Uri.parse(url);        String query=uri.getQuery();        if (query != null) {          if (query.startsWith("body=")) {            intent.putExtra("sms_body",query.substring(5));          }        }      }      intent.setData(Uri.parse("sms:" + address));      intent.putExtra("address",address);      intent.setType("vnd.android-dir/mms-sms");      cordova.getActivity().startActivity(intent);      return true;    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error sending sms " + url + ":"+ e.toString());    }  }  return false;}  }
class C{  public void populate(final LayerDefinition objectsLayer){  objectsLayer.build();  for (int yTemp=0; yTemp < objectsLayer.getHeight(); yTemp++) {    for (int xTemp=0; xTemp < objectsLayer.getWidth(); xTemp++) {      final int value=objectsLayer.getTileAt(xTemp,yTemp);      if (value > 0) {        final TileSetDefinition tileset=objectsLayer.getTilesetFor(value);        createEntityAt(tileset.getSource(),value - tileset.getFirstGid(),xTemp,yTemp);      }    }  }}  }
class C{  public static JFrame showTableWindow(Table t){  JPrefuseTable table=new JPrefuseTable(t);  String title=t.toString();  if (t instanceof VisualTable) {    title=((VisualTable)t).getGroup() + " " + title;  }  JFrame frame=new JFrame(title);  frame.getContentPane().add(new JScrollPane(table));  frame.pack();  frame.setVisible(true);  return frame;}  }
class C{  public static <C extends Comparable<?>>Range<C> upTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  public Object[] process(EventBean[] eventsPerStream,boolean isNewData,ExprEvaluatorContext exprEvaluatorContext){  Object[] parameters=new Object[expressionNodes.length];  for (int i=0; i < parameters.length; i++) {    Object result=expressionNodes[i].evaluate(eventsPerStream,isNewData,exprEvaluatorContext);    parameters[i]=result;  }  return parameters;}  }
class C{  @Override protected int lengthOfByteStream(jmri.jmrix.AbstractMRMessage m){  int len=m.getNumDataElements() + 2;  int cr=0;  if (!m.isBinary()) {    cr=1;  }  return len + cr;}  }
class C{  public void tagSoundStreamHead2(int playbackFrequency,boolean playback16bit,boolean playbackStereo,int streamFormat,int streamFrequency,boolean stream16bit,boolean streamStereo,int averageSampleCount) throws IOException {  if (tags != null) {    tags.tagSoundStreamHead2(playbackFrequency,playback16bit,playbackStereo,streamFormat,streamFrequency,stream16bit,streamStereo,averageSampleCount);  }}  }
class C{  public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs,boolean includeTemplates) throws Draft2ExpressionException {  String trimmedExpr=StringUtils.trim(expr);  String function=expr;  if (trimmedExpr.startsWith("{")) {    function="(function()%expr)()";    function=function.replace("%expr",expr);  }  Context cx=Context.enter();  cx.setOptimizationLevel(OPTIMIZATION_LEVEL);  cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH);  cx.setClassShutter(new Draft2ExpressionDenyAllClassShutter());  try {    Scriptable globalScope=cx.initStandardObjects();    if (includeTemplates) {      Reader templateLibReader=new InputStreamReader(Draft2ExpressionJavascriptResolver.class.getResourceAsStream("underscore-min.js"));      cx.evaluateReader(globalScope,templateLibReader,"underscore-min.js",1,null);    }    if (engineConfigs != null) {      for (int i=0; i < engineConfigs.size(); i++) {        Reader engineConfigReader=new StringReader(engineConfigs.get(i));        cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null);      }    }    putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope);    putToScope(EXPR_SELF_NAME,self,cx,globalScope);    Scriptable resultScope=cx.newObject(globalScope);    resultScope.setPrototype(globalScope);    resultScope.setParentScope(globalScope);    Object result=cx.evaluateString(resultScope,function,"script",1,null);    if (result == null || result instanceof Undefined) {      return null;    }    Object wrappedResult=Context.javaToJS(result,globalScope);    putToScope("$result",wrappedResult,cx,globalScope);    ScriptableObject.putProperty(globalScope,"$result",wrappedResult);    String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \"array\" : typeof result;"+ "           return JSON.stringify({ \"result\" : result, \"type\" : type }); "+ "     })()";    Scriptable wrapScope=cx.newObject(globalScope);    wrapScope.setPrototype(globalScope);    wrapScope.setParentScope(globalScope);    result=cx.evaluateString(wrapScope,finalFunction,"script",1,null);    return castResult(result);  } catch (  Exception e) {    String msg=String.format("Failed evaluating expression %s.",expr);    throw new Draft2ExpressionException(msg,e);  } finally {    Context.exit();  }}  }
class C{  private void enforceRunningRequestLimit(){  _log.debug("runningRequests: " + runningRequests.get());  if (runningRequests.get() >= MAX_THREAD_COUNT) {    _log.error("Current running requests: {} vs maximum allowed {}",runningRequests,MAX_THREAD_COUNT);    throw APIException.serviceUnavailable.logServiceIsBusy();  }}  }
class C{  public Piece(int magnitude,PieceUnit unitType){  this.magnitude=new BigDecimal(magnitude);  this.unitType=unitType;}  }
class C{  public EventType defineEvent(String name,String description){  if (state == State.SHUT_DOWN)   return null;  EventType result=new EventType(name,description);  internalDefineEvent(result);  return result;}  }
class C{  public Path cassandraLocation(){  return conf().resolve(Location.DEFAULT_FILE);}  }
class C{  protected boolean readReceiveDelay(){  try {    receiveDelay=Integer.parseInt(receiveDelayField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error7"));    statusText1.setVisible(true);    receiveDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (receiveDelay < 0) {    statusText1.setText(rb.getString("Error8"));    statusText1.setVisible(true);    receiveDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (receiveDelay > 65535) {    statusText1.setText(rb.getString("Error9"));    statusText1.setVisible(true);    receiveDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  void disableWindowScale(){  m_support_wnd_scale=false;}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  if (isCorrectMethod(method,args)) {    boolean handled=callTarget(args[0]);    setApplicationEventHandled(args[0],handled);  }  return null;}  }
class C{  public boolean equals(Permission another){  return true;}  }
class C{  public static TypeEditorPanel CreateStackFrameEditor(final JFrame owner,final TypeManager typeManager,final INaviFunction function){  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  Preconditions.checkNotNull(function,"Error: function argument can not be null");  return new TypeEditorPanel(owner,TypesTree.createStackFrameDndTypesTree(function,typeManager),typeManager,"Stack frame");}  }
class C{  protected void messageEvent(String selection){  m_notifier.notifyEvent(new MessageEvent(selection),new Vector<Object>());}  }
class C{  public void parse(final String osmFilename){  if (this.filterList.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=new OsmXmlParser(this.nodes,this.ways,this.transform);  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser.enableOptimization(1);    parser.readFile(osmFilename);    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    parser.readFile(osmFilename);    log.info("done loading data");  } else {    parser.readFile(osmFilename);  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  @Override public PollResult startPoll(PollController conn){  if (!_lifecycle.isActive()) {    log.warning(this + " select disabled");    return PollResult.CLOSED;  } else   if (_selectMax <= _connectionCount.get()) {    log.warning(this + " keepalive overflow " + _connectionCount+ " max="+ _selectMax);    System.out.println("OVERFLOW:");    return PollResult.CLOSED;  }  if (!conn.toKeepaliveStart()) {    return PollResult.CLOSED;  }  _executor.execute(new PollTask(conn));  return PollResult.START;}  }
class C{  public static final boolean almostEquals(final double[][] m1,final double[][] m2){  return almostEquals(m1,m2,DELTA);}  }
class C{  private GttClient(){}  }
class C{  public void add(DataSource source){  add(source,true);}  }
class C{  public void warning(CSSParseException e){}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HideVideo'";  db.execSQL(sql);}  }
class C{  private static void initApplicationName(){  try {    Toolkit toolkit=Toolkit.getDefaultToolkit();    java.lang.reflect.Field awtAppClassNameField=toolkit.getClass().getDeclaredField("awtAppClassName");    awtAppClassNameField.setAccessible(true);    awtAppClassNameField.set(toolkit,stendhal.GAME_NAME);  } catch (  NoSuchFieldException e) {    logger.debug("Not setting X application name " + e.getMessage());  }catch (  IllegalArgumentException e) {    logger.debug("Not setting X application name " + e.getMessage());  }catch (  IllegalAccessException e) {    logger.debug("Not setting X application name: " + e.getMessage());  }}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  public boolean sendExtraCommand(String provider,String command,Bundle extras){  try {    return mService.sendExtraCommand(provider,command,extras);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in sendExtraCommand: ",e);    return false;  }}  }
class C{  public static void subscribe(String topic,Subscriber<?> subscriber){  client().subscribe(topic,subscriber);}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.795 -0500",hash_original_method="7F66A086F3C39CFEE464DF3F42EF745A",hash_generated_method="152ACD5881167BAF4D8198736BB8899F") private void insert(E x){  items[putIndex]=x;  putIndex=inc(putIndex);  ++count;  notEmpty.signal();}  }
class C{  @Override public MappedByteBuffer map(MapMode mode,long position,long size) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public static List<int[]> generateWideLine(int lw,int x1,int y1,int x2,int y2){  ArrayList<int[]> ret_val=new ArrayList<int[]>(2);  int[] x=new int[4];  int[] y=new int[4];  int off1=(int)lw / 2;  int off2=(lw % 2 != 0) ? (int)lw / 2 + 1 : (int)lw / 2;  if (Math.abs((float)(y2 - y1) / (float)(x2 - x1)) <= 1f) {    x[0]=x[3]=x1;    x[1]=x[2]=x2;    y[0]=y1 + off1;    y[1]=y2 + off1;    y[2]=y2 - off2;    y[3]=y1 - off2;    ret_val.add(x);    ret_val.add(y);  } else {    x[0]=x1 + off1;    x[1]=x2 + off1;    x[2]=x2 - off2;    x[3]=x1 - off2;    y[0]=y[3]=y1;    y[1]=y[2]=y2;    ret_val.add(x);    ret_val.add(y);  }  return ret_val;}  }
class C{  public static Element svgElement(Document document,String name){  return document.createElementNS(SVGConstants.SVG_NAMESPACE_URI,name);}  }
class C{  public ContentInfo(DerInputStream derin) throws IOException, ParsingException {  this(derin,false);}  }
class C{  public static BigDecimal trunc(BigDecimal number){  return trunc(number,0);}  }
class C{  @Override public void afterIndexShardStarted(IndexShard indexShard){  if (indexShard.state() == IndexShardState.STARTED) {    localShardsToStart.remove(indexShard.shardId().index().getName());    logger.debug("Local shard for index [{}] started, remains {}",indexShard.shardId().index().getName(),localShardsToStart);  } else {    logger.debug("Local shard for index [{}] state={}",indexShard.state());  }  if (localShardsToStart.size() == 0)   latch.countDown();}  }
class C{  public void close(){}  }
class C{  public int size(){  return count;}  }
class C{  private void onBluetoothConnected(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public int generate(byte[] output,byte[] additionalInput,boolean predictionResistant){  int numberOfBits=output.length * 8;  int m=output.length / _outlen;  if (Utils.isTooLarge(additionalInput,MAX_ADDITIONAL_INPUT / 8)) {    throw new IllegalArgumentException("Additional input too large");  }  if (_reseedCounter + m > RESEED_MAX) {    return -1;  }  if (predictionResistant) {    reseed(additionalInput);    additionalInput=null;  }  BigInteger s;  if (additionalInput != null) {    additionalInput=Utils.hash_df(_digest,additionalInput,_seedlen);    s=new BigInteger(1,xor(_s,additionalInput));  } else {    s=new BigInteger(1,_s);  }  Arrays.fill(output,(byte)0);  int outOffset=0;  for (int i=0; i < m; i++) {    s=getScalarMultipleXCoord(_P,s);    byte[] r=getScalarMultipleXCoord(_Q,s).toByteArray();    if (r.length > _outlen) {      System.arraycopy(r,r.length - _outlen,output,outOffset,_outlen);    } else {      System.arraycopy(r,0,output,outOffset + (_outlen - r.length),r.length);    }    outOffset+=_outlen;    _reseedCounter++;  }  if (outOffset < output.length) {    s=getScalarMultipleXCoord(_P,s);    byte[] r=getScalarMultipleXCoord(_Q,s).toByteArray();    int required=output.length - outOffset;    if (r.length > _outlen) {      System.arraycopy(r,r.length - _outlen,output,outOffset,required);    } else {      System.arraycopy(r,0,output,outOffset + (_outlen - r.length),required);    }    _reseedCounter++;  }  _s=BigIntegers.asUnsignedByteArray(_sLength,getScalarMultipleXCoord(_P,s));  return numberOfBits;}  }
class C{  public String toString(String charset){  StringBuilder sb=new StringBuilder();  sb.append("data:");  sb.append(contentType);  if (data != null) {    sb.append(";base64,");    sb.append(Base64.encodeBase64String(data));  } else   if (text != null) {    if (charset == null) {      sb.append(',').append(text);    } else {      byte[] data;      try {        data=text.getBytes(charset);      } catch (      UnsupportedEncodingException e) {        throw new IllegalArgumentException(Messages.INSTANCE.getExceptionMessage(25,charset),e);      }      sb.append(";charset=").append(charset);      sb.append(";base64,");      sb.append(Base64.encodeBase64String(data));    }  } else {    sb.append(',');  }  return sb.toString();}  }
class C{  private void createAmpResultMethod(JavaClass jClass,Method method,int resultOffset){  String methodName=method.getName();  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length != 1) {    throw new IllegalStateException();  }  addMethod(method);  CodeWriterAttribute code=createMethodHeader(jClass,method);  code.setMaxLocals(1 + 2 * parameterTypes.length);  code.setMaxStack(10 + 2 * parameterTypes.length);  code.pushObjectVar(getLength(parameterTypes,resultOffset) + 1);  code.pushObjectVar(0);  code.getField(jClass.getThisClass(),getMethodFieldName(methodName),ShimConverter.class);  code.pushObjectVar(0);  code.invoke(ShimConverter.class,"toTransfer",Object.class,Object.class);  code.invokeInterface(Result.class,"ok",void.class,Object.class);  code.addReturn();  code.close();}  }
class C{  public PointPair(Point p1,Point p2){  if (p1 == null || p2 == null) {    throw new NullPointerException("Points p1 and p2 must be non-null.");  }  this.from=p1;  this.to=p2;}  }
class C{  public FloatMatrix noti(){  for (int i=0; i < length; i++) {    put(i,get(i) == 0.0f ? 1.0f : 0.0f);  }  return this;}  }
class C{  public SimplifySpanBuild appendSpecialUnitToFirst(BaseSpecialUnit specialUnit){  if (null == specialUnit)   return this;  String specialText=specialUnit.getSpecialText();  if (TextUtils.isEmpty(specialText))   return this;  int curBeforeFirstPos=mBeforeStringBuilder.length();  specialUnit.setStartPoss(new int[]{curBeforeFirstPos});  mBeforeStringBuilder.insert(curBeforeFirstPos,specialText);  mBeforeSpecialUnit.add(specialUnit);  return this;}  }
class C{  protected final boolean isSelected(){  return selected;}  }
class C{  public boolean rightClick(MouseEvent me){  if (DEBUG) {    Debug.output("rightClick(MAP) at " + me.getX() + ", "+ me.getY());  }  if (me instanceof MapMouseEvent && grp != null) {    return displayPopup(grp.getItemsForMapMenu((MapMouseEvent)me),me);  }  return false;}  }
class C{  public static String referenceIdentifierToString(byte[] ref,short stratum,byte version){  if (stratum == 0 || stratum == 1) {    return new String(ref);  } else   if (version == 3) {    return unsignedByteToShort(ref[0]) + "." + unsignedByteToShort(ref[1])+ "."+ unsignedByteToShort(ref[2])+ "."+ unsignedByteToShort(ref[3]);  } else   if (version == 4) {    return "" + ((unsignedByteToShort(ref[0]) / 256.0) + (unsignedByteToShort(ref[1]) / 65536.0) + (unsignedByteToShort(ref[2]) / 16777216.0)+ (unsignedByteToShort(ref[3]) / 4294967296.0));  }  return "";}  }
class C{  protected static boolean is_id_char(char c){  return is_id_start(c) || (c >= '0' && c <= '9');}  }
class C{  public void reset(){  m_refs.removeAllElements();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.608 -0500",hash_original_method="91313F7EB1086727A920BA0C858900A2",hash_generated_method="1A8FC1314F3C544B81E5DE2B46A272CB") @Override protected int computeVerticalScrollRange(){  final int count=getChildCount();  final int contentHeight=getHeight() - mPaddingBottom - mPaddingTop;  if (count == 0) {    return contentHeight;  }  int scrollRange=getChildAt(0).getBottom();  final int scrollY=mScrollY;  final int overscrollBottom=Math.max(0,scrollRange - contentHeight);  if (scrollY < 0) {    scrollRange-=scrollY;  } else   if (scrollY > overscrollBottom) {    scrollRange+=scrollY - overscrollBottom;  }  return scrollRange;}  }
class C{  public void addFlare(Flare flare){  flares.addElement(flare);  processGameEvent(new GameBoardChangeEvent(this));}  }
class C{  public boolean isAscendingOrder(){  return "ascending".equals(getCustomParameterValue(SORT_ORDER));}  }
class C{  @Override public boolean supportsCustomEditor(){  return true;}  }
class C{  DiskStoreImpl(Cache cache,DiskStoreAttributes props){  this(cache,props,false,null);}  }
class C{  public Result(){  log=new ArrayList<ResultEntry>();  observers=new HashMap<ResultObserver,ResultObserverSettings>();}  }
class C{  private void onThreadsStarted(){  mPingSender.start();  mPongSender.start();}  }
class C{  public boolean hasTarget(){  return getTarget() != null;}  }
class C{  public DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetText,boolean showSeparators,int minFields,int maxFields){  return append0(new TimeZoneOffset(zeroOffsetText,zeroOffsetText,showSeparators,minFields,maxFields));}  }
class C{  public ProteinScoringMatrix() throws InvalidParamsException, IOException {  this(DEFAULT);}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static final HashSet readThisSetXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, IOException {  HashSet set=new HashSet();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      set.add(val);    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return set;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  private boolean matches(T value,T against){  return Matchers.lessThanOrEqualTo(against.doubleValue()).matches(value.doubleValue());}  }
class C{  public static String toJSONString(Object value){  if (value == null)   return "null";  if (value instanceof String)   return "\"" + escape((String)value) + "\"";  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Number)   return value.toString();  if (value instanceof Boolean)   return value.toString();  if ((value instanceof JSONAware))   return ((JSONAware)value).toJSONString();  if (value instanceof Map)   return JSONObject.toJSONString((Map)value);  if (value instanceof List)   return JSONArray.toJSONString((List)value);  return value.toString();}  }
class C{  public void debug(Throwable throwable,String msg,Object arg0){  innerLog(Level.DEBUG,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  protected void invalidate(){  outlineWrapped=null;  outlineUnwrapped=null;}  }
class C{  @Override public boolean onCreate(){switch (mContentProviderType) {case HASH_MAP:    mImpl=new HobbitProviderImplHashMap(getContext());  break;case SQLITE:mImpl=new HobbitProviderImplSQLite(getContext());break;}return mImpl.onCreate();}  }
class C{  public static boolean registerLiteralId(FaceletContext ctx,String id){  Set<String> trackedIds=_getStackOfTrackedIds(ctx).peek();  if (trackedIds == null) {    return false;  }  if (trackedIds.contains(id)) {    return true;  }  trackedIds.add(id);  return false;}  }
class C{  public static List<SootMethod> matchApplicationMethodName(String methodName){  List<SootMethod> matches=new LinkedList<SootMethod>();  for (  SootClass sootClass : Scene.v().getApplicationClasses()) {    for (    SootMethod method : sootClass.getMethods()) {      String name=grabName(method.getSignature());      if (name.equals(methodName)) {        logger.debug("Method {} MATCHED ",method);        matches.add(method);      }    }  }  return matches;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source,boolean useAnchor){  XYPlot subplot=findSubplot(state,source);  if (subplot != null) {    subplot.zoomRangeAxes(factor,state,source,useAnchor);  } else {    for (    XYPlot p : this.subplots) {      p.zoomRangeAxes(factor,state,source,useAnchor);    }  }}  }
class C{  protected static List<TypeVar.TypeInstance> gatherAllTypeVarInsts(Type type){  TypeScope scope=new TypeScope();  type.getFresh(scope);  return new ArrayList<>(scope.staleToFresh.keySet());}  }
class C{  public final Angle subtract(Angle angle){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees(this.degrees - angle.degrees);}  }
class C{  public T peek(){  return list.getLast();}  }
class C{  public Property era(){  return new Property(this,getChronology().era());}  }
class C{  public void removeBuilds(final IBuildDetail[] deletedBuilds){  queueEditorPage.updateResults();  buildEditorPage.removeBuilds(deletedBuilds);}  }
class C{  public JCardValue(List<JsonValue> values){  this.values=Collections.unmodifiableList(values);}  }
class C{  public Map<String,String> retrieveForwarding(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting forwarding settings for user " + user + " ...");  GenericEntry forwardingEntry=retrieveSettingsEntry(user,Constants.FORWARDING);  if (forwardingEntry != null) {    Map<String,String> forwarding=new HashMap<String,String>();    forwarding.put(Constants.ENABLE,forwardingEntry.getProperty(Constants.ENABLE));    forwarding.put(Constants.FORWARD_TO,forwardingEntry.getProperty(Constants.FORWARD_TO));    forwarding.put(Constants.ACTION,forwardingEntry.getProperty(Constants.ACTION));    return forwarding;  }  return null;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.SIMPLE_QUANTIFIER__QUANTIFIER:    setQuantifier((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static GeneralizedSemPmWrapper serializableInstance(){  return new GeneralizedSemPmWrapper(Dag.serializableInstance());}  }
class C{  public void addAll(long... values){  for (  long value : values) {    add(value);  }}  }
class C{  public Collection<String> simpleMatchToIndexNames(String pattern){  Set<String> fields=Sets.newHashSet();  for (  MappedFieldType fieldType : this) {    if (Regex.simpleMatch(pattern,fieldType.names().fullName())) {      fields.add(fieldType.names().indexName());    } else     if (Regex.simpleMatch(pattern,fieldType.names().indexName())) {      fields.add(fieldType.names().indexName());    }  }  return fields;}  }
class C{  public String toString(){  return name;}  }
class C{  protected JSONObject(HashMap<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Object value=e.getValue();      if (value != null) {        map.put((String)e.getKey(),wrap(value));      }    }  }}  }
class C{  public static boolean exists(final String file,boolean isDir){  return getInternals().exists(file,isDir);}  }
class C{  public static Observable<Integer> hotStream(){  return Observable.create(null).subscribeOn(Schedulers.newThread());}  }
class C{  public CreateMonitoredItemsResponse CreateMonitoredItems(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,TimestampsToReturn TimestampsToReturn,MonitoredItemCreateRequest... ItemsToCreate) throws ServiceFaultException, ServiceResultException {  CreateMonitoredItemsRequest req=new CreateMonitoredItemsRequest(RequestHeader,SubscriptionId,TimestampsToReturn,ItemsToCreate);  return (CreateMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  public short convertIndexToLocation(int index){  if (index == 0)   return 0;  if (index <= currentNumLocals) {    return currentCompiledMethod.getGeneralLocalLocation(index - 1);  } else {    return currentCompiledMethod.getGeneralStackLocation(index - 1 - currentNumLocals);  }}  }
class C{  private void stop(){  mRunning=false;  if (!mServerClosed) {    mServerClosed=true;    closeServerSocket();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BINDING_ELEMENT__REST:    setRest((Boolean)newValue);  return;case N4JSPackage.BINDING_ELEMENT__VAR_DECL:setVarDecl((VariableDeclaration)newValue);return;case N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN:setNestedPattern((BindingPattern)newValue);return;case N4JSPackage.BINDING_ELEMENT__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected Status spinReadStatus(){  Status status=null;  final long endTime=(System.currentTimeMillis() + 20000);  long clock=0;  while (status == null && clock < endTime) {    try {      status=nativeReadStatus();    } catch (    Exception ignore) {      pause(500);    } finally {      clock=System.currentTimeMillis();    }  }  return status;}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  private void swap(final int first,final int second){  final DLItem temp=selection.get(first);  selection.set(first,selection.get(second));  selection.set(second,temp);}  }
class C{  public void parse2(CompilationUnit unit,TypeTable typeTable){}  }
class C{  protected static Collection findCertificates(X509CertStoreSelector certSelect,List certStores) throws AnnotatedException {  Set certs=new HashSet();  Iterator iter=certStores.iterator();  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store certStore=(X509Store)obj;      try {        certs.addAll(certStore.getMatches(certSelect));      } catch (      StoreException e) {        throw new AnnotatedException("Problem while picking certificates from X.509 store.",e);      }    } else {      CertStore certStore=(CertStore)obj;      try {        certs.addAll(certStore.getCertificates(certSelect));      } catch (      CertStoreException e) {        throw new AnnotatedException("Problem while picking certificates from certificate store.",e);      }    }  }  return certs;}  }
class C{  private void dropTables(SQLiteDatabase paramSQLiteDatabase){  for (  String table : sTables) {    try {      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table);    } catch (    Exception localException) {      localException.printStackTrace();    }  }}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("progress")) {    int progress=(Integer)evt.getNewValue();    progressBar.setValue(progress);  }}  }
class C{  public SnmpCounter64(long v) throws IllegalArgumentException {  if ((v < 0) || (v > Long.MAX_VALUE)) {    throw new IllegalArgumentException();  }  value=v;}  }
class C{  @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public GzipAsynchOutputStream(OutputStream stream,boolean terminate) throws IOException {  this(stream,DEFAULT_PIPE_SIZE,DEFAULT_GZIP_BUFFER_SIZE,terminate);}  }
class C{  public static void checkEndTimeDuration(){  LOG.info("Check that all activities (except last) has either end time or duration.");  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile("/Volumes/Nifty/workspace/coct-data/matsim/businessCases/facilityMove/relocatedPlans_Belcon.xml.gz");  for (  Person person : sc.getPopulation().getPersons().values()) {    Plan plan=person.getSelectedPlan();    for (int i=0; i < plan.getPlanElements().size() - 1; i++) {      PlanElement pe=plan.getPlanElements().get(i);      if (pe instanceof Activity) {        Activity act=(Activity)pe;        double end=act.getEndTime();        double duration=act.getMaximumDuration();        if (end == Time.UNDEFINED_TIME && duration == Time.UNDEFINED_TIME) {          LOG.error("Person " + person.getId().toString() + " has both end time and duration undefined.");        }      }    }  }  LOG.info("Done checking end time and duration.");}  }
class C{  public static void compressTar(Resource[] sources,Resource target,int mode) throws IOException {  compressTar(sources,IOUtil.toBufferedOutputStream(target.getOutputStream()),mode);}  }
class C{  public static double chi2(int n){  double x=0;  for (int i=0; i < n; i++) {    double norm=normal(0,1);    x+=norm * norm;  }  return x;}  }
class C{  public HttpConnection(final String host,final String virtualHost,final int port,final Protocol protocol){  this(null,-1,host,virtualHost,port,protocol);}  }
class C{  @SuppressWarnings("deprecation") private void initCropFrameStyle(@NonNull TypedArray a){  int cropFrameStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_frame_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_frame_stoke_width));  int cropFrameColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_frame_color,getResources().getColor(R.color.ucrop_color_default_crop_frame));  mCropFramePaint.setStrokeWidth(cropFrameStrokeSize);  mCropFramePaint.setColor(cropFrameColor);  mCropFramePaint.setStyle(Paint.Style.STROKE);}  }
class C{  private void runsJDKWorstCase(int length){  long runningTotal=0, Y=minRun + 4, X=minRun;  while (runningTotal + Y + X <= length) {    runningTotal+=X + Y;    generateJDKWrongElem(X);    runs.add(0,Y);    X=Y + runs.get(1) + 1;    Y+=X + 1;  }  if (runningTotal + X <= length) {    runningTotal+=X;    generateJDKWrongElem(X);  }  runs.add(length - runningTotal);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  Node cdataNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  cdataNode=cdataName.getLastChild();  nodeType=(int)cdataNode.getNodeType();  if (!equals(4,nodeType)) {    cdataNode=doc.createCDATASection("");  }  attrList=cdataNode.getAttributes();  assertNull("cdataSection",attrList);}  }
class C{  public void putFontSizeRelative(int i,boolean b){  if (b)   masks[i]|=FONT_SIZE_RELATIVE_MASK; else   masks[i]&=~FONT_SIZE_RELATIVE_MASK;}  }
class C{  public void showTableInfoPane(){  if (!tableBorderPane.getChildren().contains(tableInfoHBox)) {    tableBorderPane.setTop(tableInfoHBox);    showingTableInfoPaneProperty.set(true);    LOG.debug("Showing info pane");  }}  }
class C{  private void initCountDown(){  mWaiter=new Waiter();  mWaiterError=new Waiter();}  }
class C{  public Object refresh(){  fireTableRowsUpdated(0,getRowCount());  return null;}  }
class C{  public static byte[] decodeChecked(String input) throws AddressFormatException {  byte[] decoded=decode(input);  if (decoded.length < 4)   throw new AddressFormatException("Input too short");  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);  byte[] actualChecksum=Arrays.copyOfRange(Sha256Hash.hashTwice(data),0,4);  if (!Arrays.equals(checksum,actualChecksum))   throw new AddressFormatException("Checksum does not validate");  return data;}  }
class C{  protected boolean canReadPermissions(ModeledAuthenticatedUser user,ModeledUser targetUser) throws GuacamoleException {  if (user.getUser().getIdentifier().equals(targetUser.getIdentifier()))   return true;  if (user.getUser().isAdministrator())   return true;  ObjectPermissionSet userPermissionSet=user.getUser().getUserPermissions();  return userPermissionSet.hasPermission(ObjectPermission.Type.READ,targetUser.getIdentifier());}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  void drawChars(Graphics g,char[] data,int offset,int length,int x,int y){}  }
class C{  protected boolean checkConsistency(){switch (nodeType) {case SerialNode.SMINI:    int numBits=0;  for (int i=0; i < 48; i++) {    if (searchlightBits[i]) {      numBits++;    }  }if ((2 * num2LSearchLights) != numBits) {  statusText1.setText(rb.getString("Error10"));  statusText1.setVisible(true);  errorInStatus1=true;  resetNotes2();  return (false);}break;case SerialNode.USIC_SUSIC:numCards=0;boolean atNoCard=false;for (int i=0; i < 64; i++) {if ((cardType[i].equals(rb.getString("CardTypeOutput"))) || (cardType[i].equals(rb.getString("CardTypeInput")))) {if (atNoCard) {statusText1.setText(rb.getString("Error11"));statusText1.setVisible(true);statusText2.setText(rb.getString("Error12"));errorInStatus1=true;errorInStatus2=true;return (false);} else {numCards++;}} else if (cardType[i].equals(rb.getString("CardTypeNone"))) {atNoCard=true;}}if (numCards <= 0) {statusText1.setText(rb.getString("Error13"));statusText2.setText(rb.getString("Error14"));statusText1.setVisible(true);errorInStatus1=true;errorInStatus2=true;return (false);}if ((bitsPerCard != 24) && (bitsPerCard != 32)) {statusText1.setText(rb.getString("Error15"));statusText1.setVisible(true);errorInStatus1=true;resetNotes2();return (false);}if (editMode) {int numOutput=curNode.numOutputCards();int numInput=curNode.numInputCards();if (numCards < (numOutput + numInput)) {if (javax.swing.JOptionPane.NO_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmUpdate1") + "\n" + rb.getString("ConfirmUpdate2")+ "\n"+ rb.getString("ConfirmUpdate3"),rb.getString("ConfirmUpdateTitle"),javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {return (false);}}}break;default :log.warn("Unexpected node type - " + Integer.toString(nodeType));break;}return true;}  }
class C{  public boolean isOrderByValue(){  Object oo=get_Value(COLUMNNAME_IsOrderByValue);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ThumbnailRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public RuntimeCopyException(String s){  super(s);}  }
class C{  private void updateItemsFromEditor(WEditor editor){  GridField gridField=editor.getGridField();  if (gridField == null)   return;  final int windowNo=gridField.getWindowNo();  GridTab gridTab=gridField.getGridTab();  if (gridTab == null)   return;  final int tabNo=gridTab.getTabNo();  final String columnName=gridField.getColumnName();  for (  String action : ACTIONS) {    String context=buildDisableItemContext(action,columnName);    String value=Env.getContext(Env.getCtx(),windowNo,tabNo,context);    if ("Y".equals(value)) {      mapDisabledItems.put(action,true);      continue;    } else     if ("N".equals(value)) {      mapDisabledItems.put(action,false);      continue;    }    context=buildDisableItemContext(action,"*");    if ("Y".equals(value)) {      mapDisabledItems.put(action,true);      continue;    } else     if ("N".equals(value)) {      mapDisabledItems.put(action,false);      continue;    }  }  updateItemsDyn();}  }
class C{  static private String INT_Max(){  int tempValue=Integer.MAX_VALUE;  return String.valueOf(tempValue);}  }
class C{  default int priority(){  return 100;}  }
class C{  public boolean isUserManual(){  if (ACTION_UserForm.equals(getAction()) || ACTION_UserWindow.equals(getAction()))   return true;  return false;}  }
class C{  @Override public void render(){  Gdx.gl.glClearColor(0,0,0,1);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);}  }
class C{  public int receive(byte[] buffer,int offset,int count){  return receive(buffer,offset,count,Integer.MAX_VALUE);}  }
class C{  public Structure build(Class type) throws Exception {  return new Structure(factory,root,version,text,primitive);}  }
class C{  private void createLanguageButton(){  _languageButton=new LanguageButton();  _languageButton.addMouseListener(STATUS_BAR_LISTENER);  updateLanguage();}  }
class C{  public Array(final double[] array,final int size,final Set<Address.Flags> flags){  super(1,size,null);  this.addr=new DirectArrayRowAddress(this.$,0,null,0,size - 1,flags,true,1,size);  System.arraycopy(array,0,$,0,this.size());}  }
class C{  private boolean isAccessibleUserFilter(Set<String> filters,String requestPath){  String index=normalizeUrlPath(requestPath);  String[] array=filters.toArray(new String[0]);  for (  String filter : array) {    if (index.matches(filter)) {      return true;    }  }  return false;}  }
class C{  public static VMOption from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof VMOptionCompositeData) {    return ((VMOptionCompositeData)cd).getVMOption();  } else {    return new VMOption(cd);  }}  }
class C{  @Override public String toString(){  String result="";  for (int i=0; i < FIELDS.length; i++) {    Object val=get(i);    if (val != null) {      result+=String.valueOf(val) + " ";    }  }  return result;}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public Map<String,Properties> loadMailProperties(String languageCode) throws ObjectNotFoundException {  Map<String,Properties> propertiesMap=loadStandardLanguageProperties(PROPERTY_TYPE_MAIL);  if (languageCode != null && !propertiesMap.containsKey(languageCode)) {    Properties mailProps=loadMailPropertiesFromDB(languageCode);    propertiesMap.put(languageCode,mailProps);  }  return propertiesMap;}  }
class C{  @Override public void invalidateDrawable(Drawable who){  invalidateSelf();}  }
class C{  protected void validateUsers(org.oscm.xsd.User[] param){}  }
class C{  public boolean shouldRenderFill(){  return false;}  }
class C{  public static String[] splitCSV(String str,String delim){  if (str == null || str.isEmpty())   return new String[]{""};  ArrayList<String> tokens=new ArrayList<String>();  int from=0, to=0;  int len=str.length();  while (from < len) {    if (str.charAt(from) == CSV_QUOTE_CHAR && str.indexOf(CSV_QUOTE_CHAR,from + 1) > 0) {      to=str.indexOf(CSV_QUOTE_CHAR,from + 1);      while (to + 1 < len && str.charAt(to + 1) == CSV_QUOTE_CHAR)       to=str.indexOf(CSV_QUOTE_CHAR,to + 2);      to+=1;    } else     if (str.regionMatches(from,delim,0,delim.length())) {      to=from;    } else {      to=str.indexOf(delim,from + 1);    }    to=(to >= 0) ? to : len;    tokens.add(str.substring(from,to));    from=to + delim.length();  }  if (from == len)   tokens.add("");  return tokens.toArray(new String[0]);}  }
class C{  public CertificateSampleHandler(){  log=Logger.getLogger(getClass().getName());  try {    sample=new CertificateSample();  } catch (  KeyManagementException|NoSuchAlgorithmException|KeyStoreException|ClientException|IOException e) {    log.fatal("Error occured when initializing CertificateSample",e);  }}  }
class C{  private void testMemorySpatialIndex() throws SQLException {  deleteDb("spatial");  Connection conn=getConnection(URL);  Statement stat=conn.createStatement();  stat.execute("create memory table test(id int primary key, polygon geometry)");  stat.execute("create spatial index idx_test_polygon on test(polygon)");  stat.execute("insert into test values(1, 'POLYGON ((1 1, 1 2, 2 2, 1 1))')");  stat.execute("insert into test values(2, null)");  ResultSet rs;  rs=stat.executeQuery("select * from test " + "where polygon && 'POLYGON ((1 1, 1 2, 2 2, 1 1))'::Geometry " + "and polygon && 'POLYGON ((10 10, 10 20, 20 20, 10 10))'::Geometry");  assertFalse(rs.next());  rs=stat.executeQuery("explain select * from test " + "where polygon && 'POLYGON ((1 1, 1 2, 2 2, 1 1))'::Geometry");  rs.next();  if (config.mvStore) {    assertContains(rs.getString(1),"/* PUBLIC.IDX_TEST_POLYGON: POLYGON &&");  }  stat.executeQuery("select * from test where polygon > " + "'POLYGON ((1 1, 1 2, 2 2, 1 1))'::Geometry");  stat.executeQuery("select * from test where polygon < " + "'POLYGON ((1 1, 1 2, 2 2, 1 1))'::Geometry");  rs=stat.executeQuery("select * from test " + "where intersects(polygon, 'POLYGON ((1 1, 1 2, 2 2, 1 1))')");  assertTrue(rs.next());  rs=stat.executeQuery("select * from test " + "where intersects(polygon, 'POINT (1 1)')");  assertTrue(rs.next());  rs=stat.executeQuery("select * from test " + "where intersects(polygon, 'POINT (0 0)')");  assertFalse(rs.next());  stat.execute("drop table test");  conn.close();  deleteDb("spatial");}  }
class C{  public boolean isUserGeneratedByClass(Authentication authentication,Class<?> generatedByClass){  boolean isGeneratedBy=false;  if (authentication != null) {    SecurityUserWrapper securityUserWrapper=(SecurityUserWrapper)authentication.getPrincipal();    if (securityUserWrapper != null && securityUserWrapper.getApplicationUser().getGeneratedByClass().equals(generatedByClass)) {      isGeneratedBy=true;    }  }  return isGeneratedBy;}  }
class C{  public boolean hasNextLine(){  saveCurrentStatus();  String result=findWithinHorizon(LINE_PATTERN,0);  recoverPreviousStatus();  return result != null;}  }
class C{  public SVGOMForeignObjectElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static boolean cameFromNotifiedAddress(String[] list,String fromJid){  String sanitizedNotifiedAddress;  String sanitizedJid=fromJid.toLowerCase();  for (  String notifiedAddress : list) {    sanitizedNotifiedAddress=notifiedAddress.toLowerCase();    if (sanitizedJid.startsWith(sanitizedNotifiedAddress + "/") || sanitizedNotifiedAddress.equals(sanitizedJid)) {      return true;    }  }  return false;}  }
class C{  public PipelineAggregator.Parser pipelineAggregator(String type){  return pipelineAggregatorParsers.get(type);}  }
class C{  public URI(String scheme,String host,String path,String fragment) throws URISyntaxException {  this(scheme,null,host,-1,path,null,fragment);}  }
class C{  @Override public void onFailure(IMqttToken token,Throwable exception){switch (action) {case CONNECT:    connect(exception);  break;case DISCONNECT:disconnect(exception);break;case SUBSCRIBE:subscribe(exception);break;case PUBLISH:publish(exception);break;}}  }
class C{  public TableRow(Context context,AttributeSet attrs){  super(context,attrs);  initTableRow();}  }
class C{  public void selfTest(){  checkConnection();  final List<BLEAction> list=new ArrayList<>();  list.add(new WriteAction(Profile.UUID_CHAR_TEST,Protocol.SELF_TEST));  queue(list);}  }
class C{  public static void runExperiment(MultiLabelClassifier h,String args[]){  try {    h.setOptions(args);    Result avg=IncrementalEvaluation.evaluateModel(h,args);    if (avg != null)     System.out.println(avg);  } catch (  Exception e) {    System.err.println("Evaluation exception (" + e + "); failed to run experiment");    e.printStackTrace();    printOptions(h.listOptions());  }}  }
class C{  public boolean isDirectory(){  return getBestPath().isDirectory();}  }
class C{  public ComponentTime(String strdate){  timestamp=ComponentTime.stringToStamp(strdate);}  }
class C{  public CommodityChannelIndexDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public double distanceSq(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  static float minimumCosineDistance(float[] vector1,float[] vector2,int numOrientations){  final int len=vector1.length;  float a=0;  float b=0;  for (int i=0; i < len; i+=2) {    a+=vector1[i] * vector2[i] + vector1[i + 1] * vector2[i + 1];    b+=vector1[i] * vector2[i + 1] - vector1[i + 1] * vector2[i];  }  if (a != 0) {    final float tan=b / a;    final double angle=Math.atan(tan);    if (numOrientations > 2 && Math.abs(angle) >= Math.PI / numOrientations) {      return (float)Math.acos(a);    } else {      final double cosine=Math.cos(angle);      final double sine=cosine * tan;      return (float)Math.acos(a * cosine + b * sine);    }  } else {    return (float)Math.PI / 2;  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public List<Relation> loadRelations(Universe root,List<Domain> domains,Map<Table,Domain> coverage){  Project project=root.getProject();  List<Relation> concretes=relationDAO.findByProject(root.getContext(),project.getId());  Collections.sort(concretes,new RelationComparator());  if (DYNAMIC_FLAG) {    try {      if (root.getDatabase().getSkin().getFeatureSupport(IMetadataForeignKeySupport.ID) == ISkinFeatureSupport.IS_SUPPORTED) {        return loadDynamicRelations(root,domains,coverage,concretes);      }    } catch (    DatabaseServiceException e) {    }  }  for (  Relation concrete : concretes) {    if (concrete.getJoinExpression() != null) {      try {        parseResilient(root,concrete,concretes);      } catch (      ScopeException e) {        e.printStackTrace();      }    }  }  return concretes;}  }
class C{  public FragmentIdentifierParser(){  fragmentIdentifierHandler=DefaultFragmentIdentifierHandler.INSTANCE;}  }
class C{  public void addInvokespecial(int clazz,String name,String desc){  addInvokespecial(false,clazz,name,desc);}  }
class C{  public ScriptedMetricBuilder initScript(Script initScript){  this.initScript=initScript;  return this;}  }
class C{  public void testBigIntConversionAndOrdering() throws Exception {  int size=TestUtil.nextInt(random(),3,16);  BytesRef previous=null;  BytesRef current=new BytesRef(new byte[size]);  for (long value=-100000L; value < 100000L; value++) {    NumericUtils.bigIntToSortableBytes(BigInteger.valueOf(value),size,current.bytes,current.offset);    if (previous == null) {      previous=new BytesRef(new byte[size]);    } else {      assertTrue("current bigger than previous: ",previous.compareTo(current) < 0);    }    assertEquals("forward and back conversion should generate same BigInteger",BigInteger.valueOf(value),NumericUtils.sortableBytesToBigInt(current.bytes,current.offset,current.length));    System.arraycopy(current.bytes,current.offset,previous.bytes,previous.offset,current.length);  }}  }
class C{  public static Border createLineBorder(Color color,int thickness,boolean rounded){  return new LineBorder(color,thickness,rounded);}  }
class C{  public CActionShowReil(final CGraphWindow parent,final IViewContainer container,final INaviModule module,final INaviView view){  super("Show REIL Code");  m_parent=Preconditions.checkNotNull(parent,"IE01650: Parent can't be null");  m_container=Preconditions.checkNotNull(container,"IE01652: Container argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE02299: Module argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE02300: View argument can not be null");}  }
class C{  @Override public void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public int addTask(String saveName,String url,int chunk,String sdCardFolderAddress,boolean overwrite,boolean priority){  if (!overwrite)   saveName=getUniqueName(saveName); else   deleteSameDownloadNameTask(saveName);  Log.d("--------","overwrite");  chunk=setMaxChunk(chunk);  Log.d("--------","ma chunk");  return insertNewTask(saveName,url,chunk,sdCardFolderAddress,priority);}  }
class C{  void select(){  if (mHideOnSelect) {    hide(true);  }}  }
class C{  void writeSpan(Span span) throws IOException {  boolean success=false;  int oldPos=bb.position();  try {    int mapSize=0;    if (span.getSpanId().isValid()) {      mapSize++;    }    if (span.getStartTimeMillis() != 0) {      mapSize++;    }    if (span.getStopTimeMillis() != 0) {      mapSize++;    }    if (!span.getDescription().isEmpty()) {      mapSize++;    }    if (!span.getTracerId().isEmpty()) {      mapSize++;    }    if (span.getParents().length > 0) {      mapSize++;    }    if (!span.getKVAnnotations().isEmpty()) {      mapSize++;    }    if (!span.getTimelineAnnotations().isEmpty()) {      mapSize++;    }    packer.packMapHeader(mapSize);    if (span.getSpanId().isValid()) {      packer.packRawStringHeader(1);      packer.writePayload(A);      writeSpanId(span.getSpanId());    }    if (span.getStartTimeMillis() != 0) {      packer.packRawStringHeader(1);      packer.writePayload(B);      packer.packLong(span.getStartTimeMillis());    }    if (span.getStopTimeMillis() != 0) {      packer.packRawStringHeader(1);      packer.writePayload(E);      packer.packLong(span.getStopTimeMillis());    }    if (!span.getDescription().isEmpty()) {      packer.packRawStringHeader(1);      packer.writePayload(D);      packer.packString(span.getDescription());    }    if (!span.getTracerId().isEmpty()) {      packer.packRawStringHeader(1);      packer.writePayload(R);      packer.packString(span.getTracerId());    }    if (span.getParents().length > 0) {      packer.packRawStringHeader(1);      packer.writePayload(P);      packer.packArrayHeader(span.getParents().length);      for (int i=0; i < span.getParents().length; i++) {        writeSpanId(span.getParents()[i]);      }    }    if (!span.getKVAnnotations().isEmpty()) {      packer.packRawStringHeader(1);      packer.writePayload(N);      Map<String,String> map=span.getKVAnnotations();      packer.packMapHeader(map.size());      for (      Map.Entry<String,String> entry : map.entrySet()) {        packer.packString(entry.getKey());        packer.packString(entry.getValue());      }    }    if (!span.getTimelineAnnotations().isEmpty()) {      packer.packRawStringHeader(1);      packer.writePayload(T);      List<TimelineAnnotation> list=span.getTimelineAnnotations();      packer.packArrayHeader(list.size());      for (      TimelineAnnotation annotation : list) {        packer.packMapHeader(2);        packer.packRawStringHeader(1);        packer.writePayload(T);        packer.packLong(annotation.getTime());        packer.packRawStringHeader(1);        packer.writePayload(M);        packer.packString(annotation.getMessage());      }    }    packer.flush();    success=true;  }  finally {    if (!success) {      bb.position(oldPos);    }  }}  }
class C{  public void drawChar(char character,int x,int y){  drawString("" + character,x,y);}  }
class C{  protected void listExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listExecuteLogic");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List fichas=descripcionService.getFichas();  request.setAttribute(ControlAccesoConstants.LISTA_FICHAS,fichas);  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.FICHAS_LISTADO,request);  invocation.setAsReturnPoint(true);  setReturnActionFordward(request,mapping.findForward("list"));}  }
class C{  public boolean availableFree(){  return (freeEncoding[0] == 0);}  }
class C{  public boolean isWatched(TransactionBag transactionBag){  try {    Script script=getScriptPubKey();    return transactionBag.isWatchedScript(script);  } catch (  ScriptException e) {    log.debug("Could not parse tx output script: {}",e.toString());    return false;  }}  }
class C{  public static <T>int binarySearch(T[] array,int startIndex,int endIndex,T object,Comparator<? super T> comparator){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  if (comparator == null) {    return binarySearch(array,startIndex,endIndex,object);  }  int low=startIndex, mid=-1, high=endIndex - 1, result=0;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=comparator.compare(array[mid],object)) < 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (comparator.compare(object,array[index]) < 0) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (result >= 0 ? 1 : 2);}  }
class C{  public void background(float gray){  colorCalc(gray);  backgroundFromCalc();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void startUi(IBinder windowToken,int x,int y,int w,int h){  if (DEBUG)   Log.d(TAG,"startUi()");synchronized (mServiceRunningLock) {    if (!mServiceRunning) {      Log.d(TAG,"Starting Face Unlock");      try {        mService.startUi(windowToken,x,y,w,h,mLockPatternUtils.isBiometricWeakLivelinessEnabled());      } catch (      RemoteException e) {        Log.e(TAG,"Caught exception starting Face Unlock: " + e.toString());        return;      }      mServiceRunning=true;    } else {      Log.w(TAG,"startUi() attempted while running");    }  }}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:23.520 -0500",hash_original_method="262F2C65B1D17DEC110169282F777115",hash_generated_method="E0D410D96FAD25CF1F031A6FCA6B9863") public int drainPermits(){  return sync.drainPermits();}  }
class C{  public DoubleMatrix2D make(int rows,int columns,double initialValue){  if (initialValue == 0)   return make(rows,columns);  return make(rows,columns).assign(initialValue);}  }
class C{  public ShiftExpression createShiftExpression(){  ShiftExpressionImpl shiftExpression=new ShiftExpressionImpl();  return shiftExpression;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  private void checkDeadLock(){  if (!(this instanceof CloseFuture || this instanceof WriteFuture || this instanceof ReadFuture|| this instanceof ConnectFuture)) {    return;  }  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  for (  StackTraceElement s : stackTrace) {    if (AbstractPollingIoProcessor.class.getName().equals(s.getClassName())) {      IllegalStateException e=new IllegalStateException("t");      e.getStackTrace();      throw new IllegalStateException("DEAD LOCK: " + IoFuture.class.getSimpleName() + ".await() was invoked from an I/O processor thread.  "+ "Please use "+ IoFutureListener.class.getSimpleName()+ " or configure a proper thread model alternatively.");    }  }  for (  StackTraceElement s : stackTrace) {    try {      Class<?> cls=DefaultIoFuture.class.getClassLoader().loadClass(s.getClassName());      if (IoProcessor.class.isAssignableFrom(cls)) {        throw new IllegalStateException("DEAD LOCK: " + IoFuture.class.getSimpleName() + ".await() was invoked from an I/O processor thread.  "+ "Please use "+ IoFutureListener.class.getSimpleName()+ " or configure a proper thread model alternatively.");      }    } catch (    Exception cnfe) {    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public void makeMultiInstanceIntent(Activity activity,Intent intent){  if (activity instanceof ChromeLauncherActivity && isMultiWindow(activity)) {    if (TextUtils.equals(ChromeTabbedActivity.class.getName(),intent.getComponent().getClassName())) {      intent.setClassName(activity,MultiInstanceChromeTabbedActivity.class.getName());    }    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NEW_DOCUMENT));  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setCardinality(Cardinality.SET);  builder.addAttribute(XML_LANG);  builder.addAttribute(SCHEME);  builder.addAttribute(TERM).setRequired(true);  builder.addAttribute(LABEL);}  }
class C{  public void addAll(HyperLogLogPlus other) throws HyperLogLogPlusMergeException {  if (other.sizeof() != sizeof()) {    throw new HyperLogLogPlusMergeException("Cannot merge estimators of different sizes");  }  if (format == Format.NORMAL && other.format == Format.NORMAL) {    registerSet.merge(other.registerSet);    return;  }  if (format == Format.SPARSE && other.format == Format.SPARSE) {    sparseSet=mergeEstimators(other);    if (sparseSet.length > sparseSetThreshold + sortThreshold) {      convertToNormal();    }    return;  }  if (format == Format.SPARSE && other.format == Format.NORMAL) {    convertToNormal();    registerSet.merge(other.registerSet);    return;  }  if (format == Format.NORMAL && other.format == Format.SPARSE) {    other.mergeTempList();    for (int i=0; i < other.sparseSet.length; i++) {      int k=other.sparseSet[i];      int idx=other.getIndex(k,p);      int r=other.decodeRunLength(k);      registerSet.updateIfGreater(idx,r);    }    return;  }  throw new IllegalStateException("Unhandled HLL++ merge combination");}  }
class C{  public static boolean checkIfOwner(ShoppingList shoppingList,String currentUserEmail){  return (shoppingList.getOwner() != null && shoppingList.getOwner().equals(currentUserEmail));}  }
class C{  public static Entity entityFromSlot(final Player player,final RPAction action){  if (!action.has(ATTR_BASEITEM) || !action.has(ATTR_BASEOBJECT) || !action.has(ATTR_BASESLOT)) {    return null;  }  final StendhalRPZone zone=player.getZone();  final int baseObject=action.getInt(ATTR_BASEOBJECT);  final RPObject.ID baseobjectid=new RPObject.ID(baseObject,zone.getID());  if (!zone.has(baseobjectid)) {    return null;  }  final RPObject base=zone.get(baseobjectid);  if (!(base instanceof Entity)) {    return null;  }  final Entity baseEntity=(Entity)base;  if (baseEntity.hasSlot(action.get(ATTR_BASESLOT))) {    final RPSlot slot=baseEntity.getSlot(action.get(ATTR_BASESLOT));    if (slot.size() == 0) {      return null;    }    RPObject object=null;    final int item=action.getInt(ATTR_BASEITEM);    for (    final RPObject rpobject : slot) {      if (rpobject.getID().getObjectID() == item) {        object=rpobject;        break;      }    }    return (Entity)object;  }  return null;}  }
class C{  private void photoRows(String url,ImageView imageView){  Item item=new Item(url,imageView);  executorService.submit(new SeperateItems(item,this));}  }
class C{  public static void deleteFile(File file) throws AdeUsageException {  if (!file.delete()) {    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());  }}  }
class C{  private boolean paginationWorkaround(Terminal terminal){  return (PAGINATION_WORKAROUND && (skip > 0L || limit > 0) && (terminal == Terminal.GET_CURSOR || terminal == Terminal.GET_ONE || terminal == Terminal.EXPLAIN_PLAN)&& !whereClauseRequired()&& !hasFilterSpecOrderBy());}  }
class C{  public void define(String key,String value){  buildProperties.put(key,value);}  }
class C{  public Element store(Object o){  SignalHeadSignalMast p=(SignalHeadSignalMast)o;  Element e=new Element("signalmast");  e.setAttribute("class",this.getClass().getName());  e.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,e);  Element unlit=new Element("unlit");  if (p.allowUnLit()) {    unlit.setAttribute("allowed","yes");  } else {    unlit.setAttribute("allowed","no");  }  e.addContent(unlit);  List<String> disabledAspects=p.getDisabledAspects();  if (disabledAspects != null) {    Element el=new Element("disabledAspects");    for (    String aspect : disabledAspects) {      Element ele=new Element("disabledAspect");      ele.addContent(aspect);      el.addContent(ele);    }    if (disabledAspects.size() != 0) {      e.addContent(el);    }  }  return e;}  }
class C{  public NotificationChain basicSetTypeSpecifier(TypeSpecifier newTypeSpecifier,NotificationChain msgs){  TypeSpecifier oldTypeSpecifier=typeSpecifier;  typeSpecifier=newTypeSpecifier;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.PARAMETER__TYPE_SPECIFIER,oldTypeSpecifier,newTypeSpecifier);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean contains(String name) throws UsersRepositoryException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  try {    return (Long)entityManager.createNamedQuery("containsUser").setParameter("name",name.toLowerCase()).getSingleResult() > 0;  } catch (  PersistenceException e) {    getLogger().debug("Failed to find user",e);    throw new UsersRepositoryException("Failed to find user" + name,e);  } finally {    entityManager.close();  }}  }
class C{  public TableBuilder addIndex(IndexBuilder index){  if (_escapeIdentifiers) {    index.setName(escapeIdentifier(index.getName()));    for (    IndexBuilder.Column col : index.getColumns()) {      col.setName(escapeIdentifier(col.getName()));    }  }  _indexes.add(index);  return this;}  }
class C{  public static org.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return org.carbondata.format.DataType.STRING;case INT:  return org.carbondata.format.DataType.INT;case LONG:return org.carbondata.format.DataType.LONG;case DOUBLE:return org.carbondata.format.DataType.DOUBLE;case DECIMAL:return org.carbondata.format.DataType.DECIMAL;case TIMESTAMP:return org.carbondata.format.DataType.TIMESTAMP;case ARRAY:return org.carbondata.format.DataType.ARRAY;case STRUCT:return org.carbondata.format.DataType.STRUCT;default :return org.carbondata.format.DataType.STRING;}}  }
class C{  public static final void removeListener(AccelDeviceEventListener l){  getInstance(true).remove(l);}  }
class C{  public void popupMenuWillBecomeVisible(PopupMenuEvent e){}  }
class C{  @Override public void startMonitoring(MonitoringJob monitoringJob,DistributedQueueItemProcessedCallback callback){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  try {synchronized (cacheLock) {      URI smisProviderURI=monitoringJob.getId();      String smisProvider=smisProviderURI.toString();      _logger.info("smisProvider :{}",smisProvider);      addSMISProviderIntoAllProviderCache(smisProvider,callback);      _logger.debug("SMI-S Provider delete stale subscription status: {}",_connectionFactory.deleteStaleSubscriptions(smisProvider));      if (isActiveSMISProvider(smisProvider)) {        _logger.info("SMIS Provider {} is an active provider",smisProviderURI);        boolean successStatus=_connectionFactory.subscribeSMIProviderConnection(smisProvider);        if (successStatus) {          addSMISProviderIntoActiveProviderCache(smisProvider);          _logger.info("Added SMIS Provider {} into Active SMIS provider cache",smisProviderURI);        } else {          _logger.info("Subscription for the new Active SMIS Provider {} is failed. " + "Scheduled Job will try to make subscription in the next cycle");        }      } else {        _logger.info("SMIS provider {} is Passive provider, so no need to make subscription for indication now",smisProviderURI);      }    }  } catch (  IOException e) {    _logger.error(e.getMessage(),e);  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  private String printGFormat(double x){  String sx, sy, sz, ret;  int savePrecision=precision;  int i;  char[] ca4, ca5;  boolean noDigits=false;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca4="+Inf".toCharArray(); else       if (leadingSpace)       ca4=" Inf".toCharArray(); else       ca4="Inf".toCharArray();    } else     ca4="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca4="+NaN".toCharArray(); else     if (leadingSpace)     ca4=" NaN".toCharArray(); else     ca4="NaN".toCharArray();    noDigits=true;  } else {    if (!precisionSet)     precision=defaultDigits;    if (precision == 0)     precision=1;    int ePos=-1;    if (conversionCharacter == 'g') {      sx=eFormatString(x,'e').trim();      ePos=sx.indexOf('e');    } else {      sx=eFormatString(x,'E').trim();      ePos=sx.indexOf('E');    }    i=ePos + 1;    int expon=0;    if (sx.charAt(i) == '-') {      for (++i; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;      if (i < sx.length())       expon=-Integer.parseInt(sx.substring(i));    } else {      if (sx.charAt(i) == '+')       ++i;      for (; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;      if (i < sx.length())       expon=Integer.parseInt(sx.substring(i));    }    if (!alternateForm) {      if (expon >= -4 && expon < precision)       sy=fFormatString(x).trim(); else       sy=sx.substring(0,ePos);      i=sy.length() - 1;      for (; i >= 0; i--)       if (sy.charAt(i) != '0')       break;      if (i >= 0 && sy.charAt(i) == '.')       i--;      if (i == -1)       sz="0"; else       if (!Character.isDigit(sy.charAt(i)))       sz=sy.substring(0,i + 1) + "0"; else       sz=sy.substring(0,i + 1);      if (expon >= -4 && expon < precision)       ret=sz; else       ret=sz + sx.substring(ePos);    } else {      if (expon >= -4 && expon < precision)       ret=fFormatString(x).trim(); else       ret=sx;    }    if (leadingSpace)     if (x >= 0)     ret=" " + ret;    ca4=ret.toCharArray();  }  ca5=applyFloatPadding(ca4,false);  precision=savePrecision;  return new String(ca5);}  }
class C{  public void loadWorkspaceContents(InputStream is) throws BlocklyParserException {  List<Block> newBlocks=BlocklyXmlHelper.loadFromXml(is,mBlockFactory,mStats);  SimpleArrayMap<String,String> varsMap=mVariableNameManager.getUsedNames();  String[] vars=new String[varsMap.size()];  for (int i=0; i < varsMap.size(); i++) {    vars[i]=varsMap.keyAt(i);  }  mController.resetWorkspace();  for (int i=0; i < vars.length; i++) {    mController.addVariable(vars[i]);  }  mRootBlocks.addAll(newBlocks);  for (int i=0; i < mRootBlocks.size(); i++) {    mStats.collectStats(mRootBlocks.get(i),true);  }}  }
class C{  public boolean startsWith(String prefix){  return startsWith(prefix,0);}  }
class C{  public long longValue(){  return 0l;}  }
class C{  @Override protected void initListeners(){  this.findViewById(R.id.dialog_custom).setOnClickListener(this);  this.findViewById(R.id.dialog_menu).setOnClickListener(this);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(true);  try {    transformSelectedNodes(transformer);  }  finally {    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  public boolean hasStartingPositions(){  if (getPlayerCount() == 0) {    return false;  }  for (  Player player : players) {    if (!TextUtils.isEmpty(player.getStartingPosition())) {      return true;    }  }  return false;}  }
class C{  public void persist(MemChunkHolder<NonVolatileMemAllocator> mchunk){  m_nvmasvc.persist(m_nid,getChunkAddress(mchunk),0L,true);}  }
class C{  public RegexValidator(String[] regexs,boolean caseSensitive){  if (regexs == null || regexs.length == 0) {    throw new IllegalArgumentException("Regular expressions are missing");  }  patterns=new Pattern[regexs.length];  int flags=(caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);  for (int i=0; i < regexs.length; i++) {    if (regexs[i] == null || regexs[i].length() == 0) {      throw new IllegalArgumentException("Regular expression[" + i + "] is missing");    }    patterns[i]=Pattern.compile(regexs[i],flags);  }}  }
class C{  private static String toJSONString(String key,Object value,StringBuffer sb){  sb.append('\"');  if (key == null) {    sb.append("null");  } else {    JSONValue.escape(key,sb);  }  sb.append('\"').append(':');  sb.append(JSONValue.toJSONString(value));  return sb.toString();}  }
class C{  private void calculateSizes(){  m_rowHeight=getRowHeight(bufferGraphics);  m_charHeight=getCharHeight(bufferGraphics);  m_charWidth=getCharacterWidth(bufferGraphics);}  }
class C{  public boolean deliverSelfNotifications(){  return false;}  }
class C{  public void twoPath(Object obj1,Object obj2,int x){  Object localObj;synchronized (obj1) {synchronized (obj2) {      if (x == 0) {        localObj=obj2;      } else {        localObj=obj1;      }    }  }  doNothing(localObj);}  }
class C{  public static String runNormalityTests(DataSet dataSet,ContinuousVariable variable){  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  String result="Normality Tests for: " + variable.getName() + " (sample size:"+ dataSet.getNumRows()+ ")";  int lengthOfTitle=result.length();  result+="\n";  for (int i=0; i < lengthOfTitle; i++) {    result+="-";  }  result+="\n\nKolmogorov Smirnov:\n--------------------------------\n";  double ksResults[]=kolmogorovSmirnov(dataSet,variable);  double ksStat=Math.round((ksResults[0] * 10000000.0)) / 10000000.0;  result+="K-S Statistic: " + ksStat + "\n\n";  result+="Significance Levels:\t.20\t.15\t.10\t.05\t.01\nK-S Critical Values:";  result+="\t" + nf.format(ksResults[0]) + "\t"+ nf.format(ksResults[1])+ "\t"+ nf.format(ksResults[2])+ "\t"+ nf.format(ksResults[3])+ "\t"+ nf.format(ksResults[4])+ "\n";  boolean testResult=false;  String pass="FAIL";  if (ksResults[0] < ksResults[1])   testResult=true;  if (testResult)   pass="ACCEPT"; else   pass="FAIL";  result+="Test Result:\t\t" + pass;  testResult=ksResults[0] < ksResults[2];  if (testResult)   pass="ACCEPT"; else   pass="FAIL";  result+="\t" + pass;  testResult=ksResults[0] < ksResults[3];  if (testResult)   pass="ACCEPT"; else   pass="FAIL";  result+="\t" + pass;  testResult=ksResults[0] < ksResults[4];  if (testResult)   pass="ACCEPT"; else   pass="FAIL";  result+="\t" + pass;  testResult=ksResults[0] < ksResults[5];  if (testResult)   pass="ACCEPT"; else   pass="FAIL";  result+="\t" + pass;  testResult=false;  result+="\n\nH0 = " + variable + " is Normal.\n";  result+="(Normal if ACCEPT.)\n";  result+="\n\n";  result+="Anderson Darling Test:\n";  result+="---------------------\n";  int column=dataSet.getVariables().indexOf(variable);  double[] data=dataSet.getDoubleData().getColumn(column).toArray();  AndersonDarlingTest andersonDarlingTest=new AndersonDarlingTest(data);  result+="A^2 = " + nf.format(andersonDarlingTest.getASquared()) + "\n";  result+="A^2* = " + nf.format(andersonDarlingTest.getASquaredStar()) + "\n";  result+="p = " + nf.format(andersonDarlingTest.getP()) + "\n";  result+="\nH0 = " + variable + " is Non-normal.";  result+="\n(Normal if p > alpha.)\n";  return result;}  }
class C{  public String buildStringWithDefaultDelimiter(List<String> inputStrings){  return StringUtils.join(inputStrings,configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.IMPORT_DECLARATION__IMPORT_SPECIFIERS:    return importSpecifiers != null && !importSpecifiers.isEmpty();case N4JSPackage.IMPORT_DECLARATION__IMPORT_FROM:  return importFrom != IMPORT_FROM_EDEFAULT;case N4JSPackage.IMPORT_DECLARATION__MODULE:return module != null;}return super.eIsSet(featureID);}  }
class C{  public static String clearActionsToString(OFInstructionClearActions inst,Logger log){  return "";}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  public void testPurgeActiveSync() throws Exception {  final Account account=new Account("a@example.com","example.type");  final String authority="testprovider";  MockContentResolver mockResolver=new MockContentResolver();  SyncStorageEngine engine=SyncStorageEngine.newTestInstance(new TestContext(mockResolver,getContext()));  long time0=1000;  long historyId=engine.insertStartSyncEvent(account,0,SyncOperation.REASON_PERIODIC,authority,time0,SyncStorageEngine.SOURCE_LOCAL,false,null);  long time1=time0 + SyncStorageEngine.MILLIS_IN_4WEEKS * 2;  engine.stopSyncEvent(historyId,time1 - time0,"yay",0,0);}  }
class C{  @Override public void end(){  if (m_needToRecordBattleStatistics) {    getBattleTracker().sendBattleRecordsToGameData(m_bridge);    m_needToRecordBattleStatistics=false;  }  if (m_needToCleanup) {    getBattleTracker().clearBattleRecords();    scramblingCleanup();    airBattleCleanup();    m_needToCleanup=false;  }  if (m_needToCheckDefendingPlanesCanLand) {    checkDefendingPlanesCanLand();    m_needToCheckDefendingPlanesCanLand=false;  }  super.end();  m_needToInitialize=true;  m_needToScramble=true;  m_needToKamikazeSuicideAttacks=true;  m_needToClearEmptyAirBattleAttacks=true;  m_needToAddBombardmentSources=true;  m_needToRecordBattleStatistics=true;  m_needToCleanup=true;  m_needToCheckDefendingPlanesCanLand=true;}  }
class C{  public static void refresh(Object model){  if (model == null)   throw new IllegalArgumentException("model is null");  final PO po=getPO(model);  if (po == null)   throw new IllegalArgumentException("Class is not supported - " + model.getClass());  po.load(po.get_TrxName());}  }
class C{  public Matrix4d m11(double m11){  this.m11=m11;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public static final DealIterator iterator(File dealFile) throws FileNotFoundException {  return new DealIterator(dealFile);}  }
class C{  public static DoubleVector pnorm(double x,DoubleVector mean,double sd){  DoubleVector p=new DoubleVector(mean.size());  for (int i=0; i < mean.size(); i++) {    p.set(i,pnorm(x,mean.get(i),sd));  }  return p;}  }
class C{  public Rule(String name,IPredicate head,IPredicate[] tail,final IQueryOptions queryOptions,IConstraint[] constraints){  this(name,head,tail,queryOptions,constraints,null,null,null);}  }
class C{  public static String convertHexColorString(int color){  return String.format("#%06X",(0xFFFFFF & color));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void flush() throws IOException {  if (obuffer != null) {    output.write(obuffer);    obuffer=null;  }  output.flush();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalCategoryToolTipGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public void drawCard(Graphics g,int rank,int suit,double x,double y){  Image image=images[rank][suit];  g.drawImage(image,(int)(x * cardWidth),(int)(y * cardHeight),null);}  }
class C{  protected String runtimeIdentity(){  return runtime.runtimeIdentity();}  }
class C{  public int hashCode(){  if (!isHashValueSet) {    hashValue=super.hashCode();    isHashValueSet=true;  }  return hashValue;}  }
class C{  @Override protected final boolean failIfRegionMissing(){  return false;}  }
class C{  public GemFireParameterizedMessage(final String messagePattern,final String[] stringArgs,final Throwable throwable){  this.messagePattern=messagePattern;  this.stringArgs=stringArgs;  this.throwable=throwable;}  }
class C{  public void updateChartProperties(final JFreeChart chart){  chart.setAntiAlias(this.antialias.getSelection());  chart.setBackgroundPaint(GamaColors.toAwtColor(this.backgroundPaintCanvas.getColor()));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
