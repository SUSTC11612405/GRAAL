class C{  public void subtractAmount(final String amount){  subtractAmount(Integer.parseInt(amount));}  }
class C{  public ColumnInfo(String colHeader,String colSQL,Class<?> colClass,boolean readOnly,boolean colorColumn,String keyPairColSQL){  this(colHeader,colSQL,colClass,0,readOnly,colorColumn,keyPairColSQL,true);}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final boolean value) throws XMLStreamException {  writer.writeAttribute(attributeName,XMLConvert.toString(value));}  }
class C{  public void updateExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  FichasForm fichasForm=(FichasForm)form;  ActionErrors errors=fichasForm.validate(request);  if (errors == null || errors.isEmpty()) {    try {      ServiceRepository services=getServiceRepository(request);      GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();      FichaVO fichaVO=fichasForm.populate(new FichaVO());      errors=comprobarDuplicados(descripcionService,request,null,fichaVO,fichasForm.getGuid());      if (errors == null || errors.isEmpty()) {        createFmtFicha(request,fichaVO);        List listaUsoObjeto=(List)request.getAttribute(Constants.LISTA_USO_OBJETO);        fichaVO=descripcionService.updateFicha(fichaVO,listaUsoObjeto);        goReturnPointExecuteLogic(mapping,form,request,response);      } else {        ErrorsTag.saveErrors(request,errors);        setReturnActionFordward(request,mapping.findForward("update-failed"));      }    } catch (    ActionNotAllowedException anae) {      guardarError(request,anae);      setReturnActionFordward(request,mapping.findForward("update-failed"));    }catch (    CampoNotFoundException e) {      errors=getErrors(request,true);      errors.add(Constants.ERROR_GENERAL_MESSAGE,new ActionError("archigest.archivo.campo.descripcion.inexistente",e.getId()));      ErrorsTag.saveErrors(request,errors);      setReturnActionFordward(request,mapping.findForward("update-failed"));    }  } else {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("update-failed"));  }}  }
class C{  public DoubleMatrix2D viewSlice(int slice){  checkSlice(slice);  int viewRows=this.rows;  int viewColumns=this.columns;  int viewRowZero=rowZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _sliceOffset(_sliceRank(slice));  int viewRowStride=this.rowStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.rowOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedDenseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public Spacing(Problem problem){  this.problem=problem;}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverFinished == null) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }  } else {    if ((parameters.getNeedClientAuth() && clientCert == null) || clientKeyExchange == null || (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty() && certificateVerify == null)) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }  }}  }
class C{  public int compare(Integer node1,Integer node2){  double time1=times.get(node1);  double time2=times.get(node2);  if (time1 > time2) {    return 1;  } else   if (time1 < time2) {    return -1;  } else {    return 0;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CasualtyDetails(final List<Unit> killed,final List<Unit> damaged,final boolean autoCalculated){  super(killed,damaged);  m_autoCalculated=autoCalculated;}  }
class C{  private void removeSynapse(final Synapse synapse){  SynapseNode synapseNode=(SynapseNode)objectNodeMap.get(synapse);  if (synapseNode != null) {    selectionModel.remove(synapseNode);    synapseNode.getTarget().getConnectedSynapses().remove(synapseNode);    synapseNode.getSource().getConnectedSynapses().remove(synapseNode);    synapseNode.removeFromParent();    objectNodeMap.remove(synapse);    if (synapse.getParentGroup() != null) {      SynapseGroupNode parentGroupNode=(SynapseGroupNode)objectNodeMap.get(synapse.getParentGroup());      if (parentGroupNode != null) {        if (parentGroupNode instanceof SynapseGroupNodeVisible) {          ((SynapseGroupNodeVisible)parentGroupNode).removeSynapseNode(synapseNode);        }      }    }  }}  }
class C{  CompressedMemorySequencesReader2(File directory,IndexFile indexFile,boolean loadNames,boolean loadFullNames,LongRange region) throws IOException {  mIndexFile=indexFile;  mRegion=SequencesReaderFactory.resolveRange(indexFile,region);  mStart=mRegion.getStart();  mEnd=mRegion.getEnd();  mNumberSequences=mEnd - mStart;  mData=DataInMemory.loadDelayQuality(directory,indexFile,DataFileIndex.loadSequenceDataFileIndex(indexFile.dataIndexVersion(),directory),mStart,mEnd);  if (mNumberSequences > Integer.MAX_VALUE) {    throw new IllegalArgumentException("Too many sequences in region: " + region + ", maximum is: "+ Integer.MAX_VALUE);  }  mDirectory=directory;  if (loadNames && mIndexFile.hasNames()) {    loadNames();    loadNameSuffixes(loadFullNames,mIndexFile.hasSequenceNameSuffixes());  }  final StringBuilder sb=new StringBuilder("CMSR2 statistics");  sb.append(LS);  this.infoString(sb);  Diagnostic.userLog(sb.toString());}  }
class C{  @Override public Instances transformLabels(Instances D) throws Exception {  Instances features=this.extractPart(D,false);  Instances labels=this.extractPart(D,true);  Matrix labelMatrix=MatrixUtils.instancesToMatrix(labels);  double[] averages=new double[labels.numAttributes()];  for (int i=0; i < labels.numAttributes(); i++) {    double[] column=labels.attributeToDoubleArray(i);    double sum=0.0;    for (int j=0; j < column.length; j++) {      if (column[j] == 1.0) {        sum+=1.0;      } else {        sum+=-1;        labelMatrix.set(j,i,-1.0);      }    }    averages[i]=sum / column.length;  }  double[][] shiftMatrix=new double[1][labels.numAttributes()];  shiftMatrix[0]=averages;  this.m_Shift=new Matrix(shiftMatrix);  double[][] shiftTrainMatrix=new double[labels.numInstances()][labels.numAttributes()];  for (int i=0; i < labels.numInstances(); i++) {    shiftTrainMatrix[i]=averages;  }  Matrix trainShift=new Matrix(shiftTrainMatrix);  SingularValueDecomposition svd=new SingularValueDecomposition(labelMatrix.minus(trainShift));  m_v=svd.getV();  double[][] newArr=new double[m_v.getRowDimension()][this.getSize()];  for (int i=0; i < newArr.length; i++) {    for (int j=0; j < newArr[i].length; j++) {      newArr[i][j]=m_v.getArray()[i][j];    }  }  m_v=new Matrix(newArr);  Matrix compressed=MatrixUtils.instancesToMatrix(labels).times(this.m_v);  ArrayList<Attribute> attinfos=new ArrayList<Attribute>();  for (int i=0; i < compressed.getColumnDimension(); i++) {    Attribute att=new Attribute("att" + i);    attinfos.add(att);  }  this.m_PatternInstances=new Instances("compressedlabels",attinfos,compressed.getRowDimension());  Instances result=Instances.mergeInstances(MatrixUtils.matrixToInstances(compressed,m_PatternInstances),features);  result.setClassIndex(this.getSize());  return result;}  }
class C{  public void clear(){  mArrayList.clear();}  }
class C{  public ChangeTypeAction(KseFrame kseFrame,KeyStoreType newType){  super(kseFrame);  this.newType=newType;  putValue(LONG_DESCRIPTION,MessageFormat.format(res.getString("ChangeTypeAction.statusbar"),newType.friendly()));  putValue(NAME,newType.friendly());  putValue(SHORT_DESCRIPTION,newType.friendly());}  }
class C{  public void putAll(Map<? extends K,? extends V> newData){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    newMap.putAll(newData);    internalMap=newMap;  }}  }
class C{  public static Ignite start(URL springCfgUrl,@Nullable ClassLoader ldr) throws IgniteCheckedException {  return start(springCfgUrl,null,null,ldr);}  }
class C{  public static void main(String[] args){  SleuthWorldWithUI simple=new SleuthWorldWithUI(new SleuthWorld(System.currentTimeMillis()));  Console c=new Console(simple);  c.setVisible(true);}  }
class C{  public boolean isArduinoInACallback(){synchronized (arduinoCallbacksLock) {    return isInACallback;  }}  }
class C{  public int numberRoadblocking(LogicCircuit lc,GateLibrary gate_library){  if (_roadblocking_option == false) {    return 0;  }  int n_roadblocking=0;  for (  Gate g : lc.get_Gates()) {    if (numberRoadblocking(g,gate_library) > 0) {      n_roadblocking++;    }  }  return n_roadblocking;}  }
class C{  public DateTime toDateTimeAtCurrentTime(){  return toDateTimeAtCurrentTime(null);}  }
class C{  public void updateReceptionReport(ReceptionReport report){  int extendedMax=getExtendedSequenceNumber();  int expected=extendedMax - baseSeq + 1;  report.setCumulativeNumberOfPacketsLost(expected - received);  report.setDelaySinceLastSenderReport(0);  report.setExtendedHighestSequenceNumberReceived(getExtendedSequenceNumber());  long expectedInterval=expected - expectedPrior;  expectedPrior=expected;  int receivedInterval=received - receivedPrior;  receivedPrior=received;  long lostInterval=expectedInterval - receivedInterval;  if (expectedInterval == 0 || lostInterval <= 0) {    report.setFractionLost(0);  } else {    report.setFractionLost((lostInterval << 8) / (double)expectedInterval);  }  report.setInterarrivalJitter(0);  report.setLastSenderReport(lastSenderReport);  report.setSsrc(ssrc);}  }
class C{  protected void clearCrOerr(){  cr=cr & ~CR_OERR_MASK;}  }
class C{  public CompiereColor(Color upperColor,Color lowerColor,int startPoint,int repeatDistance){  if (upperColor == null || lowerColor == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  m_type=TYPE_GRADIENT;  m_primaryColor=upperColor;  m_secondaryColor=lowerColor;  m_startPoint=startPoint;  m_repeatDistance=repeatDistance;}  }
class C{  private String extractJwtAccessToken(ContainerRequest request) throws ExternalException {  String bearerToken=request.getRequestHeaders().getFirst(AUTHORIZATION_HEADER);  if (bearerToken == null) {    throw new ExternalException(ErrorCode.MISSING_AUTH_TOKEN,"AuthToken was missing in the request",null);  }  if (!bearerToken.startsWith(AUTHORIZATION_METHOD)) {    throw new ExternalException(ErrorCode.MALFORMED_AUTH_TOKEN,"Malformed AuthToken recevied",null);  }  return bearerToken.substring(AUTHORIZATION_METHOD.length());}  }
class C{  static boolean isOSNameMatch(String osName,String osNamePrefix){  if (osName == null) {    return false;  }  return osName.startsWith(osNamePrefix);}  }
class C{  private void saveProperties(){  if (isDataValid()) {    button.setButtonLabel(textField.getText());    button.setIsLockable(lockableCheckBox.isSelected());    button.setIdentity(Integer.parseInt(idField.getText()));    String name=button.getFont().getName();    button.setFont(new Font(name,button.getFont().getStyle(),Integer.parseInt(fontField.getText())));    button.setVisible(visibleCheckBox.isSelected());    button.setDisplay(visibleCheckBox.isSelected());    button.setIconPath(_imageFilePath.getImagePath());    button.setSelectedIconPath(_imagePressedFilePath.getImagePath());    button.setDirty(true);    button.updateLnF();    finishEdit();  }}  }
class C{  public static void catInSync(final File filename,boolean deleteIntermediate,final File... inputFiles) throws IOException {  final byte[] buff=new byte[100 * 1024];  final OneShotTimer timer=new OneShotTimer("catInSync");  try (FileOutputStream destination=new FileOutputStream(filename)){    for (    File inputFile : inputFiles) {      long t0=System.nanoTime();      final long start=System.nanoTime();      final long length=inputFile.length();      Diagnostic.developerLog("start catInSync file=" + inputFile.getAbsolutePath() + " bytes="+ length);      if (length > 0) {        try (InputStream input=new AsynchInputStream(FileUtils.createFileInputStream(inputFile,true))){          int len;          while ((len=input.read(buff)) > 0) {            destination.write(buff,0,len);            if (System.nanoTime() - t0 > 5000000000L) {              destination.getFD().sync();              t0=System.nanoTime();            }          }        }       }      final long diff=System.nanoTime() - start;      Diagnostic.developerLog("end catInSync file=" + inputFile.getAbsolutePath() + " bytes="+ length+ " time="+ (diff / 1000000)+ "ms"+ " bytes/sec="+ Utils.realFormat(length * 1.0e9 / diff,2));      if (deleteIntermediate) {        if (!inputFile.delete()) {          Diagnostic.userLog("Failed to delete intermediate file: " + inputFile.getPath());        }      }    }  }   timer.stopLog();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if (variables.contains(oldId)) {    variables.remove(oldId);    variables.add(newId);  }  for (  Assignment a : samples) {    if (a.containsVar(oldId)) {      Value v=a.removePair(oldId);      a.addPair(newId,v);    }  }  if (discreteCache != null) {    discreteCache.modifyVariableId(oldId,newId);  }  if (continuousCache != null) {    continuousCache.modifyVariableId(oldId,newId);  }}  }
class C{  public WaitHandler(Object self,long interval){  long currentTime=Calendar.getInstance().getTimeInMillis();  long endTime=currentTime + interval;  while (endTime > (currentTime=Calendar.getInstance().getTimeInMillis())) {    long wait=endTime - currentTime;    try {synchronized (self) {        self.wait(wait);        if (!wasSpurious()) {          break;        }      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      break;    }  }}  }
class C{  public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');  _objectIndenter.writeIndentation(jg,_nesting);}  }
class C{  public void timeout(final Item item){  LogSimpleItemEventCommand command;  if (!item.isContained()) {    command=new LogSimpleItemEventCommand(item,null,"destroy",item.get("name"),getQuantity(item),"timeout",item.getZone().getID().getID() + " " + item.getX()+ " "+ item.getY());  } else {    RPObject base=item.getBaseContainer();    if (base instanceof Entity) {      Entity baseEntity=(Entity)base;      command=new LogSimpleItemEventCommand(item,null,"destroy",item.get("name"),getQuantity(item),"timeout",baseEntity.getZone().getID().getID() + " " + baseEntity.getX()+ " "+ baseEntity.getY()+ " ("+ baseEntity.getRPClass().getName()+ ")");    } else {      return;    }  }  addLogItemEventCommand(command);}  }
class C{  private static boolean verifyNumPath(List<Set<String>> initiatorUris,ZoneInfoMap zoningMap,BlockObject block,URI vPoolURI,DbClient dbClient){  DbModelClientImpl dbModelClient=new DbModelClientImpl(dbClient);  ExportPathParams pathParams=BlockStorageScheduler.getExportPathParam(block,vPoolURI,dbClient);  for (  Set<String> hostInitiatorUris : initiatorUris) {    List<Initiator> initiators=CustomQueryUtility.iteratorToList(dbModelClient.find(Initiator.class,StringSetUtil.stringSetToUriList(hostInitiatorUris)));    boolean avoidNumPathCheck=false;    for (    Initiator initiator : initiators) {      if (initiator.checkInternalFlags(Flag.RECOVERPOINT)) {        avoidNumPathCheck=true;      }    }    if (hasFCInitiators(initiators) && !avoidNumPathCheck) {      return verifyHostNumPath(pathParams,initiators,zoningMap,dbClient);    }  }  return true;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Candidate extendHypothesis(){  if (ranks[0] < hypotheses.size() - 1) {    return new Candidate(featureFunctions,sentence,hypotheses,phrases,future_delta,new int[]{ranks[0] + 1,ranks[1]});  }  return null;}  }
class C{  public void updateNCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  private void checkValid(LinearRing g){  checkInvalidCoordinates(g.getCoordinates());  if (validErr != null)   return;  checkClosedRing(g);  if (validErr != null)   return;  GeometryGraph graph=new GeometryGraph(0,g);  checkTooFewPoints(graph);  if (validErr != null)   return;  LineIntersector li=new RobustLineIntersector();  graph.computeSelfNodes(li,true,true);  checkNoSelfIntersectingRings(graph);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationTarget(){  return delegationTarget;}  }
class C{  public Intent putExtra(String name,Bundle value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putBundle(name,value);  return this;}  }
class C{  @Inject public ResetFilesPresenter(ResetFilesView view,GitServiceClient service,AppContext appContext,GitOutputPartPresenter console,GitLocalizationConstant constant,NotificationManager notificationManager,DtoFactory dtoFactory,DtoUnmarshallerFactory dtoUnmarshallerFactory,DialogFactory dialogFactory){  this.view=view;  this.console=console;  this.dtoFactory=dtoFactory;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.dialogFactory=dialogFactory;  this.view.setDelegate(this);  this.service=service;  this.appContext=appContext;  this.constant=constant;  this.notificationManager=notificationManager;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof Xref))   return false;  final Xref x=(Xref)o;  return new EqualsBuilder().append(identifier,x.identifier).append(name,x.name).append(databaseName,x.databaseName).isEquals();}  }
class C{  public VcfEvalParamsBuilder scoreField(final String scoreField){  mScoreField=scoreField;  return self();}  }
class C{  public GamlProblems(){}  }
class C{  public void testDeployHarStatically() throws Exception {  Deployable har=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-har"),DeployableType.HAR);  getLocalContainer().getConfiguration().addDeployable(har);  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  MBeanServerConnection server=createMBeanServerConnection();  ObjectName objectName=ObjectName.getInstance(SIMPLE_HAR_OBJECT_NAME);  MBeanInfo mbeanInfo=server.getMBeanInfo(objectName);  getLogger().debug("The HAR MBean found: " + mbeanInfo.getDescription(),this.getClass().getName());  assertNotNull("MBean description is null",mbeanInfo.getDescription());  getLocalContainer().stop();}  }
class C{  private String printOFormat(long x){  String sx=null;  if (x == Long.MIN_VALUE)   sx="1000000000000000000000"; else   if (x < 0) {    String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,8);switch (t.length()) {case 1:      sx="100000000000000000000" + t;    break;case 2:  sx="10000000000000000000" + t;break;case 3:sx="1000000000000000000" + t;break;case 4:sx="100000000000000000" + t;break;case 5:sx="10000000000000000" + t;break;case 6:sx="1000000000000000" + t;break;case 7:sx="100000000000000" + t;break;case 8:sx="10000000000000" + t;break;case 9:sx="1000000000000" + t;break;case 10:sx="100000000000" + t;break;case 11:sx="10000000000" + t;break;case 12:sx="1000000000" + t;break;case 13:sx="100000000" + t;break;case 14:sx="10000000" + t;break;case 15:sx="1000000" + t;break;case 16:sx="100000" + t;break;case 17:sx="10000" + t;break;case 18:sx="1000" + t;break;case 19:sx="100" + t;break;case 20:sx="10" + t;break;case 21:sx="1" + t;break;}} else sx=Long.toString(x,8);return printOFormat(sx);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  public SVGOMDefsElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void releaseWriteLock(DiskRegion dr){  dr.releaseWriteLock();}  }
class C{  public List<Long> output(){  List<Long> values=new ArrayList<Long>(elements.size());  values.addAll(elements);  return values;}  }
class C{  public static void flushPages(){  try {    Iterator<String> filesTodelete=pagesOnDisk.keySet().iterator();    while (filesTodelete.hasNext()) {      final String file=filesTodelete.next();      if (file != null) {        final File delete_file=new File(pagesOnDisk.get(file));        if (delete_file.exists()) {          delete_file.delete();        }      }    }    pagesOnDisk.clear();    filesTodelete=pagesOnDiskAsBytes.keySet().iterator();    while (filesTodelete.hasNext()) {      final String file=filesTodelete.next();      if (file != null) {        final File delete_file=new File(pagesOnDiskAsBytes.get(file));        if (delete_file.exists()) {          delete_file.delete();        }      }    }    pagesOnDiskAsBytes.clear();    if (debugCache) {      System.out.println("Flush cache ");    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " flushing files");  }}  }
class C{  public void close(){synchronized (this) {    if (flag_closed)     return;    flag_closed=true;    if (x11FakeCookie != null)     cm.unRegisterX11Cookie(x11FakeCookie,true);    try {      cm.closeChannel(cn,"Closed due to user request",true);    } catch (    IOException ignored) {    }  }}  }
class C{  @NotNull public static HgVersion parseVersionAndExtensionInfo(@Nullable String output,@NotNull List<String> errorLines) throws ParseException {  if (StringUtil.isEmptyOrSpaces(output)) {    throw new ParseException("Empty hg version output: " + output,0);  }  Matcher matcher=HG_VERSION_PATTERN.matcher(output);  if (matcher.matches()) {    return new HgVersion(getIntGroup(matcher,1),getIntGroup(matcher,2),getIntGroup(matcher,3),parseUnsupportedExtensions(errorLines));  }  LOGGER.error("Couldn't identify hg version: " + output);  throw new ParseException("Unsupported format of hg version output: " + output,0);}  }
class C{  @NotNull public QueryBuilder append(@SuppressWarnings("ParameterHidesMemberVariable") @NotNull SqlQuery query){  this.query.append(query.getSql());  arguments.addAll(query.getArguments());  return this;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private int indexRehashed(Object obj,int index,int hash,Object cur){  final Object[] set=_set;  final int length=set.length;  int probe=1 + (hash % (length - 2));  final int loopIndex=index;  do {    index-=probe;    if (index < 0) {      index+=length;    }    cur=set[index];    if (cur == FREE)     return -1;    if ((cur == obj || equals(obj,cur)))     return index;  } while (index != loopIndex);  return -1;}  }
class C{  public void testInfoPathDoesNotExist() throws Exception {  IgfsFile info=null;  try {    info=igfs.info(DIR);  } catch (  IgniteException ignore) {  }  assert info == null;}  }
class C{  private List<Recommendation> scheduleStorageSourcePoolConstraint(final VirtualArray varray,final Project project,final VirtualPool vpool,final VirtualPoolCapabilityValuesWrapper capabilities,final List<StoragePool> candidatePools,final Volume vpoolChangeVolume,final URI consistencyGroupUri){  List<Recommendation> recommendations=new ArrayList<Recommendation>();  if (capabilities.getResourceCount() == 1) {    Collections.shuffle(candidatePools);  } else {    _blockScheduler.sortPools(candidatePools);  }  List<VirtualArray> targetVarrays=getTargetVirtualArraysForVirtualPool(project,vpool,_dbClient,_permissionsHelper);  StringBuffer sb=new StringBuffer("Determining if SRDF is possible from " + varray.getId() + " to: ");  for (  VirtualArray targetVarray : targetVarrays) {    sb.append(targetVarray.getId()).append(" ");  }  _log.info(sb.toString());  Map<String,Object> attributeMap=new HashMap<String,Object>();  Map<VirtualArray,List<StoragePool>> varrayPoolMap=getMatchingPools(targetVarrays,vpool,capabilities,attributeMap);  if (varrayPoolMap == null || varrayPoolMap.isEmpty()) {    Set<String> tmpTargetVarrays=new HashSet<String>();    sb=new StringBuffer("No matching storage pools found for any of the target varrays: [ ");    for (    VirtualArray targetVarray : targetVarrays) {      sb.append(targetVarray.getId()).append(" ");      tmpTargetVarrays.add(targetVarray.getLabel());    }    sb.append("]. There are no storage pools that match the passed vpool parameters and protocols and/or " + "there are no pools that have enough capacity to hold at least one resource of the requested size.");    StringBuffer errorMessage=new StringBuffer();    if (attributeMap.get(AttributeMatcher.ERROR_MESSAGE) != null) {      errorMessage=(StringBuffer)attributeMap.get(AttributeMatcher.ERROR_MESSAGE);    }    _log.error(sb.toString());    throw APIException.badRequests.noMatchingRecoverPointStoragePoolsForVpoolAndVarrays(vpool.getLabel(),tmpTargetVarrays,errorMessage.toString());  }  Set<SRDFPoolMapping> tmpDestPoolsList=getSRDFPoolMappings(varray,candidatePools,varrayPoolMap,vpool,vpoolChangeVolume,capabilities.getSize());  if (tmpDestPoolsList == null || tmpDestPoolsList.isEmpty()) {    Set<String> tmpSRDFVarrays=new HashSet<String>();    sb=new StringBuffer("No matching target pool found for varray: ");    sb.append(varray.getId());    sb.append(" and vpool: ");    sb.append(vpool.getId());    sb.append(" to varrays: ");    for (    VirtualArray targetVarray : targetVarrays) {      sb.append(targetVarray.getId()).append(" ");      tmpSRDFVarrays.add(targetVarray.getLabel());    }    _log.error(sb.toString());    throw APIException.badRequests.noMatchingSRDFPools(varray.getLabel(),vpool.getLabel(),tmpSRDFVarrays);  }  Set<SRDFPoolMapping> srcDestPoolsList=fireSRDFPlacementRules(tmpDestPoolsList,capabilities.getResourceCount());  if (srcDestPoolsList == null || srcDestPoolsList.isEmpty()) {    throw APIException.badRequests.srdfNoSolutionsFoundError();  }  Set<StoragePool> sourceCandidatePoolList=new HashSet<StoragePool>();  for (  SRDFPoolMapping srdfPoolMapping : srcDestPoolsList) {    sourceCandidatePoolList.add(srdfPoolMapping.sourceStoragePool);  }  List<StoragePool> sourcePoolList=new ArrayList<StoragePool>();  sourcePoolList.addAll(sourceCandidatePoolList);  int recommendedCount=0;  int currentCount=capabilities.getResourceCount();  while (!sourcePoolList.isEmpty() && recommendedCount < capabilities.getResourceCount()) {    long resourceSize=capabilities.getSize();    int resourceCount=capabilities.getResourceCount();    long requiredPoolCapacity=resourceSize * currentCount;    _log.info("Required pool capacity: " + requiredPoolCapacity);    StoragePool poolWithRequiredCapacity=_blockScheduler.getPoolMatchingCapacity(requiredPoolCapacity,resourceSize,currentCount,sourcePoolList,VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()),null);    if (poolWithRequiredCapacity != null) {      StoragePool recommendedPool=poolWithRequiredCapacity;      _log.debug("Recommending storage pool {} for {} resources.",recommendedPool.getId(),currentCount);      Map<VirtualArray,List<StoragePool>> targetVarrayPoolMap=findDestPoolsForSourcePool(targetVarrays,srcDestPoolsList,recommendedPool,vpool);      if (targetVarrayPoolMap == null || targetVarrayPoolMap.isEmpty()) {        _log.info("There are no pools from any of the target varrays that can protect the source " + "varray pool {}.  Will try using another source varray pool.",recommendedPool.getLabel());        sourcePoolList.remove(poolWithRequiredCapacity);      } else {        SRDFRecommendation rec=new SRDFRecommendation();        Map<VirtualArray,Set<StorageSystem>> varrayTargetDeviceMap=new HashMap<VirtualArray,Set<StorageSystem>>();        for (        VirtualArray targetVarray1 : targetVarrayPoolMap.keySet()) {          if (rec.getSourceStoragePool() == null) {            rec.setVirtualArray(varray.getId());            rec.setVirtualPool(vpool);            rec.setSourceStoragePool(recommendedPool.getId());            rec.setResourceCount(currentCount);            rec.setSourceStorageSystem(recommendedPool.getStorageDevice());            rec.setVirtualArrayTargetMap(new HashMap<URI,Target>());            rec.setVpoolChangeVolume(vpoolChangeVolume != null ? vpoolChangeVolume.getId() : null);            rec.setVpoolChangeVpool(vpoolChangeVolume != null ? vpool.getId() : null);          }          if (targetVarrayPoolMap.get(targetVarray1) == null || targetVarrayPoolMap.get(targetVarray1).isEmpty()) {            _log.error("Could not find any suitable storage pool for target varray: " + targetVarray1.getLabel());            throw APIException.badRequests.unableToFindSuitablePoolForTargetVArray(targetVarray1.getLabel());          }          StoragePool destinationPool=_blockScheduler.selectPool(targetVarrayPoolMap.get(targetVarray1));          _log.info("Destination target for varray " + targetVarray1.getLabel() + " was determined to be in pool: "+ destinationPool.getLabel());          Target target=new Target();          target.setTargetPool(destinationPool.getId());          target.setTargetStorageDevice(destinationPool.getStorageDevice());          Map<URI,VpoolRemoteCopyProtectionSettings> settingsMap=VirtualPool.getRemoteProtectionSettings(vpool,_dbClient);          target.setCopyMode(settingsMap.get(targetVarray1.getId()).getCopyMode());          if (target.getCopyMode() == null) {            target.setCopyMode(RemoteDirectorGroup.SupportedCopyModes.ASYNCHRONOUS.toString());          }          Set<StorageSystem> targetDeviceList=findMatchingSRDFPools(targetVarray1,srcDestPoolsList,recommendedPool,destinationPool);          if (targetDeviceList.isEmpty()) {            _log.error("Could not find a Storage pool for target varray: " + targetVarray1.getLabel());            throw APIException.badRequests.unableToFindSuitablePoolForTargetVArray(targetVarray1.getLabel());          }          rec.getVirtualArrayTargetMap().put(targetVarray1.getId(),target);          varrayTargetDeviceMap.put(targetVarray1,targetDeviceList);        }        VirtualArray firstVarray=null;        for (        VirtualArray baseVarray : varrayTargetDeviceMap.keySet()) {          firstVarray=baseVarray;          break;        }        _log.info("Chose the first varray for SRDF comparison: " + firstVarray.getLabel());        findInsertRecommendation(rec,firstVarray,recommendations,candidatePools,recommendedPool,varrayTargetDeviceMap,project,consistencyGroupUri);        recommendedCount+=currentCount;        currentCount=resourceCount - recommendedCount < currentCount ? resourceCount - recommendedCount : currentCount;      }    } else {      currentCount--;      sourcePoolList.clear();    }    if (recommendedCount != resourceCount) {      _log.error("Could not find matching pools for varray {} & vpool {}",varray.getId(),vpool.getId());      recommendations.clear();      sourcePoolList.remove(poolWithRequiredCapacity);    }  }  return recommendations;}  }
class C{  private void analize(){  StringTokenizer tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  id=Integer.parseInt(tokenizer2.nextToken());  String nextToken=tokenizer2.nextToken();  name=nextToken.substring(1,nextToken.length() - 1);  type=Integer.parseInt(tokenizer2.nextToken());  len=Integer.parseInt(tokenizer2.nextToken());  nulls=Integer.parseInt(tokenizer2.nextToken());  nextToken=tokenizer2.nextToken();  colname=nextToken.substring(1,nextToken.length() - 1);  isdoc=Integer.parseInt(tokenizer2.nextToken());  ismult=Integer.parseInt(tokenizer2.nextToken());  nextToken=tokenizer2.nextToken();  remarks=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public void testDistanceOnLink_shortLink(){  Network network=NetworkUtils.createNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)1000,(double)1000));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)1000,(double)10,(double)9999,(double)1);  SnapshotLinkWidthCalculator linkWidthCalculator=new SnapshotLinkWidthCalculator();  AgentSnapshotInfo posInfo=new AgentSnapshotInfoFactory(linkWidthCalculator).createAgentSnapshotInfo(Id.create(1,Person.class),link1,250,0);  assertEquals(260.60660171779824,posInfo.getEasting(),epsilon);  assertEquals(239.3933982822018,posInfo.getNorthing(),epsilon);}  }
class C{  @Override public void updateEntity(){  if (!addedToEnet)   onLoaded();}  }
class C{  public static float[] concatAllFloat(float[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  float[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  private ByteBuf constructPacket(Class<? extends Protocol> packetProtocol,boolean skipCurrentPipeline) throws Exception {  List<Protocol> protocols=new ArrayList<>(user().get(ProtocolInfo.class).getPipeline().pipes());  Collections.reverse(protocols);  int index=0;  for (int i=0; i < protocols.size(); i++) {    if (protocols.get(i).getClass().equals(packetProtocol)) {      index=skipCurrentPipeline ? (i + 1) : (i);      break;    }  }  resetReader();  apply(Direction.OUTGOING,user().get(ProtocolInfo.class).getState(),index,protocols);  ByteBuf output=inputBuffer == null ? Unpooled.buffer() : inputBuffer.alloc().buffer();  writeToBuffer(output);  return output;}  }
class C{  public void testUserConfiguresMailSessionAsResource() throws MalformedURLException {  ResourceFixture fixture=ConfigurationFixtureFactory.createMailSessionAsResource();  addResourceToConfigurationViaProperty(fixture);  testWar("mailsession");}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mOperation);  dest.writeInt(mCategory);  dest.writeInt(mLanguage);  dest.writeInt(mMaxMessages);  dest.writeInt(mAlertOption);  dest.writeString(mCategoryName);}  }
class C{  private void maybeSampleSyncParams(){  long playbackPositionUs=audioTrackUtil.getPlaybackHeadPositionUs();  if (playbackPositionUs == 0) {    return;  }  long systemClockUs=System.nanoTime() / 1000;  if (systemClockUs - lastPlayheadSampleTimeUs >= MIN_PLAYHEAD_OFFSET_SAMPLE_INTERVAL_US) {    playheadOffsets[nextPlayheadOffsetIndex]=playbackPositionUs - systemClockUs;    nextPlayheadOffsetIndex=(nextPlayheadOffsetIndex + 1) % MAX_PLAYHEAD_OFFSET_COUNT;    if (playheadOffsetCount < MAX_PLAYHEAD_OFFSET_COUNT) {      playheadOffsetCount++;    }    lastPlayheadSampleTimeUs=systemClockUs;    smoothedPlayheadOffsetUs=0;    for (int i=0; i < playheadOffsetCount; i++) {      smoothedPlayheadOffsetUs+=playheadOffsets[i] / playheadOffsetCount;    }  }  if (systemClockUs - lastTimestampSampleTimeUs >= MIN_TIMESTAMP_SAMPLE_INTERVAL_US) {    audioTimestampSet=audioTrackUtil.updateTimestamp();    if (audioTimestampSet) {      long audioTimestampUs=audioTrackUtil.getTimestampNanoTime() / 1000;      long audioTimestampFramePosition=audioTrackUtil.getTimestampFramePosition();      if (audioTimestampUs < resumeSystemTimeUs) {        audioTimestampSet=false;      } else       if (Math.abs(audioTimestampUs - systemClockUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        audioTimestampSet=false;        Log.w(TAG,"Spurious audio timestamp (system clock mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs);      } else       if (Math.abs(framesToDurationUs(audioTimestampFramePosition) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {        audioTimestampSet=false;        Log.w(TAG,"Spurious audio timestamp (frame position mismatch): " + audioTimestampFramePosition + ", "+ audioTimestampUs+ ", "+ systemClockUs+ ", "+ playbackPositionUs);      }    }    if (getLatencyMethod != null) {      try {        latencyUs=(Integer)getLatencyMethod.invoke(audioTrack,(Object[])null) * 1000L - framesToDurationUs(bytesToFrames(bufferSize));        latencyUs=Math.max(latencyUs,0);        if (latencyUs > MAX_LATENCY_US) {          Log.w(TAG,"Ignoring impossibly large audio latency: " + latencyUs);          latencyUs=0;        }      } catch (      Exception e) {        getLatencyMethod=null;      }    }    lastTimestampSampleTimeUs=systemClockUs;  }}  }
class C{  @Override public V remove(Object key){  if (key == null) {    V value=_nullValue;    _nullValue=null;    return value;  }  int hash=key.hashCode() & _mask;  int count=_size + 1;  V item=null;  for (; count > 0; count--) {    item=_values[hash];    if (item == null)     return null;    if (_keys[hash].equals(key)) {      _keys[hash]=null;      _values[hash]=null;      _size--;      refillEntries(hash);      break;    }    hash=(hash + 1) & _mask;  }  if (count < 0)   throw new RuntimeException("internal cache error");  return item;}  }
class C{  public ThisExpression newThisExpression(){  ThisExpression result=new ThisExpression(this);  return result;}  }
class C{  private ScannerToken<?> readNextToken(final Scanner input,final Deque<ScannerToken<?>> tokens,final int k){  final int nominalSize=k + 1;  if (!tokens.isEmpty()) {    tokens.pop();  }  final ScannerToken<?> last=tokens.peekLast();  if (last == null || last.getSymbol() != SpecialTerminals.EndOfInputStream) {    try {      ScannerToken<?> nextToken=null;      do {        nextToken=input.readNextTerminal();        if (nextToken == null) {          throw new IOException("Null-token received! Check your scanner implementation!");        }        tokens.add(nextToken);      } while (tokens.size() < nominalSize && nextToken.getSymbol() != SpecialTerminals.EndOfInputStream);    } catch (    IOException e) {      System.err.println("Error while reading from scanner: " + input);      e.printStackTrace();      return null;    }  }  final ScannerToken<?> currentToken=tokens.peek();  if (currentToken == null) {    System.err.println("Tried to read over END_OF_INPUTSTREAM!");    return null;  }  if (currentToken instanceof InsertedScannerToken) {    InsertedScannerToken<?> inserted=(InsertedScannerToken<?>)currentToken;    if (inserted.getErrorInformation() != null) {      notifyObserversAbout(inserted.getErrorInformation());    }  }  return currentToken;}  }
class C{  @Override public void execute() throws BuildException {  if (licenseMapper == null) {    throw new BuildException("Expected an embedded <licenseMapper>.");  }  if (skipChecksum) {    log("Skipping checksum verification for dependencies",Project.MSG_INFO);  } else {    if (skipSnapshotsChecksum) {      log("Skipping checksum for SNAPSHOT dependencies",Project.MSG_INFO);    }    if (skipRegexChecksum != null) {      log("Skipping checksum for dependencies matching regex: " + skipRegexChecksum.pattern(),Project.MSG_INFO);    }  }  jarResources.setProject(getProject());  processJars();  if (failures) {    throw new BuildException(FAILURE_MESSAGE);  }}  }
class C{  private void init(@Nullable final AttributeSet attributeSet){  final TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(attributeSet,R.styleable.DefaultLayoutPromptView,0,0);  config=new DefaultLayoutPromptViewConfig(typedArray);  typedArray.recycle();}  }
class C{  private void newFile(){  this.currentFile=Optional.empty();  Main.getStage().setTitle("New file");}  }
class C{  public void loadAllGlyphs(){  List list=fontDef.getGlyphList();  for (Iterator it=list.iterator(); it.hasNext(); ) {    FontDefinition.Glyph g=(FontDefinition.Glyph)it.next();    addGlyph(g);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  setContentView(R.layout.contacts_activity);  super.onCreate(savedInstanceState,ContactsOps.class,this);  mListView=(ListView)findViewById(R.id.list);  mListView.setAdapter(getOps().makeCursorAdapter());}  }
class C{  @Override public void release(){  log.i("release");  trackHandlerGate.close();  Message msg=trackHandler.obtainMessage(MSG_RELEASE_TRACK);  if (log.allowDebug()) {    log.d("Sending release directtrack handler thread");  }  trackHandler.sendMessage(msg);  trackHandlerGate.block();  trackHandlerThread.quit();  trackHandlerThread=null;  trackHandler=null;  trackHandlerGate=null;  pendingWriteSem=null;  audioBuffer=null;  if (log.allowDebug()) {    log.d("Release track done");  }}  }
class C{  public static void testConversion(TestConversionMode mode,Class<?> from,Class<?> to,Object param,Object expectedResult,boolean failureExpected,Class<? extends Throwable> expectedException){  if (VERBOSE) {    System.out.printf("Testing return value conversion: " + "%-10s => %-10s: %5s: ",from.getSimpleName(),to.getSimpleName(),param);  }  MethodHandle original=null;  MethodType newType=null;switch (mode) {case RETURN_VALUE:    if (from.equals(void.class)) {      MethodType mt=MethodType.methodType(void.class);      try {        original=MethodHandles.publicLookup().findStatic(THIS_CLASS,"retVoid",mt);      } catch (      NoSuchMethodException|IllegalAccessException ex) {        throw new Error("Unexpected issue",ex);      }    } else {      original=MethodHandles.constant(from,param);    }  newType=original.type().changeReturnType(to);break;case ARGUMENT:if (from.equals(void.class) || to.equals(void.class)) {throw new Error("Test issue: argument conversion does not" + " work with non-type void");}original=MethodHandles.identity(to);newType=original.type().changeParameterType(0,from);break;default :String msg=String.format("Test issue: unknown test" + " convertion mode %s.",mode.name());throw new Error(msg);}try {MethodHandle target=MethodHandles.explicitCastArguments(original,newType);Object result;switch (mode) {case RETURN_VALUE:result=target.invokeWithArguments();break;case ARGUMENT:result=target.invokeWithArguments(param);break;default :String msg=String.format("Test issue: unknown test" + " convertion mode %s.",mode.name());throw new Error(msg);}if (!failureExpected && (expectedResult != null && !expectedResult.equals(result) || expectedResult == null && result != null)) {String msg=String.format("Conversion result %s is not equal" + " to the expected result %10s",result,expectedResult);throw new AssertionError(msg);}if (VERBOSE) {String resultStr;if (result != null) {resultStr=String.format("Converted value and type are" + " %10s (%10s)","'" + result + "'",result.getClass().getSimpleName());} else {resultStr=String.format("Converted value is %10s",result);}System.out.println(resultStr);}if (failureExpected) {String msg=String.format("No exception thrown while testing" + " return value conversion: %10s => %10s;" + " parameter: %10s",from,to,param);throw new AssertionError(msg);}} catch (AssertionError e) {throw e;}catch (Throwable e) {if (VERBOSE) {System.out.printf("%s: %s\n",e.getClass(),e.getMessage());}if (!failureExpected || !e.getClass().equals(expectedException)) {String msg=String.format("Unexpected exception was thrown" + " while testing return value conversion:" + " %s => %s; parameter: %s",from,to,param);throw new AssertionError(msg,e);}}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.331 -0500",hash_original_method="F611253C286EB5F8129DFD60BE22D44F",hash_generated_method="919DB1A574A34EE860ADDDF078FE731B") @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  return true;}  }
class C{  public static boolean isTestFile(String testName){  return testName.endsWith(".html") || testName.endsWith(".xhtml") || testName.endsWith(".php");}  }
class C{  public boolean isWatched(String var){  return watchedVariables.isWatched(name,var);}  }
class C{  public void close(){  closeWriter();  closed=true;}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      int len=def.deflate(buf,0,buf.length);      if (def.finished() && len <= buf.length - TRAILER_SIZE) {        writeTrailer(buf,len);        len=len + TRAILER_SIZE;        totalLength+=TRAILER_SIZE;        out.write(buf,0,len);        return;      }      if (len > 0) {        out.write(buf,0,len);      }    }    byte[] trailer=new byte[TRAILER_SIZE];    writeTrailer(trailer,0);    out.write(trailer);    totalLength+=TRAILER_SIZE;  }}  }
class C{  @Override public int compareTo(Object obj){  TimePeriod that=(TimePeriod)obj;  long t0=getStart().getTime();  long t1=getEnd().getTime();  long m0=t0 + (t1 - t0) / 2L;  long t2=that.getStart().getTime();  long t3=that.getEnd().getTime();  long m1=t2 + (t3 - t2) / 2L;  if (m0 < m1) {    return -1;  } else   if (m0 > m1) {    return 1;  } else {    if (t0 < t2) {      return -1;    } else     if (t0 > t2) {      return 1;    } else {      if (t1 < t3) {        return -1;      } else       if (t1 > t3) {        return 1;      } else {        return 0;      }    }  }}  }
class C{  public static Set<org.oscm.internal.vo.VOPaymentType> convertToUpVOPaymentType(Set<org.oscm.vo.VOPaymentType> oldVO){  if (oldVO == null) {    return null;  }  Set<org.oscm.internal.vo.VOPaymentType> newVO=new HashSet<org.oscm.internal.vo.VOPaymentType>();  for (  org.oscm.vo.VOPaymentType tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  @Override public String toString(){  String result;  if (getExponent() == 1.0) {    if (getUseLowerOrder()) {      result="Linear Kernel with lower order: K(x,y) = <x,y> + 1";    } else {      result="Linear Kernel: K(x,y) = <x,y>";    }  } else {    if (getUseLowerOrder()) {      result="Poly Kernel with lower order: K(x,y) = (<x,y> + 1)^" + getExponent();    } else {      result="Poly Kernel: K(x,y) = <x,y>^" + getExponent();    }  }  return result;}  }
class C{  public static double sum(double[] doubles){  double sum=0;  for (int i=0; i < doubles.length; i++) {    sum+=doubles[i];  }  return sum;}  }
class C{  @Override protected void onScreenTurnedOff(){  mImageView.clearAnimation();}  }
class C{  protected void updateMechSearchFilter(){  mechFilter.isDisabled=false;  mechFilter.sWalk=tWalk.getText();  mechFilter.iWalk=cWalk.getSelectedIndex();  mechFilter.sJump=tJump.getText();  mechFilter.iJump=cJump.getSelectedIndex();  mechFilter.iArmor=cArmor.getSelectedIndex();  mechFilter.sStartYear=tStartYear.getText();  mechFilter.sEndYear=tEndYear.getText();  mechFilter.checkArmorType=cbxEnableArmorSearch.isSelected();  if (cbxEnableArmorSearch.isSelected()) {    mechFilter.armorType=cboArmorType.getSelectedIndex();  }  mechFilter.checkInternalsType=cbxEnableInternalsSearch.isSelected();  if (cbxEnableInternalsSearch.isSelected()) {    mechFilter.internalsType=cboInternalsType.getSelectedIndex();  }  mechFilter.checkCockpitType=cbxEnableCockpitSearch.isSelected();  if (cbxEnableCockpitSearch.isSelected()) {    mechFilter.cockpitType=cboCockpitType.getSelectedIndex();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.433 -0500",hash_original_method="E6EA1046257028C8ED28AF4C13B7A731",hash_generated_method="BE404AD3B81220A0192E0E3AEA67BFF9") public void run(){  ThreadAuditor.ThreadHandle threadHandle=null;  while (true) {    if (myParser == null) {      myParser=new StringMsgParser();      myParser.setParseExceptionListener(this);    }    DatagramPacket packet;    if (sipStack.threadPoolSize != -1) {synchronized (((UDPMessageProcessor)messageProcessor).messageQueue) {        while (((UDPMessageProcessor)messageProcessor).messageQueue.isEmpty()) {          if (!((UDPMessageProcessor)messageProcessor).isRunning)           return;          try {            if (threadHandle == null) {              threadHandle=sipStack.getThreadAuditor().addCurrentThread();            }            threadHandle.ping();            ((UDPMessageProcessor)messageProcessor).messageQueue.wait(threadHandle.getPingIntervalInMillisecs());          } catch (          InterruptedException ex) {            if (!((UDPMessageProcessor)messageProcessor).isRunning)             return;          }        }        packet=(DatagramPacket)((UDPMessageProcessor)messageProcessor).messageQueue.removeFirst();      }      this.incomingPacket=packet;    } else {      packet=this.incomingPacket;    }    try {      processIncomingDataPacket(packet);    } catch (    Exception e) {      sipStack.getStackLogger().logError("Error while processing incoming UDP packet",e);    }    if (sipStack.threadPoolSize == -1) {      return;    }  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  m_bagger=new Bagging();  m_bagger.setRepresentCopiesUsingWeights(true);  RandomTree rTree=new RandomTree();  m_KValue=m_numFeatures;  if (m_KValue < 1) {    m_KValue=(int)Utils.log2(data.numAttributes() - 1) + 1;  }  rTree.setKValue(m_KValue);  rTree.setMaxDepth(getMaxDepth());  rTree.setDoNotCheckCapabilities(true);  m_bagger.setClassifier(rTree);  m_bagger.setSeed(m_randomSeed);  m_bagger.setNumIterations(m_numTrees);  m_bagger.setCalcOutOfBag(true);  m_bagger.setNumExecutionSlots(m_numExecutionSlots);  m_bagger.buildClassifier(data);}  }
class C{  public boolean turnLayerOn(boolean setting,int index){  try {    return turnLayerOn(setting,getLayerList().get(index));  } catch (  ArrayIndexOutOfBoundsException aoobe) {  }catch (  NullPointerException npe) {  }  return false;}  }
class C{  private void verifyFullCopySupportedOnSnapshot(BlockSnapshot snapshot){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,snapshot.getStorageController());  _log.debug("For Vmax/HDS  does not support full copy on snapshots");  if ((storageSystem != null)) {    _log.debug("Storage System Type ={}",storageSystem.getSystemType());    if ((DiscoveredDataObject.Type.vmax.name().equals(storageSystem.getSystemType())) || (DiscoveredDataObject.Type.hds.name().equals(storageSystem.getSystemType()))) {      throw APIException.badRequests.fullCopyNotSupportedFromSnapshot(storageSystem.getSystemType(),snapshot.getId());    }  }  URI cgUri=snapshot.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgUri)) {    _log.debug("Snapshot in a consistencyGroup is not supported for full copy operation ");    throw APIException.badRequests.fullCopyNotSupportedForConsistencyGroup();  }}  }
class C{  LayoutState createLayoutState(){  return new LayoutState();}  }
class C{  public Object map(Object obj){  Assert.isInstanceOf(ArrayOfWSParamDocument.class,obj);  ArrayOfWSParamDocument documents=(ArrayOfWSParamDocument)obj;  List<DocumentoRegistroVO> result=new ArrayList<DocumentoRegistroVO>();  for (  WSParamDocument doc : documents.getWSParamDocument()) {    if (validateNotNullFile(doc)) {      DocumentoRegistroVO dr=new DocumentoRegistroVO();      dr.setName(doc.getDocumentName());      PaginaDocumentoRegistroVO p=new PaginaDocumentoRegistroVO();      p.setName(doc.getFileName());      DocumentoFisicoVO df=new DocumentoFisicoVO();      df.setContent(doc.getDocumentContent());      df.setLocation(doc.getDocumentLocation());      df.setName(doc.getFileName());      df.setExtension(StringUtils.substringAfterLast(doc.getFileName(),"."));      p.setDocumentoFisico(df);      dr.setPaginas(Arrays.asList(new PaginaDocumentoRegistroVO[]{p}));      result.add(dr);    }  }  return result;}  }
class C{  public ConditionVariable(boolean state){  mCondition=state;}  }
class C{  public Set<SearchIndexEntry> generateIndex(){  achievements();  creatures();  items();  npcs();  return index;}  }
class C{  public ChunkCoordIntPair toPair(){  return new ChunkCoordIntPair(xCoord,zCoord);}  }
class C{  public final void removeHitBox(String name){  hitBoxes.removeIf(null);}  }
class C{  public static void init(){  if (Controller.options.COMPILER_DNA_FILE_NAME.length() != 0) {    readDNA(Controller.options.COMPILER_DNA_FILE_NAME);    initializeCompilerRatioArrays();  }  for (int i=0; i < compilationRates.length; i++) {    AOSLogging.logger.reportCompilationRate(i,compilationRates[i]);  }  for (int i=0; i < speedupRates.length; i++) {    AOSLogging.logger.reportSpeedupRate(i,speedupRates[i]);  }  int maxProfitableCompiler=0;  for (int compiler=1; compiler < numCompilers; compiler++) {    if (compilationRates[compiler] > compilationRates[compiler - 1] || speedupRates[compiler] > speedupRates[compiler - 1]) {      maxProfitableCompiler=compiler;    }  }  int maxOptLevel=getOptLevel(maxProfitableCompiler);  Controller.options.DERIVED_MAX_OPT_LEVEL=Math.min(maxOptLevel,Controller.options.MAX_OPT_LEVEL);  Controller.options.DERIVED_FILTER_OPT_LEVEL=Controller.options.DERIVED_MAX_OPT_LEVEL;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  append(m_doc.createComment(new String(ch,start,length)));}  }
class C{  public static synchronized void loadPackages(boolean verbose){  loadPackages(verbose,false,true);}  }
class C{  public double likelihood(String[] doc,String tag){  double likelihood=0;  if (ntw.rowSum(tag) == 0) {    return likelihood;  }  Counter<String> nwd=new Counter<String>();  for (  String w : doc) {    nwd.inc(w,1);  }  double norm=0;  Map<String,Double> prwd=new Hashtable<String,Double>();  for (  Entry<String,Long> e : nwd) {    double prw=prw(e.getKey());    norm+=prw;    prwd.put(e.getKey(),prw);  }  for (  Entry<String,Double> e : prwd.entrySet()) {    double prw=e.getValue() / norm;    likelihood+=ptr(tag,e.getKey()) * prw * (1.0 - pcm());  }  likelihood+=ptr(tag,NOISE) * pcm();  return likelihood;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.160 -0500",hash_original_method="73074AC3DAB22F190940DA30FB2EC678",hash_generated_method="2276C89DCE0E416DDBB804AF7C9E52F7") static float minimumCosineDistance(float[] vector1,float[] vector2,int numOrientations){  final int len=vector1.length;  float a=0;  float b=0;  for (int i=0; i < len; i+=2) {    a+=vector1[i] * vector2[i] + vector1[i + 1] * vector2[i + 1];    b+=vector1[i] * vector2[i + 1] - vector1[i + 1] * vector2[i];  }  if (a != 0) {    final float tan=b / a;    final double angle=Math.atan(tan);    if (numOrientations > 2 && Math.abs(angle) >= Math.PI / numOrientations) {      return (float)Math.acos(a);    } else {      final double cosine=Math.cos(angle);      final double sine=cosine * tan;      return (float)Math.acos(a * cosine + b * sine);    }  } else {    return (float)Math.PI / 2;  }}  }
class C{  public boolean contains(int x,int y){  return x >= this.x && x < this.x + this.width && y >= this.y && y < this.y + this.height;}  }
class C{  Account(int id,double balance){  this.id=id;  this.balance=balance;  annualInterestRate=0;  dateCreated=new Date();}  }
class C{  private void updateTargetCostEstimate(){  if (target != null) {    h=g + AStarStatic.getDistanceBetweenNodes(this,target) * 10;  } else {    h=0;  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void handleUnrecognizedKey(Object context,String key){}  }
class C{  public boolean acquire(long time) throws Exception {  return _processLock.acquire(time,TimeUnit.SECONDS);}  }
class C{  public CModulesModel(final IDatabase database){  Preconditions.checkNotNull(database,"IE01214: Database can't be null");  m_database=database;  m_database.addListener(m_databaseListener);  if (m_database.isLoaded()) {    for (    final INaviModule module : m_database.getContent().getModules()) {      module.addListener(m_moduleListener);    }  }}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static <T>Predicate<T> memoizePredicate(final Predicate<T> p){  final Function<T,Boolean> memoised=memoizeFunction((Function<T,Boolean>)null);  return null;}  }
class C{  private static Long extractCommentId(String path){  Matcher matcher=Pattern.compile(":comment([0-9]+)$").matcher(path);  return matcher.find() ? Longs.tryParse(matcher.group(1)) : null;}  }
class C{  public static String findEditTable(String tables){  if (!StringUtils.isEmpty(tables)) {    int spacepos=tables.indexOf(' ');    int commapos=tables.indexOf(',');    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {      return tables.substring(0,spacepos);    } else     if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {      return tables.substring(0,commapos);    }    return tables;  } else {    throw new IllegalStateException("Invalid tables");  }}  }
class C{  public E value(){  return value;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  private boolean lastEntry(){  return column.get(column.size() - 1);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REFERENCES);    References references=new References();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    references.setCallId(callId);    super.parse(references);    return references;  }  finally {    if (debug)     dbg_leave("ReferencesParser.parse");  }}  }
class C{  private void buildCollationMapping() throws SQLException {  Map<Integer,String> indexToCharset=null;  Map<Number,String> sortedCollationMap=null;  Map<Integer,String> customCharset=null;  Map<String,Integer> customMblen=null;  if (getCacheServerConfiguration()) {synchronized (dynamicIndexToCharsetMapByUrl) {      indexToCharset=dynamicIndexToCharsetMapByUrl.get(getURL());      sortedCollationMap=dynamicIndexToCollationMapByUrl.get(getURL());      customCharset=customIndexToCharsetMapByUrl.get(getURL());      customMblen=customCharsetToMblenMapByUrl.get(getURL());    }  }  if (indexToCharset == null) {    indexToCharset=new HashMap<Integer,String>();    if (versionMeetsMinimum(4,1,0) && getDetectCustomCollations()) {      java.sql.Statement stmt=null;      java.sql.ResultSet results=null;      try {        sortedCollationMap=new TreeMap<Number,String>();        customCharset=new HashMap<Integer,String>();        customMblen=new HashMap<String,Integer>();        stmt=getMetadataSafeStatement();        try {          results=stmt.executeQuery("SHOW COLLATION");          if (versionMeetsMinimum(5,0,0)) {            Util.resultSetToMap(sortedCollationMap,results,3,2);          } else {            while (results.next()) {              sortedCollationMap.put(results.getLong(3),results.getString(2));            }          }        } catch (        SQLException ex) {          if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {            throw ex;          }        }        for (Iterator<Map.Entry<Number,String>> indexIter=sortedCollationMap.entrySet().iterator(); indexIter.hasNext(); ) {          Map.Entry<Number,String> indexEntry=indexIter.next();          int collationIndex=indexEntry.getKey().intValue();          String charsetName=indexEntry.getValue();          indexToCharset.put(collationIndex,charsetName);          if (collationIndex >= CharsetMapping.MAP_SIZE || !charsetName.equals(CharsetMapping.getMysqlCharsetNameForCollationIndex(collationIndex))) {            customCharset.put(collationIndex,charsetName);          }          if (!CharsetMapping.CHARSET_NAME_TO_CHARSET.containsKey(charsetName)) {            customMblen.put(charsetName,null);          }        }        if (customMblen.size() > 0) {          try {            results=stmt.executeQuery("SHOW CHARACTER SET");            while (results.next()) {              String charsetName=results.getString("Charset");              if (customMblen.containsKey(charsetName)) {                customMblen.put(charsetName,results.getInt("Maxlen"));              }            }          } catch (          SQLException ex) {            if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {              throw ex;            }          }        }        if (getCacheServerConfiguration()) {synchronized (dynamicIndexToCharsetMapByUrl) {            dynamicIndexToCharsetMapByUrl.put(getURL(),indexToCharset);            dynamicIndexToCollationMapByUrl.put(getURL(),sortedCollationMap);            customIndexToCharsetMapByUrl.put(getURL(),customCharset);            customCharsetToMblenMapByUrl.put(getURL(),customMblen);          }        }      } catch (      SQLException ex) {        throw ex;      }catch (      RuntimeException ex) {        SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);        sqlEx.initCause(ex);        throw sqlEx;      } finally {        if (results != null) {          try {            results.close();          } catch (          java.sql.SQLException sqlE) {          }        }        if (stmt != null) {          try {            stmt.close();          } catch (          java.sql.SQLException sqlE) {          }        }      }    } else {      for (int i=1; i < CharsetMapping.MAP_SIZE; i++) {        indexToCharset.put(i,CharsetMapping.getMysqlCharsetNameForCollationIndex(i));      }      if (getCacheServerConfiguration()) {synchronized (dynamicIndexToCharsetMapByUrl) {          dynamicIndexToCharsetMapByUrl.put(getURL(),indexToCharset);        }      }    }  }  this.indexToMysqlCharset=Collections.unmodifiableMap(indexToCharset);  if (customCharset != null) {    this.indexToCustomMysqlCharset=Collections.unmodifiableMap(customCharset);  }  if (customMblen != null) {    this.mysqlCharsetToCustomMblen=Collections.unmodifiableMap(customMblen);  }}  }
class C{  protected void displayBuilderLog(){  List<UserBuilderStatus> matchingStatuses=getMultiRemoteCodenvy().findBuilders(processID);  UserBuilderStatus foundStatus=checkOnlyOne(matchingStatuses,processID,"builder","builders");  if (foundStatus == null) {    return;  }  BuilderState state=foundStatus.getInnerStatus().status();  if (state == BuilderState.IN_QUEUE) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("Logs are not available in IN_QUEUE state");    buffer.reset();    System.out.println(buffer.toString());    return;  }  String log=foundStatus.getProject().getCodenvy().builder().logs(foundStatus.getProject().getInnerReference(),foundStatus.getInnerStatus().taskId()).execute();  System.out.println(log);}  }
class C{  public Object execute(ExecutionEvent event) throws ExecutionException {  TLAEditor tlaEditor=EditorUtil.getTLAEditorWithFocus();  document=tlaEditor.publicGetSourceViewer().getDocument();  try {    ITextSelection selection=(ITextSelection)tlaEditor.getSelectionProvider().getSelection();    Region selectedRegion=new Region(selection.getOffset(),selection.getLength());    int selectedParenIdx=getSelectedParen(selectedRegion);    int lineNumber=selection.getStartLine();    if (lineNumber < 0) {      throw new ParenErrorException("Toolbox bug: bad selected line computed",null,null);    }    setLineRegions(lineNumber);    setRegionInfo();    if (selectedParenIdx < PCOUNT) {      findMatchingRightParen(selectedParenIdx);    } else {      findMatchingLeftParen(selectedParenIdx);    }    tlaEditor.selectAndReveal(currLoc,0);  } catch (  ParenErrorException e) {    IResource resource=ResourceHelper.getResourceByModuleName(tlaEditor.getModuleName());    ErrorMessageEraser listener=new ErrorMessageEraser(tlaEditor,resource);    tlaEditor.getViewer().getTextWidget().addCaretListener(listener);    tlaEditor.getEditorSite().getActionBars().getStatusLineManager().setErrorMessage(e.message);    Region[] regions=e.regions;    if (regions[0] != null) {      try {        Spec spec=ToolboxHandle.getCurrentSpec();        spec.setMarkersToShow(null);        IMarker[] markersToShow=new IMarker[2];        for (int i=0; i < 2; i++) {          IMarker marker=resource.createMarker(PAREN_ERROR_MARKER_TYPE);          Map<String,Integer> markerAttributes=new HashMap<String,Integer>(2);          markerAttributes.put(IMarker.CHAR_START,new Integer(regions[i].getOffset()));          markerAttributes.put(IMarker.CHAR_END,new Integer(regions[i].getOffset() + regions[i].getLength()));          marker.setAttributes(markerAttributes);          markersToShow[i]=marker;        }        spec.setMarkersToShow(markersToShow);      } catch (      CoreException exc) {        System.out.println("GotoMatchingParenHandler.execute threw CoreException");      }    }  }  return null;}  }
class C{  public boolean areNotificationsEnabledForPackage(String pkg,int uid){  checkCallerIsSystem();  return (mAppOps.checkOpNoThrow(AppOpsManager.OP_POST_NOTIFICATION,uid,pkg) == AppOpsManager.MODE_ALLOWED);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public DigitalSignatureValidationException(String message,ReasonEnum reason,Throwable cause){  super(message,cause);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void GetInstance02(boolean mode) throws CertificateException, NoSuchProviderException, IllegalArgumentException, CRLException {  try {    CertificateFactory.getInstance(null,mProv.getName());    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],mProv.getName());      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertificateFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertificateFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider().getName(),mProv.getName());    checkResult(cerF,mode);  }}  }
class C{  public FastStringBuffer fsb(){  return ((FastStringBuffer)m_obj);}  }
class C{  public GridTupleSelfTest(){  super(false);}  }
class C{  @SuppressWarnings("unused") public static boolean isURL(String token){  try {    URL url=new URL(token);    return true;  } catch (  MalformedURLException e) {    return false;  }}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public ServerPrepareResult prepareAndExecute(boolean mustExecuteOnMaster,ServerPrepareResult serverPrepareResult,ExecutionResult executionResult,String sql,final ParameterHolder[] parameters,int resultSetScrollType) throws QueryException {  cmdPrologue();  int statementId=-1;  int parameterCount=parameters.length;  MariaDbType[] parameterTypeHeader=new MariaDbType[parameters.length];  if (getOptions().cachePrepStmts) {    String key=new StringBuilder(getDatabase()).append("-").append(sql).toString();    serverPrepareResult=prepareStatementCache().get(key);    if (serverPrepareResult != null && !serverPrepareResult.incrementShareCounter()) {      serverPrepareResult=null;    }    statementId=(serverPrepareResult == null) ? -1 : serverPrepareResult.getStatementId();  }  ComStmtPrepare comStmtPrepare=null;  QueryException exception=null;  try {    if (serverPrepareResult == null) {      comStmtPrepare=new ComStmtPrepare(this,sql);      comStmtPrepare.send(writer);      try {        serverPrepareResult=comStmtPrepare.read(getPacketFetcher());        statementId=serverPrepareResult.getStatementId();        parameterCount=serverPrepareResult.getParameters().length;      } catch (      QueryException queryException) {        throw queryException;      }    }    if (serverPrepareResult != null && parameters.length < parameterCount) {      throw new QueryException("Parameter at position " + (parameterCount) + " is not set",-1,"07004");    }    for (int i=0; i < parameterCount; i++) {      if (parameters[i].isLongData()) {        new ComStmtLongData().send(writer,statementId,(short)i,parameters[i]);      }    }    writer.startPacket(0);    ComStmtExecute.writeCmd(statementId,parameters,parameterCount,parameterTypeHeader,writer);    writer.finishPacketWithoutRelease(true);    try {      getResult(executionResult,resultSetScrollType,true,true);    } catch (    QueryException qex) {      if (exception == null) {        throw throwErrorWithQuery(parameters,qex,serverPrepareResult);      }    }    if (exception != null)     throw exception;    return serverPrepareResult;  } catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  } finally {    writer.releaseBufferIfNotLogging();  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  protected PlatformTransactionManager determineTransactionManager(TransactionAttribute txAttr){  if (this.transactionManager != null || this.beanFactory == null || txAttr == null) {    return this.transactionManager;  }  String qualifier=txAttr.getQualifier();  if (StringUtils.hasLength(qualifier)) {    return BeanFactoryAnnotationUtils.qualifiedBeanOfType(this.beanFactory,PlatformTransactionManager.class,qualifier);  } else   if (this.transactionManagerBeanName != null) {    return this.beanFactory.getBean(this.transactionManagerBeanName,PlatformTransactionManager.class);  } else   if (this.beanFactory instanceof ListableBeanFactory) {    return BeanFactoryUtils.beanOfTypeIncludingAncestors(((ListableBeanFactory)this.beanFactory),PlatformTransactionManager.class);  } else {    throw new IllegalStateException("Cannot retrieve PlatformTransactionManager beans from non-listable BeanFactory: " + this.beanFactory);  }}  }
class C{  public MenuInflater(Context context,Object realOwner){  mContext=context;  mRealOwner=realOwner;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public synchronized long moveToNextSample(){  queueSize--;  int lastReadIndex=readIndex++;  if (readIndex == capacity) {    readIndex=0;  }  return queueSize > 0 ? offsets[readIndex] : (sizes[lastReadIndex] + offsets[lastReadIndex]);}  }
class C{  public void aquireUpgradeLocks(){  log.info("Start to lock the system to prevent upgrading...");  String leader=chooseOtherNodeSvcId();  boolean flag=coordinatorClientExt.getPersistentLock(leader,upgradeLockId);  log.info("Get upgrade lock for {}, {}",leader,flag);  if (flag) {    if (getTargetInfoLock()) {      System.out.println("Succeed! Upgrade is Locking!");    }  } else {    log.error("Fail to get upgrade lock!");    throw new RuntimeException("Some node grabbed the lock already, " + "please try hold on the upgrade process method or release all first.");  }}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public V remove(Object key){  int hashCode=hash((key == null) ? NULL : key);  int index=hashIndex(hashCode,data.length);  HashEntry<K,V> entry=data[index];  HashEntry<K,V> previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.getKey())) {      V oldValue=entry.getValue();      removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public static void populateRequestMetadata(Map<String,String> headers,ObjectMetadata metadata){  Map<String,Object> rawMetadata=metadata.getRawMetadata();  if (rawMetadata != null) {    for (    Entry<String,Object> entry : rawMetadata.entrySet()) {      String key=entry.getKey();      String value=entry.getValue().toString();      if (key != null)       key=key.trim();      if (value != null)       value=value.trim();      headers.put(key,value);    }  }  Map<String,String> userMetadata=metadata.getUserMetadata();  if (userMetadata != null) {    for (    Entry<String,String> entry : userMetadata.entrySet()) {      String key=entry.getKey();      String value=entry.getValue();      if (key != null)       key=key.trim();      if (value != null)       value=value.trim();      headers.put(OSSHeaders.OSS_USER_METADATA_PREFIX + key,value);    }  }}  }
class C{  public boolean isNegative(){  assertDefined();  boolean negative=false;  if (m_value.compareTo(new BigDecimal(0)) < 0) {    negative=true;  }  return negative;}  }
class C{  public void disabledInit(){  System.out.println("NerdyIterativeRobot IterativeRobot.disabledInit() method... Overload me!");}  }
class C{  @Override public IMessageEditorTab createNewInstance(IMessageEditorController controller,boolean editable){  return new InputTab(controller,editable);}  }
class C{  public void tagGeneratorText(byte[] data) throws IOException {  if (tags != null) {    tags.tagGeneratorText(data);  }}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg){  throw new RuntimeException();}  }
class C{  public GitlabGroup createGroupViaSudo(String name,String path,GitlabUser sudoUser) throws IOException {  return createGroup(name,path,null,null,sudoUser);}  }
class C{  private NmeaReaderFactory(){}  }
class C{  public JavaModelStatus(int code,Throwable throwable){  super(ERROR,JavaCore.PLUGIN_ID,code,"JavaModelStatus",throwable);  this.elements=JavaElement.NO_ELEMENTS;}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){  if (isMaster) {    super.internalFrameClosing(e);  } else {    parentFrame.children.remove(this);    dispose();  }}  }
class C{  public long[] fetchOid(int tag) throws BerException {  long[] result=null;  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    result=fetchOidValue();  } catch (  BerException e) {    next=backup;    throw e;  }  return result;}  }
class C{  protected void construct(ConditionalMutualInfoCalculatorMultiVariate condMiCalc){  this.condMiCalc=condMiCalc;}  }
class C{  public String toString(){  String result="\nBias-Variance Decomposition Segmentation, Cross Validation\n" + "with subsampling.\n";  if (getClassifier() == null) {    return "Invalid setup";  }  result+="\nClassifier    : " + getClassifier().getClass().getName();  if (getClassifier() instanceof OptionHandler) {    result+=Utils.joinOptions(((OptionHandler)m_Classifier).getOptions());  }  result+="\nData File     : " + getDataFileName();  result+="\nClass Index   : ";  if (getClassIndex() == 0) {    result+="last";  } else {    result+=getClassIndex();  }  result+="\nIterations    : " + getClassifyIterations();  result+="\np             : " + getP();  result+="\nTraining Size : " + getTrainSize();  result+="\nSeed          : " + getSeed();  result+="\n\nDefinition   : " + "Kohavi and Wolpert";  result+="\nError         :" + Utils.doubleToString(getError(),4);  result+="\nBias^2        :" + Utils.doubleToString(getKWBias(),4);  result+="\nVariance      :" + Utils.doubleToString(getKWVariance(),4);  result+="\nSigma^2       :" + Utils.doubleToString(getKWSigma(),4);  result+="\n\nDefinition   : " + "Webb";  result+="\nError         :" + Utils.doubleToString(getError(),4);  result+="\nBias          :" + Utils.doubleToString(getWBias(),4);  result+="\nVariance      :" + Utils.doubleToString(getWVariance(),4);  return result;}  }
class C{  public void stop(){  pollRepeater.stop();  overriddenPositionStopWatch.stop();}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.345 -0500",hash_original_method="FB93C1554D708A44568E0208A3D181E0",hash_generated_method="FC1E8895E9E654084A4957FF43CAA4B3") public PMediaAuthorizationHeader createPMediaAuthorizationHeader(String token) throws InvalidArgumentException, ParseException {  if (token == null || token == "")   throw new InvalidArgumentException("The Media-Authorization-Token parameter is null or empty");  PMediaAuthorization mediaAuthorization=new PMediaAuthorization();  mediaAuthorization.setMediaAuthorizationToken(token);  return mediaAuthorization;}  }
class C{  public void onDidOverElement(PLIView view,PLISceneElement element,CGPoint screenPoint,PLPosition scene3DPoint){}  }
class C{  public static DynamicClassLoader create(ClassLoader parent,PathImpl path){  DynamicClassLoader loader=new DynamicClassLoader(parent,false,false);  loader.addLoader(new SimpleLoader(loader,path));  loader.init();  return loader;}  }
class C{  private void nodeId(String s,int t){  nextToken("error occurred in node_id");  if (m_st.ttype == '}') {    if (t == 0) {      m_nodes.addElement(new InfoObject(s));    }    m_st.pushBack();  } else   if (m_st.ttype == '-') {    nextToken("error occurred checking for an edge");    if (m_st.ttype == '>') {      edgeStmt(s);    } else {      System.out.println("error occurred checking for an edge");    }  } else   if (m_st.ttype == '[') {    if (t == 0) {      m_nodes.addElement(new InfoObject(s));      attrList(m_nodes.lastElement());    } else {      attrList(m_edges.lastElement());    }  } else   if (m_st.sval != null) {    if (t == 0) {      m_nodes.addElement(new InfoObject(s));    }    m_st.pushBack();  } else {    System.out.println("error occurred in node_id");  }}  }
class C{  public Converter lookup(Class type) throws Exception {  Class result=cache.fetch(type);  if (result != null) {    return create(result);  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int col, row, numImages, x, y;  int cols, rows;  int a=0;  double noData;  double z, zn;  int progress=0;  String progressMessage="";  String inputFilesString=null;  String[] imageFiles;  long[] n;  double[] mean;  String[] shortNames;  String[] units;  double[] I;  double[] stdDev;  double totalDeviation;  int[] dX;  int[] dY;  double numerator, W;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (args[1].toLowerCase().contains("bishop")) {    dX=new int[]{1,1,-1,-1};    dY=new int[]{-1,1,1,-1};  } else   if (args[1].toLowerCase().contains("queen") || args[1].toLowerCase().contains("king")) {    dX=new int[]{1,1,1,0,-1,-1,-1,0};    dY=new int[]{-1,0,1,1,1,0,-1,-1};  } else {    dX=new int[]{1,0,-1,0};    dY=new int[]{0,1,0,-1};  }  try {    double sigmaZ;    n=new long[numImages];    mean=new double[numImages];    I=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    stdDev=new double[numImages];    double[] E_I=new double[numImages];    double[] varNormality=new double[numImages];    double[] varRandomization=new double[numImages];    double[] zN=new double[numImages];    double[] zR=new double[numImages];    double[] pValueN=new double[numImages];    double[] pValueR=new double[numImages];    double[] data;    NormalDistribution distribution=new NormalDistribution(0,1);    for (a=0; a < numImages; a++) {      progressMessage="Image " + (a + 1) + " of "+ numImages;      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      sigmaZ=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            sigmaZ+=data[col];            n[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      mean[a]=sigmaZ / n[a];      E_I[a]=-1.0 / (n[a] - 1);      totalDeviation=0;      W=0;      numerator=0;      double S2=0;      double wij;      int numNeighbours=dX.length;      double k=0;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            totalDeviation+=(z - mean[a]) * (z - mean[a]);            k+=(z - mean[a]) * (z - mean[a]) * (z - mean[a])* (z - mean[a]);            wij=0;            for (int i=0; i < numNeighbours; i++) {              x=col + dX[i];              y=row + dY[i];              zn=image.getValue(y,x);              if (zn != noData) {                W+=1.0;                numerator+=(z - mean[a]) * (zn - mean[a]);                wij+=1;              }            }            S2+=wij * wij;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      double S1=4 * W;      S2=S2 * 4;      stdDev[a]=Math.sqrt(totalDeviation / (n[a] - 1));      I[a]=n[a] * numerator / (totalDeviation * W);      varNormality[a]=(n[a] * n[a] * S1 - n[a] * S2 + 3 * W * W) / ((W * W) * (n[a] * n[a] - 1));      zN[a]=(I[a] - E_I[a]) / (Math.sqrt(varNormality[a]));      pValueN[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zN[a])));      k=k / (n[a] * stdDev[a] * stdDev[a]* stdDev[a]* stdDev[a]);      varRandomization[a]=(n[a] * ((n[a] * n[a] - 3 * n[a] + 3) * S1 - n[a] * S2 + 3 * W * W) - k * (n[a] * n[a] - n[a]) * S1 - 2 * n[a] * S1 + 6 * W * W) / ((n[a] - 1) * (n[a] - 2) * (n[a] - 3)* W* W);      zR[a]=(I[a] - E_I[a]) / (Math.sqrt(varRandomization[a]));      pValueR[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zR[a])));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress(progressMessage,progress);    }    StringBuilder retstr=new StringBuilder();    DecimalFormat df1=new DecimalFormat("###,###,###,###");    DecimalFormat df2=new DecimalFormat("0.0000");    retstr.append("SPATIAL AUTOCORRELATION\n");    for (a=0; a < numImages; a++) {      retstr.append("\n");      retstr.append("Input image:\t\t\t").append(shortNames[a]).append("\n");      retstr.append("Number of cells included:\t\t").append(df1.format(n[a])).append("\n");      if (units[a].equals("")) {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append("\n");      } else {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append(" ").append(units[a]).append("\n");      }      retstr.append("Spatial autocorrelation (Moran's I):\t").append(df2.format(I[a])).append("\n");      retstr.append("Expected value:\t\t").append(df2.format(E_I[a])).append("\n");      retstr.append("Variance of I (normality assumption):\t").append(df2.format(varNormality[a])).append("\n");      retstr.append("z test stat (normality assumption):\t").append(df2.format(zN[a])).append("\n");      retstr.append("p-value (normality assumption):\t").append(df2.format(pValueN[a])).append("\n");      retstr.append("Variance of I (randomization assumption):\t").append(df2.format(varRandomization[a])).append("\n");      retstr.append("z test stat (randomization assumption):\t").append(df2.format(zR[a])).append("\n");      retstr.append("p-value (randomization assumption):\t").append(df2.format(pValueR[a])).append("\n");    }    returnData(retstr.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  MJournal[] journals=getJournals(true);  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive())     continue;    if (DOCSTATUS_Completed.equals(journal.getDocStatus()))     ; else {      m_processMsg="All Journals need to be Completed: " + journal.getSummary();      return false;    }  }  MJournalBatch reverse=new MJournalBatch(this);  reverse.setDateDoc(getDateDoc());  reverse.setC_Period_ID(getC_Period_ID());  reverse.setDateAcct(getDateAcct());  String description=reverse.getDescription();  if (description == null)   description="** " + getDocumentNo() + " **"; else   description+=" ** " + getDocumentNo() + " **";  reverse.setDescription(description);  reverse.setReversal_ID(getGL_JournalBatch_ID());  reverse.saveEx();  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive())     continue;    if (journal.reverseCorrectIt(reverse.getGL_JournalBatch_ID()) == null) {      m_processMsg="Could not reverse " + journal;      return false;    }    journal.saveEx();  }  setReversal_ID(reverse.getGL_JournalBatch_ID());  save();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public void remove(boolean priority,Marker m){  lock.lock();  sendEmptyMessage(BLANK);  if (priority) {    mOnScreenRemoveMarkerTasks.add(m);  } else {    mRemoveMarkerTasks.add(m);  }  lock.unlock();}  }
class C{  public ImageRequest(String url,Resources resources,ContentResolver contentResolver,Response.Listener<BitmapDrawable> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mResources=resources;  mContentResolver=contentResolver;  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  defaultOptions=getDefaultOptions();}  }
class C{  public void read(ExceptionlessInputStream in){  super.read(in);  POSBaselineLearner.read(in,firstCapitalized);  POSBaselineLearner.read(in,notFirstCapitalized);}  }
class C{  private void closeStartIfNecessary() throws IOException {  if (closeStart) {    flushAttributes();    writer.write('>');    closeStart=false;    if (isScriptOrStyle() && !scriptOrStyleSrc) {      isXhtml=getContentType().equals(RIConstants.XHTML_CONTENT_TYPE);      if (isXhtml) {        if (!writingCdata) {          if (isScript) {            writer.write("\n//<![CDATA[\n");          } else {            writer.write("\n<![CDATA[\n");          }        }      } else {        if (isScriptHidingEnabled) {          writer.write("\n<!--\n");        }      }      origWriter=writer;      if (scriptBuffer == null) {        scriptBuffer=new FastStringWriter(1024);      }      scriptBuffer.reset();      writer=scriptBuffer;      isScript=false;      isStyle=false;    }  }}  }
class C{  public void testRecognizeUdpSymmetricFirewall() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(discovererAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_UDP_FIREWALL);  expectedReturn.setPublicAddress(discovererAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public static String createMatlabString(double[][] matrix){  StringBuffer matrixString=new StringBuffer();  if (matrix == null) {    return "";  }  matrixString.append("[");  int numberOfColumns=matrix.length;  int numberOfRows=matrix[0].length;  for (int i=0; i < numberOfRows; i++) {    for (int j=0; j < numberOfColumns - 1; j++) {      matrixString.append(matrix[i][j] + VALUE_DELIMITER);    }    matrixString.append(matrix[i][numberOfColumns - 1] + ROW_DELIMITER);  }  ;  matrixString.deleteCharAt(matrixString.length() - 1);  matrixString.append("]");  return matrixString.toString();}  }
class C{  public static void assertSame(Object expected,Object actual){  if (verbose) {    log("assertSame(" + expected + ", "+ actual+ ")");  }  assertBool(expected == actual);}  }
class C{  public void restoreDefaultSyntaxScheme(){  setSyntaxScheme(getDefaultSyntaxScheme());}  }
class C{  public void forEachOrdered(BiConsumer<? super K,? super V> action){  inner.forEachOrdered(null);}  }
class C{  protected UpdatableResultSet(String catalog,Field[] fields,RowData tuples,MySQLConnection conn,StatementImpl creatorStmt) throws SQLException {  super(catalog,fields,tuples,conn,creatorStmt);  checkUpdatability();  this.populateInserterWithDefaultValues=this.connection.getPopulateInsertRowWithDefaultValues();}  }
class C{  public void endVisit(TryStatement node){}  }
class C{  public final void reset(byte[] encoded) throws IOException {  buffer=encoded;  next();}  }
class C{  private static void printAccounts(Accounts accounts){  System.out.println("\n----- Accounts Collection -----\n");  for (  Account account : accounts.getItems()) {    System.out.println("Account ID: " + account.getId());    System.out.println("Account Name: " + account.getName());    System.out.println("Account Created: " + account.getCreated());    System.out.println("Account Updated: " + account.getUpdated());  }}  }
class C{  public Any2sRGBRed(CachableRed src){  super(src,src.getBounds(),fixColorModel(src),fixSampleModel(src),src.getTileGridXOffset(),src.getTileGridYOffset(),null);  ColorModel srcCM=src.getColorModel();  if (srcCM == null)   return;  ColorSpace srcCS=srcCM.getColorSpace();  if (srcCS == ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB))   srcIsLsRGB=true;}  }
class C{  private void addGeolocSharingInvitationNotification(Intent invitation,ContactId contact){  Intent intent=new Intent(invitation);  intent.setClass(this,ReceiveGeolocSharing.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  int uniqueId=Utils.getUniqueIdForPendingIntent();  PendingIntent contentIntent=PendingIntent.getActivity(this,uniqueId,intent,PendingIntent.FLAG_ONE_SHOT);  String displayName=RcsContactUtil.getInstance(this).getDisplayName(contact);  String title=getString(R.string.title_recv_geoloc_sharing);  NotificationCompat.Builder notif=new NotificationCompat.Builder(this);  notif.setContentIntent(contentIntent);  notif.setSmallIcon(R.drawable.ri_notif_csh_icon);  notif.setWhen(System.currentTimeMillis());  notif.setAutoCancel(true);  notif.setOnlyAlertOnce(true);  notif.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  notif.setDefaults(Notification.DEFAULT_VIBRATE);  notif.setContentTitle(title);  notif.setContentText(getString(R.string.label_from_args,displayName));  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(uniqueId,notif.build());}  }
class C{  void visitAndTransform(TemplateElement[] elementBuffer,TemplateTransformModel transform,Map args) throws TemplateException, IOException {  try {    Writer tw=transform.getWriter(out,args);    if (tw == null)     tw=EMPTY_BODY_WRITER;    TransformControl tc=tw instanceof TransformControl ? (TransformControl)tw : null;    Writer prevOut=out;    out=tw;    try {      if (tc == null || tc.onStart() != TransformControl.SKIP_BODY) {        do {          visit(elementBuffer);        } while (tc != null && tc.afterBody() == TransformControl.REPEAT_EVALUATION);      }    } catch (    Throwable t) {      try {        if (tc != null) {          tc.onError(t);        } else {          throw t;        }      } catch (      TemplateException e) {        throw e;      }catch (      IOException e) {        throw e;      }catch (      RuntimeException e) {        throw e;      }catch (      Error e) {        throw e;      }catch (      Throwable e) {        throw new UndeclaredThrowableException(e);      }    } finally {      out=prevOut;      tw.close();    }  } catch (  TemplateException te) {    handleTemplateException(te);  }}  }
class C{  public static String longest(SList<String> list){  int maxDex=0;  for (int i=0; i < list.size(); i+=1) {    String longestString=list.get(maxDex);    String thisString=list.get(i);    if (thisString.length() > longestString.length()) {      maxDex=i;    }  }  return list.get(maxDex);}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public final int popAndTop(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;  return (m_firstFree == 0) ? DTM.NULL : m_map[m_firstFree - 1];}  }
class C{  private void unwrapData() throws IgniteCheckedException, SSLException {  if (log.isDebugEnabled())   log.debug("Unwrapping received data.");  inNetBuf.flip();  SSLEngineResult res=unwrap0();  inNetBuf.compact();  checkStatus(res);  renegotiateIfNeeded(res);}  }
class C{  public long size(){  long total=0L;  if (0 == this.depth) {    total+=this.lkpIndex.size() * (16 + 24);    total+=this.lkpIndex.size() * (8 * 15 + 24);  } else {    for (    Map<String,GeoBloomFilter> chunkIndex : this.index.values()) {      total+=chunkIndex.size() * (16 + 24);      for (      GeoBloomFilter filter : chunkIndex.values()) {        total+=filter.size();      }    }  }  return total;}  }
class C{  public void updatePortParameters(SerialPort port){  if (initialized && port != null) {    try {      port.setSerialPortParams(Integer.valueOf(cbBaudrate.getSelectedItem().toString()).intValue(),cbDataBits.getSelectedIndex() + 5,cbStopBits.getSelectedIndex() + 1,cbParity.getSelectedIndex());      int mode=0;      mode|=(cbProtocolRx.getSelectedIndex() == 1) ? SerialPort.FLOWCONTROL_RTSCTS_IN : (cbProtocolRx.getSelectedIndex() == 2) ? SerialPort.FLOWCONTROL_XONXOFF_IN : 0;      mode|=(cbProtocolTx.getSelectedIndex() == 1) ? SerialPort.FLOWCONTROL_RTSCTS_OUT : (cbProtocolTx.getSelectedIndex() == 2) ? SerialPort.FLOWCONTROL_XONXOFF_OUT : 0;      port.setFlowControlMode(mode);    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public static Logger logger(){  try {    String loggerName=Configuration.getStringValue(AVKey.LOGGER_NAME,Configuration.DEFAULT_LOGGER_NAME);    return logger(loggerName);  } catch (  Exception e) {    return logger(Configuration.DEFAULT_LOGGER_NAME);  }}  }
class C{  public static MetadataContext forContext(AltFormat format,String projection,Version version){  if (format == null && projection == null && version == null) {    return null;  }  return new MetadataContext(format,projection,version);}  }
class C{  public void requestFileSystem(final String path) throws DebugException {  try {    m_debugger.requestFileSystem(path);  } catch (  final DebugExceptionWrapper exception) {    throw new DebugException(exception);  }}  }
class C{  public void breakpoint(int lineNumber) throws IOException, InterruptedException, DebuggerException {  String command="break " + lineNumber;  GdbOutput gdbOutput=sendCommand(command);  GdbBreak.parse(gdbOutput);}  }
class C{  public HandlerScriptingEventListener(String ns,String et,AbstractElement e){  eventNamespaceURI=ns;  eventType=et;  handlerElement=e;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  private void validateReturnType(MethodDeclaration methodDecl){  ITypeBinding returnTypeBinding=getReturnTypeBinding(methodDecl);  if (returnTypeBinding == null) {    return;  }  if (ClientBundleUtilities.isResourceType(returnTypeBinding) || ClientBundleUtilities.isClientBundle(returnTypeBinding)) {    return;  }  result.addProblem(ClientBundleProblem.createInvalidReturnType(methodDecl.getReturnType2()));}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public ObjectFactory(){}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private boolean isValidSpeed(long time,double speed,long lastLocationTime,double lastLocationSpeed){  if (speed == 0) {    return false;  }  if (Math.abs(speed - 128) < 1) {    return false;  }  long timeDifference=time - lastLocationTime;  double speedDifference=Math.abs(lastLocationSpeed - speed);  if (speedDifference > MAX_ACCELERATION * timeDifference) {    return false;  }  if (speedBuffer.isFull()) {    double average=speedBuffer.getAverage();    double diff=Math.abs(average - speed);    return (speed < average * 10) && (diff < MAX_ACCELERATION * timeDifference);  } else {    return true;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final UnregisterAllInterest singleton(){  return SINGLETON;}  }
class C{  public static int createShader(String resource,int type) throws IOException {  return createShader(resource,type,null);}  }
class C{  private void focusGained(Component source){synchronized (source.getTreeLock()) {synchronized (this) {      if ("sun.awt.im.CompositionArea".equals(source.getClass().getName())) {      } else       if (getComponentWindow(source) instanceof InputMethodWindow) {      } else {        if (!source.isDisplayable()) {          return;        }        if (inputMethod != null) {          if (currentClientComponent != null && currentClientComponent != source) {            if (!isInputMethodActive) {              activateInputMethod(false);            }            endComposition();            deactivateInputMethod(false);          }        }        currentClientComponent=source;      }      awtFocussedComponent=source;      if (inputMethod instanceof InputMethodAdapter) {        ((InputMethodAdapter)inputMethod).setAWTFocussedComponent(source);      }      if (!isInputMethodActive) {        activateInputMethod(true);      }      InputMethodContext inputContext=((InputMethodContext)this);      if (!inputContext.isCompositionAreaVisible()) {        InputMethodRequests req=source.getInputMethodRequests();        if (req != null && inputContext.useBelowTheSpotInput()) {          inputContext.setCompositionAreaUndecorated(true);        } else {          inputContext.setCompositionAreaUndecorated(false);        }      }      if (compositionAreaHidden == true) {        ((InputMethodContext)this).setCompositionAreaVisible(true);        compositionAreaHidden=false;      }    }  }}  }
class C{  @Override public void stopAllMutators(){  Trace.trace(Item.SCHEDULER,"stopAllMutators");synchronized (trigger) {    setState(BLOCKING);    trigger.notifyAll();  }  waitForGCStart();  Trace.trace(Item.SCHEDULER,"stopAllMutators - done");}  }
class C{  public byte nextByte(){  return (byte)(next(8));}  }
class C{  public static ShortBuffer createShortBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 2);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asShortBuffer();}  }
class C{  public PieSectionEntity(Shape area,PieDataset dataset,int pieIndex,int sectionIndex,Comparable sectionKey,String toolTipText,String urlText){  super(area,toolTipText,urlText);  this.dataset=dataset;  this.pieIndex=pieIndex;  this.sectionIndex=sectionIndex;  this.sectionKey=sectionKey;}  }
class C{  int readUnsignedLeb128() throws IOException {  int result=0;  byte val;  do {    val=readByte();    result=(result << 7) | (val & 0x7f);  } while (val < 0);  return result;}  }
class C{  protected void usage(){  PrintStream out=System.out;  out.println("cacheserver start [-J<vmarg>]* [<attName>=<attValue>]* [-dir=<workingdir>] [-classpath=<classpath>] [-disable-default-server] [-rebalance] [-lock-memory] [-server-port=<server-port>] [-server-bind-address=<server-bind-address>] [-critical-heap-percentage=<critical-heap-percentage>] [-eviction-heap-percentage=<eviction-heap-percentage>] [-critical-off-heap-percentage=<critical-off-heap-percentage>] [-eviction-off-heap-percentage=<eviction-off-heap-percentage>]\n");  out.println("\t" + LocalizedStrings.CacheServerLauncher_STARTS_A_GEMFIRE_CACHESERVER_VM.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_VMARG.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_CLASSPATH.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_ATTNAME.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_REBALANCE.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_DISABLE_DEFAULT_SERVER.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_SERVER_PORT.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_SERVER_BIND_ADDRESS.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_CRITICAL_HEAP_PERCENTAGE.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_EVICTION_HEAP_PERCENTAGE.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_CRITICAL_OFF_HEAP_PERCENTAGE.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_EVICTION_OFF_HEAP_PERCENTAGE.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_LOCK_MEMORY.toLocalizedString());  out.println();  out.println("cacheserver stop [-dir=<workingdir>]");  out.println("\t" + LocalizedStrings.CacheServerLauncher_STOPS_A_GEMFIRE_CACHESERVER_VM.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());  out.println();  out.println("cacheserver status [-dir=<workingdir>]");  out.println("\t" + LocalizedStrings.CacheServerLauncher_STATUS.toLocalizedString());  out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());}  }
class C{  static byte[] decodeUncompressedAddressToBytes(long addr){  assert (addr & COMPRESSED_BIT) == 0 : "Did not expect encoded address to be compressed";  return decodeAddressToRawBytes(addr);}  }
class C{  public void load() throws GitException {  StatusCommand status=nativeGit.createStatusCommand().setFormat(StatusFormat.PORCELAIN);  List<String> statusOutput=status.execute();  setClean(statusOutput.size() == 0);  if (!isClean()) {    added=new ArrayList<>();    changed=new ArrayList<>();    removed=new ArrayList<>();    missing=new ArrayList<>();    modified=new ArrayList<>();    untracked=new ArrayList<>();    untrackedFolders=new ArrayList<>();    conflicting=new ArrayList<>();    for (    String statusLine : statusOutput) {      if (!(addIfMatches(conflicting,statusLine,'A','A') || addIfMatches(conflicting,statusLine,'D','D') || addIfMatches(conflicting,statusLine,'U','*')|| addIfMatches(conflicting,statusLine,'*','U'))) {        addIfMatches(added,statusLine,'A','*');        addIfMatches(removed,statusLine,'D','*');        addIfMatches(changed,statusLine,'M','*');        addIfMatches(missing,statusLine,'*','D');        addIfMatches(modified,statusLine,'*','M');      }      if (statusLine.endsWith("/")) {        addIfMatches(untrackedFolders,statusLine.substring(0,statusLine.length() - 1),'?','?');      } else {        addIfMatches(untracked,statusLine,'?','?');      }    }  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public int distanceSquared(Vector4i v){  int dx=this.x - v.x;  int dy=this.y - v.y;  int dz=this.z - v.z;  int dw=this.w - v.w;  return dx * dx + dy * dy + dz * dz + dw * dw;}  }
class C{  private void resolveAttrs(@Nullable AttributeSet attrs,int defStyle,@StyleRes int defStyleRes){  if (attrs == null) {    return;  }  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.com_jameskelso_android_widget_PinchToZoomImageView,defStyle,defStyleRes);  int minBitmapWidth=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_minBitmapWidth,0);  int minBitmapHeight=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_minBitmapHeight,0);  if (minBitmapWidth != 0 || minBitmapHeight != 0) {    mMatrixHelper.setBitmapMinimumSize(minBitmapWidth,minBitmapHeight);  }  int maxBitmapWidth=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_maxBitmapWidth,0);  int maxBitmapHeight=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_maxBitmapHeight,0);  if (maxBitmapWidth != 0 || maxBitmapHeight != 0) {    mMatrixHelper.setBitmapMaximumSize(maxBitmapWidth,maxBitmapHeight);  }  int panThreshold=a.getInt(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_panThreshold,-1);  if (panThreshold != -1) {    mTouchHelper.setPanThreshold(panThreshold);  }  boolean pinAxes=a.getBoolean(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_pinAxesSmallerThanBounds,true);  mMatrixHelper.setPinAxesSmallerThanViewBounds(pinAxes);  int translationExtraLeft=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_transExtraLeft,0);  int translationExtraTop=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_transExtraTop,0);  int translationExtraRight=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_transExtraRight,0);  int translationExtraBottom=a.getDimensionPixelSize(R.styleable.com_jameskelso_android_widget_PinchToZoomImageView_transExtraBottom,0);  if (translationExtraLeft != 0 || translationExtraTop != 0 || translationExtraRight != 0 || translationExtraBottom != 0) {    mMatrixHelper.setTranslationExtra(translationExtraLeft,translationExtraTop,translationExtraRight,translationExtraBottom);  }  a.recycle();  if (Build.VERSION.SDK_INT >= 16) {    mMatrixHelper.setCropToPadding(getCropToPadding());  }  mMatrixHelper.setPadding(getPaddingLeft(),getPaddingTop(),getPaddingRight(),getPaddingBottom());}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType){  return showInternalConfirmDialog(parentComponent,message,title,optionType,messageType,null);}  }
class C{  public final void renameClass(String oldname,String newname){  ArrayList list;  int n;  if (oldname.equals(newname))   return;  if (oldname.equals(thisclassname))   thisclassname=newname;  oldname=Descriptor.toJvmName(oldname);  newname=Descriptor.toJvmName(newname);  constPool.renameClass(oldname,newname);  AttributeInfo.renameClass(attributes,oldname,newname);  list=methods;  n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    String desc=minfo.getDescriptor();    minfo.setDescriptor(Descriptor.rename(desc,oldname,newname));    AttributeInfo.renameClass(minfo.getAttributes(),oldname,newname);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    String desc=finfo.getDescriptor();    finfo.setDescriptor(Descriptor.rename(desc,oldname,newname));    AttributeInfo.renameClass(finfo.getAttributes(),oldname,newname);  }}  }
class C{  private void doBuild(final Map<?,?> args,final IProgressMonitor monitor,int kind) throws CoreException {  boolean incremental=(kind == IncrementalProjectBuilder.INCREMENTAL_BUILD || kind == IncrementalProjectBuilder.AUTO_BUILD);  IProject project=getProject();  IResource resource=project;  List<WorkItem> files;  if (incremental) {    IResourceDelta resourceDelta=getDelta(project);    boolean configChanged=!isConfigUnchanged(resourceDelta);    if (configChanged) {      files=new ArrayList<WorkItem>();      files.add(new WorkItem(project));    } else {      files=ResourceUtils.collectIncremental(resourceDelta);      if (files.size() == 1) {        IResource corespondingResource=files.get(0).getCorespondingResource();        if (corespondingResource != null) {          resource=corespondingResource;        }      }    }  } else {    files=new ArrayList<WorkItem>();    files.add(new WorkItem(project));  }  work(resource,files,monitor);}  }
class C{  public void testFailureWithFailureThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3);  breaker.close();  ClosedState state=new ClosedState(breaker);  state.recordFailure();  state.recordSuccess();  state.recordFailure();  state.recordFailure();  assertTrue(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  static byte[] concatDigests(DigestValue... items) throws Exception {  ASN1Encodable[] digestList=new ASN1Encodable[items.length];  for (int i=0; i < items.length; ++i) {    digestList[i]=singleDigest(items[i].getDigestMethod(),items[i].getDigestValue());  }  DERSequence step=new DERSequence(digestList);  return step.getEncoded(DER);}  }
class C{  @SuppressWarnings("unchecked") private static <T extends Throwable>void sneakyThrow2(Throwable t) throws T {  throw (T)t;}  }
class C{  public static <A>MaybeError<A> just(A a){  return new MaybeError<>(true,a);}  }
class C{  public Money subAssign(final Money money){  if (currency_.eq(money.currency_)) {    value_-=money.value_;  } else   if (conversionType == Money.ConversionType.BaseCurrencyConversion) {    this.convertToBase();    final Money tmp=money.clone();    tmp.convertToBase();    this.subAssign(tmp);  } else   if (conversionType == Money.ConversionType.AutomatedConversion) {    final Money tmp=money.clone();    tmp.convertTo(currency_);    this.subAssign(tmp);  } else   throw new LibraryException("currency mismatch and no conversion specified");  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void readObject(){}  }
class C{  public boolean contains(MyRectangle2D r){  return getDistance(y,r.getY()) + r.getHeight() / 2 <= height / 2 && getDistance(x,r.getX()) + r.getWidth() / 2 <= width / 2 && height / 2 + r.getHeight() / 2 <= height && width / 2 + r.getWidth() / 2 <= width;}  }
class C{  public DtoCategoryServiceImpl(final DtoFactory dtoFactory,final GenericService<Category> categoryGenericService,final GenericService<Shop> shopGenericService,final GenericService<ShopCategory> shopCategoryGenericService,final GenericService<ProductType> productTypeService,final DtoAttributeService dtoAttributeService,final GenericDAO<AttrValueEntityCategory,Long> attrValueEntityCategoryDao,final ImageService imageService,final AdaptersRepository adaptersRepository,final SystemService systemService){  super(dtoFactory,categoryGenericService,adaptersRepository);  this.shopCategoryGenericService=shopCategoryGenericService;  this.productTypeService=productTypeService;  this.attrValueEntityCategoryDao=attrValueEntityCategoryDao;  this.dtoAttributeService=dtoAttributeService;  this.shopGenericService=shopGenericService;  this.systemService=systemService;  this.attributeService=dtoAttributeService.getService();  this.attrValueAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(AttrValueCategoryDTO.class),attributeService.getGenericDao().getEntityFactory().getImplClass(AttrValueCategory.class));  this.shopCategoryAssembler=DTOAssembler.newAssembler(dtoFactory.getImplClass(ShopCategoryDTO.class),attributeService.getGenericDao().getEntityFactory().getImplClass(ShopCategory.class));  this.imageService=imageService;}  }
class C{  public static Pos3D fromMotion(Entity entity){  return new Pos3D(entity.motionX,entity.motionY,entity.motionZ);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  FloatVectorSpecies s=(FloatVectorSpecies)species;  MersenneTwisterFast rng=state.random[thread];  for (int x=0; x < genome.length; x++)   if (rng.nextBoolean(s.mutationProbability(x))) {    float old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case FloatVectorSpecies.C_GAUSS_MUTATION:        gaussianMutation(state,rng,s,x);      break;case FloatVectorSpecies.C_POLYNOMIAL_MUTATION:    polynomialMutation(state,rng,s,x);  break;case FloatVectorSpecies.C_RESET_MUTATION:floatResetMutation(rng,s,x);break;case FloatVectorSpecies.C_INTEGER_RESET_MUTATION:integerResetMutation(rng,s,x);break;case FloatVectorSpecies.C_INTEGER_RANDOM_WALK_MUTATION:integerRandomWalkMutation(rng,s,x);break;default :state.output.fatal("In FloatVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public SwapSpaceEvent(ClusterNode node,String msg,int type,@Nullable String space){  super(node,msg,type);  this.space=space;}  }
class C{  public void fireTableRowsDeleted(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));}  }
class C{  public void prependModel(Model model){  models.add(0,model);}  }
class C{  public double quadraticMean(){  return quadraticMean.reduce(this);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  ComputeElementList response=client.get(ComputeElementList.class,baseUrl);  return defaultList(response.getComputeElements());}  }
class C{  private Element generateBranch(TreeType treeType,RootedTree tree,Node node,String nodeName,double startLatitude,double finishLatitude,double startLongitude,double finishLongitude,double startAltitude,double finishAltitude,double peakPosition,double peakAltitude,double startDate,double finishDate,double ageCutOff,LineStyle startStyle,LineStyle finishStyle,int divisionCount,List<Element> styles){  Element element;  Double rate=(Double)node.getAttribute("rate");  Double support=(Double)node.getAttribute("posterior");  double height=tree.getHeight(node);  boolean hasDivisionStyles=startStyle != null && finishStyle != null;  if (divisionCount > 0) {    double latDiff=finishLatitude - startLatitude;    double latDelta=latDiff / divisionCount;    double longDiff=finishLongitude - startLongitude;    double longDelta=longDiff / divisionCount;    double altDiff=finishAltitude - startAltitude;    double altDelta=altDiff / divisionCount;    double dateDiff=finishDate - startDate;    double dateDelta=dateDiff / divisionCount;    double lastLatitude=startLatitude;    double latitude=startLatitude + latDelta;    double lastLongitude=startLongitude;    double longitude=startLongitude + longDelta;    double x=-peakPosition;    double xDelta=1.0 / divisionCount;    double a=peakAltitude - finishAltitude;    if (peakPosition == 0.5) {      a*=4;    }    double altitude=peakAltitude - (a * (x * x));    double lastAltitude=altitude;    x+=xDelta;    double date=startDate;    String styleName=null;    if (!hasDivisionStyles && startStyle != null) {      styleName=nodeName + "_style";      styles.add(generateLineStyle(styleName,startStyle.getWidth(),startStyle.getColor()));    }    element=generateContainer("Folder",nodeName,null,(styleName != null ? "#" + styleName : null));    for (int division=0; division < divisionCount; division++) {      if (ageCutOff == 0.0 || date > ageCutOff) {        String partName=nodeName + "_part" + (division + 1);        styleName=null;        if (hasDivisionStyles) {          styleName=partName + "_style";        }        Element placeMark=generateContainer("Placemark",partName,null,(styleName != null ? "#" + styleName : null));        annotateBranch(placeMark,height,startDate,finishDate,rate,support);        if (hasDivisionStyles) {          double width=startStyle.getWidth();          Color color=getBlendedColor(((float)division) / (divisionCount - 1),startStyle.getColor(),finishStyle.getColor());          styles.add(generateLineStyle(styleName,width,color));        }        if (dateDiff > 0.0) {          Element timeSpan=new Element("TimeSpan");          timeSpan.addContent(generateElement("begin",getKMLDate(date)));          placeMark.addContent(timeSpan);        }        Element lineString=new Element("LineString");        Element coordinates=new Element("coordinates");        if (altDiff > 0.0 || peakAltitude > 0.0) {          lineString.addContent(generateElement("altitudeMode",altitudeMode));          altitude=peakAltitude - (a * (x * x));          coordinates.addContent("" + lastLongitude + ","+ lastLatitude+ ","+ lastAltitude+ "\r");          coordinates.addContent("" + longitude + ","+ latitude+ ","+ altitude+ "\r");        } else {          lineString.addContent(generateElement("altitudeMode","clampToGround"));          lineString.addContent(generateElement("tessellate",true));          coordinates.addContent("" + lastLongitude + ","+ lastLatitude+ "\r");          coordinates.addContent("" + longitude + ","+ latitude+ "\r");        }        lastLatitude=latitude;        latitude+=latDelta;        lastLongitude=longitude;        longitude+=longDelta;        lastAltitude=altitude;        x+=xDelta;        date+=dateDelta;        lineString.addContent(coordinates);        placeMark.addContent(lineString);        element.addContent(placeMark);      }    }  } else {    String styleName=null;    if (startStyle != null) {      styleName=nodeName + "_style";      double width=startStyle.getWidth();      styles.add(generateLineStyle(styleName,width,startStyle.getColor()));    }    element=generateContainer("Placemark",nodeName,null,(styleName != null ? "#" + styleName : null));    annotateBranch(element,height,startDate,finishDate,rate,support);    Element lineString=new Element("LineString");    lineString.addContent(generateElement("altitudeMode",altitudeMode));    Element coordinates=new Element("coordinates");    if (treeType == TreeType.RECTANGLE_TREE) {      coordinates.addContent("" + finishLongitude + ","+ finishLatitude+ ","+ finishAltitude+ "\r");      coordinates.addContent("" + finishLongitude + ","+ finishLatitude+ ","+ startAltitude+ "\r");      coordinates.addContent("" + startLongitude + ","+ startLatitude+ ","+ startAltitude+ "\r");    } else {      coordinates.addContent("" + finishLongitude + ","+ finishLatitude+ ","+ finishAltitude+ "\r");      coordinates.addContent("" + startLongitude + ","+ startLatitude+ ","+ startAltitude+ "\r");    }    lineString.addContent(coordinates);    element.addContent(lineString);  }  return element;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  void openStream() throws IOException {  StringBuilder stream=new StringBuilder();  stream.append("<stream:stream");  stream.append(" to=\"").append(connection.getServiceName()).append("\"");  stream.append(" xmlns=\"jabber:client\"");  stream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");  stream.append(" version=\"1.0\">");  writer.write(stream.toString());  writer.flush();}  }
class C{  public Matrix4x3f m30(float m30){  this.m30=m30;  properties&=~(PROPERTY_IDENTITY);  return this;}  }
class C{  public String toString(){  java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("NTNumericCredential.name","sun.security.util.AuthResources"));  Object[] source={Long.toString(impersonationToken)};  return form.format(source);}  }
class C{  public void dropComplete(boolean success){  getDropTargetContext().dropComplete(success);}  }
class C{  public BerkeleyMatch(){}  }
class C{  private static void fillBasin(DTSweepContext tcx,AdvancingFrontNode node){  if (orient2d(node.point,node.next.point,node.next.next.point) == Orientation.CCW) {    tcx.basin.leftNode=node;  } else {    tcx.basin.leftNode=node.next;  }  tcx.basin.bottomNode=tcx.basin.leftNode;  while (tcx.basin.bottomNode.hasNext() && tcx.basin.bottomNode.point.getY() >= tcx.basin.bottomNode.next.point.getY()) {    tcx.basin.bottomNode=tcx.basin.bottomNode.next;  }  if (tcx.basin.bottomNode == tcx.basin.leftNode) {    return;  }  tcx.basin.rightNode=tcx.basin.bottomNode;  while (tcx.basin.rightNode.hasNext() && tcx.basin.rightNode.point.getY() < tcx.basin.rightNode.next.point.getY()) {    tcx.basin.rightNode=tcx.basin.rightNode.next;  }  if (tcx.basin.rightNode == tcx.basin.bottomNode) {    return;  }  tcx.basin.width=tcx.basin.rightNode.getPoint().getX() - tcx.basin.leftNode.getPoint().getX();  tcx.basin.leftHighest=tcx.basin.leftNode.getPoint().getY() > tcx.basin.rightNode.getPoint().getY();  fillBasinReq(tcx,tcx.basin.bottomNode);}  }
class C{  public boolean isEmpty(){  return width == 0 || height == 0;}  }
class C{  public boolean isValid(){  boolean valid=true;  if (endtime.getTime() < System.currentTimeMillis()) {    valid=false;  } else   if (starttime != null) {    if (starttime.getTime() > System.currentTimeMillis()) {      valid=false;    }  } else {    if (authtime.getTime() > System.currentTimeMillis()) {      valid=false;    }  }  return valid;}  }
class C{  public static double dnorm(double x){  return Math.exp(-x * x / 2.) * PSI;}  }
class C{  public static Message deserialize(final Deserializer deserializer,final Account sender,final Account recipient){  final int type=deserializer.readInt("type");switch (type) {case MessageTypes.PLAIN:    return new PlainMessage(deserializer);case MessageTypes.SECURE:  return new SecureMessage(deserializer,sender,recipient);}throw new IllegalArgumentException("Unknown message type: " + type);}  }
class C{  private void parseUsingPS2ascii(final File inputFile,final File outputFile) throws Exception {  int execCode=0;  StringBuilder procErr=null;  try {    String procOutputLine;    final StringBuilder procOut=new StringBuilder();    procErr=new StringBuilder();    final Process ps2asciiProc=Runtime.getRuntime().exec(new String[]{"ps2ascii",inputFile.getAbsolutePath(),outputFile.getAbsolutePath()});    final BufferedReader stdOut=new BufferedReader(new InputStreamReader(ps2asciiProc.getInputStream()));    final BufferedReader stdErr=new BufferedReader(new InputStreamReader(ps2asciiProc.getErrorStream()));    while ((procOutputLine=stdOut.readLine()) != null) {      procOut.append(procOutputLine);    }    stdOut.close();    while ((procOutputLine=stdErr.readLine()) != null) {      procErr.append(procOutputLine);    }    stdErr.close();    execCode=ps2asciiProc.waitFor();  } catch (  final Exception e) {    final String errorMsg="Unable to convert ps to ascii. " + e.getMessage();    AbstractParser.log.severe(errorMsg);    throw new Exception(errorMsg);  }  if (execCode != 0)   throw new Exception("Unable to convert ps to ascii. ps2ascii returned statuscode " + execCode + "\n"+ procErr.toString());}  }
class C{  private AuthenticationInfo resetProxyAuthentication(AuthenticationInfo proxyAuthentication,AuthenticationHeader auth) throws IOException {  if ((proxyAuthentication != null) && proxyAuthentication.getAuthScheme() != NTLM) {    String raw=auth.raw();    if (proxyAuthentication.isAuthorizationStale(raw)) {      String value;      if (proxyAuthentication instanceof DigestAuthentication) {        DigestAuthentication digestProxy=(DigestAuthentication)proxyAuthentication;        if (tunnelState() == TunnelState.SETUP) {          value=digestProxy.getHeaderValue(connectRequestURI(url),HTTP_CONNECT);        } else {          value=digestProxy.getHeaderValue(getRequestURI(),method);        }      } else {        value=proxyAuthentication.getHeaderValue(url,method);      }      requests.set(proxyAuthentication.getHeaderName(),value);      currentProxyCredentials=proxyAuthentication;      return proxyAuthentication;    } else {      proxyAuthentication.removeFromCache();    }  }  proxyAuthentication=getHttpProxyAuthentication(auth);  currentProxyCredentials=proxyAuthentication;  return proxyAuthentication;}  }
class C{  public void addSummary(String additionalSummary){  m_Summary+=additionalSummary;}  }
class C{  void moveServerData(int maxSavedReplicated) throws IOException {  File[] dataDirs=new File[]{configuration.getBindingsLocation(),configuration.getJournalLocation(),configuration.getPagingLocation(),configuration.getLargeMessagesLocation()};  for (  File data : dataDirs) {    FileMoveManager moveManager=new FileMoveManager(data,maxSavedReplicated);    moveManager.doMove();  }}  }
class C{  public static Line fromRight(int margin,int marginUnit){  return new Line(1,Gravity.RIGHT,margin,marginUnit,DebugColors.next());}  }
class C{  public static Date next(Date self){  return plus(self,1);}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__BASE_TYPE:    if (resolve)     return getBaseType();  return basicGetBaseType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void createThreadedTrace(){  try (TraceScope s=tracer.newScope(THREADED_TRACE_ROOT)){    Random r=ThreadLocalRandom.current();    int numThreads=r.nextInt(4) + 1;    Thread[] threads=new Thread[numThreads];    for (int i=0; i < numThreads; i++) {      threads[i]=new Thread(tracer.wrap(new MyRunnable(),null));    }    for (int i=0; i < numThreads; i++) {      threads[i].start();    }    for (int i=0; i < numThreads; i++) {      try {        threads[i].join();      } catch (      InterruptedException e) {      }    }    importantWork1();  } }  }
class C{  @SuppressWarnings("fallthrough") boolean parseNameToken(boolean lower) throws IOException {  boolean first=true;  while (true) {switch (ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':      if (lower) {        ch='a' + (ch - 'A');      }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '.':case '-':    addString(ch);  ch=in.read();first=false;break;default :return !first;}}}  }
class C{  public OnOffPanel(){  initComponents();}  }
class C{  public static final ParameterizedType parameterize(final Class<?> raw,final Type... typeArguments){  return parameterizeWithOwner(null,raw,typeArguments);}  }
class C{  public static void touchCells(Transaction t,TableReference tableRef,Set<Cell> cells){  Map<Cell,byte[]> results=Maps.newHashMap(t.get(tableRef,cells));  for (  Cell cell : cells) {    if (!results.containsKey(cell)) {      results.put(cell,PtBytes.EMPTY_BYTE_ARRAY);    }  }  t.put(tableRef,results);}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  private static void checkParameters(MultipleCategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || !checkMultipleSeriesItems(dataset,renderer.getSeriesRendererCount())) {    throw new IllegalArgumentException("Titles and values should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public void print(boolean x){  out.print(x);  out.flush();}  }
class C{  public void sendPacket(int[] packet) throws IOException {  if (!this.isConnected()) {    throw new XBeeNotConnectedException();  }  if (log.isInfoEnabled()) {    log.info("Sending packet to XBee " + ByteUtils.toBase16(packet));  }  for (  int packetByte : packet) {    xbeeConnection.getOutputStream().write(packetByte);  }  xbeeConnection.getOutputStream().flush();}  }
class C{  protected static byte[] array(Map.Entry<byte[],Integer>... chunks){  int totalSize=0;  for (  Map.Entry<byte[],Integer> chunk : chunks)   totalSize+=chunk.getKey().length * chunk.getValue();  byte[] res=new byte[totalSize];  int pos=0;  for (  Map.Entry<byte[],Integer> chunk : chunks) {    for (int i=0; i < chunk.getValue(); i++) {      System.arraycopy(chunk.getKey(),0,res,pos,chunk.getKey().length);      pos+=chunk.getKey().length;    }  }  return res;}  }
class C{  @Override public void process(HighLow<V> tuple){  if (mergedTuple == null) {    mergedTuple=new HighLow(tuple.getHigh(),tuple.getLow());  } else {    if (mergedTuple.getHigh().doubleValue() < tuple.getHigh().doubleValue()) {      mergedTuple.setHigh(tuple.getHigh());    }    if (mergedTuple.getLow().doubleValue() > tuple.getLow().doubleValue()) {      mergedTuple.setLow(tuple.getLow());    }  }}  }
class C{  @Override protected void fillShape(Graphics graphics){  Color c=mixColor(getBackgroundColor(),ColorConstants.white,220);  fillVerticalGradientRectangle(graphics,getBounds(),getBackgroundColor(),c);  c.dispose();}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  BigInteger p, q, g, x, y;  if (key != null) {    if (keySpec == null) {      throw new NullPointerException("keySpec == null");    }    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      if (keySpec.equals(DSAPrivateKeySpec.class)) {        x=privateKey.getX();        DSAParams params=privateKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPrivateKeySpec(x,p,q,g));      }      if (keySpec.equals(PKCS8EncodedKeySpec.class)) {        return (T)(new PKCS8EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      if (keySpec.equals(DSAPublicKeySpec.class)) {        y=publicKey.getY();        DSAParams params=publicKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPublicKeySpec(y,p,q,g));      }      if (keySpec.equals(X509EncodedKeySpec.class)) {        return (T)(new X509EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");    }  }  throw new InvalidKeySpecException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.173 -0500",hash_original_method="ADF2B4EDD750040189755D8AA2B089F0",hash_generated_method="11763958C4DDE97C38EB6CF50AA0DC5D") public boolean clipRect(RectF rect,Region.Op op){  return getTaintBoolean();}  }
class C{  public Builder rotate(float degrees,float pivotX,float pivotY){  rotationDegrees=degrees;  rotationPivotX=pivotX;  rotationPivotY=pivotY;  hasRotationPivot=true;  return this;}  }
class C{  public void removeEdge(AtlasEdge edge){  String edgeString=string(edge);  LOG.debug("Removing {}",edgeString);  graph.removeEdge(edge);  LOG.info("Removed {}",edgeString);}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public boolean isUpdateStoredType(){  return updateStoredType;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public EntryBuffer append(Entry entry){  int offset=offset(entry.getIndex());  Entry oldEntry=buffer[offset];  buffer[offset]=entry.acquire();  if (oldEntry != null) {    oldEntry.release();  }  return this;}  }
class C{  public static String toJSONString(Object value){  if (value == null)   return "null";  if (value instanceof String)   return "\"" + escape((String)value) + "\"";  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Number)   return value.toString();  if (value instanceof Boolean)   return value.toString();  if ((value instanceof JSONAware))   return ((JSONAware)value).toJSONString();  if (value instanceof Map)   return JSONObject.toJSONString((Map)value);  if (value instanceof List)   return JSONArray.toJSONString((List)value);  return value.toString();}  }
class C{  public String readString(){  return scanner.next();}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void sort(@NonNull Comparator<? super T> comparator){synchronized (lock) {    if (items == null) {      return;    }    Collections.sort(items,comparator);  }  if (notifyOnChange) {    notifyDataSetChanged();  }}  }
class C{  public void stopWatching(){  watching.set(false);}  }
class C{  public CModuleLoaderOperation(final INaviModule module){  m_module=module;  CGlobalProgressManager.instance().add(this);  module.addListener(m_listener);}  }
class C{  public void init(String server,IEntityResolverFactory resolverFactory){  URL huiConfig;  try {    huiConfig=new URL(server + "/GetHitroConfig");  } catch (  MalformedURLException e) {    throw new RuntimeException(e);  }  initForClientImpl(huiConfig,resolverFactory);}  }
class C{  @Override public void emit(HashMap<K,ArrayList<HashMap<V,Integer>>> tuple){  top.emit(tuple);}  }
class C{  public JsonValue(Map<String,JsonValue> object){  this.object=object;  value=null;  array=null;  isNull=(object == null);}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  private static void resplit(final double a[]){  final double c=a[0] + a[1];  final double d=-(c - a[0] - a[1]);  if (c < 8e298 && c > -8e298) {    double z=c * HEX_40000000;    a[0]=(c + z) - z;    a[1]=c - a[0] + d;  } else {    double z=c * 9.31322574615478515625E-10;    a[0]=(c + z - c) * HEX_40000000;    a[1]=c - a[0] + d;  }}  }
class C{  public void testSequenceEventAfterAllCommands() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  long sequence=sequencer.nextRequest();  PublishRequest request1=PublishRequest.builder().withSession(1).withEventIndex(2).withPreviousIndex(0).build();  PublishRequest request2=PublishRequest.builder().withSession(1).withEventIndex(3).withPreviousIndex(2).build();  CommandResponse response=CommandResponse.builder().withStatus(Response.Status.OK).withIndex(2).withEventIndex(2).build();  AtomicInteger run=new AtomicInteger();  sequencer.sequenceEvent(request1,null);  sequencer.sequenceEvent(request2,null);  sequencer.sequenceResponse(sequence,response,null);  assertEquals(run.get(),3);}  }
class C{  private void addInheritanceEdge(ClassVertex vertex,ClassDescriptor superclassDescriptor,boolean isInterfaceEdge,@CheckForNull LinkedList<XClass> workList){  if (superclassDescriptor == null) {    return;  }  ClassVertex superclassVertex=classDescriptorToVertexMap.get(superclassDescriptor);  if (superclassVertex == null) {    XClass superclassXClass=AnalysisContext.currentXFactory().getXClass(superclassDescriptor);    if (superclassXClass == null) {      superclassVertex=addClassVertexForMissingClass(superclassDescriptor,isInterfaceEdge);    } else {      superclassVertex=ClassVertex.createResolvedClassVertex(superclassDescriptor,superclassXClass);      addVertexToGraph(superclassDescriptor,superclassVertex);      if (workList != null) {        workList.addLast(superclassXClass);      }    }  }  assert superclassVertex != null;  if (graph.lookupEdge(vertex,superclassVertex) == null) {    if (DEBUG) {      System.out.println("  Add edge " + vertex.getClassDescriptor().toDottedClassName() + " -> "+ superclassDescriptor.toDottedClassName());    }    graph.createEdge(vertex,superclassVertex);  }}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return false;}  }
class C{  public static TypedByteArrayComparator parseFrom(final byte[] bytes) throws DeserializationException {  TypedByteArrayComparator comparator=new TypedByteArrayComparator();  ByteArrayDataInput byteArrayDataInput=ByteStreams.newDataInput(bytes);  try {    comparator.readFields(byteArrayDataInput);  } catch (  IOException e) {    LOG.error("Got error to deserialize TypedByteArrayComparator from PB bytes",e);    throw new DeserializationException(e);  }  return comparator;}  }
class C{  private boolean checkVersion(String availableVersion,String requiredVersion){  if (requiredVersion == null || availableVersion == null)   return true;  try {    Identifier required=new Identifier(requiredVersion);    Identifier available=new Identifier(availableVersion);    boolean compatible=available.isGreaterEqualTo(required);    if (!compatible) {      System.getProperties().put(PROP_EXITCODE,"14");      System.getProperties().put(PROP_EXITDATA,"<title>Incompatible JVM</title>Version " + availableVersion + " of the JVM is not suitable for this product. Version: "+ requiredVersion+ " or greater is required.");    }    return compatible;  } catch (  SecurityException e) {    return true;  }catch (  NumberFormatException e) {    return true;  }}  }
class C{  public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();  try {    return translator.translate(new StandardEnvironment(),node);  } catch (  final InternalTranslationException e) {    CUtilityFunctions.logException(e);    final String message="E000XXX: " + "Could not show REIL code for node";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not show the REIL code for basic block at '%X'.",node.getAddress()),new String[]{"The instructions could not be converted to REIL code."},new String[]{"You can not fix this problem yourself. Please contact " + "the BinNavi support."});    NaviErrorDialog.show(parent,message,description,e);  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean hasParent(){  return parts.size() > 1;}  }
class C{  public static boolean insideRange(Type type,int val){switch (type) {case BYTE:{      return !(val < (int)Byte.MIN_VALUE || val > (int)Byte.MAX_VALUE);    }case SHORT:{    return !(val < (int)Short.MIN_VALUE || val > (int)Short.MAX_VALUE);  }default :throw new UnsupportedOperationException("This operation is not supported for the type " + type);}}  }
class C{  public void merge(Register r1,Register r2){  Iterator<LiveIntervalElement> i=iterateLiveIntervals(r2);  while (i.hasNext()) {    LiveIntervalElement interval=i.next();    interval.setRegister(r1);    addToRegisterMap(r1,interval);    i.remove();  }}  }
class C{  public CUndoTree(final CSelectionHistoryTreeNode rootNode){  super(rootNode);}  }
class C{  public List<? extends Club> clubsStandings(){  return clubsStandings(clubs());}  }
class C{  public String convertJavaObjectToString(EDataType eDataType,Object instanceValue){  StringBuilder builder=new StringBuilder();  builder.append(instanceValue.getClass().getName());  builder.append(":");  builder.append(instanceValue);  return builder.toString();}  }
class C{  private void siftDown(int k,RunnableScheduledFuture<?> key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture<?> c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public void read(String filename) throws Exception {  read(new File(filename));}  }
class C{  public Boolean deleteAlert(String pipelineName,String rev,String alertId) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling deleteAlert");  }  String path="/v1/pipeline/{pipelineName}/alerts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","alertId",alertId));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<Boolean>(){  };  return apiClient.invokeAPI(path,"DELETE",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public <T>T updateBatchAndProcessGeneratedKeys(@NotNull ResultSetProcessor<T> generatedKeysProcessor,@NotNull List<String> columnNames,@NotNull @SQL String sql,@NotNull List<? extends List<?>> argumentLists){  SqlQuery query=SqlQuery.query(sql,"<batch-update>");  return withCurrentTransaction(query,null);}  }
class C{  public BeanContextSupport(BeanContext peer){  this(peer,null,false,true);}  }
class C{  private int nextIntInclusive(int toInc){  final int DIVIS=10;  if (toInc % DIVIS == 0) {    return random().nextInt(toInc / DIVIS + 1) * DIVIS;  } else {    return random().nextInt(toInc + 1);  }}  }
class C{  private VersionedGestureDetector(){}  }
class C{  public String toString(){  if (path == null) {    path=getFragment();  }  return path;}  }
class C{  public EnumState(S id,Collection<E> deferred){  super(id,deferred);}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:    getTypeArgs().clear();  return;}super.eUnset(featureID);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Ministry.getInstance().getJobShouldKeepOriginal(getInt(stack)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void jbInit() throws Exception {  tabbox.setWidth("100%");  tabbox.setHeight("90%");  tabbox.appendChild(tabs);  tabbox.appendChild(tabpanels);  tabbox.addEventListener(Events.ON_SELECT,this);  processField.setMold("select");  processField.setRows(1);  tableField.setMold("select");  tableField.setRows(1);  createdByQField.setMold("select");  createdByQField.setRows(1);  updateArchive.setImage("/images/Ok24.png");  updateArchive.setTooltiptext(Msg.getMsg(Env.getCtx(),"Update"));  updateArchive.addEventListener(Events.ON_CLICK,this);  bRefresh.setImage("/images/Refresh24.png");  bRefresh.setTooltiptext(Msg.getMsg(Env.getCtx(),"Refresh"));  bRefresh.addEventListener(Events.ON_CLICK,this);  bBack.setImage("/images/Parent24.png");  bBack.setTooltiptext(Msg.getMsg(Env.getCtx(),"Previous"));  bBack.addEventListener(Events.ON_CLICK,this);  bNext.setImage("/images/Detail24.png");  bNext.setTooltiptext(Msg.getMsg(Env.getCtx(),"Next"));  bNext.addEventListener(Events.ON_CLICK,this);  nameField.addEventListener(Events.ON_CHANGE,this);  descriptionField.addEventListener(Events.ON_CHANGE,this);  helpField.addEventListener(Events.ON_CHANGE,this);  reportField.setLabel(Msg.translate(Env.getCtx(),"IsReport"));  reportField.addEventListener(Events.ON_CHECK,this);  Grid gridQuery=new Grid();  gridQuery.setWidth("500px");  gridQuery.setStyle("margin:0; padding:0;");  gridQuery.makeNoStrip();  gridQuery.setOddRowSclass("even");  Rows rows=new Rows();  gridQuery.appendChild(rows);  Row row=new Row();  rows.appendChild(row);  row.setSpans("3");  row.setAlign("right");  row.appendChild(reportField);  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  Div div=new Div();  div.setAlign("right");  div.appendChild(processLabel);  row.appendChild(div);  row.appendChild(processField);  processField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(bPartnerLabel);  row.appendChild(div);  row.appendChild(bPartnerField.getComponent());  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(tableLabel);  row.appendChild(div);  row.appendChild(tableField);  tableField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(nameQLabel);  row.appendChild(div);  row.appendChild(nameQField);  nameQField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(descriptionQLabel);  row.appendChild(div);  row.appendChild(descriptionQField);  descriptionQField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(helpQLabel);  row.appendChild(div);  row.appendChild(helpQField);  helpQField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2");  div=new Div();  div.setAlign("right");  div.appendChild(createdByQLabel);  row.appendChild(div);  row.appendChild(createdByQField);  createdByQField.setWidth("100%");  row=new Row();  rows.appendChild(row);  div=new Div();  div.setAlign("right");  div.appendChild(createdQLabel);  row.appendChild(div);  row.appendChild(createdQFrom);  row.appendChild(createdQTo);  div=new Div();  div.setAlign("center");  div.appendChild(gridQuery);  Tabpanel tabQueryPanel=new Tabpanel();  tabQueryPanel.appendChild(div);  Tab tabQuery=new Tab(Msg.getMsg(Env.getCtx(),"ViewerQuery"));  tabpanels.appendChild(tabQueryPanel);  tabs.appendChild(tabQuery);  Grid gridView=new Grid();  gridView.setStyle("margin:0; padding:0;");  gridView.makeNoStrip();  gridView.setOddRowSclass("even");  rows=new Rows();  gridView.appendChild(rows);  row=new Row();  rows.appendChild(row);  row.setSpans("1, 2, 1");  div=new Div();  div.setAlign("left");  div.appendChild(bBack);  row.appendChild(div);  div=new Div();  div.setAlign("center");  div.appendChild(positionInfo);  row.appendChild(div);  div=new Div();  div.setAlign("right");  div.appendChild(bNext);  row.appendChild(div);  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(createdByLabel);  createdByLabel.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(createdByField);  createdByField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  div=new Div();  div.setAlign("right");  div.appendChild(createdField);  row.appendChild(div);  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(nameLabel);  nameLabel.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(nameField);  nameField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(descriptionLabel);  descriptionLabel.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(descriptionField);  descriptionField.setRows(3);  descriptionField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(helpLabel);  helpLabel.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  row.appendChild(helpField);  helpField.setRows(3);  helpField.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("4");  div=new Div();  div.setAlign("right");  div.appendChild(bRefresh);  div.appendChild(updateArchive);  row.appendChild(div);  createdByField.setReadonly(true);  createdField.getDatebox().setReadonly(true);  createdField.getTimebox().setReadonly(true);  Tab tabView=new Tab(Msg.getMsg(Env.getCtx(),"ViewerResult"));  Tabpanel tabViewPanel=new Tabpanel();  Hbox boxViewSeparator=new Hbox();  boxViewSeparator.setWidth("100%");  boxViewSeparator.setHeight("100%");  boxViewSeparator.setWidths("70%, 30%");  boxViewSeparator.appendChild(iframe);  boxViewSeparator.appendChild(gridView);  tabViewPanel.appendChild(boxViewSeparator);  tabs.appendChild(tabView);  tabpanels.appendChild(tabViewPanel);  confirmPanel.addActionListener(this);  updateQDisplay();  iframe.setId("reportFrame");  int height=Double.valueOf(SessionManager.getAppDesktop().getClientInfo().desktopHeight * 0.8).intValue();  height=height - 50;  iframe.setHeight(height + "px");  iframe.setWidth("100%");  iframe.setAutohide(true);  form.setWidth("100%");  form.setHeight("100%");  form.appendChild(tabbox);  form.appendChild(confirmPanel);}  }
class C{  public synchronized void stopListening(){  if (mListening) {    mContext.unregisterReceiver(this);    mContext=null;    mNetworkInfo=null;    mListening=false;  }}  }
class C{  public static void destroyGracefullyAndWait(SystemProcess process) throws IOException, InterruptedException {  Stopwatch sw=Stopwatch.createStarted();  process.destroyGracefully();  waitFor(process,sw,"Destroyed {} gracefully");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeAttributeNS01.class,args);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (this.type != REQUIRED && this.type != FORBIDDEN) {    throw new IllegalStateException("Type must be REQUIRED or FORBIDDEN");  }  if (fromGroup == null) {    throw new NullPointerException();  }  if (toGroup == null) {    throw new NullPointerException();  }}  }
class C{  public N4JSNewClassWizardPage(){  this.setTitle("New N4JS Class");  this.setMessage("Create a new N4JS Class");  this.setPageComplete(false);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  private ChartPanel generatePanel(ContinuousDistribution distrib){  final String variableName=distrib.getVariable();  List<XYSeries> series=extractSeries(distrib.getFunction());  CombinedDomainXYPlot combined=new CombinedDomainXYPlot(new NumberAxis("Value"));  for (  XYSeries serie : series) {    JFreeChart chart=ChartFactory.createXYLineChart("","Value","Density",new XYSeriesCollection(serie),PlotOrientation.VERTICAL,(distrib.getFunction().getDimensions() > 1),true,false);    XYPlot plot=(XYPlot)chart.getPlot();    combined.add(plot);    plot.setBackgroundPaint(Color.white);    plot.setRangeGridlinePaint(Color.white);  }  return new ChartPanel(new JFreeChart("Probability distribution P(" + variableName + ")",JFreeChart.DEFAULT_TITLE_FONT,combined,true),false);}  }
class C{  public static String modifyDrmFwLockFileExtension(String filename){  if (filename != null) {    int extensionIndex;    extensionIndex=filename.lastIndexOf(".");    if (extensionIndex != -1) {      filename=filename.substring(0,extensionIndex);    }    filename=filename.concat(EXTENSION_INTERNAL_FWDL);  }  return filename;}  }
class C{  public static boolean callsSensitiveSink(Stmt stmt){  for (  InfoKind infoK : getSinkInfoKinds(stmt)) {    if (infoK.isSensitive())     return true;  }  return false;}  }
class C{  public ExternalEvent nextEvent(){  int responseSize=0;  int from;  int to;  from=this.fromIds.remove(0);  to=drawToAddress(toHostRange,-1);  if (to == from) {    if (this.fromIds.size() == 0) {      this.nextEventsTime=Double.MAX_VALUE;      return new ExternalEvent(Double.MAX_VALUE);    } else {      from=this.fromIds.remove(0);    }  }  if (this.fromIds.size() == 0) {    this.nextEventsTime=Double.MAX_VALUE;  } else {    this.nextEventsTime+=drawNextEventTimeDiff();  }  MessageCreateEvent mce=new MessageCreateEvent(from,to,getID(),drawMessageSize(),responseSize,this.nextEventsTime);  return mce;}  }
class C{  public UnsupportedClassTypeException(String message){  super(message);}  }
class C{  @AutoAnnotation public static CommandName named(final String value){  return new AutoAnnotation_Commands_named(value);}  }
class C{  @Override public <T>Observable<Notification<T>> channel(int id,DeliveryMethod type,ObservableFactoryNoArg<T> observableFactoryNoArg){  return this.<T>restartable(id).channel(type,observableFactoryNoArg);}  }
class C{  public static void acceptDistribution(User user,Integer distributionId,String entidad) throws ValidationException, SecurityException, DistributionException, SessionException, BookException, TecDocException {  String sessionID=null;  try {    sessionID=Login.login(user,entidad);    List idsDist=new ArrayList();    idsDist.add(distributionId);    DistributionSessionEx.acceptDistributionEx(sessionID,idsDist,entidad);  }  finally {    SecuritySession.logout(sessionID,entidad);  }}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public void delete(String type,String id){  try {    RETRY_ES_PUBLISH.call(null);  } catch (  Exception e) {    log.error(String.format("Failed deleting metadata of type %s with id %s.",type,id),e);    CounterWrapper.incrementCounter("dse.metacat.esDeleteFailure");    log("ElasticSearchUtil.delete",type,id,null,e.getMessage(),e,true);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession sess=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  if (ws == null)   doc=WebDoc.create("Help - No Context"); else {    MAttachment attachment=processPost(request,response,ws);    doc=createPage(ws.ctx,attachment,m_error);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public boolean has(String key){  return urlParams.get(key) != null || streamParams.get(key) != null || fileParams.get(key) != null || urlParamsWithObjects.get(key) != null || fileArrayParams.get(key) != null;}  }
class C{  public void postLike(String postId) throws IOException {  postLike(postId,null);}  }
class C{  public void incrementProgress(){  isSpinning=false;  progress++;  if (progress > 360)   progress=0;  spinHandler.sendEmptyMessage(0);}  }
class C{  protected void updateLayoutState(){  int fixedCellHeight=list.getFixedCellHeight();  int fixedCellWidth=list.getFixedCellWidth();  cellWidth=(fixedCellWidth != -1) ? fixedCellWidth : -1;  if (fixedCellHeight != -1) {    cellHeight=fixedCellHeight;    cellHeights=null;  } else {    cellHeight=-1;    cellHeights=new int[list.getModel().getSize()];  }  if ((fixedCellWidth == -1) || (fixedCellHeight == -1)) {    ListModel dataModel=list.getModel();    int dataModelSize=dataModel.getSize();    ListCellRenderer renderer=list.getCellRenderer();    if (renderer != null) {      for (int index=0; index < dataModelSize; index++) {        Object value=dataModel.getElementAt(index);        Component c=renderer.getListCellRendererComponent(list,value,index,false,false);        rendererPane.add(c);        Dimension cellSize=c.getPreferredSize();        if (fixedCellWidth == -1) {          cellWidth=Math.max(cellSize.width,cellWidth);        }        if (fixedCellHeight == -1) {          cellHeights[index]=cellSize.height;        }      }    } else {      if (cellWidth == -1) {        cellWidth=0;      }      if (cellHeights == null) {        cellHeights=new int[dataModelSize];      }      for (int index=0; index < dataModelSize; index++) {        cellHeights[index]=0;      }    }  }  columnCount=1;  if (layoutOrientation != JList.VERTICAL) {    updateHorizontalLayoutState(fixedCellWidth,fixedCellHeight);  }}  }
class C{  @Override public String purchaseRepair(final Map<Unit,IntegerMap<RepairRule>> repairRules){  final IntegerMap<Resource> costs=getRepairCosts(repairRules,m_player);  if (!(canAfford(costs,m_player))) {    return NOT_ENOUGH_RESOURCES;  }  if (!games.strategy.triplea.Properties.getDamageFromBombingDoneToUnitsInsteadOfTerritories(getData())) {    return null;  }  final IntegerMap<Unit> repairMap=getUnitRepairs(repairRules);  if (repairMap.isEmpty()) {    return null;  }  final CompositeChange changes=new CompositeChange();  final Set<Unit> repairUnits=new HashSet<>(repairMap.keySet());  final IntegerMap<Unit> damageMap=new IntegerMap<>();  for (  final Unit u : repairUnits) {    final int repairCount=repairMap.getInt(u);    if (repairCount > 0) {      final TripleAUnit taUnit=(TripleAUnit)u;      final int newDamageTotal=Math.max(0,taUnit.getUnitDamage() - repairCount);      if (newDamageTotal != taUnit.getUnitDamage()) {        damageMap.put(u,newDamageTotal);      }    }  }  if (!damageMap.isEmpty()) {    changes.add(ChangeFactory.bombingUnitDamage(damageMap));  }  final String remaining=removeFromPlayer(m_player,costs,changes);  String transcriptText;  if (!damageMap.isEmpty()) {    transcriptText=m_player.getName() + " repair damage of " + MyFormatter.integerUnitMapToString(repairMap,", ","x ",true)+ "; "+ remaining;  } else {    transcriptText=m_player.getName() + " repair nothing; " + remaining;  }  m_bridge.getHistoryWriter().startEvent(transcriptText,new HashSet<>(damageMap.keySet()));  if (!changes.isEmpty()) {    m_bridge.addChange(changes);  }  return null;}  }
class C{  @SuppressLint("SetJavaScriptEnabled") private static void configureWebViewDefaults(WebView webView){  WebSettings settings=webView.getSettings();  settings.setJavaScriptEnabled(true);  settings.setDomStorageEnabled(true);  settings.setDatabaseEnabled(true);  webView.setWebChromeClient(new WebChromeClient());}  }
class C{  public RefreshInterval(Duration duration){  super(duration);}  }
class C{  public MaxFunctionEvaluations(int maxEvaluations){  super();  this.maxEvaluations=maxEvaluations;}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  private QueueDetails(){  users=new HashSet<QueueUser>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.315 -0500",hash_original_method="A16213EC170C52C83CDC8BBC64DBFF18",hash_generated_method="48EB9648F632D6ED0A760000CCAB3686") public boolean supportZoom(){  return mSupportZoom;}  }
class C{  @Override public void onTcpClosed(PseudoTCPBase tcp,IOException exc){  assert exc == null;  if (tcp == remoteTcp) {    have_disconnected_=true;  }}  }
class C{  public void doSearch(){  doRefresh();}  }
class C{  public ISchedulingRule modifyRule(IResource resource){  IPath path=resource.getFullPath();  if (path.segmentCount() == 2 && path.segment(1).equals(IProjectDescription.DESCRIPTION_FILE_NAME))   return parent(resource);  return resource;}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public String value(){  if (value != null) {    return value;  } else {    return connectedOutput.name();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE:    return basicSetDeepEnterSequence(null,msgs);case SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE:  return basicSetShallowEnterSequence(null,msgs);case SexecPackage.EXECUTION_REGION__HISTORY_VECTOR:return basicSetHistoryVector(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSComment("No action/impact") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.663 -0500",hash_original_method="BB5EB4821217BB73F8D521350E3FEC7B",hash_generated_method="BA6BD4389234E8C218462453C8EB683C") @Override public void close() throws IOException {  eos=true;  super.close();}  }
class C{  public void testUpdatePathMissing() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> propsSubDir=properties("subDirOwner","subDirGroup","0555");  Map<String,String> propsFile=properties("fileOwner","fileGroup","0666");  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,null,null);  igfsSecondaryFileSystem.update(SUBDIR,propsSubDir);  igfs.update(FILE,propsFile);  checkExist(igfs,DIR,SUBDIR,FILE);  assertEquals(propsSubDir,igfsSecondary.properties(SUBDIR.toString()));  assertEquals(propsSubDir,igfs.info(SUBDIR).properties());  assertEquals(propsFile,igfsSecondary.properties(FILE.toString()));  assertEquals(propsFile,igfs.info(FILE).properties());}  }
class C{  public boolean isTOFORMULE(){  Object oo=get_Value(COLUMNNAME_ISTOFORMULE);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Matrix4d translation(Vector3dc offset){  return translation(offset.x(),offset.y(),offset.z());}  }
class C{  public boolean scanMail(MimeMessage message) throws MessagingException {  Socket socket=null;  OutputStream out=null;  BufferedReader in=null;  try {    socket=new Socket(spamdHost,spamdPort);    out=socket.getOutputStream();    in=new BufferedReader(new InputStreamReader(socket.getInputStream()));    out.write("CHECK SPAMC/1.2\r\n\r\n".getBytes());    message.writeTo(out);    out.flush();    socket.shutdownOutput();    String s;    while ((s=in.readLine()) != null) {      if (s.startsWith("Spam:")) {        StringTokenizer t=new StringTokenizer(s," ");        boolean spam;        try {          t.nextToken();          spam=Boolean.valueOf(t.nextToken());        } catch (        Exception e) {          return false;        }        t.nextToken();        hits=t.nextToken();        t.nextToken();        required=t.nextToken();        if (spam) {          headers.put(FLAG_MAIL_ATTRIBUTE_NAME,"YES");          headers.put(STATUS_MAIL_ATTRIBUTE_NAME,"Yes, hits=" + hits + " required="+ required);          return true;        } else {          headers.put(FLAG_MAIL_ATTRIBUTE_NAME,"NO");          headers.put(STATUS_MAIL_ATTRIBUTE_NAME,"No, hits=" + hits + " required="+ required);          return false;        }      }    }    return false;  } catch (  UnknownHostException e1) {    throw new MessagingException("Error communicating with spamd. Unknown host: " + spamdHost);  }catch (  IOException e1) {    throw new MessagingException("Error communicating with spamd on " + spamdHost + ":"+ spamdPort+ " Exception: "+ e1);  }catch (  MessagingException e1) {    throw new MessagingException("Error communicating with spamd on " + spamdHost + ":"+ spamdPort+ " Exception: "+ e1);  } finally {    try {      Closeables.close(in,true);      Closeables.close(out,true);      socket.close();    } catch (    Exception e) {    }  }}  }
class C{  public boolean checkNextStatus(String controllerId,String instanceId,FlowState nextStatus,PropertyHandler paramHandler) throws APPlatformException {  if (paramHandler.isParallelProvisioningEnabled()) {    return true;  }  EnumSet<FlowState> CONFLICT_STATES=EnumSet.of(FlowState.VSERVER_CREATING,FlowState.VSERVER_CREATED,FlowState.VSDISK_CREATING,FlowState.VSDISK_CREATED,FlowState.VSDISK_ATTACHING,FlowState.VSDISK_ATTACHED,FlowState.VSDISK_DETACHING,FlowState.VSDISK_DETACHED,FlowState.VSDISK_DELETING,FlowState.VSDISK_DESTROYED,FlowState.VSERVER_UPDATING,FlowState.VSERVER_UPDATED,FlowState.VSERVER_DELETING,FlowState.VSYSTEM_CREATING,FlowState.VSYSTEM_DELETING,FlowState.VSYSTEM_SCALE_UP,FlowState.VSYSTEM_SCALE_DOWN,FlowState.VNET_DELETING);  if (CONFLICT_STATES.contains(nextStatus)) {    return enableExclusiveProcessing(controllerId,instanceId,paramHandler);  }  disableExclusiveProcessing(controllerId,instanceId,paramHandler);  return true;}  }
class C{  public DateTime addWrapFieldToCopy(int value){  return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(),value));}  }
class C{  public Extractors after(Filter filter){  beforeFilter.add(filter);  return this;}  }
class C{  private void showConnectingProgressBar(){  showTopDividerWithProgressBar();  mProgressBar.setIndeterminate(false);  mProgressBar.setProgress(1);}  }
class C{  private void updateInfo(){  m_updating=true;  nameField.setText(m_cc.getName());  appsHostField.setText(m_cc.getAppsHost());  appsPortField.setText(String.valueOf(m_cc.getAppsPort()));  bTestApps.setIcon(getStatusIcon(m_cc.isAppsServerOK(false)));  boolean rw=CConnection.isServerEmbedded() ? true : !m_cc.isAppsServerOK(false);  dbTypeLabel.setReadWrite(rw);  dbTypeField.setReadWrite(rw);  dbTypeField.setSelectedItem(m_cc.getType());  hostLabel.setReadWrite(rw);  hostField.setReadWrite(rw);  hostField.setText(m_cc.getDbHost());  portLabel.setReadWrite(rw);  dbPortField.setReadWrite(rw);  dbPortField.setText(String.valueOf(m_cc.getDbPort()));  sidLabel.setReadWrite(rw);  sidField.setReadWrite(rw);  sidField.setText(m_cc.getDbName());  dbUidLabel.setReadWrite(rw);  dbUidField.setReadWrite(rw);  dbUidField.setText(m_cc.getDbUid());  dbPwdField.setEditable(rw);  dbPwdField.setText(m_cc.getDbPwd());  cbBequeath.setReadWrite(rw);  cbBequeath.setEnabled(m_cc.isOracle());  cbBequeath.setSelected(m_cc.isBequeath());  boolean fwEnabled=rw && m_cc.isViaFirewall() && m_cc.isOracle();  cbFirewall.setReadWrite(rw && m_cc.isOracle());  cbFirewall.setSelected(m_cc.isViaFirewall());  fwHostLabel.setReadWrite(fwEnabled);  fwHostField.setReadWrite(fwEnabled);  fwHostField.setText(m_cc.getFwHost());  fwPortLabel.setReadWrite(fwEnabled);  fwPortField.setReadWrite(fwEnabled);  fwPortField.setText(String.valueOf(m_cc.getFwPort()));  bTestDB.setToolTipText(m_cc.getConnectionURL());  bTestDB.setIcon(getStatusIcon(m_cc.isDatabaseOK()));  m_updating=false;}  }
class C{  public void error(String format,Object arg){  formatAndLog(Log.ERROR,format,arg);}  }
class C{  public void testReceive_NonBlockNoServerCloseNull() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelCloseNull();}  }
class C{  public static void read(final URL shpFile,GeomVectorField field,Class<?> masonGeometryClass) throws FileNotFoundException, IOException, Exception {  read(shpFile,field,null,masonGeometryClass);}  }
class C{  @Override public void put(NumberVector val){  assert (val.getDimensionality() == elements.length);  wsum+=1.0;  for (int i=BitsUtil.nextSetBit(dims,0); i >= 0; i=BitsUtil.nextSetBit(dims,i + 1)) {    final double delta=val.doubleValue(i) - elements[i];    elements[i]+=delta / wsum;  }}  }
class C{  private void updateGroups(List<String> batchList,List<Group> groupsToUpdate) throws SQLException {  String updateStatement="UPDATE " + GROUPS_TABLE + " SET "+ "GROUP_NAME='%s', "+ "GROUP_TYPE=%d, "+ "DATA_TYPE=%d, "+ "RULE_INTERNAL_ID=%d, "+ "EVALUATION_ORDER=%d "+ "WHERE GROUP_INTERNAL_ID=%d";  for (  Group group : groupsToUpdate) {    int ruid=getRid(group.getRuleName());    batchList.add(String.format(updateStatement,group.getName(),group.getGroupType().getValue(),group.getDataType().getValue(),ruid,group.getEvaluationOrder(),group.getUid()));  }}  }
class C{  public long adjustedTime(long topVer){  T2<GridClockDeltaVersion,GridClockDeltaSnapshot> fastSnap=lastSnapshot;  GridClockDeltaSnapshot snap;  if (fastSnap != null && fastSnap.get1().topologyVersion() == topVer)   snap=fastSnap.get2(); else {    Map.Entry<GridClockDeltaVersion,GridClockDeltaSnapshot> entry=timeSyncHistory().lowerEntry(new GridClockDeltaVersion(0,topVer + 1));    snap=entry == null ? null : entry.getValue();  }  long now=clockSrc.currentTimeMillis();  if (snap == null)   return now;  Long delta=snap.deltas().get(ctx.localNodeId());  if (delta == null)   delta=0L;  return now + delta;}  }
class C{  static public String constructAbsoluteFilePath(final IScope scope,final String fp,final boolean mustExist) throws GamaRuntimeException {  String filePath=null;  Iterable<String> baseDirectories=null;  final IExperimentAgent a=scope.getExperiment();  try {    baseDirectories=Iterables.transform(a.getWorkingPaths(),null);    filePath=URLDecoder.decode(fp,"UTF-8");  } catch (  final UnsupportedEncodingException e1) {    filePath=fp;  }  final GamaRuntimeException ex=new GamaRuntimeFileException(scope,"File denoted by " + filePath + " not found.");  File file=null;  if (isAbsolutePath(filePath)) {    file=new File(filePath);    if (file.exists() || !mustExist) {      try {        return file.getCanonicalPath();      } catch (      final IOException e) {        e.printStackTrace();        return file.getAbsolutePath();      }    }    for (    final String baseDirectory : baseDirectories) {      file=new File(baseDirectory + removeRoot(filePath));      if (file.exists()) {        try {          return file.getCanonicalPath();        } catch (        final IOException e) {          e.printStackTrace();          return file.getAbsolutePath();        }      }      ex.addContext(file.getAbsolutePath());    }  } else {    for (    final String baseDirectory : baseDirectories) {      file=new File(baseDirectory + filePath);      if (file.exists()) {        try {          if (GAMA.isInHeadLessMode()) {            return file.getAbsolutePath();          } else {            return file.getCanonicalPath();          }        } catch (        final IOException e) {          e.printStackTrace();          return file.getAbsolutePath();        }      }      ex.addContext(file.getAbsolutePath());    }    if (!mustExist)     try {      return new File(Iterables.get(baseDirectories,0) + filePath).getCanonicalPath();    } catch (    final IOException e) {      throw ex;    }  }  throw ex;}  }
class C{  protected void dispatchKeyEvent(KeyEvent evt){  currentKeyEventTarget=lastHit;  GraphicsNode target=currentKeyEventTarget == null ? root : currentKeyEventTarget;  processKeyEvent(new GraphicsNodeKeyEvent(target,evt.getID(),evt.getWhen(),evt.getModifiersEx(),getCurrentLockState(),evt.getKeyCode(),evt.getKeyChar(),evt.getKeyLocation()));}  }
class C{  public static final String export(String name,Simulation simulation){  StringBuilder sb=new StringBuilder();  Map<UUID,String> idNameMap=new HashMap<UUID,String>();  World world=simulation.getWorld();  sb.append("import java.util.*;").append(NEW_LINE).append("import org.dyn4j.collision.*;").append(NEW_LINE).append("import org.dyn4j.collision.broadphase.*;").append(NEW_LINE).append("import org.dyn4j.collision.continuous.*;").append(NEW_LINE).append("import org.dyn4j.collision.manifold.*;").append(NEW_LINE).append("import org.dyn4j.collision.narrowphase.*;").append(NEW_LINE).append("import org.dyn4j.dynamics.*;").append(NEW_LINE).append("import org.dyn4j.dynamics.joint.*;").append(NEW_LINE).append("import org.dyn4j.geometry.*;").append(NEW_LINE).append(NEW_LINE).append("// ").append(world.getUserData()).append(NEW_LINE).append("// generated for dyn4j v").append(Version.getVersion()).append(NEW_LINE).append("public class ").append(name).append(" { ").append(NEW_LINE).append(NEW_LINE).append(TAB1).append("private ").append(name).append("() {}").append(NEW_LINE).append(NEW_LINE).append(TAB1).append("public static final void setup(World world) {").append(NEW_LINE).append(TAB2).append("Settings settings = world.getSettings();").append(NEW_LINE);  sb.append(export(world.getSettings()));  sb.append(NEW_LINE);  Vector2 g=world.getGravity();  if (g == World.EARTH_GRAVITY || g.equals(0.0,-9.8)) {  } else   if (g == World.ZERO_GRAVITY || g.isZero()) {    sb.append(TAB2).append("world.setGravity(World.ZERO_GRAVITY);").append(NEW_LINE);  } else {    sb.append(TAB2).append("world.setGravity(").append(export(g)).append(");").append(NEW_LINE);  }  BroadphaseDetector<?,?> bpd=world.getBroadphaseDetector();  NarrowphaseDetector npd=world.getNarrowphaseDetector();  if (bpd instanceof Sap) {    sb.append(TAB2).append("world.setBroadphaseDetector(new Sap<Body, BodyFixture>());").append(NEW_LINE);  } else   if (bpd instanceof DynamicAABBTree) {  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),bpd.getClass().getName()));  }  if (npd instanceof Sat) {    sb.append(TAB2).append("world.setNarrowphaseDetector(new Sat());").append(NEW_LINE);  } else   if (npd instanceof Gjk) {  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),npd.getClass().getName()));  }  Bounds bounds=world.getBounds();  if (bounds instanceof NullBounds || bounds == null) {  } else   if (bounds instanceof AxisAlignedBounds) {    AxisAlignedBounds aab=(AxisAlignedBounds)bounds;    double w=aab.getWidth();    double h=aab.getHeight();    sb.append(NEW_LINE).append(TAB2).append("AxisAlignedBounds bounds = new AxisAlignedBounds(").append(w).append(", ").append(h).append(");").append(NEW_LINE);    if (!aab.getTranslation().isZero()) {      sb.append(TAB2).append("bounds.translate(").append(export(aab.getTranslation())).append(");").append(NEW_LINE);    }    sb.append(TAB2).append("world.setBounds(bounds);").append(NEW_LINE).append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),bounds.getClass().getName()));  }  int bSize=world.getBodyCount();  for (int i=1; i < bSize + 1; i++) {    SandboxBody body=(SandboxBody)world.getBody(i - 1);    idNameMap.put(body.getId(),"body" + i);    Mass mass=body.getMass();    sb.append(TAB2).append("// ").append(body.getUserData()).append(NEW_LINE).append(TAB2).append("Body body").append(i).append(" = new Body();").append(NEW_LINE);    int fSize=body.getFixtureCount();    for (int j=0; j < fSize; j++) {      BodyFixture bf=body.getFixture(j);      sb.append(TAB2).append("{// ").append(bf.getUserData()).append(NEW_LINE).append(export(bf.getShape(),TAB3)).append(TAB3).append("BodyFixture bf = new BodyFixture(c);").append(NEW_LINE);      if (bf.isSensor()) {        sb.append(TAB3).append("bf.setSensor(").append(bf.isSensor()).append(");").append(NEW_LINE);      }      if (bf.getDensity() != BodyFixture.DEFAULT_DENSITY) {        sb.append(TAB3).append("bf.setDensity(").append(bf.getDensity()).append(");").append(NEW_LINE);      }      if (bf.getFriction() != BodyFixture.DEFAULT_FRICTION) {        sb.append(TAB3).append("bf.setFriction(").append(bf.getFriction()).append(");").append(NEW_LINE);      }      if (bf.getRestitution() != BodyFixture.DEFAULT_RESTITUTION) {        sb.append(TAB3).append("bf.setRestitution(").append(bf.getRestitution()).append(");").append(NEW_LINE);      }      sb.append(export(bf.getFilter(),TAB3)).append(TAB3).append("body").append(i).append(".addFixture(bf);").append(NEW_LINE).append(TAB2).append("}").append(NEW_LINE);    }    if (Math.abs(body.getTransform().getRotation()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".rotate(Math.toRadians(").append(Math.toDegrees(body.getTransform().getRotation())).append("));").append(NEW_LINE);    }    if (!body.getTransform().getTranslation().isZero()) {      sb.append(TAB2).append("body").append(i).append(".translate(").append(export(body.getTransform().getTranslation())).append(");").append(NEW_LINE);    }    if (!body.getLinearVelocity().isZero()) {      sb.append(TAB2).append("body").append(i).append(".setVelocity(").append(export(body.getLinearVelocity())).append(");").append(NEW_LINE);    }    if (Math.abs(body.getAngularVelocity()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".setAngularVelocity(Math.toRadians(").append(Math.toDegrees(body.getAngularVelocity())).append("));").append(NEW_LINE);    }    if (!body.getAccumulatedForce().isZero()) {      sb.append(TAB2).append("body").append(i).append(".applyForce(").append(export(body.getAccumulatedForce())).append(");").append(NEW_LINE);    }    if (Math.abs(body.getAccumulatedTorque()) > Epsilon.E) {      sb.append(TAB2).append("body").append(i).append(".applyTorque(").append(body.getAccumulatedTorque()).append(");").append(NEW_LINE);    }    if (!body.isActive()) {      sb.append(TAB2).append("body").append(i).append(".setActive(false);").append(NEW_LINE);    }    if (body.isAsleep()) {      sb.append(TAB2).append("body").append(i).append(".setAsleep(true);").append(NEW_LINE);    }    if (!body.isAutoSleepingEnabled()) {      sb.append(TAB2).append("body").append(i).append(".setAutoSleepingEnabled(false);").append(NEW_LINE);    }    if (body.isBullet()) {      sb.append(TAB2).append("body").append(i).append(".setBullet(true);").append(NEW_LINE);    }    if (body.getLinearDamping() != Body.DEFAULT_LINEAR_DAMPING) {      sb.append(TAB2).append("body").append(i).append(".setLinearDamping(").append(body.getLinearDamping()).append(");").append(NEW_LINE);    }    if (body.getAngularDamping() != Body.DEFAULT_ANGULAR_DAMPING) {      sb.append(TAB2).append("body").append(i).append(".setAngularDamping(").append(body.getAngularDamping()).append(");").append(NEW_LINE);    }    if (body.getGravityScale() != 1.0) {      sb.append(TAB2).append("body").append(i).append(".setGravityScale(").append(body.getGravityScale()).append(");").append(NEW_LINE);    }    if (body.isMassExplicit()) {      sb.append(TAB2).append("body").append(i).append(".setMass(").append(export(mass)).append(");").append(NEW_LINE).append(TAB2).append("body").append(i).append(".setMassType(MassType.").append(mass.getType()).append(");").append(NEW_LINE);    } else {      sb.append(TAB2).append("body").append(i).append(".setMass(MassType.").append(mass.getType()).append(");").append(NEW_LINE);    }    sb.append(TAB2).append("world.addBody(body").append(i).append(");").append(NEW_LINE).append(NEW_LINE);  }  int jSize=world.getJointCount();  for (int i=1; i < jSize + 1; i++) {    Joint joint=world.getJoint(i - 1);    SandboxBody body1=(SandboxBody)joint.getBody1();    SandboxBody body2=(SandboxBody)joint.getBody2();    sb.append(TAB2).append("// ").append(joint.getUserData()).append(NEW_LINE);    if (joint instanceof AngleJoint) {      AngleJoint aj=(AngleJoint)joint;      sb.append(TAB2).append("AngleJoint joint").append(i).append(" = new AngleJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(Math.toRadians(").append(Math.toDegrees(aj.getLowerLimit())).append("), Math.toRadians(").append(Math.toDegrees(aj.getUpperLimit())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(aj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(aj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setRatio(").append(aj.getRatio()).append(");").append(NEW_LINE);    } else     if (joint instanceof DistanceJoint) {      DistanceJoint dj=(DistanceJoint)joint;      sb.append(TAB2).append("DistanceJoint joint").append(i).append(" = new DistanceJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(dj.getAnchor1())).append(", ").append(export(dj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(dj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(dj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDistance(").append(dj.getDistance()).append(");").append(NEW_LINE);    } else     if (joint instanceof FrictionJoint) {      FrictionJoint fj=(FrictionJoint)joint;      sb.append(TAB2).append("FrictionJoint joint").append(i).append(" = new FrictionJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(fj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumForce(").append(fj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumTorque(").append(fj.getMaximumTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof PinJoint) {      PinJoint mj=(PinJoint)joint;      sb.append(TAB2).append("PinJoint joint").append(i).append(" = new PinJoint(").append(idNameMap.get(body1.getId())).append(", ").append(export(mj.getAnchor2())).append(", ").append(mj.getFrequency()).append(", ").append(mj.getDampingRatio()).append(", ").append(mj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setTarget(").append(export(mj.getAnchor1())).append(");").append(NEW_LINE);    } else     if (joint instanceof PrismaticJoint) {      PrismaticJoint pj=(PrismaticJoint)joint;      sb.append(TAB2).append("PrismaticJoint joint").append(i).append(" = new PrismaticJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(pj.getAnchor1())).append(", ").append(export(pj.getAxis())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(pj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(").append(pj.getLowerLimit()).append(", ").append(pj.getUpperLimit()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(pj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(pj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(").append(pj.getMotorSpeed()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorForce(").append(pj.getMaximumMotorForce()).append(");").append(NEW_LINE);    } else     if (joint instanceof PulleyJoint) {      PulleyJoint pj=(PulleyJoint)joint;      sb.append(TAB2).append("PulleyJoint joint").append(i).append(" = new PulleyJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(pj.getPulleyAnchor1())).append(", ").append(export(pj.getPulleyAnchor2())).append(", ").append(export(pj.getAnchor1())).append(", ").append(export(pj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setRatio(").append(pj.getRatio()).append(");").append(NEW_LINE);    } else     if (joint instanceof RevoluteJoint) {      RevoluteJoint rj=(RevoluteJoint)joint;      sb.append(TAB2).append("RevoluteJoint joint").append(i).append(" = new RevoluteJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(rj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimitEnabled(").append(rj.isLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(Math.toRadians(").append(Math.toDegrees(rj.getLowerLimit())).append("), Math.toRadians(").append(Math.toDegrees(rj.getUpperLimit())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(rj.getReferenceAngle())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(rj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(Math.toRadians(").append(Math.toDegrees(rj.getMotorSpeed())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorTorque(").append(rj.getMaximumMotorTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof RopeJoint) {      RopeJoint rj=(RopeJoint)joint;      sb.append(TAB2).append("RopeJoint joint").append(i).append(" = new RopeJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(rj.getAnchor1())).append(", ").append(export(rj.getAnchor2())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLimits(").append(rj.getLowerLimit()).append(", ").append(rj.getUpperLimit()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLowerLimitEnabled(").append(rj.isLowerLimitEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setUpperLimitEnabled(").append(rj.isUpperLimitEnabled()).append(");").append(NEW_LINE);    } else     if (joint instanceof WeldJoint) {      WeldJoint wj=(WeldJoint)joint;      sb.append(TAB2).append("WeldJoint joint").append(i).append(" = new WeldJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(wj.getAnchor1())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(wj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(wj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setReferenceAngle(Math.toRadians(").append(Math.toDegrees(wj.getReferenceAngle())).append("));").append(NEW_LINE);    } else     if (joint instanceof WheelJoint) {      WheelJoint wj=(WheelJoint)joint;      sb.append(TAB2).append("WheelJoint joint").append(i).append(" = new WheelJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(", ").append(export(wj.getAnchor1())).append(", ").append(export(wj.getAxis())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setFrequency(").append(wj.getFrequency()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setDampingRatio(").append(wj.getDampingRatio()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorEnabled(").append(wj.isMotorEnabled()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMotorSpeed(Math.toRadians(").append(Math.toDegrees(wj.getMotorSpeed())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumMotorTorque(").append(wj.getMaximumMotorTorque()).append(");").append(NEW_LINE);    } else     if (joint instanceof MotorJoint) {      MotorJoint mj=(MotorJoint)joint;      sb.append(TAB2).append("MotorJoint joint").append(i).append(" = new MotorJoint(").append(idNameMap.get(body1.getId())).append(", ").append(idNameMap.get(body2.getId())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setLinearTarget(").append(export(mj.getLinearTarget())).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setAngularTarget(Math.toRadians(").append(Math.toDegrees(mj.getAngularTarget())).append("));").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setCorrectionFactor(").append(mj.getCorrectionFactor()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumForce(").append(mj.getMaximumForce()).append(");").append(NEW_LINE).append(TAB2).append("joint").append(i).append(".setMaximumTorque(").append(mj.getMaximumTorque()).append(");").append(NEW_LINE);    } else {      throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),joint.getClass().getName()));    }    sb.append(TAB2).append("joint").append(i).append(".setCollisionAllowed(").append(joint.isCollisionAllowed()).append(");").append(NEW_LINE);    sb.append(TAB2).append("world.addJoint(joint").append(i).append(");");    sb.append(NEW_LINE);  }  sb.append(NEW_LINE);  for (  SandboxRay ray : simulation.getRays()) {    sb.append(TAB2).append("{// ").append(ray.getName()).append(NEW_LINE).append(export(ray,TAB3)).append(TAB2).append("}").append(NEW_LINE);  }  sb.append(TAB1).append("}").append(NEW_LINE).append("}").append(NEW_LINE);  return sb.toString();}  }
class C{  public DIDLContent parseResource(String resource) throws Exception {  InputStream is=null;  try {    is=Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);    return parse(IO.readLines(is));  }  finally {    if (is != null)     is.close();  }}  }
class C{  private SipDialogPath createDialogPath(){  String callId=mImsModule.getSipManager().getSipStack().generateCallId();  String target=ImsModule.getImsUserProfile().getPublicUri();  String localParty=target;  String remoteParty=target;  Vector<String> route=mImsModule.getSipManager().getSipStack().getServiceRoutePath();  SipDialogPath dialog=new SipDialogPath(mImsModule.getSipManager().getSipStack(),callId,1,target,localParty,remoteParty,route,mRcsSettings);  return dialog;}  }
class C{  public final void testEqualsObject02(){  assertFalse(new ECFieldFp(BigInteger.valueOf(23L)).equals(null));}  }
class C{  public boolean containsClass(String jarFile,String classToBeFound) throws IOException {  boolean result=false;  String dataSourceClass=classToBeFound.replace('.','/') + ".class";  ZipFile zip=new ZipFile(jarFile);  if (zip.getEntry(dataSourceClass) != null) {    result=true;  }  zip.close();  return result;}  }
class C{  public Builder minCheckPointCount(int minCheckPointCount){  this.minCheckPointCount=minCheckPointCount;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_SOURCE__MODEL:    setModel((FunctionblockModel)null);  return;}super.eUnset(featureID);}  }
class C{  public LinkGraphicList(Link link,LinkProperties properties) throws IOException {  this.link=link;  link.start(Link.GRAPHICS_HEADER);  link.dos.writeFloat(version);  properties.write(link);}  }
class C{  public Set<String> addSpriteFrames(String plist,CCTexture2D texture){  HashMap<String,Object> dict=PlistParser.parse(plist);  return addSpriteFrames(dict,texture);}  }
class C{  @Override protected void afterStep(){  if (disappearing_potential > 0) {    for (    V v : graph.getVertices()) {      setOutputValue(v,getOutputValue(v) + (1 - alpha) * (disappearing_potential * getVertexPrior(v)));    }    disappearing_potential=0;  }  super.afterStep();}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  private void findStartingPoint(){  final double bestY=minmaxY.getMin();  double bestX=Double.POSITIVE_INFINITY;  int bestI=-1;  Iterator<double[]> iter=this.points.iterator();  for (int i=0; iter.hasNext(); i++) {    double[] vec=iter.next();    if (vec[1] == bestY && vec[0] < bestX) {      bestX=vec[0];      bestI=i;    }  }  assert (bestI >= 0);  if (bestI > 0) {    points.add(0,points.remove(bestI));  }}  }
class C{  public static double[] product(double[][] v){  int m=v.length;  int n=v[0].length;  double[] X=new double[n];  for (int j=0; j < n; j++) {    double p=1;    for (int i=0; i < m; i++)     p*=v[i][j];    X[j]=p;  }  return X;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void end(String namespace,String name) throws Exception {  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[DescriptionTextRule]{" + digester.getMatch() + "} End ("+ digester.peek()+ ")");  }  Node root=(Node)digester.pop();  DescriptionBean db=(DescriptionBean)digester.peek();  StringBuffer sb=new StringBuffer();  NodeList kids=root.getChildNodes();  int n=kids.getLength();  for (int i=0; i < n; i++) {    serialize(sb,kids.item(i));  }  db.setDescription(sb.toString());}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public RestClient(String target,CloseableHttpAsyncClient asyncClient){  if (null == asyncClient) {    throw new IllegalArgumentException("Client cannot be null");  }  if (null == target) {    throw new IllegalArgumentException("Target cannot be null");  }  this.target=target;  this.asyncClient=asyncClient;}  }
class C{  public static <T>List<T> roCopyList(Collection<T> l){  return Collections.unmodifiableList(new ArrayList<>(l));}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.SHIFT_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public int hashCode(){  return name.hashCode();}  }
class C{  public void reset(){  super.reset();  this.execCacheStack.clear();}  }
class C{  protected void doRemove(){  IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();  Vector input=(Vector)tableViewer.getInput();  input.removeAll(selection.toList());  tableViewer.setInput(input);  changeButtonEnablement();  view.getModel().setTraceExplorerExpression(FormHelper.getSerializedInput(tableViewer));}  }
class C{  void addFace(String name,String i18n_name){  ImageIcon i;  String i18n_hair=getString("ComboBoxDemo.hair");  String i18n_eyes=getString("ComboBoxDemo.eyes");  String i18n_mouth=getString("ComboBoxDemo.mouth");  parts.put(i18n_name,name);  parts.put(name,i18n_name);  i=createImageIcon("combobox/" + name + "hair.jpg",i18n_name + i18n_hair);  parts.put(name + "hair",i);  i=createImageIcon("combobox/" + name + "eyes.jpg",i18n_name + i18n_eyes);  parts.put(name + "eyes",i);  i=createImageIcon("combobox/" + name + "mouth.jpg",i18n_name + i18n_mouth);  parts.put(name + "mouth",i);}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (outputFormatPeek() != null) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public LinkBuilder addLinks(List<Link> links){  if (links == null) {    throw new IllegalArgumentException("link list is null");  }  if (links.isEmpty()) {    throw new IllegalArgumentException("link list is empty");  }  for (  Link link : links) {    if (link == null) {      throw new IllegalArgumentException("At least one link is null");    }  }  this.links.addAll(links);  return this;}  }
class C{  void updateBillingResult(Long tkey,String currencyCode,BigDecimal grossAmount) throws Exception {  if (updateBillingResultByTkey(tkey,currencyCode,grossAmount) < 1) {    String message="The update of billingresult.currencyCode and billingResult.grossAmount with tkey '%s' failed.";    throw new Exception(String.format(message,tkey));  }}  }
class C{  public boolean hasHtml(){  return fieldSetFlags()[7];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DynamicRows(){  list=new ArrayList();}  }
class C{  public POJONode POJONode(Object pojo){  return new POJONode(pojo);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthDesktopPaneUI();}  }
class C{  public boolean isViaFirewall(){  return m_firewall;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean engineContainsAlias(String alias){  return entries.containsKey(alias.toLowerCase(Locale.ENGLISH));}  }
class C{  public static TClassifier findInterfaceDefiningConsumedMember(TClassifier consumingClassifier,TMember consumedMember){  if (consumedMember == null || !(consumedMember.eContainer() instanceof TInterface)) {    return null;  }  TInterface tinterface=(TInterface)consumedMember.eContainer();  List<TClassifier> path=findPathToInterface(consumingClassifier,tinterface);  if (path.isEmpty()) {    return null;  }  return path.get(0);}  }
class C{  public <S>T manyToOneWithoutControl(final S source){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestinationWithoutControl(source);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public Collection<V> values(){  Collection<V> vs=values;  return (vs != null ? vs : (values=new Values()));}  }
class C{  private void validateRegister(HttpSession session,Integer bookId,Integer regIdRequest,Integer regIdSession,UseCaseConf useCaseConf) throws IOException, ServletException, TecDocException {  if (_logger.isDebugEnabled()) {    _logger.debug("validateRegister - Bookid [" + bookId + "] regIdRequest ["+ regIdRequest+ "] regIdSession ["+ regIdSession+ "]");  }  if ((regIdRequest != null) && (regIdRequest != -1)) {    String bookRegValidadoInSession=(String)session.getAttribute(Book_Reg_Validado);    validateRegisterRequestWithSession(useCaseConf,bookId,regIdRequest,regIdSession,bookRegValidadoInSession);    session.setAttribute(Keys.J_REGISTER,regIdRequest);    session.setAttribute(Book_Reg_Validado,(bookId + Keys.GUION_BAJO + regIdRequest));  }}  }
class C{  @Override public boolean isInside(int x,int y){  if (!mEnabled) {    return false;  }  final int code=codes[0];  if (code == KEYCODE_SHIFT || code == KEYCODE_DELETE) {    y-=height / 10;    if (code == KEYCODE_SHIFT)     x+=width / 6;    if (code == KEYCODE_DELETE)     x-=width / 6;  } else   if (code == KEYCODE_SPACE) {    y+=PasswordEntryKeyboard.sSpacebarVerticalCorrection;  }  return super.isInside(x,y);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_TYPE___TRACER_TYPE_1:    return TRACER_TYPE_1_EDEFAULT == null ? tracerType_1 != null : !TRACER_TYPE_1_EDEFAULT.equals(tracerType_1);case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_11:  return anonymous_traceType_1_1 != null && !anonymous_traceType_1_1.isEmpty();case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_21:return anonymous_traceType_2_1 != null && !anonymous_traceType_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ECDHClientKeyExchange(PublicKey clientPublicKey,InetSocketAddress peerAddress){  super(peerAddress);  ECPublicKey publicKey=(ECPublicKey)clientPublicKey;  ECPoint point=publicKey.getW();  ECParameterSpec params=publicKey.getParams();  pointEncoded=ECDHECryptography.encodePoint(point,params.getCurve());}  }
class C{  public int search(char[] array,int from){  return search(array,from,array.length);}  }
class C{  public TStructMethod basicGetDefinedMethod(){  return definedMethod;}  }
class C{  public static void disableTraceCalls(){  traceCalls=false;}  }
class C{  private GatewayManager(Connection connection) throws XMPPException {  this.connection=connection;  this.roster=connection.getRoster();  sdManager=ServiceDiscoveryManager.getInstanceFor(connection);}  }
class C{  public static void main(String[] args){  doLoop(SchellingSpace.class,args);  System.exit(0);}  }
class C{  public ConnectTimeoutException(){  super();}  }
class C{  private void waitForCache(){  while (mLoadingFiles.size() > 0) {    Iterator<Entry<String,Future<CacheHeader>>> iterator=mLoadingFiles.entrySet().iterator();    if (iterator.hasNext()) {      Entry<String,Future<CacheHeader>> entry=iterator.next();      try {        entry.getValue().get();      } catch (      InterruptedException ignored) {      }catch (      ExecutionException ignored) {      }    }  }}  }
class C{  public List<ECKey> findKeysBefore(long timeSecs){  lock.lock();  try {    List<ECKey> results=Lists.newLinkedList();    for (    ECKey key : hashToKeys.values()) {      final long keyTime=key.getCreationTimeSeconds();      if (keyTime < timeSecs) {        results.add(key);      }    }    return results;  }  finally {    lock.unlock();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress=0;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int minVal=(int)image.getMinimumValue();    int maxVal=(int)image.getMaximumValue();    range=maxVal - minVal;    long[] totalColumns=new long[range + 1];    long[] totalRows=new long[range + 1];    long[] totalN=new long[range + 1];    double[] data=null;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)data[col] - minVal;          totalColumns[a]+=col;          totalRows[a]+=row;          totalN[a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress((int)progress);    }    for (a=0; a <= range; a++) {      if (totalN[a] > 0) {        col=(int)(totalColumns[a] / totalN[a]);        row=(int)(totalRows[a] / totalN[a]);        output.setValue(row,col,a + minVal);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      String retstr="Patch Centroid\nPatch ID\tColumn\tRow";      for (a=0; a <= range; a++) {        if (totalN[a] > 0) {          retstr=retstr + "\n" + (a + minVal)+ "\t"+ ((float)totalColumns[a] / totalN[a])+ "\t"+ ((float)totalRows[a] / totalN[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public LazyHeaders(Headers headers){  if (headers != null && headers.get() != null && !headers.get().isEmpty()) {    this.headers=new HashMap<String,String>();    this.headers.putAll(headers.get());  }}  }
class C{  public static ValueExp value(boolean val){  return new BooleanValueExp(val);}  }
class C{  public ReadCoilsRequest(){  super();  setFunctionCode(Modbus.READ_COILS);  setDataLength(4);}  }
class C{  public static Population createTestPopulation(int nPersons){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population population=scenario.getPopulation();  for (int i=0; i < nPersons; i++) {    Person person=population.getFactory().createPerson(Id.create(i,Person.class));    PersonUtils.setAge(person,30);    Plan plan=population.getFactory().createPlan();    Activity home=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)100));    home.setEndTime(8. * 3600);    Activity work=population.getFactory().createActivityFromCoord("work",new Coord((double)200,(double)100));    work.setEndTime(17. * 3600);    Activity home2=population.getFactory().createActivityFromCoord("home",new Coord((double)0,(double)100));    home2.setEndTime(24. * 3600);    Leg leg=population.getFactory().createLeg(TransportMode.car);    plan.addActivity(home);    plan.addLeg(leg);    plan.addActivity(work);    plan.addLeg(leg);    plan.addActivity(home2);    person.addPlan(plan);    population.addPerson(person);  }  return population;}  }
class C{  public IFileTransfer transferFile2(final ContactId contact,Uri file,int disposition,boolean attachFileIcon) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  if (file == null) {    throw new ServerApiIllegalArgumentException("file must not be null!");  }  if (!FileUtils.isReadFromUriPossible(mCtx,file)) {    throw new ServerApiIllegalArgumentException("file '" + file + "' must refer to a file that exists and that is readable by stack!");  }  if (sLogger.isActivated()) {    sLogger.info("Transfer file " + file + " to "+ contact+ " (fileIcon="+ attachFileIcon+ ")");  }  try {    Uri localFile=FileUtils.createCopyOfSentFile(file,mRcsSettings);    FileDescription fileDescription=FileFactory.getFactory().getFileDescription(localFile);    String mime=FileUtils.getMimeType(localFile);    MmContent fileIconContent=null;    final MmContent content=ContentManager.createMmContent(localFile,mime,fileDescription.getSize(),fileDescription.getName());    if (Disposition.RENDER == Disposition.valueOf(disposition)) {      content.setPlayable(true);    }    final String fileTransferId=IdGenerator.generateMessageID();    if (attachFileIcon && MimeManager.isImageType(content.getEncoding())) {      fileIconContent=FileTransferUtils.createFileicon(localFile,fileTransferId,mRcsSettings);    }    final long timestamp=System.currentTimeMillis();    final long timestampSent=timestamp;    addOutgoingOneToOneFileTransfer(fileTransferId,contact,content,fileIconContent,State.QUEUED,timestamp,timestampSent);    OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(fileTransferId);    mImService.tryToDequeueFileTransfers();    return oneToOneFileTransfer;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public static void touchAndCancelView(InstrumentationTestCase test,View v){  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float y=xy[1] + (viewHeight / 2.0f);  Instrumentation inst=test.getInstrumentation();  long downTime=SystemClock.uptimeMillis();  long eventTime=SystemClock.uptimeMillis();  MotionEvent event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0);  inst.sendPointerSync(event);  inst.waitForIdleSync();  eventTime=SystemClock.uptimeMillis();  final int touchSlop=ViewConfiguration.get(v.getContext()).getScaledTouchSlop();  event=MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_CANCEL,x + (touchSlop / 2.0f),y + (touchSlop / 2.0f),0);  inst.sendPointerSync(event);  inst.waitForIdleSync();}  }
class C{  public HeaderElement(int headLevel,String s){  this(headLevel,new StringElement(s));}  }
class C{  public boolean inUse(){synchronized (messageQueue) {    return messageQueue.size() != 0;  }}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public String valueOf(char data[]){  return String.valueOf(data);}  }
class C{  public static EvolutionState initialize(ParameterDatabase parameters,int randomSeedOffset,Output output){  EvolutionState state=null;  MersenneTwisterFast[] random;  int[] seeds;  int breedthreads=1;  int evalthreads=1;  boolean store;  int x;  if (parameters.exists(new Parameter(P_MUZZLE),null))   output.warning("" + new Parameter(P_MUZZLE) + " has been deprecated.  We suggest you use "+ new Parameter(P_SILENT)+ " or similar newer options.");  if (parameters.getBoolean(new Parameter(P_SILENT),null,false) || parameters.getBoolean(new Parameter(P_MUZZLE),null,false)) {    output.getLog(0).silent=true;    output.getLog(1).silent=true;  }  output.systemMessage(Version.message());  breedthreads=Evolve.determineThreads(output,parameters,new Parameter(P_BREEDTHREADS));  evalthreads=Evolve.determineThreads(output,parameters,new Parameter(P_EVALTHREADS));  boolean auto=(V_THREADS_AUTO.equalsIgnoreCase(parameters.getString(new Parameter(P_BREEDTHREADS),null)) || V_THREADS_AUTO.equalsIgnoreCase(parameters.getString(new Parameter(P_EVALTHREADS),null)));  random=new MersenneTwisterFast[breedthreads > evalthreads ? breedthreads : evalthreads];  seeds=new int[random.length];  String seedMessage="Seed: ";  int time=(int)(System.currentTimeMillis());  for (x=0; x < random.length; x++) {    seeds[x]=determineSeed(output,parameters,new Parameter(P_SEED).push("" + x),time + x,random.length * randomSeedOffset,auto);    for (int y=0; y < x; y++)     if (seeds[x] == seeds[y])     output.fatal(P_SEED + "." + x+ " ("+ seeds[x]+ ") and "+ P_SEED+ "."+ y+ " ("+ seeds[y]+ ") ought not be the same seed.",null,null);    random[x]=Evolve.primeGenerator(new MersenneTwisterFast(seeds[x]));    seedMessage=seedMessage + seeds[x] + " ";  }  state=(EvolutionState)parameters.getInstanceForParameter(new Parameter(P_STATE),null,EvolutionState.class);  state.parameters=parameters;  state.random=random;  state.output=output;  state.evalthreads=evalthreads;  state.breedthreads=breedthreads;  state.randomSeedOffset=randomSeedOffset;  output.systemMessage("Threads:  breed/" + breedthreads + " eval/"+ evalthreads);  output.systemMessage(seedMessage);  return state;}  }
class C{  public CompactStringBuilder(){  value=new byte[16];}  }
class C{  protected String addWhitespace(String string){  return String.format("  %s    ",string);}  }
class C{  public static void addSystemProperty(String key,String value){  env.put(key,value);}  }
class C{  @Override public void traceError(String tag,String message){  traceCallback(MqttServiceConstants.TRACE_ERROR,tag,message);}  }
class C{  public boolean isDynamic(){  return true;}  }
class C{  public WarpFilter(WarpGrid sourceGrid,WarpGrid destGrid){  this.sourceGrid=sourceGrid;  this.destGrid=destGrid;}  }
class C{  private final boolean isLayouting(){  return isLayouting;}  }
class C{  @ReactMethod public void rDelete(int notificationID,Callback errorCallback,Callback successCallback){  try {    Notification n=mNotificationManager.delete(notificationID);    successCallback.invoke(n.getAttributes().asReadableMap());  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rDelete Error: " + Log.getStackTraceString(e));  }}  }
class C{  public boolean is_terminal(MethodOrMethodContext mc){  Stack<SootMethod> sys_stack=new Stack<SootMethod>();  boolean result;  if (!is_system(mc.method()))   result=false; else {    if (!process_callbacks)     result=true; else {      if ((stack.size() > 0) && is_system(stack.peek()))       result=!calls_app_method(mc,sys_stack); else {        if (can_have_callbacks(mc.method()))         result=!calls_app_method(mc,sys_stack); else         result=true;      }    }  }  logger.info("  {} terminal = {}",mc.method(),result);  return result;}  }
class C{  public ParameterizedTypeRef_IM createParameterizedTypeRef_IM(){  ParameterizedTypeRef_IMImpl parameterizedTypeRef_IM=new ParameterizedTypeRef_IMImpl();  return parameterizedTypeRef_IM;}  }
class C{  @Override public int perimeter(int size){  return 0;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  @Override public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name))   return IOCase.SENSITIVE;  if (IOCase.INSENSITIVE.name.equals(name))   return IOCase.INSENSITIVE;  if (IOCase.SYSTEM.name.equals(name))   return IOCase.SYSTEM;  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public static String readFile(Class<?> context,String name) throws IOException {  try (InputStream in=context.getResourceAsStream(name)){    if (in == null) {      return null;    }    return new String(ByteStreams.toByteArray(in),ENC);  } catch (  IOException e) {    throw new IOException("Error reading " + name,e);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public Future<Void> writeResult(SegmentedScanResult result){  Future<Void> jobSubmission=null;  List<BatchWriteItemRequest> batches=splitResultIntoBatches(result.getScanResult(),tableName);  Iterator<BatchWriteItemRequest> batchesIterator=batches.iterator();  while (batchesIterator.hasNext()) {    try {      jobSubmission=exec.submit(new DynamoDBConsumerWorker(batchesIterator.next(),client,rateLimiter,tableName));    } catch (    NullPointerException npe) {      throw new NullPointerException("Thread pool not initialized for LogStashExecutor");    }  }  return jobSubmission;}  }
class C{  public void write(OutputStream out) throws IOException {  sf.write(out);}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double abs(Complex c){  return Math.sqrt(c.real * c.real + c.imag * c.imag);}  }
class C{  public TDoubleDoubleHashMap absoluteDistributionLog10(double descretization){  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double bin_idx=Math.ceil(Math.log10(values.get(i) / descretization));    bin_idx=Math.max(bin_idx,0.0);    double binWidth=Math.pow(10,bin_idx) - Math.pow(10,bin_idx - 1);    binWidth=Math.max(1.0,binWidth);    freq.adjustOrPutValue(Math.pow(10,bin_idx) * descretization,weights.get(i) / binWidth,weights.get(i) / binWidth);  }  return freq;}  }
class C{  protected boolean isWordDelim(final char ch){switch (ch) {case '.':case ',':case '!':case '?':case ';':    return true;default :  return false;}}  }
class C{  public ToolkitImage(ImageProducer is){  source=is;  if (is instanceof InputStreamImageSource) {    src=(InputStreamImageSource)is;  }}  }
class C{  private void parseNoWildCards(){  this.fSegments=new String[1];  this.fSegments[0]=this.fPattern;  this.fBound=this.fLength;}  }
class C{  public void dump(FileDescriptor fd,PrintWriter pw,String[] args){  pw.println(getName() + ":");  pw.println(" total records=" + getLogRecCount());  for (int i=0; i < getLogRecSize(); i++) {    pw.printf(" rec[%d]: %s\n",i,getLogRec(i).toString());    pw.flush();  }  pw.println("curState=" + getCurrentState().getName());}  }
class C{  void onPermissionRequestGranted(Collection<String> permissions){  updatePermissionsAsGranted(permissions);}  }
class C{  public GmAttribute(GoogleBaseAttributeId attributeId,Importance importance){  if (attributeId == null) {    throw new NullPointerException("AttributeId is null.");  }  this.attributeId=attributeId;  this.importance=importance;}  }
class C{  public void actionPerformed(final ActionEvent e){  final JList list=(JList)e.getSource();  if (fHomeAction) {    list.ensureIndexIsVisible(0);  } else {    final int size=list.getModel().getSize();    list.ensureIndexIsVisible(size - 1);  }}  }
class C{  private void generateDefinitions() throws MojoExecutionException {  for (  Class<?> clazz : modelClasses) {    processDefinitionClass(clazz);  }}  }
class C{  public static String unixTimeToHumanReadable(long milliseconds){  Date date=new Date(milliseconds);  DateFormat df=DateFormat.getDateTimeInstance();  return df.format(date);}  }
class C{  private String buildTransaction(final String type){  return (type == null) ? String.valueOf(System.currentTimeMillis()) : type + System.currentTimeMillis();}  }
class C{  private int colorDistance(int color1,int color2){  int blueDistance=abs(getBlue(color1) - getBlue(color2));  int greenDistance=abs(getGreen(color1) - getGreen(color2));  int redDistance=abs(getRed(color1) - getRed(color2));  return redDistance + greenDistance + blueDistance;}  }
class C{  public void notifyListener(){  Iterator<ChangeListener> iter;  iter=m_ChangeListeners.iterator();  while (iter.hasNext()) {    iter.next().stateChanged(new ChangeEvent(this));  }}  }
class C{  protected void onInvite(String targetNick,String sourceNick,String sourceLogin,String sourceHostname,String channel){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public double[][] to2DDoubleArray(){  return MLContextConversionUtil.matrixObjectTo2DDoubleArray(matrixObject);}  }
class C{  public static AddMarketingPermissionException convertToApi(org.oscm.internal.types.exception.AddMarketingPermissionException oldEx){  return convertExceptionToApi(oldEx,AddMarketingPermissionException.class);}  }
class C{  private int[] mapBack(Instances template,int i){  try {    return MLUtils.toIntArray(template.classAttribute().value(i));  } catch (  Exception e) {    return new int[]{};  }}  }
class C{  public OracleCollection createCollection(String collectionName,CollectionDescriptor options,String collectionCreateMode) throws OracleException {  OracleCollection result=openCollection(collectionName,options);  if (result != null)   return (result);  if (options == null)   options=CollectionDescriptor.createStandardBuilder().buildDescriptor(collectionName);  options=callCreatePLSQL(collectionName,options,collectionCreateMode);  return (openCollection(collectionName,options));}  }
class C{  public boolean parse(String[] argv){  try {    if (argv == null || argv.length == 0) {      return false;    }    for (int i=0; i < argv.length; i++) {      boolean hit=false;      if (argv[i].charAt(0) == option) {        String eval=argv[i].substring(1);        for (int j=0; j < args.size(); j++) {          Arg curArg=(Arg)args.elementAt(j);          if (curArg.is(eval,allowAbbr)) {            if (Debug.debugging("parse")) {              Debug.output("ArgParser: arg " + curArg.name + " reading values.");            }            if (!curArg.readArgs(argv,++i)) {              bail("ArgParser: Unexpected arguments with option " + curArg.name + ".",true);            }            hit=true;            if (curArg.numExpectedValues != TO_END) {              i+=(curArg.numExpectedValues - 1);            } else {              i=argv.length;            }          }        }        if (hit == false) {          bail(programName + ": unknown option " + argv[i],false);        }      }      if (hit == false) {        if (i == 0) {          rest=argv;        } else {          int diff=argv.length - i;          rest=new String[diff];          for (int k=0; k < diff; k++) {            rest[k]=argv[i + k];            if (rest[k].charAt(0) == option) {              bail("ArgParser: Not expecting option in list of arguments.",true);            }          }        }        if (Debug.debugging("parse")) {          Debug.output("ArgParser: adding " + rest.length + " strings to the leftover list.");        }        return true;      }    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {    bail("Expecting more arguments for option",true);  }catch (  NegativeArraySizeException nase) {    return false;  }  return true;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.485 -0500",hash_original_method="25611C5EA858F4B01007B3F78DCCE949",hash_generated_method="B00CD5DBF3B90CCA1774FF3426ED7F66") public Intent putIntegerArrayListExtra(String name,ArrayList<Integer> value){  mExtras.put(name,value);  return this;}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length,NO_OPTIONS);}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  private boolean equal(long[] array1,long[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public MultiSegmentPowerLawBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int expectedNumLeftNodes,int expectedMaxLeftDegree,double leftPowerLawExponent,int expectedNumRightNodes,int expectedMaxRightDegree,double rightPowerLawExponent,EdgeTypeMask edgeTypeMask,StatsReceiver statsReceiver){  super(maxNumSegments,maxNumEdgesPerSegment,new PowerLawSegmentProvider(expectedNumLeftNodes,expectedMaxLeftDegree,leftPowerLawExponent,expectedNumRightNodes,expectedMaxRightDegree,rightPowerLawExponent,edgeTypeMask,statsReceiver),new MultiSegmentReaderAccessibleInfoProvider<BipartiteGraphSegment>(maxNumSegments,maxNumEdgesPerSegment),statsReceiver);}  }
class C{  public boolean isUseClientMode(){  return client;}  }
class C{  public BasicNurbsCurve(Vec4D[] cps,KnotVector uKnots){  cpoly=cps;  this.uKnots=uKnots;  if (uKnots.length() != uKnots.getDegree() + cpoly.length + 1) {    throw new IllegalArgumentException("Nurbs Curve has wrong knot number");  }}  }
class C{  @Override public void execute() throws BuildException {  if (name == null || name.equals("")) {    throw new BuildException("The 'name' attribute is required within 'timestamp'.");  }  getProject().setProperty(name,Long.toString(System.currentTimeMillis()));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes","nls"}) public static void putVal(final XmlRpcStruct s,final String key,final String v){  final String value=v.trim();  if (value.startsWith("[")) {    try {      final JSONArray jArr=new JSONArray(value);      if (jArr.length() > 0) {        final Class cType=jArr.get(0).getClass();        final XmlRpcArray vals=new XmlRpcArray();        if (cType == String.class) {          for (int i=0; i < jArr.length(); i++) {            vals.add(jArr.getString(i));          }        } else {          final String className=FileParser.getClassName(key);          final Class<?> cl=Class.forName(className);          for (int i=0; i < jArr.length(); i++) {            final JSONConvertable o=(JSONConvertable)cl.newInstance();            o.fromJSONObject(jArr.getJSONObject(i));            vals.add(o);          }        }        s.put(key,vals);      }    } catch (    JSONException|ClassNotFoundException|InstantiationException|IllegalAccessException e) {      logger.error("cannot put key {} value {}: {}",key,v,e.getLocalizedMessage());    }  } else {    if (!"null".equalsIgnoreCase(value)) {      s.put(key,value);    }  }}  }
class C{  @Deprecated public static void enableExceptionSummary(boolean enable){  proxyFactory.enableExceptionSummary(enable);}  }
class C{  public static String calculateYouTubeUrl(String quality,boolean fallback,String videoId) throws IOException {  String uriStr=null;  OkHttpClient client=PopcornApplication.getHttpClient();  Request.Builder request=new Request.Builder();  request.url(YOUTUBE_VIDEO_INFORMATION_URL + videoId);  Call call=client.newCall(request.build());  Response response=call.execute();  String infoStr=response.body().string();  String[] args=infoStr.split("&");  Map<String,String> argMap=new HashMap<String,String>();  for (  String arg : args) {    String[] valStrArr=arg.split("=");    if (valStrArr.length >= 2) {      argMap.put(valStrArr[0],URLDecoder.decode(valStrArr[1]));    }  }  String fmtList=URLDecoder.decode(argMap.get("fmt_list"),"utf-8");  ArrayList<Format> formats=new ArrayList<Format>();  if (null != fmtList) {    String formatStrs[]=fmtList.split(",");    for (    String lFormatStr : formatStrs) {      Format format=new Format(lFormatStr);      formats.add(format);    }  }  String streamList=argMap.get("url_encoded_fmt_stream_map");  if (null != streamList) {    String streamStrs[]=streamList.split(",");    ArrayList<VideoStream> streams=new ArrayList<VideoStream>();    for (    String streamStr : streamStrs) {      VideoStream lStream=new VideoStream(streamStr);      streams.add(lStream);    }    int formatId=Integer.parseInt(quality);    Format searchFormat=new Format(formatId);    while (!formats.contains(searchFormat) && fallback) {      int oldId=searchFormat.getId();      int newId=getSupportedFallbackId(oldId);      if (oldId == newId) {        break;      }      searchFormat=new Format(newId);    }    int index=formats.indexOf(searchFormat);    if (index >= 0) {      VideoStream searchStream=streams.get(index);      uriStr=searchStream.getUrl();    }  }  return uriStr;}  }
class C{  public void prepareForInsert(){  mPreparedStatement=getStatement(false);  mPreparedStatement.clearBindings();}  }
class C{  public boolean internalContainsKey(Object key){  return context.containsKey(key);}  }
class C{  public static Long valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseLong(string,radix));}  }
class C{  public String toString(){  return "layer=" + layer + " id="+ id+ " flags="+ Integer.toBinaryString(flags)+ " "+ matrix;}  }
class C{  protected void updateViewTitle(View view,JFrame f){  URI uri=view.getURI();  String title;  if (uri == null) {    title=labels.getString("unnamedFile");  } else {    title=URIUtil.getName(uri);  }  if (view.hasUnsavedChanges()) {    title+="*";  }  view.setTitle(labels.getFormatted("frame.title",title,getName(),view.getMultipleOpenId()));  f.setTitle(view.getTitle());}  }
class C{  public CompositeSQLDataHandler(SQLDataHandler defaultHandler){  m_default=defaultHandler;}  }
class C{  public void registerSensor(Sensor s,int i){  if ((i < 0) || (i >= mNumInputBits)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1));    return;  }  if (sensorArray[i] == null) {    sensorArray[i]=s;    if (lastUsedSensor < i) {      lastUsedSensor=i;    }    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorTempSetting[i]=Sensor.UNKNOWN;    sensorORedSetting[i]=false;  } else {    log.warn("multiple registration of same sensor: KS" + Integer.toString(i + 1));  }}  }
class C{  static void cleanNetwork(Network network){  log.info("");  log.info("Cleaning network ...");  (new NetworkCleaner()).run(network);  log.info("... finished cleaning network.");  log.info("");}  }
class C{  public void writeDouble(double value) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  DataOutputStream dout=new DataOutputStream(baos);  dout.writeDouble(value);  dout.flush();  byte[] bytes=baos.toByteArray();  byte[] bytes2=new byte[8];  bytes2[0]=bytes[3];  bytes2[1]=bytes[2];  bytes2[2]=bytes[1];  bytes2[3]=bytes[0];  bytes2[4]=bytes[7];  bytes2[5]=bytes[6];  bytes2[6]=bytes[5];  bytes2[7]=bytes[4];  write(bytes2);}  }
class C{  public int execute(String sql,CreateTableAsSelect createAsSelect,String index) throws SQLException {  if (!createAsSelect.isWithData())   throw new SQLException("Not yet possible to create table as select without data (create emtpy table, " + "insert data and delete it will have the same effect");  SqlParser parser=new SqlParser();  int queryIdx=sql.toLowerCase().indexOf(" as ");  try {    String createSql=sql.substring(0,queryIdx) + " (_id String)";    CreateTable create=(CreateTable)parser.createStatement(createSql);    this.execute(createSql,create,index);  } catch (  SQLException sqle) {    throw sqle;  }catch (  Exception e) {    throw new SQLException("Unable to create table due to: " + e.getMessage(),e);  }  String insertSql="INSERT INTO " + createAsSelect.getName().toString() + " "+ sql.substring(queryIdx + 4);  Insert insert=(Insert)parser.createStatement(insertSql);  int res=this.execute(insertSql,insert,index);  this.statement.getConnection().getTypeMap();  return res;}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static boolean checkPrereadNames(PrereadNamesInterface prereadNames,File outputFile) throws IOException {  final long numberSequences=prereadNames.length();  final NameDuplicateDetector dupDetector=new NameDuplicateDetector(numberSequences);  for (long i=0; i < numberSequences; i++) {    dupDetector.addPair(prereadNames.name(i),(int)i,0);  }  return dupDetector.checkPrereadDuplicates(new PrereadNamesInterface[]{prereadNames},outputFile);}  }
class C{  public YongSplitInfo(int low,int high,int attr){  number=high - low + 1;  first=low;  last=high;  position=-1;  maxImpurity=-1.e20;  splitAttr=attr;  splitValue=0.0;  Utils.SMALL=1e-10;}  }
class C{  public SVGOMFEDiffuseLightingElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  static String toString(Serializable o) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(o);  oos.close();  return new String(BASE64EncoderStream.encode(baos.toByteArray()));}  }
class C{  public void findAndInit(Object someObj){  super.findAndInit(someObj);  if (someObj instanceof HelpMenuItems) {    if (Debug.debugging("menu")) {      Debug.output("DefaultHelpMenu found HelpMenuItems");    }    Iterator hmiit=((HelpMenuItems)someObj).iterator();    while (hmiit.hasNext()) {      add((JMenuItem)hmiit.next());    }  }}  }
class C{  public void write(InputStream content) throws IOException {  IOUtils.copy(content,out);}  }
class C{  public static SnmpEngineId createEngineId(InetAddress addr){  return createEngineId(42,addr);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableNumberValue res;  if (result == null) {    res=new AnimatableNumberValue(target);  } else {    res=(AnimatableNumberValue)result;  }  float v=value;  if (to != null) {    AnimatableNumberValue toNumber=(AnimatableNumberValue)to;    v+=interpolation * (toNumber.value - value);  }  if (accumulation != null) {    AnimatableNumberValue accNumber=(AnimatableNumberValue)accumulation;    v+=multiplier * accNumber.value;  }  if (res.value != v) {    res.value=v;    res.hasChanged=true;  }  return res;}  }
class C{  public String toDot(){  StringBuilder b=new StringBuilder();  b.append("digraph Automaton {\n");  b.append("  rankdir = LR\n");  final int numStates=det.getNumStates();  if (numStates > 0) {    b.append("  initial [shape=plaintext,label=\"0\"]\n");    b.append("  initial -> 0\n");  }  Transition t=new Transition();  for (int state=0; state < numStates; state++) {    b.append("  ");    b.append(state);    if (det.isAccept(state)) {      b.append(" [shape=doublecircle,label=\"" + state + "\"]\n");    } else {      b.append(" [shape=circle,label=\"" + state + "\"]\n");    }    int numTransitions=det.initTransition(state,t);    for (int i=0; i < numTransitions; i++) {      det.getNextTransition(t);      assert t.max >= t.min;      for (int j=t.min; j <= t.max; j++) {        b.append("  ");        b.append(state);        b.append(" -> ");        b.append(t.dest);        b.append(" [label=\"");        if (j == anyTermID) {          b.append('*');        } else {          b.append(idToTerm.get(j).utf8ToString());        }        b.append("\"]\n");      }    }  }  b.append('}');  return b.toString();}  }
class C{  public static boolean canReadSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.canRead();}  }
class C{  public Data(IQualifiedNameProvider qualifiedNameProvider){  this.qualifiedNameProvider=qualifiedNameProvider;  this.valueStrings=Sets.newHashSet();  this.applicableTypes=Sets.newHashSet();  this.typesOrModulesToFind=Sets.newHashSet();}  }
class C{  public Iterable<Integer> cycle(){  return cycle;}  }
class C{  public IgfsDataInputStream(InputStream in){  super(in);}  }
class C{  long timestamp(long timestamp){  this.timestamp=Math.max(this.timestamp,timestamp);  return this.timestamp;}  }
class C{  public QuarkFactoryResult create(Properties info) throws QuarkException {  try {    Connection connection=new Connection(info);    connection.runFlyWay();    DSSet dsSet=connection.getDSSet();    DBI dbi=connection.getDbi();    JdbcSourceDAO jdbcSourceDAO=dbi.onDemand(JdbcSourceDAO.class);    QuboleDbSourceDAO quboleDbSourceDAO=dbi.onDemand(QuboleDbSourceDAO.class);    CubeDAO cubeDAO=dbi.onDemand(CubeDAO.class);    ViewDAO viewDAO=dbi.onDemand(ViewDAO.class);    MeasureDAO measureDAO=dbi.onDemand(MeasureDAO.class);    DimensionDAO dimensionDAO=dbi.onDemand(DimensionDAO.class);    long dsSetId=dsSet.getId();    long defaultDataSourceId=dsSet.getDefaultDatasourceId();    List<JdbcSource> jdbcSources=jdbcSourceDAO.findByDSSetId(dsSetId);    List<QuboleDbSource> quboleDbSources=quboleDbSourceDAO.findByDSSetId(dsSetId);    List<DataSource> dataSources=new ArrayList<>();    dataSources.addAll(jdbcSources);    dataSources.addAll(quboleDbSources);    ImmutableList.Builder<com.qubole.quark.planner.DataSourceSchema> schemaList=new ImmutableList.Builder<>();    com.qubole.quark.planner.DataSourceSchema defaultSchema=null;    for (    DataSource dataSource : dataSources) {      com.qubole.quark.planner.DataSourceSchema dataSourceSchema=new DataSourceSchema(dataSource.getProperties(defaultDataSourceId));      if (dataSource.getId() == defaultDataSourceId) {        defaultSchema=dataSourceSchema;      }      schemaList.add(dataSourceSchema);    }    RelSchema relSchema=getRelSchema(viewDAO,cubeDAO,measureDAO,dimensionDAO,dsSetId);    return new QuarkFactoryResult(schemaList.build(),relSchema,defaultSchema);  } catch (  Exception se) {    LOG.error(se.getMessage());    throw new QuarkException(se);  }}  }
class C{  public static boolean checkForAMSSeries(StorageSystem storageSystem){  return (storageSystem.getModel() != null && storageSystem.getModel().startsWith(HDSConstants.AMS_SERIES_MODEL));}  }
class C{  private SemProposition(SemIm semIm){  if (semIm == null) {    throw new NullPointerException();  }  this.semIm=semIm;  this.values=new double[semIm.getVariableNodes().size()];  for (int i=0; i < values.length; i++) {    values[i]=Double.NaN;  }}  }
class C{  public T caseComponent(Component object){  return null;}  }
class C{  public void reset(){  super.reset();  H0=0x67452301;  H1=0xefcdab89;  H2=0x98badcfe;  H3=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public boolean isSetSyncValueResponse(){  return this.syncValueResponse != null;}  }
class C{  public static ThreadSafeSourceFile wrap(Object syncObj,SourceFile sourceFile){  if (sourceFile != null)   return new ThreadSafeSourceFile(syncObj,sourceFile); else   return null;}  }
class C{  @NonNull public IconDrawable colorRes(@NonNull Context context,@ColorRes int colorRes){  return color(context.getResources().getColorStateList(colorRes));}  }
class C{  public int index(int what){  for (int i=0; i < count; i++) {    if (data[i] == what) {      return i;    }  }  return -1;}  }
class C{  public boolean hasNamespace(ByteString namespace){  return namespace != null && contents.containsKey(namespace);}  }
class C{  protected boolean isParam(ExpressionNode expr){  while (null != expr) {    if (expr instanceof ElemTemplateElement)     break;    expr=expr.exprGetParent();  }  if (null != expr) {    ElemTemplateElement ete=(ElemTemplateElement)expr;    while (null != ete) {      int type=ete.getXSLToken();switch (type) {case Constants.ELEMNAME_PARAMVARIABLE:        return true;case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_STYLESHEET:      return false;  }  ete=ete.getParentElem();}}return false;}  }
class C{  public OutputBuffer(String stdout,String stderr){  this.stdout=stdout;  this.stderr=stderr;}  }
class C{  public void updateBlock(GlowBlock block){}  }
class C{  public static int murmurHash3(byte[] data,long nTweak,int hashNum,byte[] object){  int h1=(int)(hashNum * 0xFBA4C795L + nTweak);  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int numBlocks=(object.length / 4) * 4;  for (int i=0; i < numBlocks; i+=4) {    int k1=(object[i] & 0xFF) | ((object[i + 1] & 0xFF) << 8) | ((object[i + 2] & 0xFF) << 16)| ((object[i + 3] & 0xFF) << 24);    k1*=c1;    k1=rotateLeft32(k1,15);    k1*=c2;    h1^=k1;    h1=rotateLeft32(h1,13);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (object.length & 3) {case 3:    k1^=(object[numBlocks + 2] & 0xff) << 16;case 2:  k1^=(object[numBlocks + 1] & 0xff) << 8;case 1:k1^=(object[numBlocks] & 0xff);k1*=c1;k1=rotateLeft32(k1,15);k1*=c2;h1^=k1;default :break;}h1^=object.length;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return (int)((h1 & 0xFFFFFFFFL) % (data.length * 8));}  }
class C{  public void release(){  reset();  if (_bufferRecycler != null && _currBlock != null) {    _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER,_currBlock);  }}  }
class C{  public boolean supportsLeftOuterJoin(){  return supportedJOINs[JoinRowSet.LEFT_OUTER_JOIN];}  }
class C{  public Entry(float val,int xIndex,Object data){  this(val,xIndex);  this.mData=data;}  }
class C{  public Name parse(String name) throws NamingException {  Vector<String> comps=insStringToStringifiedComps(name);  return new CNCompoundName(comps.elements());}  }
class C{  public boolean has(String key){  return urlParams.get(key) != null || streamParams.get(key) != null || fileParams.get(key) != null || urlParamsWithObjects.get(key) != null;}  }
class C{  public SignalServiceDataMessage(long timestamp,List<SignalServiceAttachment> attachments,String body){  this(timestamp,attachments,body,0);}  }
class C{  public T cellpadding(String value){  return attr("cellpadding",value);}  }
class C{  public void add(Renderable item,String name){  if (!(item instanceof GeographicExtent)) {    String message=Logging.getMessage("GeographicTree.NotGeometricExtent");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.extentTree.add(item,((GeographicExtent)item).getSector().asDegreesArray(),name);}  }
class C{  public void testmodInverseNeg1(){  byte aBytes[]={15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={2,122,45,36,100};  int aSign=-1;  int mSign=1;  byte rBytes[]={0,-41,4,-91,27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected void runTests() throws Exception {  targetClass=startToMain("ConstantPoolGCTarg").location().declaringType();  if (vm().canGetConstantPool()) {    byte[] cpbytes=targetClass.constantPool();    Field constantPoolBytesRef=ReferenceTypeImpl.class.getDeclaredField("constantPoolBytesRef");    constantPoolBytesRef.setAccessible(true);    Reference softRef=(Reference)constantPoolBytesRef.get(targetClass);    softRef.clear();    byte[] cpbytes2=targetClass.constantPool();    if (!Arrays.equals(cpbytes,cpbytes2)) {      failure("Consequent constantPool results vary, first was : " + cpbytes + ", now: "+ cpbytes2);    }    ;  } else {    System.out.println("can get constant pool version not supported");  }  listenUntilVMDisconnect();  if (!testFailed) {    println("ConstantPoolInfoGC: passed");  } else {    throw new Exception("ConstantPoolInfoGC: failed");  }}  }
class C{  public String goldAnswer(){  return (String)get(GOLDANSWER_KEY);}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public void copyTo(EntityContext newEntityContext,QueryBatcher copyTo){  if (copyTo != this) {    copyTo.queries.clear();    copyTo.results.clear();    copyTo.queries.addAll(queries);  }  if (copyTo.results != results) {    for (    QueryResult<?> result : results) {      copyTo.results.add(result.copyResultTo(newEntityContext));    }  }}  }
class C{  public LinearGradient(Color color1,Color... colors){  this.colors=new ArrayList<Color>();  this.colors.add(color1);  this.colors.addAll(Arrays.asList(colors));}  }
class C{  private StringBuilder createIndent(int indent){  StringBuilder oneIndent=createIndent();  StringBuilder ret=new StringBuilder();  while (indent-- > 0) {    ret.append(oneIndent);  }  return ret;}  }
class C{  private void addBound(String boundSignature){  if (SignatureUtil.isJavaLangObject(boundSignature))   return;  boolean found=false;  for (ListIterator<String> it=fBounds.listIterator(); it.hasNext(); ) {    String old=it.next();    if (isTrueSubtypeOf(boundSignature,old)) {      if (!found) {        it.set(boundSignature);        found=true;      } else {        it.remove();      }    }  }  if (!found)   fBounds.add(boundSignature);}  }
class C{  protected void statementCreateAfter(StatementProxy statement){  statementLog("{conn-" + statement.getConnectionProxy().getId() + ", stmt-"+ statement.getId()+ "} created");}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(ofbV,0,ofbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize);  System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  public final void testSetSeedbyteArray01(){  try {    sr.setSeed(null);    fail("setSeed(null) :: No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  public int size(){  return count;}  }
class C{  public void addEnum(String value,Enum e){  enumToValueMap.put(e,value);  Set<Enum> enums;  if (valueToEnumMap.containsKey(value)) {    enums=valueToEnumMap.get(value);  } else {    enums=new HashSet<Enum>();    valueToEnumMap.put(value,enums);  }  enums.add(e);}  }
class C{  public Command handleFlowRemoved(IOFSwitch sw,OFFlowRemoved msg,FloodlightContext cntx){  U64 cookie=msg.getCookie();  if (AppCookie.extractApp(cookie) == STATIC_FLOW_APP_ID) {    OFFlowRemovedReason reason=null;switch (msg.getVersion()) {case OF_10:      reason=OFFlowRemovedReasonSerializerVer10.ofWireValue((byte)msg.getReason());    break;case OF_11:  reason=OFFlowRemovedReasonSerializerVer11.ofWireValue((byte)msg.getReason());break;case OF_12:reason=OFFlowRemovedReasonSerializerVer12.ofWireValue((byte)msg.getReason());break;case OF_13:reason=OFFlowRemovedReasonSerializerVer13.ofWireValue((byte)msg.getReason());break;case OF_14:reason=OFFlowRemovedReasonSerializerVer14.ofWireValue((byte)msg.getReason());break;default :log.debug("OpenFlow version {} unsupported for OFFlowRemovedReasonSerializerVerXX",msg.getVersion());break;}if (reason != null) {if (OFFlowRemovedReason.DELETE == reason) {log.error("Got a FlowRemove message for a infinite " + "timeout flow: {} from switch {}",msg,sw);} else if (OFFlowRemovedReason.HARD_TIMEOUT == reason || OFFlowRemovedReason.IDLE_TIMEOUT == reason) {log.debug("Received an IDLE or HARD timeout for an SFP flow. Removing it from the SFP DB.");String flowToRemove=null;Map<String,OFFlowMod> flowsByName=getFlows(sw.getId());for (Map.Entry<String,OFFlowMod> entry : flowsByName.entrySet()) {if (msg.getCookie().equals(entry.getValue().getCookie()) && msg.getHardTimeout() == entry.getValue().getHardTimeout() && msg.getIdleTimeout() == entry.getValue().getIdleTimeout() && msg.getMatch().equals(entry.getValue().getMatch()) && msg.getPriority() == entry.getValue().getPriority() && msg.getTableId().equals(entry.getValue().getTableId())) {flowToRemove=entry.getKey();break;}}log.debug("Flow to Remove: {}",flowToRemove);if (flowToRemove != null) {deleteFlow(flowToRemove);}}return Command.STOP;}}return Command.CONTINUE;}  }
class C{  public void initialise(int sourceDimensions,int destDimensions,int k,int k_tau,int l,int l_tau,int delay) throws Exception {  if (delay < 0) {    throw new Exception("Cannot compute TE with source-destination delay < 0");  }  this.sourceDimensions=sourceDimensions;  this.destDimensions=destDimensions;  this.k=k;  this.k_tau=k_tau;  this.l=l;  this.l_tau=l_tau;  this.delay=delay;  int startTimeBasedOnDestPast=(k - 1) * k_tau;  int startTimeBasedOnSourcePast=(l - 1) * l_tau + delay - 1;  startTimeForFirstDestEmbedding=Math.max(startTimeBasedOnDestPast,startTimeBasedOnSourcePast);  condMiCalc.initialise(l * sourceDimensions,destDimensions,k * destDimensions);}  }
class C{  public void testBug75209() throws Exception {  createTable("testBug75209","(id INT PRIMARY KEY)","InnoDB");  boolean useLocTransSt=false;  do {    this.stmt.executeUpdate("TRUNCATE TABLE testBug75209");    this.stmt.executeUpdate("INSERT INTO testBug75209 VALUES (1)");    final String testCase=String.format("Case: [LocTransSt: %s]",useLocTransSt ? "Y" : "N");    final Connection testConn=getConnectionWithProps("useLocalTransactionState=" + useLocTransSt);    testConn.setAutoCommit(false);    final Statement testStmt=testConn.createStatement();    try {      assertEquals(testCase,1,testStmt.executeUpdate("INSERT INTO testBug75209 VALUES(2)"));      testStmt.executeUpdate("INSERT INTO testBug75209 VALUES(2)");      fail(testCase + ": SQLException expected here!");    } catch (    Exception e) {      testConn.rollback();    }    testStmt.close();    testConn.setAutoCommit(true);    testConn.close();    this.rs=this.stmt.executeQuery("SELECT COUNT(*) FROM testBug75209");    assertTrue(this.rs.next());    assertEquals(testCase,1,this.rs.getInt(1));  } while (useLocTransSt=!useLocTransSt);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDAudioRenderFilter(getString(stack));  return null;}  }
class C{  public void addFile(IFile file){  Assert.isNotNull(file);  fFiles.add(file);}  }
class C{  public void updateLookAndFeel(){  try {    System.out.println("!!currentLookAndFeel=" + currentLookAndFeel);    UIManager.setLookAndFeel(currentLookAndFeel);    if (isApplet()) {      updateThisSwingSet();    } else {      for (      SwingSet2 ss : swingSets) {        ss.updateThisSwingSet();      }    }  } catch (  Exception ex) {    System.out.println("Failed loading L&F: " + currentLookAndFeel);    System.out.println(ex);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void createAzimuthLabels(){  Iterable<? extends Angle> azimuths=this.getAzimuths();  if (azimuths == null)   return;  for (  Angle azimuth : azimuths) {    this.addLabel(this.createAzimuthLabelString(azimuth));  }}  }
class C{  static final void eraseThreadLocals(Thread thread){  if (!IS_ANDROID) {    U.putObject(thread,THREADLOCALS,null);    U.putObject(thread,INHERITABLETHREADLOCALS,null);  }}  }
class C{  boolean isTransient(){  Object value=getValue(TRANSIENT);  return (value instanceof Boolean) ? (Boolean)value : false;}  }
class C{  public static void run(String[] args) throws KeywordOptimizerException {  Options options=createCommandLineOptions();  CommandLineParser parser=new BasicParser();  CommandLine cmdLine=null;  try {    cmdLine=parser.parse(options,args);  } catch (  ParseException e) {    throw new KeywordOptimizerException("Error parsing command line parameters",e);  }  logHeadline("Startup");  checkOutputParameters(cmdLine);  OptimizationContext context=createContext(cmdLine);  CampaignConfiguration campaignConfiguration=getCampaignConfiguration(cmdLine);  Set<KeywordMatchType> matchTypes=getMatchTypes(cmdLine);  SeedGenerator seedGenerator=getSeedGenerator(cmdLine,context,matchTypes,campaignConfiguration);  AlternativesFinder alternativesFinder=createObjectBasedOnProperty(AlternativesFinder.class,KeywordOptimizerProperty.AlternativesFinderClass,context);  TrafficEstimator estimator=createObjectBasedOnProperty(TrafficEstimator.class,KeywordOptimizerProperty.EstimatorClass,context);  ScoreCalculator scoreCalculator=createObjectBasedOnProperty(ScoreCalculator.class,KeywordOptimizerProperty.ScoreCalculatorClass,context);  Evaluator evaluator=new EstimatorBasedEvaluator(new CachedEstimator(estimator),scoreCalculator);  RoundStrategy roundStrategy=createObjectBasedOnProperty(RoundStrategy.class,KeywordOptimizerProperty.RoundStrategyClass,context);  Optimizer optimizer=new Optimizer(seedGenerator,alternativesFinder,evaluator,roundStrategy);  logHeadline("Optimization");  KeywordCollection bestKeywords=optimizer.optimize();  output(cmdLine,bestKeywords);}  }
class C{  public CAddressSpaceNodeMenuBuilder(final JTree projectTree,final DefaultMutableTreeNode parentNode,final JTable table,final IDatabase database,final INaviProject project,final INaviAddressSpace[] addressSpaces,final IViewContainer container){  super(projectTree);  Preconditions.checkNotNull(projectTree,"IE01943: Project tree argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01944: Database argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE01945: Project argument can't be null");  Preconditions.checkNotNull(addressSpaces,"IE01946: Address space argument can't be null");  for (  final INaviAddressSpace addressSpace : addressSpaces) {    Preconditions.checkNotNull(addressSpace,"IE01947: Address spaces list contains a null-element");  }  m_parentNode=parentNode;  m_addressSpaces=addressSpaces.clone();  m_table=table;  m_container=container;  m_loadAddressSpaceAction=CActionProxy.proxy(new CLoadAddressSpaceAction(projectTree,m_addressSpaces));  if (addressSpaces.length == 1) {    updateActions(m_addressSpaces[0]);    m_addressSpaces[0].addListener(m_listener);  }}  }
class C{  private void readObject(){}  }
class C{  private void singleDeleteInternal(String url,boolean deleteDownloadedFileInPath,OnDeleteDownloadFileListener onDeleteDownloadFileListener){  DeleteDownloadFileTask deleteDownloadFileTask=new DeleteDownloadFileTask(url,deleteDownloadedFileInPath,mDownloadFileDeleter);  deleteDownloadFileTask.setOnDeleteDownloadFileListener(onDeleteDownloadFileListener);  addAndRunTask(deleteDownloadFileTask);}  }
class C{  public Rectangle(){  this.rect=new RotatedRect();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static int[] intArrayFromString(String string){  List<Integer> result=new ArrayList<Integer>(10);  if (StringUtils.isNotBlank(string)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(string,",",false);    while (tok.hasMoreTokens()) {      try {        result.add(Integer.parseInt(tok.nextToken()));      } catch (      NumberFormatException nfe) {        throw new IllegalStateException(nfe);      }    }  }  int[] arrayResult=new int[result.size()];  for (int i=0; i < result.size(); i++) {    arrayResult[i]=result.get(i);  }  return arrayResult;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=null;  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  String m_UpdateResult="";  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  log.info("This is #1");  m_Client=WebUtil.getParameterAsBoolean(request,"Client");  m_User=WebUtil.getParameterAsBoolean(request,"User");  m_Window=WebUtil.getParameterAsBoolean(request,"Window");  m_Org=WebUtil.getParameterAsBoolean(request,"Org");  log.info("This is #2");  String m_Action=WebUtil.getParameter(request,"PostAction");  setExplanation();  log.info("This is the m_Action" + m_Action);  if (m_Action.equals("Delete"))   m_UpdateResult=delete(m_Client,m_User,m_Window,m_Org); else   if (m_Action.equals("Add"))   m_UpdateResult=insert(m_Client,m_User,m_Window,m_Org);  log.info("This is the call");  doc=createParameterPage(ws,wsc,request,m_UpdateResult);  WebUtil.createResponse(request,response,this,null,doc,false);  return;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 4:case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public static void loadClasses(File jar,List<String> excludedClasses){  Map<String,CompiledClass> newClasses=CompiledClassUtils.parseClassFilesInJar(jar);  removeExclusions(newClasses,excludedClasses);  classes.putAll(newClasses);}  }
class C{  public final MutableDouble2D add(final Double2D other1,final MutableDouble2D other2){  x=other1.x + other2.x;  y=other1.y + other2.y;  return this;}  }
class C{  private static int lcgRandom(int previousVal){  return previousVal * 1664525 + 1013904223;}  }
class C{  private void addChart(){  JFreeChart chart=ChartFactory.createStackedBarChart3D(getTitle(),null,"Breakdown" + unitSuffix(),dataset,PlotOrientation.VERTICAL,true,true,false);  CategoryAxis domainAxis=chart.getCategoryPlot().getDomainAxis();  domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0));  chart.addProgressListener(locker);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  CategoryItemRenderer renderer=plot.getRenderer();  renderer.setToolTipGenerator(dataset);  mainPanel().add(BorderLayout.CENTER,new ChartPanel(chart));}  }
class C{  @Override public ConcurrentSkipListPriorityQueue<E> clone(){  ConcurrentSkipListPriorityQueue<E> clone=null;  try {    clone=(ConcurrentSkipListPriorityQueue<E>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  clone.initialize();  clone.buildFromSorted(this);  return clone;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public synchronized void save() throws IOException, CoreException {  try {    try {      try {        saveMeta();      }  finally {        try {          saveContent();        }  finally {          try {            saveMarkerSheet();          }  finally {            try {              saveStyleSheet();            }  finally {              try {                saveComments();              }  finally {                try {                  if (!workbook.isSkipRevisionsWhenSaving()) {                    saveRevisions();                  }                }  finally {                  try {                    copyOtherStaff();                  }  finally {                    saveManifest();                  }                }              }            }          }        }      }    }  finally {      clearEncryptionData();    }  }  finally {    if (target instanceof ICloseableOutputTarget) {      ((ICloseableOutputTarget)target).close();    }  }}  }
class C{  public UpdatePropUpdater(final String oldFile,final String newFile,final String oldVersion,final String newVersion,String folder,List<String> files) throws Exception {  this.newFile=newFile;  this.newVersion=newVersion;  this.oldFile=oldFile;  this.oldVersion=oldVersion;  this.folder=folder;  this.files=new ArrayList<String>(files);  signer=new UpdateSigner();}  }
class C{  public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof HostIdentifier)) {    return false;  }  return uri.equals(((HostIdentifier)object).uri);}  }
class C{  public boolean isArgsOverload(){  int argsCount=mthInfo.getArgumentsTypes().size();  if (argsCount == 0) {    return false;  }  String name=getName();  for (  MethodNode method : parentClass.getMethods()) {    MethodInfo otherMthInfo=method.mthInfo;    if (this != method && otherMthInfo.getArgumentsTypes().size() == argsCount && otherMthInfo.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  @Override public void preinitializeMapKey(DatabaseTable table){  setTableForAggregateMappingKey(table);}  }
class C{  private void lowerVolume(int step){  float voulme=((float)step) / 30f;  player.setVolume(voulme,voulme);}  }
class C{  public synchronized boolean addAll(int index,Collection c){  modCount++;  if (index < 0 || index > elementCount) {    throw new ArrayIndexOutOfBoundsException(index);  }  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  int numMoved=elementCount - index;  if (numMoved > 0) {    System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  }  System.arraycopy(a,0,elementData,index,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 % z2);            } else {              outputFile.setValue(row,col,Double.POSITIVE_INFINITY);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 % constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 % z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void boardHexHighlighted(BoardViewEvent b){}  }
class C{  @Override public boolean release(int decrement){  if (isEmpty) {    return false;  }  if (decrement < 1) {    throw new IllegalStateException(String.format("release(%d) argument is not positive. Buffer Info: %s",decrement,toVerboseString()));  }  final int refCnt=ledger.decrement(decrement);  if (BaseAllocator.DEBUG) {    historicalLog.recordEvent("release(%d). original value: %d",decrement,refCnt + decrement);  }  if (refCnt < 0) {    throw new IllegalStateException(String.format("ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s",id,toVerboseString()));  }  return refCnt == 0;}  }
class C{  private void internalGroupSnapCopyToTarget(StorageSystem storage,BlockSnapshot snapshot,List<URI> snapshotList) throws Exception {  String snapGroupName=snapshot.getReplicationGroupInstance();  CIMObjectPath targetGroup=_cimPath.getReplicationGroupPath(storage,snapGroupName);  CIMObjectPath settingsState=_helper.getSettingsDefineStateForSourceGroup(storage,snapshot.getSettingsGroupInstance());  CIMArgument[] inArgs=_helper.getVNXCopyToTargetGroupInputArguments(settingsState,targetGroup);  CIMArgument[] outArgs=new CIMArgument[5];  _helper.callModifySettingsDefineState(storage,inArgs,outArgs);  List<BlockSnapshot> snapshots=_dbClient.queryObject(BlockSnapshot.class,snapshotList);  for (  BlockSnapshot it : snapshots) {    it.setNeedsCopyToTarget(false);  }  _dbClient.persistObject(snapshots);}  }
class C{  public String runCommand(String command) throws InterruptedException, IOException {  String os=System.getProperty("os.name");  if (os.contains("Windows")) {    builder=new ProcessBuilder("cmd.exe","/c",command);    builder.redirectErrorStream(true);    Thread.sleep(1000);    p=builder.start();  } else   p=Runtime.getRuntime().exec(command);  BufferedReader r=new BufferedReader(new InputStreamReader(p.getInputStream()));  String line="";  String allLine="";  int i=1;  while ((line=r.readLine()) != null) {    allLine=allLine + "" + line+ "\n";    if (line.contains("Console LogLevel: debug"))     break;    i++;  }  return allLine;}  }
class C{  private List<DiffEntry> commitToWorkingTree(String commitId,DiffFormatter formatter) throws IOException {  ObjectId commitA=repository.resolve(commitId);  if (commitA == null) {    File heads=new File(repository.getWorkTree().getPath() + "/.git/refs/heads");    if (heads.exists() && heads.list().length == 0) {      return Collections.emptyList();    }    throw new IllegalArgumentException("Invalid commit id " + commitId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   List<DiffEntry> diff;  try (ObjectReader reader=repository.newObjectReader()){    CanonicalTreeParser iterA=new CanonicalTreeParser();    iterA.reset(reader,treeA);    FileTreeIterator iterB=new FileTreeIterator(repository);    formatter.setDetectRenames(false);    diff=formatter.scan(iterA,iterB);    if (!request.isNoRenames()) {      RenameDetector renameDetector=createRenameDetector();      ContentSource.Pair sourcePairReader=new ContentSource.Pair(ContentSource.create(reader),ContentSource.create(iterB));      renameDetector.addAll(diff);      diff=renameDetector.compute(sourcePairReader,NullProgressMonitor.INSTANCE);    }  }   return diff;}  }
class C{  public UserPresence(State state,long lastSeen){  this.state=state;  this.lastSeen=lastSeen;}  }
class C{  public int size(){  return this.written;}  }
class C{  public static void transform(StreamSource src,StreamSource stylesheet,Fop fop) throws FOPException {  Result res=new SAXResult(fop.getDefaultHandler());  try {    TransformerFactory factory=TransformerFactory.newInstance();    Transformer transformer;    if (stylesheet == null) {      transformer=factory.newTransformer();    } else {      transformer=factory.newTransformer(stylesheet);    }    transformer.setURIResolver(new LocalResolver(transformer.getURIResolver()));    transformer.transform(src,res);  } catch (  Exception e) {    throw new FOPException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:00.592 -0500",hash_original_method="82EFBDE53CEDFA09C7F551715591238A",hash_generated_method="7297BDFBC925A6851A3AFBD5F6147A71") public boolean isEriFileLoaded(){  return isEriFileLoaded;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  maybeParse();  out.defaultWriteObject();}  }
class C{  protected void updateGroupExpandStatus(int aGroupPosition,boolean aValue){}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/acl") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep updateFileSystemAcls(@PathParam("id") URI id,FileNfsACLUpdateParams param) throws InternalException {  _log.info("Update FS ACL : request received for {}  with {}",id,param);  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.NFSv4.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool does not support " + StorageProtocol.File.NFSv4.name() + " protocol");  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  String task=UUID.randomUUID().toString();  String path=fs.getPath();  _log.info("fileSystem  path {} ",path);  Operation op=new Operation();  try {    _log.info("Sub Dir Provided {}",param.getSubDir());    NfsACLUtility util=new NfsACLUtility(_dbClient,fs,null,param.getSubDir());    util.verifyNfsACLs(param);    _log.info("No Errors found proceeding further {}, {}, {}",new Object[]{_dbClient,fs,param});    op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UPDATE_FILE_SYSTEM_NFS_ACL);    op.setDescription("Filesystem NFS ACL update");    controller.updateNFSAcl(device.getId(),fs.getId(),param,task);    auditOp(OperationTypeEnum.UPDATE_FILE_SYSTEM_NFS_ACL,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),param);  } catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Processing File System ACL Updates {}, {}",e.getMessage(),e);    throw e;  }catch (  Exception e) {    _log.error("Error Processing File System ACL Updates  {}, {}",e.getMessage(),e);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(5);  result.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));  result.addElement(new Option("\tThe size of the output dataset, as a percentage of\n" + "\tthe input dataset (default 100)","Z",1,"-Z <num>"));  result.addElement(new Option("\tBias factor towards uniform class distribution.\n" + "\t0 = distribution in input data -- 1 = uniform distribution.\n" + "\t(default 0)","B",1,"-B <num>"));  result.addElement(new Option("\tDisables replacement of instances\n" + "\t(default: with replacement)","no-replacement",0,"-no-replacement"));  result.addElement(new Option("\tInverts the selection - only available with '-no-replacement'.","V",0,"-V"));  return result.elements();}  }
class C{  public void close(){  if (currentTileFile != null) {    currentTileFile.close();  }  currentTileFile=null;}  }
class C{  public static boolean isConversionSupported(AudioFormat targetFormat,AudioFormat sourceFormat){  List codecs=getFormatConversionProviders();  for (int i=0; i < codecs.size(); i++) {    FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);    if (codec.isConversionSupported(targetFormat,sourceFormat)) {      return true;    }  }  return false;}  }
class C{  private FsPermission permission(IgfsFile file){  String perm=file.property(IgfsUtils.PROP_PERMISSION,null);  if (perm == null)   return FsPermission.getDefault();  try {    return new FsPermission((short)Integer.parseInt(perm,8));  } catch (  NumberFormatException ignore) {    return FsPermission.getDefault();  }}  }
class C{  public Set<Set<V>> apply(Graph<V,E> graph){  if (mNumEdgesToRemove < 0 || mNumEdgesToRemove > graph.getEdgeCount()) {    throw new IllegalArgumentException("Invalid number of edges passed in.");  }  edges_removed.clear();  for (int k=0; k < mNumEdgesToRemove; k++) {    BetweennessCentrality<V,E> bc=new BetweennessCentrality<V,E>(graph);    E to_remove=null;    double score=0;    for (    E e : graph.getEdges())     if (bc.getEdgeScore(e) > score) {      to_remove=e;      score=bc.getEdgeScore(e);    }    edges_removed.put(to_remove,graph.getEndpoints(to_remove));    graph.removeEdge(to_remove);  }  WeakComponentClusterer<V,E> wcSearch=new WeakComponentClusterer<V,E>();  Set<Set<V>> clusterSet=wcSearch.apply(graph);  for (  Map.Entry<E,Pair<V>> entry : edges_removed.entrySet()) {    Pair<V> endpoints=entry.getValue();    graph.addEdge(entry.getKey(),endpoints.getFirst(),endpoints.getSecond());  }  return clusterSet;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static void optimizePreFetchDocs(ResponseBuilder rb,DocList docs,Query query,SolrQueryRequest req,SolrQueryResponse res) throws IOException {  SolrIndexSearcher searcher=req.getSearcher();  if (!searcher.enableLazyFieldLoading) {    return;  }  ReturnFields returnFields=res.getReturnFields();  if (returnFields.getLuceneFieldNames() != null) {    Set<String> fieldFilter=returnFields.getLuceneFieldNames();    if (rb.doHighlights) {      fieldFilter=new HashSet<>(fieldFilter);      SolrHighlighter highlighter=HighlightComponent.getHighlighter(req.getCore());      for (      String field : highlighter.getHighlightFields(query,req,null))       fieldFilter.add(field);      SchemaField keyField=searcher.getSchema().getUniqueKeyField();      if (null != keyField)       fieldFilter.add(keyField.getName());    }    DocIterator iter=docs.iterator();    for (int i=0; i < docs.size(); i++) {      searcher.doc(iter.nextDoc(),fieldFilter);    }  }}  }
class C{  public void stepOver() throws DebuggerException {  doStep(StepRequest.STEP_OVER);}  }
class C{  @SuppressWarnings("unchecked") public final void remove(InternalThreadLocalMap threadLocalMap){  if (threadLocalMap == null) {    return;  }  Object v=threadLocalMap.removeIndexedVariable(index);  removeFromVariablesToRemove(threadLocalMap,this);  if (v != InternalThreadLocalMap.UNSET) {    try {      onRemoval((V)v);    } catch (    Exception e) {      PlatformDependent.throwException(e);    }  }}  }
class C{  public void validateVPlexVolume(URI vplexSystemURI,URI vplexVolumeURI,String stepId){  Volume vplexVolume=null;  try {    ValidatorConfig validatorConfig=new ValidatorConfig();    validatorConfig.setCoordinator(coordinator);    if (!validatorConfig.isValidationEnabled()) {      WorkflowStepCompleter.stepSucceeded(stepId,"Validations not enabled");      return;    }    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystemURI,_dbClient);    vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    Set<String> volumeIds=new HashSet<>();    Map<String,List<VolumeInfo>> volumeInfoMap=new HashMap<>();    StringSet associatedVolumeIds=vplexVolume.getAssociatedVolumes();    if ((associatedVolumeIds == null) || (associatedVolumeIds.isEmpty())) {      _log.info("VPLEX volume {}:{} has no backend volumes to validate",vplexVolumeURI,vplexVolume.getLabel());      WorkflowStepCompleter.stepSucceded(stepId);      return;    } else {      volumeIds.addAll(associatedVolumeIds);    }    StringSet mirrorIds=vplexVolume.getMirrors();    if ((mirrorIds != null) && (mirrorIds.isEmpty() == false)) {      for (      String mirrorId : mirrorIds) {        VplexMirror mirror=getDataObject(VplexMirror.class,URI.create(mirrorId),_dbClient);        StringSet associatedVolumeIdsForMirror=mirror.getAssociatedVolumes();        if ((associatedVolumeIdsForMirror == null) || (associatedVolumeIdsForMirror.isEmpty())) {          _log.info("VPLEX mirror {}:{} has no associated volumes",mirrorId,mirror.getLabel());          throw DeviceControllerExceptions.vplex.vplexMirrorDoesNotHaveAssociatedVolumes(vplexVolume.getLabel(),mirror.getLabel());        } else {          volumeIds.addAll(associatedVolumeIdsForMirror);        }      }    }    for (    String volumesId : volumeIds) {      URI volumeURI=URI.create(volumesId);      Volume volume=getDataObject(Volume.class,volumeURI,_dbClient);      String clusterName=VPlexUtil.getVplexClusterName(volume.getVirtualArray(),vplexSystemURI,client,_dbClient);      StorageSystem storageSystem=getDataObject(StorageSystem.class,volume.getStorageController(),_dbClient);      List<String> itls=VPlexControllerUtils.getVolumeITLs(volume);      VolumeInfo volumeInfo=new VolumeInfo(storageSystem.getNativeGuid(),storageSystem.getSystemType(),volume.getWWN().toUpperCase().replaceAll(":",""),volume.getNativeId(),volume.getThinlyProvisioned().booleanValue(),itls);      _log.info(String.format("Validating backend volume %s on cluster %s",volumeURI,clusterName));      if (volumeInfoMap.containsKey(clusterName)) {        List<VolumeInfo> clusterVolumeInfos=volumeInfoMap.get(clusterName);        clusterVolumeInfos.add(volumeInfo);      } else {        List<VolumeInfo> clusterVolumeInfos=new ArrayList<>();        clusterVolumeInfos.add(volumeInfo);        volumeInfoMap.put(clusterName,clusterVolumeInfos);      }    }    client.validateBackendVolumesForVPlexVolume(vplexVolume.getDeviceLabel(),vplexVolume.getNativeId(),volumeInfoMap);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  InternalException ie) {    _log.info("Exception attempting to validate the backend volumes for VPLEX volume {}",vplexVolumeURI);    WorkflowStepCompleter.stepFailed(stepId,ie);  }catch (  Exception e) {    _log.info("Exception attempting to validate the backend volumes for VPLEX volume {}",vplexVolumeURI);    ServiceCoded sc=DeviceControllerExceptions.vplex.failureValidatingVplexVolume(vplexVolumeURI.toString(),(vplexVolume != null ? vplexVolume.getLabel() : ""),e.getMessage());    WorkflowStepCompleter.stepFailed(stepId,sc);  }}  }
class C{  public boolean isBrushedMetalSet(){  return BRUSHED_METAL;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitLiteralResultElement(this);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  ParseRelation(JSONObject jsonObject,ParseDecoder decoder){  this.parent=null;  this.parentObjectId=null;  this.parentClassName=null;  this.key=null;  this.targetClass=jsonObject.optString("className",null);  JSONArray objectsArray=jsonObject.optJSONArray("objects");  if (objectsArray != null) {    for (int i=0; i < objectsArray.length(); ++i) {      knownObjects.add((ParseObject)decoder.decode(objectsArray.optJSONObject(i)));    }  }}  }
class C{  public boolean execute(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  tp.s[pos]++;  return true;}  }
class C{  public CallIDParser(String callID){  super(callID);}  }
class C{  public boolean hasSubElements(){  return subElements != null && !subElements.isEmpty();}  }
class C{  public boolean matchesLang(String range){  String[] subtags=getLang().split("-");  String[] subranges=range.split("-");  if (!subtags[0].equalsIgnoreCase(subranges[0]))   return false;  int r=1, t=1;  while (r < subranges.length) {    if ("*".equals(subranges[r])) {      r++;      continue;    }    if (t >= subtags.length)     return false;    if (subranges[r].equalsIgnoreCase(subtags[t])) {      r++;      t++;      continue;    }    if (subtags[t].length() == 1)     return false;    t++;    continue;  }  return true;}  }
class C{  private void approximateCubicBezier(final Point P0,final Point P1,final Point P2,final Point P3){  Point PA=getPointOnSegment(P0,P1,3.0 / 4.0);  Point PB=getPointOnSegment(P3,P2,3.0 / 4.0);  double dx=(P3.x - P0.x) / 16.0;  double dy=(P3.y - P0.y) / 16.0;  Point c1=getPointOnSegment(P0,P1,3.0 / 8.0);  Point c2=getPointOnSegment(PA,PB,3.0 / 8.0);  c2.x=c2.x - dx;  c2.y=c2.y - dy;  Point c3=getPointOnSegment(PB,PA,3.0 / 8.0);  c3.x=c3.x + dx;  c3.y=c3.y + dy;  Point c4=getPointOnSegment(P3,P2,3.0 / 8.0);  Point a1=new Point(((c1.x + c2.x) / 2.0),((c1.y + c2.y) / 2.0));  Point a2=new Point(((PA.x + PB.x) / 2.0),((PA.y + PB.y) / 2.0));  Point a3=new Point(((c3.x + c4.x) / 2.0),((c3.y + c4.y) / 2.0));  curved(c1.x,c1.y,a1.x,a1.y);  curved(c2.x,c2.y,a2.x,a2.y);  curved(c3.x,c3.y,a3.x,a3.y);  curved(c4.x,c4.y,P3.x,P3.y);  if (Trace.font_cubic) {    Trace.trace("Cubic Curve\n");    Trace.trace("P0:\t" + P0.x + "\t"+ P0.y);    Trace.trace("c1:\t" + c1.x + "\t"+ c1.y+ "\t\tP1:\t"+ P1.x+ "\t"+ P1.y);    Trace.trace("a1:\t" + a1.x + "\t"+ a1.y);    Trace.trace("c2:\t" + c2.x + "\t"+ c2.y);    Trace.trace("a2:\t" + a2.x + "\t"+ a2.y);    Trace.trace("c3:\t" + c3.x + "\t"+ c3.y);    Trace.trace("a3:\t" + a3.x + "\t"+ a3.y);    Trace.trace("c4:\t" + c4.x + "\t"+ c4.y+ "\t\tP2:\t"+ P2.x+ "\t"+ P2.y);    Trace.trace("P3:\t" + P3.x + "\t"+ P3.y);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override @SuppressWarnings("squid:S2259") public boolean equals(final Object obj){  if (!super.equals(obj)) {    return false;  }  final AbstractJpaTenantAwareBaseEntity other=(AbstractJpaTenantAwareBaseEntity)obj;  if (tenant == null) {    if (other.tenant != null) {      return false;    }  } else   if (!tenant.equals(other.tenant)) {    return false;  }  return true;}  }
class C{  public MethodTemplate addArgument(Variable var){  this.argumentList.add(var);  return this;}  }
class C{  public void navigateTo(@NotNull Breakpoint serverBreakpoint){  final XBreakpoint xIdeBreakpoint=ideBreakpoints.get(serverBreakpoint.getId());  if (xIdeBreakpoint != null && xIdeBreakpoint.getSourcePosition() != null && process.getXDebugSession() != null) {    xIdeBreakpoint.getSourcePosition().createNavigatable(process.getXDebugSession().getProject()).navigate(true);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.CONTAINER_TYPE;}  }
class C{  static public void simplify(Node node){  NodeList children=node.getChildNodes();  int i=0;  int len=children.getLength();  Node prevTextChild=null;  while (i < len) {    Node child=children.item(i);    if (child.hasChildNodes()) {      simplify(child);      prevTextChild=null;      i++;    } else {      int type=child.getNodeType();      if (type == Node.PROCESSING_INSTRUCTION_NODE) {        node.removeChild(child);        len--;      } else       if (type == Node.COMMENT_NODE) {        node.removeChild(child);        len--;      } else       if (type == Node.TEXT_NODE || type == Node.CDATA_SECTION_NODE) {        if (prevTextChild != null) {          CharacterData ptc=(CharacterData)prevTextChild;          ptc.setData(ptc.getNodeValue() + child.getNodeValue());          node.removeChild(child);          len--;        } else {          prevTextChild=child;          i++;        }      } else {        prevTextChild=null;        i++;      }    }  }}  }
class C{  public void findPackageAndClass() throws IOException {  packageName=null;  className=null;  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));  while (className == null || packageName == null) {    String line=reader.readLine();    if (line == null)     break;    if (packageName == null) {      int index=line.indexOf("package");      if (index >= 0) {        index+=7;        int end=line.indexOf(';',index);        if (end >= index) {          packageName=line.substring(index,end);          packageName=packageName.trim();        }      }    }    if (className == null) {      int index=line.indexOf("%class");      if (index >= 0) {        index+=6;        className=line.substring(index);        className=className.trim();      }    }  }  if (className == null)   className="Yylex";}  }
class C{  public static StringSet uriListToStringSet(List<URI> uris){  StringSet set=new StringSet();  if (uris != null && !uris.isEmpty()) {    for (    URI uri : uris) {      set.add(uri.toString());    }  }  return set;}  }
class C{  public static void close(){  EntityManager em=threadLocal.get();  if (em != null) {    em.close();  }  threadLocal.remove();}  }
class C{  public ContentLengthInputStream(final SessionInputBuffer in,long contentLength){  super();  if (in == null) {    throw new IllegalArgumentException("Input stream may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.in=in;  this.contentLength=contentLength;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,provider);}  }
class C{  public EnumerationModel(Enumeration enumeration,BeansWrapper wrapper){  super(enumeration,wrapper);}  }
class C{  HeapArrayOfDoublesCompactSketch(final ArrayOfDoublesUpdatableSketch sketch){  super(sketch.getNumValues());  isEmpty_=sketch.isEmpty();  theta_=sketch.getThetaLong();  seedHash_=Util.computeSeedHash(sketch.getSeed());  final int count=sketch.getRetainedEntries();  if (count > 0) {    keys_=new long[count];    values_=new double[count * numValues_];    ArrayOfDoublesSketchIterator it=sketch.iterator();    int i=0;    while (it.next()) {      keys_[i]=it.getKey();      System.arraycopy(it.getValues(),0,values_,i * numValues_,numValues_);      i++;    }  }}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  setupXMLReader();  xmlReader.parse(input);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void drawPreviewImage(){  if (previewImage != null) {    GraphicsContext context=previewThumbnail.getGraphicsContext2D();    context.setFill(new javafx.scene.paint.Color(0.25,0.25,0.25,1));    context.fillRect(0,0,previewThumbnail.getWidth(),previewThumbnail.getHeight());    context.drawImage(previewImage,10,10);    context.setStroke(new javafx.scene.paint.Color(1.0,1.0,1.0,1.0));    context.strokeText(previewText,10,(previewThumbnail.getHeight()) - 10);    ScrollPane pane=(ScrollPane)(getParent().getParent().getParent().getParent());    Group group=(Group)getParent();    double groupX=group.getBoundsInParent().getMinX();    double viewW=pane.getViewportBounds().getWidth();    double viewH=pane.getViewportBounds().getHeight();    double pdfW=getBoundsInParent().getWidth();    double thumW=previewThumbnail.getBoundsInLocal().getWidth();    double thumH=previewThumbnail.getBoundsInLocal().getHeight();    double x=pdfW + (viewW - groupX - pdfW- thumW- 10);    double y=(viewH - thumH) / getPageCount() * (curThumbPage - 1);    previewThumbnail.setLayoutX(x);    previewThumbnail.setLayoutY(y);  }}  }
class C{  private final void sampleInternalNodes(Tree tree,NodeRef node,ColourChangeMatrix mm){  double[] backward=nodePartials[node.getNumber()];  double[] forward;  if (tree.isRoot(node)) {    forward=mm.getEquilibrium();  } else {    NodeRef parent=tree.getParent(node);    int parentColour=getColour(parent);    double time=tree.getNodeHeight(parent) - tree.getNodeHeight(node);    forward=new double[backward.length];    for (int i=0; i < backward.length; i++) {      forward[i]=mm.forwardTimeEvolution(parentColour,i,time);    }  }  for (int i=0; i < backward.length; i++) {    forward[i]*=backward[i];  }  int colour=MathUtils.randomChoicePDF(forward);  setColour(node,colour);  for (int i=0; i < tree.getChildCount(node); i++) {    NodeRef child=tree.getChild(node,i);    if (!tree.isExternal(child)) {      sampleInternalNodes(tree,child,mm);    }  }}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public UnweightedGraph(V[] vertices,int[][] edges){  super(vertices,edges);}  }
class C{  public void restartMoment(){  if (mData.getCurrentMoment() != null) {    mData.getCurrentMoment().restartWithDelay(mNowNanos,0f);  }}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public GeneralSecurityException(String msg){  super(msg);}  }
class C{  public boolean isCommitted(){  return true;}  }
class C{  private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){  if (name.equals(candidate)) {    return;  }  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {    messageBuffer.append(" Did you mean '");    messageBuffer.append(candidate);    messageBuffer.append("'?");  }}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  public static double[][] doubleTo2DArray(double[] array){  double[][] twoDArray=new double[array.length][1];  for (int i=0; i < array.length; i++) {    twoDArray[i][0]=array[i];  }  return twoDArray;}  }
class C{  public void sort(Comparator<T> comparator,boolean restart){  ensureLoaded();  ensureNotDirty();  if (data != null) {    sortArray(data,comparator,!restart);    boolean pageChanded=false;    if (restart) {      pageChanded=hasPreviousPage();      first();    }    fireSortedEvent(pageChanded);  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TEXPORTABLE_ELEMENT;}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,BigDecimal selectedAmount){  return equals(productId,null,BigDecimal.ZERO,BigDecimal.ZERO,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false);}  }
class C{  public PerspectiveFilter(){  this(0,0,0,0,0,0,0,0);}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public StrTokenizer(char[] input,StrMatcher delim,StrMatcher quote){  this(input,delim);  setQuoteMatcher(quote);}  }
class C{  public JSheet(Frame owner){  super(owner);  init();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ItemDefinition newDefinition(Item item){  final ItemDefinition def=new ItemDefinition(item);  all.add(def);  return def;}  }
class C{  protected ColladaRoot parseCachedColladaFile(URL url,String linkBase) throws IOException, XMLStreamException {  ColladaDoc colladaDoc;  InputStream refStream=url.openStream();  colladaDoc=new ColladaInputStream(refStream,WWIO.makeURI(linkBase));  try {    ColladaRoot refRoot=new ColladaRoot(colladaDoc);    refRoot.parse();    return refRoot;  } catch (  XMLStreamException e) {    refStream.close();    throw e;  }}  }
class C{  public XCircleIndicator(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.XCircleIndicator);  try {    int fillColor=a.getColor(R.styleable.XCircleIndicator_fillColor,0xFFFFFFFF);    int strokeColor=a.getColor(R.styleable.XCircleIndicator_strokeColor,0xFFFFFFFF);    radius=(int)a.getDimension(R.styleable.XCircleIndicator_radius,radius);    circleInterval=(int)a.getDimension(R.styleable.XCircleIndicator_circleInterval,radius);    mDensity=getContext().getResources().getDisplayMetrics().density;    initColors(fillColor,strokeColor);  } catch (  Exception e) {    e.printStackTrace();  } finally {    a.recycle();  }}  }
class C{  private byte[] entityToBytes(HttpEntity entity){  try {    return EntityUtils.toByteArray(entity);  } catch (  IOException e) {    e.printStackTrace();  }  return new byte[0];}  }
class C{  public final boolean contains(double x,double y){  if (testPoint == null) {    return (false);  }  if (x < testPoint[0].getX()) {    return (false);  }  if (x > testPoint[2].getX()) {    return (false);  }  if (y < testPoint[0].getY()) {    return (false);  }  if (y > testPoint[2].getY()) {    return (false);  }  return (true);}  }
class C{  public void addCommand(Command cmd){  if (commands.contains(cmd)) {    return;  }  if (getBackCommand() == cmd && UIManager.getInstance().isThemeConstant("hideBackCommandBool",false)) {    return;  }  if (soft.length > 2 && cmd == parent.getDefaultCommand()) {    commands.addElement(cmd);  } else {    commands.insertElementAt(cmd,0);  }  if (!(parent instanceof Dialog)) {    int behavior=getCommandBehavior();    if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_RIGHT || behavior == Display.COMMAND_BEHAVIOR_ICS) {      if (behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK && (cmd == parent.getBackCommand() || findCommandComponent(cmd) != null)) {        return;      }      if (parent.getBackCommand() != cmd) {        if ((behavior == Display.COMMAND_BEHAVIOR_BUTTON_BAR_TITLE_BACK || behavior == Display.COMMAND_BEHAVIOR_ICS || behavior == Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION) && parent.getTitle() != null && parent.getTitle().length() > 0) {          synchronizeCommandsWithButtonsInBackbutton();          return;        }        setLayout(new GridLayout(1,getCommandCount()));        addComponent(createTouchCommandButton(cmd));      } else {        commands.removeElement(cmd);      }      return;    }  }  updateCommands();}  }
class C{  protected JSDocNodeImpl(){  super();}  }
class C{  public FakeItemTimeline(long numItems,Long minPosition,Long maxPosition){  this.numItems=numItems;  this.minPosition=minPosition;  this.maxPosition=maxPosition;}  }
class C{  public void destroy(){  cert=null;  key=null;  alias=null;}  }
class C{  public boolean isJar(){  return (m_zipFile != null && m_zipFile instanceof JarFile);}  }
class C{  public List<ExportGroupRestRep> findByCluster(URI clusterId,URI projectId,URI varrayId){  return search().byCluster(clusterId).filter(new ExportClusterFilter(clusterId,projectId,varrayId)).run();}  }
class C{  private static void disableSyncForAll(Context context){  Account[] accounts=AccountManager.get(context).getAccountsByType(Constants.ACCOUNT_TYPE);  for (  Account account : accounts) {    ContentResolver.cancelSync(account,SYNC_AUTHORITY);    ContentResolver.setIsSyncable(account,SYNC_AUTHORITY,0);    ContentResolver.setSyncAutomatically(account,SYNC_AUTHORITY,false);  }}  }
class C{  public String toString(){  return image;}  }
class C{  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches){  LinkedList<Patch> patchesCopy=new LinkedList<Patch>();  for (  Patch aPatch : patches) {    Patch patchCopy=new Patch();    for (    Diff aDiff : aPatch.diffs) {      Diff diffCopy=new Diff(aDiff.operation,aDiff.text);      patchCopy.diffs.add(diffCopy);    }    patchCopy.start1=aPatch.start1;    patchCopy.start2=aPatch.start2;    patchCopy.length1=aPatch.length1;    patchCopy.length2=aPatch.length2;    patchesCopy.add(patchCopy);  }  return patchesCopy;}  }
class C{  private static FloatBuffer allocateTextureBuffer(float u,float v){  float texturepoints[]={0f,0f,0f,v,u,0,u,v};  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(texturepoints.length * SIZEOF_FLOAT);  byteBuffer.order(ByteOrder.nativeOrder());  FloatBuffer texBuffer=byteBuffer.asFloatBuffer();  texBuffer.put(texturepoints);  texBuffer.position(0);  return texBuffer;}  }
class C{  public TenantCreateParam prepareTenantParam(KeystoneTenant tenant){  TenantCreateParam param=new TenantCreateParam(CinderConstants.TENANT_NAME_PREFIX + " " + tenant.getName(),prepareUserMappings(tenant.getId()));  param.setDescription(getProperTenantDescription(tenant.getDescription()));  return param;}  }
class C{  public void sendHeartbeatEvent(){  client.post(String.class,CALLHOME_HEARTBEAT_URL);}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  BasePackage theBasePackage=(BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);  SGraphPackage theSGraphPackage=(SGraphPackage)EPackage.Registry.INSTANCE.getEPackage(SGraphPackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  executionContextEClass.getESuperTypes().add(theBasePackage.getNamedElement());  executionContextEClass.getESuperTypes().add(this.getCompositeSlot());  executionEventEClass.getESuperTypes().add(this.getExecutionSlot());  executionSlotEClass.getESuperTypes().add(theBasePackage.getNamedElement());  executionVariableEClass.getESuperTypes().add(this.getExecutionSlot());  compositeSlotEClass.getESuperTypes().add(this.getExecutionSlot());  referenceSlotEClass.getESuperTypes().add(this.getCompositeSlot());  initEClass(executionContextEClass,ExecutionContext.class,"ExecutionContext",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecutionContext_ActiveStates(),theSGraphPackage.getRegularState(),null,"activeStates",null,0,-1,ExecutionContext.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionContext_ExecutedElements(),ecorePackage.getEObject(),null,"executedElements",null,0,-1,ExecutionContext.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionContext_SuspendedElements(),ecorePackage.getEObject(),null,"suspendedElements",null,0,-1,ExecutionContext.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionContext_Snapshot(),ecorePackage.getEBoolean(),"snapshot",null,0,1,ExecutionContext.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  addEOperation(executionContextEClass,this.getExecutionEvent(),"getRaisedEvents",0,-1,IS_UNIQUE,IS_ORDERED);  addEOperation(executionContextEClass,this.getExecutionEvent(),"getScheduledEvents",0,-1,IS_UNIQUE,IS_ORDERED);  EOperation op=addEOperation(executionContextEClass,this.getExecutionVariable(),"getVariable",0,1,IS_UNIQUE,IS_ORDERED);  addEParameter(op,ecorePackage.getEString(),"qualifiedName",0,1,IS_UNIQUE,IS_ORDERED);  op=addEOperation(executionContextEClass,this.getExecutionEvent(),"getEvent",0,1,IS_UNIQUE,IS_ORDERED);  addEParameter(op,ecorePackage.getEString(),"qualifiedName",0,1,IS_UNIQUE,IS_ORDERED);  addEOperation(executionContextEClass,theSGraphPackage.getRegularState(),"getAllActiveStates",0,-1,IS_UNIQUE,IS_ORDERED);  addEOperation(executionContextEClass,this.getExecutionEvent(),"getAllEvents",0,-1,IS_UNIQUE,IS_ORDERED);  addEOperation(executionContextEClass,this.getExecutionVariable(),"getAllVariables",0,-1,IS_UNIQUE,IS_ORDERED);  addEOperation(executionContextEClass,this.getExecutionSlot(),"getAllSlots",0,-1,IS_UNIQUE,IS_ORDERED);  op=addEOperation(executionContextEClass,this.getExecutionSlot(),"getSlot",0,1,IS_UNIQUE,IS_ORDERED);  addEParameter(op,ecorePackage.getEString(),"qualifiedName",0,1,IS_UNIQUE,IS_ORDERED);  initEClass(executionEventEClass,ExecutionEvent.class,"ExecutionEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getExecutionEvent_Raised(),ecorePackage.getEBoolean(),"raised",null,0,1,ExecutionEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionEvent_Scheduled(),ecorePackage.getEBoolean(),"scheduled",null,0,1,ExecutionEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionEvent_Direction(),this.getEventDirection(),"direction",null,0,1,ExecutionEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionSlotEClass,ExecutionSlot.class,"ExecutionSlot",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getExecutionSlot_Value(),this.getJavaObject(),"value",null,0,1,ExecutionSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionSlot_FqName(),ecorePackage.getEString(),"fqName",null,0,1,ExecutionSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionSlot_Writable(),ecorePackage.getEBoolean(),"writable","true",0,1,ExecutionSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionSlot_Type(),theTypesPackage.getType(),null,"type",null,0,1,ExecutionSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionVariableEClass,ExecutionVariable.class,"ExecutionVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(compositeSlotEClass,CompositeSlot.class,"CompositeSlot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCompositeSlot_Slots(),this.getExecutionSlot(),null,"slots",null,0,-1,CompositeSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(referenceSlotEClass,ReferenceSlot.class,"ReferenceSlot",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReferenceSlot_Reference(),this.getExecutionSlot(),null,"reference",null,0,1,ReferenceSlot.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(eventDirectionEEnum,EventDirection.class,"EventDirection");  addEEnumLiteral(eventDirectionEEnum,EventDirection.LOCAL);  addEEnumLiteral(eventDirectionEEnum,EventDirection.IN);  addEEnumLiteral(eventDirectionEEnum,EventDirection.OUT);  initEDataType(javaObjectEDataType,Object.class,"JavaObject",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS);  createResource(eNS_URI);}  }
class C{  public long numBits(){  return offsetNumBucketsSeed.length * Long.SIZE + coefficients.numBits() + rank.numBits();}  }
class C{  private ServiceDescriptor findDescriptor(String name){  for (  ServiceDescriptor d : services.serviceDescriptors())   if (d.name().equals(name))   return d;  return null;}  }
class C{  public Builder put(String setting,long value,TimeUnit timeUnit){  put(setting,timeUnit.toMillis(value) + "ms");  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.399 -0500",hash_original_method="C8019EE35E2246E727D64B4FEC692BA7",hash_generated_method="D2EF616819CAF1755FC4DC004FD55148") public SIPDialog createDialog(SipProviderImpl sipProvider,SIPResponse sipResponse){  return new SIPDialog(sipProvider,sipResponse);}  }
class C{  public static List<Integer> inorderTraversalB(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null) {    return res;  }  TreeNode cur=root;  TreeNode pre=null;  while (cur != null) {    if (cur.left == null) {      res.add(cur.val);      cur=cur.right;    } else {      pre=cur.left;      while (pre.right != null && pre.right != cur) {        pre=pre.right;      }      if (pre.right == null) {        pre.right=cur;        cur=cur.left;      } else {        pre.right=null;        res.add(cur.val);        cur=cur.right;      }    }  }  return res;}  }
class C{  public void reset(){  this.scopes.clear();}  }
class C{  public int indexOfFromTo(Object element,int from,int to,boolean testForEquality){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  Object[] theElements=elements;  if (testForEquality && element != null) {    for (int i=from; i <= to; i++) {      if (element.equals(theElements[i])) {        return i;      }    }  } else {    for (int i=from; i <= to; i++) {      if (element == theElements[i]) {        return i;      }    }  }  return -1;}  }
class C{  public ServiceCompatibilityException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public StrBuilder appendln(final int value){  return append(value).appendNewLine();}  }
class C{  public Object run(URI source,String[] args) throws CompilationFailedException, IOException {  return run(new GroovyCodeSource(source),args);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void push(String id,long beginTime){  if (executeStack.isEmpty()) {    stackId=id;  }  executeTimeMap.put(id,beginTime);  executeStack.push(id);}  }
class C{  public void shutdown(){  if (parallelExecutor != null && !parallelExecutor.isShutdown())   ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);}  }
class C{  public void initXPath(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_XPATH);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  try {    nextToken();    Expr();    if (null != m_token) {      String extraTokens="";      while (null != m_token) {        extraTokens+="'" + m_token + "'";        nextToken();        if (null != m_token)         extraTokens+=", ";      }      error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});    }  } catch (  org.apache.xpath.XPathProcessorException e) {    if (CONTINUE_AFTER_FATAL_ERROR.equals(e.getMessage())) {      initXPath(compiler,"/..",namespaceContext);    } else     throw e;  }  compiler.shrink();}  }
class C{  private void init(){  setOpaque(false);}  }
class C{  public StationaryMovement(Settings s){  super(s);  int coords[];  coords=s.getCsvInts(LOCATION_S,2);  this.loc=new Coord(coords[0],coords[1]);}  }
class C{  private void emit1(int od){  if (!alive)   return;  code=ArrayUtils.ensureCapacity(code,cp);  code[cp++]=(byte)od;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatamiddle.class,args);}  }
class C{  public static BufferedImage makeLinearBufferedImage(int width,int height,boolean premult){  ColorModel cm=makeLinear_sRGBCM(premult);  WritableRaster wr=cm.createCompatibleWritableRaster(width,height);  return new BufferedImage(cm,wr,premult,null);}  }
class C{  public void testAddAll3(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE - 1; ++i)     ints[i]=new Integer(i);    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public <T>MappingIterator<T> readValues(Reader src) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(src);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  public void shuffle(){}  }
class C{  public static ValueTime parse(String s){  try {    return fromNanos(DateTimeUtils.parseTimeNanos(s,0,s.length(),false));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIME",s);  }}  }
class C{  public boolean isReadResponseForErrors(){  return readResponseForErrors;}  }
class C{  public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {  try {    if (fDTDHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDTDHandler.unparsedEntityDecl(name,publicId,systemId,notation);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public SortedGraphNode markAndGetNextTopSort(boolean changed){  if (changed) {    int currOrder=currentNode.getSortNumber(forward);    int newOrder=currOrder + 1;    int barrierOrder;    if (barrier == null) {      barrierOrder=Integer.MAX_VALUE;    } else {      barrierOrder=barrier.getSortNumber(forward);    }    SortedGraphNode newNode=null;    Enumeration<? extends SortedGraphNode> e;    if (forward) {      e=currentNode.getOutNodes();    } else {      e=currentNode.getInNodes();    }    while (e.hasMoreElements()) {      SortedGraphNode outNode=e.nextElement();      if (outNode.getSortNumber(forward) < barrierOrder) {        outNode.setSortMarker(changeMark);        if (outNode.getSortNumber(forward) < newOrder) {          newOrder=outNode.getSortNumber(forward);          newNode=outNode;        }      }    }    if (newOrder <= currOrder) {      currentNode=newNode;      advanceBarrier();      return newNode;    }  }  currentNode=currentNode.getSortedNext(forward);  for (; currentNode != barrier; currentNode=currentNode.getSortedNext(forward)) {    if (currentNode.getSortMarker() == changeMark) {      advanceBarrier();      return currentNode;    }  }  advanceBarrier();  return currentNode;}  }
class C{  public AnnotationsWriter(OutputStream os,ConstPool cp){  output=os;  pool=cp;}  }
class C{  @Override protected void onDetachedFromWindow(){  super.onDetachedFromWindow();  release();}  }
class C{  public NbtTagByte(){}  }
class C{  public void verifyWarn(String substring,Throwable t){  verify(Level.WARNING,substring,t);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("InReplyToParser.parse");  InReplyToList list=new InReplyToList();  try {    headerName(TokenTypes.IN_REPLY_TO);    while (lexer.lookAhead(0) != '\n') {      InReplyTo inReplyTo=new InReplyTo();      inReplyTo.setHeaderName(SIPHeaderNames.IN_REPLY_TO);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      if (lexer.lookAhead(0) == '@') {        this.lexer.match('@');        this.lexer.match(TokenTypes.ID);        Token secToken=lexer.getNextToken();        inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());      } else {        inReplyTo.setCallId(token.getTokenValue());      }      this.lexer.SPorHT();      list.add(inReplyTo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        inReplyTo=new InReplyTo();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        if (lexer.lookAhead(0) == '@') {          this.lexer.match('@');          this.lexer.match(TokenTypes.ID);          Token secToken=lexer.getNextToken();          inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());        } else {          inReplyTo.setCallId(token.getTokenValue());        }        list.add(inReplyTo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("InReplyToParser.parse");  }}  }
class C{  public boolean isContainedWithin(GtidSet other){  if (other == null)   return false;  if (this.equals(other))   return true;  for (  UUIDSet uuidSet : uuidSetsByServerId.values()) {    UUIDSet thatSet=other.forServerWithId(uuidSet.getUUID());    if (!uuidSet.isContainedWithin(thatSet))     return false;  }  return true;}  }
class C{  static void makeCategoryMap(String filename){  specfile=filename;  generateNewData();  categoryMap=new int[categoryNames.length - 1][];  for (int i=0; i < categoryNames.length - 1; i++) {    int len=newListCount[BMP][i] + newListCount[nonBMP][i];    categoryMap[i]=new int[len];    System.arraycopy(newList[i],0,categoryMap[i],0,len);  }}  }
class C{  public void actionPerformed(ActionEvent evt){  if (chooser == null)   init();  File f=null;  scaler.setImage(display.getOffscreenBuffer());  int returnVal=chooser.showSaveDialog(display);  if (returnVal == JFileChooser.APPROVE_OPTION) {    f=chooser.getSelectedFile();  } else {    return;  }  String format=((SimpleFileFilter)chooser.getFileFilter()).getExtension();  String ext=IOLib.getExtension(f);  if (!format.equals(ext)) {    f=new File(f.toString() + "." + format);  }  double scale=scaler.getScale();  boolean success=false;  try {    OutputStream out=new BufferedOutputStream(new FileOutputStream(f));    System.out.print("Saving image " + f.getName() + ", "+ format+ " format...");    success=display.saveImage(out,format,scale);    out.flush();    out.close();    System.out.println("\tDONE");  } catch (  Exception e) {    success=false;  }  if (!success) {    JOptionPane.showMessageDialog(display,"Error Saving Image!","Image Save Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  void tick(long index,long timestamp){  if (!scheduledTasks.isEmpty()) {    Iterator<ServerScheduledTask> iterator=scheduledTasks.iterator();    while (iterator.hasNext()) {      ServerScheduledTask task=iterator.next();      if (task.complete(timestamp)) {        context.update(index,Instant.ofEpochMilli(task.time),ServerStateMachineContext.Type.COMMAND);        task.execute();        complete.add(task);        iterator.remove();      } else {        break;      }    }    for (    ServerScheduledTask task : complete) {      task.reschedule();    }    complete.clear();  }}  }
class C{  private void readDocumentContentElement(IXMLElement elem) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader <" + elem.getName() + " ...>");  }  for (  IXMLElement child : elem.getChildren()) {    String ns=child.getNamespace();    String name=child.getName();    if (name.equals("automatic-styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readAutomaticStylesElement(child);    } else     if (name.equals("master-styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readStylesElement(child);    } else     if (name.equals("styles") && (ns == null || ns.equals(OFFICE_NAMESPACE))) {      readStylesElement(child);    }  }  if (DEBUG) {    System.out.println("ODGStylesReader </" + elem.getName() + ">");  }}  }
class C{  public static void loadEmergencyClasses(){  if (emergencyClassesLoaded)   return;  emergencyClassesLoaded=true;  DirectChannel.loadEmergencyClasses();  GMSJoinLeave.loadEmergencyClasses();  GMSHealthMonitor.loadEmergencyClasses();}  }
class C{  public InputStreamReader(InputStream in,CharsetDecoder dec){  super(in);  if (dec == null)   throw new NullPointerException("charset decoder");  sd=StreamDecoder.forInputStreamReader(in,this,dec);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.090 -0500",hash_original_method="F82AC05B2B9BDA560435929D86D5DD16",hash_generated_method="D0C87865D7155E0AC8B85527D192C72C") private Runtime(){  String pathList=System.getProperty("java.library.path",".");  String pathSep=System.getProperty("path.separator",":");  String fileSep=System.getProperty("file.separator","/");  mLibPaths=pathList.split(pathSep);  for (int i=0; i < mLibPaths.length; i++) {    if (!mLibPaths[i].endsWith(fileSep)) {      mLibPaths[i]+=fileSep;    }  }}  }
class C{  public Boolean isCpuHotRemoveEnabled(){  return cpuHotRemoveEnabled;}  }
class C{  public AnimatedDrawableOptions build(){  return new AnimatedDrawableOptions(this);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  return builder.build();}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public Boolean isAttributePresent(){  return attributePresent;}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  private void merge(Type base,Type given,Events events){  for (  String hash : given.getHashes()) {    base.addHash(hash);  }  if (!base.isInitialized()) {    fireAndSave(new NodeEvent(base,NodeEventType.CHANGED,NodeEventDetails.INITIALIZED),events);  } else {    fireAndSave(new NodeEvent(base,NodeEventType.CHANGED,NodeEventDetails.HASH_ADDED),events);  }  if (mergeModifiers(base,given)) {    fireAndSave(new NodeEvent(base,NodeEventType.CHANGED,NodeEventDetails.MODIFIERS_CHANGED),events);  }  addAnnotations(base,findNewEntries(((TypeWithAnnotations)base).getAnnotations(),((TypeWithAnnotations)given).getAnnotations()),events);  if (given instanceof TypeWithMethods) {    mergeMethods((TypeWithMethods)base,((TypeWithMethods)given),events);  }  if (given instanceof ClassType) {    addSuperclass((ClassType)base,findNewEntries(((ClassType)base).getSuperClasses(),((ClassType)given).getSuperClasses()),events);    addInterface((ClassType)base,findNewEntries(((ClassType)base).getRealizedInterfaces(),((ClassType)given).getRealizedInterfaces()),events);  }  if (given instanceof InterfaceType) {    addSuperinterface((InterfaceType)base,findNewEntries(((InterfaceType)base).getSuperInterfaces(),((InterfaceType)given).getSuperInterfaces()),events);  }}  }
class C{  public Element store(Object o){  SignalHeadIcon p=(SignalHeadIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("signalheadicon");  element.setAttribute("signalhead","" + p.getNamedSignalHead().getName());  storeCommonAttributes(p,element);  element.setAttribute("clickmode","" + p.getClickMode());  element.setAttribute("litmode","" + p.getLitMode());  Element elem=new Element("icons");  NamedIcon icon=p.getIcon(rbean.getString("SignalHeadStateHeld"));  if (icon != null) {    elem.addContent(storeIcon("held",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateDark"));  if (icon != null) {    elem.addContent(storeIcon("dark",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateRed"));  if (icon != null) {    elem.addContent(storeIcon("red",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateYellow"));  if (icon != null) {    elem.addContent(storeIcon("yellow",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateGreen"));  if (icon != null) {    elem.addContent(storeIcon("green",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateLunar"));  if (icon != null) {    elem.addContent(storeIcon("lunar",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateFlashingRed"));  if (icon != null) {    elem.addContent(storeIcon("flashred",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateFlashingYellow"));  if (icon != null) {    elem.addContent(storeIcon("flashyellow",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateFlashingGreen"));  if (icon != null) {    elem.addContent(storeIcon("flashgreen",icon));  }  icon=p.getIcon(rbean.getString("SignalHeadStateFlashingLunar"));  if (icon != null) {    elem.addContent(storeIcon("flashlunar",icon));  }  element.addContent(elem);  elem=new Element("iconmaps");  String family=p.getFamily();  if (family != null) {    elem.setAttribute("family",family);  }  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.configurexml.SignalHeadIconXml");  return element;}  }
class C{  protected final JButton clearButton(){  return searchField.getCancelButton();}  }
class C{  public PlaceholderReplacer(String replacementName) throws IOException {  String replacementBase=Replacements.class.getPackage().getName().replace(".","/");  this.source=replacementBase + "/" + replacementName;  URL url=Replacements.class.getClassLoader().getResource(source);  if (url == null) {    throw new NullPointerException("cannot replacement :: " + source);  }  String fileContents=Resources.toString(url,Charsets.UTF_8).replace("\r\n","\n");  String[] split=fileContents.split(SEPARATOR);  String searchString=split[0];  String replacementString=split[1];  Map<String,Integer> placeholderNameToIndex=Maps.newHashMap();  this.searchPattern=createPattern(searchString,placeholderNameToIndex);  this.replacement=createReplace(replacementString,placeholderNameToIndex);}  }
class C{  public void testThreadPoolSize() throws Exception {  check(new OdbcConfiguration().setThreadPoolSize(0),false);  check(new OdbcConfiguration().setThreadPoolSize(-1),false);  check(new OdbcConfiguration().setThreadPoolSize(4),true);}  }
class C{  public RangeBuilder addUnboundedFrom(String key,long from){  ranges.add(new Range(key,from,null));  return this;}  }
class C{  static boolean isJavaBoxTypesAssignable(Class lhsType,Class rhsType){  if (lhsType == null)   return false;  if (lhsType == Object.class)   return true;  if (lhsType == Number.class && rhsType != Character.TYPE && rhsType != Boolean.TYPE)   return true;  if (Primitive.wrapperMap.get(lhsType) == rhsType)   return true;  return false;}  }
class C{  private JettyResponseListener doConnect(final ConnectOptions opts) throws Exception {  final StringBuilder urlString=new StringBuilder(opts.serviceURL);  ConnectOptions.addQueryParams(urlString,opts.requestParams);  final boolean isLongRequestURL=urlString.length() > 1024;  if (isLongRequestURL && opts.method.equals("POST") && opts.entity == null) {    urlString.setLength(0);    urlString.append(opts.serviceURL);    opts.entity=ConnectOptions.getFormEntity(opts.requestParams);  } else   if (isLongRequestURL && opts.method.equals("GET") && opts.entity == null) {    opts.method="POST";    urlString.setLength(0);    urlString.append(opts.serviceURL);    opts.entity=ConnectOptions.getFormEntity(opts.requestParams);  }  if (log.isDebugEnabled()) {    log.debug("*** Request ***");    log.debug(opts.serviceURL);    log.debug(opts.method);    log.debug("query=" + opts.getRequestParam("query"));    log.debug(urlString.toString());  }  Request request=null;  try {    request=m_repo.getRemoteRepositoryManager().newRequest(urlString.toString(),opts.method);    if (opts.requestHeaders != null) {      for (      Map.Entry<String,String> e : opts.requestHeaders.entrySet()) {        request.getHeaders().add(e.getKey(),e.getValue());        if (log.isDebugEnabled())         log.debug(e.getKey() + ": " + e.getValue());      }    }    if (opts.entity != null) {      ((HttpEntityEnclosingRequestBase)request).setEntity(opts.entity);    }    final JettyResponseListener response=new JettyResponseListener(request,TimeUnit.SECONDS.toMillis(300));    request.send(response);    return response;  } catch (  Throwable t) {    try {      if (request != null)       request.abort(t);    } catch (    Throwable t2) {    }    throw new RuntimeException(opts.serviceURL + " : " + t,t);  }}  }
class C{  public static String Indent(String str){  curIndent[indentDepth + 1]=curIndent[indentDepth] + str.length();  indentDepth=indentDepth + 1;  return str;}  }
class C{  StructContext(JsonNode json){  this(json,getCurrentThriftMessageClass());}  }
class C{  public ComparisonPredicate(int operation,Expression left,Expression right){  this(operation,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  @PUT @Path("/reinstateuser") @Produces(MediaType.APPLICATION_JSON) @Description("Reinstates a suspended user.") public Response reinstateUser(@Context HttpServletRequest req,@FormParam("username") String userName,@FormParam("subsystem") SubSystem subSystem){  if (userName == null || userName.isEmpty()) {    throw new IllegalArgumentException("User name cannot be null or empty.");  }  if (subSystem == null) {    throw new IllegalArgumentException("Subsystem cannot be null.");  }  validatePrivilegedUser(req);  PrincipalUser user=userService.findUserByUsername(userName);  if (user == null) {    throw new WebApplicationException("User does not exist.",Status.BAD_REQUEST);  }  managementService.reinstateUser(user,subSystem);  return Response.status(Status.OK).build();}  }
class C{  public boolean isString(){  return (type == IDENTIFIER || type == QUOTED_STRING);}  }
class C{  private static Shape leftEdge(BufferedImage image,GeneralPath path){  int lastj=0;  Point2D p1=null;  Point2D p2=null;  Line2D line=new Line2D.Float();  for (int i=0; i < image.getHeight(); i+=sample) {    boolean aPointExistsOnThisLine=false;    for (int j=0; j < image.getWidth(); j+=sample) {      if ((image.getRGB(j,i) & 0xff000000) != 0) {        Point2D p=new Point2D.Float(j,i);        aPointExistsOnThisLine=true;        if (path.getCurrentPoint() != null) {          p2=detectLine(p1,p2,p,line,path);        } else {          path.moveTo(j,i);          firstx=j;          p1=p;        }        lastj=j;        break;      }    }    if (aPointExistsOnThisLine == false) {      break;    }  }  return bottomEdge(image,path,lastj);}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public boolean isStepping(){  return stepping;}  }
class C{  public JAASUserPrincipal(String name){  if (name == null) {    throw new NullPointerException("NULL user name");  }  this.name=name;}  }
class C{  public void disconnect(){  if (mService == null)   return;  mContext.unbindService(mConnection);  mContext=null;  mService=null;}  }
class C{  public static float pow(float fBase,float fExponent){  return (float)Math.pow(fBase,fExponent);}  }
class C{  protected void displayImageFromOtherSource(String imageUri,ImageView imageView) throws IOException {  return;}  }
class C{  public long readLong() throws IOException {  return in.readLong();}  }
class C{  @Override public String basePath(){  return "/wm/firewall";}  }
class C{  public boolean isCollectionAccessor(){  return false;}  }
class C{  public static String formatDateTimeIso8601(long time){  return ISO_8601_DATE_TIME_FORMAT.format(time);}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=83 * hash + this.name.hashCode();  return hash;}  }
class C{  public HeatException(String message,int responseCode){  this(message);  this.responseCode=responseCode;}  }
class C{  @Override public boolean isReady(){  return isConnected();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.235 -0400",hash_original_method="8C47C531A43F622294BF6051B04C8993",hash_generated_method="25171806BEBD83F72AE1C91C485F28E6") private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public boolean isBipartite(){  return isBipartite;}  }
class C{  private void handleProcessOutput(Process process){  try (BufferedReader br=new BufferedReader(new InputStreamReader(process.getInputStream()))){    String line;    while ((line=br.readLine()) != null) {      logger.info("PROCESS OUTPUT >>>    " + line);    }  } catch (  IOException e) {    logger.log(SEVERE,"Failed to read output from external Process: ",e.getCause());  }}  }
class C{  private void sendDebuggerEventSettings(){  try {    final DebuggerEventSettingsStorage eventSettingsStorage=new DebuggerEventSettingsStorage(m_debugger,m_debugTarget);    m_debugger.setDebuggerEventSettings(eventSettingsStorage.deserialize());  } catch (  final DebugExceptionWrapper exception) {    CUtilityFunctions.logException(exception);    final String message="Debugger event settings could not be sent to the debugger.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not send the debugger event settings to the debug client."),new String[]{},new String[]{"The default debugger event settings will be used during this session."});    NaviErrorDialog.show(m_parent,message,description,exception);  }catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);    final String message="Debugger event settings could not be retrieved from the database.";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not send the debugger event settings to the debug client."),new String[]{},new String[]{"The default debugger event settings will be used during this session."});    NaviErrorDialog.show(m_parent,message,description,exception);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexgetlengthofemptylist.class,args);}  }
class C{  public void testDisableAND(){  Query expected=new TermQuery(new Term("field","foo+bar"));  assertEquals(expected,parseKeyword("foo+bar",~AND_OPERATOR));  expected=new TermQuery(new Term("field","+foo+bar"));  assertEquals(expected,parseKeyword("+foo+bar",~AND_OPERATOR));}  }
class C{  public static int deleteMedia(ContentResolver contentResolver,String where,String[] selectionArgs,boolean preventDeleteImage){  int delCount=0;  try {    if (preventDeleteImage) {      ContentValues values=new ContentValues();      values.put(FotoSql.SQL_COL_PATH,DELETED_FILE_MARKER);      contentResolver.update(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI,values,where,selectionArgs);      where=FotoSql.SQL_COL_PATH + "= '" + DELETED_FILE_MARKER+ "'";      delCount=contentResolver.delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI,where,null);    } else {      delCount=contentResolver.delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI,where,selectionArgs);    }  } catch (  Exception ex) {    final String msg="FotoSql.deleteMedia(" + QueryParameter.toString(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI.toString(),null,where,selectionArgs,null) + " : "+ ex.getMessage();    Log.e(Global.LOG_CONTEXT,msg,ex);  }  return delCount;}  }
class C{  public void subtract(final Number operand){  this.value-=operand.byteValue();}  }
class C{  public void test_WantClientAuth() throws UnknownHostException, IOException {  SSLSocket ssl=getSSLSocket();  ssl.setWantClientAuth(true);  assertTrue(ssl.getWantClientAuth());  ssl.setWantClientAuth(false);  assertFalse(ssl.getWantClientAuth());  ssl.close();}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public NamedScheduledThreadPoolExecutor(String poolName,int fixPoolSize,RejectedExecutionHandler handler){  super(fixPoolSize,new NamedThreadFactory(poolName),handler);  setPoolName(poolName);}  }
class C{  public static String resolveUrl(final String baseUrl,final String relativeUrl){  if (baseUrl == null) {    throw new IllegalArgumentException("Base URL must not be null");  }  if (relativeUrl == null) {    throw new IllegalArgumentException("Relative URL must not be null");  }  final Url url=resolveUrl(parseUrl(baseUrl.trim()),relativeUrl.trim());  return url.toString();}  }
class C{  public void placeBlock(GlowPlayer player,GlowBlockState state,BlockFace face,ItemStack holding,Vector clickedLoc){  state.setType(holding.getType());  state.setData(holding.getData());}  }
class C{  protected boolean shouldAdapt(EStructuralFeature feature){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void evaluatePopup(MouseEvent e){  if (e.isPopupTrigger()) {    JPopupMenu menu=createBookmarkPopupMenu();    if (menu != null) {      menu.show(this,e.getX(),e.getY());    }  }}  }
class C{  public PLFovAnimatedData(Object sender,PLCamera camera,float fov,int defaultMaxStep){  super(sender);  currentFov=camera.getFov();  maxFov=PLMath.normalizeFov(fov,camera.getFovRange());  float fovDiff=maxFov - currentFov, maxDiff=PLConstants.kFovMaxValue - Math.abs(fovDiff);  maxStep=Math.max((int)Math.sqrt(defaultMaxStep * defaultMaxStep * Math.abs(1.0f - maxDiff * maxDiff / PLConstants.kFovMax2Value)),1);  fovStep=fovDiff / maxStep;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static com.linkedin.camus.example.records.DummyLog.Builder newBuilder(com.linkedin.camus.example.records.DummyLog.Builder other){  return new com.linkedin.camus.example.records.DummyLog.Builder(other);}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public Boolean isPerAttndee(){  return perAttndee;}  }
class C{  public static String concatenateName(char[] name1,char[] name2){  StringBuffer buf=new StringBuffer();  if (name1 != null && name1.length > 0) {    buf.append(name1);  }  if (name2 != null && name2.length > 0) {    if (buf.length() > 0) {      buf.append('.');    }    buf.append(name2);  }  return buf.toString();}  }
class C{  Shape adjustAllocation(Shape a){  if (a != null) {    Rectangle bounds=a.getBounds();    int vspan=(int)getPreferredSpan(Y_AXIS);    int hspan=(int)getPreferredSpan(X_AXIS);    if (bounds.height != vspan) {      int slop=bounds.height - vspan;      bounds.y+=slop / 2;      bounds.height-=slop;    }    Component c=getContainer();    if (c instanceof JTextField) {      JTextField field=(JTextField)c;      BoundedRangeModel vis=field.getHorizontalVisibility();      int max=Math.max(hspan,bounds.width);      int value=vis.getValue();      int extent=Math.min(max,bounds.width - 1);      if ((value + extent) > max) {        value=max - extent;      }      vis.setRangeProperties(value,extent,vis.getMinimum(),max,false);      if (hspan < bounds.width) {        int slop=bounds.width - 1 - hspan;        int align=((JTextField)c).getHorizontalAlignment();        if (isLeftToRight(c)) {          if (align == LEADING) {            align=LEFT;          } else           if (align == TRAILING) {            align=RIGHT;          }        } else {          if (align == LEADING) {            align=RIGHT;          } else           if (align == TRAILING) {            align=LEFT;          }        }switch (align) {case SwingConstants.CENTER:          bounds.x+=slop / 2;        bounds.width-=slop;      break;case SwingConstants.RIGHT:    bounds.x+=slop;  bounds.width-=slop;break;}} else {bounds.width=hspan;bounds.x-=vis.getValue();}}return bounds;}return null;}  }
class C{  @RequestProcessing(value="/register2",method=HTTPRequestMethod.POST) @Before(adviceClass=UserRegister2Validation.class) public void register2(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  context.renderJSON();  final JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final String password=requestJSONObject.optString(User.USER_PASSWORD);  final int appRole=requestJSONObject.optInt(UserExt.USER_APP_ROLE);  final String referral=requestJSONObject.optString(Common.REFERRAL);  final String userId=requestJSONObject.optString(Common.USER_ID);  String name=null;  String email=null;  try {    final JSONObject user=userQueryService.getUser(userId);    if (null == user) {      context.renderMsg(langPropsService.get("registerFailLabel") + " - " + "User Not Found");      return;    }    name=user.optString(User.USER_NAME);    email=user.optString(User.USER_EMAIL);    user.put(UserExt.USER_APP_ROLE,appRole);    user.put(User.USER_PASSWORD,password);    user.put(UserExt.USER_STATUS,UserExt.USER_STATUS_C_VALID);    userMgmtService.addUser(user);    Sessions.login(request,response,user);    final String ip=Requests.getRemoteAddr(request);    userMgmtService.updateOnlineStatus(user.optString(Keys.OBJECT_ID),ip,true);    if (!Strings.isEmptyOrNull(referral)) {      final JSONObject referralUser=userQueryService.getUserByName(referral);      if (null != referralUser) {        final String referralId=referralUser.optString(Keys.OBJECT_ID);        pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,userId,Pointtransfer.TRANSFER_TYPE_C_INVITED_REGISTER,Pointtransfer.TRANSFER_SUM_C_INVITE_REGISTER,referralId);        pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,referralId,Pointtransfer.TRANSFER_TYPE_C_INVITE_REGISTER,Pointtransfer.TRANSFER_SUM_C_INVITE_REGISTER,userId);      }    }    context.renderTrueResult();    LOGGER.log(Level.INFO,"Registered a user [name={0}, email={1}]",name,email);    final JSONObject timeline=new JSONObject();    timeline.put(Common.TYPE,Common.NEW_USER);    String content=langPropsService.get("timelineNewUserLabel");    content=content.replace("{user}","<a target='_blank' rel='nofollow' href='" + Latkes.getServePath() + "/member/"+ name+ "'>"+ name+ "</a>");    timeline.put(Common.CONTENT,content);    timelineMgmtService.addTimeline(timeline);  } catch (  final ServiceException e) {    final String msg=langPropsService.get("registerFailLabel") + " - " + e.getMessage();    LOGGER.log(Level.ERROR,msg + "[name={0}, email={1}]",name,email);    context.renderMsg(msg);  }}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public static Writable filterLine(Path self,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure closure) throws IOException {  return IOGroovyMethods.filterLine(newReader(self),closure);}  }
class C{  public void testParentsOrder() throws Exception {  final PyPullUpPresenter sut=configureByClass("Child");  configureParent();  myMocksControl.replay();  sut.launch();  Assert.assertTrue("Presenter did not show parents",myViewConfigCapture.hasCaptured());  final Collection<PyClass> parents=myViewConfigCapture.getValue().getParents();  Assert.assertThat("Wrong list of parents or parents are listed in wrong order",Collections2.transform(parents,CLASS_TO_NAME),Matchers.contains("SubParent1","SubParent2","MainParent"));}  }
class C{  public double mahalanobisDistance(double[] vec){  double agg=0.;  for (int i=0; i < vec.length; i++) {    double diff=vec[i] - mean[i];    agg+=diff / variance * diff;  }  return agg;}  }
class C{  public synchronized void registerMapping(final QName qname,final Class<?> type){  registerMapping(qname,type.getName());}  }
class C{  public static AnchorPane loadAnchorPane(final FXMLLoader loader){  try {    return (AnchorPane)loader.load();  } catch (  IOException e) {    throw new CriticalException("Cannot load FXML",e);  }}  }
class C{  public void addMapping(String oldImg,int oldIndex,String newImg,int newIndex){  newTilesets.add(newImg);  HashMap<Integer,TileInfo> mapping=mappings.get(oldImg);  if (mapping == null) {    mapping=new HashMap<Integer,TileInfo>();    mappings.put(oldImg,mapping);  }  mapping.put(oldIndex,new TileInfo(newImg,newIndex));}  }
class C{  private INaviViewNode findStartNode(final List<INaviViewNode> nodes){  for (  final INaviViewNode node : nodes) {    for (    final INaviEdge edge : node.getOutgoingEdges()) {      if (edge.getType() == EdgeType.ENTER_INLINED_FUNCTION) {        return node;      }    }  }  throw new IllegalStateException("Error: Start node could not be determined");}  }
class C{  public XintroActivityBuilder removeFragment(int fragmentPos){  introFragmentModelList.remove(fragmentPos);  return this;}  }
class C{  public void testNegationLeafRewriting02(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final FunctionNode filterEq=FunctionNode.EQ(new VarNode("s"),new VarNode("o"));    final FunctionNode filterNeq=FunctionNode.NE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLe=FunctionNode.LE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLt=FunctionNode.LT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGe=FunctionNode.GE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGt=FunctionNode.GT(new VarNode("s"),new VarNode("o"));    final FunctionNode comb1=FunctionNode.AND(filterEq,filterNeq);    final FunctionNode comb2=FunctionNode.AND(filterLe,filterLt);    final FunctionNode comb3=FunctionNode.AND(filterGt,filterGe);    final FilterNode filterNode=new FilterNode(FunctionNode.NOT(FunctionNode.AND(comb1,FunctionNode.AND(comb2,comb3))));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final FunctionNode filterEqInv=FunctionNode.NE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterNeqInv=FunctionNode.EQ(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLeInv=FunctionNode.GT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLtInv=FunctionNode.GE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGeInv=FunctionNode.LT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGtInv=FunctionNode.LE(new VarNode("s"),new VarNode("o"));    final FunctionNode comb1=FunctionNode.OR(filterEqInv,filterNeqInv);    final FunctionNode comb2=FunctionNode.OR(filterLeInv,filterLtInv);    final FunctionNode comb3=FunctionNode.OR(filterGtInv,filterGeInv);    final FilterNode filterNode=new FilterNode(FunctionNode.OR(comb1,FunctionNode.OR(comb2,comb3)));    assertTrue(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public static StorageLun parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageLun object=new StorageLun();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageLun".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageLun)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(reader.getElementText());      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateIdentifier").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(reader.getElementText());            }          } else {            loopDone2=true;          }        }      }      object.setAlternateIdentifier((java.lang.String[])list2.toArray(new java.lang.String[list2.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","capacityInMB").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCapacityInMB(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setCapacityInMB(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","displayName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setDisplayName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","drsManagementPermitted").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDrsManagementPermitted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","esxLunIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEsxLunIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","thinProvisioned").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setThinProvisioned(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","thinProvisioningStatus").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setThinProvisioningStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","usedSpaceInMB").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setUsedSpaceInMB(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setUsedSpaceInMB(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected static void processExplorerProps(File propsFile){  try {    Properties expProps=new Properties();    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));    expProps.load(bi);    bi.close();    bi=null;    Set<Object> keys=expProps.keySet();    Iterator<Object> keysI=keys.iterator();    while (keysI.hasNext()) {      String key=(String)keysI.next();      if (!key.endsWith("Policy")) {        String existingVal=ExplorerDefaults.get(key,"");        if (existingVal.length() > 0) {          String replacePolicy=expProps.getProperty(key + "Policy");          if (replacePolicy != null && replacePolicy.length() > 0) {            if (replacePolicy.equalsIgnoreCase("replace")) {              String newVal=expProps.getProperty(key);              ExplorerDefaults.set(key,newVal);            } else {              String newVal=expProps.getProperty(key);              if (existingVal.indexOf(newVal) < 0) {                newVal=existingVal + "," + newVal;                ExplorerDefaults.set(key,newVal);              }            }          } else {            String newVal=expProps.getProperty(key);            if (existingVal.indexOf(newVal) < 0) {              newVal=existingVal + "," + newVal;              ExplorerDefaults.set(key,newVal);            }          }        } else {          String newVal=expProps.getProperty(key);          ExplorerDefaults.set(key,newVal);        }      }    }  } catch (  Exception ex) {  }}  }
class C{  private Number consumeTokenNumber(char c) throws JsonParserException {  int start=index - 1;  int end=index;  boolean isDouble=false;  while (isDigitCharacter(peekChar())) {    char next=(char)advanceChar();    isDouble=next == '.' || next == 'e' || next == 'E' || isDouble;    end++;  }  String number=string.substring(start,end);  try {    if (isDouble) {      if (number.charAt(0) == '0') {        if (number.charAt(1) == '.') {          if (number.length() == 2)           throw createParseException(null,"Malformed number: " + number,true);        } else         if (number.charAt(1) != 'e' && number.charAt(1) != 'E')         throw createParseException(null,"Malformed number: " + number,true);      }      if (number.charAt(0) == '-') {        if (number.charAt(1) == '0') {          if (number.charAt(2) == '.') {            if (number.length() == 3)             throw createParseException(null,"Malformed number: " + number,true);          } else           if (number.charAt(2) != 'e' && number.charAt(2) != 'E')           throw createParseException(null,"Malformed number: " + number,true);        } else         if (number.charAt(1) == '.') {          throw createParseException(null,"Malformed number: " + number,true);        }      }      return Double.parseDouble(number);    }    if (number.charAt(0) == '0') {      if (number.length() == 1)       return 0;      throw createParseException(null,"Malformed number: " + number,true);    }    if (number.length() > 1 && number.charAt(0) == '-' && number.charAt(1) == '0') {      if (number.length() == 2)       return -0.0;      throw createParseException(null,"Malformed number: " + number,true);    }    int length=number.charAt(0) == '-' ? number.length() - 1 : number.length();    if (length < 10)     return Integer.parseInt(number);    if (length < 19)     return Long.parseLong(number);    return new BigInteger(number);  } catch (  NumberFormatException e) {    throw createParseException(e,"Malformed number: " + number,true);  }}  }
class C{  public void clickSoundEffectsEnabled(View view){  GameActivity.setSoundEffectsEnabled(((CheckBox)view).isChecked());  updateControls();}  }
class C{  protected void boundsCheck(int i1,int i2){  if (i1 < 0 || i2 < 0)   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of IVector2D.");}  }
class C{  @Override public RecordReader<LongWritable,RyaStatementWritable> createRecordReader(InputSplit inputSplit,TaskAttemptContext taskAttemptContext){  Configuration conf=taskAttemptContext.getConfiguration();  RDFFormat format=getRDFFormat(taskAttemptContext);  if (format == null) {    format=DEFAULT_RDF_FORMAT;  }  int charBufferSize=conf.getInt(CHAR_BUFFER_SIZE_PROP,DEFAULT_CHAR_BUFFER_SIZE);  int statementBufferSize=conf.getInt(STATEMENT_BUFFER_SIZE_PROP,DEFAULT_STATEMENT_BUFFER_SIZE);  int timeoutSeconds=conf.getInt(TIMEOUT_PROP,DEFAULT_TIMEOUT);  return new RdfFileRecordReader(format,charBufferSize,statementBufferSize,timeoutSeconds);}  }
class C{  public void dropActionChanged(DropTargetDragEvent e){  if (!isDragAcceptable(e)) {    e.rejectDrag();  } else {    e.acceptDrag(e.getDropAction());  }}  }
class C{  private static boolean isLocalEmergencyNumberInternal(String number,Context context,boolean useExactMatch){  String countryIso=null;  Country country;  CountryDetector detector=(CountryDetector)context.getSystemService(Context.COUNTRY_DETECTOR);  if ((detector != null) && ((country=detector.detectCountry()) != null)) {    countryIso=country.getCountryIso();  } else {    Locale locale=context.getResources().getConfiguration().locale;    if (locale != null) {      countryIso=locale.getCountry();      Rlog.w(LOG_TAG,"No CountryDetector; falling back to countryIso based on locale: " + countryIso);    } else {      countryIso="US";    }  }  return isEmergencyNumberInternal(number,countryIso,useExactMatch);}  }
class C{  @Override protected void initListeners(){  this.leftTV.setOnClickListener(this);  this.centerTV.setOnClickListener(this);  this.rightTV.setOnClickListener(this);}  }
class C{  public boolean isNeedClientAuth(){  return needClientAuth;}  }
class C{  protected String translateColumnName(String columnName){  return columnName.replaceAll("_","");}  }
class C{  public int maxIndex(){  return vals.length;}  }
class C{  public static @NonNull ObjectGraph createScopedGraph(@NonNull ObjectGraph parentObjectGraph,@Nullable Object... modules){  if (modules != null && modules.length > 0) {    return parentObjectGraph.plus(modules);  }  return parentObjectGraph;}  }
class C{  public static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  public SipTransactionContext sendSipMessageAndWait(SipMessage message) throws PayloadException, NetworkException {  return sendSipMessageAndWait(message,null);}  }
class C{  public static double interiorAngle(Coordinate p0,Coordinate p1,Coordinate p2){  double anglePrev=Angle.angle(p1,p0);  double angleNext=Angle.angle(p1,p2);  return Math.abs(angleNext - anglePrev);}  }
class C{  public Double(){}  }
class C{  public void mousePressed(MouseEvent e){  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  boolean accepted=checkModifiers(e);  down=e.getPoint();  if (accepted) {    vv.setCursor(cursor);  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  Object o;  o=e.getSource();  if (o == menuItemMean) {    calcMean();  } else   if (o == menuItemSetAllValues) {    setValues(menuItemSetAllValues);  } else   if (o == menuItemSetMissingValues) {    setValues(menuItemSetMissingValues);  } else   if (o == menuItemReplaceValues) {    setValues(menuItemReplaceValues);  } else   if (o == menuItemRenameAttribute) {    renameAttribute();  } else   if (o == menuItemAttributeAsClass) {    attributeAsClass();  } else   if (o == menuItemDeleteAttribute) {    deleteAttribute();  } else   if (o == menuItemDeleteAttributes) {    deleteAttributes();  } else   if (o == menuItemDeleteSelectedInstance) {    deleteInstance();  } else   if (o == menuItemDeleteAllSelectedInstances) {    deleteInstances();  } else   if (o == menuItemInsertInstance) {    addInstance();  } else   if (o == menuItemSortInstances) {    sortInstances();  } else   if (o == menuItemSearch) {    search();  } else   if (o == menuItemClearSearch) {    clearSearch();  } else   if (o == menuItemUndo) {    undo();  } else   if (o == menuItemCopy) {    copyContent();  } else   if (o == menuItemOptimalColWidth) {    setOptimalColWidth();  } else   if (o == menuItemOptimalColWidths) {    setOptimalColWidths();  }}  }
class C{  public boolean isHasVariables(){  return hasVariables;}  }
class C{  @GwtIncompatible CacheBuilder<K,V> lenientParsing(){  strictParsing=false;  return this;}  }
class C{  private Iterable deleteByKeysInBatch(Collection<Serializable> keys){  final Object batch;  if (getDataStore() instanceof QueueingDataStore) {    log.debug("The data store support queueing, so we are going to start a batch");    batch=((QueueingDataStore)getDataStore()).startBatch();  } else {    log.debug("The data store does not support batching, so this is the same as a normal delete");    batch=null;  }  final List result=new LinkedList();  for (  Serializable key : keys) {    if (getDataStore().hasKey(key)) {      result.add(getDataStore().retrieve(key));      getDataStore().delete(key);    }  }  if (getDataStore() instanceof QueueingDataStore) {    log.debug("Ending the batch operation that was started previously.");    ((QueueingDataStore)getDataStore()).endBatch(batch);  }  return result;}  }
class C{  private void focusLost(Component source,boolean isTemporary){synchronized (source.getTreeLock()) {synchronized (this) {      if (isInputMethodActive) {        deactivateInputMethod(isTemporary);      }      awtFocussedComponent=null;      if (inputMethod instanceof InputMethodAdapter) {        ((InputMethodAdapter)inputMethod).setAWTFocussedComponent(null);      }      InputMethodContext inputContext=((InputMethodContext)this);      if (inputContext.isCompositionAreaVisible()) {        inputContext.setCompositionAreaVisible(false);        compositionAreaHidden=true;      }    }  }}  }
class C{  public void runContributingProcs(RoundEnvironment re){  if (!onProcInterator) {    Set<TypeElement> emptyTypeElements=Collections.emptySet();    while (innerIter.hasNext()) {      ProcessorState ps=innerIter.next();      if (ps.contributed)       callProcessor(ps.processor,emptyTypeElements,re);    }  }}  }
class C{  public static GdbInfoBreak parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  List<Breakpoint> breakpoints=new ArrayList<>();  for (  String line : output.split("\n")) {    Matcher matcher=GDB_INFO_B.matcher(line);    if (matcher.find()) {      String file=matcher.group(2);      String lineNumber=matcher.group(3);      Location location=new LocationImpl(file,Integer.parseInt(lineNumber));      breakpoints.add(new BreakpointImpl(location));    }  }  return new GdbInfoBreak(breakpoints);}  }
class C{  protected static void checkReturnType(Method method,Class<?> expected){  if (method != null && !expected.isAssignableFrom(method.getReturnType())) {    log.error("Method " + method.getClass().getName() + "."+ method.getName()+ "(..) should return "+ expected.getName()+ " but returns "+ method.getReturnType().getName()+ " instead.");    setInvalid();  }}  }
class C{  public long freeMemory(){  return 0l;}  }
class C{  public TVariable basicGetDefinedVariable(){  return definedVariable;}  }
class C{  protected void installNonRolloverBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    if (component instanceof JComponent) {      ((JComponent)component).updateUI();      setBorderToNonRollover(component);    }  }}  }
class C{  @Override public boolean load(Element sharedConditionals,Element perNodeConditionals){  replaceConditionalManager();  loadConditionals(sharedConditionals);  return true;}  }
class C{  static public void mergeAdjacentText(Node node){  Node child=node.getFirstChild();  while (child != null) {    if (child instanceof Text || child instanceof CDATASection) {      Node next=child.getNextSibling();      if (next instanceof Text || next instanceof CDATASection) {        String fullText=child.getNodeValue() + next.getNodeValue();        ((CharacterData)child).setData(fullText);        node.removeChild(next);      }    } else {      mergeAdjacentText(child);    }    child=child.getNextSibling();  }}  }
class C{  public boolean rollBasement(Coords coords,IBoard board,Vector<Report> vPhaseReport){  if (basement.get(coords) == BasementType.UNKNOWN) {    IHex hex=board.getHex(coords);    Report r=new Report(2111,Report.PUBLIC);    r.add(getName());    r.add(coords.getBoardNum());    int basementRoll=Compute.d6(2);    r.add(basementRoll);    if (basementRoll == 2) {      basement.put(coords,BasementType.TWO_DEEP_FEET);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else     if (basementRoll == 3) {      basement.put(coords,BasementType.ONE_DEEP_FEET);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else     if (basementRoll == 4) {      basement.put(coords,BasementType.ONE_DEEP_NORMAL);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else     if (basementRoll == 10) {      basement.put(coords,BasementType.ONE_DEEP_NORMAL);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else     if (basementRoll == 11) {      basement.put(coords,BasementType.ONE_DEEP_HEAD);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else     if (basementRoll == 12) {      basement.put(coords,BasementType.TWO_DEEP_HEAD);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    } else {      basement.put(coords,BasementType.NONE);      hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.BLDG_BASEMENT_TYPE,basement.get(coords).getValue()));    }    r.add(BasementType.getType(hex.terrainLevel(Terrains.BLDG_BASEMENT_TYPE)).desc);    vPhaseReport.add(r);    return true;  }  return false;}  }
class C{  public RowDescriptorBuilder resetField(){  type=0;  subType=0;  scale=0;  length=0;  fieldName=null;  tableAlias=null;  originalName=null;  originalTableName=null;  ownerName=null;  return this;}  }
class C{  public Users markSessionAsLogedIn(String SID){  try {    sessionManagement.updateUserWithoutSession(SID,-1L);    Configuration conf=cfgManagement.getConfKey(3L,"default.rpc.userid");    return userManagement.getUserById(Long.parseLong(conf.getConf_value()));  } catch (  Exception err) {    log.error("[markSessionAsLogedIn]",err);  }  return null;}  }
class C{  public static void splashMessage(final String messageKey,final Object... args){  performInitialSettings();  if (RapidMiner.splashScreen != null) {    RapidMiner.splashScreen.setMessage(I18N.getMessage(I18N.getGUIBundle(),"gui.splash." + messageKey,args));  }}  }
class C{  public void addNewSupportedExtensions(){  updateSupportedExtensions();}  }
class C{  public void buildTable(String home) throws Exception {  if (IOUtils.isFile(home))   this.buildTableHelper(home); else   if (IOUtils.isDirectory(home)) {    String[] files=IOUtils.lsFiles(home);    for (    String file : files) {      this.buildTableHelper(home + "\\" + file);    }  }}  }
class C{  public Document read(InputStream in,String systemID) throws DocumentException, IOException, XmlPullParserException {  return read(createReader(in),systemID);}  }
class C{  public int update(TestLogyyyymm m){  return UPDATE(m).updateByExample(this.example);}  }
class C{  private void transfer(Entry<K,V>[] src,Entry<K,V>[] dest){  for (int j=0; j < src.length; ++j) {    Entry<K,V> e=src[j];    src[j]=null;    while (e != null) {      Entry<K,V> next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public static Status stream(String message,String url){  return new Status(StatusType.STREAM,message,url);}  }
class C{  public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  public static String parse(final int error){switch (error) {case 0x0001:    return "GATT INVALID HANDLE";case 0x0002:  return "GATT READ NOT PERMIT";case 0x0003:return "GATT WRITE NOT PERMIT";case 0x0004:return "GATT INVALID PDU";case 0x0005:return "GATT INSUF AUTHENTICATION";case 0x0006:return "GATT REQ NOT SUPPORTED";case 0x0007:return "GATT INVALID OFFSET";case 0x0008:return "GATT INSUF AUTHORIZATION";case 0x0009:return "GATT PREPARE Q FULL";case 0x000a:return "GATT NOT FOUND";case 0x000b:return "GATT NOT LONG";case 0x000c:return "GATT INSUF KEY SIZE";case 0x000d:return "GATT INVALID ATTR LEN";case 0x000e:return "GATT ERR UNLIKELY";case 0x000f:return "GATT INSUF ENCRYPTION";case 0x0010:return "GATT UNSUPPORT GRP TYPE";case 0x0011:return "GATT INSUF RESOURCE";case 0x0087:return "GATT ILLEGAL PARAMETER";case 0x0080:return "GATT NO RESOURCES";case 0x0081:return "GATT INTERNAL ERROR";case 0x0082:return "GATT WRONG STATE";case 0x0083:return "GATT DB FULL";case 0x0084:return "GATT BUSY";case 0x0085:return "GATT ERROR";case 0x0086:return "GATT CMD STARTED";case 0x0088:return "GATT PENDING";case 0x0089:return "GATT AUTH FAIL";case 0x008a:return "GATT MORE";case 0x008b:return "GATT INVALID CFG";case 0x008c:return "GATT SERVICE STARTED";case 0x008d:return "GATT ENCRYPTED NO MITM";case 0x008e:return "GATT NOT ENCRYPTED";case 0x008f:return "GATT CONGESTED";case 0x00FD:return "GATT CCCD CFG ERROR";case 0x00FE:return "GATT PROCEDURE IN PROGRESS";case 0x00FF:return "GATT VALUE OUT OF RANGE";case 0x0101:return "TOO MANY OPEN CONNECTIONS";default :return "UNKNOWN (" + error + ")";}}  }
class C{  @Override public void splitNode(BallNode node,int numNodesCreated) throws Exception {  correctlyInitialized();  double[][] ranges=m_DistanceFunction.initializeRanges(m_Instlist,node.m_Start,node.m_End);  int splitAttrib=widestDim(ranges,m_DistanceFunction.getRanges());  int medianIdxIdx=node.m_Start + (node.m_End - node.m_Start) / 2;  int medianIdx=select(splitAttrib,m_Instlist,node.m_Start,node.m_End,(node.m_End - node.m_Start) / 2 + 1);  Instance pivot;  node.m_SplitAttrib=splitAttrib;  node.m_SplitVal=m_Instances.instance(m_Instlist[medianIdx]).value(splitAttrib);  node.m_Left=new BallNode(node.m_Start,medianIdxIdx,numNodesCreated + 1,(pivot=BallNode.calcCentroidPivot(node.m_Start,medianIdxIdx,m_Instlist,m_Instances)),BallNode.calcRadius(node.m_Start,medianIdxIdx,m_Instlist,m_Instances,pivot,m_DistanceFunction));  node.m_Right=new BallNode(medianIdxIdx + 1,node.m_End,numNodesCreated + 2,(pivot=BallNode.calcCentroidPivot(medianIdxIdx + 1,node.m_End,m_Instlist,m_Instances)),BallNode.calcRadius(medianIdxIdx + 1,node.m_End,m_Instlist,m_Instances,pivot,m_DistanceFunction));}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void downloadHighResMedia(final View view,final int position){  SlidableMediaInfo imageInfo=mMediasMessagesList.get(position);  if (imageInfo.mMessageType.equals(Message.MSGTYPE_IMAGE)) {    downloadHighResPict(view,position);  } else {    downloadVideo(view,position);  }}  }
class C{  public VertexScoreTransformer(VertexScorer<V,S> vs){  this.vs=vs;}  }
class C{  private FModel loadModel(String filename,String cwd){  String fn=filename;  if (fn == null)   return null;  if (!fn.endsWith("." + FRANCA_FILE_EXTENSION)) {    fn+="." + FRANCA_FILE_EXTENSION;  }  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSetProvider.get());  return (FModel)persistenceHandler.loadModel(fn,cwd);}  }
class C{  private BTDownloadMediator(){  super("DOWNLOAD_TABLE");  TABLE.setRowHeight(30);  GUIMediator.addRefreshListener(this);  restoreSorting();}  }
class C{  public CopyOnWriteMap(){  internalMap=new HashMap<K,V>();}  }
class C{  public SelectManyMultiFormITCase(String name){  super(name);}  }
class C{  public Ordering(String propertyName,Order order,NullOrdering nullOrdering){  this.propertyName=propertyName;  this.order=order;  this.nullOrdering=nullOrdering;}  }
class C{  private void updateGwt25toLessThan27(List<String> programArgs,int indexDisabled,int indexEnabled,boolean superDevModeEnabled){  if (indexEnabled > -1) {    programArgs.remove(indexEnabled);  }  if (indexDisabled > -1) {    programArgs.remove(indexDisabled);  }  if (superDevModeEnabled) {    programArgs.add(0,SUPERDEVMODE_ENABLED_ARG);  }}  }
class C{  @Override public void start(Stage stage) throws Exception {  CategoryDataset dataset=createDataset();  JFreeChart chart=createChart(dataset);  ChartViewer viewer=new ChartViewer(chart);  viewer.addChartMouseListener(this);  stage.setScene(new Scene(viewer));  stage.setTitle("JFreeChart: BarChartFXDemo1.java");  stage.setWidth(700);  stage.setHeight(390);  stage.show();}  }
class C{  public void ensureRowVisible(int row){  if (row != -1) {    Rectangle cellRect=getCellRect(row,0,false);    Rectangle visibleRect=getVisibleRect();    if (!visibleRect.intersects(cellRect))     scrollRectToVisible(cellRect);  }}  }
class C{  public boolean explain(){  return explain;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IsAbort"))     p_IsAbort="Y".equals(para[i].getParameter()); else     if (name.equals("AD_User_ID"))     p_AD_User_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_WF_Responsible_ID"))     p_AD_WF_Responsible_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_WF_Process_ID=getRecord_ID();}  }
class C{  public ArrayList<ShortcutInfo> bindItems(ArrayList<ShortcutInfo> items){  ArrayList<View> icons=new ArrayList<View>();  ArrayList<ShortcutInfo> extra=new ArrayList<ShortcutInfo>();  for (  ShortcutInfo item : items) {    if (!ALLOW_FOLDER_SCROLL && icons.size() >= mMaxItemsPerPage) {      extra.add(item);    } else {      icons.add(createNewView(item));    }  }  arrangeChildren(icons,icons.size(),false);  return extra;}  }
class C{  public Iterator iterator(){  return new TableIterator();}  }
class C{  public void addExit(S source,S target){  this.exitData.add(new ExitData<S,E>(source,target));}  }
class C{  private void drawBordersAndShadow(final Canvas canvas){  if (mBorderWidth > 0) {    mPaint.setShader(null);    mPaint.setColor(mBorderColor);    mPaint.setStrokeWidth(mBorderWidth);    mPaint.setStyle(Paint.Style.STROKE);    if (mShadowWidth > 0) {      mPaint.setShadowLayer(mShadowRadius,mShadowWidth,mShadowWidth,mShadowColor);    }    canvas.drawRoundRect(mBorderRect,mCornerRadius,mCornerRadius,mPaint);    mPaint.setShadowLayer(0f,0f,0f,mShadowColor);  }}  }
class C{  public JSONObject put(String key,Map value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  public long length() throws IOException {  if (inputStream == null) {    throw new IOException("Stream closed");  }  return inputStreamCount + inputStream.available();}  }
class C{  static boolean mergeImpl(SQLiteDatabase db,String key,String value) throws JSONException {  String oldValue=getItemImpl(db,key);  String newValue;  if (oldValue == null) {    newValue=value;  } else {    JSONObject oldJSON=new JSONObject(oldValue);    JSONObject newJSON=new JSONObject(value);    deepMergeInto(oldJSON,newJSON);    newValue=oldJSON.toString();  }  return setItemImpl(db,key,newValue);}  }
class C{  public static int sum(int[] array){  int sum=0;  for (  int x : array) {    sum+=x;  }  return sum;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Response createBindingErrorResponseUnknownAttributes(String reasonPhrase,char[] unknownAttributes) throws StunException {  return createBindingErrorResponse(ErrorCodeAttribute.UNKNOWN_ATTRIBUTE,reasonPhrase,unknownAttributes);}  }
class C{  private void createAndPut(){  try {    region.create(new Integer(1),new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError(" failed in trying to create",e);  }  region.put(new Integer(1),new Integer(2));}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  private boolean extractParameters(final SlashActionCommand command,final int minimum,final int maximum){  for (int i=0; i < maximum; i++) {    skipWhitespace();    if (ci.current() == CharacterIterator.DONE) {      if (i < minimum) {        command.setError("Missing command parameter for '" + command.getName() + "'");        return false;      }      break;    }    command.getParams()[i]=getNextParameter(command);    if (command.hasError()) {      return false;    }  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TermPayloadInvertedIndexInputStream(Index index,String structureName,Class<? extends IterablePosting> postingIteratorClass) throws IOException {  super(index,structureName,postingIteratorClass);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle alloc=a.getBounds();  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  alloc.height=textArea.getLineHeight();  alloc.width=1;  int p0=getStartOffset();  int p1=getEndOffset();  int testP=(b == Position.Bias.Forward) ? pos : Math.max(p0,pos - 1);  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  Element map=doc.getDefaultRootElement();  int line=map.getElementIndex(p0);  Token tokenList=doc.getTokenListForLine(line);  float x0=alloc.x;  while (p0 < p1) {    x0=RSyntaxUtilities.makeTokenListStartAt(tokenList,p0,WrappedSyntaxView.this,textArea,x0);    int p=calculateBreakPosition(p0,tokenList,x0);    if ((pos >= p0) && (testP < p)) {      alloc=RSyntaxUtilities.getLineWidthUpTo(textArea,s,p0,pos,WrappedSyntaxView.this,alloc,alloc.x);      return alloc;    }    if (p == p1 - 1 && pos == p1 - 1) {      if (pos > p0) {        alloc=RSyntaxUtilities.getLineWidthUpTo(textArea,s,p0,pos,WrappedSyntaxView.this,alloc,alloc.x);      }      return alloc;    }    p0=(p == p0) ? p1 : p;    alloc.y+=alloc.height;  }  throw new BadLocationException(null,pos);}  }
class C{  private void visualizeResizeForDelta(int deltaX,int deltaY,boolean onDismiss){  updateDeltas(deltaX,deltaY);  DragLayer.LayoutParams lp=(DragLayer.LayoutParams)getLayoutParams();  if (mLeftBorderActive) {    lp.x=mBaselineX + mDeltaX;    lp.width=mBaselineWidth - mDeltaX;  } else   if (mRightBorderActive) {    lp.width=mBaselineWidth + mDeltaX;  }  if (mTopBorderActive) {    lp.y=mBaselineY + mDeltaY;    lp.height=mBaselineHeight - mDeltaY;  } else   if (mBottomBorderActive) {    lp.height=mBaselineHeight + mDeltaY;  }  resizeWidgetIfNeeded(onDismiss);  requestLayout();}  }
class C{  public double eval(boolean useTrainingData,int valuesIndex){  if (isConstantNode)   return constantValue;  if (symbol instanceof GEPTerminalSymbol)   return ((GEPTerminalSymbol)symbol).eval(useTrainingData,valuesIndex);  for (int i=0; i < numParameters; i++) {    evaluatedParameters[i]=parameters[i].eval(useTrainingData,valuesIndex);    if (Double.isInfinite(evaluatedParameters[i]) || Double.isNaN(evaluatedParameters[i]))     return Double.NaN;  }  return ((GEPFunctionSymbol)symbol).eval(evaluatedParameters);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  boolean success;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  success=docType.isSupported("","");  assertFalse("nodeissupported03",success);}  }
class C{  private static Pair<StringBuilder,Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression,String prefix){  List<StringBuilder> constants=new ArrayList<StringBuilder>();  boolean usesNamedFormat=false;  final List<ASTNode> stringNodes=stringLiteralExpression.getStringNodes();  sure(stringNodes);  sure(stringNodes.size() > 0);  for (  ASTNode stringNode : stringNodes) {    CharSequence text=stringNode.getChars();    int openPos=0;    boolean hasPrefix=false;    final int prefixLength=PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text));    if (prefixLength != 0)     hasPrefix=true;    openPos+=prefixLength;    char quote=text.charAt(openPos);    sure("\"'".indexOf(quote) >= 0);    if (text.length() - openPos >= 6) {      if (text.charAt(openPos + 1) == quote && text.charAt(openPos + 2) == quote) {        openPos+=2;      }    }    int index=openPos + 1;    StringBuilder out=new StringBuilder(text.subSequence(0,openPos + 1));    if (!hasPrefix)     out.insert(0,prefix);    int position_count=0;    Matcher scanner=FORMAT_PATTERN.matcher(text);    while (scanner.find(index)) {      appendDoublingBraces(text.subSequence(index,scanner.start()),out);      final String f_key=scanner.group(1);      final String f_modifier=scanner.group(2);      final String f_width=scanner.group(3);      String f_conversion=scanner.group(4);      if ("%%".equals(scanner.group(0))) {        out.append("%");      } else {        sure(f_conversion);        sure(!"%".equals(f_conversion));        out.append("{");        if (f_key != null) {          out.append(f_key);          usesNamedFormat=true;        } else {          out.append(position_count);          position_count+=1;        }        if ("r".equals(f_conversion))         out.append("!r");        out.append(":");        if (f_modifier != null) {          if (has(f_modifier,'-'))           out.append("<"); else           if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) {            out.append(">");          }          if (has(f_modifier,'+'))           out.append("+"); else           if (has(f_modifier,' '))           out.append(" ");          if (has(f_modifier,'#'))           out.append("#");          if (has(f_modifier,'0'))           out.append("0");        }        if (f_width != null) {          out.append(f_width);        }        if ("i".equals(f_conversion) || "u".equals(f_conversion))         out.append("d"); else         if ("r".equals(f_conversion))         out.append("s"); else         out.append(f_conversion);        out.append("}");      }      index=scanner.end();    }    appendDoublingBraces(text.subSequence(index,text.length()),out);    constants.add(out);  }  TextRange full_range=stringLiteralExpression.getTextRange();  int full_start=full_range.getStartOffset();  CharSequence full_text=stringLiteralExpression.getNode().getChars();  TextRange prev_range=stringNodes.get(0).getTextRange();  int fragment_no=1;  while (fragment_no < stringNodes.size()) {    TextRange next_range=stringNodes.get(fragment_no).getTextRange();    int left=prev_range.getEndOffset() - full_start;    int right=next_range.getStartOffset() - full_start;    if (left < right) {      constants.get(fragment_no - 1).append(full_text.subSequence(left,right));    }    fragment_no+=1;    prev_range=next_range;  }  final int left=prev_range.getEndOffset() - full_start;  final int right=full_range.getEndOffset() - full_start;  if (left < right) {    constants.get(constants.size() - 1).append(full_text.subSequence(left,right));  }  StringBuilder result=new StringBuilder();  for (  StringBuilder one : constants)   result.append(one);  return new Pair<StringBuilder,Boolean>(result,usesNamedFormat);}  }
class C{  public Polygon(int xpoints[],int ypoints[],int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || " + "npoints > ypoints.length");  }  if (npoints < 0) {    throw new NegativeArraySizeException("npoints < 0");  }  this.npoints=npoints;  this.xpoints=Arrays.copyOf(xpoints,npoints);  this.ypoints=Arrays.copyOf(ypoints,npoints);}  }
class C{  protected boolean doCacheWrite(String name,IOContext context){  long bytes=0;  if (context.mergeInfo != null) {    bytes=context.mergeInfo.estimatedMergeBytes;  } else   if (context.flushInfo != null) {    bytes=context.flushInfo.estimatedSegmentSize;  }  return (bytes <= maxMergeSizeBytes) && (bytes + cache.ramBytesUsed()) <= maxCachedBytes;}  }
class C{  protected SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  return processAdd(chain,new ModifiableSolrParams(),docIn);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void parseDoByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  dataStream.writeLong(network.createVertex(Primitive.DO).getId());  parseOperatorByteCode(dataStream,stream,elements,debug,network);}  }
class C{  public void assertValidGenericType(Type t){  assertValidGenericType(t,true);}  }
class C{  public static Scelight INSTANCE(){  return INSTANCE;}  }
class C{  public static <T>T eachLine(URL url,String charset,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(url,charset,1,closure);}  }
class C{  private static void taskCancelled(ProgressThread task){  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {    l.progressThreadCancelled(task);  }}  }
class C{  public void skipBits(int n){  byteOffset+=(n / 8);  bitOffset+=(n % 8);  if (bitOffset > 7) {    byteOffset++;    bitOffset-=8;  }}  }
class C{  public CGraphWindowHotkeysDialog(final JFrame parent){  super(parent,"Available Hotkeys",ModalityType.MODELESS);  setLayout(new BorderLayout());  add(new JScrollPane(new CGraphWindowHotkeyTable()));  final OKButtonPanel okButtonPanel=new OKButtonPanel(this);  add(okButtonPanel,BorderLayout.SOUTH);  new CDialogEscaper(this);  setSize(700,600);}  }
class C{  public void addNotification(@NotNull Notification notification){  notifications.add(notification);  NotificationContainerItem item=new NotificationContainerItem(notification,resources);  item.setDelegate(this);  int index=nGrid.getRowCount();  nGrid.resizeRows(index + 1);  nGrid.setWidget(index,0,item);}  }
class C{  public void createPixelMatrix(){  CreatePixelMatrixDialog d=new CreatePixelMatrixDialog(this);  d.setBounds(100,100,450,500);  d.setVisible(true);}  }
class C{  public String toString(){  return WKTWriter.toLineString(new CoordinateArraySequence(getCoordinates()));}  }
class C{  public CNodeEditEnterState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Node node){  m_factory=factory;  m_graph=graph;  m_node=node;}  }
class C{  public boolean useTightBBoxes(){  return false;}  }
class C{  public ClusterTopologyException(String msg){  super(msg);}  }
class C{  private Filter compileQy(String qy) throws EagleQueryParseException {  try {    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(_serviceName);    if (qy == null || qy.isEmpty()) {      if (ed.getPartitions() == null) {        if (LOG.isDebugEnabled())         LOG.warn("Query string is empty, full table scan query: " + qy);        return null;      } else {        final String errMsg="Entity " + ed.getEntityClass().getSimpleName() + " defined partition, "+ "but query doesn't provide partition condition! Query: "+ qy;        LOG.error(errMsg);        throw new IllegalArgumentException(errMsg);      }    }    EagleQueryParser parser=new EagleQueryParser(qy);    _queryExpression=parser.parse();    HBaseFilterBuilder builder=new HBaseFilterBuilder(ed,_queryExpression,_filterIfMissing);    FilterList flist=builder.buildFilters();    _partitionValues=builder.getPartitionValues();    _filterFields=builder.getFilterFields();    return flist;  } catch (  InstantiationException e) {    final String errMsg="Got an InstantiationException: " + e.getMessage();    throw new EagleQueryParseException(_serviceName + " entity does not exist! " + errMsg);  }catch (  IllegalAccessException e) {    final String errMsg="Got an IllegalAccessException: " + e.getMessage();    throw new EagleQueryParseException(_serviceName + " entity does not exist! " + errMsg);  }}  }
class C{  public ApiConfig(String apiKey){  mApiKey=apiKey;}  }
class C{  protected float[] rhumbProject(Point2D from,Point2D to,boolean include_last,int nsegs){  if (nsegs < 1) {    nsegs=DrawUtil.pixel_distance((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY()) >> 3;    if (nsegs == 0)     nsegs=1; else     if (nsegs > MAX_RHUMB_SEGS)     nsegs=MAX_RHUMB_SEGS;  }  LatLonPoint llp=new LatLonPoint.Double();  int[] xypts=DrawUtil.lineSegments((int)from.getX(),(int)from.getY(),(int)to.getX(),(int)to.getY(),nsegs,include_last,new int[nsegs << 1]);  float[] llpts=new float[xypts.length];  for (int i=0; i < llpts.length; i+=2) {    inverse(xypts[i],xypts[i + 1],llp);    llpts[i]=(float)llp.getRadLat();    llpts[i + 1]=(float)llp.getRadLon();  }  return llpts;}  }
class C{  private static int joint(Map<?,?> m1,Map<?,?> m2){  if (m1.size() < m2.size()) {    return -1;  } else   if (m2.size() < m1.size()) {    return 1;  }  Collection<Object> c3=new ArrayList<Object>();  c3.addAll(m1.keySet());  c3.removeAll(m2.keySet());  if (c3.size() > 0) {    return -1;  }  c3.addAll(m2.keySet());  c3.removeAll(m1.keySet());  if (c3.size() > 0) {    return 1;  }  return 0;}  }
class C{  public PutIndexTemplateRequestBuilder addMapping(String type,XContentBuilder source){  request.mapping(type,source);  return this;}  }
class C{  public DummyImport(String path){  super(path);}  }
class C{  public void removeAllHeaders(){  clientHeaderMap.clear();}  }
class C{  private double avgDistance(double[] centroid,DBIDs objectIDs,Relation<V> database,int dimension){  Mean avg=new Mean();  for (DBIDIter iter=objectIDs.iter(); iter.valid(); iter.advance()) {    V o=database.get(iter);    avg.put(Math.abs(centroid[dimension] - o.doubleValue(dimension)));  }  return avg.getMean();}  }
class C{  public boolean isSetSrcTable(){  return this.srcTable != null;}  }
class C{  public void updateStyle(String ref,JSONObject style){  if (TextUtils.isEmpty(ref) || style == null || style.size() < 1) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  task.args.add(style);  msg.what=WXDomHandler.MsgType.WX_DOM_UPDATE_STYLE;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public void flush(){  out.flush();}  }
class C{  protected void postShow(Form f){}  }
class C{  public boolean isUseHotStart(){  return useHotStart;}  }
class C{  public String toShortString(){  return toShortString(new StringBuilder(32));}  }
class C{  public boolean first(Object token){switch (type) {case '*':case '?':case '+':    return ((ContentModel)content).first(token);case ',':  for (ContentModel m=(ContentModel)content; m != null; m=m.next) {    if (m.first(token)) {      return true;    }    if (!m.empty()) {      return false;    }  }return false;case '|':case '&':{Element e=(Element)token;if (valSet == null || valSet.length <= Element.getMaxIndex()) {  valSet=new boolean[Element.getMaxIndex() + 1];  val=new boolean[valSet.length];}if (valSet[e.index]) {  return val[e.index];}for (ContentModel m=(ContentModel)content; m != null; m=m.next) {  if (m.first(token)) {    val[e.index]=true;    break;  }}valSet[e.index]=true;return val[e.index];}default :return (content == token);}}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private void addRouteToCommodity(Id<DgCrossingNode> sourceNodeId,Id<DgCrossingNode> drainNodeId,Id<DgCommodity> comId,List<Id<DgStreet>> ksRoute,Id<TtPath> pathId){  if (!this.comsWithRoutes.getCommodities().containsKey(comId)) {    this.comsWithRoutes.addCommodity(new DgCommodity(comId,sourceNodeId,drainNodeId,0.0));  }  DgCommodity currentCom=this.comsWithRoutes.getCommodities().get(comId);  if (!currentCom.containsPath(pathId)) {    currentCom.addPath(pathId,ksRoute,0.0);  }  currentCom.increaseFlowOfPath(pathId,1.0);}  }
class C{  private E createUsingStaticCreateMethod() throws CheckedAnalysisException {  Method createMethod;  try {    createMethod=databaseClass.getMethod("create",new Class[0]);  } catch (  NoSuchMethodException e) {    return null;  }  if (!Modifier.isStatic(createMethod.getModifiers())) {    return null;  }  if (createMethod.getReturnType() != databaseClass) {    return null;  }  try {    return databaseClass.cast(createMethod.invoke(null,new Object[0]));  } catch (  InvocationTargetException e) {    throw new CheckedAnalysisException("Could not create " + databaseClass.getName(),e);  }catch (  IllegalAccessException e) {    throw new CheckedAnalysisException("Could not create " + databaseClass.getName(),e);  }}  }
class C{  public boolean isInside(int x,int y){  boolean leftEdge=(edgeFlags & EDGE_LEFT) > 0;  boolean rightEdge=(edgeFlags & EDGE_RIGHT) > 0;  boolean topEdge=(edgeFlags & EDGE_TOP) > 0;  boolean bottomEdge=(edgeFlags & EDGE_BOTTOM) > 0;  if ((x >= this.x || (leftEdge && x <= this.x + this.width)) && (x < this.x + this.width || (rightEdge && x >= this.x)) && (y >= this.y || (topEdge && y <= this.y + this.height))&& (y < this.y + this.height || (bottomEdge && y >= this.y))) {    return true;  } else {    return false;  }}  }
class C{  private SpeechletResponse newAskResponse(String stringOutput,boolean isOutputSsml,String repromptText,boolean isRepromptSsml){  OutputSpeech outputSpeech, repromptOutputSpeech;  if (isOutputSsml) {    outputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)outputSpeech).setSsml(stringOutput);  } else {    outputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)outputSpeech).setText(stringOutput);  }  if (isRepromptSsml) {    repromptOutputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)repromptOutputSpeech).setSsml(stringOutput);  } else {    repromptOutputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)repromptOutputSpeech).setText(repromptText);  }  Reprompt reprompt=new Reprompt();  reprompt.setOutputSpeech(repromptOutputSpeech);  return SpeechletResponse.newAskResponse(outputSpeech,reprompt);}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null params ");  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public static void copyCas(CAS aSrcCas,CAS aDestCas,boolean aCopySofa){  CasCopier copier=new CasCopier(aSrcCas,aDestCas);  Iterator<SofaFS> sofaIter=aSrcCas.getSofaIterator();  while (sofaIter.hasNext()) {    SofaFS sofa=sofaIter.next();    CAS view=aSrcCas.getView(sofa);    copier.copyCasView(view,aCopySofa);  }}  }
class C{  public JsonArray(){  values=new ArrayList<JsonValue>();}  }
class C{  public FilterExprIterator(Expression expr){  super(null);  m_expr=expr;}  }
class C{  @Override protected Class<?> findClass(final String className) throws ClassNotFoundException {  String partialName=className.replace('.','/');  final String classFileName=new StringBuilder(partialName).append(".class").toString();  String packageName=null;  int position=partialName.lastIndexOf('/');  if ((position=partialName.lastIndexOf('/')) != -1) {    packageName=partialName.substring(0,position);  }  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    Class<?> res=handler.findClass(packageName,classFileName,className);    if (res != null) {      return res;    }  }  throw new ClassNotFoundException(className);}  }
class C{  private static boolean isRootPart(MimePart part,int nthPart,String rootId) throws MessagingException {  return (rootId == null && nthPart == 0) || StringUtils.equals(part.getContentID(),rootId);}  }
class C{  public void writeChar(char txByte,boolean rememberTx){  try {    log.debug("TX:" + String.format("%02X",(byte)txByte));    if (rememberTx) {      lastTxChar=txByte;    }    SerialExt.sendChar((byte)txByte);    pktStat=PacketStatus.ECHO;  } catch (  Exception ex) {    log.error(this.toString(),ex);  }}  }
class C{  public SolrQuery addFacetQuery(String f){  this.add(FacetParams.FACET_QUERY,f);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  private synchronized void calcDisplayedRange(){  final int pageCount=pageData.getPageCount();  if (debugLayout) {    System.out.println("calcDisplayedRange pageNumber=" + multiDisplayOptions.getPageNumber() + " mode="+ displayView);  }  if (displayView == SINGLE_PAGE) {    return;  }  display.getDisplayedRectangle();  if (displayView == FACING) {    multiDisplayOptions.calcDisplayRangeForFacing();  } else {    final int newPage=updatePageDisplayed();    fileAccess.setPageNumber(newPage);    if (newPage != -1 && gui != null) {      gui.setPage(newPage);    }  }  if (multiDisplayOptions.getEndViewPage() > pageCount) {    multiDisplayOptions.setEndViewPage(pageCount);  }  if (displayView != FACING) {    display.refreshDisplay();  }}  }
class C{  protected void before() throws Throwable {  startServer();}  }
class C{  public String toString(){  return "Line " + getLine() + ": "+ getMessage();}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.608 -0500",hash_original_method="FC084068D16B3C6E3AABFF0B17369D5A",hash_generated_method="516AD3A9AF46A80686B3853FFB23ECAF") public synchronized void deleteObservers(){  observers.clear();}  }
class C{  public ReadInputDiscretesRequest(int ref,int count){  super();  setFunctionCode(Modbus.READ_INPUT_DISCRETES);  setDataLength(4);  setReference(ref);  setBitCount(count);}  }
class C{  public static Expression newDefaultExpression(AST ast,ITypeBinding type){  if (type.isPrimitive()) {    String name=type.getName();    if ("boolean".equals(name)) {      return ast.newBooleanLiteral(false);    } else     if ("void".equals(name)) {      return null;    } else {      return ast.newNumberLiteral("0");    }  }  return ast.newNullLiteral();}  }
class C{  private String parseResponseAlbumIds(String json){  StringJoiner sj=new StringJoiner(",");  try {    JsonNode jsonNode=this.objectMapper.readTree(json);    for (    JsonNode node : jsonNode.get("albums").get("items")) {      sj.add(node.get("id").asText());    }  } catch (  IOException e) {    throw new RuntimeException("Failed to parse JSON",e);  }  return sj.toString();}  }
class C{  public CompleteMultipartUpload(Part[] parts) throws XmlPullParserException {  super();  super.name="CompleteMultipartUpload";  super.namespaceDictionary.set("","http://s3.amazonaws.com/doc/2006-03-01/");  if (parts == null) {    this.partList=null;  } else {    this.partList=Arrays.asList(parts);  }}  }
class C{  public synchronized static boolean removeGlobalUnitConverter(UnitConverter unit){  return CONVERTERS.remove(unit);}  }
class C{  public void print(long l) throws IOException {  if (_startLine)   printIndent();  _os.print(l);  _lastCr=false;}  }
class C{  public DatatypeAdapterFactory(){  if (modelPackage == null) {    modelPackage=DatatypePackage.eINSTANCE;  }}  }
class C{  public static String doIgnore(Throwable t,String m){  if (ignorePatterns == null || m == null)   return null;  if (t != null && t instanceof AssertionError)   return null;  for (  String regex : ignorePatterns) {    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(m);    if (matcher.find())     return "Ignoring exception matching " + regex;  }  return null;}  }
class C{  public int[] toUnsortedModelIndices(int[] sortedSelectedIndices){  int[] unsortedSelectedIndices=new int[sortedSelectedIndices.length];  int x=0;  for (  int sortedIndex : sortedSelectedIndices) {    unsortedSelectedIndices[x++]=toUnsortedModelIndex(sortedIndex);  }  Arrays.sort(unsortedSelectedIndices);  return unsortedSelectedIndices;}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) @Deprecated public UnixTerminal(InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset,UnixTerminalSizeQuerier customSizeQuerier,CtrlCBehaviour terminalCtrlCBehaviour) throws IOException {  this(new File("/dev/tty"),terminalInput,terminalOutput,terminalCharset,customSizeQuerier,terminalCtrlCBehaviour);}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Product_ID") == M_Product_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID") != 0)   mTab.setValue("M_AttributeSetInstance_ID",Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID")); else   mTab.setValue("M_AttributeSetInstance_ID",null);  checkQtyAvailable(ctx,mTab,WindowNo,M_Product_ID,null);  return "";}  }
class C{  public void testSetupSysProps(){  JvmLauncherStub java=new JvmLauncherStub();  container.setupSysProps(java);  Properties props=java.getSystemProperties();  assertEquals(16,props.size());  assertTrue(props.getProperty("install.root").endsWith("ram:/jonasroot"));  assertTrue(props.getProperty("jonas.base").endsWith("ram:/jonasbase"));  assertTrue(props.getProperty("java.endorsed.dirs").endsWith(fileHandler.append("ram:/jonasroot","lib/endorsed")));  assertTrue(props.getProperty("java.security.policy").endsWith(fileHandler.append("ram:/jonasbase","conf/java.policy")));  assertTrue(props.getProperty("java.security.auth.login.config").endsWith(fileHandler.append("ram:/jonasbase","conf/jaas.config")));}  }
class C{  private void declare(ExtensionProfile extProfile,Class<? extends ExtensionPoint> extClass,ExtensionDescription desc){  extProfile.declare(extClass,desc);  if (BaseEntry.class.isAssignableFrom(extClass)) {    extProfile.declare(BaseEntry.class,desc);  }}  }
class C{  protected Node newNode(){  return new SVGOMImageElement();}  }
class C{  synchronized public void sendX10Sequence(X10Sequence s,SerialListener l){  s.reset();  X10Sequence.Command c;  while ((c=s.getCommand()) != null) {    SpecificMessage m;    if (c.isAddress()) {      m=SpecificMessage.getX10Address(c.getHouseCode(),((X10Sequence.Address)c).getAddress());    } else     if (c.isFunction()) {      X10Sequence.Function f=(X10Sequence.Function)c;      if (f.getDimCount() > 0) {        m=SpecificMessage.getX10FunctionDim(f.getHouseCode(),f.getFunction(),f.getDimCount());      } else {        m=SpecificMessage.getX10Function(f.getHouseCode(),f.getFunction());      }    } else {      X10Sequence.ExtData e=(X10Sequence.ExtData)c;      m=SpecificMessage.getExtCmd(c.getHouseCode(),e.getAddress(),e.getExtCmd(),e.getExtData());    }    sendSerialMessage(m,l);    try {      wait(250);    } catch (    InterruptedException ex) {      log.error(null,ex);    }  }}  }
class C{  public static MemoryBlock fromLongArray(final long[] array){  return new MemoryBlock(array,PlatformDependent.LONG_ARRAY_OFFSET,array.length * 8);}  }
class C{  public void union(GeneralSubtrees other){  if (other != null) {    for (int i=0, n=other.size(); i < n; i++) {      add(other.get(i));    }    minimize();  }}  }
class C{  public synchronized void config(String msg,Object[] params){  LogRecord record=new LogRecord(Level.CONFIG,msg);  record.setParameters(params);  log(record);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public Builder addFormDataPart(String name,String filename,RequestBody body){  return addPart(Part.createFormData(name,filename,body));}  }
class C{  public Window(int N){  w=new double[N];}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new MotifTextAreaUI();}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  public CMemoryFilterExpression(final String data){  m_data=data;}  }
class C{  protected static CompositeRule convertMode(Element filterElement,BridgeContext ctx){  String rule=filterElement.getAttributeNS(null,SVG_MODE_ATTRIBUTE);  if (rule.length() == 0) {    return CompositeRule.OVER;  }  if (SVG_NORMAL_VALUE.equals(rule)) {    return CompositeRule.OVER;  }  if (SVG_MULTIPLY_VALUE.equals(rule)) {    return CompositeRule.MULTIPLY;  }  if (SVG_SCREEN_VALUE.equals(rule)) {    return CompositeRule.SCREEN;  }  if (SVG_DARKEN_VALUE.equals(rule)) {    return CompositeRule.DARKEN;  }  if (SVG_LIGHTEN_VALUE.equals(rule)) {    return CompositeRule.LIGHTEN;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_MODE_ATTRIBUTE,rule});}  }
class C{  public li(Element element){  addElement(element);}  }
class C{  public static SnapshotShardFailure fromXContent(XContentParser parser) throws IOException {  SnapshotShardFailure snapshotShardFailure=new SnapshotShardFailure();  XContentParser.Token token=parser.currentToken();  if (token == XContentParser.Token.START_OBJECT) {    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (token == XContentParser.Token.FIELD_NAME) {        String currentFieldName=parser.currentName();        token=parser.nextToken();        if (token.isValue()) {          if ("index".equals(currentFieldName)) {            snapshotShardFailure.index=parser.text();          } else           if ("node_id".equals(currentFieldName)) {            snapshotShardFailure.nodeId=parser.text();          } else           if ("reason".equals(currentFieldName)) {            snapshotShardFailure.reason=parser.text();          } else           if ("shard_id".equals(currentFieldName)) {            snapshotShardFailure.shardId=parser.intValue();          } else           if ("status".equals(currentFieldName)) {            snapshotShardFailure.status=RestStatus.valueOf(parser.text());          } else {            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);          }        }      } else {        throw new ElasticsearchParseException("unexpected token [{}]",token);      }    }  } else {    throw new ElasticsearchParseException("unexpected token [{}]",token);  }  return snapshotShardFailure;}  }
class C{  public void addRun(final Run run){  runs.add(run);  run.setId(runIdCounter++);}  }
class C{  public final void splitTo(AbstractNode<E> newNode,List<E> assignmentsToFirst,List<E> assignmentsToSecond){  assert (isLeaf() == newNode.isLeaf());  deleteAllEntries();  StringBuilder msg=LoggingConfiguration.DEBUG ? new StringBuilder() : null;  for (  E entry : assignmentsToFirst) {    if (msg != null) {      msg.append("n_").append(getPageID()).append(" ").append(entry).append("\n");    }    addEntry(entry);  }  for (  E entry : assignmentsToSecond) {    if (msg != null) {      msg.append("n_").append(newNode.getPageID()).append(" ").append(entry).append("\n");    }    newNode.addEntry(entry);  }  if (msg != null) {    Logging.getLogger(this.getClass()).fine(msg.toString());  }}  }
class C{  public void addAttributeEqualsCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributeEqualsCondition(namespaceURI,name,value));}  }
class C{  public void prepareForNextRun(){  for (int i=0; i < 5; i++) {    System.gc();    try {      Thread.sleep(20);    } catch (    InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  public void endPut(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(putInProgressId,-1);  int endPutId;  if (timedOut) {    endPutId=putTimedOutId;  } else   if (failed) {    endPutId=putFailedId;  } else {    endPutId=putId;  }  this.stats.incInt(endPutId,1);  this.stats.incLong(putDurationId,duration);}  }
class C{  public static boolean isFilePath(String path){  if (TextUtils.isEmpty(path)) {    return false;  }  if (path.startsWith(File.separator)) {    return true;  }  return false;}  }
class C{  private void drawSmiley(Graphics g){  long startTime, endTime, totalTime;  startTime=System.nanoTime();  for (int i=0; i < 100; ++i) {    renderSmiley(g,SMILEY_X,DIRECT_Y);  }  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.setColor(Color.BLACK);  g.drawString("Direct: " + ((float)totalTime / 100) + " ms",SMILEY_X,DIRECT_Y + SMILEY_SIZE + 20);  System.out.println("Direct: " + totalTime);  if (smileyImage == null) {    GraphicsConfiguration gc=getGraphicsConfiguration();    smileyImage=gc.createCompatibleImage(SMILEY_SIZE + 1,SMILEY_SIZE + 1,Transparency.BITMASK);    Graphics2D gImg=(Graphics2D)smileyImage.getGraphics();    renderSmiley(gImg,0,0);    gImg.dispose();  }  startTime=System.nanoTime();  for (int i=0; i < 100; ++i) {    g.drawImage(smileyImage,SMILEY_X,INTERMEDIATE_Y,null);  }  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("Intermediate: " + ((float)totalTime / 100) + " ms",SMILEY_X,INTERMEDIATE_Y + SMILEY_SIZE + 20);  System.out.println("intermediate smiley: " + totalTime);}  }
class C{  private void initForCurrentDocument(){  TreeModel model=new DOMTreeModel(doc);  tree.setModel(model);  if (!(tree.getCellRenderer() instanceof DOMTreeCellRenderer)) {    tree.setCellRenderer(new DOMTreeCellRenderer());  }  if (styleReference != null) {    if (elementPropPanel != null) {      splitPane.remove(elementPropPanel);    }    elementPropPanel=new ElementPropertiesPanel(styleReference);    splitPane.setRightComponent(elementPropPanel);    tree.removeTreeSelectionListener(nodeSelectionListener);    nodeSelectionListener=new DOMSelectionListener(tree,elementPropPanel);    tree.addTreeSelectionListener(nodeSelectionListener);  }}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  public GeneralNamesTableModel(){  columnName=res.getString("GeneralNamesTableModel.GeneralNameColumn");  data=new ArrayList<GeneralName>();}  }
class C{  public String combineMix(List<String> files,String outFile){  ArrayList<String> cmd=new ArrayList<String>();  cmd.add(soxBin);  cmd.add("-m");  for (  String file : files) {    cmd.add("-v");    cmd.add("1.0");    cmd.add(file);  }  cmd.add(outFile);  try {    int rc=execSox(cmd,callback);    if (rc != 0) {      outFile=null;    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return outFile;}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public Map<String,Object> processMetadata(Draft3Job job,Object value,Draft3OutputPort outputPort,Object outputBinding){  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  Map<String,Object> metadata=Draft3FileValueHelper.getMetadata(value);  String inputId=Draft3BindingHelper.getInheritMetadataFrom(outputBinding);  if (StringUtils.isEmpty(inputId)) {    logger.info("Metadata for {} is {}.",outputPort.getId(),metadata);    return metadata;  }  Object input=null;  String normalizedInputId=Draft3SchemaHelper.normalizeId(inputId);  for (  Entry<String,Object> inputEntry : job.getInputs().entrySet()) {    if (inputEntry.getKey().equals(normalizedInputId)) {      input=inputEntry.getValue();      break;    }  }  List<Map<String,Object>> metadataList=findAllMetadata(input);  Map<String,Object> inheritedMetadata=intersect(metadataList);  if (inheritedMetadata == null) {    return metadata;  }  if (metadata != null) {    inheritedMetadata.putAll(metadata);  }  logger.info("Metadata for {} is {}.",outputPort.getId(),inheritedMetadata);  return inheritedMetadata;}  }
class C{  public void restoreFilesFromSetName(String setName) throws IOException {  copyBackupSet(new File(getBackupRoot(),setName),getOperationsRoot());}  }
class C{  public AsyncResult QueryNextAsync(QueryNextRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.COMPOUND_EXPR___STRING_EXPR_1:    getStringExpr_1().clear();  return;case UmplePackage.COMPOUND_EXPR___BOOL_EXPR_1:getBoolExpr_1().clear();return;case UmplePackage.COMPOUND_EXPR___NUM_EXPR_1:getNumExpr_1().clear();return;case UmplePackage.COMPOUND_EXPR___GEN_EXPR_1:getGenExpr_1().clear();return;}super.eUnset(featureID);}  }
class C{  public InhibitAnyPolicy(int skipCerts){  this.skipCerts=skipCerts;}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  @After public void tearDown() throws Exception {  if (this.system != null) {    this.system.disconnect();  }}  }
class C{  public UriMatcher(Object code){  mCode=code;  mWhich=-1;  mChildren=new ArrayList<UriMatcher>();  mText=null;}  }
class C{  public void contractDetails(int reqId,ContractDetails contractDetails){  try {    if (m_contractRequests.containsKey(reqId)) {      Contract contract=m_contractRequests.get(reqId);      TWSBrokerModel.logContractDetails(contractDetails);      if (TWSBrokerModel.populateContract(contractDetails,contract)) {        m_tradePersistentModel.persistContract(contract);      }    } else {      error(reqId,3220,"Contract details not found for reqId: " + reqId + " Symbol: "+ contractDetails.m_summary.m_symbol);    }  } catch (  Exception ex) {    error(reqId,3230,ex.getMessage());  }}  }
class C{  @GET @Path("token") @Produces(MediaType.APPLICATION_JSON) public OAuthToken token(@Required @QueryParam("oauth_provider") String oauthProvider) throws ServerException, BadRequestException, NotFoundException, ForbiddenException {  OAuthAuthenticator provider=getAuthenticator(oauthProvider);  final Subject subject=EnvironmentContext.getCurrent().getSubject();  try {    OAuthToken token=provider.getToken(subject.getUserId());    if (token == null) {      token=provider.getToken(subject.getUserName());    }    if (token != null) {      return token;    }    throw new NotFoundException("OAuth token for user " + subject.getUserId() + " was not found");  } catch (  IOException e) {    throw new ServerException(e.getLocalizedMessage(),e);  }}  }
class C{  private static KdbGroup deserializeGroup(KdbGroup lastGroup,DataInput dataInput) throws IOException {  int fieldType;  KdbGroup group=new KdbGroup();  while ((fieldType=dataInput.readUnsignedShort()) != 0xFFFF) {switch (fieldType) {case 0x0000:      readExtData(dataInput);    break;case 0x0001:  UUID uuid=new UUID(0,readInt(dataInput));group.setUuid(uuid);break;case 0x0002:group.setName(readString(dataInput));break;case 0x0003:group.setCreationTime(readDate(dataInput));break;case 0x0004:group.setLastModificationTime(readDate(dataInput));break;case 0x0005:group.setLastAccessTime(readDate(dataInput));break;case 0x0006:group.setExpiryTime(readDate(dataInput));break;case 0x0007:group.setIcon(new KdbIcon(readInt(dataInput)));break;case 0x0008:int level=readShort(dataInput);group.setParent(computeParentGroup(lastGroup,level));break;case 0x0009:group.setFlags(readInt(dataInput));break;default :throw new IllegalStateException("Unknown field type");}}dataInput.readInt();return group;}  }
class C{  public void testRead1() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  byte res;  for (int i=0; i < data.length; i++) {    if ((res=(byte)cis.read()) != data[i]) {      fail("read() returned the incorrect value. " + "Expected: " + data[i] + ", Got: "+ res+ ".");    }  }  if (cis.read() != -1) {    fail("read() should return -1 at the end of the stream.");  }}  }
class C{  public MaxForwardsHeader createMaxForwardsHeader(int maxForwards) throws InvalidArgumentException {  if (maxForwards < 0 || maxForwards > 255)   throw new InvalidArgumentException("bad maxForwards arg " + maxForwards);  MaxForwards m=new MaxForwards();  m.setMaxForwards(maxForwards);  return m;}  }
class C{  private boolean isValidSearch(Map<String,List<String>> params,String[] criterias){  for (  String search : criterias) {    if (params.containsKey(search)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isTransient(){  return false;}  }
class C{  @Override protected Entity readEntity() throws IOException {  entity.clear();  GetObjectRequest rangeObjectRequest=new GetObjectRequest(bucketName,filePath);  rangeObjectRequest.setRange(offset,blockMetadata.getLength() - 1);  S3Object objectPortion=s3Client.getObject(rangeObjectRequest);  S3ObjectInputStream wrappedStream=objectPortion.getObjectContent();  byte[] record=ByteStreams.toByteArray(wrappedStream);  entity.setUsedBytes(record.length);  entity.setRecord(record);  wrappedStream.close();  return entity;}  }
class C{  public void reset(){  super.reset();  cookies.clear();  headersMap.clear();  statusCode=SC_OK;  contentType=null;}  }
class C{  private BoundedHeap(int maximumSize,ComparatorT compareFn,List<T> asList){  this.maximumSize=maximumSize;  this.asList=asList;  this.compareFn=compareFn;}  }
class C{  public long addConfiguration(final String name,final String configuration){  final ContentValues values=mValues;  values.clear();  values.put(ConfigurationContract.Configuration.NAME,name);  values.put(ConfigurationContract.Configuration.XML,configuration);  values.put(ConfigurationContract.Configuration.DELETED,0);  return mDatabase.replace(Tables.CONFIGURATIONS,null,values);}  }
class C{  private static boolean pinterestInstalled(final Context context){  if (!meetsRequirements())   return false;  boolean installed=false;  try {    PackageInfo info=context.getPackageManager().getPackageInfo(PINTEREST_PACKAGE,PackageManager.GET_SIGNATURES);    if (info != null && info.versionCode >= 16) {      for (      Signature signature : info.signatures) {        String signatureHash=Utils.sha1Hex(signature.toByteArray());        installed=signatureHash.equals(PINTEREST_SIGNATURE_HASH);      }    }    if (!installed)     Utils.log("PDK: Pinterest App not installed or version too low!");  } catch (  Exception e) {    Utils.loge(e.getLocalizedMessage());    installed=false;  }  return installed;}  }
class C{  public Jetty4xEmbeddedStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);}  }
class C{  public void add(long receivedVersion){  if (receivedVersion == this.previousVersion + 1) {    this.previousVersion=receivedVersion;    if (this.received != null) {      addReceived(receivedVersion);      consumeReceivedVersions();    }  } else   if (receivedVersion == this.nextVersion - 1) {    this.nextVersion=receivedVersion;    if (this.received != null) {      addReceived(receivedVersion);      consumeReceivedVersions();    }  } else   if (this.previousVersion < receivedVersion && receivedVersion < this.nextVersion) {    addReceived(receivedVersion);  }}  }
class C{  public CommentResource(){  super();}  }
class C{  public void releaseSavepoint(final Savepoint savepoint) throws SQLException {  Statement st=createStatement();  st.execute("RELEASE SAVEPOINT " + savepoint.toString());  st.close();}  }
class C{  private StoragePort assignPortBasedOnUsage(List<StoragePort> matchingTargetPorts,Map<StoragePort,Integer> portUsage){  StoragePort foundPort=null;  for (  StoragePort matchedPort : matchingTargetPorts) {    if (portUsage.get(matchedPort) == null) {      portUsage.put(matchedPort,0);    }    if (foundPort == null) {      foundPort=matchedPort;    } else {      if (portUsage.get(matchedPort) < portUsage.get(foundPort)) {        foundPort=matchedPort;      }    }  }  if (foundPort != null) {    portUsage.put(foundPort,portUsage.get(foundPort) + 1);  }  return foundPort;}  }
class C{  public DecodeReturn scanAt(int _pos){  pos=Math.min(Math.max(_pos,0),data.length());  return this;}  }
class C{  public void stop(){  exec.shutdownNow();}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public String preserveInstancesOrderTipText(){  return "Preserve order of instances.";}  }
class C{  public StateInfo(int state,Font font,Color[] colors){  this.state=state;  this.font=font;  this.colors=colors;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.870 -0500",hash_original_method="6B8DF053C82CA47987420F0F6F09ABCF",hash_generated_method="8B07584B28CE2352E2A797FBDC920915") static public void run(Class testClass){  run(new TestSuite(testClass));}  }
class C{  private void receivedServerFinished(Finished message) throws HandshakeException {  if (lastFlight != null) {    return;  }  DTLSFlight flight=new DTLSFlight(getSession());  md.update(clientHello.toByteArray());  md.update(serverHello.getRawMessage());  MessageDigest mdWithServerFinish=null;  try {    mdWithServerFinish=(MessageDigest)md.clone();  } catch (  CloneNotSupportedException e) {    throw new HandshakeException("Cannot create FINISHED message hash",new AlertMessage(AlertLevel.FATAL,AlertDescription.INTERNAL_ERROR,message.getPeer()));  }  mdWithServerFinish.update(message.getRawMessage());  handshakeHash=md.digest();  message.verifyData(session.getMasterSecret(),false,handshakeHash);  ChangeCipherSpecMessage changeCipherSpecMessage=new ChangeCipherSpecMessage(message.getPeer());  flight.addMessage(wrapMessage(changeCipherSpecMessage));  setCurrentWriteState();  handshakeHash=mdWithServerFinish.digest();  Finished finished=new Finished(session.getMasterSecret(),isClient,handshakeHash,message.getPeer());  flight.addMessage(wrapMessage(finished));  state=HandshakeType.FINISHED.getCode();  flight.setRetransmissionNeeded(false);  lastFlight=flight;  recordLayer.sendFlight(flight);  sessionEstablished();}  }
class C{  public static long computeEntryCookie(OFFlowMod fm,int userCookie,String name){  int prime=211;  int flowHash=2311;  for (int i=0; i < name.length(); i++)   flowHash=flowHash * prime + (int)name.charAt(i);  return AppCookie.makeCookie(StaticFlowEntryPusher.STATIC_FLOW_APP_ID,flowHash);}  }
class C{  public void checkExcluded(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkExcludedEmail(excludedSubtreesEmail,extractNameAsString(name));  break;case 2:checkExcludedDNS(excludedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkExcludedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkExcludedURI(excludedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkExcludedIP(excludedSubtreesIP,ip);}}  }
class C{  public static BaseResponse newResponseObject(String contentTypeHeader){  String contentType=StringUtils.isNotBlank(contentTypeHeader) ? contentTypeHeader : "";  if (contentType.contains("xml")) {    return new XMLResponse();  } else   if (contentType.contains("json")) {    return new JsonResponse();  } else {    return new BinaryResponse();  }}  }
class C{  public static boolean stopThreads(List<Thread> threads){  boolean status=true;  threads.forEach(null);  for (  Thread t : threads) {    status=joinThread(t) && status;  }  return status;}  }
class C{  public static void resetTemporaryVariableName(){  tempSequenceNumber=0;}  }
class C{  public boolean isAnimate(){  return mAnimate;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public TreeNode(TreeNode l,TreeNode r){  this(1,l,r);}  }
class C{  protected void deiconifyFrame(JInternalFrame f){  if (!f.isMaximum()) {    BasicLookAndFeel.playSound(frame,"InternalFrame.restoreUpSound");  }  getDesktopManager().deiconifyFrame(f);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ReaderAccessibleInfo(int[][] array){  this.array=array;}  }
class C{  public MultiKeyConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0) {    throw new IllegalArgumentException();  }  if (concurrencyLevel > MAX_SEGMENTS) {    concurrencyLevel=MAX_SEGMENTS;  }  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=new Segment[ssize];  if (initialCapacity > MAXIMUM_CAPACITY) {    initialCapacity=MAXIMUM_CAPACITY;  }  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity) {    ++c;  }  int cap=1;  while (cap < c) {    cap<<=1;  }  for (int i=0; i < this.segments.length; ++i) {    this.segments[i]=new Segment<>(cap,loadFactor);  }}  }
class C{  public NetworkRestRep create(NetworkCreate input){  return client.post(NetworkRestRep.class,input,PathConstants.NETWORK_URL);}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.345 -0500",hash_original_method="F962E0B98A7E7F83554889920016ABE1",hash_generated_method="D6B34BDE7EE79CBCAC9F5267E3309682") public static String convert(double coordinate,int outputType){  if (coordinate < -180.0 || coordinate > 180.0 || Double.isNaN(coordinate)) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }  if ((outputType != FORMAT_DEGREES) && (outputType != FORMAT_MINUTES) && (outputType != FORMAT_SECONDS)) {    throw new IllegalArgumentException("outputType=" + outputType);  }  StringBuilder sb=new StringBuilder();  if (coordinate < 0) {    sb.append('-');    coordinate=-coordinate;  }  DecimalFormat df=new DecimalFormat("###.#####");  if (outputType == FORMAT_MINUTES || outputType == FORMAT_SECONDS) {    int degrees=(int)Math.floor(coordinate);    sb.append(degrees);    sb.append(':');    coordinate-=degrees;    coordinate*=60.0;    if (outputType == FORMAT_SECONDS) {      int minutes=(int)Math.floor(coordinate);      sb.append(minutes);      sb.append(':');      coordinate-=minutes;      coordinate*=60.0;    }  }  sb.append(df.format(coordinate));  return sb.toString();}  }
class C{  public static CCTouchDispatcher sharedDispatcher(){  return _sharedDispatcher;}  }
class C{  void doLogCurve(java.awt.event.ActionEvent e){  double first=_cvMap.get(cvList[0]).getValue();  double last=_cvMap.get(cvList[nValues - 1]).getValue();  if (last < first + 1.) {    last=first + 1.;  }  double factor=1. / 10.;  _cvMap.get(cvList[1]).setValue((int)Math.round(last));  double ratio=Math.pow(1. - factor,nValues - 1.);  double limit=last + (last - first) * ratio;  for (int i=1; i < nValues; i++) {    double previous=limit - (limit - first) * ratio / Math.pow(1. - factor,nValues - 1. - i);    int value=(int)(Math.floor(previous));    _cvMap.get(cvList[i]).setValue(value);  }}  }
class C{  public boolean isIntersectedBy(double x0,double y0,double x1,double y1){  int side1=turns(x0,y0,x1,y1,x[0],y[0]);  if (side1 == STRAIGHT) {    return true;  }  for (int i=1; i < 6; i++) {    int j=turns(x0,y0,x1,y1,x[i],y[i]);    if (j == STRAIGHT || j != side1) {      return true;    }  }  return false;}  }
class C{  public boolean isEmpty(){  return parameters.isEmpty();}  }
class C{  private void runDFTest(TEST_TYPE type,boolean inverse,Double param1,Double param2,ExecType instType){  RUNTIME_PLATFORM platformOld=rtplatform;switch (instType) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.HYBRID;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(TEST_NAME);double in=(new Random(System.nanoTime())).nextDouble();String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + TEST_NAME + "_"+ type.toString()+ ".dml";fullRScriptName=HOME + TEST_NAME + "_"+ type.toString()+ ".R";switch (type) {case NORMAL_NOPARAMS:programArgs=new String[]{"-args",Double.toString(in),output("dfout")};rCmd="Rscript" + " " + fullRScriptName + " "+ Double.toString(in)+ " "+ expected("dfout");break;case NORMAL_MEAN:case NORMAL_SD:case T:case CHISQ:case EXP:programArgs=new String[]{"-args",Double.toString(in),Double.toString(param1),output("dfout")};rCmd="Rscript" + " " + fullRScriptName + " "+ Double.toString(in)+ " "+ Double.toString(param1)+ " "+ expected("dfout");break;case NORMAL:case F:programArgs=new String[]{"-args",Double.toString(in),Double.toString(param1),Double.toString(param2),output("dfout")};rCmd="Rscript" + " " + fullRScriptName + " "+ Double.toString(in)+ " "+ Double.toString(param1)+ " "+ Double.toString(param2)+ " "+ expected("dfout");break;default :throw new RuntimeException("Invalid distribution function: " + type);}runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS("dfout");HashMap<CellIndex,Double> rfile=readRMatrixFromFS("dfout");TestUtils.compareMatrices(dmlfile,rfile,1e-8,"DMLout","Rout");}  finally {rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  formatParamAsVer(buffer,cookie.getName(),cookie.getValue(),version);  if (cookie.getPath() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PATH_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Path",cookie.getPath(),version);    }  }  if (cookie.getDomain() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Domain",cookie.getDomain(),version);    }  }}  }
class C{  private void configureDataDir(){  if (dataDirName != null) {    dataDirName=dataDirName.trim();    if (!("".equals(dataDirName))) {      final File dataDirCandidate=new File(dataDirName);      dataDirCandidate.mkdirs();      dataDir=(dataDirCandidate.canRead() && dataDirCandidate.canWrite()) ? dataDirCandidate : dataDir;    }  }  if (dataDir == null) {    dataDir=PlatformFactory.getPlatform().getApplicationDataDir(applicationId);  }}  }
class C{  public byte[] readBuffer() throws IOException {  int len=readInt();  byte[] buffer=new byte[len];  readFully(buffer,0,len);  skipPadding(len);  return buffer;}  }
class C{  public static int checkAndCorrect(BinaryMessage frame,int startIndex){  int syndrome=getSyndrome(frame,startIndex);switch (syndrome) {case 0:    return 0;case 1:  frame.flip(startIndex + 14);return 1;case 2:frame.flip(startIndex + 13);return 1;case 3:frame.flip(startIndex + 10);return 1;case 4:frame.flip(startIndex + 12);return 1;case 5:frame.flip(startIndex + 9);return 1;case 6:frame.flip(startIndex + 8);return 1;case 7:frame.flip(startIndex + 7);return 1;case 8:frame.flip(startIndex + 11);return 1;case 9:frame.flip(startIndex + 6);return 1;case 10:frame.flip(startIndex + 5);return 1;case 11:frame.flip(startIndex + 4);return 1;case 12:frame.flip(startIndex + 3);return 1;case 13:frame.flip(startIndex + 2);return 1;case 14:frame.flip(startIndex + 1);return 1;case 15:frame.flip(startIndex);return 1;}return 2;}  }
class C{  public void invoke(Class<?> clazz) throws InitializationException {  Method[] methods=clazz.getDeclaredMethods();  if (CommonUtil.isNotEmpty(methods)) {    for (    Method method : methods) {      if (getBaseDaoExcutor(method) != null) {        continue;      }      cacheSqlTemplate(method);      cacheSqlParamMetadata(method);    }  }}  }
class C{  private boolean isBorderPainted(){  return getStyle().getBorder() != null;}  }
class C{  @Override public boolean equals(@Nullable Object object){  if (object == this) {    return true;  }  if (object instanceof InternetDomainName) {    InternetDomainName that=(InternetDomainName)object;    return this.name.equals(that.name);  }  return false;}  }
class C{  public Long copyFileToCurrentRoom(String SID,Long flvFileExplorerId){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      IConnection current=Red5.getConnectionLocal();      String streamid=current.getClient().getId();      RoomClient currentClient=this.clientListManager.getClientByStreamId(streamid);      Long room_id=currentClient.getRoom_id();      if (room_id != null) {        String streamFolderName=ScopeApplicationAdapter.webAppPath + File.separatorChar + OpenmeetingsVariables.STREAMS_DIR+ File.separatorChar+ "hibernate"+ File.separatorChar;        String outputFullFlv=streamFolderName + "UPLOADFLV_" + flvFileExplorerId+ ".flv";        String targetFolderName=ScopeApplicationAdapter.webAppPath + File.separatorChar + OpenmeetingsVariables.STREAMS_DIR+ File.separatorChar+ room_id+ File.separatorChar;        File targetFolder=new File(targetFolderName);        if (!targetFolder.exists()) {          targetFolder.mkdir();        }        String targetFullFlv=targetFolderName + "UPLOADFLV_" + flvFileExplorerId+ ".flv";        File outputFullFlvFile=new File(outputFullFlv);        File targetFullFlvFile=new File(targetFullFlv);        if (outputFullFlvFile.exists()) {          if (!targetFullFlvFile.exists()) {            fileUtils.copyFile(outputFullFlv,targetFullFlv);          }        }        return 1L;      }    }  } catch (  Exception err) {    log.error("[copyFileToCurrentRoom] ",err);  }  return -1L;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.COMMA_EXPRESSION__EXPRS:    getExprs().clear();  return;}super.eUnset(featureID);}  }
class C{  @After public void tearDown(){  serializer=null;  deserializer=null;}  }
class C{  public void removeHandler(String path){  getDispatchHandler().removeHandler(path);}  }
class C{  protected DeserializationConfig passSerializationFeatures(int serializationFeatureFlags){  _sortPropertiesAlphabetically=(serializationFeatureFlags & SerializationConfig.Feature.SORT_PROPERTIES_ALPHABETICALLY.getMask()) != 0;  return this;}  }
class C{  public void dynInit() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);  fWarehouse=new VLookup("M_Warehouse_ID",true,false,true,orgL);  lWarehouse.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  fWarehouse.addVetoableChangeListener(this);  setM_Warehouse_ID(fWarehouse.getValue());  MLookup docActionL=MLookupFactory.get(Env.getCtx(),m_WindowNo,4324,DisplayType.List,Env.getLanguage(Env.getCtx()),"DocAction",135,false,"AD_Ref_List.Value IN ('CO','PR')");  docAction=new VLookup("DocAction",true,false,true,docActionL);  docAction.addVetoableChangeListener(this);  docAction.setValue("PR");  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);  lBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fBPartner.addVetoableChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"VendorRMA")));  cmbDocType.addActionListener(this);  panel.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateSel"));}  }
class C{  public TodolistObject(TodolistObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.name=parent.getName();  this.description=parent.getDescription();  this.position=parent.getPosition();  this.creatorId=parent.getCreatorId();  this.creatorName=parent.getCreatorName();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.bcId=parent.getBcId();  this.companyId=parent.getCompanyId();  this.archived=parent.getArchived();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public AuthorizationException(final String msg){  super(msg);  LOG.error(msg);}  }
class C{  protected int numSpecifiers(){  return m_Specifiers.size();}  }
class C{  public final void addVariable(int index,Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable.");  }  if (index < 0 || index > variables.size()) {    throw new IndexOutOfBoundsException("Index must in (0, #vars).");  }  variables.add(index,variable);  resize(dataBox.numRows(),variables.size());  Number[][] _data=new Number[dataBox.numRows()][dataBox.numCols()];  for (int j=0; j < dataBox.numCols() + 1; j++) {    if (j < index) {      for (int i=0; i < dataBox.numRows(); i++) {        _data[i][j]=dataBox.get(i,j);      }    } else     if (j == index) {      for (int i=0; i < dataBox.numRows(); i++) {        _data[i][j]=null;      }    } else {      for (int i=0; i < dataBox.numRows(); i++) {        _data[i][j]=dataBox.get(i,j - 1);      }    }  }}  }
class C{  public static String[] insert(String[] dest,String src,int offset){  String[] temp=new String[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.390 -0500",hash_original_method="BA2F0752C4374C507095962D429C28E1",hash_generated_method="D288CECB993F6AA23666CE3989EA440C") private String parseScheme(String header){  if (header != null) {    int i=header.indexOf(' ');    if (i >= 0) {      String scheme=header.substring(0,i).trim();      if (scheme.equalsIgnoreCase(DIGEST_TOKEN)) {        mScheme=DIGEST;        mAlgorithm="md5";      } else {        if (scheme.equalsIgnoreCase(BASIC_TOKEN)) {          mScheme=BASIC;        }      }      return header.substring(i + 1);    }  }  return null;}  }
