class C{  public void cancel(){  ProgressIndicator indicator=myCurrentProgressIndicator.get();  if (indicator == null) {    myWizard.doCancelAction();  } else {    indicator.cancel();    JButton button=myActionToButtonMap.get(myCancelAction);    if (button != null) {      button.setEnabled(false);    }  }}  }
class C{  public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.modify_file(parts[0],parts[1],file_offset,file_buff,buffer_offset,buffer_length);}  }
class C{  public EqualsExtended(){  super(null,null);}  }
class C{  public void changeSpaceState(int state,boolean electable,boolean replicable){  _spaceState.setState(state);  modifyLookupAttributes(new Entry[]{new State()},new Entry[]{new State(state,electable,replicable)});}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K oldKeys[]=(K[])_set;  int oldVals[]=_values;  _set=new Object[newCapacity];  Arrays.fill(_set,FREE);  _values=new int[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != FREE && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[(-index - 1)],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  private void callCacheNotification(final Long id,final Map<Long,Boolean> notifiedRules){synchronized (notifiedRules) {    Tag tagCopy=tagLocationService.getCopy(id);    if (!notifiedRules.containsKey(tagCopy.getId())) {      LOGGER.trace("Performing supervision notification for tag " + id);      boolean dirtyTagContext=false;      for (      Long procId : tagCopy.getProcessIds()) {        if (processEventCache.hasKey(procId)) {          supervisionAppender.addSupervisionQuality(tagCopy,processEventCache.getCopy(procId));          dirtyTagContext=true;        }      }      for (      Long eqId : tagCopy.getEquipmentIds()) {        if (equipmentEventCache.hasKey(eqId)) {          supervisionAppender.addSupervisionQuality(tagCopy,equipmentEventCache.getCopy(eqId));          dirtyTagContext=true;        }      }      for (      Long subEqId : tagCopy.getSubEquipmentIds()) {        if (subEquipmentEventCache.hasKey(subEqId)) {          supervisionAppender.addSupervisionQuality(tagCopy,subEquipmentEventCache.getCopy(subEqId));          dirtyTagContext=true;        }      }      if (dirtyTagContext) {        if (tagCopy instanceof DataTag) {          dataTagCache.notifyListenersOfSupervisionChange((DataTag)tagCopy);        } else         if (tagCopy instanceof RuleTag) {          ruleTagCache.notifyListenersOfSupervisionChange((RuleTag)tagCopy);        } else {          throw new IllegalArgumentException("Unexpected call with Tag parameter that is neither DataTag or RuleTag; " + "type is " + tagCopy.getClass().getSimpleName());        }      }    }    Collection<Long> ruleIds;    ruleIds=new ArrayList<Long>(tagCopy.getRuleIds());    for (    Long ruleId : ruleIds) {      callCacheNotification(ruleId,notifiedRules);      notifiedRules.put(ruleId,true);    }  }}  }
class C{  public IpLogsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public boolean isNonsingular(){  for (int j=0; j < n; j++) {    if (LU[j][j] == 0)     return false;  }  return true;}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public static void doubleClick(Robot robot,Point clickLocation){  robot.moveMouse(clickLocation);  robot.pressMouse(LEFT_BUTTON);  robot.releaseMouse(LEFT_BUTTON);  robot.pressMouse(LEFT_BUTTON);  robot.releaseMouse(LEFT_BUTTON);}  }
class C{  protected void maximizePanel(StateChangeReason reason){  animatePanelToState(PanelState.MAXIMIZED,reason);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200773,skillcaster,skillname);}  }
class C{  public void addColor(int color){  if (mColors == null)   mColors=new ArrayList<>();  mColors.add(color);}  }
class C{  public LpcPitchSynchronousAnalyser(DoubleDataSource signal,DoubleDataSource pitchmarks,int windowType,int samplingRate){  super(signal,pitchmarks,windowType,samplingRate);}  }
class C{  public static final String millisToMinSecString(long lMillis){  return String.format("%d hours %d min %d sec",lMillis / (1000 * 60 * 60),(lMillis / (1000 * 60)) % 60,(lMillis / 1000) % 60);}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  Throwable t) {    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,t); else     t.printStackTrace();  }  return entity;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public static Event createEvent(){  return new Event();}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableOkHttpCookies)objectInputStream.readObject()).getCookies();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public void clear(){  actions.clear();  errorCodeMap.clear();  otherwiseActions.clear();  alwaysActions.clear();  if (localContext != null) {    localContext.get().clear();  }}  }
class C{  public static List<String> readFileAsLines(final File selectedFile) throws SpyException {  try {    BufferedReader in=new BufferedReader(new FileReader(selectedFile));    String str;    final List<String> list=new ArrayList<String>();    while ((str=in.readLine()) != null) {      list.add(str);    }    in.close();    return list;  } catch (  IOException e) {    throw new SpyException("Can't open the file at " + selectedFile.getAbsolutePath(),e);  }}  }
class C{  private static int computeOrderSortingValue(float indexDistance,float stackVisibility){  return (int)((indexDistance + 1) / (0.1f + 0.9f * stackVisibility));}  }
class C{  public static MaxEval unlimited(){  return new MaxEval(Integer.MAX_VALUE);}  }
class C{  public byte[] serializeBytes(){  return serializeBytes(CUR_VERSION);}  }
class C{  private Date extrapolateStartTimeFromScanRanges(List<ScanRangeStatus> pendingScanRanges,List<ScanRangeStatus> activeScanRanges,List<ScanRangeStatus> completeScanRanges){  Date startTime=null;  for (  ScanRangeStatus status : Iterables.concat(pendingScanRanges,activeScanRanges,completeScanRanges)) {    Date queuedTime=status.getScanQueuedTime();    if (queuedTime != null && (startTime == null || queuedTime.before(startTime))) {      startTime=queuedTime;    }  }  if (startTime == null) {    startTime=new Date(0);  }  return startTime;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201062,num0,skilltarget,skillname);}  }
class C{  public CART load(String fileName) throws IOException, MaryConfigurationException {  FileInputStream fis=new FileInputStream(fileName);  try {    return loadFromStream(fis);  }  finally {    fis.close();  }}  }
class C{  public CannotJoinException(){  super();}  }
class C{  private void resizeText(){  final int availableHeightPixels=getHeight() - getCompoundPaddingBottom() - getCompoundPaddingTop();  final int availableWidthPixels=getWidth() - getCompoundPaddingLeft() - getCompoundPaddingRight();  final CharSequence text=getText();  if (text == null || text.length() <= 0 || availableHeightPixels <= 0 || availableWidthPixels <= 0 || mMaxTextSizePixels <= 0) {    return;  }  float targetTextSizePixels=mMaxTextSizePixels;  int targetTextHeightPixels=getTextHeightPixels(text,availableWidthPixels,targetTextSizePixels);  while (targetTextHeightPixels > availableHeightPixels && targetTextSizePixels > mMinTextSizePixels) {    targetTextSizePixels=Math.max(targetTextSizePixels - 2,mMinTextSizePixels);    targetTextHeightPixels=getTextHeightPixels(text,availableWidthPixels,targetTextSizePixels);  }  if (getEllipsize() != null && targetTextSizePixels == mMinTextSizePixels && targetTextHeightPixels > availableHeightPixels) {    TextPaint textPaintCopy=new TextPaint(getPaint());    textPaintCopy.setTextSize(targetTextSizePixels);    StaticLayout staticLayout=new StaticLayout(text,textPaintCopy,availableWidthPixels,Layout.Alignment.ALIGN_NORMAL,mLineSpacingMultiplier,mLineSpacingExtra,false);    if (staticLayout.getLineCount() > 0) {      int lastLine=staticLayout.getLineForVertical(availableHeightPixels) - 1;      if (lastLine >= 0) {        int startOffset=staticLayout.getLineStart(lastLine);        int endOffset=staticLayout.getLineEnd(lastLine);        float lineWidthPixels=staticLayout.getLineWidth(lastLine);        float ellipseWidth=textPaintCopy.measureText(mEllipsis);        while (availableWidthPixels < lineWidthPixels + ellipseWidth) {          endOffset--;          lineWidthPixels=textPaintCopy.measureText(text.subSequence(startOffset,endOffset + 1).toString());        }        setText(text.subSequence(0,endOffset) + mEllipsis);      }    }  }  super.setTextSize(TypedValue.COMPLEX_UNIT_PX,targetTextSizePixels);  super.setLineSpacing(mLineSpacingExtra,mLineSpacingMultiplier);}  }
class C{  public static Boolean booleanValue(Object value){  if (value == null || value instanceof Boolean) {    return (Boolean)value;  } else   if ("true".equals(value)) {    return Boolean.TRUE;  } else   if ("false".equals(value)) {    return Boolean.FALSE;  } else {    return null;  }}  }
class C{  static public void syncRecomputedArchive2Summary(String dataSetName,String algorithmName,BlastMode blastMode,String parameters,IConnector connector,DataTable table,int additionalReads) throws IOException {  String[] classifications=connector.getAllClassificationNames();  table.clear();  table.setCreator(ProgramProperties.getProgramName());  table.setCreationDate((new Date()).toString());  table.setAlgorithm(ClassificationType.Taxonomy.toString(),algorithmName);  table.setParameters(parameters);  table.setTotalReads(connector.getNumberOfReads());  table.setAdditionalReads(additionalReads);  table.setSamples(new String[]{dataSetName},new Long[]{connector.getUId()},new Integer[]{connector.getNumberOfReads()},new BlastMode[]{blastMode});  for (  String classification : classifications) {    IClassificationBlock block=connector.getClassificationBlock(classification);    if (block != null)     syncClassificationBlock2Summary(0,1,block,table);  }}  }
class C{  protected String objectKey(Object id){  return RedisKeys.format(CLASSNAMES,id.toString());}  }
class C{  public JobManagerException(){  super();}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=translators.clone();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_WIN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390001,value0,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200718,skillcaster,skillname);}  }
class C{  public void create(String xliffPath,String skeletonPath,LocaleId srcLoc,LocaleId trgLoc,String dataType,String original,String message){  if (writer != null) {    close();  }  this.skeletonPath=skeletonPath;  this.original=original;  this.srcLoc=srcLoc;  this.trgLoc=trgLoc;  this.dataType=dataType;  if (outputStream == null) {    writer=new XMLWriter(xliffPath);  } else   if (outputStream != null) {    writer=new XMLWriter(new OutputStreamWriter(outputStream,StandardCharsets.UTF_8));  }  writer.writeStartDocument();  writer.writeStartElement("xliff");  writer.writeAttributeString("version","1.2");  writer.writeAttributeString("xmlns",Namespaces.NS_XLIFF12);  writer.writeAttributeString("xmlns:okp",Namespaces.NS_XLIFFOKAPI);  if (params.getIncludeIts()) {    writer.writeAttributeString("xmlns:" + Namespaces.ITS_NS_PREFIX,Namespaces.ITS_NS_URI);    writer.writeAttributeString("xmlns:" + Namespaces.ITSXLF_NS_PREFIX,Namespaces.ITSXLF_NS_URI);    writer.writeAttributeString(Namespaces.ITS_NS_PREFIX + ":version","2.0");  }  writeAnnotatorsRefIfNeeded();  if (!Util.isEmpty(message)) {    writer.writeLineBreak();    writer.writeComment(message,false);  }  writer.writeLineBreak();  itsContForUnit=new ITSContent(xliffCont.getCharsetEncoder(),false,true);  itsContForSrcCont=new ITSContent(xliffCont.getCharsetEncoder(),false,true);  itsContForTrgCont=new ITSContent(xliffCont.getCharsetEncoder(),false,true);  itsContForAltTrgCont=new ITSContent(xliffCont.getCharsetEncoder(),false,true);  annotatorsRef=new Stack<String>();  annotatorsRef.push(null);  needAnnotatorsRef=false;}  }
class C{  public void tryToRestoreTabStateForUrl(String url){  if (isSessionRestoreInProgress())   mTabSaver.restoreTabStateForUrl(url);}  }
class C{  public static SinkRecord spoofSinkRecord(String topic,String value){  return spoofSinkRecord(topic,"sink_task_test_field",value);}  }
class C{  public YCCircleFlowIndicator(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.YCCircleFlowIndicator);  int activeType=a.getInt(R.styleable.YCCircleFlowIndicator_activeType,STYLE_FILL);  int activeDefaultColor=0xFFFFFFFF;  int activeColor=a.getColor(R.styleable.YCCircleFlowIndicator_activeColor,activeDefaultColor);  int inactiveType=a.getInt(R.styleable.YCCircleFlowIndicator_inactiveType,STYLE_STROKE);  int inactiveDefaultColor=0x44FFFFFF;  int inactiveColor=a.getColor(R.styleable.YCCircleFlowIndicator_inactiveColor,inactiveDefaultColor);  radius=a.getDimension(R.styleable.YCCircleFlowIndicator_radius,4.0f);  circleSeparation=a.getDimension(R.styleable.YCCircleFlowIndicator_circleSeparation,2 * radius + radius);  activeRadius=a.getDimension(R.styleable.YCCircleFlowIndicator_activeRadius,0.5f);  fadeOutTime=a.getInt(R.styleable.YCCircleFlowIndicator_fadeOut,0);  mCentered=a.getBoolean(R.styleable.YCCircleFlowIndicator_centered,false);  initColors(activeColor,inactiveColor,activeType,inactiveType);}  }
class C{  public static final void show(Window owner,World world){  EditWorldDialog ewd=new EditWorldDialog(owner,world);  ewd.setLocationRelativeTo(owner);  ewd.setVisible(true);  if (!ewd.canceled) {synchronized (world) {      ewd.pnlWorld.setWorld(world);    }  }}  }
class C{  static Spannable buildSpannable(SuggestionAnswer.ImageLine line,Paint.FontMetrics metrics,float density){  SpannableStringBuilder builder=new SpannableStringBuilder();  int maxTextHeightSp=getMaxTextHeightSp(line);  List<SuggestionAnswer.TextField> textFields=line.getTextFields();  for (int i=0; i < textFields.size(); i++) {    appendAndStyleText(builder,textFields.get(i),maxTextHeightSp,metrics,density);  }  if (line.hasAdditionalText()) {    builder.append("  ");    SuggestionAnswer.TextField additionalText=line.getAdditionalText();    appendAndStyleText(builder,additionalText,maxTextHeightSp,metrics,density);  }  if (line.hasStatusText()) {    builder.append("  ");    SuggestionAnswer.TextField statusText=line.getStatusText();    appendAndStyleText(builder,statusText,maxTextHeightSp,metrics,density);  }  return builder;}  }
class C{  public void showSyncSignInNotification(){  Intent prefIntent=PreferencesLauncher.createIntentForSettingsPage(mApplicationContext,mAccountManagementFragment.getCanonicalName());  String title=mApplicationContext.getResources().getString(R.string.firstrun_signed_in_title);  String syncPromo=title + " " + mApplicationContext.getResources().getString(R.string.firstrun_signed_in_description);  mNotificationController.showNotification(NotificationConstants.NOTIFICATION_ID_SIGNED_IN,title,syncPromo,prefIntent);}  }
class C{  public static double regularizedGammaQ(double a,double x){  return regularizedGammaQ(a,x,DEFAULT_EPSILON,Integer.MAX_VALUE);}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  @Override public void invalidateView(){  mViewBinder.invalidateView();}  }
class C{  public void applyInverseTo(final double[] in,final double[] out){  final double x=in[0];  final double y=in[1];  final double z=in[2];  final double s=q1 * x + q2 * y + q3 * z;  final double m0=-q0;  out[0]=2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x;  out[1]=2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y;  out[2]=2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z;}  }
class C{  public static boolean isGZipFile(String file){  String ext=getExtension(file);  return "gz".equals(ext) || "z".equals(ext);}  }
class C{  public JSearchPanel(Visualization vis,String field){  this(vis,Visualization.ALL_ITEMS,field,true);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static JSON from(InputStream inStream) throws IOException {  Assert.notNull("inStream",inStream);  String jsonString=IOUtils.toString(inStream,"UTF-8");  return from(jsonString);}  }
class C{  @Override public XSNamespaceItem item(int index){  if (index < 0 || index >= fGrammarCount) {    return null;  }  return fGrammarList[index];}  }
class C{  RestAnalyzer(HttpConfigAspect aspect){  this.aspect=aspect;}  }
class C{  public Builder position(String position){  this.position=position;  return this;}  }
class C{  protected MessagesGetChatUsersQueryWithChatIdsFields chatIds(List<Integer> value){  return unsafeParam("chat_ids",value);}  }
class C{  @Override public boolean hasNext(){  return dataIter.hasNext();}  }
class C{  @Override public void execute() throws Exception {  HttpClient client=null;  GetMethod get=null;  processGaugeMetric("dynomite__health",state.isHealthy() ? 1L : 0L);  try {    client=new HttpClient();    client.getHttpConnectionManager().getParams().setConnectionTimeout(2000);    get=new GetMethod(ServerMetricsUrl.get());    int statusCode=client.executeMethod(get);    if (!(statusCode == 200)) {      Logger.error("Got non 200 status code from " + ServerMetricsUrl.get());      return;    }    String response=get.getResponseBodyAsString();    if (Logger.isDebugEnabled()) {      Logger.debug("Received response from " + ServerMetricsUrl.get() + "\n"+ response);    }    if (!response.isEmpty()) {      processJsonResponse(response);    } else {      Logger.error("Cannot parse empty response from " + ServerMetricsUrl.get());    }  } catch (  Exception e) {    Logger.error("Failed to get metrics from url: " + ServerMetricsUrl.get(),e);    e.printStackTrace();  }catch (  Throwable t) {    Logger.error("FAILED to get metrics from url: " + ServerMetricsUrl.get(),t);    t.printStackTrace();  } finally {    if (get != null) {      get.releaseConnection();    }    if (client != null) {      client.getHttpConnectionManager().closeIdleConnections(10);    }  }}  }
class C{  public Socket(String uri) throws URISyntaxException {  this(uri,null);}  }
class C{  public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,int... audioIds){  super(client,"audio.moveToAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  audioIds(audioIds);}  }
class C{  private void createLeftOver(){  int lineLengthBytes=currentLastBytePos + 1;  if (lineLengthBytes > 0) {    leftOver=new byte[lineLengthBytes];    System.arraycopy(data,0,leftOver,0,lineLengthBytes);  } else {    leftOver=null;  }  currentLastBytePos=-1;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public int removeEntryIndexedField(IEntryHolder eh,ArrayList<IObjectInfo<IEntryCacheInfo>> deletedBackRefs,K fieldValue,int refpos,boolean removeIndexedValue,IEntryCacheInfo pEntry){  if (_fifoGroupsIndexExtention == null || !removeIndexedValue || fieldValue == null)   return removeEntryIndexedField_impl(eh,deletedBackRefs,fieldValue,refpos,removeIndexedValue,pEntry); else   return _fifoGroupsIndexExtention.removeEntryIndexedField(eh,deletedBackRefs,fieldValue,refpos,removeIndexedValue,pEntry);}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  public static PokkitMaterialData fromNukkit(int nukkitId,int nukkitDamage){  return new PokkitMaterialData(nukkitId,nukkitDamage);}  }
class C{  public int readLocations(long position,IInputReader reader,int classId,ListOfLongs list) throws IOException {  reader.seek(position);  final int numberOfClasses=reader.readInt();  for (int i=0; i < numberOfClasses; i++) {    final int currentId=reader.readInt();    reader.readInt();    final int count=reader.readInt();    if (currentId == classId) {      for (int z=0; z < count; z++) {        list.add(reader.readLong());      }    } else     reader.skipBytes(count * 8);  }  return list.size();}  }
class C{  public DistributionDocument(int iNeighbourhoodWindow){  Graph=new DistributionGraph();  NeighbourhoodWindow=iNeighbourhoodWindow;}  }
class C{  private void printTo(Body b,PrintWriter out){  b.validate();  printStatementsInBody(b,out);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public boolean hasNext(){  return (iterator != null);}  }
class C{  public void softAssertion(String message){  currentTest.get().softAssertion(message);}  }
class C{  public void startIndexSvnRepoJobs(String uniquename){  try {    Scheduler scheduler=Singleton.getScheduler();    JobDetail job=newJob(IndexSvnRepoJob.class).withIdentity("updateindex-svn-" + uniquename).build();    SimpleTrigger trigger=newTrigger().withIdentity("updateindex-svn-" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();    job.getJobDataMap().put("REPOLOCATIONS",this.REPOLOCATION);    job.getJobDataMap().put("LOWMEMORY",this.LOWMEMORY);    scheduler.scheduleJob(job,trigger);    scheduler.start();  } catch (  SchedulerException ex) {    LOGGER.severe(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }}  }
class C{  void moveData(){  inBuffer.reset(outBuffer.getData(),outBuffer.getLength());}  }
class C{  public CompositeAction(Visualization vis,long duration){  super(vis,duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  public boolean containsValue(String key){  return options.get(key) != null;}  }
class C{  private boolean matchesFilter(FunctionName functionName,List<FunctionNameFilterInterface> functionNameFilterList){  for (  FunctionNameFilterInterface filter : functionNameFilterList) {    if (filter.accept(functionName)) {      return true;    }  }  return false;}  }
class C{  public UrlValidator(long options){  this(null,null,options);}  }
class C{  public List<Configuration> loadConfigurationsNoJars(String name) throws IOException {  return loadResourcesWithName(name).filter(null).map(null).collect(Collectors.toList());}  }
class C{  private void ongetTokenBtnClicked(final ActionEvent ignored){  tokenField.setDisable(false);  Browser.openUrl(GoogleUserCredentialProvider.LOGIN_URL);}  }
class C{  protected void addNotation(String name,XMLResourceIdentifier identifier,Augmentations augmentations){  Notation not=new Notation();  not.name=name;  not.systemId=identifier.getLiteralSystemId();  not.publicId=identifier.getPublicId();  not.baseURI=identifier.getBaseSystemId();  not.expandedSystemId=identifier.getExpandedSystemId();  not.augmentations=augmentations;  fNotations.add(not);}  }
class C{  public IStoredListIterator<T> next(IStoredListIterator<T> slh){  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);  if (slnext == null)   slh.release();  return slnext;}  }
class C{  public void entity(String name,int value){  theEntities.put(name,value);}  }
class C{  public static void writeObject(OutputStream out,Object obj) throws IOException {  ObjectOutputStream objOut=new ObjectOutputStream(out);  objOut.writeObject(obj);  objOut.flush();}  }
class C{  @Override public boolean isPhantom(){  return isPhantom;}  }
class C{  public static String md5File(final InputStream inputStream){  String result=null;  if (inputStream != null) {    try {      MessageDigest md=MessageDigest.getInstance("MD5");      byte[] buffer=new byte[Constant.Capacity.BYTES_PER_KB];      int readCount=0;      while ((readCount=inputStream.read(buffer,0,buffer.length)) != -1) {        md.update(buffer,0,readCount);      }      result=StringUtil.byteToHexString(md.digest());    } catch (    Exception e) {      e.printStackTrace();    } finally {      try {        inputStream.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return result;}  }
class C{  public ImageRecordReader(int height,int width){  super(height,width,1,null,null);}  }
class C{  public GroupsSearchQuery countryId(Integer value){  return unsafeParam("country_id",value);}  }
class C{  private FTPFile parseLine(String line) throws FTPListParseException {  ArrayList list=new ArrayList();  StringTokenizer st=new StringTokenizer(line,";");  while (st.hasMoreElements()) {    String aux=st.nextToken().trim();    if (aux.length() > 0) {      list.add(aux);    }  }  if (list.size() == 0) {    throw new FTPListParseException();  }  String name=(String)list.remove(list.size() - 1);  Properties facts=new Properties();  for (Iterator i=list.iterator(); i.hasNext(); ) {    String aux=(String)i.next();    int sep=aux.indexOf('=');    if (sep == -1) {      throw new FTPListParseException();    }    String key=aux.substring(0,sep).trim();    String value=aux.substring(sep + 1,aux.length()).trim();    if (key.length() == 0 || value.length() == 0) {      throw new FTPListParseException();    }    facts.setProperty(key,value);  }  int type;  String typeString=facts.getProperty("type");  if (typeString == null) {    throw new FTPListParseException();  } else   if ("file".equalsIgnoreCase(typeString)) {    type=FTPFile.TYPE_FILE;  } else   if ("dir".equalsIgnoreCase(typeString)) {    type=FTPFile.TYPE_DIRECTORY;  } else   if ("cdir".equalsIgnoreCase(typeString)) {    return null;  } else   if ("pdir".equalsIgnoreCase(typeString)) {    return null;  } else {    return null;  }  Date modifiedDate=null;  String modifyString=facts.getProperty("modify");  if (modifyString != null) {    modifyString+=" +0000";    try {synchronized (MLSD_DATE_FORMAT_1) {        modifiedDate=MLSD_DATE_FORMAT_1.parse(modifyString);      }    } catch (    ParseException e1) {      try {synchronized (MLSD_DATE_FORMAT_2) {          modifiedDate=MLSD_DATE_FORMAT_2.parse(modifyString);        }      } catch (      ParseException e2) {        ;      }    }  }  long size=0;  String sizeString=facts.getProperty("size");  if (sizeString != null) {    try {      size=Long.parseLong(sizeString);    } catch (    NumberFormatException e) {      ;    }    if (size < 0) {      size=0;    }  }  FTPFile ret=new FTPFile();  ret.setType(type);  ret.setModifiedDate(modifiedDate);  ret.setSize(size);  ret.setName(name);  return ret;}  }
class C{  public void addInlines(String inlineCode,String group){  ParamValidationUtil.validateParamNotNull(inlineCode,"inlineCode");  ParamValidationUtil.validateParamNotNull(group,"group");  if (!inlineMap.containsKey(group)) {    inlineMap.put(group,new LinkedHashSet<String>());  }  inlineMap.get(group).add(inlineCode);}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public final void startAliveTimer(){  ProcessConfiguration processConfiguration=getConfigurationController().getProcessConfiguration();  aliveTimer.setInterval(processConfiguration.getAliveInterval());}  }
class C{  private void createForLoop2(polyglot.ast.For forStmt){  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  Iterator initsIt=forStmt.inits().iterator();  while (initsIt.hasNext()) {    createStmt((polyglot.ast.Stmt)initsIt.next());  }  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop2);  polyglot.ast.Expr condition=forStmt.cond();  if (condition != null) {    createBranchingExpr(condition,noop1,false);  }  createStmt(forStmt.body());  body.getUnits().add((condControlNoop.pop()));  if (labelMap != null && labelMap.containsKey(forStmt)) {    body.getUnits().add(labelMap.get(forStmt));  }  Iterator itersIt=forStmt.iters().iterator();  while (itersIt.hasNext()) {    createStmt((polyglot.ast.Stmt)itersIt.next());  }  soot.jimple.Stmt goto1=soot.jimple.Jimple.v().newGotoStmt(noop2);  body.getUnits().add(goto1);  body.getUnits().add(noop1);  body.getUnits().add((endControlNoop.pop()));}  }
class C{  public static Zmat o(Zdiagmat D,Zmat A) throws JampackException {  if (D.order != A.nrow || D.order != A.ncol) {    throw new JampackException("Matrices not conformable for subtraction");  }  Zmat C=new Zmat(A);  for (int i=0; i < D.order; i++) {    C.re[i][i]=D.re[i] - C.re[i][i];    C.im[i][i]=D.im[i] - C.im[i][i];  }  return C;}  }
class C{  public <T>T toObject(Class<T> targetClass) throws IOException {  Assert.notNull("targetClass",targetClass);  try {    return mapper.readValue(jsonString,targetClass);  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  private void broadcastToAllianceMembers(final Player player){  player.getPlayerAlliance2().sendPacket(new SM_MESSAGE(player,message,type));}  }
class C{  private boolean isJMXEnabled(){  return Boolean.parseBoolean(System.getProperty(SystemProperties.JMX_ENABLED_PROP,SystemProperties.JMX_ENABLED_DEFAULT_VALUE));}  }
class C{  private boolean addFlowsTo(int code,IVarAbstraction qv){  GeometricManager gm=flowto.get(qv);  if (gm == null) {    gm=new GeometricManager();    flowto.put((FullSensitiveNode)qv,gm);  }  if (gm.addNewFigure(code,pres) != null) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysHit_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200939,skilltarget,skillcaster,skillname);}  }
class C{  public static boolean containsScript(String str){  if (str.length() > 0) {    for (    String scriptPrefix : SCRIPT_PREFIXES) {      if (str.contains(scriptPrefix)) {        return true;      }    }  }  return false;}  }
class C{  public static double exp(double x){  return exp(x,0.0,null);}  }
class C{  public static List<Entry> loadEntriesFromFile(String path){  File sdcard=Environment.getExternalStorageDirectory();  File file=new File(sdcard,path);  List<Entry> entries=new ArrayList<>();  @SuppressWarnings("resource") BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(file));    String line;    while ((line=br.readLine()) != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (br != null)     try {      br.close();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  return entries;}  }
class C{  public S1Interval(double lo,double hi){  this(lo,hi,false);}  }
class C{  private static void startIntentIfPossible(Context context,Intent intent){  if (isActivityAvailableForIntent(context,intent)) {    context.startActivity(intent);  }}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public static void requestPermissions(CordovaPlugin plugin,int requestCode,String[] permissions){  try {    Method requestPermission=CordovaInterface.class.getDeclaredMethod("requestPermissions",CordovaPlugin.class,int.class,String[].class);    requestPermission.invoke(plugin.cordova,plugin,requestCode,permissions);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to request permissions " + Arrays.toString(permissions));    deliverPermissionResult(plugin,requestCode,permissions);  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when requesting permissions " + Arrays.toString(permissions),illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when requesting permissions " + Arrays.toString(permissions),invocationTargetException);  }}  }
class C{  public V valueAt(int index){  return (V)mArray[(index << 1) + 1];}  }
class C{  public boolean isUseCookies(){  return cookies;}  }
class C{  public static final void sort(int[] a,Object[] b,int begin,int end){  int length=end - begin;  if (length < SORT_THRESHOLD) {    insertionsort(a,b,begin,end - 1);    return;  }  int[] ks=new int[length];  Object[] vs=new Object[length];  for (int i=0, idx=begin; i < length; ++i, ++idx) {    ks[i]=a[idx];    vs[i]=b[idx];  }  mergesort(ks,a,vs,b,begin,end,-begin);}  }
class C{  public static ProbeItemDescriptor discreteFillItem(String name,String description,ItemValueFormatter formatter){  return discreteOutlineItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR);}  }
class C{  public PagesGetQuery needHtml(Boolean value){  return unsafeParam("need_html",value);}  }
class C{  public static final BodyFixture show(Window owner){  AddConvexHullFixtureDialog dialog=new AddConvexHullFixtureDialog(owner);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    Convex convex=dialog.pnlPolygon.getShape();    BodyFixture fixture=dialog.fixture;    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    BodyFixture newFixture=new BodyFixture(convex);    newFixture.setUserData(fixture.getUserData());    newFixture.setDensity(fixture.getDensity());    newFixture.setFilter(fixture.getFilter());    newFixture.setFriction(fixture.getFriction());    newFixture.setRestitution(fixture.getRestitution());    newFixture.setSensor(fixture.isSensor());synchronized (AddConvexFixtureDialog.class) {      AddConvexFixtureDialog.N++;    }    return newFixture;  }  return null;}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private boolean processKeyUp(int keyCode){  if (keyCode == KeyEvent.KEYCODE_DEL) {    if (mInKbMode) {      if (!mTypedTimes.isEmpty()) {        int deleted=deleteLastTypedKey();        String deletedKeyStr;        if (deleted == getAmOrPmKeyCode(AM)) {          deletedKeyStr=mAmText;        } else         if (deleted == getAmOrPmKeyCode(PM)) {          deletedKeyStr=mPmText;        } else {          deletedKeyStr=String.format("%d",getValFromKeyCode(deleted));        }        announceForAccessibility(String.format(mDeletedKeyFormat,deletedKeyStr));        updateDisplay(true);      }    }  } else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourView && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {    if (!mInKbMode) {      if (mRadialTimePickerView == null) {        Log.e(TAG,"Unable to initiate keyboard mode, TimePicker was null.");        return true;      }      mTypedTimes.clear();      tryStartingKbMode(keyCode);      return true;    }    if (addKeyIfLegal(keyCode)) {      updateDisplay(false);    }    return true;  }  return false;}  }
class C{  public SimpleLocator element2Locator(Element e){  if (!(e instanceof ElementImpl))   return null;  SimpleLocator l=new SimpleLocator();  return element2Locator(e,l) ? l : null;}  }
class C{  protected AdsGetRejectionReasonQuery adId(int value){  return unsafeParam("ad_id",value);}  }
class C{  public static void e(String tag,String msg,Exception e){  if (LOG_ENABLE) {    Log.e(tag,buildMsg(msg),e);  }}  }
class C{  private synchronized boolean isDone(){  return done;}  }
class C{  public Builder rows(int rows){  this.rows=rows;  return this;}  }
class C{  public void store(String path,Storable obj) throws IOException {  store(new File(path),obj);}  }
class C{  public SLDDataFlavour(String mimeType) throws ClassNotFoundException {  super(mimeType);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public EmbeddedSpaceConfigurer attributeStore(AttributeStore attributeStore){  validate();  factoryBean.attributeStore(attributeStore);  return this;}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null);}  }
class C{  private void deleteLoginData(final LoginType type){  deleteLoginData(type,true);}  }
class C{  public GroupsEditQuery marketWiki(Integer value){  return unsafeParam("market_wiki",value);}  }
class C{  public boolean replaceNext(String regularExpression,String replaceText){  System.err.println("not implemented");  return false;}  }
class C{  public void queryAddASBSet(String name,int rank,int hunterType){  mHelper.queryAddASBSet(name,rank,hunterType);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Matrix4f) || o == null) {    return false;  }  if (this == o) {    return true;  }  Matrix4f comp=(Matrix4f)o;  if (Float.compare(m00,comp.m00) != 0) {    return false;  }  if (Float.compare(m01,comp.m01) != 0) {    return false;  }  if (Float.compare(m02,comp.m02) != 0) {    return false;  }  if (Float.compare(m03,comp.m03) != 0) {    return false;  }  if (Float.compare(m10,comp.m10) != 0) {    return false;  }  if (Float.compare(m11,comp.m11) != 0) {    return false;  }  if (Float.compare(m12,comp.m12) != 0) {    return false;  }  if (Float.compare(m13,comp.m13) != 0) {    return false;  }  if (Float.compare(m20,comp.m20) != 0) {    return false;  }  if (Float.compare(m21,comp.m21) != 0) {    return false;  }  if (Float.compare(m22,comp.m22) != 0) {    return false;  }  if (Float.compare(m23,comp.m23) != 0) {    return false;  }  if (Float.compare(m30,comp.m30) != 0) {    return false;  }  if (Float.compare(m31,comp.m31) != 0) {    return false;  }  if (Float.compare(m32,comp.m32) != 0) {    return false;  }  if (Float.compare(m33,comp.m33) != 0) {    return false;  }  return true;}  }
class C{  @CheckReturnValue public Notice withWorld(World world){  this.world=world;  return this;}  }
class C{  @Deprecated public static void track(File file,Object marker,FileDeleteStrategy deleteStrategy){  theInstance.track(file,marker,deleteStrategy);}  }
class C{  public static boolean isZipCode(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedZip=stripCharsInBag(s,ZipCodeDelimiters);  return (isInteger(normalizedZip) && ((normalizedZip.length() == digitsInZipCode1) || (normalizedZip.length() == digitsInZipCode2)));}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0d,0.0183156388887d,0.0915781944437d,0.238103305554d,0.433470120367d,0.62883693518,0.78513038703d,0.99716023388d,0.999999998077};}  }
class C{  @Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  executor.execute(this,space,txn,readModifier,max);}  }
class C{  public static byte[] encode(byte[] data,byte[] key) throws Exception {  SecretKey securekey=new SecretKeySpec(key,"DESede");  IvParameterSpec zeroIv=new IvParameterSpec(iv);  Cipher cipher=Cipher.getInstance("DESede/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,securekey,zeroIv);  return cipher.doFinal(data);}  }
class C{  public boolean canReuseProcessHandler(){  if (myCurrentSession == null || myCurrentSession.isProcessTerminated()) {    return false;  }  BuildSelection buildSelection=myContext.getBuildSelection();  assert buildSelection != null : "Build must have completed before results are analyzed";  return buildSelection.mode == BuildMode.HOT && (myBuildInfo.hasNoChanges() || myBuildInfo.canHotswap());}  }
class C{  private boolean limitTranslation(){  RectF bounds=mTransformedImageBounds;  bounds.set(mImageBounds);  mActiveTransform.mapRect(bounds);  float offsetLeft=getOffset(bounds.left,bounds.width(),mViewBounds.width());  float offsetTop=getOffset(bounds.top,bounds.height(),mViewBounds.height());  if (offsetLeft != bounds.left || offsetTop != bounds.top) {    mActiveTransform.postTranslate(offsetLeft - bounds.left,offsetTop - bounds.top);    return true;  }  return false;}  }
class C{  public boolean isOwnerMemberHasSyncReplication(){  boolean isSyncReplEnabled=m_IsSyncReplicationEnabled;  if (!isSyncReplEnabled) {    ReplicationPolicy.ReplicationPolicyDescription rp=m_ReplMemberPolicyDescTable.get(m_OwnMemberName);    if (rp != null && rp.replTransmissionPolicies != null) {      for (      ReplicationTransmissionPolicy rtp : rp.replTransmissionPolicies) {        if (!rtp.m_DisableTransmission && rtp.isSyncReplication()) {          isSyncReplEnabled=true;          break;        }      }    }  }  return isSyncReplEnabled;}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public void validate(){  if (isEmpty()) {    setError(mAlertMessage);  } else {    if (getError() != null)     setError(null);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_DODGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1250219,value0,value1);}  }
class C{  private void outString(DataOutputStream dos,String s) throws IOException {  dos.writeByte((byte)s.length());  for (int i=0; i < s.length(); i++) {    dos.writeChar(s.charAt(i));  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntObjectHashMap)) {    return false;  }  TIntObjectHashMap that=(TIntObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @VisibleForTesting RequestGenerator createRequestGenerator(Context context){  return ((ChromeApplication)context.getApplicationContext()).createOmahaRequestGenerator();}  }
class C{  public static Bucket createCompleteBucket(Experiment experiment,boolean isControl){  return createCompleteBucket(experiment).setControl(isControl);}  }
class C{  @Override public String leaveDTD(){  if (_writer == _dtdWriter) {    _line.append(_text);    _text=new StringBuffer(20);    flushLine(false);    _writer=_docWriter;    return _dtdWriter.toString();  }  return null;}  }
class C{  public Router add(Route route){  if (route == null)   throw new IllegalArgumentException();  String requestType=route.requestType();  if (routes.containsKey(requestType))   routes.get(requestType).add(route); else {    List<Route> routes=new ArrayList<>();    routes.add(route);    this.routes.put(requestType,routes);  }  return this;}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  public WrongMessageDigestException(String s){  super(s);}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();}  }
class C{  @Override public int validate(QName[] children,int offset,int length){  if (DEBUG_VALIDATE_CONTENT)   System.out.println("DFAContentModel#validateContent");  if (length == 0) {    if (DEBUG_VALIDATE_CONTENT) {      System.out.println("!!! no children");      System.out.println("elemMap=" + fElemMap);      for (int i=0; i < fElemMap.length; i++) {        String uri=fElemMap[i].uri;        String localpart=fElemMap[i].localpart;        System.out.println("fElemMap[" + i + "]="+ uri+ ","+ localpart+ " ("+ uri+ ", "+ localpart+ ')');      }      System.out.println("EOCIndex=" + fEOCString);    }    return fEmptyContentIsValid ? -1 : 0;  }  int curState=0;  for (int childIndex=0; childIndex < length; childIndex++) {    final QName curElem=children[offset + childIndex];    if (fMixed && curElem.localpart == null) {      continue;    }    int elemIndex=0;    for (; elemIndex < fElemMapSize; elemIndex++) {      int type=fElemMapType[elemIndex] & 0x0f;      if (type == XMLContentSpec.CONTENTSPECNODE_LEAF) {        if (fElemMap[elemIndex].rawname == curElem.rawname) {          break;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY) {        String uri=fElemMap[elemIndex].uri;        if (uri == null || uri == curElem.uri) {          break;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {        if (curElem.uri == null) {          break;        }      } else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {        if (fElemMap[elemIndex].uri != curElem.uri) {          break;        }      }    }    if (elemIndex == fElemMapSize) {      if (DEBUG_VALIDATE_CONTENT) {        System.out.println("!!! didn't find it");        System.out.println("curElem : " + curElem);        for (int i=0; i < fElemMapSize; i++) {          System.out.println("fElemMap[" + i + "] = "+ fElemMap[i]);          System.out.println("fElemMapType[" + i + "] = "+ fElemMapType[i]);        }      }      return childIndex;    }    curState=fTransTable[curState][elemIndex];    if (curState == -1) {      if (DEBUG_VALIDATE_CONTENT)       System.out.println("!!! not a legal transition");      return childIndex;    }  }  if (DEBUG_VALIDATE_CONTENT)   System.out.println("curState=" + curState + ", childCount="+ length);  if (!fFinalStateFlags[curState])   return length;  return -1;}  }
class C{  public Stream<Resource> loadResourcesWithName(String name) throws IOException {  String resourceName=RESOURCE_LOADER_PREFIX + name;  LOG.debug("Attempting to load resources named {}",resourceName);  return Arrays.stream(resolver.getResources(resourceName)).peek(null);}  }
class C{  private void createSolverWidgetFromComponent(@NotNull NlComponent component){  ConstraintWidget widget=myWidgetsScene.getWidget(component);  if (widget != null && isConstraintLayout(component)) {    if (!(widget instanceof ConstraintWidgetContainer)) {      if (widget instanceof WidgetContainer) {        ConstraintWidgetContainer container=new ConstraintWidgetContainer();        myWidgetsScene.transformContainerToContainer((WidgetContainer)widget,container);        setupConstraintWidget(component,container);        widget=container;      } else {        myWidgetsScene.removeWidget(widget);        widget=null;      }    }  }  if (widget == null) {    boolean dropWidget=false;    if (USE_GUIDELINES_DURING_DND) {      if (myDragDropWidget != null) {        WidgetCompanion companion=(WidgetCompanion)myDragDropWidget.getCompanionWidget();        if (companion.getWidgetModel() == component) {          widget=myDragDropWidget;          if (component.isOrHasSuperclass(CLASS_VIEWGROUP) || isDataBindingLayout(component)) {            widget=new WidgetContainer();          }          widget.setCompanionWidget(null);          dropWidget=true;        }      }    }    if (widget == null) {      if (isConstraintLayout(component)) {        widget=new ConstraintWidgetContainer();      } else       if (component.getTagName().equalsIgnoreCase(SdkConstants.CONSTRAINT_LAYOUT_GUIDELINE)) {        widget=new Guideline();        String orientation=component.getAttribute(SdkConstants.NS_RESOURCES,SdkConstants.ATTR_ORIENTATION);        if (orientation != null) {          if (SdkConstants.ATTR_GUIDELINE_ORIENTATION_VERTICAL.equalsIgnoreCase(orientation)) {            Guideline guideline=(Guideline)widget;            guideline.setOrientation(Guideline.VERTICAL);          }        }      } else {        if (component.isOrHasSuperclass(CLASS_VIEWGROUP) || isDataBindingLayout(component) || component.getChildCount() > 0) {          widget=new WidgetContainer();        } else {          widget=new ConstraintWidget();        }      }    }    setupConstraintWidget(component,widget);    myWidgetsScene.setWidget(widget);    if (USE_GUIDELINES_DURING_DND) {      if (dropWidget) {        connectDroppedWidget();        myDragDropWidget=null;        mySelection.add(widget);      }    }  }  for (  NlComponent child : component.getChildren()) {    createSolverWidgetFromComponent(child);  }}  }
class C{  public static void teleport(TeleporterTemplate template,int locId,Player player,Npc npc,TeleportAnimation animation){  TribeClass tribe=npc.getTribe();  Race race=player.getRace();  if (tribe.equals(TribeClass.FIELD_OBJECT_LIGHT) && race.equals(Race.ASMODIANS) || (tribe.equals(TribeClass.FIELD_OBJECT_DARK) && race.equals(Race.ELYOS))) {    return;  }  if (template.getTeleLocIdData() == null) {    log.info(String.format("Missing locId for this teleporter at teleporter_templates.xml with locId: %d",locId));    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);    if (player.isGM()) {      PacketSendUtility.sendMessage(player,"Missing locId for this teleporter at teleporter_templates.xml with locId: " + locId);    }    return;  }  TeleportLocation location=template.getTeleLocIdData().getTeleportLocation(locId);  if (location == null) {    log.info(String.format("Missing locId for this teleporter at teleporter_templates.xml with locId: %d",locId));    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);    if (player.isGM()) {      PacketSendUtility.sendMessage(player,"Missing locId for this teleporter at teleporter_templates.xml with locId: " + locId);    }    return;  }  TelelocationTemplate locationTemplate=DataManager.TELELOCATION_DATA.getTelelocationTemplate(locId);  if (locationTemplate == null) {    log.info(String.format("Missing info at teleport_location.xml with locId: %d",locId));    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);    if (player.isGM()) {      PacketSendUtility.sendMessage(player,"Missing info at teleport_location.xml with locId: " + locId);    }    return;  }  if (location.getRequiredQuest() > 0) {    QuestState qs=player.getQuestStateList().getQuestState(location.getRequiredQuest());    if (qs == null || qs.getStatus() != QuestStatus.COMPLETE) {      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NEED_FINISH_QUEST);      return;    }  }  if (!checkKinahForTransportation(location,player)) {    return;  }  if (location.getType().equals(TeleportType.FLIGHT)) {    if (SecurityConfig.ENABLE_FLYPATH_VALIDATOR) {      FlyPathEntry flypath=DataManager.FLY_PATH.getPathTemplate((short)location.getLocId());      if (flypath == null) {        AuditLogger.info(player,"Try to use null flyPath #" + location.getLocId());        PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);        return;      }      double dist=MathUtil.getDistance(player,flypath.getStartX(),flypath.getStartY(),flypath.getStartZ());      if (dist > 7) {        AuditLogger.info(player,"Try to use flyPath #" + location.getLocId() + " but hes too far "+ dist);        PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);        return;      }      if (player.getWorldId() != flypath.getStartWorldId()) {        AuditLogger.info(player,"Try to use flyPath #" + location.getLocId() + " from not native start world "+ player.getWorldId()+ ". expected "+ flypath.getStartWorldId());        PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_CANNOT_MOVE_TO_AIRPORT_NO_ROUTE);        return;      }      player.setCurrentFlypath(flypath);    }    player.unsetPlayerMode(PlayerMode.RIDE);    player.setState(CreatureState.FLIGHT_TELEPORT);    player.unsetState(CreatureState.ACTIVE);    player.setFlightTeleportId(location.getTeleportId());    PacketSendUtility.broadcastPacket(player,new SM_EMOTION(player,EmotionType.START_FLYTELEPORT,location.getTeleportId(),0),true);  } else {    int instanceId=1;    int mapId=locationTemplate.getMapId();    if (player.getWorldId() == mapId) {      instanceId=player.getInstanceId();    }    sendLoc(player,mapId,instanceId,locationTemplate.getX(),locationTemplate.getY(),locationTemplate.getZ(),(byte)locationTemplate.getHeading(),animation);  }}  }
class C{  public static TimeDuration fromNumber(Number number){  return number == null ? ZeroTimeDuration : fromLong(number.longValue());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_IN_DUEL_ALREADY(String value0){  return new SM_SYSTEM_MESSAGE(1300092,value0);}  }
class C{  public static long buff2long(byte[] bs,int offset){  return (((long)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 56) | (((long)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 48) | (((long)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 40)| (((long)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3])) << 32)| (((long)(bs[offset + 4] >= 0 ? bs[offset + 4] : 256 + bs[offset + 4])) << 24)| (((long)(bs[offset + 5] >= 0 ? bs[offset + 5] : 256 + bs[offset + 5])) << 16)| (((long)(bs[offset + 6] >= 0 ? bs[offset + 6] : 256 + bs[offset + 6])) << 8)| ((long)(bs[offset + 7] >= 0 ? bs[offset + 7] : 256 + bs[offset + 7]));}  }
class C{  public FavoriteOperation(final PokemonModel pokemon){  super(pokemon);}  }
class C{  synchronized public Remote export(Remote impl) throws ExportException {  return export(impl,_config,true);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private Boolean handleExecutionResponse(HttpURLConnection connection) throws IOException {  int responseCode=connection.getResponseCode();  if (isSuccessful(responseCode)) {    String responseContent=getResponseContentAsString(connection);    String id=responseContent != null ? responseContent : "unknown";    Log.i(TAG,"Minidump " + mFileToUpload.getName() + " uploaded successfully, id: "+ id);    cleanupMinidumpFile();    try {      appendUploadedEntryToLog(id);    } catch (    IOException ioe) {      Log.e(TAG,"Fail to write uploaded entry to log file");    }    return true;  } else {    String msg=String.format(Locale.US,"Failed to upload %s with code: %d (%s).",mFileToUpload.getName(),responseCode,connection.getResponseMessage());    Log.i(TAG,msg);    return false;  }}  }
class C{  public static StringBuffer readFromFile(String filePath){  return readFromFile(new File(filePath));}  }
class C{  public DOMParser(){  this(null,null);}  }
class C{  protected void initializeSchedulerProperties(Properties properties){  if (this.schedulerProperties != null) {    throw new IllegalStateException("Can't overwrite scheduler properties when they are already set. Set the properties before adding Jobs, and do not change them afterwards.");  }  this.schedulerProperties=properties;}  }
class C{  public void register(DispatchContext context){  if (Debug.infoOn())   Debug.logInfo("Registering dispatcher: " + context.getName(),module);  this.localContext.put(context.getName(),context);}  }
class C{  private void renewAll(List<Entry> bList,long now){  Map<Lease,Throwable> lmeMap=null;  Throwable t=null;  List<Entry> bad=null;  try {    if (bList.size() == 1) {      Entry e=bList.get(0);      logger.log(Level.FINE,"Renewing lease {0}",e.lease);      e.lease.renew(e.getRenewDuration(now));    } else {      LeaseMap batchLeaseMap=createBatchLeaseMap(bList,now);      logger.log(Level.FINE,"Renewing leases {0}",batchLeaseMap);      batchLeaseMap.renewAll();    }  } catch (  LeaseMapException ex) {    lmeMap=ex.exceptionMap;    bad=new ArrayList<Entry>(ex.exceptionMap.size());  }catch (  Throwable ex) {    t=ex;    bad=new ArrayList<Entry>(bList.size());  }  now=SystemTime.timeMillis();synchronized (this) {    for (Iterator<Entry> iter=bList.iterator(); iter.hasNext(); ) {      Entry e=iter.next();      if (!removeLeaseInRenew(e))       continue;      if (bad == null) {        e.ex=null;      } else {        e.ex=(t != null) ? t : lmeMap.get(e.lease);      }      if (e.ex == null) {        insertEntry(e,now);        continue;      }      final int cat=ThrowableConstants.retryable(e.ex);      if (cat == ThrowableConstants.INDEFINITE) {        e.delayRenew();        leases.put(e,e);        if (logger.isLoggable(Levels.HANDLED)) {          logThrow(Levels.HANDLED,"renewAll","Indefinite exception while renewing lease {0}",new Object[]{e.lease},e.ex);        }      } else {        if (logger.isLoggable(Levels.FAILED)) {          logThrow(Levels.FAILED,"renewAll","Lease renewal failed for lease {0}",new Object[]{e.lease},e.ex);        }        if (e.listener != null) {          bad.add(e);        }      }    }    calcActualRenews(now);  }  if (bad != null)   tell(bad);}  }
class C{  public static Map<String,Object> dayEndCapacityAvailable(GenericValue techDataCalendarWeek,int dayEnd){  Map<String,Object> result=FastMap.newInstance();  int moveDay=0;  Double capacity=null;  Time startTime=null;  while (capacity == null || capacity.doubleValue() == 0) {switch (dayEnd) {case Calendar.MONDAY:      capacity=techDataCalendarWeek.getDouble("mondayCapacity");    startTime=techDataCalendarWeek.getTime("mondayStartTime");  break;case Calendar.TUESDAY:capacity=techDataCalendarWeek.getDouble("tuesdayCapacity");startTime=techDataCalendarWeek.getTime("tuesdayStartTime");break;case Calendar.WEDNESDAY:capacity=techDataCalendarWeek.getDouble("wednesdayCapacity");startTime=techDataCalendarWeek.getTime("wednesdayStartTime");break;case Calendar.THURSDAY:capacity=techDataCalendarWeek.getDouble("thursdayCapacity");startTime=techDataCalendarWeek.getTime("thursdayStartTime");break;case Calendar.FRIDAY:capacity=techDataCalendarWeek.getDouble("fridayCapacity");startTime=techDataCalendarWeek.getTime("fridayStartTime");break;case Calendar.SATURDAY:capacity=techDataCalendarWeek.getDouble("saturdayCapacity");startTime=techDataCalendarWeek.getTime("saturdayStartTime");break;case Calendar.SUNDAY:capacity=techDataCalendarWeek.getDouble("sundayCapacity");startTime=techDataCalendarWeek.getTime("sundayStartTime");break;}if (capacity == null || capacity.doubleValue() == 0) {moveDay-=1;dayEnd=(dayEnd == 1) ? 7 : dayEnd - 1;}}result.put("capacity",capacity);result.put("startTime",startTime);result.put("moveDay",Integer.valueOf(moveDay));return result;}  }
class C{  private void internal_logException(Exception e,Logger logger){  logger.error(e.getMessage());  panel.addErrorMessage(e.getMessage());  StackTraceElement[] stackTrace=e.getStackTrace();  StringBuilder sb=new StringBuilder();  for (  StackTraceElement t : stackTrace) {    sb.append(t.toString());    sb.append("\n");  }  logger.error(sb.toString());}  }
class C{  @Override public void beforeFirst(){  nextBlkNum=0;  useNextChunk();}  }
class C{  public WallGetCommentsQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public int available() throws IOException {  try {    return super.available();  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  public RegexValidator(String[] regexs,boolean caseSensitive){  if (regexs == null || regexs.length == 0) {    throw new IllegalArgumentException("Regular expressions are missing");  }  patterns=new Pattern[regexs.length];  int flags=(caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);  for (int i=0; i < regexs.length; i++) {    if (regexs[i] == null || regexs[i].length() == 0) {      throw new IllegalArgumentException("Regular expression[" + i + "] is missing");    }    patterns[i]=Pattern.compile(regexs[i],flags);  }}  }
class C{  public void handleStep(final FieldODEStateInterpolator<T> interpolator,final boolean isLast) throws MathIllegalStateException {  if (steps.size() == 0) {    initialTime=interpolator.getPreviousState().getTime();    forward=interpolator.isForward();  }  steps.add(interpolator);  if (isLast) {    finalTime=interpolator.getCurrentState().getTime();    index=steps.size() - 1;  }}  }
class C{  public Well44497a(){  super(K);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public Tree(final Material type){  this(type,DEFAULT_SPECIES,DEFAULT_DIRECTION);}  }
class C{  public static double[] convolveWithZeroPadding(final double[] signal1,final double[] signal2){  if (signal1 == null || signal2 == null)   throw new NullPointerException("Received null argument");  int N=signal1.length + signal2.length;  if (!MathUtils.isPowerOfTwo(N)) {    N=MathUtils.closestPowerOfTwoAbove(N);  }  double[] fft1=new double[N];  double[] fft2=new double[N];  System.arraycopy(signal1,0,fft1,0,signal1.length);  System.arraycopy(signal2,0,fft2,0,signal2.length);  double[] fftResult=convolve(fft1,fft2);  double[] result=new double[signal1.length + signal2.length];  System.arraycopy(fftResult,0,result,0,result.length);  return result;}  }
class C{  public static Map<String,Object> checkRoutingTaskAssoc(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String sequenceNumNotOk="N";  Locale locale=(Locale)context.get("locale");  String workEffortIdFrom=(String)context.get("workEffortIdFrom");  String workEffortIdTo=(String)context.get("workEffortIdTo");  String workEffortAssocTypeId=(String)context.get("workEffortAssocTypeId");  Long sequenceNum=(Long)context.get("sequenceNum");  Timestamp fromDate=(Timestamp)context.get("fromDate");  Timestamp thruDate=(Timestamp)context.get("thruDate");  String create=(String)context.get("create");  boolean createProcess=(create != null && create.equals("Y")) ? true : false;  List<GenericValue> listRoutingTaskAssoc=null;  try {    listRoutingTaskAssoc=EntityQuery.use(delegator).from("WorkEffortAssoc").where("workEffortIdFrom",workEffortIdFrom,"sequenceNum",sequenceNum).orderBy("fromDate").queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingTechDataWorkEffortAssocNotExist",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (listRoutingTaskAssoc != null) {    for (    GenericValue routingTaskAssoc : listRoutingTaskAssoc) {      if (!workEffortIdFrom.equals(routingTaskAssoc.getString("workEffortIdFrom")) || !workEffortIdTo.equals(routingTaskAssoc.getString("workEffortIdTo")) || !workEffortAssocTypeId.equals(routingTaskAssoc.getString("workEffortAssocTypeId"))|| !sequenceNum.equals(routingTaskAssoc.getLong("sequenceNum"))) {        if (routingTaskAssoc.getTimestamp("thruDate") == null && routingTaskAssoc.getTimestamp("fromDate") == null)         sequenceNumNotOk="Y"; else         if (routingTaskAssoc.getTimestamp("thruDate") == null) {          if (thruDate == null)           sequenceNumNotOk="Y"; else           if (thruDate.after(routingTaskAssoc.getTimestamp("fromDate")))           sequenceNumNotOk="Y";        } else         if (routingTaskAssoc.getTimestamp("fromDate") == null) {          if (fromDate == null)           sequenceNumNotOk="Y"; else           if (fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))           sequenceNumNotOk="Y";        } else         if (fromDate == null && thruDate == null)         sequenceNumNotOk="Y"; else         if (thruDate == null) {          if (fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))           sequenceNumNotOk="Y";        } else         if (fromDate == null) {          if (thruDate.after(routingTaskAssoc.getTimestamp("fromDate")))           sequenceNumNotOk="Y";        } else         if (routingTaskAssoc.getTimestamp("fromDate").before(thruDate) && fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))         sequenceNumNotOk="Y";      } else       if (createProcess)       sequenceNumNotOk="Y";    }  }  result.put("sequenceNumNotOk",sequenceNumNotOk);  return result;}  }
class C{  public static Zmat au(Zmat A,Z1 u,int r1,int r2,int c1,int c2,Z1 v) throws JampackException {  int i, j, cu;  if (r2 < r1 || c2 < c1) {    return A;  }  if (c2 - c1 + 1 > u.n) {    throw new JampackException("Householder vector too short.");  }  if (r2 - r1 + 1 > v.n) {    throw new JampackException("Work vector too short.");  }  A.dirty=true;  r1=r1 - A.basex;  r2=r2 - A.basex;  c1=c1 - A.basex;  c2=c2 - A.basex;  for (i=r1; i <= r2; i++) {    v.put(i - r1,0,0);    for (j=c1; j <= c2; j++) {      v.re[i - r1]=v.re[i - r1] + A.re[i][j] * u.re[j - c1] - A.im[i][j] * u.im[j - c1];      v.im[i - r1]=v.im[i - r1] + A.re[i][j] * u.im[j - c1] + A.im[i][j] * u.re[j - c1];    }  }  for (i=r1; i <= r2; i++) {    for (j=c1; j <= c2; j++) {      A.re[i][j]=A.re[i][j] - v.re[i - r1] * u.re[j - c1] - v.im[i - r1] * u.im[j - c1];      A.im[i][j]=A.im[i][j] + v.re[i - r1] * u.im[j - c1] - v.im[i - r1] * u.re[j - c1];    }  }  return A;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_QUEST_ERROR_UNEQUIP_QUEST_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400860,value0);}  }
class C{  public static <T>Function<String,T> jsonMapper(Class<T> clazz){  return null;}  }
class C{  public static boolean lookingAt(String str,String regex){  return Pattern.compile(regex).matcher(str).lookingAt();}  }
class C{  public void decoding(){  int errNUm=0;  int oneData=0, one=0;  int twoData=0, two=0;  boolean rError=false;  int errCount=0;  for (int i=0; i < allDisks; i++) {    if (inthis.get(i)) {      errCount++;      if (1 == errCount) {        oneData=i + 2;        one=i;        if (one < disks) {          errNUm++;        }      } else       if (2 == errNUm) {        twoData=i + 2;        two=i;        if (two < disks) {          errNUm++;        }      }    }  }  if (disks == two) {    rError=true;  }  if (0 == errNUm) {    System.out.println("No Error data need be recovery!");    return;  }  if (errCount > 2) {    System.out.println("Error NUM is too larger! It should be [1,2]");    return;  }  if (errNUm == 2 && (one < 0 || one >= disks || two < 0 || two >= disks)) {    System.out.println("Error NUM is 2, but detailed error col numbers are wrong! Thay are should be [0,disks)");    return;  }  System.arraycopy(idata[disks],0,data[0],0,stripe_unit_size);  System.arraycopy(idata[disks + 1],0,data[1],0,stripe_unit_size);  for (int i=0; i < disks; i++) {    System.arraycopy(idata[i],0,data[i + 2],0,stripe_unit_size);  }  for (int i=0; i < stripe_unit_size; i++) {    data[oneData][i]=0;  }  if (errNUm == 1) {    if (rError) {      for (int i=0; i < stripe_unit_size; i++) {        data[0][i]=0;      }      rdp_decoding_d(data,disks,stripe_unit_size,w,oneData);      System.arraycopy(data[oneData],0,idata[one],0,stripe_unit_size);    } else {      rdp_decoding_r(data,disks,stripe_unit_size,w,oneData);      System.arraycopy(data[oneData],0,idata[one],0,stripe_unit_size);    }  } else {    for (int i=0; i < stripe_unit_size; i++) {      data[oneData][i]=0;      data[twoData][i]=0;    }    rdp_decoding_rd(data,disks,stripe_unit_size,w,oneData,twoData);    System.arraycopy(data[oneData],0,idata[one],0,stripe_unit_size);    System.arraycopy(data[twoData],0,idata[two],0,stripe_unit_size);  }}  }
class C{  public static ObjectSequence<TimeSeriesCollection> mergeSequences(ObjectSequence<TimeSeriesCollection>... tsSeq){  if (tsSeq.length == 0)   return ObjectSequence.empty();  if (tsSeq.length == 1)   return tsSeq[0];  final Queue<ObjectSequence<TimeSeriesCollection>> seq=new PriorityQueue<>(Comparator.comparing(null));  seq.addAll(Arrays.stream(tsSeq).filter(null).collect(Collectors.toList()));  if (seq.isEmpty())   return ObjectSequence.empty();  if (seq.size() == 1)   return seq.element();  final List<ObjectSequence<TimeSeriesCollection>> output=new ArrayList<>(tsSeq.length);  while (!seq.isEmpty()) {    final ObjectSequence<TimeSeriesCollection> head=seq.remove();    if (seq.isEmpty()) {      output.add(head);      continue;    }    if (head.last().compareTo(seq.element().first()) < 0) {      output.add(head);      continue;    }    final List<ObjectSequence<TimeSeriesCollection>> toMerge=new ArrayList<>();    final int headProblemStart=head.equalRange(null).getBegin();    output.add(head.limit(headProblemStart));    toMerge.add(head.skip(headProblemStart));    final TimeSeriesCollection headLast=head.last();    while (!seq.isEmpty() && seq.element().first().compareTo(headLast) <= 0) {      final ObjectSequence<TimeSeriesCollection> succ=seq.remove();      TimeSeriesCollection succFirst=succ.first();      System.err.println("succ.first: " + succ.first() + ", head.last: "+ headLast);      final int succProblemEnd=succ.equalRange(null).getEnd();      assert succProblemEnd > 0;      toMerge.add(succ.limit(succProblemEnd));      ObjectSequence<TimeSeriesCollection> succNoProblem=succ.skip(succProblemEnd);      if (!succNoProblem.isEmpty())       seq.add(succNoProblem);    }    assert (toMerge.size() > 1);    output.add(fixSequence(ObjectSequence.concat(toMerge,false,false)));  }  return ObjectSequence.concat(output,true,true);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public void init(byte[] key){  this.workingKey=key;  setKey(this.workingKey);  return;}  }
class C{  public void removeLocators(LookupLocator[] locators){  locatorDisc.removeLocators(locators);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_SCORE_FOR_ENEMY(int num0){  return new SM_SYSTEM_MESSAGE(1400277,num0);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public Builder(String layers){  this.layers=layers;}  }
class C{  public <S extends Domino<T,?>>S convert(DominoConverter<T,R,S> converter){  return converter.call(this);}  }
class C{  public boolean isUptoDate(){  return uptodate;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_FRIENDLY_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1350001,value0,value1);}  }
class C{  public static void b2mc(double b[],double mc[],int m,double a){  double d=mc[m]=b[m];  for (int i=m--; i >= 0; i--) {    double o=b[i] + (a * d);    d=b[i];    mc[i]=o;  }}  }
class C{  public static Date max(Date date1,Date date2){  if (date1 == null) {    return date2;  }  return date2 != null ? (date1.after(date2) ? date1 : date2) : date1;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  getViewer().selectComponent(getViewer().getNnetTab());}  }
class C{  public IdsQuery(String typeName,Object[] ids,Object[] routings,QueryResultType queryResultType){  this(typeName,ids,null,routings,queryResultType);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set minReadsAlignment=");  int value=np.getInt(1,Integer.MAX_VALUE);  np.matchIgnoreCase(";");  ProgramProperties.put(MeganProperties.MININUM_READS_IN_ALIGNMENT,value);}  }
class C{  @Override public DataRefNode findFirstDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){  BTreeNode rootNode=(BTreeNode)dataRefBlock;  while (!rootNode.isLeafNode()) {    rootNode=findFirstLeafNode(searchKey,rootNode);  }  return rootNode;}  }
class C{  public static void add(int tabId,AsyncTabCreationParams params){  ensureInitialized();  sAsyncTabCreationParams.put(tabId,params);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_SHOUT_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400377,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200426,value0,skillname);}  }
class C{  public static final void convertColor(Color color,float[] destination){  color.getRGBComponents(destination);}  }
class C{  public void removeGroupMessageListener(GroupMessageListener groupMessageListener){  groupMessageListeners.remove(groupMessageListener);}  }
class C{  public FloatDataType(){  this.f=0.0f;}  }
class C{  public static int addExact(final int a,final int b) throws MathRuntimeException {  final int sum=a + b;  if ((a ^ b) >= 0 && (sum ^ b) < 0) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_ADDITION,a,b);  }  return sum;}  }
class C{  private void populateScaleRange(boolean enabled){  GroupConfigInterface group=getGroup(GroupIdEnum.SCALE);  group.enable(enabled);}  }
class C{  @Override public String version(){  return VERSION;}  }
class C{  public User withDefaults(){  setIsEnabled(true);  setCivility(Civility.MR);  return this;}  }
class C{  @Override public void updateSLDContents(String sldContents){  this.sldContents=sldContents;}  }
class C{  public static void copyRawFile(Context context,int resid,File file,String mode) throws IOException, InterruptedException {  final InputStream is=context.getResources().openRawResource(resid);  copyFile(file,is,mode);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Builder stringMapTransform(String columnName,Map<String,String> mapping){  return transform(new StringMapTransform(columnName,mapping));}  }
class C{  public XMLEntityDescriptionImpl(String entityName,String publicId,String literalSystemId,String baseSystemId,String expandedSystemId,String namespace){  setDescription(entityName,publicId,literalSystemId,baseSystemId,expandedSystemId,namespace);}  }
class C{  public void removeSwipeListener(SwipeListener listener){  if (mListeners == null) {    return;  }  mListeners.remove(listener);}  }
class C{  public Boolean createSupplier(EntityManager em,String supplierId){  Boolean status=true;  Supplier supplier=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    supplier=new Supplier();    supplier.setSupplierId(supplierId);    supplier.setPhoneNumber("009180437980098");    em.persist(supplier);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of Supplier. Detailed info: " + e);  }  return status;}  }
class C{  public void cancelAll(){synchronized (contents) {    if (dead)     return;    contents.clear();    checkHead();  }}  }
class C{  public static long exportAll(BlastMode blastMode,IConnector connector,String fileName,ProgressListener progressListener) throws IOException {  progressListener.setTasks("Export","Writing all matches");  long countMatches=0;  try {    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){      w.write(blastMode.toString().toUpperCase() + " file generated by MEGAN6\n\n");      IReadBlockIterator it=connector.getAllReadsIterator(0,10000,true,true);      progressListener.setMaximum(it.getMaximumProgress());      progressListener.setProgress(0);      while (it.hasNext()) {        countMatches+=writeMatches(it.next(),w);        progressListener.setProgress(it.getProgress());      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return countMatches;}  }
class C{  public void add(Legion legion){  if (legion == null || legion.getLegionName() == null) {    return;  }  if (legionsById.put(legion.getLegionId(),legion) != null) {    throw new DuplicateAionObjectException();  }  if (legionsByName.put(legion.getLegionName().toLowerCase(),legion) != null) {    throw new DuplicateAionObjectException();  }}  }
class C{  private static int parseDimension(int overrideValue,Node nodeAttr,boolean override){  assert nodeAttr != null;  String content=nodeAttr.getTextContent();  assert content.endsWith("dp");  int originalValue=Integer.parseInt(content.substring(0,content.length() - 2));  if (override) {    nodeAttr.setTextContent(overrideValue + "dp");  }  return originalValue;}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public String toFormattedString(){  try {    String localPath=getLocalPath() != null ? getLocalPath() : "";    return localPath + " status:" + getUploadStatus()+ " result:"+ (getLastResult() == null ? "null" : getLastResult().getValue());  } catch (  NullPointerException e) {    Log_OC.d(TAG,"Exception " + e.toString());    return (e.toString());  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  @Override public boolean restoreData(String dateString){  long time=restoreTime(dateString);  if (time > -1) {    logger.info("Restoring data from S3.");    AmazonS3Client s3Client=new AmazonS3Client(cred.getAwsCredentialProvider());    try {      String keyName=config.getBackupLocation() + "/" + iid.getInstance().getDatacenter()+ "/"+ iid.getInstance().getRack()+ "/"+ iid.getInstance().getToken()+ "/"+ time;      logger.info("S3 Bucket Name: " + config.getBucketName());      logger.info("Key in Bucket: " + keyName);      if (!(s3Client.doesBucketExist(config.getBucketName()))) {        logger.error("Bucket with name: " + config.getBucketName() + " does not exist");      } else {        S3Object s3object=s3Client.getObject(new GetObjectRequest(config.getBucketName(),keyName));        logger.info("Content-Type: " + s3object.getObjectMetadata().getContentType());        String filepath=null;        if (config.isRedisAofEnabled()) {          filepath=config.getRedisDataDir() + "/appendonly.aof";        } else {          filepath=config.getRedisDataDir() + "/nfredis.rdb";        }        IOUtils.copy(s3object.getObjectContent(),new FileOutputStream(new File(filepath)));      }      return true;    } catch (    AmazonServiceException ase) {      logger.error("AmazonServiceException;" + " request made it to Amazon S3, but was rejected with an error ");      logger.error("Error Message:    " + ase.getMessage());      logger.error("HTTP Status Code: " + ase.getStatusCode());      logger.error("AWS Error Code:   " + ase.getErrorCode());      logger.error("Error Type:       " + ase.getErrorType());      logger.error("Request ID:       " + ase.getRequestId());    }catch (    AmazonClientException ace) {      logger.error("AmazonClientException;" + " the client encountered " + "an internal error while trying to "+ "communicate with S3, ");      logger.error("Error Message: " + ace.getMessage());    }catch (    IOException io) {      logger.error("File storing error: " + io.getMessage());    }  } else {    logger.error("Date in FP: " + dateString);  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200407,skillname);}  }
class C{  public final TestSubscriber<T> assertFusionEnabled(){  if (establishedFusionMode != Fuseable.SYNC && establishedFusionMode != Fuseable.ASYNC) {    throw new AssertionError("Fusion was not enabled");  }  return this;}  }
class C{  private DefaultMutableTreeNode copy(TreeNode node){  return new DefaultMutableTreeNode(node);}  }
class C{  public WallPostQuery placeId(Integer value){  return unsafeParam("place_id",value);}  }
class C{  public boolean willDisconnect(){  return disconnectReason != null;}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  private void startAsyncImport(ImportOptions importOptions,String format,HttpServletRequest request,HttpServletResponse response) throws IOException {  InputStream inputStream=saveTmp(request.getInputStream());  TaskId taskId=new TaskId(TaskCategory.DATAVALUE_IMPORT,currentUserService.getCurrentUser());  scheduler.executeTask(new ImportDataValueTask(dataValueSetService,adxDataService,sessionFactory,inputStream,importOptions,taskId,format));  response.setHeader("Location",ContextUtils.getRootPath(request) + "/system/tasks/" + TaskCategory.DATAVALUE_IMPORT);  response.setStatus(HttpServletResponse.SC_ACCEPTED);}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryFileReader) {    dictionaryFileReader.close();    dictionaryFileReader=null;  }}  }
class C{  public static void readFromFile(File file,Function<String,Boolean> lineProcessing){  FileInputStream fr=null;  try {    fr=new FileInputStream(file);    InputStreamReader char_input=new InputStreamReader(fr,Charset.forName("UTF-8").newDecoder());    BufferedReader br=new BufferedReader(char_input);    while (true) {      String in=br.readLine();      if (in == null) {        break;      }      if (!lineProcessing.apply(in)) {        break;      }    }    br.close();  } catch (  IOException e) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,"IOException while reading file",e);  } finally {    try {      fr.close();    } catch (    IOException e) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,"IOException while closing file reader",e);    }  }}  }
class C{  public static SettingsFragment newInstance(){  return new SettingsFragment();}  }
class C{  private void handleRecoveryFailure(Exception e,int retries) throws Exception {  if (_logger.isLoggable(Level.WARNING)) {    _logger.log(Level.WARNING,"Space recovery failure.",e);  }  if (retries == RecoveryManager.RECOVERY_RETRIES || getEngine().getCacheManager().isOffHeapCachePolicy())   throw e;  close();  _engine=new SpaceEngine(this);  if (_leaderSelector != null) {    _logger.info("Space recovery failed - selecting primary");    _leaderSelector.select();  }  initReplicationStateBasedOnActiveElection();}  }
class C{  static boolean hasUpdate(final String newer,final String older){  return VERSION_PATTERN.matcher(newer).matches() && VERSION_PATTERN.matcher(older).matches() ? newer.compareTo(older) > 0 : false;}  }
class C{  public void createNewTab(AsyncTabCreationParams asyncParams,TabLaunchType type,int parentId){  assert asyncParams != null;  assert !(type == TabLaunchType.FROM_LONGPRESS_BACKGROUND && asyncParams.getWebContents() != null);  Context context=ApplicationStatus.getApplicationContext();  Activity parentActivity=ActivityDelegate.getActivityForTabId(parentId);  boolean mayLaunchDocumentActivity=isAllowedToLaunchDocumentActivity(context);  assert mayLaunchDocumentActivity || (asyncParams.getWebContents() == null);  if (FeatureUtilities.isDocumentMode(context) && mayLaunchDocumentActivity) {    AsyncDocumentLauncher.getInstance().enqueueLaunch(mIsIncognito,parentId,asyncParams);  } else {    int assignedTabId=TabIdManager.getInstance().generateValidId(Tab.INVALID_TAB_ID);    AsyncTabCreationParamsManager.add(assignedTabId,asyncParams);    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(asyncParams.getLoadUrlParams().getUrl()));    intent.setClass(context,ChromeLauncherActivity.class);    intent.putExtra(IntentHandler.EXTRA_TAB_ID,assignedTabId);    intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,mIsIncognito);    intent.putExtra(IntentHandler.EXTRA_PARENT_TAB_ID,parentId);    if (parentActivity != null && parentActivity.getIntent() != null) {      intent.putExtra(IntentHandler.EXTRA_PARENT_INTENT,parentActivity.getIntent());    }    if (asyncParams.getRequestId() != null) {      intent.putExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA,asyncParams.getRequestId().intValue());    }    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    IntentHandler.startActivityForTrustedIntent(intent,context);  }}  }
class C{  public BoxFolder createSharedFolder(String folderName,String parentId) throws BoxSDKServiceException {  BoxFolder createFolder=createFolder(folderName,parentId);  try {    createFolder.createSharedLink(BoxSharedLink.Access.OPEN,null,null);    return createFolder;  } catch (  BoxAPIException e) {    throw new BoxSDKServiceException("Can't create shared link for directory: " + createFolder.getID(),e);  }}  }
class C{  public void disconnect(boolean sendQuitCommand) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (authenticated) {      stopAutoNoopTimer();    }    if (sendQuitCommand) {      communication.sendFTPCommand("QUIT");      FTPReply r=communication.readFTPReply();      if (!r.isSuccessCode()) {        throw new FTPException(r);      }    }    communication.close();    communication=null;    connected=false;  }}  }
class C{  public AudioInputStream htsMLSAVocoder(HTSParameterGeneration pdf2par,HMMData htsData) throws Exception {  int audioSize=computeAudioSize(pdf2par.getMcepPst(),htsData);  HTSVocoderDataProducer producer=new HTSVocoderDataProducer(audioSize,pdf2par,htsData);  producer.start();  return new DDSAudioInputStream(producer,getHTSAudioFormat(htsData));}  }
class C{  public PagerManageObject(int initPosition){  this.pagePosition=initPosition;}  }
class C{  public void createTable(TableId table,String topic){  Schema kafkaConnectSchema=schemaRetriever.retrieveSchema(table,topic);  bigQuery.create(constructTableInfo(table,kafkaConnectSchema));}  }
class C{  public static void addResource(Offer.Builder o,String name){  addResource(o,name,null);}  }
class C{  public static byte[] long2buff(long n){  byte[] bs;  bs=new byte[8];  bs[0]=(byte)((n >> 56) & 0xFF);  bs[1]=(byte)((n >> 48) & 0xFF);  bs[2]=(byte)((n >> 40) & 0xFF);  bs[3]=(byte)((n >> 32) & 0xFF);  bs[4]=(byte)((n >> 24) & 0xFF);  bs[5]=(byte)((n >> 16) & 0xFF);  bs[6]=(byte)((n >> 8) & 0xFF);  bs[7]=(byte)(n & 0xFF);  return bs;}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public boolean onError(MediaPlayer mp,int what,int extra){  Log_OC.e(TAG,"Error in audio playback, what = " + what + ", extra = "+ extra);  String message=getMessageForMediaError(this,what,extra);  Toast.makeText(getApplicationContext(),message,Toast.LENGTH_SHORT).show();  processStopRequest(true);  return true;}  }
class C{  public boolean isDrawLabelsEnabled(){  return mDrawLabels;}  }
class C{  public ContextVarNode makeContextVarNode(Object baseValue,Type baseType,Context context,SootMethod method){  LocalVarNode base=makeLocalVarNode(baseValue,baseType,method);  return makeContextVarNode(base,context);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      populateField(oldValue);    }  }}  }
class C{  public int hashCode(){  return (ServerMinPrincipal.class.hashCode() + Constraint.hash(principals));}  }
class C{  @Override public ReadBlockRMA6 next(){  if (!hasNext())   throw new NoSuchElementException();  final int numberOfMatches=iterator.next();  final byte[] matchesText=iterator.getMatchesText();  final int matchesTextLength=iterator.getMatchesTextLength();  final ReadBlockRMA6 readBlock=new ReadBlockRMA6(blastMode,false,cNames);  final int queryNameLength=Basic.getFirstWord(matchesText,queryName);  boolean foundRead=false;  if (fastaIterator != null) {    if (Utilities.findQuery(queryName,queryNameLength,fastaIterator,isFasta)) {      final int length=Utilities.getFastAText(fastaIterator,isFasta,fastAText);      String fasta=Basic.toString(fastAText.get(),0,length);      int pos=fasta.indexOf('\n');      if (pos > 0) {        if (hasMagnitudes) {          readBlock.setReadWeight(ReadMagnitudeParser.parseMagnitude(fasta.substring(pos)));        }        readBlock.setReadHeader(fasta.substring(0,pos));        if (pos + 1 < fasta.length())         readBlock.setReadSequence(fasta.substring((pos + 1)));      }      foundRead=true;    } else {      if (missingReadWarnings++ < 50)       System.err.println("WARNING: Failed to find read '" + Basic.toString(queryName,0,queryNameLength) + "' in file: "+ readsFile);      if (missingReadWarnings == 50)       System.err.println("No further missing warnings");    }  }  if (!foundRead) {    readBlock.setReadHeader(String.format(">%s\n",Basic.toString(queryName,0,queryNameLength)));    if (hasMagnitudes) {      readBlock.setReadWeight(ReadMagnitudeParser.parseMagnitude(Basic.toString(queryName,0,queryNameLength)));    }  }  int start=0;  MatchBlockRMA6[] matchBlocks=new MatchBlockRMA6[numberOfMatches];  for (int matchCount=0; matchCount < numberOfMatches; matchCount++) {    int end=Utilities.nextNewLine(matchesText,start);    final String aLine=Basic.toString(matchesText,start,end - start + 1);    start=end + 1;    MatchBlockRMA6 matchBlock=new MatchBlockRMA6();    SAMMatch samMatch=new SAMMatch(blastMode);    try {      samMatch.parse(aLine);    } catch (    IOException e) {      Basic.caught(e);      return null;    }    matchBlock.setFromSAM(samMatch);    for (    IdParser parser : parsers) {      try {        matchBlock.setId(parser.getCName(),parser.getIdFromHeaderLine(samMatch.getRefName()));      } catch (      IOException e) {        Basic.caught(e);      }    }    matchBlocks[matchCount]=matchBlock;  }  readBlock.setNumberOfMatches(numberOfMatches);  readBlock.setMatchBlocks(matchBlocks);  return readBlock;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  FilePart(String name,InputStream in,String boundary,String contentType,String fileName,String filePath) throws IOException {  super(name);  this.fileName=fileName;  this.filePath=filePath;  this.contentType=contentType;  partInput=new PartInputStream(in,boundary);}  }
class C{  public final boolean equals(Object oObj){  return Word.equals(((WordDefinition)oObj).Word);}  }
class C{  private void saveState(){  try {    IPath pluginStateLocation=SVNProviderPlugin.getPlugin().getStateLocation();    File tempFile=pluginStateLocation.append(REPOSITORIES_STATE_FILE + ".tmp").toFile();    File stateFile=pluginStateLocation.append(REPOSITORIES_STATE_FILE).toFile();    try {      DataOutputStream dos=new DataOutputStream(new FileOutputStream(tempFile));      writeState(dos);      dos.close();      if (stateFile.exists()) {        stateFile.delete();      }      boolean renamed=tempFile.renameTo(stateFile);      if (!renamed) {        throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind("SVNProvider.rename",tempFile.getAbsolutePath()),null));      }    } catch (    IOException e) {      throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind("SVNProvider.save",stateFile.getAbsolutePath()),e));    }  } catch (  TeamException e) {    Util.logError(Policy.bind("SVNProvider.errorSaving"),e);  }}  }
class C{  public synchronized void resetTime(){  timeOffset=line.getMicrosecondPosition();}  }
class C{  @PostConstruct public void init(){  List<IdentifiableObject> langs=new ArrayList<>();  List<IdentifiableObject> countrs=new ArrayList<>();  for (  String lang : Locale.getISOLanguages()) {    langs.add(new BaseIdentifiableObject(lang,lang,new Locale(lang).getDisplayLanguage()));  }  for (  String country : Locale.getISOCountries()) {    countrs.add(new BaseIdentifiableObject(country,country,new Locale("en",country).getDisplayCountry()));  }  Collections.sort(langs);  Collections.sort(countrs);  for (  IdentifiableObject lang : langs) {    languages.put(lang.getCode(),lang.getName());  }  for (  IdentifiableObject countr : countrs) {    countries.put(countr.getCode(),countr.getName());  }}  }
class C{  public double variance(boolean bOnlyValue){  double dExpectation=average(bOnlyValue);  double dRes=0.0;  Iterator iKeyIter=hDistro.keySet().iterator();  double dObservationCount=0;  while (iKeyIter.hasNext()) {    Object oNextKey=iKeyIter.next();    if (bOnlyValue) {      dRes+=Math.pow((Double)hDistro.get(oNextKey) - dExpectation,2);      dObservationCount++;    } else {      dRes+=(Double)hDistro.get(oNextKey) * Math.pow((Double)oNextKey - dExpectation,2);      dObservationCount+=(Double)hDistro.get(oNextKey);    }  }  return (dRes / dObservationCount);}  }
class C{  public void update(double deltaTime){  Move();  position.add(velocity.x * deltaTime,velocity.y * deltaTime);}  }
class C{  private void unclaimTask(ClaimedTask claimedTask,boolean releaseTask){  _claimedTasks.remove(claimedTask.getTaskId());  claimedTask.setComplete(true);  if (releaseTask) {    try {      _scanWorkflow.releaseScanRangeTask(claimedTask.getTask());      _log.info("Released scan range task: {}",claimedTask.getTask());    } catch (    Exception e) {      _log.error("Failed to release scan range",e);    }  }}  }
class C{  protected void validateAdminAccessOnProperty(String property){  if (config().isAuthenticationEnabled() && config().isAuthorizationEnabled()) {    String appId=clientAppId();    log.debug("check admin access on property: {} - Authenticated: {} -- role: {}",property,isClientAuthenticated(),appId);    if (!isClientAuthenticated()) {      throw new RestException(Status.FORBIDDEN,"Need to authenticate to perform the request");    }    if (config().getSuperUserRoles().contains(appId)) {      log.debug("granting access to super-user {} on property {}",appId,property);    } else {      PropertyAdmin propertyAdmin;      try {        propertyAdmin=pulsar().getConfigurationCache().propertiesCache().get(path("policies",property));      } catch (      KeeperException.NoNodeException e) {        log.warn("Failed to get property admin data for non existing property {}",property);        throw new RestException(Status.UNAUTHORIZED,"Property does not exist");      }catch (      Exception e) {        log.error("Failed to get property admin data for property");        throw new RestException(e);      }      if (!propertyAdmin.getAdminRoles().contains(appId)) {        throw new RestException(Status.UNAUTHORIZED,"Don't have permission to administrate resources on this property");      }      log.debug("Successfully authorized {} on property {}",appId,property);    }  }}  }
class C{  public void clearDelimiters(){  smDelims=null;}  }
class C{  public static void assertEquals(String msg,RealMatrix expected,RealMatrix observed,double tolerance){  Assert.assertNotNull(msg + "\nObserved should not be null",observed);  if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {    StringBuilder messageBuffer=new StringBuilder(msg);    messageBuffer.append("\nObserved has incorrect dimensions.");    messageBuffer.append("\nobserved is " + observed.getRowDimension() + " x "+ observed.getColumnDimension());    messageBuffer.append("\nexpected " + expected.getRowDimension() + " x "+ expected.getColumnDimension());    Assert.fail(messageBuffer.toString());  }  RealMatrix delta=expected.subtract(observed);  if (delta.getNorm() >= tolerance) {    StringBuilder messageBuffer=new StringBuilder(msg);    messageBuffer.append("\nExpected: " + expected);    messageBuffer.append("\nObserved: " + observed);    messageBuffer.append("\nexpected - observed: " + delta);    Assert.fail(messageBuffer.toString());  }}  }
class C{  @Override public WebElement activeElement(){  return targetLocator.activeElement();}  }
class C{  private void prepareSubscribeDataTagsMock(final Set<Long> tagIds,final BaseTagListener listener) throws JMSException {  Collection<TagUpdate> serverUpdates=new ArrayList<TagUpdate>(tagIds.size());  for (  Long tagId : tagIds) {    serverUpdates.add(createValidTransferTag(tagId));  }  Collection<TagValueUpdate> serverUpdateValues=new ArrayList<>();  for (  Long tagId : tagIds) {    serverUpdateValues.add(createValidTransferTag(tagId));  }  EasyMock.expect(requestHandlerMock.requestTags(tagIds)).andReturn(serverUpdates);  for (  Long tagId : tagIds) {    ClientDataTagImpl cdt=new ClientDataTagImpl(tagId);    EasyMock.expect(jmsProxyMock.isRegisteredListener(cdt)).andReturn(false);    jmsProxyMock.registerUpdateListener(cdt,cdt);  }  EasyMock.expect(requestHandlerMock.requestTagValues(tagIds)).andReturn(serverUpdateValues);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public ObjectFactory(){}  }
class C{  public int geom_eval(){  return soot.PhaseOptions.getInt(options,"geom-eval");}  }
class C{  private EncryptedProperties(String password){  PBEParameterSpec ps=new javax.crypto.spec.PBEParameterSpec(salt,20);  SecretKeyFactory kf;  try {    kf=SecretKeyFactory.getInstance("PBEWithMD5AndDES");    SecretKey k=kf.generateSecret(new javax.crypto.spec.PBEKeySpec(password.toCharArray()));    encrypter=Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");    decrypter=Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");    encrypter.init(Cipher.ENCRYPT_MODE,k,ps);    decrypter.init(Cipher.DECRYPT_MODE,k,ps);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  NoSuchPaddingException e) {    e.printStackTrace();  }catch (  InvalidKeySpecException e) {    e.printStackTrace();  }catch (  InvalidKeyException e) {    e.printStackTrace();  }catch (  InvalidAlgorithmParameterException e) {    e.printStackTrace();  }}  }
class C{  private static Unit insertGotoBefore(Chain<Unit> unitChain,Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  unitChain.insertBefore(newGoto,node);  newGoto.redirectJumpsToThisTo(node);  return newGoto;}  }
class C{  public static boolean isReady(String placementId){  return isSupported() && isInitialized() && placementId != null && Placement.isReady(placementId);}  }
class C{  public SimpleTimer(String name,String group,long startTime){  this.trigger=new SimpleTrigger(name,group,new Date(startTime));}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public static void main(String[] sArgs){  String sText="this is a test text. Indeed, this previous text is nothing but a test. " + "What do you think you should do? I would try it once more by testing...";  EntropyChunker ec=new EntropyChunker();  ec.train(sText);  Iterator iIter=ec.chunkString("OK. Now where do I do the splitting? Here, or here? We shall see.").iterator();  while (iIter.hasNext()) {    System.out.println(iIter.next().toString());  }}  }
class C{  public CreateSiteWindow openCreateSiteWindow(){  grid.getActionBar().expandDropDown(SiteAdminButtons.NEW);  grid.getActionBar().clickDropDownOption(SiteAdminButtons.NEW_SITE);  createSiteWindow.waitToBeDisplayed();  return createSiteWindow;}  }
class C{  protected AdsGetSuggestionsQuery section(AdsGetSuggestionsSection value){  return unsafeParam("section",value);}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_RandomMoveLoc_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201011,skilltarget,skillcaster,skillname);}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public AudioQuality(){}  }
class C{  public OverlapsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public static Builder waffleCone(){  return new Builder();}  }
class C{  public WallGetCommentsQueryWithExtended startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public S2Point negate(){  return new S2Point(-theta,FastMath.PI - phi,vector.negate());}  }
class C{  public static double gymOffense(final Pokemon p){  return gymOffense(p.getPokemonId(),p.getMove1(),p.getMove2(),p.getIndividualAttack());}  }
class C{  private void checkExactTable(int n,int m,double criticalValue,double alpha){  final KolmogorovSmirnovTest test=new KolmogorovSmirnovTest();  Assert.assertTrue(test.exactP(criticalValue,n,m,true) < alpha);  Assert.assertTrue(test.exactP(criticalValue,n,m,false) > alpha);}  }
class C{  @Override public void updateValue(String key,List<String> stringList){  StringBuilder sb=new StringBuilder();  for (  String string : stringList) {    if (sb.length() > 0) {      sb.append(LIST_DELIMETER);    }    sb.append(string);  }  updateValue(key,sb.toString());}  }
class C{  public static String rowToString(JSONArray ja){  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  public static String formatNumber(double number,int decimalPlaces){  String s=String.valueOf(number);  int idx1=s.indexOf('.');  if (idx1 == -1) {    return s;  } else {    int idx2=s.indexOf('E');    int dp=decimalPlaces + (idx2 >= 0 ? 0 : 1);    String t=s.substring(0,Math.min(idx1 + dp,s.length()));    if (idx2 >= 0)     t+=s.substring(idx2);    return t;  }}  }
class C{  protected void initialize(Session session) throws IOException, RequestException {  AdhocQuery query=session.newAdhocQuery(INIT_QUERY);  RequestOptions options=new RequestOptions();  options.setDefaultXQueryVersion("1.0-ml");  query.setOptions(options);  ResultSequence result=null;  result=session.submitRequest(query);  ResultItem item=result.next();  initHostName=item.asString();  if (result.hasNext()) {    item=result.next();    String policyStr=item.asString();    conf.set(ASSIGNMENT_POLICY,policyStr);    policy=AssignmentPolicy.Kind.forName(policyStr);    item=result.next();    allowFastLoad=Boolean.parseBoolean(item.asString());    if ((policy == AssignmentPolicy.Kind.STATISTICAL || policy == AssignmentPolicy.Kind.RANGE || policy == AssignmentPolicy.Kind.QUERY) && !allowFastLoad && conf.getBoolean(OUTPUT_FAST_LOAD,false)) {      throw new IOException("Fastload can't be used: rebalancer is on and " + "forests are imbalanced in a database with " + "statistics-based assignment policy");    }  } else {    policy=AssignmentPolicy.Kind.LEGACY;    legacy=true;  }  if (conf.get(OUTPUT_FAST_LOAD) == null) {    if (conf.get(OUTPUT_DIRECTORY) != null) {      if (conf.get(OUTPUT_PARTITION) == null && (policy == AssignmentPolicy.Kind.RANGE || policy == AssignmentPolicy.Kind.QUERY)) {        fastLoad=false;      } else       if (policy == AssignmentPolicy.Kind.RANGE || policy == AssignmentPolicy.Kind.QUERY || policy == AssignmentPolicy.Kind.STATISTICAL) {        fastLoad=allowFastLoad;      } else {        fastLoad=true;      }    } else {      fastLoad=false;    }  } else {    fastLoad=conf.getBoolean(OUTPUT_FAST_LOAD,false);    if (fastLoad && conf.get(OUTPUT_PARTITION) == null && (policy == AssignmentPolicy.Kind.RANGE || policy == AssignmentPolicy.Kind.QUERY)) {      throw new IllegalArgumentException("output_partition is required for fastload mode.");    }  }  conf.setBoolean(OUTPUT_FAST_LOAD,fastLoad);}  }
class C{  public void visitPhpMethodReference(MethodReference reference){  if (!this.isPropelDefined()) {    return;  }  String strName=reference.getName();  if (null == strName || !strName.equals("count")) {    return;  }  this.inspectSignature(reference.getSignature(),reference,null);}  }
class C{  public DOMParserImpl(String configuration,String schemaType){  this((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration",configuration));  if (schemaType != null) {    if (schemaType.equals(Constants.NS_DTD)) {      fConfiguration.setProperty(Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_LANGUAGE,Constants.NS_DTD);      fSchemaType=Constants.NS_DTD;    } else     if (schemaType.equals(Constants.NS_XMLSCHEMA)) {      fConfiguration.setProperty(Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_LANGUAGE,Constants.NS_XMLSCHEMA);    }  }}  }
class C{  public boolean canContainKey(Object key){  if (!(super.canContainKey(key) && key instanceof RemoteMethodControl)) {    return false;  }  return ConstrainableProxyUtil.equivalentConstraints(((RemoteMethodControl)key).getConstraints(),((RemoteMethodControl)server).getConstraints(),methodMappings);}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void push(){  L.rawGetI(LuaState.LUA_REGISTRYINDEX.intValue(),ref.intValue());}  }
class C{  protected PhotosSaveMarketAlbumPhotoQuery server(int value){  return unsafeParam("server",value);}  }
class C{  private T[] buildArray(final T a0,final T a1,final T a2){  final T[] array=MathArrays.buildArray(a0.getField(),3);  array[0]=a0;  array[1]=a1;  array[2]=a2;  return array;}  }
class C{  public HalfPhoneUnitName(String[] possiblePhonemes,String pauseSymbol){  this.name="halfphone_unitname";  this.pauseSymbol=pauseSymbol;  String[] possibleValues=new String[2 * possiblePhonemes.length + 1];  possibleValues[0]="0";  for (int i=0; i < possiblePhonemes.length; i++) {    possibleValues[2 * i + 1]=possiblePhonemes[i] + "_L";    possibleValues[2 * i + 2]=possiblePhonemes[i] + "_R";  }  this.values=new ByteStringTranslator(possibleValues);}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (context.useNamespaces()) {    if (!XMLChar.isValidNCName(content)) {      throw new InvalidDatatypeValueException("IDInvalidWithNamespaces",new Object[]{content});    }  } else {    if (!XMLChar.isValidName(content)) {      throw new InvalidDatatypeValueException("IDInvalid",new Object[]{content});    }  }  if (context.isIdDeclared(content)) {    throw new InvalidDatatypeValueException("IDNotUnique",new Object[]{content});  }  context.addId(content);}  }
class C{  public LengthFilter(TokenStream in,int min,int max){  super(in);  this.min=min;  this.max=max;}  }
class C{  @Override public ListenableFuture<AlarmResponse> listAlarms(){  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NONE).setAction(AlarmRequest.AlarmAction.GET).setMemberID(0).build();  return this.futureStub.alarm(alarmRequest);}  }
class C{  public void removeFooter(){  setFooter(null);}  }
class C{  @Override public void updateValue(String key,boolean value){  updateValue(key,value ? TRUE : FALSE);}  }
class C{  public void addResource(ResourceDeclaration node){  List<ResourceDeclaration> list=(parent == null || state == null) ? getResourceListNoTransform() : getResourceList();  list.addChild(node);}  }
class C{  public boolean hasDaughters(){  return daughter != null;}  }
class C{  protected void init(Table table,Graph graph,int row){  m_table=table;  m_graph=graph;  m_row=m_table.isValidRow(row) ? row : -1;}  }
class C{  public void sendButtonPendingIntentWithUrl(Context context,String url){  assert shouldShowActionButton();  Intent addedIntent=new Intent();  addedIntent.setData(Uri.parse(url));  try {    mActionButtonParams.getPendingIntent().send(context,0,addedIntent,mOnFinished,null);  } catch (  CanceledException e) {    Log.e(TAG,"CanceledException while sending pending intent in custom tab");  }}  }
class C{  public int skip(int len){  pos+=len;  return pos;}  }
class C{  public AXmlNamespace(String prefix,String uri,int line){  super();  this.prefix=prefix;  this.uri=uri;  this.line=line;}  }
class C{  public String updateByExample(Map<String,Object> parameter){  SQL sql=new SQL();  sql.UPDATE("user");  sql.SET("id = #{record.id,jdbcType=INTEGER}");  sql.SET("username = #{record.username,jdbcType=VARCHAR}");  sql.SET("psw = #{record.psw,jdbcType=VARCHAR}");  UserCriteria example=(UserCriteria)parameter.get("example");  applyWhere(sql,example,true);  return sql.toString();}  }
class C{  public FriendsAddQuery follow(Boolean value){  return unsafeParam("follow",value);}  }
class C{  public String fixed_class_names(){  return soot.PhaseOptions.getString(options,"fcn");}  }
class C{  private String printOFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (precisionSet)   nLeadingZeros=precision - sx.length();  if (alternateForm)   nLeadingZeros++;  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet)   nBlanks=fieldWidth - nLeadingZeros - sx.length();  if (nBlanks < 0)   nBlanks=0;  int n=nLeadingZeros + sx.length() + nBlanks;  char[] ca=new char[n];  int i;  if (leftJustify) {    for (i=0; i < nLeadingZeros; i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';  } else {    if (leadingZeros)     for (i=0; i < nBlanks; i++)     ca[i]='0'; else     for (i=0; i < nBlanks; i++)     ca[i]=' ';    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];  }  return new String(ca);}  }
class C{  final public void response(List<JSON> arr){  if (arr == null) {    responseJson("[]");  } else {    responseJson(arr.toString());  }}  }
class C{  public void deleteFolderContentOlderThan(String folderId,DateTime olderThan) throws BoxSDKServiceException {  try {    BoxFolder boxFolder=new BoxFolder(getBoxAPIConnection(),folderId);    for (    BoxItem.Info itemInfo : boxFolder) {      if (itemInfo instanceof BoxFolder.Info) {        BoxFolder subFolder=(BoxFolder)itemInfo.getResource();        if (olderThan.isAfter(subFolder.getInfo().getCreatedAt().getTime())) {          subFolder.delete(true);        }      } else       if (itemInfo instanceof BoxFile.Info) {        BoxFile file=(BoxFile)itemInfo.getResource();        if (olderThan.isAfter(file.getInfo().getCreatedAt().getTime())) {          file.delete();        }      }    }  } catch (  BoxAPIException e) {    String msg="Error trying to delete content older than: " + olderThan.toString() + " in folder: "+ folderId;    logger.error(msg,e);    throw new BoxSDKServiceException(msg,e);  }}  }
class C{  @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processChar();}  }
class C{  public void terminateDAQ(){  processMessageReceiver.shutdown();  this.processMessageSender.shutdown();  this.processMessageSender.closeSourceDataTagsBuffers();  filterMessageSender.shutdown();  this.primaryRequestSender.sendProcessDisconnectionRequest(configurationController.getProcessConfiguration(),configurationController.getStartUp());  if (secondaryRequestSender != null) {    secondaryRequestSender.sendProcessDisconnectionRequest(configurationController.getProcessConfiguration(),configurationController.getStartUp());  }  log.info("terminateDAQ - Process terminated gently");  System.exit(0);}  }
class C{  public PearsonsCorrelation(double[][] data){  this(new BlockRealMatrix(data));}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  TypeVariable typeVariable(Local local){  TypeVariable result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  public double average(boolean bOnlyValueAverage){  double dRes=0.0;  Distribution dTemp=new Distribution();  dTemp.asTreeMap().putAll(hDistro);  if (!bOnlyValueAverage)   dTemp=dTemp.getProbabilityDistribution();  Iterator iKeyIter=dTemp.asTreeMap().keySet().iterator();  while (iKeyIter.hasNext()) {    Object oNextKey=iKeyIter.next();    if (bOnlyValueAverage)     dRes+=(Double)dTemp.getValue(oNextKey) / dTemp.asTreeMap().size(); else     dRes+=(Double)oNextKey * (Double)dTemp.getValue(oNextKey);  }  return dRes;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static void rectangle(double x,double y,double halfWidth,double halfHeight){  if (!(halfWidth >= 0))   throw new IllegalArgumentException("half width must be nonnegative");  if (!(halfHeight >= 0))   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static boolean isDocumentAutoCorrected(Document document){  return "true".equals(document.getUserData("autoCorrected"));}  }
class C{  private boolean equal(byte[] key1,byte[] key2){  if (key1.length != key2.length)   return false; else {    for (int i=0; i < key1.length; i++) {      if (key1[i] != key2[i])       return false;    }    return true;  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Constraint.verify(principals);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200983,skilltarget,skillcaster,skillname);}  }
class C{  public FTPCommunicationChannel(Socket connection,String charsetName) throws IOException {  this.connection=connection;  this.charsetName=charsetName;  InputStream inStream=connection.getInputStream();  OutputStream outStream=connection.getOutputStream();  reader=new NVTASCIIReader(inStream,charsetName);  writer=new NVTASCIIWriter(outStream,charsetName);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public SpaceTypeDescriptorBuilder addPropertyIndex(String propertyName,SpaceIndexType indexType,boolean unique){  return addIndex(SpaceIndexFactory.createPropertyIndex(propertyName,indexType,unique));}  }
class C{  public static boolean isMultiYear(int field){  return (field == DECADE || field == CENTURY || field == MILLENIUM);}  }
class C{  public void tearDown() throws Exception {  DateTimeZone.setDefault(previousDateTimeZone);  getHarness().tearDown();  DimensionDictionary dictionary=configurationLoader.getDimensionDictionary();  Set<Dimension> dimensions=dictionary.findAll();  List<Throwable> caughtExceptions=Collections.emptyList();  for (  Dimension dimension : dimensions) {    if (dimension instanceof KeyValueStoreDimension) {      KeyValueStoreDimension kvDimension=(KeyValueStoreDimension)dimension;      try {        kvDimension.deleteAllDimensionRows();      } catch (      Exception e) {        caughtExceptions.add(e);        String msg=String.format("Unable to delete all DimensionRows for %s",dimension.getApiName());        LOG.error(msg,e);      }    }  }  state.cache.clear();  testBinderFactory.shutdownLoaderScheduler();  if (!caughtExceptions.isEmpty()) {    throw new MultiException(caughtExceptions);  }  getDimensionConfiguration().stream().map(null).forEach(null);}  }
class C{  public void playAnimatedLogo(BaseGifImage gifImage){  mLoadingView.hideLoadingUI();  mAnimatedLogoDrawable=new BaseGifDrawable(gifImage,Config.ARGB_8888);  mAnimatedLogoMatrix=new Matrix();  setMatrix(mAnimatedLogoDrawable.getIntrinsicWidth(),mAnimatedLogoDrawable.getIntrinsicHeight(),mAnimatedLogoMatrix,false);  mAnimatedLogoDrawable.setCallback(this);  mAnimatedLogoDrawable.start();}  }
class C{  public static String removeNonNumeric(String str){  return removeRegex(str,"[\\D]");}  }
class C{  @PickTriggerResult public int fromMultipleSources(@StringRes final int pTitleRes,@NonNull final PickSource... pPickSources){  return this.fromMultipleSources(this.mContext.getString(pTitleRes),pPickSources);}  }
class C{  @Override public void initialize(CordovaInterface cordova,CordovaWebView webView){  super.initialize(cordova,webView);  this.sensorManager=(SensorManager)cordova.getActivity().getSystemService(Context.SENSOR_SERVICE);}  }
class C{  public Plugin[] loadPlugins(File directory){  Validate.notNull(directory,"Directory cannot be null");  Validate.isTrue(directory.isDirectory(),"Directory must be a directory");  List<Plugin> result=new ArrayList<Plugin>();  Set<Pattern> filters=fileAssociations.keySet();  if (!(server.getUpdateFolder().equals(""))) {    updateDirectory=new File(directory,server.getUpdateFolder());  }  Map<String,File> plugins=new HashMap<String,File>();  Set<String> loadedPlugins=new HashSet<String>();  Map<String,Collection<String>> dependencies=new HashMap<String,Collection<String>>();  Map<String,Collection<String>> softDependencies=new HashMap<String,Collection<String>>();  for (  File file : directory.listFiles()) {    PluginLoader loader=null;    for (    Pattern filter : filters) {      Matcher match=filter.matcher(file.getName());      if (match.find()) {        loader=fileAssociations.get(filter);      }    }    if (loader == null)     continue;    PluginDescriptionFile description=null;    try {      description=loader.getPluginDescription(file);      String name=description.getName();      if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {        server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "': Restricted Name");        continue;      } else       if (description.rawName.indexOf(' ') != -1) {        server.getLogger().warning(String.format("Plugin `%s' uses the space-character (0x20) in its name `%s' - this is discouraged",description.getFullName(),description.rawName));      }    } catch (    InvalidDescriptionException ex) {      server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);      continue;    }    File replacedFile=plugins.put(description.getName(),file);    if (replacedFile != null) {      server.getLogger().severe(String.format("Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",description.getName(),file.getPath(),replacedFile.getPath(),directory.getPath()));    }    Collection<String> softDependencySet=description.getSoftDepend();    if (softDependencySet != null && !softDependencySet.isEmpty()) {      if (softDependencies.containsKey(description.getName())) {        softDependencies.get(description.getName()).addAll(softDependencySet);      } else {        softDependencies.put(description.getName(),new LinkedList<String>(softDependencySet));      }    }    Collection<String> dependencySet=description.getDepend();    if (dependencySet != null && !dependencySet.isEmpty()) {      dependencies.put(description.getName(),new LinkedList<String>(dependencySet));    }    Collection<String> loadBeforeSet=description.getLoadBefore();    if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {      for (      String loadBeforeTarget : loadBeforeSet) {        if (softDependencies.containsKey(loadBeforeTarget)) {          softDependencies.get(loadBeforeTarget).add(description.getName());        } else {          Collection<String> shortSoftDependency=new LinkedList<String>();          shortSoftDependency.add(description.getName());          softDependencies.put(loadBeforeTarget,shortSoftDependency);        }      }    }  }  while (!plugins.isEmpty()) {    boolean missingDependency=true;    Iterator<String> pluginIterator=plugins.keySet().iterator();    while (pluginIterator.hasNext()) {      String plugin=pluginIterator.next();      if (dependencies.containsKey(plugin)) {        Iterator<String> dependencyIterator=dependencies.get(plugin).iterator();        while (dependencyIterator.hasNext()) {          String dependency=dependencyIterator.next();          if (loadedPlugins.contains(dependency)) {            dependencyIterator.remove();          } else           if (!plugins.containsKey(dependency)) {            missingDependency=false;            File file=plugins.get(plugin);            pluginIterator.remove();            softDependencies.remove(plugin);            dependencies.remove(plugin);            server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",new UnknownDependencyException(dependency));            break;          }        }        if (dependencies.containsKey(plugin) && dependencies.get(plugin).isEmpty()) {          dependencies.remove(plugin);        }      }      if (softDependencies.containsKey(plugin)) {        Iterator<String> softDependencyIterator=softDependencies.get(plugin).iterator();        while (softDependencyIterator.hasNext()) {          String softDependency=softDependencyIterator.next();          if (!plugins.containsKey(softDependency)) {            softDependencyIterator.remove();          }        }        if (softDependencies.get(plugin).isEmpty()) {          softDependencies.remove(plugin);        }      }      if (!(dependencies.containsKey(plugin) || softDependencies.containsKey(plugin)) && plugins.containsKey(plugin)) {        File file=plugins.get(plugin);        pluginIterator.remove();        missingDependency=false;        try {          result.add(loadPlugin(file));          loadedPlugins.add(plugin);          continue;        } catch (        InvalidPluginException ex) {          server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);        }      }    }    if (missingDependency) {      pluginIterator=plugins.keySet().iterator();      while (pluginIterator.hasNext()) {        String plugin=pluginIterator.next();        if (!dependencies.containsKey(plugin)) {          softDependencies.remove(plugin);          missingDependency=false;          File file=plugins.get(plugin);          pluginIterator.remove();          try {            result.add(loadPlugin(file));            loadedPlugins.add(plugin);            break;          } catch (          InvalidPluginException ex) {            server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "'",ex);          }        }      }      if (missingDependency) {        softDependencies.clear();        dependencies.clear();        Iterator<File> failedPluginIterator=plugins.values().iterator();        while (failedPluginIterator.hasNext()) {          File file=failedPluginIterator.next();          failedPluginIterator.remove();          server.getLogger().log(Level.SEVERE,"Could not load '" + file.getPath() + "' in folder '"+ directory.getPath()+ "': circular dependency detected");        }      }    }  }  return result.toArray(new Plugin[result.size()]);}  }
class C{  public boolean isUserSynchronized(){  Debug.logInfo(this.getClass().getName() + " Authenticator isUserSynchronized()",module);  return true;}  }
class C{  public void scale(float scale){  m00*=scale;  m10*=scale;  m20*=scale;  m30*=scale;  m01*=scale;  m11*=scale;  m21*=scale;  m31*=scale;  m02*=scale;  m12*=scale;  m22*=scale;  m32*=scale;}  }
class C{  private void toggleSelection(final int position){  mTicketsAdapter.toggleSelection(position);  int count=mTicketsAdapter.getSelectedItemCount();  if (count == 0) {    mActionMode.finish();  } else {    mActionMode.setTitle(String.valueOf(count));    mActionMode.invalidate();  }}  }
class C{  public Collection<IDevice> filterByUsed(@NotNull Collection<IDevice> devices){  Set<IDevice> used=Sets.newHashSetWithExpectedSize(myDevicesUsedInLaunch.size());  for (  IDevice d : devices) {    if (myDevicesUsedInLaunch.contains(d.getSerialNumber())) {      used.add(d);    }  }  return used;}  }
class C{  public void onPut(){  if (this.isAjax()) {    JSON jo=new JSON();    jo.put(X.STATE,HttpServletResponse.SC_FORBIDDEN);    response(jo);  } else {    this.print("not support");  }}  }
class C{  public static IOFileFilter prefixFileFilter(String prefix,IOCase caseSensitivity){  return new PrefixFileFilter(prefix,caseSensitivity);}  }
class C{  public RetrofitClient createBaseApi(){  apiService=create(BaseApiService.class);  return this;}  }
class C{  public UnknownHostDescriptor(){  super(Host.UNKNOWN_HOST,NbBundle.getMessage(UnknownHostDescriptor.class,"LBL_Unknown_Host"),NbBundle.getMessage(UnknownHostDescriptor.class,"DESCR_Unknown"),NODE_ICON,POSITION_LAST,EXPAND_ON_FIRST_CHILD);}  }
class C{  public AudioMapType guessAudioMap() throws InvalidAudioChannelAssignmentException {  if (contextProvider.getSequenceContext().getSequenceCount(SequenceType.AUDIO) == 0) {    return null;  }  logger.debug("Trying to generate an audiomap.xml based on the EssenceDescriptor...");  prepareContext();  AudioMapType audioMap=createAudioMap();  logger.info("Generated an audiomap.xml based on the EssenceDescriptor: OK");  return audioMap;}  }
class C{  public ColourRampConfigPanel(ColourMapModelUpdateInterface parent,ColourMapModel model){  parentObj=parent;  colourMapModel=model;  createUI();}  }
class C{  public LogInputStream(InputStream in,int length) throws IOException {  this.in=in;  this.length=length;}  }
class C{  public static void removeLineTag(String sFile){  try {    FileReader frIn=new FileReader(sFile);    BufferedReader brIn=new BufferedReader(frIn);    String sLine;    while ((sLine=brIn.readLine()) != null) {      String[] sSplitLine=sLine.split("\\<line\\>|\\</line\\>");      sLine="";      for (int iCnt=0; iCnt < sSplitLine.length; iCnt++) {        sLine+=sSplitLine[iCnt];      }      System.out.println(sLine);    }  } catch (  FileNotFoundException fnfE) {    System.err.println(fnfE.getMessage());    fnfE.printStackTrace();    System.exit(1);  }catch (  IOException ioe) {    System.err.println(ioe.getMessage());    ioe.printStackTrace();    System.exit(2);  }}  }
class C{  public Observable<Object> toObserverable(LifecycleTransformer lifecycleTransformer){  return _bus.compose(lifecycleTransformer);}  }
class C{  public boolean remove(Unit item){  Chain<Unit> methodBody=mBody.getUnits();  if (item == mHead)   mHead=methodBody.getSuccOf(item); else   if (item == mTail)   mTail=methodBody.getPredOf(item);  return methodBody.remove(item);}  }
class C{  protected Array2DRowRealMatrix createTableau(final boolean maximize){  int width=numDecisionVariables + numSlackVariables + numArtificialVariables+ getNumObjectiveFunctions()+ 1;  int height=constraints.size() + getNumObjectiveFunctions();  Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);  if (getNumObjectiveFunctions() == 2) {    matrix.setEntry(0,0,-1);  }  int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;  matrix.setEntry(zIndex,zIndex,maximize ? 1 : -1);  RealVector objectiveCoefficients=maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,width - 1,maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());  if (!restrictToNonNegative) {    matrix.setEntry(zIndex,getSlackVariableOffset() - 1,getInvertedCoefficientSum(objectiveCoefficients));  }  int slackVar=0;  int artificialVar=0;  for (int i=0; i < constraints.size(); i++) {    LinearConstraint constraint=constraints.get(i);    int row=getNumObjectiveFunctions() + i;    copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);    if (!restrictToNonNegative) {      matrix.setEntry(row,getSlackVariableOffset() - 1,getInvertedCoefficientSum(constraint.getCoefficients()));    }    matrix.setEntry(row,width - 1,constraint.getValue());    if (constraint.getRelationship() == Relationship.LEQ) {      matrix.setEntry(row,getSlackVariableOffset() + slackVar++,1);    } else     if (constraint.getRelationship() == Relationship.GEQ) {      matrix.setEntry(row,getSlackVariableOffset() + slackVar++,-1);    }    if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {      matrix.setEntry(0,getArtificialVariableOffset() + artificialVar,1);      matrix.setEntry(row,getArtificialVariableOffset() + artificialVar++,1);      matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));    }  }  return matrix;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getSelectedBlock().isSelected() && (viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.DNA) || viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.cDNA)) && !viewer.isShowAminoAcids();}  }
class C{  public static void transform(InputStream srcStream,OutputStream destStream,InputStream stylesheetStream,String outputFormat) throws FOPException {  StreamSource src=new StreamSource(srcStream);  StreamSource stylesheet=stylesheetStream == null ? null : new StreamSource(stylesheetStream);  Fop fop=createFopInstance(destStream,outputFormat);  transform(src,stylesheet,fop);}  }
class C{  private void consoleSetup(){  logController=new LogController();  ConsolePrintStream.setup(logController);}  }
class C{  public static boolean isCompactionRequiredForTable(String metaFolderPath){  String minorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.minorCompactionRequiredFile;  String majorCompactionStatusFile=metaFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.majorCompactionRequiredFile;  try {    if (FileFactory.isFileExist(minorCompactionStatusFile,FileFactory.getFileType(minorCompactionStatusFile)) || FileFactory.isFileExist(majorCompactionStatusFile,FileFactory.getFileType(majorCompactionStatusFile))) {      return true;    }  } catch (  IOException e) {    LOGGER.error("Exception in isFileExist compaction request file " + e.getMessage());  }  return false;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public NewsfeedGetSuggestedSourcesQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  @SafeVarargs public static final <T>Map<T,T> asMap(final T... elements){  Map<T,T> map=new HashMap<>();  if (elements != null && (elements.length % 2 == 0)) {    for (int i=0; i < elements.length; i+=2) {      map.put(elements[i],elements[i + 1]);    }  }  return map;}  }
class C{  public boolean isNavigationImageEnabled(){  return navigationImageEnabled;}  }
class C{  protected void awaitCompletionComputeValuesAndShutdown(){{    final long before=System.currentTimeMillis();    runExecutorAndAwaitCompletion();    durationFlowFunctionConstruction=System.currentTimeMillis() - before;  }  if (computeValues) {    final long before=System.currentTimeMillis();    computeValues();    durationFlowFunctionApplication=System.currentTimeMillis() - before;  }  if (logger.isDebugEnabled())   printStats();  executor.shutdown();  runExecutorAndAwaitCompletion();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void reset(byte[] input,int start,int length){  buffer.reset(input,start,length);}  }
class C{  private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;    int maxOffset=mOverScrollOffsetLimit;    if (mUnconsumedOverScrollOffset > 0) {      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);    } else     if (mUnconsumedOverScrollOffset < 0) {      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);    }    setScrollingOffset(getUnconsumedScrollingOffset());  }  pullEdgeEffects(dxUnconsumed,dyUnconsumed);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public FieldRotation(final RotationOrder order,final RotationConvention convention,final T alpha1,final T alpha2,final T alpha3){  final T one=alpha1.getField().getOne();  final FieldRotation<T> r1=new FieldRotation<T>(new FieldVector3D<T>(one,order.getA1()),alpha1,convention);  final FieldRotation<T> r2=new FieldRotation<T>(new FieldVector3D<T>(one,order.getA2()),alpha2,convention);  final FieldRotation<T> r3=new FieldRotation<T>(new FieldVector3D<T>(one,order.getA3()),alpha3,convention);  final FieldRotation<T> composed=r1.compose(r2.compose(r3,convention),convention);  q0=composed.q0;  q1=composed.q1;  q2=composed.q2;  q3=composed.q3;}  }
class C{  private BooleanQuery inFilterQuery(String luceneFieldName,ApiFilter filter){  return filterToTermQueries(luceneFieldName,filter).collect(getBooleanQueryCollector(BooleanClause.Occur.SHOULD)).build();}  }
class C{  public Sort(String[] fields){  this(fields,new boolean[fields.length]);  Arrays.fill(m_ascend,true);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private static Result[] create(final ServiceDescriptor[] descs,final Configuration config) throws Exception {  logger.entering(ServiceStarter.class.getName(),"create",new Object[]{descs,config});  ArrayList proxies=new ArrayList();  Object result=null;  Exception problem=null;  ServiceDescriptor desc=null;  for (int i=0; i < descs.length; i++) {    desc=descs[i];    result=null;    problem=null;    try {      if (desc != null) {        result=desc.create(config);      }    } catch (    Exception e) {      problem=e;    } finally {      proxies.add(new Result(desc,result,problem));    }  }  logger.exiting(ServiceStarter.class.getName(),"create",proxies);  return (Result[])proxies.toArray(new Result[proxies.size()]);}  }
class C{  public void deleteTag(String tagPath) throws RepositoryException {  deleteNode(TAGS_ROOT + tagPath);}  }
class C{  protected void drawForm(Canvas c,float x,float y,int index,Legend legend){  if (legend.getColors()[index] == ColorTemplate.COLOR_SKIP)   return;  mLegendFormPaint.setColor(legend.getColors()[index]);  float formsize=legend.getFormSize();  float half=formsize / 2f;switch (legend.getForm()) {case CIRCLE:    c.drawCircle(x + half,y,half,mLegendFormPaint);  break;case SQUARE:c.drawRect(x,y - half,x + formsize,y + half,mLegendFormPaint);break;case LINE:c.drawLine(x,y,x + formsize,y,mLegendFormPaint);break;}}  }
class C{  public static void post(Runnable r){  sMainHandler.post(r);}  }
class C{  public void incrementReceiveCount(){  receiveCount++;  lastReceived=Calendar.getInstance().getTime();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set font=");  String fontName=np.getWordRespectCase();  np.matchIgnoreCase(";");  Font font=Font.decode(fontName);  boolean changed=false;  ViewerBase viewer=(ViewerBase)getViewer();  Set<Node> nodes=new HashSet<>();  if (viewer.getSelectedNodes().size() == 0 && viewer.getSelectedEdges().size() == 0) {    for (Node v=viewer.getGraph().getFirstNode(); v != null; v=v.getNext())     nodes.add(v);  } else   nodes.addAll(viewer.getSelectedNodes());  for (  Node v : nodes) {    viewer.setFont(v,font);    changed=true;  }  for (  Edge e : viewer.getSelectedEdges()) {    viewer.setFont(e,font);    changed=true;  }  if (changed)   viewer.repaint();}  }
class C{  public void skipNullTerminatedBytes() throws IOException {  int letter=1;  while (letter != 0) {    letter=ins.read();    if (letter == -1)     throw new IOException("skipNullTerminatedBytes(): failed (EOF)");  }}  }
class C{  static IBlockState applyColour(IBlockState state,Colour colour){  for (  IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {    if (prop.getName().equals("color") && prop.getValueClass() == net.minecraft.item.EnumDyeColor.class) {      net.minecraft.item.EnumDyeColor current=(net.minecraft.item.EnumDyeColor)state.getValue(prop);      if (!current.getName().equalsIgnoreCase(colour.name())) {        return state.withProperty(prop,EnumDyeColor.valueOf(colour.name()));      }    }  }  return state;}  }
class C{  public ByteArray(byte[] buf){  this(buf,0,buf.length);}  }
class C{  public void writeAuxBlocks(Map<String,byte[]> label2data) throws IOException {  getFooterSectionRMA6().setStartAuxDataSection(readerWriter.getPosition());  if (label2data == null)   readerWriter.writeInt(0); else {    readerWriter.writeInt(label2data.size());    for (    String label : label2data.keySet()) {      readerWriter.writeStringNoCompression(label);      final byte[] data=label2data.get(label);      if (data == null)       readerWriter.writeInt(0); else {        readerWriter.writeInt(data.length);        readerWriter.write(data,0,data.length);      }    }  }  getFooterSectionRMA6().setEndAuxDataSection(readerWriter.getPosition());}  }
class C{  @Override public void refreshSelection(){  forwardSelectedItems(lastNodeTypeList,lastSldDataList);}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  public static void v(String tag,String s,Object... args){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));}  }
class C{  public FieldHermiteInterpolator(){  this.abscissae=new ArrayList<T>();  this.topDiagonal=new ArrayList<T[]>();  this.bottomDiagonal=new ArrayList<T[]>();}  }
class C{  public void notify(LeaseRenewalEvent event){  LeaseListener l=get();  if (l != null) {    l.notify(event);  }}  }
class C{  public static double binomialCoefficientLog(final int n,final int k){  checkBinomial(n,k);  if ((n == k) || (k == 0)) {    return 0;  }  if ((k == 1) || (k == n - 1)) {    return Math.log(n);  }  if (n < 67) {    return Math.log(binomialCoefficient(n,k));  }  if (n < 1030) {    return Math.log(binomialCoefficientDouble(n,k));  }  if (k > n / 2) {    return binomialCoefficientLog(n,n - k);  }  double logSum=0;  for (int i=n - k + 1; i <= n; i++) {    logSum+=Math.log(i);  }  for (int i=2; i <= k; i++) {    logSum-=Math.log(i);  }  return logSum;}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  public SegmentMetadataQuery withIntervals(Collection<Interval> intervals){  return new SegmentMetadataQuery(getDataSource(),intervals);}  }
class C{  @Override public void fetch(Workspace ws,boolean prune) throws GitAPIException {  Repository repository=getRepository(ws.getSpaceKey());  try (Git git=Git.wrap(repository)){    Set<String> remotes=repository.getRemoteNames();    for (    String remote : remotes) {      FetchCommand command=git.fetch().setCheckFetchedObjects(true).setRemoveDeletedRefs(prune).setRemote(remote);      CredentialsProvider cp=this.getCredentialsProvider(ws);      command.setCredentialsProvider(cp);      command.call();    }  } }  }
class C{  protected void updateWeights(){  Iterator<WeightedEdge> iCurEdge=EdgeDistros.keySet().iterator();  while (iCurEdge.hasNext()) {    WeightedEdge eCur=iCurEdge.next();    eCur.setWeight(((Distribution)EdgeDistros.get(eCur)).average(false));  }}  }
class C{  public boolean isActive(){  return this.isActive.get();}  }
class C{  public IdQuery(Class<T> type,Object id,Object routing,QueryResultType queryResultType){  this(type.getName(),id,routing,queryResultType,0);}  }
class C{  protected double t(final double m1,final double m2,final double v1,final double v2,final double n1,final double n2){  return (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2));}  }
class C{  @NotNull public EditorFixture invokeQuickfixAction(@NotNull String labelPrefix){  waitForQuickfix();  invokeAction(EditorAction.SHOW_INTENTION_ACTIONS);  JBList popup=waitForPopup(robot);  clickPopupMenuItem(labelPrefix,popup,robot);  return this;}  }
class C{  public boolean dominates(Stmt s,Stmt t){  return getFlowBefore(t).contains(s);}  }
class C{  private static boolean isAssignableFrom(Type from,GenericArrayType to){  Type toGenericComponentType=to.getGenericComponentType();  if (toGenericComponentType instanceof ParameterizedType) {    Type t=from;    if (from instanceof GenericArrayType) {      t=((GenericArrayType)from).getGenericComponentType();    } else     if (from instanceof Class<?>) {      Class<?> classType=(Class<?>)from;      while (classType.isArray()) {        classType=classType.getComponentType();      }      t=classType;    }    return isAssignableFrom(t,(ParameterizedType)toGenericComponentType,new HashMap<String,Type>());  }  return true;}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    Expression geometryField=ExtractGeometryField.getGeometryField(fieldConfigVisitor);    Expression perpendicularOffset=fieldConfigVisitor.getExpression(FieldIdEnum.PERPENDICULAR_OFFSET);    Displacement displacement=null;    StandardData standardData=getStandardData();    PolygonSymbolizer polygonSymbolizer=(PolygonSymbolizer)SelectedSymbol.getInstance().getSymbolizer();    if (polygonSymbolizer != null) {      polygonSymbolizer.setName(standardData.name);      polygonSymbolizer.setDescription(standardData.description);      polygonSymbolizer.setUnitOfMeasure(standardData.unit);      polygonSymbolizer.setDisplacement(displacement);      polygonSymbolizer.setGeometry(geometryField);      polygonSymbolizer.setPerpendicularOffset(perpendicularOffset);      this.fireUpdateSymbol();    }  }}  }
class C{  private DataQueryParams preHandleQuery(DataQueryParams params){  if (params.hasSingleIndicatorAsDataFilter() || params.hasSingleReportingRateAsDataFilter()) {    DimensionalObject dx=params.getFilter(DATA_X_DIM_ID);    DataQueryParams query=DataQueryParams.newBuilder(params).addDimension(dx).removeFilter(DATA_X_DIM_ID).addProcessingHint(ProcessingHint.SINGLE_INDICATOR_REPORTING_RATE_FILTER_ITEM).build();    return query;  }  return params;}  }
class C{  @Override public AemTextField clear(){  super.clear();  bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);  return this;}  }
class C{  public static void removeNode(GeoServerNode geoServerNode,String nodeTitleToRemove){  if ((geoServerNode != null) && (nodeTitleToRemove != null)) {    for (int index=0; index < geoServerNode.getChildCount(); index++) {      DefaultMutableTreeNode node=(DefaultMutableTreeNode)geoServerNode.getChildAt(index);      String nodeName=(String)node.getUserObject();      if (nodeName != null) {        if (nodeName.startsWith(nodeTitleToRemove)) {          geoServerNode.remove(index);          break;        }      }    }  }}  }
class C{  private double melToLinFreq(double inputFreq){  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));}  }
class C{  private Node loadStateTree(BufferedReader s,double pdf[][][]) throws IOException, MaryConfigurationException {  Node rootNode=null;  Node lastNode=null;  StringTokenizer sline;  String aux, buf;  Node nextNode=new DecisionNode.BinaryByteDecisionNode(0,featDef);  rootNode=nextNode;  nextNode.setIsRoot(true);  int iaux, feaIndex, ndec, nleaf;  ndec=0;  nleaf=0;  Node node=null;  aux=s.readLine();  int id;  if (aux.indexOf("{") >= 0) {    while ((aux=s.readLine()) != null && aux.indexOf("}") < 0) {      sline=new StringTokenizer(aux);      buf=sline.nextToken();      if (buf.startsWith("-")) {        id=Integer.parseInt(buf.substring(1));        ndec++;      } else       if (buf.contentEquals("0"))       id=0; else       throw new MaryConfigurationException("LoadStateTree: line does not start with a decision node (-id), line=" + aux);      node=findDecisionNode(rootNode,id);      if (node == null)       throw new MaryConfigurationException("LoadStateTree: Node not found, index = " + buf); else {        buf=sline.nextToken();        String[] fea_val=buf.split("=");        feaIndex=featDef.getFeatureIndex(fea_val[0]);        if (fea_val[0].contentEquals("sentence_punc") || fea_val[0].contentEquals("prev_punctuation") || fea_val[0].contentEquals("next_punctuation")) {          fea_val[1]=phTrans.replaceBackPunc(fea_val[1]);        } else         if (fea_val[0].contains("tobi_")) {          fea_val[1]=phTrans.replaceBackToBI(fea_val[1]);        } else         if (fea_val[0].contains("phone")) {          fea_val[1]=phTrans.replaceBackTrickyPhones(fea_val[1]);        }        ((BinaryByteDecisionNode)node).setFeatureAndFeatureValue(fea_val[0],fea_val[1]);        buf=sline.nextToken();        if (buf.startsWith("-")) {          iaux=Integer.parseInt(buf.substring(1));          BinaryByteDecisionNode auxnode=new DecisionNode.BinaryByteDecisionNode(iaux,featDef);          ((DecisionNode)node).replaceDaughter(auxnode,1);        } else {          iaux=Integer.parseInt(buf.substring(buf.lastIndexOf("_") + 1,buf.length() - 1));          PdfLeafNode auxnode=new LeafNode.PdfLeafNode(iaux,pdf[iaux - 1]);          ((DecisionNode)node).replaceDaughter(auxnode,1);          nleaf++;        }        buf=sline.nextToken();        if (buf.startsWith("-")) {          iaux=Integer.parseInt(buf.substring(1));          BinaryByteDecisionNode auxnode=new DecisionNode.BinaryByteDecisionNode(iaux,featDef);          ((DecisionNode)node).replaceDaughter(auxnode,0);        } else {          iaux=Integer.parseInt(buf.substring(buf.lastIndexOf("_") + 1,buf.length() - 1));          PdfLeafNode auxnode=new LeafNode.PdfLeafNode(iaux,pdf[iaux - 1]);          ((DecisionNode)node).replaceDaughter(auxnode,0);          nleaf++;        }      }      sline=null;    }  }  Log.d(Mary.LOG,"loadStateTree: loaded CART contains " + (ndec + 1) + " Decision nodes and "+ nleaf+ " Leaf nodes.");  return rootNode;}  }
class C{  @NotNull public static String colorToString(@NotNull Color color){  long longColor=(color.getRed() << 16) | (color.getGreen() << 8) | color.getBlue();  if (color.getAlpha() != 0xFF) {    longColor|=(long)color.getAlpha() << 24;    return String.format("#%08x",longColor);  }  return String.format("#%06x",longColor);}  }
class C{  public Pages(Map<String,PageDescription> pages){  pagesCollection=pages;}  }
class C{  public boolean isIgnoreInactive(){  return this.ignoreInactive;}  }
class C{  public void onFindToolbarHidden(){}  }
class C{  private synchronized final void wakeUp(){  notify();}  }
class C{  public AppHolder(View itemView,AppAboutObject object){  super(itemView);  itemView.findViewById(R.id.item_about_app_container).setOnClickListener(this);  ImageView icon=(ImageView)itemView.findViewById(R.id.item_about_app_icon);  icon.setImageResource(object.iconId);  TextView text=(TextView)itemView.findViewById(R.id.item_about_app_title);  text.setText(object.text);  this.id=object.id;}  }
class C{  private static SubjectKeyIdentifier createSubjectKeyIdentifier(Key key){  SubjectPublicKeyInfo publicKeyInfo=SubjectPublicKeyInfo.getInstance(key.getEncoded());  return new BcX509ExtensionUtils().createSubjectKeyIdentifier(publicKeyInfo);}  }
class C{  private void initialize() throws BindException {  String root=System.getProperty("org.jini.rio.tools.webster.root");  if (root == null)   root=System.getProperty("user.dir");  initialize(root);}  }
class C{  public boolean itemExists(String name) throws JMSException {  HashMap body=(HashMap)Body;  return body.containsKey(name);}  }
class C{  public ArraySet(int capacity){  if (capacity == 0) {    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  @Override public StringBuffer format(final double value,final StringBuffer buffer,final FieldPosition position){  return format(Double.valueOf(value),buffer,position);}  }
class C{  private static String separeMetaTagsContent(String content){  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);  return htmlDecode(result);}  }
class C{  public void delete(){  mBaseName.delete();  mBackupName.delete();}  }
class C{  private String httpArray(Collection<Integer> classIds){  String s="";  for (  Object o : classIds) {    s=s + o.toString() + ",";  }  return s.substring(0,s.length() - 1);}  }
class C{  @AfterClass public void afterClass(){  toCleanUp.add(initialExperiment);  toCleanUp.add(completeExperiment);}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  private boolean closeToMaxRange(){  BoundedRangeModel model=getModel();  return model.getMaximum() - (model.getValue() + model.getExtent()) < STREAMING_POSITION_THRESHOLD * model.getExtent();}  }
class C{  public Edge addEdge(Vertex vHead,Vertex vTail) throws Exception {  WeightedEdge e;  if ((e=(WeightedEdge)utils.locateDirectedEdgeInGraph(this,vHead,vTail)) == null) {    e=(WeightedEdge)super.addEdge(vHead,vTail);    e.setWeight(1.0);  } else {    e.setWeight(e.getWeight() + 1.0);  }  return e;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public PagesGetQuery sitePreview(Boolean value){  return unsafeParam("site_preview",value);}  }
class C{  public NewsfeedGetQuery startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public static Vector<String> processVoiceExampleText(String text){  StringTokenizer st=new StringTokenizer(text,"#");  Vector<String> sentences=null;  while (st.hasMoreTokens()) {    if (sentences == null)     sentences=new Vector<String>();    sentences.add(st.nextToken());  }  return sentences;}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  int entryType=-1;  Vector entryArgs=new Vector();  if (localName.equals("Base")) {    entryType=Catalog.BASE;    entryArgs.add(atts.getValue("HRef"));    debug.message(4,"Base",atts.getValue("HRef"));  } else   if (localName.equals("Delegate")) {    entryType=Catalog.DELEGATE_PUBLIC;    entryArgs.add(atts.getValue("PublicID"));    entryArgs.add(atts.getValue("HRef"));    debug.message(4,"Delegate",PublicId.normalize(atts.getValue("PublicID")),atts.getValue("HRef"));  } else   if (localName.equals("Extend")) {    entryType=Catalog.CATALOG;    entryArgs.add(atts.getValue("HRef"));    debug.message(4,"Extend",atts.getValue("HRef"));  } else   if (localName.equals("Map")) {    entryType=Catalog.PUBLIC;    entryArgs.add(atts.getValue("PublicID"));    entryArgs.add(atts.getValue("HRef"));    debug.message(4,"Map",PublicId.normalize(atts.getValue("PublicID")),atts.getValue("HRef"));  } else   if (localName.equals("Remap")) {    entryType=Catalog.SYSTEM;    entryArgs.add(atts.getValue("SystemID"));    entryArgs.add(atts.getValue("HRef"));    debug.message(4,"Remap",atts.getValue("SystemID"),atts.getValue("HRef"));  } else   if (localName.equals("XCatalog")) {  } else {    debug.message(1,"Invalid catalog entry type",localName);  }  if (entryType >= 0) {    try {      CatalogEntry ce=new CatalogEntry(entryType,entryArgs);      catalog.addEntry(ce);    } catch (    CatalogException cex) {      if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {        debug.message(1,"Invalid catalog entry type",localName);      } else       if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {        debug.message(1,"Invalid catalog entry",localName);      }    }  }}  }
class C{  public static int checkSurveyResponse(HttpServletRequest request,String surveyId){  Delegator delegator=(Delegator)request.getAttribute("delegator");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String productStoreId=getProductStoreId(request);  if (userLogin == null) {    return -1;  }  return checkSurveyResponse(delegator,userLogin.getString("partyId"),productStoreId,surveyId);}  }
class C{  public void validatePoliciesReadOnlyAccess(){  boolean arePoliciesReadOnly=true;  try {    arePoliciesReadOnly=globalZkCache().exists(POLICIES_READONLY_FLAG_PATH);  } catch (  Exception e) {    log.warn("Unable to fetch contents of [{}] from global zookeeper",POLICIES_READONLY_FLAG_PATH,e);    throw new RestException(e);  }  if (arePoliciesReadOnly) {    log.debug("Policies are read-only. Broker cannot do read-write operations");    throw new RestException(Status.FORBIDDEN,"Broker is forbidden to do read-write operations");  } else {    if (globalZkCache().getZooKeeper().getState() != States.CONNECTED) {      log.debug("Broker is not connected to the global zookeeper");      throw new RestException(Status.PRECONDITION_FAILED,"Broker needs to be connected to global zookeeper before making a read-write operation");    } else {      log.debug("Broker is allowed to make read-write operations");    }  }}  }
class C{  @deprecated protected int handleNext(){  CharacterIterator text=getText();  if ((this.cachedBreakPositions == null) || (this.positionInCache == this.cachedBreakPositions.length - 1)) {    int startPos=text.getIndex();    this.fDictionaryCharCount=0;    int result=super.handleNext();    if ((!this.usingCTDictionary) && (this.fDictionaryCharCount > 1) && (result - startPos > 1)) {      divideUpDictionaryRange(startPos,result);    } else {      this.cachedBreakPositions=null;      return result;    }  }  if (this.cachedBreakPositions != null) {    this.positionInCache+=1;    text.setIndex(this.cachedBreakPositions[this.positionInCache]);    return this.cachedBreakPositions[this.positionInCache];  }  Assert.assrt(false);  return 55537;}  }
class C{  public Snackbar(ITextComponent message,Side side){  super(message,side);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201238,skilltarget,num0,skillcaster,skillname);}  }
class C{  @Override public void prepare() throws IllegalStateException, IOException {  Log.d(SBMP_TAG,"prepare() 444");  Log.d(SBMP_TAG,"onPreparedCallback is: " + ((this.mOnPreparedCallback == null) ? "null" : "non-null"));  if (pmInterface == null) {    Log.d(SBMP_TAG,"prepare: pmInterface is null");    if (!ConnectPlayMediaService()) {      Log.d(SBMP_TAG,"prepare: Failed to connect play media service");      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  if (pmInterface != null) {    Log.d(SBMP_TAG,"prepare: pmInterface isn't null");    try {      Log.d(SBMP_TAG,"prepare: Remote invoke pmInterface.prepare(" + ServiceBackedMediaPlayer.this.sessionId + ")");      pmInterface.prepare(ServiceBackedMediaPlayer.this.sessionId);      Log.d(SBMP_TAG,"prepare: prepared");    } catch (    RemoteException e) {      Log.d(SBMP_TAG,"prepare: RemoteException");      e.printStackTrace();      throw new IllegalStateException();    }  }  Log.d(SBMP_TAG,"Done with prepare()");}  }
class C{  private static Integer openKey(Integer baseKey,String keyPath,int securityToken){  int[] result=invokeRegistryMethod(_openKeyMethod,baseKey,toByteArray(keyPath),securityToken);  int errorCode=result[ERROR_CODE];switch (errorCode) {case ERROR_SUCCESS:    return result[NATIVE_HANDLE];case ERROR_FILE_NOT_FOUND:  return null;case ERROR_ACCESS_DENIED:throw new WindowsRegistryException("Access denied. Path=" + keyPath + ", securityToken="+ securityToken);default :throw new WindowsRegistryException("Error. Code=" + errorCode + ", Path="+ keyPath+ ", securityToken="+ securityToken);}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_POLISH_SUCCEED(int nameId){  return new SM_SYSTEM_MESSAGE(1401650,new DescriptionId(nameId));}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  private FTPDataTransferConnectionProvider openDataTransferChannel() throws IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException {  if (modezSupported && compressionEnabled) {    if (!modezEnabled) {      communication.sendFTPCommand("MODE Z");      FTPReply r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.isSuccessCode()) {        modezEnabled=true;      }    }  } else {    if (modezEnabled) {      communication.sendFTPCommand("MODE S");      FTPReply r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.isSuccessCode()) {        modezEnabled=false;      }    }  }  if (passive) {    return openPassiveDataTransferChannel();  } else {    return openActiveDataTransferChannel();  }}  }
class C{  private void notify_2(){  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_2,notifyCallback_2);}  }
class C{  @deprecated protected boolean matchNodesCanHaveValues(){  return true;}  }
class C{  public float determinant(){  float fCo00=m11 * m22 - m12 * m21;  float fCo10=m12 * m20 - m10 * m22;  float fCo20=m10 * m21 - m11 * m20;  float fDet=m00 * fCo00 + m01 * fCo10 + m02 * fCo20;  return fDet;}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  public PagesClearCacheQuery(VkApiClient client,UserActor actor,String url){  super(client,"pages.clearCache",OkResponse.class);  accessToken(actor.getAccessToken());  url(url);}  }
class C{  public static UserFeedback createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,UserFeedback.class);}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  Collection<? extends ClientRequestResult> handleAlarmRequest(final ClientRequest alarmRequest){  final Collection<AlarmValue> alarms=new ArrayList<>(alarmRequest.getTagIds().size());  for (  Long alarmId : alarmRequest.getTagIds()) {    if (alarmCache.hasKey(alarmId)) {      final Alarm alarm=alarmCache.getCopy(alarmId);switch (alarmRequest.getResultType()) {case TRANSFER_ALARM_LIST:        Long tagId=alarm.getTagId();      if (tagLocationService.isInTagCache(tagId)) {        Tag tag=tagLocationService.getCopy(tagId);        alarms.add(TransferObjectFactory.createAlarmValue(alarm,tag));      } else {        LOG.warn("handleAlarmRequest() - unrecognized Tag with id " + tagId);        alarms.add(TransferObjectFactory.createAlarmValue(alarm));      }    break;default :  LOG.error("handleAlarmRequest() - Could not generate response message. Unknown enum ResultType " + alarmRequest.getResultType());}} else {LOG.warn("handleAlarmRequest() - request for unknown alarm with id " + alarmId);}}if (LOG.isDebugEnabled()) {LOG.debug("Finished processing Alarm request: returning " + alarms.size() + " Alarms");}return alarms;}  }
class C{  private DocumentFragment traverseSameContainer(int how){  DocumentFragment frag=null;  if (how != DELETE_CONTENTS) {    frag=fDocument.createDocumentFragment();  }  if (fStartOffset == fEndOffset) {    return frag;  }  final short nodeType=fStartContainer.getNodeType();  if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.COMMENT_NODE || nodeType == Node.PROCESSING_INSTRUCTION_NODE) {    String s=fStartContainer.getNodeValue();    String sub=s.substring(fStartOffset,fEndOffset);    if (how != CLONE_CONTENTS) {      ((CharacterDataImpl)fStartContainer).deleteData(fStartOffset,fEndOffset - fStartOffset);      collapse(true);    }    if (how == DELETE_CONTENTS) {      return null;    }    if (nodeType == Node.TEXT_NODE) {      frag.appendChild(fDocument.createTextNode(sub));    } else     if (nodeType == Node.CDATA_SECTION_NODE) {      frag.appendChild(fDocument.createCDATASection(sub));    } else     if (nodeType == Node.COMMENT_NODE) {      frag.appendChild(fDocument.createComment(sub));    } else {      frag.appendChild(fDocument.createProcessingInstruction(fStartContainer.getNodeName(),sub));    }    return frag;  }  Node n=getSelectedNode(fStartContainer,fStartOffset);  int cnt=fEndOffset - fStartOffset;  while (cnt > 0) {    Node sibling=n.getNextSibling();    Node xferNode=traverseFullySelected(n,how);    if (frag != null)     frag.appendChild(xferNode);    --cnt;    n=sibling;  }  if (how != CLONE_CONTENTS) {    collapse(true);  }  return frag;}  }
class C{  public static StorableLocationFence entering(double latitude,double longitude,double radius){  return new StorableLocationFence(ENTER_TYPE,latitude,longitude,radius,0);}  }
class C{  private List<String> convertByteArrayListToStringValueList(List<byte[]> dictionaryByteArrayList){  List<String> valueList=new ArrayList<>(dictionaryByteArrayList.size());  for (  byte[] value : dictionaryByteArrayList) {    valueList.add(new String(value,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  }  return valueList;}  }
class C{  public static String urlEncodeArgs(Map<String,? extends Object> args){  return urlEncodeArgs(args,true);}  }
class C{  public WallRepostQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {}  }
class C{  public DecorationCursor queryDecorations(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_DECORATIONS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="skill_1_name ASC";  qh.Limit=null;  return new DecorationCursor(wrapJoinHelper(builderDecoration(),qh));}  }
class C{  @Nonnull public static FormValidation validateWorkspaceTemplate(@Nonnull String value){  Set<FormValidation> formValidations=new HashSet<>();  Set<String> existingMessages=new HashSet<>();  if (!Util.isRelativePath(value)) {    formValidations.add(error(Messages.formValidation_NotRelativePath()));  }  String invalidParenthesesMsg=Messages.formValidation_NotValidParentheses();  int bracketCount=0;  char[] chars=value.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '{') {      bracketCount++;    } else     if (c == '}') {      bracketCount--;    }    if (bracketCount < 0) {      if (existingMessages.add(invalidParenthesesMsg)) {        formValidations.add(error(invalidParenthesesMsg));      }    }    if (c == '$' && i < chars.length - 1 && chars[i + 1] != '{') {      String message=Messages.formValidation_UnsafeSymbol();      if (existingMessages.add(message)) {        formValidations.add(FormValidation.warning(message));      }    }  }  if (bracketCount != 0) {    if (existingMessages.add(invalidParenthesesMsg)) {      formValidations.add(error(invalidParenthesesMsg));    }  }  return FormValidation.aggregate(formValidations);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void type(String string){  for (int i=0; i < string.length(); i++) {    char c=string.charAt(i);    type(c);  }}  }
class C{  public static String keyOfIdGenerator(Class<?> clazz){  try {    return ID_GENERATOR_KEY_CACHE.get(clazz);  } catch (  ExecutionException e) {    throw new KeyException(e);  }}  }
class C{  @Override public final void write(byte ba[]) throws IOException {  dis.write(ba,0,ba.length);}  }
class C{  public String message(){  return rawResponse.message();}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  protected String insertSegment(Item segmentItem,Element syllable,boolean deep){  if (segmentItem == null || deep && syllable == null) {    throw new NullPointerException("Null arguments to insertSegment()");  }  if (deep && !syllable.getTagName().equals(MaryXML.SYLLABLE)) {    throw new IllegalArgumentException("Segments can only be inserted in <syllable> elements");  }  String segmentString=segmentItem.toString();  Voice maryVoice=FreeTTSVoices.getMaryVoice(segmentItem.getUtterance().getVoice());  if (deep) {    Document doc=syllable.getOwnerDocument();    Element segment=MaryXML.createElement(doc,MaryXML.PHONE);    syllable.appendChild(segment);    segment.setAttribute("p",segmentString);    if (segmentItem.getFeatures().isPresent("end")) {      float endInSeconds=segmentItem.getFeatures().getFloat("end");      int endInMillis=(int)(1000 * endInSeconds);      segment.setAttribute("end",String.valueOf(endInMillis));    }    if (segmentItem.getFeatures().isPresent("mbr_dur")) {      int mbrDur=segmentItem.getFeatures().getInt("mbr_dur");      segment.setAttribute("d",String.valueOf(mbrDur));    }    if (segmentItem.getFeatures().isPresent("mbr_targets")) {      String mbrTargets=segmentItem.getFeatures().getString("mbr_targets");      if (!mbrTargets.equals("")) {        segment.setAttribute("f0",mbrTargets);      }    }  }  return segmentString;}  }
class C{  protected GroupsCreateQuery title(String value){  return unsafeParam("title",value);}  }
class C{  @Override public XSSimpleType createTypeRestriction(String name,String targetNamespace,short finalSet,XSSimpleType base,XSObjectList annotations){  if (fDeclPool != null) {    XSSimpleTypeDecl st=fDeclPool.getSimpleTypeDecl();    return st.setRestrictionValues((XSSimpleTypeDecl)base,name,targetNamespace,finalSet,annotations);  }  return new XSSimpleTypeDecl((XSSimpleTypeDecl)base,name,targetNamespace,finalSet,false,annotations);}  }
class C{  public void tag(String tag,String name,String value){  tag(tag,name,value,true);}  }
class C{  public void startInitialisation(){  startInitialisation(ZWaveNodeInitStage.EMPTYNODE);}  }
class C{  public static void startMe(Context _context){  Intent intent=new Intent(_context,OnBoardingActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  _context.startActivity(intent);}  }
class C{  private static void addToArray(Integer[] sum,int[] add){  for (int i=0; i < add.length; i++) {    sum[i]+=add[i];  }}  }
class C{  public boolean optBoolean(String key){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return false;  if (token.type == LazyNode.VALUE_TRUE)   return true;  return false;}  }
class C{  private CountingThreadPoolExecutor createExecutor(int numThreads){  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  protected Map loadTextLexicon(InputStream is,int estimatedSize) throws IOException {  Map lexicon=new LinkedHashMap(estimatedSize * 4 / 3);  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  String line;  line=reader.readLine();  while (line != null) {    if (!line.startsWith("***")) {      parseAndAdd(lexicon,line);    }    line=reader.readLine();  }  return lexicon;}  }
class C{  public void startWatching(String fileName){synchronized (mObservedChildren) {    if (!mObservedChildren.containsKey(fileName)) {      mObservedChildren.put(fileName,Boolean.valueOf(false));    }  }  if (new File(mPath).exists()) {    startWatching();    Log_OC.d(TAG,"Started watching parent folder " + mPath + "/");  }}  }
class C{  protected boolean isJson(HttpServletRequest request){  String type=request.getContentType();  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;  if (request.getPathInfo().endsWith(".json")) {    type=MediaType.APPLICATION_JSON_VALUE;  }  return isCompatibleWith(type,MediaType.APPLICATION_JSON);}  }
class C{  public static Stream<DoubleSummaryStatistics> shiftingWindowSummarizingLong(DoubleStream doubleStream,int rollingFactor){  Objects.requireNonNull(doubleStream);  RollingOfDoubleSpliterator ofDoubleSpliterator=RollingOfDoubleSpliterator.of(doubleStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofDoubleSpliterator,doubleStream.isParallel()).onClose(null).map(null);}  }
class C{  private void chooseDataSourceToOpen(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200288,skillname);}  }
class C{  protected void readChangeLogNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {  if (parser == null || changeLog == null)   return;  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOG);  String bulletedList=parser.getAttributeValue(null,ATTRIBUTE_BULLETEDLIST);  if (bulletedList == null || bulletedList.equals("true")) {    changeLog.setBulletedList(true);    super.bulletedList=true;  } else {    changeLog.setBulletedList(false);    super.bulletedList=false;  }  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String tag=parser.getName();    if (tag.equals(TAG_CHANGELOGVERSION)) {      readChangeLogVersionNode(parser,changeLog);    }  }}  }
class C{  public GroupsEditQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.edit",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_HE_IS_NEW_LEADER(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1400581,value0,value1,value2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_GM_LEAVE_MSG(String value0){  return new SM_SYSTEM_MESSAGE(1300565,value0);}  }
class C{  public static ExpectedCondition<Boolean> nodeExist(final Session session,final String nodePath){  LOG.debug("Checking if node '{}' exists",nodePath);  return null;}  }
class C{  public LeaseMap createLeaseMap(long duration){  return new ConstrainableRegistrarLeaseMap(this,duration);}  }
class C{  public String create(DispatchContext ctx,GenericValue userLogin){  if ("WIP".equals(product.getString("productTypeId"))) {    return null;  }  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  Map<String,Object> parameters=UtilMisc.<String,Object>toMap("userLogin",userLogin);  if (isBuilt) {    try {      List<BOMNode> bom=FastList.newInstance();      BOMTree tree=new BOMTree(productId,"MANUF_COMPONENT",null,BOMTree.EXPLOSION_MANUFACTURING,delegator,dispatcher,userLogin);      tree.setRootQuantity(quantity);      tree.print(bom);      requirementStartDate=tree.getRoot().getStartDate(manufacturingFacilityId,requiredByDate,true);    } catch (    Exception e) {      Debug.logError(e,"Error : computing the requirement start date. " + e.getMessage(),module);    }  }  parameters.put("productId",productId);  parameters.put("statusId","REQ_PROPOSED");  parameters.put("facilityId",(isBuilt ? manufacturingFacilityId : facilityId));  parameters.put("requiredByDate",requiredByDate);  parameters.put("requirementStartDate",requirementStartDate);  parameters.put("quantity",quantity);  parameters.put("requirementTypeId",(isBuilt ? "INTERNAL_REQUIREMENT" : "PRODUCT_REQUIREMENT"));  if (mrpName != null) {    parameters.put("description","MRP_" + mrpName);  } else {    parameters.put("description","Automatically generated by MRP");  }  try {    Map<String,Object> result=dispatcher.runSync("createRequirement",parameters);    return (String)result.get("requirementId");  } catch (  GenericServiceException e) {    Debug.logError(e,"Error : createRequirement with parameters = " + parameters + "--"+ e.getMessage(),module);    return null;  }}  }
class C{  public static Process buildCreateAllFieldsProcess(Long id,Properties properties){  if (properties == null) {    properties=new Properties();  }  Process process=Process.create("P_TEST" + id).id(id).description("foo").aliveTag(AliveTag.create("P_TEST" + id + ":ALIVE").build(),70000).statusTag(StatusTag.create("P_TEST" + id + ":STATUS").build()).maxMessageDelay(2000).maxMessageSize(200).build();  properties.setProperty("name","P_TEST" + id);  properties.setProperty("description","foo");  properties.setProperty("statusTagId",String.valueOf(100l));  properties.setProperty("aliveInterval",String.valueOf(70000));  properties.setProperty("aliveTagId",String.valueOf(101l));  properties.setProperty("maxMessageDelay",String.valueOf(2000));  properties.setProperty("maxMessageSize",String.valueOf(200));  return process;}  }
class C{  @SuppressFBWarnings("CHROMIUM_SYNCHRONIZED_METHOD") public synchronized boolean calledOnValidThread(){  ensureThreadIdAssigned();  return mThreadId.equals(Thread.currentThread().getId());}  }
class C{  public static void databaseMigrations(){  Data data=injector.getInstance(Data.class);  Repo repo=injector.getInstance(Repo.class);  Api api=injector.getInstance(Api.class);  data.createTableIfMissing();  repo.addSourceToTable();  repo.addBranchToTable();  api.createTableIfMissing();}  }
class C{  protected svm_node[] documentToNodeArray(SimpleTextDocument dDoc){  TreeSet tsNodes=new TreeSet();  DocumentNGramGraph dg=dDoc.getDocumentGraph();  for (int iCnt=dg.getMinSize(); iCnt <= dg.getMaxSize(); iCnt++) {    UniqueVertexGraph g=dg.getGraphLevelByNGramSize(iCnt);    Iterator edgeIter=g.getEdgeSet().iterator();    while (edgeIter.hasNext()) {      WeightedEdge we=(WeightedEdge)edgeIter.next();      if (dg.degredationDegree(we) > 3)       continue;      svm_ordered_node snCur=new svm_ordered_node();      String sData=(we.getVertexA().getLabel() + " " + we.getVertexB().getLabel());      if (!EdgeMapping.containsKey(sData))       EdgeMapping.put(sData,EdgeMapping.size() + 1);      snCur.index=((Integer)EdgeMapping.get(sData)).intValue();      snCur.value=we.getWeight();      tsNodes.add(snCur);    }  }  svm_node[] snaTemp=new svm_node[tsNodes.size()];  Iterator iIter=tsNodes.iterator();  int iCnt=0;  while (iIter.hasNext()) {    snaTemp[iCnt++]=(svm_node)iIter.next();  }  return snaTemp;}  }
class C{  private void notifySLDEditorFileHasUpdated(){  for (  SLDEditorDataUpdateInterface listener : sldEditorFileUpdateListenerList) {    if (listener != null) {      listener.sldDataUpdated(sldData,dataEditedFlag);    }  }}  }
class C{  public Builder position(String position){  this.position=position;  return this;}  }
class C{  public void decreasePangPangEnemyLife(String... protocols){  for (int i=0; i < Settings.nPangPangEnemyHeight; i++)   for (int j=0; j < Settings.nPangPangEnemyWidth; j++)   if (mEnemy[i][j].getsUnitName().equals(protocols[0])) {    mEnemy[i][j].decreaseShield();    if (mEnemy[i][j].get_Is_Dead()) {      sendMessageInTheRoomPeople(Settings._ANSWER_PANGAPNG_ENEMY_COLLISION_EVENT + "",protocols[0]);      mpCtr.set_Enemy_Cnt_Minus();      break;    }  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public static boolean checkIfDataTypeNotTimeStamp(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.LITERAL) {    if (!(((LiteralExpression)expression).getLiteralExpDataType() == DataType.TIMESTAMP)) {      return true;    }  }  for (  Expression child : expression.getChildren()) {    if (checkIfDataTypeNotTimeStamp(child)) {      return true;    }  }  return false;}  }
class C{  public void terminate(){synchronized (registrars) {    if (terminated)     return;    terminated=true;  }  nukeThreads();}  }
class C{  public FastByteArrayOutputStream(int size){  super();  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }  buf=new byte[size];}  }
class C{  public static Zutmat o(Zutmat U) throws JampackException {  if (U.nrow != U.ncol)   throw new JampackException("Cannot compute the inverse of a rectangular matrix.");  return new Zutmat(Solve.aib(U,Eye.o(U.nrow)));}  }
class C{  public static TypeRef of(MessageType messageType){  return interner.intern(new TypeRef(Type.TYPE_MESSAGE,Cardinality.OPTIONAL,messageType,null));}  }
class C{  protected EmptyFileFilter(){}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static FieldSelector of(){  return new FieldSelector(ImmutableList.<Field>of());}  }
class C{  public static String applyUriReplace(String uriSource,Configuration conf){  if (uriSource == null)   return null;  String[] uriReplace=conf.getStrings(OUTPUT_URI_REPLACE);  if (uriReplace == null)   return uriSource;  for (int i=0; i < uriReplace.length - 1; i+=2) {    String replacement=uriReplace[i + 1].trim();    replacement=replacement.substring(1,replacement.length() - 1);    uriSource=uriSource.replaceAll(uriReplace[i],replacement);  }  return uriSource;}  }
class C{  public boolean isEmpty(){  return state.equals(EMPTY);}  }
class C{  protected void drawXAxis(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));  gc.setColor(Color.BLACK);  int x=5;  int y=getHeight() - bottomMargin + 25;  if (!isTranspose())   gc.drawString(getChartData().getSeriesLabel(),x,y); else   gc.drawString(getChartData().getClassesLabel(),x,y);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BoundTypeAccess fullCopy(){  BoundTypeAccess tree=(BoundTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public LogicalMetric(TemplateDruidQuery templateDruidQuery,ResultSetMapper calculation,String name,String description){  this(templateDruidQuery,calculation,name,name,DEFAULT_CATEGORY,description);}  }
class C{  @Override public synchronized boolean onTouchEvent(MotionEvent event){  if (!isEnabled())   return false;  final int action=event.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:    mActivePointerId=event.getPointerId(event.getPointerCount() - 1);  pointerIndex=event.findPointerIndex(mActivePointerId);float mDownMotionX=event.getX(pointerIndex);pressedThumb=evalPressedThumb(mDownMotionX);if (pressedThumb == null) return super.onTouchEvent(event);touchDown(event.getX(pointerIndex),event.getY(pointerIndex));setPressed(true);invalidate();onStartTrackingTouch();trackTouchEvent(event);attemptClaimDrag();break;case MotionEvent.ACTION_MOVE:if (pressedThumb != null) {if (mIsDragging) {touchMove(event.getX(pointerIndex),event.getY(pointerIndex));trackTouchEvent(event);}if (onSeekbarChangeListener != null) {onSeekbarChangeListener.valueChanged(getSelectedMinValue());}}break;case MotionEvent.ACTION_UP:if (mIsDragging) {trackTouchEvent(event);onStopTrackingTouch();setPressed(false);touchUp(event.getX(pointerIndex),event.getY(pointerIndex));if (onSeekbarFinalValueListener != null) {onSeekbarFinalValueListener.finalValue(getSelectedMinValue());}} else {onStartTrackingTouch();trackTouchEvent(event);onStopTrackingTouch();}pressedThumb=null;invalidate();if (onSeekbarChangeListener != null) {onSeekbarChangeListener.valueChanged(getSelectedMinValue());}break;case MotionEvent.ACTION_POINTER_DOWN:{break;}case MotionEvent.ACTION_POINTER_UP:invalidate();break;case MotionEvent.ACTION_CANCEL:if (mIsDragging) {onStopTrackingTouch();setPressed(false);touchUp(event.getX(pointerIndex),event.getY(pointerIndex));}invalidate();break;}return true;}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=getTransformedPositions();  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  float xoffset=mYAxis.getXOffset();  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") / 2.5f + mYAxis.getYOffset();  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float xPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() - xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() + xoffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() + xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() - xoffset;    }  }  drawYLabels(c,xPos,positions,yoffset);}  }
class C{  public MarketCreateCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public void clear(){  uid=0;  matchRecord=null;  fName2Id.clear();  taxonId=0;}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){  DateTime intervalEnd=interval.getEnd();  DateTime sliceStart=interval.getStart();  DateTime periodStart=timeGrain.roundFloor(sliceStart);  if (!sliceStart.equals(periodStart)) {    LOG.info("Interval {} is not aligned to TimeGrain {} starting {}",interval,timeGrain,periodStart);    throw new IllegalArgumentException("Interval must be aligned to the TimeGrain starting " + periodStart);  }  List<Interval> intervalSlices=new ArrayList<>();  while (sliceStart.isBefore(intervalEnd)) {    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);    Interval slicedInterval=new Interval(sliceStart,sliceEnd);    if (!interval.contains(slicedInterval)) {      LOG.info("Interval {} is not a multiple of TimeGrain {}",interval,timeGrain);      throw new IllegalArgumentException("Interval must be a multiple of the TimeGrain");    }    intervalSlices.add(slicedInterval);    sliceStart=sliceEnd;  }  LOG.debug("Sliced interval {} into {} slices of {} grain",interval,intervalSlices.size(),timeGrain);  return intervalSlices;}  }
class C{  @SubscribeEvent public void onClientTick(TickEvent.ClientTickEvent ev){  if (ev != null && ev.phase == Phase.START) {    for (    InternalKey binding : this.additionalKeys) {      if (binding.isKeyDown()) {        binding.onKeyDown();      }      if (binding.isPressed()) {        binding.onPressed();      }    }  }}  }
class C{  public boolean addAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public static void main(String[] sArgs){  TAC2008TopicFileSet t=null;  try {    t=new TAC2008TopicFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_topics.xml","/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  } catch (  ParserConfigurationException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }catch (  SAXException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }catch (  IOException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }  if (t == null)   return;  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  System.err.flush();  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  private void handleUpdatedObjects(Collection<OpenJPAStateManager> sms,ArrayList<Exception> exceptions,IJSpace space){  HashSet<OpenJPAStateManager> stateManagersToRestore=new HashSet<OpenJPAStateManager>();  for (  OpenJPAStateManager sm : sms) {    final ClassMetaData cm=sm.getMetaData();    try {      if (_classesRelationStatus.containsKey(cm.getDescribedType())) {        final FieldOwnerInformation ownerInformation=_relationsManager.getStateManagerToUpdate((StateManager)sm);        final IEntryPacket entry=getEntryPacketFromStateManager(space,ownerInformation.getStateManager());        for (        FieldMetaData fmd : cm.getFields()) {          _relationsManager.initializeOwnerReferencesForField((StateManager)sm,fmd);        }        _relationsManager.removeOwnedEntitiesStateManagers(stateManagersToRestore,ownerInformation.getStateManager());        if (ownerInformation.getStateManager().getVersion() != null)         entry.setVersion((Integer)ownerInformation.getStateManager().getVersion());        final FieldMetaData[] fmds=ownerInformation.getStateManager().getMetaData().getFields();        int spacePropertyIndex=-1;        int routingPropertyIndex=entry.getTypeDescriptor().getRoutingPropertyId();        for (int i=0; i < fmds.length; i++) {          if (fmds[i].isVersion())           continue;          spacePropertyIndex++;          if (i != ownerInformation.getMetaData().getIndex() && !fmds[i].isPrimaryKey() && spacePropertyIndex != routingPropertyIndex) {            entry.setFieldValue(spacePropertyIndex,null);          }        }        space.write(entry,_transaction,Lease.FOREVER,0,UpdateModifiers.PARTIAL_UPDATE);        ownerInformation.getStateManager().setVersion(entry.getVersion());      } else {        final IEntryPacket entry=getEntryPacketFromStateManager(space,sm);        final FieldMetaData[] fmds=cm.getFields();        int spacePropertyIndex=-1;        int routingPropertyIndex=entry.getTypeDescriptor().getRoutingPropertyId();        for (int i=0; i < fmds.length; i++) {          if (fmds[i].isVersion())           continue;          spacePropertyIndex++;          if (!sm.getDirty().get(i) && !fmds[i].isPrimaryKey() && spacePropertyIndex != routingPropertyIndex) {            entry.setFieldValue(spacePropertyIndex,null);          } else {            _relationsManager.initializeOwnerReferencesForField((StateManager)sm,fmds[i]);          }        }        if (sm.getVersion() != null)         entry.setVersion((Integer)sm.getVersion());        space.write(entry,_transaction,Lease.FOREVER,0,UpdateModifiers.PARTIAL_UPDATE);        sm.setVersion(entry.getVersion());      }    } catch (    Exception e) {      exceptions.add(e);    } finally {      _relationsManager.restoreRemovedStateManagers(stateManagersToRestore);    }  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  registrarID.writeBytes(out);}  }
class C{  public BasicToApiKeyAuthenticationFilter(Map<String,String> basicAuthToApiKeyMap){  _basicAuthToApiKeyMap=basicAuthToApiKeyMap;}  }
class C{  public static boolean isFifo(int mod){  return Modifiers.contains(mod,FIFO);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignXorExpr fullCopy(){  AssignXorExpr tree=(AssignXorExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void encode(InputStream inputStream,OutputStream outputStream,int wrapAt) throws IOException {  Base64OutputStream aux=new Base64OutputStream(outputStream,wrapAt);  copy(inputStream,aux);  aux.commit();}  }
class C{  public void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=null;  try {    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    throw new RuntimeException("File [" + fileName + "] was not found.");  }  try {    hdr=new MaryHeader(dis);    if (hdr.getType() != MaryHeader.SCOST) {      throw new RuntimeException("File [" + fileName + "] is not a valid Mary Units file.");    }    numberOfUnits=dis.readInt();    if (numberOfUnits < 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number of units. Aborting.");    }    sCost=new double[numberOfUnits];    for (int i=0; i < numberOfUnits; i++) {      sCost[i]=dis.readFloat();    }  } catch (  IOException e) {    throw new RuntimeException("Reading the Mary header from file [" + fileName + "] failed.",e);  }}  }
class C{  public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  private void download(boolean neutral,List<Selectable> list){  for (int i=0; i != list.size(); ++i) {    if ((neutral || list.get(i).isChecked()) && !list.get(i).isDisable()) {      mDownloadList.add(mDetailAdapter.getItem(i));    }  }  if (!mDownloadList.isEmpty()) {    showProgressDialog();    if (PermissionUtils.requestPermission(this,REQUEST_DOWNLOAD)) {      mPresenter.updateIndex(mDetailAdapter.getDateSet());    }  }}  }
class C{  public float pseudoDistance(Vector3f point){  return normal.dot(point) - constant;}  }
class C{  protected void configurePipeline(){  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fNamespaceScanner == null) {      fNamespaceScanner=new XMLNSDocumentScannerImpl();      addComponent(fNamespaceScanner);    }    fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);    fNamespaceScanner.setDTDValidator(null);    fScanner=fNamespaceScanner;  } else {    if (fNonNSScanner == null) {      fNonNSScanner=new XMLDocumentScannerImpl();      addComponent(fNonNSScanner);    }    fProperties.put(DOCUMENT_SCANNER,fNonNSScanner);    fScanner=fNonNSScanner;  }  fScanner.setDocumentHandler(fDocumentHandler);  fLastComponent=fScanner;  if (fDTDScanner != null) {    fDTDScanner.setDTDHandler(fDTDHandler);    fDTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);  }}  }
class C{  public void downUpdate(Activity activity,Update update,UpdateBuilder builder){  UpdateConfig.getConfig().context(activity);  DefaultDownloadCB downloadCB=new DefaultDownloadCB(activity);  downloadCB.setBuilder(builder);  downloadCB.setUpdate(update);  downloadCB.setDownloadCB(builder.getDownloadCB());  DownloadWorker downloadWorker=builder.getDownloadWorker();  if (downloadWorker.isRunning()) {    Log.e("Updater","Already have a download task running");    downloadCB.onUpdateError(-1,"Already have a download task running");    return;  }  downloadWorker.setUrl(update.getUpdateUrl());  downloadWorker.setDownloadCB(downloadCB);  downloadWorker.setCacheFileName(builder.getFileCreator().create(update.getVersionName()));  executor.download(downloadWorker);}  }
class C{  public Bundler putSerializable(String key,Serializable value){  bundle.putSerializable(key,value);  return this;}  }
class C{  public void configurePermissionIsOffPreferences(Preference osWarning,Preference osWarningExtra,Activity activity,boolean specificCategory){  Intent perAppIntent=getIntentToEnableOsPerAppPermission(activity);  Intent globalIntent=getIntentToEnableOsGlobalPermission(activity);  String perAppMessage=getMessageForEnablingOsPerAppPermission(activity,!specificCategory);  String globalMessage=getMessageForEnablingOsGlobalPermission(activity);  Resources resources=activity.getResources();  int color=ApiCompatibilityUtils.getColor(resources,R.color.pref_accent_color);  ForegroundColorSpan linkSpan=new ForegroundColorSpan(color);  if (perAppIntent != null) {    SpannableString messageWithLink=SpanApplier.applySpans(perAppMessage,new SpanInfo("<link>","</link>",linkSpan));    osWarning.setTitle(messageWithLink);    osWarning.setIntent(perAppIntent);    if (!specificCategory) {      osWarning.setIcon(getDisabledInAndroidIcon(activity));    }  }  if (globalIntent != null) {    SpannableString messageWithLink=SpanApplier.applySpans(globalMessage,new SpanInfo("<link>","</link>",linkSpan));    osWarningExtra.setTitle(messageWithLink);    osWarningExtra.setIntent(globalIntent);    if (!specificCategory) {      if (perAppIntent == null) {        osWarningExtra.setIcon(getDisabledInAndroidIcon(activity));      } else {        Drawable transparent=new ColorDrawable(Color.TRANSPARENT);        osWarningExtra.setIcon(transparent);      }    }  }}  }
class C{  private void fillDeclaredPrefixes(XMLStreamReader reader){  fDeclaredPrefixes.clear();  final int len=reader.getNamespaceCount();  for (int i=0; i < len; ++i) {    String prefix=reader.getNamespacePrefix(i);    fDeclaredPrefixes.add(prefix != null ? prefix : "");  }}  }
class C{  public Object writeReplace() throws ObjectStreamException {  if (!_cacheable)   return _fullSerializationObjectUncached;  LRMIInvocationContext currentContext=LRMIInvocationContext.getCurrentContext();  ProxyWriteType proxyWriteType=currentContext.getProxyWriteType();  if (proxyWriteType != ProxyWriteType.UNCACHED && !currentContext.isUseStubCache())   proxyWriteType=ProxyWriteType.UNCACHED;switch (proxyWriteType) {case UNCACHED:    if (_stubCacheLogger.isLoggable(Level.FINER))     _stubCacheLogger.finer("serializing full uncached stub, toString() = " + this.toString());  return _fullSerializationObjectUncached;case CACHED_LIGHT:if (_lightSerializationObject != null) {  if (_stubCacheLogger.isLoggable(Level.FINEST))   _stubCacheLogger.finest("serializing light stub with id = " + ((ILRMIProxy)_handler).getStubId() + ", stub toString() = "+ this.toString());  return _lightSerializationObject;}case CACHED_FULL:if (_stubCacheLogger.isLoggable(Level.FINE)) _stubCacheLogger.fine("serializing full stub for caching with id = " + ((ILRMIProxy)_handler).getStubId() + ", stub toString() = "+ this.toString());return new ProxyReplace(this.getClass().getInterfaces(),getInvocatioHandler(),true,true,this);default :throw new RuntimeException("Unexpected ProxyWriteType received " + proxyWriteType);}}  }
class C{  public void unpin(Buffer buff){  BlockId blk=buff.block();  PinnedBuffer pinnedBuff=pinnedBuffers.get(blk);  if (pinnedBuff != null) {    pinnedBuff.pinnedCount--;    if (pinnedBuff.pinnedCount == 0) {      bufferPool.unpin(buff);      pinnedBuffers.remove(blk);synchronized (bufferPool) {        bufferPool.notifyAll();      }    }  }}  }
class C{  public int verifyTransition(int newState){  int currentState=getState();  boolean validTransition=false;switch (newState) {case STARTING:    if (currentState == STOPPED)     validTransition=true;  break;case STARTED:if (currentState == STARTING) validTransition=true;break;case STOPPED:if (currentState == STARTED || currentState == STARTING) validTransition=true;break;case ABORTED:validTransition=true;break;case ABORTING:validTransition=true;break;default :throw new IllegalStateException("Illegal state [" + newState + "]");}if (!validTransition) throw new IllegalStateException("New state [" + newState + "] not allowed from ["+ getState()+ "]");return newState;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  @Override public String checkIDRefID(){  return (fIdIdrefChecking) ? super.checkIDRefID() : null;}  }
class C{  public TopNMetric(TopNMetricType type,String previousStop,SortDirection order){  this(type,previousStop);  if (order == SortDirection.ASC) {    this.type=TopNMetricType.INVERTED;    this.nested=Optional.of(new TopNMetric(type,previousStop));    this.previousStop=Optional.empty();  }}  }
class C{  public void writeFileContent(String content,Path path,FileMatch sourceFileMatch) throws CommandException {  try {    File outputFile=path.toFile();    BOMInputStream inputStream=new BOMInputStream(FileUtils.openInputStream(sourceFileMatch.getPath().toFile()),false,boms);    if (inputStream.hasBOM()) {      FileUtils.writeByteArrayToFile(outputFile,inputStream.getBOM().getBytes());      FileUtils.writeByteArrayToFile(outputFile,content.getBytes(inputStream.getBOMCharsetName()),true);    } else {      FileUtils.writeStringToFile(outputFile,content,StandardCharsets.UTF_8);    }  } catch (  IOException e) {    throw new CommandException("Cannot write file content in path: " + path.toString(),e);  }}  }
class C{  public WallRepostQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static double[] quantiles(int n,double[] values){  values=(double[])values.clone();  Arrays.sort(values);  double[] qtls=new double[n + 1];  for (int i=0; i <= n; ++i) {    qtls[i]=values[((values.length - 1) * i) / n];  }  return qtls;}  }
class C{  public static SpaceIndex createPathIndex(String path,SpaceIndexType indexType){  return createPathIndex(path,indexType,false);}  }
class C{  public static Map ordinalMap(Iterator tuples,String field,Comparator cmp){  Object[] o=ordinalArray(tuples,field,cmp);  HashMap map=new HashMap();  for (int i=0; i < o.length; ++i)   map.put(o[i],new Integer(i));  return map;}  }
class C{  public InfoflowResults analyzeAPKFile(String fileName,boolean enableImplicitFlows,boolean enableStaticFields,boolean flowSensitiveAliasing) throws IOException, XmlPullParserException {  String androidJars=System.getenv("ANDROID_JARS");  if (androidJars == null)   androidJars=System.getProperty("ANDROID_JARS");  if (androidJars == null)   throw new RuntimeException("Android JAR dir not set");  System.out.println("Loading Android.jar files from " + androidJars);  SetupApplication setupApplication=new SetupApplication(androidJars,fileName);  setupApplication.setTaintWrapper(new EasyTaintWrapper("EasyTaintWrapperSource.txt"));  setupApplication.calculateSourcesSinksEntrypoints("SourcesAndSinks.txt");  setupApplication.setEnableImplicitFlows(enableImplicitFlows);  setupApplication.setEnableStaticFieldTracking(enableStaticFields);  setupApplication.setFlowSensitiveAliasing(flowSensitiveAliasing);  return setupApplication.runInfoflow();}  }
class C{  public static Spacer create(){  return new Spacer();}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public static void splashText(String str){  logger.info(str);  if (splashScreenObj != null && splashScreenObj.isVisible()) {    splashGraphics.setPaint(Color.BLACK);    Font font=getFont();    splashGraphics.setFont(font);    splashGraphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);    splashGraphics.setColor(Color.black);    splashGraphics.drawString(str,(int)getTextPosition().getX(),(int)getTextPosition().getY());    splashScreenObj.update();  }}  }
class C{  @RequestMapping(value="/race-normals/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRaceNormal(@PathVariable String id){  log.debug("REST request to delete RaceNormal : {}",id);  raceNormalRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("raceNormal",id.toString())).build();}  }
class C{  public SimplePollingContainerConfigurer eventListenerAnnotation(Object eventListener){  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();  annotationEventListenerAdapter.setDelegate(eventListener);  annotationEventListenerAdapter.afterPropertiesSet();  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);  return this;}  }
class C{  private void startContentSynchronizations(List<SyncOperation> filesToSyncContents,OwnCloudClient client) throws OperationCancelledException {  Log_OC.v(TAG,"Starting content synchronization... ");  RemoteOperationResult contentsResult=null;  for (  SyncOperation op : filesToSyncContents) {    if (mCancellationRequested.get()) {      throw new OperationCancelledException();    }    contentsResult=op.execute(getStorageManager(),mContext);    if (!contentsResult.isSuccess()) {      if (contentsResult.getCode() == ResultCode.SYNC_CONFLICT) {        mConflictsFound++;      } else {        mFailsInFileSyncsFound++;        if (contentsResult.getException() != null) {          Log_OC.e(TAG,"Error while synchronizing file : " + contentsResult.getLogMessage(),contentsResult.getException());        } else {          Log_OC.e(TAG,"Error while synchronizing file : " + contentsResult.getLogMessage());        }      }    }  }}  }
class C{  public static UUID uuidForTimeMillis(long timeMillis){  return uuidForTimeMillis(timeMillis,0);}  }
class C{  public static Map<String,Object> jsonStringToMap(String jsonString,DataSchema dataSchema){  Map<String,Object> value=new HashMap<>();  JSONParser jsonParser=new JSONParser();  try {    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);    for (    Object key : jsonObj.keySet()) {      String mapKey=key.toString();      if (jsonObj.get(key) != null) {        if (dataSchema.isArrayElement((String)key)) {          ArrayList<String> mapValue=StringUtils.jsonArrayStringToArrayList(jsonObj.get(key).toString());          value.put(mapKey,mapValue);        } else {          value.put(mapKey,jsonObj.get(key).toString());        }      }    }  } catch (  ParseException e) {    logger.warn("Could not json-decode string: " + jsonString,e);  }catch (  NumberFormatException e) {    logger.warn("Could not parse field into number: " + jsonString,e);  }  return value;}  }
class C{  public UrlValidator(long options){  this(null,null,options);}  }
class C{  public WallGetByIdQuery(VkApiClient client,List<String> posts){  super(client,"wall.getById",Utils.buildParametrizedType(List.class,WallpostFull.class));  posts(posts);}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  try {    return DAAParser.isMeganizedDAAFile((new File(directory,fileName)).getPath(),true);  } catch (  IOException e) {    return false;  }}  }
class C{  protected void initConfig(KadminConsumerConfig config){}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  int out=offset;  int count=0;  if (fOffset == 0) {    if (length > fBuffer.length) {      length=fBuffer.length;    }    if (fSurrogate != -1) {      ch[out++]=(char)fSurrogate;      fSurrogate=-1;      length--;    }    count=fInputStream.read(fBuffer,0,length);    if (count == -1) {      return -1;    }    count+=out - offset;  } else {    count=fOffset;    fOffset=0;  }  final int total=count;  int in;  byte byte1;  final byte byte0=0;  for (in=0; in < total; in++) {    byte1=fBuffer[in];    if (byte1 >= byte0) {      ch[out++]=(char)byte1;    } else {      break;    }  }  for (; in < total; in++) {    byte1=fBuffer[in];    if (byte1 >= byte0) {      ch[out++]=(char)byte1;      continue;    }    int b0=byte1 & 0x0FF;    if ((b0 & 0xE0) == 0xC0 && (b0 & 0x1E) != 0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,2);        }        count++;      }      if ((b1 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,2,b1);      }      int c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);      ch[out++]=(char)c;      count-=1;      continue;    }    if ((b0 & 0xF0) == 0xE0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,3);        }        count++;      }      if ((b1 & 0xC0) != 0x80 || (b0 == 0xED && b1 >= 0xA0) || ((b0 & 0x0F) == 0 && (b1 & 0x20) == 0)) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,3,b1);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,3);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,3,b2);      }      int c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);      ch[out++]=(char)c;      count-=2;      continue;    }    if ((b0 & 0xF8) == 0xF0) {      int b1=-1;      if (++in < total) {        b1=fBuffer[in] & 0x00FF;      } else {        b1=fInputStream.read();        if (b1 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fOffset=1;            return out - offset;          }          expectedByte(2,4);        }        count++;      }      if ((b1 & 0xC0) != 0x80 || ((b1 & 0x30) == 0 && (b0 & 0x07) == 0)) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fOffset=2;          return out - offset;        }        invalidByte(2,4,b1);      }      int b2=-1;      if (++in < total) {        b2=fBuffer[in] & 0x00FF;      } else {        b2=fInputStream.read();        if (b2 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fOffset=2;            return out - offset;          }          expectedByte(3,4);        }        count++;      }      if ((b2 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fOffset=3;          return out - offset;        }        invalidByte(3,4,b2);      }      int b3=-1;      if (++in < total) {        b3=fBuffer[in] & 0x00FF;      } else {        b3=fInputStream.read();        if (b3 == -1) {          if (out > offset) {            fBuffer[0]=(byte)b0;            fBuffer[1]=(byte)b1;            fBuffer[2]=(byte)b2;            fOffset=3;            return out - offset;          }          expectedByte(4,4);        }        count++;      }      if ((b3 & 0xC0) != 0x80) {        if (out > offset) {          fBuffer[0]=(byte)b0;          fBuffer[1]=(byte)b1;          fBuffer[2]=(byte)b2;          fBuffer[3]=(byte)b3;          fOffset=4;          return out - offset;        }        invalidByte(4,4,b2);      }      int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);      if (uuuuu > 0x10) {        invalidSurrogate(uuuuu);      }      int wwww=uuuuu - 1;      int zzzz=b1 & 0x000F;      int yyyyyy=b2 & 0x003F;      int xxxxxx=b3 & 0x003F;      int hs=0xD800 | ((wwww << 6) & 0x03C0) | (zzzz << 2)| (yyyyyy >> 4);      int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;      ch[out++]=(char)hs;      if ((count-=2) <= length) {        ch[out++]=(char)ls;      } else {        fSurrogate=ls;        --count;      }      continue;    }    if (out > offset) {      fBuffer[0]=(byte)b0;      fOffset=1;      return out - offset;    }    invalidByte(1,1,b0);  }  if (DEBUG_READ) {    System.out.println("read(char[]," + offset + ','+ length+ "): count="+ count);  }  return count;}  }
class C{  public boolean forEachEntry(TShortLongProcedure procedure){  byte[] states=_states;  short[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public boolean isError(){  return state == State.ERROR;}  }
class C{  public void createNetwork(int[] cycle0,Taxa taxa,SplitSystem splits,PhyloTreeView view) throws Exception {  ntax=taxa.getBits().cardinality();  PhyloTree graph=(PhyloTree)view.getGraph();  graph.clear();  int[] cycle=normalizeCycle(cycle0);  for (int i=1; i <= ntax; i++)   graph.setTaxon2Cycle(cycle[i],i);  initGraph(taxa,splits,cycle,graph);  List<Integer> interiorSplits=getInteriorSplitsOrdered(taxa,splits);  BitSet usedSplits=new BitSet();{    for (    Integer s : interiorSplits) {      wrapSplit(taxa,splits,s,cycle,graph);      usedSplits.set(s,true);    }  }  removeTemporaryTrivialEdges(graph);  assignAnglesToEdges(splits,cycle,graph,new HashSet());  assignAnglesToEdges(splits,cycle,graph,new HashSet());  if (graph.getNumberOfNodes() > 0 && graph.getNumberOfEdges() > 0) {    Node v=graph.getTaxon2Node(1);    Edge e=graph.getFirstAdjacentEdge(v);    double angle=Math.PI + graph.getAngle(e);    for (e=graph.getFirstEdge(); e != null; e=graph.getNextEdge(e)) {      graph.setAngle(e,graph.getAngle(e) - angle);    }    assignCoordinatesToNodes(optionUseWeights,view);  } else   assignCoordinatesToNodes(optionUseWeights,view);  view.resetViews();}  }
class C{  public CM_MOVE_IN_AIR(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void cleanUp(){  cacheFragment=null;}  }
class C{  public boolean hasConflicts(){  if (myRootNode == null) {    return false;  }  return treeHasConflicts(myRootNode);}  }
class C{  public BasePanelPadding(Box box){  this.box=box;}  }
class C{  protected static void chooseAttack(NpcAI2 npcAI,int delay){  AttackIntention attackIntention=npcAI.chooseAttackIntention();  if (npcAI.isLogging()) {    AI2Logger.info(npcAI,"AttackManager: chooseAttack " + attackIntention + " delay "+ delay);  }  if (!npcAI.canThink()) {    return;  }switch (attackIntention) {case SIMPLE_ATTACK:    SimpleAttackManager.performAttack(npcAI,delay);  break;case SKILL_ATTACK:SkillAttackManager.performAttack(npcAI,delay);break;case FINISH_ATTACK:npcAI.think();break;default :break;}}  }
class C{  @Override public void notifyElementUpdated(final Tag tag){  List<Alarm> alarmList=evaluateAlarms(tag);  notifyListeners(tag,alarmList);}  }
class C{  private static void push(double[] vals,double val){  for (int i=vals.length - 1; i > 0; i--) {    vals[i]=vals[i - 1];  }  vals[0]=val;}  }
class C{  public View(String typeName,String sqlExpression,QueryResultType queryResultType,Object... parameters){  super(typeName,sqlExpression,queryResultType,parameters);}  }
class C{  public double totalCount(){  double total=0.0;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    total+=counter.totalCount();  }  return total;}  }
class C{  public void toggleFullscreen(){  toggleFullscreenButton.click();  verifyFullscreen();}  }
class C{  public boolean contains(double x,double y){  return false;}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public void scroll(@SwingCoordinate int x,@SwingCoordinate int y,int scrollAmount){}  }
class C{  public static int mulAndCheck(int x,int y){  long m=((long)x) * ((long)y);  if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {    throw new ArithmeticException("overflow: mul");  }  return (int)m;}  }
class C{  public boolean touchInside(){  return insideTouching != null && !insideTouching.isEmpty();}  }
class C{  protected BoardOpenTopicQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public CacheEntry(IEntryHolder entryHolder,ITypeDesc typeDesc){  super(entryHolder,typeDesc);  _className=entryHolder.getClassName();}  }
class C{  @GET @Signed(selector="anil",domain="server.com") @Produces("text/plain") public String hello(){  return "hello world";}  }
class C{  public Matrix arrayTimes(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] * B.A[i][j];    }  }  return X;}  }
class C{  public HadoopFileSystemStore(FileSystem fs){  super();  hadoopFileSystem=fs;}  }
class C{  public static <T extends Serializable,R>DistributedTask<T,R> task(Callable<T> callable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){  return new CallableDistributedTaskAdapter<T,R>(callable,reducer,filter);}  }
class C{  public static void main(String[] args){  File destinationDirectory=Compiler.NO_DESTINATION_DIRECTORY;  File[] optionalSourcePath=null;  File[] classPath={new File(".")};  File[] optionalExtDirs=null;  File[] optionalBootClassPath=null;  String optionalCharacterEncoding=null;  boolean verbose=false;  boolean debugSource=true;  boolean debugLines=true;  boolean debugVars=false;  StringPattern[] warningHandlePatterns=Compiler.DEFAULT_WARNING_HANDLE_PATTERNS;  boolean rebuild=false;  int i;  for (i=0; i < args.length; ++i) {    String arg=args[i];    if (arg.charAt(0) != '-')     break;    if ("-d".equals(arg)) {      destinationDirectory=new File(args[++i]);    } else     if ("-sourcepath".equals(arg)) {      optionalSourcePath=PathResourceFinder.parsePath(args[++i]);    } else     if ("-classpath".equals(arg)) {      classPath=PathResourceFinder.parsePath(args[++i]);    } else     if ("-extdirs".equals(arg)) {      optionalExtDirs=PathResourceFinder.parsePath(args[++i]);    } else     if ("-bootclasspath".equals(arg)) {      optionalBootClassPath=PathResourceFinder.parsePath(args[++i]);    } else     if ("-encoding".equals(arg)) {      optionalCharacterEncoding=args[++i];    } else     if ("-verbose".equals(arg)) {      verbose=true;    } else     if ("-g".equals(arg)) {      debugSource=true;      debugLines=true;      debugVars=true;    } else     if (arg.startsWith("-g:")) {      if (arg.indexOf("none") != -1)       debugSource=(debugLines=(debugVars=false));      if (arg.indexOf("source") != -1)       debugSource=true;      if (arg.indexOf("lines") != -1)       debugLines=true;      if (arg.indexOf("vars") != -1)       debugVars=true;    } else     if (arg.startsWith("-warn:")) {      warningHandlePatterns=StringPattern.parseCombinedPattern(arg.substring(6));    } else     if ("-rebuild".equals(arg)) {      rebuild=true;    } else     if ("-help".equals(arg)) {      System.out.printf(Compiler.USAGE,(Object[])null);      System.exit(1);    } else {      System.err.println("Unrecognized command line option \"" + arg + "\"; try \"-help\".");      System.exit(1);    }  }  if (i == args.length) {    System.err.println("No source files given on command line; try \"-help\".");    System.exit(1);  }  File[] sourceFiles=new File[args.length - i];  for (int j=i; j < args.length; ++j)   sourceFiles[j - i]=new File(args[j]);  final Compiler compiler=new Compiler(optionalSourcePath,classPath,optionalExtDirs,optionalBootClassPath,destinationDirectory,optionalCharacterEncoding,verbose,debugSource,debugLines,debugVars,warningHandlePatterns,rebuild);  try {    compiler.compile(sourceFiles);  } catch (  Exception e) {    if (verbose) {      e.printStackTrace();    } else {      System.err.println(e.toString());    }    System.exit(1);  }}  }
class C{  private synchronized boolean incRef(){  if (_closed) {    return false;  }  _referenceCount+=1;  _log.info("Data store reference count updated: [id = {}, reference count = {}]",_id,_referenceCount);  return true;}  }
class C{  private void typeAlphabetic(char c){  if (Character.isUpperCase(c)) {    controller.keyPress(KeyEvent.VK_SHIFT);  }  controller.keyPress(Character.toUpperCase(c));  controller.keyRelease(Character.toUpperCase(c));  if (Character.isUpperCase(c)) {    controller.keyRelease(KeyEvent.VK_SHIFT);  }}  }
class C{  public static Properties readProperties(String name){  Properties props=new Properties();  if (globalLoader != null) {    InputStream is=null;    try {      String serviceFile="META-INF/services/" + name.toLowerCase() + ".properties";      Enumeration<URL> locs=globalLoader.getResources(serviceFile);      while (locs.hasMoreElements()) {        URL loc=locs.nextElement();        if (loc != null) {          try {            is=loc.openStream();            Properties p=new Properties();            p.load(is);            props.putAll(p);          }  finally {            if (is != null) {              is.close();            }          }        }      }    } catch (    IOException ex) {      LOG.log(Level.SEVERE,null,ex);    } finally {      try {        if (is != null) {          is.close();        }      } catch (      IOException ex) {        LOG.log(Level.SEVERE,null,ex);      }    }  }  return props;}  }
class C{  private static ArrayList<SelectableIcon> sampleIcons(){  ArrayList<SelectableIcon> selectionDialogsColors=new ArrayList<>();  selectionDialogsColors.add(new SelectableIcon("puzzle","Puzzle",R.drawable.sample_icon_puzzle));  selectionDialogsColors.add(new SelectableIcon("android","Android",R.drawable.sample_icon_android));  selectionDialogsColors.add(new SelectableIcon("bookmark","Bookmark",R.drawable.sample_icon_bookmark));  return selectionDialogsColors;}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  Quant nq=new Quant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != null) {    transIndex=findClosest(transparent);  }}  }
class C{  public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  String targetKey=buildRemoteName(account.name,file.getRemotePath());  if (mBoundListeners.get(targetKey) == listener) {    mBoundListeners.remove(targetKey);  }}  }
class C{  public void writeExifData() throws IOException {  if (this.outFile == null) {    return;  }  if (this.aperture != null) {    this.outFile.setAttribute(ExifInterface.TAG_APERTURE,this.aperture);  }  if (this.datetime != null) {    this.outFile.setAttribute(ExifInterface.TAG_DATETIME,this.datetime);  }  if (this.exposureTime != null) {    this.outFile.setAttribute(ExifInterface.TAG_EXPOSURE_TIME,this.exposureTime);  }  if (this.flash != null) {    this.outFile.setAttribute(ExifInterface.TAG_FLASH,this.flash);  }  if (this.focalLength != null) {    this.outFile.setAttribute(ExifInterface.TAG_FOCAL_LENGTH,this.focalLength);  }  if (this.gpsAltitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE,this.gpsAltitude);  }  if (this.gpsAltitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF,this.gpsAltitudeRef);  }  if (this.gpsDateStamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_DATESTAMP,this.gpsDateStamp);  }  if (this.gpsLatitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE,this.gpsLatitude);  }  if (this.gpsLatitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF,this.gpsLatitudeRef);  }  if (this.gpsLongitude != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE,this.gpsLongitude);  }  if (this.gpsLongitudeRef != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF,this.gpsLongitudeRef);  }  if (this.gpsProcessingMethod != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD,this.gpsProcessingMethod);  }  if (this.gpsTimestamp != null) {    this.outFile.setAttribute(ExifInterface.TAG_GPS_TIMESTAMP,this.gpsTimestamp);  }  if (this.iso != null) {    this.outFile.setAttribute(ExifInterface.TAG_ISO,this.iso);  }  if (this.make != null) {    this.outFile.setAttribute(ExifInterface.TAG_MAKE,this.make);  }  if (this.model != null) {    this.outFile.setAttribute(ExifInterface.TAG_MODEL,this.model);  }  if (this.orientation != null) {    this.outFile.setAttribute(ExifInterface.TAG_ORIENTATION,this.orientation);  }  if (this.whiteBalance != null) {    this.outFile.setAttribute(ExifInterface.TAG_WHITE_BALANCE,this.whiteBalance);  }  this.outFile.saveAttributes();}  }
class C{  public static PedanticThrowAnalysis v(){  return G.v().soot_toolkits_exceptions_PedanticThrowAnalysis();}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);}  }
class C{  public boolean containsRange(CodeRange r){  return (r.startAddress >= this.startAddress && r.endAddress <= this.endAddress);}  }
class C{  public boolean isFull(){  return getCurrentPlayers() >= getMaxPlayers();}  }
class C{  public static void println(Object x){  out.println(x);}  }
class C{  @Deprecated public PhysicalTableDefinition(TableName name,ZonelessTimeGrain grain,Set<? extends DimensionConfig> dimensions){  this(name,grain.buildZonedTimeGrain(DateTimeZone.UTC),dimensions);}  }
class C{  private static Color decodeColourElement(Document document,Node child){  return ColourUtils.toColour(child.getTextContent());}  }
class C{  public static String htmlLinks(String text){  if (text == null || text.trim().isEmpty()) {    return null;  }  Matcher matcher=LINK_PATTERN.matcher(text);  StringBuffer buffer=new StringBuffer();  while (matcher.find()) {    String url=matcher.group(1);    String suffix=matcher.group(3);    String ref=url.startsWith("www.") ? "http://" + url : url;    url="<a href=\"" + ref + "\">"+ url+ "</a>"+ suffix;    matcher.appendReplacement(buffer,url);  }  return matcher.appendTail(buffer).toString();}  }
class C{  public E sample(Random rand){  double total=totalCount();  if (total <= 0.0) {    throw new RuntimeException(String.format("Attempting to sample() with totalCount() %.3f\n",total));  }  double sum=0.0;  double r=rand.nextDouble();  for (  Entry<E,Double> entry : entries.entrySet()) {    double count=entry.getValue();    double frac=count / total;    sum+=frac;    if (r < sum) {      return entry.getKey();    }  }  throw new IllegalStateException("Shoudl've have returned a sample by now....");}  }
class C{  public void startString(){}  }
class C{  private static void initializeArcGISLicenses(){  System.out.println("Initialise ArcGIS License");  try {    aoInit=new AoInitialize();    if (aoInit.isProductCodeAvailable(esriLicenseProductCode.esriLicenseProductCodeEngine) == esriLicenseStatus.esriLicenseAvailable)     aoInit.initialize(esriLicenseProductCode.esriLicenseProductCodeEngine); else     if (aoInit.isProductCodeAvailable(esriLicenseProductCode.esriLicenseProductCodeBasic) == esriLicenseStatus.esriLicenseAvailable)     aoInit.initialize(esriLicenseProductCode.esriLicenseProductCodeBasic);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public final double[] smooth(final double[] xval,final double[] yval,final double[] weights) throws MathIllegalArgumentException {  if (xval.length != yval.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,xval.length,yval.length);  }  final int n=xval.length;  if (n == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }  checkAllFiniteReal(xval);  checkAllFiniteReal(yval);  checkAllFiniteReal(weights);  MathArrays.checkOrder(xval);  if (n == 1) {    return new double[]{yval[0]};  }  if (n == 2) {    return new double[]{yval[0],yval[1]};  }  int bandwidthInPoints=(int)(bandwidth * n);  if (bandwidthInPoints < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.BANDWIDTH,bandwidthInPoints,2,true);  }  final double[] res=new double[n];  final double[] residuals=new double[n];  final double[] sortedResiduals=new double[n];  final double[] robustnessWeights=new double[n];  Arrays.fill(robustnessWeights,1);  for (int iter=0; iter <= robustnessIters; ++iter) {    final int[] bandwidthInterval={0,bandwidthInPoints - 1};    for (int i=0; i < n; ++i) {      final double x=xval[i];      if (i > 0) {        updateBandwidthInterval(xval,weights,i,bandwidthInterval);      }      final int ileft=bandwidthInterval[0];      final int iright=bandwidthInterval[1];      final int edge;      if (xval[i] - xval[ileft] > xval[iright] - xval[i]) {        edge=ileft;      } else {        edge=iright;      }      double sumWeights=0;      double sumX=0;      double sumXSquared=0;      double sumY=0;      double sumXY=0;      double denom=FastMath.abs(1.0 / (xval[edge] - x));      for (int k=ileft; k <= iright; ++k) {        final double xk=xval[k];        final double yk=yval[k];        final double dist=(k < i) ? x - xk : xk - x;        final double w=tricube(dist * denom) * robustnessWeights[k] * weights[k];        final double xkw=xk * w;        sumWeights+=w;        sumX+=xkw;        sumXSquared+=xk * xkw;        sumY+=yk * w;        sumXY+=yk * xkw;      }      final double meanX=sumX / sumWeights;      final double meanY=sumY / sumWeights;      final double meanXY=sumXY / sumWeights;      final double meanXSquared=sumXSquared / sumWeights;      final double beta;      if (FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < accuracy) {        beta=0;      } else {        beta=(meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);      }      final double alpha=meanY - beta * meanX;      res[i]=beta * x + alpha;      residuals[i]=FastMath.abs(yval[i] - res[i]);    }    if (iter == robustnessIters) {      break;    }    System.arraycopy(residuals,0,sortedResiduals,0,n);    Arrays.sort(sortedResiduals);    final double medianResidual=sortedResiduals[n / 2];    if (FastMath.abs(medianResidual) < accuracy) {      break;    }    for (int i=0; i < n; ++i) {      final double arg=residuals[i] / (6 * medianResidual);      if (arg >= 1) {        robustnessWeights[i]=0;      } else {        final double w=1 - arg * arg;        robustnessWeights[i]=w * w;      }    }  }  return res;}  }
class C{  public AxisRenderer(int xalign,int yalign){  m_xalign=xalign;  m_yalign=yalign;}  }
class C{  public void generateAllDotDescForWagon(PrintWriter out){  generateAllDotDescForWagon(out,null);}  }
class C{  protected GroupsDeleteLinkQuery linkId(int value){  return unsafeParam("link_id",value);}  }
class C{  public void removeEmojiconGroup(int position){  emojiconGroupList.remove(position);  pagerView.removeEmojiconGroup(position);  tabBar.removeTab(position);}  }
class C{  public String toString(){  return getSignature();}  }
class C{  public int size(){  return name2id.size();}  }
class C{  @Override public StyledLayerDescriptor readSLDFile(File file){  return SLDUtils.readSLDFile(file);}  }
class C{  public void onDownloadSucceeded(DownloadInfo downloadInfo,final long downloadId,boolean canBeResolved){  if (getSnackbarManager() == null)   return;  Snackbar snackbar=Snackbar.make(mContext.getString(R.string.download_succeeded_message,downloadInfo.getFileName()),this);  snackbar.setDuration(SNACKBAR_DURATION_IN_MILLISECONDS).setSingleLine(false);  if (canBeResolved) {    snackbar.setAction(mContext.getString(R.string.open_downloaded_label),Pair.create(downloadInfo,downloadId));  }  getSnackbarManager().showSnackbar(snackbar);}  }
class C{  public void clear(){  m_head=new ObjectLiteral(null);  m_tail=null;}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  String qNameLower=qName.toLowerCase();switch (qNameLower) {case XMLConstants.METHOD_TAG:    if (methodSignature == null)     break;  AndroidMethod tempMeth=AndroidMethod.createFromSignature(methodSignature);if (methodCategory != null) {  String methodCategoryUpper=methodCategory.toUpperCase().trim();  tempMeth.setCategory(CATEGORY.valueOf(methodCategoryUpper));}tempMeth.setSink(isSink);tempMeth.setSource(isSource);@SuppressWarnings("unchecked") SourceSinkDefinition ssd=new SourceSinkDefinition(tempMeth,baseAPs,paramAPs.toArray(new Set[paramAPs.size()]),returnAPs);if (sourcesAndSinks.containsKey(tempMeth)) sourcesAndSinks.get(tempMeth).merge(ssd); else sourcesAndSinks.put(tempMeth,ssd);methodSignature=null;methodCategory=null;baseAPs=new HashSet<>();paramAPs=new ArrayList<>();returnAPs=new HashSet<>();break;case XMLConstants.ACCESSPATH_TAG:if (isSource || isSink) {if (pathElements != null && pathElements.length == 0 && pathElementTypes != null && pathElementTypes.length == 0) {pathElements=null;pathElementTypes=null;}AccessPathTuple apt=AccessPathTuple.fromPathElements(pathElements,pathElementTypes,isSource,isSink);switch (accessPathParentElement) {case XMLConstants.BASE_TAG:baseAPs.add(apt);break;case XMLConstants.RETURN_TAG:returnAPs.add(apt);break;case XMLConstants.PARAM_TAG:while (paramAPs.size() <= paramIndex) paramAPs.add(new HashSet<AccessPathTuple>());paramAPs.get(paramIndex).add(apt);}}isSource=false;isSink=false;pathElements=null;pathElementTypes=null;break;case XMLConstants.BASE_TAG:accessPathParentElement="";break;case XMLConstants.RETURN_TAG:accessPathParentElement="";break;case XMLConstants.PARAM_TAG:accessPathParentElement="";paramIndex=-1;paramTypes.clear();break;case XMLConstants.PATHELEMENT_TAG:break;}}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("Matrix is not symmetric positive definite.");  }  double[][] X=B.getArrayCopy();  int nx=B.getColumnDimension();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return new Matrix(X,n,nx);}  }
class C{  public final boolean addAll(final PointsToSetInternal other,final PointsToSetInternal exclude){  if (other != null && !(other instanceof HybridPointsToSet))   return superAddAll(other,exclude);  if (exclude != null && !(exclude instanceof HybridPointsToSet))   return superAddAll(other,exclude);  return nativeAddAll((HybridPointsToSet)other,(HybridPointsToSet)exclude);}  }
class C{  public DimensionMismatchException(int wrong,int expected){  this(LocalizedCoreFormats.DIMENSIONS_MISMATCH,wrong,expected);}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){}  }
class C{  public static <T>void launchActivityFromFragment(FragmentActivity context,Class<? extends Activity> activity,boolean closeCurrentActivity,String key,T data){  Intent intent=new Intent(context,activity);  if (data != null) {    putBundle(key,data,intent);  }  context.startActivity(intent);  if (closeCurrentActivity) {    context.finish();  }}  }
class C{  public static final void sort(int[] a,double[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  @NotNull public IntProperty outputHeight(){  return myOutputHeight;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public static Pattern createOrGetPerl5CompiledPattern(String stringPattern,boolean caseSensitive) throws MalformedPatternException {  Pattern pattern=compiledPerl5Patterns.get(stringPattern);  if (pattern == null) {    Perl5Compiler compiler=new Perl5Compiler();    if (caseSensitive) {      pattern=compiler.compile(stringPattern,Perl5Compiler.READ_ONLY_MASK);    } else {      pattern=compiler.compile(stringPattern,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK);    }    pattern=compiledPerl5Patterns.putIfAbsentAndGet(stringPattern,pattern);    if (Debug.verboseOn()) {      Debug.logVerbose("Compiled and cached the pattern: '" + stringPattern,module);    }  }  return pattern;}  }
class C{  public ConstraintAnchor findAnchor(float x,float y,boolean checkGuidelines,boolean mousePress,ViewTransform viewTransform){  ConnectionCandidate candidate=new ConnectionCandidate();  float dist=(ConnectionDraw.CONNECTION_ANCHOR_SIZE + ConnectionDraw.CONNECTION_ANCHOR_SIZE) / viewTransform.getScale();  candidate.distance=ConnectionDraw.CONNECTION_ANCHOR_SIZE * ConnectionDraw.CONNECTION_ANCHOR_SIZE;  for (  Selection.Element element : mSelection.getElements()) {    ConstraintWidget widget=element.widget;    if (!checkGuidelines && (widget instanceof Guideline)) {      continue;    }    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(viewTransform);    widgetInteraction.findClosestConnection(viewTransform,x,y,candidate,mousePress);  }  float slope=(dist * dist);  if (candidate.anchorTarget != null && candidate.distance < slope) {    candidate.distance=0;  } else {    candidate.anchorTarget=null;  }  for (  ConstraintWidget widget : mWidgets.values()) {    if (!checkGuidelines && (widget instanceof Guideline)) {      continue;    }    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);    if (!decorator.isVisible()) {      continue;    }    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(viewTransform);    widgetInteraction.findClosestConnection(viewTransform,x,y,candidate,mousePress);  }  return candidate.anchorTarget;}  }
class C{  private JPanel createPanel(String label){  JPanel panel=new JPanel();  panel.setLayout(null);  panel.setPreferredSize(new Dimension(PANEL_WIDTH,PANEL_HEIGHT));  if (label != null) {    JLabel lbl=new JLabel(label);    lbl.setBounds(LABEL_X,0,LABEL_WIDTH,PANEL_HEIGHT);    panel.add(lbl);  }  return panel;}  }
class C{  void flushAll(long txNum){  for (  Buffer buff : bufferPool) {    try {      buff.getExternalLock().lock();      if (buff.isModifiedBy(txNum)) {        buff.flush();      }    }  finally {      buff.getExternalLock().unlock();    }  }}  }
class C{  public void clear(){  IntIterator rows=rows(true);  while (rows.hasNext()) {    removeRow(rows.nextInt());  }}  }
class C{  public int indexType(){  return idxType;}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){  onSuccess(statusCode,response);}  }
class C{  private void changeSize(float targetSize,float parentSize,View targetView){  ViewGroup.LayoutParams params=targetView.getLayoutParams();  if (targetSize != 0.0f) {    params.width=(int)targetSize;    params.height=(int)targetSize;  } else {    if (parentSize != 0.0f) {      params.width=(int)parentSize;      params.height=(int)parentSize;    }  }  targetView.setLayoutParams(params);}  }
class C{  public static int[] convertIntegers(List<Integer> integers){  int[] ret=new int[integers.size()];  copyIntegers(integers,ret);  return ret;}  }
class C{  public static String buildPath(JsonPath jsonPath){  List<String> urlParts=new LinkedList<>();  JsonPath currentJsonPath=jsonPath;  String pathPart;  do {    if (currentJsonPath instanceof RelationshipsPath) {      pathPart=RELATIONSHIP_MARK + SEPARATOR + currentJsonPath.getElementName();    } else     if (currentJsonPath instanceof FieldPath) {      pathPart=currentJsonPath.getElementName();    } else {      pathPart=currentJsonPath.getElementName();      if (currentJsonPath.getIds() != null) {        pathPart+=SEPARATOR + mergeIds(currentJsonPath.getIds());      }    }    urlParts.add(pathPart);    currentJsonPath=currentJsonPath.getParentResource();  } while (currentJsonPath != null);  Collections.reverse(urlParts);  return SEPARATOR + StringUtils.join(SEPARATOR,urlParts) + SEPARATOR;}  }
class C{  public Scoop update(int toppingId,@ColorInt int color){  Topping topping=mToppings.get(toppingId);  if (topping != null) {    topping.updateColor(color);    Collection<Set<IBinding>> bindings=mBindings.values();    for (    Set<IBinding> bindingSet : bindings) {      for (      IBinding binding : bindingSet) {        if (binding.getToppingId() == toppingId) {          binding.update(topping);        }      }    }  } else {    throw new InvalidParameterException("Nothing has been bound to the Topping of the given id (" + toppingId + ").");  }  return this;}  }
class C{  public static boolean isNotEmpty(String s){  return (s != null) && s.length() > 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_USE_CASH_TYPE_ITEM1(String value0){  return new SM_SYSTEM_MESSAGE(1400333,value0);}  }
class C{  public XtnEntry(ServerTransaction xtn){  super(xtn);  _xtnData=new XtnData(this);  if (!(xtn.mgr instanceof LocalTransactionManager))   _joinLock=new Object(); else   _joinLock=null;  _allowFifoNotificationsForNonFifoType=new FifoBackgroundRequest.AllowFifoNotificationsForNonFifoType();}  }
class C{  public static InputStream findSecurityProperties(String resourceName){  InputStream resourceAsStream=null;  if (resourceName != null) {    File file=new File(resourceName);    if (file.exists()) {      try {        resourceAsStream=new FileInputStream(file);      } catch (      FileNotFoundException e) {        throw new RuntimeException("Should not happen",e);      }    } else {      resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);      if (resourceAsStream == null) {        resourceName=DEFAULT_SECURITY_DIRECTORY + resourceName;        resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);      }    }  }  if (resourceAsStream == null) {    resourceName=DEFAULT_SECURITY_RESOURCE;    resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);    if (resourceAsStream == null) {      resourceName=DEFAULT_SECURITY_DIRECTORY + DEFAULT_SECURITY_RESOURCE;      resourceAsStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);    }  }  if (resourceAsStream != null && logger.isLoggable(Level.CONFIG)) {    logger.config("Security properties file: " + resourceName);  }  return resourceAsStream;}  }
class C{  public static Object evaluate(Map<String,? extends Object> context,String expression){  return evaluate(context,expression,Object.class);}  }
class C{  public Timer(String name){  this.name=name;  duration=0;}  }
class C{  @Override public void publish(String topic,AWSIotQos qos,byte[] payload) throws AWSIotException {  super.publish(topic,qos,payload);}  }
class C{  public float convert(){  return Float.intBitsToFloat((int)bytes);}  }
class C{  public Boolean isLogConnection(){  return logConnection;}  }
class C{  protected AdsCreateClientsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  protected static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  public Iterator<T> valuesIterator(){  return freqTable.keySet().iterator();}  }
class C{  private int[][] computePercentileLimits(int[] sample,int resamplingSize,int repeats,double leftValue,double rightValue) throws CanceledException {  int length=sample.length;  int[][] diff=new int[repeats][length];  for (int i=0; i < repeats; i++) {    int[] N1=getRandomSample(sample,resamplingSize);    int[] N2=getRandomSample(sample,resamplingSize);    diff[i]=getAbsoluteDifference(N1,N2);  }  int[][] p5_95=new int[length][3];  for (int i=0; i < length; i++) {    int[] diff_i=extractRow(diff,i);    p5_95[i]=getPercentileInterval(diff_i,leftValue,rightValue);  }  return p5_95;}  }
class C{  private void bindViews(){  contentRoot=findViewById(R.id.contentRoot);  edMessage=(EmojiconEditText)findViewById(R.id.editTextMessage);  btSendMessage=(ImageView)findViewById(R.id.buttonMessage);  btSendMessage.setOnClickListener(this);  btEmoji=(ImageView)findViewById(R.id.buttonEmoji);  emojIcon=new EmojIconActions(this,contentRoot,edMessage,btEmoji);  emojIcon.ShowEmojIcon();  rvListMessage=(RecyclerView)findViewById(R.id.messageRecyclerView);  mLinearLayoutManager=new LinearLayoutManager(this);  mLinearLayoutManager.setStackFromEnd(true);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public PointsToSet reachingObjects(Context c,Local l){  VarNode n=findContextVarNode(l,c);  if (n == null) {    return EmptyPointsToSet.v();  }  return n.getP2Set();}  }
class C{  public void addSupressionDirective(Element elem,String directive){  diagSuppressor.addSuppressionDirective(elem,directive,configAspects);}  }
class C{  public void startEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {  fEntityDepth++;  fEntityScanner=fEntityManager.getEntityScanner();}  }
class C{  BTreeDir(BlockId blk,Type keyType,Transaction tx){  this.keyType=keyType;  this.tx=tx;  this.schema=schema(keyType);  ccMgr=tx.concurrencyMgr();  currentPage=new BTreePage(blk,NUM_FLAGS,schema,tx);}  }
class C{  public AWSIotException(Throwable cause){  super(cause);}  }
class C{  @Deprecated public EncounterResponse encounterPokemon(MapPokemon catchablePokemon) throws LoginFailedException, RemoteServerException {  EncounterMessageOuterClass.EncounterMessage reqMsg=EncounterMessageOuterClass.EncounterMessage.newBuilder().setEncounterId(catchablePokemon.getEncounterId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setSpawnPointId(catchablePokemon.getSpawnPointId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.ENCOUNTER,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  EncounterResponse response;  try {    response=EncounterResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  return response;}  }
class C{  public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data){  return zeromeanUnitVariance(schema,data,Collections.<String>emptyList());}  }
class C{  public VideoGetNewTagsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static String removePackageName(String fully_qualified_name_){  if (fully_qualified_name_ == null)   return null;  int lastdot=fully_qualified_name_.lastIndexOf('.');  if (lastdot < 0) {    return "";  } else {    return fully_qualified_name_.substring(lastdot + 1);  }}  }
class C{  public void clear(){  ntax=0;  bits.clear();  index2name.clear();  name2index.clear();}  }
class C{  private void rdp_encoding(){  int off, d, p, diag;  int packet_size=stripe_unit_size / w;  for (d=1; d < disks; d++) {    diag=d;    for (p=0; p < w; p++) {      if (diag <= w - 1) {        for (off=0; off < packet_size; off++) {          odata.get(0).set(p * packet_size + off,(char)(odata.get(0).get(p * packet_size + off) ^ idata.get(d).get(p * packet_size + off)));          odata.get(1).set(diag * packet_size + off,(char)(odata.get(1).get(diag * packet_size + off) ^ idata.get(d).get(p * packet_size + off)));        }        diag++;      } else {        for (off=0; off < packet_size; off++) {          odata.get(0).set(p * packet_size + off,(char)(odata.get(0).get(p * packet_size + off) ^ idata.get(d).get(p * packet_size + off)));        }        diag=0;      }    }  }  for (p=1; p < w; p++) {    for (off=0; off < packet_size; off++) {      odata.get(1).set((p - 1) * packet_size + off,(char)(odata.get(1).get((p - 1) * packet_size + off) ^ odata.get(0).get(p * packet_size + off)));    }  }  Collections.copy(odata.get(0),idata.get(disks));  Collections.copy(odata.get(1),idata.get(disks + 1));}  }
class C{  public boolean isShowLabel(){  if (showLabel == null) {    return false;  } else {    return showLabel;  }}  }
class C{  protected void subAppend(LoggingEvent event){  if (event.getLevel().toInt() == AuditLevel.AUDIT.toInt()) {    currentLevel=AuditLevel.AUDIT.toInt();    super.subAppend(event);  }}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TShortArrayList) {    TShortArrayList that=(TShortArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public AdsGetAdsLayoutQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static float hue(int color){  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=color & 0xFF;  int V=Math.max(b,Math.max(r,g));  int temp=Math.min(b,Math.min(r,g));  float H;  if (V == temp) {    H=0;  } else {    final float vtemp=V - temp;    final float cr=(V - r) / vtemp;    final float cg=(V - g) / vtemp;    final float cb=(V - b) / vtemp;    if (r == V) {      H=cb - cg;    } else     if (g == V) {      H=2 + cr - cb;    } else {      H=4 + cg - cr;    }    H/=6.f;    if (H < 0) {      H++;    }  }  return H;}  }
class C{  public ZWaveScheduleCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public AdsCreateTargetGroupQuery lifetime(Integer value){  return unsafeParam("lifetime",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201028,skilltarget,skillcaster,skillname);}  }
class C{  public String putImage(String theFolder,String theImageName,Bitmap theBitmap){  if (theFolder == null || theImageName == null || theBitmap == null)   return null;  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;  String mFullPath=setupFullPath(theImageName);  if (!mFullPath.equals("")) {    lastImagePath=mFullPath;    saveBitmap(mFullPath,theBitmap);  }  return mFullPath;}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){}  }
class C{  public PhotosGetWallUploadServerQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isValid(String inetAddress){  return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);}  }
class C{  public PhotosGetQuery(VkApiClient client){  super(client,"photos.get",GetResponse.class);}  }
class C{  @Override public String toString(){  return "SelectionBuilder[table=" + mTable + ", selection="+ getSelection()+ ", selectionArgs="+ Arrays.toString(getSelectionArgs())+ "]";}  }
class C{  public void writeHeader(String header) throws IOException {  write(header + "\r\n");}  }
class C{  public static void drawTransparentString(String text,int xPos,int yPos,int transparency,boolean shadow){  if (transparency > 100 || transparency < 0)   throw new IllegalArgumentException("Transparency can not be " + transparency + "%");  int i=0xF | (int)((transparency / 100d) * 255) << 24;  getGlStateManager().pushMatrix();  getGlStateManager().enableBlend();  if (shadow) {    getFontRendererObjHandler().drawStringWithShadow(text,xPos,yPos,i);  } else {    getFontRendererObjHandler().drawString(text,xPos,yPos,i);  }  getGlStateManager().disableAlpha();  getGlStateManager().disableBlend();  getGlStateManager().popMatrix();}  }
class C{  public static void writeSwappedShort(byte[] data,int offset,short value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);}  }
class C{  private void updateThemes(){  ImmutableList<String> editableThemes=ThemeEditorUtils.getModuleThemeQualifiedNamesList(myContext.getCurrentContextModule());  ImmutableList.Builder<String> availableThemesListBuilder=ImmutableList.builder();  ImmutableList.Builder<String> disabledThemesListBuilder=ImmutableList.builder();  ThemeResolver themeResolver=myContext.getThemeResolver();  for (  String themeName : editableThemes) {    if (themeResolver.getTheme(themeName) != null) {      availableThemesListBuilder.add(themeName);    } else {      disabledThemesListBuilder.add(themeName);    }  }  myAvailableProjectThemes=availableThemesListBuilder.build();  ImmutableList<String> disabledProjectThemes=disabledThemesListBuilder.build();  String selectedItem=getSelectedItem();  if (selectedItem == null) {    if (myDefaultThemeName != null && (editableThemes.contains(myDefaultThemeName) || themeResolver.getTheme(myDefaultThemeName) != null)) {      selectedItem=myDefaultThemeName;    } else     if (!editableThemes.isEmpty()) {      selectedItem=editableThemes.get(0);    } else     if (!myDefaultThemeNames.isEmpty()) {      selectedItem=myDefaultThemeNames.get(0);    }  }  myEditOptions.clear();  buildEditOptionsList(selectedItem);  myAllItems=new SeparatedList(mySeparator,group(myAvailableProjectThemes),group(disabledProjectThemes),group(myDefaultThemeNames,SHOW_ALL_THEMES),group(myEditOptions));  setSelectedItem(selectedItem);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public static void cleanup(FileSystem fs,String dataSchemasProp,String querySchemasProp,String stopListProp) throws Exception {  Inputs.deleteESInput();  fs.close();  SystemConfiguration.setProperty("pir.stopListFile",stopListProp);  if (!dataSchemasProp.equals("none")) {    DataSchemaLoader.initialize();  }  if (!querySchemasProp.equals("none")) {    QuerySchemaLoader.initialize();  }}  }
class C{  protected TableViewer createTable(Composite parent,int span){  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);  data.horizontalSpan=span;  table.setLayoutData(data);  TableLayout layout=new TableLayout();  layout.addColumnData(new ColumnWeightData(100,true));  table.setLayout(layout);  TableColumn col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  return new TableViewer(table);}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public static void main(String[] args){  System.out.println((new AlanVoiceDirectory()).toString());}  }
class C{  public boolean isEncountered(){  if (encountered == null) {    return false;  }  return encountered;}  }
class C{  public BigFraction multiply(final BigInteger bg){  MathUtils.checkNotNull(bg);  if (numerator.signum() == 0 || bg.signum() == 0) {    return ZERO;  }  return new BigFraction(bg.multiply(numerator),denominator);}  }
class C{  public List<?> multi(Iterable<?> ops){  if (method == null)   throw new UnsupportedOperationException("multi operation must use zookeeper 3.4+");  try {    return (List<?>)method.invoke(_zk,ops);  } catch (  IllegalArgumentException e) {    throw new UnsupportedOperationException("ops must be 'org.apache.zookeeper.Op'");  }catch (  IllegalAccessException e) {    throw new UnsupportedOperationException(e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  public AemContentFinder clickTab(String tabName){  WebElement findElement=iconBar.findElement(By.xpath(String.format("./li[contains(@id,'%s')]",tabName)));  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ContentFinderActions.showContentFinderTab(findElement));  return this;}  }
class C{  private void startContentSynchronizations(List<SynchronizeFileOperation> filesToSyncContents,OwnCloudClient client){  RemoteOperationResult contentsResult=null;  for (  SynchronizeFileOperation op : filesToSyncContents) {    contentsResult=op.execute(mStorageManager,mContext);    if (!contentsResult.isSuccess()) {      if (contentsResult.getCode() == ResultCode.SYNC_CONFLICT) {        mConflictsFound++;      } else {        mFailsInFavouritesFound++;        if (contentsResult.getException() != null) {          Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage(),contentsResult.getException());        } else {          Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage());        }      }    }  }}  }
class C{  public static boolean isDeepLinkAvailable(@Nullable Editor editor,@Nullable PsiFile file){  return file != null && editor != null && isAndroidManifestXmlFile(file) && isInsideActivityTag(editor,file);}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos){  return nodeBlockMapping(blockInfos,-1);}  }
class C{  public void clearPaymentMethodsById(List<String> paymentMethodIdsToRemove){  if (UtilValidate.isEmpty(paymentMethodIdsToRemove))   return;  for (Iterator<CartPaymentInfo> iter=paymentInfo.iterator(); iter.hasNext(); ) {    CartPaymentInfo info=iter.next();    if (paymentMethodIdsToRemove.contains(info.paymentMethodId)) {      iter.remove();    }  }}  }
class C{  public static final void drawShape(GL2 gl,Shape s,boolean points){  if (s instanceof Circle) {    RenderUtilities.drawCircle(gl,(Circle)s,points,true);  } else   if (s instanceof Rectangle) {    RenderUtilities.drawRectangle(gl,(Rectangle)s,points);  } else   if (s instanceof Polygon) {    RenderUtilities.drawPolygon(gl,(Polygon)s,points);  } else   if (s instanceof Segment) {    RenderUtilities.drawLineSegment(gl,(Segment)s,points);  } else {  }}  }
class C{  protected boolean hasToolbarNavigation(){  return true;}  }
class C{  public String exampleText(Locale locale){  return MaryDataType.getExampleText(this,locale);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  static AnyVal<?> anyNull(){  return AnyNull.instance;}  }
class C{  public AdsCreateTargetGroupQuery createTargetGroup(UserActor actor,int accountId,String name){  return new AdsCreateTargetGroupQuery(getClient(),actor,accountId,name);}  }
class C{  public Permission(Permissions permission,String explanation){  this.permissions=permission;  this.explanation=explanation;}  }
class C{  public static File[] sortLocalFolder(File[] files){switch (mSortOrder) {case 0:    files=FileStorageUtils.sortLocalFilesByName(files);  break;case 1:files=FileStorageUtils.sortLocalFilesByDate(files);break;case 2:files=FileStorageUtils.sortLocalFilesBySize(files);break;}return files;}  }
class C{  private DerivativeStructure(final DSCompiler compiler){  this.compiler=compiler;  this.data=new double[compiler.getSize()];}  }
class C{  @Override public void readCatalog(Catalog catalog,String fileUrl) throws IOException, CatalogException {  URL url=null;  try {    url=new URL(fileUrl);  } catch (  MalformedURLException e) {    url=new URL("file:///" + fileUrl);  }  debug=catalog.getCatalogManager().debug;  try {    URLConnection urlCon=url.openConnection();    readCatalog(catalog,urlCon.getInputStream());  } catch (  FileNotFoundException e) {    catalog.getCatalogManager().debug.message(1,"Failed to load catalog, file not found",url.toString());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_START_1_BASIC(String value0){  return new SM_SYSTEM_MESSAGE(1330011,value0);}  }
class C{  GrimpBody(SootMethod m){  super(m);}  }
class C{  protected PhotosSaveMarketPhotoQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  public static VersionCmpTarget version(long version){  return new VersionCmpTarget(version);}  }
class C{  public Builder stringToCategorical(String columnName,List<String> stateNames){  return transform(new StringToCategoricalTransform(columnName,stateNames));}  }
class C{  public void reportContigStats(){  if (contigs.size() == 0) {    System.err.println(String.format("Contigs:%,9d",0));  } else {    final int[] sizes=new int[contigs.size()];    int pos=0;    for (    Pair<String,String> pair : contigs) {      sizes[pos++]=pair.getSecond().length();    }    Arrays.sort(sizes);    System.err.println(String.format("Contigs:%,9d",sizes.length));    System.err.println(String.format("Min len:%,9d",sizes[0]));    System.err.println(String.format("Med len:%,9d",sizes[sizes.length / 2]));    System.err.println(String.format("Max len:%,9d",sizes[sizes.length - 1]));  }}  }
class C{  public Symbol(Object value){  this.value=value;}  }
class C{  public PSVIAttrNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName,String localName){  super(ownerDocument,namespaceURI,qualifiedName,localName);}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public T[] computeDerivatives(final T t,final T[] y) throws MathIllegalArgumentException, MathIllegalStateException {  final T[] yDot=MathArrays.buildArray(t.getField(),mapper.getTotalDimension());  int index=0;  final T[] primaryState=mapper.extractEquationData(index,y);  final T[] primaryStateDot=primary.computeDerivatives(t,primaryState);  mapper.insertEquationData(index,primaryStateDot,yDot);  while (++index < mapper.getNumberOfEquations()) {    final T[] componentState=mapper.extractEquationData(index,y);    final T[] componentStateDot=components.get(index - 1).computeDerivatives(t,primaryState,primaryStateDot,componentState);    mapper.insertEquationData(index,componentStateDot,yDot);  }  return yDot;}  }
class C{  public void createIndex(String idxName,String tblName,String fldName,int idxType,Transaction tx){  RecordFile rf=ti.open(tx,true);  rf.insert();  rf.setVal(ICAT_IDXNAME,new VarcharConstant(idxName));  rf.setVal(ICAT_TBLNAME,new VarcharConstant(tblName));  rf.setVal(ICAT_FLDNAME,new VarcharConstant(fldName));  rf.setVal(ICAT_IDXTYPE,new IntegerConstant(idxType));  rf.close();  Map<String,IndexInfo> result=iiMap.get(tblName);  if (result == null) {    result=new HashMap<String,IndexInfo>();    iiMap.put(tblName,result);  }  result.put(fldName,new IndexInfo(idxName,tblName,fldName,idxType));}  }
class C{  public static void clearColumnDictionaryCache(Map<String,Dictionary> columnToDictionaryMap){  for (  Map.Entry<String,Dictionary> entry : columnToDictionaryMap.entrySet()) {    CarbonUtil.clearDictionaryCache(entry.getValue());  }}  }
class C{  private void loadProcHeader(RandomAccessFile rafIn) throws IOException {  assert rafIn != null : "null argument";  procHeader=rafIn.readUTF();  assert procHeader != null;}  }
class C{  public XIncludeTextReader(XMLInputSource source,XIncludeHandler handler,int bufferSize) throws IOException {  fHandler=handler;  fSource=source;  fTempString=new XMLString(new char[bufferSize + 1],0,0);}  }
class C{  public static void initStatMgr(Transaction tx){  statMgr=new StatMgr(tx);}  }
class C{  public IndexInfo(String idxName,String tblName,String fldName,int idxType){  if (idxType != IDX_HASH && idxType != IDX_BTREE)   throw new IllegalArgumentException();  this.tblName=tblName;  this.idxName=idxName;  this.fldName=fldName;  this.idxType=idxType;}  }
class C{  public FieldSelector add(Field field){  return new FieldSelector(ImmutableList.<Field>builder().addAll(fields).add(field).build());}  }
class C{  public double distance(Coord coord){  return Math.sqrt(distanceSquare(coord));}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public boolean isCentered(int orientationVertical){  if (isGuideline())   return false;  if (orientationVertical == Direction.ORIENTATION_VERTICAL) {    return mConstraintWidget.getAnchor(ConstraintAnchor.Type.TOP).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected();  }  return mConstraintWidget.getAnchor(ConstraintAnchor.Type.LEFT).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.RIGHT).isConnected();}  }
class C{  public float expansion_factor(){  return soot.PhaseOptions.getFloat(options,"expansion-factor");}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static S2Cap fromAxisAngle(S2Point axis,S1Angle angle){  double d=Math.sin(0.5 * angle.radians());  return new S2Cap(axis,2 * d * d);}  }
class C{  private BSPTree<Euclidean1D> previousInternalNode(BSPTree<Euclidean1D> node){  if (childBefore(node).getCut() != null) {    return leafBefore(node).getParent();  }  while (isBeforeParent(node)) {    node=node.getParent();  }  return node.getParent();}  }
class C{  public AutoSummENGGui(){  initComponents();  loadSettings();}  }
class C{  public static void logError(Throwable e,boolean invalidRowsPresent){  if (!invalidRowsPresent) {    invalidRowsPresent=true;    LOGGER.error(e,CarbonCommonConstants.FILTER_INVALID_MEMBER + e.getMessage());  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  int value=ProgramProperties.get(MeganProperties.MININUM_READS_IN_ALIGNMENT,10);  String result=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter minimum number of reads required for an alignment","" + value);  if (result != null && Basic.isInteger(result))   execute("set minReadsAlignment=" + result + ";");}  }
class C{  public synchronized void panToAbs(Point2D p){  double sx=m_transform.getScaleX();  double sy=m_transform.getScaleY();  double x=p.getX();  x=(Double.isNaN(x) ? 0 : x);  double y=p.getY();  y=(Double.isNaN(y) ? 0 : y);  x=getWidth() / (2 * sx) - x;  y=getHeight() / (2 * sy) - y;  double dx=x - (m_transform.getTranslateX() / sx);  double dy=y - (m_transform.getTranslateY() / sy);  damageReport();  m_transform.translate(dx,dy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public FilterName(String filterName,Class<?> returnType){  super();  this.filterName=filterName;  this.returnType=returnType;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_BLOCK_A_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1201100,value0,value1);}  }
class C{  @Override public int hashCode(){  int result=31 + MathUtils.hash(getN());  result=result * 31 + MathUtils.hash(getMax());  result=result * 31 + MathUtils.hash(getMin());  result=result * 31 + MathUtils.hash(getSum());  result=result * 31 + MathUtils.hash(getGeometricMean());  result=result * 31 + MathUtils.hash(getMean());  result=result * 31 + MathUtils.hash(getSumOfSquares());  result=result * 31 + MathUtils.hash(getSumOfLogs());  result=result * 31 + MathUtils.hash(getVariance());  return result;}  }
class C{  private MultiOptionGroup parseMultiOptionGroup(Class<?> localisationClass,Class<?> panelId,XMLMultiOptionGroup xmlMultiGroupObj){  MultiOptionGroup multiOptionGroupConfig=new MultiOptionGroup();  multiOptionGroupConfig.setId(xmlMultiGroupObj.getId());  multiOptionGroupConfig.setLabel(getLocalisedText(localisationClass,xmlMultiGroupObj.getLabel()));  multiOptionGroupConfig.setShowLabel(xmlMultiGroupObj.isShowLabel());  multiOptionGroupConfig.setOptional(xmlMultiGroupObj.isOption());  List<XMLOptionGroup> optionGroupList=xmlMultiGroupObj.getOptionGroup();  for (  XMLOptionGroup xmlOptionGroup : optionGroupList) {    OptionGroup optionGroup=new OptionGroup();    optionGroup.setId(xmlOptionGroup.getId());    optionGroup.setLabel(getLocalisedText(localisationClass,xmlOptionGroup.getLabel()));    optionGroup.setShowLabel(xmlOptionGroup.isShowLabel());    List<XMLGroupConfig> xmlGroupConfigList=xmlOptionGroup.getGroup();    if (xmlGroupConfigList != null) {      for (      XMLGroupConfig xmlGroupConfig : xmlGroupConfigList) {        GroupConfig groupConfig=parseGroup(localisationClass,panelId,xmlGroupConfig);        optionGroup.addGroup(groupConfig);      }    }    multiOptionGroupConfig.addGroup(optionGroup);  }  return multiOptionGroupConfig;}  }
class C{  public static void main(String[] sArgs){  TAC2008TopicFileSet t=null;  try {    t=new TAC2008TopicFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_topics.xml","/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  } catch (  ParserConfigurationException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }catch (  SAXException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }catch (  IOException ex) {    Logger.getLogger(TAC2008TopicFileSet.class.getName()).log(Level.SEVERE,null,ex);  }  if (t == null)   return;  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  System.err.flush();  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  public FixedSetPrompt(String... fixedSet){  super();  this.fixedSet=Arrays.asList(fixedSet);}  }
class C{  @NotNull public DeleteFaceListFaceAction deleteFaceListFace(@NotNull String faceListId,@NotNull String persistedFaceId){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","FaceListId is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new DeleteFaceListFaceAction(cognitiveContext,faceListId,persistedFaceId);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  protected void onCreate(){}  }
class C{  public void write(IOutputWriter outputWriter,String label,Object value) throws IOException {  if (writerIterator == null)   writerIterator=list.iterator();  Pair<String,Type> current=writerIterator.next();  if (current == null || !label.equals(current.getFirst()))   throw new IOException("write(): Unexpected label: " + label);switch (Type.getType(value)) {case Integer:    outputWriter.writeInt((Integer)value);  break;case Long:outputWriter.writeLong((Long)value);break;case Float:outputWriter.writeFloat((Float)value);break;case String:outputWriter.writeStringNoCompression((String)value);break;case Byte:outputWriter.write((Byte)value);break;case Character:outputWriter.writeChar((Character)value);break;default :throw new IOException("Invalid type: " + value);}}  }
class C{  public WallGetQueryWithExtended domain(String value){  return unsafeParam("domain",value);}  }
class C{  private boolean isDebuggable(Level level){  if (level.intValue() < debugLevel.intValue() || debugLevel == Level.OFF) {    return false;  }  return true;}  }
class C{  public boolean isFileSystemCaseSensitive(){  File dir=new File(".");  File[] files=dir.listFiles();  if (files == null)   return false;  for (  File file : files) {    if (file.isFile()) {      String lowerCaseFilePath=file.getAbsolutePath().toLowerCase();      String upperCaseFilePath=file.getAbsolutePath().toUpperCase();      File lowerCaseFile=new File(lowerCaseFilePath);      File upperCaseFile=new File(upperCaseFilePath);      if (!(lowerCaseFile.exists() && upperCaseFile.exists())) {        return true;      }    }  }  return false;}  }
class C{  public void initComponents() throws SpaceComponentsInitializeException {  try {    SpaceInitializationIndicator.setInitializer();    initPrimaryOnlyComponents();    initBackupComponents();  }  finally {    SpaceInitializationIndicator.unsetInitializer();  }}  }
class C{  public static String fixEndLine(String logMessage){  if (getLogLevel() == Level.DEBUG) {    return logMessage;  }  return logMessage.replaceAll("\n","");}  }
class C{  public int available() throws IOException {  int avail=(count - pos - 2) + in.available();  return (avail < 0 ? 0 : avail);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(StringCodingUtils.getBytes(line.toString(),cs));    }    output.write(StringCodingUtils.getBytes(lineEnding,cs));  }}  }
class C{  public boolean isDeclared(){  return isDeclared;}  }
class C{  public void inherit(){  addClassPath(System.getProperty("java.class.path"));}  }
class C{  public static List<PageLabel> create(int total,int s,int ITEM_NUMBER){  return create(total,s,ITEM_NUMBER,2);}  }
class C{  public void afterMovingToBackup(){switch (_spaceMode) {case NONE:    startComponents(false);  break;case PRIMARY:try {  _space.stopInternal();  _space.startInternal();} catch (RemoteException e) {  if (_logger.isLoggable(Level.WARNING)) {    _logger.log(Level.WARNING,"Failed moving to backup",e);  }}break;}}  }
class C{  private boolean removeLeaseInRenew(Entry e){  int index=leaseInRenew.indexOf(e);  if (index < 0)   return false;  leaseInRenew.remove(index);  return true;}  }
class C{  public Map<String,Object> finalizeOrderEntryShip(int shipGroupIndex,String shippingContactMechId,String supplierPartyId){  Map<String,Object> result;  String errMsg=null;  if (UtilValidate.isNotEmpty(shippingContactMechId)) {    this.cart.setShippingContactMechId(shipGroupIndex,shippingContactMechId);    if (UtilValidate.isNotEmpty(supplierPartyId)) {      this.cart.setSupplierPartyId(shipGroupIndex,supplierPartyId);    }    result=ServiceUtil.returnSuccess();  } else {    errMsg=UtilProperties.getMessage(resource_error,"checkhelper.enter_shipping_address",(cart != null ? cart.getLocale() : Locale.getDefault()));    result=ServiceUtil.returnError(errMsg);  }  return result;}  }
class C{  protected MarketGetCommentsQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  public Set<Atomic> selectAtoms(){  Set<Atomic> atoms=new HashSet<>(atomSet).stream().filter(null).filter(null).collect(Collectors.toSet());  if (atoms.size() == 1)   return atoms;  Set<Atomic> selectedAtoms=atoms.stream().filter(null).collect(Collectors.toSet());  if (selectedAtoms.isEmpty())   throw new IllegalStateException(ErrorMessage.NO_ATOMS_SELECTED.getMessage(this.toString()));  return selectedAtoms;}  }
class C{  private void updateFromHoverListener(int x,int y){  mHoverListener.populate();  mHoverListener.find(x,y);  ConstraintWidget widget=mHoverListener.mHitWidget;  ConstraintAnchor anchor=mHoverListener.getConstraintAnchor();  ResizeHandle handle=mHoverListener.mHitResizeHandle;  mMouseCursor=updateMouseCursor(handle);  if (mPreviousHoverWidget != null) {    if (!mSelection.contains(mPreviousHoverWidget)) {      getDecorator(mPreviousHoverWidget).setLook(ColorTheme.Look.NORMAL);    }  }  if (widget != null) {    if (!mSelection.contains(widget)) {      getDecorator(widget).setLook(ColorTheme.Look.HIGHLIGHTED);    }    mPreviousHoverWidget=widget;  }  mSceneDraw.setCurrentUnderneathAnchor(anchor);  mSceneDraw.repaint();}  }
class C{  private static String fixOcrLettersToNums(String src){  return src.replace("S","5").replace("s","5").replace("O","0").replace("o","0").replace("l","1").replace("I","1").replace("i","1").replace("Z","2").replaceAll("[^0-9]","");}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public void add(String field,boolean ascend){  String[] f=new String[m_fields.length + 1];  System.arraycopy(m_fields,0,f,0,m_fields.length);  f[m_fields.length]=field;  m_fields=f;  boolean[] b=new boolean[m_fields.length + 1];  System.arraycopy(m_ascend,0,b,0,m_ascend.length);  b[m_ascend.length]=ascend;  m_ascend=b;}  }
class C{  private static void validateTimeAlignment(Granularity granularity,Set<Interval> intervals) throws BadApiRequestException {  if (!granularity.accepts(intervals)) {    String alignmentDescription=granularity.getAlignmentDescription();    LOG.debug(TIME_ALIGNMENT.logFormat(intervals,granularity,alignmentDescription));    throw new BadApiRequestException(TIME_ALIGNMENT.format(intervals,granularity,alignmentDescription));  }}  }
class C{  public int convertTime(){  return this.getTime() / 12;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static SimpleXYChartSupport createSimpleXYChart(SimpleXYChartDescriptor descriptor){  return new SimpleXYChartSupport(descriptor.getChartTitle(),descriptor.getXAxisDescription(),descriptor.getYAxisDescription(),descriptor.getChartType(),descriptor.getInitialYMargin(),descriptor.getItemNames(),descriptor.getItemColors(),descriptor.getLineWidths(),descriptor.getLineColors(),descriptor.getFillColors1(),descriptor.getFillColors2(),descriptor.getMinValue(),descriptor.getMaxValue(),descriptor.getChartFactor(),descriptor.getCustomFormat(),descriptor.areItemsHideable(),descriptor.getValuesBuffer(),descriptor.getDetailsItems());}  }
class C{  public MD2(){  super("md2",DIGEST_LENGTH,BLOCK_LENGTH);}  }
class C{  public boolean preserve_source_annotations(){  return soot.PhaseOptions.getBoolean(options,"preserve-source-annotations");}  }
class C{  protected void commit() throws IOException {  if (bytecounter > 0) {    if (linelength > 0 && linecounter == linelength) {      outputStream.write("\r\n".getBytes());      linecounter=0;    }    char b1=Base64.chars.charAt((buffer << 8) >>> 26);    char b2=Base64.chars.charAt((buffer << 14) >>> 26);    char b3=(bytecounter < 2) ? Base64.pad : Base64.chars.charAt((buffer << 20) >>> 26);    char b4=(bytecounter < 3) ? Base64.pad : Base64.chars.charAt((buffer << 26) >>> 26);    outputStream.write(b1);    outputStream.write(b2);    outputStream.write(b3);    outputStream.write(b4);    linecounter+=4;    bytecounter=0;    buffer=0;  }}  }
class C{  public static short[] ulawToShort(byte[] ulaw){  if (ulaw == null)   return null;  short[] samples=new short[ulaw.length];  for (int i=0; i < ulaw.length; i++) {    samples[i]=ulawToShort(ulaw[i]);  }  return samples;}  }
class C{  public static Class loadClass(final String className,final ClassLoader classLoader) throws ClassNotFoundException {  if (className == null) {    throw new IllegalArgumentException("className is null");  }  try {    return load(className,classLoader);  } catch (  ClassNotFoundException ignore) {  }  Class type=null;  type=getPrimitiveType(className);  if (type != null)   return type;  type=getVMPrimitiveType(className);  if (type != null)   return type;  if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {    String name=className.substring(1,className.length() - 1);    return load(name,classLoader);  }  if (className.charAt(0) == '[') {    int arrayDimension=className.lastIndexOf('[') + 1;    String componentClassName=className.substring(arrayDimension,className.length());    type=loadClass(componentClassName,classLoader);    int dim[]=new int[arrayDimension];    java.util.Arrays.fill(dim,0);    return Array.newInstance(type,dim).getClass();  }  if (className.endsWith("[]")) {    int arrayDimension=0;    String componentClassName=className;    while (componentClassName.endsWith("[]")) {      componentClassName=componentClassName.substring(0,componentClassName.length() - 2);      arrayDimension++;    }    type=loadClass(componentClassName,classLoader);    int[] dim=new int[arrayDimension];    java.util.Arrays.fill(dim,0);    return Array.newInstance(type,dim).getClass();  }  throw new ClassNotFoundException(className);}  }
class C{  private static void toggleVisibleOnApi(JCheckBox component,int maxApiLevel,int apiLevel){  component.setVisible(apiLevel <= maxApiLevel);  if (!component.isVisible()) {    component.setSelected(false);  }}  }
class C{  public void startFirstSampleTimer(){}  }
class C{  public Value mod(Value num1,Value num2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static boolean canContainValue(Value val){  return val instanceof Local || val instanceof InstanceFieldRef || val instanceof StaticFieldRef|| val instanceof ArrayRef;}  }
class C{  public CloseShieldOutputStream(OutputStream out){  super(out);}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_SCROLLGET(String value0){  return new SM_SYSTEM_MESSAGE(1400833,value0);}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {}  }
class C{  public static void removeMarkers(JTextComponent component,SimpleMarker marker){  Highlighter hilite=component.getHighlighter();  Highlighter.Highlight[] hilites=hilite.getHighlights();  for (int i=0; i < hilites.length; i++) {    if (hilites[i].getPainter() instanceof SimpleMarker) {      SimpleMarker hMarker=(SimpleMarker)hilites[i].getPainter();      if (marker == null || hMarker.equals(marker)) {        hilite.removeHighlight(hilites[i]);      }    }  }}  }
class C{  public int readBytes(byte[] value) throws JMSException {  initializeReading();  try {    if (value == null) {      throw new NullPointerException();    }    if (bytesToRead == 0) {      bytesToRead=-1;      return -1;    } else     if (bytesToRead > 0) {      if (value.length >= bytesToRead) {        bytesToRead=0;        return dataIn.read(value,0,bytesToRead);      } else {        bytesToRead-=value.length;        return dataIn.read(value);      }    } else {      if (this.dataIn.available() == 0) {        throw new MessageEOFException("reached end of data");      }      if (this.dataIn.available() < 1) {        throw new MessageFormatException("Not enough data left to read value");      }      this.dataIn.mark(value.length + 1);      int type=this.dataIn.read();      if (this.dataIn.available() < 1) {        return -1;      }      if (type != _BYTES) {        throw new MessageFormatException("Not a byte array");      }      int len=this.dataIn.readInt();      if (len >= value.length) {        bytesToRead=len - value.length;        return this.dataIn.read(value);      } else {        bytesToRead=0;        return this.dataIn.read(value,0,len);      }    }  } catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public void copyFrom(FastByteArrayInputStream source,int offset,int count){  if (offset + count > source.getCount()) {    throw new IndexOutOfBoundsException("Trying to copy data past the end of source" + ", source.size=" + source.getCount() + ", offset="+ offset+ ", count="+ count);  }  byte[] srcBuf=source.getBuf();  write(srcBuf,offset,count);}  }
class C{  public void useIncense() throws RemoteServerException, LoginFailedException {  useIncense(ItemId.ITEM_INCENSE_ORDINARY);}  }
class C{  public boolean addLegionMember(int playerObjId){  if (canAddMember()) {    legionMembers.add(playerObjId);    return true;  }  return false;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private static void fixPrng(){  if (!prngFixed.get()) {synchronized (PrngFixes.class) {      if (!prngFixed.get()) {        PrngFixes.apply();        prngFixed.set(true);      }    }  }}  }
class C{  public void addProperty(String property,Boolean value){  add(property,createJsonElement(value));}  }
class C{  public boolean isDrawValueAboveBarEnabled(){  return mDrawValueAboveBar;}  }
class C{  @NonNull public static List<Project> create(@NonNull IntellijLintClient client,@Nullable List<VirtualFile> files,@NonNull Module... modules){  List<Project> projects=Lists.newArrayList();  Map<Project,Module> projectMap=Maps.newHashMap();  Map<Module,Project> moduleMap=Maps.newHashMap();  Map<AndroidLibrary,Project> libraryMap=Maps.newHashMap();  if (files != null && !files.isEmpty()) {    files=Lists.newArrayList(files);  }  for (  Module module : modules) {    addProjects(client,module,files,moduleMap,libraryMap,projectMap,projects);  }  client.setModuleMap(projectMap);  if (projects.size() > 1) {    Set<Project> roots=new HashSet<Project>(projects);    for (    Project project : projects) {      roots.removeAll(project.getAllLibraries());    }    return Lists.newArrayList(roots);  } else {    return projects;  }}  }
class C{  public static synchronized void addReconnectingAccount(ReconnectingAccount acc){  reconnectingAccounts.put(acc.getAccount().getId(),acc);}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public boolean showPopupSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS;}  }
class C{  public static final void greatestLowerBounds(ArrayList types){  for (int i=0; i < types.size(); i++) {    TypeDecl U=(TypeDecl)types.get(i);    for (int j=i + 1; j < types.size(); j++) {      TypeDecl V=(TypeDecl)types.get(j);      if (U == null || V == null)       continue;      if (U.instanceOf(V))       types.set(j,null); else       if (V.instanceOf(U))       types.set(i,null);    }  }  removeNullValues(types);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200826,skillcaster,num0,skillname);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    int startIndex=this.index;    int startCharacter=this.character;    int startLine=this.line;    reader.mark(Integer.MAX_VALUE);    do {      c=next();      if (c == 0) {        reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  back();  return c;}  }
class C{  private void magnitudePhaseFFT(double[] re,double[] im){  powerPhaseFFT(re,im);  toMagnitude(re);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (this.crsComboBox != null) {      return crsComboBox.isEnabled();    }  }  return false;}  }
class C{  private void doSendEquipmentAlive(final SourceDataTagValue aliveTagValue){  int ttl=aliveTagValue.getTimeToLive();  if (aliveTagInterval <= Integer.MAX_VALUE) {    ttl=aliveTagInterval.intValue();  }  aliveTagValue.setTimeToLive(ttl);  aliveTagValue.setPriority(DataTagConstants.PRIORITY_HIGH);  this.processMessageSender.addValue(aliveTagValue);}  }
class C{  public ServiceConfigurationError(Throwable x){  super(x);}  }
class C{  public void performQuery(JavaDStream<MapWritable> input){  logger.info("Performing query: ");  if (!useQueueStream) {    input.window(Durations.seconds(windowLength),Durations.seconds(windowLength));  }  JavaPairDStream<Integer,List<BigInteger>> selectorHashToDocRDD=input.mapToPair(new HashSelectorsAndPartitionData(bVars));  JavaPairDStream<Integer,Iterable<List<BigInteger>>> selectorGroupRDD=selectorHashToDocRDD.groupByKey();  JavaPairDStream<Long,BigInteger> encRowRDD=selectorGroupRDD.flatMapToPair(new EncRowCalc(accum,bVars));  encryptedColumnCalc(encRowRDD);  start();}  }
class C{  public static Map<String,Object> userLogin(DispatchContext ctx,Map<String,?> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  Delegator delegator=ctx.getDelegator();  if (!AuthHelper.authenticatorsLoaded()) {    AuthHelper.loadAuthenticators(dispatcher);  }  if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.enable",delegator))) {    if (!LdapAuthenticationServices.userLogin(ctx,context)) {      String errMsg=UtilProperties.getMessage(resource,"loginservices.ldap_authentication_failed",locale);      if ("true".equals(EntityUtilProperties.getPropertyValue("security","security.ldap.fail.login",delegator))) {        return ServiceUtil.returnError(errMsg);      } else {        Debug.logInfo(errMsg,module);      }    }  }  Map<String,Object> result=new LinkedHashMap<String,Object>();  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  boolean isServiceAuth=context.get("isServiceAuth") != null && ((Boolean)context.get("isServiceAuth")).booleanValue();  String username=(String)context.get("login.username");  if (username == null)   username=(String)context.get("username");  String password=(String)context.get("login.password");  if (password == null)   password=(String)context.get("password");  String visitId=(String)context.get("visitId");  String errMsg="";  if (username == null || username.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"loginservices.username_missing",locale);  } else   if (password == null || password.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"loginservices.password_missing",locale);  } else {    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator))) {      username=username.toLowerCase();    }    if ("true".equalsIgnoreCase(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {      password=password.toLowerCase();    }    boolean repeat=true;    int passNumber=0;    while (repeat) {      repeat=false;      passNumber++;      GenericValue userLogin=null;      try {        userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",username).cache(isServiceAuth).queryOne();      } catch (      GenericEntityException e) {        Debug.logWarning(e,"",module);      }      if (userLogin == null) {        try {          AuthHelper.syncUser(username);        } catch (        AuthenticatorException e) {          Debug.logWarning(e,module);        }        try {          userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",username).cache(isServiceAuth).queryOne();        } catch (        GenericEntityException e) {          Debug.logWarning(e,"",module);        }      }      if (userLogin != null) {        String ldmStr=EntityUtilProperties.getPropertyValue("security.properties","login.disable.minutes",delegator);        long loginDisableMinutes=30;        try {          loginDisableMinutes=Long.parseLong(ldmStr);        } catch (        Exception e) {          loginDisableMinutes=30;          Debug.logWarning("Could not parse login.disable.minutes from security.properties, using default of 30",module);        }        Timestamp disabledDateTime=userLogin.getTimestamp("disabledDateTime");        Timestamp reEnableTime=null;        if (loginDisableMinutes > 0 && disabledDateTime != null) {          reEnableTime=new Timestamp(disabledDateTime.getTime() + loginDisableMinutes * 60000);        }        boolean doStore=true;        userLogin=GenericValue.create(userLogin);        boolean isSystem=(isServiceAuth && userLogin.get("isSystem") != null) ? "Y".equalsIgnoreCase(userLogin.getString("isSystem")) : false;        boolean hasLoggedOut=userLogin.get("hasLoggedOut") != null ? "Y".equalsIgnoreCase(userLogin.getString("hasLoggedOut")) : false;        if (UtilValidate.isEmpty(userLogin.getString("enabled")) || "Y".equals(userLogin.getString("enabled")) || (reEnableTime != null && reEnableTime.before(UtilDateTime.nowTimestamp()))|| (isSystem)) {          String successfulLogin;          if (!isSystem) {            userLogin.set("enabled","Y");          }          boolean authFatalError=false;          boolean externalAuth=false;          try {            externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);          } catch (          AuthenticatorException e) {            Debug.logWarning(e,module);            authFatalError=true;          }          if ((!authFatalError && externalAuth) || checkPassword(userLogin.getString("currentPassword"),useEncryption,password)) {            Debug.logVerbose("[LoginServices.userLogin] : Password Matched",module);            if (hasLoggedOut) {              userLogin.set("hasLoggedOut","N");            }            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");            if (currentFailedLogins != null && currentFailedLogins.longValue() > 0) {              userLogin.set("successiveFailedLogins",Long.valueOf(0));            } else             if (!hasLoggedOut) {              doStore=false;            }            successfulLogin="Y";            if (!isServiceAuth) {              Map<?,?> userLoginSessionMap=LoginWorker.getUserLoginSession(userLogin);              if (userLoginSessionMap != null) {                result.put("userLoginSession",userLoginSessionMap);              }            }            result.put("userLogin",userLogin);            result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);          } else {            if (!authFatalError && isServiceAuth && passNumber <= 1) {              delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));              repeat=true;              continue;            }            Debug.logInfo("[LoginServices.userLogin] : Password Incorrect",module);            errMsg=UtilProperties.getMessage(resource,"loginservices.password_incorrect",locale);            Long currentFailedLogins=userLogin.getLong("successiveFailedLogins");            if (currentFailedLogins == null) {              currentFailedLogins=Long.valueOf(1);            } else {              currentFailedLogins=Long.valueOf(currentFailedLogins.longValue() + 1);            }            userLogin.set("successiveFailedLogins",currentFailedLogins);            String mflStr=EntityUtilProperties.getPropertyValue("security.properties","max.failed.logins",delegator);            long maxFailedLogins=3;            try {              maxFailedLogins=Long.parseLong(mflStr);            } catch (            Exception e) {              maxFailedLogins=3;              Debug.logWarning("Could not parse max.failed.logins from security.properties, using default of 3",module);            }            if (maxFailedLogins > 0 && currentFailedLogins.longValue() >= maxFailedLogins) {              userLogin.set("enabled","N");              userLogin.set("disabledDateTime",UtilDateTime.nowTimestamp());            }            successfulLogin="N";          }          Transaction parentTx=null;          boolean beganTransaction=false;          try {            try {              parentTx=TransactionUtil.suspend();            } catch (            GenericTransactionException e) {              Debug.logError(e,"Could not suspend transaction: " + e.getMessage(),module);            }            try {              beganTransaction=TransactionUtil.begin();              if (doStore) {                userLogin.store();              }              if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history",delegator))) {                boolean createHistory=true;                if (isServiceAuth && !"true".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.on.service.auth",delegator))) {                  createHistory=false;                }                if (createHistory) {                  Map<String,Object> ulhCreateMap=UtilMisc.toMap("userLoginId",username,"visitId",visitId,"fromDate",UtilDateTime.nowTimestamp(),"successfulLogin",successfulLogin);                  ModelEntity modelUserLogin=userLogin.getModelEntity();                  if (modelUserLogin.isField("partyId")) {                    ulhCreateMap.put("partyId",userLogin.get("partyId"));                  }                  if ("N".equals(successfulLogin) && !"false".equals(EntityUtilProperties.getPropertyValue("security.properties","store.login.history.incorrect.password",delegator))) {                    ulhCreateMap.put("passwordUsed",password);                  }                  delegator.create("UserLoginHistory",ulhCreateMap);                }              }            } catch (            GenericEntityException e) {              String geeErrMsg="Error saving UserLoginHistory";              if (doStore) {                geeErrMsg+=" and updating login status to reset hasLoggedOut, unsuccessful login count, etc.";              }              geeErrMsg+=": " + e.toString();              try {                TransactionUtil.rollback(beganTransaction,geeErrMsg,e);              } catch (              GenericTransactionException e2) {                Debug.logError(e2,"Could not rollback nested transaction: " + e2.getMessage(),module);              }              if (doStore) {                return ServiceUtil.returnError(geeErrMsg);              }            } finally {              try {                TransactionUtil.commit(beganTransaction);              } catch (              GenericTransactionException e) {                Debug.logError(e,"Could not commit nested transaction: " + e.getMessage(),module);              }            }          }  finally {            if (parentTx != null) {              try {                TransactionUtil.resume(parentTx);                Debug.logVerbose("Resumed the parent transaction.",module);              } catch (              GenericTransactionException e) {                Debug.logError(e,"Could not resume parent nested transaction: " + e.getMessage(),module);              }            }          }        } else {          if (isServiceAuth && passNumber <= 1) {            delegator.clearCacheLine("UserLogin",UtilMisc.toMap("userLoginId",username));            repeat=true;            continue;          }          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("username",username);          errMsg=UtilProperties.getMessage(resource,"loginservices.account_for_user_login_id_disabled",messageMap,locale);          if (disabledDateTime != null) {            messageMap=UtilMisc.<String,Object>toMap("disabledDateTime",disabledDateTime);            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.since_datetime",messageMap,locale);          } else {            errMsg+=".";          }          if (loginDisableMinutes > 0 && reEnableTime != null) {            messageMap=UtilMisc.<String,Object>toMap("reEnableTime",reEnableTime);            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.will_be_reenabled",messageMap,locale);          } else {            errMsg+=" " + UtilProperties.getMessage(resource,"loginservices.not_scheduled_to_be_reenabled",locale);          }        }      } else {        boolean externalAuth=false;        try {          externalAuth=AuthHelper.authenticate(username,password,isServiceAuth);        } catch (        AuthenticatorException e) {          errMsg=e.getMessage();          Debug.logError(e,"External Authenticator had fatal exception : " + e.getMessage(),module);        }        if (externalAuth) {          userLogin=delegator.makeValue("UserLogin");          userLogin.set("userLoginId",username);          userLogin.set("enabled","Y");          userLogin.set("hasLoggedOut","N");          result.put("userLogin",userLogin);          result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);        } else {          errMsg=UtilProperties.getMessage(resource,"loginservices.user_not_found",locale);          Debug.logInfo("[LoginServices.userLogin] Invalid User : '" + username + "'; "+ errMsg,module);        }      }    }  }  if (errMsg.length() > 0) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_FAIL);    result.put(ModelService.ERROR_MESSAGE,errMsg);  }  return result;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    boolean sixpack=((count % 6) == 0);    if (sixpack) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public Z Sqrt(Z a){  double t, tre, tim;  t=Z.abs(a);  if (Math.abs(a.re) <= Math.abs(a.im)) {    tre=Math.sqrt(0.5 * (t + a.re));    tim=Math.sqrt(0.5 * (t - a.re));  } else {    if (a.re > 0) {      tre=t + a.re;      tim=Math.abs(a.im) * Math.sqrt(0.5 / tre);      tre=Math.sqrt(0.5 * tre);    } else {      tim=t - a.re;      tre=Math.abs(a.im) * Math.sqrt(0.5 / tim);      tim=Math.sqrt(0.5 * tim);    }  }  if (a.im < 0)   tim=-tim;  re=tre;  im=tim;  return this;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp));  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true));}  }
class C{  public static boolean isNotSet(double value){  return Double.isInfinite(value) || (Math.abs(value) < 0.001);}  }
class C{  private void generateBroadcastReceiverLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){  createIfStmt(endClassStmt);  Stmt onReceiveStmt=searchAndBuildMethod(AndroidEntryPointConstants.BROADCAST_ONRECEIVE,currentClass,entryPoints,classLocal);  JNopStmt startWhileStmt=new JNopStmt();  JNopStmt endWhileStmt=new JNopStmt();  body.getUnits().add(startWhileStmt);  createIfStmt(endWhileStmt);  boolean hasAdditionalMethods=false;  if (modelAdditionalMethods) {    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);  }  addCallbackMethods(currentClass);  body.getUnits().add(endWhileStmt);  if (hasAdditionalMethods)   createIfStmt(startWhileStmt);  createIfStmt(onReceiveStmt);}  }
class C{  public void syllabify(LinkedList<String> phoneList){  if (phoneList == null)   return;  ListIterator<String> it=phoneList.listIterator(0);  if (!it.hasNext())   return;  Allophone previous=getAllophone(it.next());  boolean previousIsVowel=(previous != null && previous.sonority() >= 4);  while (it.hasNext()) {    Allophone next=getAllophone(it.next());    boolean nextIsVowel=(next != null && next.sonority() >= 4);    if (previousIsVowel && nextIsVowel && !next.name().equals("6")) {      it.previous();      it.add("-");      it.next();    }    previousIsVowel=nextIsVowel;  }  it=phoneList.listIterator(0);  int minSonority=7;  int minIndex=-1;  int syllableStart=-1;  while (it.hasNext()) {    String s=it.next();    if (s.equals("-")) {      minSonority=7;      minIndex=-1;      syllableStart=it.previousIndex();    } else {      Allophone ph=getAllophone(s);      if (ph != null && ph.sonority() < minSonority) {        minSonority=ph.sonority();        minIndex=it.previousIndex();      } else       if (ph != null && ph.sonority() >= 4) {        if (minIndex > syllableStart + 1) {          int steps=0;          while (it.nextIndex() > minIndex) {            steps++;            it.previous();          }          it.add(".");          while (steps > 0) {            it.next();            steps--;          }        }        minSonority=7;        minIndex=-1;      }    }  }  it=phoneList.listIterator(0);  while (it.hasNext()) {    String s=it.next();    if (s.equals(".")) {      it.previous();      Allophone ph=getAllophone(it.previous());      it.next();      it.next();      if (ph != null && ph.sonority() == 5) {        ph=getAllophone(it.next());        if (ph != null && ph.sonority() <= 3) {          ph=getAllophone(it.next());          if (ph != null && ph.sonority() <= 3) {            it.previous();            it.previous();            it.previous();            it.remove();            it.next();            it.add("-");          } else {            it.previous();            it.previous();            it.previous();            it.set("-");          }        } else {          it.previous();          it.previous();          it.set("-");        }      } else {        it.set("-");      }    }  }  it=phoneList.listIterator(0);  while (it.hasNext()) {    String s=it.next();    if (s.equals("-")) {      Allophone ph=getAllophone(it.next());      if (ph != null && ph.name().equals("N")) {        ph=getAllophone(it.next());        if (ph != null && ph.sonority() >= 5) {          it.previous();          it.previous();          it.previous();          it.remove();          it.next();          it.add("-");        }      }    }  }  correctStressSymbol(phoneList);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void snapshot(ITemplatePacket entryPacket) throws UnusableEntryException {  ITypeDesc prev=null;  if (getCacheManager().isOffHeapCachePolicy())   prev=_typeManager.getTypeDesc(entryPacket.getTypeName());  try {    IServerTypeDesc cur=_typeManager.loadServerTypeDesc(entryPacket);    if (getCacheManager().isOffHeapCachePolicy() && cur.getTypeDesc() != prev)     getCacheManager().getStorageAdapter().introduceDataType(cur.getTypeDesc());  } catch (  UnknownTypeException ute) {    throw new ProxyInternalSpaceException(ute.toString(),ute);  }}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  private void addItem(ExpandingItem item){  mContainer.addView(item);}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public void toString(StringBuffer s){  super.toString(s);}  }
class C{  protected boolean isValidFragment(String fragment){  if (fragment == null) {    return true;  }  return isOff(NO_FRAGMENTS);}  }
class C{  public HeapDumpDescriptor(HeapDump heapDump){  super(heapDump,NbBundle.getMessage(HeapDumpDescriptor.class,"DESCR_HeapDump"),ICON);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_AUTHORIZE_CANCEL(int nameId){  return new SM_SYSTEM_MESSAGE(1402147,new Object[]{new DescriptionId(nameId)});}  }
class C{  public static <T>Aggregate<T,List<T>> list(){  return new ListAggregate<>();}  }
class C{  public final void addDescription(final Object pValue,final String pDescription){  if (pValue != null) {    this.descriptions.put(pValue,pDescription);  }}  }
class C{  TestType(final Long pik){  this.pik=pik;}  }
class C{  public void clearResources(){  objectCache.clear();}  }
class C{  @Nullable public ItemStack transferStackInSlot(EntityPlayer playerIn,int index){  ItemStack itemstack=null;  Slot slot=(Slot)this.inventorySlots.get(index);  if (slot != null && slot.getHasStack()) {    ItemStack itemstack1=slot.getStack();    itemstack=itemstack1.copy();    if (index < this.numRows * 9) {      if (!this.mergeItemStack(itemstack1,this.numRows * 9,this.inventorySlots.size(),true)) {        return null;      }    } else     if (!this.mergeItemStack(itemstack1,0,this.numRows * 9,false)) {      return null;    }    if (itemstack1.stackSize == 0) {      slot.putStack((ItemStack)null);    } else {      slot.onSlotChanged();    }  }  return itemstack;}  }
class C{  private void maybeSendEvent(UnicastResponse response,String[] newGroups){  ServiceRegistrar reg=response.getRegistrar();  boolean getActual=true;  if (newGroups == null) {    newGroups=getActualGroups(reg);    if (newGroups == null)     return;    getActual=false;  }  if (groupSetsEqual(response.getGroups(),newGroups))   return;  String[] actualGroups=newGroups;  if (getActual && (newGroups.length > 0)) {    actualGroups=getActualGroups(reg);    if (actualGroups == null)     return;  }synchronized (registrars) {    UnicastResponse resp=(UnicastResponse)registrars.get(reg.getServiceID());    if (resp == null) {      return;    }    notifyOnGroupChange(reg,resp.getGroups(),actualGroups);  }}  }
class C{  private void verifyReplicationModeOnDistributedTransactionProcessingConfiguration(Logger specificLogger){  if (_distributedTransactionProcessingConfiguration.isOverriden()) {    if (specificLogger.isLoggable(Level.WARNING))     specificLogger.log(Level.WARNING,"Distributed transaction processing configuration has been set but replication mode was not set to '" + MULTI_SOURCE_MODE + "' - configuration will be ignored");  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();switch (c) {case 0:case '\n':case '\r':      throw syntaxError("Unterminated string");case '\\':    c=next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_OTHER_NPC(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1260220,skilltarget,skillcaster);}  }
class C{  public void delayRenew(){  long delta=endTime - renew;  if (delta <= renewalRTT) {    return;  } else   if (delta <= renewalRTT * 3) {    delta=renewalRTT;  } else   if (delta <= 1000 * 60 * 60) {    delta/=3;  } else   if (delta <= 1000 * 60 * 60* 24) {    delta=1000 * 60 * 30;  } else   if (delta <= 1000 * 60 * 60* 24* 7) {    delta=1000 * 60 * 60* 3;  } else {    delta=1000 * 60 * 60* 8;  }  renew+=delta;}  }
class C{  public void removeEnvVar(int rowIndex){  EnvVar envVar=dataList.get(rowIndex);  if (this.envMgr != null) {    this.envMgr.removeEnvVar(envVar);  }  dataList.remove(rowIndex);  this.fireTableDataChanged();}  }
class C{  void removedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){}  }
class C{  public void resume(){  engine.resume();}  }
class C{  private void activate0(boolean force,Object proxy) throws RemoteException {  assert Thread.holdsLock(this);  uproxy=null;  try {    if (proxy != null && enableGrant) {      try {        Security.grant(proxy.getClass(),id.getClass());      } catch (      UnsupportedOperationException uoe) {      }    }    Object newProxy=id.activate(force);    if (!Proxy.isProxyClass(newProxy.getClass())) {      throw new ActivateFailedException("invalid proxy");    }    InvocationHandler obj=Proxy.getInvocationHandler(newProxy);    if (!(obj instanceof ActivatableInvocationHandler)) {      throw new ActivateFailedException("invalid proxy handler");    }    ActivatableInvocationHandler handler=(ActivatableInvocationHandler)obj;    if (!id.equals(handler.id)) {      throw new ActivateFailedException("unexpected activation id");    }    Remote newUproxy=handler.uproxy;    if (newUproxy == null) {      throw new ActivateFailedException("null underlying proxy");    } else     if (newUproxy instanceof RemoteMethodControl) {      newUproxy=(Remote)((RemoteMethodControl)newUproxy).setConstraints(clientConstraints);    }    uproxy=newUproxy;  } catch (  ConnectException e) {    throw new ConnectException("activation failed",e);  }catch (  RemoteException e) {    throw new ConnectIOException("activation failed",e);  }catch (  UnknownObjectException e) {    throw new NoSuchObjectException("object not registered");  }catch (  ActivationException e) {    throw new ActivateFailedException("activation failed",e);  }}  }
class C{  public static boolean isAlphabetic(String s){  if (isEmpty(s))   return defaultEmptyOK;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (!isLetter(c))     return false;  }  return true;}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("Matrix is not symmetric positive definite.");  }  double[][] X=B.getArrayCopy();  int nx=B.getColumnDimension();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return new Matrix(X,n,nx);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void shutdown(){  drivers.stream().filter(null).forEach(null);}  }
class C{  protected void beforeMove(){synchronized (System.err) {    System.err.println(getLocalName() + " is now migrating.");  }}  }
class C{  private long[] helperHuntingRewardMonster(long id){  ArrayList<Long> ids=new ArrayList<Long>();  ids.add(id);  MonsterCursor monsterCursor=mHelper.queryMonster(id);  monsterCursor.moveToFirst();  String name=monsterCursor.getMonster().getName();  monsterCursor.close();  monsterCursor=mHelper.queryMonsterTrait(name);  monsterCursor.moveToFirst();  while (!monsterCursor.isAfterLast()) {    ids.add(monsterCursor.getMonster().getId());    monsterCursor.moveToNext();  }  monsterCursor.close();  long[] idArray=new long[ids.size()];  for (int i=0; i < idArray.length; i++) {    idArray[i]=ids.get(i);  }  return idArray;}  }
class C{  @Override public String toString(){  return MoreObjects.toStringHelper(this).add("id",getId()).add("title",getTitle()).add("summary",getSummary()).add("extractBinary",getExtractBinary()).add("extractFileName",getExtractFileName()).add("extractContentType",getExtractContentType()).add("extractSize",getExtractSize()).add("publicationDate",getPublicationDate()).add("bestSeller",getBestSeller()).add("price",getPrice()).toString();}  }
class C{  public void queueNow(Job job) throws InvalidJobException {  job.queue();  try {    executor.execute(job);  } catch (  Exception e) {    job.deQueue();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUseUltraSkill_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200541,skilltarget,skillname);}  }
class C{  public static void loadInstalledVersions(){  IAndroidTarget[] targets=getCompilationTargets();  IAndroidTarget highestInstalledTarget=null;  ourInstalledVersions.clear();  for (  IAndroidTarget target : targets) {    if (target.isPlatform() && target.getVersion().getFeatureLevel() >= SdkVersionInfo.LOWEST_COMPILE_SDK_VERSION && (highestInstalledTarget == null || target.getVersion().getFeatureLevel() > highestInstalledTarget.getVersion().getFeatureLevel() && !target.getVersion().isPreview())) {      highestInstalledTarget=target;    }    if (target.getVersion().isPreview() || !target.getAdditionalLibraries().isEmpty()) {      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(target);      ourInstalledVersions.add(targetInfo.target.getVersion());    }  }  ourHighestInstalledApiTarget=highestInstalledTarget;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_SKILL_ME_to_B(String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201170,skillname,skilltarget);}  }
class C{  public static void checkColumnIndex(final AnyMatrix m,final int column) throws MathIllegalArgumentException {  if (column < 0 || column >= m.getColumnDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.COLUMN_INDEX,column,0,m.getColumnDimension() - 1);  }}  }
class C{  public void upgradeDataDimensionItemsToReportingRateMetric(){  String sql="update datadimensionitem " + "set metric='REPORTING_RATE' " + "where datasetid is not null "+ "and metric is null;";  executeSql(sql);}  }
class C{  public TokenToWords(CART usNumbersCART,PronounceableFSM prefixFSM,PronounceableFSM suffixFSM){  this.cart=usNumbersCART;  this.prefixFSM=prefixFSM;  this.suffixFSM=suffixFSM;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int total=0;  if (len == 0) {    return 0;  }  int avail=count - pos - 2;  if (avail <= 0) {    fill();    avail=count - pos - 2;    if (avail <= 0) {      return -1;    }  }  int copy=Math.min(len,avail);  System.arraycopy(buf,pos,b,off,copy);  pos+=copy;  total+=copy;  while (total < len) {    fill();    avail=count - pos - 2;    if (avail <= 0) {      return total;    }    copy=Math.min(len - total,avail);    System.arraycopy(buf,pos,b,off + total,copy);    pos+=copy;    total+=copy;  }  return total;}  }
class C{  @Override public void onBindViewHolder(K holder,int position){  holder.bindItem(items.get(position));}  }
class C{  public RoundedIconGenerator(Context context,int iconWidthDp,int iconHeightDp,int cornerRadiusDp,int backgroundColor,int textSizeDp){  this((int)(context.getResources().getDisplayMetrics().density * iconWidthDp),(int)(context.getResources().getDisplayMetrics().density * iconHeightDp),(int)(context.getResources().getDisplayMetrics().density * cornerRadiusDp),backgroundColor,(int)(context.getResources().getDisplayMetrics().density * textSizeDp));}  }
class C{  public static final double metersPerSecondToFeetPerSecond(double metersPerSecond){  return metersPerSecond * FOOT_TO_METER;}  }
class C{  public SM_UI_SETTINGS(byte[] data,int type){  this.data=data;  this.type=type;}  }
class C{  public NumericLiteral(int x){  m_number=new Integer(x);  m_type=int.class;}  }
class C{  public synchronized Chain<T> advance(){  if (next_ == null) {    if (!forward_.hasNext())     throw new NoSuchElementException();    next_=new Chain<>(forward_.next(),forward_);    forward_=null;  }  return next_;}  }
class C{  public <T>String makeStringValue(T value){  return value.toString();}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  private static void write(IReadBlock readBlock,Writer w) throws IOException {  String header=readBlock.getReadHeader();  if (header != null) {    if (!header.startsWith(">"))     w.write(">");    w.write(header);    if (!header.endsWith("\n"))     w.write("\n");  } else   w.write(">null\n");  String sequence=readBlock.getReadSequence();  if (sequence != null) {    if (sequence.endsWith("\n\n")) {      w.write(sequence.substring(0,sequence.length() - 1));    } else {      w.write(sequence);      if (!sequence.endsWith("\n"))       w.write("\n");    }  } else   w.write("null\n");}  }
class C{  public static double polynomialDistance(float[] coeffs1,float[] coeffs2){  if (coeffs1 == null || coeffs2 == null)   throw new NullPointerException("Received null argument");  if (coeffs1.length != coeffs2.length)   throw new IllegalArgumentException("Can only compare polynomials with same order");  double dist=0;  int order=coeffs1.length - 1;  for (int i=0; i <= order; i++) {    dist+=((double)coeffs1[order - i] - coeffs2[order - i]) / (i + 1);  }  return Math.abs(dist);}  }
class C{  @Override public void onAdsLoaded(){  WritableMap adsManagersState=Arguments.createMap();  for (  String key : mAdsManagers.keySet()) {    NativeAdsManager adsManager=mAdsManagers.get(key);    adsManagersState.putBoolean(key,adsManager.isLoaded());  }  sendAppEvent("CTKNativeAdsManagersChanged",adsManagersState);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> options){  StmtBody body=(StmtBody)b;  boolean onlyStackVars=PhaseOptions.getBoolean(options,"only-stack-locals");  if (Options.v().time())   Timers.v().aggregationTimer.start();  int aggregateCount=1;  boolean changed=false;  Map<ValueBox,Zone> boxToZone=new HashMap<ValueBox,Zone>(body.getUnits().size() * 2 + 1,0.7f);{    Zonation zonation=new Zonation(body);    for (    Unit u : body.getUnits()) {      Zone zone=zonation.getZoneOf(u);      for (      ValueBox box : u.getUseBoxes()) {        boxToZone.put(box,zone);      }      for (      ValueBox box : u.getDefBoxes()) {        boxToZone.put(box,zone);      }    }  }  do {    if (Options.v().verbose())     G.v().out.println("[" + body.getMethod().getName() + "] Aggregating iteration "+ aggregateCount+ "...");    changed=internalAggregate(body,boxToZone,onlyStackVars);    aggregateCount++;  } while (changed);  if (Options.v().time())   Timers.v().aggregationTimer.end();}  }
class C{  @Override public void run(){  Statistics stats=new Statistics(50,3000);  try {    Thread.sleep(mCacheSize);    long delta=0;    while (mBufferCommitted.tryAcquire(4,TimeUnit.SECONDS)) {      if (mOldTimestamp != 0) {        if ((mTimestamps[mBufferOut] - mOldTimestamp) > 0) {          stats.push(mTimestamps[mBufferOut] - mOldTimestamp);          long d=stats.average() / 1000000;          if (mCacheSize > 0)           Thread.sleep(d);        } else         if ((mTimestamps[mBufferOut] - mOldTimestamp) < 0) {          Log.e(TAG,"TS: " + mTimestamps[mBufferOut] + " OLD: "+ mOldTimestamp);        }        delta+=mTimestamps[mBufferOut] - mOldTimestamp;        if (delta > 500000000 || delta < 0) {          delta=0;        }      }      mReport.update(mPackets[mBufferOut].getLength(),(mTimestamps[mBufferOut] / 100L) * (mClock / 1000L) / 10000L);      mOldTimestamp=mTimestamps[mBufferOut];      if (mCount++ > 30) {        if (mTransport == TRANSPORT_UDP) {          mSocket.send(mPackets[mBufferOut]);        } else {          sendTCP();        }      }      if (++mBufferOut >= mBufferCount)       mBufferOut=0;      mBufferRequested.release();    }  } catch (  Exception e) {    e.printStackTrace();  }  mThread=null;  resetFifo();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  protected void processPolar(double[] r,double[] phi){}  }
class C{  private void createFormal(polyglot.ast.Formal formal,int counter){  soot.Type sootType=Util.getSootType(formal.type().type());  soot.Local formalLocal=createLocal(formal.localInstance());  soot.jimple.ParameterRef paramRef=soot.jimple.Jimple.v().newParameterRef(sootType,counter);  paramRefCount++;  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,paramRef);  body.getUnits().add(stmt);  Util.addLnPosTags(((soot.jimple.IdentityStmt)stmt).getRightOpBox(),formal.position());  Util.addLnPosTags(stmt,formal.position());}  }
class C{  public static boolean isBackgroundAttribute(String text){  return BACKGROUND_ATTRIBUTES.contains(text);}  }
class C{  public static void copyStream(InputStream is,OutputStream os,byte[] buffer,int bufferSize,String confid,double fileSize,Context context) throws IOException {  double downloaded=0;  int[] update=new int[3];  try {    for (; ; ) {      int count=is.read(buffer,0,bufferSize);      downloaded+=count;      if (count == -1) {        if (context != null) {        }        break;      }      os.write(buffer,0,count);      if (context != null) {        update[0]=(int)downloaded;        update[1]=(int)fileSize;        update[2]=(int)((downloaded / fileSize) * 100);      }    }  } catch (  IOException e) {    throw e;  }}  }
class C{  @Override public void onPageStarted(WebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  isCurrentlyLoading=true;  parentEngine.bridge.reset();  parentEngine.client.onPageStarted(url);}  }
class C{  public static boolean overlaps(TextEdit edit1,TextEdit edit2){  if (edit1 instanceof MultiTextEdit && edit2 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit1=(MultiTextEdit)edit1;    if (!multiTextEdit1.hasChildren())     return false;    MultiTextEdit multiTextEdit2=(MultiTextEdit)edit2;    if (!multiTextEdit2.hasChildren())     return false;    TextEdit[] children1=multiTextEdit1.getChildren();    TextEdit[] children2=multiTextEdit2.getChildren();    int i1=0;    int i2=0;    while (i1 < children1.length && i2 < children2.length) {      while (children1[i1].getExclusiveEnd() < children2[i2].getOffset()) {        i1++;        if (i1 >= children1.length)         return false;      }      while (children2[i2].getExclusiveEnd() < children1[i1].getOffset()) {        i2++;        if (i2 >= children2.length)         return false;      }      if (children1[i1].getExclusiveEnd() < children2[i2].getOffset())       continue;      if (overlaps(children1[i1],children2[i2]))       return true;      int mergeEnd=Math.max(children1[i1].getExclusiveEnd(),children2[i2].getExclusiveEnd());      i1++;      i2++;      if (i1 < children1.length && children1[i1].getOffset() < mergeEnd) {        return true;      }      if (i2 < children2.length && children2[i2].getOffset() < mergeEnd) {        return true;      }    }    return false;  } else   if (edit1 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit1=(MultiTextEdit)edit1;    if (!multiTextEdit1.hasChildren())     return false;    TextEdit[] children=multiTextEdit1.getChildren();    int i=0;    while (children[i].getExclusiveEnd() < edit2.getOffset()) {      i++;      if (i >= children.length)       return false;    }    if (overlaps(children[i],edit2))     return true;    return false;  } else   if (edit2 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit2=(MultiTextEdit)edit2;    if (!multiTextEdit2.hasChildren())     return false;    TextEdit[] children=multiTextEdit2.getChildren();    int i=0;    while (children[i].getExclusiveEnd() < edit1.getOffset()) {      i++;      if (i >= children.length)       return false;    }    if (overlaps(children[i],edit1))     return true;    return false;  } else {    int start1=edit1.getOffset();    int end1=start1 + edit1.getLength();    int start2=edit2.getOffset();    int end2=start2 + edit2.getLength();    if (start1 > end2)     return false;    if (start2 > end1)     return false;    return true;  }}  }
class C{  static String unicodeToASCII(String input){  try {    return toASCII(input);  } catch (  IllegalArgumentException e) {    return input;  }}  }
class C{  public WallGetByIdQuery(VkApiClient client,String... posts){  super(client,"wall.getById",Utils.buildParametrizedType(List.class,WallpostFull.class));  posts(posts);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200929,skilltarget);}  }
class C{  public static boolean moveToTargetWithDistance(VisibleObject object,Player player,int direction,int distance){  double radian=Math.toRadians(object.getHeading() * 3);  float x0=object.getX();  float y0=object.getY();  float x1=(float)(Math.cos(Math.PI * direction + radian) * distance);  float y1=(float)(Math.sin(Math.PI * direction + radian) * distance);  return teleportTo(player,object.getWorldId(),x0 + x1,y0 + y1,object.getZ());}  }
class C{  public void cancel(Account account,OCFile file){  Pair<DownloadFileOperation,String> removeResult=mPendingDownloads.remove(account.name,file.getRemotePath());  DownloadFileOperation download=removeResult.first;  if (download != null) {    download.cancel();  } else {    if (mCurrentDownload != null && mCurrentAccount != null && mCurrentDownload.getRemotePath().startsWith(file.getRemotePath()) && account.name.equals(mCurrentAccount.name)) {      mCurrentDownload.cancel();    }  }}  }
class C{  public Document fromXMLtoDOC(final String xml){  Document confXMLDoc;  log.trace("fromXMLtoDOC - trying to configure process using configuration XML");  SimpleXMLParser parser=null;  try {    parser=new SimpleXMLParser();    confXMLDoc=parser.parse(xml);  } catch (  ParserConfigurationException e) {    log.error("fromXMLtoDOC - Error creating instance of SimpleXMLParser");    return null;  }catch (  ParserException ex) {    log.error("fromXMLtoDOC - Exception caught in DOM parsing processConfiguration XML");    log.trace("fromXMLtoDOC - processConfiguration XML was: " + xml);    return null;  }  log.trace("fromXMLtoDOC - Configuration XML loaded and parsed");  return confXMLDoc;}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  public NelderMeadSimplex(final int n){  this(n,1d);}  }
class C{  public static DataValue createDataValue(DataElement dataElement,Period period,OrganisationUnit source,String value,DataElementCategoryOptionCombo categoryOptionCombo){  DataValue dataValue=new DataValue();  dataValue.setDataElement(dataElement);  dataValue.setPeriod(period);  dataValue.setSource(source);  dataValue.setCategoryOptionCombo(categoryOptionCombo);  dataValue.setAttributeOptionCombo(categoryOptionCombo);  dataValue.setValue(value);  dataValue.setComment("Comment");  dataValue.setStoredBy("StoredBy");  return dataValue;}  }
class C{  private static final String export(Convex c,String tabs){  StringBuilder sb=new StringBuilder();  if (c instanceof Circle) {    Circle circle=(Circle)c;    sb.append(tabs).append("Convex c = Geometry.createCircle(").append(circle.getRadius()).append(");").append(NEW_LINE);    if (!circle.getCenter().isZero()) {      sb.append(tabs).append("c.translate(").append(export(circle.getCenter())).append(");").append(NEW_LINE);    }  } else   if (c instanceof Rectangle) {    Rectangle rectangle=(Rectangle)c;    sb.append(tabs).append("Convex c = Geometry.createRectangle(").append(rectangle.getWidth()).append(", ").append(rectangle.getHeight()).append(");").append(NEW_LINE);    if (Math.abs(rectangle.getRotation()) > Epsilon.E) {      sb.append(tabs).append("c.rotate(Math.toRadians(").append(Math.toDegrees(rectangle.getRotation())).append("));").append(NEW_LINE);    }    if (!rectangle.getCenter().isZero()) {      sb.append(tabs).append("c.translate(").append(export(rectangle.getCenter())).append(");").append(NEW_LINE);    }  } else   if (c instanceof Triangle) {    Triangle triangle=(Triangle)c;    sb.append(tabs).append("Convex c = Geometry.createTriangle(").append(export(triangle.getVertices()[0])).append(", ").append(export(triangle.getVertices()[1])).append(", ").append(export(triangle.getVertices()[2])).append(");").append(NEW_LINE);  } else   if (c instanceof Polygon) {    Polygon polygon=(Polygon)c;    sb.append(tabs).append("Convex c = Geometry.createPolygon(");    int vSize=polygon.getVertices().length;    for (int i=0; i < vSize; i++) {      Vector2 v=polygon.getVertices()[i];      if (i != 0)       sb.append(", ");      sb.append(export(v));    }    sb.append(");").append(NEW_LINE);  } else   if (c instanceof Segment) {    Segment segment=(Segment)c;    sb.append(tabs).append("Convex c = Geometry.createSegment(").append(export(segment.getVertices()[0])).append(", ").append(export(segment.getVertices()[1])).append(");").append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),c.getClass().getName()));  }  return sb.toString();}  }
class C{  public IReadBlock next(){  try {    countReads++;    return ReadBlockRMA2.read(rma2Formatter,-1,wantReadText,wantMatchData,wantMatchText,minScore,maxExpected,textStorageReader,dataIndexReader);  } catch (  IOException e) {    Basic.caught(e);    error=true;    return null;  }}  }
class C{  private void normalizeReport(ConfigurationElementReport parentReport){  int subReportSize=parentReport.getSubreports().size();  if (subReportSize > 1) {    for (    ConfigurationElementReport subReport : parentReport.getSubreports()) {      normalizeReport(subReport);    }  } else   if (subReportSize == 1) {    ConfigurationElementReport subReport=parentReport.getSubreports().get(0);    if (parentReport.getAction().equals(subReport.getAction()) && parentReport.getEntity().equals(subReport.getEntity()) && parentReport.getId().equals(subReport.getId())&& parentReport.getStatus().equals(subReport.getStatus())) {      parentReport.setStatusMessage(subReport.getStatusMessage());      parentReport.getSubreports().clear();    }    subReport=null;  }}  }
class C{  public static void log(int severity,String message,Throwable e){  log(new Status(severity,ID,0,message,e));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201256,skillcaster,skillname);}  }
class C{  public NewsfeedDeleteBanQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public void openDatabase(){  String path=DB_PATH + DB_NAME;  mDatabase=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);}  }
class C{  public double estimateError(final double[] scale){  double error=0;  if (currentDegree >= 5) {    for (int i=0; i < scale.length; ++i) {      final double e=polynomials[currentDegree][i] / scale[i];      error+=e * e;    }    error=FastMath.sqrt(error / scale.length) * errfac[currentDegree - 5];  }  return error;}  }
class C{  public TreeLayout(){  super();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FREE_EXPERIENCE_CHARACTER_CANT_SEND_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400401,value0);}  }
class C{  public MessagesSendQuery chatId(Integer value){  return unsafeParam("chat_id",value);}  }
class C{  public AccountGetBannedQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private boolean deleteStorage(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException {  byte[] header;  byte[] bGroupName;  byte[] bs;  int len;  Socket trackerSocket;  trackerSocket=trackerServer.getSocket();  OutputStream out=trackerSocket.getOutputStream();  bs=groupName.getBytes(ClientGlobal.g_charset);  bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];  if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {    len=bs.length;  } else {    len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN;  }  Arrays.fill(bGroupName,(byte)0);  System.arraycopy(bs,0,bGroupName,0,len);  int ipAddrLen;  byte[] bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset);  if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) {    ipAddrLen=bIpAddr.length;  } else {    ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1;  }  header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0);  byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen];  System.arraycopy(header,0,wholePkg,0,header.length);  System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length);  System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen);  out.write(wholePkg);  ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,0);  this.errno=pkgInfo.errno;  return pkgInfo.errno == 0;}  }
class C{  public static <T>T findValueOfType(Collection<T> collection,Class<? extends T> type) throws IllegalArgumentException {  if (isEmpty(collection))   return null;  Class<?> typeToUse=(type != null ? type : Object.class);  T value=null;  for (  T obj : collection) {    if (typeToUse.isInstance(obj)) {      if (value != null)       throw new IllegalArgumentException("More than one value of type [" + typeToUse.getName() + "] found");      value=obj;    }  }  return value;}  }
class C{  public static final void toString(StringBuffer output,double[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_DODGE(String value0){  return new SM_SYSTEM_MESSAGE(1210226,value0);}  }
class C{  public UseItemEggIncubatorResponse.Result hatchEgg(EggPokemon egg) throws LoginFailedException, RemoteServerException {  UseItemEggIncubatorMessage reqMsg=UseItemEggIncubatorMessage.newBuilder().setItemId(proto.getId()).setPokemonId(egg.getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestTypeOuterClass.RequestType.USE_ITEM_EGG_INCUBATOR,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  UseItemEggIncubatorResponse response;  try {    response=UseItemEggIncubatorResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  api.getInventories().updateInventories(true);  return response.getResult();}  }
class C{  public void startSequence(){  if (queue.isEmpty()) {    Log.d(TAG,"EMPTY SEQUENCE");  } else {    queue.poll().show();  }}  }
class C{  public void updateFieldConfig(BasePanel basePanel){  if (basePanel != null) {    fieldConfigList.addAll(basePanel.fieldConfigList);  }}  }
class C{  public static Event createAction(){  return new Event("ACTION");}  }
class C{  public static List parseConfiguration(Element element){  String componentName=null;  List configList=new ArrayList();  NodeList nList=element.getChildNodes();  for (int i=0; i < nList.getLength(); i++) {    Node node=nList.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element el=(Element)node;      if (el.getTagName().equalsIgnoreCase("component")) {        NamedNodeMap nm=nList.item(i).getAttributes();        Node node1=nm.getNamedItem("Name");        if (node1 == null)         node1=nm.getNamedItem("name");        componentName=node1.getNodeValue();        if (!componentName.endsWith("."))         componentName=componentName + ".";        componentName=componentName.replace(' ','_');        Map parms=parseParameters(el);        for (Iterator it=parms.entrySet().iterator(); it.hasNext(); ) {          Map.Entry me=(Map.Entry)it.next();          String name=(String)me.getKey();          String value=(String)me.getValue();          configList.add(componentName + name + "="+ value);        }      }    }  }  return (configList);}  }
class C{  public FieldConfigCommonData(Class<?> panelId,FieldIdEnum id,String label,boolean valueOnly,boolean rasterSymbol){  super();  this.panelId=panelId;  this.id=id;  this.label=label;  this.valueOnly=valueOnly;  this.rasterSymbol=rasterSymbol;}  }
class C{  public List<Supplier> readSuppliers(EntityManager em,String bpXml){  ArrayList<Supplier> suppliers=new ArrayList<Supplier>();  String role="02";  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=getResourceAsInputStream(bpXml);    eventReader=inputFactory.createXMLEventReader(in);    Supplier sup=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (BUSINESS_PARTNER)) {          sup=new Supplier();        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ID)) {          event=eventReader.nextEvent();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_SUPPLIER_NAME)) {          event=eventReader.nextEvent();          sup.setSupplierName(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ROLE)) {          event=eventReader.nextEvent();          role=getEvent(event);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_ADDRESS)) {          event=eventReader.nextEvent();          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_CITY)) {          event=eventReader.nextEvent();          sup.setCity(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_POSTAL_CODE)) {          event=eventReader.nextEvent();          sup.setPostalCode(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_STREET)) {          event=eventReader.nextEvent();          sup.setStreet(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_BUILDING)) {          event=eventReader.nextEvent();          sup.setHouseNumber(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_COUNTRY)) {          event=eventReader.nextEvent();          sup.setCountry(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_PHONE_NUMBER)) {          event=eventReader.nextEvent();          sup.setPhoneNumber(getEvent(event));          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(BP_EMAIL_ADDRESS)) {          event=eventReader.nextEvent();          sup.setEmailAddress(getEvent(event));          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (BUSINESS_PARTNER)) {          if (Integer.parseInt(role) == 2) {            em.persist(sup);            suppliers.add(sup);          }        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    IOException e) {      logger.error("IO Exception occured",e);      status=false;    }catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return suppliers;}  }
class C{  public MessagesMarkAsReadQuery markAsRead(Actor actor){  return new MessagesMarkAsReadQuery(getClient(),actor);}  }
class C{  protected List<ServiceItem> lookup(final State state,int maxMatches) throws InterruptedException {  sleepYieldTime();  _electTemplate.setState(state);  ServiceItem[] foundSrv=_namingService.lookup(_electTemplate,maxMatches,null);  if (foundSrv == null) {    if (_logger.isLoggable(Level.FINEST)) {      _logger.finest("Lookup service not found while querying for state: " + _electTemplate._actState.getState());    }    return null;  }  List<ServiceItem> matchedSrv=trimServices(foundSrv);  if (_logger.isLoggable(Level.FINEST)) {    int duplicates=foundSrv.length - matchedSrv.size();    _logger.finest("Found: [" + matchedSrv.size() + "] matches for "+ " serviceTemplate: ["+ _electTemplate+ "]; matched services: "+ matchedSrv+ (duplicates > 0 ? " duplicates: [" + duplicates + "]" : ""));  }  return matchedSrv;}  }
class C{  public static Model create(FileDescriptorSet proto,Iterable<String> sources){  return new Model(proto,sources,null,ExtensionPool.EMPTY,new BoundedDiagCollector());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_CHECK_REQUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300990,value0);}  }
class C{  public T val(){  return v;}  }
class C{  private static int calculateSampleFactor(Options options,int reqWidth,int reqHeight){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    final int halfHeight=height / 2;    final int halfWidth=width / 2;    while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public Item(int objId,ItemTemplate itemTemplate){  super(objId);  this.itemTemplate=itemTemplate;  this.activationCount=itemTemplate.getActivationCount();  if (itemTemplate.getExpireTime() != 0) {    expireTime=((int)(System.currentTimeMillis() / 1000) + itemTemplate.getExpireTime() * 60) - 1;  }  int optionSlotBonus=itemTemplate.getOptionSlotBonus();  if (optionSlotBonus != 0) {    optionalSocket=-1;  }  this.persistentState=PersistentState.NEW;  updateChargeInfo(0);}  }
class C{  protected MarketReportQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  public static ULong ulong(long value){  return ULong.valueOf(value);}  }
class C{  public static JsonValue value(boolean value){  return value ? TRUE : FALSE;}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public boolean isIgnoreGeometryFields(){  return ignoreGeometryFields;}  }
class C{  public DocumentNGramGraph allNotIn(DocumentNGramGraph dgOtherGraph){  EdgeCachedLocator eclLocator=new EdgeCachedLocator(Math.max(length(),dgOtherGraph.length()));  DocumentNGramGraph dgClone=(DocumentNGramGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraphLevel == null)     continue;    java.util.Iterator iIter=Arrays.asList(gCloneLevel.getEdgeSet().toArray()).iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gCloneLevel.removeEdge(weCurItem);        eclLocator.resetCache();      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgClone;}  }
class C{  public SecureGetSMSHistoryQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.getSMSHistory",Utils.buildParametrizedType(List.class,SmsNotification.class));  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  private boolean isVisible(List<Vector2> polygon,int i,int j){  int s=polygon.size();  Vector2 iv0, iv, iv1;  Vector2 jv0, jv, jv1;  iv0=polygon.get(i == 0 ? s - 1 : i - 1);  iv=polygon.get(i);  iv1=polygon.get(i + 1 == s ? 0 : i + 1);  jv0=polygon.get(j == 0 ? s - 1 : j - 1);  jv=polygon.get(j);  jv1=polygon.get(j + 1 == s ? 0 : j + 1);  if (this.isReflex(iv0,iv,iv1)) {    if (leftOn(iv,iv0,jv) && rightOn(iv,iv1,jv))     return false;  } else {    if (rightOn(iv,iv1,jv) || leftOn(iv,iv0,jv))     return false;  }  if (this.isReflex(jv0,jv,jv1)) {    if (leftOn(jv,jv0,iv) && rightOn(jv,jv1,iv))     return false;  } else {    if (rightOn(jv,jv1,iv) || leftOn(jv,jv0,iv))     return false;  }  for (int k=0; k < s; k++) {    int ki1=k + 1 == s ? 0 : k + 1;    if (k == i || k == j || ki1 == i || ki1 == j)     continue;    Vector2 k1=polygon.get(k);    Vector2 k2=polygon.get(ki1);    Vector2 in=Segment.getSegmentIntersection(iv,jv,k1,k2);    if (in != null)     return false;  }  return true;}  }
class C{  public Bindings add(String property,JComboBox combo,int defaultValue){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,defaultValue));}  }
class C{  public CacheReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){  this._externalIterator=externalIterator;}  }
class C{  public String toName(cp_info constant_pool[]){  CONSTANT_Utf8_info ci;  ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  public void clear(){  creationDate=null;  sampleNames.clear();  blastModes.clear();  sampleSizes.clear();  sampleUIds.clear();  disabledSamples.clear();  totalReads=0;  additionalReads=0;  classification2collapsedIds.clear();  classification2NodeStyle.clear();  classification2algorithm.clear();  classification2NodeFormats.clear();  classification2EdgeFormats.clear();  parameters=null;  classification2class2counts.clear();}  }
class C{  @Override protected float evaluate(Target target){  throw new RuntimeException("This method should never be called");}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("hide what=all;");}  }
class C{  public final void sendPacket(AionServerPacket bp){synchronized (guard) {    if (isWriteDisabled()) {      return;    }    sendMsgQueue.addLast(bp);    enableWriteInterest();  }}  }
class C{  @Override public void onRemoveCommandTag(final ISourceCommandTag sourceCommandTag,final ChangeReport changeReport){  changeReport.appendError("The equipment has no implementation to" + " remove command tags. You have to restart the DAQ.");  changeReport.setState(CHANGE_STATE.REBOOT);}  }
class C{  public ShapeRenderer(int size){  setBaseSize(size);}  }
class C{  private void applyPhaseOptions(JimpleBody b,Map<String,String> opts){  JBOptions options=new JBOptions(opts);  if (options.use_original_names())   PhaseOptions.v().setPhaseOptionIfUnset("jb.lns","only-stack-locals");  if (Options.v().time())   Timers.v().splitTimer.start();  PackManager.v().getTransform("jb.tt").apply(b);  PackManager.v().getTransform("jb.ls").apply(b);  if (Options.v().time())   Timers.v().splitTimer.end();  PackManager.v().getTransform("jb.a").apply(b);  PackManager.v().getTransform("jb.ule").apply(b);  if (Options.v().time())   Timers.v().assignTimer.start();  PackManager.v().getTransform("jb.tr").apply(b);  if (Options.v().time())   Timers.v().assignTimer.end();  if (options.use_original_names()) {    PackManager.v().getTransform("jb.ulp").apply(b);  }  PackManager.v().getTransform("jb.lns").apply(b);  PackManager.v().getTransform("jb.cp").apply(b);  PackManager.v().getTransform("jb.dae").apply(b);  PackManager.v().getTransform("jb.cp-ule").apply(b);  PackManager.v().getTransform("jb.lp").apply(b);  PackManager.v().getTransform("jb.ne").apply(b);  PackManager.v().getTransform("jb.uce").apply(b);  if (Options.v().time())   Timers.v().stmtCount+=b.getUnits().size();}  }
class C{  public final TestSubscriber<T> assertNoValues(){  if (valueCount != 0) {    throw new AssertionError("No values expected but received: [length = " + values.size() + "] "+ values,null);  }  return this;}  }
class C{  static float max(float[][] array,int[] result){  int max1=0;  int max2=0;  float val=array[max1][max2];  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[0].length; j++) {      if (val < array[i][j]) {        max1=i;        max2=j;        val=array[max1][max2];      }    }  }  result[0]=max1;  result[1]=max2;  return val;}  }
class C{  public synchronized void saveCustomPropertiesTo(File file){  if (file == null)   throw new NullPointerException("File cannot be null");  if (file.isDirectory())   throw new IllegalArgumentException("Not a valid file: " + file);  Properties prop=getCustomProperties(false);  if (prop != null && !prop.isEmpty())   storeProperties(prop,file);}  }
class C{  static Object find(String factoryId,String fallbackClassName) throws ConfigurationError {  dPrint("find factoryId =" + factoryId);  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      dPrint("found system property, value=" + systemProp);      return newInstance(systemProp,null,true,false,true);    }  } catch (  SecurityException se) {    if (debug)     se.printStackTrace();  }  try {    String factoryClassName=null;    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          String configFile=ss.getSystemProperty("java.home") + File.separator + "lib"+ File.separator+ "jaxp.properties";          File f=new File(configFile);          firstTime=false;          if (ss.doesFileExist(f)) {            dPrint("Read properties file " + f);            cacheProps.load(ss.getFileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(factoryId);    if (factoryClassName != null) {      dPrint("found in $java.home/jaxp.properties, value=" + factoryClassName);      return newInstance(factoryClassName,null,true,false,true);    }  } catch (  Exception ex) {    if (debug)     ex.printStackTrace();  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  dPrint("loaded from fallback value: " + fallbackClassName);  return newInstance(fallbackClassName,null,true,false,true);}  }
class C{  public static String createAccessorName(ClassMember member,boolean setter){  SootClass target=member.getDeclaringClass();  String name="access$";  if (member instanceof SootField) {    SootField f=(SootField)member;    if (setter) {      name+="set$";    } else {      name+="get$";    }    name+=f.getName();  } else {    SootMethod m=(SootMethod)member;    name+=m.getName() + "$";    for (Iterator it=m.getParameterTypes().iterator(); it.hasNext(); ) {      Type type=(Type)it.next();      name+=type.toString().replaceAll("\\.","\\$\\$") + "$";    }  }  return name;}  }
class C{  public void testDeleteUnexistingDeployment() throws Exception {  HttpDelete httpDelete=new HttpDelete(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,"unexisting"));  CloseableHttpResponse response=executeRequest(httpDelete,HttpStatus.SC_NOT_FOUND);  closeResponse(response);}  }
class C{  private BTreeLeaf(String indexFileName,Type keyType,long blkNum,Transaction tx){  this.dataFileName=null;  this.schema=schema(keyType);  this.keyType=keyType;  this.searchRange=null;  this.tx=tx;  this.currentPage=new BTreePage(new BlockId(indexFileName,blkNum),NUM_FLAGS,schema,tx);  ccMgr=tx.concurrencyMgr();}  }
class C{  public Array<String> keys(){  Array<String> out=new JavaArray<>();  for (  String key : internalMap.keySet()) {    out.push(key);  }  return out;}  }
class C{  static public byte[] decode(final String base32){  int i, index, lookup, offset, digit;  byte[] bytes=new byte[base32.length() * 5 / 8];  for (i=0, index=0, offset=0; i < base32.length(); i++) {    lookup=base32.charAt(i) - '0';    if (lookup < 0 || lookup >= base32Lookup.length) {      continue;    }    digit=base32Lookup[lookup];    if (digit == 0xFF) {      continue;    }    if (index <= 3) {      index=(index + 5) % 8;      if (index == 0) {        bytes[offset]|=digit;        offset++;        if (offset >= bytes.length)         break;      } else {        bytes[offset]|=digit << (8 - index);      }    } else {      index=(index + 5) % 8;      bytes[offset]|=(digit >>> index);      offset++;      if (offset >= bytes.length) {        break;      }      bytes[offset]|=digit << (8 - index);    }  }  return bytes;}  }
class C{  public boolean next(){  return searchFor(INUSE);}  }
class C{  public StandardDocumentDistroComparator(){  sGraph=new GraphSimilarity();  sHistogram=new GraphSimilarity();}  }
class C{  public static void expandDigits(String numberString,WordRelation wordRelation){  int numberDigits=numberString.length();  for (int i=0; i < numberDigits; i++) {    char digit=numberString.charAt(i);    if (isDigit(digit)) {      wordRelation.addWord(digit2num[numberString.charAt(i) - '0']);    } else {      wordRelation.addWord("umpty");    }  }}  }
class C{  boolean isYoung(){  return mYoung;}  }
class C{  public void execute(Runnable runnable) throws IllegalStateException {  if (runObj != null)   throw new IllegalStateException("Cannot execute PoolableThread that " + "is busy");synchronized (working) {    if (runObj != null)     throw new IllegalStateException("Cannot execute PoolableThread " + "that is busy");    runObj=runnable;    working.notifyAll();  }}  }
class C{  public static double sum(final double... values) throws MathIllegalArgumentException {  return SUM.evaluate(values);}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  public Object decode(Object object) throws Exception {  try {    char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  ClassCastException e) {    throw new Exception(e.getMessage(),e);  }}  }
class C{  private void initialize() throws IOException, ConnectionException {  if (!getDriver().isKeyspaceInitialized()) {    getDriver().initializeKeyspace();  }  LOGGER.info("Mutating schema");  Plan.Result<Integer> result=getMutagen().mutate(getDriver().getKeyspace());  State<Integer> state=result.getLastState();  if (result.isMutationComplete()) {    LOGGER.info("Schema mutation complete. Final state: {}",state != null ? state.getID() : "null");  }  if (result.getException() != null) {    String message="Exception mutating schema " + "(last state: " + (state != null ? state.getID() : "null") + ", completed mutations: \""+ result.getCompletedMutations()+ "\", remaining mutations: \""+ result.getRemainingMutations()+ "\")";    LOGGER.error(message,result.getException());    throw new IOException(message,result.getException());  }}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public void testLongField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  @Override public long skip(long n) throws IOException {  long toSkip=max >= 0 ? Math.min(n,max - pos) : n;  long skippedBytes=in.skip(toSkip);  pos+=skippedBytes;  return skippedBytes;}  }
class C{  protected Set<D> computeNormalFlowFunction(FlowFunction<D> flowFunction,D d1,D d2){  return flowFunction.computeTargets(d2);}  }
class C{  public PhotosGetNewTagsQuery(VkApiClient client,UserActor actor){  super(client,"photos.getNewTags",GetNewTagsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private int klattRule10(Element segment){  boolean hasPrecedingConsonant=false;  boolean hasFollowingConsonant=false;  if (isConsonant(segment)) {    Element preceding=getPreviousSegment(segment);    if (preceding != null && isConsonant(preceding)) {      hasPrecedingConsonant=true;    }    Element following=getNextSegment(segment);    if (following != null && isConsonant(following)) {      hasFollowingConsonant=true;    }    if (hasPrecedingConsonant && hasFollowingConsonant) {      return getPropertyAsInteger("rule10.surrounded");    } else     if (hasPrecedingConsonant) {      return getPropertyAsInteger("rule10.preceded");    } else     if (hasFollowingConsonant) {      return getPropertyAsInteger("rule10.followed");    }  }  return 100;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static FloatBuffer createFloatBuffer(float... data){  if (data == null) {    return null;  }  FloatBuffer buff=createFloatBuffer(data.length);  buff.clear();  buff.put(data);  buff.flip();  return buff;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public Builder addAction(String actionType,Action action){  mActions.add(new ActionPair(actionType,action));  return this;}  }
class C{  public ArcsSet(final double tolerance){  super(tolerance);}  }
class C{  @Nonnull public static File findOrCreateCacheFile(){  final File file=new File(CACHE_DIR,PREFIX + SUFFIX);  if (!file.exists()) {    try {      file.createNewFile();    } catch (    final IOException e) {      throw new IllegalStateOfArgumentException("Can not create a cache file.",e);    }  }  return file;}  }
class C{  @SuppressWarnings("unchecked") @Override public void put(Stage<K,V> currStage,Event<K,V> currEvent,Stage<K,V> prevStage,Event<K,V> prevEvent,DeweyVersion version){  StateKey currStateKey=new StateKey(currStage.getName(),currStage.getType());  StateKey prevStateKey=new StateKey(prevStage.getName(),prevStage.getType());  StackEventKey prevEventKey=new StackEventKey(prevStateKey,prevEvent.topic,prevEvent.partition,prevEvent.offset);  StackEventKey currEventKey=new StackEventKey(currStateKey,currEvent.topic,currEvent.partition,currEvent.offset);  TimedKeyValue sharedPrevEvent=this.store.get(prevEventKey);  if (sharedPrevEvent == null) {    throw new IllegalStateException("Cannot find predecessor event for " + prevEventKey);  }  TimedKeyValue sharedCurrEvent=this.store.get(currEventKey);  if (sharedCurrEvent == null) {    sharedCurrEvent=new TimedKeyValue<>(currEvent.key,currEvent.value,currEvent.timestamp);  }  sharedCurrEvent.addPredecessor(version,prevEventKey);  this.store.put(currEventKey,sharedCurrEvent);}  }
class C{  @Override public void write(String str){}  }
class C{  void receiveMessages(ClientCnx cnx,int numMessages){  if (cnx != null) {    if (log.isDebugEnabled()) {      log.debug("[{}] [{}] Adding {} additional permits",topic,subscription,numMessages);    }    cnx.ctx().writeAndFlush(Commands.newFlow(consumerId,numMessages),cnx.ctx().voidPromise());  }}  }
class C{  public static void outString(DataOutputStream dos,String s) throws IOException {  dos.writeShort((short)s.length());  for (int i=0; i < s.length(); i++) {    dos.writeChar(s.charAt(i));  }}  }
class C{  int big5_probability(byte[] rawtext){  int i, rawtextlen=0;  int dbchars=1, bfchars=1;  float rangeval=0, freqval=0;  long bffreq=0, totalfreq=1;  int row, column;  rawtextlen=rawtext.length;  for (i=0; i < rawtextlen - 1; i++) {    if (rawtext[i] >= 0) {    } else {      dbchars++;      if ((byte)0xA1 <= rawtext[i] && rawtext[i] <= (byte)0xF9 && (((byte)0x40 <= rawtext[i + 1] && rawtext[i + 1] <= (byte)0x7E) || ((byte)0xA1 <= rawtext[i + 1] && rawtext[i + 1] <= (byte)0xFE))) {        bfchars++;        totalfreq+=500;        row=rawtext[i] + 256 - 0xA1;        if (0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) {          column=rawtext[i + 1] - 0x40;        } else {          column=rawtext[i + 1] + 256 - 0x61;        }        if (Big5Freq[row][column] != 0) {          bffreq+=Big5Freq[row][column];        } else         if (3 <= row && row <= 37) {          bffreq+=200;        }      }      i++;    }  }  rangeval=50 * ((float)bfchars / (float)dbchars);  freqval=50 * ((float)bffreq / (float)totalfreq);  return (int)(rangeval + freqval);}  }
class C{  @Override public DataTagCacheObject clone() throws CloneNotSupportedException {  DataTagCacheObject dataTagCacheObject=(DataTagCacheObject)super.clone();  if (address != null) {    dataTagCacheObject.address=(DataTagAddress)this.address.clone();  }  if (sourceTimestamp != null) {    dataTagCacheObject.sourceTimestamp=(Timestamp)this.sourceTimestamp.clone();  }  return dataTagCacheObject;}  }
class C{  protected final void fireColumnEvent(int idx,Object prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  @Nullable private static File findManifestDirectory(@NotNull SourceProvider sourceProvider){  File manifestFile=sourceProvider.getManifestFile();  File manifestDir=manifestFile.getParentFile();  if (manifestDir != null) {    return manifestDir;  }  return null;}  }
class C{  public boolean isNormal(boolean bOnlyValue,double dPValueForRejection){  double dPRes=0.0;  double dSD=standardDeviation(bOnlyValue);  double dSkewness=getCentralMoment(bOnlyValue,3) / Math.pow(dSD,3.0);  double dKurtosis=getCentralMoment(bOnlyValue,4) / Math.pow(dSD,4.0);  double dJB=(observationCount(bOnlyValue) / 6.0) * (Math.pow(dSkewness,2.0) + (Math.pow(dKurtosis - 3,2.0) / 4));  dPRes=ChiSquareDistributionBase.getPValue(dJB);  return dPRes > dPValueForRejection;}  }
class C{  public int model(){  return theModel;}  }
class C{  private void skipText(CommentTokenizer tokenizer){  while (tokenizer.hasNext() && tokenizer.peekNext().kind == TokenKind.TEXT) {    tokenizer.pollNext();  }}  }
class C{  int onDeleteAll(String tableName,String... conditions){  BaseUtility.checkConditionsCorrect(conditions);  return mDatabase.delete(tableName,getWhereClause(conditions),getWhereArgs(conditions));}  }
class C{  void refreshFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.refreshFinish();}  }
class C{  public void clear(){  for (int i=0; i < this.counters.length; i++) {    this.cachedCounters[i]=this.counters[i];    this.counters[i]=0;  }  this.cachedContacts.clear();  this.cachedContacts.addAll(this.contacts);  this.contacts.clear();}  }
class C{  public static List<Window> windows(InputStream words,TokenizerFactory tokenizerFactory,int windowSize){  Tokenizer tokenizer=tokenizerFactory.create(words);  List<String> list=new ArrayList<>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  if (list.isEmpty())   throw new IllegalStateException("No tokens found for windows");  return windows(list,windowSize);}  }
class C{  public Builder calculateSortedRank(String newColumnName,String sortOnColumn,WritableComparator comparator){  actionList.add(new DataAction(new CalculateSortedRank(newColumnName,sortOnColumn,comparator)));  return this;}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String itemType,String itemDescription,String productCategoryId,BigDecimal basePrice,BigDecimal selectedAmount,BigDecimal quantity,Map<String,Object> attributes,String prodCatalogId,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool) throws CartItemModifyException {  Delegator delegator=cart.getDelegator();  ShoppingCartItem newItem=new ShoppingCartItem(delegator,itemType,itemDescription,productCategoryId,basePrice,attributes,prodCatalogId,cart.getLocale(),itemGroup);  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  boolean triggerExternalOps=triggerExternalOpsBool == null ? true : triggerExternalOpsBool.booleanValue();  try {    newItem.setQuantity(quantity,dispatcher,cart,triggerExternalOps);  } catch (  CartItemModifyException e) {    cart.removeEmptyCartItems();    throw e;  }  if (selectedAmount != null) {    newItem.setSelectedAmount(selectedAmount);  }  return newItem;}  }
class C{  public SparseFieldVector(Field<T> field,int dimension){  this.field=field;  virtualSize=dimension;  entries=new OpenIntToFieldHashMap<T>(field);}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public static void clearRegistry(){  registry.clear();}  }
class C{  public Vector3f cross(float otherX,float otherY,float otherZ,Vector3f result){  if (result == null) {    result=new Vector3f();  }  float resX=((y * otherZ) - (z * otherY));  float resY=((z * otherX) - (x * otherZ));  float resZ=((x * otherY) - (y * otherX));  result.set(resX,resY,resZ);  return result;}  }
class C{  public static ChatPage paginate(String unpaginatedString,int pageNumber,int lineLength,int pageHeight){  String[] lines=wordWrap(unpaginatedString,lineLength);  int totalPages=lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);  int actualPageNumber=pageNumber <= totalPages ? pageNumber : totalPages;  int from=(actualPageNumber - 1) * pageHeight;  int to=from + pageHeight <= lines.length ? from + pageHeight : lines.length;  String[] selectedLines=Arrays.copyOfRange(lines,from,to);  return new ChatPage(selectedLines,actualPageNumber,totalPages);}  }
class C{  public static void migrateTabs(boolean toDocumentMode,final Activity activity,boolean terminate){  StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();  StrictMode.allowThreadDiskWrites();  try {    int terminateMode=terminate ? FINALIZE_MODE_RESTART_APP : FINALIZE_MODE_FINISH_ACTIVITY;    if (toDocumentMode) {      migrateTabsFromClassicToDocument(activity,terminateMode);    } else {      migrateTabsFromDocumentToClassic(activity,terminateMode);    }  }  finally {    StrictMode.setThreadPolicy(oldPolicy);  }}  }
class C{  private void handlePartSelectionChanged(IWorkbenchPart part,ISelection selection){  if (!(selection instanceof IStructuredSelection))   return;  try {    Object first=((IStructuredSelection)selection).getFirstElement();    if (first instanceof IAdaptable) {      IAdaptable a=(IAdaptable)first;      Object adapter=a.getAdapter(IResource.class);      if (adapter instanceof IResource) {        IResource resource=(IResource)adapter;        if (!resource.isAccessible()) {          showSvnProperties(null);        } else {          ISVNLocalResource svnResource=(ISVNLocalResource)resource.getAdapter(ISVNLocalResource.class);          showSvnProperties(svnResource);        }      }    }  } catch (  SVNException e) {  }}  }
class C{  public boolean hasComplete(){  return observers.get() == TERMINATED && error == null;}  }
class C{  public void add(Predicate p,ColorAction f){  super.add(p,f);}  }
class C{  public static Bucket createBucket(Experiment experiment,boolean isControl){  return new Bucket(bucketNameColors()[internalId++ % bucketNameColors().length] + internalId,experiment.id,1.0d / 3.0d,isControl);}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  private T min(T a,T b){  return a.getReal() < b.getReal() ? a : b;}  }
class C{  public static TemplateHashModelEx mergeArgMaps(TemplateHashModelEx args,TemplateHashModelEx inlineArgs,TemplateHashModelEx defaultArgs,TemplateHashModelEx overrideArgs,boolean recordArgNames,Environment env,ObjectWrapper objectWrapper) throws TemplateModelException {  SimpleHash res=new SimpleHash(objectWrapper);  if (args != null) {    args=(TemplateHashModelEx)LangFtlUtil.toSimpleMap(args,null,objectWrapper);  }  if (defaultArgs != null && !defaultArgs.isEmpty()) {    LangFtlUtil.addToSimpleMap(res,defaultArgs);  }  if (args != null && !args.isEmpty()) {    LangFtlUtil.addToSimpleMap(res,args);  }  if (inlineArgs != null && !inlineArgs.isEmpty()) {    LangFtlUtil.addToSimpleMap(res,inlineArgs);  }  if (overrideArgs != null && !overrideArgs.isEmpty()) {    LangFtlUtil.addToSimpleMap(res,overrideArgs);  }  if (recordArgNames) {    TemplateCollectionModel defaultKeys=defaultArgs != null ? defaultArgs.keys() : null;    TemplateCollectionModel overrideKeys=overrideArgs != null ? overrideArgs.keys() : null;    SimpleSequence localArgNames=new SimpleSequence(objectWrapper);    if (defaultKeys != null) {      LangFtlUtil.addToSimpleList(localArgNames,defaultKeys);    }    if (overrideKeys != null) {      LangFtlUtil.addToSimpleList(localArgNames,overrideKeys);    }    TemplateModel allArgNamesPrev=args != null ? args.get("allArgNames") : null;    SimpleSequence allArgNames=new SimpleSequence(objectWrapper);    if (allArgNamesPrev != null && allArgNamesPrev != TemplateModel.NOTHING) {      LangFtlUtil.addToSimpleList(allArgNames,allArgNamesPrev);    }    LangFtlUtil.addToSimpleList(allArgNames,localArgNames);    res.put("localArgNames",localArgNames);    res.put("allArgNames",allArgNames);  }  return res;}  }
class C{  private void clickImage(int position){  int selectedItemPosition=selectedImagePosition(images.get(position));  if (mode == ImagePickerActivity.MODE_MULTIPLE) {    if (selectedItemPosition == -1) {      if (selectedImages.size() < limit) {        imageAdapter.addSelected(images.get(position));      } else {        Toast.makeText(this,R.string.msg_limit_images,Toast.LENGTH_SHORT).show();      }    } else {      imageAdapter.removeSelectedPosition(selectedItemPosition,position);    }  } else {    if (selectedItemPosition != -1)     imageAdapter.removeSelectedPosition(selectedItemPosition,position); else {      if (selectedImages.size() > 0) {        imageAdapter.removeAllSelectedSingleClick();      }      imageAdapter.addSelected(images.get(position));    }  }  updateTitle();}  }
class C{  public void addEvidence(DocumentNGramGraph dDoc,String sFinalCategory){  addEvidence(new Decision(dDoc,sFinalCategory,1.0,new HashMap(0)),sFinalCategory);}  }
class C{  public void clear(){  super.clear();  Object[] keys=_set;  int[] vals=_values;  Arrays.fill(_set,0,_set.length,FREE);  Arrays.fill(_values,0,_values.length,(int)0);}  }
class C{  @Override public String toString(){  return super.toString() + "[" + delegate.toString()+ "]";}  }
class C{  void recordTabStateTransition(int prevState,int newState,long delta){  if (prevState == TAB_STATE_ACTIVE && newState == TAB_STATE_INACTIVE) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Active_Inactive",delta);  } else   if (prevState == TAB_STATE_ACTIVE && newState == TAB_STATE_CLOSED) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Active_Closed",delta);  } else   if (prevState == TAB_STATE_INACTIVE && newState == TAB_STATE_ACTIVE) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Inactive_Active",delta);  } else   if (prevState == TAB_STATE_INACTIVE && newState == TAB_STATE_CLOSED) {    recordLongTimesHistogram100("Tabs.StateTransfer.Time_Inactive_Close",delta);  }  if (prevState == TAB_STATE_INITIAL) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Initial",newState,TAB_STATE_MAX);  } else   if (prevState == TAB_STATE_ACTIVE) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Active",newState,TAB_STATE_MAX);  } else   if (prevState == TAB_STATE_INACTIVE) {    RecordHistogram.recordEnumeratedHistogram("Tabs.StateTransfer.Target_Inactive",newState,TAB_STATE_MAX);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static GeneralPath stackSpline(GeneralPath p,float pts[],int start,int npoints,float epsilon,float slack,boolean closed,float tx,float ty){  int len=2 * npoints;  int end=start + len;  if (len < 6) {    throw new IllegalArgumentException("To create spline requires at least 3 points");  }  float dx1, dy1, dx2, dy2;  if (closed) {    dx2=pts[start + 2] - pts[end - 2];    dy2=pts[start + 3] - pts[end - 1];  } else {    dx2=pts[start + 4] - pts[start];    dy2=pts[start + 5] - pts[start + 1];  }  int i;  for (i=start + 2; i < end - 2; i+=2) {    dx1=dx2;    dy1=dy2;    dx2=pts[i + 2] - pts[i - 2];    dy2=pts[i + 3] - pts[i - 1];    if (Math.abs(pts[i] - pts[i - 2]) < epsilon || Math.abs(pts[i + 1] - pts[i - 1]) < epsilon) {      p.lineTo(tx + pts[i],ty + pts[i + 1]);    } else {      p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);    }  }  dx1=dx2;  dy1=dy2;  dx2=pts[start] - pts[i - 2];  dy2=pts[start + 1] - pts[i - 1];  if (Math.abs(pts[i] - pts[i - 2]) < epsilon || Math.abs(pts[i + 1] - pts[i - 1]) < epsilon) {    p.lineTo(tx + pts[i],ty + pts[i + 1]);  } else {    p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);  }  if (closed) {    if (Math.abs(pts[end - 2] - pts[0]) < epsilon || Math.abs(pts[end - 1] - pts[1]) < epsilon) {      p.lineTo(tx + pts[0],ty + pts[1]);    } else {      dx1=dx2;      dy1=dy2;      dx2=pts[start + 2] - pts[end - 2];      dy2=pts[start + 3] - pts[end - 1];      p.curveTo(tx + pts[end - 2] + slack * dx1,ty + pts[end - 1] + slack * dy1,tx + pts[0] - slack * dx2,ty + pts[1] - slack * dy2,tx + pts[0],ty + pts[1]);    }    p.closePath();  }  return p;}  }
class C{  protected SegmentationProfile mergeHeaderAndContextWithProfile(SegmentationProfile segmentationProfile,HttpHeaders headers,Context context){  SegmentationProfile updatedSegmentationProfile=mergeHeaderWithProfile(segmentationProfile,headers);  if (updatedSegmentationProfile == null) {    Map profileMap=new HashMap();    updatedSegmentationProfile=new SegmentationProfile.Builder(profileMap).build();  }  updatedSegmentationProfile.addAttribute("context",context.getContext());  return updatedSegmentationProfile;}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0)     return false;  }  return true;}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  private void appendRequestId(String requestId){  if (isNotValidRequestId(requestId)) {    return;  }  RequestLog.addIdPrefix(requestId);}  }
class C{  public static boolean isApkDebuggable(Project project,File apk) throws AaptUtilException {  return getAaptBadging(project,apk,DEBUGGABLE_PATTERN) != null;}  }
class C{  protected int addCascadedRow(int prow){  int r=m_rows.addRow();  ((CascadedRowManager)m_rows).put(r,prow);  updateRowCount();  fireTableEvent(r,r,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT);  return r;}  }
class C{  private void verifyIdentifierIsConventionalClassOrInterfaceName(String id,Location loc) throws CompileException {  if (!Character.isUpperCase(id.charAt(0))) {    this.warning("UCOIN1","Class or interface name \"" + id + "\" does not begin with an upper-case letter (see JLS7 6.8.2)",loc);    return;  }  for (int i=0; i < id.length(); ++i) {    char c=id.charAt(i);    if (!Character.isLetter(c) && !Character.isDigit(c)) {      this.warning("UCOIN",("Class or interface name \"" + id + "\" contains unconventional character \""+ c+ "\" (see JLS7 6.8.2)"),loc);      return;    }  }}  }
class C{  public DefaultTupleSet(){  m_tuples=new LinkedHashSet();}  }
class C{  public static <RuleType extends Message>ConfigRuleSet<RuleType> of(Descriptor ruleDescriptor,List<RuleType> rules,Model model){  return new ConfigRuleSet<RuleType>(ruleDescriptor,rules,model);}  }
class C{  @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
