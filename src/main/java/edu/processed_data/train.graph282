class C{  private void reset(){  mGamePlayState=GAME_INITIALIZING;  mIsAnimating=true;  mGameStatusMessageNum=TextResources.NO_MESSAGE;  mPrevFrameWhenNsec=0;  mPauseDuration=0.0f;  mRecentTimeDeltaNext=-1;  mLivesRemaining=mMaxLives;  mScore=0;  resetBall();}  }
class C{  public Add4(){  super("add4",4);}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  public final short readShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (short)((ch1 << 8) + (ch2 << 0));}  }
class C{  public void addActionListener(ActionListener l){  if (okButton != null) {    okButton.addActionListener(l);  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:16.268 -0500",hash_original_method="914B5E2C4522C674B906D3A88195AF81",hash_generated_method="5F87F09CB55E38B11E6016977A9B359C") public byte[] toBytes(){  return cipherSuiteCode;}  }
class C{  public String body() throws IOException {  if (_headers == null)   parseHeaders();  StringBuilder builder=new StringBuilder();  for (int i=_in.read(); i > -1; i=_in.read()) {    builder.append((char)i);  }  return builder.toString();}  }
class C{  public void handle(StateContext state,RootCollectionSubCollectionContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  public Iterator<Object> iterator(){  return mRequestInformation.values().iterator();}  }
class C{  public static boolean isHistorical(DateTime date){  return DateTime.now().isAfter(date.getMillis());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TFIELD__CONST:    setConst(CONST_EDEFAULT);  return;case TypesPackage.TFIELD__HAS_EXPRESSION:setHasExpression(HAS_EXPRESSION_EDEFAULT);return;case TypesPackage.TFIELD__TYPE_REF:setTypeRef((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  @Override public void processProperties() throws AdeUsageException {  if (m_newMessageMeanNumAppear <= 0) {    throw new AdeUsageException("The scorer property " + NEW_MESSAGE_EXPECTED_MEAN + " must be set greater then zero");  }  m_newMessageLambda=Math.log(m_newMessageMeanNumAppear);}  }
class C{  TaskExecutionState shouldExecute(){  TaskExecutionState execState=shouldExecuteUpdate();  lastExecutionState=execState;  return execState;}  }
class C{  XSLTElementDef(){}  }
class C{  private void convertLinks(BasePageEntry<?> entry,List<BasePageEntry<?>> ancestors,URL siteUrl,boolean isRevision,String prefix,String suffix){  String content=EntryUtils.getXhtmlContent(entry);  String url=siteUrl.toExternalForm();  int index=content.indexOf(prefix + "../");  while (index != -1) {    int startIndex=index + prefix.length();    int endIndex=content.indexOf(suffix,startIndex);    if (endIndex == -1) {      break;    }    String link=content.substring(startIndex,endIndex);    if (link.startsWith("../")) {      if (isRevision) {        link=link.substring(3);      }      int ancestorIndex=ancestors.size();      while (link.startsWith("../") && ancestorIndex >= 0) {        link=link.substring(3);        ancestorIndex--;      }      String str="";      while (ancestorIndex >= 0 && ancestorIndex < ancestors.size()) {        str=ancestors.get(ancestorIndex).getPageName().getValue() + "/" + str;        ancestorIndex--;      }      link=str + link;    }    if (link.endsWith("/index.html")) {      link=link.substring(0,link.lastIndexOf("/index.html"));    }    String beforeLink=content.substring(0,startIndex);    String afterLink=content.substring(endIndex);    content=beforeLink + url + "/"+ link+ afterLink;    index=content.indexOf(prefix + "../");  }  XmlBlob blob=new XmlBlob();  blob.setBlob(content);  TextConstruct textConstruct=new XhtmlTextConstruct(blob);  entry.setContent(textConstruct);}  }
class C{  private static Pair<byte[],byte[]> createNamesForReversePrefixScan(@Nonnull byte[] name){  Preconditions.checkNotNull(name,"name cannot be null");  Preconditions.checkArgument(name.length <= Cell.MAX_NAME_LENGTH,"name is too long");  if (name.length == 0) {    return Pair.create(name,name);  }  byte[] startName=new byte[Cell.MAX_NAME_LENGTH];  System.arraycopy(name,0,startName,0,name.length);  for (int i=name.length; i < startName.length; i++) {    startName[i]=(byte)0xff;  }  byte[] endName=RangeRequests.previousLexicographicName(name);  return Pair.create(startName,endName);}  }
class C{  protected Resource loadResource(String resourceName,int resourceType,String encoding) throws ResourceNotFoundException, ParseErrorException, Exception {  Resource resource=ResourceFactory.getResource(resourceName,resourceType);  resource.setRuntimeServices(rsvc);  resource.setName(resourceName);  resource.setEncoding(encoding);  long howOldItWas=0;  ResourceLoader resourceLoader=null;  for (int i=0; i < resourceLoaders.size(); i++) {    resourceLoader=(ResourceLoader)resourceLoaders.get(i);    resource.setResourceLoader(resourceLoader);    try {      if (resource.process()) {        if (logWhenFound) {          rsvc.info("ResourceManager : found " + resourceName + " with loader "+ resourceLoader.getClassName());        }        howOldItWas=resourceLoader.getLastModified(resource);        break;      }    } catch (    ResourceNotFoundException rnfe) {    }  }  if (resource.getData() == null) {    throw new ResourceNotFoundException("Unable to find resource '" + resourceName + "'");  }  resource.setLastModified(howOldItWas);  resource.setModificationCheckInterval(resourceLoader.getModificationCheckInterval());  resource.touch();  return resource;}  }
class C{  private boolean validateForm(){  ArrayList<String> errorMessages=new ArrayList<>();  boolean valid=true;  if (this.textFieldAuthorId.getText().isEmpty()) {    errorMessages.add("Author must be set!");    valid=false;  }  if (this.textFieldNameId.getText().isEmpty()) {    errorMessages.add("Fingerprint Name must be set!");    valid=false;  }  if (!valid) {    displayError(errorMessages);  }  return valid;}  }
class C{  public boolean equals(Message other){  if (other == null) {    return false;  } else   if (other.content.equals(this.content)) {    return true;  } else {    return false;  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @Override public CompletableFuture<Optional<T>> min(final Comparator<? super T> comparator){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  private void putImpl(String locationKey,WeatherData wd,long timeout){  final long expirationTime=System.currentTimeMillis() + timeout;  mContext.getContentResolver().insert(WeatherContract.WeatherValuesEntry.WEATHER_VALUES_CONTENT_URI,makeWeatherDataContentValues(wd,expirationTime,locationKey));  ContentValues[] cvsArray=new ContentValues[wd.getWeathers().size()];  int i=0;  for (  Weather weather : wd.getWeathers()) {    cvsArray[i++]=makeWeatherConditionsContentValues(weather,expirationTime,locationKey);  }  mContext.getContentResolver().bulkInsert(WeatherContract.WeatherConditionsEntry.WEATHER_CONDITIONS_CONTENT_URI,cvsArray);}  }
class C{  public void initDct8x8(){  int i=0;  int j=0;  double sqJpeg=Math.sqrt(NJPEG);  double sqJpeg2=Math.sqrt(2.0 / NJPEG);  for (j=0; j < NJPEG; j++) {    this.C[0][j]=1.0 / sqJpeg;    this.Ct[j][0]=this.C[0][j];  }  for (i=1; i < NJPEG; i++) {    for (j=0; j < NJPEG; j++) {      this.C[i][j]=sqJpeg2 * Math.cos(Math.PI * (2 * j + 1) * i / (2.0 * NJPEG));      this.Ct[j][i]=this.C[i][j];    }  }}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public void checkError(ObservableValue<? extends Boolean> observable,Boolean oldValue,Boolean newValue){  ObservableList<String> style=this.visibleAnchor.getStyleClass();  style.removeAll("error");  if (newValue) {    style.add("error");  }}  }
class C{  public boolean canMemmap(){  return canMemmap;}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.FILTER__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.FILTER__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static void exitClassInit(String className){  final String classNameWithDots=className.replace('/','.');  ExecutionTracer tracer=getExecutionTracer();  tracer.trace.classInitialized(classNameWithDots);}  }
class C{  public void updateConfigItemByText(NamespaceTextModel model){  String appId=model.getAppId();  Env env=model.getEnv();  String clusterName=model.getClusterName();  String namespaceName=model.getNamespaceName();  long namespaceId=model.getNamespaceId();  String configText=model.getConfigText();  ConfigTextResolver resolver=model.getFormat() == ConfigFileFormat.Properties ? propertyResolver : fileTextResolver;  ItemChangeSets changeSets=resolver.resolve(namespaceId,configText,itemAPI.findItems(appId,env,clusterName,namespaceName));  if (changeSets.isEmpty()) {    return;  }  changeSets.setDataChangeLastModifiedBy(userInfoHolder.getUser().getUserId());  itemAPI.updateItemsByChangeSet(appId,env,clusterName,namespaceName,changeSets);  Cat.logEvent(CatEventType.MODIFY_NAMESPACE_BY_TEXT,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName));  Cat.logEvent(CatEventType.MODIFY_NAMESPACE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName));}  }
class C{  public TesterDescriptorImpl(String id,String name,RuntimeEnvironment environment,ITester tester){  this.id=id;  this.name=name;  this.environment=environment;  this.tester=tester;}  }
class C{  public static boolean isPopulated(){  return (interrogate() != null);}  }
class C{  public synchronized boolean saveTemplates(){  if (templates == null)   return true;  if (directory == null || !directory.isDirectory())   return false;  File[] oldXMLFiles=directory.listFiles(new XMLFileFilter());  if (oldXMLFiles == null)   return false;  int count=oldXMLFiles.length;  for (int i=0; i < count; i++) {    oldXMLFiles[i].delete();  }  boolean wasSuccessful=true;  for (Iterator i=templates.iterator(); i.hasNext(); ) {    CodeTemplate template=(CodeTemplate)i.next();    File xmlFile=new File(directory,template.getID() + ".xml");    try {      XMLEncoder e=new XMLEncoder(new BufferedOutputStream(new FileOutputStream(xmlFile)));      e.writeObject(template);      e.close();    } catch (    IOException ioe) {      ioe.printStackTrace();      wasSuccessful=false;    }  }  return wasSuccessful;}  }
class C{  public VNXeCommandJob detachLunGroupSnap(String snapId){  _logger.info("detaching lun group snap:",snapId);  LunGroupSnapRequests req=new LunGroupSnapRequests(_khClient);  return req.detachLunGroupSnap(snapId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:35.210 -0500",hash_original_method="F07D2B002CE8D32774BDF7E27A216F8A",hash_generated_method="142BEDC549A1782A1BD4D492BEFB1726") public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  public Route(String address,String networkMask,String gateway){  begin=ipToLong(address);  end=begin + (RANGE_MAX - ipToLong(networkMask));  this.gateway=gateway;  this.network=address;  this.mask=networkMask;}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  System.arraycopy(in,inOff,cbcNextV,0,blockSize);  int length=cipher.processBlock(in,inOff,out,outOff);  for (int i=0; i < blockSize; i++) {    out[outOff + i]^=cbcV[i];  }  byte[] tmp;  tmp=cbcV;  cbcV=cbcNextV;  cbcNextV=tmp;  return length;}  }
class C{  public void addDiskLimitTreeQuota(String volume,String path,long diskLimitInKB,long thresholdInKB){  if (log.isDebugEnabled()) {    log.debug("Setting disk limit tree quota of " + diskLimitInKB + " KB to "+ path);  }  QuotaCommands commands=new QuotaCommands(server.getNaServer());  commands.addDiskLimitTreeQuota(volume,path,diskLimitInKB,thresholdInKB);}  }
class C{  private boolean isBreak(int lastType,int type){  if ((type & lastType) != 0) {    return false;  }  if (!splitOnCaseChange && isAlpha(lastType) && isAlpha(type)) {    return false;  } else   if (isUpper(lastType) && isAlpha(type)) {    return false;  } else   if (!splitOnNumerics && ((isAlpha(lastType) && isDigit(type)) || (isDigit(lastType) && isAlpha(type)))) {    return false;  }  return true;}  }
class C{  public boolean fromCaching(Item item){  String tag=imageViews.get(item.imageView);  return tag == null || !tag.equals(item.url);}  }
class C{  public SparseObjectMatrix3D(Object[][][] values){  this(values.length,(values.length == 0 ? 0 : values[0].length),(values.length == 0 ? 0 : values[0].length == 0 ? 0 : values[0][0].length));  assign(values);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StatisticalLineAndShapeRenderer)) {    return false;  }  StatisticalLineAndShapeRenderer that=(StatisticalLineAndShapeRenderer)obj;  if (!PaintUtilities.equal(this.errorIndicatorPaint,that.errorIndicatorPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.errorIndicatorStroke,that.errorIndicatorStroke)) {    return false;  }  return super.equals(obj);}  }
class C{  public void cancelTransference(OCFile file){  Account account=mFileActivity.getAccount();  if (file.isFolder()) {    OperationsService.OperationsServiceBinder opsBinder=mFileActivity.getOperationsServiceBinder();    if (opsBinder != null) {      opsBinder.cancel(account,file);    }  }  FileDownloaderBinder downloaderBinder=mFileActivity.getFileDownloaderBinder();  if (downloaderBinder != null && downloaderBinder.isDownloading(account,file)) {    downloaderBinder.cancel(account,file);  }  FileUploaderBinder uploaderBinder=mFileActivity.getFileUploaderBinder();  if (uploaderBinder != null && uploaderBinder.isUploading(account,file)) {    uploaderBinder.cancel(account,file);  }}  }
class C{  protected InternalHighlightingParser(TokenStream input,N4JSGrammarAccess grammarAccess,TokenTypeRewriter rewriter){  super(input,grammarAccess);  this.rewriter=rewriter;  this.recoverySets=computeRecoverySets();}  }
class C{  public static double doubleFactorialAsDoublewithDivisor(int n,double divisor){  double result=1.0 / divisor;  int startValue;  if (n % 2 == 0) {    startValue=2;  } else {    startValue=3;  }  for (int i=startValue; i <= n; i+=2) {    result*=(double)i;  }  return result;}  }
class C{  public SVGFallbackReference(){  initComponents();  int w=getSVGWidth();  int h=getSVGHeight();  width.setModel(new SpinnerNumberModel(w,50,1024,10));  height.setModel(new SpinnerNumberModel(h,50,1024,10));}  }
class C{  @CanIgnoreReturnValue public Builder<C> add(Range<C> range){  if (range.isEmpty()) {    throw new IllegalArgumentException("range must not be empty, but was " + range);  } else   if (!rangeSet.complement().encloses(range)) {    for (    Range<C> currentRange : rangeSet.asRanges()) {      checkArgument(!currentRange.isConnected(range) || currentRange.intersection(range).isEmpty(),"Ranges may not overlap, but received %s and %s",currentRange,range);    }    throw new AssertionError("should have thrown an IAE above");  }  rangeSet.add(range);  return this;}  }
class C{  public void stop(){synchronized (runLock) {    runLockNotified=true;    runLock.notify();  }}  }
class C{  public void commitEditing(){  TableCellEditor editor=getCellEditor();  if (editor != null) {    editor.stopCellEditing();  }}  }
class C{  @Override public long lastModified() throws IOException {  long lastModified=getFileForLastModifiedCheck().lastModified();  if (lastModified == 0L) {    throw new FileNotFoundException(getDescription() + " cannot be resolved in the file system for resolving its last-modified timestamp");  }  return lastModified;}  }
class C{  private int decodeExtensionPayload(int cnt,ChannelElement che,int elemType){  boolean crcFlag=false;  int res=cnt;switch (br.read(4)) {case EXT_SBR_DATA_CRC:    crcFlag=true;case EXT_SBR_DATA:  if (che == null) {    log.error(String.format("SBR was found before the first channel element"));    return res;  } else   if (ac.oc[1].m4ac.sbr == 0) {    log.error(String.format("SBR signaled to be not-present but was found in the bitstream"));    br.skip(8 * cnt - 4);    return res;  } else   if (ac.oc[1].m4ac.sbr == -1 && ac.oc[1].status == OC_LOCKED) {    log.error(String.format("Implicit SBR was found with a first occurrence after the first frame"));    br.skip(8 * cnt - 4);    return res;  } else   if (ac.oc[1].m4ac.ps == -1 && ac.oc[1].status < OC_LOCKED && ac.channels == 1) {    ac.oc[1].m4ac.sbr=1;    ac.oc[1].m4ac.ps=1;    outputConfigure(ac.oc[1].layoutMap,ac.oc[1].layoutMapTags,ac.oc[1].status,true);  } else {    ac.oc[1].m4ac.sbr=1;  }res=AacSbr.decodeSbrExtension(ac,che.sbr,crcFlag,cnt,elemType);break;case EXT_DYNAMIC_RANGE:res=decodeDynamicRange(ac.cheDrc);break;case EXT_FILL:decodeFill(8 * cnt - 4);break;case EXT_FILL_DATA:case EXT_DATA_ELEMENT:default :br.skip(8 * cnt - 4);break;}return res;}  }
class C{  public static Mask alwaysTrue(){  return ALWAYS_TRUE;}  }
class C{  public String last(){  scroll(data.getRowCount() - 1);  return (null);}  }
class C{  @SuppressWarnings("rawtypes") public static Constant errorValue(){  return ERROR_VALUE;}  }
class C{  private void readSMS(String namePattern){  namePattern=mAliasHelper.convertAliasToNumber(namePattern);  ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,namePattern);  if (contacts.size() > 0) {    XmppMsg noSms=new XmppMsg();    boolean hasMatch=false;    for (    Contact contact : contacts) {      ArrayList<Sms> smsList=mSmsManager.getSms(ContactsManager.getPhones(sContext,contact.ids));      Collections.sort(smsList);      if (smsList.size() > 0) {        hasMatch=true;        sendSmsListOnXmpp(smsList,contact.name,smsList.size() < sSettingsMgr.smsNumber ? getString(R.string.chat_only_got_n_sms,smsList.size()) : null);      } else {        noSms.appendBold(contact.name);        noSms.append(" - ");        noSms.appendLine(getString(R.string.chat_no_sms));      }    }    if (!hasMatch) {      send(noSms);    }  } else {    send(R.string.chat_no_match_for,namePattern);  }}  }
class C{  public JDBCXYDataset(String url,String driverName,String user,String password) throws SQLException, ClassNotFoundException {  this();  Class.forName(driverName);  this.connection=DriverManager.getConnection(url,user,password);}  }
class C{  public void pred_16x8_motion(int n,int list,int ref,int[] mxmy){  if (n == 0) {    int top_ref=this.ref_cache[list][scan8[0] - 8];    int[] B=this.mv_cache[list][scan8[0] - 8];    if (top_ref == ref) {      mxmy[0]=B[0];      mxmy[1]=B[1];      return;    }  } else {    int left_ref=this.ref_cache[list][scan8[8] - 1];    int[] A=this.mv_cache[list][scan8[8] - 1];    if (left_ref == ref) {      mxmy[0]=A[0];      mxmy[1]=A[1];      return;    }  }  pred_motion(n,4,list,ref,mxmy);}  }
class C{  public void release(){  if (diskLog != null)   diskLog.release(this);}  }
class C{  private void writeTrailer(IndexOutput out,long dirStart) throws IOException {  out.writeLong(dirStart);}  }
class C{  private String ltrim(String s){  if (s == null) {    return null;  }  int index=0;  int len=s.length();  while (index < len && Character.isWhitespace(s.charAt(index))) {    index++;  }  return (index >= len) ? "" : s.substring(index);}  }
class C{  @Override public UpdateResponse addBean(Object obj,int commitWithinMs) throws IOException, SolrServerException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.addBean(obj,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.addBean(obj,commitWithinMs);  return ur;}  }
class C{  public MultiPercolateRequest add(PercolateRequestBuilder requestBuilder){  return add(requestBuilder.request());}  }
class C{  private List<Vcenter> filterVcentersByTenant(List<Vcenter> vcenters,URI tenantId){  List<Vcenter> tenantVcenterList=new ArrayList<Vcenter>();  Iterator<Vcenter> vcenterIt=vcenters.iterator();  while (vcenterIt.hasNext()) {    Vcenter vcenter=vcenterIt.next();    if (vcenter == null) {      continue;    }    Set<URI> tenantUris=_permissionsHelper.getUsageURIsFromAcls(vcenter.getAcls());    if (CollectionUtils.isEmpty(tenantUris)) {      continue;    }    if (!NullColumnValueGetter.isNullURI(tenantId) && !tenantUris.contains(tenantId)) {      continue;    }    Iterator<URI> tenantUriIt=tenantUris.iterator();    while (tenantUriIt.hasNext()) {      if (verifyAuthorizedInTenantOrg(tenantUriIt.next())) {        tenantVcenterList.add(vcenter);      }    }  }  return tenantVcenterList;}  }
class C{  public static BufferedImage thresholdImage(BufferedImage image,int threshold){  BufferedImage result=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_BYTE_GRAY);  result.getGraphics().drawImage(image,0,0,null);  WritableRaster raster=result.getRaster();  int[] pixels=new int[image.getWidth()];  for (int y=0; y < image.getHeight(); y++) {    raster.getPixels(0,y,image.getWidth(),1,pixels);    for (int i=0; i < pixels.length; i++) {      if (pixels[i] < threshold)       pixels[i]=0; else       pixels[i]=255;    }    raster.setPixels(0,y,image.getWidth(),1,pixels);  }  return result;}  }
class C{  public static void main(String[] args){  System.out.println("JTS Debugging is " + (debugOn ? "ON" : "OFF"));}  }
class C{  static boolean hasCompilerAnnotation(Tree.StatementOrArgument decl,String name){  for (  CompilerAnnotation annotation : decl.getCompilerAnnotations()) {    if (annotation.getIdentifier().getText().equals(name))     return true;  }  return false;}  }
class C{  public boolean undo(IGameState gameState){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  if (board.get(col,row) != player.getMark()) {    return false;  }  board.clear(col,row);  return true;}  }
class C{  public static <T>T max(T[] self){  return max((Iterable<T>)toList(self));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public E insert(MediaSource media) throws ServiceException, IOException {  return insert(media,entryClass);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public NecronomiconInfusionRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,boolean requiresSacrifice,ItemStack item,Object sacrifice,Object... offerings){  super(unlocalizedName,bookType,dimension,requiredEnergy,requiresSacrifice,item,offerings);  this.sacrifice=sacrifice;}  }
class C{  public RestoringInputStream(InputStream inStream){  this.inStream=inStream;}  }
class C{  public static <T>LazyPBagX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  public void initialize(TungstenProperties properties) throws BackupException {  List<String> backupNames=properties.getStringList(BACKUP_AGENTS);  for (  String backupName : backupNames) {    BackupAgent agent=(BackupAgent)loadAndConfigure(BACKUP_AGENT,backupName,properties);    backupAgents.put(backupName,agent);  }  backupDefaultName=properties.getString(BACKUP_DEFAULT);  if (backupDefaultName == null) {    logger.warn("No default backup agent name provided; backups must explicitly select an agent");  } else   if (backupAgents.get(backupDefaultName) == null) {    throw new BackupException("Default backup agent name does not exist: " + backupDefaultName);  } else {    logger.info("Default backup agent set: name=" + backupDefaultName);  }  List<String> storageNames=properties.getStringList(STORAGE_AGENTS);  for (  String storageName : storageNames) {    StorageAgent agent=(StorageAgent)loadAndConfigure(STORAGE_AGENT,storageName,properties);    storageAgents.put(storageName,agent);  }  storageDefaultName=properties.getString(STORAGE_DEFAULT);  if (storageDefaultName == null) {    logger.warn("No default storage agent name provided; storages must explicitly select an agent");  } else   if (storageAgents.get(storageDefaultName) == null) {    throw new BackupException("Default storage agent name does not exist: " + storageDefaultName);  } else {    logger.info("Default storage agent set: name=" + storageDefaultName);  }  if (backupAgents.size() == 0) {    logger.warn("No backup agents configured; backups are disabled");  } else   if (storageAgents.size() == 0) {    logger.warn("No storage agents configured; backups are disabled");  } else {    enabled=true;    logger.info("Backups are now enabled");  }}  }
class C{  public int next(){  int node=_currentNode;  int current=makeNodeIdentity(node);  while (true) {    current++;    int type=_type2(current);    if (NULL == type) {      _currentNode=NULL;      return returnNode(node);    }    if (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type)     continue;    _currentNode=makeNodeHandle(current);    return returnNode(node);  }}  }
class C{  private PreparedStatement[] testBug71396PrepStatementInit(Connection testConn,String[] queries,int maxRows) throws SQLException {  PreparedStatement[] testPStmt=new PreparedStatement[queries.length];  for (int i=0; i < queries.length; i++) {    testPStmt[i]=testConn.prepareStatement(queries[i]);    if (maxRows > 0) {      testPStmt[i].setMaxRows(maxRows);    }  }  return testPStmt;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public JAVAReader(InputStream is){  _is=is;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keys();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  protected void validateState(State current){  checkNotNull(current.taskInfo,"taskInfo cannot be null");  checkNotNull(current.taskInfo.stage,"stage cannot be null");  checkNotNull(current.queryPollDelay,"queryPollDelay cannot be null");  checkState(current.queryPollDelay > 0,"queryPollDelay must be greater than zero");  checkNotNull(current.imageWatermarkTime,"imageWatermarkTime cannot be null");  checkState(current.imageWatermarkTime > 0,"imageWatermarkTime must be greater than zero");  checkNotNull(current.imageDeleteWatermarkTime,"imageDeleteWatermarkTime cannot be null");  checkState(current.imageDeleteWatermarkTime > 0,"imageDeleteWatermarkTime must be greater than zero");  checkState(current.documentExpirationTimeMicros > 0,"documentExpirationTimeMicros must be greater than zero");  if (current.dataStoreCount != null) {    checkState(current.dataStoreCount >= 0,"dataStoreCount needs to be >= 0");  }  if (current.finishedDeletes != null) {    checkState(current.finishedDeletes >= 0,"finishedDeletes needs to be >= 0");  }  if (current.failedOrCanceledDeletes != null) {    checkState(current.failedOrCanceledDeletes >= 0,"failedOrCanceledDeletes needs to be >= 0");  }switch (current.taskInfo.stage) {case STARTED:    checkState(current.taskInfo.subStage != null,"Invalid stage update. subStage cannot be null");switch (current.taskInfo.subStage) {case AWAIT_COMPLETION:    checkNotNull(current.dataStoreCount,"dataStoreCount cannot be null");case TRIGGER_DELETES:  break;default :checkState(false,"unsupported sub-state: " + current.taskInfo.subStage.toString());}break;case FAILED:case FINISHED:case CANCELLED:checkState(current.taskInfo.subStage == null,"Invalid stage update. substage must be null");break;default :checkState(false,"cannot process patches in state: " + current.taskInfo.stage.toString());}}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearModifiedTime(){  fieldSetFlags()[6]=false;  return this;}  }
class C{  public boolean intersects(Sector that){  if (that == null)   return false;  if (that.maxLongitude.degrees < this.minLongitude.degrees)   return false;  if (that.minLongitude.degrees > this.maxLongitude.degrees)   return false;  if (that.maxLatitude.degrees < this.minLatitude.degrees)   return false;  if (that.minLatitude.degrees > this.maxLatitude.degrees)   return false;  return true;}  }
class C{  public void removeActionListener(EventListener listener){  removeEventListener(Events.ON_SELECT,listener);}  }
class C{  @RequestMapping(value="/account/reset_password/init",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> requestPasswordReset(@RequestBody String mail,HttpServletRequest request){  return userService.requestPasswordReset(mail).map(null).orElse(new ResponseEntity<>("e-mail address not registered",HttpStatus.BAD_REQUEST));}  }
class C{  private void markSmsAsReadByNumber(String number,String name){  if (!mSmsManager.markAsRead(number)) {    send("Error marking SMS as read from number: " + number);  } else {    if (name != null) {      send(R.string.chat_mark_as_read,name);    } else {      send(R.string.chat_mark_as_read,number);    }  }}  }
class C{  void generateStaticProxy(Class<?> clazz){  imports.clear();  addImport(InvocationHandler.class);  addImport(Method.class);  addImport(clazz);  className=getClassName(clazz) + "Proxy";  for (  Method m : clazz.getDeclaredMethods()) {    if (Modifier.isStatic(m.getModifiers())) {      if (!Modifier.isPrivate(m.getModifiers())) {        addMethod(m);      }    }  }}  }
class C{  public static int calcSerializedMemSize(Object o){  int result=calcSerializedSize(o);  result+=Sizeable.PER_OBJECT_OVERHEAD;  if (!(o instanceof byte[])) {    result+=overhead();  }  return result;}  }
class C{  public static PropertyDescriptor findPropertyDescriptor(Class type,String name){  PropertyDescriptor[] pds=getPropertyDescriptors(type);  for (  PropertyDescriptor pd : pds) {    if (pd.getName().equals(name)) {      return pd;    }  }  return null;}  }
class C{  public boolean isClosed(){  Object oo=get_Value(COLUMNNAME_IsClosed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected static void shutdown(int port,InetAddress address) throws IOException {  if (shutdown) {    return;  }  shutdown=true;  if (directory != null) {    ManagerInfo.setLocatorStopping(directory,port,address);  }  if (lockFile != null) {    if (!lockFile.delete() && lockFile.exists()) {      IOException e=new IOException("Unable to delete " + lockFile.getAbsolutePath());      e.printStackTrace();    }  }  logger.info(LocalizedStrings.DistributionLocator_LOCATOR_STOPPED);}  }
class C{  public Sax2XMLReaderCreator(String className){  this.className=className;}  }
class C{  public byte[] embedData(File msgFile,File coverFile,String stegoFileName) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.DATA_HIDING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_DH);  }  InputStream is=null;  String filename=null;  try {    if (msgFile == null) {      is=System.in;    } else {      is=new FileInputStream(msgFile);      filename=msgFile.getName();    }    return embedData(CommonUtil.getStreamBytes(is),filename,coverFile == null ? null : CommonUtil.getFileBytes(coverFile),coverFile == null ? null : coverFile.getName(),stegoFileName);  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public LinkProperties(String keyString,String valueString){  super();  setProperty(keyString,valueString);}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.ROUTER__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.ROUTER__TO_CHANNELS:getToChannels().clear();return;case EipPackage.ROUTER__FROM_CHANNELS:getFromChannels().clear();return;case EipPackage.ROUTER__OWNED_ROUTES:getOwnedRoutes().clear();return;case EipPackage.ROUTER__TYPE:setType(TYPE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void seekEnd(long offset) throws IOException {  flushBuffer();  StreamImpl source=_source;  if (source != null)   source.seekEnd(offset);  _position=offset;}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){  if (addonsDialog != null) {    addonsDialog.setDownloadingUpdates();  }  if (getView() != null) {    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());    addOns.addAll(changes.getOldVersions());    Set<Extension> extensions=new HashSet<>();    extensions.addAll(changes.getUnloadExtensions());    extensions.addAll(changes.getSoftUnloadExtensions());    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {      return;    }  }  uninstallAddOns(caller,changes.getUninstalls(),false);  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());  allAddons.addAll(changes.getInstalls());  for (  AddOn addOn : allAddons) {    if (addonsDialog != null) {      addonsDialog.notifyAddOnDownloading(addOn);    }    downloadAddOn(addOn);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  protected Map<String,?> evaluateExperiment(final Experiment exp,final Map<String,?> input,final Map<String,?> overrides){  final Map<String,Object> _input=Helper.cast(input), _overrides=Helper.cast(overrides);  return Collections.unmodifiableMap(new Interpreter(exp.def.getCopyOfScript(),exp.salt,_input,_overrides).getParams());}  }
class C{  public boolean nameExistsForStorageSystem(URI storageSystemId,String cgName){  return cgName != null ? cgName.equals(getCgNameOnStorageSystem(storageSystemId)) : false;}  }
class C{  void copyExceptionTable() throws IOException {  int tableLength=c.copyU2();  if (tableLength > 0) {    traceln();    traceln("Exception table:");    traceln(" from:old/new  to:old/new target:old/new type");    for (int tcnt=tableLength; tcnt > 0; --tcnt) {      int startPC=c.readU2();      int newStartPC=map[startPC];      c.writeU2(newStartPC);      int endPC=c.readU2();      int newEndPC=map[endPC];      c.writeU2(newEndPC);      int handlerPC=c.readU2();      int newHandlerPC=map[handlerPC];      c.writeU2(newHandlerPC);      int catchType=c.copyU2();      if (Inject.verbose) {        traceFixedWidthInt(startPC,6);        traceFixedWidthInt(newStartPC,6);        traceFixedWidthInt(endPC,6);        traceFixedWidthInt(newEndPC,6);        traceFixedWidthInt(handlerPC,6);        traceFixedWidthInt(newHandlerPC,6);        trace("    ");        if (catchType == 0)         traceln("any"); else {          traceln("" + catchType);        }      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.WHILE_STATEMENT;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") public V valueAt(int index){  return (V)mArray[(index << 1) + 1];}  }
class C{  public boolean isPersistent(){  return (null != cookieExpiryDate);}  }
class C{  public Tasks<ComputeSystemRestRep> discoverAll(){  return postTasks(baseUrl + "/discover");}  }
class C{  @Override public Storage createStorage(StorageCreateRequest storageCreateRequest){  validateStorageCreateRequest(storageCreateRequest);  StoragePlatformEntity storagePlatformEntity=storagePlatformHelper.getStoragePlatformEntity(storageCreateRequest.getStoragePlatformName());  StorageEntity storageEntity=storageDao.getStorageByName(storageCreateRequest.getName());  if (storageEntity != null) {    throw new AlreadyExistsException(String.format("Storage with name \"%s\" already exists.",storageCreateRequest.getName()));  }  storageEntity=new StorageEntity();  storageEntity.setName(storageCreateRequest.getName());  storageEntity.setStoragePlatform(storagePlatformEntity);  if (!CollectionUtils.isEmpty(storageCreateRequest.getAttributes())) {    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();    storageEntity.setAttributes(attributeEntities);    for (    Attribute attribute : storageCreateRequest.getAttributes()) {      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setStorage(storageEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  storageEntity=storageDao.saveAndRefresh(storageEntity);  return createStorageFromEntity(storageEntity);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @OnOpen public void onConnect(final Session session){  SESSIONS.add(session);}  }
class C{  public Iterable<String> keysThatMatch(String pat){  Queue<String> q=new LinkedList<>();  collect(root,"",pat,q);  return q;}  }
class C{  @Override public boolean isEmpty(){  return getText() == null || getText().length() == 0;}  }
class C{  public BannerPatternType(final String enumName,final int enumId,final String identifier){  super(enumName,enumId);  this.identifier=identifier;}  }
class C{  private static IPath[] decodePatterns(NamedNodeMap nodeMap,String tag){  String sequence=removeAttribute(tag,nodeMap);  if (!sequence.equals("")) {    char[][] patterns=CharOperation.splitOn('|',sequence.toCharArray());    int patternCount;    if ((patternCount=patterns.length) > 0) {      IPath[] paths=new IPath[patternCount];      int index=0;      for (int j=0; j < patternCount; j++) {        char[] pattern=patterns[j];        if (pattern.length == 0)         continue;        paths[index++]=new Path(new String(pattern));      }      if (index < patternCount)       System.arraycopy(paths,0,paths=new IPath[index],0,index);      return paths;    }  }  return null;}  }
class C{  private static int compare(IntegerDBIDVar i1,int p1,IntegerDBIDVar i2,int p2,Comparator<? super DBIDRef> comp){  i1.internalSetIndex(p1);  i2.internalSetIndex(p2);  return comp.compare(i1,i2);}  }
class C{  public static User createUser(){  return new UserImpl();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static WifiP2pDnsSdServiceRequest newInstance(String instanceName,String serviceType){  if (instanceName == null || serviceType == null) {    throw new IllegalArgumentException("instance name or service type cannot be null");  }  String fullDomainName=instanceName + "." + serviceType+ ".local.";  return new WifiP2pDnsSdServiceRequest(fullDomainName,WifiP2pDnsSdServiceInfo.DNS_TYPE_TXT,WifiP2pDnsSdServiceInfo.VERSION_1);}  }
class C{  private void processSockets() throws CompilationFailedException, IOException, URISyntaxException {  GroovyShell groovy=new GroovyShell(conf);  new GroovySocketServer(groovy,getScriptSource(isScriptFile,script),autoOutput,port);}  }
class C{  public BlockMask(Extent extent,Collection<BaseBlock> blocks){  super(extent);  checkNotNull(blocks);  add(blocks);}  }
class C{  protected Object createElementInfo(){  return new JavaModelInfo();}  }
class C{  public boolean isHasNext(){  FacesContext realContext=FacesContext.getCurrentInstance(), copyContext=createShadowFacesContext(realContext);  NavigationHandler nav=copyContext.getApplication().getNavigationHandler();  nav.handleNavigation(copyContext,null,"next");  return compareUIViewRoots(realContext.getViewRoot(),copyContext.getViewRoot());}  }
class C{  private Proxy nextProxy(){  if (userSpecifiedProxy != null) {    hasNextProxy=false;    return userSpecifiedProxy;  }  if (proxySelectorProxies != null) {    while (proxySelectorProxies.hasNext()) {      Proxy candidate=proxySelectorProxies.next();      if (candidate.type() != Proxy.Type.DIRECT) {        return candidate;      }    }  }  hasNextProxy=false;  return Proxy.NO_PROXY;}  }
class C{  protected RelNode createAggregate(Blackboard bb,boolean indicator,ImmutableBitSet groupSet,ImmutableList<ImmutableBitSet> groupSets,List<AggregateCall> aggCalls){  return LogicalAggregate.create(bb.root,indicator,groupSet,groupSets,aggCalls);}  }
class C{  public void addTriggersIds(Trigger trigger){  this.getTriggersIds().add(trigger.getId());}  }
class C{  @Override public boolean formatPercent(){  return true;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public void vrule(long timestamp,Paint color,String legend){  vrule(timestamp,color,legend,1.0F);}  }
class C{  public boolean hasMoreElements(){  if (currentEnumeration == -1) {    currentEnumeration=0;  }  for (int i=currentEnumeration; i < allEnumerations.size(); i++) {    Enumeration enumeration=allEnumerations.get(i);    if (enumeration.hasMoreElements()) {      currentEnumeration=i;      return true;    }  }  return false;}  }
class C{  public <T>Exporter<T> export(Invoker<T> invoker) throws RpcException {  URL url=invoker.getUrl();  String key=serviceKey(url);  ThriftRpcExporter<T> exporter=new ThriftRpcExporter<T>(invoker,key,exporterMap);  exporterMap.put(key,exporter);  openServer(url);  return exporter;}  }
class C{  public void testRewriteSingleTerm() throws IOException {  AutomatonQuery aq=new AutomatonQuery(newTerm("bogus"),Automata.makeString("piece"));  Terms terms=MultiFields.getTerms(searcher.getIndexReader(),FN);  assertTrue(aq.getTermsEnum(terms) instanceof SingleTermsEnum);  assertEquals(1,automatonQueryNrHits(aq));}  }
class C{  public RectangleConstraint toFixedWidth(double width){  return new RectangleConstraint(width,this.widthRange,LengthConstraintType.FIXED,this.height,this.heightRange,this.heightConstraintType);}  }
class C{  public static void verifyAndClear(long filePos,int pos,long len,byte[] expected,byte[] actual){  for (int i=pos; i < pos + len; i++) {    verifyBytes(filePos + i,expected[i],actual[i]);    actual[i]=0;  }}  }
class C{  public void clearSelection(){  m_selectedItems.clear();}  }
class C{  public static void visitByStatus(final @NotNull StatusVisitor statusVisitor,PendingChange pendingChange) throws TfsException {  determineServerStatus(pendingChange).visitBy(VersionControlPath.getFilePath(pendingChange.getLocalItem(),(new File(pendingChange.getLocalItem()).isDirectory())),true,statusVisitor);}  }
class C{  public void caretUpdate(CaretEvent e){  if (m_VFormat.length() == 0 || m_VFormat.equals(m_mask))   return;  if (e.getDot() != e.getMark()) {    m_lastDot=e.getDot();    return;  }  if (e.getDot() + 1 > m_mask.length() || m_mask.charAt(e.getDot()) == SPACE) {    m_lastDot=e.getDot();    return;  }  int newDot=-1;  if (m_lastDot > e.getDot())   newDot=e.getDot() - 1; else   newDot=e.getDot() + 1;  if (e.getDot() == 0)   newDot=1; else   if (e.getDot() == m_mask.length() - 1)   newDot=e.getDot() - 1;  m_lastDot=e.getDot();  if (newDot >= 0 && newDot < getText().length())   m_tc.setCaretPosition(newDot);}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  ObjectStat that=(ObjectStat)o;  if (length != that.length) {    return false;  }  if (!bucketName.equals(that.bucketName)) {    return false;  }  if (!name.equals(that.name)) {    return false;  }  if (!createdTime.equals(that.createdTime)) {    return false;  }  if (!etag.equals(that.etag)) {    return false;  }  return contentType.equals(that.contentType);}  }
class C{  public static final void normalizeColumns(final double[][] m1){  final int columndimension=getColumnDimensionality(m1);  for (int col=0; col < columndimension; col++) {    double norm=0.0;    for (int row=0; row < m1.length; row++) {      norm=norm + (m1[row][col] * m1[row][col]);    }    norm=Math.sqrt(norm);    if (norm != 0) {      for (int row=0; row < m1.length; row++) {        m1[row][col]/=norm;      }    } else {    }  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  protected boolean canAssembleTiles(DrawContext dc){  Rectangle viewport=dc.getView().getViewport();  return viewport.getWidth() > 0 && viewport.getHeight() > 0;}  }
class C{  public Table(TableHelper th,String name,String id){  super(th);  this.th=th;  this.list=th.getTableList();  this.name=name;  this.id=id;}  }
class C{  public static void CF3(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double pj;  double N=2.0;  double a=1.0;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - x[0] * x[0] + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;  c[0]=f[1] + f[0] * f[0] - a * Math.sin(N * PI * (f[0] * f[0] - f[1] + 1.0)) - 1.0;}  }
class C{  public int errPos(){  return errPos;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized void resetCloudDevices(){  cloudDevices=null;}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public void deleteGroup(String groupId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  delete(new URL(baseDomainUrl + groupId));}  }
class C{  public void resetTimestamp(){  timestamp=PresenceInfo.getNewTimestamp();}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (count > upLimit) {    return mTextHeight + getPaddingTop() + getPaddingBottom();  }  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=2 * radius + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public long length() throws SmbException {  if (sizeExpiration > System.currentTimeMillis()) {    return size;  }  if (getType() == TYPE_SHARE) {    Trans2QueryFSInformationResponse response;    int level=Trans2QueryFSInformationResponse.SMB_INFO_ALLOCATION;    response=new Trans2QueryFSInformationResponse(level);    send(new Trans2QueryFSInformation(level),response);    size=response.info.getCapacity();  } else   if (getUncPath0().length() > 1 && type != TYPE_NAMED_PIPE) {    Info info=queryPath(getUncPath0(),Trans2QueryPathInformationResponse.SMB_QUERY_FILE_STANDARD_INFO);    size=info.getSize();  } else {    size=0L;  }  sizeExpiration=System.currentTimeMillis() + attrExpirationPeriod;  return size;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void edit(SARAnnotation annotation){  if (annotation != null) {    String text=showAnnotationDialog("Edit Annotation",annotation.getText());    if (text != null) {      if (text.length() > 0) {        annotation.setText(text);        if (annotation.getOwner() != null)         annotation.getOwner().markDirty();      } else {        this.remove(annotation);      }    }    this.wwd.redraw();  }}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public NotificationChain basicSetOwner(Expression newOwner,NotificationChain msgs){  Expression oldOwner=owner;  owner=newOwner;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.FEATURE_CALL__OWNER,oldOwner,newOwner);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addHistoryChangedListener(HistoryChangedListener l){  m_HistoryChangedListeners.add(l);}  }
class C{  public static Integer computeLogic(GateType gate_type,ArrayList<Integer> inputs){  Integer out=new Integer(-1);  if (gate_type == GateType.OR || gate_type == GateType.OUTPUT_OR || gate_type == GateType.OUTPUT) {    out=computeOR(inputs);  } else   if (gate_type == GateType.NOR) {    out=computeNOR(inputs);  } else   if (gate_type == GateType.NOT) {    out=computeNOT(inputs.get(0));  } else   if (gate_type == GateType.AND) {    out=computeAND(inputs);  }  return out;}  }
class C{  static GenomeRelationships loadFile(File file) throws IOException {  try (BufferedReader reader=new BufferedReader(new FileReader(file))){    return load(reader);  } }  }
class C{  public static boolean isIndependentPooledRandom(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet){  double alpha=independenceTests.get(0).getAlpha();  int r=RandomUtil.getInstance().nextInt(independenceTests.size());  IndependenceTest independenceTest=independenceTests.get(r);  List<Node> localCondSet=new ArrayList<>();  for (  Node node : condSet) {    localCondSet.add(independenceTest.getVariable(node.getName()));  }  independenceTest.isIndependent(independenceTest.getVariable(x.getName()),independenceTest.getVariable(y.getName()),localCondSet);  double p=independenceTest.getPValue();  return (p > alpha);}  }
class C{  protected void applyRotation(ModelRenderer modelRenderer,RotationMatrix rotationMatrix){  rotationMatrix.setRotations(modelRenderer.rotateAngleX,modelRenderer.rotateAngleY,modelRenderer.rotateAngleZ);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(contentType);  v.add(contentEncryptionAlgorithm);  if (encryptedContent != null) {    v.add(new BERTaggedObject(false,0,encryptedContent));  }  return new BERSequence(v);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (definedTypingStrategy: ");  result.append(definedTypingStrategy);  result.append(')');  return result.toString();}  }
class C{  public static void shuffle(int[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public static boolean isSuInstalled(){  File subin=new File("/system/bin/su"), suxbin=new File("/system/xbin/su"), susbin=new File("/sbin/su");  return subin.exists() || suxbin.exists() || susbin.exists();}  }
class C{  public void testDefaultList() throws Exception {  Map<String,Method> functions=JavascriptCompiler.DEFAULT_FUNCTIONS;  Expression expr=JavascriptCompiler.compile("sqrt(20)",functions,getClass().getClassLoader());  assertEquals(Math.sqrt(20),expr.evaluate(0,null),DELTA);}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDateAllowed(LocalDate date){  if (settings == null) {    return true;  }  return settings.isDateAllowed(date);}  }
class C{  public static int modulo(long h0,long h1,int divisor){  long d=divisor;  long modH0=(h0 < 0L) ? addRule(mulRule(BIT62,2L,d),(h0 & MAX_LONG),d) : h0 % d;  long modH1=(h1 < 0L) ? addRule(mulRule(BIT62,2L,d),(h1 & MAX_LONG),d) : h1 % d;  long modTop=mulRule(mulRule(BIT62,4L,d),modH1,d);  return (int)addRule(modTop,modH0,d);}  }
class C{  public String toString(Map lbInt2Str){  String res=originalData;  String modelLabelStr=(String)lbInt2Str.get(new Integer(modelLabel));  if (modelLabelStr != null) {    res+=Option.labelSeparator + modelLabelStr;  }  return res;}  }
class C{  public void config() throws NetworkDeviceControllerException {  if (inConfigMode == true) {    return;  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  lastPrompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.config.configterminal.cmd"),defaultTimeout,prompts,buf);  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  inConfigMode=true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getOverscanScaleHeight());}  }
class C{  public static <NodeType extends ISelectableNode,GraphType extends ISelectableGraph<NodeType> & IZoomableGraph<NodeType>>void zoomToSelected(final GraphType graph){  final List<NodeType> selectedNodes=getSelectedNodes(graph);  if (selectedNodes.size() == 0) {    throw new IllegalStateException("Error: There are no selected nodes");  }  graph.zoomToNodes(selectedNodes);}  }
class C{  static public String executeFunction(String function,Variables variables){  return executeFunction(function,variables,"");}  }
class C{  private AttrVersion(final String val) throws BOSHException {  super(val);  int idx=val.indexOf('.');  if (idx <= 0) {    throw (new BOSHException("Illegal ver attribute value (not in major.minor form): " + val));  }  String majorStr=val.substring(0,idx);  try {    major=Integer.parseInt(majorStr);  } catch (  NumberFormatException nfx) {    throw (new BOSHException("Could not parse ver attribute value (major ver): " + majorStr,nfx));  }  if (major < 0) {    throw (new BOSHException("Major version may not be < 0"));  }  String minorStr=val.substring(idx + 1);  try {    minor=Integer.parseInt(minorStr);  } catch (  NumberFormatException nfx) {    throw (new BOSHException("Could not parse ver attribute value (minor ver): " + minorStr,nfx));  }  if (minor < 0) {    throw (new BOSHException("Minor version may not be < 0"));  }}  }
class C{  public static TypeInformation[] array(TypeInformation... ts){  return ts;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.870 -0500",hash_original_method="C1A26B01C735E97490E02BBFBAC6A09E",hash_generated_method="E0C97133E7A6161622C7943AC6D8A283") public boolean containsKey(int key){  return mCapabilities.containsKey(key);}  }
class C{  private void initializeViewsAdapter(){  setSupportActionBar(toolbar);  collapsingToolbarLayout.setTitle("My RadioList");  RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(this);  recyclerView.setLayoutManager(layoutManager);  recyclerView.setHasFixedSize(true);  adapter=new RecyclerViewAdapter(getApplicationContext());  recyclerView.setAdapter(adapter);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testBenchmark() throws Exception {  runTest("en/dictionary.txt","en/text.txt");  runTest("cn/dictionary.txt","cn/text.txt");}  }
class C{  public synchronized void clearRows(){  rows.clear();}  }
class C{  private static void diagV2M(MatrixBlock in,MatrixBlock out){  int rlen=in.rlen;  for (int i=0; i < rlen; i++) {    double val=in.quickGetValue(i,0);    if (val != 0)     out.appendValue(i,i,val);  }}  }
class C{  public void test_getBitsFromByteArray_02(){  final byte[] b=new byte[4];  BytesUtil.setBit(b,31,true);  assertEquals(0x00000000,getBits(b,0,0));  assertEquals(0x00000000,getBits(b,0,1));  assertEquals(0x00000000,getBits(b,0,31));  assertEquals(0x00000001,getBits(b,0,32));  assertEquals(0x00000001,getBits(b,31,1));  assertEquals(0x00000001,getBits(b,30,2));}  }
class C{  public static int countColumn(File file,char delimiter) throws IOException {  int count=0;  byte delim=(byte)delimiter;  try (FileChannel fc=new RandomAccessFile(file,"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    byte currentChar=-1;    byte prevChar=NEW_LINE;    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        count++;        if (currentChar == NEW_LINE) {          break;        }      }      prevChar=currentChar;    }    if (!(currentChar == -1 || currentChar == NEW_LINE)) {      count++;    }  }   return count;}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return Boolean.FALSE;  return uiMgr.isServerUI() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public CubicSplineInterpolator(long[] timestamps,double[] values){  this.x=new double[timestamps.length];  for (int i=0; i < timestamps.length; i++) {    this.x[i]=timestamps[i];  }  this.y=values;  validate();  spline();}  }
class C{  public static String code(final Date date){  QL.require(isIMMdate(date,false),"not an IMM date");  final int y=date.year() % 10;  final char code=date.month().getImmChar();  final StringBuilder sb=new StringBuilder();  sb.append(code).append(y);  final String imm=sb.toString();  QL.ensure(isIMMcode(imm,false),"the result is an invalid IMM code");  return imm;}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public static <K,V>HashMap<K,V> readHashMap(ObjectInput in) throws IOException, ClassNotFoundException {  int size=in.readInt();  if (size == -1)   return null;  HashMap<K,V> map=U.newHashMap(size);  for (int i=0; i < size; i++)   map.put((K)in.readObject(),(V)in.readObject());  return map;}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  public double findInternalSum(NodeCluster nc1,NodeCluster nc2,Method linkMethod,Object[] args){  double result=0;  for (  Link l : this.interLinks.values()) {    try {      result+=(Double)linkMethod.invoke(l,args);    } catch (    IllegalAccessException|InvocationTargetException|IllegalArgumentException e) {      e.printStackTrace();    }  }  return result;}  }
class C{  public static ValueExp plus(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(PLUS,value1,value2);}  }
class C{  public ActivatableRef(){}  }
class C{  public void expandAcronym(View v){  final String acronym=mEditText.getText().toString().trim().toUpperCase(Locale.ENGLISH);  if (acronym.isEmpty())   Utils.showToast(this,"no acronym provided"); else {    resetDisplay();    getOps().expandAcronym(acronym);  }  mEditText.requestFocus();  mEditText.selectAll();}  }
class C{  public void dispose(){  if (metadata != null)   metadata.dispose();  if (index != null)   index.dispose();}  }
class C{  public static long staticFieldOffset(Field field){  return UNSAFE.staticFieldOffset(field);}  }
class C{  protected boolean isDrawOutlined(){  return TacGrpSidc.C2GM_OFF_LNE_DIRATK_GRD_MANATK.equalsIgnoreCase(this.maskedSymbolCode);}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  protected void fire(final SelectionEvent event){  if (this.listener == null)   return;  this.listener.widgetSelected(event);}  }
class C{  void takeScreenshot(Runnable finisher,boolean statusBarVisible,boolean navBarVisible){  mDisplay.getRealMetrics(mDisplayMetrics);  float[] dims={mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels};  int rot=mDisplay.getRotation();  rot=(rot + (android.os.SystemProperties.getInt("ro.sf.hwrotation",0) / 90)) % 4;  float degrees=getDegreesForRotation(rot);  boolean requiresRotation=(degrees > 0);  if (requiresRotation) {    mDisplayMatrix.reset();    mDisplayMatrix.preRotate(-degrees);    mDisplayMatrix.mapPoints(dims);    dims[0]=Math.abs(dims[0]);    dims[1]=Math.abs(dims[1]);  }  mScreenBitmap=SurfaceControl.screenshot((int)dims[0],(int)dims[1]);  if (mScreenBitmap == null) {    notifyScreenshotError(mContext,mNotificationManager);    finisher.run();    return;  }  if (requiresRotation) {    Bitmap ss=Bitmap.createBitmap(mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels,Bitmap.Config.ARGB_8888);    Canvas c=new Canvas(ss);    c.translate(ss.getWidth() / 2,ss.getHeight() / 2);    c.rotate(degrees);    c.translate(-dims[0] / 2,-dims[1] / 2);    c.drawBitmap(mScreenBitmap,0,0,null);    c.setBitmap(null);    mScreenBitmap.recycle();    mScreenBitmap=ss;  }  mScreenBitmap.setHasAlpha(false);  mScreenBitmap.prepareToDraw();  startAnimation(finisher,mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels,statusBarVisible,navBarVisible);}  }
class C{  public static double perpDot(double x0,double y0,double x1,double y1){  return x0 * y1 - y0 * x1;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public FasDci(Graph graph,IndependenceTest independenceTest,ResolveSepsets.Method method,List<Set<Node>> marginalVars,List<IndependenceTest> independenceTests,SepsetMapDci knownIndependencies,SepsetMapDci knownAssociations){  this.graph=graph;  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  this.method=method;  this.marginalVars=marginalVars;  this.independenceTests=independenceTests;  this.knownIndependencies=knownIndependencies;  this.knownAssociations=knownAssociations;}  }
class C{  public static PreviousContext forConnector(String connectorType,String connectorName,String contextName){  if (connectorType == null)   throw new IllegalArgumentException("The MDC value for the connector type may not be null");  if (connectorName == null)   throw new IllegalArgumentException("The MDC value for the connector name may not be null");  if (contextName == null)   throw new IllegalArgumentException("The MDC value for the connector context may not be null");  PreviousContext previous=new PreviousContext();  MDC.put(CONNECTOR_TYPE,connectorType);  MDC.put(CONNECTOR_NAME,connectorName);  MDC.put(CONNECTOR_CONTEXT,contextName);  return previous;}  }
class C{  @Override public boolean isLocked(){  return getLockDir().exists();}  }
class C{  @Override public Object retrieve(long windowId) throws IOException {  return retrieve(wal,windowId);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(attrType);  v.add(attrValues);  return new DERSequence(v);}  }
class C{  private boolean isString(int type){switch (type) {case java.sql.Types.CHAR:case java.sql.Types.VARCHAR:case java.sql.Types.LONGVARCHAR:    return true;default :  return false;}}  }
class C{  public final void writeModelDataToFile(String sourceId) throws AdeException {  if (UploadOrAnalyze.getAdeRequestType() != AdeExtRequestType.ANALYZE) {    logger.warn("Skip writing RuntimeModelData, because it's request type is: " + UploadOrAnalyze.getAdeRequestType());    return;  }  if (sourceId == null) {    logger.warn("Skip writing RuntimeModelData, because sourceId is null.");    return;  }  final long currentTimestamp=System.currentTimeMillis();  String timeSinceLastRuntimeModelDataWriting;  if (m_creationTimeOfRuntimeModelData == 0) {    timeSinceLastRuntimeModelDataWriting="N/A";  } else {    final long milliseconds=currentTimestamp - m_creationTimeOfRuntimeModelData;    final int seconds=(int)(milliseconds / DateTimeUtils.MILLIS_IN_SECOND) % EXCESS_SECONDS;    final int minutes=(int)((milliseconds / DateTimeUtils.MILLIS_IN_MINUTE) % EXCESS_MINUTES);    final int hours=(int)((milliseconds / DateTimeUtils.MILLIS_IN_HOUR) % DateTimeUtils.HOURS_IN_DAY);    timeSinceLastRuntimeModelDataWriting=String.format("%02d:%02d:%02d",hours,minutes,seconds);  }  int numberOfEntries=0;  boolean isWritingSuccessful=false;  final Set<String> modelObjectKeys=Ade.getAde().getDataStore().models().getModelDataObjectKeys();  final File file=getRuntimeModelDataPath(sourceId);  final File tempFile=getTempFile(file);  if (tempFile.exists()) {    final boolean deleted=tempFile.delete();    if (!deleted) {      final String msg="Writing RuntimeModelData: Runtime model data temporary file exists, this might mean a previous write failed:" + tempFile.getAbsolutePath() + ". Trying to delete this file but failed: "+ tempFile.getAbsolutePath();      logger.error(msg);    } else {      final String msg="Writing RuntimeModelData: Runtime model data temporary file exists, this might mean a previous write failed:" + tempFile.getAbsolutePath() + ". Deleted this file successfully: "+ tempFile.getAbsolutePath();      logger.info(msg);    }  }  DataOutputStream dos=null;  try {    String filePath=tempFile.getParent();    File dir=new File(filePath);    if (dir.exists()) {      if (!tempFile.exists()) {        tempFile.createNewFile();      }    } else {      String msg="Attempting to create directory: " + filePath;      logger.info(msg);      if (!dir.mkdirs()) {        throw new AdeUsageException("Could not create directory " + filePath);      }      tempFile.createNewFile();    }    final FileOutputStream fos=new FileOutputStream(tempFile);    dos=new DataOutputStream(fos);    dos.writeInt(S_CURRENT_RUNTIME_MODEL_DATA_VERSION);    m_creationTimeOfRuntimeModelData=currentTimestamp;    dos.writeLong(currentTimestamp);    dos.writeInt(modelObjectKeys.size());    for (    String modelObjectKey : modelObjectKeys) {      ObjectOutputStream oos=null;      numberOfEntries++;      try {        final Object modelObject=Ade.getAde().getDataStore().models().getModelDataObject(modelObjectKey);        final ByteArrayOutputStream baos=new ByteArrayOutputStream();        oos=new ObjectOutputStream(baos);        oos.writeObject(modelObject);        final byte[] dataArray=baos.toByteArray();        dos.writeUTF(modelObjectKey);        dos.writeInt(dataArray.length);        dos.write(dataArray);      } catch (      Exception e) {        throw new AdeUsageException("Error writing model object for: " + modelObjectKey,e);      } finally {        if (oos != null) {          oos.close();        }      }    }    if (dos != null) {      dos.close();      dos=null;      if (!tempFile.renameTo(file)) {        final String msg="Writing of runtimeModelData, failed to rename " + tempFile.getName() + " to "+ file.getName();        throw new AdeUsageException(msg);      }    }    isWritingSuccessful=true;  } catch (  Throwable e) {    final String msg="Writing of runtimeModelData failed:" + file.getAbsoluteFile() + ".  RuntimeModelData version: "+ S_CURRENT_RUNTIME_MODEL_DATA_VERSION+ ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.";    logger.error(msg,e);  } finally {    if (dos != null) {      try {        dos.close();        dos=null;      } catch (      IOException e) {        final String msg="Writing of runtimeModelData, error closing DataOutputStream for file: " + tempFile.getAbsolutePath();        logger.error(msg,e);      }    }    if (isWritingSuccessful) {      logger.info("Writing of runtimeModelData completed successfully: " + file.getAbsoluteFile() + ".  RuntimeModelData version: "+ S_CURRENT_RUNTIME_MODEL_DATA_VERSION+ ". There was "+ numberOfEntries+ " entries written."+ ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.");    } else {      logger.warn("Writing of runtimeModelData failed: " + file.getAbsoluteFile() + ".  It has been "+ timeSinceLastRuntimeModelDataWriting+ " since previous RuntimeModelData was written.");    }  }}  }
class C{  public void drawInto(Graphics g,int width,int height){  if (mainImage == null)   return;  if ((behavior & NO_TILING) != 0) {    drawNoTiling(g,width,height);    return;  }  if ((behavior & TILING_BOTH) != 0) {    drawTilingBoth(g,width,height);    return;  }  if ((behavior & TILING_VERTICAL) != 0) {    drawTilingVertical(g,width,height);    return;  }  if ((behavior & TILING_HORIZONTAL) != 0) {    drawTilingHorizontal(g,width,height);    return;  }}  }
class C{  public void add(SchemaObject obj){  if (SysProperties.CHECK && obj.getSchema() != this) {    DbException.throwInternalError("wrong schema");  }  String name=obj.getName();  HashMap<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists: " + name);  }  map.put(name,obj);  freeUniqueName(name);}  }
class C{  public boolean isAskForPassword(){  return askForPassword;}  }
class C{  public MWMDefinition(Properties ctx,int WM_Definition_ID){  this(ctx,WM_Definition_ID,null);}  }
class C{  public static void downloadAsync(ImageRequest request){  if (request == null) {    return;  }  RequestKey key=new RequestKey(request.getImageUri(),request.getCallerTag());synchronized (pendingRequests) {    DownloaderContext downloaderContext=pendingRequests.get(key);    if (downloaderContext != null) {      downloaderContext.request=request;      downloaderContext.isCancelled=false;      downloaderContext.workItem.moveToFront();    } else {      enqueueCacheRead(request,key,request.isCachedRedirectAllowed());    }  }}  }
class C{  public boolean more(){  return pos < in.length();}  }
class C{  public PostMethod buildPayRequest(String preapprovalKey,String receiver,String amount) throws Exception {  final Document doc=createBody("PayRequest");  final Element payReq=doc.getDocumentElement();  addElement(payReq,"actionType","PAY");  addElement(payReq,"preapprovalKey",preapprovalKey);  addElement(payReq,"senderEmail","buyer_1310720672_per@est.fujitsu.com");  final Element receiverList=addElement(payReq,"receiverList",null);  final Element receiverElement=addElement(receiverList,"receiver",null);  addElement(receiverElement,"amount",amount);  addElement(receiverElement,"email",receiver);  return createPostMethod(doc,"Pay");}  }
class C{  public String toString(){  return this.mode == 'd' ? this.writer.toString() : null;}  }
class C{  public boolean contains(final char[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  boolean remove(RowCursor cursor){  int rowHead=_rowHead;  int blobTail=_blobTail;  rowHead-=cursor.removeLength();  if (rowHead < blobTail) {    return false;  }  byte[] buffer=_buffer;  cursor.getRemove(buffer,rowHead);  rowHead(rowHead);  validateBlock(cursor.row());  return true;}  }
class C{  @Override protected void finalize() throws Throwable {  terminate();  super.finalize();}  }
class C{  protected void run(final String configurationFile) throws IOException, InterruptedException {  File cfgFile=new File(StringUtils.trim(configurationFile));  if (!cfgFile.isFile())   throw new FileNotFoundException("No configuration file found at '" + configurationFile + "'");  run(new FileInputStream(cfgFile));}  }
class C{  public Builder zkPort(int zkPort){  this._zkPort=zkPort;  return this;}  }
class C{  public void addListener(FSMouseListener l){  if (l == null) {    return;  }  if (!_handlers.containsKey(l)) {    _handlers.put(l,l);  }  if (!_enabled && _handlers.size() > 0) {    _panel.addMouseListener(this);    _panel.addMouseMotionListener(this);    _enabled=true;  }}  }
class C{  public boolean isDSeparated(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node aZ : z) {    if (aZ == null) {      throw new NullPointerException();    }  }  return getGraph().isDSeparatedFrom(x,y,z);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public NewNavMeshVisualPanel1(){  initComponents();  ps=new PropertySheet();  ps.setNodes(new Node[]{});  add(ps);}  }
class C{  public void clear(){  ntree=new NTree(dimensions);  if (distances == null) {    distances=new double[10240];  }  Arrays.fill(distances,-1);}  }
class C{  public boolean isStatic(){  return ElementUtils.isStatic(getElement());}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public static Test suite(){  return (new TestSuite(CompositeComponentsITCase.class));}  }
class C{  public TreeSelectionEvent(Object source,TreePath[] paths,boolean[] areNew,TreePath oldLeadSelectionPath,TreePath newLeadSelectionPath){  super(source);  this.paths=paths;  this.areNew=areNew;  this.oldLeadSelectionPath=oldLeadSelectionPath;  this.newLeadSelectionPath=newLeadSelectionPath;}  }
class C{  public static void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  @Deprecated public void showWebPage(String url,boolean openExternal,boolean clearHistory,HashMap<String,Object> params){  if (this.appView != null) {    appView.showWebPage(url,openExternal,clearHistory,params);  }}  }
class C{  public NonUniqueBusinessKeyException(){  super();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void writeRefactoringDescriptorProxies(final OutputStream stream,final RefactoringDescriptorProxy[] proxies) throws IOException {  final StringBuffer buffer=new StringBuffer(proxies.length * 64);  sortRefactoringDescriptorsAscending(proxies);  for (int index=0; index < proxies.length; index++) {    buffer.append(proxies[index].getTimeStamp());    buffer.append(DELIMITER_COMPONENT);    buffer.append(escapeString(proxies[index].getDescription()));    buffer.append(DELIMITER_ENTRY);  }  stream.write(buffer.toString().getBytes(IRefactoringSerializationConstants.OUTPUT_ENCODING));}  }
class C{  public static Report createReport(final CommandLine cmd){  return createReport(cmd,null);}  }
class C{  public void switchState(final boolean showAnimation){  if (showAnimation) {    final int childCount=getChildCount();    for (int i=0; i < childCount; i++) {      bindChildAnimation(getChildAt(i),i,300);    }  }  mExpanded=!mExpanded;  if (!showAnimation) {    requestLayout();  }  invalidate();}  }
class C{  public static byte[] md5(String data){  return md5(data.getBytes());}  }
class C{  @SuppressWarnings("unchecked") public CompositeMatchOr(final Match<?>... matches){  super();  for (  final Match<?> m : matches) {    add((Match<T>)m);  }}  }
class C{  public static byte[] decodeHex(char[] data) throws DecoderException {  int len=data.length;  if ((len & 0x01) != 0) {    throw new DecoderException("Odd number of characters.");  }  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  private void checkDrawingMode(Graphics2D g){  checkPaint(g.getPaint());  checkAlpha(g.getComposite());}  }
class C{  public static void adjustRowIndicesMax(int[] vix,double[] vmb,BinaryOperator bOp){  if (bOp.fn instanceof LessThan) {    shiftLeft(vix,vmb);  } else   if ((bOp.fn instanceof GreaterThanEquals) || (bOp.fn instanceof Equals)) {    setMaxIndexInPartition(vix,vmb);  } else   if (bOp.fn instanceof NotEquals) {    double dLastValue=vmb[vmb.length - 1];    int i=vmb.length - 1;    while (i > 0 && dLastValue == vmb[i - 1])     --i;    if (i > 0)     vix[0]=i - 1; else     vix[0]=vix.length - 1;  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawLine(x,y,x + SHAPE_WIDTH,y,paint);  if (isRenderPoints(renderer)) {    pointsChart.drawLegendShape(canvas,renderer,x + 5,y,seriesIndex,paint);  }}  }
class C{  public int size(){  return namespaceStack.size();}  }
class C{  public SystemSettings build(){  return new SystemSettings(this);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  if (guard != null) {    guard.checkGuard(object);  }  out.defaultWriteObject();}  }
class C{  public ClientKeyExchange(){  exchange_keys=EmptyArray.BYTE;  length=0;  isRSA=false;}  }
class C{  private AWTUtilities(){}  }
class C{  private void configureFile() throws Exception {  int backupFiles=rsvc.getInt(RuntimeConstants.LOGSYSTEM_LOG4J_FILE_BACKUPS,1);  int fileSize=rsvc.getInt(RuntimeConstants.LOGSYSTEM_LOG4J_FILE_SIZE,100000);  Appender appender=new RollingFileAppender(layout,logfile,true);  ((RollingFileAppender)appender).setMaxBackupIndex(backupFiles);  if (fileSize > -1) {    ((RollingFileAppender)appender).setMaximumFileSize(fileSize);  }  logger.addAppender(appender);}  }
class C{  protected void checkRelease(){  if (!isPersistentObject() && listeners.isEmpty() && !isAcquired()) {    log.info("Deleting shared object {} because all clients disconnected and it is no longer acquired.",name);    if (storage != null) {      if (!storage.remove(this)) {        log.error("Could not remove shared object.");      }    }    close();  }}  }
class C{  public boolean isBaselineShiftAsEnum(){  if (this.baselineShiftAsEnum != null)   return true; else   return false;}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeByte(type);  stream.writeInt(elements.length);  for (int i=0; i < elements.length; i++) {    elements[i].write(stream);  }}  }
class C{  @Override public void accept(Object source,Throwable t){  if (t != null) {    Executable.this.setLastError(t);    cleanup();  } else   if (job.getCurrentState() == Job.State.RUNNING && (source == userScheduler || source == userThreads) && !hasActiveTasks()) {  }  notifyCompleter();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private static String pathRemoveLast(String path,RefBoolean isOutSide){  if (path.length() == 0) {    isOutSide.setValue(true);    return "..";  } else   if (path.endsWith("..")) {    isOutSide.setValue(true);    return path.concat("/..");  }  return path.substring(0,path.lastIndexOf('/'));}  }
class C{  public int compareTo(Byte object){  return compare(value,object.value);}  }
class C{  public static void assertInterchangedArraysEquals(double[] expecteds,double[] actuals){  assertEquals("different number of elements in arrays",expecteds.length,actuals.length);  ArrayList<Integer> foundIndexes=new ArrayList<Integer>();  expactation:   for (int i=0; i < expecteds.length; i++) {    for (int j=0; j < actuals.length; j++) {      if (expecteds[i] == actuals[j] && !foundIndexes.contains(Integer.valueOf(j))) {        foundIndexes.add(Integer.valueOf(j));        continue expactation;      }    }    fail("Missing element " + expecteds[i]);  }}  }
class C{  public void processOtherContent(Wrapper<Content> content){}  }
class C{  public MaterializeBuilder withSystemUIHidden(boolean systemUIHidden){  this.mSystemUIHidden=systemUIHidden;  if (systemUIHidden) {    withFullscreen(systemUIHidden);  }  return this;}  }
class C{  public OCSPNoCheckExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.OCSPNoCheck_Id;  this.critical=critical.booleanValue();  this.extensionValue=new byte[0];}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(UpdatabilityTest.class);}  }
class C{  private boolean ruleR9(Node a,Node c){  List<List<Node>> ucPdPsToC=getUcPdPaths(a,c);  for (  List<Node> u : ucPdPsToC) {    Node b=u.get(1);    if (graph.isAdjacentTo(b,c))     continue;    if (b == c)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R9",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public String objectName(){  return objectName;}  }
class C{  public boolean isHeightBalanced(){  return isHeightBalanced(root);}  }
class C{  public static void testNonBCPRef2NonBCPRef() throws Throwable {  Class testInterface=TestInterface.class;  Class testSuperClass=TestSuperClass.class;  Class testSubClass1=TestSubClass1.class;  Class testSubClass2=TestSubClass2.class;  Object testSuperObj=new TestSuperClass();  Object testObj01=new TestSubClass1();  Object testObj02=new TestSubClass2();  Class[] parents={testInterface,testSuperClass};  Class[] children={testSubClass1,testSubClass2};  Object[] childInst={testObj01,testObj02};  for (  TestConversionMode mode : TestConversionMode.values()) {    for (    Class parent : parents) {      for (int j=0; j < children.length; j++) {        testConversion(mode,children[j],parent,childInst[j],childInst[j],false,null);        testConversion(mode,children[j],parent,null,null,false,null);        testConversion(mode,parent,children[j],testSuperObj,null,true,ClassCastException.class);        testConversion(mode,parent,children[j],childInst[j],childInst[j],false,null);        testConversion(mode,parent,children[j],null,null,false,null);      }      testConversion(mode,parent,testSubClass1,testObj02,null,true,ClassCastException.class);    }    testConversion(mode,testSubClass1,testSubClass2,testObj01,null,true,ClassCastException.class);    testConversion(mode,testSubClass1,testSubClass2,null,null,false,null);  }}  }
class C{  @Override public void valueForPathChanged(TreePath path,Object node){  fireTreeChanged(node,path);}  }
class C{  public boolean LE(Word w2){  return false;}  }
class C{  public boolean isAskForUsername(){  return askForUsername;}  }
class C{  public List<BytecodeInstruction> determineMethodCalls(){  List<BytecodeInstruction> calls=new ArrayList<BytecodeInstruction>();  for (  BytecodeInstruction ins : graph.vertexSet()) {    if (ins.isMethodCall()) {      calls.add(ins);    }  }  return calls;}  }
class C{  private boolean areRitualsSame(NecronomiconRitual ritual,int dimension,int bookType,ItemStack[] offerings,ItemStack sacrifice){  if (ritual.getDimension() == dimension || ritual.getDimension() == -1)   if (ritual.getBookType() <= bookType)   if (ritual.getOfferings() != null && offerings != null)   if (areItemStackArraysEqual(ritual.getOfferings(),offerings))   if (ritual.requiresItemSacrifice() || ritual.getSacrifice() == null && sacrifice == null || areObjectsEqual(sacrifice,ritual.getSacrifice()))   return true;  return false;}  }
class C{  public int remoteHashCode(){  return id.hashCode();}  }
class C{  public void revokeService(Class<?> serviceClass,BeanContextServiceProvider serviceProvider,boolean revokeCurrentServicesNow){  if (serviceClass == null || serviceProvider == null) {    throw new NullPointerException();  }synchronized (globalHierarchyLock) {synchronized (services) {      BCSSServiceProvider bcssProvider=(BCSSServiceProvider)services.get(serviceClass);      if (bcssProvider == null) {        return;      }      if (bcssProvider.getServiceProvider() != serviceProvider) {        throw new IllegalArgumentException(Messages.getString("beans.66"));      }      services.remove(serviceClass);      if (serviceProvider instanceof Serializable) {        serializable--;      }    }  }  fireServiceRevoked(serviceClass,revokeCurrentServicesNow);  notifyServiceRevokedToServiceUsers(serviceClass,serviceProvider,revokeCurrentServicesNow);}  }
class C{  private boolean keyMatches(RPObject obj){  if (obj instanceof HouseKey) {    final HouseKey key=(HouseKey)obj;    if (key.matches(getDoorId(),getLockNumber())) {      key.setup(getDoorId(),getLockNumber(),getOwner());      return true;    } else {      return false;    }  }  for (  RPSlot slot : obj.slots()) {    for (    RPObject subobj : slot) {      if (keyMatches(subobj)) {        return true;      }    }  }  return false;}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_ByteBuffer$ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbA,bb);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public boolean retainAll(AbstractDoubleList other){  if (!(other instanceof DoubleArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  double[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    DoubleArrayList sortedList=(DoubleArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public SmartSemicolonAutoEditStrategy(String partitioning){  fPartitioning=partitioning;}  }
class C{  public static InputStream toUTF8InputStream(String str){  InputStream is=null;  try {    is=new ByteArrayInputStream(str.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new AssertionError();  }  return is;}  }
class C{  public static <E extends Comparable<E>>void deleteNode(SingleLinkedNode<E> node){  node.item=node.next.item;  node.next=node.next.next;}  }
class C{  public boolean isLongPointerPressActionEnabled(){  return longPointerPressAction;}  }
class C{  public TwoSampleTTest(boolean independent){  super(2);  this.independent=independent;}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> result=new Vector<String>();  if (m_SplitEvaluator instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_SplitEvaluator).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      result.add(mname);    }  }  return result.elements();}  }
class C{  public boolean currentNetworkTypeIsWIFI(){  ConnectivityManager connectionManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  return connectionManager.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;}  }
class C{  public final void requestMutualAuth(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator()) {    mutualAuthState=value;  }}  }
class C{  public Path(double speed){  this();  setSpeed(speed);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  int rotation=activity.getWindowManager().getDefaultDisplay().getRotation();  byte[] rotatedData=new byte[data.length];  PlanarYUVLuminanceSource source;switch (rotation) {case Surface.ROTATION_0:    for (int x=0; x < width; x++)     for (int y=0, z=height - 1; y < height || z >= 0; y++, z--)     rotatedData[height * x + z]=data[x + y * width];  source=activity.getCameraManager().buildLuminanceSource(rotatedData,height,width);break;case Surface.ROTATION_270:for (int w=0, y=width - 1; w < width || y >= 0; w++, y--) for (int x=0, z=height - 1; x < height || z >= 0; x++, z--) rotatedData[z * width + y]=data[x * width + w];source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);break;default :source=activity.getCameraManager().buildLuminanceSource(data,width,height);break;}if (source != null) {BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));try {rawResult=multiFormatReader.decodeWithState(bitmap);} catch (ReaderException re) {} finally {multiFormatReader.reset();}}Handler handler=activity.getHandler();if (rawResult != null) {long end=System.currentTimeMillis();Log.d(TAG,"Found barcode in " + (end - start) + " ms");if (handler != null) {Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);Bundle bundle=new Bundle();bundleThumbnail(source,bundle);message.setData(bundle);message.sendToTarget();}} else {if (handler != null) {Message message=Message.obtain(handler,R.id.decode_failed);message.sendToTarget();}}}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + String.valueOf(progress)+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int match(Uri data){  String host=data.getHost();  if (host == null) {    return NO_MATCH_DATA;  }  if (false)   Log.v("IntentFilter","Match host " + host + ": "+ mHost);  if (mWild) {    if (host.length() < mHost.length()) {      return NO_MATCH_DATA;    }    host=host.substring(host.length() - mHost.length());  }  if (host.compareToIgnoreCase(mHost) != 0) {    return NO_MATCH_DATA;  }  if (mPort >= 0) {    if (mPort != data.getPort()) {      return NO_MATCH_DATA;    }    return MATCH_CATEGORY_PORT;  }  return MATCH_CATEGORY_HOST;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TR_ADDRESS_MODE_WRAP:    return "CU_TR_ADDRESS_MODE_WRAP";case CU_TR_ADDRESS_MODE_CLAMP:  return "CU_TR_ADDRESS_MODE_CLAMP";case CU_TR_ADDRESS_MODE_MIRROR:return "CU_TR_ADDRESS_MODE_MIRROR";}return "INVALID CUaddress_mode: " + n;}  }
class C{  @Specialization(guards="left.getClass() != right.getClass()") protected boolean equal(Object left,Object right){  assert !left.equals(right);  return false;}  }
class C{  @Override protected void doDelete(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isWritable(getServletContext(),req,resp)) {    return;  }  final String namespace=getNamespace(req);  if (req.getRequestURI().endsWith("/namespace/" + ConnectOptions.urlEncode(namespace))) {    doDeleteNamespace(req,resp);    return;  }  m_restServlet.doDelete(req,resp);}  }
class C{  public static Pattern compile(String regex,int flags) throws PatternSyntaxException {  return new Pattern(regex,flags);}  }
class C{  public void restoreState(RestorableSupport restorableSupport,RestorableSupport.StateObject context){  if (restorableSupport == null) {    String message=Logging.getMessage("nullValue.RestorableSupportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Double d=restorableSupport.getStateValueAsDouble(context,"x");  if (d != null)   this.setX(d);  d=restorableSupport.getStateValueAsDouble(context,"y");  if (d != null)   this.setY(d);  String s=restorableSupport.getStateValueAsString(context,"xUnits");  if (s != null)   this.setXUnits(s);  s=restorableSupport.getStateValueAsString(context,"yUnits");  if (s != null)   this.setYUnits(s);}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  private HTTPSProperties createPermissiveHTTPSProperties() throws Exception {  SSLContext sc=null;  sc=SSLContext.getInstance("TLS");  sc.init(null,trustingTrustManager,new SecureRandom());  return new HTTPSProperties(trustingHostVerifier,sc);}  }
class C{  @Override protected boolean parametersAreValid(){  return true;}  }
class C{  @Override public void clear(){  head=tail=null;  count=0;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader;  String pointerHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag;  double flowDir;  double previousFlowDir;  double linkLength;  double streamValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputFileName=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double east=streams.getEast() - gridResX / 2.0;    double west=streams.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=streams.getNorth() - gridResY / 2.0;    double south=streams.getSouth() + gridResY / 2.0;    double NSRange=north - south;    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("STRM_VAL");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("Length");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE,fields);    byte numNeighbouringStreamCells;    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        streamValue=streams.getValue(row,col);        if (streamValue > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells != 1) {            FID++;            linkLength=0;            int[] parts={0};            PointsList points=new PointsList();            x=col;            y=row;            previousFlowDir=-99;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                if (flowDir != previousFlowDir) {                  xCoord=west + ((double)x / cols) * EWRange;                  yCoord=north - ((double)y / rows) * NSRange;                  points.addPoint(xCoord,yCoord);                  previousFlowDir=flowDir;                }                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                linkLength+=gridLengths[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells > 1) {                    flag=false;                  }                }              } else {                flag=false;              }              if (!flag) {                xCoord=west + ((double)x / cols) * EWRange;                yCoord=north - ((double)y / rows) * NSRange;                points.addPoint(xCoord,yCoord);              }            } while (flag);            PolyLine line=new PolyLine(parts,points.getPointsArray());            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(streamValue);            rowData[2]=new Double(linkLength / 1000.0);            output.addRecord(line,rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    pntr.close();    streams.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public del addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static OrderByClause create(Expression... expressions){  return new OrderByClause(expressions);}  }
class C{  public static JmxManagerInfo askLocatorForJmxManager(InetAddress addr,int port,int timeout,boolean usessl) throws IOException {  SocketAddress sockaddr=new InetSocketAddress(addr,port);  Socket sock=ConnectionUtil.getSocketFactory(usessl).createSocket();  try {    sock.connect(sockaddr,timeout);    sock.setSoTimeout(timeout);    DataOutputStream out=new DataOutputStream(sock.getOutputStream());    out.writeInt(GOSSIPVERSION);    out.writeByte(DS_FIXED_ID_SHORT);    out.writeShort(JMX_MANAGER_LOCATOR_REQUEST);    out.flush();    DataInputStream in=new DataInputStream(sock.getInputStream());    byte header=in.readByte();    if (header != DS_FIXED_ID_SHORT) {      throw new IllegalStateException("Expected " + DS_FIXED_ID_SHORT + " but found "+ header);    }    int msgType=in.readShort();    if (msgType != JMX_MANAGER_LOCATOR_RESPONSE) {      throw new IllegalStateException("Expected " + JMX_MANAGER_LOCATOR_RESPONSE + " but found "+ msgType);    }    byte hostHeader=in.readByte();    String host;    if (hostHeader == NULL_STRING) {      host="";    } else     if (hostHeader == STRING_BYTES) {      int len=in.readUnsignedShort();      byte[] buf=new byte[len];      in.readFully(buf,0,len);      @SuppressWarnings("deprecation") String str=new String(buf,0);      host=str;    } else {      throw new IllegalStateException("Expected " + STRING_BYTES + " or "+ NULL_STRING+ " but found "+ hostHeader);    }    int jmport=in.readInt();    boolean ssl=in.readBoolean();    if (host.equals("")) {      jmport=0;    }    return new JmxManagerInfo(host,jmport,ssl);  }  finally {    try {      sock.close();    } catch (    Exception e) {    }  }}  }
class C{  public void runQuery(String sparql,String hdfsSaveLocation) throws IOException {  Preconditions.checkNotNull(sparql,"Sparql query cannot be null");  Preconditions.checkNotNull(hdfsSaveLocation,"Hdfs save location cannot be null");  logger.info("Running query[" + sparql + "]\n to Location["+ hdfsSaveLocation+ "]");  pigServer.deleteFile(hdfsSaveLocation);  try {    String pigScript=generatePigScript(sparql);    if (logger.isDebugEnabled()) {      logger.debug("Pig script [" + pigScript + "]");    }    pigServer.registerScript(new ByteArrayInputStream(pigScript.getBytes()));    pigServer.store("PROJ",hdfsSaveLocation);  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public String naiveBayesPredictionThresholdTipText(){  return "The number of instances (weight) a leaf should observe " + "before allowing naive Bayes (adaptive) to make predictions";}  }
class C{  public static String replaceSubstring(String inString,String subString,String replaceString){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(subString,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    result.append(replaceString);    oldLoc=loc + subString.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  public final static int readMdLinkId(final StringBuilder out,final String in,final int start){  int pos=start;  int counter=1;  while (pos < in.length()) {    final char ch=in.charAt(pos);    boolean endReached=false;switch (ch) {case '\n':      out.append(' ');    break;case '[':  counter++;out.append(ch);break;case ']':counter--;if (counter == 0) {endReached=true;} else {out.append(ch);}break;default :out.append(ch);break;}if (endReached) {break;}pos++;}return (pos == in.length()) ? -1 : pos;}  }
class C{  public CropTransformation(float widthRatio,float heightRatio){  this(widthRatio,heightRatio,GravityHorizontal.CENTER,GravityVertical.CENTER);}  }
class C{  static String formatTime(long millis){  String s=new java.sql.Time(java.sql.Time.valueOf("0:0:0").getTime() + millis).toString() + "." + ("" + (1000 + (millis % 1000))).substring(1);  if (s.startsWith("00:")) {    s=s.substring(3);  }  return s;}  }
class C{  void invoke(Method method,List args,Value value){  Value returnValue=null;  try {    returnValue=thisObject.invokeMethod(mainThread,method,args,0);  } catch (  Exception ee) {    println("Got Exception: " + ee);    ee.printStackTrace();  }  println("        return val = " + returnValue);  if (returnValue.equals(value)) {    println("         " + method.name() + " return value matches: "+ value);  } else {    if (value != null) {      failure("FAIL: " + method.name() + " returned: "+ returnValue+ " expected: "+ value);    } else {      println("         " + method.name() + " return value : "+ returnValue);    }  }  Value checkValue=(value instanceof PrimitiveValue) ? ((value instanceof BooleanValue) ? booleanValue : longValue) : objectValue;}  }
class C{  private static void waitFor(SystemProcess process,Stopwatch sw,String successFormat) throws InterruptedException {  process.waitFor();  long duration=sw.stop().elapsed(TimeUnit.MILLISECONDS);  log.info(successFormat + " in {} ms.",process,duration);}  }
class C{  @Experimental public boolean hasCompleted(){  Object o=state.get();  return nl.isCompleted(o);}  }
class C{  public static DeserializeResult<DoubleSummary> fromMemory(final Memory mem){  return new DeserializeResult<DoubleSummary>(new DoubleSummary(mem.getDouble(VALUE_DOUBLE),Mode.values()[mem.getByte(MODE_BYTE)]),SERIALIZED_SIZE_BYTES);}  }
class C{  public void prependPath(Object referrer,String fieldName){  Reference ref=new Reference(referrer,fieldName);  prependPath(ref);}  }
class C{  public final T masterNodeTimeout(String timeout){  return masterNodeTimeout(TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".masterNodeTimeout"));}  }
class C{  public LocalSettingsPanel(){  initComponents();}  }
class C{  @RequestMapping(value="/preferences",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Preferences> update(@Valid @RequestBody Preferences preferences) throws URISyntaxException {  log.debug("REST request to update Preferences : {}",preferences);  if (preferences.getId() == null) {    return create(preferences);  }  Preferences result=preferencesRepository.save(preferences);  preferencesSearchRepository.save(preferences);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("preferences",preferences.getId().toString())).body(result);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(){  final StringBuffer databaseString=new StringBuffer();  boolean addComma=false;  for (  final Database database : getDatabases()) {    if (addComma) {      databaseString.append(", ");    }    addComma=true;    databaseString.append("'" + database.getDescription() + "'");  }  return String.format("Database Manager [%s]",databaseString);}  }
class C{  public boolean hasChild(K aKey){  return (getChild(aKey) != null);}  }
class C{  public void beginDrawing(GL10 gl,float viewWidth,float viewHeight){  checkState(STATE_INITIALIZED,STATE_DRAWING);  mTexture.bind(gl);  gl.glShadeModel(GL10.GL_FLAT);  gl.glEnable(GL10.GL_BLEND);  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);  gl.glColor4x(0x10000,0x10000,0x10000,0x10000);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glOrthof(0.0f,viewWidth,0.0f,viewHeight,0.0f,1.0f);  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glTranslatef(0.375f,0.375f,0.0f);}  }
class C{  public String toString(){  String clientName="System";  if (AD_Client_ID != 0)   clientName=MClient.get(getCtx(),AD_Client_ID).getName();  String orgName="*";  if (AD_Org_ID != 0)   orgName=MOrg.get(getCtx(),AD_Org_ID).getName();  StringBuffer sb=new StringBuffer();  sb.append(Msg.translate(getCtx(),"AD_Client_ID")).append("=").append(clientName).append(" - ").append(Msg.translate(getCtx(),"AD_Org_ID")).append("=").append(orgName);  if (readOnly)   sb.append(" r/o");  return sb.toString();}  }
class C{  static void test4(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuffer sb=new StringBuffer();    int c;    for (int j=0; j < s.length(); j+=Character.charCount(c)) {      c=s.codePointAt(j);      StringBuffer rsb=sb.appendCodePoint(c);      check(sb != rsb,"appendCodePoint returned a wrong object");      int sbc=sb.codePointAt(j);      check(sbc != c,"appendCodePoint(j) != c",sbc,c);    }    check(!s.equals(sb.toString()),"appendCodePoint() produced a wrong result with input[" + i + "]");  }  testAppendCodePoint(-1,IllegalArgumentException.class);  testAppendCodePoint(Character.MAX_CODE_POINT + 1,IllegalArgumentException.class);}  }
class C{  @Override public String flushDB(){  checkIsInMultiOrPipeline();  client.flushDB();  return client.getStatusCodeReply();}  }
class C{  private static String putKmlDataToCache(GeoKmlInfo geoKmlInfo){  Map<String,Object> cacheDataModelMap=new HashMap<String,Object>();  String kmlDataModelKey=UUID.randomUUID().toString().substring(0,10);  cacheDataModelMap.put(kmlDataModelKey,geoKmlInfo);  return kmlDataModelKey;}  }
class C{  public int length(){  return this.map.size();}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  private static TranslationResult processSimpleMemoryAccessFromCompoundAddress(ITranslationEnvironment environment,IOperandTreeNode segmentOverride,OperandSize size,boolean loadOperand,TranslationResult intermediateResult){  final OperandSize archSize=environment.getArchitectureSize();  final String truncationMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  String childResult=intermediateResult.getRegister();  if (segmentOverride != null) {    final String pseudoRegister=getSegmentOverridePseudoRegister(segmentOverride);    String nextVariableString=environment.getNextVariableString();    intermediateResult.addInstruction(ReilHelpers.createAdd(0,archSize,childResult,archSize,pseudoRegister,archSize,nextVariableString));    childResult=nextVariableString;  }  final String truncatedAddress=environment.getNextVariableString();  intermediateResult.addInstruction(ReilHelpers.createAnd(0,archSize,childResult,archSize,truncationMask,archSize,truncatedAddress));  if (loadOperand) {    final String loadedValue=environment.getNextVariableString();    intermediateResult.addInstruction(ReilHelpers.createLdm(0,archSize,truncatedAddress,size,loadedValue));    intermediateResult.updateResult(loadedValue,size,truncatedAddress,TranslationResultType.MEMORY_ACCESS);  } else {    intermediateResult.updateResult(truncatedAddress,size,"",TranslationResultType.MEMORY_ACCESS);  }  return intermediateResult;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public Transform lerped(Transform end,double alpha){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  Transform tx=new Transform();  tx.rotate(a);  tx.translate(x,y);  return tx;}  }
class C{  public void removeNode(QueueListNode<T> node){synchronized (lock) {    size--;    if (head == node) {      if (tail == node) {        head=null;        tail=null;      } else {        head=node.getNext();        head.setPrev(null);      }    } else {      if (tail == node) {        tail=node.getPrev();        tail.setNext(null);      } else {        node.getPrev().setNext(node.getNext());        node.getNext().setPrev(node.getPrev());      }    }  }}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.811 -0500",hash_original_method="818EB47C54D790B2A626C59717AA13C9",hash_generated_method="AE2861DAA9D26D16EC73F49007A3C695") public void clear(){  modCount++;  size=0;  Arrays.fill(arr,0,arr.length,null);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public String sql_update(String vendorName,String catalogName,String schemaName,String tableName,String tableAlias,ArrayList<String> columnNames,ArrayList<String> values,ArrayList<String> conditions){  if (tableAlias == null || tableAlias.length() == 0)   tableAlias="t";  ArrayList<String> translatedColumnNames=null;  if (columnNames != null) {    translatedColumnNames=new ArrayList<String>();    for (    String columnName : columnNames) {      translatedColumnNames.add(normalizeColumnName(vendorName,columnName));    }  }  if (values == null) {    values=new ArrayList<String>();    for (int i=0; i < columnNames.size(); i++) {      values.add("?");    }  }  return m_interfaces.get(getDBVendorID(vendorName)).sql_update(catalogName,schemaName,tableName,tableAlias,translatedColumnNames,values,conditions);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDeinterlaceName(DShowTVPlayer.getForceDeinterlace());}  }
class C{  public void testRun(){  System.out.println("run");  Audit mockAudit=createMock(Audit.class);  expect(mockAudit.getId()).andReturn(1l).anyTimes();  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.init();  expectLastCall().once();  mockAuditCommand.loadContent();  expectLastCall().once();  mockAuditCommand.adaptContent();  expectLastCall().once();  mockAuditCommand.process();  expectLastCall().once();  mockAuditCommand.consolidate();  expectLastCall().once();  mockAuditCommand.analyse();  expectLastCall().once();  expect(mockAuditCommand.getAudit()).andReturn(mockAudit).anyTimes();  replay(mockAudit);  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  AuditServiceThreadListener auditServiceThreadListener=createMock(AuditServiceThreadListener.class);  auditServiceThreadListener.auditCompleted(instance);  expectLastCall().once();  replay(auditServiceThreadListener);  instance.add(auditServiceThreadListener);  instance.run();  verify(mockAudit);  verify(mockAuditCommand);  verify(auditServiceThreadListener);}  }
class C{  public IgniteTxRollbackCheckedException(String msg){  super(msg);}  }
class C{  public Env<A> dup(JCTree tree){  return dup(tree,this.info);}  }
class C{  Node(int symbol,int bits){  this.children=null;  this.symbol=symbol;  int b=bits & 0x07;  this.terminalBits=b == 0 ? 8 : b;}  }
class C{  public void popMatrix(){  showMethodWarning("popMatrix");}  }
class C{  private static ECPoint decompressKey(BigInteger xBN,boolean yBit){  X9IntegerConverter x9=new X9IntegerConverter();  byte[] compEnc=x9.integerToBytes(xBN,1 + x9.getByteLength(CURVE.getCurve()));  compEnc[0]=(byte)(yBit ? 0x03 : 0x02);  return CURVE.getCurve().decodePoint(compEnc);}  }
class C{  public CML deleteCML(ISicresAbstractDocumentVO document){  String id=document.getId();  Reference reference=new Reference(STORE,id,null);  Predicate predicate=new Predicate(new Reference[]{reference},null,null);  CMLDelete delete=new CMLDelete(predicate);  CML cml=new CML();  cml.setDelete(new CMLDelete[]{delete});  return cml;}  }
class C{  @SuppressWarnings("unchecked") final void signalEvent(WatchEvent.Kind<?> kind,Object context){synchronized (this) {    int size=events.size();    if (size > 1) {      if (size >= MAX_EVENT_LIST_SIZE) {        kind=StandardWatchEventKind.OVERFLOW;        context=null;      }      WatchEvent<?> prev=events.get(size - 1);      if (kind == prev.kind()) {        boolean isRepeat;        if (context == null) {          isRepeat=(prev.context() == null);        } else {          isRepeat=context.equals(prev.context());        }        if (isRepeat) {          ((Event<?>)prev).increment();          return;        }      }    }    events.add(new Event<Object>((WatchEvent.Kind<Object>)kind,context));    signal();  }}  }
class C{  public final void writeByte(int v){  write(v);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  mMenu=menu;  if (mCurrentFragmentId == Common.FOLDERS_FRAGMENT)   showFolderFragmentActionItems(FilesFoldersFragment.currentDir,getMenuInflater(),menu,false); else   showMainActivityActionItems(getMenuInflater(),menu);  return super.onCreateOptionsMenu(menu);}  }
class C{  public void stopDiscovery(){  nsdManager.stopServiceDiscovery(DiscoveryService.this);  Log.d(LOG_TAG,"stopDiscovery()");}  }
class C{  @Override public void closingDatabase(){  System.out.println("Closing the database");}  }
class C{  @NonNull public static String convertDiffToPrettyMinutesLeft(@NonNull Context context,@NonNull DateTime diffTime){  int minutes=diffTime.getMinuteOfHour();  if (minutes == 0) {    return context.getString(R.string.time_left_less_than_minute);  } else {    return context.getResources().getQuantityString(R.plurals.time_left_minutes,minutes,minutes);  }}  }
class C{  public static Function<String,JsonObject> fromString(){  JsonParser jp=new JsonParser();  return null;}  }
class C{  public static boolean autoCorrectOn(){  return "true".equals(UtilProperties.getPropertyValue("minilang.properties","autocorrect"));}  }
class C{  private String translateFunctionType(String sourceVendorName,String targetVendorName,String functionType,String functionReturnType){  if (functionType != null)   functionType=functionType.trim();  if (functionReturnType != null)   functionReturnType=functionReturnType.trim();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionType(sourceVendorName.toUpperCase(),functionType.toUpperCase(),functionReturnType);}  }
class C{  public static OutputStream encrypt(OutputStream unencryptedOutputStream,char[] password) throws EncryptionException, IOException {  OutputStream encryptedOutputStream=null;  PBEKeySpec pbeKeySpec=new PBEKeySpec(password);  PBEParameterSpec pbeParameterSpec=new PBEParameterSpec(SALT,ITERATION_COUNT);  try {    SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);    SecretKey pbeKey=secretKeyFactory.generateSecret(pbeKeySpec);    Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);    cipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParameterSpec);    encryptedOutputStream=new CipherOutputStream(unencryptedOutputStream,cipher);  } catch (  GeneralSecurityException e) {    throw new EncryptionException("There was a problem during the encryption process. See the stacktrace for details.",e);  }  return encryptedOutputStream;}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.188 -0500",hash_original_method="884D49058FBF3FAB457C152EAAE74126",hash_generated_method="0096CF7A8E8C11058C92174E45F5E004") public void close() throws IOException {  guard.close();synchronized (this) {    if (channel != null && channel.isOpen()) {      channel.close();      channel=null;    }    IoUtils.close(fd);  }}  }
class C{  private int drawLabelStringValign(Object nativeFont,String str,int x,int y,int textSpaceW,boolean isTickerRunning,int tickerShiftText,int textDecoration,boolean rtl,boolean endsWith3Points,int textWidth,int iconStringHGap,int iconHeight,int fontHeight,int valign){switch (valign) {case Component.TOP:    return drawLabelString(nativeFont,str,x,y,textSpaceW,isTickerRunning,tickerShiftText,textDecoration,rtl,endsWith3Points,textWidth,fontHeight);case Component.CENTER:  return drawLabelString(nativeFont,str,x,y + iconHeight / 2 - fontHeight / 2,textSpaceW,isTickerRunning,tickerShiftText,textDecoration,rtl,endsWith3Points,textWidth,fontHeight);default :return drawLabelString(nativeFont,str,x,y + iconStringHGap,textSpaceW,isTickerRunning,tickerShiftText,textDecoration,rtl,endsWith3Points,textWidth,fontHeight);}}  }
class C{  public void uncull(){  geomNode.getSceneHints().setCullHint(CullHint.Inherit);  geomNode.updateGeometricState(0);  lineSegment.getSceneHints().setCullHint(CullHint.Inherit);  lineSegment.updateGeometricState(0);}  }
class C{  private static String unsignedToString(final long value){  if (value >= 0) {    return Long.toString(value);  } else {    return BigInteger.valueOf(value & 0x7FFFFFFFFFFFFFFFL).setBit(63).toString();  }}  }
class C{  private int enumerateGeneric(Object[] enumeration,boolean recurse,int enumerationIndex,boolean enumeratingThreads){  if (enumeratingThreads) {synchronized (threadRefs) {      for (int i=threadRefs.size() - 1; i >= 0; --i) {        Thread thread=threadRefs.get(i).get();        if (thread != null && thread.isAlive()) {          if (enumerationIndex >= enumeration.length) {            return enumerationIndex;          }          enumeration[enumerationIndex++]=thread;        }      }    }  } else {synchronized (groups) {      for (int i=groups.size() - 1; i >= 0; --i) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumeration[enumerationIndex++]=groups.get(i);      }    }  }  if (recurse) {synchronized (groups) {      for (      ThreadGroup group : groups) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumerationIndex=group.enumerateGeneric(enumeration,recurse,enumerationIndex,enumeratingThreads);      }    }  }  return enumerationIndex;}  }
class C{  public static double quantile(double q,double[] x){  int[] indices=new int[x.length];  HeapSort.sort(x,indices);  return quantile(q,x,indices);}  }
class C{  public void resetState(){  setFromID(null);  setFromIDAlias(null);  setToID(null);  setToIDAlias(null);  setMessage(null);  setMessageType(null);}  }
class C{  @Override public Client build(){  return new MSF4JClient();}  }
class C{  public Intent putExtra(String name,double value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putDouble(name,value);  return this;}  }
class C{  public boolean hasFeedLink(){  return hasExtension(PortfolioFeedLink.class);}  }
class C{  protected boolean beforeDelete(){  String cm=getCostingMethod();  if (cm == null || !COSTELEMENTTYPE_Material.equals(getCostElementType()))   return true;  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(getCtx(),getAD_Client_ID());  for (int i=0; i < ass.length; i++) {    if (ass[i].getCostingMethod().equals(getCostingMethod())) {      log.saveError("CannotDeleteUsed",Msg.getElement(getCtx(),"C_AcctSchema_ID") + " - " + ass[i].getName());      return false;    }  }  int M_Product_Category_ID=0;  final String whereClause="CostingMethod=?";  MProductCategoryAcct retValue=new Query(getCtx(),I_M_Product_Category_Acct.Table_Name,whereClause,null).setParameters(getCostingMethod()).setClient_ID().first();  if (retValue != null)   M_Product_Category_ID=retValue.getM_Product_Category_ID();  if (M_Product_Category_ID != 0) {    log.saveError("CannotDeleteUsed",Msg.getElement(getCtx(),"M_Product_Category_ID") + " (ID=" + M_Product_Category_ID+ ")");    return false;  }  return true;}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.SHIFT_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected ActionErrors validateFechasVigencia(HttpServletRequest request,ActionErrors errors,Date fechaInicioVigencia,String fechaFinVigencia){  if (!DateUtils.isDate(fechaFinVigencia)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_FIN_VIGENCIA_PRODUCTOR,request.getLocale())));  } else   if (DateUtils.getDate(fechaFinVigencia).after(DateUtils.getFechaActual())) {    errors.add(Constants.ERROR_DATE_AFTER_TODAY,new ActionError(Constants.ERROR_DATE_AFTER_TODAY,Messages.getString(Constants.ETIQUETA_FECHA_FIN_VIGENCIA_PRODUCTOR,request.getLocale())));  } else   if (DateUtils.getDate(fechaFinVigencia).compareTo(DateUtils.getFechaSinHora(fechaInicioVigencia)) == DateUtils.FECHA_MENOR) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE_NO_BEFORE,Messages.getString(Constants.ETIQUETA_FECHA_FIN_VIGENCIA_PRODUCTOR,request.getLocale()),Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));  }  return errors;}  }
class C{  public void importM3U(Playlist playlist){  File parentFile=FileChooserHandler.getLastInputDirectory();  if (parentFile == null)   parentFile=CommonUtils.getCurrentDirectory();  final File selFile=FileChooserHandler.getInputFile(GUIMediator.getAppFrame(),I18n.tr("Open Playlist (.m3u)"),parentFile,new PlaylistListFileFilter());  if (selFile == null || !selFile.isFile())   return;  String path=selFile.getPath();  try {    path=FileUtils.getCanonicalPath(selFile);  } catch (  IOException ignored) {  }  loadM3U(playlist,selFile,path);}  }
class C{  public void onClickRemote(NotificationRemote remote,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onClickRemote - " + entry.ID);}  }
class C{  public void put(String fieldName,IonValue value){  checkForLock();  validateFieldName(fieldName);  if (value != null)   validateNewChild(value);  int lowestRemovedIndex=get_child_count();  boolean any_removed=false;  if (_field_map != null && _field_map_duplicate_count == 0) {    Integer idx=_field_map.get(fieldName);    if (idx != null) {      lowestRemovedIndex=idx.intValue();      remove_field_from_field_map(fieldName,lowestRemovedIndex);      remove_child(lowestRemovedIndex);      any_removed=true;    }  } else {    int copies_removed=0;    for (int ii=get_child_count(); ii > 0; ) {      ii--;      IonValueLite child=get_child(ii);      if (fieldName.equals(child.getFieldNameSymbol().getText())) {        remove_child(ii);        lowestRemovedIndex=ii;        copies_removed++;        any_removed=true;      }    }    if (any_removed) {      remove_field(fieldName,lowestRemovedIndex,copies_removed);    }  }  if (any_removed) {    patch_map_elements_helper(lowestRemovedIndex);    patch_elements_helper(lowestRemovedIndex);  }  if (value != null) {    add(fieldName,value);  }}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   elementData[i]=null;  size=0;}  }
class C{  public SubqueryQualifiedExpression(EPStatementObjectModel model,String operator,boolean all){  this.model=model;  this.operator=operator;  this.all=all;}  }
class C{  public void stop(){  this.setProcessState(PROCESS_STATE_STOPPED);synchronized (breakpointLock) {    breakpointLock.notifyAll();  }}  }
class C{  public synchronized void disable(){  enabled=false;}  }
class C{  public Boolean isAutoConfigurationEnabled(){  return autoConfigurationEnabled;}  }
class C{  public final void write(final byte[] data){  byteBuffer.put(data);}  }
class C{  private static CharBuffer grow(CharBuffer buf){  char[] copy=Arrays.copyOf(buf.array(),buf.capacity() * 2);  CharBuffer bigger=CharBuffer.wrap(copy);  bigger.position(buf.position());  bigger.limit(buf.limit());  return bigger;}  }
class C{  public static long decodeZigZag64(final long n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (!(pObject instanceof byte[])) {    throw new DecoderException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  @Override public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException {  if (_left instanceof FunctionCallIdentifier || _right instanceof FunctionCallIdentifier) {    raiseValidateError("user-defined function calls not supported in binary expressions",false,LanguageException.LanguageErrorCodes.UNSUPPORTED_EXPRESSION);  }  _left.validateExpression(ids,constVars,conditional);  _right.validateExpression(ids,constVars,conditional);  if (_left instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_left).getName()))   _left=constVars.get(((DataIdentifier)_left).getName());  if (_right instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_right).getName()))   _right=constVars.get(((DataIdentifier)_right).getName());  String outputName=getTempName();  DataIdentifier output=new DataIdentifier(outputName);  output.setAllPositions(this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());  output.setDataType(computeDataType(this.getLeft(),this.getRight(),true));  ValueType resultVT=computeValueType(this.getLeft(),this.getRight(),true);  if (this.getOpCode() == Expression.BinaryOp.POW || this.getOpCode() == Expression.BinaryOp.DIV) {    resultVT=ValueType.DOUBLE;  }  output.setValueType(resultVT);  checkAndSetDimensions(output,conditional);  if (this.getOpCode() == Expression.BinaryOp.MATMULT) {    if ((this.getLeft().getOutput().getDataType() != DataType.MATRIX) || (this.getRight().getOutput().getDataType() != DataType.MATRIX)) {    }    if (this.getLeft().getOutput().getDim2() != -1 && this.getRight().getOutput().getDim1() != -1 && this.getLeft().getOutput().getDim2() != this.getRight().getOutput().getDim1()) {      raiseValidateError("invalid dimensions for matrix multiplication (k1=" + this.getLeft().getOutput().getDim2() + ", k2="+ this.getRight().getOutput().getDim1()+ ")",conditional,LanguageException.LanguageErrorCodes.INVALID_PARAMETERS);    }    output.setDimensions(this.getLeft().getOutput().getDim1(),this.getRight().getOutput().getDim2());  }  this.setOutput(output);}  }
class C{  @Override public boolean isVisited(String uri){  return false;}  }
class C{  @Override public String globalInfo(){  return "Visualize incoming data/training/test sets in a scatter " + "plot matrix.";}  }
class C{  public DViewAsn1Dump(JDialog parent,X509Certificate cert) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.Certificate.Title"));  this.certificate=cert;  initComponents();}  }
class C{  private synchronized void loadMappingFromPropertiesFile(File mapFile) throws IOException {  FileInputStream fis=null;  try {    fis=new FileInputStream(mapFile);    FileLock lock=fis.getChannel().lock(0,Long.MAX_VALUE,true);    accessionToGAProps=new Properties();    accessionToGAProps.load(fis);    lock.release();  }  finally {    if (fis != null) {      fis.close();    }  }}  }
class C{  public boolean isText(){  return text != null;}  }
class C{  private <T>void testValQuery(final String cacheName,final T val1,final T val2){  final IgniteCache<Person,T> cache=ignite(0).cache(cacheName);  final Class<?> valType=val1.getClass();  final Person p1=new Person("p1");  final Person p2=new Person("p2");  cache.put(p1,val1);  cache.put(p2,val2);  final SqlQuery<Person,T> qry=new SqlQuery<>(valType,"where _val=?");  final SqlFieldsQuery fieldsQry=new SqlFieldsQuery("select * from " + valType.getSimpleName() + " where _val=?");  qry.setLocal(isLocal());  fieldsQry.setLocal(isLocal());  qry.setArgs(val1);  fieldsQry.setArgs(val1);  final List<Cache.Entry<Person,T>> res=cache.query(qry).getAll();  final List<List<?>> fieldsRes=cache.query(fieldsQry).getAll();  assertEquals(1,res.size());  assertEquals(1,fieldsRes.size());  assertEquals(p1,res.get(0).getKey());  assertEquals(val1,res.get(0).getValue());  assertTrue(fieldsRes.get(0).size() >= 2);  assertEquals(p1,fieldsRes.get(0).get(0));  assertEquals(val1,fieldsRes.get(0).get(1));}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  static public List<Sequence<IString>> tokenizeFile(String filename){  return tokenizeFile(filename,false);}  }
class C{  private static void visitEntryRecords(String streamName,LogSegmentMetadata metadata,long logSegmentSeqNo,LedgerEntry entry,ScanContext context,LogRecordSelector selector) throws IOException {  Entry.Reader reader=Entry.newBuilder().setLogSegmentInfo(logSegmentSeqNo,metadata.getStartSequenceId()).setEntryId(entry.getEntryId()).setEnvelopeEntry(metadata.getEnvelopeEntries()).setInputStream(entry.getEntryInputStream()).buildReader();  LogRecordWithDLSN nextRecord=reader.nextRecord();  while (nextRecord != null) {    LogRecordWithDLSN record=nextRecord;    nextRecord=reader.nextRecord();    context.numRecordsScanned.incrementAndGet();    if (!context.includeControl && record.isControl()) {      continue;    }    if (!context.includeEndOfStream && record.isEndOfStream()) {      continue;    }    selector.process(record);  }}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  if (c.getClass() == CopyOnWriteArraySet.class) {    @SuppressWarnings("unchecked") CopyOnWriteArraySet<E> cc=(CopyOnWriteArraySet<E>)c;    al=new CopyOnWriteArrayList<E>(cc.al);  } else {    al=new CopyOnWriteArrayList<E>();    al.addAllAbsent(c);  }}  }
class C{  public DependencyList remove(PersistentDependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't remove self as a dependency.");  _dependencyList.remove(dependency);  return this;}  }
class C{  public synchronized void fastForwardTo(long time){  if (time < currentTrackTime)   throw new IllegalArgumentException("Cannot fast forward to a previous timestamp (requested time: " + time + ", current time: "+ currentTrackTime+ ")");  time-=time % 20;  while (isReady() && currentTrackTime != time) {    provide();  }}  }
class C{  public void testSendReceive() throws Throwable {  Properties properties=new Properties();  NettyOptions nettyProperties=new NettyOptions(properties);  Transport transport=new NettyTransport(nettyProperties);  Server server=transport.server();  Client client=transport.client();  ThreadContext context=new SingleThreadContext("test-thread-%d",new Serializer());  context.executor().execute(null);  await(1000);  context.executor().execute(null);  await(1000);  context.executor().execute(null);  await(1000,2);}  }
class C{  public void identifyPatches(boolean sim){  try {    ProfilerSection section=Profiler.INSTANCE.section("Patcher");    section.start("Identify");    ArrayList<String> patches=new ArrayList<>();    InputStream is=getResourceAsStream("assets/toast/patches/patches.txt");    BufferedReader reader=new BufferedReader(new InputStreamReader(is));    String line=null;    while ((line=reader.readLine()) != null) {      patches.add(line);    }    reader.close();    section.stop("Identify");    for (    String s : patches) {      try {        if (s.endsWith(".sim") && sim) {          section.section("Simulation").start(s);          loadClass(s.replace(".sim","").replace("/","."));          section.section("Simulation").stop(s);        } else         if (s.endsWith(".pat")) {          section.section("Global").start(s);          loadClass(s.replace(".pat","").replace("/","."));          section.section("Global").stop(s);        }      } catch (      Exception e) {        ToastBootstrap.toastLogger.error("Could not load Simulation Patch: " + s);        ToastBootstrap.toastLogger.exception(e);      }    }  } catch (  Exception e) {    ToastBootstrap.toastLogger.error("Could not load patches. Ignoring...");  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void union(Rectangle2D r){  if (status == INVALID)   return;  double minx=r.getMinX();  double miny=r.getMinY();  double maxx=r.getMaxX();  double maxy=r.getMaxY();  if (Double.isNaN(minx) || Double.isNaN(miny) || Double.isNaN(maxx)|| Double.isNaN(maxy)) {    Logger.getLogger(getClass().getName()).warning("Union with invalid clip region: " + r);    return;  }  if (status == EMPTY) {    setClip(r);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],minx);  clip[1]=Math.min(clip[1],miny);  clip[6]=Math.max(clip[6],maxx);  clip[7]=Math.max(clip[7],maxy);}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  public ShortBufferException(String msg){  super(msg);}  }
class C{  @Benchmark public long test8_UsingJava8StreamApiParallel() throws IOException {  final long[] i={0};  map.entrySet().stream().parallel().forEach(null);  return i[0];}  }
class C{  public static int mainInit(final PrintStream out){  printVersion(out);  return 0;}  }
class C{  private void configureBounds(){  Drawable underlyingDrawable=getCurrent();  Rect bounds=getBounds();  int underlyingWidth=mUnderlyingWidth=underlyingDrawable.getIntrinsicWidth();  int underlyingHeight=mUnderlyingHeight=underlyingDrawable.getIntrinsicHeight();  if (underlyingWidth <= 0 || underlyingHeight <= 0) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;  } else {    underlyingDrawable.setBounds(0,0,underlyingWidth,underlyingHeight);    mDrawMatrix=mMatrix;  }}  }
class C{  public AlphaIcon(Icon icon,float alpha){  this.icon=icon;  this.alpha=alpha;}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    try {      TextDirectoryLoader loader=new TextDirectoryLoader();      loader.setOptions(args);      Instances structure=loader.getStructure();      System.out.println(structure);      Instance temp;      do {        temp=loader.getNextInstance(structure);        if (temp != null) {          System.out.println(temp);        }      } while (temp != null);    } catch (    Exception e) {      e.printStackTrace();    }  } else {    System.err.println("\nUsage:\n" + "\tTextDirectoryLoader [options]\n" + "\n"+ "Options:\n");    Enumeration<Option> enm=((OptionHandler)new TextDirectoryLoader()).listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      System.err.println(option.synopsis());      System.err.println(option.description());    }    System.err.println();  }}  }
class C{  public String debugTipText(){  return "Output debugging info";}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected static boolean lockFolderDist(Session session,AuthenticationUser user,Integer bookID,int fdrid,String entidad) throws HibernateException, Exception {  boolean result=false;  List list=ISicresQueries.getIdocfdrstat(session,bookID,fdrid);  Timestamp currentDate=DBEntityDAOFactory.getCurrentDBEntityDAO().getDBServerDate(entidad);  if (log.isDebugEnabled())   log.info("Libro [" + bookID + "] Carpeta ["+ fdrid+ "] Usuario ["+ user.getId()+ "]");  if (list != null && !list.isEmpty()) {    Idocfdrstat idoc=(Idocfdrstat)list.get(0);    if (idoc.getUserid() != user.getId().intValue() && idoc.getStat() == 1) {      result=false;      if (log.isDebugEnabled())       log.info("Bloqueada por otro usuario.");    } else {      result=true;      if (log.isDebugEnabled())       log.info("Ya bloqueada por este usuario.");    }  } else {    ISicresSaveQueries.saveIDocFdrStat(session,bookID,fdrid,user,BBDDUtils.getDate(currentDate));    result=true;    if (log.isDebugEnabled())     log.info("Bloqueo producido.");  }  return result;}  }
class C{  public static String readText(String filePath) throws IOException {  return readText(new File(filePath));}  }
class C{  public static boolean putLong(ContentResolver cr,String name,long value){  return putString(cr,name,Long.toString(value));}  }
class C{  public X509EncodedKeySpec(byte[] encodedKey){  super(encodedKey);}  }
class C{  private void toQNameMap(QNameMap<SwcScript> qNameMap,Map<String,SwcScript> scriptMap){  for (  String key : scriptMap.keySet()) {    qNameMap.put(new QName(key),scriptMap.get(key));  }}  }
class C{  public boolean isAsConnected(){  return asConnected;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LITERAL;}  }
class C{  public static EWMA fiveMinuteEWMA(){  return new EWMA(M5_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  private void readObject(){}  }
class C{  protected String testToString(int number,int id,ExecutionResult result){  boolean wasSecurityException=result.hasSecurityException();  String testInfo=getInformation(id);  StringBuilder builder=new StringBuilder();  builder.append(NEWLINE);  if (Properties.TEST_COMMENTS || testComment.containsKey(id)) {    builder.append(METHOD_SPACE);    builder.append("//");    builder.append(testInfo);    builder.append(NEWLINE);  }  String methodName=nameGenerator.getName(testCases.get(id));  if (methodName == null) {    methodName=TestSuiteWriterUtils.getNameOfTest(testCases,number);  }  builder.append(adapter.getMethodDefinition(methodName));  builder.append(" throws Throwable ");  builder.append(" {");  builder.append(NEWLINE);  String CODE_SPACE=INNER_BLOCK_SPACE;  TestCase test=testCases.get(id);  Integer pos=result.getFirstPositionOfThrownException();  if (pos != null) {    if (result.getExceptionThrownAtPosition(pos) instanceof CodeUnderTestException) {      test.chop(pos);    } else {      test.chop(pos + 1);    }  }  if (wasSecurityException) {    builder.append(BLOCK_SPACE);    builder.append("Future<?> future = " + Scaffolding.EXECUTOR_SERVICE + ".submit(new Runnable(){ ");    builder.append(NEWLINE);    builder.append(INNER_BLOCK_SPACE);    builder.append(INNER_BLOCK_SPACE);    builder.append("@Override public void run() { ");    builder.append(NEWLINE);    Set<Class<?>> exceptions=test.getDeclaredExceptions();    if (!exceptions.isEmpty()) {      builder.append(INNER_INNER_BLOCK_SPACE);      builder.append("try {");      builder.append(NEWLINE);    }    CODE_SPACE=INNER_INNER_INNER_BLOCK_SPACE;  }  for (  String line : adapter.getTestString(id,test,result.exposeExceptionMapping(),visitor).split("\\r?\\n")) {    builder.append(CODE_SPACE);    builder.append(line);    builder.append(NEWLINE);  }  if (wasSecurityException) {    Set<Class<?>> exceptions=test.getDeclaredExceptions();    if (!exceptions.isEmpty()) {      builder.append(INNER_INNER_BLOCK_SPACE);      builder.append("} catch(Throwable t) {");      builder.append(NEWLINE);      builder.append(INNER_INNER_INNER_BLOCK_SPACE);      builder.append("  // Need to catch declared exceptions");      builder.append(NEWLINE);      builder.append(INNER_INNER_BLOCK_SPACE);      builder.append("}");      builder.append(NEWLINE);    }    builder.append(INNER_BLOCK_SPACE);    builder.append("} ");    builder.append(NEWLINE);    builder.append(BLOCK_SPACE);    builder.append("});");    builder.append(NEWLINE);    long time=Properties.TIMEOUT + 1000;    builder.append(BLOCK_SPACE);    builder.append("future.get(" + time + ", TimeUnit.MILLISECONDS);");    builder.append(NEWLINE);  }  builder.append(METHOD_SPACE);  builder.append("}");  builder.append(NEWLINE);  String testCode=builder.toString();  TestGenerationResultBuilder.getInstance().setTestCase(methodName,testCode,test,testInfo,result);  return testCode;}  }
class C{  @LargeTest public void testCameraPairwiseScenario15() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.NONE,WhiteBalance.INCANDESCENT,SceneMode.AUTO,PictureSize.MEDIUM,Geotagging.ON);}  }
class C{  public static double nextLongitude(){  return nextDoubleInternal(-180,180);}  }
class C{  public boolean isDiscontinued(){  Object oo=get_Value(COLUMNNAME_Discontinued);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public <K extends GenericPK>List<T> find(AppContext app,K objectId,List<DataStoreQueryField> queryFields,List<DataStoreFilterOperator> filterOperators,Cache<K,List<PK>> cache,String orderBy){  List<PK> pkList=null;  if (cache != null) {    pkList=cache.get(objectId);  }  if (pkList == null) {    List<T> list=ds.find(app,type,queryFields,filterOperators,orderBy);    pkList=toPKList(list);    if (cache != null) {      cache.put(objectId,pkList);    }  }  List<T> list;  list=toPersistentList(app,pkList);  return list;}  }
class C{  public static void addClassLoaderListener(EnvLoaderListener listener,ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).addListener(listener);      return;    }  }  _globalLoaderListeners.add(listener);}  }
class C{  public ListGridRecord[] createListGridRecords(String[] records){  ListGridRecord[] result=new ListGridRecord[records.length - 1];  String[] fieldNames=records[0].split(";");  for (int recordIndex=1; recordIndex < records.length; ++recordIndex) {    String[] fieldValues=records[recordIndex].split(";");    result[recordIndex - 1]=new ListGridRecord();    for (int fieldIndex=0; fieldIndex < fieldValues.length; ++fieldIndex) {      result[recordIndex - 1].setAttribute(fieldNames[fieldIndex],fieldValues[fieldIndex]);    }  }  return result;}  }
class C{  private static int readSwappedInteger(final DataInputStream input) throws IOException {  final int value1=input.readByte();  final int value2=input.readByte();  final int value3=input.readByte();  final int value4=input.readByte();  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);}  }
class C{  public void msrpTransferError(String msgId,String error){  if (sLogger.isActivated()) {    sLogger.info("Data transfer error " + error + " for message ID="+ msgId);  }}  }
class C{  @Override public String toString(){  String result="DatabaseResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  private int checkZoneLink(HtmlEscapeStringBuilder out,String in,int start){  int pos=start + 3;  StringBuilder temp=new StringBuilder();  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));  boolean prevIsDash=false;  for (int i=0; i < targetString.length(); i++) {    char c=targetString.charAt(i);    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {      temp.append(c);      prevIsDash=false;    } else     if (c == '-') {      if (i == 0) {        return -1;      }      if (prevIsDash) {        temp.deleteCharAt(temp.length() - 1);        break;      }      temp.append(c);      prevIsDash=true;    } else {      if (prevIsDash) {        temp.deleteCharAt(temp.length() - 1);      }      break;    }  }  String zone=temp.toString();  if (zone.length() < 3 || zone.equalsIgnoreCase("null")) {    return -1;  }  this.config.decorator.openLink(out);  out.appendHtml(" href=\"").append("/z/").append(zone).appendHtml("\" class=\"zone-link\">").append("/z/").append(zone);  out.appendHtml("</a>");  return pos + zone.length() - 1;}  }
class C{  public byte[] languageCodeLiteral2key(final String languageCode,final String text){  assert languageCode.length() > 0;  keyBuilder.reset().append(TERM_CODE_LCL);  keyBuilder.appendASCII(languageCode.toUpperCase()).appendNul();  return keyBuilder.append(text).getKey();}  }
class C{  public FluxShellBolt(String[] command,String[] outputFields){  super(command);  this.outputFields=outputFields;}  }
class C{  public static byte[] hashToBytes(byte[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return toByteArray(hash(data,seed));}  }
class C{  public DefaultPassageFormatter(){  this("<b>","</b>","... ",false);}  }
class C{  private String[] selectOptionStringArray(String user1Id,String user2Id,String user1Name,String user2Name,boolean isOwner,boolean isPresent,String type){  String[] options;  if (type.equals(AppConstants.CommentType.COMMENTS)) {    options=new String[]{"View " + user1Name + "'s profile"};  } else   if (user1Id.equals(user2Id)) {    if (isOwner) {      options=new String[]{"View " + user1Name + "'s profile","Call " + user1Name,"Message " + user1Name};    } else {      options=new String[]{"View " + user1Name + "'s profile"};    }    if (!isPresent && isOwner) {      options=new String[]{"Call " + user1Name,"View " + user1Name + "'s profile"};    } else     if (!isPresent && !isOwner) {      options=new String[]{"View " + user2Name + "'s profile"};    }    if (type.equals(AppConstants.CommentType.CHAT)) {      options=new String[]{"View " + user1Name + "'s profile","Message " + user1Name};    }  } else {    if (isOwner) {      options=new String[]{"View " + user1Name + "'s profile","View " + user2Name + "'s profile","Call " + user1Name,"Message " + user1Name};    } else {      options=new String[]{"View " + user1Name + "'s profile","View " + user2Name + "'s profile"};    }    if (!isPresent && isOwner) {      options=new String[]{"Call " + user1Name,"View " + user2Name + "'s profile"};    } else     if (!isPresent && !isOwner) {      options=new String[]{"View " + user2Name + "'s profile"};    }    if (type.equals(AppConstants.CommentType.CHAT) && isOwner) {      options=new String[]{"View " + user1Name + "'s profile","View " + user2Name + "'s profile","Message " + user1Name};    } else     if (type.equals(AppConstants.CommentType.CHAT) && !isOwner) {      options=new String[]{"View " + user1Name + "'s profile","View " + user2Name + "'s profile"};    }  }  return options;}  }
class C{  public void check(final int api){}  }
class C{  public boolean isPerformDirectEdit(){  return performDirectEdit;}  }
class C{  public Map<String,Object> decodeAttributesEvents(final byte[] data){  final BitPackedDecoder decoder=new BitPackedDecoder(data,typeInfos,false);  final Map<String,Object> attrs=new HashMap<>();  if (!decoder.hasRemaining())   return attrs;  if (baseBuild >= 17266)   attrs.put(AttributesEvents.F_SOURCE,decoder.read_bits_int(8));  attrs.put(AttributesEvents.F_MAP_NAMESPACE,decoder.read_bits_int(32));  decoder.read_bits_int(32);  final Map<Integer,Map<Integer,Attribute>> scopes=new HashMap<>();  attrs.put(AttributesEvents.F_SCOPES,scopes);  final byte[] valueBuff=new byte[4];  while (decoder.hasRemaining()) {    final Attribute attr=new Attribute();    attr.namespace=decoder.read_bits_int(32);    attr.id=decoder.read_bits_int(32);    attr.scope=decoder.read_bits_int(8);    decoder.byte_align();    int lastZeroIdx=-1;    for (int i=3; i >= 0; i--) {      if ((valueBuff[i]=(byte)decoder.read_bits_int(8)) == '\0')       if (lastZeroIdx < 0)       lastZeroIdx=i;    }    attr.value=lastZeroIdx < 0 ? new String(valueBuff,0,4,Env.UTF8) : new String(valueBuff,lastZeroIdx + 1,3 - lastZeroIdx,Env.UTF8);    Map<Integer,Attribute> scope=scopes.get(attr.scope);    if (scope == null)     scopes.put(attr.scope,scope=new HashMap<>());    scope.put(attr.id,attr);  }  return attrs;}  }
class C{  protected void paintControl(final PaintEvent e){  final GC gc=e.gc;  gc.setAdvanced(true);  gc.setAntialias(SWT.ON);  final int width=getSize().x;  final int height=getSize().y;  drawBorders(gc,width,height);  final Iterator<RoundedToolItem> it=items.iterator();  int x=0;  while (it.hasNext()) {    final RoundedToolItem item=it.next();    item.drawButton(gc,x,height,!it.hasNext());    x+=item.getWidth();  }}  }
class C{  public static final void main(String[] args){  if (args.length == 0) {    System.err.println("usage: filename");    System.exit(1);  }  final String config=args[0];  log.info("config: " + config);  JiniFederation fed=null;  try {    fed=new JiniClient(args).connect();    createTripleStore(fed);    BigdataWriter writer=new BigdataWriter(fed);    BigdataReader reader=new BigdataReader(fed);    Future writerFuture=fed.getExecutorService().submit(writer);    Future readerFuture=fed.getExecutorService().submit(reader);    writerFuture.get();    reader.kill();    readerFuture.get();  } catch (  Exception ex) {    ex.printStackTrace();  } finally {    if (fed != null)     fed.shutdown();  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.814 -0400",hash_original_method="58A7A50486EDC9346A5D459542A5BDB7",hash_generated_method="56B74626BE81A12F04EB89EA486FC9FD") @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processByte();}  }
class C{  public static void initialize(Context context){  InternalNetworking.setClientWithCache(context.getApplicationContext());  ANRequestQueue.initialize();  ANImageLoader.initialize();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredCovariant: ");  result.append(declaredCovariant);  result.append(", declaredContravariant: ");  result.append(declaredContravariant);  result.append(')');  return result.toString();}  }
class C{  public boolean performOperation(int generation){  return true;}  }
class C{  protected Record(ModelRecord modelRecord){  if (modelRecord == null)   throw new IllegalArgumentException("Cannont create a Record with a null modelRecord parameter");  this.recordName=modelRecord.name;  this.modelRecord=modelRecord;  this.fields=new HashMap<String,Object>();}  }
class C{  private void checkSimple(String key) throws Exception {  for (int i=INIT_GRID_NUM; i < MAX_GRID_NUM; i++) {    startGrid(i);    assert PARTITIONED == grid(i).cache(null).getConfiguration(CacheConfiguration.class).getCacheMode();    try (Transaction tx=grid(i).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){      Integer val=(Integer)grid(i).cache(null).get(key);      assertEquals("Simple check failed for node: " + i,(Integer)i,val);      grid(i).cache(null).put(key,i + 1);      tx.commit();    }     stopGrid(i);  }}  }
class C{  private static long parseMdhd(ParsableByteArray mdhd){  mdhd.setPosition(Mp4Util.ATOM_HEADER_SIZE);  int fullAtom=mdhd.readInt();  int version=Mp4Util.parseFullAtomVersion(fullAtom);  mdhd.skip(version == 0 ? 8 : 16);  return mdhd.readUnsignedInt();}  }
class C{  public CompositeListener removeListener(String listenerName){  int rows=getNumListeners();  for (int i=0; i < rows; i++) {    JAMonListener listener=(JAMonListener)listenerList.get(i);    String name=listener.getName();    if (listenerName.equalsIgnoreCase(name)) {      listenerList.remove(i);      break;    } else     if (listener instanceof CompositeListener && ((CompositeListener)listener).hasListener(listenerName)) {      ((CompositeListener)listener).removeListener(listenerName);      break;    }  }  return this;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testMultivariateCondMIForNewObservations() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedOneStepNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  System.out.println("Kraskov Cond MI testing new Observations:");  for (int ki=0; ki < kNNs.length; ki++) {    ConditionalMutualInfoCalculatorMultiVariateKraskov condMiCalc=getNewCalc(1);    ConditionalMutualInfoCalculatorMultiVariateKraskov condMiCalcForNew=getNewCalc(1);    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    condMiCalcForNew.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    double[][] var1=MatrixUtils.selectColumns(data,new int[]{0});    double[][] var2=MatrixUtils.selectColumns(data,new int[]{1});    double[][] condVar=MatrixUtils.selectColumns(data,new int[]{2,3});    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs[ki]));    System.out.println("Main calc normalisation is " + condMiCalc.getProperty(condMiCalc.PROP_NORMALISE));    condMiCalc.initialise(var1[0].length,var2[0].length,condVar[0].length);    condMiCalc.setObservations(var1,var2,condVar);    double miAverage=condMiCalc.computeAverageLocalOfObservations();    condMiCalcForNew.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs[ki] + 1));    System.out.println("New obs calc normalisation is " + condMiCalcForNew.getProperty(condMiCalc.PROP_NORMALISE));    condMiCalcForNew.initialise(var1[0].length,var2[0].length,condVar[0].length);    condMiCalcForNew.setObservations(var1,var2,condVar);    double[] newLocals=condMiCalcForNew.computeLocalUsingPreviousObservations(var1,var2,condVar);    double averageFromNewObservations=MatrixUtils.mean(newLocals);    for (int t=0; t < data.length; t++) {      double[] originalNeighbourCounts=condMiCalc.partialComputeFromObservations(t,1,false);      double[] newObsNeighbourCounts=condMiCalcForNew.partialComputeFromNewObservations(t,1,MatrixUtils.normaliseIntoNewArray(var1),MatrixUtils.normaliseIntoNewArray(var2),MatrixUtils.normaliseIntoNewArray(condVar),false);      if (originalNeighbourCounts[1] != newObsNeighbourCounts[1] - 1) {        System.out.println("Assertion failure for t=" + t + ": expected "+ originalNeighbourCounts[1]+ " from original, plus 1, but got "+ newObsNeighbourCounts[1]);        System.out.print("Actual raw data was: ");        MatrixUtils.printArray(System.out,data[0]);      }      assertEquals(originalNeighbourCounts[1],newObsNeighbourCounts[1] - 1);      assertEquals(originalNeighbourCounts[2],newObsNeighbourCounts[2] - 1);      assertEquals(originalNeighbourCounts[3],newObsNeighbourCounts[3] - 1);      double newLocalValue=condMiCalcForNew.digammaK - MathsUtils.digamma((int)newObsNeighbourCounts[1] + 1) - MathsUtils.digamma((int)newObsNeighbourCounts[2] + 1) + MathsUtils.digamma((int)newObsNeighbourCounts[3] + 1);      if (Math.abs(newLocalValue - newLocals[t]) > 0.00000001) {        System.out.printf("t=%d: Assertion failed: computed local was %.5f, local from nn counts was %.5f\n",t,newLocals[t],newLocalValue);      }      assertEquals(newLocalValue,newLocals[t],0.00000001);    }  }}  }
class C{  public SpringWriteTemplate(){}  }
class C{  public JsonObjectRequest(int method,String url,String requestBody,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  private KeyInfo resolveReferentKeyInfo(Element element,String baseURI,StorageResolver storage) throws XMLSecurityException {  KeyInfoReference reference=new KeyInfoReference(element,baseURI);  Attr uriAttr=reference.getURIAttr();  XMLSignatureInput resource=resolveInput(uriAttr,baseURI,secureValidation);  Element referentElement=null;  try {    referentElement=obtainReferenceElement(resource);  } catch (  Exception e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"XMLSecurityException",e);    }    return null;  }  if (referentElement == null) {    log.log(java.util.logging.Level.FINE,"De-reference of KeyInfoReference URI returned null: " + uriAttr.getValue());    return null;  }  validateReference(referentElement);  KeyInfo referent=new KeyInfo(referentElement,baseURI);  referent.addStorageResolver(storage);  return referent;}  }
class C{  public Object clone(){  OpenDoubleIntHashMap copy=(OpenDoubleIntHashMap)super.clone();  copy.table=(double[])copy.table.clone();  copy.values=(int[])copy.values.clone();  copy.state=(byte[])copy.state.clone();  return copy;}  }
class C{  public static File showOpenFile(FileDataStoreFactorySpi format,File initialDir,Shell parent){  JFileDataStoreChooser dialog=new JFileDataStoreChooser(parent,SWT.OPEN,format);  FileDialog fileDialogInternal=dialog.getFileDialog();  if (initialDir != null) {    if (initialDir.isDirectory()) {      fileDialogInternal.setFilterPath(initialDir.getAbsolutePath());    } else {      fileDialogInternal.setFilterPath(initialDir.getParentFile().getAbsolutePath());    }  }  fileDialogInternal.open();  String filePath=fileDialogInternal.getFileName();  File file=new File(filePath);  return file;}  }
class C{  @SuppressWarnings("unchecked") public static <U,I>Function<U,Predicate<I>> and(Function<U,Predicate<I>>... filters){  return null;}  }
class C{  private static int addToBuffer(Writer out,char[] buffer,int bufferIndex,int bufferLength,char ch) throws IOException {  if (bufferIndex >= bufferLength) {    out.write(buffer,0,bufferIndex);    bufferIndex=0;  }  buffer[bufferIndex]=ch;  return bufferIndex + 1;}  }
class C{  public final void quickPop(int n){  m_firstFree-=n;}  }
class C{  private void calculateDataSets(){  final boolean showBuilds=showBuildCmdsCheckBox.isSelected();  final boolean showTrains=showTrainCmdsCheckBox.isSelected();  final boolean showWorkers=showWorkerCmdsCheckBox.isSelected();  final boolean showUpgrades=showUpgradeCmdsCheckBox.isSelected();  final boolean showOthersEssential=showOtherEssentialCmdsCheckBox.isSelected();  final boolean showOthersRest=showOtherRestCmdsCheckBox.isSelected();  for (  final Event event : repProc.replay.gameEvents.events) {    if (event.id != IGameEvents.ID_CMD)     continue;    final DataModel<CommandsChartDataSet> model=modelByUserIds[event.userId];    if (model == null)     continue;    final CmdEvent ce=(CmdEvent)event;    if (ce.command == null)     continue;    if (ce.command instanceof TrainCommand) {      if (showTrains)       if (showWorkers || !((TrainCommand)ce.command).isWorker())       model.getDataSetList().get(0).cmdEventLists.add(ce);    } else     if (ce.command instanceof BuildCommand) {      if (showBuilds)       model.getDataSetList().get(0).cmdEventLists.add(ce);    } else     if (ce.command instanceof UpgradeCommand) {      if (showUpgrades)       model.getDataSetList().get(0).cmdEventLists.add(ce);    } else {      if (ce.command.isEssential()) {        if (showOthersEssential)         model.getDataSetList().get(0).cmdEventLists.add(ce);      } else {        if (showOthersRest)         model.getDataSetList().get(0).cmdEventLists.add(ce);      }    }  }  for (  final Chart<CommandsChartDataSet> chart : chartList) {    for (    final DataModel<CommandsChartDataSet> model : chart.getDataModelList()) {      final CommandsChartDataSet ds=model.getDataSetList().get(0);      int builds=0;      int trains=0;      int workers=0;      int upgrades=0;      int othersEssential=0;      int othersRest=0;      for (      final CmdEvent ce : ds.cmdEventLists)       if (ce.command instanceof TrainCommand) {        trains++;        if (showWorkers && ((TrainCommand)ce.command).isWorker())         workers++;      } else       if (ce.command instanceof BuildCommand)       builds++; else       if (ce.command instanceof UpgradeCommand)       upgrades++; else {        if (ce.command.isEssential())         othersEssential++; else         othersRest++;      }      final StringBuilder sb=new StringBuilder();      if (showBuilds)       sb.append("Builds: ").append(builds);      if (showTrains) {        if (sb.length() > 0)         sb.append(",    ");        sb.append("Trains: ").append(trains);        if (showWorkers)         sb.append(" (").append("Workers: ").append(workers).append(")");      }      if (showUpgrades) {        if (sb.length() > 0)         sb.append(",    ");        sb.append("Upgrades: ").append(upgrades);      }      if (showOthersEssential) {        if (sb.length() > 0)         sb.append(",    ");        sb.append("Others (Essential): ").append(othersEssential);      }      if (showOthersRest) {        if (sb.length() > 0)         sb.append(",    ");        sb.append("Others (Rest): ").append(othersRest);      }      if (sb.length() > 0)       ds.setTitle(sb.toString());    }  }}  }
class C{  public void newRound(Context context){  this.context=context;  this.log=Log.instance(context);  clearRoundState();}  }
class C{  public void addFilter(Filter filter){  fState.addFilter(filter);  refresh(true,false);}  }
class C{  public void antialiasing(final int ulx,final int uly,final int lrx,final int lry,final int bgcolor){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_ANTIALIASING,bgcolor);}  }
class C{  public int hashCode(){  int result=17;  if (isDestroyed()) {    return result;  }  result=37 * result + Arrays.hashCode(getEncoded());  result=37 * result + getKeyType();  if (principal != null) {    result=37 * result + principal.hashCode();  }  return result * 37 + versionNum;}  }
class C{  public RectF toCameraSpace(RectF source){  RectF result=new RectF();  mPreviewToCameraTransform.mapRect(result,source);  return result;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (qName.equals("title") && xmlTags.peek().equals("entry")) {    insideEntryTitle=true;    System.out.print("Item " + ++itemNo + ": ");  }  xmlTags.push(qName);}  }
class C{  protected boolean stepsEqual(WalkingIterator iter1,WalkingIterator iter2,int numSteps){  AxesWalker aw1=iter1.getFirstWalker();  AxesWalker aw2=iter2.getFirstWalker();  for (int i=0; (i < numSteps); i++) {    if ((null == aw1) || (null == aw2))     return false;    if (!aw1.deepEquals(aw2))     return false;    aw1=aw1.getNextWalker();    aw2=aw2.getNextWalker();  }  assertion((null != aw1) || (null != aw2),"Total match is incorrect!");  return true;}  }
class C{  public static String clearLastViewedCategories(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session != null) {    session.setAttribute("lastViewedCategories",FastList.newInstance());  }  return "success";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Sage.getBoolean("enable_server",SageConstants.PVR));}  }
class C{  public void run(){  super.run();  try {    loadInMemoryDatabase();    int stepInstancesCreatedByLoadStep=createStepInstances();    while (!shutdownCalled) {      boolean completed=true;      for (      StepInstance stepInstance : stepInstanceDAO.retrieveUnfinishedStepInstances()) {        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("Iterating over StepInstances: Currently on " + stepInstance);        }        if (stepInstance.hasFailedPermanently(jobs)) {          unrecoverableErrorStrategy.failed(stepInstance,jobs);        }        completed&=stepInstance.haveFinished(jobs);        if (stepInstance.canBeSubmitted(jobs) && stepInstanceDAO.serialGroupCanRun(stepInstance,jobs)) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Step submitted:" + stepInstance);          }          final boolean resubmission=stepInstance.getExecutions().size() > 0;          if (resubmission) {            LOGGER.warn("StepInstance " + stepInstance.getId() + " is being re-run following a failure.");          }          final Step step=stepInstance.getStep(jobs);          final boolean canRunRemotely=!step.isRequiresDatabaseAccess();          final boolean highMemory=resubmission && workerRunnerHighMemory != null && canRunRemotely;          if (highMemory) {            LOGGER.warn("StepInstance " + stepInstance.getId() + " will be re-run in a high-memory worker.");          }          final int priority=step.getSerialGroup() == null || step instanceof WriteFastaFileStep ? 4 : 8;          messageSender.sendMessage(stepInstance,highMemory,priority,canRunRemotely);          final String temporaryDirectoryName=(temporaryDirectoryManager == null) ? null : temporaryDirectoryManager.getReplacement();          if (highMemory) {            LOGGER.warn("Starting a high memory worker.");            workerRunnerHighMemory.startupNewWorker(priority,tcpUri,temporaryDirectoryName);          } else           if (canRunRemotely && workerRunner != null) {            workerRunner.startupNewWorker(priority,tcpUri,temporaryDirectoryName);          }        }      }      if (completed && stepInstanceDAO.retrieveUnfinishedStepInstances().size() == 0) {        if (stepInstanceDAO.count() > stepInstancesCreatedByLoadStep && stepInstanceDAO.retrieveUnfinishedStepInstances().size() == 0) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("There are no step instances left to run, so about to break out of loop in Master.\n\nStatistics: ");            LOGGER.debug("Step instances left to run: " + stepInstanceDAO.retrieveUnfinishedStepInstances().size());            LOGGER.debug("Total StepInstances: " + stepInstanceDAO.count());          }          break;        } else {          LOGGER.info("Apparently have no more unfinished StepInstances, however it looks like there should be...");          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Step instances left to run: " + stepInstanceDAO.retrieveUnfinishedStepInstances().size());            LOGGER.debug("Total StepInstances: " + stepInstanceDAO.count());          }        }      }      Thread.sleep(50);    }  } catch (  JMSException e) {    LOGGER.error("JMSException thrown by DistributedBlackBoxMasterOLD: ",e);  }catch (  Exception e) {    LOGGER.error("Exception thrown by DistributedBlackBoxMasterOLD: ",e);  }  databaseCleaner.closeDatabaseCleaner();  LOGGER.debug("Ending");}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public void replaceComment(Comment comment){  List<IEndlessAdaptable> items=getItems();  for (int i=0; i < items.size(); ++i) {    IEndlessAdaptable item=items.get(i);    if (item instanceof Comment) {      Comment c=(Comment)item;      if (c.getId() == comment.getId()) {        items.set(i,comment);        notifyItemChanged(comment);        return;      }    }  }  Log.w(CommentAdapter.class.getSimpleName(),"Comment with " + comment.getId() + " not found to update");}  }
class C{  @Deprecated public AccountHeaderBuilder withSelectionFistLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  public boolean isReadWrite(){  return readWrite;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=NetscapeCertType_Id;    this.critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public static ChainingXmlMemoryParser parseXml(String xml){  return new ChainingXmlMemoryParser(xml);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.REACTION_EFFECT__ACTIONS:    return ((InternalEList<?>)getActions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public final MutableDouble2D subtractIn(Double2D other){  x=x - other.x;  y=y - other.y;  return this;}  }
class C{  public XSOMParser(SAXParserFactory factory){  this(new JAXPParser(factory));}  }
class C{  public GlowInventoryView(HumanEntity player,InventoryType type,Inventory top,Inventory bottom){  this.player=player;  this.type=type;  this.top=top;  this.bottom=bottom;}  }
class C{  public MultiSelectionSpinner(Context context){  super(context);  simple_adapter=new ArrayAdapter<>(context,android.R.layout.simple_spinner_item);  super.setAdapter(simple_adapter);}  }
class C{  public String subfolder(){  return this.subfolder;}  }
class C{  public int count(){  return m_extFlds.size();}  }
class C{  @Deprecated public void loadUrl(final String url,int time){  if (url == null) {    this.loadUrlIntoView(Config.getStartUrl());  } else {    this.loadUrlIntoView(url);  }}  }
class C{  public static void applyStoredDisplaySettings(Stage stage,String name){  try {    if (PREFERENCES.nodeExists(name)) {      Preferences stagePreferences=PREFERENCES.node(name);      boolean wasMaximized=stagePreferences.getBoolean(WINDOW_MAXIMIZED,false);      if (wasMaximized) {        stage.setMaximized(true);      } else {        stage.setX(stagePreferences.getDouble(WINDOW_X_POS,DEFUALT_X));        stage.setY(stagePreferences.getDouble(WINDOW_Y_POS,DEFUALT_Y));        stage.setWidth(stagePreferences.getDouble(WINDOW_WIDTH,DEFUALT_WIDTH));        stage.setHeight(stagePreferences.getDouble(WINDOW_HEIGHT,DEFUALT_HEIHGT));      }    }  } catch (  BackingStoreException ex) {    LOGGER.error(ex,"Could not access preferences for window " + name);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.MAPPED_ELEMENT;}  }
class C{  @Override public boolean isReadOnly(int column) throws SQLException {  try {    debugCodeCall("isReadOnly",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void processPingRequest(SimEvent ev){  InfoPacket pkt=(InfoPacket)ev.getData();  pkt.setTag(CloudSimTags.INFOPKT_RETURN);  pkt.setDestId(pkt.getSrcId());  sendNow(pkt.getSrcId(),CloudSimTags.INFOPKT_RETURN,pkt);}  }
class C{  public boolean isBeaconFound(){  return isLeftKnown() && isRightKnown();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.653 -0500",hash_original_method="A629704DD43A1871A6A3CE469581E96B",hash_generated_method="2B90D17DC577F0EEFB1B5F7D9D1D4021") public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("Null params ");  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  protected static boolean isUnreserved(char c){  return isAlpha(c) || isDigit(c) || c == '-' || c == '.' || c == '_' || c == '~';}  }
class C{  public static void removePlugins(String interfaceName,List<String> names){  for (  String name : names) {    removePlugin(interfaceName,name);  }}  }
class C{  public void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs) throws BadLocationException {  if (text == null)   text="";  text=replaceMetaCharacters(text);  fb.replace(offset,length,text,attrs);  parseDocument(offset,text.length());}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  @Override public void dispose(){}  }
class C{  private static CommonNavigator findCommonNavigator(String navigatorViewId){  IWorkbenchPage page=UIHelper.getActivePage();  if (page != null) {    IViewPart findView=UIHelper.getActivePage().findView(navigatorViewId);    if (findView != null && findView instanceof CommonNavigator) {      return ((CommonNavigator)findView);    }  }  return null;}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof EllipticCurve)) {    return false;  }  EllipticCurve otherEc=(EllipticCurve)other;  return this.field.equals(otherEc.field) && this.a.equals(otherEc.a) && this.b.equals(otherEc.b)&& Arrays.equals(this.seed,otherEc.seed);}  }
class C{  public DataSet simulateData(int sampleSize,boolean latentDataSaved){  return simulateDataReducedForm(sampleSize,latentDataSaved);}  }
class C{  public void testContinuousMode() throws Exception {  processTestBothNodesDeploy(DeploymentMode.CONTINUOUS);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void desCbcDecrypt(WrapToken token,byte[] key,byte[] cipherText,int offset,int len,byte[] dataOutBuf,int dataOffset) throws GSSException {  try {    int temp=0;    Cipher des=getInitializedDes(false,key,ZERO_IV);    temp=des.update(cipherText,offset,WrapToken.CONFOUNDER_SIZE,token.confounder);    offset+=WrapToken.CONFOUNDER_SIZE;    len-=WrapToken.CONFOUNDER_SIZE;    int blockSize=des.getBlockSize();    int numBlocks=len / blockSize - 1;    for (int i=0; i < numBlocks; i++) {      temp=des.update(cipherText,offset,blockSize,dataOutBuf,dataOffset);      offset+=blockSize;      dataOffset+=blockSize;    }    byte[] finalBlock=new byte[blockSize];    des.update(cipherText,offset,blockSize,finalBlock);    des.doFinal();    int padSize=finalBlock[blockSize - 1];    if (padSize < 1 || padSize > 8)     throw new GSSException(GSSException.DEFECTIVE_TOKEN,-1,"Invalid padding on Wrap Token");    token.padding=WrapToken.pads[padSize];    blockSize-=padSize;    System.arraycopy(finalBlock,0,dataOutBuf,dataOffset,blockSize);  } catch (  GeneralSecurityException e) {    GSSException ge=new GSSException(GSSException.FAILURE,-1,"Could not use DES cipher - " + e.getMessage());    ge.initCause(e);    throw ge;  }}  }
class C{  public IrrelevantTypeAnnotator(AnnotatedTypeFactory typeFactory,Set<? extends AnnotationMirror> annotations,Class<?>[] relevantClasses){  super(typeFactory);  this.annotations=annotations;  this.arraysAreRelevant=false;  this.relevantTypes=new ArrayList<>(relevantClasses.length);  for (  Class<?> clazz : relevantClasses) {    if (clazz.equals(Object[].class)) {      arraysAreRelevant=true;    } else {      relevantTypes.add(TypesUtils.typeFromClass(typeFactory.getContext().getTypeUtils(),typeFactory.getElementUtils(),clazz));    }  }  this.allFoundRelevantTypes=Collections.newSetFromMap(CollectionUtils.<TypeMirror,Boolean>createLRUCache(300));}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>TriFunction<T4,T5,T6,R> partial6(final T1 t1,final T2 t2,final T3 t3,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  public void reload(){synchronized (PROPS) {    for (    SettingsGroup group : PROPS) {      group.reload();    }  }  fireSettingsHandlerEvent(EventType.RELOAD,null);}  }
class C{  public void disableTouch(boolean disableTouch){  this.disableTouch=disableTouch;}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType){  return getAnnotation(annotationType) != null;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (derivedFeatureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:      return ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public net.minecraft.world.chunk.Chunk provideChunk(int i,int i1){  return provider.provideChunk(i,i1);}  }
class C{  public List<List<String>> buildPartitionFilters(List<PartitionValueFilter> partitionValueFilters,PartitionValueFilter standalonePartitionValueFilter,BusinessObjectFormatKey businessObjectFormatKey,Integer businessObjectDataVersion,List<String> storageNames,String storagePlatformType,String excludedStoragePlatformType,BusinessObjectFormatEntity businessObjectFormatEntity){  List<PartitionValueFilter> partitionValueFiltersToProcess=getPartitionValuesToProcess(partitionValueFilters,standalonePartitionValueFilter);  Map<Integer,List<String>> partitionValues=new HashMap<>();  for (int i=0; i < BusinessObjectDataEntity.MAX_SUBPARTITIONS + 1; i++) {    partitionValues.put(i,NULL_VALUE_LIST);  }  for (  PartitionValueFilter partitionValueFilter : partitionValueFiltersToProcess) {    String partitionKey=StringUtils.isNotBlank(partitionValueFilter.getPartitionKey()) ? partitionValueFilter.getPartitionKey() : businessObjectFormatEntity.getPartitionKey();    int partitionColumnPosition=getPartitionColumnPosition(partitionKey,businessObjectFormatEntity);    List<String> uniqueAndSortedPartitionValues=getPartitionValues(partitionValueFilter,partitionKey,partitionColumnPosition,businessObjectFormatKey,businessObjectDataVersion,storageNames,storagePlatformType,excludedStoragePlatformType,businessObjectFormatEntity);    List<String> previousPartitionValues=partitionValues.put(partitionColumnPosition - 1,uniqueAndSortedPartitionValues);    if (!NULL_VALUE_LIST.equals(previousPartitionValues)) {      throw new IllegalArgumentException("Partition value filters specify duplicate partition columns.");    }  }  List<String[]> crossProductResult=getCrossProduct(partitionValues);  List<List<String>> partitionFilters=new ArrayList<>();  for (  String[] crossProductRow : crossProductResult) {    partitionFilters.add(Arrays.asList(crossProductRow));  }  return partitionFilters;}  }
class C{  private String sshKeyAttributeName(String host,int i){  return (i == PRIVATE ? PRIVATE_KEY_ATTRIBUTE_PREFIX : PUBLIC_KEY_ATTRIBUTE_PREFIX) + host;}  }
class C{  public byte[] toByteArray(){  byte[] toBuf=new byte[count];  System.arraycopy(buf,0,toBuf,0,count);  return toBuf;}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,int length) throws SQLException {  updateAsciiStream(columnIndex,x,(long)length);}  }
class C{  private void verifyExports(FileShare fs,FileExportUpdateParam param,String permissions,String securityType,String rootUserMapping,String path){  Boolean allowedPermission=false;  for (  Permissions me : Permissions.values()) {    if (me.name().equalsIgnoreCase(permissions)) {      allowedPermission=true;      break;    }  }  if (!allowedPermission) {    throw APIException.badRequests.invalidPermissionType(permissions);  }  Boolean allowedsecurityType=false;  for (  SecurityTypes secType : SecurityTypes.values()) {    if (secType.name().equalsIgnoreCase(securityType)) {      allowedsecurityType=true;      break;    }  }  if (!allowedsecurityType) {    throw APIException.badRequests.invalidSecurityType(securityType);  }  FSExportMap fsExports=fs.getFsExports();  URI id=fs.getId();  if (null != fsExports) {    Iterator<FileExport> it=fs.getFsExports().values().iterator();    while (it.hasNext()) {      FileExport fileExport=it.next();      boolean isAlreadyExportedToSameEndpoint=false;      if (fileExport.getPath().equals(path)) {        List<String> availableEndpoints=fileExport.getClients();        List<String> providedEndpoints=param.getAdd();        for (        String providedEndpoint : providedEndpoints) {          if (availableEndpoints.contains(providedEndpoint)) {            isAlreadyExportedToSameEndpoint=true;            break;          }        }        if (isAlreadyExportedToSameEndpoint) {          _log.info(String.format("Existing Export params for FileShare id: %1$s,  SecurityType: %2$s, " + "Permissions: %3$s, Root user mapping: %4$s, ",id,fileExport.getSecurityType(),fileExport.getPermissions(),fileExport.getRootUserMapping()));          _log.info(String.format("Recieved Export params for FileShare id: %1$s,  SecurityType: %2$s, " + "Permissions: %3$s, Root user mapping: %4$s, ",id,securityType,permissions,rootUserMapping));          if (!fileExport.getPermissions().equals(permissions)) {            throw APIException.badRequests.updatingFileSystemExportNotAllowed("permission");          }          if (!fileExport.getSecurityType().equals(securityType)) {            throw APIException.badRequests.updatingFileSystemExportNotAllowed("security type");          }          if (!fileExport.getRootUserMapping().equals(rootUserMapping)) {            throw APIException.badRequests.updatingFileSystemExportNotAllowed("root user mapping");          }        }      }    }  }}  }
class C{  private void replaceUpdateFields(final QueryStringBuilder builder,final String userName,final boolean shared,final QueryLanguage queryLanguage,final String queryText,final boolean infer,final int rowsPerPage){  builder.replaceQuote(USER_NAME,userName);  builder.replace("$<shared>",QueryStringBuilder.xsdQuote(String.valueOf(shared),"boolean"));  builder.replaceQuote("$<queryLanguage>",queryLanguage.toString());  checkQueryText(queryText);  builder.replace("$<queryText>",QueryStringBuilder.quote(queryText,"'''","'''"));  builder.replace("$<infer>",QueryStringBuilder.xsdQuote(String.valueOf(infer),"boolean"));  builder.replace("$<rowsPerPage>",QueryStringBuilder.xsdQuote(String.valueOf(rowsPerPage),"unsignedByte"));}  }
class C{  protected synchronized void activate(){  activate(true);}  }
class C{  @SuppressWarnings("unused") public UnsupportedIO(DataflowRunner runner,PubsubIO.Write.Bound<?>.PubsubBoundedWriter doFn){  this.doFn=doFn;}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  void freeReadLock(){synchronized (READ_LOCK) {    isReadLocked=false;    READ_LOCK.notifyAll();  }}  }
class C{  private void unknown(Player player,String action,String params){  player.sendPrivateText(NotificationType.ERROR,"Unknown group action: " + action + " with parameters "+ params);}  }
class C{  public static Bitmap imgToBitmap(final byte[] image){  if (image == null)   return null;  return BitmapFactory.decodeByteArray(image,0,image.length);}  }
class C{  @Override public void run(){  if (schedule == null) {    throw new RuntimeException("No schedule defined!");  } else   if (network == null) {    throw new RuntimeException("No network defined!");  }  setLogLevels();  config.loadParameterSets();  log.info("======================================");  log.info("Mapping transit schedule to network...");  Set<String> scheduleTransportModes=new HashSet<>();  int nStopFacilities=schedule.getFacilities().size();  int nTransitRoutes=0;  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      scheduleTransportModes.add(transitRoute.getTransportMode());      nTransitRoutes++;    }  }  log.info("==============================================");  log.info("Creating mode separated network and routers...");  Map<String,Set<String>> modeRoutingAssignment=config.getModeRoutingAssignment();  FastAStarRouter.setTravelCostType(config.getTravelCostType());  for (  String scheduleMode : scheduleTransportModes) {    log.info("Initiating network and router for schedule mode \"" + scheduleMode + "\", network modes "+ modeRoutingAssignment.get(scheduleMode));    modeSeparatedRouters.put(scheduleMode,FastAStarRouter.createModeSeparatedRouter(network,modeRoutingAssignment.get(scheduleMode)));  }  log.info("===========================");  log.info("Creating link candidates...");  LinkCandidateCreator linkCandidates=new LinkCandidateCreatorStandard(this.schedule,this.network,this.config,this.modeSeparatedRouters);  linkCandidates.createLinkCandidates();  log.info("==================================");  log.info("Calculating pseudoTransitRoutes... (" + nTransitRoutes + " transit routes in "+ schedule.getTransitLines().size()+ " transit lines)");  int numThreads=config.getNumOfThreads() > 0 ? config.getNumOfThreads() : 1;  PseudoRouting[] pseudoRoutingRunnables=new PseudoRouting[numThreads];  for (int i=0; i < numThreads; i++) {    pseudoRoutingRunnables[i]=new PseudoRoutingImpl(config,modeSeparatedRouters,linkCandidates);  }  int thr=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    pseudoRoutingRunnables[thr++ % numThreads].addTransitLineToQueue(transitLine);  }  Thread[] threads=new Thread[numThreads];  for (int i=0; i < numThreads; i++) {    threads[i]=new Thread(pseudoRoutingRunnables[i]);    threads[i].start();  }  for (  Thread thread : threads) {    try {      thread.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  log.info("=====================================");  log.info("Adding artificial links to network...");  for (  PseudoRouting prt : pseudoRoutingRunnables) {    prt.addArtificialLinks(network);    pseudoSchedule.mergePseudoSchedule(prt.getPseudoSchedule());  }  log.info("========================================================================");  log.info("Replacing parent StopFacilities in schedule with child StopFacilities...");  pseudoSchedule.createAndReplaceFacilities(schedule);  log.info("===========================================================================================");  log.info("Initiating final routers to map transit routes with referenced facilities to the network...");  Map<String,Router> finalRouters=new HashMap<>();  for (  String scheduleMode : scheduleTransportModes) {    Set<String> routingTransportModes=new HashSet<>(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE_AS_SET);    if (modeRoutingAssignment.get(scheduleMode) != null)     routingTransportModes.addAll(modeRoutingAssignment.get(scheduleMode));    log.info("Initiating network and router for schedule mode \"" + scheduleMode + "\", network modes "+ routingTransportModes);    finalRouters.put(scheduleMode,FastAStarRouter.createModeSeparatedRouter(network,routingTransportModes));  }  log.info("=============================================");  log.info("Creating link sequences for transit routes...");  ScheduleTools.routeSchedule(this.schedule,this.network,finalRouters);  log.info("================================");  log.info("Pulling child stop facilities...");  int nPulled=1;  while (nPulled != 0) {    nPulled=PTMapperUtils.pullChildStopFacilitiesTogether(this.schedule,this.network);  }  log.info("=============================");  log.info("Clean schedule and network...");  cleanScheduleAndNetwork();  log.info("======================");  log.info("Validating schedule...");  printValidateSchedule();  log.info("=======================================");  log.info("Writing schedule and network to file...");  writeOutputFiles();  log.info("==================================================");  log.info("= Mapping transit schedule to network completed! =");  log.info("==================================================");  printStatistics(nStopFacilities);}  }
class C{  public RIOptimisticProvider(){  providerID=this.getClass().getName();  reader=new CachedRowSetReader();  writer=new CachedRowSetWriter();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != null && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public FrameSlot findOrAddFrameSlot(Object identifier,Object info,FrameSlotKind kind){  FrameSlot result=findFrameSlot(identifier);  if (result != null) {    return result;  }  return addFrameSlot(identifier,info,kind);}  }
class C{  public boolean isSetUserid(){  return this.userid != null;}  }
class C{  private List<Instruction> reduceInstructionsInternal(final List<Instruction> instructions){  final List<Instruction> visitedInstructions=new LinkedList<>();  final Set<Integer> visitedInstructionPositions=new HashSet<>();  final Set<Integer> handledLoadIndexes=new HashSet<>();  final Set<Integer> backtrackPositions=new LinkedHashSet<>(findSortedBacktrackPositions());  while (!visitedInstructionPositions.containsAll(backtrackPositions)) {    final int backtrackPosition=backtrackPositions.stream().filter(null).findFirst().orElseThrow(null);    final List<Integer> lastVisitedPositions=stackSizeSimulator.simulateStatementBackwards(backtrackPosition);    final List<Instruction> lastVisitedInstructions=lastVisitedPositions.stream().map(null).collect(Collectors.toList());    visitedInstructionPositions.addAll(lastVisitedPositions);    visitedInstructions.addAll(lastVisitedInstructions);    final Set<Integer> unhandledLoadIndexes=findUnhandledLoadIndexes(handledLoadIndexes,lastVisitedInstructions);    final SortedSet<Integer> loadStoreBacktrackPositions=findLoadStoreBacktrackPositions(unhandledLoadIndexes);    handledLoadIndexes.addAll(unhandledLoadIndexes);    loadStoreBacktrackPositions.stream().forEach(null);  }  Collections.reverse(visitedInstructions);  return visitedInstructions;}  }
class C{  protected int addHeaderToOutput(byte[] msg,AbstractMRMessage m){  return 0;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static Match.Builder createRetentiveBuilder(Match m){  Match.Builder mb=m.createBuilder();  Iterator<MatchField<?>> itr=m.getMatchFields().iterator();  while (itr.hasNext()) {    MatchField mf=itr.next();    if (m.isExact(mf)) {      mb.setExact(mf,m.get(mf));    } else     if (m.isPartiallyMasked(mf)) {      mb.setMasked(mf,m.getMasked(mf));    } else {    }  }  return mb;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:36.391 -0500",hash_original_method="1EC8CD1C7675CE6AC38524566B03F520",hash_generated_method="6ED8D306BB225918A9D9A28D4BF26E13") public static boolean isUuidPresent(ParcelUuid[] uuidArray,ParcelUuid uuid){  if ((uuidArray == null || uuidArray.length == 0) && uuid == null)   return true;  if (uuidArray == null)   return false;  for (  ParcelUuid element : uuidArray) {    if (element.equals(uuid))     return true;  }  return false;}  }
class C{  public void updateDirty(){  dirtyTimeStamp++;  if (dirtyTimeStamp == Integer.MAX_VALUE) {    clearDirty();  }}  }
class C{  public ClickEvent(Action action,String value){  this.action=action;  this.value=value;}  }
class C{  public void windowListChanged(){  createWindowMenu();}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public void removeEventFromPrev(EventBean oldEvent){  if (randomAccess != null) {    randomAccess.remove(oldEvent);  }}  }
class C{  static int formatUnsignedInt(int val,int shift,char[] buf,int offset,int len){  int charPos=len;  int radix=1 << shift;  int mask=radix - 1;  do {    buf[offset + --charPos]=Integer.digits[val & mask];    val>>>=shift;  } while (val != 0 && charPos > 0);  return charPos;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public BasicAttribute(String id,boolean ordered){  attrID=id;  values=new Vector<>();  this.ordered=ordered;}  }
class C{  public void addImport(@NotNull PsiElement importable,@NotNull PsiFileSystemItem file,@Nullable QualifiedName path){  myImports.add(new ImportCandidateHolder(importable,file,null,path));}  }
class C{  public void handle(LdapServerList allServers,LdapOrADServer disconnectedServer){  allServers.markAsDisConnected(disconnectedServer);}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public BaseModule create(String type,String subtype){  if (Cfg.DEBUG) {    Check.requires(type != null,"Null type");  }  BaseModule a=new NullModule();  if (factorymap.containsKey(type))   try {    Class cl=factorymap.get(type);    return (BaseModule)cl.newInstance();  } catch (  IllegalAccessException e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (create) Error: " + e);    }  }catch (  InstantiationException e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (create) Error: " + e);    }  }  return a;}  }
class C{  public synchronized void sendCommand(ARDrone drone,ControllerButton button) throws IOException {  List<AssignableControl> commands=map.get(button);  if (commands == null) {    return;  }  for (Iterator<AssignableControl> it=commands.iterator(); it.hasNext(); ) {    final AssignableControl assignableCommand=it.next();    if (assignableCommand.getDelay() > 0) {      delayCommand(assignableCommand,drone);    } else {      assignableCommand.sendToDrone(drone);    }  }}  }
class C{  public DefaultDeployableFactory(){  this(null);}  }
class C{  public void mkdir(String directory){  Util.getImplementation().mkdir(directory);}  }
class C{  public void testAddLimit() throws Exception {  PrefetchSqlTransformer pst=new PrefetchSqlTransformer();  String[] queries={"select * from foo","SELECT count(*) FROM foo ORDER by id ascending"};  for (  String q1 : queries) {    String q2=pst.addLimitToQuery(q1,1);    assertTrue("Length: " + q1,q2.length() > q1.length());    assertTrue("Contents: " + q1,q2.toLowerCase().contains("limit 1"));    String q3=pst.addLimitToQuery(q1,0);    assertEquals("limit 0: " + q1,q1,q3);  }}  }
class C{  public void clearCache(){  VdcUtil.invalidateVdcUrnCache();  clientCache.clear();}  }
class C{  public int compareDates(ZonedDateTime otherDate){  return this.getZonedDateTime().compareTo(otherDate);}  }
class C{  public void schedule(Runnable command,long delay,long tolerance,TimeUnit unit){  if (delay < 0 || tolerance < 0) {    throw new IllegalArgumentException();  }  long triggerPoint=clock.now() + unit.toMillis(delay);  scheduledTasks.add(new ScheduledRunnable(command,triggerPoint,unit.toMillis(tolerance)));  if (signal.compareAndSet(false,true)) {    selector.wakeup();  }}  }
class C{  public InventoryMessage(NetworkParameters params,byte[] payload,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payload,serializer,length);}  }
class C{  public DriverTask deleteVolume(StorageVolume volume){  DellSCDriverTask task=new DellSCDriverTask("deleteVolume");  try {    StorageCenterAPI api=connectionManager.getConnection(volume.getStorageSystemId());    api.deleteVolume(volume.getNativeId());    task.setStatus(TaskStatus.READY);    LOG.info("Deleted volume '{}'",volume.getNativeId());  } catch (  DellSCDriverException|StorageCenterAPIException dex) {    String error=String.format("Error deleting volume %s",volume.getNativeId(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  public AdapterPathSegment lastSegment(){  return (!mSegments.isEmpty()) ? (mSegments.get(mSegments.size() - 1)) : null;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  public ShardId shardId(){  return shardId;}  }
class C{  public static void serializeByte(byte val,byte[] buffer,MutableInt offset){  buffer[offset.intValue()]=val;  offset.add(Type.BYTE.getByteSize());}  }
class C{  public static void main(final String[] args) throws IOException, UnindexableDataException {  if (args.length == 3) {    BamIndexer.saveBamIndexNoHeader(new File(args[0]),new File(args[1]),true,Integer.parseInt(args[2]));  } else {    BamIndexer.saveBamIndex(new File(args[0]),new File(args[1]));  }}  }
class C{  public void testHadoopCommandLine() throws Exception {  assertEquals(0,executeHadoopCmd("fs","-ls","/"));  assertEquals(0,executeHadoopCmd("fs","-mkdir","/input"));  assertEquals(0,executeHadoopCmd("fs","-put",new File(testWorkDir,"test-data").getAbsolutePath(),"/input"));  assertTrue(igfs.exists(new IgfsPath("/input/test-data")));  assertEquals(0,executeHadoopCmd("jar",examplesJar.getAbsolutePath(),"wordcount","/input","/output"));  IgfsPath path=new IgfsPath("/user/" + System.getProperty("user.name") + "/");  assertTrue(igfs.exists(path));  IgfsPath jobStatPath=null;  for (  IgfsPath jobPath : igfs.listPaths(path)) {    assertNull(jobStatPath);    jobStatPath=jobPath;  }  File locStatFile=new File(testWorkDir,"performance");  assertEquals(0,executeHadoopCmd("fs","-get",jobStatPath.toString() + "/performance",locStatFile.toString()));  long evtCnt=HadoopTestUtils.simpleCheckJobStatFile(new BufferedReader(new FileReader(locStatFile)));  assertTrue(evtCnt >= 22);  assertTrue(igfs.exists(new IgfsPath("/output")));  BufferedReader in=new BufferedReader(new InputStreamReader(igfs.open(new IgfsPath("/output/part-r-00000"))));  List<String> res=new ArrayList<>();  String line;  while ((line=in.readLine()) != null)   res.add(line);  Collections.sort(res);  assertEquals("[blue\t150, green\t200, red\t100, yellow\t50]",res.toString());}  }
class C{  public static void createClientCache1(String hostName,Integer port) throws Exception {  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  new EventIdOptimizationDUnitTest().createCache(props);  AttributesFactory factory=new AttributesFactory();  ClientServerTestCase.configureConnectionPool(factory,hostName,port.intValue(),-1,true,-1,2,null);  final CacheServer bs1=cache.addCacheServer();  bs1.setPort(port.intValue());  pool=(PoolImpl)PoolManager.find("testPool");}  }
class C{  public AuthScope(final AuthScope authscope){  super();  if (authscope == null) {    throw new IllegalArgumentException("Scope may not be null");  }  this.host=authscope.getHost();  this.port=authscope.getPort();  this.realm=authscope.getRealm();  this.scheme=authscope.getScheme();}  }
class C{  @BeforeClass public static void makeZip() throws IOException {  distZip=zip(new byte[8 * 1024]);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.createNewDataFile();    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setDisplayMaximum(1);    output.setDisplayMinimum(0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String quoteJavaString(String s){  if (s == null) {    return "null";  }  return "\"" + javaEncode(s) + "\"";}  }
class C{  public boolean isSetKeys(){  return this.keys != null;}  }
class C{  public CopyAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public void forgetFfmpegPath(){  settings.put(SETTINGS_FFMPEG_PATH,FFMPEG_PATH_UNSET);}  }
class C{  private void fetchUsersServiceCardsFromServer(String userId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(ApiResponseCodes.GET_USERS_SERVICES);  retroCallbackList.add(retroCallback);  mYeloApi.getUsersServiceCards(userId,retroCallback);}  }
class C{  public static Boolean[] toReferenceType(boolean[] primArr){  Boolean[] refArr=new Boolean[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=Caster.toBoolean(primArr[i]);  return refArr;}  }
class C{  public static int[] toIntArray(byte[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  private String populateFormData(final Boolean fromInbox){  LOGGER.debug("Entered into populateFormData");  String target="";  PropertyImpl propertyImpl=null;  if (basicProp.isUnderWorkflow() && !fromInbox) {    final List<String> msgParams=new ArrayList<String>();    if (PROPERTY_MODIFY_REASON_BIFURCATE.equalsIgnoreCase(modifyRsn))     msgParams.add(PROPERTY_BIFURCATION); else     if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equalsIgnoreCase(modifyRsn))     msgParams.add(PROPERTY_ALTER_ADDITION); else     msgParams.add(PROPERTY_GENERAL_REVISION_PETITION);    setWfErrorMsg(getText(WF_PENDING_MSG,msgParams));    target=TARGET_WORKFLOW_ERROR;  } else {    if (PROPERTY_MODIFY_REASON_BIFURCATE.equalsIgnoreCase(modifyRsn) && !fromInbox) {      final Map<String,BigDecimal> propertyTaxDetails=propService.getCurrentPropertyTaxDetails(basicProp.getActiveProperty());      Map<String,BigDecimal> currentTaxAndDue=propertyService.getCurrentTaxAndBalance(propertyTaxDetails,new Date());      currentPropertyTax=currentTaxAndDue.get(CURR_DMD_STR);      currentPropertyTaxDue=currentTaxAndDue.get(CURR_BAL_STR);      arrearPropertyTaxDue=propertyTaxDetails.get(ARR_DMD_STR).subtract(propertyTaxDetails.get(ARR_COLL_STR));      currentWaterTaxDue=propertyService.getWaterTaxDues(basicProp.getUpicNo());      if (currentWaterTaxDue.add(currentPropertyTaxDue).add(arrearPropertyTaxDue).longValue() > 0) {        setTaxDueErrorMsg(getText(TAXDUES_ERROR_MSG,new String[]{BIFURCATION}));        return BALANCE;      }    }    boolean hasChildPropertyUnderWorkflow=propertyTaxUtil.checkForParentUsedInBifurcation(basicProp.getUpicNo());    if (hasChildPropertyUnderWorkflow) {      setWfErrorMsg(getText("error.msg.child.underworkflow"));      return TARGET_WORKFLOW_ERROR;    }    setOldProperty((PropertyImpl)getBasicProp().getProperty());    if (propWF == null && (propertyModel == null || propertyModel.getId() == null))     propertyImpl=(PropertyImpl)oldProperty.createPropertyclone(); else     propertyImpl=propWF != null ? propWF : propertyModel;    setProperty(propertyImpl);    setOwnerName(basicProp.getFullOwnerName());    setPropAddress(basicProp.getAddress().toString());    propertyAddr=basicProp.getAddress();    corrsAddress=PropertyTaxUtil.getOwnerAddress(basicProp.getPropertyOwnerInfo());    if (propertyAddr.getHouseNoBldgApt() != null)     setHouseNo(propertyAddr.getHouseNoBldgApt().toString());    if (propertyModel.getPropertyDetail().getFloorType() != null)     floorTypeId=propertyModel.getPropertyDetail().getFloorType().getId();    if (propertyModel.getPropertyDetail().getRoofType() != null)     roofTypeId=propertyModel.getPropertyDetail().getRoofType().getId();    if (propertyModel.getPropertyDetail().getWallType() != null)     wallTypeId=propertyModel.getPropertyDetail().getWallType().getId();    if (propertyModel.getPropertyDetail().getWoodType() != null)     woodTypeId=propertyModel.getPropertyDetail().getWoodType().getId();    if (propertyModel.getPropertyDetail().getSitalArea() != null)     setAreaOfPlot(propertyModel.getPropertyDetail().getSitalArea().getArea().toString());    if (basicProp.getPropertyID() != null) {      final PropertyID propertyID=basicProp.getPropertyID();      northBoundary=propertyID.getNorthBoundary();      southBoundary=propertyID.getSouthBoundary();      eastBoundary=propertyID.getEastBoundary();      westBoundary=propertyID.getWestBoundary();    }    final PropertyTypeMaster propertyType=propertyModel.getPropertyDetail().getPropertyTypeMaster();    propTypeId=propertyType.getId().toString();    setOldPropertyTypeCode(oldProperty.getPropertyDetail().getPropertyTypeMaster().getCode());    if (propertyModel.getPropertyDetail().getPropertyUsage() != null)     propUsageId=propertyModel.getPropertyDetail().getPropertyUsage().getId().toString();    if (propertyModel.getPropertyDetail().getPropertyOccupation() != null)     propOccId=propertyModel.getPropertyDetail().getPropertyOccupation().getId().toString();    setDocNumber(propertyModel.getDocNumber());    if (propertyModel.getPropertyDetail().getFloorDetails().size() > 0)     setFloorDetails(propertyModel);    target=NEW;  }  LOGGER.debug("populateFormData - target : " + target + "\n Exiting from populateFormData");  return target;}  }
class C{  public N node(Object key,Collection<N> inc){  return node(key,inc,null);}  }
class C{  public SplitCasesAction(DataEditor editor){  super("Split Data by Cases");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public static ListNode insertionSortList(ListNode head){  if (head == null || head.next == null)   return head;  ListNode pre=new ListNode(0);  pre.next=head;  for (ListNode p=head.next, prev=head; p != null; prev=p, p=p.next) {    for (ListNode c=pre; c.next != p; c=c.next) {      if (c.next.val > p.val) {        prev.next=p.next;        p.next=c.next;        c.next=p;        p=prev;        break;      }    }  }  return pre.next;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @NotNull public SqlQuery build(){  if (query.length() == 0)   throw new IllegalStateException("empty query");  return SqlQuery.query(query.toString(),new ArrayList<>(arguments));}  }
class C{  protected void writeShort(int value) throws IOException {  out.write(value & 0xff);  out.write((value >> 8) & 0xff);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void intervalAdded(ListDataEvent e){}  }
class C{  private void createTempTable() throws SQLException {  executeStatement(QUERY_CREATE_TEMP_TABLE);  executeStatement(QUERY_REMOVE_TEMP_ENTRIES);}  }
class C{  protected float unwrapKey(Object key){  return ((Float)key).floatValue();}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public boolean isValidationEnabled(){  if (coordinator != null) {    return Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(coordinator,VALIDATION_CHECK_PROPERTY));  } else {    log.error("Bean wiring error: Coordinator not set, therefore validation will default to true.");  }  return true;}  }
class C{  protected WebDriver createWebDriverWithTimeout(){  long time=0;  while (time < getTimeout()) {    try {      driver=createNativeDriver();      return driver;    } catch (    WebDriverException ex) {      if (ex.getMessage().contains("SocketException") || ex.getMessage().contains("Failed to connect to binary FirefoxBinary") || ex.getMessage().contains("Unable to bind to locking port 7054 within 45000 ms")) {        try {          Thread.sleep(1000);        } catch (        InterruptedException e) {        }        time++;      } else {        throw new RuntimeException(ex);      }    }  }  throw new RuntimeException("Got customexception when creating webDriver with socket timeout 1 minute");}  }
class C{  public static Object calculateGuess(JCExpression expr){  if (expr instanceof JCLiteral) {    JCLiteral lit=(JCLiteral)expr;    if (lit.getKind() == com.sun.source.tree.Tree.Kind.BOOLEAN_LITERAL) {      return ((Number)lit.value).intValue() == 0 ? false : true;    }    return lit.value;  } else   if (expr instanceof JCIdent || expr instanceof JCFieldAccess) {    String x=expr.toString();    if (x.endsWith(".class"))     x=x.substring(0,x.length() - 6); else {      int idx=x.lastIndexOf('.');      if (idx > -1)       x=x.substring(idx + 1);    }    return x;  } else   return null;}  }
class C{  public ObjectMatrix2D make(int rows,int columns){  if (this == sparse)   return new SparseObjectMatrix2D(rows,columns); else   return new DenseObjectMatrix2D(rows,columns);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(LABEL);  builder.addAttribute(PRIMARY);  builder.addAttribute(REL);  builder.addAttribute(URI);}  }
class C{  private void removeAllNodes(@Nullable Object key){  Iterators.clear(new ValueForKeyIterator(key));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private CellEntry actuallySetCell(int row,int col,String valueOrFormula){  try {    CellEntry entry=new CellEntry(row,col,valueOrFormula);    return service.insert(cellFeedUrl,entry);  } catch (  IOException ioe) {    SpreadsheetApiDemo.showErrorBox(ioe);    return null;  }catch (  ServiceException se) {    SpreadsheetApiDemo.showErrorBox(se);    return null;  }}  }
class C{  public void addInputMode(String mode,String[][] inputChars){  modesMap.put(mode,inputChars);}  }
class C{  public XPath createXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.SELECT,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  @FromString public static Seconds parseSeconds(String periodStr){  if (periodStr == null) {    return Seconds.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Seconds.seconds(p.getSeconds());}  }
class C{  public boolean isWarning(){  return fSeverity == IStatus.WARNING;}  }
class C{  public boolean hasPrimary(){  return getPrimary() != null;}  }
class C{  @Override public boolean onJsConfirm(WebView view,String url,String message,JsResult result){  String logMsg=String.format("JS Confirmation '%s' received from %s",message,url);  Log.w(TAG,logMsg);  result.confirm();  return true;}  }
class C{  public TwoDCircle(TwoDPoint origin,double radius){  this.origin=origin;  this.radius=radius;}  }
class C{  public void use(int ID){  Long thisLong=new Long(new java.util.Date().getTime());  cacheUsage.put("" + ID,thisLong);}  }
class C{  public void testVerifyJBossHomeWhenEmptyDirectory() throws Exception {  this.fsManager.resolveFile("ram:///jboss/bin").createFolder();  try {    this.container.verifyJBossHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid JBoss installation. The [ram:///jboss/bin] directory is empty " + "and it shouldn't be. Make sure the JBoss container home directory you have " + "specified points to the right location (It's currently pointing to "+ "[ram:///jboss])",expected.getMessage());  }}  }
class C{  @SuppressWarnings("unchecked") private void doStorageTests(SolrResourceLoader loader,StorageIO storageIO) throws Exception {  String resourceId="/test/foo";  JsonStorage jsonStorage=new JsonStorage(storageIO,loader);  Map<String,String> managedInitArgs=new HashMap<>();  managedInitArgs.put("ignoreCase","true");  managedInitArgs.put("dontIgnoreCase","false");  List<String> managedList=new ArrayList<>();  managedList.addAll(Arrays.asList("a","b","c","d","e"));  Map<String,Object> toStore=new HashMap<>();  toStore.put(ManagedResource.INIT_ARGS_JSON_FIELD,managedInitArgs);  toStore.put(ManagedResource.MANAGED_JSON_LIST_FIELD,managedList);  jsonStorage.store(resourceId,toStore);  String storedResourceId=jsonStorage.getStoredResourceId(resourceId);  assertTrue(storedResourceId + " file not found!",storageIO.exists(storedResourceId));  Object fromStorage=jsonStorage.load(resourceId);  assertNotNull(fromStorage);  Map<String,Object> storedMap=(Map<String,Object>)fromStorage;  Map<String,Object> storedArgs=(Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);  assertNotNull(storedArgs);  assertEquals("true",storedArgs.get("ignoreCase"));  List<String> storedList=(List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertNotNull(storedList);  assertTrue(storedList.size() == managedList.size());  assertTrue(storedList.contains("a"));  managedInitArgs.put("anotherArg","someValue");  managedList.add("f");  jsonStorage.store(resourceId,toStore);  fromStorage=jsonStorage.load(resourceId);  assertNotNull(fromStorage);  storedMap=(Map<String,Object>)fromStorage;  storedArgs=(Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);  assertNotNull(storedArgs);  assertEquals("someValue",storedArgs.get("anotherArg"));  storedList=(List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertNotNull(storedList);  assertTrue(storedList.size() == managedList.size());  assertTrue(storedList.contains("e"));}  }
class C{  private boolean addGroupToGroup(String tenantName,PrincipalId groupId,String groupName) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(groupId,"Group ID");    ValidateUtil.validateNotEmpty(groupName,"Group name");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    if (provider.findGroup(groupId) == null) {      Group group=findGroup(tenantName,groupId);      if (group != null) {        validateObjectIdNotNull(group);        PrincipalId newGroupId=getFspIdForSystemDomain(provider,group);        return provider.addGroupToGroup(newGroupId,groupName);      }    }    return provider.addGroupToGroup(groupId,groupName);  } catch (  Exception ex) {    logger.error(String.format("Failed to add group [%s@%s] to group [%s] in tenant [%s]",groupId != null ? groupId.getName() : "null",groupId != null ? groupId.getDomain() : "null",groupName,tenantName));    throw ex;  }}  }
class C{  private void clearAttacks(){  if (ce() == null) {    return;  }  Enumeration<EntityAction> i=attacks.elements();  while (i.hasMoreElements()) {    Object o=i.nextElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);    }  }  attacks.removeAllElements();  removeTempAttacks();  ce().setSecondaryFacing(ce().getFacing());  ce().setArmsFlipped(false);}  }
class C{  protected void sequence_ArrayTypeRef(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static ExistentialTypeRef createExistentialTypeRef(TypeVariable typeVar,Wildcard wildcard){  final ExistentialTypeRef etr=TypeRefsFactory.eINSTANCE.createExistentialTypeRef();  etr.setWildcard(wildcard);  etr.setBoundTypeVariable(typeVar);  return etr;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean isStickyDrag(){  return false;}  }
class C{  public static Vector2d dFdxLinear(double v0X,double v0Y,double f0X,double f0Y,double v1X,double v1Y,double f1X,double f1Y,double v2X,double v2Y,double f2X,double f2Y,Vector2d dest){  double v12Y=v1Y - v2Y;  double v02Y=v0Y - v2Y;  double den=v12Y * (v0X - v2X) + (v2X - v1X) * v02Y;  double l3_1=den - v12Y + v02Y;  double invDen=1.0f / den;  dest.x=invDen * (v12Y * f0X - v02Y * f1X + l3_1 * f2X) - f2X;  dest.y=invDen * (v12Y * f0Y - v02Y * f1Y + l3_1 * f2Y) - f2Y;  return dest;}  }
class C{  static Operator groupIndexCreationPlan(Schema schema,GroupIndex groupIndex){  StoreGIMaintenance.BranchTables branchTables=branchTablesRootToLeaf(schema,groupIndex);  Operator plan=API.groupScan_Default(groupIndex.getGroup());  plan=API.filter_Default(plan,branchTables.fromRoot());  RowType parentRowType=null;  API.JoinType joinType=API.JoinType.RIGHT_JOIN;  EnumSet<API.FlattenOption> flattenOptions=EnumSet.noneOf(API.FlattenOption.class);  final API.JoinType withinGIJoin;switch (groupIndex.getJoinType()) {case LEFT:    withinGIJoin=API.JoinType.LEFT_JOIN;  break;case RIGHT:withinGIJoin=API.JoinType.RIGHT_JOIN;break;default :throw new AssertionError(groupIndex.getJoinType().name());}for (RowType branchRowType : branchTables.fromRoot()) {if (parentRowType == null) {parentRowType=branchRowType;} else {plan=API.flatten_HKeyOrdered(plan,parentRowType,branchRowType,joinType,flattenOptions);parentRowType=plan.rowType();}if (branchRowType.equals(branchTables.rootMost())) {joinType=withinGIJoin;}}return plan;}  }
class C{  public Intent putIntegerArrayListExtra(String name,ArrayList<Integer> value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putIntegerArrayList(name,value);  return this;}  }
class C{  public InvitationExample(InvitationObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getToken() != null) {    criteria.andTokenEqualTo(sample.getToken());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getEmail() != null) {    criteria.andEmailEqualTo(sample.getEmail());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }}  }
class C{  public void printContext(PrintWriter out){  out.println(getMessage());  out.print(context);}  }
class C{  public SnackbarWrapper appendMessage(@StringRes int message){  return appendMessage(context.getString(message));}  }
class C{  protected void initIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("initIntensity(" + intensity + ")");  }}  }
class C{  @Override public void focusOn(final IShape geometry){}  }
class C{  public DnsName(String name) throws InvalidNameException {  parse(name);}  }
class C{  @XmlElement(required=true,name="retryable") public boolean isRetryable(){  return retryable;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  private void calculateTermFrequencies(List<PatternReference> patterns,Set<Word> terms){  patterns.forEach(null);}  }
class C{  public void updateBytes(String columnName,byte x[]) throws SQLException {  updateBytes(findColumn(columnName),x);}  }
class C{  public static XContent xContent(byte[] data){  return xContent(data,0,data.length);}  }
class C{  public CreateAccountDialog(final Frame owner,final StendhalClient client){  super(owner,true);  this.client=client;  initializeComponent(owner);  WindowUtils.closeOnEscape(this);  this.setVisible(true);}  }
class C{  public RRset[] answers(){  if (type != SUCCESSFUL)   return null;  List l=(List)data;  return (RRset[])l.toArray(new RRset[l.size()]);}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  public Void doInBackground(){  try {    grandtotal=tradingdays.getTradingdays().size();    this.startTime=System.currentTimeMillis();    int totalComplete=0;    getProgressBar().setMaximum(100);    setProgress(0);    String message=null;    Collections.sort(tradingdays.getTradingdays(),Tradingday.DATE_ORDER_ASC);    for (    Tradingday tradingday : tradingdays.getTradingdays()) {      this.tradeManagerModel.removeTradingdayTradeOrders(tradingday);      totalComplete++;      int percent=(int)(((double)(totalComplete) / grandtotal) * 100d);      setProgress(percent);    }    setProgress(100);    message="Completed delete of Trade Order data total days processed: " + totalComplete + " in : "+ ((System.currentTimeMillis() - this.startTime) / 1000)+ " Seconds.";    publish(message);  } catch (  Exception ex) {    setErrorMessage("Error deleting Trade Orders.",ex.getMessage(),ex);  }  return null;}  }
class C{  private Ed25519GroupElement precomputedSubtract(final Ed25519GroupElement g){  if (this.coordinateSystem != CoordinateSystem.P3) {    throw new UnsupportedOperationException();  }  if (g.coordinateSystem != CoordinateSystem.PRECOMPUTED) {    throw new IllegalArgumentException();  }  final Ed25519FieldElement YPlusX;  final Ed25519FieldElement YMinusX;  final Ed25519FieldElement A;  final Ed25519FieldElement B;  final Ed25519FieldElement C;  final Ed25519FieldElement D;  YPlusX=this.Y.add(this.X);  YMinusX=this.Y.subtract(this.X);  A=YPlusX.multiply(g.Y);  B=YMinusX.multiply(g.X);  C=g.Z.multiply(this.T);  D=this.Z.add(this.Z);  return p1xp1(A.subtract(B),A.add(B),D.subtract(C),D.add(C));}  }
class C{  public void highGear(){  this.highGear.on();}  }
class C{  public MyGraph(){}  }
class C{  public Builder query(String query){  this.query=query;  return this;}  }
class C{  public boolean isExpressionClosure(){  return isExpressionClosure;}  }
class C{  protected boolean handleDirectory(File directory,String[] contentNames) throws SecurityException {  boolean continueWandering=true;  for (  String child : contentNames) {    boolean keepGoing=handleEntry(new File(directory.getAbsolutePath() + File.separator,child));    if (!keepGoing) {      continueWandering=exhaustiveSearch;      if (!continueWandering) {        break;      }    }  }  return continueWandering;}  }
class C{  public boolean checkCommunity(String comm){  return (commList.contains(comm));}  }
class C{  public boolean enqueue(){  return this.queue.enqueue(this);}  }
class C{  protected SymmetricReflexiveAssociation_Impl(){  super();}  }
class C{  public static RelationalOpExpression isNull(String property){  return new RelationalOpExpression(getPropExpr(property),"is",null);}  }
class C{  public void testInsertPrepared() throws SQLException {  PreparedStatement stat=conn.prepareStatement("INSERT INTO " + DatabaseCreator.TEST_TABLE5 + " VALUES(?, ?)");  stat.setInt(1,1);  stat.setString(2,"1");  stat.execute();  stat.setInt(1,2);  stat.setString(2,"3");  stat.execute();  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE (testId = 1 AND testValue = '1') "+ "OR (testId = 2 AND testValue = '3')");  r.next();  assertEquals("Incorrect number of records",2,r.getInt(1));  r.close();  stat.close();}  }
class C{  public static String whereAmI(final int index){  final String res=whereAmI();  final String[] split=res.split(StringUtils.LS);  return split[3 + index];}  }
class C{  public RsFluent withBody(final InputStream body){  return new RsFluent(new RsWithBody(this,body));}  }
class C{  private Observable<?> handleObservableOnWorkerThread(final Method invokedMethod,final Object[] args) throws Throwable {  Observable<?> result=(Observable<?>)invokedMethod.invoke(userImpl,args);  if (result != null) {    return result.subscribeOn(AndroidSchedulers.handlerThread(serviceThread.getHandler()));  } else {    return null;  }}  }
class C{  public PolynomialGF2mSmallM modMultiply(PolynomialGF2mSmallM a,PolynomialGF2mSmallM b){  int[] resultCoeff=modMultiply(coefficients,a.coefficients,b.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public CardLayout(){  this(0,0);}  }
class C{  public void unlockWrite(long stamp){  WNode h;  if (state != stamp || (stamp & WBIT) == 0L)   throw new IllegalMonitorStateException();  state=(stamp+=WBIT) == 0L ? ORIGIN : stamp;  if ((h=whead) != null && h.status != 0)   release(h);}  }
class C{  public void sendMessage(SIPMessage messageToSend) throws IOException {  try {    SIPResponse transactionResponse;    int statusCode;    transactionResponse=(SIPResponse)messageToSend;    statusCode=transactionResponse.getStatusCode();    try {      if (this.getOriginalRequest().getTopmostVia().getBranch() != null)       transactionResponse.getTopmostVia().setBranch(this.getBranch()); else       transactionResponse.getTopmostVia().removeParameter(ParameterNames.BRANCH);      if (!this.getOriginalRequest().getTopmostVia().hasPort())       transactionResponse.getTopmostVia().removePort();    } catch (    ParseException ex) {      ex.printStackTrace();    }    if (!transactionResponse.getCSeq().getMethod().equals(getOriginalRequest().getMethod())) {      sendResponse(transactionResponse);      return;    }    if (getRealState() == TransactionState.TRYING) {      if (statusCode / 100 == 1) {        this.setState(TransactionState.PROCEEDING);      } else       if (200 <= statusCode && statusCode <= 699) {        if (!isInviteTransaction()) {          if (!isReliable()) {            this.setState(TransactionState.COMPLETED);            enableTimeoutTimer(TIMER_J);          } else {            this.setState(TransactionState.TERMINATED);          }        } else {          if (statusCode / 100 == 2) {            this.disableRetransmissionTimer();            this.disableTimeoutTimer();            this.collectionTime=TIMER_J;            this.setState(TransactionState.TERMINATED);            if (this.dialog != null)             this.dialog.setRetransmissionTicks();          } else {            this.setState(TransactionState.COMPLETED);            if (!isReliable()) {              enableRetransmissionTimer();            }            enableTimeoutTimer(TIMER_H);          }        }      }    } else     if (getRealState() == TransactionState.PROCEEDING) {      if (isInviteTransaction()) {        if (statusCode / 100 == 2) {          this.disableRetransmissionTimer();          this.disableTimeoutTimer();          this.collectionTime=TIMER_J;          this.setState(TransactionState.TERMINATED);          if (this.dialog != null)           this.dialog.setRetransmissionTicks();        } else         if (300 <= statusCode && statusCode <= 699) {          this.setState(TransactionState.COMPLETED);          if (!isReliable()) {            enableRetransmissionTimer();          }          enableTimeoutTimer(TIMER_H);        }      } else       if (200 <= statusCode && statusCode <= 699) {        this.setState(TransactionState.COMPLETED);        if (!isReliable()) {          disableRetransmissionTimer();          enableTimeoutTimer(TIMER_J);        } else {          this.setState(TransactionState.TERMINATED);        }      }    } else     if (TransactionState.COMPLETED == this.getRealState()) {      return;    }    try {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("sendMessage : tx = " + this + " getState = "+ this.getState());      }      lastResponse=transactionResponse;      this.sendResponse(transactionResponse);    } catch (    IOException e) {      this.setState(TransactionState.TERMINATED);      this.collectionTime=0;      throw e;    }  }  finally {    this.startTransactionTimer();  }}  }
class C{  public Object clone(){  return new Vector2D(this);}  }
class C{  public void jumpLine(){  System.out.println(" ");}  }
class C{  private boolean checkExpectedValues(final File expectedExceptionsFile,final ValidationException ve){  Object expected=loadJsonFile(expectedExceptionsFile);  expectedFailureList=new ArrayList<String>();  readExpectedValues((JSONObject)expected);  validationFailureList=new ArrayList<String>();  processValidationFailures(ve);  return expectedFailureList.equals(validationFailureList);}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new HotspotPeerNetwork(scanResult);  return clone;}  }
class C{  public static String executeSolrCommandWithTimeout(int timeout,String command) throws IOException {  logger.info(command);  BufferedReader in=null;  try {    in=new BufferedReader(new InputStreamReader(executeSolrCommandAndGetInputStreamWithTimeout(timeout,command)));    String inputLine;    StringBuffer response=new StringBuffer();    while ((inputLine=in.readLine()) != null) {      response.append(inputLine);    }    in.close();    return response.toString();  }  finally {    if (in != null)     in.close();  }}  }
class C{  public StorageUnitAlternateKeyDto createStorageUnitKeyFromEntity(StorageUnitEntity storageUnitEntity){  BusinessObjectDataEntity businessObjectDataEntity=storageUnitEntity.getBusinessObjectData();  StorageUnitAlternateKeyDto storageUnitKey=new StorageUnitAlternateKeyDto();  storageUnitKey.setNamespace(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getNamespace().getCode());  storageUnitKey.setBusinessObjectDefinitionName(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectDefinition().getName());  storageUnitKey.setBusinessObjectFormatUsage(businessObjectDataEntity.getBusinessObjectFormat().getUsage());  storageUnitKey.setBusinessObjectFormatFileType(businessObjectDataEntity.getBusinessObjectFormat().getFileType().getCode());  storageUnitKey.setBusinessObjectFormatVersion(businessObjectDataEntity.getBusinessObjectFormat().getBusinessObjectFormatVersion());  storageUnitKey.setPartitionValue(businessObjectDataEntity.getPartitionValue());  storageUnitKey.setSubPartitionValues(businessObjectDataHelper.getSubPartitionValues(businessObjectDataEntity));  storageUnitKey.setBusinessObjectDataVersion(businessObjectDataEntity.getVersion());  storageUnitKey.setStorageName(storageUnitEntity.getStorage().getName());  return storageUnitKey;}  }
class C{  @Override public ResourceProvider init(String scheme,Map arguments){  if (!StringUtil.isEmpty(scheme))   this.scheme=scheme;  if (arguments != null) {    this.arguments=arguments;    Object oCaseSensitive=arguments.get("case-sensitive");    if (oCaseSensitive != null) {      caseSensitive=Caster.toBooleanValue(oCaseSensitive,true);    }    Object oPrefix=arguments.get("prefix");    if (oPrefix != null) {      defaultPrefix=Caster.toString(oPrefix,defaultPrefix);    }    Object oTimeout=arguments.get("lock-timeout");    if (oTimeout != null) {      lockTimeout=Caster.toLongValue(oTimeout,lockTimeout);    }  }  lock.setLockTimeout(lockTimeout);  lock.setCaseSensitive(caseSensitive);  return this;}  }
class C{  @Override default CompletableFuture<Double> sumDouble(final ToDoubleFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  boolean result;  if (needToCopyBgColorImage(img)) {    BufferedImage imageCopy=getBufferedImageCopy(img,bgcolor);    result=mGraphics.drawImage(imageCopy,x,y,null);  } else {    result=mGraphics.drawImage(img,x,y,bgcolor,observer);  }  return result;}  }
class C{  protected ReceivingOrderPosition(){}  }
class C{  public LSDBC(DistanceMetric dm){  this(dm,DEFAULT_ALPHA);}  }
class C{  public LayoutFocusTraversalPolicy(){  super(new LayoutComparator());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.405 -0400",hash_original_method="34B52DE0227DFFB1E1EBE0090FF7842E",hash_generated_method="A5F00BE2549DEB3591DB78C6D71D627E") private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){  if (name.equals(candidate)) {    return;  }  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {    messageBuffer.append(" Did you mean '");    messageBuffer.append(candidate);    messageBuffer.append("'?");  }}  }
class C{  public PaletteSliderThumbIcon(Image tiledImage,int tileCount,boolean isTiledHorizontaly){  super(tiledImage,tileCount,isTiledHorizontaly);}  }
class C{  public static <T>boolean addAll(Collection<? super T> c,T... a){  boolean modified=false;  for (int i=0; i < a.length; i++) {    modified|=c.add(a[i]);  }  return modified;}  }
class C{  public void onConnect(){  input.setDisabled(false);  sendingButton.setDisabled(false);  connectingButton.setDisabled(true);  disconnectingButton.setDisabled(false);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Field(7) public int num_mip_levels(){  return this.io.getIntField(this,7);}  }
class C{  public void merge(JavaDocEntry entry){  if (entry != null) {    if (shouldReplace(this.comment,entry.comment)) {      this.comment=entry.comment;    }    if (shouldReplace(this.returnTypeComment,entry.returnTypeComment)) {      this.returnTypeComment=entry.returnTypeComment;    }    for (    Entry<String,String> parameterCommentEntry : entry.parameterComments.entrySet()) {      if (!this.parameterComments.containsKey(parameterCommentEntry.getKey()) || (shouldReplace(this.parameterComments.get(parameterCommentEntry.getKey()),parameterCommentEntry.getValue()))) {        this.parameterComments.put(parameterCommentEntry.getKey(),parameterCommentEntry.getValue());      }    }    for (    Entry<Integer,String> errorCommentEntry : entry.errorComments.entrySet()) {      if (!this.errorComments.containsKey(errorCommentEntry.getKey()) || (shouldReplace(this.errorComments.get(errorCommentEntry.getKey()),errorCommentEntry.getValue()))) {        this.errorComments.put(errorCommentEntry.getKey(),errorCommentEntry.getValue());      }    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static void usage(){  System.out.println("Usage: java ImportClient --username [user] " + "--password [pass] --filename [file] --spreadsheet [name] " + "--worksheet [name] --delimiter [regex]");  System.out.println("\nA simple application that uses the provided Google\n" + "Account username and password to locate the\n" + "spreadsheet and worksheet in user's Google\n"+ "Spreadsheet account, and import the provided\n"+ "delimited text file into the worksheet.");}  }
class C{  private LocalDate parseDateFormat(String yyyymmdd){  return LocalDate.of(Integer.parseInt(yyyymmdd.substring(0,4)),Integer.parseInt(yyyymmdd.substring(4,6)),Integer.parseInt(yyyymmdd.substring(6,8)));}  }
class C{  public PieceJailChessSquare(Composite parent,int id,int pieceJailPiece){  super(parent,id,true);  ignorePaint=true;  this.pieceJailPiece=pieceJailPiece;  addPaintListener(paintListener);}  }
class C{  protected AbstractFileBuffer createTextFileBuffer(IPath location,LocationKind locationKind){  return new FileStoreTextFileBuffer(this);}  }
class C{  static String toHex(byte[] data){  StringBuffer sb=new StringBuffer(data.length * 2);  for (int i=0; i < data.length; i++) {    sb.append(hexc[(data[i] >> 4) & 0x0f]);    sb.append(hexc[data[i] & 0x0f]);  }  return sb.toString();}  }
class C{  @Override public void acceptClassifier(final IncrementalClassifierEvent ce){  if (ce.getStatus() == IncrementalClassifierEvent.BATCH_FINISHED || (m_incrementalSaveSchedule > 0 && (m_counter % m_incrementalSaveSchedule == 0) && m_counter > 0)) {    Instances header=ce.getStructure();    String titleString=ce.getClassifier().getClass().getName();    titleString=titleString.substring(titleString.lastIndexOf('.') + 1,titleString.length());    String prefix="";    String relationName=(m_includeRelationName) ? header.relationName() : "";    try {      prefix=m_env.substitute(m_filenamePrefix);    } catch (    Exception ex) {      String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();      if (m_logger != null) {        m_logger.logMessage(message);        m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      } else {        System.err.println(message);      }      return;    }    String fileName="" + prefix + relationName+ titleString;    fileName=sanitizeFilename(fileName);    String dirName=m_directory.getPath();    try {      dirName=m_env.substitute(dirName);    } catch (    Exception ex) {      String message="[SerializedModelSaver] " + statusMessagePrefix() + " Can't save model. Reason: "+ ex.getMessage();      if (m_logger != null) {        m_logger.logMessage(message);        m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      } else {        System.err.println(message);      }      return;    }    File tempFile=new File(dirName);    fileName=tempFile.getAbsolutePath() + File.separator + fileName;    saveModel(fileName,header,ce.getClassifier());  } else   if (ce.getStatus() == IncrementalClassifierEvent.NEW_BATCH) {    m_counter=0;  }  m_counter++;}  }
class C{  public static String generateNativeGuid(NetworkSystem netDevice){  if (netDevice.getSystemType().equalsIgnoreCase(NetworkSystem.Type.brocade.name()) && netDevice.getSmisProviderIP() != null && netDevice.getSmisPortNumber() != null) {    return String.format("%s+%s+%s",_deviceTypeMap.get(netDevice.getSystemType()),netDevice.getSmisProviderIP(),netDevice.getSmisPortNumber());  }  return String.format("%s+%s+%s",_deviceTypeMap.get(netDevice.getSystemType()),netDevice.getIpAddress(),netDevice.getPortNumber());}  }
class C{  public void testDeleteRecordingTrack(){  EndToEndTestUtils.startRecording();  EndToEndTestUtils.checkUnderRecording();  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_delete),true);  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_yes),true,true);  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.generic_progress_title));  EndToEndTestUtils.checkNotRecording();}  }
class C{  public void push(String type,String decl,String fieldName){  StringBuilder sb=new StringBuilder("(");  sb.append(type).append(")");  sb.append(decl).append(".").append(fieldName);  push(sb.toString());}  }
class C{  private String[] combineStringArrays(String[] value1,String[] value2){  String[] output=new String[value1.length + value2.length];  int counter=0;  for (int i=0; i < value1.length; i++) {    output[counter]=value1[i];    ++counter;  }  for (int i=0; i < value2.length; i++) {    output[counter]=value2[i];    ++counter;  }  return output;}  }
class C{  private <T>T read(Class<? extends T> type,InputNode node,Context context) throws Exception {  return (T)new Traverser(context).read(node,type);}  }
class C{  private GBDevice toGBDevice(Device dbDevice){  DeviceType deviceType=DeviceType.fromKey(dbDevice.getType());  GBDevice gbDevice=new GBDevice(dbDevice.getIdentifier(),dbDevice.getName(),deviceType);  List<DeviceAttributes> deviceAttributesList=dbDevice.getDeviceAttributesList();  if (deviceAttributesList.size() > 0) {    gbDevice.setModel(dbDevice.getModel());    DeviceAttributes attrs=deviceAttributesList.get(0);    gbDevice.setFirmwareVersion(attrs.getFirmwareVersion1());    gbDevice.setFirmwareVersion2(attrs.getFirmwareVersion2());  }  return gbDevice;}  }
class C{  protected final void ATTEMPT(RegisterOperand result,MemoryOperand mo,Operand oldValue,Operand newValue){  if (VM.BuildFor32Addr) {    RegisterOperand temp=regpool.makeTempInt();    RegisterOperand temp2=regpool.makeTemp(result);    EMIT(MIR_Move.create(IA32_MOV,temp,newValue));    EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),oldValue));    EMIT(MIR_CompareExchange.create(IA32_LOCK_CMPXCHG,new RegisterOperand(getEAX(),TypeReference.Int),mo,temp.copyRO()));    EMIT(MIR_Set.create(IA32_SET__B,temp2,IA32ConditionOperand.EQ()));    EMIT(MIR_Unary.create(IA32_MOVZX__B,result,temp2.copy()));  } else {    RegisterOperand temp=regpool.makeTempLong();    RegisterOperand temp2=regpool.makeTemp(result);    EMIT(MIR_Move.create(IA32_MOV,temp,newValue));    EMIT(MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Long),oldValue));    EMIT(MIR_CompareExchange.create(IA32_LOCK_CMPXCHG,new RegisterOperand(getEAX(),TypeReference.Long),mo,temp.copyRO()));    EMIT(MIR_Set.create(IA32_SET__B,temp2,IA32ConditionOperand.EQ()));    EMIT(MIR_Unary.create(IA32_MOVZX__B,result,temp2.copy()));  }}  }
class C{  public int name(int i){  return ByteArray.readU16bit(info,i * 4 + 1);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthRadioButtonUI();}  }
class C{  public boolean isMetaDown(){  return AWTEventDispatcher.isMetaDown(modifiers);}  }
class C{  public TDoubleDoubleHashMap absoluteDistributionLog(double discretization,double base){  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double bin=Math.ceil(Math.log(values.get(i) / discretization) / Math.log(base));    bin=Math.max(bin,0.0);    double binWidth=Math.pow(base,bin) - Math.pow(base,bin - 1);    binWidth=Math.max(1.0,binWidth);    freq.adjustOrPutValue(Math.pow(base,bin) * discretization,weights.get(i) / binWidth,weights.get(i) / binWidth);  }  return freq;}  }
class C{  public char readChar(){  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  if (n == 8) {    int x=buffer;    fillBuffer();    return (char)(x & 0xff);  }  int x=buffer;  x<<=(8 - n);  int oldN=n;  fillBuffer();  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  n=oldN;  x|=(buffer >>> n);  return (char)(x & 0xff);}  }
class C{  public void writeComment(Object comment){  writer.println(indent + "<!-- " + escape(comment.toString())+ " -->");}  }
class C{  public static void writeListAsStr(final String file,final List list) throws IOException {  if ((list == null) || (list.size() == 0) || (file == null)|| (file.trim().length() == 0)) {    return;  }  BufferedWriter bw=null;  try {    bw=new BufferedWriter(new FileWriter(file));    for (int i=0; i < list.size(); i++) {      bw.write(list.get(i).toString());      bw.write(StringUtil.getNewlineStr());    }  } catch (  IOException ex) {    throw ex;  } finally {    try {      bw.close();      bw=null;    } catch (    Exception ex) {    }  }}  }
class C{  public LinkRef(String linkName){  super(linkClassName,new StringRefAddr(linkAddrType,linkName));}  }
class C{  public void flush() throws java.io.IOException {  if (m_writer != null)   m_writer.flush();  flushBuffer();}  }
class C{  public void addLine(MHRPaySelectionLine line){  if (getC_BPartner_ID() != line.getHR_Movement().getC_BPartner_ID())   throw new IllegalArgumentException("Line for fifferent BPartner");  if (isReceipt() == line.isSOTrx()) {    setPayAmt(getPayAmt().add(line.getPayAmt()));    setDiscountAmt(getDiscountAmt().add(line.getDiscountAmt()));  } else {    setPayAmt(getPayAmt().subtract(line.getPayAmt()));    setDiscountAmt(getDiscountAmt().subtract(line.getDiscountAmt()));  }  setQty(getQty() + 1);}  }
class C{  private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {  String label=request.getParameter("start");  String detail=request.getParameter("detail");  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);  startMon(key);  PrintWriter out=response.getWriter();  out.println(OK + ": start successfully called on - " + label);}  }
class C{  public void remove(K key){  Integer value=refSet.get(key);  if (value == null) {    return;  }  countPoints--;  if (value == 1) {    refSet.remove(key);    return;  }  value--;  refSet.put(key,value);}  }
class C{  public long toMillis(){  return timeUnit.toMillis(length);}  }
class C{  public static void objectString(Object obj,StringBuilder sb){  if (obj instanceof Object[]) {    sb.append('(');    boolean first=true;    for (    Object o : (Object[])obj) {      if (!first) {        sb.append(',');      } else {        first=false;      }      objectString(o,sb);    }    sb.append(')');  } else {    objectStringWithBytes(obj,sb);  }}  }
class C{  @Override protected void createLabels(){  String text=this.getText();  if (!WWUtil.isEmpty(text)) {    this.addLabel(this.getText());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean remove(char labelStart){  int i;  if ((i=search(labelStart,true)) < 0)   return false;  assert (get(i).getLabelStart() == labelStart);  children.remove(i);  return true;}  }
class C{  public boolean resolveByName(long where,ClassDefinition c,Identifier nm){  return resolveByName(where,c,nm,false);}  }
class C{  private void removeStale(){  WeakReferenceElement<E> ref;  while ((ref=(WeakReferenceElement<E>)gcQ.poll()) != null) {    store.remove(ref);    onGc(ref.get());  }}  }
class C{  public void writePathsToStream(final ObjectOutput os) throws IOException {  final byte[] dvr=glyphDisplay.serializeToByteArray(null);  os.writeObject(dvr);  os.writeInt(maxWidth);  os.writeInt(maxHeight);  os.writeBoolean(lockColours);}  }
class C{  private Atom processCommands(String command) throws ParseException {  MacroInfo mac=MacroInfo.Commands.get(command);  int opts=0;  if (mac.hasOptions)   opts=mac.posOpts;  String[] args=getOptsArgs(mac.nbArgs,opts);  args[0]=command;  if (NewCommandMacro.isMacro(command)) {    String ret=(String)mac.invoke(this,args);    insert(spos,pos,ret);    return null;  }  return (Atom)mac.invoke(this,args);}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  public Element writeBeanLoader(Element parent,Object o,String name) throws Exception {  Element node;  weka.gui.beans.Loader loader;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  loader=(weka.gui.beans.Loader)o;  node=addElement(parent,name,loader.getClass().getName(),false);  invokeWriteToXML(node,loader.getLoader(),VAL_LOADER);  invokeWriteToXML(node,loader.getBeanContext(),VAL_BEANCONTEXT);  return node;}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (target instanceof XBLOMDefinitionElement) {    if (getXblBoundElement((Node)target) == null) {      defsToBeRemoved.add(target);    }  } else   if (target instanceof XBLOMImportElement) {    if (getXblBoundElement((Node)target) == null) {      importsToBeRemoved.add(target);    }  }  Node parent=getXblParentNode((Node)target);  if (parent != null) {    nodesToBeInvalidated.add(parent);  }}  }
class C{  void removeAllRecursive(){  if (children != null) {    for (int i=0, size=map.getChildPageCount(this); i < size; i++) {      PageReference ref=children[i];      if (ref.page != null) {        ref.page.removeAllRecursive();      } else {        long c=children[i].pos;        int type=DataUtils.getPageType(c);        if (type == DataUtils.PAGE_TYPE_LEAF) {          int mem=DataUtils.getPageMaxLength(c);          map.removePage(c,mem);        } else {          map.readPage(c).removeAllRecursive();        }      }    }  }  removePage();}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  boolean result=(status.mState != State.CANCEL);  return result;}  }
class C{  public static double bessi1(double x){  double ax, ans;  double y;  if ((ax=Math.abs(x)) < 3.75) {    y=x / 3.75;    y*=y;    ans=ax * (0.5 + y * (0.87890594 + y * (0.51498869 + y * (0.15084934 + y * (0.2658733e-1 + y * (0.301532e-2 + y * 0.32411e-3))))));  } else {    y=3.75 / ax;    ans=0.2282967e-1 + y * (-0.2895312e-1 + y * (0.1787654e-1 - y * 0.420059e-2));    ans=0.39894228 + y * (-0.3988024e-1 + y * (-0.362018e-2 + y * (0.163801e-2 + y * (-0.1031555e-1 + y * ans))));    ans*=(Math.exp(ax) / Math.sqrt(ax));  }  return x < 0.0 ? -ans : ans;}  }
class C{  public ResultSetTableModel(ResultSet rs){  this(rs,0);}  }
class C{  public static boolean isProductionCopy(ConsistencyGroupCopyUID copyUID,List<ConsistencyGroupCopyUID> productionCopiesUIDs){  for (  ConsistencyGroupCopyUID productionCopyUID : productionCopiesUIDs) {    if ((productionCopyUID.getGroupUID().getId() == copyUID.getGroupUID().getId()) && (productionCopyUID.getGlobalCopyUID().getCopyUID() == copyUID.getGlobalCopyUID().getCopyUID()) && (productionCopyUID.getGlobalCopyUID().getClusterUID().getId() == copyUID.getGlobalCopyUID().getClusterUID().getId())) {      return true;    }  }  return false;}  }
class C{  public void async(Context context){  if (status == null) {    status=new AjaxStatus();    status.redirect(url).refresh(refresh);  } else   if (status.getDone()) {    status.reset();    result=null;  }  showProgress(true);  if (ah != null) {    if (!ah.authenticated()) {      AQUtility.debug("auth needed",url);      ah.auth(this);      return;    }  }  work(context);}  }
class C{  private Node parseBody(SOAPMessage message) throws ParserException {  try {    return message.getSOAPBody().getFirstChild();  } catch (  SOAPException e) {    log.error(PARSING_ERROR_MSG,e);    throw new ParserException(PARSING_ERROR_MSG,e);  }}  }
class C{  IonStringLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  private void multiVolumeCheckForHitachiModel(List<Volume> volumes,StorageSystem storageSystem) throws HDSException {  if (volumes.size() > 1 && HDSUtils.checkForAMSSeries(storageSystem)) {    throw HDSException.exceptions.unsupportedOperationOnThisModel();  }}  }
class C{  public static int HexToColor(String hex){  return Integer.parseInt(hex.replaceFirst("^#",""),16);}  }
class C{  public static Typeface robotoBold(Context context){  return FontSourceProcessor.process(R.raw.roboto_bold,context);}  }
class C{  public static long toLong(int[] ints){  return toLong(ints[0],ints[1]);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","siit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void animateAddFab(boolean reverse){  mAddButton.setImageResource(reverse ? R.drawable.icon_morph_reverse : R.drawable.icon_morph);  ((Animatable)mAddButton.getDrawable()).start();}  }
class C{  @Override public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){  return format((long)number,toAppendTo,pos);}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public static int computeLazyFieldMessageSetExtensionSize(final int fieldNumber,final LazyField value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeLazyFieldSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public void writePv(ProcessVar pv,int recursiveDepth){  writePv(pv,recursiveDepth,false);}  }
class C{  public boolean hasNext(){  return hasNextTlsMode() || hasNextInetSocketAddress() || hasNextProxy()|| hasNextPostponed();}  }
class C{  public int[] toIntegerArray(){  int[] result;  result=new int[blocks];  System.arraycopy(value,0,result,0,blocks);  return result;}  }
class C{  public void open() throws Exception {  if (localRtpPort != -1) {    rtpReceiver=new RtpPacketReceiver(localRtpPort,rtcpSession);    rtpReceiver.start();    rtcpReceiver=new RtcpPacketReceiver(localRtpPort + 1,rtcpSession,rtcpSocketTimeout);    rtcpReceiver.addRtcpListener(this);    rtcpReceiver.start();    rtpTransmitter=new RtpPacketTransmitter(remoteAddress,remotePort,rtcpSession,rtpReceiver.getConnection());    rtcpTransmitter=new RtcpPacketTransmitter(remoteAddress,remotePort + 1,rtcpSession,rtcpReceiver.getConnection());    rtcpTransmitter.start();  } else   if (rtpInputStream != null) {    rtpTransmitter=new RtpPacketTransmitter(remoteAddress,remotePort,rtcpSession,rtpInputStream.getRtpReceiver().getConnection());    rtcpTransmitter=new RtcpPacketTransmitter(remoteAddress,remotePort + 1,rtcpSession,rtpInputStream.getRtpReceiver().getConnection());  } else {    rtpTransmitter=new RtpPacketTransmitter(remoteAddress,remotePort,rtcpSession);    rtcpTransmitter=new RtcpPacketTransmitter(remoteAddress,remotePort + 1,rtcpSession);  }}  }
class C{  public void deleteUInstDeposito(String idArchivo,UInsDepositoVO uInsDepositoVO,Integer motivo) throws Exception {  iniciarTransaccion();  LoggingEvent event=AuditDeposito.getLogginEventBajaUinstalacion(this);  historicoUnidadInstalacion(idArchivo,uInsDepositoVO,motivo);  _unidadInstalacionDepositoDBEntity.deleteUInstDeposito(uInsDepositoVO.getId());  AuditDeposito.addDataLogInfoUInstalacion(event,uInsDepositoVO.getId());  commit();}  }
class C{  public StorageOSUser findOne(StorageOSUserDAO userDAO){  if (userDAO == null) {    throw SecurityException.fatals.theParametersAreNotValid(StorageOSUserDAO.class.getName());  }  StorageOSUser user=new StorageOSUser(userDAO);  addRoles(user);  return user;}  }
class C{  public EaseOut(){}  }
class C{  public static Process openInConsole(@Nullable File workFolder,Map<String,String> envVars,String... args) throws IOException {  String[] commands=args;  String cmd=F.concat(Arrays.asList(args)," ");  if (U.isWindows())   commands=F.asArray("cmd","/c",String.format("start %s",cmd));  if (U.isMacOs())   commands=F.asArray("osascript","-e",String.format("tell application \"Terminal\" to do script \"%s\"",cmd));  if (U.isUnix())   commands=F.asArray("xterm","-sl","1024","-geometry","200x50","-e",cmd);  ProcessBuilder pb=new ProcessBuilder(commands);  if (workFolder != null)   pb.directory(workFolder);  if (envVars != null) {    String sep=U.isWindows() ? ";" : ":";    Map<String,String> goalVars=pb.environment();    for (    Map.Entry<String,String> var : envVars.entrySet()) {      String envVar=goalVars.get(var.getKey());      if (envVar == null || envVar.isEmpty())       envVar=var.getValue(); else       envVar+=sep + var.getValue();      goalVars.put(var.getKey(),envVar);    }  }  return pb.start();}  }
class C{  public Boolean isPartitionFormatChange(){  return partitionFormatChange;}  }
class C{  public @Nullable ListenableFuture<Ack> sendPayment(List<Transaction> txns,@Nullable Address refundAddr,@Nullable String memo) throws PaymentRequestException, VerificationException, IOException {  Protos.Payment payment=getPayment(txns,refundAddr,memo);  if (payment == null)   return null;  if (isExpired())   throw new PaymentRequestException.Expired("PaymentRequest is expired");  URL url;  try {    url=new URL(paymentDetails.getPaymentUrl());  } catch (  MalformedURLException e) {    throw new PaymentRequestException.InvalidPaymentURL(e);  }  return sendPayment(url,payment);}  }
class C{  public static double normalizeLat(double lat_deg){  if (lat_deg >= -90 && lat_deg <= 90) {    return lat_deg;  }  double off=Math.abs((lat_deg + 90) % 360);  return (off <= 180 ? off : 360 - off) - 90;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.409 -0500",hash_original_method="0B8909DC59B5514A6A7570D0CDE2DD57",hash_generated_method="7C3CC5D34E94A676B9105820F54624F9") public DefaultHttpResponseFactory(ReasonPhraseCatalog catalog){  if (catalog == null) {    throw new IllegalArgumentException("Reason phrase catalog must not be null.");  }  this.reasonCatalog=catalog;}  }
class C{  public static List<String> names(Collection<? extends DataObjectRestRep> values){  List<String> names=new ArrayList<String>();  if (values != null) {    for (    DataObjectRestRep value : values) {      names.add(value.getName());    }  }  return names;}  }
class C{  public boolean locked(){  return locked;}  }
class C{  @Override public final Pair<String,IThresholdSetter> updateComponent(String component,String text){  IThresholdSetter thresholdSetter=null;  if (component.equalsIgnoreCase("sudo")) {    final Matcher matcher=m_sudoPattern.matcher(text);    if (matcher.find()) {      String userName=matcher.group(1);      if (userName == null) {        userName="";      }      final String group=processStringWithoutTrace(matcher.group(2));      component=(component.trim() + "(" + userName.trim()+ "):"+ cronCMDSpliter(group)).trim();      if (component.length() > 120) {        component=component.substring(0,120);      }      thresholdSetter=m_thresholdSetterSudoCron;    }  } else   if (component.equalsIgnoreCase("/usr/sbin/cron")) {    final Matcher matcher=m_cronPattern.matcher(text);    if (matcher.find()) {      String userName=matcher.group(1);      if (userName == null) {        userName="";      }      String group=processStringWithoutTrace(matcher.group(2));      component=(component + userName + ":"+ cronCMDSpliter(group)).trim();      if (component.length() > 120) {        component=component.substring(0,120);      }      thresholdSetter=m_thresholdSetterSudoCron;    }  } else   if (component.equalsIgnoreCase("puppet-agent")) {    final Matcher matcher=m_puppetAgentPattern.matcher(text);    if (matcher.find()) {      String group=processStringWithoutTrace(matcher.group(1));      thresholdSetter=m_thresholdSetterPuppet;      if (group.length() > 100) {        group=group.substring(0,100);      }      component=component + ":" + group;    }  }  return new Pair<String,IThresholdSetter>(component,thresholdSetter);}  }
class C{  public static Number abs(Number a){  if (isFloatingPoint(a)) {    return Math.abs(a.doubleValue());  } else {    return Math.abs(a.longValue());  }}  }
class C{  @Override public void addBatch(final String sql) throws SQLException {  throw new SQLException("Cannot do addBatch(String) on preparedStatement");}  }
class C{  public CheckRefItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public int computeMaxStack() throws BadBytecode {  maxStack=new CodeAnalyzer(this).computeMaxStack();  return maxStack;}  }
class C{  public long size(){  return isNull() ? 0 : this.end - this.start + 1;}  }
class C{  public SerializationException(final String message){  super(message);}  }
class C{  public static double nextLaplace(MersenneTwisterFast randomGenerator){  double u=randomGenerator.nextDouble();  u=u + u - 1.0;  if (u > 0)   return -Math.log(1.0 - u); else   return Math.log(1.0 + u);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractAttrNS aa=(AbstractAttrNS)n;  aa.namespaceURI=namespaceURI;  return n;}  }
class C{  public synchronized void deleteClosedConnections(){  final Iterator iter=freeConnections.iterator();  while (iter.hasNext()) {    final HttpConnection conn=(HttpConnection)iter.next();    if (!conn.isOpen()) {      iter.remove();      deleteConnection(conn);    }  }}  }
class C{  protected synchronized void issueNextOperation(){  stopTimer();  for (int i=0; i < _numRows; i++) {    currentPin=i;    if (readState[i] != NONE) {switch (readState[i]) {case READVALUE1:case READINGVALUE1:        readState[i]=READINGVALUE1;      lastOpCv=i * 3 + 4;    setStatus("read SV" + lastOpCv + " (port"+ i+ " v1)");  sendReadCommand(unitAddress,unitSubAddress,lastOpCv);return;case READVALUE2:case READINGVALUE2:readState[i]=READINGVALUE2;lastOpCv=i * 3 + 5;setStatus("read SV" + lastOpCv + " (port "+ i+ " v2)");sendReadCommand(unitAddress,unitSubAddress,lastOpCv);return;case READMODE:case READINGMODE:readState[i]=READINGMODE;lastOpCv=i * 3 + 3;setStatus("read SV" + lastOpCv + " (port "+ i+ " mode)");sendReadCommand(unitAddress,unitSubAddress,lastOpCv);return;default :log.error("found an unexpected state: " + readState[1] + " on port "+ i);return;}}}for (int i=0; i < _numRows; i++) {currentPin=i;if (writeState[i] != NONE) {switch (writeState[i]) {case WRITEVALUE1:case WRITINGVALUE1:writeState[i]=WRITINGVALUE1;lastOpCv=i * 3 + 4;setStatus("write SV" + lastOpCv + " ( port "+ i+ " v1)");sendWriteCommand(unitAddress,unitSubAddress,lastOpCv,getV1(i));return;case WRITEVALUE2:case WRITINGVALUE2:writeState[i]=WRITINGVALUE2;lastOpCv=i * 3 + 5;setStatus("write SV" + lastOpCv + " (port"+ i+ " v2)");sendWriteCommand(unitAddress,unitSubAddress,lastOpCv,getV2(i));return;case WRITEMODE:case WRITINGMODE:writeState[i]=WRITINGMODE;lastOpCv=i * 3 + 3;setStatus("write SV" + lastOpCv + " (port"+ i+ " mode)");sendWriteCommand(unitAddress,unitSubAddress,lastOpCv,getSV(i));return;default :log.error("found an unexpected state: " + writeState[1] + " on port "+ i);return;}}}setStatus("OK");lastOpCv=-1;currentPin=0;}  }
class C{  private boolean reverseIt(){  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    setDocAction(DOCACTION_None);    return false;  }  if (!MPeriod.isOpen(getCtx(),this.getDateAcct(),MPeriodControl.DOCBASETYPE_CashJournal,getAD_Org_ID()))   throw new IllegalStateException("@PeriodClosed@");  MAllocationHdr[] allocations=MAllocationHdr.getOfCash(getCtx(),getC_Cash_ID(),get_TrxName());  for (  MAllocationHdr allocation : allocations) {    allocation.reverseCorrectIt();    if (!allocation.save())     throw new IllegalStateException("Cannot reverse allocations");  }  MCashLine[] cashlines=getLines(true);  for (  MCashLine cashline : cashlines) {    BigDecimal oldAmount=cashline.getAmount();    BigDecimal oldDiscount=cashline.getDiscountAmt();    BigDecimal oldWriteOff=cashline.getWriteOffAmt();    cashline.setAmount(Env.ZERO);    cashline.setDiscountAmt(Env.ZERO);    cashline.setWriteOffAmt(Env.ZERO);    cashline.addDescription(Msg.getMsg(getCtx(),"Voided") + " (Amount=" + oldAmount+ ", Discount="+ oldDiscount+ ", WriteOff="+ oldWriteOff+ ", )");    if (MCashLine.CASHTYPE_BankAccountTransfer.equals(cashline.getCashType())) {      if (cashline.getC_Payment_ID() == 0)       throw new IllegalStateException("Cannot reverse payment");      MPayment payment=new MPayment(getCtx(),cashline.getC_Payment_ID(),get_TrxName());      payment.reverseCorrectIt();      payment.saveEx();    }    cashline.saveEx();  }  setName(getName() + "^");  addDescription(Msg.getMsg(getCtx(),"Voided"));  setDocStatus(DOCSTATUS_Reversed);  setProcessed(true);  setPosted(true);  setDocAction(DOCACTION_None);  saveEx();  MFactAcct.deleteEx(Table_ID,getC_Cash_ID(),get_TrxName());  return true;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (x_1: ");  result.append(x_1);  result.append(", y_1: ");  result.append(y_1);  result.append(')');  return result.toString();}  }
class C{  public SexecEditPlugin(){  super(new ResourceLocator[]{BaseEditPlugin.INSTANCE,ExpressionsEditPlugin.INSTANCE,SGraphEditPlugin.INSTANCE,TypesEditPlugin.INSTANCE});}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public void readTables(DatabaseMetaData meta,String[] tableTypes) throws SQLException {  ResultSet rs=meta.getTables(null,name,null,tableTypes);  ArrayList<DbTableOrView> list=New.arrayList();  while (rs.next()) {    DbTableOrView table=new DbTableOrView(this,rs);    if (contents.isOracle() && table.getName().indexOf('$') > 0) {      continue;    }    list.add(table);  }  rs.close();  tables=new DbTableOrView[list.size()];  list.toArray(tables);  if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {    for (    DbTableOrView tab : tables) {      try {        tab.readColumns(meta);      } catch (      SQLException e) {      }    }  }}  }
class C{  public CTraceContainer(final INaviModule module,final List<TraceList> traces,final SQLProvider provider){  m_module=Preconditions.checkNotNull(module,"IE01694: module argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE01695: provider argument can not be null");  m_traces=new FilledList<TraceList>(traces);}  }
class C{  public void close(){  Thread current=thread;  thread=null;  if (current != null) {    current.interrupt();    try {      current.join();    } catch (    InterruptedException e) {    }  }  try {    buffer.close();  } catch (  IOException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.798 -0500",hash_original_method="BCFB422D01A5282722899F511B11ECF6",hash_generated_method="14D7A8B5CD7268744EC7DA49036B42B1") public ElementType parent(){  return theType.parent();}  }
class C{  public byte[] canonicalizeXPathNodeSet(Set<Node> xpathNodeSet) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeXPathNodeSet(xpathNodeSet);}  }
class C{  private static void fullTextQuery(CalendarService service,String query) throws ServiceException, IOException {  Query myQuery=new Query(eventFeedUrl);  myQuery.setFullTextQuery("Tennis");  CalendarEventFeed resultFeed=service.query(myQuery,CalendarEventFeed.class);  System.out.println("Events matching " + query + ":");  System.out.println();  for (int i=0; i < resultFeed.getEntries().size(); i++) {    CalendarEventEntry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }  System.out.println();}  }
class C{  public static Class<?> forName(String clsName,@Nullable ClassLoader ldr) throws ClassNotFoundException {  assert clsName != null;  Class<?> cls=primitiveMap.get(clsName);  if (cls != null)   return cls;  if (ldr != null) {    if (ldr instanceof ClassCache)     return ((ClassCache)ldr).getFromCache(clsName);  } else   ldr=gridClassLoader;  ConcurrentMap<String,Class> ldrMap=classCache.get(ldr);  if (ldrMap == null) {    ConcurrentMap<String,Class> old=classCache.putIfAbsent(ldr,ldrMap=new ConcurrentHashMap8<>());    if (old != null)     ldrMap=old;  }  cls=ldrMap.get(clsName);  if (cls == null) {    Class old=ldrMap.putIfAbsent(clsName,cls=Class.forName(clsName,true,ldr));    if (old != null)     cls=old;  }  return cls;}  }
class C{  void encrypt(ByteBuffer src) throws SSLException {  if (!handshakeComplete) {    throw new IllegalStateException();  }  if (!src.hasRemaining()) {    if (outNetBuffer == null) {      outNetBuffer=emptyBuffer;    }    return;  }  createOutNetBuffer(src.remaining());  while (src.hasRemaining()) {    SSLEngineResult result=sslEngine.wrap(src,outNetBuffer.buf());    if (result.getStatus() == Status.OK) {      if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {        doTasks();      }    } else     if (result.getStatus() == Status.BUFFER_OVERFLOW) {      outNetBuffer.capacity(outNetBuffer.capacity() << 1);      outNetBuffer.limit(outNetBuffer.capacity());    } else {      throw new SSLException("SSLEngine error during encrypt: " + result.getStatus() + " src: "+ src+ "outNetBuffer: "+ outNetBuffer);    }  }  outNetBuffer.flip();}  }
class C{  private static boolean isProjectResourceAllowed(User user,Project project,Resource resource,Operation operation){  if (user.isSiteManager()) {    return true;  }  if (resource.getType() == ResourceType.PROJECT_TRANSFER) {switch (operation) {case ACCEPT:      ProjectTransfer pt=ProjectTransfer.find.byId(Long.parseLong(resource.getId()));    User to=User.findByLoginId(pt.destination);  if (!to.isAnonymous()) {    return user.loginId.equals(pt.destination);  } else {    Organization receivingOrg=Organization.findByName(pt.destination);    return receivingOrg != null && OrganizationUser.isAdmin(receivingOrg.id,user.id);  }default :return false;}}if (OrganizationUser.isAdmin(project.organization,user)) {return true;}if (user.isManagerOf(project) || isAllowedIfAuthor(user,resource) || isAllowedIfAssignee(user,resource)|| isAllowedIfGroupMember(project,user)) {return true;}switch (resource.getType()) {case ISSUE_STATE:case ISSUE_ASSIGNEE:case ISSUE_MILESTONE:case ATTACHMENT:switch (operation) {case READ:return isAllowed(user,resource.getContainer(),Operation.READ);case UPDATE:case DELETE:return isAllowed(user,resource.getContainer(),Operation.UPDATE);}}switch (operation) {case READ:return project.isPublic() || user.isMemberOf(project) || isAllowedIfGroupMember(project,user);case UPDATE:return user.isMemberOf(project) || isAllowedIfGroupMember(project,user);case DELETE:if (resource.getType() == ResourceType.CODE) {return false;}return user.isMemberOf(project) || isAllowedIfGroupMember(project,user);case ACCEPT:case CLOSE:case REOPEN:return user.isMemberOf(project) || isAllowedIfGroupMember(project,user);case WATCH:return (project.isPublic() && !user.isAnonymous()) || (user.isMemberOf(project)) || isAllowedIfGroupMember(project,user);default :return false;}}  }
class C{  private String doPrefix(String uri,String qName,boolean isElement){  String defaultNS=nsSupport.getURI("");  if ("".equals(uri)) {    if (isElement && defaultNS != null)     nsSupport.declarePrefix("","");    return null;  }  String prefix;  if (isElement && defaultNS != null && uri.equals(defaultNS)) {    prefix="";  } else {    prefix=nsSupport.getPrefix(uri);  }  if (prefix != null) {    return prefix;  }  prefix=(String)doneDeclTable.get(uri);  if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {    prefix=null;  }  if (prefix == null) {    prefix=(String)prefixTable.get(uri);    if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {      prefix=null;    }  }  if (prefix == null && qName != null && !"".equals(qName)) {    int i=qName.indexOf(':');    if (i == -1) {      if (isElement && defaultNS == null) {        prefix="";      }    } else {      prefix=qName.substring(0,i);    }  }  for (; prefix == null || nsSupport.getURI(prefix) != null; prefix="__NS" + ++prefixCounter)   ;  nsSupport.declarePrefix(prefix,uri);  doneDeclTable.put(uri,prefix);  return prefix;}  }
class C{  public Matrix3d m01(double m01){  this.m01=m01;  return this;}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  IgniteUuid classLoaderId(){  return ldrId;}  }
class C{  public void createColorMapTextureCoords(Mesh mesh,int textureUnit){  FloatBuffer vertex=mesh.getMeshData().getVertexBuffer();  FloatBuffer normals=mesh.getMeshData().getNormalBuffer();  FloatBuffer colors=mesh.getMeshData().getColorBuffer();  FloatBuffer texCoords=mesh.getMeshData().getTextureBuffer(textureUnit);  if (texCoords == null) {    texCoords=BufferUtils.createFloatBuffer(colors.limit() / 2);  }  int dataSize=colors.limit() / 4;  Vector2 coord=new Vector2();  Vector3 normal=new Vector3();  int k=0;  for (int i=0; i < dataSize; ++i) {    k=i * 2;    float alpha=colors.get(i * 4 + 3);    float z=0;    if (alpha != 0) {switch (type) {case Elevation:        z=vertex.get(i * 3 + 2);      colorMap.getTextureCoordinate(z,coord);    texCoords.put(k,coord.getXf()).put(k + 1,coord.getYf());  break;case Slope:normal.set(normals.get(i * 3),normals.get(i * 3 + 1),normals.get(i * 3 + 2));z=(float)MathUtil.getSlopeFromNormal(normal);colorMap.getTextureCoordinate(z,coord);texCoords.put(k,coord.getXf()).put(k + 1,coord.getYf());break;case Aspect:normal.set(normals.get(i * 3),normals.get(i * 3 + 1),normals.get(i * 3 + 2));z=(float)MathUtil.getAspectFromNormal(normal);colorMap.getTextureCoordinate(z,coord);texCoords.put(k,coord.getXf()).put(k + 1,coord.getYf());break;}} else {texCoords.put(k,0).put(k + 1,-1);}}k+=2;texCoords.limit(k);texCoords.rewind();mesh.getMeshData().setTextureBuffer(texCoords,textureUnit);}  }
class C{  protected void createShapesForGeometry(ColladaInstanceGeometry geomInstance,List<ColladaMeshShape> shapes){  ColladaGeometry geometry=geomInstance.get();  if (geometry == null)   return;  ColladaMesh mesh=geometry.getMesh();  if (mesh == null)   return;  ColladaBindMaterial bindMaterial=geomInstance.getBindMaterial();  ColladaRoot root=this.getRoot();  List<ColladaTriangles> triangles=mesh.getTriangles();  if (!WWUtil.isEmpty(triangles)) {    ColladaMeshShape newShape=ColladaMeshShape.createTriangleMesh(triangles,bindMaterial);    newShape.setDelegateOwner(root);    shapes.add(newShape);  }  List<ColladaLines> lines=mesh.getLines();  if (!WWUtil.isEmpty(lines)) {    ColladaMeshShape newShape=ColladaMeshShape.createLineMesh(lines,bindMaterial);    newShape.setDelegateOwner(root);    shapes.add(newShape);  }}  }
class C{  public SoapBindingMock(String exceptionMessage){  _exceptionMessage=exceptionMessage;}  }
class C{  public <T>T removeStickyEvent(Class<T> eventType){  removeStickyEventRemote(eventType);  return removeStickyEventLocal(eventType);}  }
class C{  static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  Pattern regex=null;  if (args.length == 1) {    regex=Pattern.compile(args[0]);  } else   if (args.length != 0) {    throw new UsageException("help [command]");  }  for (  AbstractCommand cmd : CommandBus.commands)   tryRegex(regex,cmd);  for (  FuzzyCommand cmd : CommandBus.parsers)   tryRegex(regex,cmd);}  }
class C{  public RefactoringDescriptor createDescriptor(final String id,final String project,final String description,final String comment,final Map arguments,final int flags) throws IllegalArgumentException {  Assert.isNotNull(id);  Assert.isNotNull(description);  Assert.isNotNull(arguments);  Assert.isLegal(flags >= RefactoringDescriptor.NONE);  final RefactoringContribution contribution=getRefactoringContribution(id);  if (contribution != null)   return contribution.createDescriptor(id,project,description,comment,arguments,flags);  return new DefaultRefactoringDescriptor(id,project,description,comment,arguments,flags);}  }
class C{  private void printErrorMessage(final String errorMessage,final boolean showConsole){  final String messageFormat="error stream: {0}";  final String messageLog=MessageFormat.format(messageFormat,errorMessage);  log.debug(messageLog);  getStream(ERROR_STREAM_ID).println(errorMessage);  if (showConsole) {    showConsole();  }}  }
class C{  public boolean hasExtendedOperands(){  return (this.extendedOperands != null) && this.extendedOperands.size() > 0;}  }
class C{  public String toString(){  return lngZone + Character.toString(latZone) + " "+ easting+ " "+ northing;}  }
class C{  public final String readln() throws IOException {  return readLine();}  }
class C{  public void addAndDeploy(DeploymentDescriptor dd,Handler<ExtendedAsyncResult<DeploymentDescriptor>> fut){  logger.info("addAndDeploy: " + Json.encodePrettily(dd));  final String srvcId=dd.getSrvcId();  if (srvcId == null) {    fut.handle(new Failure<>(USER,"Needs srvcId"));    return;  }  LaunchDescriptor launchDesc=dd.getDescriptor();  final String nodeId=dd.getNodeId();  if (launchDesc == null && nodeId == null) {    final String instId=dd.getInstId();    if (instId == null) {      fut.handle(new Failure<>(USER,"Needs instId"));      return;    }    deployments.add(srvcId,instId,dd,null);  } else   if (nodeId == null) {    fut.handle(new Failure<>(USER,"missing nodeId"));  } else {    if (launchDesc == null) {      if (moduleManager == null) {        fut.handle(new Failure<>(INTERNAL,"no module manager (should not happen)"));        return;      }      String modId=dd.getSrvcId();      if (modId == null || modId.isEmpty()) {        fut.handle(new Failure<>(USER,"Needs srvcId"));        return;      }      ModuleDescriptor md=moduleManager.get(modId);      if (md == null) {        fut.handle(new Failure<>(NOT_FOUND,"Module " + modId + " not found"));        return;      }      launchDesc=md.getLaunchDescriptor();      if (launchDesc == null) {        fut.handle(new Failure<>(USER,"Module " + modId + " has no launchDescriptor"));        return;      }      dd.setDescriptor(launchDesc);    }    getNode(nodeId,null);  }}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  public boolean scheduleImmediatelyBefore(Steppable event){  return _scheduleImmediate(false,event);}  }
class C{  public int previous(){  if (text == null) {    return NULLORDER;  }  NormalizerBase.Mode textMode=text.getMode();  NormalizerBase.Mode ownerMode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());  if (textMode != ownerMode) {    text.setMode(ownerMode);  }  if (buffer != null) {    if (expIndex > 0) {      return strengthOrder(buffer[--expIndex]);    } else {      buffer=null;      expIndex=0;    }  } else   if (swapOrder != 0) {    if (Character.isSupplementaryCodePoint(swapOrder)) {      char[] chars=Character.toChars(swapOrder);      swapOrder=chars[1];      return chars[0] << 16;    }    int order=swapOrder << 16;    swapOrder=0;    return order;  }  int ch=text.previous();  if (ch == NormalizerBase.DONE) {    return NULLORDER;  }  int value=ordering.getUnicodeOrder(ch);  if (value == RuleBasedCollator.UNMAPPED) {    swapOrder=UNMAPPEDCHARVALUE;    return ch;  } else   if (value >= RuleBasedCollator.CONTRACTCHARINDEX) {    value=prevContractChar(ch);  }  if (value >= RuleBasedCollator.EXPANDCHARINDEX) {    buffer=ordering.getExpandValueList(value);    expIndex=buffer.length;    value=buffer[--expIndex];  }  if (ordering.isSEAsianSwapping()) {    int vowel;    if (isThaiBaseConsonant(ch)) {      vowel=text.previous();      if (isThaiPreVowel(vowel)) {        buffer=makeReorderedBuffer(vowel,value,buffer,false);        expIndex=buffer.length - 1;        value=buffer[expIndex];      } else {        text.next();      }    }    if (isLaoBaseConsonant(ch)) {      vowel=text.previous();      if (isLaoPreVowel(vowel)) {        buffer=makeReorderedBuffer(vowel,value,buffer,false);        expIndex=buffer.length - 1;        value=buffer[expIndex];      } else {        text.next();      }    }  }  return strengthOrder(value);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Override public int size(){  return size;}  }
class C{  private void verifyAllBlocksAreReachable(String where,BasicBlock curBB,BitVector visitedNormalBBs,BitVector visitedExceptionalBBs,boolean fromExceptionEdge){  if (fromExceptionEdge) {    visitedExceptionalBBs.set(curBB.getNumber());  } else {    visitedNormalBBs.set(curBB.getNumber());  }  Enumeration<BasicBlock> outBlocks=curBB.getNormalOut();  while (outBlocks.hasMoreElements()) {    BasicBlock out=outBlocks.nextElement();    if (!visitedNormalBBs.get(out.getNumber())) {      verifyAllBlocksAreReachable(where,out,visitedNormalBBs,visitedExceptionalBBs,false);    }  }  outBlocks=curBB.getExceptionalOut();  while (outBlocks.hasMoreElements()) {    BasicBlock out=outBlocks.nextElement();    if (!visitedExceptionalBBs.get(out.getNumber())) {      verifyAllBlocksAreReachable(where,out,visitedNormalBBs,visitedExceptionalBBs,true);    }    if (visitedNormalBBs.get(out.getNumber())) {      curBB.printExtended();      out.printExtended();      verror(where,"Basic block " + curBB + " reaches "+ out+ " by normal and exceptional out edges thereby breaking a liveness analysis assumption.");    }  }  if (curBB.mayThrowUncaughtException()) {    visitedExceptionalBBs.set(cfg.exit().getNumber());    if (!cfg.exit().isExit()) {      cfg.exit().printExtended();      verror(where,"The exit block is reachable by an exception edge and contains instructions.");    }  }}  }
class C{  public synchronized void add(ProjectionStackTrigger pt){  if (triggers == null) {    triggers=new ArrayList<ProjectionStackTrigger>();  }  if (!triggers.contains(pt)) {    triggers.add(pt);  }}  }
class C{  public static boolean inNetbeansEditor(JavacNode node){  return inNetbeansEditor(node.getContext());}  }
class C{  public Element store(Object o){  EntryExitPairs p=(EntryExitPairs)o;  Element element=new Element("entryexitpairs");  setStoreElementClass(element);  ArrayList<LayoutEditor> editors=p.getSourcePanelList();  if (editors.size() == 0) {    return element;  }  element.addContent(new Element("cleardown").addContent("" + p.getClearDownOption()));  if (p.getDispatcherIntegration()) {    element.addContent(new Element("dispatcherintegration").addContent("yes"));  }  if (p.useDifferentColorWhenSetting()) {    element.addContent(new Element("colourwhilesetting").addContent(colorToString(p.getSettingRouteColor())));    element.addContent(new Element("settingTimer").addContent("" + p.getSettingTimer()));  }  for (int k=0; k < editors.size(); k++) {    LayoutEditor panel=editors.get(k);    List<Object> nxpair=p.getSourceList(panel);    Element panelElem=new Element("layoutPanel");    panelElem.setAttribute("name",panel.getLayoutName());    for (int j=0; j < nxpair.size(); j++) {      Object key=nxpair.get(j);      Element source=new Element("source");      String type="";      String item="";      if (key instanceof SignalMast) {        type="signalMast";        item=((SignalMast)key).getDisplayName();      } else       if (key instanceof Sensor) {        type="sensor";        item=((Sensor)key).getDisplayName();      } else       if (key instanceof SignalHead) {        type="signalHead";        item=((SignalHead)key).getDisplayName();      }      source.setAttribute("type",type);      source.setAttribute("item",item);      ArrayList<Object> a=p.getDestinationList(key,panel);      for (int i=0; i < a.size(); i++) {        Object keyDest=a.get(i);        String typeDest="";        String itemDest="";        if (keyDest instanceof SignalMast) {          typeDest="signalMast";          itemDest=((SignalMast)keyDest).getDisplayName();        } else         if (keyDest instanceof Sensor) {          typeDest="sensor";          itemDest=((Sensor)keyDest).getDisplayName();        } else         if (keyDest instanceof SignalHead) {          typeDest="signalHead";          itemDest=((SignalHead)keyDest).getDisplayName();        }        Element dest=new Element("destination");        dest.setAttribute("type",typeDest);        dest.setAttribute("item",itemDest);        if (!p.isUniDirection(key,panel,keyDest)) {          dest.setAttribute("uniDirection","no");        }        if (!p.isEnabled(key,panel,keyDest)) {          dest.setAttribute("enabled","no");        }        int nxType=p.getEntryExitType(key,panel,keyDest);switch (nxType) {case 0x00:          dest.setAttribute("nxType","turnoutsetting");        break;case 0x01:      dest.setAttribute("nxType","signalmastlogic");    break;case 0x02:  dest.setAttribute("nxType","fullinterlocking");break;default :dest.setAttribute("nxType","turnoutsetting");break;}if (p.getUniqueId(key,panel,keyDest) != null) {dest.setAttribute("uniqueid",p.getUniqueId(key,panel,keyDest));}source.addContent(dest);}panelElem.addContent(source);element.addContent(panelElem);}}return element;}  }
class C{  final boolean lookahead(char c,int n){  int pos=(m_queueMark + n);  boolean b;  if ((pos <= m_ops.getTokenQueueSize()) && (pos > 0) && (m_ops.getTokenQueueSize() != 0)) {    String tok=((String)m_ops.m_tokenQueue.elementAt(pos - 1));    b=(tok.length() == 1) ? (tok.charAt(0) == c) : false;  } else {    b=false;  }  return b;}  }
class C{  public void addContentChild(FXGNode child){  if (child instanceof ParagraphNode || child instanceof BRNode || child instanceof SpanNode|| child instanceof CDATANode) {    if (content == null) {      content=new ArrayList<TextNode>();      contiguous=true;    }    if (!contiguous) {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidTextGraphicContent");    }    content.add((TextNode)child);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.029 -0400",hash_original_method="870ABDCCA7C01B06A5561037DA9EA7AE",hash_generated_method="7B0195A29CA73339ECC643AD274A8F86") public DrmConvertedStatus(int _statusCode,byte[] _convertedData,int _offset){  statusCode=_statusCode;  convertedData=_convertedData;  offset=_offset;}  }
class C{  public void subscribe(final String[] topic,final int[] qos,String invocationContext,String activityToken){  service.traceDebug(TAG,"subscribe({" + topic + "},"+ qos+ ",{"+ invocationContext+ "}, {"+ activityToken+ "}");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.subscribe(topic,qos,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  public String parameterToString(Object param){  if (param == null) {    return "";  } else   if (param instanceof Date) {    return formatDate((Date)param);  } else   if (param instanceof Collection) {    StringBuilder b=new StringBuilder();    for (    Object o : (Collection)param) {      if (b.length() > 0) {        b.append(",");      }      b.append(String.valueOf(o));    }    return b.toString();  } else {    return String.valueOf(param);  }}  }
class C{  private void addWorkerIfNecessary(){  if (idleWorkers.get() == 0) {synchronized (workers) {      if (workers.isEmpty() || (idleWorkers.get() == 0)) {        addWorker();      }    }  }}  }
class C{  public Matrix4x3d reflection(Vector3dc normal,Vector3dc point){  return reflection(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public boolean processPoint(Coord coord,double weight){  GeometryFactory gf=new GeometryFactory();  Point point=gf.createPoint(new Coordinate(coord.getX(),coord.getY()));  boolean result=false;  if (envelope.contains(point)) {    int x=(int)Math.floor((point.getX() - originX) / resolution);    int y=(int)Math.floor((originY - point.getY()) / resolution);    if (x < 0) {      log.error("Negative x-entry found for raster.");    }    if (y < 0) {      log.error("Negative y-entry found for raster.");    }    double height=0;    Point p=null;    Polygon pixel=null;switch (this.KdeType) {case 0:      height=weight;    imageMatrix.setQuick(x,y,imageMatrix.getQuick(x,y) + 1);  maxValue=Math.max(maxValue,imageMatrix.getQuick(x,y));result=true;break;case 1:int minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));int maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));int minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));int maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));height=weight / (2.0 * radius);for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);if (d <= radius || pixel.contains(point)) {imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + height);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}}result=true;break;case 2:height=weight / radius;minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));if (i < 0 || j < 0) {log.warn("Negative positions");}double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);double u=d / radius;double value=0.0;if (pixel.contains(point)) {value=height;} else if (d <= radius) {value=height * (1 - u);}imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + value);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}result=true;break;case 3:minX=(int)Math.max(0,Math.floor((point.getX() - radius - originX) / resolution));maxX=(int)Math.min(imageMatrix.rows() - 1,Math.floor((point.getX() + radius - originX) / resolution));minY=(int)Math.max(0,Math.floor((originY - (point.getY() + radius)) / resolution));maxY=(int)Math.min(imageMatrix.columns() - 1,Math.floor((originY - (point.getY() - radius)) / resolution));for (int i=minX; i <= maxX; i++) {for (int j=minY; j <= maxY; j++) {p=gf.createPoint(new Coordinate((i + 0.5) * resolution + originX,originY - (j + 0.5) * resolution));double x1=originX + i * resolution;double x2=originX + (i + 1) * resolution;double y1=originY - (j + 1) * resolution;double y2=originY - j * resolution;Coordinate c1=new Coordinate(x1,y1);Coordinate c2=new Coordinate(x2,y1);Coordinate c3=new Coordinate(x2,y2);Coordinate c4=new Coordinate(x1,y2);Coordinate[] c={c1,c2,c3,c4,c1};pixel=gf.createPolygon(gf.createLinearRing(c),null);double d=point.distance(p);double u=d / radius;if (pixel.contains(point)) {height=(35.0 / 32.0) * weight;} else if (d <= radius) {height=(35.0 / 32.0) * weight * Math.pow(1 - Math.pow(u,2),3);}imageMatrix.setQuick(i,j,imageMatrix.getQuick(i,j) + height);maxValue=Math.max(maxValue,imageMatrix.getQuick(i,j));}}result=true;break;default :log.warn("A wrong Kernel Density Estimate function type was selected.");break;}}return result;}  }
class C{  private String parseToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  while (hasChar()) {    ch=chars[pos];    if (isOneOf(ch,terminators)) {      break;    }    i2++;    pos++;  }  return getToken(false);}  }
class C{  private boolean checkFirstByte(byte first){  return (first == (byte)0x02) || (first == (byte)0x81) || (first == (byte)0x01)|| (first == (byte)0xC1)|| (first == (byte)0x03)|| (first == (byte)0x13);}  }
class C{  public int size(){  return counterMap.size();}  }
class C{  public Disposable schedule(Runnable command,long delay,TimeUnit unit){  return _scheduler.schedule(command,delay,unit);}  }
class C{  public boolean isDeliveredUnknown(){  String s=getIsDelivered();  return s == null;}  }
class C{  public void deselectAllSpans(){  if (mMentionsEditText != null) {    mMentionsEditText.deselectAllSpans();  }}  }
class C{  public void applyForceToCenter(float forceX,float forceY,boolean wake){  tmp.set(forceX,forceY);  body.applyForceToCenter(tmp);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.121 -0400",hash_original_method="E676DFDEC85B4B1F452BB4B5F6043E68",hash_generated_method="40BE6B1554522CFC4E9D5D7A59F7DA72") private void updateKeyMaskFields(){  mask=fRanges;  if (fContextual) {    mask|=(1 << 31);    key=fDefaultContextIndex;  } else {    key=fSingleRangeIndex;  }}  }
class C{  public RecordEntity_ createRecordEntity_(){  RecordEntity_Impl recordEntity_=new RecordEntity_Impl();  return recordEntity_;}  }
class C{  public CreateRequest(int objectId,LwM2mObjectInstance instance){  this(null,objectId,instance);}  }
class C{  private void updatePreferredSize(){  final int width=m_offsetViewWidth + m_hexElementWidth + (18 * m_charWidth);  setPreferredSize(new Dimension(width,getHeight()));  revalidate();}  }
class C{  public void parseSwfSwd(DManager manager){  m_manager=manager;  m_container=new LineFunctionContainer(m_swf,m_swd);  m_container.combForLineRecords(this);  setPopulated();  manager.addEvent(new FunctionMetaDataAvailableEvent());  m_manager=null;}  }
class C{  public String addStepsForCreateConsistencyGroup(Workflow workflow,String waitFor,List<VolumeDescriptor> volumesDescriptors,String stepGroup) throws ControllerException {  List<VolumeDescriptor> volumes=VolumeDescriptor.filterByType(volumesDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  if (volumes.isEmpty()) {    return waitFor;  }  final VolumeDescriptor firstVolume=volumes.get(0);  if (firstVolume == null || NullColumnValueGetter.isNullURI(firstVolume.getConsistencyGroupURI())) {    return waitFor;  }  final URI consistencyGroupURI=firstVolume.getConsistencyGroupURI();  final BlockConsistencyGroup consistencyGroup=_dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroupURI);  if (firstVolume.getType() != null) {    if (VolumeDescriptor.Type.SRDF_SOURCE.toString().equalsIgnoreCase(firstVolume.getType().toString()) || VolumeDescriptor.Type.SRDF_TARGET.toString().equalsIgnoreCase(firstVolume.getType().toString()) || VolumeDescriptor.Type.SRDF_EXISTING_SOURCE.toString().equalsIgnoreCase(firstVolume.getType().toString())) {      return waitFor;    }  }  Map<URI,Set<String>> deviceURIs=new HashMap<URI,Set<String>>();  for (  VolumeDescriptor descr : volumes) {    Volume volume=_dbClient.queryObject(Volume.class,descr.getVolumeURI());    String rgName=volume.getReplicationGroupInstance();    if (NullColumnValueGetter.isNotNullValue(rgName)) {      URI deviceURI=descr.getDeviceURI();      _log.info(String.format("If it doesn't already exist, creating backend CG [%s] on device (%s) for volume [%s](%s).",rgName,deviceURI,volume.getLabel(),volume.getId()));      Set<String> rgNames=deviceURIs.get(deviceURI);      if (rgNames == null) {        rgNames=new HashSet<String>();      }      rgNames.add(rgName);      deviceURIs.put(deviceURI,rgNames);    }  }  boolean createdCg=false;  for (  Map.Entry<URI,Set<String>> entry : deviceURIs.entrySet()) {    URI deviceURI=entry.getKey();    Set<String> rgNames=entry.getValue();    for (    String rgName : rgNames) {      if (!consistencyGroup.created(deviceURI,rgName)) {        waitFor=workflow.createStep(stepGroup,String.format("Creating consistency group  %s",consistencyGroupURI),waitFor,deviceURI,getDeviceType(deviceURI),this.getClass(),createConsistencyGroupMethod(deviceURI,consistencyGroupURI,rgName),deleteConsistencyGroupMethod(deviceURI,consistencyGroupURI,rgName,false,false,false),null);        createdCg=true;        _log.info(String.format("Step created for creating CG [%s] on device [%s]",consistencyGroup.getLabel(),deviceURI));      }    }  }  if (createdCg) {    waitFor=stepGroup;  }  return waitFor;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public boolean saveLogToLocal(){  String path=ParallecGlobalConfig.taskLogFolderWithSlash + this.taskId + ParallecGlobalConfig.taskLogPostfix;  return saveLogToLocal(path);}  }
class C{  public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {  broadcaster.removeNotificationListener(listener);}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public static String encodeString(String s){  s=StringUtil.gsub("\\","\\\\",s);  s=StringUtil.gsub("\t","\\t",s);  s=StringUtil.gsub("\n","\\n",s);  s=StringUtil.gsub("\r","\\r",s);  s=StringUtil.gsub("\b","\\b",s);  s=StringUtil.gsub("\f","\\f",s);  s=StringUtil.gsub("\"","\\\"",s);  s=StringUtil.gsub("'","\\'",s);  return s;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.684 -0500",hash_original_method="8329107E7147BB5F0DCDAFE41A50D91D",hash_generated_method="4E0D90FADC346D513AFBD89460FD3736") public Response createResponse(String responseString) throws java.text.ParseException {  if (responseString == null)   return new SIPResponse();  StringMsgParser smp=new StringMsgParser();  SIPMessage sipMessage=smp.parseSIPMessage(responseString);  if (!(sipMessage instanceof SIPResponse))   throw new ParseException(responseString,0);  return (SIPResponse)sipMessage;}  }
class C{  public final boolean hasSubscription(){  return subscription.get() != null;}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.076 -0500",hash_original_method="711104B80207109E628FE8DD74956179",hash_generated_method="03D4713F9A09AE1CFF33A93E20B13BCA") public synchronized StringBuffer append(char[] chars){  append0(chars);  return this;}  }
class C{  public UnaryExpression(int operator,int operatorPosition,AstNode operand){  this(operator,operatorPosition,operand,false);}  }
class C{  public T progress(int id){  progress=findView(id);  return self();}  }
class C{  public Object convertStringToJavaField(String value,int columnPos) throws SQLException {  if (value == null) {    return null;  } else {    return fieldConverter.resultStringToJava(this,value,columnPos);  }}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public RequestToBatchSenderAsstManager(String directorJobId,long asstManagerRetryIntervalMillis,List<ActorRef> workers,ActorRef sender,int maxConcurrency){  super();  this.taskId=directorJobId;  this.asstManagerRetryIntervalMillis=asstManagerRetryIntervalMillis;  this.workers=workers;  this.sender=sender;  this.maxConcurrency=maxConcurrency;}  }
class C{  protected void clearError(){  ioError=false;}  }
class C{  public void execute(){  Iterator<?> elementIter=XMLUtil.selectNodes(document,"/BugCollection/BugInstance").iterator();  Iterator<BugInstance> bugInstanceIter=bugCollection.iterator();  Set<String> bugTypeSet=new HashSet<String>();  Set<String> bugCategorySet=new HashSet<String>();  Set<String> bugCodeSet=new HashSet<String>();  while (elementIter.hasNext() && bugInstanceIter.hasNext()) {    Element element=(Element)elementIter.next();    BugInstance bugInstance=bugInstanceIter.next();    String bugType=bugInstance.getType();    bugTypeSet.add(bugType);    BugPattern bugPattern=bugInstance.getBugPattern();    bugCategorySet.add(bugPattern.getCategory());    bugCodeSet.add(bugPattern.getAbbrev());    element.addElement("ShortMessage").addText(bugPattern.getShortDescription());    element.addElement("LongMessage").addText(bugInstance.getMessage());    Iterator<?> annElementIter=element.elements().iterator();    Iterator<BugAnnotation> annIter=bugInstance.annotationIterator();    while (annElementIter.hasNext() && annIter.hasNext()) {      Element annElement=(Element)annElementIter.next();      BugAnnotation ann=annIter.next();      annElement.addElement("Message").addText(ann.toString());    }  }  addBugCategories(bugCategorySet);  addBugPatterns(bugTypeSet);  addBugCodes(bugCodeSet);}  }
class C{  protected void assertEqualStreams(InputStream expected,InputStream actual,int len) throws IOException {  actual.read(new byte[0]);  expected.read(new byte[0]);  actual.read(new byte[10],3,0);  expected.read(new byte[10],0,0);  for (int i=0; len < 0 || i < len; i++) {    int ca=actual.read();    actual.read(new byte[0]);    int ce=expected.read();    if (ca != ce) {      assertEquals(ce,ca);    }    if (ca == -1) {      break;    }  }  actual.read(new byte[10],3,0);  expected.read(new byte[10],0,0);  actual.read(new byte[0]);  expected.read(new byte[0]);  actual.close();  expected.close();}  }
class C{  public static byte[] generateSHA1Hash(ResourceByteRangeProvider resourceByteRangeProvider) throws NoSuchAlgorithmException, IOException {  MessageDigest md=MessageDigest.getInstance("SHA1");  long rangeStart=0;  long rangeEnd=(rangeStart + 1023 > resourceByteRangeProvider.getResourceSize() - 1) ? resourceByteRangeProvider.getResourceSize() - 1 : rangeStart + 1023;  int nread=0;  while (rangeStart < resourceByteRangeProvider.getResourceSize() && rangeEnd < resourceByteRangeProvider.getResourceSize()) {    byte[] dataBytes=resourceByteRangeProvider.getByteRangeAsBytes(rangeStart,rangeEnd);    nread=(int)(rangeEnd - rangeStart + 1);    md.update(dataBytes,0,nread);    rangeStart=rangeEnd + 1;    rangeEnd=(rangeStart + 1023 > resourceByteRangeProvider.getResourceSize() - 1) ? resourceByteRangeProvider.getResourceSize() - 1 : rangeStart + 1023;  }  ;  byte[] mdbytes=md.digest();  return Arrays.copyOf(mdbytes,mdbytes.length);}  }
class C{  @Override public void updateStorageGroupPolicyAndLimits(StorageSystem storage,ExportMask exportMask,List<URI> volumeURIs,VirtualPool newVirtualPool,boolean rollback,TaskCompleter taskCompleter) throws Exception {  String message=rollback ? ("updateAutoTieringPolicy" + "(rollback)") : ("updateAutoTieringPolicy");  _log.info("{} {} START...",storage.getSerialNumber(),message);  _log.info("{} : volumeURIs: {}",message,volumeURIs);  try {    String newPolicyName=ControllerUtils.getFastPolicyNameFromVirtualPool(_dbClient,storage,newVirtualPool);    _log.info("{} : AutoTieringPolicy: {}",message,newPolicyName);    List<Volume> volumes=_dbClient.queryObject(Volume.class,volumeURIs);    int storageTierMethodologyId=DEFAULT_STORAGE_TIER_METHODOLOGY;    if (!Constants.NONE.equalsIgnoreCase(newPolicyName)) {      storageTierMethodologyId=getStorageTierMethodologyFromPolicyName(newPolicyName);    }    Set<String> nativeIds=new HashSet<String>();    for (    Volume volume : volumes) {      nativeIds.add(volume.getNativeId());    }    _log.info("Native Ids of Volumes: {}",nativeIds);    CimConnection connection=_helper.getConnection(storage);    WBEMClient client=connection.getCimClient();    String[] memberNames=nativeIds.toArray(new String[nativeIds.size()]);    CIMObjectPath[] volumePaths=_cimPath.getVolumePaths(storage,memberNames);    CIMProperty[] inArgs=_helper.getModifyStorageTierMethodologyIdInputArguments(storageTierMethodologyId);    for (    CIMObjectPath volumeObject : volumePaths) {      if (_helper.getVolumeStorageTierMethodologyId(storage,volumeObject) == storageTierMethodologyId) {        _log.info("Current and new Storage Tier Methodology Ids are same '{}'." + " No need to update it on Volume Object Path {}.",storageTierMethodologyId,volumeObject);      } else {        CIMInstance modifiedSettingInstance=new CIMInstance(volumeObject,inArgs);        _log.info("Updating Storage Tier Methodology ({}) on Volume Object Path {}.",storageTierMethodologyId,volumeObject);        client.modifyInstance(modifiedSettingInstance,SmisConstants.PS_EMC_STORAGE_TIER_METHODOLOGY);      }    }    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    String errMsg=String.format("An error occurred while updating Auto-tiering policy for Volumes %s",volumeURIs);    _log.error(errMsg,e);    ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(errMsg,e);    taskCompleter.error(_dbClient,serviceError);  }  _log.info("{} {} END...",storage.getSerialNumber(),message);}  }
class C{  private static Object jsConstructor(Context cx,Scriptable scope,Object[] args){  if (args.length == 0)   return new NativeArray(0);  if (cx.getLanguageVersion() == Context.VERSION_1_2) {    return new NativeArray(args);  } else {    Object arg0=args[0];    if (args.length > 1 || !(arg0 instanceof Number)) {      return new NativeArray(args);    } else {      long len=ScriptRuntime.toUint32(arg0);      if (len != ((Number)arg0).doubleValue()) {        String msg=ScriptRuntime.getMessage0("msg.arraylength.bad");        throw ScriptRuntime.constructError("RangeError",msg);      }      return new NativeArray(len);    }  }}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  boolean secureConnection=false;switch (requestCode) {case REQUEST_CONNECT_DEVICE_SECURE:    secureConnection=true;case REQUEST_CONNECT_DEVICE_INSECURE:  if (resultCode == Activity.RESULT_OK) {    String address=data.getExtras().getString(BtDeviceListActivity.EXTRA_DEVICE_ADDRESS);    prefs.edit().putString(PRESELECT.LAST_DEV_ADDRESS.toString(),address).apply();    connectBtDevice(address,secureConnection);  } else {    setMode(MODE.OFFLINE);  }break;case REQUEST_CONNECT_DEVICE_USB:if (resultCode == Activity.RESULT_OK) {mCommService=new UsbCommService(this,mHandler);mCommService.connect(UsbDeviceListActivity.selectedPort,true);} else {setMode(MODE.OFFLINE);}break;case REQUEST_ENABLE_BT:if (resultCode == Activity.RESULT_OK) {setMode(MODE.ONLINE);} else {setMode(MODE.DEMO);}break;case REQUEST_SELECT_FILE:if (resultCode == RESULT_OK) {Uri uri=data.getData();log.info("Load content: " + uri);fileHelper.loadDataThreaded(uri,mHandler,MESSAGE_FILE_READ);setMenuItemEnable(R.id.save,false);setMenuItemEnable(R.id.obd_services,true);}break;case REQUEST_SETTINGS:{}break;case REQUEST_GRAPH_DISPLAY_DONE:dataViewMode=DATA_VIEW_MODE.LIST;break;}}  }
class C{  private void redraw(){  if (Double.parseDouble(tfCircle1CenterX.getText()) != circle1.getCenterX()) {    circle1.setCenterX(Double.parseDouble(tfCircle1CenterX.getText()));  }  if (Double.parseDouble(tfCircle1CenterY.getText()) != circle1.getCenterY()) {    circle1.setCenterY(Double.parseDouble(tfCircle1CenterY.getText()));  }  if (Double.parseDouble(tfCircle2CenterX.getText()) != circle2.getCenterX()) {    circle2.setCenterX(Double.parseDouble(tfCircle2CenterX.getText()));  }  if (Double.parseDouble(tfCircle2CenterY.getText()) != circle2.getCenterY()) {    circle2.setCenterY(Double.parseDouble(tfCircle2CenterY.getText()));  }  if (Double.parseDouble(tfCircle1Radius.getText()) != circle1.getRadius()) {    circle1.setRadius(Double.parseDouble(tfCircle1Radius.getText()));  }  if (Double.parseDouble(tfCircle2Radius.getText()) != circle2.getRadius()) {    circle2.setRadius(Double.parseDouble(tfCircle2Radius.getText()));  }}  }
class C{  public static long parseString(String value){  if ((value.endsWith("L")) || ((value.endsWith("l")))) {    value=value.substring(0,value.length() - 1);  }  if (value.startsWith("+")) {    value=value.substring(1);  }  return Long.parseLong(value);}  }
class C{  public void beforeFirst() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static boolean isWritable(final File file){  if (file == null) {    Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given");    return false;  }  return isWritable(file,false);}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  theSet.add(obj5);  return theSet;}  }
class C{  static void debug(Object obj,int offset,boolean newLine){  StackTraceElement ste=new Exception().getStackTrace()[1 + offset];  String steStr=ste.getClassName();  int ind=steStr.lastIndexOf('.');  steStr=steStr.substring(ind + 1);  steStr+="." + ste.getMethodName() + "("+ ste.getLineNumber()+ "): "+ (obj == null ? null : obj.toString());  System.err.println(steStr);}  }
class C{  public Vector multiply(int n){  return new Vector(this.x * n,this.y * n,this.z * n);}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  private HashTable[] readHashTableEntries(final int hashTableEntires) throws IOException {  final int size=hashTableEntires * HashTable.HASH_TABLE_STRUCTURE_SIZE;  final ByteBuffer hashTablesBuffer=AlgorithmUtil.decryptData(readFullBuffer(size),size,HASH_TABLE_DECRYPTION_KEY);  final HashTable[] hashTables=new HashTable[hashTableEntires];  for (int i=0; i < hashTables.length; i++) {    final HashTable hashTable=new HashTable();    hashTable.filePathHashA=hashTablesBuffer.getInt();    hashTable.filePathHashB=hashTablesBuffer.getInt();    hashTable.language=hashTablesBuffer.getShort();    hashTable.platform=hashTablesBuffer.getShort();    hashTable.fileBlockIndex=hashTablesBuffer.getInt();    hashTables[i]=hashTable;  }  return hashTables;}  }
class C{  private void createTable(){  final Table table=new Table(this.composite,SWT.SINGLE | SWT.H_SCROLL | SWT.FULL_SELECTION| SWT.BORDER);  new TableColumn(table,SWT.LEFT);  table.setLayoutData(new RowData(150,175));  this.columns.add(table);  addTableListeners(table);  if (super.getBackground() != null && super.getBackground().getRed() != 240 && super.getBackground().getGreen() != 240 && super.getBackground().getBlue() != 240) {    table.setBackground(super.getBackground());  }  table.setBackgroundImage(super.getBackgroundImage());  table.setBackgroundMode(super.getBackgroundMode());  table.setCursor(super.getCursor());  table.setFont(super.getFont());  table.setForeground(super.getForeground());  table.setMenu(super.getMenu());  table.setToolTipText(super.getToolTipText());}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public String toString(int level){  if (level > levelwiseNames.length) {    throw new IllegalArgumentException("Specified level exceeds depth of hierarchy.");  }  StringBuilder name=new StringBuilder();  for (int i=0; i < level; i++) {    name.append(this.getNameAt(i));    if (i < level - 1) {      name.append(this.separatorString);    }  }  return name.toString();}  }
class C{  public void loadStatus() throws IOException, SolrCoreLoadException {  String command=String.format("http://%s:%s/solr/admin/cores?action=STATUS&core=%s",host,SolrInteractionUtils.DEFAULT_SOLR_PORT,name);  InputStream result=null;  try {    result=SolrInteractionUtils.executeSolrCommandAndGetInputStream(command);    List<String> data=SolrInteractionUtils.parseStatusResponse(result,new String[]{String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/int[@name='numDocs']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/int[@name='maxDoc']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/int[@name='deletedDocs']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/long[@name='version']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/int[@name='segmentCount']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/date[@name='lastModified']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/long[@name='sizeInBytes']/text()",name),String.format("/response/lst[@name='initFailures']/lst[@name='%s']/text()",name),String.format("/response/lst[@name='status']/lst[@name='%s']/lst[@name='index']/bool[@name='current']/text()",name)});    boolean isCleanCore=StringUtils.isBlank(data.get(7));    if (!isCleanCore) {      String message=String.format("Core %s  has initialization exceptions..",name);      logger.info(message);      throw new SolrCoreLoadException(message);    }    numDocs=Integer.parseInt(data.get(0));    if (!StringUtils.isBlank(data.get(1))) {      maxDocs=Integer.parseInt(data.get(1));    }    deletedDocs=Integer.parseInt(data.get(2));    version=Long.parseLong(data.get(3));    if (!StringUtils.isBlank(data.get(4))) {      segmentCount=Integer.parseInt(data.get(4));    }    if (!StringUtils.isBlank(data.get(5))) {      lastModified=data.get(5);    }    if (!StringUtils.isBlank(data.get(6))) {      sizeInBytes=Long.parseLong(data.get(6));    }    if (!StringUtils.isBlank(data.get(8))) {      this.current=Boolean.parseBoolean(data.get(8));    }    this.available=true;  } catch (  Exception e) {    throw new SolrCoreLoadException("Exception while trying to get core status for " + name);  } finally {    if (result != null) {      result.close();    }  }}  }
class C{  protected final DTMAxisIterator resetPosition(){  _position=0;  return this;}  }
class C{  private void updateSelection(Mode mode,Projection2D proj,SVGPoint p1,SVGPoint p2){  DBIDSelection selContext=context.getSelection();  HashSetModifiableDBIDs selection;  if (selContext == null || mode == Mode.REPLACE) {    selection=DBIDUtil.newHashSet();  } else {    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());  }  for (DBIDIter iditer=rel.iterDBIDs(); iditer.valid(); iditer.advance()) {    double[] vec=proj.fastProjectDataToRenderSpace(rel.get(iditer));    if (vec[0] >= Math.min(p1.getX(),p2.getX()) && vec[0] <= Math.max(p1.getX(),p2.getX()) && vec[1] >= Math.min(p1.getY(),p2.getY()) && vec[1] <= Math.max(p1.getY(),p2.getY())) {      if (mode == Mode.INVERT) {        if (!selection.contains(iditer)) {          selection.add(iditer);        } else {          selection.remove(iditer);        }      } else {        selection.add(iditer);      }    }  }  context.setSelection(new DBIDSelection(selection));}  }
class C{  public EventSpeechRuleProcessor(TalkBackService context){  mContext=context;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof Enum) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public CircularWallForce(float x,float y,float r){  this(DEFAULT_GRAV_CONSTANT,x,y,r);}  }
class C{  public Command(String command,Image icon,int id){  this.command=command;  this.commandId=id;  this.icon=icon;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  public int start(int group){  return matcher.start(group);}  }
class C{  protected void tearDown() throws Exception {  if (f.exists()) {    f.delete();  }  super.tearDown();}  }
class C{  public static ViewAction swipeDownSlow(){  return actionWithAssertions(new GeneralSwipeAction(Swipe.SLOW,translate(GeneralLocation.TOP_CENTER,0,EDGE_FUZZ_FACTOR),GeneralLocation.BOTTOM_CENTER,Press.FINGER));}  }
class C{  public static boolean isLaunchErrorActivityWhenInBackground(){  return launchErrorActivityWhenInBackground;}  }
class C{  public static long createFakeThreadIDForParallelGSPrimaryBucket(int bucketId,long originatingThreadId,int gatewayIndex){  return WanType.PRIMARY.generateWanId(originatingThreadId,bucketId,gatewayIndex);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  state=streetAttr.getSpecified();  assertFalse("streetNotSpecified",state);}  }
class C{  @Post @LogMessageDoc(level="ERROR",message="Error parsing push flow mod request: {request}",explanation="An invalid request was sent to static flow pusher",recommendation="Fix the format of the static flow mod request") public String store(String fmJson){  IStorageSourceService storageSource=(IStorageSourceService)getContext().getAttributes().get(IStorageSourceService.class.getCanonicalName());  Map<String,Object> rowValues;  try {    rowValues=StaticFlowEntries.jsonToStorageEntry(fmJson);    String status=null;    int state=checkFlow(rowValues);    if (state == 1) {      status="Warning! Must specify eth_type of IPv4/IPv6 to " + "match on IPv4/IPv6 fields! The flow has been discarded.";      log.error(status);    } else     if (state == 2) {      status="Warning! eth_type not recognized! The flow has been discarded.";      log.error(status);    } else     if (state == 3) {      status="Warning! Must specify ip_proto to match! The flow has been discarded.";      log.error(status);    } else     if (state == 4) {      status="Warning! ip_proto invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 5) {      status="Warning! Must specify icmp6_type to match! The flow has been discarded.";      log.error(status);    } else     if (state == 6) {      status="Warning! icmp6_type invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 7) {      status="Warning! IPv4 & IPv6 fields cannot be specified in the same flow! The flow has been discarded.";      log.error(status);    } else     if (state == 0) {      status="Entry pushed";      storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,rowValues);    }    return ("{\"status\" : \"" + status + "\"}");  } catch (  IOException e) {    log.error("Error parsing push flow mod request: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse flod mod, see log for details.\"}";  }}  }
class C{  @Override public Long renamenx(final byte[] oldkey,final byte[] newkey){  checkIsInMultiOrPipeline();  client.renamenx(oldkey,newkey);  return client.getIntegerReply();}  }
class C{  public void put(String email,MXID mxid){  if ((null != email) && (null != mxid) && !TextUtils.isEmpty(mxid.mMatrixId)) {    mMXIDsByElement.put(email,mxid);  }}  }
class C{  public void testKingCapture() throws ChessParseError {  Position pos=TextIO.readFEN("8/4k3/8/8/8/8/8/4RK2 b - - 0 1");  pos.setWhiteMove(true);  List<String> strMoves=getMoveList(pos,false);  assertEquals(1,strMoves.size());  assertEquals("Re1xe7",strMoves.get(0));  pos.setPiece(Position.getSquare(0,2),Piece.WBISHOP);  pos.setPiece(Position.getSquare(4,1),Piece.WPAWN);  strMoves=getMoveList(pos,false);  assertEquals(1,strMoves.size());  assertEquals("Ba3xe7",strMoves.get(0));  pos.setPiece(Position.getSquare(1,3),Piece.WPAWN);  pos.setPiece(Position.getSquare(5,5),Piece.WPAWN);  strMoves=getMoveList(pos,false);  assertEquals(1,strMoves.size());  assertEquals("f6xe7",strMoves.get(0));}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public ACLAssignments updateAcls(@PathParam("id") URI id,ACLAssignmentChanges changes){  return updateAclsOnVirtualPool(VirtualPool.Type.file,id,changes);}  }
class C{  private void onGalleryImageClick(final GalleryCursorAdapter.GridCellViewHolder holder,int position){  if ((!multiSelectionHandleClick(holder)) && (mGalleryListener != null)) {    if (holder.filter != null) {      QueryParameter subGalleryQuery=new QueryParameter(FotoSql.queryDetail);      subGalleryQuery.addWhere(holder.filter);      onOpenChildGallery(subGalleryQuery);      return;    }    long imageID=holder.imageID;    mGalleryListener.onGalleryImageClick(imageID,getUri(imageID),position);  }}  }
class C{  public void append(int key,char value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    char[] nvalues=new char[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  @Override public void write(URI uri,URIChooser chooser) throws IOException {  new SVGOutputFormat().write(new File(uri),svgPanel.getDrawing());}  }
class C{  public void generateOptimizedLessThanOrEqual(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  int promotedTypeID=(this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;  if (promotedTypeID == TypeIds.T_int) {    if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {      this.right.generateCode(currentScope,valueRequired);      return;    }    if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public boolean canPace(){  return true;}  }
class C{  public static int EPERM(){  return Errno.EPERM.intValue();}  }
class C{  public EntityQuery maxRows(int maxRows){  this.maxRows=maxRows;  return this;}  }
class C{  public Period plusMillis(int millis){  if (millis == 0) {    return this;  }  int[] values=getValues();  getPeriodType().addIndexedField(this,PeriodType.MILLI_INDEX,values,millis);  return new Period(values,getPeriodType());}  }
class C{  @Override public AnnotationMirror multiplication(AnnotatedTypeMirror lht,AnnotatedTypeMirror rht){  if (UnitsRelationsTools.hasSpecificUnitIgnoringPrefix(lht,m) && UnitsRelationsTools.hasSpecificUnitIgnoringPrefix(rht,m)) {    if (UnitsRelationsTools.hasNoPrefix(lht) && UnitsRelationsTools.hasNoPrefix(rht)) {      return m2;    }    Prefix lhtPrefix=UnitsRelationsTools.getPrefix(lht);    Prefix rhtPrefix=UnitsRelationsTools.getPrefix(rht);    if (bothHaveSpecificPrefix(lhtPrefix,rhtPrefix,Prefix.kilo)) {      return km2;    } else     if (bothHaveSpecificPrefix(lhtPrefix,rhtPrefix,Prefix.one)) {      return m2;    } else     if (bothHaveSpecificPrefix(lhtPrefix,rhtPrefix,Prefix.milli)) {      return mm2;    } else {      return null;    }  } else   if (havePairOfUnitsIgnoringOrder(lht,s,rht,mPERs)) {    return m;  } else   if (havePairOfUnitsIgnoringOrder(lht,s,rht,mPERs2)) {    return mPERs;  } else   if (havePairOfUnitsIgnoringOrder(lht,h,rht,kmPERh)) {    return km;  } else {    return null;  }}  }
class C{  public void clearData(){  int seriesCount=dataset.getSeriesCount();  for (int i=0; seriesCount > i; ++i) {    dataset.getSeries(i).clear();  }}  }
class C{  public PdfRendererBuilder defaultTextDirection(TextDirection textDirection){  this._textDirection=textDirection == TextDirection.RTL;  return this;}  }
class C{  @SuppressWarnings("unchecked") private Method findMethod(Class itf,String methodName,Class[] params){  assert itf.isInterface() == true;  Method res=null;  try {    res=itf.getDeclaredMethod(methodName,params);    if (res != null)     return res;  } catch (  NoSuchMethodException e) {  }  Class[] superItfs=itf.getInterfaces();  for (  Class superItf : superItfs) {    res=findMethod(superItf,methodName,params);    if (res != null)     return res;  }  return res;}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(ipaddress);}  }
class C{  public void concat() throws IOException {  writeCode(STRING_ADD);}  }
class C{  public HighlightBuilder boundaryMaxScan(Integer boundaryMaxScan){  this.boundaryMaxScan=boundaryMaxScan;  return this;}  }
class C{  public void insertValue(double val,double label,double weight){  if (val == this.cut_point) {    this.leftStatistics.addToValue(0,1);    this.leftStatistics.addToValue(1,label);    this.leftStatistics.addToValue(2,label * label);  } else   if (val <= this.cut_point) {    this.leftStatistics.addToValue(0,1);    this.leftStatistics.addToValue(1,label);    this.leftStatistics.addToValue(2,label * label);    if (this.left == null) {      this.left=new Node(val,label,weight);    } else {      this.left.insertValue(val,label,weight);    }  } else {    this.rightStatistics.addToValue(0,1);    this.rightStatistics.addToValue(1,label);    this.rightStatistics.addToValue(2,label * label);    if (this.right == null) {      this.right=new Node(val,label,weight);    } else {      this.right.insertValue(val,label,weight);    }  }}  }
class C{  public void search(IWorkspace workspace,String patternString,int searchFor,int limitTo,IJavaSearchScope scope,IJavaSearchResultCollector resultCollector) throws JavaModelException {  throw new UnsupportedOperationException();}  }
class C{  private void startEmbeddedCassandra(){  if (log != null) {    log.info("-------------------------------");    log.info("| Starting embedded Cassandra |");    log.info("-------------------------------");  }  try {    if (jmxPort != null)     System.setProperty(CASSANDRA_JMX_PORT_PROP,jmxPort);    if (cassandraCfgFile != null)     System.setProperty(CASSANDRA_CONFIG_PROP,FILE_PREFIX + cassandraCfgFile);    embeddedCassandraDaemon=new CassandraDaemon(true);    embeddedCassandraDaemon.init(null);    embeddedCassandraDaemon.start();  } catch (  Exception e) {    throw new RuntimeException("Failed to start embedded Cassandra",e);  }  if (log != null) {    log.info("------------------------------");    log.info("| Embedded Cassandra started |");    log.info("------------------------------");  }}  }
class C{  public static int[] extGCD(int a,int b){  BigInteger ba=BigInteger.valueOf(a);  BigInteger bb=BigInteger.valueOf(b);  BigInteger[] bresult=extgcd(ba,bb);  int[] result=new int[3];  result[0]=bresult[0].intValue();  result[1]=bresult[1].intValue();  result[2]=bresult[2].intValue();  return result;}  }
class C{  public MWMSectionType(Properties ctx,int WM_Section_Type_ID,String trxName){  super(ctx,WM_Section_Type_ID,trxName);  if (WM_Section_Type_ID == 0) {  }}  }
class C{  public void write() throws IOException {  if (trace) {    say((numObjects / 1024) + "k objects");    say((numAddresses / 1024) + "k non-null object references");    say(numNulledReferences + " references nulled because they are " + "non-jdk fields or point to non-bootimage objects");    say(((Statics.getNumberOfReferenceSlots() + Statics.getNumberOfNumericSlots()) / 1024) + "k jtoc slots");    say((getDataSize() / 1024) + "k data in image");    say((getCodeSize() / 1024) + "k code in image");    say("writing " + imageDataFileName);  }  if (!mapByteBuffers) {    dataOut.write(bootImageData.array(),0,getDataSize());  } else {    dataOut.getChannel().truncate(getDataSize());  }  dataOut.close();  if (trace) {    say("writing " + imageCodeFileName);  }  if (!mapByteBuffers) {    codeOut.write(bootImageCode.array(),0,getCodeSize());  } else {    codeOut.getChannel().truncate(getCodeSize());  }  codeOut.close();  if (trace) {    say("writing " + imageRMapFileName);  }  bootImageRMap=new byte[referenceMapReferences << LOG_BYTES_IN_WORD];  rMapSize=ScanBootImage.encodeRMap(bootImageRMap,referenceMap,referenceMapLimit);  FileOutputStream rmapOut=new FileOutputStream(imageRMapFileName);  rmapOut.write(bootImageRMap,0,rMapSize);  rmapOut.flush();  rmapOut.close();  if (trace) {    say("total refs: " + referenceMapReferences);  }  ScanBootImage.encodingStats();}  }
class C{  public UF3(){  this(30);}  }
class C{  public static int[] decodeClass(String s){  return MLUtils.toIntArray(s.substring(2));}  }
class C{  public BillingAdapterNotFoundException(String message){  super(message);}  }
class C{  @Override public int hashCode(){  if (hash == 0) {    int result=17;    result=37 * result + range.hashCode();    long bitsWeight=Double.doubleToLongBits(weight);    result=37 * result + (int)(bitsWeight ^ (bitsWeight >>> 32));    hash=result;  }  return hash;}  }
class C{  void checkPermissions(MultiplePermissionsListener listener,Collection<String> permissions,Thread thread){  checkMultiplePermissions(listener,permissions,thread);}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println(DbAuthenticateModule.getEncodedPassword(args[0]));}  }
class C{  private long parseDateTerm(String term) throws ParseException {  String dateTerm=term.replace("NOW","+0MILLISECOND");  return parseDate(dateTerm);}  }
class C{  public double logMarginalLikelihoodHarmonic(List<Double> v){  double sum=0;  final int size=v.size();  for (int i=0; i < size; i++)   sum+=v.get(i);  double denominator=LogTricks.logZero;  for (int i=0; i < size; i++)   denominator=LogTricks.logSum(denominator,sum - v.get(i));  return sum - denominator + StrictMath.log(size);}  }
class C{  public void deflate(View view,OutputStream out) throws IOException {  Document doc=deflateToDocument(view);  try {    DOMSource source=new DOMSource(doc);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    StreamResult result=new StreamResult(out);    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(source,result);  } catch (  TransformerException e) {    throw new RuntimeException(e);  }}  }
class C{  public static double standardNormalCdf(double x){  double a=(x) / (Math.sqrt(2.0));  return 0.5 * (1.0 + ErrorFunction.erf(a));}  }
class C{  public RestoreSnapshotRequest partial(boolean partial){  this.partial=partial;  return this;}  }
class C{  @Override public boolean login() throws RemoteException {  return true;}  }
class C{  public boolean isVirtualFunction(){  return virtualFunction;}  }
class C{  public boolean addRequest(){  return queuesize.getAndIncrement() < 0;}  }
class C{  public DeadEvent(Object source,Object event){  this.source=checkNotNull(source);  this.event=checkNotNull(event);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TimeSeries clone=(TimeSeries)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public void cancelMigrations(List<String> migrationNames,boolean cleanup,boolean remove) throws VPlexApiException {  s_logger.info("Request to cancel migrations on VPlex at {}",_baseURI);  _migrationMgr.cancelMigrations(migrationNames,cleanup,remove);}  }
class C{  public void endCDATA() throws SAXException {  m_handler.endCDATA();}  }
class C{  public boolean isSuppressed(LintCategory lc){  return suppressedValues.contains(lc);}  }
class C{  @Nonnull public BugInstance addClassAndMethod(JavaClass javaClass,Method method){  addClass(javaClass.getClassName());  addMethod(javaClass,method);  if (BCELUtil.isSynthetic(method)) {    foundInSyntheticMethod();  }  return this;}  }
class C{  @Override public void frequencyChanged(FrequencyChangeEvent event) throws SourceException {  if (mFrequencyChangeProcessor != null) {    mFrequencyChangeProcessor.frequencyChanged(event);  }switch (event.getEvent()) {case NOTIFICATION_FREQUENCY_CHANGE:    mTunerFrequency=event.getValue().longValue();  updateMixerFrequencyOffset();break;case REQUEST_CHANNEL_FREQUENCY_CORRECTION_CHANGE:mChannelFrequencyCorrection=event.getValue().intValue();updateMixerFrequencyOffset();if (mFrequencyChangeProcessor != null) {mFrequencyChangeProcessor.frequencyChanged(new FrequencyChangeEvent(Event.NOTIFICATION_CHANNEL_FREQUENCY_CORRECTION_CHANGE,mChannelFrequencyCorrection));}break;case NOTIFICATION_SAMPLE_RATE_CHANGE:int sampleRate=event.getValue().intValue();if (mTunerSampleRate != sampleRate) {mMixer.setSampleRate(sampleRate);mDecimationFilter=FilterFactory.getDecimationFilter(sampleRate,CHANNEL_RATE,1,CHANNEL_PASS_FREQUENCY,60,WindowType.HAMMING);mDecimationFilter.setListener(mListener);mTunerSampleRate=sampleRate;}break;default :break;}}  }
class C{  public AROW(){  this(1e-2,true);}  }
class C{  public PSPProcessingException(String message,Throwable cause){  super(message,cause);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  @ApiOperation(value="Drop triggers for the specified table on the specified engine") @RequestMapping(value="engine/{engine}/table/{table}/droptriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postDropTriggersByEngineByTable(@PathVariable("engine") String engineName,@PathVariable("table") String tableName){  dropTriggersImpl(getSymmetricEngine(engineName),tableName);}  }
class C{  protected void initRecorderParameters(){  mMediaRecorder.setCamera(mCamera);  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);  mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);  mMediaRecorder.setVideoEncoder(mVideoEncoder);  mMediaRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());  mMediaRecorder.setVideoSize(mQuality.resX,mQuality.resY);  mMediaRecorder.setVideoFrameRate(mQuality.framerate);  mMediaRecorder.setVideoEncodingBitRate(mQuality.bitrate);  mMediaRecorder.setOrientationHint(mQuality.orientation);}  }
class C{  public MqttIdentifierRejectedException(){}  }
class C{  public void generate(DocCommentTable table){  xml.append("<asdoc>\n");  Iterator packageIterator=table.getPackages().keySet().iterator();  while (packageIterator.hasNext()) {    String currentPackage=(String)packageIterator.next();    Iterator classIterator=table.getClassesAndInterfaces(currentPackage).keySet().iterator();    while (classIterator.hasNext()) {      String currentClass=(String)classIterator.next();      Iterator commentsIterator=table.getAllClassComments(currentClass,currentPackage).iterator();      while (commentsIterator.hasNext()) {        emitDocComment((DocComment)commentsIterator.next());      }    }  }  xml.append("\n</asdoc>\n");}  }
class C{  public static void print(boolean x){  out.print(x);  out.flush();}  }
class C{  public InterpreterSetting(InterpreterSetting o){  this(generateId(),o.getName(),o.getGroup(),o.getInterpreterInfos(),o.getProperties(),o.getDependencies(),o.getOption(),o.getPath());}  }
class C{  static public IServiceManager asInterface(IBinder obj){  if (obj == null) {    return null;  }  IServiceManager in=(IServiceManager)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ServiceManagerProxy(obj);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.457 -0500",hash_original_method="87F4CF9B4558729C608B779F834C4D2A",hash_generated_method="C11DC780A9FA5D5DD147BBB9BA9688DC") private static void dualPivotQuicksort(float[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  float ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    float t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    float t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    float t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    float t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    float t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  float pivot1=ae2;  a[e2]=a[left];  float pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public static int levenshteinDistance(String o1,String o2){  if (o1.length() > o2.length()) {    return levenshteinDistance(o2,o1);  }  final int l1=o1.length(), l2=o2.length();  if (l1 == l2 && o1.hashCode() == o2.hashCode() && o1.equals(o2)) {    return 0;  }  final int prefix=prefixLen(o1,o2);  if (prefix == l1 || prefix == l2) {    return Math.abs(l1 - l2);  }  final int postfix=postfixLen(o1,o2,prefix);  return (prefix + postfix == l1 || prefix + postfix == l2) ? Math.abs(l1 - l2) : (l1 == l2 && prefix + postfix + 1 == l1) ? 1 : levenshteinDistance(o1,o2,prefix,postfix);}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key){  return this.optEnum(clazz,key,null);}  }
class C{  @Override public synchronized OpcTcpServer close(){  logger.info("{} closed",getBoundAddress());  if (!getState().isClosed()) {    setState(CloseableObjectState.Closing);  }  try {    for (    SocketHandle sh : socketHandleSnapshot())     sh.close();  }  finally {    setState(CloseableObjectState.Closed);  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? "" : a.getFullString();}  }
class C{  public static String chooseGroup(String group,Class<?> klass){  if (group == null || group.isEmpty()) {    group=klass.getPackage() == null ? "" : klass.getPackage().getName();  }  return group;}  }
class C{  public void serializeDOM3(Node node) throws IOException {  try {    DOM3TreeWalker walker=new DOM3TreeWalker(fSerializationHandler,fErrorHandler,fSerializerFilter,fNewLine);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  public UpdatedBayesIm(BayesIm bayesIm,Evidence evidence){  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }  if (evidence.isIncompatibleWith(bayesIm)) {    throw new IllegalArgumentException("Variables for this evidence must be compatible with those " + "of the model Bayes IM");  }  this.bayesIm=bayesIm;  this.evidence=new Evidence(evidence,bayesIm);  this.changedProbs=new double[bayesIm.getNumNodes()][][];  this.affectedVars=ancestorsOfEvidence(evidence);}  }
class C{  public SVGOMAnimatedNumber(AbstractElement elt,String ns,String ln,float val,boolean allowPercentage){  super(elt,ns,ln);  defaultValue=val;  this.allowPercentage=allowPercentage;}  }
class C{  static public AttachmentTask startDownload(AttachmentView imageView,boolean cacheFlag){  AttachmentTask downloadTask=sInstance.mPhotoTaskWorkQueue.poll();  if (null == downloadTask) {    downloadTask=new AttachmentTask();  }  downloadTask.initializeDownloaderTask(AttachmentManager.sInstance,imageView,cacheFlag);  if (!downloadTask.getMessage().isAttachmentDownloaded()) {    sInstance.mDownloadThreadPool.execute(downloadTask.getHTTPDownloadRunnable());    sInstance.attachmentInProgress.add(downloadTask.getMessage().getKeyString());    sInstance.attachmentTaskList.add(downloadTask);    imageView.getProressBar().setVisibility(View.VISIBLE);  } else {    sInstance.handleState(downloadTask,DOWNLOAD_COMPLETE);  }  return downloadTask;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.PROJECT_REFERENCE__PROJECT:    return getProject();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void resetToPreferredSizes(int availableSize){  int[] testSizes=getPreferredSizes();  int totalSize=0;  for (int counter=0; counter < 3; counter++) {    if (testSizes[counter] != -1) {      totalSize+=testSizes[counter];    }  }  if (totalSize > availableSize) {    testSizes=getMinimumSizes();    totalSize=0;    for (int counter=0; counter < 3; counter++) {      if (testSizes[counter] != -1) {        totalSize+=testSizes[counter];      }    }  }  setSizes(testSizes);  distributeSpace(availableSize - totalSize,false);}  }
class C{  private static boolean defineSoleIndentIfPossible(@NotNull ChangeIndentContext context){  int prevLine=context.targetLine - 1;  while (prevLine >= 0 && isLineContainsWhiteSpacesOnlyEmpty(context.document,prevLine)) {    prevLine--;  }  if (prevLine < 0) {    return false;  }  int indent=getLineIndent(context,prevLine);  int newIndent=-1;  if (isLineStartsWithCompoundStatement(context,prevLine)) {    newIndent=indent + context.getIndentOptions().INDENT_SIZE;  } else   if (indent < getLineIndent(context,context.targetLine)) {    newIndent=indent;  }  if (newIndent < 0) {    return false;  }  changeIndent(context,newIndent);  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_DEACTIVATION___TRACECASE_DEACT_NAME_1:    return TRACECASE_DEACT_NAME_1_EDEFAULT == null ? tracecase_deact_name_1 != null : !TRACECASE_DEACT_NAME_1_EDEFAULT.equals(tracecase_deact_name_1);case UmplePackage.TRACE_CASE_DEACTIVATION___DE_ACTIVATE_FOR_1:  return deActivateFor_1 != null && !deActivateFor_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void overrideStylePropertyChanged(CSSStylableElement e,String name,String value,String prio){  Iterator i=cssNavigableDocumentListeners.keySet().iterator();  while (i.hasNext()) {    CSSNavigableDocumentListener l=(CSSNavigableDocumentListener)i.next();    l.overrideStylePropertyChanged(e,name,value,prio);  }}  }
class C{  public void drawContours(Mat img,Color color){  Drawing.drawContours(img,contours,color);}  }
class C{  private void drain(IVisitKDNode visitor){  if (below != null) {    below.drain(visitor);  }  visitor.drain(this);  if (above != null) {    above.drain(visitor);  }}  }
class C{  public static org.oscm.internal.vo.VOPriceModelLocalization convertToUp(org.oscm.vo.VOPriceModelLocalization oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPriceModelLocalization newVO=new org.oscm.internal.vo.VOPriceModelLocalization();  newVO.setDescriptions(convertToUpVOLocalizedText(oldVO.getDescriptions()));  newVO.setLicenses(convertToUpVOLocalizedText(oldVO.getLicenses()));  return newVO;}  }
class C{  public static String fromByteArray(byte[] bytes){  return new String(asCharArray(bytes));}  }
class C{  public UpdateManagerEvent(Object source,BufferedImage bi,List das,boolean cpt){  super(source);  this.image=bi;  this.dirtyAreas=das;  this.clearPaintingTransform=cpt;}  }
class C{  protected void writeLinkToStorage(Link lt,LinkInfo linkInfo){  LinkType type=getLinkType(lt,linkInfo);  Map<String,Object> rowValues=new HashMap<String,Object>();  String id=getLinkId(lt);  rowValues.put(LINK_ID,id);  rowValues.put(LINK_VALID_TIME,linkInfo.getUnicastValidTime());  String srcDpid=lt.getSrc().toString();  rowValues.put(LINK_SRC_SWITCH,srcDpid);  rowValues.put(LINK_SRC_PORT,lt.getSrcPort());  if (type == LinkType.DIRECT_LINK)   rowValues.put(LINK_TYPE,"internal"); else   if (type == LinkType.MULTIHOP_LINK)   rowValues.put(LINK_TYPE,"external"); else   if (type == LinkType.TUNNEL)   rowValues.put(LINK_TYPE,"tunnel"); else   rowValues.put(LINK_TYPE,"invalid");  String dstDpid=lt.getDst().toString();  rowValues.put(LINK_DST_SWITCH,dstDpid);  rowValues.put(LINK_DST_PORT,lt.getDstPort());  storageSourceService.updateRowAsync(LINK_TABLE_NAME,rowValues);}  }
class C{  public boolean isDeclineActiveList(){  return declineActiveList;}  }
class C{  public synchronized void entering(String sourceClass,String sourceMethod,Object[] params){  LogRecord record=new LogRecord(Level.CONFIG,"Entering method");  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public UniversalDataSource add(String name,String className,TungstenProperties attributes) throws ReplicatorException, InterruptedException {  if (datasources.get(name) != null) {    throw new ReplicatorException("Foiled attempt to load duplicate data source: name=" + name);  }  try {    logger.info("Loading data source: name=" + name + " className="+ className);    UniversalDataSource datasource=(UniversalDataSource)Class.forName(className).newInstance();    attributes.applyProperties(datasource);    datasource.setName(name);    datasources.put(name,datasource);    return datasource;  } catch (  Exception e) {    throw new ReplicatorException("Unable to instantiate data source: name=" + name + " className="+ className+ " message="+ e.getMessage(),e);  }}  }
class C{  protected GenericHandler(){  super();  contextStore=new ContextStore();  context=null;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  initCore("solrconfig-functionquery.xml","schema11.xml");  IndexSchema schema=h.getCore().getLatestSchema();  for (  String type : new String[]{"i","l","f","d"}) {    for (    String suffix : new String[]{"","_dv","_ni_dv"}) {      String f="val_t" + type + "s"+ suffix;      SchemaField sf=schema.getField(f);      assertTrue(f + " is not multivalued",sf.multiValued());      assertEquals(f + " doesn't have expected docValues status",f.contains("dv"),sf.hasDocValues());      assertEquals(f + " doesn't have expected index status",!f.contains("ni"),sf.indexed());    }  }}  }
class C{  public void enableCGCopyDirectAcess(FunctionalAPIImpl impl,RPCopyRequestParams copyToEnableDirectAccess) throws RecoverPointException {  String cgCopyName=NAME_UNKNOWN;  String cgName=NAME_UNKNOWN;  String accessState="N/A";  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyToEnableDirectAccess.getCopyVolumeInfo());  try {    cgCopyName=impl.getGroupCopyName(cgCopyUID);    cgName=impl.getGroupName(cgCopyUID.getGroupUID());    ConsistencyGroupCopyState copyState=getCopyState(impl,cgCopyUID);    if (copyState != null && copyState.getStorageAccessState() != null) {      accessState=copyState.getStorageAccessState().name();    }    impl.enableDirectAccess(cgCopyUID);    logger.info(String.format("Waiting for copy %s in consistency group %s to change access state to DIRECT_ACCESS.",cgCopyName,cgName));    waitForCGCopyState(impl,cgCopyUID,false);  } catch (  FunctionalAPIActionFailedException_Exception|FunctionalAPIInternalError_Exception|InterruptedException e) {    throw RecoverPointException.exceptions.failedToEnableDirectAccessForCopy(cgCopyName,cgName,e,accessState);  }}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.663 -0500",hash_original_method="B06912E79E41E10797503036CC965799",hash_generated_method="9D914BF564A8989D727B0640BD894E02") public static Typeface defaultFromStyle(int style){  return sDefaults[style];}  }
class C{  public void terminate(){  try {    emitter.removeNotificationListener(handler);  } catch (  ListenerNotFoundException e) {    log.error("terminate","Listener Not found : " + e);  }}  }
class C{  public static void initialize(){  initializeLogging();  System.setProperty(CMessageBox.DEFAULT_WINDOW_TITLE_PROPERTY,Constants.DEFAULT_WINDOW_TITLE);  initializeFont();  initializeTooltipDelay();  initializeHotkeys();}  }
class C{  public void testReceive_UnconnectedClose() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    assertNull(this.channel1.receive(dst));    fail("Should throw a ClosedChannelException here.");  } catch (  ClosedChannelException e) {  }}  }
class C{  private NeuronDialog(final Collection<NeuronNode> selectedNeurons){  neuronList=getNeuronList(selectedNeurons);}  }
class C{  public int width(){  return width;}  }
class C{  public Matrix4x3d zero(){  m00=0.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=0.0;  m12=0.0;  m20=0.0;  m21=0.0;  m22=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  public SparseGraph(){  vertices=new LinkedHashSet<SparseVertex>();  edges=new LinkedHashSet<SparseEdge>();}  }
class C{  public void selectTable1Column(Index column){  table1Columns.add(column);}  }
class C{  public SpanFirstQuery(SpanQuery match,int end){  super(match,0,end);}  }
class C{  private Component findDropTarget(Component source,int x,int y){  Form f=getComponentForm();  if (f != null) {    Component c=f.findDropTargetAt(x,y);    while (c != null) {      if (c.isDropTarget() && c.draggingOver(source,x - c.getAbsoluteX() - c.getScrollX(),y - c.getAbsoluteY() - c.getScrollY())) {        return c;      }      c=c.getParent();    }  }  return null;}  }
class C{  public boolean isRepost(long itemId){  return Arrays.binarySearch(repostCache.get(),itemId) >= 0;}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchorA,Vector2 anchorB){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  this.length=anchorA.dst(anchorB);}  }
class C{  private void removePreference(String key,String category){  Preference pref=findPreference(key);  PreferenceCategory cat=(PreferenceCategory)findPreference(category);  if (pref != null && cat != null) {    cat.removePreference(pref);  }}  }
class C{  public SerialConfigPanel(SerialPort serPort){  initComponents();  initPortNames();  setPort(serPort);}  }
class C{  protected void nodeToBeRemoved(Node node){  invalidateElementsByTagName(node);}  }
class C{  public void postTweet(int userId,int tweetId){  if (followMap.get(userId) == null) {    Map<Integer,Integer> map=new HashMap<Integer,Integer>();    map.put(userId,1);    followMap.put(userId,map);  }  tweetList.add(tweetId);  userList.add(userId);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public static String initials(final String str){  if (str == null) {    return "";  }  StringBuilder sb=new StringBuilder();  Pattern p=Pattern.compile("^\\w|\\s+\\w");  Matcher m=p.matcher(decode(str));  while (m.find()) {    sb.append(m.group().replaceAll(" ",""));  }  return sb.toString();}  }
class C{  private void swapBlocks(int from,int second,int to){  int len1=second - from, len2=to - second + 1;  if (len1 == 0 || len2 == 0) {    return;  }  if (len1 < temp.length) {    System.arraycopy(data,from,temp,0,len1);    System.arraycopy(data,second,data,from,len2);    System.arraycopy(temp,0,data,from + len2,len1);    return;  } else   if (len2 < temp.length) {    System.arraycopy(data,second,temp,0,len2);    System.arraycopy(data,from,data,from + len2,len1);    System.arraycopy(temp,0,data,from,len2);    return;  }  reverseBlock(from,second - 1);  reverseBlock(second,to);  reverseBlock(from,to);}  }
class C{  public void preSaveInit(){  persistentData.clear();  for (  DataPoint point : vectorToTokenDict.asArrayList()) {    persistentData.add((StringDataPoint)point);  }}  }
class C{  @Override void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  channelNumber=((char)((attributeValue[offset] << 8) | (attributeValue[offset + 1] & 0xFF)));}  }
class C{  public static boolean isUSPhoneMainNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return (isInteger(normalizedPhone) && normalizedPhone.length() == digitsInUSPhoneMainNumber);}  }
class C{  void insertResourceNodes(String pName,String pPath,DefaultMutableTreeNode pParent){  File fp=new File(pPath);  if (!fp.exists()) {    return;  }  if (fp.getName().startsWith(".")) {    return;  }  if (fp.getName().equals("CVS")) {    return;  }  DefaultMutableTreeNode newElement=new DefaultMutableTreeNode(pName);  insertNodeInto(newElement,pParent,pParent.getChildCount());  if (fp.isDirectory()) {    String[] sp=fp.list();    if (sp == null) {      log.warn("unexpected null list() in insertResourceNodes from \"{}\"",pPath);    }    for (int i=0; i < sp.length; i++) {      log.trace("Descend into resource: {}",sp[i]);      insertResourceNodes(sp[i],pPath + "/" + sp[i],newElement);    }  }}  }
class C{  public boolean isCursorScrollable(){  return (getSupportedCursorScrollType() != -1);}  }
class C{  public int writeULongLE(int index,long ul){  this.array.put(index,(byte)(ul & 0xff));  this.array.put(index + 1,(byte)((ul >> 8) & 0xff));  this.array.put(index + 2,(byte)((ul >> 16) & 0xff));  this.array.put(index + 3,(byte)((ul >> 24) & 0xff));  return 4;}  }
class C{  public void validateConfigurationValues() throws ConfigurationException {  if (getKeepAliveTimeout() <= 0 || getKeepAliveTimeout() > ConfigurationConstants.KEEP_ALIVE_TIMEOUT_MAX) {    throw new ConfigurationException("Detected invalid keepAliveTimeout of " + getKeepAliveTimeout() + "ms in router.properties. keepAliveTimeout must be positive and lower than "+ ConfigurationConstants.KEEP_ALIVE_TIMEOUT_MAX+ " ("+ ConfigurationConstants.KEEP_ALIVE_TIMEOUT_MAX / 60000 + "min).");  }  if (getGatewayConnectTimeoutMs() <= 0 || getGatewayConnectTimeoutMs() >= ConfigurationConstants.GATEWAY_CONNECT_TIMEOUT_MS_MAX) {    throw new ConfigurationException("Detected invalid gatewayConnectTimeout of " + getGatewayConnectTimeoutMs() + "ms in router.properties. It must be positive and lower than "+ ConfigurationConstants.GATEWAY_CONNECT_TIMEOUT_MS_MAX+ "ms.");  }}  }
class C{  public boolean isCovered(MasonGeometry g){  Envelope e=g.getGeometry().getEnvelopeInternal();  List<?> gList=spatialIndex.query(e);  if (g.preparedGeometry == null) {    g.preparedGeometry=PreparedGeometryFactory.prepare(g.getGeometry());  }  for (int i=0; i < gList.size(); i++) {    Geometry g1=((MasonGeometry)gList.get(i)).getGeometry();    if (!g.equals(g1) && g.preparedGeometry.covers(g1)) {      return true;    }  }  return false;}  }
class C{  public void addActualMin(BigDecimal add){  m_actualMin=m_actualMin.add(add);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void hideTreeItemControlDecoration(TreeViewer treeViewer,Object data){  if (null == treeViewer) {    return;  }  for (  TreeItemControlDecoration decoration : treeItemControlDecorations) {    if (data == decoration.getData()) {      decoration.hide();      return;    }  }}  }
class C{  public double distance(double x,double y){  return distance(new MyPoint(x,y));}  }
class C{  private Node firstOfMode(boolean isData){  for (Node p=head; p != null; p=succ(p)) {    if (!p.isMatched())     return (p.isData == isData) ? p : null;  }  return null;}  }
class C{  public void write(byte[] b,int off,int len){  return;}  }
class C{  public int peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public synchronized void addActionListener(ActionListener listener){  actionListeners.addElement(listener);}  }
class C{  void assignChannelTypes(Grammar g,List<GrammarAST> channelDefs){  Grammar outermost=g.getOutermostGrammar();  for (  GrammarAST channel : channelDefs) {    String channelName=channel.getText();    if (g.getTokenType(channelName) != Token.INVALID_TYPE) {      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_TOKEN,g.fileName,channel.token,channelName);    }    if (LexerATNFactory.COMMON_CONSTANTS.containsKey(channelName)) {      g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_COMMON_CONSTANTS,g.fileName,channel.token,channelName);    }    if (outermost instanceof LexerGrammar) {      LexerGrammar lexerGrammar=(LexerGrammar)outermost;      if (lexerGrammar.modes.containsKey(channelName)) {        g.tool.errMgr.grammarError(ErrorType.CHANNEL_CONFLICTS_WITH_MODE,g.fileName,channel.token,channelName);      }    }    outermost.defineChannelName(channel.getText());  }}  }
class C{  public final void check(final Predicate<T> property){  final TheoryRunner<P,T> qc=new TheoryRunner<>(this.state.get(),this.ps,this.assumptions,conversion,asString);  qc.check(property);}  }
class C{  public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);}  }
class C{  private void withTaskResults(QueryTask task,Consumer<ServiceDocumentQueryResult> handler){  task.querySpec.options=EnumSet.of(QueryOption.EXPAND_CONTENT);  Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(task).setCompletion(null).sendWith(this);}  }
class C{  public void run(){  PythonInterpreter p=new PythonInterpreter();  for (  String name : this.locals.keySet()) {    p.set(name,this.locals.get(name));  }  URL jarUrl=JythonServer.class.getProtectionDomain().getCodeSource().getLocation();  String jarPath=jarUrl.getPath();  if (jarUrl.getProtocol().equals("file")) {    jarPath=jarPath + "../../src/main/python/";  }  p.exec("import sys");  p.exec("sys.path.append('" + jarPath + "')");  p.exec("from debugserver import run_server");  if (this.host == null) {    p.exec("run_server(port=" + this.port + ", locals=locals())");  } else {    p.exec("run_server(port=" + this.port + ", host='"+ this.host+ "', locals=locals())");  }}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public void eventbase(float offset,String eventbaseID,String eventType){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.436 -0500",hash_original_method="385DB8898AF9AC13D75FFFA3464F288D",hash_generated_method="57E81833D69AF69EB95FF82F92A7308E") private static void dualPivotQuicksort(byte[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    byte t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    byte t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    byte t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    byte t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    byte t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  byte pivot1=ae2;  a[e2]=a[left];  byte pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public boolean remove(AccessibleRelation relation){  if (relations == null) {    return false;  } else {    return relations.removeElement(relation);  }}  }
class C{  public ArffSortedTableModel(TableModel model){  super(model);}  }
class C{  public void sendMessage(ContactId remote,String featureTag,byte[] content,String contentType){  InstantMultimediaMessage msg=new InstantMultimediaMessage(remote,featureTag,content,contentType);  mBuffer.addObject(msg);}  }
class C{  public MemoryLimitException(int memoryNeeded,int memoryLimit){  super("" + memoryNeeded + " KiB of memory would be needed; limit was "+ memoryLimit+ " KiB");  this.memoryNeeded=memoryNeeded;  this.memoryLimit=memoryLimit;}  }
class C{  public BaseSpringSystem(SpringLooper springLooper){  if (springLooper == null) {    throw new IllegalArgumentException("springLooper is required");  }  mSpringLooper=springLooper;  mSpringLooper.setSpringSystem(this);}  }
class C{  public static int indexOf(char[] array,char[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  char c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  public SessionSupport(Object source){  if (source == null) {    throw new IllegalArgumentException("Source must not be null.");  }  this.source=source;}  }
class C{  public ContainerEvent(Component source,int id,Component child){  super(source,id);  this.child=child;}  }
class C{  protected void initRestAssured(){  RestAssured.port=MAIN_PORT;  RestAssured.registerParser("application/json; charset=utf-8",Parser.JSON);  RestAssured.defaultParser=Parser.JSON;  RestAssured.requestSpecification=REQUEST_SPECIFICATION;  RestAssured.requestSpecification.baseUri("http://localhost:" + MAIN_PORT);  RestAssured.requestSpecification.basePath(ROOT);}  }
class C{  public static View convertButton(View convertView,String text,int position){  if (((String)convertView.getTag()).equals("button")) {    ((Button)convertView).setText(text);    convertView.setId(position);    return convertView;  } else {    return null;  }}  }
class C{  public int indexOf(Object elem){  if (elem == null) {    for (int i=0; i < size; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=0; i < size; i++)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public Graph(Table nodes,Table edges,boolean directed,String sourceKey,String targetKey){  init(nodes,edges,directed,DEFAULT_NODE_KEY,sourceKey,targetKey);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  @Override protected void onDestroy(){  if (toolBarHider != null) {    toolBarHider.cancel();    toolBarHider=null;  }  ObdProt.resetFixedPid();  wakeLock.release();  super.onDestroy();}  }
class C{  private String replaceEscape(String inputStr){  int len=inputStr.length();  int p=0;  int i;  String metachars="tnrbf\\\"'";  String chars="\t\n\r\b\f\\\"'";  StringBuffer output=new StringBuffer();  while ((i=inputStr.indexOf('\\',p)) != -1) {    output.append(inputStr.substring(p,i));    if (i + 1 == len)     break;    char metac=inputStr.charAt(i + 1);    int k=metachars.indexOf(metac);    if (k == -1) {      output.append('\\');      output.append(metac);    } else {      output.append(chars.charAt(k));    }    p=i + 2;  }  if (p < len)   output.append(inputStr.substring(p));  return output.toString();}  }
class C{  public void validateNamespace(String expectedNamespaceCode,Namespace actualNamespace){  assertNotNull(actualNamespace);  assertEquals(expectedNamespaceCode,actualNamespace.getNamespaceCode());}  }
class C{  public void init(ExtendedProperties configuration){  rsvc.info("ClasspathResourceLoader : initialization starting.");  rsvc.info("ClasspathResourceLoader : initialization complete.");}  }
class C{  public static DecomposableMatchBuilder1<Double,Double> caseDouble(MatchesAny d){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Double.class));}  }
