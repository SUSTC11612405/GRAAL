class C{  public void addLazyAction(Action<? super C> action){  actions.add(action);}  }
class C{  public void writeRootBlock(final IRootBlockView rootBlock,final ForceEnum forceOnCommit){  if (rootBlock == null)   throw new IllegalArgumentException();  checkRootBlock(rootBlock);  assertOpen();  if (log.isTraceEnabled()) {    log.trace("Writing new rootblock with commitCounter: " + rootBlock.getCommitCounter() + ", commitRecordAddr: "+ rootBlock.getCommitRecordAddr()+ ", commitRecordIndexAddr: "+ rootBlock.getCommitRecordIndexAddr());  }  try {    final ByteBuffer data=rootBlock.asReadOnlyBuffer();    final long pos=rootBlock.isRootBlock0() ? FileMetadata.OFFSET_ROOT_BLOCK0 : FileMetadata.OFFSET_ROOT_BLOCK1;    final Lock lock=m_extensionLock.readLock();    lock.lock();    try {      FileChannelUtility.writeAll(m_reopener,data,pos);      m_reopener.reopenChannel().force(forceOnCommit == ForceEnum.ForceMetadata);      final StoreCounters<?> c=(StoreCounters<?>)storeCounters.get().acquire();      try {        c.nwriteRootBlock++;      }  finally {        c.release();      }      if (m_committedNextAllocation != m_nextAllocation) {        if (log.isTraceEnabled())         log.trace("Updating committedNextAllocation from writeRootBlock");        m_committedNextAllocation=m_nextAllocation;      }    }  finally {      lock.unlock();    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  if (log.isDebugEnabled())   log.debug("wrote root block: " + rootBlock);}  }
class C{  static int formatUnsignedLong(long val,int shift,char[] buf,int offset,int len){  int charPos=len;  int radix=1 << shift;  int mask=radix - 1;  do {    buf[offset + --charPos]=Integer.digits[((int)val) & mask];    val>>>=shift;  } while (val != 0 && charPos > 0);  return charPos;}  }
class C{  public final void testRSAKeyGenParameterSpec(){  AlgorithmParameterSpec aps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertTrue(aps instanceof RSAKeyGenParameterSpec);}  }
class C{  public static ContentBlock highlighted(String content){  return new ContentBlock(content,true);}  }
class C{  public double scoreDag(Graph dag){  buildIndexing(dag.getNodes());  double _score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    int yIndex=hashIndices.get(y);    _score+=score.localScore(yIndex,parentIndices);  }  return _score;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT + "/pages");}  }
class C{  public DockerMachineSource withDigest(String digest){  this.digest=digest;  return this;}  }
class C{  public Label resolveText(){  return resolveText(String.class);}  }
class C{  public int add(final String code,final String[] params){  return addHelper(code,params);}  }
class C{  public void removeTag(int position){  onRemoveTag(position);  postInvalidate();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SecretKeySpec)) {    return false;  }  SecretKeySpec ks=(SecretKeySpec)obj;  return (algorithm.equalsIgnoreCase(ks.algorithm)) && (Arrays.equals(key,ks.key));}  }
class C{  public boolean isTimedOut(){  if (null != job_step_timeout && null != start_time) {    return System.currentTimeMillis() - start_time > job_step_timeout;  } else {    return false;  }}  }
class C{  public Axis A(String dimension) throws ScopeException {  try {    DomainHierarchy hierarchy=universe.getDomainHierarchy(domain,true);    for (    DimensionIndex index : hierarchy.getDimensionIndexes()) {      if (index.getDimensionName().compareTo(dimension) == 0) {        return A(index.getDimension());      }    }  } catch (  ComputingException|InterruptedException e) {    throw new ScopeException(e);  }  return null;}  }
class C{  public static Edge serializableInstance(){  return new KnowledgeModelEdge(new KnowledgeModelNode("X"),new KnowledgeModelNode("Y"),KnowledgeModelEdge.REQUIRED);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.448 -0500",hash_original_method="2655E37A6129D552BDB18D712FBDBB78",hash_generated_method="8951C539A9C2F41CB574489BCEB168EB") public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  private MultivariateTimeSeries buildMultiVariateTimeSeries(MetricTimeSeries timeSeries){  MultivariateTimeSeries multivariateTimeSeries=new MultivariateTimeSeries(1);  if (timeSeries.size() > 0) {    timeSeries.sort();    long formerTimestamp=timeSeries.getTime(0);    double formerValue=timeSeries.getValue(0);    int timesSameTimestamp=0;    for (int i=1; i < timeSeries.size(); i++) {      if (formerTimestamp == timeSeries.getTime(i)) {        formerValue+=timeSeries.getValue(i);        timesSameTimestamp++;      } else {        if (timesSameTimestamp > 0) {          formerValue=formerValue / timesSameTimestamp;          timesSameTimestamp=0;        }        multivariateTimeSeries.add(formerTimestamp,new double[]{formerValue});        formerTimestamp=timeSeries.getTime(i);        formerValue=timeSeries.getValue(i);      }    }    multivariateTimeSeries.add(formerTimestamp,new double[]{formerValue});  }  return multivariateTimeSeries;}  }
class C{  private void handleOtherStatus(State state,InnerState innerState,int statusCode) throws StopRequest {  int finalStatus;  if (DownloaderService.isStatusError(statusCode)) {    finalStatus=statusCode;  } else   if (statusCode >= 300 && statusCode < 400) {    finalStatus=DownloaderService.STATUS_UNHANDLED_REDIRECT;  } else   if (innerState.mContinuingDownload && statusCode == DownloaderService.STATUS_SUCCESS) {    finalStatus=DownloaderService.STATUS_CANNOT_RESUME;  } else {    finalStatus=DownloaderService.STATUS_UNHANDLED_HTTP_CODE;  }  throw new StopRequest(finalStatus,"http error " + statusCode);}  }
class C{  public static Values createEconomicValuesBVWP2010(){  Values economicValues=new Values();{    ValuesForAMode valuesForAMode=economicValues.getByMode(Mode.road);{      Attributes valuesForAModeAndDemandSegment=valuesForAMode.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL);      valuesForAModeAndDemandSegment.setByEntry(Attribute.hrs,-18.00);    }  }{    ValuesForAMode valuesForAMode=economicValues.getByMode(Mode.rail);{      Attributes valuesForAModeAndDemandSegment=valuesForAMode.getByDemandSegment(DemandSegment.PV_NON_COMMERCIAL);      valuesForAModeAndDemandSegment.setByEntry(Attribute.hrs,-18.00);    }  }{    ValuesForAMode roadValues=economicValues.getByMode(Mode.road);{      Attributes values=roadValues.getByDemandSegment(DemandSegment.GV);      values.setByEntry(Attribute.hrs,-0.00);    }  }{    ValuesForAMode railValues=economicValues.getByMode(Mode.rail);{      Attributes values=railValues.getByDemandSegment(DemandSegment.GV);      values.setByEntry(Attribute.hrs,-0.00);    }  }  for (  Mode mode : Mode.values()) {    for (    DemandSegment segment : DemandSegment.values()) {      Attributes vv=economicValues.getByMode(mode).getByDemandSegment(segment);      vv.setByEntry(Attribute.priceUser,-1.);      vv.setByEntry(Attribute.costOfProduction,-1.);      vv.setByEntry(Attribute.km,-0.0);      vv.setByEntry(Attribute.excess_hrs,0.);    }  }  return economicValues;}  }
class C{  @Override protected void consumLogic(Entry<Stock,Integer> entry) throws Exception {  Stock stock=entry.getKey();  int k=entry.getValue();  Connection connection=DatabaseAccessor.Holder.ACCESSOR.getConnection();  StringBuilder builder=new StringBuilder();  builder.append("insert into stock_vip_followers ").append("(stock_id, stock_name, vip_count) ").append("values (?, ?, ?)").append("on duplicate key update vip_count=?");  String sql=builder.toString();  PreparedStatement statement=connection.prepareStatement(sql);  statement.setString(1,stock.getStockNo());  statement.setString(2,stock.getStockName());  statement.setInt(3,k);  statement.setInt(4,k);  statement.execute();  DatabaseAccessor.Holder.ACCESSOR.returnConnection(connection);}  }
class C{  public boolean isForce(){  return force;}  }
class C{  private void applyStateChange(@NotNull IncrementalCacheUpdateEvent event,int softWrappedLinesDiff){  CacheEntry lastEntry=myCache.isEmpty() ? null : myCache.get(myCache.size() - 1);  int lengthDiff=event.getLengthDiff();  int recalcEndOffsetTranslated=event.getActualEndOffset() - lengthDiff;  int startIndex=MappingUtil.getCacheEntryIndexForOffset(event.getStartOffset(),myEditor.getDocument(),myCache);  if (startIndex < 0) {    startIndex=-startIndex - 1;  }  int foldedLinesDiff=0;  for (int i=startIndex; i < myCache.size(); i++) {    CacheEntry entry=myCache.get(i);    foldedLinesDiff+=entry.endFoldedLines - entry.startFoldedLines;  }  int logicalLinesDiff=event.getLogicalLinesDiff();  int firstIndex=-1;  int borderLogicalLine=lastEntry == null ? -1 : lastEntry.endLogicalLine;  int borderColumnDiff=0;  int borderFoldedColumnDiff=0;  int borderSoftWrapColumnDiff=0;  int borderSoftWrapLinesBeforeDiff=0;  int borderSoftWrapLinesCurrentDiff=0;  int affectedEntriesCount=myAffectedByUpdateCacheEntries.size();  for (int i=0; i < affectedEntriesCount; i++) {    CacheEntry entry=myAffectedByUpdateCacheEntries.get(i);    if (firstIndex < 0) {      if (entry.startOffset < recalcEndOffsetTranslated) {        foldedLinesDiff-=entry.endFoldedLines - entry.startFoldedLines;        continue;      }      firstIndex=i;      if (lastEntry != null && entry.startLogicalLine + logicalLinesDiff == borderLogicalLine) {        borderColumnDiff=lastEntry.endLogicalColumn - entry.startLogicalColumn;        borderSoftWrapLinesBeforeDiff=lastEntry.endSoftWrapLinesBefore - entry.startSoftWrapLinesBefore;        borderSoftWrapLinesCurrentDiff=lastEntry.endSoftWrapLinesCurrent - entry.startSoftWrapLinesCurrent + 1;        borderFoldedColumnDiff=lastEntry.endFoldingColumnDiff - entry.startFoldingColumnDiff;        borderSoftWrapColumnDiff=-borderColumnDiff - borderFoldedColumnDiff;      }      if (lengthDiff == 0 && logicalLinesDiff == 0 && foldedLinesDiff == 0 && softWrappedLinesDiff == 0 && borderColumnDiff == 0 && borderSoftWrapColumnDiff == 0 && borderFoldedColumnDiff == 0 && borderSoftWrapLinesBeforeDiff == 0 && borderSoftWrapLinesCurrentDiff == 0) {        break;      }    }    if (firstIndex >= 0 && i >= firstIndex) {      entry.visualLine+=(logicalLinesDiff + softWrappedLinesDiff - foldedLinesDiff);      entry.startLogicalLine+=logicalLinesDiff;      entry.endLogicalLine+=logicalLinesDiff;      entry.advance(lengthDiff);      entry.startFoldedLines+=foldedLinesDiff;      entry.endFoldedLines+=foldedLinesDiff;      if (entry.startLogicalLine == borderLogicalLine) {        entry.startLogicalColumn+=borderColumnDiff;        entry.startSoftWrapLinesBefore+=borderSoftWrapLinesBeforeDiff;        entry.startSoftWrapLinesCurrent+=borderSoftWrapLinesCurrentDiff;        entry.startSoftWrapColumnDiff+=borderSoftWrapColumnDiff;        entry.startFoldingColumnDiff+=borderFoldedColumnDiff;      } else {        entry.startSoftWrapLinesBefore+=softWrappedLinesDiff;      }      if (entry.endLogicalLine == borderLogicalLine) {        entry.endLogicalColumn+=borderColumnDiff;        entry.endSoftWrapLinesBefore+=borderSoftWrapLinesBeforeDiff;        entry.endSoftWrapLinesCurrent+=borderSoftWrapLinesCurrentDiff;        entry.endSoftWrapColumnDiff+=borderSoftWrapColumnDiff;        entry.endFoldingColumnDiff+=borderFoldedColumnDiff;      } else {        entry.endSoftWrapLinesBefore+=softWrappedLinesDiff;      }    }  }  if (firstIndex >= 0) {    if (lastEntry != null) {      CacheEntry nextEntry=myAffectedByUpdateCacheEntries.get(firstIndex);      if (lastEntry.visualLine >= nextEntry.visualLine) {        LOG.error("Invalid soft wrap cache update",new Attachment("state.txt",myEditor.getSoftWrapModel().toString()));      }    }    if (myAffectedByUpdateCacheEntries.get(affectedEntriesCount - 1).endOffset > myEditor.getDocument().getTextLength()) {      LOG.error("Invalid soft wrap cache entries emerged",new Attachment("state.txt",myEditor.getSoftWrapModel().toString()));    }    myCache.addAll(myAffectedByUpdateCacheEntries.subList(firstIndex,myAffectedByUpdateCacheEntries.size()));  }  myAffectedByUpdateCacheEntries.clear();}  }
class C{  private void generateRepositoryClass(Element element) throws IOException {  String packageName=elements.getPackageOf(element).getQualifiedName().toString();  ClassName entityClass=ClassName.get(packageName,element.getSimpleName().toString());  ClassName stringClass=ClassName.get(String.class);  ClassName contextClass=ClassName.get(Context.class);  Pref prefAnnotation=element.getAnnotation(Pref.class);  String tableName=prefAnnotation.name();  MethodSpec constructorSpec=MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).build();  MethodSpec getNameSpec=MethodSpec.methodBuilder("getName").addModifiers(Modifier.PRIVATE,Modifier.FINAL,Modifier.STATIC).returns(stringClass).addStatement("return $S",tableName).build();  MethodSpec.Builder getEntitySpecBuilder=MethodSpec.methodBuilder("getEntity").addModifiers(Modifier.PUBLIC,Modifier.FINAL,Modifier.STATIC).addParameter(contextClass,"context").returns(entityClass).addStatement("$T entity = new $T()",entityClass,entityClass);  MethodSpec.Builder putEntitySpecBuilder=MethodSpec.methodBuilder("putEntity").addModifiers(Modifier.PUBLIC,Modifier.FINAL,Modifier.STATIC).addParameter(contextClass,"context").addParameter(entityClass,"entity");  for (  Element element1 : element.getEnclosedElements()) {    handlePrefInt(element1,getEntitySpecBuilder,putEntitySpecBuilder);    handlePrefString(element1,getEntitySpecBuilder,putEntitySpecBuilder);    handlePrefLong(element1,getEntitySpecBuilder,putEntitySpecBuilder);    handlePrefFloat(element1,getEntitySpecBuilder,putEntitySpecBuilder);    handlePrefBoolean(element1,getEntitySpecBuilder,putEntitySpecBuilder);    handlePrefStringSet(element1,getEntitySpecBuilder,putEntitySpecBuilder);  }  getEntitySpecBuilder.addStatement("return entity");  String className=element.getSimpleName() + "SpotRepository";  TypeSpec repository=TypeSpec.classBuilder(className).addModifiers(Modifier.PUBLIC,Modifier.FINAL).addMethod(constructorSpec).addMethod(getNameSpec).addMethod(getEntitySpecBuilder.build()).addMethod(putEntitySpecBuilder.build()).build();  JavaFile.builder(packageName,repository).build().writeTo(filer);}  }
class C{  public void testDynamicPropertyUpdate() throws Exception {  PropertiesManager pm=new PropertiesManager(replicatorProperties,dynamicProperties,dynamicRole);  assertFalse("dynamic.properties file exists",dynamicProperties.exists());  pm.loadProperties();  TungstenProperties tp1=pm.getProperties();  String thlRemoteUri=tp1.getString(ReplicatorConf.MASTER_CONNECT_URI);  assertNotNull(ReplicatorConf.MASTER_CONNECT_URI,thlRemoteUri);  TungstenProperties tp1Dynamic=pm.getDynamicProperties();  assertTrue("Dynamic properties are empty",tp1Dynamic.size() > 0);  assertEquals(ReplicatorConf.MASTER_CONNECT_URI + " before set",thlRemoteUri,tp1Dynamic.getString(ReplicatorConf.MASTER_CONNECT_URI));  TungstenProperties dynaProps=new TungstenProperties();  dynaProps.setString(ReplicatorConf.MASTER_CONNECT_URI,"hi!");  pm.setDynamicProperties(dynaProps);  assertTrue("dynamic.properties file exists",dynamicProperties.exists());  TungstenProperties tp2=pm.getProperties();  assertEquals(ReplicatorConf.MASTER_CONNECT_URI + " after set","hi!",tp2.getString(ReplicatorConf.MASTER_CONNECT_URI));  TungstenProperties tp2Dynamic=pm.getDynamicProperties();  assertTrue("Dynamic properties have at least 1 value",tp2Dynamic.size() >= 1);  pm.loadProperties();  TungstenProperties tp3=pm.getProperties();  assertEquals(ReplicatorConf.MASTER_CONNECT_URI + " after set","hi!",tp3.getString(ReplicatorConf.MASTER_CONNECT_URI));  pm.clearDynamicProperties();  assertFalse("dynamic.properties file exists",dynamicProperties.exists());  pm.loadProperties();  TungstenProperties tp4=pm.getProperties();  assertEquals(ReplicatorConf.MASTER_CONNECT_URI,thlRemoteUri,tp4.getString(ReplicatorConf.MASTER_CONNECT_URI));  TungstenProperties tp4Dynamic=pm.getDynamicProperties();  assertEquals(ReplicatorConf.MASTER_CONNECT_URI + " after clear",thlRemoteUri,tp4Dynamic.getString(ReplicatorConf.MASTER_CONNECT_URI));}  }
class C{  public void addNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  @Override public <U>CompletableFuture<U> foldRight(final U seed,final BiFunction<? super T,U,U> function){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public void initialize(){  TextureState ts=new TextureState();  ts.setEnabled(false);  setRenderState(ts);  for (int i=0; i < landmarkList.size(); ++i) {    LandmarkState state=landmarkList.get(i);    addLandmark(state,false);  }  zBufferState=new ZBufferState();  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);  zBufferState.setEnabled(true);  setRenderState(zBufferState);}  }
class C{  public static <S extends HasRightMouseDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RightMouseDownEvent event=new RightMouseDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public TipoDocumentoVitalVO insertTipoDocumentoVital(TipoDocumentoVitalVO tipo){  tipo.setId(getGuid(tipo.getId()));  insertVO(TABLE_NAME,COL_DEFS,tipo);  return tipo;}  }
class C{  final public boolean checkDSClosing(DistributionManager dm){  InternalDistributedSystem ds=dm.getSystem();  return (ds == null || ds.isDisconnecting());}  }
class C{  private UseGzip gzipPermittedOriginal(Message message) throws Fault {  UseGzip permitted=UseGzip.NO;  if (isRequestor(message)) {    LOG.fine("Requestor role, so gzip enabled");    Object o=message.getContextualProperty(USE_GZIP_KEY);    if (o instanceof UseGzip) {      permitted=(UseGzip)o;    } else     if (o instanceof String) {      permitted=UseGzip.valueOf((String)o);    } else {      permitted=force ? UseGzip.YES : UseGzip.NO;    }    message.put(GZIP_ENCODING_KEY,"gzip");    addHeader(message,"Accept-Encoding","gzip;q=1.0, identity; q=0.5, *;q=0");  } else {    LOG.fine("Response role, checking accept-encoding");    Exchange exchange=message.getExchange();    Message request=exchange.getInMessage();    Map<String,List<String>> requestHeaders=CastUtils.cast((Map<?,?>)request.get(Message.PROTOCOL_HEADERS));    if (requestHeaders != null) {      List<String> acceptEncodingHeader=CastUtils.cast(HttpHeaderHelper.getHeader(requestHeaders,HttpHeaderHelper.ACCEPT_ENCODING));      List<String> jmsEncodingHeader=CastUtils.cast(requestHeaders.get(SOAP_JMS_CONTENTENCODING));      if (jmsEncodingHeader != null && jmsEncodingHeader.contains("gzip")) {        permitted=UseGzip.YES;        message.put(GZIP_ENCODING_KEY,"gzip");      }      if (acceptEncodingHeader != null) {        if (LOG.isLoggable(Level.FINE)) {          LOG.fine("Accept-Encoding header: " + acceptEncodingHeader);        }        List<String> zeros=new ArrayList<String>(3);        List<String> nonZeros=new ArrayList<String>(3);        for (        String headerLine : acceptEncodingHeader) {          String[] encodings=ENCODINGS.split(headerLine.trim());          for (          String enc : encodings) {            Matcher m=ZERO_Q.matcher(enc);            if (m.find()) {              zeros.add(enc.substring(0,m.start()));            } else             if (enc.indexOf(';') >= 0) {              nonZeros.add(enc.substring(0,enc.indexOf(';')));            } else {              nonZeros.add(enc);            }          }        }        boolean identityEnabled=!zeros.contains("identity") && (!zeros.contains("*") || nonZeros.contains("identity"));        boolean gzipEnabled=nonZeros.contains("gzip") || (nonZeros.contains("*") && !zeros.contains("gzip"));        boolean xGzipEnabled=nonZeros.contains("x-gzip") || (nonZeros.contains("*") && !zeros.contains("x-gzip"));        if (identityEnabled && !gzipEnabled && !xGzipEnabled) {          permitted=UseGzip.NO;        } else         if (identityEnabled && gzipEnabled) {          permitted=UseGzip.YES;          message.put(GZIP_ENCODING_KEY,"gzip");        } else         if (identityEnabled && xGzipEnabled) {          permitted=UseGzip.YES;          message.put(GZIP_ENCODING_KEY,"x-gzip");        } else         if (!identityEnabled && gzipEnabled) {          permitted=UseGzip.FORCE;          message.put(GZIP_ENCODING_KEY,"gzip");        } else         if (!identityEnabled && xGzipEnabled) {          permitted=UseGzip.FORCE;          message.put(GZIP_ENCODING_KEY,"x-gzip");        } else {          throw new Fault(new org.apache.cxf.common.i18n.Message("NO_SUPPORTED_ENCODING",BUNDLE));        }      } else {        LOG.fine("No accept-encoding header");      }    }  }  if (LOG.isLoggable(Level.FINE)) {    LOG.fine("gzip permitted: " + permitted);  }  return permitted;}  }
class C{  public void deleteApplication(URI id){  client.post(String.class,APP_SUPPORT_DELETE_APP_URL,id);}  }
class C{  public static void writeJSONString(Object value,Writer out) throws IOException {  if (value == null) {    out.write("null");    return;  }  if (value instanceof String) {    out.write('\"');    out.write(escape((String)value));    out.write('\"');    return;  }  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     out.write("null"); else     out.write(value.toString());    return;  }  if (value instanceof Number) {    out.write(value.toString());    return;  }  if (value instanceof Boolean) {    out.write(value.toString());    return;  }  if ((value instanceof JSONStreamAware)) {    ((JSONStreamAware)value).writeJSONString(out);    return;  }  if ((value instanceof JSONAware)) {    out.write(((JSONAware)value).toJSONString());    return;  }  if (value instanceof Map) {    JSONObject.writeJSONString((Map)value,out);    return;  }  if (value instanceof List) {    JSONArray.writeJSONString((List)value,out);    return;  }  out.write(value.toString());}  }
class C{  public boolean isModified(){  return myIsModified;}  }
class C{  public void testSkipWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  CodedInputStream input1=CodedInputStream.newInstance(rawBytes);  CodedInputStream input2=CodedInputStream.newInstance(rawBytes);  UnknownFieldSet.Builder unknownFields=UnknownFieldSet.newBuilder();  while (true) {    int tag=input1.readTag();    assertEquals(tag,input2.readTag());    if (tag == 0) {      break;    }    unknownFields.mergeFieldFrom(tag,input1);    input2.skipField(tag);  }}  }
class C{  private void initInternalLibraryPath(){  try {    Enumeration installedInternalModules=Activator.getDefault().getBundle().findEntries(File.separator,STANDARD_MODULES,true);    Vector paths=new Vector();    while (installedInternalModules.hasMoreElements()) {      URL library=(URL)installedInternalModules.nextElement();      if (library != null) {        paths.addElement(FileLocator.resolve(library).getPath());      }    }    libraryPathEntries.addAll(paths);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int lcp(int i){  if (i < 1 || i >= suffixes.length)   throw new IndexOutOfBoundsException();  return lcp(suffixes[i],suffixes[i - 1]);}  }
class C{  public int update(TestRecord m){  return UPDATE(m).updateByExample(this.example);}  }
class C{  public void end(String namespace,String name) throws Exception {  MapEntriesBean top=null;  try {    top=(MapEntriesBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  MapEntriesHolder meh=(MapEntriesHolder)digester.peek();  MapEntriesBean old=meh.getMapEntries();  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[MapEntriesRule]{" + digester.getMatch() + "} New");    }    meh.setMapEntries(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedBeanRule]{" + digester.getMatch() + "} Merge");    }    mergeMapEntries(top,old);  }}  }
class C{  public void resumeProcessingRequest(Operation op,Predicate<Operation> invokingFilter){  int invokingFilterPosition=this.filters.indexOf(invokingFilter);  if (invokingFilterPosition < 0) {    return;  }  for (int i=invokingFilterPosition + 1; i < this.filters.size(); i++) {    Predicate<Operation> filter=this.filters.get(i);    if (!filter.test(op)) {      return;    }  }  this.service.getHost().run(null);}  }
class C{  public void print(Object x){  out.print(x);  out.flush();}  }
class C{  protected void paintEnabledText(JLabel l,Graphics g,String s,int textX,int textY){  int mnemIndex=l.getDisplayedMnemonicIndex();  g.setColor(l.getForeground());  SwingUtilities2.drawStringUnderlineCharAt(l,g,s,mnemIndex,textX,textY);}  }
class C{  private TupleQueryResult readExpectedTupleQueryResult(final String resultFile) throws Exception {  final TupleQueryResultFormat tqrFormat=QueryResultIO.getParserFormatForFileName(resultFile);  if (tqrFormat != null) {    final InputStream in=TestFederatedQuery.class.getResourceAsStream(TEST_RESOURCE_PATH + resultFile);    try {      final TupleQueryResultParser parser=QueryResultIO.createParser(tqrFormat);      parser.setValueFactory(ValueFactoryImpl.getInstance());      final TupleQueryResultBuilder qrBuilder=new TupleQueryResultBuilder();      parser.setTupleQueryResultHandler(qrBuilder);      parser.parse(in);      return qrBuilder.getQueryResult();    }  finally {      in.close();    }  } else {    final Set<Statement> resultGraph=readExpectedGraphQueryResult(resultFile);    return DAWGTestResultSetUtil.toTupleQueryResult(resultGraph);  }}  }
class C{  static boolean startsWithAOneBit(byte[] bytes){  if (bytes == null || bytes.length == 0) {    return false;  }  return (bytes[0] & 0x01) == 0x01;}  }
class C{  public PlantDrop(ItemStack drop,int minDrop,int maxDrop){  this.drop=drop;  this.minDrop=minDrop;  this.maxDrop=maxDrop;  this.dropKind=DropKind.minMax;}  }
class C{  public static int readBEInt(byte[] b,int off){  return (((b[off + 0] & 0xff) << 24) | ((b[off + 1] & 0xff) << 16) | ((b[off + 2] & 0xff) << 8)| ((b[off + 3] & 0xff)));}  }
class C{  @Override public boolean transactAgreedDeal(ItemParserResult res,final EventRaiser npc,final Player player){  int amount=res.getAmount();  String productName=res.getChosenItemName();  if (getMaximalAmount(productName,player) < amount) {    npc.say("Hey! I'm over here! You'd better not be trying to trick me...");    return false;  } else {    for (    final Map.Entry<String,Integer> entry : getRequiredResourcesPerProduct(productName).entrySet()) {      final int amountToDrop=amount * entry.getValue();      player.drop(entry.getKey(),amountToDrop);    }    final long timeNow=new Date().getTime();    player.setQuest(questSlot,amount + ";" + productName+ ";"+ timeNow);    npc.say("OK, I will " + getProductionActivity() + " "+ Grammar.quantityplnoun(amount,productName,"a")+ " for you, but that will take some time. Please come back in "+ getApproximateRemainingTime(player)+ ".");    return true;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AUTO_TRANSITION_BLOCK___GUARD_1:    getGuard_1().clear();  return;case UmplePackage.AUTO_TRANSITION_BLOCK___ACTION_1:getAction_1().clear();return;case UmplePackage.AUTO_TRANSITION_BLOCK___STATE_NAME_1:setStateName_1(STATE_NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private table fillTable(MobileSessionCtx wsc,String columnName,int fieldRefId,String action,String targetBase,boolean addStart,int page,String where){  table table=new table("1");  table.setClass("itable");  table.setID("WLookupT");  table.addElement("<thead>");  tr line=new tr();  line.setClass("header");  line=fillTable_Lookup_Headers(columnName,fieldRefId,line,targetBase,true,true,true,false,true);  tr line2=new tr();  line2=fillTable_Lookup_Headers(columnName,fieldRefId,line2,targetBase,true,true,true,false,false);  table.addElement(line);  table.addElement("</thead>");  table.addElement("<tbody>");  table=fillTable_Lookup_Rows(wsc,columnName,fieldRefId,table,targetBase,true,true,true,false,page,where);  table.addElement("</tbody>");  return table;}  }
class C{  public static boolean isDRMultisites(){  boolean isEnabled=false;  try {    if (PlatformUtils.hasMultipleSites()) {      isEnabled=true;    }  } catch (  IllegalStateException ise) {    Logger.warn("Could not Disaster Recovery environments.");  }  return isEnabled;}  }
class C{  void recordCflow(String name,String cname,String fname){  if (cflow == null)   cflow=new Hashtable();  cflow.put(name,new Object[]{cname,fname});}  }
class C{  private void process() throws Exception {  XMLStreamWriter xmlStreamWriter=null;  XMLEventWriter xmlEventWriter=null;  try {    DocumentBuilderFactory domFact=DocumentBuilderFactory.newInstance();    domFact.setNamespaceAware(true);    domFact.setIgnoringElementContentWhitespace(true);    domFact.setIgnoringComments(true);    domFact.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);    DocumentBuilder domBuilder=domFact.newDocumentBuilder();    Document doc=domBuilder.parse(in);    Element element=doc.getDocumentElement();    element.normalize();    if (def == null) {      if (doc.getDoctype() != null && doc.getDoctype().getPublicId() != null) {        def=WbXmlInitialization.getDefinitionByFPI(doc.getDoctype().getPublicId());      }      if (def == null) {        def=WbXmlInitialization.getDefinitionByRoot(element.getLocalName(),element.getNamespaceURI());        if (def == null) {          usage(String.format("Definition not found for name=%s and namespace=%s. Use -d argument to force it.",element.getLocalName(),element.getNamespaceURI()));        }      }    }    XMLOutputFactory fact=new WbXmlOutputFactory();    fact.setProperty(WbXmlOutputFactory.DEFINITION_PROPERTY,def);    fact.setProperty(WbXmlOutputFactory.ENCODING_TYPE_PROPERTY,type);    fact.setProperty(WbXmlOutputFactory.SKIP_SPACES_PROPERTY,skipSpaces);    if (!useDom) {      String clazz=def.getClazz();      if (clazz == null || clazz.isEmpty()) {        usage(String.format("The definition '%s' does not contain a main class.",def.getName()));      }      JAXBContext jc=JAXBContext.newInstance(Class.forName(clazz));      Unmarshaller unmarshaller=jc.createUnmarshaller();      Object obj=unmarshaller.unmarshal(doc);      Marshaller marshaller=jc.createMarshaller();      if (event) {        xmlEventWriter=fact.createXMLEventWriter(out);        marshaller.marshal(obj,xmlEventWriter);      } else {        xmlStreamWriter=fact.createXMLStreamWriter(out);        marshaller.marshal(obj,xmlStreamWriter);      }    } else {      Transformer xformer=TransformerFactory.newInstance().newTransformer();      Source domSource=new DOMSource(doc);      StAXResult staxResult;      if (event) {        xmlEventWriter=fact.createXMLEventWriter(out);        staxResult=new StAXResult(xmlEventWriter);      } else {        xmlStreamWriter=fact.createXMLStreamWriter(out);        staxResult=new StAXResult(xmlStreamWriter);      }      xformer.transform(domSource,staxResult);    }  }  finally {    if (xmlStreamWriter != null) {      try {        xmlStreamWriter.close();      } catch (      Exception e) {      }    }    if (xmlEventWriter != null) {      try {        xmlEventWriter.close();      } catch (      Exception e) {      }    }  }}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public static CronScheduleBuilder cronSchedule(CronExpression cronExpression){  return new CronScheduleBuilder(cronExpression);}  }
class C{  private void calculateCategoryRates(){  double propVariable=1.0;  int cat=0;  categoryRates[0]=0.0;  categoryProportions[0]=modelChoose.getValue(INVAR_INDEX) * (1 / (1 + Math.exp(-logitInvar.getValue(0))));  propVariable=1.0 - categoryProportions[0];  cat=1;  if (modelChoose.getValue(SHAPE_INDEX) == PRESENT) {    final double a=Math.exp(logShape.getValue(0));    double mean=0.0;    final int gammaCatCount=categoryCount - cat;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]=GammaDistribution.quantile((2.0 * i + 1.0) / (2.0 * gammaCatCount),a,1.0 / a);      mean+=categoryRates[i + cat];      categoryProportions[i + cat]=propVariable / gammaCatCount;    }    mean=(propVariable * mean) / gammaCatCount;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]/=mean;    }  } else {    final int gammaCatCount=categoryCount - cat;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]=1.0 / propVariable;      categoryProportions[i + cat]=propVariable / gammaCatCount;    }  }  ratesKnown=true;}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  private Expression compileOperation(Operation operation,int opPos) throws TransformerException {  int leftPos=getFirstChildPos(opPos);  int rightPos=getNextOpPos(leftPos);  operation.setLeftRight(compile(leftPos),compile(rightPos));  return operation;}  }
class C{  public int size(){  return numValues;}  }
class C{  @Override public void update(){  super.update();  AttachmentCache.remove(this);}  }
class C{  public <T extends IEventProcessor>Future<?> registerEventProcessor(Class<T> eventProcessorType,EventProcessorOptions processorOptions) throws Exception {  DefaultEventProcessorFactory<T> defaultFactory=new DefaultEventProcessorFactory<T>();  defaultFactory.setEventProcessorClass(eventProcessorType);  return registerEventProcessorFactory(defaultFactory,processorOptions);}  }
class C{  EntityResultReader(EntityReader<E,S> reader,Attribute[] attributes){  this.reader=reader;  this.attributes=attributes;}  }
class C{  public boolean wasNull() throws SQLException {  return lastValueNull;}  }
class C{  public void reset(){  digest.reset();  digest.update(secret,0,secret.length);  digest.update(IPAD,0,padLength);}  }
class C{  public TestHarness(SolrResourceLoader loader,String solrXml){  this(loader,ConfigSolr.fromString(loader,solrXml));}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  tabBase=alloc.x + getLeftInset();  super.paint(g,a);  if (firstLineIndent < 0) {    Shape sh=getChildAllocation(0,a);    if ((sh != null) && sh.intersects(alloc)) {      int x=alloc.x + getLeftInset() + firstLineIndent;      int y=alloc.y + getTopInset();      Rectangle clip=g.getClipBounds();      tempRect.x=x + getOffset(X_AXIS,0);      tempRect.y=y + getOffset(Y_AXIS,0);      tempRect.width=getSpan(X_AXIS,0) - firstLineIndent;      tempRect.height=getSpan(Y_AXIS,0);      if (tempRect.intersects(clip)) {        tempRect.x=tempRect.x - firstLineIndent;        paintChild(g,tempRect,0);      }    }  }}  }
class C{  public ApprovalDialog(Dialog owner,String title,ModalityType modality){  super(owner,title,modality);}  }
class C{  public boolean connectToMainProcess(){  try {    connection=new Socket("127.0.0.1",Properties.PROCESS_COMMUNICATION_PORT);    out=new ObjectOutputStream(connection.getOutputStream());    in=new ObjectInputStream(connection.getInputStream());  } catch (  Exception e) {    logger.error("not possible to connect to main process",e);    return false;  }  return true;}  }
class C{  public void initializeMembershipView(){  MembershipChangeListener listener=new MembershipChangeListener();  addListener(listener);  boolean interrupted=false;  try {    while (!isClosed) {      advisor.getAdvisee().getCancelCriterion().checkCancelInProgress(null);      Map<InternalDistributedMember,PersistentMemberID> onlineMembers=advisor.adviseInitializedPersistentMembers();      if (onlineMembers != null) {        if (updateMembershipView(onlineMembers.keySet())) {          break;        }      }      Set<InternalDistributedMember> postRecoveryMembers=((BucketAdvisor)advisor).adviseRecoveredFromDisk();      if (postRecoveryMembers != null) {        if (updateMembershipView(postRecoveryMembers)) {          break;        }      }      Set<PersistentMemberID> membersToWaitFor=getPersistedMembers();      if (!membersToWaitFor.isEmpty()) {        try {          listener.waitForChange(membersToWaitFor,membersToWaitFor);        } catch (        InterruptedException e) {          interrupted=true;        }      } else {        beginUpdatingPersistentView();        break;      }    }  }  finally {    removeListener(listener);    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Deprecated public final String findParam(final String moduleName,final String paramName){  ConfigGroup m=this.modules.get(moduleName);  if (m == null) {    return null;  }  try {    String str=m.getValue(paramName);    if (str == null) {      return null;    }    return str;  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public void invalidAttributeValue(String systemID,int lineNr,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  XMLUtil.errorInvalidAttributeValue(systemID,lineNr,elementName,attributeName,attributeValue);}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public BinaryQueryResultParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  public void afterIterJoinOfSingleIndexResults(Collection finalResult){}  }
class C{  public static Thread start(Thread self,String name,Closure closure){  return createThread(name,false,closure);}  }
class C{  public static float wallpaperTravelToScreenWidthRatio(int width,int height){  float aspectRatio=width / (float)height;  final float ASPECT_RATIO_LANDSCAPE=16 / 10f;  final float ASPECT_RATIO_PORTRAIT=10 / 16f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE=1.5f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT=1.2f;  final float x=(WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE - WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT) / (ASPECT_RATIO_LANDSCAPE - ASPECT_RATIO_PORTRAIT);  final float y=WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT - x * ASPECT_RATIO_PORTRAIT;  return x * aspectRatio + y;}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl) throws HeadlessException {  this(c,ops,dtl,true);}  }
class C{  public static String generateAccessState(String accessState,Collection<String> statusDescriptions){  if ((accessState != null) && (statusDescriptions != null) && (statusDescriptions.contains(SmisConstants.NOT_READY))) {    return Volume.VolumeAccessState.NOT_READY.name();  } else   if (accessState != null) {    String displayName=Volume.VolumeAccessState.getVolumeAccessStateDisplayName(accessState);    if (displayName.equals(Volume.VolumeAccessState.UNKNOWN.name())) {      return accessState;    } else {      return displayName;    }  }  return Volume.VolumeAccessState.READWRITE.name();}  }
class C{  private static long nanosFromCalendar(Calendar cal){  int h=cal.get(Calendar.HOUR_OF_DAY);  int m=cal.get(Calendar.MINUTE);  int s=cal.get(Calendar.SECOND);  int millis=cal.get(Calendar.MILLISECOND);  return ((((((h * 60L) + m) * 60) + s) * 1000) + millis) * 1000000;}  }
class C{  protected IJavaElementDelta[] removeAndShrinkArray(IJavaElementDelta[] old,int index){  IJavaElementDelta[] array=new IJavaElementDelta[old.length - 1];  if (index > 0)   System.arraycopy(old,0,array,0,index);  int rest=old.length - index - 1;  if (rest > 0)   System.arraycopy(old,index + 1,array,index,rest);  return array;}  }
class C{  public RadiusGraphElementAccessor(double maxDistance){  this.maxDistance=maxDistance;}  }
class C{  public FileSharingSession createFileTransferSession(String fileTransferId,ContactId contact,MmContent content,MmContent fileIcon,long timestamp,FileTransferProtocol ftProtocol){  if (sLogger.isActivated()) {    sLogger.info("Initiate a file transfer session with contact " + contact + ", file "+ content.toString());  }switch (ftProtocol) {case HTTP:    return new OriginatingHttpFileSharingSession(this,fileTransferId,content,contact,fileIcon,UUID.randomUUID().toString(),mMessagingLog,mRcsSettings,timestamp,mContactManager);case MSRP:  return new OriginatingMsrpFileSharingSession(this,fileTransferId,content,contact,fileIcon,mRcsSettings,timestamp,mContactManager);default :throw new IllegalArgumentException("Unknown FileTransferProtocol " + ftProtocol);}}  }
class C{  public String importXML(String fileName,Properties ctx,String trxName) throws Exception {  log.info("importXML:" + fileName);  File in=new File(fileName);  if (!in.exists()) {    String msg="File does not exist: " + fileName;    log.info("importXML:" + msg);    return msg;  }  try {    log.info("starting");    System.setProperty("javax.xml.parsers.SAXParserFactory","org.apache.xerces.jaxp.SAXParserFactoryImpl");    PackInHandler handler=new PackInHandler();    handler.set_TrxName(trxName);    handler.setCtx(ctx);    handler.setProcess(this);    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    String msg="Start Parser";    log.info(msg);    parser.parse(in,handler);    msg="End Parser";    log.info(msg);    return "OK.";  } catch (  Exception e) {    log.log(Level.SEVERE,"importXML:",e);    throw e;  }}  }
class C{  public void testConfigFileDirectory() throws Exception {  Properties properties=loadProperties("test-configFile-directory/test-subfolder");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  public boolean isSetString_field(){  return this.string_field != null;}  }
class C{  public static void main(String[] args){  BigInteger number=new BigInteger(Long.MAX_VALUE + "");  int count=0;  final int NUMBER_OF_PRIMES=5;  System.out.println();  while (count < NUMBER_OF_PRIMES) {    number=number.add(new BigInteger("1"));    if (isPrime(number)) {      count++;      System.out.println(number);    }  }}  }
class C{  public void addHttpHeader(String name,String value){  headers.add(name,value);}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Method m=(Class.forName(m_Class)).getMethod(m_Method,new Class[]{Double.TYPE});  double[] vals=new double[instance.numAttributes()];  Double[] params=new Double[1];  Double newVal;  for (int i=0; i < instance.numAttributes(); i++) {    if (instance.isMissing(i)) {      vals[i]=Utils.missingValue();    } else {      if (m_Cols.isInRange(i) && instance.attribute(i).isNumeric()) {        params[0]=new Double(instance.value(i));        newVal=(Double)m.invoke(null,(Object[])params);        if (newVal.isNaN() || newVal.isInfinite()) {          vals[i]=Utils.missingValue();        } else {          vals[i]=newVal.doubleValue();        }      } else {        vals[i]=instance.value(i);      }    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);  return true;}  }
class C{  @Nullable private PsiBuilder.Marker parseGroup(PsiBuilder builder){  final IElementType type=builder.getTokenType();  final PsiBuilder.Marker marker=builder.mark();  if (RegExpTT.GROUPS.contains(type)) {    builder.advanceLexer();    if (!parsePattern(builder)) {      patternExpected(builder);    } else {      checkMatches(builder,RegExpTT.GROUP_END,"Unclosed group");    }    marker.done(RegExpElementTypes.GROUP);  } else   if (type == RegExpTT.SET_OPTIONS) {    builder.advanceLexer();    final PsiBuilder.Marker o=builder.mark();    if (builder.getTokenType() == RegExpTT.OPTIONS_ON) {      builder.advanceLexer();    }    if (builder.getTokenType() == RegExpTT.OPTIONS_OFF) {      builder.advanceLexer();    }    o.done(RegExpElementTypes.OPTIONS);    if (builder.getTokenType() == RegExpTT.COLON) {      builder.advanceLexer();      if (!parsePattern(builder)) {        patternExpected(builder);      } else {        checkMatches(builder,RegExpTT.GROUP_END,"Unclosed group");      }      marker.done(RegExpElementTypes.GROUP);    } else {      checkMatches(builder,RegExpTT.GROUP_END,"Unclosed options group");      marker.done(RegExpElementTypes.SET_OPTIONS);    }  } else   if (type == StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN) {    builder.error("Illegal/unsupported escape sequence");    builder.advanceLexer();    marker.done(RegExpElementTypes.CHAR);  } else   if (RegExpTT.CHARACTERS.contains(type)) {    builder.advanceLexer();    marker.done(RegExpElementTypes.CHAR);  } else   if (RegExpTT.BOUNDARIES.contains(type)) {    builder.advanceLexer();    marker.done(RegExpElementTypes.BOUNDARY);  } else   if (type == RegExpTT.BACKREF) {    builder.advanceLexer();    marker.done(RegExpElementTypes.BACKREF);  } else   if (type == RegExpTT.PYTHON_NAMED_GROUP || type == RegExpTT.RUBY_NAMED_GROUP || type == RegExpTT.RUBY_QUOTED_NAMED_GROUP) {    builder.advanceLexer();    checkMatches(builder,RegExpTT.NAME,"Group name expected");    checkMatches(builder,type == RegExpTT.RUBY_QUOTED_NAMED_GROUP ? RegExpTT.QUOTE : RegExpTT.GT,"Unclosed group name");    if (!parsePattern(builder)) {      patternExpected(builder);    } else {      checkMatches(builder,RegExpTT.GROUP_END,"Unclosed group");    }    marker.done(RegExpElementTypes.GROUP);  } else   if (type == RegExpTT.PYTHON_NAMED_GROUP_REF) {    parseNamedGroupRef(builder,marker,RegExpTT.GROUP_END);  } else   if (type == RegExpTT.RUBY_NAMED_GROUP_REF) {    parseNamedGroupRef(builder,marker,RegExpTT.GT);  } else   if (type == RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF) {    parseNamedGroupRef(builder,marker,RegExpTT.QUOTE);  } else   if (type == RegExpTT.PYTHON_COND_REF) {    builder.advanceLexer();    if (builder.getTokenType() == RegExpTT.NAME || builder.getTokenType() == RegExpTT.NUMBER) {      builder.advanceLexer();    } else {      builder.error("Group name or number expected");    }    checkMatches(builder,RegExpTT.GROUP_END,"Unclosed group reference");    if (!parseBranch(builder)) {      patternExpected(builder);    } else {      if (builder.getTokenType() == RegExpTT.UNION) {        builder.advanceLexer();        if (!parseBranch(builder)) {          patternExpected(builder);        }      }      checkMatches(builder,RegExpTT.GROUP_END,"Unclosed group");    }    marker.done(RegExpElementTypes.PY_COND_REF);  } else   if (type == RegExpTT.PROPERTY) {    parseProperty(builder);    marker.done(RegExpElementTypes.PROPERTY);  } else   if (RegExpTT.SIMPLE_CLASSES.contains(type)) {    builder.advanceLexer();    marker.done(RegExpElementTypes.SIMPLE_CLASS);  } else   if (type == RegExpTT.CLASS_BEGIN) {    marker.drop();    return parseClass(builder);  } else   if (type == RegExpTT.LBRACE && myCapabilities.contains(RegExpCapability.DANGLING_METACHARACTERS)) {    builder.advanceLexer();    marker.done(RegExpElementTypes.CHAR);  } else {    marker.drop();    return null;  }  return marker;}  }
class C{  public WitboxPlate(Context context,boolean infinite,int[] type){  this.mContext=context;  generatePlaneCoords(type,infinite);  mTextureDataHandle=loadTexture(mContext,R.drawable.witbox_plate);  int vertexShader=ViewerRenderer.loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);  int fragmentShader=ViewerRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);  mProgram=GLES20.glCreateProgram();  GLES20.glAttachShader(mProgram,vertexShader);  GLES20.glAttachShader(mProgram,fragmentShader);  GLES20.glLinkProgram(mProgram);}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  public boolean addUsedPrefix(String prefix){  prefix=prefix.replace(' ','_');  return usedPrefixes.add(prefix.intern());}  }
class C{  private Instances makeHeader(){  ArrayList<Attribute> fv=new ArrayList<Attribute>();  fv.add(new Attribute(PROB_COST_FUNC_NAME));  fv.add(new Attribute(NORM_EXPECTED_COST_NAME));  fv.add(new Attribute(THRESHOLD_NAME));  return new Instances(RELATION_NAME,fv,100);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public TextField(String name){  super(name,Field.Type.TEXT);}  }
class C{  public void testDirectSockets_exceptionIfPortNotOpen() throws IOException {  final InetSocketAddress serverAddr1=new InetSocketAddress(getPort(0));  final InetSocketAddress serverAddr2=new InetSocketAddress(getPort(0));  final ServerSocket ss1=new ServerSocket();  try {    ss1.bind(serverAddr1);    assertTrue(ss1.getChannel() == null);    try {      accept(ss1);      fail("Expected timeout failure");    } catch (    AssertionFailedError afe) {    }    final SocketChannel cs1=SocketChannel.open();    try {      final boolean immediate1=cs1.connect(serverAddr1);      if (!immediate1) {        if (!cs1.finishConnect()) {          fail("Did not connect.");        }      }    }  finally {      cs1.close();    }    final SocketChannel cs2=SocketChannel.open();    try {      cs1.connect(serverAddr2);      fail("Expecting " + IOException.class);    } catch (    IOException ex) {      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);    } finally {      cs2.close();    }    try {      accept(ss1);      fail("Expected timeout failure");    } catch (    AssertionFailedError afe) {    }  }  finally {    ss1.close();  }}  }
class C{  public void addFatalError(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.FATAL,msg,context));  fSeverity=Math.max(fSeverity,FATAL);}  }
class C{  public static PublicKey parse(final AccountSshKey key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException {  try {    final String s=key.getEncodedKey();    if (s == null) {      throw new InvalidKeySpecException("No key string");    }    final byte[] bin=Base64.decodeBase64(Constants.encodeASCII(s));    return new ByteArrayBuffer(bin).getRawPublicKey();  } catch (  RuntimeException|SshException e) {    throw new InvalidKeySpecException("Cannot parse key",e);  }}  }
class C{  @Override public final int readUnsignedShort() throws IOException {  dis.readFully(work,0,2);  return ((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EQUALITY_OP___EQUALS_OP_1:    return equalsOp_1 != null && !equalsOp_1.isEmpty();case UmplePackage.EQUALITY_OP___NOTEQUALS_OP_1:  return notequalsOp_1 != null && !notequalsOp_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void adjust(byte[] a,int aOff,byte[] b){  int x=(b[b.length - 1] & 0xff) + (a[aOff + b.length - 1] & 0xff) + 1;  a[aOff + b.length - 1]=(byte)x;  x>>>=8;  for (int i=b.length - 2; i >= 0; i--) {    x+=(b[i] & 0xff) + (a[aOff + i] & 0xff);    a[aOff + i]=(byte)x;    x>>>=8;  }}  }
class C{  public void onGoogleLogout(){}  }
class C{  @SuppressWarnings("unchecked") private void heapify(){  for (int i=(size >>> 1) - 1; i >= 0; i--)   siftDown(i,(E)queue[i]);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public static AlertDialog.Builder showUpdateAvailableDialog(final Activity activity){  return showUpdateAvailableDialog(activity,R.string.you_are_not_updated_title,R.string.you_are_not_updated_message,R.string.yes,R.string.no);}  }
class C{  public void doHttpFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain) throws IOException, ServletException {  if (!securityHelper.isSecurityEnabled(request)) {    PreAuthenticatedAuthenticationToken authRequest=new PreAuthenticatedAuthenticationToken(applicationUserBuilder.build(request),"N/A");    authRequest.setDetails(authenticationDetailsSource.buildDetails(request));    Authentication authResult=authenticationManager.authenticate(authRequest);    SecurityContextHolder.getContext().setAuthentication(authResult);  }  chain.doFilter(request,response);}  }
class C{  public TFloatHashSet(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  @Override public final void sample(){synchronized (_lock) {    long count=_count.get();    long lastCount=_lastAvgCount;    _lastAvgCount=count;    long sum=_sum.get();    double lastSum=_lastAvgSum;    _lastAvgSum=sum;    if (count == lastCount)     _value=0; else     _value=_scale * (sum - lastSum) / (double)(count - lastCount);  }}  }
class C{  public SearchPanel(LayoutType layout,boolean regExp){  this(layout,regExp,null,"_Search");}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  public ActionList(Visualization vis,long duration){  super(vis,duration);}  }
class C{  public void shutdown(){  if (checkClient()) {    mClient.release();    mClient=null;  }}  }
class C{  public boolean isSuccess(){  return complete && (error == null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StartupDialog(){  initComponents();}  }
class C{  private float[] fetchSpectrum(float[] amplitudes,int groupsNumber){  int approximateGroupLength=amplitudes.length / groupsNumber;  float[] result=new float[groupsNumber];  double tmpSum;  double wholeSum=0;  for (int i=0; i < groupsNumber; i++) {    tmpSum=0;    for (int j=i * approximateGroupLength; j < (i + 1) * approximateGroupLength; j++) {      tmpSum+=amplitudes[j];    }    result[i]=(float)(tmpSum / approximateGroupLength);    wholeSum+=result[i];  }  for (int i=0; i < groupsNumber; i++) {    result[i]/=wholeSum;  }  return result;}  }
class C{  protected <T>ResponseEntity<T> send(final ClientHttpRequest request,final Class<T> responseType,final Map<String,?> uriVariables){  final URI url=request.getURL(uriVariables);  if (isDebugEnabled()) {    printInfo("Link: %1$s",request.getLink().toHttpRequestLine());    printInfo("HTTP URL: %1$s",url);    printInfo("HTTP request headers: %1$s",request.getHeaders());    printInfo("HTTP request parameters: %1$s",request.getParameters());  }  final ResponseEntity<T> response=getRestTemplate().exchange(url,request.getMethod(),request.createRequestEntity(),responseType);  if (isDebugEnabled()) {    printInfo("------------------------------------------------------------------------");    printInfo("HTTP response headers: %1$s",response.getHeaders());    printInfo("HTTP response status: %1$d - %2$s",response.getStatusCode().value(),response.getStatusCode().getReasonPhrase());    printInfo("HTTP response body: ",response.getBody());  }  return response;}  }
class C{  static boolean isWindows(){  return getOperatingSystem().startsWith("Windows");}  }
class C{  public static String shortDebugString(final MessageOrBuilder message){  try {    final StringBuilder sb=new StringBuilder();    SINGLE_LINE_PRINTER.print(message,new TextGenerator(sb));    return sb.toString().trim();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public static final void checkConfigConsistencyAndWriteToLog(Config config,final String message){  log.info(message);  String newline=System.getProperty("line.separator");  StringWriter writer=new StringWriter();  new ConfigWriter(config).writeStream(new PrintWriter(writer),newline);  log.info(newline + newline + writer.getBuffer().toString());  log.info("Complete config dump done.");  log.info("Checking consistency of config...");  config.checkConsistency();  log.info("Checking consistency of config done.");}  }
class C{  private void insertUpperLeftWhitespaceIfNeeded(){  Rectangle diaWithoutWhite=getContentBounds(0,getGridElements());  int adjustWidth=0;  if (diaWithoutWhite.getX() < 0) {    adjustWidth=diaWithoutWhite.getX();  }  int adjustHeight=0;  if (diaWithoutWhite.getY() < 0) {    adjustHeight=diaWithoutWhite.getY();  }  moveOrigin(adjustWidth,adjustHeight);  if (adjustWidth != 0 || adjustHeight != 0) {    for (int i=0; i < getComponents().length; i++) {      Component c=getComponent(i);      c.setLocation(handler.realignToGrid(false,c.getX() - adjustWidth),handler.realignToGrid(false,c.getY() - adjustHeight));    }  }  if (adjustWidth < 0) {    setHorizontalScrollbarVisibility(true);  }  if (adjustHeight < 0) {    setVerticalScrollbarVisibility(true);  }  int width=(int)(_scr.getHorizontalScrollBar().getValue() + getViewableDiagrampanelSize().getWidth() - adjustWidth);  int height=(int)(_scr.getVerticalScrollBar().getValue() + getViewableDiagrampanelSize().getHeight() - adjustHeight);  setPreferredSize(new Dimension(width,height));  changeViewPosition(-adjustWidth,-adjustHeight);}  }
class C{  public static int countArgumentPlaceholders(final String messagePattern){  if (messagePattern == null) {    return 0;  }  final int delim=messagePattern.indexOf(DELIM_START);  if (delim == -1) {    return 0;  }  int result=0;  boolean isEscaped=false;  for (int i=0; i < messagePattern.length(); i++) {    final char curChar=messagePattern.charAt(i);    if (curChar == ESCAPE_CHAR) {      isEscaped=!isEscaped;    } else     if (curChar == DELIM_START) {      if (!isEscaped && i < messagePattern.length() - 1 && messagePattern.charAt(i + 1) == DELIM_STOP) {        result++;        i++;      }      isEscaped=false;    } else {      isEscaped=false;    }  }  return result;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  int count=getItemCount();  if (count > 0) {    ComparableObjectItem item=getDataItem(0);    result=29 * result + item.hashCode();  }  if (count > 1) {    ComparableObjectItem item=getDataItem(count - 1);    result=29 * result + item.hashCode();  }  if (count > 2) {    ComparableObjectItem item=getDataItem(count / 2);    result=29 * result + item.hashCode();  }  result=29 * result + this.maximumItemCount;  result=29 * result + (this.autoSort ? 1 : 0);  result=29 * result + (this.allowDuplicateXValues ? 1 : 0);  return result;}  }
class C{  public ImageRequest(String url,Resources resources,ContentResolver contentResolver,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mResources=resources;  mContentResolver=contentResolver;  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  defaultOptions=getDefaultOptions();}  }
class C{  public TCPEndpoint(String host,int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf){  if (host == null)   host="";  this.host=host;  this.port=port;  this.csf=csf;  this.ssf=ssf;}  }
class C{  protected void injectIntoVolumeInformationContainer(Map<String,StringSet> volumeInformation,String infoKey,String altKey,CIMInstance volumeInstance){  Object value=getCIMPropertyValue(volumeInstance,infoKey);  if (null == value) {    value=getCIMPropertyValue(volumeInstance,altKey);  }  String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey);  if (null != value && null != charactersticName) {    StringSet valueSet=new StringSet();    if (value instanceof String) {      valueSet.add(value.toString());    } else     if (value instanceof String[]) {      valueSet.addAll(Arrays.asList((String[])value));    }    volumeInformation.put(charactersticName,valueSet);  }}  }
class C{  public table(String border,String cellSpacing,String cellPadding,String width,String className){  setBorder(border);  setCellSpacing(cellSpacing);  setCellPadding(cellPadding);  if (width != null)   setWidth(width);  if (className != null)   setClass(className);}  }
class C{  private RewrittenOutboundUrl processPostEncodeURL(String s){  if (urlRerwiter == null) {    return null;  }  return urlRerwiter.processEncodeURL(httpServletResponse,httpServletRequest,true,s);}  }
class C{  public NodesStatsRequestBuilder all(){  request.all();  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("characterdataDeleteDataEndAssert","1230 North Ave. Dallas, Texas ",childData);}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  boolean hasFont=ois.readBoolean();  if (hasFont) {    String name=(String)ois.readObject();    int size=ois.readInt();    int style=ois.readInt();    f=new Font(name,style,size);  } else {    f=OMText.DEFAULT_FONT;  }  stroke=readStroke(ois,OMGraphic.BASIC_STROKE);  textMatteStroke=readStroke(ois,DEFAULT_TEXT_MATTE_STROKE);}  }
class C{  @Override public String toString(){  return emailAddress;}  }
class C{  public GoogleUsageTracker(){  analyticsId=UsageTrackerManager.getInstance().getAnalyticsProperty();  AccountPluginInfoService pluginInfo=ServiceManager.getService(AccountPluginInfoService.class);  externalPluginName=pluginInfo.getExternalPluginName();  userAgent=pluginInfo.getUserAgent();}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Thunk static void playSoundEffect(int keyCode,View v){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  break;case KeyEvent.KEYCODE_DPAD_RIGHT:v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);break;case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_MOVE_END:v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);break;case KeyEvent.KEYCODE_DPAD_UP:case KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_MOVE_HOME:v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);break;default :break;}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testOrderDoesntMatter() throws Exception {  query=new PhraseQuery(2,"field","two","one");  ScoreDoc[] hits=searcher.search(query,1000).scoreDocs;  assertEquals("just sloppy enough",1,hits.length);  QueryUtils.check(random(),query,searcher);  query=new PhraseQuery(2,"field","three","one");  hits=searcher.search(query,1000).scoreDocs;  assertEquals("not sloppy enough",0,hits.length);  QueryUtils.check(random(),query,searcher);}  }
class C{  private Option<File> findManifestInParentsDirectories(){  Option<FileHelper.FileHolder> projectRootHolderOption=fileHelper.findRootProjectHolder();  if (projectRootHolderOption.isAbsent()) {    return Option.absent();  }  FileHelper.FileHolder projectRootHolder=projectRootHolderOption.get();  File projectRoot=projectRootHolder.projectRoot;  File androidManifestFile=new File(projectRoot,"AndroidManifest.xml");  for (int i=0; i < MAX_PARENTS_FROM_SOURCE_FOLDER; i++) {    if (androidManifestFile.exists()) {      break;    }    androidManifestFile=new File(projectRoot,"src" + File.separator + "main"+ File.separator+ "AndroidManifest.xml");    if (androidManifestFile.exists()) {      break;    }    if (projectRoot.getParentFile() != null) {      projectRoot=projectRoot.getParentFile();      androidManifestFile=new File(projectRoot,"AndroidManifest.xml");    } else {      break;    }  }  if (!androidManifestFile.exists()) {    return Option.absent();  }  return Option.of(androidManifestFile);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String localName="domest";  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItemNS(namespaceURI,localName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void createCashBasedJournalEntriesAndReversalsForLoan(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long paymentTypeId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal){  int accountTypeToDebitId=accountTypeToBeDebited;  int accountTypeToCreditId=accountTypeToBeCredited;  if (isReversal) {    accountTypeToDebitId=accountTypeToBeCredited;    accountTypeToCreditId=accountTypeToBeDebited;  }  createJournalEntriesForLoan(office,currencyCode,accountTypeToDebitId,accountTypeToCreditId,loanProductId,paymentTypeId,loanId,transactionId,transactionDate,amount);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.614 -0500",hash_original_method="67241BF201ED077F6E669112ABB44844",hash_generated_method="67241BF201ED077F6E669112ABB44844") void clearCache(){  if (!checkInitialized()) {    return;  }  mCacheDatabase.delete("cache",null,null);}  }
class C{  public CholeskyDecomposition(final Matrix A){  QL.require(A.rows() == A.cols(),Matrix.MATRIX_MUST_BE_SQUARE);  this.n=A.rows();  this.L=new Matrix(n,n);  this.isspd=(A.rows() == A.cols());  for (int j=0; j < n; j++) {    double d=0.0;    for (int k=0; k < j; k++) {      double s=0.0;      for (int i=0; i < k; i++) {        s+=L.$[L.addr.op(k,i)] * L.$[L.addr.op(j,i)];      }      L.$[L.addr.op(j,k)]=s=(A.$[A.addr.op(j,k)] - s) / L.$[L.addr.op(k,k)];      d=d + s * s;      isspd=isspd & (A.$[A.addr.op(k,j)] == A.$[A.addr.op(j,k)]);    }    d=A.$[A.addr.op(j,j)] - d;    isspd=isspd && (d > 0.0);    L.$[L.addr.op(j,j)]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L.$[L.addr.op(j,k)]=0.0;    }  }}  }
class C{  public List<LocalVariable> visibleVariables() throws AbsentInformationException {  validateStackFrame();  createVisibleVariables();  List<LocalVariable> mapAsList=new ArrayList<LocalVariable>(visibleVariables.values());  Collections.sort(mapAsList);  return mapAsList;}  }
class C{  public boolean isIdle(){  return getState().isIdle();}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  protected ShaderVar addConst(String name,int value){  return addConst(name,new RInt(value));}  }
class C{  public boolean reverseAccrualIt(){  if (!isValidAction(ACTION_Reverse_Accrual))   return false;  if (m_document != null) {    if (m_document.reverseAccrualIt()) {      m_status=STATUS_Reversed;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Reversed;  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] minus(T[] self,Iterable removeMe){  return (T[])minus(toList(self),removeMe).toArray();}  }
class C{  public Y desc(){  criteria.addOrderByDesc(getColumnName());  return criteria;}  }
class C{  public int remainingCapacity(){  return maxSize - size();}  }
class C{  @Override public String toString(){  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public Object clone(){  CourseOffering co=new CourseOffering();  co.setCourseNbr(this.getCourseNbr());  co.setDemand(this.getDemand());  co.setPermId(this.getPermId());  co.setNbrExpectedStudents(this.getNbrExpectedStudents());  co.setProjectedDemand(this.getProjectedDemand());  co.setSubjectArea(this.getSubjectArea());  co.setSubjectAreaAbbv(this.getSubjectAreaAbbv());  co.setTitle(this.getTitle());  co.setDemandOffering(this.getDemandOffering());  co.setDemandOfferingType(this.getDemandOfferingType());  co.setExternalUniqueId(this.getExternalUniqueId());  co.setScheduleBookNote(this.getScheduleBookNote());  co.setIsControl(this.getIsControl());  return co;}  }
class C{  public static void readyGoWithAnimation(Activity activity,Class<?> className,Bundle bundle,@NonNull ActivityOptionsCompat option){  ActivityCompat.startActivity(activity,getIntent(activity,className).putExtras(bundle),option.toBundle());}  }
class C{  @RequestMapping(value="/businessObjectData/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}" + "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_DELETE) public BusinessObjectData deleteBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam("deleteFiles") Boolean deleteFiles){  return businessObjectDataService.deleteBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,new ArrayList<String>(),businessObjectDataVersion),deleteFiles);}  }
class C{  public static void textRight(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int ws=metrics.stringWidth(text);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)(xs - ws),(float)(ys + hs));  draw();}  }
class C{  boolean hsbIsVisible(boolean vsbVisible){  int w=width - ((2 * SPACE) + (2 * MARGIN) + (vsbVisible ? SCROLLBAR_AREA : 0));  return (maxLength > w);}  }
class C{  public void updateSurfaceColor(float[] rgba){  FloatBuffer colors=getMeshData().getColorBuffer();  int dataSize=colors.limit();  for (int i=0; i < dataSize; i+=4) {    if (colors.get(i + 3) != 0) {      colors.put(i,rgba[0]);      colors.put(i + 1,rgba[1]);      colors.put(i + 2,rgba[2]);      colors.put(i + 3,rgba[3]);    }  }  getMeshData().setColorBuffer(colors);  markDirty(DirtyType.RenderState);}  }
class C{  public void delete(){  rot=null;}  }
class C{  public static boolean copyFile(Context context,File srcFile,File dstFile,Handler handler,long totalSize){  try {    InputStream in=new FileInputStream(srcFile);    if (dstFile.exists()) {      dstFile.delete();    }    OutputStream out=new FileOutputStream(dstFile);    try {      int cnt;      byte[] buf=new byte[4096];      while ((cnt=in.read(buf)) >= 0) {        out.write(buf,0,cnt);        mCountSize=mCountSize + cnt;        int number=(int)((100 * mCountSize) / totalSize);        Message progressMessage=handler.obtainMessage();        Bundle b=new Bundle();        b.putInt("event",processEvent);        b.putInt("number",number);        progressMessage.setData(b);        handler.sendMessage(progressMessage);      }      if (mCountSize >= totalSize) {        mCountSize=0;      }    }  finally {      out.close();      in.close();    }    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public AxisEntity(Shape area,Axis axis){  this(area,axis,null);}  }
class C{  public void connect(OneSheeldDevice device){  if (device == null)   throw new NullPointerException("The passed device is null, have you checked its validity?");  Log.i("Manager: Connection request to " + device.getName() + " received.");  if (!handleBluetoothErrors()) {    startConnection(device);  } else   Log.i("Unable to initiate connection to " + device.getName() + ", an error occurred.");}  }
class C{  public static X509CRLImpl toImpl(X509CRL crl) throws CRLException {  if (crl instanceof X509CRLImpl) {    return (X509CRLImpl)crl;  } else {    return X509Factory.intern(crl);  }}  }
class C{  private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){  Validate.notNull(request,"request");  Validate.notEmpty(tenantName,"tenantName");  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();  Validate.notNull(idmFactory,"idmFactory");  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();  idmAccessor.setTenant(tenantName);  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);  if (encodedEntityId == null || encodedEntityId.isEmpty()) {    logger.error("No Relying Party's entity ID found. Ignore the request!");    return null;  }  String rpEntityId=new String(Base64.decode(encodedEntityId));  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);  if (rp != null) {    return rp;  } else {    logger.error("Unknown relying party: " + rpEntityId);    return null;  }}  }
class C{  public Element rootFromFile(File file) throws JDOMException, IOException {  if (log.isDebugEnabled()) {    log.debug("reading xml from file: " + file.getPath());  }  FileInputStream fs=new FileInputStream(file);  try {    return getRoot(verify,fs);  }  finally {    fs.close();  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  private static void doCopyFile(final File srcFile,final File destFile,final boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    final long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      final long remain=size - pos;      count=remain > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;      final long bytesCopied=output.transferFrom(input,pos,count);      if (bytesCopied == 0) {        break;      }      pos+=bytesCopied;    }  }  finally {    ParseIOUtils.closeQuietly(output);    ParseIOUtils.closeQuietly(fos);    ParseIOUtils.closeQuietly(input);    ParseIOUtils.closeQuietly(fis);  }  final long srcLen=srcFile.length();  final long dstLen=destFile.length();  if (srcLen != dstLen) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "' Expected length: "+ srcLen+ " Actual: "+ dstLen);  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public S state(){  return (S)Phlux.INSTANCE.state(key);}  }
class C{  private void doFailTask(Class<? extends DataObject> clazz,List<URI> ids,String opId,ServiceCoded serviceCoded){  try {    for (    URI id : ids) {      dbClient.error(clazz,id,opId,serviceCoded);    }  } catch (  DatabaseException ioe) {    log.error(ioe.getMessage());  }}  }
class C{  public MultipleActions(final ChatAction... action){  this.actions=Arrays.asList(action);}  }
class C{  public void measure(int tag,int[] outputBuffer){  UiThreadUtil.assertOnUiThread();  View v=mTagsToViews.get(tag);  if (v == null) {    throw new NoSuchNativeViewException("No native view for " + tag + " currently exists");  }  v.getLocationOnScreen(outputBuffer);  outputBuffer[2]=v.getWidth();  outputBuffer[3]=v.getHeight();}  }
class C{  public TemplateNameExtractor(){  SimpleWikiConfiguration config=null;  try {    config=new SimpleWikiConfiguration(WikiConstants.SWEBLE_CONFIG);  } catch (  IOException e) {    e.printStackTrace();  }catch (  JAXBException e) {    e.printStackTrace();  }  this.config=config;}  }
class C{  public static void main(String[] args){  runDataGenerator(new BayesNet(),args);}  }
class C{  @Override protected void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getCharacterEncoding() == null) {    request.setCharacterEncoding("UTF-8");  }  response.setHeader("Cache-Control","no-cache, no-store, must-revalidate");  response.setHeader("Pragma","no-cache");  final String subscriptionId=request.getParameter(REQUEST_PARAM_SUBSCRIPTION_ID).trim();  final String tenantId=request.getParameter(REQUEST_PARAM_TENANT_ID).trim();  final boolean showSubscriptionPm=!emptyString(request.getParameter(REQUEST_PARAM_BUTTON_SHOW_SUB_PM));  Map<ContextKey,ContextValue<?>> context=createSubscriptionPmContext(subscriptionId,tenantId);  if (context != null) {    PriceModel priceModel=getPriceModel(context,createLocaleSet(BILLING_APPLICATION_LOCALES));    if (priceModel == null) {      errorForward(request,response,"Price model for subscription " + subscriptionId + " not found.");      return;    }    if (showSubscriptionPm) {      PriceModelContent priceModelContent=getPriceModelContent(priceModel,DEFAULT_LOCALE);      if (priceModelContent != null) {        if (!generatePdfResponse(priceModelContent,generateSubscriptionPmFileName(subscriptionId),response)) {          errorForward(request,response,"Price model found but its file type was not supported.");        }      } else {        errorForward(request,response,"Price model not found.");      }    } else {      pushPriceModel(priceModel,subscriptionId,request,response);    }  } else {    errorForward(request,response,"Please enter a valid subscription ID!");  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getParameterValues()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public boolean isIndependent(Node y,Node x,List<Node> z){  int m=sampleSize();  Kernel xKernel=new KernelGaussian(1);  Kernel yKernel=new KernelGaussian(1);  List<Kernel> zKernel=new ArrayList<>();  yKernel.setDefaultBw(this.dataSet,y);  xKernel.setDefaultBw(this.dataSet,x);  if (!z.isEmpty()) {    for (int i=0; i < z.size(); i++) {      Kernel Zi=new KernelGaussian(1);      Zi.setDefaultBw(this.dataSet,z.get(i));      zKernel.add(Zi);    }  }  TetradMatrix Ky=null;  TetradMatrix Kx=null;  TetradMatrix Kz=null;  if (useIncompleteCholesky > 0) {    Ky=KernelUtils.incompleteCholeskyGramMatrix(Arrays.asList(yKernel),this.dataSet,Arrays.asList(y),useIncompleteCholesky);    Kx=KernelUtils.incompleteCholeskyGramMatrix(Arrays.asList(xKernel),this.dataSet,Arrays.asList(x),useIncompleteCholesky);    if (!z.isEmpty()) {      Kz=KernelUtils.incompleteCholeskyGramMatrix(zKernel,this.dataSet,z,useIncompleteCholesky);    }  } else {    Ky=KernelUtils.constructCentralizedGramMatrix(Arrays.asList(yKernel),this.dataSet,Arrays.asList(y));    Kx=KernelUtils.constructCentralizedGramMatrix(Arrays.asList(xKernel),this.dataSet,Arrays.asList(x));    if (!z.isEmpty()) {      Kz=KernelUtils.constructCentralizedGramMatrix(zKernel,this.dataSet,z);    }  }  if (z.isEmpty()) {    if (useIncompleteCholesky > 0) {      this.hsic=empiricalHSICincompleteCholesky(Ky,Kx,m);    } else {      this.hsic=empiricalHSIC(Ky,Kx,m);    }  } else {    if (useIncompleteCholesky > 0) {      this.hsic=empiricalHSICincompleteCholesky(Ky,Kx,Kz,m);    } else {      this.hsic=empiricalHSIC(Ky,Kx,Kz,m);    }  }  double[] nullapprox=new double[this.perms];  int[] zind=null;  int ycol=this.dataSet.getColumn(y);  List<List<Integer>> clusterAssign=null;  if (!z.isEmpty()) {    KMeans kmeans=KMeans.randomClusters((m / 3));    zind=new int[z.size()];    for (int j=0; j < z.size(); j++) {      zind[j]=dataSet.getColumn(z.get(j));    }    kmeans.cluster(dataSet.subsetColumns(z).getDoubleData());    clusterAssign=kmeans.getClusters();  }  for (int i=0; i < this.perms; i++) {    DataSet shuffleData=new ColtDataSet((ColtDataSet)dataSet);    if (z.isEmpty()) {      List<Integer> indicesList=new ArrayList<>();      for (int j=0; j < m; j++) {        indicesList.add(j);      }      Collections.shuffle(indicesList);      for (int j=0; j < m; j++) {        double shuffleVal=dataSet.getDouble(indicesList.get(j),ycol);        shuffleData.setDouble(j,ycol,shuffleVal);      }    } else {      for (int j=0; j < clusterAssign.size(); j++) {        List<Integer> shuffleCluster=new ArrayList<>(clusterAssign.get(j));        Collections.shuffle(shuffleCluster);        for (int k=0; k < shuffleCluster.size(); k++) {          double swapVal=dataSet.getDouble(clusterAssign.get(j).get(k),ycol);          shuffleData.setDouble(shuffleCluster.get(k),ycol,swapVal);          for (int zi=0; zi < z.size(); zi++) {            swapVal=dataSet.getDouble(clusterAssign.get(j).get(k),zind[zi]);            shuffleData.setDouble(shuffleCluster.get(k),zind[zi],swapVal);          }        }      }    }    yKernel.setDefaultBw(shuffleData,y);    for (int j=0; j < z.size(); j++) {      zKernel.get(j).setDefaultBw(shuffleData,z.get(j));    }    TetradMatrix Kyn=null;    if (useIncompleteCholesky > 0) {      Kyn=KernelUtils.incompleteCholeskyGramMatrix(Arrays.asList(yKernel),shuffleData,Arrays.asList(y),useIncompleteCholesky);    } else {      Kyn=KernelUtils.constructCentralizedGramMatrix(Arrays.asList(yKernel),shuffleData,Arrays.asList(y));    }    TetradMatrix Kzn=null;    if (!z.isEmpty()) {      if (useIncompleteCholesky > 0) {        Kzn=KernelUtils.incompleteCholeskyGramMatrix(zKernel,shuffleData,z,useIncompleteCholesky);      } else {        Kzn=KernelUtils.constructCentralizedGramMatrix(zKernel,shuffleData,z);      }    }    if (z.isEmpty()) {      if (useIncompleteCholesky > 0) {        nullapprox[i]=empiricalHSICincompleteCholesky(Kyn,Kx,m);      } else {        nullapprox[i]=empiricalHSIC(Kyn,Kx,m);      }    } else {      if (useIncompleteCholesky > 0) {        nullapprox[i]=empiricalHSICincompleteCholesky(Kyn,Kx,Kz,m);      } else {        nullapprox[i]=empiricalHSIC(Kyn,Kx,Kz,m);      }    }  }  double evalCdf=0.0;  for (int i=0; i < this.perms; i++) {    if (nullapprox[i] <= this.hsic) {      evalCdf+=1.0;    }  }  evalCdf/=(double)this.perms;  this.pValue=1.0 - evalCdf;  if (this.pValue <= this.alpha) {    TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,getPValue()));    return false;  }  if (verbose) {    TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,getPValue()));  }  return true;}  }
class C{  @Override public void clear(List<Task> selection){  TaskDependency[] deps=toArray();  for (int i=0; i < deps.length; i++) {    if (selection.contains(deps[i].getDependant()) && selection.contains(deps[i].getDependee())) {      deps[i].delete();    }  }}  }
class C{  public XYDifferenceRenderer(){  this(Color.green,Color.red,false);}  }
class C{  @Override default CompletableFuture<OptionalInt> maxInt(final ToIntFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public static String readStringFromFile(File file,String charsetName) throws IOException {  return readBytesFromFile(file).toString(Charset.forName(charsetName));}  }
class C{  public static void writeByteArray(final DataOutput out,final byte[] b) throws IOException {  if (b == null) {    WritableUtils.writeVInt(out,0);  } else {    writeByteArray(out,b,0,b.length);  }}  }
class C{  public static void zip(File input,String pathWithinArchive,File output) throws IOException {  try (ZipOutputStream zipStream=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(output)))){    zipStream.setMethod(ZipOutputStream.DEFLATED);    zipStream.setLevel(9);    zipStream.putNextEntry(new ZipEntry(pathWithinArchive));    try (BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(input))){      copy(inputStream,zipStream);    }   } }  }
class C{  private static int parseFileForValue(String textToMatch,FileInputStream stream){  byte[] buffer=new byte[1024];  try {    int length=stream.read(buffer);    for (int i=0; i < length; i++) {      if (buffer[i] == '\n' || i == 0) {        if (buffer[i] == '\n')         i++;        for (int j=i; j < length; j++) {          int textIndex=j - i;          if (buffer[j] != textToMatch.charAt(textIndex)) {            break;          }          if (textIndex == textToMatch.length() - 1) {            return extractValue(buffer,j);          }        }      }    }  } catch (  IOException e) {  }catch (  NumberFormatException e) {  }  return DEVICEINFO_UNKNOWN;}  }
class C{  public final void applyLinearImpulse(Vec2 impulse,Vec2 point,boolean wake){  if (m_type != BodyType.DYNAMIC) {    return;  }  if (!isAwake()) {    if (wake) {      setAwake(true);    } else {      return;    }  }  m_linearVelocity.x+=impulse.x * m_invMass;  m_linearVelocity.y+=impulse.y * m_invMass;  m_angularVelocity+=m_invI * ((point.x - m_sweep.c.x) * impulse.y - (point.y - m_sweep.c.y) * impulse.x);}  }
class C{  @Override public void runPlugin(String pluginName,String[] args,boolean runOnDedicatedThread){  host.runPlugin(pluginName,args,runOnDedicatedThread);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  public int size(){  return words.length * BITS_PER_WORD;}  }
class C{  public <T>T withTransaction(@NotNull Propagation propagation,@NotNull Isolation isolation,@NotNull TransactionCallback<T> callback){  TransactionSettings settings=new TransactionSettings();  settings.setPropagation(propagation);  settings.setIsolation(isolation);  return withTransaction(settings,callback);}  }
class C{  private GuacamoleHome(){}  }
class C{  public synchronized void addXTextLabel(double x,String text){  mXTextLabels.put(x,text);}  }
class C{  public void advanceInputWatermark(Instant newInputWatermark) throws Exception {  timerInternals.advanceInputWatermark(TimerCallback.NO_OP,newInputWatermark);}  }
class C{  public RunNumberPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  public void testGetInputEncoding() throws Exception {  assertEquals("US-ASCII",documentA.getInputEncoding());  assertEquals("ISO-8859-1",documentB.getInputEncoding());}  }
class C{  public char charAt(int pos){  return c[pos];}  }
class C{  static Collection<ResolvedMigration> collectMigrations(Collection<MigrationResolver> migrationResolvers){  Set<ResolvedMigration> migrations=new HashSet<ResolvedMigration>();  for (  MigrationResolver migrationResolver : migrationResolvers) {    migrations.addAll(migrationResolver.resolveMigrations());  }  return migrations;}  }
class C{  public final String value(int valIndex){  if (!isNominal() && !isString()) {    return "";  } else {    Object val=((NominalAttributeInfo)m_AttributeInfo).m_Values.get(valIndex);    if (val instanceof SerializedObject) {      val=((SerializedObject)val).getObject();    }    return (String)val;  }}  }
class C{  protected void displayPopupMenu(int x,int y){  if (this.popup == null) {    return;  }  boolean isDomainZoomable=false;  boolean isRangeZoomable=false;  Plot plot=(this.chart != null ? this.chart.getPlot() : null);  if (plot instanceof Zoomable) {    Zoomable z=(Zoomable)plot;    isDomainZoomable=z.isDomainZoomable();    isRangeZoomable=z.isRangeZoomable();  }  if (this.zoomInDomainMenuItem != null) {    this.zoomInDomainMenuItem.setEnabled(isDomainZoomable);  }  if (this.zoomOutDomainMenuItem != null) {    this.zoomOutDomainMenuItem.setEnabled(isDomainZoomable);  }  if (this.zoomResetDomainMenuItem != null) {    this.zoomResetDomainMenuItem.setEnabled(isDomainZoomable);  }  if (this.zoomInRangeMenuItem != null) {    this.zoomInRangeMenuItem.setEnabled(isRangeZoomable);  }  if (this.zoomOutRangeMenuItem != null) {    this.zoomOutRangeMenuItem.setEnabled(isRangeZoomable);  }  if (this.zoomResetRangeMenuItem != null) {    this.zoomResetRangeMenuItem.setEnabled(isRangeZoomable);  }  if (this.zoomInBothMenuItem != null) {    this.zoomInBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable);  }  if (this.zoomOutBothMenuItem != null) {    this.zoomOutBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable);  }  if (this.zoomResetBothMenuItem != null) {    this.zoomResetBothMenuItem.setEnabled(isDomainZoomable && isRangeZoomable);  }  this.popup.show(this,x,y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textwithnomarkup.class,args);}  }
class C{  protected AbstractSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public Boolean isDryRun(){  return dryRun;}  }
class C{  public HalfEdge find(Coordinate dest){  HalfEdge oNext=this;  do {    if (oNext == null)     return null;    if (oNext.dest().equals2D(dest))     return oNext;    oNext=oNext.oNext();  } while (oNext != this);  return null;}  }
class C{  public MicroPipeline(final String id,final MicroPipelineConfiguration configuration){  this.id=id;  this.configuration=configuration;}  }
class C{  @Override public void checkWritingAllowed(){}  }
class C{  public boolean isStopped(){  if (!stopped && this.spiderParam.getMaxDuration() > 0) {    if (TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis() - this.timeStarted) > this.spiderParam.getMaxDuration()) {      log.info("Spidering process has exceeded maxDuration of " + this.spiderParam.getMaxDuration() + " minute(s)");      this.complete();    }  }  return stopped;}  }
class C{  private PostgreSQLModuleMixedGraphsLoader(){}  }
class C{  public void addTokenVectorPair(String token,double[] vector){  tokenToVectorDictionary.put(token,vector);  vectorLength=vector.length;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void unregisterDataSetObserver(DataSetObserver observer){  if (observer == null) {    return;  }  super.unregisterDataSetObserver(observer);}  }
class C{  public void updateCompleted(UpdateManagerEvent e){}  }
class C{  private static Response route(final Take take,final Fallback fbk,final Request req) throws IOException {  final long start=System.currentTimeMillis();  Response res;  try {    res=TkFallback.wrap(take.act(req),fbk,req);  } catch (  final HttpException ex) {    final Opt<Response> fbres=fbk.route(new RqFallback.Fake(req,ex.code(),TkFallback.error(ex,req,System.currentTimeMillis() - start)));    if (!fbres.has()) {      throw new IOException(String.format("There is no fallback available in %s",fbk.getClass().getCanonicalName()),TkFallback.error(ex,req,System.currentTimeMillis() - start));    }    res=TkFallback.wrap(fbres.get(),fbk,req);  }catch (  final Throwable ex) {    final Opt<Response> fbres=fbk.route(new RqFallback.Fake(req,HttpURLConnection.HTTP_INTERNAL_ERROR,TkFallback.error(ex,req,System.currentTimeMillis() - start)));    if (!fbres.has()) {      throw new IOException(String.format("There is no fallback available for %s in %s",ex.getClass().getCanonicalName(),fbk.getClass().getCanonicalName()),TkFallback.error(ex,req,System.currentTimeMillis() - start));    }    res=TkFallback.wrap(fbres.get(),fbk,req);  }  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.329 -0500",hash_original_method="6CF6D9D2DF58623C9FADAD3A1D1AF7CA",hash_generated_method="7DDCB78FFD6A496EB6AB9A2913FA3D32") public static String dumpCurrentRowToString(Cursor cursor){  StringBuilder sb=new StringBuilder();  dumpCurrentRow(cursor,sb);  return sb.toString();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender replySender,VersionTag versionTag,ReplyException ex){  Assert.assertTrue(recipient != null,"InvalidateReplyMessage NULL reply message");  InvalidateReplyMessage m=new InvalidateReplyMessage(processorId,versionTag,ex);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  void rememberSyncState(){  if (getChildCount() > 0) {    mNeedSync=true;    mSyncHeight=getHeight();    View v=getChildAt(0);    ListAdapter adapter=getAdapter();    if (mFirstPosition >= 0 && mFirstPosition < adapter.getCount()) {      mSyncRowId=adapter.getItemId(mFirstPosition);    } else {      mSyncRowId=NO_ID;    }    if (v != null) {      mSpecificTop=v.getTop();    }    mSyncPosition=mFirstPosition;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.725 -0500",hash_original_method="16FF962612CA0CC38B4765F38064800C",hash_generated_method="DE41ACB60F7DCC91D2500687FD4FFE69") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onAnimationCancel(Animator animation){}  }
class C{  public void close(){  super.close();  buffer=null;}  }
class C{  private void replace(Method method){  if (replace == null) {    replace=getFunction(method);  }}  }
class C{  private static int computeYDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int leftColumnDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleWidth);  int rightColumnDimension=MathUtils.round(ResultPoint.distance(topRight,bottomRight) / moduleWidth);  return (leftColumnDimension + rightColumnDimension) >> 1;}  }
class C{  public IndicatorCollector(Indicator indicator,EpsilonBoxDominanceArchive archive){  this(indicator,archive,null);}  }
class C{  protected void injectStats() throws BaseCollectionException {  DbClient client=(DbClient)_keyMap.get(Constants.dbClient);  @SuppressWarnings("unchecked") List<Stat> stats=(List<Stat>)_keyMap.get(Constants._Stats);  @SuppressWarnings("unchecked") Map<String,String> props=(Map<String,String>)_keyMap.get(Constants.PROPS);  int size=Constants.DEFAULT_PARTITION_SIZE;  if (null != props.get(Constants.METERING_RECORDS_PARTITION_SIZE)) {    size=Integer.parseInt(props.get(Constants.METERING_RECORDS_PARTITION_SIZE));  }  if (null == _partitionManager) {    Stat[] statBatch=new Stat[stats.size()];    statBatch=stats.toArray(statBatch);    try {      client.insertTimeSeries(StatTimeSeries.class,statBatch);      _logger.info("{} Stat records persisted to DB",statBatch.length);    } catch (    DatabaseException e) {      _logger.error("Error inserting records into the database",e);    }  } else {    _partitionManager.insertInBatches(stats,size,client);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.asin(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected Image generatePeerImage(){  return null;}  }
class C{  public final void addElement(String value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public AccountHeaderBuilder withTextColorRes(@ColorRes int textColorRes){  this.mTextColor=ColorHolder.fromColorRes(textColorRes);  return this;}  }
class C{  public static Drawable tint(Context context,@DrawableRes int drawableRes,@ColorRes int colorRes){  Drawable drawable=getDrawable(context,drawableRes);  drawable=drawable.mutate();  return tint(context,drawable,colorRes);}  }
class C{  public int next(){  if (endElement) {    endElement=false;    eventType=END_ELEMENT;    currentToken="";  } else {    read();  }  return eventType;}  }
class C{  protected void detach(){  wrappedConnection=null;  connManager=null;  duration=Long.MAX_VALUE;}  }
class C{  public boolean isStandardHeaderFooter(){  Object oo=get_Value(COLUMNNAME_IsStandardHeaderFooter);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String stringFor(int m){switch (m) {case cudaFilterModePoint:    return "cudaFilterModePoint";case cudaFilterModeLinear:  return "cudaFilterModeLinear";}return "INVALID cudaTextureFilterMode: " + m;}  }
class C{  public CoreContainer(SolrResourceLoader loader){  this(loader,ConfigSolr.fromSolrHome(loader,loader.getInstanceDir()));}  }
class C{  public Tasks<VolumeRestRep> addJournalCapacity(VolumeCreate create){  return postTasks(create,baseUrl + "/protection/addJournalCapacity");}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (qName.equals(KEY_TAG)) {    this.itemHandler.setKey(getCurrentText());    this.rootHandler.popSubHandler();    this.rootHandler.pushSubHandler(new ValueHandler(this.rootHandler,this.itemHandler));  } else {    throw new SAXException("Expecting </Key> but found " + qName);  }}  }
class C{  public Map<String,Object> nodeAttributes(){  return nodeAttrs != null ? nodeAttrs : Collections.<String,Object>emptyMap();}  }
class C{  public static DoubleRange fixed(double num){  return new DoubleRange(num,num);}  }
class C{  public void actionPerformed(ActionEvent e){  Transferable transferable=InternalClipboard.getInstance().getContents(null);  if (!(transferable instanceof SubsessionSelection)) {    return;  }  SubsessionSelection selection=(SubsessionSelection)transferable;  DataFlavor flavor=new DataFlavor(SubsessionSelection.class,"Subsession Selection");  try {    List modelList=(List)selection.getTransferData(flavor);    if (modelList != null) {      SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();      SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;      Point point=EditorUtils.getTopLeftPoint(modelList);      int numPastes=selection.getNumPastes();      point.translate(50 * numPastes,50 * numPastes);      sessionEditor.pasteSubsession(modelList,point);    }  } catch (  Exception e1) {    throw new RuntimeException(e1);  }}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public Vector3D normalized(){  return (this.mul(1.0 / this.modulus()));}  }
class C{  public String formatDateTime(Date d){  return d.toString();}  }
class C{  public ObjectSlot[] slots(){  return slotsToSerialize;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARGS:    return ((InternalEList<?>)getArgs()).basicRemove(otherEnd,msgs);case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR:  return ((InternalEList<?>)getArraySelector()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void logMessage(Level logLevel,Throwable throwable,String message){  if (StandardLogService.doLog) {    try {      StringBuffer buff=new StringBuffer(Thread.currentThread().getName());      buff.append(" ");      buff.append(message);      message=buff.toString();      if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {        logErrorMessage(throwable,message);      } else       if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {        logDebugMessage(throwable,message);      } else       if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {        logInfoMessage(throwable,message);      } else       if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {        logWarnMessage(throwable,message);      } else       if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {        audit(message);      } else       if (Level.STATISTICS == logLevel) {        statistic(message);      }    } catch (    Throwable t) {      logger.error(t);    }  }}  }
class C{  public boolean isOverwriteLocFrom(){  Object oo=get_Value(COLUMNNAME_OverwriteLocFrom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected final void mergeMimeMappings(WebXml theWebXml){  int count=0;  List<Element> srcItems=webXml.getTags(WebXmlType.MIME_MAPPING);  List<Element> targetItems=theWebXml.getTags(WebXmlType.MIME_MAPPING);  for (  Element targetItem : targetItems) {    boolean foundItem=false;    MimeMapping targetMimeMapping=(MimeMapping)targetItem;    for (    Element srcItem : srcItems) {      MimeMapping srcMimeMapping=(MimeMapping)srcItem;      if (targetMimeMapping.getExtension().equals(srcMimeMapping.getExtension())) {        foundItem=true;        break;      }    }    if (!foundItem) {      MimeMapping mimeMappingElement=(MimeMapping)webXml.getDescriptorType().getTagByName(WebXmlType.MIME_MAPPING).create();      mimeMappingElement.setExtension(targetMimeMapping.getExtension());      mimeMappingElement.setMimeType(targetMimeMapping.getMimeType());      this.webXml.addElement(mimeMappingElement.getTag(),mimeMappingElement,this.webXml.getRootElement());      this.webXml.addTag(mimeMappingElement);    }  }  getLogger().debug("Merged " + count + " mime mapping definition"+ (count != 1 ? "s " : " ")+ "into the descriptor",this.getClass().getName());}  }
class C{  public void union(int p,int q){  int pRoot=find(p);  int qRoot=find(q);  if (pRoot == qRoot) {    return;  }  id[pRoot]=qRoot;  count--;}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  ArrayList<Attribute> atts;  int i;  int numAtts;  Vector<Integer> indices;  Vector<Integer> subset;  Random rand;  int index;  numAtts=inputFormat.numAttributes();  if (inputFormat.classIndex() > -1) {    numAtts--;  }  if (m_NumAttributes < 1) {    numAtts=(int)Math.round(numAtts * m_NumAttributes);  } else {    if (m_NumAttributes < numAtts) {      numAtts=(int)m_NumAttributes;    }  }  if (getDebug()) {    System.out.println("# of atts: " + numAtts);  }  indices=new Vector<Integer>();  for (i=0; i < inputFormat.numAttributes(); i++) {    if (i == inputFormat.classIndex()) {      continue;    }    indices.add(i);  }  subset=new Vector<Integer>();  rand=new Random(m_Seed);  for (i=0; i < numAtts; i++) {    index=rand.nextInt(indices.size());    subset.add(indices.get(index));    indices.remove(index);  }  if (m_invertSelection) {    subset=indices;  }  Collections.sort(subset);  if (inputFormat.classIndex() > -1) {    subset.add(inputFormat.classIndex());  }  if (getDebug()) {    System.out.println("indices: " + subset);  }  atts=new ArrayList<Attribute>();  m_Indices=new int[subset.size()];  for (i=0; i < subset.size(); i++) {    atts.add(inputFormat.attribute(subset.get(i)));    m_Indices[i]=subset.get(i);  }  result=new Instances(inputFormat.relationName(),atts,0);  if (inputFormat.classIndex() > -1) {    result.setClassIndex(result.numAttributes() - 1);  }  return result;}  }
class C{  public SurfaceManager(Surface surface,SurfaceManager manager){  mSurface=surface;  mEGLSharedContext=manager.mEGLContext;  eglSetup();}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  boolean sevenzip=controller.is7ZipEnabled();  if (sevenzip) {    String cmd;    builder.append("\t<externals>\r\n");    if (sevenzip) {      cmd=sevenZipPathField.getText();      if (cmd.length() == 0) {        errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.PATH_NOT_SET,"The path to the 7Zip executable" + " is missing."));      }      builder.append("\t\t<sevenzip>\"" + cmd + "\"</sevenzip>\r\n");    }    builder.append("\t</externals>\r\n");  }}  }
class C{  public String readString(){  int len=readVarInt();  return readString(len);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.DIRECTIVE___GLOSSARY_1:    return ((InternalEList<?>)getGlossary_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___GENERATE_1:  return ((InternalEList<?>)getGenerate_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___GENERATE_PATH_1:return ((InternalEList<?>)getGenerate_path_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___USE_STATEMENT_1:return ((InternalEList<?>)getUseStatement_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___NAMESPACE_1:return ((InternalEList<?>)getNamespace_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___TRACE_TYPE_1:return ((InternalEList<?>)getTraceType_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___ENTITY_1:return ((InternalEList<?>)getEntity_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___DEBUG_1:return ((InternalEList<?>)getDebug_1()).basicRemove(otherEnd,msgs);case UmplePackage.DIRECTIVE___STRICTNESS_1:return ((InternalEList<?>)getStrictness_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public String toString(){  return "ReadPendingAchievementDetailsCommand [player=" + player.getName() + "]";}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  findAndInit(it);}  }
class C{  private static int addHashCode(int code,Object object){  code*=37;  return (object != null) ? code + object.hashCode() : code;}  }
class C{  private JComponent createTabs(String initialSelectedTab,String filter){  tabs=new SettingsTabs(this,filter,propertyCache);  if (initialSelectedTab != null) {    tabs.selectTab(initialSelectedTab);  }  if (tabs.getTabCount() == 0) {    return noMatchingSettingsLabel;  } else {    return tabs;  }}  }
class C{  public boolean isDone(){  return index >= ctrlpts.length;}  }
class C{  public int equivHashCode(){  return getBase().equivHashCode() * 101 + getIndex().equivHashCode() + 17;}  }
class C{  protected void onQueryComplete(int token,Object cookie,T object){}  }
class C{  public ActivityMonitor(IntentFilter which,ActivityResult result,boolean block){  mWhich=which;  mClass=null;  mResult=result;  mBlock=block;}  }
class C{  private static int bit(int i){  int ret=(1 << (i & LOW_ORDER_BITMASK));  return ret;}  }
class C{  public void computeQueryFacet(String facet){  Map<String,StatsCollector[]> f=queryFacetCollectors.get(facet);  for (  StatsCollector[] arr : f.values()) {    for (    StatsCollector b : arr) {      b.compute();    }  }}  }
class C{  protected void flow(Env<AttrContext> env,Queue<Env<AttrContext>> results){  if (compileStates.isDone(env,CompileState.FLOW)) {    results.add(env);    return;  }  try {    if (shouldStop(CompileState.FLOW))     return;    if (relax) {      results.add(env);      return;    }    if (verboseCompilePolicy)     printNote("[flow " + env.enclClass.sym + "]");    JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);    try {      make.at(Position.FIRSTPOS);      TreeMaker localMake=make.forToplevel(env.toplevel);      flow.analyzeTree(env,localMake);      compileStates.put(env,CompileState.FLOW);      if (shouldStop(CompileState.FLOW))       return;      results.add(env);    }  finally {      log.useSource(prev);    }  }  finally {    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);      taskListener.finished(e);    }  }}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof IPAddressName))   return false;  IPAddressName otherName=(IPAddressName)obj;  byte[] other=otherName.address;  if (other.length != address.length)   return false;  if (address.length == 8 || address.length == 32) {    int maskLen=address.length / 2;    for (int i=0; i < maskLen; i++) {      byte maskedThis=(byte)(address[i] & address[i + maskLen]);      byte maskedOther=(byte)(other[i] & other[i + maskLen]);      if (maskedThis != maskedOther) {        return false;      }    }    for (int i=maskLen; i < address.length; i++)     if (address[i] != other[i])     return false;    return true;  } else {    return Arrays.equals(other,address);  }}  }
class C{  private int margin(){  return 3;}  }
class C{  @Inline public final Address alloc(int bytes,int align,int offset){  Address start=alignAllocationNoFill(cursor,align,offset);  Address end=start.plus(bytes);  if (end.GT(limit)) {    if (bytes > BYTES_IN_LINE)     return overflowAlloc(bytes,align,offset); else     return allocSlowHot(bytes,align,offset);  }  fillAlignmentGap(cursor,start);  cursor=end;  return start;}  }
class C{  public final CC minWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),ConstraintParser.parseUnitValue(size,true),null,null));  return this;}  }
class C{  public int nextTag(){  while (true) {    int type=next();    if (type != COMMENT && type != DTD && type != PROCESSING_INSTRUCTION) {      return type;    }  }}  }
class C{  private DiffConsumerLogMessages(){}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    int count=3;    if (viewFlow != null) {      count=viewFlow.getViewsCount();    }    float temp=circleSeparation - 2 * radius;    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * radius)+ (count - 1) * temp + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private static XYDataset createDataset(){  TimeSeries s1=new TimeSeries("Indicator Price");  s1.add(new Month(1,2010),126.80);  s1.add(new Month(2,2010),123.37);  s1.add(new Month(3,2010),125.30);  s1.add(new Month(4,2010),126.89);  s1.add(new Month(5,2010),128.10);  s1.add(new Month(6,2010),142.20);  s1.add(new Month(7,2010),153.41);  s1.add(new Month(8,2010),157.46);  s1.add(new Month(9,2010),163.61);  s1.add(new Month(10,2010),161.56);  s1.add(new Month(11,2010),173.90);  s1.add(new Month(12,2010),184.26);  s1.add(new Month(1,2011),197.35);  s1.add(new Month(2,2011),216.03);  s1.add(new Month(3,2011),224.33);  s1.add(new Month(4,2011),231.24);  s1.add(new Month(5,2011),227.97);  s1.add(new Month(6,2011),215.58);  s1.add(new Month(7,2011),210.36);  s1.add(new Month(8,2011),212.19);  s1.add(new Month(9,2011),213.04);  s1.add(new Month(10,2011),193.90);  s1.add(new Month(11,2011),193.66);  s1.add(new Month(12,2011),189.02);  s1.add(new Month(1,2012),188.90);  s1.add(new Month(2,2012),182.29);  s1.add(new Month(3,2012),167.77);  s1.add(new Month(4,2012),160.46);  s1.add(new Month(5,2012),157.68);  s1.add(new Month(6,2012),145.31);  s1.add(new Month(7,2012),159.07);  s1.add(new Month(8,2012),148.50);  s1.add(new Month(9,2012),151.28);  s1.add(new Month(10,2012),147.12);  s1.add(new Month(11,2012),136.35);  s1.add(new Month(12,2012),131.31);  s1.add(new Month(1,2013),135.38);  s1.add(new Month(2,2013),131.51);  s1.add(new Month(3,2013),131.38);  TimeSeries s2=new TimeSeries("Columbian Milds");  s2.add(new Month(1,2010),207.51);  s2.add(new Month(2,2010),204.71);  s2.add(new Month(3,2010),205.71);  s2.add(new Month(4,2010),200.00);  s2.add(new Month(5,2010),200.54);  s2.add(new Month(6,2010),224.49);  s2.add(new Month(7,2010),235.52);  s2.add(new Month(8,2010),243.98);  s2.add(new Month(9,2010),247.77);  s2.add(new Month(10,2010),230.02);  s2.add(new Month(11,2010),244.02);  s2.add(new Month(12,2010),261.97);  s2.add(new Month(1,2011),279.88);  s2.add(new Month(2,2011),296.44);  s2.add(new Month(3,2011),300.68);  s2.add(new Month(4,2011),312.95);  s2.add(new Month(5,2011),302.17);  s2.add(new Month(6,2011),287.95);  s2.add(new Month(7,2011),285.21);  s2.add(new Month(8,2011),286.97);  s2.add(new Month(9,2011),287.54);  s2.add(new Month(10,2011),257.66);  s2.add(new Month(11,2011),256.99);  s2.add(new Month(12,2011),251.60);  s2.add(new Month(1,2012),255.91);  s2.add(new Month(2,2012),244.14);  s2.add(new Month(3,2012),222.84);  s2.add(new Month(4,2012),214.46);  s2.add(new Month(5,2012),207.32);  s2.add(new Month(6,2012),184.67);  s2.add(new Month(7,2012),202.56);  s2.add(new Month(8,2012),187.14);  s2.add(new Month(9,2012),190.10);  s2.add(new Month(10,2012),181.39);  s2.add(new Month(11,2012),170.08);  s2.add(new Month(12,2012),164.40);  s2.add(new Month(1,2013),169.19);  s2.add(new Month(2,2013),161.70);  s2.add(new Month(3,2013),161.53);  TimeSeries s3=new TimeSeries("Other Milds");  s3.add(new Month(1,2010),158.90);  s3.add(new Month(2,2010),157.86);  s3.add(new Month(3,2010),164.50);  s3.add(new Month(4,2010),169.55);  s3.add(new Month(5,2010),173.38);  s3.add(new Month(6,2010),190.90);  s3.add(new Month(7,2010),203.21);  s3.add(new Month(8,2010),211.59);  s3.add(new Month(9,2010),222.71);  s3.add(new Month(10,2010),217.64);  s3.add(new Month(11,2010),233.48);  s3.add(new Month(12,2010),248.17);  s3.add(new Month(1,2011),263.77);  s3.add(new Month(2,2011),287.89);  s3.add(new Month(3,2011),292.07);  s3.add(new Month(4,2011),300.12);  s3.add(new Month(5,2011),291.09);  s3.add(new Month(6,2011),274.98);  s3.add(new Month(7,2011),268.02);  s3.add(new Month(8,2011),270.44);  s3.add(new Month(9,2011),274.88);  s3.add(new Month(10,2011),247.82);  s3.add(new Month(11,2011),245.09);  s3.add(new Month(12,2011),236.71);  s3.add(new Month(1,2012),237.21);  s3.add(new Month(2,2012),224.16);  s3.add(new Month(3,2012),201.26);  s3.add(new Month(4,2012),191.45);  s3.add(new Month(5,2012),184.65);  s3.add(new Month(6,2012),168.69);  s3.add(new Month(7,2012),190.45);  s3.add(new Month(8,2012),174.82);  s3.add(new Month(9,2012),178.98);  s3.add(new Month(10,2012),173.32);  s3.add(new Month(11,2012),159.91);  s3.add(new Month(12,2012),152.74);  s3.add(new Month(1,2013),157.29);  s3.add(new Month(2,2013),149.46);  s3.add(new Month(3,2013),149.78);  TimeSeries s4=new TimeSeries("Brazilian Naturals");  s4.add(new Month(1,2010),131.67);  s4.add(new Month(2,2010),124.57);  s4.add(new Month(3,2010),126.21);  s4.add(new Month(4,2010),126.07);  s4.add(new Month(5,2010),127.45);  s4.add(new Month(6,2010),143.20);  s4.add(new Month(7,2010),156.87);  s4.add(new Month(8,2010),163.21);  s4.add(new Month(9,2010),175.15);  s4.add(new Month(10,2010),175.38);  s4.add(new Month(11,2010),190.62);  s4.add(new Month(12,2010),204.25);  s4.add(new Month(1,2011),219.77);  s4.add(new Month(2,2011),247.00);  s4.add(new Month(3,2011),260.98);  s4.add(new Month(4,2011),273.40);  s4.add(new Month(5,2011),268.66);  s4.add(new Month(6,2011),250.59);  s4.add(new Month(7,2011),245.69);  s4.add(new Month(8,2011),249.83);  s4.add(new Month(9,2011),255.64);  s4.add(new Month(10,2011),234.28);  s4.add(new Month(11,2011),236.75);  s4.add(new Month(12,2011),228.79);  s4.add(new Month(1,2012),228.21);  s4.add(new Month(2,2012),215.40);  s4.add(new Month(3,2012),192.03);  s4.add(new Month(4,2012),180.90);  s4.add(new Month(5,2012),174.17);  s4.add(new Month(6,2012),156.17);  s4.add(new Month(7,2012),175.98);  s4.add(new Month(8,2012),160.05);  s4.add(new Month(9,2012),166.53);  s4.add(new Month(10,2012),161.20);  s4.add(new Month(11,2012),148.25);  s4.add(new Month(12,2012),140.69);  s4.add(new Month(1,2013),145.17);  s4.add(new Month(2,2013),136.63);  s4.add(new Month(3,2013),133.61);  TimeSeries s5=new TimeSeries("Robustas");  s5.add(new Month(1,2010),69.92);  s5.add(new Month(2,2010),67.88);  s5.add(new Month(3,2010),67.25);  s5.add(new Month(4,2010),71.59);  s5.add(new Month(5,2010),70.70);  s5.add(new Month(6,2010),76.92);  s5.add(new Month(7,2010),85.27);  s5.add(new Month(8,2010),82.68);  s5.add(new Month(9,2010),81.28);  s5.add(new Month(10,2010),85.27);  s5.add(new Month(11,2010),92.04);  s5.add(new Month(12,2010),94.09);  s5.add(new Month(1,2011),101.09);  s5.add(new Month(2,2011),109.35);  s5.add(new Month(3,2011),118.13);  s5.add(new Month(4,2011),117.37);  s5.add(new Month(5,2011),121.98);  s5.add(new Month(6,2011),117.95);  s5.add(new Month(7,2011),112.73);  s5.add(new Month(8,2011),112.07);  s5.add(new Month(9,2011),106.06);  s5.add(new Month(10,2011),98.10);  s5.add(new Month(11,2011),97.24);  s5.add(new Month(12,2011),98.41);  s5.add(new Month(1,2012),96.72);  s5.add(new Month(2,2012),101.93);  s5.add(new Month(3,2012),103.57);  s5.add(new Month(4,2012),101.80);  s5.add(new Month(5,2012),106.88);  s5.add(new Month(6,2012),105.70);  s5.add(new Month(7,2012),107.06);  s5.add(new Month(8,2012),106.52);  s5.add(new Month(9,2012),104.95);  s5.add(new Month(10,2012),104.47);  s5.add(new Month(11,2012),97.67);  s5.add(new Month(12,2012),96.59);  s5.add(new Month(1,2013),99.69);  s5.add(new Month(2,2013),104.03);  s5.add(new Month(3,2013),106.26);  TimeSeries s6=new TimeSeries("Futures (London)");  s6.add(new Month(1,2010),62.66);  s6.add(new Month(2,2010),60.37);  s6.add(new Month(3,2010),58.64);  s6.add(new Month(4,2010),62.21);  s6.add(new Month(5,2010),62.46);  s6.add(new Month(6,2010),69.72);  s6.add(new Month(7,2010),78.17);  s6.add(new Month(8,2010),78.42);  s6.add(new Month(9,2010),75.87);  s6.add(new Month(10,2010),80.08);  s6.add(new Month(11,2010),86.40);  s6.add(new Month(12,2010),88.70);  s6.add(new Month(1,2011),96.02);  s6.add(new Month(2,2011),104.53);  s6.add(new Month(3,2011),111.36);  s6.add(new Month(4,2011),111.34);  s6.add(new Month(5,2011),116.76);  s6.add(new Month(6,2011),110.51);  s6.add(new Month(7,2011),103.36);  s6.add(new Month(8,2011),102.71);  s6.add(new Month(9,2011),96.10);  s6.add(new Month(10,2011),88.64);  s6.add(new Month(11,2011),85.78);  s6.add(new Month(12,2011),87.65);  s6.add(new Month(1,2012),84.19);  s6.add(new Month(2,2012),88.69);  s6.add(new Month(3,2012),91.37);  s6.add(new Month(4,2012),91.81);  s6.add(new Month(5,2012),96.82);  s6.add(new Month(6,2012),94.75);  s6.add(new Month(7,2012),96.14);  s6.add(new Month(8,2012),96.12);  s6.add(new Month(9,2012),94.65);  s6.add(new Month(10,2012),94.66);  s6.add(new Month(11,2012),87.32);  s6.add(new Month(12,2012),85.94);  s6.add(new Month(1,2013),88.85);  s6.add(new Month(2,2013),94.41);  s6.add(new Month(3,2013),97.22);  TimeSeries s7=new TimeSeries("Futures (New York)");  s7.add(new Month(1,2010),142.76);  s7.add(new Month(2,2010),134.35);  s7.add(new Month(3,2010),134.97);  s7.add(new Month(4,2010),135.12);  s7.add(new Month(5,2010),135.81);  s7.add(new Month(6,2010),152.36);  s7.add(new Month(7,2010),165.23);  s7.add(new Month(8,2010),175.10);  s7.add(new Month(9,2010),187.80);  s7.add(new Month(10,2010),190.43);  s7.add(new Month(11,2010),206.92);  s7.add(new Month(12,2010),221.51);  s7.add(new Month(1,2011),238.05);  s7.add(new Month(2,2011),261.41);  s7.add(new Month(3,2011),274.10);  s7.add(new Month(4,2011),285.58);  s7.add(new Month(5,2011),277.72);  s7.add(new Month(6,2011),262.52);  s7.add(new Month(7,2011),255.90);  s7.add(new Month(8,2011),260.39);  s7.add(new Month(9,2011),261.39);  s7.add(new Month(10,2011),236.74);  s7.add(new Month(11,2011),235.25);  s7.add(new Month(12,2011),227.23);  s7.add(new Month(1,2012),227.50);  s7.add(new Month(2,2012),212.09);  s7.add(new Month(3,2012),188.78);  s7.add(new Month(4,2012),181.75);  s7.add(new Month(5,2012),176.50);  s7.add(new Month(6,2012),159.93);  s7.add(new Month(7,2012),183.20);  s7.add(new Month(8,2012),169.77);  s7.add(new Month(9,2012),175.36);  s7.add(new Month(10,2012),170.43);  s7.add(new Month(11,2012),155.72);  s7.add(new Month(12,2012),149.58);  s7.add(new Month(1,2013),154.28);  s7.add(new Month(2,2013),144.89);  s7.add(new Month(3,2013),141.43);  TimeSeriesCollection dataset=new TimeSeriesCollection();  dataset.addSeries(s1);  dataset.addSeries(s2);  dataset.addSeries(s3);  dataset.addSeries(s4);  dataset.addSeries(s5);  dataset.addSeries(s6);  dataset.addSeries(s7);  return dataset;}  }
class C{  protected void clearEvents(){}  }
class C{  public int makeTree(EvolutionState state,int[] genome,GPTree tree,int position,int treeNum,int threadnum,HashMap ercMapsForFancyPrint){  int[] countNumberOfChromosomesUsed={position};  GPFunctionSet gpfs=tree.constraints((GPInitializer)state.initializer).functionset;  GPNode root;  try {    root=makeSubtree(countNumberOfChromosomesUsed,genome,state,gpfs,grammar[treeNum],treeNum,threadnum,ercMapsForFancyPrint,tree,(byte)0);  } catch (  BigTreeException e) {    return BIG_TREE_ERROR;  }  if (root == null)   state.output.fatal("Invalid tree: tree #" + treeNum);  root.parent=tree;  tree.child=root;  return countNumberOfChromosomesUsed[0];}  }
class C{  public LogPrinter(int priority,String tag){  mPriority=priority;  mTag=tag;  mBuffer=Log.LOG_ID_MAIN;}  }
class C{  public synchronized void start(){  if (isStarted) {    return;  }  if (isStopped) {    throw new IllegalStateException("Cannot restart a TorClient instance.  Create a new instance instead.");  }  logger.info("Starting Orchid (version: " + Tor.getFullVersion() + ")");  verifyUnlimitedStrengthPolicyInstalled();  directoryDownloader.start(directory);  circuitManager.startBuildingCircuits();  if (dashboard.isEnabledByProperty()) {    dashboard.startListening();  }  isStarted=true;}  }
class C{  public static Scenario loadScenarioFromNetworkAndConfig(String networkFile,String configFile){  Config config=new Config();  config.addCoreModules();  ConfigReader configReader=new ConfigReader(config);  configReader.readFile(configFile);  config.network().setInputFile(networkFile);  config.plans().setInputFile(null);  config.plans().setInputPersonAttributeFile(null);  config.vehicles().setVehiclesFile(null);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.343 -0400",hash_original_method="F5167F20A872A63C36DAF85A2B000FB5",hash_generated_method="F5167F20A872A63C36DAF85A2B000FB5") void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mAnimation=null;  } else {    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    mTransformation=new Transformation();    mAnimation=new AlphaAnimation(0.0f,1.0f);    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  public void onSort(MenuItem item){}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.410 -0400",hash_original_method="28F9C38B3FDDDB64FC933645C8F9DFA7",hash_generated_method="95FB0FA2E255263777CDDE8CFD8D14B4") @Override public int read() throws IOException {  throw exception;}  }
class C{  public void endDTD() throws SAXException {  m_insideDTD=false;}  }
class C{  HttpRequestWrapper(HttpServletRequest request){  super(request);}  }
class C{  private void initialize(Class<OpsType> opsType) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(this,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.106 -0500",hash_original_method="82EDC40DB5D2D8551DABF13E0864CA4A",hash_generated_method="54D0AB823BFC5743163A31F7205CD3F7") private Object[] newElementArray(int s){  return new Object[s];}  }
class C{  public static synchronized CoderResult malformedForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_malformedErrors) {      CoderResult r=_malformedErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_MALFORMED_INPUT,length);        _malformedErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public void testFloatValuePosRounded1(){  byte[] a={-128,1,-1,-4,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5475195E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public boolean init(String modelDir){  this.modelDir=modelDir;  Option taggerOpt=new Option(this.modelDir);  if (!taggerOpt.readOptions()) {    return false;  }  taggerMaps=new Maps();  taggerDict=new Dictionary();  taggerFGen=new FeatureGen(taggerMaps,taggerDict);  taggerVtb=new Viterbi();  taggerModel=new Model(taggerOpt,taggerMaps,taggerDict,taggerFGen,taggerVtb);  if (!taggerModel.init()) {    System.out.println("Couldn't load the model");    System.out.println("Check the <model directory> and the <model file> again");    return false;  }  return true;}  }
class C{  private JSONObject executeSqlStatementQuery(SQLiteDatabase mydb,String query,JSONArray paramsAsJson,CallbackContext cbc) throws Exception {  JSONObject rowsResult=new JSONObject();  Cursor cur=null;  try {    String[] params=null;    params=new String[paramsAsJson.length()];    for (int j=0; j < paramsAsJson.length(); j++) {      if (paramsAsJson.isNull(j))       params[j]=""; else       params[j]=paramsAsJson.getString(j);    }    cur=mydb.rawQuery(query,params);  } catch (  Exception ex) {    ex.printStackTrace();    String errorMessage=ex.getMessage();    Log.v("executeSqlBatch","SQLiteAndroidDatabase.executeSql[Batch](): Error=" + errorMessage);    throw ex;  }  if (cur != null && cur.moveToFirst()) {    JSONArray rowsArrayResult=new JSONArray();    String key="";    int colCount=cur.getColumnCount();    do {      JSONObject row=new JSONObject();      try {        for (int i=0; i < colCount; ++i) {          key=cur.getColumnName(i);          if (android.os.Build.VERSION.SDK_INT >= 11) {            try {              bindPostHoneycomb(row,key,cur,i);            } catch (            Exception ex) {              bindPreHoneycomb(row,key,cur,i);            }          } else {            bindPreHoneycomb(row,key,cur,i);          }        }        rowsArrayResult.put(row);      } catch (      JSONException e) {        e.printStackTrace();      }    } while (cur.moveToNext());    try {      rowsResult.put("rows",rowsArrayResult);    } catch (    JSONException e) {      e.printStackTrace();    }  }  if (cur != null) {    cur.close();  }  return rowsResult;}  }
class C{  private void initialize(){  contextManager=Model.getSingleton().getOptionsParam().getCertificateParam().getSSLContextManager();  keyStoreListModel=new DefaultListModel<>();  aliasTableModel=new AliasTableModel(contextManager);  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("options.cert.title.cert"));  JPanel certificatePanel=getPanelCertificate();  this.add(certificatePanel,certificatePanel.getName());  driverConfig=new DriverConfiguration(new File(Constant.getZapInstall(),"xml/drivers.xml"));  updateDriverComboBox();  driverConfig.addObserver(this);  Certificate cert=contextManager.getDefaultCertificate();  if (cert != null) {    certificateTextField.setText(cert.toString());  }}  }
class C{  public static void createClientCache(String host,Integer port) throws Exception {  int PORT=port.intValue();  InterestResultPolicyDUnitTest test=new InterestResultPolicyDUnitTest();  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  cache=test.createCache(props);  Pool p=PoolManager.createFactory().addServer(host,port.intValue()).setSubscriptionEnabled(true).setSubscriptionRedundancy(-1).setReadTimeout(10000).setThreadLocalConnections(true).setSocketBufferSize(32768).setMinConnections(3).create("InterestResultPolicyDUnitTestPool");  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setPoolName(p.getName());  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);}  }
class C{  static DatagramSocketImpl createDatagramSocketImpl(boolean isMulticast) throws SocketException {  if (prefixImplClass != null) {    try {      return (DatagramSocketImpl)prefixImplClass.newInstance();    } catch (    Exception e) {      throw new SocketException("can't instantiate DatagramSocketImpl");    }  } else {    if (useDualStackImpl && !isMulticast)     return new DualStackPlainDatagramSocketImpl(exclusiveBind); else     return new TwoStacksPlainDatagramSocketImpl(exclusiveBind && !isMulticast);  }}  }
class C{  private Component makeTextRenderer(IOObject result){  if (result instanceof ResultObject) {    String resultString=((ResultObject)result).toResultString();    if (resultString.length() > MAX_RESULT_STRING_LENGTH) {      resultString=resultString.substring(0,MAX_RESULT_STRING_LENGTH);    }    return makeMainLabel("<html><pre>" + resultString + "</pre></html>");  } else {    return makeMainLabel("No information available.");  }}  }
class C{  private Map<String,Object> createFireEventParam(MotionEvent motionEvent,int pos){  JSONArray jsonArray=new JSONArray(motionEvent.getPointerCount());  if (motionEvent.getActionMasked() == MotionEvent.ACTION_MOVE) {    for (int i=0; i < motionEvent.getPointerCount(); i++) {      jsonArray.add(createJSONObject(motionEvent,pos,i));    }  } else   if (isPointerNumChanged(motionEvent)) {    int pointerIndex=motionEvent.getActionIndex();    jsonArray.add(createJSONObject(motionEvent,CUR_EVENT,pointerIndex));  }  Map<String,Object> map=new HashMap<>();  map.put(GestureInfo.HISTORICAL_XY,jsonArray);  return map;}  }
class C{  public void clear(){  individuals.clear();}  }
class C{  public void writeVarInt(int x){  while ((x & ~0x7f) != 0) {    data[pos++]=(byte)(0x80 | (x & 0x7f));    x>>>=7;  }  data[pos++]=(byte)x;}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      Angular2UIPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,Angular2UIPlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!Angular2UIPlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(Angular2UIPlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  public FileLogger(String logTag,File logDir){  mTag=logTag;  mLogDir=logDir;  mHandlerThread=new HandlerThread(TAG,android.os.Process.THREAD_PRIORITY_BACKGROUND);  mHandlerThread.start();  mAsyncHandler=new Handler(mHandlerThread.getLooper(),this);  sendOpenMessage();}  }
class C{  private static float pxToSp(Context context,float px){  float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return px / fontScale;}  }
class C{  public void select(OMGraphicList list){  super.select(list);  if (selectedList != null) {    System.out.println("Current selection list: " + selectedList.getDescription());  }}  }
class C{  public JpegCommentReader(InputStream is) throws JpegProcessingException {  this(new JpegSegmentReader(is).readSegment(JpegSegmentReader.SEGMENT_APPD));}  }
class C{  public Synapse(Network newParent,Neuron source,Neuron target,SynapseUpdateRule learningRule){  setSourceAndTarget(source,target);  initSpikeResponder();  setLearningRule(learningRule);  parentNetwork=newParent;  isTemplate=source == null;}  }
class C{  public Quaterniond rotate(Vector3dc anglesXYZ){  return rotate(anglesXYZ.x(),anglesXYZ.y(),anglesXYZ.z(),this);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tSpecify a starting set of attributes." + "\n\tEg. 1,3,5-7.","P",1,"-P <start set>"));  newVector.addElement(new Option("\tDirection of search. (default = 1).","D",1,"-D <0 = backward | 1 = forward " + "| 2 = bi-directional>"));  newVector.addElement(new Option("\tNumber of non-improving nodes to" + "\n\tconsider before terminating search.","N",1,"-N <num>"));  newVector.addElement(new Option("\tSize of lookup cache for evaluated subsets." + "\n\tExpressed as a multiple of the number of" + "\n\tattributes in the data set. (default = 1)","S",1,"-S <num>"));  return newVector.elements();}  }
class C{  public void manage(Subscription subscription){  mSubscriptions.add(subscription);}  }
class C{  public static void clearAttributesOnChangeOfView(FacesContext ctx){  if (ctx == null) {    return;  }  Map<Object,Object> attrs=ctx.getAttributes();  for (  String key : ATTRIBUTES_TO_CLEAR_ON_CHANGE_OF_VIEW) {    attrs.remove(key);  }}  }
class C{  public ExtendedKeyUsageExtension(Boolean critical,Vector<ObjectIdentifier> keyUsages) throws IOException {  this.keyUsages=keyUsages;  this.extensionId=PKIXExtensions.ExtendedKeyUsage_Id;  this.critical=critical.booleanValue();  encodeThis();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.560 -0500",hash_original_method="5986320AFF9EF780E7B17B08599A90A9",hash_generated_method="5986320AFF9EF780E7B17B08599A90A9") float measure(int offset,boolean trailing,FontMetricsInt fmi){  int target=trailing ? offset - 1 : offset;  if (target < 0) {    return 0;  }  float h=0;  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      return measureRun(0,offset,mLen,false,fmi);    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      return measureRun(0,offset,mLen,true,fmi);    }  }  char[] chars=mChars;  int[] runs=mDirections.mDirections;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=chars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(chars,j);          if (codept >= Layout.MIN_EMOJI && codept <= Layout.MAX_EMOJI) {            bm=Layout.EMOJI_FACTORY.getBitmapFromAndroidPua(codept);          } else           if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        boolean inSegment=target >= segstart && target < j;        boolean advance=(mDir == Layout.DIR_RIGHT_TO_LEFT) == runIsRtl;        if (inSegment && advance) {          return h+=measureRun(segstart,offset,j,runIsRtl,fmi);        }        float w=measureRun(segstart,j,j,runIsRtl,fmi);        h+=advance ? w : -w;        if (inSegment) {          return h+=measureRun(segstart,offset,j,runIsRtl,null);        }        if (codept == '\t') {          if (offset == j) {            return h;          }          h=mDir * nextTab(h * mDir);          if (target == j) {            return h;          }        }        if (bm != null) {          float bmAscent=ascent(j);          float wid=bm.getWidth() * -bmAscent / bm.getHeight();          h+=mDir * wid;          j++;        }        segstart=j + 1;      }    }  }  return h;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int index=getConstPool().copy(getConstantValue(),newCp,classnames);  return new ConstantAttribute(newCp,index);}  }
class C{  public boolean isRepeat(){  return mRepeatDownload || mRepeatUpload;}  }
class C{  public static DateTimeFormatter weekyearWeekDay(){  if (wwd == null) {    wwd=new DateTimeFormatterBuilder().append(weekyearElement()).append(weekElement()).append(dayOfWeekElement()).toFormatter();  }  return wwd;}  }
class C{  public boolean isLocal(){  return loc.isLocal();}  }
class C{  private void applyLowBitState(){  mCurrentBackgroundColor=Spec.SPEC_COLOR_LOWBIT_BACKGROUND;  mCurrentBackgroundBitmap=mBackgroundBitmapLowbit;  mTimeTextPaint.setColor(Spec.SPEC_COLOR_LOWBIT_FOREGROUND);  mDateTextPaint.setColor(Spec.SPEC_COLOR_LOWBIT_FOREGROUND);  mMinuteHandDotPaint.setColor(Spec.SPEC_COLOR_LOWBIT_FOREGROUND);  mHourHandDotPaint.setColor(Spec.SPEC_COLOR_LOWBIT_FOREGROUND);}  }
class C{  public static long copy(InputStream in,OutputStream out,byte[] buffer) throws IOException {  Preconditions.checkNotNull(in,"No InputStream specified");  Preconditions.checkNotNull(out,"No OutputStream specified");  try {    long byteCount=0;    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      byteCount+=bytesRead;    }    out.flush();    return byteCount;  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public static Request createAllocateRequest(){  Request allocateRequest=new Request();  try {    allocateRequest.setMessageType(Message.ALLOCATE_REQUEST);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return allocateRequest;}  }
class C{  private LdapResult processReply(LdapRequest req,LdapResult res,int responseType) throws IOException, NamingException {  BerDecoder rber=conn.readReply(req);  rber.parseSeq(null);  rber.parseInt();  if (rber.parseByte() != responseType) {    return res;  }  rber.parseLength();  parseResult(rber,res,isLdapv3);  res.resControls=isLdapv3 ? parseControls(rber) : null;  conn.removeRequest(req);  return res;}  }
class C{  public Pattern ipMustNotMatchPattern(){  if (this.crawleripmustnotmatch == null) {    final String r=get(CrawlAttribute.CRAWLER_IP_MUSTNOTMATCH.key);    try {      this.crawleripmustnotmatch=(r == null || r.equals(CrawlProfile.MATCH_NEVER_STRING)) ? CrawlProfile.MATCH_NEVER_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.crawleripmustnotmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.crawleripmustnotmatch;}  }
class C{  private boolean isAccessible(HttpServletRequest request,File file){  try {    if (file.getCanonicalPath().startsWith(getRealRootPath(request))) {      return true;    }  } catch (  IOException e) {  }  addError(request,ERROR_ACCESS + file);  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void mapBlock(BasicBlock subBlock,BasicBlock resultBlock){  blockMap.put(subBlock,resultBlock);}  }
class C{  public void testBug25047() throws Exception {  assertEquals(26,StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) values (?)","VALUES","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS));  assertEquals(26,StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) VALUES (?)","values","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS));  assertEquals(StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) values (?)","VALUES","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS),StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) VALUES (?)","VALUES","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS));  assertEquals(StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) values (?)","values","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS),StringUtils.indexOfIgnoreCase(0,"insert into Test (TestID) VALUES (?)","values","`","`",StringUtils.SEARCH_MODE__MRK_COM_WS));}  }
class C{  public <T extends DataObject>T findById(String id){  if (id == null) {    throw DatabaseException.fatals.nullIdProvided();  }  return findById(URI.create(id));}  }
class C{  public int applicationImageSize(){  return applicationSize;}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/pause") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList pauseContinuousCopies(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  verifyCopyIDs(param);  for (  Copy copy : param.getCopies()) {    URI copyID=copy.getCopyID();    if (!URIUtil.isValid(copyID)) {      copyID=null;    }    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {      taskResp=performProtectionAction(id,copy,ProtectionOp.PAUSE.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (!vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      TaskList pauseTaskList=pauseMirrors(id,copy.getSync(),copyID);      taskList.getTaskList().addAll(pauseTaskList.getTaskList());    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {      id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);      copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));      taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.PAUSE.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      throw APIException.badRequests.actionNotApplicableForVplexVolumeMirrors(ProtectionOp.PAUSE.getRestOp());    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }    if (copyID == null) {      return taskList;    }  }  return taskList;}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public Element store(Object o){  Element transits=new Element("transits");  setStoreElementClass(transits);  TransitManager tm=(TransitManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store");      } else {        log.debug("Transit system name is " + sname);        Transit x=tm.getBySystemName(sname);        Element elem=new Element("transit").setAttribute("systemName",sname);        storeCommon(x,elem);        ArrayList<TransitSection> tsList=x.getTransitSectionList();        Element tsElem=null;        for (int k=0; k < tsList.size(); k++) {          TransitSection ts=tsList.get(k);          if (ts != null && !ts.isTemporary()) {            tsElem=new Element("transitsection");            Section tSection=ts.getSection();            if (tSection != null) {              tsElem.setAttribute("sectionname",tSection.getSystemName());            } else {              tsElem.setAttribute("sectionname","null");            }            tsElem.setAttribute("sequence",Integer.toString(ts.getSequenceNumber()));            tsElem.setAttribute("direction",Integer.toString(ts.getDirection()));            tsElem.setAttribute("alternate","" + (ts.isAlternate() ? "yes" : "no"));            ArrayList<TransitSectionAction> tsaList=ts.getTransitSectionActionList();            if (tsaList.size() > 0) {              Element tsaElem=null;              for (int m=0; m < tsaList.size(); m++) {                TransitSectionAction tsa=tsaList.get(m);                if (tsa != null) {                  tsaElem=new Element("transitsectionaction");                  tsaElem.setAttribute("whencode",Integer.toString(tsa.getWhenCode()));                  tsaElem.setAttribute("whatcode",Integer.toString(tsa.getWhatCode()));                  tsaElem.setAttribute("whendata",Integer.toString(tsa.getDataWhen()));                  tsaElem.setAttribute("whenstring",tsa.getStringWhen());                  tsaElem.setAttribute("whatdata1",Integer.toString(tsa.getDataWhat1()));                  tsaElem.setAttribute("whatdata2",Integer.toString(tsa.getDataWhat2()));                  tsaElem.setAttribute("whatstring",tsa.getStringWhat());                  tsElem.addContent(tsaElem);                }              }            }            elem.addContent(tsElem);          }        }        transits.addContent(elem);      }    }  }  return (transits);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Node child;  String childName;  String childValue;  int childType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=(Element)elementList.item(3);  child=testEmployee.getFirstChild();  childType=(int)child.getNodeType();  if (equals(3,childType)) {    child=child.getNextSibling();  }  childName=child.getNodeName();  assertEquals("nodename","employeeId",childName);  child=child.getFirstChild();  childValue=child.getNodeValue();  assertEquals("emp0004","EMP0004",childValue);}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putString(LOG_TEXT_KEY,Html.toHtml((Spanned)mLogTextView.getText()));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.PATTERN__QUANTIFIER:    setQuantifier((Quantifier)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void clearCache(){  memoryCache.clear();  fileCache.clear();}  }
class C{  @Override public String addressRemote(){  return _socket.getRemoteHost();}  }
class C{  public void removeSessionListener(SessionListener l){  if (this.sessionListeners.contains(l)) {    this.sessionListeners.remove(l);  }}  }
class C{  private static String shorten(String path){  int idx1=path.lastIndexOf('/');  int idx2=path.lastIndexOf('\\');  int idx=Math.max(idx1,idx2);  return idx == -1 ? path : path.substring(idx + 1);}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  private void loadRoles(Attributes atts){  String roleName=atts.getValue("name");  RolePersistentID persistentID=new RolePersistentID(atts.getValue("id"));  Role existingRole=myRoleSet.findRole(persistentID.getRoleID());  if (existingRole == null) {    myRoleSet.createRole(roleName,persistentID.getRoleID());  }}  }
class C{  public GetRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  private void checkDirHasChildren(String entidad) throws Exception {  int count;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    count=DbSelectFns.selectCount(dbConn,table.getNodeTableName(),table.getLoadAllChildrenDirQual(_id));    if (count > 0) {      ISicresAdminBasicException.throwException(ISicresAdminDirectoryKeys.EC_DIR_HAS_CHILDREN);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  public FBTpb(TransactionParameterBuffer transactionParams){  this.transactionParams=transactionParams;}  }
class C{  public Packet(Packet other){  if (other.isSetMessageType()) {    this.messageType=other.messageType;  }  if (other.isSetSwPortTuple()) {    this.swPortTuple=new SwitchPortTuple(other.swPortTuple);  }  if (other.isSetData()) {    this.data=org.apache.thrift.TBaseHelper.copyBinary(other.data);    ;  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.854 -0400",hash_original_method="C0D49EB08A267ED3491A74132BB97C44",hash_generated_method="90A500B68C5B9D736374CBF484F83215") @Override public void write(byte[] b,int off,int len) throws IOException {  while (len > 0) {    int c=Math.min(len,decoderIn.remaining());    decoderIn.put(b,off,c);    processInput(false);    len-=c;    off+=c;  }  if (writeImmediately) {    flushOutput();  }}  }
class C{  Timezone phase2(String zoneName){  Timezone tz=new Timezone(zoneName);  Zone zone=getZone(zoneName);  zone.resolve(this);  if (isYearForTimeZoneDataSpecified) {    ZoneRec zrec=zone.get(zone.size() - 1);    tz.setLastZoneRec(zrec);    tz.setRawOffset(zrec.getGmtOffset());    if (zrec.hasRuleReference()) {      List<RuleRec> rrecs=zrec.getRuleRef().getRules(startYear);      if (rrecs.size() == 2) {        RuleRec r0=rrecs.get(0);        RuleRec r1=rrecs.get(1);        if (r0.getSave() == 0 && r1.getSave() > 0) {          rrecs.set(0,r1);          rrecs.set(1,r0);        } else         if (!(r0.getSave() > 0 && r1.getSave() == 0)) {          rrecs=null;          Main.error(zoneName + ": rules for " + startYear+ " not found.");        }      } else {        rrecs=null;      }      if (rrecs != null) {        tz.setLastRules(rrecs);      }    }    return tz;  }  int gmtOffset;  int year=minYear;  int fromYear=year;  long fromTime=Time.getLocalTime(startYear,Month.JANUARY,1,0);  ZoneRec zrec=zone.get(zone.size() - 1);  tz.getOffsetIndex(zrec.getGmtOffset());  int lastGmtOffsetValue=-1;  int currentSave=0;  boolean usedZone;  for (int zindex=0; zindex < zone.size(); zindex++) {    zrec=zone.get(zindex);    usedZone=false;    gmtOffset=zrec.getGmtOffset();    int stdOffset=zrec.getDirectSave();    if (gmtOffset != lastGmtOffsetValue) {      tz.setRawOffset(gmtOffset,fromTime);      lastGmtOffsetValue=gmtOffset;    }    if (!zrec.hasUntil()) {      if (zrec.hasRuleReference()) {        tz.setLastRules(zrec.getRuleRef().getLastRules());      } else       if (stdOffset != 0) {        tz.setLastDSTSaving(stdOffset);      }    }    if (!zrec.hasRuleReference()) {      if (!zrec.hasUntil() || zrec.getUntilTime(stdOffset) >= fromTime) {        tz.addTransition(fromTime,tz.getOffsetIndex(gmtOffset + stdOffset),tz.getDstOffsetIndex(stdOffset));        usedZone=true;      }      currentSave=stdOffset;      if (!zrec.hasUntil()) {        if (tz.getNTransitions() > 0) {          if (stdOffset == 0) {            tz.setDSTType(Timezone.X_DST);          } else {            tz.setDSTType(Timezone.LAST_DST);          }          long time=Time.getLocalTime(maxYear,Month.JANUARY,1,0);          time-=zrec.getGmtOffset();          tz.addTransition(time,tz.getOffsetIndex(gmtOffset + stdOffset),tz.getDstOffsetIndex(stdOffset));          tz.addUsedRec(zrec);        } else {          tz.setDSTType(Timezone.NO_DST);        }        break;      }    } else {      Rule rule=zrec.getRuleRef();      boolean fromTimeUsed=false;      currentSave=0;      year_loop:       for (year=getMinYear(); year <= endYear; year++) {        if (zrec.hasUntil() && year > zrec.getUntilYear()) {          break;        }        List<RuleRec> rules=rule.getRules(year);        if (rules.size() > 0) {          for (int i=0; i < rules.size(); i++) {            RuleRec rrec=rules.get(i);            long transition=rrec.getTransitionTime(year,gmtOffset,currentSave);            if (zrec.hasUntil()) {              if (transition >= zrec.getUntilTime(currentSave)) {                break year_loop;              }            }            if (fromTimeUsed == false) {              if (fromTime <= transition) {                fromTimeUsed=true;                if (fromTime != minTime) {                  int prevsave;                  ZoneRec prevzrec=zone.get(zindex - 1);                  if (i > 0) {                    prevsave=rules.get(i - 1).getSave();                  } else {                    List<RuleRec> prevrules=rule.getRules(year - 1);                    if (prevrules.size() > 0) {                      prevsave=prevrules.get(prevrules.size() - 1).getSave();                    } else {                      prevsave=0;                    }                  }                  if (rrec.isSameTransition(prevzrec,prevsave,gmtOffset)) {                    currentSave=rrec.getSave();                    tz.addTransition(fromTime,tz.getOffsetIndex(gmtOffset + currentSave),tz.getDstOffsetIndex(currentSave));                    tz.addUsedRec(rrec);                    usedZone=true;                    continue;                  }                  if (!prevzrec.hasRuleReference() || rule != prevzrec.getRuleRef() || (rule == prevzrec.getRuleRef() && gmtOffset != prevzrec.getGmtOffset())) {                    int save=(fromTime == transition) ? rrec.getSave() : currentSave;                    tz.addTransition(fromTime,tz.getOffsetIndex(gmtOffset + save),tz.getDstOffsetIndex(save));                    tz.addUsedRec(rrec);                    usedZone=true;                  }                } else {                  int save=rrec.getSave();                  tz.addTransition(minTime,tz.getOffsetIndex(gmtOffset),tz.getDstOffsetIndex(0));                  tz.addTransition(transition,tz.getOffsetIndex(gmtOffset + save),tz.getDstOffsetIndex(save));                  tz.addUsedRec(rrec);                  usedZone=true;                }              } else               if (year == fromYear && i == rules.size() - 1) {                int save=rrec.getSave();                tz.addTransition(fromTime,tz.getOffsetIndex(gmtOffset + save),tz.getDstOffsetIndex(save));              }            }            currentSave=rrec.getSave();            if (fromTime < transition) {              tz.addTransition(transition,tz.getOffsetIndex(gmtOffset + currentSave),tz.getDstOffsetIndex(currentSave));              tz.addUsedRec(rrec);              usedZone=true;            }          }        } else {          if (year == fromYear) {            tz.addTransition(fromTime,tz.getOffsetIndex(gmtOffset + currentSave),tz.getDstOffsetIndex(currentSave));            fromTimeUsed=true;          }          if (year == endYear && !zrec.hasUntil()) {            if (tz.getNTransitions() > 0) {              tz.setDSTType(Timezone.X_DST);              long time=Time.getLocalTime(maxYear,Month.JANUARY,1,0);              time-=zrec.getGmtOffset();              tz.addTransition(time,tz.getOffsetIndex(gmtOffset),tz.getDstOffsetIndex(0));              usedZone=true;            } else {              tz.setDSTType(Timezone.NO_DST);            }          }        }      }    }    if (usedZone) {      tz.addUsedRec(zrec);    }    if (zrec.hasUntil() && zrec.getUntilTime(currentSave) > fromTime) {      fromTime=zrec.getUntilTime(currentSave);      fromYear=zrec.getUntilYear();      year=zrec.getUntilYear();    }  }  if (tz.getDSTType() == Timezone.UNDEF_DST) {    tz.setDSTType(Timezone.DST);  }  tz.optimize();  tz.checksum();  return tz;}  }
class C{  public static AbstractFileOutputOperator checkpoint(AbstractFileOutputOperator writer,long windowId){  if (windowId >= Stateless.WINDOW_ID) {    writer.beforeCheckpoint(windowId);  }  Kryo kryo=new Kryo();  ByteArrayOutputStream bos=new ByteArrayOutputStream();  Output loutput=new Output(bos);  kryo.writeObject(loutput,writer);  loutput.close();  Input lInput=new Input(bos.toByteArray());  @SuppressWarnings("unchecked") AbstractFileOutputOperator checkPointedWriter=kryo.readObject(lInput,writer.getClass());  lInput.close();  return checkPointedWriter;}  }
class C{  public DuplicateEventException(String message){  super(message);}  }
class C{  public boolean isLoaded(String rowType,Term term){  return this.rowType != null && this.rowType.equals(rowType) && this.term != null && this.term.equals(term) && sourceValues != null;}  }
class C{  private Boolean filterExistingItems(List<PostItem> postItems,PostItem item){  if (postItems.contains(item)) {    int i=postItems.indexOf(item);    postItems.remove(i);    postItems.add(i,item);    return false;  }  return true;}  }
class C{  public Builder withAnimation(Activity activity,int inAnimation,int outAnimation){  mAct=activity;  mInAnimation=inAnimation;  mOutAnimation=outAnimation;  return this;}  }
class C{  public DateTime toDateTimeAtMidnight(){  return toDateTimeAtMidnight(null);}  }
class C{  private InputStream openResponseEntity(State state,HttpResponse response) throws StopRequest {  try {    return response.getEntity().getContent();  } catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while getting entity: " + ex.toString(),ex);  }}  }
class C{  public static SVGPath drawFakeVoronoi(Projection2D proj,List<double[]> means){  CanvasSize viewport=proj.estimateViewport();  final SVGPath path=new SVGPath();  final double[] dirv=VMath.minus(means.get(1),means.get(0));  VMath.rotate90Equals(dirv);  double[] dir=proj.fastProjectRelativeDataToRenderSpace(dirv);  final double[] mean=VMath.plus(means.get(0),means.get(1));  VMath.timesEquals(mean,0.5);  double[] projmean=proj.fastProjectDataToRenderSpace(mean);  double factor=viewport.continueToMargin(projmean,dir);  path.moveTo(projmean[0] + factor * dir[0],projmean[1] + factor * dir[1]);  dir[0]*=-1;  dir[1]*=-1;  factor=viewport.continueToMargin(projmean,dir);  path.drawTo(projmean[0] + factor * dir[0],projmean[1] + factor * dir[1]);  return path;}  }
class C{  public String globalInfo(){  return "Produces a random subsample of a dataset using either sampling with " + "replacement or without replacement. The original dataset must fit " + "entirely in memory. The number of instances in the generated dataset "+ "may be specified. When used in batch mode, subsequent batches are "+ "NOT resampled.";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.919 -0500",hash_original_method="F1511D7F30AFB03A76430BC5FB3647DC",hash_generated_method="CFA0BCF83D702859DF36BA49575B2AC3") public boolean intersect(RectF r){  return intersect(r.left,r.top,r.right,r.bottom);}  }
class C{  public NodeListImpl(ArrayList<Node> nodes){  mStaticNodes=nodes;}  }
class C{  public int addChildEdge(int parent,int child){  return super.addEdge(parent,child);}  }
class C{  private int findSalesRep(MRequest request){  String QText=request.getSummary();  if (QText == null)   QText=""; else   QText=QText.toUpperCase();  MRequestProcessorRoute[] routes=m_model.getRoutes(false);  for (int i=0; i < routes.length; i++) {    MRequestProcessorRoute route=routes[i];    if (request.getR_RequestType_ID() == route.getR_RequestType_ID() && route.getR_RequestType_ID() != 0)     return route.getAD_User_ID();    String keyword=route.getKeyword();    if (keyword != null) {      StringTokenizer st=new StringTokenizer(keyword.toUpperCase()," ,;\t\n\r\f");      while (st.hasMoreElements()) {        if (QText.indexOf(st.nextToken()) != -1)         return route.getAD_User_ID();      }    }  }  return m_model.getSupervisor_ID();}  }
class C{  public ListFilesParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_LIST_FILES_SUCCESS);}  }
class C{  public LineDelimiter(String value){  if (value == null) {    throw new IllegalArgumentException("delimiter");  }  this.value=value;}  }
class C{  private void startMapActivity(){  bus.removeStickyEvent(DbInitializedEvent.class);  bus.removeStickyEvent(SplashScreenTimerFinishedEvent.class);  bus.removeStickyEvent(ArpiBitmapsPrecomputedEvent.class);  bus.removeStickyEvent(LoginInitializedEvent.class);  Intent intent=new Intent(this,MapActivity.class);  startActivity(intent);  finish();}  }
class C{  public static Object newInstance(String className) throws InstantiationException, IllegalAccessException {  ClassLoader loader=Util.getCurrentLoader(null);  if (loader == null) {    return null;  }  return getMetaData(loader,className).lookupClass().newInstance();}  }
class C{  public byte[] uncompressed(){  try {    return CompressorFactory.uncompress(new BytesArray(bytes)).toBytes();  } catch (  IOException e) {    throw new IllegalStateException("Cannot decompress compressed string",e);  }}  }
class C{  public static void createProgram(){  sProgramHandle=Util.createProgram(VERTEX_SHADER_CODE,FRAGMENT_SHADER_CODE);  Log.d(TAG,"Created program " + sProgramHandle);  sPositionHandle=GLES20.glGetAttribLocation(sProgramHandle,"a_position");  Util.checkGlError("glGetAttribLocation");  sTexCoordHandle=GLES20.glGetAttribLocation(sProgramHandle,"a_texCoord");  Util.checkGlError("glGetAttribLocation");  sMVPMatrixHandle=GLES20.glGetUniformLocation(sProgramHandle,"u_mvpMatrix");  Util.checkGlError("glGetUniformLocation");  int textureUniformHandle=GLES20.glGetUniformLocation(sProgramHandle,"u_texture");  Util.checkGlError("glGetUniformLocation");  GLES20.glUseProgram(sProgramHandle);  GLES20.glUniform1i(textureUniformHandle,0);  Util.checkGlError("glUniform1i");  GLES20.glUseProgram(0);  Util.checkGlError("TexturedAlignedRect setup complete");}  }
class C{  @Override public void switchPortChanged(DatapathId switchId,OFPortDesc port,PortChangeType type){switch (type) {case UP:    processNewPort(switchId,port.getPortNo());  break;case DELETE:case DOWN:handlePortDown(switchId,port.getPortNo());break;case OTHER_UPDATE:case ADD:break;}}  }
class C{  public boolean isPlotable(double lat,double lon){  lat=normalizeLatitude(ProjMath.degToRad(lat));  lon=wrapLongitude(ProjMath.degToRad(lon));  return hemisphere_clip(centerY,centerX,lat,lon);}  }
class C{  @Override public Object lastValue(final IScope scope) throws GamaRuntimeException {  return value;}  }
class C{  private void mapPoints(float[] pts){  mapPoints(pts,0,pts,0,pts.length >> 1);}  }
class C{  private LocationOperand makeStaticFieldRef(FieldReference f){  return new LocationOperand(f);}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  return m_correlations[attribute];}  }
class C{  public boolean isEncrypted(){  return keyCrypter != null;}  }
class C{  public static void isValid(final String rsql){  parseRsql(rsql);}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public static boolean isFilenameValid(String filename){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  public boolean isLinkedTo(Branch branch){  return branch.getName().startsWith(refsForRemoteRepository);}  }
class C{  @Override public String toString(){  if (dimension != -1) {    return paramId.toString() + "[" + dimension+ "]";  } else {    return paramId.toString();  }}  }
class C{  public static Iterable<Entry<AnnotationFS,String>> select(CAS aCas,String aPath) throws FeaturePathException {  String[] segments=aPath.split("/",2);  String typeName=segments[0];  Type t=aCas.getTypeSystem().getType(typeName);  if (t == null) {    throw new IllegalStateException("Type [" + typeName + "] not found in type system");  }  String path=segments.length > 1 ? segments[1] : "";  return iterable(FeaturePathIterator.create(aCas,t,path));}  }
class C{  private boolean approxEqual(double a,double b){  double THRESHOLD=0.00000001;  double c=a - b;  System.err.println(Math.abs(c) <= THRESHOLD);  return Math.abs(c) <= THRESHOLD;}  }
class C{  private static String canonicalize(final SortedMap<String,String> sortedParamMap){  if (sortedParamMap == null || sortedParamMap.isEmpty()) {    return "";  }  final StringBuilder sb=new StringBuilder(100);  for (  Map.Entry<String,String> pair : sortedParamMap.entrySet()) {    final String key=pair.getKey().toLowerCase();    if (IRRELEVANT_PARAMETERS.contains(key) || key.startsWith("utm_")) {      continue;    }    if (sb.length() > 0) {      sb.append('&');    }    sb.append(percentEncodeRfc3986(pair.getKey()));    if (!pair.getValue().isEmpty()) {      sb.append('=');      sb.append(percentEncodeRfc3986(pair.getValue()));    }  }  return sb.toString();}  }
class C{  public static void config(String titulo){  grafico.getData().clear();  grafico.setTitle(titulo);  grafico.setVerticalGridLinesVisible(false);  eixoX.setLabel("Data");}  }
class C{  public void deposit(double amount){  balance+=amount;}  }
class C{  protected static void writeOptional(final StringWriter writer,final String fieldName,final String value){  if (value != null) {    write(writer,fieldName,value);  }}  }
class C{  protected boolean isIdEmbeddedInURL(final URI id){  return BlockServiceUtils.isIdEmbeddedInURL(id,uriInfo);}  }
class C{  public static boolean singleNewlineTerminated(File inputFile) throws IOException {  RandomAccessFile randomAccessFile=new RandomAccessFile(inputFile,READ_ONLY_MODE);  if (inputFile.length() < 1) {    return true;  }  randomAccessFile.seek(inputFile.length() - 1);  if (Byte.compare(randomAccessFile.readByte(),NEWLINE_DELIMITER) != 0) {    return false;  }  if (inputFile.length() < 2) {    return true;  }  randomAccessFile.seek(inputFile.length() - 2);  return (Byte.compare(randomAccessFile.readByte(),NEWLINE_DELIMITER) != 0);}  }
class C{  private void putInMultiplePartitionedRegionFromAllVms(int startIndexForRegion,int endIndexForRegion,long startIndexForKey,long endIndexForKey) throws Throwable {  int AsyncInvocationArrSize=8;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  long delta=(endIndexForKey - startIndexForKey) / 4;  async[0]=vm[0].invokeAsync(putFromOneVm(startIndexForKey,startIndexForKey + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(putFromOneVm(startIndexForKey + 1 * delta,startIndexForKey + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(putFromOneVm(startIndexForKey + 2 * delta,startIndexForKey + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(putFromOneVm(startIndexForKey + 3 * delta,endIndexForKey,startIndexForRegion,endIndexForRegion));  startIndexForKey+=totalBucketNumProperty;  endIndexForKey+=totalBucketNumProperty;  delta=(endIndexForKey - startIndexForKey) / 4;  async[4]=vm[0].invokeAsync(putFromOneVm(startIndexForKey,startIndexForKey + 1 * delta,startIndexForRegion,endIndexForRegion));  async[5]=vm[1].invokeAsync(putFromOneVm(startIndexForKey + 1 * delta,startIndexForKey + 2 * delta,startIndexForRegion,endIndexForRegion));  async[6]=vm[2].invokeAsync(putFromOneVm(startIndexForKey + 2 * delta,startIndexForKey + 3 * delta,startIndexForRegion,endIndexForRegion));  async[7]=vm[3].invokeAsync(putFromOneVm(startIndexForKey + 3 * delta,endIndexForKey,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  protected void maximizeFrame(JInternalFrame f){  BasicLookAndFeel.playSound(frame,"InternalFrame.maximizeSound");  getDesktopManager().maximizeFrame(f);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  private static boolean noResourceIncludedFieldsSpecified(IncludedFieldsParams typeIncludedFields){  return typeIncludedFields == null || typeIncludedFields.getParams().isEmpty();}  }
class C{  public double evaluate(double[] argument){  double kappa=argument[0];  double time=argument[1];  ((HKY)((GammaSiteModel)siteModel).getSubstitutionModel()).setKappa(kappa);  scoreMatrix.setTime(time);  return -scoreMatrix.getScore(sitePatterns);}  }
class C{  boolean contains(Field other){  if (unused != other.unused)   return false;  for (  String v : other.values) {    if (values.contains(v))     continue;    if (v.equals("null") || v.equals("string"))     continue;    if (v.equals("list") && listOfAny)     continue;    if (v.equals("set") && setOfAny)     continue;    return false;  }  return true;}  }
class C{  public ClientMessage sendMessageWithProperties(SimpleString address,byte[] body,Map<String,Object> properties){  ClientMessage message=createMessageWithProperties(body,properties);  sendMessage(address,message);  return message;}  }
class C{  @Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){  SimpleWeekView child=(SimpleWeekView)view.getChildAt(0);  if (child == null) {    return;  }  long currScroll=view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();  mFirstVisibleDay.setJulianDay(child.getFirstJulianDay());  if (currScroll < mPreviousScrollPosition) {    mIsScrollingUp=true;  } else   if (currScroll > mPreviousScrollPosition) {    mIsScrollingUp=false;  } else {    return;  }  mPreviousScrollPosition=currScroll;  mPreviousScrollState=mCurrentScrollState;  updateMonthHighlight(mListView);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("endElement: uri: " + uri + ", localname: "+ localName+ ", qname: "+ qName);  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  int lastNode=m_previous;  m_previous=m_parents.pop();  if (DTM.NULL == lastNode)   m_firstch.setElementAt(DTM.NULL,m_previous); else   m_nextsib.setElementAt(DTM.NULL,lastNode);  popShouldStripWhitespace();}  }
class C{  @SuppressWarnings({"UnnecessaryFullyQualifiedName","fallthrough"}) private static byte hexCharToByte(char ch) throws IllegalArgumentException {switch (ch) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':    return (byte)(ch - '0');case 'a':case 'A':  return 0xa;case 'b':case 'B':return 0xb;case 'c':case 'C':return 0xc;case 'd':case 'D':return 0xd;case 'e':case 'E':return 0xe;case 'f':case 'F':return 0xf;default :throw new IllegalArgumentException("Hex decoding wrong input character [character=" + ch + ']');}}  }
class C{  protected void initScenes(){  CGSize s=CCDirector.sharedDirector().winSize();  inScene.setPosition(-s.width,0);}  }
class C{  public static String toString(Character arg){  return toString("%c",arg);}  }
class C{  public void recall(){  double maxActivation=Double.MIN_VALUE;  Neuron mostActivatedNeuron=null;  for (  Neuron neuron : this.getNeuronList()) {    if (neuron.getActivation() > maxActivation) {      mostActivatedNeuron=neuron;    }  }  if (mostActivatedNeuron != null) {    List<Neuron> incomingNeurons=new ArrayList<Neuron>();    for (    Synapse incoming : mostActivatedNeuron.getFanIn()) {      incoming.getSource().forceSetActivation(incoming.getStrength());      incomingNeurons.add(incoming.getSource());    }    getParentNetwork().fireNeuronsUpdated(incomingNeurons);  }}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  int byteKey=0;  for (int i=offset; i < DES_KEY_LEN; i++) {    byteKey=key[i];    byteKey^=byteKey >> 1;    byteKey^=byteKey >> 2;    byteKey^=byteKey >> 4;    if ((byteKey & 1) == 0) {      return false;    }  }  return true;}  }
class C{  public ReplDBMSEvent eventFromStatement(long seqno,String defaultSchema,String query,int fragNo,boolean lastFrag){  Timestamp ts=new Timestamp(System.currentTimeMillis());  ArrayList<DBMSData> t=new ArrayList<DBMSData>();  t.add(new StatementData(query,ts.getTime(),defaultSchema));  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,t,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,(short)fragNo,lastFrag,"NONE",0,ts,dbmsEvent);  return replDbmsEvent;}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  protected boolean isSupportingRequiredProposals(){  if (fInvocationContext == null)   return false;  ProposalInfo proposalInfo=getProposalInfo();  if (!(proposalInfo instanceof MemberProposalInfo || proposalInfo instanceof AnonymousTypeProposalInfo))   return false;  CompletionProposal proposal=((MemberProposalInfo)proposalInfo).fProposal;  return proposal != null && (proposal.getKind() == CompletionProposal.METHOD_REF || proposal.getKind() == CompletionProposal.FIELD_REF || proposal.getKind() == CompletionProposal.TYPE_REF || proposal.getKind() == CompletionProposal.CONSTRUCTOR_INVOCATION || proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION);}  }
class C{  public static void picture(double x,double y,String s,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode10.class,args);}  }
class C{  public static boolean addThermalCentrifugeRecipe(ItemStack aInput,int aHeat,Object... aOutput){  if (aInput == null || aOutput == null || aOutput.length <= 0 || aOutput[0] == null)   return false;  GT_Utility.removeSimpleIC2MachineRecipe(aInput,getThermalCentrifugeRecipeList(),null);  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.thermalcentrifuge,aInput,true))   return false;  NBTTagCompound tNBT=new NBTTagCompound();  tNBT.setInteger("minHeat",aHeat);  GT_Utility.addSimpleIC2MachineRecipe(aInput,getThermalCentrifugeRecipeList(),tNBT,aOutput);  return true;}  }
class C{  public Long moveFileSelf(String SID,Long fileExplorerItemId,Long newParentFileExplorerItemId,Long room_id,Boolean isOwner,Boolean moveToHome) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      log.debug("moveFileSelf " + fileExplorerItemId);      fileExplorerItemDao.moveFile(fileExplorerItemId,newParentFileExplorerItemId,room_id,isOwner,users_id);      FileExplorerItem fileExplorerItem=fileExplorerItemDao.getFileExplorerItemsById(fileExplorerItemId);      if (moveToHome) {        fileUtils.setFileToOwnerOrRoomByParent(fileExplorerItem,users_id,null);      } else {        fileUtils.setFileToOwnerOrRoomByParent(fileExplorerItem,null,room_id);      }    }  } catch (  Exception err) {    log.error("[moveFile] ",err);  }  return null;}  }
class C{  public static <T>Mutable<T> newMutable(){  return newMutable(null);}  }
class C{  public boolean handles(Throwable thr){  return errorType.isInstance(thr) && check.apply((T)thr);}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  private void markClinitsAsModeled(){  for (  SootClass clz : allSystemClasses) {    if (clz.declaresMethod("void <clinit>()")) {      SootMethod clinit=clz.getMethod("void <clinit>()");      api_modeled_methods.addMethod(clinit);      safe_methods.addMethod(clinit);    }  }}  }
class C{  private void createSteppedPrices(int stepNum,Date modificationDate,Long[] limitArray,BigDecimal[] priceArray,PriceModel pm,PricedEvent pricedEvent,PricedParameter pricedParameter) throws NonUniqueBusinessKeyException {  List<SteppedPrice> steppList=new ArrayList<>();  for (int i=0; i < stepNum; i++) {    SteppedPrice steppedPrice=new SteppedPrice();    steppedPrice.setPriceModel(pm);    steppedPrice.setPricedEvent(pricedEvent);    steppedPrice.setPricedParameter(pricedParameter);    steppedPrice.setLimit(limitArray[i]);    steppedPrice.setPrice(priceArray[i]);    steppedPrice.setHistoryModificationTime(Long.valueOf(modificationDate.getTime()));    steppList.add(steppedPrice);  }  updateFreeAmountAndAdditionalPrice(steppList);  Iterator<SteppedPrice> iterator=steppList.iterator();  while (iterator.hasNext()) {    SteppedPrice step=iterator.next();    mgr.persist(step);    mgr.flush();  }}  }
class C{  public int peekErrorSQLState(){  return byteBuffer[ERROR_SQL_STATE_OFFSET];}  }
class C{  public static void main(String[] args) throws Exception {  new SimpleStatistics().start(args);}  }
class C{  public static String composeDsName(final String dsName,final String entity){  String datasourceName=dsName;  if ((dsName != null) && (entity != null) && !"".equals(dsName)&& !"".equals(entity)) {    if (dsName.indexOf('{') > -1) {      datasourceName=dsName.replaceFirst("\\{\\d\\}",entity);    } else {      datasourceName+=entity;    }  }  return datasourceName;}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public SOAP11Service(final URI endpoint,final QName port){  super(endpoint,port);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"retn");  if (instruction.getOperands().size() > 1) {    throw new InternalTranslationException("Error: Argument instruction is not a retn instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final long offset=baseOffset;  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String returnAddress=environment.getNextVariableString();  final String adjustedStack=environment.getNextVariableString();  instructions.add(ReilHelpers.createLdm(offset,archSize,"esp",archSize,returnAddress));  final List<? extends IOperandTree> operands=instruction.getOperands();  final String stackMovement=operands.size() == 0 ? String.valueOf(archSize.getByteSize()) : String.valueOf(archSize.getByteSize() + Long.valueOf(Helpers.getLeafValue(operands.get(0).getRootNode())));  instructions.add(ReilHelpers.createAdd(offset + 1,archSize,"esp",archSize,stackMovement,nextSize,adjustedStack));  instructions.add(ReilHelpers.createAnd(offset + 2,nextSize,adjustedStack,nextSize,truncateMask,archSize,"esp"));  instructions.add(ReilHelpers.createJcc(offset + 3,archSize,"1",archSize,returnAddress));}  }
class C{  void chooseFirstProvider(){  if (spi != null) {    return;  }synchronized (lock) {    if (spi != null) {      return;    }    if (debug != null) {      int w=--warnCount;      if (w >= 0) {        debug.println("Cipher.init() not first method " + "called, disabling delayed provider selection");        if (w == 0) {          debug.println("Further warnings of this type will " + "be suppressed");        }        new Exception("Call trace").printStackTrace();      }    }    Exception lastException=null;    while ((firstService != null) || serviceIterator.hasNext()) {      Service s;      CipherSpi thisSpi;      if (firstService != null) {        s=firstService;        thisSpi=firstSpi;        firstService=null;        firstSpi=null;      } else {        s=serviceIterator.next();        thisSpi=null;      }      if (JceSecurity.canUseProvider(s.getProvider()) == false) {        continue;      }      Transform tr=getTransform(s,transforms);      if (tr == null) {        continue;      }      if (tr.supportsModePadding(s) == S_NO) {        continue;      }      try {        if (thisSpi == null) {          Object obj=s.newInstance(null);          if (obj instanceof CipherSpi == false) {            continue;          }          thisSpi=(CipherSpi)obj;        }        tr.setModePadding(thisSpi);        initCryptoPermission();        spi=thisSpi;        provider=s.getProvider();        firstService=null;        serviceIterator=null;        transforms=null;        return;      } catch (      Exception e) {        lastException=e;      }    }    ProviderException e=new ProviderException("Could not construct CipherSpi instance");    if (lastException != null) {      e.initCause(lastException);    }    throw e;  }}  }
class C{  protected void finalize(){  ((DTEDSubframedFrame)obj).dispose();}  }
class C{  private int yearMonthToDayOfYear(int prolepticYear,int month){  int epochMonthFirst=yearToEpochMonth(prolepticYear);  return epochMonthToEpochDay(epochMonthFirst + month) - epochMonthToEpochDay(epochMonthFirst);}  }
class C{  synchronized void receive(int c) throws IOException {  if (!connected) {    throw new IOException("Pipe not connected");  } else   if (closedByWriter || closedByReader) {    throw new IOException("Pipe closed");  } else   if (readSide != null && !readSide.isAlive()) {    throw new IOException("Read end dead");  }  writeSide=Thread.currentThread();  while (in == out) {    if ((readSide != null) && !readSide.isAlive()) {      throw new IOException("Pipe broken");    }    notifyAll();    try {      wait(1000);    } catch (    InterruptedException ex) {      throw new java.io.InterruptedIOException();    }  }  if (in < 0) {    in=0;    out=0;  }  buffer[in++]=(char)c;  if (in >= buffer.length) {    in=0;  }}  }
class C{  public List<Visitante> listar(){  List<Visitante> dados=new ArrayList<>();  try {    String sql="SELECT tb_visitantes.* FROM tb_visitantes ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    while (rs.next()) {      dados.add(new Visitante(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),Tempo.toDate(rs.getTimestamp(7)),rs.getString(8),rs.getString(9)));    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar visitantes na base de dados! \n" + ex);  }  return dados;}  }
class C{  public GitHubRepository createRepository(GHRepository ghRepository) throws ApiException, IOException {  GitHubRepository dtoRepository=DtoFactory.getInstance().createDto(GitHubRepository.class);  dtoRepository.setName(ghRepository.getName());  dtoRepository.setUrl(String.valueOf(ghRepository.getUrl()));  dtoRepository.setHomepage(ghRepository.getHomepage());  dtoRepository.setForks(ghRepository.getForks());  dtoRepository.setLanguage(ghRepository.getLanguage());  dtoRepository.setFork(ghRepository.isFork());  dtoRepository.setWatchers(ghRepository.getWatchers());  dtoRepository.setPrivateRepo(ghRepository.isPrivate());  dtoRepository.setSize(ghRepository.getSize());  dtoRepository.setDescription(ghRepository.getDescription());  dtoRepository.setSshUrl(ghRepository.getSshUrl());  dtoRepository.setHtmlUrl(ghRepository.gitHttpTransportUrl());  dtoRepository.setUpdatedAt(String.valueOf(ghRepository.getUpdatedAt()));  dtoRepository.setGitUrl(ghRepository.getGitTransportUrl());  dtoRepository.setHasWiki(ghRepository.hasWiki());  dtoRepository.setCloneUrl(String.valueOf(ghRepository.getUrl()));  dtoRepository.setSvnUrl(ghRepository.getSvnUrl());  dtoRepository.setOpenedIssues(ghRepository.getOpenIssueCount());  dtoRepository.setCreatedAt(String.valueOf(ghRepository.getCreatedAt()));  dtoRepository.setPushedAt(String.valueOf(ghRepository.getPushedAt()));  dtoRepository.setHasDownloads(ghRepository.hasDownloads());  dtoRepository.setHasIssues(ghRepository.hasIssues());  dtoRepository.setOwnerLogin(ghRepository.getOwnerName());  if (ghRepository.isFork() && ghRepository.getParent() != null) {    dtoRepository.setParent(createRepository(ghRepository.getParent()));  }  return dtoRepository;}  }
class C{  public GetEdgesServlet(MultiSegmentPowerLawBipartiteGraph bigraph,Side side){  this.bigraph=bigraph;  this.side=side;}  }
class C{  public UF12(){  this(30,5);}  }
class C{  public void testConstrStringWithExponentWithPoint3(){  String a="2380964839238475457356735674573563567890.295784902768787678287E+21";  int aScale=0;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  void printHeader(Path auditReport,long allUsersNumber,@Nullable CodenvyLicense license) throws ServerException {  printRow("Number of all users: " + allUsersNumber + "\n",auditReport);  if (license != null) {    printRow("Number of users licensed: " + license.getNumberOfUsers() + "\n",auditReport);    printRow("Date when license expires: " + new SimpleDateFormat("dd MMMM yyyy",Locale.ENGLISH).format(license.getExpirationDate()) + "\n",auditReport);  } else {    printError("Failed to retrieve license",auditReport);  }}  }
class C{  public boolean checkSignLocation(Location loc){  if (loc.equals(signLocation)) {    signLocation=null;    return true;  } else {    return false;  }}  }
class C{  public void displayState(int state){  if (getNamedSensor() == null) {    log.debug("Display state " + state + ", disconnected");  } else   if (isIcon()) {    NamedIcon icon=getIcon(state);    if (icon != null) {      super.setIcon(icon);    }  } else   if (isText()) {switch (state) {case Sensor.UNKNOWN:      super.setText(unknownText);    getPopupUtility().setBackgroundColor(backgroundColorUnknown);  getPopupUtility().setForeground(textColorUnknown);break;case Sensor.ACTIVE:super.setText(activeText);getPopupUtility().setBackgroundColor(backgroundColorActive);getPopupUtility().setForeground(textColorActive);break;case Sensor.INACTIVE:super.setText(inactiveText);getPopupUtility().setBackgroundColor(backgroundColorInActive);getPopupUtility().setForeground(textColorInActive);break;default :super.setText(inconsistentText);getPopupUtility().setBackgroundColor(backgroundColorInconsistent);getPopupUtility().setForeground(textColorInconsistent);break;}}int deg=getDegrees();rotate(deg);if (deg == 0) {setOpaque(getPopupUtility().hasBackground());}updateSize();}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  private void fetchNext(){  if (pendingUtc != null || done) {    return;  }  DateValue dUtc=generateInstance();  if (dUtc == null || !condition.apply(dUtc)) {    done=true;    return;  }  pendingUtc=dUtc;  yearGenerator.workDone();}  }
class C{  public void addNextDropTable(DropTable drop){  if (next == null) {    next=drop;  } else {    next.addNextDropTable(drop);  }}  }
class C{  public boolean isXmpp(){  return isProtocol(XMPP);}  }
class C{  public final LC alignY(String align){  setAlignY(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  private static String highPart(final String text){  return MediaType.sectors(text)[0];}  }
class C{  public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException {  super("X.509");  final int size=certs.size();  certificates=new ArrayList<X509Certificate>(size);  for (int i=0; i < size; i++) {    final java.security.cert.Certificate cert=certs.get(i);    if (!(cert instanceof X509Certificate)) {      throw new CertificateException("Certificate " + i + " is not an X.509 certificate");    }    certificates.add((X509Certificate)cert);  }}  }
class C{  protected JvmRTBootClassPathTableMeta createJvmRTBootClassPathTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTBootClassPathTableMetaImpl(mib,objectserver);}  }
class C{  protected String registerProcessingNode(final String protocol,final String host,final int servicePort,final int adminPort,final SPQRResourceManagerClient client) throws RequiredInputMissingException, RemoteClientConnectionFailedException, IOException {  if (StringUtils.isBlank(protocol))   throw new RequiredInputMissingException("Missing require communication protocol used by resource manager for accessing this node. See 'protocol' property in config file.");  if (StringUtils.isBlank(host))   throw new RequiredInputMissingException("Missing required host name used by resource manager for accessing this node. See 'host' property in config file.");  if (servicePort < 1)   throw new RequiredInputMissingException("Missing required service port used by resource manager for accessing this node. See 'servicePort' property in config file.");  if (adminPort < 1)   throw new RequiredInputMissingException("Missing required admin port used by resource manager for accessing this node. See 'adminPort' property in config file.");  final NodeRegistrationResponse registrationResponse=client.registerNode(protocol,host,servicePort,adminPort);  if (registrationResponse == null)   throw new RemoteClientConnectionFailedException("Failed to connect with resource manager. Error: no response received");  if (registrationResponse.getState() != NodeRegistrationState.OK)   throw new RemoteClientConnectionFailedException("Failed to register processing node with resource manage. Reason: " + registrationResponse.getState() + ". Message: "+ registrationResponse.getMessage());  return registrationResponse.getId();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.218 -0500",hash_original_method="2F2F1BA624E724086EA8751BBE476886",hash_generated_method="6F28E74B1693B6D6F91A43F6A0ADB6DB") public int list() throws IOException {  return sendCommand(NNTPCommand.LIST);}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  File directoryToGet;  if (directory != null) {    directoryToGet=new File(directory);  } else {    directoryToGet=new File(new File("").getAbsolutePath());  }  String projectId=getProjectFromDirectory(directoryToGet);  if (projectId == null) {    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectId).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  System.out.println(String.format("Pulling project %s into %s",project.name(),directoryToGet.getAbsolutePath()));  pull(project,directoryToGet);  override(project,directoryToGet);  return null;}  }
class C{  public CheckboxTree(TreeModel treemodel){  super(treemodel);  initialize();}  }
class C{  public void readSet(ASN1Set set) throws IOException {  if (tag != ASN1Constants.TAG_C_SET) {    throw expected("set");  }  throw new ASN1Exception("Decoding ASN.1 Set type is not supported");}  }
class C{  public void arc(float x,float y,float w,float h,float startAngle,float sweepAngle,boolean joinPath){  Ellipse e=new Ellipse();  Ellipse.initWithBounds(e,x,y,w,h);  e.addToPath(this,-startAngle,-sweepAngle,joinPath);}  }
class C{  private void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  timeUniform=glGetUniformLocation(computeProgram,"time");  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");  lightRadiusUniform=glGetUniformLocation(computeProgram,"lightRadius");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  int objectsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Objects");  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,objectsResourceIndex,props,null,params);  objectsSsboBinding=params.get(0);  int trianglesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Triangles");  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params);  trianglesSsboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldPositionImage");  glGetUniformiv(computeProgram,loc,params);  worldPositionImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldNormalImage");  glGetUniformiv(computeProgram,loc,params);  worldNormalImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  public Boolean isInterVMCommunicationThroughVMCISupported(){  return interVMCommunicationThroughVMCISupported;}  }
class C{  public static StringBuilder stripXML(final StringBuilder all_tags,final boolean isXMLExtraction){  final int rawLength=all_tags.length();  StringBuilder general_buffer=new StringBuilder(rawLength);  StringBuilder tag=new StringBuilder(rawLength);  if (all_tags == null) {    return general_buffer;  }  if (isXMLExtraction) {    char next_token;    char start=' ';    boolean inToken=false;    boolean inAttributeValue=false;    final int length=all_tags.length();    boolean match;    for (int i=0; i < length; i++) {      next_token=all_tags.charAt(i);      match=false;      if (inToken && next_token == '"') {        inAttributeValue=!inAttributeValue;      }      if ((inToken) && (start == '&') && ((next_token == '<') || (next_token == '&'))) {        general_buffer.append(tag);        tag=new StringBuilder(5);      }      if (!inAttributeValue && (strip_start_token_deliminator.indexOf(next_token) != -1)) {        inToken=true;        start=next_token;        match=true;      }      if ((inToken) && (start == '&') && (next_token == ' ')) {        inToken=false;        general_buffer.append('&');        tag=new StringBuilder(5);      }      if (!inToken) {        general_buffer.append(next_token);      } else {        tag.append(next_token);      }      if (!match) {        final int endPointer=strip_end_token_deliminator.indexOf(next_token);        if ((endPointer == 1) & (start == '&')) {          if (tag.toString().equals("&lt;")) {            general_buffer.append('<');          } else           if (tag.toString().equals("&gt;")) {            general_buffer.append('>');          } else           if (tag.toString().equals("&amp;")) {            general_buffer.append('&');          }          inToken=false;          tag=new StringBuilder();        } else         if ((endPointer == 0) & (start == '<')) {          inToken=false;          tag=new StringBuilder();        } else         if (!inToken && next_token == '&') {          general_buffer.append('&');        }      }    }  } else {    general_buffer=all_tags;  }  general_buffer=Strip.trim(general_buffer);  return general_buffer;}  }
class C{  public boolean attempt(int old,int value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public boolean isCompleteRow(RowSetMetaData RowSetMD) throws SQLException {  for (int i=0; i < cols; i++) {    if (colsInserted.get(i) == false && RowSetMD.isNullable(i + 1) == ResultSetMetaData.columnNoNulls) {      return false;    }  }  return true;}  }
class C{  public ClusterInfo removeImage(String version,boolean force){  UriBuilder builder=client.uriBuilder(IMAGE_REMOVE_URL);  addQueryParam(builder,VERSION_PARAM,version);  if (force) {    addQueryParam(builder,FORCE_PARAM,FORCE);  }  return client.postURI(ClusterInfo.class,builder.build());}  }
class C{  public boolean isSetHost(){  return this.host != null;}  }
class C{  public static String formatNumber(String phoneNumber,String defaultCountryIso){  if (phoneNumber.startsWith("#") || phoneNumber.startsWith("*")) {    return phoneNumber;  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    PhoneNumber pn=util.parseAndKeepRawInput(phoneNumber,defaultCountryIso);    result=util.formatInOriginalFormat(pn,defaultCountryIso);  } catch (  NumberParseException e) {  }  return result;}  }
class C{  @Override public final String toString(){  StringBuilder sb=new StringBuilder();  sb.append(block);  sb.append(" (").append(low).append(", ").append(high).append(")");  return sb.toString();}  }
class C{  public static CGPoint ccpNormalize(final CGPoint v){  return ccpMult(v,1.0f / ccpLength(v));}  }
class C{  private void addNodesSF(Collection<MPPOrderNode> list,int PP_Order_Node_ID,int AD_Client_ID){  final MPPOrderNode node=getNode(PP_Order_Node_ID,AD_Client_ID);  if (node != null) {    if (!list.contains(node)) {      list.add(node);    }    ArrayList<Integer> nextNodes=new ArrayList<Integer>();    for (    MPPOrderNodeNext next : node.getTransitions(AD_Client_ID)) {      final MPPOrderNode child=getNode(next.getPP_Order_Next_ID(),AD_Client_ID);      if (child != null) {        if (!list.contains(child)) {          list.add(child);          nextNodes.add(next.getPP_Order_Next_ID());        } else {          log.saveError("Error","Cyclic transition found - " + node + " -> "+ child);        }      }    }    for (    int pp_Order_Next_ID : nextNodes) {      addNodesSF(list,pp_Order_Next_ID,AD_Client_ID);    }  }}  }
class C{  CommandInterface prepareCommand(String sql,int fetchSize){  return session.prepareCommand(sql,fetchSize);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  LocalBroadcastManager.getInstance(this).unregisterReceiver(mDownloadReceiver);}  }
class C{  public CHelpCheckbox(final Action action,final IHelpInformation information){  super(action);  m_information=information;}  }
class C{  public final boolean isAbstract(){  return Modifier.isAbstract(getModifiers());}  }
class C{  public synchronized void addMethod(String name,String methodClass,boolean enable) throws HostException {  if (logger.isDebugEnabled()) {    logger.debug("Adding ping method: name=" + name + " class="+ methodClass);  }  instantiatePingMethod(methodClass);  methods.put(name,methodClass);  if (enable)   enableMethod(name);}  }
class C{  public static Date convertDate(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueDate d=(ValueDate)value.convertTo(Value.DATE);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=d.getDateValue();  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  long ms=cal.getTimeInMillis();  return new Date(ms);}  }
class C{  public static void dropQueuedCubeLoad(ICubicWorld world,int x,int y,int z,Consumer<Cube> runnable){  QueuedCube key=new QueuedCube(x,y,z,world);  AsyncCubeIOProvider task=cubeTasks.get(key);  if (task == null) {    CubicChunks.LOGGER.warn("Attempting to drop cube that wasn't queued in {} @ ({}, {}, {})",world,x,y,z);    return;  }  task.removeCallback(runnable);  if (!task.hasCallbacks()) {    cubeTasks.remove(key);    pool.remove(task);  }}  }
class C{  protected static Clustering cleanUpKMeans(Clustering kMeansResult,ArrayList<CFCluster> microclusters){  int k=kMeansResult.size();  CFCluster[] converted=new CFCluster[k];  for (  CFCluster mc : microclusters) {    double minDistance=Double.MAX_VALUE;    int closestCluster=0;    for (int i=0; i < k; i++) {      double distance=distance(kMeansResult.get(i).getCenter(),mc.getCenter());      if (distance < minDistance) {        closestCluster=i;        minDistance=distance;      }    }    if (converted[closestCluster] == null) {      converted[closestCluster]=(CFCluster)mc.copy();    } else {      converted[closestCluster].add(mc);    }  }  int count=0;  for (int i=0; i < converted.length; i++) {    if (converted[i] != null)     count++;  }  CFCluster[] cleaned=new CFCluster[count];  count=0;  for (int i=0; i < converted.length; i++) {    if (converted[i] != null)     cleaned[count++]=converted[i];  }  return new Clustering(cleaned);}  }
class C{  private void addResourcesForPath(JsonApiDocument jsonApiDocument,PersistentResource<?> rec,List<String> relationPath){  String relation=relationPath.remove(0);  rec.getRelationCheckedFiltered(relation).forEach(null);}  }
class C{  public synchronized boolean isPropagated(){  return propagatedFrom != null;}  }
class C{  protected boolean executePasswordResetCommand(final String token){  try {    shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_RESET_PASSWORD,cartMixin.getCurrentCart(),new HashMap<String,Object>(){{        put(ShoppingCartCommand.CMD_RESET_PASSWORD,token);      }    });    return true;  } catch (  BadCredentialsException bce) {    return false;  }}  }
class C{  protected void doParse(String value,ListHandler handler) throws ParseException {  PathParser pathParser=new PathParser();  NormalizedPathSegListBuilder builder=new NormalizedPathSegListBuilder(handler);  pathParser.setPathHandler(builder);  pathParser.parse(value);}  }
class C{  @Override public String toString(){  return cronExpression;}  }
class C{  IMFTrackFileReader(File workingDirectory,ResourceByteRangeProvider resourceByteRangeProvider){  this.workingDirectory=workingDirectory;  this.resourceByteRangeProvider=resourceByteRangeProvider;}  }
class C{  private String printOFormat(final int x){  String sx=null;  if (x == Integer.MIN_VALUE) {    sx="20000000000";  } else   if (x < 0) {    final String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,8);switch (t.length()) {case 1:      sx="2000000000" + t;    break;case 2:  sx="200000000" + t;break;case 3:sx="20000000" + t;break;case 4:sx="2000000" + t;break;case 5:sx="200000" + t;break;case 6:sx="20000" + t;break;case 7:sx="2000" + t;break;case 8:sx="200" + t;break;case 9:sx="20" + t;break;case 10:sx='2' + t;break;case 11:sx='3' + t.substring(1);break;}} else {sx=Integer.toString(x,8);}return printOFormat(sx);}  }
class C{  public SymbolTableEntryInternal steFor_$sliceToArrayForDestruct(){  return getSymbolTableEntryInternal("$sliceToArrayForDestruct",true);}  }
class C{  protected String encodeCookie(SerializableCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    AsyncHttpClient.log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  protected String extractHTML(WARCWritable value){  byte[] bytes=value.getRecord().getContent();  Charset charset=CHARSET_DETECTOR.detectCharset(bytes);  String html=new String(bytes,charset);  return html.substring(html.indexOf("\r\n\r\n") + 4);}  }
class C{  protected void sequence_ArrayTypeRef(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String subtype(){  return subtype;}  }
class C{  public static void upto(Date self,Date to,Closure closure){  if (self.compareTo(to) <= 0) {    for (Date i=(Date)self.clone(); i.compareTo(to) <= 0; i=next(i)) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be earlier than the value ("+ self+ ") it's called on.");}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if (getRetrieval() == BATCH || getRetrieval() == NONE) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (getWriter() != null) {    outW=new PrintWriter(getWriter());  }  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure(Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    Instances header=new Instances(structure,0);    if (retrieveFile() == null && outW == null) {      System.out.println(header.toString());    } else {      outW.print(header.toString());      outW.print("\n");      outW.flush();    }    writeMode=getWriteMode();  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      if (inst instanceof weka.core.SparseInstance && inst.dataset().checkForStringAttributes()) {        for (int i=0; i < inst.numAttributes(); i++) {          if (inst.attribute(i).isString() && inst.attribute(i).numValues() == 1) {            String theVal=inst.stringValue(i);            inst.attribute(i).setStringValue(weka.core.Attribute.DUMMY_STRING_VAL);            inst.attribute(i).addStringValue(theVal);            inst.setValue(i,1);          }        }      }      if (retrieveFile() == null && outW == null) {        System.out.println(inst.toStringMaxDecimalDigits(m_MaxDecimalPlaces));      } else {        outW.println(inst.toStringMaxDecimalDigits(m_MaxDecimalPlaces));        m_incrementalCounter++;        if (m_incrementalCounter > 100) {          m_incrementalCounter=0;          outW.flush();        }      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  private static void sort(char[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        char ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        char a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      char last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    char t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    char t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    char t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    char t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    char pivot1=a[e2];    char pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      char ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        char ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    char pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      char ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public void initialise(int dimensions,int base){  mi=0.0;  miComputed=false;  xNorms=null;  continuousData=null;  means=null;  stds=null;  discreteData=null;  this.dimensions=dimensions;  this.base=base;}  }
class C{  @Deprecated public static ChangeSetExecutor createUndo(ChangeSet changeSet,UndoContext context){  return new ChangeSetExecutor(changeSet,Type.UNDO,context,null,0);}  }
class C{  private static String fixImportStatement(String importStatementOnDemand){  if (importStatementOnDemand.endsWith(".*")) {    return importStatementOnDemand.substring(0,importStatementOnDemand.length() - 2);  } else {    boolean hasClassname=StringUtil.hasUpperCaseChar(importStatementOnDemand);    if (hasClassname) {      int pos=importStatementOnDemand.lastIndexOf(".");      return importStatementOnDemand.substring(0,pos);    } else {      return importStatementOnDemand;    }  }}  }
class C{  @Override public int compareTo(CnAValidation o){  int result=1;  if (o != null && o.getElmtDbId() != null) {    if (this.getElmtDbId() != null) {      result=this.getElmtDbId().compareTo(o.getElmtDbId());    } else {      result=0;    }  }  return result;}  }
class C{  public static byte[] generateBitstream(Bitmap src,Bitmap.CompressFormat format,int quality){  ByteArrayOutputStream os=new ByteArrayOutputStream();  src.compress(format,quality,os);  return os.toByteArray();}  }
class C{  public Builder forceIcons(){  forceIcons=true;  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public static boolean isAllCap(String str){  if (str.length() <= 0) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isLetter(str.charAt(i)) || !Character.isUpperCase(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  public TimeCounter stop(){switch (state) {case UNSTARTED:    throw new IllegalStateException("Not started. ");case STOPPED:  throw new IllegalStateException("Already stopped. ");case RUNNING:this.stopTimeMillis=System.currentTimeMillis();default :state=State.STOPPED;return this;}}  }
class C{  private void reschedule(){synchronized (mutex) {    if (state != IndexShardState.CLOSED && refreshInterval.millis() > 0) {      refreshScheduledFuture=threadPool.schedule(refreshInterval,ThreadPool.Names.SAME,this);    }  }}  }
class C{  protected KeyListener createKeyListener(){  return getHandler();}  }
class C{  static WebView createWebView(Context applicationContext){  MutableContextWrapper contextWrapper=new MutableContextWrapper(applicationContext);  WebView webView=new WebView(contextWrapper);  configureWebViewDefaults(webView);  return webView;}  }
class C{  public IElementType parseRegex(int tokenStart){  popState();  CharSequence buffer=getBuffer();  int bufferEnd=getBufferEnd();  char openQuote=buffer.charAt(tokenStart);  pushPreparsedToken(tokenStart++,tokenStart,REGEX_QUOTE_OPEN);  RegexBlock firstBlock=RegexBlock.parseBlock(buffer,tokenStart,bufferEnd,openQuote,false);  if (firstBlock == null) {    return getPreParsedToken();  }  int currentOffset=firstBlock.getEndOffset();  List<CustomToken> betweenBlocks=new ArrayList<CustomToken>();  RegexBlock secondBLock=null;  CustomToken secondBlockOpener=null;  if (sectionsNumber == 2 && currentOffset < bufferEnd) {    if (firstBlock.hasSameQuotes()) {      secondBLock=RegexBlock.parseBlock(buffer,currentOffset,bufferEnd,firstBlock.getOpeningQuote(),true);    } else {      currentOffset=lexWhiteSpacesAndComments(currentOffset,betweenBlocks);      if (currentOffset < bufferEnd) {        secondBlockOpener=new CustomToken(currentOffset,currentOffset + 1,REGEX_QUOTE_OPEN);        secondBLock=RegexBlock.parseBlock(buffer,currentOffset + 1,bufferEnd,buffer.charAt(currentOffset),true);      }    }    if (secondBLock == null) {      return getPreParsedToken();    }    currentOffset=secondBLock.getEndOffset();  }  boolean isExtended=false;  boolean isEvaluated=false;  List<Character> allowedModifiers=RegexBlock.allowedModifiers.get(regexCommand == null ? null : regexCommand.toString());  int modifiersEnd=currentOffset;  ArrayList<CustomToken> modifierTokens=new ArrayList<CustomToken>();  while (modifiersEnd < bufferEnd) {    if (!allowedModifiers.contains(buffer.charAt(modifiersEnd))) {      break;    } else     if (buffer.charAt(modifiersEnd) == 'x') {      if (preparsedTokensList.getFirst().getTokenType() == REGEX_QUOTE_OPEN) {        preparsedTokensList.getFirst().setTokenType(REGEX_QUOTE_OPEN_X);      }      isExtended=true;    } else     if (buffer.charAt(modifiersEnd) == 'e') {      isEvaluated=true;      if (secondBlockOpener != null) {        secondBlockOpener.setTokenType(REGEX_QUOTE_OPEN_E);      }    }    modifierTokens.add(new CustomToken(modifiersEnd,modifiersEnd + 1,REGEX_MODIFIER));    modifiersEnd++;  }  preparsedTokensList.addAll(firstBlock.tokenize(getBareStringLexer(),isExtended,false));  if (secondBLock != null) {    preparsedTokensList.addAll(betweenBlocks);    if (secondBlockOpener != null) {      preparsedTokensList.add(secondBlockOpener);    } else     if (isEvaluated) {      preparsedTokensList.getLast().setTokenType(REGEX_QUOTE_E);    } else {      preparsedTokensList.getLast().setTokenType(REGEX_QUOTE);    }    if (isEvaluated) {      if (evalPerlLexer == null) {        evalPerlLexer=new PerlLexerAdapter(myProject);      }      preparsedTokensList.addAll(secondBLock.parseEval(evalPerlLexer));    } else {      preparsedTokensList.addAll(secondBLock.tokenize(getBareStringLexer(),false,true));    }  }  preparsedTokensList.addAll(modifierTokens);  return getPreParsedToken();}  }
class C{  @Override public Rabbit saveRabbit(Rabbit rabbit){  Rabbit savedRabbit=rabbitRepository.save(rabbit);  coreService.syncRabbitNameCache();  return savedRabbit;}  }
class C{  private static Pair<DiagnosticKind,Boolean> parseCategoryString(String category){  final String fixable="fixable-";  final boolean isFixable=category.startsWith(fixable);  if (isFixable) {    category=category.substring(fixable.length());  }  DiagnosticKind categoryEnum=DiagnosticKind.fromParseString(category);  return Pair.of(categoryEnum,isFixable);}  }
class C{  public ArffReader(Reader reader) throws IOException {  m_retainStringValues=true;  m_batchMode=true;  m_Tokenizer=new StreamTokenizer(reader);  initTokenizer();  readHeader(1000);  initBuffers();  Instance inst;  while ((inst=readInstance(m_Data)) != null) {    m_Data.add(inst);  }  compactify();}  }
class C{  public static int estimateBandPassOrder(int sampleRate,int passBandStart,int passBandEnd,double passBandRippleDb,double stopBandRippleDb){  double df=(double)Math.abs(passBandEnd - passBandStart) / (double)sampleRate;  double ddp=(double)Math.log10(passBandRippleDb);  double dds=(double)Math.log10(stopBandRippleDb);  double a1=0.01201;  double a2=0.09664;  double a3=-0.51325;  double a4=0.00203;  double a5=-0.57054;  double a6=-0.44314;  double t1=a1 * ddp * ddp;  double t2=a2 * ddp;  double t3=a4 * ddp * ddp;  double t4=a5 * ddp;  double cinf=dds * (t1 + t2 + a3) + t3 + t4 + a6;  double ginf=-14.6f * (double)Math.log10(passBandRippleDb / stopBandRippleDb) - 16.9;  double n=cinf / df + ginf * df + 1.0;  return (int)Math.ceil(n);}  }
class C{  public boolean isUnambiguous(){  return fIsUnambiguous;}  }
class C{  private static String parseSpoilerTags(String html){  String spoilerText;  String tag;  String spoilerTeaser;  Matcher matcher=SPOILER_PATTERN.matcher(html);  while (matcher.find()) {    tag=matcher.group(0);    spoilerText=matcher.group(1);    spoilerTeaser=matcher.group(2);    if (!tag.contains("<a href=\"http")) {      html=html.replace(tag,tag.substring(0,tag.length() - 4) + (spoilerTeaser.isEmpty() ? "spoiler" : "") + "&lt; [[s[ "+ spoilerText+ "]s]]</a>");    }  }  return html;}  }
class C{  public void initialise(int history,int base){  averageActive=0.0;  maxActive=0.0;  minActive=0.0;  observations=0;  boolean changedSizes=true;  if ((this.base == base) && (this.k == history)) {    changedSizes=false;  }  this.base=base;  k=history;  if (history < 1) {    throw new RuntimeException("History k " + history + " is not >= 1 for ActiveInfo Calculator");  }  if (changedSizes) {    jointCount=new int[base][MathsUtils.power(base,history)];    prevCount=new int[MathsUtils.power(base,history)];    nextCount=new int[base];  } else {    MatrixUtils.fill(jointCount,0);    MatrixUtils.fill(prevCount,0);    MatrixUtils.fill(nextCount,0);  }}  }
class C{  public SQLNonTransientException(Throwable cause){  super(cause);}  }
class C{  public void complainOnDeferredChecks(FlowInfo flowInfo,BlockScope scope){  for (int i=0; i < this.assignCount; i++) {    VariableBinding variable=this.finalVariables[i];    if (variable == null)     continue;    boolean complained=false;    if (variable instanceof FieldBinding) {      if (flowInfo.isPotentiallyAssigned((FieldBinding)variable)) {        complained=true;        scope.problemReporter().duplicateInitializationOfBlankFinalField((FieldBinding)variable,this.finalAssignments[i]);      }    } else {      if (flowInfo.isPotentiallyAssigned((LocalVariableBinding)variable)) {        complained=true;        scope.problemReporter().duplicateInitializationOfFinalLocal((LocalVariableBinding)variable,this.finalAssignments[i]);      }    }    if (complained) {      FlowContext currentContext=this.parent;      while (currentContext != null) {        currentContext.removeFinalAssignmentIfAny(this.finalAssignments[i]);        currentContext=currentContext.parent;      }    }  }  if ((this.tagBits & FlowContext.DEFER_NULL_DIAGNOSTIC) != 0) {    for (int i=0; i < this.nullCount; i++) {      this.parent.recordUsingNullReference(scope,this.nullLocals[i],this.nullReferences[i],this.nullCheckTypes[i],flowInfo);    }  } else {    for (int i=0; i < this.nullCount; i++) {      Expression expression=this.nullReferences[i];      LocalVariableBinding local=this.nullLocals[i];switch (this.nullCheckTypes[i]) {case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL:        if (flowInfo.isDefinitelyNonNull(local)) {          if (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {            if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {              scope.problemReporter().localVariableRedundantCheckOnNonNull(local,expression);            }          } else {            if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {              scope.problemReporter().localVariableNonNullComparedToNull(local,expression);            }          }          continue;        }case CAN_ONLY_NULL | IN_COMPARISON_NULL:case CAN_ONLY_NULL | IN_COMPARISON_NON_NULL:case CAN_ONLY_NULL | IN_ASSIGNMENT:case CAN_ONLY_NULL | IN_INSTANCEOF:      if (flowInfo.isDefinitelyNull(local)) {switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:          if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {            scope.problemReporter().localVariableNullReference(local,expression);            continue;          }        if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {          scope.problemReporter().localVariableRedundantCheckOnNull(local,expression);        }      continue;case FlowContext.IN_COMPARISON_NON_NULL:    if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {      scope.problemReporter().localVariableNullReference(local,expression);      continue;    }  if ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {    scope.problemReporter().localVariableNullComparedToNonNull(local,expression);  }continue;case FlowContext.IN_ASSIGNMENT:scope.problemReporter().localVariableRedundantNullAssignment(local,expression);continue;case FlowContext.IN_INSTANCEOF:scope.problemReporter().localVariableNullInstanceof(local,expression);continue;}} else if (flowInfo.isPotentiallyNull(local)) {switch (this.nullCheckTypes[i] & CONTEXT_MASK) {case FlowContext.IN_COMPARISON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;case FlowContext.IN_COMPARISON_NON_NULL:this.nullReferences[i]=null;if (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) {scope.problemReporter().localVariablePotentialNullReference(local,expression);continue;}break;}}break;case MAY_NULL:if (flowInfo.isDefinitelyNull(local)) {scope.problemReporter().localVariableNullReference(local,expression);continue;}if (flowInfo.isPotentiallyNull(local)) {scope.problemReporter().localVariablePotentialNullReference(local,expression);}break;default :}}}}  }
class C{  public void enqueue(Item item){  Node<Item> oldlast=last;  last=new Node<Item>();  last.item=item;  last.next=null;  if (isEmpty())   first=last; else   oldlast.next=last;  n++;}  }
class C{  protected void buildLink(final StringBuilder sbuf,final String text){  sbuf.append("<a href='");  if (text.startsWith("http://") || text.startsWith("https://") || text.startsWith("ftp://")) {    sbuf.append(text);  } else {    sbuf.append("say:");    try {      sbuf.append(URLEncoder.encode(text,"UTF-8"));    } catch (    final UnsupportedEncodingException ex) {      sbuf.append(text);    }  }  sbuf.append("'>");  appendHTML(sbuf,text);  sbuf.append("</a>");}  }
class C{  public static boolean isPolygonClosed2(Iterable<? extends Vec4> points){  if (points == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.util.Iterator<? extends Vec4> iter=points.iterator();  if (!iter.hasNext()) {    return false;  }  Vec4 firstPoint=iter.next();  Vec4 lastPoint=null;  while (iter.hasNext()) {    lastPoint=iter.next();  }  return (lastPoint != null) && (lastPoint.x == firstPoint.x) && (lastPoint.y == firstPoint.y);}  }
class C{  public void writeValue(Value v) throws IOException {  int type=v.getType();  writeInt(type);switch (type) {case Value.NULL:    break;case Value.BYTES:case Value.JAVA_OBJECT:  writeBytes(v.getBytesNoCopy());break;case Value.UUID:{ValueUuid uuid=(ValueUuid)v;writeLong(uuid.getHigh());writeLong(uuid.getLow());break;}case Value.BOOLEAN:writeBoolean(v.getBoolean().booleanValue());break;case Value.BYTE:writeByte(v.getByte());break;case Value.TIME:if (version >= Constants.TCP_PROTOCOL_VERSION_9) {writeLong(((ValueTime)v).getNanos());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));} else {writeLong(v.getTime().getTime());}break;case Value.DATE:if (version >= Constants.TCP_PROTOCOL_VERSION_9) {writeLong(((ValueDate)v).getDateValue());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getDate()));} else {writeLong(v.getDate().getTime());}break;case Value.TIMESTAMP:{if (version >= Constants.TCP_PROTOCOL_VERSION_9) {ValueTimestamp ts=(ValueTimestamp)v;writeLong(ts.getDateValue());writeLong(ts.getTimeNanos());} else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {Timestamp ts=v.getTimestamp();writeLong(DateTimeUtils.getTimeLocalWithoutDst(ts));writeInt(ts.getNanos() % 1000000);} else {Timestamp ts=v.getTimestamp();writeLong(ts.getTime());writeInt(ts.getNanos() % 1000000);}break;}case Value.TIMESTAMP_TZ:{ValueTimestampTimeZone ts=(ValueTimestampTimeZone)v;writeLong(ts.getDateValue());writeLong(ts.getTimeNanos());writeInt(ts.getTimeZoneOffsetMins());break;}case Value.DECIMAL:writeString(v.getString());break;case Value.DOUBLE:writeDouble(v.getDouble());break;case Value.FLOAT:writeFloat(v.getFloat());break;case Value.INT:writeInt(v.getInt());break;case Value.LONG:writeLong(v.getLong());break;case Value.SHORT:writeInt(v.getShort());break;case Value.STRING:case Value.STRING_IGNORECASE:case Value.STRING_FIXED:writeString(v.getString());break;case Value.BLOB:{if (version >= Constants.TCP_PROTOCOL_VERSION_11) {if (v instanceof ValueLobDb) {ValueLobDb lob=(ValueLobDb)v;if (lob.isStored()) {writeLong(-1);writeInt(lob.getTableId());writeLong(lob.getLobId());if (version >= Constants.TCP_PROTOCOL_VERSION_12) {writeBytes(calculateLobMac(lob.getLobId()));}writeLong(lob.getPrecision());break;}}}long length=v.getPrecision();if (length < 0) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"length=" + length);}writeLong(length);long written=IOUtils.copyAndCloseInput(v.getInputStream(),out);if (written != length) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"length:" + length + " written:"+ written);}writeInt(LOB_MAGIC);break;}case Value.CLOB:{if (version >= Constants.TCP_PROTOCOL_VERSION_11) {if (v instanceof ValueLobDb) {ValueLobDb lob=(ValueLobDb)v;if (lob.isStored()) {writeLong(-1);writeInt(lob.getTableId());writeLong(lob.getLobId());if (version >= Constants.TCP_PROTOCOL_VERSION_12) {writeBytes(calculateLobMac(lob.getLobId()));}writeLong(lob.getPrecision());break;}}}long length=v.getPrecision();if (length < 0) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"length=" + length);}if (length > Integer.MAX_VALUE) {throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"length=" + length);}writeLong(length);Reader reader=v.getReader();Data.copyString(reader,out);writeInt(LOB_MAGIC);break;}case Value.ARRAY:{ValueArray va=(ValueArray)v;Value[] list=va.getList();int len=list.length;Class<?> componentType=va.getComponentType();if (componentType == Object.class) {writeInt(len);} else {writeInt(-(len + 1));writeString(componentType.getName());}for (Value value : list) {writeValue(value);}break;}case Value.RESULT_SET:{try {ResultSet rs=((ValueResultSet)v).getResultSet();rs.beforeFirst();ResultSetMetaData meta=rs.getMetaData();int columnCount=meta.getColumnCount();writeInt(columnCount);for (int i=0; i < columnCount; i++) {writeString(meta.getColumnName(i + 1));writeInt(meta.getColumnType(i + 1));writeInt(meta.getPrecision(i + 1));writeInt(meta.getScale(i + 1));}while (rs.next()) {writeBoolean(true);for (int i=0; i < columnCount; i++) {int t=DataType.getValueTypeFromResultSet(meta,i + 1);Value val=DataType.readValue(session,rs,i + 1,t);writeValue(val);}}writeBoolean(false);rs.beforeFirst();} catch (SQLException e) {throw DbException.convertToIOException(e);}break;}case Value.GEOMETRY:if (version >= Constants.TCP_PROTOCOL_VERSION_14) {writeBytes(v.getBytesNoCopy());} else {writeString(v.getString());}break;default :throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"type=" + type);}}  }
class C{  public void unsetExecuteInterval(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,EXECUTEINTERVAL_ISSET_ID);}  }
class C{  public void test_unread$CII() throws IOException {  PushbackReader tobj;  String str2="0123456789";  char[] buf2=(str2 + str2 + str2).toCharArray();  char[] readBuf=new char[10];  tobj=new PushbackReader(underlying,10);  tobj.unread(buf2,15,10);  try {    tobj.unread(buf2,15,10);    fail("IOException not thrown.");  } catch (  IOException e) {  }  tobj.read(readBuf);  assertEquals("Incorrect bytes read","5678901234",new String(readBuf));  underlying.throwExceptionOnNextUse=true;  try {    tobj.read(buf2,15,10);    fail("IOException not thrown.");  } catch (  IOException e) {  }}  }
class C{  public void insertTextAtIndex(int index,String s){  Document doc=JTextComponent.this.getDocument();  if (doc != null) {    try {      if (s != null && s.length() > 0) {        boolean composedTextSaved=saveComposedText(index);        doc.insertString(index,s,null);        if (composedTextSaved) {          restoreComposedText();        }      }    } catch (    BadLocationException e) {      UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);    }  }}  }
class C{  @Deprecated public Instances(Reader reader,int capacity) throws IOException {  ArffReader arff=new ArffReader(reader,0);  Instances header=arff.getStructure();  initialize(header,capacity);  m_Lines=arff.getLineNo();}  }
class C{  public static MPPOrder createMO(MPPProductPlanning pp,int C_OrderLine_ID,int M_AttributeSetInstance_ID,BigDecimal qty,Timestamp dateOrdered,Timestamp datePromised,String description){  MPPProductBOM bom=pp.getPP_Product_BOM();  MWorkflow wf=pp.getAD_Workflow();  if (pp.getS_Resource_ID() > 0 && bom != null && wf != null) {    int duration=MPPMRP.getDurationDays(qty,pp);    MPPOrder order=new MPPOrder(pp.getCtx(),0,pp.get_TrxName());    order.setAD_Org_ID(pp.getAD_Org_ID());    order.setDescription(description);    order.setC_OrderLine_ID(C_OrderLine_ID);    order.setS_Resource_ID(pp.getS_Resource_ID());    order.setM_Warehouse_ID(pp.getM_Warehouse_ID());    order.setM_Product_ID(pp.getM_Product_ID());    order.setM_AttributeSetInstance_ID(M_AttributeSetInstance_ID);    order.setPP_Product_BOM_ID(pp.getPP_Product_BOM_ID());    order.setAD_Workflow_ID(pp.getAD_Workflow_ID());    order.setPlanner_ID(pp.getPlanner_ID());    order.setLine(10);    order.setDateOrdered(dateOrdered);    order.setDatePromised(datePromised);    order.setDateStartSchedule(TimeUtil.addDays(datePromised,0 - duration));    order.setDateFinishSchedule(datePromised);    order.setC_UOM_ID(pp.getM_Product().getC_UOM_ID());    order.setQty(qty);    order.setPriorityRule(MPPOrder.PRIORITYRULE_High);    order.saveEx();    order.setDocStatus(order.prepareIt());    order.setDocAction(MPPOrder.ACTION_Complete);    order.saveEx();    return order;  }  return null;}  }
class C{  public static boolean isInteger(FTypeRef typeRef){  if (typeRef == null)   return false;  FBasicTypeId bt=getActualPredefined(typeRef);  return isBasicIntegerId(bt) || typeRef.getInterval() != null;}  }
class C{  public RenderedImage createDefaultRendering(){  AffineTransform usr2dev=new AffineTransform();  RenderContext newRC=new RenderContext(usr2dev);  return createRendering(newRC);}  }
class C{  public double nextGaussian(){  return org.evosuite.runtime.Random.nextGaussian();}  }
class C{  public IntIteratorSpliterator(PrimitiveIterator.OfInt iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  public static <A>OptionalTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public static int indexOfIgnoreCase(String[] arr,String value){  for (int i=0; i < arr.length; i++) {    if (arr[i].equalsIgnoreCase(value))     return i;  }  return -1;}  }
class C{  List<String> parseDatePattern(String pattern){  List<String> tokens=new Vector<String>();  String tmp=null;  for (int i=0; i < pattern.length(); i++) {    char ch=pattern.charAt(i);    if (ch == EXPLICIT_LITERAL) {      int n=pattern.indexOf(EXPLICIT_LITERAL,i + 1);      if (n != -1) {        if (tmp != null) {          tokens.add(tmp.charAt(0) + tmp);          tmp=null;        }        tokens.add(LITERAL_LETTER + pattern.substring(i + 1,n));      }      i=n;      continue;    }    boolean isValid=PATTERN_LETTERS.indexOf(ch) != -1;    if (isValid == false) {      if (tmp != null) {        tokens.add(tmp.charAt(0) + tmp);        tmp=null;      }      int n;      for (n=i; n < pattern.length(); n++) {        ch=pattern.charAt(n);        if (PATTERN_LETTERS.indexOf(ch) != -1) {          break;        }        if (isAlpha(ch)) {          throw new IllegalArgumentException("Illegal pattern character: " + ch);        }      }      tokens.add(LITERAL_LETTER + pattern.substring(i,n));      i=n - 1;      continue;    }    if (tmp == null) {      tmp=String.valueOf(ch);      continue;    } else     if (ch == tmp.charAt(0)) {      tmp+=ch;    } else {      tokens.add(tmp.charAt(0) + tmp);      tmp=String.valueOf(ch);    }  }  if (tmp != null) {    tokens.add(tmp.charAt(0) + tmp);  }  return tokens;}  }
class C{  public void stopFlipping(){  mStarted=false;  updateRunning();}  }
class C{  public static String decodeXML(String text){  if (text == null) {    return null;  }  text=text.replaceAll("&lt;","<");  text=text.replaceAll("&gt;",">");  text=text.replaceAll("&quot;","\"");  text=text.replaceAll("&#039;","\'");  text=text.replaceAll("&amp;","&");  return text;}  }
class C{  private boolean isVisible(List<Vector2> polygon,int i,int j){  int s=polygon.size();  Vector2 iv0, iv, iv1;  Vector2 jv0, jv, jv1;  iv0=polygon.get(i == 0 ? s - 1 : i - 1);  iv=polygon.get(i);  iv1=polygon.get(i + 1 == s ? 0 : i + 1);  jv0=polygon.get(j == 0 ? s - 1 : j - 1);  jv=polygon.get(j);  jv1=polygon.get(j + 1 == s ? 0 : j + 1);  if (this.isReflex(iv0,iv,iv1)) {    if (leftOn(iv,iv0,jv) && rightOn(iv,iv1,jv))     return false;  } else {    if (rightOn(iv,iv1,jv) || leftOn(iv,iv0,jv))     return false;  }  if (this.isReflex(jv0,jv,jv1)) {    if (leftOn(jv,jv0,iv) && rightOn(jv,jv1,iv))     return false;  } else {    if (rightOn(jv,jv1,iv) || leftOn(jv,jv0,iv))     return false;  }  for (int k=0; k < s; k++) {    int ki1=k + 1 == s ? 0 : k + 1;    if (k == i || k == j || ki1 == i || ki1 == j)     continue;    Vector2 k1=polygon.get(k);    Vector2 k2=polygon.get(ki1);    Vector2 in=Segment.getSegmentIntersection(iv,jv,k1,k2);    if (in != null)     return false;  }  return true;}  }
class C{  void writeEntry(int position,int offset,int value) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos + offset]=value;  }}  }
class C{  void cleanup(){  deleteHistoryReference();}  }
class C{  protected void createXsltDirectory(IAnalyzedInterval analyzedInterval) throws AdeException {  if (isCreateXSLDirectory()) {    File xsltDir=new File(m_periodDir,"xslt");    if (!xsltDir.exists()) {      AdeFileUtils.createDirs(xsltDir);      File inputXsltDir=Ade.getAde().getConfigProperties().getXsltDir();      for (      String resource : s_xslResources) {        File resourceOutputFile=new File(xsltDir,resource);        if (resourceOutputFile.exists()) {          continue;        }        final File xslResourceFile;        if (inputXsltDir != null) {          xslResourceFile=new File(inputXsltDir,resource);        } else {          URL xslResourceUrl=Ade.class.getResource("/xml/" + resource);          try {            xslResourceFile=new File(xslResourceUrl.toURI());          } catch (          URISyntaxException e) {            throw new AdeInternalException("could not transform URL to URI: " + xslResourceUrl,e);          }        }        AdeFileUtils.copyFile(xslResourceFile,resourceOutputFile);      }    }  }}  }
class C{  public CubicSplineInterpolator(Calendar[] dates,double[] values){  this.x=new double[dates.length];  for (int i=0; i < dates.length; i++) {    this.x[i]=Util.getTimestamp(dates[i]);  }  this.y=values;  validate();  spline();}  }
class C{  public static void multRow(Matrix A,int i,double c){  multRow(A,i,0,A.cols(),c);}  }
class C{  protected void addAreaList(OMAreaList omal,List<Object> record){  double[] coords=gatherCoords(omal,null);  if (coords != null) {    addLine(new OMPoly(coords,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_STRAIGHT),record);  }}  }
class C{  public THLParallelReadTask(int taskId,THL thl,Partitioner partitioner,AtomicCounter headSeqnoCounter,AtomicIntervalGuard<?> intervalGuard,int maxSize,int maxControlEvents,int syncInterval,EventDispatcher dispatcher){  this.taskId=taskId;  this.thl=thl;  this.partitioner=partitioner;  this.headSeqnoCounter=headSeqnoCounter;  this.intervalGuard=intervalGuard;  this.maxSize=maxSize;  this.maxControlEvents=maxControlEvents;  this.syncInterval=syncInterval;  this.dispatcher=dispatcher;}  }
class C{  public static Date truncate(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return truncate((Date)date,field);  } else   if (date instanceof Calendar) {    return truncate((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not truncate " + date);  }}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  public static boolean verifySampleSetup(Activity activity,int... resIds){  StringBuilder problems=new StringBuilder();  boolean problemFound=false;  problems.append("The following set up problems were found:\n\n");  if (activity.getPackageName().startsWith("com.google.example.games")) {    problemFound=true;    problems.append("- Package name cannot be com.google.*. You need to change the " + "sample's package name to your own package.").append("\n");  }  for (  int i : resIds) {    if (activity.getString(i).toLowerCase().contains("replaceme")) {      problemFound=true;      problems.append("- You must replace all " + "placeholder IDs in the ids.xml file by your project's IDs.").append("\n");      break;    }  }  if (problemFound) {    problems.append("\n\nThese problems may prevent the app from working properly.");    showAlert(activity,problems.toString());    return false;  }  return true;}  }
class C{  @Override public void createMetaVolume(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,List<String> metaMembers,String metaType,VirtualPoolCapabilityValuesWrapper capabilities,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws Exception {  String label=null;  label=metaHead.getLabel();  try {    CIMObjectPath elementCompositionServicePath=_cimPath.getElementCompositionSvcPath(storageSystem);    CIMInstance cimVolume=null;    CIMObjectPath volumePath=_cimPath.getBlockObjectPath(storageSystem,metaHead);    cimVolume=_helper.getInstance(storageSystem,volumePath,false,false,new String[]{EMC_IS_BOUND});    String isBoundStr=cimVolume.getPropertyValue(EMC_IS_BOUND).toString();    Boolean isBound=Boolean.parseBoolean(isBoundStr);    Boolean isLastJob=isBound;    _log.info(String.format("Create Meta Volume Start - Array: %s, Head: %s, Type: %s %n   Members:%s, isLastJob: %s",storageSystem.getSerialNumber(),metaHead.getLabel(),metaType,metaMembers,isLastJob));    CIMArgument[] inArgs;    inArgs=_helper.getCreateMetaVolumeInputArguments(storageSystem,label,metaHead,metaMembers,metaType,false);    CIMArgument[] outArgs=new CIMArgument[5];    StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,metaHead);    _log.info("Selected Provider : {}",forProvider.getNativeGuid());    SmisJob smisJobCompleter=new SmisCreateMetaVolumeJob(null,forProvider.getId(),storagePool.getId(),metaHead,metaVolumeTaskCompleter,isLastJob);    _helper.invokeMethodSynchronously(forProvider,elementCompositionServicePath,SmisConstants.CREATE_OR_MODIFY_COMPOSITE_ELEMENT,inArgs,outArgs,smisJobCompleter);    if (metaVolumeTaskCompleter.getLastStepStatus() == Job.JobStatus.SUCCESS) {      if (!isBound) {        bindMetaVolumeToPool(storageSystem,storagePool,metaHead,metaVolumeTaskCompleter,true);      }    }  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  }catch (  Exception e) {    _log.error("Problem in createMetaVolume: ",e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createMetaVolume",e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  }  _log.info(String.format("Create Meta Volume End - Array:%s, Head:%s, %n  Head device ID: %s, Members:%s",storageSystem.getSerialNumber(),metaHead.getLabel(),metaHead.getNativeId(),metaMembers));}  }
class C{  protected int bytesPerLine(){  return (45);}  }
class C{  void moveViewTo(ItemPanel other){  other.setEntityView(view);  setEntityView(null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TexenTestCase(){  super("TexenTestCase");}  }
class C{  public void write(byte[] out){  ConnectedThread r;synchronized (this) {    if (mState != STATE_CONNECTED)     return;    r=mConnectedThread;  }  r.write(out);}  }
class C{  public void stop(){  clearCache();  if (worker == null && conn == null) {    return;  }  if (looper != null) {    looper.quit();  }  if (worker != null) {    worker.interrupt();    try {      worker.join();    } catch (    InterruptedException e) {      Log.i(TAG,"worker: join thread failed.");      e.printStackTrace();      worker.stop();    }    worker=null;  }  if (bos != null) {    try {      bos.close();    } catch (    IOException e) {      Log.i(TAG,"worker: close bos failed.");      e.printStackTrace();    }    bos=null;  }  if (conn != null) {    conn.disconnect();    conn=null;  }  Log.i(TAG,String.format("worker: muxer closed, url=%s",url));}  }
class C{  private void validateParam(ScheduleInfo scheduleInfo){  DateFormat formatter=new SimpleDateFormat(ScheduleInfo.FULL_DAY_FORMAT);  ;  Date date=null;  try {    date=formatter.parse(scheduleInfo.getStartDate());  } catch (  Exception e) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.START_DATE);  }  if (scheduleInfo.getHourOfDay() < 0 || scheduleInfo.getHourOfDay() > 23) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.HOUR_OF_DAY);  }  if (scheduleInfo.getMinuteOfHour() < 0 || scheduleInfo.getMinuteOfHour() > 59) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.MINUTE_OF_HOUR);  }  Calendar currTime, endTime;  currTime=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  if (scheduleInfo.getReoccurrence() < 0) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.REOCCURRENCE);  } else   if (scheduleInfo.getReoccurrence() == 1) {    try {      Calendar startTime=ScheduleTimeHelper.getScheduledStartTime(scheduleInfo);      if (startTime == null || currTime.after(startTime)) {        throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.START_DATE);      }    } catch (    Exception e) {      throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.START_DATE);    }    return;  } else   if (scheduleInfo.getReoccurrence() > ScheduleInfo.MAX_REOCCURRENCE) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.REOCCURRENCE);  }  if (scheduleInfo.getCycleFrequency() < 1 || scheduleInfo.getCycleFrequency() > ScheduleInfo.MAX_CYCLE_FREQUENCE) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.CYCLE_FREQUENCE);  }  try {    endTime=ScheduleTimeHelper.getScheduledEndTime(scheduleInfo);    if (endTime != null && currTime.after(endTime)) {      throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.END_DATE);    }  } catch (  Exception e) {    throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.END_DATE);  }switch (scheduleInfo.getCycleType()) {case MONTHLY:    if (scheduleInfo.getSectionsInCycle() == null || scheduleInfo.getSectionsInCycle().size() != 1) {      throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.SECTIONS_IN_CYCLE);    }  int day=Integer.valueOf(scheduleInfo.getSectionsInCycle().get(0));if (day < 1 || day > 31) {  throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.SECTIONS_IN_CYCLE);}break;case WEEKLY:if (scheduleInfo.getSectionsInCycle() == null || scheduleInfo.getSectionsInCycle().size() != 1) {throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.SECTIONS_IN_CYCLE);}int dayOfWeek=Integer.valueOf(scheduleInfo.getSectionsInCycle().get(0));if (dayOfWeek < 1 || dayOfWeek > 7) {throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.SECTIONS_IN_CYCLE);}break;case DAILY:case HOURLY:case MINUTELY:if (scheduleInfo.getSectionsInCycle() != null && !scheduleInfo.getSectionsInCycle().isEmpty()) {throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.SECTIONS_IN_CYCLE);}break;default :throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.CYCLE_TYPE);}if (scheduleInfo.getDateExceptions() != null) {for (String dateException : scheduleInfo.getDateExceptions()) {try {date=formatter.parse(dateException);} catch (Exception e) {throw APIException.badRequests.schduleInfoInvalid(ScheduleInfo.DATE_EXCEPTIONS);}}}return;}  }
class C{  public CustomizedDistributedRowLock<K> withDataColumns(boolean flag){  this.readDataColumns=flag;  return this;}  }
class C{  public int size(){  return nvPairs.size() >> 1;}  }
class C{  protected void fillCorrelation() throws Exception {  int i;  int j;  int k;  double[] att1;  double[] att2;  double corr;  m_Correlation=new double[m_NumAttribs][m_NumAttribs];  att1=new double[m_NumInstances];  att2=new double[m_NumInstances];  for (i=0; i < m_NumAttribs; i++) {    for (j=0; j < m_NumAttribs; j++) {      for (k=0; k < m_NumInstances; k++) {        att1[k]=m_TrainInstances.instance(k).value(i);        att2[k]=m_TrainInstances.instance(k).value(j);      }      if (i == j) {        m_Correlation[i][j]=1.0;      } else {        corr=Utils.correlation(att1,att2,m_NumInstances);        m_Correlation[i][j]=corr;        m_Correlation[j][i]=corr;      }    }  }  m_standardizeFilter=new Standardize();  m_standardizeFilter.setInputFormat(m_TrainInstances);  m_TrainInstances=Filter.useFilter(m_TrainInstances,m_standardizeFilter);}  }
class C{  public boolean isFastRewind(){  return fastRewind;}  }
class C{  protected void additionalContext(VelocityContext context,String env){}  }
class C{  public AccessibleRelation(String key,Object target){  this.key=key;  this.target=new Object[1];  this.target[0]=target;}  }
class C{  public Partition(int partition){  this.partition=partition;}  }
class C{  boolean expandGroup(int groupPos){  ExpandableHListPosition elGroupPos=ExpandableHListPosition.obtain(ExpandableHListPosition.GROUP,groupPos,-1,-1);  PositionMetadata pm=getFlattenedPos(elGroupPos);  elGroupPos.recycle();  boolean retValue=expandGroup(pm);  pm.recycle();  return retValue;}  }
class C{  @ConfigAttributeChecker(name=SSL_ENABLED_COMPONENTS) protected SecurableCommunicationChannel[] checkLegacySSLWhenSSLEnabledComponentsSet(SecurableCommunicationChannel[] value){  for (  SecurableCommunicationChannel component : value) {switch (component) {case ALL:case CLUSTER:case SERVER:case GATEWAY:case JMX:case WEB:case LOCATOR:      continue;default :    throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_0_INVALID_TRY_1.toLocalizedString(new Object[]{value,StringUtils.join(new String[]{SecurableCommunicationChannel.ALL.getConstant(),SecurableCommunicationChannel.CLUSTER.getConstant(),SecurableCommunicationChannel.SERVER.getConstant(),SecurableCommunicationChannel.GATEWAY.getConstant(),SecurableCommunicationChannel.JMX.getConstant(),SecurableCommunicationChannel.WEB.getConstant(),SecurableCommunicationChannel.LOCATOR.getConstant()},",")}));}}if (value.length > 0) {if (getClusterSSLEnabled() || getJmxManagerSSLEnabled() || getHttpServiceSSLEnabled()|| getServerSSLEnabled()|| getGatewaySSLEnabled()) {  throw new IllegalArgumentException(LocalizedStrings.AbstractDistributionConfig_SSL_ENABLED_COMPONENTS_SET_INVALID_DEPRECATED_SSL_SET.toLocalizedString());}}return value;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == m_StartBut) {    if (m_RunThread == null) {      boolean proceed=true;      if (Experimenter.m_Memory.memoryIsLow()) {        proceed=Experimenter.m_Memory.showMemoryIsLow();      }      if (proceed) {        try {          m_RunThread=new ExperimentRunner(m_Exp);          m_RunThread.setPriority(Thread.MIN_PRIORITY);          m_RunThread.start();        } catch (        Exception ex) {          ex.printStackTrace();          logMessage("Problem creating experiment copy to run: " + ex.getMessage());        }      }    }  } else   if (e.getSource() == m_StopBut) {    m_StopBut.setEnabled(false);    logMessage("User aborting experiment. ");    if (m_Exp instanceof RemoteExperiment) {      logMessage("Waiting for remote tasks to " + "complete...");    }    ((ExperimentRunner)m_RunThread).abortExperiment();    m_RunThread=null;  }}  }
class C{  public SVGVKernElementBridge(){}  }
class C{  public static int breakText(final IFont pFont,final CharSequence pText,final MeasureDirection pMeasureDirection,final float pWidthMaximum,final float[] pMeasuredWidth){  throw new MethodNotYetImplementedException();}  }
class C{  public static float max(float a,float b){  return a > b ? a : b;}  }
class C{  public Expression inline(Environment env,Context ctx){  return null;}  }
class C{  public String evaluate(XPathContext xctxt,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  if (null != m_simpleString) {    return m_simpleString;  } else   if (null != m_parts) {    final FastStringBuffer buf=getBuffer();    String out=null;    int n=m_parts.size();    try {      for (int i=0; i < n; i++) {        AVTPart part=(AVTPart)m_parts.elementAt(i);        part.evaluate(xctxt,buf,context,nsNode);      }      out=buf.toString();    }  finally {      if (USE_OBJECT_POOL) {        StringBufferPool.free(buf);      } else {        buf.setLength(0);      }    }    return out;  } else {    return "";  }}  }
class C{  public UserGroupHistory(UserGroup c){  super(c);  if (c.getOrganization() != null) {    setOrganizationObjKey(Long.valueOf(c.getOrganization().getKey()));  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  BluetoothPan(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  try {    mAdapter.getBluetoothManager().registerStateChangeCallback(mStateChangeCallback);  } catch (  RemoteException re) {    Log.w(TAG,"Unable to register BluetoothStateChangeCallback",re);  }  Log.d(TAG,"BluetoothPan() call bindService");  if (!context.bindService(new Intent(IBluetoothPan.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth HID Service");  }  Log.d(TAG,"BluetoothPan(), bindService called");}  }
class C{  public JBIG2Exception(){  super();}  }
class C{  @IgniteIgnore("https://issues.apache.org/jira/browse/IGNITE-845") public void testAmazonWebServices() throws Exception {  testCloudProvider("aws-ec2");}  }
class C{  public TStructuralType basicGetStructuralType(){  return structuralType;}  }
class C{  public static String timeStamp2Date(long timestamp){  return timeStamp2Date(timestamp,"yyyy-MM-dd HH:mm:ss",false);}  }
class C{  public String toHumanString(){switch (this) {case BEST_CASE:    return "best case";case WORST_CASE:  return "worst case";case POINT_ESTIMATE:return "point estimate";case SPREAD:return "spread";case AVERAGE:return "average";default :throw new IllegalStateException("Unknown envelope parameter");}}  }
class C{  public void requestDraw(){}  }
class C{  public static Validator<String> allowedChars(char... chars){  return allowedChars(chars,null);}  }
class C{  public void deleteGroupFileTransfers2(String chatId) throws RemoteException {  if (TextUtils.isEmpty(chatId)) {    throw new ServerApiIllegalArgumentException("chatId must not be null or empty!");  }  mImService.tryToDeleteGroupChat(chatId);}  }
class C{  private void upgradeTypesToStrings(SettingsManager settingsManager){  SharedPreferences defaultPreferences=settingsManager.getDefaultPreferences();  SharedPreferences oldGlobalPreferences=settingsManager.openPreferences(OLD_GLOBAL_PREFERENCES_FILENAME);  if (defaultPreferences.contains(Keys.KEY_RECORD_LOCATION)) {    boolean location=removeBoolean(defaultPreferences,Keys.KEY_RECORD_LOCATION);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_RECORD_LOCATION,location);  }  if (defaultPreferences.contains(Keys.KEY_USER_SELECTED_ASPECT_RATIO)) {    boolean userSelectedAspectRatio=removeBoolean(defaultPreferences,Keys.KEY_USER_SELECTED_ASPECT_RATIO);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_USER_SELECTED_ASPECT_RATIO,userSelectedAspectRatio);  }  if (defaultPreferences.contains(Keys.KEY_EXPOSURE_COMPENSATION_ENABLED)) {    boolean manualExposureCompensationEnabled=removeBoolean(defaultPreferences,Keys.KEY_EXPOSURE_COMPENSATION_ENABLED);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_EXPOSURE_COMPENSATION_ENABLED,manualExposureCompensationEnabled);  }  if (defaultPreferences.contains(Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN)) {    boolean hint=removeBoolean(defaultPreferences,Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_FIRST_USE_HINT_SHOWN,hint);  }  if (defaultPreferences.contains(Keys.KEY_STARTUP_MODULE_INDEX)) {    int startupModuleIndex=removeInteger(defaultPreferences,Keys.KEY_STARTUP_MODULE_INDEX);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_STARTUP_MODULE_INDEX,startupModuleIndex);  }  if (defaultPreferences.contains(Keys.KEY_CAMERA_MODULE_LAST_USED)) {    int lastCameraUsedModuleIndex=removeInteger(defaultPreferences,Keys.KEY_CAMERA_MODULE_LAST_USED);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_MODULE_LAST_USED,lastCameraUsedModuleIndex);  }  if (oldGlobalPreferences.contains(Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA)) {    boolean flashSupportedBackCamera=removeBoolean(oldGlobalPreferences,Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA);    if (flashSupportedBackCamera) {      settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_FLASH_SUPPORTED_BACK_CAMERA,flashSupportedBackCamera);    }  }  if (defaultPreferences.contains(Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING)) {    boolean shouldShowRefocusViewer=removeBoolean(defaultPreferences,Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_SHOULD_SHOW_REFOCUS_VIEWER_CLING,shouldShowRefocusViewer);  }  if (defaultPreferences.contains(Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING)) {    boolean shouldShowSettingsButtonCling=removeBoolean(defaultPreferences,Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING);    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_SHOULD_SHOW_SETTINGS_BUTTON_CLING,shouldShowSettingsButtonCling);  }  if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_HDR_PLUS)) {    String hdrPlus=removeString(oldGlobalPreferences,Keys.KEY_CAMERA_HDR_PLUS);    if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {      settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR_PLUS,true);    }  }  if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_HDR)) {    String hdrPlus=removeString(oldGlobalPreferences,Keys.KEY_CAMERA_HDR);    if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {      settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_HDR,true);    }  }  if (oldGlobalPreferences.contains(Keys.KEY_CAMERA_GRID_LINES)) {    String hdrPlus=removeString(oldGlobalPreferences,Keys.KEY_CAMERA_GRID_LINES);    if (OLD_SETTINGS_VALUE_ON.equals(hdrPlus)) {      settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_CAMERA_GRID_LINES,true);    }  }}  }
class C{  protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {  Attributes mainAttributes=manifest.getMainAttributes();  String dirName=packageName.replace('.','/') + "/";  Attributes packageAttributes=manifest.getAttributes(dirName);  boolean noEntry=false;  if (packageAttributes == null) {    noEntry=true;    packageAttributes=mainAttributes;  }  String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  if (specificationTitle == null && !noEntry) {    specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  }  String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  if (specificationVersion == null && !noEntry) {    specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  }  String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  if (specificationVendor == null && !noEntry) {    specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  }  String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  if (implementationTitle == null && !noEntry) {    implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  }  String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  if (implementationVersion == null && !noEntry) {    implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  }  String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  if (implementationVendor == null && !noEntry) {    implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  }  return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null);}  }
class C{  public void addService(Service service){  mServices.add(service);}  }
class C{  private static String buildUserAgent(){  final List<String> details=new ArrayList<String>();  for (  String propertyName : properties) {    details.add(propertyName + "=" + System.getProperty(propertyName));  }  return "watson-apis-java-sdk/" + loadSdkVersion() + " ("+ RequestUtils.join(details,"; ")+ ")";}  }
class C{  public static void lockCurrentOrientation(Activity act){  int currentRotation=act.getWindowManager().getDefaultDisplay().getRotation();  int frozenRotation=0;  int orientation=act.getResources().getConfiguration().orientation;switch (currentRotation) {case Surface.ROTATION_0:    frozenRotation=orientation == Configuration.ORIENTATION_LANDSCAPE ? ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE : ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;  break;case Surface.ROTATION_90:frozenRotation=orientation == Configuration.ORIENTATION_PORTRAIT ? ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;break;case Surface.ROTATION_180:frozenRotation=orientation == Configuration.ORIENTATION_LANDSCAPE ? ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE : ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;break;case Surface.ROTATION_270:frozenRotation=orientation == Configuration.ORIENTATION_PORTRAIT ? ActivityInfo.SCREEN_ORIENTATION_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;break;}act.setRequestedOrientation(frozenRotation);}  }
class C{  public boolean isNatural(Dimension dimension){  String prefix="dyn_" + dimension.getId().getParent().toUUID() + "_dimension:";  String id=digest(prefix + dimension.getExpression().getValue());  return id.equals(dimension.getId().getDimensionId());}  }
class C{  public DSAParameterSpec(BigInteger p,BigInteger q,BigInteger g){  this.p=p;  this.q=q;  this.g=g;}  }
class C{  public static byte[] toByteArray(final int[] input){  byte[] result=new byte[input.length << 2];  for (int i=0; i < input.length; i++) {    I2OSP(input[i],result,i << 2);  }  return result;}  }
class C{  public ElementPosition_ createElementPosition_(){  ElementPosition_Impl elementPosition_=new ElementPosition_Impl();  return elementPosition_;}  }
class C{  public Kernel add(Kernel k){  int min=getMinIndex();  int max=getMaxIndex();  if (size() > k.size()) {    min=k.getMinIndex();    max=k.getMaxIndex();  }  for (int i=min; i <= max; i++) {    set(i,get(i) + k.get(i));  }  return this;}  }
class C{  public long contentLength(){  long size;  try {    size=Long.parseLong(request.getHeader(FileUpload.CONTENT_LENGTH));  } catch (  NumberFormatException e) {    size=request.getContentLength();  }  return size;}  }
class C{  private void cmd_zoomAcross(){  int record_ID=m_curTab.getRecord_ID();  log.info("ID=" + record_ID);  if (record_ID <= 0)   return;  MQuery query=new MQuery();  String link=m_curTab.getKeyColumnName();  if (link.length() == 0)   link=m_curTab.getLinkColumnName();  if (link.length() != 0) {    if (link.endsWith("_ID"))     query.addRestriction(link,MQuery.EQUAL,new Integer(Env.getContextAsInt(m_ctx,m_curWindowNo,link))); else     query.addRestriction(link,MQuery.EQUAL,Env.getContext(m_ctx,m_curWindowNo,link));  }  new AZoomAcross(aZoomAcross.getButton(),m_curTab.getTableName(),m_curTab.getAD_Window_ID(),query);}  }
class C{  private void checkAddable(String name){  if (name2entry.containsKey(name)) {    throw new IllegalArgumentException("Other filter is using the same name '" + name + "'");  }}  }
class C{  public BlazeGraphEdit(final Action action,final BlazeGraphAtom atom,final long timestamp){  this.action=action;  this.atom=atom;  this.timestamp=timestamp;}  }
class C{  @Deprecated public static void updatePerlLibsForModel(ModifiableRootModel model){}  }
class C{  public LineFigure(){  addNode(new BezierPath.Node(new Point2D.Double(0,0)));  addNode(new BezierPath.Node(new Point2D.Double(0,0)));  setConnectable(false);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___IS_ABSTRACT:      return TypesPackage.FIELD_ACCESSOR___IS_ABSTRACT;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public int eval(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  if (tp.s[0] > target[0])   return Integer.MAX_VALUE;  if (tp.s[1] > target[1])   return Integer.MAX_VALUE;  return Math.abs(target[0] - tp.s[0]) + Math.abs(target[1] - tp.s[1]);}  }
class C{  public static void main(final String[] args){  handleCommandLineArgs(args);  System.out.println("Select the map");  final FileOpen mapSelection=new FileOpen("Select The Map",s_mapFolderLocation,".gif",".png");  final String mapName=mapSelection.getPathString();  if (s_mapFolderLocation == null && mapSelection.getFile() != null) {    s_mapFolderLocation=mapSelection.getFile().getParentFile();  }  if (mapName != null) {    System.out.println("Map : " + mapName);    final CenterPicker picker=new CenterPicker(mapName);    picker.setSize(800,600);    picker.setLocationRelativeTo(null);    picker.setVisible(true);    JOptionPane.showMessageDialog(picker,new JLabel("<html>" + "This is the CenterPicker, it will create a centers.txt file for you. " + "<br>Please click on the center of every single territory and sea zone on your map, and give each a name. "+ "<br>The point you clicked on will tell TripleA where to put things like any flags, text, unit placements, etc, "+ "<br>so be sure to click in the exact middle, or slight up and left of the middle, of each territory "+ "<br>(but still within the territory borders)."+ "<br>Do not use special or illegal characters in territory names."+ "<br><br>You can also load an existing centers.txt file, then make modifications to it, then save it again."+ "<br><br>LEFT CLICK = create a new center point for a territory/zone."+ "<br><br>RIGHT CLICK on an existing center = delete that center point."+ "<br><br>When finished, save the centers and exit."+ "</html>"));  } else {    System.out.println("No Image Map Selected. Shutting down.");    System.exit(0);  }}  }
class C{  private boolean isLegalChar(char c){  if (Character.isLetter(c))   return Character.isUpperCase(c);  return true;}  }
class C{  public ResourceMetadata(){}  }
class C{  protected boolean isDisplayShowTitleEnabled(){  return true;}  }
class C{  public static Sampler WRAP_LINEAR(RenderScript rs){  if (rs.mSampler_WRAP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_LINEAR=b.create();  }  return rs.mSampler_WRAP_LINEAR;}  }
class C{  public IgniteIllegalStateException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  @Override public void add(CharSequence key,CharSequence cmd){  if (cmd.length() == 0) {    return;  }  int levels=cmd.length() / BY;  while (levels >= tries.size()) {    tries.add(new Trie(forward));  }  for (int i=0; i < levels; i++) {    tries.get(i).add(key,cmd.subSequence(BY * i,BY * i + BY));  }  tries.get(levels).add(key,EOM_NODE);}  }
class C{  public CCreateProjectAction(final JFrame parent,final IDatabase database,final INodeSelectionUpdater updater){  super("Create Project");  m_parent=Preconditions.checkNotNull(parent,"IE01865: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01866: Database argument can't be null");  m_updater=Preconditions.checkNotNull(updater,"IE02865: updater argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.CREATE_PROJECT_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_CREATE_PROJECT".charAt(0));}  }
class C{  public static void main(String[] args) throws InterruptedException {  SpeechToText service=new SpeechToText();  service.setUsernameAndPassword("0c8dafce-3cf2-46d8-9116-408e35a35fe2","MaiEL4fS1zlJ");  Customization myCustomization=service.createCustomization("IEEE-permanent",SpeechModel.EN_US_BROADBANDMODEL,"My customization").execute();  String id=myCustomization.getId();  try {    service.addTextToCustomizationCorpus(id,"corpus-1",false,new File(CORPUS_FILE)).execute();    List<Corpus> corpora=service.getCorpora(id).execute();    Corpus corpus=corpora.get(0);    for (int x=0; x < 30 && corpus.getStatus() != Status.ANALYZED; x++) {      corpus=service.getCorpora(id).execute().get(0);      Thread.sleep(5000);    }    service.addWord(id,new Word("IEEE","IEEE","I. triple E.")).execute();    service.addWord(id,new Word("hhonors","IEEE","H. honors","Hilton honors")).execute();    List<WordData> result=service.getWords(id,Word.Type.ALL).execute();    for (    WordData word : result) {      System.out.println(word);    }    service.trainCustomization(id,Customization.WordTypeToAdd.ALL).execute();    for (int x=0; x < 30 && myCustomization.getStatus() != Customization.Status.AVAILABLE; x++) {      myCustomization=service.getCustomization(id).execute();      Thread.sleep(10000);    }    File audio=new File(AUDIO_FILE);    RecognizeOptions options=new RecognizeOptions.Builder().continuous(true).model(SpeechModel.EN_US_BROADBANDMODEL.getName()).customizationId(id).build();    SpeechResults transcript=service.recognize(audio).execute();    System.out.println(transcript);    transcript=service.recognize(audio,options).execute();    System.out.println(transcript);  }  finally {    service.deleteCustomization(id);  }}  }
class C{  private void initDataArrays(){  int size=(int)(super.getWidth() * super.getHeight());  tilesetRef=new int[size];  data=new int[size];  for (int i=0; i < size; i++) {    tilesetRef[i]=0;    data[i]=-1;  }}  }
class C{  public static <S extends HasDragRepositionStopHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragRepositionStopEvent event=new DragRepositionStopEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public BinaryTable(){  try {    this.table=createColumnTable(new Object[0],new int[0]);  } catch (  TableException e) {    throw new IllegalStateException("Impossible exception in BinaryTable() constructor",e);  }  this.heap=new FitsHeap(0);  saveExtraState();  this.nRow=0;  this.rowLen=0;}  }
class C{  public pre(Element element,String width){  setWidth(width);  addElement(element);}  }
class C{  public static String clearNetworkPorts(){  String out="Kill socat processes: " + RIOdroid.executeCommand("killall socat") + "\n CLEAR NETWORK PORTS"+ RIOdroid.executeCommand("/etc/init.d/networking restart")+ "ADB CLEAR: "+ RIOdroid.executeCommand("adb forward --remove-all");  return out;}  }
class C{  private boolean addFriend(String friend){  Set<String> friends=store.getSet(FRIENDS_STORE_KEY);  if (friends == null) {    friends=new HashSet<String>();  }  if (friends.contains(friend)) {    return false;  }  friends.add(friend);  store.putSet(FRIENDS_STORE_KEY,friends);  return true;}  }
class C{  public void stop(){synchronized (refreshLock) {    refreshInBackground=false;  }}  }
class C{  public void test_toLocaleString(){  Locale loc=Locale.getDefault();  Locale.setDefault(Locale.US);  TimeZone tz=TimeZone.getDefault();  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));  try {    assertEquals("Did not convert epoch to GMT string correctly","Jan 1, 1970 12:00:00 AM",new Date(0).toLocaleString());    assertEquals("Did not convert epoch + 1yr to GMT string correctly","Jan 1, 1971 12:00:00 AM",new Date((long)365 * 24 * 60* 60* 1000).toLocaleString());  }  finally {    Locale.setDefault(loc);    TimeZone.setDefault(tz);  }}  }
class C{  public static boolean canWriteSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.canWrite();}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    CandleItem prevCandleItem=null;    if (getCurrentCandleCount() > 0) {      prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);    }    if (this.isThereOpenPosition()) {      _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      if (OrderStatus.PARTIALFILLED.equals(this.getOpenPositionOrder().getStatus())) {        if (isRiskViolated(currentCandleItem.getClose(),this.getTradestrategy().getRiskAmount(),this.getOpenPositionOrder().getQuantity(),this.getOpenPositionOrder().getAverageFilledPrice())) {          this.cancelOrder(this.getOpenPositionOrder());        }      }      this.cancel();      return;    }    if (null != openPositionOrderKey && !this.getTradeOrder(openPositionOrderKey).isActive()) {      _log.info("Strategy complete open position cancelled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      updateTradestrategyStatus(TradestrategyStatus.CANCELLED);      this.cancel();      return;    }    CandleItem openCandle=this.getCandle(this.getTradestrategy().getTradingday().getOpen());    if (null == getTradestrategy().getSide()) {      error(1,101,"Error  tradestrategy side has not been set.");    }    if (!this.isThereOpenPosition()) {      if (Side.BOT.equals(getTradestrategy().getSide())) {        if (openCandle.getLow() > prevCandleItem.getLow()) {          _log.info("Rule 5min low broken. Symbol: " + getSymbol() + " Time: "+ startPeriod);          this.cancelAllOrders();          updateTradestrategyStatus(TradestrategyStatus.FIVE_MIN_LOW_BROKEN);          this.cancel();          return;        }      } else {        if (openCandle.getHigh() < prevCandleItem.getHigh()) {          _log.info("Rule 5min high broken. Symbol: " + getSymbol() + " Time: "+ startPeriod);          this.cancelAllOrders();          updateTradestrategyStatus(TradestrategyStatus.FIVE_MIN_HIGH_BROKEN);          this.cancel();          return;        }      }    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(this.getTradestrategy().getBarSize() / 60)) && newBar) {      Money price=new Money(prevCandleItem.getHigh());      Money priceStop=new Money(prevCandleItem.getLow());      String action=Action.BUY;      if (Side.SLD.equals(getTradestrategy().getSide())) {        price=new Money(prevCandleItem.getLow());        priceStop=new Money(prevCandleItem.getHigh());        action=Action.SELL;      }      if (prevCandleItem.isSide(getTradestrategy().getSide())) {        Money priceClose=new Money(prevCandleItem.getClose());        Entrylimit entrylimit=getEntryLimit().getValue(priceClose);        double percentChange=Math.abs(prevCandleItem.getHigh() - prevCandleItem.getLow()) / prevCandleItem.getClose();        if (percentChange < entrylimit.getPercentOfPrice().doubleValue()) {          _log.info(" We have a trade!!  Symbol: " + getSymbol() + " Time: "+ startPeriod);          TradeOrder tradeOrder=createRiskOpenPosition(action,price,priceStop,true,null,null,null,null);          openPositionOrderKey=tradeOrder.getOrderKey();        } else {          _log.info("Rule 9:35 5min bar outside % limits. Symbol: " + getSymbol() + " Time: "+ startPeriod);          updateTradestrategyStatus(TradestrategyStatus.PERCENT);          this.cancel();        }      } else {        _log.info("Rule 5 min Red/Green bar opposite to trade direction. Symbol: " + getSymbol() + " Time: "+ startPeriod);        if (Side.SLD.equals(getTradestrategy().getSide())) {          this.updateTradestrategyStatus(TradestrategyStatus.GB);        } else {          this.updateTradestrategyStatus(TradestrategyStatus.RB);        }        this.cancel();      }    } else     if (!startPeriod.isBefore(this.getTradestrategy().getTradingday().getOpen().plusMinutes(60))) {      if (!this.isThereOpenPosition() && !TradestrategyStatus.CANCELLED.equals(getTradestrategy().getStatus())) {        this.updateTradestrategyStatus(TradestrategyStatus.TO);        this.cancelAllOrders();        _log.info("Rule 10:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      }      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,20,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  public int waitUntilDataAvailable(long timeout) throws IOException {  if (timeout < 0)   throw new IllegalArgumentException("timeout must not be negative!");  int conditions=cm.waitForCondition(cn,timeout,ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA | ChannelCondition.EOF);  if ((conditions & ChannelCondition.TIMEOUT) != 0)   return -1;  if ((conditions & (ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA)) != 0)   return 1;  if ((conditions & ChannelCondition.EOF) != 0)   return 0;  throw new IllegalStateException("Unexpected condition result (" + conditions + ")");}  }
class C{  public static <T>T string2Obj(String str,org.codehaus.jackson.type.TypeReference<T> typeReference){  if (str == null || typeReference == null) {    return null;  }  try {    return (T)(typeReference.getType().equals(String.class) ? str : objectMapper.readValue(str,typeReference));  } catch (  Exception e) {    log.info("parse String to Object error, String:{}, TypeReference<T>:{}, error:{}",str,typeReference.getType(),e);    return null;  }}  }
class C{  public double calcChiSquare(Tetrad... tetrads){  this.df=tetrads.length;  Set<Sigma> boldSigmaSet=new LinkedHashSet<>();  List<Sigma> boldSigma=new ArrayList<>();  for (  Tetrad tetrad : tetrads) {    boldSigmaSet.add(new Sigma(tetrad.getI(),tetrad.getK()));    boldSigmaSet.add(new Sigma(tetrad.getI(),tetrad.getL()));    boldSigmaSet.add(new Sigma(tetrad.getJ(),tetrad.getK()));    boldSigmaSet.add(new Sigma(tetrad.getJ(),tetrad.getL()));  }  for (  Sigma sigma : boldSigmaSet) {    boldSigma.add(sigma);  }  TetradMatrix sigma_ss=new TetradMatrix(boldSigma.size(),boldSigma.size());  for (int i=0; i < boldSigma.size(); i++) {    for (int j=0; j < boldSigma.size(); j++) {      Sigma sigmaef=boldSigma.get(i);      Sigma sigmagh=boldSigma.get(j);      Node e=sigmaef.getA();      Node f=sigmaef.getB();      Node g=sigmagh.getA();      Node h=sigmagh.getB();      if (cov != null && cov instanceof CorrelationMatrix) {        double rr=0.5 * (sxy(e,f) * sxy(g,h)) * (sxy(e,g) * sxy(e,g) + sxy(e,h) * sxy(e,h) + sxy(f,g) * sxy(f,g) + sxy(f,h) * sxy(f,h)) + sxy(e,g) * sxy(f,h) + sxy(e,h) * sxy(f,g) - sxy(e,f) * (sxy(f,g) * sxy(f,h) + sxy(e,g) * sxy(e,h)) - sxy(g,h) * (sxy(f,g) * sxy(e,g) + sxy(f,h) * sxy(e,h));        sigma_ss.set(i,j,rr);      } else       if (cov != null && dataSet == null) {        double _ss=sxy(e,g) * sxy(f,h) - sxy(e,h) * sxy(f,g);        sigma_ss.set(i,j,_ss);      } else {        double _ss=sxyzw(e,f,g,h) - sxy(e,f) * sxy(g,h);        sigma_ss.set(i,j,_ss);      }    }  }  TetradMatrix del=new TetradMatrix(boldSigma.size(),tetrads.length);  for (int i=0; i < boldSigma.size(); i++) {    for (int j=0; j < tetrads.length; j++) {      Sigma sigma=boldSigma.get(i);      Tetrad tetrad=tetrads[j];      Node e=tetrad.getI();      Node f=tetrad.getJ();      Node g=tetrad.getK();      Node h=tetrad.getL();      double derivative=getDerivative(e,f,g,h,sigma.getA(),sigma.getB());      del.set(i,j,derivative);    }  }  TetradMatrix t=new TetradMatrix(tetrads.length,1);  for (int i=0; i < tetrads.length; i++) {    Tetrad tetrad=tetrads[i];    Node e=tetrad.getI();    Node f=tetrad.getJ();    Node g=tetrad.getK();    Node h=tetrad.getL();    double d1=sxy(e,f);    double d2=sxy(g,h);    double d3=sxy(e,g);    double d4=sxy(f,h);    double value=d1 * d2 - d3 * d4;    t.set(i,0,value);  }  TetradMatrix w1=del.transpose().times(sigma_ss);  TetradMatrix sigma_tt=w1.times(del);  TetradMatrix v0=sigma_tt.inverse();  TetradMatrix v1=t.transpose().times(v0);  TetradMatrix v2=v1.times(t);  double chisq=N * v2.get(0,0);  this.chisq=chisq;  return chisq;}  }
class C{  public void testGetNameFromDeployableNotSupportedList() throws Exception {  SAR sar=createSAR();  testGetNameFromDeployableNotSupportedFor(sar);  File file=createFile();  testGetNameFromDeployableNotSupportedFor(file);}  }
class C{  protected void computeRoundCorner(Globe globe,List<Position> positions,Vec4 ptLeg1,Vec4 ptVertex,Vec4 ptLeg2,double distance,int intervals){  Vec4 vertexTo1=ptLeg1.subtract3(ptVertex);  Vec4 vertexTo2=ptLeg2.subtract3(ptVertex);  Angle theta=vertexTo1.angleBetween3(vertexTo2);  if (Angle.ZERO.equals(theta))   return;  double radius=distance * theta.tanHalfAngle();  Vec4 ptA=ptVertex.add3(vertexTo1.normalize3().multiply3(distance));  Vec4 ptB=ptVertex.add3(vertexTo2.normalize3().multiply3(distance));  Vec4 normal=globe.computeSurfaceNormalAtPoint(ptA);  Vec4 perpendicular=normal.cross3(vertexTo1);  Vec4 offset=perpendicular.normalize3().multiply3(radius);  double tripleProduct=perpendicular.dot3(vertexTo2);  if (tripleProduct < 0) {    offset=offset.multiply3(-1);  }  Vec4 ptArcCenter=ptA.add3(offset);  Position arcCenter=globe.computePositionFromPoint(ptArcCenter);  Position posA=globe.computePositionFromPoint(ptA);  Position posB=globe.computePositionFromPoint(ptB);  this.computeArc(globe,positions,arcCenter,LatLon.greatCircleAzimuth(arcCenter,posA),LatLon.greatCircleAzimuth(arcCenter,posB),radius,intervals);}  }
class C{  private static Path createTempFile() throws IOException {  return Files.createTempFile(BodyTest.class.getName(),"tmp");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.PARAMETERS__PARAMS:    return getParams();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isDirectory(){  if (permissions == null)   return false;  return ((permissions.intValue() & 0040000) != 0);}  }
class C{  protected static void main(String args[]){  int size=Integer.parseInt(args[0]);  demo2(size);}  }
class C{  public static NumericRange parse(String textToParse) throws ServiceResultException {  if (textToParse == null || textToParse.length() == 0) {    return NumericRange.getEmpty();  }  NumericRange range=new NumericRange();  String[] dims=textToParse.split(",");  range.setDimensions(dims.length);  for (int d=0; d < dims.length; d++)   try {    String dimStr=dims[d];    String[] indexes=dimStr.split(":");    if (indexes.length > 1) {      range.setBegin(d,Integer.parseInt(indexes[0]));      range.setEnd(d,Integer.parseInt(indexes[1]));      if (range.getBegin(d) == range.getEnd(d))       throw new IllegalArgumentException("Begin = End");    } else {      range.setBegin(d,Integer.parseInt(indexes[0]));    }  } catch (  Exception e) {    throw new ServiceResultException(StatusCodes.Bad_IndexRangeInvalid,e,"Cannot parse numeric range: " + textToParse + ".");  }  return range;}  }
class C{  public static float[] parseString(String[] values){  float[] result=new float[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public static void addClassFactory(Utils.ClassFactory classFactory){  getUserClassFactories().add(classFactory);}  }
class C{  @LargeTest public void testLengths() throws Exception {  final String ONE_TWO="one two";  final String EMPTY="";  final String TOOLONG="ThisWordIsTooLongToBeDefinedAsAWordInTheSenseUsedInTextView";  verifyWordLimits(ONE_TWO,0,0,3);  verifyWordLimits(ONE_TWO,3,0,3);  verifyWordLimits(ONE_TWO,4,4,7);  verifyWordLimits(ONE_TWO,7,4,7);  verifyWordLimits(EMPTY,0,-1,-1);  verifyWordLimits(TOOLONG,0,-1,-1);}  }
class C{  public void executeQuery(String query) throws SQLException {  executeQuery(this.connection,query);}  }
class C{  public Outpoint(TID transactionId,int outputIndex){  this.transactionId=transactionId;  this.outputIndex=outputIndex;}  }
class C{  public SizeRequirements(){  minimum=0;  preferred=0;  maximum=0;  alignment=0.5f;}  }
class C{  public static void logDiffException(final Logger logger,final DiffException e){  logger.logException(Level.SEVERE,"DiffException",e);}  }
class C{  @VisibleForTesting OauthAccessTokenDto createOauthAccessToken(ClientApp clientApp,UUID accountId,Set<ClientAppScope> scopes,Duration tokenExpireDuration){  Account account=accountDao.findById(accountId).get();  clientAppDao.mergeClientAppUser(account,clientApp,scopes,Instant.now());  ClientAppUserAccessToken accessToken=new ClientAppUserAccessToken(account.getAccountId(),account.getAuthorities(),scopes,clientApp.getClientId(),clientApp.getClientSecret());  String encodedToken=accessToken.encode(Instant.now().plus(tokenExpireDuration),oauthSecret);  return new OauthAccessTokenDto(encodedToken,accessToken.getCanonicalScope(),Oauths.DEFAULT_TOKEN_TYPE);}  }
class C{  public Murata(){  super(2,2);}  }
class C{  protected Object convertToType(Class targetType,Object value) throws Throwable {  Class sourceType=value.getClass();  if (value instanceof Number) {    return toNumber(sourceType,targetType,(Number)value);  }  if (value instanceof Boolean) {    return toNumber(sourceType,targetType,((Boolean)value).booleanValue() ? ONE : ZERO);  }  if (value instanceof Date && Long.class.equals(targetType)) {    return new Long(((Date)value).getTime());  }  if (value instanceof Calendar && Long.class.equals(targetType)) {    return new Long(((Calendar)value).getTime().getTime());  }  String stringValue=value.toString().trim();  if (stringValue.length() == 0) {    return handleMissing(targetType);  }  Number number=null;  if (useLocaleFormat) {    NumberFormat format=getFormat();    number=parse(sourceType,targetType,stringValue,format);  } else {    number=toNumber(sourceType,targetType,stringValue);  }  return toNumber(sourceType,targetType,number);}  }
class C{  public void testConcurrentAdds() throws Exception {  final int NUM_DOCS=atLeast(50);  final int MAX_CONCURENT=atLeast(10);  ExecutorService runner=Executors.newFixedThreadPool(MAX_CONCURENT,new DefaultSolrThreadFactory("TestDocBasedVersionConstraints"));  try {    for (int id=0; id < NUM_DOCS; id++) {      final int numAdds=TestUtil.nextInt(random(),3,MAX_CONCURENT);      final int winner=TestUtil.nextInt(random(),0,numAdds - 1);      final int winnerVersion=atLeast(100);      final boolean winnerIsDeleted=(0 == TestUtil.nextInt(random(),0,4));      List<Callable<Object>> tasks=new ArrayList<>(numAdds);      for (int variant=0; variant < numAdds; variant++) {        final boolean iShouldWin=(variant == winner);        final long version=(iShouldWin ? winnerVersion : TestUtil.nextInt(random(),1,winnerVersion - 1));        if ((iShouldWin && winnerIsDeleted) || (!iShouldWin && 0 == TestUtil.nextInt(random(),0,4))) {          tasks.add(delayedDelete("" + id,"" + version));        } else {          tasks.add(delayedAdd("id","" + id,"name","name" + id + "_"+ variant,"my_version_l","" + version));        }      }      runner.invokeAll(tasks);      final String expectedDoc="{'id':'" + id + "','my_version_l':"+ winnerVersion+ (!winnerIsDeleted ? ",'name':'name" + id + "_"+ winner+ "'}" : "}");      assertJQ(req("qt","/get","id","" + id,"fl","id,name,my_version_l"),"=={'doc':" + expectedDoc + "}");      assertU(commit());      assertJQ(req("q","id:" + id,"fl","id,name,my_version_l"),"/response/numFound==1","/response/docs==[" + expectedDoc + "]");    }  }  finally {    runner.shutdownNow();  }}  }
class C{  @SuppressWarnings("unchecked") public void createStandardMBean(String implementationClassName,boolean isMXBean,ObjectName name) throws Exception {  createStandardMBean(implementationClassName,null,isMXBean,name);}  }
class C{  @Override public void close() throws IOException {  Throwable thrown=null;  try {    flush();  } catch (  Throwable e) {    thrown=e;  }  try {    out.close();  } catch (  Throwable e) {    if (thrown == null) {      thrown=e;    }  }}  }
class C{  @SuppressWarnings({"unchecked"}) public <KK>EntryStream<KK,V> selectKeys(Class<KK> clazz){  return (EntryStream<KK,V>)filter(null);}  }
class C{  public ReadAtTimeDetails clone(){  ReadAtTimeDetails result=new ReadAtTimeDetails();  result.ReqTimes=ReqTimes == null ? null : ReqTimes.clone();  result.UseSimpleBounds=UseSimpleBounds;  return result;}  }
class C{  @Override public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void add(double value){  if (value - median != 0.0) {    super.add(value - median,0);  }}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Channel_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Channel_name_feature","_UI_Channel_type"),EipPackage.Literals.CHANNEL__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private Batch(ImmutableList<Change> changes,long advanced,String leftOff,Date nextStartTime,JSONObject nextContinue){  super(changes,advanced,leftOff);  leftOffDate=nextStartTime;  this.nextContinue=nextContinue;}  }
class C{  public IgniteSpiException(String msg){  super(msg);}  }
class C{  public static long secsSinceEpoch(DateValue date){  long result=fixedFromGregorian(date) * SECS_PER_DAY;  if (date instanceof TimeValue) {    TimeValue time=(TimeValue)date;    result+=time.second() + 60 * (time.minute() + 60 * time.hour());  }  return result;}  }
class C{  @Override public boolean isPrepared(){  return isPrepared && (env.getAgents().isEmpty() || !env.isDone());}  }
class C{  private static DefaultTestCase buildTestCase1() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(0);  VariableReference int1=builder.appendIntPrimitive(0);  VariableReference int2=builder.appendIntPrimitive(0);  Class<?> flagClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=flagClass.getMethod("coverMe",int.class,int.class,int.class);  builder.appendMethod(null,barMethod,int0,int1,int2);  return builder.getDefaultTestCase();}  }
class C{  public static boolean isPoolMatchesCapacityForThinProvisioning(StoragePool pool,long requestedCapacityInKB,long preAllocationSize,CoordinatorClient coordinator){  if (!isThinPoolLessUtilized(pool,preAllocationSize,coordinator)) {    String msg=String.format("Thin pool %s is not matching as it will have utilization of %s percent after allocation. Pool's max utilization percentage is %s percent .",pool.getId(),100 - getThinPoolFreeCapacityPercentage(pool,preAllocationSize),getMaxPoolUtilizationPercentage(pool,coordinator));    _log.info(msg);    return false;  }  if (!isThinPoolLessSubscribed(pool,requestedCapacityInKB,coordinator)) {    String msg=String.format("Thin pool %s is not matching as it will have %s percent subscribed after allocation. Pool's max subscription percentage is %s percent .",pool.getId(),getThinPoolSubscribedCapacityPercentage(pool,requestedCapacityInKB),getMaxPoolSubscriptionPercentage(pool,coordinator));    _log.info(msg);    return false;  }  return true;}  }
class C{  public static boolean downloadUrlToFile(String url,String fileName,boolean showProgress){  return downloadUrlTo(url,fileName,showProgress,false,false,null);}  }
class C{  public static int[] toBytes(int val){  int[] bytes=new int[4];  for (int i=0; i < 4; i++) {    bytes[3 - i]=0b11111111 & val;    val>>=8;  }  return bytes;}  }
class C{  public CStandardPanel(final String labelText,final IHelpInformation helpInformation,final JComponent component){  super(new BorderLayout());  final JLabel label=helpInformation == null ? new JLabel(labelText) : new CHelpLabel(labelText,helpInformation);  final int PREFERRED_LABEL_WIDTH=110;  final int PREFERRED_LABEL_HEIGHT=25;  label.setPreferredSize(new Dimension(PREFERRED_LABEL_WIDTH,PREFERRED_LABEL_HEIGHT));  add(label,BorderLayout.WEST);  add(component,BorderLayout.CENTER);  setBorder(new EmptyBorder(0,0,0,0));}  }
class C{  @SuppressWarnings("deprecation") private void initCropGridStyle(@NonNull TypedArray a){  int cropGridStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_grid_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_grid_stoke_width));  int cropGridColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_grid_color,getResources().getColor(R.color.ucrop_color_default_crop_grid));  mCropGridPaint.setStrokeWidth(cropGridStrokeSize);  mCropGridPaint.setColor(cropGridColor);  mCropGridRowCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_row_count,DEFAULT_CROP_GRID_ROW_COUNT);  mCropGridColumnCount=a.getInt(R.styleable.ucrop_UCropView_ucrop_grid_column_count,DEFAULT_CROP_GRID_COLUMN_COUNT);}  }
class C{  void suspect(){  setState(State.UNSTABLE);}  }
class C{  private void tokenReceived(String token){  client.settings.setString("token",token);  client.settings.setBoolean("foreignToken",false);  if (tokenGetDialog.isVisible()) {    tokenGetDialog.tokenReceived();  }  tokenDialog.update("",token);  updateConnectionDialog(null);  verifyToken(token);}  }
class C{  public static BinaryVector intersection(BinaryVector vector,BinaryVector vector2){  FixedBitSet intersection=(FixedBitSet)vector.getCoordinates().clone();  FixedBitSet uncommonGround=(FixedBitSet)vector.getCoordinates().clone();  java.util.Random random=new java.util.Random();  random.setSeed((long)23);  uncommonGround.xor(vector2.getCoordinates());  for (int x=0; x < vector.getDimension(); x++) {    double change=random.nextDouble();    if (uncommonGround.get(x) && change > 0.5) {      intersection.flip(x);    }  }  BinaryVector intersectionVector=(BinaryVector)VectorFactory.createZeroVector(VectorType.BINARY,vector.getDimension());  intersectionVector.setCoordinates(intersection);  return intersectionVector;}  }
class C{  public DomainHistoryObject(DomainObjectWithoutVersioning<D> domobj){  setObjKey(domobj.getKey());  setDataContainer(domobj.getDataContainer());  setObjVersion(domobj.getVersion());}  }
class C{  public CallIntrinsicOp(AST source,Register resultTemp,IntrinsicMethod method,List<Register> params){  super(source,resultTemp,params);  this.method=method;}  }
class C{  public long readRawVarint64() throws IOException {  int shift=0;  long result=0;  while (shift < 64) {    final byte b=readRawByte();    result|=(long)(b & 0x7F) << shift;    if ((b & 0x80) == 0) {      return result;    }    shift+=7;  }  throw InvalidProtocolBufferException.malformedVarint();}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  protected void addCustomFields(XContentBuilder builder,T response) throws IOException {}  }
class C{  public static void highlightEdge(final EdgeRealizer realizer,final boolean state){  if (state) {    if (realizer.getLineType() == LineType.LINE_2) {      realizer.setLineType(LineType.LINE_5);    } else     if (realizer.getLineType() == LineType.DOTTED_2) {      realizer.setLineType(LineType.DOTTED_5);    } else     if (realizer.getLineType() == LineType.DASHED_2) {      realizer.setLineType(LineType.DASHED_5);    } else     if (realizer.getLineType() == LineType.DASHED_DOTTED_2) {      realizer.setLineType(LineType.DASHED_DOTTED_5);    }  } else {    if (realizer == null) {      return;    }    if (realizer.getLineType() == LineType.LINE_5) {      realizer.setLineType(LineType.LINE_2);    } else     if (realizer.getLineType() == LineType.DOTTED_5) {      realizer.setLineType(LineType.DOTTED_2);    } else     if (realizer.getLineType() == LineType.DASHED_5) {      realizer.setLineType(LineType.DASHED_2);    } else     if (realizer.getLineType() == LineType.DASHED_DOTTED_5) {      realizer.setLineType(LineType.DASHED_DOTTED_2);    }  }}  }
class C{  public Response login(Credentials credentials,Cookie tokenAccessCookie,UriInfo uriInfo) throws AuthenticationException {  if (credentials == null || credentials.getPassword() == null || credentials.getPassword().isEmpty() || credentials.getUsername() == null || credentials.getUsername().isEmpty()) {    return Response.status(Response.Status.BAD_REQUEST).build();  }  boolean secure=uriInfo.getRequestUri().getScheme().equals("https");  AuthenticationHandler handler=handlerProvider.getDefaultHandler();  String userId=handler.authenticate(credentials.getUsername(),credentials.getPassword());  if (Strings.isNullOrEmpty(userId)) {    LOG.error("Handler {} returned invalid userid during authentication of {}",handler.getType(),credentials.getUsername());    throw new AuthenticationException("Provided username and password is not valid");  }  try {    userDao.getById(userId);  } catch (  NotFoundException e) {    LOG.warn("User {} is not found in the system. But {} successfully complete authentication",credentials.getUsername(),handler.getType());    throw new AuthenticationException("Provided username and password is not valid");  }catch (  ServerException e) {    LOG.warn("Fail to get user after authentication .User {} provider {} reason {} ",credentials.getUsername(),handler.getType(),e.getLocalizedMessage());    throw new AuthenticationException("Provided username and password is not valid");  }  LOG.info("EVENT#user-sso-logged-in# USING#{}# USER#{}# ",handler.getType(),userId);  Response.ResponseBuilder builder=Response.ok();  if (tokenAccessCookie != null) {    AccessTicket accessTicket=ticketManager.getAccessTicket(tokenAccessCookie.getValue());    if (accessTicket != null) {      if (!userId.equals(accessTicket.getUserId())) {        LOG.info("EVENT#user-changed-name# OLD-USER#{}# NEW-USER#{}#",accessTicket.getUserId(),userId);        LOG.info("EVENT#user-sso-logged-out# USER#{}#",accessTicket.getUserId());        ticketManager.removeTicket(accessTicket.getAccessToken());      }    } else {      if (cookieBuilder != null) {        cookieBuilder.clearCookies(builder,tokenAccessCookie.getValue(),secure);      }    }  }  String token=uniqueTokenGenerator.generate();  ticketManager.putAccessTicket(new AccessTicket(token,userId,handler.getType()));  if (cookieBuilder != null) {    cookieBuilder.setCookies(builder,token,secure);  }  builder.entity(DtoFactory.getInstance().createDto(Token.class).withValue(token));  return builder.build();}  }
class C{  private List<Node> possibleParents(Node x,List<Node> nodes,IKnowledge knowledge){  List<Node> possibleParents=new LinkedList<>();  String _x=x.getName();  for (  Node z : nodes) {    String _z=z.getName();    if (possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  public void testInstrumentationCanRun(){}  }
class C{  private void addRequestHeaders(InnerState innerState,HttpGet request){  if (innerState.mContinuingDownload) {    if (innerState.mHeaderETag != null) {      request.addHeader("If-Match",innerState.mHeaderETag);    }    request.addHeader("Range","bytes=" + innerState.mBytesSoFar + "-");  }}  }
class C{  public static CCDirector sharedDirector(){  return _sharedDirector;}  }
class C{  public BasicVisualizationServer(VisualizationModel<V,E> model,Dimension preferredSize){  this.model=model;  renderContext=new PluggableRenderContext<V,E>(model.getGraphLayout().getGraph());  model.addChangeListener(this);  setDoubleBuffered(false);  this.addComponentListener(new VisualizationListener(this));  setPickSupport(new ShapePickSupport<V,E>(this));  setPickedVertexState(new MultiPickedState<V>());  setPickedEdgeState(new MultiPickedState<E>());  renderContext.setEdgeDrawPaintTransformer(new PickableEdgePaintTransformer<E>(getPickedEdgeState(),Color.black,Color.cyan));  renderContext.setVertexFillPaintTransformer(new PickableVertexPaintTransformer<V>(getPickedVertexState(),Color.red,Color.yellow));  setPreferredSize(preferredSize);  renderingHints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  renderContext.getMultiLayerTransformer().addChangeListener(this);}  }
class C{  @Override public void watch(DatabaseWatch watch,Result<Cancel> result,Object... args){  TableKelp tableKelp=_table.getTableKelp();  RowCursor minCursor=tableKelp.cursor();  RowCursor maxCursor=tableKelp.cursor();  minCursor.clear();  maxCursor.setKeyMax();  _whereKraken.fillMinCursor(minCursor,args);  _whereKraken.fillMaxCursor(minCursor,args);  _table.addWatch(watch,minCursor.getKey(),result);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.439 -0400",hash_original_method="7AEF2C3B62C677DC9FD1211BE4D4F4EB",hash_generated_method="112EB2C413E4179B843715E34640BB86") @Override public synchronized void mark(int readlimit){  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  mark=position;  this.readlimit=readlimit;}  }
class C{  public boolean isRoot(OutputNode node){  return stack.bottom() == node;}  }
class C{  public static boolean hasNoModifierKey(MouseEvent e){  return (!e.isAltDown() && !e.isShiftDown() && !e.isControlDown());}  }
class C{  public SendableStickerMessage.SendableStickerMessageBuilder sticker(InputFile sticker){  this.sticker=sticker;  return this;}  }
class C{  protected ObjectMatrix1D like1D(int size,int offset,int stride){  return new SparseObjectMatrix1D(size,this.elements,offset,stride);}  }
class C{  void add(long timestamp,boolean accelerating){  purge(timestamp - MAX_WINDOW_SIZE);  Sample added=pool.acquire();  added.timestamp=timestamp;  added.accelerating=accelerating;  added.next=null;  if (newest != null) {    newest.next=added;  }  newest=added;  if (oldest == null) {    oldest=added;  }  sampleCount++;  if (accelerating) {    acceleratingCount++;  }}  }
class C{  public FileHeader(FileWindow fileWindow){  this.fileWindow=fileWindow;  addMouseListener(this);  update();}  }
class C{  public RefUpdate.Result restoreFile(ChangeEdit edit,String file) throws AuthException, InvalidChangeOperationException, IOException {  return modify(TreeOperation.RESTORE_ENTRY,edit,file,null,null);}  }
class C{  public void add(String[] titles,double[] values){  add(mCategories.size() + "",titles,values);}  }
class C{  public NotificationChain basicSetFunctionblock(FunctionBlock newFunctionblock,NotificationChain msgs){  FunctionBlock oldFunctionblock=functionblock;  functionblock=newFunctionblock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK,oldFunctionblock,newFunctionblock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String code(){  if (codes == null)   return null;  if (codes[shift] == null)   throw new NumberFormatException("missing code for shift: " + shift);  return codes[shift];}  }
class C{  public void addAll(Annotations toAdd){  throwIfImmutable();  if (toAdd == null) {    throw new NullPointerException("toAdd == null");  }  for (  Annotation a : toAdd.annotations.values()) {    add(a);  }}  }
class C{  public void updateStart(){  m_updateStart=System.currentTimeMillis();}  }
class C{  public DeviceBuilder rssi(int rssi){  this.rssi=rssi;  return this;}  }
class C{  void placeAtPosition(final IGroupMemberNode node,final Integer positionToPlace){  if (positionToPlace == null) {    nonOptionalNonMinusNodes.addLast(node);  } else {    nonOptionalNonMinusNodes.add(positionToPlace,node);  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public boolean isApplicationClass(@DottedClassName String className){  ClassDescriptor classDesc=DescriptorFactory.createClassDescriptorFromDottedClassName(className);  return getSubtypes2().isApplicationClass(classDesc);}  }
class C{  private void parseImageProperty(BindElement be,XmlReader.Element e,String refer,String id_bind){  Array<XmlReader.Element> array=e.getChildrenByName(XmlElementNames.IMAGE_PROPERTY);  if (array == null || array.size == 0)   return;  XmlReader.Element ipEle;  ImagePropertyElement ipe;  for (int j=0, size2=array.size; j < size2; j++) {    ipEle=array.get(j);    ipe=new ImagePropertyElement(XmlElementNames.IMAGE_PROPERTY);    ipe.parse(ipEle);    if (ipe.getId() == null) {      ipe.setId(id_bind);    }    ipe.setReferVariable(mergeReferVariable(ipe.getReferVariable(),refer));    if (ipe.getId() == null && ipe.getReferVariable() == null)     throw new RuntimeException("view id and referVariable can't be empty at the same time");    be.addPropertyElement(ipe);    mTotalRefer=mergeReferVariable(ipe.getReferVariable(),mTotalRefer);  }}  }
class C{  public void run(){  while (ReconnectionManager.this.isReconnectionAllowed()) {    int remainingSeconds=timeDelay();    while (ReconnectionManager.this.isReconnectionAllowed() && remainingSeconds > 0) {      try {        Thread.sleep(1000);        remainingSeconds--;        ReconnectionManager.this.notifyAttemptToReconnectIn(remainingSeconds);      } catch (      InterruptedException e1) {        e1.printStackTrace();        ReconnectionManager.this.notifyReconnectionFailed(e1);      }    }    try {      if (ReconnectionManager.this.isReconnectionAllowed()) {        connection.connect();      }    } catch (    XMPPException e) {      ReconnectionManager.this.notifyReconnectionFailed(e);    }  }}  }
class C{  private boolean isValidCharacter(int index,char aChar){  return getMaskCharacter(index).isValidCharacter(aChar);}  }
class C{  public boolean match(SwitchCase node,Object other){  if (!(other instanceof SwitchCase)) {    return false;  }  SwitchCase o=(SwitchCase)other;  return safeSubtreeMatch(node.getExpression(),o.getExpression());}  }
class C{  public void sortColumn(int columnIndex){  sortCount++;  if (sortedColumn != columnIndex) {    sortCount=0;    if (columnIndex == COLUMN_AGO) {      sortCount=1;    }  }  sort(columnIndex,sortCount);}  }
class C{  public void testDynDateSort() throws Exception {  checkSortMissingDefault("dyn_datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  public synchronized void resetFlashcardEntityList(){  flashcardEntityList=null;}  }
class C{  private static void print(String solution){  System.out.print(solution.replaceAll("(\\d{5})(\\d{5})","$1 $2").replaceAll("(\\d{5})","$1\n").replaceAll("(\\d)","$1 "));}  }
class C{  public static boolean isPointInsideView(float x,float y,View view){  int location[]=new int[2];  view.getLocationOnScreen(location);  int viewX=location[0];  int viewY=location[1];  if ((viewX < x && x < (viewX + view.getWidth())) && (viewY < y && y < (viewY + view.getHeight()))) {    return true;  } else {    return false;  }}  }
class C{  public void postprocessing_www_unique(final Segment segment,final SolrDocument doc,final SolrInputDocument sid,final DigestURL url){  if (!this.contains(CollectionSchema.www_unique_b))   return;  final String us=url.urlstub(true,true);  try {    DigestURL u=new DigestURL(url.getProtocol() + (us.startsWith("www.") ? "://" + us.substring(4) : "://www." + us));    SolrDocument d=segment.fulltext().getDefaultConnector().getDocumentById(ASCII.String(u.hash()),CollectionSchema.www_unique_b.getSolrFieldName());    set_unique_flag(CollectionSchema.www_unique_b,doc,sid,d);  } catch (  final IOException e) {    ConcurrentLog.warn("CollectionConfiguration","Failed to postProcess www_unique_b field" + e.getMessage() != null ? " : " + e.getMessage() : ".");  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private final void updateComputeThreads(){  boolean alive=game.tree.getGameState() == GameState.ALIVE;  boolean analysis=gameMode.analysisMode() && alive;  boolean computersTurn=!humansTurn() && alive;  boolean ponder=gui.ponderMode() && !analysis && !computersTurn&& (ponderMove != null)&& alive;  if (!analysis && !(computersTurn || ponder))   computerPlayer.stopSearch();  listener.clearSearchInfo(searchId);  updateBookHints();  if (!computerPlayer.sameSearchId(searchId)) {    if (analysis) {      Pair<Position,ArrayList<Move>> ph=game.getUCIHistory();      SearchRequest sr=DroidComputerPlayer.SearchRequest.analyzeRequest(searchId,ph.first,ph.second,new Position(game.currPos()),game.haveDrawOffer(),engine,numPV);      computerPlayer.queueAnalyzeRequest(sr);    } else     if (computersTurn || ponder) {      listener.clearSearchInfo(searchId);      listener.notifyBookInfo(searchId,"",null);      final Pair<Position,ArrayList<Move>> ph=game.getUCIHistory();      Position currPos=new Position(game.currPos());      long now=System.currentTimeMillis();      if (ponder)       game.timeController.advanceMove(1);      int wTime=game.timeController.getRemainingTime(true,now);      int bTime=game.timeController.getRemainingTime(false,now);      int wInc=game.timeController.getIncrement(true);      int bInc=game.timeController.getIncrement(false);      boolean wtm=currPos.whiteMove;      int movesToGo=game.timeController.getMovesToTC(wtm ^ ponder);      if (ponder)       game.timeController.advanceMove(-1);      final Move fPonderMove=ponder ? ponderMove : null;      SearchRequest sr=DroidComputerPlayer.SearchRequest.searchRequest(searchId,now,ph.first,ph.second,currPos,game.haveDrawOffer(),wTime,bTime,wInc,bInc,movesToGo,gui.ponderMode(),fPonderMove,engine,strength);      computerPlayer.queueSearchRequest(sr);    } else {      computerPlayer.queueStartEngine(searchId,engine);    }  }}  }
class C{  public void testNoArgMethod() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("zeroArgMethod"));  Expression expr=JavascriptCompiler.compile("foo()",functions,getClass().getClassLoader());  assertEquals(5,expr.evaluate(0,null),DELTA);}  }
class C{  public boolean close() throws SerialPortException {  if (!isOpen()) {    log.warn("Serial port [{}] is not open.",portName);    return false;  }  boolean closed=port.closePort();  if (closed) {    log.info("Serial port [{}] closed successfully.",portName);  } else {    log.warn("Serial port [{}] was not closed properly.",portName);  }  port=null;  portName=null;  return closed;}  }
class C{  static int mainInit(final String[] args,final PrintStream out,final PrintStream err){  return mainExec(args,out,err,PrereadVerifier.initialLog(APPLICATION_NAME));}  }
class C{  public static void fixInputMap(JComponent jc){  InputMap map=jc.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  if (OSUtils.isMacOSX()) {    replaceAction(map,'A');    replaceAction(map,'C');    replaceAction(map,'V');    replaceAction(map,'X');  }}  }
class C{  public Operation createOperation(){  OperationImpl operation=new OperationImpl();  return operation;}  }
class C{  public static OneCamera.AutoFocusState stateFromCamera2State(int state){switch (state) {case CaptureResult.CONTROL_AF_STATE_ACTIVE_SCAN:    return OneCamera.AutoFocusState.ACTIVE_SCAN;case CaptureResult.CONTROL_AF_STATE_PASSIVE_SCAN:  return OneCamera.AutoFocusState.PASSIVE_SCAN;case CaptureResult.CONTROL_AF_STATE_PASSIVE_FOCUSED:return OneCamera.AutoFocusState.PASSIVE_FOCUSED;case CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED:return OneCamera.AutoFocusState.ACTIVE_FOCUSED;case CaptureResult.CONTROL_AF_STATE_PASSIVE_UNFOCUSED:return OneCamera.AutoFocusState.PASSIVE_UNFOCUSED;case CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED:return OneCamera.AutoFocusState.ACTIVE_UNFOCUSED;default :return OneCamera.AutoFocusState.INACTIVE;}}  }
class C{  private static String createJsMethodInvocationExpression(String methodName,boolean isStatic,String... paramNames){  StringBuilder sb=new StringBuilder();  sb.append(isStatic ? WND : THIS);  sb.append(".");  sb.append(methodName);  sb.append("(");  for (int i=0; i < paramNames.length; i++) {    if (i != 0) {      sb.append(", ");    }    sb.append(paramNames[i]);  }  sb.append(");");  return sb.toString();}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (this.encapsulatedException != null) {    System.err.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace();  }}  }
class C{  public ManagePreferences(Context context,long rowId){  mRowId=rowId;  mContext=context;  useDatabase=false;  if (BuildConfig.DEBUG)   Log.v("ManagePreferences init, rowId = " + mRowId);  if (mRowId > 0) {    mCursor=mContext.getContentResolver().query(ContactNotifications.buildContactUri(mRowId),null,null,null,null);    if (mCursor != null && mCursor.moveToFirst()) {      if (BuildConfig.DEBUG)       Log.v("Single contact found (rowId) - using database");      useDatabase=true;    }  }  if (BuildConfig.DEBUG && !useDatabase) {    Log.v("Contact NOT found - using prefs");  }  mPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);}  }
class C{  private boolean alreadyExists(String name){  for (  String item : existingItems) {    if (item.equals(name)) {      return true;    }  }  return false;}  }
class C{  public Void call() throws Exception {  final List<Future<Void>> tasks=new LinkedList<Future<Void>>();  try {    for (    IV<?,?> termId : graphs) {      final FutureTask<Void> ft=new FutureTask<Void>(new DrainIteratorTask(termId));      tasks.add(ft);      executor.execute(ft);    }    for (    Future<Void> f : tasks) {      f.get();    }  } catch (  Throwable ex) {    for (    Future<Void> f : tasks)     f.cancel(true);    throw new RuntimeException(ex);  } finally {    buffer.close();  }  return null;}  }
class C{  @Override public void init(){  if (initialized) {    return;  }  GLContext glContext=getContext();  if (mainCanvas) {    if (openGLVendor == null) {      GL gl=glContext.getGL();      openGLVendor=gl.glGetString(GL.GL_VENDOR);      openGLRenderer=gl.glGetString(GL.GL_RENDERER);      openGLVersion=gl.glGetString(GL.GL_VERSION);      IntBuffer arg1=BufferUtils.createIntBuffer(1);      gl.glGetIntegerv(GL.GL_DEPTH_BITS,arg1);      arg1.rewind();      depthBits=arg1.get(0);    }    sharedContext=glContext;  }  canvasRenderer.setContext(glContext);  canvasRenderer.init(settings,true);  initialized=true;}  }
class C{  public void testJAASFileAndEntry(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(JonasPropertySet.JONAS_MEJB_JAAS_FILE,"foo");  configuration.setProperty(JonasPropertySet.JONAS_MEJB_JAAS_ENTRY,"bar");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertEquals(factory.jaasFile,"foo");  assertEquals(factory.jaasEntry,"bar");}  }
class C{  public final void trace(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,null);  }}  }
class C{  public void testMapSize(){  resetEmpty();  assertEquals("Map.size() should be 0 with an empty map",0,map.size());  verify();  resetFull();  assertEquals("Map.size() should equal the number of entries " + "in the map",getSampleKeys().length,map.size());  verify();}  }
class C{  void sync(int sourceRepoIndex,int destRepoIndex,AuthenticationInfo subject) throws IOException {  LOG.info("Sync started");  NotebookAuthorization auth=NotebookAuthorization.getInstance();  NotebookRepo srcRepo=getRepo(sourceRepoIndex);  NotebookRepo dstRepo=getRepo(destRepoIndex);  List<NoteInfo> allSrcNotes=srcRepo.list(subject);  List<NoteInfo> srcNotes=auth.filterByUser(allSrcNotes,subject);  List<NoteInfo> dstNotes=dstRepo.list(subject);  Map<String,List<String>> noteIds=notesCheckDiff(srcNotes,srcRepo,dstNotes,dstRepo,subject);  List<String> pushNoteIds=noteIds.get(pushKey);  List<String> pullNoteIds=noteIds.get(pullKey);  List<String> delDstNoteIds=noteIds.get(delDstKey);  if (!pushNoteIds.isEmpty()) {    LOG.info("Notes with the following IDs will be pushed");    for (    String id : pushNoteIds) {      LOG.info("ID : " + id);    }    pushNotes(subject,pushNoteIds,srcRepo,dstRepo,false);  } else {    LOG.info("Nothing to push");  }  if (!pullNoteIds.isEmpty()) {    LOG.info("Notes with the following IDs will be pulled");    for (    String id : pullNoteIds) {      LOG.info("ID : " + id);    }    pushNotes(subject,pullNoteIds,dstRepo,srcRepo,true);  } else {    LOG.info("Nothing to pull");  }  if (!delDstNoteIds.isEmpty()) {    LOG.info("Notes with the following IDs will be deleted from dest");    for (    String id : delDstNoteIds) {      LOG.info("ID : " + id);    }    deleteNotes(subject,delDstNoteIds,dstRepo);  } else {    LOG.info("Nothing to delete from dest");  }  LOG.info("Sync ended");}  }
class C{  public static Switch analog(int channel,double lowerVoltage,double upperVoltage,AnalogOption option,TriggerMode mode){  if (option == null)   throw new IllegalArgumentException("The analog option must be specified");  if (mode == null)   throw new IllegalArgumentException("The analog mode must be specified");  AnalogTrigger trigger=new AnalogTrigger(channel);  trigger.setLimitsVoltage(lowerVoltage,upperVoltage);switch (option) {case AVERAGED:    trigger.setAveraged(true);  break;case FILTERED:trigger.setFiltered(true);break;case NONE:break;}return mode == TriggerMode.AVERAGED ? null : null;}  }
class C{  public void testBug20650() throws Exception {  Connection closedConn=null;  Statement cancelStmt=null;  try {    closedConn=getConnectionWithProps((String)null);    cancelStmt=closedConn.createStatement();    closedConn.close();    cancelStmt.cancel();  }  finally {    if (cancelStmt != null) {      cancelStmt.close();    }    if (closedConn != null && !closedConn.isClosed()) {      closedConn.close();    }  }}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  private RequestType analyzeUpgradeRequest1(JSONObject requestJson){  try {    JSONObject jsonGet=requestJson.getJSONObject(GET);    String action=jsonGet.getString(ACTION);    if (action.equals(DOWNLOAD_ROM_BASE64)) {      return RequestType.MESH_DEVICE_UPGRADE_LOCAL;    } else     if (action.equals(DEVICE_UPGRADE_SUC)) {      return RequestType.MESH_DEVICE_UPGRADE_LOCAL_SUC;    } else     if (action.equals(DEVICE_UPGRADE_FAIL)) {      return RequestType.MESH_DEVICE_UPGRADE_LOCAL_FAIL;    }  } catch (  JSONException e) {    e.printStackTrace();  }  return RequestType.INVALID;}  }
class C{  public boolean abort() throws LoginException {  if (debug) {    System.out.println("\t\t[UnixLoginModule]: " + "aborted authentication attempt");  }  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    ss=null;    userPrincipal=null;    UIDPrincipal=null;    GIDPrincipal=null;    supplementaryGroups=new LinkedList<UnixNumericGroupPrincipal>();  } else {    logout();  }  return true;}  }
class C{  private void addDefaultImports(){  imports.add("java.lang.*");  imports.add("java.math.*");  imports.add("java.text.*");  imports.add("java.util.*");  imports.add(ANNOTATION_IMPORT);  imports.add(BeaconSource.class.getPackage().getName() + ".*");}  }
class C{  public static int stringToInt(String str,int defaultValue){  try {    return Integer.parseInt(str);  } catch (  NumberFormatException nfe) {    return defaultValue;  }}  }
class C{  @Override public void run(){  amIActive=true;  try {    Long startTime=System.currentTimeMillis();    int progress, oldProgress, col, row, colN, rowN, r, c;    int numSolvedCells=0;    int dir, numCellsInPath, i, n;    boolean needsFilling=false;    double z, zN, zTest, zN2, lowestNeighbour, breachDepth, maxPathBreachDepth;    boolean isPit, isEdgeCell, flag, isPeak;    double pathTerminalHeight;    double outletHeight;    int outletRow, outletCol, outletDist;    GridCell gc;    int[] dX={1,1,1,0,-1,-1,-1,0};    int[] dY={-1,0,1,1,1,0,-1,-1};    int[] backLink={5,6,7,8,1,2,3,4};    double[] outPointer={0,1,2,4,8,16,32,64,128};    if (args.length < 2) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String demFile=args[0];    String outputFile=args[1];    boolean maxLengthOrDepthUsed=false;    double maxDepth=Double.POSITIVE_INFINITY;    if (args.length >= 3 && !(args[2].trim()).isEmpty() && !(args[2].toLowerCase().equals("not specified"))) {      maxDepth=Double.parseDouble(args[2]);      maxLengthOrDepthUsed=true;    }    int maxLength=Integer.MAX_VALUE;    if (args.length >= 4 && !(args[3].trim()).isEmpty() && !(args[3].toLowerCase().equals("not specified"))) {      maxLength=Integer.parseInt(args[3]);      maxLengthOrDepthUsed=true;    }    boolean performConstrainedBreach=false;    if (args.length >= 5 && !(args[4].trim()).isEmpty() && !(args[4].toLowerCase().equals("not specified"))) {      performConstrainedBreach=Boolean.parseBoolean(args[4]);    }    if (maxDepth == Double.POSITIVE_INFINITY && maxLength == Integer.MAX_VALUE && performConstrainedBreach) {      performConstrainedBreach=false;    }    String pointerFile="";    String flowAccumFile="";    boolean outputPointer=false;    if (args.length >= 6 && !(args[5].trim()).isEmpty()) {      outputPointer=Boolean.parseBoolean(args[5]);      pointerFile=outputFile.replace(".dep","_flow_pntr.dep");    }    boolean performFlowAccumulation=false;    if (args.length >= 7 && !(args[6].trim()).isEmpty() && outputPointer) {      performFlowAccumulation=Boolean.parseBoolean(args[6]);      flowAccumFile=outputFile.replace(".dep","_flow_accum.dep");    }    WhiteboxRaster dem=new WhiteboxRaster(demFile,"r");    double nodata=dem.getNoDataValue();    int rows=dem.getNumberRows();    int cols=dem.getNumberColumns();    int rowsLessOne=rows - 1;    int numCellsTotal=rows * cols;    minVal=dem.getMinimumValue();    elevDigits=String.valueOf((int)(dem.getMaximumValue() - minVal)).length();    elevMultiplier=Math.pow(10,8 - elevDigits);    double SMALL_NUM=1 / elevMultiplier;    double[][] output=new double[rows + 2][cols + 2];    BooleanBitArray2D pits=new BooleanBitArray2D(rows + 2,cols + 2);    BooleanBitArray2D inQueue=new BooleanBitArray2D(rows + 2,cols + 2);    NibbleArray2D flowdir=new NibbleArray2D(rows + 2,cols + 2);    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=dem.getValue(row,col);        output[row + 1][col + 1]=z;        flowdir.setValue(row + 1,col + 1,0);        if (z != nodata) {          isPit=true;          isPeak=true;          isEdgeCell=false;          lowestNeighbour=Double.POSITIVE_INFINITY;          for (n=0; n < 8; n++) {            zN=dem.getValue(row + dY[n],col + dX[n]);            if (zN != nodata) {              if (zN < z) {                isPit=false;                break;              } else {                if (zN < lowestNeighbour) {                  lowestNeighbour=zN;                }              }            } else {              isEdgeCell=true;            }          }          if (isPit) {            if (isEdgeCell) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              flowdir.setValue(row + 1,col + 1,0);            } else {              pits.setValue(row + 1,col + 1,true);              output[row + 1][col + 1]=lowestNeighbour - SMALL_NUM;            }          }        } else {          numSolvedCells++;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress != oldProgress) {        updateProgress("Breaching DEM (1 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    String paletteName=dem.getPreferredPalette();    dem.close();    for (row=0; row < rows + 2; row++) {      output[row][0]=nodata;      output[row][cols + 1]=nodata;      flowdir.setValue(row,0,0);      flowdir.setValue(row,cols + 1,0);    }    for (col=0; col < cols + 2; col++) {      output[0][col]=nodata;      output[rows + 1][col]=nodata;      flowdir.setValue(0,col,0);      flowdir.setValue(rows + 1,col,0);    }    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    updateProgress("Breaching DEM (2 of 2):",oldProgress);    if (!maxLengthOrDepthUsed) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    output[r][c]=zTest;                  }                } else {                  flag=false;                }              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    } else     if (!performConstrainedBreach) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              numCellsInPath=0;              maxPathBreachDepth=0;              breachDepth=0;              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    breachDepth=zN2 - zTest;                    if (breachDepth > maxPathBreachDepth) {                      maxPathBreachDepth=breachDepth;                    }                  }                } else {                  flag=false;                }                numCellsInPath++;                if (numCellsInPath > maxLength) {                  flag=false;                }                if (maxPathBreachDepth > maxDepth) {                  flag=false;                }              }              if (numCellsInPath <= maxLength && maxPathBreachDepth <= maxDepth) {                zTest=zN;                r=rowN;                c=colN;                flag=true;                while (flag) {                  zTest-=SMALL_NUM;                  dir=flowdir.getValue(r,c);                  if (dir > 0) {                    r+=dY[dir - 1];                    c+=dX[dir - 1];                    zN2=output[r][c];                    if (zN2 <= zTest || zN2 == nodata) {                      flag=false;                    } else {                      output[r][c]=zTest;                    }                  } else {                    flag=false;                  }                }              } else {                needsFilling=true;              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    if (needsFilling) {      numSolvedCells=0;      queue.clear();      inQueue=new BooleanBitArray2D(rows + 2,cols + 2);      flowdir=new NibbleArray2D(rows + 2,cols + 2);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          flowdir.setValue(row + 1,col + 1,0);          if (z != nodata) {            isPit=true;            isEdgeCell=false;            for (n=0; n < 8; n++) {              zN=output[row + dY[n] + 1][col + dX[n] + 1];              if (zN == nodata) {                isEdgeCell=true;              } else               if (zN < z) {                isPit=false;              }            }            if (isEdgeCell && isPit) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              numSolvedCells++;            }          } else {            numSolvedCells++;          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress != oldProgress) {          updateProgress("Filling DEM (1 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        z=output[row][col];        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (zN <= z) {              zN=z + SMALL_NUM;            }            numSolvedCells++;            output[rowN][colN]=zN;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Filling DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    WhiteboxRaster outputRaster=new WhiteboxRaster(outputFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);    outputRaster.setPreferredPalette(paletteName);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output[row + 1][col + 1];        outputRaster.setValue(row,col,z);      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress("Saving Data:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    outputRaster.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");    outputRaster.addMetadataEntry("Created on " + new Date());    Long endTime=System.currentTimeMillis();    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    outputRaster.addMetadataEntry("Elapsed time: " + duration);    outputRaster.addMetadataEntry("Max breach depth: " + maxDepth);    outputRaster.addMetadataEntry("Max length depth: " + maxLength);    outputRaster.close();    if (outputPointer) {      WhiteboxRaster pointer=new WhiteboxRaster(pointerFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);      pointer.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);      pointer.setPreferredPalette("qual.pal");      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          if (z != nodata) {            pointer.setValue(row,col,outPointer[flowdir.getValue(row + 1,col + 1)]);          } else {            pointer.setValue(row,col,nodata);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress("Saving Pointer:",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      pointer.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");      pointer.addMetadataEntry("Created on " + new Date());      pointer.close();      returnData(pointerFile);    }    returnData(outputFile);    if (performFlowAccumulation) {      String[] args2={pointerFile,flowAccumFile,"number of upslope grid cells","false"};      myHost.runPlugin("FlowAccumD8",args2,false);    }    if (!outputPointer && !performFlowAccumulation) {      showFeedback("Elapsed time: " + duration);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;  }}  }
class C{  public Element next(){  if (elementStack == null) {    return first();  }  if (elementStack.isEmpty()) {    return null;  }  StackItem item=elementStack.peek();  Element elem=item.getElement();  int index=item.getIndex();  if (index + 1 < elem.getElementCount()) {    Element child=elem.getElement(index + 1);    if (child.isLeaf()) {      item.incrementIndex();    } else {      elementStack.push(new StackItem(child));    }    return child;  } else {    elementStack.pop();    if (!elementStack.isEmpty()) {      StackItem top=elementStack.peek();      top.incrementIndex();      return next();    }  }  return null;}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  public Date calculateLowestVisibleTickValue(DateTickUnit unit){  return nextStandardDate(getMinimumDate(),unit);}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public IMouseState createNodePressedLeftState(final Node n,final MouseEvent event){  final CNodePressedLeftState<NodeType,EdgeType> state=new CNodePressedLeftState<NodeType,EdgeType>(this,m_graph,n,event);  m_factory.createNodePressedLeftAction().execute(state,event);  return state;}  }
class C{  @Override public void post(Runnable runnable){  handler.post(runnable);}  }
class C{  protected void postProcessChunk(ChunkReader chunkR){  if (chunkCount == 1) {    String cid=firstChunkId();    if (cid != null && !cid.equals(chunkR.getChunkRaw().id))     throw new PngjInputException("Bad first chunk: " + chunkR.getChunkRaw().id + " expected: "+ firstChunkId());  }  if (chunkR.getChunkRaw().id.equals(endChunkId()))   done=true;}  }
class C{  static public int hour(){  time.setToNow();  return time.hour;}  }
class C{  private void logSource(ObjectReference src){  HeaderByte.markAsLogged(src);  modBuffer.push(src);}  }
class C{  public static void checkBufferPools(final TestCase test){  checkBufferPools(test,null);}  }
class C{  public static boolean isHttpTraceEnabled(){  return sHttpTraceEnabled;}  }
class C{  public final short readShort() throws IOException {  readFully(scratch,0,SizeOf.SHORT);  return Memory.peekShort(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  @Override public double eval(double[] x,double[] y){  double result=Math.exp(-Math.sqrt(Math.pow(lengthScale,-2) * norm2(x,y)));  return result;}  }
class C{  public boolean isRealtimeBarsRunning(Tradestrategy tradestrategy){  if (m_realTimeBarsRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_realTimeBarsRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        return true;      }    }  }  return false;}  }
class C{  public void addPointToHead(int x,int y,int lastTimeSec,int timeSec,int minDepth){  if (dirtyDescendents != 0)   TAssert.fail("Don't call this method unless everything is clean");  if (stBox == null)   return;  addPointToViewNode(x,y,lastTimeSec,timeSec,minDepth);}  }
class C{  public long memory(){  long memory=0;  for (int i=buffers.length; --i >= 0; ) {    memory=memory + buffers[i].memory();  }  return memory;}  }
class C{  public void deleteLocalCodeNodeComment(final IComment comment) throws CouldntDeleteException {  CommentManager.get(m_provider).deleteLocalCodeNodeComment(m_codeNode,comment);}  }
class C{  @Override public void updateScreen(){  nameBox.updateCursorCounter();  Block block=Block.getBlockFromName(nameBox.getText());  ((GuiButton)buttonList.get(0)).enabled=nameBox.getText().trim().length() > 0 && block != null;}  }
class C{  public boolean zoneExportMasksDelete(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){  NetworkZoningParam zoningParam=zoningParams.get(0);  _log.info(String.format("Entering zoneExportMasksDelete for ExportGroup: %s",zoningParam.getExportGroupDisplay()));  return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId);}  }
class C{  public static long copyLarge(final InputStream input,final OutputStream output,final byte[] buffer) throws IOException {  long count=0;  int n=0;  while (IOUtils.EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  protected static XMLReader createXMLReaderViaJAXP(boolean validating,boolean namespaceAware){  try {    return JAXPHelper.createXMLReader(validating,namespaceAware);  } catch (  Throwable e) {    if (!loggedWarning) {      loggedWarning=true;      if (isVerboseErrorReporting()) {        System.out.println("Warning: Caught exception attempting " + "to use JAXP to load a SAX XMLReader");        System.out.println("Warning: Exception was: " + e);        e.printStackTrace();      }    }  }  return null;}  }
class C{  public Object readObject(){  return (parsingComplete()) ? this.array[this.index++] : null;}  }
class C{  public Object parse(URL url,String charset){  return parseURL(url,null,charset);}  }
class C{  public void clear(){  view.clear();}  }
class C{  public void write(char c[],int off,int len){  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (lock) {    int newcount=count + len;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    System.arraycopy(c,off,buf,count,len);    count=newcount;  }}  }
class C{  public int edgeIndex(TriangulationPoint p1,TriangulationPoint p2){  if (points[0] == p1) {    if (points[1] == p2) {      return 2;    } else     if (points[2] == p2) {      return 1;    }  } else   if (points[1] == p1) {    if (points[2] == p2) {      return 0;    } else     if (points[0] == p2) {      return 2;    }  } else   if (points[2] == p1) {    if (points[0] == p2) {      return 1;    } else     if (points[1] == p2) {      return 0;    }  }  return -1;}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) >> 2;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public void reset(EvolutionState state,int thread){  GeneVectorSpecies s=(GeneVectorSpecies)species;  for (int x=0; x < genome.length; x++) {    if (genome[x] == null)     genome[x]=(Gene)(s.genePrototype.clone());    genome[x].reset(state,thread);  }}  }
class C{  public String sendUnicodeTextSms(String text,String dest) throws SmsException, IOException {  SmsTextMessage textMessage=new SmsTextMessage(text,SmsAlphabet.UCS2,SmsMsgClass.CLASS_UNKNOWN);  return sendSms(textMessage,dest,null);}  }
class C{  private void updateUiByTrackColorMode(String trackColorMode){  boolean isFixedValue=trackColorMode.equals(getString(R.string.settings_map_track_color_mode_fixed_value));  boolean isDynamicValue=trackColorMode.equals(getString(R.string.settings_map_track_color_mode_dynamic_value));  slowPreference.setEnabled(isFixedValue);  mediumPreference.setEnabled(isFixedValue);  percentagePreference.setEnabled(isDynamicValue);}  }
class C{  public AbstractSearchTest(String name){  super(name);}  }
class C{  public void endRepresentation(){  if (!representationProtectionsSet) {    if (currentRepresentationProtections != null) {      Collections.sort(currentRepresentationProtections,this);    }    representationProtections=currentRepresentationProtections;    representationProtectionsSet=true;  } else {    if (currentRepresentationProtections == null) {      Assertions.checkState(representationProtections == null);    } else {      Collections.sort(currentRepresentationProtections,this);      Assertions.checkState(currentRepresentationProtections.equals(representationProtections));    }  }  currentRepresentationProtections=null;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public boolean isReadable(){  return isReadable;}  }
class C{  public MapElement addMapElementState(MapElementState state){  MapElement mapElement=null;  if (state instanceof WaypointState) {    Path path=(Path)((WaypointState)state).parent.getMapElement();    mapElement=path.addWaypoint((WaypointState)state);  } else {    mapElementStateList.add(state);    if (state instanceof LandmarkState) {      mapElement=World.getInstance().getLandmarks().addLandmark((LandmarkState)state,true);    } else     if (state instanceof ToolState) {      mapElement=World.getInstance().getTools().addTool((ToolState)state,true);    } else     if (state instanceof LineSetState) {      mapElement=World.getInstance().getLineSets().addLineSet((LineSetState)state,true);    }  }  World world=World.getInstance();  if (world != null) {    world.setVerticalExaggeration(world.getVerticalExaggeration());  }  return (mapElement);}  }
class C{  public static JSONObject JsonNonResponsePost(String url,String bssid,JSONObject postJSON){  return JsonNonResponsePost(url,bssid,SERIAL_NORMAL_TASK,postJSON);}  }
class C{  @Inline @Override public final ObjectReference objectReferenceRead(ObjectReference objref,Word offset,Word location,int mode){  return ObjectReference.fromObject(Magic.getObjectAtOffset(objref.toObject(),offset.toOffset(),location.toInt()));}  }
class C{  public boolean hasWhere(){  return super.hasElement(Where.KEY);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  if (equals("#text",childName)) {    assertEquals("nodeName_w_space","#text",childName);  } else {    assertEqualsAutoCase("element","nodeName_wo_space","em",childName);  }}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  private void nodeHeightsToLengths(FlexibleNode node,double height){  node.setLength(height - node.getHeight());  for (int i=0; i < node.getChildCount(); i++) {    nodeHeightsToLengths(node.getChild(i),node.getHeight());  }}  }
class C{  public GraphicContext createGraphicContext(){  GraphicContext graphicContext=new GraphicContext();  if (parentGraphicContext != null)   graphicContext.scalingGrid=parentGraphicContext.scalingGrid;  FXGMatrix transform=graphicContext.getTransform();  if (matrix != null) {    FXGMatrix t=new FXGMatrix(matrix);    transform.concat(t);  } else {    if (scaleSet)     transform.scale(scaleX,scaleY);    if (rotationSet)     transform.rotate(rotation);    if (translateSet)     transform.translate(x,y);  }  if (colorTransform != null) {    graphicContext.colorTransform=colorTransform;  } else   if (alphaSet) {    if (graphicContext.colorTransform == null)     graphicContext.colorTransform=new ColorTransformNode();    graphicContext.colorTransform.alphaMultiplier=alpha;  }  graphicContext.blendMode=blendMode;  if (filters != null) {    graphicContext.addFilters(filters);  }  if (maskTypeSet)   graphicContext.maskType=maskType; else   if (parentGraphicContext != null)   graphicContext.maskType=parentGraphicContext.maskType;  return graphicContext;}  }
class C{  public Vertex evaluateREDIRECT(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack) throws Exception {  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex sentence=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  if (!sentence.instanceOf(Primitive.SENTENCE) && sentence.instanceOf(Primitive.FRAGMENT)) {    sentence.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);  }  Vertex input=variables.get(network.createVertex(Primitive.INPUT_VARIABLE));  input=input.copy();  input.setRelationship(Primitive.INPUT,sentence);  Vertex response=network.getBot().mind().getThought(Language.class).input(input,sentence,variables,network);  if (response == null) {    return network.createVertex(Primitive.NULL);  }  return response;}  }
class C{  public long current(){  return _sequence.get();}  }
class C{  @Override public int read() throws IOException {  if (_tmpBuf == null) {    _tmpBuf=new char[1];  }  if (read(_tmpBuf,0,1) < 1) {    return -1;  }  return _tmpBuf[0];}  }
class C{  public static RopMethod optimize(RopMethod rmeth,int paramWidth,boolean isStatic,boolean inPreserveLocals,TranslationAdvice inAdvice,EnumSet<OptionalStep> steps){  SsaMethod ssaMeth=null;  preserveLocals=inPreserveLocals;  advice=inAdvice;  ssaMeth=SsaConverter.convertToSsaMethod(rmeth,paramWidth,isStatic);  runSsaFormSteps(ssaMeth,steps);  RopMethod resultMeth=SsaToRop.convertToRopMethod(ssaMeth,false);  if (resultMeth.getBlocks().getRegCount() > advice.getMaxOptimalRegisterCount()) {    resultMeth=optimizeMinimizeRegisters(rmeth,paramWidth,isStatic,steps);  }  return resultMeth;}  }
class C{  private static void exposeType(Object object){  if (!(object instanceof EObject) || ((EObject)object).eIsProxy())   return;  EObject root=(EObject)object;  while (root != null && !(root.eContainer() instanceof TModule))   root=root.eContainer();  if (root instanceof Type && root.eContainingFeature() == TypesPackage.eINSTANCE.getTModule_InternalTypes()) {    final TModule module=(TModule)root.eContainer();    final EObject rootFinal=root;    EcoreUtilN4.doWithDeliver(false,null,module,root);  }}  }
class C{  public void reply(List<Header> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(FramedStream.this));  boolean outFinished=false;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.sink.finished=true;      outFinished=true;    }  }  connection.writeSynReply(id,outFinished,responseHeaders);  if (outFinished) {    connection.flush();  }}  }
class C{  public OMGeometry remove(int location){  OMGeometry obj=super.remove(location);  if (obj != null) {    setNeedToRegenerate(true);  }  return obj;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double heightIncrement=0;  double currentMaxVal=0;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      heightIncrement=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=0;          maxValDist=0;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              maxValDist=dist;              flag=false;            }          } while (flag);          oldDist=dist;          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              if (dist < maxValDist || maxValDist == 0) {                maxValDist=dist;              }              flag=false;            }          } while (flag);          if (maxValDist == 0) {            if (dist > oldDist) {              maxValDist=-dist;            } else {              maxValDist=-oldDist;            }          }          output.setValue(row,col,maxValDist);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public kbd addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public InlineQueryResultArticle build(){  return new InlineQueryResultArticle(id,title,input_message_content,reply_markup,url,hide_url,description,thumb_url,thumb_width,thumb_height);}  }
class C{  public char next(char c) throws JSONException {  char n=next();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public AddImageResource(java.awt.Frame parent,boolean modal,EditableResources res){  super(parent,modal);  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  name.setText(AddResourceDialog.nextAvailableName(res,"Image"));  pack();  setLocationByPlatform(true);  setVisible(true);}  }
class C{  public static void addImports(ASTRewrite rewrite,CompilationUnit compilationUnit,SortedSet<ImportDeclaration> imports){  requireNonNull(rewrite,"ast-rewrite");  requireNonNull(compilationUnit,"compilation-unit");  requireNonNull(imports,"imports");  ListRewrite importRewrite=rewrite.getListRewrite(compilationUnit,CompilationUnit.IMPORTS_PROPERTY);  addImports(importRewrite,imports.comparator(),imports.iterator());}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMinimumSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMinimumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof BERootPaneUI)) {    JComponent titlePane=((BERootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMinimumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  private void waitForAsyncFileExportTask(URI fileShareId,String stepId){  boolean done=false;  try {    while (!done) {      Thread.sleep(1000);      FileShare fsObj=_dbClient.queryObject(FileShare.class,fileShareId);      if (fsObj.getOpStatus().containsKey(stepId)) {        Operation op=fsObj.getOpStatus().get(stepId);        if (op.getStatus().equalsIgnoreCase("ready")) {          WorkflowStepCompleter.stepSucceded(stepId);          done=true;        } else         if (op.getStatus().equalsIgnoreCase("error")) {          WorkflowStepCompleter.stepFailed(stepId,op.getServiceError());          done=true;        }      }    }  } catch (  InterruptedException ex) {    WorkflowStepCompleter.stepFailed(stepId,DeviceControllerException.errors.jobFailed(ex));  }}  }
class C{  public void registeredDebugger(String id,Debugger debugger){  debuggers.put(id,debugger);}  }
class C{  public double nextDouble(){  return nextDouble(this.freedom);}  }
class C{  public LogCursor(LogFile logFile,long lastSeqno){  this.logFile=logFile;  this.lastSeqno=lastSeqno;  this.lastAccessMillis=System.currentTimeMillis();}  }
class C{  private final void writeFullUTF(String str,boolean encodeLength) throws UTFDataFormatException {  int strlen=str.length();  if (encodeLength && strlen > 65535) {    throw new UTFDataFormatException();  }{    int maxLen=(strlen * 3);    if (encodeLength) {      maxLen+=2;    }    ensureCapacity(maxLen);  }  int utfSizeIdx=this.buffer.position();  if (encodeLength) {    this.buffer.position(utfSizeIdx + 2);  }  for (int i=0; i < strlen; i++) {    int c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      this.buffer.put((byte)c);    } else     if (c > 0x07FF) {      this.buffer.put((byte)(0xE0 | ((c >> 12) & 0x0F)));      this.buffer.put((byte)(0x80 | ((c >> 6) & 0x3F)));      this.buffer.put((byte)(0x80 | ((c >> 0) & 0x3F)));    } else {      this.buffer.put((byte)(0xC0 | ((c >> 6) & 0x1F)));      this.buffer.put((byte)(0x80 | ((c >> 0) & 0x3F)));    }  }  int utflen=this.buffer.position() - utfSizeIdx;  if (encodeLength) {    utflen-=2;    if (utflen > 65535) {      this.buffer.position(utfSizeIdx);      throw new UTFDataFormatException();    }    this.buffer.putShort(utfSizeIdx,(short)utflen);  }}  }
class C{  public void addElement(PrintElement element){  if (element != null)   m_elements.add(element);}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public void drawPalette(int[] colors,int selectedColor){  drawPalette(colors,selectedColor,null);}  }
class C{  private static boolean isValidPort(int port){  return port >= 0 && port <= 65535;}  }
class C{  public void close(ResponseListener<Object> listener){  service.closeLaunchSession(this,listener);}  }
class C{  public final boolean canSetDate(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetDate());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options){  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN)           break;        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize=3;  double n;  double sum;  int[] dX;  int[] dY;  double[] weights;  int midPoint;  int numPixelsInFilter;  boolean reflectAtBorders=false;  double sigmaD=0;  double recipRoot2PiTimesSigmaD;  double twoSigmaSqrD;  double zN, zFinal;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigmaD=Double.parseDouble(args[i]);    } else     if (i == 3) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigmaD < 0.5) {    sigmaD=0.5;  } else   if (sigmaD > 20) {    sigmaD=20;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    recipRoot2PiTimesSigmaD=1 / (Math.sqrt(2 * Math.PI) * sigmaD);    twoSigmaSqrD=2 * sigmaD * sigmaD;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (i * i) / twoSigmaSqrD);      if (weight <= 0.001) {        filterSize=i * 2 + 1;        break;      }    }    if (filterSize % 2 == 0) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    weights=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2) + 1;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        x=col - midPoint;        y=row - midPoint;        dX[a]=x;        dY[a]=y;        weight=recipRoot2PiTimesSigmaD * Math.exp(-1 * (x * x + y * y) / twoSigmaSqrD);        weights[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights[a];              zFinal+=weights[a] * zN;            }          }          outputFile.setValue(row,col,zFinal / sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RectF parseRect(PDFObject obj) throws IOException {  if (obj.getType() == PDFObject.ARRAY) {    PDFObject bounds[]=obj.getArray();    if (bounds.length == 4) {      return new RectF(bounds[0].getFloatValue(),bounds[1].getFloatValue(),bounds[2].getFloatValue(),bounds[3].getFloatValue());    } else {      throw new PDFParseException("Rectangle definition didn't have 4 elements");    }  } else {    throw new PDFParseException("Rectangle definition not an array");  }}  }
class C{  public Identifier addAmbigPrefix(){  return Identifier.lookup(ambigPrefix + name);}  }
class C{  public void resetChildrenOnKeyListeners(){  ShortcutAndWidgetContainer children=getShortcutsAndWidgets();  int childCount=children.getChildCount();  for (int j=0; j < childCount; ++j) {    children.getChildAt(j).setOnKeyListener(null);  }}  }
class C{  void pushScope(){  currentScope++;}  }
class C{  public static ConcurrentMap<String,Seed> seedsByAge(final SeedDB seedDB,final boolean up,int count){  if (count > seedDB.sizeConnected())   count=seedDB.sizeConnected();  Seed ys;  final Iterator<Seed> s=seedDB.seedsSortedConnected(!up,Seed.LASTSEEN);  try {    final ConcurrentMap<String,Seed> result=new ConcurrentHashMap<String,Seed>();    while (s.hasNext() && count-- > 0) {      ys=s.next();      if (ys != null && ys.hash != null) {        result.put(ys.hash,ys);      }    }    return result;  } catch (  final kelondroException e) {    Network.log.severe("Internal Error at yacySeedDB.seedsByAge: " + e.getMessage(),e);    return null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public WrappedByteBuffer putBytesAt(int index,byte[] b){  _checkForWriteAt(index,b.length);  int pos=_buf.position();  _buf.position(index);  _buf.put(b,0,b.length);  _buf.position(pos);  return this;}  }
class C{  public String fullLabel(){  return mLabel + mSuffix;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.LOGICAL_RELATION_EXPRESSION;}  }
class C{  public NoSplit(Distribution distribution){  m_distribution=new Distribution(distribution);  m_numSubsets=1;}  }
class C{  public static Order asc(Object expression){  return new Order(expression);}  }
class C{  public synchronized boolean allCancelled(){  for (  TaskProgress progress : taskInfo) {    if (progress.isCancelled())     return false;  }  return true;}  }
class C{  public String next(){  int first=data.getFirst();  scroll(first + data.getRows());  return (null);}  }
class C{  public static String generateExportGroupName(ProtectionSystem protectionSystem,StorageSystem storageSystem,String internalSiteName,VirtualArray virtualArray,boolean isJournalExport){  String protectionSiteName=protectionSystem.getRpSiteNames().get(internalSiteName);  String exportGroupGeneratedName=protectionSystem.getNativeGuid() + "_" + storageSystem.getLabel()+ "_"+ protectionSiteName+ "_"+ virtualArray.getLabel();  if (isJournalExport) {    exportGroupGeneratedName=exportGroupGeneratedName + "_JOURNAL";  }  exportGroupGeneratedName=exportGroupGeneratedName.replaceAll("[^A-Za-z0-9_]","");  _log.info("ExportGroup generated name is " + exportGroupGeneratedName);  return exportGroupGeneratedName;}  }
class C{  public boolean acceptsLoad(String load,String type){  if (_loadOption.equals(ALL_LOADS)) {    return true;  }  if (_loadOption.equals(INCLUDE_LOADS)) {    return _loadList.contains(load) || _loadList.contains(type + CarLoad.SPLIT_CHAR + load);  }  return !_loadList.contains(load) && !_loadList.contains(type + CarLoad.SPLIT_CHAR + load);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample3...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=2048;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmid++;    Vm vm2=new Vm(vmid,brokerId,mips * 2,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    vmlist.add(vm2);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    id++;    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId);    cloudletList.add(cloudlet1);    cloudletList.add(cloudlet2);    broker.submitCloudletList(cloudletList);    broker.bindCloudletToVm(cloudlet1.getCloudletId(),vm1.getId());    broker.bindCloudletToVm(cloudlet2.getCloudletId(),vm2.getId());    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("CloudSimExample3 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public static StringBuilder buildCommonParams(MultiValueMap<String,Object> paramMap,String encodeCharset){  StringBuilder paramBuilder=new StringBuilder();  Set<String> keySet=paramMap.keySet();  for (  String key : keySet) {    List<Object> values=paramMap.getValues(key);    for (    Object value : values) {      if (value != null && value instanceof CharSequence) {        paramBuilder.append("&");        try {          paramBuilder.append(URLEncoder.encode(key,encodeCharset));          paramBuilder.append("=");          paramBuilder.append(URLEncoder.encode(value.toString(),encodeCharset));        } catch (        UnsupportedEncodingException e) {          Logger.e("Encoding " + encodeCharset + " format is not supported by the system");          paramBuilder.append(key);          paramBuilder.append("=");          paramBuilder.append(value.toString());        }      }    }  }  if (paramBuilder.length() > 0)   paramBuilder.deleteCharAt(0);  return paramBuilder;}  }
class C{  private void readSequenceData(Sequences sequences,TaxonList taxonList) throws ImportException, IOException {  int n, i;  String firstSequence=null;  if (isInterleaved) {    boolean firstLoop=true;    int readCount=0;    while (readCount < siteCount) {      n=-1;      for (i=0; i < taxonCount; i++) {        String token=readToken().trim();        Sequence sequence;        if (firstLoop) {          sequence=new Sequence();          sequence.setDataType(dataType);          sequences.addSequence(sequence);          Taxon taxon;          if (taxonList != null) {            int index=taxonList.getTaxonIndex(token.trim());            if (index == -1) {              throw new UnknownTaxonException(token);            } else {              taxon=taxonList.getTaxon(index);            }          } else {            taxon=new Taxon(token.trim());          }          sequence.setTaxon(taxon);        } else {          sequence=sequences.getSequence(i);          Taxon taxon=sequence.getTaxon();          if (!taxon.getId().equals(token)) {            throw new UnknownTaxonException("Unknown taxon label: expecting '" + taxon.getId() + "', found '"+ token+ "'");          }        }        StringBuffer buffer=new StringBuffer();        readSequenceLine(buffer,dataType,";",gapCharacters,missingCharacters,matchCharacters,firstSequence);        String seqString=buffer.toString();        sequence.appendSequenceString(seqString);        if (i == 0) {          firstSequence=seqString;        }        if (getLastDelimiter() == ';') {          if (i < taxonCount - 1) {            throw new TooFewTaxaException();          }          if (readCount + n < siteCount) {            throw new ShortSequenceException(sequence.getTaxon().getId());          }        }        if (n == -1) {          n=seqString.length();        }        if (n != seqString.length()) {          throw new ShortSequenceException(sequence.getTaxon().getId());        }      }      firstLoop=false;      readCount+=n;    }    if (getLastDelimiter() != ';') {      throw new BadFormatException("Expecting ';' after sequences data");    }  } else {    for (i=0; i < taxonCount; i++) {      String token=readToken().trim();      Sequence sequence=new Sequence();      sequence.setDataType(dataType);      sequences.addSequence(sequence);      Taxon taxon;      if (taxonList != null) {        int index=taxonList.getTaxonIndex(token);        if (index == -1) {          throw new UnknownTaxonException(token);        } else {          taxon=taxonList.getTaxon(index);        }      } else {        taxon=new Taxon(token);      }      sequence.setTaxon(taxon);      StringBuffer buffer=new StringBuffer();      readSequence(buffer,dataType,";",siteCount,gapCharacters,missingCharacters,matchCharacters,firstSequence);      String seqString=buffer.toString();      if (seqString.length() != siteCount) {        throw new ShortSequenceException(sequence.getTaxon().getId());      }      sequence.appendSequenceString(seqString);      if (i == 0) {        firstSequence=seqString;      }      if (getLastDelimiter() == ';' && i < taxonCount - 1) {        throw new TooFewTaxaException();      }    }    if (getLastDelimiter() != ';') {      throw new BadFormatException("Expecting ';' after sequences data, has '" + (char)getLastDelimiter() + "' in line "+ getLineNumber());    }  }}  }
class C{  CounterNode lookup(List<String> hierarchyElements){  CounterNode cur=this;  for (  String element : hierarchyElements) {    cur=cur.children.get(element);    if (cur == null) {      break;    }  }  return cur;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  protected void onAvailableExtensionsChanged(){}  }
class C{  @Override protected void removeApplicationFromVolume(URI voluri,DbClient dbClient){  Volume volume=dbClient.queryObject(Volume.class,voluri);  log.info(String.format("removing the volume %s from application",volume.getLabel()));  String volumeGroupId=getId().toString();  StringSet volumeGroupIds=volume.getVolumeGroupIds();  if (volumeGroupIds != null) {    volumeGroupIds.remove(volumeGroupId);  }  dbClient.updateObject(volume);  URI cgURI=volume.getConsistencyGroup();  if (NullColumnValueGetter.isNullURI(cgURI)) {    return;  }  StringSet backends=volume.getAssociatedVolumes();  if (backends != null) {    for (    String backendId : backends) {      Volume backendVol=dbClient.queryObject(Volume.class,URI.create(backendId));      log.info(String.format("update the volume %s cg",backendVol.getLabel()));      if (backendVol != null) {        backendVol.setConsistencyGroup(cgURI);        dbClient.updateObject(backendVol);        URIQueryResultList snapshotURIs=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(backendVol.getId()),snapshotURIs);        if (snapshotURIs.iterator().hasNext()) {          List<BlockSnapshot> snapshots=dbClient.queryObject(BlockSnapshot.class,snapshotURIs);          for (          BlockSnapshot snapshot : snapshots) {            if (snapshot != null && !snapshot.getInactive()) {              snapshot.setSnapsetLabel(NullColumnValueGetter.getNullStr());            }          }          dbClient.updateObject(snapshots);        }      }    }  }  StringSet fullCopies=volume.getFullCopies();  List<Volume> fullCopiesToUpdate=new ArrayList<Volume>();  if (fullCopies != null && !fullCopies.isEmpty()) {    for (    String fullCopyId : fullCopies) {      Volume fullCopy=dbClient.queryObject(Volume.class,URI.create(fullCopyId));      if (fullCopy != null && !fullCopy.getInactive()) {        fullCopy.setFullCopySetName(NullColumnValueGetter.getNullStr());        fullCopiesToUpdate.add(fullCopy);      }    }  }  if (!fullCopiesToUpdate.isEmpty()) {    dbClient.updateObject(fullCopiesToUpdate);  }}  }
class C{  public static double crossTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ,double dist1Q){  final double dlon12=lon2 - lon1;  final double dlon1Q=lonQ - lon1;  final double slat1=Math.sin(lat1), clat1=MathUtil.sinToCos(lat1,slat1);  final double slatQ=Math.sin(latQ), clatQ=MathUtil.sinToCos(latQ,slatQ);  final double slat2=Math.sin(lat2), clat2=MathUtil.sinToCos(lat2,slat2);  final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12);  final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q);  final double yE=sdlon12 * clat2;  final double yQ=sdlon1Q * clatQ;  final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12;  final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q;  final double crs12=Math.atan2(yE,xE);  final double crs1Q=Math.atan2(yQ,xQ);  return Math.asin(Math.sin(dist1Q) * Math.sin(crs1Q - crs12));}  }
class C{  public void resetTransition(){  mAlpha=0;  mTransitionState=TRANSITION_NONE;  invalidateSelf();}  }
class C{  private void populateSummaryData(){  recovery=(Recovery)persistenceService.find("from Recovery where id=?",recovery.getId());  type=recovery.getType();  String deptQuery="";  String partyNameQuery="";  if (department.getId() != null && department.getId() != -1)   deptQuery=" and mis.departmentid=" + department.getId();  if (detailKey != null && detailKey != -1)   partyNameQuery=" and gld.detailkeyid=" + detailKey;  List<Object[]> result=new ArrayList<Object[]>();  List<Object[]> resultTolDeduction=new ArrayList<Object[]>();  try {    final String qry="select vh.name,sum(erd.remittedamt),er.month from eg_remittance_detail erd," + " voucherheader vh1 right outer join eg_remittance er on vh1.id=er.paymentvhid,voucherheader vh,vouchermis mis,generalledger gl,generalledgerdetail gld,fund f,eg_remittance_gldtl ergl where " + " erd.remittancegldtlid= ergl.id and erd.remittanceid=er.id and gl.glcodeid=" + recovery.getChartofaccounts().getId() + " and vh.id=mis.voucherheaderid and "+ "  vh1.status=0 and ergl.gldtlid=gld.id and gl.id=gld.generalledgerid and gl.voucherheaderid=vh.id and er.fundid=f.id and f.id="+ fund.getId()+ " and vh.status=0 and vh.voucherDate <= to_date('"+ Constants.DDMMYYYYFORMAT2.format(asOnDate)+ "','dd/MM/yyyy') and "+ "vh.voucherDate >= to_date('"+ Constants.DDMMYYYYFORMAT2.format(financialYearDAO.getFinancialYearByDate(asOnDate).getStartingDate())+ "','dd/MM/yyyy') "+ deptQuery+ partyNameQuery+ " group by er.month,vh.name order by er.month,vh.name";    if (LOGGER.isDebugEnabled())     LOGGER.debug(qry);    result=persistenceService.getSession().createSQLQuery(qry).list();    final String qryTolDeduction="SELECT type,MONTH,SUM(gldtamt) FROM (SELECT DISTINCT er.month AS MONTH,ergl.gldtlamt AS gldtamt," + "ergl.gldtlid as gldtlid,vh.name AS type FROM eg_remittance_detail erd,voucherheader vh1 RIGHT OUTER JOIN eg_remittance er ON vh1.id=er.paymentvhid," + "voucherheader vh,vouchermis mis,generalledger gl,generalledgerdetail gld,fund f, eg_remittance_gldtl ergl WHERE erd.remittancegldtlid= ergl.id"+ " AND erd.remittanceid=er.id  AND gl.glcodeid =" + recovery.getChartofaccounts().getId() + " AND vh.id =mis.voucherheaderid AND vh1.status =0 "+ " AND ergl.gldtlid =gld.id  AND gl.id = gld.generalledgerid  AND gl.voucherheaderid     =vh.id  AND er.fundid =f.id"+ " AND f.id ="+ fund.getId()+ " AND vh.status =0 AND vh.voucherDate <= to_date('"+ Constants.DDMMYYYYFORMAT2.format(asOnDate)+ "','dd/MM/yyyy') and "+ " vh.voucherDate >= to_date('"+ Constants.DDMMYYYYFORMAT2.format(financialYearDAO.getFinancialYearByDate(asOnDate).getStartingDate())+ "','dd/MM/yyyy') "+ deptQuery+ partyNameQuery+ ") as temptable group by type,month";    resultTolDeduction=persistenceService.getSession().createSQLQuery(qryTolDeduction).list();  } catch (  final ApplicationRuntimeException e) {    message=e.getMessage();    return;  }catch (  final Exception e) {    message=e.getMessage();    return;  }  for (  final Object[] entry : result)   for (  final Object[] dedentry : resultTolDeduction) {    final TDSEntry tds=new TDSEntry();    final String monthChk=DateUtils.getAllMonthsWithFullNames().get(Integer.valueOf(entry[2].toString()) + 1);    if (monthChk.equalsIgnoreCase(DateUtils.getAllMonthsWithFullNames().get(Integer.valueOf(dedentry[1].toString()) + 1)) && dedentry[0].toString().equalsIgnoreCase(entry[0].toString())) {      tds.setNatureOfDeduction(entry[0].toString());      tds.setTotalRemitted(new BigDecimal(entry[1].toString()));      tds.setMonth(DateUtils.getAllMonthsWithFullNames().get(Integer.valueOf(entry[2].toString()) + 1));      final BigDecimal totDeduction=new BigDecimal(dedentry[2].toString());      tds.setTotalDeduction(totDeduction);      remittedTDS.add(tds);    }  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiconSpan[] oldSpans=text.getSpans(0,textLength,EmojiconSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0xfe0f) {          int followSkip=Character.charCount(followUnicode);          if (i + skip + followSkip < textLengthToProcess) {            int nextFollowUnicode=Character.codePointAt(text,i + skip + followSkip);            if (nextFollowUnicode == 0x20e3) {              int nextFollowSkip=Character.charCount(nextFollowUnicode);              int tempIcon=getKeyCapEmoji(unicode);              if (tempIcon == 0) {                followSkip=0;                nextFollowSkip=0;              } else {                icon=tempIcon;              }              skip+=(followSkip + nextFollowSkip);            }          }        } else         if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);          int tempIcon=getKeyCapEmoji(unicode);          if (tempIcon == 0) {            followSkip=0;          } else {            icon=tempIcon;          }          skip+=followSkip;        } else {          int followSkip=Character.charCount(followUnicode);          String hexUnicode=Integer.toHexString(unicode);          String hexFollowUnicode=Integer.toHexString(followUnicode);          String resourceName="emoji_" + hexUnicode + "_"+ hexFollowUnicode;          int resourceId=0;          if (sEmojisModifiedMap.containsKey(resourceName)) {            resourceId=sEmojisModifiedMap.get(resourceName);          } else {            resourceId=context.getResources().getIdentifier(resourceName,"drawable",context.getApplicationContext().getPackageName());            if (resourceId != 0) {              sEmojisModifiedMap.put(resourceName,resourceId);            }          }          if (resourceId == 0) {            followSkip=0;          } else {            icon=resourceId;          }          skip+=followSkip;        }      }    }    if (icon > 0) {      text.setSpan(new EmojiconSpan(context,icon,emojiSize,emojiAlignment,textSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  }}  }
class C{  public DownloadResult(Path data,String dataType,long dataSize){  this.data=data;  this.dataType=dataType;  this.dataSize=dataSize;}  }
class C{  public Point topLeft(){  calculate();  return topLeft;}  }
class C{  private void updateProgress(int progressVal){  progressBar.setValue(progressVal);}  }
class C{  public void addParameter(DoubleParameter param,double... initialSearchValues){  if (param == null)   throw new IllegalArgumentException("null not allowed for parameter");  searchParams.add(param);  DoubleList dl=new DoubleList(initialSearchValues.length);  for (  double d : initialSearchValues)   dl.add(d);  Arrays.sort(dl.getBackingArray());  if (param.isWarmParameter() && !param.preferredLowToHigh())   Collections.reverse(dl);  if (param.isWarmParameter())   searchValues.add(0,dl); else   searchValues.add(dl);}  }
class C{  public static void checkProbability(double p,String argName){  if ((p >= 0.0) && (p <= 1.0)) {    return;  }  throw new SketchesArgumentException("The value of the parameter \"" + argName + "\" must be between 0.0 inclusive and 1.0 inclusive: "+ p);}  }
class C{  public Builder authenticator(final IAuthenticator authenticator){  mClient.setAuthenticator(authenticator);  return this;}  }
class C{  public boolean isSingleThreaded(){  return mode == DispatchMode.SINGLE_THREAD;}  }
class C{  public String str(){  return "";}  }
class C{  @Override protected void processRememberedSets(){  if (modBuffer != null) {    logMessage(5,"clearing modBuffer");    while (!modBuffer.isEmpty()) {      ObjectReference src=modBuffer.pop();      HeaderByte.markAsUnlogged(src);    }  }}  }
class C{  public LabeledOMSpline(double[] llPoints,int units,int lType){  super(llPoints,units,lType);}  }
class C{  public boolean isLinked(){  return mDBApi.getSession().isLinked();}  }
class C{  public static void LDC2_W(long x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC2_W(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  private TwoPhaseCommitTool(){}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getState_();}  }
class C{  private static String prependIfMissing(final String str,final CharSequence prefix,final boolean ignoreCase,final CharSequence... prefixes){  if (str == null || isEmpty(prefix) || startsWith(str,prefix,ignoreCase)) {    return str;  }  if (prefixes != null && prefixes.length > 0) {    for (    final CharSequence p : prefixes) {      if (startsWith(str,p,ignoreCase)) {        return str;      }    }  }  return prefix.toString() + str;}  }
class C{  public CacheTransactionManagerCreation(){}  }
class C{  public Global value(TargetAttribute targetAttribute){  global.value=targetAttribute.toXStream();  return this;}  }
class C{  private void playPrevious(){  if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) {    restartVideo();    return;  }  if (nextWasCalled) {    iterator.previous();    nextWasCalled=false;  }  if (!iterator.hasPrevious()) {    iterator=youTubeVideos.listIterator(youTubeVideos.size());  }  videoItem=iterator.previous();  previousWasCalled=true;  playVideo();}  }
class C{  public static void unmask(WrappedByteBuffer buf,int mask){  byte b;  int remainder=buf.remaining() % 4;  int remaining=buf.remaining() - remainder;  int end=remaining + buf.position();  while (buf.position() < end) {    int plaintext=buf.getIntAt(buf.position()) ^ mask;    buf.putInt(plaintext);  }switch (remainder) {case 3:    b=(byte)(buf.getAt(buf.position()) ^ ((mask >> 24) & 0xff));  buf.put(b);b=(byte)(buf.getAt(buf.position()) ^ ((mask >> 16) & 0xff));buf.put(b);b=(byte)(buf.getAt(buf.position()) ^ ((mask >> 8) & 0xff));buf.put(b);break;case 2:b=(byte)(buf.getAt(buf.position()) ^ ((mask >> 24) & 0xff));buf.put(b);b=(byte)(buf.getAt(buf.position()) ^ ((mask >> 16) & 0xff));buf.put(b);break;case 1:b=(byte)(buf.getAt(buf.position()) ^ (mask >> 24));buf.put(b);break;case 0:default :break;}}  }
class C{  protected String normalizeRequestURI(String uri,String mapping){  if (mapping == null || !Util.isPrefixMapped(mapping)) {    return uri;  } else {    int length=mapping.length() + 1;    StringBuilder builder=new StringBuilder(length);    builder.append(mapping).append('/');    String mappingMod=builder.toString();    boolean logged=false;    while (uri.startsWith(mappingMod)) {      if (!logged && LOGGER.isLoggable(Level.WARNING)) {        logged=true;        LOGGER.log(Level.WARNING,"jsf.viewhandler.requestpath.recursion",new Object[]{uri,mapping});      }      uri=uri.substring(length - 1);    }    return uri;  }}  }
class C{  public void save(Map<Long,Map<Slice,Bucket.BucketedValue>> unsavedData,long windowId,boolean skipWriteToWindowFile) throws IOException {  Throwable lthrowable;  if ((lthrowable=throwable.get()) != null) {    LOG.error("Error while transferring");    Throwables.propagate(lthrowable);  }  savedWindows.put(windowId,unsavedData);  if (!skipWriteToWindowFile) {    super.save(unsavedData,windowId);  }}  }
class C{  @Override public void lockColors(final PdfPaint strokePaint,final PdfPaint nonstrokePaint,final boolean lockColour){  colorsLocked=lockColour;  Color strokeColor=Color.white, nonstrokeColor=Color.white;  if (strokePaint != null && !strokePaint.isPattern()) {    strokeColor=(Color)strokePaint;  }  strokeCol=new PdfColor(strokeColor.getRed(),strokeColor.getGreen(),strokeColor.getBlue());  if (!nonstrokePaint.isPattern()) {    nonstrokeColor=(Color)nonstrokePaint;  }  fillCol=new PdfColor(nonstrokeColor.getRed(),nonstrokeColor.getGreen(),nonstrokeColor.getBlue());}  }
class C{  @SuppressWarnings("unchecked") @Parameterized.Parameters public static Collection<Object[]> data(){  normalShapeAttributes=new BasicShapeAttributes();  normalShapeAttributes.setInteriorMaterial(Material.BLUE);  normalShapeAttributes.setOutlineMaterial(Material.BLACK);  highlightShapeAttributes=new BasicShapeAttributes();  highlightShapeAttributes.setInteriorMaterial(Material.RED);  highlightShapeAttributes.setOutlineMaterial(Material.BLACK);  return Arrays.asList(new Object[][]{{Arrays.asList(makePointPlacemark())},{Arrays.asList(makePath())},{Arrays.asList(makePolygon())},{Arrays.asList(makeExtrudedPolygon())},{Arrays.asList(makeSurfacePolygon())},{Arrays.asList(makeScreenImage())},{Arrays.asList(makeSurfaceSector())},{Arrays.asList(makeSurfacePolyline())},{Arrays.asList(makeSurfaceImage())},{Arrays.asList(makeSurfaceImageWithLatLonQuad())},{Arrays.asList(makePointPlacemark(),makePath(),makePolygon(),makeExtrudedPolygon(),makeSurfacePolygon(),makeScreenImage(),makeSurfaceSector(),makeSurfacePolyline(),makeSurfaceImage(),makeSurfaceImageWithLatLonQuad())}});}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  private JsonParserException createHelpfulException(char first,char[] expected,int failurePosition) throws JsonParserException {  StringBuilder errorToken=new StringBuilder(first + (expected == null ? "" : new String(expected,0,failurePosition)));  while (isAsciiLetter(peekChar()) && errorToken.length() < 15)   errorToken.append((char)advanceChar());  return createParseException(null,"Unexpected token '" + errorToken + "'"+ (expected == null ? "" : ". Did you mean '" + first + new String(expected)+ "'?"),true);}  }
class C{  public void println(){  return;}  }
class C{  private ExecutableSequence createNewUniqueSequence(){  if (Log.isLoggingOn()) {    Log.logLine("-------------------------------------------");  }  if (this.operations.isEmpty()) {    return null;  }  TypedOperation operation=Randomness.randomMember(this.operations);  if (Log.isLoggingOn()) {    Log.logLine("Selected operation: " + operation.toString());  }  if (operation.isGeneric() || operation.hasWildcardTypes()) {    operation=instantiator.instantiate((TypedClassOperation)operation);    if (operation == null) {      return null;    }  }  InputsAndSuccessFlag sequences=selectInputs(operation);  if (!sequences.success) {    if (Log.isLoggingOn())     Log.logLine("Failed to find inputs for statement.");    return null;  }  Sequence concatSeq=Sequence.concatenate(sequences.sequences);  List<Variable> inputs=new ArrayList<>();  for (  Integer oneinput : sequences.indices) {    Variable v=concatSeq.getVariable(oneinput);    inputs.add(v);  }  Sequence newSequence=concatSeq.extend(operation,inputs);  if (GenInputsAbstract.repeat_heuristic && Randomness.nextRandomInt(10) == 0) {    int times=Randomness.nextRandomInt(100);    newSequence=repeat(newSequence,operation,times);    if (Log.isLoggingOn())     Log.log(">>>" + times + newSequence.toCodeString());  }  if (operation.getInputTypes().isEmpty()) {    operations.remove(operation);  }  if (newSequence.size() > GenInputsAbstract.maxsize) {    if (Log.isLoggingOn()) {      Log.logLine("Sequence discarded because size " + newSequence.size() + " exceeds maximum allowed size "+ GenInputsAbstract.maxsize);    }    return null;  }  randoopConsistencyTests(newSequence);  if (this.allSequences.contains(newSequence)) {    if (Log.isLoggingOn()) {      Log.logLine("Sequence discarded because the same sequence was previously created.");    }    return null;  }  this.allSequences.add(newSequence);  for (  Sequence s : sequences.sequences) {    s.lastTimeUsed=java.lang.System.currentTimeMillis();  }  randoopConsistencyTest2(newSequence);  if (Log.isLoggingOn()) {    Log.logLine(String.format("Successfully created new unique sequence:%n%s%n",newSequence.toString()));  }  for (  Sequence is : sequences.sequences) {    subsumed_sequences.add(is);  }  return new ExecutableSequence(newSequence);}  }
class C{  public static byte[] convertHexToBytes(String s){  int len=s.length();  if (len % 2 != 0) {    throw DbException.get(ErrorCode.HEX_STRING_ODD_1,s);  }  len/=2;  byte[] buff=new byte[len];  int mask=0;  int[] hex=HEX_DECODE;  try {    for (int i=0; i < len; i++) {      int d=hex[s.charAt(i + i)] << 4 | hex[s.charAt(i + i + 1)];      mask|=d;      buff[i]=(byte)d;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  if ((mask & ~255) != 0) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  return buff;}  }
class C{  public boolean isScrollableY(){  return false;}  }
class C{  public void layoutContainer(Container parent){  int n=parent.getComponentCount();  Insets insets=parent.getInsets();  Dimension size=parent.getSize();  int c=horizontal ? insets.left : insets.top;  int x, y;  int ebx=size.width - insets.right;  size.width-=(insets.left + insets.right);  size.height-=(insets.top + insets.bottom);  for (int i=0; i < n; i++) {    Component comp=parent.getComponent(i);    Dimension pref=comp.getPreferredSize();    if (comp instanceof EnableButton) {      ebx-=4;      ebx-=pref.width;      x=ebx;      y=(insets.top - pref.height) / 2;    } else     if (horizontal) {      x=c;      c+=pref.width;      y=insets.top;      pref.height=size.height;    } else {      x=insets.left;      pref.width=size.width;      y=c;      c+=pref.height;    }    comp.setBounds(x,y,pref.width,pref.height);  }}  }
class C{  public void selectBlock(long start,long end){  select(start,end);  refreshSelections();  showMark(start);}  }
class C{  public static void assertSerializationEquals(final String witness,final Object obj,final int[] skip,final int endCompare) throws Exception {  ByteArrayOutputStream memOut=new ByteArrayOutputStream();  ObjectOutputStream objOut=new ObjectOutputStream(memOut);  objOut.writeObject(obj);  objOut.close();  assertStreamEquals(witness,memOut.toByteArray(),skip,endCompare);}  }
class C{  public void close(){  if (acceptT != null) {    log("Closing AcceptThread" + acceptT);    acceptT.close();    acceptT=null;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Explanation explain(Query query,int doc) throws IOException {  return explain(createNormalizedWeight(query,true),doc);}  }
class C{  public void removeMenuListener(MenuListener l){  listenerList.remove(MenuListener.class,l);}  }
class C{  public AuthChallengeException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.331 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public boolean isComplete(){  return _isComplete;}  }
class C{  public Region find(int startOffset,String findString,boolean forwardSearch,boolean caseSensitive,boolean wholeWord,boolean regExSearch) throws BadLocationException {  Assert.isTrue(!(regExSearch && wholeWord));  if (startOffset == -1 && forwardSearch)   startOffset=0;  if (startOffset == -1 && !forwardSearch)   startOffset=length() - 1;  return findReplace(FIND_FIRST,startOffset,findString,null,forwardSearch,caseSensitive,wholeWord);}  }
class C{  public ProducesRequestCondition(String... produces){  this(produces,null);}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().openStream();  }}  }
class C{  public Pointer<T> map(CLQueue queue,MapFlags flags,long offset,long length,CLEvent... eventsToWaitFor) throws CLException.MapFailure {  return map(queue,flags,offset,length,true,eventsToWaitFor).getFirst();}  }
class C{  public static double norm(Point2D A,Point2D B){  return Math.sqrt(norm2(A,B));}  }
class C{  public static Pointer to(NativePointerObject... pointers){  if (pointers == null) {    throw new IllegalArgumentException("Pointer may not point to null objects");  }  return new Pointer(pointers);}  }
class C{  public static int cs_fkeep(Dcs A,Dcs_ifkeep fkeep,Object other){  int j, p, nz=0, n, Ap[], Ai[];  double Ax[];  if (!Dcs_util.CS_CSC(A))   return (-1);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  for (j=0; j < n; j++) {    p=Ap[j];    Ap[j]=nz;    for (; p < Ap[j + 1]; p++) {      if (fkeep.fkeep(Ai[p],j,Ax != null ? Ax[p] : 1,other)) {        if (Ax != null)         Ax[nz]=Ax[p];        Ai[nz++]=Ai[p];      }    }  }  Ap[n]=nz;  Dcs_util.cs_sprealloc(A,0);  return (nz);}  }
class C{  private void processFadeState(){  updateResetTimeout();  mState=State.FADE;  broadcast(SquelchState.SQUELCH);  broadcast(ChangedAttribute.CHANNEL_STATE);}  }
class C{  public void moveViewToX(float xIndex){  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,0f,getTransformer(AxisDependency.LEFT),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  public void assertTextArea(String text){  TestUtils.assertTextArea(text);}  }
class C{  private static int parseId3Header(ParsableByteArray id3Buffer) throws ParserException {  int id1=id3Buffer.readUnsignedByte();  int id2=id3Buffer.readUnsignedByte();  int id3=id3Buffer.readUnsignedByte();  if (id1 != 'I' || id2 != 'D' || id3 != '3') {    throw new ParserException(String.format(Locale.US,"Unexpected ID3 file identifier, expected \"ID3\", actual \"%c%c%c\".",id1,id2,id3));  }  id3Buffer.skipBytes(2);  int flags=id3Buffer.readUnsignedByte();  int id3Size=id3Buffer.readSynchSafeInt();  if ((flags & 0x2) != 0) {    int extendedHeaderSize=id3Buffer.readSynchSafeInt();    if (extendedHeaderSize > 4) {      id3Buffer.skipBytes(extendedHeaderSize - 4);    }    id3Size-=extendedHeaderSize;  }  if ((flags & 0x8) != 0) {    id3Size-=10;  }  return id3Size;}  }
class C{  public static String removeFilePrefix(String url){  if (url.startsWith(FILE_PROTOCOL_PREFIX)) {    return url.substring(FILE_PROTOCOL_PREFIX.length());  }  return url;}  }
class C{  public Matrix4x3f zero(){  MemUtil.INSTANCE.zero(this);  properties=0;  return this;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  public Object clone(){  return new BidiAttributedCharacterIterator((AttributedCharacterIterator)reorderedACI.clone(),frc,chunkStart,(int[])newCharOrder.clone());}  }
class C{  @Override public DriverTask restoreSnapshot(List<VolumeSnapshot> snapshots){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_RESTORE_SNAPSHOT_VOLUMES);  return snapshotHelper.restoreSnapshot(snapshots,task,this.driverRegistry);}  }
class C{  public synchronized void hideAllFrames(){  Object[] vals=(Object[])(frameList.toArray());  for (int x=0; x < vals.length; x++) {    ((JFrame)(vals[x])).setVisible(false);  }  frameListDisplay.repaint();}  }
class C{  public void ruleR5(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node a : nodes) {    List<Node> adjacents=graph.getNodesInTo(a,Endpoint.CIRCLE);    for (    Node b : adjacents) {      if (!(graph.getEndpoint(a,b) == Endpoint.CIRCLE))       continue;      List<List<Node>> ucCirclePaths=getUcCirclePaths(a,b,graph);      for (      List<Node> u : ucCirclePaths) {        if (u.size() < 3)         continue;        Node c=u.get(1);        Node d=u.get(u.size() - 2);        if (graph.isAdjacentTo(a,d))         continue;        if (graph.isAdjacentTo(b,c))         continue;        logger.log("colliderOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle path",graph.getEdge(a,b)));        graph.setEndpoint(a,b,Endpoint.TAIL);        this.orientSimilarPairs(graph,this.getKnowledge(),a,b,Endpoint.TAIL);        graph.setEndpoint(b,a,Endpoint.TAIL);        this.orientSimilarPairs(graph,this.getKnowledge(),b,a,Endpoint.TAIL);        orientTailPath(u,graph);        changeFlag=true;      }    }  }}  }
class C{  public boolean wantCallsFor(Method method){  return true;}  }
class C{  public boolean isPassiveWitness(){  return passiveWitness;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  @Override public void detach(){  super.detach();  modules.getFilesModule().unbindFile(location.getFileId(),callback,false);}  }
class C{  public void queue(final QueueName queueName,final URI deviceURI,final String deviceType,boolean lockDevice,Object target,String method,Object... args) throws ControllerException {  ControlRequest req=new ControlRequest(queueName.name(),new DeviceInfo(deviceURI,deviceType,lockDevice),target,method,args);  try {    if (QueueName.controller.equals(queueName)) {      checkZkStepToWorkflowSize();    }    getQueue(queueName).getQueue().put(req);  } catch (  final CoordinatorException e) {    throw ClientControllerException.retryables.queueToBusy();  }catch (  final ClientControllerException e) {    throw ClientControllerException.retryables.queueToBusy();  }catch (  final KeeperException e) {    _log.error("Exception occurred while queueing item",e);    throw ClientControllerException.fatals.unableToQueueJob(deviceURI);  }catch (  final Exception e) {    throw ClientControllerException.fatals.unableToQueueJob(deviceURI,e);  }  _log.info("Queued task {}: {} ",method,args);}  }
class C{  @Override @TargetApi(21) public void onReceivedClientCertRequest(WebView view,ClientCertRequest request){  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedClientCertRequest(null,new CordovaClientCertRequest(request))) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedClientCertRequest(view,request);}  }
class C{  @Override public boolean usesNeighborsCache(){  return useNeighborsCache;}  }
class C{  public void add(GroupCommand command){  _values.add(command);}  }
class C{  public TripsDurationAnalyzer(){  this.createGraphs=true;  this.sortedModes.add(TransportMode.car);  this.sortedModes.add(TransportMode.pt);  this.sortedModes.add(TransportMode.walk);  this.observedAgents=null;}  }
class C{  private void paintShadow(final BufferedImage shadowBg,final Container layeredPane){  final int layeredPaneWidth=layeredPane.getWidth();  final int layeredPaneHeight=layeredPane.getHeight();  if (RECT.x + RECT.width > layeredPaneWidth) {    RECT.width=layeredPaneWidth - RECT.x;  }  if (RECT.y + RECT.height > layeredPaneHeight) {    RECT.height=layeredPaneHeight - RECT.y;  }  if (!RECT.isEmpty()) {    final Graphics g=shadowBg.createGraphics();    g.translate(-RECT.x,-RECT.y);    g.setClip(RECT);    if (layeredPane instanceof JComponent) {      final JComponent c=(JComponent)layeredPane;      final boolean doubleBuffered=c.isDoubleBuffered();      c.setDoubleBuffered(false);      c.paintAll(g);      c.setDoubleBuffered(doubleBuffered);    } else {      layeredPane.paintAll(g);    }    g.dispose();  }}  }
class C{  @Override public default void close() throws Exception {}  }
class C{  private Map<String,CIMObjectPath> mapInitiatorsToInitiatorGroups(ListMultimap<CIMObjectPath,String> igToInitiators,StorageSystem storage,List<Initiator> initiatorList) throws Exception {  Map<String,CIMObjectPath> result=new HashMap<String,CIMObjectPath>();  Map<CIMObjectPath,String> portNameToIgPath=new HashMap<CIMObjectPath,String>();  Collection<String> portNames=transform(initiatorList,fctnInitiatorToPortName());  CIMObjectPath hwManagementIDSvcPath=_cimPath.getStorageHardwareIDManagementService(storage);  CloseableIterator<CIMInstance> initiatorInstances=_helper.getAssociatorInstances(storage,hwManagementIDSvcPath,null,SmisConstants.CP_SE_STORAGE_HARDWARE_ID,null,null,SmisConstants.PS_STORAGE_ID);  List<CIMObjectPath> initiatorPaths=new ArrayList<CIMObjectPath>();  while (initiatorInstances.hasNext()) {    CIMInstance initiatorInstance=initiatorInstances.next();    String storageId=CIMPropertyFactory.getPropertyValue(initiatorInstance,SmisConstants.CP_STORAGE_ID);    if (portNames.contains(storageId)) {      CIMObjectPath path=initiatorInstance.getObjectPath();      initiatorPaths.add(path);      portNameToIgPath.put(path,storageId);    }  }  initiatorInstances.close();  for (  CIMObjectPath initiatorPath : initiatorPaths) {    CloseableIterator<CIMObjectPath> igPaths=_helper.getAssociatorNames(storage,initiatorPath,null,SmisConstants.SE_INITIATOR_MASKING_GROUP,null,null);    while (igPaths != null && igPaths.hasNext()) {      CIMObjectPath igPath=igPaths.next();      if (!igPath.toString().contains(storage.getSerialNumber())) {        _log.info("Skipping {} since it is for a different array",igPath);        continue;      }      if (!igToInitiators.containsKey(igPath)) {        _log.info(String.format("mapInitiatorsToInitiatorGroups - initiatorPath = %s has igPath = %s",initiatorPath,igPath));        CloseableIterator<CIMInstance> initiatorsForIg=_helper.getAssociatorInstances(storage,igPath,null,SmisConstants.CP_SE_STORAGE_HARDWARE_ID,null,null,SmisConstants.PS_STORAGE_ID);        if (initiatorsForIg != null) {          while (initiatorsForIg.hasNext()) {            CIMInstance initiatorInstance=initiatorsForIg.next();            String initiatorPort=CIMPropertyFactory.getPropertyValue(initiatorInstance,SmisConstants.CP_STORAGE_ID);            _log.info(String.format("mapInitiatorsToInitiatorGroups - igPath = %s has initiator %s",igPath,initiatorPort));            igToInitiators.put(igPath,initiatorPort);          }          initiatorsForIg.close();        }      }      String portName=portNameToIgPath.get(initiatorPath);      result.put(portName,igPath);      igPaths.close();    }  }  return result;}  }
class C{  public CloudletSchedulerDynamicWorkload(double mips,int numberOfPes){  super();  setMips(mips);  setNumberOfPes(numberOfPes);  setTotalMips(getNumberOfPes() * getMips());  setUnderAllocatedMips(new HashMap<String,Double>());  setCachePreviousTime(-1);}  }
class C{  public boolean acquireWorkflowLocks(Workflow workflow,List<String> lockKeys,long time){  boolean gotLocks=false;  try {    List<String> locksToAcquire=new ArrayList<String>(lockKeys);    locksToAcquire.removeAll(_ownerLocker.getLocksForOwner(workflow.getWorkflowURI().toString()));    if (locksToAcquire.isEmpty()) {      return true;    }    gotLocks=_ownerLocker.acquireLocks(locksToAcquire,workflow.getWorkflowURI().toString(),getOrchestrationIdStartTime(workflow),time);  } catch (  LockRetryException ex) {    _log.info(String.format("Lock retry exception key: %s remaining time %d",ex.getLockIdentifier(),ex.getRemainingWaitTimeSeconds()));    throw ex;  }catch (  Exception ex) {    _log.error("Unable to acquire workflow locks",ex);  }  return gotLocks;}  }
class C{  public IndexDocumentOptions build(){  return new IndexDocumentOptions(this);}  }
class C{  public static double entropyOverColumns(double[][] matrix){  double returnValue=0, sumForColumn, total=0;  for (int j=0; j < matrix[0].length; j++) {    sumForColumn=0;    for (int i=0; i < matrix.length; i++) {      sumForColumn+=matrix[i][j];    }    returnValue=returnValue - lnFunc(sumForColumn);    total+=sumForColumn;  }  if (Utils.eq(total,0)) {    return 0;  }  return (returnValue + lnFunc(total)) / (total * log2);}  }
class C{  public MarketingPermissionNotFoundException(){}  }
class C{  private void unlockUI(StackPane layer,Node... controls){  for (  Node control : controls)   control.setDisable(false);  layer.getChildren().remove(pi);}  }
class C{  public UserExample(UserObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getEmail() != null) {    criteria.andEmailEqualTo(sample.getEmail());  }  if (sample.getActivated() != null) {    criteria.andActivatedEqualTo(sample.getActivated());  }  if (sample.getAvatar() != null) {    criteria.andAvatarEqualTo(sample.getAvatar());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getPassword() != null) {    criteria.andPasswordEqualTo(sample.getPassword());  }  if (sample.getNewPassword() != null) {    criteria.andNewPasswordEqualTo(sample.getNewPassword());  }  if (sample.getUsername() != null) {    criteria.andUsernameEqualTo(sample.getUsername());  }  if (sample.getIsManager() != null) {    criteria.andIsManagerEqualTo(sample.getIsManager());  }}  }
class C{  public ResourceNotFoundException(){  super();}  }
class C{  private void ensureBuilders(){  if (this.builders == null) {    this.builders=new ArrayList<SingleFieldBuilder<MType,BType,IType>>(messages.size());    for (int i=0; i < messages.size(); i++) {      builders.add(null);    }  }}  }
class C{  public boolean valid(){  return line > 0 && column > 0;}  }
class C{  public ObjectReference prepareObjectReference(Offset offset){  return loadObjectReference(offset);}  }
class C{  public static boolean inInterpreter(){  return true;}  }
class C{  public static ScheduledReporter createCsvReporter(MetricRegistry metricRegistry,Map<String,Object> config) throws BaleenException {  String directoryPath=(String)config.getOrDefault("directory","metrics");  File directory=new File(directoryPath);  if (!directory.exists() && !directory.mkdirs()) {    throw new BaleenException("Unable to create directories for CSV Reporter");  }  return CsvReporter.forRegistry(metricRegistry).convertRatesTo(getRatesUnit(config)).convertDurationsTo(getDurationUnit(config)).build(directory);}  }
class C{  protected String doIt() throws Exception {  log.info("HR_PaySelection_ID=" + p_HR_PaySelection_ID + ", PaymentRule="+ p_PaymentRule);  MHRPaySelection psel=new MHRPaySelection(getCtx(),p_HR_PaySelection_ID,get_TrxName());  if (psel.get_ID() == 0)   throw new IllegalArgumentException("Not found HR_PaySelection_ID=" + p_HR_PaySelection_ID);  if (psel.isProcessed())   throw new IllegalArgumentException("@Processed@");  MHRPaySelectionLine[] lines=psel.getLines(false);  for (int i=0; i < lines.length; i++) {    MHRPaySelectionLine line=lines[i];    if (!line.isActive() || line.isProcessed())     continue;    createCheck(line);  }  psel.setProcessed(true);  psel.save();  return "@C_PaySelectionCheck_ID@ - #" + m_list.size();}  }
class C{  private void computeForwardDependencesUse(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){  if (!(op instanceof RegisterOperand))   return;  RegisterOperand regOp=(RegisterOperand)op;  DepGraphNode sourceNode=getDepGraphNode(regOp.getRegister());  if (sourceNode != null) {    if (regOp.getRegister().isValidation()) {      sourceNode.insertOutEdge(destNode,GUARD_TRUE);    } else {      for (Enumeration<Register> e=GenericPhysicalDefUse.enumerate(GenericPhysicalDefUse.getMaskTSPDefs(),ir); e.hasMoreElements(); ) {        Register r=e.nextElement();        if (regOp.getRegister() == r) {          sourceNode.insertOutEdge(destNode,REG_MAY_DEF);          return;        }      }      sourceNode.insertRegTrueOutEdge(destNode,regOp);    }  }}  }
class C{  public CompositeFontDescriptor(String faceName,int coreComponentCount,String[] componentFaceNames,String[] componentFileNames,int[] exclusionRanges,int[] exclusionRangeLimits){  this.faceName=faceName;  this.coreComponentCount=coreComponentCount;  this.componentFaceNames=componentFaceNames;  this.componentFileNames=componentFileNames;  this.exclusionRanges=exclusionRanges;  this.exclusionRangeLimits=exclusionRangeLimits;}  }
class C{  protected void listadoconsultaverExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser userVO=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(userVO));  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  Collection consultas=consultasService.getConsultasXUsuarioConsultor(userVO.getId());  CollectionUtils.transform(consultas,ConsultaToPO.getInstance(request.getLocale(),services));  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_LISTADO_CONSULTAS_VER,request);  request.setAttribute(ConsultasConstants.LISTA_CONSULTAS_KEY,consultas);  request.setAttribute(ConsultasConstants.VER_BOTON_ELIMINAR,new Boolean(true));  request.setAttribute(PrestamosConstants.METHOD,METHOD_LISTADO_VER);  setReturnActionFordward(request,mapping.findForward("listado_consulta"));}  }
class C{  public VSDecoder(String id,String name,String path){  config=new VSDConfig();  config.setProfileName(name);  config.setID(id);  sound_list=new HashMap<String,VSDSound>();  trigger_list=new HashMap<String,Trigger>();  event_list=new HashMap<String,SoundEvent>();  initialized=_init();  config.setVSDPath(path);  try {    VSDFile vsdfile=new VSDFile(path);    if (vsdfile.isInitialized()) {      log.debug("Constructor: vsdfile init OK, loading XML...");      this.setXml(vsdfile,name);    } else {      log.debug("Constructor: vsdfile init FAILED.");      initialized=false;    }  } catch (  java.util.zip.ZipException e) {    log.error("ZipException loading VSDecoder from " + path);  }catch (  java.io.IOException ioe) {    log.error("IOException loading VSDecoder from " + path);  }}  }
class C{  public DoubleBuffer _getPartialBuffer(){  for (int i=buffers.length; --i >= 0; ) {    if (buffers[i].isPartial())     return buffers[i];  }  return null;}  }
class C{  public ModelFactory(AppContext ctx,Customer customer){  this.ctx=ctx;  this.customer=customer;}  }
class C{  public int[] twoSum(int[] numbers,int target){  int start=0;  int end=numbers.length - 1;  while (start < end) {    long sum=numbers[start] + numbers[end];    if (sum > target) {      end--;    } else     if (sum < target) {      start++;    } else {      break;    }  }  return new int[]{start + 1,end + 1};}  }
class C{  public static PubSubClient client(){  if (defaultClient == null) {    createDefaultClient();  }  return defaultClient;}  }
class C{  @Override public boolean accept(String category){  return "trigger".equals(category);}  }
class C{  private static String escapeJSON(String text){  StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  public static HttpURLConnection createDownloadFileConnection(RequestParam requestParam) throws Exception {  return createHttpUrlConnection(requestParam);}  }
class C{  protected void fireActionPerformed(ActionEvent evt){  Object[] listeners=listenerList.getListenerList();  for (int i=0; i < listeners.length; i+=2) {    if (listeners[i] == ActionListener.class) {      ActionListener listener=(ActionListener)listeners[i + 1];      listener.actionPerformed(evt);    }  }}  }
class C{  public void error(Throwable problem){  error(problem,null);}  }
class C{  public final double SFEntropyGain(){  if (m_NoPriors || !m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return m_SumPriorEntropy - m_SumSchemeEntropy;}  }
class C{  private void forceFlashOff(boolean forceOff){  if (!mPreviewing || mParameters.getFlashMode() == null) {    return;  }  forceFlashOffIfSupported(forceOff);  mCameraDevice.setParameters(mParameters);}  }
class C{  public boolean isDroidSafeGeneratedClass(SootClass clz){  return clz.getName().startsWith(Project.DS_GENERATED_CLASSES_PREFIX);}  }
class C{  public void moveInner(float dx,float dy){  Matrix m0=getInverseRotMatrix();  RectF translatedInner=new RectF(inner);  translatedInner.offset(dx,dy);  float[] translatedInnerCorners=CropMath.getCornersFromRect(translatedInner);  float[] outerCorners=CropMath.getCornersFromRect(outer);  m0.mapPoints(translatedInnerCorners);  float[] correction={0,0};  for (int i=0; i < translatedInnerCorners.length; i+=2) {    float correctedInnerX=translatedInnerCorners[i] + correction[0];    float correctedInnerY=translatedInnerCorners[i + 1] + correction[1];    if (!CropMath.inclusiveContains(outer,correctedInnerX,correctedInnerY)) {      float[] badCorner={correctedInnerX,correctedInnerY};      float[] nearestSide=CropMath.closestSide(badCorner,outerCorners);      float[] correctionVec=GeometryMathUtils.shortestVectorFromPointToLine(badCorner,nearestSide);      correction[0]+=correctionVec[0];      correction[1]+=correctionVec[1];    }  }  for (int i=0; i < translatedInnerCorners.length; i+=2) {    float correctedInnerX=translatedInnerCorners[i] + correction[0];    float correctedInnerY=translatedInnerCorners[i + 1] + correction[1];    if (!CropMath.inclusiveContains(outer,correctedInnerX,correctedInnerY)) {      float[] correctionVec={correctedInnerX,correctedInnerY};      CropMath.getEdgePoints(outer,correctionVec);      correctionVec[0]-=correctedInnerX;      correctionVec[1]-=correctedInnerY;      correction[0]+=correctionVec[0];      correction[1]+=correctionVec[1];    }  }  for (int i=0; i < translatedInnerCorners.length; i+=2) {    float correctedInnerX=translatedInnerCorners[i] + correction[0];    float correctedInnerY=translatedInnerCorners[i + 1] + correction[1];    translatedInnerCorners[i]=correctedInnerX;    translatedInnerCorners[i + 1]=correctedInnerY;  }  innerRotated=translatedInnerCorners;  reconstrain();}  }
class C{  public CharSequence subSequence(int start,int end){  return _toString.substring(start,end);}  }
class C{  public UsageLicense changeRole(PlatformUser usr,RoleDefinition role) throws UserNotAssignedException {  if (usr == null)   return null;  for (  UsageLicense u : getUsageLicenses()) {    if (usr.equals(u.getUser())) {      u.setRoleDefinition(role);      return u;    }  }  throw new UserNotAssignedException(this.getSubscriptionId(),usr.getUserId());}  }
class C{  public boolean inDaylightTime(Date date){  if (date == null) {    throw new NullPointerException();  }  if (transitions == null) {    return false;  }  long utc=date.getTime() - rawOffsetDiff;  int index=getTransitionIndex(utc,UTC_TIME);  if (index < 0) {    return false;  }  if (index < transitions.length) {    return (transitions[index] & DST_MASK) != 0;  }  SimpleTimeZone tz=getLastRule();  if (tz != null) {    return tz.inDaylightTime(date);  }  return false;}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  protected void deinitialize(){}  }
class C{  public static void testProperty(String property,String propertyValue,String extraProp){  try {    String propOption="";    String equal="";    if (!property.equals("")) {      propOption=" -D";      equal="=";    }    JavaVM jvm=new JavaVM("CheckFQDNClient",propOption + property + equal+ propertyValue+ extraProp+ " -Drmi.registry.port="+ REGISTRY_PORT,"");    propertyBeingTested=property;    propertyBeingTestedValue=propertyValue;    if (jvm.execute() != 0) {      TestLibrary.bomb("Test failed, error in client.");    }  } catch (  Exception e) {    TestLibrary.bomb(e);  }}  }
class C{  public int doStartTag() throws JspException {  if (m_txt != null && m_txt.length() > 0) {    Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());    String msg=Msg.translate(ctx,m_txt);    log.fine(m_txt + "->" + msg);    try {      JspWriter out=pageContext.getOut();      out.print(msg);    } catch (    Exception e) {      throw new JspException(e);    }  }  return (SKIP_BODY);}  }
class C{  public void layoutContainer(){  if (super._container == null)   return;  SimpleBeanContainer container=(SimpleBeanContainer)_container;  Vector contents=super._container.getContents();  if (contents == null || contents.isEmpty())   return;  LatLonPoint midllp=new LatLonPoint.Float(container.getLatitude(),container.getLongitude());  LatLonPoint[] llps=new LatLonPoint[contents.size()];  if (contents.size() == 1)   llps[0]=midllp; else {    float angle1Deg=bearingInDeg - 90;    float angle1Rad=(float)Math.toRadians(angle1Deg);    float angle2Deg=bearingInDeg + 90;    float angle2Rad=(float)Math.toRadians(angle2Deg);    int numBeans=contents.size();    float spanNM=(numBeans - 1) * separationInNM;    LatLonPoint cornerllp1=midllp.getPoint(Length.NM.toRadians(spanNM / 2),angle1Rad);    llps[0]=cornerllp1;    for (int i=1; i < contents.size(); i++)     llps[i]=GreatCircle.sphericalBetween((float)cornerllp1.getRadLat(),(float)cornerllp1.getRadLon(),Length.NM.toRadians(separationInNM) * i,angle2Rad);  }  for (int i=0; i < contents.size(); i++) {    Long id=(Long)contents.get(i);    Debug.error("Here in WallFormationLayout, trying to get layer SimpleBeanObjects");  }}  }
class C{  public void open(final long[] list,final int position){  launchPlayerActivity=true;synchronized (this) {    if (mShuffleMode == SHUFFLE_AUTO) {      mShuffleMode=SHUFFLE_NORMAL;    }    final long oldId=getAudioId();    final int listlength=list.length;    boolean newlist=true;    if (mPlayListLen == listlength) {      newlist=false;      for (int i=0; i < listlength; i++) {        if (list[i] != mPlayList[i]) {          newlist=true;          break;        }      }    }    if (newlist) {      addToPlayList(list,-1);      notifyChange(QUEUE_CHANGED);    }    if (position >= 0) {      mPlayPos=position;    } else {      mPlayPos=mShuffler.nextInt(mPlayListLen);    }    mHistory.clear();    openCurrentAndNext();    if (oldId != getAudioId()) {      notifyChange(META_CHANGED);    }  }}  }
class C{  public static StoreResponse createStoreResponse(){  return new StoreResponse();}  }
class C{  public boolean userCanDeleteArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentArchMgrId=ISicresAdminDefsKeys.NULL_ID;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeArchIdQual(archId));    if (parentId == ISicresAdminDefsKeys.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=this.getDirMgrId(parentId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_DELETE,ISicresAdminDefsKeys.NULL_ID,parentArchMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void SendCanaryToKafkaIP(String kafkaIP,String topicName,boolean enableCertCheck) throws Exception {  URL obj=new URL(kafkaIP + topicName);  HttpsURLConnection con=(HttpsURLConnection)obj.openConnection();  if (!enableCertCheck) {    setAcceptAllVerifier(con);  }  con.setRequestMethod("POST");  con.setRequestProperty("Accept-Language","en-US,en;q=0.5");  con.setRequestProperty("Content-Type","application/octet-stream");  con.setUseCaches(false);  String urlParameters=producerProperties.messageStart + new Date().getTime() + ",www.example.com,";  con.setDoOutput(true);  DataOutputStream wr=new DataOutputStream(con.getOutputStream());  wr.writeBytes(urlParameters);  wr.flush();  wr.close();  int responseCode=con.getResponseCode();  m_logger.info("Sending 'POST' request to URL : " + kafkaIP);  m_logger.info("Post parameters : " + urlParameters);  m_logger.info("Response Code : " + responseCode);  BufferedReader in=new BufferedReader(new InputStreamReader(con.getInputStream()));  String inputLine;  StringBuffer response=new StringBuffer();  while ((inputLine=in.readLine()) != null) {    response.append(inputLine);  }  in.close();  m_logger.info(response.toString());}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AffineTransform)) {    return false;  }  AffineTransform a=(AffineTransform)obj;  return ((m00 == a.m00) && (m01 == a.m01) && (m02 == a.m02)&& (m10 == a.m10)&& (m11 == a.m11)&& (m12 == a.m12));}  }
class C{  private void reloadPlugins(){synchronized (mPlugins) {    for (int i=0, j=mPlugins.size(); i < j; ++i)     mPlugins.get(i).reload();  }}  }
class C{  public boolean mouseClicked(MouseEvent e){  EsriGraphicList list=getEsriGraphicList();  boolean ret=false;  graphicIndex=-1;  if (list != null) {    OMGraphic omg=list.selectClosest(e.getX(),e.getY(),4);    if (omg != null) {      graphicIndex=list.indexOf(omg);      selectEntry(omg);      ret=true;    } else {      if (lsm == null)       getTable();      lsm.clearSelection();      list.deselect();      selectedGraphics.clear();      repaint();    }  }  return ret;}  }
class C{  public void testSystemHook(Integer hookId) throws IOException {  String tailUrl=GitlabSystemHook.URL + "/" + hookId;  retrieve().to(tailUrl,Void.class);}  }
class C{  protected void parseLength() throws ParseException, IOException {  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;  int unitState=0;switch (current) {case '-':    mantPos=false;case '+':  current=reader.read();}m1: switch (current) {default :reportUnexpectedCharacterError(current);return;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=reader.read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break m1;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=reader.read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=reader.read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}boolean le=false;es: switch (current) {case 'e':le=true;case 'E':current=reader.read();switch (current) {default :reportUnexpectedCharacterError(current);return;case 'm':if (!le) {reportUnexpectedCharacterError(current);return;}unitState=1;break es;case 'x':if (!le) {reportUnexpectedCharacterError(current);return;}unitState=2;break es;case '-':expPos=false;case '+':current=reader.read();switch (current) {default :reportUnexpectedCharacterError(current);return;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=reader.read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}lengthHandler.lengthValue(NumberParser.buildFloat(mant,exp));switch (unitState) {case 1:lengthHandler.em();current=reader.read();return;case 2:lengthHandler.ex();current=reader.read();return;}switch (current) {case 'e':current=reader.read();switch (current) {case 'm':lengthHandler.em();current=reader.read();break;case 'x':lengthHandler.ex();current=reader.read();break;default :reportUnexpectedCharacterError(current);}break;case 'p':current=reader.read();switch (current) {case 'c':lengthHandler.pc();current=reader.read();break;case 't':lengthHandler.pt();current=reader.read();break;case 'x':lengthHandler.px();current=reader.read();break;default :reportUnexpectedCharacterError(current);}break;case 'i':current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);break;}lengthHandler.in();current=reader.read();break;case 'c':current=reader.read();if (current != 'm') {reportCharacterExpectedError('m',current);break;}lengthHandler.cm();current=reader.read();break;case 'm':current=reader.read();if (current != 'm') {reportCharacterExpectedError('m',current);break;}lengthHandler.mm();current=reader.read();break;case '%':lengthHandler.percentage();current=reader.read();break;}}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public int distance(){  return distance;}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public void putUser(final JSONObject user){  ID_CACHE.put(user.optString(Keys.OBJECT_ID),JSONs.clone(user));  NAME_CACHE.put(user.optString(User.USER_NAME),JSONs.clone(user));}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public synchronized void countDown(){  if (count_ == 0)   return;  if (--count_ == 0)   notifyAll();}  }
class C{  @Override public void mouseClicked(int par1,int par2,int par3){  super.mouseClicked(par1,par2,par3);  target_xCoord_field.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);  target_zCoord_field.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);  if (tileEntity.getTier() >= 1) {    target_yCoord_field.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);    target_height_field.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);    if (tileEntity.getTier() > 1) {      target_freq_field.mouseClicked(par1 - containerWidth,par2 - containerHeight,par3);    }  }}  }
class C{  @Dimension(unit=Dimension.DP) public static int dimResToPxInt(@DimenRes int dimenId){  return (int)getContext().getResources().getDimension(dimenId);}  }
class C{  @Override public boolean contains(Object key){  return _map.containsKey(key);}  }
class C{  public static boolean classExtends(String name,String superclass){  name=toKey(name);  superclass=toKey(superclass);  if (name.equals(superclass)) {    return true;  }  SuperCache cache=declareClass(name);  if (cache == null) {    return false;  }  cache.flatten();  return cache.parents.contains(superclass);}  }
class C{  public NewOperatorEditor(DragListener dragListener){  super(new BorderLayout());  setBorder(null);  this.newOperatorGroupTree=new NewOperatorGroupTree(this);  this.newOperatorGroupTree.getTree().addTreeSelectionListener(this);  add(newOperatorGroupTree,BorderLayout.CENTER);  if (dragListener != null) {    newOperatorGroupTree.getOperatorTreeTransferhandler().addDragListener(dragListener);  }}  }
class C{  @Override public void draw(Graphics g){  inner.draw(g);}  }
class C{  public void addPlugInPatternObserver(String namespace,String name,String observerFactoryClass){  ConfigurationPlugInPatternObject entry=new ConfigurationPlugInPatternObject();  entry.setNamespace(namespace);  entry.setName(name);  entry.setFactoryClassName(observerFactoryClass);  entry.setPatternObjectType(ConfigurationPlugInPatternObject.PatternObjectType.OBSERVER);  plugInPatternObjects.add(entry);}  }
class C{  public JavaSource addSource(Reader reader){  return classLibraryBuilder.addSource(reader);}  }
class C{  public void testTotalTermFreq() throws Exception {  clearIndex();  assertU(adoc("id","1","a_tdt","2009-08-31T12:10:10.123Z","b_tdt","2009-08-31T12:10:10.124Z"));  assertU(adoc("id","2","a_t","how now brown cow"));  assertU(commit());  assertU(adoc("id","3","a_t","brown cow"));  assertU(adoc("id","4"));  assertU(commit());  assertU(adoc("id","5"));  assertU(adoc("id","6","a_t","cow cow cow cow cow"));  assertU(commit());  assertQ(req("fl","*,score","q","{!func}totaltermfreq('a_t','cow')","fq","id:6"),"//float[@name='score']='7.0'");  assertQ(req("fl","*,score","q","{!func}ttf(a_t,'cow')","fq","id:6"),"//float[@name='score']='7.0'");  assertQ(req("fl","*,score","q","{!func}sumtotaltermfreq('a_t')","fq","id:6"),"//float[@name='score']='11.0'");  assertQ(req("fl","*,score","q","{!func}sttf(a_t)","fq","id:6"),"//float[@name='score']='11.0'");}  }
class C{  public DExportKeyPair(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.entryAlias=entryAlias;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  public PeriodAxisLabelInfo(Class periodClass,DateFormat dateFormat,RectangleInsets padding,Font labelFont,Paint labelPaint,boolean drawDividers,Stroke dividerStroke,Paint dividerPaint){  ParamChecks.nullNotPermitted(periodClass,"periodClass");  ParamChecks.nullNotPermitted(dateFormat,"dateFormat");  ParamChecks.nullNotPermitted(padding,"padding");  ParamChecks.nullNotPermitted(labelFont,"labelFont");  ParamChecks.nullNotPermitted(labelPaint,"labelPaint");  ParamChecks.nullNotPermitted(dividerStroke,"dividerStroke");  ParamChecks.nullNotPermitted(dividerPaint,"dividerPaint");  this.periodClass=periodClass;  this.dateFormat=(DateFormat)dateFormat.clone();  this.padding=padding;  this.labelFont=labelFont;  this.labelPaint=labelPaint;  this.drawDividers=drawDividers;  this.dividerStroke=dividerStroke;  this.dividerPaint=dividerPaint;}  }
class C{  public String generateNextPrefix(){  return "ns" + (count++);}  }
class C{  Region(long start,long end){  this.start=start;  this.end=end;  this.left=NULL_NODE;  this.right=NULL_NODE;  this.level=1;  updateAvailable();}  }
class C{  protected SVGOMFlowSpanElement(){}  }
class C{  public Hierarchy(){  m_errorHandler=new DefaultErrorHandler();  m_rootLogger=new Logger(new InnerErrorHandler(),new InnerLoggerListener(),"",null,null);  final PatternFormatter formatter=new PatternFormatter(DEFAULT_FORMAT);  final StreamTarget target=new StreamTarget(System.out,formatter);  setDefaultLogTarget(target);}  }
class C{  public DefaultComment(String text){  super(text);}  }
class C{  public ISelectPiece select(ISelectPiece piece,ExpressionAST expr){  SubSelectReferencePiece ref=new SubSelectReferencePiece(from,piece);  IDomain image=expr.getImageDomain();  if (image.isInstanceOf(IDomain.AGGREGATE)) {    if (expr instanceof Operator) {      Operator op=(Operator)expr;      OperatorDefinition def=op.getOperatorDefinition();      OperatorPiece wrapper=new OperatorPiece(def,new IPiece[]{ref});      return mixedSelect.select(wrapper);    }  }  return mixedSelect.select(ref);}  }
class C{  public static void toggleRestrictSearchToSelectedNodes(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01758: Graph argument can not be null");  graph.getSettings().getSearchSettings().setSearchSelectedNodesOnly(!graph.getSettings().getSearchSettings().getSearchSelectedNodesOnly());}  }
class C{  public void loadSomeDataFromADocument(Repository repo,String resource,String baseURL) throws Exception {  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    InputStream is=getClass().getResourceAsStream(resource);    if (is == null && new File(resource).exists())     is=new FileInputStream(resource);    if (is == null)     throw new Exception("Could not locate resource: " + resource);    Reader reader=new InputStreamReader(new BufferedInputStream(is));    cxn.add(reader,baseURL,RDFFormat.RDFXML);    cxn.commit();  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }}  }
class C{  private Proxy nextProxy() throws IOException {  if (!hasNextProxy()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted proxy configurations: "+ proxies);  }  Proxy result=proxies.get(nextProxyIndex++);  resetNextInetSocketAddress(result);  return result;}  }
class C{  public Hyperlink(final String text,final String token){  super(text,token);}  }
class C{  public boolean hasMore(){  return hasMore;}  }
class C{  private ManagerInfo(int pid,int status,int port,InetAddress bindAddress){  this.managerPid=pid;  this.managerStatus=status;  this.port=port;  this.bindAddress=bindAddress;}  }
class C{  public T caseReactionEffect(ReactionEffect object){  return null;}  }
class C{  public int sendWifiInfo(String ssid,String password){  try {    this.connect();    WifiInfo wifiInfo=new WifiInfo();    wifiInfo.ssid=ssid;    wifiInfo.password=password;    wifiInfo.action=DeviceRequest.ACTION_CONFIG;    WifiInfoPacket wifiInfoPacket=new WifiInfoPacket(wifiInfo);    if (this.send(wifiInfoPacket) > 0) {      JSONObject jsonObject=this.recv();      if (jsonObject.has("code")) {        int code=jsonObject.getInt("code");        LogUtils.d("code: " + code);        if (code == 0) {          close();          return 0;        }      }    }    return -1;  } catch (  Exception e) {    e.printStackTrace();    return -1;  }}  }
class C{  private static String typeDescriptorOf(Type type){  String desc;  ClassDoc classDoc=type.asClassDoc();  if (classDoc == null) {    String name=type.typeName();    if (name.equals("boolean")) {      desc="Z";    } else     if (name.equals("byte")) {      desc="B";    } else     if (name.equals("char")) {      desc="C";    } else     if (name.equals("short")) {      desc="S";    } else     if (name.equals("int")) {      desc="I";    } else     if (name.equals("long")) {      desc="J";    } else     if (name.equals("float")) {      desc="F";    } else     if (name.equals("double")) {      desc="D";    } else     if (name.equals("void")) {      desc="V";    } else {      throw new AssertionError("unrecognized primitive type: " + name);    }  } else {    desc="L" + binaryNameOf(classDoc).replace('.','/') + ";";  }  int dimensions=type.dimension().length() / 2;  for (int i=0; i < dimensions; i++) {    desc="[" + desc;  }  return desc;}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,SimpleSeriesRenderer renderer,Paint paint,float[] points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  float halfDiffX=getHalfDiffX(points,points.length,seriesNr);  for (int i=0; i < points.length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points[i];      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value > 0) {        drawText(canvas,getLabel(value),x,points[i + 1] - renderer.getChartValuesSpacing(),paint,0);      } else       if (value < 0) {        drawText(canvas,getLabel(value),x,points[i + 1] + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      } else       if (value == 0) {        if (mRenderer.isDisplayValue0()) {          drawText(canvas,getLabel(value),x,points[i + 1] - renderer.getChartValuesSpacing(),paint,0);        }      }    }  }}  }
class C{  public static Object fromIntValue(int value){  return BigInteger.valueOf(value).toByteArray();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrieveattrvalue.class,args);}  }
class C{  private Derivation<TK,FV> constructDerivation(Derivation<TK,FV> markedNode,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){  final List<Derivation<TK,FV>> nodes=new LinkedList<>();  Derivation<TK,FV> p=markedNode;  while (p != null) {    nodes.add(0,p);    p=p.parent;  }  p=markedNode.bestChild;  while (p != null) {    nodes.add(p);    p=p.bestChild;  }  Derivation<TK,FV> goalHyp=null;  for (  Derivation<TK,FV> node : nodes) {    goalHyp=goalHyp == null ? node : new Derivation<>(sourceInputId,node.rule,goalHyp.length,goalHyp,featurizer,scorer,heuristic,outputSpace);  }  return goalHyp;}  }
class C{  public boolean isWet(World world,BlockPos pos,IBlockState state){  return state == WET_SOIL;}  }
class C{  protected AnnotableExpressionImpl(){  super();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (null == elem) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=getLastChildElem();    last.m_nextSibling=elem;  }  elem.setParentElem(this);  return elem;}  }
class C{  public List<User> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<User> list=new ArrayList<User>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  public void squareThisBitwise(){  int i, h, j, k;  if (isZero()) {    return;  }  int[] result=new int[blocks << 1];  for (i=blocks - 1; i >= 0; i--) {    h=value[i];    j=0x00000001;    for (k=0; k < 16; k++) {      if ((h & 0x01) != 0) {        result[i << 1]|=j;      }      if ((h & 0x00010000) != 0) {        result[(i << 1) + 1]|=j;      }      j<<=2;      h>>>=1;    }  }  value=null;  value=result;  blocks=result.length;  len=(len << 1) - 1;}  }
class C{  private static String stackTraceToString(List<StackTraceElement> stack){  return StringPrinter.buildString(null);}  }
class C{  public static RotateStream create(Path path){synchronized (_streams) {    WeakReference<RotateStream> ref=_streams.get(path);    RotateStream stream=ref != null ? ref.get() : null;    if (stream == null) {      stream=new RotateStream(path);      _streams.put(path,new WeakReference<>(stream));    }    return stream;  }}  }
class C{  public int hashCode(){  return (int)objNum;}  }
class C{  public boolean regionMatches(boolean ignoreCase,int thisStart,String string,int start,int length){  if (!ignoreCase) {    return regionMatches(thisStart,string,start,length);  }  if (string != null) {    if (thisStart < 0 || length > count - thisStart) {      return false;    }    if (start < 0 || length > string.count - start) {      return false;    }    thisStart+=offset;    start+=string.offset;    int end=thisStart + length;    char c1, c2;    char[] target=string.value;    while (thisStart < end) {      if ((c1=value[thisStart++]) != (c2=target[start++]) && Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {        return false;      }    }    return true;  }  throw new NullPointerException();}  }
class C{  private Collection<EventBean> snapshotNullWhenNoIndex(FilterSpecCompiled filter,Annotation[] annotations,ExprNode optionalWhereClause,AgentInstanceContext agentInstanceContext){  return FireAndForgetQueryExec.snapshot(filter,annotations,null,instance.getIndexRepository(),instance.getTableMetadata().isQueryPlanLogging(),TableServiceImpl.getQueryPlanLog(),instance.getTableMetadata().getTableName(),instance.getAgentInstanceContext());}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  private void apply_(final Object[] objs){  for (  final Object o : objs) {    if (o instanceof SymbolWithRange) {      processSymbol((SymbolWithRange)o);    } else     if (o instanceof StringBuilder) {      sb.append((StringBuilder)o);    } else     if (o instanceof Object[]) {      final Object[] pibObjs=(Object[])o;      int lastTeam=-1;      int playerInTeam=0;      for (      final IUser u : playerUsers) {        if (lastTeam < 0)         lastTeam=u.getSlot().getTeamId();        final int team=u.getSlot().getTeamId();        if (team != lastTeam) {          sb.append(" vs ");          lastTeam=team;          playerInTeam=1;        } else         if (playerInTeam++ > 0)         sb.append(", ");        pibUser=u;        apply_(pibObjs);      }    } else     throw new RuntimeException("Unhandled template object type: " + o.getClass());  }}  }
class C{  public static final void extractTemplates(){  extractTemplates(false);}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public String globalInfo(){  return "Maniac - Multi-lAbel classificatioN using AutoenCoders." + "Transforms the labels using layers of autoencoders." + "For more information see:\n"+ getTechnicalInformation();}  }
class C{  public void changedUpdate(DocumentEvent e){}  }
class C{  public void addNode(final ViewNode node){  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  if (m_node.getElements().contains(node.getNative())) {    if (!m_elements.contains(node)) {      m_elements.add(node);    }  } else {    m_node.addElement(node.getNative());  }}  }
class C{  private void sendMessageRequest(SendMessage send){  Session session=getSession();  if (session == null || !session.isOpen())   return;  try {    ChannelKey key=new ChannelKey(Encoding.channelID(send.getChannelID()),peerID,send.getSenderSeqNo().intValue());    store.publishEvent(key,send.getPayload().array());  } catch (  PublishException e) {    log.info("SendMessage request refused: {}",e.toString());    if (!handle.offerMessage(e.messageToClient())) {      session.close(StatusCode.SERVER_ERROR,"Internal server error");    }  }catch (  TimeoutException|BufferExhaustedException e) {    log.warn("Kafka producer buffer is full",e);    session.close(StatusCode.TRY_AGAIN_LATER,"SendMessage request failed due to server overload");  }}  }
class C{  protected int defaultNumAttributes(){  return 10;}  }
class C{  public GeolocSharingIntentService(){  super("GeolocSharingIntentService");}  }
class C{  @Override public JournalLoadInformation load(final LoaderCallback loadManager) throws Exception {  return load(loadManager,true,null);}  }
class C{  public Reduction asReduction(CSTNode second,CSTNode third){  Reduction created=asReduction(second);  created.add(third);  return created;}  }
class C{  @Override public boolean createDirectionalNodeConnection(UUID startNode,UUID endNode){  if ((exitNodeMap.containsKey(endNode)) || (exitNodeMap.containsKey(startNode))) {    return false;  }  return graphServer.addEdge(startNode,endNode);}  }
class C{  public static String dbNameToVarName(String columnName){  if (columnName == null)   return null;  StringBuilder fieldName=new StringBuilder(columnName.length());  boolean toUpper=false;  for (int i=0; i < columnName.length(); i++) {    char ch=columnName.charAt(i);    if (ch == '_') {      toUpper=true;    } else     if (toUpper) {      fieldName.append(Character.toUpperCase(ch));      toUpper=false;    } else {      fieldName.append(Character.toLowerCase(ch));    }  }  return fieldName.toString();}  }
class C{  public void removeClient(SocketAddress address){  ProxyClient sc=address2Services.remove(address);  if (null != sc) {    logger.info("Removed host {}.",address);    sc.close();  }}  }
class C{  @Override protected ExampleSet performPreprocessing(ExampleSet eSet) throws OperatorException {  try {    PreprocessingOperator discretizationOperator=OperatorService.createOperator(BinDiscretization.class);    discretizationOperator.setParameter(BinDiscretization.PARAMETER_NUMBER_OF_BINS,getParameterAsInt(BinDiscretization.PARAMETER_NUMBER_OF_BINS) + "");    discretizationOperator.setParameter(PreprocessingOperator.PARAMETER_CREATE_VIEW,"true");    return discretizationOperator.doWork((ExampleSet)eSet.clone());  } catch (  OperatorCreationException e) {    throw new OperatorException(getName() + ": Cannot create discretization operator (" + e+ ").");  }}  }
class C{  @Override public boolean mkdir() throws IOException {  return getWritePath().mkdir();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public Iterator<E> iterator(){  return this;}  }
class C{  public JMenuItem add(Action a){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  add(mi);  return mi;}  }
class C{  public MarshalledObject(T obj) throws IOException {  if (obj == null) {    hash=13;    return;  }  ByteArrayOutputStream bout=new ByteArrayOutputStream();  ByteArrayOutputStream lout=new ByteArrayOutputStream();  MarshalledObjectOutputStream out=new MarshalledObjectOutputStream(bout,lout);  out.writeObject(obj);  out.flush();  objBytes=bout.toByteArray();  locBytes=(out.hadAnnotations() ? lout.toByteArray() : null);  int h=0;  for (int i=0; i < objBytes.length; i++) {    h=31 * h + objBytes[i];  }  hash=h;}  }
class C{  private void updateColorEnhancement(){  if (!mUseColorEnhancement) {    return;  }  mHardware.set(CMHardwareManager.FEATURE_COLOR_ENHANCEMENT,!isLowPowerMode() && isColorEnhancementEnabled());}  }
class C{  private void processSource(Context cx,String filename){  if (filename == null) {    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));    String sourceName="<stdin>";    int lineno=1;    boolean hitEOF=false;    do {      int startline=lineno;      System.err.print("js> ");      System.err.flush();      try {        String source="";        while (true) {          String newline;          newline=in.readLine();          if (newline == null) {            hitEOF=true;            break;          }          source=source + newline + "\n";          lineno++;          if (cx.stringIsCompilableUnit(source))           break;        }        Object result=cx.evaluateString(this,source,sourceName,startline,null);        if (result != Context.getUndefinedValue()) {          System.err.println(Context.toString(result));        }      } catch (      WrappedException we) {        System.err.println(we.getWrappedException().toString());        we.printStackTrace();      }catch (      EvaluatorException ee) {        System.err.println("js: " + ee.getMessage());      }catch (      JavaScriptException jse) {        System.err.println("js: " + jse.getMessage());      }catch (      IOException ioe) {        System.err.println(ioe.toString());      }      if (quitting) {        break;      }    } while (!hitEOF);    System.err.println();  } else {    FileReader in=null;    try {      in=new FileReader(filename);    } catch (    FileNotFoundException ex) {      Context.reportError("Couldn't open file \"" + filename + "\".");      return;    }    try {      cx.evaluateReader(this,in,filename,1,null);    } catch (    WrappedException we) {      System.err.println(we.getWrappedException().toString());      we.printStackTrace();    }catch (    EvaluatorException ee) {      System.err.println("js: " + ee.getMessage());    }catch (    JavaScriptException jse) {      System.err.println("js: " + jse.getMessage());    }catch (    IOException ioe) {      System.err.println(ioe.toString());    } finally {      try {        in.close();      } catch (      IOException ioe) {        System.err.println(ioe.toString());      }    }  }}  }
class C{  @Override protected void initGUI(){  super.initGUI();  m_TextSeed=new JTextField("1",5);  addParameter("Random seed",m_TextSeed);  m_TextSplitPercentage=new JTextField("66.0",5);  addParameter("Split Percentage",m_TextSplitPercentage);  m_TextFolds=new JTextField("10",5);  addParameter("CV folds",m_TextFolds);  m_TextSamples=new JTextField("10",5);  addParameter("Samples/batches (incremental)",m_TextSamples);  m_TextTOP=new JTextField("PCut1",5);  addParameter("Threshold",m_TextTOP);  m_TextVOP=new JTextField("3",5);  addParameter("Verbosity",m_TextVOP);  m_ToggleRandomize=new JToggleButton("Randomize",false);  addParameter("Randomize?",m_ToggleRandomize);}  }
class C{  protected boolean possiblyUpdateLongLine(Element line,int lineNumber){  float w=getLineWidth(lineNumber);  if (w > longLineWidth) {    longLineWidth=w;    longLine=line;    return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("Core","");  assertTrue("Core",state);}  }
class C{  private boolean shouldPaintContainerBackground(){  return !isObscuredByChildren();}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof TimeSeriesDataItem) {    TimeSeriesDataItem datapair=(TimeSeriesDataItem)o1;    result=getPeriod().compareTo(datapair.getPeriod());  } else {    result=1;  }  return result;}  }
class C{  public static double[][] mergeColumns(double[]... x){  double[][] array=new double[x[0].length][x.length];  for (int i=0; i < array.length; i++)   for (int j=0; j < array[i].length; j++)   array[i][j]=x[j][i];  return array;}  }
