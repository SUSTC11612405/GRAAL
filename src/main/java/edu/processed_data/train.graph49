class C{  static boolean isTargetZone(String zoneName){  if (targetZones == null) {    return true;  }  return targetZones.contains(zoneName);}  }
class C{  public void addAnimation(ComponentAnimation an,Runnable callback){  an.setOnCompletion(callback);  addAnimation(an);  Display.getInstance().notifyDisplay();}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public static <T>Range<T> greaterThan(T v){  return range(v,BoundType.OPEN,null,null);}  }
class C{  public HttpClientParams(final HttpParams defaults){  super(defaults);}  }
class C{  public void reuse(JspTag handler){synchronized (this) {    if (current < (handlers.length - 1)) {      handlers[++current]=handler;      return;    }  }  if (handler instanceof Tag) {    ((Tag)handler).release();  }  if (resourceInjector != null) {    resourceInjector.preDestroy(handler);  }}  }
class C{  public Element store(Object o){  MemoryIcon p=(MemoryIcon)o;  Element element=new Element("memoryicon");  element.setAttribute("memory",p.getNamedMemory().getName());  storeCommonAttributes(p,element);  storeTextInfo(p,element);  if (p.getPopupUtility().getFixedWidth() == 0 && p.getPopupUtility().getJustification() != 0) {    element.setAttribute("x","" + p.getOriginalX());    element.setAttribute("y","" + p.getOriginalY());  }  element.setAttribute("selectable",(p.isSelectable() ? "yes" : "no"));  if (p.updateBlockValueOnChange()) {    element.setAttribute("updateBlockValue",(p.updateBlockValueOnChange() ? "yes" : "no"));  }  element.setAttribute("class","jmri.jmrit.display.configurexml.MemoryIconXml");  if (p.getDefaultIcon() != null) {    element.setAttribute("defaulticon",p.getDefaultIcon().getURL());  }  java.util.HashMap<String,NamedIcon> map=p.getMap();  if (map != null) {    java.util.Iterator<java.util.Map.Entry<String,NamedIcon>> iterator=map.entrySet().iterator();    while (iterator.hasNext()) {      java.util.Map.Entry<String,NamedIcon> mi=iterator.next();      String key=mi.getKey();      String value=mi.getValue().getName();      Element e2=new Element("memorystate");      e2.setAttribute("value",key);      e2.setAttribute("icon",value);      element.addContent(e2);    }  }  return element;}  }
class C{  protected void doDrawStereoNone(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  gl.glDrawBuffer(GL2.GL_BACK_LEFT);  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);  super.draw(dc);  gl.glDrawBuffer(GL2.GL_BACK_RIGHT);  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);  super.draw(dc);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  ForumDao.createTable(db,ifNotExists);  UserDao.createTable(db,ifNotExists);  ThreadDao.createTable(db,ifNotExists);  ThreadInfoDao.createTable(db,ifNotExists);  ThreadReplyDao.createTable(db,ifNotExists);  ReadThreadDao.createTable(db,ifNotExists);  ImageCacheDao.createTable(db,ifNotExists);}  }
class C{  public boolean nextBoolean(final double probability){  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  return nextDouble() < probability;}  }
class C{  public static void main(String argv[]) throws Exception {  boolean pass=true;  System.out.println("");  System.out.println("------ checking ISO2022CN decoder -----");  pass&=decodeTest6392664();  try {    new InputStreamReader(System.in,"ISO2022CN");  } catch (  Exception e) {    encodingName="ISO2022CN";    System.out.println("... requires nonstandard encoding name " + encodingName);    pass&=false;  }  pass&=decodeTest(test0_bytes,test0_chars,"first batch");  pass&=decodeTest(test1_bytes,test1_chars,"escapes1");  pass&=decodeTest(test2_bytes,test2_chars,"escapes2");  pass&=decodeTest(test3_bytes,test3_chars,"escapes3");  pass&=decodeTest(test3a_bytes,test3_chars,"escapes3a");  pass&=decodeTest(test4_bytes,test4_chars,"escapes4");  pass&=decodeTest(test5_bytes,test5_chars,"escapes5");  pass&=decodeTest(test6_bytes,test6_chars,"escapes6");  pass&=decodeTest(test7_bytes,test7_chars,"escapes7");  pass&=decodeTest(test8_bytes,test8_chars,"escapes8");  pass&=decodeTest(test9_bytes,test9_chars,"escapes9");  pass&=decodeTest(test10_bytes,test10_chars,"escapes10");  pass&=decodeTest(test11_bytes,test11_chars,"escapes11");  pass&=decodeTest(test12_bytes,test12_chars,"escapes12");  pass&=decodeTest(test13_bytes,test13_chars,"escapes13");  pass&=decodeResultTest(test14_bytes,test14_result,"escapes14");  pass&=decodeResultTest(test15_bytes,test15_result,"escapes15");  pass&=encodeTest6730652();  if (!pass) {    throw new Exception("FAIL -- incorrect ISO-2022-CN");  }}  }
class C{  public void addFieldToIndex(String idxName,String field,int orderNum,boolean descending){  IndexDescriptor desc=indexes.get(idxName);  if (desc == null)   desc=addIndex(idxName,SORTED);  desc.addField(field,orderNum,descending);}  }
class C{  public static Script pydmlFromUrl(String scriptUrlPath){  return scriptFromUrl(scriptUrlPath,ScriptType.PYDML);}  }
class C{  public String stepSizeTipText(){  return "Step size for the evaluation, if evaluation is time consuming.";}  }
class C{  public void beginObject() throws IOException {  expect(JsonToken.BEGIN_OBJECT);}  }
class C{  @Override public int size(){  return count;}  }
class C{  public final void addElement(Object value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  @RequestMapping(value="/preferences",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Preferences> create(@Valid @RequestBody Preferences preferences) throws URISyntaxException {  log.debug("REST request to save Preferences : {}",preferences);  if (preferences.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new preferences cannot already have an ID").body(null);  }  Preferences result=preferencesRepository.save(preferences);  preferencesSearchRepository.save(result);  log.debug("Settings preferences for current user: {}",SecurityUtils.getCurrentLogin());  User user=userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).get();  user.setPreferences(result);  userRepository.save(user);  return ResponseEntity.created(new URI("/api/preferences/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("preferences",result.getId().toString())).body(result);}  }
class C{  public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {  byte[] bytes=value.getBytes("UTF-8");  out.writeUnsafe(QUOTE);  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);  out.writeUnsafe(QUOTE);}  }
class C{  public Cylinder(Position centerPosition,double height,double radius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","height <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=radius;  this.verticalRadius=height / 2;  this.eastWestRadius=radius;  this.setUpGeometryCache();}  }
class C{  public Task<InitiatorRestRep> create(URI hostId,InitiatorCreateParam input){  return postTask(input,PathConstants.INITIATOR_BY_HOST_URL,hostId);}  }
class C{  private void validateBusinessObjectDataAvailabilityCollectionRequest(BusinessObjectDataAvailabilityCollectionRequest businessObjectDataAvailabilityCollectionRequest){  Assert.notNull(businessObjectDataAvailabilityCollectionRequest,"A business object data availability collection request must be specified.");  Assert.isTrue(!CollectionUtils.isEmpty(businessObjectDataAvailabilityCollectionRequest.getBusinessObjectDataAvailabilityRequests()),"At least one business object data availability request must be specified.");  for (  BusinessObjectDataAvailabilityRequest request : businessObjectDataAvailabilityCollectionRequest.getBusinessObjectDataAvailabilityRequests()) {    validateBusinessObjectDataAvailabilityRequest(request);  }}  }
class C{  public FastNondominatedSorting(DominanceComparator comparator){  super();  this.comparator=comparator;}  }
class C{  private String toHexString(byte[] block){  StringBuffer buf=new StringBuffer();  int len=block.length;  for (int i=0; i < len; i++) {    byte2hex(block[i],buf);    if (i < len - 1) {      buf.append(":");    }  }  return buf.toString();}  }
class C{  private Increment createIncrement(byte[] rowKey,ColumnList cols,Durability durability){  Increment inc=new Increment(rowKey);  inc.setDurability(durability);  cols.getCounters().forEach(null);  return inc;}  }
class C{  public synchronized boolean isParsing(){  return parsing;}  }
class C{  protected String assertPgFeatures(final String pg,final boolean external,final boolean online,final boolean authorise,final boolean perShipment,final boolean voidCapture,final boolean refund){  final PaymentGateway proto=ctx().getBean(pg,PaymentGateway.class);  assertEquals(pg + " external feature",external,proto.getPaymentGatewayFeatures().isExternalFormProcessing());  assertEquals(pg + " online feature",online,proto.getPaymentGatewayFeatures().isOnlineGateway());  assertEquals(pg + " authorise feature",authorise,proto.getPaymentGatewayFeatures().isSupportAuthorize());  assertEquals(pg + " authorise per shipment feature",perShipment,proto.getPaymentGatewayFeatures().isSupportAuthorizePerShipment());  assertEquals(pg + " void feature",voidCapture,proto.getPaymentGatewayFeatures().isSupportVoid());  assertEquals(pg + " refund feature",refund,proto.getPaymentGatewayFeatures().isSupportRefund());  return proto.getLabel() + "Label";}  }
class C{  public static void addMessage(String source,long msgTimestamp,String message){  SourceStatisticsForMessage sourceStatisticsForMessage=sourceToStatisticsMap.get(source);  if (sourceStatisticsForMessage == null) {    sourceStatisticsForMessage=new SourceStatisticsForMessage(source);    sourceToStatisticsMap.put(source,sourceStatisticsForMessage);  }  sourceStatisticsForMessage.addMessage(msgTimestamp,message);}  }
class C{  private File addExtension(final File theFile,final FileFilter filter){  if (exts.size() < 1) {    return theFile;  }  String extension;  if (filter instanceof ExtensionFileFilter) {    extension=((ExtensionFileFilter)filter).extension;  } else {    extension=exts.keySet().iterator().next();  }  if (hasExtension(theFile,extension)) {    return theFile;  } else {    File output=new File(theFile.getAbsolutePath().concat("." + extension));    if (theFile.exists()) {      theFile.renameTo(output);      return theFile;    } else {      return output;    }  }}  }
class C{  private static FormatterFunction createBasicFormatterFunction(final ConversionMethod conversionMethod){  final FormatterFunction function=new FormatterFunction();  final ConversionFormatterDetails conversionFormatterDetails=new ConversionFormatterDetails();  conversionFormatterDetails.setFormat(conversionMethod);  function.setConversion(conversionFormatterDetails);  return function;}  }
class C{  @Override public String select(final int index){  checkIsInMultiOrPipeline();  client.select(index);  String statusCodeReply=client.getStatusCodeReply();  client.setDb(index);  return statusCodeReply;}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  private void parseContents(String encoding,InputStream bis) throws IOException, SAXException, ParserConfigurationException {  mElements=new SmilParser().parse(bis,encoding);}  }
class C{  public void insertTwin(Instruction inst,Instruction twin){  ListIterator<GCIRMapElement> iter=list.listIterator();  while (iter.hasNext()) {    GCIRMapElement newPtr=iter.next();    if (newPtr.getInstruction() == inst) {      iter.add(newPtr.createTwin(twin));      return;    }  }  throw new OptimizingCompilerException("GCIRMap.createTwin: " + inst + " not found");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.WORD___SINGULAR_1:    setSingular_1(SINGULAR_1_EDEFAULT);  return;case UmplePackage.WORD___PLURAL_1:setPlural_1(PLURAL_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.367 -0500",hash_original_method="3FDB9CFD55BF2DF7F8CECAE61175CDAF",hash_generated_method="274508F7D97D3F403984C22B20F40423") static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  public static XmlAttribute toXmlAttribute(Class<?> clazz,Field field){  JMap jMap=field.getAnnotation(JMap.class);  SimplyAttribute[] targetAttributes=toTargetAttributes(jMap.attributes());  String get=null, set=null;  JMapAccessor jMapAccessor=Annotation.getFieldAccessors(clazz,field);  if (!isNull(jMapAccessor)) {    get=jMapAccessor.get();    set=jMapAccessor.set();  }  return toXmlAttribute(field.getName(),new Value(jMap.value()),get,set,targetAttributes,jMap.classes());}  }
class C{  public boolean isSingleNalUnitPacket(){  return decodeNalUnitType == NalUnitType.CODE_SLICE_IDR_PICTURE || decodeNalUnitType == NalUnitType.CODE_SLICE_NON_IDR_PICTURE || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_A || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_B || decodeNalUnitType == NalUnitType.CODE_SLICE_DATA_PARTITION_C || decodeNalUnitType == NalUnitType.SEQUENCE_PARAMETER_SET || decodeNalUnitType == NalUnitType.PICTURE_PARAMETER_SET || decodeNalUnitType == NalUnitType.OTHER_NAL_UNIT;}  }
class C{  public MWebProject(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @Override public Object clone(){  return new Column(this.nickname,this.celltype,this.encoder,this.cellwidth,this.description);}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public void timer(long time){}  }
class C{  protected void initInfo(int record_id,String value){  prepareTable(getTableLayout(),getFromClause(),getWhereClause(),getOrderClause());  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {    } else {      String sra=Env.getContext(Env.getCtx(),p_WindowNo,"S_ResourceAssignment_ID");      if (sra != null && sra.length() != 0) {        fieldID=new Integer(sra).intValue();      }      String srt=Env.getContext(Env.getCtx(),p_WindowNo,"S_ResourceType_ID");      if (srt != null && srt.length() > 0) {        fieldResourceType.setValue(new Integer(srt));      }      String sr=Env.getContext(Env.getCtx(),p_WindowNo,"S_Resource_ID");      if (sr != null && sr.length() > 0) {        fieldResource.setValue(new Integer(sr));      }    }  }}  }
class C{  public static void write(File file,NSObject root) throws IOException {  OutputStream out=new FileOutputStream(file);  write(out,root);  out.close();}  }
class C{  public static String idNameFor(OperationDescription operationDescription){  return shortNameFor(operationDescription).append("-operation").toString();}  }
class C{  private XmlAdapter<Object,Object> findAdapter(Annotated am,boolean forSerialization){  if (am instanceof AnnotatedClass) {    return findAdapterForClass((AnnotatedClass)am,forSerialization);  }  Class<?> memberType=am.getRawType();  if (memberType == Void.TYPE && (am instanceof AnnotatedMethod)) {    memberType=((AnnotatedMethod)am).getParameterClass(0);  }  Member member=(Member)am.getAnnotated();  if (member != null) {    Class<?> potentialAdaptee=member.getDeclaringClass();    if (potentialAdaptee != null) {      XmlJavaTypeAdapter adapterInfo=(XmlJavaTypeAdapter)potentialAdaptee.getAnnotation(XmlJavaTypeAdapter.class);      if (adapterInfo != null) {        XmlAdapter<Object,Object> adapter=checkAdapter(adapterInfo,memberType);        if (adapter != null) {          return adapter;        }      }    }  }  XmlJavaTypeAdapter adapterInfo=findAnnotation(XmlJavaTypeAdapter.class,am,true,false,false);  if (adapterInfo != null) {    XmlAdapter<Object,Object> adapter=checkAdapter(adapterInfo,memberType);    if (adapter != null) {      return adapter;    }  }  XmlJavaTypeAdapters adapters=findAnnotation(XmlJavaTypeAdapters.class,am,true,false,false);  if (adapters != null) {    for (    XmlJavaTypeAdapter info : adapters.value()) {      XmlAdapter<Object,Object> adapter=checkAdapter(info,memberType);      if (adapter != null) {        return adapter;      }    }  }  return null;}  }
class C{  public boolean registerRunnerServer(RunnerServerRegistration registration) throws RunnerException {  checkStarted();  final String url=registration.getRunnerServerLocation().getUrl();  final RemoteRunnerServer runnerServer=createRemoteRunnerServer(url);  String infra=null;  String workspace=null;  String project=null;  final RunnerServerAccessCriteria accessCriteria=registration.getRunnerServerAccessCriteria();  if (accessCriteria != null) {    infra=accessCriteria.getInfra();    workspace=accessCriteria.getWorkspace();    project=accessCriteria.getProject();  }  if (infra != null) {    runnerServer.setInfra(infra);  }  if (workspace != null) {    runnerServer.setAssignedWorkspace(workspace);    if (project != null) {      runnerServer.setAssignedProject(project);    }  }  return doRegisterRunnerServer(runnerServer);}  }
class C{  public static double calculateKilometers(double meters){  double kilometers=meters * 0.001;  return kilometers;}  }
class C{  public void endElement(String name) throws org.xml.sax.SAXException {  endElement(null,null,name);}  }
class C{  public final void moveNext() throws BasicException {  saveData();  if (m_iIndex < m_bd.getSize() - 1) {    baseMoveTo(m_iIndex + 1);  }}  }
class C{  public KeyPair generateKeyPair() throws KeyStoreException {  KeyPair keyPair;  try {    KeyPairGenerator generator=KeyPairGenerator.getInstance("RSA");    generator.initialize(2048);    keyPair=generator.generateKeyPair();  } catch (  NoSuchAlgorithmException e) {    throw new KeyStoreException("Unable to generate PKI",e);  }  return keyPair;}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public E pop(){  return remove(size() - 1);}  }
class C{  private void filterVoiceInputKeyEvent(KeyEvent keyEvent,boolean needWakeLock){  if (DEBUG_RC) {    Log.v(TAG,"voice input key event: " + keyEvent + ", needWakeLock="+ needWakeLock);  }  int voiceButtonAction=VOICEBUTTON_ACTION_DISCARD_CURRENT_KEY_PRESS;  int keyAction=keyEvent.getAction();synchronized (mVoiceEventLock) {    if (keyAction == KeyEvent.ACTION_DOWN) {      if (keyEvent.getRepeatCount() == 0) {        mVoiceButtonDown=true;        mVoiceButtonHandled=false;      } else       if (mVoiceButtonDown && !mVoiceButtonHandled && (keyEvent.getFlags() & KeyEvent.FLAG_LONG_PRESS) != 0) {        mVoiceButtonHandled=true;        voiceButtonAction=VOICEBUTTON_ACTION_START_VOICE_INPUT;      }    } else     if (keyAction == KeyEvent.ACTION_UP) {      if (mVoiceButtonDown) {        mVoiceButtonDown=false;        if (!mVoiceButtonHandled && !keyEvent.isCanceled()) {          voiceButtonAction=VOICEBUTTON_ACTION_SIMULATE_KEY_PRESS;        }      }    }  }switch (voiceButtonAction) {case VOICEBUTTON_ACTION_DISCARD_CURRENT_KEY_PRESS:    if (DEBUG_RC)     Log.v(TAG,"   ignore key event");  break;case VOICEBUTTON_ACTION_START_VOICE_INPUT:if (DEBUG_RC) Log.v(TAG,"   start voice-based interactions");startVoiceBasedInteractions(needWakeLock);break;case VOICEBUTTON_ACTION_SIMULATE_KEY_PRESS:if (DEBUG_RC) Log.v(TAG,"   send simulated key event, wakelock=" + needWakeLock);sendSimulatedMediaButtonEvent(keyEvent,needWakeLock);break;}}  }
class C{  private void createToolbar(){  MenuAction createNewRuleMenu=new MenuAction();  createNewRuleMenu.setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_ADD));  createNewRuleMenu.setToolTipText("Add new rule");  for (  MatchingRuleType type : MatchingRuleType.values()) {    createNewRuleMenu.addAction(new AddMatchingRuleCompositeAction(type));  }  toolBarManager=new ToolBarManager();  final ToolBar toolbar=toolBarManager.createControl(getSection());  toolBarManager.add(createNewRuleMenu);  toolBarManager.update(true);  createNewRuleMenu.setRunTask(new MenuAction.ToolbarDropDownTask(toolbar));  getSection().setTextClient(toolbar);}  }
class C{  private void removeDirectCycle(){  for (  Map.Entry<GenericClass,Set<GenericAccessibleObject<?>>> entry : generators.entrySet()) {    if (entry.getValue().isEmpty()) {      continue;    }    Iterator<GenericAccessibleObject<?>> iter=entry.getValue().iterator();    while (iter.hasNext()) {      GenericAccessibleObject<?> gao=iter.next();      GenericClass owner=gao.getOwnerClass();      try {        cacheGenerators(owner);      } catch (      ConstructionFailedException e) {        continue;      }      for (      GenericAccessibleObject<?> genOwner : generatorCache.get(owner)) {        if (genOwner.isStatic()) {          continue;        }        if (Arrays.asList(genOwner.getGenericParameterTypes()).stream().anyMatch(null)) {          iter.remove();          break;        }      }    }    if (entry.getValue().isEmpty()) {      recursiveRemoveGenerators(entry.getKey());    }  }}  }
class C{  public void hide(){  visible=false;  if (lifecycleCallbacks.lastForegroundActivity != null) {    removeGridView(lifecycleCallbacks.lastForegroundActivity);  }}  }
class C{  public DateAxis(String label){  this(label,TimeZone.getDefault());}  }
class C{  void checkTurnout(int newState,int oldState,Turnout t){  if (isVetoed()) {    return;  }switch (mControlTurnoutState) {case ONCLOSED:    if (newState == Turnout.CLOSED) {      setRoute();    }  return;case ONTHROWN:if (newState == Turnout.THROWN) {  setRoute();}return;case ONCHANGE:if (newState != oldState) {setRoute();}return;default :return;}}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case 0:switch (mMenuMode.getSelectedItemPosition()) {case MENUMODE_SEARCH_KEY:      new AlertDialog.Builder(this).setMessage("To invoke search, dismiss this dialog and press the search key" + " (F5 on the simulator).").setPositiveButton("OK",null).show();    break;case MENUMODE_MENU_ITEM:  onSearchRequested();break;case MENUMODE_TYPE_TO_SEARCH:new AlertDialog.Builder(this).setMessage("To invoke search, dismiss this dialog and start typing.").setPositiveButton("OK",null).show();break;case MENUMODE_DISABLED:new AlertDialog.Builder(this).setMessage("You have disabled search.").setPositiveButton("OK",null).show();break;}break;case 1:clearSearchHistory();break;}return super.onOptionsItemSelected(item);}  }
class C{  public void peerDeployLike(Object obj){  assert obj != null;  pda=U.peerDeployAware(obj);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  List<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  public Object remove(int index){  Object o=this.opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConstraintExpr_();}  }
class C{  boolean isHot(){  return queueNext == null;}  }
class C{  public static void error(final String title,final String errorMessage){  error(null,title,errorMessage);}  }
class C{  public final String toString(){  StringBuffer retVal=new StringBuffer();  if (codeset != null) {    for (int i=0; i < prolog.size(); i++) {      ConcreteElement e=(ConcreteElement)prolog.elementAt(i);      retVal.append(e.toString(getCodeset()) + "\n");    }    if (content != null)     retVal.append(content.toString(getCodeset()));  } else {    for (int i=0; i < prolog.size(); i++) {      ConcreteElement e=(ConcreteElement)prolog.elementAt(i);      retVal.append(e.toString() + "\n");    }    if (content != null)     retVal.append(content.toString());  }  return versionDecl + retVal.toString();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private TopGroups<Integer> accumulateGroups(int slot,int offset,int maxDocsPerGroup,int withinGroupOffset,Sort withinGroupSort,boolean fillSortFields) throws IOException {  final GroupDocs<Integer>[] groups=new GroupDocs[sortedGroups.length - offset];  final FakeScorer fakeScorer=new FakeScorer();  int totalGroupedHitCount=0;  for (int groupIDX=offset; groupIDX < sortedGroups.length; groupIDX++) {    final OneGroup og=sortedGroups[groupIDX];    final int numChildDocs;    if (slot == -1 || slot >= og.counts.length) {      numChildDocs=0;    } else {      numChildDocs=og.counts[slot];    }    final int numDocsInGroup=Math.max(1,Math.min(numChildDocs,maxDocsPerGroup));    final TopDocsCollector<?> collector;    if (withinGroupSort == null) {      if (!trackScores) {        throw new IllegalArgumentException("cannot sort by relevance within group: trackScores=false");      }      collector=TopScoreDocCollector.create(numDocsInGroup);    } else {      collector=TopFieldCollector.create(withinGroupSort,numDocsInGroup,fillSortFields,trackScores,trackMaxScore);    }    LeafCollector leafCollector=collector.getLeafCollector(og.readerContext);    leafCollector.setScorer(fakeScorer);    for (int docIDX=0; docIDX < numChildDocs; docIDX++) {      final int doc=og.docs[slot][docIDX];      fakeScorer.doc=doc;      if (trackScores) {        fakeScorer.score=og.scores[slot][docIDX];      }      leafCollector.collect(doc);    }    totalGroupedHitCount+=numChildDocs;    final Object[] groupSortValues;    if (fillSortFields) {      groupSortValues=new Object[comparators.length];      for (int sortFieldIDX=0; sortFieldIDX < comparators.length; sortFieldIDX++) {        groupSortValues[sortFieldIDX]=comparators[sortFieldIDX].value(og.slot);      }    } else {      groupSortValues=null;    }    final TopDocs topDocs=collector.topDocs(withinGroupOffset,numDocsInGroup);    groups[groupIDX - offset]=new GroupDocs<>(og.score,topDocs.getMaxScore(),numChildDocs,topDocs.scoreDocs,og.doc,groupSortValues);  }  return new TopGroups<>(new TopGroups<>(sort.getSort(),withinGroupSort == null ? null : withinGroupSort.getSort(),0,totalGroupedHitCount,groups,maxScore),totalHitCount);}  }
class C{  private Map<String,String> removeAliasesStrategy(MDSDialog dialog,List<ZoneWwnAlias> removingAliases) throws NetworkDeviceControllerException {  Long time=System.currentTimeMillis();  Map<String,String> removedAliasesName=new HashMap<String,String>();  try {    dialog.config();    dialog.deviceAliasConfig();    Map<String,String> aliasMap=dialog.showDeviceAliasDatabase();    for (    ZoneWwnAlias wwnAlias : removingAliases) {      String name=wwnAlias.getName();      String wwn=wwnAlias.getAddress();      _log.info("Starting remove alias with name {}",name);      String currentWwn=aliasMap.get(name);      try {        if (StringUtils.isEmpty(currentWwn)) {          _log.info("Did not find alias {}. Nothing to do.",name);          removedAliasesName.put(name,NO_CHANGE);          continue;        } else         if (StringUtils.isEmpty(wwn) || StringUtils.equalsIgnoreCase(wwn,currentWwn)) {          _log.info("Found alias {}. The alias will be removed.",name);          dialog.deviceAliasName(name,currentWwn,true);          removedAliasesName.put(name,SUCCESS);          aliasMap.remove(name);        } else {          _log.info("The existing alias {} has a WWN other than the expected {}. It will not be removed.",name,wwn);          throw NetworkDeviceControllerException.exceptions.aliasWithDifferentWwnExists(name,currentWwn,wwn);        }      } catch (      Exception ex) {        removedAliasesName.put(name,ERROR + " : " + ex.getMessage());        _log.warn("Exception was encountered but will try the rest of the batch. " + "Error message: " + ex.getMessage());      }    }    if (!removedAliasesName.isEmpty()) {      dialog.deviceAliasCommit();      dialog.copyRunningConfigToStartupFabric();    } else {      dialog.exitToConfig();    }    time=System.currentTimeMillis() - time;    _log.info("Aliases remove time (msec): " + time.toString());    return removedAliasesName;  } catch (  Exception ex) {    dialog.deviceAliasAbort();    throw NetworkDeviceControllerException.exceptions.removeAliasesStrategyFailed(ex);  } finally {    dialog.endConfig();  }}  }
class C{  private void increaseCapacity(){  if (_capacity < C1) {    _capacity<<=1;    char[] tmp=new char[_capacity];    System.arraycopy(_low,0,tmp,0,_length);    _low=tmp;    _high[0]=tmp;  } else {    int j=_capacity >> B1;    if (j >= _high.length) {      char[][] tmp=new char[_high.length * 2][];      System.arraycopy(_high,0,tmp,0,_high.length);      _high=tmp;    }    _high[j]=new char[C1];    _capacity+=C1;  }}  }
class C{  private static boolean isHexDigit(char c){  return (c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F');}  }
class C{  public void modelUnclear(SessionEvent event){}  }
class C{  public static void bootstrapConf(SolrZkClient zkClient,CoreContainer cc,String solrHome) throws IOException, KeeperException, InterruptedException {  List<CoreDescriptor> cds=cc.getCoresLocator().discover(cc);  log.info("bootstrapping config for " + cds.size() + " cores into ZooKeeper using solr.xml from "+ solrHome);  for (  CoreDescriptor cd : cds) {    String coreName=cd.getName();    String confName=cd.getCollectionName();    if (StringUtils.isEmpty(confName))     confName=coreName;    String instanceDir=cd.getInstanceDir();    File udir=new File(instanceDir,"conf");    log.info("Uploading directory " + udir + " with name "+ confName+ " for SolrCore "+ coreName);    ZkController.uploadConfigDir(zkClient,udir,confName);  }}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("open")) {    open=false;    fireChange(PROP_OPEN);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:48:00.012 -0500",hash_original_method="0F5BE8719D80390C88A4C0CDCF0E8C81",hash_generated_method="0ACA5F612FBD92E336AFD53D86A3A209") public void closeContextMenu(){  mWindow.closePanel(Window.FEATURE_CONTEXT_MENU);}  }
class C{  public static Geo[] LLaToGa(double[] lla){  return LLaToGa(lla,true);}  }
class C{  public static void closeAfterCompletion(ExecutionSystem es,CommandExitLatch listener){  listener.startMonitoring(es);}  }
class C{  public long readLong(){  return ((long)(readInt()) << 32) + (readInt() & 0xffffffffL);}  }
class C{  public final static long DEG_TO_SC(double deg){  return (long)(deg * 3600000);}  }
class C{  private void validateAttributes(InputNode node,Section section) throws Exception {  NodeMap<InputNode> list=node.getAttributes();  LabelMap map=section.getAttributes();  for (  String name : list) {    InputNode value=node.getAttribute(name);    if (value != null) {      validateAttribute(value,section,map);    }  }  validate(node,map);}  }
class C{  public void newArray(final Type type){  int typ;switch (type.getSort()) {case Type.BOOLEAN:    typ=Opcodes.T_BOOLEAN;  break;case Type.CHAR:typ=Opcodes.T_CHAR;break;case Type.BYTE:typ=Opcodes.T_BYTE;break;case Type.SHORT:typ=Opcodes.T_SHORT;break;case Type.INT:typ=Opcodes.T_INT;break;case Type.FLOAT:typ=Opcodes.T_FLOAT;break;case Type.LONG:typ=Opcodes.T_LONG;break;case Type.DOUBLE:typ=Opcodes.T_DOUBLE;break;default :typeInsn(Opcodes.ANEWARRAY,type);return;}mv.visitIntInsn(Opcodes.NEWARRAY,typ);}  }
class C{  public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public DTMStringPool(int chainSize){  m_intToString=new Vector();  m_hashChain=new IntVector(chainSize);  removeAllElements();  stringToIndex("");}  }
class C{  public static boolean isOID(String alias){  return ObjectIdentifier.isOID(normalize(alias));}  }
class C{  public void putINT32(int int32){  put((byte)(int32 & 0xFF));  put((byte)((int32 >> 8) & 0xFF));  put((byte)((int32 >> 16) & 0xFF));  put((byte)((int32 >> 24) & 0xFF));}  }
class C{  public static String removeComments(String sqlStatement){  StringBuffer result=new StringBuffer();  int index=sqlStatement.indexOf("/*");  int lastIndex=0;  while (index >= 0) {    result.append(sqlStatement.substring(lastIndex,index));    int nextIndex=sqlStatement.indexOf("*/",index + 2);    if (nextIndex == -1)     return sqlStatement;    lastIndex=nextIndex + 2;    index=sqlStatement.indexOf("*/",lastIndex);  }  result.append(sqlStatement.substring(lastIndex));  BufferedReader reader=new BufferedReader(new StringReader(result.toString().trim()));  result=new StringBuffer();  String line=null;  try {    while ((line=reader.readLine()) != null) {      line=line.trim();      int firstCommentIdx=line.indexOf("--");      int doubleSlashCommentIdx=line.indexOf("//");      if (firstCommentIdx == -1 || (doubleSlashCommentIdx != -1 && doubleSlashCommentIdx < firstCommentIdx)) {        firstCommentIdx=doubleSlashCommentIdx;      }      String toAppend=null;      if (firstCommentIdx == -1)       toAppend=line; else       toAppend=line.substring(0,firstCommentIdx);      toAppend=toAppend.trim();      if (!"".equals(toAppend)) {        result.append(line);        result.append("\n");      }    }  } catch (  IOException neverHappens) {  }  return result.toString().trim();}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((NceListener)client).reply((NceReply)r);}  }
class C{  private void allTest(){  pauseFlush();  createAndPut();  forceFlush();  validateModification();  region.clear();  pauseFlush();  createAndDestroy();  forceFlush();  validateTombstone();  region.clear();  pauseFlush();  createAndInvalidate();  forceFlush();  validateInvalidate();  region.clear();  pauseFlush();  createDestroyCreate();  forceFlush();  validateModification();  pauseFlush();  putAndPut();  forceFlush();  validateModification();  region.clear();  pauseFlush();  putAndDestroy();  forceFlush();  validateTombstone();  region.clear();  pauseFlush();  putAndInvalidate();  forceFlush();  validateInvalidate();  region.clear();}  }
class C{  @Override public <C>C readObject(final InputStream inputStream,final Class<? extends C> clazz) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.206 -0400",hash_original_method="17CDBB829EF4B0C5B4419966B6F98CAD",hash_generated_method="B2C0A16B9210CECCBFAD8AF862BFDD23") private void createLock() throws IOException {synchronized (LockableFileWriter.class) {    if (!lockFile.createNewFile()) {      throw new IOException("Can't write file, lock " + lockFile.getAbsolutePath() + " exists");    }    lockFile.deleteOnExit();  }}  }
class C{  public ProductVectorer(){}  }
class C{  public final AC shrink(float w){  return shrink(w,curIx);}  }
class C{  public <IN>TestSink<IN> createTestSink(OutputVerifier<IN> verifier,VerifyFinishedTrigger trigger){  int port=runner.registerListener(verifier,trigger);  TestSink<IN> sink=new TestSink<IN>(port);  return sink;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){  float offset1=numbersRadius;  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;  float offset3=numbersRadius / 2f;  mPaint.setTextSize(textSize);  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;  textGridHeights[0]=yCenter - offset1;  textGridWidths[0]=xCenter - offset1;  textGridHeights[1]=yCenter - offset2;  textGridWidths[1]=xCenter - offset2;  textGridHeights[2]=yCenter - offset3;  textGridWidths[2]=xCenter - offset3;  textGridHeights[3]=yCenter;  textGridWidths[3]=xCenter;  textGridHeights[4]=yCenter + offset3;  textGridWidths[4]=xCenter + offset3;  textGridHeights[5]=yCenter + offset2;  textGridWidths[5]=xCenter + offset2;  textGridHeights[6]=yCenter + offset1;  textGridWidths[6]=xCenter + offset1;}  }
class C{  public static MosaicDefinitionCreationTransaction createMosaicDefinitionCreationTransaction(){  return createMosaicDefinitionCreationTransaction(TimeInstant.ZERO,Utils.generateRandomAccount());}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  super.addPropertyChangeListener(listener);}  }
class C{  public void addTrait(String guid,Struct traitDefinition) throws AtlasServiceException {  String traitJson=InstanceSerialization.toJson(traitDefinition,true);  LOG.debug("Adding trait to entity with id {} {}",guid,traitJson);  callAPI(API.ADD_TRAITS,traitJson,guid,URI_TRAITS);}  }
class C{  public void animateIn(){  animate(IN);}  }
class C{  public boolean remove(IInterval interval){  checkInterval(interval);  int begin=interval.getLeft();  int end=interval.getRight();  boolean modified=false;  if (begin <= left && right <= end) {    count--;    dispose(interval);    modified=true;  } else {    int mid=(left + right) / 2;    if (begin < mid) {      modified|=lson.remove(interval);    }    if (mid < end) {      modified|=rson.remove(interval);    }  }  return modified;}  }
class C{  public TraceCase_ createTraceCase_(){  TraceCase_Impl traceCase_=new TraceCase_Impl();  return traceCase_;}  }
class C{  public static void readCacheConfigurations(BinaryRawReaderEx in,IgniteConfiguration cfg){  int len=in.readInt();  if (len == 0)   return;  List<CacheConfiguration> caches=new ArrayList<>();  for (int i=0; i < len; i++)   caches.add(readCacheConfiguration(in));  CacheConfiguration[] oldCaches=cfg.getCacheConfiguration();  CacheConfiguration[] caches0=caches.toArray(new CacheConfiguration[caches.size()]);  if (oldCaches == null)   cfg.setCacheConfiguration(caches0); else {    CacheConfiguration[] mergedCaches=new CacheConfiguration[oldCaches.length + caches.size()];    System.arraycopy(oldCaches,0,mergedCaches,0,oldCaches.length);    System.arraycopy(caches0,0,mergedCaches,oldCaches.length,caches.size());    cfg.setCacheConfiguration(mergedCaches);  }}  }
class C{  private static void updateTransactionEntry(FinanceService service,String entryUrl,TransactionEntry entry) throws IOException, MalformedURLException, ServiceException {  System.out.println("Updating Entry at location: " + entryUrl);  TransactionEntry updatedEntry=service.update(new URL(entryUrl),entry);  printTransactionEntry(updatedEntry);}  }
class C{  public void addClassPath(){  addClassPath(Thread.currentThread().getContextClassLoader());}  }
class C{  BooleanSettingImpl(Properties defaultProps,Properties props,String key,boolean defaultBool){  super(defaultProps,props,key,String.valueOf(defaultBool));}  }
class C{  public Company beginDate(SafeCalendar beginDate){  this.beginDate=beginDate;  return this;}  }
class C{  public final static int murmurHash3(int x){  x^=x >>> 16;  x*=0x85ebca6b;  x^=x >>> 13;  x*=0xc2b2ae35;  x^=x >>> 16;  return x;}  }
class C{  public static int changeLevel(final int exp,final int added){  int i;  for (i=0; i < LEVELS; i++) {    if (exp < xp[i]) {      break;    }  }  for (int j=i; j <= LEVELS; j++) {    if (exp + added < xp[j]) {      return j - i;    }  }  return 0;}  }
class C{  public void likeMedia(InstagramAPIResponseCallback<IGPostResponse> callback,String mediaId){  Call<IGAPIResponse> call=instagramAPIService.postMediaLike(mediaId,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<IGPostResponse>(){  }.getType()));}  }
class C{  public Collection<DbTable> metadata(Connection conn,List<String> schemas,boolean tblsOnly) throws SQLException {  return dialect(conn).tables(conn,schemas,tblsOnly);}  }
class C{  public static <T>WritableDataStore<T> makeStorage(DBIDs ids,int hints,Class<? super T> dataclass){  return DataStoreFactory.FACTORY.makeStorage(ids,hints,dataclass);}  }
class C{  public final boolean isUnlocked(){  return _unlocked;}  }
class C{  private void detectActivePointers(MotionEvent event){  for (int i=0, count=event.getPointerCount(); i < count; i++) {    final int pointerId=event.getPointerId(i);    if (mHasMovingActivePointer) {      if (isActivePointer(pointerId)) {        continue;      }    }    final float pointerDeltaMove=computePointerDeltaMove(i,event);    if (pointerDeltaMove > mThresholdActivePointer) {      final int pointerFlag=(1 << pointerId);      mActivePointers|=pointerFlag;      mHasMovingActivePointer=true;    }  }}  }
class C{  public static LatLonPoint sunPosition(long mssue){  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(new Date(mssue));  double julianDate=calculateJulianDate(cal);  long gmtOffset=cal.get(Calendar.ZONE_OFFSET);  long dstOffset=cal.get(Calendar.DST_OFFSET);  cal.setTime(new Date(mssue - (gmtOffset + dstOffset)));  double numDaysSinceEpoch=((mssue / 1000) - EPOCH_TIME_SECS) / (24.0f * 3600.0f);  double M0=sunMeanAnomaly(numDaysSinceEpoch);  double sunLongitude=sunEclipticLongitude(M0);  double sunAscension=eclipticToEquatorialAscension(sunLongitude,0.0);  double sunDeclination=eclipticToEquatorialDeclination(sunLongitude,0.0);  double tmpAscension=sunAscension - (MoreMath.TWO_PI / 24) * greenwichSiderealTime(julianDate,cal);  return new LatLonPoint.Double(sunDeclination,tmpAscension,true);}  }
class C{  public static void commandLineCompileWithErrorHandling(String[] args,boolean lookupUnnamedFiles){  try {    commandLineCompile(args,lookupUnnamedFiles);  } catch (  Throwable e) {    new ErrorReporter(e,displayStackTraceOnError).write(System.err);    System.exit(1);  }}  }
class C{  public void writeStartElement(String localName) throws XMLStreamException {  if (localName == null || localName.length() == 0) {    throw new XMLStreamException("Local Name cannot be null or empty");  }  _state=STATE_ELEMENT;  if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) {    closeStartTag();  }  _currentEle=new Element(_currentEle,localName,false);  openStartTag();  _writer.write(localName);}  }
class C{  public LanguageDetectionResult detectLanguage(String text){  try {    Detector detector=DetectorFactory.create(0.15);    detector.append(text.toLowerCase());    ArrayList<Language> languages=detector.getProbabilities();    Language detectedLanguage=extractLangWithHighestProbability(languages);    return new LanguageDetectionResult(detectedLanguage,text,languages.size() > 1);  } catch (  LangDetectException ex) {    LOGGER.warn(ex);  }  return null;}  }
class C{  public final IntGrid2D multiply(IntGrid2D withThis){  checkBounds(withThis);  int[][] ofield=withThis.field;  int[] ofieldx=null;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=ofield[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      fieldx[y]*=ofieldx[y];    }  }  return this;}  }
class C{  public CFilenameFormatter(final File directory){  Preconditions.checkArgument(directory.exists(),"Error: Direcctory must exist.");  m_directory=directory;}  }
class C{  public static BigInteger decodeInteger(final byte[] pArray){  return new BigInteger(1,decodeBase64(pArray));}  }
class C{  public GeneralPath(int rule){  this(rule,BUFFER_SIZE);}  }
class C{  public void omitAll(){  if (writeChunk != null)   bytesWritten+=writeChunk.position();  bytesRead=bytesWritten;  list.clear();  writeChunk=null;  readChunk=null;}  }
class C{  public synchronized boolean isHeaderModified(){  return headersModified;}  }
class C{  public boolean isUnderlineTriple(Node x,Node y,Node z){  return getGraph().isUnderlineTriple(x,y,z);}  }
class C{  public boolean equals(CharSegment cb){  int length=_length;  if (length != cb._length) {    return false;  }  char[] buffer=_buffer;  char[] aBuffer=cb._buffer;  int offset=_offset;  int aOffset=cb._offset;  for (int i=length - 1; i >= 0; i--) {    if (buffer[offset + i] != aBuffer[aOffset + i]) {      return false;    }  }  return true;}  }
class C{  public int offset(){  return offset;}  }
class C{  public boolean is3DEnabled(){  return m3DEnabled;}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=Integer.parseInt(nodeAddrField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 1) || (addr > 99)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (stateName_1: ");  result.append(stateName_1);  result.append(')');  return result.toString();}  }
class C{  public boolean hasCache(){  final NodeVector nv=getVector();  return (nv != null);}  }
class C{  public TemplateBuffer(String string,TemplateVariable[] variables){  setContent(string,variables);}  }
class C{  private void validateVolumesNotMounted(ExportGroup exportGroup,List<URI> boURIList){  if (exportGroup == null) {    throw APIException.badRequests.exportGroupContainsMountedVolumesInvalidParam();  }  Map<URI,String> boToLabelMap=new HashMap<>();  if (boURIList != null) {    for (    URI boID : boURIList) {      BlockObject bo=BlockObject.fetch(_dbClient,boID);      if (bo != null && bo.getTag() != null) {        ScopedLabelSet tagSet=bo.getTag();        Iterator<ScopedLabel> tagIter=tagSet.iterator();        while (tagIter.hasNext()) {          ScopedLabel sl=tagIter.next();          if (sl.getLabel() != null && (sl.getLabel().startsWith(MOUNTPOINT) || sl.getLabel().startsWith(VMFS_DATASTORE))) {            if (exportGroup.getClusters() != null) {              for (              String clusterID : exportGroup.getClusters()) {                if (sl.getLabel().contains(clusterID)) {                  boToLabelMap.put(boID,bo.forDisplay());                }              }            }            if (exportGroup.getHosts() != null) {              for (              String hostID : exportGroup.getHosts()) {                if (sl.getLabel().contains(hostID)) {                  boToLabelMap.put(boID,bo.forDisplay());                }              }            }          }        }      }    }  }  if (!boToLabelMap.isEmpty()) {    _log.error("Export Group {} has volumes {} that are marked as mounted.  It is recommended to unmount via controller before unexport.  This validation check can be disabled if needed.  Contact EMC Support.",exportGroup.getId(),Joiner.on(",").join(boToLabelMap.values()));    ValidatorConfig vc=new ValidatorConfig();    vc.setCoordinator(_coordinator);    if (vc.isValidationEnabled()) {      throw APIException.badRequests.exportGroupContainsMountedVolumes(exportGroup.getId(),Joiner.on(",").join(boToLabelMap.values()));    }  }}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){  snapshot.setNativeId(unitySnap.getId());  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));  snapshot.setDeviceLabel(unitySnap.getName());  snapshot.setIsSyncActive(true);  snapshot.setInactive(false);  snapshot.setCreationTime(Calendar.getInstance());  snapshot.setWWN(unitySnap.getAttachedWWN());  snapshot.setAllocatedCapacity(unitySnap.getSize());  snapshot.setProvisionedCapacity(unitySnap.getSize());  dbClient.createObject(snapshot);}  }
class C{  private InputStream findTemplate(String path,String template){  try {    File file=new File(path,template);    if (file.canRead()) {      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));    } else {      return null;    }  } catch (  FileNotFoundException fnfe) {    return null;  }}  }
class C{  public GraphicalView(Context context,AbstractChart chart){  super(context);  mChart=chart;  mHandler=new Handler();  if (mChart instanceof XYChart) {    mRenderer=((XYChart)mChart).getRenderer();  } else {    mRenderer=((RoundChart)mChart).getRenderer();  }  if (mRenderer.isZoomButtonsVisible()) {    zoomInImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_in.png"));    zoomOutImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_out.png"));    fitZoomImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom-1.png"));  }  if (mRenderer instanceof XYMultipleSeriesRenderer && ((XYMultipleSeriesRenderer)mRenderer).getMarginsColor() == XYMultipleSeriesRenderer.NO_COLOR) {    ((XYMultipleSeriesRenderer)mRenderer).setMarginsColor(mPaint.getColor());  }  if (mRenderer.isZoomEnabled() && mRenderer.isZoomButtonsVisible() || mRenderer.isExternalZoomEnabled()) {    mZoomIn=new Zoom(mChart,true,mRenderer.getZoomRate());    mZoomOut=new Zoom(mChart,false,mRenderer.getZoomRate());    mFitZoom=new FitZoom(mChart);  }  int version=7;  try {    version=Integer.valueOf(Build.VERSION.SDK);  } catch (  Exception e) {  }  if (version < 7) {    mTouchHandler=new TouchHandlerOld(this,mChart);  } else {    mTouchHandler=new TouchHandler(this,mChart);  }}  }
class C{  LookupContext(Blackboard bb,List<RelNode> rels,int systemFieldCount){  bb.flatten(rels,systemFieldCount,new int[]{0},relOffsetList);}  }
class C{  public static Predicates2<String,String> notContains(){  return NOT_CONTAINS_STRING;}  }
class C{  public static String stripHTMLTags(String original){  boolean skipping=false;  boolean writing=false;  StringBuffer buffer=new StringBuffer();  StringTokenizer tokenizer=new StringTokenizer(original,"<>",true);  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (token.equalsIgnoreCase("<")) {      skipping=true;      writing=false;      continue;    }    if (token.equalsIgnoreCase(">")) {      skipping=false;      continue;    }    if (!skipping) {      if (token.trim().length() == 0) {        continue;      }      if (!writing) {        buffer.append("\n");      }      writing=true;      buffer.append(token.trim());    }  }  return buffer.toString();}  }
class C{  public static Duration formattedStringToDuration(final String formattedDuration){  if (formattedDuration == null) {    return null;  }  final TemporalAccessor ta=DateTimeFormatter.ofPattern(DURATION_FORMAT).parse(formattedDuration.trim());  return Duration.between(LocalTime.MIDNIGHT,LocalTime.from(ta));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  try {    return Wizard.getInstance().getSeriesInfoForShowcardID(Integer.parseInt(s));  } catch (  NumberFormatException nfe) {    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public static StoreContext fromSerializedBytes(byte bytes[]){  StoreContext ctx;  if (bytes != null && bytes.length > 0) {    ByteBuffer bb=ByteBufferSupport.fillBuffer(bytes);    ByteBuffer frameworkId=ByteBufferSupport.createBuffer(bb);    List<ByteBuffer> taskIds=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> taskNodes=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> pendingTasks=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> stagingTasks=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> activeTasks=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> lostTasks=ByteBufferSupport.createBufferList(bb,bb.getInt());    List<ByteBuffer> killableTasks=ByteBufferSupport.createBufferList(bb,bb.getInt());    ctx=new StoreContext(frameworkId,taskIds,taskNodes,pendingTasks,stagingTasks,activeTasks,lostTasks,killableTasks);  } else {    ctx=new StoreContext();  }  return ctx;}  }
class C{  public DSSDocument generateCAdESContentTimestamp(final XAdESSignatureParameters externalParameters){  final TimestampToken contentTimestampToken=generateCAdESContentTimestampAsTimestampToken(externalParameters);  final InMemoryDocument document=new InMemoryDocument(contentTimestampToken.getEncoded());  return document;}  }
class C{  private void demoXPath(){  this.buffer=new StringBuffer("The name of the servlet is :");  this.buffer.append(demoDocument.valueOf("/web-app/servlet[1]/servlet-name"));  this.buffer.append(" and the class is ");  this.buffer.append(demoDocument.valueOf("/web-app/servlet[1]/servlet-class"));}  }
class C{  final public void print(char[] s){  Writer out=this.out;  if (out == null)   return;  try {    out.write(s,0,s.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public InvalidKeySpecException(String msg){  super(msg);}  }
class C{  @RequestProcessing(value="/reset-pwd",method=HTTPRequestMethod.POST) public void resetPwd(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  context.renderJSON();  final JSONObject requestJSONObject=Requests.parseRequestJSONObject(request,response);  final String password=requestJSONObject.optString(User.USER_PASSWORD);  final String userId=requestJSONObject.optString(Common.USER_ID);  String name=null;  String email=null;  try {    final JSONObject user=userQueryService.getUser(userId);    if (null == user) {      context.renderMsg(langPropsService.get("resetPwdLabel") + " - " + "User Not Found");      return;    }    user.put(User.USER_PASSWORD,password);    userMgmtService.updatePassword(user);    context.renderTrueResult();    LOGGER.info("User [email=" + user.optString(User.USER_EMAIL) + "] reseted password");    Sessions.login(request,response,user);  } catch (  final ServiceException e) {    final String msg=langPropsService.get("resetPwdLabel") + " - " + e.getMessage();    LOGGER.log(Level.ERROR,msg + "[name={0}, email={1}]",name,email);    context.renderMsg(msg);  }}  }
class C{  public double max(){  if (size() < 1) {    throw new IllegalArgumentException("zero size");  }  double ma=V[0];  if (size() < 2) {    return ma;  }  for (int i=1; i < size(); i++) {    if (V[i] > ma) {      ma=V[i];    }  }  return ma;}  }
class C{  public void eliminarGrupo(String[] grupos) throws ActionNotAllowedException {  checkPermission(ControlAccesoSecurityManager.ELIMINAR_GRUPO);  iniciarTransaccion();  ServiceRepository services=ServiceRepository.getInstance(getServiceSession());  GestionAuditoriaBI auditoriaBI=services.lookupGestionAuditoriaBI();  grupoDBEntity.eliminarGrupos(grupos);  auditoriaBI.removeTipoAuditado(CritUsuarioVO.TIPO_GRUPO,grupos);  commit();}  }
class C{  public boolean equals(Object other){  if ((other != null) && (other.getClass().equals(MXFUID.class))) {    return Arrays.equals(this.uid,((MXFUID)other).uid);  } else {    return false;  }}  }
class C{  public BinaryBufferedFile(File f,int buffersize) throws IOException {  super(f);  buffer=new byte[buffersize];}  }
class C{  private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){  LinesToCharsResult b=diff_linesToChars(text1,text2);  text1=b.chars1;  text2=b.chars2;  List<String> linearray=b.lineArray;  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);  diff_charsToLines(diffs,linearray);  diff_cleanupSemantic(diffs);  diffs.add(new Diff(Operation.EQUAL,""));  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  ListIterator<Diff> pointer=diffs.listIterator();  Diff thisDiff=pointer.next();  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  break;case DELETE:count_delete++;text_delete+=thisDiff.text;break;case EQUAL:if (count_delete >= 1 && count_insert >= 1) {pointer.previous();for (int j=0; j < count_delete + count_insert; j++) {pointer.previous();pointer.remove();}for (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {pointer.add(newDiff);}}count_insert=0;count_delete=0;text_delete="";text_insert="";break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}diffs.removeLast();return diffs;}  }
class C{  public String blanks(){  return mBlanks;}  }
class C{  private static Node createNode(Document owner,String xmlDefintion) throws SAXException, IOException, ParserConfigurationException {  InputSource inputSource=new InputSource(new StringReader(xmlDefintion));  Document document=getDocumentBuilder().parse(inputSource);  Node newNode=document.getDocumentElement();  return owner.importNode(newNode,true);}  }
class C{  public String toString(){  String result;  result="Filename: " + getFilename();  return result;}  }
class C{  public CatalogEntryRemovedException(String message){  super(message);}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public Closure<V> trampoline(){  return new TrampolineClosure<V>(this);}  }
class C{  IntrinsicScope(BytecodeParser parser){  this.parser=parser;  assert parser.parent == null;  assert parser.bci() == 0;  mark=null;}  }
class C{  public static Test suite(){  return (new TestSuite(JspIntegrationITCase.class));}  }
class C{  public void invalidatePath(){  generalPath=null;  bounds=null;}  }
class C{  public Task<FileShareRestRep> updateExport(URI id,String subDirectory,FileShareExportUpdateParams input){  UriBuilder builder=client.uriBuilder(getExportUrl());  if (subDirectory != null) {    builder.queryParam(SUBDIR_PARAM,subDirectory);  }  URI targetUri=builder.build(id);  return putTaskURI(input,targetUri);}  }
class C{  public void componentRemoved(ContainerEvent e){  ((ContainerListener)a).componentRemoved(e);  ((ContainerListener)b).componentRemoved(e);}  }
class C{  private void add(TreeMap<String,Object> map,String key,Object value){  Vector<Object> v=getList(map,key);  if (v == null) {    v=new Vector<>();synchronized (map) {      map.put(key,v);    }  }  if (!v.contains(value)) {    v.add(value);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","xxu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static void purgeTables(DataSource ds) throws Exception {  try (Connection cn=ds.getConnection()){    Statement stmt=cn.createStatement();    stmt.execute("DELETE FROM persons");  } }  }
class C{  public int length(URL url){  return url.toString().length();}  }
class C{  public ProductRulePanel(){  this.add(tabbedPane);  YesNoNull useWeights=createYesNoChoiceBox(null,null);  mainTab.addItem("Use weight values",useWeights);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public void layoutBefore(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.864 -0500",hash_original_method="9098E303492EB41E4D0C87452F661A58",hash_generated_method="824C2C4C74F4FF3981DEA2E998C81CE6") private static synchronized long contentUrlSize(String url){  if (url.startsWith(ANDROID_CONTENT)) {    try {      int mimeIndex=url.lastIndexOf('?');      if (mimeIndex != -1) {        url=url.substring(0,mimeIndex);      }      Uri uri=Uri.parse(url);      InputStream is=sContext.getContentResolver().openInputStream(uri);      byte[] buffer=new byte[1024];      int n;      long size=0;      try {        while ((n=is.read(buffer)) != -1) {          size+=n;        }      }  finally {        is.close();      }      return size;    } catch (    Exception e) {      Log.e(LOGTAG,"Exception: " + url);      return 0;    }  } else {    return 0;  }}  }
class C{  public QueryModel prepareQueryModel(List<TableBlockInfo> blockList){  QueryModel model=new QueryModel();  model.setTableBlockInfos(blockList);  model.setCountStarQuery(false);  model.setDetailQuery(true);  model.setForcedDetailRawQuery(true);  model.setFilterExpressionResolverTree(null);  List<QueryDimension> dims=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  CarbonDimension dim : destinationSegProperties.getDimensions()) {    QueryDimension queryDimension=new QueryDimension(dim.getColName());    dims.add(queryDimension);  }  model.setQueryDimension(dims);  List<QueryMeasure> msrs=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  CarbonMeasure carbonMeasure : destinationSegProperties.getMeasures()) {    QueryMeasure queryMeasure=new QueryMeasure(carbonMeasure.getColName());    msrs.add(queryMeasure);  }  model.setQueryMeasures(msrs);  model.setQueryId(System.nanoTime() + "");  model.setAbsoluteTableIdentifier(carbonTable.getAbsoluteTableIdentifier());  model.setAggTable(false);  model.setLimit(-1);  model.setTable(carbonTable);  model.setInMemoryRecordSize(CarbonCommonConstants.COMPACTION_INMEMORY_RECORD_SIZE);  return model;}  }
class C{  protected SegmentTreeNode(int left,int right){  checkInterval(left,right);  this.left=left;  this.right=right;  this.count=0;}  }
class C{  public static void alfabeto(TextField campo){  campo.lengthProperty().addListener(null);}  }
class C{  public BaleenFileLoggerBuilder(String name,String pattern,String file,List<Filter<ILoggingEvent>> filters,boolean dailyLogFiles,Optional<Integer> maxSize,Optional<Integer> maxNumberLogs){  super(name,pattern,filters);  this.file=file;  this.dailyLogFiles=dailyLogFiles;  this.maxSize=maxSize;  this.maxNumberLogs=maxNumberLogs;}  }
class C{  public static String unhtmlQuotes(String str){  str=unhtmlDoubleQuotes(str);  str=unhtmlSingleQuotes(str);  return str;}  }
class C{  @Uninterruptible public static void dumpAllThreadStacks(){  RVMThread.dumpVirtualMachine();}  }
class C{  protected String paramString(){  String tipTextString=(tipText != null ? tipText : "");  return super.paramString() + ",tipText=" + tipTextString;}  }
class C{  @Override protected void doPost(final WorkbenchRequest req,final HttpServletResponse resp,final String xslPath) throws ServletException {  try {    resp.sendRedirect("../" + createRepositoryConfig(req) + "/summary");  } catch (  Exception e) {    throw new ServletException(e);  }}  }
class C{  public void playItem(BaseItemDto item,PlayCommand command,Long startPositionTicks){  if (item == null) {    throw new NullPointerException("item");  }  BaseItemDto[] items=new BaseItemDto[]{item};  playItems(items,command,startPositionTicks);}  }
class C{  private void createChildren(){  if (m_database.isLoaded()) {    for (    final INaviModule module : m_database.getContent().getModules()) {      add(new CModuleNode(module,m_model,m_actionProvider));    }  }}  }
class C{  private void retrieveExtras(){  Bundle extras=getIntent().getExtras();  selectedIndex=extras.getInt(EXTRA_INDEX,0);}  }
class C{  public void onDataFlushed(ContactId contact){}  }
class C{  public ActiveMQRAXAResource(final ActiveMQRAManagedConnection managedConnection,final XAResource xaResource){  if (ActiveMQRAXAResource.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + managedConnection + ", "+ xaResource+ ")");  }  this.managedConnection=managedConnection;  this.xaResource=xaResource;}  }
class C{  @Deprecated public static String detectCleanMoviename(String filename){  return detectCleanMovienameAndYear(filename)[0];}  }
class C{  void closeConnection(){  try {    if (mHttpClientConnection != null && mHttpClientConnection.isOpen()) {      mHttpClientConnection.close();    }  } catch (  IOException e) {    if (HttpLog.LOGV)     HttpLog.v("closeConnection(): failed closing connection " + mHost);    e.printStackTrace();  }}  }
class C{  public boolean isInterestingToUserLocked(){  final int size=activities.size();  for (int i=0; i < size; i++) {    ActivityRecord r=activities.get(i);    if (r.isInterestingToUserLocked()) {      return true;    }  }  return false;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  final public void print(char[] v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public FlushRequest waitIfOngoing(boolean waitIfOngoing){  this.waitIfOngoing=waitIfOngoing;  return this;}  }
class C{  final public void disable_tracing(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void cacheDocSet(Query query,DocSet optionalAnswer,boolean mustCache) throws IOException {  if (optionalAnswer != null) {    if (filterCache != null) {      filterCache.put(query,optionalAnswer);    }    return;  }  getDocSet(query);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ADDITIVE_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.ADDITIVE_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public BaseCreateLinkRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String type){  super(requestUrl,client,options,Permission.class);  mBody=new CreateLinkBody();  mBody.type=type;}  }
class C{  public static IbmEjbJarBndXmi parseIbmEjbJarXmi(InputStream input) throws IOException, JDOMException {  IbmEjbJarBndXmiIo xio=new IbmEjbJarBndXmiIo();  return (IbmEjbJarBndXmi)xio.parseXml(input);}  }
class C{  synchronized ConnectionImpl createConnectionForHostIndex(int hostIndex) throws SQLException {  return createConnectionForHost(this.hostList.get(hostIndex));}  }
class C{  @Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.end(name);  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  public boolean isTLevelTechnicallyValid(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isTLevelTechnicallyValid();}  }
class C{  public DateTimeFormatterBuilder appendFractionOfHour(int minDigits,int maxDigits){  return appendFraction(DateTimeFieldType.hourOfDay(),minDigits,maxDigits);}  }
class C{  @Override public short[][] action_table(){  return _action_table;}  }
class C{  public synchronized boolean sendReplyForOneResult(DM dm,PartitionedRegion pr,long startTime,Object oneResult,boolean lastResult,boolean sendResultsInOrder) throws CacheException, ForceReattemptException, InterruptedException {  if (this.replyLastMsg) {    return false;  }  if (Thread.interrupted())   throw new InterruptedException();  int msgNum=this.replyMsgNum;  this.replyLastMsg=lastResult;  sendReply(getSender(),this.processorId,dm,null,oneResult,pr,startTime,msgNum,lastResult,sendResultsInOrder);  if (logger.isDebugEnabled()) {    logger.debug("Sending reply message count: {} to co-ordinating node");  }  this.replyMsgNum++;  return false;}  }
class C{  public MigrationInfo[] resolved(){  List<MigrationInfo> resolvedMigrations=new ArrayList<MigrationInfo>();  for (  MigrationInfo migrationInfo : migrationInfos) {    if (migrationInfo.getState().isResolved()) {      resolvedMigrations.add(migrationInfo);    }  }  return resolvedMigrations.toArray(new MigrationInfo[resolvedMigrations.size()]);}  }
class C{  public static String reflectionToString(final Object object,final ToStringStyle style,final boolean outputTransients){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,null);}  }
class C{  private boolean flexibleRRpolicy(Map<Integer,List<InstanceId>> allocation,ArrayList<Container> containers,InstanceId instanceId,Resource instanceResource){  if (placeResourceCompliantRRInstance(containers,containerId,new PackingPlan.InstancePlan(instanceId,instanceResource))) {    allocation.get(containerId).add(instanceId);    containerId=(containerId == numContainers) ? 1 : containerId + 1;    return true;  } else {    boolean containersChecked=false;    int currentContainer=(containerId == numContainers) ? 1 : containerId + 1;    while (!containersChecked) {      if (placeResourceCompliantRRInstance(containers,currentContainer,new PackingPlan.InstancePlan(instanceId,instanceResource))) {        allocation.get(currentContainer).add(instanceId);        containerId=(currentContainer == numContainers) ? 1 : currentContainer + 1;        return true;      }      currentContainer=(currentContainer == numContainers) ? 1 : currentContainer + 1;      if (currentContainer == containerId) {        containersChecked=true;      }    }  }  containerId=1;  return false;}  }
class C{  public void beeLock(){  beeCount++;}  }
class C{  public void proactiveCancel(){  Request cancel=Request.newGet();  cancel.setDestination(request.getDestination());  cancel.setDestinationPort(request.getDestinationPort());  cancel.setToken(request.getToken());  cancel.setOptions(request.getOptions());  cancel.setObserveCancel();  for (  MessageObserver mo : request.getMessageObservers()) {    cancel.addMessageObserver(mo);  }  endpoint.sendRequest(cancel);  request.cancel();  setCanceled(true);}  }
class C{  protected boolean checkClosed(boolean write){  if (conn == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  conn.checkClosed(write);  SessionInterface s=conn.getSession();  if (s != session) {    session=s;    trace=session.getTrace();    return true;  }  return false;}  }
class C{  private short[] verifySignatureIntern(short[] signature){  short[][] coeff_quadratic=((RainbowPublicKeyParameters)this.key).getCoeffQuadratic();  short[][] coeff_singular=((RainbowPublicKeyParameters)this.key).getCoeffSingular();  short[] coeff_scalar=((RainbowPublicKeyParameters)this.key).getCoeffScalar();  short[] rslt=new short[coeff_quadratic.length];  int n=coeff_singular[0].length;  int offset=0;  short tmp=0;  for (int p=0; p < coeff_quadratic.length; p++) {    offset=0;    for (int x=0; x < n; x++) {      for (int y=x; y < n; y++) {        tmp=GF2Field.multElem(coeff_quadratic[p][offset],GF2Field.multElem(signature[x],signature[y]));        rslt[p]=GF2Field.addElem(rslt[p],tmp);        offset++;      }      tmp=GF2Field.multElem(coeff_singular[p][x],signature[x]);      rslt[p]=GF2Field.addElem(rslt[p],tmp);    }    rslt[p]=GF2Field.addElem(rslt[p],coeff_scalar[p]);  }  return rslt;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public void updateFloat(int columnIndex,float x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public ItemHandler(RootHandler root,DefaultHandler parent){  this.root=root;  this.parent=parent;  this.key=null;  this.value=null;}  }
class C{  public void keyTyped(KeyEvent evt){  int modifiers=evt.getModifiers();  char c=evt.getKeyChar();  if (c != KeyEvent.CHAR_UNDEFINED && (modifiers & KeyEvent.ALT_MASK) == 0) {    if (c >= 0x20 && c != 0x7f) {      KeyStroke keyStroke=KeyStroke.getKeyStroke(Character.toUpperCase(c));      Object o=currentBindings.get(keyStroke);      if (o instanceof Hashtable) {        currentBindings=(Hashtable)o;        return;      } else       if (o instanceof ActionListener) {        currentBindings=bindings;        executeAction((ActionListener)o,evt.getSource(),String.valueOf(c),modifiers);        return;      }      currentBindings=bindings;      if (grabAction != null) {        handleGrabAction(evt);        return;      }      if (repeat && Character.isDigit(c)) {        repeatCount*=10;        repeatCount+=(c - '0');        return;      }      executeAction(INSERT_CHAR,evt.getSource(),String.valueOf(evt.getKeyChar()),modifiers);      repeatCount=0;      repeat=false;    }  }}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public void onScreenChange(boolean turnedOn){  if (DEBUG_LOGS)   Log.v(TAG,"onScreenChange: " + turnedOn);  if (turnedOn) {    registerTimeZoneReceiver();    mSensorAccelerometer.register();    if (RANDOM_TIME_PER_GLANCE) {      mTimeManager.addRandomInc();    }    glances++;    if (shouldReset())     board.reset();  } else {    if (timelyReset()) {      if (DEBUG_LOGS)       Log.v(TAG,"Resetting watch face");      board.reset();    }    unregisterTimeZoneReceiver();    mSensorAccelerometer.unregister();  }  updateTimer();}  }
class C{  public static Date convertDate(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueDate d=(ValueDate)value.convertTo(Value.DATE);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=d.getDateValue();  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);  long ms=cal.getTimeInMillis();  return new Date(ms);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.252 -0500",hash_original_method="02471F94F8A872CAA5DBEB3E98DF50DE",hash_generated_method="C1662F72DC398FF54402916FC18586AB") public static boolean isISOControl(char c){  return isISOControl((int)c);}  }
class C{  public void disallowStateTransitions(){  stateTransitionsAllowed=false;}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public boolean removeWhoList(Who whoList){  return super.removeElement(whoList);}  }
class C{  public Vertex evaluateEVAL(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  Vertex result=null;  try {    if (expression.isVariable()) {      result=variables.get(this);      if (result == null) {        if (expression.hasName()) {          result=variables.get(expression.getName());        }        if (result == null) {          result=network.createVertex(Primitive.NULL);        }      }    } else     if (expression.instanceOf(Primitive.EXPRESSION)) {      if (expression.getData() instanceof BinaryData) {        expression=SelfDecompiler.getDecompiler().parseExpressionByteCode(expression,(BinaryData)expression.getData(),network);        return evaluateEVAL(expression,arguments,variables,network,startTime,maxTime,stack);      }      Vertex operator=expression.getRelationship(Primitive.OPERATOR);      List<Relationship> evalArguments=expression.orderedRelationships(Primitive.ARGUMENT);      if (operator.is(Primitive.EVAL)) {        return evaluateExpression(evalArguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);      }    } else {      result=(Vertex)(Object)expression;    }    if (result == null) {      result=network.createVertex(Primitive.NULL);    }    if (result.getNetwork() != network) {      result=network.createVertex(result);    }    boolean formula=result.instanceOf(Primitive.FORMULA);    boolean pattern=result.instanceOf(Primitive.PATTERN);    if (formula || pattern) {      List<Vertex> words=result.orderedRelations(Primitive.WORD);      if (words == null) {        return result;      }      List<Vertex> newWords=new ArrayList<Vertex>(words.size());      boolean eval=false;      boolean formulaRequired=false;      for (      Vertex word : words) {        if (word.instanceOf(Primitive.EXPRESSION)) {          if (word.getData() instanceof BinaryData) {            word=SelfDecompiler.getDecompiler().parseExpressionByteCode(word,(BinaryData)word.getData(),network);          }          Vertex operator=word.getRelationship(Primitive.OPERATOR);          if (operator != null && operator.is(Primitive.EVAL)) {            eval=true;            Vertex newWord=evaluateEVAL(word,arguments,variables,network,startTime,maxTime,stack);            if (newWord.instanceOf(Primitive.EXPRESSION) || newWord.instanceOf(Primitive.FORMULA)) {              formulaRequired=true;            }            newWords.add(newWord);          } else {            formulaRequired=true;            newWords.add(word);          }        } else         if (word.instanceOf(Primitive.VARIABLE)) {          formulaRequired=true;          newWords.add(word);        } else {          newWords.add(word);        }      }      if (eval) {        if (pattern) {          result=network.createTemporyVertex();          result.addRelationship(Primitive.INSTANTIATION,Primitive.PATTERN);        } else         if (formulaRequired) {          result=network.createInstance(Primitive.FORMULA);        } else {          result=network.createTemporyVertex();          result.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);        }        int index=0;        for (        Vertex word : newWords) {          result.addRelationship(Primitive.WORD,word,index);          index++;        }        if (!formulaRequired) {          Language language=network.getBot().mind().getThought(Language.class);          result=language.createSentenceText(result,network);          if (pattern) {            result=network.createSentence(Utils.reduce(result.printString()));          }        }      }    }  } catch (  SelfExecutionException exception) {    throw exception;  }catch (  Exception exception) {    throw new SelfExecutionException(expression,exception);  }  return result;}  }
class C{  public static String formatSpelledOutAmount(double amount,Locale locale){  com.ibm.icu.text.NumberFormat nf=new com.ibm.icu.text.RuleBasedNumberFormat(locale,com.ibm.icu.text.RuleBasedNumberFormat.SPELLOUT);  return nf.format(amount);}  }
class C{  private void verifyChecksum(Throwable priorException,ByteSequencesReader reader) throws IOException {  try (ChecksumIndexInput in=dir.openChecksumInput(reader.name,IOContext.READONCE)){    CodecUtil.checkFooter(in,priorException);  } }  }
class C{  private boolean isNextEdgeAddAllowed(){  return nextEdgeAddAllowed;}  }
class C{  public String replace(String name){  Object value=context.getAttribute(name);  if (value != null) {    return value.toString();  }  return filter.replace(name);}  }
class C{  public void cancel(NotificationEntry entry){  if (mEnabled)   CENTER.cancel(entry);}  }
class C{  public ManageSieveException(String message,Throwable cause){  super(message,cause);}  }
class C{  public ForEachITCase(String name){  super(name);  addExclusion(HtmlUnitFacesITCase.Container.TOMCAT6,"testForEachIssue714");  addExclusion(HtmlUnitFacesITCase.Container.TOMCAT7,"testForEachIssue714");  addExclusion(HtmlUnitFacesITCase.Container.WLS_10_3_4_NO_CLUSTER,"testForEachIssue714");}  }
class C{  public DecoderFile fileFromTitle(String title){  for (int i=numDecoders() - 1; i >= 0; i--) {    DecoderFile r=decoderList.get(i);    if (r.titleString().equals(title)) {      return r;    }  }  return null;}  }
class C{  public synchronized void addXTextLabel(double x,String text){  mXTextLabels.put(x,text);}  }
class C{  private void handleTruncatedInfo(final StatementInfo info) throws SQLException {  final byte[] originalInfo=statement.getStatementInfoRequestItems();  final byte[] newInfoItems=new byte[originalInfo.length + 2 * 4];  int newIndex=0;  for (  final byte infoItem : originalInfo) {    assert newIndex < newInfoItems.length : "newInfoItems size too short";switch (infoItem) {case ISCConstants.isc_info_sql_select:case ISCConstants.isc_info_sql_bind:      final RowDescriptorBuilder currentBuilder=infoItem == ISCConstants.isc_info_sql_select ? info.fieldBuilder : info.parameterBuilder;    final int descriptorIndex=currentBuilder != null ? currentBuilder.getFirstUnprocessedIndex() + 1 : 1;  newInfoItems[newIndex++]=ISCConstants.isc_info_sql_sqlda_start;newInfoItems[newIndex++]=2;newInfoItems[newIndex++]=(byte)(descriptorIndex & 0xFF);newInfoItems[newIndex++]=(byte)(descriptorIndex >> 8);newInfoItems[newIndex++]=infoItem;break;default :newInfoItems[newIndex++]=infoItem;break;}}assert newIndex == newInfoItems.length : "newInfoItems size too long";info.requestBufferSize=Math.min(2 * info.requestBufferSize,statement.getMaxSqlInfoSize());info.buffer=statement.getSqlInfo(newInfoItems,info.requestBufferSize);info.currentIndex=0;}  }
class C{  public LabelEditingGraphMousePlugin(int selectionModifiers){  super(selectionModifiers);  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);}  }
class C{  public boolean supportsUnion() throws SQLException {  return true;}  }
class C{  public synchronized void incrementSynchronizedMethod(){  this.total++;}  }
class C{  private ShowQueryBuilder parseShow(){  return parseShow(new ShowQueryBuilder(_tableManager,_sql));}  }
class C{  void close(){  service.traceDebug(TAG,"close()");  try {    if (myClient != null) {      myClient.close();    }  } catch (  MqttException e) {    handleException(new Bundle(),e);  }}  }
class C{  public DefaultEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void run(){  for (  File file : deleteFiles) {    if (file.delete())     logger.info("File deleted: " + file.getAbsolutePath()); else     logger.warn("Unable to delete file: " + file.getAbsolutePath());  }}  }
class C{  public void startAction(MotionEvent me){  OnChartGestureListener l=mChart.getOnChartGestureListener();  if (l != null)   l.onChartGestureStart(me,mLastGesture);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    return sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.225 -0500",hash_original_method="BD4623110C086A165B3AF83FA1BCBA34",hash_generated_method="1BD1699667D9B50F813761DAFD73391A") public void hangup() throws CallStateException {  owner.hangup(this);}  }
class C{  public static InputStream makeCompressingInputStream(InputStream in){  try {    return (InputStream)(Class.forName("com.jcraft.jzlib.ZInputStream").getConstructor(new Class[]{InputStream.class}).newInstance(new Object[]{in}));  } catch (  Exception e) {    return null;  }}  }
class C{  public void put(VersionTag tag,T entry){  VersionSource member=tag.getMemberID();  TreeMap<VersionTag,T> memberMap=tombstoneMap.get(member);  if (memberMap == null) {    memberMap=new TreeMap<VersionTag,T>(new VersionTagComparator());    tombstoneMap.put(member,memberMap);  }  T oldValue=memberMap.put(tag,entry);  Assert.assertTrue(oldValue == null);}  }
class C{  public void testManufacturerPreferenceAvailable(){}  }
class C{  public Neuron(final Network parent,final String updateRule){  this.parent=parent;  setUpdateRule(updateRule);}  }
class C{  private boolean equalsOrNull(Object o1,Object o2){  if (o1 == null) {    return o2 == null;  }  if (o2 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  public void removeLayoutCallback(LayoutCallback callback){  if (callbackList != null)   callbackList.remove(callback);}  }
class C{  protected AutoTransitionBlock_Impl(){  super();}  }
class C{  public UpdateBuilder bindUri(String from,String to){  bind(from,'<' + to + '>');  return this;}  }
class C{  public DotGraphNode drawNode(String name){  DotGraphNode node=getNode(name);  if (node == null)   throw new RuntimeException("Assertion failed.");  if (!this.drawElements.contains(node))   this.drawElements.add(node);  return node;}  }
class C{  private final int min(int a,int b){  return (a < b ? a : b);}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents){  return new Builder<E>(Ordering.<E>natural()).create(initialContents);}  }
class C{  SpeedPredictor(SpeedPredictor old){  times=old.times;  prediction=old.prediction;  jitter=old.jitter;}  }
class C{  public Operand evaluate(Context ctx){  RTLExpression var=ExpressionFactory.createOperand(this);  RTLExpression eval=var.evaluate(ctx);  if (var.equals(eval))   return this; else {    Operand res=OperandFactory.createOperand(eval);    if (res == null)     return this; else     return res;  }}  }
class C{  private void checkReportIntervalValue(final int requestInterval){  final long currentTimestamp=System.currentTimeMillis();  if (mTimestamp > 0) {    final long diff=currentTimestamp - mTimestamp;    if (diff < (requestInterval - TestCommon.OFFSET_REPORT_INTERVAL) || diff > (requestInterval + TestCommon.OFFSET_REPORT_INTERVAL)) {      mWaiter.fail("expected " + requestInterval + " | current val : "+ (currentTimestamp - mTimestamp));    }  }  mTimestamp=currentTimestamp;}  }
class C{  public static <S,E>void insertAfterStep(final Step<S,E> insertStep,final Step<?,S> beforeStep,final Traversal.Admin<?,?> traversal){  traversal.addStep(stepIndex(beforeStep,traversal) + 1,insertStep);}  }
class C{  private void addLine(int AD_Column_ID,Timestamp Updated,int UpdatedBy,String OldValue,String NewValue){  Vector<String> line=new Vector<String>();  MColumn column=MColumn.get(Env.getCtx(),AD_Column_ID);  line.add(Msg.translate(Env.getCtx(),column.getColumnName()));  if (OldValue != null && OldValue.equals(MChangeLog.NULL))   OldValue=null;  String showOldValue=OldValue;  if (NewValue != null && NewValue.equals(MChangeLog.NULL))   NewValue=null;  String showNewValue=NewValue;  try {    if (DisplayType.isText(column.getAD_Reference_ID()))     ; else     if (column.getAD_Reference_ID() == DisplayType.YesNo) {      if (OldValue != null) {        boolean yes=OldValue.equals("true") || OldValue.equals("Y");        showOldValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }      if (NewValue != null) {        boolean yes=NewValue.equals("true") || NewValue.equals("Y");        showNewValue=Msg.getMsg(Env.getCtx(),yes ? "Y" : "N");      }    } else     if (column.getAD_Reference_ID() == DisplayType.Amount) {      if (OldValue != null)       showOldValue=m_amtFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_amtFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Integer) {      if (OldValue != null)       showOldValue=m_intFormat.format(new Integer(OldValue));      if (NewValue != null)       showNewValue=m_intFormat.format(new Integer(NewValue));    } else     if (DisplayType.isNumeric(column.getAD_Reference_ID())) {      if (OldValue != null)       showOldValue=m_numberFormat.format(new BigDecimal(OldValue));      if (NewValue != null)       showNewValue=m_numberFormat.format(new BigDecimal(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.Date) {      if (OldValue != null)       showOldValue=m_dateFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateFormat.format(Timestamp.valueOf(NewValue));    } else     if (column.getAD_Reference_ID() == DisplayType.DateTime) {      if (OldValue != null)       showOldValue=m_dateTimeFormat.format(Timestamp.valueOf(OldValue));      if (NewValue != null)       showNewValue=m_dateTimeFormat.format(Timestamp.valueOf(NewValue));    } else     if (DisplayType.isLookup(column.getAD_Reference_ID())) {      MLookup lookup=MLookupFactory.get(Env.getCtx(),0,AD_Column_ID,column.getAD_Reference_ID(),Env.getLanguage(Env.getCtx()),column.getColumnName(),column.getAD_Reference_Value_ID(),column.isParent(),null);      if (OldValue != null) {        Object key=OldValue;        NamePair pp=lookup.get(key);        if (pp != null)         showOldValue=pp.getName();      }      if (NewValue != null) {        Object key=NewValue;        NamePair pp=lookup.get(key);        if (pp != null)         showNewValue=pp.getName();      }    } else     if (DisplayType.isLOB(column.getAD_Reference_ID()))     ;  } catch (  Exception e) {    log.log(Level.WARNING,OldValue + "->" + NewValue,e);  }  line.add(showNewValue);  line.add(showOldValue);  MUser user=MUser.get(Env.getCtx(),UpdatedBy);  line.add(user.getName());  line.add(m_dateFormat.format(Updated));  line.add(column.getColumnName());  m_data.add(line);}  }
class C{  public void addExtremeGravityPSR(PilotingRollData psr){  extremeGravityRolls.addElement(psr);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMScriptElement(prefix,(AbstractDocument)doc);}  }
class C{  protected boolean assertChildIndex(final int index){  if (index < 0 || index > nkeys + 1)   throw new IndexOutOfBoundsException("index=" + index + ", nkeys="+ nkeys);  return true;}  }
class C{  public PAccessNetworkInfoHeader createPAccessNetworkInfoHeader(){  PAccessNetworkInfo accessNetworkInfo=new PAccessNetworkInfo();  return accessNetworkInfo;}  }
class C{  @org.junit.Test public void testPickup(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("say something");  String response=waitForOutput(output);  if (response.equals("say something")) {    fail("Incorrect response: " + response);  }  text.input("say something else");  response=waitForOutput(output);  if (response.equals("say something else")) {    fail("Incorrect response: " + response);  }  text.input("say something else");  response=waitForOutput(output);  if (response.equals("say something else")) {    fail("Incorrect response: " + response);  }  text.input("say something else");  response=waitForOutput(output);  if (response.equals("say something else")) {    fail("Incorrect response: " + response);  }  text.input("say something else");  response=waitForOutput(output);  if (response.equals("say something else")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  private void newFileAndSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {  Collection<GraphEdgeMatcherDescriptor> collection=Lists.newArrayList();  persistUpdatedBundle(persist,file,collection,setName);}  }
class C{  private Map<String,Integer> transform(Event event){  final Map<String,Integer> map=new HashMap<>();  String eventStr=new String(event.getBody());  if (!eventStr.isEmpty()) {    String[] tokens=eventStr.split(":");    map.put(tokens[0].trim(),Integer.valueOf(tokens[1].trim()));  }  return map;}  }
class C{  public String termtermvectorsfile(){  return termtermvectorsfile;}  }
class C{  public void addField(String fieldName,String type,short flags,int value){  short fieldNameIndex=itsConstantPool.addUtf8(fieldName);  short typeIndex=itsConstantPool.addUtf8(type);  ClassFileField field=new ClassFileField(fieldNameIndex,typeIndex,flags);  field.setAttributes(itsConstantPool.addUtf8("ConstantValue"),(short)0,(short)0,itsConstantPool.addConstant(value));  itsFields.add(field);}  }
class C{  private InferenceResult combineSupertypeAndAssignmentResults(Set<TypeVariable> targets,AnnotatedTypeFactory typeFactory,InferenceResult equalityResult,InferenceResult supertypeResult){  final TypeHierarchy typeHierarchy=typeFactory.getTypeHierarchy();  final InferenceResult result=new InferenceResult();  for (  final TypeVariable target : targets) {    final InferredValue equalityInferred=equalityResult.get(target);    final InferredValue supertypeInferred=supertypeResult.get(target);    final InferredValue outputValue;    if (equalityInferred != null && equalityInferred instanceof InferredType) {      if (supertypeInferred != null && supertypeInferred instanceof InferredType) {        AnnotatedTypeMirror superATM=((InferredType)supertypeInferred).type;        AnnotatedTypeMirror equalityATM=((InferredType)equalityInferred).type;        if (TypesUtils.isErasedSubtype(typeFactory.getContext().getTypeUtils(),equalityATM.getUnderlyingType(),superATM.getUnderlyingType())) {          equalityATM=AnnotatedTypes.asSuper(typeFactory,equalityATM,superATM);        }        if (typeHierarchy.isSubtype(superATM,equalityATM)) {          outputValue=equalityInferred;        } else {          outputValue=supertypeInferred;        }      } else {        outputValue=equalityInferred;      }    } else {      if (supertypeInferred != null) {        outputValue=supertypeInferred;      } else {        outputValue=null;      }    }    if (outputValue != null) {      result.put(target,outputValue);    }  }  return result;}  }
class C{  public ArrayStoreException(){}  }
class C{  public RequestCreator rotate(float degrees){  data.rotate(degrees);  return this;}  }
class C{  private dr.evolution.util.Date[] readCalibrationBlock(TaxonList taxonList) throws ImportException, IOException {  double origin=0.0;  boolean isBackwards=false;  Units.Type units=Units.Type.YEARS;  ArrayList<Date> dates=new ArrayList<Date>();  String token;  boolean done=false;  do {    token=readToken(";");    if (token.equalsIgnoreCase("OPTIONS")) {      do {        String token2=readToken("=;");        if (getLastDelimiter() != '=') {          throw new BadFormatException("Unknown subcommand, '" + token2 + "', or missing '=' in OPTIONS command of CALIBRATION block");        }        if (token2.equalsIgnoreCase("SCALE")) {          String token3=readToken(";");          if (token3.equalsIgnoreCase("DAYS")) {            units=Units.Type.DAYS;          } else           if (token3.equalsIgnoreCase("MONTHS")) {            units=Units.Type.MONTHS;          } else           if (token3.equalsIgnoreCase("YEARS")) {            units=Units.Type.YEARS;          } else {            throw new BadFormatException("SCALE in OPTIONS command of CALIBRATION block must be one of DAYS, MONTHS or YEARS");          }        } else         if (token2.equalsIgnoreCase("ORIGIN")) {          origin=readDouble(";");        } else         if (token2.equalsIgnoreCase("DIRECTION")) {          String token3=readToken(";");          if (token3.equalsIgnoreCase("FORWARDS")) {            isBackwards=false;          } else           if (token3.equalsIgnoreCase("BACKWARDS")) {            isBackwards=true;          } else {            throw new BadFormatException("DIRECTION in OPTIONS command of CALIBRATION block must be either FORWARDS or BACKWARDS");          }        } else {          throw new BadFormatException("Unknown subcommand, '" + token2 + "', in OPTIONS command of CALIBRATION block");        }      } while (getLastDelimiter() != ';');    } else     if (token.equalsIgnoreCase("TIPCALIBRATION")) {      do {        String token2=readToken("=;");        if (getLastDelimiter() != '=') {          throw new BadFormatException("Missing date for label '" + token2 + "' or missing '=' in TIPCALIBRATION command of CALIBRATION block");        }        double value=readDouble(":;");        if (getLastDelimiter() != ':') {          throw new BadFormatException("Missing taxon list for label '" + token2 + "' or missing ':' in TIPCALIBRATION command of CALIBRATION block");        }        dr.evolution.util.Date date;        if (isBackwards) {          date=dr.evolution.util.Date.createTimeAgoFromOrigin(value,units,origin);        } else {          date=dr.evolution.util.Date.createTimeSinceOrigin(value,units,origin);        }        dates.add(date);        do {          String token3=readToken(",;");          Taxon taxon;          int index=taxonList.getTaxonIndex(token3);          if (index == -1) {            throw new UnknownTaxonException("Unknown taxon '" + token3 + "' for label '"+ token2+ "' in TIPCALIBRATION command of CALIBRATION block");          } else {            taxon=taxonList.getTaxon(index);          }          taxon.setAttribute("date",date);        } while (getLastDelimiter() != ',' && getLastDelimiter() != ';');      } while (getLastDelimiter() == ',');    } else     if (token.equalsIgnoreCase("NODECALIBRATION")) {      throw new BadFormatException("NODECALIBRATION not suppored in CALIBRATION block");    } else     if (token.equalsIgnoreCase("ENDBLOCK") || token.equalsIgnoreCase("END")) {      done=true;    } else {      throw new BadFormatException("Unknown command '" + token + "' in CALIBRATION block");    }  } while (!done);  dr.evolution.util.Date[] dateArray=new dr.evolution.util.Date[dates.size()];  dates.toArray(dateArray);  nextBlock=UNKNOWN_BLOCK;  return dateArray;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.MAPPING_MODEL__NAME:    setName((String)newValue);  return;case MappingPackage.MAPPING_MODEL__NAMESPACE:setNamespace((String)newValue);return;case MappingPackage.MAPPING_MODEL__VERSION:setVersion((String)newValue);return;case MappingPackage.MAPPING_MODEL__REFERENCES:getReferences().clear();getReferences().addAll((Collection<? extends ModelReference>)newValue);return;case MappingPackage.MAPPING_MODEL__DESCRIPTION:setDescription((String)newValue);return;case MappingPackage.MAPPING_MODEL__DISPLAYNAME:setDisplayname((String)newValue);return;case MappingPackage.MAPPING_MODEL__CATEGORY:setCategory((String)newValue);return;case MappingPackage.MAPPING_MODEL__RULES:getRules().clear();getRules().addAll((Collection<? extends MappingRule>)newValue);return;case MappingPackage.MAPPING_MODEL__TARGET_PLATFORM:setTargetPlatform((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mPreview != null) {    mPreview.stop();  }}  }
class C{  public static void processGotoLabelDeclarations(PsiElement element,Processor<PerlLabelDeclaration> processor){  if (element == null) {    return;  }  PsiElement run=element.getFirstChild();  while (run != null) {    if (run instanceof PerlLabelDeclaration) {      if (!processor.process((PerlLabelDeclaration)run)) {        return;      }    }    run=run.getNextSibling();  }  if (!(element instanceof PsiFile)) {    processGotoLabelDeclarations(element.getParent(),processor);  }}  }
class C{  public Parser(Context cx,InputBuffer inputBuffer,String origin,boolean emit_doc_info){  init(cx,origin,emit_doc_info,false,null);  scanner=new Scanner(cx,inputBuffer);}  }
class C{  public Role findRole(String roleName){  return roles.get(roleName);}  }
class C{  @Override public OfferViewHolder newViewHolder(ViewGroup viewGroup){  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.telco_card_layout_view,viewGroup,false);  return new OfferViewHolder(view);}  }
class C{  private void checkOpen(){  if (!opened) {    throw new IllegalStateException("The store is closed");  }}  }
class C{  InitSecContextToken(Krb5Context context,Credentials tgt,Credentials serviceTicket) throws KrbException, IOException, GSSException {  boolean mutualRequired=context.getMutualAuthState();  boolean useSubkey=true;  boolean useSequenceNumber=true;  OverloadedChecksum gssChecksum=new OverloadedChecksum(context,tgt,serviceTicket);  Checksum checksum=gssChecksum.getChecksum();  context.setTktFlags(serviceTicket.getFlags());  context.setAuthTime(new KerberosTime(serviceTicket.getAuthTime()).toString());  apReq=new KrbApReq(serviceTicket,mutualRequired,useSubkey,useSequenceNumber,checksum);  context.resetMySequenceNumber(apReq.getSeqNumber().intValue());  EncryptionKey subKey=apReq.getSubKey();  if (subKey != null)   context.setKey(Krb5Context.INITIATOR_SUBKEY,subKey); else   context.setKey(Krb5Context.SESSION_KEY,serviceTicket.getSessionKey());  if (!mutualRequired)   context.resetPeerSequenceNumber(0);}  }
class C{  private boolean IsNewerLibVersion(String libVersion){  if (isNewerLibVersion == null) {    isNewerLibVersion=new Boolean(VersionInfo.IsNewerLibVersion(libVersion,false));  }  return isNewerLibVersion.booleanValue();}  }
class C{  @ExceptionHandler(DataTypeNotSupportedException.class) @ResponseBody @ResponseStatus(HttpStatus.NOT_ACCEPTABLE) public String handleException(final DataTypeNotSupportedException tns){  return convertErrorAsJson(tns.getMessage());}  }
class C{  public ToastBuilder gravityOffsetY(int gravityOffsetY){  this.gravityOffsetY=gravityOffsetY;  return this;}  }
class C{  public final int length(){  return this.length;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void generateEntityConfig(ManagedEntityConfig config) throws SAXException {  String host=config.getHost();  if (host != null) {    handler.startElement("",HOST,HOST,EMPTY);    handler.characters(host.toCharArray(),0,host.length());    handler.endElement("",HOST,HOST);  }  String remoteCommand=config.getRemoteCommand();  if (remoteCommand != null) {    handler.startElement("",REMOTE_COMMAND,REMOTE_COMMAND,EMPTY);    handler.characters(remoteCommand.toCharArray(),0,remoteCommand.length());    handler.endElement("",REMOTE_COMMAND,REMOTE_COMMAND);  }  String workingDirectory=config.getWorkingDirectory();  if (workingDirectory != null) {    handler.startElement("",WORKING_DIRECTORY,WORKING_DIRECTORY,EMPTY);    handler.characters(workingDirectory.toCharArray(),0,workingDirectory.length());    handler.endElement("",WORKING_DIRECTORY,WORKING_DIRECTORY);  }  String productDirectory=config.getProductDirectory();  if (productDirectory != null) {    handler.startElement("",PRODUCT_DIRECTORY,PRODUCT_DIRECTORY,EMPTY);    handler.characters(productDirectory.toCharArray(),0,productDirectory.length());    handler.endElement("",PRODUCT_DIRECTORY,PRODUCT_DIRECTORY);  }}  }
class C{  void xmppRequestStateChange(int newState){  int currentState=getConnectionStatus();  Log.i("xmppRequestStateChange " + statusAsString(currentState) + " => "+ statusAsString(newState));switch (newState) {case XmppManager.CONNECTED:    if (!isXmppConnected()) {      cleanupConnection();      start(XmppManager.CONNECTED);    }  break;case XmppManager.DISCONNECTED:stop();break;case XmppManager.WAITING_TO_CONNECT:cleanupConnection();start(XmppManager.WAITING_TO_CONNECT);break;case XmppManager.WAITING_FOR_NETWORK:cleanupConnection();start(XmppManager.WAITING_FOR_NETWORK);break;default :Log.w("xmppRequestStateChange() invalid state to switch to: " + statusAsString(newState));}}  }
class C{  public DeleteMonitoredItemsRequest clone(){  DeleteMonitoredItemsRequest result=new DeleteMonitoredItemsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.MonitoredItemIds=MonitoredItemIds == null ? null : MonitoredItemIds.clone();  return result;}  }
class C{  public static RegexpElement closure(RegexpElement e1){  if (e1 instanceof NullElement || e1 instanceof EmptyElement) {    return EmptyElement.INSTANCE;  } else {    return new ClosureElement(e1);  }}  }
class C{  private static GraphRequest newStatusUpdateRequest(AccessToken accessToken,String message,String placeId,List<String> tagIds,Callback callback){  Bundle parameters=new Bundle();  parameters.putString("message",message);  if (placeId != null) {    parameters.putString("place",placeId);  }  if (tagIds != null && tagIds.size() > 0) {    String tags=TextUtils.join(",",tagIds);    parameters.putString("tags",tags);  }  return new GraphRequest(accessToken,MY_FEED,parameters,HttpMethod.POST,callback);}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,char[] match){  int length=offset + match.length;  char[] textArray=text.array;  if (length > text.offset + text.count) {    return false;  }  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match[j];    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2) {      return false;    }  }  return true;}  }
class C{  @LargeTest public void testDownloadToExternal_fileExists() throws Exception {  File existentFile=createFileOnSD(null,1,DataType.TEXT,null);  byte[] blobData=generateData(DEFAULT_FILE_SIZE,DataType.TEXT);  enqueueResponse(buildResponse(HTTP_OK,blobData));  try {    Uri uri=getServerUri(DEFAULT_FILENAME);    Request request=new Request(uri);    Uri localUri=Uri.fromFile(existentFile);    request.setDestinationUri(localUri);    long dlRequest=mDownloadManager.enqueue(request);    waitForDownloadOrTimeout(dlRequest);    Cursor cursor=getCursor(dlRequest);    try {      verifyInt(cursor,DownloadManager.COLUMN_STATUS,DownloadManager.STATUS_SUCCESSFUL);    }  finally {      cursor.close();    }  }  finally {    existentFile.delete();  }}  }
class C{  public EnumState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState,StateMachine<S,E> submachine){  super(id,deferred,entryActions,exitActions,pseudoState,submachine);}  }
class C{  public void replaceSetterByInheretedSetter_caseIncompletAPI(TSetter inhSetter){  if (this.setter == null) {    throw new IllegalStateException();  }  if (this.inheritedSetter != null) {    throw new IllegalStateException();  }  if (inhSetter == null) {    throw new IllegalStateException();  }  this.setter=null;  this.inheritedSetter=inhSetter;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.123 -0500",hash_original_method="F2F9C5A5D8870A09D65982DFE8B619AA",hash_generated_method="5E3094D0ACFCB5350E53B25A2B650DD8") public long addressOf(Object array){  addTaint(array.getTaint());  return getTaintLong();}  }
class C{  private static URL[] pathToURLs(String path) throws MalformedURLException {synchronized (pathToURLsCache) {    Object[] v=pathToURLsCache.get(path);    if (v != null) {      return ((URL[])v[0]);    }  }  StringTokenizer st=new StringTokenizer(path);  URL[] urls=new URL[st.countTokens()];  for (int i=0; st.hasMoreTokens(); i++) {    urls[i]=new URL(st.nextToken());  }synchronized (pathToURLsCache) {    pathToURLsCache.put(path,new Object[]{urls,new SoftReference<String>(path)});  }  return urls;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected AxisState drawAxis(ValueAxis axis,PolarAxisLocation location,Graphics2D g2,Rectangle2D plotArea){  double centerX=plotArea.getCenterX();  double centerY=plotArea.getCenterY();  double r=Math.min(plotArea.getWidth() / 2.0,plotArea.getHeight() / 2.0) - this.margin;  double x=centerX - r;  double y=centerY - r;  Rectangle2D dataArea=null;  AxisState result=null;  if (location == PolarAxisLocation.NORTH_RIGHT) {    dataArea=new Rectangle2D.Double(x,y,r,r);    result=axis.draw(g2,centerX,plotArea,dataArea,RectangleEdge.RIGHT,null);  } else   if (location == PolarAxisLocation.NORTH_LEFT) {    dataArea=new Rectangle2D.Double(centerX,y,r,r);    result=axis.draw(g2,centerX,plotArea,dataArea,RectangleEdge.LEFT,null);  } else   if (location == PolarAxisLocation.SOUTH_LEFT) {    dataArea=new Rectangle2D.Double(centerX,centerY,r,r);    result=axis.draw(g2,centerX,plotArea,dataArea,RectangleEdge.LEFT,null);  } else   if (location == PolarAxisLocation.SOUTH_RIGHT) {    dataArea=new Rectangle2D.Double(x,centerY,r,r);    result=axis.draw(g2,centerX,plotArea,dataArea,RectangleEdge.RIGHT,null);  } else   if (location == PolarAxisLocation.EAST_ABOVE) {    dataArea=new Rectangle2D.Double(centerX,centerY,r,r);    result=axis.draw(g2,centerY,plotArea,dataArea,RectangleEdge.TOP,null);  } else   if (location == PolarAxisLocation.EAST_BELOW) {    dataArea=new Rectangle2D.Double(centerX,y,r,r);    result=axis.draw(g2,centerY,plotArea,dataArea,RectangleEdge.BOTTOM,null);  } else   if (location == PolarAxisLocation.WEST_ABOVE) {    dataArea=new Rectangle2D.Double(x,centerY,r,r);    result=axis.draw(g2,centerY,plotArea,dataArea,RectangleEdge.TOP,null);  } else   if (location == PolarAxisLocation.WEST_BELOW) {    dataArea=new Rectangle2D.Double(x,y,r,r);    result=axis.draw(g2,centerY,plotArea,dataArea,RectangleEdge.BOTTOM,null);  }  return result;}  }
class C{  public static <E>WorkQueueProcessor<E> create(String name){  return create(name,QueueSupplier.SMALL_BUFFER_SIZE);}  }
class C{  public CUDA_ARRAY3D_DESCRIPTOR(){}  }
class C{  public ArrayMap(ArrayMap<K,V> map){  this();  if (map != null) {    putAll(map);  }}  }
class C{  private void readXmlDeclaration() throws IOException, XmlPullParserException {  if (bufferStartLine != 0 || bufferStartColumn != 0 || position != 0) {    checkRelaxed("processing instructions must not start with xml");  }  read(START_PROCESSING_INSTRUCTION);  parseStartTag(true,true);  if (attributeCount < 1 || !"version".equals(attributes[2])) {    checkRelaxed("version expected");  }  version=attributes[3];  int pos=1;  if (pos < attributeCount && "encoding".equals(attributes[2 + 4])) {    encoding=attributes[3 + 4];    pos++;  }  if (pos < attributeCount && "standalone".equals(attributes[4 * pos + 2])) {    String st=attributes[3 + 4 * pos];    if ("yes".equals(st)) {      standalone=Boolean.TRUE;    } else     if ("no".equals(st)) {      standalone=Boolean.FALSE;    } else {      checkRelaxed("illegal standalone value: " + st);    }    pos++;  }  if (pos != attributeCount) {    checkRelaxed("unexpected attributes in XML declaration");  }  isWhitespace=true;  text=null;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length){  try {    OutputStream os=_os;    if (os != null) {      os.write(buffer,offset,length);    }  } catch (  Exception e) {    log.log(Level.FINER,e.toString(),e);  }}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  static private <T>void fillList(final int listsToAdd,Stack<List<T>> reusableLists,List<List<T>> aSplit){  for (int j=0; j < listsToAdd; j++)   if (reusableLists.isEmpty())   aSplit.add(new ArrayList<T>()); else   aSplit.add(reusableLists.pop());}  }
class C{  public PEPEvent(){  super();}  }
class C{  public boolean onActivityResult(int requestCode,int resultCode,Intent intent){  CordovaPlugin callback=activityResultCallback;  if (callback == null && initCallbackService != null) {    savedResult=new ActivityResultHolder(requestCode,resultCode,intent);    if (pluginManager != null) {      callback=pluginManager.getPlugin(initCallbackService);    }  }  activityResultCallback=null;  if (callback != null) {    Log.d(TAG,"Sending activity result to plugin");    initCallbackService=null;    savedResult=null;    callback.onActivityResult(requestCode,resultCode,intent);    return true;  }  Log.w(TAG,"Got an activity result, but no plugin was registered to receive it" + (savedResult != null ? " yet!" : "."));  return false;}  }
class C{  public boolean isSetGetResponse(){  return this.getResponse != null;}  }
class C{  public synchronized boolean incrementPayment(BigInteger refundSize,byte[] signatureBytes) throws VerificationException, ValueOutOfRangeException, InsufficientMoneyException {  checkState(state == State.READY);  checkNotNull(refundSize);  checkNotNull(signatureBytes);  TransactionSignature signature=TransactionSignature.decodeFromBitcoin(signatureBytes,true);  final boolean fullyUsedUp=refundSize.equals(BigInteger.ZERO);  if (refundSize.compareTo(clientOutput.getMinNonDustValue()) < 0 && !fullyUsedUp)   throw new ValueOutOfRangeException("Attempt to refund negative value or value too small to be accepted by the network");  BigInteger newValueToMe=totalValue.subtract(refundSize);  if (newValueToMe.compareTo(BigInteger.ZERO) < 0)   throw new ValueOutOfRangeException("Attempt to refund more than the contract allows.");  if (newValueToMe.compareTo(bestValueToMe) < 0)   throw new ValueOutOfRangeException("Attempt to roll back payment on the channel.");  Transaction walletContract=wallet.getTransaction(multisigContract.getHash());  checkNotNull(walletContract,"Wallet did not contain multisig contract {} after state was marked READY",multisigContract.getHash());  if (walletContract.getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.DEAD) {    close();    throw new VerificationException("Multisig contract was double-spent");  }  Transaction.SigHash mode;  if (fullyUsedUp)   mode=Transaction.SigHash.NONE; else   mode=Transaction.SigHash.SINGLE;  if (signature.sigHashMode() != mode || !signature.anyoneCanPay())   throw new VerificationException("New payment signature was not signed with the right SIGHASH flags.");  Wallet.SendRequest req=makeUnsignedChannelContract(newValueToMe);  Sha256Hash sighash=req.tx.hashForSignature(0,multisigScript,mode,true);  if (!clientKey.verify(sighash,signature))   throw new VerificationException("Signature does not verify on tx\n" + req.tx);  bestValueToMe=newValueToMe;  bestValueSignature=signatureBytes;  updateChannelInWallet();  return !fullyUsedUp;}  }
class C{  public void drawPolyline(int xPoints[],int yPoints[],int nPoints){  mGraphics.drawPolyline(xPoints,yPoints,nPoints);}  }
class C{  private HttpServletRequest invalidateSession(){  HttpServletRequest request=getRequest();  HttpSession session=request.getSession(false);  if (session != null) {    try {      String mId=getMarketplaceId();      session.removeAttribute(Constants.SESS_ATTR_USER);      getSessionService().deletePlatformSession(session.getId());      SessionListener.cleanup(session);      if (mId != null) {        HttpSession currentSession=request.getSession(true);        currentSession.setAttribute(Constants.REQ_PARAM_MARKETPLACE_ID,mId);      }    } catch (    SaaSSystemException e) {      if (!isMarketplaceSet(request)) {        throw e;      }    }  }  return request;}  }
class C{  public void lockTables() throws SQLException {}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  protected FileSystemConfiguration igfsConfiguration(@Nullable IgfsIpcEndpointType endPntType,@Nullable Integer endPntPort,@Nullable String endPntHost) throws IgniteCheckedException {  IgfsIpcEndpointConfiguration endPntCfg=null;  if (endPntType != null) {    endPntCfg=new IgfsIpcEndpointConfiguration();    endPntCfg.setType(endPntType);    if (endPntPort != null)     endPntCfg.setPort(endPntPort);    if (endPntHost != null)     endPntCfg.setHost(endPntHost);  }  FileSystemConfiguration igfsConfiguration=new FileSystemConfiguration();  igfsConfiguration.setDataCacheName("partitioned");  igfsConfiguration.setMetaCacheName("replicated");  igfsConfiguration.setName("igfs" + UUID.randomUUID());  igfsConfiguration.setManagementPort(mgmtPort.getAndIncrement());  if (endPntCfg != null)   igfsConfiguration.setIpcEndpointConfiguration(endPntCfg);  return igfsConfiguration;}  }
class C{  public FasStableConcurrent(Graph initialGraph,IndependenceTest test){  this.test=test;  this.initialGraph=initialGraph;}  }
class C{  public synchronized boolean hasRelationships(){  return this.relationships != null;}  }
class C{  public ScannerException(File file,ErrorMessages message,int line){  this(file,ErrorMessages.get(message),message,line,-1);}  }
class C{  @Override public void playSequential(Duration dismissDelay){  sq.getChildren().get(1).setDelay(dismissDelay);  sq.play();}  }
class C{  private boolean traversePreOrder(final Tree tree,final NodeRef node,final NodeRef parent){  boolean update=(parent == null) ? true : false;  final int nodeNum=node.getNumber();  if (parent != null && updateNode[nodeNum]) {    branchNodeOperations.add(new DataLikelihoodDelegate.BranchNodeOperation(nodeNum,parent.getNumber(),computeBranchLength(tree,node)));    update=true;  }  if (!tree.isExternal(node)) {    final NodeRef child1=tree.getChild(node,0);    final NodeRef child2=tree.getChild(node,1);    if (update) {      final boolean update1=traversePreOrder(tree,child1,node);      final boolean update2=traversePreOrder(tree,child2,node);    }  }  return update;}  }
class C{  private void updateViewFastScrollFocusState(BaseRecyclerViewFastScrollBar.FastScrollFocusableView v,int pos,boolean animated){  FastBitmapDrawable.State newState=FastBitmapDrawable.State.NORMAL;  if (mCurrentFastScrollSection != null && pos > -1) {    AlphabeticalAppsList.AdapterItem item=mApps.getAdapterItems().get(pos);    boolean highlight=item.sectionName.equals(mCurrentFastScrollSection) && item.position == mTargetFastScrollPosition;    newState=highlight ? FastBitmapDrawable.State.FAST_SCROLL_HIGHLIGHTED : FastBitmapDrawable.State.FAST_SCROLL_UNHIGHLIGHTED;  }  v.setFastScrollFocusState(newState,animated);}  }
class C{  public static <T>Stream<T> of(T... values){  return stream(values);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  public static float[] apply(double[] coefficients,float[] samples){  for (int x=0; x < coefficients.length; x++) {    samples[x]=(float)(samples[x] * coefficients[x]);  }  return samples;}  }
class C{  private void fetchTags(){  myExistingTags.clear();  GitSimpleHandler h=new GitSimpleHandler(myProject,getGitRoot(),GitCommand.TAG);  h.setSilent(true);  String output=GitHandlerUtil.doSynchronously(h,GitBundle.getString("tag.getting.existing.tags"),h.printableCommandLine());  for (StringScanner s=new StringScanner(output); s.hasMoreData(); ) {    String line=s.line();    if (line.length() == 0) {      continue;    }    myExistingTags.add(line);  }}  }
class C{  public static void divRow(Matrix A,int i,int start,int to,double c){  for (int j=start; j < to; j++)   A.set(i,j,A.get(i,j) / c);}  }
class C{  public void resetComponents(){  dsNamecomboBox.clear();  descTextArea.clear();  targetBulkTokenTags.getTokenField().clear();  targetBulkTokenTags.populateContainer();  progressBar.setValue(0F);  progressBar.setVisible(false);  managementUIState.getTargetTableFilters().getBulkUpload().setProgressBarCurrentValue(0F);  targetsCountLabel.setVisible(false);}  }
class C{  @Override protected void createSnapshot(List<DTNHost> hosts){  Map<String,Integer> counts=new HashMap<String,Integer>();  write("[" + (int)getSimTime() + "]");  ArrayList<String> keys;  for (  DTNHost host : hosts) {    for (    Message m : host.getMessageCollection()) {      Integer oldCount;      if (!isTracked(m)) {        continue;      }      oldCount=counts.get(m.getId());      counts.put(m.getId(),(oldCount == null ? 1 : oldCount + 1));    }  }  keys=new ArrayList<String>(counts.keySet());  Collections.sort(keys);  for (  String key : keys) {    write(key + " " + counts.get(key));  }}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.PARAMETER__OWNING_OPERATION:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwningOperation((Operation)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static int[] toPrimitive(Integer[] array,int valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_INT_ARRAY;  }  final int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    Integer b=array[i];    result[i]=(b == null ? valueForNull : b.intValue());  }  return result;}  }
class C{  private boolean isValidFeatureValue(String aFeatureValue){  return !(aFeatureValue == null || aFeatureValue.length() == 0 || aFeatureValue.equals(","));}  }
class C{  public Point2D pointAtLength(int index,float proportion){  if (!initialised) {    initialise();  }  if (index < 0 || index >= segmentIndexes.length) {    return null;  }  PathSegment seg=(PathSegment)segments.get(segmentIndexes[index]);  float start=seg.getLength();  float end;  if (index == segmentIndexes.length - 1) {    end=pathLength;  } else {    seg=(PathSegment)segments.get(segmentIndexes[index + 1]);    end=seg.getLength();  }  return pointAtLength(start + (end - start) * proportion);}  }
class C{  public MirroredRegion(Region region,Vector origin,Vector normal){  super(region.getBounds().mirror(origin,normal.normalize()));  this.region=region;  this.origin=origin;  this.normal=normal.normalize();}  }
class C{  public RefactoringStatus(){  fEntries=new ArrayList(0);}  }
class C{  public WrapLayout(){  super();}  }
class C{  public void runStopServerCommand(String... arguments){  runWebSphereCommand("stopServer",arguments);}  }
class C{  public static double chiSquaredProbability(double x,double v){  if (x < 0.0 || v < 1.0)   return 0.0;  return incompleteGammaComplement(v / 2.0,x / 2.0);}  }
class C{  static void createConfigFile(String xmlName,Resource configFile) throws IOException {  configFile.createFile(true);  createFileFromResource("/resource/config/" + xmlName + ".xml",configFile.getAbsoluteResource());}  }
class C{  public ZDT4(){  super(10);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.insertBefore(textNode,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yes",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  void onUp(){  if (mFlingRunnable.mRotator.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  @SuppressWarnings("unchecked") public <U>LazyFutureStream<U> from(final Iterator<U> iterator){  return fromStream(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator,Spliterator.ORDERED),false));}  }
class C{  public UncheckedExecutionException(@Nullable Throwable cause){  super(cause);}  }
class C{  static void pauseThread(long duration){  try {    Thread.sleep(duration);  } catch (  Exception e) {    _log.warn("Exception while trying to sleep",e);  }}  }
class C{  private static Object remove(Object array,int index){  int length=getLength(array);  if (index < 0 || index >= length) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  Object result=Array.newInstance(array.getClass().getComponentType(),length - 1);  System.arraycopy(array,0,result,0,index);  if (index < length - 1) {    System.arraycopy(array,index + 1,result,index,length - index - 1);  }  return result;}  }
class C{  public boolean hasOrgTitle(){  return super.hasElement(OrgTitle.KEY);}  }
class C{  public static GlowStructurePiece loadStructurePiece(CompoundTag compound){  if (!compound.isString("id")) {    throw new IllegalArgumentException("StructurePiece has no type");  }  StructurePieceStore<?> store=idTable.get(compound.getString("id"));  if (store == null) {    GlowServer.logger.severe(MessageFormat.format("Unknown structure piece type to load: \"{0}\"",compound.getString("id")));    return null;  }  return createStructurePiece(store,compound);}  }
class C{  public static float[] remove(float[] buffer,int offset,int length){  int len2=buffer.length - length;  float temp[]=new float[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public void mapRegisters(RegisterMapper mapper){  for (  SsaBasicBlock block : getBlocks()) {    for (    SsaInsn insn : block.getInsns()) {      insn.mapRegisters(mapper);    }  }  registerCount=mapper.getNewRegisterCount();  spareRegisterBase=registerCount;}  }
class C{  public String toString(){  if (m_Classifiers == null) {    return "Classification via Regression: No model built yet.";  }  StringBuffer text=new StringBuffer();  text.append("Classification via Regression\n\n");  for (int i=0; i < m_Classifiers.length; i++) {    text.append("Classifier for class with index " + i + ":\n\n");    text.append(m_Classifiers[i].toString() + "\n\n");  }  return text.toString();}  }
class C{  public synchronized final void evaluate(Collection<MetricExec> handles){  SortedMap<Long,List<MetricExec>> headMap=timeHandleMap.headMap(currentTime + 1);  List<Long> removeKeys=new LinkedList<Long>();  for (  Map.Entry<Long,List<MetricExec>> entry : headMap.entrySet()) {    Long key=entry.getKey();    List<MetricExec> value=entry.getValue();    removeKeys.add(key);    for (    MetricExec handle : value) {      handles.add(handle);    }  }  for (  Long key : removeKeys) {    timeHandleMap.remove(key);  }  if (!timeHandleMap.isEmpty()) {    nearestTime=timeHandleMap.firstKey();  } else {    nearestTime=null;  }}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public void registerResources(Context context){  if (context != null) {    this.myContext=context;    if (!registerReceiver) {      registerReceiver(this);    }  }}  }
class C{  void packInside(){  if (getTopLevelAncestor() != null) {    Dimension d=((javax.swing.JFrame)getTopLevelAncestor()).getSize();    ((javax.swing.JFrame)getTopLevelAncestor()).setMinimumSize(d);    ((javax.swing.JFrame)getTopLevelAncestor()).setPreferredSize(d);    ((javax.swing.JFrame)getTopLevelAncestor()).pack();  }}  }
class C{  public void removeSpan(Object what){  for (int i=mSpanCount - 1; i >= 0; i--) {    if (mSpans[i] == what) {      removeSpan(i);      return;    }  }}  }
class C{  public void createMainTextView(Context context,String text){  textView=new TextView(context);  ViewGroup.LayoutParams params=generateDefaultLayoutParams();  params.height=LayoutParams.WRAP_CONTENT;  params.width=LayoutParams.WRAP_CONTENT;  textView.setLayoutParams(params);  textView.setAllCaps(true);  textView.setText(text);  textView.setTextColor(ColorUtils.getContrastColor(color));  addView(textView,this.generateDefaultLayoutParams());}  }
class C{  @Nullable public static String capitalize(@Nullable final String string){  if (isBlank(string)) {    return string;  }  final char firstChar=string.charAt(0);  final char newChar=Character.toUpperCase(firstChar);  if (firstChar == newChar) {    return string;  }  int strLen=string.length();  char[] newChars=new char[strLen];  newChars[0]=newChar;  string.getChars(1,strLen,newChars,1);  return String.valueOf(newChars);}  }
class C{  protected void addFieldsForMappedKeyMapContainerPolicy(ManagedClass managedClass,Attribute managedAttribute,LinkedList<Entity> intrinsicEntity,LinkedList<Attribute> intrinsicAttribute,boolean isInherited,ContainerPolicy cp,TableDefinition table){  if (cp.isMappedKeyMapPolicy()) {    List<DatabaseField> keyFields=cp.getIdentityFieldsForMapKey();    Iterator<DatabaseField> i=keyFields.iterator();    while (i.hasNext()) {      DatabaseField foreignKey=i.next();      LinkedList<Attribute> intrinsicAttribute_Local=new LinkedList<>(intrinsicAttribute);      Attribute managedAttribute_Local=managedAttribute;      if (managedAttribute instanceof MapKeyHandler && ((MapKeyHandler)managedAttribute).getMapKeyEmbeddable() != null) {        managedAttribute_Local=getManagedAttribute(cp.getDescriptorForMapKey(),foreignKey,intrinsicAttribute_Local);      }      FieldDefinition fieldDef=getFieldDefFromDBField(intrinsicEntity.get(0),intrinsicAttribute_Local,managedAttribute_Local,false,false,false,isInherited,false,false,true,foreignKey);      if (!table.getFields().contains(fieldDef)) {        table.addField(fieldDef);      }    }    Map<DatabaseField,DatabaseField> foreignKeys=((MappedKeyMapContainerPolicy)cp).getForeignKeyFieldsForMapKey();    if (foreignKeys != null) {      addForeignMappingFkConstraint(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,isInherited,foreignKeys,false);    }  }}  }
class C{  public int subtract(final TimeInstant rhs){  return this.time - rhs.time;}  }
class C{  public static World readWorld(GlowServer server,CompoundTag compound){  World world=null;  if (compound.isLong("WorldUUIDLeast") && compound.isLong("WorldUUIDMost")) {    long uuidLeast=compound.getLong("WorldUUIDLeast");    long uuidMost=compound.getLong("WorldUUIDMost");    world=server.getWorld(new UUID(uuidMost,uuidLeast));  }  if (world == null && compound.isString("World")) {    world=server.getWorld(compound.getString("World"));  }  if (world == null && compound.isInt("Dimension")) {    int dim=compound.getInt("Dimension");    for (    World sWorld : server.getWorlds()) {      if (sWorld.getEnvironment().getId() == dim) {        world=sWorld;        break;      }    }  }  return world;}  }
class C{  public MultiMatchQueryBuilder(Object text,String... fields){  this.fields=new ArrayList<>();  this.fields.addAll(Arrays.asList(fields));  this.text=text;}  }
class C{  public T casePrimaryExpression(PrimaryExpression object){  return null;}  }
class C{  @Override public HandlerResult handleNotification(Notification notification,T attachment){  return HandlerResult.CONTINUE;}  }
class C{  public ClientMessage createMessage(String body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  addMessageProperties(message,properties);  return message;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_WHEN:case Constants.ELEMNAME_OTHERWISE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public void addAll(List maps){  this.myMaps.addAll(maps);  notifyItemRangeInserted(myMaps.size() - maps.size(),maps.size());}  }
class C{  public boolean isCheckUses(){  return checkUses;}  }
class C{  public LogDiscretizer(double base,double upperBound,double lowerBound){  this.base=base;  this.upperBound=upperBound;  this.lowerBound=lowerBound;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_BoolLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_BoolLiteral_value_feature","_UI_BoolLiteral_type"),SGenPackage.Literals.BOOL_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public void startTransmitThread(){  if (xmtThread == null) {    Thread xmtThread=new Thread(xmtHandler,"XPA transmit handler");    xmtThread.setPriority(Thread.MAX_PRIORITY - 1);    xmtThread.start();  }}  }
class C{  public StringSendPacket send(String str){  return send(str,null);}  }
class C{  public static void modifyRequestToAcceptGzipResponse(HttpRequest request){  request.addHeader("Accept-Encoding","gzip");}  }
class C{  private Border createNonRolloverToggleBorder(){  return createNonRolloverBorder();}  }
class C{  public boolean isLoaded(){  return naviView.isLoaded();}  }
class C{  private static int balancedHeight(TreeNode root){  if (root == null)   return 0;  int left=balancedHeight(root.left);  int right=balancedHeight(root.right);  if (left < 0 || right < 0 || Math.abs(left - right) > 1)   return -1;  return Math.max(left,right) + 1;}  }
class C{  public final void testGetEncoded03() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]),epki.getEncoded()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public GenerateCatalogDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();  setLocationRelativeTo(parent);  progressStep.setMaxVisible(500);  translateTexts();}  }
class C{  public boolean existsFactor(String factor){  return connectivity.keySet().contains(factor);}  }
class C{  void writeLine(String line) throws IOException {  for (int i=0; i < line.length(); i++) {    out.write(line.charAt(i));  }  out.write('\n');}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  public String fragment(){  StringBuilder str=new StringBuilder(FRAGMENT_PREAMBLE);  str.append(textureUniforms());  str.append(textureVaryings());  str.append("void main(void) {\n");  str.append(textureColor());  str.append(textureTint());  str.append(textureAlpha());  str.append("  gl_FragColor = textureColor;\n" + "}");  return str.toString();}  }
class C{  @SuppressWarnings("unchecked") protected Object doHighlightingByHighlighter(Document doc,int docId,SchemaField schemaField,Query query,IndexReader reader,SolrQueryRequest req) throws IOException {  final SolrParams params=req.getParams();  final String fieldName=schemaField.getName();  final int mvToExamine=params.getFieldInt(fieldName,HighlightParams.MAX_MULTIVALUED_TO_EXAMINE,(schemaField.multiValued()) ? Integer.MAX_VALUE : 1);  int mvToMatch=params.getFieldInt(fieldName,HighlightParams.MAX_MULTIVALUED_TO_MATCH,Integer.MAX_VALUE);  if (mvToExamine <= 0 || mvToMatch <= 0) {    return null;  }  int maxCharsToAnalyze=params.getFieldInt(fieldName,HighlightParams.MAX_CHARS,Highlighter.DEFAULT_MAX_CHARS_TO_ANALYZE);  if (maxCharsToAnalyze < 0) {    maxCharsToAnalyze=Integer.MAX_VALUE;  }  List<String> fieldValues=getFieldValues(doc,fieldName,mvToExamine,maxCharsToAnalyze,req);  if (fieldValues.isEmpty()) {    return null;  }  boolean preserveMulti=params.getFieldBool(fieldName,HighlightParams.PRESERVE_MULTI,false);  int numFragments=getMaxSnippets(fieldName,params);  boolean mergeContiguousFragments=isMergeContiguousFragments(fieldName,params);  List<TextFragment> frags=new ArrayList<>();  final Fields tvFields=schemaField.storeTermOffsets() ? reader.getTermVectors(docId) : null;  final TokenStream tvStream=TokenSources.getTermVectorTokenStreamOrNull(fieldName,tvFields,maxCharsToAnalyze - 1);  final OffsetWindowTokenFilter tvWindowStream;  if (tvStream != null && fieldValues.size() > 1) {    tvWindowStream=new OffsetWindowTokenFilter(tvStream);  } else {    tvWindowStream=null;  }  for (  String thisText : fieldValues) {    if (mvToMatch <= 0 || maxCharsToAnalyze <= 0) {      break;    }    TokenStream tstream;    if (tvWindowStream != null) {      tstream=tvWindowStream.advanceToNextWindowOfLength(thisText.length());    } else     if (tvStream != null) {      tstream=tvStream;    } else {      tstream=createAnalyzerTStream(schemaField,thisText);    }    Highlighter highlighter;    if (params.getFieldBool(fieldName,HighlightParams.USE_PHRASE_HIGHLIGHTER,true)) {      final TokenStream tempTokenStream;      if (tstream != tvStream) {        if (maxCharsToAnalyze >= thisText.length()) {          tempTokenStream=new CachingTokenFilter(tstream);        } else {          tempTokenStream=new CachingTokenFilter(new OffsetLimitTokenFilter(tstream,maxCharsToAnalyze));        }      } else {        tempTokenStream=tstream;      }      highlighter=getPhraseHighlighter(query,fieldName,req,tempTokenStream);      if (tempTokenStream instanceof CachingTokenFilter && ((CachingTokenFilter)tempTokenStream).isCached()) {        tstream=tempTokenStream;      }    } else {      highlighter=getHighlighter(query,fieldName,req);    }    highlighter.setMaxDocCharsToAnalyze(maxCharsToAnalyze);    maxCharsToAnalyze-=thisText.length();    try {      TextFragment[] bestTextFragments=highlighter.getBestTextFragments(tstream,thisText,mergeContiguousFragments,numFragments);      for (      TextFragment bestTextFragment : bestTextFragments) {        if (bestTextFragment == null)         continue;        if (bestTextFragment.getScore() > 0 || preserveMulti) {          frags.add(bestTextFragment);          if (bestTextFragment.getScore() > 0)           --mvToMatch;        }      }    } catch (    InvalidTokenOffsetsException e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);    }  }  if (frags.size() > 0) {    if (!preserveMulti) {      Collections.sort(frags,null);    }    if (frags.size() > numFragments && !preserveMulti) {      frags=frags.subList(0,numFragments);    }    return getResponseForFragments(frags,req);  }  return null;}  }
class C{  public int append(char chunk[]) throws GuacamoleException {  return append(chunk,0,chunk.length);}  }
class C{  public static void updateSpecdumpRegressionValues(){  for (  Map.Entry<String,Boolean> entry : getCurrSpecdumpTestResults().entrySet()) {    Boolean testPassed=entry.getValue();    final String SPECDUMP_REGRESSION_VALUE=SPECDUMP_REGRESSION_VALUE_PREFIX + testPassed;    String androidManifestFilePath=entry.getKey() + "/" + REGRESSION_VALUE_CONTAINER_FILE;    try {      File inFile=new File(androidManifestFilePath);      if (!inFile.exists()) {        logger.error("Regression value container file {} does not exist",inFile);        return;      }      if (!inFile.isFile()) {        logger.error("Regression value container {} is not a file",inFile);        return;      }      File tempFile=new File(inFile.getAbsolutePath() + ".tmp");      BufferedReader br=new BufferedReader(new FileReader(androidManifestFilePath));      PrintWriter pw=new PrintWriter(new FileWriter(tempFile));      String line=null;      boolean replaced=false;      while ((line=br.readLine()) != null) {        if (line.trim().indexOf(SPECDUMP_REGRESSION_VALUE_PREFIX) == -1) {          pw.println(line);        } else {          replaced=true;          pw.println(SPECDUMP_REGRESSION_VALUE);        }        pw.flush();      }      if (!replaced) {        pw.println(DO_NOT_MODIFY);        pw.println(SPECDUMP_REGRESSION_VALUE);      }      pw.close();      br.close();      if (!inFile.delete()) {        System.out.println("Could not delete file");        return;      }      if (!tempFile.renameTo(inFile))       System.out.println("Could not rename file");    } catch (    FileNotFoundException ex) {      ex.printStackTrace();    }catch (    IOException ex) {      ex.printStackTrace();    }  }}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public void debug(){  System.out.println("------------ Print contents of dataset ------------");  Projector projector=projectionModel.getProjector();  for (int i=0; i < projector.getNumPoints(); i++) {  }  System.out.println("--------------------------------------");}  }
class C{  @Override public Token nextToken(){  int startPosition=getCurrentPositionInInput();  if (lookAhead(1) == '(') {    consume();    return new Token(LogicTokenTypes.LPAREN,"(",startPosition);  } else   if (lookAhead(1) == '[') {    consume();    return new Token(LogicTokenTypes.LSQRBRACKET,"[",startPosition);  } else   if (lookAhead(1) == ')') {    consume();    return new Token(LogicTokenTypes.RPAREN,")",startPosition);  } else   if (lookAhead(1) == ']') {    consume();    return new Token(LogicTokenTypes.RSQRBRACKET,"]",startPosition);  } else   if (Character.isWhitespace(lookAhead(1))) {    consume();    return nextToken();  } else   if (connectiveDetected(lookAhead(1))) {    return connective();  } else   if (symbolDetected(lookAhead(1))) {    return symbol();  } else   if (lookAhead(1) == (char)-1) {    return new Token(LogicTokenTypes.EOI,"EOI",startPosition);  } else {    throw new LexerException("Lexing error on character " + lookAhead(1) + " at position "+ getCurrentPositionInInput(),getCurrentPositionInInput());  }}  }
class C{  private static Pointer computePointer(ByteBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.BYTE);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    ByteBuffer t=ByteBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.BYTE);  }  return result;}  }
class C{  private void verifyNameChaining(X509Certificate cert) throws CertPathValidatorException {  if (prevSubject != null) {    String msg="subject/issuer name chaining";    if (debug != null)     debug.println("---checking " + msg + "...");    X500Principal currIssuer=cert.getIssuerX500Principal();    if (X500Name.asX500Name(currIssuer).isEmpty()) {      throw new CertPathValidatorException(msg + " check failed: " + "empty/null issuer DN in certificate is invalid",null,null,-1,PKIXReason.NAME_CHAINING);    }    if (!(currIssuer.equals(prevSubject))) {      throw new CertPathValidatorException(msg + " check failed",null,null,-1,PKIXReason.NAME_CHAINING);    }    if (debug != null)     debug.println(msg + " verified.");  }}  }
class C{  public boolean isOvershootClampingEnabled(){  return mOvershootClampingEnabled;}  }
class C{  public static URI querySnapshotSessionSourceProject(BlockObject sourceObj,DbClient dbClient){  URI projectURI=null;  if (sourceObj instanceof Volume) {    projectURI=((Volume)sourceObj).getProject().getURI();  } else   if (sourceObj instanceof BlockSnapshot) {    projectURI=((BlockSnapshot)sourceObj).getProject().getURI();  }  return projectURI;}  }
class C{  @Override public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  Automaton<LR1Item,LR1State> dfaLR1=super.createAutomaton();  LR1State startState=dfaLR1.getStartState();  LinkedList<LR1State> statesLALR=new LinkedList<LR1State>();  statesLALR.add(startState);  HashMap<LR1State,LR1State> equalStates=new HashMap<LR1State,LR1State>();  for (  LR1State state : dfaLR1.getStates()) {    if (state != startState) {      boolean found=false;      for (      LR1State candidate : statesLALR) {        if (state.equalsLR0(candidate)) {          equalStates.put(state,candidate);          found=true;          break;        }      }      if (!found) {        statesLALR.add(state);      }    }  }  LR1State startStateLALR=mergeStates(startState,equalStates);  equalStates.put(startState,startStateLALR);  statesLALR.removeFirst();  this.dfaLALR=new Automaton<LR1Item,LR1State>(startStateLALR);  while (!statesLALR.isEmpty()) {    LR1State originalState=statesLALR.removeFirst();    LR1State mergedState=mergeStates(originalState,equalStates);    dfaLALR.getStates().add(mergedState);    equalStates.put(originalState,mergedState);  }  LinkedList<Edge> edges=new LinkedList<Edge>();  for (  Edge edge : dfaLR1.getEdges()) {    Edge newEdge=new Edge(getLALRState((LR1State)edge.getSrc(),equalStates),edge.getSymbol(),getLALRState((LR1State)edge.getDest(),equalStates),edge.getSrcItem());    boolean found=false;    for (    Edge oldEdge : edges) {      if (newEdge.getSrc() == oldEdge.getSrc() && newEdge.getSymbol() == oldEdge.getSymbol()) {        if (newEdge.getDest() != oldEdge.getDest()) {          throw new ReduceReduceConflict("Reduce-Reduce-Konflikt");        } else {          found=true;          break;        }      }    }    if (!found) {      edges.add(newEdge);    }  }  dfaLALR.getEdges().addAll(edges);  return dfaLALR;}  }
class C{  public String[] list(String path) throws IOException {  if (path.startsWith("/")) {    path=path.substring(1);  }  if (!path.endsWith("/")) {    path=path + "/";  }  ArrayList<String> names=new ArrayList<>();  ZipFile zipFile=getZipFile();  try {    Enumeration<? extends ZipEntry> e=zipFile.entries();    while (e.hasMoreElements()) {      ZipEntry entry=e.nextElement();      String name=entry.getName();      if (name.startsWith(path)) {        String tail=name.substring(path.length());        int p=tail.indexOf('/');        if (p >= 0) {          tail=tail.substring(0,p);        }        if (!tail.equals("") && !names.contains(tail)) {          names.add(tail);        }      }    }  }  finally {    closeZipFile(zipFile);  }  String[] list=new String[names.size()];  names.toArray(list);  return list;}  }
class C{  public boolean isCommitted(){  return writer.isCommitted(this);}  }
class C{  @Override public synchronized void pvChanged(PvChangeEvent pvchangeevent){  Object currVal=pvchangeevent.getValue();  if (!(currVal instanceof ProcessVar))   return;switch (pvchangeevent.getType()) {case PvChangeEvent.PV_ADDED:    add(new PvTreeNode(currVal));  break;case PvChangeEvent.PV_CLEARED:removeAllChildren();break;case PvChangeEvent.PV_DELETED:PvTreeNode pvNode=findChild(currVal);if (pvNode != null) pvNode.removeFromParent();}}  }
class C{  public void add(LegendItem item){  this.items.add(item);}  }
class C{  public static void extend(){  CAbstractGraphPanelExtensionFactory.register(new CVariablesExtensionCreator());  CAbstractGraphPanelExtensionFactory.register(new CCrossReferenceExtensionCreator());  CAbstractGraphPanelExtensionFactory.register(new CRegisterTrackingExtensionCreator());  CAbstractGraphPanelExtensionFactory.register(new CInstructionHighlighterExtensionCreator());  CAbstractGraphPanelExtensionFactory.register(new CCodeBookmarkExtensionCreator());}  }
class C{  public CsvFile(CsvKey key,File file,CsvWriter writer){  this.key=key;  this.file=file;  this.writer=writer;}  }
class C{  private boolean isStatusFilterApplied(){  if (isPendingOrUnknownBtnClicked() || isErrorOrRegisteredBtnClicked() || inSyncBtnClicked) {    return true;  }  return false;}  }
class C{  public static IStatus makeCommittable(IResource[] resources,Object context){  List readOnlyFiles=new ArrayList();  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if (resource.getType() == IResource.FILE && isReadOnly(resource))     readOnlyFiles.add(resource);  }  if (readOnlyFiles.size() == 0)   return Status.OK_STATUS;  Map oldTimeStamps=createModificationStampMap(readOnlyFiles);  IStatus status=ResourcesPlugin.getWorkspace().validateEdit((IFile[])readOnlyFiles.toArray(new IFile[readOnlyFiles.size()]),context);  if (!status.isOK())   return status;  IStatus modified=null;  Map newTimeStamps=createModificationStampMap(readOnlyFiles);  for (Iterator iter=oldTimeStamps.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry entry=(Entry)iter.next();    if (!entry.getValue().equals(newTimeStamps.get(entry.getKey())))     modified=addModified(modified,(IFile)entry.getKey());  }  if (modified != null)   return modified;  return Status.OK_STATUS;}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  public static void openURL(Context mContext,String url){  Uri uri=Uri.parse(url);  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  mContext.startActivity(intent);}  }
class C{  public byte[] createPropose(Decision dec){  RequestList pendingRequests=clientsManager.getPendingRequests();  int numberOfMessages=pendingRequests.size();  int numberOfNonces=this.controller.getStaticConf().getNumberOfNonces();  if (dec.getConsensusId() > -1) {    dec.firstMessageProposed=pendingRequests.getFirst();    dec.firstMessageProposed.consensusStartTime=System.nanoTime();  }  dec.batchSize=numberOfMessages;  Logger.println("(TOMLayer.run) creating a PROPOSE with " + numberOfMessages + " msgs");  return bb.makeBatch(pendingRequests,numberOfNonces,System.currentTimeMillis(),controller);}  }
class C{  protected void checkForNullHandlers(){}  }
class C{  private static boolean rRequiresRecompile(Hop hop){  boolean ret=hop.requiresRecompile();  if (hop.getVisited() == VisitStatus.DONE)   return ret;  if (hop.getInput() != null)   for (  Hop c : hop.getInput()) {    ret|=rRequiresRecompile(c);    if (ret)     break;  }  hop.setVisited(VisitStatus.DONE);  return ret;}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  private void modifyClusterVarrayAssignments(ProtectionSystem system,Set<RPClusterVirtualArrayAssignmentChanges> varrayChanges){  if (varrayChanges == null || varrayChanges.isEmpty()) {    return;  }  for (  RPClusterVirtualArrayAssignmentChanges varrayChange : varrayChanges) {    if (varrayChange != null && varrayChange.getClusterId() == null) {      throw APIException.badRequests.rpClusterVarrayNoClusterId(system.getLabel());    }    String clusterId=varrayChange.getClusterId();    if (system.getRpSiteNames().containsValue(clusterId)) {      for (      Map.Entry<String,String> entry : system.getRpSiteNames().entrySet()) {        if (entry.getValue().equalsIgnoreCase(clusterId)) {          clusterId=entry.getKey();        }      }    } else     if (!system.getRpSiteNames().containsKey(clusterId)) {      throw APIException.badRequests.rpClusterVarrayInvalidClusterId(system.getLabel());    }    if (varrayChange.hasAdded()) {      VirtualArrayAssignments add=varrayChange.getAdd();      if (add.getVarrays() != null) {        for (        String varray : add.getVarrays()) {          try {            _dbClient.queryObject(VirtualArray.class,URI.create(varray));          } catch (          Exception e) {            throw APIException.badRequests.rpClusterVarrayInvalidVarray(system.getLabel(),clusterId);          }          system.addSiteAssignedVirtualArrayEntry(clusterId,varray);        }      }    }    if (varrayChange.hasRemoved()) {      VirtualArrayAssignments rem=varrayChange.getRemove();      if (rem.getVarrays() != null) {        for (        String varray : rem.getVarrays()) {          try {            _dbClient.queryObject(VirtualArray.class,URI.create(varray));          } catch (          Exception e) {            throw APIException.badRequests.rpClusterVarrayInvalidVarray(system.getLabel(),clusterId);          }          system.removeSiteAssignedVirtualArrayEntry(clusterId,varray);        }      }    }  }}  }
class C{  public PlattSMO(KernelTrick kf){  super(kf,SupportVectorLearner.CacheMode.NONE);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  XNodeSet xns=(XNodeSet)super.execute(xctxt,destructiveOK);  DTMManager dtmMgr=xctxt.getDTMManager();  int context=xctxt.getContextNode();  if (dtmMgr.getDTM(xns.getRoot()).getDocument() != dtmMgr.getDTM(context).getDocument()) {    Expression expr=(Expression)xns.getContainedIter();    xns=(XNodeSet)expr.asIterator(xctxt,context);  }  return xns;}  }
class C{  public synchronized E pop(){  E obj;  int len=size();  obj=peek();  removeElementAt(len - 1);  return obj;}  }
class C{  public void error(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.error(e);  }}  }
class C{  protected void printTime(String s){  SimpleDateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");  println(dateFormat.format(new java.util.Date()) + " " + s);}  }
class C{  public static org.oscm.vo.VOCatalogEntry convertToApi(org.oscm.internal.vo.VOCatalogEntry oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOCatalogEntry newVO=new org.oscm.vo.VOCatalogEntry();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setMarketplace(convertToApi(oldVO.getMarketplace()));  newVO.setAnonymousVisible(oldVO.isAnonymousVisible());  newVO.setCategories(convertToApiVOCategory(oldVO.getCategories()));  newVO.setVisibleInCatalog(oldVO.isVisibleInCatalog());  newVO.setService(convertToApi(oldVO.getService()));  return newVO;}  }
class C{  private void initMap(){  iconMap=new HashMap<>();  iconMap.put("tornado",R.drawable.ic_weather_tornado);  iconMap.put("thunderstorm",R.drawable.ic_weather_lightning);  iconMap.put("wind",R.drawable.ic_weather_windy);  iconMap.put("rain",R.drawable.ic_weather_pouring);  iconMap.put("snow",R.drawable.ic_weather_snowy);  iconMap.put("sleet",R.drawable.ic_weather_sleet);  iconMap.put("fog",R.drawable.ic_weather_fog);  iconMap.put("partly-cloudy-night",R.drawable.ic_weather_cloudy_night);  iconMap.put("clear-night",R.drawable.ic_weather_night);  iconMap.put("clear-day",R.drawable.ic_weather_sunny);  iconMap.put("partly-cloudy-day",R.drawable.ic_weather_partlycloudy);}  }
class C{  public final void testGetFormat(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKey);  assertEquals("PKCS#8",meks.getFormat());}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public boolean hasTrack(){  return hasExtension(Track.class);}  }
class C{  public InlineQueryResultCachedVoice.InlineQueryResultCachedVoiceBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public GenericServiceAPIResponseEntity deleteByQuery(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  RawQuery rawQuery=RawQuery.build().query(query).startTime(startTime).endTime(endTime).pageSize(pageSize).startRowkey(startRowkey).treeAgg(treeAgg).timeSeries(timeSeries).intervalMin(intervalmin).top(top).filerIfMissing(filterIfMissing).parallel(parallel).metricName(metricName).verbose(verbose).done();  GenericServiceAPIResponseEntity response=new GenericServiceAPIResponseEntity();  Map<String,Object> meta=new HashMap<String,Object>();  DataStorage dataStorage=null;  StopWatch stopWatch=new StopWatch();  try {    stopWatch.start();    dataStorage=DataStorageManager.getDataStorageByEagleConfig();    if (dataStorage == null) {      LOG.error("Data storage is null");      throw new IllegalDataStorageException("Data storage is null");    }    DeleteStatement deleteStatement=new DeleteStatement(rawQuery);    ModifyResult<String> deleteResult=deleteStatement.execute(dataStorage);    if (deleteResult.isSuccess()) {      meta.put(ELAPSEDMS,stopWatch.getTime());      response.setObj(deleteResult.getIdentifiers(),String.class);      response.setSuccess(true);      response.setMeta(meta);    }    return response;  } catch (  Exception e) {    response.setException(e);    LOG.error(e.getMessage(),e);  } finally {    stopWatch.stop();  }  return response;}  }
class C{  public Builder<T> keys(final Iterable<? extends T> keys){  this.keys=keys;  return this;}  }
class C{  public Double computeAvgTimeBetweenPeak(JavaRDD<long[]> data){  double[] max=this.summary.max().toArray();  JavaRDD<Long> filtered_y=data.filter(null).map(null).sortBy(null,true,1);  if (filtered_y.count() > 1) {    Long firstElement=filtered_y.first();    Long lastElement=filtered_y.sortBy(null,false,1).first();    JavaRDD<Long> firstRDD=filtered_y.filter(null);    JavaRDD<Long> secondRDD=filtered_y.filter(null);    JavaRDD<Vector> product=firstRDD.zip(secondRDD).map(null).filter(null).map(null);    return Statistics.colStats(product.rdd()).mean().toArray()[0];  }  return 0.0;}  }
class C{  public boolean isServiceRunning(){  ActivityManager manager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {    if (MainService.class.getName().equals(service.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  public GPTree lightClone(){  try {    return (GPTree)(super.clone());  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public void exportColumnBlock(int c,ByteBuffer buf){  exportColumns(info.colBlocks[c],buf);}  }
class C{  private void skipComment() throws IOException {  while (true) {switch (ch) {case EOF:      env.error(pos,"eof.in.comment");    return;case '*':  if ((ch=in.read()) == '/') {    ch=in.read();    return;  }break;default :ch=in.read();break;}}}  }
class C{  public static DeletePlatformSessionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeletePlatformSessionResponse object=new DeletePlatformSessionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deletePlatformSessionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeletePlatformSessionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ScreenAnnotation(String text,Point position,Font font,Color textColor){  this.init(text,position,font,textColor);}  }
class C{  public Array(final int size){  this(size,EnumSet.noneOf(Address.Flags.class));}  }
class C{  public void delete() throws IOException {  close();  fileSystem.deleteContents(directory);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  createDadNPC(zone);}  }
class C{  public static void notifyVerification(Context c,City city){  Intent i=new Intent(c,MainActivity.class);  i.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);  i.putExtra(MainActivity.EXTRA_REALLY_BUY_CITY_ID,city.id);  PendingIntent contentIntent=PendingIntent.getActivity(c,NOTIFICATION_VERIFY,i,PendingIntent.FLAG_CANCEL_CURRENT);  String title=c.getString(R.string.cities_ticket_bought_again_verification);  String text=c.getString(R.string.cities_ticket_bought_again_action);  fireNotification(c,NOTIFICATION_VERIFY,contentIntent,title,text,null,null,title,R.drawable.notification_small_warning,R.drawable.notification_big_warning,null,false);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.dataArea=(Rectangle2D)SerialUtilities.readShape(stream);  this.plotArea=(Rectangle2D)SerialUtilities.readShape(stream);}  }
class C{  public PartStack findPartStackByPart(@NotNull PartPresenter part){  for (  PartStackType partStackType : PartStackType.values()) {    if (partStacks.get(partStackType).containsPart(part)) {      return partStacks.get(partStackType);    }  }  return null;}  }
class C{  public void executeCmdLine(String[] cmd){  if (RR_VIA_LINK.equals(cmd[0])) {    if (cmd.length == 5) {      rerouteViaLink(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);    } else {      throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");    }  } else   if (RR_FROM_STOP.equals(cmd[0])) {    if (cmd.length == 5) {      rerouteFromStop(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);    } else {      throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");    }  } else   if (CHANGE_REF_LINK.equals(cmd[0])) {    if ("".equals(cmd[3])) {      changeRefLink(cmd[1],cmd[2]);    } else     if (cmd.length == 5) {switch (cmd[1]) {case ALL_TRANSIT_ROUTES_ON_LINK:        Set<TransitRoute> tmpTransitRoutes=getTransitRoutesOnLink(Id.createLinkId(cmd[2]));      for (      TransitRoute tr : tmpTransitRoutes) {        changeRefLink(tr,cmd[3],cmd[4]);      }    break;default :  changeRefLink(getTransitRoute(cmd[1],cmd[2]),cmd[3],cmd[4]);}} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 3 or 5 needed, "+ cmd.length+ " given");}} else if (ADD_LINK.equals(cmd[0])) {if (cmd.length == 5) {addLink(cmd[1],cmd[2],cmd[3],cmd[4]);refreshSchedule();} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 5 needed, "+ cmd.length+ " given");}} else if (REFRESH_TRANSIT_ROUTE.equals(cmd[0])) {if (cmd.length >= 3) {refreshTransitRoute(getTransitRoute(cmd[1],cmd[2]));} else {throw new IllegalArgumentException("Incorrect number of arguments for " + cmd[0] + "! 3 needed, "+ cmd.length+ " given");}} else if (COMMENT_START.equals(cmd[0].substring(0,2))) {} else {throw new IllegalArgumentException("Invalid command \"" + cmd[0] + "\"");}}  }
class C{  public static String substituteSandbox(String heronSandboxHome,String configPath,String pathString){  Config config=Config.newBuilder().put(Keys.heronSandboxHome(),heronSandboxHome).put(Keys.heronSandboxConf(),configPath).build();  return substitute(config,pathString);}  }
class C{  public static void register(String instantiatorClass,String instantiatedClass,int id,boolean distribute,EventID eventId,ClientProxyMembershipID context){  register(instantiatorClass,new InstantiatorAttributesHolder(instantiatorClass,instantiatedClass,id,eventId,context),distribute);}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException();  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  public void append(String s,Map m){  if (s.length() == 0)   return;  strings.add(s);  attributes.add(m);  count++;  length+=s.length();}  }
class C{  public void cfgExtension(ConfigurationValue cfgval,List<String> args) throws ConfigurationException {  if (args == null) {    throw new ConfigurationException.CannotOpen(null,cfgval.getVar(),cfgval.getSource(),cfgval.getLine());  }  PathResolver resolver=ThreadLocalToolkit.getPathResolver();  if (resolver == null || configResolver == null) {    throw new ConfigurationException.CannotOpen(null,cfgval.getVar(),cfgval.getSource(),cfgval.getLine());  }  Iterator<String> iterator=args.iterator();  String extension=iterator.next();  File file=new File(extension);  if (!file.exists()) {    throw new ConfigurationException.NotAFile(extension,cfgval.getVar(),cfgval.getSource(),cfgval.getLine());  }  List<String> parameters=new ArrayList<String>();  while (iterator.hasNext()) {    parameters.add(iterator.next());  }  getExtensionMappings().put(file.getAbsolutePath(),parameters);}  }
class C{  protected void lock(Lock lock){  while (true) {    try {      while (!lock.tryLock(1000,TimeUnit.MILLISECONDS)) {      }      return;    } catch (    InterruptedException e) {    }  }}  }
class C{  public double nextRandom(){  return RandomUtil.getInstance().nextBeta(alpha,beta);}  }
class C{  @LayoutlibDelegate static long currentThreadTimeMicro(){  return System.currentTimeMillis() * 1000;}  }
class C{  public void insertDocument(String docId,@Nonnull Object document){  dbConnector.create(docId,document);}  }
class C{  public static long optimize(InputStream in,OutputStream out) throws IOException {  return optimize(in,out,null);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DLS_DEAD_LOCAL_STORE") public int read(){  int record[]=new int[MAX_LEN];  do {    record=readLine();    if (type == EXT_ADDR) {      address=address & 0xffff + record[4] * 256 * 65536 + record[5] * 65536;      record=readLine();    }  } while ((type != DATA) && (type != END));  if (type == END) {    return 0;  }  data=new int[len];  for (int i=0; i < len; i++) {    data[i]=record[TYPE + 1 + i];  }  return len;}  }
class C{  public static String selectIDADirectory(final Component parent,final String initialDirectory){  Preconditions.checkNotNull(parent,"IE02067: Parent argument can not be null");  Preconditions.checkNotNull(initialDirectory,"IE02259: Initial directory can not be null");  final CIdaSelectionDialog dialog=CIdaSelectionDialog.show(SwingUtilities.getWindowAncestor(parent),initialDirectory);  final File selectedFile=dialog.getSelectedFile();  if (selectedFile == null) {    return null;  } else   if (!selectedFile.exists()) {    CMessageBox.showError(parent,"File does not exist.");    return null;  } else   if (selectedFile.canExecute()) {    return selectedFile.getAbsolutePath();  } else {    CMessageBox.showError(parent,"File is not an executable file.");    return null;  }}  }
class C{  public boolean isConnectedToChat(){  return (mMessageConsumer != null) && mMessageConsumer.isRunning();}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public static String match(String content,String pattern){  return match(content,pattern,false);}  }
class C{  public static void encodeAndTransferLinkedStateToBody(Operation source,Operation target,boolean useBinary){  if (useBinary && source.getAction() != Action.POST) {    try {      byte[] encodedBody=Utils.encodeBody(source,source.getLinkedState(),Operation.MEDIA_TYPE_APPLICATION_KRYO_OCTET_STREAM);      source.linkSerializedState(encodedBody);    } catch (    Throwable e2) {      Utils.logWarning("Failure binary serializing, will fallback to JSON: %s",Utils.toString(e2));    }  }  if (!source.hasLinkedSerializedState()) {    target.setContentType(Operation.MEDIA_TYPE_APPLICATION_JSON);    target.setBodyNoCloning(Utils.toJson(source.getLinkedState()));  } else {    target.setContentType(Operation.MEDIA_TYPE_APPLICATION_KRYO_OCTET_STREAM);    target.setBodyNoCloning(source.getLinkedSerializedState());  }}  }
class C{  public Date toDate(){  return new Date(getMillis());}  }
class C{  public void removeObserver(FindToolbarObserver observer){  mObservers.removeObserver(observer);}  }
class C{  private void checkOpenAndCreate(boolean create) throws SocketException {  if (isClosed()) {    throw new SocketException("Socket is closed");  }  if (!create) {    if (!isConnected()) {      throw new SocketException("Socket is not connected");    }    return;  }  if (isCreated) {    return;  }synchronized (this) {    if (isCreated) {      return;    }    try {      impl.create(true);    } catch (    SocketException e) {      throw e;    }catch (    IOException e) {      throw new SocketException(e.toString());    }    isCreated=true;  }}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  long selectLong(Connection c,String key,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectLongInternal(c,SQLString.getByKey(key,c),vs,null,true);}  }
class C{  public final void point(Vec2D v){  gfx.point(v.x,v.y);}  }
class C{  public static InlineQueryResponseBuilder builder(){  return new InlineQueryResponseBuilder();}  }
class C{  protected boolean doAutoTransaction(){  return true;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  RSABlindingParameters p;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    p=(RSABlindingParameters)rParam.getParameters();  } else {    p=(RSABlindingParameters)param;  }  core.init(forEncryption,p.getPublicKey());  this.forEncryption=forEncryption;  this.key=p.getPublicKey();  this.blindingFactor=p.getBlindingFactor();}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public void shutdown(){  done=true;synchronized (queue) {    queue.notifyAll();  }  if (keepAliveThread != null)   keepAliveThread.interrupt();}  }
class C{  @Override public void loadState(final Serializable state){}  }
class C{  public void recompose(StylesheetRoot root) throws TransformerException {  root.recomposeOutput(this);}  }
class C{  public CatalogCategoryRestRep category(){  CatalogCategoryRestRep parent=catalog.categories().getRootCatalogCategory(tenantId);  for (  String segment : segments) {    parent=getChildCategory(parent,segment);  }  return parent;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public void testMD5(){  Digest oldDigest=new MD5Digest();  Digest newDigest=new OpenSSLDigest.MD5();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public void preDropObject(AbstractSession session,Writer dropSchemaWriter,boolean createSQLFiles){  setCreateSQLFiles(createSQLFiles);  dropIndexes(session,dropSchemaWriter);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JTable traceTable=m_tracesPanel.getTracesTable();  final int mouseRow=traceTable.rowAtPoint(event.getPoint());  if (mouseRow != -1) {    final int[] rows=traceTable.getSelectedRows();    if (Ints.asList(rows).indexOf(mouseRow) != -1) {      traceTable.setRowSelectionInterval(mouseRow,mouseRow);    }  }  final int minIndex=m_tracesPanel.getTracesTable().getSelectionModel().getMinSelectionIndex();  if (minIndex != -1) {    final JPopupMenu popupMenu=new CEventListTableMenu((JFrame)SwingUtilities.getWindowAncestor(CTracesNodeComponent.this),m_tracesPanel.getTracesTable(),m_container.getTraceProvider());    popupMenu.show(m_tracesPanel.getTracesTable(),event.getX(),event.getY());  }}  }
class C{  public static final GCodeFlavor tasteFlavor(File file) throws IOException, GCodeParseException {  if (file.exists())   throw new GCodeParseException("Passed file does not exist.");  if (!file.isFile())   throw new GCodeParseException("This is not a file.");  final BufferedInputStream buffer=new BufferedInputStream(new FileInputStream(file));  GCodeFlavor ret=tasteFlavor(buffer);  buffer.close();  return ret;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  public DriverTask resumeVolumeMirror(List<VolumeMirror> mirrors){  LOG.info("Resuming volume mirror not supported.");  DriverTask task=new DellSCDriverTask("resumeVolumeMirror");  task.setStatus(TaskStatus.FAILED);  return null;}  }
class C{  @Singleton @Provides RepositoryAdapter provideRepositoryAdapter(BaseApp baseApp){  return null;}  }
class C{  public static FlagConfig parseFlagsFromString(String header){  String[] args=header.split("\\s");  return getFlagConfig(args);}  }
class C{  public boolean usesTablePerClassInheritanceStrategy(){  return m_descriptor.hasTablePerClassPolicy();}  }
class C{  public static <T>FutureW<T> ofResult(final T result){  return FutureW.of(CompletableFuture.completedFuture(result));}  }
class C{  private void readButtons(){  useSufficesValue=useSufficesButton.getSelection();  useCaseValue=useCaseButton.getSelection();  subexpressionValue=subexpressionButton.getSelection();}  }
class C{  @Override public void onChunkUnload(){  if (addedToEnet && Info.isIc2Available()) {    MinecraftForge.EVENT_BUS.post(new EnergyTileUnloadEvent(this));    addedToEnet=false;  }}  }
class C{  public PublishItem(String nodeId,T toPublish){  super(PubSubElementType.PUBLISH,nodeId);  items=new ArrayList<T>(1);  items.add(toPublish);}  }
class C{  public void stop(){  engine.stop();}  }
class C{  public static boolean isNull(Object object){  return object != null && object == NULL_CACHE.get(object.getClass());}  }
class C{  public final void remove(FilterHandle filterCallback,FilterServiceEntry filterServiceEntry){  EventTypeIndexBuilderValueIndexesPair pair;  if (isolatableCallbacks != null) {    callbacksLock.lock();    try {      pair=isolatableCallbacks.remove(filterCallback);    }  finally {      callbacksLock.unlock();    }    if (pair == null) {      return;    }  } else {    pair=(EventTypeIndexBuilderValueIndexesPair)filterServiceEntry;  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qFilterRemove(filterCallback,pair);  }  EventType eventType=pair.getFilterValueSet().getEventType();  FilterHandleSetNode rootNode=eventTypeIndex.get(eventType);  if (rootNode != null) {    for (int i=0; i < pair.getIndexPairs().length; i++) {      IndexTreeBuilder.remove(eventType,filterCallback,pair.getIndexPairs()[i],rootNode);    }  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aFilterRemove();  }}  }
class C{  public void paintTreeCellFocus(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected boolean isRenderNullValues(){  return true;}  }
class C{  public static TimeSpan toTimespan(Object o) throws PageException {  if (o instanceof TimeSpan)   return (TimeSpan)o; else   if (o instanceof String) {    String[] arr=o.toString().split(",");    if (arr.length == 4) {      int[] values=new int[4];      try {        for (int i=0; i < arr.length; i++) {          values[i]=toIntValue(arr[i]);        }        return new TimeSpanImpl(values[0],values[1],values[2],values[3]);      } catch (      ExpressionException e) {      }    }  } else   if (o instanceof ObjectWrap) {    return toTimespan(((ObjectWrap)o).getEmbededObject());  }  double dbl=toDoubleValue(o,true,Double.NaN);  if (!Double.isNaN(dbl))   return TimeSpanImpl.fromDays(dbl);  throw new CasterException(o,"timespan");}  }
class C{  public AudioTrack(AudioCapabilities audioCapabilities,int streamType){  this.audioCapabilities=audioCapabilities;  this.streamType=streamType;  isLatencyQuirkEnabled=AmazonQuirks.isLatencyQuirkEnabled();  log.i("isLatencyQuirkEnabled = " + isLatencyQuirkEnabled);  isDolbyPassthroughQuirkEnabled=AmazonQuirks.isDolbyPassthroughQuirkEnabled();  log.i("isDolbyPassthroughQuirkEnabled = " + isDolbyPassthroughQuirkEnabled);  passthrough=false;  releasingConditionVariable=new ConditionVariable(true);  if (Util.SDK_INT >= 18) {    try {      getLatencyMethod=android.media.AudioTrack.class.getMethod("getLatency",(Class<?>[])null);    } catch (    Throwable e) {      log.w("getLatencyMethod not found. " + e.getMessage());    }  }  if (Util.SDK_INT >= 23) {    audioTrackUtil=new AudioTrackUtilV23(isLatencyQuirkEnabled,getLatencyMethod);  } else   if (Util.SDK_INT >= 19) {    audioTrackUtil=new AudioTrackUtilV19(isLatencyQuirkEnabled,getLatencyMethod);  } else {    audioTrackUtil=new AudioTrackUtil(isLatencyQuirkEnabled,getLatencyMethod);  }  playheadOffsets=new long[MAX_PLAYHEAD_OFFSET_COUNT];  volume=1.0f;  startMediaTimeState=START_NOT_SET;}  }
class C{  private void dumpHosts() throws Throwable {  for (  H host : hosts) {    ServiceHostUtils.dumpHost(host,"test-host");  }}  }
class C{  public DeviceAutomator onHomeScreen(long timeout){  mDevice.pressHome();  String launcherPackage=mDevice.getLauncherPackageName();  assertThat(launcherPackage,notNullValue());  mDevice.wait(hasObject(By.pkg(launcherPackage).depth(0)),timeout);  return this;}  }
class C{  @Override public void onTapCommand(int tapType,int x,int y,long eventTime){switch (tapType) {case TAP_TYPE_TOUCH:    break;case TAP_TYPE_TOUCH_CANCEL:  break;case TAP_TYPE_TAP:tapCount++;backgroundPaint.setColor(ContextCompat.getColor(getApplicationContext(),tapCount % 2 == 0 ? R.color.background : R.color.background2));break;}invalidate();}  }
class C{  public void mutePublishedMedia(MutedMediaType muteType,String participantId) throws RoomException {  log.debug("Request [MUTE_PUBLISHED] muteType={} ({})",muteType,participantId);  Participant participant=getParticipant(participantId);  String name=participant.getName();  if (participant.isClosed()) {    throw new RoomException(Code.USER_CLOSED_ERROR_CODE,"Participant '" + name + "' has been closed");  }  if (!participant.isStreaming()) {    throw new RoomException(Code.USER_NOT_STREAMING_ERROR_CODE,"Participant '" + name + "' is not streaming media");  }  participant.mutePublishedMedia(muteType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.017 -0500",hash_original_method="0AF9661B39DF89BA2CB28B0B7702F643",hash_generated_method="12CFD1E25E85643ED325C9AD18CFEEC0") public static ECPoint.F2m tau(ECPoint.F2m p){  if (p.isInfinity()) {    return p;  }  ECFieldElement x=p.getX();  ECFieldElement y=p.getY();  return new ECPoint.F2m(p.getCurve(),x.square(),y.square(),p.isCompressed());}  }
class C{  public static String md5(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public StreamServerConfigurationImpl(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void testBug71396PrepStatementMultiCheck(PreparedStatement[] testPStmt,String[] queries,int[] expRowCount) throws SQLException {  if (testPStmt.length != queries.length || testPStmt.length != expRowCount.length) {    fail("Bad arguments!");  }  for (int i=0; i < queries.length; i++) {    testBug71396PrepStatementCheck(testPStmt[i],queries[i],expRowCount[i]);  }}  }
class C{  public boolean hasVisibleItems(){  for (  Entry e : mEntries) {    if (e.expanded != null) {      return true;    }  }  return false;}  }
class C{  public static Function length(Object column){  return new Function(format("length(%s)",column));}  }
class C{  public boolean isStopped(){  return stopped;}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,Instances D_train,Instances D_test,String top) throws Exception {  return Evaluation.evaluateModel(h,D_train,D_test,top,"1");}  }
class C{  public boolean loadPartialEntities(){  return loadPartialEntities;}  }
class C{  public WbXmlExtensionDef locateExtension(long ext){  return extsByToken.get((byte)ext);}  }
class C{  protected int calculateBreakPosition(int p0,Token tokenList,float x0){  int p=p0;  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  float currentWidth=getWidth();  if (currentWidth == Integer.MAX_VALUE)   currentWidth=getPreferredSpan(X_AXIS);  currentWidth=Math.max(currentWidth,MIN_WIDTH);  Token t=tokenList;  while (t != null && t.isPaintable()) {    float tokenWidth=t.getWidth(textArea,this,x0);    if (tokenWidth > currentWidth) {      if (p == p0) {        return t.getOffsetBeforeX(textArea,this,0,currentWidth);      }      return t.isWhitespace() ? p + t.textCount : p;    }    currentWidth-=tokenWidth;    x0+=tokenWidth;    p+=t.textCount;    t=t.getNextToken();  }  return p + 1;}  }
class C{  public SAML(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks,IParameter param){  super(message,protocol,callbacks);  super.setParamName(param.getName());  super.setParsedContent(decode(param.getValue()));  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  protected static long calculateUplink(IBandIdentifier iden,int channel){  long downlink=calculateDownlink(iden,channel);  if (downlink > 0 && iden != null) {    return downlink + iden.getTransmitOffset();  }  return 0;}  }
class C{  public Vector rotateXY(final double sinAngle,final double cosAngle){  return new Vector(x * cosAngle - y * sinAngle,x * sinAngle + y * cosAngle,z);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AdempiereColor[");  if (isFlat())   sb.append("Flat").append(" ").append(ThemeUtils.getColorAsString(getFlatColor())); else   if (isGradient())   sb.append("Gradient").append(" Upper=").append(ThemeUtils.getColorAsString(getGradientUpperColor())).append(",Lower=").append(ThemeUtils.getColorAsString(getGradientLowerColor())).append(",Start=").append(getGradientStartPoint()).append(",RDistance=").append(getGradientRepeatDistance()); else   if (isLine())   sb.append("Line").append(" Color=").append(ThemeUtils.getColorAsString(getLineColor())).append(",BackColor=").append(ThemeUtils.getColorAsString(getLineBackColor())).append(",Width=").append(getLineWidth()).append(",Distance=").append(getLineDistance()); else   if (isTexture())   sb.append("Texture").append(" GraphURL=").append(getTextureURL()).append(",Taint=").append(ThemeUtils.getColorAsString(getTextureTaintColor())).append(",Alpha=").append(getTextureCompositeAlpha());  sb.append("]");  return sb.toString();}  }
class C{  public static AdUnits run(AdSense adsense,String adClientId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad units for ad client %s\n",adClientId);  System.out.println("=================================================================");  String pageToken=null;  AdUnits adUnits=null;  do {    adUnits=adsense.adunits().list(adClientId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adUnits.getItems() != null && !adUnits.getItems().isEmpty()) {      for (      AdUnit unit : adUnits.getItems()) {        System.out.printf("Ad unit with code \"%s\", name \"%s\" and status \"%s\" was found.\n",unit.getCode(),unit.getName(),unit.getStatus());      }    } else {      System.out.println("No ad units found.");    }    pageToken=adUnits.getNextPageToken();  } while (pageToken != null);  System.out.println();  return adUnits;}  }
class C{  public boolean isParameterized(){  EList<TypeArgument> _typeArgs=this.getTypeArgs();  boolean _isEmpty=_typeArgs.isEmpty();  return (!_isEmpty);}  }
class C{  private void afterCompleted(Canvas canvas){  canvas.drawCircle(x,y,radius,loadingPaint);  if (hookCount == HOOK_COUNT - 1) {    e.y=e.y + littleStep;    c.x=c.x - littleStep;    d.x=d.x + littleStep;    d.y=d.y - littleStep;    isCompleted=false;    isEnd=true;  } else {    e.x=x;    e.y=y + hookStepY * (hookCount + 1);    lengthX=lengthX * 3 / 4;    c.x=x - lengthX * 3 / 4;    c.y=y;    d.x=x + lengthY - radius / (float)8 * (hookCount + 1);    d.y=y - hookStepY * (hookCount + 1);    hookCount++;  }  drawArrowOrHook(canvas);  postInvalidateDelayed(COMPLETE_DURATION);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    int image2Min=(int)image2.getMinimumValue();    int image2Max=(int)image2.getMaximumValue();    int image2Range=image2Max - image2Min + 1;    long[][] contingencyTable=new long[image1Range][image2Range];    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          contingencyTable[(int)(x - image1Min)][(int)(y - image2Min)]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    DecimalFormat df=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="CROSS-TABULATION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    String contingency="\t\tImage 1\nImage 2";    for (int a=0; a < image1Range; a++) {      contingency+="\t" + (a + image1Min);    }    contingency+="\n";    for (int b=0; b < image2Range; b++) {      contingency+=(b + image2Min);      for (int a=0; a < image1Range; a++) {        contingency+="\t" + df.format(contingencyTable[a][b]);      }      contingency+="\n";    }    retstr+=contingency;    returnData(retstr);    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String combine(TrialSuite[] trials){  if (trials == null || trials.length == 0) {    return "";  }  if (trials.length == 1) {    return trials[0].computeTable();  }  if (format == null) {    format=DecimalFormat.getInstance();    format.setMaximumFractionDigits(4);  }  boolean extractHeader=true;  Hashtable<String,String> results=new Hashtable<String,String>();  ArrayList<String> order=new ArrayList<String>();  for (int t=0; t < trials.length; t++) {    Scanner sc=new Scanner(trials[t].computeTable());    sc.nextLine();    while (sc.hasNextLine()) {      StringTokenizer st=new StringTokenizer(sc.nextLine(),",");      String ct=st.nextToken();      String avg=st.nextToken();      if (extractHeader) {        order.add(ct);        results.put(ct,format.format(Double.valueOf(avg)));      } else {        String s=results.get(ct);        s+="," + format.format(Double.valueOf(avg));        results.put(ct,s);      }    }    sc.close();    extractHeader=false;  }  String retValue="";  for (  String s : order) {    retValue+=s + "," + results.get(s)+ "\n";  }  return retValue;}  }
class C{  public double value(double x){  int n=coefficients.length;  double answer=coefficients[--n];  while (n > 0)   answer=answer * x + coefficients[--n];  return answer;}  }
class C{  private static void removeUnsupportedAttributes(PrintService ps,DocFlavor flavor,AttributeSet aset){  AttributeSet asUnsupported=ps.getUnsupportedAttributes(flavor,aset);  if (asUnsupported != null) {    Attribute[] usAttrs=asUnsupported.toArray();    for (int i=0; i < usAttrs.length; i++) {      Class category=usAttrs[i].getCategory();      if (ps.isAttributeCategorySupported(category)) {        Attribute attr=(Attribute)ps.getDefaultAttributeValue(category);        if (attr != null) {          aset.add(attr);        } else {          aset.remove(category);        }      } else {        aset.remove(category);      }    }  }}  }
class C{  public DateTickUnit(DateTickUnitType unitType,int multiple,DateTickUnitType rollUnitType,int rollMultiple,DateFormat formatter){  super(DateTickUnit.getMillisecondCount(unitType,multiple));  ParamChecks.nullNotPermitted(formatter,"formatter");  if (multiple <= 0) {    throw new IllegalArgumentException("Requires 'multiple' > 0.");  }  if (rollMultiple <= 0) {    throw new IllegalArgumentException("Requires 'rollMultiple' > 0.");  }  this.unitType=unitType;  this.count=multiple;  this.rollUnitType=rollUnitType;  this.rollCount=rollMultiple;  this.formatter=formatter;  this.unit=unitTypeToInt(unitType);  this.rollUnit=unitTypeToInt(rollUnitType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @Override @SuppressWarnings("fallthrough") public synchronized int handleTelegram(char[] buffer){  int result=0;  int msgPid;  if (checkTelegram(buffer)) {    try {      msgService=(Integer)getParamValue(ID_OBD_SVC,buffer);      if (msgService == OBD_ID_NRC) {        int svc=(Integer)getParamValue(ID_NR_SVC,buffer);        int nrcCode=(Integer)getParamValue(ID_NR_CODE,buffer);        NRC nrc=NRC.get(nrcCode);        String error=String.format(nrc.toString(svc));        log.error(error);        if (isResetOnNrc()) {          reset();        } else {          setService(OBD_SVC_NONE,true);        }        firePropertyChange(new PropertyChangeEvent(this,PROP_NRC,null,error));        return result;      }      msgService&=~0x40;switch (msgService) {case OBD_SVC_FREEZEFRAME:case OBD_SVC_DATA:        msgPid=(Integer)getParamValue(ID_OBD_PID,buffer);switch (msgPid) {case 0x00:case 0x20:case 0x40:case 0x60:case 0x80:case 0xA0:case 0xC0:case 0xE0:        long msgPayload=Long.valueOf(new String(getPayLoad(buffer)),16);      markSupportedPids(msgService,msgPid,msgPayload,PidPvs);    break;case 1:  msgPayload=((Integer)getParamValue(ID_NUM_CODES,NUMCODE_PARAMETERS,buffer)).longValue();setNumCodes(Long.valueOf(msgPayload).intValue());default :dataItems.updateDataItems(msgService,msgPid,hexToBytes(String.valueOf(getPayLoad(buffer))));break;}break;case OBD_SVC_VEH_INFO:msgPid=(Integer)getParamValue(ID_OBD_PID,buffer);switch (msgPid) {case 0x00:case 0x20:case 0x40:case 0x60:case 0x80:case 0xA0:case 0xC0:case 0xE0:long msgPayload=Long.valueOf(new String(getPayLoad(buffer)),16);markSupportedPids(msgService,msgPid,msgPayload,VidPvs);break;default :dataItems.updateDataItems(msgService,msgPid,hexToBytes(String.valueOf(getPayLoad(buffer))));break;}break;case OBD_SVC_READ_CODES:case OBD_SVC_PENDINGCODES:case OBD_SVC_PERMACODES:int currCode;Integer key;EcuCodeItem code;int nCodes=Integer.valueOf(new String(buffer,2,2),16);setNumCodes(nCodes);for (int i=4; i < buffer.length; i+=4) {key=Integer.valueOf(new String(buffer,i,4),16);currCode=key.intValue();if (currCode != 0) {if ((code=(EcuCodeItem)knownCodes.get(key)) != null) {tCodes.put(key,code);} else {tCodes.put(key,new ObdCodeItem(key.intValue(),Messages.getString("customer.specific.trouble.code.see.manual")));}nCodes++;}}if (nCodes == 0) {tCodes.put(0,new ObdCodeItem(0,Messages.getString("no.trouble.codes.set")));}break;case OBD_SVC_CLEAR_CODES:break;default :log.warn("Service not (yet) supported: " + msgService);}} catch (NumberFormatException e) {log.warn("'" + buffer.toString() + "':"+ e.getMessage());}}return (result);}  }
class C{  @RequestMethod("POST") public synchronized void addNote(String message){  notes.put(nextNoteID,mapOf(entry(ID_KEY,nextNoteID),entry(DATE_KEY,new Date()),entry(MESSAGE_KEY,message)));  nextNoteID++;}  }
class C{  public void disposeConsumerResources(){  releaseTiles(idleTileConsumerCacheList);}  }
class C{  public boolean visit(MemberRef node){  return true;}  }
class C{  private Chunk createSuperScript(String text){  return new Chunk(text).setTextRise(5f);}  }
class C{  public LogicAsserter finishes(boolean expectedFinishes){  this.expectedFinishes=expectedFinishes;  return this;}  }
class C{  public RetryException(){  super();}  }
class C{  protected void fireProgressUpdate(int type,String task,int frameNumber,int totalFrames){  if (updateProgress) {    getProgressSupport().fireUpdate(type,task,totalFrames,frameNumber);  } else   if (type == ProgressEvent.DONE) {    getProgressSupport().fireUpdate(ProgressEvent.DONE,task,totalFrames,frameNumber);  }}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  public static int indexOf(boolean[] array,boolean value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public String toXML(int indent){  final StringBuffer xml=new StringBuffer();  final String tabs=StringUtils.repeat(" ",indent);  xml.append(tabs + "<Configuracion_Parametros>");  if (listaParametros != null) {    for (Iterator it=listaParametros.entrySet().iterator(); it.hasNext(); ) {      xml.append(Constants.NEWLINE);      xml.append(tabs + "  " + "<parametro>");      Map.Entry par=(Map.Entry)it.next();      xml.append(Constants.NEWLINE);      xml.append(tabs + "       <id>");      xml.append((String)par.getKey());      xml.append("</id>");      xml.append(Constants.NEWLINE);      xml.append(tabs + "       <valor>");      xml.append((String)par.getValue());      xml.append("</valor>");      xml.append(Constants.NEWLINE);      xml.append(tabs + "  " + "</parametro>");    }  }  xml.append(Constants.NEWLINE);  xml.append(tabs + "</Configuracion_Parametros>");  xml.append(Constants.NEWLINE);  return xml.toString();}  }
class C{  public TokenAuthorizerContext(String type,String authorizationToken,String methodArn){  this.type=type;  this.authorizationToken=authorizationToken;  this.methodArn=methodArn;}  }
class C{  public void init(FloatArray2D src,int steps,float initial_sigma,int min_size,int max_size){  int o=0;  float w=(float)src.width;  float h=(float)src.height;  while (w > (float)min_size && h > (float)min_size) {    w/=2.0f;    h/=2.0f;    ++o;  }  octaves=new FloatArray2DScaleOctave[o];  float[] sigma=new float[steps + 3];  sigma[0]=initial_sigma;  float[] sigma_diff=new float[steps + 3];  sigma_diff[0]=0.0f;  float[][] kernel_diff=new float[steps + 3][];  for (int i=1; i < steps + 3; ++i) {    sigma[i]=initial_sigma * (float)Math.pow(2.0f,(float)i / (float)steps);    sigma_diff[i]=(float)Math.sqrt(sigma[i] * sigma[i] - initial_sigma * initial_sigma);    kernel_diff[i]=Filter.createGaussianKernel1D(sigma_diff[i],true);  }  FloatArray2D next;  for (int i=0; i < octaves.length; ++i) {    octaves[i]=new FloatArray2DScaleOctave(src,sigma,sigma_diff,kernel_diff);    octaves[i].buildStub();    next=new FloatArray2D(src.width / 2 + src.width % 2,src.height / 2 + src.height % 2);    FloatArray2DScaleOctave.downsample(octaves[i].getL(1),next);    if (src.width > max_size || src.height > max_size)     octaves[i].clear();    src=next;  }}  }
class C{  public static void main(String[] args) throws IOException {  ListedData<ProcessInfo> p=new XroadProcessLister().list();  System.out.println("raw: " + p.getJmxData());  System.out.println("parsed: " + p.getParsedData());}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  data.addDataListener(this);}  }
class C{  @Override public Set computeDependencies(ExecutionContext context) throws TypeMismatchException, AmbiguousNameException, NameResolutionException {  return context.addDependencies(this,this.collectionExpr.computeDependencies(context));}  }
class C{  @Override public String toString(){  return "InetUnixAddress[" + new String(ipaddress,StandardCharsets.UTF_8) + "]";}  }
class C{  @SuppressWarnings("unchecked") @Override protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs,Object data) throws SolrException {  boolean ignoreCase=getIgnoreCase(initArgs);  if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {    ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG,false);  }  managedWords=new TreeSet<>();  if (data != null) {    List<String> wordList=(List<String>)data;    if (ignoreCase) {      for (      String word : wordList) {        managedWords.add(word.toLowerCase(Locale.ROOT));      }    } else {      managedWords.addAll(wordList);    }  } else {    storeManagedData(new ArrayList<String>(0));  }  log.info("Loaded " + managedWords.size() + " words for "+ getResourceId());}  }
class C{  public static double pdf(double x,double mu,double sigma,double skew){  x=(x - mu) / sigma;  if (Math.abs(skew) > 0.) {    x=-Math.log(1. - skew * x) / skew;  }  return MathUtil.SQRTHALF * Math.exp(-.5 * x * x) / sigma / (1 - skew * x);}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/items/" + name + ".png";}  }
class C{  public CodesEpson(){}  }
class C{  @HLEFunction(nid=0x7B749390,version=150) public int sceKernelFreeHeapMemory(int heapId,TPointer block){  HeapInformation info=heaps.get(heapId);  if (info == null) {    return -1;  }  info.freeBlock(block.getAddress());  return 0;}  }
class C{  protected ActionErrors validarUdocForm(UnidadDocumentalForm form,String endAfterYear,String endBeforeYear,RelacionEntregaPO relacion,HttpServletRequest request){  ActionErrors errores=new ActionErrors();  if (relacion.isSignaturaSolictableEnUDoc()) {    if (GenericValidator.isBlankOrNull(form.getSignaturaUDoc())) {      errores.add(TransferenciasConstants.NECESARIO_INTRODUCIR_UNA_SIGNATURA,new ActionError(TransferenciasConstants.NECESARIO_INTRODUCIR_UNA_SIGNATURA));    }    if (!ConfigConstants.getInstance().getPermitirSignaturaAlfanumerica()) {      if (!GenericValidator.isBlankOrNull(form.getSignaturaUDoc()))       if (!GenericValidator.isInt(form.getSignaturaUDoc()))       errores.add(TransferenciasConstants.SIGNATURA_DEBE_SER_UN_VALOR_NUMERICO,new ActionError(TransferenciasConstants.SIGNATURA_DEBE_SER_UN_VALOR_NUMERICO));    }  }  if (relacion.isNivelDocumentalFraccionSerie()) {    String[] rangosIniciales=request.getParameterValues("campo_201");    String[] rangosFinales=request.getParameterValues("campo_202");    if (rangosIniciales != null && rangosFinales != null) {      if (rangosIniciales.length != rangosFinales.length) {        errores.add(TransferenciasConstants.NECESARIO_INTRODUCIR_AMBOS_RANGOS,new ActionError(TransferenciasConstants.NECESARIO_INTRODUCIR_AMBOS_RANGOS));      } else {        for (int i=0; i < rangosIniciales.length; i++) {          if (GenericValidator.isBlankOrNull(rangosIniciales[i])) {            errores.add(TransferenciasConstants.NECESARIO_INTRODUCIR_RANGO_INICIAL,new ActionError(TransferenciasConstants.NECESARIO_INTRODUCIR_RANGO_INICIAL));            break;          }        }        for (int i=0; i < rangosFinales.length; i++) {          if (GenericValidator.isBlankOrNull(rangosFinales[i])) {            errores.add(TransferenciasConstants.NECESARIO_INTRODUCIR_RANGO_FINAL,new ActionError(TransferenciasConstants.NECESARIO_INTRODUCIR_RANGO_FINAL));            break;          }        }      }    } else {      if (rangosIniciales == null && rangosIniciales != rangosFinales)       errores.add(TransferenciasConstants.NECESARIO_INTRODUCIR_AMBOS_RANGOS,new ActionError(TransferenciasConstants.NECESARIO_INTRODUCIR_AMBOS_RANGOS));    }  }  if (GenericValidator.isBlankOrNull(form.getAsunto()))   errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_ASUNTO,request.getLocale())));  Date fechaInicio=null;  try {    fechaInicio=form.getFechaInicioAsDate();    if (fechaInicio == null) {      errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));    } else {      if (!DateUtils.isDate(form.getFechaInicio())) {        errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));      }    }  } catch (  Exception e) {    errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));  }  Date fechaFin=null;  try {    fechaFin=form.getFechaFinAsDate();    if (fechaFin == null) {      errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));    } else {      if (!DateUtils.isDate(form.getFechaFin())) {        errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));      }    }  } catch (  Exception e) {    errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));  }  if (fechaFin != null) {    if (fechaFin.compareTo(new Date()) > 0)     errores.add(Constants.ERROR_DATE_AFTER_TODAY,new ActionError(Constants.ERROR_DATE_AFTER_TODAY,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale()))); else {      Calendar cal=Calendar.getInstance();      if (endAfterYear != null) {        cal.set(Integer.parseInt(endAfterYear),0,1,0,0,0);        if (DateUtils.isFechaMenor(fechaFin,cal.getTime()))         errores.add(Constants.ERROR_UDOCEND_TOO_EARLY,new ActionError(Constants.ERROR_UDOCEND_TOO_EARLY,endAfterYear));      }      if (endBeforeYear != null) {        cal.set(Integer.parseInt(endBeforeYear),11,31,0,0,0);        if (DateUtils.isFechaMayor(fechaFin,cal.getTime()))         errores.add(Constants.ERROR_UDOCEND_TOO_LATE,new ActionError(Constants.ERROR_UDOCEND_TOO_LATE,endBeforeYear));      }    }    if (fechaInicio != null && fechaInicio.compareTo(fechaFin) > 0)     errores.add(Constants.ERROR_INITDATE_AFTER_ENDDATE,new ActionError(Constants.ERROR_INITDATE_AFTER_ENDDATE));  }  return errores;}  }
class C{  public int findEndIndex(String blockName){  String line;  int endIndex=-1;  StringBuffer buf=new StringBuffer();  String key=null;  buf.append('<').append('/').append(blockName).append('>');  key=buf.toString();  buf=null;  for (int lineNum=0; lineNum < rawData.size(); lineNum++) {    line=rawData.get(lineNum).toString();    try {      if ((line.length() >= 3) && line.equalsIgnoreCase(key)) {        endIndex=lineNum;        break;      }    } catch (    StringIndexOutOfBoundsException e) {      System.err.print("Was looking for ");      System.err.print(key);      System.err.println(" and caught a");      System.err.print("string index out of bounds exception on line: \"");      System.err.print(line);      System.err.println("\"");      System.err.print("rawData index number: ");      System.err.println(lineNum);    }  }  return endIndex;}  }
class C{  public void addMouseMode(MapMouseMode med){  if (med != null) {    mouseModes.addElement(med);    if (mouseModes.size() == 1) {      setActive(med);    }    if (currentLayers != null) {      setupMouseModeWithLayers(med,currentLayers);    }    firePropertyChange(MouseModesProperty,null,mouseModes);  }}  }
class C{  public ClassTemplate createClassTemplate(String name,Class<?> class1){  ClassPool cp=getClassPool();  CtClass cc=cp.makeClass(name,get(class1));  return new ClassTemplate(cc,this);}  }
class C{  public Model(Node node,DirichletBayesIm bayesIm,JComponent messageAnchor){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (bayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (messageAnchor == null) {    throw new NullPointerException("Message anchor must not be null.");  }  this.bayesIm=bayesIm;  this.nodeIndex=bayesIm.getNodeIndex(node);  this.messageAnchor=messageAnchor;}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  private static URL fileToURL(File file){  String name;  try {    name=file.getCanonicalPath();  } catch (  IOException e) {    name=file.getAbsolutePath();  }  name=name.replace(File.separatorChar,'/');  if (!name.startsWith("/")) {    name="/" + name;  }  if (!file.isFile()) {    name=name + "/";  }  try {    return new URL("file","",name);  } catch (  MalformedURLException e) {    throw new IllegalArgumentException("file");  }}  }
class C{  @Override public String sendTestProbeRequest(){  RequestObject requestObject=new RequestObject(this.model.getWsdlRequestOriginal());  requestObject.setHttpHeaderMap(this.model.getOriginalRequestHeaderFields());  return this.sendRequestHttpClient(requestObject);}  }
class C{  public void initialize(Vector sharedStack){  this.treehash=new Treehash[this.heightOfTree - this.K];  for (int i=0; i < this.heightOfTree - this.K; i++) {    this.treehash[i]=new Treehash(sharedStack,i,this.digestProvider.get());  }  this.index=new int[heightOfTree];  this.AuthPath=new byte[heightOfTree][mdLength];  this.root=new byte[mdLength];  this.tailStack=new Vector();  this.heightOfNodes=new Vector();  this.isInitialized=true;  this.isFinished=false;  for (int i=0; i < heightOfTree; i++) {    this.index[i]=-1;  }  this.retain=new Vector[this.K - 1];  for (int i=0; i < K - 1; i++) {    this.retain[i]=new Vector();  }  this.indexForNextSeed=3;  this.heightOfNextSeed=0;}  }
class C{  public SystemLogger(){  super(NONE);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  Division oper=new Division();  CollectorTestSink lqSink=new CollectorTestSink();  CollectorTestSink iqSink=new CollectorTestSink();  CollectorTestSink dqSink=new CollectorTestSink();  CollectorTestSink fqSink=new CollectorTestSink();  CollectorTestSink lrSink=new CollectorTestSink();  CollectorTestSink irSink=new CollectorTestSink();  CollectorTestSink drSink=new CollectorTestSink();  CollectorTestSink frSink=new CollectorTestSink();  CollectorTestSink eSink=new CollectorTestSink();  oper.longQuotient.setSink(lqSink);  oper.integerQuotient.setSink(iqSink);  oper.doubleQuotient.setSink(dqSink);  oper.floatQuotient.setSink(fqSink);  oper.longRemainder.setSink(lrSink);  oper.doubleRemainder.setSink(drSink);  oper.floatRemainder.setSink(frSink);  oper.integerRemainder.setSink(irSink);  oper.errordata.setSink(eSink);  oper.beginWindow(0);  oper.denominator.process(5);  oper.numerator.process(11);  oper.denominator.process(0);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,lqSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,iqSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,dqSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,fqSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,lrSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,irSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,drSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,frSink.collectedTuples.size());  Assert.assertEquals("number emitted tuples",1,eSink.collectedTuples.size());  Assert.assertEquals("quotient is",new Long(2),lqSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",2,iqSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",2.2,dqSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",new Float(2.2),fqSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",new Long(1),lrSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",1,irSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",1.0,drSink.collectedTuples.get(0));  Assert.assertEquals("quotient is",new Float(1.0),frSink.collectedTuples.get(0));}  }
class C{  public SassString(String value,boolean quoted,char quote){  this.value=value;  this.quoted=quoted;  this.quote=quote;}  }
class C{  public T item(){  return item;}  }
class C{  public Meeting(String alias){  this(alias,MEETING);}  }
class C{  public void read(ByteBuffer f) throws IOException {  keyOffset=readUHalf(f);  unknown1=readUByte(f);  dataType=readUByte(f);  dataSize=readUWord(f);  dataSizePadded=readUWord(f);  valueOffset=readUWord(f);}  }
class C{  private void addInterior(Geometry geom){  if (geom instanceof LineString) {    addInterior(geom.getCoordinates());  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      addInterior(gc.getGeometryN(i));    }  }}  }
class C{  public static InputStream decompress(InputStream compressed) throws FitsException {  BufferedInputStream pb=new BufferedInputStream(compressed,ONE_MEGABYTE);  pb.mark(2);  int mag1=-1;  int mag2=-1;  try {    mag1=pb.read();    mag2=pb.read();    pb.reset();    ICompressProvider selectedProvider=selectCompressionProvider(mag1,mag2);    if (selectedProvider != null) {      return selectedProvider.decompress(pb);    } else {      return pb;    }  } catch (  IOException e) {    throw new FitsException("Unable to analyze input stream",e);  }}  }
class C{  public Matrix4 transposeMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","transposeMatrix","missingMatrix"));  }  this.m[0]=matrix.m[0];  this.m[1]=matrix.m[4];  this.m[2]=matrix.m[8];  this.m[3]=matrix.m[12];  this.m[4]=matrix.m[1];  this.m[5]=matrix.m[5];  this.m[6]=matrix.m[9];  this.m[7]=matrix.m[13];  this.m[8]=matrix.m[2];  this.m[9]=matrix.m[6];  this.m[10]=matrix.m[10];  this.m[11]=matrix.m[14];  this.m[12]=matrix.m[3];  this.m[13]=matrix.m[7];  this.m[14]=matrix.m[11];  this.m[15]=matrix.m[15];  return this;}  }
class C{  private BufferStrategy createBufferStrategy(){  Container root=getRoot();  if (root == null) {    return null;  }  BufferStrategy bs=null;  if (SwingUtilities3.isVsyncRequested(root)) {    bs=createBufferStrategy(root,true);    if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {      LOGGER.finer("createBufferStrategy: using vsynced strategy");    }  }  if (bs == null) {    bs=createBufferStrategy(root,false);  }  if (!(bs instanceof SubRegionShowable)) {    bs=null;  }  return bs;}  }
class C{  @NotNull @ObjectiveCName("terminateSessionCommandWithId:") public Command<Void> terminateSession(int id){  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.426 -0500",hash_original_method="B6ACD9CEE83EB35E5542497C3F0CF3DF",hash_generated_method="2DDEB25DAD19BA820A67E1CF4DA49F3A") static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  public static final boolean isSmeAckNotRequested(byte registeredDeliery){  return isSmeAck(registeredDeliery,SMPPConstant.REGDEL_SME_ACK_NO);}  }
class C{  public void close(){  if (mGoogleApiClient != null)   mGoogleApiClient.disconnect();  mGoogleApiClient=null;}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  public UnsignedByte dec(){  return valueOf(getValue() - 1);}  }
class C{  public void clear() throws IOException {  this.table.clear();}  }
class C{  public static void copyPropagation(IR ir){  Register elemNext;  boolean reiterate=true;  while (reiterate) {    reiterate=false;    for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=elemNext) {      elemNext=reg.getNext();      if (reg.useList == null || reg.defList == null || !reg.isSSA()) {        continue;      }      RegisterOperand lhs=reg.defList;      Instruction defInstr=lhs.instruction;      Operand rhs;      if (defInstr.isMove()) {        rhs=Move.getVal(defInstr);      } else       if (defInstr.operator() == PHI) {        Operand phiVal=equivalentValforPHI(defInstr);        if (phiVal == null)         continue;        rhs=phiVal;      } else {        continue;      }      if (rhs.isRegister()) {        Register rrhs=rhs.asRegister().getRegister();        if (!rrhs.isSSA())         continue;        if (rrhs.isPhysical())         continue;      }      reiterate=ir.options.getOptLevel() > 1;      if (rhs.isRegister()) {        RegisterOperand nextUse;        RegisterOperand rhsRegOp=rhs.asRegister();        for (RegisterOperand use=reg.useList; use != null; use=nextUse) {          nextUse=use.getNext();          if (VM.VerifyAssertions)           VM._assert(rhsRegOp.getRegister().getType() == use.getRegister().getType());          DefUse.transferUse(use,rhsRegOp);        }      } else       if (rhs.isConstant()) {        for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {          int index=use.getIndexInInstruction();          use.instruction.putOperand(index,rhs.copy());        }      } else {        throw new OptimizingCompilerException("Simple.copyPropagation: unexpected operand type");      }      defInstr.remove();      if (rhs.isRegister()) {        DefUse.removeUse(rhs.asRegister());      }      ir.regpool.removeRegister(lhs.getRegister());    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STORE_NAME;case 2:  return SCOPE;case 3:return PERSIST;default :return null;}}  }
class C{  public Boolean isLldpSupported(){  return lldpSupported;}  }
class C{  public void writeAddrs(CCacheOutputStream cos) throws IOException {  cos.write32(addresses.length);  for (int i=0; i < addresses.length; i++) {    cos.write16(addresses[i].addrType);    cos.write32(addresses[i].address.length);    cos.write(addresses[i].address,0,addresses[i].address.length);  }}  }
class C{  private boolean _check_cancellation(){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);  if (!pref.getBoolean(SettingsFragment.KEY_PREF_BACKGROUND_CHECKS,false)) {    return true;  }  if (pref.getBoolean(SettingsFragment.KEY_PREF_WIFI_ONLY,true)) {    ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);    NetworkInfo info=connectivityManager.getActiveNetworkInfo();    if (info == null) {      Log.v(MainActivity.TAG,"Aborting automatic checks because no network is currently active.");      return true;    } else     if (info.getType() != ConnectivityManager.TYPE_WIFI) {      Log.v(MainActivity.TAG,"Aborting automatic checks over data due to user preferences.");      return true;    }  }  return false;}  }
class C{  public static String stripEscape(String pattern){  if (pattern == null)   return null;  StringBuilder stripped=new StringBuilder(pattern.length());  for (int pos=0; pos < pattern.length(); pos++) {    char ch=pattern.charAt(pos);    if (ch != '\\') {      stripped.append(ch);    } else     if (pos < pattern.length() - 1 && pattern.charAt(pos + 1) == '\\') {      stripped.append('\\');      pos+=1;    }  }  return stripped.toString();}  }
class C{  private void sendAutoFocusTriggerCaptureRequest(Object tag){  try {    CaptureRequest.Builder builder;    builder=mDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);    builder.addTarget(mPreviewSurface);    builder.set(CaptureRequest.CONTROL_MODE,CameraMetadata.CONTROL_MODE_AUTO);    mControlAFMode=CameraMetadata.CONTROL_AF_MODE_AUTO;    addBaselineCaptureKeysToRequest(builder);    builder.set(CaptureRequest.CONTROL_AF_TRIGGER,CaptureRequest.CONTROL_AF_TRIGGER_START);    builder.setTag(tag);    mCaptureSession.capture(builder.build(),mCaptureCallback,mCameraHandler);    repeatingPreview(tag);    resumeContinuousAFAfterDelay(FOCUS_HOLD_MILLIS);  } catch (  CameraAccessException ex) {    Log.e(TAG,"Could not execute preview request.",ex);  }}  }
class C{  public AnalysisSmartCacheMatch checkMatch(Universe universe,AnalysisSmartCacheRequest request){{    Map<String,HashSet<String>> sameAxes=lookup.get(request.getAxesSignature());    if (sameAxes != null) {      HashSet<String> sameFiltersCandidates=sameAxes.get(request.getFiltersSignature());      if (sameFiltersCandidates != null) {        AnalysisSmartCacheMatch match=checkMatchMany(null,request,sameFiltersCandidates);        if (match != null) {          return match;        }      }    }  }  Collection<Axis> filters=request.getAnalysis().getSelection().getFilters();  if (filters.size() > 1) {    for (    Axis filter : filters) {      AnalysisSmartCacheSignature generalize=new AnalysisSmartCacheSignature(request.getSignature(),filter);      generalize.setAxesSignature(universe);      Map<String,HashSet<String>> sameAxes=lookup.get(generalize.getAxesSignature());      if (sameAxes != null) {        HashSet<Axis> filterMinusOne=new HashSet<>(filters);        filterMinusOne.remove(filter);        String sign1=request.computeFiltersSignature(universe,new ArrayList<>(filterMinusOne));        HashSet<String> sameFiltersCandidates=sameAxes.get(sign1);        if (sameFiltersCandidates != null) {          AnalysisSmartCacheMatch match=checkMatchMany(filterMinusOne,request,sameFiltersCandidates);          if (match != null) {            try {              DashboardSelection softFilters=new DashboardSelection();              softFilters.add(filter,request.getAnalysis().getSelection().getMembers(filter));              match.addPostProcessing(new DataMatrixTransformSoftFilter(softFilters));              return match;            } catch (            ScopeException e) {            }          }        }      }    }  }  return null;}  }
class C{  public final int[] hash(final int[] vector){  double[] d=new double[vector.length];  for (int i=0; i < vector.length; i++) {    d[i]=(double)vector[i];  }  return hash(d);}  }
class C{  public SettingNotFoundException(String msg){  super(msg);}  }
class C{  public void blockMarkAsRead(boolean block){  if (DELETEDEBUG || Log.isLoggable(LogTag.APP,Log.VERBOSE)) {    LogTag.debug("blockMarkAsRead: " + block);  }  if (block != mMarkAsReadBlocked) {    mMarkAsReadBlocked=block;    if (!mMarkAsReadBlocked) {      if (mMarkAsReadWaiting) {        mMarkAsReadWaiting=false;        markAsRead();      }    }  }}  }
class C{  public static TypeNameMatch createTypeNameMatch(IType type,int modifiers){  return BasicSearchEngine.createTypeNameMatch(type,modifiers);}  }
class C{  public static NodeVersion readFrom(final Deserializer deserializer,final String label){  final String versionString=deserializer.readString(label);  return NodeVersion.parse(versionString);}  }
class C{  public void configureHandler(GitLineHandler h,int editorNo){  h.setEnvironment(GitCommand.GIT_EDITOR_ENV,getEditorCommand());  h.setEnvironment(GitRebaseEditorMain.IDEA_REBASE_HANDER_NO,Integer.toString(editorNo));}  }
class C{  public boolean isMult(){  return m_isMult;}  }
class C{  private void checkEventNodeIdsStrict(String cClsName,UUID... ids){  if (ids == null)   assertTrue(evts.isEmpty()); else {    assertEquals(ids.length,evts.size());    for (    UUID id : ids) {      CacheEvent foundEvt=null;      for (      CacheEvent evt : evts) {        if (F.eq(id,evt.node().id())) {          assertEquals(cClsName,evt.closureClassName());          foundEvt=evt;          break;        }      }      if (foundEvt == null) {        int gridIdx=-1;        for (int i=0; i < GRID_CNT; i++) {          if (F.eq(this.ids[i],id)) {            gridIdx=i;            break;          }        }        fail("Expected transform event was not triggered on the node [nodeId=" + id + ", key1Primary="+ primary(gridIdx,key1)+ ", key1Backup="+ backup(gridIdx,key1)+ ", key2Primary="+ primary(gridIdx,key2)+ ", key2Backup="+ backup(gridIdx,key2)+ ']');      } else       evts.remove(foundEvt);    }  }}  }
class C{  public static double[] toDoubleArray(Short[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue();  }  return result;}  }
class C{  protected ReferencingElement_IMImpl(){  super();}  }
class C{  public <RO,Entity>Set<RO> map(final Set<Entity> objects,final Class<RO> ro,final Class<Entity> entity){  final Set<RO> ros=new HashSet<RO>();  if (objects != null) {    DTOAssembler.newAssembler(ro,entity).assembleDtos(ros,objects,adaptersRepository.getAll(),dtoFactory);  }  return ros;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private String errorMessage(String explanation){  String out="Error extracting zip file " + archive.getAbsolutePath() + " into directory "+ targetDir.getAbsolutePath();  if (explanation != null) {    out+=". " + explanation;  }  return out;}  }
class C{  public void removeMouseMode(MapMouseMode med){  boolean needToAdjustActiveMode=false;  if (med == null) {    return;  }  if (med.equals(activeMouseMode)) {    needToAdjustActiveMode=true;    setInactive(med);  }  for (  MapMouseMode checkMM : mouseModes) {    if (med.equals(checkMM)) {      med.removeAllMapMouseListeners();    } else     if (needToAdjustActiveMode) {      setActive(checkMM);      needToAdjustActiveMode=false;    }  }  mouseModes.remove(med);  firePropertyChange(MouseModesProperty,null,mouseModes);}  }
class C{  public NotFilter(PacketFilter filter){  if (filter == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  this.filter=filter;}  }
class C{  public void decreaseTimer(int time){  if (timer - time > 0) {    timer-=time;  } else {    timer=0;  }}  }
class C{  private static Map<String,Object> storePaymentApplication(Delegator delegator,GenericValue paymentApplication,Locale locale){  Map<String,Object> results=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingSuccessful",locale));  boolean debug=true;  if (debug)   Debug.logInfo("Start updating the paymentApplication table ",module);  if (DECIMALS == -1 || ROUNDING == -1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingAritmeticPropertiesNotConfigured",locale));  }  List<GenericValue> checkAppls=null;  try {    checkAppls=EntityQuery.use(delegator).from("PaymentApplication").where("invoiceId",paymentApplication.get("invoiceId"),"invoiceItemSeqId",paymentApplication.get("invoiceItemSeqId"),"billingAccountId",paymentApplication.get("billingAccountId"),"paymentId",paymentApplication.get("paymentId"),"toPaymentId",paymentApplication.get("toPaymentId"),"taxAuthGeoId",paymentApplication.get("taxAuthGeoId")).queryList();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(e.getMessage());  }  if (checkAppls.size() > 0) {    if (debug)     Debug.logInfo(checkAppls.size() + " records already exist",module);    GenericValue checkAppl=checkAppls.get(0);    if (paymentApplication.get("paymentApplicationId") == null) {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied").add(checkAppl.getBigDecimal("amountApplied")).setScale(DECIMALS,ROUNDING));      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else     if (paymentApplication.getString("paymentApplicationId").equals(checkAppl.getString("paymentApplicationId"))) {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied"));      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied").add(checkAppl.getBigDecimal("amountApplied")).setScale(DECIMALS,ROUNDING));      if (debug)       Debug.logInfo("Delete paymentApplication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.remove();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    }  } else {    if (debug)     Debug.logInfo("No records found with paymentId,invoiceid..etc probaly changed one of them...",module);    if (paymentApplication.get("paymentApplicationId") == null) {      paymentApplication.set("paymentApplicationId",delegator.getNextSeqId("PaymentApplication"));      if (debug)       Debug.logInfo("Create new paymentAppication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.create();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else {      if (debug)       Debug.logInfo("Update existing paymentApplication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    }  }  return results;}  }
class C{  public static LaggedEdge serializableInstance(){  return new LaggedEdge("X",LaggedFactor.serializableInstance());}  }
class C{  public void testDummy() throws Exception {}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  public JSONNode addNull(String name){  return add(name,null,NodeType.PRIMITIVE);}  }
class C{  public boolean commitChanges(){  spikeResponderPanel.commitChanges(synapseList);  return true;}  }
class C{  public static String removeLineBreaks(String msg){  StringBuilder result=new StringBuilder(msg.length());  RaptorStringTokenizer tok=new RaptorStringTokenizer(msg,"\n\\ ",true);  if (tok.hasMoreTokens()) {    result.append(tok.nextToken());  }  while (tok.hasMoreTokens()) {    result.append(" ").append(tok.nextToken());  }  return result.toString();}  }
class C{  public boolean isMinXSet(int scale){  return mMinX[scale] != MathHelper.NULL_VALUE;}  }
class C{  protected boolean shouldIgnorePrefixErrorAt(@NotNull FileViewProvider viewProvider,int offset){  PsiElement element=viewProvider.findElementAt(offset,viewProvider.getBaseLanguage());  if (element instanceof PsiWhiteSpace) {    element=element.getNextSibling();  }  return (element != null && myTemplateExpressionStartTokens.contains(element.getNode().getElementType()));}  }
class C{  boolean enableProcessBtn(){  if (artifactUploadState.getNumberOfFilesActuallyUpload().intValue() >= artifactUploadState.getNumberOfFileUploadsExpected().intValue() && !getFileSelected().isEmpty()) {    processBtn.setEnabled(true);    artifactUploadState.getNumberOfFilesActuallyUpload().set(0);    artifactUploadState.getNumberOfFileUploadsExpected().set(0);    return true;  }  return false;}  }
class C{  protected void dtdHandler(Document document) throws SAXException {}  }
class C{  public NoSupportForMissingValuesException(String message){  super(message);}  }
class C{  void dumpAssociationTables(){  Enumeration associations=m_patternTable.elements();  while (associations.hasMoreElements()) {    TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();    while (null != head) {      System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");      head=head.getNext();    }    System.out.println("\n.....");  }  TemplateSubPatternAssociation head=m_wildCardPatterns;  System.out.print("wild card list: ");  while (null != head) {    System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");    head=head.getNext();  }  System.out.println("\n.....");}  }
class C{  public MD2(){  super("MD2",16,16);  X=new int[48];  C=new int[16];  cBytes=new byte[16];}  }
class C{  public void testFileNameInStackTrace(){  testFileNameInStackTrace("groovyErrorMsg","\\(embedded_script_in_.*GroovyTest_dot_xml");  testFileNameInStackTrace("groovyErrorMsg_ExternalFile","GroovyTest_errorMessage.groovy");}  }
class C{  public synchronized void addSeries(int index,XYSeries series){  mSeries.add(index,series);}  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  public CASHInterval(double[] min,double[] max,CASHIntervalSplit split,ModifiableDBIDs ids,int maxSplitDimension,int level,double d_min,double d_max){  super(min,max);  this.intervalID=++ID;  this.split=split;  this.ids=ids;  this.maxSplitDimension=maxSplitDimension;  this.level=level;  this.d_min=d_min;  this.d_max=d_max;}  }
class C{  protected boolean isBlockedLink(Link l){  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  return (isBlockedPort(n1) || isBlockedPort(n2));}  }
class C{  @Override public void invalidateDrawable(Drawable who){  invalidateSelf();}  }
class C{  public boolean removeElement(Node s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s)) {      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);      m_firstFree--;      m_map[m_firstFree]=null;      return true;    }  }  return false;}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public static @CheckForNull BugInstance findBugInstanceForMarker(IMarker marker){  BugCollectionAndInstance bci=findBugCollectionAndInstanceForMarker(marker);  if (bci == null) {    return null;  }  return bci.bugInstance;}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities.isLeftMouseButton(e) || (SwingUtilities.isRightMouseButton(e) && !model.isPressed())) {    buttonOn(e);  } else   if (SwingUtilities.isRightMouseButton(e) && model.isPressed()) {    buttonOff(e);  }}  }
class C{  public static Parser<Character,String> regex(String regex){  final Pattern pattern=Pattern.compile(regex);  return null;}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public static void add(Object spy){  SPIES.add(spy);}  }
class C{  public ComputationException(@Nullable Throwable cause){  super(cause);}  }
class C{  public Contains(){  super("text_information.contains");}  }
class C{  private void fillList(Node node){  if (node == mRootNode) {    mSearchNodes=new ArrayList<Node>();  } else {    if ((mTagName == null) || node.getNodeName().equals(mTagName)) {      mSearchNodes.add(node);    }  }  node=node.getFirstChild();  while (node != null) {    if (mDeepSearch) {      fillList(node);    } else {      if ((mTagName == null) || node.getNodeName().equals(mTagName)) {        mSearchNodes.add(node);      }    }    node=node.getNextSibling();  }}  }
class C{  public ScriptBuilder smallNum(int index,int num){  checkArgument(num >= 0,"Cannot encode negative numbers with smallNum");  checkArgument(num <= 16,"Cannot encode numbers larger than 16 with smallNum");  return addChunk(index,new ScriptChunk(Script.encodeToOpN(num),null));}  }
class C{  public OracleException(Throwable cause){  this(cause,UNKNOWN_ERROR_CODE);}  }
class C{  public int numChildred(){  return m_children.size();}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,double angle,OrbitDirection direction){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mDirection=direction;  mAngle=angle;}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  public final void writeChars(String s){  if (this.overflowBuf != null) {    this.overflowBuf.writeChars(s);    return;  }  int len=s.length();  int offset=0;  while (len > 0) {    int remainingCharSpace=(this.buffer.capacity() - this.buffer.position()) / 2;    if (remainingCharSpace == 0) {      realFlush(false);      if (this.overflowBuf != null) {        this.overflowBuf.writeChars(s.substring(offset));        return;      }    } else {      int chunkSize=remainingCharSpace;      if (len < chunkSize) {        chunkSize=len;      }      for (int i=0; i < chunkSize; i++) {        this.buffer.putChar(s.charAt(offset + i));      }      offset+=chunkSize;      len-=chunkSize;    }  }}  }
class C{  public static <E>Collection<E> constrainedCollection(Collection<E> collection,Constraint<? super E> constraint){  return new ConstrainedCollection<E>(collection,constraint);}  }
class C{  public void clear(){  number=0;  for (int i=0; i < dots.length; i++)   dots[i].setSelected(false);}  }
class C{  SafeIdentifierMaker(char[] alphabet){  this.alphabet=alphabet;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void shutdownAndWait(){  closeExecutors();  try {    mReadExecutorService.awaitTermination(SpeedTestConst.THREADPOOL_WAIT_COMPLETION_MS,TimeUnit.MILLISECONDS);    mWriteExecutorService.awaitTermination(SpeedTestConst.THREADPOOL_WAIT_COMPLETION_MS,TimeUnit.MILLISECONDS);    mReportExecutorService.awaitTermination(SpeedTestConst.THREADPOOL_WAIT_COMPLETION_MS,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {  }}  }
class C{  public boolean remove(Comparator c){  for (int i=0; i < m_size; ++i) {    if (m_cmp[i].equals(c)) {      System.arraycopy(m_cmp,i + 1,m_cmp,i,m_size - i);      --m_size;      return true;    }  }  return false;}  }
class C{  public MetalinkFileBuilder addFile(String name){  MetalinkFileBuilder newFile=new MetalinkFileBuilder(name);  files.add(newFile);  return newFile;}  }
class C{  public boolean exists(String file){  return Util.getImplementation().exists(file);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION:    return expression != null;case N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION:  return trueExpression != null;case N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION:return falseExpression != null;}return super.eIsSet(featureID);}  }
class C{  public static void respond(final HttpServletRequest header,final Switchboard sb,final OutputStream out){  String clientip=header.getRemoteAddr();  if (clientip == null)   clientip="<unknown>";  String userAgent=header.getHeader(HeaderFramework.USER_AGENT);  if (userAgent == null)   userAgent="<unknown>";  sb.peers.peerActions.setUserAgent(clientip,userAgent);  boolean authenticated=header.isUserInRole(UserDB.AccessRight.ADMIN_RIGHT.toString());  serverObjects post=new serverObjects();  post.put(CommonParams.Q,"");  post.put("num","0");  Map<String,String[]> map=header.getParameterMap();  Iterator<Map.Entry<String,String[]>> it=map.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,String[]> param=it.next();    post.put(param.getKey(),param.getValue());  }  ConcurrentLog.info("GSA Query",post.toString());  sb.intermissionAllThreads(3000);  String originalQuery=post.get(CommonParams.Q,"");  post.put("originalQuery",originalQuery);  QueryGoal qg=new QueryGoal(originalQuery);  List<String> solrFQ=qg.collectionTextFilterQuery(false);  StringBuilder solrQ=qg.collectionTextQuery();  post.put("defType","edismax");  for (  String fq : solrFQ)   post.add(CommonParams.FQ,fq);  post.put(CommonParams.Q,solrQ.toString());  post.put(CommonParams.ROWS,post.remove("num"));  post.put(CommonParams.ROWS,Math.min(post.getInt(CommonParams.ROWS,10),(authenticated) ? 100000000 : 100));  final Ranking ranking=sb.index.fulltext().getDefaultConfiguration().getRanking(0);  final String qf=ranking.getQueryFields();  if (!qf.isEmpty())   post.put(DisMaxParams.QF,qf);  if (post.containsKey(CommonParams.SORT)) {    GSAResponseWriter.Sort sort=new GSAResponseWriter.Sort(post.get(CommonParams.SORT,""));    String sorts=sort.toSolr();    if (sorts == null) {      post.remove(CommonParams.SORT);    } else {      post.put(CommonParams.SORT,sorts);    }  } else {    String fq=ranking.getFilterQuery();    String bq=ranking.getBoostQuery();    String bf=ranking.getBoostFunction();    if (fq.length() > 0)     post.put(CommonParams.FQ,fq);    if (bq.length() > 0)     post.put(DisMaxParams.BQ,bq);    if (bf.length() > 0)     post.put("boost",bf);  }  String daterange[]=post.remove("daterange");  if (daterange != null) {    String origfq=post.get(CommonParams.FQ);    String datefq="";    for (    String dr : daterange) {      String from_to[]=dr.endsWith("..") ? new String[]{dr.substring(0,dr.length() - 2),""} : dr.startsWith("..") ? new String[]{"",dr.substring(2)} : dr.split("\\.\\.");      if (from_to.length != 2)       continue;      Date from=HeaderFramework.parseGSAFS(from_to[0]);      if (from == null)       from=new Date(0);      Date to=HeaderFramework.parseGSAFS(from_to[1]);      if (to == null)       to=new Date();      to.setTime(to.getTime() + 24L * 60L * 60L* 1000L);      String z=CollectionSchema.last_modified.getSolrFieldName() + ":[" + ISO8601Formatter.FORMATTER.format(from)+ " TO "+ ISO8601Formatter.FORMATTER.format(to)+ "]";      datefq=datefq.length() == 0 ? z : " OR " + z;    }    if (datefq.length() > 0)     post.put(CommonParams.FQ,origfq == null || origfq.length() == 0 ? datefq : "(" + origfq + ") AND ("+ datefq+ ")");  }  post.put(CommonParams.FL,CollectionSchema.content_type.getSolrFieldName() + ',' + CollectionSchema.id.getSolrFieldName()+ ','+ CollectionSchema.sku.getSolrFieldName()+ ','+ CollectionSchema.title.getSolrFieldName()+ ','+ CollectionSchema.description_txt.getSolrFieldName()+ ','+ CollectionSchema.load_date_dt.getSolrFieldName()+ ','+ CollectionSchema.last_modified.getSolrFieldName()+ ','+ CollectionSchema.size_i.getSolrFieldName());  post.put("hl","true");  post.put("hl.q",originalQuery);  post.put("hl.fl",CollectionSchema.description_txt + "," + CollectionSchema.h4_txt.getSolrFieldName()+ ","+ CollectionSchema.h3_txt.getSolrFieldName()+ ","+ CollectionSchema.h2_txt.getSolrFieldName()+ ","+ CollectionSchema.h1_txt.getSolrFieldName()+ ","+ CollectionSchema.text_t.getSolrFieldName());  post.put("hl.alternateField",CollectionSchema.description_txt.getSolrFieldName());  post.put("hl.simple.pre","<b>");  post.put("hl.simple.post","</b>");  post.put("hl.fragsize",Integer.toString(SearchEvent.SNIPPET_MAX_LENGTH));  String[] site=post.remove("site");  if (site != null && site[0].length() > 0) {    String origfq=post.get(CommonParams.FQ);    String sitefq=QueryModifier.parseCollectionExpression(site[0]);    post.put(CommonParams.FQ,origfq == null || origfq.length() == 0 ? sitefq : "(" + origfq + ") AND ("+ sitefq+ ")");  }  EmbeddedSolrConnector connector=sb.index.fulltext().getDefaultEmbeddedConnector();  if (connector == null)   return;  SolrQueryRequest req=connector.request(post.toSolrParams(null));  SolrQueryResponse response=null;  Exception e=null;  try {    response=connector.query(req);  } catch (  final SolrException ee) {    e=ee;  }  if (response != null)   e=response.getException();  if (e != null) {    ConcurrentLog.logException(e);    if (req != null)     req.close();    SolrRequestInfo.clearRequestInfo();    return;  }  Writer ow=new FastWriter(new OutputStreamWriter(out,StandardCharsets.UTF_8));  try {    responseWriter.write(ow,req,response);    ow.flush();  } catch (  final IOException e1) {  } finally {    req.close();    SolrRequestInfo.clearRequestInfo();    try {      ow.close();    } catch (    final IOException e1) {    }  }  Object rv=response.getValues().get("response");  int matches=0;  if (rv != null && rv instanceof ResultContext) {    matches=((ResultContext)rv).docs.matches();  } else   if (rv != null && rv instanceof SolrDocumentList) {    matches=(int)((SolrDocumentList)rv).getNumFound();  }  AccessTracker.addToDump(originalQuery,Integer.toString(matches));  ConcurrentLog.info("GSA Query","results: " + matches + ", for query:"+ post.toString());}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:48.166 -0500",hash_original_method="DFEA7962E8FE3DE66D00681F9A6D11E3",hash_generated_method="D4A582748A1256222F0353A380EFF1E4") protected String method() throws ParseException {  try {    if (debug)     dbg_enter("method");    Token[] tokens=this.lexer.peekNextToken(1);    Token token=(Token)tokens[0];    if (token.getTokenType() == INVITE || token.getTokenType() == ACK || token.getTokenType() == OPTIONS || token.getTokenType() == BYE || token.getTokenType() == REGISTER || token.getTokenType() == CANCEL || token.getTokenType() == SUBSCRIBE || token.getTokenType() == NOTIFY || token.getTokenType() == PUBLISH || token.getTokenType() == MESSAGE || token.getTokenType() == ID) {      lexer.consume();      return token.getTokenValue();    } else {      throw createParseException("Invalid Method");    }  }  finally {    if (Debug.debug)     dbg_leave("method");  }}  }
class C{  public void clearColumns(){  m_tableColumns.clear();  columnAttributesMap.clear();  hiddenColumns.clear();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private String restoreNBTTags(String str,ArrayList<String> nbttags){  int nbtidx=1;  for (  String capture : nbttags) {    str=str.replace("NBT" + nbtidx++,capture);  }  return str;}  }
class C{  public Object pop(){  Object val=m_map[--m_firstFree];  m_map[m_firstFree]=null;  return val;}  }
class C{  private void disposeEncoder(IoSession session){  ProtocolEncoder encoder=(ProtocolEncoder)session.removeAttribute(ENCODER);  if (encoder == null) {    return;  }  try {    encoder.dispose(session);  } catch (  Exception e) {    LOGGER.warn("Failed to dispose: " + encoder.getClass().getName() + " ("+ encoder+ ')');  }}  }
class C{  protected CordovaWebViewClient makeWebViewClient(CordovaWebView webView){  return webView.makeWebViewClient(this);}  }
class C{  void doDelete(NamedBean bean){  super.doDelete(bean);}  }
class C{  Prepared parse(String sql){  Prepared p;  try {    p=parse(sql,false);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.SYNTAX_ERROR_1) {      p=parse(sql,true);    } else {      throw e.addSQL(sql);    }  }  p.setPrepareAlways(recompileAlways);  p.setParameterList(parameters);  return p;}  }
class C{  public void testToStringPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-500";  BigDecimal aNumber=new BigDecimal(a);  String result="1.2380964839238475457356735674573563567890295784902768787678287E-468";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  public final void println(char[] buf,int offset,int length) throws IOException {  print(buf,offset,length);  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  public TechnicalServiceActiveException(){}  }
class C{  public static int equalsOneIgnoreCase(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    if (src.equalsIgnoreCase(dest[i])) {      return i;    }  }  return -1;}  }
class C{  public Red5(IConnection conn){  this.conn=conn;}  }
class C{  public FastCharBuffer(){  this.minChunkLen=1024;}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mAdapter != null && mObserver != null) {    mObserver.onChanged();  }}  }
class C{  @Inline @Entrypoint public static void objectStaticWrite(Object value,Offset offset,int locationMetadata){  if (NEEDS_OBJECT_GC_PUTSTATIC_BARRIER) {    ObjectReference src=ObjectReference.fromObject(Magic.getJTOC());    Selected.Mutator.get().objectReferenceNonHeapWrite(src.toAddress().plus(offset),ObjectReference.fromObject(value),offset.toWord(),Word.fromIntZeroExtend(locationMetadata));  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void ensureCapacity(int desiredLongCount){  if (desiredLongCount <= bits.length) {    return;  }  int newLength=Math.max(desiredLongCount,bits.length * 2);  long[] newBits=new long[newLength];  System.arraycopy(bits,0,newBits,0,longCount);  this.bits=newBits;}  }
class C{  public boolean toFail(){  LifecycleState state;synchronized (this) {    state=_state;    if (state.isAfterDestroying()) {      return false;    }    _state=FAILED;    _lastChangeTime=CurrentTime.currentTime();  }  if (_log != null && _log.isLoggable(_level))   _log.log(_level,"fail " + _name);  notifyListeners(state,FAILED);  _failCount++;  return true;}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public InReplyToHeader createInReplyToHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null callId arg");  InReplyTo inReplyTo=new InReplyTo();  inReplyTo.setCallId(callId);  return inReplyTo;}  }
class C{  public final LC maxHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),null,null,ConstraintParser.parseUnitValue(height,false)));  return this;}  }
class C{  @RequestMapping(value=ApiUrl.CITIZEN_UPDATE_PROFILE,method=RequestMethod.PUT,consumes={"application/json"}) public ResponseEntity<String> updateProfile(@RequestBody final JSONObject citizen){  final ApiResponse res=ApiResponse.newInstance();  try {    final Citizen citizenUpdate=citizenService.getCitizenByUserName(citizen.get("userName").toString());    citizenUpdate.setName(citizen.get("name").toString());    citizenUpdate.setGender(Gender.valueOf(citizen.get("gender").toString()));    if (citizen.get("emailId") != null)     citizenUpdate.setEmailId(citizen.get("emailId").toString());    if (citizen.get("altContactNumber") != null)     citizenUpdate.setAltContactNumber(citizen.get("altContactNumber").toString());    final DateTimeFormatter ft=DateTimeFormat.forPattern("yyyy-MM-dd");    final Date dt=ft.parseDateTime(citizen.get("dob").toString()).toDate();    citizenUpdate.setDob(dt);    if (citizen.get("pan") != null)     citizenUpdate.setPan(citizen.get("pan").toString());    if (citizen.get("aadhaarNumber") != null)     citizenUpdate.setAadhaarNumber(citizen.get("aadhaarNumber").toString());    citizenService.update(citizenUpdate);    return res.setDataAdapter(new UserAdapter()).success(citizen,getMessage("msg.citizen.update.success"));  } catch (  final Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return ApiResponse.newInstance().error(getMessage("server.error"));  }}  }
class C{  public void unlinkTrigger(BigInteger alertId,BigInteger notificationId,BigInteger triggerId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications/"+ notificationId.toString()+ "/triggers/"+ triggerId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public static double cauchy(){  return Math.tan(Math.PI * (uniform() - 0.5));}  }
class C{  public AnalogChebyshevI(int order,double epsilon){  super();  double alpha=(1.0 + Math.sqrt(1.0 + epsilon * epsilon)) / epsilon;  double p=Math.pow(alpha,1.0 / order);  double a=0.5 * (p - 1 / p);  double b=0.5 * (p + 1 / p);  System.out.println("alpha: " + alpha);  System.out.println("p:     " + p);  System.out.println("a:     " + a);  System.out.println("b:     " + b);  int nRealPoles=order - 2 * (order / 2);  int nComplexPolePairs=order / 2;  int nPoles=nRealPoles + 2 * nComplexPolePairs;  if (nRealPoles == 1) {    double[] td={a,1.0};    addSection(new Rational(new Polynomial(1.0),new Polynomial(td)));  }  double dAngle=Math.PI / nPoles;  for (int i=0; i < nComplexPolePairs; i++) {    double angle=-Math.PI / 2 + dAngle / 2 * (1 + nRealPoles) + i * dAngle;    Complex pole=new Complex(a * Math.sin(angle),b * Math.cos(angle));    double[] td={pole.real() * pole.real() + pole.imag() * pole.imag(),-2 * pole.real(),1.0};    addSection(new Rational(new Polynomial(1.0),new Polynomial(td)));  }  sections.get(0).timesEquals(1.0 / (Math.pow(2.0,order - 1) * epsilon));}  }
class C{  private void updateUi(){  if (!mSession.isAlive()) {    Log.e(LOG_TAG,"updateUi : the session is not anymore valid");    return;  }  if (null != mMemberNameTextView) {    if ((null != mRoomMember) && !TextUtils.isEmpty(mRoomMember.displayname)) {      mMemberNameTextView.setText(mRoomMember.displayname);    } else {      User user=mSession.getDataHandler().getStore().getUser(mMemberId);      if ((null != user) && !TextUtils.isEmpty(user.displayname)) {        mMemberNameTextView.setText(user.displayname);      } else {        mMemberNameTextView.setText(mMemberId);      }    }    setTitle("");  }  enableProgressBarView(CommonActivityUtils.UTILS_HIDE_PROGRESS_BAR);  updateMemberAvatarUi();  updatePresenceInfoUi();  updateAdapterListViewItems();  if (null != mListViewAdapter) {    mListViewAdapter.notifyDataSetChanged();  }}  }
class C{  @Override public int compareTo(Utf8InfoReplacement rhs){  return ref.index - rhs.ref.index;}  }
class C{  public static ZipFileIndexCache instance(Context context){  ZipFileIndexCache instance=context.get(ZipFileIndexCache.class);  if (instance == null)   context.put(ZipFileIndexCache.class,instance=new ZipFileIndexCache());  return instance;}  }
class C{  public CloudBreakpointHandler(@NotNull CloudDebugProcess process,ServerToIdeFileResolver fileResolver){  super(CloudLineBreakpointType.class);  this.process=process;  setPsiManager(PsiManager.getInstance(this.process.getXDebugSession().getProject()));  this.fileResolver=fileResolver;}  }
class C{  protected Button createNodeComponent(Object node,int depth){  Button cmp=new Button(childToDisplayLabel(node));  cmp.setUIID("TreeNode");  if (model.isLeaf(node)) {    if (nodeImage == null) {      FontImage.setMaterialIcon(cmp,FontImage.MATERIAL_DESCRIPTION,3);    } else {      cmp.setIcon(nodeImage);    }  } else {    if (folder == null) {      FontImage.setMaterialIcon(cmp,FontImage.MATERIAL_FOLDER,3);    } else {      cmp.setIcon(folder);    }  }  updateNodeComponentStyle(cmp.getSelectedStyle(),depth);  updateNodeComponentStyle(cmp.getUnselectedStyle(),depth);  updateNodeComponentStyle(cmp.getPressedStyle(),depth);  return cmp;}  }
class C{  public Skein256(){  super();}  }
class C{  public static boolean isBelow(Coordinate c0,Coordinate c1,Coordinate c2){  return isLeftOfLine(c0,c2,c1) > 0;}  }
class C{  public boolean isIncludeNullsSalesRegion(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsSalesRegion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public InvalidityDateExtension(Date date) throws IOException {  this(false,date);}  }
class C{  public void testEntrySetSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  Iterator<Entry<String,String>> iterator=map.entrySet().iterator();  Entry<String,String> entryA=iterator.next();  assertEquals("a",entryA.setValue("x"));  assertEquals("x",entryA.getValue());  assertEquals("x",map.get("A"));  Entry<String,String> entryB=iterator.next();  assertEquals("b",entryB.setValue("y"));  Entry<String,String> entryC=iterator.next();  assertEquals("c",entryC.setValue("z"));  assertEquals("y",entryB.getValue());  assertEquals("y",map.get("B"));  assertEquals("z",entryC.getValue());  assertEquals("z",map.get("C"));}  }
class C{  public AlgorithmListPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  public boolean isAdvancedRoutingEnabled(){  return enableAdvancedRouting;}  }
class C{  protected Set<AnnotationMirror> findTops(Map<AnnotationMirror,Set<AnnotationMirror>> supertypes){  Set<AnnotationMirror> possibleTops=AnnotationUtils.createAnnotationSet();  for (  AnnotationMirror anno : supertypes.keySet()) {    if (supertypes.get(anno).isEmpty()) {      possibleTops.add(anno);    }  }  return possibleTops;}  }
class C{  public void itemStateChanged(ItemEvent e){  if (e.getStateChange() == ItemEvent.SELECTED) {    this.portfolio=(Portfolio)((DAOPortfolio)e.getItem()).getObject();  }}  }
class C{  public void verifyValidityAndStatus(OCSPResp response,X509Certificate subject,X509Certificate issuer) throws Exception {  verifyValidityAndStatus(response,subject,issuer,new Date());}  }
class C{  public static String capitalizeFirstLetter(String data){  char firstLetter=Character.toTitleCase(data.substring(0,1).charAt(0));  String restLetters=data.substring(1);  return firstLetter + restLetters;}  }
class C{  public SVG12ScriptingEnvironment(BridgeContext ctx){  super(ctx);}  }
class C{  private void goToMaster(){  if (logger.isDebugEnabled()) {    logger.debug("Transitioning to MASTER role");  }  cntTransitionToMaster.increment();  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      cntDevicesFromStore.increment();      for (      SyncEntity se : storedDevice.getEntities()) {        learnDeviceByEntity(se.asEntity());      }    }  }  finally {    if (iter != null)     iter.close();  }  storeConsolidateTask.reschedule(initialSyncStoreConsolidateMs,TimeUnit.MILLISECONDS);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeInt(DBIDUtil.asInteger(routingObjectID));  out.writeDouble(parentDistance);  out.writeDouble(coveringRadius);}  }
class C{  private AuthenticatedUser updateAuthenticatedUser(AuthenticatedUser authenticatedUser,Credentials credentials) throws GuacamoleException {  AuthenticationProvider authProvider=authenticatedUser.getAuthenticationProvider();  authenticatedUser=authProvider.updateAuthenticatedUser(authenticatedUser,credentials);  if (authenticatedUser == null)   throw new GuacamoleSecurityException("User re-authentication failed.");  return authenticatedUser;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  VostroDataset clone=(VostroDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public ConsulTopologyFraction url(URL url){  this.url=url;  return this;}  }
class C{  private Attraction findAttraction(String attractionName){  for (  Map.Entry<String,List<Attraction>> attractionsList : ATTRACTIONS.entrySet()) {    List<Attraction> attractions=attractionsList.getValue();    for (    Attraction attraction : attractions) {      if (attractionName.equals(attraction.name)) {        return attraction;      }    }  }  return null;}  }
class C{  protected void determineSize(){  if ((this.isMinimized() || this.isAnimating()) && this.minimizedSize != null) {    this.activeSize=this.minimizedSize;  } else {    this.activeSize=this.maximizedSize;  }}  }
class C{  private int keepSpriteOnMapY(Sprite sprite,int sy){  sy=Math.max(sy,0);  if (wh != 0) {    sy=Math.min(sy,Math.max(getHeight() + svy,convertWorldYToScaledScreen(wh)) - sprite.getHeight());  }  return sy;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.842 -0500",hash_original_method="3AFE1BBA347326120AD78BEE94F7B2A6",hash_generated_method="3AFE1BBA347326120AD78BEE94F7B2A6") void stopAnimation(){  mAnimation=null;  mTransformation=null;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  public boolean isExpired(DrawContext dc){  return dc != null ? timer.isExpired(dc) : timer.isExpired(System.currentTimeMillis());}  }
class C{  public String parseToRegex(){  if (regex == null) {    regex=new StringBuilder("^");    parseGlob();    regex.append('$');  }  return regex.toString();}  }
class C{  public GridExpandedStyle(){  internalStyleId(GRID_STYLE);}  }
class C{  public byte[] serialize(final V val,final DataOutputBuffer out,final ByteArrayBuffer tmp){  serialize2(val,out,tmp);  return out.toByteArray();}  }
class C{  public final int size(){  return current_item + 1;}  }
class C{  public NotificationChain basicSetStatement(Statement newStatement,NotificationChain msgs){  Statement oldStatement=statement;  statement=newStatement;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.WITH_STATEMENT__STATEMENT,oldStatement,newStatement);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isMovementActive(){  return this.movement.isActive();}  }
class C{  @Override public String toString(){  return toJSONString();}  }
class C{  public PolynomialGF2mSmallM(GF2mField field,int[] coeffs){  this.field=field;  coefficients=normalForm(coeffs);  computeDegree();}  }
class C{  @Override protected double calculateBarW0(CategoryPlot plot,PlotOrientation orientation,Rectangle2D dataArea,CategoryAxis domainAxis,CategoryItemRendererState state,int row,int column){  double space;  if (orientation == PlotOrientation.HORIZONTAL) {    space=dataArea.getHeight();  } else {    space=dataArea.getWidth();  }  double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  int groupCount=this.seriesToGroupMap.getGroupCount();  int groupIndex=this.seriesToGroupMap.getGroupIndex(this.seriesToGroupMap.getGroup(plot.getDataset(plot.getIndexOf(this)).getRowKey(row)));  int categoryCount=getColumnCount();  if (groupCount > 1) {    double groupGap=space * getItemMargin() / (categoryCount * (groupCount - 1));    double groupW=calculateSeriesWidth(space,domainAxis,categoryCount,groupCount);    barW0=barW0 + groupIndex * (groupW + groupGap) + (groupW / 2.0) - (state.getBarWidth() / 2.0);  } else {    barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  }  return barW0;}  }
class C{  public MarketingPermissionNotFoundException(){}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  public WFPopupItem(String title,MWFNodeNext line){  super(title);  m_line=line;}  }
class C{  protected void protectedMethod(){}  }
class C{  public void computeOverlaps(MonotoneChain mc,MonotoneChainOverlapAction mco){  computeOverlaps(start,end,mc,mc.start,mc.end,mco);}  }
class C{  public void pushEnclosingClassNode(ClassNode classNode){  enclosingClassNodes.addFirst(classNode);}  }
class C{  public int compareVersion(MessageVersion compareToVersion){  return version.compareTo(compareToVersion);}  }
class C{  public void clear(){  len=0;}  }
class C{  @Override public TransferResult<V,S> visitCase(CaseNode n,TransferInput<V,S> in){  S store=in.getRegularStore();  return new RegularTransferResult<>(finishValue(null,store),store);}  }
class C{  public static <T extends Event>T callEvent(T event){  GlowServer server=(GlowServer)Bukkit.getServer();  if (event.isAsynchronous()) {    server.getPluginManager().callEvent(event);    return event;  } else {    FutureTask<T> task=new FutureTask<>(null,event);    server.getScheduler().scheduleInTickExecution(task);    try {      return task.get();    } catch (    InterruptedException e) {      GlowServer.logger.log(Level.WARNING,"Interrupted while handling " + event.getClass().getSimpleName());      return event;    }catch (    CancellationException e) {      GlowServer.logger.log(Level.WARNING,"Not handling event " + event.getClass().getSimpleName() + " due to shutdown");      return event;    }catch (    ExecutionException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public SerializerRegistry register(Class<?> type){  if (type == null)   throw new NullPointerException("type cannot be null");  return register(type,calculateTypeId(type));}  }
class C{  public Control delete(List<String> urls,boolean deleteDownloadedFile,OnDeleteDownloadFilesListener onDeleteDownloadFilesListener){  return getDownloadDeleteManager().delete(urls,deleteDownloadedFile,onDeleteDownloadFilesListener);}  }
class C{  public void stopAllInspectors(boolean killDraggedOutWindowsToo){  Iterator i=allInspectors.keySet().iterator();  while (i.hasNext()) {    Inspector insp=(Inspector)(i.next());    insp.updateInspector();    insp.repaint();  }  for (int x=0; x < inspectorStoppables.size(); x++) {    Stoppable stopper=((Stoppable)(inspectorStoppables.elementAt(x)));    if (stopper != null)     stopper.stop();  }  if (killDraggedOutWindowsToo) {    i=allInspectors.keySet().iterator();    while (i.hasNext()) {      Inspector insp=(Inspector)(i.next());      Stoppable stopper=(Stoppable)(allInspectors.get(insp));      if (stopper != null)       stopper.stop();    }  }}  }
class C{  public short readShortData() throws EOFException, FormatException {  byte[] bytevec=readBytes(2,false);  if (bytevec[0] < 0) {    bytevec[0]&=0x7f;    return ((short)(MoreMath.BuildShort(bytevec,true) * -1));  }  return MoreMath.BuildShort(bytevec,true);}  }
class C{  public static RangeHighlighter highlightNode(Editor editor,final PsiElement node,TextAttributes attrs,Config cfg){  TextRange range;  final PsiElement realElement;  if ((node instanceof XmlTag) && cfg.isHighlightStartTagOnly()) {    XmlTag tag=(XmlTag)node;    realElement=MyPsiUtil.getNameElement(tag);    range=realElement.getTextRange();  } else {    range=node.getTextRange();    realElement=node;  }  final ArrayList<RangeHighlighter> highlighters=new ArrayList<RangeHighlighter>(1);  final HighlightManager mgr=HighlightManager.getInstance(editor.getProject());  mgr.addRangeHighlight(editor,range.getStartOffset(),range.getEndOffset(),attrs,false,highlighters);  final RangeHighlighter rangeHighlighter=highlighters.get(0);  if (cfg.isAddErrorStripe()) {    rangeHighlighter.setErrorStripeMarkColor(attrs.getBackgroundColor());    rangeHighlighter.setErrorStripeTooltip(formatTooltip(editor,realElement));  } else {    rangeHighlighter.setErrorStripeMarkColor(null);  }  return rangeHighlighter;}  }
class C{  public StatelessPartitioner(int partitionCount){  this.partitionCount=partitionCount;}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentValue;  doc=(Document)load("hc_staff",false);  documentValue=doc.getNodeValue();  assertNull("documentNodeValue",documentValue);}  }
class C{  public static void w(String tag,String msg){  log(LEVEL.WARN,tag,msg,null);}  }
class C{  @Override public CompanyObject copy(){  return new CompanyObject(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testPrepStmtExecuteLargeBatch() throws Exception {  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.pstmt=this.conn.prepareStatement("INSERT INTO testExecuteLargeBatch (n) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setInt(1,1);  this.pstmt.addBatch();  this.pstmt.setInt(1,2);  this.pstmt.addBatch();  this.pstmt.setInt(1,3);  this.pstmt.addBatch();  this.pstmt.setInt(1,4);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.pstmt.setInt(1,8);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  long[] counts=this.pstmt.executeLargeBatch();  assertEquals(7,counts.length);  assertEquals(1,counts[0]);  assertEquals(1,counts[1]);  assertEquals(1,counts[2]);  assertEquals(1,counts[3]);  assertEquals(3,counts[4]);  assertEquals(1,counts[5]);  assertEquals(2,counts[6]);  this.rs=this.pstmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  long generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(10,generatedKey);  this.rs.close();  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  this.pstmt=this.conn.prepareStatement("INSERT INTO testExecuteLargeBatch (n) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setInt(1,1);  this.pstmt.addBatch();  this.pstmt.setInt(1,2);  this.pstmt.addBatch();  this.pstmt.setInt(1,3);  this.pstmt.addBatch();  this.pstmt.setInt(1,4);  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (5), (6), (7)");  this.pstmt.setString(1,"eight");  this.pstmt.addBatch();  this.pstmt.addBatch("INSERT INTO testExecuteLargeBatch (n) VALUES (9), (10)");  try {    this.pstmt.executeLargeBatch();    fail("BatchUpdateException expected");  } catch (  BatchUpdateException e) {    assertEquals("Incorrect integer value: 'eight' for column 'n' at row 1",e.getMessage());    counts=e.getLargeUpdateCounts();    assertEquals(7,counts.length);    assertEquals(1,counts[0]);    assertEquals(1,counts[1]);    assertEquals(1,counts[2]);    assertEquals(1,counts[3]);    assertEquals(3,counts[4]);    assertEquals(Statement.EXECUTE_FAILED,counts[5]);    assertEquals(2,counts[6]);  }catch (  Exception e) {    fail("BatchUpdateException expected");  }  this.rs=this.pstmt.getGeneratedKeys();  generatedKey=0;  while (this.rs.next()) {    assertEquals(++generatedKey,this.rs.getLong(1));  }  assertEquals(9,generatedKey);  this.rs.close();}  }
class C{  @Nullable public HttpRequestFactory createRequestFactory(){  return createRequestFactory(null);}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  public NotOwnerException(){}  }
class C{  @Override public void onReceive(Context context,Intent uriData){  Log.d(TAG,"onReceive() called.");  viewImage(context,uriData);}  }
class C{  public Builder exceptionOnUnreadXml(boolean throwException){  config.exceptionOnUnreadXml=throwException;  return this;}  }
class C{  public static FlushRequest flushRequest(String... indices){  return new FlushRequest(indices);}  }
class C{  @Override public void addAttribute(String name,boolean value){  ((Element)current).setAttribute(name,Boolean.toString(value));}  }
class C{  public void removeAnexo(String idAnexo){  getIntercambioRegistralManager().removeAnexo(idAnexo);}  }
class C{  public T applicationName(String value){  setString(APPLICATION_NAME,value);  return (T)this;}  }
class C{  public Slf4jLog(Logger logger){  this.logger=logger;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.772 -0500",hash_original_method="562B5E3E58AE7AC8AFA073A2A9DBCEF2",hash_generated_method="C511F1EDC52EE717FF24072D132F02D8") public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtils.close(o);    IOUtils.close(stream);  }}  }
class C{  private boolean isRunningInsideDataCenter(){  Set<String> hosts=zkClusterData.getSolrHosts();  String solrPingQueryTemplate="http://%s:%s/solr/collection1/select?q=*:*";  for (  String host : hosts) {    String solrQuery=String.format(solrPingQueryTemplate,host,SolrInteractionUtils.DEFAULT_SOLR_PORT);    try {      SolrInteractionUtils.executeSolrCommandWithTimeout(SolrInteractionUtils.CONNECT_TIMEOUT,solrQuery);      logger.info("Succesfully connected to host " + host + ". We can use Internal Ips..");      return true;    } catch (    IOException e) {      logger.info("Encountered Exception while trying to connect to " + host);      return false;    }  }  logger.info("Connecting to all the hosts with Internal Ips failed. Running in local mode..");  return false;}  }
class C{  public void shutdown(){  m_run=false;}  }
class C{  public void cancel(final UUID queryId) throws Exception {  if (queryId == null)   return;  final ConnectOptions opts=newUpdateConnectOptions(baseServiceURL,queryId,null);  opts.addRequestParam("cancelQuery");  JettyResponseListener response=null;  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public DestinationObject(final RPAction action,final Player player){  super(player);  valid=false;  if (action.has(Actions.TARGET_PATH)) {    List<String> path=action.getList(Actions.TARGET_PATH);    Iterator<String> it=path.iterator();    parent=EquipUtil.getEntityFromId(player,MathHelper.parseInt(it.next()));    if (parent == null) {      logger.warn("cannot find target entity for action " + action);      return;    }    if ((parent instanceof Player) && !parent.getID().equals(player.getID())) {      logger.warn("trying to drop an item into another players inventory");      return;    }    slot=null;    while (it.hasNext()) {      slot=it.next();      if (!parent.hasSlot(slot)) {        logger.error(player.getName() + " tried to use non existing slot " + slot+ " of "+ parent+ " as destination. player zone: "+ player.getZone()+ " object zone: "+ parent.getZone());        return;      }      final RPSlot rpslot=parent.getSlot(slot);      if (it.hasNext()) {        final RPObject.ID itemId=new RPObject.ID(MathHelper.parseInt(it.next()),"");        if (!rpslot.has(itemId)) {          return;        }        parent=(Entity)rpslot.get(itemId);      }    }    valid=slot != null;    return;  } else   if (action.has(EquipActionConsts.TARGET_OBJECT) && action.has(EquipActionConsts.TARGET_SLOT)) {    parent=EquipUtil.getEntityFromId(player,action.getInt(EquipActionConsts.TARGET_OBJECT));    if (parent == null) {      logger.warn("cannot find target entity for action " + action);      return;    }    slot=action.get(EquipActionConsts.TARGET_SLOT);    if ((parent instanceof Player) && !parent.getID().equals(player.getID())) {      logger.warn("trying to drop an item into another players inventory");      return;    }    if (!parent.hasSlot(slot)) {      logger.warn("Parent don't have slot: " + action);      return;    }    valid=true;    return;  }  if (action.has(EquipActionConsts.GROUND_X) && action.has(EquipActionConsts.GROUND_Y)) {    x=action.getInt(EquipActionConsts.GROUND_X);    y=action.getInt(EquipActionConsts.GROUND_Y);    valid=true;  }}  }
class C{  public COFF_Header(BinaryInputBuffer in) throws java.io.IOException, BinaryParseException {  Machine=in.readWORD();  NumberOfSections=in.readWORD();  TimeDateStamp=in.readDWORD();  PointerToSymbolTable=in.readDWORD();  NumberOfSymbols=(int)in.readDWORD();  SizeOfOptionalHeader=in.readWORD();  Characteristics=in.readWORD();  if (!isX86())   throw new BinaryParseException("Non-x86 COFF files currently not supported!");}  }
class C{  static public double msToSec(double ms){  return ms / 1000.0;}  }
class C{  public void validateNamespaceKey(NamespaceKey namespaceKey) throws IllegalArgumentException {  Assert.notNull(namespaceKey,"A namespace key must be specified.");  Assert.hasText(namespaceKey.getNamespaceCode(),"A namespace must be specified.");  namespaceKey.setNamespaceCode(namespaceKey.getNamespaceCode().trim());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String watershedHeader=null;  String weightHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double watershedID=0;  boolean blnWatershed=false;  boolean blnWeight=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      if (!args[i].toLowerCase().contains("not specified")) {        watershedHeader=args[i];        blnWatershed=true;      }    } else     if (i == 2) {      if (!args[i].toLowerCase().contains("not specified")) {        weightHeader=args[i];        blnWeight=true;      }    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!blnWatershed && !blnWeight) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else     if (blnWatershed && !blnWeight) {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c];                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      watershed.close();    } else     if (!blnWatershed && blnWeight) {      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();    } else {      WhiteboxRaster watershed=new WhiteboxRaster(watershedHeader,"r");      if (watershed.getNumberRows() != rows || watershed.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      WhiteboxRaster weight=new WhiteboxRaster(weightHeader,"r");      if (weight.getNumberRows() != rows || weight.getNumberColumns() != cols) {        showFeedback("The input images must be of the same dimensions.");        return;      }      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          watershedID=watershed.getValue(row,col);          if (output.getValue(row,col) == -999 && flowDir != noData && watershedID != noData) {            flag=false;            x=col;            y=row;            flowLength=0;            watershedID=watershed.getValue(row,col);            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0 && watershed.getValue(y,x) == watershedID) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength+=gridLengths[c] * weight.getValue(y,x);                x+=dX[c];                y+=dY[c];                if (output.getValue(y,x) != -999) {                  flowLength+=output.getValue(y,x);                  flag=true;                }              } else {                flag=true;              }            } while (!flag);            flag=false;            x=col;            y=row;            do {              output.setValue(y,x,flowLength);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                z=output.getValue(y,x);                if (z != -999 || watershed.getValue(y,x) != watershedID) {                  flag=true;                } else {                  flowLength-=gridLengths[c] * weight.getValue(y,x);                }              } else {                output.setValue(y,x,0);                flag=true;              }            } while (!flag);          } else           if (flowDir == noData || watershedID == noData) {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      weight.close();      watershed.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Object executeDivide(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(0),row)) / Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getOperand(1),row)));}  }
class C{  public base addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  public void mouseDragged(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e) || (!getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)))   return;  if (!scrollbar.isEnabled() || getThumbBounds().isEmpty()) {    return;  }  if (isDragging) {    setValueFrom(e);  } else {    currentMouseX=e.getX();    currentMouseY=e.getY();    updateThumbState(currentMouseX,currentMouseY);    startScrollTimerIfNecessary();  }}  }
class C{  public FastAdapterDialog<Item> clear(){  mFastItemAdapter.clear();  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  doc=(Document)load("staffNS",true);  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/L2","abc:elem");{    boolean success=false;    try {      attribute.setPrefix("xmlns");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  protected void onEntranceTransitionEnd(){}  }
class C{  public static String calledPartyBCDFragmentToString(byte[] bytes,int offset,int length){  StringBuilder ret=new StringBuilder(length * 2);  internalCalledPartyBCDFragmentToString(ret,bytes,offset,length);  return ret.toString();}  }
class C{  public MatchQueryBuilder(String name,Object text){  this.name=name;  this.text=text;}  }
class C{  public static void v(String msg,Throwable thr){  if (DEBUG)   Log.v(TAG,buildMessage(msg),thr);}  }
class C{  public EsriPolylineList(int initialCapacity){  super(initialCapacity);}  }
class C{  public RepeatIterable(@NotNull T single){  master=new ArrayList<T>(1);  master.add(single);}  }
class C{  protected final void addCompositeComponentTag(String name,String resourceId){  this.factories.put(name,new CompositeComponentTagFactory(resourceId));}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontElement(prefix,(AbstractDocument)doc);}  }
class C{  private void assignId(PersistentResource persistentResource,String id){  if (!persistentResource.isIdGenerated()) {    if (id != null && !id.isEmpty()) {      persistentResource.setId(id);    } else {      throw new InvalidValueException(persistentResource.toResource(),"No id provided, cannot persist " + persistentResource.getObject());    }  }}  }
class C{  @Override public void modify(final Object element,final String property,final Object value){  final int elementIndex=Integer.parseInt(property);  if (element instanceof TableItem) {    final CSVRow row=(CSVRow)((TableItem)element).getData();    if (elementIndex < row.getNumberOfElements()) {      row.setRowEntry(elementIndex,value.toString());    } else {      for (int i=row.getNumberOfElements(); i < elementIndex + 1; i++) {        row.addElement("");      }      row.setRowEntry(elementIndex,value.toString());    }  }}  }
class C{  public StateSet complement(StateSet set){  if (set == null)   return null;  StateSet result=new StateSet();  result.bits=new long[set.bits.length];  int i;  int m=Math.min(bits.length,set.bits.length);  for (i=0; i < m; i++) {    result.bits[i]=~bits[i] & set.bits[i];  }  if (bits.length < set.bits.length)   System.arraycopy(set.bits,m,result.bits,m,result.bits.length - m);  if (DEBUG)   Out.dump("Complement of " + this + Out.NL+ "and "+ set+ Out.NL+ " is :"+ result);  return result;}  }
class C{  public static void resetNameAfterExecute(Runnable r,Throwable t){  if (r != null) {    String removeMe=(r instanceof NamedTask) ? ((NamedTask<?>)r).getName() : r.getClass().getSimpleName();    if (StringUtils.isBlank(removeMe)) {      removeMe=ANONYMOUS_NAME;    }    Thread.currentThread().setName(StringUtils.removeEnd(Thread.currentThread().getName(),TASK_DELIMITER + removeMe));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public KruskalMST(EdgeWeightedGraph G){  MinPQ<Edge> pq=new MinPQ<Edge>();  for (  Edge e : G.edges()) {    pq.insert(e);  }  UF uf=new UF(G.V());  while (!pq.isEmpty() && mst.size() < G.V() - 1) {    Edge e=pq.delMin();    int v=e.either();    int w=e.other(v);    if (!uf.connected(v,w)) {      uf.union(v,w);      mst.enqueue(e);      weight+=e.weight();    }  }  assert check(G);}  }
class C{  public NGramTokenFilter(TokenStream input){  this(input,DEFAULT_MIN_NGRAM_SIZE,DEFAULT_MAX_NGRAM_SIZE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String mapperClassName(Class<?> destination,Class<?> source,String resource){  String className=destination.getName().replaceAll("\\.","") + source.getName().replaceAll("\\.","");  if (isEmpty(resource))   return className;  if (!isPath(resource))   return write(className,String.valueOf(resource.hashCode()));  String[] dep=resource.split("\\\\");  if (dep.length <= 1)   dep=resource.split("/");  String xml=dep[dep.length - 1];  return write(className,xml.replaceAll("\\.","").replaceAll(" ",""));}  }
class C{  public static void maximizeWindowWithMargin(final Window window,final int margin,final Dimension maxSize){  GraphicsConfiguration gconfig=window.getGraphicsConfiguration();  if (gconfig == null)   GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();  final Rectangle bounds=gconfig.getBounds();  final Insets insets=Toolkit.getDefaultToolkit().getScreenInsets(gconfig);  final int width=bounds.width - insets.left - insets.right- margin * 2;  final int height=bounds.height - insets.top - insets.bottom- margin * 2;  if (maxSize == null)   window.setSize(width,height); else   window.setSize(Math.min(width,maxSize.width),Math.min(height,maxSize.height));  window.setLocationRelativeTo(window.getOwner());}  }
class C{  public void draw(float[] mvpMatrix,float[] mvMatrix,float[] lightVector,float[] mMatrix){  int program=mProgram;  if (mOverhang) {    program=mProgramOverhang;    GLES20.glUseProgram(mProgramOverhang);  } else {    program=mProgram;    GLES20.glUseProgram(mProgram);  }  if (mTransparent)   GLES20.glBlendFunc(GLES20.GL_ONE,GLES20.GL_ONE_MINUS_SRC_ALPHA); else   GLES20.glBlendFunc(GLES20.GL_SRC_COLOR,GLES20.GL_CONSTANT_COLOR);  mPositionHandle=GLES20.glGetAttribLocation(program,"a_Position");  ViewerRenderer.checkGlError("glGetAttribLocation");  GLES20.glVertexAttribPointer(mPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,mTriangleBuffer);  GLES20.glEnableVertexAttribArray(mPositionHandle);  if (mOverhang) {    mColorOverhangHandle=GLES20.glGetUniformLocation(program,"a_ColorOverhang");    ViewerRenderer.checkGlError("glGetUniformLocation COLOROVERHANG");    GLES20.glUniform4fv(mColorOverhangHandle,1,colorOverhang,0);    ViewerRenderer.checkGlError("glUniform4fv");    mCosAngleHandle=GLES20.glGetUniformLocation(program,"a_CosAngle");    ViewerRenderer.checkGlError("glGetUniformLocation");    GLES20.glUniform1f(mCosAngleHandle,(float)Math.cos(Math.toRadians(mOverhangAngle)));    mMMatrixHandle=GLES20.glGetUniformLocation(program,"u_MMatrix");    ViewerRenderer.checkGlError("glGetUniformLocation");    GLES20.glUniformMatrix4fv(mMMatrixHandle,1,false,mMatrix,0);    ViewerRenderer.checkGlError("glUniformMatrix4fv");  }  mColorHandle=GLES20.glGetUniformLocation(program,"a_Color");  ViewerRenderer.checkGlError("glGetUniformLocation a_Color");  GLES20.glUniform4fv(mColorHandle,1,mColor,0);  ViewerRenderer.checkGlError("glUniform4fv");  mNormalHandle=GLES20.glGetAttribLocation(program,"a_Normal");  ViewerRenderer.checkGlError("glGetAttribLocation");  GLES20.glVertexAttribPointer(mNormalHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,VERTEX_STRIDE,mNormalBuffer);  GLES20.glEnableVertexAttribArray(mNormalHandle);  mMVPMatrixHandle=GLES20.glGetUniformLocation(program,"u_MVPMatrix");  ViewerRenderer.checkGlError("glGetUniformLocation");  GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mvpMatrix,0);  ViewerRenderer.checkGlError("glUniformMatrix4fv");  mMVMatrixHandle=GLES20.glGetUniformLocation(program,"u_MVMatrix");  ViewerRenderer.checkGlError("glGetUniformLocation");  GLES20.glUniformMatrix4fv(mMVMatrixHandle,1,false,mvMatrix,0);  ViewerRenderer.checkGlError("glUniformMatrix4fv");  mLightPosHandle=GLES20.glGetUniformLocation(program,"u_LightPos");  ViewerRenderer.checkGlError("glGetUniformLocation");  GLES20.glUniform3f(mLightPosHandle,lightVector[0],lightVector[1],lightVector[2]);  ViewerRenderer.checkGlError("glUniform3f");  if (mXray) {    for (int i=0; i < vertexCount / COORDS_PER_VERTEX; i++) {      GLES20.glDrawArrays(GLES20.GL_LINE_LOOP,i * 3,3);    }  } else   GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,vertexCount);}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection == null) {    Debug.error("ETOPO Layer needs to be added to the MapBean before it can draw images!");    return new OMGraphicList();  }  if (dataBuffer == null || spacingReset) {    loadBuffer();    spacingReset=false;    slopeReset=true;  }  if (slopeReset) {    buildSlopeMap();    slopeReset=false;  }  Debug.message("basic",getName() + "|ETOPOLayer.prepare(): doing it");  if (Debug.debugging("etopo")) {    Debug.output(getName() + "|ETOPOLayer.prepare(): " + "calling getRectangle "+ " with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  OMGraphicList omGraphicList=new OMGraphicList();  omGraphicList.add(buildRaster());  int size=0;  if (omGraphicList != null) {    size=omGraphicList.size();    Debug.message("basic",getName() + "|ETOPOLayer.prepare(): finished with " + size+ " graphics");  } else {    Debug.message("basic",getName() + "|ETOPOLayer.prepare(): finished with null graphics list");    omGraphicList=new OMGraphicList();  }  omGraphicList.project(projection,true);  return omGraphicList;}  }
class C{  public void testModifyResolution(){  try {    long resolution=20 * TimerThread.DEFAULT_RESOLUTION;    counterThread.setResolution(resolution);    assertEquals(resolution,counterThread.getResolution());    doTestTimeout(false,true);    resolution=5;    counterThread.setResolution(resolution);    assertEquals(resolution,counterThread.getResolution());    doTestTimeout(false,true);    resolution=TimerThread.DEFAULT_RESOLUTION;    counterThread.setResolution(resolution);    assertEquals(resolution,counterThread.getResolution());    doTestTimeout(false,true);  }  finally {    counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);  }}  }
class C{  public double distanceSq(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  protected Container createContainer(){  return new EditorContainer();}  }
class C{  private void sincronizarBase(){  listaVisitante=ControleDAO.getBanco().getVisitanteDAO().listar();}  }
class C{  @Override public BiosCommandResult doDeleteFS(StorageSystem storage,FileDeviceInputOutput args) throws ControllerException {  BiosCommandResult result=new BiosCommandResult();  try {    _log.info("NetAppFileStorageDevice doDeleteFS - start");    if (null == args.getFsName()) {      _log.error("NetAppFileStorageDevice::doDeletFS failed:  Filesystem name is either missing or empty");      ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileSystem();      serviceError.setMessage("Filesystem name is either missing or empty");      result=BiosCommandResult.createErrorResult(serviceError);      return result;    }    FileShare fileshare=args.getFs();    String portGroup=findVfilerName(fileshare);    if (null != args.getFsShares() && !args.getFsShares().isEmpty()) {      if (!netAppDeleteCIFSExports(storage,args.getFsShares(),portGroup)) {        _log.info("NetAppFileStorageDevice doDeletFS:netAppDeleteCIFSExports {} - failed",args.getFsName());      } else {        _log.info("NetAppFileStorageDevice doDeletFS:netAppDeleteCIFSExports {} - succeeded",args.getFsName());      }    }    boolean failedStatus=false;    NetAppApi nApi=new NetAppApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).vFiler(portGroup).build();    if (!nApi.deleteFS(args.getFsName())) {      failedStatus=true;    }    if (failedStatus == true) {      _log.error("NetAppFileStorageDevice doDeletFS {} - failed",args.getFsName());      ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileSystem();      result=BiosCommandResult.createErrorResult(serviceError);    } else {      _log.info("NetAppFileStorageDevice doDeletFS {} - complete",args.getFsName());      result=BiosCommandResult.createSuccessfulResult();    }  } catch (  NetAppException e) {    _log.error("NetAppFileStorageDevice::doDeleteFS failed with a NetAppException",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileSystem();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }catch (  Exception e) {    _log.error("NetAppFileStorageDevice::doDeleteFS failed with an Exception",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileSystem();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }  return result;}  }
class C{  private boolean validateStorageVolumes(Volume virtualVolume,String volumeId,String topLevelDeviceName,boolean distributed,String cluster,boolean hasMirror){  boolean failed=false;  Map<String,VPlexStorageVolumeInfo> wwnToStorageVolumeInfos=client.getStorageVolumeInfoForDevice(topLevelDeviceName,distributed ? VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME : VPlexApiConstants.LOCAL_VIRTUAL_VOLUME,cluster,hasMirror);  Volume assocVolume=VPlexUtil.getVPLEXBackendVolume(virtualVolume,true,getDbClient());  if (!storageSystemSupportsValidation(assocVolume)) {    return failed;  }  if (!wwnToStorageVolumeInfos.keySet().contains(assocVolume.getWWN())) {    getValidatorLogger().logDiff(volumeId,"SOURCE storage volume WWN",assocVolume.getWWN(),wwnToStorageVolumeInfos.keySet().toString());    failed=true;  } else {    wwnToStorageVolumeInfos.remove(assocVolume.getWWN());  }  if (distributed) {    assocVolume=VPlexUtil.getVPLEXBackendVolume(virtualVolume,false,getDbClient());    if (!storageSystemSupportsValidation(assocVolume)) {      return failed;    }    if (!wwnToStorageVolumeInfos.keySet().contains(assocVolume.getWWN())) {      getValidatorLogger().logDiff(volumeId,"HA storage volume WWN",assocVolume.getWWN(),wwnToStorageVolumeInfos.keySet().toString());      failed=true;    } else {      wwnToStorageVolumeInfos.remove(assocVolume.getWWN());    }  }  if (virtualVolume.getMirrors() != null) {    for (    String mirrorId : virtualVolume.getMirrors()) {      VplexMirror mirror=getDbClient().queryObject(VplexMirror.class,URI.create(mirrorId));      if (mirror == null || mirror.getInactive() || mirror.getAssociatedVolumes() == null) {        continue;      }      for (      String mirrorAssociatedId : mirror.getAssociatedVolumes()) {        Volume mirrorVolume=getDbClient().queryObject(Volume.class,URI.create(mirrorAssociatedId));        if (!storageSystemSupportsValidation(mirrorVolume)) {          return failed;        }        if (mirrorVolume != null && !NullColumnValueGetter.isNullValue(mirrorVolume.getWWN())) {          if (!wwnToStorageVolumeInfos.keySet().contains(mirrorVolume.getWWN())) {            getValidatorLogger().logDiff(volumeId,"Mirror WWN",mirrorVolume.getWWN(),wwnToStorageVolumeInfos.keySet().toString());            failed=true;          } else {            wwnToStorageVolumeInfos.remove(mirrorVolume.getWWN());          }        }      }    }  }  if (!wwnToStorageVolumeInfos.isEmpty()) {    getValidatorLogger().logDiff(volumeId,"Extra storage volumes found",ValidatorLogger.NO_MATCHING_ENTRY,wwnToStorageVolumeInfos.keySet().toString());    failed=true;  }  return failed;}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Stack underflow");  return a[n - 1];}  }
class C{  private void writeUnion(OutputNode node,Object source,Section section,Label label) throws Exception {  Contact contact=label.getContact();  Object value=contact.get(source);  Class expect=context.getType(type,source);  if (value == null && label.isRequired()) {    throw new ElementException("Value for %s is null in %s",label,expect);  }  Object replace=writeReplace(value);  if (replace != null) {    writeElement(node,replace,label);  }  criteria.set(label,replace);}  }
class C{  public static Serializable parseValue(String value){  value=value.trim();  if (value.startsWith("{")) {    String inside=value.substring(1,value.length() - 1);    if (inside.length() == 0) {      return null;    }    int depth=0;    while (inside.charAt(depth) == '{') {      depth++;    }    StringBuilder split;    if (depth == 0) {      split=new StringBuilder(",");    } else {      StringBuilder rightBookEnd=new StringBuilder("(?<=");      StringBuilder leftBookEnd=new StringBuilder("(?=");      for (int i=0; i < depth; ++i) {        rightBookEnd.append("\\}");        leftBookEnd.append("\\{");      }      leftBookEnd.append(")");      rightBookEnd.append(")");      split=rightBookEnd.append(",").append(leftBookEnd);    }    String[] elements=inside.split(split.toString());    Object[] values=new Object[elements.length];    for (int i=0; i < elements.length; i++) {      values[i]=parseValue(elements[i]);    }    return values;  }  if (value.startsWith("#")) {    try {      return Color.decode(value.substring(1));    } catch (    NumberFormatException nfe1) {    }  }  if (value.equalsIgnoreCase("TRUE") || value.equalsIgnoreCase("FALSE")) {    return Boolean.valueOf(value);  }  try {    return new Integer(value);  } catch (  NumberFormatException nfe1) {  }  try {    return new Double(value);  } catch (  NumberFormatException nfe2) {  }  return value;}  }
class C{  public int compareTo(XMLString anotherString){  return m_str.compareTo(anotherString.toString());}  }
class C{  private void add(StreamRecord<T> record){  input.add(Pair.of(record,0L));}  }
class C{  private ReadOnlyLDAPUser(){  super();}  }
class C{  public static double MCSCE1rawFitness(boolean useTrainingData,GEPIndividual ind,double bestValueThreshold,double secondBestValueThreshold){  int mi_ContingencyTable[][]=MCSCE1contingencyTable(useTrainingData,ind,bestValueThreshold,secondBestValueThreshold);  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numberOfObjects=dv.getDependentVariableValues().length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int numberOfMatches=0;  for (int i=0; i < numberOfClasses; i++)   numberOfMatches+=mi_ContingencyTable[i][i];  double classificationError=((double)(numberOfObjects - numberOfMatches)) / numberOfObjects;  return classificationError;}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof CompoundName)) {    throw new ClassCastException("Not a CompoundName");  }  return impl.compareTo(((CompoundName)obj).impl);}  }
class C{  private byte[] addExif(byte[] jpeg){  ExifInterface exif=new ExifInterface();  exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,System.currentTimeMillis(),TimeZone.getDefault());  ByteArrayOutputStream jpegOut=new ByteArrayOutputStream();  try {    exif.writeExif(jpeg,jpegOut);  } catch (  IOException e) {    Log.e(TAG,"Could not write EXIF",e);  }  return jpegOut.toByteArray();}  }
class C{  public static void copyText(java.io.Reader reader,java.io.Writer writer,int bufferSize) throws IOException {  char[] writeBuffer=new char[bufferSize];  for (int br=reader.read(writeBuffer); br != -1; br=reader.read(writeBuffer)) {    writer.write(writeBuffer,0,br);  }  writer.flush();}  }
class C{  public int andCardinality(final SparseBitmap rhs){  return this.bitmap.andCardinality(rhs.bitmap);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.341 -0500",hash_original_method="616C057876C322A61AA799FA470B1CEA",hash_generated_method="B4C0ADC52292C1943A4750970639A178") public void reset(){  mProvider=null;  mTime=0;  mLatitude=0;  mLongitude=0;  mHasAltitude=false;  mAltitude=0;  mHasSpeed=false;  mSpeed=0;  mHasBearing=false;  mBearing=0;  mHasAccuracy=false;  mAccuracy=0;  mExtras=null;}  }
class C{  private InputStream writeNTriples(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter nTriplesWriter=new NTriplesWriter(writer);  nTriplesWriter.startRDF();  for (  Statement nextStatement : statements) {    nTriplesWriter.handleStatement(nextStatement);  }  nTriplesWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  protected void addSpace(){  add(new JLabel(" "));}  }
class C{  @Override public void clear(){  initialize();}  }
class C{  protected FunctionTypeRefImpl(){  super();}  }
class C{  @AfterMethod public void cleanUp() throws IOException {  root.setApplicationId(-1);  root.setBusinessTransactionId(-1);}  }
class C{  public static long readDwordBigEndian(final byte[] data,final int offset){  return ((data[offset + 0] & 0xFFL) * 0x100 * 0x100* 0x100) + ((data[offset + 1] & 0xFFL) * 0x100 * 0x100) + ((data[offset + 2] & 0xFFL) * 0x100)+ (data[offset + 3] & 0xFFL);}  }
class C{  @Override public String createResults(SpatialCutter spatialEventCutter,int scaleFactor){  this.scaleFactor=scaleFactor;  this.modes.clear();  this.activities.clear();  this.counts.clear();  this.spatialEventCutter=spatialEventCutter;  analyzeEvents();  return getResults();}  }
class C{  public void stop(){  running=false;  socket.close();  while (!closed) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      logger.debug("interrupted");    }  }}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  ArrayList<Attribute> atts;  m_Random=new Random(getSeed());  m_NoiseRandom=new Random(getSeed());  setNumExamplesAct(getNumExamples());  atts=new ArrayList<Attribute>();  atts.add(new Attribute("x"));  atts.add(new Attribute("y"));  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);  return m_DatasetFormat;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void pruneLevel(){  if (nchild != 0) {    for (int id=0; id < child.length; id++) {      if (child[id] != null) {        child[id].pruneLevel();      }    }  }  if (level == cube.depth) {    pruneChild();  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public int hashCode(){  return namespaceURI.hashCode();}  }
class C{  public static boolean testLineCircle(double a,double b,double c,double centerX,double centerY,double radius){  double denom=Math.sqrt(a * a + b * b);  double dist=(a * centerX + b * centerY + c) / denom;  return -radius <= dist && dist <= radius;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void actionHelp(){  StringBuffer sb=new StringBuffer();  if (m_Description != null && m_Description.length() > 0)   sb.append("<h2>").append(m_Description).append("</h2>");  if (m_Help != null && m_Help.length() > 0)   sb.append("<p>").append(m_Help);  Help hlp=new Help(Env.getFrame(this),this.getTitle(),sb.toString());  hlp.setVisible(true);}  }
class C{  public static float cuCabs(cuComplex x){  float p=cuCreal(x);  float q=cuCimag(x);  float r;  if (p == 0)   return q;  if (q == 0)   return p;  p=(float)Math.sqrt(p);  q=(float)Math.sqrt(q);  if (p < q) {    r=p;    p=q;    q=r;  }  r=q / p;  return p * (float)Math.sqrt(1.0f + r * r);}  }
class C{  public IntervalSeparator(Long intervalStartTime){  super(SeparatorType.INTERVAL);  m_intervalStartTime=intervalStartTime;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.634 -0500",hash_original_method="1884CD7855F3B6349631839451D5E408",hash_generated_method="EEBA90E2F8BF084132325346A2CC0D43") public void clearUsernamePassword(){  if (!checkInitialized()) {    return;  }synchronized (mPasswordLock) {    mDatabase.delete(mTableNames[TABLE_PASSWORD_ID],null,null);  }}  }
class C{  private void findSourceAndTargetMigrations(List<Volume> volumes,VirtualPool newVpool,boolean sourceMigrationsExist,HashMap<VirtualPool,List<Volume>> allSourceVolumesToMigrate,boolean targetMigrationsExist,HashMap<VirtualPool,List<Volume>> allTargetVolumesToMigrate,List<RPVPlexMigration> targetVpoolMigrations,TaskList taskList,String taskId){  for (  Volume volume : volumes) {    if (sourceMigrationsExist) {      List<Volume> sourceVolumesToMigrate=allSourceVolumesToMigrate.get(newVpool);      if (sourceVolumesToMigrate == null) {        sourceVolumesToMigrate=new ArrayList<Volume>();        allSourceVolumesToMigrate.put(newVpool,sourceVolumesToMigrate);      }      sourceVolumesToMigrate.add(volume);    }    if (targetMigrationsExist) {      StringSet rpTargets=volume.getRpTargets();      for (      String rpTargetId : rpTargets) {        Volume rpTargetVolume=_dbClient.queryObject(Volume.class,URI.create(rpTargetId));        RPVPlexMigration targetMigration=null;        for (        RPVPlexMigration migration : targetVpoolMigrations) {          if (rpTargetVolume.getVirtualArray().equals(migration.getVarray()) && rpTargetVolume.getVirtualPool().equals(migration.getMigrateFromVpool().getId())) {            targetMigration=migration;            break;          }        }        if (targetMigration != null) {          BlockServiceUtils.checkForPendingTasks(rpTargetVolume.getTenant().getURI(),Arrays.asList(rpTargetVolume),_dbClient);          VirtualPool migrateFromVpool=targetMigration.getMigrateFromVpool();          VirtualPool migrateToVpool=targetMigration.getMigrateToVpool();          BlockService.verifyVPlexVolumeForDataMigration(rpTargetVolume,migrateFromVpool,migrateToVpool,_dbClient);          Operation op=new Operation();          op.setResourceType(ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL);          op.setDescription("Change vpool operation - Migrate RP+VPLEX Target");          op=_dbClient.createTaskOpStatus(Volume.class,rpTargetVolume.getId(),taskId,op);          taskList.addTask(toTask(rpTargetVolume,taskId,op));          List<Volume> targetVolumesToMigrate=allTargetVolumesToMigrate.get(migrateToVpool);          if (targetVolumesToMigrate == null) {            targetVolumesToMigrate=new ArrayList<Volume>();            allTargetVolumesToMigrate.put(migrateToVpool,targetVolumesToMigrate);          }          targetVolumesToMigrate.add(rpTargetVolume);        } else {          _log.info(String.format("No migration info was found for Target volume [%s](%s). Skipping...",rpTargetVolume.getLabel(),rpTargetVolume.getId()));        }      }    }  }}  }
class C{  public FrameServletPreferencesPanel(){  initComponents();}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  public static int bytesToInt(byte[] in,ByteOrder order){  byte[] tmp;  if (order == ByteOrder.LITTLE_ENDIAN) {    tmp=in;  } else {    tmp=flipByteOrder(in);  }  int ret=0;  for (int i=0; i < tmp.length; i++) {    ret|=(tmp[i] & 0xFF) << (i * 8);  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION_DEFINITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.ASSOCIATION_DEFINITION___ASSOCIATION_1:getAssociation_1().clear();getAssociation_1().addAll((Collection<? extends Association_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void applyStream(Message m,TSIGRecord old,boolean first){  if (first) {    apply(m,old);    return;  }  Date timeSigned=new Date();  int fudge;  HMAC hmac=new HMAC(digest,digestBlockLength,key);  fudge=Options.intValue("tsigfudge");  if (fudge < 0 || fudge > 0x7FFF)   fudge=FUDGE;  DNSOutput out=new DNSOutput();  out.writeU16(old.getSignature().length);  hmac.update(out.toByteArray());  hmac.update(old.getSignature());  hmac.update(m.toWire());  out=new DNSOutput();  long time=timeSigned.getTime() / 1000;  int timeHigh=(int)(time >> 32);  long timeLow=(time & 0xFFFFFFFFL);  out.writeU16(timeHigh);  out.writeU32(timeLow);  out.writeU16(fudge);  hmac.update(out.toByteArray());  byte[] signature=hmac.sign();  byte[] other=null;  Record r=new TSIGRecord(name,DClass.ANY,0,alg,timeSigned,fudge,signature,m.getHeader().getID(),Rcode.NOERROR,other);  m.addRecord(r,Section.ADDITIONAL);  m.tsigState=Message.TSIG_SIGNED;}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  @Override public SelectResults filterEvaluate(ExecutionContext context,SelectResults iterationLimit) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  return filterEvaluate(context,iterationLimit,true,null,null,true,isConditioningNeededForIndex(null,context,true),false);}  }
class C{  protected void augmentIterationId(){  if (getIterationId() == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited();  } else {    this.iterationID++;  }}  }
class C{  @Override protected void append(E eventObject){  if (!isStarted()) {    return;  }  if (evWarnError != null) {    ILoggingEvent ev=((ILoggingEvent)eventObject);    if (ev.getLevel().equals(Level.ERROR) || ev.getLevel().equals(Level.WARN)) {      evWarnError.newEventWithFlush(new WarnErrorEvent(ev.getFormattedMessage(),ev.getLevel(),ev.getThreadName(),ev.getLoggerName()));    }  }}  }
class C{  public boolean isValid(String uuid){  return storage.getIfPresent(uuid) != null;}  }
class C{  private int validMacro(String s){  int mN;  try {    mN=Integer.parseInt(s);  } catch (  NumberFormatException e) {    return -1;  }  if (mN < 0 || mN > maxNumMacros) {    return -1;  } else {    return mN;  }}  }
class C{  public void onPeerConnectionClosed(PnPeer peer){}  }
class C{  @Override public boolean validateRelation(IRelationProxy proxy){  boolean valid=true;  if (proxy.getEdgeType().contains("RELATION") && (proxy.getEdgeType().charAt(0) == 'U' || proxy.getEdgeType().charAt(0) == 'B')) {    if (proxy.getTarget() instanceof MappedSuperclassWidget) {      return false;    } else     if (proxy.getTarget() instanceof EmbeddableWidget) {      return false;    }  } else   if (proxy.getEdgeType().equals("GENERALIZATION")) {    if (!(proxy.getSource() instanceof JavaClassWidget) || !(proxy.getTarget() instanceof JavaClassWidget)) {      return false;    } else     if (proxy.getSource() == proxy.getTarget()) {      return false;    } else     if ((proxy.getSource() instanceof EmbeddableWidget) && !(proxy.getTarget() instanceof EmbeddableWidget)) {      return false;    } else     if (!(proxy.getSource() instanceof EmbeddableWidget) && (proxy.getTarget() instanceof EmbeddableWidget)) {      return false;    }    JavaClassWidget sourceJavaClassWidget=(JavaClassWidget)proxy.getSource();    JavaClassWidget targetJavaClassWidget=(JavaClassWidget)proxy.getTarget();    List<JavaClassWidget> targetSuperclassWidgetList=targetJavaClassWidget.getAllSuperclassWidget();    if (sourceJavaClassWidget.getOutgoingGeneralizationFlowWidget() != null) {      return false;    } else     if (targetSuperclassWidgetList.size() > 0 && targetSuperclassWidgetList.contains(sourceJavaClassWidget)) {      return false;    }  } else   if (proxy.getEdgeType().equals("SINGLE_EMBEDDABLE_RELATION") || proxy.getEdgeType().equals("MULTI_EMBEDDABLE_RELATION")) {    if (!(proxy.getSource() instanceof PersistenceClassWidget) || !(proxy.getTarget() instanceof EmbeddableWidget)) {      return false;    }  }  return valid;}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.514 -0500",hash_original_method="FA484CCA03B27F5C12EABAE629DE360A",hash_generated_method="1F987581421EDEB082D3EE8ADDC317DA") public void writeToParcel(Parcel dest,int flags){  dest.writeString(getInterfaceName());  dest.writeInt(mLinkAddresses.size());  for (  LinkAddress linkAddress : mLinkAddresses) {    dest.writeParcelable(linkAddress,flags);  }  dest.writeInt(mDnses.size());  for (  InetAddress d : mDnses) {    dest.writeByteArray(d.getAddress());  }  dest.writeInt(mRoutes.size());  for (  RouteInfo route : mRoutes) {    dest.writeParcelable(route,flags);  }  if (mHttpProxy != null) {    dest.writeByte((byte)1);    dest.writeParcelable(mHttpProxy,flags);  } else {    dest.writeByte((byte)0);  }}  }
class C{  public byte[] resize(int len){  if (data.length < len) {    byte[] data0=new byte[len];    GridUnsafe.copyMemory(data,GridUnsafe.BYTE_ARR_OFF,data0,GridUnsafe.BYTE_ARR_OFF,data.length);    data=data0;  }  return data;}  }
class C{  public int delete(String table,String key){  long st=System.nanoTime();  int res=_db.delete(table,key);  long en=System.nanoTime();  _measurements.measure("DELETE",(int)((en - st) / 1000));  _measurements.reportReturnCode("DELETE",res);  return res;}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  protected FunctionType0(){  super(TYPE_0);}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    int n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (int i=0; i < n; ++i) {      TryCatchBlockNode tcb=tryCatchBlocks.get(i);      if (tcb.visibleTypeAnnotations != null && tcb.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (tcb.invisibleTypeAnnotations != null && tcb.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }    }    for (int i=0; i < instructions.size(); ++i) {      AbstractInsnNode insn=instructions.get(i);      if (insn.visibleTypeAnnotations != null && insn.visibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn.invisibleTypeAnnotations != null && insn.invisibleTypeAnnotations.size() > 0) {        throw new RuntimeException();      }      if (insn instanceof MethodInsnNode) {        boolean itf=((MethodInsnNode)insn).itf;        if (itf != (insn.opcode == Opcodes.INVOKEINTERFACE)) {          throw new RuntimeException();        }      }    }    if (visibleLocalVariableAnnotations != null && visibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleLocalVariableAnnotations != null && invisibleLocalVariableAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public AttributeSetFilter(){  initComponents();}  }
class C{  private int indexOfE(AlignmentTemplate alTemp,boolean add){  return eIndex.indexOf(Sequences.toIntArray(alTemp.e()),add);}  }
class C{  public static final String concatGroups(Matcher matcher){  StringBuilder b=new StringBuilder();  final int numGroups=matcher.groupCount();  for (int i=1; i <= numGroups; i++) {    String s=matcher.group(i);    System.err.println("Group(" + i + ") : "+ s);    if (s != null) {      b.append(s);    }  }  return b.toString();}  }
class C{  public TellerNotFoundException(Long tellerId){  super(ERROR_MESSAGE_CODE,DEFAULT_ERROR_MESSAGE,tellerId);}  }
class C{  public Coordinates makeUnclassified(){  if (this.classifier == null) {    return this;  }  return new Coordinates(this.groupId,this.artifactId,this.version,this.qualifiedVersion,null,this.extension);}  }
class C{  @Override public void expandMetaVolume(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,List<String> newMetaMembers,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws Exception {  expandVolumeAsMetaVolume(storageSystem,storagePool,metaHead,newMetaMembers,null,metaVolumeTaskCompleter);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/unmount") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep unmountExport(@PathParam("id") URI id,FileSystemUnmountParam param) throws InternalException {  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  if (!isMountPathValid(param.getHostId(),param.getMountPath())) {    throw APIException.badRequests.invalidParameter("mount_path",param.getMountPath());  }  _log.info("FileService::unmount export Request recieved {}",id);  String task=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.UNMOUNT_NFS_EXPORT);  fs.setOpStatus(new OpStatusMap());  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.updateObject(fs);  ComputeSystemOrchestrationController controller=getController(ComputeSystemOrchestrationController.class,null);  try {    controller.unmountDevice(param.getHostId(),id,param.getMountPath(),task);  } catch (  InternalException e) {    throw e;  }  auditOp(OperationTypeEnum.UNMOUNT_NFS_EXPORT,true,AuditLogManager.AUDITOP_BEGIN,param.getHostId(),param.getMountPath());  fs=_dbClient.queryObject(FileShare.class,fs.getId());  _log.debug("FileService::unmount Before sending response, FS ID : {}, Task : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(fs,task,op);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:08.716 -0500",hash_original_method="9BE6357EB542FC84A087A4445B1D473C",hash_generated_method="38B512328D2735C6716B0A16A54B15A6") public static ShortcutIconResource fromContext(Context context,int resourceId){  ShortcutIconResource icon=new ShortcutIconResource();  icon.packageName=context.getPackageName();  icon.resourceName=context.getResources().getResourceName(resourceId);  return icon;}  }
class C{  public void read(NBTTagCompound nbtTags){  type=Gas.readFromNBT(nbtTags);  amount=nbtTags.getInteger("amount");}  }
class C{  public void drawPolygon(int xPoints[],int yPoints[],int nPoints){  g.drawPolygon(xPoints,yPoints,nPoints);}  }
class C{  public static void main(String[] args){  runFileLoader(new LibSVMLoader(),args);}  }
class C{  private JsonToken advance() throws IOException {  peek();  JsonToken result=token;  token=null;  value=null;  name=null;  return result;}  }
class C{  public void doneWithInvalidResponse(InvalidResponseException e){  lock.lock();  try {    illegalResponseException=e;    condition.signal();  }  finally {    lock.unlock();  }}  }
class C{  private Object readText(InputNode node,Object value) throws Exception {  Label label=group.getText();  Converter converter=label.getConverter(context);  InputNode parent=node.getParent();  return converter.read(parent,value);}  }
class C{  public void onComplete(String response,boolean error,String errorMessage,final String stackTrace,String statusCode,int statusCodeInt){  cancelCancellable();  reply(response,error,errorMessage,stackTrace,statusCode,statusCodeInt);}  }
class C{  private void deleteSMS(String cmd,String search){  int nbDeleted=-2;  if (cmd.equals("all")) {    nbDeleted=mSmsManager.deleteAllSms();  } else   if (cmd.equals("sent")) {    nbDeleted=mSmsManager.deleteSentSms();  } else   if (cmd.startsWith("last")) {    Integer number=Tools.parseInt(search);    if (number == null) {      number=1;    }    if (cmd.equals("last")) {      nbDeleted=mSmsManager.deleteLastSms(number);    } else     if (cmd.equals("lastin")) {      nbDeleted=mSmsManager.deleteLastInSms(number);    } else     if (cmd.equals("lastout")) {      nbDeleted=mSmsManager.deleteLastOutSms(number);    } else {      send(R.string.chat_del_sms_error);    }  } else   if (cmd.equals("contact") && search != null) {    ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,search);    if (contacts.size() > 1) {      StringBuilder sb=new StringBuilder(getString(R.string.chat_specify_details));      sb.append(Tools.LineSep);      for (      Contact contact : contacts) {        sb.append(contact.name);        sb.append(Tools.LineSep);      }      send(sb.toString());    } else     if (contacts.size() == 1) {      Contact contact=contacts.get(0);      send(R.string.chat_del_sms_from,contact.name);      nbDeleted=mSmsManager.deleteSmsByContact(contact.rawIds);    } else {      send(R.string.chat_no_match_for,search);    }  } else   if (cmd.equals("number") && search != null) {    send(R.string.chat_del_sms_from,search);    nbDeleted=mSmsManager.deleteSmsByNumber(search);    if (nbDeleted <= 0) {      send(R.string.chat_no_match_for,search);    }  } else {    send(R.string.chat_del_sms_syntax);  }  if (nbDeleted >= 0) {    send(R.string.chat_del_sms_nb,nbDeleted);  } else   if (nbDeleted == -1) {    send(R.string.chat_del_sms_error);  }}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.589 -0500",hash_original_method="A129BE03B45CF5082261B54769E43850",hash_generated_method="80D9242F283F040C715EB74BA189EB03") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public Object decode(Object ascii) throws DecoderException {  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  if (ascii instanceof byte[]) {    return fromAscii((byte[])ascii);  }  if (ascii instanceof char[]) {    return fromAscii((char[])ascii);  }  if (ascii instanceof String) {    return fromAscii(((String)ascii).toCharArray());  }  throw new DecoderException("argument not a byte array");}  }
class C{  protected void rememberMe(HttpSecurity http) throws Exception {  http.rememberMe().key(properties.getRememberMeKey()).rememberMeServices(rememberMeServices());}  }
class C{  public static double gammToSigma(double gamma){  if (gamma <= 0 || Double.isNaN(gamma) || Double.isInfinite(gamma))   throw new IllegalArgumentException("gamma must be positive, not " + gamma);  return 1 / Math.sqrt(2 * gamma);}  }
class C{  public String toString(){  return Long.toString(get());}  }
class C{  void readData() throws IOException {  byte[] block=new byte[kBlockSize];  int rcvd;  do {    rcvd=remoteRecv(block,block.length);    updateRemoteClock();    if (rcvd != -1) {      recvStream.write(block,0,rcvd);    }  } while (rcvd > 0);}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public SeekableFileInputStream(RandomAccessFile randomAccessFile){  this.randomAccessFile=randomAccessFile;}  }
class C{  public void testTruncateSkipped(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(0,0);  index.index(1,10);  index.index(3,30);  index.index(4,40);  assertEquals(index.truncate(1),30);}  }
class C{  private String showNode(TreeNode node,boolean[] hasBar){  StringBuffer text=new StringBuffer();  for (int i=0; i < (node.level - 1); i++) {    if (hasBar[i]) {      text.append("  |       ");    } else {      text.append("          ");    }  }  if (node.level != 0) {    text.append("  |------ ");  }  text.append(node.value + "(" + node.level+ ")"+ "["+ node.context+ "]\n");  if (node.children != null) {    for (int i=0; i < node.children.size(); i++) {      boolean[] newBar=new boolean[node.level + 1];      int lvl=node.level;      if (hasBar != null) {        for (int j=0; j < lvl; j++) {          newBar[j]=hasBar[j];        }      }      if ((i == (node.children.size() - 1))) {        newBar[lvl]=false;      } else {        newBar[lvl]=true;      }      text.append(showNode(node.children.elementAt(i),newBar));    }  }  return text.toString();}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInSeconds(int intervalInSeconds){  validateInterval(intervalInSeconds);  this.interval=intervalInSeconds;  this.intervalUnit=IntervalUnit.SECOND;  return this;}  }
class C{  public void clear(){  super.setValues(new int[size()]);}  }
class C{  public RebuildWorkspaceProjectsJob(final IBuildConfiguration[] configs){  super("Building workspace");  checkState(Platform.isRunning(),"This job requires a running platform");  this.configs=checkNotNull(configs,"configs");  setSystem(false);  setUser(true);  setRule(BUILD_RULE);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  private void createSelfRequest(final HttpServerRequest request,final Buffer requestBody,final Handler<Void> afterHandler){  log.debug("Create self request for " + request.uri());  HttpClientRequest selfRequest=selfClient.request(request.method(),request.uri(),null);  if (request.headers() != null && !request.headers().isEmpty()) {    selfRequest.headers().setAll(request.headers());  }  selfRequest.exceptionHandler(null);  selfRequest.setTimeout(120000);  if (requestBody != null) {    selfRequest.end(requestBody);  } else {    selfRequest.end();  }}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  public static int dp2px(Context context,float dp){  Resources r=context.getResources();  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,r.getDisplayMetrics());  return (int)px;}  }
class C{  private static double pointsDistance(Point a,Point b){  int dx=b.x - a.x;  int dy=b.y - a.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  protected BitwiseOrExpressionImpl(){  super();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean canBeAssignedTo(TypeUsage type){  return false;}  }
class C{  public ReferenceNode clone(){  ReferenceNode result=new ReferenceNode();  result.ReferenceTypeId=ReferenceTypeId;  result.IsInverse=IsInverse;  result.TargetId=TargetId;  return result;}  }
class C{  protected void addCommonComponent(XMLComponent component){  if (fCommonComponents.contains(component)) {    return;  }  fCommonComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public JavaContentAssistInvocationContext(ITextViewer viewer,int offset,ICompilationUnit unit){  super(viewer,offset);  Assert.isNotNull(unit);  fEditor=unit;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void deleteBatch(BigInteger batchId) throws IOException {  String requestUrl=RESOURCE + "/" + batchId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public void testRecoveryAfterAnError7_Error() throws Exception {  doTestRecoveryAfterAnError(7,HadoopErrorSimulator.Kind.Error);}  }
class C{  public static double[] concatenate(double[][] vectors){  int numVectors=vectors.length;  int length=vectors[0].length;  double[] concat=new double[numVectors * length];  for (int i=0; i < vectors.length; i++) {    System.arraycopy(vectors[i],0,concat,i * length,length);  }  return concat;}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public int enumerate(ThreadGroup[] groups){  return enumerate(groups,true);}  }
class C{  public RegisterOperand makeTemp(Operand op){  RegisterOperand result;  if (op.isRegister()) {    result=makeTemp((RegisterOperand)op);  } else {    result=makeTemp(op.getType());  }  return result;}  }
class C{  private void action_treeAddAll(){  log.info("VTreeMaintenance.action_treeAddAll");}  }
class C{  public List<VirtualPoolChangeRep> listVirtualPoolChangeCandidates(URI id){  VirtualPoolChangeList response=client.get(VirtualPoolChangeList.class,getIdUrl() + "/vpool-change/vpool",id);  return defaultList(response.getVirtualPools());}  }
class C{  public MutableString(final String s){  makeCompactMutableString(s.length());  s.getChars(0,array.length,array,0);}  }
class C{  private static void dualPivotQuicksort(short[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  short ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    short t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    short t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    short t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    short t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    short t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    short t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    short t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  short pivot1=ae2;  a[e2]=a[left];  short pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      short ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  protected long jar(String destFile,FileList files,String basePath){  long kb=zipOrJar(destFile,files,basePath,false,false,true);  println("Jar " + destFile + " ("+ kb+ " KB)");  return kb;}  }
class C{  public boolean isMatch(UserMapping other){  return isMatch(other.getDomain(),other.getAttributes(),other.getGroups()) || other.isMatch(getDomain(),getAttributes(),getGroups());}  }
class C{  public void testWriteTrack_oneInvalidLocation() throws Exception {  Location[] locations={new Location("fake0"),new Location("fake1")};  fillLocations(locations);  locations[0].setLatitude(100.0);  locations[1].setLatitude(100.0);  assertEquals(locations.length,myTracksProviderUtils.bulkInsertTrackPoint(locations,locations.length,TRACK_ID));  trackWriter.prepare(outputStream);  trackWriter.writeHeader(tracks);  trackWriter.writeBeginTracks();  trackWriter.writeBeginTrack(tracks[0],null);  trackWriter.writeEndTrack(tracks[0],null);  trackWriter.writeEndTracks();  trackWriter.writeFooter();  trackWriter.close();  mocksControl.replay();  assertTrue(fileTrackExporter.writeTrack(outputStream));  mocksControl.verify();}  }
class C{  Operand pop(Register s){  Stack<Operand> stack=get(s);  if (stack == null) {    throw new OptimizingCompilerException("Failure in translating out of SSA form: trying to pop operand from non-existant stack");  } else {    return stack.pop();  }}  }
class C{  public double inference(Document d,double[] pzd){  initializeTopics(d);  return inferenceByGibbsSampling(d,pzd,30,10);}  }
class C{  public int threadCount(){synchronized (this) {    return this.participatingThreads.size();  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/discover-array-affinity") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskList discoverArrayAffinityForHosts(ArrayAffinityHostParam param){  List<URI> hostIds=param.getHosts();  ArgValidator.checkFieldNotEmpty(hostIds,"hosts");  for (  URI hostId : hostIds) {    ArgValidator.checkFieldUriType(hostId,Host.class,"host");    queryObject(Host.class,hostId,true);  }  return createHostArrayAffinityTasks(hostIds);}  }
class C{  public static Properties read(String filepath) throws FileNotFoundException {  Properties rval;  BufferedInputStream bis=null;  try {    File file=new File(filepath);    bis=new BufferedInputStream(new FileInputStream(file));    rval=new Properties();    rval.load(bis);    return rval;  } catch (  IOException e) {  } finally {    if (bis != null) {      try {        bis.close();      } catch (      IOException e) {      }      bis=null;    }  }  try {    File file=new File(System.getProperty("java.home") + File.separator + filepath);    bis=new BufferedInputStream(new FileInputStream(file));    rval=new Properties();    rval.load(bis);    return rval;  } catch (  IOException e) {  } finally {    if (bis != null) {      try {        bis.close();      } catch (      IOException e) {      }      bis=null;    }  }  throw new FileNotFoundException("Property file " + filepath + " not found");}  }
class C{  private void updateSubdirCombo(){  updatingSubDirCB=true;  JComboBox<String> cb=getJSubdirCB();  String selItem=(String)cb.getSelectedItem();  cb.removeAllItems();  cb.addItem(Messages.getString("OptionPanel.none"));  File[] files=(new File(client.getSubmissionDirectory())).listFiles();  if (files == null) {    System.out.println("No file found");    System.out.println("Directory: " + jSubmissionDirField.getText());  }  genAOSuffixes=getSuffixes();  if (genAOSuffixes != null) {    int addedItems=1, selIndex=0;    for (int i=0; i < files.length; i++) {      if (files[i].isDirectory()) {        File[] subfiles=files[i].listFiles();        subfilesloop:         for (int j=0; j < subfiles.length; j++) {          if (subfiles[j].isDirectory()) {            String dirname=subfiles[j].getName();            for (int k=0; k < cb.getItemCount(); k++) {              if (dirname.equals(cb.getItemAt(k).toString()))               continue subfilesloop;            }            if (hasDirValidFiles(subfiles[j])) {              cb.addItem(dirname);              if (dirname.equals(selItem))               selIndex=addedItems;              addedItems++;            }          }        }      }    }    cb.setSelectedIndex(selIndex);  }  updatingSubDirCB=false;}  }
class C{  public void processEvent(Object theEvent){  if (theEvent instanceof TimerEvent) {    processTimeEvent((TimerEvent)theEvent);    return;  }  EventBean eventBean;  if (theEvent instanceof EventBean) {    eventBean=(EventBean)theEvent;  } else {    eventBean=unisolatedServices.getEventAdapterService().adapterForBean(theEvent);  }  processWrappedEvent(eventBean);}  }
class C{  public DrawerBuilder withOnDrawerItemClickListener(@NonNull Drawer.OnDrawerItemClickListener onDrawerItemClickListener){  this.mOnDrawerItemClickListener=onDrawerItemClickListener;  return this;}  }
class C{  public int nextLabel(Automaton a){  if (label > t.max) {    transition++;    if (transition >= a.getNumTransitions(state)) {      label=-1;      return -1;    }    a.getTransition(state,transition,t);    label=t.min;    to=t.dest;  }  return label++;}  }
class C{  private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.182 -0400",hash_original_method="1338BBC1C2AD825C126016F6F886BB61",hash_generated_method="EDE6373B1FA03748C45E8525AECCDB05") public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  protected void updateButtons(){  clearButton().setVisible((!searchField.isRegularSearchMode() || searchField.isMacLayoutStyle()) && hasText());  boolean clearNotHere=(searchField.isMacLayoutStyle() || !clearButton().isVisible());  searchButton().setVisible((searchField.getFindPopupMenu() == null || usingSeperatePopupButton()) && clearNotHere);  popupButton().setVisible(searchField.getFindPopupMenu() != null && (clearNotHere || usingSeperatePopupButton()));  if (searchField.isRegularSearchMode()) {    searchButton().setRolloverIcon(getNewIcon(searchButton().getRolloverIcon(),"SearchField.rolloverIcon"));    searchButton().setPressedIcon(getNewIcon(searchButton().getPressedIcon(),"SearchField.pressedIcon"));  } else {    if (shouldReplaceResource(searchButton().getRolloverIcon())) {      searchButton().setRolloverIcon(null);    }    if (shouldReplaceResource(searchButton().getPressedIcon())) {      searchButton().setPressedIcon(null);    }  }}  }
class C{  @Override public VirtualFileSystem newInstance(URI baseUri) throws ServerException {  return new LocalFileSystem(workspaceId,baseUri == null ? URI.create("") : baseUri,userContext,getMountPoint(true),searcherProvider,vfsRegistry);}  }
class C{  private void parseApplication(Node node){  String appId=null;  String name=null;  String appRef=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (appId == null) {        if ((appId=getValueByParamName("AppID",childnode,TYPE_TXT)) != null) {          continue;        }      }      if (name == null) {        if ((name=getValueByParamName("Name",childnode,TYPE_TXT)) != null) {          continue;        }      }      if (appRef == null) {        if ((appRef=getValueByParamName("AppRef",childnode,TYPE_TXT)) != null) {        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }  if (appRef != null && (appRef.equalsIgnoreCase("IMS-Settings") || appRef.equalsIgnoreCase("ims-rcse"))) {    parseIMS(node);  }  if (appRef != null && appRef.equalsIgnoreCase("RCSe-Settings")) {    parseRCSe(node);  }}  }
class C{  private void loadFilesInMemory(){  printer.jumpLine();  CustomLogger.log("Then I find the file you want me to analyse and try to load them:");  files=new File[fileSize];  for (int i=0; i < args.length - firstFileIndexCorrection; i++) {    files[i]=new File(args[i + firstFileIndexCorrection]);    if (!files[i].exists()) {      printer.fileNotFound(args[i + firstFileIndexCorrection]);      exceptionOccursWhenLoadingFiles=true;    } else {      printer.fileFound(args[i + firstFileIndexCorrection]);    }  }  if (files.length < 2) {    exceptionOccursWhenLoadingFiles=true;  }}  }
class C{  public void blur(final int ulx,final int uly,final int lrx,final int lry){  filter(ulx,uly,lrx,lry,FilterMode.FILTER_BLUR,-1);}  }
class C{  public BLAKE512(){  super();}  }
class C{  public void addBlockTemplate(Block block){  if (mBlockTemplates.containsKey(block.getType())) {    Log.i(TAG,"Replacing block: " + block.getType());  }  mBlockTemplates.put(block.getType(),new Block.Builder(block).build());}  }
class C{  public boolean isSimple(){  if (isComposite()) {    for (    Region r : getRegions()) {      for (      Vertex v : r.getVertices()) {        if (v instanceof RegularState) {          return false;        }      }    }  }  return true;}  }
class C{  public void registerInput(String varName,RDD<String> rdd,String format) throws DMLRuntimeException {  registerInput(varName,rdd.toJavaRDD().mapToPair(new ConvertStringToLongTextPair()),format,-1,-1,-1,null);}  }
class C{  public LatexLabel(double... c){  this(coordToString(c),AbstractDrawer.DEFAULT_COLOR,c);}  }
class C{  public void columnAdded(TableColumnModelEvent e){  LimeTableColumn addedColumn=getToColumn(e);  LimeTableColumn ltc=addedColumn;  setVisibility(ltc,true);  TableColumnModel tcm=table.getColumnModel();  int order=getOrder(ltc);  int current=tcm.getColumnIndex(ltc.getId());  int max=tcm.getColumnCount();  if (order != current) {    stopListening();    order=Math.min(order,max - 1);    tcm.moveColumn(current,order);    for (current=order + 1; current < max; current++) {      ltc=(LimeTableColumn)tcm.getColumn(current);      setOrder(ltc,current);    }    for (Iterator<LimeTableColumn> i=table.getHiddenColumns(); i.hasNext(); ) {      ltc=i.next();      current=getOrder(ltc);      if (current > order)       setOrder(ltc,current + 1);    }    startListening();  }  if (listener != null)   listener.columnAdded(addedColumn,table);  save();}  }
class C{  public boolean isSetNewmap(){  return this.newmap != null;}  }
class C{  private DBMSData convertLCRtoDBMSDataDDL(PlogLCR LCR){  LCR.parseDDLInfo();  StatementData statement=new StatementData(LCR.SQLText,null,LCR.currentSchema);  return statement;}  }
class C{  static double sin_theagentd_lookup(double rad){  float index=(float)(rad * lookupSizeOverPi2);  int ii=(int)java.lang.Math.floor(index);  float alpha=index - ii;  int i=ii & lookupTableSizeMinus1;  float sin1=sinTable[i];  float sin2=sinTable[i + 1];  return sin1 + (sin2 - sin1) * alpha;}  }
class C{  public void applyPattern(String pattern){  this.pattern=pattern;  if (patternTokens != null) {    patternTokens.clear();    patternTokens=null;  }}  }
class C{  private static void log(String text){}  }
class C{  public Graph patternToDagMeek(){  return SearchGraphUtils.dagFromPattern(pattern);}  }
class C{  private static void matchListedProcesses(OutputAnalyzer output) throws Exception {  int matchedCount=output.shouldMatchByLine(JCMD_LIST_REGEX);  assertGreaterThan(matchedCount,0,"Found no lines matching pattern: " + JCMD_LIST_REGEX);}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  @Override public void close() throws IOException {  super.close();  FileUtils.forceDelete(f);}  }
class C{  public static String velocityGenerateCode(PsiClass clazz,Collection<? extends PsiMember> selectedMembers,Map<String,String> params,String templateMacro,int sortElements,boolean useFullyQualifiedName) throws GenerateCodeException {  return velocityGenerateCode(clazz,selectedMembers,Collections.<PsiMember>emptyList(),params,Collections.<String,Object>emptyMap(),templateMacro,sortElements,useFullyQualifiedName,false);}  }
class C{  private void action_Find(boolean includeAliasCombination){  log.info("");  MQuery query=null;  if (m_query != null)   query=m_query.deepCopy(); else   query=new MQuery();  if (includeAliasCombination && f_Alias != null && f_Alias.getValue().toString().length() > 0) {    String value=f_Alias.getValue().toString().toUpperCase();    if (!value.endsWith("%"))     value+="%";    query.addRestriction("UPPER(Alias)",MQuery.LIKE,value);  }  if (includeAliasCombination && f_Combination.getValue().toString().length() > 0) {    String value=f_Combination.getValue().toString().toUpperCase();    if (!value.endsWith("%"))     value+="%";    query.addRestriction("UPPER(Combination)",MQuery.LIKE,value);  }  if (f_AD_Org_ID != null && f_AD_Org_ID.getValue() != null)   query.addRestriction("AD_Org_ID",MQuery.EQUAL,f_AD_Org_ID.getValue());  if (f_Account_ID != null && f_Account_ID.getValue() != null)   query.addRestriction("Account_ID",MQuery.EQUAL,f_Account_ID.getValue());  if (f_SubAcct_ID != null && f_SubAcct_ID.getValue() != null)   query.addRestriction("C_SubAcct_ID",MQuery.EQUAL,f_SubAcct_ID.getValue());  if (f_M_Product_ID != null && f_M_Product_ID.getValue() != null)   query.addRestriction("M_Product_ID",MQuery.EQUAL,f_M_Product_ID.getValue());  if (f_C_BPartner_ID != null && f_C_BPartner_ID.getValue() != null)   query.addRestriction("C_BPartner_ID",MQuery.EQUAL,f_C_BPartner_ID.getValue());  if (f_C_Campaign_ID != null && f_C_Campaign_ID.getValue() != null)   query.addRestriction("C_Campaign_ID",MQuery.EQUAL,f_C_Campaign_ID.getValue());  if (f_C_LocFrom_ID != null && f_C_LocFrom_ID.getValue() != null)   query.addRestriction("C_LocFrom_ID",MQuery.EQUAL,f_C_LocFrom_ID.getValue());  if (f_C_LocTo_ID != null && f_C_LocTo_ID.getValue() != null)   query.addRestriction("C_LocTo_ID",MQuery.EQUAL,f_C_LocTo_ID.getValue());  if (f_C_Project_ID != null && f_C_Project_ID.getValue() != null)   query.addRestriction("C_Project_ID",MQuery.EQUAL,f_C_Project_ID.getValue());  if (f_C_SalesRegion_ID != null && f_C_SalesRegion_ID.getValue() != null)   query.addRestriction("C_SalesRegion_ID",MQuery.EQUAL,f_C_SalesRegion_ID.getValue());  if (f_AD_OrgTrx_ID != null && f_AD_OrgTrx_ID.getValue() != null)   query.addRestriction("AD_OrgTrx_ID",MQuery.EQUAL,f_AD_OrgTrx_ID.getValue());  if (f_C_Activity_ID != null && f_C_Activity_ID.getValue() != null)   query.addRestriction("C_Activity_ID",MQuery.EQUAL,f_C_Activity_ID.getValue());  if (f_User1_ID != null && f_User1_ID.getValue() != null)   query.addRestriction("User1_ID",MQuery.EQUAL,f_User1_ID.getValue());  if (f_User2_ID != null && f_User2_ID.getValue() != null)   query.addRestriction("User2_ID",MQuery.EQUAL,f_User2_ID.getValue());  m_mTab.setQuery(query);  m_mTab.query(false);  statusBar.setStatusDB(String.valueOf(m_mTab.getRowCount()));}  }
class C{  public double angle(IMovingAgent agent){  return Geometric.angle(this.location,agent.getLocation());}  }
class C{  public void useSpriteSheetRender(CCSpriteSheet spriteSheet){  usesSpriteSheet_=true;  textureAtlas_=spriteSheet.getTextureAtlas();  spriteSheet_=spriteSheet;}  }
class C{  private void nextChunk() throws IOException {  if (!bof) {    readCRLF();  }  chunkSize=getChunkSizeFromInputStream(in);  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;    parseTrailerHeaders();  }}  }
class C{  public static int sizeofNullableString(final SimpleString str){  if (str == null) {    return 1;  } else {    return 1 + str.sizeof();  }}  }
class C{  public BikeCustomizedOsmNetworkReader_Unequil(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  @Override public TagLib execute(Config config,Tag tag,TagLibTag libTag,FunctionLib[] flibs,Data data) throws TemplateException {  return null;}  }
class C{  public PduPart removePart(int index){  return mParts.remove(index);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CHALLENGE:    return isSetChallenge();case RESPONSE:  return isSetResponse();}throw new IllegalStateException();}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  private void failOnStart(final Throwable cause){  if (cause != null) {    logger.log(Level.INFO,"locator is exiting due to an exception",cause);  } else {    logger.log(Level.INFO,"locator is exiting normally");  }  if (this.locator != null) {    this.locator.stop();    this.locator=null;  }  if (this.process != null) {    this.process.stop();    this.process=null;  }  INSTANCE.compareAndSet(this,null);  this.running.set(false);}  }
class C{  public RollingResourceAppender(Layout layout,Resource res,Charset charset,RetireListener listener) throws IOException {  this(layout,res,charset,true,DEFAULT_MAX_FILE_SIZE,DEFAULT_MAX_BACKUP_INDEX,60,listener);}  }
class C{  public static <Item extends IItem>void addAllSubItems(Item item,List<Item> items){  if (item instanceof IExpandable && !((IExpandable)item).isExpanded() && ((IExpandable)item).getSubItems() != null) {    List<Item> subItems=(List<Item>)((IExpandable<Item,?>)item).getSubItems();    Item subItem;    for (int i=0, size=subItems.size(); i < size; i++) {      subItem=subItems.get(i);      items.add(subItem);      addAllSubItems(subItem,items);    }  }}  }
class C{  public Process start() throws IOException {  String[] cmdArray=command.toArray(new String[command.size()]);  String[] envArray=new String[environment.size()];  int i=0;  for (  Map.Entry<String,String> entry : environment.entrySet()) {    envArray[i++]=entry.getKey() + "=" + entry.getValue();  }  return ProcessManager.getInstance().exec(cmdArray,envArray,directory,redirectErrorStream);}  }
class C{  public boolean isSpecial(){  return special;}  }
class C{  @Override public void onAdChanged(){  notifyDataSetChanged();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public LinearLocation(){}  }
class C{  public void exitApplication(){  exitApplication(false);}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3,String k4,int v4){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(4);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);  m_enums.put(k4,v4);}  }
class C{  public Object readMessage() throws IOException, FormatErrorException {  while (true) {    fillBuffer(HDRLEN);    long pos=position();    int s1=buffer.get() & 0xFF;    int s2=buffer.get() & 0xFF;    int msgSize=s1 + (256 * s2);    int msgType=buffer.get() & 0xFF;    try {      fillBuffer(msgSize);    } catch (    EOFException e) {      errors.add(new FormatErrorException(pos,"Unexpected end of file"));      throw e;    }    Object msg;switch (msgType) {case MESSAGE_TYPE_DATA:      s1=buffer.get() & 0xFF;    s2=buffer.get() & 0xFF;  int msgID=s1 + (256 * s2);Subscription subscription=null;if (msgID < messageSubscriptions.size()) subscription=messageSubscriptions.get(msgID);if (subscription == null) {position(pos);errors.add(new FormatErrorException(pos,"Unknown DATA subscription ID: " + msgID));buffer.position(buffer.position() + msgSize - 1);continue;}msg=new MessageData(subscription.format,buffer,subscription.multiID);break;case MESSAGE_TYPE_INFO:msg=new MessageInfo(buffer);break;case MESSAGE_TYPE_PARAMETER:msg=new MessageParameter(buffer);break;case MESSAGE_TYPE_FORMAT:msg=new MessageFormat(buffer,msgSize);break;case MESSAGE_TYPE_ADD_LOGGED_MSG:msg=new MessageAddLogged(buffer,msgSize);break;case MESSAGE_TYPE_DROPOUT:msg=new MessageDropout(buffer);break;case MESSAGE_TYPE_LOG:msg=new MessageLog(buffer,msgSize);break;case MESSAGE_TYPE_REMOVE_LOGGED_MSG:case MESSAGE_TYPE_SYNC:buffer.position(buffer.position() + msgSize);continue;default :buffer.position(buffer.position() + msgSize);errors.add(new FormatErrorException(pos,"Unknown message type: " + msgType));continue;}int sizeParsed=(int)(position() - pos - HDRLEN);if (sizeParsed != msgSize) {errors.add(new FormatErrorException(pos,"Message size mismatch, parsed: " + sizeParsed + ", msg size: "+ msgSize));buffer.position(buffer.position() + msgSize - sizeParsed);}return msg;}}  }
class C{  private void readASCII(final BufferedReader buffer) throws NumberFormatException, IOException {  RajLog.i("StlPaser: Reading ASCII");  final List<Float> vertices=new ArrayList<Float>();  final List<Float> normals=new ArrayList<Float>();  final float[] tempNorms=new float[3];  int nextOffset, prevOffset, i, insert;  String line;  line=buffer.readLine();  while ((line=buffer.readLine()) != null) {    if (line.contains("facet normal ")) {      nextOffset=line.lastIndexOf(" ");      tempNorms[2]=Float.parseFloat(line.substring(nextOffset + 1));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      tempNorms[1]=Float.parseFloat(line.substring(nextOffset + 1,prevOffset));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      tempNorms[0]=Float.parseFloat(line.substring(nextOffset + 1,prevOffset));      for (i=0; i < 3; i++) {        normals.add(tempNorms[0]);        normals.add(tempNorms[1]);        normals.add(tempNorms[2]);      }    } else     if (line.contains("vertex ")) {      insert=vertices.size();      nextOffset=line.lastIndexOf(" ");      vertices.add(Float.parseFloat(line.substring(nextOffset + 1)));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      vertices.add(insert,Float.parseFloat(line.substring(nextOffset + 1,prevOffset)));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      vertices.add(insert,Float.parseFloat(line.substring(nextOffset + 1,prevOffset)));    }  }  float[] verticesArr=new float[vertices.size()];  float[] normalsArr=new float[normals.size()];  for (i=0; i < verticesArr.length; i++) {    verticesArr[i]=vertices.get(i);    normalsArr[i]=normals.get(i);  }  vertices.clear();  normals.clear();  int[] indicesArr=new int[verticesArr.length / 3];  for (i=0; i < indicesArr.length; i++)   indicesArr[i]=i;  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);}  }
class C{  protected void initializeTaskDone(Set<TaskImageContainer> tasks,Optional<Runnable> runnableWhenDone){  Set<CaptureSession> sessionSet=new HashSet<>();  Map<CaptureSession,Integer> sessionTaskCount=new HashMap<>();  for (  TaskImageContainer task : tasks) {    sessionSet.add(task.mSession);    Integer currentCount=sessionTaskCount.get(task.mSession);    if (currentCount == null) {      sessionTaskCount.put(task.mSession,1);    } else {      sessionTaskCount.put(task.mSession,currentCount + 1);    }  }synchronized (mShadowTaskMap) {    for (    CaptureSession captureSession : sessionSet) {      BlockSignalProtocol protocol=new BlockSignalProtocol();      protocol.setCount(sessionTaskCount.get(captureSession));      final ImageShadowTask shadowTask;      shadowTask=new ImageShadowTask(protocol,captureSession,runnableWhenDone);      mShadowTaskMap.put(captureSession,shadowTask);      mProcessingTaskConsumer.enqueueTask(shadowTask);    }  }}  }
class C{  public char charAt(int index){  return m_str.charAt(index);}  }
class C{  protected ObjectMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseObjectMatrix2D(this.elements,rowOffsets,columnOffsets,0);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public void focusLost(FocusEvent event){  if (event.getSource() == this.minimumRangeValue) {    validateMinimum();  } else   if (event.getSource() == this.maximumRangeValue) {    validateMaximum();  }}  }
class C{  private void validateElement(InputNode node,Section section,LabelMap map) throws Exception {  String name=node.getName();  String path=section.getPath(name);  Label label=map.getLabel(path);  if (label == null) {    label=criteria.resolve(path);  }  if (label == null) {    Position line=node.getPosition();    Class expect=type.getType();    if (map.isStrict(context) && revision.isEqual()) {      throw new ElementException("Element '%s' does not exist for %s at %s",path,expect,line);    } else {      node.skip();    }  } else {    validateUnion(node,map,label);  }}  }
class C{  @Override public String read(String pattern){  return read(Pattern.compile(pattern,Pattern.DOTALL | Pattern.MULTILINE));}  }
class C{  public static int computeMessageSize(final int fieldNumber,final MessageLite value){  return computeTagSize(fieldNumber) + computeMessageSizeNoTag(value);}  }
class C{  @SuppressWarnings("unchecked") private static void addPrivateBridgeMethods(final ClassNode node){  Set<ASTNode> accessedMethods=(Set<ASTNode>)node.getNodeMetaData(StaticTypesMarker.PV_METHODS_ACCESS);  if (accessedMethods == null)   return;  List<MethodNode> methods=new ArrayList<MethodNode>(node.getAllDeclaredMethods());  methods.addAll(node.getDeclaredConstructors());  Map<MethodNode,MethodNode> privateBridgeMethods=(Map<MethodNode,MethodNode>)node.getNodeMetaData(PRIVATE_BRIDGE_METHODS);  if (privateBridgeMethods != null) {    return;  }  privateBridgeMethods=new HashMap<MethodNode,MethodNode>();  int i=-1;  final int access=Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC;  for (  MethodNode method : methods) {    if (accessedMethods.contains(method)) {      List<String> methodSpecificGenerics=methodSpecificGenerics(method);      i++;      ClassNode declaringClass=method.getDeclaringClass();      Map<String,ClassNode> genericsSpec=createGenericsSpec(node);      genericsSpec=addMethodGenerics(method,genericsSpec);      extractSuperClassGenerics(node,declaringClass,genericsSpec);      Parameter[] methodParameters=method.getParameters();      Parameter[] newParams=new Parameter[methodParameters.length + 1];      for (int j=1; j < newParams.length; j++) {        Parameter orig=methodParameters[j - 1];        newParams[j]=new Parameter(correctToGenericsSpecRecurse(genericsSpec,orig.getOriginType(),methodSpecificGenerics),orig.getName());      }      Expression arguments;      if (method.getParameters() == null || method.getParameters().length == 0) {        arguments=ArgumentListExpression.EMPTY_ARGUMENTS;      } else {        List<Expression> args=new LinkedList<Expression>();        for (        Parameter parameter : methodParameters) {          args.add(new VariableExpression(parameter));        }        arguments=new ArgumentListExpression(args);      }      MethodNode bridge;      if (method instanceof ConstructorNode) {        ClassNode thatType=null;        Iterator<InnerClassNode> innerClasses=node.getInnerClasses();        if (innerClasses.hasNext()) {          thatType=innerClasses.next();        } else {          thatType=new InnerClassNode(node.redirect(),node.getName() + "$1",ACC_STATIC | ACC_SYNTHETIC,ClassHelper.OBJECT_TYPE);          node.getModule().addClass(thatType);        }        newParams[0]=new Parameter(thatType.getPlainNodeReference(),"$that");        Expression cce=new ConstructorCallExpression(ClassNode.THIS,arguments);        Statement body=new ExpressionStatement(cce);        bridge=node.addConstructor(ACC_SYNTHETIC,newParams,ClassNode.EMPTY_ARRAY,body);      } else {        newParams[0]=new Parameter(node.getPlainNodeReference(),"$that");        Expression receiver=method.isStatic() ? new ClassExpression(node) : new VariableExpression(newParams[0]);        MethodCallExpression mce=new MethodCallExpression(receiver,method.getName(),arguments);        mce.setMethodTarget(method);        ExpressionStatement returnStatement=new ExpressionStatement(mce);        bridge=node.addMethod("access$" + i,access,correctToGenericsSpecRecurse(genericsSpec,method.getReturnType(),methodSpecificGenerics),newParams,method.getExceptions(),returnStatement);      }      GenericsType[] origGenericsTypes=method.getGenericsTypes();      if (origGenericsTypes != null) {        bridge.setGenericsTypes(applyGenericsContextToPlaceHolders(genericsSpec,origGenericsTypes));      }      privateBridgeMethods.put(method,bridge);      bridge.addAnnotation(new AnnotationNode(COMPILESTATIC_CLASSNODE));    }  }  if (!privateBridgeMethods.isEmpty()) {    node.setNodeMetaData(PRIVATE_BRIDGE_METHODS,privateBridgeMethods);  }}  }
class C{  public static boolean isConnected(NetType netType,NetworkInfo networkInfo){  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true; else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true; else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;  return false;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void onReleased(boolean inside){  pressed=!pressed;  if (sticky) {    on=!on;  }}  }
class C{  public Trellis_3_4_Rate(){  createConstellationToTribitMap();}  }
class C{  public LocoIOModeList(){  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REQ,0x0F,0x00,"Toggle Switch, LocoIO 1.3.2"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_INPUT_REP,0x5F,0x00,"Block Detector, Active High"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_INPUT_REP,0x1F,0x10,"Block Detector, Active Low"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REQ,0x0F,0x10,"Toggle Switch, Direct Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x07,0x10,"Toggle Switch, Indirect Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REQ,0x6F,0x00,"Push Button, Active High, Direct Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x67,0x00,"Push Button, Active High, Indirect Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REQ,0x2F,0x10,"Push Button, Active Low, Direct Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x27,0x10,"Push Button, Active Low, Indirect Control"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x17,0x70,"Turnout Feedback, single sensor"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x37,0x70,"Turnout Feedback, dual sensor, #1"));  modeList.add(new LocoIOMode(0,LnConstants.OPC_SW_REP,0x37,0x60,"Turnout Feedback, dual sensor, #2"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_INPUT_REP,0xC0,0x00,"Block Occupied Indication"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_INPUT_REP,0xD0,0x00,"Block Occupied Indication, Blinking"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x81,0x10,"Steady State, single output, On at Power up"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x80,0x10,"Steady State, single output, Off at Power up"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x81,0x30,"Steady State, paired output, On at Power up"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x80,0x30,"Steady State, paired output, Off at Power up"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x91,0x10,"Steady State, single output, On at Power up, Blinking"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x90,0x10,"Steady State, single output, Off at Power up, Blinking"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x91,0x30,"Steady State, paired output, On at Power up, Blinking"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x90,0x30,"Steady State, paired output, Off at Power up, Blinking"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x88,0x20,"Pulsed, software controlled on time, single output"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x8C,0x20,"Pulsed, firmware controlled on time, single output"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x88,0x00,"Pulsed, software controlled on time, paired output"));  modeList.add(new LocoIOMode(1,LnConstants.OPC_SW_REQ,0x8C,0x00,"Pulsed, firmware controlled on time, paired output"));  validmodes=new String[modeList.size()];  for (int i=0; i <= modeList.size() - 1; i++) {    LocoIOMode m=modeList.elementAt(i);    validmodes[i]=m.getFullMode();  }}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("kafkaSampleSubscriber");  Map<String,Object> kafkaConfig=createKafkaConfig();  KafkaConsumer kafka=new KafkaConsumer(t,null);  TStream<String> msgs=kafka.subscribe(null,topic);  msgs.sink(null);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public boolean isDeclaredAsync(){  return declaredAsync;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MotifTextFieldUI();}  }
class C{  public void endEval() throws IOException {  ResponseWriter writer=getWrapped();  writer.endCDATA();  writer.endElement("eval");}  }
class C{  public static synchronized void stopAllTimers(){  for (  Timer timer : instances) {    timer.cancel();  }  instances.clear();}  }
class C{  public void update(Vector2 mousePosition){synchronized (this.mousePosition) {    if (this.mousePosition.distanceSquared(mousePosition) <= Epsilon.E)     return;    this.mousePosition=mousePosition.copy();    if (!this.updateRequired) {      this.updateRequired=true;      this.updateEDT();    }  }}  }
class C{  public void ensureCapacity(int minCapacity){  minCapacity=Math.max(4,minCapacity);  if (minCapacity >= data.length) {    int[] d=new int[minCapacity];    System.arraycopy(data,0,d,0,data.length);    data=d;  }}  }
class C{  public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashMap)readValueXml(parser,new String[1]);}  }
class C{  private static int med3(float x[],int a,int b,int c,FloatComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public boolean slotIsEmpty(@Nonnull IInventory inv,int slot){  return inv.getStackInSlot(slot) == null;}  }
class C{  public boolean commitFinalResult(String text){  commitText(text);  mPrevText="";  mGlueCount=0;  return true;}  }
class C{  public static int hash(Env env,ObjectValue val){  return env.hash(val.getObjectValue());}  }
class C{  private String generate(PreparedStatement pstmt){  try {    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MOrder order=new MOrder(getCtx(),rs,get_TrxName());      if (!p_ConsolidateDocument || (m_invoice != null && m_invoice.getC_BPartner_Location_ID() != order.getBill_Location_ID()))       completeInvoice();      boolean completeOrder=MOrder.INVOICERULE_AfterOrderDelivered.equals(order.getInvoiceRule());      boolean doInvoice=false;      if (MOrder.INVOICERULE_CustomerScheduleAfterDelivery.equals(order.getInvoiceRule())) {        m_bp=new MBPartner(getCtx(),order.getBill_BPartner_ID(),null);        if (m_bp.getC_InvoiceSchedule_ID() == 0) {          log.warning("BPartner has no Schedule - set to After Delivery");          order.setInvoiceRule(MOrder.INVOICERULE_AfterDelivery);          order.saveEx();        } else {          MInvoiceSchedule is=MInvoiceSchedule.get(getCtx(),m_bp.getC_InvoiceSchedule_ID(),get_TrxName());          if (is.canInvoice(order.getDateOrdered(),order.getGrandTotal()))           doInvoice=true; else           continue;        }      }      if (doInvoice || MOrder.INVOICERULE_AfterDelivery.equals(order.getInvoiceRule())) {        MInOut[] shipments=order.getShipments();        for (int i=0; i < shipments.length; i++) {          MInOut ship=shipments[i];          if (!ship.isComplete() || ship.getDocStatus().equals(MInOut.DOCSTATUS_Reversed))           continue;          MInOutLine[] shipLines=ship.getLines(false);          for (int j=0; j < shipLines.length; j++) {            MInOutLine shipLine=shipLines[j];            if (!order.isOrderLine(shipLine.getC_OrderLine_ID()))             continue;            if (!shipLine.isInvoiced())             createLine(order,ship,shipLine);          }          m_line+=1000;        }      } else {        MOrderLine[] oLines=order.getLines(true,null);        for (int i=0; i < oLines.length; i++) {          MOrderLine oLine=oLines[i];          BigDecimal toInvoice=oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced());          if (toInvoice.compareTo(Env.ZERO) == 0 && oLine.getM_Product_ID() != 0)           continue;          BigDecimal notInvoicedShipment=oLine.getQtyDelivered().subtract(oLine.getQtyInvoiced());          boolean fullyDelivered=oLine.getQtyOrdered().compareTo(oLine.getQtyDelivered()) == 0;          if (completeOrder && !fullyDelivered) {            log.fine("Failed CompleteOrder - " + oLine);            addLog("Failed CompleteOrder - " + oLine);            completeOrder=false;            break;          } else           if (MOrder.INVOICERULE_Immediate.equals(order.getInvoiceRule())) {            log.fine("Immediate - ToInvoice=" + toInvoice + " - "+ oLine);            BigDecimal qtyEntered=toInvoice;            if (oLine.getQtyEntered().compareTo(oLine.getQtyOrdered()) != 0)             qtyEntered=toInvoice.multiply(oLine.getQtyEntered()).divide(oLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP);            createLine(order,oLine,toInvoice,qtyEntered);          } else {            log.fine("Failed: " + order.getInvoiceRule() + " - ToInvoice="+ toInvoice+ " - "+ oLine);            addLog("Failed: " + order.getInvoiceRule() + " - ToInvoice="+ toInvoice+ " - "+ oLine);          }        }        if (MOrder.INVOICERULE_Immediate.equals(order.getInvoiceRule()))         m_line+=1000;      }      if (completeOrder && MOrder.INVOICERULE_AfterOrderDelivered.equals(order.getInvoiceRule())) {        MInOut[] shipments=order.getShipments();        for (int i=0; i < shipments.length; i++) {          MInOut ship=shipments[i];          if (!ship.isComplete() || ship.getDocStatus().equals(MInOut.DOCSTATUS_Reversed))           continue;          MInOutLine[] shipLines=ship.getLines(false);          for (int j=0; j < shipLines.length; j++) {            MInOutLine shipLine=shipLines[j];            if (!order.isOrderLine(shipLine.getC_OrderLine_ID()))             continue;            if (!shipLine.isInvoiced())             createLine(order,ship,shipLine);          }          m_line+=1000;        }      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  completeInvoice();  return "@Created@ = " + m_created;}  }
class C{  public OptionSet removeProxyUri(){  proxy_uri=null;  return this;}  }
class C{  public void addProgressListener(ProgressListener listener){  listeners.addListener(listener);}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  @Override public UpdateResponse add(SolrInputDocument doc,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  return this.shards.server4write(doc).add(doc,commitWithinMs);}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public void attach() throws MonitorException {  updateBuffer=pdb.getByteBuffer().duplicate();  if (interval > 0) {    samplerTask=new SamplerTask();    timer.schedule(samplerTask,0,interval);  }}  }
class C{  private String newSentence(Random r,int maxSentenceLength){  StringBuilder sb=new StringBuilder();  int numElements=TestUtil.nextInt(r,1,maxSentenceLength);  for (int i=0; i < numElements; i++) {    if (sb.length() > 0) {      sb.append(' ');      sb.append((char)TestUtil.nextInt(r,'a','z'));    } else {      sb.append((char)TestUtil.nextInt(r,'A','Z'));    }  }  sb.append(". ");  return sb.toString();}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public static <T extends Comparable<?>>Range<T> singleton(T endpoint){  return Range.range(endpoint,BoundType.CLOSED,endpoint,BoundType.CLOSED);}  }
class C{  public ReplDBMSEvent createEvent(long seqno,String shardId){  return createEvent(seqno,(short)0,true,shardId);}  }
class C{  public Matrix3f invert(){  return invert(null);}  }
class C{  private boolean isDaily(){  return DAILY.equalsIgnoreCase(this.executionWindowType);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:54.400 -0500",hash_original_method="9326E50D231DBE55A4CC7DEFA5FC4FF2",hash_generated_method="AFBCD72A8015E7440F7486AFB8662303") private static int hashIntArray(int[] oid){  int intHash=0;  for (int i=0; i < oid.length && i < 4; i++) {    intHash+=oid[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public DoubleMatrix1D make(int size){  if (this == sparse)   return new SparseDoubleMatrix1D(size);  return new DenseDoubleMatrix1D(size);}  }
class C{  public static String guessMimeTypeFromExtension(String extension){  if (extension == null || extension.isEmpty()) {    return null;  }  return extensionToMimeTypeMap.get(extension);}  }
class C{  private static File createTempDirectory(){  if (tmp != null) {    return tmp;  }  try {    tmp=File.createTempFile("usb4java",null);    if (!tmp.delete()) {      throw new IOException("Unable to delete temporary file " + tmp);    }    if (!tmp.mkdirs()) {      throw new IOException("Unable to create temporary directory " + tmp);    }    tmp.deleteOnExit();    return tmp;  } catch (  final IOException e) {    throw new LoaderException("Unable to create temporary directory " + "for usb4java natives: " + e,e);  }}  }
class C{  public double[] toGeocentricFrame(LatLonPoint llpt){  double lat_=(double)llpt.getY();  double lon_=(double)llpt.getX();  double latitude=ProjMath.degToRad(lat_);  double longitude=ProjMath.degToRad(lon_);  double enuVector[]=new double[3];  double ecefVector[]=new double[3];  enuVector[0]=this.x;  enuVector[1]=this.y;  enuVector[2]=this.z;  enu2ecef(ecefVector,latitude,longitude,enuVector);  return ecefVector;}  }
class C{  public SimpleDirectory(Map<String,ObjectType> objects){  this.objects=objects;}  }
class C{  private void createTableIndexes(MTable mTable,DatabaseMetaData md){  String tableName=mTable.getTableName();  log.info(tableName);  String catalog=m_dbSource.getCatalog();  String schema=m_dbSource.getSchema();  String table=tableName.toUpperCase();  try {    ResultSet sourceIndex=md.getIndexInfo(catalog,schema,table,false,false);  } catch (  Exception e) {  }}  }
class C{  public boolean isLocked(){  return locker.get();}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public void handleWindowOpeningEvent(){  createWindow();  _manager.enableActions(getAppropriateActions());}  }
class C{  protected boolean switchProfiles(IProfile newSelection){  if (newSelection == null) {    return false;  }  if (mCurrentProfile == newSelection) {    return true;  }  if (mAlternativeProfileHeaderSwitching) {    int prevSelection=-1;    if (mProfileFirst == newSelection) {      prevSelection=1;    } else     if (mProfileSecond == newSelection) {      prevSelection=2;    } else     if (mProfileThird == newSelection) {      prevSelection=3;    }    IProfile tmp=mCurrentProfile;    mCurrentProfile=newSelection;    if (prevSelection == 1) {      mProfileFirst=tmp;    } else     if (prevSelection == 2) {      mProfileSecond=tmp;    } else     if (prevSelection == 3) {      mProfileThird=tmp;    }  } else {    if (mProfiles != null) {      ArrayList<IProfile> previousActiveProfiles=new ArrayList<>(Arrays.asList(mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird));      if (previousActiveProfiles.contains(newSelection)) {        int position=-1;        for (int i=0; i < 4; i++) {          if (previousActiveProfiles.get(i) == newSelection) {            position=i;            break;          }        }        if (position != -1) {          previousActiveProfiles.remove(position);          previousActiveProfiles.add(0,newSelection);          mCurrentProfile=previousActiveProfiles.get(0);          mProfileFirst=previousActiveProfiles.get(1);          mProfileSecond=previousActiveProfiles.get(2);          mProfileThird=previousActiveProfiles.get(3);        }      } else {        mProfileThird=mProfileSecond;        mProfileSecond=mProfileFirst;        mProfileFirst=mCurrentProfile;        mCurrentProfile=newSelection;      }    }  }  buildProfiles();  return false;}  }
class C{  public static Driver driver(String uri,AuthToken authToken){  return driver(uri,authToken,Config.defaultConfig());}  }
class C{  public static List<GeoTimeSerie> chunk(GeoTimeSerie gts,long lastchunk,long chunkwidth,long chunkcount,String chunklabel,boolean keepempty) throws WarpScriptException {  return chunk(gts,lastchunk,chunkwidth,chunkcount,chunklabel,keepempty,0L);}  }
class C{  public void invalidate(){}  }
class C{  public ImageSource tiling(boolean tile){  this.tile=tile;  return this;}  }
class C{  public static boolean isNullConversion(Class<?> src,Class<?> dst,boolean keepInterfaces){  if (src == dst)   return true;  if (!keepInterfaces) {    if (dst.isInterface())     dst=Object.class;    if (src.isInterface())     src=Object.class;    if (src == dst)     return true;  }  if (isNullType(src))   return !dst.isPrimitive();  if (!src.isPrimitive())   return dst.isAssignableFrom(src);  if (!dst.isPrimitive())   return false;  Wrapper sw=Wrapper.forPrimitiveType(src);  if (dst == int.class)   return sw.isSubwordOrInt();  Wrapper dw=Wrapper.forPrimitiveType(dst);  if (!sw.isSubwordOrInt())   return false;  if (!dw.isSubwordOrInt())   return false;  if (!dw.isSigned() && sw.isSigned())   return false;  return dw.bitWidth() > sw.bitWidth();}  }
class C{  public MaterialContainer(final Widget... widgets){  this();  for (  Widget w : widgets) {    add(w);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testSeqnoOrdering() throws Exception {  File logDir=prepareLogDir("testSeqnoOrdering");  DiskLog log=openLog(logDir,false);  LogConnection conn=log.connect(false);  THLEvent e25=createTHLEvent(25);  conn.store(e25,true);  THLEvent e24=createTHLEvent(24);  try {    conn.store(e24,true);    throw new Exception("Able to store a decreasing seqno on same connection");  } catch (  LogConsistencyException e) {  }  conn.release();  LogConnection conn2=log.connect(false);  THLEvent e24b=createTHLEvent(24);  try {    conn2.store(e24b,true);    throw new Exception("Able to store a decreasing seqno on new connection");  } catch (  LogConsistencyException e) {  }  conn2.release();  log.release();  DiskLog log2=openLog(logDir,false);  LogConnection conn3=log2.connect(false);  THLEvent e24c=createTHLEvent(24);  try {    conn3.store(e24c,true);    throw new Exception("Able to store a decreasing seqno on newly opened log");  } catch (  LogConsistencyException e) {  }  conn3.release();  log2.release();}  }
class C{  public final AssertSubscriber<T> assertErrorWith(Consumer<? super Throwable> expectation){  assertNotComplete();  int s=errors.size();  if (s == 0) {    throw new AssertionError("No error",null);  }  if (s == 1) {    expectation.accept(errors.get(0));  }  if (s > 1) {    throw new AssertionError("Multiple errors: " + s,null);  }  return this;}  }
class C{  public void onWorkerPathFailed(){  worker.performTeleportToTarget();  onReachedTaskBlock();}  }
class C{  public void debug(Object message,Throwable t){}  }
class C{  public static double ceil(double x){  double y;  if (x != x) {    return x;  }  y=floor(x);  if (y == x) {    return y;  }  y+=1.0;  if (y == 0) {    return x * y;  }  return y;}  }
class C{  public boolean retainEntries(TLongFloatProcedure procedure){  boolean modified=false;  byte[] states=_states;  long[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
