class C{  public void schedule(Job... jobs){  if (jobs == null) {    throw new NullPointerException("Null objects can not accept!");  }  for (  Job j : jobs) {    schedule(j);  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public double[] remove(int i){  boundsCheck(i,0);  int rows=sizes.size();  if (i >= rows)   throw new ArrayIndexOutOfBoundsException("LBJ: DVector2D: Can't remove row at index " + i + " as it is larger than the size ("+ rows+ ")");  double[] result=vector[i];  for (int j=i + 1; j < rows; ++j)   vector[j - 1]=vector[j];  vector[rows - 1]=null;  sizes.remove(i);  return result;}  }
class C{  protected StatusObject generateErrorResult(String code,Throwable error){  String message="";  while (error != null && error.getCause() != null) {    error=error.getCause();  }  if (error != null && error.getMessage() != null) {    message=error.getMessage();  }  StatusObject status=new StatusObject(code,"error",message);  if (error != null) {    status.setApplication(error.getClass().getCanonicalName());  }  return status;}  }
class C{  public void init(IEditorSite site,IEditorInput editorInput) throws PartInitException {  if (!(editorInput instanceof IFileEditorInput))   throw new PartInitException("Invalid Input: Must be IFileEditorInput");  super.init(site,editorInput);}  }
class C{  public double area(){  return Imgproc.contourArea(mat);}  }
class C{  @Override public boolean canSeekBackward(){  return getNumberOfFrames() > 1;}  }
class C{  private void createKDCs(Element adStore,IIdentityStoreData store){  Collection<String> kdcHosts=store.getExtendedIdentityStoreData().getConnectionStrings();  if (kdcHosts.isEmpty()) {    return;  }  Iterator<String> it=kdcHosts.iterator();  while (it.hasNext()) {    String kdcHost=it.next();    Element kdcEle=doc.createElement(SAMLNames.KDC);    kdcEle.appendChild(doc.createTextNode(kdcHost));    adStore.appendChild(kdcEle);  }}  }
class C{  public static String readStringWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_STRING)   state.output.fatal("Line " + d.lineNumber + " has no string after preamble '"+ preamble+ "'\n-->"+ d.data);  return (String)(d.s);}  }
class C{  public void readFrom(ChannelBuffer data){  this.version=data.readByte();  this.type=OFType.valueOf(data.readByte());  this.length=data.readShort();  this.xid=data.readInt();}  }
class C{  public void updateSelectedCustomer(String organizationId,VOOrganization voOrganization){  for (int i=0; i < customers.size(); i++) {    Organization customer=customers.get(i);    if (customer.getOrganizationId().equals(organizationId)) {      customer.setVOOrganization(voOrganization);      break;    }  }}  }
class C{  public boolean isSetSuccess(){  return EncodingUtils.testBit(__isset_bitfield,__SUCCESS_ISSET_ID);}  }
class C{  protected StyledText createStyledText(Composite parent){  return new StyledText(parent,getStyle());}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public Builder classifierName(String classifierName){  Validator.notNull(classifierName,"'classifierName' cannot be null");  this.classifierName=classifierName;  return this;}  }
class C{  private void validateEmrClusterDefinition(Integer expectedEmrClusterDefinitionId,String expectedNamespace,String expectedEmrClusterDefinitionName,EmrClusterDefinition expectedEmrClusterConfiguration,EmrClusterDefinitionInformation actualEmrClusterDefinition){  assertNotNull(actualEmrClusterDefinition);  if (expectedEmrClusterDefinitionId != null) {    assertEquals(expectedEmrClusterDefinitionId,Integer.valueOf(actualEmrClusterDefinition.getId()));  }  assertEquals(expectedNamespace,actualEmrClusterDefinition.getEmrClusterDefinitionKey().getNamespace());  assertEquals(expectedEmrClusterDefinitionName,actualEmrClusterDefinition.getEmrClusterDefinitionKey().getEmrClusterDefinitionName());  assertEquals(expectedEmrClusterConfiguration,actualEmrClusterDefinition.getEmrClusterDefinition());}  }
class C{  protected String resolveToOSPath(IPath path){  if (path != null) {    IResource res=null;    if (path.getDevice() == null) {      res=getResource(path);    }    if (res == null) {      return path.toOSString();    }    IPath location=res.getLocation();    if (location != null) {      return location.toOSString();    }  }  return null;}  }
class C{  @Override public void onSupportActionModeFinished(ActionMode mode){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.928 -0500",hash_original_method="A1386F925B8F997747CFC9FBEC64818C",hash_generated_method="4F117C36CA82C778618B1D2E8208F876") public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
class C{  public IMqttDeliveryToken publish(String clientHandle,String topic,byte[] payload,int qos,boolean retained,String invocationContext,String activityToken) throws MqttPersistenceException, MqttException {  MqttConnection client=getConnection(clientHandle);  return client.publish(topic,payload,qos,retained,invocationContext,activityToken);}  }
class C{  public WrappingStringBuilder append(final char c){  mSB.append(c);  if (c == '\n') {    mLineStart=mSB.length();  }  return this;}  }
class C{  @Override public <K,A,D>CompletableFuture<Map<K,D>> groupBy(final Function<? super T,? extends K> classifier,final Collector<? super T,A,D> downstream){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_tracer != null) {    super.fireStartElem(name);    this.firePseudoAttributes();  }  return;}  }
class C{  public static _Fields findByName(String name){  return BY_NAME.get(name);}  }
class C{  public static boolean checkForm(String str){  int openParentheses=0;  int openBrackets=0;  int openBraces=0;  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);switch (c) {case '(':      openParentheses++;    break;case ')':  openParentheses--;if (openParentheses < 0) return false;break;case '[':openBrackets++;break;case ']':openBrackets--;if (openBrackets < 0) return false;break;case '{':openBraces++;break;case '}':openBraces--;if (openBraces < 0) return false;break;}}boolean balanced=(openParentheses == 0 && openBrackets == 0 && openBraces == 0);return balanced;}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public void storeAll(Set<Protein> parsedProteins,Map<String,SignatureLibraryRelease> analysisJobMap){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Storing " + parsedProteins.size() + " proteins in batches of "+ proteinPrecalcLookupBatchSize);  }  int count=0;  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss:SSS");  for (  Protein protein : parsedProteins) {    count++;    proteinsAwaitingPrecalcLookup.add(protein);    if (proteinsAwaitingPrecalcLookup.size() > proteinPrecalcLookupBatchSize) {      lookupProteins(analysisJobMap);    }    if (count % 5000 == 0) {      if (count % 10000 == 0) {      } else {        if (LOGGER.isInfoEnabled()) {          LOGGER.info("Stored " + count + " sequences");        }      }    }  }  if (count > 10000) {    System.out.println(sdf.format(Calendar.getInstance().getTime()) + " Uploaded/Stored " + count+ " sequences for analysis");  }  Utilities.verboseLog(10," Uploaded/Stored " + count + " sequences for analysis");  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Persisting protein sequences completed, stored " + count + "proteins");  }  Utilities.sequenceCount=count;}  }
class C{  public void rotate(int rotateDegrees){  Matrix mtx=new Matrix();  mtx.postRotate(rotateDegrees);  image=Bitmap.createBitmap(image,0,0,width,height,mtx,true);  width=image.getWidth();  height=image.getHeight();  updateColorArray();}  }
class C{  private static void adjust(AbstractList array,int lower,int upper){  int j, k;  Object temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (((Comparable)array.get(k - 1)).compareTo(array.get(k)) < 0)) {      k+=1;    }    if (((Comparable)array.get(j - 1)).compareTo(array.get(k - 1)) < 0) {      temp=array.get(j - 1);      array.set(j - 1,array.get(k - 1));      array.set(k - 1,temp);    }    j=k;    k*=2;  }}  }
class C{  public void addChild(Cluster<DendrogramModel> clu){  children.add(clu);}  }
class C{  public static String timestamp(){  Calendar calendar=Calendar.getInstance();  return "" + calendar.get(Calendar.YEAR) + calendar.get(Calendar.MONTH)+ calendar.get(Calendar.DAY_OF_MONTH)+ calendar.get(Calendar.HOUR)+ calendar.get(Calendar.MINUTE)+ calendar.get(Calendar.SECOND);}  }
class C{  public boolean contains(Object elem){  return indexOf(elem) >= 0;}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback,PluginResult.Status status){  if (callbackContext != null) {    PluginResult result=new PluginResult(status,obj);    result.setKeepCallback(keepCallback);    callbackContext.sendPluginResult(result);    if (!keepCallback) {      callbackContext=null;    }  }}  }
class C{  public QueryService addCriteria(String ldpath,String value,Comparison comparison){  queryServiceDTO.getCriteria().add(new Criteria(ldpath,value,comparison));  return this;}  }
class C{  public String sprintf(int x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuffer sb=new StringBuffer();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  public DeleteAsyncTask(DeleteActivity deleteActivity,long[] trackIds){  this.deleteActivity=deleteActivity;  this.trackIds=trackIds;  context=deleteActivity.getApplicationContext();  completed=false;}  }
class C{  public void handleBindingEvent(Element bindableElement,Element shadowTree){  CompositeGraphicsNode gn=node.getParent();  gn.remove(node);  disposeTree(e);  handleElementAdded(gn,e.getParentNode(),e);}  }
class C{  public static ImageUtil.AlignedImage alignImage(BufferedImage sourceImage,float[] latitudes,float[] longitudes) throws InterruptedException {  return ImageUtil.alignImage(sourceImage,latitudes,longitudes,null,null);}  }
class C{  public Bindings add(String property,JTextComponent c){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,""));}  }
class C{  @Override public void runExperiment(){  int totalHosts=m_remoteHostsQueue.size();  for (int i=0; i < totalHosts; i++) {    availableHost(-1);  }}  }
class C{  public boolean mouseNotOver(OMGraphic omg){  if (DEBUG) {    Debug.output("mouseNotOver(" + omg.getClass().getName() + ")");  }  if (grp != null) {    grp.unhighlight(omg);  }  handleToolTip(null,null);  handleInfoLine(null);  return false;}  }
class C{  private Identity(){}  }
class C{  static <T>ListIterator<T> cast(Iterator<T> iterator){  return (ListIterator<T>)iterator;}  }
class C{  public LocatorHandle(Figure owner,Locator l){  super(owner);  locator=l;}  }
class C{  public boolean isIncluded(final String text){  if (excFilterGroups != null) {    for (    final String[] filterOutGroup : excFilterGroups) {      boolean filterGroupApplies=true;      for (      final String filter : filterOutGroup)       if (!LUtils.containsIngoreCase(text,filter)) {        filterGroupApplies=false;        break;      }      if (filterGroupApplies)       return false;    }  }  if (incFilterGroups != null) {    for (    final String[] filterGroup : incFilterGroups) {      boolean filterGroupApplies=true;      for (      final String filter : filterGroup)       if (!LUtils.containsIngoreCase(text,filter)) {        filterGroupApplies=false;        break;      }      if (filterGroupApplies)       return true;    }    return false;  }  return true;}  }
class C{  public LocationConfiguration doNotUseGooglePlayServices(boolean use){  this.doNotUseGPServices=use;  return this;}  }
class C{  public boolean accept(SocketBar qSocket) throws IOException {  SocketWrapperBar s=(SocketWrapperBar)qSocket;  Socket socket=_ss.accept();  if (socket == null)   return false;  s.init(socket);  if (_connectionSocketTimeout > 0) {    socket.setSoTimeout(_connectionSocketTimeout);  }  return true;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  private void drawTabSwitcherAnimationOverlay(Canvas canvas,float animationProgress){  if (!isNativeLibraryReady())   return;  float floatAlpha=1 - animationProgress;  int rgbAlpha=(int)(255 * floatAlpha);  canvas.save();  canvas.translate(0,-animationProgress * mBackgroundOverlayBounds.height());  canvas.clipRect(mBackgroundOverlayBounds);  mTabSwitcherAnimationBgOverlay.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());  if (isLocationBarShownInNTP()) {    float ntpTransitionPercentage=mUrlExpansionPercent;    boolean shouldDrawWhite=ntpTransitionPercentage != 1.0f;    mTabSwitcherAnimationBgOverlay.setColor(shouldDrawWhite ? Color.WHITE : getToolbarColorForVisualState(VisualState.NORMAL));  }  mTabSwitcherAnimationBgOverlay.draw(canvas);  float previousAlpha=0.f;  if (mHomeButton.getVisibility() != View.GONE) {    previousAlpha=mHomeButton.getAlpha();    mHomeButton.setAlpha(previousAlpha * floatAlpha);    drawChild(canvas,mHomeButton,SystemClock.uptimeMillis());    mHomeButton.setAlpha(previousAlpha);  }  previousAlpha=mPhoneLocationBar.getAlpha();  mPhoneLocationBar.setAlpha(previousAlpha * floatAlpha);  if (mPhoneLocationBar.getAlpha() != 0) {    drawChild(canvas,mPhoneLocationBar,SystemClock.uptimeMillis());  }  mPhoneLocationBar.setAlpha(previousAlpha);  translateCanvasToView(this,mToolbarButtonsContainer,canvas);  if (mTabSwitcherAnimationTabStackDrawable != null && mToggleTabStackButton != null && mUrlExpansionPercent != 1f) {    canvas.save();    translateCanvasToView(mToolbarButtonsContainer,mToggleTabStackButton,canvas);    int backgroundWidth=mToggleTabStackButton.getDrawable().getIntrinsicWidth();    int backgroundHeight=mToggleTabStackButton.getDrawable().getIntrinsicHeight();    int backgroundLeft=(mToggleTabStackButton.getWidth() - mToggleTabStackButton.getPaddingLeft() - mToggleTabStackButton.getPaddingRight()- backgroundWidth) / 2;    backgroundLeft+=mToggleTabStackButton.getPaddingLeft();    int backgroundTop=(mToggleTabStackButton.getHeight() - mToggleTabStackButton.getPaddingTop() - mToggleTabStackButton.getPaddingBottom()- backgroundHeight) / 2;    backgroundTop+=mToggleTabStackButton.getPaddingTop();    canvas.translate(backgroundLeft,backgroundTop);    mTabSwitcherAnimationTabStackDrawable.setAlpha(rgbAlpha);    mTabSwitcherAnimationTabStackDrawable.draw(canvas);    canvas.restore();  }  if (mTabSwitcherAnimationMenuDrawable != null && mUrlExpansionPercent != 1f) {    mTabSwitcherAnimationMenuDrawable.setBounds(mMenuButton.getPaddingLeft(),mMenuButton.getPaddingTop(),mMenuButton.getWidth() - mMenuButton.getPaddingRight(),mMenuButton.getHeight() - mMenuButton.getPaddingBottom());    translateCanvasToView(mToolbarButtonsContainer,mMenuButton,canvas);    mTabSwitcherAnimationMenuDrawable.setAlpha(rgbAlpha);    int color=mUseLightToolbarDrawables ? getResources().getColor(R.color.light_mode_tint) : getResources().getColor(R.color.dark_mode_tint);    mTabSwitcherAnimationMenuDrawable.setColorFilter(color,PorterDuff.Mode.SRC_IN);    mTabSwitcherAnimationMenuDrawable.draw(canvas);  }  canvas.restore();}  }
class C{  public boolean remove(String url,WebPage page) throws IndexingException {  for (  IndexCleaningFilter indexcleaningFilter : indexcleaningFilters) {    if (indexcleaningFilter.remove(url,page)) {      return true;    }  }  return false;}  }
class C{  public boolean isUserLocal(String userName){  return _localUsers.containsKey(userName);}  }
class C{  static boolean isRegistered(Object value){  Map m=getRegistry();  return m != null && m.containsKey(value);}  }
class C{  protected void ping() throws Exception {  for (int i=0; i < getAddressesCount(); i++) {    ping(getAddresses(i));  }}  }
class C{  private static void fillAllFields(VOSubscription voSubscription,Subscription subscription,LocalizerFacade facade){  fillBaseFields(voSubscription,subscription);  if (subscription.getOwner() != null) {    voSubscription.setOwnerId(subscription.getOwner().getUserId());  }  voSubscription.setNumberOfAssignedUsers(subscription.getUsageLicenses().size());  Product product=subscription.getProduct();  if (product.getTemplate() == null) {    voSubscription.setServiceId(product.getProductId());    voSubscription.setServiceKey(product.getKey());    if (product.getVendor() != null) {      String supplierName=product.getVendor().getName() != null && product.getVendor().getName().trim().length() > 0 ? product.getVendor().getName() : product.getVendor().getOrganizationId();      voSubscription.setSellerName(supplierName);    }  } else {    voSubscription.setServiceId(ProductAssembler.getProductId(product));    voSubscription.setServiceKey(product.getTemplate().getKey());    if (product.getTemplate().getVendor() != null) {      String supplierName=product.getTemplate().getVendor().getName() != null && product.getTemplate().getVendor().getName().trim().length() > 0 ? product.getTemplate().getVendor().getName() : product.getTemplate().getVendor().getOrganizationId();      voSubscription.setSellerName(supplierName);    }    voSubscription.setCustomTabName(facade.getText(subscription.getProduct().getTemplate().getKey(),LocalizedObjectTypes.PRODUCT_CUSTOM_TAB_NAME));    voSubscription.setCustomTabUrl(product.getTemplate().getCustomTabUrl());  }  TechnicalProduct techProd=product.getTechnicalProduct();  voSubscription.setServiceAccessType(techProd.getAccessType());  if (subscription.getAccessInfo() != null) {    voSubscription.setServiceAccessInfo(subscription.getAccessInfo());  } else {    voSubscription.setServiceAccessInfo(facade.getText(techProd.getKey(),LocalizedObjectTypes.TEC_PRODUCT_LOGIN_ACCESS_DESC));  }  if (subscription.getBaseURL() == null) {    voSubscription.setServiceBaseURL(techProd.getBaseURL());  } else {    voSubscription.setServiceBaseURL(subscription.getBaseURL());  }  if (subscription.getLoginPath() == null) {    voSubscription.setServiceLoginPath(techProd.getLoginPath());  } else {    voSubscription.setServiceLoginPath(subscription.getLoginPath());  }  voSubscription.setServiceInstanceId(subscription.getProductInstanceId());  voSubscription.setPurchaseOrderNumber(subscription.getPurchaseOrderNumber());  voSubscription.setProvisioningProgress(facade.getText(subscription.getKey(),LocalizedObjectTypes.SUBSCRIPTION_PROVISIONING_PROGRESS));  voSubscription.setTechnicalServiceOperations(TechnicalProductOperationAssembler.toVOTechnicalServiceOperations(techProd.getTechnicalProductOperations(),facade));  String message=subscription.getSuccessMessage();  voSubscription.setSuccessInfo(message == null ? "" : message);}  }
class C{  public Javac(Bytecode b,CtClass thisClass){  gen=new JvstCodeGen(b,thisClass,thisClass.getClassPool());  stable=new SymbolTable();  bytecode=b;}  }
class C{  @Override public void update(T newValue){  mValue=newValue;  for (  ExecutorListenerPair pair : mListeners) {    pair.run();  }}  }
class C{  private SimpleSink.SimpleWriteOperation buildWriteOperation(TemporaryFileRetention fileRetention){  SimpleSink sink=buildSink();  return new SimpleSink.SimpleWriteOperation(sink,getBaseTempFilename(),fileRetention);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public TempCharBuffer(int size){  _buf=new char[size];}  }
class C{  public JsonNode addAll(Collection<JsonNode> nodes){  int len=nodes.size();  if (len > 0) {    if (_children == null) {      _children=new ArrayList<JsonNode>(nodes);    } else {      _children.addAll(nodes);    }  }  return this;}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public BayesPmWrapper(Graph graph,Parameters params){  if (graph == null) {    throw new NullPointerException("Graph must not be null.");  }  int lowerBound, upperBound;  if (params.getString("initializationMode","manualRetain").equals("manual")) {    lowerBound=upperBound=2;  } else   if (params.getString("initializationMode","manualRetain").equals("automatic")) {    lowerBound=params.getInt("minCategories",2);    upperBound=params.getInt("maxCategories",2);  } else {    throw new IllegalStateException("Unrecognized type.");  }  setBayesPm(graph,lowerBound,upperBound);}  }
class C{  public static int px2dip(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public void testMatsHenricsonUseCases() throws Exception {  Message message=createMessage();  assertSelector(message,"SessionserverId=1870414179",false);  message.setLongProperty("SessionserverId",1870414179);  assertSelector(message,"SessionserverId=1870414179",true);  message.setLongProperty("SessionserverId",1234);  assertSelector(message,"SessionserverId=1870414179",false);  assertSelector(message,"Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')",false);  message.setStringProperty("Command","Cheese");  assertSelector(message,"Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')",true);  message.setStringProperty("Command","MirrorLobbyRequest");  assertSelector(message,"Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')",false);  message.setStringProperty("Command","MirrorLobbyReply");  assertSelector(message,"Command NOT IN ('MirrorLobbyRequest', 'MirrorLobbyReply')",false);}  }
class C{  @Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (content != null) {    content.generateRss(w,"description",TextConstruct.RssFormat.FULL_HTML);  }}  }
class C{  public static TaskHandle enqueueLoadSnapshotTask(String snapshotId,String gcsFile,ImmutableSet<String> kinds){  return getQueue(QUEUE).add(TaskOptions.Builder.withUrl(PATH).method(Method.POST).param(LOAD_SNAPSHOT_ID_PARAM,snapshotId).param(LOAD_SNAPSHOT_FILE_PARAM,gcsFile).param(LOAD_SNAPSHOT_KINDS_PARAM,Joiner.on(',').join(kinds)));}  }
class C{  public ShortRange(short min,short max){  this.min=min;  this.max=max;}  }
class C{  public static byte[] convertToDER(String pemCert){  String base64=pemCert.replace(CERT_BEGIN,"");  base64=base64.replace(CERT_END,"");  base64=base64.replaceAll("\\s","");  return Base64.decodeBase64(base64);}  }
class C{  public VirtualMachineError(@Nullable String message){  super(message);}  }
class C{  public final boolean isHtmlSafe(){  return htmlSafe;}  }
class C{  public boolean isPersonalizationOptIn(){  return personalizationOptIn;}  }
class C{  public final void testLetterWithContextAndResourceIdParameters(){  assertNotNull(Validators.letter(getContext(),android.R.string.cancel,Case.CASE_INSENSITIVE,true,new char[]{'-'}));}  }
class C{  public static <K,V>SynchronizedSortedSetMultimap<K,V> of(MutableSortedSetMultimap<K,V> multimap){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSortedSetMultimap for null");  }  return new SynchronizedSortedSetMultimap<>(multimap);}  }
class C{  public void save(OutputStream outputStream){  try {    prepareForSave(keePassFile.root.group);    getSerializer().write(this.keePassFile,outputStream);  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  private void processHeader() throws NonRegularLoopException {  Enumeration<BasicBlock> head_inEdges=header.getIn();  while (head_inEdges.hasMoreElements()) {    BasicBlock curEdgeBB=head_inEdges.nextElement();    if (isInLoop(curEdgeBB)) {      if (exit != null) {        throw new NonRegularLoopException("Multiple back edges to the header block making exit block undistinguishable.");      }      exit=curEdgeBB;      processExit();    } else {      if (predecessor != null) {        throw new NonRegularLoopException("Multiple out of loop edges into the header making predecessor block undistinguishable.");      }      predecessor=curEdgeBB;    }  }  if (header != exit) {    checkOutEdgesAreInLoop(header);  }}  }
class C{  @Override public void endWindow(){  HashMap<K,Double> tuples=new HashMap<K,Double>();  for (  Map.Entry<K,MutableDouble> e : denominators.entrySet()) {    MutableDouble nval=numerators.get(e.getKey());    if (nval == null) {      tuples.put(e.getKey(),new Double(0.0));    } else {      tuples.put(e.getKey(),new Double((nval.doubleValue() / e.getValue().doubleValue()) * mult_by));    }  }  if (!tuples.isEmpty()) {    quotient.emit(tuples);  }  numerators.clear();  denominators.clear();}  }
class C{  public void add(int index,int start,int end,int handler,int type){  if (start < end)   entries.add(index,new ExceptionTableEntry(start,end,handler,type));}  }
class C{  public synchronized Object lastElement(){  if (elementCount == 0) {    throw new NoSuchElementException();  }  return elementData[elementCount - 1];}  }
class C{  public boolean messageSource(){  if ((getElement(0) & 0x08) == 0x08) {    return PC;  }  return CS;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Object pop(){  Object val=m_map[--m_firstFree];  m_map[m_firstFree]=null;  return val;}  }
class C{  public boolean handleRoot(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    rootsStream.increment(index,(short)1);    this.totalRoots++;    return true;  } else {    return false;  }}  }
class C{  private synchronized void releaseDocument(){  if (fDocument != null)   fDocument.removeDocumentListener(fDocumentListener);  fDocument=null;  fDocumentListener=null;}  }
class C{  public static void ensureVisible(int[] path){  if (verbose) {    log("ensureVisible(" + toString(path) + ")");  }  ensureVisible(getComponentByPath(path));}  }
class C{  public Triplet(X x,Y y,Z z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void update(long duration,TimeUnit unit){  update(unit.toNanos(duration));}  }
class C{  private static String parseLikeEscCharacterExpression(String text,int startPos,int len){  return "ESCAPE " + substring(text,startPos,len).trim();}  }
class C{  public LevelGroup(boolean ascending){  this.ascending=ascending;}  }
class C{  public PatternParameter(OptionID optionID,Pattern defaultValue){  super(optionID,defaultValue);}  }
class C{  private String decodePercent(String str) throws InterruptedException {  try {    StringBuffer sb=new StringBuffer();    for (int i=0; i < str.length(); i++) {      char c=str.charAt(i);switch (c) {case '+':        sb.append(' ');      break;case '%':    sb.append((char)Integer.parseInt(str.substring(i + 1,i + 3),16));  i+=2;break;default :sb.append(c);break;}}return new String(sb.toString().getBytes());} catch (Exception e) {sendError(HTTP_BADREQUEST,"BAD REQUEST: Bad percent-encoding.");return null;}}  }
class C{  public SwingTerminal(TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalScrollController scrollController){  this(null,deviceConfiguration,fontConfiguration,colorConfiguration,scrollController);}  }
class C{  protected boolean requiresGWTProjects(){  return false;}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  public static RegionMap createVM(LocalRegion owner,RegionMap.Attributes attrs,InternalRegionArguments internalRegionArgs){  if (owner.isProxy()) {    return new ProxyRegionMap(owner,attrs,internalRegionArgs);  } else   if (owner.getEvictionController() != null) {    return new VMLRURegionMap(owner,attrs,internalRegionArgs);  } else {    return new VMRegionMap(owner,attrs,internalRegionArgs);  }}  }
class C{  public static void addRenderedHiddenField(FacesContext context,String clientId){  Map map=getHiddenFieldMap(context,true);  map.put(clientId,Boolean.FALSE);}  }
class C{  public void clearProperties(String propertySet){  this.entityManager.getTransaction().begin();  try {    this.entityManager.createQuery("Delete from Property p where p.property like '" + propertySet + "%'").executeUpdate();    this.entityManager.getTransaction().commit();  }  finally {    if (this.entityManager.getTransaction().isActive()) {      this.entityManager.getTransaction().rollback();    }  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public static int testArrayCopySnippet(Integer intValue,char[] a,char[] b,int len){  System.arraycopy(a,0,b,0,len);  return intValue.intValue();}  }
class C{  @Override protected void onPostExecute(BitmapDrawable value){  if (isCancelled() || mExitTasksEarly) {    value=null;  }  final ImageView imageView=getAttachedImageView();  if (value != null && imageView != null) {    if (debug) {      Log.d(TAG,"onPostExecute - setting bitmap");    }    setImageDrawable(imageView,value);  }}  }
class C{  public ClampNeuronsAction(final NetworkPanel networkPanel){  super("Clamp Neurons");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Clamp_N.png"));  putValue(SHORT_DESCRIPTION,"Clamp Neurons");}  }
class C{  private static int unitTypeToInt(DateTickUnitType unitType){  ParamChecks.nullNotPermitted(unitType,"unitType");  if (unitType.equals(DateTickUnitType.YEAR)) {    return YEAR;  } else   if (unitType.equals(DateTickUnitType.MONTH)) {    return MONTH;  } else   if (unitType.equals(DateTickUnitType.DAY)) {    return DAY;  } else   if (unitType.equals(DateTickUnitType.HOUR)) {    return HOUR;  } else   if (unitType.equals(DateTickUnitType.MINUTE)) {    return MINUTE;  } else   if (unitType.equals(DateTickUnitType.SECOND)) {    return SECOND;  } else   if (unitType.equals(DateTickUnitType.MILLISECOND)) {    return MILLISECOND;  } else {    throw new IllegalArgumentException("The 'unitType' is not recognised");  }}  }
class C{  public boolean startsWith(final String str){  if (str == null) {    return false;  }  final int len=str.length();  if (len == 0) {    return true;  }  if (len > size) {    return false;  }  for (int i=0; i < len; i++) {    if (buffer[i] != str.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public MatrixStack translate(double x,double y,double z){  current=current.preMultiply(TransformUtil.translationMatrix(x,y,z));  return this;}  }
class C{  public DateTime toDateTime(){  return new DateTime(getMillis(),getZone());}  }
class C{  protected void close(){  super.removeAttributes();  listeners.clear();  syncEvents.clear();  ownerMessage.getEvents().clear();  if (executor != null) {    executor.shutdown();    try {      if (!executor.awaitTermination(250,TimeUnit.MILLISECONDS)) {        executor.shutdownNow();      }    } catch (    InterruptedException ie) {      executor.shutdownNow();      Thread.currentThread().interrupt();    }  }}  }
class C{  public static void showWindow(){  SwingComponents.showWindow(new SettingsWindow(new BattleOptionsTab(ClientContext.battleOptionsSettings()),new BattleCalcTab(ClientContext.battleCalcSettings()),new AiTab(ClientContext.aiSettings()),new ScrollSettingsTab(ClientContext.scrollSettings()),new FoldersTab(ClientContext.folderSettings())));}  }
class C{  public Byte onLoadData8(byte[] ioPage,int addr,byte value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_ICR00 && addr < REGISTER_ICR00 + 48) {    return null;  }  if (addr >= REGISTER_SCR_IBRC0 && addr < REGISTER_SCR_IBRC0 + NUM_SERIAL_IF * SERIAL_IF_OFFSET) {    int serialInterfaceNr=(addr - REGISTER_SCR_IBRC0) >> SERIAL_IF_OFFSET_BITS;    FrSerialInterface serialInterface=(FrSerialInterface)platform.getSerialInterfaces()[serialInterfaceNr];switch (addr - (serialInterfaceNr << SERIAL_IF_OFFSET_BITS)) {case REGISTER_SCR_IBRC0:      return (byte)serialInterface.getScrIbcr();case REGISTER_SMR0:    return (byte)serialInterface.getSmr();case REGISTER_SSR0:  return (byte)serialInterface.getSsr();case REGISTER_ESCR_IBSR0:return (byte)serialInterface.getEscrIbsr();case REGISTER_RDR_TDR0:stop("Cannot read RDR register 8 bit at a time for now");case REGISTER_BGR10:return (byte)serialInterface.getBgr1();case REGISTER_BGR00:return (byte)serialInterface.getBgr0();case REGISTER_ISMK0:return (byte)serialInterface.getIsmk();case REGISTER_ISBA0:return (byte)serialInterface.getIsba();case REGISTER_FCR10:return (byte)serialInterface.getFcr1();case REGISTER_FCR00:return (byte)serialInterface.getFcr0();case REGISTER_FBYTE20:return (byte)serialInterface.getFbyte2();case REGISTER_FBYTE10:return (byte)serialInterface.getFbyte1();}} else if (addr >= REGISTER_TMRLRA0_32 && addr < (REGISTER_TMRLRA0_32 + NUM_TIMER32 * TIMER32_OFFSET)) {stop("32-bit timer registers cannot be accessed by 8-bit for now");} else if (((addr >= REGISTER_EIRR0) && (addr < (REGISTER_ELVR0 + 2))) || ((addr >= REGISTER_EIRR1) && (addr < (REGISTER_ELVR1 + 2)))) {FrInterruptController interruptController=(FrInterruptController)platform.getInterruptController();int unit=0;if (addr >= REGISTER_EIRR1) {unit=1;addr-=(REGISTER_EIRR1 - REGISTER_EIRR0);}switch (addr) {case REGISTER_EIRR0:return (byte)interruptController.getEirr(unit);case REGISTER_ENIR0:return (byte)interruptController.getEnir(unit);case REGISTER_ELVR0:return (byte)(interruptController.getElvr(unit) >> 8);case REGISTER_ELVR0 + 1:return (byte)(interruptController.getElvr(unit) & 0xFF);}} else {switch (addr) {case REGISTER_DICR:return (byte)0b11111110;case REGISTER_DIVR0:return (byte)((FrClockGenerator)platform.getClockGenerator()).getDivr0();case REGISTER_DIVR1:return (byte)((FrClockGenerator)platform.getClockGenerator()).getDivr1();case REGISTER_DIVR2:return (byte)((FrClockGenerator)platform.getClockGenerator()).getDivr2();}}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load8 is not supported yet");return null;}  }
class C{  public boolean accept(File file){  if (file.isDirectory()) {    return true;  }  String filename=file.toString().toLowerCase();  for (int j=0; j < imageFormats.length; j++) {    if (filename.endsWith("." + imageFormats[j].toLowerCase())) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:37.759 -0400",hash_original_method="1CC41FC150F37B76A5F679E2DF486BF3",hash_generated_method="EDE18B9709DE172DB1C2EBF463B76758") public ListMenuPresenter(int itemLayoutRes,int themeRes){  mItemLayoutRes=itemLayoutRes;  mThemeRes=themeRes;}  }
class C{  public MediaFile(Path f,MediaFileType type){  this.path=f.getParent().toString();  this.filename=f.getFileName().toString();  this.file=f.toAbsolutePath();  if (type == null) {    this.type=parseType();  } else {    this.type=type;  }  if (!isValidMediainfoFormat() && StringUtils.isBlank(getContainerFormat())) {    setContainerFormat(getExtension());  }}  }
class C{  protected boolean shouldCreateDatabaseSchema(DatabaseObjectDefinition databaseObjectDefinition,Set<String> createdDatabaseSchemas){  return (createDatabaseSchemas && databaseObjectDefinition.shouldCreateDatabaseSchema(createdDatabaseSchemas));}  }
class C{  @Override public boolean onCreate(){  mOpenHelper=new AcronymDatabaseHelper(getContext());  return true;}  }
class C{  @NotNull public static <K,V>MultiMap<K,V> create(){  return new MultiMap<K,V>();}  }
class C{  @Override public void onInit(List<? extends IndexCommit> commits){  onCommit(commits);}  }
class C{  public void handleNotification(Notification notification,Object handback){  Map event=(Map)handback;  if (event != null) {    Object del=event.get("managedObject");    Object callback=event.get("callback");    if (callback != null && callback instanceof Closure) {      Closure closure=(Closure)callback;      closure.setDelegate(del);      if (closure.getMaximumNumberOfParameters() == 1)       closure.call(buildOperationNotificationPacket(notification)); else       closure.call();    }  }}  }
class C{  public BeanBoxDnDCatcher(DragSource ds,Component c,int act){  this(ds,c,act,null);}  }
class C{  public Open(String sessionID,int blockSize){  this(sessionID,blockSize,StanzaType.IQ);}  }
class C{  public CompValidateChecker parents(ICalComponent... components){  this.components=Arrays.asList(components);  return this;}  }
class C{  public SamRecordException(String message){  super(message);}  }
class C{  public void addIssuer(X500Principal issuer){  if (issuer == null) {    throw new NullPointerException("issuer == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=issuer.getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }  if (issuerPrincipals == null) {    issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size());  }  int size=issuerNames.size() - 1;  for (int i=issuerPrincipals.size(); i < size; i++) {    issuerPrincipals.add(new X500Principal(issuerNames.get(i)));  }  issuerPrincipals.add(issuer);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.DOMAIN__DOMAIN_ID:    setDomainID((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static <C extends Comparable<?>,V>NavigableMap<C,V> filter(NavigableMap<C,V> values,Range<C> filterRange){  if (filterRange == null || filterRange.isEmpty()) {    return Maps.newTreeMap();  } else   if (filterRange.equals(Range.all())) {    return values;  }  if (filterRange.hasUpperBound() && !filterRange.hasLowerBound()) {    return values.headMap(filterRange.upperEndpoint(),upperBoundInclusive(filterRange));  } else   if (filterRange.hasLowerBound() && !filterRange.hasUpperBound()) {    return values.tailMap(filterRange.lowerEndpoint(),lowerBoundInclusive(filterRange));  } else {    return values.subMap(filterRange.lowerEndpoint(),lowerBoundInclusive(filterRange),filterRange.upperEndpoint(),upperBoundInclusive(filterRange));  }}  }
class C{  public final void remove(EventBean theEvent){  if (reverseIndex == null) {    throw new UnsupportedOperationException("Time window does not accept event removal");  }  TimeWindowPair pair=reverseIndex.get(theEvent);  if (pair != null) {    if (pair.getEventHolder() != null && pair.getEventHolder().equals(theEvent)) {      pair.setEventHolder(null);      size--;    } else     if (pair.getEventHolder() != null) {      List<EventBean> list=(List<EventBean>)pair.getEventHolder();      boolean removed=list.remove(theEvent);      if (removed) {        size--;      }    }    reverseIndex.remove(theEvent);  }}  }
class C{  public LiveSet BBKillSet(){  return BBKillSet;}  }
class C{  public synchronized UDAudio play(String uriOrName,Integer loopTimes){  stopAndReset();  if (uriOrName != null && uriOrName.equals(this.mUriOrName) == false) {    this.mUriOrName=uriOrName;  }  if (loopTimes != null) {    this.mLoopTimes=loopTimes;  }  if (this.mUriOrName != null) {    final MediaPlayer player=getMediaPlayer();    if (player != null && player.isPlaying() == false) {      String uri=null;      boolean assetFileExist=false;      if (URLUtil.isNetworkUrl(this.mUriOrName) || URLUtil.isFileUrl(this.mUriOrName) || URLUtil.isAssetUrl(this.mUriOrName)) {        uri=this.mUriOrName;      } else {        uri=getLuaResourceFinder().findFullPath(this.mUriOrName);        assetFileExist=AssetUtil.exists(getContext(),uri);      }      try {        if (assetFileExist) {          final AssetFileDescriptor descriptor=getContext().getAssets().openFd(uri);          player.setDataSource(descriptor.getFileDescriptor(),descriptor.getStartOffset(),descriptor.getLength());        } else {          player.setDataSource(uri);        }        player.setOnErrorListener(this);        player.setOnCompletionListener(this);        player.setOnPreparedListener(this);        player.setLooping((this.mLoopTimes != null && this.mLoopTimes > 1) ? true : false);        player.prepareAsync();      } catch (      Exception e) {        e.printStackTrace();      }    }  }  return this;}  }
class C{  public void put(K key,V value){  key=sanitizeKey(key);  List<V> list=map.get(key);  if (list == null) {    list=new ArrayList<V>();    map.put(key,list);  }  list.add(value);}  }
class C{  @Override protected synchronized InternetHeaders createInternetHeaders(InputStream is) throws MessagingException {  MailHeaders newHeaders=new MailHeaders(is);  if (headers != null) {    return headers;  } else {    initialHeaderSize=newHeaders.getSize();    return newHeaders;  }}  }
class C{  @Override public double execute(double in1,double in2){  return (in1 > in2 ? 1.0 : 0.0);}  }
class C{  public static boolean isAbstract(int mod){  return (mod & ABSTRACT) != 0;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean isSetRegisterResponse(){  return this.registerResponse != null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GENERATE_PATH___LANGUAGE_1:    setLanguage_1(LANGUAGE_1_EDEFAULT);  return;case UmplePackage.GENERATE_PATH___OUTPUT_1:setOutput_1(OUTPUT_1_EDEFAULT);return;case UmplePackage.GENERATE_PATH___OVERRIDE_1:setOverride_1(OVERRIDE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void classInfoIndex(String name) throws IOException {  classInfoIndex(pool.addUtf8Info(name));}  }
class C{  public CarbonIterator<Result> executeQuery(List<BlockExecutionInfo> infos,int[] sliceIndex) throws QueryExecutionException {  long count=0;  for (  AbstractIndex tableBlock : this.blockList) {    count+=tableBlock.getTotalNumberOfRows();  }  MeasureAggregator[] countAgg=new MeasureAggregator[1];  countAgg[0]=new CountAggregator();  countAgg[0].setNewValue(count);  ListBasedResultWrapper resultWrapper=new ListBasedResultWrapper();  Result<List<ListBasedResultWrapper>,Object> result=new ListBasedResult();  ByteArrayWrapper wrapper=new ByteArrayWrapper();  wrapper.setDictionaryKey(new byte[0]);  resultWrapper.setKey(wrapper);  resultWrapper.setValue(countAgg);  List<ListBasedResultWrapper> wrapperList=new ArrayList<ListBasedResultWrapper>(1);  wrapperList.add(resultWrapper);  result.addScannedResult(wrapperList);  return new MemoryBasedResultIterator(result);}  }
class C{  private void hideSplashAndShowUI(){  if (!isStartup) {    SplashWindow.instance().dispose();  }  GUIMediator.allowVisibility();  if (!isStartup) {    GUIMediator.setAppVisible(true);  } else {    GUIMediator.startupHidden();  }}  }
class C{  static protected String domainFromHost(String host){  debugOut("domainFromHost(\"" + host + "\")");  String domain=null;  Matcher mat;  mat=ipCapPattern.matcher(host);  if (mat.find()) {    domain=mat.group(5) + "." + mat.group(4)+ "."+ mat.group(3)+ "."+ mat.group(2);    debugOut("domain=\"" + domain + "\"");    return domain;  }  mat=tld3CapPattern.matcher(host);  if (mat.find()) {    String tld=mat.group(2);    if (TLDLookup.isThreePartTLD(tld)) {      domain=mat.group(1);      debugOut("domain=\"" + domain + ", tld=\""+ tld+ "\"");      return domain;    }  }  mat=tld2CapPattern.matcher(host);  if (mat.find()) {    String tld=mat.group(2);    if (TLDLookup.isTwoPartTLD(tld)) {      domain=mat.group(1);      debugOut("domain=\"" + domain + ", tld=\""+ tld+ "\"");      return domain;    }  }  mat=tldCapPattern.matcher(host);  if (mat.find()) {    String tld=mat.group(2);    domain=mat.group(1);    debugOut("domain=\"" + domain + ", tld=\""+ tld+ "\"");    return domain;  }  return domain;}  }
class C{  public CloseableImage decodeAnimatedWebp(final EncodedImage encodedImage,final ImageDecodeOptions options){  return mAnimatedImageFactory.decodeWebP(encodedImage,options,mBitmapConfig);}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.576 -0500",hash_original_method="B78F91348B547B443EE01569E11C3D93",hash_generated_method="9B48A3A4C5FF372CC1729573D67368C2") public static boolean saveMessage(ContentResolver resolver,Uri uri,String body){  ContentValues values=new ContentValues(2);  values.put(BODY,body);  values.put(DATE,System.currentTimeMillis());  return resolver.update(uri,values,null,null) == 1;}  }
class C{  public static byte[] generateVerifyToken(){  byte[] token=new byte[4];  random.nextBytes(token);  return token;}  }
class C{  public void updateInt(int columnIndex,int x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateInt(columnIndex,x);}  }
class C{  public ImageEventProperty(String image){  this.image=image;}  }
class C{  public static String callDataResourcePermissionCheck(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=callDataResourcePermissionCheckResult(delegator,dispatcher,context);  String permissionStatus=(String)permResults.get("permissionStatus");  return permissionStatus;}  }
class C{  public MyArrayList(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public static String shortSignature(String sig){  sig=sig.substring(1,sig.length() - 1);  return sig.replaceAll("[a-zA-Z._]*[.]","");}  }
class C{  Iterator<CipherSuite> iterator(){  return cipherSuites.iterator();}  }
class C{  public static void gluPerspective(GL10 gl,float fovy,float aspect,float zNear,float zFar){  float top=zNear * (float)Math.tan(fovy * (Math.PI / 360.0));  float bottom=-top;  float left=bottom * aspect;  float right=top * aspect;  gl.glFrustumf(left,right,bottom,top,zNear,zFar);}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("weblogic8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic8xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic8xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic9x10x103x12xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic10xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic10x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic9x10x103x12xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic103x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic103xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic103x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic9x10x103x12xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic103x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogic103xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("weblogic12x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic12xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic12x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic9x10x103x12xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic121x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic121xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic121x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic121xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic121x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogic121xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("weblogic122x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebLogic122xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic122x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebLogic122xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("weblogic122x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WebLogic122xRuntimeConfiguration.class);}  }
class C{  public GroupShardsIterator allAssignedShardsGrouped(String[] indices,boolean includeEmpty,boolean includeRelocationTargets){  return allSatisfyingPredicateShardsGrouped(indices,includeEmpty,includeRelocationTargets,ASSIGNED_PREDICATE);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.RESEQUENCER__STREAM_SEQUENCES:    return streamSequences != STREAM_SEQUENCES_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public boolean isInitialized(){  return mClient != null;}  }
class C{  public boolean isStarted(){  return mStarted;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("") public CatalogCategoryRestRep createCatalogCategory(CatalogCategoryCreateParam createParam){  StorageOSUser user=getUserFromContext();  String tenantId=createParam.getTenantId();  if (StringUtils.isBlank(tenantId)) {    tenantId=user.getTenantId();  }  verifyAuthorizedInTenantOrg(uri(tenantId),user);  CatalogCategory parentCatalogCategory=queryResource(createParam.getCatalogCategoryId());  validateCatalogCategoryParam(createParam.getCatalogCategoryId(),createParam,null);  CatalogCategory catalogCategory=createNewCatalogCategory(parentCatalogCategory,createParam);  catalogCategoryManager.createCatalogCategory(catalogCategory);  auditOpSuccess(OperationTypeEnum.CREATE_CATALOG_CATEGORY,catalogCategory.auditParameters());  return map(catalogCategory);}  }
class C{  @Override public String toString(){  return "CUsurfref[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void updateBlob(int columnIndex,InputStream inputStream,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  protected String generateId(){  return "" + (new Date().getTime() % 100000);}  }
class C{  public void testFirstWordisStopWord() throws Exception {  final String input="the dog";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  CommonGramsFilter cgf=new CommonGramsFilter(wt,commonWords);  TokenFilter nsf=new CommonGramsQueryFilter(cgf);  assertTokenStreamContents(nsf,new String[]{"the_dog"});}  }
class C{  public Provider<IN4JSEclipseCore> provideIN4JSEclipseCore(){  return Access.contributedProvider(IN4JSEclipseCore.class);}  }
class C{  @Override public void apply(){  super.apply();  View view=this.getView();  if (view == null) {    return;  }  if (this.gotoAnimControl.stepAnimators()) {    view.firePropertyChange(AVKey.VIEW,null,view);  } else {    this.gotoAnimControl.clear();  }  if (this.uiAnimControl.stepAnimators()) {    view.firePropertyChange(AVKey.VIEW,null,view);  } else {    this.uiAnimControl.clear();  }}  }
class C{  public char readChar() throws EOFException, FormatException {  try {    int retv=inputReader.read();    if (retv == -1) {      throw new EOFException("Error in ReadChar, EOF reached");    }    return (char)retv;  } catch (  IOException i) {    throw new FormatException("readChar IOException: " + i.getMessage());  }}  }
class C{  DefineCommand(Session session){  super(session);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (conversation.getType() != Conversation.TYPE_CHANNEL) {    throw new CommandException(service.getString(R.string.only_usable_from_channel));  }  if (params.length == 2) {    service.getConnection(server.getId()).op(conversation.getName(),params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  String actions=(String)fields.get("actions",null);  init(actions);}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  return recommendation.getItems().size();}  }
class C{  public Object createImplementation(){  throw new RuntimeException("You must include the platform port before the Codename One in the classpath");}  }
class C{  public QueueProcessor(@NotNull PairConsumer<T,Runnable> processor,boolean autostart,@NotNull ThreadToUse threadToUse,@NotNull Condition<?> deathCondition){  myProcessor=processor;  myStarted=autostart;  myThreadToUse=threadToUse;  myDeathCondition=deathCondition;}  }
class C{  @Override public void seekEnd(long offset) throws IOException {  getDelegate().seekEnd(offset);}  }
class C{  public static String createDestinationForFilename(String template,Movie movie){  Pattern regex=Pattern.compile("\\{(.*?)\\}");  Matcher mat=regex.matcher(template);  while (mat.find()) {    template=template.replace(mat.group(0),replaceOptionalVariable(mat.group(1),movie,true));  }  return createDestination(template,movie,true);}  }
class C{  private static int handleDpadVertical(int iconIndex,int cntX,int cntY,int[][] matrix,int increment){  int newIconIndex=NOOP;  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIndex) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadVertical: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIndex));  }  for (int y=yPos + increment; 0 <= y && y < cntY && 0 <= y; y+=increment) {    if ((newIconIndex=inspectMatrix(xPos,y,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) {      return newIconIndex;    }  }  int nextXPos1;  int nextXPos2;  boolean haveCrossedAllAppsColumn1=false;  boolean haveCrossedAllAppsColumn2=false;  int y=-1;  for (int coeff=1; coeff < cntX; coeff++) {    nextXPos1=xPos + coeff * increment;    nextXPos2=xPos - coeff * increment;    y=yPos + increment * coeff;    if (inspectMatrix(nextXPos1,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn1=true;    }    if (inspectMatrix(nextXPos2,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn2=true;    }    for (; 0 <= y && y < cntY; y=y + increment) {      int offset1=haveCrossedAllAppsColumn1 && y < cntY - 1 ? increment : 0;      newIconIndex=inspectMatrix(nextXPos1 + offset1,y,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }      int offset2=haveCrossedAllAppsColumn2 && y < cntY - 1 ? -increment : 0;      newIconIndex=inspectMatrix(nextXPos2 + offset2,y,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }    }  }  return newIconIndex;}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  public static String pathToString(String[] path){  return pathToString(path,path.length);}  }
class C{  public <Result,Progress>Promise<Collection<Result>,Progress> allOf(Collection<Promise<Result,Progress>> promises){  return new AllOfPromise<>(this,promises);}  }
class C{  public BuddyCleanup(Player player){  this.player=player;}  }
class C{  static void first(long binAddr,long entryAddr,GridUnsafeMemory mem){  mem.writeLong(binAddr,entryAddr);}  }
class C{  public static ClusterStatsRequest clusterStatsRequest(){  return new ClusterStatsRequest();}  }
class C{  public int size(){  return list.size();}  }
class C{  private boolean isSnapshot(URI uri){  return URIUtil.isType(uri,BlockSnapshot.class);}  }
class C{  public String toMatrixString() throws Exception {  return toMatrixString("=== Confusion Matrix ===\n");}  }
class C{  public Iterable<String> param(final Object key){  final List<String> values=this.params.get(key.toString());  final Iterable<String> iter;  if (values == null) {    iter=new VerboseIterable<String>(Collections.<String>emptyList(),String.format("there are no URI params by name \"%s\" among %d others",key,this.params.size()));  } else {    iter=new VerboseIterable<String>(values,String.format("there are only %d URI params by name \"%s\"",values.size(),key));  }  return iter;}  }
class C{  private void submitScore(int resId,int score){  PlayGamesActivity act=Utils.getPlayGamesActivity(this);  if (act != null) {    act.postSubmitScore(resId,score);  }}  }
class C{  private void updateImageSize(){  int newWidth=0;  int newHeight=0;  int newState=0;  Image newImage=getImage();  if (newImage != null) {    Element elem=getElement();    AttributeSet attr=elem.getAttributes();    newWidth=getIntAttr(HTML.Attribute.WIDTH,-1);    if (newWidth > 0) {      newState|=WIDTH_FLAG;    }    newHeight=getIntAttr(HTML.Attribute.HEIGHT,-1);    if (newHeight > 0) {      newState|=HEIGHT_FLAG;    }    if (newWidth <= 0) {      newWidth=newImage.getWidth(imageObserver);      if (newWidth <= 0) {        newWidth=DEFAULT_WIDTH;      }    }    if (newHeight <= 0) {      newHeight=newImage.getHeight(imageObserver);      if (newHeight <= 0) {        newHeight=DEFAULT_HEIGHT;      }    }    if ((newState & (WIDTH_FLAG | HEIGHT_FLAG)) != 0) {      Toolkit.getDefaultToolkit().prepareImage(newImage,newWidth,newHeight,imageObserver);    } else {      Toolkit.getDefaultToolkit().prepareImage(newImage,-1,-1,imageObserver);    }    boolean createText=false;synchronized (this) {      if (image != null) {        if ((newState & WIDTH_FLAG) == WIDTH_FLAG || width == 0) {          width=newWidth;        }        if ((newState & HEIGHT_FLAG) == HEIGHT_FLAG || height == 0) {          height=newHeight;        }      } else {        createText=true;        if ((newState & WIDTH_FLAG) == WIDTH_FLAG) {          width=newWidth;        }        if ((newState & HEIGHT_FLAG) == HEIGHT_FLAG) {          height=newHeight;        }      }      state=state | newState;      state=(state | LOADING_FLAG) ^ LOADING_FLAG;    }    if (createText) {      updateAltTextView();    }  } else {    width=height=DEFAULT_HEIGHT;    updateAltTextView();  }}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  public static String readSetting(final AbstractSQLProvider provider,final CModule module,final String key) throws CouldntLoadDataException {  Preconditions.checkNotNull(module,"IE00534: Module argument can not be null");  Preconditions.checkNotNull(key,"IE00535: Key argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00536: Module is not part of this database");  return readSetting(provider.getConnection(),module.getConfiguration().getId(),key,"module_id",CTableNames.MODULE_SETTINGS_TABLE);}  }
class C{  protected void describeInputFormats(){  g.add(aService,SD.inputFormat,SD.RDFXML);  g.add(aService,SD.inputFormat,SD.NTRIPLES);  g.add(aService,SD.inputFormat,SD.TURTLE);  g.add(aService,SD.inputFormat,SD.N3);  g.add(aService,SD.inputFormat,SD.TRIG);  g.add(aService,SD.inputFormat,SD.NQUADS);  if (tripleStore.getStatementIdentifiers()) {    g.add(aService,SD.inputFormat,SD.NTRIPLES_RDR);    g.add(aService,SD.inputFormat,SD.TURTLE_RDR);  }  g.add(aService,SD.inputFormat,SD.SPARQL_RESULTS_XML);  g.add(aService,SD.inputFormat,SD.SPARQL_RESULTS_JSON);  g.add(aService,SD.inputFormat,SD.SPARQL_RESULTS_CSV);  g.add(aService,SD.inputFormat,SD.SPARQL_RESULTS_TSV);}  }
class C{  public void clear(){  m_ReadMethods.clear();  m_WriteMethods.clear();  try {    addMethods();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void verifySerialization(SegmentedTimeline a1){  SegmentedTimeline a2=(SegmentedTimeline)TestUtilities.serialised(a1);  assertEquals(a1,a2);}  }
class C{  protected void init(@NonNull Context context,@Nullable AttributeSet attrs){  final TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.DragScaleCircleView);  try {    mHasGuideLine=typedArray.getBoolean(R.styleable.DragScaleCircleView_hasGuideLine,true);    mGuideLineSize=typedArray.getFloat(R.styleable.DragScaleCircleView_guideLineSize,getResources().getDimension(R.dimen.guideline_width));    mGuideLineColor=typedArray.getInt(R.styleable.DragScaleCircleView_guideLineColor,getResources().getColor(R.color.guideline));    mBorderSize=typedArray.getFloat(R.styleable.DragScaleCircleView_borderSize,getResources().getDimension(R.dimen.border_width));    mBorderColor=typedArray.getInt(R.styleable.DragScaleCircleView_borderColor,getResources().getColor(R.color.border));  }  finally {    typedArray.recycle();  }  final Resources resources=context.getResources();  mScreenWidth=resources.getDisplayMetrics().widthPixels;  boolean hasBackKey=KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);  boolean hasHomeKey=KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);  if (hasBackKey && hasHomeKey) {    mScreenHeight=getResources().getDisplayMetrics().heightPixels - 40 - 128;  } else {    mScreenHeight=getResources().getDisplayMetrics().heightPixels - 40;  }  mBoarderPaint=PaintUtil.newBoarderPaint(mBorderSize,mBorderColor);  mSurroundingAreaOverlayPaint=PaintUtil.newSurroundingAreaOverlayPaint();  mHandlePaint=PaintUtil.newHandlerPaint(resources);  mHandleRadius=resources.getDimension(R.dimen.corner_width);  mGuideLinePaint=PaintUtil.newGuideLinePaint(mGuideLineSize,mGuideLineColor);}  }
class C{  private void openCourseDashboard(){  ServiceManager api=environment.getServiceManager();  try {    List<EnrolledCoursesResponse> enrolledCoursesResponse=api.getEnrolledCourses(true);    for (    EnrolledCoursesResponse course : enrolledCoursesResponse) {      if (course.getCourse().getId().equals(courseDetail.course_id)) {        environment.getRouter().showMyCourses(getActivity());        environment.getRouter().showCourseDashboardTabs(getActivity(),environment.getConfig(),course,false);      }    }  } catch (  Exception exception) {    logger.debug(exception.toString());    Toast.makeText(getContext(),R.string.cannot_show_dashboard,Toast.LENGTH_SHORT).show();  }}  }
class C{  @RequestProcessing(value="/admin/add-user",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void addUser(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String userName=request.getParameter(User.USER_NAME);  final String userRealName=request.getParameter(UserExt.USER_REAL_NAME);  final String email=request.getParameter(User.USER_EMAIL);  final String password=request.getParameter(User.USER_PASSWORD);  final String team=request.getParameter(UserExt.USER_TEAM);  final boolean nameInvalid=UserRegisterValidation.invalidUserName(userName);  final boolean emailInvalid=!Strings.isEmail(email);  final boolean passwordInvalid=UserRegister2Validation.invalidUserPassword(password);  if (nameInvalid || emailInvalid || passwordInvalid) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    if (nameInvalid) {      dataModel.put(Keys.MSG,langPropsService.get("invalidUserNameLabel"));    } else     if (emailInvalid) {      dataModel.put(Keys.MSG,langPropsService.get("invalidEmailLabel"));    } else     if (passwordInvalid) {      dataModel.put(Keys.MSG,langPropsService.get("invalidPasswordLabel"));    }    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  String userId;  try {    final JSONObject user=new JSONObject();    user.put(User.USER_NAME,userName);    user.put(UserExt.USER_REAL_NAME,userRealName);    user.put(User.USER_EMAIL,email);    user.put(User.USER_PASSWORD,MD5.hash(password));    user.put(UserExt.USER_APP_ROLE,UserExt.USER_APP_ROLE_C_HACKER);    user.put(UserExt.USER_TEAM,team);    user.put(UserExt.USER_STATUS,UserExt.USER_STATUS_C_VALID);    userId=userMgmtService.addUser(user);    if (!Symphonys.getBoolean("sendcloud.enabled")) {      String body=langPropsService.get("accountCreatedBodyLabel");      body=body.replace("${userName}",userName).replace("${password}",password).replace("${servePath}",Latkes.getServePath());      Mails.send(email,langPropsService.get("accountCreatedSubjectLabel"),body);    }  } catch (  final Exception e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);}  }
class C{  public void error(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public void dragExit(DragSourceEvent dse){  System.out.println("[Source] dragExit");  changeCursor(dse.getDragSourceContext(),DnDConstants.ACTION_NONE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    String family=this.family;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      if (s != null) {        family=s;      }    }    if (family != null) {      MutableAttributeSet attr=new SimpleAttributeSet();      StyleConstants.setFontFamily(attr,family);      setCharacterAttributes(editor,attr,false);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(editor);    }  }}  }
class C{  public boolean isClosed() throws SQLException {  return this.isClosed;}  }
class C{  public static ItemStack createLeatherArmor(@NonNull Material material,String name,String[] lore,Color color){  ItemStack item=new ItemStackBuilder().type(material).name(name).lore(lore).build();  LeatherArmorMeta meta=(LeatherArmorMeta)item.getItemMeta();  if (color != null) {    meta.setColor(color);  }  item.setItemMeta(meta);  return item;}  }
class C{  public TFloatLongHashMap(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String fiducialHeader=args[0];  String outputHeader=args[1];  if (fiducialHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int progress=0;    ArrayList<XYPoint> fiducialMarks=new ArrayList<>();    ShapeFile fiducials=new ShapeFile(fiducialHeader);    if (fiducials.getShapeType().getBaseType() != ShapeType.POINT && fiducials.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      showFeedback("The input shapefile must be of a 'POINT' or 'MULTIPOINT' data type.");      return;    }    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(0);    fields[0].setFieldLength(10);    ShapeFile output=new ShapeFile(outputHeader,ShapeType.POINT,fields);    int oldProgress=-1;    int n=0;    int numRecords=fiducials.getNumberOfRecords();    progress=0;    for (    ShapeFileRecord record : fiducials.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));    break;case POINTZ:  PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();fiducialMarks.add(new XYPoint(vertices[0][0],vertices[0][1]));break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {fiducialMarks.add(new XYPoint(vertices[j][0],vertices[j][1]));}break;}}if (cancelOp) {cancelOperation();return;}n++;progress=(int)((n * 100.0) / numRecords);if (progress > oldProgress) {oldProgress=progress;updateProgress(progress);}}int numMarks=fiducialMarks.size();if (numMarks == 8) {double psi=0;double x, y;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double[][] axesEndPoints=new double[4][2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;final double rightAngle=Math.toRadians(90);double[] newBoundingBox=new double[4];double slope;double boxCentreX, boxCentreY;double[][] verticesRotated=new double[8][2];double east=Double.NEGATIVE_INFINITY;double west=Double.POSITIVE_INFINITY;double north=Double.NEGATIVE_INFINITY;double south=Double.POSITIVE_INFINITY;XYPoint pt;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);if (pt.x > east) {east=pt.x;}if (pt.x < west) {west=pt.x;}if (pt.y > north) {north=pt.y;}if (pt.y < south) {south=pt.y;}}double midX=west + (east - west) / 2.0;double midY=south + (north - south) / 2.0;axes[0]=9999999;axes[1]=9999999;slope=0;boxCentreX=0;boxCentreY=0;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x - midX;y=pt.y - midY;verticesRotated[i][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[i][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (n=0; n < 8; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0];newYAxis=newBoundingBox[3] - newBoundingBox[2];if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);axesEndPoints[0][0]=boxCentreX + longAxis / 2.0 * Math.cos(slope);axesEndPoints[0][1]=boxCentreY + longAxis / 2.0 * Math.sin(slope);axesEndPoints[1][0]=boxCentreX - longAxis / 2.0 * Math.cos(slope);axesEndPoints[1][1]=boxCentreY - longAxis / 2.0 * Math.sin(slope);axesEndPoints[2][0]=boxCentreX + shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[2][1]=boxCentreY + shortAxis / 2.0 * Math.sin(rightAngle + slope);axesEndPoints[3][0]=boxCentreX - shortAxis / 2.0 * Math.cos(rightAngle + slope);axesEndPoints[3][1]=boxCentreY - shortAxis / 2.0 * Math.sin(rightAngle + slope);double dist;XYPoint p1=new XYPoint();XYPoint p2=new XYPoint();XYPoint p3=new XYPoint();XYPoint p4=new XYPoint();XYPoint p5=new XYPoint();XYPoint p6=new XYPoint();XYPoint p7=new XYPoint();XYPoint p8=new XYPoint();double minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[0][0] - x) * (axesEndPoints[0][0] - x) + (axesEndPoints[0][1] - y) * (axesEndPoints[0][1] - y);if (dist < minDist) {minDist=dist;p1=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[1][0] - x) * (axesEndPoints[1][0] - x) + (axesEndPoints[1][1] - y) * (axesEndPoints[1][1] - y);if (dist < minDist) {minDist=dist;p2=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[2][0] - x) * (axesEndPoints[2][0] - x) + (axesEndPoints[2][1] - y) * (axesEndPoints[2][1] - y);if (dist < minDist) {minDist=dist;p3=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(axesEndPoints[3][0] - x) * (axesEndPoints[3][0] - x) + (axesEndPoints[3][1] - y) * (axesEndPoints[3][1] - y);if (dist < minDist) {minDist=dist;p4=pt;}}double[][] cornerPoints=new double[4][2];cornerPoints[0][0]=axesEndPoints[0][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[0][1]=axesEndPoints[0][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[1][0]=axesEndPoints[0][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[1][1]=axesEndPoints[0][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[2][0]=axesEndPoints[1][0] - shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[2][1]=axesEndPoints[1][1] - shortAxis / 2.0 * Math.sin(rightAngle + slope);cornerPoints[3][0]=axesEndPoints[1][0] + shortAxis / 2.0 * Math.cos(rightAngle + slope);cornerPoints[3][1]=axesEndPoints[1][1] + shortAxis / 2.0 * Math.sin(rightAngle + slope);minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[0][0] - x) * (cornerPoints[0][0] - x) + (cornerPoints[0][1] - y) * (cornerPoints[0][1] - y);if (dist < minDist) {minDist=dist;p5=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[2][0] - x) * (cornerPoints[2][0] - x) + (cornerPoints[2][1] - y) * (cornerPoints[2][1] - y);if (dist < minDist) {minDist=dist;p6=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[1][0] - x) * (cornerPoints[1][0] - x) + (cornerPoints[1][1] - y) * (cornerPoints[1][1] - y);if (dist < minDist) {minDist=dist;p7=pt;}}minDist=Double.POSITIVE_INFINITY;for (int i=0; i < 8; i++) {pt=fiducialMarks.get(i);x=pt.x;y=pt.y;dist=(cornerPoints[3][0] - x) * (cornerPoints[3][0] - x) + (cornerPoints[3][1] - y) * (cornerPoints[3][1] - y);if (dist < minDist) {minDist=dist;p8=pt;}}XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}XYPoint intersection2=new XYPoint();denominator=(p5.x - p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x - p8.x);if (denominator != 0) {double xNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.x - p8.x) - (p5.x - p6.x) * (p7.x * p8.y - p7.y * p8.x);double yNumerator=(p5.x * p6.y - p5.y * p6.x) * (p7.y - p8.y) - (p5.y - p6.y) * (p7.x * p8.y - p7.y * p8.x);intersection2.x=xNumerator / denominator;intersection2.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point((intersection.x + intersection2.x) / 2,(intersection.y + intersection2.y) / 2);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else if (numMarks == 4) {XYPoint p1=fiducialMarks.get(0);XYPoint p2=new XYPoint();XYPoint pt;double dist;double maxDist=0;int k=0;for (int a=1; a < 4; a++) {pt=fiducialMarks.get(a);dist=Math.sqrt((pt.x - p1.x) * (pt.x - p1.x) + (pt.y - p1.y) * (pt.y - p1.y));if (dist > maxDist) {maxDist=dist;p2=pt;k=a;}}int i=0, j=0;switch (k) {case 1:i=2;j=3;break;case 2:i=1;j=3;break;case 3:i=1;j=2;break;}XYPoint p3=fiducialMarks.get(i);XYPoint p4=fiducialMarks.get(j);XYPoint intersection=new XYPoint();double denominator=(p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);if (denominator != 0) {double xNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x);double yNumerator=(p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x);intersection.x=xNumerator / denominator;intersection.y=yNumerator / denominator;} else {showFeedback("Something is wrong with the fiducial marks. Fiducial lines do not intersect");return;}whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(intersection.x,intersection.y);Object[] rowData=new Object[1];rowData[0]=new Double(1);output.addRecord(PP,rowData);output.write();} else {showFeedback("There should be either 4 or 8 fiducial marks. \nThere is something wrong with the input file. \nThe operation will be terminated.");return;}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public DynamicCallGraphOrganizer(EdgeListener edgeListener){  listener=edgeListener;  edgeListener.setOrganizer(this);}  }
class C{  public WildcardQuery(Term term,int maxDeterminizedStates){  super(term,toAutomaton(term),maxDeterminizedStates);}  }
class C{  private void notifyUserOfGestureChanges(){  final Editor editor=mSharedPreferences.edit();  deprecateStringPreference(editor,R.string.pref_shortcut_down_and_left_key,R.string.pref_deprecated_shortcut_down_and_left_default);  deprecateStringPreference(editor,R.string.pref_shortcut_down_and_right_key,R.string.pref_deprecated_shortcut_down_and_right_default);  deprecateStringPreference(editor,R.string.pref_shortcut_up_and_left_key,R.string.pref_deprecated_shortcut_up_and_left_default);  deprecateStringPreference(editor,R.string.pref_shortcut_up_and_right_key,R.string.pref_deprecated_shortcut_up_and_right_default);  editor.putBoolean(mService.getString(R.string.pref_must_accept_gesture_change_notification),true);  editor.apply();  final Intent notificationIntent=new Intent(mService,GestureChangeNotificationActivity.class);  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);  NotificationPosterRunnable runnable=new NotificationPosterRunnable(buildGestureChangeNotification(notificationIntent),GESTURE_CHANGE_NOTIFICATION_ID);  mHandler.postDelayed(runnable,NOTIFICATION_DELAY);}  }
class C{  public boolean hasQValue(){  return super.hasParameter(ParameterNames.Q);}  }
class C{  protected void addDeployableToDomain(Deployable deployable,Element domain){  createElementForDeployableInDomain(deployable,domain);  reorderAppDeploymentsAfterConfigurationVersion(domain);}  }
class C{  public double formatSizeInGb(double byteValue){  double gbValue=(byteValue / GB_DIVIDER);  BigDecimal roundedValue=new BigDecimal(gbValue).setScale(SCALE,RoundingMode.HALF_EVEN);  gbValue=roundedValue.doubleValue();  return gbValue;}  }
class C{  public Object execute(ExecutionEvent event){  ISelection selection=getSelection(event);  if (selection instanceof IStructuredSelection)   currSelection=(IStructuredSelection)selection; else   currSelection=null;  if (currSelection == null || currSelection.isEmpty())   return null;  try {    ProgressMonitorDialog progress=new ProgressMonitorDialog(CheckerPlugin.getShell());    progress.run(true,true,cleaner);  } catch (  InvocationTargetException e) {    CheckerPlugin.logException(e,"InvocationTargetException on clear markers");  }catch (  InterruptedException e) {    CheckerPlugin.logException(e,"InterruptedException on clear markers");  }  return null;}  }
class C{  public void stopAnimation(){  mPauseAngle=(float)mAnimator.getAnimatedValue();  mAnimator.removeAllUpdateListeners();  mAnimator.cancel();  mAnimator.end();  postInvalidate();}  }
class C{  public List<RepositoryMetaData> repositories(){  return repositories;}  }
class C{  public void saveAs(){  int retVal;  m_FileChooser.setSelectedFile(m_CurrentFile);  retVal=m_FileChooser.showSaveDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  save(m_FileChooser.getSelectedFile(),m_FileChooser.getWriter());}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public void abort(){  if (mRecordAccessControlPointCharacteristic == null)   return;  mAbort=true;  final BluetoothGattCharacteristic characteristic=mRecordAccessControlPointCharacteristic;  setOpCode(characteristic,OP_CODE_ABORT_OPERATION,OPERATOR_NULL);  writeCharacteristic(characteristic);}  }
class C{  @Override public float scorePayload(int doc,int start,int end,BytesRef payload){  return 1;}  }
class C{  private void initializeImageArea(){  imageAreaWrapper=(ViewGroup)findViewById(R.id.product_details_image_wrapper);  WindowManager windowManager=(WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);  Display display=windowManager.getDefaultDisplay();  DisplayMetrics metrics=new DisplayMetrics();  display.getMetrics(metrics);  int screenWidth=metrics.widthPixels;  int screenHeight=metrics.heightPixels;  if (DeviceUtils.isTablet(getResources())) {    screenHeight=fragment.getActivity().getWindow().getAttributes().height;    screenWidth=fragment.getActivity().getWindow().getAttributes().width;  }  int minDetailsHeightInPx=Math.round(screenHeight * 0.4f);  boolean hasImage=product != null && product.hasImage();  int maxHeightInPx=hasImage ? screenHeight - minDetailsHeightInPx : getActionBarHeightPixels();  imageAreaHeight=Math.min(screenWidth,maxHeightInPx);  imagePager=(ViewPager)findViewById(R.id.image_pager);  imagePager.setAdapter(new ProductImagePagerAdapter(null,screenWidth,imageAreaHeight,this,0));  imagePager.setOnPageChangeListener(this);  imageAreaTouchHandler=new ProductDetailsImageAreaTouchHandler(getContext(),this);  imagePager.setOnTouchListener(imageAreaTouchHandler);  pagingIndicator=(TabLayout)findViewById(R.id.indicator);  ViewGroup.LayoutParams params=imageAreaWrapper.getLayoutParams();  params.height=imageAreaHeight;}  }
class C{  public static void checkProxyMethod(Object proxy,Method method){  if (proxy == null || !Proxy.isProxyClass(proxy.getClass())) {    throw new IllegalArgumentException("Not a Proxy instance");  }  if (Modifier.isStatic(method.getModifiers())) {    throw new IllegalArgumentException("Can't handle static method");  }  Class<?> c=method.getDeclaringClass();  if (c == Object.class) {    String name=method.getName();    if (name.equals("hashCode") || name.equals("equals") || name.equals("toString")) {      return;    }  }  if (isSuperInterface(proxy.getClass(),c)) {    return;  }  throw new IllegalArgumentException("Can't handle: " + method);}  }
class C{  public void removeOffer(Offer offer){  ((OfferBinder)getDataBinder(TYPE_CARD)).removeOffer(offer);}  }
class C{  public TestClassPerformance(){  this(100000);}  }
class C{  boolean isVisibleNow(){  return mHasSurface && mPolicyVisibility && !mAttachedHidden&& !mRootToken.hidden&& !mExiting&& !mDestroying;}  }
class C{  @Override public int hashCode(){  return years + Integer.rotateLeft(months,8) + Integer.rotateLeft(days,16);}  }
class C{  public String first(){  append("first()");  scroll(0);  return (null);}  }
class C{  private Workflow.Method createFileSharesMethod(FileDescriptor fileDescriptor){  return new Workflow.Method("createFS",fileDescriptor.getDeviceURI(),fileDescriptor.getPoolURI(),fileDescriptor.getFsURI(),fileDescriptor.getSuggestedNativeFsId());}  }
class C{  public void addMetadata(Script metadatum){  (metadata != null ? metadata : (metadata=new ArrayList<Script>())).add(metadatum);}  }
class C{  @Override public boolean showEdgeLabelsDefault(){  return true;}  }
class C{  public SPQRNodeManager(final int numIdentifierComputationRetries,final JerseyClientBuilder httpClientBuilder){  this.numIdentifierComputationRetries=numIdentifierComputationRetries;  this.httpClientBuilder=httpClientBuilder;}  }
class C{  @NoInline @UninterruptibleNoWarn("We're never returning to the caller, so even though this code is preemptible it is safe to call from any context") public static void sysExit(int value){  handlePossibleRecursiveCallToSysExit();  if (VM.countThreadTransitions) {    RVMThread.reportThreadTransitionCounts();  }  if (Options.stackTraceAtExit) {    VM.sysWriteln("[Here is the context of the call to VM.sysExit(",value,")...:");    VM.disableGC();    RVMThread.dumpStack();    VM.enableGC();    VM.sysWriteln("... END context of the call to VM.sysExit]");  }  if (runningVM) {    Callbacks.notifyExit(value);    VM.shutdown(value);  } else {    System.exit(value);  }  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static final void drawBounds(GL2 gl,Bounds b){  if (b instanceof AxisAlignedBounds) {    AxisAlignedBounds aab=(AxisAlignedBounds)b;    double w=aab.getWidth();    double h=aab.getHeight();    Vector2 c=aab.getTranslation();    RenderUtilities.drawRectangleFromCenter(gl,c.x,c.y,w,h,false);  } else {  }}  }
class C{  protected boolean containsKey(String k){  return settings.containsKey(k);}  }
class C{  public static void show(JInternalFrame internalFrame,JDesktopPane desktopPane) throws PropertyVetoException {  if (!desktopPane.isAncestorOf(internalFrame))   desktopPane.add(internalFrame);  internalFrame.setClosed(false);  internalFrame.setVisible(true);  internalFrame.toFront();}  }
class C{  public HttpNTLMAuthLogicHandler(final ProxyIoSession proxyIoSession) throws ProxyAuthException {  super(proxyIoSession);  ((HttpProxyRequest)request).checkRequiredProperties(HttpProxyConstants.USER_PROPERTY,HttpProxyConstants.PWD_PROPERTY,HttpProxyConstants.DOMAIN_PROPERTY,HttpProxyConstants.WORKSTATION_PROPERTY);}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:57.372 -0500",hash_original_method="8BB7D0A84FCC70584CF33970C6F95BDA",hash_generated_method="49397E41D8BCC7E685ABB904DB99146B") @Override public void write(byte[] buf,int off,int nbytes){  digest.update(buf,off,nbytes);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @Override public IBinder onBind(Intent intent){  permissionsGranted=true;  return super.onBind(intent);}  }
class C{  static XStream xstream(){  XStream xstream=new XStream(new DomDriver());  xstream.omitField(ArchiveContents.class,"serializer");  xstream.omitField(ArchiveContents.class,"archivedAvailableActions");  xstream.omitField(ArchivedComponent.class,"serializer");  xstream.omitField(ArchivedCoupling.class,"serializer");  xstream.omitField(ArchivedUpdateAction.class,"serializer");  xstream.omitField(ArchivedUpdateAction.class,"updater");  xstream.omitField(ArchivedComponent.class,"data");  xstream.omitField(ArchivedComponent.ArchivedDesktopComponent.class,"data");  xstream.omitField(Workspace.class,"LOGGER");  xstream.omitField(Workspace.class,"manager");  xstream.omitField(Workspace.class,"componentList");  xstream.omitField(Workspace.class,"workspaceChanged");  xstream.omitField(Workspace.class,"currentDirectory");  xstream.omitField(Workspace.class,"currentFile");  xstream.omitField(Workspace.class,"updater");  xstream.omitField(Workspace.class,"listeners");  xstream.omitField(Workspace.class,"componentNameIndices");  xstream.omitField(Workspace.class,"updaterLock");  xstream.omitField(Workspace.class,"componentLock");  xstream.omitField(UpdateComponent.class,"component");  xstream.omitField(UpdateComponent.class,"updater");  xstream.omitField(UpdateCoupling.class,"coupling");  xstream.omitField(UpdateActionCustom.class,"interpreter");  xstream.omitField(UpdateActionCustom.class,"theAction");  xstream.omitField(UpdateActionCustom.class,"updater");  xstream.omitField(UpdateAllBuffered.class,"updater");  xstream.alias("Workspace",ArchiveContents.class);  xstream.alias("Component",ArchivedComponent.class);  xstream.alias("Coupling",ArchivedCoupling.class);  xstream.alias("UpdateAction",ArchivedUpdateAction.class);  xstream.alias("DesktopComponent",ArchivedComponent.ArchivedDesktopComponent.class);  return xstream;}  }
class C{  @ExceptionHandler(value=AccessDeniedException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public ErrorInformation handleAccessDeniedException(Exception exception){  return getErrorInformation(HttpStatus.FORBIDDEN,exception);}  }
class C{  public ScriptService.ScriptType type(){  return type;}  }
class C{  public synchronized void initialize(){  if (mInitialized) {    return;  }  mInitialized=true;  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  VolleyLog.d("Loading %d files from cache",files.length);  ExecutorService executor=new ThreadPoolExecutor(CACHE_LOAD_THREADS,CACHE_LOAD_THREADS,10,TimeUnit.MILLISECONDS,mQueue);  for (  File file : files) {    Callable<CacheHeader> callable=new HeaderParserCallable(file);    RunnableFuture<CacheHeader> submit=new ReorderingFutureTask(callable);    mLoadingFiles.put(file.getName(),submit);    executor.execute(submit);  }}  }
class C{  private boolean hasConnectivityToSystem(StorageSystem storageSystem,List<URI> varrays,Initiator initiator){  try {    return ConnectivityUtil.isInitiatorConnectedToStorageSystem(initiator,storageSystem,varrays,_dbClient);  } catch (  PlacementException ex) {    _log.info(String.format("Initiator %s (%s) has no connectivity to StorageSystem %s (%s) in varrays %s",initiator.getInitiatorPort(),initiator.getId(),storageSystem.getNativeGuid(),storageSystem.getId(),varrays.toString()));    return false;  }catch (  Exception ex) {    _log.error("An error occurred while verifying Initiator connectivity: ",ex);    throw APIException.badRequests.errorVerifyingInitiatorConnectivity(initiator.toString(),storageSystem.getNativeGuid(),ex.getMessage());  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean isCollection(){  if ((fType == UNKNOWN || fType == ITERABLE) && (fChecked & COLLECTION) == 0 && isSubtypeOf("java.util.Collection"))   fType=COLLECTION;  fChecked|=COLLECTION;  return fType == COLLECTION;}  }
class C{  private void drawFrequencyLabel(Graphics2D graphics,float xaxis,long frequency){  String label=sFORMAT.format((float)frequency);  FontMetrics fontMetrics=graphics.getFontMetrics(this.getFont());  Rectangle2D rect=fontMetrics.getStringBounds(label,graphics);  float offset=(float)rect.getWidth() / 2;  graphics.drawString(label,xaxis - offset,(float)getSize().getHeight() - (mSpectrumInset * 0.2f));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public synchronized void deActivate(){  activated=false;}  }
class C{  public synchronized void removeSelectionListener(SelectionListener listener){  if (listeners != null) {    listeners.removeElement(listener);  }}  }
class C{  public void writeByteArray(byte[] bytes,boolean append){  if (file.exists()) {    System.out.println("Warning : the file " + file.getName() + " already exists !");  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(file,append);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedOutputStream bos=new BufferedOutputStream(fos);  BinaryOutputStream bs=new BinaryOutputStream(bos,bigEndian);  bs.writeByteArray(bytes,append);}  }
class C{  static private String[] alphaMixedSpecial(){  return StringFunctions.combineStringArrays(StringFunctions.alphaMixed(),StringFunctions.special);}  }
class C{  public int updateTriggerStateFromOtherState(Connection conn,TriggerKey triggerKey,String newState,String oldState) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_STATE_FROM_STATE));    ps.setString(1,newState);    ps.setString(2,triggerKey.getName());    ps.setString(3,triggerKey.getGroup());    ps.setString(4,oldState);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  protected IgniteCompute computeForTask(Collection<UUID> nodeIds){  return nodeIds == null ? compute : platformCtx.kernalContext().grid().compute(compute.clusterGroup().forNodeIds(nodeIds));}  }
class C{  public void assertSplit(long suggestedStart,long suggestedLen,long expStart,long expLen,byte[] data,String... delims) throws Exception {  write(data);  IgfsByteDelimiterRecordResolver rslvr=resolver(delims);  IgfsFileRange split;  try (IgfsInputStream is=read()){    split=rslvr.resolveRecords(igfs,is,split(suggestedStart,suggestedLen));  }   assert split != null : "Split is null.";  assert split.start() == expStart : "Incorrect start [expected=" + expStart + ", actual="+ split.start()+ ']';  assert split.length() == expLen : "Incorrect length [expected=" + expLen + ", actual="+ split.length()+ ']';}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public void testFacesConfigCase() throws Exception {  Object factory=null;  Class clazz=null;  FactoryFinder.releaseFactories();  int len, i=0;  for (i=0, len=FACTORIES.length; i < len; i++) {    FactoryFinder.setFactory(FACTORIES[i][0],FACTORIES[i][1]);  }  File servicesDir=new File(System.getProperty("basedir"),"target/classes/META-INF/services");  servicesDir.mkdirs();  File servicesFile=new File(servicesDir,"javax.faces.context.FacesContextFactory");  if (servicesFile.exists()) {    servicesFile.delete();  }  PrintWriter writer=new PrintWriter(servicesFile);  writer.println("javax.faces.mock.MockFacesContextFactoryExtender");  writer.flush();  writer.close();  File cServicesDir=new File(System.getProperty("basedir"),"target/generated-classes/cobertura/META-INF/services");  cServicesDir.mkdirs();  File cServicesFile=new File(cServicesDir,"javax.faces.context.FacesContextFactory");  if (cServicesFile.exists()) {    cServicesFile.delete();  }  PrintWriter cWriter=new PrintWriter(cServicesFile);  cWriter.println("javax.faces.mock.MockFacesContextFactoryExtender");  cWriter.flush();  cWriter.close();  FactoryFinder.setFactory(FactoryFinder.FACES_CONTEXT_FACTORY,"javax.faces.mock.MockFacesContextFactoryExtender2");  for (i=0, len=FACTORIES.length; i < len; i++) {    clazz=Class.forName(FACTORIES[i][0]);    factory=FactoryFinder.getFactory(FACTORIES[i][0]);    assertTrue("Factory for " + clazz.getName() + " not of expected type.",clazz.isAssignableFrom(factory.getClass()));    clazz=Class.forName(FACTORIES[i][1]);    assertTrue("Factory " + FACTORIES[i][1] + " not of expected type",clazz.isAssignableFrom(factory.getClass()));  }  assertTrue(System.getProperty(FACTORIES[2][0]).equals("javax.faces.mock.MockFacesContextFactoryExtender2"));  assertTrue(System.getProperty("oldImpl").equals("javax.faces.mock.MockFacesContextFactoryExtender"));  FactoryFinder.releaseFactories();  FactoryFinder.setFactory(FACTORIES[0][0],FACTORIES[0][1]);  FactoryFinder.setFactory(FACTORIES[1][0],FACTORIES[1][1]);  FactoryFinder.setFactory(FACTORIES[2][0],FACTORIES[2][1]);  FactoryFinder.setFactory(FACTORIES[4][0],FACTORIES[4][1]);  boolean exceptionThrown=false;  try {    factory=FactoryFinder.getFactory(FACTORIES[3][0]);  } catch (  IllegalStateException ise) {    exceptionThrown=true;  }  assertTrue(exceptionThrown);  servicesFile.delete();  cServicesFile.delete();}  }
class C{  private void profileCreationFinished(String username,String avatarResourceName){  ImageView avatar=(ImageView)findViewById(R.id.avatar);  avatar.setImageResource(Avatars.getAvatarResourceId(getApplicationContext(),avatarResourceName));  if (getIntent().getAction().equals(Intent.ACTION_INSERT)) {    User user=new User();    user.setAvatar(avatarResourceName);    user.setName(username);    mUserDataSource.create(user);    mUserManager.switchUser(user);    startActivity(new Intent(getApplicationContext(),MainActivity.class));  } else   if (getIntent().getAction().equals(Intent.ACTION_EDIT)) {    if (BuildConfig.DEBUG && mEditingUser == null) {      throw new AssertionError();    }    mEditingUser.setAvatar(avatarResourceName);    mEditingUser.setName(username);    mUserDataSource.update(mEditingUser);  }  setResult(RESULT_OK);  finish();}  }
class C{  public void releaseWakeLock(){}  }
class C{  public static void sleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException iex) {  }}  }
class C{  public static String trimDoubleQuotes(String text){  int textLength=text.length();  if (textLength >= 2 && text.charAt(0) == '"' && text.charAt(textLength - 1) == '"') {    return text.substring(1,textLength - 1);  }  return text;}  }
class C{  public String toString(){  if (this == VERIFIED_OK) {    return "JavaModelStatus[OK]";  }  StringBuffer buffer=new StringBuffer();  buffer.append("Java Model Status [");  buffer.append(getMessage());  buffer.append("]");  return buffer.toString();}  }
class C{  public String createUniqueServerId(){  return UsefulBits.getMd5String(LOCAL_SERVER_URL + LOCAL_SERVER_PORT + REMOTE_SERVER_URL+ REMOTE_SERVER_PORT);}  }
class C{  public static boolean ct(Object left,Object right) throws PageException {  return Caster.toString(left).toLowerCase().indexOf(Caster.toString(right).toLowerCase()) != -1;}  }
class C{  private boolean processNextLine(){  values.clear();  String line=null;  try {    line=reader.readLine();  } catch (  final IOException e1) {  }  if (line == null) {    return false;  }  final String[] lineTmp=line.split("\"");  line=lineTmp[0];  for (int i=1; i < lineTmp.length; i++) {    if (i % 2 != 0) {      line+="\"" + lineTmp[i].replace(" ","__");    } else {      line+="\"" + lineTmp[i];    }  }  for (  final String part : line.split(SPLITTER)) {    final String[] valuePairs=part.split("=");    if (valuePairs.length == 2) {      values.put(valuePairs[0],valuePairs[1].replace("__"," "));    }  }  return true;}  }
class C{  public static final List<BodyFixture> show(Window owner,Image icon){  AddNonConvexFixtureDialog dialog=new AddNonConvexFixtureDialog(owner,icon);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    List<Convex> shapes=dialog.pnlPolygon.getShapes();    BodyFixture fixture=dialog.fixture;    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    List<BodyFixture> fixtures=new ArrayList<BodyFixture>(shapes.size());    int i=1;    for (    Convex convex : shapes) {      BodyFixture bf=new BodyFixture(convex);      if (!tx.isZero()) {        convex.translate(tx);      }      if (a != 0.0) {        convex.rotateAboutCenter(a);      }      bf.setDensity(fixture.getDensity());      bf.setFilter(fixture.getFilter());      bf.setFriction(fixture.getFriction());      bf.setRestitution(fixture.getRestitution());      bf.setSensor(fixture.isSensor());      bf.setUserData(fixture.getUserData() + "_" + i);      fixtures.add(bf);      i++;    }synchronized (AddConvexFixtureDialog.class) {      AddConvexFixtureDialog.N++;    }    return fixtures;  }  return null;}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  private boolean isSelectAlternative(int pos){  if (pos + 1 >= lambdaForm.names.length)   return false;  Name name0=lambdaForm.names[pos];  Name name1=lambdaForm.names[pos + 1];  return nameRefersTo(name0,MethodHandleImpl.class,"selectAlternative") && isInvokeBasic(name1) && name1.lastUseIndex(name0) == 0 && lambdaForm.lastUseIndex(name0) == pos + 1;}  }
class C{  public void transform(AffineTransform at){  if (at.getType() != AffineTransform.TYPE_IDENTITY)   throw new IllegalArgumentException("ExtendedGeneralPaths can not be transformed");}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void recorderEncoderLoop(MediaCodec codec,SpeechRecord speechRecord){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    codec.start();    ByteBuffer[] codecInputBuffers=codec.getInputBuffers();    ByteBuffer[] codecOutputBuffers=codec.getOutputBuffers();    Log.i("input buffers " + codecInputBuffers.length + "; output buffers: "+ codecOutputBuffers.length);    boolean doneSubmittingInput=false;    int numRetriesDequeueOutputBuffer=0;    int index;    while (true) {      if (!doneSubmittingInput) {        index=codec.dequeueInputBuffer(DEQUEUE_TIMEOUT);        if (index >= 0) {          int size=queueInputBuffer(codec,codecInputBuffers,index,speechRecord);          if (size == -1) {            codec.queueInputBuffer(index,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);            Log.i("enc: in: EOS");            doneSubmittingInput=true;          } else {            Log.i("enc: in: " + size);            mNumBytesSubmitted+=size;          }        } else {          Log.i("enc: in: timeout, will try again");        }      }      MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();      index=codec.dequeueOutputBuffer(info,DEQUEUE_TIMEOUT);      Log.i("enc: out: flags/index: " + info.flags + "/"+ index);      if (index == MediaCodec.INFO_TRY_AGAIN_LATER) {        Log.i("enc: out: INFO_TRY_AGAIN_LATER: " + numRetriesDequeueOutputBuffer);        if (++numRetriesDequeueOutputBuffer > MAX_NUM_RETRIES_DEQUEUE_OUTPUT_BUFFER) {          break;        }      } else       if (index == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {        MediaFormat format=codec.getOutputFormat();        Log.i("enc: out: INFO_OUTPUT_FORMAT_CHANGED: " + format.toString());      } else       if (index == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {        codecOutputBuffers=codec.getOutputBuffers();        Log.i("enc: out: INFO_OUTPUT_BUFFERS_CHANGED");      } else {        dequeueOutputBuffer(codec,codecOutputBuffers,index,info);        mNumBytesDequeued+=info.size;        if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {          Log.i("enc: out: EOS");          break;        }      }    }    codec.stop();    codec.release();  }}  }
class C{  public Principal localPrincipal(){  return !localCertificates.isEmpty() ? ((X509Certificate)localCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  @Override public DisjointSet<K> reduce(DisjointSet<K> s1,DisjointSet<K> s2) throws Exception {  int count1=s1.getMatches().size();  int count2=s2.getMatches().size();  if (count1 <= count2) {    s2.merge(s1);    return s2;  }  s1.merge(s2);  return s1;}  }
class C{  public Color multiply(Color color){  return rgbac(red() * color.red(),green() * color.green(),blue() * color.blue(),alpha());}  }
class C{  public static void updateGamesMoves(Game game,MovesMessage message){  int halfMoveCountGameStartedOn=game.getHalfMoveCount() - game.getMoveList().getSize();  if (message.moves.length > 0 && halfMoveCountGameStartedOn != 0) {    Game gameClone=null;    if (message.style12 == null) {      gameClone=GameFactory.createStartingPosition(game.getVariant());    } else {      gameClone=createGameFromVariant(game.getVariant(),game);      updatePosition(gameClone,message.style12);      if (gameClone.getVariant() == Variant.fischerRandom) {        ((FischerRandomGame)gameClone).initialPositionIsSet();      } else       if (gameClone.getVariant() == Variant.fischerRandomBughouse) {        ((FischerRandomBughouseGame)gameClone).initialPositionIsSet();      } else       if (gameClone.getVariant() == Variant.fischerRandomCrazyhouse) {        ((FischerRandomCrazyhouseGame)gameClone).initialPositionIsSet();      } else       if (gameClone.getVariant() == Variant.wild) {        ((WildGame)gameClone).initialPositionIsSet();      }      updateNonPositionFields(gameClone,message.style12);      game.setHeader(PgnHeader.FEN,gameClone.toFen());    }    gameClone.addState(Game.UPDATING_SAN_STATE);    gameClone.addState(Game.UPDATING_ECO_HEADERS_STATE);    for (int i=0; i < message.moves.length; i++) {      try {        if (gameClone.isInState(Game.DROPPABLE_STATE)) {          gameClone.setDropCount(WHITE,PAWN,1);          gameClone.setDropCount(WHITE,QUEEN,1);          gameClone.setDropCount(WHITE,ROOK,1);          gameClone.setDropCount(WHITE,KNIGHT,1);          gameClone.setDropCount(WHITE,BISHOP,1);          gameClone.setDropCount(BLACK,PAWN,1);          gameClone.setDropCount(BLACK,QUEEN,1);          gameClone.setDropCount(BLACK,ROOK,1);          gameClone.setDropCount(BLACK,KNIGHT,1);          gameClone.setDropCount(BLACK,BISHOP,1);        }        Move move=gameClone.makeSanMove(message.moves[i]);        move.addAnnotation(new TimeTakenForMove(message.timePerMove[i]));      } catch (      IllegalArgumentException iae) {        LOG.error("Could not parse san",iae);        Raptor.getInstance().onError("Error update game with moves",iae);      }    }    Move[] moves=gameClone.getMoveList().asArray();    game.getMoveList().prepend(moves);    game.setInitialEpSquare(gameClone.getInitialEpSquare());    if (StringUtils.isBlank(game.getHeader(PgnHeader.ECO)) && StringUtils.isNotBlank(gameClone.getHeader(PgnHeader.ECO))) {      game.setHeader(PgnHeader.ECO,gameClone.getHeader(PgnHeader.ECO));    }    if (StringUtils.isBlank(game.getHeader(PgnHeader.Opening)) && StringUtils.isNotBlank(gameClone.getHeader(PgnHeader.Opening))) {      game.setHeader(PgnHeader.Opening,gameClone.getHeader(PgnHeader.Opening));    }  } else   if (message.moves.length == 0 && message.style12 != null) {    game.clear();    updateNonPositionFields(game,message.style12);    updatePosition(game,message.style12);    game.setHeader(PgnHeader.FEN,game.toFen());    game.removeHeader(PgnHeader.ECO);    game.removeHeader(PgnHeader.Opening);  }}  }
class C{  private Date stringToDate(String dateString){  Matcher m=DATE_PATTERN.matcher(dateString);  Calendar date=new GregorianCalendar();  if (!m.matches()) {    throw new NumberFormatException("Invalid date format.");  }  date.set(Integer.valueOf(m.group(3)),Integer.valueOf(m.group(1)) - 1,Integer.valueOf(m.group(2)),0,0,0);  return date.getTime();}  }
class C{  public void testDeleteOneFileOnDrive() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  instrumentation.waitForIdleSync();  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);  File file=SyncTestUtils.getFile(EndToEndTestUtils.trackName,drive);  SyncTestUtils.removeFile(file,drive);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);  SyncTestUtils.checkTracksNumber(1);}  }
class C{  public static final ImmutableBiMap<INaviView,INaviFunction> loadViewFunctionMapping(final AbstractSQLProvider provider,final List<IFlowgraphView> flowgraphs,final List<INaviFunction> functions,final CModule module) throws CouldntLoadDataException {  checkArguments(provider,module,flowgraphs,functions);  final HashMap<Integer,INaviView> viewmap=new HashMap<Integer,INaviView>();  for (  final IFlowgraphView view : flowgraphs) {    viewmap.put(view.getConfiguration().getId(),view);  }  final HashMap<IAddress,INaviFunction> functionMap=new HashMap<IAddress,INaviFunction>();  for (  final INaviFunction function : functions) {    functionMap.put(function.getAddress(),function);  }  final CConnection connection=provider.getConnection();  final String query="SELECT view_id, function FROM " + CTableNames.FUNCTION_VIEWS_TABLE + " WHERE module_id = "+ module.getConfiguration().getId();  final HashMap<INaviView,INaviFunction> viewFunctionMap=new HashMap<INaviView,INaviFunction>();  try {    final ResultSet resultSet=connection.executeQuery(query,true);    try {      while (resultSet.next()) {        final INaviView view=viewmap.get(resultSet.getInt("view_id"));        final INaviFunction function=functionMap.get(PostgreSQLHelpers.loadAddress(resultSet,"function"));        if ((view != null) && (function != null)) {          viewFunctionMap.put(view,function);        }      }    }  finally {      resultSet.close();    }    return new ImmutableBiMap.Builder<INaviView,INaviFunction>().putAll(viewFunctionMap).build();  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawRect(x,y - SHAPE_WIDTH / 2,x + SHAPE_WIDTH,y + SHAPE_WIDTH / 2,paint);}  }
class C{  public static Coord4D read(ByteBuf dataStream){  return new Coord4D(dataStream.readInt(),dataStream.readInt(),dataStream.readInt(),dataStream.readInt());}  }
class C{  private void fillPicks() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);  fWarehouse=new VLookup("M_Warehouse_ID",true,false,true,orgL);  lWarehouse.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  fWarehouse.addVetoableChangeListener(this);  m_M_Warehouse_ID=fWarehouse.getValue();  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);  lBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fBPartner.addVetoableChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"VendorRMA")));  cmbDocType.addActionListener(this);}  }
class C{  public static String validateLatLong(String s){  String regex_coords="^(\\(\\-?\\d+(\\.\\d+)?),\\s*(\\-?\\d+(\\.\\d+)?\\))$";  Pattern compiledPattern2=Pattern.compile(regex_coords,Pattern.CASE_INSENSITIVE);  Matcher matcher2=compiledPattern2.matcher(s);  while (matcher2.find()) {    return "Valid";  }  return "Invalid";}  }
class C{  public static AccessControlList parseGetBucketAcl(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    AccessControlList acl=new AccessControlList();    String id=root.getChild("Owner").getChildText("ID");    String displayName=root.getChild("Owner").getChildText("DisplayName");    Owner owner=new Owner(id,displayName);    acl.setOwner(owner);    String aclString=root.getChild("AccessControlList").getChildText("Grant");    CannedAccessControlList cacl=CannedAccessControlList.parse(aclString);switch (cacl) {case PublicRead:      acl.grantPermission(GroupGrantee.AllUsers,Permission.Read);    break;case PublicReadWrite:  acl.grantPermission(GroupGrantee.AllUsers,Permission.FullControl);break;default :break;}return acl;} catch (Exception e) {throw new ResponseParseException(e.getMessage(),e);}}  }
class C{  public static DCCppReply parseDCCppReply(String s){  log.debug("Parse charAt(0): {} ({})",s.charAt(0),Character.toString(s.charAt(0)));  DCCppReply r=new DCCppReply(s.charAt(0),null);switch (s.charAt(0)) {case DCCppConstants.VERSION_REPLY:    if (s.matches(DCCppConstants.STATUS_REPLY_REGEX)) {      r.myReply=new StringBuilder(s);      log.debug("Status Reply: {}",r.toString());      r._nDataChars=r.toString().length();      r.myRegex=DCCppConstants.STATUS_REPLY_REGEX;      return (r);    } else {      return (null);    }case DCCppConstants.THROTTLE_REPLY:  if (s.matches(DCCppConstants.THROTTLE_REPLY_REGEX)) {    r.myReply=new StringBuilder(s);  } else {    return (null);  }log.debug("Throttle Reply: {}",r.toString());r._nDataChars=r.toString().length();r.myRegex=DCCppConstants.THROTTLE_REPLY_REGEX;return (r);case DCCppConstants.TURNOUT_REPLY:if (s.matches(DCCppConstants.TURNOUT_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.TURNOUT_REPLY_REGEX;} else if (s.matches(DCCppConstants.TURNOUT_DEF_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.TURNOUT_DEF_REPLY_REGEX;} else if (s.matches(DCCppConstants.MADC_FAIL_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.MADC_FAIL_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();log.debug("Parsed Reply: {} length {}",r.toString(),r._nDataChars);return (r);case DCCppConstants.OUTPUT_REPLY:if (s.matches(DCCppConstants.OUTPUT_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.OUTPUT_REPLY_REGEX;} else if (s.matches(DCCppConstants.OUTPUT_LIST_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.OUTPUT_LIST_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();log.debug("Parsed Reply: {} length {}",r.toString(),r._nDataChars);return (r);case DCCppConstants.PROGRAM_REPLY:if (s.matches(DCCppConstants.PROGRAM_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.PROGRAM_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.POWER_REPLY:if (s.matches(DCCppConstants.TRACK_POWER_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.TRACK_POWER_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.CURRENT_REPLY:if (s.matches(DCCppConstants.CURRENT_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.CURRENT_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.WRITE_EEPROM_REPLY:if (s.matches(DCCppConstants.WRITE_EEPROM_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.WRITE_EEPROM_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.MEMORY_REPLY:if (s.matches(DCCppConstants.FREE_MEMORY_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.FREE_MEMORY_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.SENSOR_REPLY_H:if (s.matches(DCCppConstants.SENSOR_INACTIVE_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.SENSOR_INACTIVE_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.SENSOR_REPLY_L:if (s.matches(DCCppConstants.SENSOR_ACTIVE_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.SENSOR_ACTIVE_REPLY_REGEX;} else if (s.matches(DCCppConstants.SENSOR_DEF_REPLY_REGEX)) {r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.SENSOR_DEF_REPLY_REGEX;} else {return (null);}r._nDataChars=r.toString().length();return (r);case DCCppConstants.MADC_FAIL_REPLY:r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.MADC_FAIL_REPLY_REGEX;return (r);case DCCppConstants.MADC_SUCCESS_REPLY:r.myReply=new StringBuilder(s);r.myRegex=DCCppConstants.MADC_SUCCESS_REPLY_REGEX;return (r);default :return (null);}}  }
class C{  public static String trimLeadingAndTrailingSlashes(final String in){  if (null == in)   return in;  String out=in;  if (out.startsWith("/")) {    out=out.substring(1);  }  if (out.endsWith("/")) {    out=out.substring(0,out.length() - 1);  }  return out;}  }
class C{  protected JsonObject fixForUpdate(JsonObject original){  JsonObject copy=Json.parse(original.toJson());  if (copy.hasKey("id"))   copy.remove("id");  if (copy.hasKey("type"))   copy.remove("type");  return copy;}  }
class C{  @Override protected void onPrepareDialog(int id,Dialog dialog){switch (id) {case CONFIRM_DIALOG_ID:{      ((AlertDialog)dialog).setMessage(getString(R.string.alreadyInstalled));      break;    }case ERROR_DIALOG_ID:{    ((AlertDialog)dialog).setMessage((error == null ? getString(R.string.defaultError) : error));    break;  }}}  }
class C{  public String postProcessing(String text){  String[] lines=text.split("\n");  String ret="";  for (  String line : lines) {    String[] words=line.split("[ \t]");    String templine="";    for (    String currentWord : words) {      String[] syllables=currentWord.split("_");      boolean isContainNotValidSyll=false;      for (      String syllable : syllables) {        VnSyllParser parser=new VnSyllParser(syllable.toLowerCase());        if (!parser.isValidVnSyllable()) {          isContainNotValidSyll=true;          break;        }      }      if (isContainNotValidSyll) {        String temp="";        for (        String syll : syllables) {          temp+=syll + " ";        }        templine+=temp.trim() + " ";      } else       templine+=currentWord + " ";    }    ret+=templine.trim() + "\n";  }  return ret.trim();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String title(){  String titlestr=this.dc_title();  if (titlestr.isEmpty()) {    titlestr=this.url() != null ? this.url().getFileName() : "";  }  return titlestr;}  }
class C{  public void renameAttribute(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().renameAttribute();}  }
class C{  public ContainsEvaluator(String expr){  super(expr);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[][] arrays=genArrays(size,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public static Map<String,String> filterProperties(Map<String,String> properties,String optionPrefix){  if (properties == null) {    throw new IllegalArgumentException("The given properties object was null.");  }  HashMap<String,String> rc=new HashMap<>(properties.size());  for (Iterator<Entry<String,String>> iter=properties.entrySet().iterator(); iter.hasNext(); ) {    Entry<String,String> entry=iter.next();    if (entry.getKey().startsWith(optionPrefix)) {      String name=entry.getKey().substring(optionPrefix.length());      rc.put(name,entry.getValue());      iter.remove();    }  }  return rc;}  }
class C{  public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  private void fetchTag(){  savePossibleSimpleKey();  this.allowSimpleKey=false;  Token tok=scanTag();  this.tokens.add(tok);}  }
class C{  public int doStartTag(){  int C_BPartner_ID=0;  try {    String info=(String)ExpressionUtil.evalNotNull("requestOrder","bpartnerID",m_bpartnerID_el,String.class,this,pageContext);    if (info != null && info.length() != 0)     C_BPartner_ID=Integer.parseInt(info);  } catch (  Exception e) {    log.severe("BPartner - " + e);  }  JspWriter out=pageContext.getOut();  select select=getRefOrders(C_BPartner_ID);  select.output(out);  return (SKIP_BODY);}  }
class C{  public synchronized AggregateTable addAggregates(String group,Schema schema){  AggregateTable vat=new AggregateTable(this,group,schema);  addDataGroup(group,vat,null);  return vat;}  }
class C{  public void pushElemTemplateElement(ElemTemplateElement elem){  m_currentTemplateElements.push(elem);}  }
class C{  public boolean canClose(){  return canClose;}  }
class C{  public static void invokeInEveryVM(final Class<?> targetClass,final String targetMethod,final Object[] methodArgs){  for (int hostIndex=0; hostIndex < Host.getHostCount(); hostIndex++) {    Host host=Host.getHost(hostIndex);    for (int vmIndex=0; vmIndex < host.getVMCount(); vmIndex++) {      VM vm=host.getVM(vmIndex);      vm.invoke(targetClass,targetMethod,methodArgs);    }  }}  }
class C{  protected void allocTiles(DirtyRegion maskArea){  xTiles=(maskArea.getWidth() / MASK_SIZE) + 1;  yTiles=(maskArea.getHeight() / MASK_SIZE) + 1;  int tileCnt=xTiles * yTiles;  if (tileCnt > allocatedTiles) {    for (int i=0; i < tileCnt; i++) {      if (i < allocatedTiles) {        tileList.get(i).reset();      } else {        tileList.add(new MaskTile());      }    }    allocatedTiles=tileCnt;  }}  }
class C{  public void testRead2() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int ind=0;  int got=cis.read(result);  while (true) {    for (int j=0; j < got - ind; j++) {      if (result[j] != data[ind + j]) {        fail("read(byte[] b) returned incorrect data.");      }    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by read(byte[] b) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result);    }  }  if (cis.read(result) != -1) {    fail("read(byte[] b) should return -1 " + "at the end of the stream.");  }}  }
class C{  protected String buildResourcePath(String basePath,String resourcePath){  if (basePath == null) {    basePath="";  }  String base=trimSlashes(basePath);  if (!base.equals("")) {    base="/" + base;  }  String result=StringUtils.removeEnd(base + "/" + trimSlashes(resourcePath),"/");  if (result.equals("")) {    result="/";  }  return result;}  }
class C{  @Override public DPState compute(Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  if (rule == null) {    return null;  }  int[] ruleWords;  if (config.source_annotations) {    ruleWords=getTags(rule,i,j,sentence);  } else {    ruleWords=getRuleIds(rule);  }  if (withOovFeature) {    acc.add(oovDenseFeatureIndex,getOovs(ruleWords));  }  final long[] words=mapToKenLmIds(ruleWords,tailNodes,false);  LmPool statePool=sentence.getStateManager().getStatePool(languageModelPoolId,(KenLM)languageModel);  final StateProbPair pair=((KenLM)languageModel).probRule(words,statePool);  acc.add(denseFeatureIndex,pair.prob);  return pair.state;}  }
class C{  private InterproceduralCallGraphVertex findVertex(XMethod xmethod){  InterproceduralCallGraphVertex vertex;  vertex=callGraph.lookupVertex(xmethod.getMethodDescriptor());  if (vertex == null) {    vertex=new InterproceduralCallGraphVertex();    vertex.setXmethod(xmethod);    callGraph.addVertex(vertex);  }  return vertex;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearRetriesSinceFetch(){  fieldSetFlags()[5]=false;  return this;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  v.add(new DERTaggedObject(true,0,originator));  if (ukm != null) {    v.add(new DERTaggedObject(true,1,ukm));  }  v.add(keyEncryptionAlgorithm);  v.add(recipientEncryptedKeys);  return new DERSequence(v);}  }
class C{  public void dispose(){  super.dispose();}  }
class C{  public int trueNegatives(int classindex){  int tn=0;  for (int i=0; i < confusion.length; i++) {    for (int j=0; j < confusion[i].length; j++) {      if (i != classindex && j != classindex) {        tn+=confusion[i][j];      }    }  }  return tn;}  }
class C{  @Override public boolean matches(InventoryCrafting inv,World world){  for (int x=0; x <= MAX_CRAFT_GRID_WIDTH - width; x++) {    for (int y=0; y <= MAX_CRAFT_GRID_HEIGHT - height; ++y) {      if (checkMatch(inv,x,y,false)) {        return true;      }      if (mirrored && checkMatch(inv,x,y,true)) {        return true;      }    }  }  return false;}  }
class C{  public EditableOMRect(){  createGraphic(null);}  }
class C{  public void cfgIncludeLookupOnly(ConfigurationValue val,boolean includeLookupOnly){  this.includeLookupOnly=includeLookupOnly;}  }
class C{  public boolean isValidOn(Date date){  AttCertValidityPeriod certValidityPeriod=attrCert.getAcinfo().getAttrCertValidityPeriod();  return !date.before(CertUtils.recoverDate(certValidityPeriod.getNotBeforeTime())) && !date.after(CertUtils.recoverDate(certValidityPeriod.getNotAfterTime()));}  }
class C{  public static ResultSet resultSetWithNull(Connection conn) throws SQLException {  PreparedStatement statement=conn.prepareStatement("select null from system_range(1,1)");  return statement.executeQuery();}  }
class C{  public void dispose(){}  }
class C{  public Geometry createGeometry(final Map<String,Object> properties){  final Geometry geometry;switch (String.valueOf(properties.get("type")).toUpperCase()) {case "POINT":{      final List posList;      posList=(List)properties.get("coordinates");      final Coordinate coordinate=createCoordinate(posList);      geometry=geometryFactory.createPoint(coordinate);      break;    }case "LINESTRING":{    final List<List> posList;    posList=(List)properties.get("coordinates");    final Coordinate[] coordinates=createCoordinates(posList);    geometry=geometryFactory.createLineString(coordinates);    break;  }case "POLYGON":{  final List<List<List>> posList;  posList=(List)properties.get("coordinates");  geometry=createPolygon(posList);  break;}case "MULTIPOINT":{final List<List> posList;posList=(List)properties.get("coordinates");final Coordinate[] coordinates=createCoordinates(posList);geometry=geometryFactory.createMultiPoint(coordinates);break;}case "MULTILINESTRING":{final List<List<List>> posList;posList=(List)properties.get("coordinates");final LineString[] lineStrings=new LineString[posList.size()];for (int i=0; i < posList.size(); i++) {final Coordinate[] coordinates=createCoordinates(posList.get(i));lineStrings[i]=geometryFactory.createLineString(coordinates);}geometry=geometryFactory.createMultiLineString(lineStrings);break;}case "MULTIPOLYGON":{final List<List<List<List>>> posList;posList=(List)properties.get("coordinates");final Polygon[] polygons=new Polygon[posList.size()];for (int i=0; i < posList.size(); i++) {polygons[i]=createPolygon(posList.get(i));}geometry=geometryFactory.createMultiPolygon(polygons);break;}case "GEOMETRYCOLLECTION":{final List<Map<String,Object>> list;list=(List)properties.get("geometries");final Geometry[] geometries=new Geometry[list.size()];for (int i=0; i < geometries.length; i++) {geometries[i]=createGeometry(list.get(i));}geometry=geometryFactory.createGeometryCollection(geometries);break;}case "ENVELOPE":{final List<List> posList;posList=(List)properties.get("coordinates");final Coordinate[] coords=createCoordinates(posList);final Envelope envelope=new Envelope(coords[0],coords[1]);geometry=geometryFactory.toGeometry(envelope);break;}default :final Object latObj=properties.get("lat");final Object lonObj=properties.get("lon");if (latObj != null && lonObj != null) {final Double lat;if (latObj instanceof Double) {lat=(Double)latObj;} else if (latObj instanceof String) {lat=new Double((String)latObj);} else {lat=null;}final Double lon;if (lonObj instanceof Double) {lon=(Double)lonObj;} else if (lonObj instanceof String) {lon=new Double((String)lonObj);} else {lon=null;}if (lat != null && lon != null) {geometry=geometryFactory.createPoint(new Coordinate(lon,lat));} else {geometry=null;}} else {geometry=null;}break;}return geometry;}  }
class C{  static int createShader(String resource,int type) throws IOException {  return createShader(resource,type,null);}  }
class C{  void loadData(JPEGBuffer buffer) throws IOException {  data=new byte[length];  buffer.readData(data);}  }
class C{  public boolean requestTime(String host,int timeout){  DatagramSocket socket=null;  try {    socket=new DatagramSocket();    socket.setSoTimeout(timeout);    InetAddress address=InetAddress.getByName(host);    byte[] buffer=new byte[NTP_PACKET_SIZE];    DatagramPacket request=new DatagramPacket(buffer,buffer.length,address,NTP_PORT);    buffer[0]=NTP_MODE_CLIENT | (NTP_VERSION << 3);    long requestTime=System.currentTimeMillis();    long requestTicks=SystemClock.elapsedRealtime();    writeTimeStamp(buffer,TRANSMIT_TIME_OFFSET,requestTime);    socket.send(request);    DatagramPacket response=new DatagramPacket(buffer,buffer.length);    socket.receive(response);    long responseTicks=SystemClock.elapsedRealtime();    long responseTime=requestTime + (responseTicks - requestTicks);    long originateTime=readTimeStamp(buffer,ORIGINATE_TIME_OFFSET);    long receiveTime=readTimeStamp(buffer,RECEIVE_TIME_OFFSET);    long transmitTime=readTimeStamp(buffer,TRANSMIT_TIME_OFFSET);    long roundTripTime=responseTicks - requestTicks - (transmitTime - receiveTime);    long clockOffset=((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;    mNtpTime=responseTime + clockOffset;    mNtpTimeReference=responseTicks;    mRoundTripTime=roundTripTime;  } catch (  Exception e) {    if (false)     Log.d(TAG,"request time failed: " + e);    return false;  } finally {    if (socket != null) {      socket.close();    }  }  return true;}  }
class C{  public static void checkLoaded(final int enc){  if ((enc == MAC) && (MAC_char_encoding_table == null)) {    MAC_char_encoding_table=new String[335];    readStandardMappingTable(enc);  } else   if ((enc == WIN) && (WIN_char_encoding_table == null)) {    WIN_char_encoding_table=new String[335];    readStandardMappingTable(enc);  } else   if ((enc == STD) && (STD_char_encoding_table == null)) {    STD_char_encoding_table=new String[335];    readStandardMappingTable(enc);  } else   if ((enc == PDF) && (PDF_char_encoding_table == null)) {    PDF_char_encoding_table=new String[335];    readStandardMappingTable(enc);  } else   if ((enc == SYMBOL) && (SYMBOL_char_encoding_table == null)) {    SYMBOL_char_encoding_table=new String[335];    readStandardMappingTable(SYMBOL,"symbol.cfg");  } else   if ((enc == ZAPF) && (ZAPF_char_encoding_table == null)) {    ZAPF_char_encoding_table=new String[335];    readStandardMappingTable(ZAPF,"zapf.cfg");  } else   if ((enc == MACEXPERT) && (MACEXPERT_char_encoding_table == null)) {    MACEXPERT_char_encoding_table=new String[335];    readStandardMappingTable(MACEXPERT,"mac_expert.cfg");  }}  }
class C{  protected boolean isBalloonTrigger(MouseEvent e){  return (e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() % 2 == 1);}  }
class C{  public DTLZ2(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  final public int packShort(final short v){  if (v < 0) {    throw new IllegalArgumentException("negative value: v=" + v);  }  if (v > 127) {    if (pos + 2 > buf.length)     ensureCapacity(pos + 2);    buf[pos++]=((byte)((0xff & (v >> 8)) | 0x80));    buf[pos++]=((byte)(0xff & v));    limit=pos;    return 2;  } else {    if (pos + 1 > buf.length)     ensureCapacity(pos + 1);    buf[pos++]=((byte)(0xff & v));    limit=pos;    return 1;  }}  }
class C{  public Axis3D(){  this(Vec3D.Z_AXIS);}  }
class C{  public void testChanges() throws Exception {  TableResult res=new TableResult();  assertTrue(db.changes() == 0);  db.exec("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE1 + " VALUES(2, 5, 7);",null);  int rows=(int)db.changes();  assertEquals(1,db.changes());  db.exec("update " + DatabaseCreator.SIMPLE_TABLE1 + " set speed = 7, size= 5 where id = 2;",null);  assertEquals(1,db.changes());  db.exec("select * from " + DatabaseCreator.SIMPLE_TABLE1,res);  assertEquals(0,db.changes());  db.exec("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE1 + " VALUES(8, 5, 7);",null);  db.exec("Update " + DatabaseCreator.SIMPLE_TABLE1 + " set speed = 10;",null);  assertTrue(db.changes() > 2);}  }
class C{  public boolean isExpiration(){  return (this.opDetails & OP_DETAILS_EXPIRE) != 0;}  }
class C{  @Override public CalendarBorderProperties clone(){  CalendarBorderProperties result=new CalendarBorderProperties();  result.backgroundColor=this.backgroundColor;  result.lowerRight=(this.lowerRight == null) ? null : new Point(this.lowerRight);  result.thicknessInPixels=this.thicknessInPixels;  result.upperLeft=(this.upperLeft == null) ? null : new Point(this.upperLeft);  return result;}  }
class C{  @Override public int compareTo(ParseIssue that){  if (this.line == that.line) {    return this.charPositionInLine - that.charPositionInLine;  } else {    return this.line - that.line;  }}  }
class C{  public DefaultRequest redirectResponseTime(Integer value){  setInteger(REDIRECT_RESPONSE_TIME,value);  return this;}  }
class C{  static SchemaField create(String name,FieldType ft,int props,String defValue){  return new SchemaField(name,ft,props,defValue);}  }
class C{  private void parseAttributes(TypedArray a){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);  circleRadius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,circleRadius,metrics);  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_circleRadius,circleRadius);  fillRadius=a.getBoolean(R.styleable.ProgressWheel_fillRadius,false);  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_spinSpeed,spinSpeed / 360.0f);  spinSpeed=baseSpinSpeed * 360;  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_barSpinCycleTime,(int)barSpinCycleTime);  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  rimColor=a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  linearProgress=a.getBoolean(R.styleable.ProgressWheel_linearProgress,false);  if (a.getBoolean(R.styleable.ProgressWheel_progressIndeterminate,false)) {    spin();  }  a.recycle();}  }
class C{  public static Function<Exchange,Exchange> ignoreCommonHeaders(){  return new IgnoreHeadersTransformer("connection","host","accept","user-agent","accept-encoding","content-length","x-client-timestamp","x-server-timestamp","x-log","x-hooked","x-self-request");}  }
class C{  @Override protected void failed(){  relation.setCanceled(true);  super.failed();}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof NeighborMove) {    NeighborMove npm=(NeighborMove)o;    return (npm.player == player) && super.equals(o);  }  return false;}  }
class C{  public static float computeDiscardAlpha(float amount,float range){  if (Math.abs(amount) < 1.0f)   return 1.0f;  float t=amount / range;  t=MathUtils.clamp(t,-1.0f,1.0f);  return 1.f - Math.abs(t);}  }
class C{  public static boolean isLocalContentUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_CONTENT_SCHEME.equals(scheme);}  }
class C{  private int handleT(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,4,"TION")) {    result.append('X');    index+=3;  } else   if (contains(value,index,3,"TIA","TCH")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"TH") || contains(value,index,3,"TTH")) {    if (contains(value,index + 2,2,"OM","AM") || contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) {      result.append('T');    } else {      result.append('0','T');    }    index+=2;  } else {    result.append('T');    index=contains(value,index + 1,1,"T","D") ? index + 2 : index + 1;  }  return index;}  }
class C{  public boolean run(Mode mode){  return false;}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,String match){  int length=offset + match.length();  char[] textArray=text.array;  if (length > text.offset + text.count)   return false;  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match.charAt(j);    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2)     return false;  }  return true;}  }
class C{  private long indexToFileposition(long index){  long pos=headersize + index * recordsize;  return pos;}  }
class C{  @HLEFunction(nid=0x1FB2FDDD,version=150) public long sceNetAtoi(@CanBeNull PspString string){  return Integer.parseInt(string.getString());}  }
class C{  public void testPrecedence() throws Exception {  PrecedenceQueryParser parser=getParser(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false));  Query query1=parser.parse("A AND B OR C AND D","field");  Query query2=parser.parse("(A AND B) OR (C AND D)","field");  assertEquals(query1,query2);  query1=parser.parse("A OR B C","field");  query2=parser.parse("(A B) C","field");  assertEquals(query1,query2);  query1=parser.parse("A AND B C","field");  query2=parser.parse("(+A +B) C","field");  assertEquals(query1,query2);  query1=parser.parse("A AND NOT B","field");  query2=parser.parse("+A -B","field");  assertEquals(query1,query2);  query1=parser.parse("A OR NOT B","field");  query2=parser.parse("A -B","field");  assertEquals(query1,query2);  query1=parser.parse("A OR NOT B AND C","field");  query2=parser.parse("A (-B +C)","field");  assertEquals(query1,query2);  parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);  query1=parser.parse("A AND B OR C AND D","field");  query2=parser.parse("(A AND B) OR (C AND D)","field");  assertEquals(query1,query2);  query1=parser.parse("A AND B C","field");  query2=parser.parse("(A B) C","field");  assertEquals(query1,query2);  query1=parser.parse("A AND B C","field");  query2=parser.parse("(+A +B) C","field");  assertEquals(query1,query2);  query1=parser.parse("A AND NOT B","field");  query2=parser.parse("+A -B","field");  assertEquals(query1,query2);  query1=parser.parse("A AND NOT B OR C","field");  query2=parser.parse("(+A -B) OR C","field");  assertEquals(query1,query2);}  }
class C{  private void updateHelp(){  if (neuronPropertiesPanel.getUpdateRulePanel().getCbNeuronType().getSelectedItem() == SimbrainConstants.NULL_STRING) {    helpAction=new ShowHelpAction("Pages/Network/neuron.html");  } else {    String name=(String)neuronPropertiesPanel.getUpdateRulePanel().getCbNeuronType().getSelectedItem();    helpAction=new ShowHelpAction("Pages/Network/neuron/" + name + ".html");  }  helpButton.setAction(helpAction);}  }
class C{  String[] split(final String stringToSplit){  if (StringUtils.isNotBlank(stringToSplit)) {    int strLenght=stringToSplit.length();    int splitNum=strLenght / chunkSize;    if (strLenght % chunkSize > 0) {      splitNum+=1;    }    String[] result=new String[splitNum];    for (int i=0; i < splitNum; i++) {      int startPos=i * chunkSize;      int endPos=startPos + chunkSize;      if (endPos > strLenght) {        endPos=strLenght;      }      result[i]=stringToSplit.substring(startPos,endPos);    }    return result;  }  return null;}  }
class C{  public Builder removeRoles(){  this.roles.clear();  return this;}  }
class C{  public NameService createNameService() throws Exception {  return new DNSNameService();}  }
class C{  @Nullable @ObjectiveCName("editNameCommandWithUid:withName:") public Command<Boolean> editName(final int uid,final String name){  return null;}  }
class C{  public void addReference2ExtId(Integer dbId,String extId){  dbId2ExtId.put(dbId,extId);}  }
class C{  public void checkConsistent(){}  }
class C{  public Document(){  body=new ListElement();}  }
class C{  public GemFireCheckedException(String message){  super(message);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.SubjectAlternativeName_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override public void onItemClick(AdapterView<?> list,View item,int position,long id){  Intent intent=new Intent();  intent.putExtra(Extra.USER,(String)getListView().getAdapter().getItem(position));  setResult(RESULT_OK,intent);  finish();}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.738 -0500",hash_original_method="51B2CCF2735E77C63E82DEC17109A5B1",hash_generated_method="00D5E1A38930FCC8E9B47A738DBEB5B5") public void reqRemomveApnContext(ApnContext apnContext){  Message response=sendMessageSynchronously(REQ_REMOVE_APNCONTEXT,apnContext);  if (DBG)   log("reqRemomveApnContext");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 * z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 * constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 * z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized Relationship addRelationship(Primitive type,Primitive target){  Vertex typeVertex=this.network.createVertex(type);  Vertex targetVertex=this.network.createVertex(target);  return addRelationship(typeVertex,targetVertex,-1,false);}  }
class C{  public static Number atanh(Number a){  return FastMath.atanh(a.doubleValue());}  }
class C{  @Override public boolean absolute(int rowNumber) throws SQLException {  try {    debugCodeCall("absolute",rowNumber);    checkClosed();    if (rowNumber < 0) {      rowNumber=result.getRowCount() + rowNumber + 1;    } else     if (rowNumber > result.getRowCount() + 1) {      rowNumber=result.getRowCount() + 1;    }    if (rowNumber <= result.getRowId()) {      resetResult();    }    while (result.getRowId() + 1 < rowNumber) {      nextRow();    }    int row=result.getRowId();    return row >= 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void tableChanged(TableModelEvent e){  if (e.getColumn() != 0)   return;  log.config("Row=" + e.getFirstRow() + "-"+ e.getLastRow()+ ", Col="+ e.getColumn()+ ", Type="+ e.getType());  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  int matchedRow=xMatchedTable.getSelectedRow();  KeyNamePair Product=(KeyNamePair)xMatchedTable.getValueAt(matchedRow,5);  double qty=0.0;  int noRows=0;  for (int row=0; row < xMatchedToTable.getRowCount(); row++) {    IDColumn id=(IDColumn)xMatchedToTable.getValueAt(row,0);    if (id != null && id.isSelected()) {      KeyNamePair ProductCompare=(KeyNamePair)xMatchedToTable.getValueAt(row,5);      if (Product.getKey() != ProductCompare.getKey()) {        id.setSelected(false);      } else {        if (matchMode.getSelectedIndex() == MODE_NOTMATCHED)         qty+=((Double)xMatchedToTable.getValueAt(row,I_QTY)).doubleValue();        qty-=((Double)xMatchedToTable.getValueAt(row,I_MATCHED)).doubleValue();        noRows++;      }    }  }  m_xMatchedTo=new BigDecimal(qty);  xMatchedTo.setValue(m_xMatchedTo);  difference.setValue(m_xMatched.subtract(m_xMatchedTo));  bProcess.setEnabled(noRows != 0);  panel.setCursor(Cursor.getDefaultCursor());  statusBar.setStatusDB(noRows);}  }
class C{  public Event(){  super(EVENT);}  }
class C{  public void addOnScrollListener(final OnScrollListener listener){  throwIfNotOnMainThread();  compositeScrollListener.addOnScrollListener(listener);}  }
class C{  public TaggingService(int p,ServiceOption option){  this.port=p;  this.option=option;}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixPlainText(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1) {          matrix.setSignificance(n,i,SIGNIFICANCE_WIN);        } else {          matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);        }      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  static void provideErrorFeedback(Component component){  Toolkit toolkit=null;  if (component != null) {    toolkit=component.getToolkit();  } else {    toolkit=Toolkit.getDefaultToolkit();  }  toolkit.beep();}  }
class C{  public IndividualUnitPanel(final HashMap<Unit,Triple<Integer,Integer,Integer>> unitsAndTheirMaxMinAndCurrent,final String title,final GameData data,final IUIContext context,final int max,final boolean showMinAndMax,final boolean showSelectAll,final ScrollableTextFieldListener optionalListener){  m_data=data;  m_uiContext=context;  m_title=new JTextArea(title);  m_title.setBackground(this.getBackground());  m_title.setEditable(false);  m_title.setWrapStyleWord(true);  m_countOptionalTextFieldListener=optionalListener;  setMaxAndShowMaxButton(max);  m_showSelectAll=showSelectAll;  for (  final Entry<Unit,Triple<Integer,Integer,Integer>> entry : unitsAndTheirMaxMinAndCurrent.entrySet()) {    final int unitMax=entry.getValue().getFirst();    int thisMax;    if (m_max < 0 && unitMax < 0) {      thisMax=-1;    } else     if (unitMax < 0) {      thisMax=m_max;    } else     if (m_max < 0) {      thisMax=unitMax;    } else {      thisMax=Math.min(m_max,unitMax);    }    final int thisMin=Math.max(0,entry.getValue().getSecond());    final int thisCurrent=Math.max(thisMin,Math.min(thisMax,entry.getValue().getThird()));    m_entries.add(new SingleUnitPanel(entry.getKey(),m_data,m_uiContext,m_textFieldListener,thisMax,thisMin,thisCurrent,showMinAndMax));  }  layoutEntries();}  }
class C{  public Iterator iterator(){  return allNodes.iterator();}  }
class C{  public void testAndNotNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void lastWill(){  Intent intent=new Intent();  intent.setClassName(advanced,"org.eclipse.paho.android.service.sample.LastWill");  advanced.startActivityForResult(intent,ActivityConstants.lastWill);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          if ((z1 + z2) > 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public StorageGroupPolicyLimitsParam createStorageGroupPolicyLimitsParam(Collection<VolumeURIHLU> volumeUriHLUs,StorageSystem storage,DbClient dbClient){  StorageGroupPolicyLimitsParam policyQuota=new StorageGroupPolicyLimitsParam(Constants.NONE);  for (  VolumeURIHLU volumeUriHLU : volumeUriHLUs) {    String policyName=null;    if (storage.checkIfVmax3()) {      policyName=getVMAX3FastSettingForVolume(volumeUriHLU.getVolumeURI(),volumeUriHLU.getAutoTierPolicyName());    } else {      policyName=volumeUriHLU.getAutoTierPolicyName();    }    policyQuota=new StorageGroupPolicyLimitsParam(policyName,volumeUriHLU.getHostIOLimitBandwidth(),volumeUriHLU.getHostIOLimitIOPs(),storage);    break;  }  return policyQuota;}  }
class C{  public <T>ListGeneratorBuilder<T> allListsOf(Source<T> source){  return new ListGeneratorBuilder<T>(source);}  }
class C{  public int insert(String table,String key,HashMap<String,ByteIterator> values){  delay();  if (verbose) {    System.out.print("INSERT " + table + " "+ key+ " [ ");    if (values != null) {      for (      String k : values.keySet()) {        System.out.print(k + "=" + values.get(k)+ " ");      }    }    System.out.println("]");  }  return 0;}  }
class C{  public mxStylesheet(){  setDefaultVertexStyle(createDefaultVertexStyle());  setDefaultEdgeStyle(createDefaultEdgeStyle());}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public boolean isRunning(){  return mCurFrame > -1;}  }
class C{  protected boolean[] correctBuildInitialisation(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  boolean[] result=new boolean[2];  print("correct initialisation during buildClusterer");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false;  Instances train1=null;  Instances train2=null;  Clusterer clusterer=null;  ClusterEvaluation evaluation1A=null;  ClusterEvaluation evaluation1B=null;  ClusterEvaluation evaluation2=null;  boolean built=false;  int stage=0;  try {    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,multiInstance);    if (nominalPredictor && !multiInstance) {      train1.deleteAttributeAt(0);      train2.deleteAttributeAt(0);    }    if (missingLevel > 0) {      addMissing(train1,missingLevel,predictorMissing);      addMissing(train2,missingLevel,predictorMissing);    }    clusterer=AbstractClusterer.makeCopies(getClusterer(),1)[0];    evaluation1A=new ClusterEvaluation();    evaluation1B=new ClusterEvaluation();    evaluation2=new ClusterEvaluation();  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    clusterer.buildClusterer(train1);    built=true;    evaluation1A.setClusterer(clusterer);    evaluation1A.evaluateClusterer(train1);    stage=1;    built=false;    clusterer.buildClusterer(train2);    built=true;    evaluation2.setClusterer(clusterer);    evaluation2.evaluateClusterer(train2);    stage=2;    built=false;    clusterer.buildClusterer(train1);    built=true;    evaluation1B.setClusterer(clusterer);    evaluation1B.evaluateClusterer(train1);    stage=3;    if (!evaluation1A.equals(evaluation1B)) {      if (m_Debug) {        println("\n=== Full report ===\n");        println("First buildClusterer()");        println(evaluation1A.clusterResultsToString() + "\n\n");        println("Second buildClusterer()");        println(evaluation1B.clusterResultsToString() + "\n\n");      }      throw new Exception("Results differ between buildClusterer calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");}}return result;}  }
class C{  @Override public void think(){  try {    if (!this.bot.mind().isConscious()) {      return;    }    if (this.isStopped) {      return;    }    if (this.isEnabled) {      if (Utils.random().nextInt(20) >= 19) {        Network memory=this.bot.memory().newMemory();        Vertex forgetfulness=memory.createVertex(getPrimitive());        Vertex activeCount=forgetfulness.getRelationship(Primitive.COUNT);        int accessCount=0;        if (activeCount == null) {          forgetfulness.addRelationship(Primitive.COUNT,memory.createVertex(accessCount));        } else {          accessCount=((Number)activeCount.getData()).intValue();        }        accessCount=accessCount + 20;        memory.save();        log("accessCount",Level.FINE,accessCount);        if (accessCount < (this.maxRelationships * 2)) {          forgetfulness.setRelationship(Primitive.COUNT,memory.createVertex(accessCount));          memory.save();          return;        } else {          forgetfulness.setRelationship(Primitive.COUNT,memory.createVertex(0));        }        memory.save();        forget(memory,false);      }    }  } catch (  Exception failure) {    log(failure);  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  @Override protected void appendFields(StringBuffer buff){  super.appendFields(buff);  buff.append("; key=").append(getKey());  if (originalSender != null) {    buff.append("; originalSender=").append(originalSender);  }  if (bridgeContext != null) {    buff.append("; bridgeContext=").append(bridgeContext);  }  if (eventId != null) {    buff.append("; eventId=").append(eventId);  }  if (this.versionTag != null) {    buff.append("; version=").append(this.versionTag);  }  if (filterInfo != null) {    buff.append("; ").append(filterInfo);  }}  }
class C{  public static String[] parseTitle(String title){  String v[]={"",""};  if (title == null)   return v;  Pattern p=Pattern.compile("(.*)\\s+\\(?([0-9]{4})\\)?",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(title);  if (m.find()) {    v[0]=m.group(1);    v[1]=m.group(2);  } else {    v[0]=title;  }  return v;}  }
class C{  public static int color(ColorHolder colorHolder,Context ctx){  if (colorHolder == null) {    return 0;  } else {    return colorHolder.color(ctx);  }}  }
class C{  public void resetConnected(){  setFillPaint(DISCONNECTED_COLOR);}  }
class C{  public static void PostInstantly(String url,JSONObject json,Runnable disconnectedCallback,HeaderPair... headers){  EspHttpUtil.PostInstantly(url,json,disconnectedCallback,headers);}  }
class C{  private View fillSpecific(int position,int left){  boolean tempIsSelected=position == mSelectedPosition;  View temp=makeAndAddView(position,left,true,mListPadding.top,tempIsSelected);  mFirstPosition=position;  View before;  View after;  final int dividerWidth=mDividerWidth;  if (!mStackFromRight) {    before=fillLeft(position - 1,temp.getLeft() - dividerWidth);    adjustViewsLeftOrRight();    after=fillRight(position + 1,temp.getRight() + dividerWidth);    int childCount=getChildCount();    if (childCount > 0) {      correctTooWide(childCount);    }  } else {    after=fillRight(position + 1,temp.getRight() + dividerWidth);    adjustViewsLeftOrRight();    before=fillLeft(position - 1,temp.getLeft() - dividerWidth);    int childCount=getChildCount();    if (childCount > 0) {      correctTooSmall(childCount);    }  }  if (tempIsSelected) {    return temp;  } else   if (before != null) {    return before;  } else {    return after;  }}  }
class C{  public boolean toBoolean(Element el,String attributeName){  return Caster.toBooleanValue(el.getAttribute(attributeName),false);}  }
class C{  public boolean hasUnhandled(){  for (int i=0; i < getNumEntries(); i++) {    boolean handled=getEntry(i).hasUnhandled();    if (handled) {      return true;    }  }  return false;}  }
class C{  public static DecomposableMatchBuilder0<Long> caseLong(long l){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(l));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Long.class));}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void dispose(){synchronized (cacheMap) {    cacheMap.clear();  }}  }
class C{  @Override public void check(Certificate cert,Collection<String> unresolvedCritExts) throws CertPathValidatorException {  X509Certificate currCert=(X509Certificate)cert;  if (!sigOnly) {    verifyTimestamp(currCert);    verifyNameChaining(currCert);  }  verifySignature(currCert);  updateState(currCert);}  }
class C{  public boolean checkDownloadedMapsAreLatest(){  try {    final Calendar calendar=Calendar.getInstance();    final int year=calendar.get(Calendar.YEAR);    final int month=calendar.get(Calendar.MONTH);    final String lastCheckTime=SystemPreferences.get(SystemPreferenceKey.TRIPLEA_LAST_CHECK_FOR_MAP_UPDATES,"");    if (lastCheckTime != null && lastCheckTime.trim().length() > 0) {      final String[] yearMonth=lastCheckTime.split(":");      if (Integer.parseInt(yearMonth[0]) >= year && Integer.parseInt(yearMonth[1]) >= month) {        return false;      }    }    SystemPreferences.put(SystemPreferenceKey.TRIPLEA_LAST_CHECK_FOR_MAP_UPDATES,year + ":" + month);    final List<DownloadFileDescription> downloads=new DownloadRunnable(mapDownloadProperties.getMapListDownloadSite()).getDownloads();    final Collection<String> outOfDateMaps=populateOutOfDateMapsListing(downloads);    if (!outOfDateMaps.isEmpty()) {      final StringBuilder text=new StringBuilder("<html>Some of the maps you have are out of date, and newer versions of those maps exist." + "<br>Would you like to update (re-download) the following maps now?:<br><ul>");      for (      final String map : outOfDateMaps) {        text.append("<li> ").append(map).append("</li>");      }      text.append("</ul></html>");      SwingComponents.promptUser("Update Your Maps?",text.toString(),null);      return true;    }  } catch (  final Exception e) {    ClientLogger.logError("Error while checking for map updates",e);  }  return false;}  }
class C{  public void accumulateBug(BugInstance bug,SourceLineAnnotation sourceLine){  if (sourceLine == null) {    throw new NullPointerException("Missing source line");  }  int priority=bug.getPriority();  if (!performAccumulation) {    bug.addSourceLine(sourceLine);  } else {    bug.setPriority(Priorities.NORMAL_PRIORITY);  }  lastBug=bug;  lastSourceLine=sourceLine;  Data d=map.get(bug);  if (d == null) {    String hash=bug.getInstanceHash();    BugInstance conflictingBug=hashes.get(hash);    if (conflictingBug != null) {      if (conflictingBug.getPriority() <= priority) {        return;      }      map.remove(conflictingBug);    }    d=new Data(priority,sourceLine);    map.put(bug,d);    hashes.put(hash,bug);  } else   if (d.priority > priority) {    if (d.priority >= Priorities.LOW_PRIORITY) {      reportBug(bug,d);      d.allSource.clear();    }    d.priority=priority;    d.primarySource=sourceLine;  } else   if (priority >= Priorities.LOW_PRIORITY && priority > d.priority) {    bug.setPriority(priority);    reporter.reportBug(bug);    return;  }  d.allSource.add(sourceLine);}  }
class C{  public static Value readValue(SessionInterface session,ResultSet rs,int columnIndex,int type){  try {    Value v;switch (type) {case Value.NULL:{        return ValueNull.INSTANCE;      }case Value.BYTES:{      byte[] buff=rs.getBytes(columnIndex);      v=buff == null ? (Value)ValueNull.INSTANCE : ValueBytes.getNoCopy(buff);      break;    }case Value.UUID:{    byte[] buff=rs.getBytes(columnIndex);    v=buff == null ? (Value)ValueNull.INSTANCE : ValueUuid.get(buff);    break;  }case Value.BOOLEAN:{  boolean value=rs.getBoolean(columnIndex);  v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueBoolean.get(value);  break;}case Value.BYTE:{byte value=rs.getByte(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueByte.get(value);break;}case Value.DATE:{Date value=rs.getDate(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDate.get(value);break;}case Value.TIME:{Time value=rs.getTime(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTime.get(value);break;}case Value.TIMESTAMP:{Timestamp value=rs.getTimestamp(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(value);break;}case Value.TIMESTAMP_TZ:{TimestampWithTimeZone value=(TimestampWithTimeZone)rs.getObject(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueTimestampTimeZone.get(value);break;}case Value.DECIMAL:{BigDecimal value=rs.getBigDecimal(columnIndex);v=value == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(value);break;}case Value.DOUBLE:{double value=rs.getDouble(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueDouble.get(value);break;}case Value.FLOAT:{float value=rs.getFloat(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueFloat.get(value);break;}case Value.INT:{int value=rs.getInt(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueInt.get(value);break;}case Value.LONG:{long value=rs.getLong(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueLong.get(value);break;}case Value.SHORT:{short value=rs.getShort(columnIndex);v=rs.wasNull() ? (Value)ValueNull.INSTANCE : ValueShort.get(value);break;}case Value.STRING_IGNORECASE:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringIgnoreCase.get(s);break;}case Value.STRING_FIXED:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueStringFixed.get(s);break;}case Value.STRING:{String s=rs.getString(columnIndex);v=(s == null) ? (Value)ValueNull.INSTANCE : ValueString.get(s);break;}case Value.CLOB:{if (session == null) {String s=rs.getString(columnIndex);v=s == null ? ValueNull.INSTANCE : ValueLobDb.createSmallLob(Value.CLOB,s.getBytes(Constants.UTF8));} else {Reader in=rs.getCharacterStream(columnIndex);if (in == null) {v=ValueNull.INSTANCE;} else {v=session.getDataHandler().getLobStorage().createClob(new BufferedReader(in),-1);}}if (session != null) {session.addTemporaryLob(v);}break;}case Value.BLOB:{if (session == null) {byte[] buff=rs.getBytes(columnIndex);return buff == null ? ValueNull.INSTANCE : ValueLobDb.createSmallLob(Value.BLOB,buff);}InputStream in=rs.getBinaryStream(columnIndex);v=(in == null) ? (Value)ValueNull.INSTANCE : session.getDataHandler().getLobStorage().createBlob(in,-1);if (session != null) {session.addTemporaryLob(v);}break;}case Value.JAVA_OBJECT:{if (SysProperties.serializeJavaObject) {byte[] buff=rs.getBytes(columnIndex);v=buff == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(null,buff,session.getDataHandler());} else {Object o=rs.getObject(columnIndex);v=o == null ? ValueNull.INSTANCE : ValueJavaObject.getNoCopy(o,null,session.getDataHandler());}break;}case Value.ARRAY:{Array array=rs.getArray(columnIndex);if (array == null) {return ValueNull.INSTANCE;}Object[] list=(Object[])array.getArray();if (list == null) {return ValueNull.INSTANCE;}int len=list.length;Value[] values=new Value[len];for (int i=0; i < len; i++) {values[i]=DataType.convertToValue(session,list[i],Value.NULL);}v=ValueArray.get(values);break;}case Value.RESULT_SET:{ResultSet x=(ResultSet)rs.getObject(columnIndex);if (x == null) {return ValueNull.INSTANCE;}return ValueResultSet.get(x);}case Value.GEOMETRY:{Object x=rs.getObject(columnIndex);if (x == null) {return ValueNull.INSTANCE;}return ValueGeometry.getFromGeometry(x);}default :throw DbException.throwInternalError("type=" + type);}return v;} catch (SQLException e) {throw DbException.convert(e);}}  }
class C{  public void appendOpenBlockQuoteTag(String style){  StringBuilder sb=new StringBuilder("<blockquote");  if (style != null) {    sb.append(" style=\"");    sb.append(style);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  final public boolean isEnabled(){  return enabled;}  }
class C{  public String handlePortBusy(gnu.io.PortInUseException p,String portName,Logger log){  log.error(portName + " port is in use: " + p.getMessage());  ConnectionStatus.instance().setConnectionState(portName,ConnectionStatus.CONNECTION_DOWN);  return portName + " port is in use";}  }
class C{  public static void enableJM(boolean enable){  ServiceDispatcher.enableJM=enable;}  }
class C{  public static int value(String s){  return classes.getValue(s);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.842 -0500",hash_original_method="FFE2EA9F1B0C7B1D0B87CA6D7B155424",hash_generated_method="947D709E89476DA64A342F257AD4FBE2") public static void startMethodTracingDdms(int bufferSize,int flags){  VMDebug.startMethodTracingDdms(bufferSize,flags);}  }
class C{  private void clearItemRating(){  MainApplication.getInstance().API.ClearUserItemRatingAsync(mItem.getId(),MainApplication.getInstance().API.getCurrentUserId(),new UpdateUserDataResponse());}  }
class C{  public void init(InputStream is){  this.is=is;  this.refs=null;}  }
class C{  public MultiSortedDocValues(SortedDocValues values[],int docStarts[],OrdinalMap mapping,long totalCost) throws IOException {  assert docStarts.length == values.length + 1;  this.values=values;  this.docStarts=docStarts;  this.mapping=mapping;  this.totalCost=totalCost;}  }
class C{  @Override public boolean itemExists(final String name) throws JMSException {  if (ActiveMQRAMapMessage.trace) {    ActiveMQRALogger.LOGGER.trace("itemExists(" + name + ")");  }  return ((MapMessage)message).itemExists(name);}  }
class C{  public PacketACTION(String actionmessage){  super(PT_ACTION);  byte actiontype=ACTION_EXECBUILTIN;  appendPayload(actionmessage,actiontype);}  }
class C{  public boolean isValidBSTB(TreeNode root){  return isValidBSTB(root,Integer.MIN_VALUE,Integer.MAX_VALUE);}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  if (getComponent() == null) {    component=createComponent(owner);  }  Component c=getComponent();  if (c instanceof JWindow) {    JWindow component=(JWindow)getComponent();    component.setLocation(ownerX,ownerY);    component.getContentPane().add(contents,BorderLayout.CENTER);    component.invalidate();    component.validate();    if (component.isVisible()) {      pack();    }  }}  }
class C{  @Override protected void initListeners(){  startBT.setOnClickListener(this);}  }
class C{  @Override protected void finalize() throws Throwable {  try {    this.recycle();  } catch (  Throwable e) {  }  super.finalize();}  }
class C{  private boolean isNewModel(T source){  return source instanceof Element;}  }
class C{  public HttpBinaryPostRequest(final SerializableEntity entity){  this.entityBytes=BinarySerializer.serializeToBytes(entity);}  }
class C{  public void clear(){  this.parameters=null;}  }
class C{  public boolean containsPoint2D(double[] v){  assert (v.length == 2);  final double testx=v[0];  final double testy=v[1];  boolean c=false;  Iterator<double[]> it=points.iterator();  double[] pre=points.get(points.size() - 1);  while (it.hasNext()) {    final double[] cur=it.next();    final double curx=cur[0], cury=cur[1];    final double prex=pre[0], prey=pre[1];    if (((cury > testy) != (prey > testy))) {      if ((testx < (prex - curx) * (testy - cury) / (prey - cury) + curx)) {        c=!c;      }    }    pre=cur;  }  return c;}  }
class C{  protected ScrCa executeCriteriaReturnScrCa(Locale locale,StringBuffer query) throws HibernateException {  ScrCa result=null;  List listado=null;  listado=executeCriteriaReturnScrCaList(locale,query,null);  Object scrCa=DataAccessUtils.uniqueResult(listado);  if (scrCa != null) {    result=new ScrCa();    BeanUtils.copyProperties(scrCa,result);  }  return result;}  }
class C{  public static AbstractMessage receiveRegistrationRespProto(){  AbstractMessage serverMsg=receiveMsgProto();  AbstractMessage regResp=null;  if (serverMsg != null && serverMsg instanceof ServerResp) {    regResp=(ServerResp)serverMsg;  } else   if (serverMsg != null && serverMsg instanceof RegistrationResp) {    regResp=(RegistrationResp)serverMsg;  }  return regResp;}  }
class C{  private void newline(){  print(System.lineSeparator());}  }
class C{  public CachePerfStats(StatisticsFactory factory,String name){  stats=factory.createAtomicStatistics(type,"RegionStats-" + name);}  }
class C{  @Override protected void optimize(){  int i;  int j;  qp.b[0]=0;  for (i=0; i < working_set_size; i++) {    qp.b[0]+=alphas[working_set[i]];  }  ;  double[] my_primal=primal;  double new_target=0;  double old_target=0;  double target_tmp;  for (i=0; i < working_set_size; i++) {    target_tmp=my_primal[i] * qp.H[i * working_set_size + i] / 2;    for (j=0; j < i; j++) {      target_tmp+=my_primal[j] * qp.H[j * working_set_size + i];    }    ;    target_tmp+=qp.c[i];    old_target+=target_tmp * my_primal[i];  }  ;  double new_constraint_sum=0;  double my_is_zero=is_zero;  int sv_count=working_set_size;  boolean KKTerror=true;  boolean convError=false;  qp.max_allowed_error=convergence_epsilon;  qp.x=my_primal;  qp.lambda_eq=lambda_eq;  qp.solve();  my_primal=qp.x;  lambda_WS=qp.lambda_eq;  while (KKTerror) {    sv_count=working_set_size;    new_constraint_sum=qp.b[0];    for (i=0; i < working_set_size; i++) {      if (my_primal[i] <= my_is_zero) {        my_primal[i]=qp.l[i];        sv_count--;      } else       if (qp.u[i] - my_primal[i] <= my_is_zero) {        my_primal[i]=qp.u[i];        sv_count--;      }      ;      new_constraint_sum-=qp.A[i] * my_primal[i];    }    ;    if (sv_count > 0) {      new_constraint_sum/=sv_count;      logln(5,"adjusting " + sv_count + " alphas by "+ new_constraint_sum);      for (i=0; i < working_set_size; i++) {        if ((my_primal[i] > qp.l[i]) && (my_primal[i] < qp.u[i])) {          my_primal[i]+=qp.A[i] * new_constraint_sum;        }        ;      }      ;    } else     if (Math.abs(new_constraint_sum) > working_set_size * is_zero) {      logln(5,"WARNING: No SVs, constraint_sum = " + new_constraint_sum);      old_target=-Double.MIN_VALUE;      convError=true;    }    ;    new_target=0;    for (i=0; i < working_set_size; i++) {      target_tmp=my_primal[i] * qp.H[i * working_set_size + i] / 2.0;      for (j=0; j < i; j++) {        target_tmp+=my_primal[j] * qp.H[j * working_set_size + i];      }      ;      target_tmp+=qp.c[i];      new_target+=target_tmp * my_primal[i];    }    ;    if (new_target < old_target) {      KKTerror=false;      if (descend < old_target - new_target) {        target_count=0;      } else {        convError=true;      }      ;      logln(5,"descend = " + (old_target - new_target));    } else     if (sv_count > 0) {      my_is_zero=Double.MAX_VALUE;      for (i=0; i < working_set_size; i++) {        if ((my_primal[i] > qp.l[i]) && (my_primal[i] < qp.u[i])) {          if (my_primal[i] - qp.l[i] < my_is_zero) {            my_is_zero=my_primal[i] - qp.l[i];          }          ;          if (qp.u[i] - my_primal[i] < my_is_zero) {            my_is_zero=qp.u[i] - my_primal[i];          }          ;        }        ;      }      ;      if (target_count == 0) {        my_is_zero*=2;      }      ;      logln(5,"WARNING: no descend (" + (old_target - new_target) + " <= "+ descend+ "), adjusting is_zero to "+ my_is_zero);      logln(5,"new_target = " + new_target);    } else {      logln(5,"WARNING: no descend (" + (old_target - new_target) + " <= "+ descend+ "), stopping.");      KKTerror=false;      convError=true;    }    ;  }  ;  if (convError) {    target_count++;    if (old_target < new_target) {      for (i=0; i < working_set_size; i++) {        my_primal[i]=qp.A[i] * alphas[working_set[i]];      }      ;      logln(5,"WARNING: Convergence error, restoring old primals");    }    ;  }  ;  if (target_count > 50) {    convergence_epsilon*=2;    feasible_epsilon=convergence_epsilon;    logln(1,"WARNING: reducing KKT precision to " + convergence_epsilon);    target_count=0;  }  ;}  }
class C{  @Transactional public List<InstrumentVoucher> updateInstrumentVoucherReference(final List<Map<String,Object>> paramList){  final List<InstrumentVoucher> iVouherList=new ArrayList<InstrumentVoucher>();  for (  final Map<String,Object> iVoucherMap : paramList) {    final InstrumentVoucher iVoucher=new InstrumentVoucher();    if (iVoucherMap.get(INSTRUMENT_HEADER) == null)     throw new ApplicationRuntimeException(INSTRUMENT_HEADER + IS_NULL); else     iVoucher.setInstrumentHeaderId((InstrumentHeader)iVoucherMap.get(INSTRUMENT_HEADER));    if (iVoucherMap.get(VOUCHER_HEADER) == null)     throw new ApplicationRuntimeException(VOUCHER_HEADER + IS_NULL); else     iVoucher.setVoucherHeaderId((CVoucherHeader)iVoucherMap.get(VOUCHER_HEADER));    instrumentVoucherService.persist(iVoucher);    if (LOGGER.isDebugEnabled())     LOGGER.debug("Saved cheque and voucher Link" + iVoucher);    if (iVoucher.getInstrumentHeaderId().getIsPayCheque().equals(FinancialConstants.IS_PAYCHECK_ONE) || iVoucher.getInstrumentHeaderId().getIsPayCheque().equals(FinancialConstants.IS_PAYCHECK_ZERO) && iVoucher.getInstrumentHeaderId().getInstrumentType().getType().equals(FinancialConstants.INSTRUMENT_TYPE_BANK)) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("Adding to Bank Reconcialation");      addToBankReconcilation(iVoucher.getVoucherHeaderId(),iVoucher.getInstrumentHeaderId());    }    iVouherList.add(iVoucher);  }  return iVouherList;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Locator_ID"))     p_M_Locator_ID=para[i].getParameterAsInt(); else     if (name.equals("LocatorValue"))     p_LocatorValue=(String)para[i].getParameter(); else     if (name.equals("ProductValue"))     p_ProductValue=(String)para[i].getParameter(); else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=para[i].getParameterAsInt(); else     if (name.equals("QtyRange"))     p_QtyRange=(String)para[i].getParameter(); else     if (name.equals("InventoryCountSet"))     p_InventoryCountSetZero="Z".equals(para[i].getParameter()); else     if (name.equals("DeleteOld"))     p_DeleteOld="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_M_Inventory_ID=getRecord_ID();}  }
class C{  private static COperandTreeNode convert(final INaviModule module,final OperandExpression operandExpression,final COperandTreeNode parent){  final COperandTreeNode convertedNode=module.createOperandExpression(operandExpression.getNative().getValue(),operandExpression.getType().getNative());  if (parent != null) {    COperandTreeNode.link(parent,convertedNode);  }  for (  final OperandExpression child : operandExpression.getChildren()) {    convert(module,child,convertedNode);  }  return convertedNode;}  }
class C{  public static DataFlavor decodeDataFlavor(String nat) throws ClassNotFoundException {  String retval_str=SystemFlavorMap.decodeJavaMIMEType(nat);  return (retval_str != null) ? new DataFlavor(retval_str) : null;}  }
class C{  public static Set<String> assertValidProtocols(Set<String> expected,String[] protocols){  assertNotNull(protocols);  assertTrue(protocols.length != 0);  Set remainingProtocols=new HashSet<String>(expected);  Set unknownProtocols=new HashSet<String>();  for (  String protocol : protocols) {    if (!remainingProtocols.remove(protocol)) {      unknownProtocols.add(protocol);    }  }  assertEquals("Unknown protocols",Collections.EMPTY_SET,unknownProtocols);  return remainingProtocols;}  }
class C{  public AccessDeniedException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public void split(IndexReader originalIndex,Directory trainingIndex,Directory testIndex,Directory crossValidationIndex,Analyzer analyzer,boolean termVectors,String classFieldName,String... fieldNames) throws IOException {  IndexWriter testWriter=new IndexWriter(testIndex,new IndexWriterConfig(analyzer));  IndexWriter cvWriter=new IndexWriter(crossValidationIndex,new IndexWriterConfig(analyzer));  IndexWriter trainingWriter=new IndexWriter(trainingIndex,new IndexWriterConfig(analyzer));  int noOfClasses=0;  for (  LeafReaderContext leave : originalIndex.leaves()) {    long valueCount=0;    SortedDocValues classValues=leave.reader().getSortedDocValues(classFieldName);    if (classValues != null) {      valueCount=classValues.getValueCount();    } else {      SortedSetDocValues sortedSetDocValues=leave.reader().getSortedSetDocValues(classFieldName);      if (sortedSetDocValues != null) {        valueCount=sortedSetDocValues.getValueCount();      }    }    if (classValues == null) {      throw new IllegalStateException("field \"" + classFieldName + "\" must have sorted (set) doc values");    }    noOfClasses+=valueCount;  }  try {    IndexSearcher indexSearcher=new IndexSearcher(originalIndex);    GroupingSearch gs=new GroupingSearch(classFieldName);    gs.setGroupSort(Sort.INDEXORDER);    gs.setSortWithinGroup(Sort.INDEXORDER);    gs.setAllGroups(true);    gs.setGroupDocsLimit(originalIndex.maxDoc());    TopGroups<Object> topGroups=gs.search(indexSearcher,new MatchAllDocsQuery(),0,noOfClasses);    FieldType ft=new FieldType(TextField.TYPE_STORED);    if (termVectors) {      ft.setStoreTermVectors(true);      ft.setStoreTermVectorOffsets(true);      ft.setStoreTermVectorPositions(true);    }    int b=0;    for (    GroupDocs group : topGroups.groups) {      int totalHits=group.totalHits;      double testSize=totalHits * testRatio;      int tc=0;      double cvSize=totalHits * crossValidationRatio;      int cvc=0;      for (      ScoreDoc scoreDoc : group.scoreDocs) {        Document doc=createNewDoc(originalIndex,ft,scoreDoc,fieldNames);        if (b % 2 == 0 && tc < testSize) {          testWriter.addDocument(doc);          tc++;        } else         if (cvc < cvSize) {          cvWriter.addDocument(doc);          cvc++;        } else {          trainingWriter.addDocument(doc);        }        b++;      }    }    testWriter.commit();    cvWriter.commit();    trainingWriter.commit();    testWriter.forceMerge(3);    cvWriter.forceMerge(3);    trainingWriter.forceMerge(3);  } catch (  Exception e) {    throw new IOException(e);  } finally {    testWriter.close();    cvWriter.close();    trainingWriter.close();    originalIndex.close();  }}  }
class C{  public void test_something(){  log.error("implement test");}  }
class C{  public static void main(String[] args){  Header.printHeader(AddGautengIntraAttribute.class.toString(),args);  String populationFile=args[0];  String attributesFile=args[1];  String shapefile=args[2];  String newAttributesFile=args[3];  run(populationFile,attributesFile,shapefile,newAttributesFile);  Header.printFooter();}  }
class C{  public void awake(){}  }
class C{  public void executeQuery(IMiniTable issue){  final String sql="SELECT " + "obl.PP_Order_BOMLine_ID," + "obl.IsCritical,"+ "p.Value,"+ "obl.M_Product_ID,p.Name,"+ "p.C_UOM_ID,u.Name,"+ "obl.QtyRequired,"+ "obl.QtyReserved,"+ "bomQtyAvailable(obl.M_Product_ID,obl.M_Warehouse_ID,0 ) AS QtyAvailable,"+ "bomQtyOnHand(obl.M_Product_ID,obl.M_Warehouse_ID,0) AS QtyOnHand,"+ "p.M_Locator_ID,"+ "obl.M_Warehouse_ID,w.Name,"+ "obl.QtyBom,"+ "obl.isQtyPercentage,"+ "obl.QtyBatch,"+ "obl.ComponentType,"+ "obl.QtyRequired - QtyDelivered AS QtyOpen,"+ "obl.QtyDelivered"+ " FROM PP_Order_BOMLine obl"+ " INNER JOIN M_Product p ON (obl.M_Product_ID = p.M_Product_ID) "+ " INNER JOIN C_UOM u ON (p.C_UOM_ID = u.C_UOM_ID) "+ " INNER JOIN M_Warehouse w ON (w.M_Warehouse_ID = obl.M_Warehouse_ID) "+ " WHERE obl.PP_Order_ID = ?"+ " ORDER BY obl."+ MPPOrderBOMLine.COLUMNNAME_Line;  int row=0;  issue.setRowCount(row);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,getPP_Order_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      issue.setRowCount(row + 1);      IDColumn id=new IDColumn(rs.getInt(1));      BigDecimal qtyBom=rs.getBigDecimal(15);      Boolean isQtyPercentage=rs.getString(16).equals("Y");      Boolean isCritical=rs.getString(2).equals("Y");      BigDecimal qtyBatch=rs.getBigDecimal(17);      BigDecimal qtyRequired=rs.getBigDecimal(8);      BigDecimal qtyOnHand=rs.getBigDecimal(11);      BigDecimal qtyOpen=rs.getBigDecimal(19);      BigDecimal qtyDelivered=rs.getBigDecimal(20);      String componentType=rs.getString(18);      BigDecimal toDeliverQty=getToDeliverQty();      BigDecimal openQty=getOpenQty();      BigDecimal scrapQty=getScrapQty();      BigDecimal componentToDeliverQty=Env.ZERO;      BigDecimal componentScrapQty=Env.ZERO;      BigDecimal componentQtyReq=Env.ZERO;      BigDecimal componentQtyToDel=Env.ZERO;      id.setSelected(isOnlyReceipt());      issue.setValueAt(id,row,0);      issue.setValueAt(isCritical,row,1);      issue.setValueAt(rs.getString(3),row,2);      issue.setValueAt(new KeyNamePair(rs.getInt(4),rs.getString(5)),row,3);      issue.setValueAt(new KeyNamePair(rs.getInt(6),rs.getString(7)),row,4);      issue.setValueAt(qtyRequired,row,6);      issue.setValueAt(qtyDelivered,row,7);      issue.setValueAt(qtyOnHand,row,10);      issue.setValueAt(rs.getBigDecimal(9),row,11);      issue.setValueAt(rs.getBigDecimal(10),row,12);      issue.setValueAt(new KeyNamePair(rs.getInt(13),rs.getString(14)),row,14);      issue.setValueAt(qtyBom,row,15);      issue.setValueAt(isQtyPercentage,row,16);      issue.setValueAt(qtyBatch,row,17);      if (componentType.equals(MPPProductBOMLine.COMPONENTTYPE_Component) || componentType.equals(MPPProductBOMLine.COMPONENTTYPE_Packing)) {        id.setSelected(qtyOnHand.signum() > 0 && qtyRequired.signum() > 0);        issue.setValueAt(id,row,0);        if (isQtyPercentage) {          BigDecimal qtyBatchPerc=qtyBatch.divide(Env.ONEHUNDRED,8,RoundingMode.HALF_UP);          if (isBackflush()) {            if (qtyRequired.signum() == 0 || qtyOpen.signum() == 0) {              componentToDeliverQty=Env.ZERO;            } else {              componentToDeliverQty=toDeliverQty.multiply(qtyBatchPerc);              if (qtyRequired.subtract(qtyDelivered).signum() < 0 | componentToDeliverQty.signum() == 0)               componentToDeliverQty=qtyRequired.subtract(qtyDelivered);            }            if (componentToDeliverQty.signum() != 0) {              componentQtyToDel=componentToDeliverQty.setScale(4,BigDecimal.ROUND_HALF_UP);              issue.setValueAt(componentToDeliverQty,row,8);            }          } else {            componentToDeliverQty=qtyOpen;            if (componentToDeliverQty.signum() != 0) {              componentQtyReq=openQty.multiply(qtyBatchPerc);              componentQtyToDel=componentToDeliverQty.setScale(4,BigDecimal.ROUND_HALF_UP);              issue.setValueAt(componentToDeliverQty.setScale(8,BigDecimal.ROUND_HALF_UP),row,8);              issue.setValueAt(openQty.multiply(qtyBatchPerc),row,6);            }          }          if (scrapQty.signum() != 0) {            componentScrapQty=scrapQty.multiply(qtyBatchPerc);            if (componentScrapQty.signum() != 0) {              issue.setValueAt(componentScrapQty,row,9);            }          } else           issue.setValueAt(componentScrapQty,row,9);        } else {          if (isBackflush()) {            componentToDeliverQty=toDeliverQty.multiply(qtyBom);            if (componentToDeliverQty.signum() != 0) {              componentQtyReq=toDeliverQty.multiply(qtyBom);              componentQtyToDel=componentToDeliverQty;              issue.setValueAt(componentQtyReq,row,6);              issue.setValueAt(componentToDeliverQty,row,8);            }          } else {            componentToDeliverQty=qtyOpen;            if (componentToDeliverQty.signum() != 0) {              componentQtyReq=openQty.multiply(qtyBom);              componentQtyToDel=componentToDeliverQty;              issue.setValueAt(componentQtyReq,row,6);              issue.setValueAt(componentToDeliverQty,row,8);            }          }          if (scrapQty.signum() != 0) {            componentScrapQty=scrapQty.multiply(qtyBom);            if (componentScrapQty.signum() != 0) {              issue.setValueAt(componentScrapQty,row,9);            }          } else           issue.setValueAt(componentScrapQty,row,9);        }      } else       if (componentType.equals(MPPProductBOMLine.COMPONENTTYPE_Tools)) {        componentToDeliverQty=qtyBom;        if (componentToDeliverQty.signum() != 0) {          componentQtyReq=qtyBom;          componentQtyToDel=componentToDeliverQty;          issue.setValueAt(qtyBom,row,6);          issue.setValueAt(componentToDeliverQty,row,8);        }      } else {        issue.setValueAt(Env.ZERO,row,6);      }      row++;      if (isOnlyIssue() || isBackflush()) {        int warehouse_id=rs.getInt(13);        int product_id=rs.getInt(4);        row+=lotes(row,id,warehouse_id,product_id,componentQtyReq,componentQtyToDel,issue);      }    }  } catch (  SQLException e) {    throw new DBException(e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  issue.autoSize();}  }
class C{  private T valueAtIndex(final long index){  return (T)valueAt(index,getLookupTuple()).getObject();}  }
class C{  public static String[] toStringArray(Object value){  if (value == null) {    return new String[0];  }  Class<?> type=value.getClass();  if (type.isArray() == false) {    return new String[]{value.toString()};  }  Class componentType=type.getComponentType();  if (componentType.isPrimitive()) {    if (componentType == int.class) {      return ArraysUtil.toStringArray((int[])value);    } else     if (componentType == long.class) {      return ArraysUtil.toStringArray((long[])value);    } else     if (componentType == double.class) {      return ArraysUtil.toStringArray((double[])value);    } else     if (componentType == float.class) {      return ArraysUtil.toStringArray((float[])value);    } else     if (componentType == boolean.class) {      return ArraysUtil.toStringArray((boolean[])value);    } else     if (componentType == short.class) {      return ArraysUtil.toStringArray((short[])value);    } else     if (componentType == byte.class) {      return ArraysUtil.toStringArray((byte[])value);    } else {      throw new IllegalArgumentException();    }  } else {    return ArraysUtil.toStringArray((Object[])value);  }}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public Lambda(Node node){  this(node,new String[0],new Class<?>[0]);}  }
class C{  public static long parseHexLong(String x){  try {    if (x.length() == 16) {      return (Long.parseLong(x.substring(0,8),16) << 32) | Long.parseLong(x.substring(8,16),16);    }    return Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  public static String leftPad(String s,int length){  StringBuffer sb=new StringBuffer();  for (int i=length - s.length(); i > 0; i--)   sb.append(" ");  sb.append(s);  return sb.toString();}  }
class C{  public FastStringWriter(){  builder=new StringBuilder();}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the class name" + " of a classifier");    }    String classifier=args[0];    args[0]="";    System.out.println(evaluateModel(classifier,args));  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public Boolean isValidFlashAddress(int addr){switch (sprogType) {case SPROGV4:case SPROGIIUSB:case SPROGII:    if (addr >= 0x200) {      return true;    }  break;case SPROGIIv3:case SPROG3:case SPROGIV:case SPROG5:case NANO:case SNIFFER:if ((addr >= 0x2200) && (addr < 0x3F00)) {  return true;}break;case PISPROGNANO:if ((addr >= 0x0C00) && (addr < 0x1FF0)) {return true;}break;case PISPROGONE:if ((addr >= 0x1000) && (addr < 0x3F00)) {return true;}break;default :return false;}return false;}  }
class C{  public void testSplittingAndJoining(){  String[] options;  String[] newOptions;  String joined;  int i;  try {    options=new StringToWordVector().getOptions();    joined=Utils.joinOptions(options);    newOptions=Utils.splitOptions(joined);    assertEquals("Same number of options",options.length,newOptions.length);    for (i=0; i < options.length; i++) {      if (!options[i].equals(newOptions[i]))       fail("Option " + (i + 1) + " differs");    }  } catch (  Exception e) {    fail("Exception: " + e);  }}  }
class C{  private void errorsToJson(Errors errors,PrintWriter writer){  final StringBuilder result=new StringBuilder();  errorsToJson(errors,result);  writer.print(result.toString());}  }
class C{  public boolean isEmpty(){  return getRowCount() == 0;}  }
class C{  public static boolean hasField(Class<?> type,String fieldName){  try {    type.getField(fieldName);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  @SuppressWarnings("deprecation") public static byte[] stringToBytesNullTerminated(String fileName){  byte[] asciiName=new byte[fileName.length() + 1];  fileName.getBytes(0,fileName.length(),asciiName,0);  return asciiName;}  }
class C{  public static void merge(final Network baseNetwork,final String addPrefix,final Network addNetwork){  double capacityFactor=baseNetwork.getCapacityPeriod() / addNetwork.getCapacityPeriod();  NetworkFactory factory=baseNetwork.getFactory();  for (  Node node : addNetwork.getNodes().values()) {    Node node2=factory.createNode(Id.create(addPrefix + node.getId().toString(),Node.class),node.getCoord());    baseNetwork.addNode(node2);  }  for (  Link link : addNetwork.getLinks().values()) {    Id<Node> fromNodeId=Id.create(addPrefix + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(addPrefix + link.getToNode().getId().toString(),Node.class);    Node fromNode=baseNetwork.getNodes().get(fromNodeId);    Node toNode=baseNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(addPrefix + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    baseNetwork.addLink(link2);  }}  }
class C{  public PartialResultException(){  super();}  }
class C{  public float screenY(float x,float y){  return g.screenY(x,y);}  }
class C{  @BeforeClass public static void init() throws Exception {  final SortedMap<ServletHolder,String> extraServlets=new TreeMap<>();  final ServletHolder solrSchemaRestApi=new ServletHolder("SolrSchemaRestApi",ServerServlet.class);  solrSchemaRestApi.setInitParameter("org.restlet.application","org.apache.solr.rest.SolrSchemaRestApi");  extraServlets.put(solrSchemaRestApi,"/schema/*");  final ServletHolder solrConfigRestApi=new ServletHolder("SolrConfigRestApi",ServerServlet.class);  solrConfigRestApi.setInitParameter("org.restlet.application","org.apache.solr.rest.SolrConfigRestApi");  extraServlets.put(solrConfigRestApi,"/config/*");  createJettyAndHarness(TEST_HOME(),"solrconfig.xml","schema-rest.xml","/solr",true,extraServlets);}  }
class C{  public static String qnameFor(Resource resource){  Graph graph=resource.getModel().getGraph();  if (graph instanceof MultiUnion) {    String uri=resource.getURI();    int split=Util.splitNamespaceXML(uri);    String local=uri.substring(split);    if (local.length() == 0) {      return null;    }    String ns=uri.substring(0,split);    MultiUnion mu=(MultiUnion)graph;    Graph baseGraph=mu.getBaseGraph();    if (baseGraph != null) {      String prefix=baseGraph.getPrefixMapping().getNsURIPrefix(ns);      if (prefix != null) {        return prefix + ":" + local;      }    }    List<Graph> graphs=mu.getSubGraphs();    for (int i=0; i < graphs.size(); i++) {      Graph subGraph=graphs.get(i);      String prefix=subGraph.getPrefixMapping().getNsURIPrefix(ns);      if (prefix != null && prefix.length() > 0) {        return prefix + ":" + local;      }    }    return null;  } else {    return resource.getModel().qnameFor(resource.getURI());  }}  }
class C{  public void printRoutes(){  log.info("Routes for block " + this.getDisplayName());  log.info("Destination, Next Block, Hop Count, Direction, State, Metric");  for (int i=0; i < routes.size(); i++) {    Routes r=routes.get(i);    String nexthop=r.getNextBlock().getDisplayName();    if (r.getNextBlock() == this.getBlock()) {      nexthop="Directly Connected";    }    String activeString="";    if (r.isRouteCurrentlyValid()) {      activeString=", *";    }    log.info((r.getDestBlock()).getDisplayName() + ", " + nexthop+ ", "+ r.getHopCount()+ ", "+ Path.decodeDirection(r.getDirection())+ ", "+ r.getState()+ ", "+ r.getMetric()+ activeString);  }}  }
class C{  public static boolean renameFile(final String fromFilename,final String toFilename){  return renameFile(new File(fromFilename),new File(toFilename));}  }
class C{  public Builder notificationActivity(Class<? extends Activity> activity){  notificationConfig.setNotificationActivity(activity);  return this;}  }
class C{  private float phraseFreq() throws IOException {  if (!initPhrasePositions()) {    return 0.0f;  }  float freq=0.0f;  numMatches=0;  PhrasePositions pp=pq.pop();  int matchLength=end - pp.position;  int next=pq.top().position;  while (advancePP(pp)) {    if (hasRpts && !advanceRpts(pp)) {      break;    }    if (pp.position > next) {      if (matchLength <= slop) {        freq+=docScorer.computeSlopFactor(matchLength);        numMatches++;        if (!needsScores) {          return freq;        }      }      pq.add(pp);      pp=pq.pop();      next=pq.top().position;      matchLength=end - pp.position;    } else {      int matchLength2=end - pp.position;      if (matchLength2 < matchLength) {        matchLength=matchLength2;      }    }  }  if (matchLength <= slop) {    freq+=docScorer.computeSlopFactor(matchLength);    numMatches++;  }  return freq;}  }
class C{  private static boolean doesMarkerStartSegment(int markerSecondByte){  if (markerSecondByte == JfifUtil.MARKER_TEM) {    return false;  }  if (markerSecondByte >= JfifUtil.MARKER_RST0 && markerSecondByte <= JfifUtil.MARKER_RST7) {    return false;  }  return markerSecondByte != JfifUtil.MARKER_EOI && markerSecondByte != JfifUtil.MARKER_SOI;}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public void encode(DerOutputStream out) throws IOException {  if (gni != null) {    gni.encode(out);    return;  } else {    DerOutputStream tmp=new DerOutputStream();    tmp.putOID(oid);    tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_VALUE),nameValue);    out.write(DerValue.tag_Sequence,tmp);  }}  }
class C{  public InvalidJobException(Throwable nested){  super(nested);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setVideoBGColor(getColor(stack));  return null;}  }
class C{  private static final String toXml(Vector2 v,String name){  StringBuilder sb=new StringBuilder();  sb.append("<").append(name).append(" x=\"").append(v.x).append("\" y=\"").append(v.y).append("\" />");  return sb.toString();}  }
class C{  public static boolean isWindowsXp(){  return winXp;}  }
class C{  public static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;switch (len & 15) {case 15:    k2=(key[roundedEnd + 14] & 0xffL) << 48;case 14:  k2|=(key[roundedEnd + 13] & 0xffL) << 40;case 13:k2|=(key[roundedEnd + 12] & 0xffL) << 32;case 12:k2|=(key[roundedEnd + 11] & 0xffL) << 24;case 11:k2|=(key[roundedEnd + 10] & 0xffL) << 16;case 10:k2|=(key[roundedEnd + 9] & 0xffL) << 8;case 9:k2|=(key[roundedEnd + 8] & 0xffL);k2*=c2;k2=Long.rotateLeft(k2,33);k2*=c1;h2^=k2;case 8:k1=((long)key[roundedEnd + 7]) << 56;case 7:k1|=(key[roundedEnd + 6] & 0xffL) << 48;case 6:k1|=(key[roundedEnd + 5] & 0xffL) << 40;case 5:k1|=(key[roundedEnd + 4] & 0xffL) << 32;case 4:k1|=(key[roundedEnd + 3] & 0xffL) << 24;case 3:k1|=(key[roundedEnd + 2] & 0xffL) << 16;case 2:k1|=(key[roundedEnd + 1] & 0xffL) << 8;case 1:k1|=(key[roundedEnd] & 0xffL);k1*=c1;k1=Long.rotateLeft(k1,31);k1*=c2;h1^=k1;}h1^=len;h2^=len;h1+=h2;h2+=h1;h1=fmix64(h1);h2=fmix64(h2);h1+=h2;h2+=h1;out.val1=h1;out.val2=h2;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static boolean onlyIgnoredUnitsOnPath(final Route route,final PlayerID player,final GameData data,final boolean ignoreRouteEnd){  final CompositeMatch<Unit> subOnly=new CompositeMatchOr<>(Matches.UnitIsInfrastructure,Matches.UnitIsSub,Matches.enemyUnit(player,data).invert());  final CompositeMatch<Unit> transportOnly=new CompositeMatchOr<>(Matches.UnitIsInfrastructure,Matches.UnitIsTransportButNotCombatTransport,Matches.UnitIsLand,Matches.enemyUnit(player,data).invert());  final CompositeMatch<Unit> transportOrSubOnly=new CompositeMatchOr<>(Matches.UnitIsInfrastructure,Matches.UnitIsTransportButNotCombatTransport,Matches.UnitIsLand,Matches.UnitIsSub,Matches.enemyUnit(player,data).invert());  final boolean getIgnoreTransportInMovement=isIgnoreTransportInMovement(data);  final boolean getIgnoreSubInMovement=isIgnoreSubInMovement(data);  boolean validMove=false;  List<Territory> steps;  if (ignoreRouteEnd) {    steps=route.getMiddleSteps();  } else {    steps=route.getSteps();  }  if (steps.isEmpty() && route.numberOfStepsIncludingStart() == 1 && !ignoreRouteEnd) {    steps.add(route.getStart());  }  for (  final Territory current : steps) {    if (current.isWater()) {      if (getIgnoreTransportInMovement && getIgnoreSubInMovement && current.getUnits().allMatch(transportOrSubOnly)) {        validMove=true;        continue;      }      if (getIgnoreTransportInMovement && !getIgnoreSubInMovement && current.getUnits().allMatch(transportOnly)) {        validMove=true;        continue;      }      if (!getIgnoreTransportInMovement && getIgnoreSubInMovement && current.getUnits().allMatch(subOnly)) {        validMove=true;        continue;      }      return false;    }  }  return validMove;}  }
class C{  public static UnixTime fromDateString(final String dateString,final TimeInstant defaultValue){  try {    final Date date=createDateFormat().parse(dateString);    return new UnixTime(new TimeInstant(SystemTimeProvider.getTime(date.getTime())));  } catch (  final ParseException e) {    return new UnixTime(defaultValue);  }}  }
class C{  public static DurationConfigFieldBuilder builder(){  return new DurationConfigFieldBuilder();}  }
class C{  public void addRowToEnd(TimeZoneTimeRow tzt){  if (nextRowId == -1)   nextRowId=dbA.getNextRowId();  if (!data.isEmpty() && tzt.getTime() < getLatestRow().getTime())   throw new IllegalStateException("cant add a row before end");  tzt.id=nextRowId++;  data.add(tzt);  dbA.insertRow(tzt);}  }
class C{  public String toString(){  return "Orthographic[" + super.toString();}  }
class C{  public static MagicNotImplementedException EXPECTED(String s){  return new MagicNotImplementedException(s,true);}  }
class C{  @Override public String toString(){  if (this.terms.size() == 0)   return "";  StringBuilder sb=new StringBuilder();  if (this.terms.size() == 1) {    sb.append(terms.iterator().next().toString());  } else {    sb.append('(');    for (    Term term : this.terms) {      if (sb.length() > 1)       sb.append(' ').append(this.operandName).append(' ');      sb.append(term.toString());    }    sb.append(')');  }  return sb.toString();}  }
class C{  @Override public byte[] nextToken(byte[] token) throws IOException {  try {    return context.initSecContext(token,0,token.length);  } catch (  GSSException e) {    if (DEBUG) {      System.out.println("Negotiate support cannot continue. Reason:");      e.printStackTrace();    }    IOException ioe=new IOException("Negotiate support cannot continue");    ioe.initCause(e);    throw ioe;  }}  }
class C{  private ScreenOverlayType createAWTVGraph(){  CountsGraph awtv=new CountsSimReal24Graph(this.countComparisonFilter.getCountsForHour(null),this.iterationNumber,"awtv graph");  awtv.createChart(0);  String filename="awtv.png";  try {    writeChartToKmz(filename,awtv.getChart());    return createOverlayBottomRight("./" + filename,"AWTV");  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  private double sxy(Node _node1,Node _node2){  int i=variablesHash.get(_node1);  int j=variablesHash.get(_node2);  if (cov != null) {    return cov.getValue(i,j);  } else {    double[] arr1=data[i];    double[] arr2=data[j];    return sxy(arr1,arr2,arr1.length);  }}  }
class C{  public ServiceSchemeException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public void parseEndElement(){}  }
class C{  public HashShortId(final long hashShortId){  super(hashShortId,HashShortId.class);}  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("Blowfish key generation does not take any parameters");}  }
class C{  private static boolean isNodeWithConceptNameAndId(Element node){  return node.getName().equalsIgnoreCase(NODE_ATTRIBUTE) && node.getAttributeValue(null,ATTRIBUTE_NAME) != null && node.getAttributeValue(null,ATTRIBUTE_NAME).equalsIgnoreCase(ATTRIBUTE_OPENMRS_CONCEPT);}  }
class C{  public OutputFormatDialog(Frame parent){  super(parent,"Output Format...",ModalityType.DOCUMENT_MODAL);  m_IgnoreChanges=true;  initialize();  initGUI();  m_IgnoreChanges=false;}  }
class C{  public Task<FileSnapshotRestRep> deleteExport(URI id,Boolean allDir,String subDir){  UriBuilder builder=client.uriBuilder(getExportUrl());  if (subDir != null) {    builder.queryParam(SUBDIR_PARAM,subDir);  }  URI targetUri=builder.build(id);  return deleteTaskURI(targetUri);}  }
class C{  @Override public synchronized void addDataSourceListener(DataSourceListener dsl){  m_dataSourceListeners.addElement(dsl);  if (m_format != null) {    DataSetEvent e=new DataSetEvent(this,m_format);    dsl.acceptDataSet(e);  }}  }
class C{  public void testPortNotInUse() throws CoreException {  final MockLaunchConfiguration config=new MockLaunchConfiguration();  for (int i=3000; i < 3500; i++) {    String port=Integer.toString(i);    if (NetworkUtilities.isPortAvailable(port)) {      config.setAttribute(WebAppLaunchAttributes.SERVER_PORT,port);      config.setAttribute(WebAppLaunchAttributes.AUTO_PORT_SELECTION,Boolean.FALSE);      WebAppLaunchDelegate delegate=new WebAppLaunchDelegate();      assertTrue(delegate.promptUserToContinueIfPortNotAvailable(config));      return;    }  }  fail("Test failed because we couldn't find an open port to test with");}  }
class C{  public String[] list() throws IOException {  try {    String[] list=getFile().list();    if (list != null)     return list;  } catch (  AccessControlException e) {    log.finer(e.toString());  }  return new String[0];}  }
class C{  private void dialogChanged(){  IResource container=ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(getContainerName()));  String fileName=getFileName();  if (getContainerName().length() == 0) {    updateStatus("File container must be specified");    return;  }  if (container == null || (container.getType() & (IResource.PROJECT | IResource.FOLDER)) == 0) {    updateStatus("File container must exist");    return;  }  if (!container.isAccessible()) {    updateStatus("Project must be writable");    return;  }  if (fileName.length() == 0) {    updateStatus("File name must be specified");    return;  }  if (fileName.replace('\\','/').indexOf('/',1) > 0) {    updateStatus("File name must be valid");    return;  }  int dotLoc=fileName.lastIndexOf('.');  if (dotLoc != -1) {    String ext=fileName.substring(dotLoc + 1);    if (!ext.equalsIgnoreCase(Program.getInstance().getExtension())) {      updateStatus("File extension must be \"" + Program.getInstance().getExtension() + "\"");      return;    }  }  updateStatus(null);}  }
class C{  public boolean checkModel(int minNumInstances){  int count=0;  for (int i=0; i < m_distribution.numBags(); i++) {    if (m_distribution.perBag(i) >= minNumInstances)     count++;  }  return (count >= 2);}  }
class C{  public String bufferSizeTipText(){  return "The number of rows to process in memory at any one time.";}  }
class C{  public static void writeToFile(File file,String contents) throws IOException {  FileOutputStream fos=new FileOutputStream(file);  fos.write(contents.getBytes());  fos.close();}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  void addComponent(JComponent component){  container.add(component,c);  c.gridy++;}  }
class C{  public Object clone(){  try {    Bar<E> v=(Bar<E>)super.clone();    v.elementData=(E[])new Object[size];    System.arraycopy(elementData,0,v.elementData,0,size);    v.modCount=0;    return v;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)(rFlag ? 1 << 8 : 0);  return binValue;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  type=null;  types=null;}  }
class C{  public int skip(final int nbytes){  if (pos + nbytes < 0)   throw new IllegalArgumentException();  if (pos + nbytes > capacity())   ensureCapacity(pos + nbytes);  pos+=nbytes;  return pos;}  }
class C{  @Reference(authors="Rand, W. M.",title="Objective Criteria for the Evaluation of Clustering Methods",booktitle="Journal of the American Statistical Association, Vol. 66 Issue 336",url="http://www.jstor.org/stable/10.2307/2284239") public double randIndex(){  final double sum=pairconfuse[0] + pairconfuse[1] + pairconfuse[2]+ pairconfuse[3];  return (pairconfuse[0] + pairconfuse[3]) / sum;}  }
class C{  public static void main(String[] args) throws Exception {  QuarantineCommandLineArguments arguments=QuarantineCommandLineArguments.initialize(args);  checkArguments(arguments);  List<Class> classes=TestsFinder.getTestClassesOfPackage(arguments.suites(),arguments.suitesPackage());  System.out.println(String.format("Quarantined tests for suites %s in package %s",arguments.suites(),arguments.suitesPackage()));  classes.stream().forEach(null);}  }
class C{  public static void handleYAMLException(YAMLException exception){  System.err.println("Error parsing .tailor.yml:");  System.err.println(exception.getMessage());  System.exit(ExitCode.failure());}  }
class C{  private void minimizeFG(IntegerPolynomial f,IntegerPolynomial g,IntegerPolynomial F,IntegerPolynomial G,int N){  int E=0;  for (int j=0; j < N; j++) {    E+=2 * N * (f.coeffs[j] * f.coeffs[j] + g.coeffs[j] * g.coeffs[j]);  }  E-=4;  IntegerPolynomial u=(IntegerPolynomial)f.clone();  IntegerPolynomial v=(IntegerPolynomial)g.clone();  int j=0;  int k=0;  int maxAdjustment=N;  while (k < maxAdjustment && j < N) {    int D=0;    int i=0;    while (i < N) {      int D1=F.coeffs[i] * f.coeffs[i];      int D2=G.coeffs[i] * g.coeffs[i];      int D3=4 * N * (D1 + D2);      D+=D3;      i++;    }    int D1=4 * (F.sumCoeffs() + G.sumCoeffs());    D-=D1;    if (D > E) {      F.sub(u);      G.sub(v);      k++;      j=0;    } else     if (D < -E) {      F.add(u);      G.add(v);      k++;      j=0;    }    j++;    u.rotate1();    v.rotate1();  }}  }
class C{  private void trace(){  glUseProgram(photonTraceProgram);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  glBindImageTexture(photonMapsBinding,photonMapTexture,0,true,0,GL_READ_WRITE,GL_RG16F);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,ssbo);  int invocationsPerDimension=photonsPerFrame;  int worksizeX=mathRoundPoT(invocationsPerDimension);  int worksizeY=mathRoundPoT(invocationsPerDimension);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,boxesSsboBinding,0);  glBindImageTexture(photonMapsBinding,0,0,true,0,GL_READ_WRITE,GL_RG16F);  glUseProgram(0);}  }
class C{  @SuppressWarnings("deprecation") public IdentityStub(String name,IdentityScope scope) throws KeyManagementException {  super(name,scope);}  }
class C{  public ThreadCreatedReply(final int packetId,final int errorCode,final long tid,final ThreadState threadState){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(threadState,"IE01075: Thread state argument can not be null");  } else {    if (threadState != null) {      throw new IllegalArgumentException("IE01076: Thread state argument must be null");    }  }  threadId=tid;  this.threadState=threadState;}  }
class C{  private String testDropTarget(TreePath destination,TreePath dropper){  boolean destinationPathIsNull=destination == null;  if (destinationPathIsNull) {    return "Invalid drop location.";  }  DefaultMutableTreeNode node=(DefaultMutableTreeNode)destination.getLastPathComponent();  if (!node.getAllowsChildren()) {    return "This node does not allow children";  }  if (destination.equals(dropper)) {    return "Destination cannot be same as source";  }  if (dropper.isDescendant(destination)) {    return "Destination node cannot be a descendant.";  }  if (dropper.getParentPath().equals(destination)) {    return "Destination node cannot be a parent.";  }  return null;}  }
class C{  private void storeActivityList(){  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.clear();  editor.putInt(PREF_NUM_SAVED_ENTRIES,mActivityList.size());  for (int i=0; i < mActivityList.size(); ++i) {    String currentActivityIndexPref=PREF_ACTIVITY_INDEX + i;    String currentWebappIdPref=PREF_WEBAPP_ID + i;    editor.putInt(currentActivityIndexPref,mActivityList.get(i).mActivityIndex);    editor.putString(currentWebappIdPref,mActivityList.get(i).mWebappId);  }  editor.apply();}  }
class C{  private void handleColorButtonClick(int idx){  listener.onColorButtonClick(idx);}  }
class C{  public void handle(StateContext state,RootCollectionLoadEntityContext ctx){  throw new UnsupportedOperationException(this.getClass().toString());}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("gtone",null));}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D plotArea,RectangleEdge edge){  Range range=getRange();  double axisMin=switchedLog10(range.getLowerBound());  double axisMax=switchedLog10(range.getUpperBound());  double plotMin=0.0;  double plotMax=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    plotMin=plotArea.getX();    plotMax=plotArea.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    plotMin=plotArea.getMaxY();    plotMax=plotArea.getMinY();  }  if (isInverted()) {    return switchedPow10(axisMax - ((java2DValue - plotMin) / (plotMax - plotMin)) * (axisMax - axisMin));  } else {    return switchedPow10(axisMin + ((java2DValue - plotMin) / (plotMax - plotMin)) * (axisMax - axisMin));  }}  }
class C{  @Override public long length() throws SQLException {  return stringData.length();}  }
class C{  public void onChangeClick(View view){  if (mLoadBitmapsTask != null) {    mLoadBitmapsTask.cancel(true);  }  if (mLoadAllBitmapsTask != null) {    mLoadAllBitmapsTask.cancel(true);  }  if (mAnimator != null) {    mAnimator.cancel();  }  FrameAnimationView character=(FrameAnimationView)mPager.findViewWithTag(mPager.getCurrentItem());  character.setImageDrawable(null);  character.setFrames(null,null);  character.invalidate();  Intent intent=new Intent(this,CharacterActivity.class);  startActivityForResult(intent,sCharacterRequestCode);}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return m_str.lastIndexOf(str,fromIndex);}  }
class C{  private static void replaceControlCodes(Matcher m,SpannableStringBuilder ssb,CharacterStyle style){  ArrayList<Integer> toremove=new ArrayList<Integer>();  while (m.find()) {    toremove.add(0,m.start());    if (m.group(2) != null && m.group(2) != m.group(3)) {      toremove.add(0,m.end() - 1);    }    ssb.setSpan(style,m.start(),m.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }  for (  Integer i : toremove) {    ssb.delete(i,i + 1);  }}  }
class C{  public SupportedCountry(String countryCode){  this();  setCountryISOCode(countryCode);}  }
class C{  static void goSuspendPolicy(String target,boolean expectedEvent,String exceptionName,boolean caught,boolean uncaught) throws Exception {  if (globalSuspendPolicy != -1) {    go(target,expectedEvent,exceptionName,caught,uncaught,globalSuspendPolicy);  } else {    go(target,expectedEvent,exceptionName,caught,uncaught,EventRequest.SUSPEND_ALL);    go(target,expectedEvent,exceptionName,caught,uncaught,EventRequest.SUSPEND_EVENT_THREAD);    go(target,expectedEvent,exceptionName,caught,uncaught,EventRequest.SUSPEND_NONE);  }}  }
class C{  public MergePair(S keep,S remove){  this.keep=keep;  this.remove=remove;}  }
class C{  private void loadPaymentRule(){  log.info("");  if (m_C_BankAccount_ID == -1)   return;  fPaymentRule.removeAllItems();  ArrayList<ValueNamePair> data=loadPaymentRule(m_C_PaySelection_ID);  for (  ValueNamePair pp : data)   fPaymentRule.addItem(pp);  if (fPaymentRule.getItemCount() > 0)   fPaymentRule.setSelectedIndex(0);  loadPaymentRuleInfo();}  }
class C{  public BitwiseAndExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private DomainSuffixes(){  String file="domain-suffixes.xml";  InputStream input=this.getClass().getClassLoader().getResourceAsStream(file);  try {    new DomainSuffixesReader().read(this,input);  } catch (  Exception ex) {    LOG.warn(StringUtils.stringifyException(ex));  }}  }
class C{  public Extractor(){}  }
class C{  public static boolean isUsedBuiltin(String str){  return null != usedBuiltinHashTable.get(str);}  }
class C{  public String useNormalizationTipText(){  return "Whether to use normalization.";}  }
class C{  public ScatterChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  size=renderer.getPointSize();}  }
class C{  public CeFanSearchRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  private MarkupContainer createLoginFragment(){  return new Fragment(CONTENT_VIEW,LOGIN_FRAGMENT,this).add(new LoginPanel(PART_LOGIN_VIEW,true)).add(new RegisterPanel(PART_REGISTER_VIEW,true)).add(new GuestPanel(PART_GUEST_VIEW));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WebOrder[");  sb.append(m_order).append("]");  return sb.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EmailIntentBuilder cc(@NonNull String cc){  checkEmail(cc);  this.cc.add(cc);  return this;}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  IOException e) {    if (responseHandler != null) {      responseHandler.sendFailureMessage(0,null,null,e);    } else {      e.printStackTrace();    }  }  return entity;}  }
class C{  private static void printGroup(ContactGroupEntry groupEntry){  System.err.println("Id: " + groupEntry.getId());  System.err.println("Group Name: " + groupEntry.getTitle().getPlainText());  System.err.println("Last Updated: " + groupEntry.getUpdated());  System.err.println("Extended Properties:");  for (  ExtendedProperty property : groupEntry.getExtendedProperties()) {    if (property.getValue() != null) {      System.err.println("  " + property.getName() + "(value) = "+ property.getValue());    } else     if (property.getXmlBlob() != null) {      System.err.println("  " + property.getName() + "(xmlBlob) = "+ property.getXmlBlob().getBlob());    }  }  System.err.print("Which System Group: ");  if (groupEntry.hasSystemGroup()) {    SystemGroup systemGroup=SystemGroup.fromSystemGroupId(groupEntry.getSystemGroup().getId());    System.err.println(systemGroup);  } else {    System.err.println("(Not a system group)");  }  System.err.println("Self Link: " + groupEntry.getSelfLink().getHref());  if (!groupEntry.hasSystemGroup()) {    System.err.println("Edit Link: " + groupEntry.getEditLink().getHref());  }  System.err.println("-------------------------------------------\n");}  }
class C{  private static void addInitiator(Map<String,Initiator> initiatorMap,Map<String,Set<String>> directorToInitiators,Map<String,URI> initiatorIdToNetwork,String director,String wwn,String net){  Initiator initiator=new Initiator();  initiator.setId(URI.create(director + "-" + wwn));  initiator.setLabel(director + "-" + wwn);  initiator.setInitiatorPort(wwn);  initiatorMap.put(initiator.getId().toString(),initiator);  if (directorToInitiators.get(director) == null) {    directorToInitiators.put(director,new HashSet<String>());  }  URI netURI=URI.create(net);  directorToInitiators.get(director).add(initiator.getId().toString());  initiatorIdToNetwork.put(initiator.getId().toString(),netURI);}  }
class C{  static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  void start(){  stop();  for (int i=0; i < dispatchers.length; i++) {    DownloadDispatcher dispatcher=new DownloadDispatcher(downloadQueue,delivery,logger);    dispatchers[i]=dispatcher;    dispatcher.start();  }  logger.log("Thread pool size: " + dispatchers.length);}  }
class C{  public IssueMatcher length(int expectedLength){  return addEqualsMatcher("length",expectedLength,null);}  }
class C{  static <T>IntStream makeInt(AbstractPipeline<?,Integer,?> upstream){  return new OfInt(upstream);}  }
class C{  private void linearAssignToBins(List<Datum> data){  this.bins=new double[metricsDimensions][numBins];  this.minimums=new double[metricsDimensions];  this.maximums=new double[metricsDimensions];  for (int d=0; d < this.metricsDimensions; ++d) {    int size=data.size();    double[] dataIn1D=new double[size];    for (int i=0; i < size; i++) {      dataIn1D[i]=data.get(i).metrics().getEntry(d);    }    Arrays.sort(dataIn1D);    this.minimums[d]=dataIn1D[0];    this.maximums[d]=dataIn1D[size - 1];    this.delta=(this.maximums[d] - this.minimums[d]) / numIntervals;    for (int i=0; i < size; i++) {      double pointValue=data.get(i).metrics().getEntry(d);      double binDouble=(pointValue - this.minimums[d]) / delta;      int lowerBin=(int)binDouble;      this.bins[d][lowerBin]+=binDouble - lowerBin;      this.bins[d][Math.min(lowerBin + 1,numBins - 1)]+=1 - (binDouble - lowerBin);    }  }}  }
class C{  public Read<K,V> updateConsumerProperties(Map<String,Object> configUpdates){  Map<String,Object> config=updateKafkaProperties(consumerConfig,IGNORED_CONSUMER_PROPERTIES,configUpdates);  return new Read<K,V>(topics,topicPartitions,keyCoder,valueCoder,consumerFactoryFn,config,maxNumRecords,maxReadTime);}  }
class C{  public void removeIndexKeyspace(final String index) throws IOException {  try {    QueryProcessor.process(String.format("DROP KEYSPACE \"%s\";",index),ConsistencyLevel.LOCAL_ONE);  } catch (  Throwable e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  protected DenseFloatMatrix1D generate2GramVector(String[] docterms,short[] positions,DenseFloatMatrix1D[] localindexvectors,int start){  int termId1, termId2;  DenseFloatMatrix1D vec1, vec2;  termId1=positions[start];  vec1=localindexvectors[termId1];  termId2=positions[start + 1];  vec2=utils.rotateVector(localindexvectors[termId2],1);  vec2=utils.doConvolveFFT(vec1,vec2,docterms[termId1],null);  return vec2;}  }
class C{  private String doPrefix(String uri,String qName,boolean isElement){  String defaultNS=nsSupport.getURI("");  if ("".equals(uri)) {    if (isElement && defaultNS != null)     nsSupport.declarePrefix("","");    return null;  }  String prefix;  if (isElement && defaultNS != null && uri.equals(defaultNS)) {    prefix="";  } else {    prefix=nsSupport.getPrefix(uri);  }  if (prefix != null) {    return prefix;  }  prefix=(String)doneDeclTable.get(uri);  if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {    prefix=null;  }  if (prefix == null) {    prefix=(String)prefixTable.get(uri);    if (prefix != null && ((!isElement || defaultNS != null) && "".equals(prefix) || nsSupport.getURI(prefix) != null)) {      prefix=null;    }  }  if (prefix == null && qName != null && !"".equals(qName)) {    int i=qName.indexOf(':');    if (i == -1) {      if (isElement && defaultNS == null) {        prefix="";      }    } else {      prefix=qName.substring(0,i);    }  }  for (; prefix == null || nsSupport.getURI(prefix) != null; prefix="__NS" + ++prefixCounter)   ;  nsSupport.declarePrefix(prefix,uri);  doneDeclTable.put(uri,prefix);  return prefix;}  }
class C{  public boolean isFinished(){  return finished;}  }
class C{  void inheritAttributes(Cache cache){  inheritAttributes(cache,true);}  }
class C{  @Override public void moveToCurrentRow() throws SQLException {  try {    debugCodeCall("moveToCurrentRow");    checkUpdatable();    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String tagToString(final TagType type){  if (type == TagType.VIEW_TAG) {    return "view_tag";  } else   if (type == TagType.NODE_TAG) {    return "node_tag";  }  throw new IllegalArgumentException("IE00566: Unknown tag type");}  }
class C{  public static int editDistance(String s,String t){  int d[][];  int n;  int m;  int i;  int j;  char s_i;  char t_j;  int cost;  n=s.length();  m=t.length();  if (n == 0) {    return m;  }  if (m == 0) {    return n;  }  d=new int[n + 1][m + 1];  for (i=0; i <= n; i++) {    d[i][0]=i;  }  for (j=0; j <= m; j++) {    d[0][j]=j;  }  for (i=1; i <= n; i++) {    s_i=s.charAt(i - 1);    for (j=1; j <= m; j++) {      t_j=t.charAt(j - 1);      if (s_i == t_j) {        cost=0;      } else {        cost=1;      }      d[i][j]=SloppyMath.min(d[i - 1][j] + 1,d[i][j - 1] + 1,d[i - 1][j - 1] + cost);    }  }  return d[n][m];}  }
class C{  static void sort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_CHAR_VALUES];    for (int i=left - 1; ++i <= right; count[a[i]]++)     ;    for (int i=NUM_CHAR_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      char value=(char)i;      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  public String globalInfo(){  return "Reads a source that is in the JSON format.\n" + "It automatically decompresses the data if the extension is '" + FILE_EXTENSION_COMPRESSED + "'.\n\n"+ "For more information, see JSON homepage:\n"+ "http://www.json.org/";}  }
class C{  public void moveViewTo(float xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String systemId;  int index;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation2");  systemId=notationNode.getSystemId();  assertURIEquals("uriEquals",null,null,null,"notation2File",null,null,null,null,systemId);}  }
class C{  public void add(final Resource s,final URI p,final Value o,final Resource c,final StatementEnum type){  handleStatement(s,p,o,c,type);}  }
class C{  public static long pow(long a,int b,long modulus){  long p=1;  for (int i=0; i < b; i++) {    p=(p * a) % modulus;  }  return p;}  }
class C{  @Provides @Derivation @Singleton Provider derivationProvider(){  try {    Provider provider=(Provider)Class.forName(derivationProviderClass).newInstance();    if (Security.getProvider(provider.getName()) == null) {      logger.debug("Registering new crypto provider {}",provider.getName());      Security.addProvider(provider);    }    return provider;  } catch (  InstantiationException|ClassNotFoundException|IllegalAccessException e) {    logger.error("Error instantiating derivation provider: {}",e.getMessage(),e);    throw Throwables.propagate(e);  }}  }
class C{  public void onTerminate(){  sContext.unregisterReceiver(mModel);  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(sContext);  launcherApps.removeOnAppsChangedCallback(mModel);  PackageInstallerCompat.getInstance(sContext).onStop();  ContentResolver resolver=sContext.getContentResolver();  resolver.unregisterContentObserver(mFavoritesObserver);}  }
class C{  public StoryObject(StoryObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.pre=parent.getPre();  this.post=parent.getPost();  this.deleted=parent.getDeleted();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.completedTime=parent.getCompletedTime();  this.completed=parent.getCompleted();  this.creatorId=parent.getCreatorId();  this.creatorName=parent.getCreatorName();  this.description=parent.getDescription();  this.acceptanceLevel=parent.getAcceptanceLevel();  this.priority=parent.getPriority();  this.parentStoryId=parent.getParentStoryId();  this.completable=parent.getCompletable();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  private static <D,T>D createDaoFromConfig(ConnectionSource connectionSource,Class<T> clazz) throws SQLException {  if (configMap == null) {    return null;  }  @SuppressWarnings("unchecked") DatabaseTableConfig<T> config=(DatabaseTableConfig<T>)configMap.get(clazz);  if (config == null) {    return null;  }  Dao<T,?> configedDao=doCreateDao(connectionSource,config);  @SuppressWarnings("unchecked") D castDao=(D)configedDao;  return castDao;}  }
class C{  public static InputStream constructInputStream(DataInput in){  if (in instanceof InputStream) {    return (InputStream)in;  } else {    return new DataInputInputStream(in);  }}  }
class C{  public final HashCode append(double value){  return hashCode.append(value);}  }
class C{  public MemoryExampleTable(Attribute... attributes){  this(Arrays.asList(attributes));}  }
class C{  public static int convertSQLTypeToValueType(int sqlType){switch (sqlType) {case Types.VARCHAR:case Types.LONGVARCHAR:case Types.NVARCHAR:case Types.LONGNVARCHAR:    return STRING;case Types.NUMERIC:case Types.DECIMAL:  return DECIMAL;case Types.BIT:case Types.BOOLEAN:return BOOLEAN;case Types.INTEGER:return INT;case Types.SMALLINT:return SHORT;case Types.TINYINT:return BYTE;case Types.BIGINT:return LONG;case Types.REAL:return FLOAT;case Types.DOUBLE:case Types.FLOAT:return DOUBLE;case Types.DATE:return DATE;case Types.TIME:return TIME;case Types.TIMESTAMP:return TIMESTAMP;default :throw new IllegalArgumentException("JDBC Type: " + sqlType);}}  }
class C{  public static byte[] toByteArray(BitSet bits,int vectorWidth){  byte[] bytes=new byte[(int)Math.ceil(vectorWidth / 8.0)];  for (int i=0; i < bits.length(); i++) {    if (bits.get(i)) {      bytes[bytes.length - i / 8 - 1]|=1 << (i % 8);    }  }  return bytes;}  }
class C{  public boolean canMountDWP(){  return (getOriginalWalkMP() >= 2) && (getWeightClass() >= EntityWeightClass.WEIGHT_MEDIUM);}  }
class C{  public static String kmlAltitudeMode(int altitudeMode){  final String kmlAltitude;switch (altitudeMode) {case WorldWind.CLAMP_TO_GROUND:    kmlAltitude="clampToGround";  break;case WorldWind.RELATIVE_TO_GROUND:kmlAltitude="relativeToGround";break;case WorldWind.ABSOLUTE:case WorldWind.CONSTANT:kmlAltitude="absolute";break;default :String message=Logging.getMessage("generic.InvalidAltitudeMode",altitudeMode);Logging.logger().warning(message);throw new IllegalArgumentException(message);}return kmlAltitude;}  }
class C{  public final void yybegin(int newState){  yy_lexical_state=newState;}  }
class C{  public static void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  public void storeDevice(Device d){  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  writeUpdatedDeviceToStorage(d);  lastWriteTimes.put(d.getDeviceKey(),now);}  }
class C{  public String sqlMetadata_checkRules(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_checkRules(catalogName,schemaName);}  }
class C{  public static boolean isServiceEnabled(EntityManager em,Service service){  ServiceManagementRecord record=findServiceManagementRecord(em,service);  return record == null ? true : record.isEnabled();}  }
class C{  protected void addImpl(Component child,Object constraints,int index){  setView(child);}  }
class C{  public static String formatMessage(final String bundle,final String msgCode){  return formatMessage(bundle,msgCode,null);}  }
class C{  protected void acceptEquals(T model){  requireNonNull(model);  if (importer != null) {    importer.add(Import.of(Type.of(Objects.class)));    importer.add(Import.of(Type.of(Optional.class)));  }  model.add(Method.of(EQUALS,BOOLEAN_PRIMITIVE).set(Javadoc.of("Compares this object with the specified one for equality. " + "The other object must be of the same type and not null for " + "the method to return true.").add(PARAM.setValue("other").setText("The object to compare with.")).add(RETURN.setText("True if the objects are equal."))).public_().add(OVERRIDE).add(Field.of("other",OBJECT)).add("return Optional.ofNullable(other)").call(null).add(tab() + ".filter(o -> getClass().equals(o.getClass()))").add(tab() + ".map(o -> (" + model.getName()+ ") o)").add(tab() + model.getFields().stream().map(null).collect(Collectors.joining(nl() + tab()))).add(tab() + ".isPresent();"));}  }
class C{  public short[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  protected Elide(AuditLogger auditLogger,DataStore dataStore,EntityDictionary dictionary,JsonApiMapper mapper,Function<RequestScope,PermissionExecutor> permissionExecutor,List<JoinFilterDialect> joinFilterDialects,List<SubqueryFilterDialect> subqueryFilterDialects,boolean useFilterExpressions){  this.auditLogger=auditLogger;  this.dataStore=dataStore;  this.dictionary=dictionary;  dataStore.populateEntityDictionary(dictionary);  this.mapper=mapper;  this.permissionExecutor=permissionExecutor;  this.joinFilterDialects=joinFilterDialects;  this.subqueryFilterDialects=subqueryFilterDialects;  this.useFilterExpressions=useFilterExpressions;}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  type.write(nbtTags);  nbtTags.setInteger("amount",amount);  return nbtTags;}  }
class C{  public URLConverter(){  super();}  }
class C{  public boolean isSetEchoReply(){  return this.echoReply != null;}  }
class C{  static int computeExpandedCombinedBufferItemCapacity(int k,long n){  int totLevels=computeNumLevelsNeeded(k,n);  int ret;  if (totLevels > 0) {    ret=(2 + totLevels) * k;  } else {    int bbItems=computeBaseBufferItems(k,n);    ret=Math.max(MIN_BASE_BUF_SIZE,ceilingPowerOf2(bbItems));  }  return ret;}  }
class C{  public synchronized void removeSeries(int index){  mSeries.remove(index);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") @Override public void installLibrary(final Context context,final String[] abis,final String mappedLibraryName,final File destination,final ReLinkerInstance instance){  ZipFile zipFile=null;  try {    final ApplicationInfo appInfo=context.getApplicationInfo();    int tries=0;    while (tries++ < MAX_TRIES) {      try {        zipFile=new ZipFile(new File(appInfo.sourceDir),ZipFile.OPEN_READ);        break;      } catch (      IOException ignored) {      }    }    if (zipFile == null) {      instance.log("FATAL! Couldn't find application APK!");      return;    }    tries=0;    while (tries++ < MAX_TRIES) {      String jniNameInApk=null;      ZipEntry libraryEntry=null;      for (      final String abi : abis) {        jniNameInApk="lib" + File.separatorChar + abi+ File.separatorChar+ mappedLibraryName;        libraryEntry=zipFile.getEntry(jniNameInApk);        if (libraryEntry != null) {          break;        }      }      if (jniNameInApk != null)       instance.log("Looking for %s in APK...",jniNameInApk);      if (libraryEntry == null) {        if (jniNameInApk != null) {          throw new MissingLibraryException(jniNameInApk);        } else {          throw new MissingLibraryException(mappedLibraryName);        }      }      instance.log("Found %s! Extracting...",jniNameInApk);      try {        if (!destination.exists() && !destination.createNewFile()) {          continue;        }      } catch (      IOException ignored) {        continue;      }      InputStream inputStream=null;      FileOutputStream fileOut=null;      try {        inputStream=zipFile.getInputStream(libraryEntry);        fileOut=new FileOutputStream(destination);        final long written=copy(inputStream,fileOut);        fileOut.getFD().sync();        if (written != destination.length()) {          continue;        }      } catch (      FileNotFoundException e) {        continue;      }catch (      IOException e) {        continue;      } finally {        closeSilently(inputStream);        closeSilently(fileOut);      }      destination.setReadable(true,false);      destination.setExecutable(true,false);      destination.setWritable(true);      return;    }    instance.log("FATAL! Couldn't extract the library from the APK!");  }  finally {    try {      if (zipFile != null) {        zipFile.close();      }    } catch (    IOException ignored) {    }  }}  }
class C{  public static void boot(Address bootStart){  Word nextOID=VM.traceInterface.getOID();  ObjectReference trav=VM.traceInterface.getBootImageLink().plus(bootStart.toWord().toOffset()).toObjectReference();  objectLinks.set(ALLOC_BOOT,trav);  while (!trav.isNull()) {    ObjectReference next=VM.traceInterface.getLink(trav);    Word thisOID=VM.traceInterface.getOID(trav);    trace.push(TRACE_BOOT_ALLOC);    trace.push(thisOID);    trace.push(nextOID.minus(thisOID).lsh(LOG_BYTES_IN_ADDRESS));    nextOID=thisOID;    if (!next.isNull()) {      next=next.toAddress().plus(bootStart.toWord().toOffset()).toObjectReference();      VM.traceInterface.setLink(trav,next);    }    trav=next;  }}  }
class C{  @Override public void updateDate(String columnLabel,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addMetric(PerfMetricId metric,SamplesAggregator samplesAggregator){  this.aggregatorsByPerfCounterId.put(metric.getCounterId(),samplesAggregator);  this.spec.getMetricId().add(metric);}  }
class C{  @Override public void write(byte[] b,int off,int len){  checkNotNull(b);}  }
class C{  public SimpleInputRegister(byte b1,byte b2){  register[0]=b1;  register[1]=b2;}  }
class C{  public void paintText(SynthContext context,Graphics g,String text,Rectangle bounds,int mnemonicIndex){  if (text == null || text.length() <= 0) {    return;  }  Region id=context.getRegion();  if ((id == Region.RADIO_BUTTON || id == Region.CHECK_BOX || id == Region.TABBED_PANE_TAB) && (context.getComponentState() & SynthConstants.FOCUSED) != 0) {    JComponent source=context.getComponent();    if (!(source instanceof AbstractButton) || ((AbstractButton)source).isFocusPainted()) {      int synthState=context.getComponentState();      GTKStyle style=(GTKStyle)context.getStyle();      int focusSize=style.getClassSpecificIntValue(context,"focus-line-width",1);      int focusPad=style.getClassSpecificIntValue(context,"focus-padding",1);      int totalFocus=focusSize + focusPad;      int x=bounds.x - totalFocus;      int y=bounds.y - totalFocus;      int w=bounds.width + (2 * totalFocus);      int h=bounds.height + (2 * totalFocus);      Color color=g.getColor();      GTKPainter.INSTANCE.paintFocus(context,g,id,synthState,"checkbutton",x,y,w,h);      g.setColor(color);    }  }  super.paintText(context,g,text,bounds,mnemonicIndex);}  }
class C{  @SuppressWarnings("unchecked") protected ContextHandler createContext(String filename) throws Exception {  Resource resource=Resource.newResource(filename);  if (!resource.exists()) {    return null;  }  XmlConfiguration xmlConfiguration=new XmlConfiguration(resource.getURL());  HashMap properties=new HashMap();  properties.put("Server",_contexts.getServer());  if (_configMgr != null) {    properties.putAll(_configMgr.getProperties());  }  xmlConfiguration.setProperties(properties);  ContextHandler context=(ContextHandler)xmlConfiguration.configure();  Enumeration<?> names=_attributes.getAttributeNames();  while (names.hasMoreElements()) {    String name=(String)names.nextElement();    context.setAttribute(name,_attributes.getAttribute(name));  }  return context;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Element testName;  Node firstChild;  String childValue;  Text textNode;  Node retNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  testName=(Element)elementList.item(0);  textNode=doc.createTextNode("");  retNode=testName.appendChild(textNode);  textNode=doc.createTextNode(",000");  retNode=testName.appendChild(textNode);  root=doc.getDocumentElement();  root.normalize();  elementList=doc.getElementsByTagName("sup");  testName=(Element)elementList.item(0);  firstChild=testName.getFirstChild();  childValue=firstChild.getNodeValue();  assertEquals("elementNormalizeAssert","56,000,000",childValue);}  }
class C{  public void fireGroupRemoved(final Group deleted){  for (  GroupListener listener : groupListeners) {    listener.groupRemoved(new NetworkEvent<Group>(this,deleted));  }}  }
class C{  private BuyResponse purchase(String packageName,int versionCode,int offerType) throws IOException {  ResponseWrapper responseWrapper=executePOSTRequest(PURCHASE_URL,new String[][]{{"ot",String.valueOf(offerType)},{"doc",packageName},{"vc",String.valueOf(versionCode)}});  return responseWrapper.getPayload().getBuyResponse();}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public static void checkGetInputStreamOK(Resource resource) throws IOException {  if (!resource.exists())   throw new IOException("file [" + resource.getPath() + "] does not exist");  if (resource.isDirectory())   throw new IOException("can't read directory [" + resource.getPath() + "] as a file");}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void testDeleteTracksWithMultiAccounts() throws Exception {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.SOLO.clickOnView(EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getChildAt(0));  EndToEndTestUtils.instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.clickOnMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_delete));  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackListActivity.getString(R.string.generic_yes));  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_2);  EndToEndTestUtils.SOLO.clickOnView(EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getChildAt(0));  EndToEndTestUtils.SOLO.clickOnMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_delete));  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackListActivity.getString(R.string.generic_yes));  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_1);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  drive=SyncTestUtils.getGoogleDrive(trackListActivity.getApplicationContext());  SyncTestUtils.checkFilesNumber(drive);  SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_2);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  drive=SyncTestUtils.getGoogleDrive(trackListActivity.getApplicationContext());  SyncTestUtils.checkFilesNumber(drive);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) private static void choosePreviewSize(Camera.Parameters parms,int width,int height){  List<Camera.Size> previews=parms.getSupportedPreviewSizes();  for (  Camera.Size size : previews) {    if (size.width == width && size.height == height) {      parms.setPreviewSize(width,height);      if (Cfg.DEBUG) {        Check.log(TAG + " (choosePreviewSize), found best preview size!");      }      return;    }  }  Camera.Size best=getBestPreviewSize(parms,width,height);  if (best != null) {    if (Cfg.DEBUG) {      Check.log(TAG + " (choosePreviewSize), Camera best preview size for video is " + best.width+ "x"+ best.height);    }  }  if (best != null) {    Log.w(TAG,"Unable to set preview size to " + width + "x"+ height);    parms.setPreviewSize(best.width,best.height);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Document doc=target.getDocument();    int dot=doc.getLength();    if (select) {      target.moveCaretPosition(dot);    } else {      target.setCaretPosition(dot);    }  }}  }
class C{  private FXGSymbolClass transcodeFXG(CompilationUnit unit,String packageName,String className,TypeTable typeTable){  FXGNode rootNode=(FXGNode)unit.getContext().getAttribute(FXG_DOM_ROOT);  FlexFXG2SWFTranscoder transcoder=new FlexFXG2SWFTranscoder(typeTable);  PathResolver pathResolver=unit.getSource().getPathResolver();  FlexResourceResolver resolver=new FlexResourceResolver(pathResolver);  transcoder.setResourceResolver(resolver);  FXGSymbolClass asset=transcoder.transcode(rootNode,packageName,className);  return asset;}  }
class C{  protected void storeTextInfo(Positionable p,Element element){  PositionablePopupUtil util=p.getPopupUtility();  element.setAttribute("size","" + util.getFontSize());  element.setAttribute("style","" + util.getFontStyle());  element.setAttribute("red","" + util.getForeground().getRed());  element.setAttribute("green","" + util.getForeground().getGreen());  element.setAttribute("blue","" + util.getForeground().getBlue());  element.setAttribute("hasBackground",util.hasBackground() ? "yes" : "no");  if (util.hasBackground()) {    element.setAttribute("redBack","" + util.getBackground().getRed());    element.setAttribute("greenBack","" + util.getBackground().getGreen());    element.setAttribute("blueBack","" + util.getBackground().getBlue());  }  if (util.getMargin() != 0) {    element.setAttribute("margin","" + util.getMargin());  }  if (util.getBorderSize() != 0) {    element.setAttribute("borderSize","" + util.getBorderSize());    element.setAttribute("redBorder","" + util.getBorderColor().getRed());    element.setAttribute("greenBorder","" + util.getBorderColor().getGreen());    element.setAttribute("blueBorder","" + util.getBorderColor().getBlue());  }  if (util.getFixedWidth() != 0) {    element.setAttribute("fixedWidth","" + util.getFixedWidth());  }  if (util.getFixedHeight() != 0) {    element.setAttribute("fixedHeight","" + util.getFixedHeight());  }  String just;switch (util.getJustification()) {case 0x02:    just="right";  break;case 0x04:just="centre";break;default :just="left";break;}element.setAttribute("justification",just);if (util.getOrientation() != PositionablePopupUtil.HORIZONTAL) {String ori;switch (util.getOrientation()) {case PositionablePopupUtil.VERTICAL_DOWN:ori="vertical_down";break;case PositionablePopupUtil.VERTICAL_UP:ori="vertical_up";break;default :ori="horizontal";break;}element.setAttribute("orientation",ori);}}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public void assignFoundation(Candidate<?> candidate){  CandidateType candidateType=candidate.getType();  String type=candidateType.toString();  String base=candidate.getBase().getTransportAddress().getHostAddress();  String server;switch (candidateType) {case SERVER_REFLEXIVE_CANDIDATE:    TransportAddress serverAddress=candidate.getStunServerAddress();  server=(serverAddress == null) ? "" : serverAddress.getHostAddress();break;case RELAYED_CANDIDATE:server=candidate.getRelayServerAddress().getHostAddress();break;default :server=null;break;}String transport=candidate.getTransport().toString();StringBuffer foundationStringBuff=new StringBuffer(type);foundationStringBuff.append(base);if (server != null) foundationStringBuff.append(server);foundationStringBuff.append(transport);String foundationString=foundationStringBuff.toString();String foundationValue=null;synchronized (foundations) {foundationValue=foundations.get(foundationString);if (foundationValue == null) {foundationValue=Integer.toString(++lastAssignedFoundation);foundations.put(foundationString,foundationValue);}}candidate.setFoundation(foundationValue);}  }
class C{  private void printDistribution(IgniteKernal node){  List<Integer> primary=partitions(node,PARTITION_PRIMARY);  List<Integer> backup=partitions(node,PARTITION_BACKUP);  List<Integer> reader=partitions(node,PARTITION_READER);  info(">>> Partitions distribution calculated [nodeId=" + node.localNode().id() + ", primary="+ primary+ ", backup="+ backup+ ", reader="+ reader+ ']');}  }
class C{  public void encode() throws Exception {  message.getBodyBuffer().resetReaderIndex();}  }
class C{  protected BoolLiteralImpl(){  super();}  }
class C{  public boolean isOnFriday(){  Object oo=get_Value(COLUMNNAME_OnFriday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static void execute(PoolImpl pool,Function function,Object args,MemberMappedArgument memberMappedArg,boolean allServers,byte hasResult,boolean isFnSerializationReqd,String[] groups){  List servers=null;  AbstractOp op=new ExecuteFunctionNoAckOpImpl(function,args,memberMappedArg,hasResult,isFnSerializationReqd,groups,allServers);  try {    if (allServers && groups.length == 0) {      if (logger.isDebugEnabled()) {        logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to all servers using pool: "+ pool);      }      servers=pool.getCurrentServers();      Iterator i=servers.iterator();      while (i.hasNext()) {        pool.executeOn((ServerLocation)i.next(),op);      }    } else {      if (logger.isDebugEnabled()) {        logger.debug("ExecuteFunctionNoAckOp#execute : Sending Function Execution Message:" + op.getMessage() + " to server using pool: "+ pool+ " with groups:"+ Arrays.toString(groups)+ " all members:"+ allServers);      }      pool.execute(op,0);    }  } catch (  Exception ex) {    if (logger.isDebugEnabled()) {      logger.debug("ExecuteFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message:" + op.getMessage() + " to server using pool: "+ pool,ex);    }    if (ex.getMessage() != null)     throw new FunctionException(ex.getMessage(),ex); else     throw new FunctionException("Unexpected exception during function execution:",ex);  }}  }
class C{  @Override public void onDestroy(){  Timber.i("Destroying CastingServer");  super.onDestroy();}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  public final static int memcmp(byte[] s1,int s1offset,byte[] s2,int s2offset){  int n=s1.length - s1offset;  if (n > (s2.length - s2offset)) {    n=s2.length - s2offset;  }  for (int i=0; i < n; i++) {    if (s1[i + s1offset] != s2[i + s2offset]) {      return s1[i + s1offset] < s2[i + s2offset] ? -1 : 1;    }  }  return 0;}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final int value) throws XMLStreamException {  writer.writeAttribute(attributeName,XMLConvert.toString(value));}  }
class C{  @Override public void onClick(final View view){  final String idValue=mAdvIntervalView.getText().toString();  boolean valid=true;  int interval=0;  if (TextUtils.isEmpty(idValue))   valid=false;  try {    interval=Integer.parseInt(idValue);  } catch (  final NumberFormatException e) {    valid=false;  }  if (interval < 100 || interval > 10240)   valid=false;  if (valid) {    final UpdateFragment parentFragment=(UpdateFragment)getParentFragment();    parentFragment.writeNewAdvInterval(interval);    dismiss();  } else {    mAdvIntervalView.setError(getText(R.string.update_dialog_adv_interval_error));    mAdvIntervalView.requestFocus();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.008 -0500",hash_original_method="D6F9919A17E283BD99102CFFD7EAE0C0",hash_generated_method="C32E1FE0862478D2407E8882511A9429") public final static String formatRequestLine(final RequestLine reqline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatRequestLine(null,reqline).toString();}  }
class C{  protected Registration registerTimer(Callable<Task<?>> futureCallable,long dueTime,long period,TimeUnit timeUnit){  return runtime.registerTimer(this,futureCallable,dueTime,period,timeUnit);}  }
class C{  public void createLogPanel(){  if (logPanel == null) {    TextBox t=new TextBox("Log:",null,128,TextField.ANY);    t.addCommand(cancel);    t.setCommandListener(this);    logPanel=t;  }}  }
class C{  public ScVolume createVolume(String ssn,String name,String storageType,int sizeInGB,String cgID) throws StorageCenterAPIException {  LOG.debug("Creating {}GB volume: '{}'",sizeInGB,name);  String errorMessage="";  Parameters params=new Parameters();  params.add("Name",name);  params.add("Notes",NOTES_STRING);  params.add("Size",String.format("%d MB",sizeInGB));  params.add("StorageCenter",ssn);  if (cgID != null && !cgID.isEmpty()) {    String[] ids={cgID};    params.add("ReplayProfileList",ids);  }  ScStorageType[] storageTypes=getStorageTypes(ssn);  for (  ScStorageType storType : storageTypes) {    if (storType.name.equals(storageType)) {      params.add("StorageType",storType.instanceId);      break;    }  }  try {    RestResult result=restClient.post("StorageCenter/ScVolume",params.toJson());    if (checkResults(result)) {      return gson.fromJson(result.getResult(),ScVolume.class);    }  } catch (  Exception e) {    errorMessage=String.format("Error creating volume: %s",e);    LOG.warn(errorMessage);  }  if (errorMessage.length() == 0) {    errorMessage=String.format("Unable to create volume %s on SC %s",name,ssn);  }  throw new StorageCenterAPIException(errorMessage);}  }
class C{  protected AnnotationMirror findLub(AnnotationMirror a1,AnnotationMirror a2){  if (isSubtype(a1,a2)) {    return a2;  }  if (isSubtype(a2,a1)) {    return a1;  }  assert getTopAnnotation(a1) == getTopAnnotation(a2) : "MultiGraphQualifierHierarchy.findLub: this method may only be called " + "with qualifiers from the same hierarchy. Found a1: " + a1 + " [top: "+ getTopAnnotation(a1)+ "], a2: "+ a2+ " [top: "+ getTopAnnotation(a2)+ "]";  Set<AnnotationMirror> outset=AnnotationUtils.createAnnotationSet();  for (  AnnotationMirror a1Super : supertypesGraph.get(a1)) {    AnnotationMirror a1Lub=findLub(a1Super,a2);    if (a1Lub != null) {      outset.add(a1Lub);    } else {      ErrorReporter.errorAbort("GraphQualifierHierarchy could not determine LUB for " + a1 + " and "+ a2+ ". Please ensure that the checker knows about all type qualifiers.");    }  }  if (outset.size() == 1) {    return outset.iterator().next();  }  if (outset.size() > 1) {    outset=findSmallestTypes(outset);    Iterator<AnnotationMirror> outsetIterator=outset.iterator();    AnnotationMirror anno;    do {      anno=outsetIterator.next();    } while (isPolymorphicQualifier(anno));    return anno;  }  ErrorReporter.errorAbort("GraphQualifierHierarchy could not determine LUB for " + a1 + " and "+ a2+ ". Please ensure that the checker knows about all type qualifiers.");  return null;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        return FileTemplateTokenType.MACRO;      }case 4:    break;case 1:{    return FileTemplateTokenType.TEXT;  }case 5:break;case 3:{return FileTemplateTokenType.DIRECTIVE;}case 6:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void testReplicated() throws Exception {  cacheMode=REPLICATED;  check();}  }
class C{  private void growHeap(){  double[] tmp1=new double[counts.length * 2];  for (int i=1; i < counts.length; i++) {    tmp1[i]=counts[i];  }  counts=tmp1;  int[] tmp2=new int[cmids.length * 2];  for (int i=1; i < cmids.length; i++) {    tmp2[i]=cmids[i];  }  cmids=tmp2;}  }
class C{  private boolean contextExists(String contextTypeId){  return contextTypeId != null && (getRegistry() == null || getRegistry().getContextType(contextTypeId) != null);}  }
class C{  public int children(){  return children.size();}  }
class C{  protected static void free(Lock l){  l.active=false;  RVMThread me=RVMThread.getCurrentThread();  if (me.cachedFreeLock == null) {    if (trace) {      VM.sysWriteln("Lock.free: setting ",Magic.objectAsAddress(l)," as the cached free lock for Thread #",me.getThreadSlot());    }    me.cachedFreeLock=l;  } else {    if (trace) {      VM.sysWriteln("Lock.free: returning ",Magic.objectAsAddress(l)," to the global freelist for Thread #",me.getThreadSlot());    }    returnLock(l);  }}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public void testAddAndSum(){  LongAdder ai=new LongAdder();  ai.add(2);  assertEquals(2,ai.sum());  ai.add(-4);  assertEquals(-2,ai.sum());}  }
class C{  private Source generateSource(CompilationUnit unit,SymbolTable symbolTable) throws IOException {  Source originalSource=unit.getSource();  String className=originalSource.getShortName();  String packageName=originalSource.getRelativePath().replace('/','.');  TypeTable typeTable=new TypeTable(symbolTable,nameMappings,unit.getStandardDefs());  FXGSymbolClass asset=transcodeFXG(unit,packageName,className,typeTable);  Source generatedSource=generateMainSource(unit,packageName,className,asset);  List<FXGSymbolClass> additionalAssets=asset.getAdditionalSymbolClasses();  if (additionalAssets != null && additionalAssets.size() > 0) {    Map<QName,Source> additionalSources=new HashMap<QName,Source>(additionalAssets.size());    for (    FXGSymbolClass additionalAsset : additionalAssets) {      if (additionalAsset.getSymbol() != null) {        Source additionalSource=generateAdditionalSource(unit,additionalAsset);        if (additionalSource != null) {          QName additionalQName=new QName(additionalAsset.getPackageName(),additionalAsset.getClassName());          additionalSources.put(additionalQName,additionalSource);        }      }    }    unit.addGeneratedSources(additionalSources);  }  return generatedSource;}  }
class C{  public double eval(boolean useTrainingData,int valueIndex){  return chromosomes[0].eval(useTrainingData,valueIndex);}  }
class C{  public void methodEntered(MethodEntryEvent event){  if (vmDead) {    failure("Failure: Got MethodEntryEvent after VM Dead");  }}  }
class C{  @Override public void doWork() throws OperatorException {  outExtender.reset();  ExampleSet exampleSet=exampleSetInput.getData(ExampleSet.class);  String iterationMacroName=getParameterAsString(PARAMETER_ITERATION_MACRO);  boolean innerSinkIsConnected=exampleSetInnerSink.isConnected();  getProgress().setTotal(exampleSet.size());  getProgress().setCheckForStop(false);  for (iteration=1; iteration <= exampleSet.size(); iteration++) {    getProcess().getMacroHandler().addMacro(iterationMacroName,String.valueOf(iteration));    exampleSetInnerSource.deliver(innerSinkIsConnected ? exampleSet : (ExampleSet)exampleSet.clone());    getSubprocess(0).execute();    inApplyLoop();    getProgress().step();    if (innerSinkIsConnected) {      exampleSet=exampleSetInnerSink.getData(ExampleSet.class);    }    outExtender.collect();  }  getProcess().getMacroHandler().removeMacro(iterationMacroName);  exampleSetOutput.deliver(exampleSet);  getProgress().complete();}  }
class C{  private void appendTree(RootedTree tree,Node node,StringBuilder builder,int indent){  builder.append("{\n");  if (tree.isExternal(node)) {    appendIndent(builder,indent + 1);    appendTaxonName(tree.getTaxon(node),builder);  } else {    appendIndent(builder,indent + 1);    builder.append("\"children\": [\n");    java.util.List<Node> children=tree.getChildren(node);    final int last=children.size() - 1;    for (int i=0; i < children.size(); i++) {      appendIndent(builder,indent + 2);      appendTree(tree,children.get(i),builder,indent + 2);      builder.append(i == last ? "\n" : ",\n");    }    appendIndent(builder,indent + 1);    builder.append("]");  }  Node parent=tree.getParent(node);  if (parent != null) {    if (tree.hasLengths()) {      builder.append(",\n");      appendIndent(builder,indent + 1);      builder.append("\"length\": ").append(tree.getLength(node));    }  }  builder.append(",\n");  appendIndent(builder,indent + 1);  builder.append("\"height\": ").append(tree.getHeight(node));  appendAttributes(node,builder,indent + 1);  builder.append("\n");  appendIndent(builder,indent);  builder.append("}");}  }
class C{  BulkOpProcessed(boolean status){  this.processed=status;}  }
class C{  private boolean typeImplements(String type,ClassReader info,String itf) throws IOException {  while (!"java/lang/Object".equals(type)) {    String[] itfs=info.getInterfaces();    for (int i=0; i < itfs.length; ++i) {      if (itfs[i].equals(itf)) {        return true;      }    }    for (int i=0; i < itfs.length; ++i) {      if (typeImplements(itfs[i],typeInfo(itfs[i]),itf)) {        return true;      }    }    type=info.getSuperName();    info=typeInfo(type);  }  return false;}  }
class C{  public OptionalPartsConf(String confDir) throws IOException {  File optionalPartsDir=new File(confDir);  final String optionalPartsPath=optionalPartsDir.getAbsolutePath();  if (!optionalPartsDir.isDirectory()) {    log.warn("Optional configuration parts directory '{}' " + "either does not exist or is regular file",optionalPartsPath);    return;  }  log.debug("Getting optional conf parts from directory '{}'",confDir);  File[] optionalPartFiles=optionalPartsDir.listFiles(getIniFileFilter());  if (optionalPartFiles == null) {    log.warn("Optional part files list in directory '{}' " + "cannot be fetched.",optionalPartsPath);    return;  }  List<File> files=Arrays.asList(optionalPartFiles);  files.forEach(null);}  }
class C{  public void copyFrom(MProcess source){  log.log(Level.FINE,"Copying from:" + source + ", to: "+ this);  setAccessLevel(source.getAccessLevel());  setAD_Form_ID(source.getAD_Form_ID());  setAD_PrintFormat_ID(source.getAD_PrintFormat_ID());  setAD_ReportView_ID(source.getAD_ReportView_ID());  setAD_Workflow_ID(source.getAD_Workflow_ID());  setClassname(source.getClassname());  setDescription(source.getDescription());  setHelp(source.getHelp());  setIsBetaFunctionality(source.isBetaFunctionality());  setIsDirectPrint(source.isDirectPrint());  setIsReport(source.isReport());  setIsServerProcess(source.isServerProcess());  setJasperReport(source.getJasperReport());  setProcedureName(source.getProcedureName());  setShowHelp(source.getShowHelp());  saveEx();  MProcessPara[] parameters=source.getParameters();  for (  MProcessPara sourcePara : parameters) {    MProcessPara targetPara=new MProcessPara(this);    targetPara.copyFrom(sourcePara);  }}  }
class C{  @RequestMapping(value="/SAML2/SmartcardRealm/{tenant:.*}",method={RequestMethod.GET,RequestMethod.POST}) public String smartcardRealmSso(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  return this.sso(locale,tenant,model,request,response);}  }
class C{  public void refreshDomain(DomainPK domainPk){  ProjectPK projectPk=new ProjectPK(domainPk.getCustomerId(),domainPk.getProjectId());  RedisCacheManager.getInstance().refresh(domainPk.toUUID(),projectPk.toUUID() + "/domains");}  }
class C{  void invokeInSwing(Runnable runnable){  if (SwingUtilities.isEventDispatchThread())   runnable.run(); else   try {    SwingUtilities.invokeAndWait(runnable);  } catch (  InterruptedException e) {  }catch (  InvocationTargetException e) {  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public String toString(){  return "BeanMap<" + String.valueOf(bean) + ">";}  }
class C{  public HessianDebugInputStream(InputStream is,PrintWriter dbg){  _is=is;  if (dbg == null)   dbg=new PrintWriter(System.out);  _state=new HessianDebugState(dbg);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.CONSTRAINT__TYPE:    setType((ConstraintIntervalType)newValue);  return;case DatatypePackage.CONSTRAINT__CONSTRAINT_VALUES:setConstraintValues((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testValidManifest() throws Exception {  assertEquals(NO_WARNINGS,lintFiles("ValidAndroidManifest.xml=>AndroidManifest.xml"));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void show(){  setListSelection(comboBox.getSelectedIndex());  Point location=getPopupLocation();  show(comboBox,location.x + popupOffsetX,location.y + popupOffsetY);}  }
class C{  protected void growFruit(World world,BlockPos pos){}  }
class C{  public void close(){  delegate.close();}  }
class C{  public GroupShardsIterator allActiveShardsGrouped(String[] indices,boolean includeEmpty,boolean includeRelocationTargets){  return allSatisfyingPredicateShardsGrouped(indices,includeEmpty,includeRelocationTargets,ACTIVE_PREDICATE);}  }
class C{  public DirectedSparseGraph(){  super(EdgeType.DIRECTED);  vertices=new HashMap<V,Pair<Map<V,E>>>();  edges=new HashMap<E,Pair<V>>();}  }
class C{  public static String likeEscape(String likeClause){  return likeClause.replace("%","\\%").replace("_","\\_");}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.EQUATION_REF__REF:    setRef((EquationDefinition)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public PSpecified(byte[] p){  super("PSpecified");  if (p == null) {    throw new NullPointerException("p == null");  }  this.p=new byte[p.length];  System.arraycopy(p,0,this.p,0,p.length);}  }
class C{  public void sendAppendEntryReply(){  Peer leader=peers.get(leaderId);  if (leader != null) {    Message message=pool.checkout();    try {      saveQueue.getLatest(savedRid);      message.appendEntryReply(memberId,currentTerm,savedRid.index,true,false);      leader.send(message);      latency.tail(savedRid.index);    }  finally {      message.release();    }  }}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(Doc.NO_CURRENCY);  MMatchInv matchInv=(MMatchInv)getPO();  setDateDoc(matchInv.getDateTrx());  setQty(matchInv.getQty());  int C_InvoiceLine_ID=matchInv.getC_InvoiceLine_ID();  m_invoiceLine=new MInvoiceLine(getCtx(),C_InvoiceLine_ID,getTrxName());  int C_BPartner_ID=m_invoiceLine.getParent().getC_BPartner_ID();  setC_BPartner_ID(C_BPartner_ID);  int M_InOutLine_ID=matchInv.getM_InOutLine_ID();  m_receiptLine=new MInOutLine(getCtx(),M_InOutLine_ID,getTrxName());  m_pc=new ProductCost(Env.getCtx(),getM_Product_ID(),matchInv.getM_AttributeSetInstance_ID(),getTrxName());  m_pc.setQty(getQty());  return null;}  }
class C{  protected AutoTransition_Impl(){  super();}  }
class C{  public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){  return nf.format(number * 100.0,toAppendTo,pos).append("%");}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public static void writeApplicationXml(ApplicationXml appXml,File file,String encoding,boolean isIndent) throws IOException {  OutputStream out=null;  try {    out=new FileOutputStream(file);    writeApplicationXml(appXml,out,encoding,isIndent);  }  finally {    if (out != null) {      try {        out.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  private void createComment(String path,int lineNumber){  Shell activeShell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();  EditCommentDialog dialog=new EditCommentDialog(activeShell,EditCommentDialog.Mode.NEW);  dialog.create();  if (dialog.open() == Window.OK) {    ReviewComment comment=new ReviewComment();    comment.setDescription(dialog.getComment());    comment.setResolved(dialog.getResolved());    ReviewCommentLocation location=new ReviewCommentLocation();    location.setCommit(AppraiseUiPlugin.getDefault().getCurrentCommit());    if (path != null && !path.isEmpty()) {      location.setPath(path);    }    if (lineNumber > 0) {      ReviewCommentLocationRange range=new ReviewCommentLocationRange();      range.setStartLine(lineNumber);      location.setRange(range);    }    comment.setLocation(location);    AppraiseUiPlugin.getDefault().writeCommentForActiveTask(comment);  }}  }
class C{  public ExecuteAction(final ConfAction params){  super(params);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.522 -0500",hash_original_method="7FD66A68FF224A3837669EDD9AB43DAE",hash_generated_method="34E928B984490C5205728B0498CEFEA8") public void removePort(){  port=-1;}  }
class C{  private void abort(Throwable t){  throwable=t;}  }
class C{  public void fromArray(int[] permutation){  if (!isPermutation(permutation)) {    throw new IllegalArgumentException("invalid permutation");  }  if (this.permutation.length != permutation.length) {    throw new IllegalArgumentException("invalid permutation length");  }  this.permutation=permutation.clone();}  }
class C{  public final void tunnelProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No proxy tunnel without proxy.");  }  HttpHost[] proxies=new HttpHost[this.proxyChain.length + 1];  System.arraycopy(this.proxyChain,0,proxies,0,this.proxyChain.length);  proxies[proxies.length - 1]=proxy;  this.proxyChain=proxies;  this.secure=secure;}  }
class C{  public static <T extends Object>T[] newArray(T[] reference,int length){  return Platform.newArray(reference,length);}  }
class C{  public boolean contains(String key){  return get(key) != null;}  }
class C{  public BlockVirtualPoolRestRep assignStoragePools(URI id,VirtualPoolPoolUpdateParam input){  return client.put(BlockVirtualPoolRestRep.class,input,getIdUrl() + "/assign-matched-pools",id);}  }
class C{  private void checkAWTPermission(){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new AWTPermission("showWindowWithoutWarningBanner"));  }}  }
class C{  private boolean resourceIsGwtXmlAndInGwt(IResource resource) throws CoreException {  return GWTNature.isGWTProject(resource.getProject()) && resource.getName().endsWith(".gwt.xml");}  }
class C{  public int length(){  return array.length;}  }
class C{  boolean isValidLabel(String label){  final int length=label.length();  for (int i=0; i < length; ) {    int codepoint=label.codePointAt(i);    if (!validCodepoints.contains(codepoint)) {      return false;    }    i+=Character.charCount(codepoint);  }  return !(languageValidator.isPresent() && !languageValidator.get().isValidLabelForLanguage(label));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void TestIsValid() throws Exception {  FileDescriptor fd=null;  RandomAccessFile raf=null;  FileOutputStream fos=null;  FileInputStream fis=null;  FileChannel fc=null;  File test1=new File("test1");  try {    raf=new RandomAccessFile(test1,"rw");    fd=raf.getFD();    fos=new FileOutputStream(fd);    fis=new FileInputStream(fd);  }  finally {    try {      if (fis != null)       fis.close();      if (fd.valid()) {        throw new RuntimeException("[FIS close()] FileDescriptor shouldn't be valid");      }      if (fos != null)       fos.close();      if (raf != null)       raf.close();    }  finally {      test1.delete();    }  }  File test2=new File("test2");  try {    raf=new RandomAccessFile(test2,"rw");    fd=raf.getFD();    fos=new FileOutputStream(fd);    fis=new FileInputStream(fd);  }  finally {    try {      if (raf != null)       raf.close();      if (fd.valid()) {        throw new RuntimeException("[RAF close()] FileDescriptor shouldn't be valid");      }      if (fos != null)       fos.close();      if (fis != null)       fis.close();    }  finally {      test2.delete();    }  }  File test3=new File("test3");  try {    raf=new RandomAccessFile(test3,"rw");    fd=raf.getFD();    fos=new FileOutputStream(fd);    fis=new FileInputStream(fd);  }  finally {    try {      if (fos != null)       fos.close();      if (fd.valid()) {        throw new RuntimeException("[FOS close()] FileDescriptor shouldn't be valid");      }      if (raf != null)       raf.close();      if (fis != null)       fis.close();    }  finally {      test3.delete();    }  }}  }
class C{  public void addGroup(Group group){  group.setParent(this);  groups.put(group.getId(),group);}  }
class C{  public static TemporalExpression makeTemporalExpression(Delegator delegator,GenericValue exprValue) throws GenericEntityException {  String tempExprId=exprValue.getString("tempExprId");  String tempExprTypeId=exprValue.getString("tempExprTypeId");  if (DateRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DateRange(exprValue.getTimestamp("date1"),exprValue.getTimestamp("date2")));  } else   if (DayInMonth.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayInMonth(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (DayOfMonthRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayOfMonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (DayOfWeekRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.DayOfWeekRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Difference.equals(tempExprTypeId)) {    List<GenericValue> childExpressions=EntityQuery.use(delegator).from("TemporalExpressionAssoc").where("fromTempExprId",tempExprId).cache(true).queryList();    GenericValue inclAssoc=null;    GenericValue exclAssoc=null;    for (    GenericValue childExpression : childExpressions) {      if ("INCLUDE".equals(childExpression.get("exprAssocType"))) {        inclAssoc=childExpression;      } else       if ("EXCLUDE".equals(childExpression.get("exprAssocType"))) {        exclAssoc=childExpression;      }    }    if (inclAssoc != null && exclAssoc != null) {      return setExpressionId(exprValue,new TemporalExpressions.Difference(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId"))));    }  } else   if (Frequency.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Frequency(exprValue.getTimestamp("date1"),exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (HourRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.HourRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Intersection.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Intersection(getChildExpressions(delegator,tempExprId)));  } else   if (MinuteRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.MinuteRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (MonthRange.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.MonthRange(exprValue.getLong("integer1").intValue(),exprValue.getLong("integer2").intValue()));  } else   if (Substitution.equals(tempExprTypeId)) {    List<GenericValue> childExpressions=EntityQuery.use(delegator).from("TemporalExpressionAssoc").where("fromTempExprId",tempExprId).cache(true).queryList();    GenericValue inclAssoc=null;    GenericValue exclAssoc=null;    GenericValue substAssoc=null;    for (    GenericValue childExpression : childExpressions) {      if ("INCLUDE".equals(childExpression.get("exprAssocType"))) {        inclAssoc=childExpression;      } else       if ("EXCLUDE".equals(childExpression.get("exprAssocType"))) {        exclAssoc=childExpression;      } else       if ("SUBSTITUTION".equals(childExpression.get("exprAssocType"))) {        substAssoc=childExpression;      }    }    if (inclAssoc != null && exclAssoc != null && substAssoc != null) {      return setExpressionId(exprValue,new TemporalExpressions.Substitution(getTemporalExpression(delegator,inclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,exclAssoc.getString("toTempExprId")),getTemporalExpression(delegator,substAssoc.getString("toTempExprId"))));    }  } else   if (Union.equals(tempExprTypeId)) {    return setExpressionId(exprValue,new TemporalExpressions.Union(getChildExpressions(delegator,tempExprId)));  }  return TemporalExpressions.NullExpression;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.429 -0500",hash_original_method="651F557B6A8D0D165E9CDD4391DC0D13",hash_generated_method="F3DD0A711FEDFB8A162FBFF01A23EE08") private void onApnChanged(){  State overallState=getOverallState();  boolean isDisconnected=(overallState == State.IDLE || overallState == State.FAILED);  if (mPhone instanceof GSMPhone) {    ((GSMPhone)mPhone).updateCurrentCarrierInProvider();  }  if (DBG)   log("onApnChanged: createAllApnList and cleanUpAllConnections");  createAllApnList();  cleanUpAllConnections(!isDisconnected,Phone.REASON_APN_CHANGED);  if (isDisconnected) {    setupDataOnReadyApns(Phone.REASON_APN_CHANGED);  }}  }
class C{  public void close(){  scanner.close();}  }
class C{  public Vertex details(Vertex source,Vertex vertex){  return details(source,vertex,null);}  }
class C{  public String diff_toDelta(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      try {        text.append("+").append(URLEncoder.encode(aDiff.text,"UTF-8").replace('+',' ')).append("\t");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }    break;case DELETE:  text.append("-").append(aDiff.text.length()).append("\t");break;case EQUAL:text.append("=").append(aDiff.text.length()).append("\t");break;}}String delta=text.toString();if (delta.length() != 0) {delta=delta.substring(0,delta.length() - 1);delta=unescapeForEncodeUriCompatability(delta);}return delta;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.888 -0500",hash_original_method="ABCB940311631CB7A5E91625A11E0A13",hash_generated_method="767E8DB27721D7D4F4C0AC08DE5DD726") public void prepareToDraw(){  nativePrepareToDraw(mNativeBitmap);}  }
class C{  public void onInputEvent(InputEvent event,int nestingLevel){  if (event instanceof KeyEvent) {    final KeyEvent keyEvent=(KeyEvent)event;    onKeyEvent(keyEvent,nestingLevel);  } else {    final MotionEvent motionEvent=(MotionEvent)event;    if (motionEvent.isTouchEvent()) {      onTouchEvent(motionEvent,nestingLevel);    } else     if ((motionEvent.getSource() & InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {      onTrackballEvent(motionEvent,nestingLevel);    } else {      onGenericMotionEvent(motionEvent,nestingLevel);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,75,-89,-45,-2,-3,-18,-36,-17,-10,-3,-6,-7,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public ActionForward loginSuccess(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ActionForward fwd=init(mapping,form,request,response);  if (fwd != null)   return fwd;  return mapping.findForward(LOGIN_SUCCESS);}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public Stoppable scheduleImmediateRepeat(boolean immediatelyAfter,Steppable event){  return _scheduleImmediateRepeat(immediatelyAfter,event);}  }
class C{  public static IPRange AClassLocalIPRange(){  return new IPRange(new IP(0x0A000000),new IP(0x0AFFFFFF));}  }
class C{  public static final String userAgentLanguageDetection(String userAgent){  if (userAgent == null || userAgent.length() < 2)   return null;  userAgent=userAgent.toLowerCase();  if (mapping.containsKey(userAgent.substring(0,2)))   return userAgent.substring(0,2);  if (userAgent.length() == 2 && mapping.containsKey(userAgent))   return userAgent;  if (userAgent.length() == 5 && mapping.containsKey(userAgent.substring(0,2)))   return userAgent.substring(0,2);  int p=2;  while (p < userAgent.length() - 1 && (p=userAgent.indexOf('-',p)) > 2) {    if (userAgent.charAt(p - 3) == ' ' && mapping.containsKey(userAgent.substring(p - 2,p)))     return userAgent.substring(p - 2,p);    p++;  }  p=1;  while (p < userAgent.length() - 1 && (p=userAgent.indexOf(';',p)) > 2) {    if (userAgent.charAt(p - 3) == ' ' && mapping.containsKey(userAgent.substring(p - 2,p)))     return userAgent.substring(p - 2,p);    p++;  }  return null;}  }
class C{  public void addRootDocument(String name,String fileExt,String pathDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,FolderBaseDefs.CLF_ROOT_ID,fileExt,sortOrder,pathDocumentFile,null);}  }
class C{  public void internValues(Interner interner){  Map newMap=mapFactory.buildMap();  for (  Object o : map.entrySet()) {    Map.Entry entry=(Map.Entry)o;    Object key=entry.getKey();    Object value=entry.getValue();    newMap.put(key,interner.intern(value));  }  map=newMap;}  }
class C{  public SSLHandshakeException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static char readChar(int r){  if (r < 1 || r > 16)   throw new IllegalArgumentException("Illegal value of r = " + r);  if (r == 8)   return readChar();  char x=0;  for (int i=0; i < r; i++) {    x<<=1;    boolean bit=readBoolean();    if (bit)     x|=1;  }  return x;}  }
class C{  private static int unsignedArraysCompare(int[] a,int[] b,int aSize,int bSize){  if (aSize > bSize)   return 1; else   if (aSize < bSize)   return -1; else {    int i;    for (i=aSize - 1; i >= 0 && a[i] == b[i]; i--) {    }    return i < 0 ? TBigInteger.EQUALS : ((a[i] & 0xFFFFFFFFL) < (b[i] & 0xFFFFFFFFL) ? TBigInteger.LESS : TBigInteger.GREATER);  }}  }
class C{  public ClientMessage createMessage(byte[] body){  getInternalClient();  ClientMessage message=internalClient.createMessage(isUseDurableMessage());  if (body != null) {    message.writeBodyBufferBytes(body);  }  return message;}  }
class C{  @Override public void process(V tuple){  if (tuple.doubleValue() != 0.0) {    baseValue=tuple.doubleValue();  }}  }
class C{  public NewCookie(Cookie cookie,String comment,int maxAge,boolean secure,boolean httpOnly){  super(cookie == null ? null : cookie.getName(),cookie == null ? null : cookie.getValue(),cookie == null ? null : cookie.getPath(),cookie == null ? null : cookie.getDomain(),cookie == null ? Cookie.DEFAULT_VERSION : cookie.getVersion());  this.comment=comment;  this.maxAge=maxAge;  this.secure=secure;  this.httpOnly=httpOnly;}  }
class C{  public final TextBuilder append(long l){  if (l <= 0) {    if (l == 0)     return append("0");    if (l == Long.MIN_VALUE)     return append("-9223372036854775808");    append('-');    l=-l;  }  if (l <= Integer.MAX_VALUE)   return append((int)l);  append(l / 1000000000);  int i=(int)(l % 1000000000);  int digits=MathLib.digitLength(i);  append("000000000",0,9 - digits);  return append(i);}  }
class C{  public void add(int index,E element){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (index > len || index < 0)     throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);    Object[] newElements;    int numMoved=len - index;    if (numMoved == 0)     newElements=Arrays.copyOf(elements,len + 1); else {      newElements=new Object[len + 1];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index,newElements,index + 1,numMoved);    }    newElements[index]=element;    setArray(newElements);  }  finally {    lock.unlock();  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  if (mName != null && mName.length() != 0) {    sb.append(quoteNameIfNecessary(mName));    sb.append(' ');  }  if (mComment != null && mComment.length() != 0) {    sb.append('(');    sb.append(quoteComment(mComment));    sb.append(") ");  }  if (mAddress != null && mAddress.length() != 0) {    sb.append('<');    sb.append(mAddress);    sb.append('>');  }  return sb.toString();}  }
class C{  private void saveInitialChildState(FacesContext facesContext){  index=-1;  initialChildState=new ConcurrentHashMap<>();  initialClientId=getClientId(facesContext);  if (getChildCount() > 0) {    for (    UIComponent child : getChildren()) {      saveInitialChildState(facesContext,child);    }  }}  }
class C{  public static String acos(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function acos : " + params.length);  return "acos(" + params[0] + ")";}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K[] oldKeys=(K[])_set;  double[] oldVals=_values;  _set=new Object[newCapacity];  _values=new double[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != null && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[-index - 1],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength() + (getDataLength() % 4)];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  System.arraycopy(realm,0,binValue,4,getDataLength());  return binValue;}  }
class C{  @Override public IMqttToken subscribe(String topic,int qos,Object userContext,IMqttActionListener callback) throws MqttException {  IMqttToken token=new MqttTokenAndroid(this,userContext,callback,new String[]{topic});  String activityToken=storeToken(token);  mqttService.subscribe(clientHandle,topic,qos,null,activityToken);  return token;}  }
class C{  public static @Lightness int isDark(Palette palette){  Palette.Swatch mostPopulous=getMostPopulousSwatch(palette);  if (mostPopulous == null)   return LIGHTNESS_UNKNOWN;  return isDark(mostPopulous.getHsl()) ? IS_DARK : IS_LIGHT;}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void init() throws IOException {  initDictionaryChunkSize();  initPaths();  boolean dictFileExists=CarbonUtil.isFileExists(this.dictionaryFilePath);  if (dictFileExists && CarbonUtil.isFileExists(this.dictionaryMetaFilePath)) {    this.chunk_start_offset=CarbonUtil.getFileSize(this.dictionaryFilePath);    validateDictionaryFileOffsetWithLastSegmentEntryOffset();  } else   if (dictFileExists) {    FileFactory.getCarbonFile(dictionaryFilePath,FileFactory.getFileType(dictionaryFilePath)).delete();  }  openThriftWriter(this.dictionaryFilePath);  createChunkList();}  }
class C{  @Override public void install(JEditorPane editor){  super.install(editor);  editor.addKeyListener(this);}  }
class C{  public boolean isP2SHAddress(){  final NetworkParameters parameters=getParameters();  return parameters != null && this.version == parameters.p2shHeader;}  }
class C{  public void init(){  super.setTitle("Font Chooser");  TitledBorder panelBorder=new TitledBorder("Sample");  fList.setSelectionMode(0);  stList.setSelectionMode(0);  sizeList.setSelectionMode(0);  jtfTest.setHorizontalAlignment(JTextField.CENTER);  jspFont.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  jspStyle.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  jspSize.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  panel.setBorder(panelBorder);  jtfFonts.setBounds(8,5,121,20);  jspFont.setBounds(8,29,121,82);  jtfStyle.setBounds(136,5,121,20);  jspStyle.setBounds(136,29,121,82);  jtfSize.setBounds(264,5,41,20);  jspSize.setBounds(264,29,41,82);  panel.setBounds(6,121,301,67);  container.add(jlbFonts);  container.add(jtfFonts);  container.add(jspFont);  container.add(jlbStyle);  container.add(jtfStyle);  container.add(jspStyle);  container.add(jlbSize);  container.add(jtfSize);  container.add(jspSize);  container.add(panel);  jtfTest.setBounds(8,20,288,35);  panel.add(jtfTest);  container.setLayout(null);  panel.setLayout(null);  setSize(340,278);  setResizable(false);  setModal(true);  setContentPane(container);  jtfFonts.addActionListener(this);  jtfSize.addActionListener(this);  jtfStyle.addActionListener(this);  fList.addListSelectionListener(this);  stList.addListSelectionListener(this);  sizeList.addListSelectionListener(this);}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public static void showOfflineAccessMessage(View root){  if (root == null) {    logger.warn("cannot show message, no views available");    return;  }  try {    ViewAnimationUtil.showMessageBar(root.findViewById(R.id.offline_access_panel));  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  this.meta=((SortKeyStepMeta)smi);  this.data=((SortKeyStepData)sdi);  this.sortDataRows=null;  super.dispose(smi,sdi);  this.meta=null;  this.data=null;}  }
class C{  public void reset(){  lastLine=null;}  }
class C{  public static boolean intersectRayTriangle(Vector3 rayStart,Vector3 rayEnd,Vector3 t1,Vector3 t2,Vector3 t3,Vector3 hitPoint){  Vector3 rayDir=Vector3.subtractAndCreate(rayEnd,rayStart);  rayDir.normalize();  p.set(t1,t2,t3);  if (!intersectRayPlane(rayStart,rayEnd,p,i))   return false;  v0.subtractAndSet(t3,t1);  v1.subtractAndSet(t2,t1);  v2.subtractAndSet(i,t1);  double dot00=v0.dot(v0);  double dot01=v0.dot(v1);  double dot02=v0.dot(v2);  double dot11=v1.dot(v1);  double dot12=v1.dot(v2);  double denom=dot00 * dot11 - dot01 * dot01;  if (denom == 0)   return false;  double u=(dot11 * dot02 - dot01 * dot12) / denom;  double v=(dot00 * dot12 - dot01 * dot02) / denom;  if (u >= 0 && v >= 0 && u + v <= 1) {    if (hitPoint != null)     hitPoint.setAll(i);    return true;  } else   return false;}  }
class C{  public SchemaImpl createSchema(String targetNamespace,Locator location,boolean elementFormDefault,boolean attributeFormDefault){  SchemaImpl obj=(SchemaImpl)schemas.get(targetNamespace);  if (obj == null) {    obj=new SchemaImpl(this,location,targetNamespace,elementFormDefault,attributeFormDefault);    schemas.put(targetNamespace,obj);    schemas2.add(obj);  }  return obj;}  }
class C{  public XmlEntity(final String parentType,final String parentKey,final String parentValue,final String childType,final String childKey,final String childValue){  this.parentType=parentType;  this.type=childType;  StringBuffer sb=new StringBuffer();  sb.append("//").append(prefix).append(':').append(parentType);  if (!StringUtils.isBlank(parentKey) && !StringUtils.isBlank(parentValue)) {    sb.append("[@").append(parentKey).append("='").append(parentValue).append("']");  }  sb.append("/").append(prefix).append(':').append(childType);  if (!StringUtils.isBlank(childKey) && !StringUtils.isBlank(childValue)) {    sb.append("[@").append(childKey).append("='").append(childValue).append("']");  }  this.searchString=sb.toString();}  }
class C{  public Object nextValue() throws JSONException {  char c=this.nextClean();  String string;switch (c) {case '"':case '\'':    return this.nextString(c);case '{':  this.back();return new org.json.JSONObject(this);case '[':this.back();return new org.json.JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=this.next();}this.back();string=sb.toString().trim();if ("".equals(string)) {throw this.syntaxError("Missing value");}return JSONObject.stringToValue(string);}  }
class C{  public java_cup.runtime.token scan() throws java.lang.Exception {  return scanner.next_token();}  }
class C{  public static int intersectLine(double x1,double y1,double x2,double y2,double rx1,double ry1,double rx2,double ry2){  if ((rx2 < x1 && rx2 < x2) || (rx1 > x1 && rx1 > x2) || (ry1 > y1 && ry1 > y2)) {    return 0;  }  if (ry2 < y1 && ry2 < y2) {  } else {    if (x1 == x2) {      return CROSSING;    }    double bx1, bx2;    if (x1 < x2) {      bx1=x1 < rx1 ? rx1 : x1;      bx2=x2 < rx2 ? x2 : rx2;    } else {      bx1=x2 < rx1 ? rx1 : x2;      bx2=x1 < rx2 ? x1 : rx2;    }    double k=(y2 - y1) / (x2 - x1);    double by1=k * (bx1 - x1) + y1;    double by2=k * (bx2 - x1) + y1;    if (by1 < ry1 && by2 < ry1) {      return 0;    }    if (by1 > ry2 && by2 > ry2) {    } else {      return CROSSING;    }  }  if (x1 == x2) {    return 0;  }  if (rx1 == x1) {    return x1 < x2 ? 0 : -1;  }  if (rx1 == x2) {    return x1 < x2 ? 1 : 0;  }  if (x1 < x2) {    return x1 < rx1 && rx1 < x2 ? 1 : 0;  }  return x2 < rx1 && rx1 < x1 ? -1 : 0;}  }
class C{  public static void fixAspectRatio(RectF r,float w,float h){  float scale=Math.min(r.width() / w,r.height() / h);  float centX=r.centerX();  float centY=r.centerY();  float hw=scale * w / 2;  float hh=scale * h / 2;  r.set(centX - hw,centY - hh,centX + hw,centY + hh);}  }
class C{  public static Script createInputScript(@Nullable TransactionSignature signature){  byte[] sigBytes=signature != null ? signature.encodeToBitcoin() : new byte[]{};  return new ScriptBuilder().data(sigBytes).build();}  }
class C{  public Select<T> whereEquals(String column,Object value){  addClause(new DataFilterCriterion(column,DataFilterCriterion.DataFilterOperator.EQUAL,value),DataFilterConjunction.AND);  return this;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.createPopup("Test - Post - Not Implemented");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public PolicyConstraints(int requireExplicitPolicy,int inhibitPolicyMapping){  this.requireExplicitPolicy=requireExplicitPolicy;  this.inhibitPolicyMapping=inhibitPolicyMapping;}  }
class C{  private static String normalizePath(String path){  assert path != null;  String normalizedPath=GridFilenameUtils.normalizeNoEndSeparator(path,true);  if (F.isEmpty(normalizedPath))   throw new IllegalArgumentException("Failed to normalize path: " + path);  if (!SLASH.equals(GridFilenameUtils.getPrefix(normalizedPath)))   throw new IllegalArgumentException("Path should be absolute: " + path);  assert !normalizedPath.isEmpty() : "Expects normalized path is not empty.";  assert normalizedPath.length() == 1 || !normalizedPath.endsWith(SLASH) : "Expects normalized path is root or don't ends with '/' symbol.";  return normalizedPath;}  }
class C{  void cancelEvent(){  notify.set(false);}  }
class C{  public static void createOverviews(ASDocConfiguration config) throws CompilerException {  String templatesPath=config.getTemplatesPath();  String ditaPath=config.getOutput() + "tempdita" + File.separator;  BufferedWriter writer=null;  Reader reader=null;  try {    writer=new BufferedWriter(new FileWriter(ditaPath + "overviews.xml"));    if (config.getPackageDescriptionFile() != null) {      reader=new BufferedReader(new FileReader(config.getPackageDescriptionFile()));    } else {      reader=new BufferedReader(new FileReader(templatesPath + "Overviews_Base.xml"));    }    OverviewsHandler h=new OverviewsHandler(writer,config);    InputSource source=new InputSource(reader);    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(source,h);  } catch (  Exception e) {    if (Trace.error)     e.printStackTrace();    CompilerMessage c=new CouldNotCreate("overviews.xml",e.getMessage());    ThreadLocalToolkit.log(c);    throw c;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException ioe) {      }    }    if (reader != null) {      try {        reader.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public String toString(){  return "[" + this.getType() + ", "+ this.getPath()+ "]";}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public static org.oscm.internal.vo.VOUserDetails convertToUp(org.oscm.vo.VOUserDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUserDetails newVO=new org.oscm.internal.vo.VOUserDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEMail(oldVO.getEMail());  newVO.setFirstName(oldVO.getFirstName());  newVO.setAdditionalName(oldVO.getAdditionalName());  newVO.setLastName(oldVO.getLastName());  newVO.setAddress(oldVO.getAddress());  newVO.setPhone(oldVO.getPhone());  newVO.setLocale(oldVO.getLocale());  newVO.setSalutation(EnumConverter.convert(oldVO.getSalutation(),org.oscm.internal.types.enumtypes.Salutation.class));  newVO.setRealmUserId(oldVO.getRealmUserId());  newVO.setRemoteLdapActive(oldVO.isRemoteLdapActive());  newVO.setRemoteLdapAttributes(EnumConverter.convertList(oldVO.getRemoteLdapAttributes(),org.oscm.internal.types.enumtypes.SettingType.class));  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setUserId(oldVO.getUserId());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.UserAccountStatus.class));  newVO.setOrganizationRoles(EnumConverter.convertSet(oldVO.getOrganizationRoles(),org.oscm.internal.types.enumtypes.OrganizationRoleType.class));  newVO.setUserRoles(EnumConverter.convertSet(oldVO.getUserRoles(),org.oscm.internal.types.enumtypes.UserRoleType.class));  return newVO;}  }
class C{  public static Document createXMLValidationList(ValidationResults results,int initRow,Locale locale,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_TYPETRANSPORT),"","",fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  ScrTt scr=null;  ScrTteu scr1=null;  ScrTtgl scr2=null;  ScrTtct scr3=null;  Object scrAux=null;  if (results.getResults().isEmpty()) {    addNode(Integer.MIN_VALUE,"","","",null,"",Integer.MIN_VALUE,"",nodeList,"");  } else {    for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {      scrAux=it.next();      if (scrAux instanceof ScrTt) {        scr=(ScrTt)scrAux;        addNode(scr.getId().intValue(),scr.getTransport(),scr.getTransport(),"",null,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrAux instanceof ScrTteu) {        scr1=(ScrTteu)scrAux;        addNode(scr1.getId().intValue(),scr1.getTransport(),scr1.getTransport(),"",null,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrAux instanceof ScrTtgl) {        scr2=(ScrTtgl)scrAux;        addNode(scr2.getId().intValue(),scr2.getTransport(),scr2.getTransport(),"",null,"",Integer.MIN_VALUE,"",nodeList,"");      } else       if (scrAux instanceof ScrTtct) {        scr3=(ScrTtct)scrAux;        addNode(scr3.getId().intValue(),scr3.getTransport(),scr3.getTransport(),"",null,"",Integer.MIN_VALUE,"",nodeList,"");      }    }  }  return doc;}  }
class C{  public void addDataStoreListener(DataStoreListener l){  for (int i=0; i < listenerList.size(); i++) {    if (listenerList.get(i) == l) {      return;    }  }  listenerList.add(l);}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public void tryToDeleteVideoSharing(String sharingId){  mVideoSharingDeleteOperationHandler.post(new VideoSharingDeleteTask(mVideoSharingService,this,mLocalContentResolver,sharingId));}  }
class C{  static ImageIcon iconFor(String name){  return new ImageIcon(Console.class.getResource(name));}  }
class C{  public TechnicalServiceActiveException(Object[] params){  super(params);}  }
class C{  public final boolean isSystem(JIPFunctor funct){  return m_globalDB.isSystem((Functor)funct.getRealTerm());}  }
class C{  private void goToInfo(Offer selectedOffer,Context offerContext){  String offerTitle=selectedOffer.getTitle();  String termsCond=selectedOffer.getTermsConditions();  Intent intent=new Intent(offerContext,TermsConditionsActivity.class);  intent.putExtra(TermsConditionsActivity.OFFER_TITLE,offerTitle);  intent.putExtra(TermsConditionsActivity.OFFER_TERMS_CONDITIONS,termsCond);  offerContext.startActivity(intent);}  }
class C{  public void addDefaultKeyBindings(){  addKeyBinding("BACK_SPACE",BACKSPACE);  addKeyBinding("C+BACK_SPACE",BACKSPACE_WORD);  addKeyBinding("DELETE",DELETE);  addKeyBinding("C+DELETE",DELETE_WORD);  addKeyBinding("ENTER",INSERT_BREAK);  addKeyBinding("TAB",INSERT_TAB);  addKeyBinding("INSERT",OVERWRITE);  addKeyBinding("C+\\",TOGGLE_RECT);  addKeyBinding("HOME",HOME);  addKeyBinding("END",END);  addKeyBinding("S+HOME",SELECT_HOME);  addKeyBinding("S+END",SELECT_END);  addKeyBinding("C+HOME",DOCUMENT_HOME);  addKeyBinding("C+END",DOCUMENT_END);  addKeyBinding("CS+HOME",SELECT_DOC_HOME);  addKeyBinding("CS+END",SELECT_DOC_END);  addKeyBinding("PAGE_UP",PREV_PAGE);  addKeyBinding("PAGE_DOWN",NEXT_PAGE);  addKeyBinding("S+PAGE_UP",SELECT_PREV_PAGE);  addKeyBinding("S+PAGE_DOWN",SELECT_NEXT_PAGE);  addKeyBinding("LEFT",PREV_CHAR);  addKeyBinding("S+LEFT",SELECT_PREV_CHAR);  addKeyBinding("C+LEFT",PREV_WORD);  addKeyBinding("CS+LEFT",SELECT_PREV_WORD);  addKeyBinding("RIGHT",NEXT_CHAR);  addKeyBinding("S+RIGHT",SELECT_NEXT_CHAR);  addKeyBinding("C+RIGHT",NEXT_WORD);  addKeyBinding("CS+RIGHT",SELECT_NEXT_WORD);  addKeyBinding("UP",PREV_LINE);  addKeyBinding("S+UP",SELECT_PREV_LINE);  addKeyBinding("DOWN",NEXT_LINE);  addKeyBinding("S+DOWN",SELECT_NEXT_LINE);  addKeyBinding("C+ENTER",REPEAT);}  }
class C{  public void logout() throws IOException {  String requestUrl=RESOURCE + "/logout";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.GET,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public void removeAll(@Nonnull final String username){  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  final Location location=new Location(NAMESPACE,username);  final DeleteValue deleteValue=new DeleteValue.Builder(location).build();  LOGGER.debug("Deleting key (async): {}",location);  try (Timer.Context context=deleteTimer.time()){    client.executeAsync(deleteValue);  }   cursors.delete(username,CURSOR_NAME);}  }
class C{  protected final int MaskEnd(int integer){  int value;  for (value=31; (integer & 0x1) == 0; integer=integer >>> 1, value--)   ;  return value;}  }
class C{  private void saveNow(){  WalletFiles files=vFileManager;  if (files != null) {    try {      files.saveNow();    } catch (    IOException e) {      log.error("Failed to save wallet to disk!",e);      Thread.UncaughtExceptionHandler handler=Threading.uncaughtExceptionHandler;      if (handler != null)       handler.uncaughtException(Thread.currentThread(),e);    }  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.fixupVariables(vnames,cstate.getGlobalsSize());    }  }}  }
class C{  protected FilterInputStream(InputStream in){  this.in=in;}  }
class C{  public static KNNHeap newHeap(int k){  return DBIDFactory.FACTORY.newHeap(k);}  }
class C{  @SideOnly(Side.CLIENT) public static int renderTooltip(int x,int y,List<String> tooltipData,int color,int color2){  boolean lighting=GL11.glGetBoolean(GL11.GL_LIGHTING);  if (lighting)   RenderHelper.disableStandardItemLighting();  if (!tooltipData.isEmpty()) {    int var5=0;    int var6;    int var7;    FontRenderer fontRenderer=Minecraft.getMinecraft().fontRendererObj;    for (var6=0; var6 < tooltipData.size(); ++var6) {      var7=fontRenderer.getStringWidth(tooltipData.get(var6));      if (var7 > var5)       var5=var7;    }    var6=x + 12;    var7=y - 12;    int var9=8;    if (tooltipData.size() > 1)     var9+=2 + (tooltipData.size() - 1) * 10;    float z=300F;    drawGradientRect(var6 - 3,var7 - 4,z,var6 + var5 + 3,var7 - 3,color2,color2);    drawGradientRect(var6 - 3,var7 + var9 + 3,z,var6 + var5 + 3,var7 + var9 + 4,color2,color2);    drawGradientRect(var6 - 3,var7 - 3,z,var6 + var5 + 3,var7 + var9 + 3,color2,color2);    drawGradientRect(var6 - 4,var7 - 3,z,var6 - 3,var7 + var9 + 3,color2,color2);    drawGradientRect(var6 + var5 + 3,var7 - 3,z,var6 + var5 + 4,var7 + var9 + 3,color2,color2);    int var12=(color & 0xFFFFFF) >> 1 | color & -16777216;    drawGradientRect(var6 - 3,var7 - 3 + 1,z,var6 - 3 + 1,var7 + var9 + 3 - 1,color,var12);    drawGradientRect(var6 + var5 + 2,var7 - 3 + 1,z,var6 + var5 + 3,var7 + var9 + 3 - 1,color,var12);    drawGradientRect(var6 - 3,var7 - 3,z,var6 + var5 + 3,var7 - 3 + 1,color,color);    drawGradientRect(var6 - 3,var7 + var9 + 2,z,var6 + var5 + 3,var7 + var9 + 3,var12,var12);    GlStateManager.disableDepth();    for (int var13=0; var13 < tooltipData.size(); ++var13) {      String var14=tooltipData.get(var13);      fontRenderer.drawStringWithShadow(var14,var6,var7,-1);      if (var13 == 0)       var7+=2;      var7+=10;    }    GlStateManager.enableDepth();    return var7 + 12;  }  if (!lighting)   RenderHelper.disableStandardItemLighting();  GlStateManager.color(1F,1F,1F,1F);  return 0;}  }
class C{  public static MatrixBlock convertToMatrixBlock(HashMap<MatrixIndexes,Double> map,int rlen,int clen){  int nnz=map.size();  boolean sparse=MatrixBlock.evalSparseFormatInMemory(rlen,clen,nnz);  MatrixBlock mb=new MatrixBlock(rlen,clen,sparse,nnz);  if (sparse) {    for (    Entry<MatrixIndexes,Double> e : map.entrySet()) {      MatrixIndexes index=e.getKey();      double value=e.getValue();      int rix=(int)index.getRowIndex();      int cix=(int)index.getColumnIndex();      if (value != 0 && rix <= rlen && cix <= clen)       mb.appendValue(rix - 1,cix - 1,value);    }    mb.sortSparseRows();  } else {    for (    Entry<MatrixIndexes,Double> e : map.entrySet()) {      MatrixIndexes index=e.getKey();      double value=e.getValue();      int rix=(int)index.getRowIndex();      int cix=(int)index.getColumnIndex();      if (value != 0 && rix <= rlen && cix <= clen)       mb.quickSetValue(rix - 1,cix - 1,value);    }  }  return mb;}  }
class C{  public Builder timeout(Long timeoutMs){  this.timeout=timeoutMs;  return this;}  }
class C{  private String format(long info){  long infoK=info / 1024;  if (infoK == 0)   return String.valueOf(info);  long infoM=infoK / 1024;  if (infoM == 0)   return s_format.format(info);  return s_format.format(infoK) + "k";}  }
class C{  private DistributedOwnerLockData loadLockData(String lockName){  String path=getLockDataPath(lockName);  try {    if (dataManager.checkExists(path) == null) {      return null;    }    DistributedOwnerLockData data=(DistributedOwnerLockData)dataManager.getData(path,false);    return data;  } catch (  Exception ex) {    log.error("Exception loading LockData: " + path,ex);    return null;  }}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public DataElementFactory(Object o){  template=o;}  }
class C{  public int size(){  return hashIndexSetProperties.size;}  }
class C{  @Override final public int hashCode(){  return super.hashCode();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoLdapUserPermsRecA[");  buffer.append("m_userId = ").append(m_userId);  buffer.append(", m_prodId = ").append(m_prodId);  buffer.append(", m_type = ").append(m_type);  buffer.append("]");  return buffer.toString();}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  protected String toString(int level,Tree parent){  try {    StringBuffer text=new StringBuffer();    if (m_Attribute == -1) {      return leafString(parent);    } else     if (m_Info.attribute(m_Attribute).isNominal()) {      for (int i=0; i < m_Successors.length; i++) {        text.append("\n");        for (int j=0; j < level; j++) {          text.append("|   ");        }        text.append(m_Info.attribute(m_Attribute).name() + " = " + m_Info.attribute(m_Attribute).value(i));        text.append(m_Successors[i].toString(level + 1,this));      }    } else {      text.append("\n");      for (int j=0; j < level; j++) {        text.append("|   ");      }      text.append(m_Info.attribute(m_Attribute).name() + " < " + Utils.doubleToString(m_SplitPoint,2));      text.append(m_Successors[0].toString(level + 1,this));      text.append("\n");      for (int j=0; j < level; j++) {        text.append("|   ");      }      text.append(m_Info.attribute(m_Attribute).name() + " >= " + Utils.doubleToString(m_SplitPoint,2));      text.append(m_Successors[1].toString(level + 1,this));    }    return text.toString();  } catch (  Exception e) {    e.printStackTrace();    return "Decision tree: tree can't be printed";  }}  }
class C{  public void deleteTrainInfoFile(String name){  File f=new File(fileLocation + name);  if (!f.delete()) {    log.error("failed to delete TrainInfo file - " + name);  }}  }
class C{  public static Weeks standardWeeksIn(ReadablePeriod period){  int amount=BaseSingleFieldPeriod.standardPeriodIn(period,DateTimeConstants.MILLIS_PER_WEEK);  return Weeks.weeks(amount);}  }
class C{  private static GroupWhiteList createGroupWhiteList(final AuthnProvider authenticationConfiguration){  GroupWhiteList whiteList=new GroupWhiteList();  whiteList.setType(authenticationConfiguration.getGroupAttribute() == null ? CN : authenticationConfiguration.getGroupAttribute());  whiteList.setValues(authenticationConfiguration.getGroupWhitelistValues() != null ? authenticationConfiguration.getGroupWhitelistValues().toArray(new String[authenticationConfiguration.getGroupWhitelistValues().size()]) : new String[0]);  return whiteList;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 1) {    System.err.println(String.format("Usage: %s <project-name>",ListLogs.class.getSimpleName()));    return;  }  String projectId=args[0];  Logging service=getLoggingService();  listLogs(service,projectId);}  }
class C{  private FDBigInteger mult(int i){  if (this.nWords == 0) {    return this;  }  int[] r=new int[nWords + 1];  mult(data,nWords,i,r);  return new FDBigInteger(r,offset);}  }
class C{  @Override public boolean last() throws SQLException {  try {    debugCodeCall("last");    checkClosed();    return absolute(-1);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void registerReceiver(){  if (mRegisteredTimeZoneReceiver) {    return;  }  mRegisteredTimeZoneReceiver=true;  IntentFilter filter=new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED);  BReelWatchFaceService.this.registerReceiver(mTimeZoneReceiver,filter);}  }
class C{  public void addParameter(String name,String value){  parameters.put(name,value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.569 -0500",hash_original_method="9D88E0551A3FF4A21A3E39810268F7E4",hash_generated_method="A165D91B4AEB54800A42FB79DF93E3BE") protected boolean filterHeader(int index){  return (this.headerName == null) || this.headerName.equalsIgnoreCase(this.allHeaders[index].getName());}  }
class C{  public ReactionPropertyItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void attemptRegister(){  if (mAuthTask != null) {    return;  }  mUsernameView.setError(null);  mEmailView.setError(null);  mPasswordView.setError(null);  mVerificationCodeView.setError(null);  String username=mUsernameView.getText().toString();  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  String verification_code=mVerificationCodeView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (TextUtils.isEmpty(verification_code)) {    mVerificationCodeView.setError(getString(R.string.error_field_required));    focusView=mVerificationCodeView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserRegisterTask(username,email,password,verification_code);    mAuthTask.execute((Void)null);  }}  }
class C{  public void startProfiling(){  if (mThread.isProfiling()) {    File file=new File(mThread.getProfileFilePath());    file.getParentFile().mkdirs();    Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);  }}  }
class C{  public synchronized void addDenseVector(DenseVector dv,float alpha){  if (this.isExtendable())   this.expandFor(dv.getLength());  int n=dv.getLength();  for (int i=0; i < n; i++) {    u[i]+=alpha * dv.u[i];  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_STRICTNESS_1__STRICTNESS_LEVEL_1:    return getStrictnessLevel_1();case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_1:  return getMessage_1();case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_NUMBER_1:return getMessageNumber_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void saveField(DateTimeFieldType fieldType,int value){  saveField(new SavedField(fieldType.getField(iChrono),value));}  }
class C{  public GetContentStructureOperation(){  this.parentElement=null;}  }
class C{  public static boolean filesIdentical(String newFileName,String oldFileName,List oldLinesToIgnore) throws IOException {  boolean same=true;  File newFile=new File(newFileName);  File oldFile=new File(oldFileName);  FileReader newFileReader=new FileReader(newFile);  FileReader oldFileReader=new FileReader(oldFile);  LineNumberReader newReader=new LineNumberReader(newFileReader);  LineNumberReader oldReader=new LineNumberReader(oldFileReader);  String newLine, oldLine;  newLine=newReader.readLine().trim();  oldLine=oldReader.readLine().trim();  if (((null == newLine) && (null != oldLine)) || ((null != newLine) && (null == oldLine))) {    System.out.println("1OLD=" + oldLine);    System.out.println("1NEW=" + newLine);    same=false;  }  while (null != newLine && null != oldLine) {    if (!newLine.equals(oldLine)) {      if (oldLine.contains("javax.faces.Token")) {        break;      }      if (null != oldLinesToIgnore && oldLinesToIgnore.size() > 0) {        Iterator ignoreLines=oldLinesToIgnore.iterator();        boolean foundMatch=false;        while (ignoreLines.hasNext()) {          String newTrim=((String)ignoreLines.next()).trim();          if (oldLine.equals(newTrim)) {            foundMatch=true;            break;          }        }        if (!foundMatch) {          System.out.println("2OLD=" + oldLine);          System.out.println("2NEW=" + newLine);          same=false;          break;        }      } else {        newLine=stripJsessionidFromLine(newLine);        oldLine=stripJsessionidFromLine(oldLine);        if (!newLine.equals(oldLine)) {          System.out.println("3OLD=" + oldLine);          System.out.println("3NEW=" + newLine);          same=false;          break;        }      }    }    newLine=newReader.readLine();    oldLine=oldReader.readLine();    if (((null == newLine) && (null != oldLine)) || ((null != newLine) && (null == oldLine))) {      System.out.println("4OLD=" + oldLine);      System.out.println("4NEW=" + newLine);      same=false;      break;    }    if (null != newLine) {      newLine=newLine.trim();    }    if (null != oldLine) {      oldLine=oldLine.trim();    }  }  newReader.close();  oldReader.close();  if (same == true) {    return true;  }  return false;}  }
class C{  protected Dimension calcScrollSize(){  return calcPreferredSize();}  }
class C{  public boolean isWhitelistEnabled(){  return whitelistEnabled;}  }
class C{  public static XMLTreeLocation beforeAnyOf(String... names){  if (names.length == 0) {    throw new IllegalArgumentException("Required not empty elements names");  }  return disjunctionChain(LocationType.BEFORE,names);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.886 -0400",hash_original_method="0AA1F6914629AC76DD489D600EF77E58",hash_generated_method="0AA1F6914629AC76DD489D600EF77E58") void handleCharset(ParsedDirective pd) throws SaslException {  if (null != m_characterSet)   throw new SaslException("Too many charset directives.");  m_characterSet=pd.getValue();  if (!m_characterSet.equals("utf-8"))   throw new SaslException("Invalid character encoding directive");}  }
class C{  public boolean isEmpty(){  return !advanceToEligibleSample();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:05.001 -0500",hash_original_method="3F84D57F957CA4DCEBAF95364A0886D3",hash_generated_method="0E8AC2BD0EC1AA0C121FCD5C79498A68") @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_part[0]=type;    mac_material_part[1]=(byte)((0x00FF00 & len) >> 8);    mac_material_part[2]=(byte)(0x0000FF & len);    messageDigest.update(mac_write_secret);    messageDigest.update(pad_1);    messageDigest.update(write_seq_num);    messageDigest.update(mac_material_part);    messageDigest.update(fragment,offset,len);    byte[] digest=messageDigest.digest();    messageDigest.update(mac_write_secret);    messageDigest.update(pad_2);    messageDigest.update(digest);    digest=messageDigest.digest();    System.arraycopy(digest,0,res,len,hash_size);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.encrypt: " + (block_size != 0 ? "GenericBlockCipher with padding[" + padding_length + "]:" : "GenericStreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {  addAttribute(qName,value);}  }
class C{  public AnnotationTypeMismatchException(Method element,String foundType){  super("The annotation element " + element + " doesn't match the type "+ foundType);  this.element=element;  this.foundType=foundType;}  }
class C{  StringSetting(Properties defaultProps,Properties props,String key,String defaultStr){  super(defaultProps,props,key,defaultStr);}  }
class C{  public DetailedEvaluator(){  super();}  }
class C{  public static Result restFlowMetricsGraphData(String flowDefId){  JsonArray datasets=new JsonArray();  if (flowDefId == null || flowDefId.isEmpty()) {    return ok(new Gson().toJson(datasets));  }  List<AppResult> results=getRestFlowAppResults(flowDefId);  if (results.size() == 0) {    logger.info("No results for Job url");  }  Map<IdUrlPair,List<AppResult>> flowExecIdToJobsMap=ControllerUtil.limitHistoryResults(ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.FLOW_EXECUTION_ID),results.size(),MAX_HISTORY_LIMIT);  List<IdUrlPair> keyList=new ArrayList<IdUrlPair>(flowExecIdToJobsMap.keySet());  for (int i=keyList.size() - 1; i >= 0; i--) {    IdUrlPair flowExecPair=keyList.get(i);    int flowPerfScore=0;    JsonArray jobScores=new JsonArray();    List<AppResult> mrJobsList=Lists.reverse(flowExecIdToJobsMap.get(flowExecPair));    Map<IdUrlPair,List<AppResult>> jobDefIdToJobsMap=ControllerUtil.groupJobs(mrJobsList,ControllerUtil.GroupBy.JOB_DEFINITION_ID);    long totalFlowMemoryUsed=0;    long totalFlowMemoryWasted=0;    long totalFlowDelay=0;    long totalFlowRuntime=0;    for (    IdUrlPair jobDefPair : jobDefIdToJobsMap.keySet()) {      long totalJobMemoryUsed=0;      long totalJobMemoryWasted=0;      long totalJobDelay=0;      long totalJobRuntime=0;      totalJobRuntime=Utils.getTotalRuntime(jobDefIdToJobsMap.get(jobDefPair));      totalJobDelay=Utils.getTotalWaittime(jobDefIdToJobsMap.get(jobDefPair));      for (      AppResult job : jobDefIdToJobsMap.get(jobDefPair)) {        totalJobMemoryUsed+=job.resourceUsed;        totalJobMemoryWasted+=job.resourceWasted;      }      JsonObject jobScore=new JsonObject();      jobScore.addProperty("runtime",totalJobRuntime);      jobScore.addProperty("waittime",totalJobDelay);      jobScore.addProperty("resourceused",totalJobMemoryUsed);      jobScore.addProperty("resourcewasted",totalJobMemoryWasted);      jobScore.addProperty("jobdefurl",jobDefPair.getUrl());      jobScore.addProperty("jobexecurl",jobDefIdToJobsMap.get(jobDefPair).get(0).jobExecUrl);      jobScores.add(jobScore);      totalFlowMemoryUsed+=totalJobMemoryUsed;      totalFlowMemoryWasted+=totalJobMemoryWasted;    }    totalFlowDelay=Utils.getTotalWaittime(flowExecIdToJobsMap.get(flowExecPair));    totalFlowRuntime=Utils.getTotalRuntime(flowExecIdToJobsMap.get(flowExecPair));    JsonObject dataset=new JsonObject();    dataset.addProperty("flowtime",mrJobsList.get(mrJobsList.size() - 1).finishTime);    dataset.addProperty("runtime",totalFlowRuntime);    dataset.addProperty("waittime",totalFlowDelay);    dataset.addProperty("resourceused",totalFlowMemoryUsed);    dataset.addProperty("resourcewasted",totalFlowMemoryWasted);    dataset.add("jobmetrics",jobScores);    datasets.add(dataset);  }  return ok(new Gson().toJson(datasets));}  }
class C{  private void init(){  fileList=new ArrayList<File>();  nameList=new ArrayList<String>();  gen=null;  currentSize=0;  latency=0.00417;  avgSeekTime=0.009;  maxTransferRate=133;}  }
class C{  public GenImmortalSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){  super(server,spaceName,mmtkSpace,blockSize,mainSpace);  remsetStream=createRemsetStream();  if (DEBUG) {    Log.write("GenImmortalSpaceDriver for ");    Log.write(spaceName);    Log.write(", blocksize=");    Log.write(blockSize);    Log.write(", start=");    Log.write(mmtkSpace.getStart());    Log.write(", extent=");    Log.write(mmtkSpace.getExtent());    Log.write(", maxTileNum=");    Log.writeln(maxTileNum);  }  resetData();}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public OutputStream createOutOutputStream(OutputStream os){  return new InstrumentedOutputStream(collector(),Direction.Out,os,null);}  }
class C{  protected void storeState(){  if (tree != null) {    System.arraycopy(intervals,0,storedIntervals,0,intervals.length);    System.arraycopy(lineageCounts,0,storedLineageCounts,0,lineageCounts.length);    storedIntervalsKnown=intervalsKnown;    storedIntervalCount=intervalCount;    storedLikelihoodKnown=likelihoodKnown;  } else   if (treesSet != null) {    treesSet.storeTheState();  }  storedLogLikelihood=logLikelihood;}  }
class C{  @Deprecated public boolean isValid(String regex){  if (regex == null) {    return false;  }  Pattern pattern=Pattern.compile(regex);  Matcher matcher=pattern.matcher(getText());  return matcher.matches();}  }
class C{  public ClientHello(HandshakeIODataStream in) throws IOException {  if (in.readUint8() != 1) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello");  }  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  int cipher_spec_length=in.readUint16();  if (in.readUint16() != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");  }  int challenge_length=in.readUint16();  if (challenge_length < 16) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, short challenge data");  }  session_id=EmptyArray.BYTE;  cipher_suites=new CipherSuite[cipher_spec_length / 3];  for (int i=0; i < cipher_suites.length; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    byte b2=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1,b2);  }  compression_methods=new byte[]{0};  if (challenge_length < 32) {    Arrays.fill(random,0,32 - challenge_length,(byte)0);    System.arraycopy(in.read(challenge_length),0,random,32 - challenge_length,challenge_length);  } else   if (challenge_length == 32) {    System.arraycopy(in.read(32),0,random,0,32);  } else {    System.arraycopy(in.read(challenge_length),challenge_length - 32,random,0,32);  }  if (in.available() > 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, extra data");  }  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public int hashCode(){  int hash=1;  hash=31 * hash + who.hashCode();  hash=31 * hash + when.hashCode();  hash=31 * hash + ((Double)amount).hashCode();  return hash;}  }
class C{  public SmoothOverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  @Override protected void detach(){  super.detach();  poolEntry=null;}  }
class C{  public VOPricedEvent(VOEventDefinition eventDefinition){  if (eventDefinition == null) {    throw new IllegalArgumentException("VOEventDefinition must not be null");  }  this.eventDefinition=eventDefinition;}  }
class C{  private void renderComponent(Graphics g,Component cmp,int x,int y,int width,int height){  Style s=cmp.getStyle();  int left=s.getMargin(isRTL(),LEFT);  int top=s.getMargin(false,TOP);  cmp.setWidth(width - left - s.getMargin(isRTL(),RIGHT));  cmp.setHeight(height - top - s.getMargin(false,BOTTOM));  cmp.setX(x + left);  cmp.setY(y + top);  int oX=g.getClipX();  int oY=g.getClipY();  int oWidth=g.getClipWidth();  int oHeight=g.getClipHeight();  g.clipRect(cmp.getX(),cmp.getY(),cmp.getWidth(),cmp.getHeight());  cmp.paint(g);  Border b=s.getBorder();  if (b != null && !b.isBackgroundPainter()) {    cmp.paintBorder(g);  }  g.setClip(oX,oY,oWidth,oHeight);}  }
class C{  public void add(int actual,int pred,double weight){  mContingencyTable[actual][pred]+=weight;}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=(InputStream)new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  protected void initMatrixStorage(){  this.A=new float[(this.n * (this.n + 1) / 2)];}  }
class C{  public void onGeofenceTransition(int geofenceId,int transition,Location location,long timestamp,int monitoringType){}  }
class C{  public WriteHallOfFamePointsCommand(String playername,String fametype,int points,boolean add){  this.playername=playername;  this.fametype=fametype;  this.points=points;  this.add=add;}  }
class C{  public void computeEdgeEnds(Edge edge,List l){  EdgeIntersectionList eiList=edge.getEdgeIntersectionList();  eiList.addEndpoints();  Iterator it=eiList.iterator();  EdgeIntersection eiPrev=null;  EdgeIntersection eiCurr=null;  if (!it.hasNext())   return;  EdgeIntersection eiNext=(EdgeIntersection)it.next();  do {    eiPrev=eiCurr;    eiCurr=eiNext;    eiNext=null;    if (it.hasNext())     eiNext=(EdgeIntersection)it.next();    if (eiCurr != null) {      createEdgeEndForPrev(edge,l,eiCurr,eiPrev);      createEdgeEndForNext(edge,l,eiCurr,eiNext);    }  } while (eiCurr != null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.721 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isAnnotationPresent(Class cl){  return isAnnotationPresent(cl.getName());}  }
class C{  private static List<BillingResult> createBillingResults(){  createBillingResultDataMock();  billingResults=new LinkedList<BillingResult>();  for (long subscriptionKey=1; subscriptionKey <= NUMBER_SUBSCRIPTIONS; subscriptionKey++) {    BillingResult billingResult=new BillingResult();    billingResult.setKey(getBillingKey(subscriptionKey));    billingResult.setSubscriptionKey(subscriptionKey);    billingResult.setCurrency(new SupportedCurrency(billingResultDataMock.get(subscriptionKey).currencyCode));    billingResult.setNetAmount(billingResultDataMock.get(subscriptionKey).netAmount);    billingResults.add(billingResult);  }  return billingResults;}  }
class C{  protected BalancedWebResource createHttpsClient(final String username,final String password,List<String> hosts) throws NoSuchAlgorithmException {  return createHttpsClient(username,password,hosts,true);}  }
class C{  public static byte[] encrypt(byte[] bytes) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);  byte[] encrypted=cipher.doFinal(bytes);  return Base64.encodeBase64(encrypted);}  }
class C{  public boolean equals(Point2D op2){  if (op2 == null)   return false;  return Util.compareDoubles(this.x,op2.x) && Util.compareDoubles(this.y,op2.y);}  }
class C{  private UploadResultView emptyUploadResult(){  UploadResultView errorResult=new UploadResultView();  errorResult.setErrorMessage("Error while uploading to remote repository.");  errorResult.setValid(false);  return errorResult;}  }
class C{  public static JCardValue structured(List<List<?>> values){  List<JsonValue> array=new ArrayList<JsonValue>(values.size());  for (  List<?> list : values) {    if (list.isEmpty()) {      array.add(new JsonValue(""));      continue;    }    if (list.size() == 1) {      Object value=list.get(0);      if (value == null) {        value="";      }      array.add(new JsonValue(value));      continue;    }    List<JsonValue> subArray=new ArrayList<JsonValue>(list.size());    for (    Object value : list) {      if (value == null) {        value="";      }      subArray.add(new JsonValue(value));    }    array.add(new JsonValue(subArray));  }  return new JCardValue(new JsonValue(array));}  }
class C{  String parseToken() throws SaslException {  char currChar;  String token=null;  if (m_state == STATE_DONE)   return null;  while (m_curPos < m_tokens.length() && (token == null)) {    currChar=m_tokens.charAt(m_curPos);switch (m_state) {case STATE_LOOKING_FOR_FIRST_TOKEN:case STATE_LOOKING_FOR_TOKEN:      if (isWhiteSpace(currChar)) {        break;      } else       if (isValidTokenChar(currChar)) {        m_scanStart=m_curPos;        m_state=STATE_SCANNING_TOKEN;      } else {        m_state=STATE_PARSING_ERROR;        throw new SaslException("Invalid token character at position " + m_curPos);      }    break;case STATE_SCANNING_TOKEN:  if (isValidTokenChar(currChar)) {    break;  } else   if (isWhiteSpace(currChar)) {    token=m_tokens.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_COMMA;  } else   if (',' == currChar) {    token=m_tokens.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_TOKEN;  } else {    m_state=STATE_PARSING_ERROR;    throw new SaslException("Invalid token character at position " + m_curPos);  }break;case STATE_LOOKING_FOR_COMMA:if (isWhiteSpace(currChar)) break; else if (currChar == ',') m_state=STATE_LOOKING_FOR_TOKEN; else {m_state=STATE_PARSING_ERROR;throw new SaslException("Expected a comma, found '" + currChar + "' at postion "+ m_curPos);}break;}m_curPos++;}if (token == null) {switch (m_state) {case STATE_SCANNING_TOKEN:token=m_tokens.substring(m_scanStart);m_state=STATE_DONE;break;case STATE_LOOKING_FOR_FIRST_TOKEN:case STATE_LOOKING_FOR_COMMA:break;case STATE_LOOKING_FOR_TOKEN:throw new SaslException("Trialing comma");}}return token;}  }
class C{  @Override public int compareTo(Edge other){  int cmp=super.compareTo(other);  if (cmp != 0) {    return cmp;  }  return type - other.type;}  }
class C{  @SuppressWarnings("unchecked") QuickSelectSketch(final Memory mem){  int offset=0;  final byte preambleLongs=mem.getByte(offset++);  final byte version=mem.getByte(offset++);  final byte familyId=mem.getByte(offset++);  SerializerDeserializer.validateFamily(familyId,preambleLongs);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  SerializerDeserializer.validateType(mem.getByte(offset++),SerializerDeserializer.SketchType.QuickSelectSketch);  final byte flags=mem.getByte(offset++);  final boolean isBigEndian=(flags & (1 << Flags.IS_BIG_ENDIAN.ordinal())) > 0;  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Endian byte order mismatch");  }  nomEntries_=1 << mem.getByte(offset++);  lgCurrentCapacity_=mem.getByte(offset++);  lgResizeFactor_=mem.getByte(offset++);  final boolean isInSamplingMode=(flags & (1 << Flags.IS_IN_SAMPLING_MODE.ordinal())) > 0;  samplingProbability_=isInSamplingMode ? mem.getFloat(offset) : 1f;  if (isInSamplingMode) {    offset+=Float.BYTES;  }  final boolean isThetaIncluded=(flags & (1 << Flags.IS_THETA_INCLUDED.ordinal())) > 0;  if (isThetaIncluded) {    theta_=mem.getLong(offset);    offset+=Long.BYTES;  } else {    theta_=(long)(Long.MAX_VALUE * (double)samplingProbability_);  }  int count=0;  final boolean hasEntries=(flags & (1 << Flags.HAS_ENTRIES.ordinal())) > 0;  if (hasEntries) {    count=mem.getInt(offset);    offset+=Integer.BYTES;  }  DeserializeResult<SummaryFactory<S>> factoryResult=SerializerDeserializer.deserializeFromMemory(mem,offset);  summaryFactory_=factoryResult.getObject();  offset+=factoryResult.getSize();  final int currentCapacity=1 << lgCurrentCapacity_;  keys_=new long[currentCapacity];  summaries_=(S[])Array.newInstance(summaryFactory_.newSummary().getClass(),currentCapacity);  MemoryRegion memRegion=new MemoryRegion(mem,0,mem.getCapacity());  for (int i=0; i < count; i++) {    long key=mem.getLong(offset);    offset+=Long.BYTES;    memRegion.reassign(offset,mem.getCapacity() - offset);    DeserializeResult<S> summaryResult=summaryFactory_.summaryFromMemory(memRegion);    S summary=summaryResult.getObject();    offset+=summaryResult.getSize();    insert(key,summary);  }  isEmpty_=(flags & (1 << Flags.IS_EMPTY.ordinal())) > 0;  setRebuildThreshold();}  }
class C{  public static ImageSource cachedBitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap,true);}  }
class C{  public static void main(String[] args) throws Exception {  new FileProtection().start(args);}  }
class C{  private void parseStringTable(){  int chunk=getLEWord(mParserOffset + (1 * WORD_SIZE));  mStringsCount=getLEWord(mParserOffset + (2 * WORD_SIZE));  mStylesCount=getLEWord(mParserOffset + (3 * WORD_SIZE));  int strOffset=mParserOffset + getLEWord(mParserOffset + (5 * WORD_SIZE));  int styleOffset=getLEWord(mParserOffset + (6 * WORD_SIZE));  mStringsTable=new String[mStringsCount];  int offset;  for (int i=0; i < mStringsCount; ++i) {    offset=strOffset + getLEWord(mParserOffset + ((i + 7) * WORD_SIZE));    mStringsTable[i]=getStringFromStringTable(offset);  }  if (styleOffset > 0) {    Log.w(TAG,"Unread styles");    for (int i=0; i < mStylesCount; ++i) {    }  }  mParserOffset+=chunk;}  }
class C{  public GMatrix(int nRow,int nCol,double[] matrix){  values=new double[nRow][nCol];  this.nRow=nRow;  this.nCol=nCol;  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=matrix[i * nCol + j];    }  }}  }
class C{  private void addListener(final EngineChangeListener listener){  if (!listeners.contains(listener))   listeners.add(listener);}  }
class C{  public static boolean isEditTextEmpty(EditText editText){  if (editText != null) {    if (editText.getText().toString().equals("")) {      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  public static boolean saveDSAKeyPairFile(String uname,KeyPair kp){  boolean success=false;  if (saveDSAPrivateKeyFile(uname,(DSAPrivateKey)kp.getPrivate())) {    success=saveDSAPublicKeyFile(uname,(DSAPublicKey)kp.getPublic());  }  return success;}  }
class C{  public InlineMenuBuilder message(SendableTextMessageBuilder builder){  this.message=builder;  return this;}  }
class C{  public Builder notification(Notification value){  notification=value;  return this;}  }
class C{  public TransformerHandlerImpl(TransformerImpl transformer,boolean doFragment,String baseSystemID){  super();  m_transformer=transformer;  m_baseSystemID=baseSystemID;  XPathContext xctxt=transformer.getXPathContext();  DTM dtm=xctxt.getDTM(null,true,transformer,true,true);  m_dtm=dtm;  dtm.setDocumentBaseURI(baseSystemID);  m_contentHandler=dtm.getContentHandler();  m_dtdHandler=dtm.getDTDHandler();  m_entityResolver=dtm.getEntityResolver();  m_errorHandler=dtm.getErrorHandler();  m_lexicalHandler=dtm.getLexicalHandler();  m_incremental=transformer.getIncremental();  m_optimizer=transformer.getOptimize();  m_source_location=transformer.getSource_location();}  }
class C{  public String toString(){  String out="    " + tagToString(getTag()) + " Table.  Data is: ";  if (getData() == null) {    out+="not set";  } else {    out+="set";  }  return out;}  }
class C{  public static int findOrCreateLongSizeLiteral(long literal){  final int bottom=getLowestInUseSlot();  final int top=middleOfTable & 0xFFFFFFFE;  for (int i=top; i >= bottom; i-=2) {    Offset off=slotAsOffset(i);    if ((getSlotContentsAsLong(off) == literal) && !numericFieldVector.get(i) && !(numericFieldVector.get(i + 1))&& (i != numericSlotHole)&& (i + 1 != numericSlotHole)) {      return slotAsOffset(i).toInt();    }  }  Offset newOff=allocateNumericSlot(BYTES_IN_LONG,false);  setSlotContents(newOff,literal);  return newOff.toInt();}  }
class C{  public RectF drawNativeText(String text,float x,float y){  Paint paint=state.fillPaint.getPaint();  g.drawText(text,x,y,paint);  return new RectF();}  }
class C{  void refreshContexts(List<String> contexts){  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_REFRESH_CONTEXT);  s_logger.info("Refresh contexts URI is {}",requestURI.toString());  Map<String,String> argsMap=new HashMap<String,String>();  StringBuilder argsBuilder=new StringBuilder();  for (  String context : contexts) {    if (argsBuilder.length() != 0) {      argsBuilder.append(",");    }    argsBuilder.append(context);  }  argsMap.put(VPlexApiConstants.ARG_DASH_C,argsBuilder.toString());  JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);  s_logger.info("Refresh contexts POST data is {}",postDataObject.toString());  ClientResponse response=null;  try {    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Refresh contexts response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Refresh contexts is completing asynchrounously");        _vplexApiClient.waitForCompletion(response);      } else {        s_logger.warn("Refresh of contexts {} failed",contexts);      }    }    s_logger.info("Refresh contexts was successful");  } catch (  Exception e) {    s_logger.warn("Exception during context refresh",e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static MAssetChange createDisposal(MAssetDisposed assetDisposed,MDepreciationWorkfile assetwk){  MAssetChange change=new MAssetChange(assetDisposed.getCtx(),0,assetDisposed.get_TrxName());  change.setAD_Org_ID(assetDisposed.getAD_Org_ID());  change.setA_Asset_ID(assetDisposed.getA_Asset_ID());  change.setChangeType("DIS");  change.setTextDetails(MRefList.getListDescription(assetDisposed.getCtx(),"A_Update_Type","DIS"));  change.setPostingType(assetwk.getPostingType());  change.setAssetValueAmt(assetDisposed.getA_Disposal_Amt());  change.setA_QTY_Current(assetwk.getA_QTY_Current());  change.saveEx();  return change;}  }
class C{  private void buildRoute(Class<?> clazz,Method execMethod,String path,HttpMethod method){  routers.buildRoute(path,clazz,execMethod,method);}  }
class C{  public final void addStrategy(final PlanStrategy strategy,final double weight,final Id populationId){  ArrayList<PlanStrategy> strategies=this.strategies.get(populationId);  if (strategies == null) {    strategies=new ArrayList<PlanStrategy>();    this.strategies.put(populationId,strategies);    this.weights.put(populationId,new ArrayList<Double>());    this.totalWeights.put(populationId,0.0);  }  strategies.add(strategy);  this.weights.get(populationId).add(Double.valueOf(weight));  this.totalWeights.put(populationId,this.totalWeights.get(populationId) + weight);}  }
class C{  @Check private boolean checkModifiers(ModifiableElement elem){  return holdsNoInvalidOrDuplicateModifiers(elem) && holdsNotMoreThanOneAccessModifier(elem) && holdsCorrectOrder(elem);}  }
class C{  private boolean findSolution(RPProtectionRecommendation rpProtectionRecommendation,RPRecommendation sourceRecommendation,VirtualArray varray,VirtualPool vpool,List<VirtualArray> targetVarrays,VirtualPoolCapabilityValuesWrapper capabilities,int requestedCount,boolean isMetroPoint,RPRecommendation activeSourceRecommendation,Project project){  if (targetVarrays.isEmpty()) {    _log.info("RP Placement : Could not find target solution because there are no protection virtual arrays specified.");    return false;  }  VirtualArray targetVarray=targetVarrays.get(0);  placementStatus.getProcessedProtectionVArrays().put(targetVarray.getId(),true);  VpoolProtectionVarraySettings protectionSettings=rpHelper.getProtectionSettings(vpool,targetVarray);  VirtualPool targetVpool=vpool;  if (protectionSettings.getVirtualPool() != null) {    targetVpool=dbClient.queryObject(VirtualPool.class,protectionSettings.getVirtualPool());  }  _log.info("RP Placement : Determining placement on protection varray : " + targetVarray.getLabel());  VirtualPoolCapabilityValuesWrapper newCapabilities=new VirtualPoolCapabilityValuesWrapper(capabilities);  newCapabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,requestedCount);  List<Recommendation> targetPoolRecommendations=new ArrayList<Recommendation>();  if (isMetroPoint && activeSourceRecommendation != null && isMetroPointProtectionSpecified(activeSourceRecommendation,ProtectionType.REMOTE)) {    StringBuffer unusedTargets=new StringBuffer();    Recommendation targetPoolRecommendation=new Recommendation();    for (    RPRecommendation targetRec : activeSourceRecommendation.getTargetRecommendations()) {      if (targetVarray.getId().equals(targetRec.getVirtualArray())) {        targetPoolRecommendation.setSourceStoragePool(targetRec.getSourceStoragePool());        targetPoolRecommendation.setSourceStorageSystem(targetRec.getSourceStorageSystem());        targetPoolRecommendations.add(targetPoolRecommendation);        break;      } else {        unusedTargets.append(targetRec.getVirtualArray().toString());        unusedTargets.append(" ");      }    }    if (targetPoolRecommendations.isEmpty()) {      _log.warn(String.format("RP Placement : Could not find a MetroPoint CRR Solution because the" + " Active and Standby Copies could not find a common Target varray. " + "Active Target varrays [ %s] - Standby Target varray [ %s ]. "+ "Reason: This might not be a MetroPoint CRR config. Please check the vpool config and "+ "the RecoverPoint Protection System for the connectivity of the varrays.",unusedTargets.toString(),targetVarray.getId()));      return false;    }  } else {    targetPoolRecommendations=getRecommendedPools(rpProtectionRecommendation,targetVarray,targetVpool,null,null,newCapabilities,RPHelper.TARGET,null);    if (targetPoolRecommendations.isEmpty()) {      _log.error(String.format("RP Placement : No matching storage pools found for the source varray: [%s]. " + "There are no storage pools that match the passed vpool parameters and protocols and/or there are no pools that have " + "enough capacity to hold at least one resource of the requested size.",varray.getLabel()));      throw APIException.badRequests.noMatchingStoragePoolsForVpoolAndVarray(vpool.getLabel(),varray.getLabel());    }  }  VirtualArray targetJournalVarray=targetVarray;  if (!NullColumnValueGetter.isNullURI(protectionSettings.getJournalVarray())) {    targetJournalVarray=dbClient.queryObject(VirtualArray.class,protectionSettings.getJournalVarray());  }  VirtualPool targetJournalVpool=targetVpool;  if (!NullColumnValueGetter.isNullURI(protectionSettings.getJournalVpool())) {    targetJournalVpool=dbClient.queryObject(VirtualPool.class,protectionSettings.getJournalVpool());  }  Iterator<Recommendation> targetPoolRecommendationsIter=targetPoolRecommendations.iterator();  while (targetPoolRecommendationsIter.hasNext()) {    Recommendation targetPoolRecommendation=targetPoolRecommendationsIter.next();    StoragePool candidateTargetPool=dbClient.queryObject(StoragePool.class,targetPoolRecommendation.getSourceStoragePool());    List<String> associatedStorageSystems=getCandidateTargetVisibleStorageSystems(rpProtectionRecommendation.getProtectionDevice(),targetVarray,sourceRecommendation.getInternalSiteName(),candidateTargetPool,VirtualPool.vPoolSpecifiesHighAvailability(targetVpool));    if (associatedStorageSystems.isEmpty()) {      _log.info(String.format("RP Placement : Solution cannot be found using target pool %s" + " there is no connectivity to rp cluster sites.",candidateTargetPool.getLabel()));      continue;    }    for (    String associatedStorageSystem : associatedStorageSystems) {      String targetInternalSiteName=ProtectionSystem.getAssociatedStorageSystemSiteName(associatedStorageSystem);      URI targetStorageSystemURI=ConnectivityUtil.findStorageSystemBySerialNumber(ProtectionSystem.getAssociatedStorageSystemSerialNumber(associatedStorageSystem),dbClient,StorageSystemType.BLOCK);      ProtectionType protectionType=null;      if (!sourceRecommendation.containsTargetInternalSiteName(targetInternalSiteName)) {        if (isMetroPoint) {          if (targetInternalSiteName.equals(sourceRecommendation.getInternalSiteName())) {            if (isMetroPointProtectionSpecified(sourceRecommendation,ProtectionType.LOCAL)) {              continue;            }            protectionType=ProtectionType.LOCAL;          } else {            if (isMetroPointProtectionSpecified(sourceRecommendation,ProtectionType.REMOTE)) {              continue;            } else {              if (activeSourceRecommendation != null) {                String primaryTargetInternalSiteName=getMetroPointRemoteTargetRPSite(rpProtectionRecommendation);                if (primaryTargetInternalSiteName != null && !targetInternalSiteName.equals(primaryTargetInternalSiteName)) {                  continue;                }              }              protectionType=ProtectionType.REMOTE;            }          }        }      }      URI protectionSystemURI=rpProtectionRecommendation.getProtectionDevice();      if (!isRpSiteConnectedToVarray(targetStorageSystemURI,protectionSystemURI,targetInternalSiteName,targetVarray)) {        _log.info(String.format("RP Placement: Disqualified RP site [%s] because its initiators are not in a network " + "configured for use by the virtual array [%s]",targetInternalSiteName,targetVarray.getLabel()));        continue;      }      StorageSystem targetStorageSystem=dbClient.queryObject(StorageSystem.class,targetStorageSystemURI);      ProtectionSystem ps=dbClient.queryObject(ProtectionSystem.class,protectionSystemURI);      String rpSiteName=(ps.getRpSiteNames() != null) ? ps.getRpSiteNames().get(targetInternalSiteName) : "";      _log.info(String.format("RP Placement : Choosing RP Site %s (%s) for target on varray [%s](%s)",rpSiteName,targetInternalSiteName,targetVarray.getLabel(),targetVarray.getId()));      _log.info(String.format("RP Placement : Build RP Target Recommendation..."));      RPRecommendation targetRecommendation=buildRpRecommendation(associatedStorageSystem,targetVarray,targetVpool,candidateTargetPool,newCapabilities,requestedCount,targetInternalSiteName,targetStorageSystemURI,targetStorageSystem.getSystemType(),ps);      if (targetRecommendation == null) {        _log.warn(String.format("RP Placement : Could not create Target Recommendation using [%s], continuing...",associatedStorageSystem));        continue;      }      _log.info(String.format("RP Placement : RP Target Recommendation %s %n",targetRecommendation.toString(dbClient,ps,1)));      if (protectionType != null) {        targetRecommendation.setProtectionType(protectionType);      }      boolean isJournalPlacedForVarray=false;      for (      RPRecommendation targetJournalRec : rpProtectionRecommendation.getTargetJournalRecommendations()) {        if (targetJournalRec.getVirtualArray().equals(targetJournalVarray.getId())) {          isJournalPlacedForVarray=true;        }      }      if (!isJournalPlacedForVarray) {        _log.info(String.format("RP Placement : Build RP Target Journal Recommendation..."));        RPRecommendation targetJournalRecommendation=buildJournalRecommendation(rpProtectionRecommendation,targetInternalSiteName,protectionSettings.getJournalSize(),targetJournalVarray,targetJournalVpool,ps,newCapabilities,capabilities.getResourceCount(),null,false);        if (targetJournalRecommendation == null) {          _log.warn(String.format("RP Placement : Could not create Target Journal Recommendation using [%s], continuing...",associatedStorageSystem));          continue;        }        _log.info(String.format("RP Placement : RP Target Journal Recommendation %s %n",targetJournalRecommendation.toString(dbClient,ps,1)));        rpProtectionRecommendation.getTargetJournalRecommendations().add(targetJournalRecommendation);      } else {        _log.info(String.format("RP Placement : RP Target Journal already placed."));      }      if (sourceRecommendation.getTargetRecommendations() == null) {        sourceRecommendation.setTargetRecommendations(new ArrayList<RPRecommendation>());      }      sourceRecommendation.getTargetRecommendations().add(targetRecommendation);      PlacementStatus tmpPlacementStatus=placementStatus;      if (activeSourceRecommendation != null) {        tmpPlacementStatus=secondaryPlacementStatus;      }      rpProtectionRecommendation.setPlacementStepsCompleted(PlacementProgress.IDENTIFIED_SOLUTION_FOR_SUBSET_OF_TARGETS);      if (tmpPlacementStatus.isBestSolutionToDate(rpProtectionRecommendation)) {        tmpPlacementStatus.setLatestInvalidRecommendation(rpProtectionRecommendation);      }      if (isMetroPoint) {        if (rpProtectionRecommendation.getSourceRecommendations() != null && getProtectionVarrays(rpProtectionRecommendation).size() == targetVarrays.size()) {          finalizeTargetPlacement(rpProtectionRecommendation,tmpPlacementStatus);          return true;        }      } else       if (targetVarrays.size() == 1) {        finalizeTargetPlacement(rpProtectionRecommendation,tmpPlacementStatus);        return true;      }      List<VirtualArray> remainingVarrays=new ArrayList<VirtualArray>();      remainingVarrays.addAll(targetVarrays);      remainingVarrays.remove(targetVarray);      if (!remainingVarrays.isEmpty()) {        _log.info("RP placement: Calling find solution on the next virtual array : " + remainingVarrays.get(0).getLabel() + " Current virtual array: "+ targetVarray.getLabel());      } else {        _log.info("RP Placement : Solution cannot be found, will try again with different pool combination");        return false;      }      if (!this.findSolution(rpProtectionRecommendation,sourceRecommendation,varray,vpool,remainingVarrays,newCapabilities,requestedCount,isMetroPoint,activeSourceRecommendation,project)) {        _log.info("RP Placement: Solution for remaining virtual arrays couldn't be found. " + "Trying different solution (if available) for varray: " + targetVarray.getLabel());      } else {        _log.info("RP Placement: Solution for remaining virtual arrays was found. Returning to caller. Virtual Array : " + targetVarray.getLabel());        return true;      }    }  }  _log.info("RP Placement : Solution cannot be found, will try again with different pool combination");  return false;}  }
class C{  public void export(){  OMGraphicList list=getGraphicList();  if (list == null) {    logger.warning("no graphic list to export!");    return;  }  export(list,null,true);}  }
class C{  public ReadMemorySynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public PowerLawDegreeEdgeIterator(PowerLawDegreeEdgePool powerLawDegreeEdgePool){  this.powerLawDegreeEdgePool=powerLawDegreeEdgePool;  int numPools=powerLawDegreeEdgePool.getNumPools();  this.regularDegreeEdgeIterators=new RegularDegreeEdgeIterator[numPools];  for (int i=0; i < numPools; i++) {    regularDegreeEdgeIterators[i]=new RegularDegreeEdgeIterator(powerLawDegreeEdgePool.getRegularDegreeEdgePool(i));  }}  }
class C{  private boolean internalOfferTask(AFrameTask task){synchronized (mFrameTaskQueue) {    return mFrameTaskQueue.offer(task);  }}  }
class C{  public org.codehaus.cargo.container.property.User createUser(){  org.codehaus.cargo.container.property.User user=new org.codehaus.cargo.container.property.User();  user.setName(getName());  user.setPassword(getPassword());  user.addRoles(Arrays.asList(getRoles()));  return user;}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public static Class wrapperToPrimitive(Class cls){  return (Class)wrapperPrimitiveMap.get(cls);}  }
class C{  public void trainClassifier(File dir,String... args) throws Exception {  if (dir == null || !dir.isDirectory()) {    throw new IllegalArgumentException(String.format("invalid directory \"%s\"",dir));  }  if (args == null || args.length == 0 || args[0] == null) {    throw new IllegalArgumentException("missing template file in \"args\"");  }  File template=new File(dir,args[0]);  if (!template.exists()) {    String msg="template file \"%s\" does not exist!";    throw new IllegalArgumentException(String.format(msg,template));  }  File outputFile=new File(dir,DEFAULT_MODEL_FILENAME);  String inferencer=args.length < 2 ? "LoopyBP" : args[1];  String maxInferencer=args.length < 3 ? "LoopyBP.createForMaxProduct()" : args[2];  String[] grmmArgs=new String[]{"--training",new File(dir,"training-data.grmm").getAbsolutePath(),"--testing",new File(dir,"training-data.grmm").getAbsolutePath(),"--model-file",template.getAbsolutePath(),"--inferencer",inferencer,"--max-inferencer",maxInferencer};  GenericAcrfTui.main(grmmArgs);  Files.move(new File("acrf.ser.gz"),outputFile.getAbsoluteFile());}  }
class C{  @Override public final void cancel(){  if (isValid) {    isValid=false;    ((AbstractSelector)selector()).cancel(this);  }}  }
class C{  public boolean isServiceMarketplaceLogin(){  HttpServletRequest request=getRequest();  String loginType=request.getParameter(Constants.REQ_ATTR_SERVICE_LOGIN_TYPE);  if (loginType == null) {    loginType=(String)request.getAttribute(Constants.REQ_ATTR_SERVICE_LOGIN_TYPE);  }  return loginType != null && loginType.equals(Constants.REQ_ATTR_LOGIN_TYPE_MPL);}  }
class C{  public TimingProblem(Problem problem){  super();  this.problem=problem;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addField(int fieldId){  fields.add(fieldId);  schemaId=BinaryUtils.updateSchemaId(schemaId,fieldId);}  }
class C{  @Override protected void saveAllocation(){  getSavedAllocation().clear();  for (  ContainerHost host : getContainerHostList()) {    for (    ContainerVm vm : host.getVmList()) {      if (host.getVmsMigratingIn().contains(vm)) {        continue;      }      for (      Container container : vm.getContainerList()) {        if (vm.getContainersMigratingIn().contains(container)) {          continue;        }        Map<String,Object> map=new HashMap<String,Object>();        map.put("host",host);        map.put("vm",vm);        map.put("container",container);        getSavedAllocation().add(map);      }    }  }  Log.printLine(String.format("The length of the saved map is ....%d",getSavedAllocation().size()));}  }
class C{  public Server evaluate(HttpServletRequest request){  Iterator itr=getServerIterator();  while (itr.hasNext()) {    final ServerContainer container=(ServerContainer)itr.next();    if (container.getRule().matches(request)) {      return container.getServer(request);    }  }  return null;}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_LIST_1__PARAMETER_1:    getParameter_1().clear();  getParameter_1().addAll((Collection<? extends Parameter_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public XMLRequest(TankHttpClient client,TankHttpLogger logUtil){  super(client,logUtil);  this.handler=new GenericXMLHandler();  setContentType(CONTENT_TYPE);}  }
class C{  private synchronized void loadHexImage(IHex hex){  hexTileset.assignMatch(hex,boardview);  hexTileset.trackHexImages(hex,tracker);}  }
class C{  private void drawOffsets(final Graphics g){  final int linesToDraw=getNumberOfVisibleRows();  final String formatString=m_addressMode == AddressMode.BIT32 ? "%08X" : "%016X";  final long elementSize=getElementSize();  final long baseAddress=m_model.getStartAddress() == -1 ? 0 : m_model.getStartAddress();  for (int i=0; i < linesToDraw; i++) {    final int elementIndex=m_firstRow + i;    final long elementAddress=baseAddress + (elementIndex * elementSize);    final String offsetString=String.format(formatString,elementAddress);    if (elementAddress == m_model.getStackPointer()) {      highlightStackPointer(g,i);    }    if (isEnabled()) {      g.setColor(m_fontColorOffsets);    } else {      g.setColor(m_disabledColor != m_bgColorOffset ? m_disabledColor : Color.WHITE);    }    g.drawString(offsetString,PADDING_LEFT - (m_charWidth * m_firstColumn),m_paddingTop + (i * m_rowHeight));  }}  }
class C{  public static String nextString(int length){  char[] characters=new char[length];  for (int i=0; i < length; i++)   characters[i]=nextChar();  return new String(characters);}  }
class C{  private void createButtonsContainer(){  createContainer();  createButtonsContainerBackground();}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void testPrivateMode() throws Throwable {  processTest(PRIVATE);}  }
class C{  @SuppressWarnings("unchecked") public K keyAt(int index){  return (K)mArray[index << 1];}  }
class C{  public NegateValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type> validator){  super(context,resourceId);  setValidator(validator);}  }
class C{  void removeChild(Node node){  assert this == node.getParentNode();  if (firstChild == node) {    firstChild=node.getNextSibling();    if (lastChild == node) {      lastChild=null;    }  } else {    Node prev=firstChild;    Node next=firstChild.getNextSibling();    while (next != node) {      prev=next;      next=next.getNextSibling();    }    prev.setNextSibling(node.getNextSibling());    if (lastChild == node) {      lastChild=prev;    }  }}  }
class C{  protected void paintLineHighlights(Graphics g){  LineHighlightManager lhm=textArea.getLineHighlightManager();  if (lhm != null) {    lhm.paintLineHighlights(g);  }}  }
class C{  public Executor withProperty(String key,String value){  properties.setString(key,value);  return this;}  }
class C{  private synchronized static void initialize(){  if (MASTER_CACHE != null) {    return;  }  Enumeration<URL> cps;  try {    cps=CLASSLOADER.getResources("");  } catch (  IOException e) {    de.lmu.ifi.dbs.elki.logging.LoggingUtil.exception(e);    return;  }  List<Class<?>> res=new ArrayList<>();  while (cps.hasMoreElements()) {    URL u=cps.nextElement();    if (!"file".equals(u.getProtocol())) {      continue;    }    File path;    try {      path=new File(u.toURI());    } catch (    URISyntaxException e) {      LOG.warning("Incorrect classpath entry: " + u);      continue;    }    Iterator<String> it=new DirClassIterator(path);    while (it.hasNext()) {      String classname=it.next();      try {        Class<?> cls=CLASSLOADER.loadClass(classname);        if (cls.getCanonicalName() == null) {          continue;        }        res.add(cls);      } catch (      Exception|Error e) {        continue;      }    }  }  MASTER_CACHE=Collections.unmodifiableList(res);  if (LOG.isDebuggingFinest() && !MASTER_CACHE.isEmpty()) {    LOG.debugFinest("Classes found by scanning the development classpath: " + MASTER_CACHE.size());  }}  }
class C{  private TypeConstraint combineInvInv(TypeBound boundS,TypeBound boundT){  if (boundS.left == boundT.left) {    return new TypeConstraint(boundS.right,boundT.right,INV);  }  TypeConstraint newConstraint=combineInvInvWithProperType(boundS,boundT);  if (newConstraint != null) {    return newConstraint;  }  newConstraint=combineInvInvWithProperType(boundT,boundS);  if (newConstraint != null) {    return newConstraint;  }  return null;}  }
class C{  public void processElement(E element){  Object key=aggregator.getAggregationKey(element);  IAggregatedData<E> aggregatedObject=aggregationMap.get(key);  if (null != aggregatedObject) {    aggregator.aggregate(aggregatedObject,element);  } else {    aggregatedObject=aggregator.getClone(element);    aggregationMap.put(key,aggregatedObject);    aggregator.aggregate(aggregatedObject,element);  }}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String(){  Locale x=new Locale("xx","CV");  assertTrue("Failed to create Locale",x.getCountry().equals("CV") && x.getVariant().equals(""));  try {    new Locale("xx",null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }  try {    new Locale(null,"CV");    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  @Override public void agg(Object newVal){  valueSet.add(newVal instanceof Double ? (Double)newVal : new Double(newVal.toString()));  firstTime=false;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe file containing the serialized model.\n" + "\t(required)","model",1,"-model <filename>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override public boolean stop(){  if (!_lifecycle.toStopping()) {    return false;  }  log.finest(this + " stopping");  destroy();  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String rasterHeader=null;  String distributionType=null;  int numberOfClasses=-1;  String statsFileName=null;  int numCols, numRows;  int col, row;  double value;  List<Double> values=new ArrayList<>();  String str;  float progress=0;  int index;  int h;  FileWriter streamWriter=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      rasterHeader=args[i];    } else     if (i == 1) {      distributionType=args[i].toLowerCase();    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        numberOfClasses=Integer.parseInt(args[i]);      }    } else     if (i == 3) {      statsFileName=args[i];    }  }  if ((rasterHeader == null) || (statsFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((!distributionType.equals("complete")) & (numberOfClasses <= 0)) {    showFeedback("Specify the number of classes (should be a value larger then 0).");    return;  }  try {    raster=new WhiteboxRaster(rasterHeader,"r");    numRows=raster.getNumberRows();    numCols=raster.getNumberColumns();    streamWriter=new FileWriter(statsFileName);    str="Distribution type: " + distributionType + System.lineSeparator();    streamWriter.write(str);switch (distributionType) {case "complete":      values=SortGridValues(raster);    updateProgress("Writing output:",0);  str="Value" + "\t" + "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);for (int i=0; i < values.size(); i++) {str=values.get(i) + "\t" + (((float)i + 1) / values.size())+ System.lineSeparator();streamWriter.write(str);if (cancelOp) {  cancelOperation();  return;}progress=(float)(100f * i / (values.size() - 1));updateProgress("Writing output:",(int)progress);}break;case "n classes with equal class width":List<Integer> distri=new ArrayList<>();List<Double> upper=new ArrayList<>();for (int i=1; i <= numberOfClasses; i++) {distri.add(0);upper.add(raster.getMinimumValue() + i * (raster.getMaximumValue() - raster.getMinimumValue()) / numberOfClasses);}updateProgress("Computing distribution:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {value=raster.getValue(row,col);if (value != raster.getNoDataValue()) {h=0;while (value > upper.get(h)) {h=h + 1;}if (h <= numberOfClasses) {distri.set(h,distri.get(h) + 1);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Computing distribution:",(int)progress);}int sum=0;float cumu;for (int i=0; i < numberOfClasses; i++) {sum=sum + distri.get(i);}updateProgress("Writing output:",0);str="Value" + "\t" + "Rel. Freq."+ "\t"+ "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);if (sum > 0) {cumu=0;for (int i=0; i < numberOfClasses; i++) {cumu=cumu + (float)distri.get(i) / sum;str=upper.get(i) + "\t" + (float)distri.get(i) / sum + "\t" + cumu + System.lineSeparator();streamWriter.write(str);if (cancelOp) {cancelOperation();return;}progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}}break;case "n classes with equal class size":values=SortGridValues(raster);updateProgress("Writing output:",0);str="Cum. Rel. Freq." + "\t" + "Value"+ System.lineSeparator();streamWriter.write(str);for (int i=1; i <= numberOfClasses; i++) {index=(int)((float)i / numberOfClasses * values.size()) - 1;if (index < 0) {index=0;}str=((float)index + 1) / values.size() + "\t" + values.get(index) + System.lineSeparator();streamWriter.write(str);progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}break;}raster.close();streamWriter.close();} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static int cs_scatter(Dcs A,int j,double beta,int[] w,double[] x,int mark,Dcs C,int nz){  int i, p;  int Ap[], Ai[], Ci[];  double[] Ax;  if (!Dcs_util.CS_CSC(A) || w == null || !Dcs_util.CS_CSC(C))   return (-1);  Ap=A.p;  Ai=A.i;  Ax=A.x;  Ci=C.i;  for (p=Ap[j]; p < Ap[j + 1]; p++) {    i=Ai[p];    if (w[i] < mark) {      w[i]=mark;      Ci[nz++]=i;      if (x != null)       x[i]=beta * Ax[p];    } else     if (x != null)     x[i]+=beta * Ax[p];  }  return nz;}  }
class C{  private boolean exceptionsFit(Environment env,MemberDefinition method){  ClassDeclaration e1[]=getExceptions(env);  ClassDeclaration e2[]=method.getExceptions(env);  outer:   for (int i=0; i < e1.length; i++) {    try {      ClassDefinition c1=e1[i].getClassDefinition(env);      for (int j=0; j < e2.length; j++) {        if (c1.subClassOf(env,e2[j])) {          continue outer;        }      }      if (c1.subClassOf(env,env.getClassDeclaration(idJavaLangError)))       continue outer;      if (c1.subClassOf(env,env.getClassDeclaration(idJavaLangRuntimeException)))       continue outer;      return false;    } catch (    ClassNotFound ee) {      env.error(getWhere(),"class.not.found",ee.name,method.getClassDeclaration());    }  }  return true;}  }
class C{  protected InetSocketAddress buildSocketAddressForDeployableServer(){  String portStr=configuration.getPropertyValue(JBossPropertySet.REMOTEDEPLOY_PORT);  if (portStr == null) {    portStr="1" + configuration.getPropertyValue(ServletPropertySet.PORT);  }  String addressStr=configuration.getPropertyValue(JBossPropertySet.REMOTEDEPLOY_HOSTNAME);  if (addressStr == null) {    try {      addressStr=InetAddress.getLocalHost().getCanonicalHostName();    } catch (    UnknownHostException e) {      throw new CargoException("Could not get hostname for remote deployer",e);    }  }  return new InetSocketAddress(addressStr,Integer.parseInt(portStr));}  }
class C{  public boolean isTimeoutErr(){  return timeoutErr;}  }
class C{  private Date correctTickDateForPosition(Date time,DateTickUnit unit,DateTickMarkPosition position){  Date result=time;switch (unit.getUnit()) {case DateTickUnit.MILLISECOND:case DateTickUnit.SECOND:case DateTickUnit.MINUTE:case DateTickUnit.HOUR:case DateTickUnit.DAY:    break;case DateTickUnit.MONTH:  result=calculateDateForPosition(new Month(time,this.timeZone,this.locale),position);break;case DateTickUnit.YEAR:result=calculateDateForPosition(new Year(time,this.timeZone,this.locale),position);break;default :break;}return result;}  }
class C{  public void stop() throws IOException {  in.close();  out.close();  connection.close();}  }
class C{  @Override public void endWindow(){  if (!counts.isEmpty()) {    for (    Map.Entry<K,Integer> entry : counts.entrySet()) {      outport.emit(new KeyValPair<K,Integer>(entry.getKey(),entry.getValue()));    }  }  counts=new HashMap<K,Integer>();}  }
class C{  private void heapifyDown(Object cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    Object best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && comparator.compare(best,twoheap[right]) < 0) {      bestchild=right;      best=twoheap[right];    }    if (comparator.compare(cur,best) >= 0) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public EipModelWizardInitialObjectCreationPage(String pageId){  super(pageId);}  }
class C{  void collectReferencedChunks(Set<Integer> target){  target.add(DataUtils.getPageChunkId(pos));  for (  long p : children) {    target.add(DataUtils.getPageChunkId(p));  }}  }
class C{  public void clear(){  mValues.clear();}  }
class C{  @Nullable public static Class<?> classForName(@Nullable String cls,@Nullable Class<?> dflt){  return classForName(cls,dflt,false);}  }
class C{  public boolean hasUsernameExt(){  return hasExtension(GphotoUsername.class);}  }
class C{  public static boolean isDefaultRunSyncSpeedTest(){  return DEFAULT_RUN_SYNC_SPEED_TEST;}  }
class C{  public void transform(Source source,boolean shouldRelease) throws TransformerException {  try {    if (getXPathContext().getNamespaceContext() == null) {      getXPathContext().setNamespaceContext(getStylesheet());    }    String base=source.getSystemId();    if (null == base) {      base=m_stylesheetRoot.getBaseIdentifier();    }    if (null == base) {      String currentDir="";      try {        currentDir=System.getProperty("user.dir");      } catch (      SecurityException se) {      }      if (currentDir.startsWith(java.io.File.separator))       base="file://" + currentDir; else       base="file:///" + currentDir;      base=base + java.io.File.separatorChar + source.getClass().getName();    }    setBaseURLOfSource(base);    DTMManager mgr=m_xcontext.getDTMManager();    if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {      try {        DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();        DocumentBuilder builder=builderF.newDocumentBuilder();        String systemID=source.getSystemId();        source=new DOMSource(builder.newDocument());        if (systemID != null) {          source.setSystemId(systemID);        }      } catch (      ParserConfigurationException e) {        fatalError(e);      }    }    DTM dtm=mgr.getDTM(source,false,this,true,true);    dtm.setDocumentBaseURI(base);    boolean hardDelete=true;    try {      this.transformNode(dtm.getDocument());    }  finally {      if (shouldRelease)       mgr.release(dtm,hardDelete);    }    Exception e=getExceptionThrown();    if (null != e) {      if (e instanceof javax.xml.transform.TransformerException) {        throw (javax.xml.transform.TransformerException)e;      } else       if (e instanceof org.apache.xml.utils.WrappedRuntimeException) {        fatalError(((org.apache.xml.utils.WrappedRuntimeException)e).getException());      } else {        throw new javax.xml.transform.TransformerException(e);      }    } else     if (null != m_serializationHandler) {      m_serializationHandler.endDocument();    }  } catch (  org.apache.xml.utils.WrappedRuntimeException wre) {    Throwable throwable=wre.getException();    while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {      throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();    }    fatalError(throwable);  }catch (  org.xml.sax.SAXParseException spe) {    fatalError(spe);  }catch (  org.xml.sax.SAXException se) {    m_errorHandler.fatalError(new TransformerException(se));  } finally {    m_hasTransformThreadErrorCatcher=false;    reset();  }}  }
class C{  public int length(){  return ids.length;}  }
class C{  public void sectionOccupancyChanged(){  checkAutoRelease();  if (allocatedSectionTableModel != null) {    allocatedSectionTableModel.fireTableDataChanged();  }  allocationRequestTableModel.fireTableDataChanged();}  }
class C{  protected void configOutputs(Element model){  if (model == null) {    log.debug("configOutputs was given a null model");    return;  }  Attribute a=model.getAttribute("numOuts");  try {    if (a != null) {      numItems=Integer.valueOf(a.getValue()).intValue();    }  } catch (  Exception e) {    log.error("error handling decoder's numOuts value");  }  if (numItems > MAX_ITEMS) {    log.error("numOuts=" + numItems + " exceeds the maximum number of items ("+ MAX_ITEMS+ ") defined in the code");    numItems=Math.min(numItems,MAX_ITEMS);  }  a=model.getAttribute("numFns");  try {    if (a != null) {      numRows=Integer.valueOf(a.getValue()).intValue();    }  } catch (  Exception e) {    log.error("error handling decoder's numFns value");  }  if (numRows > MAX_ROWS) {    log.error("numFns=" + numRows + " exceeds the maximum number of rows ("+ MAX_ROWS+ ") defined in the code");    numRows=Math.min(numRows,MAX_ROWS);  }  log.debug("numFns, numOuts {}, {}",numRows,numItems);  for (int item=0; item < MAX_ITEMS; item++) {    loadSplitLabel(item,itemDescESU[item]);  }  List<Element> elemList=model.getChildren("output");  log.debug("output scan starting with {} elements",elemList.size());  for (int i=0; i < elemList.size(); i++) {    Element e=elemList.get(i);    String name=e.getAttribute("name").getValue();    try {      int outputNum=Integer.valueOf(name).intValue();      String at=LocaleSelector.getAttribute(e,"label");      if (at != null) {        loadSplitLabel(outputNum - 1,at);      }    } catch (    java.lang.NumberFormatException ex) {      if (i < MAX_ITEMS) {        itemName[i][0]=name;        itemName[i][1]="";        itemName[i][2]="";        String at;        if ((at=LocaleSelector.getAttribute(e,"label")) != null) {          loadSplitLabel(i,name + "|" + at);        }      }    }  }}  }
class C{  public AugmentedBalancedTree(){  super();}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public String globalInfo(){  return "An instance filter that changes a percentage of a given" + " attributes values. The attribute must be nominal." + " Missing value can be treated as value itself.";}  }
class C{  public static Ed25519GroupElement p2(final Ed25519FieldElement X,final Ed25519FieldElement Y,final Ed25519FieldElement Z){  return new Ed25519GroupElement(CoordinateSystem.P2,X,Y,Z,null);}  }
class C{  public static RyaStatement deserializeStatement(Key key,Value value) throws RyaTypeResolverException, IOException {  assert key != null;  assert value != null;  byte[] entityBytes=key.getRowData().toArray();  byte[] predicateBytes=key.getColumnFamilyData().toArray();  byte[] data=key.getColumnQualifierData().toArray();  long timestamp=key.getTimestamp();  byte[] columnVisibility=key.getColumnVisibilityData().toArray();  byte[] valueBytes=value.get();  int split=Bytes.indexOf(data,DELIM_BYTES);  byte[] columnFamily=Arrays.copyOf(data,split);  byte[] edgeBytes=Arrays.copyOfRange(data,split + DELIM_BYTES.length,data.length);  split=Bytes.indexOf(edgeBytes,DELIM_BYTES);  String otherNodeVar=new String(Arrays.copyOf(edgeBytes,split));  byte[] otherNodeBytes=Arrays.copyOfRange(edgeBytes,split + DELIM_BYTES.length,edgeBytes.length - 2);  byte[] typeBytes=Arrays.copyOfRange(edgeBytes,edgeBytes.length - 2,edgeBytes.length);  byte[] objectBytes;  RyaURI subject;  RyaURI predicate=new RyaURI(new String(predicateBytes));  RyaType object;  RyaURI context=null;switch (otherNodeVar) {case "subject":    subject=new RyaURI(new String(otherNodeBytes));  objectBytes=Bytes.concat(entityBytes,typeBytes);break;case "object":subject=new RyaURI(new String(entityBytes));objectBytes=Bytes.concat(otherNodeBytes,typeBytes);break;default :throw new IOException("Failed to deserialize entity-centric index row. " + "Expected 'subject' or 'object', encountered: '" + otherNodeVar + "'");}object=RyaContext.getInstance().deserialize(objectBytes);if (columnFamily != null && columnFamily.length > 0) {context=new RyaURI(new String(columnFamily));}return new RyaStatement(subject,predicate,object,context,null,columnVisibility,valueBytes,timestamp);}  }
class C{  public NetMaskImpl(String a,int prefix) throws UnknownHostException {  super(a);  this.prefix=prefix;  subnet=extractSubNet(getAddress().getAddress());}  }
class C{  public TypeRef createTypeRef(){  TypeRefImpl typeRef=new TypeRefImpl();  return typeRef;}  }
class C{  private void invokePostConstruct(Object instance,JndiNameEnvironment envDescriptor) throws InjectionException {  LinkedList<Method> postConstructMethods=new LinkedList<Method>();  Class<?> nextClass=instance.getClass();  while ((!Object.class.equals(nextClass)) && (nextClass != null)) {    InjectionInfo injInfo;    Object argument=((usingNewAPI(envDescriptor)) ? nextClass : nextClass.getName());    try {      injInfo=(InjectionInfo)getInjectionInfoMethod.invoke(envDescriptor,argument);    } catch (    Exception e) {      throw new InjectionException(e.getMessage());    }    if (injInfo.getPostConstructMethodName() != null) {      Method postConstructMethod=getPostConstructMethod(injInfo,nextClass);      postConstructMethods.addFirst(postConstructMethod);    }    nextClass=nextClass.getSuperclass();  }  for (  Method postConstructMethod : postConstructMethods) {    invokeLifecycleMethod(postConstructMethod,instance);  }}  }
class C{  public int determineCutOffDay(long subscriptionKey){  int cutOffDay=0;  Date latestEntry=new Date(Long.MIN_VALUE);  for (  SubscriptionHistory sh : getSubscriptionHistoryEntries(subscriptionKey)) {    if (sh.getModdate().after(latestEntry)) {      latestEntry=sh.getModdate();      cutOffDay=sh.getCutOffDay();    }  }  return cutOffDay;}  }
class C{  public ServerBartender selfServer(){  return _selfServer;}  }
class C{  public boolean isConnected(){  double time_since_last_update=Timer.getFPGATimestamp() - this.last_valid_packet_time;  return time_since_last_update <= 1.0;}  }
class C{  public void deleteExistingResults(){  ArrayList<Key> keys=new ArrayList<Key>();  List<Entity> results=getResults();  for (  Entity entity : results) {    keys.add(entity.getKey());  }  service.delete(keys);}  }
class C{  public JSONObject(Map<?,?> map){  this.map=map instanceof LinkedHashMap ? new LinkedHashMap<String,Object>() : map instanceof TreeMap<?,?> ? new TreeMap<>() : new HashMap<String,Object>();  if (map != null) {    for (    final Entry<?,?> e : map.entrySet()) {      final Object value=e.getValue();      if (value != null) {        this.map.put(String.valueOf(e.getKey()),wrap(value));      }    }  }}  }
class C{  public static void printArrayDeep(Object v,PrintStream out){  ArrayIterator<Boolean> i=arrayIterator(v,getArrayLengths(v));  while (i.hasNext())   System.out.println(Arrays.toString(i.getIndices()) + " = " + i.next());}  }
class C{  public void add(VCard vcard){  vcards.add(vcard);}  }
class C{  public void textFont(PFont which,float size){  g.textFont(which,size);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private String encodeProduct(){  StringBuffer tokens=new StringBuffer();  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());  }  return tokens.toString();}  }
class C{  public Collection<GridCacheEntryInfo> preloadEntries(){  return preloadEntries == null ? Collections.<GridCacheEntryInfo>emptyList() : preloadEntries;}  }
class C{  public boolean hasAttribute(String name){  return DTM.NULL != dtm.getAttributeNode(node,null,name);}  }
class C{  public void add(Drawable drawable){  mOverlayViewGroup.add(drawable);}  }
class C{  public void share(FacebookCallback<Sharer.Result> callback){  if (!this.canShare()) {    ShareInternalUtility.invokeCallbackWithError(callback,"Insufficient permissions for sharing content via Api.");    return;  }  final ShareContent shareContent=this.getShareContent();  try {    ShareContentValidation.validateForApiShare(shareContent);  } catch (  FacebookException ex) {    ShareInternalUtility.invokeCallbackWithException(callback,ex);    return;  }  if (shareContent instanceof ShareLinkContent) {    this.shareLinkContent((ShareLinkContent)shareContent,callback);  } else   if (shareContent instanceof SharePhotoContent) {    this.sharePhotoContent((SharePhotoContent)shareContent,callback);  } else   if (shareContent instanceof ShareVideoContent) {    this.shareVideoContent((ShareVideoContent)shareContent,callback);  } else   if (shareContent instanceof ShareOpenGraphContent) {    this.shareOpenGraphContent((ShareOpenGraphContent)shareContent,callback);  }}  }
class C{  public Channel createChannel(){  ChannelImpl channel=new ChannelImpl();  return channel;}  }
class C{  public int damageDropped(IBlockState state){  return 0;}  }
class C{  private static DocBeanInfo genDocletInfo(String text,String name){  int beanflags=0;  String desc="null";  String displayname="null";  String propertyeditorclass="null";  String customizerclass="null";  String value="null";  HashMap attribs=null;  HashMap enums=null;  int index;  for (int j=0; j < ATTRIBUTE_NAMES.length; j++) {    index=0;    if ((index=text.indexOf(ATTRIBUTE_NAMES[j])) != -1) {      value=getValue((text).substring(index),ATTRIBUTE_NAMES[j]);      if (ATTRIBUTE_NAMES[j].equalsIgnoreCase("attribute")) {        attribs=getAttributeMap(value," ");      }      if (ATTRIBUTE_NAMES[j].equalsIgnoreCase("enum")) {        enums=getAttributeMap(value," \n");      } else       if (ATTRIBUTE_NAMES[j].equals("displayname")) {        displayname=value;      } else       if (ATTRIBUTE_NAMES[j].equalsIgnoreCase("propertyeditorclass")) {        propertyeditorclass=value;      } else       if (ATTRIBUTE_NAMES[j].equalsIgnoreCase("customizerclass")) {        customizerclass=value;      } else       if ((ATTRIBUTE_NAMES[j].equalsIgnoreCase("bound")) && (value.equalsIgnoreCase(TRUE)))       beanflags=beanflags | DocBeanInfo.BOUND; else       if ((ATTRIBUTE_NAMES[j].equalsIgnoreCase("expert")) && (value.equalsIgnoreCase(TRUE)))       beanflags=beanflags | DocBeanInfo.EXPERT; else       if ((ATTRIBUTE_NAMES[j].equalsIgnoreCase("constrained")) && (value.equalsIgnoreCase(TRUE)))       beanflags=beanflags | DocBeanInfo.CONSTRAINED; else       if ((ATTRIBUTE_NAMES[j].equalsIgnoreCase("hidden")) && (value.equalsIgnoreCase(TRUE)))       beanflags=beanflags | DocBeanInfo.HIDDEN; else       if ((ATTRIBUTE_NAMES[j].equalsIgnoreCase("preferred")) && (value.equalsIgnoreCase(TRUE)))       beanflags=beanflags | DocBeanInfo.PREFERRED; else       if (ATTRIBUTE_NAMES[j].equalsIgnoreCase("description")) {        desc=value;      }    }  }  return new DocBeanInfo(name,beanflags,desc,displayname,propertyeditorclass,customizerclass,attribs,enums);}  }
class C{  public void configureAngles(int totalAngle,int rotateAngle){  if (totalAngle <= 0) {    throw new IllegalArgumentException("Total angle of the arc must be > 0");  }  final int circleStartPosition=270;  final int arcStartPosition=90;  final int degreesInCircle=360;  mTotalAngle=totalAngle;  mRotateAngle=(circleStartPosition + rotateAngle) % degreesInCircle;  if (mTotalAngle < degreesInCircle) {    mRotateAngle=((arcStartPosition + (degreesInCircle - totalAngle) / 2) + rotateAngle) % degreesInCircle;  }  if (mChartSeries != null) {    for (    ChartSeries chartSeries : mChartSeries) {      chartSeries.setupView(mTotalAngle,mRotateAngle);    }  }}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(Map<K,V> map,boolean reversed){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.create(map,reversed));}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TCLASS__EXTERNAL:    return isExternal();case TypesPackage.TCLASS__DECLARED_ABSTRACT:  return isDeclaredAbstract();case TypesPackage.TCLASS__DECLARED_N4JS:return isDeclaredN4JS();case TypesPackage.TCLASS__DECLARED_FINAL:return isDeclaredFinal();case TypesPackage.TCLASS__DECLARED_POLYFILL:return isDeclaredPolyfill();case TypesPackage.TCLASS__DECLARED_STATIC_POLYFILL:return isDeclaredStaticPolyfill();case TypesPackage.TCLASS__OBSERVABLE:return isObservable();case TypesPackage.TCLASS__SUPER_CLASS_REF:return getSuperClassRef();case TypesPackage.TCLASS__IMPLEMENTED_INTERFACE_REFS:return getImplementedInterfaceRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addAssignedVirtualArrays(Set<String> virtualArrayURIs){  if ((virtualArrayURIs != null) && (!virtualArrayURIs.isEmpty())) {    HashSet<String> addVirtualArrays=new HashSet<String>();    addVirtualArrays.addAll(virtualArrayURIs);    if (_assignedVirtualArrays == null) {      setAssignedVirtualArrays(new StringSet());      _assignedVirtualArrays.addAll(addVirtualArrays);    } else {      _assignedVirtualArrays.addAll(addVirtualArrays);    }    updateVirtualArrayTags();  }}  }
class C{  protected void DrawExplicitLabels(int i){  paint.setTextAlign(Paint.Align.RIGHT);  if (i == 0)   paint.setTextAlign(Paint.Align.LEFT);  String x_values=String.format("%.1f",i * x_axis_ratio);  paint.setColor(Color.BLACK);  if (labels != null)   canvas.drawText(labels.get(i),horizontal_width - 10,height - 38,paint); else   canvas.drawText(x_values,horizontal_width - 10,height - 38,paint);}  }
class C{  public static byte combine2bytesToOne(byte high,byte low){  if (high < 0 || high > 0xf || low < 0 || low > 0xf) {    throw new RuntimeException("Out of Boundary");  }  return (byte)(high << 4 | low);}  }
class C{  public WebApp(WebAppBuilder builder){  _id=builder.id();  _path=builder.path();  _classLoader=builder.classLoader();  Objects.requireNonNull(_classLoader);  if (_classLoader != Thread.currentThread().getContextClassLoader()) {    throw new IllegalStateException();  }  _config=builder.config();  InjectBuilderAmp injectBuilder=builder.injectBuilder();  injectBuilder.context(true);  injectBuilder.get();  _services=builder.serviceBuilder().raw();  builder.build(this);  _configException=builder.configException();  _config=builder.config();  _injectManager=injectBuilder.get();  try {    _services=builder.serviceBuilder().get();  } catch (  Exception e) {    log.log(Level.FINER,e.toString(),e);    e.printStackTrace();    throw e;  }  _buffers=builder.buffers();  Objects.requireNonNull(_buffers);  _router=builder.buildRouter(this);  Objects.requireNonNull(_router);  _services=builder.serviceBuilder().start();  int prime=287093;  _idGenerator=IdentityGenerator.newGenerator().node(_services.node().nodeIndex()).increment(prime).get();  _bodyResolver=builder.bodyResolver();  _wsManager=builder.webSocketManager();}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  public boolean isEdgeFeasible(int edgeType){  IsNullValue decision=getDecision(edgeType);  return decision != null;}  }
class C{  private static String toString(byte[] ranges,int dimension){  return "[" + Integer.toString(decodeMin(ranges,dimension)) + " : "+ Integer.toString(decodeMax(ranges,dimension))+ "]";}  }
class C{  public void process(HttpServletResponse response) throws IOException {  setHeaders(response);  response.setStatus(getStatusCode());  sendStreamToClient(response);}  }
class C{  private boolean saveIni(){  Ini.setAdempiereHome(m_adempiereHome.getAbsolutePath());  String ccType=Database.DB_ORACLE;  if (getDatabaseType().equals(DBTYPE_POSTGRESQL))   ccType=Database.DB_POSTGRESQL; else   if (getDatabaseType().equals(DBTYPE_MYSQL))   ccType=Database.DB_MYSQL;  CConnection cc=null;  try {    cc=CConnection.get(ccType,getDatabaseServer(),getDatabasePort(),getDatabaseName(),getDatabaseUser(),getDatabasePassword());    cc.setAppsHost(getAppsServer());    cc.setAppsPort(getAppsServerJNPPort());    cc.setConnectionProfile(CConnection.PROFILE_LAN);  } catch (  Exception e) {    log.log(Level.SEVERE,"connection",e);    return false;  }  if (cc == null) {    log.warning("No Connection");    return false;  }  Ini.setProperty(Ini.P_CONNECTION,cc.toStringLong());  Ini.saveProperties(false);  return true;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeUTF(JsonUtil.toJson(data));  out.defaultWriteObject();}  }
class C{  private void createFailIfTheseAreCreated(){  failIfTheseAreCreated=new HashSet<SootClass>();  failIfTheseAreCreated.add(Scene.v().getSootClass("android.util.AtomicFile"));  failIfTheseAreCreated.add(Scene.v().getSootClass("java.lang.ProcessBuilder"));  failIfTheseAreCreated.add(Scene.v().getSootClass("java.io.FileDescriptor"));  failIfTheseAreCreated.add(Scene.v().getSootClass("android.content.res.AssetFileDescriptor"));  failIfTheseAreCreated.add(Scene.v().getSootClass("java.io.RandomAccessFile"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void ensureCommandLineNotNull() throws IllegalStateException {  Assert.notNull(commandLine,"The command line hasn't been initialized.");}  }
class C{  @Override public InputStream openInputStream(){  return new ByteArrayInputStream(getByteCode());}  }
class C{  private void buildPageTree(final DefaultMutableTreeNode parentNode,final List<IPage<?>> pageList){  for (  final IPage<?> page : pageList) {    final DefaultMutableTreeNode pageNode=new DefaultMutableTreeNode(page);    parentNode.add(pageNode);    if (page.getChildList() != null && !page.getChildList().isEmpty())     buildPageTree(pageNode,page.getChildList());  }}  }
class C{  private static void loadExtensionBundles(ConfigServerImpl cs,ConfigImpl config,Document doc,Log log){  Element parent=getChildByName(doc.getDocumentElement(),"extensions");  Element[] children=getChildren(parent,"rhextension");  String strBundles;  Map<String,BundleDefinition> extensionBundles=new HashMap<String,BundleDefinition>();  List<RHExtension> extensions=new ArrayList<RHExtension>();  for (  Element child : children) {    RHExtension rhe;    try {      rhe=new RHExtension(config,child);      if (rhe.getStartBundles())       rhe.deployBundles();      extensions.add(rhe);    } catch (    Exception e) {      log.error("load-extension",e);      continue;    }    BundleInfo[] bfs=rhe.getBundles();    BundleInfo bf;    BundleDefinition bd;    for (int i=0; i < bfs.length; i++) {      bf=bfs[i];      extensionBundles.put(bf.getSymbolicName() + "|" + bf.getVersionAsString(),bd=bf.toBundleDefinition());      try {        if (rhe.getStartBundles()) {          Bundle b=bd.getBundle(config);          OSGiUtil.startIfNecessary(b);        }      } catch (      BundleException e) {        log.error("OSGi",e);      }    }  }  config.setExtensions(extensions.toArray(new RHExtension[extensions.size()]));  config.setExtensionBundleDefintions(extensionBundles);}  }
class C{  public static void checkAttributes(){  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  assertTrue(region1.getAttributes().getEnableConflation());  assertTrue(region1.getAttributes().getEnableAsyncConflation());}  }
class C{  protected int _columnRank(int rank){  return columnZero + rank * columnStride;}  }
class C{  private static void legacyMergeSort(Object[] a){  Object[] aux=a.clone();  mergeSort(aux,a,0,a.length,0);}  }
class C{  public ForwardingTelemetryAdapter(final SenderFactory senderFactory,final int instanceNo,final int totalNoOfInstances){  super(instanceNo,totalNoOfInstances);  this.senderFactory=Objects.requireNonNull(senderFactory);}  }
class C{  public void cleanupStagingDirectory(){  try {    if (stagingDir != null) {      FileSystem fs=job.fileSystem(stagingDir.toUri(),ctx.getJobConf());      fs.delete(stagingDir,true);    }  } catch (  Exception e) {    log.error("Failed to remove job staging directory [path=" + stagingDir + ", jobId="+ jobId+ ']',e);  }}  }
class C{  public void trace(Object message,Throwable exception){  log(Level.FINEST,String.valueOf(message),exception);}  }
class C{  public <T extends DataObject>List<T> list(String alias){  JClass jc=lookupAlias(alias);  if (jc.cacheValid == false) {    jc.setCacheValid(true);    Set<URI> uris=jc.getUris();    for (    URI uri : uris) {      T object=(T)jc.queryObject(engine,uri);      jc.getCachedObjects().put(object.getId(),object);    }  }  return new ArrayList<T>(jc.getCachedObjects().values());}  }
class C{  private IndexType(String name){  this.name=name;}  }
class C{  public void createRelation(String relationId,String relationTypeName,RoleList roleList) throws RelationServiceNotRegisteredException, IllegalArgumentException, RoleNotFoundException, InvalidRelationIdException, RelationTypeNotFoundException, InvalidRoleValueException {  isActive();  if (relationId == null || relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"createRelation",new Object[]{relationId,relationTypeName,roleList});  RelationSupport relObj=new RelationSupport(relationId,myObjName,relationTypeName,roleList);  addRelationInt(true,relObj,null,relationId,relationTypeName,roleList);  RELATION_LOGGER.exiting(RelationService.class.getName(),"createRelation");  return;}  }
class C{  private void explodePhantom(){  if (m_isExplodePhantom && m_qtyRequiredPhantom != null) {    MProduct parent=MProduct.get(getCtx(),getM_Product_ID());    int PP_Product_BOM_ID=MPPProductBOM.getBOMSearchKey(parent);    if (PP_Product_BOM_ID <= 0) {      return;    }    MPPProductBOM bom=MPPProductBOM.get(getCtx(),PP_Product_BOM_ID);    if (bom != null) {      for (      MPPProductBOMLine PP_Product_BOMline : bom.getLines()) {        MPPOrderBOMLine PP_Order_BOMLine=new MPPOrderBOMLine(PP_Product_BOMline,getPP_Order_ID(),getPP_Order_BOM_ID(),getM_Warehouse_ID(),get_TrxName());        PP_Order_BOMLine.setAD_Org_ID(getAD_Org_ID());        PP_Order_BOMLine.setQtyOrdered(m_qtyRequiredPhantom);        PP_Order_BOMLine.saveEx();      }    }    m_isExplodePhantom=false;  }}  }
class C{  protected Anonymous_traceType_2_Impl(){  super();}  }
class C{  public boolean isUseLastIp(){  return lastIp != null;}  }
class C{  public static Lexicon buildTrivialLexicon(){  Lexicon l=new Lexicon();  l.addLexWords("ARTICLE","the","0.50","a","0.50");  l.addLexWords("NOUN","man","0.20","woman","0.20","table","0.20","shoelace","0.20","saw","0.20");  l.addLexWords("PRONOUN","i","0.40","you","0.40","it","0.20");  l.addLexWords("VERB","saw","0.30","liked","0.30","feel","0.40");  l.addLexWords("ADVERB","happily","0.30","sadly","0.20","morosely","0.50");  return l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:02.917 -0500",hash_original_method="C44DBC63D87836D797664A5A599046E9",hash_generated_method="7149B29A53D042BA7D3F427E1203C70A") public boolean executeLoad(){  String url=mListener.url();  if (mInterceptResponse != null) {    if (mListener.isSynchronous()) {      mInterceptResponse.loader(mListener).load();    } else {      WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_STREAMLOADER,mInterceptResponse.loader(mListener)).sendToTarget();    }    return true;  } else   if (URLUtil.isNetworkUrl(url)) {    if (mSettings.getBlockNetworkLoads()) {      mListener.error(EventHandler.ERROR_BAD_URL,mListener.getContext().getString(com.android.internal.R.string.httpErrorBadUrl));      return false;    }    if (!URLUtil.verifyURLEncoding(mListener.host())) {      mListener.error(EventHandler.ERROR_BAD_URL,mListener.getContext().getString(com.android.internal.R.string.httpErrorBadUrl));      return false;    }    mNetwork=Network.getInstance(mListener.getContext());    if (mListener.isSynchronous()) {      return handleHTTPLoad();    }    WebViewWorker.getHandler().obtainMessage(WebViewWorker.MSG_ADD_HTTPLOADER,this).sendToTarget();    return true;  } else   if (handleLocalFile(url,mListener,mSettings)) {    return true;  }  if (DebugFlags.FRAME_LOADER) {    Log.v(LOGTAG,"FrameLoader.executeLoad: url protocol not supported:" + mListener.url());  }  mListener.error(EventHandler.ERROR_UNSUPPORTED_SCHEME,mListener.getContext().getText(com.android.internal.R.string.httpErrorUnsupportedScheme).toString());  return false;}  }
class C{  protected HttpResponse doReceiveResponse(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  int statuscode=0;  while (response == null || statuscode < HttpStatus.SC_OK) {    response=conn.receiveResponseHeader();    if (canResponseHaveBody(request,response)) {      conn.receiveResponseEntity(response);    }    statuscode=response.getStatusLine().getStatusCode();  }  return response;}  }
class C{  protected EventRaisingExpressionImpl(){  super();}  }
class C{  public IntegerGenerator(int max,int length){  this.length=length;  this.max=max;}  }
class C{  public void applyLayout(){  layout.setInitialLocation(getPosition());  layout.layoutNeurons(getNeuronList());}  }
class C{  public static String childElementValue(Element element,String childElementName){  if (element == null)   return null;  Element childElement=firstChildElement(element,childElementName);  return elementValue(childElement);}  }
class C{  static void typePropagation(IR ir){  Register elemNext;  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=elemNext) {    elemNext=reg.getNext();    if (reg.useList == null) {      continue;    }    if (reg.defList == null) {      continue;    }    if (!reg.isSSA()) {      continue;    }    RegisterOperand lhs=reg.defList;    Instruction instr=lhs.instruction;    Operator op=instr.operator();    if (!op.isMove()) {      continue;    }    Operand rhsOp=Move.getVal(instr);    if (!(rhsOp instanceof RegisterOperand)) {      continue;    }    RegisterOperand rhs=(RegisterOperand)rhsOp;    lhs.copyTypeFrom(rhs);    for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {      if (ClassLoaderProxy.includesType(rhs.getType(),use.getType()) == YES) {        continue;      }      if (rhs.getType().isPrimitiveType() && !use.getType().isPrimitiveType()) {        continue;      }      use.copyTypeFrom(rhs);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.896 -0400",hash_original_method="0CFB1A71152A30E9C19BA043AD8B50FF",hash_generated_method="F765853CEB70044C2B5E4F540B6E0EEE") public BOMInputStream(InputStream delegate,boolean include,ByteOrderMark... boms){  super(delegate);  if (boms == null || boms.length == 0) {    throw new IllegalArgumentException("No BOMs specified");  }  this.include=include;  Arrays.sort(boms,ByteOrderMarkLengthComparator);  this.boms=Arrays.asList(boms);}  }
class C{  public AddressLookupInterface newInstance(){  return new AddressLookup();}  }
class C{  public void dump(){  log.fine(getName() + (isDestroyed() ? " (destroyed)" : ""));  log.fine("- Parent=" + getParent());  Thread[] list=new Thread[activeCount()];  log.fine("- Count=" + enumerate(list,true));  for (int i=0; i < list.length; i++)   log.fine("-- " + list[i]);}  }
class C{  private boolean processAttributes(Attributes attributes) throws SAXException {  if (currentSection.attributeProcessing == Mode.ATTRIBUTE_PROCESSING_NONE || attributes.getLength() == 0)   return false;  attributeNamespaceIndexSets.clear();  for (int i=0, len=attributes.getLength(); i < len; i++) {    String ns=attributes.getURI(i);    IntSet indexSet=(IntSet)attributeNamespaceIndexSets.get(ns);    if (indexSet == null) {      indexSet=new IntSet();      attributeNamespaceIndexSets.put(ns,indexSet);    }    indexSet.add(i);  }  if (currentSection.attributeProcessing == Mode.ATTRIBUTE_PROCESSING_QUALIFIED && attributeNamespaceIndexSets.size() == 1 && attributeNamespaceIndexSets.get("") != null)   return false;  Vector handlerModes=currentSection.activeHandlersAttributeModeUsage;  activeHandlersAttributeIndexSets.setSize(handlerModes.size());  for (int i=0, len=handlerModes.size(); i < len; i++)   activeHandlersAttributeIndexSets.setElementAt(new IntSet(),i);  boolean transform=false;  Vector validationModes=currentSection.attributeValidationModeUsages;  for (Enumeration e=attributeNamespaceIndexSets.keys(); e.hasMoreElements(); ) {    String ns=(String)e.nextElement();    IntSet indexSet=(IntSet)attributeNamespaceIndexSets.get(ns);    attributeSchemas.clear();    filteredAttributes=null;    attributeNamespaceRejected=false;    for (int i=0, len=handlerModes.size(); i < len; i++) {      ModeUsage modeUsage=(ModeUsage)handlerModes.elementAt(i);      AttributeActionSet actions=processAttributeSection(modeUsage,ns,indexSet,attributes);      if (actions.getAttach())       ((IntSet)activeHandlersAttributeIndexSets.get(i)).addAll(indexSet); else       transform=true;    }    for (int i=0, len=validationModes.size(); i < len; i++) {      ModeUsage modeUsage=(ModeUsage)validationModes.elementAt(i);      processAttributeSection(modeUsage,ns,indexSet,attributes);    }  }  return transform;}  }
class C{  public static final TypeElement elementFromDeclaration(ClassTree node){  TypeElement elt=(TypeElement)InternalUtils.symbol(node);  return elt;}  }
class C{  public void addListener(final IDatabaseManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  protected void testSingleScore(OutlierResult result,int id,double expected){  assertNotNull("No outlier result",result);  assertNotNull("No score result.",result.getScores());  final DBID dbid=DBIDUtil.importInteger(id);  assertNotNull("No result for ID " + id,result.getScores().doubleValue(dbid));  double actual=result.getScores().doubleValue(dbid);  assertEquals("Outlier score of object " + id + " doesn't match.",expected,actual,0.0001);}  }
class C{  public static InfoRegister importFolder(User user,Integer bookId,List atts,List inter,Map documents,String entidad) throws ValidationException, SecurityException, BookException, SessionException, TecDocException, ParseException, AttributesException {  InfoRegister result=null;  String sessionID=null;  try {    sessionID=Login.login(user,entidad);    BookSession.openBook(sessionID,bookId,entidad);    Integer launchDistOutRegister=RegisterServicesUtil.getInvesConfActions(entidad);    RegisterServicesUtil.canCreateFolder(sessionID,bookId,documents,user,atts,entidad,false);    AxSf axsfQ=BookSession.getFormFormat(sessionID,bookId,entidad);    FieldFormat fieldFormat=RegisterServicesUtil.getFieldFormat(sessionID,bookId);    Map translatedIds=RegisterServicesUtil.getFieldsWithSustitute(atts,axsfQ,sessionID,bookId,entidad);    AxSf newAxSF=RegisterServicesUtil.initInOrOutFolder(user,axsfQ);    newAxSF=RegisterServicesUtil.completeFolderImport(translatedIds,axsfQ,newAxSF,user.getLocale(),atts,fieldFormat);    FolderDataSession data=Register.importNewFolder(sessionID,bookId,newAxSF,inter,documents,launchDistOutRegister,user.getLocale(),entidad);    result=ConsultRegister.consultRegisterInfo(bookId,data.getAxsfNew(),data.getNewRegisterID(),data.getScrofic(),data.getUserName(),user.getLocale());  }  finally {    BookSession.closeBook(sessionID,bookId);    SecuritySession.logout(sessionID,entidad);  }  return result;}  }
class C{  @ReactMethod public void stopRecordingFps(double animationStopTimeMs){  if (mFrameCallback == null) {    return;  }  checkAPILevel();  mFrameCallback.stop();  FpsDebugFrameCallback.FpsInfo fpsInfo=mFrameCallback.getFpsInfo((long)animationStopTimeMs);  if (fpsInfo == null) {    Toast.makeText(getReactApplicationContext(),"Unable to get FPS info",Toast.LENGTH_LONG);  } else {    String fpsString=String.format(Locale.US,"FPS: %.2f, %d frames (%d expected)",fpsInfo.fps,fpsInfo.totalFrames,fpsInfo.totalExpectedFrames);    String jsFpsString=String.format(Locale.US,"JS FPS: %.2f, %d frames (%d expected)",fpsInfo.jsFps,fpsInfo.totalJsFrames,fpsInfo.totalExpectedFrames);    String debugString=fpsString + "\n" + jsFpsString+ "\n"+ "Total Time MS: "+ String.format(Locale.US,"%d",fpsInfo.totalTimeMs);    FLog.d(ReactConstants.TAG,debugString);    Toast.makeText(getReactApplicationContext(),debugString,Toast.LENGTH_LONG).show();  }  mFrameCallback=null;}  }
class C{  public static void closeApplication(Activity activity){  activity.finish();  killCurrentProcess();}  }
class C{  protected void addCrossing(BoundaryCrossing bc){  crossings.add(bc);}  }
class C{  public void installUI(JComponent c){  if (!(c instanceof RTextArea)) {    throw new Error("RTextAreaUI needs an instance of RTextArea!");  }  super.installUI(c);}  }
class C{  public LevelSet(LevelSetConfig config){  if (config == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","missingConfig"));  }  if (config.sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","missingSector"));  }  if (config.firstLevelDelta <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidTileDelta"));  }  if (config.numLevels < 1) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidNumLevels"));  }  if (config.tileWidth < 1 || config.tileHeight < 1) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidWidthOrHeight"));  }  this.sector.set(config.sector);  this.firstLevelDelta=config.firstLevelDelta;  this.tileWidth=config.tileWidth;  this.tileHeight=config.tileHeight;  this.levels=new Level[config.numLevels];  this.assembleLevels();}  }
class C{  public void write(byte[] data,int offset,int count){  byte[] tmp=new byte[count];  System.arraycopy(data,offset,tmp,0,count);  this.uploader.upload(tmp);}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  String message=data.getString("message");  Timber.d("From: %s",from);  Timber.d("Message: %s",message);  Timber.d("Bundle: %s",data.toString());  sendNotification(data);}  }
class C{  public static File widgetsDir(){  return new File(imagesDir(),DEFAULT_DIR_NAME_WIDGETS);}  }
class C{  public byte[] encrypt(byte[] clear){  int paddedSize=((clear.length / 8) + (((clear.length % 8) == 0) ? 0 : 1)) * 2;  int[] buffer=new int[paddedSize + 1];  buffer[0]=clear.length;  pack(clear,buffer,1);  brew(buffer);  return unpack(buffer,0,buffer.length * 4);}  }
class C{  public static <T>T[] append(T[] array,int currentSize,T element){  assert currentSize <= array.length;  if (currentSize + 1 > array.length) {    @SuppressWarnings("unchecked") T[] newArray=(T[])new Object[growSize(currentSize)];    System.arraycopy(array,0,newArray,0,currentSize);    array=newArray;  }  array[currentSize]=element;  return array;}  }
class C{  public static BigDecimal base(BigDecimal p_Amount,int p_C_CurrencyFrom_ID,Timestamp p_ConversionDate,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException {  if (p_Amount == null || p_C_CurrencyFrom_ID == 0)   return null;  if (p_Amount.signum() == 0)   return p_Amount;  String sql="SELECT ac.C_Currency_ID " + "FROM AD_ClientInfo ci" + " INNER JOIN C_AcctSchema ac ON (ci.C_AcctSchema1_ID=ac.C_AcctSchema_ID) "+ "WHERE ci.AD_Client_ID=?";  int C_CurrencyTo_ID=Adempiere.getSQLValue(sql,p_AD_Client_ID);  if (p_C_CurrencyFrom_ID == C_CurrencyTo_ID)   return p_Amount;  return convert(p_Amount,p_C_CurrencyFrom_ID,C_CurrencyTo_ID,p_ConversionDate,0,p_AD_Client_ID,p_AD_Org_ID);}  }
class C{  public Label(String tag){  id=tag.intern();  opc=opc_label;  operand=null;}  }
class C{  public boolean isSelected(){  return fIsSelected;}  }
class C{  public static String buildString(List<Keyword> keywords){  if (keywords == null || keywords.isEmpty())   return null;  if (keywords.size() == 1)   return keywords.get(0).getName();  StringBuilder sb=new StringBuilder();  sb.append(keywords.get(0).getName());  for (int i=1; i < keywords.size(); i++) {    sb.append(", " + keywords.get(i).getName());  }  return sb.toString();}  }
class C{  public void parse(String line,String timeKey) throws Exception {  if (line.startsWith(FLAG)) {    String[] items=line.split(",");    if (!items[1].equals(timeKey)) {      DiskUsageType type=DiskUsageType.getType(items[0]);      if (type == null) {        return;      }      List<Usage> list=diskMap.get(type);      if (list == null) {        list=new ArrayList<Usage>();        diskMap.put(type,list);      }      for (int i=2; i < items.length; ++i) {        Usage usage=new Usage();        usage.setDiskUsageTyp(type);        usage.setName(items[i]);        list.add(usage);      }    } else {      DiskUsageType type=DiskUsageType.getType(items[0]);      if (type == null) {        return;      }      List<Usage> list=diskMap.get(type);      if (list == null) {        return;      }      for (int i=2; i < items.length; ++i) {        float value=NumberUtils.toFloat(items[i]);        if (value > 0) {          list.get(i - 2).setValue(value);        }      }    }  } else   if (PATTERN.matcher(line).find()) {    String[] tmp=line.split(",\"");    if (tmp.length > 0) {      String[] item=tmp[tmp.length - 1].split("\\s+");      if (item.length != 6 || !item[4].contains("%")) {        return;      }      List<Usage> list=diskMap.get(DiskUsageType.busy);      String[] tp=item[0].split("/");      String mount=tp[tp.length - 1];      for (      Usage usage : list) {        if (usage.getName().equals(mount)) {          List<Usage> spaceList=diskMap.get(DiskUsageType.space);          if (spaceList == null) {            spaceList=new ArrayList<Usage>();            diskMap.put(DiskUsageType.space,spaceList);          }          Usage spaceUsage=new Usage();          spaceUsage.setDiskUsageTyp(DiskUsageType.space);          spaceUsage.setName(usage.getName());          spaceUsage.setValue(NumberUtils.toFloat(item[4].split("%")[0]));          spaceList.add(spaceUsage);        }      }    }  }}  }
class C{  public void addProgressListener(ProgressListener list){  progressSupport.add(list);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  public Coordinate[] closestPoints(LineSegment line){  Coordinate intPt=intersection(line);  if (intPt != null) {    return new Coordinate[]{intPt,intPt};  }  Coordinate[] closestPt=new Coordinate[2];  double minDistance=Double.MAX_VALUE;  double dist;  Coordinate close00=closestPoint(line.p0);  minDistance=close00.distance(line.p0);  closestPt[0]=close00;  closestPt[1]=line.p0;  Coordinate close01=closestPoint(line.p1);  dist=close01.distance(line.p1);  if (dist < minDistance) {    minDistance=dist;    closestPt[0]=close01;    closestPt[1]=line.p1;  }  Coordinate close10=line.closestPoint(p0);  dist=close10.distance(p0);  if (dist < minDistance) {    minDistance=dist;    closestPt[0]=p0;    closestPt[1]=close10;  }  Coordinate close11=line.closestPoint(p1);  dist=close11.distance(p1);  if (dist < minDistance) {    minDistance=dist;    closestPt[0]=p1;    closestPt[1]=close11;  }  return closestPt;}  }
class C{  public TypeVisibility(boolean visibility){  this(visibility,null);}  }
class C{  public static String relativePath(final File root,VirtualFile file){  return relativePath(root,VfsUtil.virtualToIoFile(file));}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public static ByteBuffer allocate(int capacity){  ByteBuffer result=allocateDirect(capacity);  return result;}  }
class C{  public Aggregator.Parser parser(String type){  return aggParsers.get(type);}  }
class C{  private KpcRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  @Deprecated public static <T>T rand(T... c){  A.notNull(c,"c");  return c[ThreadLocalRandom8.current().nextInt(c.length)];}  }
class C{  public boolean isAutoRelease(){  if (mBuilder == null) {    return false;  }  return mBuilder.mAutoRelease;}  }
class C{  public void init(){  profileTool=new ProfileGenerator(this);  LOSTool=new LOSGenerator(this);  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));}  }
class C{  boolean contains(Object key){  return table.get(key) != null;}  }
class C{  public MatlabTypeConverter(MatlabProxy proxy){  _proxy=proxy;}  }
class C{  public final boolean isEnabled(JsonGenerator.Feature f){  return (_generatorFeatures & f.getMask()) != 0;}  }
class C{  @CheckForNull public static String colorToHexString(@Nullable Color color){  if (color == null) {    return null;  }  return String.format("#%02X%02X%02X",color.getRed(),color.getGreen(),color.getBlue());}  }
class C{  public JRun4xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(JRun4xPropertySet.JRUN_HOME,Boolean.TRUE);  this.propertySupportMap.put(JRun4xPropertySet.SERVER_NAME,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.CONNECTION_TYPE,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.FALSE);}  }
class C{  public static int parseInt(FXGNode node,String value,String name,int min,int max,int defaultValue){  int i=parseInt(node,value,name);  if (i >= min && i <= max) {    return i;  }  if (((AbstractFXGNode)node).isVersionGreaterThanCompiler()) {    FXGLog.getLogger().log(FXGLogger.WARN,"DefaultAttributeValue",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),defaultValue,name);    return defaultValue;  } else {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"OutOfRangeValue",value,min,max);  }}  }
class C{  public h2(String value){  addElement(value);}  }
class C{  public static String string(int i){  return classes.getText(i);}  }
class C{  private void determineSlotCapacity(RPSlot slot){  String slotSize=get("slot_size");  int size=DEFAULT_SLOT_SIZE;  if (slotSize == null) {    put("slot_size",DEFAULT_SLOT_SIZE);  } else {    size=MathHelper.parseIntDefault(slotSize,DEFAULT_SLOT_SIZE);  }  slot.setCapacity(size);}  }
class C{  public List<Text> children(){  return Collections.unmodifiableList(this.components);}  }
class C{  public PvXMLWriter(){  try {    factory=(SAXTransformerFactory)SAXTransformerFactory.newInstance();    handler=factory.newTransformerHandler();    serializer=handler.getTransformer();    serializer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    serializer.setOutputProperty(OutputKeys.INDENT,"yes");    serializer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");  } catch (  Exception e) {    e.printStackTrace();  }}  }
