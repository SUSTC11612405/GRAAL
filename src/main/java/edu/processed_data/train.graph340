class C{  public void addSetAmmoTo(String s){  int ewSpot=s.indexOf(':');  int amSpot=s.indexOf('-');  if (s.isEmpty() || (ewSpot < 1) || (amSpot < ewSpot)) {    return;  }  int loc=Integer.parseInt(s.substring(0,ewSpot));  int slot=Integer.parseInt(s.substring(ewSpot + 1,amSpot));  int setTo=Integer.parseInt(s.substring(amSpot + 1));  ammoSetTo.add(new SetAmmoTo(loc,slot - 1,setTo));}  }
class C{  public static void enter(JoinPoint joinPoint){  final Thread currentThread=Thread.currentThread();  final Thread swtThread=Display.getDefault().getThread();  if (currentThread == swtThread) {    joinPoints.add(joinPoint);  }}  }
class C{  private FileHelper(){}  }
class C{  public ObjectMatrix1D like(int size){  return new DenseObjectMatrix1D(size);}  }
class C{  public boolean isSetClusterJoinRequest(){  return this.clusterJoinRequest != null;}  }
class C{  public void stop(){  DelphiUtils.LOG.info("HSQLDB server shutting down...");  hsqlServer.stop();  DelphiUtils.LOG.info("HSQLDB server shutting down... done");}  }
class C{  public void addObject(Object obj){  objects.add(obj);  changed=true;}  }
class C{  public void addFirst(Character c){  addFirst(c.toString());}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  public CompressedByteArray(long size,int range,boolean grow){  this(size,range,range == 5 ? 3 : range == 22 ? 2 : 1,range == 5 ? 7 : range == 22 ? 9 : minBits(range),grow);}  }
class C{  public int send(Connection connection,Object object) throws IOException {  SocketChannel socketChannel=this.socketChannel;  if (socketChannel == null) {    throw new SocketException("Connection is closed.");  }  ExtendedByteBufferOutputStream outputStream=null;  try {    outputStream=idleQueue.take();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IOException("Sending was interrupted.");  }  writeReentrantLock.lock();  try {    int lengthLength=serialization.getLengthLength();    outputStream.write(new byte[lengthLength]);    try {      serialization.write(connection,outputStream,object);    } catch (    KryoNetException ex) {      outputStream.close();      throw new KryoNetException("Error serializing object of type: " + object.getClass().getName(),ex);    }    outputStream.flush(false);    long writeSize=outputStream.getTotalWriteSize() - lengthLength;    ByteBuffer buffer=outputStream.getAllByteBuffers().iterator().next();    int position=buffer.position();    buffer.position(0);    serialization.writeLength(buffer,(int)writeSize);    buffer.position(position);    boolean hasQueuedData=hasQueuedData();    writeQueue.add(outputStream);    if (!hasQueuedData && !writeToSocket()) {      selectionKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);    } else {      selectionKey.selector().wakeup();    }    lastWriteTime=System.currentTimeMillis();    return (int)writeSize;  }  finally {    writeReentrantLock.unlock();  }}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<String,Object> t=stash.get();    Object ctgrR=t.get2();    IgniteLogger log=IgnitionEx.localIgnite().log();    return ctgrR != null ? log.getLogger(ctgrR) : log;  } catch (  IllegalStateException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  protected void sendFunctionGroup1(){  int new_dirf=((getIsForward() ? 0 : LnConstants.DIRF_DIR) | (getF0() ? LnConstants.DIRF_F0 : 0) | (getF1() ? LnConstants.DIRF_F1 : 0)| (getF2() ? LnConstants.DIRF_F2 : 0)| (getF3() ? LnConstants.DIRF_F3 : 0)| (getF4() ? LnConstants.DIRF_F4 : 0));  log.debug("sendFunctionGroup1 sending {} to LocoNet slot {}",new_dirf,slot.getSlot());  LocoNetMessage msg=new LocoNetMessage(4);  msg.setOpCode(LnConstants.OPC_LOCO_DIRF);  msg.setElement(1,slot.getSlot());  msg.setElement(2,new_dirf);  network.sendLocoNetMessage(msg);}  }
class C{  @Override public void footerViewShow(){}  }
class C{  private IoBuffer encodeGSSAPIAuthenticationPacket(final SocksProxyRequest request) throws GSSException {  GSSContext ctx=(GSSContext)getSession().getAttribute(GSS_CONTEXT);  if (ctx == null) {    GSSManager manager=GSSManager.getInstance();    GSSName serverName=manager.createName(request.getServiceKerberosName(),null);    Oid krb5OID=new Oid(SocksProxyConstants.KERBEROS_V5_OID);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Available mechs:");      for (      Oid o : manager.getMechs()) {        if (o.equals(krb5OID)) {          LOGGER.debug("Found Kerberos V OID available");        }        LOGGER.debug("{} with oid = {}",manager.getNamesForMech(o),o);      }    }    ctx=manager.createContext(serverName,krb5OID,null,GSSContext.DEFAULT_LIFETIME);    ctx.requestMutualAuth(true);    ctx.requestConf(false);    ctx.requestInteg(false);    getSession().setAttribute(GSS_CONTEXT,ctx);  }  byte[] token=(byte[])getSession().getAttribute(GSS_TOKEN);  if (token != null) {    LOGGER.debug("  Received Token[{}] = {}",token.length,ByteUtilities.asHex(token));  }  IoBuffer buf=null;  if (!ctx.isEstablished()) {    if (token == null) {      token=new byte[32];    }    token=ctx.initSecContext(token,0,token.length);    if (token != null) {      LOGGER.debug("  Sending Token[{}] = {}",token.length,ByteUtilities.asHex(token));      getSession().setAttribute(GSS_TOKEN,token);      buf=IoBuffer.allocate(4 + token.length);      buf.put(new byte[]{SocksProxyConstants.GSSAPI_AUTH_SUBNEGOTIATION_VERSION,SocksProxyConstants.GSSAPI_MSG_TYPE});      buf.put(ByteUtilities.intToNetworkByteOrder(token.length,2));      buf.put(token);    }  }  return buf;}  }
class C{  public static List<org.oscm.internal.vo.VOPricedRole> convertToUpVOPricedRole(List<org.oscm.vo.VOPricedRole> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOPricedRole> newVO=new ArrayList<org.oscm.internal.vo.VOPricedRole>();  for (  org.oscm.vo.VOPricedRole tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public Analyzer printAnalysis(){  printAnalysis(System.out);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.603 -0500",hash_original_method="E3342D080F10DDAA1FF9ED29EA29694F",hash_generated_method="4D61001B9F1439AD2DB614C0F3C1D851") private void serviceInfoFromProperties(Provider.Service s){  super.remove(s.type + "." + s.algorithm);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.remove("Alg.Alias." + s.type + "."+ i.next());    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.remove(s.type + "." + s.algorithm+ " "+ entry.getKey());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  private static void addJdbcPojoStoreFactory(Document doc,Node parent,String pkg,PojoDescriptor pojo,boolean includeKeys){  Element bean=addBean(doc,parent,JdbcType.class);  addProperty(doc,bean,"databaseSchema",pojo.schema());  addProperty(doc,bean,"databaseTable",pojo.table());  addProperty(doc,bean,"keyType",pkg + "." + pojo.keyClassName());  addProperty(doc,bean,"valueType",pkg + "." + pojo.valueClassName());  addJdbcFields(doc,bean,"keyFields",pojo.keyFields());  addJdbcFields(doc,bean,"valueFields",pojo.valueFields(includeKeys));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void serialize(Node node) throws IOException {  try {    TreeWalker walker=new TreeWalker(this);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  @Override public boolean onDown(MotionEvent e){  return false;}  }
class C{  public static String expandHiddenDir(final String filename){  final int macro=filename.indexOf(hiddenDirMacro,0);  String expandedFilter;  if (macro == -1) {    return filename;  }  if (Cfg.DEBUG) {    Check.log(TAG + " expanding macro");  }  expandedFilter=filename.replaceFirst("\\$dir\\$",StringUtils.chomp(Path.hidden(),"/"));  if (Cfg.DEBUG) {    Check.log(TAG + " expandedFilter: " + expandedFilter);  }  return expandedFilter;}  }
class C{  static String bin2HexStr(byte[] data){  StringBuffer sb=new StringBuffer();  for (  byte b : data) {    String s=null;    try {      s=Integer.toHexString(b & 0xff);    } catch (    Exception e) {      e.printStackTrace();      return null;    }    if (s.length() == 1) {      sb.append('0');    }    sb.append(s);  }  return sb.toString();}  }
class C{  public void addLayoutComponent(Component component,Object constraint){  ALayoutConstraint con=null;  if (constraint instanceof ALayoutConstraint)   con=(ALayoutConstraint)constraint;  m_data.put(con,component);}  }
class C{  public static boolean parseRegexContent(PsiBuilder b,int l,boolean isExtended){  assert b instanceof PerlBuilder;  boolean currentState=((PerlBuilder)b).setIsRegex(true);  boolean r=isExtended ? PerlParserImpl.perl_regex_ex_items(b,l) : PerlParserImpl.perl_regex_items(b,l);  ((PerlBuilder)b).setIsRegex(currentState);  return r;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.661 -0500",hash_original_method="6DD5048753632FED7CFB0FE5E71CCF54",hash_generated_method="460C761655085089DEC182E4B83DF031") public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public void runTest(){  logString=null;  String testString="This is a test.";  ve.warn(testString);  if (logString == null || !logString.equals(VelocityEngine.WARN_PREFIX + testString)) {    fail("Didn't recieve log message.");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().reloadFile();  return null;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,ConnectionSource connectionSource,int oldVersion,int newVersion){  try {    Log.i(DatabaseHelper.class.getName(),"onUpgrade");    TableUtils.dropTable(connectionSource,SimpleData.class,true);    onCreate(db,connectionSource);  } catch (  SQLException e) {    Log.e(DatabaseHelper.class.getName(),"Can't drop databases",e);    throw new RuntimeException(e);  }}  }
class C{  public boolean isMasterConnection(){  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.LITERAL;}  }
class C{  private void transferBounds(boolean addVisualPadding){  if (cc.isExternal())   return;  int compX=x;  int compY=y;  int compW=w;  int compH=h;  if (addVisualPadding) {    int[] visualPadding=comp.getVisualPadding();    if (visualPadding != null) {      compX-=visualPadding[1];      compY-=visualPadding[0];      compW+=(visualPadding[1] + visualPadding[3]);      compH+=(visualPadding[0] + visualPadding[2]);    }  }  comp.setBounds(compX,compY,compW,compH);}  }
class C{  public SieveRepositoryException(){  super();}  }
class C{  public CLIOutputResponse status(final StatusRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--ignore-externals",request.isIgnoreExternals());  addFlag(cliArgs,"--no-ignore",request.isShowIgnored());  addFlag(cliArgs,"--quiet",!request.isShowUnversioned());  addFlag(cliArgs,"--show-updates",request.isShowUpdates());  addFlag(cliArgs,"--verbose",request.isVerbose());  addOptionList(cliArgs,"--changelist",request.getChangeLists());  addOption(cliArgs,"--depth",request.getDepth());  cliArgs.add("status");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  @Override public void beginReceipt(){  m_ticketcurrent=new BasicTicketForPrinter();}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  public AttributeConverter<?> removeAttributeConverter(final Class<?> clazz){  return this.converters.remove(clazz.getCanonicalName());}  }
class C{  public ByteArrayList data(){  return data;}  }
class C{  public void newMatrix(EditorState editorState,int columns,int rows){  MathSequence currentField=editorState.getCurrentField();  int currentOffset=editorState.getCurrentOffset();  MetaArray meta=metaModel.getMatrix();  MathArray matrix=new MathArray(meta,columns,rows);  currentField.addArgument(currentOffset,matrix);  MathSequence field=new MathSequence();  matrix.setArgument(0,field);  for (int i=1; i < matrix.size(); i++) {    matrix.setArgument(i,new MathSequence());  }  editorState.setCurrentField(field);  editorState.setCurrentOffset(0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deleteButtonActionPerformed(){  String nodeAddress=readNodeAddress();  if (nodeAddress.equals("")) {    return;  }  curNode=(IEEE802154Node)itc.getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(Bundle.getMessage("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,Bundle.getMessage("ConfirmDelete1") + "\n" + Bundle.getMessage("ConfirmDelete2"),Bundle.getMessage("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    itc.deleteNode(nodeAddress);    resetNotes();    statusText1.setText(Bundle.getMessage("FeedBackDelete") + " " + nodeAddress);    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }  initAddressBoxes();}  }
class C{  public String label(){  return label;}  }
class C{  public void playConfChamp(){  ccg.playGame();  if (ccg.homeScore > ccg.awayScore) {    confTeams.get(0).confChampion="CC";    confTeams.get(0).totalCCs++;    confTeams.get(1).totalCCLosses++;    league.newsStories.get(13).add(ccg.homeTeam.name + " wins the " + confName+ "!>"+ ccg.homeTeam.strRep()+ " took care of business in the conference championship against "+ ccg.awayTeam.strRep()+ ", winning at home with a score of "+ ccg.homeScore+ " to "+ ccg.awayScore+ ".");  } else {    confTeams.get(1).confChampion="CC";    confTeams.get(1).totalCCs++;    confTeams.get(0).totalCCLosses++;    league.newsStories.get(13).add(ccg.awayTeam.name + " wins the " + confName+ "!>"+ ccg.awayTeam.strRep()+ " surprised many in the conference championship against "+ ccg.homeTeam.strRep()+ ", winning on the road with a score of "+ ccg.awayScore+ " to "+ ccg.homeScore+ ".");  }  Collections.sort(confTeams,new TeamCompPoll());}  }
class C{  protected void installListeners(){  addParentPropertyChangeListener(this);}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  try {    byte[] b=ct.toBytecode();    java.lang.reflect.Method method;    Object[] args;    if (domain == null) {      method=defineClass1;      args=new Object[]{ct.getName(),b,new Integer(0),new Integer(b.length)};    } else {      method=defineClass2;      args=new Object[]{ct.getName(),b,new Integer(0),new Integer(b.length),domain};    }    return (Class)toClass2(method,loader,args);  } catch (  RuntimeException e) {    throw e;  }catch (  java.lang.reflect.InvocationTargetException e) {    throw new CannotCompileException(e.getTargetException());  }catch (  Exception e) {    throw new CannotCompileException(e);  }}  }
class C{  public ElasticsearchDocumentHistory(ElasticsearchHistory history,String documentId){  this(history,documentId,new LinkedBlockingDeque<HistoryEvent>());}  }
class C{  public void clip(float value){  if (mLeft > value) {    mLeft=value;  } else   if (mLeft < -value) {    mLeft=-value;  }  if (mRight > value) {    mRight=value;  } else   if (mRight < -value) {    mRight=-value;  }}  }
class C{  public static void initialError(String s,Parameter p1,Parameter p2){  String er="STARTUP ERROR:\n" + s;  System.err.println(er);  if (p1 != null) {    er+="PARAMETER: " + p1;    System.err.println("PARAMETER: " + p1);  }  if (p2 != null && p1 != null) {    er+="     ALSO: " + p2;    System.err.println("     ALSO: " + p2);  }  exitWithError(null,er,false);}  }
class C{  public static void put(String dbgToken){  dbgTable.put(dbgToken,Boolean.TRUE);}  }
class C{  public void playerOnPlay(PlayerType.GetActivePlayersReturnType getActivePlayerResult,PlayerType.PropertyValue getPropertiesResult,ListType.ItemsAll getItemResult){  if ((lastGetPlaylistItemsResult == null) || (lastCallResult != PlayerEventsObserver.PLAYER_IS_PLAYING) || (currentActivePlayerId != getActivePlayerResult.playerid)|| (lastGetItemResult.id != getItemResult.id)) {    setupPlaylistInfo(getActivePlayerResult,getPropertiesResult,getItemResult);    currentActivePlayerId=getActivePlayerResult.playerid;  } else {    displayPlaylist(getItemResult,lastGetPlaylistItemsResult);  }  lastCallResult=PLAYER_IS_PLAYING;  lastGetActivePlayerResult=getActivePlayerResult;  lastGetPropertiesResult=getPropertiesResult;  lastGetItemResult=getItemResult;}  }
class C{  public void addInvokestatic(CtClass clazz,String name,CtClass returnType,CtClass[] paramTypes){  String desc=Descriptor.ofMethod(returnType,paramTypes);  addInvokestatic(clazz,name,desc);}  }
class C{  private int endCheckLabel(){  int rv=END_UNREACHED;  rv=next.endCheck();  rv|=getIntProp(CONTROL_BLOCK_PROP,END_UNREACHED);  return rv;}  }
class C{  public static void initNode(){  if (!initialized) {    if (!System.getenv("PATH").contains("/usr/local/bin") && new File("/usr/local/bin/node").exists()) {      ProcessUtil.EXTRA_PATH="/usr/local/bin";      ProcessUtil.NODE_COMMAND="/usr/local/bin/node";      ProcessUtil.NPM_COMMAND="/usr/local/bin/npm";    }    initialized=true;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.REGION__VERTICES:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getVertices()).basicAdd(otherEnd,msgs);case SGraphPackage.REGION__COMPOSITE:  if (eInternalContainer() != null)   msgs=eBasicRemoveFromContainer(msgs);return basicSetComposite((CompositeElement)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public Value validateConvertUpdateSequence(Session session,Value value){  final Expression localDefaultExpression;synchronized (this) {    localDefaultExpression=defaultExpression;  }  if (value == null) {    if (localDefaultExpression == null) {      value=ValueNull.INSTANCE;    } else {      value=localDefaultExpression.getValue(session).convertTo(type);      if (primaryKey) {        session.setLastIdentity(value);      }    }  }  Mode mode=session.getDatabase().getMode();  if (value == ValueNull.INSTANCE) {    if (convertNullToDefault) {      value=localDefaultExpression.getValue(session).convertTo(type);    }    if (value == ValueNull.INSTANCE && !nullable) {      if (mode.convertInsertNullToZero) {        DataType dt=DataType.getDataType(type);        if (dt.decimal) {          value=ValueInt.get(0).convertTo(type);        } else         if (dt.type == Value.TIMESTAMP) {          value=ValueTimestamp.fromMillis(session.getTransactionStart());        } else         if (dt.type == Value.TIMESTAMP_TZ) {          long ms=session.getTransactionStart();          value=ValueTimestampTimeZone.fromDateValueAndNanos(DateTimeUtils.dateValueFromDate(ms),DateTimeUtils.nanosFromDate(ms),(short)0);        } else         if (dt.type == Value.TIME) {          value=ValueTime.fromNanos(0);        } else         if (dt.type == Value.DATE) {          value=ValueDate.fromMillis(session.getTransactionStart());        } else {          value=ValueString.get("").convertTo(type);        }      } else {        throw DbException.get(ErrorCode.NULL_NOT_ALLOWED,name);      }    }  }  if (checkConstraint != null) {    resolver.setValue(value);    Value v;synchronized (this) {      v=checkConstraint.getValue(session);    }    if (Boolean.FALSE.equals(v.getBoolean())) {      throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,checkConstraint.getSQL());    }  }  value=value.convertScale(mode.convertOnlyToSmallerScale,scale);  if (precision > 0) {    if (!value.checkPrecision(precision)) {      String s=value.getTraceSQL();      if (s.length() > 127) {        s=s.substring(0,128) + "...";      }      throw DbException.get(ErrorCode.VALUE_TOO_LONG_2,getCreateSQL(),s + " (" + value.getPrecision()+ ")");    }  }  updateSequenceIfRequired(session,value);  return value;}  }
class C{  public static Iterable<VisorIgfsConfiguration> list(FileSystemConfiguration[] igfss){  if (igfss == null)   return Collections.emptyList();  final Collection<VisorIgfsConfiguration> cfgs=new ArrayList<>(igfss.length);  for (  FileSystemConfiguration igfs : igfss)   cfgs.add(from(igfs));  return cfgs;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public boolean driftSmokeDissipate(SmokeCloud cloud,int roll,int windStr){  if ((cloud.getDuration() > 0) && ((cloud.getDuration() - 1) == 0)) {    cloud.setDuration(0);    cloud.setSmokeLevel(0);    return true;  }  if ((cloud.getDuration() > 0) && ((cloud.getDuration() - 1) > 0)) {    cloud.setDuration(cloud.getDuration() - 1);  }  if ((roll > 10) || ((roll > 9) && (windStr == PlanetaryConditions.WI_MOD_GALE)) || ((roll > 7) && (windStr == PlanetaryConditions.WI_STRONG_GALE))|| ((roll > 5) && (windStr == PlanetaryConditions.WI_STORM))) {    return true;  }  if (windStr > PlanetaryConditions.WI_STORM) {    cloud.setSmokeLevel(0);    return true;  }  return false;}  }
class C{  public String updateCustomer() throws SaaSApplicationException {  VOOrganization voOrganization=selectedCustomer.getVOOrganization();  VODiscount voDiscount=voOrganization.getDiscount();  if (voDiscount != null && voDiscount.getValue() == null) {    voDiscount=null;    voOrganization.setDiscount(voDiscount);  }  if (voDiscount != null) {    Long begin=voOrganization.getDiscount().getStartTime();    Long end=voOrganization.getDiscount().getEndTime();    long currentTimeMonthYear=getTimeInMillisForFirstDay(System.currentTimeMillis());    if (begin == null) {      begin=Long.valueOf(currentTimeMonthYear);    }    if (end != null) {      Calendar discountEndCalendar=Calendar.getInstance();      discountEndCalendar.setTimeInMillis(end.longValue());      discountEndCalendar.add(Calendar.MONTH,1);      end=Long.valueOf(discountEndCalendar.getTimeInMillis());      end=Long.valueOf(end.longValue() - 1);      long discountEndTimeMonthYear=getTimeInMillisForFirstDay(end.longValue());      if (currentTimeMonthYear > discountEndTimeMonthYear) {        addMessage(COMPONENT_THRU_ID,FacesMessage.SEVERITY_ERROR,ERROR_DISCOUNT_DATE_FUTURE);        return OUTCOME_ERROR;      }      if (begin.longValue() > end.longValue()) {        addMessage(COMPONENT_THRU_ID,FacesMessage.SEVERITY_ERROR,ERROR_DISCOUNT_DATE_BEFORE);        return OUTCOME_ERROR;      }    }    voDiscount.setStartTime(begin);    voDiscount.setEndTime(end);  }  VOOrganization org=getAccountingService().updateCustomerDiscount(voOrganization);  if (customerUdaRows != null && !customerUdaRows.isEmpty()) {    List<VOUda> toSave=new ArrayList<VOUda>();    for (    UdaRow row : customerUdaRows) {      VOUda uda=row.getUda();      uda.setTargetObjectKey(org.getKey());      if (uda.getUdaDefinition().getConfigurationType().equals(UdaConfigurationType.SUPPLIER)) {        toSave.add(uda);      }    }    getAccountingService().saveUdas(toSave);    customerUdaRows=null;  }  selectedCustomer.setVOOrganization(voOrganization);  updateSelectedCustomer(selectedCustomer.getOrganizationId(),org);  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_ORGANIZATION_UPDATED,org.getOrganizationId());  return OUTCOME_SUCCESS;}  }
class C{  public static void serializeMeterFeaturesReply(List<OFMeterFeaturesStatsReply> meterFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterFeaturesStatsReply meterFeaturesReply=meterFeaturesReplies.get(0);  jGen.writeStringField("version",meterFeaturesReply.getVersion().toString());  OFMeterFeatures meterFeatures=meterFeaturesReply.getFeatures();  jGen.writeFieldName("meterFeatures");  jGen.writeStartObject();  jGen.writeNumberField("maxGroupsAll",meterFeatures.getMaxMeter());  jGen.writeNumberField("maxGroupsSelect",meterFeatures.getBandTypes());  jGen.writeNumberField("capabilities",meterFeatures.getCapabilities());  jGen.writeNumberField("maxGroupsIndirect",meterFeatures.getMaxBands());  jGen.writeNumberField("maxGroupsFf",meterFeatures.getMaxColor());  jGen.writeEndObject();}  }
class C{  protected Association(int associationID,int maxInStreams,int maxOutStreams){  this.associationID=associationID;  this.maxInStreams=maxInStreams;  this.maxOutStreams=maxOutStreams;}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public boolean startCellEditing(EventObject anEvent){  return true;}  }
class C{  private Object convertTemporal(Object srcObj,int srcType,int trgType) throws SQLException {  if (srcType == trgType) {    return srcObj;  }  if (isNumeric(trgType) == true || (isString(trgType) == false && isTemporal(trgType) == false)) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());  }  try {switch (trgType) {case java.sql.Types.DATE:      if (srcType == java.sql.Types.TIMESTAMP) {        return new java.sql.Date(((java.sql.Timestamp)srcObj).getTime());      } else {        throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());      }case java.sql.Types.TIMESTAMP:    if (srcType == java.sql.Types.TIME) {      return new Timestamp(((java.sql.Time)srcObj).getTime());    } else {      return new Timestamp(((java.sql.Date)srcObj).getTime());    }case java.sql.Types.TIME:  if (srcType == java.sql.Types.TIMESTAMP) {    return new Time(((java.sql.Timestamp)srcObj).getTime());  } else {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());  }case java.sql.Types.CHAR:case java.sql.Types.VARCHAR:case java.sql.Types.LONGVARCHAR:return srcObj.toString();default :throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());}} catch (NumberFormatException ex) {throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());}}  }
class C{  protected void configKappa(Parameterization config){  DoubleParameter kappaP=new DoubleParameter(KAPPA_ID).addConstraint(CommonConstraints.GREATER_THAN_ONE_DOUBLE).setDefaultValue(KAPPA_DEFAULT);  if (config.grab(kappaP)) {    settings.kappa=kappaP.doubleValue();  }}  }
class C{  public int[] validBaudNumber(){  return new int[]{9600};}  }
class C{  protected boolean buildSubfieldDefns(String pszSublist){  if (pszSublist.charAt(0) == '*') {    bRepeatingSubfields=true;    pszSublist=pszSublist.substring(1);  }  Vector papszSubfieldNames=PropUtils.parseMarkers(pszSublist,"!");  paoSubfieldDefns=new Vector();  for (Iterator it=papszSubfieldNames.iterator(); it.hasNext(); ) {    DDFSubfieldDefinition ddfsd=new DDFSubfieldDefinition();    ddfsd.setName((String)it.next());    paoSubfieldDefns.add(ddfsd);  }  return true;}  }
class C{  public String apply(String s){  if (s == null || s.isEmpty()) {    return s;  }switch (this) {case UPPERCASE:    return s.toUpperCase();case LOWERCASE:  return s.toLowerCase();case CAPITALIZE:return Character.toUpperCase(s.charAt(0)) + (s.length() > 1 ? s.toLowerCase().substring(1) : "");default :throw new IllegalArgumentException("Unknown capitalization strategy: " + this);}}  }
class C{  static URL determineZipUrl() throws MalformedURLException {  String archName=determineTermuxArchName();  return new URL("https://termux.net/bootstrap/bootstrap-" + archName + ".zip");}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer();  buff.append((m_regex) ? "Regex: " : "Substring: ");  buff.append(m_match).append("  ");  buff.append((m_ignoreCase) ? "[ignore case]" : "").append("  ");  if (m_label != null && m_label.length() > 0) {    buff.append("Label: ").append(m_label).append("  ");  }  buff.append("[Atts: " + m_attsToApplyTo + "]");  return buff.toString();}  }
class C{  protected static Object[] packageParametersFromJValuePtr(MethodReference targetMethod,Address argAddress){  TypeReference[] argTypes=targetMethod.getParameterTypes();  int argCount=argTypes.length;  Object[] argObjectArray=new Object[argCount];  JNIEnvironment env=RVMThread.getCurrentThread().getJNIEnv();  Address addr=argAddress;  for (int i=0; i < argCount; i++, addr=addr.plus(BYTES_IN_LONG)) {    if (argTypes[i].isReferenceType()) {      Word wholeSlot=addr.loadWord();      int JREFindex=wholeSlot.toInt();      argObjectArray[i]=env.getJNIRef(JREFindex);    } else     if (argTypes[i].isIntType()) {      argObjectArray[i]=addr.loadInt();    } else     if (argTypes[i].isLongType()) {      argObjectArray[i]=addr.loadLong();    } else     if (argTypes[i].isBooleanType()) {      argObjectArray[i]=addr.loadByte() != 0;    } else     if (argTypes[i].isByteType()) {      argObjectArray[i]=addr.loadByte();    } else     if (argTypes[i].isCharType()) {      argObjectArray[i]=addr.loadChar();    } else     if (argTypes[i].isShortType()) {      argObjectArray[i]=addr.loadShort();    } else     if (argTypes[i].isFloatType()) {      argObjectArray[i]=addr.loadFloat();    } else {      if (VM.VerifyAssertions)       VM._assert(argTypes[i].isDoubleType());      argObjectArray[i]=addr.loadDouble();    }  }  return argObjectArray;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int compareTo(CharSeq another){  return str.compareTo(another.str);}  }
class C{  public static List findByGroup(SolverParameterGroup group){  return (new SolverParameterDefDAO()).getSession().createCriteria(SolverParameterDef.class).add(Restrictions.eq("group",group)).addOrder(Order.asc("order")).list();}  }
class C{  private static DefaultTestCase buildTestCase1() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(0);  Class<?> triangleClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=triangleClass.getMethod("coverMe",int.class);  builder.appendMethod(null,barMethod,int0);  return builder.getDefaultTestCase();}  }
class C{  private static void MIROptimizations(ArrayList<OptimizationPlanElement> p){  composeComponents(p,"Register Mapping",new Object[]{new ExpandCallingConvention(),new LiveAnalysis(true,false),new RegisterAllocator(),new PrologueEpilogueCreator()});  addComponent(p,new MIRBranchOptimizations(1));}  }
class C{  private void checkCache(IgniteCache<String,Integer> c,int keyCnt){  Ignite g=c.unwrap(Ignite.class);  for (int i=0; i < keyCnt; i++) {    String key=Integer.toString(i);    if (affinity(c).isPrimaryOrBackup(g.cluster().localNode(),key))     assertEquals(Integer.valueOf(i),c.localPeek(key,CachePeekMode.ONHEAP));  }}  }
class C{  public boolean hasRolloverOff(){  return rolloverOffImage != null;}  }
class C{  protected void populateInitialContext(Context context) throws Exception {  context.put("now",new Date().toString());}  }
class C{  public InlineQueryResultCachedVoice build(){  return new InlineQueryResultCachedVoice(id,voice_file_id,title,reply_markup,input_message_content,caption);}  }
class C{  public SootClass resolveClass(String className,int desiredLevel){  SootClass resolvedClass=makeClassRef(className);  addToResolveWorklist(resolvedClass,desiredLevel);  processResolveWorklist();  return resolvedClass;}  }
class C{  public void reinitializeContacts(EvolutionState state){  initializeContacts(state);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int totalRead=0;  while (totalRead < requested) {    int numRead=zzReader.read(zzBuffer,zzEndRead + totalRead,requested - totalRead);    if (numRead == -1) {      break;    }    totalRead+=numRead;  }  if (totalRead > 0) {    zzEndRead+=totalRead;    if (totalRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  public static final byte[] doPRF(byte[] secret,Label label,byte[] seed){  return doPRF(secret,label.getBytes(),seed,label.length());}  }
class C{  public static int kthSmallestValue(int[] array,int k){  int[] index=initialIndex(array.length);  return array[index[select(array,index,0,array.length - 1,k)]];}  }
class C{  private void purgeSystemRecord(DBObject table){  String localTableName=table.getName();  if (m_trackingList.contains(localTableName.toUpperCase()))   return;  m_trackingList.add(localTableName.toUpperCase());  DBObject pk=null;  if (m_target.getPrimaryKeys() != null) {    for (Iterator<String> it=m_target.getPrimaryKeys().keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject obj=m_target.getPrimaryKeys().get(key);      DBObject_PrimaryKey_Table objHeader=(DBObject_PrimaryKey_Table)obj.getHeaders().get(0);      if (objHeader.getTable().equalsIgnoreCase(localTableName)) {        pk=obj;      }    }  }  ArrayList<String> localColumnNames=new ArrayList<String>();  ArrayList<String> foreignTableNames=new ArrayList<String>();  ArrayList<String> foreignColumnNames=new ArrayList<String>();  if (pk != null) {    if (m_target.getForeignKeys() != null) {      for (Iterator<String> it=m_target.getForeignKeys().keySet().iterator(); it.hasNext(); ) {        String key=it.next();        DBObject obj=m_target.getForeignKeys().get(key);        DBObject_ForeignKey_Table objHeader=(DBObject_ForeignKey_Table)obj.getHeaders().get(0);        DBObject localTable=m_target.getObjectByName(objHeader.getFTable(),m_target.getTables());        DBObject foreignTable=m_target.getObjectByName(objHeader.getTable(),m_target.getTables());        if (localTable.getName().equalsIgnoreCase(localTableName)) {          if (!localTable.getName().equalsIgnoreCase(foreignTable.getName())) {            for (Iterator<Integer> it2=obj.getContents().keySet().iterator(); it2.hasNext(); ) {              Integer key2=it2.next();              DBObject_ForeignKey_Column objContents=(DBObject_ForeignKey_Column)obj.getContents().get(key2);              String foreignTableName=foreignTable.getName();              if (!foreignTableName.toUpperCase().endsWith("_TRL")) {                purgeSystemRecord(foreignTable);                if (isDependencyExists(localTableName,objContents.getFColumn(),"ad_client_id","0",foreignTableName,objContents.getColumn())) {                  localColumnNames.add(objContents.getFColumn());                  foreignTableNames.add(foreignTableName);                  foreignColumnNames.add(objContents.getColumn());                }              }            }          }        }      }    }  }  boolean hasClientID=hasTableColumn(table,"ad_client_id");  ArrayList<String> customEntities=new ArrayList<String>();  if (hasTableColumn(table,"entitytype")) {    customEntities=new ArrayList<String>(m_target.getCustomEntities());  }  String specialClause=null;  if (localTableName.equalsIgnoreCase("C_Region")) {    specialClause="c_region_id<" + s_parameters.MINUSERLEVELID;  } else   if (localTableName.equalsIgnoreCase("AD_Language")) {    specialClause="issystemlanguage='N'";  } else   if (localTableName.toUpperCase().startsWith("AD_TREENODE")) {    specialClause=m_nodesToPreserve.get(localTableName);  }  if (hasClientID || customEntities.size() > 0) {    String vendor=m_target.getVendor();    String catalog=m_target.getCatalog();    String schema=m_target.getSchema();    s_logger.log(Level.FINE,"purgeSystemRecord",new Object[]{m_objectType,localTableName,m_direction});    if (isRecordExists(localTableName,"ad_client_id","0")) {      Statement stmt=m_target.setStatement();      String sqlCommand=s_dbEngine.sqlADAction_purgeSystemRecords(vendor,catalog,schema,localTableName,localColumnNames,foreignTableNames,foreignColumnNames,hasClientID,customEntities,specialClause);      Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);      if (sqlResult != null) {        logDropDetail(sqlResult,null);        m_counterPrg=new Integer(m_counterPrg.intValue() + 1);      }      m_target.releaseStatement(stmt);      m_totalPrg=new Integer(m_totalPrg.intValue() + 1);    }  }}  }
class C{  private void onChanged(){  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.261 -0500",hash_original_method="89517E0D3099BE3BB50FEAB8A124BB8F",hash_generated_method="FA68B779C0A9D00C5971A12EE0357A09") public boolean wpsDisplaySupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_DISPLAY) != 0;}  }
class C{  public boolean isPreferredFlag(){  return preferredFlag;}  }
class C{  public <E extends Layout,AE extends Array1D<E>>Class<AE> genArray1DImpl(final Class<E> elementInterfaceClass){  return genArray1DImpl(elementInterfaceClass,null);}  }
class C{  public Boolean isMultipleCopies(){  return multipleCopies;}  }
class C{  public void plotData(){  Debug.message("basic","ScatterGraph.plotData()");  Enumeration all_sites=sites_displayed_.elements();  int num_elements=0;  int num_sites=0;  plot_points_.clear();  if (!axes_displayed_) {    drawGraphAxes();  }  while (all_sites.hasMoreElements()) {    GLOBESite site=(GLOBESite)all_sites.nextElement();    Enumeration years=sortEnumerationOfFloats(site.getAllYears());    float last_year=Float.NaN;    float last_temp=Float.NaN;    num_sites++;    while (years.hasMoreElements()) {      float year=((Float)years.nextElement()).floatValue();      float temp=site.getValueForYear(year);      OMGraphic point=plotPoint(year,temp);      plot_points_.add(point);      if (!Float.isNaN(last_year)) {        OMGraphic line=createGraphLine(last_year,last_temp,year,temp);        plot_points_.add(line);      }      last_year=year;      last_temp=temp;      num_elements++;    }  }  plot_graphics_.add(plot_points_);}  }
class C{  final public int pos(final int pos){  if (pos < 0 || pos >= buf.length)   throw new IllegalArgumentException("pos=" + pos + ", capacity="+ buf.length);  int v=this.pos;  this.pos=pos;  return v;}  }
class C{  private void discardAudioFocusOwner(){synchronized (mAudioFocusLock) {    if (!mFocusStack.empty() && (mFocusStack.peek().mFocusDispatcher != null)) {      FocusStackEntry focusOwner=mFocusStack.pop();      try {        focusOwner.mFocusDispatcher.dispatchAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS,focusOwner.mClientId);      } catch (      RemoteException e) {        Log.e(TAG,"Failure to signal loss of audio focus due to " + e);        e.printStackTrace();      }      focusOwner.unlinkToDeath();synchronized (mRCStack) {        clearRemoteControlDisplay_syncAfRcs();      }    }  }}  }
class C{  protected long completedTime(){  return overallEndTime();}  }
class C{  protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  formatParamAsVer(buffer,cookie.getName(),cookie.getValue(),version);  if (cookie.getPath() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PATH_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Path",cookie.getPath(),version);    }  }  if (cookie.getDomain() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Domain",cookie.getDomain(),version);    }  }}  }
class C{  public void queueJobForExecution(ReplicationJob job){  jobExecutor.add(job);  counters.incrementCounter(ReplicationCounters.Type.EXECUTION_SUBMITTED_TASKS);}  }
class C{  private void rebuildNode(final NaviNode node){  (((ZyNodeRealizer<?>)m_graph.getGraph().getRealizer(node.getNode()))).regenerate();}  }
class C{  public static AbstractAllGroupHeadsCollector<?> create(String groupField,Sort sortWithinGroup,int initialSize){  boolean sortAllScore=true;  boolean sortAllFieldValue=true;  for (  SortField sortField : sortWithinGroup.getSort()) {    if (sortField.getType() == SortField.Type.SCORE) {      sortAllFieldValue=false;    } else     if (needGeneralImpl(sortField)) {      return new GeneralAllGroupHeadsCollector(groupField,sortWithinGroup);    } else {      sortAllScore=false;    }  }  if (sortAllScore) {    return new ScoreAllGroupHeadsCollector(groupField,sortWithinGroup,initialSize);  } else   if (sortAllFieldValue) {    return new OrdAllGroupHeadsCollector(groupField,sortWithinGroup,initialSize);  } else {    return new OrdScoreAllGroupHeadsCollector(groupField,sortWithinGroup,initialSize);  }}  }
class C{  @Override public void addChild(FXGNode child){  super.addChild(child);}  }
class C{  public void reset(){  currentSite=null;  siteModel.removeAllElements();  siteModel.addElement(Constant.messages.getString("httpsessions.toolbar.site.select"));  sessionsModel=new HttpSessionsTableModel(null);  getHttpSessionsTable().setModel(sessionsModel);}  }
class C{  public void detach(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  private Boolean validQuotaDirectoryPath(String volName,String quotaDirName){  if (volName == null && quotaDirName == null) {    _log.info("Invalid volume name and quota directory name ");    return false;  } else {    if (quotaDirName.length() > QUOTA_DIR_MAX_NAME) {      _log.error("quota directory name is too long {}, maximum {} chars",quotaDirName.length(),QUOTA_DIR_MAX_NAME);      return false;    }    String qtreePath=VOL_ROOT + volName + "/"+ quotaDirName;    if (qtreePath.length() > QUOTA_DIR_MAX_PATH) {      _log.error("quota directory path is too long {}, maximum {} chars",qtreePath.length(),QUOTA_DIR_MAX_PATH);      return false;    }  }  return true;}  }
class C{  private char readEscapeCharacter(){  if (position == limit) {    throw createParseError("Unterminated escape sequence");  }  char escaped=in.charAt(position++);switch (escaped) {case 'u':    if (position + 4 > limit) {      throw createParseError("Unterminated escape sequence");    }  char result=0;for (int i=position, end=i + 4; i < end; i++) {  char c=in.charAt(i);  result<<=4;  if (c >= '0' && c <= '9') {    result+=(c - '0');  } else   if (c >= 'a' && c <= 'f') {    result+=(c - 'a' + 10);  } else   if (c >= 'A' && c <= 'F') {    result+=(c - 'A' + 10);  } else {    throw new NumberFormatException("\\u" + in.subSequence(position,position + 4));  }}position+=4;return result;case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\n':case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ClusterPolicyManagerConfiguration load() throws ConfigurationException {  load(ConfigurationConstants.PM_PROPERTIES);  props.applyProperties(this,true);  return this;}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public void onMenu(ContextMenuEvent evt){  if (WEditorPopupMenu.PREFERENCE_EVENT.equals(evt.getContextEvent()) && gridField != null) {    if (MRole.getDefault().isShowPreference())     ValuePreference.start(this.getGridField(),getValue());    return;  } else   if (WEditorPopupMenu.CHANGE_LOG_EVENT.equals(evt.getContextEvent())) {    WFieldRecordInfo.start(gridField);  }}  }
class C{  public void indent(){  indent.append("  ");}  }
class C{  public void initializeDefinition(String tableName,String columnName){  m_table=tableName;  m_column=columnName;  s_logger.log(Level.FINEST,toString());}  }
class C{  public DeviceInfo removeDeviceInfo(@Named("id") String id){  EntityManager mgr=getEntityManager();  DeviceInfo deviceinfo=null;  try {    deviceinfo=mgr.find(DeviceInfo.class,id);    mgr.remove(deviceinfo);  }  finally {    mgr.close();  }  return deviceinfo;}  }
class C{  public int hashCode(){  return getStringValue().hashCode();}  }
class C{  public static List<String> tokenizeLine(String input){  List<String> stringParts=new ArrayList<String>();  if (input == null || input.length() == 0)   return stringParts;  String trimmedInput=CharMatcher.WHITESPACE.trimFrom(input);  int pos=0, end;  while ((end=trimmedInput.indexOf(' ',pos)) >= 0) {    stringParts.add(trimmedInput.substring(pos,end));    pos=end + 1;    if (trimmedInput.charAt(pos) == ':') {      stringParts.add(trimmedInput.substring(pos + 1));      return stringParts;    }  }  stringParts.add(trimmedInput.substring(pos));  return stringParts;}  }
class C{  public static String changeRequest(HttpServletRequest request,Properties ctx){  String l_szTrxName=null;  String l_szReturn=null;  boolean l_bSuccess=true;  BigDecimal l_bdAmt=getParameterAsBD(request,"RequestAmt");  int l_nReqID=getParameterAsInt(request,"R_Request_ID");  int l_nOrgID=getParameterAsInt(request,"AD_Org_ID");  int l_nRReqTypeID=getParameterAsInt(request,"R_RequestType_ID");  int l_nRGroupID=getParameterAsInt(request,"R_Group_ID");  int l_nRCategoryID=getParameterAsInt(request,"R_Category_ID");  int l_nRReqRelID=getParameterAsInt(request,"R_RequestRelated_ID");  int l_nRStatusID=getParameterAsInt(request,"R_Status_ID");  int l_nRResolID=getParameterAsInt(request,"R_Resolution_ID");  int l_nBPartnerID=getParameterAsInt(request,"C_BPartner_ID");  int l_nUserID=getParameterAsInt(request,"AD_User_ID");  int l_nProjectID=getParameterAsInt(request,"C_Project_ID");  int l_nAssetID=getParameterAsInt(request,"A_Asset_ID");  int l_nOrderID=getParameterAsInt(request,"C_Order_ID");  int l_nInvoiceID=getParameterAsInt(request,"C_Invoice_ID");  int l_nProductID=getParameterAsInt(request,"M_Product_ID");  int l_nPaymentID=getParameterAsInt(request,"C_Payment_ID");  int l_nInOutID=getParameterAsInt(request,"M_InOut_ID");  int l_nRMAID=getParameterAsInt(request,"M_RMA_ID");  int l_nCampaignID=getParameterAsInt(request,"C_Campaign_ID");  int l_nResponseID=getParameterAsInt(request,"R_StandardResponse_ID");  int l_nMailTextID=getParameterAsInt(request,"R_MailText_ID");  int l_nActivityID=getParameterAsInt(request,"C_Activity_ID");  int l_nProdSpentID=getParameterAsInt(request,"M_ProductSpent_ID");  BigDecimal l_QtySpent=getParameterAsBD(request,"QtySpent");  BigDecimal l_QtyInvoiced=getParameterAsBD(request,"QtyInvoiced");  BigDecimal l_QtyPlan=getParameterAsBD(request,"QtyPlan");  Timestamp l_tsDateNextAction=getParameterAsDate(request,"DateNextAction");  Timestamp l_tsDateStartPlan=getParameterAsDate(request,"DateStartPlan");  Timestamp l_tsDateCompletePlan=getParameterAsDate(request,"DateCompletePlan");  Timestamp l_tsStartDate=getParameterAsDate(request,"StartDate");  Timestamp l_tsCloseDate=getParameterAsDate(request,"CloseDate");  MRequest newRequest=new MRequest(ctx,l_nReqID,l_szTrxName);  newRequest.setAD_Org_ID(l_nOrgID);  newRequest.setDueType(getParameterAsString(request,"DueType"));  newRequest.setR_RequestType_ID(l_nRReqTypeID);  newRequest.setR_Group_ID(l_nRGroupID);  newRequest.setR_Category_ID(l_nRCategoryID);  newRequest.setR_RequestRelated_ID(l_nRReqRelID);  newRequest.setR_Status_ID(l_nRStatusID);  newRequest.setR_Resolution_ID(l_nRResolID);  newRequest.setPriority(getParameterAsString(request,"Priority"));  newRequest.setPriorityUser(getParameterAsString(request,"PriorityUser"));  newRequest.setSummary(getParameterAsString(request,"Summary"));  newRequest.setConfidentialType(getParameterAsString(request,"ConfidentialType"));  newRequest.setIsInvoiced(getParameterAsBool(request,"IsInvoiced"));  newRequest.setDateNextAction(l_tsDateNextAction);  newRequest.setConfidentialTypeEntry(getParameterAsString(request,"ConfidentialTypeEntry"));  newRequest.setR_StandardResponse_ID(l_nResponseID);  newRequest.setR_MailText_ID(l_nMailTextID);  newRequest.setResult(getParameterAsString(request,"Result"));  newRequest.setC_Activity_ID(l_nActivityID);  newRequest.setQtyPlan(l_QtyPlan);  newRequest.setQtySpent(l_QtySpent);  newRequest.setM_ProductSpent_ID(l_nProdSpentID);  newRequest.setQtyInvoiced(l_QtyInvoiced);  newRequest.setDateStartPlan(l_tsDateStartPlan);  newRequest.setDateCompletePlan(l_tsDateCompletePlan);  newRequest.setStartDate(l_tsStartDate);  newRequest.setCloseDate(l_tsCloseDate);  newRequest.setC_BPartner_ID(l_nBPartnerID);  newRequest.setAD_User_ID(l_nUserID);  newRequest.setC_Project_ID(l_nProjectID);  newRequest.setA_Asset_ID(l_nAssetID);  newRequest.setC_Order_ID(l_nOrderID);  newRequest.setC_Invoice_ID(l_nInvoiceID);  newRequest.setM_Product_ID(l_nProductID);  newRequest.setC_Payment_ID(l_nPaymentID);  newRequest.setM_InOut_ID(l_nInOutID);  newRequest.setM_RMA_ID(l_nRMAID);  newRequest.setRequestAmt(l_bdAmt);  newRequest.setC_Campaign_ID(l_nCampaignID);  l_bSuccess&=newRequest.save();  if (l_bSuccess) {    try {      DB.commit(true,l_szTrxName);      l_szReturn="" + newRequest.get_ID();    } catch (    Exception e) {      l_szReturn=e.getMessage();    }  }  return l_szReturn;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_succeeded"),rawResult);      Bundle bundle=new Bundle();      Bitmap grayscaleBitmap=toBitmap(source,source.renderCroppedGreyscaleBitmap());      bundle.putParcelable(DecodeThread.BARCODE_BITMAP,grayscaleBitmap);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_failed"));      message.sendToTarget();    }  }}  }
class C{  public void testSuccessWithSuccessThreshold(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  for (int i=0; i < 3; i++) {    assertFalse(breaker.isOpen());    assertFalse(breaker.isClosed());    state.recordSuccess();  }  assertTrue(breaker.isClosed());}  }
class C{  public void flattenTransform(){  if (get(TRANSFORM) != null) {    path.transform(get(TRANSFORM));    set(TRANSFORM,null);  }  invalidate();}  }
class C{  public boolean mousePressed(MouseEvent e){  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.IDENTIFIER_REF__STRICT_MODE:    return isStrictMode();case N4JSPackage.IDENTIFIER_REF__ID:  if (resolve)   return getId();return basicGetId();case N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:return getIdAsText();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public HistogramComponent(final String name,final HistogramModel model){  super(name);  this.model=model;  init();  addListener();}  }
class C{  private static File touchedFile() throws IOException {  final File file=File.createTempFile("take",".txt");  file.deleteOnExit();  FkHitRefresh.touch(file);  return file;}  }
class C{  protected void addViolation(RuleContext ctx,DelphiPMDNode node){  ctx.getReport().addRuleViolation(new DelphiRuleViolation(this,ctx,node));}  }
class C{  public X509Name(Vector oids,Vector values){  this(oids,values,new X509DefaultEntryConverter());}  }
class C{  private String imageReferenceToImageId(ImageReference imageReference){  return imageReference.getPublisher() + ":" + imageReference.getOffer()+ ":"+ imageReference.getSku()+ ":"+ imageReference.getVersion();}  }
class C{  public CCSprite tileAt(CGPoint pos){  assert (pos.x < layerSize.width && pos.y < layerSize.height && pos.x >= 0 && pos.y >= 0) : "TMXLayer: invalid position";  assert (tiles != null && atlasIndexArray_ != null) : "TMXLayer: the tiles map has been released";  CCSprite tile=null;  int gid=tileGIDAt(pos);  if (gid != 0) {    int z=(int)(pos.x + pos.y * layerSize.width);    tile=(CCSprite)getChildByTag(z);    if (tile == null) {      CGRect rect=tileset.rectForGID(gid);      tile=CCSprite.sprite(this,rect);      tile.setPosition(positionAt(pos));      tile.setVertexZ(vertexZForPos(pos));      tile.setAnchorPoint(CGPoint.zero());      tile.setOpacity(opacity_);      int indexForZ=atlasIndexForExistantZ(z);      addSpriteWithoutQuad(tile,indexForZ,z);    }  }  return tile;}  }
class C{  @Deprecated @Override public String escapeXmlName(final String name){  return super.encodeNode(name);}  }
class C{  public FilterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static ConcreteMembersOrderedForTranspiler create(ContainerTypesHelper containerTypesHelper,TClassifier type,Script context){  MemberCollector collector=containerTypesHelper.fromContext(context);  List<TMember> concreteInheritedMembers=(type instanceof TClass) ? collector.inheritedMembers((TClass)type) : emptyList();  List<TMember> ownedAndMixedInConcreteMembers=collector.computeOwnedAndMixedInConcreteMembers(type);  List<AccessorTuple> concreteAccessorTuples=getConcreteFieldAccessors(ownedAndMixedInConcreteMembers,concreteInheritedMembers);  MemberList<TField> fieldsOverridingAccessors=getFieldsOverridingAccessor(ownedAndMixedInConcreteMembers,concreteInheritedMembers);  MemberList<TField> fieldsPurelyMixedInNotOverridingAccessor=new MemberList<>();  fieldsPurelyMixedInNotOverridingAccessor.addAll(ownedAndMixedInConcreteMembers.stream().filter(null).map(null).filter(null).collect(Collectors.toList()));  return new ConcreteMembersOrderedForTranspiler(concreteInheritedMembers,ownedAndMixedInConcreteMembers,concreteAccessorTuples,fieldsOverridingAccessors,fieldsPurelyMixedInNotOverridingAccessor);}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  private List<CategoryDTO> createRootStructure(){  final CategoryDTO root=new CategoryDTOImpl();  root.setCategoryId(100L);  root.setParentId(100L);  final CategoryDTO lvl1_1=new CategoryDTOImpl();  lvl1_1.setCategoryId(110L);  lvl1_1.setParentId(100L);  final CategoryDTO lvl1_2=new CategoryDTOImpl();  lvl1_2.setCategoryId(120L);  lvl1_2.setParentId(100L);  final CategoryDTO lvl1_3=new CategoryDTOImpl();  lvl1_3.setCategoryId(130L);  lvl1_3.setParentId(100L);  root.setChildren(Arrays.asList(lvl1_1,lvl1_2,lvl1_3));  final CategoryDTO lvl2_1=new CategoryDTOImpl();  lvl2_1.setCategoryId(111L);  lvl2_1.setParentId(110L);  final CategoryDTO lvl2_2=new CategoryDTOImpl();  lvl2_2.setCategoryId(112L);  lvl2_2.setParentId(110L);  final CategoryDTO lvl2_3=new CategoryDTOImpl();  lvl2_3.setCategoryId(113L);  lvl2_3.setParentId(110L);  lvl1_1.setChildren(Arrays.asList(lvl2_1,lvl2_2,lvl2_3));  return Collections.singletonList(root);}  }
class C{  protected void clearEvents(){  sCIA.clearEvents();}  }
class C{  private boolean validRPVPlexStoragePool(StoragePool storagePool){  List<String> vplexSystemsForPool=VPlexHighAvailabilityMatcher.getVPlexStorageSystemsForStorageSystem(_objectCache.getDbClient(),storagePool.getStorageDevice(),null);  if (vplexSystemsForPool != null && !vplexSystemsForPool.isEmpty()) {    return true;  }  return false;}  }
class C{  public void init(AuthenticationProvider authProvider,RemoteAuthenticatedUser user){  this.authProvider=authProvider;  this.connectionDirectory.init(user);  this.rootGroup=new SharedRootConnectionGroup(this);  this.connectionGroupDirectory=new SimpleConnectionGroupDirectory(Collections.singletonList(this.rootGroup));  this.self=new SharedUser(user,this);  this.userDirectory=new SimpleDirectory<User>();}  }
class C{  protected void onScrollX(int scrollX){}  }
class C{  public boolean showMircColors(){  return preferences.getBoolean(resources.getString(R.string.key_mirc_colors),Boolean.parseBoolean(resources.getString(R.string.default_mirc_colors)));}  }
class C{  @Override public int shardId(){  if (shardTarget != null) {    return shardTarget.shardId();  }  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.471 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Builder compressionLevel(final int compressionLevel){  checkArgument(compressionLevel > -1 && compressionLevel <= 9,"compressionLevel must be -1 or 0-9.");  this.compressionLevel=compressionLevel;  return this;}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public String update(String xml){  try (SolrCore core=getCoreInc()){    DirectSolrConnection connection=new DirectSolrConnection(core);    SolrRequestHandler handler=core.getRequestHandler("/update");    if (handler == null) {      handler=updater;    }    return connection.request(handler,null,xml);  } catch (  SolrException e) {    throw (SolrException)e;  }catch (  Exception e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};  double[] neighbours=new double[8];  boolean patternMatch=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    do {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z > 0 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != vals[a][i]) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }    } while (counter > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean canMapRegs(ArrayList<RegisterSpec> specs,int ropReg){  for (  RegisterSpec spec : specs) {    if (ssaRegsMapped.get(spec.getReg()))     continue;    if (!canMapReg(spec,ropReg))     return false;  }  return true;}  }
class C{  public double calculateLogLikelihood(){  double logL=0.0;  for (  Statistic statistic : dataList) {    for (int j=0; j < statistic.getDimension(); j++) {      logL-=3 * Math.log(statistic.getStatisticValue(j));    }  }  return logL;}  }
class C{  private void clearMessages(){  messages.clear();}  }
class C{  @Override public void init(String[] args,String name,String configFile) throws ContainerException {  this.name=name;  this.configFile=configFile;  this.stores=new LinkedHashMap<Store,Session>();  this.pollTimer=Executors.newScheduledThreadPool(1);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  fdrname=nextToken.substring(1,nextToken.length() - 1);  StringTokenizer tokenizer2=new StringTokenizer(tokenizer.nextToken(),",");  vollisttype=Integer.parseInt(tokenizer2.nextToken());  if (tokenizer2.hasMoreTokens()) {    id=Integer.parseInt(tokenizer2.nextToken());  }}  }
class C{  public Set<String> dealtItems(){  return priceCalculator.dealtItems();}  }
class C{  public IntIterator rows(){  return new RowIterator(false);}  }
class C{  protected void basicHandlePrimaryDestroy(final GatewaySenderEventImpl gatewayEvent){  if (this.sender.isPrimary()) {    return;  }  GatewaySenderStats statistics=this.sender.getStatistics();synchronized (unprocessedEventsLock) {    if (this.unprocessedEvents == null)     return;    EventWrapper ew=this.unprocessedEvents.remove(gatewayEvent.getEventId());    if (ew != null) {      ew.event.release();      statistics.incUnprocessedEventsRemovedByPrimary();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_1__TAIL_1:    return TAIL_1_EDEFAULT == null ? tail_1 != null : !TAIL_1_EDEFAULT.equals(tail_1);}return super.eIsSet(featureID);}  }
class C{  public void incMinedForItem(String name,int quantity){  itemCounter.incMinedForItem(name,quantity);}  }
class C{  void defineSettings(){  String loginFile=Chatty.getUserDataDirectory() + "login";  String historyFile=Chatty.getUserDataDirectory() + "favoritesAndHistory";  String statusPresetsFile=Chatty.getUserDataDirectory() + "statusPresets";  backup.addFile("settings");  backup.addFile(historyFile);  backup.addFile(statusPresetsFile);  backup.addFile("addressbook");  settings.addFile(loginFile);  settings.addFile(historyFile);  settings.addFile(statusPresetsFile);  settings.addBoolean("dontSaveSettings",false);  settings.addBoolean("debugCommands",false,false);  settings.addBoolean("debugLogIrc",false);  settings.addBoolean("debugLogIrcFile",false);  settings.addBoolean("autoRequestMods",false);  settings.addLong("backupDelay",1);  settings.addLong("backupCount",5);  settings.addLong("versionLastChecked",0);  settings.addString("updateAvailable","");  settings.addBoolean("checkNewVersion",true);  settings.addBoolean("newsAutoRequest",true);  settings.addLong("newsLastRead",0);  settings.addString("currentVersion","");  addDefaultHotkeyAppWide("0.7.3","dialog.streams","ctrl L");  addDefaultHotkey("0.7.3","dialog.toggleEmotes","ctrl E");  addDefaultHotkey("0.7.3","dialog.search","ctrl F");  addDefaultHotkey("0.7.3","dialog.joinChannel","ctrl J");  addDefaultHotkey("0.7.3","window.toggleUserlist","shift F10");  addDefaultHotkey("0.7.3","window.toggleInput","ctrl F10");  addDefaultHotkey("0.7.3","window.toggleCompact","F10");  addDefaultHotkey("0.7.3","window.toggleCompactMaximized","F11");  addDefaultHotkey("0.7.3","tabs.close","ctrl W");  addDefaultHotkeyAppWide("0.7.3","tabs.next","ctrl TAB");  addDefaultHotkeyAppWide("0.7.3","tabs.previous","ctrl shift TAB");  addDefaultHotkey("0.7.3","selection.toggle","ctrl SPACE");  addDefaultHotkey("0.7.3","selection.toggle","ctrl S");  settings.addList("hotkeys",getDefaultHotkeySettingValue(),Setting.LIST);  settings.addBoolean("globalHotkeysEnabled",true);  settings.addString("serverDefault","irc.chat.twitch.tv");  settings.addString("portDefault","6697,6667,443,80");  settings.addString("server","",false);  settings.addString("port","",false);  settings.addList("securedPorts",new LinkedHashSet<>(Arrays.asList((long)6697,(long)443)),Setting.LONG);  settings.addBoolean("membershipEnabled",true);  settings.addString("pubsub","wss://pubsub-edge.twitch.tv");  settings.addString("channel","");  settings.addString("username","");  settings.setFile("username",loginFile);  settings.addString("password","",false);  settings.addBoolean("connectOnStartup",false,false);  settings.addLong("onStart",1);  settings.addString("autojoinChannel","");  settings.addString("previousChannel","");  settings.addString("token","");  settings.setFile("token",loginFile);  settings.addBoolean("allowTokenOverride",false);  settings.addBoolean("foreignToken",false);  settings.addBoolean("usePassword",false,false);  settings.addBoolean("token_editor",false);  settings.setFile("token_editor",loginFile);  settings.addBoolean("token_commercials",false);  settings.setFile("token_commercials",loginFile);  settings.addBoolean("token_user",false);  settings.setFile("token_user",loginFile);  settings.addBoolean("token_subs",false);  settings.setFile("token_subs",loginFile);  settings.addBoolean("token_chat",false);  settings.setFile("token_chat",loginFile);  settings.addBoolean("token_follow",false);  settings.setFile("token_follow",loginFile);  settings.addBoolean("ontop",false);  settings.addString("laf","default");  settings.addLong("dialogFontSize",-1);  settings.addString("font","Consolas");  settings.addLong("fontSize",14);  settings.addString("inputFont","Dialog 14");  settings.addLong("lineSpacing",3);  settings.addString("timestamp","[HH:mm]");  settings.addString("timestampTimezone","");  settings.addBoolean("capitalizedNames",true);  settings.addBoolean("ircv3CapitalizedNames",true);  settings.addBoolean("correctlyCapitalizedNames",false);  settings.addMap("customNames",new HashMap<>(),Setting.STRING);  settings.addBoolean("actionColored",false);  settings.addLong("displayNamesMode",DISPLAY_NAMES_MODE_BOTH);  settings.addLong("displayNamesModeUserlist",DISPLAY_NAMES_MODE_CAPITALIZED);  settings.addBoolean("emoticonsEnabled",true);  settings.addLong("emoteMaxHeight",0);  settings.addLong("emoteScale",100);  settings.addLong("emoteScaleDialog",100);  settings.addBoolean("closeEmoteDialogOnDoubleClick",false);  settings.addBoolean("ffz",true);  settings.addBoolean("ffzEvent",true);  settings.addBoolean("ffzModIcon",true);  settings.addBoolean("bttvEmotes",true);  settings.addBoolean("showAnimatedEmotes",false);  settings.addList("ignoredEmotes",new ArrayList(),Setting.STRING);  settings.addList("favoriteEmotes",new ArrayList(),Setting.LIST);  settings.addString("emoji","twemoji");  settings.addString("cheersType","static");  settings.addBoolean("usericonsEnabled",true);  settings.addList("customUsericons",new ArrayList(),Setting.LIST);  settings.addBoolean("customUsericonsEnabled",false);  settings.addBoolean("botBadgeEnabled",true);  settings.addBoolean("botNamesBTTV",true);  settings.addBoolean("botNamesFFZ",true);  settings.addList("botNames",new LinkedHashSet<>(Arrays.asList("nightbot","moobot","kabukibot","slowton2","xanbot")),Setting.STRING);  settings.addBoolean("imageCache",true);  settings.addString("foregroundColor","#111111");  settings.addString("backgroundColor","#FAFAFA");  settings.addString("infoColor","#001480");  settings.addString("compactColor","#A0A0A0");  settings.addString("inputBackgroundColor","#FFFFFF");  settings.addString("inputForegroundColor","#000000");  settings.addString("highlightColor","#FF0000");  settings.addString("searchResultColor","LightYellow");  settings.addString("searchResultColor2","#FFFF80");  settings.addBoolean("colorCorrection",true);  settings.addBoolean("customUsercolors",false);  settings.addList("usercolors",new LinkedList(),Setting.STRING);  settings.addString("abCommandsChannel","");  settings.addString("abCommands","add,set,remove");  settings.addString("abUniqueCats","");  settings.addBoolean("abAutoImport",false);  settings.addString("abSubMonthsChan","");  settings.addList("abSubMonths",new TreeSet(),Setting.LONG);  settings.addBoolean("abSaveOnChange",false);  settings.addList("commands",new ArrayList(),Setting.STRING);  settings.setAdd("commands","/slap /me slaps $$1- around a bit with a large trout");  settings.setAdd("commands","/permit !permit $$1");  settings.addString("timeoutButtons","/Ban[B], /Unban[U], 5s[1], 2m[2], 10m[3], 30m[4]");  settings.addString("userContextMenu","");  settings.addString("channelContextMenu","");  settings.addMap("channelHistory",new TreeMap(),Setting.LONG);  settings.setFile("channelHistory",historyFile);  settings.addList("channelFavorites",new ArrayList(),Setting.STRING);  settings.setFile("channelFavorites",historyFile);  settings.addLong("channelHistoryKeepDays",30);  settings.addBoolean("saveChannelHistory",true);  settings.addBoolean("historyClear",true);  settings.addLong("favoritesSorting",20);  settings.addList("gamesFavorites",new ArrayList(),Setting.STRING);  settings.setFile("gamesFavorites",historyFile);  settings.addList("statusPresets",new ArrayList(),Setting.LIST);  settings.setFile("statusPresets",statusPresetsFile);  settings.addBoolean("saveStatusHistory",true);  settings.addBoolean("statusHistoryClear",true);  settings.addLong("statusHistoryKeepDays",30);  settings.addString("statusHistorySorting","");  settings.addString("commercialHotkey","");  settings.addBoolean("adDelay",false);  settings.addLong("adDelayLength",300);  settings.addBoolean("urlPrompt",true);  settings.addBoolean("urlCommandEnabled",false);  settings.addString("urlCommand","");  settings.addBoolean("attachedWindows",false);  settings.addBoolean("maximized",false);  settings.addBoolean("nod3d",true);  settings.addBoolean("noddraw",false);  settings.addBoolean("bufferStrategy1",false);  settings.addBoolean("mainResizable",true);  settings.addBoolean("closeToTray",false);  settings.addBoolean("minimizeToTray",false);  settings.addMap("windows",new HashMap<>(),Setting.STRING);  settings.addLong("restoreMode",WindowStateManager.RESTORE_ON_START);  settings.addBoolean("restoreOnlyIfOnScreen",true);  settings.addBoolean("popoutSaveAttributes",true);  settings.addBoolean("popoutCloseLastChannel",true);  settings.addList("popoutAttributes",new ArrayList(),Setting.STRING);  settings.addBoolean("simpleTitle",false);  settings.addBoolean("titleShowUptime",true);  settings.addBoolean("titleLongerUptime",true);  settings.addBoolean("titleShowViewerCount",true);  settings.addBoolean("titleShowChannelState",true);  settings.addString("titleAddition","");  settings.addString("tabOrder","normal");  settings.addBoolean("tabsMwheelScrolling",false);  settings.addBoolean("tabsMwheelScrollingAnywhere",false);  settings.addBoolean("chatScrollbarAlways",false);  settings.addLong("userlistWidth",120);  settings.addLong("userlistMinWidth",0);  settings.addBoolean("userlistEnabled",true);  settings.addLong("bufferSize",500);  settings.addString("liveStreamsSorting","recent");  settings.addLong("historyRange",0);  settings.addBoolean("sounds",false);  settings.addString("soundDevice","");  settings.addString("highlightSound","off");  settings.addString("highlightSoundFile","ding.wav");  settings.addLong("highlightSoundDelay",15);  settings.addLong("soundDelay",15);  settings.addLong("highlightSoundVolume",100);  settings.addString("statusSound","off");  settings.addString("statusSoundFile","dingdong.wav");  settings.addLong("statusSoundVolume",100);  settings.addLong("statusSoundDelay",15);  settings.addString("messageSound","off");  settings.addString("messageSoundFile","dingdong.wav");  settings.addLong("messageSoundVolume",100);  settings.addLong("messageSoundDelay",5);  settings.addString("joinPartSound","off");  settings.addString("joinPartSoundFile","dingdong.wav");  settings.addLong("joinPartSoundVolume",100);  settings.addLong("joinPartSoundDelay",10);  settings.addString("followerSound","off");  settings.addString("followerSoundFile","dingdong.wav");  settings.addLong("followerSoundVolume",100);  settings.addLong("followerSoundDelay",10);  settings.addString("highlightNotification","either");  settings.addString("statusNotification","either");  settings.addBoolean("ignoreOfflineNotifications",false);  settings.addBoolean("requestFollowedStreams",true);  settings.addBoolean("useCustomNotifications",true);  settings.addLong("nType",0);  settings.addLong("nScreen",-1);  settings.addLong("nPosition",3);  settings.addLong("nDisplayTime",10);  settings.addLong("nMaxDisplayTime",60 * 30);  settings.addLong("nMaxDisplayed",4);  settings.addLong("nMaxQueueSize",4);  settings.addBoolean("nActivity",false);  settings.addLong("nActivityTime",10);  settings.addList("notificationProperties",new ArrayList<>(),Setting.LIST);  settings.addBoolean("tips",true);  settings.addLong("lastTip",0);  settings.addString("spamProtection","18/30");  settings.addBoolean("autoScroll",true);  settings.addLong("autoScrollTimeout",30);  settings.addBoolean("pauseChatOnMouseMove",false);  settings.addBoolean("pauseChatOnMouseMoveCtrlRequired",false);  settings.addString("commandOnCtrlClick","");  settings.addBoolean("ignoreJoinsParts",false);  settings.addBoolean("showJoinsParts",false);  settings.addBoolean("showModMessages",false);  settings.addBoolean("twitchnotifyAsInfo",true);  settings.addBoolean("printStreamStatus",true);  settings.addBoolean("showModActions",false);  settings.addBoolean("showBanMessages",false);  settings.addBoolean("banDurationAppended",true);  settings.addBoolean("banReasonAppended",true);  settings.addBoolean("banDurationMessage",true);  settings.addBoolean("banReasonMessage",true);  settings.addBoolean("combineBanMessages",true);  settings.addBoolean("deleteMessages",false);  settings.addString("deletedMessagesMode","keepShortened");  settings.addLong("deletedMessagesMaxLength",50);  settings.addBoolean("clearChatOnChannelCleared",false);  settings.addLong("filterCombiningCharacters",Helper.FILTER_COMBINING_CHARACTERS_LENIENT);  settings.addList("highlight",new ArrayList(),Setting.STRING);  settings.addBoolean("highlightEnabled",true);  settings.addBoolean("highlightUsername",true);  settings.addBoolean("highlightOwnText",false);  settings.addBoolean("highlightNextMessages",false);  settings.addBoolean("highlightIgnored",false);  settings.addList("noHighlightUsers",new ArrayList(),Setting.STRING);  settings.addList("ignore",new ArrayList(),Setting.STRING);  settings.addBoolean("ignoreEnabled",false);  settings.addBoolean("ignoreOwnText",false);  settings.addLong("ignoreMode",1);  settings.addBoolean("ignoreShowNotDialog",false);  settings.addList("ignoredUsers",new ArrayList(),Setting.STRING);  settings.addList("ignoredUsersWhisper",new ArrayList(),Setting.STRING);  settings.addBoolean("ignoredUsersHideInGUI",true);  settings.addString("logMode","always");  settings.addBoolean("logMod",true);  settings.addBoolean("logJoinPart",false);  settings.addBoolean("logBan",true);  settings.addBoolean("logSystem",false);  settings.addBoolean("logInfo",true);  settings.addBoolean("logViewerstats",true);  settings.addBoolean("logViewercount",false);  settings.addBoolean("logModAction",true);  settings.addList("logWhitelist",new ArrayList(),Setting.STRING);  settings.addList("logBlacklist",new ArrayList(),Setting.STRING);  settings.addString("logPath","");  settings.addString("logTimestamp","[HH:mm:ss]");  settings.addMap("customCompletion",new HashMap(),Setting.STRING);  settings.addLong("completionMaxItemsShown",5);  settings.addBoolean("completionShowPopup",true);  settings.addBoolean("completionCommonPrefix",false);  settings.addString("completionSorting","predictive");  settings.addBoolean("completionAllNameTypes",true);  settings.addBoolean("completionPreferUsernames",true);  settings.addBoolean("completionAllNameTypesRestriction",true);  settings.addLong("streamChatMessageTimeout",-1);  settings.addList("streamChatChannels",new ArrayList(),Setting.STRING);  settings.addBoolean("streamChatBottom",true);  settings.addBoolean("streamChatResizable",true);  settings.addBoolean("whisperEnabled",false);  settings.addBoolean("whisperWhitelist",false);  settings.addLong("whisperDisplayMode",WhisperManager.DISPLAY_PER_USER);  settings.addString("groupChatServer","");  settings.addString("groupChatPort","");  settings.addBoolean("whisperAutoRespond",false);  settings.addBoolean("cmEnabled",false);  settings.addString("cmChannel","");  settings.addString("cmTemplate","{user}: {message}");  settings.addBoolean("cmHighlightedOnly",false);  settings.addBoolean("rulesAutoShow",true);  settings.addList("rulesShown",new HashSet(),Setting.STRING);  settings.addBoolean("livestreamer",false);  settings.addString("livestreamerQualities","Best, Worst, Select");  settings.addString("livestreamerCommand","livestreamer");  settings.addBoolean("livestreamerUseAuth",false);  settings.addBoolean("livestreamerShowDialog",true);  settings.addString("streamHighlightCommand","!highlight");  settings.addString("streamHighlightChannel","");  settings.addBoolean("streamHighlightChannelRespond",false);  settings.addBoolean("enableStatusWriter",false);  settings.addString("statusWriter","");  settings.addBoolean("autoUnhost",false);  settings.addList("autoUnhostStreams",new ArrayList(),Setting.STRING);}  }
class C{  @Override public void windowIconified(WindowEvent e){}  }
class C{  protected int hprs(int N,int M,int n,MersenneTwisterFast randomGenerator){  int Dk, X, V;  double Mp, np, p, nu, U, Y, W;  if (N != N_last || M != M_last || n != n_last) {    N_last=N;    M_last=M;    n_last=n;    Mp=(double)(M + 1);    np=(double)(n + 1);    N_Mn=N - M - n;    p=Mp / (N + 2.0);    nu=np * p;    U=Math.sqrt(nu * (1.0 - p) * (1.0 - (n + 2.0) / (N + 3.0)) + 0.25);    m=(int)nu;    k2=(int)Math.ceil(nu - 0.5 - U);    if (k2 >= m)     k2=m - 1;    k4=(int)(nu - 0.5 + U);    k1=k2 + k2 - m + 1;    k5=k4 + k4 - m;    dl=(double)(k2 - k1);    dr=(double)(k5 - k4);    r1=(np / (double)k1 - 1.0) * (Mp - k1) / (double)(N_Mn + k1);    r2=(np / (double)k2 - 1.0) * (Mp - k2) / (double)(N_Mn + k2);    r4=(np / (double)(k4 + 1) - 1.0) * (M - k4) / (double)(N_Mn + k4 + 1);    r5=(np / (double)(k5 + 1) - 1.0) * (M - k5) / (double)(N_Mn + k5 + 1);    ll=Math.log(r1);    lr=-Math.log(r5);    c_pm=fc_lnpk(m,N_Mn,M,n);    f2=Math.exp(c_pm - fc_lnpk(k2,N_Mn,M,n));    f4=Math.exp(c_pm - fc_lnpk(k4,N_Mn,M,n));    f1=Math.exp(c_pm - fc_lnpk(k1,N_Mn,M,n));    f5=Math.exp(c_pm - fc_lnpk(k5,N_Mn,M,n));    p1=f2 * (dl + 1.0);    p2=f2 * dl + p1;    p3=f4 * (dr + 1.0) + p2;    p4=f4 * dr + p3;    p5=f1 / ll + p4;    p6=f5 / lr + p5;  }  for (; ; ) {    if ((U=randomGenerator.nextDouble() * p6) < p2) {      if ((W=U - p1) < 0.0)       return (k2 + (int)(U / f2));      if ((Y=W / dl) < f1)       return (k1 + (int)(W / f1));      Dk=(int)(dl * randomGenerator.nextDouble()) + 1;      if (Y <= f2 - Dk * (f2 - f2 / r2)) {        return (k2 - Dk);      }      if ((W=f2 + f2 - Y) < 1.0) {        V=k2 + Dk;        if (W <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {          return (V);        }        if (Math.log(W) <= c_pm - fc_lnpk(V,N_Mn,M,n)) {          return (V);        }      }      X=k2 - Dk;    } else     if (U < p4) {      if ((W=U - p3) < 0.0)       return (k4 - (int)((U - p2) / f4));      if ((Y=W / dr) < f5)       return (k5 - (int)(W / f5));      Dk=(int)(dr * randomGenerator.nextDouble()) + 1;      if (Y <= f4 - Dk * (f4 - f4 * r4)) {        return (k4 + Dk);      }      if ((W=f4 + f4 - Y) < 1.0) {        V=k4 - Dk;        if (W <= f4 + Dk * (1.0 - f4) / dr) {          return (V);        }        if (Math.log(W) <= c_pm - fc_lnpk(V,N_Mn,M,n)) {          return (V);        }      }      X=k4 + Dk;    } else {      Y=randomGenerator.nextDouble();      if (U < p5) {        Dk=(int)(1.0 - Math.log(Y) / ll);        if ((X=k1 - Dk) < 0)         continue;        Y*=(U - p4) * ll;        if (Y <= f1 - Dk * (f1 - f1 / r1)) {          return (X);        }      } else {        Dk=(int)(1.0 - Math.log(Y) / lr);        if ((X=k5 + Dk) > n)         continue;        Y*=(U - p5) * lr;        if (Y <= f5 - Dk * (f5 - f5 * r5)) {          return (X);        }      }    }    if (Math.log(Y) <= c_pm - fc_lnpk(X,N_Mn,M,n))     return (X);  }}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public void unsetFeature(final String name){  remove("features",name);}  }
class C{  public static Object invoke(Class c,Object obj,String method,Class[] paramClasses,Object[] params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Method m=c.getMethod(method,paramClasses);  return m.invoke(obj,params);}  }
class C{  public static boolean contains(double[] array,double valueToFind,double tolerance){  return indexOf(array,valueToFind,0,tolerance) != INDEX_NOT_FOUND;}  }
class C{  private void toString(StringBuilder acc,boolean expand){  if (this.meta != null && !expand) {    acc.append(this.meta);    return;  }switch (this.op) {case EMPTY:    acc.append("<empty>");  return;case EPSILON:acc.append("<epsilon>");return;case RANGE:if (this.low == '\u0000' && this.high == '\uffff') {acc.append(".");return;} else {acc.append('[');acc.append(this.low);acc.append('-');acc.append(this.high);acc.append(']');return;}case STRING:if (this.lit.equals("")) {epsilon.toString(acc,expand);} else {acc.append(this.lit);return;}case UNION:String sep="";for (RE r : alts) {acc.append(sep);r.toString(acc,op.getPrec(),expand);sep="|";}return;case STAR:unaryArg.toString(acc,op.getPrec(),expand);acc.append("*");return;case PLUS:unaryArg.toString(acc,op.getPrec(),expand);acc.append("+");return;case OPTION:unaryArg.toString(acc,op.getPrec(),expand);acc.append("?");return;case CONCAT:for (RE r : cats) {r.toString(acc,op.getPrec(),expand);}return;case BINOP:case UNOP:acc.append(strOp.toString());acc.append("[");sep="";for (RE arg : cats) {acc.append(sep);arg.toString(acc,op.getPrec(),expand);sep=",";}acc.append("]");return;default :acc.append("<unknown>");return;}}  }
class C{  public static double[][] orthogonalize(double[][] vs){  vs=vs.clone();  for (int i=1; i < vs.length; i++) {    for (int j=0; j < i; j++) {      vs[i]=subtract(vs[i],project(vs[i],vs[j]));    }  }  return vs;}  }
class C{  public static Subset newSubset(int k,int n){  return new Subset(k,n);}  }
class C{  public void exitProgram(){  firePropertyChange("exitProgram",null,null);}  }
class C{  void dispose(){  resetTileLine(0);  if (touchedTile != touchedTile_initial) {    rdrCtx.putIntArray(touchedTile,0,0);    touchedTile=touchedTile_initial;  }  if (rowAAChunk.length != INITIAL_CHUNK_ARRAY) {    rowAAChunk.resize(INITIAL_CHUNK_ARRAY);  }  if (DO_CLEAN_DIRTY) {    rowAAChunk.fill(BYTE_0);  }}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<MerchantKey,Map<String,BankIdNumData>> entry : bankIdNumCountMap.entrySet()) {    List<BankIdNumData> list=null;    MerchantKey key=entry.getKey();    if (key.merchantType == MerchantTransaction.MerchantType.INTERNET) {      continue;    }    list=dataOutput(entry.getValue());    if (list.size() > 0) {      for (      BankIdNumData binData : list) {        BankIdNumberAlertData data=new BankIdNumberAlertData();        data.merchantId=key.merchantId;        data.terminalId=key.terminalId == null ? 0 : key.terminalId;        data.zipCode=key.zipCode;        data.merchantType=key.merchantType;        data.bankIdNum=binData.bankIdNum;        data.count=binData.count.intValue();        data.userGenerated=binData.userGenerated;        data.time=System.currentTimeMillis();        try {          countAlertOutputPort.emit(JsonUtils.toJson(data));          countAlertNotificationPort.emit(getOutputData(data));        } catch (        IOException e) {          logger.warn("Exception while converting object to JSON: ",e);        }      }    }  }  bankIdNumCountMap.clear();}  }
class C{  private static String toString(Serializable o) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  oos.writeObject(o);  oos.close();  return new String(Base64.encode(baos.toByteArray(),Base64.DEFAULT));}  }
class C{  public long totalTimeS(){  return totalTimeMS() / 1000;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.921 -0500",hash_original_method="E3C08730060A1DB913261948D34028DD",hash_generated_method="68F04B570EA7F496BBE3356F541FB81C") public Socket createSocket(String host,int port) throws UnknownHostException, IOException {  return new Socket(host,port);}  }
class C{  public double function(double[] alpha){  final int d=vec.getDimensionality();  if (alpha.length != d - 1) {    throw new IllegalArgumentException("Parameter alpha must have a " + "dimensionality of " + (d - 1) + ", read: "+ alpha.length);  }  double result=0;  for (int i=0; i < d; i++) {    double alpha_i=i == d - 1 ? 0 : alpha[i];    result+=vec.doubleValue(i) * sinusProduct(0,i,alpha) * Math.cos(alpha_i);  }  return result;}  }
class C{  private void notExists(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  XMLAssert.assertXpathNotExists("//database[jndi-name='" + dataSourceFixture.jndiLocation + "']",configuration);}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  private boolean isAdditionalPageEmpty(Eml eml){  String logo=eml.getLogoUrl();  String rights=eml.getRights();  String info=eml.getAdditionalInfo();  String purpose=eml.getPurpose();  for (  String id : eml.getAlternateIdentifiers()) {    if (!Strings.isNullOrEmpty(id)) {      return false;    }  }  return (Strings.isNullOrEmpty(logo) && Strings.isNullOrEmpty(rights) && Strings.isNullOrEmpty(info)&& Strings.isNullOrEmpty(purpose));}  }
class C{  public boolean isOnline(){  return mOnline;}  }
class C{  public void commitMigration(URI vplexURI,URI virtualVolumeURI,URI migrationURI,Boolean rename,URI newVpoolURI,URI newVarrayURI,String stepId) throws WorkflowException {  _log.info("Committing migration {}",migrationURI);  Migration migration=null;  VPlexApiClient client=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    migration=getDataObject(Migration.class,migrationURI,_dbClient);    if (!VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue().equals(migration.getMigrationStatus())) {      StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);      client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);      _log.info("Got VPlex API client for system {}",vplexURI);      List<VPlexMigrationInfo> migrationInfoList=new ArrayList<VPlexMigrationInfo>();      Volume virtualVolume=getDataObject(Volume.class,virtualVolumeURI,_dbClient);      try {        migrationInfoList=client.commitMigrations(virtualVolume.getDeviceLabel(),Arrays.asList(migration.getLabel()),true,true,rename.booleanValue());        _log.info("Committed migration {}",migration.getLabel());      } catch (      VPlexApiException vae) {        _log.error("Exception committing VPlex migration: " + vae.getMessage(),vae);        boolean committed=false;        VPlexMigrationInfo migrationInfo=client.getMigrationInfo(migration.getLabel());        if (migrationInfo.getStatus().equalsIgnoreCase(VPlexMigrationInfo.MigrationStatus.COMMITTED.name())) {          _log.info("Migration {} has committed despite exception",migration.getLabel());          migrationInfoList.clear();          migrationInfoList.add(migrationInfo);          committed=true;        } else {          _log.info("Migration {} status {}",migration.getLabel(),migrationInfo.getStatus());        }        if (!committed) {          if (vae.getServiceCode() == ServiceCode.VPLEX_API_RESPONSE_TIMEOUT_ERROR) {            _workflowService.setWorkflowRollbackContOnError(stepId,false);          }          WorkflowStepCompleter.stepFailed(stepId,vae);          return;        }      }      migration.setMigrationStatus(VPlexMigrationInfo.MigrationStatus.COMMITTED.getStatusValue());      _dbClient.updateObject(migration);      _log.info("Update migration status to committed");      VPlexVirtualVolumeInfo updatedVirtualVolumeInfo=migrationInfoList.get(0).getVirtualVolumeInfo();      if (updatedVirtualVolumeInfo != null) {        _log.info(String.format("New virtual volume is %s",updatedVirtualVolumeInfo.toString()));        boolean isThinEnabled=updatedVirtualVolumeInfo.isThinEnabled();        if (!isThinEnabled && VPlexApiConstants.TRUE.equalsIgnoreCase(updatedVirtualVolumeInfo.getThinCapable())) {          if (verifyVplexSupportsThinProvisioning(vplexSystem)) {            URI targetVolumeUri=migration.getTarget();            Volume targetVolume=getDataObject(Volume.class,targetVolumeUri,_dbClient);            if (null != targetVolume) {              _log.info(String.format("migration target Volume is %s",targetVolume.forDisplay()));              VirtualPool targetVirtualPool=getDataObject(VirtualPool.class,targetVolume.getVirtualPool(),_dbClient);              if (null != targetVirtualPool) {                _log.info(String.format("migration target VirtualPool is %s",targetVirtualPool.forDisplay()));                boolean doEnableThin=VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(targetVirtualPool.getSupportedProvisioningType());                if (doEnableThin) {                  _log.info(String.format("the new VirtualPool is thin, requesting VPLEX to enable thin provisioning on %s",updatedVirtualVolumeInfo.getName()));                  isThinEnabled=client.setVirtualVolumeThinEnabled(updatedVirtualVolumeInfo);                }              }            }          }        }        virtualVolume.setDeviceLabel(updatedVirtualVolumeInfo.getName());        virtualVolume.setNativeId(updatedVirtualVolumeInfo.getPath());        virtualVolume.setNativeGuid(updatedVirtualVolumeInfo.getPath());        virtualVolume.setThinlyProvisioned(isThinEnabled);      }      StringSet assocVolumes=virtualVolume.getAssociatedVolumes();      if ((assocVolumes != null) && (!assocVolumes.isEmpty())) {        if (migration.getSource() != null) {          assocVolumes.remove(migration.getSource().toString());        }        assocVolumes.add(migration.getTarget().toString());      } else {        assocVolumes=new StringSet();        assocVolumes.add(migration.getTarget().toString());        virtualVolume.setAssociatedVolumes(assocVolumes);      }      updateMigratedVirtualVolumeVpoolAndVarray(virtualVolume,newVpoolURI,newVarrayURI);      _dbClient.updateObject(virtualVolume);      _log.info("Updated virtual volume.");    } else {      _log.info("The migration is already committed.");      associateVplexVolumeWithMigratedTarget(migration,virtualVolumeURI);      _log.info("Updated virtual volume.");    }    StringBuilder successMsgBuilder=new StringBuilder();    successMsgBuilder.append("VPlex System: ");    successMsgBuilder.append(vplexURI);    successMsgBuilder.append(" migration: ");    successMsgBuilder.append(migrationURI);    successMsgBuilder.append(" was committed");    _log.info(successMsgBuilder.toString());    WorkflowStepCompleter.stepSucceded(stepId);    _log.info("Updated workflow step state to success");  } catch (  VPlexApiException vae) {    _log.error("Exception committing VPlex migration: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception committing VPlex migration: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.COMMIT_VOLUME_MIGRATION.getName();    ServiceError serviceError=VPlexApiException.errors.commitMigrationFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public ContactId formatContact(String contact) throws RcsPermissionDeniedException {  if (TextUtils.isEmpty(contact)) {    throw new IllegalArgumentException("Input parameter is null or empty!");  }  String strippedContact=stripSeparators(contact);  if (TextUtils.isEmpty(strippedContact)) {    throw new IllegalArgumentException("Contact '" + contact + "' has invalid characters or is too long!");  }  if (strippedContact.startsWith(COUNTRY_CODE_PREFIX)) {    return new ContactId(strippedContact);  }  if (strippedContact.startsWith(MSISDN_PREFIX_INTERNATIONAL)) {    return new ContactId(new StringBuilder(COUNTRY_CODE_PREFIX).append(strippedContact,MSISDN_PREFIX_INTERNATIONAL.length(),strippedContact.length()).toString());  }  if (mCountryCode == null) {    tryToDetermineAndCacheCountryAndAreaCodes();  }  if (TextUtils.isEmpty(mCountryAreaCode)) {    return new ContactId(mCountryCode.concat(strippedContact));  }  if (strippedContact.startsWith(mCountryAreaCode)) {    return new ContactId(new StringBuilder(mCountryCode).append(strippedContact,mCountryAreaCode.length(),strippedContact.length()).toString());  }  throw new IllegalArgumentException("Local phone number '" + strippedContact + "' should be prefixed with Country Area Code ("+ mCountryAreaCode+ ")");}  }
class C{  public static SVGGeneratorContext createDefault(Document domFactory){  SVGGeneratorContext ctx=new SVGGeneratorContext(domFactory);  ctx.setIDGenerator(new SVGIDGenerator());  ctx.setExtensionHandler(new DefaultExtensionHandler());  ctx.setImageHandler(new ImageHandlerBase64Encoder());  ctx.setStyleHandler(new DefaultStyleHandler());  ctx.setComment("Generated by the Batik Graphics2D SVG Generator");  ctx.setErrorHandler(new DefaultErrorHandler());  return ctx;}  }
class C{  @Override public boolean isLabelVisible(){  return (endpointA.isLabelVisible());}  }
class C{  public void redraw(){  dataSet.resetData(dataNames,data,bins);  dataSet.resetData(dataNames,data,bins);}  }
class C{  public static StreamWrapper newInstance(InputStream inputStream,String name,String contentType,boolean autoClose){  return new StreamWrapper(inputStream,name,contentType == null ? RestVolley.APPLICATION_OCTET_STREAM : contentType,autoClose);}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("Usage : URLUtil <url>");    return;  }  String url=args[0];  try {    System.out.println(URLUtil.getDomainName(new URL(url)));  } catch (  MalformedURLException ex) {    ex.printStackTrace();  }}  }
class C{  public long allocate(int length){  return freeSpace.allocate(length);}  }
class C{  public NewVariableResolver(VariableResolver original){  this.original=original;  FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put("newVR",this);}  }
class C{  protected void vipProxyArpReply(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,String vipId){  log.debug("vipProxyArpReply");  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  if (!(eth.getPayload() instanceof ARP))   return;  ARP arpRequest=(ARP)eth.getPayload();  byte[] vipProxyMacBytes=vips.get(vipId).proxyMac.getBytes();  IPacket arpReply=new Ethernet().setSourceMACAddress(vipProxyMacBytes).setDestinationMACAddress(eth.getSourceMACAddress()).setEtherType(Ethernet.TYPE_ARP).setVlanID(eth.getVlanID()).setPriorityCode(eth.getPriorityCode()).setPayload(new ARP().setHardwareType(ARP.HW_TYPE_ETHERNET).setProtocolType(ARP.PROTO_TYPE_IP).setHardwareAddressLength((byte)6).setProtocolAddressLength((byte)4).setOpCode(ARP.OP_REPLY).setSenderHardwareAddress(vipProxyMacBytes).setSenderProtocolAddress(arpRequest.getTargetProtocolAddress()).setTargetHardwareAddress(eth.getSourceMACAddress().getBytes()).setTargetProtocolAddress(arpRequest.getSenderProtocolAddress()));  pushPacket(arpReply,sw,OFBufferId.NO_BUFFER,OFPort.ANY,(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),cntx,true);  log.debug("proxy ARP reply pushed as {}",IPv4.fromIPv4Address(vips.get(vipId).address));  return;}  }
class C{  protected AbstractXYItemLabelGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){  ParamChecks.nullNotPermitted(formatString,"formatString");  ParamChecks.nullNotPermitted(xFormat,"xFormat");  ParamChecks.nullNotPermitted(yFormat,"yFormat");  this.formatString=formatString;  this.xFormat=xFormat;  this.yFormat=yFormat;}  }
class C{  public static boolean is64BitArchitecture(){  if (isRunningWindows()) {    return "AMD64".equals(System.getenv("PROCESSOR_ARCHITECTURE")) || "AMD64".equals(System.getenv("PROCESSOR_ARCHITEW6432"));  }  throw new RuntimeException("Not implememted for Linux or Mac yet.");}  }
class C{  public static FontImage createFixed(String text,Font fnt,int color,int width,int height,int padding){  FontImage f=new FontImage();  f.text=text;  f.color=color;  f.width=width;  f.fnt=sizeFont(fnt,Math.min(width,height),padding);  f.height=height;  f.padding=padding;  return f;}  }
class C{  public static int maxIndex(double... M){  int maxI=0;  for (int i=1; i < M.length; i++)   if (M[i] > M[maxI])   maxI=i;  return maxI;}  }
class C{  private void selectAssignedGefaehrdungen(){  List<GefaehrdungsUmsetzung> associatedGefaehrdungen=((RiskAnalysisWizard)getWizard()).getAssociatedGefaehrdungen();  for (  GefaehrdungsUmsetzung gefaehrdung : associatedGefaehrdungen) {    if (!gefaehrdung.getOkay()) {      viewer.setChecked(gefaehrdung,true);    }  }}  }
class C{  public static double initialBearing(LatLng start,LatLng end){  return normalizeBearing(Math.toDegrees(initialBearingInRadians(start,end)));}  }
class C{  private void renderAnimations(){  Keyframe kf0, kf1, kf2, kf3;  float midwayPoint=0.2f;  int duration=500;  kf0=Keyframe.ofFloat(0f,1);  kf1=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf2=Keyframe.ofFloat(1f,mTransitionEndRadiusMultiplier);  PropertyValuesHolder radiusDisappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2);  kf0=Keyframe.ofFloat(0f,1f);  kf1=Keyframe.ofFloat(1f,0f);  PropertyValuesHolder fadeOut=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1);  mDisappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusDisappear,fadeOut).setDuration(duration);  mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);  float delayMultiplier=0.25f;  float transitionDurationMultiplier=1f;  float totalDurationMultiplier=transitionDurationMultiplier + delayMultiplier;  int totalDuration=(int)(duration * totalDurationMultiplier);  float delayPoint=(delayMultiplier * duration) / totalDuration;  midwayPoint=1 - (midwayPoint * (1 - delayPoint));  kf0=Keyframe.ofFloat(0f,mTransitionEndRadiusMultiplier);  kf1=Keyframe.ofFloat(delayPoint,mTransitionEndRadiusMultiplier);  kf2=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf3=Keyframe.ofFloat(1f,1);  PropertyValuesHolder radiusReappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2,kf3);  kf0=Keyframe.ofFloat(0f,0f);  kf1=Keyframe.ofFloat(delayPoint,0f);  kf2=Keyframe.ofFloat(1f,1f);  PropertyValuesHolder fadeIn=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1,kf2);  mReappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusReappear,fadeIn).setDuration(totalDuration);  mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);}  }
class C{  public void show(){  if (!mIsHiding && getVisibility() == VISIBLE) {    return;  }  if (!ViewCompat.isLaidOut(this)) {    return;  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    showIceCreamSandwich();  } else {    showEclairMr1();  }}  }
class C{  @Override public Request<Void> importArchive(String workspaceId,ProjectReference projectReference,InputStream archiveInputStream){  return new DummyRequest<>(null);}  }
class C{  public Expression compile(int opPos) throws TransformerException {  int op=getOp(opPos);  Expression expr=null;switch (op) {case OpCodes.OP_XPATH:    expr=compile(opPos + 2);  break;case OpCodes.OP_OR:expr=or(opPos);break;case OpCodes.OP_AND:expr=and(opPos);break;case OpCodes.OP_NOTEQUALS:expr=notequals(opPos);break;case OpCodes.OP_EQUALS:expr=equals(opPos);break;case OpCodes.OP_LTE:expr=lte(opPos);break;case OpCodes.OP_LT:expr=lt(opPos);break;case OpCodes.OP_GTE:expr=gte(opPos);break;case OpCodes.OP_GT:expr=gt(opPos);break;case OpCodes.OP_PLUS:expr=plus(opPos);break;case OpCodes.OP_MINUS:expr=minus(opPos);break;case OpCodes.OP_MULT:expr=mult(opPos);break;case OpCodes.OP_DIV:expr=div(opPos);break;case OpCodes.OP_MOD:expr=mod(opPos);break;case OpCodes.OP_NEG:expr=neg(opPos);break;case OpCodes.OP_STRING:expr=string(opPos);break;case OpCodes.OP_BOOL:expr=bool(opPos);break;case OpCodes.OP_NUMBER:expr=number(opPos);break;case OpCodes.OP_UNION:expr=union(opPos);break;case OpCodes.OP_LITERAL:expr=literal(opPos);break;case OpCodes.OP_VARIABLE:expr=variable(opPos);break;case OpCodes.OP_GROUP:expr=group(opPos);break;case OpCodes.OP_NUMBERLIT:expr=numberlit(opPos);break;case OpCodes.OP_ARGUMENT:expr=arg(opPos);break;case OpCodes.OP_EXTFUNCTION:expr=compileExtension(opPos);break;case OpCodes.OP_FUNCTION:expr=compileFunction(opPos);break;case OpCodes.OP_LOCATIONPATH:expr=locationPath(opPos);break;case OpCodes.OP_PREDICATE:expr=null;break;case OpCodes.OP_MATCHPATTERN:expr=matchPattern(opPos + 2);break;case OpCodes.OP_LOCATIONPATHPATTERN:expr=locationPathPattern(opPos);break;case OpCodes.OP_QUO:error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{"quo"});break;default :error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{Integer.toString(getOp(opPos))});}return expr;}  }
class C{  public void edit(MethodCall m) throws CannotCompileException {}  }
class C{  private byte[] unpadV15(byte[] padded) throws BadPaddingException {  int k=0;  boolean bp=false;  if (padded[k++] != 0) {    bp=true;  }  if (padded[k++] != type) {    bp=true;  }  int p=0;  while (k < padded.length) {    int b=padded[k++] & 0xff;    if ((b == 0) && (p == 0)) {      p=k;    }    if ((k == padded.length) && (p == 0)) {      bp=true;    }    if ((type == PAD_BLOCKTYPE_1) && (b != 0xff) && (p == 0)) {      bp=true;    }  }  int n=padded.length - p;  if (n > maxDataSize) {    bp=true;  }  byte[] padding=new byte[p];  System.arraycopy(padded,0,padding,0,p);  byte[] data=new byte[n];  System.arraycopy(padded,p,data,0,n);  BadPaddingException bpe=new BadPaddingException("Decryption error");  if (bp) {    throw bpe;  } else {    return data;  }}  }
class C{  public void testEquals() throws Exception {  VelocityEngine ve=new VelocityEngine();  ve.init();  String template="#if($a == $b) foo #end";  ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);  template="#if($a = $b) foo #end";  try {    ve.evaluate(new VelocityContext(),new StringWriter(),"foo",template);    assertTrue(false);  } catch (  ParseErrorException pe) {  }}  }
class C{  public static void main(String args[]){  for (int i=0; i < args.length; i++) {    System.out.println(args[i]);    try {      DcwRecordFile foo=new DcwRecordFile(args[i]);      foo.printSchema();      foo.close();      foo.reopen(1);      for (List<Object> l=new ArrayList<Object>(); foo.parseRow(l); ) {        System.out.println(VPFUtil.listToString(l));      }      foo.close();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  final boolean isRunningOrShutdown(boolean shutdownOK){  int rs=runStateOf(ctl.get());  return rs == RUNNING || (rs == SHUTDOWN && shutdownOK);}  }
class C{  public static Class<?> findCommonElementType(Collection collection){  if (isEmpty(collection)) {    return null;  }  Class<?> candidate=null;  for (  Object val : collection) {    if (val != null) {      if (candidate == null) {        candidate=val.getClass();      } else       if (candidate != val.getClass()) {        return null;      }    }  }  return candidate;}  }
class C{  private static int determineDBVendor(String dbVendor) throws Exception {  if (dbVendor.indexOf(DbEngine.SQLSERVER_STR) != -1)   return DbEngine.SQLSERVER; else   if (dbVendor.indexOf(DbEngine.ORACLE_STR) != -1)   return DbEngine.ORACLE; else   if (dbVendor.indexOf(DbEngine.MYSQL_STR) != -1)   return DbEngine.MYSQL; else   if (dbVendor.indexOf(DbEngine.POSTGRESQL_STR) != -1)   return DbEngine.POSTGRESQL; else   if (dbVendor.indexOf(DbEngine.DB2_STR) != -1)   return DbEngine.DB2;  throw new IeciTdException(DbError.EC_INVALID_ENGINE,DbError.EM_INVALID_ENGINE);}  }
class C{  @Override public final void readFully(byte ba[]) throws IOException {  dis.readFully(ba,0,ba.length);}  }
class C{  public boolean isAllowIssueLinking(){  return allowIssueLinking;}  }
class C{  public static ResultList flatSqlResultSet(Sql sql,ResultSet rs,int maxCount) throws SQLException {  if (sql.isExpandRow())   return expandSqlResultSet(sql,rs); else   if (sql == null || sql.getFlatKey() == null || sql.getFlatKey().trim().length() == 0 || sql.getFlatValueList().size() == 0) {    return fromSqlResultSet(rs,maxCount);  }  ResultList resList=new ResultList();  if (rs == null)   return resList;  java.sql.ResultSetMetaData meta=rs.getMetaData();  int colCnt=meta.getColumnCount();  ColumnDescriptor desc=new ColumnDescriptor();  desc.setColumns(new java.util.ArrayList<ColumnInfo>(colCnt));  Map<String,Integer> typeMap=new HashMap<String,Integer>();  for (int i=1; i <= colCnt; i++) {    typeMap.put(meta.getColumnName(i),meta.getColumnType(i));  }  Map<String,Integer> flatkeyIdx=new HashMap<String,Integer>();  for (int i=0; i < sql.getFlatValueList().size(); i++) {    flatkeyIdx.put(sql.getFlatValueList().get(i),i);  }  int colIndex=1;  for (  String k : sql.getKeyList()) {    ColumnInfo col=new ColumnInfo(k);    col.setPosition(colIndex);    int sqlt=typeMap.get(k);    if (sqlt == java.sql.Types.BIGINT || sqlt == java.sql.Types.DECIMAL || sqlt == java.sql.Types.DOUBLE || sqlt == java.sql.Types.FLOAT || sqlt == java.sql.Types.INTEGER || sqlt == java.sql.Types.NUMERIC || sqlt == java.sql.Types.TINYINT || sqlt == java.sql.Types.SMALLINT)     col.setNumberType(true);    desc.getColumns().add(col);    colIndex++;  }  for (  String s : sql.getFlatValueList()) {    for (    Map.Entry<String,String> e : sql.getMetrics().entrySet()) {      ColumnInfo col=new ColumnInfo(sql.getFlatValueAbbrMap().get(s) + e.getValue());      col.setPosition(colIndex);      int sqlt=typeMap.get(e.getKey());      if (sqlt == java.sql.Types.BIGINT || sqlt == java.sql.Types.DECIMAL || sqlt == java.sql.Types.DOUBLE || sqlt == java.sql.Types.FLOAT || sqlt == java.sql.Types.INTEGER || sqlt == java.sql.Types.NUMERIC || sqlt == java.sql.Types.TINYINT || sqlt == java.sql.Types.SMALLINT)       col.setNumberType(true);      desc.getColumns().add(col);      colIndex++;    }  }  resList.setColumnDescriptor(desc);  int rowCnt=0;  List<ColumnInfo> cols=desc.getColumns();  String[] prevkeys=new String[sql.getKeyList().size()];  ResultRow row=null;  while (rs.next()) {    String[] newkeys=new String[sql.getKeyList().size()];    for (int i=0; i < sql.getKeyList().size(); ++i) {      newkeys[i]=rs.getString(sql.getKeyList().get(i));    }    if (!isSame(prevkeys,newkeys)) {      row=new ResultRow();      row.setColumnDescriptor(desc);      row.setColumns(new java.util.ArrayList<String>(cols.size()));      for (int i=0; i < cols.size(); i++)       row.getColumns().add("");      resList.addRow(row);      rowCnt++;      for (int i=0; i < sql.getKeyList().size(); ++i) {        String val=newkeys[i];        if (cols.get(i).isNumberType() && val != null && val.startsWith("."))         val="0" + val; else         if (cols.get(i).isNumberType() && val != null && val.startsWith("-."))         val=val.replace("-.","-0.");        row.getColumns().set(i,val);      }    }    String flatVal=rs.getString(sql.getFlatKey());    int idx=flatkeyIdx.get(flatVal.toUpperCase());    int mi=0;    for (    String s : sql.getMetrics().keySet()) {      String val=rs.getString(s);      int colIdx=sql.getKeyList().size() + idx * sql.getMetrics().size() + mi;      if (cols.get(colIdx).isNumberType() && val != null && val.startsWith("."))       val="0" + val; else       if (cols.get(colIdx).isNumberType() && val != null && val.startsWith("-."))       val=val.replace("-.","-0.");      row.getColumns().set(colIdx,val);      mi++;    }    prevkeys=newkeys;    if (maxCount > 0 && rowCnt >= maxCount)     break;  }  return resList;}  }
class C{  protected DataInput(Input input,Deserializer deserializer){  this.input=input;  this.deserializer=deserializer;  buffer=input.getBuffer();}  }
class C{  protected void offerNotNeededItem(){  concreteQuest.getNPC().add(ConversationStates.QUESTION_1,"",new NotCondition(new TriggerInListCondition(concreteQuest.getNeededItems())),ConversationStates.QUESTION_1,concreteQuest.respondToOfferOfNotNeededItem(),null);}  }
class C{  @Inject SiteImporterImpl(PageImporter pageImporter){  this.pageImporter=checkNotNull(pageImporter);}  }
class C{  protected void checkActive(){  if (active == null) {    FacesContext facesContext=FacesContext.getCurrentInstance();    WebConfiguration webConfig=WebConfiguration.getInstance(facesContext.getExternalContext());    active=webConfig.isOptionEnabled(WebConfiguration.BooleanWebContextInitParameter.EnableCdiResolverChain);  }  if (!active) {    throw new IllegalStateException("Cannot use @Inject without setting context-param \"javax.faces.ENABLE_CDI_RESOLVER_CHAIN\" to \"true\"");  }}  }
class C{  protected boolean calculateFov(List<UITouch> touches){  if (touches.size() == 2) {    mAuxiliarStartPoint.setValues(touches.get(0).locationInView(mGLSurfaceView));    mAuxiliarEndPoint.setValues(touches.get(1).locationInView(mGLSurfaceView));    mFovCounter++;    if (mFovCounter < PLConstants.kDefaultFovMinCounter) {      if (mFovCounter == PLConstants.kDefaultFovMinCounter - 1)       mFovDistance=PLMath.distanceBetweenPoints(mAuxiliarStartPoint,mAuxiliarEndPoint);      return false;    }    float distance=PLMath.distanceBetweenPoints(mAuxiliarStartPoint,mAuxiliarEndPoint), distanceDiff=distance - mFovDistance;    if (Math.abs(distanceDiff) < mPanorama.getCamera().getMinDistanceToEnableFov())     return false;    boolean isZoomIn=(distance > mFovDistance), isNotCancelable=true;    if (mListener != null)     isNotCancelable=mListener.onShouldRunZooming(this,distanceDiff,isZoomIn,!isZoomIn);    if (isNotCancelable) {      mFovDistance=distance;      mPanorama.getCamera().addFov(this,distanceDiff);      if (mListener != null)       mListener.onDidRunZooming(this,distanceDiff,isZoomIn,!isZoomIn);      return true;    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.851 -0500",hash_original_method="3549831666270A81F0B6433F4C19950E",hash_generated_method="B688937FF1E04A248504EC0F44AFDA76") @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof HttpRoute))   return false;  HttpRoute that=(HttpRoute)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.secure == that.secure) && (this.tunnelled == that.tunnelled) && (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  @Override public void checkCreate(String className){  checkAccess(AccessType.CREATE,className);}  }
class C{  public static ChainingTextStringParser parse(String ical){  return new ChainingTextStringParser(ical);}  }
class C{  public void populateSMMetadata(final SoftwareModule swModule){  removeAllItems();  if (null == swModule) {    return;  }  selectedSWModuleId=swModule.getId();  final List<SoftwareModuleMetadata> swMetadataList=softwareManagement.findSoftwareModuleMetadataBySoftwareModuleId(selectedSWModuleId);  if (null != swMetadataList && !swMetadataList.isEmpty()) {    swMetadataList.forEach(null);  }}  }
class C{  public V put(float key,V value){  boolean wasFree=false;  V previous=null;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=unwrapNull(_values[index]);    isNewMapping=false;  } else {    wasFree=isFree(_values,index);  }  _set[index]=key;  _values[index]=wrapNull(value);  if (isNewMapping) {    postInsertHook(wasFree);  }  return previous;}  }
class C{  private Analysis(){}  }
class C{  @Override public String format(LogRecord record){  String msg=record.getMessage();  if (msg.length() > 0) {    if (record instanceof ProgressLogRecord) {      return msg;    }    if (msg.endsWith(OutputStreamLogger.NEWLINE)) {      return msg;    }  }  return msg + OutputStreamLogger.NEWLINE;}  }
class C{  public List<String> toMnemonic(byte[] entropy) throws MnemonicException.MnemonicLengthException {  if (entropy.length % 4 > 0)   throw new MnemonicException.MnemonicLengthException("Entropy length not multiple of 32 bits.");  if (entropy.length == 0)   throw new MnemonicException.MnemonicLengthException("Entropy is empty.");  byte[] hash=Sha256Hash.hash(entropy);  boolean[] hashBits=bytesToBits(hash);  boolean[] entropyBits=bytesToBits(entropy);  int checksumLengthBits=entropyBits.length / 32;  boolean[] concatBits=new boolean[entropyBits.length + checksumLengthBits];  System.arraycopy(entropyBits,0,concatBits,0,entropyBits.length);  System.arraycopy(hashBits,0,concatBits,entropyBits.length,checksumLengthBits);  ArrayList<String> words=new ArrayList<String>();  int nwords=concatBits.length / 11;  for (int i=0; i < nwords; ++i) {    int index=0;    for (int j=0; j < 11; ++j) {      index<<=1;      if (concatBits[(i * 11) + j])       index|=0x1;    }    words.add(this.wordList.get(index));  }  return words;}  }
class C{  public PaymentInfoCash_original(double dTotal,double dPaid){  m_dTotal=dTotal;  m_dPaid=dPaid;}  }
class C{  public static void showError(String messageKey){  _callback.showError(messageKey);}  }
class C{  public NBTreeModelSelection(int minNoObj,Instances allData){  m_minNoObj=minNoObj;  m_allData=allData;}  }
class C{  public BluRayFile(String hostname,java.io.File bdmvDir,boolean directBuffer,int targetTitle,int readBufferSize) throws IOException {  if (hostname == null)   sageFileChannel=new BufferedFileChannel(new LocalFileChannel((String)null,true),readBufferSize,directBuffer); else   sageFileChannel=new BufferedFileChannel(new RemoteFileChannel(hostname,(String)null),readBufferSize,directBuffer);  this.bdmvDir=bdmvDir;  int targetTitleTmp=targetTitle;  bdp=new sage.media.bluray.BluRayParser(bdmvDir,hostname);  bdp.fullyAnalyze();  if (targetTitleTmp <= 0)   targetTitleTmp=bdp.getMainPlaylistIndex() + 1;  this.targetTitle=Math.max(1,Math.min(targetTitleTmp,bdp.getNumPlaylists()));  currPlaylist=bdp.getPlaylist(this.targetTitle - 1);  fileSequence=new java.io.File[currPlaylist.playlistItems.length];  fileOffsets=new long[fileSequence.length];  ptsOffsets=new long[fileSequence.length];  streamDir=new java.io.File(bdmvDir,"STREAM");  long[] totalPts=new long[fileSequence.length];  long totalSizeTmp=0;  if (hostname == null) {    for (int i=0; i < fileSequence.length; i++) {      fileSequence[i]=new java.io.File(streamDir,currPlaylist.playlistItems[i].itemClips[0].clipName + (bdp.doesUseShortFilenames() ? ".MTS" : ".m2ts"));      fileOffsets[i]=totalSizeTmp;      ptsOffsets[i]=(i == 0 ? 0 : totalPts[i - 1]) - currPlaylist.playlistItems[i].inTime;      totalSizeTmp+=fileSequence[i].length();      totalPts[i]=(i == 0 ? 0 : totalPts[i - 1]) + (currPlaylist.playlistItems[i].outTime - currPlaylist.playlistItems[i].inTime);    }  } else {    for (int i=0; i < fileSequence.length; i++) {      fileSequence[i]=new java.io.File(streamDir,currPlaylist.playlistItems[i].itemClips[0].clipName + (bdp.doesUseShortFilenames() ? ".MTS" : ".m2ts"));      fileOffsets[i]=totalSizeTmp;      ptsOffsets[i]=(i == 0 ? 0 : totalPts[i - 1]) - currPlaylist.playlistItems[i].inTime;      openFile(fileSequence[i].getAbsolutePath());      totalSizeTmp+=sageFileChannel.size();      totalPts[i]=(i == 0 ? 0 : totalPts[i - 1]) + (currPlaylist.playlistItems[i].outTime - currPlaylist.playlistItems[i].inTime);    }  }  totalSize=totalSizeTmp;  if (sage.Sage.DBG)   System.out.println("Established BluRay file sequence with " + fileSequence.length + " segments and total size="+ totalSizeTmp);  currFileIndex=0;  openFile(fileSequence[currFileIndex].getAbsolutePath());  chapterOffsets=new long[currPlaylist.playlistMarks.length];  for (int i=0; i < chapterOffsets.length; i++) {    int itemRef=currPlaylist.playlistMarks[i].playItemIdRef;    chapterOffsets[i]=(itemRef == 0 ? 0 : totalPts[itemRef - 1]) + currPlaylist.playlistMarks[i].timestamp - currPlaylist.playlistItems[itemRef].inTime;  }}  }
class C{  public void addRememberedUrl(@Nullable String stringUrl,@Nullable String username){  if (StringUtil.isEmptyOrSpaces(stringUrl)) {    return;  }  if (username == null) {    username="";  }  myState.myRememberedUserNames.put(stringUrl,username);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public void addMessageListener(IMessageListener listener){  listeners.add(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Bitmap prepareBitmap(String url,int width,int height){  Bitmap bitmap=null;  try {    URI uri=new URI(url);    bitmap=Picasso.with(mContext).load(uri.toString()).resize(width,height).get();  } catch (  Exception e) {    Log.e(TAG,e.toString());  }  return bitmap;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.211 -0500",hash_original_method="EB1882B678B53D1D9D17BF7352F2C601",hash_generated_method="0E7FC9780B785A6A0C52129E0A129642") public static NdefRecord createUri(Uri uri){  return createUri(uri.toString());}  }
class C{  public boolean isIssuingDistributionPointEnabled(){  return issuingDistributionPointEnabled;}  }
class C{  public Fluxxan(@NonNull State state){  mDispatcher=initDispatcher(state);}  }
class C{  protected void selectNextIndex(){  int s=list.getSelectedIndex();  if ((s + 1) < list.getModel().getSize()) {    s+=1;    list.setSelectedIndex(s);    list.ensureIndexIsVisible(s);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:59.514 -0500",hash_original_method="D42FFE9A180911A657FA083FF5768836",hash_generated_method="DC82A7FD8AE3DDC88C0AA180AC17C292") public void removeBucketsBefore(long cutoff){  int i;  for (i=0; i < bucketCount; i++) {    final long curStart=bucketStart[i];    final long curEnd=curStart + bucketDuration;    if (curEnd > cutoff)     break;  }  if (i > 0) {    final int length=bucketStart.length;    bucketStart=Arrays.copyOfRange(bucketStart,i,length);    if (activeTime != null)     activeTime=Arrays.copyOfRange(activeTime,i,length);    if (rxBytes != null)     rxBytes=Arrays.copyOfRange(rxBytes,i,length);    if (rxPackets != null)     rxPackets=Arrays.copyOfRange(rxPackets,i,length);    if (txBytes != null)     txBytes=Arrays.copyOfRange(txBytes,i,length);    if (txPackets != null)     txPackets=Arrays.copyOfRange(txPackets,i,length);    if (operations != null)     operations=Arrays.copyOfRange(operations,i,length);    bucketCount-=i;  }}  }
class C{  public final void addAllHelperTextIds(@NonNull final int... resourceIds){  ensureNotNull(resourceIds,"The array may not be null");  for (  int resourceId : resourceIds) {    addHelperTextId(resourceId);  }}  }
class C{  public static int EMULTIHOP(){  return Errno.EMULTIHOP.intValue();}  }
class C{  public void scrollOnce(){  PagerAdapter adapter=getAdapter();  int currentItem=getCurrentItem();  int totalCount;  if (adapter == null || (totalCount=adapter.getCount()) <= 1) {    return;  }  int nextItem=(direction == LEFT) ? --currentItem : ++currentItem;  if (nextItem < 0) {    if (isCycle) {      setCurrentItem(totalCount - 1,isBorderAnimation);    }  } else   if (nextItem == totalCount) {    if (isCycle) {      setCurrentItem(0,isBorderAnimation);    }  } else {    setCurrentItem(nextItem,true);  }}  }
class C{  public void putBytes(byte[] buf,int off,int len){  if (arr == null)   arr=new byte[PACKET_SIZE];  U.arrayCopy(buf,0,arr,off,len);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  if (m_savedLastOrder != null && !m_savedLastOrder.empty())   getElemDef().setLastOrder(m_savedLastOrder.pop());  if (!getElemDef().getRequiredFound())   handler.error(XSLTErrorResources.ER_REQUIRED_ELEM_NOT_FOUND,new Object[]{getElemDef().getRequiredElem()},null);}  }
class C{  public void onReachedMaxAppCacheSize(long requiredStorage,long quota,WebStorage.QuotaUpdater quotaUpdater){  if (mWebChromeClient == null) {    quotaUpdater.updateQuota(quota);    return;  }  Message msg=obtainMessage(REACHED_APPCACHE_MAXSIZE);  HashMap<String,Object> map=new HashMap();  map.put("requiredStorage",requiredStorage);  map.put("quota",quota);  map.put("quotaUpdater",quotaUpdater);  msg.obj=map;  sendMessage(msg);}  }
class C{  public ObjPositionData loadObjFile(Context context,String fileName){  Resources r=context.getResources();  try {    BufferedReader br=new BufferedReader(new InputStreamReader(r.getAssets().open(fileName)));    String line;    List<Float> vertices=new ArrayList<>();    List<Integer> indices=new ArrayList<>();    int vertexCounter=0;    while ((line=br.readLine()) != null) {      String[] data=line.split("[ ]+");switch (data[0].trim()) {case "v":        vertices.add(Float.parseFloat(data[1]));      vertices.add(Float.parseFloat(data[2]));    vertices.add(Float.parseFloat(data[3]));  vertexCounter++;break;case "f":for (int i : FIRST_TRIANGLE_ORDER) {String[] vertexDataString=data[i].split("/");int index=Integer.parseInt(vertexDataString[0]);if (index > 0) {  index=index - 1;} else {  index=index + vertexCounter;}indices.add(index);}if (data.length == 5) {for (int i : SECOND_TRIANGLE_ORDER) {String[] vertexDataString=data[i].split("/");int index=Integer.parseInt(vertexDataString[0]);if (index > 0) {  index=index - 1;} else {  index=index + vertexCounter;}indices.add(index);}}break;default :break;}}ObjPositionData objData=new ObjPositionData();float[] vertexData=new float[vertices.size()];for (int i=0; i < vertices.size(); i++) {vertexData[i]=vertices.get(i);}objData.positions=vertexData;int[] indexData=new int[indices.size()];for (int i=0; i < indices.size(); i++) {indexData[i]=indices.get(i);}objData.indices=indexData;return objData;} catch (IOException e) {Log.d(TAG,"Cannot load Obj file");return null;}}  }
class C{  public static void putJava2IANAMapping(String javaEncoding,String ianaEncoding){  fJava2IANAMap.put(javaEncoding,ianaEncoding);}  }
class C{  public synchronized void initialize() throws ReplicatorException {  File controlScript=new File(vmrrControlScript);  if (controlScript.isFile() && controlScript.canExecute()) {    logger.info("Validated vmrr control script: path=" + controlScript.getAbsolutePath());  } else {    throw new ReplicatorException("Vmrr control script not found or not executable: path=" + controlScript.getAbsolutePath());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.959 -0500",hash_original_method="D41F1FA722E38C99947581A87108BCAE",hash_generated_method="F0091385F9E85AF39D1057ADB6E82EB4") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public boolean sendNoOp() throws IOException {  return SMTPReply.isPositiveCompletion(noop());}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public boolean isLeadAnchorNotificationEnabled(){  return leadAnchorNotificationEnabled;}  }
class C{  public void putOctetString(byte[] s,int tag){  putStringValue(s);  putTag(tag);}  }
class C{  protected void redirect(final int n,final int m){  assert m <= n : "n=" + n + ", m="+ m;  if (log.isInfoEnabled())   log.info("Redirecting " + n + " key ranges onto "+ m+ " new locators");  for (int i=0; i < n; i++) {    final int keyRange=r.nextInt(255);    final int locator=r.nextInt(m) + nextLocator.get();    if (log.isInfoEnabled())     log.info("Redirecting: keyRange=" + keyRange + " to locator="+ locator);    master.redirects.put(keyRange,locator);  }  nextLocator.addAndGet(m);}  }
class C{  private static RopMethod optimizeMinimizeRegisters(RopMethod rmeth,int paramWidth,boolean isStatic,EnumSet<OptionalStep> steps){  SsaMethod ssaMeth;  RopMethod resultMeth;  ssaMeth=SsaConverter.convertToSsaMethod(rmeth,paramWidth,isStatic);  EnumSet<OptionalStep> newSteps=steps.clone();  newSteps.remove(OptionalStep.CONST_COLLECTOR);  runSsaFormSteps(ssaMeth,newSteps);  resultMeth=SsaToRop.convertToRopMethod(ssaMeth,true);  return resultMeth;}  }
class C{  public cudaArray(){}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public static double quantile(double val,double k,double lambda,double theta){  if (val < 0.0 || val > 1.0) {    return Double.NaN;  } else   if (val == 0) {    return 0.0;  } else   if (val == 1) {    return Double.POSITIVE_INFINITY;  } else {    return theta + lambda * Math.pow(-Math.log(1.0 - val),1.0 / k);  }}  }
class C{  public DBI(String sql){  _con=null;  _pst=null;  _rs=null;  _sql_cmd=sql;  String USER="";  String PASSWORD="";  try {    Class.forName("com.mysql.jdbc.Driver");    _con=DriverManager.getConnection(URL,USER,PASSWORD);    _pst=_con.createStatement();    _rs=_pst.executeQuery(_sql_cmd);  } catch (  SQLException se) {    se.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public final int readIntUnbuffered(long pos) throws IOException {  byte[] bb=new byte[4];  read_(pos,bb,0,4);  int ch1=bb[0] & 0xff;  int ch2=bb[1] & 0xff;  int ch3=bb[2] & 0xff;  int ch4=bb[3] & 0xff;  if ((ch1 | ch2 | ch3| ch4) < 0) {    throw new EOFException();  }  if (bigEndian) {    return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4));  } else {    return ((ch4 << 24) + (ch3 << 16) + (ch2 << 8)+ (ch1));  }}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  put(key,stream,name,contentType,autoCloseInputStreams);}  }
class C{  public static DoubleBuffer createDoubleBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 8);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asDoubleBuffer();}  }
class C{  public PSPIdentifierForSellerException(final String message){  super(message);}  }
class C{  private void validateEmpty(ResultFileReader reader) throws IOException {  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  static BOSHClientConnEvent createConnectionEstablishedEvent(final BOSHClient source){  return new BOSHClientConnEvent(source,true,null,null);}  }
class C{  public void debug(Object message){}  }
class C{  public void hrule(double value,Paint color){  hrule(value,color,null,1.0F);}  }
class C{  public void begin(){  autoCommitAtTransactionEnd=true;  autoCommit=false;}  }
class C{  @Override public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement(" + resultSetType + ", "+ resultSetConcurrency+ ", "+ resultSetHoldability+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkHoldability(resultSetHoldability);    checkClosed();    return new JdbcStatement(this,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String stackTraceToString(Throwable ex){  StringBuilder traceBuf=new StringBuilder();  traceBuf.append(Messages.getString("Util.1"));  if (ex != null) {    traceBuf.append(ex.getClass().getName());    String message=ex.getMessage();    if (message != null) {      traceBuf.append(Messages.getString("Util.2"));      traceBuf.append(message);    }    StringWriter out=new StringWriter();    PrintWriter printOut=new PrintWriter(out);    ex.printStackTrace(printOut);    traceBuf.append(Messages.getString("Util.3"));    traceBuf.append(out.toString());  }  traceBuf.append(Messages.getString("Util.4"));  return traceBuf.toString();}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);  log.debug("NetworkPortAdapter ConnectionConfig Ctor called. ");}  }
class C{  private Pane makeMenuPane(MenuActions menuActions){  ContextMenu burgerMenu=new GlobalContextMenu(menuActions);  Button menu=new Button(MENU_LABEL);  menu.setFocusTraversable(false);  menu.setContextMenu(burgerMenu);  menu.setOnAction(null);  FlowPane toolBar=new FlowPane(10,0,menu);  toolBar.setMaxHeight(40);  toolBar.setMaxWidth(40);  toolBar.setPadding(new Insets(10));  toolBar.getStyleClass().add("overlayButtons");  return toolBar;}  }
class C{  public void inject(GridDeployment dep,Class<?> depCls,Object target) throws IgniteCheckedException {  assert target != null;  if (log.isDebugEnabled())   log.debug("Injecting resources: " + target);  target=unwrapTarget(target);  inject(target,GridResourceIoc.AnnotationSet.GENERIC,dep,depCls);}  }
class C{  @Override public Color match(ClassElement element){  return getColor(ColorPreferencesIds.COLOR_CLASS);}  }
class C{  public int read(char[] buffer,int offset,int size) throws IOException {  int charsRead=0;  if (this.atEndOfData) {    return -1;  }  if ((offset + size) > buffer.length) {    size=buffer.length - offset;  }  while (charsRead < size) {    char ch=this.savedChar;    if (ch == 0) {      ch=this.reader.read();    } else {      this.savedChar=0;    }    if (ch == ']') {      char ch2=this.reader.read();      if (ch2 == ']') {        char ch3=this.reader.read();        if (ch3 == '>') {          this.atEndOfData=true;          break;        }        this.savedChar=ch2;        this.reader.unread(ch3);      } else {        this.reader.unread(ch2);      }    }    buffer[charsRead]=ch;    charsRead++;  }  if (charsRead == 0) {    charsRead=-1;  }  return charsRead;}  }
class C{  public static double nextGaussian(){  wasAccessed=true;  return nextDouble();}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterLocation);}  }
class C{  public SimpleThreadPool(int threadCount,int threadPriority){  setThreadCount(threadCount);  setThreadPriority(threadPriority);}  }
class C{  public void create(T object){  getEntityManager().persist(object);}  }
class C{  public boolean isValidSwapPosition(BlockPos pos){  IBlockState state=world.getBlockState(pos);  Block block=state.getBlock();  return (block == Blocks.DIRT || block == Blocks.GRASS) && (block != Blocks.DIRT || state.getValue(BlockDirt.VARIANT) == BlockDirt.DirtType.DIRT) && (world.getBlockState(pos.up()).getLightOpacity(world,pos.up()) <= 1);}  }
class C{  static void printVersion(){  println(ManifestParser.parseReleaseWithBuildNumber());}  }
class C{  public JEditTextArea(TextAreaDefaults defaults){  propertyChangeSupport=new PropertyChangeSupport(this);  enableEvents(AWTEvent.KEY_EVENT_MASK);  painter=new TextAreaPainter(this,defaults);  documentHandler=new DocumentHandler();  listenerList=new EventListenerList();  caretEvent=new MutableCaretEvent();  lineSegment=new Segment();  bracketLine=bracketPosition=-1;  blink=true;  setLayout(new ScrollLayout());  add(CENTER,painter);  add(RIGHT,vertical=new JScrollBar(JScrollBar.VERTICAL));  add(BOTTOM,horizontal=new JScrollBar(JScrollBar.HORIZONTAL));  vertical.addAdjustmentListener(new AdjustHandler());  horizontal.addAdjustmentListener(new AdjustHandler());  painter.addComponentListener(new ComponentHandler());  painter.addMouseListener(new MouseHandler());  painter.addMouseMotionListener(new DragHandler());  addFocusListener(new FocusHandler());  setInputHandler(defaults.inputHandler);  setDocument(defaults.document);  editable=defaults.editable;  caretVisible=defaults.caretVisible;  caretBlinks=defaults.caretBlinks;  electricScroll=defaults.electricScroll;  popup=defaults.popup;  focusedComponent=this;}  }
class C{  public void close(){  Thread current=thread;  thread=null;  if (current != null) {    current.interrupt();    try {      current.join();    } catch (    InterruptedException e) {      log.error(e.getMessage(),e);    }  }  try {    buffer.close();  } catch (  IOException e) {    log.error(e.getMessage(),e);  }}  }
class C{  public boolean removeEntry(int xIndex,int dataSetIndex){  if (dataSetIndex >= mDataSets.size())   return false;  T dataSet=mDataSets.get(dataSetIndex);  Entry e=dataSet.getEntryForXIndex(xIndex);  if (e == null || e.getXIndex() != xIndex)   return false;  return removeEntry(e,dataSetIndex);}  }
class C{  public boolean isEnterOrExit(){  return enterOrExit;}  }
class C{  public static void tournament(GameController c,int numGames){  int xWins=0;  int oWins=0;  int draws=0;  for (int i=0; i < numGames; i++) {    c.reset();    if (showGraphicalOutput) {      System.out.println("Game " + i);      System.out.println("----------------------------------");    }    while (true) {      int rc=c.playTurn();      if (showGraphicalOutput) {        System.out.println(c.boardState() + "\n");      }      if (rc == GameController.IN_PROGRESS) {        continue;      }switch (rc) {case GameController.X_WINS:        xWins++;      break;case GameController.O_WINS:    oWins++;  break;case GameController.DRAW:draws++;break;}break;}}System.out.println("Statistics [" + new java.util.Date() + "]");System.out.println("(xWins:" + xWins + ", oWins:"+ oWins+ ", draws:"+ draws);}  }
class C{  public T overridePendingTransition5(int enterAnim,int exitAnim){  if (act != null) {    AQUtility.invokeHandler(act,"overridePendingTransition",false,false,PENDING_TRANSITION_SIG,enterAnim,exitAnim);  }  return self();}  }
class C{  public SQLNonTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public Extension(DerValue derVal) throws IOException {  DerInputStream in=derVal.toDerInputStream();  extensionId=in.getOID();  DerValue val=in.getDerValue();  if (val.tag == DerValue.tag_Boolean) {    critical=val.getBoolean();    val=in.getDerValue();    extensionValue=val.getOctetString();  } else {    critical=false;    extensionValue=val.getOctetString();  }}  }
class C{  @Override public void addMouseListener(MouseListener l){}  }
class C{  public void close(){}  }
class C{  public double stdDev(){  double avg=avgRate();  double sum=0.0;  for (  Sample s : samples) {    sum+=Math.pow((double)s.rate() - avg,2);  }  double variance=sum / (double)samples.size();  return Math.sqrt(variance);}  }
class C{  public boolean hasAudioChannelLabelSubDescriptors(){  return this.hasInterchangeObject(AudioChannelLabelSubDescriptor.class);}  }
class C{  public static TMCoord fromLatLon(Angle latitude,Angle longitude,Globe globe,Double a,Double f,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (originLatitude == null || centralMeridian == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final TMCoordConverter converter=new TMCoordConverter();  if (globe != null) {    a=globe.getEquatorialRadius();    f=(globe.getEquatorialRadius() - globe.getPolarRadius()) / globe.getEquatorialRadius();  } else   if (a == null || f == null) {    a=converter.getA();    f=converter.getF();  }  long err=converter.setTransverseMercatorParameters(a,f,originLatitude.radians,centralMeridian.radians,falseEasting,falseNorthing,scale);  if (err == TMCoordConverter.TRANMERC_NO_ERROR)   err=converter.convertGeodeticToTransverseMercator(latitude.radians,longitude.radians);  if (err != TMCoordConverter.TRANMERC_NO_ERROR && err != TMCoordConverter.TRANMERC_LON_WARNING) {    String message=Logging.getMessage("Coord.TMConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new TMCoord(latitude,longitude,converter.getEasting(),converter.getNorthing(),originLatitude,centralMeridian,falseEasting,falseNorthing,scale);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.767 -0500",hash_original_method="C1AED137C8D8FCE0695617840DD29190",hash_generated_method="23DD4808C1BAC688D7DCD4820865D821") public final boolean checkTag(int identifier){  return this.id == identifier;}  }
class C{  protected void pickupUtilityCars(PrintWriter file,List<Car> carList,Car car,boolean isManifest){  String[] format;  if (isManifest) {    format=Setup.getPickupUtilityManifestMessageFormat();  } else {    format=Setup.getPickupUtilitySwitchListMessageFormat();  }  int count=countUtilityCars(format,carList,car,PICKUP);  if (count == 0) {    return;  }  pickUpCar(file,car,new StringBuffer(padAndTruncateString(Setup.getPickupCarPrefix(),isManifest ? Setup.getManifestPrefixLength() : Setup.getSwitchListPrefixLength()) + " " + padString(Integer.toString(count),UTILITY_CAR_COUNT_FIELD_SIZE)),format,isManifest);}  }
class C{  public static void shuffle(int[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public BigInteger toBigInteger(){  BigDecimal _value=this.getValue();  return _value.toBigInteger();}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  XMLString s=xstr();  return s.toDouble();}  }
class C{  public static void verifyAuthCert(CertChain chain,List<OCSPResp> ocspResponses,ClientId member) throws Exception {  X509Certificate cert=chain.getEndEntityCert();  if (!CertUtils.isAuthCert(cert)) {    throw new CodedException(X_SSL_AUTH_FAILED,"Peer certificate is not an authentication certificate");  }  log.debug("verifyAuthCert({}: {}, {})",new Object[]{cert.getSerialNumber(),cert.getSubjectX500Principal().getName(),member});  try {    new CertChainVerifier(chain).verify(ocspResponses,new Date());  } catch (  CodedException e) {    throw e.withPrefix(X_SSL_AUTH_FAILED);  }  if (!GlobalConf.authCertMatchesMember(cert,member)) {    SecurityServerId serverId=GlobalConf.getServerId(cert);    if (serverId != null) {      throw new CodedException(X_SSL_AUTH_FAILED,"Client '%s' is not registered at security server %s",member,serverId);    }    throw new CodedException(X_SSL_AUTH_FAILED,"Authentication certificate %s is not associated " + "with any security server",cert.getSubjectX500Principal());  }}  }
class C{  @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception {  resources.resourceId("apis");}  }
class C{  void renumber(){  RenumberFrame f=new RenumberFrame();  f.initComponents();  f.setVisible(true);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + freedom+ ")";}  }
class C{  public RequestToken authorizeAccount() throws TwitterException {  twitter4j.Twitter twitter=new TwitterFactory().getInstance();  twitter.setOAuthConsumer(getOauthKey(),getOauthSecret());  RequestToken requestToken=twitter.getOAuthRequestToken();  setConnection(twitter);  return requestToken;}  }
class C{  private void removeSubtitleDisplayCallBack(){  if (subtitleDisplayHandler != null) {    subtitleDisplayHandler.removeCallbacks(subtitleProcessesor);    subtitleDisplayHandler=null;    hideClosedCaptioning();  }}  }
class C{  public static boolean hasToken(File dir,String name,String content) throws IOException {  return readToken(dir,name).map(null).orElse(false);}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  @Override protected void dispatchDraw(@NonNull Canvas canvas){  super.dispatchDraw(canvas);  if (mHoverCell != null) {    mHoverCell.draw(canvas);  }}  }
class C{  public EPStatementObjectModel outputLimitClause(OutputLimitClause outputLimitClause){  this.outputLimitClause=outputLimitClause;  return this;}  }
class C{  protected boolean updateAttachmentPoint(DatapathId sw,OFPort port,Date lastSeen){  ITopologyService topology=deviceManager.topology;  List<AttachmentPoint> oldAPList;  List<AttachmentPoint> apList;  boolean oldAPFlag=false;  if (!deviceManager.isValidAttachmentPoint(sw,port))   return false;  AttachmentPoint newAP=new AttachmentPoint(sw,port,lastSeen);  apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  oldAPList=new ArrayList<AttachmentPoint>();  if (oldAPs != null)   oldAPList.addAll(oldAPs);  if (oldAPList.contains(newAP)) {    int index=oldAPList.indexOf(newAP);    newAP=oldAPList.remove(index);    newAP.setLastSeen(lastSeen);    this.oldAPs=oldAPList;    oldAPFlag=true;  }  Map<DatapathId,AttachmentPoint> apMap=getAPMap(apList);  if (apMap == null || apMap.isEmpty()) {    apList.add(newAP);    attachmentPoints=apList;    return true;  }  DatapathId id=topology.getOpenflowDomainId(sw);  AttachmentPoint oldAP=apMap.get(id);  if (oldAP == null) {    apList=new ArrayList<AttachmentPoint>();    apList.addAll(apMap.values());    apList.add(newAP);    this.attachmentPoints=apList;    return true;  }  if (oldAP.equals(newAP)) {    if (newAP.lastSeen.after(oldAP.lastSeen)) {      oldAP.setLastSeen(newAP.lastSeen);    }    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    return false;  }  int x=deviceManager.apComparator.compare(oldAP,newAP);  if (x < 0) {    apMap.put(id,newAP);    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(oldAP);    this.oldAPs=oldAPList;    if (!topology.isInSameBroadcastDomain(oldAP.getSw(),oldAP.getPort(),newAP.getSw(),newAP.getPort()))     return true;  } else   if (oldAPFlag) {    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(newAP);    this.oldAPs=oldAPList;  }  return false;}  }
class C{  private void reportThreadPool(NodesStats.NodeStats nodeStats,String nodeName){  if (nodeStats.thread_pool != null) {    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Search/Completed","threads/second",nodeName,nodeStats.thread_pool.search.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Search/Queue","threads",nodeName,nodeStats.thread_pool.search.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Search/Rejected","threads/second",nodeName,nodeStats.thread_pool.search.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Get/Completed","threads/second",nodeName,nodeStats.thread_pool.get.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Get/Queue","threads",nodeName,nodeStats.thread_pool.get.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Get/Rejected","threads/second",nodeName,nodeStats.thread_pool.get.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Suggest/Completed","threads/second",nodeName,nodeStats.thread_pool.suggest.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Suggest/Queue","threads",nodeName,nodeStats.thread_pool.suggest.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Suggest/Rejected","threads/second",nodeName,nodeStats.thread_pool.suggest.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Index/Completed","threads/second",nodeName,nodeStats.thread_pool.index.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Index/Queue","threads",nodeName,nodeStats.thread_pool.index.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Index/Rejected","threads/second",nodeName,nodeStats.thread_pool.index.rejected);    if (nodeStats.thread_pool.force_merge != null) {      reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Merge/Completed","threads/second",nodeName,nodeStats.thread_pool.force_merge.completed);      reportNodeMetric("V1/NodeStats/ThreadPool/Merge/Queue","threads",nodeName,nodeStats.thread_pool.force_merge.queue);      reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Merge/Rejected","threads/second",nodeName,nodeStats.thread_pool.force_merge.rejected);    } else     if (nodeStats.thread_pool.merge != null) {      reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Merge/Completed","threads/second",nodeName,nodeStats.thread_pool.merge.completed);      reportNodeMetric("V1/NodeStats/ThreadPool/Merge/Queue","threads",nodeName,nodeStats.thread_pool.merge.queue);      reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Merge/Rejected","threads/second",nodeName,nodeStats.thread_pool.merge.rejected);    }    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Bulk/Completed","threads/second",nodeName,nodeStats.thread_pool.bulk.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Bulk/Queue","threads",nodeName,nodeStats.thread_pool.bulk.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Bulk/Rejected","threads/second",nodeName,nodeStats.thread_pool.bulk.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Warmer/Completed","threads/second",nodeName,nodeStats.thread_pool.warmer.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Warmer/Queue","threads",nodeName,nodeStats.thread_pool.warmer.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Warmer/Rejected","threads/second",nodeName,nodeStats.thread_pool.warmer.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Flush/Completed","threads/second",nodeName,nodeStats.thread_pool.flush.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Flush/Queue","threads",nodeName,nodeStats.thread_pool.flush.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Flush/Rejected","threads/second",nodeName,nodeStats.thread_pool.flush.rejected);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Refresh/Completed","threads/second",nodeName,nodeStats.thread_pool.refresh.completed);    reportNodeMetric("V1/NodeStats/ThreadPool/Refresh/Queue","threads",nodeName,nodeStats.thread_pool.refresh.queue);    reportNodeProcessedMetric("V1/NodeStats/ThreadPool/Refresh/Rejected","threads/second",nodeName,nodeStats.thread_pool.refresh.rejected);  }}  }
class C{  public static String inputStreamToString(InputStream inputStream){  StringWriter stringWriter=new StringWriter();  try {    IOUtils.copy(inputStream,stringWriter);  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  return stringWriter.toString();}  }
class C{  protected boolean performInitialSync(){  logger.info("Beginning initial sync of '{}' at {}",rsName,source.lastOffset(rsName));  source.startInitialSync(replicaSet.replicaSetName());  final long syncStart=clock.currentTimeInMillis();  final List<CollectionId> collections=new ArrayList<>();  primaryClient.collections().forEach(null);  final Queue<CollectionId> collectionsToCopy=new ConcurrentLinkedQueue<>(collections);  final int numThreads=Math.min(collections.size(),context.maxNumberOfCopyThreads());  final CountDownLatch latch=new CountDownLatch(numThreads);  final AtomicBoolean aborted=new AtomicBoolean(false);  final AtomicInteger replicatorThreadCounter=new AtomicInteger(0);  final AtomicInteger numCollectionsCopied=new AtomicInteger();  final AtomicLong numDocumentsCopied=new AtomicLong();  logger.info("Preparing to use {} thread(s) to sync {} collection(s): {}",numThreads,collections.size(),Strings.join(", ",collections));  for (int i=0; i != numThreads; ++i) {    copyThreads.submit(null);  }  try {    latch.await();  } catch (  InterruptedException e) {    Thread.interrupted();    aborted.set(true);  }  long syncDuration=clock.currentTimeInMillis() - syncStart;  if (aborted.get()) {    int remaining=collections.size() - numCollectionsCopied.get();    logger.info("Initial sync aborted after {} with {} of {} collections incomplete",Strings.duration(syncDuration),remaining,collections.size());    return false;  }  source.stopInitialSync(replicaSet.replicaSetName());  logger.info("Initial sync of {} collections with a total of {} documents completed in {}",collections.size(),numDocumentsCopied.get(),Strings.duration(syncDuration));  return true;}  }
class C{  public boolean shouldResolveReflection(){  return super.getOptions().containsKey("resolveReflection");}  }
class C{  private static boolean heapLayout32BitInternal(){  return ArchitecturalWord.getModel().bitsInWord() == 32 || Harness.heapLayout.getValue() == 32;}  }
class C{  public CreateUserScriptCommand(Configuration configuration,String resourcePath,User user){  super(configuration,resourcePath);  this.user=user;}  }
class C{  public static Map<String,Integer> sequenceToIds(File tsv) throws IOException {  return sequenceToIds(new FileReader(tsv));}  }
class C{  public static String capitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  return name.substring(0,1).toUpperCase(ENGLISH) + name.substring(1);}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void checkForUnmodeledMissingAPIMethods(){  try {    File sys_calls_file=new File(Config.v().getApacHome(),Config.SYSTEM_METHODS_FILE);    LineNumberReader br=new LineNumberReader(new FileReader(sys_calls_file));    String line;    int lineNum;    while ((line=br.readLine()) != null) {      lineNum=br.getLineNumber();      String[] lineSplit=line.trim().split("#");      int modifiers=Integer.parseInt(lineSplit[0]);      String methodSig=lineSplit[1];      try {        SootClass clz=Scene.v().getSootClass(SootUtils.grabClass(methodSig));        if (clz == null) {          throw new Exception();        }      } catch (      Exception e) {        logger.warn("Android class not modeled: {} (Might be ok because of modeling simplification).",SootUtils.grabClass(methodSig));      }      if (!Scene.v().containsMethod(methodSig)) {        logger.info("Android method not modeled: {} (Might be ok because of modeling simplification).",methodSig);      }    }  } catch (  Exception e) {    logger.error("Error reading android api methods file: {}",e);    droidsafe.main.Main.exit(1);  }}  }
class C{  public int onSetPath(HeaderSet request,HeaderSet reply,boolean backup,boolean create){  return ResponseCodes.OBEX_HTTP_NOT_IMPLEMENTED;}  }
class C{  public void assertFail(SolrParams p,ErrorCode expCode,String expSubstr) throws Exception {  try {    ignoreException(expSubstr);    query(p);    fail("no exception matching expected: " + expCode.code + ": "+ expSubstr);  } catch (  SolrException e) {    assertEquals(expCode.code,e.code());    assertTrue("Expected substr not found: " + expSubstr + " <!< "+ e.getMessage(),e.getMessage().contains(expSubstr));  } finally {    unIgnoreException(expSubstr);  }}  }
class C{  public static RotateStream create(String path) throws ConfigException {synchronized (_formatStreams) {    WeakReference<RotateStream> ref=_formatStreams.get(path);    RotateStream stream=ref != null ? ref.get() : null;    if (stream == null) {      stream=new RotateStream(path);      _formatStreams.put(path,new WeakReference<RotateStream>(stream));    }    return stream;  }}  }
class C{  public void reply(HeadersAmp headers,String to,long qid,Object value) throws IOException {  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " reply " + value+ "\n  {to:"+ to+ ","+ headers+ "}");  }  try {    JsonWriterImpl jOut=_jOut;    jOut.init();    jOut.writeStartArray();    jOut.write("reply");    writeHeaders(jOut,headers);    jOut.write(to);    jOut.write(qid);    jOut.write(value);    jOut.writeEndArray();    jOut.close();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public Map<Integer,Double> compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public boolean isNetworkSupported(int networkType){  try {    return mService.isNetworkSupported(networkType);  } catch (  RemoteException e) {  }  return false;}  }
class C{  public void clearUnregisteredClassLoaders(){  ArrayList toUnregister=null;synchronized (registeredCLs) {    Iterator it=registeredCLs.values().iterator();    while (it.hasNext()) {      ScopedClassPool pool=(ScopedClassPool)it.next();      if (pool.isUnloadedClassLoader()) {        it.remove();        ClassLoader cl=pool.getClassLoader();        if (cl != null) {          if (toUnregister == null) {            toUnregister=new ArrayList();          }          toUnregister.add(cl);        }      }    }    if (toUnregister != null) {      for (int i=0; i < toUnregister.size(); i++) {        unregisterClassLoader((ClassLoader)toUnregister.get(i));      }    }  }}  }
class C{  public LookupTranslator(final CharSequence[]... lookup){  lookupMap=new HashMap<String,String>();  prefixSet=new HashSet<Character>();  int _shortest=Integer.MAX_VALUE;  int _longest=0;  if (lookup != null) {    for (    final CharSequence[] seq : lookup) {      this.lookupMap.put(seq[0].toString(),seq[1].toString());      this.prefixSet.add(seq[0].charAt(0));      final int sz=seq[0].length();      if (sz < _shortest) {        _shortest=sz;      }      if (sz > _longest) {        _longest=sz;      }    }  }  shortest=_shortest;  longest=_longest;}  }
class C{  public void incorporarEntidadProductoraComoProductor(){  IInfoProductorSerie infoProductorSerie=getInfoProductorSerie(productorEntidadProductora.getGuid());  if (infoProductorSerie == null) {    infoProductoresSerie.put(productorEntidadProductora.getGuid(),productorEntidadProductora);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TGETTER__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void equalCounts(Node node,int numCategories){  if (node instanceof DiscreteVariable)   return;  String name=node.getName();  int i=sourceDataSet.getVariables().indexOf(node);  double[] data=sourceDataSet.getDoubleData().getColumn(i).toArray();  double[] breakpoints=Discretizer.getEqualFrequencyBreakPoints(data,numCategories);  List<String> categories=new DiscreteVariable(name,numCategories).getCategories();  ContinuousDiscretizationSpec spec=new ContinuousDiscretizationSpec(breakpoints,categories);  spec.setMethod(ContinuousDiscretizationSpec.EVENLY_DISTRIBUTED_VALUES);  specs.put(node,spec);}  }
class C{  public void save2(OutputStream os){  try {    ObjectOutputStream oos=new ObjectOutputStream(os);    oos.writeObject(this);    oos.flush();  } catch (  IOException ex) {    System.err.println("i/o error writing board");    System.err.println(ex);  }}  }
class C{  public void handleImage(RenderedImage image,Element imageElement,SVGGeneratorContext generatorContext){  imageElement.setAttributeNS(null,SVG_WIDTH_ATTRIBUTE,String.valueOf(image.getWidth()));  imageElement.setAttributeNS(null,SVG_HEIGHT_ATTRIBUTE,String.valueOf(image.getHeight()));  try {    handleHREF(image,imageElement,generatorContext);  } catch (  SVGGraphics2DIOException e) {    try {      generatorContext.errorHandler.handleError(e);    } catch (    SVGGraphics2DIOException io) {      throw new SVGGraphics2DRuntimeException(io);    }  }}  }
class C{  public DomainNameValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  public static SourceSection createUnknown(String name){  return Source.newBuilder("").name(name).mimeType(RRuntime.R_APP_MIME).build().createSection(0,0);}  }
class C{  public static boolean sendPushMessage(String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword,String bbUrl,String bbApp,String bbPass,String bbPort){  ConnectionRequest cr=createPushMessage(body,deviceKey,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,bbUrl,bbApp,bbPass,bbPort);  NetworkManager.getInstance().addToQueueAndWait(cr);  if (cr.getResposeCode() == 200) {    return true;  }  return false;}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double sf2=Math.exp(2 * loghyper.get(1,0));  final double s2=Math.exp(2 * loghyper.get(2,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  q=new double[m][m];  for (int i=0; i < m; i++) {    for (int j=0; j < m; j++) {      double t=0;      for (int k=0; k < n; k++) {        t+=x[i][k] * x[j][k] * em2;      }      q[i][j]=t;    }  }  double[] dq=new double[m];  for (int i=0; i < m; i++) {    dq[i]=Math.sqrt(oneplusem2 + q[i][i]);  }  Matrix A=new Matrix(m,m);  k=new double[m][m];  double[][] a=A.getArray();  for (int i=0; i < m; i++) {    final double dqi=dq[i];    for (int j=0; j < m; j++) {      final double t=(em2 + q[i][j]) / (dqi * dq[j]);      k[i][j]=t;      a[i][j]=sf2 * Math.asin(t);    }    a[i][i]+=s2;  }  return A;}  }
class C{  public HttpCallerInfo(HttpCallerInfo old,String scheme){  this.url=old.url;  this.host=old.host;  this.protocol=old.protocol;  this.prompt=old.prompt;  this.port=old.port;  this.addr=old.addr;  this.authType=old.authType;  this.scheme=scheme;}  }
class C{  protected String earliestBinlogFilename(){  List<String> logNames=new ArrayList<>();  try {    logger.info("Checking all known binlogs from MySQL");    taskContext.jdbc().query("SHOW BINARY LOGS",null);  } catch (  SQLException e) {    throw new ConnectException("Unexpected error while connecting to MySQL and looking for binary logs: ",e);  }  if (logNames.isEmpty())   return null;  return logNames.get(0);}  }
class C{  static String encode(Encoder encoder,String str){  if (str == null) {    str="null";  }  final int n=str.length();  int j=encoder.firstEncodedOffset(str,0,n);  if (j == n) {    return str;  }  return new Buffer().encode(encoder,str,j);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static AnnotatedTypeMirror leastUpperBound(AnnotatedTypeFactory atypeFactory,AnnotatedTypeMirror type1,AnnotatedTypeMirror type2){  TypeMirror lub=InternalUtils.leastUpperBound(atypeFactory.getProcessingEnv(),type1.getUnderlyingType(),type2.getUnderlyingType());  return leastUpperBound(atypeFactory,type1,type2,lub);}  }
class C{  public String id(){  return id;}  }
class C{  private Expression primary() throws ParserException, IOException {  Expression e=null;switch (lookahead.ttype) {case OPENPAREN:    match(OPENPAREN);  e=expression();match(CLOSEPAREN);break;case StreamTokenizer.TT_WORD:String s=lookahead.sval;if (isReservedWord(s)) {throw new SyntaxException(st.lineno(),"IDENTIFIER","Reserved Word: " + lookahead.sval);}matchID();e=new Identifier(s);log(pdebug,"Parsed: ID -> " + s);break;case StreamTokenizer.TT_NUMBER:double literal=lookahead.nval;matchNumber();e=new Literal(new Double(literal));log(pdebug,"Parsed: number -> " + literal);break;default :throw new SyntaxException(st.lineno(),"IDENTIFIER",lookahead);}log(pdebug,"Parsed: primary -> " + e);return e;}  }
class C{  public boolean isSerNo(){  Object oo=get_Value(COLUMNNAME_IsSerNo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean removeFields(String name){  return this.remove(name) != null;}  }
class C{  public static void sortGatesByStage(LogicCircuit lc){  for (  Gate g : lc.get_logic_gates()) {    GateUtil.calculateDistanceToFarthestInput(g);  }  LogicCircuitUtil.sortLogicGatesByDist2In(lc);  Collections.reverse(lc.get_logic_gates());}  }
class C{  public static String aes256(String s){  return encrypt(s,"AES");}  }
class C{  @Override public void put(int msgLevel,String msg,Throwable ex){  String exceptionText=null;  if (ex != null) {    StringWriter sw=new StringWriter();    PrintWriter pw=new PrintWriter(sw);    ex.printStackTrace(pw);    pw.close();    try {      sw.close();    } catch (    IOException ignore) {    }    exceptionText=sw.toString();  }  put(msgLevel,new Date(),this.connectionName,getThreadName(),getThreadId(),msg,exceptionText);}  }
class C{  public static Properties splitPropertiesOnPipe(String toSplit){  return splitPropertiesOnDelimiter(toSplit,PIPE);}  }
class C{  public final void parse(){  Vect constants=(Vect)this.configTbl.get(Constant);  Vect constraints=(Vect)this.configTbl.get(Constraint);  Vect actionConstraints=(Vect)this.configTbl.get(ActionConstraint);  Vect invariants=(Vect)this.configTbl.get(Invariant);  Vect props=(Vect)this.configTbl.get(Prop);  try {    FileInputStream fis=FileUtil.newFIS(resolver.resolve(this.configFileName,false));    if (fis == null) {      throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,"File not found."});    }    SimpleCharStream scs=new SimpleCharStream(fis,1,1);    TLAplusParserTokenManager tmgr=new TLAplusParserTokenManager(scs,2);    Token tt=getNextToken(tmgr);    while (tt.kind != TLAplusParserConstants.EOF) {      String tval=tt.image;      int loc=scs.getBeginLine();      if (tval.equals(Init)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Init});        }        String old=(String)this.configTbl.put(Init,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Spec});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(Next)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Next});        }        String old=(String)this.configTbl.put(Next,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Next});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(Spec)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Spec});        }        String old=(String)this.configTbl.put(Spec,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Spec});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(View)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),View});        }        String old=(String)this.configTbl.put(View,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),View});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(Symmetry)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Symmetry});        }        String old=(String)this.configTbl.put(Symmetry,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Symmetry});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(Type)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Type});        }        String old=(String)this.configTbl.put(Type,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Type});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(TypeConstraint)) {        tt=getNextToken(tmgr);        if (tt.kind == TLAplusParserConstants.EOF) {          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),TypeConstraint});        }        String old=(String)this.configTbl.put(TypeConstraint,tt.image);        if (old.length() != 0) {          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),TypeConstraint});        }        tt=getNextToken(tmgr);      } else       if (tval.equals(Constant) || tval.equals(Constants)) {        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {          if (this.configTbl.get(tt.image) != null)           break;          String lhs=tt.image;          tt=getNextToken(tmgr);          while (tt.image.equals("!")) {            tt=getNextToken(tmgr);            lhs=lhs + "!" + tt.image;            tt=getNextToken(tmgr);          }          Vect line=new Vect();          line.addElement(lhs);          if (tt.image.equals("<-")) {            tt=getNextToken(tmgr);            if (tt.image.equals("[")) {              tt=getNextToken(tmgr);              if (tt.kind == TLAplusParserConstants.EOF) {                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),"<-["});              }              String modName=tt.image;              tt=getNextToken(tmgr);              if (!tt.image.equals("]")) {                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"]"});              }              tt=getNextToken(tmgr);              if (tt.kind == TLAplusParserConstants.EOF) {                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),"<-[mod]"});              }              Hashtable defs=(Hashtable)this.modOverrides.get(modName);              if (defs == null) {                defs=new Hashtable();                this.modOverrides.put(modName,defs);              }              defs.put(line.elementAt(0),tt.image);            } else {              if (tt.kind == TLAplusParserConstants.EOF) {                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),"<-"});              }              this.overrides.put(line.elementAt(0),tt.image);            }          } else {            if (tt.image.equals("(")) {              while (true) {                tt=getNextToken(tmgr);                Value arg=this.parseValue(tt,scs,tmgr);                line.addElement(arg);                tt=getNextToken(tmgr);                if (!tt.image.equals(","))                 break;              }              if (!tt.image.equals(")")) {                throw new ConfigFileException(EC.CFG_GENERAL,new String[]{String.valueOf(loc)});              }              tt=getNextToken(tmgr);            }            if (!tt.image.equals("=")) {              throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"= or <-"});            }            tt=getNextToken(tmgr);            if (tt.image.equals("[")) {              tt=getNextToken(tmgr);              if (tt.kind == TLAplusParserConstants.EOF) {                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),"=["});              }              String modName=tt.image;              tt=getNextToken(tmgr);              if (!tt.image.equals("]")) {                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"]"});              }              tt=getNextToken(tmgr);              line.addElement(this.parseValue(tt,scs,tmgr));              Vect mConsts=(Vect)this.modConstants.get(modName);              if (mConsts == null) {                mConsts=new Vect();                this.modConstants.put(modName,mConsts);              }              mConsts.addElement(line);            } else {              line.addElement(this.parseValue(tt,scs,tmgr));              constants.addElement(line);            }          }        }      } else       if (tval.equals(Invariant) || tval.equals(Invariants)) {        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {          if (this.configTbl.get(tt.image) != null)           break;          invariants.addElement(tt.image);        }      } else       if (tval.equals(Prop) || tval.equals(Props)) {        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {          if (this.configTbl.get(tt.image) != null)           break;          props.addElement(tt.image);        }      } else       if (tval.equals(Constraint) || tval.equals(Constraints)) {        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {          if (this.configTbl.get(tt.image) != null)           break;          constraints.addElement(tt.image);        }      } else       if (tval.equals(ActionConstraint) || tval.equals(ActionConstraints)) {        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {          if (this.configTbl.get(tt.image) != null)           break;          actionConstraints.addElement(tt.image);        }      } else {        throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),"a keyword"});      }    }  } catch (  IOException e) {    throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,e.getMessage()},e);  }}  }
class C{  public final void printLatin1NoLf(String string) throws IOException {  if (string == null)   string="null";  int length=string.length();  int offset=0;  char[] chars=_chars;  while (length > 0) {    int sublen=Math.min(length,chars.length);    string.getChars(offset,offset + sublen,chars,0);    for (int i=sublen - 1; i >= 0; i--) {      char value=chars[i];      if (value == '\r' || value == '\n') {        sublen=i;        length=sublen;      }    }    printLatin1(chars,0,sublen);    length-=sublen;    offset+=sublen;  }}  }
class C{  public static File createTempFile(Context context) throws IOException {  if (!hasExternalStorage()) {    return createTempFile(context,context.getCacheDir());  } else {    return createTempFile(context,context.getExternalFilesDir("caches"));  }}  }
class C{  public static String stripFileExtension(String name){  int pos=name.lastIndexOf('.');  if (pos > 0 & pos < name.length() - 1)   return name.substring(0,pos);  return name;}  }
class C{  public void connectContainerToNetwork(ConnectContainerToNetworkParams params) throws IOException {  byte[] entityBytesArray=toJson(params.getConnectContainer()).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/networks/" + params.getNetworkId()+ "/connect").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }  } }  }
class C{  protected void configLambda(Parameterization config){  IntParameter lambdaP=new IntParameter(LAMBDA_ID).addConstraint(CommonConstraints.GREATER_EQUAL_ONE_INT).setOptional(true);  if (config.grab(lambdaP)) {    settings.lambda=lambdaP.intValue();  }}  }
class C{  public SqlTimeConverter(){  super();}  }
class C{  protected CCReverseTime(CCFiniteTimeAction action){  super(action.getDuration());  other=action;}  }
class C{  public boolean hasChildren(Node item){  return getChildCount(item) != 0;}  }
class C{  public Graphics create(int x,int y,int width,int height){  DebugGraphics debugGraphics;  debugGraphics=new DebugGraphics();  debugGraphics.graphics=graphics.create(x,y,width,height);  debugGraphics.debugOptions=debugOptions;  debugGraphics.buffer=buffer;  debugGraphics.xOffset=xOffset + x;  debugGraphics.yOffset=yOffset + y;  return debugGraphics;}  }
class C{  public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public static void moveFile(final File srcFile,final File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new IOException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  final boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      ParseFileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public void endSession(){}  }
class C{  private void validateUserGroupCreateParam(UserGroupCreateParam param){  validateUserGroupBaseParam(param);  ArgValidator.checkFieldNotEmpty(param.getAttributes(),"attributes");  validateUserAttributeParam(param.getAttributes());}  }
class C{  public boolean hasAdditionalRoles(){  return hasRepeatingExtension(AdditionalRole.class);}  }
class C{  void invalidate(){  if (mFilename != null) {    new File(mFilename).delete();    mFilename=null;  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static double exp_sum(double[] arr){  double tot=0;  for (int i=0, n=arr.length; i < n; i++) {    tot+=Math.exp(arr[i]);  }  return tot;}  }
class C{  protected Node buildTrie(final ObjectList<LongArrayBitVector> elements,final int pos){  if (elements.size() == 0)   return null;  BitVector first=elements.get(0), curr;  int prefix=first.size(), change=-1, j;  if (elements.size() == 1)   return new Node(pos < prefix ? LongArrayBitVector.copy(first.subVector(pos,prefix)) : null,size++);  for (ListIterator<LongArrayBitVector> i=elements.listIterator(1); i.hasNext(); ) {    curr=i.next();    if (curr.size() < prefix)     prefix=curr.size();    for (j=pos; j < prefix; j++)     if (first.get(j) != curr.get(j))     break;    if (j < prefix) {      change=i.previousIndex();      prefix=j;    }  }  final Node n;  if (prefix == first.size()) {    change=1;    for (ListIterator<LongArrayBitVector> i=elements.listIterator(1); i.hasNext(); ) {      curr=i.next();      if (curr.getBoolean(prefix))       break;      change++;    }    n=new Node(prefix > pos ? LongArrayBitVector.copy(first.subVector(pos,prefix)) : null,size++);    n.left=buildTrie(elements.subList(1,change),prefix + 1);    n.right=buildTrie(elements.subList(change,elements.size()),prefix + 1);  } else {    n=new Node(prefix > pos ? LongArrayBitVector.copy(first.subVector(pos,prefix)) : null);    n.left=buildTrie(elements.subList(0,change),prefix + 1);    n.right=buildTrie(elements.subList(change,elements.size()),prefix + 1);  }  return n;}  }
class C{  public boolean empty(){  return (m_Head == null);}  }
class C{  public DefaultDrawingSupplier(){  this(DEFAULT_PAINT_SEQUENCE,DEFAULT_FILL_PAINT_SEQUENCE,DEFAULT_OUTLINE_PAINT_SEQUENCE,DEFAULT_STROKE_SEQUENCE,DEFAULT_OUTLINE_STROKE_SEQUENCE,DEFAULT_SHAPE_SEQUENCE);}  }
class C{  protected Size2D arrangeRN(Graphics2D g2,Range widthRange){  Size2D s=arrangeNN(g2);  if (widthRange.contains(s.getWidth())) {    return s;  }  double ww=widthRange.constrain(s.getWidth());  return arrangeFN(g2,ww);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  private void calculateNextTaskDistance(){  if (!trackRecordingService.isRecording() || trackRecordingService.isPaused() || periodicTask == null) {    return;  }  TripStatistics tripStatistics=trackRecordingService.getTripStatistics();  if (tripStatistics == null) {    return;  }  if (!isDistanceFrequency()) {    nextTaskDistance=Double.MAX_VALUE;    Log.d(TAG,"SplitManager: Distance splits disabled.");    return;  }  double distance=tripStatistics.getTotalDistance() * UnitConversions.M_TO_KM;  if (!metricUnits) {    distance*=UnitConversions.KM_TO_MI;  }  int index=(int)(distance / taskFrequency);  index-=1;  nextTaskDistance=taskFrequency * index;}  }
class C{  public boolean addNondirectedEdge(Node node1,Node node2){  return addEdge(Edges.nondirectedEdge(node1,node2));}  }
class C{  public static Packet parseMessage(XmlPullParser parser) throws Exception {  Message message=new Message();  String id=parser.getAttributeValue("","id");  message.setPacketID(id == null ? Packet.ID_NOT_AVAILABLE : id);  message.setTo(parser.getAttributeValue("","to"));  message.setFrom(parser.getAttributeValue("","from"));  message.setType(Message.Type.fromString(parser.getAttributeValue("","type")));  String language=getLanguageAttribute(parser);  String defaultLanguage=null;  if (language != null && !"".equals(language.trim())) {    message.setLanguage(language);    defaultLanguage=language;  } else {    defaultLanguage=Packet.getDefaultLanguage();  }  boolean done=false;  String thread=null;  Map<String,Object> properties=null;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String elementName=parser.getName();      String namespace=parser.getNamespace();      if (elementName.equals("subject")) {        String xmlLang=getLanguageAttribute(parser);        if (xmlLang == null) {          xmlLang=defaultLanguage;        }        String subject=parseContent(parser);        if (message.getSubject(xmlLang) == null) {          message.addSubject(xmlLang,subject);        }      } else       if (elementName.equals("body")) {        String xmlLang=getLanguageAttribute(parser);        if (xmlLang == null) {          xmlLang=defaultLanguage;        }        String body=parseContent(parser);        if (message.getBody(xmlLang) == null) {          message.addBody(xmlLang,body);        }      } else       if (elementName.equals("thread")) {        if (thread == null) {          thread=parser.nextText();        }      } else       if (elementName.equals("error")) {        message.setError(parseError(parser));      } else       if (elementName.equals("properties") && namespace.equals(PROPERTIES_NAMESPACE)) {        properties=parseProperties(parser);      } else {        message.addExtension(PacketParserUtils.parsePacketExtension(elementName,namespace,parser));      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("message")) {        done=true;      }    }  }  message.setThread(thread);  if (properties != null) {    for (    String name : properties.keySet()) {      message.setProperty(name,properties.get(name));    }  }  return message;}  }
class C{  private static Pair<String,String> offsetROR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + Integer.decode(immediateNodeValue),dw,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(32 - Integer.decode(immediateNodeValue)),dw,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,tmpVar2,dw,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar3,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public CCircularPanel(final ZyGraphViewSettings settings){  super(new GridLayout(2,1));  setBorder(new TitledBorder("Circular Layout"));  Preconditions.checkNotNull(settings,"IE01584: Settings argument can not be null");  CSettingsPanelBuilder.addComboBox(this,m_cbCircularLayoutStyle,"Layout Style" + ":","Exact layouting style used when doing circular layouts.",new String[]{"Compact","Isolated","Single Cycle"},settings.getLayoutSettings().getCircularSettings().getStyle().ordinal());  CSettingsPanelBuilder.addTextField(this,m_tfCircularMinNodeDistance,"Minimum Node Distance" + ":","Minimum distance between nodes in pixels.",String.valueOf(settings.getLayoutSettings().getCircularSettings().getMinimumNodeDistance()));}  }
class C{  public String toString(){  String locStr="";  if (pt != null)   locStr=" at or near point " + pt;  return getMessage() + locStr;}  }
class C{  private void closingCancel(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void removeRepositoryListener(RepositoryListener listener){  listeners.remove(listener);  activated=!listeners.isEmpty();}  }
class C{  public void addSyscallNid(int nid,int code){  nidToSyscall.put(nid,code);}  }
class C{  public void test_getPrivateKey(){  init(CLIENT);  assertNull("Not NULL for NULL parameter",manager.getPrivateKey(null));  assertNull("Not NULL for serverAlias_00 parameter",manager.getPrivateKey("serverAlias_00"));  assertNull("Not NULL for clientAlias_02 parameter",manager.getPrivateKey("clientAlias_02"));}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  if (isFirstBatchDone()) {    throw new Exception("The Transpose filter can only process one batch of instances.");  }  setOutputFormat(determineOutputFormat(instances));  int offset=(instances.attribute(0).isNominal() || instances.attribute(0).isString()) ? 1 : 0;  double[][] newData=new double[instances.numAttributes() - offset][instances.numInstances() + 1];  for (int i=0; i < instances.numInstances(); i++) {    for (int j=offset; j < instances.numAttributes(); j++) {      newData[j - offset][0]=getOutputFormat().attribute(0).addStringValue(instances.attribute(j).name());      if (!instances.attribute(j).isNumeric()) {        throw new Exception("Only numeric attributes can be transposed: " + instances.attribute(j).name() + " is not numeric.");      }      newData[j - offset][i + 1]=instances.instance(i).value(j);    }  }  Instances result=getOutputFormat();  for (int i=0; i < newData.length; i++) {    result.add(new DenseInstance(instances.attribute(i + offset).weight(),newData[i]));  }  return result;}  }
class C{  private static int scanForward(IDocument document,int position,String partitioning,int bound,char[] chars){  Assert.isTrue(position >= 0);  Assert.isTrue(bound <= document.getLength());  Arrays.sort(chars);  try {    while (position < bound) {      if (Arrays.binarySearch(chars,document.getChar(position)) >= 0 && isDefaultPartition(document,position,partitioning))       return position;      position++;    }  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    if (debug) {      System.out.println("\t\t[NTLoginModule]: " + "did not add any Principals to Subject " + "because own authentication failed.");    }    return false;  }  if (subject.isReadOnly()) {    throw new LoginException("Subject is ReadOnly");  }  Set<Principal> principals=subject.getPrincipals();  if (!principals.contains(userPrincipal)) {    principals.add(userPrincipal);  }  if (userSID != null && !principals.contains(userSID)) {    principals.add(userSID);  }  if (userDomain != null && !principals.contains(userDomain)) {    principals.add(userDomain);  }  if (domainSID != null && !principals.contains(domainSID)) {    principals.add(domainSID);  }  if (primaryGroup != null && !principals.contains(primaryGroup)) {    principals.add(primaryGroup);  }  for (int i=0; groups != null && i < groups.length; i++) {    if (!principals.contains(groups[i])) {      principals.add(groups[i]);    }  }  Set<Object> pubCreds=subject.getPublicCredentials();  if (iToken != null && !pubCreds.contains(iToken)) {    pubCreds.add(iToken);  }  commitSucceeded=true;  return true;}  }
class C{  public void characters(String characters) throws SAXException {  final int len=characters.length();  if (len > m_charsBuff.length) {    m_charsBuff=new char[len * 2 + 1];  }  characters.getChars(0,len,m_charsBuff,0);  characters(m_charsBuff,0,len);}  }
class C{  public String toString(boolean includePrivateKeys,boolean includeTransactions,boolean includeExtensions,@Nullable AbstractBlockChain chain){  lock.lock();  keyChainGroupLock.lock();  try {    StringBuilder builder=new StringBuilder();    Coin estimatedBalance=getBalance(BalanceType.ESTIMATED);    Coin availableBalance=getBalance(BalanceType.AVAILABLE_SPENDABLE);    builder.append("Wallet containing ").append(estimatedBalance.toFriendlyString()).append(" (spendable: ").append(availableBalance.toFriendlyString()).append(") in:\n");    builder.append("  ").append(pending.size()).append(" pending transactions\n");    builder.append("  ").append(unspent.size()).append(" unspent transactions\n");    builder.append("  ").append(spent.size()).append(" spent transactions\n");    builder.append("  ").append(dead.size()).append(" dead transactions\n");    final Date lastBlockSeenTime=getLastBlockSeenTime();    builder.append("Last seen best block: ").append(getLastBlockSeenHeight()).append(" (").append(lastBlockSeenTime == null ? "time unknown" : Utils.dateTimeFormat(lastBlockSeenTime)).append("): ").append(getLastBlockSeenHash()).append('\n');    final KeyCrypter crypter=keyChainGroup.getKeyCrypter();    if (crypter != null)     builder.append("Encryption: ").append(crypter).append('\n');    if (isWatching())     builder.append("Wallet is watching.\n");    builder.append("\nKeys:\n");    builder.append("Earliest creation time: ").append(Utils.dateTimeFormat(getEarliestKeyCreationTime() * 1000)).append('\n');    final Date keyRotationTime=getKeyRotationTime();    if (keyRotationTime != null)     builder.append("Key rotation time:      ").append(Utils.dateTimeFormat(keyRotationTime)).append('\n');    builder.append(keyChainGroup.toString(includePrivateKeys));    if (!watchedScripts.isEmpty()) {      builder.append("\nWatched scripts:\n");      for (      Script script : watchedScripts) {        builder.append("  ").append(script).append("\n");      }    }    if (includeTransactions) {      if (pending.size() > 0) {        builder.append("\n>>> PENDING:\n");        toStringHelper(builder,pending,chain,Transaction.SORT_TX_BY_UPDATE_TIME);      }      if (unspent.size() > 0) {        builder.append("\n>>> UNSPENT:\n");        toStringHelper(builder,unspent,chain,Transaction.SORT_TX_BY_HEIGHT);      }      if (spent.size() > 0) {        builder.append("\n>>> SPENT:\n");        toStringHelper(builder,spent,chain,Transaction.SORT_TX_BY_HEIGHT);      }      if (dead.size() > 0) {        builder.append("\n>>> DEAD:\n");        toStringHelper(builder,dead,chain,Transaction.SORT_TX_BY_UPDATE_TIME);      }    }    if (includeExtensions && extensions.size() > 0) {      builder.append("\n>>> EXTENSIONS:\n");      for (      WalletExtension extension : extensions.values()) {        builder.append(extension).append("\n\n");      }    }    return builder.toString();  }  finally {    keyChainGroupLock.unlock();    lock.unlock();  }}  }
class C{  @SuppressWarnings("unchecked") public <U>SimpleReactStream<U> from(final Iterator<U> iterator){  return from(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator,Spliterator.ORDERED),false));}  }
class C{  public boolean canBePalindrome(String s){  return false;}  }
class C{  public void finish() throws Exception {}  }
class C{  public char[] qualifiedSourceName(){  if (isMemberType())   return CharOperation.concat(enclosingType().qualifiedSourceName(),sourceName(),'.');  return sourceName();}  }
class C{  @SuppressWarnings("rawtypes") public static void DisableIntegration(Context context,Class nameOfImplementation){  SharedPreferences.Editor editor=context.getSharedPreferences("EndlessJabberSDK",Context.MODE_PRIVATE).edit();  editor.clear();  editor.apply();  SendInfoToEndlessJabber(context);}  }
class C{  private Shape decodeShadow(int width,int height){  path.reset();  path.moveTo(width - 1,0);  path.lineTo(width - 1,height - 4);  path.lineTo(width - 4,height - 1);  path.lineTo(2,height - 1);  path.lineTo(1,height - 2);  return path;}  }
class C{  public S2LatLng(S2Point p){  this(Math.atan2(p.z,Math.sqrt(p.x * p.x + p.y * p.y)),Math.atan2(p.y,p.x));}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEDistantLightElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean isSetNodeStore(){  return this.nodeStore != null;}  }
class C{  void drawDebugStuff(){  if (!SHOW_DEBUG_STUFF) {    return;  }  if (true) {    OutlineAlignedRect.prepareToDraw();    mDebugCollisionRect.draw();    OutlineAlignedRect.finishedDrawing();  }  if (true) {    int textureWidth=mTextRes.getTextureWidth();    int textureHeight=mTextRes.getTextureHeight();    float scale=(ARENA_WIDTH * STATUS_MESSAGE_WIDTH_PERC) / textureWidth;    OutlineAlignedRect outline=new OutlineAlignedRect();    outline.setPosition(ARENA_WIDTH / 2,ARENA_HEIGHT / 2);    outline.setScale(textureWidth * scale + 2,textureHeight * scale + 2);    outline.setColor(1.0f,0.65f,0.0f);    OutlineAlignedRect.prepareToDraw();    outline.draw();    OutlineAlignedRect.finishedDrawing();    Rect boundsRect=new Rect(0,0,textureWidth,textureHeight);    TexturedAlignedRect msgBox=mGameStatusMessages;    msgBox.setTextureCoords(boundsRect);    msgBox.setScale(textureWidth * scale,textureHeight * scale);    TexturedAlignedRect.prepareToDraw();    msgBox.draw();    TexturedAlignedRect.finishedDrawing();    if (true) {      outline.setColor(1.0f,1.0f,1.0f);      int stringNum=mDebugFramedString;      mDebugFramedString=(mDebugFramedString + 1) % TextResources.getNumStrings();      boundsRect=mTextRes.getTextureRect(stringNum);      float boundsCenterX=boundsRect.exactCenterX() - (textureWidth / 2);      float boundsCenterY=boundsRect.exactCenterY() - (textureHeight / 2);      boundsCenterX=ARENA_WIDTH / 2 + (boundsCenterX * scale);      boundsCenterY=ARENA_HEIGHT / 2 - (boundsCenterY * scale);      outline.setPosition(boundsCenterX,boundsCenterY);      outline.setScale(boundsRect.width() * scale,boundsRect.height() * scale);      OutlineAlignedRect.prepareToDraw();      outline.draw();      OutlineAlignedRect.finishedDrawing();    }  }}  }
class C{  public Builder deleteRole(String role){  Role deleteRole=new Role.Builder().setValue(role).setOperation(DELETE).build();  roles.add(deleteRole);  return this;}  }
class C{  public RuleGrounding(){  groundings=new HashSet<Assignment>();  groundings.add(new Assignment());}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SREFLEX;}  }
class C{  public SVGOMScriptElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public boolean containsWindow(Class<?> windowClass){  return (getWindow(windowClass) != null);}  }
class C{  public void rm(File fileOrDir){  run(null);}  }
class C{  public void printUnit(JCCompilationUnit tree,JCClassDecl cdef) throws IOException {  Object dc=getDocComments(tree);  loadDocCommentsTable(dc);  printDocComment(tree);  if (tree.pid != null) {    consumeComments(tree.pos,tree);    print("package ");    printExpr(tree.pid);    print(";");    println();  }  boolean firstImport=true;  for (List<JCTree> l=tree.defs; l.nonEmpty() && (cdef == null || IMPORT.equals(treeTag(l.head))); l=l.tail) {    if (IMPORT.equals(treeTag(l.head))) {      JCImport imp=(JCImport)l.head;      Name name=TreeInfo.name(imp.qualid);      if (name == name.table.fromChars(new char[]{'*'},0,1) || cdef == null || isUsed(TreeInfo.symbol(imp.qualid),cdef)) {        if (firstImport) {          firstImport=false;          println();        }        printStat(imp);      }    } else {      printStat(l.head);    }  }  if (cdef != null) {    printStat(cdef);    println();  }}  }
class C{  MatrixAspectPanel(String aspect,char[] panelBits){  if (panelBits == null || panelBits.length == 0) {    return;  }  this.aspect=aspect;  aspectBits=panelBits;  setAspectBoxes(aspectBits);}  }
class C{  public void push(int where){  start=where;}  }
class C{  public void testRuntimeConfigurationDomainName(){  RuntimeConfiguration runtimeConfiguration=new Jonas4xRuntimeConfiguration();  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_SERVER_NAME,"foo");  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_DOMAIN_NAME,"bar");  AbstractRemoteContainer remoteContainer=new Jonas4xRemoteContainer(runtimeConfiguration);  AbstractJonasRemoteDeployer remoteDeployer=new TestDeployer(remoteContainer);  RemoteDeployerConfig deployerConfig=remoteDeployer.getConfig();  assertEquals("foo",deployerConfig.getServerName());  assertEquals("bar",deployerConfig.getDomainName());  assertNull(deployerConfig.getClusterName());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String newTZ=getString(stack).trim();  int parIdx=newTZ.lastIndexOf('(');  if (parIdx != -1 && newTZ.lastIndexOf(')') > parIdx)   Sage.setTimeZone(newTZ.substring(Math.max(parIdx + 1,newTZ.lastIndexOf(',') + 1),newTZ.lastIndexOf(')')).trim()); else   Sage.setTimeZone(newTZ);  return null;}  }
class C{  public static boolean isIntegral(Type t){  return (t instanceof LongType || t instanceof IntType || t instanceof ShortType|| t instanceof CharType|| t instanceof ByteType);}  }
class C{  public static MorphTransition create(int duration){  MorphTransition mt=new MorphTransition();  mt.duration=duration;  return mt;}  }
class C{  protected void writeComment(String line) throws IOException {  mOut.write(COMMENT_CHAR);  writeLine(line);}  }
class C{  static SimpleSet findPackageSet(ClasspathJar jar){  String zipFileName=jar.zipFilename;  SimpleSet packageSet=new SimpleSet(41);  packageSet.add("");  nextEntry:   for (Enumeration e=jar.zipFile.entries(); e.hasMoreElements(); ) {    String fileName=((ZipEntry)e.nextElement()).getName();    int last=fileName.lastIndexOf('/');    while (last > 0) {      String packageName=fileName.substring(0,last);      String[] splittedName=Util.splitOn('/',packageName,0,packageName.length());      for (      String s : splittedName) {        if (!org.eclipse.jdt.internal.core.util.Util.isValidFolderNameForPackage(s,"1.7","1.7")) {          continue nextEntry;        }      }      if (packageSet.addIfNotIncluded(packageName) == null)       continue nextEntry;      last=packageName.lastIndexOf('/');    }  }  return packageSet;}  }
class C{  @FXML public void openProject(){  if (showConfirmationDialogAndWait()) {    final FileChooser fileChooser=new FileChooser();    fileChooser.setTitle("Open Project");    fileChooser.getExtensionFilters().addAll(new ExtensionFilter("GRIP File","*.grip"),new ExtensionFilter("All Files","*","*.*"));    project.getFile().ifPresent(null);    final File file=fileChooser.showOpenDialog(root.getScene().getWindow());    if (file != null) {      Thread fileOpenThread=new Thread(null,"Project Open Thread");      fileOpenThread.setDaemon(true);      fileOpenThread.start();    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Ignore("TODO") @Test public void testP2PDeltaPropagationFailedStats2() throws Exception {}  }
class C{  protected boolean allocatePesForVm(String vmUid,List<Double> mipsShareRequested){  double totalRequestedMips=0;  double peMips=getPeCapacity();  for (  Double mips : mipsShareRequested) {    if (mips > peMips) {      return false;    }    totalRequestedMips+=mips;  }  if (getAvailableMips() < totalRequestedMips) {    return false;  }  getMipsMapRequested().put(vmUid,mipsShareRequested);  setPesInUse(getPesInUse() + mipsShareRequested.size());  if (getVmsMigratingIn().contains(vmUid)) {    totalRequestedMips*=0.1;  }  List<Double> mipsShareAllocated=new ArrayList<Double>();  for (  Double mipsRequested : mipsShareRequested) {    if (getVmsMigratingOut().contains(vmUid)) {      mipsRequested*=0.9;    } else     if (getVmsMigratingIn().contains(vmUid)) {      mipsRequested*=0.1;    }    mipsShareAllocated.add(mipsRequested);  }  getMipsMap().put(vmUid,mipsShareAllocated);  setAvailableMips(getAvailableMips() - totalRequestedMips);  return true;}  }
class C{  protected void installDefaults(){  super.installDefaults();  tabPane.setOpaque(false);}  }
class C{  protected void beginGLEffect(){  mEffectContext.assertValidGLState();  mEffectContext.saveGLState();}  }
class C{  public boolean last() throws SQLException {  checkCursorMove();  boolean result=fbFetcher.last();  if (result)   notifyRowUpdater();  return result;}  }
class C{  public static Result sudo(long timeout,String... args){  return sudo(timeout,null,args);}  }
class C{  int readCellLine(Scanner i,ArrayList v) throws IOException {  v.clear();  if (!i.hasNextLine())   return -1;  String s=i.nextLine();  int pos=0;  int newpos;  int size=s.length();  while (true) {    newpos=s.indexOf('|',pos);    if (newpos < 0 || newpos >= size)     break;    if (newpos == pos)     v.add(""); else     v.add(s.substring(pos,newpos));    pos=newpos + 1;  }  if (pos != size) {    v.add(s.substring(pos,size));  }  return 1;}  }
class C{  public cudaTextureDesc(){}  }
class C{  private void queryDetail(MyPerfContext context,DBCredential cred,Map<String,ReplStatus> replStatusMap,ReplServer replServer,int depth){  logger.info("Probing " + replServer.toString());  Connection conn=null;  Statement stmt=null;  ResultSet rs=null;  ReplStatus repl=replStatusMap.get(replServer.toString());  Map<String,String> hosts=new java.util.LinkedHashMap<String,String>();  boolean toprobe=depth < context.getMyperfConfig().getReplTopologyMaxDepth() && !replServer.probed;  try {    DBInstanceInfo dbinfo2=new DBInstanceInfo();    dbinfo2.setHostName(replServer.host);    dbinfo2.setPort(replServer.port);    dbinfo2.setDatabaseName("information_schema");    dbinfo2.setDbType("mysql");    String url=dbinfo2.getConnectionString();    DriverManager.setLoginTimeout(60);    conn=DriverManager.getConnection(url,cred.getUsername(),cred.getPassword());    if (conn == null)     return;    stmt=conn.createStatement();    rs=stmt.executeQuery("show master status");    if (rs != null && rs.next()) {      java.sql.ResultSetMetaData meta=rs.getMetaData();      int col=meta.getColumnCount();      for (int i=1; i <= col; i++) {        String colName=meta.getColumnLabel(i);        String val=rs.getString(i);        if ("File".equalsIgnoreCase(colName))         repl.masterFile=val; else         if ("Position".equalsIgnoreCase(colName))         repl.masterPosition=val; else         if ("Executed_Gtid_Set".equalsIgnoreCase(colName))         repl.masterExecutedGtidSet=val;      }    }    DBUtils.close(rs);    rs=null;    rs=stmt.executeQuery("show slave status");    if (rs != null && rs.next()) {      java.sql.ResultSetMetaData meta=rs.getMetaData();      int col=meta.getColumnCount();      for (int i=1; i <= col; i++) {        String colName=meta.getColumnLabel(i);        String val=rs.getString(i);        if ("Master_Host".equalsIgnoreCase(colName))         repl.masterHost=getHostnameByIp(val); else         if ("Master_Port".equalsIgnoreCase(colName))         repl.masterPort=val; else         if ("Master_Log_File".equalsIgnoreCase(colName))         repl.masterLogFile=val; else         if ("Read_Master_Log_Pos".equalsIgnoreCase(colName))         repl.readMasterLogPos=val; else         if ("Relay_Master_Log_File".equalsIgnoreCase(colName))         repl.relayMasterLogFile=val; else         if ("Exec_Master_Log_Pos".equalsIgnoreCase(colName))         repl.execMasterLogPos=val; else         if ("Executed_Gtid_Set".equalsIgnoreCase(colName))         repl.executedGtidSet=val; else         if ("Seconds_Behind_Master".equalsIgnoreCase(colName))         repl.lag=val; else         if ("Slave_IO_Running".equalsIgnoreCase(colName))         repl.io=val; else         if ("Slave_SQL_Running".equalsIgnoreCase(colName))         repl.sql=val;      }      if (toprobe)       hosts.put(repl.masterHost,repl.masterPort);    }    DBUtils.close(rs);    rs=null;    if (toprobe) {      rs=stmt.executeQuery("select host from information_schema.processlist where command like 'Binlog Dump%'");      while (rs != null && rs.next()) {        String host=rs.getString(1);        if (host != null && host.indexOf(":") > 0) {          host=host.substring(0,host.indexOf(':'));        }        host=getHostnameByIp(host);        if (host != null && !host.isEmpty())         hosts.put(host,"3306");      }      DBUtils.close(rs);      rs=null;    }    DBUtils.close(stmt);    stmt=null;    DBUtils.close(conn);    conn=null;  } catch (  Exception ex) {    logger.log(Level.WARNING,"Failed to retrieve repl info from " + repl.hostname + ":"+ repl.port,ex);  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(conn);  }  for (  Map.Entry<String,String> server : hosts.entrySet()) {    if (replStatusMap.containsKey(server.getKey() + ":" + server.getValue()))     continue;    ReplStatus replChild=new ReplStatus();    replChild.hostname=server.getKey();    replChild.port=server.getValue();    ReplServer childServer=new ReplServer(replChild.hostname,replChild.port);    replStatusMap.put(childServer.toString(),replChild);    queryDetail(context,cred,replStatusMap,childServer,depth + 1);  }  logger.info("End of probing " + replServer.toString());}  }
class C{  public void testWriteWholeMessage() throws Exception {  TestAllTypes message=TestUtil.getAllSet();  byte[] rawBytes=message.toByteArray();  assertEqualBytes(TestUtil.getGoldenMessage().toByteArray(),rawBytes);  for (int blockSize=1; blockSize < 256; blockSize*=2) {    ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();    CodedOutputStream output=CodedOutputStream.newInstance(rawOutput,blockSize);    message.writeTo(output);    output.flush();    assertEqualBytes(rawBytes,rawOutput.toByteArray());  }}  }
class C{  public static void start(Context context,IntentShare intentShare){  Intent intent=new Intent(context,TargetChooserActivity.class);  intent.putExtra(EXTRA_INTENT_SHARE,intentShare);  context.startActivity(intent);  if (context instanceof Activity) {    ((Activity)context).overridePendingTransition(-1,-1);  }}  }
class C{  public static void writeToFileComplex_1D(String format,double[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < x.length; i=i + 2) {      if (x[i + 1] == 0) {        out.write(String.format(format,x[i]));        out.newLine();        continue;      }      if (x[i] == 0) {        out.write(String.format(format,x[i + 1]) + "i");        out.newLine();        continue;      }      if (x[i + 1] < 0) {        out.write(String.format(format,x[i]) + " - " + String.format(format,-x[i + 1])+ "i");        out.newLine();        continue;      }      out.write(String.format(format,x[i]) + " + " + String.format(format,x[i + 1])+ "i");      out.newLine();    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static SourceLineAnnotation forEntireMethod(@DottedClassName String className,String sourceFile,LineNumberTable lineNumberTable,int codeSize){  LineNumber[] table=lineNumberTable.getLineNumberTable();  if (table != null && table.length > 0) {    LineNumber first=table[0];    LineNumber last=table[table.length - 1];    return new SourceLineAnnotation(className,sourceFile,first.getLineNumber(),last.getLineNumber(),0,codeSize - 1);  } else {    return createUnknown(className,sourceFile,0,codeSize - 1);  }}  }
class C{  public SocialProofRequest(LongSet tweets,Long2DoubleMap weightedSeedNodes,byte[] socialProofTypes){  super(0,EMPTY_SET,socialProofTypes);  this.leftSeedNodesWithWeight=weightedSeedNodes;  this.inputTweets=tweets;}  }
class C{  public int size(){  return size;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DateAxis)) {    return false;  }  DateAxis that=(DateAxis)obj;  if (!ObjectUtilities.equal(this.timeZone,that.timeZone)) {    return false;  }  if (!ObjectUtilities.equal(this.locale,that.locale)) {    return false;  }  if (!ObjectUtilities.equal(this.tickUnit,that.tickUnit)) {    return false;  }  if (!ObjectUtilities.equal(this.dateFormatOverride,that.dateFormatOverride)) {    return false;  }  if (!ObjectUtilities.equal(this.tickMarkPosition,that.tickMarkPosition)) {    return false;  }  if (!ObjectUtilities.equal(this.timeline,that.timeline)) {    return false;  }  return super.equals(obj);}  }
class C{  public void tearDown() throws Exception {}  }
class C{  @Nullable public static Throwable assertThrowsWithCause(Callable<?> call,Class<? extends Throwable> cls){  assert call != null;  assert cls != null;  try {    call.call();  } catch (  Throwable e) {    if (!X.hasCause(e,cls))     fail("Exception is neither of a specified class, nor has a cause of the specified class: " + cls,e);    return e;  }  throw new AssertionError("Exception has not been thrown.");}  }
class C{  public void flush() throws IOException {  if (output != null) {    refreshBuffer();  }}  }
class C{  public void addStrokeAlpha(float a){  addCommand(new PDFStrokeAlphaCmd(a));}  }
class C{  public boolean isEMailValid(){  if (m_bpc == null || !WebUtil.exists(getEmail())) {    log.fine(getEmail() + ", bpc=" + m_bpc);    return false;  }  boolean ok=m_bpc.getAD_User_ID() != 0 && m_bpc.isEMailValid();  if (!ok)   log.fine(getEmail() + ", ID=" + m_bpc.getAD_User_ID()+ ", Online="+ m_bpc.isOnline()+ ", EMailValid="+ m_bpc.isEMailValid());  return ok;}  }
class C{  public boolean isSaved(){  return m_saved;}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  StackPane stateView=new StackPane();  stateViewCtrl=new BinaryCspViewCtrl(stateView);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(stateView);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  return root;}  }
class C{  public GZIPOutputStream(OutputStream out,int size,boolean syncFlush) throws IOException {  super(out,new Deflater(Deflater.DEFAULT_COMPRESSION,true),size,syncFlush);  usesDefaultDeflater=true;  writeHeader();  crc.reset();}  }
class C{  public Field phraseLimit(Integer phraseLimit){  this.phraseLimit=phraseLimit;  return this;}  }
class C{  private static Iterator<Operand> iterateReturnValues(IR ir){  ArrayList<Operand> returnValues=new ArrayList<Operand>();  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (Return.conforms(s)) {      returnValues.add(Return.getVal(s));    }  }  return returnValues.iterator();}  }
class C{  public static double quadTreeCellWidth(int level){  assert level >= 0;  return EARTH_EQUATOR / (1L << level);}  }
class C{  public PatternSyntaxException(String desc,String regex,int index){  this.desc=desc;  this.pattern=regex;  this.index=index;}  }
class C{  public boolean spatiallyConsideringTrip(Trip trip){  Link sLink=network.getLinks().get(trip.startLinkId);  Link eLink=network.getLinks().get(trip.endLinkId);  return (spatialCutter.spatiallyConsideringLink(sLink) || (eLink != null && spatialCutter.spatiallyConsideringLink(eLink)));}  }
class C{  public File dumpSolr(){  EmbeddedInstance esc=this.solrInstances.getEmbedded();  File storagePath=esc.getContainerPath();  File zipOut=new File(this.archivePath,storagePath.getName() + "_" + GenericFormatter.SHORT_DAY_FORMATTER.format()+ ".zip");synchronized (this.solrInstances) {    this.disconnectLocalSolr();    try {      ZIPWriter.zip(storagePath,zipOut);    } catch (    final IOException e) {      ConcurrentLog.logException(e);    } finally {      try {        this.connectLocalSolr();      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }  }  return zipOut;}  }
class C{  private boolean isMouseInListArea(MouseEvent e){  if (isMouseEventInside(e)) {    Point local=toLocalCoords(e);    Rectangle bounds=getBounds();    if (!helper.isInVertSB(bounds,local.x,local.y)) {      return true;    }  }  return false;}  }
class C{  protected MySQLConnection checkClosed() throws SQLException {  MySQLConnection c=this.connection;  if (c == null) {    throw SQLError.createSQLException(Messages.getString("Statement.49"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }  return c;}  }
class C{  public static String toArrayArgument(final Iterable<?> iterable){  return Strings.join(";",iterable);}  }
class C{  public InlineTag createInlineTag(){  InlineTagImpl inlineTag=new InlineTagImpl();  return inlineTag;}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.950 -0500",hash_original_method="889447B8D00C814B8B32F8DD32D6D4FC",hash_generated_method="589C283F725F652F72E613A84FD494F5") public RectF[] newArray(int size){  return new RectF[size];}  }
class C{  public void connectContainerToNetwork(String netId,String containerId) throws IOException {  connectContainerToNetwork(ConnectContainerToNetworkParams.create(netId,new ConnectContainer().withContainer(containerId)));}  }
class C{  public void loadFromOsm(OSM osm){  loadFromOsm(osm,true,false);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,aggregationKeysTipText(),getDefaultAggregationKeys(),"key");  OptionUtils.addOption(result,suffixCountTipText(),getDefaultSuffixCount(),"suffix-count");  OptionUtils.addOption(result,suffixMeanTipText(),getDefaultSuffixMean(),"suffix-mean");  OptionUtils.addOption(result,suffixStdDevTipText(),getDefaultSuffixStdDev(),"suffix-stddev");  OptionUtils.addOption(result,skipCountTipText(),"no","skip-count");  OptionUtils.addOption(result,skipMeanTipText(),"no","skip-mean");  OptionUtils.addOption(result,skipStdDevTipText(),"no","skip-stddev");  return OptionUtils.toEnumeration(result);}  }
class C{  private void createSensors(){  Filter defaultFilter=getDefaultFilter();  int receptiveFieldWidth=getReceptiveFieldWidth();  int receptiveFieldHeight=getReceptiveFieldHeight();  for (int row=0, rows=rows(); row < rows; row++) {    for (int column=0, columns=columns(); column < columns; column++) {      int x=column * receptiveFieldWidth;      int y=row * receptiveFieldHeight;      ReceptiveField receptiveField=new ReceptiveField(x,y,receptiveFieldWidth,receptiveFieldHeight);      Sensor sensor;      if (defaultFilter == null) {        sensor=new Sensor(row,column,receptiveField);      } else {        sensor=new Sensor(row,column,defaultFilter,receptiveField);      }      sensors[row][column]=sensor;    }  }}  }
class C{  public boolean containsValue(Attribute attribute){  return attribute != null && attribute instanceof Attribute && attribute.equals(attrMap.get(((Attribute)attribute).getCategory()));}  }
class C{  public int connectSync(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("halfConnectSync srcHandler to the dstMessenger  E");  connected(srcContext,srcHandler,dstMessenger);  if (DBG)   log("halfConnectSync srcHandler to the dstMessenger X");  return STATUS_SUCCESSFUL;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.128 -0400",hash_original_method="9F0B27264067DF5350DE54F3922D4027",hash_generated_method="F04D7AA849D0E59A9532D46F4BB3E64C") protected void engineUpdate(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (len <= 0) {    return;  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset > input.length || len > input.length || (len + offset) > input.length) {    throw new IllegalArgumentException();  }  SHA1Impl.updateHash(buffer,input,offset,offset + len - 1);  messageLength+=len;}  }
class C{  public static boolean isEmirp(int num){  return PrimeNumberMethod.isPrime(num) && !Exercise_06_03.isPalindrome(num) && PrimeNumberMethod.isPrime(Exercise_06_03.reverse(num));}  }
class C{  @Override public void shutdown(boolean awaitTermination){  super.shutdown(awaitTermination);  boolean added=false;  boolean interrupted=false;  try {    do {      try {        queue.put(new DynamoDBEntryWithSize(null,-1));        added=true;      } catch (      InterruptedException e) {        interrupted=true;        continue;      }    } while (!added);  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public void addChild(Node<T> child){  if (children == null) {    children=new ArrayList<>();  }  child.parent=this;  children.add(child);}  }
class C{  public Composer coefficientRestitutionY(float coefficientRestitutionY){  mCoefficientRestitutionY=coefficientRestitutionY;  return this;}  }
class C{  public static ValidationException convertToApi(org.oscm.internal.types.exception.ValidationException oldEx){  org.oscm.internal.types.exception.beans.ValidationExceptionBean bean=(org.oscm.internal.types.exception.beans.ValidationExceptionBean)getFaultInfo(oldEx);  ValidationExceptionBean v13Bean=convertBeanToApi(bean,ValidationExceptionBean.class);  if (bean != null) {    ValidationException.ReasonEnum v13Reason=EnumConverter.convert(bean.getReason(),ValidationException.ReasonEnum.class);    v13Bean.setReason(v13Reason);    v13Bean.setMember(bean.getMember());  }  return newApiException(ValidationException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new UniformGenerator();}  }
class C{  public static DefinitionsSpec convertSpec(DefinitionsSpec definitionsSpec){  for (  EntitySpec entitySpec : definitionsSpec.getEntitySpecs()) {    for (    NodeSpec nodeSpec : entitySpec.getNodeSpecs()) {      if (nodeSpec.getJavaType() != JavaType.LONG) {        continue;      }      if (nodeSpec.getJdbcType() != JdbcType.TIMESTAMP) {        continue;      }      nodeSpec.setJdbcType(JdbcType.VARCHAR);      nodeSpec.setLength(50);      nodeSpec.setTypeConverter(LongToStringTimestampConverter.class.getName());    }  }  return definitionsSpec;}  }
class C{  public boolean removeLaunchConfiguration(LaunchConfiguration lc){  boolean wasRemoved=false;synchronized (privateInstanceLock) {    wasRemoved=launchConfigurations.remove(lc);  }  if (wasRemoved) {    DevModeServiceClientManager.getInstance().removeClient(lc);    WebAppDebugModelEvent<LaunchConfiguration> removedEvent=new WebAppDebugModelEvent<LaunchConfiguration>(lc);    fireLaunchConfigurationRemoved(removedEvent);  }  return wasRemoved;}  }
class C{  ModeUsage(Mode mode,Mode currentMode){  this(mode,currentMode,null);}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  for (  NameValuePair pair : nameValuePairList) {    buf.append(' ');    buf.append(pair.getName());    buf.append('=');    buf.append('"');    buf.append(getQuotedAttributeValue(pair.getValue()));    buf.append('"');  }  return buf.toString();}  }
class C{  public void add(Properties props){  Enumeration<?> keys=props.propertyNames();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    String value=props.getProperty(key).toString();    if (properties.get(key) != null) {      if (logger.isDebugEnabled()) {        logger.debug(String.format("Replacing %s=%s with %s=%s",key,properties.get(key),key,value));      }    }    properties.put(key,value);  }}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public NotificationChain basicSetFunction(Expression newFunction,NotificationChain msgs){  Expression oldFunction=function;  function=newFunction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.BLOCK__FUNCTION,oldFunction,newFunction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof BigInteger|| object instanceof BigDecimal) {      return object;    }    if (object instanceof Collection) {      Collection<?> coll=(Collection<?>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      Map<?,?> map=(Map<?,?>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_TEMPLATE:    return visitInstruction(elem);default :  return true;}}  }
class C{  public JaspellTernarySearchTrie(){  this(Locale.ROOT);}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp,int length){  int x1=0;  int x2=length;  int i=x2 / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public CodeInjection_ createCodeInjection_(){  CodeInjection_Impl codeInjection_=new CodeInjection_Impl();  return codeInjection_;}  }
class C{  public EmBayesEstimatorEditor(EmBayesEstimatorWrapper emBayesEstWrapper){  this(emBayesEstWrapper.getEstimateBayesIm(),emBayesEstWrapper.getDataSet());}  }
class C{  public static void paintMenuItem(Graphics g,JComponent c,Icon checkIcon,Icon arrowIcon,Color background,Color foreground,int defaultTextIconGap){  JMenuItem b=(JMenuItem)c;  ButtonModel model=b.getModel();  Dimension size=b.getSize();  Insets i=c.getInsets();  Rectangle viewRect=new Rectangle(size);  viewRect.x+=i.left;  viewRect.y+=i.top;  viewRect.width-=(i.right + viewRect.x);  viewRect.height-=(i.bottom + viewRect.y);  Rectangle iconRect=new Rectangle();  Rectangle textRect=new Rectangle();  Rectangle acceleratorRect=new Rectangle();  Rectangle checkRect=new Rectangle();  Rectangle arrowRect=new Rectangle();  Font holdf=g.getFont();  Font f=c.getFont();  g.setFont(f);  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g,f);  FontMetrics fmAccel=SwingUtilities2.getFontMetrics(c,g,UIManager.getFont("MenuItem.acceleratorFont"));  if (c.isOpaque()) {    if (model.isArmed() || (c instanceof JMenu && model.isSelected())) {      g.setColor(background);    } else {      g.setColor(c.getBackground());    }    g.fillRect(0,0,size.width,size.height);  }  KeyStroke accelerator=b.getAccelerator();  String acceleratorText="";  if (accelerator != null) {    int modifiers=accelerator.getModifiers();    if (modifiers > 0) {      acceleratorText=KeyEvent.getKeyModifiersText(modifiers);      acceleratorText+="+";    }    acceleratorText+=KeyEvent.getKeyText(accelerator.getKeyCode());  }  String text=layoutMenuItem(c,fm,b.getText(),fmAccel,acceleratorText,b.getIcon(),checkIcon,arrowIcon,b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),viewRect,iconRect,textRect,acceleratorRect,checkRect,arrowRect,b.getText() == null ? 0 : defaultTextIconGap,defaultTextIconGap);  Color holdc=g.getColor();  if (checkIcon != null) {    if (model.isArmed() || (c instanceof JMenu && model.isSelected()))     g.setColor(foreground);    checkIcon.paintIcon(c,g,checkRect.x,checkRect.y);    g.setColor(holdc);  }  if (b.getIcon() != null) {    Icon icon;    if (!model.isEnabled()) {      icon=b.getDisabledIcon();    } else     if (model.isPressed() && model.isArmed()) {      icon=b.getPressedIcon();      if (icon == null) {        icon=b.getIcon();      }    } else {      icon=b.getIcon();    }    if (icon != null) {      icon.paintIcon(c,g,iconRect.x,iconRect.y);    }  }  if (text != null && !text.equals("")) {    View v=(View)c.getClientProperty("html");    if (v != null) {      v.paint(g,textRect);    } else {      int mnemIndex=b.getDisplayedMnemonicIndex();      if (!model.isEnabled()) {        g.setColor(b.getBackground().brighter());        SwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,textRect.x,textRect.y + fmAccel.getAscent());        g.setColor(b.getBackground().darker());        SwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,textRect.x - 1,textRect.y + fmAccel.getAscent() - 1);      } else {        if (model.isArmed() || (c instanceof JMenu && model.isSelected())) {          g.setColor(foreground);        } else {          g.setColor(b.getForeground());        }        SwingUtilities2.drawStringUnderlineCharAt(b,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());      }    }  }  if (acceleratorText != null && !acceleratorText.equals("")) {    int accOffset=0;    Container parent=b.getParent();    if (parent != null && parent instanceof JComponent) {      JComponent p=(JComponent)parent;      Integer maxValueInt=(Integer)p.getClientProperty(MotifGraphicsUtils.MAX_ACC_WIDTH);      int maxValue=maxValueInt != null ? maxValueInt.intValue() : acceleratorRect.width;      accOffset=maxValue - acceleratorRect.width;    }    g.setFont(UIManager.getFont("MenuItem.acceleratorFont"));    if (!model.isEnabled()) {      g.setColor(b.getBackground().brighter());      SwingUtilities2.drawString(c,g,acceleratorText,acceleratorRect.x - accOffset,acceleratorRect.y + fm.getAscent());      g.setColor(b.getBackground().darker());      SwingUtilities2.drawString(c,g,acceleratorText,acceleratorRect.x - accOffset - 1,acceleratorRect.y + fm.getAscent() - 1);    } else {      if (model.isArmed() || (c instanceof JMenu && model.isSelected())) {        g.setColor(foreground);      } else {        g.setColor(b.getForeground());      }      SwingUtilities2.drawString(c,g,acceleratorText,acceleratorRect.x - accOffset,acceleratorRect.y + fmAccel.getAscent());    }  }  if (arrowIcon != null) {    if (model.isArmed() || (c instanceof JMenu && model.isSelected()))     g.setColor(foreground);    if (!(b.getParent() instanceof JMenuBar))     arrowIcon.paintIcon(c,g,arrowRect.x,arrowRect.y);  }  g.setColor(holdc);  g.setFont(holdf);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return super.validate(mapping,request);}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public byte[] receive() throws IOException {  if (connection != null) {    packet.setLength(DatagramConnection.DEFAULT_DATAGRAM_SIZE);    connection.receive(packet);    int packetLength=packet.getLength();    byte[] data=new byte[packetLength];    System.arraycopy(packet.getData(),0,data,0,packetLength);    return data;  } else {    throw new IOException("Connection not openned");  }}  }
class C{  public static void writeConfigFile(String fileName,Class<?>[] classes) throws SQLException, IOException {  File rawDir=findRawDir(new File("."));  if (rawDir == null) {    System.err.println("Could not find " + RAW_DIR_NAME + " directory which is typically in the "+ RESOURCE_DIR_NAME+ " directory");  } else {    File configFile=new File(rawDir,fileName);    writeConfigFile(configFile,classes);  }}  }
class C{  public RepositoryLocation(String repositoryName,String[] pathComponents) throws MalformedRepositoryLocationException {  if (repositoryName == null || repositoryName.isEmpty()) {    throw new MalformedRepositoryLocationException("repositoryName must not contain null or empty!");  }  if (pathComponents == null) {    throw new MalformedRepositoryLocationException("pathComponents must not be null!");  }  for (  String pathComp : pathComponents) {    if (pathComp == null || pathComp.isEmpty()) {      throw new MalformedRepositoryLocationException("path must not contain null or empty strings!");    }  }  this.repositoryName=repositoryName;  this.path=pathComponents;}  }
class C{  public MemcacheClientBuilder<V> withSRVShutdownDelay(final long shutdownDelay){  this.shutdownDelay=shutdownDelay;  return this;}  }
class C{  public MultiPercolateRequest add(byte[] data,int from,int length) throws Exception {  return add(new BytesArray(data,from,length),true);}  }
class C{  public String toString(){  String temp="Variable: \"" + getName() + "\"";  return temp;}  }
class C{  @Override public void initialize(AbstractSession session) throws DescriptorException {  AbstractSession referenceSession=session;  if (session.hasBroker()) {    if (getReferenceClass() == null) {      throw DescriptorException.referenceClassNotSpecified(this);    }    referenceSession=session.getSessionForClass(getReferenceClass());  }  super.initialize(session);  ClassDescriptor clonedDescriptor=(ClassDescriptor)getReferenceDescriptor().clone();  List<AttributeAccessor> accessorTree=getDescriptor().getAccessorTree();  if (accessorTree == null) {    accessorTree=new ArrayList();  } else {    accessorTree=new ArrayList<AttributeAccessor>(accessorTree);  }  accessorTree.add(getAttributeAccessor());  clonedDescriptor.setAccessorTree(accessorTree);  if (isMapKeyMapping() && clonedDescriptor.isAggregateDescriptor()) {    clonedDescriptor.descriptorIsAggregateCollection();  }  if (clonedDescriptor.isChildDescriptor()) {    ClassDescriptor parentDescriptor=session.getDescriptor(clonedDescriptor.getInheritancePolicy().getParentClass());    initializeParentInheritance(parentDescriptor,clonedDescriptor,session);  }  setReferenceDescriptor(clonedDescriptor);  for (  ManyToManyMapping overrideMapping : overrideManyToManyMappings) {    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());    if (mapping.isManyToManyMapping()) {      ManyToManyMapping mappingClone=(ManyToManyMapping)mapping;      mappingClone.setRelationTable(overrideMapping.getRelationTable());      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());      mappingClone.setSourceRelationKeyFields(overrideMapping.getSourceRelationKeyFields());      mappingClone.setTargetKeyFields(overrideMapping.getTargetKeyFields());      mappingClone.setTargetRelationKeyFields(overrideMapping.getTargetRelationKeyFields());    }  }  for (  UnidirectionalOneToManyMapping overrideMapping : overrideUnidirectionalOneToManyMappings) {    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(overrideMapping.getAttributeName());    if (mapping.isUnidirectionalOneToManyMapping()) {      UnidirectionalOneToManyMapping mappingClone=(UnidirectionalOneToManyMapping)mapping;      mappingClone.setSourceKeyFields(overrideMapping.getSourceKeyFields());      mappingClone.setTargetForeignKeyFields(overrideMapping.getTargetForeignKeyFields());    }  }  for (  DatabaseMapping mapsIdMapping : mapsIdMappings) {    DatabaseMapping mapping=clonedDescriptor.getMappingForAttributeName(mapsIdMapping.getAttributeName());    if (mapping != null) {      mapping.setIsReadOnly(true);    }  }  if (isNullAllowed) {    if (getReferenceDescriptor().hasTargetForeignKeyMapping(session)) {      isNullAllowed=false;      session.log(SessionLog.WARNING,SessionLog.METADATA,"metadata_warning_ignore_is_null_allowed",new Object[]{this});    }  }  initializeReferenceDescriptor(clonedDescriptor,referenceSession);  translateNestedFields(clonedDescriptor,referenceSession);  clonedDescriptor.preInitialize(referenceSession);  clonedDescriptor.initialize(referenceSession);  for (  String attributeName : converters.keySet()) {    String attr=attributeName;    ClassDescriptor desc=clonedDescriptor;    while (attr.contains(".")) {      desc=desc.getMappingForAttributeName(attr.substring(0,attr.indexOf("."))).getReferenceDescriptor();      attr=attr.substring(attr.indexOf(".") + 1);    }    DatabaseMapping mapping=desc.getMappingForAttributeName(attr);    if (mapping != null) {      converters.get(attributeName).initialize(mapping,session);    }  }  translateFields(clonedDescriptor,referenceSession);  if (clonedDescriptor.hasInheritance() && clonedDescriptor.getInheritancePolicy().hasChildren()) {    initializeChildInheritance(clonedDescriptor,referenceSession);  }  setFields(collectFields());  if (clonedDescriptor.hasPreDeleteMappings()) {    getDescriptor().addPreDeleteMapping(this);  }}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getFastaFileNameTemplate());  List<String> command=new ArrayList<String>();  command.add(this.getFullPathToPsScanPerlScript());  command.add("-d");  command.add(this.getModelFile());  command.add("--pfscan");  command.add(this.getFullPathToPfscanBinary());  if (this.getFullPathToConfirmatoryProfiles() != null && this.getFullPathToConfirmatoryProfiles().length() > 0) {    command.add("-b");    command.add(this.getFullPathToConfirmatoryProfiles());  }  command.addAll(this.getBinarySwitchesAsList());  command.add(fastaFilePathName);  Utilities.verboseLog("command: " + command);  return command;}  }
class C{  public boolean hasExportFormats(){  return hasRepeatingExtension(ExportFormat.class);}  }
class C{  public Aggregate(IoBuffer data,boolean copy){  super(Type.STREAM_DATA);  if (copy) {    byte[] array=new byte[data.limit()];    data.mark();    data.get(array);    data.reset();    setData(array);  } else {    setData(data);  }}  }
class C{  public AbstractLocalContainerStub(LocalConfiguration configuration){  setConfiguration(configuration);}  }
class C{  @Transactional public StepExecution insert(StepExecution newInstance){synchronized (lockObject) {    return super.insert(newInstance);  }}  }
class C{  public OverlayChangeEvent(Object source){  super(source);}  }
class C{  public static void writeln(char[] ca,int len,boolean flush){  write(ca,len);  writelnWithFlush(flush);}  }
class C{  public Object attribLazyConstantValue(Env<AttrContext> env,JCVariableDecl variable,Type type){  DiagnosticPosition prevLintPos=deferredLintHandler.setPos(variable.pos());  try {    memberEnter.typeAnnotate(variable.init,env,null,variable.pos());    annotate.flush();    Type itype=attribExpr(variable.init,env,type);    if (itype.constValue() != null) {      return coerce(itype,type).constValue();    } else {      return null;    }  }  finally {    deferredLintHandler.setPos(prevLintPos);  }}  }
class C{  public JSONArray(Collection<?> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    for (    Object o : collection) {      this.myArrayList.add(JSONObject.wrap(o));    }  }}  }
class C{  public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void selectionSort(){}  }
class C{  public static boolean doPutOrCreate(LocalRegion rgn,EntryEventImpl ev,long lastMod){  try {    boolean updated=false;    boolean doUpdate=true;    if (shouldDoRemoteCreate(rgn,ev)) {      if (logger.isDebugEnabled()) {        logger.debug("doPutOrCreate: attempting to create entry");      }      final long startPut=CachePerfStats.getStatTime();      final boolean isBucket=rgn.isUsedForPartitionedRegionBucket();      if (isBucket) {        BucketRegion br=(BucketRegion)rgn;        br.getPartitionedRegion().getPrStats().startApplyReplication();      }      try {        boolean overwriteDestroyed=ev.getOperation().isCreate();        if (rgn.basicUpdate(ev,true,false,lastMod,overwriteDestroyed)) {          rgn.getCachePerfStats().endPut(startPut,ev.isOriginRemote());          doUpdate=false;          updated=true;        } else {          if (ev.oldValueIsDestroyedToken()) {            if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {              rgn.getVersionVector().recordVersion((InternalDistributedMember)ev.getDistributedMember(),ev.getVersionTag());            }            doUpdate=false;          }        }      }  finally {        if (isBucket) {          BucketRegion br=(BucketRegion)rgn;          br.getPartitionedRegion().getPrStats().endApplyReplication(startPut);        }      }    }    if (doUpdate) {      if (!ev.isLocalInvalid()) {        final long startPut=CachePerfStats.getStatTime();        boolean overwriteDestroyed=ev.getOperation().isCreate();        final boolean isBucket=rgn.isUsedForPartitionedRegionBucket();        if (isBucket) {          BucketRegion br=(BucketRegion)rgn;          br.getPartitionedRegion().getPrStats().startApplyReplication();        }        try {          if (rgn.basicUpdate(ev,false,true,lastMod,overwriteDestroyed)) {            rgn.getCachePerfStats().endPut(startPut,ev.isOriginRemote());            if (logger.isTraceEnabled()) {              logger.trace("Processing put key {} in region {}",ev.getKey(),rgn.getFullPath());            }            updated=true;          } else {            if (rgn.isUsedForPartitionedRegionBucket() || (rgn.dataPolicy.withReplication() && rgn.getConcurrencyChecksEnabled())) {              overwriteDestroyed=true;              ev.makeCreate();              rgn.basicUpdate(ev,true,false,lastMod,overwriteDestroyed);              rgn.getCachePerfStats().endPut(startPut,ev.isOriginRemote());              updated=true;            } else {              if (rgn.getVersionVector() != null && ev.getVersionTag() != null) {                rgn.getVersionVector().recordVersion((InternalDistributedMember)ev.getDistributedMember(),ev.getVersionTag());              }              if (logger.isDebugEnabled()) {                logger.debug("While processing Update message, update not performed because this key is {}",(ev.oldValueIsDestroyedToken() ? "blocked by DESTROYED/TOMBSTONE token" : "not defined"));              }            }          }        }  finally {          if (isBucket) {            BucketRegion br=(BucketRegion)rgn;            br.getPartitionedRegion().getPrStats().endApplyReplication(startPut);          }        }      } else {        if (logger.isTraceEnabled()) {          logger.trace("Processing create with null value provided, value not put");        }      }    } else {      if (rgn.getVersionVector() != null && ev.getVersionTag() != null && !ev.getVersionTag().isRecorded()) {        rgn.getVersionVector().recordVersion((InternalDistributedMember)ev.getDistributedMember(),ev.getVersionTag());      }      if (!updated) {        if (logger.isDebugEnabled()) {          logger.debug("While processing Update message, update not performed because key was created but mirroring keys only and value not in update message, OR key was not new for sender and has been destroyed here");        }      }    }    return true;  } catch (  CacheWriterException e) {    throw new Error(LocalizedStrings.AbstractUpdateOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(),e);  }catch (  TimeoutException e) {    throw new Error(LocalizedStrings.AbstractUpdateOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED.toLocalizedString(),e);  }}  }
class C{  public void endVisit(ArrayCreation node){}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Object clone(){  return (new CompositeName(getAll()));}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.PowerManager.class)) {    return (null != powerManager);  }  if (type.equals(jmri.SensorManager.class)) {    return (null != sensorManager);  }  if (type.equals(jmri.TurnoutManager.class)) {    return (null != turnoutManager);  }  if (type.equals(jmri.LightManager.class)) {    return (null != lightManager);  }  if (type.equals(jmri.ReporterManager.class)) {    return (null != reporterManager);  }  return false;}  }
class C{  public void initOptions(){  String proxy=ConnectionSettings.PROXY_HOST.getValue();  int proxyPort=ConnectionSettings.PROXY_PORT.getValue();  int connectionMethod=ConnectionSettings.CONNECTION_METHOD.getValue();  PROXY_PORT_FIELD.setValue(proxyPort);  NO_PROXY_BUTTON.setSelected(connectionMethod == ConnectionSettings.C_NO_PROXY);  SOCKS4_PROXY_BUTTON.setSelected(connectionMethod == ConnectionSettings.C_SOCKS4_PROXY);  SOCKS5_PROXY_BUTTON.setSelected(connectionMethod == ConnectionSettings.C_SOCKS5_PROXY);  HTTP_PROXY_BUTTON.setSelected(connectionMethod == ConnectionSettings.C_HTTP_PROXY);  PROXY_HOST_FIELD.setText(proxy);  updateState();}  }
class C{  public static TStream<JsonObject> waterDetector(Topology topology,int wellId){  Random rNum=new Random();  TStream<Integer> temp=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> acidity=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> ecoli=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> lead=topology.poll(null,1,TimeUnit.SECONDS);  TStream<Integer> id=topology.poll(null,1,TimeUnit.SECONDS);  temp.tag("temperature","well" + wellId);  acidity.tag("acidity","well" + wellId);  ecoli.tag("ecoli","well" + wellId);  lead.tag("lead","well" + wellId);  id.tag("well" + wellId);  TStream<JsonObject> tempObj=temp.map(null);  TStream<JsonObject> acidityObj=acidity.map(null);  TStream<JsonObject> ecoliObj=ecoli.map(null);  TStream<JsonObject> leadObj=lead.map(null);  TStream<JsonObject> idObj=id.map(null);  HashSet<TStream<JsonObject>> set=new HashSet<TStream<JsonObject>>();  set.add(acidityObj);  set.add(acidityObj);  set.add(ecoliObj);  set.add(leadObj);  set.add(idObj);  TStream<JsonObject> allReadings=tempObj.union(set);  return allReadings;}  }
class C{  public void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_system=MSystem.get(getCtx());}  }
class C{  public void read(final IProgressMonitor monitor) throws IOException, BadLocationException {  BufferedReader reader=null;  try {    final long numberOfLines=getLineNumbers();    monitor.beginTask("Opening logfile " + logFile.getCanonicalPath(),(int)numberOfLines);    reader=new BufferedReader(new FileReader(logFile));    for (int lineNum=0; lineNum < numberOfLines; lineNum++) {      if (monitor.isCanceled()) {        this.parser.clear();        return;      }      if (lineNum % 1000 == 0) {        monitor.worked(1000);      }      this.parser.addLine(reader.readLine().concat("\n"));    }    this.parser.done();    monitor.worked(1);  } catch (  BadLocationException e) {    TLCUIActivator.getDefault().logError("Error positioning in the TLC log file",e);    throw e;  }catch (  FileNotFoundException e) {    TLCUIActivator.getDefault().logError("Error accessing the TLC log file contents",e);    throw e;  }catch (  IOException e) {    TLCUIActivator.getDefault().logError("Error reading the TLC log file contents",e);    throw e;  } finally {    monitor.done();    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        TLCUIActivator.getDefault().logError("Error closing the TLC log file contents",e);      }    }  }}  }
class C{  public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){    private static final long serialVersionUID=-4162240450945637121L;{      put(key,value);    }  });}  }
class C{  public final void sub(GMatrix m1,GMatrix m2){  int i, j;  if (m2.nRow != m1.nRow) {    throw new MatrixSizeException();  }  if (m2.nCol != m1.nCol) {    throw new MatrixSizeException();  }  if (nRow != m1.nRow || nCol != m1.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=m1.values[i][j] - m2.values[i][j];    }  }}  }
class C{  private void groovyExpression(Reader reader,StringWriter sw) throws IOException {  sw.write("${");  int c;  while ((c=reader.read()) != -1) {    if (c == '%') {      c=reader.read();      if (c != '>') {        sw.write('%');      } else {        break;      }    }    if (c != '\n' && c != '\r') {      sw.write(c);    }  }  sw.write("}");}  }
class C{  public static JSON from(Object object) throws IOException {  Assert.notNull("object",object);  try {    return from(mapper.writeValueAsString(object));  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public OkHttp3Downloader(File cacheDir,long maxSize){  this(createOkHttpClient(cacheDir,maxSize));}  }
class C{  private void readMoreChars() throws IOException {  if (availableCapacity(charBuffer) == 0) {    if (charBuffer.position() > 0) {      charBuffer.compact().flip();    } else {      charBuffer=grow(charBuffer);    }  }  int limit=charBuffer.limit();  int numChars=reader.read(charBuffer.array(),limit,availableCapacity(charBuffer));  if (numChars == -1) {    endOfInput=true;  } else {    charBuffer.limit(limit + numChars);  }}  }
class C{  public void test_simple() throws Exception {  setMethodisPostUrlEncodedData();  BigdataSailRemoteRepositoryConnection conn=m_repo.getBigdataSailRemoteRepository().getConnection();  conn.prepareUpdate(QueryLanguage.SPARQL,"INSERT { <http://s1> <http://p> \"Test123\" } WHERE { }").execute();  checkResults(conn,1);  conn.prepareUpdate(QueryLanguage.SPARQL,"INSERT { <http://s2> <http://p> \"Test234\"^^xsd:string } WHERE { }").execute();  checkResults(conn,2);  conn.prepareUpdate(QueryLanguage.SPARQL,"INSERT { <http://s3> <http://p> \"Test345\" } WHERE { }").execute();  checkResults(conn,3);  m_repo.getRemoteRepositoryManager().rebuildTextIndex(namespace,true);  checkResults(conn,3);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public boolean isIdentifier(){  Object oo=get_Value(COLUMNNAME_IsIdentifier);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AlgIdDSA(BigInteger p,BigInteger q,BigInteger g){  super(DSA_oid);  if (p != null || q != null || g != null) {    if (p == null || q == null || g == null)     throw new ProviderException("Invalid parameters for DSS/DSA" + " Algorithm ID");    try {      this.p=p;      this.q=q;      this.g=g;      initializeParams();    } catch (    IOException e) {      throw new ProviderException("Construct DSS/DSA Algorithm ID");    }  }}  }
class C{  public Matrix3 inv(){  float det=det();  if (det == 0)   throw new GdxRuntimeException("Can't invert a singular matrix");  float inv_det=1.0f / det;  tmp[0]=val[4] * val[8] - val[5] * val[7];  tmp[1]=val[2] * val[7] - val[1] * val[8];  tmp[2]=val[1] * val[5] - val[2] * val[4];  tmp[3]=val[5] * val[6] - val[3] * val[8];  tmp[4]=val[0] * val[8] - val[2] * val[6];  tmp[5]=val[2] * val[3] - val[0] * val[5];  tmp[6]=val[3] * val[7] - val[4] * val[6];  tmp[7]=val[1] * val[6] - val[0] * val[7];  tmp[8]=val[0] * val[4] - val[1] * val[3];  val[0]=inv_det * tmp[0];  val[1]=inv_det * tmp[1];  val[2]=inv_det * tmp[2];  val[3]=inv_det * tmp[3];  val[4]=inv_det * tmp[4];  val[5]=inv_det * tmp[5];  val[6]=inv_det * tmp[6];  val[7]=inv_det * tmp[7];  val[8]=inv_det * tmp[8];  return this;}  }
class C{  public static int findPerceptuallyNearestSolidColor(int rgb){  return findPerceptuallyNearestColor(rgb,SOLID_COLORS);}  }
class C{  public void paintTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBorder(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBorder(context,g,0,0,w,h,transform);  }}  }
class C{  public static boolean isUrlLocalFile(URL url){  return url.getProtocol().equals("file");}  }
class C{  public static Integer[] toObject(final int[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;  }  final Integer[] result=new Integer[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Integer(array[i]);  }  return result;}  }
class C{  protected void notifyCreateProcess(List<String> commands,File projectDir){synchronized (listeners) {    for (    INodejsProcessListener listener : listeners) {      listener.onCreate(this,commands,projectDir);    }  }}  }
class C{  public RoundedColorDrawable(float[] radii,int color){  this(color);  setRadii(radii);}  }
class C{  public void mouseReleased(MouseEvent event){}  }
class C{  public static BufferedImage paletteSwapARGB8(Color[] colorSet,Color clearToColorRequested,BufferedImage argbMappedBufferedImage){  if (argbMappedBufferedImage == null) {    return null;  }  final Color BLACK_NO_ALPHA=new Color(0x00000000);  final Color WHITE_NO_ALPHA=new Color(0x00FFFFFF);  final int ALPHA=3;  final int RED=0;  final int GREEN=1;  final int BLUE=2;  final int[] orderedBands={ALPHA,RED,GREEN,BLUE};  Color[] cMap={BLACK_NO_ALPHA,BLACK_NO_ALPHA,BLACK_NO_ALPHA,BLACK_NO_ALPHA};  boolean clearColorFound=false;  Color clearToColor=BLACK_NO_ALPHA;  if (colorSet != null) {    if (colorSet.length > cMap.length) {      for (int i=0; i < cMap.length; i++) {        if (colorSet[i] != null) {          if (!clearColorFound) {            clearColorFound=true;            clearToColor=colorSet[i];          }          cMap[orderedBands[i]]=colorSet[i];        }      }    } else {      int startOffset=0;      if (colorSet.length < 4) {        startOffset++;      }      for (int i=0; i < colorSet.length; i++) {        if (colorSet[i] != null) {          if (!clearColorFound) {            clearColorFound=true;            clearToColor=colorSet[i];          }          cMap[orderedBands[i + startOffset]]=colorSet[i];        }      }    }  }  if (clearToColorRequested != null) {    clearToColor=clearToColorRequested;  }  WritableRaster outRaster, inRaster;  int w=argbMappedBufferedImage.getWidth();  int h=argbMappedBufferedImage.getHeight();  BandedSampleModel inSM=new BandedSampleModel(DataBuffer.TYPE_FLOAT,w,h,4);  DataBufferFloat inDBF=new DataBufferFloat((w * h),4);  inRaster=Raster.createWritableRaster(inSM,inDBF,null);  outRaster=inRaster.createCompatibleWritableRaster(w,h);  float[] cMaptoFlArray, outColortoFlArray, clearColortoFlArray;  float inBandAsAlpha;  Color paletteColor;  outColortoFlArray=new float[]{0f,0f,0f,0f};  clearColortoFlArray=clearToColor.getRGBComponents(new float[4]);  clearColortoFlArray[ALPHA]=0f;  for (int y=0; y < h; y++) {    for (int x=0; x < w; x++) {      int packedPixel=argbMappedBufferedImage.getRGB(x,y);      int testing;      float ftesting;      testing=packedPixel;      testing=testing >> 24;      testing=testing & 0xFF;      ftesting=testing;      ftesting=ftesting / 255;      outColortoFlArray[ALPHA]=ftesting;      testing=packedPixel;      testing=testing >> 16;      testing=testing & 0xFF;      ftesting=testing;      ftesting=ftesting / 255;      outColortoFlArray[RED]=ftesting;      testing=packedPixel;      testing=testing >> 8;      testing=testing & 0xFF;      ftesting=testing;      ftesting=ftesting / 255;      outColortoFlArray[GREEN]=ftesting;      testing=packedPixel;      testing=testing & 0xFF;      ftesting=testing;      ftesting=ftesting / 255;      outColortoFlArray[BLUE]=ftesting;      inRaster.setPixel(x,y,outColortoFlArray);      outRaster.setPixel(x,y,clearColortoFlArray);    }  }  for (  int band : orderedBands) {    paletteColor=cMap[band];    cMaptoFlArray=paletteColor.getRGBComponents(new float[4]);    if (paletteColor != BLACK_NO_ALPHA) {      for (int y=0; y < h; y++) {        for (int x=0; x < w; x++) {          inBandAsAlpha=inRaster.getSampleFloat(x,y,band);          outColortoFlArray=outRaster.getPixel(x,y,new float[4]);          outColortoFlArray[RED]=(outColortoFlArray[RED] * (1f - (inBandAsAlpha * cMaptoFlArray[ALPHA]))) + (cMaptoFlArray[RED] * (inBandAsAlpha * cMaptoFlArray[ALPHA]));          outColortoFlArray[GREEN]=(outColortoFlArray[GREEN] * (1f - (inBandAsAlpha * cMaptoFlArray[ALPHA]))) + (cMaptoFlArray[GREEN] * (inBandAsAlpha * cMaptoFlArray[ALPHA]));          outColortoFlArray[BLUE]=(outColortoFlArray[BLUE] * (1f - (inBandAsAlpha * cMaptoFlArray[ALPHA]))) + (cMaptoFlArray[BLUE] * (inBandAsAlpha * cMaptoFlArray[ALPHA]));          outColortoFlArray[ALPHA]=(outColortoFlArray[ALPHA] * (1f - (inBandAsAlpha * cMaptoFlArray[ALPHA]))) + (cMaptoFlArray[ALPHA] * (inBandAsAlpha * cMaptoFlArray[ALPHA]));          outRaster.setPixel(x,y,outColortoFlArray);        }      }    }  }  BufferedImage returnBI=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  for (int y=0; y < h; y++) {    for (int x=0; x < w; x++) {      outColortoFlArray=outRaster.getPixel(x,y,new float[4]);      int packedColor=((int)(outColortoFlArray[ALPHA] * 255f) << 24) | ((int)(outColortoFlArray[RED] * 255f) << 16) | ((int)(outColortoFlArray[GREEN] * 255f) << 8)| ((int)(outColortoFlArray[BLUE] * 255f));      returnBI.setRGB(x,y,packedColor);    }  }  return returnBI;}  }
class C{  public PvXMLHandler(PvList rootPv) throws SAXException {  setRootPv(rootPv);}  }
class C{  @org.junit.Test public void verifyGetDateTimeResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveDateTimeResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,quote(ExampleBuilder.SAMPLE_DATETIME_PROPERTY_VALUE));}  }
class C{  protected boolean checkAndSubtype(final AnnotatedTypeMirror subtype,final AnnotatedTypeMirror supertype,VisitHistory visited){  if (visited.contains(subtype,supertype)) {    return true;  }  visited.add(subtype,supertype);  return isSubtype(subtype,supertype,visited);}  }
class C{  private static int[] convertByteArray(byte[] audioData,AudioFormat format){  if (format.getFrameSize() == 2) {    int[] samples=new int[Math.min(audioData.length / 2,MAX_SIZE_RMS)];    int offset=audioData.length - 2 * samples.length;    for (int i=0; i < samples.length; i++) {      if (format.isBigEndian()) {        samples[i]=((audioData[offset + i * 2] << 8) | (audioData[offset + i * 2 + 1] & 0xFF));      } else {        samples[i]=((audioData[offset + i * 2 + 0] & 0xFF) | (audioData[offset + i * 2 + 1] << 8));      }    }    return samples;  } else   if (format.getFrameSize() == 1) {    int[] samples=new int[Math.min(audioData.length,MAX_SIZE_RMS)];    int offset=audioData.length - samples.length;    for (int i=0; i < samples.length; i++) {      samples[i]=(audioData[offset + i] << 8);    }    return samples;  } else {    throw new RuntimeException("unsupported frame size: " + format.getFrameSize());  }}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public TagObject(TagObject parent){  this.id=parent.getId();  this.tagname=parent.getTagname();  this.projectId=parent.getProjectId();}  }
class C{  public static int SAVED_XERROR_HANDLER(long display,XErrorEvent error){  if (saved_error_handler != 0) {  }  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("Unhandled XErrorEvent: " + "id=" + error.get_resourceid() + ", "+ "serial="+ error.get_serial()+ ", "+ "ec="+ error.get_error_code()+ ", "+ "rc="+ error.get_request_code()+ ", "+ "mc="+ error.get_minor_code());  }  return 0;}  }
class C{  public Insanity[] check(CacheEntry... cacheEntries){  if (null == cacheEntries || 0 == cacheEntries.length)   return new Insanity[0];  final MapOfSets<Integer,CacheEntry> valIdToItems=new MapOfSets<>(new HashMap<Integer,Set<CacheEntry>>(17));  final MapOfSets<ReaderField,Integer> readerFieldToValIds=new MapOfSets<>(new HashMap<ReaderField,Set<Integer>>(17));  final Set<ReaderField> valMismatchKeys=new HashSet<>();  for (int i=0; i < cacheEntries.length; i++) {    final CacheEntry item=cacheEntries[i];    final Object val=item.getValue();    if (val instanceof FieldCacheImpl.BitsEntry) {      continue;    }    if (val instanceof FieldCache.CreationPlaceholder)     continue;    final ReaderField rf=new ReaderField(item.getReaderKey(),item.getFieldName());    final Integer valId=Integer.valueOf(System.identityHashCode(val));    valIdToItems.put(valId,item);    if (1 < readerFieldToValIds.put(rf,valId)) {      valMismatchKeys.add(rf);    }  }  final List<Insanity> insanity=new ArrayList<>(valMismatchKeys.size() * 3);  insanity.addAll(checkValueMismatch(valIdToItems,readerFieldToValIds,valMismatchKeys));  insanity.addAll(checkSubreaders(valIdToItems,readerFieldToValIds));  return insanity.toArray(new Insanity[insanity.size()]);}  }
class C{  private SettingsManager(){  file=new File(UltraCosmeticsData.get().getPlugin().getDataFolder(),"config.yml");  fileConfiguration=UltraCosmeticsData.get().getPlugin().getConfig();}  }
class C{  public final AC gap(String size){  return gap(size,curIx++);}  }
class C{  @Override public void acceptClassifier(BatchClassifierEvent ce){  if (ce.getTestSet() == null || ce.getTestSet().isStructureOnly()) {    return;  }  Classifier classifier=ce.getClassifier();  try {    if (ce.getGroupIdentifier() != m_currentBatchIdentifier) {      if (m_setsComplete > 0) {        if (m_logger != null) {          m_logger.statusMessage(statusMessagePrefix() + "BUSY. Can't accept data " + "at this time.");          m_logger.logMessage("[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " BUSY. Can't accept data at this time.");        }        return;      }      if (ce.getTrainSet().getDataSet() == null || ce.getTrainSet().getDataSet().numInstances() == 0) {        Evaluation eval=new Evaluation(ce.getTestSet().getDataSet());        m_PlotInstances=ExplorerDefaults.getClassifierErrorsPlotInstances();        m_PlotInstances.setInstances(ce.getTestSet().getDataSet());        m_PlotInstances.setClassifier(ce.getClassifier());        m_PlotInstances.setClassIndex(ce.getTestSet().getDataSet().classIndex());        m_PlotInstances.setEvaluation(eval);        eval=adjustForInputMappedClassifier(eval,ce.getClassifier(),ce.getTestSet().getDataSet(),m_PlotInstances);        eval.useNoPriors();        m_eval=new AggregateableEvaluation(eval);        m_eval.setMetricsToDisplay(m_metricsList);      } else {        Evaluation eval=new Evaluation(ce.getTrainSet().getDataSet());        m_PlotInstances=ExplorerDefaults.getClassifierErrorsPlotInstances();        m_PlotInstances.setInstances(ce.getTrainSet().getDataSet());        m_PlotInstances.setClassifier(ce.getClassifier());        m_PlotInstances.setClassIndex(ce.getTestSet().getDataSet().classIndex());        m_PlotInstances.setEvaluation(eval);        eval=adjustForInputMappedClassifier(eval,ce.getClassifier(),ce.getTrainSet().getDataSet(),m_PlotInstances);        m_eval=new AggregateableEvaluation(eval);        m_eval.setMetricsToDisplay(m_metricsList);      }      m_PlotInstances.setUp();      m_currentBatchIdentifier=ce.getGroupIdentifier();      m_setsComplete=0;      m_aggregatedPlotInstances=null;      String msg="[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " starting executor pool ("+ getExecutionSlots()+ " slots)...";      startExecutorPool();      m_tasks=new ArrayList<EvaluationTask>();      if (m_logger != null) {        m_logger.logMessage(msg);      } else {        System.out.println(msg);      }    }    if (m_setsComplete < ce.getMaxSetNumber() && m_tasks != null) {      EvaluationTask newTask=new EvaluationTask(classifier,ce.getTrainSet().getDataSet(),ce.getTestSet().getDataSet(),ce.getSetNumber(),ce.getMaxSetNumber(),ce.getLabel());      String msg="[ClassifierPerformanceEvaluator] " + statusMessagePrefix() + " scheduling "+ " evaluation of fold "+ ce.getSetNumber()+ " for execution...";      if (m_logger != null) {        m_logger.logMessage(msg);      } else {        System.out.println(msg);      }      m_tasks.add(newTask);      m_executorPool.execute(newTask);    }  } catch (  Exception ex) {    ex.printStackTrace();    stop();  }}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=this.count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(this.buffers.size());  for (  byte[] buf : this.buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public HttpErrorResponseDeserializerUnionStrategy(final DeserializationContext context){  this.context=context;}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr()+ " - forward to request.jsp");  if (!response.isCommitted())   response.sendRedirect("expenses.jsp");}  }
class C{  public void increment(TestStatus status){  count[status.ordinal()]++;}  }
class C{  private String parseQuotedToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  boolean quoted=false;  boolean charEscaped=false;  while (hasChar()) {    ch=chars[pos];    if (!quoted && isOneOf(ch,terminators)) {      break;    }    if (!charEscaped && ch == '"') {      quoted=!quoted;    }    charEscaped=(!charEscaped && ch == '\\');    i2++;    pos++;  }  return getToken(true);}  }
class C{  public static void dagToPdag(Graph graph){  Graph graphCopy=new EdgeListGraph(graph);  Node orderedNodes[]=new Node[graphCopy.getNodes().size()];  int count=0;  while (graphCopy.getNodes().size() > 0) {    Set<Node> exogenousNodes=new HashSet<>();    for (    Node next : graphCopy.getNodes()) {      if (graphCopy.isExogenous(next)) {        exogenousNodes.add(next);        orderedNodes[count++]=graph.getNode(next.getName());      }    }    graphCopy.removeNodes(new ArrayList<>(exogenousNodes));  }  count=0;  Edge edges[]=new Edge[graph.getNumEdges()];  boolean edgeOrdered[]=new boolean[graph.getNumEdges()];  Edge orderedEdges[]=new Edge[graph.getNumEdges()];  for (  Edge edge : graph.getEdges()) {    edges[count++]=edge;  }  for (int i=0; i < edges.length; i++) {    edgeOrdered[i]=false;  }  while (count > 0) {    for (    Node orderedNode : orderedNodes) {      for (int k=orderedNodes.length - 1; k >= 0; k--) {        for (int q=0; q < edges.length; q++) {          if (!edgeOrdered[q] && edges[q].getNode1() == orderedNodes[k] && edges[q].getNode2() == orderedNode) {            edgeOrdered[q]=true;            orderedEdges[orderedEdges.length - count]=edges[q];            count--;          }        }      }    }  }  boolean compelledEdges[]=new boolean[graph.getNumEdges()];  boolean reversibleEdges[]=new boolean[graph.getNumEdges()];  for (int i=0; i < graph.getNumEdges(); i++) {    compelledEdges[i]=false;    reversibleEdges[i]=false;  }  for (int i=0; i < graph.getNumEdges(); i++) {    if (compelledEdges[i] || reversibleEdges[i]) {      continue;    }    Node x=orderedEdges[i].getNode1();    Node y=orderedEdges[i].getNode2();    for (int j=0; j < orderedEdges.length; j++) {      if (orderedEdges[j].getNode2() == x && compelledEdges[j]) {        Node w=orderedEdges[j].getNode1();        if (!graph.isParentOf(w,y)) {          for (int k=0; k < orderedEdges.length; k++) {            if (orderedEdges[k].getNode2() == y) {              compelledEdges[k]=true;              break;            }          }        } else {          for (int k=0; k < orderedEdges.length; k++) {            if (orderedEdges[k].getNode1() == w && orderedEdges[k].getNode2() == y) {              compelledEdges[k]=true;              break;            }          }        }      }      if (compelledEdges[i]) {        break;      }    }    if (compelledEdges[i]) {      continue;    }    boolean foundZ=false;    for (    Edge orderedEdge : orderedEdges) {      Node z=orderedEdge.getNode1();      if (z != x && orderedEdge.getNode2() == y && !graph.isParentOf(z,x)) {        compelledEdges[i]=true;        for (int k=i + 1; k < graph.getNumEdges(); k++) {          if (orderedEdges[k].getNode2() == y && !reversibleEdges[k]) {            compelledEdges[k]=true;          }        }        foundZ=true;        break;      }    }    if (!foundZ) {      reversibleEdges[i]=true;      for (int j=i + 1; j < orderedEdges.length; j++) {        if (!compelledEdges[j] && orderedEdges[j].getNode2() == y) {          reversibleEdges[j]=true;        }      }    }  }  for (int i=0; i < reversibleEdges.length; i++) {    if (reversibleEdges[i]) {      graph.setEndpoint(orderedEdges[i].getNode1(),orderedEdges[i].getNode2(),Endpoint.TAIL);      graph.setEndpoint(orderedEdges[i].getNode2(),orderedEdges[i].getNode1(),Endpoint.TAIL);    }  }}  }
class C{  private boolean handleContextItem(int itemId,int[] positions){  if (positions.length != 1) {    return false;  }  Map<String,Object> item=arrayAdapter.getItem(positions[0]);  Long trackId=(Long)item.get(TRACK_ID_FIELD);  Long markerId=(Long)item.get(MARKER_ID_FIELD);  Intent intent;switch (itemId) {case R.id.list_context_menu_play:    playTracks(new long[]{trackId});  return true;case R.id.list_context_menu_share:shareTrack(trackId);return true;case R.id.list_context_menu_show_on_map:intent=IntentUtils.newIntent(this,TrackDetailActivity.class).putExtra(TrackDetailActivity.EXTRA_MARKER_ID,markerId);startActivity(intent);return true;case R.id.list_context_menu_edit:if (markerId != null) {intent=IntentUtils.newIntent(this,MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_MARKER_ID,markerId);} else {intent=IntentUtils.newIntent(this,TrackEditActivity.class).putExtra(TrackEditActivity.EXTRA_TRACK_ID,trackId);}startActivity(intent);finish();return true;case R.id.list_context_menu_delete:if (markerId != null) {DeleteMarkerDialogFragment.newInstance(new long[]{markerId}).show(getSupportFragmentManager(),DeleteMarkerDialogFragment.DELETE_MARKER_DIALOG_TAG);} else {deleteTracks(new long[]{trackId});}return true;default :return false;}}  }
class C{  protected boolean isTokenChar(char ch){  if (Character.isLetterOrDigit(ch))   return true;  if (Character.isISOControl(ch))   return false;  if (isHttpSeparator(ch))   return false;  return true;}  }
class C{  public void put(String uuid,GuacamoleTunnel tunnel){  tunnelMap.put(uuid,new GuacamoleHTTPTunnel(tunnel));}  }
class C{  public MultiProgressMonitor(final OutputStream out,final String taskName){  this(out,taskName,500,TimeUnit.MILLISECONDS);}  }
class C{  protected void failGetAll(int k){  try {    Set<Object> keys=F.<Object>asSet(new TestKey(String.valueOf(k)));    jcache(0).getAll(keys);    assert false : "p2p marshalling failed, but error response was not sent";  } catch (  CacheException e) {    assert X.hasCause(e,IOException.class);  }}  }
class C{  public void testThreeNodeSubmitQueryWithLinearizableConsistency() throws Throwable {  testSubmitQuery(3,Query.ConsistencyLevel.LINEARIZABLE);}  }
class C{  private void initializeMBean(SystemMemberCacheImpl cache) throws org.apache.geode.admin.AdminException {  GemFireVM vm=cache.getVM();  this.mbeanName=new StringBuffer("GemFire.Cache:").append("path=").append(MBeanUtil.makeCompliantMBeanNameProperty(getFullPath())).append(",name=").append(MBeanUtil.makeCompliantMBeanNameProperty(cache.getName())).append(",id=").append(cache.getId()).append(",owner=").append(MBeanUtil.makeCompliantMBeanNameProperty(vm.getId().toString())).append(",type=Region").toString();  this.objectName=MBeanUtil.createMBean(this);}  }
class C{  public CompositeEnumeration(Enumeration<T>... enumerations){  for (  Enumeration<T> enumeration : enumerations) {    add(enumeration);  }}  }
class C{  @NonNull public IntroductionBuilder withStyle(@NonNull Style style){  this.style=style;  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public T ondblclick(String value){  return attr("ondblclick",value);}  }
class C{  private SQLiteAndroidDatabase openDatabase(String dbname,String assetFilePath,int openFlags,CallbackContext cbc,boolean old_impl) throws Exception {  InputStream in=null;  File dbfile=null;  try {    if (assetFilePath != null && assetFilePath.length() > 0) {      if (assetFilePath.compareTo("1") == 0) {        assetFilePath="www/" + dbname;        in=this.getContext().getAssets().open(assetFilePath);        Log.v("info","Located pre-populated DB asset in app bundle www subdirectory: " + assetFilePath);      } else       if (assetFilePath.charAt(0) == '~') {        assetFilePath=assetFilePath.startsWith("~/") ? assetFilePath.substring(2) : assetFilePath.substring(1);        in=this.getContext().getAssets().open(assetFilePath);        Log.v("info","Located pre-populated DB asset in app bundle subdirectory: " + assetFilePath);      } else {        File filesDir=this.getContext().getFilesDir();        assetFilePath=assetFilePath.startsWith("/") ? assetFilePath.substring(1) : assetFilePath;        File assetFile=new File(filesDir,assetFilePath);        in=new FileInputStream(assetFile);        Log.v("info","Located pre-populated DB asset in Files subdirectory: " + assetFile.getCanonicalPath());        if (openFlags == SQLiteOpenFlags.READONLY) {          dbfile=assetFile;          Log.v("info","Detected read-only mode request for external asset.");        }      }    }    if (dbfile == null) {      openFlags=SQLiteOpenFlags.CREATE | SQLiteOpenFlags.READWRITE;      dbfile=this.getContext().getDatabasePath(dbname);      if (!dbfile.exists() && in != null) {        Log.v("info","Copying pre-populated db asset to destination");        this.createFromAssets(dbname,dbfile,in);      }      if (!dbfile.exists()) {        dbfile.getParentFile().mkdirs();      }    }    SQLiteAndroidDatabase mydb=old_impl ? new SQLiteAndroidDatabase() : new SQLiteDatabaseNDK();    mydb.open(dbfile,openFlags);    if (cbc != null)     cbc.success("database open");    return mydb;  } catch (  Exception e) {    if (cbc != null)     cbc.error("can't open database " + e);    throw e;  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void testSqlFieldsQueryNotFullyFetchedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from Integer");  qry.setPageSize(10);  testQueryNotFullyFetchedMetrics(cache,qry,false);}  }
class C{  public void testNonexistent() throws Exception {  Similarity sim=getSimilarity("sdfdsfdsfdswr5fsdfdsfdsfs");  assertEquals(DefaultSimilarity.class,sim.getClass());}  }
class C{  public void displayTour(Tour tour){synchronized (tours) {    tours.put(tour,new TourDisplaySetting());  }  if (autoRepaint) {    repaint();  }}  }
class C{  public mxICell decodeCell(Node node,boolean restoreStructures){  mxICell cell=null;  if (node != null && node.getNodeType() == Node.ELEMENT_NODE) {    mxObjectCodec decoder=mxCodecRegistry.getCodec(node.getNodeName());    if (!(decoder instanceof mxCellCodec)) {      Node child=node.getFirstChild();      while (child != null && !(decoder instanceof mxCellCodec)) {        decoder=mxCodecRegistry.getCodec(child.getNodeName());        child=child.getNextSibling();      }      String name=mxCell.class.getSimpleName();      decoder=mxCodecRegistry.getCodec(name);    }    if (!(decoder instanceof mxCellCodec)) {      String name=mxCell.class.getSimpleName();      decoder=mxCodecRegistry.getCodec(name);    }    cell=(mxICell)decoder.decode(this,node);    if (restoreStructures) {      mxICell parent=cell.getParent();      if (parent != null) {        parent.insert(cell);      }      mxICell source=cell.getTerminal(true);      if (source != null) {        source.insertEdge(cell,true);      }      mxICell target=cell.getTerminal(false);      if (target != null) {        target.insertEdge(cell,false);      }    }  }  return cell;}  }
class C{  public void addOutputEventToInputEvent(Method inputEvent,List<Method> oes){  if (conformanceSpec)   addToInputEventCombine(inputEvent,oes); else   addToInputEvent(inputEvent,oes);}  }
class C{  public static FloatMatrix zeros(int rows,int columns){  return new FloatMatrix(rows,columns);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private Widget createWidget(JSONObject elem,View view) throws ScreenConfigException {  if (!elem.has("id")) {    throw new CruxGeneratorException("The id attribute is required for CRUX Widgets. " + "On view [" + view.getId() + "], there is an widget of type ["+ elem.optString("_type")+ "] without id.");  }  String widgetId;  try {    widgetId=elem.getString("id");  } catch (  JSONException e) {    throw new CruxGeneratorException("The id attribute is required for CRUX Widgets. " + "On view [" + view.getId() + "], there is an widget of type ["+ elem.optString("_type")+ "] without a valid id.");  }  Widget widget=view.getWidget(widgetId);  if (widget != null) {    throw new ScreenConfigException("Error creating widget. Duplicated identifier [" + widgetId + "].");  }  widget=newWidget(elem,widgetId);  if (widget == null) {    throw new ScreenConfigException("Can not create widget [" + widgetId + "]. Verify the widget type.");  }  view.addWidget(widget);  createWidgetChildren(elem,view,widgetId,widget);  return widget;}  }
class C{  public boolean isShutdown(){  return closed;}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  public void clear(){  Assert.check(currentState != BitsState.UNKNOWN);  for (int i=0; i < bits.length; i++) {    bits[i]=0;  }  currentState=BitsState.NORMAL;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  boolean ok_to_close=false;  if (DOCSTATUS_Completed.equals(getDocStatus())) {    setProcessed(true);    setDocAction(DOCACTION_None);    ok_to_close=true;  } else {    return false;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return ok_to_close;}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer();  buff.append((m_regex) ? "Regex: " : "Substring: ");  buff.append(m_match).append(" --> ").append(m_replace).append("  ");  buff.append((m_ignoreCase) ? "[ignore case]" : "").append("  ");  buff.append("[Atts: " + m_attsToApplyTo + "]");  return buff.toString();}  }
class C{  @Override public void configure(YamlConfiguration configuration) throws BaleenException {  LOGGER.debug("Configuring metrics");  stop();  reporters.clear();  List<Map<String,Object>> reportersConfigs=configuration.getAsListOfMaps("metrics.reporters");  for (  Map<String,Object> config : reportersConfigs) {    String type=(String)config.getOrDefault("type","none");    ScheduledReporter reporter;switch (type.toLowerCase()) {case "log":      reporter=ReporterUtils.createSlf4jReporter(metricRegistry,config);    break;case "csv":  reporter=ReporterUtils.createCsvReporter(metricRegistry,config);break;case "console":reporter=ReporterUtils.createConsoleReporter(metricRegistry,config);break;case "elasticsearch":reporter=ReporterUtils.createElasticSearchReporter(metricRegistry,config);break;case "none":continue;default :throw new InvalidParameterException("Unknown reporter of type " + type);}Integer period=(Integer)config.getOrDefault("period",60);reporters.add(new ConfiguredReporter(reporter,period * 1000));}metricRegistry.addListener(new LoggingMetricListener());LOGGER.debug("Installing JVM metrics");metricRegistry.registerAll(new GarbageCollectorMetricSet());metricRegistry.registerAll(new MemoryUsageGaugeSet());metricRegistry.registerAll(new ThreadStatesGaugeSet());LOGGER.info("Metrics have been configured");}  }
class C{  public ValueNode dimension(int index){  assert index == 0;  return length();}  }
class C{  public String generateInvalidTld(int length){  StringBuffer buffer=new StringBuffer();  for (int i=1; i <= length + 1; i++) {    char c=(char)('a' + Math.random() * 26);    buffer.append(c);  }  String tempInvalidUrl=preUrl + buffer.toString();  return tempInvalidUrl;}  }
class C{  public void addOptionToCheck(String option){  if (optionsToCheck == null) {    optionsToCheck=new LinkedList<>();  }  optionsToCheck.add(option);}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {  if (this == handler.getCurrentProcessor()) {    handler.popProcessor();  }  int nChars=m_accumulator.length();  if ((nChars > 0) && ((null != m_xslTextElement) || !XMLCharacterRecognizer.isWhiteSpace(m_accumulator)) || handler.isSpacePreserve()) {    ElemTextLiteral elem=new ElemTextLiteral();    elem.setDOMBackPointer(m_firstBackPointer);    elem.setLocaterInfo(handler.getLocator());    try {      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }    boolean doe=(null != m_xslTextElement) ? m_xslTextElement.getDisableOutputEscaping() : false;    elem.setDisableOutputEscaping(doe);    elem.setPreserveSpace(true);    char[] chars=new char[nChars];    m_accumulator.getChars(0,nChars,chars,0);    elem.setChars(chars);    ElemTemplateElement parent=handler.getElemTemplateElement();    parent.appendChild(elem);  }  m_accumulator.setLength(0);  m_firstBackPointer=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isDisplay(){  return is(DISPLAY);}  }
class C{  <D>AttributeMetadata<D> toMetadata(Schema schema,ElementKey<?,?> parent,AttributeKey<D> key,MetadataContext context){  return new AttributeMetadataImpl<D>(schema,this,parent,key,context);}  }
class C{  public String format(int val){  DecimalFormat df=getIntFormat();  if (df != null) {    return df.format(val);  }  return Integer.toString(val);}  }
class C{  public static <O>CQNParser<O> forPojoWithAttributes(Class<O> pojoClass,Map<String,? extends Attribute<O,?>> attributes){  CQNParser<O> parser=forPojo(pojoClass);  parser.registerAttributes(attributes);  return parser;}  }
class C{  public long writeResult(PlatformMemory mem,Object obj,PlatformWriterClosure clo){  if (obj == null)   return FALSE;  PlatformOutputStream out=mem.output();  BinaryRawWriterEx writer=platformCtx.writer(out);  if (clo == null)   writer.writeObjectDetached(obj); else   clo.write(writer,obj);  out.synchronize();  return TRUE;}  }
class C{  protected void handleTableFeaturesMessage(List<OFTableFeaturesStatsReply> replies,boolean doNotify){  if (sw == null) {    String msg=getSwitchStateMessage(!replies.isEmpty() ? replies.get(0) : null,"State machine error: switch is null. Should never happen");    throw new SwitchStateException(msg);  }  sw.processOFTableFeatures(replies);}  }
class C{  protected double[] makeDistribution(double predictedClass){  double[] result=new double[m_NumClasses];  if (Utils.isMissingValue(predictedClass)) {    return result;  }  if (m_ClassIsNominal) {    result[(int)predictedClass]=1.0;  } else {    result[0]=predictedClass;  }  return result;}  }
class C{  public int compareTo(FloatBoolean o){  if (getScore() == o.getScore()) {    return 0;  } else   if (getScore() < o.getScore()) {    return 1;  } else   return -1;}  }
class C{  protected Point2D.Double constrainPoint(Point2D.Double p,TranslationDirection dir){  Point2D.Double p0=constrainPoint((Point2D.Double)p.clone());switch (dir) {case NORTH:case NORTH_WEST:case NORTH_EAST:    if (p0.y < p.y) {      p.y=p0.y;    } else     if (p0.y > p.y) {      p.y=p0.y - height;    }  break;case SOUTH:case SOUTH_WEST:case SOUTH_EAST:if (p0.y < p.y) {  p.y=p0.y + height;} else if (p0.y > p.y) {  p.y=p0.y;}break;}switch (dir) {case WEST:case NORTH_WEST:case SOUTH_WEST:if (p0.x < p.x) {p.x=p0.x;} else if (p0.x > p.x) {p.x=p0.x - width;}break;case EAST:case NORTH_EAST:case SOUTH_EAST:if (p0.x < p.x) {p.x=p0.x + width;} else if (p0.x > p.x) {p.x=p0.x;}break;}return p;}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  TreePath path=e.getTreePath();  DefaultTreeCheckingModel.this.checkingMode.updateCheckAfterChildrenRemoved(path);}  }
class C{  private void showFragment(String prefTag,int itemId,String toolbarTitle,String fragmentTagShow,String fragmentTagHide,String fragmentTagHide2,boolean showOverview,boolean animateOverview){  android.support.v4.app.FragmentManager fragmentManager=getSupportFragmentManager();  assert getSupportActionBar() != null;  if (prefHelper.fabEnabled(prefTag) || fragmentTagShow.equals(WHATIF_TAG))   mFab.setVisibility(View.GONE); else   mFab.setVisibility(View.VISIBLE);  getSupportActionBar().setTitle(toolbarTitle);  if (fragmentManager.findFragmentByTag(fragmentTagShow) != null) {    android.support.v4.app.FragmentTransaction ft=fragmentManager.beginTransaction();    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)     fragmentManager.findFragmentByTag(fragmentTagShow).setEnterTransition(null);    if (fragmentTagShow.equals(BROWSER_TAG))     ft.setCustomAnimations(R.anim.abc_slide_in_top,R.anim.abc_slide_in_top); else     ft.setCustomAnimations(R.anim.abc_slide_in_bottom,R.anim.abc_slide_in_bottom);    ft.show(fragmentManager.findFragmentByTag(fragmentTagShow));    ft.commitAllowingStateLoss();  } else {switch (itemId) {case R.id.nav_favorites:      fragmentManager.beginTransaction().setCustomAnimations(R.anim.abc_slide_in_bottom,R.anim.abc_slide_in_bottom).add(R.id.flContent,new FavoritesFragment(),fragmentTagShow).commitAllowingStateLoss();    break;case R.id.nav_browser:  if (prefHelper.isOnline(this) && !fullOffline) {    fragmentManager.beginTransaction().add(R.id.flContent,new ComicBrowserFragment(),fragmentTagShow).commitAllowingStateLoss();  } else {    fragmentManager.beginTransaction().add(R.id.flContent,new OfflineFragment(),fragmentTagShow).commitAllowingStateLoss();  }break;case R.id.nav_whatif:fragmentManager.beginTransaction().add(R.id.flContent,new WhatIfOverviewFragment(),fragmentTagShow).commitAllowingStateLoss();break;}}if (prefHelper.subtitleEnabled() && itemId != R.id.nav_whatif) {switch (itemId) {case R.id.nav_favorites:{FavoritesFragment favoritesFragment=(FavoritesFragment)getSupportFragmentManager().findFragmentByTag(FAV_TAG);if (favoritesFragment != null && favoritesFragment.favorites != null) getSupportActionBar().setSubtitle(String.valueOf(favoritesFragment.favorites[favoritesFragment.favoriteIndex]));break;}case R.id.nav_browser:{ComicFragment comicFragment=(ComicFragment)getSupportFragmentManager().findFragmentByTag(BROWSER_TAG);if (comicFragment != null && comicFragment.lastComicNumber != 0) getSupportActionBar().setSubtitle(String.valueOf(comicFragment.lastComicNumber)); else getSupportActionBar().setSubtitle(String.valueOf(prefHelper.getLastComic()));break;}}} else if (itemId == R.id.nav_whatif) {getSupportActionBar().setSubtitle("");}FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();if (fragmentManager.findFragmentByTag(fragmentTagHide) != null) fragmentTransaction.hide(fragmentManager.findFragmentByTag(fragmentTagHide));if (fragmentManager.findFragmentByTag(fragmentTagHide2) != null) fragmentTransaction.hide(fragmentManager.findFragmentByTag(fragmentTagHide2));if (fragmentManager.findFragmentByTag(OVERVIEW_TAG) != null) fragmentTransaction.hide(fragmentManager.findFragmentByTag(OVERVIEW_TAG));fragmentTransaction.commitAllowingStateLoss();if (showOverview) showOverview(animateOverview);}  }
class C{  default void notifyAfterInline(ResolvedJavaMethod methodToInline){}  }
class C{  public long manhattanDistance(final MutableInt2D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  private synchronized void resumeTrackDataHub(){  trackDataHub=((TrackDetailActivity)getActivity()).getTrackDataHub();  trackDataHub.registerTrackDataListener(this,EnumSet.of(TrackDataType.TRACKS_TABLE,TrackDataType.WAYPOINTS_TABLE,TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE,TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE,TrackDataType.PREFERENCE));}  }
class C{  public AlgorithmChecker(TrustAnchor anchor){  this(anchor,certPathDefaultConstraints);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String name;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  name=docType.getName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeName","svg",name);  } else {    assertEquals("documenttypeGetDocTypeAssert","staff",name);  }}  }
class C{  public X509Principal(boolean reverse,String dirName){  super(reverse,dirName);}  }
class C{  public void onAddHostZeroconfNoHost(){  HostFragmentManualConfiguration fragment=new HostFragmentManualConfiguration();  Bundle args=new Bundle();  args.putString(HostFragmentManualConfiguration.CANCEL_BUTTON_LABEL_ARG,getString(R.string.previous));  fragment.setArguments(args);  switchToFragment(fragment);}  }
class C{  public void addAllOf(DoubleArrayList x,DoubleArrayList y){  int listSize=x.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(x,y);}  }
class C{  protected void addExternalDTDDeclaration(Decl declaration){  if (externalDTDDeclarations == null) {    externalDTDDeclarations=new ArrayList<Decl>();  }  externalDTDDeclarations.add(declaration);}  }
class C{  public void write(final String s) throws IOException {  final int length=s.length();  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      final int start=0;      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=0;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        s.getChars(start_chunk,end_chunk,m_inputChars,0);        int len_chunk=(end_chunk - start_chunk);        final char c=m_inputChars[len_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          end_chunk--;          len_chunk--;          if (chunk == chunks) {          }        }        this.write(m_inputChars,0,len_chunk);      }      return;    }  }  s.getChars(0,length,m_inputChars,0);  final char[] chars=m_inputChars;  final int n=length;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=0;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  public void dcbz(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Enumeration<T> emptyEnumeration(){  return (Enumeration<T>)EMPTY_ENUMERATION;}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public void validateBusinessObjectDataRestoreDto(BusinessObjectDataKey expectedBusinessObjectDataKey,String expectedOriginStorageName,String expectedOriginBucketName,String expectedOriginS3KeyPrefix,List<StorageFile> expectedOriginStorageFiles,String expectedGlacierStorageName,String expectedGlacierBucketName,String expectedGlacierS3KeyBasePrefix,String expectedGlacierS3KeyPrefix,Exception expectedException,BusinessObjectDataRestoreDto actualBusinessObjectDataRestoreDto){  assertNotNull(actualBusinessObjectDataRestoreDto);  assertEquals(expectedBusinessObjectDataKey,actualBusinessObjectDataRestoreDto.getBusinessObjectDataKey());  assertEquals(expectedOriginStorageName,actualBusinessObjectDataRestoreDto.getOriginStorageName());  assertEquals(expectedOriginBucketName,actualBusinessObjectDataRestoreDto.getOriginBucketName());  assertEquals(expectedOriginS3KeyPrefix,actualBusinessObjectDataRestoreDto.getOriginS3KeyPrefix());  assertEquals(expectedOriginStorageFiles,actualBusinessObjectDataRestoreDto.getOriginStorageFiles());  assertEquals(expectedGlacierStorageName,actualBusinessObjectDataRestoreDto.getGlacierStorageName());  assertEquals(expectedGlacierBucketName,actualBusinessObjectDataRestoreDto.getGlacierBucketName());  assertEquals(expectedGlacierS3KeyBasePrefix,actualBusinessObjectDataRestoreDto.getGlacierS3KeyBasePrefix());  assertEquals(expectedGlacierS3KeyPrefix,actualBusinessObjectDataRestoreDto.getGlacierS3KeyPrefix());  assertEquals(expectedException,actualBusinessObjectDataRestoreDto.getException());}  }
class C{  public static float computeContrast(int background,int foreground){  Pair<Integer,Integer> key=new Pair<>(background,foreground);  if (contrastCache == null) {    contrastCache=new LruCache<>(5);  } else {    Float contrast=contrastCache.get(key);    if (contrast != null) {      return contrast;    }  }  float bgR=Color.red(background) / 255f;  float bgG=Color.green(background) / 255f;  float bgB=Color.blue(background) / 255f;  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;  float fgR=Color.red(foreground) / 255f;  float fgG=Color.green(foreground) / 255f;  float fgB=Color.blue(foreground) / 255f;  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;  float value=Math.abs((fgL + 0.05f) / (bgL + 0.05f));  contrastCache.put(key,value);  return value;}  }
class C{  static public void emergencyClose(){  ArrayList members=allAgents;  for (int i=0; i < members.size(); i++) {    RemoteGfManagerAgent each=(RemoteGfManagerAgent)members.get(i);    each.system.emergencyClose();  }}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  if (endReached)   return -1;  int size=0;  try {    while (len > 0) {      if (xzIn == null) {        prepareNextStream();        if (endReached)         return size == 0 ? -1 : size;      }      int ret=xzIn.read(buf,off,len);      if (ret > 0) {        size+=ret;        off+=ret;        len-=ret;      } else       if (ret == -1) {        xzIn=null;      }    }  } catch (  IOException e) {    exception=e;    if (size == 0)     throw e;  }  return size;}  }
class C{  private void skipToEndOfLine() throws IOException {  while (pos < limit || fillBuffer(1)) {    char c=buffer[pos++];    if (c == '\r' || c == '\n') {      break;    }  }}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  boolean b=false;  Iterator keys=jo.keys();  String string;  StringBuffer sb=new StringBuffer();  while (keys.hasNext()) {    string=keys.next().toString();    if (!jo.isNull(string)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(string));      sb.append("=");      sb.append(Cookie.escape(jo.getString(string)));      b=true;    }  }  return sb.toString();}  }
class C{  @Override public void onDraw(Canvas canvas,RecyclerView parent,RecyclerView.State state){  if (mOrientation == LinearLayoutManager.HORIZONTAL) {    drawHorizontalDividers(canvas,parent);  } else   if (mOrientation == LinearLayoutManager.VERTICAL) {    drawVerticalDividers(canvas,parent);  }}  }
class C{  public ContainerTag withText(String text){  return with(new Text(text));}  }
class C{  public void sort(){  Arrays.sort(objs,0,numObjs);}  }
class C{  protected void processWindowEvent(WindowEvent e){  if (e.getID() == WindowEvent.WINDOW_CLOSING)   dispose();  super.processWindowEvent(e);}  }
class C{  @RequestMapping(value="/account/sessions/{series}",method=RequestMethod.DELETE) @Timed public ResponseEntity<?> invalidateSession(@PathVariable String series) throws UnsupportedEncodingException {  String decodedSeries=URLDecoder.decode(series,"UTF-8");  return userRepository.findOneByLogin(securityUtils.getCurrentLogin()).map(null).orElse(new ResponseEntity<>(HttpStatus.FORBIDDEN));}  }
class C{  public static double[] calculateTStats(double[] coef,double[] stderror,int k){  double[] result=new double[k];  for (int i=0; i < k; i++) {    result[i]=coef[i] / stderror[i];  }  return result;}  }
class C{  public static void transposeM(float[] mTrans,int mTransOffset,float[] m,int mOffset){  for (int i=0; i < 4; i++) {    int mBase=i * 4 + mOffset;    mTrans[i + mTransOffset]=m[mBase];    mTrans[i + 4 + mTransOffset]=m[mBase + 1];    mTrans[i + 8 + mTransOffset]=m[mBase + 2];    mTrans[i + 12 + mTransOffset]=m[mBase + 3];  }}  }
class C{  @SuppressWarnings("rawtypes") public ArrayMapper(Map map,String prefix){  Assert.isNotNull(map);  this.map=map;  this.prefix=prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.030 -0500",hash_original_method="8EBD7575DC6E636356E0A413FE046F9F",hash_generated_method="2C74E619B3A3419A6A00E03B48D01CB6") public void skip(int bits){  possExpand(bits);  mPos+=bits;}  }
class C{  protected JavadocTokenizer(ScannerFactory fac,char[] input,int inputLength){  super(fac,input,inputLength);}  }
class C{  boolean isValid(){  return (null != mMimeType && !mMimeType.equals("") && null != mData && mData.length > 0 && DrmInfoRequest.isValidType(mInfoType));}  }
class C{  boolean isDaemon(){  return vmdata.isDaemonThread();}  }
class C{  private static JFreeChart createGanttChart(){  return ChartFactory.createGanttChart("Gantt Chart","Domain","Range",null,true,true,true);}  }
class C{  public static boolean isParallelWANThreadID(long tid){  return WanType.matches(tid) ? true : tid / MAX_THREAD_PER_CLIENT > (MAX_BUCKET_PER_PR + 2);}  }
class C{  public Result compile(String[] args){  Context context=new Context();  JavacFileManager.preRegister(context);  Result result=compile(args,context);  if (fileManager instanceof JavacFileManager) {    ((JavacFileManager)fileManager).close();  }  return result;}  }
class C{  private boolean doesGivenProvisionTypeMatchAutoTierPolicy(String provisioningType,AutoTieringPolicy policy){  if (null == provisioningType || provisioningType.isEmpty()) {    return true;  }  if (AutoTieringPolicy.ProvisioningType.All.toString().equalsIgnoreCase(policy.getProvisioningType())) {    return true;  }  if (provisioningType.equalsIgnoreCase(VirtualPool.ProvisioningType.Thick.toString()) && AutoTieringPolicy.ProvisioningType.ThicklyProvisioned.toString().equalsIgnoreCase(policy.getProvisioningType())) {    return true;  }  if (provisioningType.equalsIgnoreCase(VirtualPool.ProvisioningType.Thin.toString()) && AutoTieringPolicy.ProvisioningType.ThinlyProvisioned.toString().equalsIgnoreCase(policy.getProvisioningType())) {    return true;  }  return false;}  }
class C{  public void processStatementFilterSingle(EPStatementAgentInstanceHandle handle,EPStatementHandleCallback handleCallback,EventBean theEvent){  handle.getStatementAgentInstanceLock().acquireWriteLock();  try {    if (handle.isHasVariables()) {      unisolatedServices.getVariableService().setLocalVersion();    }    handleCallback.getFilterCallback().matchFound(theEvent,null);    handle.internalDispatch();  } catch (  RuntimeException ex) {    unisolatedServices.getExceptionHandlingService().handleException(ex,handle,ExceptionHandlerExceptionType.PROCESS,theEvent);  } finally {    if (handle.isHasTableAccess()) {      unisolatedServices.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handleCallback.getAgentInstanceHandle().getStatementAgentInstanceLock().releaseWriteLock();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.THROW_STATEMENT__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public EmbedServer start(Class<?> applicationClass){  startNoJoin(applicationClass);  embedServer.join();  return embedServer;}  }
class C{  private void appendToStart(Map<String,PsiMethod> sortedMethods){  PsiElement anchorToAddBefore=mPsiClass.getMethods()[0];  for (  PsiMethod method : sortedMethods.values()) {    mPsiClass.addBefore(method,anchorToAddBefore);  }}  }
class C{  private void assertStatTotals(final CompressionStats stats){  assertEquals(stats.vmTotalPreCompressedBytes,stats.region1TotalPreCompressedBytes + stats.region2TotalPreCompressedBytes);  assertEquals(stats.vmTotalCompressions,stats.region1TotalCompressions + stats.region2TotalCompressions);  assertEquals(stats.vmTotalCompressionTime,stats.region1TotalCompressionTime + stats.region2TotalCompressionTime);  assertEquals(stats.vmTotalPostCompressedBytes,stats.region1TotalPostCompressedBytes + stats.region2TotalPostCompressedBytes);  assertEquals(stats.vmTotalDecompressions,stats.region1TotalDecompressions + stats.region2TotalDecompressions);  assertEquals(stats.vmTotalDecompressionTime,stats.region1TotalDecompressionTime + stats.region2TotalDecompressionTime);}  }
class C{  public boolean isReal(){  return type == REAL;}  }
class C{  @Override public Object nativeToJava(TransferData transferData){  byte bytes[]=(byte[])super.nativeToJava(transferData);  if (bytes == null) {    return null;  }  long startTime=Long.parseLong(new String(bytes));  return (this.startTime == startTime) ? getObject() : null;}  }
class C{  private void lazyPathfinder(final Coords dest,final MoveStepType type){  MoveStepType step=MoveStepType.FORWARDS;  if (type == MoveStepType.BACKWARDS) {    step=MoveStepType.BACKWARDS;  }  Coords subDest=dest;  if (!dest.equals(getFinalCoords())) {    subDest=dest.translated(dest.direction(getFinalCoords()));  }  while (!getFinalCoords().equals(subDest)) {    rotatePathfinder((getFinalCoords().direction(subDest) + (step == MoveStepType.BACKWARDS ? 3 : 0)) % 6,false);    addStep(step);  }  rotatePathfinder((getFinalCoords().direction(dest) + (step == MoveStepType.BACKWARDS ? 3 : 0)) % 6,false);  if (!dest.equals(getFinalCoords())) {    addStep(type);  }}  }
class C{  public static double parse(String s){  try {    return Double.parseDouble(s);  } catch (  NumberFormatException e) {  }  s=s.replaceAll(",",".");  s=s.replaceAll("\u00BC",".25");  s=s.replaceAll("\u00BD",".5");  s=s.replaceAll("\u00BE",".75");  try {    return Double.parseDouble(s);  } catch (  NumberFormatException e) {  }  Pattern p2=Pattern.compile("[^0-9]*([[0-9.]\\.]+)\\s?-\\s?([[0-9]\\.]+)(.*)");  Matcher m2=p2.matcher(s);  if (m2.matches()) {    try {      return (Double.parseDouble(m2.group(1)) + Double.parseDouble(m2.group(2))) / 2;    } catch (    NumberFormatException e) {    }  }  Pattern p1=Pattern.compile("[^0-9]*([[0-9]\\.]+)(.*)");  Matcher m1=p1.matcher(s);  if (m1.matches()) {    try {      return Double.parseDouble(m1.group(1));    } catch (    NumberFormatException e) {    }  }  return Double.NaN;}  }
class C{  public static SourceAddressAttribute createSourceAddressAttribute(TransportAddress address){  SourceAddressAttribute attribute=new SourceAddressAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public boolean isParameterSet(String generalizedKeyName){  return parameterSettings.containsKey(generalizedKeyName);}  }
class C{  public PAssociatedURIHeader createPAssociatedURIHeader(Address assocURI){  if (assocURI == null)   throw new NullPointerException("null associatedURI!");  PAssociatedURI associatedURI=new PAssociatedURI();  associatedURI.setAddress(assocURI);  return associatedURI;}  }
class C{  public List<CIMInstance> executeQuery(StorageSystem storageSystem,String query,String queryLanguage) throws WBEMException {  CloseableIterator<CIMInstance> iterator=null;  CimConnection connection=_cimConnection.getConnection(storageSystem);  WBEMClient client=connection.getCimClient();  CIMObjectPath objectPath=_cimPath.getStorageSystem(storageSystem);  _log.info(String.format("Executing query: %s, objectPath: %s, query language: %s",query,objectPath,queryLanguage));  List<CIMInstance> instanceList=new ArrayList<CIMInstance>();  try {    iterator=client.execQuery(objectPath,query,queryLanguage);    while (iterator.hasNext()) {      CIMInstance instance=iterator.next();      instanceList.add(instance);    }  } catch (  WBEMException we) {    _log.error("Caught an error will attempting to execute query and process query result. Query: " + query,we);  } finally {    closeCIMIterator(iterator);  }  return instanceList;}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension preferredSize=insetSize(parent);  if (parent.getComponentCount() > 0) {    Dimension childSize=getComponent(0).getPreferredSize();    preferredSize.width+=childSize.width;    preferredSize.height+=childSize.height;  }  return preferredSize;}  }
class C{  public ELText apply(ExpressionFactory factory,ELContext ctx){  return this;}  }
class C{  public RecipeEditor(AppView app,DirtyManager dirty){  m_dlSales=(DataLogicSales)app.getBean("uk.chromis.pos.forms.DataLogicSales");  initComponents();  m_jProduct.getDocument().addDocumentListener(dirty);  m_jQuantity.getDocument().addDocumentListener(dirty);}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  protected ShaderVar addGlobal(IGlobalShaderVar var){  return addGlobal(var.getVarString(),var.getDataType());}  }
class C{  public Control move(List<String> urls,String newDirPath,OnMoveDownloadFilesListener onMoveDownloadFilesListener){  return getDownloadMoveManager().move(urls,newDirPath,onMoveDownloadFilesListener);}  }
class C{  public boolean isSubset(IntArray subset){  int[] subData=subset._data;  for (int i=subset._size - 1; i >= 0; i--) {    if (!contains(subData[i]))     return false;  }  return true;}  }
class C{  public void truncate(int newSize){  if (size > newSize)   size=newSize;}  }
class C{  public static void deploy(Resource dir,boolean doNew){  String path="/resource/component/" + (Constants.DEFAULT_PACKAGE.replace('.','/')) + "/";  deploy(dir,path,doNew,"Base");  deploy(dir,path,doNew,"Feed");  deploy(dir,path,doNew,"Ftp");  deploy(dir,path,doNew,"Http");  deploy(dir,path,doNew,"Mail");  deploy(dir,path,doNew,"Query");  deploy(dir,path,doNew,"Result");  deploy(dir,path,doNew,"Administrator");{    Resource ormDir=dir.getRealResource("orm");    String ormPath=path + "orm/";    if (!ormDir.exists())     ormDir.mkdirs();    deploy(ormDir,ormPath,doNew,"IEventHandler");    deploy(ormDir,ormPath,doNew,"INamingStrategy");  }{    Resource testDir=dir.getRealResource("test");    String testPath=path + "test/";    if (!testDir.exists())     testDir.mkdirs();    deploy(testDir,testPath,doNew,"AdministratorTest");    deploy(testDir,testPath,doNew,"LuceeTestSuite");    deploy(testDir,testPath,doNew,"LuceeTestSuiteRunner");    deploy(testDir,testPath,doNew,"LuceeTestCase");  }  Resource repDir=dir.getRealResource("test/reporter");  String repPath=path + "test/reporter/";}  }
class C{  public static void putOperationInvocation(final Message message,final String resourceName,final String operationName,final Object... parameters) throws Exception {  message.putStringProperty(ManagementHelper.HDR_RESOURCE_NAME,new SimpleString(resourceName));  message.putStringProperty(ManagementHelper.HDR_OPERATION_NAME,new SimpleString(operationName));  String paramString;  if (parameters != null) {    JsonArray jsonArray=JsonUtil.toJSONArray(parameters);    paramString=jsonArray.toString();  } else {    paramString=null;  }  message.getBodyBuffer().writeNullableSimpleString(SimpleString.toSimpleString(paramString));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.675 -0500",hash_original_method="B0F7BA820AB1A580DEB9F8D4C1B1D195",hash_generated_method="74CEF01EFCEB89A48790756BCFEDB2B2") public ASN1Explicit(int tagNumber,ASN1Type type){  this(CLASS_CONTEXTSPECIFIC,tagNumber,type);}  }
class C{  public boolean isValidCombination(DatePattern datePattern,TimePattern timePattern){  return getInstrOfferingConfig().getDurationModel().isValidCombination(getMinutesPerWk(),datePattern,timePattern);}  }
class C{  public boolean isDefinedInEnv(){  if (envVars == null || paramNames.length == 0) {    return false;  }  for (  String var : envVars) {    if (System.getenv(var) == null) {      return false;    }  }  return true;}  }
class C{  public boolean isTimeoutErr(){  return timeoutErr;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operationCall: ");  result.append(operationCall);  result.append(", arrayAccess: ");  result.append(arrayAccess);  result.append(')');  return result.toString();}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  updateRangesFields();}  }
class C{  public PBEParameterSpec(byte[] salt,int iterationCount){  this.salt=salt.clone();  this.iterationCount=iterationCount;}  }
class C{  public CodenvyLicense create(String licenseText) throws InvalidLicenseException {  License license=LicenseValidator.validate(licenseText,publicKey,String.valueOf(productId),null,null,null,null);  ValidationStatus licenseValidationStatus=license.getValidationStatus();  if (licenseValidationStatus != ValidationStatus.LICENSE_VALID) {    throw new InvalidLicenseException("Codenvy license is not valid");  }  HashMap<String,String> customSignedFeatures=license.getLicenseText().getCustomSignedFeatures();  try {    Map<LicenseFeature,String> features=customSignedFeatures.entrySet().stream().map(null).collect(toMap(null,null));    validateFeaturesFormat(features);    return new CodenvyLicense(licenseText,features);  } catch (  IllegalArgumentException e) {    throw new InvalidLicenseException(e.getMessage(),e);  }}  }
class C{  private boolean isApplicationHasBeenUpdated(){  return pluginInternalPrefs.getAppBuildVersion() != VersionHelper.applicationVersionCode(cordova.getActivity());}  }
class C{  public static IPath findSourcesJarForClassesJar(IPath jarPath){  String jarName=jarPath.lastSegment();  int indexOfJarExtension=jarName.lastIndexOf(".jar");  if (indexOfJarExtension > -1) {    String sourceJarName=jarName.substring(0,indexOfJarExtension) + "-sources.jar";    IPath sourceJarPath=jarPath.removeLastSegments(1).append(sourceJarName);    if (sourceJarPath.toFile().exists()) {      return sourceJarPath;    }  }  return null;}  }
class C{  @PostConstruct public void init() throws Exception {  if (hosts == null) {    throw new IllegalArgumentException("Hosts property not set ");  }  determineHostsAsProperty();  if (hosts.startsWith("embedded")) {synchronized (SYNC) {      if (node == null) {        node=new ElasticsearchEmbeddedNode();      }    }    client=node.getClient();  } else {    String[] hostsArray=hosts.split(",");    Settings settings=ImmutableSettings.settingsBuilder().put("cluster.name",cluster).build();    client=new TransportClient(settings);    for (    String aHostsArray : hostsArray) {      String s=aHostsArray.trim();      String[] host=s.split(":");      if (log.isLoggable(Level.FINE)) {        log.fine(" Connecting to elasticsearch host. [" + host[0] + ":"+ host[1]+ "]");      }      client=((TransportClient)client).addTransportAddress(new InetSocketTransportAddress(host[0],new Integer(host[1])));    }  }}  }
class C{  DLockGrantToken handleLockQuery(DLockQueryMessage query) throws InterruptedException {  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantor.handleLockQuery] {}",query);  }  if (acquireDestroyReadLock(0)) {    try {      checkDestroyed();      return getGrantToken(query.objectName);    }  finally {      releaseDestroyReadLock();    }  }  return null;}  }
class C{  public static boolean ask(int WindowNo,Container c,String AD_Message){  return ask(WindowNo,c,AD_Message,null);}  }
class C{  public String toString(){  return dimension + ":<" + point+ ">";}  }
class C{  @Override public void draw(DrawContext dc){  if (this.program == null || !this.program.useProgram(dc)) {    return;  }  this.program.enableTexture(false);  this.program.loadColor(this.color);  this.program.loadModelviewProjection(this.mvpMatrix);  if (!this.enableDepthTest) {    GLES20.glDisable(GLES20.GL_DEPTH_TEST);  }  GLES20.glLineWidth(this.lineWidth);  dc.bindBuffer(GLES20.GL_ARRAY_BUFFER,0);  FloatBuffer buffer=dc.scratchBuffer(this.vertexPoints.length * 4).asFloatBuffer();  buffer.clear();  buffer.put(this.vertexPoints).flip();  GLES20.glVertexAttribPointer(0,3,GLES20.GL_FLOAT,false,0,buffer);  GLES20.glDrawArrays(GLES20.GL_LINES,0,(buffer.remaining() / 3));  if (!this.enableDepthTest) {    GLES20.glEnable(GLES20.GL_DEPTH_TEST);  }  GLES20.glLineWidth(1);}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public boolean isEditableArchivoUbicacion(String idUbicacion){  if (_huecoDBEntity.getNumHuecosUbicacion(idUbicacion) > 0)   return false;  return true;}  }
class C{  private boolean changeTargetFolder(SourceGroup location,String packageName) throws IOException {  if (!Utilities.compareObjects(location,this.location) || !Utilities.compareObjects(packageName,this.packageName)) {    this.location=location;    this.packageName=packageName;    if (location != null && packageName != null) {      targetFolder=SourceGroups.getFolderForPackage(location,packageName,false);    } else {      targetFolder=null;    }    return true;  }  return false;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  @Override final public void valueAt(final long entryIndex,final Tuple tuple){  rangeCheckSpannedTupleIndex(entryIndex);  int childIndex=0;  long remaining=entryIndex;  final int nkeys=getKeyCount();  for (; childIndex <= nkeys; childIndex++) {    final long nspanned=getChildEntryCount(childIndex);    if (remaining < nspanned) {      break;    }    remaining-=nspanned;    assert remaining >= 0;  }  final AbstractNode<?> child=getChild(childIndex);  child.valueAt(remaining,tuple);}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){}  }
class C{  @Override public boolean canSpawnPig(World world,double x,double y,double z){  return true;}  }
class C{  public MalformedConfigurationException(String message,Exception e){  super(message,e);}  }
class C{  private ArrayList<PROCLUSCluster> assignPoints(ArrayDBIDs m_current,long[][] dimensions,Relation<V> database){  ModifiableDBIDs[] clusterIDs=new ModifiableDBIDs[dimensions.length];  for (int i=0; i < m_current.size(); i++) {    clusterIDs[i]=DBIDUtil.newHashSet();  }  DBIDArrayIter m_i=m_current.iter();  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {    V p=database.get(it);    double minDist=Double.NaN;    int best=-1, i=0;    for (m_i.seek(0); m_i.valid(); m_i.advance(), i++) {      V m=database.get(m_i);      double currentDist=manhattanSegmentalDistance(p,m,dimensions[i]);      if (!(minDist <= currentDist)) {        minDist=currentDist;        best=i;      }    }    assert best >= 0;    ModifiableDBIDs ids=clusterIDs[best];    ids.add(it);  }  ArrayList<PROCLUSCluster> clusters=new ArrayList<>(m_current.size());  for (int i=0; i < dimensions.length; i++) {    ModifiableDBIDs objectIDs=clusterIDs[i];    if (!objectIDs.isEmpty()) {      long[] clusterDimensions=dimensions[i];      double[] centroid=Centroid.make(database,objectIDs).getArrayRef();      clusters.add(new PROCLUSCluster(objectIDs,clusterDimensions,centroid));    } else {      clusters.add(null);    }  }  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append('\n');    msg.append("clusters ").append(clusters).append('\n');    LOG.debugFine(msg.toString());  }  return clusters;}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  private void processCGMirrors(CloseableIterator<CIMInstance> syncVolumeIter,WBEMClient client,DbClient dbClient,StorageSystem storage,List<BlockMirror> mirrors,String repGroupID) throws Exception {  Map<String,BlockMirror> volIdToMirrorMap=new HashMap<String,BlockMirror>();  for (  BlockMirror mirror : mirrors) {    Volume volume=dbClient.queryObject(Volume.class,mirror.getSource());    volIdToMirrorMap.put(volume.getNativeId(),mirror);  }  Calendar now=Calendar.getInstance();  while (syncVolumeIter.hasNext()) {    CIMInstance syncVolume=syncVolumeIter.next();    CIMObjectPath syncVolumePath=syncVolume.getObjectPath();    String syncDeviceID=syncVolumePath.getKeyValue(SmisConstants.CP_DEVICE_ID).toString();    String elementName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_ELEMENT_NAME);    String wwn=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_WWN_NAME);    String alternateName=CIMPropertyFactory.getPropertyValue(syncVolume,SmisConstants.CP_NAME);    String volumeDeviceID=tgtToSrcMap.get(syncDeviceID);    BlockMirror mirror=volIdToMirrorMap.get(volumeDeviceID);    mirror.setReplicationGroupInstance(repGroupID);    mirror.setProvisionedCapacity(getProvisionedCapacityInformation(client,syncVolume));    mirror.setAllocatedCapacity(getAllocatedCapacityInformation(client,syncVolume));    mirror.setWWN(wwn);    mirror.setAlternateName(alternateName);    mirror.setNativeId(syncDeviceID);    mirror.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,mirror));    mirror.setDeviceLabel(elementName);    mirror.setInactive(false);    mirror.setCreationTime(now);    CIMInstance syncInstance=getStorageSyncInstanceFromVolume(client,syncVolumePath);    mirror.setSynchronizedInstance(syncInstance.getObjectPath().toString());    mirror.setSyncType(CIMPropertyFactory.getPropertyValue(syncInstance,SmisConstants.CP_SYNC_TYPE));    dbClient.persistObject(mirror);    _log.info(String.format("For target mirror volume %1$s, going to set BlockMirror %2$s nativeId to %3$s (%4$s). Associated volume is %5$s",syncVolumePath.toString(),mirror.getId().toString(),syncDeviceID,elementName,volumeDeviceID));  }}  }
class C{  static String createJsniBlock(IJavaProject project,String body,int indentationUnits){  StringBuilder sb=new StringBuilder();  sb.append("/*-{\n");  sb.append(CodeFormatterUtil.createIndentString(indentationUnits + 1,project));  if (body != null) {    sb.append(body);  }  sb.append("\n");  sb.append(CodeFormatterUtil.createIndentString(indentationUnits,project));  sb.append("}-*/;\n");  return sb.toString();}  }
class C{  @Override public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  return drawImage(img,x,y,width,height,Color.WHITE,observer);}  }
class C{  public void testManagerCanInsertAnElementIntoFileThreeLevelsDeep() throws Exception {  Document document=builder.newDocument();  Element application=document.createElement("Application");  document.appendChild(application);  Element foo=document.createElement("foo");  application.appendChild(foo);  Element bar=document.createElement("bar");  foo.appendChild(bar);  util.saveXml(document,TEST_FILE);  fileHandler.createFile(TEST_FILE);  manager.setFile(TEST_FILE);  manager.loadFile();  manager.insertElementsUnderXPath("<subnode property='hello' />","//Application/foo/bar");  manager.writeFile();  String xml=fileHandler.readTextFile(TEST_FILE,"UTF-8");  XMLAssert.assertXpathEvaluatesTo("hello","//Application/foo/bar/subnode/@property",xml);}  }
class C{  @HLEFunction(nid=0x9FA03CD3,version=150,checkInsideInterrupt=true) public int sceKernelDeleteThread(@CheckArgument("checkThreadIDAllow0") int uid){  SceKernelThreadInfo thread=threadMap.get(uid);  if (!thread.isStopped()) {    return ERROR_KERNEL_THREAD_IS_NOT_DORMANT;  }  setToBeDeletedThread(thread);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_DELETE);  return 0;}  }
class C{  public void checkRSS(){  if (getTweetRSS().isEmpty()) {    return;  }  log("Processing RSS",Level.FINE,getTweetRSS());  try {    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTRSS);    long last=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    int rssIndex=0;    String keywordsText="";    List<String> keywords=new ArrayList<String>();    for (    String rss : getTweetRSS()) {      if (rssIndex < getRssKeywords().size()) {        keywordsText=getRssKeywords().get(rssIndex);        keywords=new TextStream(keywordsText.toLowerCase()).allWords();      }      rssIndex++;      TextStream stream=new TextStream(rss);      String prefix=stream.upToAll("http").trim();      if (prefix.isEmpty()) {        prefix="RSS:";      }      prefix=prefix + " ";      String url=stream.nextWord();      String postfix=" " + stream.upToEnd().trim();      List<Map<String,Object>> feed=getBot().awareness().getSense(Http.class).parseRSSFeed(new URL(url),last);      if (feed != null) {        long max=0;        int count=0;        this.errors=0;        log("Processing RSS feed",Level.FINE,feed.size(),rss);        for (int index=feed.size() - 1; index >= 0; index--) {          Map<String,Object> entry=feed.get(index);          long time=(Long)entry.get("published");          if ((System.currentTimeMillis() - time) > DAY) {            continue;          }          if (time > last) {            if (count > this.maxFeed) {              break;            }            if (this.errors > this.maxErrors) {              break;            }            String text=(String)entry.get("title");            if (!keywords.isEmpty()) {              if (!new TextStream(text.toLowerCase()).allWords().containsAll(keywords)) {                log("Skipping RSS, missing keywords",Level.FINE,keywords,text);                continue;              }            }            log("Tweeting RSS",Level.FINE,entry.get("title"));            text=prefix + text + postfix;            if (text.length() > 120) {              text=text.substring(0,120);            }            tweet(text + " " + entry.get("link"),0L);            Utils.sleep(500);            count++;            if (time > max) {              max=time;            }          }        }        if (max != 0) {          twitter.setRelationship(Primitive.LASTRSS,memory.createVertex(max));          memory.save();        }      }    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public void testPutxIfAbsentTxOptimistic() throws Exception {  testPutxIfAbsentTx(keyForNode(0),OPTIMISTIC);  if (gridCount() > 1)   testPutxIfAbsentTx(keyForNode(1),OPTIMISTIC);}  }
class C{  protected IndexData mutateAddIndexData(TableUpdater mutator) throws IOException {  IndexBuilder index=mutator.getIndex();  JetFormat format=mutator.getFormat();  mutator.addTdefLen(format.SIZE_INDEX_DEFINITION + format.SIZE_INDEX_COLUMN_BLOCK);  ByteBuffer tableBuffer=loadCompleteTableDefinitionBufferForUpdate(mutator);  IndexData newIdxData=null;  boolean success=false;  try {    ByteUtil.forward(tableBuffer,39);    tableBuffer.putInt(_indexCount + 1);    tableBuffer.position(format.SIZE_TDEF_HEADER + (_indexCount * format.SIZE_INDEX_DEFINITION));    ByteUtil.insertEmptyData(tableBuffer,format.SIZE_INDEX_DEFINITION);    IndexData.writeRowCountDefinitions(mutator,tableBuffer,1);    ByteUtil.forward(tableBuffer,(_columns.size() * format.SIZE_COLUMN_DEF_BLOCK));    skipNames(tableBuffer,_columns.size());    ByteUtil.forward(tableBuffer,(_indexCount * format.SIZE_INDEX_COLUMN_BLOCK));    TableMutator.IndexDataState idxDataState=mutator.getIndexDataState(index);    int rootPageNumber=getPageChannel().allocateNewPage();    Map.Entry<Integer,Integer> umapInfo=addUsageMaps(1,rootPageNumber);    idxDataState.setRootPageNumber(rootPageNumber);    idxDataState.setUmapPageNumber(umapInfo.getKey());    idxDataState.setUmapRowNumber(umapInfo.getValue().byteValue());    int idxDataDefPos=tableBuffer.position();    ByteUtil.insertEmptyData(tableBuffer,format.SIZE_INDEX_COLUMN_BLOCK);    IndexData.writeDefinition(mutator,tableBuffer,idxDataState,null);    validateTableDefUpdate(mutator,tableBuffer);    tableBuffer.position(0);    newIdxData=IndexData.create(this,tableBuffer,idxDataState.getIndexDataNumber(),format);    tableBuffer.position(idxDataDefPos);    newIdxData.read(tableBuffer,_columns);    writeTableDefinitionBuffer(tableBuffer,_tableDefPageNumber,mutator,mutator.getNextPages());    success=true;  }  finally {    if (!success) {      _tableDefBufferH.invalidate();    }  }  for (  IndexData.ColumnDescriptor iCol : newIdxData.getColumns()) {    _indexColumns.add(iCol.getColumn());  }  ++_indexCount;  _indexDatas.add(newIdxData);  completeTableMutation(tableBuffer);  populateIndexData(newIdxData);  return newIdxData;}  }
class C{  public WorkSource(WorkSource orig){  if (orig == null) {    mNum=0;    return;  }  mNum=orig.mNum;  if (orig.mUids != null) {    mUids=orig.mUids.clone();    mNames=orig.mNames != null ? orig.mNames.clone() : null;  } else {    mUids=null;    mNames=null;  }}  }
class C{  public static int pullChildStopFacilitiesTogether(TransitSchedule schedule,Network network){  int nPulled=0;  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      boolean hasStopLoop=ScheduleTools.routeHasStopSequenceLoop(transitRoute);      if (transitRoute.getRoute() != null) {        TransitRouteStop currentStop;        List<TransitRouteStop> routeStops=transitRoute.getStops();        Iterator<TransitRouteStop> stopsIterator=routeStops.iterator();        List<Id<Link>> linkIdList=ScheduleTools.getTransitRouteLinkIds(transitRoute);        List<Link> linkList=NetworkTools.getLinksFromIds(network,linkIdList);        currentStop=stopsIterator.next();        if (!hasStopLoop) {          Set<Link> inlinksWithSameMode=NetworkTools.filterLinkSetExactlyByModes(linkList.get(0).getFromNode().getInLinks().values(),linkList.get(0).getAllowedModes());          Id<Link> closerLinkBefore=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),inlinksWithSameMode);          if (closerLinkBefore != null) {            linkIdList.add(0,closerLinkBefore);            nPulled++;          }        }        currentStop=stopsIterator.next();        for (int i=1; i < linkList.size() - 1; i++) {          if (linkList.get(i).toString().equals("114813")) {            log.debug("");          }          if (linkList.get(i).getId().equals(currentStop.getStopFacility().getLinkId())) {            Set<Link> testSet=new HashSet<>();            testSet.add(linkList.get(i));            testSet.add(linkList.get(i - 1));            testSet.add(linkList.get(i + 1));            Id<Link> check=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),testSet);            if (check != null)             nPulled++;            if (stopsIterator.hasNext()) {              currentStop=stopsIterator.next();            }          }        }        if (!hasStopLoop) {          currentStop=routeStops.get(routeStops.size() - 1);          Set<Link> outlinksWithSameMode=NetworkTools.filterLinkSetExactlyByModes(linkList.get(linkList.size() - 1).getToNode().getOutLinks().values(),linkList.get(linkList.size() - 1).getAllowedModes());          Id<Link> closerLinkAfter=useCloserRefLinkForChildStopFacility(schedule,network,transitRoute,currentStop.getStopFacility(),outlinksWithSameMode);          if (closerLinkAfter != null) {            linkIdList.add(closerLinkAfter);            nPulled++;          }        }        transitRoute.setRoute(RouteUtils.createNetworkRoute(linkIdList,network));      }    }  }  return nPulled;}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,Class<?> parentClass){  while (objectClass != null) {    if (objectClass == parentClass)     return true;    objectClass=objectClass.getSuperclass();  }  return false;}  }
class C{  public void testDateSort() throws Exception {  checkSortMissingDefault("datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private void maybeAddOrUpdateKeyspace(KSMetaData expected){  KSMetaData defined=Schema.instance.getKSMetaData(expected.name);  if (defined == null) {    maybeAddKeyspace(expected);    defined=Schema.instance.getKSMetaData(expected.name);  }  for (  CFMetaData expectedTable : expected.cfMetaData().values()) {    CFMetaData definedTable=defined.cfMetaData().get(expectedTable.cfName);    if (definedTable == null || !definedTable.equals(expectedTable))     MigrationManager.forceAnnounceNewColumnFamily(expectedTable);  }}  }
class C{  public static boolean isReilRegister(final String value){  Preconditions.checkNotNull(value,"Value argument can not be null");  return com.google.security.zynamics.reil.ReilHelpers.isTemporaryRegister(value);}  }
class C{  public void changeAtom(FixedCharAtom a){  textSymbol=false;  type=-1;  el=a;}  }
class C{  private AST(int level){switch (level) {case JLS2_INTERNAL:case JLS3:    this.apiLevel=level;  this.scanner=new Scanner(true,true,false,ClassFileConstants.JDK1_3,ClassFileConstants.JDK1_5,null,null,true);break;case JLS4:this.apiLevel=level;this.scanner=new Scanner(true,true,false,ClassFileConstants.JDK1_7,ClassFileConstants.JDK1_7,null,null,true);break;default :throw new IllegalArgumentException("Unsupported JLS level");}}  }
class C{  public void dispose(){  if (frontScene != null) {    frontScene.dispose();  }  frontScene=null;  if (backScene != null) {    backScene.dispose();  }  backScene=null;  if (staticScene != null) {    staticScene.dispose();  }  staticScene=null;}  }
class C{  public void addArc(DigicoreActivity origin,DigicoreActivity destination){  if (origin == null || destination == null) {    throw new RuntimeException("Either the origin or destination facilities, or both, are NULL.");  }  if (origin.getFacilityId() == null || destination.getFacilityId() == null) {    throw new RuntimeException("Either the origin or destination facility Id, or both, are NULL.");  }  Pair<String> typePair=new Pair<String>(origin.getType(),destination.getType());  Pair<Id<ActivityFacility>> idPair=new Pair<Id<ActivityFacility>>(origin.getFacilityId(),destination.getFacilityId());  if (!this.containsVertex(origin.getFacilityId())) {    this.addVertex(origin.getFacilityId());    this.coord.put(origin.getFacilityId(),origin.getCoord());  }  if (!this.containsVertex(destination.getFacilityId())) {    this.addVertex(destination.getFacilityId());    this.coord.put(destination.getFacilityId(),destination.getCoord());  }  if (!this.activityTypes.contains(origin.getType())) {    this.activityTypes.add(origin.getType());  }  if (!this.activityTypes.contains(destination.getType())) {    this.activityTypes.add(destination.getType());  }  Tuple<Pair<Id<ActivityFacility>>,Pair<String>> tuple=new Tuple<Pair<Id<ActivityFacility>>,Pair<String>>(idPair,typePair);  if (!this.containsEdge(idPair)) {    this.addEdge(idPair,origin.getFacilityId(),destination.getFacilityId(),EdgeType.DIRECTED);    weights.put(tuple,1);  } else {    if (!weights.containsKey(tuple)) {      weights.put(tuple,1);    } else {      weights.put(tuple,weights.get(tuple) + 1);    }  }}  }
class C{  private static String insertAtMatchOnOwnLine(final Pattern pattern,final String orig,final String insert){  final Matcher matcher=pattern.matcher(orig);  final boolean found=matcher.find();  final int location=found ? matcher.start() : orig.length();  final StringBuilder builder=new StringBuilder(orig.length() + insert.length() + 2);  builder.append(orig.substring(0,location));  if (builder.charAt(builder.length() - 1) != '\n') {    builder.append('\n');  }  builder.append(insert);  final String end=orig.substring(location);  if (!end.startsWith("\n")) {    builder.append('\n');  }  builder.append(end);  return builder.toString();}  }
class C{  public DefaultDocumentReader(String document){  this.document=document;  reset();}  }
class C{  private void helperProjectsPrgTest(String[][] packageNames,String newPackageName,String[][][] cuNames) throws Exception {  IJavaProject projectPrg=null;  IJavaProject projectTest=null;  try {    projectPrg=JavaProjectHelper.createJavaProject("RenamePack1","bin");    assertNotNull(JavaProjectHelper.addRTJar(projectPrg));    IPackageFragmentRoot srcPrg=JavaProjectHelper.addSourceContainer(projectPrg,"srcPrg");    Map optionsPrg=projectPrg.getOptions(false);    JavaProjectHelper.set15CompilerOptions(optionsPrg);    projectPrg.setOptions(optionsPrg);    projectTest=JavaProjectHelper.createJavaProject("RenamePack2","bin");    assertNotNull(JavaProjectHelper.addRTJar(projectTest));    IPackageFragmentRoot srcTest=JavaProjectHelper.addSourceContainer(projectTest,"srcTest");    Map optionsTest=projectTest.getOptions(false);    JavaProjectHelper.set15CompilerOptions(optionsTest);    projectTest.setOptions(optionsTest);    JavaProjectHelper.addRequiredProject(projectTest,projectPrg);    helperMultiProjects(new IPackageFragmentRoot[]{srcPrg,srcTest},packageNames,newPackageName,cuNames);  }  finally {    JavaProjectHelper.delete(projectPrg);    JavaProjectHelper.delete(projectTest);  }}  }
class C{  public String toString(){  return count + " " + name;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.enumConstValue(cp.getUtf8Info(typeIndex),getValue());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.IMPORT_SCOPE__IMPORTS:    getImports().clear();  getImports().addAll((Collection<? extends org.yakindu.base.types.Package>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean wasClean(){  return wasClean;}  }
class C{  public void add(Collection<Expression> triggerExpressions,final ConversationStates state,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action,final String label){  if (triggerExpressions != null && !triggerExpressions.isEmpty()) {    stateTransitionTable.add(new Transition(state,triggerExpressions,condition,secondary,nextState,reply,action,label));  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList createFullCopy(@PathParam("id") URI id,VolumeFullCopyCreateParam param) throws InternalException {  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  Volume parentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  checkForPendingTasks(Arrays.asList(parentVolume.getTenant().getURI()),Arrays.asList(parentVolume));  return getFullCopyManager().createFullCopy(id,param);}  }
class C{  public Rule compileExpression(final String expression){  RuleFactory factory=RuleFactory.getInstance();  Stack<Object> stack=new Stack<>();  InFixToPostFix.CustomTokenizer tokenizer=new InFixToPostFix.CustomTokenizer(expression);  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (token.startsWith("'") || token.startsWith("\"")) {      String quoteChar=token.substring(0,1);      token=token.substring(1);      while (!token.endsWith(quoteChar) && tokenizer.hasMoreTokens()) {        token=token + " " + tokenizer.nextToken();      }      if (token.length() > 0) {        token=token.substring(0,token.length() - 1);      }    } else {      if (factory.isRule(token)) {        Rule r=factory.getRule(token,stack);        stack.push(r);        token=null;      }    }    if (token != null && token.length() > 0) {      stack.push(token);    }  }  if ((stack.size() == 1) && (!(stack.peek() instanceof Rule))) {    Object o=stack.pop();    stack.push("MSG");    stack.push(o);    return factory.getRule("~=",stack);  }  if ((stack.size() != 1) || (!(stack.peek() instanceof Rule))) {    throw new IllegalArgumentException("invalid expression: " + expression);  } else {    return (Rule)stack.pop();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.014 -0400",hash_original_method="0E5ACAF6230031E98DA1D296D3786B46",hash_generated_method="3F65F0D5FD7F2630E6CB680942EDD588") public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.toArray();  }  finally {    lock.unlock();  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(new Option(RANGE,"use range partitioner"));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("input path").create(INPUT));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("output path").create(OUTPUT));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("number of nodes").create(NUM_NODES));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("number of partitions").create(NUM_PARTITIONS));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(INPUT) || !cmdline.hasOption(OUTPUT) || !cmdline.hasOption(NUM_NODES)|| !cmdline.hasOption(NUM_PARTITIONS)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String inPath=cmdline.getOptionValue(INPUT);  String outPath=cmdline.getOptionValue(OUTPUT);  int nodeCount=Integer.parseInt(cmdline.getOptionValue(NUM_NODES));  int numParts=Integer.parseInt(cmdline.getOptionValue(NUM_PARTITIONS));  boolean useRange=cmdline.hasOption(RANGE);  LOG.info("Tool name: " + PartitionGraph.class.getSimpleName());  LOG.info(" - input dir: " + inPath);  LOG.info(" - output dir: " + outPath);  LOG.info(" - num partitions: " + numParts);  LOG.info(" - node cnt: " + nodeCount);  LOG.info(" - use range partitioner: " + useRange);  Configuration conf=getConf();  conf.setInt("NodeCount",nodeCount);  Job job=Job.getInstance(conf);  job.setJobName(PartitionGraph.class.getSimpleName() + ":" + inPath);  job.setJarByClass(PartitionGraph.class);  job.setNumReduceTasks(numParts);  FileInputFormat.setInputPaths(job,new Path(inPath));  FileOutputFormat.setOutputPath(job,new Path(outPath));  job.setInputFormatClass(NonSplitableSequenceFileInputFormat.class);  job.setOutputFormatClass(SequenceFileOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(PageRankNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(PageRankNode.class);  if (useRange) {    job.setPartitionerClass(RangePartitioner.class);  }  FileSystem.get(conf).delete(new Path(outPath),true);  job.waitForCompletion(true);  return 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.215 -0500",hash_original_method="B85B2CE2D9925643AD72FE26FAC534DC",hash_generated_method="B2136AFE62B7246CAB629FD53700B2CA") public CharacterPickerDialog(Context context,View view,Editable text,String options,boolean insert){  super(context,com.android.internal.R.style.Theme_Panel);  mView=view;  mText=text;  mOptions=options;  mInsert=insert;  mInflater=LayoutInflater.from(context);}  }
class C{  private Rectangle2D createAlignedRectangle2D(Size2D dimensions,Rectangle2D frame,HorizontalAlignment hAlign,VerticalAlignment vAlign){  double x=Double.NaN;  double y=Double.NaN;  if (hAlign == HorizontalAlignment.LEFT) {    x=frame.getX();  } else   if (hAlign == HorizontalAlignment.CENTER) {    x=frame.getCenterX() - (dimensions.width / 2.0);  } else   if (hAlign == HorizontalAlignment.RIGHT) {    x=frame.getMaxX() - dimensions.width;  }  if (vAlign == VerticalAlignment.TOP) {    y=frame.getY();  } else   if (vAlign == VerticalAlignment.CENTER) {    y=frame.getCenterY() - (dimensions.height / 2.0);  } else   if (vAlign == VerticalAlignment.BOTTOM) {    y=frame.getMaxY() - dimensions.height;  }  return new Rectangle2D.Double(x,y,dimensions.width,dimensions.height);}  }
class C{  public OutputStream write(){  data=null;  write=new ByteArrayOutputStream();  return write;}  }
class C{  public boolean draw(Canvas canvas){  update();  final float centerX=mBounds.centerX();  final float centerY=mBounds.height() - mRadius;  canvas.scale(1.f,Math.min(mGlowScaleY,1.f) * mBaseGlowScale,centerX,0);  final float displacement=Math.max(0,Math.min(mDisplacement,1.f)) - 0.5f;  float translateX=mBounds.width() * displacement / 2;  mPaint.setAlpha((int)(0xff * mGlowAlpha));  canvas.drawCircle(centerX + translateX,centerY,mRadius,mPaint);  boolean oneLastFrame=false;  if (mState == STATE_RECEDE && mGlowScaleY == 0) {    mState=STATE_IDLE;    oneLastFrame=true;  }  return mState != STATE_IDLE || oneLastFrame;}  }
class C{  private AnnotationMirror resultAnnotationHandler(TypeMirror resultType,List<?> results,Tree tree){  Class<?> resultClass=ValueCheckerUtils.getClassFromType(resultType);  results.remove(null);  if (results.size() == 0) {    return UNKNOWNVAL;  } else   if (resultClass == Boolean.class || resultClass == boolean.class) {    HashSet<Boolean> boolVals=new HashSet<Boolean>(results.size());    for (    Object o : results) {      boolVals.add((Boolean)o);    }    return createBooleanAnnotation(new ArrayList<Boolean>(boolVals));  } else   if (resultClass == Double.class || resultClass == double.class || resultClass == Float.class || resultClass == float.class || resultClass == Integer.class || resultClass == int.class || resultClass == Long.class || resultClass == long.class || resultClass == Short.class || resultClass == short.class || resultClass == Byte.class || resultClass == byte.class) {    HashSet<Number> numberVals=new HashSet<>(results.size());    List<Character> charVals=new ArrayList<>();    for (    Object o : results) {      if (o instanceof Character) {        charVals.add((Character)o);      } else {        numberVals.add((Number)o);      }    }    if (numberVals.isEmpty()) {      return createCharAnnotation(charVals);    }    return createNumberAnnotationMirror(new ArrayList<Number>(numberVals));  } else   if (resultClass == char.class || resultClass == Character.class) {    HashSet<Character> intVals=new HashSet<>(results.size());    for (    Object o : results) {      if (o instanceof Number) {        intVals.add((char)((Number)o).intValue());      } else {        intVals.add((char)o);      }    }    return createCharAnnotation(new ArrayList<Character>(intVals));  } else   if (resultClass == String.class) {    HashSet<String> stringVals=new HashSet<String>(results.size());    for (    Object o : results) {      stringVals.add((String)o);    }    return createStringAnnotation(new ArrayList<String>(stringVals));  } else   if (resultClass == byte[].class) {    HashSet<String> stringVals=new HashSet<String>(results.size());    for (    Object o : results) {      if (o instanceof byte[]) {        stringVals.add(new String((byte[])o));      } else {        stringVals.add(o.toString());      }    }    return createStringAnnotation(new ArrayList<String>(stringVals));  }  return UNKNOWNVAL;}  }
class C{  public SVGPath quadTo(double[] c1xy,double[] xy){  append(SVGConstants.PATH_QUAD_TO,c1xy[0],c1xy[1],xy[0],xy[1]);  return this;}  }
class C{  public void close(){  _client.destroy();}  }
class C{  public ShiftAddXorSignedStringMap(final Iterator<? extends CharSequence> iterator,final Object2LongFunction<? extends CharSequence> map,final int signatureWidth){  CharSequence s;  this.function=map;  this.width=signatureWidth;  this.defRetValue=-1;  shift=Long.SIZE - width;  mask=width == Long.SIZE ? 0 : (1L << width) - 1;  final int n=map.size();  signatures=LongArrayBitVector.getInstance().asLongBigList(signatureWidth).length(n);  for (int i=0; i < n; i++) {    s=iterator.next();    signatures.set(map.getLong(s),signature(s));  }  if (iterator.hasNext())   throw new IllegalStateException("Iterator provides more than " + n + " elements");}  }
class C{  StyledTabbedPaneUI(Style style){  this.style=style;}  }
class C{  protected void initStreamBufferSize(){  String streamBufferSizeParam=getInitParameter("streamBufferSize");  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));  if (isDebug()) {    log("streamBufferSize: " + getStreamBufferSize());  }}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public static int hashCode(int pre,String s){  int h=(s != null ? s.hashCode() : 0);  return 37 * pre + h;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetpublicid.class,args);}  }
class C{  private Volume prepareFullCopyVPlexVolume(String name,String fullCopySetName,int copyCount,int copyIndex,long size,BlockObject fcSourceObject,Project srcProject,VirtualArray srcVarray,VirtualPool srcVpool,URI srcSystemURI,Volume primaryVolume,Volume haVolume,String taskId,List<VolumeDescriptor> volumeDescriptors){  StringBuilder nameBuilder=new StringBuilder(name);  if (copyCount > 1) {    nameBuilder.append("-");    nameBuilder.append(copyIndex + 1);  }  Volume vplexCopyVolume=VPlexBlockServiceApiImpl.prepareVolumeForRequest(size,srcProject,srcVarray,srcVpool,srcSystemURI,NullColumnValueGetter.getNullURI(),nameBuilder.toString(),ResourceOperationTypeEnum.CREATE_VOLUME_FULL_COPY,taskId,_dbClient);  VolumeDescriptor vplexCopyVolumeDescr=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,srcSystemURI,vplexCopyVolume.getId(),null,null);  volumeDescriptors.add(vplexCopyVolumeDescr);  vplexCopyVolume.setAssociatedVolumes(new StringSet());  StringSet assocVolumes=vplexCopyVolume.getAssociatedVolumes();  assocVolumes.add(primaryVolume.getId().toString());  if (haVolume != null) {    assocVolumes.add(haVolume.getId().toString());  }  vplexCopyVolume.setAssociatedSourceVolume(fcSourceObject.getId());  if (VPlexUtil.isOpenStackBackend(fcSourceObject,_dbClient)) {    vplexCopyVolume.setSyncActive(Boolean.FALSE);  } else {    vplexCopyVolume.setSyncActive(Boolean.TRUE);  }  if (fcSourceObject instanceof Volume && ((Volume)fcSourceObject).getApplication(_dbClient) != null) {    vplexCopyVolume.setFullCopySetName(fullCopySetName);  }  _dbClient.persistObject(vplexCopyVolume);  return vplexCopyVolume;}  }
class C{  public SimpleUser(String username,Collection<String> connectionIdentifiers,Collection<String> connectionGroupIdentifiers){  this(username);  addReadPermissions(connectionPermissions,connectionIdentifiers);  addReadPermissions(connectionGroupPermissions,connectionGroupIdentifiers);}  }
class C{  public boolean hasAccessTokenExpired(){  return hasAccessTokenExpired(SystemClock.INSTANCE);}  }
class C{  public static AbSampleDialogFragment newInstance(int style,int theme){  AbSampleDialogFragment f=new AbSampleDialogFragment();  Bundle args=new Bundle();  args.putInt("style",style);  args.putInt("theme",theme);  f.setArguments(args);  return f;}  }
class C{  @Uninterruptible private static boolean isAddressAligned(Address address){  return (address.toLong() >> LOG_BYTES_IN_ADDRESS) << LOG_BYTES_IN_ADDRESS == address.toLong();}  }
class C{  public void testFloatValueNegative2(){  String a="-27467238945723645782";  float result=-2.7467239E19f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  protected final synchronized void propagate(float[] data,int samples,int channels,int rate){  if (mNext != null)   mNext.modify(data,samples,channels,rate);}  }
class C{  @Override public void scrollLines(int firstLine,int lastLine,int distance){  if (distance == 0 || firstLine > lastLine) {    return;  }  super.scrollLines(firstLine,lastLine,distance);  ScrollHint newHint=new ScrollHint(firstLine,lastLine,distance);  if (scrollHint == null) {    scrollHint=newHint;  } else   if (scrollHint == ScrollHint.INVALID) {  } else   if (scrollHint.matches(newHint)) {    scrollHint.distance+=newHint.distance;  } else {    this.scrollHint=ScrollHint.INVALID;  }}  }
class C{  private void listResolvedFunctions(){  outputArea.setText(OutputListGenerator.generate(callResolver.getResolvedAddresses()));  outputArea.setCaretPosition(0);}  }
class C{  public String prettyPrint(PrettyPrintOptions options){  if (metric != null || definition == null) {    String pp=getParent().prettyPrint(options);    if (pp != "") {      pp+=".";    }    String print_measure=prettyPrintObject(metric,options);    if (originType == OriginType.COMPARETO) {      return "compareTo(" + pp + print_measure+ ")";    } else     if (originType == OriginType.GROWTH) {      return "growth(" + pp + print_measure+ ")";    } else {      return pp + print_measure;    }  } else {    return definition.prettyPrint();  }}  }
class C{  @SuppressWarnings("unchecked") public Class<? extends Enum> enumType(){  return enumType;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.415 -0500",hash_original_method="D49C9B94E89B7FEA3320280273306438",hash_generated_method="F4B1FA9EAC4475E2ABA1C7D1DF88A643") public void addTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  if (branchId != null) {    this.terminatedServerTransactionsPendingAck.put(branchId,serverTransaction);  }}  }
class C{  public boolean allowsExecution(){  return state.get().allowsExecution(stats);}  }
class C{  public PowerLawGrowth(Type units){  super(units);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.538 -0400",hash_original_method="BE0D5E40F874D3650FB6D5A8818B0876",hash_generated_method="681C503EA00AFC1853FD69F6EF406FF1") public DRLCertFactory(){  super("DRLCertFactory",1.0,"ASN.1, DER, PkiPath, PKCS7");  put("CertificateFactory.X509","org.apache.harmony.security.provider.cert.X509CertFactoryImpl");  put("Alg.Alias.CertificateFactory.X.509","X509");}  }
class C{  public String name(){  return name;}  }
class C{  @Override protected String translate(final String name){  String translatedname=translateName(name);  return "data/sprites/spells/" + translatedname + ".png";}  }
class C{  public void logStatistics(){  LOG.statistics(new LongStatistic(PREFIX + ".distance-computations",distanceComputations));}  }
class C{  public Builder oneshot(final boolean oneshot){  this.oneshot=of(oneshot);  return this;}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  void show(JScrollPane view,Point pt){  if (view.getViewport().getView() instanceof JTree) {    showJTree(view,pt);  } else   if (view.getViewport().getView() instanceof JList) {    showJList(view,pt);  } else {    assert false : "Bad component type registered: " + view.getViewport().getView();  }}  }
class C{  public void updateGraphic(SimpleBeanObject object){  if (!(object instanceof SimpleBeanContainer)) {    throw new IllegalArgumentException(object + " not instance of SimpleBeanContainer");  }  SimpleBeanContainer bc=(SimpleBeanContainer)object;  OMGraphic graphic=super.getOMGraphicAt(0);  if (graphic instanceof OMRect) {    OMRect rect=(OMRect)graphic;    rect.setLocation(bc.getTopLatitude(),bc.getLeftLongitude(),bc.getBottomLatitude(),bc.getRightLongitude(),OMGraphicConstants.LINETYPE_RHUMB);  }}  }
class C{  public String toPS(){  StringBuffer sb=new StringBuffer("/");  sb.append(getFont().getPSName());  if (getFont().isBold())   sb.append(" Bold");  if (getFont().isItalic())   sb.append(" Italic");  sb.append(" ").append(getFont().getSize()).append(" selectfont");  return sb.toString();}  }
class C{  public static Border createDoubleBorder(int thickness,int color){  return createCSSBorder(TYPE_DOUBLE,thickness,color);}  }
class C{  protected void starting(){  if (momentos != null) {    for (int i=0; i < momentos.length; i++) {      momentos[i].cache();    }  }}  }
class C{  @Override public Socket createSocket(String host,int port,InetAddress clientAddress,int clientPort) throws IOException {  return new SSLSocketImpl(context,host,port,clientAddress,clientPort);}  }
class C{  public WebResourceResponse shouldInterceptRequest(WebView view,String url){  return null;}  }
class C{  protected void createAnchorsHierarchy(Vector<TempNode> anchors,final int numAnchors,final int startIdx,final int endIdx) throws Exception {  TempNode anchr1=m_RandomInitialAnchor ? getRandomAnchor(startIdx,endIdx) : getFurthestFromMeanAnchor(startIdx,endIdx);  TempNode amax=anchr1;  TempNode newAnchor;  Vector<double[]> anchorDistances=new Vector<double[]>(numAnchors - 1);  anchors.add(anchr1);  while (anchors.size() < numAnchors) {    newAnchor=new TempNode();    newAnchor.points=new MyIdxList();    Instance newpivot=m_Instances.instance(amax.points.getFirst().idx);    newAnchor.anchor=newpivot;    newAnchor.idx=amax.points.getFirst().idx;    setInterAnchorDistances(anchors,newAnchor,anchorDistances);    if (stealPoints(newAnchor,anchors,anchorDistances)) {      newAnchor.radius=newAnchor.points.getFirst().distance;    } else {      newAnchor.radius=0.0;    }    anchors.add(newAnchor);    amax=anchors.elementAt(0);    for (int i=1; i < anchors.size(); i++) {      newAnchor=anchors.elementAt(i);      if (newAnchor.radius > amax.radius) {        amax=newAnchor;      }    }  }}  }
class C{  @Override public SysMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  public void pauseMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Request to pause migrations on VPlex at {}",_baseURI);  _migrationMgr.pauseMigrations(migrationNames);}  }
class C{  @SuppressWarnings("unchecked") public List<V> values(){  int found=0;  ArrayList<V> result=new ArrayList<V>(m_size);  for (  OsmElement v : m_data) {    if (v != FREE_KEY && v != removedKey) {      result.add((V)v);      found++;      if (found >= m_size) {        break;      }    }  }  return result;}  }
class C{  private void createText(final boolean hasIcon,final boolean hasTitle){  this.label=new ReadOnlyStyledText(this.composite,SWT.NONE | (this.verticalScrollbar ? SWT.V_SCROLL : SWT.NONE));  this.label.setText(this.text);  SWTGraphicUtil.applyHTMLFormating(this.label);  this.label.setEditable(false);  this.label.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));  final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);  if (this.height != -1) {    gd.heightHint=this.height;  }  if (hasIcon) {    gd.horizontalIndent=INDENT_NO_ICON;  } else {    gd.horizontalIndent=DEFAULT_MARGIN * 2;    if (hasTitle) {      gd.verticalIndent=INDENT_NO_ICON;    } else {      gd.verticalIndent=DEFAULT_MARGIN * 2;    }  }  this.label.setLayoutData(gd);}  }
class C{  public void mean(){  if (someField == 0) {    targetField=1;  } else {    if (someOtherField == 0) {      targetField=2;    } else {      if ((yetAnotherField != someField + someOtherField) || yetAnotherField == 0) {        targetField=3;      }    }  }  if (targetField == 0) {    someField=3;    if (!didIt)     System.out.println("Tests covered the mean DUPair!");    didIt=true;  }}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  private static Optional<Set<String>> includedFields(String resourceType,TypedParams<IncludedFieldsParams> includedFields){  IncludedFieldsParams typeIncludedFields=findIncludedFields(includedFields,resourceType);  if (fieldsForOtherResourceSpecified(includedFields,typeIncludedFields)) {    return Optional.of(Collections.<String>emptySet());  } else   if (noResourceIncludedFieldsSpecified(typeIncludedFields)) {    return Optional.empty();  } else {    return Optional.of(typeIncludedFields.getParams());  }}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Object clone(){  try {    Vector<E> vector=(Vector<E>)super.clone();    vector.elementData=elementData.clone();    return vector;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static int lineCount(File file) throws IOException {  BufferedReader reader=null;  int count=0;  try {    reader=new BufferedReader(new FileReader(file));    while (reader.readLine() != null) {      count++;    }  }  finally {    if (reader != null) {      reader.close();    }  }  return count;}  }
class C{  public ClustreamClustererAdapter(){  this.learner=((org.apache.samoa.moa.clusterers.Clusterer)this.learnerOption.getValue()).copy();  this.isInit=false;}  }
class C{  public static <S extends HasDropMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DropMoveEvent event=new DropMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public GuacamoleUnauthorizedException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public Iterator<Map.Entry<String,Object>> iterator(){  return data.entrySet().iterator();}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  public final void println(double d) throws IOException {  println(String.valueOf(d));}  }
class C{  public boolean isAutoWidth(){  return this.intervalDelegate.isAutoWidth();}  }
class C{  public StackedXYBarRenderer(){  this(0.0);}  }
class C{  private void copy(InputStream from,OutputStream to) throws IOException {  int n;  while ((n=from.read(copyBuf)) != -1)   to.write(copyBuf,0,n);}  }
class C{  public void addObjectAt(int type,Object obj,int idx){  if ((idx == 0) || (idx > numObjects)) {    addObject(type,obj);    return;  }  lastObjectIdx=idx;  for (int i=0; i < numObjects; i++) {    GdiObject gdi=(GdiObject)objectVector.get(i);    if (i == idx) {      gdi.Setup(type,obj);      break;    }  }}  }
class C{  @Override public void nodeCrashed(GfManagerAgent source,GemFireVM crashed){  try {    SystemMember member=findSystemMember(crashed,false);    super.nodeCrashed(source,crashed);    if (logger.isDebugEnabled()) {      logger.debug("Processing node crash for: {}",member);    }    try {      this.modelMBean.sendNotification(new Notification(NOTIF_MEMBER_CRASHED,((ManagedResource)member).getObjectName(),notificationSequenceNumber.addAndGet(1),crashed.getId().toString()));      if (isEmailNotificationEnabled) {        String mess=LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_CRASHED_IN_THE_DISTRIBUTED_SYSTEM_MEMBER_ID_0.toLocalizedString(new Object[]{crashed.getId().toString()});        sendEmail(EML_SUBJ_PRFX_GFE_ALERT + EML_SUBJ_ITEM_GFE_DS + getName()+ " <"+ LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_CRASHED.toLocalizedString()+ ">",mess);      }    } catch (    javax.management.MBeanException e) {      logger.warn(e.getMessage(),e);    }    SystemMemberType memberType=member.getType();    if (memberType.isApplication() || memberType.isCacheVm()) {      MBeanUtil.unregisterMBean((ManagedResource)member);    }  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  public boolean doit(CtClass clazz,MethodInfo minfo) throws CannotCompileException {  CodeAttribute codeAttr=minfo.getCodeAttribute();  if (codeAttr == null)   return false;  CodeIterator iterator=codeAttr.iterator();  boolean edited=false;  LoopContext context=new LoopContext(codeAttr.getMaxLocals());  while (iterator.hasNext())   if (loopBody(iterator,clazz,minfo,context))   edited=true;  ExceptionTable et=codeAttr.getExceptionTable();  int n=et.size();  for (int i=0; i < n; ++i) {    Handler h=new Handler(et,i,iterator,clazz,minfo);    edit(h);    if (h.edited()) {      edited=true;      context.updateMax(h.locals(),h.stack());    }  }  if (codeAttr.getMaxLocals() < context.maxLocals)   codeAttr.setMaxLocals(context.maxLocals);  codeAttr.setMaxStack(codeAttr.getMaxStack() + context.maxStack);  try {    if (edited)     minfo.rebuildStackMapIf6(clazz.getClassPool(),clazz.getClassFile2());  } catch (  BadBytecode b) {    throw new CannotCompileException(b.getMessage(),b);  }  return edited;}  }
class C{  static public String firstLetterCaps(String data){  String firstLetter=data.substring(0,1).toUpperCase();  String restLetters=data.substring(1).toLowerCase();  return firstLetter + restLetters;}  }
class C{  public Annotation(String typeName,ConstPool cp){  this(cp.addUtf8Info(Descriptor.of(typeName)),cp);}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return false;}  }
class C{  public static Double resolveBucketValue(InternalMultiBucketAggregation<?,? extends InternalMultiBucketAggregation.Bucket> agg,InternalMultiBucketAggregation.Bucket bucket,String aggPath,GapPolicy gapPolicy){  List<String> aggPathsList=AggregationPath.parse(aggPath).getPathElementsAsStringList();  return resolveBucketValue(agg,bucket,aggPathsList,gapPolicy);}  }
class C{  public boolean skipTo(long position) throws IOException {  if (position == position()) {    return true;  }  LogReader skipReader=dlm.getInputStream(position);  LogRecordWithInputStream logRecord=null;  try {    logRecord=nextLogRecord(skipReader);  } catch (  IOException ex) {    skipReader.close();    throw ex;  }  if (null == logRecord) {    return false;  }  currentPosition=logRecord.getOffset();  currentLogRecord=logRecord;  LogReader oldReader=reader;  reader=skipReader;  oldReader.close();  byte[] skipBuffer=new byte[SKIP_BUFFER_SIZE];  while (currentPosition < position) {    long bytesToRead=Math.min(position - currentPosition,SKIP_BUFFER_SIZE);    long bytesRead=read(skipBuffer,0,(int)bytesToRead);    if (bytesRead < bytesToRead) {      return false;    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass()))   return false; else   if (matchObj == this)   return true;  SIPRequest that=(SIPRequest)matchObj;  RequestLine rline=that.requestLine;  if (this.requestLine == null && rline != null)   return false; else   if (this.requestLine == rline)   return super.match(matchObj);  return requestLine.match(that.requestLine) && super.match(matchObj);}  }
class C{  public void addOffer(Offer offer){  offerModel.addOffer(offer);  view.displayOffer(offer);}  }
class C{  @Override public boolean contains(O object){  for (  ResultSet<O> resultSet : this.resultSets) {    if (resultSet.contains(object)) {      return true;    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.439 -0500",hash_original_method="4506E0F094FC2CBE2D517E6D81344EC6",hash_generated_method="204345F38C7966B6C07174090C44C8B9") public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  writer.print(prefix);  writer.print("mFragmentId=#");  writer.print(Integer.toHexString(mFragmentId));  writer.print(" mContainerId=#");  writer.print(Integer.toHexString(mContainerId));  writer.print(" mTag=");  writer.println(mTag);  writer.print(prefix);  writer.print("mState=");  writer.print(mState);  writer.print(" mIndex=");  writer.print(mIndex);  writer.print(" mWho=");  writer.print(mWho);  writer.print(" mBackStackNesting=");  writer.println(mBackStackNesting);  writer.print(prefix);  writer.print("mAdded=");  writer.print(mAdded);  writer.print(" mRemoving=");  writer.print(mRemoving);  writer.print(" mResumed=");  writer.print(mResumed);  writer.print(" mFromLayout=");  writer.print(mFromLayout);  writer.print(" mInLayout=");  writer.println(mInLayout);  writer.print(prefix);  writer.print("mHidden=");  writer.print(mHidden);  writer.print(" mDetached=");  writer.print(mDetached);  writer.print(" mMenuVisible=");  writer.print(mMenuVisible);  writer.print(" mHasMenu=");  writer.println(mHasMenu);  writer.print(prefix);  writer.print("mRetainInstance=");  writer.print(mRetainInstance);  writer.print(" mRetaining=");  writer.print(mRetaining);  writer.print(" mUserVisibleHint=");  writer.println(mUserVisibleHint);  if (mFragmentManager != null) {    writer.print(prefix);    writer.print("mFragmentManager=");    writer.println(mFragmentManager);  }  if (mActivity != null) {    writer.print(prefix);    writer.print("mActivity=");    writer.println(mActivity);  }  if (mParentFragment != null) {    writer.print(prefix);    writer.print("mParentFragment=");    writer.println(mParentFragment);  }  if (mArguments != null) {    writer.print(prefix);    writer.print("mArguments=");    writer.println(mArguments);  }  if (mSavedFragmentState != null) {    writer.print(prefix);    writer.print("mSavedFragmentState=");    writer.println(mSavedFragmentState);  }  if (mSavedViewState != null) {    writer.print(prefix);    writer.print("mSavedViewState=");    writer.println(mSavedViewState);  }  if (mTarget != null) {    writer.print(prefix);    writer.print("mTarget=");    writer.print(mTarget);    writer.print(" mTargetRequestCode=");    writer.println(mTargetRequestCode);  }  if (mNextAnim != 0) {    writer.print(prefix);    writer.print("mNextAnim=");    writer.println(mNextAnim);  }  if (mContainer != null) {    writer.print(prefix);    writer.print("mContainer=");    writer.println(mContainer);  }  if (mView != null) {    writer.print(prefix);    writer.print("mView=");    writer.println(mView);  }  if (mInnerView != null) {    writer.print(prefix);    writer.print("mInnerView=");    writer.println(mView);  }  if (mAnimatingAway != null) {    writer.print(prefix);    writer.print("mAnimatingAway=");    writer.println(mAnimatingAway);    writer.print(prefix);    writer.print("mStateAfterAnimating=");    writer.println(mStateAfterAnimating);  }  if (mLoaderManager != null) {    writer.print(prefix);    writer.println("Loader Manager:");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }  if (mChildFragmentManager != null) {    writer.print(prefix);    writer.println("Child " + mChildFragmentManager + ":");    mChildFragmentManager.dump(prefix + "  ",fd,writer,args);  }}  }
class C{  protected int[] collapse(int[] counts){  int[] new_counts=new int[counts.length >> 1];  for (int i=0; i < new_counts.length; ++i) {    new_counts[i]=counts[i] + counts[i + new_counts.length];  }  return new_counts;}  }
class C{  public StringTokenizer(String str){  this(str," \t\n\r\f",false);}  }
class C{  @Override public double[][] generateInstances(int[] indices) throws Exception {  double[][] values=new double[m_instances.numInstances()][];  for (int k=0; k < indices.length; k++) {    values[indices[k]]=new double[m_instances.numAttributes()];    for (int i=0; i < m_instances.numAttributes(); i++) {      if ((!m_weightingDimensions[i]) && (i != m_instances.classIndex())) {        if (m_instances.attribute(i).isNumeric()) {          double mean=0;          double val=m_random.nextGaussian();          if (!m_instances.instance(indices[k]).isMissing(i)) {            mean=m_instances.instance(indices[k]).value(i);          } else {            mean=m_globalMeansOrModes[i];          }          val*=m_kernelParams[indices[k]][i];          val+=mean;          values[indices[k]][i]=val;        } else {          double[] dist=new double[m_instances.attribute(i).numValues()];          for (int j=0; j < dist.length; j++) {            dist[j]=m_laplaceConst;          }          if (!m_instances.instance(indices[k]).isMissing(i)) {            dist[(int)m_instances.instance(indices[k]).value(i)]++;          } else {            dist[(int)m_globalMeansOrModes[i]]++;          }          Utils.normalize(dist);          double[] cumDist=computeCumulativeDistribution(dist);          double randomVal=m_random.nextDouble();          int instVal=0;          for (int j=0; j < cumDist.length; j++) {            if (randomVal <= cumDist[j]) {              instVal=j;              break;            }          }          values[indices[k]][i]=instVal;        }      }    }  }  return values;}  }
class C{  public NotificationResult fetchNotifications(NotificationBufferFilter filter,long startSequenceNumber,long timeout,int maxNotifications) throws InterruptedException {  logger.trace("fetchNotifications","starts");  if (startSequenceNumber < 0 || isDisposed()) {synchronized (this) {      return new NotificationResult(earliestSequenceNumber(),nextSequenceNumber(),new TargetedNotification[0]);    }  }  if (filter == null || startSequenceNumber < 0 || timeout < 0 || maxNotifications < 0) {    logger.trace("fetchNotifications","Bad args");    throw new IllegalArgumentException("Bad args to fetch");  }  if (logger.debugOn()) {    logger.trace("fetchNotifications","filter=" + filter + "; startSeq="+ startSequenceNumber+ "; timeout="+ timeout+ "; max="+ maxNotifications);  }  if (startSequenceNumber > nextSequenceNumber()) {    final String msg="Start sequence number too big: " + startSequenceNumber + " > "+ nextSequenceNumber();    logger.trace("fetchNotifications",msg);    throw new IllegalArgumentException(msg);  }  long endTime=System.currentTimeMillis() + timeout;  if (endTime < 0)   endTime=Long.MAX_VALUE;  if (logger.debugOn())   logger.debug("fetchNotifications","endTime=" + endTime);  long earliestSeq=-1;  long nextSeq=startSequenceNumber;  List<TargetedNotification> notifs=new ArrayList<TargetedNotification>();  while (true) {    logger.debug("fetchNotifications","main loop starts");    NamedNotification candidate;synchronized (this) {      if (earliestSeq < 0) {        earliestSeq=earliestSequenceNumber();        if (logger.debugOn()) {          logger.debug("fetchNotifications","earliestSeq=" + earliestSeq);        }        if (nextSeq < earliestSeq) {          nextSeq=earliestSeq;          logger.debug("fetchNotifications","nextSeq=earliestSeq");        }      } else       earliestSeq=earliestSequenceNumber();      if (nextSeq < earliestSeq) {        logger.trace("fetchNotifications","nextSeq=" + nextSeq + " < "+ "earliestSeq="+ earliestSeq+ " so may have lost notifs");        break;      }      if (nextSeq < nextSequenceNumber()) {        candidate=notificationAt(nextSeq);        if (!(filter instanceof ServerNotifForwarder.NotifForwarderBufferFilter)) {          try {            ServerNotifForwarder.checkMBeanPermission(this.mBeanServer,candidate.getObjectName(),"addNotificationListener");          } catch (          InstanceNotFoundException|SecurityException e) {            if (logger.debugOn()) {              logger.debug("fetchNotifications","candidate: " + candidate + " skipped. exception "+ e);            }            ++nextSeq;            continue;          }        }        if (logger.debugOn()) {          logger.debug("fetchNotifications","candidate: " + candidate);          logger.debug("fetchNotifications","nextSeq now " + nextSeq);        }      } else {        if (notifs.size() > 0) {          logger.debug("fetchNotifications","no more notifs but have some so don't wait");          break;        }        long toWait=endTime - System.currentTimeMillis();        if (toWait <= 0) {          logger.debug("fetchNotifications","timeout");          break;        }        if (isDisposed()) {          if (logger.debugOn())           logger.debug("fetchNotifications","dispose callled, no wait");          return new NotificationResult(earliestSequenceNumber(),nextSequenceNumber(),new TargetedNotification[0]);        }        if (logger.debugOn())         logger.debug("fetchNotifications","wait(" + toWait + ")");        wait(toWait);        continue;      }    }    ObjectName name=candidate.getObjectName();    Notification notif=candidate.getNotification();    List<TargetedNotification> matchedNotifs=new ArrayList<TargetedNotification>();    logger.debug("fetchNotifications","applying filter to candidate");    filter.apply(matchedNotifs,name,notif);    if (matchedNotifs.size() > 0) {      if (maxNotifications <= 0) {        logger.debug("fetchNotifications","reached maxNotifications");        break;      }      --maxNotifications;      if (logger.debugOn())       logger.debug("fetchNotifications","add: " + matchedNotifs);      notifs.addAll(matchedNotifs);    }    ++nextSeq;  }  int nnotifs=notifs.size();  TargetedNotification[] resultNotifs=new TargetedNotification[nnotifs];  notifs.toArray(resultNotifs);  NotificationResult nr=new NotificationResult(earliestSeq,nextSeq,resultNotifs);  if (logger.debugOn())   logger.debug("fetchNotifications",nr.toString());  logger.trace("fetchNotifications","ends");  return nr;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("lang");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNull("prevValueNull",newNode);}  }
class C{  public final void testPSSParameterSpec0203(){  try {    new PSSParameterSpec("SHA-1",null,MGF1ParameterSpec.SHA1,20,1);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public boolean offer(E o){  if (null == o) {    throw new NullPointerException();  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  private void writeValue(Object value) throws JSONException {  if (value instanceof Number) {    String string=JSONObject.numberToString((Number)value);    int integer=this.values.find(string);    if (integer != none) {      write(2,2);      writeAndTick(integer,this.values);      return;    }    if (value instanceof Integer || value instanceof Long) {      long longer=((Number)value).longValue();      if (longer >= 0 && longer < int14) {        write(0,2);        if (longer < int4) {          zero();          write((int)longer,4);          return;        }        one();        if (longer < int7) {          zero();          write((int)longer,7);          return;        }        one();        write((int)longer,14);        return;      }    }    write(1,2);    for (int i=0; i < string.length(); i+=1) {      write(bcd(string.charAt(i)),4);    }    write(endOfNumber,4);    this.values.register(string);  } else {    write(3,2);    writeJSON(value);  }}  }
class C{  public static Volume checkIfVolumeExistsInDB(String volumeNativeGuid,DbClient dbClient){  List<Volume> activeVolumes=CustomQueryUtility.getActiveVolumeByNativeGuid(dbClient,volumeNativeGuid);  Iterator<Volume> volumeItr=activeVolumes.iterator();  return volumeItr.hasNext() ? volumeItr.next() : null;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static synchronized void addNativeLibraryDependencies(String name,String... dependencyNames){  List<String> list=libraryDependencies.get(name);  if (list == null) {    libraryDependencies.put(name,list=new ArrayList<String>());  }  for (  String dependencyName : dependencyNames) {    if (!list.contains(dependencyName)) {      list.add(dependencyName);    }  }}  }
class C{  public static String toRef(char c){  return "" + c;}  }
class C{  public void addCapabilitiesListener2(ContactId contact,ICapabilitiesListener listener) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mCapabilitiesBroadcaster.addContactCapabilitiesListener(contact,listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void updateTimestamp(List<String> batchList){  Timestamp lastUpdate=new Timestamp(System.currentTimeMillis());  batchList.add("INSERT INTO " + ANALYSIS_GROUPS_TIME_TABLE + " ("+ "LAST_TIMESTAMP) "+ "VALUES ('"+ lastUpdate.toString()+ "')");}  }
class C{  public static void addMissingTo(LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> primary,LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> secondary){  for (  EntryType type : secondary.keySet()) {    LinkedHashMap<String,ConfigEntry> primaryMappings=primary.get(type);    LinkedHashMap<String,ConfigEntry> secondaryMappings=secondary.get(type);    for (    String key : secondaryMappings.keySet()) {      if (!primaryMappings.containsKey(key)) {        primaryMappings.put(key,secondaryMappings.get(key));      }    }  }}  }
class C{  public static int compare(String id1,String id2){  if (id1.contains("'") || id2.contains("'")) {    int count1=id1.length() - id1.replace("'","").length();    int count2=id2.length() - id2.replace("'","").length();    if (count1 != count2) {      return count2 - count1;    }  }  return (id1.compareTo(id2) < 0) ? +1 : -1;}  }
class C{  public OMScalingIcon(double centerLat,double centerLon,int offsetX,int offsetY,int w,int h,int[] pix,float baseScale){  super(centerLat,centerLon,0f,0f,w,h,pix);  setX(offsetX);  setY(offsetY);  this.baseScale=baseScale;}  }
class C{  public TerminalEmulatorPalette(Color defaultColor,Color defaultBrightColor,Color defaultBackgroundColor,Color normalBlack,Color brightBlack,Color normalRed,Color brightRed,Color normalGreen,Color brightGreen,Color normalYellow,Color brightYellow,Color normalBlue,Color brightBlue,Color normalMagenta,Color brightMagenta,Color normalCyan,Color brightCyan,Color normalWhite,Color brightWhite){  this.defaultColor=defaultColor;  this.defaultBrightColor=defaultBrightColor;  this.defaultBackgroundColor=defaultBackgroundColor;  this.normalBlack=normalBlack;  this.brightBlack=brightBlack;  this.normalRed=normalRed;  this.brightRed=brightRed;  this.normalGreen=normalGreen;  this.brightGreen=brightGreen;  this.normalYellow=normalYellow;  this.brightYellow=brightYellow;  this.normalBlue=normalBlue;  this.brightBlue=brightBlue;  this.normalMagenta=normalMagenta;  this.brightMagenta=brightMagenta;  this.normalCyan=normalCyan;  this.brightCyan=brightCyan;  this.normalWhite=normalWhite;  this.brightWhite=brightWhite;}  }
class C{  public Revision next(){  try {switch (modus) {case INIT:      return init();case ITERATE_WITH_MAPPING:    return chronoIterator.next();case ITERATE_WITHOUT_MAPPING:  return revisionIterator.next();default :throw new RuntimeException("Illegal mode");}} catch (Exception e) {throw new RuntimeException(e);}}  }
class C{  @Override public void process(V tuple){  dval+=tuple.doubleValue();}  }
class C{  public GaussianFilter(float radius){  setRadius(radius);}  }
class C{  public static _CheckinWorkItemAction fromString(final String value) throws SOAPSerializationException {  return (_CheckinWorkItemAction)Enumeration.fromString(value,_CheckinWorkItemAction.VALUES_TO_INSTANCES);}  }
class C{  public double manhattanObjectiveDistance(MultiObjectiveFitness other){  double s=0;  for (int i=0; i < objectives.length; i++) {    s+=Math.abs(objectives[i] - other.objectives[i]);  }  return s;}  }
class C{  public boolean comprobarDisponibilidadDetallesPrestamo(PrestamoVO prestamo,Collection detalles){  boolean todosDisponibles=true;  Iterator it=detalles.iterator();  while (it.hasNext()) {    DetallePrestamoVO detalle=(DetallePrestamoVO)it.next();    if (prestamo.tieneReserva()) {      detalle.setEstadoDisponibilidad(this.isDetalleDisponibleAllConditions(detalle,prestamo.getFinicialreserva(),prestamo.getFfinalreserva(),prestamo.tieneReserva()));    } else {      final String dias_reserva=PropertyHelper.getProperty(PropertyHelper.PLAZO_PRESTAMO);      Calendar fechafinal=new GregorianCalendar();      fechafinal.add(Calendar.HOUR,Integer.parseInt(dias_reserva) * PrestamosConstants.HORAS_DIA);      detalle.setEstadoDisponibilidad(this.isDetalleDisponibleAllConditions(detalle,DBUtils.getFechaActual(),fechafinal.getTime(),prestamo.tieneReserva()));    }    detalle.setDisponibilidad(detalle.getEstadoDisponibilidad() == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE || detalle.getEstadoDisponibilidad() == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE_PARCIAL);    if (todosDisponibles && !detalle.isDisponibilidad())     todosDisponibles=false;  }  return todosDisponibles;}  }
class C{  public void testComputeClasspathForJre() throws CoreException {  assertEquals(1,javaProjectA.getRawClasspath().length);  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  assertEquals(0,actualCp.size());}  }
class C{  public static <W extends BoundedWindow>StateTag<Object,WatermarkHoldState<W>> watermarkHoldTagForOutputTimeFn(OutputTimeFn<? super W> outputTimeFn){  return StateTags.<Object,WatermarkHoldState<W>>makeSystemTagInternal(StateTags.<W>watermarkStateInternal("hold",outputTimeFn));}  }
class C{  void put(RowCursor cursor){  boolean isValid;  do {    isValid=true;    try (JournalOutputStream os=openItem()){      os.write(CODE_PUT);      cursor.writeJournal(os);      isValid=os.complete();    } catch (    IOException e) {      log.log(Level.FINER,e.toString(),e);    }  } while (!isValid);}  }
class C{  public static void saveUserDetailsToContext(UserDetails userDetails,HttpServletRequest request){  PreAuthenticatedAuthenticationToken authentication=new PreAuthenticatedAuthenticationToken(userDetails,userDetails.getPassword(),userDetails.getAuthorities());  if (request != null) {    authentication.setDetails(new WebAuthenticationDetails(request));  }  SecurityContextHolder.getContext().setAuthentication(authentication);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  long processingEndTime=System.currentTimeMillis();  Object iceProcessingState=evt.getNewValue();  logger.log(Level.INFO,"Remote agent entered the " + iceProcessingState + " state.");  if (iceProcessingState == IceProcessingState.COMPLETED) {    logger.log(Level.INFO,"Remote: Total ICE processing time: " + (processingEndTime - startTime) + " ms ");    Agent agent=(Agent)evt.getSource();    logger.log(Level.INFO,"Remote: Create pseudo tcp stream");    IceMediaStream dataStream=agent.getStream("data");    Component udpComponent=dataStream.getComponents().get(0);    CandidatePair usedPair=udpComponent.getSelectedPair();    if (usedPair != null) {      LocalCandidate localCandidate=usedPair.getLocalCandidate();      Candidate<?> remoteCandidate=usedPair.getRemoteCandidate();      logger.log(Level.INFO,"Remote: Local address " + localCandidate);      logger.log(Level.INFO,"Remote: Peer address " + remoteCandidate);      try {        remoteJob=new RemotePseudoTcpJob(usedPair.getDatagramSocket(),remoteCandidate.getTransportAddress());      } catch (      UnknownHostException ex) {        logger.log(Level.SEVERE,"Error while trying to create" + " remote pseudotcp thread " + ex);      }    } else {      logger.log(Level.SEVERE,"Remote: Failed to select any candidate pair");    }  } else {    if (iceProcessingState == IceProcessingState.TERMINATED || iceProcessingState == IceProcessingState.FAILED) {      if ((remoteJob != null) && (iceProcessingState == IceProcessingState.TERMINATED)) {        remoteJob.start();      }synchronized (remoteAgentMonitor) {        remoteAgentMonitor.notifyAll();      }    }  }}  }
class C{  protected void activateFrame(JInternalFrame f){  getDesktopManager().activateFrame(f);}  }
class C{  public mat4 lookAt(vec3 eyePoint,vec3 target,vec3 worldUp){  vec3 w=new vec3();  vec3 u=new vec3();  vec3 v=new vec3();  w.sub(target,eyePoint);  w.normalize();  w.negate();  u.cross(worldUp,w);  v.cross(w,u);  float dx=-eyePoint.dot(u);  float dy=-eyePoint.dot(v);  float dz=-eyePoint.dot(w);  this.set(u.x(),u.y(),u.z(),dx,v.x(),v.y(),v.z(),dy,w.x(),w.y(),w.z(),dz,0.0f,0.0f,0.0f,1.0f);  return this;}  }
class C{  public static boolean isSyncActive(Context context){  Account[] accounts=AccountManager.get(context).getAccountsByType(Constants.ACCOUNT_TYPE);  for (  Account account : accounts) {    if (ContentResolver.isSyncActive(account,SYNC_AUTHORITY)) {      return true;    }  }  return false;}  }
class C{  public MemberValuePair newMemberValuePair(){  MemberValuePair result=new MemberValuePair(this);  return result;}  }
class C{  public void deconfigure() throws CoreException {  if (DEBUG) {    System.out.println("Removing findbugs from the project build spec.");  }  removeFromBuildSpec(FindbugsPlugin.BUILDER_ID);}  }
class C{  public StartsWithContainerValidator(String... containerIdPrefix){  this.containerIdPrefixes=Arrays.asList(containerIdPrefix);}  }
class C{  public static String formatDate(Date date){  return getSimplDateFormat(DF_LONG).format(date);}  }
class C{  public CSwitchToDebugView(final IViewSwitcher viewSwitcher){  super("Debug Perspective");  m_viewSwitcher=Preconditions.checkNotNull(viewSwitcher,"IE02839: viewSwitcher argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_SWITCH_TO_DEBUG_PERSPECTIVE_HK.getKeyStroke());}  }
class C{  private void sendBinlogDumpPacket(OutputStream out) throws IOException {  MySQLPacket packet=new MySQLPacket(200,(byte)0);  packet.putByte((byte)MySQLConstants.COM_BINLOG_DUMP);  packet.putInt32((int)offset);  packet.putInt16(0);  packet.putInt32(serverId);  if (binlog != null)   packet.putString(binlog);  packet.write(out);  out.flush();}  }
class C{  private boolean isCsrfEnabled(){  return ozarkConfig.getCsrfOptions() != Csrf.CsrfOptions.OFF;}  }
class C{  private void cmd_request(){  int record_ID=m_curTab.getRecord_ID();  log.info("ID=" + record_ID);  if (record_ID <= 0)   return;  int AD_Table_ID=m_curTab.getAD_Table_ID();  int C_BPartner_ID=0;  Object BPartner_ID=m_curTab.getValue("C_BPartner_ID");  if (BPartner_ID != null)   C_BPartner_ID=((Integer)BPartner_ID).intValue();  new ARequest(aRequest.getButton(),AD_Table_ID,record_ID,C_BPartner_ID);}  }
class C{  public void clear(){  individuals.clear();}  }
class C{  public static CompressedByteArray loadCompressed(File file,long startVal,long endVal,int range) throws IOException {  final int perLong=new CompressedByteArray(0,range,true).mPerLong;  final long adjStartVal=startVal / perLong * perLong;  final long adjEndVal=endVal % perLong == 0 ? endVal : (endVal / perLong + 1) * perLong;  final CompressedByteArray ret=new CompressedByteArray(adjEndVal - adjStartVal,range,false);  ret.mOffset=startVal - adjStartVal;  ret.mSize=endVal - startVal;  ret.mValuesSet=adjEndVal - adjStartVal;  final ByteBuffer buf=ByteBuffer.allocate(64 * 1024).order(ByteOrder.BIG_ENDIAN);  final long startSeekPos=adjStartVal / perLong * 8;  final long endSeekPos=adjEndVal / perLong * 8;  final long totLongs=ret.mData.length();  long startLong=0;  try (FileInputStream stream=new FileInputStream(file)){    try (FileChannel channel=stream.getChannel()){      if (startSeekPos > 0) {        channel.position(startSeekPos);      }      long dataLoadPosition=startSeekPos;      while (dataLoadPosition < endSeekPos && channel.read(buf) != -1) {        buf.flip();        final int size=buf.limit();        final int numLongs=size / 8;        for (int i=0; i < numLongs && startLong + i < totLongs; i++) {          ret.mData.set(startLong + i,buf.getLong());        }        startLong+=numLongs;        final int dataAdvance=numLongs * 8;        dataLoadPosition+=dataAdvance;        buf.compact();      }    }   }   return ret;}  }
class C{  public static Pattern createOrGetPerl5CompiledPattern(String stringPattern,boolean caseSensitive) throws MalformedPatternException {  Pattern pattern=compiledPerl5Patterns.get(stringPattern);  if (pattern == null) {    Perl5Compiler compiler=new Perl5Compiler();    if (caseSensitive) {      pattern=compiler.compile(stringPattern,Perl5Compiler.READ_ONLY_MASK);    } else {      pattern=compiler.compile(stringPattern,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.READ_ONLY_MASK);    }    pattern=compiledPerl5Patterns.putIfAbsentAndGet(stringPattern,pattern);    if (Debug.verboseOn()) {      Debug.logVerbose("Compiled and cached the pattern: '" + stringPattern,module);    }  }  return pattern;}  }
class C{  public void dispatchNextGuiEvent() throws InterruptedException {  EventQueue queue=awtEventQueue;  if (queue == null) {    queue=Toolkit.getDefaultToolkit().getSystemEventQueue();    awtEventQueue=queue;  }  AWTEvent event=queue.getNextEvent();  if (event instanceof ActiveEvent) {    ((ActiveEvent)event).dispatch();  } else {    Object source=event.getSource();    if (source instanceof Component) {      Component comp=(Component)source;      comp.dispatchEvent(event);    } else     if (source instanceof MenuComponent) {      ((MenuComponent)source).dispatchEvent(event);    }  }}  }
class C{  public byte[] receive(){  return null;}  }
class C{  public MaterialTab createInteractiveTab(String label_text){  final MaterialTab mattab=new MaterialTab(this.getContext(),new tabBuilder(tabBuilder.layout.TAB_MATERIAL).with(getContext()).initInstance());  mattab.setText(label_text);  return mattab;}  }
class C{  private void toData(ByteArrayOutputStream bos) throws IOException {  writeString(bos,_name);  BitsUtil.writeInt16(bos,keyColumnStart());  BitsUtil.writeInt16(bos,keyColumnEnd());  BitsUtil.writeInt16(bos,_columns.length);  for (  Column column : _columns) {    column.toData(bos);  }  BitsUtil.writeInt16(bos,_blobs.length);  for (  Column column : _blobs) {    column.toData(bos);  }  int headerLength=_objectSchema.length;  BitsUtil.writeInt16(bos,headerLength);  for (  Class<?> type : _objectSchema) {    toDataSchema(bos,type);  }}  }
class C{  public MClick(Properties ctx,String TargetURL,String trxName){  this(ctx,0,trxName);  setTargetURL(TargetURL);}  }
class C{  public String createSnapshot(String name,String path) throws IsilonException {  return create(_baseUrl.resolve(URI_SNAPSHOTS),"snapshot",new IsilonSnapshot(name,path,null,null));}  }
class C{  public List<String> updateType(TypesDef typeDef) throws AtlasServiceException {  return updateType(TypesSerialization.toJson(typeDef));}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public static String jsonEscapeString(String orig){  return orig.replace("\\","\\\\").replace("\"","\\\"");}  }
class C{  private static JFreeChart createLineChart(){  Number[][] data=new Integer[][]{{new Integer(-3),new Integer(-2)},{new Integer(-1),new Integer(1)},{new Integer(2),new Integer(3)}};  CategoryDataset dataset=DatasetUtilities.createCategoryDataset("S","C",data);  return ChartFactory.createLineChart("Line Chart","Domain","Range",dataset);}  }
class C{  public XPathExtractor fixhtml(){  this.fixhtml=true;  return this;}  }
class C{  public List<MutableString> allLines(){  final ObjectArrayList<MutableString> result=new ObjectArrayList<MutableString>();  while (hasNext())   result.add(next().copy());  return result;}  }
class C{  public final void add(FilterHandle filterCallback){  callbackSet.add(filterCallback);}  }
class C{  public static <T>T map(final JBBPFieldStruct root,final String structPath,final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor,final int flags){  JBBPUtils.assertNotNull(structPath,"Path must not be null");  final JBBPFieldStruct struct=root.findFieldForPathAndType(structPath,JBBPFieldStruct.class);  if (struct == null) {    throw new JBBPMapperException("Can't find a structure field for its path [" + structPath + ']',null,mappingClass,null,null);  }  return map(struct,mappingClass,customFieldProcessor);}  }
class C{  public static boolean isImageElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_IMAGE_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  private void restoreActivityList(){  boolean isMapDirty=false;  mActivityList.clear();  Set<Integer> availableWebapps=new HashSet<Integer>();  for (int i=0; i < NUM_WEBAPP_ACTIVITIES; ++i) {    availableWebapps.add(i);  }  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  try {    final int numSavedEntries=prefs.getInt(PREF_NUM_SAVED_ENTRIES,0);    if (numSavedEntries <= NUM_WEBAPP_ACTIVITIES) {      for (int i=0; i < numSavedEntries; ++i) {        String currentActivityIndexPref=PREF_ACTIVITY_INDEX + i;        String currentWebappIdPref=PREF_WEBAPP_ID + i;        int activityIndex=prefs.getInt(currentActivityIndexPref,i);        String webappId=prefs.getString(currentWebappIdPref,null);        ActivityEntry entry=new ActivityEntry(activityIndex,webappId);        if (availableWebapps.remove(entry.mActivityIndex)) {          mActivityList.add(entry);        } else {          isMapDirty=true;        }      }    }  } catch (  ClassCastException exception) {    mActivityList.clear();    availableWebapps.clear();    for (int i=0; i < NUM_WEBAPP_ACTIVITIES; ++i) {      availableWebapps.add(i);    }  }  for (  Integer availableIndex : availableWebapps) {    ActivityEntry entry=new ActivityEntry(availableIndex,null);    mActivityList.add(entry);    isMapDirty=true;  }  if (isMapDirty) {    storeActivityList();  }}  }
class C{  private View fillDown(int pos,int nextTop){  View selectedView=null;  int end=(mBottom - mTop);  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end-=mListPadding.bottom;  }  while (nextTop < end && pos < mItemCount) {    View temp=makeRow(pos,nextTop,true);    if (temp != null) {      selectedView=temp;    }    nextTop=mReferenceView.getBottom() + mVerticalSpacing;    pos+=mNumColumns;  }  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  private static String hexify(double d){  long bits=Double.doubleToLongBits(d);  return (" (0x" + java.lang.Long.toHexString(bits) + ")");}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.195 -0400",hash_original_method="938AE78AF8B46523ABCC297819B82B4E",hash_generated_method="22A3DEB9A88DF9C00A41F1E04A9DAD42") public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  private void clearRemoteNotifications(){  Log.v(TAG,ACTION_CLEAR_REMOTE_NOTIFICATIONS);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }    googleApiClient.disconnect();  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  setArea(SerialUtilities.readShape(stream));}  }
class C{  public int position(){  int pos=_buf.position();  return pos;}  }
class C{  public Db(Connection conn){  try {    this.conn=conn;    stat=conn.createStatement();  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  private void addDeviceOptions() throws InvalidOvfException {  for (  Device device : ovfFile.getDevices()) {switch (device.getDeviceType()) {case SCSIController:      esxCloudVmx.configuration.put(getVmwScsiControllerName(device) + ".virtualDev",getVirtualDeviceName(device));    break;case EthernetAdapter:  esxCloudVmx.configuration.put(getVmwNetworkAdapterName(device) + ".virtualDev",getVirtualDeviceName(device));break;case SerialPort:addSerialPortOptions(device);break;}}}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.311 -0500",hash_original_method="43AE5B1BF40E67157C7361E5EC862A6C",hash_generated_method="77FCB2DD35C0BD735FD6211133F153EF") @DSVerified @DSSpec(DSCat.ANDROID_ACTIVITY_STARTING) public boolean uiOverrideUrlLoading(String overrideUrl){  if (overrideUrl == null || overrideUrl.length() == 0) {    return false;  }  boolean override=false;  if (mWebViewClient != null) {    override=mWebViewClient.shouldOverrideUrlLoading(mWebView,overrideUrl);  } else {    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(overrideUrl));    intent.addCategory(Intent.CATEGORY_BROWSABLE);    intent.putExtra(Browser.EXTRA_APPLICATION_ID,mContext.getPackageName());    try {      mContext.startActivity(intent);      override=true;    } catch (    ActivityNotFoundException ex) {    }  }  return override;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots/{sid}/activate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep activateConsistencyGroupSnapshot(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapshotId){  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.ACTIVATE_CONSISTENCY_GROUP_SNAPSHOT);  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final BlockSnapshot snapshot=(BlockSnapshot)queryResource(snapshotId);  verifySnapshotIsForConsistencyGroup(snapshot,consistencyGroup);  if (BlockConsistencyGroupUtils.getLocalSystemsInCG(consistencyGroup,_dbClient).isEmpty()) {    _log.error("{} Group Snapshot operations not supported when there is no backend CG",consistencyGroup.getId());    throw APIException.badRequests.cannotCreateSnapshotOfVplexCG();  }  final StorageSystem device=_dbClient.queryObject(StorageSystem.class,snapshot.getStorageController());  final BlockController controller=getController(BlockController.class,device.getSystemType());  final String task=UUID.randomUUID().toString();  if (snapshot.getIsSyncActive()) {    op.ready();    op.setMessage("The consistency group snapshot is already active.");    _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);    return toTask(snapshot,task,op);  }  _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);  try {    final List<URI> snapshotList=new ArrayList<URI>();    final List<BlockSnapshot> snaps=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,_dbClient);    for (    BlockSnapshot snap : snaps) {      snapshotList.add(snap.getId());    }    controller.activateSnapshot(device.getId(),snapshotList,task);  } catch (  final ControllerException e) {    throw new ServiceCodeException(CONTROLLER_ERROR,e,"An exception occurred when activating consistency group snapshot {0}. Caused by: {1}",new Object[]{snapshotId,e.getMessage()});  }  auditBlockConsistencyGroup(OperationTypeEnum.ACTIVATE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,snapshot.getId().toString(),snapshot.getLabel());  return toTask(snapshot,task,op);}  }
class C{  public static double logQuick(double value){  if (USE_JDK_MATH) {    return Math.log(value);  }  double h;  if (value > 0.87) {    if (value < 1.16) {      return 2.0 * (value - 1.0) / (value + 1.0);    }    h=0.0;  } else   if (value < DOUBLE_MIN_NORMAL) {    value*=TWO_POW_52;    h=-52 * LOG_2;  } else {    h=0.0;  }  final int valueBitsHi=(int)(Double.doubleToRawLongBits(value) >> 32);  final int valueExp=(valueBitsHi >> 20) - MAX_DOUBLE_EXPONENT;  final int xIndex=valueBitsHi << 12 >>> 32 - LOG_BITS;  return h + valueExp * LOG_2 + MyTLog.logXLogTab[xIndex];}  }
class C{  public void remove(String... instanceKey){  for (int i=0; i < instanceKey.length; i++) {    persister.remove(instanceKey[i]);  }}  }
class C{  public int destroyParticlesInShape(Shape shape,Transform xf){  return destroyParticlesInShape(shape,xf,false);}  }
class C{  public double manhattanDistance(final Int3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public ModbusTCPListener(int poolsize,InetAddress addr){  threadPool=new ThreadPool(poolsize);  address=addr;}  }
class C{  public RegularTimePeriod next(){  return new CandlePeriod(this.getStart().plusSeconds(secondsLength),secondsLength);}  }
class C{  protected void initializeRenderable(KMLTraversalContext tc){  renderable=new KMLScreenImageImpl(tc,this);}  }
class C{  public void parseJson(JSONObject profile){  try {    JSONObject data=profile.getJSONObject("data");    layerHeight.setText(data.getString("layer_height"));    shellThickness.setText(data.getString("wall_thickness"));    bottomTopThickness.setText(data.getString("solid_layer_thickness"));    printSpeed.setText(data.getString("print_speed"));    printTemperature.setText(data.getJSONArray("print_temperature").get(0).toString());    filamentDiamenter.setText(data.getJSONArray("filament_diameter").get(0).toString());    filamentFlow.setText(data.getString("filament_flow"));    travelSpeed.setText(data.getString("travel_speed"));    bottomLayerSpeed.setText(data.getString("bottom_layer_speed"));    infillSpeed.setText(data.getString("infill_speed"));    outerShellSpeed.setText(data.getString("outer_shell_speed"));    innerShellSpeed.setText(data.getString("inner_shell_speed"));    minimalLayerTime.setText(data.getString("cool_min_layer_time"));    if (data.has("retraction_enable"))     if (data.getString("retraction_enable").equals("true")) {      enableRetraction.setChecked(true);      Log.i("OUT","Checked true");    } else {      enableRetraction.setChecked(false);      Log.i("OUT","Checked false");    }    if (data.getBoolean("fan_enabled")) {      enableCoolingFan.setChecked(true);      Log.i("OUT","Checked true");    } else {      enableCoolingFan.setChecked(false);      Log.i("OUT","Checked false");    }  } catch (  JSONException e) {    e.printStackTrace();  }catch (  NullPointerException e) {    e.printStackTrace();  }}  }
class C{  public int safety(){  String s=soot.PhaseOptions.getString(options,"safety");  if (s.equalsIgnoreCase("safe"))   return safety_safe;  if (s.equalsIgnoreCase("medium"))   return safety_medium;  if (s.equalsIgnoreCase("unsafe"))   return safety_unsafe;  throw new RuntimeException("Invalid value " + s + " of phase option safety");}  }
class C{  public final void requestInteg(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   integState=value;}  }
class C{  public void close(){  store=null;}  }
class C{  private boolean checkForCarry(final char[] ca1,final int icarry){  boolean carry=false;  if (icarry < ca1.length) {    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') {      carry=true;    } else     if (ca1[icarry] == '5') {      int ii=icarry + 1;      for (; ii < ca1.length; ii++) {        if (ca1[ii] != '0') {          break;        }      }      carry=ii < ca1.length;      if (!carry && icarry > 0) {        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');      }    }  }  return carry;}  }
class C{  public StrBuilder appendFixedWidthPadRight(int value,int width,char padChar){  return appendFixedWidthPadRight(String.valueOf(value),width,padChar);}  }
class C{  private static int[] reorderVisual(byte[] levels){  return BidiLine.reorderVisual(levels);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'TimeManager' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'TIME_IS_ON' INTEGER,"+ "'TIME_NAME' TEXT,"+ "'IS_REPEACT' INTEGER,"+ "'REPEACT_DETAIL' TEXT,"+ "'START_TIME' INTEGER,"+ "'END_TIME' INTEGER);");}  }
class C{  protected int endOfLineOf(int offset) throws BadLocationException {  IRegion info=fDocument.getLineInformationOfOffset(offset);  if (offset <= info.getOffset() + info.getLength())   return info.getOffset() + info.getLength();  int line=fDocument.getLineOfOffset(offset);  try {    info=fDocument.getLineInformation(line + 1);    return info.getOffset() + info.getLength();  } catch (  BadLocationException x) {    return fDocument.getLength();  }}  }
class C{  public boolean isSetI64_thing(){  return EncodingUtils.testBit(__isset_bitfield,__I64_THING_ISSET_ID);}  }
class C{  private void keystorecerts2Hashtable(KeyStore ks,Hashtable<Principal,Vector<Certificate>> hash) throws Exception {  for (Enumeration<String> aliases=ks.aliases(); aliases.hasMoreElements(); ) {    String alias=aliases.nextElement();    Certificate cert=ks.getCertificate(alias);    if (cert != null) {      Principal subjectDN=((X509Certificate)cert).getSubjectDN();      Vector<Certificate> vec=hash.get(subjectDN);      if (vec == null) {        vec=new Vector<Certificate>();        vec.addElement(cert);      } else {        if (!vec.contains(cert)) {          vec.addElement(cert);        }      }      hash.put(subjectDN,vec);    }  }}  }
class C{  protected int addressToValue1(LocoIOMode lim,int address){  if (lim == null) {    return 0;  }  return addressToValues(lim.getOpcode(),lim.getSV(),lim.getV2(),address) & 0x7F;}  }
class C{  public void add(final T entry){  if (entry == null)   throw new IllegalArgumentException();  final long commitTime=entry.getCommitTime();  if (commitTime == 0L)   throw new IllegalArgumentException();  final Lock lock=writeLock();  lock.lock();  try {    final byte[] key=getKey(commitTime);    if (super.contains(key)) {      throw new IllegalArgumentException("entry exists: timestamp=" + commitTime);    }    super.insert(key,entry);  }  finally {    lock.unlock();  }}  }
class C{  public void testManagerCanInsertAnElementIntoFile() throws Exception {  Document document=builder.newDocument();  Element application=document.createElement("Application");  document.appendChild(application);  util.saveXml(document,TEST_FILE);  fileHandler.createFile(TEST_FILE);  manager.setFile(TEST_FILE);  manager.loadFile();  manager.insertElementsUnderXPath("<subnode property='hello' />","//Application");  manager.writeFile();  String xml=fileHandler.readTextFile(TEST_FILE,"UTF-8");  XMLAssert.assertXpathEvaluatesTo("hello","//Application/subnode/@property",xml);}  }
class C{  public static double run(){  if (!running) {    runStart();  }  while (true) {    if (runClockTick() || abruptTerminate) {      break;    }    if (terminateAt > 0.0 && clock >= terminateAt) {      terminateSimulation();      clock=terminateAt;      break;    }    if (pauseAt != -1 && ((future.size() > 0 && clock <= pauseAt && pauseAt <= future.iterator().next().eventTime()) || future.size() == 0 && pauseAt <= clock)) {      pauseSimulation();      clock=pauseAt;    }    while (paused) {      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        e.printStackTrace();      }    }  }  double clock=clock();  finishSimulation();  runStop();  return clock;}  }
class C{  public TrainingSet(){}  }
class C{  public GitHubAccount(final Account account,Context context){  this.account=account;  this.manager=AccountManager.get(context);  this.context=context;}  }
class C{  @Override public View generateView(Context ctx,ViewGroup parent){  ViewHolder viewHolder=getViewHolder(LayoutInflater.from(ctx).inflate(getLayoutRes(),parent,false));  bindView(viewHolder,Collections.EMPTY_LIST);  return viewHolder.itemView;}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  private static StringBuilder appendCopyJsonExpression(String inVar,StringBuilder builder){  builder.append(COPY_JSONS_PARAM).append(" ? ");  appendNaiveCopyJsonExpression(inVar,builder).append(" : (JSONValue)(").append(inVar).append(")");  return builder;}  }
class C{  public void onReliableWriteCompleted(BluetoothGatt gatt,int status){}  }
class C{  public boolean isSameTransaction(K key){  VersionedValue data=map.get(key);  if (data == null) {    return false;  }  int tx=getTransactionId(data.operationId);  return tx == transaction.transactionId;}  }
class C{  @Override public V value() throws NoSuchElementException {  return prop.value();}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof HeikinAshiDataset)) {    return false;  }  HeikinAshiDataset that=(HeikinAshiDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public boolean noninteractiveLogonWithCredentials(final URI targetUri,final Credential credentials,final boolean requestCompactToken){  throw new NotImplementedException(449288);}  }
class C{  @Override public boolean ownUpdatesAreVisible(int type){  debugCodeCall("ownUpdatesAreVisible",type);  return true;}  }
class C{  public T caseComposedContent(ComposedContent object){  return null;}  }
class C{  protected void negate(Tweet tweet){  int negationCount=0;  boolean neg=false;  for (  TaggedToken token : tweet.getWordList()) {    if (neg) {      if (token.token.matches("^[.:;!?]$")) {        neg=false;        negationCount++;      } else {        token.token=token.token + "_NEG";      }    }    if (token.token.toLowerCase().matches("^(?:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint)|.*n't")) {      neg=true;    }  }  if (neg)   negationCount++;  tweet.setNegationCount(negationCount);}  }
class C{  public static void write(float lt1,float ln1,int px1,int py1,int px2,int py2,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RECTANGLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RECTANGLE);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(lt1);  dos.writeFloat(ln1);  dos.writeInt(px1);  dos.writeInt(py1);  dos.writeInt(px2);  dos.writeInt(py2);  properties.write(dos);}  }
class C{  public void testHasMainActivity() throws Exception {  mEnabled.add(LauncherActivityDetector.ISSUE_MORE_THAN_ONE_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_MISSING_LAUNCHER);  mEnabled.add(LauncherActivityDetector.ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY);  String expected="No warnings.";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".OtherActivity\">\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".MainActivity\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.MAIN\"/>\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  protected ParameterizedTypeImpl(){  super();}  }
class C{  private static long calculateDurationInMicros(Span span){  org.springframework.cloud.sleuth.Log clientSend=hasLog(Span.CLIENT_SEND,span);  org.springframework.cloud.sleuth.Log clientReceived=hasLog(Span.CLIENT_RECV,span);  if (clientSend != null && clientReceived != null) {    return (clientReceived.getTimestamp() - clientSend.getTimestamp()) * 1000;  }  return span.getAccumulatedMicros();}  }
class C{  public <T>T createJokeApi(Class<T> service){  if (!apis.containsKey(service)) {    T instance=mJokeRetrofit.create(service);    apis.put(service,instance);  }  return (T)apis.get(service);}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  public String toString(){  String s="";  for (int i=0, n=coords.size(); i < n; i++) {    Coord c=coords.get(i);    s+="->" + c;    if (speeds.size() > 1) {      s+=String.format("@%.2f ",speeds.get(i));    }  }  return s;}  }
class C{  public void reference(K key){  Pair<V,Integer> refValue=refMap.get(key);  if (refValue == null) {    throw new IllegalStateException("Key value not found in collection");  }  refValue.setSecond(refValue.getSecond() + 1);}  }
class C{  protected boolean validateAuthor(Factory factory,String userId) throws ApiException {  Author author=factory.getCreator();  if (author == null || author.getUserId() == null) {    throw new ServerException(format("Invalid factory without author stored. Please contact the support about the factory ID '%s'",factory.getId()));  }  String factoryUserId=factory.getCreator().getUserId();  return factoryUserId.equals(userId);}  }
class C{  public boolean isCompatible(final Address address){  try {    return this.version == address.getVersion();  } catch (  final IllegalArgumentException e) {    return false;  }}  }
class C{  public boolean isReserved(){  return false;}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public String nextToken(String nontokenDelims,String tokenDelims,boolean returnEmptyTokens){  setDelims(nontokenDelims,tokenDelims);  setReturnEmptyTokens(returnEmptyTokens);  return nextToken();}  }
class C{  public final synchronized int increaseMaxClusterId(){  return ++m_maxClusterId;}  }
class C{  @DSComment("Traffic statistics") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:23.280 -0500",hash_original_method="DBD8969F9F8A15C1B81C767022D4A852",hash_generated_method="5221A9A6564F97816880393CB890BC0A") public static void incrementOperationCount(int operationCount){  final int tag=getThreadStatsTag();  incrementOperationCount(tag,operationCount);}  }
class C{  public boolean requestTime(String host,int timeout){  DatagramSocket socket=null;  try {    socket=new DatagramSocket();    socket.setSoTimeout(timeout);    InetAddress address=InetAddress.getByName(host);    byte[] buffer=new byte[NTP_PACKET_SIZE];    DatagramPacket request=new DatagramPacket(buffer,buffer.length,address,NTP_PORT);    buffer[0]=NTP_MODE_CLIENT | (NTP_VERSION << 3);    long requestTime=System.currentTimeMillis();    long requestTicks=SystemClock.elapsedRealtime();    writeTimeStamp(buffer,TRANSMIT_TIME_OFFSET,requestTime);    socket.send(request);    DatagramPacket response=new DatagramPacket(buffer,buffer.length);    socket.receive(response);    long responseTicks=SystemClock.elapsedRealtime();    long responseTime=requestTime + (responseTicks - requestTicks);    long originateTime=readTimeStamp(buffer,ORIGINATE_TIME_OFFSET);    long receiveTime=readTimeStamp(buffer,RECEIVE_TIME_OFFSET);    long transmitTime=readTimeStamp(buffer,TRANSMIT_TIME_OFFSET);    long roundTripTime=responseTicks - requestTicks - (transmitTime - receiveTime);    long clockOffset=((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;    mNtpTime=responseTime + clockOffset;    mNtpTimeReference=responseTicks;    mRoundTripTime=roundTripTime;  } catch (  Exception e) {    if (false)     Log.d(TAG,"request time failed: " + e);    return false;  } finally {    if (socket != null) {      socket.close();    }  }  return true;}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public boolean ready() throws IOException {  return sd.ready();}  }
class C{  public static SimpleNode parse(Reader reader,String templateName,boolean dumpNamespace) throws ParseException {  return ri.parse(reader,templateName,dumpNamespace);}  }
class C{  @SuppressWarnings("unchecked") public void query(String id,String cfName) throws Exception {  Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  queryAndPrintRecord(URI.create(id),clazz);}  }
class C{  public PathfindingDialog(final JFrame parent,final Module module){  super(parent,"Pathfinding",true);  new CDialogEscaper(this);  setLayout(new BorderLayout());  final JPanel topPanel=new JPanel(new BorderLayout());  startBlockTree=new FunctionTree(this,module);  endBlockTree=new FunctionTree(this,module);  final JTextArea startBlockAsmField=createAsmField();  final JTextArea endBlockAsmField=createAsmField();  final JTextArea searchFieldStart=new JTextArea(1,10);  final JTextArea searchFieldEnd=new JTextArea(1,10);  searchFieldStart.getDocument().addDocumentListener(new InternalDocumentListener(startBlockTree));  searchFieldEnd.getDocument().addDocumentListener(new InternalDocumentListener(endBlockTree));  startBlockTree.addTreeSelectionListener(new InternalTreeSelectionListener(startBlockAsmField));  endBlockTree.addTreeSelectionListener(new InternalTreeSelectionListener(endBlockAsmField));  final JSplitPane splitPaneSearch=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,new JScrollPane(searchFieldStart),new JScrollPane(searchFieldEnd));  splitPaneSearch.setResizeWeight(0.5);  final JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,new JScrollPane(startBlockTree),new JScrollPane(endBlockTree));  splitPane.setResizeWeight(0.5);  final JPanel upperPanel=new JPanel(new BorderLayout());  upperPanel.add(splitPane);  upperPanel.add(splitPaneSearch,BorderLayout.NORTH);  final JPanel previewPanel=new JPanel(new BorderLayout());  final JSplitPane splitPane2=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,new JScrollPane(startBlockAsmField),new JScrollPane(endBlockAsmField));  splitPane2.setResizeWeight(0.5);  previewPanel.add(splitPane2);  upperPanel.add(previewPanel,BorderLayout.SOUTH);  topPanel.add(upperPanel);  splitPane.setBorder(new EmptyBorder(5,5,5,5));  add(topPanel,BorderLayout.CENTER);  add(new CPanelTwoButtons(m_listener,"OK","Cancel"),BorderLayout.SOUTH);  setPreferredSize(new Dimension(800,500));  pack();}  }
class C{  private String encrypt(String s){  return _encryptionProvider.getEncryptedString(s);}  }
class C{  private void checkCarOrder(Car car){  if (car.getTrack() != null && !car.getTrack().getServiceOrder().equals(Track.NORMAL) && _carList.contains(car)) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildBypassCarServiceOrder"),new Object[]{car.toString(),car.getTrackName(),car.getTrack().getServiceOrder()}));    _carList.remove(car);    _carList.add(_carIndex,car);  }  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildNoDestForCar"),new Object[]{car.toString()}));  addLine(_buildReport,FIVE,BLANK_LINE);}  }
class C{  private void addGeneratedJSResource(FacesContext context,String resourceName,String library,UIViewRoot view){  addGeneratedResource(context,resourceName,"javax.faces.resource.Script",library,view);}  }
class C{  public void createWeekScenarioServiceDeletion() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-02 05:00:00"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2Service=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SERVICEDEL_PU_WEEK",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,example2Service,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SERVICEDEL_PU_WEEK",serviceDetails,basicSetup.getCustomerUser2(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-14 13:00:00"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-25 15:00:00"));  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-27 21:00:00"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2Service);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SERVICEDEL_PU_WEEK",subDetails);}  }
class C{  public static String left(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  sb.append(s);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  return sb.toString();}  }
class C{  public Form createAnswerForm(){  if (!isFormType()) {    throw new IllegalStateException("Only forms of type \"form\" could be answered");  }  Form form=new Form(TYPE_SUBMIT);  for (Iterator<FormField> fields=getFields(); fields.hasNext(); ) {    FormField field=fields.next();    if (field.getVariable() != null) {      FormField newField=new FormField(field.getVariable());      newField.setType(field.getType());      form.addField(newField);      if (FormField.TYPE_HIDDEN.equals(field.getType())) {        List<String> values=new ArrayList<String>();        for (Iterator<String> it=field.getValues(); it.hasNext(); ) {          values.add(it.next());        }        form.setAnswer(field.getVariable(),values);      }    }  }  return form;}  }
class C{  public void addItem(String s,int value){  if (_nstored == 0) {    _minVal=value;  }  _valueArray[_nstored]=value;  _itemArray[_nstored++]=s;}  }
class C{  public CustomerData(List<SubscriptionHistory> subscriptionHistoryEntries){  this.subscriptionHistoryEntries=subscriptionHistoryEntries;  determineSubscriptionKeys();}  }
class C{  @Override public void paintBar(Graphics2D g2,XYBarRenderer renderer,int row,int column,RectangularShape bar,RectangleEdge base){  Paint itemPaint=renderer.getItemPaint(row,column);  Color c0, c1;  if (itemPaint instanceof Color) {    c0=(Color)itemPaint;    c1=c0.brighter();  } else   if (itemPaint instanceof GradientPaint) {    GradientPaint gp=(GradientPaint)itemPaint;    c0=gp.getColor1();    c1=gp.getColor2();  } else {    c0=Color.blue;    c1=Color.blue.brighter();  }  if (c0.getAlpha() == 0) {    return;  }  if (base == RectangleEdge.TOP || base == RectangleEdge.BOTTOM) {    Rectangle2D[] regions=splitVerticalBar(bar,this.g1,this.g2,this.g3);    GradientPaint gp=new GradientPaint((float)regions[0].getMinX(),0.0f,c0,(float)regions[0].getMaxX(),0.0f,Color.white);    g2.setPaint(gp);    g2.fill(regions[0]);    gp=new GradientPaint((float)regions[1].getMinX(),0.0f,Color.white,(float)regions[1].getMaxX(),0.0f,c0);    g2.setPaint(gp);    g2.fill(regions[1]);    gp=new GradientPaint((float)regions[2].getMinX(),0.0f,c0,(float)regions[2].getMaxX(),0.0f,c1);    g2.setPaint(gp);    g2.fill(regions[2]);    gp=new GradientPaint((float)regions[3].getMinX(),0.0f,c1,(float)regions[3].getMaxX(),0.0f,c0);    g2.setPaint(gp);    g2.fill(regions[3]);  } else   if (base == RectangleEdge.LEFT || base == RectangleEdge.RIGHT) {    Rectangle2D[] regions=splitHorizontalBar(bar,this.g1,this.g2,this.g3);    GradientPaint gp=new GradientPaint(0.0f,(float)regions[0].getMinY(),c0,0.0f,(float)regions[0].getMaxX(),Color.white);    g2.setPaint(gp);    g2.fill(regions[0]);    gp=new GradientPaint(0.0f,(float)regions[1].getMinY(),Color.white,0.0f,(float)regions[1].getMaxY(),c0);    g2.setPaint(gp);    g2.fill(regions[1]);    gp=new GradientPaint(0.0f,(float)regions[2].getMinY(),c0,0.0f,(float)regions[2].getMaxY(),c1);    g2.setPaint(gp);    g2.fill(regions[2]);    gp=new GradientPaint(0.0f,(float)regions[3].getMinY(),c1,0.0f,(float)regions[3].getMaxY(),c0);    g2.setPaint(gp);    g2.fill(regions[3]);  }  if (renderer.isDrawBarOutline()) {    Stroke stroke=renderer.getItemOutlineStroke(row,column);    Paint paint=renderer.getItemOutlinePaint(row,column);    if (stroke != null && paint != null) {      g2.setStroke(stroke);      g2.setPaint(paint);      g2.draw(bar);    }  }}  }
class C{  private RestResult executeRequest(HttpRequestBase request){  RestResult result=null;  request.addHeader("Accept","application/json");  request.addHeader("x-dell-api-version","2.0");  request.addHeader("Content-Type","application/json; charset=utf-8");  CloseableHttpResponse response=null;  try {    response=httpClient.execute(request,httpContext);    HttpEntity entity=response.getEntity();    result=new RestResult(request.getURI().toString(),response.getStatusLine().getStatusCode(),response.getStatusLine().getReasonPhrase(),entity != null ? EntityUtils.toString(response.getEntity()) : "");  } catch (  IOException e) {    result=new RestResult(500,"Internal Failure","");    LOG.warn(String.format("Error in API request: %s",e),e);  } finally {    try {      if (response != null) {        response.close();      }    } catch (    IOException e) {    }  }  return result;}  }
class C{  public void addListener(final IButtonTabListener listener){  m_listeners.addListener(listener);}  }
class C{  protected AbstractCompositeServiceBuilder(){}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  protected boolean inspectAndReplaceCalls(Chain<Unit> units,AssignStmt stmt,InvokeExpr expr){  Jimple jv=Jimple.v();  Scene sv=Scene.v();  SootMethodRef smr=expr.getMethodRef();  if (!smr.getSignature().equals("<android.net.Uri: android.net.Uri parse(java.lang.String)>"))   return (false);  Local var=(Local)stmt.getLeftOp();  RefType type=RefType.v("android.net.Uri");  Value alloc_expr=jv.newNewExpr(type);  AssignStmt alloc_stmt=jv.newAssignStmt(var,alloc_expr);  SootMethod uri_init_sm=sv.getMethod("<android.net.Uri: void <init>(java.lang.String)>");  Value uri_str_arg=expr.getArgs().get(0);  SpecialInvokeExpr uri_init_sie=jv.newSpecialInvokeExpr(var,uri_init_sm.makeRef(),uri_str_arg);  InvokeStmt uri_init_stmt=jv.newInvokeStmt(uri_init_sie);  units.insertBefore(alloc_stmt,stmt);  units.insertBefore(uri_init_stmt,stmt);  units.remove(stmt);  return (true);}  }
class C{  public void ensureLoaded() throws UnsatisfiedLinkError {  if (!loadLibraries()) {    throw mLinkError;  }}  }
class C{  public static void symmetrizeComponents(double[][] components){  for (int i=0; i < components.length; i++) {    for (int j=i + 1; j < components.length; j++) {      components[i][j]+=components[j][i];      components[i][j]*=0.5;      components[j][i]=components[i][j];    }  }}  }
class C{  private void dropPrivileges(Player player){  if (!AdministrationAction.isPlayerAllowedToExecuteAdminCommand(player,Actions.TELECLICKMODE,false)) {    player.setTeleclickEnabled(false);  }  if (!AdministrationAction.isPlayerAllowedToExecuteAdminCommand(player,Actions.GHOSTMODE,false)) {    player.setGhost(false);  }  if (!AdministrationAction.isPlayerAllowedToExecuteAdminCommand(player,Actions.INVISIBLE,false)) {    player.setInvisible(false);  }}  }
class C{  public TokenOffsetPayloadTokenFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)newValue);  return;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__ANY_PLUS_ACCESS:setAnyPlusAccess((Boolean)newValue);return;case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__NAME_OF_ANY_PLUS_PROPERTY:setNameOfAnyPlusProperty((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public AttachTodoObject(int id){  this.id=id;}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private void validateAndSetPathParams(VirtualPool vpool,Integer maxPaths,Integer minPaths,Integer pathsPerInitiator){  if ((minPaths != null || pathsPerInitiator != null) && maxPaths == null) {    throw APIException.badRequests.maxPathsRequired();  }  if (maxPaths != null) {    ArgValidator.checkFieldMinimum(maxPaths,1,"max_paths");  }  if (minPaths != null) {    ArgValidator.checkFieldMinimum(minPaths,1,"min_paths");  }  if (pathsPerInitiator != null) {    ArgValidator.checkFieldMinimum(pathsPerInitiator,1,"paths_per_initiator");  }  Integer min=(minPaths != null) ? minPaths : vpool.getMinPaths();  Integer max=(maxPaths != null) ? maxPaths : vpool.getNumPaths();  Integer ppi=(pathsPerInitiator != null) ? pathsPerInitiator : vpool.getPathsPerInitiator();  if (min == null) {    minPaths=min=1;  }  if (max == null) {    maxPaths=max=1;  }  if (ppi == null) {    pathsPerInitiator=ppi=1;  }  if (min > max) {    throw APIException.badRequests.minPathsGreaterThanMaxPaths();  }  if (ppi > max) {    throw APIException.badRequests.pathsPerInitiatorGreaterThanMaxPaths();  }  if (minPaths != null) {    vpool.setMinPaths(minPaths);  }  if (maxPaths != null) {    vpool.setNumPaths(maxPaths);  }  if (pathsPerInitiator != null) {    vpool.setPathsPerInitiator(pathsPerInitiator);  }}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public void testSetF10Momentary(){  boolean f10Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF10Momentary(f10Momentary);}  }
class C{  public void removeFilesWithName(String filename){  LinkedList<String> entriesToRemove=new LinkedList<String>();  for (  Entry<String,JarEntry> JarEntry : jarEntries.entrySet()) {    if (JarEntry.getKey().endsWith(filename)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntries.remove(entryToRemove);  }  entriesToRemove.clear();  for (  Entry<String,byte[]> JarEntry : jarEntriesToAdd.entrySet()) {    if (JarEntry.getKey().endsWith(filename)) {      entriesToRemove.add(JarEntry.getKey());    }  }  for (  String entryToRemove : entriesToRemove) {    jarEntriesToAdd.remove(entryToRemove);  }}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the class name of a kernel");    }    String associator=args[0];    args[0]="";    System.out.println(evaluate(associator,args));  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public BinaryRefAddr(String addrType,byte[] src){  this(addrType,src,0,src.length);}  }
class C{  public boolean isRunning(){  if (this.gfManagerAgent == null)   return false;  if (isAnyMemberRunning())   return true;  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'HideAudio' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOND_GROUP_ID' INTEGER,"+ "'TITLE' TEXT,"+ "'ALBUM' TEXT,"+ "'ARTIST' TEXT,"+ "'OLD_PATH_URL' TEXT,"+ "'DISPLAY_NAME' TEXT,"+ "'MIME_TYPE' TEXT,"+ "'DURATION' TEXT,"+ "'NEW_PATH_URL' TEXT,"+ "'SIZE' INTEGER,"+ "'MOVE_DATE' INTEGER);");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lcNode;  Node nsNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  lcNode=employeeNode.getLastChild();  nsNode=lcNode.getNextSibling();  assertNull("nodeGetNextSiblingNullAssert1",nsNode);}  }
class C{  public static IJavaProject findJavaProject(String projectName){  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (!project.exists()) {    return null;  }  try {    if (!NatureUtils.hasNature(project,JavaCore.NATURE_ID)) {      return null;    }  } catch (  CoreException e) {    return null;  }  return JavaCore.create(project);}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public MaterializeBuilder withRootView(ViewGroup rootView){  this.mRootView=rootView;  return this;}  }
class C{  private org.carbondata.format.Encoding fromWrapperToExternalEncoding(Encoding encoder){  if (null == encoder) {    return null;  }switch (encoder) {case DICTIONARY:    return org.carbondata.format.Encoding.DICTIONARY;case DELTA:  return org.carbondata.format.Encoding.DELTA;case RLE:return org.carbondata.format.Encoding.RLE;case INVERTED_INDEX:return org.carbondata.format.Encoding.INVERTED_INDEX;case BIT_PACKED:return org.carbondata.format.Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return org.carbondata.format.Encoding.DIRECT_DICTIONARY;default :return org.carbondata.format.Encoding.DICTIONARY;}}  }
class C{  private boolean resourceIsDeploymentDescriptor(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder webInf=WebAppUtilities.getWebInfSrc(project);    if (webInf.exists()) {      if (resource.getParent().equals(webInf)) {        String name=resource.getName();        return name.equals("web.xml") || name.equals("appengine-web.xml");      }    }  }  return false;}  }
class C{  public void addStudent(String student){  students.add(student);}  }
class C{  public PutIndexTemplateRequest source(byte[] source,int offset,int length){  try (XContentParser parser=XContentFactory.xContent(source,offset,length).createParser(source,offset,length)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse template source",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:20.458 -0400",hash_original_method="1BB17701717D2715ABA5BCDFA9DA2DF9",hash_generated_method="319C5DAABFD8107C01F48A7BC435DD5E") public boolean deleteObject(int objectHandle){  return native_delete_object(objectHandle);}  }
class C{  @SuppressWarnings("unchecked") public static synchronized SmallProblemsKDTree generate(IMultiPoint[] points){  if (points.length == 0) {    return null;  }  int maxD=points[0].dimensionality();  SmallProblemsKDTree tree=new SmallProblemsKDTree(maxD);  comparators=new Comparator[maxD + 1];  for (int i=1; i <= maxD; i++) {    comparators[i]=new DimensionalComparator(i);  }  tree.setRoot(generate(1,maxD,points,0,points.length - 1));  return tree;}  }
class C{  @Override public void writeSend(StubAmp actor,String methodName,Object[] args,InboxAmp inbox){  try (OutputStream os=openItem(inbox)){    try (OutH3 out=_serializer.out(os)){      String key=actor.journalKey();      out.writeLong(CODE_SEND);      out.writeString(key);      out.writeString(methodName);      out.writeLong(args.length);      for (      Object arg : args) {        out.writeObject(arg);      }    }   } catch (  IOException e) {    log.log(Level.FINER,e.toString(),e);  }}  }
class C{  private void generateBannerImage(String materialImageName) throws IOException {  BufferedImage backgroundImage=null;  try {    backgroundImage=ImageIO.read(new File(Options.outputDir + "/tex/banner_base.png"));  } catch (  IOException e) {synchronized (Banner.class) {      Log.error("Cant read banner_base - did you export Textures first?",e,firstBaseReadError);      firstBaseReadError=false;    }  }  if (backgroundImage != null) {    int imageWidth=backgroundImage.getWidth();    int imageHeight=backgroundImage.getHeight();    BufferedImage combined=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);    Graphics combinedGraphics=combined.getGraphics();    combinedGraphics.drawImage(backgroundImage,0,0,null);synchronized (PatternList) {      for (      BannerPattern bp : PatternList) {        BufferedImage patternImage=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);        BufferedImage patternSource=null;        try {          patternSource=ImageIO.read(new File(Options.outputDir + "/tex/banner_pattern_" + bp.getPattern()+ ".png"));        } catch (        IOException e) {          Log.error("Cant read banner_pattern_" + bp.getPattern() + " - did you export Textures first?",e,true);        }        BufferedImage patternAlpha=null;        try {          patternAlpha=ImageIO.read(new File(Options.outputDir + "/tex/banner_pattern_" + bp.getPattern()+ "_a.png"));        } catch (        IOException e) {          Log.error("Cant read banner_pattern_" + bp.getPattern() + "_a - you need to export Textures with seperate alpha!",e,true);        }        Color patternColor=getColorById(bp.getColor());        for (int x=0; x < imageWidth; x++) {          for (int y=0; y < imageHeight; y++) {            Color maskColor=new Color(patternSource.getRGB(x,y));            Color mainMaskColor=new Color(patternAlpha.getRGB(x,y));            int alpha=maskColor.getRed();            if (alpha > mainMaskColor.getRed()) {              alpha=alpha * (mainMaskColor.getRed() / 255);            }            Color currentColor=new Color(patternColor.getRed(),patternColor.getGreen(),patternColor.getBlue(),alpha);            patternImage.setRGB(x,y,currentColor.getRGB());          }        }        combinedGraphics.drawImage(patternImage,0,0,null);        Log.info(" - Pattern: " + bp.getPattern() + " / "+ bp.getColor()+ "");      }    }    if (!ImageIO.write(combined,"PNG",new File(Options.outputDir + "/tex",materialImageName + ".png"))) {      throw new RuntimeException("Unexpected error writing image");    }  }}  }
class C{  @Override public int hashCode(){  int hashX=((Double)x).hashCode();  int hashY=((Double)y).hashCode();  return 31 * hashX + hashY;}  }
class C{  public static Page page(Collection entries,Pageable pageable){  final List<?> all;  if (pageable.getSort() != null) {    log.info("The page specification requests sorting, so we are going to sort the data first");    all=sort(entries,pageable.getSort());  } else {    log.info("The page specification does not need sorting, so we are going to load the data as-is");    all=new LinkedList(entries);  }  int start=Math.max(0,pageable.getPageNumber() * pageable.getPageSize());  int end=start + pageable.getPageSize();  start=Math.min(start,all.size());  end=Math.min(end,all.size());  log.info("Trimming the selection down for page " + pageable.getPageNumber() + " to include items from "+ start+ " to "+ end);  final List<?> selection=new LinkedList<>(all.subList(start,end));  return new PageImpl(selection,pageable,all.size());}  }
class C{  public BatchFraction defaultJobRepository(final InMemoryJobRepository<?> jobRepository){  return defaultJobRepository(jobRepository.getKey());}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  final gov.nasa.worldwind.geom.Sector sector=(gov.nasa.worldwind.geom.Sector)o;  if (!maxLatitude.equals(sector.maxLatitude))   return false;  if (!maxLongitude.equals(sector.maxLongitude))   return false;  if (!minLatitude.equals(sector.minLatitude))   return false;  if (!minLongitude.equals(sector.minLongitude))   return false;  return true;}  }
class C{  public static final boolean isWhite(int pType){  return pType < BKING;}  }
class C{  public Actions actions(int flashVersion){  actions=new Actions(0,flashVersion);  return actions;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public int dimCheck(DelaunayVertex p){  int len=this.coordinates.length;  if (len != p.coordinates.length) {    throw new IllegalArgumentException("Dimension mismatch");  }  return len;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.NEW_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  return;case N4JSPackage.NEW_EXPRESSION__CALLEE:setCallee((Expression)null);return;case N4JSPackage.NEW_EXPRESSION__ARGUMENTS:getArguments().clear();return;case N4JSPackage.NEW_EXPRESSION__WITH_ARGS:setWithArgs(WITH_ARGS_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static String readToString(InputStream i,String encoding) throws IOException {  byte[] b=readInputStream(i);  return new String(b,0,b.length,encoding);}  }
class C{  protected void doNodeConnect(Node n){  if (!shutDown && n.getNodeId() < syncManager.getLocalNodeId()) {    Short nodeId=n.getNodeId();synchronized (connections) {      NodeConnection c=connections.get(n.getNodeId());      if (c == null) {        connections.put(nodeId,c=new NodeConnection());      }      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] Connection state: {}",new Object[]{syncManager.getLocalNodeId(),nodeId,c.state});      }      if (c.state.equals(NodeConnectionState.NONE)) {        if (logger.isDebugEnabled()) {          logger.debug("[{}->{}] Attempting connection {} {}",new Object[]{syncManager.getLocalNodeId(),nodeId,n.getHostname(),n.getPort()});        }        SocketAddress sa=new InetSocketAddress(n.getHostname(),n.getPort());        c.pendingFuture=clientBootstrap.connect(sa);        c.pendingFuture.addListener(new ConnectCFListener(n));        c.state=NodeConnectionState.PENDING;      }    }  }}  }
class C{  protected <T>void respondWithJson(HttpServletResponse resp,T value) throws IOException {  resp.setStatus(200);  resp.setContentType(MediaType.JSON_UTF_8.toString());  ServletOutputStream os=resp.getOutputStream();  mapper.writeValue(os,value);}  }
class C{  public void stopAutoHideTimer(){  autoHideTimer.stop();}  }
class C{  public void actionPerformed(ActionEvent e){  SwingUtilities.invokeLater(m_tickPB);}  }
class C{  public int compare(Object newObj,Object existingObj){  if ((existingObj == null && newObj == null) || !(existingObj instanceof Comparable) || !(newObj instanceof Comparable))   return EQUALTO; else   if (existingObj == null)   return GREATERTHAN; else   if (newObj == null)   return LESSTHAN;  if (childComparator == null) {    return reverseIfNeeded(compareThis(newObj,existingObj));  } else   return reverseIfNeeded(childComparator.compare(newObj,existingObj));}  }
class C{  public CharSequence format(){  if (pieces.isEmpty()) {    return input;  }  String target;  for (  Piece piece : pieces) {    target=BRACE_START + piece.getKey() + BRACE_END;    input=input.replace(target,String.valueOf(piece.getValue()));  }  return input;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    return basicSetTag(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public JavaTransformFactory(String name){  super(name);  install(Class.class,ClassView.class);  install(Interface.class,InterfaceView.class);  install(Method.class,MethodView.class);  install(Field.class,FieldView.class);  install(Type.class,TypeView.class);  install(Modifier.class,ModifierView.class);  install(Javadoc.class,JavadocView.class);  install(JavadocTag.class,JavadocTagView.class);  install(Import.class,ImportView.class);  install(Generic.class,GenericView.class);  install(Enum.class,EnumView.class);  install(EnumConstant.class,EnumConstantView.class);  install(Annotation.class,AnnotationView.class);  install(AnnotationUsage.class,AnnotationUsageView.class);  install(ArrayValue.class,ArrayValueView.class);  install(BooleanValue.class,BooleanValueView.class);  install(EnumValue.class,EnumValueView.class);  install(NumberValue.class,NumberValueView.class);  install(ReferenceValue.class,ReferenceValueView.class);  install(TextValue.class,TextValueView.class);  install(InterfaceMethod.class,InterfaceMethodView.class);  install(InterfaceField.class,InterfaceFieldView.class);  install(Constructor.class,ConstructorView.class);  install(File.class,FileView.class);  install(Initializer.class,InitalizerView.class);}  }
class C{  public Pair<String,String> compareParameter(List<String> oldParameters,List<String> newParameters){  Iterator<String> paramIter=newParameters.iterator();  while (paramIter.hasNext()) {    String param=paramIter.next();    int index=oldParameters.indexOf(param);    if (index != -1) {      paramIter.remove();      oldParameters.remove(index);    }  }  if (!oldParameters.isEmpty() || !newParameters.isEmpty()) {    return new Pair<String,String>(Arrays.toString(oldParameters.toArray(new String[oldParameters.size()])),Arrays.toString(newParameters.toArray(new String[newParameters.size()])));  }  return null;}  }
class C{  private static CellProcessor addParseInt(CellProcessor cellProcessor){  if (cellProcessor == null) {    return new ParseInt();  }  return new ParseInt((LongCellProcessor)cellProcessor);}  }
class C{  private XYPlot initializeUpperPlot(){  liveThreads=new YIntervalSeriesImproved("live");  peakThreads=new YIntervalSeriesImproved("peak");  YIntervalSeriesCollection yIntervalSeriesCollection=new YIntervalSeriesCollection();  yIntervalSeriesCollection.addSeries(liveThreads);  yIntervalSeriesCollection.addSeries(peakThreads);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  renderer.setSeriesFillPaint(0,new Color(255,200,200));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("Threads");  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  rangeAxis.setAutoRangeMinimumSize(10.0d,false);  rangeAxis.setRangeType(RangeType.POSITIVE);  final XYPlot subplot=new XYPlot(yIntervalSeriesCollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  public Boolean isApiWallet(){  return apiWallet;}  }
class C{  protected void validateParameterValues(org.oscm.xsd.ServiceParameter[] param){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement03.class,args);}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Description("Authenticates a user session.") @Path("/login") public PrincipalUserDto login(@Context HttpServletRequest req,final CredentialsDto creds){  try {    PrincipalUserDto result=null;    PrincipalUser user=authService.getUser(creds.getUsername(),creds.getPassword());    if (user != null) {      result=PrincipalUserDto.transformToDto(user);    } else {      throw new WebApplicationException(Response.Status.UNAUTHORIZED.getReasonPhrase(),Response.Status.UNAUTHORIZED);    }    req.getSession(true).setAttribute(AuthFilter.USER_ATTRIBUTE_NAME,result);    return result;  } catch (  Exception ex) {    throw new WebApplicationException(Response.Status.UNAUTHORIZED.getReasonPhrase(),Response.Status.UNAUTHORIZED);  }}  }
class C{  @Override public void onBackPressed(){  resetActionBarIfApplicable();  super.onBackPressed();}  }
class C{  public Object parse(URL url,Map params,String charset){  return parseURL(url,params,charset);}  }
class C{  void mergeSort(int from,int to){  if (to - from < INSERTION_SORT_SIZE) {    binaryInsertionSort(from,to);    return;  }  int m=(from + to) >>> 1;  mergeSort(from,m);  mergeSort(m + 1,to);  merge(from,m + 1,to);}  }
class C{  private void visualizeResizeForDelta(int deltaX,int deltaY,boolean onDismiss){  updateDeltas(deltaX,deltaY);  DragLayer.LayoutParams lp=(DragLayer.LayoutParams)getLayoutParams();  if (mLeftBorderActive) {    lp.x=mBaselineX + mDeltaX;    lp.width=mBaselineWidth - mDeltaX;  } else   if (mRightBorderActive) {    lp.width=mBaselineWidth + mDeltaX;  }  if (mTopBorderActive) {    lp.y=mBaselineY + mDeltaY;    lp.height=mBaselineHeight - mDeltaY;  } else   if (mBottomBorderActive) {    lp.height=mBaselineHeight + mDeltaY;  }  resizeWidgetIfNeeded(onDismiss);  requestLayout();}  }
class C{  public boolean match(ArrayAccess node,Object other){  if (!(other instanceof ArrayAccess)) {    return false;  }  ArrayAccess o=(ArrayAccess)other;  return (safeSubtreeMatch(node.getArray(),o.getArray()) && safeSubtreeMatch(node.getIndex(),o.getIndex()));}  }
class C{  ObjectStreamField(String signature,String name){  if (name == null) {    throw new NullPointerException("name == null");  }  this.name=name;  this.typeString=signature.replace('.','/').intern();  defaultResolve();  this.isDeserialized=true;}  }
class C{  public int flags(){  return theFlags;}  }
class C{  private boolean checkDisposed(){  return treeViewer.getTree().isDisposed();}  }
class C{  public void createS3Object(BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectDataInvalidateUnregisteredRequest request,int businessObjectDataVersion){  StorageEntity storageEntity=storageDao.getStorageByName(request.getStorageName());  String s3BucketName=storageHelper.getS3BucketAccessParams(storageEntity).getS3BucketName();  BusinessObjectDataKey businessObjectDataKey=getBusinessObjectDataKey(request);  businessObjectDataKey.setBusinessObjectDataVersion(businessObjectDataVersion);  String s3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE,businessObjectFormatEntity,businessObjectDataKey,storageEntity.getName());  String s3ObjectKey=s3KeyPrefix + "/test";  PutObjectRequest putObjectRequest=new PutObjectRequest(s3BucketName,s3ObjectKey,new ByteArrayInputStream(new byte[1]),new ObjectMetadata());  s3Operations.putObject(putObjectRequest,null);}  }
class C{  private int read1(byte[] b,int off,int len) throws IOException {  int avail=count - pos;  if (avail <= 0) {    if (len >= getBufIfOpen().length && markpos < 0) {      return getInIfOpen().read(b,off,len);    }    fill();    avail=count - pos;    if (avail <= 0)     return -1;  }  int cnt=(avail < len) ? avail : len;  System.arraycopy(getBufIfOpen(),pos,b,off,cnt);  pos+=cnt;  return cnt;}  }
class C{  @Override public Channel createChannel(int fromMemberId,int toMemberId){  SocketChannel channel=new SocketChannel(gondola,fromMemberId,toMemberId);  channels.add(channel);  return channel;}  }
class C{  public List<OutgoingBatch> filterBatchesForInactiveChannels(){  List<OutgoingBatch> filtered=new ArrayList<OutgoingBatch>();  for (  OutgoingBatch batch : batches) {    if (!activeChannelIds.contains(batch.getChannelId())) {      filtered.add(batch);    }  }  batches.removeAll(filtered);  return filtered;}  }
class C{  public Boolean isIncludeImageFiles(){  return includeImageFiles;}  }
class C{  protected void sequence_S_Definition(ISerializationContext context,S_Definition semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void dispatchError(final boolean forceCloseSocket,final List<ISpeedTestListener> listenerList,final boolean isDownload,final String errorMessage){  if (!forceCloseSocket) {    if (isDownload) {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onDownloadError(SpeedTestError.CONNECTION_ERROR,errorMessage);      }    } else {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onUploadError(SpeedTestError.CONNECTION_ERROR,errorMessage);      }    }  } else {    for (int i=0; i < listenerList.size(); i++) {      listenerList.get(i).onInterruption();    }  }}  }
class C{  public String generate(){  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  String docActionSelected=(String)docAction.getValue();  return generate(panel.getStatusBar(),docTypeKNPair,docActionSelected);}  }
class C{  private void createRunnersForParameters(Iterable<Object> allParameters,String namePattern) throws InitializationError, Exception {  try {    int i=0;    for (    Object parametersOfSingleTest : allParameters) {      if (parametersOfSingleTest instanceof Object[]) {        Object[] parameters=(Object[])parametersOfSingleTest;        String name=nameFor(namePattern,i,parameters);        ParametrizedXtextTestClassRunner runner=new ParametrizedXtextTestClassRunner(getTestClass().getJavaClass(),parameters,name);        runners.add(runner);      } else {        String name=parametersOfSingleTest.toString();        ParametrizedXtextTestClassRunner runner=new ParametrizedXtextTestClassRunner(getTestClass().getJavaClass(),new Object[]{parametersOfSingleTest},name);        runners.add(runner);      }      ++i;    }  } catch (  ClassCastException e) {    throw unexpectedArrayElement();  }}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public boolean isSetVersion(){  return EncodingUtils.testBit(__isset_bitfield,__VERSION_ISSET_ID);}  }
class C{  protected void writeLinkToStorage(Link lt,LinkInfo linkInfo){  LinkType type=getLinkType(lt,linkInfo);  Map<String,Object> rowValues=new HashMap<String,Object>();  String id=getLinkId(lt);  rowValues.put(LINK_ID,id);  rowValues.put(LINK_VALID_TIME,linkInfo.getUnicastValidTime());  String srcDpid=lt.getSrc().toString();  rowValues.put(LINK_SRC_SWITCH,srcDpid);  rowValues.put(LINK_SRC_PORT,lt.getSrcPort());  if (type == LinkType.DIRECT_LINK)   rowValues.put(LINK_TYPE,"internal"); else   if (type == LinkType.MULTIHOP_LINK)   rowValues.put(LINK_TYPE,"external"); else   if (type == LinkType.TUNNEL)   rowValues.put(LINK_TYPE,"tunnel"); else   rowValues.put(LINK_TYPE,"invalid");  String dstDpid=lt.getDst().toString();  rowValues.put(LINK_DST_SWITCH,dstDpid);  rowValues.put(LINK_DST_PORT,lt.getDstPort());  storageSourceService.updateRowAsync(LINK_TABLE_NAME,rowValues);}  }
class C{  private void ensureCapacity(int updateSize,boolean finalOutput){  int bufLen=updateSize;  if (finalOutput) {    if (bufferedBlockCipher != null) {      bufLen=bufferedBlockCipher.getOutputSize(updateSize);    } else     if (aeadBlockCipher != null) {      bufLen=aeadBlockCipher.getOutputSize(updateSize);    }  } else {    if (bufferedBlockCipher != null) {      bufLen=bufferedBlockCipher.getUpdateOutputSize(updateSize);    } else     if (aeadBlockCipher != null) {      bufLen=aeadBlockCipher.getUpdateOutputSize(updateSize);    }  }  if ((buf == null) || (buf.length < bufLen)) {    buf=new byte[bufLen];  }}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Number must be non-null");  }  double doubleValue=number.doubleValue();  JSON.checkDouble(doubleValue);  if (number.equals(NEGATIVE_ZERO)) {    return "-0";  }  long longValue=number.longValue();  if (doubleValue == (double)longValue) {    return Long.toString(longValue);  }  return number.toString();}  }
class C{  public static String cssType(int cssType,int primitiveValueType){  String desc=null;  if (cssType == CSSValue.CSS_PRIMITIVE_VALUE) {    if (primitiveValueType >= TYPE_DESCRIPTIONS.size()) {      desc="{unknown: " + primitiveValueType + "}";    } else {      desc=(String)TYPE_DESCRIPTIONS.get(primitiveValueType);      if (desc == null) {        desc="{UNKNOWN VALUE TYPE}";      }    }  } else {    desc="{value list}";  }  return desc;}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public OMGrid(int x,int y,double vResolution,double hResolution,int[][] data){  setRenderType(RENDERTYPE_XY);  set(0.0f,0.0f,x,y,vResolution,hResolution,data);}  }
class C{  @NoInline public static void writeField(int fieldWidth,int value){  int len=1, temp=value;  if (temp < 0) {    len++;    temp=-temp;  }  while (temp >= 10) {    len++;    temp/=10;  }  while (fieldWidth > len++)   write(" ");  if (runningVM) {    sysCall.sysConsoleWriteInteger(value,0);  } else {    writeNotRunningVM(value);  }}  }
class C{  public CategoryMarker(Comparable key,Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){  super(paint,stroke,outlinePaint,outlineStroke,alpha);  this.key=key;  setLabelOffsetType(LengthAdjustmentType.EXPAND);}  }
class C{  @Override public final void release(final K ctx){  if (ctx.usage == USAGE_TL_IN_USE) {    ctx.usage=USAGE_TL_INACTIVE;  } else {    ctxProviderCLQ.release(ctx);  }}  }
class C{  public boolean has(final String name){  return contents.containsKey(name.toLowerCase());}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  static String validateTnf(short tnf,byte[] type,byte[] id,byte[] payload){switch (tnf) {case TNF_EMPTY:    if (type.length != 0 || id.length != 0 || payload.length != 0) {      return "unexpected data in TNF_EMPTY record";    }  return null;case TNF_WELL_KNOWN:case TNF_MIME_MEDIA:case TNF_ABSOLUTE_URI:case TNF_EXTERNAL_TYPE:return null;case TNF_UNKNOWN:case TNF_RESERVED:if (type.length != 0) {return "unexpected type field in TNF_UNKNOWN or TNF_RESERVEd record";}return null;case TNF_UNCHANGED:return "unexpected TNF_UNCHANGED in first chunk or logical record";default :return String.format("unexpected tnf value: 0x%02x",tnf);}}  }
class C{  public AbstractLensSupport(VisualizationViewer<V,E> vv,ModalGraphMouse lensGraphMouse){  this.vv=vv;  this.graphMouse=vv.getGraphMouse();  this.defaultToolTipText=vv.getToolTipText();  this.lensGraphMouse=lensGraphMouse;}  }
