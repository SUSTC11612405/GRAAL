class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @Override protected final void prepareResponse() throws IOException {  boolean entityBody=true;  contentDelimitation=false;  OutputFilter[] outputFilters=outputBuffer.getFilters();  if (http09 == true) {    outputBuffer.addActiveFilter(outputFilters[Constants.IDENTITY_FILTER]);    outputBuffer.commit();    return;  }  int statusCode=response.getStatus();  if (statusCode < 200 || statusCode == 204 || statusCode == 205 || statusCode == 304) {    outputBuffer.addActiveFilter(outputFilters[Constants.VOID_FILTER]);    entityBody=false;    contentDelimitation=true;  }  MessageBytes methodMB=request.method();  if (methodMB.equals("HEAD")) {    outputBuffer.addActiveFilter(outputFilters[Constants.VOID_FILTER]);    contentDelimitation=true;  }  boolean sendingWithSendfile=false;  if (endpoint.getUseSendfile()) {    sendingWithSendfile=prepareSendfile(outputFilters);  }  boolean isCompressable=false;  boolean useCompression=false;  if (entityBody && (compressionLevel > 0) && !sendingWithSendfile) {    isCompressable=isCompressable();    if (isCompressable) {      useCompression=useCompression();    }    if (useCompression) {      response.setContentLength(-1);    }  }  MimeHeaders headers=response.getMimeHeaders();  if (!entityBody) {    response.setContentLength(-1);  }  if (entityBody || statusCode == HttpServletResponse.SC_NO_CONTENT) {    String contentType=response.getContentType();    if (contentType != null) {      headers.setValue("Content-Type").setString(contentType);    }    String contentLanguage=response.getContentLanguage();    if (contentLanguage != null) {      headers.setValue("Content-Language").setString(contentLanguage);    }  }  long contentLength=response.getContentLengthLong();  boolean connectionClosePresent=false;  if (contentLength != -1) {    headers.setValue("Content-Length").setLong(contentLength);    outputBuffer.addActiveFilter(outputFilters[Constants.IDENTITY_FILTER]);    contentDelimitation=true;  } else {    connectionClosePresent=isConnectionClose(headers);    if (entityBody && http11 && !connectionClosePresent) {      outputBuffer.addActiveFilter(outputFilters[Constants.CHUNKED_FILTER]);      contentDelimitation=true;      headers.addValue(Constants.TRANSFERENCODING).setString(Constants.CHUNKED);    } else {      outputBuffer.addActiveFilter(outputFilters[Constants.IDENTITY_FILTER]);    }  }  if (useCompression) {    outputBuffer.addActiveFilter(outputFilters[Constants.GZIP_FILTER]);    headers.setValue("Content-Encoding").setString("gzip");  }  if (isCompressable) {    MessageBytes vary=headers.getValue("Vary");    if (vary == null) {      headers.setValue("Vary").setString("Accept-Encoding");    } else     if (vary.equals("*")) {    } else {      headers.setValue("Vary").setString(vary.getString() + ",Accept-Encoding");    }  }  if (headers.getValue("Date") == null) {    headers.addValue("Date").setString(FastHttpDateFormat.getCurrentDate());  }  if ((entityBody) && (!contentDelimitation)) {    keepAlive=false;  }  checkExpectationAndResponseStatus();  if (keepAlive && statusDropsConnection(statusCode)) {    keepAlive=false;  }  if (!keepAlive) {    if (!connectionClosePresent) {      headers.addValue(Constants.CONNECTION).setString(Constants.CLOSE);    }  } else   if (!http11 && !getErrorState().isError()) {    headers.addValue(Constants.CONNECTION).setString(Constants.KEEPALIVE);  }  if (server == null) {    if (serverRemoveAppProvidedValues) {      headers.removeHeader("server");    }  } else {    headers.setValue("Server").setString(server);  }  try {    outputBuffer.sendStatus();    int size=headers.size();    for (int i=0; i < size; i++) {      outputBuffer.sendHeader(headers.getName(i),headers.getValue(i));    }    outputBuffer.endHeaders();  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    outputBuffer.resetHeaderBuffer();    throw t;  }  outputBuffer.commit();}  }
class C{  private void assertEntry(boolean attrsShouldExistInEntry,Attribute... attrs) throws Exception {  if (attrs != null && attrs.length > 0) {    TaskUtils.enableBackend(beID);    Entry entry=DirectoryServer.getEntry(DN.valueOf(" uid=user.0,dc=example,dc=com"));    TaskUtils.disableBackend(beID);    assertNotNull(entry);    for (    Attribute a : attrs) {      final List<Attribute> attributes=collect(entry.getAllAttributes(),new ArrayList<Attribute>());      assertEquals(attributes.contains(a),attrsShouldExistInEntry);    }  }}  }
class C{  @NonNull @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static Animator reveal(@NonNull final View view,int cx,int cy,int startRadius,int finalRadius,int duration){  Animator animator=ViewAnimationUtils.createCircularReveal(view,cx,cy,startRadius,finalRadius);  animator.setDuration(duration);  return animator;}  }
class C{  public boolean seek(final File seekFile,long startByte) throws IOException {  ByteBuffer header;  long filePointerCount;  final FileInputStream fis=new FileInputStream(seekFile);  final FileChannel fc=fis.getChannel();  ByteBuffer bb=ByteBuffer.allocateDirect(FILE_BUFFER_SIZE);  fc.position(startByte);  filePointerCount=startByte;  fc.read(bb,startByte);  bb.flip();  boolean syncFound=false;  try {    do {      if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) {        bb.clear();        fc.position(filePointerCount);        fc.read(bb,fc.position());        bb.flip();        if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) {          return false;        }      }      if (MPEGFrameHeader.isMPEGFrame(bb)) {        try {          if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {            MP3AudioHeader.logger.finest("Found Possible header at:" + filePointerCount);          }          mp3FrameHeader=MPEGFrameHeader.parseMPEGHeader(bb);          syncFound=true;          if ((header=XingFrame.isXingFrame(bb,mp3FrameHeader)) != null) {            if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {              MP3AudioHeader.logger.finest("Found Possible XingHeader");            }            try {              mp3XingFrame=XingFrame.parseXingFrame(header);            } catch (            InvalidAudioFrameException ex) {            }            break;          } else           if ((header=VbriFrame.isVbriFrame(bb,mp3FrameHeader)) != null) {            if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {              MP3AudioHeader.logger.finest("Found Possible VbriHeader");            }            try {              mp3VbriFrame=VbriFrame.parseVBRIFrame(header);            } catch (            InvalidAudioFrameException ex) {            }            break;          } else {            syncFound=isNextFrameValid(seekFile,filePointerCount,bb,fc);            if (syncFound) {              break;            }          }        } catch (        InvalidAudioFrameException ex) {        }      }      bb.position(bb.position() + 1);      filePointerCount++;    } while (!syncFound);  } catch (  EOFException ex) {    MP3AudioHeader.logger.log(Level.WARNING,"Reached end of file without finding sync match",ex);    syncFound=false;  }catch (  IOException iox) {    MP3AudioHeader.logger.log(Level.SEVERE,"IOException occurred whilst trying to find sync",iox);    syncFound=false;    throw iox;  } finally {    if (fc != null) {      fc.close();    }    if (fis != null) {      fis.close();    }  }  if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {    MP3AudioHeader.logger.finer("Return found matching mp3 header starting at" + filePointerCount);  }  setFileSize(seekFile.length());  setMp3StartByte(filePointerCount);  setTimePerFrame();  setNumberOfFrames();  setTrackLength();  setBitRate();  setEncoder();  return syncFound;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  forwardToPolicyViewBean();}  }
class C{  public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrreplacechild1.class,args);}  }
class C{  public static Polygon fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,Polygon.class);}  }
class C{  public static void addToParserTable(String headerName,Class<? extends HeaderParser> parserClass){  parserTable.put(headerName.toLowerCase(),parserClass);}  }
class C{  @Override public void recycle(){}  }
class C{  public InstallState(Map keyValuePairs,ArrayList keysToUse) throws InstallException {  Debug.log("InstallState : initalizing the state");  String instanceName=getInstFinderStore().getInstanceName(keyValuePairs,keysToUse);  if (instanceName == null) {    InstFinderData iFinderData=getInstFinderStore().generateInstFinderData(keyValuePairs,keysToUse);    setInstFinderData(iFinderData);    instanceName=iFinderData.getInstanceName();  }  if (!getInstallDataStore().isExistingStore()) {    Debug.log("InstallState(): No existing data store was found. " + "Creating state with Instance Finder data.");    initialize(instanceName,keyValuePairs);  } else {    Debug.log("InstallState(): Existing data store found. Creating " + "state.");    initializeFromStore(instanceName,keyValuePairs);  }}  }
class C{  public static Object callStaticMethod(Class clas,String methodName,Object... params){  try {    Class[] paramsTypes=new Class[params.length];    for (int i=0; i < params.length; i++) {      paramsTypes[i]=Object.class;    }    Method method=clas.getMethod(methodName,paramsTypes);    Object o=method.invoke(null,params);    return o;  } catch (  Exception e) {    throw new JKException(e);  }}  }
class C{  public void removePort(){  sentBy.removePort();}  }
class C{  protected FilterReader(Reader in){  super(in);  this.in=in;}  }
class C{  public String addResource(String resourceName,String type) throws MalformedObjectNameException {  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return null;  }  ContextResource resource=nresources.findResource(resourceName);  if (resource != null) {    throw new IllegalArgumentException("Invalid resource name - already exists'" + resourceName + "'");  }  resource=new ContextResource();  resource.setName(resourceName);  resource.setType(type);  nresources.addResource(resource);  ManagedBean managed=registry.findManagedBean("ContextResource");  ObjectName oname=MBeanUtils.createObjectName(managed.getDomain(),resource);  return (oname.toString());}  }
class C{  public LZWDecoder(){}  }
class C{  public static Border createEmptyBorder(int top,int left,int bottom,int right){  return new EmptyBorder(top,left,bottom,right);}  }
class C{  protected File serverFile(String aFile){  if (aFile == null || aFile.length() < 1)   aFile="server-registry.xml";  File file=new File(aFile);  if (!file.isAbsolute())   file=new File(System.getProperty("catalina.base") + "/conf",aFile);  try {    file=file.getCanonicalFile();  } catch (  IOException e) {    log.error(e);  }  return (file);}  }
class C{  public Builder withFlicker(){  flicker=true;  return this;}  }
class C{  public String encodeRedirectURL(String url){  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().encodeRedirectURL(url) : null;}  }
class C{  public static void fill(char[] a,char val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public SAML2ConfigBuilder encryptionAlgorithmStrength(int encryptionAlgorithmStrength){  this.encryptionAlgorithmStrength=encryptionAlgorithmStrength;  return this;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public ECPRelayStateImpl(Element element) throws SAML2Exception {  parseElement(element);}  }
class C{  final boolean casCellsBusy(){  return UNSAFE.compareAndSwapInt(this,CELLSBUSY,0,1);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  static void checkActorAndMustUnderstand(String actor,Boolean mustUnderstand,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (actor != null && !supportedActors.contains(actor)) {    if (isServer) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.BOGUS_ACTOR,messageID,null);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("bogusActor"));    }  }  if (mustUnderstand != null && !mustUnderstand.booleanValue()) {    if (isServer) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.BOGUS_MUST_UNSTND,messageID,null);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("bogusMustUnderstand"));    }  }}  }
class C{  public boolean isValid(boolean possiblyResetIdleTime){  try {    if (ldapConnect) {      return true;    }    SessionState state=session.getState(possiblyResetIdleTime);    return state == SessionState.VALID;  } catch (  Exception e) {    return false;  }}  }
class C{  private InternalSession resolveToken(SessionID token) throws SessionException {  InternalSession sess=sessionAccessManager.getInternalSession(token);  if (sess == null) {    sess=resolveRestrictedToken(token,true);  }  if (sess == null) {    throw new InvalidSessionIdException(token);  }  return sess;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterResolution);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.LogoutResponseElement createLogoutResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.LogoutResponseElementImpl();}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] keyInfoData) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(keyInfoData)));}  }
class C{  public boolean isSecure(){  return secureLdap;}  }
class C{  public static void checkSchemas(ResultSet rs,String[] userExpected) throws SQLException {  String[] expected=new String[BUILTIN_SCHEMAS.length + userExpected.length];  System.arraycopy(BUILTIN_SCHEMAS,0,expected,0,BUILTIN_SCHEMAS.length);  System.arraycopy(userExpected,0,expected,BUILTIN_SCHEMAS.length,userExpected.length);  for (int i=BUILTIN_SCHEMAS.length; i < expected.length; i++) {    expected[i]=getStoredIdentifier(expected[i]);  }  Arrays.sort(expected);  int nextMatch=0;  while (rs.next()) {    String schema=rs.getString("TABLE_SCHEM");    assertNotNull(schema);    if (nextMatch < expected.length) {      if (expected[nextMatch].equals(schema))       nextMatch++;    }  }  rs.close();  assertEquals("Schemas missing ",expected.length,nextMatch);}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.externalEntityDecl(name,publicId,systemId);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notationList;  Node notation;  int notationType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notationList=docType.getNotations();  assertNotNull("notationsNotNull",notationList);  for (int indexN10049=0; indexN10049 < notationList.getLength(); indexN10049++) {    notation=(Node)notationList.item(indexN10049);    notationType=(int)notation.getNodeType();    assertEquals("documenttypeGetNotationsTypeAssert",12,notationType);  }}  }
class C{  public void unsetCompression(){  if (!canWriteCompressed()) {    throw new UnsupportedOperationException("Compression not supported");  }  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  this.compressionType=null;  this.compressionQuality=1.0F;}  }
class C{  public FrameBodyTCOP(){}  }
class C{  public static String readFile(File file) throws IOException {  return new String(readFileBytes(file));}  }
class C{  public void updateBackendVLVIndexes(String backendName){  backendVLVIndexesPanel.update(backendName);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,backendVLVIndexesPanel.getTitle().toString());}  }
class C{  public javax.sip.address.Address createAddress(){  return new AddressImpl();}  }
class C{  public final int incrementAndGet(){  for (; ; ) {    int current=get();    int next=current + 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  @Suppress @SmallTest public void testPhoneNumbersEqualInternationl() throws Exception {  assertPhoneNumberEqual("1","1");  assertPhoneNumberEqual("123123","123123");  assertPhoneNumberNotEqual("123123","923123");  assertPhoneNumberNotEqual("123123","123129");  assertPhoneNumberNotEqual("123123","1231234");  assertPhoneNumberNotEqual("123123","0123123",false);  assertPhoneNumberNotEqual("123123","0123123",true);  assertPhoneNumberEqual("650-253-0000","6502530000");  assertPhoneNumberEqual("650-253-0000","650 253 0000");  assertPhoneNumberEqual("650 253 0000","6502530000");  assertPhoneNumberEqual("+1 650-253-0000","6502530000");  assertPhoneNumberEqual("001 650-253-0000","6502530000");  assertPhoneNumberEqual("0111 650-253-0000","6502530000");  assertPhoneNumberEqual("+79161234567","89161234567");  assertPhoneNumberEqual("+33123456789","0123456789");  assertPhoneNumberEqual("+31771234567","0771234567");  assertPhoneNumberEqual("+66811234567","166811234567");  assertPhoneNumberNotEqual("+33123456789","+1123456789");  assertPhoneNumberEqual("5125551212","+15125551212");  assertPhoneNumberNotEqual("5125551212","6505551212");  assertPhoneNumberEqual("090-1234-5678","+819012345678");  assertPhoneNumberEqual("090(1234)5678","+819012345678");  assertPhoneNumberEqual("090-1234-5678","+81-90-1234-5678");  assertPhoneNumberEqual("+593(800)123-1234","8001231234");  assertPhoneNumberEqual("+593-2-1234-123","21234123");  assertPhoneNumberEqual("008001231234","8001231234",false);  assertPhoneNumberNotEqual("008001231234","8001231234",true);  assertPhoneNumberEqual("080-1234-5678","+819012345678",false);  assertPhoneNumberNotEqual("080-1234-5678","+819012345678",true);}  }
class C{  public void onResume(){  Session session=Session.getActiveSession();  if (session != null) {    if (callback != null) {      session.addCallback(callback);    }    if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState())) {      session.openForRead(null);    }  }  IntentFilter filter=new IntentFilter();  filter.addAction(Session.ACTION_ACTIVE_SESSION_SET);  filter.addAction(Session.ACTION_ACTIVE_SESSION_UNSET);  broadcastManager.registerReceiver(receiver,filter);}  }
class C{  public DsnNet add_net(DsnNetId p_net_id){  DsnNet result;  if (nets.containsKey(p_net_id)) {    result=null;  } else {    result=new DsnNet(p_net_id);    nets.put(p_net_id,result);  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Enumeration<T> emptyEnumeration(){  return (Enumeration<T>)EMPTY_ENUMERATION;}  }
class C{  public static ModifyDNRequest unmodifiableModifyDNRequest(final ModifyDNRequest request){  if (request instanceof UnmodifiableModifyDNRequestImpl) {    return request;  }  return new UnmodifiableModifyDNRequestImpl(request);}  }
class C{  public InvalidFormatException(String msg,String name,int type){  super(msg);  fillInStackTrace();  this.name=name;  this.type=type;}  }
class C{  public void write(byte[] buf) throws IOException {  output.write(buf);  bytesWritten+=buf.length;}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  ShapeTileSimplex remove_redundant_lines(){  ArrayList<PlaLineInt> work_arr=new ArrayList<PlaLineInt>(lines_size());  PlaLineInt prev=tline_get(0);  work_arr.add(prev);  for (int index=1; index < lines_size(); ++index) {    PlaLineInt a_line=tline_get(index);    if (a_line.equals(prev))     continue;    work_arr.add(a_line);    prev=a_line;  }  int new_length=work_arr.size();  PlaSide[] intersection_sides=new PlaSide[new_length];  boolean try_again=new_length > 2;  int index_of_last_removed_line=new_length;  while (try_again) {    try_again=false;    int prev_ind=new_length - 1;    int next_ind;    PlaLineInt prev_line=work_arr.get(prev_ind);    PlaLineInt curr_line=work_arr.get(0);    PlaLineInt next_line;    for (int cur_ind=0; cur_ind < new_length; ++cur_ind) {      if (cur_ind == new_length - 1) {        next_ind=0;      } else {        next_ind=cur_ind + 1;      }      next_line=work_arr.get(next_ind);      boolean remove_line=false;      PlaDirection prev_dir=prev_line.direction();      PlaDirection next_dir=next_line.direction();      long det=prev_dir.determinant(next_dir);      if (det != 0) {        if (intersection_sides[cur_ind] == null) {          intersection_sides[cur_ind]=curr_line.side_of_intersection(prev_line,next_line);        }        if (det > 0) {          remove_line=(intersection_sides[cur_ind] != PlaSide.ON_THE_LEFT);        } else {          if (intersection_sides[cur_ind] == PlaSide.ON_THE_LEFT) {            PlaDirection curr_dir=curr_line.direction();            if (prev_dir.determinant(curr_dir) > 0) {              new_length=0;              try_again=false;              break;            }          }        }      } else {        if (prev_line.side_of(next_line.point_a) == PlaSide.ON_THE_LEFT) {          new_length=0;          try_again=false;          break;        }      }      if (remove_line) {        try_again=true;        --new_length;        work_arr.remove(cur_ind);        for (int index=cur_ind; index < new_length; ++index) {          intersection_sides[index]=intersection_sides[index + 1];        }        if (new_length < 3) {          try_again=false;          break;        }        if (cur_ind == 0) {          prev_ind=new_length - 1;        }        intersection_sides[prev_ind]=null;        if (cur_ind >= new_length) {          next_ind=0;        } else {          next_ind=cur_ind;        }        intersection_sides[next_ind]=null;        --cur_ind;        index_of_last_removed_line=cur_ind;      } else {        prev_line=curr_line;        prev_ind=cur_ind;      }      curr_line=next_line;      if (!try_again && cur_ind >= index_of_last_removed_line) {        break;      }    }  }  if (new_length == 2) {    if (work_arr.get(0).is_parallel(work_arr.get(1))) {      if (work_arr.get(0).direction().equals(work_arr.get(1).direction())) {        if (work_arr.get(1).side_of(work_arr.get(0).point_a) == PlaSide.ON_THE_LEFT) {          work_arr.remove(0);        }        --new_length;      } else {        if (work_arr.get(1).side_of(work_arr.get(0).point_a) == PlaSide.ON_THE_LEFT) {          new_length=0;        }      }    }  }  if (new_length == lines_size()) {    return this;  }  if (new_length == 0) {    return ShapeTileSimplex.EMPTY;  }  return new ShapeTileSimplex(work_arr);}  }
class C{  public TransactionUnavailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Connection createConnection(String addr,int ttl,int numAddrs) throws SdpException {  ConnectionField connectionImpl=new ConnectionField();  connectionImpl.setAddress(addr);  return connectionImpl;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void unload(){  setEstimatedMajorSpan(true);  removeAll();}  }
class C{  public static TextHitInfo leading(int charIndex){  return new TextHitInfo(charIndex,true);}  }
class C{  private void toString(StringBuilder buffer){  buffer.append("LDIFImportResult(entriesRead=");  buffer.append(entriesRead);  buffer.append(", entriesRejected=");  buffer.append(entriesRejected);  buffer.append(", entriesSkipped=");  buffer.append(entriesSkipped);  buffer.append(")");}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.CipherReferenceType createCipherReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.CipherReferenceTypeImpl();}  }
class C{  static String readTokenName(final SubstringReader reader) throws DecodeException {  String token=null;  int length=0;  reader.skipWhitespaces();  reader.mark();  try {    char c;    while ((c=reader.read()) != ' ' && c != ')') {      length++;    }    if (length > 0) {      reader.reset();      token=reader.read(length);    }    reader.skipWhitespaces();    if (token == null && reader.remaining() > 0) {      reader.reset();      throw DecodeException.error(ERR_ATTR_SYNTAX_UNEXPECTED_CLOSE_PARENTHESIS1.get(length));    }    return token;  } catch (  final StringIndexOutOfBoundsException e) {    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());  }}  }
class C{  private void saveResourceType(ResourceType resourceType,String realm) throws UpgradeException {  try {    UpgradeProgress.reportStart(AUDIT_CREATE_RESOURCE_TYPE_START,resourceType.getName());    resourceTypeService.saveResourceType(getAdminSubject(),realm,resourceType);    UpgradeProgress.reportEnd(AUDIT_UPGRADE_SUCCESS);  } catch (  EntitlementException ee) {    UpgradeProgress.reportEnd(AUDIT_UPGRADE_FAIL);    throw new UpgradeException("Failed to create resource type " + resourceType.getName(),ee);  }}  }
class C{  public static Object decodeToObject(String encodedObject){  byte[] objBytes=decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    e.printStackTrace();  }catch (  java.lang.ClassNotFoundException e) {    e.printStackTrace();  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  protected void updateCachedPreferredSize(){  if (treeState != null) {    Insets i=tree.getInsets();    if (isLargeModel()) {      Rectangle visRect=tree.getVisibleRect();      if (visRect.x == 0 && visRect.y == 0 && visRect.width == 0 && visRect.height == 0 && tree.getVisibleRowCount() > 0) {        visRect.width=1;        visRect.height=tree.getRowHeight() * tree.getVisibleRowCount();      } else {        visRect.x-=i.left;        visRect.y-=i.top;      }      Component component=SwingUtilities.getUnwrappedParent(tree);      if (component instanceof JViewport) {        component=component.getParent();        if (component instanceof JScrollPane) {          JScrollPane pane=(JScrollPane)component;          JScrollBar bar=pane.getHorizontalScrollBar();          if ((bar != null) && bar.isVisible()) {            int height=bar.getHeight();            visRect.y-=height;            visRect.height+=height;          }        }      }      preferredSize.width=treeState.getPreferredWidth(visRect);    } else {      preferredSize.width=treeState.getPreferredWidth(null);    }    preferredSize.height=treeState.getPreferredHeight();    preferredSize.width+=i.left + i.right;    preferredSize.height+=i.top + i.bottom;  }  validCachedPreferredSize=true;}  }
class C{  protected AbstractRenderer(){}  }
class C{  public void test_toString(){  final Collection<Locale> locVal=Arrays.asList(Locale.CANADA,Locale.CANADA_FRENCH,Locale.CHINA,Locale.FRANCE,Locale.GERMANY,Locale.ITALY,Locale.JAPAN,Locale.KOREA,Locale.PRC,Locale.SIMPLIFIED_CHINESE,Locale.TAIWAN,Locale.TRADITIONAL_CHINESE,Locale.UK,Locale.US);  final Collection<String> locDat=Arrays.asList("CAD","CAD","CNY","EUR","EUR","EUR","JPY","KRW","CNY","CNY","TWD","TWD","GBP","USD");  Iterator<String> dat=locDat.iterator();  for (  Locale l : locVal) {    String d=dat.next().trim();    assertEquals("For locale " + l + " Currency.toString method returns wrong value",Currency.getInstance(l).toString(),d);  }}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  @Inject UmaUrisFactory(OAuth2UrisFactory oAuth2UriFactory,UmaProviderSettingsFactory umaProviderSettingsFactory,BaseURLProviderFactory baseURLProviderFactory,JacksonRepresentationFactory jacksonRepresentationFactory){  this.oAuth2UriFactory=oAuth2UriFactory;  this.umaProviderSettingsFactory=umaProviderSettingsFactory;  this.baseURLProviderFactory=baseURLProviderFactory;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public static ServerStatus computeNewStatus(ServerStatus curStatus,StatusMachineEvent event){switch (curStatus) {case NOT_CONNECTED_STATUS:switch (event) {case TO_NOT_CONNECTED_STATUS_EVENT:      return ServerStatus.NOT_CONNECTED_STATUS;case TO_NORMAL_STATUS_EVENT:    return ServerStatus.NORMAL_STATUS;case TO_DEGRADED_STATUS_EVENT:  return ServerStatus.DEGRADED_STATUS;case TO_BAD_GEN_ID_STATUS_EVENT:return ServerStatus.BAD_GEN_ID_STATUS;default :return ServerStatus.INVALID_STATUS;}case NORMAL_STATUS:switch (event) {case TO_NOT_CONNECTED_STATUS_EVENT:return ServerStatus.NOT_CONNECTED_STATUS;case TO_NORMAL_STATUS_EVENT:return ServerStatus.NORMAL_STATUS;case TO_DEGRADED_STATUS_EVENT:return ServerStatus.DEGRADED_STATUS;case TO_FULL_UPDATE_STATUS_EVENT:return ServerStatus.FULL_UPDATE_STATUS;case TO_BAD_GEN_ID_STATUS_EVENT:return ServerStatus.BAD_GEN_ID_STATUS;default :return ServerStatus.INVALID_STATUS;}case DEGRADED_STATUS:switch (event) {case TO_NOT_CONNECTED_STATUS_EVENT:return ServerStatus.NOT_CONNECTED_STATUS;case TO_NORMAL_STATUS_EVENT:return ServerStatus.NORMAL_STATUS;case TO_DEGRADED_STATUS_EVENT:return ServerStatus.DEGRADED_STATUS;case TO_FULL_UPDATE_STATUS_EVENT:return ServerStatus.FULL_UPDATE_STATUS;case TO_BAD_GEN_ID_STATUS_EVENT:return ServerStatus.BAD_GEN_ID_STATUS;default :return ServerStatus.INVALID_STATUS;}case FULL_UPDATE_STATUS:switch (event) {case TO_NOT_CONNECTED_STATUS_EVENT:return ServerStatus.NOT_CONNECTED_STATUS;case TO_FULL_UPDATE_STATUS_EVENT:return ServerStatus.FULL_UPDATE_STATUS;default :return ServerStatus.INVALID_STATUS;}case BAD_GEN_ID_STATUS:switch (event) {case TO_NOT_CONNECTED_STATUS_EVENT:return ServerStatus.NOT_CONNECTED_STATUS;case TO_FULL_UPDATE_STATUS_EVENT:return ServerStatus.FULL_UPDATE_STATUS;case TO_BAD_GEN_ID_STATUS_EVENT:return ServerStatus.BAD_GEN_ID_STATUS;default :return ServerStatus.INVALID_STATUS;}default :return ServerStatus.INVALID_STATUS;}}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SAVED_TOP_STORY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"IMAGE\" TEXT,"+ "\"TITLE\" TEXT);");}  }
class C{  public void addActionListener(ActionListener l){  listeners.add(l);}  }
class C{  public static ProtobufWriteContext createNullContext(){  return null;}  }
class C{  protected boolean runAndReset(){  if (state != NEW || !UNSAFE.compareAndSwapObject(this,runnerOffset,null,Thread.currentThread()))   return false;  boolean ran=false;  int s=state;  try {    Callable<V> c=callable;    if (c != null && s == NEW) {      try {        c.call();        ran=true;      } catch (      Throwable ex) {        setException(ex);      }    }  }  finally {    runner=null;    s=state;    if (s >= INTERRUPTING)     handlePossibleCancellationInterrupt(s);  }  return ran && s == NEW;}  }
class C{  @DataProvider(name="testRDNs") public Object[][] createData(){  return new Object[][]{{"dc=hello world","dc=hello world","dc=hello world"},{"dc =hello world","dc=hello world","dc=hello world"},{"dc  =hello world","dc=hello world","dc=hello world"},{"dc= hello world","dc=hello world","dc=hello world"},{"dc=  hello world","dc=hello world","dc=hello world"},{"undefined=hello","undefined=hello","undefined=hello"},{"DC=HELLO WORLD","dc=hello world","DC=HELLO WORLD"},{"dc = hello    world","dc=hello world","dc=hello    world"},{"   dc = hello world   ","dc=hello world","dc=hello world"},{"givenName=John+cn=Doe","cn=doe+givenname=john","givenName=John+cn=Doe"},{"givenName=John\\+cn=Doe","givenname=john\\+cn\\=doe","givenName=John\\+cn=Doe"},{"cn=Doe\\, John","cn=doe\\, john","cn=Doe\\, John"},{"OU=Sales+CN=J. Smith","cn=j. smith+ou=sales","OU=Sales+CN=J. Smith"},{"CN=James \\\"Jim\\\" Smith\\, III","cn=james \\\"jim\\\" smith\\, iii","CN=James \\\"Jim\\\" Smith\\, III"},{"CN=Before\\0dAfter","cn=before after","CN=Before\\0dAfter"},{"cn=#04024869","cn=hi","cn=\\04\\02Hi"},{"CN=Lu\\C4\\8Di\\C4\\87","cn=lu\u010di\u0107","CN=Lu\u010di\u0107"},{"ou=\\e5\\96\\b6\\e6\\a5\\ad\\e9\\83\\a8","ou=\u55b6\u696d\u90e8","ou=\u55b6\u696d\u90e8"},{"photo=\\ john \\ ","photo=\\ john \\ ","photo=\\ john \\ "},{"AB-global=","ab-global=","AB-global="},{"cn=John+a=","a=+cn=john","cn=John+a="},{"O=\"Sue, Grabbit and Runn\"","o=sue\\, grabbit and runn","O=Sue\\, Grabbit and Runn"}};}  }
class C{  public boolean equals(Object target){  if (this == target)   return true;  if (target == null || !getClass().equals(target.getClass())) {    return false;  }  RuleBasedCollationKey other=(RuleBasedCollationKey)target;  return key.equals(other.key);}  }
class C{  public static String join(final String[] strings,final String separator) throws IllegalArgumentException {  if (strings == null) {    throw new IllegalArgumentException("Input array 'strings' can't be null");  }  if (separator == null) {    throw new IllegalArgumentException("separator can't be null");  }  StringJoiner joiner=new StringJoiner(separator);  for (  String el : strings) {    joiner.add(el);  }  return joiner.toString();}  }
class C{  public static void enforceProcessingRules(Message message,String requestMessageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  CorrelationHeader corrH=message.getCorrelationHeader();  String messageID=corrH.getMessageID();  checkCorrelationHeader(corrH,requestMessageID,isServer);  checkProviderHeader(message.getProviderHeader(),messageID,isServer);  checkProcessingContextHeader(message.getProcessingContextHeader(),messageID,isServer);  checkConsentHeader(message.getConsentHeader(),messageID,isServer);  List usagHs=message.getUsageDirectiveHeaders();  if (usagHs != null && !usagHs.isEmpty()) {    Iterator iter=usagHs.iterator();    while (iter.hasNext()) {      UsageDirectiveHeader usagH=(UsageDirectiveHeader)iter.next();      checkUsageDirectiveHeader(usagH,messageID,isServer);    }  }}  }
class C{  public Manifest(){}  }
class C{  public void readItem(Context mContext,AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.BottomNavigationMenuItem);  item=new MenuItem();  item.itemId=a.getResourceId(R.styleable.BottomNavigationMenuItem_android_id,0);  item.itemTitle=a.getText(R.styleable.BottomNavigationMenuItem_android_title);  item.itemIconResId=a.getResourceId(R.styleable.BottomNavigationMenuItem_android_icon,0);  item.itemEnabled=a.getBoolean(R.styleable.BottomNavigationMenuItem_android_enabled,true);  item.itemColor=a.getColor(R.styleable.BottomNavigationMenuItem_android_color,0);  a.recycle();}  }
class C{  public void makeImmutable(){  if (isMutable) {    if ((issuer != null) && (issuer.isMutable())) {      issuer.makeImmutable();    }    if ((extensions != null) && (extensions.isMutable())) {      extensions.makeImmutable();    }    if ((status != null) && (status.isMutable())) {      status.makeImmutable();    }    isMutable=false;  }}  }
class C{  public Promise<List<ResourceResponse>,ResourceException> deletePolicies(Context context,Collection<String> policyIds){  List<Promise<ResourceResponse,ResourceException>> promises=new ArrayList<>();  for (  String policyId : policyIds) {    promises.add(policyResource.handleDelete(context,Requests.newDeleteRequest(policyId)));  }  return Promises.when(promises);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public Enum asEnum(){  return this.resultCodeEnum;}  }
class C{  public boolean isSubTypeOf(final AttributeType type){  AttributeType tmp=this;  do {    if (tmp.matches(type)) {      return true;    }    tmp=tmp.getSuperiorType();  } while (tmp != null);  return false;}  }
class C{  public Waypoint(double longitude,double latitude){  this.longitude=longitude;  this.latitude=latitude;}  }
class C{  public static boolean isDesignTime(){  return ThreadGroupContext.getContext().isDesignTime();}  }
class C{  public SubjectEditViewBean(){  super("SubjectEdit",DEFAULT_DISPLAY_URL);}  }
class C{  public ECPRequestImpl(){  isMutable=true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("*","address");  for (int indexN1005E=0; indexN1005E < elementList.getLength(); indexN1005E++) {    child=(Node)elementList.item(indexN1005E);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new Node[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  @Override public boolean isField2(){  return _foo.isField2();}  }
class C{  boolean printUsageGroupHeaders(){  int groupsContainingArgs=0;  for (  final ArgumentGroup argGroup : argumentGroups) {    if (argGroup.containsNonHiddenArguments()) {      groupsContainingArgs++;    }  }  return groupsContainingArgs > 1;}  }
class C{  public void startTransactionTimer(){  if (this.transactionTimerStarted.compareAndSet(false,true)) {    if (sipStack.getTimer() != null && transactionTimerLock != null) {synchronized (transactionTimerLock) {        if (!transactionTimerCancelled) {          transactionTimer=new TransactionTimer();          sipStack.getTimer().scheduleWithFixedDelay(transactionTimer,baseTimerInterval,baseTimerInterval);        }      }    }  }}  }
class C{  public void testSHA384(){  Digest oldDigest=new SHA384Digest();  Digest newDigest=new OpenSSLDigest.SHA384();  doTestMessageDigest(oldDigest,newDigest);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public static boolean isNumber(String str){  try {    Double.parseDouble(str);    return true;  } catch (  NumberFormatException ignore) {    return false;  }}  }
class C{  private StringBuffer format(long number,StringBuffer result,FieldDelegate delegate){  boolean isNegative=(number < 0);  if (isNegative) {    number=-number;  }  boolean useBigInteger=false;  if (number < 0) {    if (multiplier != 0) {      useBigInteger=true;    }  } else   if (multiplier != 1 && multiplier != 0) {    long cutoff=Long.MAX_VALUE / multiplier;    if (cutoff < 0) {      cutoff=-cutoff;    }    useBigInteger=(number > cutoff);  }  if (useBigInteger) {    if (isNegative) {      number=-number;    }    BigInteger bigIntegerValue=BigInteger.valueOf(number);    return format(bigIntegerValue,result,delegate,true);  }  number*=multiplier;  if (number == 0) {    isNegative=false;  } else {    if (multiplier < 0) {      number=-number;      isNegative=!isNegative;    }  }synchronized (digitList) {    int maxIntDigits=super.getMaximumIntegerDigits();    int minIntDigits=super.getMinimumIntegerDigits();    int maxFraDigits=super.getMaximumFractionDigits();    int minFraDigits=super.getMinimumFractionDigits();    digitList.set(isNegative,number,useExponentialNotation ? maxIntDigits + maxFraDigits : 0);    return subformat(result,delegate,isNegative,true,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public PerThreadCipherProvider(CipherProvider delegate){  this(delegate,DEFAULT_MAX_SIZE);}  }
class C{  public synchronized void stop(){  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=messageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingMessageChannels.values().iterator(); incomingMCIterator.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  public static void updateComponentTreeUI(Component c){  updateComponentTreeUI0(c);  c.invalidate();  c.validate();  c.repaint();}  }
class C{  private boolean hasPort(List<ServicePort> ports,ServicePort port){  for (  ServicePort aPort : ports) {    if (Objects.equals(port.getPort(),aPort.getPort())) {      return true;    }  }  return false;}  }
class C{  public TelURLImpl telURL(boolean inBrackets) throws ParseException {  lexer.match(TokenTypes.TEL);  lexer.match(':');  TelephoneNumber tn=this.parseTelephoneNumber(inBrackets);  TelURLImpl telUrl=new TelURLImpl();  telUrl.setTelephoneNumber(tn);  return telUrl;}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("ServiceListenerImpl.organizationConfigChanged: " + "service = " + serviceName);  }  ConfigurationActionEvent caevent=new ConfigurationActionEventImpl(typeMapping(type),serviceComponent,componentName,orgName);  configListener.configChanged(caevent);}  }
class C{  public String generateShortUpgradeReport(SSOToken adminToken,boolean html){  String delimiter=html ? HTML_BR : TXT_LF;  StringBuilder report=new StringBuilder();  for (  UpgradeStep upgradeStep : upgradeSteps) {    report.append(upgradeStep.getShortReport(delimiter));  }  return report.toString();}  }
class C{  public CertificateExpiredException(){  super();}  }
class C{  public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch,int start,int length) throws org.xml.sax.SAXException {  String comment=getString(start,length);  ch.comment(comment.toCharArray(),0,length);}  }
class C{  private static void filterServersLocallyConfigured(RSEvaluations evals,int localServerId){  final LocalEvaluation eval=new LocalEvaluation();  for (  Entry<Integer,ReplicationServerInfo> entry : evals.bestRSs.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    if (rsInfo.isLocallyConfigured()) {      eval.accept(rsId,rsInfo);    } else {      eval.reject(rsInfo,NOTE_RS_NOT_LOCALLY_CONFIGURED.get(rsId,localServerId));    }  }  evals.keepBest(eval);}  }
class C{  public void testParseInputSource(){  InputStream stream=getClass().getResourceAsStream("/simple.xml");  InputSource is=new InputSource(stream);  try {    Document d=db.parse(is);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputSource)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new InputSource(new FileInputStream("_")));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=new InputSource(getClass().getResourceAsStream("/wrong.xml"));    db.parse(is);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  @Override public void onItemRangeChanged(T sender,int positionStart,int itemCount){  this.adapter.notifyItemRangeChanged(positionStart,itemCount);}  }
class C{  private Stack createPrefixStack(String prefix){  Stack fs=new Stack();  m_namespaces.put(prefix,fs);  return fs;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public long tryConvertToReadLock(long stamp){  long a=stamp & ABITS, m, s, next;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break; else       if (m < RFULL) {        if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))         return next;      } else       if ((next=tryIncReaderOverflow(s)) != 0L)       return next;    } else     if (m == WBIT) {      if (a != m)       break;      state=next=s + (WBIT + RUNIT);      if ((h=whead) != null && h.status != 0)       release(h);      return next;    } else     if (a != 0L && a < WBIT)     return stamp; else     break;  }  return 0L;}  }
class C{  public PBKDF2PasswordStorageSchemeTestCase(){  super("cn=PBKDF2,cn=Password Storage Schemes,cn=config");}  }
class C{  public final void errPrintln(final LocalizableMessage msg){  getErrStream().println(wrap(msg));}  }
class C{  public void preSingleSignOnProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile) throws SAML2Exception {  return;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTableUI();  return MultiLookAndFeel.createUIs(mui,((MultiTableUI)mui).uis,a);}  }
class C{  public WoodenStep(TreeSpecies species){  this(species,DEFAULT_INVERTED);}  }
class C{  private void addDecoration(Decoration d,int index){  if (decorations != null) {    decorationStarts=addToVector(d,index,decorations,decorationStarts);  } else   if (decoration == null) {    decoration=d;  } else {    if (!decoration.equals(d)) {      decorations=new Vector<Decoration>(INITIAL_SIZE);      decorations.addElement(decoration);      decorations.addElement(d);      decorationStarts=new int[INITIAL_SIZE];      decorationStarts[0]=0;      decorationStarts[1]=index;    }  }}  }
class C{  private boolean encryptionValueChanged(final JsonValue presentedValue){  final Map<JsonPointer,SchemaField> fields=getSchema().getFields();  for (  JsonPointer schemaPointer : fields.keySet()) {    final SchemaField schemaField=fields.get(schemaPointer);    final JsonValue encryptedValue=presentedValue.get(schemaPointer);    if (schemaField.isEncrypted()) {      if (null != encryptedValue && encryptedValue.isNotNull()) {        if (!cryptoService.isEncrypted(encryptedValue)) {          return true;        }        final String presentedKey=encryptedValue.get(CRYPTO_KEY_PTR).asString();        final String configuredKey=schemaField.getEncryptionConfiguration().get(CRYPTO_KEY).asString();        if (!presentedKey.equals(configuredKey)) {          return true;        }        final String presentedCipher=encryptedValue.get(CRYPTO_CIPHER_PTR).asString();        final String configuredCipher=schemaField.getEncryptionConfiguration().get(CRYPTO_CIPHER).defaultTo(SchemaField.DEFAULT_CIPHER).asString();        if (!presentedCipher.equals(configuredCipher)) {          return true;        }      }    } else {      if (null != encryptedValue && encryptedValue.isNotNull() && cryptoService.isEncrypted(encryptedValue)) {        return true;      }    }  }  return false;}  }
class C{  public void testCertPathBuilder14() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb2=CertPathBuilder.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",cpb2.getProvider(),defaultProvider);    try {      CertPathBuilder cpb3=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect provider",cpb3.getProvider(),defaultProvider);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  public void updateAbandonedOperation(){  operationsAbandoned.getAndIncrement();}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  FileInputStream fis=new FileInputStream(f);  int type=determineType(fis);  fis.close();switch (type) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(f);case TYPE_XML:  return XMLPropertyListParser.parse(f);case TYPE_ASCII:return ASCIIPropertyListParser.parse(f);default :throw new PropertyListFormatException("The given file is not a property list of a supported format.");}}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  protected static Digester createDigester(){  long t1=System.currentTimeMillis();  Digester digester=new Digester();  digester.setValidating(false);  digester.setClassLoader(StoreRegistry.class.getClassLoader());  digester.addObjectCreate("Registry","org.apache.catalina.storeconfig.StoreRegistry","className");  digester.addSetProperties("Registry");  digester.addObjectCreate("Registry/Description","org.apache.catalina.storeconfig.StoreDescription","className");  digester.addSetProperties("Registry/Description");  digester.addRule("Registry/Description",new StoreFactoryRule("org.apache.catalina.storeconfig.StoreFactoryBase","storeFactoryClass","org.apache.catalina.storeconfig.StoreAppender","storeAppenderClass"));  digester.addSetNext("Registry/Description","registerDescription","org.apache.catalina.storeconfig.StoreDescription");  digester.addCallMethod("Registry/Description/TransientAttribute","addTransientAttribute",0);  digester.addCallMethod("Registry/Description/TransientChild","addTransientChild",0);  long t2=System.currentTimeMillis();  if (log.isDebugEnabled())   log.debug("Digester for server-registry.xml created " + (t2 - t1));  return (digester);}  }
class C{  @NonNull public static Agera just(){  return new AgeraJust();}  }
class C{  public void testCallingProceedingTerminatedScenario(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The invite request was not received by the RI!");    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent);    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent.getRequest());    assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      Response resp=riMessageFactory.createResponse(Response.TRYING,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),resp);      riSipProvider.sendResponse(resp);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a trying response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent.getResponse());    assertTrue("A response different from TYING was passed to the TU!",responseEvent.getResponse().getStatusCode() == Response.TRYING);    assertSame("The TRYING response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the PROCEEDING state after " + "receiving 1xx provisional response",tran.getState(),TransactionState.PROCEEDING);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,inviteReceivedEvent.getRequest());      ContactHeader contact=riHeaderFactory.createContactHeader(((ToHeader)ok.getHeader("To")).getAddress());      ok.addHeader(contact);      addStatus(inviteReceivedEvent.getRequest(),ok);      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send an OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 200 OK response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 200 OK response to the TU!",responseEvent.getResponse());    assertSame("The OK response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertSame("A response different from OK was passed to the TU",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the TERMINATED state after " + "receiving 200 final response",tran.getState(),TransactionState.TERMINATED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    if (ackReceivedEvent != null)     logger.error("Shouldn't have received that=" + ackReceivedEvent.getRequest());    assertNull("The TI sent an ACK to an OK (this is TU's job)!",ackReceivedEvent);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send an OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertEquals("The ClientTransaction mysteriously left the TERMINATED state!",tran.getState(),TransactionState.TERMINATED);    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI sent an ACK request to the second OK response " + "(OK acks are TU's responsibility)!",ackReceivedEvent);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public int compareTo(Boolean that){  return compare(value,that.value);}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,null,null,transferable,dsl,null);}  }
class C{  public LDAPPostReadResponseControl(boolean isCritical,SearchResultEntry searchEntry){  super(OID_LDAP_READENTRY_POSTREAD,isCritical);  this.searchEntry=searchEntry;}  }
class C{  public static void access(Level level,String msgid,String data[]){  access(level,msgid,data,null);}  }
class C{  public void start_notify_observers(){  observers.activate();}  }
class C{  @Override public byte[] encodePassword(String password){  return password == null ? null : ("\"" + password + "\"").getBytes(Charset.forName("UTF-16LE"));}  }
class C{  public Builder withSampleable(boolean sampleable){  this.sampleable=sampleable;  return this;}  }
class C{  public static boolean isModifiableVariableHolder(Object object){  List<Field> fields=getAllModifiableVariableFields(object);  return !fields.isEmpty();}  }
class C{  public InvalidCredentialsException(String message){  super(message);}  }
class C{  public void testAddUnderlineSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.UNDERLINE);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof UnderlineSpan);}  }
class C{  public Fireball genFireball(float xPos,float yPos,int direction){  String fireballBounds="M 0,0 L " + fireballScaleX + " ,0"+ " "+ fireballScaleX+ ","+ fireballScaleY+ " 0,"+ fireballScaleY+ " Z";  float fireballXVel=2.24f * REL_HEIGHT;  return new Fireball(root,fireballBounds,xPos,yPos,fireballXVel,direction,fireBall,fireballBlast);}  }
class C{  @Override public String chooseClientAlias(final String[] keyType,final Principal[] issuers,final Socket socket){  if (keyManager != null) {    return keyManager.chooseClientAlias(keyType,issuers,socket);  }  return null;}  }
class C{  public QRCallbackBuilder withUriHost(String host){  this.host=host;  return this;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @SuppressWarnings("unchecked") public void writeInt(int x) throws SQLException {  attribs.add(Integer.valueOf(x));}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  final StringValueExp val;  try {    val=(StringValueExp)classNameValue.apply(name);  } catch (  ClassCastException x) {    final BadStringOperationException y=new BadStringOperationException(x.toString());    y.initCause(x);    throw y;  }  try {    return getMBeanServer().isInstanceOf(name,val.getValue());  } catch (  InstanceNotFoundException infe) {    return false;  }}  }
class C{  @GET @Produces("application/json") public String searchTokens(@Context HttpHeaders headers,@Context HttpServletRequest request){  String query=null;  try {    query=request.getQueryString();    JSONArray jArray=CoreTokenStoreFactory.getInstance().searchTokens(CoreTokenUtils.getAdminSubject(),query);    String retArray=jArray.toString();    String[] data=new String[]{query,"" + jArray.length()};    TokenLogUtils.access(Level.INFO,TokenLogUtils.TOKEN_SEARCH_SUCCESS,data,null,null);    return retArray;  } catch (  CoreTokenException ex) {    CoreTokenUtils.debug.error("CoreTokenResource.searchToken",ex);    String[] data=new String[]{query,ex.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_SEARCH_TOKEN,data,null,null);    throw getWebApplicationException(headers,ex);  }}  }
class C{  public EncodingChunk(final BigInteger chunkLen){  super(GUID.GUID_ENCODING,chunkLen);  this.strings=new ArrayList<String>();}  }
class C{  public void read(byte[] b,int off,int len,long pos) throws IOException {  if (b == null) {    throw new NullPointerException("b == null!");  }  if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {    throw new IndexOutOfBoundsException();  }  if (pos + len > length) {    throw new IndexOutOfBoundsException();  }  long index=pos / BUFFER_LENGTH;  int offset=(int)pos % BUFFER_LENGTH;  while (len > 0) {    int nbytes=Math.min(len,BUFFER_LENGTH - offset);    byte[] buf=getCacheBlock(index++);    System.arraycopy(buf,offset,b,off,nbytes);    len-=nbytes;    off+=nbytes;    offset=0;  }}  }
class C{  public RejectException(AccessReject res){  reject=res;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  ChangelogState readOnDiskChangelogState() throws ChangelogException {  final ChangelogState state=new ChangelogState();  final File changelogPath=new File(replicationRootPath);synchronized (domainsLock) {    readDomainsStateFile();    checkDomainDirectories(changelogPath);    for (    final Entry<DN,String> domainEntry : domains.entrySet()) {      readStateForDomain(domainEntry,state);    }  }  return state;}  }
class C{  @SuppressLint("InflateParams") static Folder fromXml(Launcher launcher){  return (Folder)launcher.getLayoutInflater().inflate(R.layout.user_folder,null);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public void scrollToTop(){  mAppsRecyclerView.scrollToTop();}  }
class C{  public boolean isInternal(){  return isInternal;}  }
class C{  public AMAuthCallBackException(String message){  super(message);}  }
class C{  public static ChangeRecord valueOfLDIFChangeRecord(final String... ldifLines){  try (final LDIFChangeRecordReader reader=new LDIFChangeRecordReader(ldifLines)){    if (!reader.hasNext()) {      final LocalizableMessage message=WARN_READ_LDIF_RECORD_NO_CHANGE_RECORD_FOUND.get();      throw new LocalizedIllegalArgumentException(message);    }    final ChangeRecord record=reader.readChangeRecord();    if (reader.hasNext()) {      final LocalizableMessage message=WARN_READ_LDIF_RECORD_MULTIPLE_CHANGE_RECORDS_FOUND.get();      throw new LocalizedIllegalArgumentException(message);    }    return record;  } catch (  final DecodeException e) {    throw new LocalizedIllegalArgumentException(e.getMessageObject());  }catch (  final IOException e) {    final LocalizableMessage message=WARN_READ_LDIF_RECORD_UNEXPECTED_IO_ERROR.get(e.getMessage());    throw new LocalizedIllegalArgumentException(message);  }}  }
class C{  @Override public String toString(){  return id;}  }
class C{  public LinkedListNode addLast(Object object){  LinkedListNode node=new LinkedListNode(object,head,head.previous);  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  protected void fireAncestorRemoved(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorRemoved(ancestorEvent);    }  }}  }
class C{  public boolean removeAll(){  return removeAllArg.isPresent();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireImplicitDerivedKeysElement createRequireImplicitDerivedKeysElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireImplicitDerivedKeysElementImpl();}  }
class C{  public NightModeHelper(Activity activity){  int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);  mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);  init(activity,-1,mPrefs.getInt(PREF_KEY,currentMode));}  }
class C{  public NSArray(int length){  array=new NSObject[length];}  }
class C{  public boolean flush(boolean block,Selector s,long timeout) throws IOException {  return true;}  }
class C{  private Template parseTemplateDefinition(String[] templateLines,int startLineNumber,Map<String,Tag> tags,Map<String,Template> definedTemplates,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {  String templateName=templateLines[0].substring(10).trim();  int arrayLineNumber=1;  Template parentTemplate=null;  AttributeType[] rdnAttributes=null;  ArrayList<String> subTemplateNames=new ArrayList<>();  ArrayList<Integer> entriesPerTemplate=new ArrayList<>();  for (; arrayLineNumber < templateLines.length; arrayLineNumber++) {    int lineNumber=startLineNumber + arrayLineNumber;    String line=templateLines[arrayLineNumber];    String lowerLine=toLowerCase(line);    if (lowerLine.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith("extends: ")) {      String parentTemplateName=line.substring(9).trim();      parentTemplate=definedTemplates.get(parentTemplateName.toLowerCase());      if (parentTemplate == null) {        LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_INVALID_PARENT_TEMPLATE.get(parentTemplateName,lineNumber,templateName);        throw new MakeLDIFException(message);      }    } else     if (lowerLine.startsWith("rdnattr: ")) {      ArrayList<AttributeType> attrList=new ArrayList<>();      String rdnAttrNames=lowerLine.substring(9).trim();      StringTokenizer tokenizer=new StringTokenizer(rdnAttrNames,"+");      while (tokenizer.hasMoreTokens()) {        attrList.add(DirectoryServer.getSchema().getAttributeType(tokenizer.nextToken()));      }      rdnAttributes=new AttributeType[attrList.size()];      attrList.toArray(rdnAttributes);    } else     if (lowerLine.startsWith("subordinatetemplate: ")) {      int colonPos=line.indexOf(':',21);      if (colonPos <= 21) {        LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_TEMPLATE_NO_COLON.get(lineNumber,templateName);        throw new MakeLDIFException(message);      }      String subTemplateName=line.substring(21,colonPos).trim();      int numEntries;      try {        numEntries=Integer.parseInt(line.substring(colonPos + 1).trim());        if (numEntries < 0) {          LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_INVALID_NUM_ENTRIES.get(lineNumber,templateName,numEntries,subTemplateName);          throw new MakeLDIFException(message);        } else         if (numEntries == 0) {          LocalizableMessage message=WARN_MAKELDIF_TEMPLATE_SUBORDINATE_ZERO_ENTRIES.get(lineNumber,templateName,subTemplateName);          warnings.add(message);        }        subTemplateNames.add(subTemplateName);        entriesPerTemplate.add(numEntries);      } catch (      NumberFormatException nfe) {        LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_CANT_PARSE_NUMENTRIES.get(subTemplateName,lineNumber,templateName);        throw new MakeLDIFException(message);      }    } else {      break;    }  }  String[] subordinateTemplateNames=new String[subTemplateNames.size()];  subTemplateNames.toArray(subordinateTemplateNames);  int[] numEntriesPerTemplate=new int[entriesPerTemplate.size()];  for (int i=0; i < numEntriesPerTemplate.length; i++) {    numEntriesPerTemplate[i]=entriesPerTemplate.get(i);  }  TemplateLine[] parsedLines;  if (parentTemplate == null) {    parsedLines=new TemplateLine[0];  } else {    TemplateLine[] parentLines=parentTemplate.getTemplateLines();    parsedLines=new TemplateLine[parentLines.length];    System.arraycopy(parentLines,0,parsedLines,0,parentLines.length);  }  Template template=new Template(this,templateName,rdnAttributes,subordinateTemplateNames,numEntriesPerTemplate,parsedLines);  for (; arrayLineNumber < templateLines.length; arrayLineNumber++) {    String line=templateLines[arrayLineNumber];    String lowerLine=toLowerCase(line);    int lineNumber=startLineNumber + arrayLineNumber;    if (lowerLine.startsWith("#")) {      continue;    }    template.addTemplateLine(parseTemplateLine(line,lowerLine,lineNumber,null,template,tags,warnings));  }  return template;}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public boolean isUsable(){  return isUsable;}  }
class C{  public void readSequenceOf(ASN1SequenceOf sequenceOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCEOF) {    throw expected("sequenceOf");  }  decodeValueCollection(sequenceOf);}  }
class C{  public UNKNOWN(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public void testSignumPositive(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertEquals("incorrect value",1,aNumber.signum());}  }
class C{  public static List<SubtitleElement> decodeSubtitles(MemoryFile file) throws IOException {  LinkedList<SubtitleFormat> likelyFormats=new LinkedList<SubtitleFormat>();  for (  SubtitleFormat format : SubtitleFormat.values()) {    if (format.getFilter().accept(file.getName()))     likelyFormats.addFirst(format); else     likelyFormats.addLast(format);  }  for (  SubtitleFormat format : likelyFormats) {    Reader reader=new UnicodeReader(new ByteBufferInputStream(file.getData()),true,StandardCharsets.UTF_8);    SubtitleReader parser=format.newReader(reader);    if (parser.hasNext()) {      List<SubtitleElement> list=new ArrayList<SubtitleElement>(500);      while (parser.hasNext()) {        list.add(parser.next());      }      return list;    }  }  throw new IOException("Subtitle format not supported");}  }
class C{  void initializeEvaluationWeights(){  psWeight=users.size() * subjectWeight;  prWeight=rules.size() * ruleWeight;  pcWeight=conditions.size() * conditionWeight;}  }
class C{  public void balance(){  int i=0;  int n=length;  String[] k=new String[n];  char[] v=new char[n];  TernaryTreeIterator iter=new TernaryTreeIterator(this);  while (iter.hasMoreElements()) {    v[i]=iter.getValue();    k[i++]=(String)iter.nextElement();  }  init();  insertBalanced(k,v,0,n);}  }
class C{  public void clear(){  if (write_protected)   return;  statusPanel.add_message.setText(EMPTY);  clear_add_field();  statusPanel.current_layer.setText(EMPTY);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditem.class,args);}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  protected void rolloverColumnUpdated(int oldColumn,int newColumn){}  }
class C{  public IllegalCharsetNameException(String charsetName){  super(String.valueOf(charsetName));  this.charsetName=charsetName;}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service,ClassLoader loader){  return new ServiceLoader<>(service,loader);}  }
class C{  public AMHashMap(boolean forByteValues){  super();  byteValues=forByteValues;}  }
class C{  public void initializePasswordValidators() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addPasswordValidatorAddListener(this);  rootConfiguration.addPasswordValidatorDeleteListener(this);  for (  String validatorName : rootConfiguration.listPasswordValidators()) {    PasswordValidatorCfg validatorConfiguration=rootConfiguration.getPasswordValidator(validatorName);    validatorConfiguration.addChangeListener(this);    if (validatorConfiguration.isEnabled()) {      String className=validatorConfiguration.getJavaClass();      try {        PasswordValidator<? extends PasswordValidatorCfg> validator=loadValidator(className,validatorConfiguration,true);        passwordValidators.put(validatorConfiguration.dn(),validator);        DirectoryServer.registerPasswordValidator(validatorConfiguration.dn(),validator);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  @Override protected byte[] afterPrepareMessageAction(byte[] messageBytes){  if (tlsContext.getProtocolVersion() == ProtocolVersion.DTLS12) {    protocolMessage.setCompleteResultingMessage(finishDtlsHandshakeMessagePrepare(messageBytes));  }  byte[] pm=protocolMessage.getCompleteResultingMessage().getValue();  if (protocolMessage.getIncludeInDigest()) {    tlsContext.getDigest().update(pm);  }  return pm;}  }
class C{  protected void fireValueChanged(int firstIndex,int lastIndex){  fireValueChanged(firstIndex,lastIndex,getValueIsAdjusting());}  }
class C{  public InvalidPasswordException(Throwable t){  super(t);  if (t instanceof InvalidPasswordException) {    this.tokenId=((InvalidPasswordException)t).tokenId;  }}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_xpath.getExpression().canTraverseOutsideSubtree();}  }
class C{  public RestAuthException(int responseStatus,String errorMessage,Throwable throwable){  super(errorMessage,throwable);  statusCode=responseStatus;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  @Override public boolean accept(File file,String name){  for (  String prefix : prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  configFilePath=DirectoryServer.getInstanceRoot() + File.separator + "config"+ File.separator+ "config.ldif";  passwordFilePath=TestCaseUtils.createTempFile("password");  encodedPasswordFilePath=TestCaseUtils.createTempFile("{SHA}C5wmJdwh7wX2rU3fR8XyA4N6oyw=");}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("authlevel : orgConfigChanged " + serviceName + ", ver="+ version+ ", org="+ orgName+ ", group="+ groupName+ ", componnet="+ serviceComponent+ ", type="+ type);  }  authLevelMap.remove(orgName);  AMAuthenticationManager.updateModuleInstanceTable(orgName,serviceName);  updateAuthConfiguration(serviceName,orgName,serviceComponent);}  }
class C{  public FramedMTUAttribute(int mtu){  super(OctetUtils.toOctets(AttributeType.FRAMED_MTU,mtu));  this.mtu=mtu;}  }
class C{  @Inject public OpenAMClientRegistrationStore(RealmNormaliser realmNormaliser,PEMDecoder pemDecoder,@Named(OAuth2Constants.Custom.JWK_RESOLVER) OpenIdResolverService resolverService,OAuth2ProviderSettingsFactory providerSettingsFactory,ClientAuthenticationFailureFactory failureFactory,AMIdentityRepositoryFactory identityRepositoryFactory,PrivilegedAction<SSOToken> adminTokenAction){  this.realmNormaliser=realmNormaliser;  this.pemDecoder=pemDecoder;  this.resolverService=resolverService;  this.providerSettingsFactory=providerSettingsFactory;  this.failureFactory=failureFactory;  this.identityRepositoryFactory=identityRepositoryFactory;  this.adminTokenAction=adminTokenAction;}  }
class C{  private void addRequestCookies(CookieManager manager,MutableUri resolved,Request request) throws IOException {  Header cookieHeader=request.getHeaders().get("Cookie");  List<String> cookies=new ArrayList<>();  if (cookieHeader != null) {    cookies.addAll(cookieHeader.getValues());  }  List<String> managed=manager.get(resolved.asURI(),request.getHeaders().copyAsMultiMapOfStrings()).get("Cookie");  if (managed != null) {    cookies.addAll(managed);  }  StringBuilder sb=new StringBuilder();  for (  String cookie : cookies) {    if (sb.length() > 0) {      sb.append("; ");    }    sb.append(cookie);  }  if (sb.length() > 0) {    request.getHeaders().put("Cookie",sb.toString());  }}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  protected static final int compare(CharChunk name,char[] compareTo){  int result=0;  char[] c=name.getBuffer();  int start=name.getStart();  int end=name.getEnd();  int len=compareTo.length;  if ((end - start) < len) {    len=end - start;  }  for (int i=0; (i < len) && (result == 0); i++) {    if (c[i + start] > compareTo[i]) {      result=1;    } else     if (c[i + start] < compareTo[i]) {      result=-1;    }  }  if (result == 0) {    if (compareTo.length > (end - start)) {      result=-1;    } else     if (compareTo.length < (end - start)) {      result=1;    }  }  return result;}  }
class C{  public void removeListener(String listenerID){  orgConfigImpl.removeListener(listenerID);}  }
class C{  public GenericURI parse() throws ParseException {  return uriReference(true);}  }
class C{  boolean isViewableAs(MethodType newType,boolean keepInterfaces){  if (!VerifyType.isNullConversion(returnType(),newType.returnType(),keepInterfaces))   return false;  return parametersAreViewableAs(newType,keepInterfaces);}  }
class C{  private void processGlobalAcis(DseeCompatAccessControlHandlerCfg configuration) throws InitializationException {  try {    final SortedSet<Aci> globalAcis=new TreeSet<>();    for (    String value : configuration.getGlobalACI()) {      globalAcis.add(Aci.decode(ByteString.valueOfUtf8(value),DN.rootDN()));    }    if (!globalAcis.isEmpty()) {      aciList.addAci(DN.rootDN(),globalAcis);      logger.debug(INFO_ACI_ADD_LIST_GLOBAL_ACIS,globalAcis.size());    }  } catch (  Exception e) {    logger.traceException(e);    throw new InitializationException(INFO_ACI_HANDLER_FAIL_PROCESS_GLOBAL_ACI.get(configuration.dn()),e);  }}  }
class C{  protected void throwable(Request request,Response response,Throwable throwable){  Context context=request.getContext();  if (context == null) {    return;  }  Throwable realError=throwable;  if (realError instanceof ServletException) {    realError=((ServletException)realError).getRootCause();    if (realError == null) {      realError=throwable;    }  }  if (realError instanceof ClientAbortException) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("standardHost.clientAbort",realError.getCause().getMessage()));    }    return;  }  ErrorPage errorPage=findErrorPage(context,throwable);  if ((errorPage == null) && (realError != throwable)) {    errorPage=findErrorPage(context,realError);  }  if (errorPage != null) {    if (response.setErrorReported()) {      response.setAppCommitted(false);      request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());      request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.ERROR);      request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));      request.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());      request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);      Wrapper wrapper=request.getWrapper();      if (wrapper != null) {        request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());      }      request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,request.getRequestURI());      request.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());      if (custom(request,response,errorPage)) {        try {          response.finishResponse();        } catch (        IOException e) {          container.getLogger().warn("Exception Processing " + errorPage,e);        }      }    }  } else {    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    response.setError();    status(request,response);  }}  }
class C{  private Class<?> findDexClass(String name) throws TestFailed, InvocationTargetException {  try {    Class mDexClass=ClassLoader.getSystemClassLoader().loadClass("dalvik.system.DexFile");    Constructor ctor=mDexClass.getConstructor(new Class[]{String.class});    Object mDexFile=ctor.newInstance(DEX_FILE);    Method meth=mDexClass.getMethod("loadClass",new Class[]{String.class,ClassLoader.class});    meth.invoke(mDexFile,name,this);  } catch (  NoSuchMethodException nsme) {    throw new TestFailed(nsme);  }catch (  InstantiationException ie) {    throw new TestFailed(ie);  }catch (  IllegalAccessException iae) {    throw new TestFailed(iae);  }catch (  ClassNotFoundException cnfe) {    throw new TestFailed(cnfe);  }  return null;}  }
class C{  public SearchResultEntry(Entry entry,List<Control> controls){  super(entry.getName(),entry.getObjectClasses(),entry.getUserAttributes(),entry.getOperationalAttributes());  if (controls == null) {    this.controls=new ArrayList<>(0);  } else {    this.controls=controls;  }}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  @Override public boolean isValidateRoot(){  return !(SwingUtilities.getUnwrappedParent(this) instanceof JViewport);}  }
class C{  private static void initiateSPSingleLogout(String metaAlias,String realm,String binding,NameIDInfoKey nameIdInfoKey,SPFedSession fedSession,Map paramsMap) throws SAML2MetaException, SAML2Exception, SessionException {  IDPSSODescriptorElement idpsso=sm.getIDPSSODescriptor(realm,nameIdInfoKey.getRemoteEntityID());  if (idpsso == null) {    String[] data={nameIdInfoKey.getRemoteEntityID()};    LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  List<EndpointType> slosList=idpsso.getSingleLogoutService();  String location=LogoutUtil.getSLOServiceLocation(slosList,SAML2Constants.SOAP);  if (location == null) {    if (debug.warningEnabled()) {      debug.warning("SPSessionListener.initiateSPSingleLogout(): Unable to synchronize sessions with IdP \"" + nameIdInfoKey.getRemoteEntityID() + "\" since the IdP does not have SOAP SLO endpoint "+ "specified in its metadata, possibly this is a misconfiguration of the hosted SP");    }    return;  }  IDPSSOConfigElement idpConfig=sm.getIDPSSOConfig(realm,nameIdInfoKey.getRemoteEntityID());  LogoutUtil.doLogout(metaAlias,nameIdInfoKey.getRemoteEntityID(),slosList,null,binding,null,fedSession.idpSessionIndex,fedSession.info.getNameID(),null,null,paramsMap,idpConfig);}  }
class C{  public UnauthorizedClientException(){  this("The client is not authorized to request an authorization code using this method.");}  }
class C{  public void postDeregister(){}  }
class C{  private String fixDesc(String type,String parameters){  String strReturnDesc=null, strParamsDesc="", typeNoArr=type.replace("[]","");  for (  String key : primitives.keySet()) {    if (typeNoArr.equals(key)) {      strReturnDesc=getArrStr(type) + primitives.get(key);    }  }  if (parameters.contains(",")) {    String[] params=parameters.substring(1,parameters.length() - 1).split(",");    for (    String param : params) {      boolean done=false;      for (      String key : primitives.keySet()) {        if (param.replace("[]","").equals(key)) {          strParamsDesc+=getArrStr(param) + primitives.get(key);          done=true;        }      }      if (!done) {        strParamsDesc+=getArrStr(param) + "L" + param.replace(".","/").replace("[]","")+ ";";      }    }  } else   if (parameters.equals("()")) {    strParamsDesc="";  } else {    String param=parameters.substring(1,parameters.length() - 1);    boolean done=false;    for (    String key : primitives.keySet()) {      if (param.replace("[]","").equals(key)) {        strParamsDesc+=getArrStr(param) + primitives.get(key);        done=true;      }    }    if (!done) {      strParamsDesc+=getArrStr(param) + "L" + param.replace("[]","").replace(".","/")+ ";";    }  }  strParamsDesc="(" + strParamsDesc + ")";  if (strReturnDesc == null) {    strReturnDesc="L" + typeNoArr.replace(".","/") + ";";  }  return strParamsDesc + strReturnDesc;}  }
class C{  protected AbstractASN1Reader(){}  }
class C{  public void makeGraph(File linkGraph) throws Exception {  String temp212;  int rowNum=0;  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));  while ((temp212=br.readLine()) != null) {    String[] strs=temp212.split(" ");    for (int i=0; i < strs.length; i++) {      graph[rowNum][i]=Double.parseDouble(strs[i]);    }    rowNum++;  }  for (int i=0; i < dataNum; i++) {    for (int j=0; j < dimension; j++) {      W[i][j]=r.nextDouble();      H[j][i]=r.nextDouble();    }  }  for (int i=0; i < dataNum; i++) {    double sumW=0;    double sumH=0;    for (int j=0; j < dimension; j++) {      sumW+=W[i][j] * W[i][j];      sumH+=H[j][i] * H[j][i];    }    sumW=Math.sqrt(sumW);    sumH=Math.sqrt(sumH);    for (int j=0; j < dimension; j++) {      W[i][j]/=sumW;      H[j][i]/=sumH;    }  }  trainW();  init=false;}  }
class C{  public boolean isAllowed(SSOToken token,String resourceName,String actionName) throws PolicyException, SSOException {  PolicyManager.initAdminSubject();  return (isAllowed(token,resourceName,actionName,new HashMap()));}  }
class C{  boolean alwaysOnTop(){  return true;}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public GetMaxIdleTimeActionHandler(SessionResourceUtil sessionResourceUtil){  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  public AudienceRestriction createAudienceRestriction(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUDIENCE_RESTRICTION);  if (obj == null) {    return new AudienceRestrictionImpl();  } else {    return (AudienceRestriction)obj;  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      return;    }    String content=e.getActionCommand();    int mod=e.getModifiers();    if ((content != null) && (content.length() > 0)) {      boolean isPrintableMask=true;      Toolkit tk=Toolkit.getDefaultToolkit();      if (tk instanceof SunToolkit) {        isPrintableMask=((SunToolkit)tk).isPrintableCharacterModifiersMask(mod);      }      if (isPrintableMask) {        char c=content.charAt(0);        if ((c >= 0x20) && (c != 0x7F)) {          target.replaceSelection(content);        }      }    }  }}  }
class C{  protected void copyPrimitives(AbstractID3v2Tag copyObj){  logger.config("Copying primitives");  super.copyPrimitives(copyObj);  if (copyObj instanceof ID3v23Tag) {    ID3v23Tag copyObject=(ID3v23Tag)copyObj;    this.crcDataFlag=copyObject.crcDataFlag;    this.experimental=copyObject.experimental;    this.extended=copyObject.extended;    this.crc32=copyObject.crc32;    this.paddingSize=copyObject.paddingSize;  }}  }
class C{  private static TypeDescription queryStateDescription(){  return new TypeDescription.Latent("org.apache.cassandra.service.QueryState",Modifier.PUBLIC | Modifier.ABSTRACT,null,null);}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String uitype=getStringOptionValue(ARGUMENT_UI_TYPE);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,uitype};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_UI_TYPE",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,uitype,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_UI_TYPE",args);    }    attrSchema.setUIType(uitype);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_UI_TYPE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-type-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,uitype,e.getMessage()};    debugError("ModifyAttributeSchemaUIType.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_UI_TYPE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,uitype,e.getMessage()};    debugError("ModifyAttributeSchemaUIType.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_UI_TYPE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("Token[");switch (ttype) {case TT_EOF:    result.append("EOF");  break;case TT_EOL:result.append("EOL");break;case TT_NUMBER:result.append("n=");result.append(nval);break;case TT_WORD:result.append(sval);break;default :if (ttype == TT_UNKNOWN || tokenTypes[ttype] == TOKEN_QUOTE) {result.append(sval);} else {result.append('\'');result.append((char)ttype);result.append('\'');}}result.append("], line ");result.append(lineNumber);return result.toString();}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {  if (action == null || action.trim().length() == 0) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("ActionImpl.toXMLString: " + "Action value is null or empty.");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("emptyElementValue"));  }  if (namespace == null || namespace.trim().length() == 0) {    if (SAML2SDKUtils.debug.messageEnabled()) {      SAML2SDKUtils.debug.message("ActionImpl.toXMLString: " + "Namespace is empty or missing");    }    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missingAttribute"));  }  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAML2Constants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.ASSERTION_DECLARE_STR;  }  result.append("<").append(prefix).append("Action").append(uri).append(" Namespace=\"").append(namespace).append("\">");  result.append(action);  result.append("</").append(prefix).append("Action>");  return ((String)result.toString());}  }
class C{  public final void popIteratorRoot(){  m_iteratorRoots.popQuick();}  }
class C{  public void printStackTrace(java.io.PrintStream ps){  if (rootCause != null) {    String superString=super.toString();synchronized (ps) {      ps.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(ps);    }  } else {    super.printStackTrace(ps);  }}  }
class C{  protected File configFile(){  File file=new File(configFile);  if (!file.isAbsolute()) {    file=new File(Bootstrap.getCatalinaBase(),configFile);  }  return (file);}  }
class C{  protected AbstractString(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public Evidence createEvidence(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EVIDENCE,xml);  if (obj == null) {    return null;  } else {    return (Evidence)obj;  }}  }
class C{  public void snapToClosestIndex(OverScroller scroller,int duration){  if (xStops.stops.length == 0) {    computeXAxis();  }  float closestX=Float.MAX_VALUE;  float centerX=contentRect.centerX();  for (int i=0; i < xStops.stops.length; i++) {    float x=getDrawX(xStops.stops[i]);    if (Math.abs(x - centerX) <= Math.abs(closestX - centerX)) {      closestX=x;    }  }  scrollXTo(scroller,closestX,duration);}  }
class C{  public void upgrade(SSOToken adminToken,boolean licenseAccepted) throws UpgradeException {  if (!licenseAccepted) {    throw new UpgradeException("License terms have not been accepted");  }  openDJBackupManager.createBackupDirectories();  if (debug.messageEnabled()) {    debug.message("Upgrade startup.");  }  UpgradeProgress.reportStart("upgrade.writingbackup");  writeBackup(adminToken);  UpgradeProgress.reportEnd("upgrade.success");  for (  UpgradeStep upgradeStep : upgradeSteps) {    upgradeStep.perform();  }  UpgradeProgress.reportStart("upgrade.writinglog");  writeReport(adminToken);  UpgradeProgress.reportEnd("upgrade.success");  UpgradeProgress.reportStart("upgrade.writingversionfile");  updateDotVersionFile();  UpgradeProgress.reportEnd("upgrade.success");  if (rebuildIndexes) {    UpgradeProgress.reportStart("upgrade.rebuildingindexes");    try {      EmbeddedOpenDS.rebuildSMSIndex();    } catch (    Exception ex) {      UpgradeProgress.reportEnd("upgrade.failed");      throw new UpgradeException(ex);    }    UpgradeProgress.reportStart("upgrade.success");  }  if (debug.messageEnabled()) {    debug.message("Upgrade complete.");  }  AMSetupServlet.upgradeCompleted();}  }
class C{  public void startElement(){  nss.pushContext();  inCollectingMode=true;}  }
class C{  public boolean change_layer_action(int p_new_layer){  if (interactive_state == null)   return false;  if (board_is_read_only)   return false;  return interactive_state.change_layer_action(p_new_layer);}  }
class C{  public boolean isWhiteListRule(){  return whiteListRule;}  }
class C{  @SuppressWarnings("unused") static <T>ReplayPromise<Set<T>> replayPromiseSet(Class<T> componentType,final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  public JobAttributes(int copies,DefaultSelectionType defaultSelection,DestinationType destination,DialogType dialog,String fileName,int maxPage,int minPage,MultipleDocumentHandlingType multipleDocumentHandling,int[][] pageRanges,String printer,SidesType sides){  setCopies(copies);  setDefaultSelection(defaultSelection);  setDestination(destination);  setDialog(dialog);  setFileName(fileName);  setMaxPage(maxPage);  setMinPage(minPage);  setMultipleDocumentHandling(multipleDocumentHandling);  setPageRanges(pageRanges);  setPrinter(printer);  setSides(sides);}  }
class C{  public void imageComplete(int status){  WritableRaster wr;switch (status) {case IMAGEERROR:case IMAGEABORTED:    model=null;  width=-1;height=-1;intPixels=null;bytePixels=null;break;case SINGLEFRAMEDONE:case STATICIMAGEDONE:if (width <= 0 || height <= 0) break;if (model instanceof DirectColorModel) {if (intPixels == null) break;wr=createDCMraster();} else if (model instanceof IndexColorModel) {int[] bandOffsets={0};if (bytePixels == null) break;DataBufferByte db=new DataBufferByte(bytePixels,width * height);wr=Raster.createInterleavedRaster(db,width,height,width,1,bandOffsets,null);} else {convertToRGB();if (intPixels == null) break;wr=createDCMraster();}BufferedImage bi=new BufferedImage(model,wr,model.isAlphaPremultiplied(),null);bi=bufferedImageOp.filter(bi,null);WritableRaster r=bi.getRaster();ColorModel cm=bi.getColorModel();int w=r.getWidth();int h=r.getHeight();consumer.setDimensions(w,h);consumer.setColorModel(cm);if (cm instanceof DirectColorModel) {DataBufferInt db=(DataBufferInt)r.getDataBuffer();consumer.setPixels(0,0,w,h,cm,db.getData(),0,w);} else if (cm instanceof IndexColorModel) {DataBufferByte db=(DataBufferByte)r.getDataBuffer();consumer.setPixels(0,0,w,h,cm,db.getData(),0,w);} else {throw new InternalError("Unknown color model " + cm);}break;}consumer.imageComplete(status);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public XPathException(String message){  super(message);  if (message == null) {    throw new NullPointerException("message can't be null");  }}  }
class C{  public static Map<String,Node> extractXFANodes(Document domDocument){  Map<String,Node> xfaNodes=new HashMap<>();  Node n=domDocument.getFirstChild();  while (n.getChildNodes().getLength() == 0) {    n=n.getNextSibling();  }  n=n.getFirstChild();  while (n != null) {    if (n.getNodeType() == Node.ELEMENT_NODE) {      String s=n.getLocalName();      xfaNodes.put(s,n);    }    n=n.getNextSibling();  }  return xfaNodes;}  }
class C{  public boolean startsWith(String prefix,int toffset){  return str().startsWith(prefix,toffset);}  }
class C{  public static boolean startsWith(String s1,String s2){  if (s1 == null || s2 == null) {    return false;  }  return s1.startsWith(s2);}  }
class C{  protected Character isWFXMLChar(String chardata){  Character refInvalidChar;  if (chardata == null || (chardata.length() == 0)) {    return null;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return refInvalidChar;      }    }  }  return null;}  }
class C{  public Object next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        return yytext();      }case 6:    break;case 4:{    return new Integer(yytext());  }case 7:break;case 2:{}case 8:break;case 5:{return new Double(yytext());}case 9:break;case 1:{throw new Error("Illegal character <" + yytext() + ">");}case 10:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public FormatterInitException(String message){  super(message);}  }
class C{  @SuppressWarnings("deprecation") void notifyAlarmClock(TimerAlarmClockNotification notification){  TimerNotification timerNotification=null;  Date timerDate=null;  TimerAlarmClock alarmClock=(TimerAlarmClock)notification.getSource();synchronized (Timer.this) {    for (    Object[] obj : timerTable.values()) {      if (obj[ALARM_CLOCK_INDEX] == alarmClock) {        timerNotification=(TimerNotification)obj[TIMER_NOTIF_INDEX];        timerDate=(Date)obj[TIMER_DATE_INDEX];        break;      }    }  }  sendNotification(timerDate,timerNotification);  updateTimerTable(timerNotification.getNotificationID());}  }
class C{  @Override public SSLEngineResult unwrap(ByteBuffer src,ByteBuffer[] dsts,int offset,int length) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((src == null) || (dsts == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  if (src.remaining() < recordProtocol.getMinRecordSize()) {    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);  }  try {    src.mark();    int capacity=0;    for (int i=offset; i < offset + length; i++) {      if (dsts[i] == null) {        throw new IllegalStateException("Some of the input parameters are null");      }      if (dsts[i].isReadOnly()) {        throw new ReadOnlyBufferException();      }      capacity+=dsts[i].remaining();    }    if (capacity < recordProtocol.getDataSize(src.remaining())) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,getHandshakeStatus(),0,0);    }    recProtIS.setSourceBuffer(src);    int type=recordProtocol.unwrap();switch (type) {case ContentType.HANDSHAKE:case ContentType.CHANGE_CIPHER_SPEC:      if (handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.FINISHED)) {        session=recordProtocol.getSession();      }    break;case ContentType.APPLICATION_DATA:  break;case ContentType.ALERT:if (alertProtocol.isFatalAlert()) {  alertProtocol.setProcessed();  if (session != null) {    session.invalidate();  }  String description="Fatal alert received " + alertProtocol.getAlertDescription();  shutdown();  throw new SSLException(description);} else {  if (logger != null) {    logger.println("Warning allert has been received: " + alertProtocol.getAlertDescription());  }switch (alertProtocol.getDescriptionCode()) {case AlertProtocol.CLOSE_NOTIFY:    alertProtocol.setProcessed();  close_notify_was_received=true;if (!close_notify_was_sent) {  closeOutbound();  closeInbound();} else {  closeInbound();  shutdown();}break;case AlertProtocol.NO_RENEGOTIATION:alertProtocol.setProcessed();if (session == null) {throw new AlertException(AlertProtocol.HANDSHAKE_FAILURE,new SSLHandshakeException("Received no_renegotiation " + "during the initial handshake"));} else {handshakeProtocol.stop();}break;default :alertProtocol.setProcessed();}}break;}return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),recProtIS.consumed(),appData.placeTo(dsts,offset,length));} catch (BufferUnderflowException e) {src.reset();return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);}catch (AlertException e) {alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());engine_was_closed=true;src.reset();if (session != null) {session.invalidate();}throw e.getReason();}catch (SSLException e) {throw e;}catch (IOException e) {alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);engine_was_closed=true;throw new SSLException(e.getMessage());}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported05.class,args);}  }
class C{  public SAMLRequesterException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void reset(){  digest.reset();  digest.update(inputPad,0,inputPad.length);}  }
class C{  public byte[] generateKey(){  byte[] key=new byte[strength];  random.nextBytes(key);  return key;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(BASE_ID_ELEMENT).append(NS);  String nq=getNameQualifier();  if (nq != null) {    sb.append(" ").append(NAME_QUALIFIER_ATTR).append("=\"").append(nq).append("\"");  }  String spnq=getSPNameQualifier();  if (spnq != null) {    sb.append(" ").append(SP_NAME_QUALIFIER_ATTR).append("=\"").append(spnq).append("\"");  }  sb.append(" />");  return sb.toString();}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(Long.toString(this.sequenceNumber));}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public <T>Dispatch<T> createDispatch(QName portName,Class<T> type,Service.Mode mode,WebServiceFeature... features){  return delegate.createDispatch(portName,type,mode,features);}  }
class C{  public AccessibleStateSet(AccessibleState[] states){  if (states.length != 0) {    this.states=new Vector(states.length);    for (int i=0; i < states.length; i++) {      if (!this.states.contains(states[i])) {        this.states.addElement(states[i]);      }    }  }}  }
class C{  @NonNull public final Agera observeOn(@NonNull Executor executor,boolean coalesce){  return new AgeraObserveOnExecutor(this,executor,coalesce);}  }
class C{  public XACMLAuthzDecisionQueryHandler(){}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    int max=(int)v.getMaximumSpan(axis);    if (max < targetSpan) {      float align=v.getAlignment(axis);      offsets[i]=(int)((targetSpan - max) * align);      spans[i]=max;    } else {      int min=(int)v.getMinimumSpan(axis);      offsets[i]=0;      spans[i]=Math.max(min,targetSpan);    }  }}  }
class C{  public TCONString(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  private boolean warmUpTextLayoutCache(){  boolean result;  try {    layout.draw(DUMMY_CANVAS);    result=true;  } catch (  Exception e) {    WXLogUtils.e(TAG,WXLogUtils.getStackTrace(e));    result=false;  }  return result;}  }
class C{  public boolean isBefore(Instant otherInstant){  return compareTo(otherInstant) < 0;}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public SubConfigEditViewBean(){  super("SubConfigEdit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  @Override public void resourceSetDeleted(String realm,ResourceSetDescription resourceSet) throws ServerException {  Subject adminSubject=SubjectUtils.createSuperAdminSubject();  String resourceTypeUUID=resourceSet.getId();  try {    ApplicationService appService=applicationServiceFactory.create(adminSubject,realm);    Application application=appService.getApplication(resourceSet.getClientId().toLowerCase());    application.removeResourceTypeUuid(resourceTypeUUID);    appService.saveApplication(application);  } catch (  EntitlementException e) {    logger.error("Failed to remove Resource Type, " + resourceTypeUUID + " from application, "+ resourceSet.getClientId(),e);    throw new ServerException(e);  }  try {    policyService.deletePolicy(createAdminContext(realm,resourceSet.getResourceOwnerId()),resourceSet.getId());    resourceTypeService.deleteResourceType(adminSubject,realm,resourceTypeUUID);  } catch (  EntitlementException e) {    logger.error("Failed to delete Resource Type " + resourceTypeUUID,e);    throw new ServerException(e);  }catch (  RealmLookupException e) {    logger.error("Failed to delete Resource Type " + resourceTypeUUID,e);    throw new ServerException(e);  }}  }
class C{  public static void registerAlertHandler(AlertHandler<?> alertHandler){  directoryServer.alertHandlers.add(alertHandler);}  }
class C{  public XmlStreamReader(InputStream is,boolean lenient,String defaultEncoding) throws IOException {  this.defaultEncoding=defaultEncoding;  BOMInputStream bom=new BOMInputStream(new BufferedInputStream(is,BUFFER_SIZE),false,BOMS);  BOMInputStream pis=new BOMInputStream(bom,true,XML_GUESS_BYTES);  this.encoding=doRawStream(bom,pis,lenient);  this.reader=new InputStreamReader(pis,encoding);}  }
class C{  private void subscribeTopics(String token,final String[] topics) throws IOException {  GcmPubSub pubSub=GcmPubSub.getInstance(this);  for (  String topic : topics) {    pubSub.subscribe(token,topic,null);  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  flushStartDoc();  m_resultContentHandler.processingInstruction(target,data);}  }
class C{  private boolean flushAccumulatedRegion(){  boolean success=true;  if (accumulatedX != Integer.MAX_VALUE) {    SubRegionShowable bsSubRegion=(SubRegionShowable)bufferStrategy;    boolean contentsLost=bufferStrategy.contentsLost();    if (!contentsLost) {      bsSubRegion.show(accumulatedX,accumulatedY,accumulatedMaxX,accumulatedMaxY);      contentsLost=bufferStrategy.contentsLost();    }    if (contentsLost) {      if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {        LOGGER.finer("endPaint: contents lost");      }      bufferInfo.setInSync(false);      success=false;    }  }  resetAccumulated();  return success;}  }
class C{  public AbstractTimingStore(int maxEntries){  if (maxEntries < 100) {    this.maxEntries=100;  } else {    this.maxEntries=maxEntries;  }}  }
class C{  public static String bytesToPascalString(byte[] data){  int len=(int)data[0];  return new String(data,0,len,LATIN1);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.MessageIDElement createMessageIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.MessageIDElementImpl();}  }
class C{  protected void onUncaughtException(RequestContext requestContext,Exception e) throws ServletException, IOException {  PWResetModelImpl.debug.error("PWResetServlet.onUncaughtException",e);  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  ViewBean targetView=viewBeanManager.getViewBean(PWResetUncaughtExceptionViewBean.class);  targetView.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  private long computeGenerationId() throws DirectoryException {  final long genId=exportBackend(null,true);  if (logger.isTraceEnabled()) {    logger.trace("Computed generationId: generationId=" + genId);  }  return genId;}  }
class C{  public boolean isSOAPFaultNeeded(){  return true;}  }
class C{  public void nodesWereRemoved(TreeNode node,int[] childIndices,Object[] removedChildren){  if (node != null && childIndices != null) {    fireTreeNodesRemoved(this,getPathToRoot(node),childIndices,removedChildren);  }}  }
class C{  public static long swapLong(long value){  return (((value >> 0) & 0xff) << 56) + (((value >> 8) & 0xff) << 48) + (((value >> 16) & 0xff) << 40)+ (((value >> 24) & 0xff) << 32)+ (((value >> 32) & 0xff) << 24)+ (((value >> 40) & 0xff) << 16)+ (((value >> 48) & 0xff) << 8)+ (((value >> 56) & 0xff) << 0);}  }
class C{  public FastStringBuffer(int initChunkBits,int maxChunkBits,int rebundleBits){  if (DEBUG_FORCE_INIT_BITS != 0)   initChunkBits=DEBUG_FORCE_INIT_BITS;  if (DEBUG_FORCE_FIXED_CHUNKSIZE)   maxChunkBits=initChunkBits;  m_array=new char[16][];  if (initChunkBits > maxChunkBits)   initChunkBits=maxChunkBits;  m_chunkBits=initChunkBits;  m_maxChunkBits=maxChunkBits;  m_rebundleBits=rebundleBits;  m_chunkSize=1 << (initChunkBits);  m_chunkMask=m_chunkSize - 1;  m_array[0]=new char[m_chunkSize];}  }
class C{  public void flush() throws IOException {synchronized (lock) {    flushBuffer();    out.flush();  }}  }
class C{  public MTOMFeature(int threshold){  if (threshold < 0)   throw new WebServiceException("MTOMFeature.threshold must be >= 0, actual value: " + threshold);  this.enabled=true;  this.threshold=threshold;}  }
class C{  public ContactHeader createContactHeader(){  Contact contact=new Contact();  contact.setWildCardFlag(true);  contact.setExpires(0);  return contact;}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery){  return fooPersistence.countWithDynamicQuery(dynamicQuery);}  }
class C{  static ObjectClass newExtensibleObjectObjectClass(final String description,final Map<String,List<String>> extraProperties,final SchemaBuilder builder){  return new ObjectClass(new Builder(EXTENSIBLE_OBJECT_OBJECTCLASS_OID,builder).description(description).extraProperties(extraProperties).names(EXTENSIBLE_OBJECT_OBJECTCLASS_NAME).superiorObjectClasses(TOP_OBJECTCLASS_NAME).type(AUXILIARY));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  String newElementName;  int newElementType;  String newElementValue;  doc=(Document)load("hc_staff",true);  newElement=doc.createElement("acronym");  newElementName=newElement.getNodeName();  assertEqualsAutoCase("element","strong","acronym",newElementName);  newElementType=(int)newElement.getNodeType();  assertEquals("type",1,newElementType);  newElementValue=newElement.getNodeValue();  assertNull("valueInitiallyNull",newElementValue);}  }
class C{  public PollingWaitCallback build(){  return new PollingWaitCallback(this);}  }
class C{  public JKAuditType(final int id){  this.auditTypeId=id;}  }
class C{  public void test_Provider_Properties() throws Exception {  Provider[] providers=Security.getProviders();  for (  Provider provider : providers) {    assertEquals(provider.getName(),provider.get("Provider.id name"));    assertEquals(String.valueOf(provider.getVersion()),provider.get("Provider.id version"));    assertEquals(provider.getInfo(),provider.get("Provider.id info"));    assertEquals(provider.getClass().getName(),provider.get("Provider.id className"));    Map<String,String> aliases=new HashMap<String,String>();    Map<String,String> implementations=new HashMap<String,String>();    for (    Entry<Object,Object> entry : provider.entrySet()) {      Object k=entry.getKey();      Object v=entry.getValue();      assertEquals(String.class,k.getClass());      assertEquals(String.class,v.getClass());      String key=(String)k;      String value=(String)v;      if (key.startsWith("Provider.id ")) {        continue;      }      if (key.indexOf(' ') != -1) {        continue;      }      Matcher m=alias.matcher(key);      if (m.find()) {        String type=m.group(1);        aliases.put(key,type + "." + value);      } else {        implementations.put(key,value);      }    }    for (    Entry<String,String> entry : implementations.entrySet()) {      String typeAndAlgorithm=entry.getKey();      String className=entry.getValue();      try {        assertNotNull(Class.forName(className,true,provider.getClass().getClassLoader()));      } catch (      ClassNotFoundException e) {        if (!className.equals("sun.security.pkcs11.P11MAC")) {          fail("Could not find class " + className + " for "+ typeAndAlgorithm);        }      }    }    for (    Entry<String,String> entry : aliases.entrySet()) {      String alias=entry.getKey();      String actual=entry.getValue();      assertTrue("Could not find implementation " + actual + " for alias "+ alias,implementations.containsKey(actual));    }  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  @Override public Object clone(){  try {    ZipEntry result=(ZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public void addOrReplace(E element){  remove(element);  add(element);}  }
class C{  @Override public boolean execute(){  try {    if (!originalFile.exists()) {      System.err.println("Source file does not exist:" + originalFile);      return false;    }    try (FileInputStream fis=new FileInputStream(originalFile);FileOutputStream fos=new FileOutputStream(newFile);ZipOutputStream zip=new ZipOutputStream(fos)){      ZipEntry zipEntry=new ZipEntry(originalFile.getName());      zip.putNextEntry(zipEntry);      byte[] buf=new byte[8192];      int n;      while ((n=fis.read(buf)) != -1) {        zip.write(buf,0,n);      }    }     if (deleteOriginal && !originalFile.delete()) {      System.err.println("Cannot delete original file:" + originalFile);      return false;    }    return true;  } catch (  IOException ioe) {    logger.traceException(ioe);    return false;  }}  }
class C{  public INTERNAL(){  this("");}  }
class C{  void removeOutline(){  PdfName type=content.getAsName(PdfName.Type);  if (type != null && type.equals(PdfName.Outlines)) {    pdfDoc.getCatalog().remove(PdfName.Outlines);    return;  }  PdfOutline parent=this.parent;  List<PdfOutline> children=parent.children;  children.remove(this);  PdfDictionary parentContent=parent.content;  if (children.size() > 0) {    parentContent.put(PdfName.First,children.get(0).content);    parentContent.put(PdfName.Last,children.get(children.size() - 1).content);  } else {    parent.removeOutline();    return;  }  PdfDictionary next=content.getAsDictionary(PdfName.Next);  PdfDictionary prev=content.getAsDictionary(PdfName.Prev);  if (prev != null) {    if (next != null) {      prev.put(PdfName.Next,next);      next.put(PdfName.Prev,prev);    } else {      prev.remove(PdfName.Next);    }  } else   if (next != null) {    next.remove(PdfName.Prev);  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Border border=getBorder();  String title=getTitle();  if ((title != null) && !title.isEmpty()) {    int edge=(border instanceof TitledBorder) ? 0 : EDGE_SPACING;    JLabel label=getLabel(c);    Dimension size=label.getPreferredSize();    Insets insets=getBorderInsets(border,c,new Insets(0,0,0,0));    int borderX=x + edge;    int borderY=y + edge;    int borderW=width - edge - edge;    int borderH=height - edge - edge;    int labelY=y;    int labelH=size.height;    int position=getPosition();switch (position) {case ABOVE_TOP:      insets.left=0;    insets.right=0;  borderY+=labelH - edge;borderH-=labelH - edge;break;case TOP:insets.top=edge + insets.top / 2 - labelH / 2;if (insets.top < edge) {borderY-=insets.top;borderH+=insets.top;} else {labelY+=insets.top;}break;case BELOW_TOP:labelY+=insets.top + edge;break;case ABOVE_BOTTOM:labelY+=height - labelH - insets.bottom- edge;break;case BOTTOM:labelY+=height - labelH;insets.bottom=edge + (insets.bottom - labelH) / 2;if (insets.bottom < edge) {borderH+=insets.bottom;} else {labelY-=insets.bottom;}break;case BELOW_BOTTOM:insets.left=0;insets.right=0;labelY+=height - labelH;borderH-=labelH - edge;break;}insets.left+=edge + TEXT_INSET_H;insets.right+=edge + TEXT_INSET_H;int labelX=x;int labelW=width - insets.left - insets.right;if (labelW > size.width) {labelW=size.width;}switch (getJustification(c)) {case LEFT:labelX+=insets.left;break;case RIGHT:labelX+=width - insets.right - labelW;break;case CENTER:labelX+=(width - labelW) / 2;break;}if (border != null) {if ((position != TOP) && (position != BOTTOM)) {border.paintBorder(c,g,borderX,borderY,borderW,borderH);} else {Graphics g2=g.create();if (g2 instanceof Graphics2D) {Graphics2D g2d=(Graphics2D)g2;Path2D path=new Path2D.Float();path.append(new Rectangle(borderX,borderY,borderW,labelY - borderY),false);path.append(new Rectangle(borderX,labelY,labelX - borderX - TEXT_SPACING,labelH),false);path.append(new Rectangle(labelX + labelW + TEXT_SPACING,labelY,borderX - labelX + borderW - labelW - TEXT_SPACING,labelH),false);path.append(new Rectangle(borderX,labelY + labelH,borderW,borderY - labelY + borderH - labelH),false);g2d.clip(path);}border.paintBorder(c,g2,borderX,borderY,borderW,borderH);g2.dispose();}}g.translate(labelX,labelY);label.setSize(labelW,labelH);label.paint(g);g.translate(-labelX,-labelY);} else if (border != null) {border.paintBorder(c,g,x,y,width,height);}}  }
class C{  protected IdCachedServicesDecorator(IdCachedServices delegate){  super(delegate);}  }
class C{  public void test_setBooleanLjava_lang_ObjectIZ(){  boolean[] x={false};  boolean thrown=false;  try {    Array.setBoolean(x,0,true);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertTrue("Failed to set correct value",Array.getBoolean(x,0));  try {    Array.setBoolean(new Object(),0,false);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setBoolean(x,4,false);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setBoolean(null,0,true);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignedInfoType createSignedInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignedInfoTypeImpl();}  }
class C{  public XStringForFSB(FastStringBuffer val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  public TagNotFoundException(Throwable ex){  super(ex);}  }
class C{  private static void verifyQualName(String qualName) throws XMPException {  int colonPos=qualName.indexOf(':');  if (colonPos > 0) {    String prefix=qualName.substring(0,colonPos);    if (Utils.isXMLNameNS(prefix)) {      String regURI=XMPMetaFactory.getSchemaRegistry().getNamespaceURI(prefix);      if (regURI != null) {        return;      }      throw new XMPException("Unknown namespace prefix for qualified name",XMPError.BADXPATH);    }  }  throw new XMPException("Ill-formed qualified name",XMPError.BADXPATH);}  }
class C{  public synchronized void addSmap(String smap,String stratumName){  embedded.add("*O " + stratumName + "\n"+ smap+ "*C "+ stratumName+ "\n");}  }
class C{  public void test_getOffsetIIIIII(){  st1=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  assertTrue("Incorrect offset returned",st1.getOffset(GregorianCalendar.AD,1998,Calendar.NOVEMBER,11,Calendar.WEDNESDAY,0) == -(5 * 60 * 60* 1000));  st1=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  assertEquals("Incorrect offset returned",-(5 * 60 * 60* 1000),st1.getOffset(GregorianCalendar.AD,1998,Calendar.JUNE,11,Calendar.THURSDAY,0));  st1=new SimpleTimeZone(TimeZone.getDefault().getRawOffset(),TimeZone.getDefault().getID());  int fourHours=4 * 60 * 60* 1000;  st1.setRawOffset(fourHours);  assertEquals(fourHours,st1.getOffset(1,2099,01,1,5,0));  try {    st1.getOffset(-1,2099,01,1,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,15,1,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,100,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,1,50,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,1,5,-10);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void addRule(String ruleExpression,T resultIfMatched){  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));}  }
class C{  private PasswordPolicyResult checkControls(List<Control> controls){  PasswordPolicyResult result=null;  if ((controls != null) && (!controls.isEmpty())) {    for (    Control control : controls) {      if (control instanceof PasswordExpiredResponseControl) {        if (result == null) {          result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_EXPIRED);        } else {          result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_EXPIRED);        }      }      if (control instanceof PasswordPolicyResponseControl) {        PasswordPolicyErrorType policyErrorType=((PasswordPolicyResponseControl)control).getErrorType();        if (policyErrorType != null) {switch (policyErrorType) {case ACCOUNT_LOCKED:            if (result == null) {              result=new PasswordPolicyResult(PasswordPolicyErrorType.ACCOUNT_LOCKED);            } else {              result.setPasswordPolicyErrorType(PasswordPolicyErrorType.ACCOUNT_LOCKED);            }          break;case CHANGE_AFTER_RESET:        if (result == null) {          result=new PasswordPolicyResult(PasswordPolicyErrorType.CHANGE_AFTER_RESET);        } else {          result.setPasswordPolicyErrorType(PasswordPolicyErrorType.CHANGE_AFTER_RESET);        }      break;case INSUFFICIENT_PASSWORD_QUALITY:    if (result == null) {      result=new PasswordPolicyResult(PasswordPolicyErrorType.INSUFFICIENT_PASSWORD_QUALITY);    } else {      result.setPasswordPolicyErrorType(PasswordPolicyErrorType.INSUFFICIENT_PASSWORD_QUALITY);    }  break;case MUST_SUPPLY_OLD_PASSWORD:if (result == null) {  result=new PasswordPolicyResult(PasswordPolicyErrorType.MUST_SUPPLY_OLD_PASSWORD);} else {  result.setPasswordPolicyErrorType(PasswordPolicyErrorType.MUST_SUPPLY_OLD_PASSWORD);}break;case PASSWORD_EXPIRED:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_EXPIRED);} else {result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_EXPIRED);}break;case PASSWORD_IN_HISTORY:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_IN_HISTORY);} else {result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_IN_HISTORY);}break;case PASSWORD_MOD_NOT_ALLOWED:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_MOD_NOT_ALLOWED);} else {result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_MOD_NOT_ALLOWED);}break;case PASSWORD_TOO_SHORT:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_TOO_SHORT);} else {result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_TOO_SHORT);}break;case PASSWORD_TOO_YOUNG:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_TOO_YOUNG);} else {result.setPasswordPolicyErrorType(PasswordPolicyErrorType.PASSWORD_TOO_YOUNG);}break;}}PasswordPolicyWarningType policyWarningType=((PasswordPolicyResponseControl)control).getWarningType();if (policyWarningType != null) {switch (policyWarningType) {case GRACE_LOGINS_REMAINING:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyWarningType.GRACE_LOGINS_REMAINING,((PasswordPolicyResponseControl)control).getWarningValue());} else {result.setPasswordPolicyWarningType(PasswordPolicyWarningType.GRACE_LOGINS_REMAINING,((PasswordPolicyResponseControl)control).getWarningValue());}break;case TIME_BEFORE_EXPIRATION:if (result == null) {result=new PasswordPolicyResult(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,((PasswordPolicyResponseControl)control).getWarningValue());} else {result.setPasswordPolicyWarningType(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,((PasswordPolicyResponseControl)control).getWarningValue());}break;}}}if (control instanceof PasswordExpiringResponseControl) {PasswordExpiringResponseControl expiringControl=(PasswordExpiringResponseControl)control;if (control.hasValue()) {if (result == null) {result=new PasswordPolicyResult(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,expiringControl.getSecondsUntilExpiration());} else {result.setPasswordPolicyWarningType(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,expiringControl.getSecondsUntilExpiration());}} else {if (result == null) {result=new PasswordPolicyResult(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,NO_EXPIRY_TIME);} else {result.setPasswordPolicyWarningType(PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION,NO_EXPIRY_TIME);}}}}}return result;}  }
class C{  public SCServiceProfileViewBean(){  super(PAGE_NAME,DEFAULT_DISPLAY_URL,null);  initService();}  }
class C{  public static Remote exportObject(Remote obj,ActivationID id,int port) throws RemoteException {  return exportObject(obj,new ActivatableServerRef(id,port));}  }
class C{  public Map<TopicPartition,Long> offsets(){  return offsets;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public CompoundBorder(){  this.outsideBorder=null;  this.insideBorder=null;}  }
class C{  public CertificateIssuer(byte[] encoding){  super(encoding);}  }
class C{  public String toStringNoRevision(){  return Utils.joinAsString(".",major,minor,point);}  }
class C{  public static <S>S loadFromSystemProperty(final Class<S> service){  try {    final String className=System.getProperty(service.getName());    if (className != null) {      Class<?> c=ClassLoader.getSystemClassLoader().loadClass(className);      return (S)c.newInstance();    }    return null;  } catch (  Exception e) {    throw new Error(e);  }}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return m_str.lastIndexOf(str,fromIndex);}  }
class C{  public static String printQName(javax.xml.namespace.QName val,NamespaceContext nsc){  if (theConverter == null)   initConverter();  return theConverter.printQName(val,nsc);}  }
class C{  public PdfCanvas beginText(){  contentStream.getOutputStream().writeBytes(BT);  return this;}  }
class C{  public void handleTblSupportedContainerButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_SUPPPORTED_CONTAINERS);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_SUPPPORTED_CONTAINERS);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_SUPPPORTED_CONTAINERS);    tblValues.removeAll(selected);    setPageSessionAttribute(WSPersonalProfileServiceModelImpl.ATTRIBUTE_NAME_SUPPPORTED_CONTAINERS,tblValues);    populateSupportedContainersTable(tblValues);  }  resetButtonState(TBL_SUPPORTED_CONTAINER_DELETE_BTN);  forwardTo();}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  private void refreshImage(){synchronized (this) {    state=(state | LOADING_FLAG | RELOAD_IMAGE_FLAG| WIDTH_FLAG| HEIGHT_FLAG) ^ (WIDTH_FLAG | HEIGHT_FLAG | RELOAD_IMAGE_FLAG);    image=null;    width=height=0;  }  try {    loadImage();    updateImageSize();  }  finally {synchronized (this) {      state=(state | LOADING_FLAG) ^ LOADING_FLAG;    }  }}  }
class C{  private PlaLineInt smoothen_corner(PlaLineIntAlist p_line_arr,int p_no){  PlaPointFloat prev_corner=p_line_arr.get(p_no).intersection_approx(p_line_arr.get(p_no - 1));  if (prev_corner.is_NaN())   return null;  PlaPointFloat curr_corner=p_line_arr.get(p_no).intersection_approx(p_line_arr.get(p_no + 1));  if (curr_corner.is_NaN())   return null;  PlaPointFloat next_corner=p_line_arr.get(p_no + 1).intersection_approx(p_line_arr.get(p_no + 2));  if (next_corner.is_NaN())   return null;  PlaDirection prev_dir=p_line_arr.get(p_no).direction();  PlaDirection next_dir=p_line_arr.get(p_no + 1).direction();  PlaDirection new_line_dir=prev_dir.add(next_dir);  PlaLineInt translate_line=new PlaLineInt(curr_corner.round(),new_line_dir);  double prev_dist=Math.abs(translate_line.distance_signed(prev_corner));  double next_dist=Math.abs(translate_line.distance_signed(next_corner));  if (prev_dist == 0 || next_dist == 0)   return null;  double max_translate_dist;  PlaPointFloat nearest_corner;  if (prev_dist <= next_dist) {    max_translate_dist=prev_dist;    nearest_corner=prev_corner;  } else {    max_translate_dist=next_dist;    nearest_corner=next_corner;  }  if (max_translate_dist < 1)   return null;  max_translate_dist=Math.max(max_translate_dist - 1,1);  if (translate_line.side_of(next_corner) == PlaSide.ON_THE_LEFT) {    max_translate_dist=-max_translate_dist;  }  PlaLineInt[] check_lines=new PlaLineInt[3];  check_lines[0]=p_line_arr.get(p_no);  check_lines[2]=p_line_arr.get(p_no + 1);  double translate_dist=max_translate_dist;  double delta_dist=max_translate_dist;  PlaSide side_of_nearest_corner=translate_line.side_of(nearest_corner);  int sign=Signum.as_int(max_translate_dist);  PlaLineInt result=null;  while (Math.abs(delta_dist) > min_move_dist) {    boolean check_ok=false;    PlaLineInt new_line=translate_line.translate(translate_dist);    PlaSide new_line_side_of_nearest_corner=new_line.side_of(nearest_corner);    if (new_line_side_of_nearest_corner == side_of_nearest_corner || new_line_side_of_nearest_corner == PlaSide.COLLINEAR) {      check_lines[1]=new_line;      Polyline tmp=new Polyline(check_lines);      if (tmp.plaline_len() == 3) {        ShapeTile shape_to_check=tmp.offset_shape(curr_half_width,0);        check_ok=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);      }      delta_dist/=2;      if (check_ok) {        result=check_lines[1];        if (translate_dist == max_translate_dist) {          break;        }        translate_dist+=delta_dist;      } else {        translate_dist-=delta_dist;      }    } else {      double shorten_value=sign * 0.5;      max_translate_dist-=shorten_value;      translate_dist-=shorten_value;      delta_dist-=shorten_value;    }  }  if (result != null) {    PlaPointFloat new_prev_corner=check_lines[0].intersection_approx(result);    PlaPointFloat new_next_corner=check_lines[2].intersection_approx(result);    r_board.changed_area.join(new_prev_corner,curr_layer);    r_board.changed_area.join(new_next_corner,curr_layer);    r_board.changed_area.join(curr_corner,curr_layer);  }  return result;}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  public void update(Graphics g,JComponent c){  boolean isOpaque=c.isOpaque();  if (g == null) {    throw new NullPointerException("Graphics must be non-null");  }  if (isOpaque && (c.getBackground() instanceof UIResource) && UIManager.get("MenuBar.gradient") != null) {    if (MetalToolBarUI.doesMenuBarBorderToolBar((JMenuBar)c)) {      JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);      if (tb.isOpaque() && tb.getBackground() instanceof UIResource) {        MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight() + tb.getHeight(),true);        paint(g,c);        return;      }    }    MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight(),true);    paint(g,c);  } else {    super.update(g,c);  }}  }
class C{  private Object[] filterArgs(Object[] args){  for (int i=0; i < args.length; ++i) {    args[i]=filterArgument(args[i]);  }  return args;}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  private void cleanStatic(MethodNode method){}  }
class C{  public void updateUI(){  setUI((SliderUI)UIManager.getUI(this));  updateLabelUIs();}  }
class C{  public void writeText(String text){  buffer.append(text);}  }
class C{  @SuppressWarnings({"JavaDoc"}) private TagField createGenreField(String content){  if (content == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  if (TagOptionSingleton.getInstance().isWriteMp4GenresAsText()) {    return new Mp4TagTextField(GENRE_CUSTOM.getFieldName(),content);  }  if (Mp4GenreField.isValidGenre(content)) {    return new Mp4GenreField(content);  } else {    return new Mp4TagTextField(GENRE_CUSTOM.getFieldName(),content);  }}  }
class C{  public boolean implies(Permission permission){  for (Enumeration elements=elements(); elements.hasMoreElements(); ) {    if (((Permission)elements.nextElement()).implies(permission)) {      return true;    }  }  return false;}  }
class C{  public static SearchFilter createApproximateFilter(AttributeType attributeType,ByteString assertionValue){  return new SearchFilter(FilterType.APPROXIMATE_MATCH,null,null,attributeType,null,assertionValue,null,null,null,null,false);}  }
class C{  private String saveParameters(Set userSession,String userID,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus){  String tmpRelayState=SAML2Utils.generateIDWithServerID();  relayStateMap.put(tmpRelayState,relayState);  if (debug.messageEnabled()) {    debug.message("SingleLogoutManager.saveParameters: " + "userID=" + userID + ", session="+ userSession+ ", orig relayState="+ relayState+ ", new="+ tmpRelayState+ ", isSOAInitiated="+ isSOAPInitiated+ ", isIDPInitiated="+ isIDPInitiated+ ", protocol="+ protocol+ ", relam="+ realm+ ", idpEntityID="+ idpEntityID+ ", spEntityID="+ spEntityID+ ", status="+ currentStatus+ "\nlogout Request XML="+ singleLogoutRequestXML+ "\nlogout response XML="+ singleLogoutResponseXML);  }  if (userSession != null) {    userSessionMap.put(tmpRelayState,userSession);  }  if (userID != null) {    userIDMap.put(tmpRelayState,userID);  }  if (isSOAPInitiated) {    isSOAPInitiatedMap.put(tmpRelayState,Boolean.TRUE);  } else {    isSOAPInitiatedMap.put(tmpRelayState,Boolean.FALSE);  }  if (isIDPInitiated) {    isIDPInitiatedMap.put(tmpRelayState,Boolean.TRUE);  } else {    isIDPInitiatedMap.put(tmpRelayState,Boolean.FALSE);  }  if (protocol != null) {    origProtocolMap.put(tmpRelayState,protocol);    int listSize=protocolList.size();    List list=new ArrayList(listSize - 1);    for (int i=0; i < listSize; i++) {      String proto=(String)protocolList.get(i);      if (!proto.equals(protocol)) {        list.add(proto);      }    }    protocolListMap.put(tmpRelayState,list);  }  if (realm != null) {    realmMap.put(tmpRelayState,realm);  }  if (idpEntityID != null) {    idpEntityIDMap.put(tmpRelayState,idpEntityID);  }  if (spEntityID != null) {    spEntityIDMap.put(tmpRelayState,spEntityID);  }  if (singleLogoutRequestXML != null) {    sloRequestXMLMap.put(tmpRelayState,singleLogoutRequestXML);  }  if (singleLogoutResponseXML != null) {    sloResponseXMLMap.put(tmpRelayState,singleLogoutResponseXML);  }  currentStatusMap.put(tmpRelayState,new Integer(currentStatus));  return tmpRelayState;}  }
class C{  public double cos_angle(PlaLineInt p_other){  PlaVectorInt v1=point_b.difference_by(point_a);  PlaVectorInt v2=p_other.point_b.difference_by(p_other.point_a);  return v1.cos_angle(v2);}  }
class C{  public void runTest() throws Throwable {  String localName="district";  String namespaceURI="http://www.nist.gov";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testNode=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testNode);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertTrue("hasAttribute",state);}  }
class C{  public boolean isScriptFriendly(){  return scriptFriendlyArg.isPresent();}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  private static int findRunContaining(int index,int[] starts){  for (int i=1; true; i++) {    if (starts[i] > index) {      return i - 1;    }  }}  }
class C{  public void addPageStreamingCallSettingsImports(ModelTypeTable typeTable){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.EvidenceElement createEvidenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.EvidenceElementImpl();}  }
class C{  public BAD_CONTEXT(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public void enableInputMethods(boolean enable){  checkForEnableIM=false;  super.enableInputMethods(enable);}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  @BeforeClass public void before() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LPostalAddressElement createLPostalAddressElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LPostalAddressElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument06.class,args);}  }
class C{  public static boolean deleteServerInstance(SSOToken ssoToken,String instanceName) throws SMSException, SSOException {  boolean deleted=false;  ServiceConfig cfg=getServerConfig(ssoToken,instanceName);  if (cfg != null) {    ServiceConfig sc=getRootServerConfigWithRetry(ssoToken);    if (sc != null) {      sc.removeSubConfig(instanceName);      deleted=true;    }  }  return deleted;}  }
class C{  @Override public String toString(){  return toString;}  }
class C{  static private String generateTokenID(String resource){  if (StringUtils.isBlank(resource)) {    return null;  }  return Hash.hash(resource + RandomStringUtils.randomAlphanumeric(32));}  }
class C{  public int countMetaBlocks(File f) throws CannotReadException, IOException {  RandomAccessFile raf=new RandomAccessFile(f,"r");  FlacStreamReader flacStream=new FlacStreamReader(raf);  flacStream.findStream();  boolean isLastBlock=false;  int count=0;  while (!isLastBlock) {    MetadataBlockHeader mbh=MetadataBlockHeader.readHeader(raf);    logger.config("Found block:" + mbh.getBlockType());    raf.seek(raf.getFilePointer() + mbh.getDataLength());    isLastBlock=mbh.isLastBlock();    mbh=null;    count++;  }  raf.close();  return count;}  }
class C{  public ClosedDirectoryStreamException(){}  }
class C{  public static ProxiedAuthV1RequestControl newControl(final String authorizationName){  Reject.ifNull(authorizationName);  return new ProxiedAuthV1RequestControl(DN.valueOf(authorizationName));}  }
class C{  public org.omg.CORBA.ORB _orb(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public static void main(final String[] args){  System.err.println(JKPasswordUtil.generateMixPassword(8));}  }
class C{  public ByteBuffer(InputStream in) throws IOException {  int chunk=16384;  this.length=0;  this.buffer=new byte[chunk];  int read;  while ((read=in.read(this.buffer,this.length,chunk)) > 0) {    this.length+=read;    if (read == chunk) {      ensureCapacity(length + chunk);    } else {      break;    }  }}  }
class C{  private static byte convertV24textEncodingToV23textEncoding(byte textEncoding){  if (textEncoding == TextEncoding.UTF_16BE) {    return TextEncoding.UTF_16;  } else   if (textEncoding == TextEncoding.UTF_8) {    return TextEncoding.ISO_8859_1;  } else {    return textEncoding;  }}  }
class C{  public final boolean isEnabled(CBORParser.Feature f){  return (_formatParserFeatures & f.getMask()) != 0;}  }
class C{  public Object nextElement(){  return nextToken();}  }
class C{  public static SimplePagedResultsControl newControl(final boolean isCritical,final int size,final ByteString cookie){  Reject.ifNull(cookie);  return new SimplePagedResultsControl(isCritical,size,cookie);}  }
class C{  public void executeFallback(TransformerImpl transformer) throws TransformerException {  int parentElemType=m_parentNode.getXSLToken();  if (Constants.ELEMNAME_EXTENSIONCALL == parentElemType || Constants.ELEMNAME_UNDEFINED == parentElemType) {    transformer.executeChildTemplates(this,true);  } else {    System.out.println("Error!  parent of xsl:fallback must be an extension or unknown element!");  }}  }
class C{  public BarcodeDataMatrix(){  encoding=DEFAULT_DATA_MATRIX_ENCODING;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public LDIFEntryWriter(final Writer writer){  super(writer);}  }
class C{  static boolean useSystemFonts(){  if (isWindows() && useSystemFonts) {    if (METAL_LOOK_AND_FEEL_INITED) {      Object value=UIManager.get("Application.useSystemFontSettings");      return (value == null || Boolean.TRUE.equals(value));    }    return true;  }  return false;}  }
class C{  public void moveLeadSelectionIndex(int leadIndex){  if (leadIndex == -1) {    if (this.anchorIndex != -1) {      return;    }  }  updateLeadAnchorIndices(this.anchorIndex,leadIndex);  fireValueChanged();}  }
class C{  BackendMonitor(String name,RootContainer rootContainer){  this.name=name;  this.rootContainer=rootContainer;}  }
class C{  public LDIFException(LocalizableMessage message,Number lineNumber,boolean canContinueReading){  super(message);  this.lineNumber=lineNumber.longValue();  this.canContinueReading=canContinueReading;}  }
class C{  public void testSetAttributeNode1() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  Element newElement;  Attr newAttr;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newElement=doc.createElement("newElement");  testAddr.appendChild(newElement);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  newElement.setAttributeNodeNS(newAttr);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public boolean doesEntryExists(SSOToken token,String entryDN){  try {    PersistentObject po=UMSObject.getObject(internalToken,new Guid(entryDN));  } catch (  UMSException ue) {    if (entryDN.indexOf("agents") < 0) {      if (debug.messageEnabled()) {        debug.message("DirectoryServicesImpl.doesProfileExist(): + " + "Exception caught: ",ue);      }    }    return false;  }  return true;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_ASSIGNABLE_SERVICES_OF_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set serviceNames=ocm.getAssignableServices();    Set dynamicServiceNames=getAssignableDynamicServiceNames(adminSSOToken,realm);    if ((dynamicServiceNames != null) && !dynamicServiceNames.isEmpty()) {      if ((serviceNames != null) && !serviceNames.isEmpty()) {        serviceNames.addAll(dynamicServiceNames);      } else {        serviceNames=dynamicServiceNames;      }    }    IOutput outputWriter=getOutputWriter();    if ((serviceNames != null) && !serviceNames.isEmpty()) {      String msg=getResourceString("realm-getassignable-services-result");      outputWriter.printlnMessage(FormatUtils.printServiceNames(serviceNames,msg,adminSSOToken));      outputWriter.printlnMessage(getResourceString("realm-getassignable-services-succeed"));    } else {      outputWriter.printlnMessage(getResourceString("realm-getassignable-services-no-services"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_ASSIGNABLE_SERVICES_OF_REALM",params);  } catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignableServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNABLE_SERVICES_OF_REALM",args);  }catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignableServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNABLE_SERVICES_OF_REALM",args);  }catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignableServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNABLE_SERVICES_OF_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected void parseCRLF(boolean tolerant) throws IOException {  boolean eol=false;  boolean crfound=false;  while (!eol) {    if (pos >= lastValid) {      if (readBytes() <= 0) {        throwIOException(sm.getString("chunkedInputFilter.invalidCrlfNoData"));      }    }    if (buf[pos] == Constants.CR) {      if (crfound) {        throwIOException(sm.getString("chunkedInputFilter.invalidCrlfCRCR"));      }      crfound=true;    } else     if (buf[pos] == Constants.LF) {      if (!tolerant && !crfound) {        throwIOException(sm.getString("chunkedInputFilter.invalidCrlfNoCR"));      }      eol=true;    } else {      throwIOException(sm.getString("chunkedInputFilter.invalidCrlf"));    }    pos++;  }}  }
class C{  public static ArgumentException unknownProperty(String name){  LocalizableMessage message=ERR_DSCFG_ERROR_PROPERTY_UNRECOGNIZED_NO_DEFN.get(name);  return new ArgumentException(message);}  }
class C{  public synchronized boolean containsKey(Object key){  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry<?,?> e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      return true;    }  }  return false;}  }
class C{  public static boolean isNetworkConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  private static void printUsage(){  System.err.println("Usage: host port group-dn member-dn {add|del}");  System.err.println("For example: localhost 1389 " + "cn=Static,ou=Groups,dc=example,dc=com " + "uid=user.5150,ou=People,dc=example,dc=com "+ "del");  System.exit(1);}  }
class C{  public Elevation(){  super();}  }
class C{  public NSObject[] objectsAtIndexes(int... indexes){  NSObject[] result=new NSObject[indexes.length];  Arrays.sort(indexes);  for (int i=0; i < indexes.length; i++)   result[i]=array[indexes[i]];  return result;}  }
class C{  public static byte[] decodeDataElement(Element dataE){  if (dataE == null) {    return null;  }  String value=XMLUtils.getElementValue(dataE);  if (value == null) {    return null;  }  return Base64.decode(value);}  }
class C{  @Override public void onToggleBroadcast(View v){  if (mWZBroadcast.getStatus().isIdle()) {    if (mSwitchMP4.isChecked()) {      Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);      File outputFile=getOutputMediaFile();      if (outputFile != null)       mMP4Writer.setFilePath(outputFile.toString()); else {        mStatusView.setErrorMessage("Could not create or access the directory in which to store the MP");        mSwitchMP4.setChecked(false);        return;      }    }  } else   if (mSwitchMP4.isChecked()) {    WZLog.debug(TAG,"The MP4 file was stored at " + mMP4Writer.getFilePath());    mStatusView.showMessage("The MP4 file was stored at " + mMP4Writer.getFilePath());  }  super.onToggleBroadcast(v);}  }
class C{  protected <V>PagedRequest<V> createPagedRequest(){  return createPagedRequest(PAGE_FIRST,PAGE_SIZE);}  }
class C{  public RegexFileFilter(String pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern);}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  protected static boolean isWhiteSpace(char ch){  if (ch > 0x20)   return false;  return ch == 0x9 || ch == 0xA || ch == 0xD || ch == 0x20;}  }
class C{  public void transform(double[] srcPts,int srcOff,float[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y + M02);dstPts[dstOff++]=(float)(M10 * x + M11 * y + M12);}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y);dstPts[dstOff++]=(float)(M10 * x + M11 * y);}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M10 * x + M12);}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M10 * x);}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++] + M12);}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++]);}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(srcPts[srcOff++] + M12);}return;case (APPLY_IDENTITY):while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++]);dstPts[dstOff++]=(float)(srcPts[srcOff++]);}return;}}  }
class C{  protected void removeAttributeInternal(String name,boolean notify){  if (name == null)   return;  Object value=attributes.remove(name);  if (!notify || (value == null)) {    return;  }  HttpSessionBindingEvent event=null;  if (value instanceof HttpSessionBindingListener) {    event=new HttpSessionBindingEvent(getSession(),name,value);    ((HttpSessionBindingListener)value).valueUnbound(event);  }  Context context=manager.getContext();  Object listeners[]=context.getApplicationEventListeners();  if (listeners == null)   return;  for (int i=0; i < listeners.length; i++) {    if (!(listeners[i] instanceof HttpSessionAttributeListener))     continue;    HttpSessionAttributeListener listener=(HttpSessionAttributeListener)listeners[i];    try {      context.fireContainerEvent("beforeSessionAttributeRemoved",listener);      if (event == null) {        event=new HttpSessionBindingEvent(getSession(),name,value);      }      listener.attributeRemoved(event);      context.fireContainerEvent("afterSessionAttributeRemoved",listener);    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      try {        context.fireContainerEvent("afterSessionAttributeRemoved",listener);      } catch (      Exception e) {      }      manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"),t);    }  }}  }
class C{  public static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return i - (i >>> 1);}  }
class C{  private void runOnEventThread(Runnable r){  if (SwingUtilities.isEventDispatchThread()) {    r.run();  } else {    SwingUtilities.invokeLater(r);  }}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  public String toString(){  return getBaseType() + parameters.toString();}  }
class C{  public static Serializer switchSerializerIfHTML(String ns,String localName,Properties props,Serializer oldSerializer) throws TransformerException {  Serializer newSerializer=oldSerializer;  if (((null == ns) || (ns.length() == 0)) && localName.equalsIgnoreCase("html")) {    if (null != getOutputPropertyNoDefault(OutputKeys.METHOD,props))     return newSerializer;    Properties prevProperties=props;    OutputProperties htmlOutputProperties=new OutputProperties(Method.HTML);    htmlOutputProperties.copyFrom(prevProperties,true);    Properties htmlProperties=htmlOutputProperties.getProperties();{      if (null != oldSerializer) {        Serializer serializer=SerializerFactory.getSerializer(htmlProperties);        Writer writer=oldSerializer.getWriter();        if (null != writer)         serializer.setWriter(writer); else {          OutputStream os=serializer.getOutputStream();          if (null != os)           serializer.setOutputStream(os);        }        newSerializer=serializer;      }    }  }  return newSerializer;}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  private static int findPropertyIndex(String fileName,String property){  int matchIndex=-1;  try {    File file=new File(fileName);    if (file.exists() && file.canRead()) {      LineNumberReader lineRead=new LineNumberReader(new FileReader(file));      String prevLine=null;      String presentLine=lineRead.readLine();      int prevLineNum=-1;      int presentLineNo=0;      String pattern=property;      while (presentLine != null) {        prevLine=presentLine;        prevLineNum=presentLineNo;        presentLineNo=lineRead.getLineNumber();        presentLine=lineRead.readLine();        if ((presentLine != null) && (presentLine.indexOf(pattern) >= 0) && (!presentLine.startsWith(HASH))) {          matchIndex=presentLineNo;          break;        }      }      if (lineRead != null) {        lineRead.close();      }    }  } catch (  Exception ex) {    Debug.log("FileUtils.findPropertyIndex() threw exception : ",ex);  }  return matchIndex;}  }
class C{  public SystemConfigurationException(String message){  super(message);}  }
class C{  protected HttpResponse doReceiveResponse(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  int statuscode=0;  while (response == null || statuscode < HttpStatus.SC_OK) {    response=conn.receiveResponseHeader();    if (canResponseHaveBody(request,response)) {      conn.receiveResponseEntity(response);    }    statuscode=response.getStatusLine().getStatusCode();  }  return response;}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  @Override public void rebind(String name,Object obj) throws NamingException {  rebind(new CompositeName(name),obj);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public void install(JEditorPane c){  c.addCaretListener(inputAttributeUpdater);  c.addPropertyChangeListener(inputAttributeUpdater);  Caret caret=c.getCaret();  if (caret != null) {    inputAttributeUpdater.updateInputAttributes(caret.getDot(),caret.getMark(),c);  }}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.ProtectTokensElement createProtectTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.ProtectTokensElementImpl();}  }
class C{  @Post public Response authenticate(@Contextual Context context,@Contextual Request httpRequest){  if (!isSupportedMediaType(httpRequest)) {    if (DEBUG.errorEnabled()) {      DEBUG.error("AuthenticationService :: Unable to handle media type request : " + ContentTypeHeader.valueOf(httpRequest).getType());    }    return handleErrorResponse(httpRequest,Status.UNSUPPORTED_MEDIA_TYPE,null);  }  final HttpServletResponse response=getHttpServletResponse(context);  Form urlQueryString=getUrlQueryString(httpRequest);  final String sessionUpgradeSSOTokenId=urlQueryString.getFirst("sessionUpgradeSSOTokenId");  try {    if (!StringUtils.isEmpty(sessionUpgradeSSOTokenId)) {      SSOTokenManager.getInstance().createSSOToken(sessionUpgradeSSOTokenId);    }    JsonValue jsonContent;    try {      jsonContent=getJsonContent(httpRequest);    } catch (    IOException e) {      DEBUG.message("AuthenticationService.authenticate() :: JSON parsing error",e);      return handleErrorResponse(httpRequest,Status.BAD_REQUEST,e);    }    final HttpServletRequest request=getHttpServletRequest(context,jsonContent);    JsonValue jsonResponse;    if (jsonContent != null && jsonContent.size() > 0) {      jsonResponse=restAuthenticationHandler.continueAuthentication(request,response,jsonContent,sessionUpgradeSSOTokenId);    } else {      final String authIndexType=urlQueryString.getFirst("authIndexType");      final String authIndexValue=urlQueryString.getFirst("authIndexValue");      jsonResponse=restAuthenticationHandler.initiateAuthentication(request,response,authIndexType,authIndexValue,sessionUpgradeSSOTokenId);    }    return createResponse(jsonResponse);  } catch (  RestAuthResponseException e) {    DEBUG.message("AuthenticationService.authenticate() :: Exception from CallbackHandler",e);    return handleErrorResponse(httpRequest,Status.valueOf(e.getStatusCode()),e);  }catch (  RestAuthException e) {    DEBUG.message("AuthenticationService.authenticate() :: Rest Authentication Exception",e);    return handleErrorResponse(httpRequest,Status.valueOf(e.getStatusCode()),e);  }catch (  SSOException e) {    return handleErrorResponse(httpRequest,Status.BAD_REQUEST,e);  }catch (  IOException e) {    DEBUG.error("AuthenticationService.authenticate() :: Internal Error",e);    return handleErrorResponse(httpRequest,Status.INTERNAL_SERVER_ERROR,e);  }catch (  RealmLookupException e) {    DEBUG.error("AuthenticationService.authenticate() :: RealmLookupException",e);    return handleErrorResponse(httpRequest,Status.BAD_REQUEST,e);  }}  }
class C{  public DsnPolylinePath(DsnLayer p_layer,double p_width,double[] p_corner_arr){  super(p_layer,p_width,p_corner_arr);}  }
class C{  private void addAttributeType(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseAttributeTypeOID(definition);  final String finalDefinition;  if (!currentSchema.hasAttributeType(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    AttributeType existingAttributeType=currentSchema.getAttributeType(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingAttributeType,modifiedSchemaFiles);  }  schemaBuilder.addAttributeType(finalDefinition,true);}  }
class C{  public void test_getNextSibling() throws Exception {  ByteArrayInputStream bis=new ByteArrayInputStream("<root/>".getBytes());  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(bis);  Node root=document.getDocumentElement();  assertNull(root.getNextSibling());}  }
class C{  public NamingEvent(EventContext source,int type,Binding newBd,Binding oldBd,Object changeInfo){  super(source);  this.type=type;  oldBinding=oldBd;  newBinding=newBd;  this.changeInfo=changeInfo;}  }
class C{  private boolean optimize_item_route(BrdItem p_item,int p_pass_no,boolean p_with_prefered_directions){  java.util.ResourceBundle resources=java.util.ResourceBundle.getBundle("interactive.resources.InteractiveState",batch_thread.hdlg.get_locale());  String start_message=resources.getString("batch_optimizer") + " " + resources.getString("stop_message")+ "        "+ resources.getString("pass")+ " "+ (new Integer(p_pass_no)).toString()+ ": ";  batch_thread.hdlg.screen_messages.set_status_message(start_message);  batch_thread.hdlg.remove_ratsnest();  int incomplete_count_before=batch_thread.hdlg.get_ratsnest().incomplete_count();  int via_count_before=r_board.get_vias().size();  Set<BrdItem> ripped_items=new TreeSet<BrdItem>();  ripped_items.add(p_item);  if (p_item instanceof BrdTracep) {    BrdTracep curr_trace=(BrdTracep)p_item;    Set<BrdItem> curr_contact_list=curr_trace.get_start_contacts();    for (int i=0; i < 2; ++i) {      if (contains_only_unfixed_traces(curr_contact_list)) {        ripped_items.addAll(curr_contact_list);      }      curr_contact_list=curr_trace.get_end_contacts();    }  }  Set<BrdItem> ripped_connections=new TreeSet<BrdItem>();  for (  BrdItem curr_item : ripped_items) {    ripped_connections.addAll(curr_item.get_connection_items(BrdStopConnection.NONE));  }  for (  BrdItem curr_item : ripped_connections) {    if (curr_item.is_user_fixed()) {      return false;    }  }  r_board.generate_snapshot();  r_board.remove_items_unfixed(ripped_connections);  for (int i=0; i < p_item.net_count(); ++i) {    r_board.combine_traces(p_item.get_net_no(i));  }  int ripup_costs=batch_thread.hdlg.itera_settings.autoroute_settings.get_start_ripup_costs();  if (use_increased_ripup_costs) {    ripup_costs*=ADDITIONAL_RIPUP_COST_FACTOR_AT_START;  }  if (p_item instanceof BrdTracep) {    ripup_costs=(int)Math.round(0.6 * (double)ripup_costs);  }  optimize_item_autoroute(batch_thread,MAX_AUTOROUTE_PASSES,ripup_costs,p_with_prefered_directions);  batch_thread.hdlg.remove_ratsnest();  int incomplete_count_after=batch_thread.hdlg.get_ratsnest().incomplete_count();  int via_count_after=r_board.get_vias().size();  double trace_length_after=calc_weighted_trace_length(r_board);  boolean route_improved=!batch_thread.is_stop_requested() && (incomplete_count_after < incomplete_count_before || incomplete_count_after == incomplete_count_before && (via_count_after < via_count_before || via_count_after == via_count_before && min_cumulative_trace_length_before > trace_length_after));  if (route_improved) {    if (incomplete_count_after < incomplete_count_before || incomplete_count_after == incomplete_count_before && via_count_after < via_count_before) {      min_cumulative_trace_length_before=trace_length_after;    } else {      min_cumulative_trace_length_before=Math.min(min_cumulative_trace_length_before,trace_length_after);    }    r_board.pop_snapshot();    double new_trace_length=batch_thread.hdlg.coordinate_transform.board_to_user(r_board.cumulative_trace_length());    batch_thread.hdlg.screen_messages.set_post_route_info(via_count_after,new_trace_length);  } else {    r_board.undo(null);  }  return route_improved;}  }
class C{  public static PolicyService parseXML(String xml) throws PolicyEvaluationException {  Document doc=null;  try {    doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(xml.getBytes("UTF-8")));  } catch (  Exception xe) {    debug.error("PolicyService.parseXML(String): XML parsing error");    throw new PolicyEvaluationException(ResBundleUtils.rbName,"xml_parsing_error",null,xe);  }  PolicyService ps=new PolicyService();  Node rootNode=XMLUtils.getRootNode(doc,POLICY_SERVICE_ROOT);  if (rootNode == null) {    debug.error("PolicyServiceparseXML(String): " + "invalid root element specified in the request");    throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_root_element",null,null);  }  String ver=XMLUtils.getNodeAttributeValue(rootNode,POLICYSERVICE_VERSION);  if (ver != null) {    ps.setVersion(ver);  }  String rev=XMLUtils.getNodeAttributeValue(rootNode,POLICYSERVICE_REVISION);  if (rev != null) {    ps.setRevision(rev);  }  Node node=XMLUtils.getChildNode(rootNode,POLICY_REQUEST);  if (node != null) {    PolicyRequest preq=PolicyRequest.parseXML(node);    ps.setPolicyRequest(preq);    ps.setMethodID(POLICY_REQUEST_ID);    return ps;  }  node=XMLUtils.getChildNode(rootNode,POLICY_RESPONSE);  if (node != null) {    PolicyResponse pres=PolicyResponse.parseXML(node);    ps.setPolicyResponse(pres);    ps.setMethodID(POLICY_RESPONSE_ID);    return ps;  }  node=XMLUtils.getChildNode(rootNode,POLICY_NOTIFICATION);  if (node != null) {    PolicyNotification pn=PolicyNotification.parseXML(node);    ps.setPolicyNotification(pn);    ps.setMethodID(POLICY_NOTIFICATION_ID);    return ps;  }  debug.error("PolicyService: invalid method specified");  throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_service_method",null,null);}  }
class C{  private final Collection<AwtreeFindEntry> find_overlap_tree_entries_with_clearance_fun(ShapeTile p_shape,int p_layer,NetNosList p_ignore_net_nos,int p_cl_type){  LinkedList<AwtreeFindEntry> result_list=new LinkedList<AwtreeFindEntry>();  if (p_shape == null)   return result_list;  ClearanceMatrix cl_matrix=r_board.brd_rules.clearance_matrix;  ShapeTileRegular bounds=p_shape.bounding_shape();  if (bounds == null) {    System.err.println("find_overlap_tree_entries_with_clearance: p_shape is not bounded");    return result_list;  }  int max_clearance=(int)(1.2 * cl_matrix.max_value(p_cl_type,p_layer));  ShapeTile offset_bounds=bounds.offset(max_clearance);  Collection<AwtreeNodeLeaf> tmp_list=get_overlaps(offset_bounds);  Set<AwtreeNodeLeafSorted> sorted_items=new TreeSet<AwtreeNodeLeafSorted>();  for (  AwtreeNodeLeaf curr_leaf : tmp_list) {    BrdItem curr_item=(BrdItem)curr_leaf.object;    int shape_index=curr_leaf.shape_index_in_object;    boolean ignore_item=p_layer >= 0 && curr_item.shape_layer(shape_index) != p_layer;    if (ignore_item)     continue;    ignore_item=p_ignore_net_nos.is_connectable(curr_item);    if (ignore_item)     continue;    int curr_clearance=cl_matrix.value_at(p_cl_type,curr_item.clearance_idx(),p_layer);    AwtreeNodeLeafSorted sorted_ob=new AwtreeNodeLeafSorted(curr_leaf,curr_clearance);    sorted_items.add(sorted_ob);  }  int curr_half_clearance=0;  ShapeTile curr_offset_shape=p_shape;  for (  AwtreeNodeLeafSorted tmp_entry : sorted_items) {    int tmp_half_clearance=tmp_entry.clearance / 2;    if (tmp_half_clearance != curr_half_clearance) {      curr_half_clearance=tmp_half_clearance;      curr_offset_shape=p_shape.enlarge(curr_half_clearance);    }    ShapeTile tmp_shape=tmp_entry.leaf.object.get_tree_shape(this,tmp_entry.leaf.shape_index_in_object);    ShapeConvex tmp_offset_shape=(ShapeConvex)tmp_shape.enlarge(curr_half_clearance);    if (!curr_offset_shape.intersects(tmp_offset_shape))     continue;    result_list.add(new AwtreeFindEntry(tmp_entry.leaf.object,tmp_entry.leaf.shape_index_in_object));  }  return result_list;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public int remove(int key){  Entry[] tab=table;  int index=(key & 0x7FFFFFFF) % tab.length;  Entry e;  Entry prev;  for (e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.key == key) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      int oldValue=e.value;      e.value=0;      return oldValue;    }  }  return 0;}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return false;}  }
class C{  public FrameBodyTOPE(){}  }
class C{  private final int _encode(int outputPtr,char[] str,int i,int end){  final byte[] outBuf=_outputBuffer;  final int outputStart=outputPtr;  do {    int c=str[i];    if (c > 0x7F) {      return _shortUTF8Encode2(str,i,end,outputPtr,outputStart);    }    outBuf[outputPtr++]=(byte)c;  } while (++i < end);  return outputPtr - outputStart;}  }
class C{  public AddOperation processAdd(ByteString rawEntryDN,List<RawAttribute> rawAttributes){  return processAdd(rawEntryDN,rawAttributes,null);}  }
class C{  private static boolean commonNeedIncrement(int roundingMode,int qsign,int cmpFracHalf,boolean oddQuot){switch (roundingMode) {case ROUND_UNNECESSARY:    throw new ArithmeticException("Rounding necessary");case ROUND_UP:  return true;case ROUND_DOWN:return false;case ROUND_CEILING:return qsign > 0;case ROUND_FLOOR:return qsign < 0;default :assert roundingMode >= ROUND_HALF_UP && roundingMode <= ROUND_HALF_EVEN : "Unexpected rounding mode" + RoundingMode.valueOf(roundingMode);if (cmpFracHalf < 0) return false; else if (cmpFracHalf > 0) return true; else {assert cmpFracHalf == 0;switch (roundingMode) {case ROUND_HALF_DOWN:return false;case ROUND_HALF_UP:return true;case ROUND_HALF_EVEN:return oddQuot;default :throw new AssertionError("Unexpected rounding mode" + roundingMode);}}}}  }
class C{  public FSSignatureException(String s){  super(s);}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public void addMethod(MappedMember mm){  methods.add(mm);}  }
class C{  private Branch parseBranchDefinition(final String[] branchLines,final int startLineNumber,final Map<String,TemplateTag> tags,final List<LocalizableMessage> warnings) throws DecodeException {  final String dnString=branchLines[0].substring(BRANCH_LABEL.length()).trim();  DN branchDN;  try {    branchDN=DN.valueOf(dnString,schema);  } catch (  Exception e) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_CANNOT_DECODE_BRANCH_DN.get(dnString,startLineNumber + 1));  }  final Branch branch=new Branch(this,branchDN,schema);  for (int i=1; i < branchLines.length; i++) {    final String line=branchLines[i];    final String lowerLine=line.toLowerCase();    final int lineNumber=startLineNumber + i;    if (lowerLine.startsWith("#")) {      continue;    } else     if (lowerLine.startsWith(SUBORDINATE_TEMPLATE_LABEL)) {      final Pair<String,Integer> pair=parseSubordinateTemplate(lineNumber,line,Element.BRANCH,dnString,warnings);      final String templateName=pair.getFirst();      final int numEntries=pair.getSecond();      branch.addSubordinateTemplate(templateName,numEntries);    } else {      final TemplateLine templateLine=parseTemplateLine(line,lineNumber,branch,null,Element.BRANCH,tags,warnings);      branch.addExtraLine(templateLine);    }  }  return branch;}  }
class C{  public void testNegNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,75,-89,-45,-2,-3,-18,-36,-17,-10,-3,-6,-7,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected final void registerTag(Tag tag){  allTags.add(tag);}  }
class C{  public SFieldDef findFieldFromTypeDef(String fieldName,STypeDef targetType,STypeDef callerType,int mode,boolean checkSuper){  if (targetType instanceof SClassDef) {    return findFieldFromClassDef(fieldName,(SClassDef)targetType,callerType,mode,checkSuper);  } else   if (targetType instanceof SInterfaceDef) {    return findFieldFromInterfaceDef(fieldName,(SInterfaceDef)targetType,checkSuper);  } else   throw new LtBug("the type to get field from cannot be " + targetType);}  }
class C{  protected void decryptInPlace(ByteBuffer buf) throws IOException {  Utils.checkState(inBuffer.position() >= padding);  Utils.checkState(buf.isDirect());  Utils.checkState(buf.remaining() >= inBuffer.position());  Utils.checkState(padding == 0);  if (inBuffer.position() == padding) {    return;  }  inBuffer.flip();  decryptBuffer(buf);  inBuffer.clear();}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addObjectCreate(prefix + "Manager",null,"className");  digester.addSetProperties(prefix + "Manager");  digester.addSetNext(prefix + "Manager","setManagerTemplate","org.apache.catalina.ha.ClusterManager");  digester.addObjectCreate(prefix + "Manager/SessionIdGenerator","org.apache.catalina.util.StandardSessionIdGenerator","className");  digester.addSetProperties(prefix + "Manager/SessionIdGenerator");  digester.addSetNext(prefix + "Manager/SessionIdGenerator","setSessionIdGenerator","org.apache.catalina.SessionIdGenerator");  digester.addObjectCreate(prefix + "Channel",null,"className");  digester.addSetProperties(prefix + "Channel");  digester.addSetNext(prefix + "Channel","setChannel","org.apache.catalina.tribes.Channel");  String channelPrefix=prefix + "Channel/";  digester.addObjectCreate(channelPrefix + "Membership",null,"className");  digester.addSetProperties(channelPrefix + "Membership");  digester.addSetNext(channelPrefix + "Membership","setMembershipService","org.apache.catalina.tribes.MembershipService");  digester.addObjectCreate(channelPrefix + "MembershipListener",null,"className");  digester.addSetProperties(channelPrefix + "MembershipListener");  digester.addSetNext(channelPrefix + "MembershipListener","addMembershipListener","org.apache.catalina.tribes.MembershipListener");  digester.addObjectCreate(channelPrefix + "Sender",null,"className");  digester.addSetProperties(channelPrefix + "Sender");  digester.addSetNext(channelPrefix + "Sender","setChannelSender","org.apache.catalina.tribes.ChannelSender");  digester.addObjectCreate(channelPrefix + "Sender/Transport",null,"className");  digester.addSetProperties(channelPrefix + "Sender/Transport");  digester.addSetNext(channelPrefix + "Sender/Transport","setTransport","org.apache.catalina.tribes.transport.MultiPointSender");  digester.addObjectCreate(channelPrefix + "Receiver",null,"className");  digester.addSetProperties(channelPrefix + "Receiver");  digester.addSetNext(channelPrefix + "Receiver","setChannelReceiver","org.apache.catalina.tribes.ChannelReceiver");  digester.addObjectCreate(channelPrefix + "Interceptor",null,"className");  digester.addSetProperties(channelPrefix + "Interceptor");  digester.addSetNext(channelPrefix + "Interceptor","addInterceptor","org.apache.catalina.tribes.ChannelInterceptor");  digester.addObjectCreate(channelPrefix + "Interceptor/LocalMember",null,"className");  digester.addSetProperties(channelPrefix + "Interceptor/LocalMember");  digester.addSetNext(channelPrefix + "Interceptor/LocalMember","setLocalMember","org.apache.catalina.tribes.Member");  digester.addObjectCreate(channelPrefix + "Interceptor/Member",null,"className");  digester.addSetProperties(channelPrefix + "Interceptor/Member");  digester.addSetNext(channelPrefix + "Interceptor/Member","addStaticMember","org.apache.catalina.tribes.Member");  digester.addObjectCreate(channelPrefix + "ChannelListener",null,"className");  digester.addSetProperties(channelPrefix + "ChannelListener");  digester.addSetNext(channelPrefix + "ChannelListener","addChannelListener","org.apache.catalina.tribes.ChannelListener");  digester.addObjectCreate(prefix + "Valve",null,"className");  digester.addSetProperties(prefix + "Valve");  digester.addSetNext(prefix + "Valve","addValve","org.apache.catalina.Valve");  digester.addObjectCreate(prefix + "Deployer",null,"className");  digester.addSetProperties(prefix + "Deployer");  digester.addSetNext(prefix + "Deployer","setClusterDeployer","org.apache.catalina.ha.ClusterDeployer");  digester.addObjectCreate(prefix + "Listener",null,"className");  digester.addSetProperties(prefix + "Listener");  digester.addSetNext(prefix + "Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addObjectCreate(prefix + "ClusterListener",null,"className");  digester.addSetProperties(prefix + "ClusterListener");  digester.addSetNext(prefix + "ClusterListener","addClusterListener","org.apache.catalina.ha.ClusterListener");}  }
class C{  public boolean isPackage(){  return !testAnyFlags(ALL_ACCESS);}  }
class C{  public Set createUsers(Set userNames) throws AMException, SSOException {  Set usersSet=new HashSet();  Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=userNames.iterator();  while (iter.hasNext()) {    String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMUserImpl user=new AMUserImpl(super.token,userDN);    if (objectClasses != null && !objectClasses.isEmpty()) {      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  @Override public Foo findByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_First(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public void installKeyboardActions(JComponent c){  AbstractButton b=(AbstractButton)c;  updateMnemonicBinding(b);  LazyActionMap.installLazyActionMap(c,BasicButtonListener.class,"Button.actionMap");  InputMap km=getInputMap(JComponent.WHEN_FOCUSED,c);  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_FOCUSED,km);}  }
class C{  private void putZipEntry(ZipOutputStream zos,String file,byte[] bytes) throws IOException {  zos.putNextEntry(new ZipEntry(file));  zos.write(bytes);  zos.closeEntry();}  }
class C{  protected Object createCtsConnectionSuccessRateMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  ctsConnectionSuccessRate=new CtsConnectionSuccessRateImpl(this);  return ctsConnectionSuccessRate;}  }
class C{  public FieldPosition(int field){  this.field=field;}  }
class C{  public static StringArgument encodingArgument() throws ArgumentException {  return StringArgument.builder("encoding").shortIdentifier('i').description(INFO_DESCRIPTION_ENCODING.get()).valuePlaceholder(INFO_ENCODING_PLACEHOLDER.get()).buildArgument();}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.ProviderDescriptorType createProviderDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.ProviderDescriptorTypeImpl();}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.StatusTypeImpl();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AUTH_INSTANCES",params);  try {    AMAuthenticationManager mgr=new AMAuthenticationManager(adminSSOToken,realm);    Set instances=mgr.getAuthenticationInstances();    if ((instances != null) && !instances.isEmpty()) {      getOutputWriter().printlnMessage(getResourceString("authentication-list-auth-instance"));      for (Iterator i=instances.iterator(); i.hasNext(); ) {        AMAuthenticationInstance instance=(AMAuthenticationInstance)i.next();        Object[] args={instance.getName(),instance.getType()};        getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("authentication-list-auth-instance-entry"),args));      }    } else {      getOutputWriter().printlnMessage(getResourceString("authentication-list-auth-instance-empty"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_AUTH_INSTANCES",params);  } catch (  AMConfigurationException e) {    debugError("ListAuthInstances.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AUTH_INSTANCES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public PlaLineInt plaline_last(){  return plaline(plaline_len(-1));}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  final int strengthOrder(int order){  int s=owner.getStrength();  if (s == Collator.PRIMARY) {    order&=RBCollationTables.PRIMARYDIFFERENCEONLY;  } else   if (s == Collator.SECONDARY) {    order&=RBCollationTables.SECONDARYDIFFERENCEONLY;  }  return order;}  }
class C{  protected void installListeners(){  TransferHandler th=list.getTransferHandler();  if (th == null || th instanceof UIResource) {    list.setTransferHandler(defaultTransferHandler);    if (list.getDropTarget() instanceof UIResource) {      list.setDropTarget(null);    }  }  focusListener=createFocusListener();  mouseInputListener=createMouseInputListener();  propertyChangeListener=createPropertyChangeListener();  listSelectionListener=createListSelectionListener();  listDataListener=createListDataListener();  list.addFocusListener(focusListener);  list.addMouseListener(mouseInputListener);  list.addMouseMotionListener(mouseInputListener);  list.addPropertyChangeListener(propertyChangeListener);  list.addKeyListener(getHandler());  ListModel model=list.getModel();  if (model != null) {    model.addListDataListener(listDataListener);  }  ListSelectionModel selectionModel=list.getSelectionModel();  if (selectionModel != null) {    selectionModel.addListSelectionListener(listSelectionListener);  }}  }
class C{  public boolean isMissing(String key){  return (missingHyphenationTrees != null && missingHyphenationTrees.contains(key));}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  private static double dot(double vector1[],double vector2[]){  double product=0;  assert vector1.length == vector2.length;  for (int i=0; i < vector1.length; i++) {    product+=vector1[i] * vector2[i];  }  return product;}  }
class C{  public void clear(TrayPreference... modules){  mProviderHelper.clear(modules);}  }
class C{  private Set<String> generateSecretHolder(){  final byte[] buff=new byte[12];  NUMGEN.nextBytes(buff);  final String secret=Base64.encode(buff,true);  final Set<String> holder=new HashSet<String>();  holder.add(secret);  return holder;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  handler.popElemTemplateElement();}  }
class C{  boolean match(int from,int anchor){  this.hitEnd=false;  this.requireEnd=false;  from=from < 0 ? 0 : from;  this.first=from;  this.oldLast=oldLast < 0 ? from : oldLast;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  acceptMode=anchor;  boolean result=parentPattern.matchRoot.match(this,from,text);  if (!result)   this.first=-1;  this.oldLast=this.last;  return result;}  }
class C{  public static MatteBorder createMatteBorder(int top,int left,int bottom,int right,Icon tileIcon){  return new MatteBorder(top,left,bottom,right,tileIcon);}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public void addElement(E element){  int index=delegate.size();  delegate.addElement(element);  fireIntervalAdded(this,index,index);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlElementString=null;  if (idpList != null || (requesterIDList != null && !requesterIDList.isEmpty()) || proxyCount != null) {    validateProxyCount(proxyCount);    StringBuilder xmlString=new StringBuilder(300);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.SCOPING);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    if (proxyCount != null) {      xmlString.append(SAML2Constants.SPACE).append(PROXYCOUNT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(proxyCount.intValue()).append(SAML2Constants.QUOTE);    }    xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE);    if (idpList != null) {      xmlString.append(idpList.toXMLString(includeNSPrefix,declareNS)).append(SAML2Constants.NEWLINE);    }    if (requesterIDList != null) {      for (      RequesterID reqID : requesterIDList) {        String reqIDStr=reqID.toXMLString(includeNSPrefix,declareNS);        xmlString.append(reqIDStr).append(SAML2Constants.NEWLINE);      }    }    xmlString.append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.SCOPING).append(SAML2Constants.END_TAG);    xmlElementString=xmlString.toString();  }  return xmlElementString;}  }
class C{  public WorldCreator copy(World world){  if (world == null) {    throw new IllegalArgumentException("World cannot be null");  }  seed=world.getSeed();  environment=world.getEnvironment();  generator=world.getGenerator();  return this;}  }
class C{  protected static boolean destroyLocalSession(Object ssoToken,HttpServletRequest request,HttpServletResponse response){  try {    FSUtils.debug.message("FSLogoutUtil.destroyLocalSession, enter");    SessionProvider sessionProvider=SessionManager.getProvider();    if (sessionProvider.isValid(ssoToken)) {      MultiProtocolUtils.invalidateSession(ssoToken,request,response,SingleLogoutManager.IDFF);    }    FSUtils.debug.message("FSLogoutUtil.destroyLocalSession, deleted");    return true;  } catch (  SessionException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("SessionException in destroyLocalSession",e);    }    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatedocumentfragment.class,args);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public NodeSequence(){  return;}  }
class C{  public MessagePromise(PromiseImpl<JsonValue,Exception> promise,Set<Predicate> predicates){  Reject.ifNull(predicates);  Reject.ifNull(promise);  this.predicates.addAll(predicates);  this.promise=promise;}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  public Value __findObjectInCurrentScopeWithName(String name,SemanticScope scope){  LeftValue v=scope.getLeftValue(name);  if (v != null)   return new Ins.TLoad(v,scope,LineCol.SYNTHETIC);  Ins.This aThis=scope.getThis();  if (aThis != null) {    SFieldDef field=findFieldFromTypeDef(name,aThis.type(),aThis.type(),FIND_MODE_ANY,true);    if (field == null)     return NullValue.get();    return new Ins.GetField(field,aThis,LineCol.SYNTHETIC);  } else {    SFieldDef field=findFieldFromTypeDef(name,scope.type(),scope.type(),FIND_MODE_STATIC,true);    if (field == null)     return NullValue.get();    return new Ins.GetStatic(field,LineCol.SYNTHETIC);  }}  }
class C{  @Override protected void initInternal() throws LifecycleException {  super.initInternal();  if (engine != null) {    engine.init();  }  for (  Executor executor : findExecutors()) {    if (executor instanceof JmxEnabled) {      ((JmxEnabled)executor).setDomain(getDomain());    }    executor.init();  }  mapperListener.init();synchronized (connectorsLock) {    for (    Connector connector : connectors) {      try {        connector.init();      } catch (      Exception e) {        String message=sm.getString("standardService.connector.initFailed",connector);        log.error(message,e);        if (Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"))         throw new LifecycleException(message);      }    }  }}  }
class C{  public static SOAPMessage DocumentToSOAPMessage(Document doc) throws SOAPBindingException {  SOAPMessage msg=null;  try {    MimeHeaders mimeHeaders=new MimeHeaders();    mimeHeaders.addHeader("Content-Type","text/xml");    String xmlstr=XMLUtils.print(doc);    if (debug.messageEnabled()) {      debug.message("Utils.DocumentToSOAPMessage: xmlstr = " + xmlstr);    }    msg=messageFactory.createMessage(mimeHeaders,new ByteArrayInputStream(xmlstr.getBytes(SOAPBindingConstants.DEFAULT_ENCODING)));  } catch (  Exception e) {    debug.error("Utils.DocumentToSOAPMessage",e);    throw new SOAPBindingException(e.getMessage());  }  return msg;}  }
class C{  private void addPropertyDescriptor(PropertyDescriptor pd){  String propName=pd.getName();  List<PropertyDescriptor> list=pdStore.get(propName);  if (list == null) {    list=new ArrayList<>();    pdStore.put(propName,list);  }  if (this.beanClass != pd.getClass0()) {    Method read=pd.getReadMethod();    Method write=pd.getWriteMethod();    boolean cls=true;    if (read != null)     cls=cls && read.getGenericReturnType() instanceof Class;    if (write != null)     cls=cls && write.getGenericParameterTypes()[0] instanceof Class;    if (pd instanceof IndexedPropertyDescriptor) {      IndexedPropertyDescriptor ipd=(IndexedPropertyDescriptor)pd;      Method readI=ipd.getIndexedReadMethod();      Method writeI=ipd.getIndexedWriteMethod();      if (readI != null)       cls=cls && readI.getGenericReturnType() instanceof Class;      if (writeI != null)       cls=cls && writeI.getGenericParameterTypes()[1] instanceof Class;      if (!cls) {        pd=new IndexedPropertyDescriptor(ipd);        pd.updateGenericsFor(this.beanClass);      }    } else     if (!cls) {      pd=new PropertyDescriptor(pd);      pd.updateGenericsFor(this.beanClass);    }  }  list.add(pd);}  }
class C{  public void pushPairCurrentMatched(ElemTemplateElement template,int child){  m_currentMatchTemplates.push(template);  m_currentMatchedNodes.push(child);}  }
class C{  public AMModelBase(HttpServletRequest req){  initialize(req,null);}  }
class C{  public void testDoubleValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  double result=-1.2380964839238476E53;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  public AclNotFoundException(){}  }
class C{  public void addTemplateLine(TemplateLine line){  TemplateLine[] newTemplateLines=new TemplateLine[templateLines.length + 1];  System.arraycopy(templateLines,0,newTemplateLines,0,templateLines.length);  newTemplateLines[templateLines.length]=line;  templateLines=newTemplateLines;}  }
class C{  public String toString(){  return this.encode();}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  try {    MimeHeaders mimeHeaders=SAMLUtils.getMimeHeaders(request);    ServletInputStream sInputStream=request.getInputStream();    SOAPMessage soapMessage=msgFactory.createMessage(mimeHeaders,sInputStream);    SOAPMessage soapMessageReply=this.onMessage(soapMessage,request);    if (soapMessageReply != null) {      SAMLUtils.setMimeHeaders(soapMessageReply.getMimeHeaders(),response);      ServletOutputStream sOutputStream=response.getOutputStream();      soapMessageReply.writeTo(sOutputStream);      sOutputStream.flush();    } else {      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    }  } catch (  SOAPException se) {    throw new ServletException(se);  }}  }
class C{  public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  private static void removeTransientNameIDFromCache(NameID nameID){  if (nameID == null) {    return;  }  if (SAML2Constants.NAMEID_TRANSIENT_FORMAT.equals(nameID.getFormat())) {    String nameIDValue=nameID.getValue();    if (IDPCache.userIDByTransientNameIDValue.containsKey(nameIDValue)) {      IDPCache.userIDByTransientNameIDValue.remove(nameIDValue);    }  }}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=in.readFields();  Throwable scause=(Throwable)fields.get("cause",null);  if (super.getCause() == null && scause != null) {    try {      super.initCause(scause);    } catch (    IllegalStateException e) {      throw new InvalidClassException("Inconsistent state: two causes");    }  }}  }
class C{  public String debugOperationAttemptAsPrincipal(String resource,String operation,Context context,String realm,Debug debug){  init();  Reject.ifNull(resource,operation,context,debug);  final String principalName=PrincipalRestUtils.getPrincipalNameFromServerContext(context);  StringBuilder sb=new StringBuilder();  sb.append(resource).append(" :: ").append(operation.toUpperCase());  sb.append(" attempted by ");  sb.append(principalName == null ? "[unknown]" : principalName);  if (realm != null) {    sb.append(" in realm ").append(realm);  }  debug.message(sb.toString());  return principalName;}  }
class C{  private PlaLineInt smoothen_corner(PlaLineIntAlist p_line_arr,int p_start_no){  if (p_line_arr.size() - p_start_no < 4)   return null;  PlaLineInt cur_line=p_line_arr.get(p_start_no);  PlaLineInt a_line=p_line_arr.get(p_start_no + 1);  PlaLineInt b_line=p_line_arr.get(p_start_no + 2);  PlaLineInt d_line=p_line_arr.get(p_start_no + 3);  PlaPointFloat curr_corner=a_line.intersection_approx(b_line);  if (curr_corner.is_NaN())   return null;  double cosinus_angle=a_line.cos_angle(b_line);  if (cosinus_angle > COS_ANGLE_MAX)   return null;  PlaPointFloat prev_corner=cur_line.intersection_approx(a_line);  if (prev_corner.is_NaN())   return null;  PlaPointFloat next_corner=b_line.intersection_approx(d_line);  if (next_corner.is_NaN())   return null;  PlaDirection prev_dir=a_line.direction();  PlaDirection next_dir=b_line.direction();  PlaDirection middle_dir=prev_dir.middle_approx(next_dir);  PlaLineInt translate_line=new PlaLineInt(curr_corner.round(),middle_dir);  double prev_dist=translate_line.distance_signed(prev_corner);  double next_dist=translate_line.distance_signed(next_corner);  PlaPointFloat nearest_point;  double max_translate_dist;  if (Math.abs(prev_dist) < Math.abs(next_dist)) {    nearest_point=prev_corner;    max_translate_dist=prev_dist;  } else {    nearest_point=next_corner;    max_translate_dist=next_dist;  }  if (Math.abs(max_translate_dist) < 1)   return null;  PlaLineIntAlist curr_lines=new PlaLineIntAlist(p_line_arr.size(1));  p_line_arr.append_to(curr_lines,0);  curr_lines.add_null(p_start_no + 2);  double translate_dist=max_translate_dist;  double delta_dist=max_translate_dist;  PlaSide side_of_nearest_point=translate_line.side_of(nearest_point);  int sign=Signum.as_int(max_translate_dist);  PlaLineInt result=null;  while (Math.abs(delta_dist) > min_move_dist) {    boolean check_ok=false;    PlaLineInt new_line=translate_line.translate(-translate_dist);    PlaSide new_line_side_of_nearest_point=new_line.side_of(nearest_point);    if (new_line_side_of_nearest_point == side_of_nearest_point || new_line_side_of_nearest_point == PlaSide.COLLINEAR) {      curr_lines.set(p_start_no + 2,new_line);      Polyline tmp=new Polyline(curr_lines);      if (tmp.plaline_len() == curr_lines.size()) {        ShapeTile shape_to_check=tmp.offset_shape(curr_half_width,p_start_no + 1);        check_ok=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);      }      delta_dist/=2;      if (check_ok) {        result=new_line;        if (translate_dist == max_translate_dist) {          break;        }        translate_dist+=delta_dist;      } else {        translate_dist-=delta_dist;      }    } else {      double shorten_value=sign * 0.5;      max_translate_dist-=shorten_value;      translate_dist-=shorten_value;      delta_dist-=shorten_value;    }  }  if (result == null)   return null;  curr_lines.changed_area_join_corner(r_board.changed_area,p_start_no,curr_layer);  curr_lines.changed_area_join_corner(r_board.changed_area,p_start_no + 3,curr_layer);  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexgetlengthofemptylist.class,args);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthCheckBoxMenuItemUI();}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  @Override public Foo createFoo(long fooId){  return fooPersistence.create(fooId);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TransportTokenElement createTransportTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TransportTokenElementImpl();}  }
class C{  public ArrayList<PlaLineInt> to_alist(){  return a_list;}  }
class C{  public ProtoVersionFieldParser(String protoVersionField){  this.lexer=new Lexer("charLexer",protoVersionField);}  }
class C{  private int findLine(int offset){  int[] lineEnds=lineCache.get();  if (offset < lineEnds[0]) {    return 0;  } else   if (offset > lineEnds[lineCount - 1]) {    return lineCount;  } else {    return findLine(lineEnds,offset,0,lineCount - 1);  }}  }
class C{  public static void processRESTNotification(String message) throws PolicyEvaluationException {  if (debug.messageEnabled()) {    debug.message("ResultsCacheUtil.processRESTNotification():" + "recieved notification =" + message);  }  if (message != null) {    ResourceResultCache.processRESTPolicyNotification(message);  } else {    debug.error("ResultsCacheUtil.processRESTNotification():" + "notification message is null");  }}  }
class C{  @Override public Context createSubcontext(Name name) throws NamingException {  if (!checkWritable()) {    return null;  }  NamingContext newContext=new NamingContext(env,this.name);  bind(name,newContext);  newContext.setExceptionOnFailedWrite(getExceptionOnFailedWrite());  return newContext;}  }
class C{  public ThreadPool(String name,int poolSize){  this.poolSize=poolSize;  this.poolName=name;  taskList=new LinkedList<Runnable>();  threads=new WorkerThread[poolSize];  createThreads();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestAbstractType createRequestAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl();}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable encoded");  }}  }
class C{  public static Response processAssertionIDRequest(AssertionIDRequest assertionIDRequest,HttpServletRequest request,HttpServletResponse response,String samlAuthorityEntityID,String role,String realm) throws SAML2Exception {  try {    verifyAssertionIDRequest(assertionIDRequest,samlAuthorityEntityID,role,realm);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("AssertionIDRequestUtil." + "processAssertionIDRequest:",se);    return SAML2Utils.getErrorResponse(assertionIDRequest,SAML2Constants.REQUESTER,null,se.getMessage(),samlAuthorityEntityID);  }  Issuer issuer=assertionIDRequest.getIssuer();  String spEntityID=issuer.getValue();  RoleDescriptorType roled=null;  try {    if (SAML2Constants.IDP_ROLE.equals(role)) {      roled=metaManager.getIDPSSODescriptor(realm,samlAuthorityEntityID);    } else     if (SAML2Constants.AUTHN_AUTH_ROLE.equals(role)) {      roled=metaManager.getAuthnAuthorityDescriptor(realm,samlAuthorityEntityID);    } else     if (SAML2Constants.ATTR_AUTH_ROLE.equals(role)) {      roled=metaManager.getAttributeAuthorityDescriptor(realm,samlAuthorityEntityID);    }  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AssertionIDRequestUtil." + "processAssertionIDRequest:",sme);    return SAML2Utils.getErrorResponse(assertionIDRequest,SAML2Constants.RESPONDER,null,sme.getMessage(),samlAuthorityEntityID);  }  if (roled == null) {    return SAML2Utils.getErrorResponse(assertionIDRequest,SAML2Constants.REQUESTER,null,SAML2Utils.bundle.getString("samlAuthorityNotFound"),samlAuthorityEntityID);  }  List returnAssertions=null;  List assertionIDRefs=assertionIDRequest.getAssertionIDRefs();  for (Iterator iter=assertionIDRefs.iterator(); iter.hasNext(); ) {    AssertionIDRef assertionIDRef=(AssertionIDRef)iter.next();    String assertionID=assertionIDRef.getValue();    Assertion assertion=(Assertion)IDPCache.assertionByIDCache.get(assertionID);    if ((assertion == null) && (SAML2FailoverUtils.isSAML2FailoverEnabled())) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message("AssertionIDRequestUtil.processAssertionIDRequest: " + "reading assertion from the SAML2 Token Repository using assertionID:" + assertionID);      }      String assertionStr=null;      try {        assertionStr=(String)SAML2FailoverUtils.retrieveSAML2Token(assertionID);      } catch (      SAML2TokenRepositoryException se) {        SAML2Utils.debug.error("AssertionIDRequestUtil.processAssertionIDRequest: " + "There was a problem reading assertion from the SAML2 Token Repository using assertionID:" + assertionID,se);      }      if (assertionStr != null) {        assertion=AssertionFactory.getInstance().createAssertion(assertionStr);      }    }    if ((assertion != null) && (assertion.isTimeValid())) {      if (returnAssertions == null) {        returnAssertions=new ArrayList();      }      returnAssertions.add(assertion);    }  }  ProtocolFactory protocolFactory=ProtocolFactory.getInstance();  Response samlResp=protocolFactory.createResponse();  samlResp.setAssertion(returnAssertions);  samlResp.setID(SAML2Utils.generateID());  samlResp.setInResponseTo(assertionIDRequest.getID());  samlResp.setVersion(SAML2Constants.VERSION_2_0);  samlResp.setIssueInstant(newDate());  Status status=protocolFactory.createStatus();  StatusCode statusCode=protocolFactory.createStatusCode();  statusCode.setValue(SAML2Constants.SUCCESS);  status.setStatusCode(statusCode);  samlResp.setStatus(status);  Issuer respIssuer=AssertionFactory.getInstance().createIssuer();  respIssuer.setValue(samlAuthorityEntityID);  samlResp.setIssuer(respIssuer);  signResponse(samlResp,samlAuthorityEntityID,role,realm,false);  return samlResp;}  }
class C{  public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AddressCardElement createAddressCardElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddressCardElementImpl();}  }
class C{  private Object loadSerializedObject(URL codebase,String filename) throws IOException, ClassNotFoundException {  if (filename != null) {    filename=filename.replace(File.separatorChar,'/');  }  if (MLET_LOGGER.isLoggable(Level.FINER)) {    MLET_LOGGER.logp(Level.FINER,MLet.class.getName(),"loadSerializedObject",codebase.toString() + filename);  }  InputStream is=getResourceAsStream(filename);  if (is != null) {    try {      ObjectInputStream ois=new MLetObjectInputStream(is,this);      Object serObject=ois.readObject();      ois.close();      return serObject;    } catch (    IOException e) {      if (MLET_LOGGER.isLoggable(Level.FINEST)) {        MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Exception while deserializing " + filename,e);      }      throw e;    }catch (    ClassNotFoundException e) {      if (MLET_LOGGER.isLoggable(Level.FINEST)) {        MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Exception while deserializing " + filename,e);      }      throw e;    }  } else {    if (MLET_LOGGER.isLoggable(Level.FINEST)) {      MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"loadSerializedObject","Error: File " + filename + " containing serialized object not found");    }    throw new Error("File " + filename + " containing serialized object not found");  }}  }
class C{  public void commit(){  activeValues.clear();  activeValues.addAll(pendingValues);}  }
class C{  private static SearchFilter decodeExtensibleMatchFilter(String filterString,int startPos,int equalPos,int endPos) throws DirectoryException {  AttributeDescription attrDesc=null;  boolean dnAttributes=false;  String matchingRuleID=null;  String lowerLeftStr=toLowerCase(filterString.substring(startPos,equalPos));  if (filterString.charAt(startPos) == ':') {    if (lowerLeftStr.startsWith(":dn:")) {      dnAttributes=true;      matchingRuleID=filterString.substring(startPos + 4,equalPos - 1);    } else {      matchingRuleID=filterString.substring(startPos + 1,equalPos - 1);    }  } else {    int colonPos=filterString.indexOf(':',startPos);    if (colonPos < 0) {      LocalizableMessage message=ERR_SEARCH_FILTER_EXTENSIBLE_MATCH_NO_COLON.get(filterString,startPos);      throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);    }    String attrType=filterString.substring(startPos,colonPos);    attrDesc=AttributeDescription.valueOf(toLowerCase(attrType));    if (colonPos < equalPos - 1) {      if (lowerLeftStr.startsWith(":dn:",colonPos)) {        dnAttributes=true;        if (colonPos + 4 < equalPos - 1) {          matchingRuleID=filterString.substring(colonPos + 4,equalPos - 1);        }      } else {        matchingRuleID=filterString.substring(colonPos + 1,equalPos - 1);      }    }  }  byte[] valueBytes=getBytes(filterString.substring(equalPos + 1,endPos));  boolean hasEscape=false;  for (  byte valueByte : valueBytes) {    if (valueByte == 0x5C) {      hasEscape=true;      break;    }  }  ByteString userValue;  if (hasEscape) {    ByteStringBuilder valueBuffer=new ByteStringBuilder(valueBytes.length);    for (int i=0; i < valueBytes.length; i++) {      if (valueBytes[i] == 0x5C) {        if (i + 2 >= valueBytes.length) {          LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);          throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);        }        byte byteValue=0;switch (valueBytes[++i]) {case 0x30:          break;case 0x31:        byteValue=(byte)0x10;      break;case 0x32:    byteValue=(byte)0x20;  break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);}valueBuffer.appendByte(byteValue);} else {valueBuffer.appendByte(valueBytes[i]);}}userValue=valueBuffer.toByteString();} else {userValue=ByteString.wrap(valueBytes);}if (attrDesc == null) {if (matchingRuleID == null) {throw new DirectoryException(ResultCode.PROTOCOL_ERROR,ERR_SEARCH_FILTER_EXTENSIBLE_MATCH_NO_AD_OR_MR.get(filterString,startPos));}try {DirectoryServer.getSchema().getMatchingRule(matchingRuleID);} catch (UnknownSchemaElementException e) {throw new DirectoryException(ResultCode.PROTOCOL_ERROR,ERR_SEARCH_FILTER_EXTENSIBLE_MATCH_NO_SUCH_MR.get(filterString,startPos,matchingRuleID));}}return new SearchFilter(FilterType.EXTENSIBLE_MATCH,null,null,attrDesc,userValue,null,null,null,matchingRuleID,dnAttributes);}  }
class C{  boolean calc_length_violation(){  double old_violation=length_violation;  double max_length=rule_net.get_class().get_maximum_trace_length();  double min_length=rule_net.get_class().get_minimum_trace_length();  if (max_length <= 0 && min_length <= 0) {    length_violation=0;    return false;  }  double new_violation=0;  double trace_length=rule_net.get_trace_length();  if (max_length > 0 && trace_length > max_length) {    new_violation=trace_length - max_length;  }  if (min_length > 0 && trace_length < min_length && this.incomplete_list.size() == 0) {    new_violation=trace_length - min_length;  }  length_violation=new_violation;  boolean result=Math.abs(new_violation - old_violation) > 0.1;  return result;}  }
class C{  public static Color makeColor(PdfColorSpace colorSpace){  return makeColor(colorSpace,null);}  }
class C{  public int hashCode(){  int result=0;  int n=members.length;  for (int i=0; i < n; ++i) {    result+=members[i][0] + members[i][1];  }  return result;}  }
class C{  public AMSearchResults searchOrganizationalUnits(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchOrganizationalUnits(wildcard,null,searchControl);}  }
class C{  private void createEnableReplicationSubCommand() throws ArgumentException {  createServerArgs1();  createServerArgs2();  skipPortCheckArg=BooleanArgument.builder("skipPortCheck").shortIdentifier('S').description(INFO_DESCRIPTION_ENABLE_REPLICATION_SKIPPORT.get()).buildArgument();  noSchemaReplicationArg=BooleanArgument.builder("noSchemaReplication").description(INFO_DESCRIPTION_ENABLE_REPLICATION_NO_SCHEMA_REPLICATION.get()).buildArgument();  useSecondServerAsSchemaSourceArg=BooleanArgument.builder("useSecondServerAsSchemaSource").description(INFO_DESCRIPTION_ENABLE_REPLICATION_USE_SECOND_AS_SCHEMA_SOURCE.get("--" + noSchemaReplicationArg.getLongIdentifier())).buildArgument();  enableReplicationSubCmd=new SubCommand(this,ENABLE_REPLICATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_ENABLE_REPLICATION.get());  addArgumentsToSubCommand(enableReplicationSubCmd,server1.hostNameArg,server1.portArg,server1.bindDnArg,server1.bindPasswordArg,server1.bindPasswordFileArg,server1.replicationPortArg,server1.secureReplicationArg,server1.noReplicationServerArg,server1.onlyReplicationServerArg,server2.hostNameArg,server2.portArg,server2.bindDnArg,server2.bindPasswordArg,server2.bindPasswordFileArg,server2.replicationPortArg,server2.secureReplicationArg,server2.noReplicationServerArg,server2.onlyReplicationServerArg,skipPortCheckArg,noSchemaReplicationArg,useSecondServerAsSchemaSourceArg);}  }
class C{  public JTextField(String text){  this(null,text,0);}  }
class C{  public void add(int index,PdfObject element){  list.add(index,element);}  }
class C{  boolean canBeWalkedInNaturalDocOrderStatic(){  if (null != m_firstWalker) {    AxesWalker walker=m_firstWalker;    int prevAxis=-1;    boolean prevIsSimpleDownAxis=true;    for (int i=0; null != walker; i++) {      int axis=walker.getAxis();      if (walker.isDocOrdered()) {        boolean isSimpleDownAxis=((axis == Axis.CHILD) || (axis == Axis.SELF) || (axis == Axis.ROOT));        if (isSimpleDownAxis || (axis == -1))         walker=walker.getNextWalker(); else {          boolean isLastWalker=(null == walker.getNextWalker());          if (isLastWalker) {            if (walker.isDocOrdered() && (axis == Axis.DESCENDANT || axis == Axis.DESCENDANTORSELF || axis == Axis.DESCENDANTSFROMROOT || axis == Axis.DESCENDANTSORSELFFROMROOT) || (axis == Axis.ATTRIBUTE))             return true;          }          return false;        }      } else       return false;    }    return true;  }  return false;}  }
class C{  public SOAPClientException(String className,String exceptionMessage){  super(exceptionMessage);  this.className=className;  message=exceptionMessage;}  }
class C{  public INV_POLICY(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public boolean isCanceled(){  return isCanceled;}  }
class C{  public LoginIPHostAttribute(int hostAddr){  super(OctetUtils.toOctets(AttributeType.LOGIN_IP_HOST,hostAddr));  this.hostAddr=hostAddr;}  }
class C{  public static void validateType(CoreTokenField field,Object value) throws CoreTokenException {  if (value == null) {    throw new CoreTokenException(MessageFormat.format("\n" + CoreTokenConstants.DEBUG_HEADER + "Value field cannot be null!"+ "Key: {0}:{1}",CoreTokenField.class.getSimpleName(),field.name()));  }  Class<?> expectedType;  if (isString(field)) {    expectedType=String.class;  } else   if (isInteger(field)) {    expectedType=Integer.class;  } else   if (isCalendar(field)) {    expectedType=Calendar.class;  } else   if (isByteArray(field)) {    expectedType=byte[].class;  } else {    throw new IllegalStateException("Unknown field: " + field.name());  }  if (!expectedType.isAssignableFrom(value.getClass())) {    throw new CoreTokenException(MessageFormat.format("\n" + CoreTokenConstants.DEBUG_HEADER + "Value was not the correct type:\n"+ "           Key: {0}:{1}\n"+ "Required Class: {2}"+ "  Actual Class: {3}",CoreTokenField.class.getSimpleName(),field.name(),expectedType.getName(),value.getClass().getName()));  }}  }
class C{  private GroovyShell $getShell(){  return CpsThreadGroup.current().getExecution().getShell();}  }
class C{  public static String ensureRight(final String value,final String suffix,boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return endsWith(value,suffix,caseSensitive) ? value : append(value,suffix);}  }
class C{  private static void filterServersWithSameGroupId(RSEvaluations evals,int localServerId,byte groupId){  final LocalEvaluation eval=new LocalEvaluation();  for (  Entry<Integer,ReplicationServerInfo> entry : evals.bestRSs.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    if (rsInfo.getGroupId() == groupId) {      eval.accept(rsId,rsInfo);    } else {      eval.reject(rsInfo,NOTE_RS_HAS_DIFFERENT_GROUP_ID_THAN_DS.get(rsId,rsInfo.getGroupId(),localServerId,groupId));    }  }  evals.keepBest(eval);}  }
class C{  public boolean replaceEdit(UndoableEdit anEdit){  return false;}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public String encodeBody(){  return this.getHeaderValue();}  }
class C{  public static void writeToFile(String file,String content) throws IOException {  FileOutputStream fout=null;  try {    fout=new FileOutputStream(file);    fout.write(content.getBytes());  }  finally {    if (fout != null) {      try {        fout.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public void testFlipBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=191;  byte rBytes[]={-1,127,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void reset(String realm,String config){  configData=null;  xmlValue=null;  initialize(realm,config);}  }
class C{  public static void executeRandomModifiableVariableModification(WorkflowTrace workflow,ConnectionEnd connectionEnd,List<ModifiableVariableProperty.Type> allowedTypes,List<ModifiableVariableProperty.Format> allowedFormats,String whitelistRegex,String blacklistRegex){  Field f=null;  ModifiableVariableHolder holder=null;  if (workflow.getClientMessages().isEmpty()) {    return;  }  while (f == null) {    holder=getRandomModifiableVariableHolder(workflow,connectionEnd);    Field randomField=holder.getRandomModifiableVariableField();    if (isModifiableVariableModificationAllowed(randomField,allowedTypes,allowedFormats,whitelistRegex,blacklistRegex)) {      f=randomField;    }  }  LOGGER.debug("Executing random variable modification on field {}",f);  executeModifiableVariableModification(holder,f);}  }
class C{  public RecurringTask entryToRecurringTask(Entry entry) throws DirectoryException {  return new RecurringTask(serverContext,this,entry);}  }
class C{  protected final Object[] copyChildren(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  public void submit(DispatcherTask dispatcherTask){  submit(DEFAULT_QUEUE_NAME,dispatcherTask);}  }
class C{  public void onSwitchCamera(View v){  if (mWZCameraView == null)   return;  mBtnTorch.setState(false);  mBtnTorch.setEnabled(false);  WZCamera newCamera=mWZCameraView.switchCamera();  if (newCamera != null) {    if (newCamera.hasCapability(WZCamera.FOCUS_MODE_CONTINUOUS))     newCamera.setFocusMode(WZCamera.FOCUS_MODE_CONTINUOUS);    boolean hasTorch=newCamera.hasCapability(WZCamera.TORCH);    if (hasTorch) {      mBtnTorch.setState(newCamera.isTorchOn());      mBtnTorch.setEnabled(true);    }  }}  }
class C{  public void mouseReleased(MouseEvent e){  if (!e.isConsumed() && shouldHandleRelease && SwingUtilities.isLeftMouseButton(e)) {    adjustCaretAndFocus(e);  }}  }
class C{  private void initDocument(File file) throws Exception {  setRawTokens(getParser().parse(new InputStreamReader(new FileInputStream(file))));  initXMLTree();  ArrayList rawTokens=getRawTokens();  Iterator it=rawTokens.iterator();  while (it.hasNext()) {    Token nextToken=(Token)it.next();    if (nextToken instanceof DoctypeToken) {      setDoctypeTokenIndex(nextToken.getTokenIndex());      break;    }  }}  }
class C{  public boolean containsKey(Class<?> category){  return category != null && AttributeSetUtilities.verifyAttributeCategory(category,Attribute.class) != null && attrMap.get(category) != null;}  }
class C{  public Base64PasswordStorageScheme(){  super();}  }
class C{  @Deprecated public String toString(){  return name;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  public ResourceAccessStatement(EncryptedResourceID encryptedResourceID,ProxySubject proxySubject,SessionContext sessionContext,Subject subject) throws SAMLException {  if (subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _encryptedResourceID=encryptedResourceID;  _proxySubject=proxySubject;  _sessionContext=sessionContext;}  }
class C{  public static byte[] flateDecode(byte[] in,boolean strict){  ByteArrayInputStream stream=new ByteArrayInputStream(in);  InflaterInputStream zip=new InflaterInputStream(stream);  ByteArrayOutputStream out=new ByteArrayOutputStream();  byte[] b=new byte[strict ? 4092 : 1];  try {    int n;    while ((n=zip.read(b)) >= 0) {      out.write(b,0,n);    }    zip.close();    out.close();    return out.toByteArray();  } catch (  Exception e) {    if (strict)     return null;    return out.toByteArray();  }}  }
class C{  public JRadioButton(){  this(null,null,false);}  }
class C{  public Object parse(InputStream xmlin) throws Exception {  DocumentBuilder db=null;  try {    db=XMLUtils.getSafeDocumentBuilder(false);  } catch (  ParserConfigurationException e) {    throw new Exception("DBG:Got ParserConfigurationException:" + e.toString());  }  Document doc=null;  try {    doc=db.parse(xmlin);  } catch (  SAXParseException e) {    throw new Exception("DBG:Got SAXParseException:" + e.toString() + "line:"+ e.getLineNumber()+ " col :"+ e.getColumnNumber());  }catch (  SAXException e) {    throw new Exception("DBG:Got SAXException:" + e.toString());  }catch (  IOException ex) {    throw new Exception("DBG: Got IOException:" + ex.toString());  }  Element elem=doc.getDocumentElement();  return (walkTree(elem));}  }
class C{  public static synchronized void removeProvider(int providerNumber){  Provider p=providers.remove(providerNumber - 1);  providersNames.remove(p.getName());  setNeedRefresh();}  }
class C{  public SessionInfo refresh(Session session,boolean reset) throws SessionException {  SessionID sessionID=session.getID();  if (debug.messageEnabled()) {    debug.message(MessageFormat.format("Local fetch SessionInfo for {0}\n" + "Reset: {1}",sessionID.toString(),reset));  }  return getSessionInfo(sessionID,reset);}  }
class C{  @BeforeTest(groups={"cli-authconfig"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"amadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public void writeCaptureData(String filename) throws IOException {  FileOutputStream fos=new FileOutputStream(filename);  ASN1Writer writer=ASN1.getWriter(fos);  try {    if (captureStartTime < 0) {      captureStartTime=System.currentTimeMillis();      captureStopTime=captureStartTime;    } else     if (captureStopTime < 0) {      captureStopTime=System.currentTimeMillis();    }    writer.writeStartSequence();    writer.writeInteger(numIntervals);    writer.writeInteger(captureStartTime);    writer.writeInteger(captureStopTime);    writer.writeEndSequence();    for (    ProfileStack s : stackTraces.keySet()) {      s.write(writer);      writer.writeInteger(stackTraces.get(s));    }  }  finally {    close(writer,fos);  }}  }
class C{  public static boolean isSessionUpgradeOrForceAuth(HttpServletRequest request){  Hashtable reqDataHash=parseRequestParameters(request);  boolean isForceAuth=forceAuthFlagExists(reqDataHash);  if (!isForceAuth) {    try {      SSOTokenManager tokenManager=SSOTokenManager.getInstance();      SSOToken token=tokenManager.createSSOToken(request);      return checkSessionUpgrade(token,reqDataHash);    } catch (    SSOException ssoe) {      if (utilDebug.messageEnabled()) {        utilDebug.message("Unable to create sso token for isSessionUpgrade check: ",ssoe);      }    }  }  return isForceAuth;}  }
class C{  public CommunicationException(){  super();}  }
class C{  public void cancel(){  canceled=true;  if (engine != null)   engine.cancel();}  }
class C{  public String registerCallbackHandler(SSOToken token,SMSObjectListener changeListener) throws SMSException, SSOException {  return eventManager.addObjectChangeListener(changeListener);}  }
class C{  public PWResetException(String msg){  super(msg);  errList=new ArrayList(1);  errList.add(msg);}  }
class C{  public static String removeNewLineChars(String s){  String retString=null;  if ((s != null) && (s.length() > 0) && (s.indexOf('\n') != -1)) {    char[] chars=s.toCharArray();    int len=chars.length;    StringBuffer sb=new StringBuffer(len);    for (int i=0; i < len; i++) {      char c=chars[i];      if (c != '\n') {        sb.append(c);      }    }    retString=sb.toString();  } else {    retString=s;  }  return retString;}  }
class C{  private boolean isResourceTypeUsed(Subject subject,String realm,String uuid) throws EntitlementException {  SSOToken token=SubjectUtils.getSSOToken(subject);  try {    String filter=MessageFormat.format(REFERENCE_FILTER,uuid);    @SuppressWarnings("unchecked") Set<String> dnEntries=SMSEntry.search(token,dnHelper.orgNameToDN(realm),filter,0,0,false,false);    for (    String dnEntry : dnEntries) {      if (dnEntry.contains(EntitlementUtils.INDEXES_NAME)) {        return true;      }      if (dnEntry.contains(EntitlementUtils.SERVICE_NAME)) {        return true;      }    }    return false;  } catch (  SMSException smsE) {    throw new EntitlementException(EntitlementException.INTERNAL_ERROR,smsE);  }}  }
class C{  public static SessionResponse parseXML(String xml) throws SessionException {  SessionResponseParser parser=new SessionResponseParser(xml);  return parser.parseXML();}  }
class C{  public PlaPointFloat board_to_user(PlaPointFloat p_point){  return new PlaPointFloat(board_to_user(p_point.v_x),board_to_user(p_point.v_y));}  }
class C{  public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.insertUpdate(e,a,f);  }}  }
class C{  public MockConstraint(boolean isUsable,boolean isDeleteAllowed,ConfigurationRepository configRepository){  this.isUsable=isUsable;  this.isDeleteAllowed=isDeleteAllowed;  this.configRepository=configRepository;}  }
class C{  public ExpectedObject(TLongHashSet objectIDs){  this.objectID=-1;  this.expectedArgument=-1;  this.objectIDs=objectIDs;}  }
class C{  private void parseFieldsAndMethodsForClass(SClassDef sClassDef,List<Statement> statements,List<Import> imports) throws SyntaxException {  List<AST.StaticScope> staticScopes=new ArrayList<>();  for (  Statement stmt : statements) {    if (stmt instanceof AST.StaticScope) {      staticScopes.add((AST.StaticScope)stmt);    } else     if (stmt instanceof VariableDef) {      parseField((VariableDef)stmt,sClassDef,imports,PARSING_CLASS,false,false);    } else     if (stmt instanceof MethodDef) {      MethodDef methodDef=(MethodDef)stmt;      int generateIndex=-1;      for (      VariableDef v : methodDef.params) {        if (v.getInit() == null) {          ++generateIndex;        } else         break;      }      SMethodDef lastMethod=null;      for (int i=methodDef.params.size(); i > generateIndex; --i) {        parseMethod((MethodDef)stmt,i,sClassDef,lastMethod,imports,PARSING_CLASS,false);        lastMethod=sClassDef.methods().get(sClassDef.methods().size() - 1);        methodToStatements.put(lastMethod,methodDef.body);      }    }  }  for (  AST.StaticScope scope : staticScopes) {    for (    Statement stmt : scope.statements) {      if (stmt instanceof VariableDef) {        parseField((VariableDef)stmt,sClassDef,imports,PARSING_CLASS,true,false);      } else       if (stmt instanceof MethodDef) {        MethodDef methodDef=(MethodDef)stmt;        int generateIndex=-1;        for (        VariableDef v : methodDef.params) {          if (v.getInit() == null) {            ++generateIndex;          } else           break;        }        SMethodDef lastMethod=null;        for (int i=methodDef.params.size(); i > generateIndex; --i) {          parseMethod((MethodDef)stmt,i,sClassDef,lastMethod,imports,PARSING_CLASS,true);          lastMethod=sClassDef.methods().get(sClassDef.methods().size() - 1);          methodToStatements.put(lastMethod,methodDef.body);        }      }    }  }}  }
class C{  public static Certificate issuer(KeyStore keyStore,Certificate c) throws Exception {  if (!(c instanceof X509Certificate)) {    throw new IllegalStateException("issuer requires an X509Certificate, found " + c);  }  X509Certificate cert=(X509Certificate)c;  Certificate found=null;  for (  String alias : Collections.list(keyStore.aliases())) {    if (!keyStore.entryInstanceOf(alias,TrustedCertificateEntry.class)) {      continue;    }    TrustedCertificateEntry certificateEntry=(TrustedCertificateEntry)keyStore.getEntry(alias,null);    Certificate certificate=certificateEntry.getTrustedCertificate();    if (!(certificate instanceof X509Certificate)) {      continue;    }    X509Certificate x=(X509Certificate)certificate;    if (!cert.getIssuerDN().equals(x.getSubjectDN())) {      continue;    }    if (found != null) {      throw new IllegalStateException("KeyStore has more than one issuing CA for " + cert + "\nfirst: "+ found+ "\nsecond: "+ certificate);    }    found=certificate;  }  if (found == null) {    throw new IllegalStateException("KeyStore contained no issuing CA for " + cert);  }  return found;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ID3v11Tag)) {    return false;  }  ID3v11Tag object=(ID3v11Tag)obj;  return this.track == object.track && super.equals(obj);}  }
class C{  @Override public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  public ReconContext(final JsonValue savedContext,final ClassLoader classLoader){  super(savedContext,classLoader);}  }
class C{  public JMenuItem add(String s){  return add(new JMenuItem(s));}  }
class C{  public static Animator heartbeatExpandAnimator(int duration){  AnimatorSet animatorSet=new AnimatorSet();  ObjectAnimator xExpandAnimator=new ObjectAnimator();  xExpandAnimator.setPropertyName("scaleX");  xExpandAnimator.setFloatValues(0.5f,1.0f);  ObjectAnimator yExpandAnimator=new ObjectAnimator();  yExpandAnimator.setPropertyName("scaleY");  yExpandAnimator.setFloatValues(0.5f,1.0f);  animatorSet.play(xExpandAnimator).with(yExpandAnimator);  animatorSet.setDuration(duration);  animatorSet.setInterpolator(new DampingInterpolator());  return animatorSet;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS13.class,args);}  }
class C{  public final boolean isEmpty(){  return this.problems.isEmpty();}  }
class C{  public static Foo fetchByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public InteractionRequiredException(final OAuth2Constants.UrlLocation parameterLocation){  super(400,"interaction_required","The request requires some interaction that is not allowed.",parameterLocation);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  static Object find(String factoryId,String defaultClassName,boolean tryFallback) throws SOAPException {  ClassLoader classLoader;  try {    classLoader=Thread.currentThread().getContextClassLoader();  } catch (  Exception x) {    throw new SOAPException(x.toString(),x);  }  try {    String systemProp=System.getProperty(factoryId);    if (systemProp != null) {      return newInstance(systemProp,classLoader);    }  } catch (  SecurityException se) {  }  try {    String javah=System.getProperty("java.home");    String configFile=javah + File.separator + "lib"+ File.separator+ "jaxm.properties";    File f=new File(configFile);    if (f.exists()) {      Properties props=new Properties();      props.load(new FileInputStream(f));      String factoryClassName=props.getProperty(factoryId);      return newInstance(factoryClassName,classLoader);    }  } catch (  Exception ex) {  }  String serviceId="META-INF/services/" + factoryId;  try {    InputStream is=null;    if (classLoader == null) {      is=ClassLoader.getSystemResourceAsStream(serviceId);    } else {      is=classLoader.getResourceAsStream(serviceId);    }    if (is != null) {      BufferedReader rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));      String factoryClassName=rd.readLine();      rd.close();      if (factoryClassName != null && !"".equals(factoryClassName)) {        return newInstance(factoryClassName,classLoader);      }    }  } catch (  Exception ex) {  }  if (!tryFallback)   return null;  if (defaultClassName == null) {    throw new SOAPException("Provider for " + factoryId + " cannot be found",null);  }  return newInstance(defaultClassName,classLoader);}  }
class C{  @Override public int compareTo(final Problem o){  final int ix=this.severity.ordinal();  final int oid=o.severity.ordinal();  return ix - oid;}  }
class C{  public void reset_doors(){  for (  ExpandRoomObstacle curr_room : expansion_room_arr) {    if (curr_room == null)     continue;    curr_room.reset_doors();  }}  }
class C{  public void changePassword(SSOToken token,String entryDN,String attrName,String oldPassword,String newPassword) throws AMException, SSOException {  try {    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));    po.changePassword(entryDN,attrName,oldPassword,newPassword);  } catch (  UMSException umex) {    debug.error("DirectoryServicesImpl.changePassword: ",umex);    throw new AMException(token,"362",umex);  }}  }
class C{  @Override public void destroy(){}  }
class C{  public Name child(final String name){  return new Name(this,name);}  }
class C{  public boolean equals(Object rhs){  if (rhs != null) {    try {      TransformAttribute that=(TransformAttribute)rhs;      if (transform == null) {        return that.transform == null;      }      return transform.equals(that.transform);    } catch (    ClassCastException e) {    }  }  return false;}  }
class C{  protected void deployApps(){  File appBase=host.getAppBaseFile();  File configBase=host.getConfigBaseFile();  String[] filteredAppPaths=filterAppPaths(appBase.list());  deployDescriptors(configBase,configBase.list());  deployWARs(appBase,filteredAppPaths);  deployDirectories(appBase,filteredAppPaths);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public Object decode(Object value) throws DecoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return decode((String)value);  } else {    throw new DecoderException("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec");  }}  }
class C{  private void modifyAttribute(String baseDN,ModificationType modType,String attrName,String attrValue) throws Exception {  ModifyOperation modifyOperation=getModifyOperation(baseDN,modType,attrName,attrValue);  assertEquals(modifyOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  private void readDomainsStateFile() throws ChangelogException {  final File domainsStateFile=new File(replicationRootPath,DOMAINS_STATE_FILENAME);  if (domainsStateFile.exists()) {    BufferedReader reader=null;    String line=null;    try {      reader=newFileReader(domainsStateFile);      while ((line=reader.readLine()) != null) {        final int separatorPos=line.indexOf(DOMAIN_STATE_SEPARATOR);        final String domainId=line.substring(0,separatorPos);        final DN domainDN=DN.valueOf(line.substring(separatorPos + 1));        domains.put(domainDN,domainId);      }    } catch (    LocalizedIllegalArgumentException e) {      throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_DECODE_DN_FROM_DOMAIN_STATE_FILE.get(domainsStateFile.getPath(),line),e);    }catch (    Exception e) {      throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_READ_DOMAIN_STATE_FILE.get(domainsStateFile.getPath()),e);    } finally {      StaticUtils.close(reader);    }  }}  }
class C{  public void updateUI(){  setUI((MenuBarUI)UIManager.getUI(this));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("WebappLoader[");  if (context != null)   sb.append(context.getName());  sb.append("]");  return (sb.toString());}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public void registerMonitoredDirectory(String instanceName,File directory,long lowThresholdBytes,long fullThresholdBytes,DiskSpaceMonitorHandler handler){  File fsMountPoint;  try {    fsMountPoint=getMountPoint(directory);  } catch (  IOException ioe) {    logger.warn(ERR_DISK_SPACE_GET_MOUNT_POINT,directory.getAbsolutePath(),ioe.getLocalizedMessage());    fsMountPoint=directory;  }  MonitoredDirectory newDSH=new MonitoredDirectory(directory,instanceName,INSTANCENAME,handler);  newDSH.setFullThreshold(fullThresholdBytes);  newDSH.setLowThreshold(lowThresholdBytes);synchronized (monitoredDirs) {    List<MonitoredDirectory> diskHelpers=monitoredDirs.get(fsMountPoint);    if (diskHelpers == null) {      monitoredDirs.put(fsMountPoint,newArrayList(newDSH));    } else {      for (      MonitoredDirectory elem : diskHelpers) {        if (elem.handler.equals(handler) && elem.getDirectory().equals(directory)) {          elem.setFullThreshold(fullThresholdBytes);          elem.setLowThreshold(lowThresholdBytes);          return;        }      }      diskHelpers.add(newDSH);    }    DirectoryServer.registerMonitorProvider(newDSH);  }}  }
class C{  public IntHolder(int initialVal){  if (initialVal < 0)   throw new RuntimeException("negative number");  mValue=initialVal;}  }
class C{  public void testKeyPairGenerator04() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < algs.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyPairGenerator.getInstance(algs[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public void test_equalsLjava_lang_Object(){  try {    MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test1");    MockAttributedCharacterIteratorAttribute mac2=new MockAttributedCharacterIteratorAttribute("test2");    assertFalse("Attributes are equal",mac2.equals(mac1));    TestAttributedCharacterIteratorAttribute mac3=new TestAttributedCharacterIteratorAttribute("test1");    assertFalse("Attributes are equal",mac3.equals(mac1));    AttributedCharacterIterator.Attribute mac4=mac1;    assertTrue("Attributes are non-equal",mac4.equals(mac1));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public DSAPublicKeyImpl(X509EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  SubjectPublicKeyInfo subjectPublicKeyInfo=null;  byte[] encoding=keySpec.getEncoded();  String alg, algName;  try {    subjectPublicKeyInfo=(SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    y=new BigInteger((byte[])ASN1Integer.getInstance().decode(subjectPublicKeyInfo.getSubjectPublicKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=subjectPublicKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=(DSAParams)(new DSAParameterSpec(p,q,g));  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  private static long pow(long x,long y){  int j=1;  long k=x;  if (y == 0) {    return 1;  }  if (y == 1) {    return x;  }  while (j < y) {    k=k * x;    j++;  }  return k;}  }
class C{  public DITCacheMapEntry(DN key,T value){  this.key=key;  this.value=value;}  }
class C{  public PWResetInvalidURLViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  public void fillXfaForm(Node node,boolean readOnly){  if (readOnly) {    NodeList nodeList=domDocument.getElementsByTagName("field");    for (int i=0; i < nodeList.getLength(); i++) {      ((Element)nodeList.item(i)).setAttribute("access","readOnly");    }  }  NodeList allChilds=datasetsNode.getChildNodes();  int len=allChilds.getLength();  Node data=null;  for (int k=0; k < len; ++k) {    Node n=allChilds.item(k);    if (n.getNodeType() == Node.ELEMENT_NODE && n.getLocalName().equals("data") && XFA_DATA_SCHEMA.equals(n.getNamespaceURI())) {      data=n;      break;    }  }  if (data == null) {    data=datasetsNode.getOwnerDocument().createElementNS(XFA_DATA_SCHEMA,"xfa:data");    datasetsNode.appendChild(data);  }  NodeList list=data.getChildNodes();  if (list.getLength() == 0) {    data.appendChild(domDocument.importNode(node,true));  } else {    Node firstNode=getFirstElementNode(data);    if (firstNode != null)     data.replaceChild(domDocument.importNode(node,true),firstNode);  }  extractNodes();}  }
class C{  public int size(){  return 0;}  }
class C{  @Override protected Map<String,Object> generateConfig(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  try {    final String tokenIdleTime=ssoToken.getProperty(JwtSessionModule.TOKEN_IDLE_TIME_IN_MINUTES_CLAIM_KEY);    final String maxTokenLife=ssoToken.getProperty(JwtSessionModule.MAX_TOKEN_LIFE_IN_MINUTES_KEY);    final boolean enforceClientIP=Boolean.parseBoolean(ssoToken.getProperty(ENFORCE_CLIENT_IP_SETTING_KEY));    final String realm=ssoToken.getProperty(SSO_TOKEN_ORGANIZATION_PROPERTY_KEY);    boolean secureCookie=Boolean.parseBoolean(ssoToken.getProperty(SECURE_COOKIE_KEY));    boolean httpOnlyCookie=Boolean.parseBoolean(ssoToken.getProperty(HTTP_ONLY_COOKIE_KEY));    String cookieName=ssoToken.getProperty(COOKIE_NAME_KEY);    String cookieDomainsString=ssoToken.getProperty(COOKIE_DOMAINS_KEY);    Collection<String> cookieDomains;    if (cookieDomainsString.isEmpty()) {      cookieDomains=Collections.singleton(null);    } else {      cookieDomains=Arrays.asList(cookieDomainsString.split(","));    }    final String hmacKey=AccessController.doPrivileged(new DecodeAction(ssoToken.getProperty(HMAC_KEY)));    ssoToken.setProperty(HMAC_KEY,"");    return persistentCookieModuleWrapper.generateConfig(tokenIdleTime,maxTokenLife,enforceClientIP,realm,secureCookie,httpOnlyCookie,cookieName,cookieDomains,hmacKey);  } catch (  SSOException|SMSException e) {    DEBUG.error("Could not initialise the Auth Module",e);    throw new AuthenticationException(e.getLocalizedMessage());  }}  }
class C{  public void endHeaders(){  headerBuffer[pos++]=Constants.CR;  headerBuffer[pos++]=Constants.LF;}  }
class C{  public final void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){  int compensated_half_width=p_obj.get_half_width() + get_clearance_compensation(p_obj.clearance_idx(),p_obj.get_layer());  ArrayList<ShapeTile> changed_shapes=offset_shapes(p_new_polyline,compensated_half_width,p_keep_at_start_count,p_new_polyline.plaline_len(-1) - p_keep_at_end_count);  int old_shape_count=p_obj.tree_shape_count(this);  int new_shape_count=changed_shapes.size() + p_keep_at_start_count + p_keep_at_end_count;  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];  AwtreeNodeLeaf[] old_entries=p_obj.get_search_tree_entries(this);  for (int index=0; index < p_keep_at_start_count; ++index) {    new_leaf_arr[index]=old_entries[index];    new_precalculated_tree_shapes[index]=p_obj.get_tree_shape(this,index);  }  for (int index=p_keep_at_start_count; index < old_shape_count - p_keep_at_end_count; ++index) {    remove_leaf(old_entries[index]);  }  for (int i=0; i < p_keep_at_end_count; ++i) {    int new_index=new_shape_count - p_keep_at_end_count + i;    int old_index=old_shape_count - p_keep_at_end_count + i;    new_leaf_arr[new_index]=old_entries[old_index];    new_leaf_arr[new_index].shape_index_in_object=new_index;    new_precalculated_tree_shapes[new_index]=p_obj.get_tree_shape(this,old_index);  }  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {    new_precalculated_tree_shapes[index]=changed_shapes.get(index - p_keep_at_start_count);  }  p_obj.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {    new_leaf_arr[index]=insert(p_obj,index);  }  p_obj.set_search_tree_entries(this,new_leaf_arr);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeAttributeNS01.class,args);}  }
class C{  @Deprecated public SkeletonMismatchException(String s){  super(s);}  }
class C{  public synchronized void startDispatcher(){  try {    taskExecutor.start();  } catch (  DataLayerException e) {    throw new IllegalStateException("Could not start task executor",e);  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_countMatchPattern)   m_countMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_format_avt)   m_format_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_fromMatchPattern)   m_fromMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSeparator_avt)   m_groupingSeparator_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSize_avt)   m_groupingSize_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lettervalue_avt)   m_lettervalue_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_valueExpr)   m_valueExpr.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  protected void enableCorsSupport(Router router){  Set<String> allowHeaders=new HashSet<>();  allowHeaders.add("x-requested-with");  allowHeaders.add("Access-Control-Allow-Origin");  allowHeaders.add("origin");  allowHeaders.add("Content-Type");  allowHeaders.add("accept");  Set<HttpMethod> allowMethods=new HashSet<>();  allowMethods.add(HttpMethod.GET);  allowMethods.add(HttpMethod.POST);  allowMethods.add(HttpMethod.DELETE);  allowMethods.add(HttpMethod.PATCH);  router.route().handler(CorsHandler.create("*").allowedHeaders(allowHeaders).allowedMethods(allowMethods));}  }
class C{  @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  public List<StringBuilder> toLDIF(){  List<StringBuilder> ldifLines=new LinkedList<>();  StringBuilder dnLine=new StringBuilder("dn");  appendLDIFSeparatorAndValue(dnLine,ByteString.valueOfUtf8(dn.toString()));  ldifLines.add(dnLine);  for (  String s : objectClasses.values()) {    StringBuilder ocLine=new StringBuilder("objectClass: ").append(s);    ldifLines.add(ocLine);  }  addLinesForAttributes(ldifLines,userAttributes);  addLinesForAttributes(ldifLines,operationalAttributes);  return ldifLines;}  }
class C{  private boolean isInsideCastle(){  Shape intersection=SVGPath.intersect(spriteBoundsArray[5],SpriteHandler.getCurrentCast().get(0).getSpriteBoundsArray()[4]);  return intersection.getBoundsInParent().getWidth() != -1;}  }
class C{  public void finish() throws IOException {  checkClosed();  write();}  }
class C{  private void buildReturn(MethodVisitor methodVisitor,CodeInfo info,Ins.TReturn tReturn){  if (tReturn.returnIns() == Ins.TReturn.Return) {    methodVisitor.visitInsn(Opcodes.RETURN);  } else {    buildValueAccess(methodVisitor,info,tReturn.value(),true);    methodVisitor.visitInsn(tReturn.returnIns());    info.pop(1);  }}  }
class C{  @DataProvider(name="createStartSessionData") public Object[][] createStartSessionData(){  List<String> urls1=new ArrayList<>();  urls1.add("ldap://ldap.iplanet.com/" + TEST_ROOT_DN_STRING + "??sub?(sn=Jensen)");  urls1.add("ldaps://ldap.iplanet.com:4041/uid=bjensen,ou=People," + TEST_ROOT_DN_STRING + "?cn,mail,telephoneNumber");  List<String> urls2=new ArrayList<>();  urls2.add("ldap://ldap.example.com/" + TEST_ROOT_DN_STRING + "?objectClass?one");  urls2.add("ldap://host.example.com/ou=people," + TEST_ROOT_DN_STRING + "???(sn=a*)");  List<String> urls3=new ArrayList<>();  urls3.add("ldaps://host:port/dc=foo??sub?(sn=John Doe)");  urls3.add("ldap://jnumail1.state.ak.us/o=state.ak.us?mail,departmentnumber" + "?sub?(&(departmentnumber=04*) (l=Juneau))");  List<String> urls4=new ArrayList<>();  List<String> urls5=new ArrayList<>();  urls5.add("ldaps://host:port/dc=foo??sub?(sn=One Entry)");  List<String> urls6=new ArrayList<>();  urls6.add("ldaps://host:port/dc=foo??sub?(sn=One Entry)");  urls6.add("ldaps://host:port/dc=foo??sub?(sn=Second Entry)");  urls6.add("ldaps://host:port/dc=foo??sub?(sn=Third Entry)");  urls6.add("ldaps://host:port/dc=foo??sub?(sn=Fourth Entry)");  urls6.add("ldaps://host:port/dc=foo??sub?(sn=Fifth Entry)");  Set<String> a1=newHashSet();  Set<String> a2=newHashSet("dc");  Set<String> a3=newHashSet("dc","uid");  return new Object[][]{{ServerStatus.NORMAL_STATUS,urls1,true,SAFE_DATA_MODE,(byte)1,a1},{ServerStatus.DEGRADED_STATUS,urls2,false,SAFE_READ_MODE,(byte)123,a2},{ServerStatus.FULL_UPDATE_STATUS,urls3,false,SAFE_DATA_MODE,(byte)111,a3},{ServerStatus.NORMAL_STATUS,urls4,true,SAFE_READ_MODE,(byte)-1,a1},{ServerStatus.DEGRADED_STATUS,urls5,true,SAFE_DATA_MODE,(byte)97,a2},{ServerStatus.FULL_UPDATE_STATUS,urls6,false,SAFE_READ_MODE,(byte)-13,a3}};}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  Node secondPart;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(7);  secondPart=textNode.getNextSibling();  value=secondPart.getNodeValue();  assertEquals("textSplitTextOneAssert","Jones",value);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static boolean displayConfirmation(Component parent,LocalizableMessage msg,LocalizableMessage title){  return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(parent,wrapMsg(String.valueOf(msg),100),String.valueOf(title),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @Override public void onStart(Intent intent,int id){  addGlobalAttributesToIntent(intent);  Event event=IntentParser.getEvent(intent);  if (event != null) {    CoreEventLogsDbHelper coreEventLogsDbHelper=new CoreEventLogsDbHelper(this);    EventLog logEvent=new EventLog(event);    Long logID=coreEventLogsDbHelper.insert(logEvent);    coreEventLogsDbHelper.close();    logEvent.setID(logID);    if (throttled()) {      return;    }    CoreRulesDbHelper coreRuleDbHelper=new CoreRulesDbHelper(this);    CoreActionsDbHelper coreActionsDbHelper=new CoreActionsDbHelper(this);    CoreActionLogsDbHelper coreActionLogsDbHelper=new CoreActionLogsDbHelper(this);    ArrayList<Action> actions=RuleProcessor.getActions(event,coreRuleDbHelper,coreActionsDbHelper);    coreActionsDbHelper.close();    coreRuleDbHelper.close();    for (    Action action : actions) {      ActionLog logAction=new ActionLog(action,logEvent.getID());      coreActionLogsDbHelper.insert(logAction);    }    coreActionLogsDbHelper.close();    CoreGeneralLogsDbHelper coreGeneralLogsDbHelper=new CoreGeneralLogsDbHelper(this);    GeneralLog generalLog=new GeneralLog(TAG + " got " + actions.size()+ " action(s) for event "+ intent.getAction(),Logger.INFO);    coreGeneralLogsDbHelper.insert(generalLog);    coreGeneralLogsDbHelper.close();    Logger.d(TAG,"got " + actions.size() + " action(s) for event "+ intent.getAction());    try {      ActionExecuter.executeActions(this,actions);    } catch (    OmnidroidException e) {      Logger.w(TAG,e.toString(),e);      Logger.w(TAG,e.getLocalizedMessage());      Logger.w(TAG,"Illegal Execution Method");    } finally {      actions.clear();    }    FailedActionsDbHelper failedActionsDbHelper=new FailedActionsDbHelper(this);    if (event.getEventName().equals(InternetAvailableEvent.EVENT_NAME)) {      actions=failedActionsDbHelper.getActions(ResultProcessor.RESULT_FAILURE_INTERNET);    } else     if (event.getEventName().equals(ServiceAvailableEvent.EVENT_NAME)) {      actions=failedActionsDbHelper.getActions(ResultProcessor.RESULT_FAILURE_SERVICE);    } else     if (event.getEventName().equals(TimeTickEvent.EVENT_NAME)) {      failedActionsDbHelper.deleteOldActions();      actions=failedActionsDbHelper.getActions(ResultProcessor.RESULT_FAILURE_UNKNOWN);    }    failedActionsDbHelper.close();    try {      Logger.i(TAG,"Retrying to execute queued actions");      ActionExecuter.executeActions(this,actions);      ;    } catch (    OmnidroidException e) {      Logger.w(TAG,e.toString(),e);    }  }  stopSelf();}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode10.class,args);}  }
class C{  public void close(boolean force) throws IOException {  if (isOpen() || force)   close();}  }
class C{  public PdfAConformanceException(String message,Object object){  super(message,object);}  }
class C{  public boolean containsKey(String key){  if ((key == null) || (key.trim().equals(""))) {    return false;  }  return contents.containsKey(key);}  }
class C{  public String toString(){  if (tag == ARRAY) {    StringBuilder sb=new StringBuilder(80);    sb.append(name).append("=[");    int len=Array.getLength(value);    for (int i=0; i < len; i++) {      if (i != 0)       sb.append(", ");      sb.append(Array.get(value,i));    }    return sb.append("]").toString();  } else {    return name + "=" + value;  }}  }
class C{  public void incIDPCounter(String realm,String idpName,String counter){  if (sSAML2Svc != null) {    sSAML2Svc.incIDPCounter(realm,idpName,counter);  }}  }
class C{  private Polyline reduce_lines(Polyline p_polyline){  if (p_polyline.plaline_len() < 6)   return p_polyline;  for (int index=2; index < p_polyline.plaline_len(-2); ++index) {    PlaPointFloat prev_corner=p_polyline.corner_approx(index - 2);    if (prev_corner.is_NaN())     continue;    PlaPointFloat next_corner=p_polyline.corner_approx(index + 1);    if (next_corner.is_NaN())     continue;    PlaLineInt translate_line=p_polyline.plaline(index);    double prev_dist=translate_line.distance_signed(prev_corner);    double next_dist=translate_line.distance_signed(next_corner);    if (Signum.of(prev_dist) != Signum.of(next_dist))     continue;    double translate_dist;    if (Math.abs(prev_dist) < Math.abs(next_dist)) {      translate_dist=prev_dist;    } else {      translate_dist=next_dist;    }    if (translate_dist == 0)     continue;    PlaSide line_side=translate_line.side_of(prev_corner);    PlaLineInt new_line=translate_line.translate(-translate_dist);    int sign=Signum.as_int(translate_dist);    PlaSide new_line_side_of_prev_corner=new_line.side_of(prev_corner);    PlaSide new_line_side_of_next_corner=new_line.side_of(next_corner);    while (new_line_side_of_prev_corner == line_side && new_line_side_of_next_corner == line_side) {      translate_dist+=sign * 0.5;      new_line=translate_line.translate(-translate_dist);      new_line_side_of_prev_corner=new_line.side_of(prev_corner);      new_line_side_of_next_corner=new_line.side_of(next_corner);    }    int crossed_corners_before_count=0;    int crossed_corners_after_count=0;    if (new_line_side_of_prev_corner != line_side)     crossed_corners_before_count++;    if (new_line_side_of_next_corner != line_side)     crossed_corners_after_count++;    if (crossed_corners_before_count > 1 || crossed_corners_after_count > 1) {      continue;    }    if (crossed_corners_before_count > 0) {      if (index < 3)       continue;      PlaPointFloat prev_prev_corner=p_polyline.corner_approx(index - 3);      if (new_line.side_of(prev_prev_corner) != line_side)       continue;    }    if (crossed_corners_after_count > 0) {      if (index >= p_polyline.plaline_len(-3))       continue;      PlaPointFloat next_next_corner=p_polyline.corner_approx(index + 2);      if (new_line.side_of(next_next_corner) != line_side)       continue;    }    PlaLineIntAlist curr_lines=new PlaLineIntAlist(p_polyline.plaline_len());    int keep_before_ind=index - crossed_corners_before_count;    p_polyline.alist_append_to(curr_lines,0,keep_before_ind);    curr_lines.add(new_line);    p_polyline.alist_append_to(curr_lines,index + 1 + crossed_corners_after_count);    Polyline try_poly=new Polyline(curr_lines);    boolean check_ok=false;    if (try_poly.plaline_len() == curr_lines.size()) {      ShapeTile shape_to_check=try_poly.offset_shape(curr_half_width,keep_before_ind - 1);      check_ok=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);    }    if (!check_ok)     continue;    r_board.changed_area.join(prev_corner,curr_layer);    r_board.changed_area.join(next_corner,curr_layer);    p_polyline=try_poly;  }  return p_polyline;}  }
class C{  @Override protected ReconAuditEventBuilder applyCustomFields(ReconAuditEventBuilder builder){  return builder.reconciling(reconciling).ambiguousTargetIds(ambiguousTargetIds).reconAction(reconciliationServiceReconAction).entryType(entryType).reconId(reconId);}  }
class C{  private void updateAttrInConfig(BaseConfigType baseConfig,Map values,String role) throws JAXBException, AMConsoleException {  List attrList=baseConfig.getAttribute();  if (role.equals(EntityModel.IDENTITY_PROVIDER)) {    attrList.clear();    baseConfig=addAttributeType(getAllIDPExtendedMetaMap(),baseConfig);    attrList=baseConfig.getAttribute();  } else   if (role.equals(EntityModel.SERVICE_PROVIDER)) {    attrList.clear();    baseConfig=addAttributeType(getAllSPExtendedMetaMap(),baseConfig);    attrList=baseConfig.getAttribute();  }  for (Iterator it=attrList.iterator(); it.hasNext(); ) {    AttributeElement avpnew=(AttributeElement)it.next();    String name=avpnew.getName();    if (values.keySet().contains(name)) {      Set set=(Set)values.get(name);      if (set != null) {        avpnew.getValue().clear();        avpnew.getValue().addAll(set);      }    }  }}  }
class C{  int selectServer(int forceIndex){  int index=forceIndex == -1 ? getLessSaturatedIndex() : forceIndex;  serversCounters.incrementAndGet(index);  return index;}  }
class C{  public void testTestBitNegative3(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=300;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public OBJ_ADAPTER(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public void notify_new(BrdItem p_item){}  }
class C{  public SecurityAssertion(String assertionID,java.lang.String issuer,Date issueInstant,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,statements);}  }
class C{  public ID3v1TagField(byte[] raw) throws UnsupportedEncodingException {  String field=new String(raw,"ISO-8859-1");  int i=field.indexOf("=");  if (i == -1) {    this.id="ERRONEOUS";    this.content=field;  } else {    this.id=field.substring(0,i).toUpperCase();    if (field.length() > i) {      this.content=field.substring(i + 1);    } else {      this.content="";    }  }  checkCommon();}  }
class C{  public void clear(){  addrs.setSize(0);}  }
class C{  final int findMarkAdjustIndex(int searchIndex){  search.index=Math.max(searchIndex,1);  int index=findSortIndex(search);  for (int i=index - 1; i >= 0; i--) {    MarkData d=marks.elementAt(i);    if (d.index != search.index) {      break;    }    index-=1;  }  return index;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5,String criteria6){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5,criteria6});}  }
class C{  public Wood(final Material type){  this(type,DEFAULT_SPECIES);}  }
class C{  @Override public int read(ByteBuffer dst) throws IOException {  return sc.read(dst);}  }
class C{  @Override public boolean equals(Object other){  if (other == null)   return false;  if (other.getClass() != getClass()) {    return false;  }  Authority otherAuth=(Authority)other;  if (!this.hostPort.equals(otherAuth.hostPort)) {    return false;  }  if (this.userInfo != null && otherAuth.userInfo != null) {    if (!this.userInfo.equals(otherAuth.userInfo)) {      return false;    }  }  return true;}  }
class C{  public ResourceEnvRef(String resourceType){  super(resourceType);}  }
class C{  public void addInternalFrameListener(InternalFrameListener l){  listenerList.add(InternalFrameListener.class,l);  enableEvents(0);}  }
class C{  public ObjectDeque(final boolean fairness){  idleObjects=new LinkedBlockingDeque<>(fairness);}  }
class C{  public FrameBodyXSOT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public void sendUserModifyNotification(SSOToken token,Map attributes,Map oldAttributes){  if (modifyNotifyList == null || modifyNotifyList.isEmpty()) {    return;  }  AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);  AttrSet oldAttrSet=CommonUtils.mapToAttrSet(oldAttributes);  try {    String self=AMSDKBundle.getString("504");    Iterator iter=modifyNotifyList.iterator();    while (iter.hasNext()) {      String val=(String)iter.next();      StringTokenizer stz=new StringTokenizer(val);      int toLen=stz.countTokens();      if (toLen > 0) {        String attrName=stz.nextToken().toLowerCase();        boolean valuesChanged=false;        Attr newAttrVal=null;        Attr oldAttrVal=null;        StringBuilder newSB=new StringBuilder();        StringBuilder oldSB=new StringBuilder();        if (attrSet.contains(attrName)) {          newAttrVal=attrSet.getAttribute(attrName);          if (newAttrVal != null) {            String[] newvalues=newAttrVal.getStringValues();            for (int i=0; i < newvalues.length; i++) {              newSB.append(newvalues[i]);            }          }        }        if (oldAttrSet.contains(attrName)) {          oldAttrVal=oldAttrSet.getAttribute(attrName);          if (oldAttrVal != null) {            String[] oldvalues=oldAttrVal.getStringValues();            for (int i=0; i < oldvalues.length; i++) {              oldSB.append(oldvalues[i]);            }          }        }        String newStr=newSB.toString();        String oldStr=oldSB.toString();        valuesChanged=!newStr.equalsIgnoreCase(oldStr);        if (valuesChanged) {          while (stz.hasMoreTokens()) {            StringTokenizer stz2=new StringTokenizer(stz.nextToken(),"|");            String email=stz2.nextToken();            String[] to;            if (email.equals(self)) {              Set attrNamesSet=new HashSet(1);              attrNamesSet.add(EMAIL_ATTRIBUTE);              Map emailAttrMap=DirectoryServicesFactory.getInstance().getAttributes(token,entryDN,attrNamesSet,AMObject.USER);              Set emails=(Set)emailAttrMap.get(EMAIL_ATTRIBUTE);              if (emails == null || emails.isEmpty()) {                continue;              } else {                to=(String[])emails.toArray(new String[emails.size()]);              }            } else             if (email.startsWith(self + ":")) {              String emailAttrName=email.substring((self + ":").length());              if (emailAttrName == null || emailAttrName.length() == 0) {                continue;              }              Set attrNamesSet=new HashSet(1);              attrNamesSet.add(emailAttrName);              Map emailAttrMap=DirectoryServicesFactory.getInstance().getAttributes(token,entryDN,attrNamesSet,AMObject.USER);              Set emails=(Set)emailAttrMap.get(emailAttrName);              if (emails == null || emails.isEmpty()) {                continue;              } else {                to=(String[])emails.toArray(new String[emails.size()]);              }            } else {              to=new String[1];              to[0]=email;            }            String locale=null;            String charset=null;            if (stz2.hasMoreTokens()) {              locale=stz2.nextToken();              if (stz2.hasMoreTokens()) {                charset=stz2.nextToken();              }            }            Attr oldAttr=oldAttrSet.getAttribute(attrName);            Attr newAttr=attrSet.getAttribute(attrName);            String sub=AMSDKBundle.getString("492",locale);            StringBuilder msgSB=new StringBuilder();            msgSB.append(AMSDKBundle.getString("495",locale)).append(" ").append(entryDN).append("\n").append(AMSDKBundle.getString("496",locale)).append(" ").append(attrName).append("\n").append(AMSDKBundle.getString("502",locale)).append("\n");            if (oldAttr != null) {              String[] values=oldAttr.getStringValues();              for (int i=0; i < values.length; i++) {                msgSB.append("    ").append(values[i]).append("\n");              }            }            msgSB.append(AMSDKBundle.getString("503",locale)).append("\n");            if (newAttr != null) {              String[] values=newAttr.getStringValues();              for (int i=0; i < values.length; i++) {                msgSB.append("    ").append(values[i]).append("\n");              }            }            String from=AMSDKBundle.getString("497",locale);            mailer.postMail(to,sub,msgSB.toString(),from,charset);          }        }      }    }  } catch (  MessagingException me) {    if (debug.warningEnabled()) {      debug.warning("EmailNotificationHelper." + "sendUserModifyNotification() Unable to send " + "email for user: "+ entryDN,me);    }  }catch (  SSOException e) {    debug.error("EmailNotificationHelper.sendUserModifyNotification() " + "Error occured while trying to send email for user: " + entryDN,e);  }catch (  AMException ex) {    debug.error("EmailNotificationHelper.sendUserModifyNotification() " + "Error occured while trying to send email for user: " + entryDN,ex);  }}  }
class C{  @Override public void run(){  workerThread=currentThread();  while (!shutdownRequested) {    try {      waitingForWork=true;      operation=null;      operation=workQueue.nextOperation(this);      waitingForWork=false;      if (operation == null) {        break;      } else {        operation.run();        operation.operationCompleted();      }    } catch (    Throwable t) {      if (logger.isTraceEnabled()) {        logger.trace("Uncaught exception in worker thread while processing " + "operation %s: %s",operation,t);        logger.traceException(t);      }      try {        LocalizableMessage message=ERR_UNCAUGHT_WORKER_THREAD_EXCEPTION.get(getName(),operation,stackTraceToSingleLineString(t));        logger.error(message);        operation.setResultCode(DirectoryServer.getServerErrorResultCode());        operation.appendErrorMessage(message);        operation.getClientConnection().sendResponse(operation);      } catch (      Throwable t2) {        if (logger.isTraceEnabled()) {          logger.trace("Exception in worker thread while trying to log a " + "message about an uncaught exception %s: %s",t,t2);          logger.traceException(t2);        }      }      try {        LocalizableMessage message=ERR_UNCAUGHT_WORKER_THREAD_EXCEPTION.get(getName(),operation,stackTraceToSingleLineString(t));        operation.disconnectClient(DisconnectReason.SERVER_ERROR,true,message);      } catch (      Throwable t2) {        logger.traceException(t2);      }    }  }  if (stoppedByReducedThreadNumber) {    logger.debug(INFO_WORKER_STOPPED_BY_REDUCED_THREADNUMBER,getName());  } else   if (!workQueue.shutdownRequested()) {    logger.warn(WARN_UNEXPECTED_WORKER_THREAD_EXIT,getName());  }  if (logger.isTraceEnabled()) {    logger.trace(getName() + " exiting.");  }}  }
class C{  public JMXMBean(DN configEntryDN){  this.configEntryDN=configEntryDN;  alertGenerators=new CopyOnWriteArrayList<>();  monitorProviders=new CopyOnWriteArrayList<>();  MBeanServer mBeanServer=DirectoryServer.getJMXMBeanServer();  if (mBeanServer != null) {    try {      objectName=new ObjectName(getJmxName(configEntryDN));      try {        if (mBeanServer.isRegistered(objectName)) {          mBeanServer.unregisterMBean(objectName);        }      } catch (      Exception e) {        logger.traceException(e);      }      mBeanServer.registerMBean(this,objectName);    } catch (    Exception e) {      logger.traceException(e);      logger.error(ERR_CONFIG_JMX_CANNOT_REGISTER_MBEAN,configEntryDN,e);    }  }}  }
class C{  public void sendTCPMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  if (message == null || receiverAddress == null) {    logger.logError("receiverAddress = " + receiverAddress);    throw new IllegalArgumentException("Null argument");  }  lastActivityTimeStamp=System.currentTimeMillis();  if (peerPortAdvertisedInHeaders <= 0) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("receiver port = " + receiverPort + " for this channel "+ this+ " key "+ key);    }    if (receiverPort <= 0) {      this.peerPortAdvertisedInHeaders=5060;    } else {      this.peerPortAdvertisedInHeaders=receiverPort;    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("2.Storing peerPortAdvertisedInHeaders = " + peerPortAdvertisedInHeaders + " for this channel "+ this+ " key "+ key);    }  }  NIOHandler nioHandler=((NioTcpMessageProcessor)messageProcessor).nioHandler;  SocketChannel sock=nioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,"TCP",message,retry,this);  if (sock != socketChannel && sock != null) {    if (socketChannel != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("[2] Old socket different than new socket on channel " + key + socketChannel+ " "+ sock);        logger.logStackTrace();        logger.logWarning("Old socket local ip address " + socketChannel.socket().getLocalSocketAddress());        logger.logWarning("Old socket remote ip address " + socketChannel.socket().getRemoteSocketAddress());        logger.logWarning("New socket local ip address " + sock.socket().getLocalSocketAddress());        logger.logWarning("New socket remote ip address " + sock.socket().getRemoteSocketAddress());      }      close(false,false);      socketChannel=sock;      putMessageChannel(socketChannel,this);      onNewSocket(message);    }    if (socketChannel != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("There was no exception for the retry mechanism so we keep going " + key);      }    }    socketChannel=sock;  }}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public static SearchRequest newSearchRequest(final DN name,final SearchScope scope,final String filter) throws DirectoryException {  return newSearchRequest(name,scope,SearchFilter.createFilterFromString(filter));}  }
class C{  public Builder clear(){  localeBuilder.clear();  return this;}  }
class C{  public static boolean isTargetControlApplicable(Aci aci,AciTargetMatchContext matchCtx){  TargetControl targetControl=aci.getTargets().getTargetControl();  return targetControl != null && targetControl.isApplicable(matchCtx);}  }
class C{  @Override public Session load(String id) throws ClassNotFoundException, IOException {  File file=file(id);  if (file == null) {    return null;  }  if (!file.exists()) {    return null;  }  Context context=getManager().getContext();  Log contextLog=context.getLogger();  if (contextLog.isDebugEnabled()) {    contextLog.debug(sm.getString(getStoreName() + ".loading",id,file.getAbsolutePath()));  }  ClassLoader oldThreadContextCL=context.bind(Globals.IS_SECURITY_ENABLED,null);  try (FileInputStream fis=new FileInputStream(file.getAbsolutePath());ObjectInputStream ois=getObjectInputStream(fis)){    StandardSession session=(StandardSession)manager.createEmptySession();    session.readObjectData(ois);    session.setManager(manager);    return session;  } catch (  FileNotFoundException e) {    if (contextLog.isDebugEnabled()) {      contextLog.debug("No persisted data file found");    }    return null;  } finally {    context.unbind(Globals.IS_SECURITY_ENABLED,oldThreadContextCL);  }}  }
class C{  public void testChanges() throws Exception {  TableResult res=new TableResult();  assertTrue(db.changes() == 0);  db.exec("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE1 + " VALUES(2, 5, 7);",null);  int rows=(int)db.changes();  assertEquals(1,db.changes());  db.exec("update " + DatabaseCreator.SIMPLE_TABLE1 + " set speed = 7, size= 5 where id = 2;",null);  assertEquals(1,db.changes());  db.exec("select * from " + DatabaseCreator.SIMPLE_TABLE1,res);  assertEquals(0,db.changes());  db.exec("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE1 + " VALUES(8, 5, 7);",null);  db.exec("Update " + DatabaseCreator.SIMPLE_TABLE1 + " set speed = 10;",null);  assertTrue(db.changes() > 2);}  }
class C{  public NSString(String string){  content=string;}  }
class C{  private boolean legalize_edge(PlaDelTriCorner p_corner,PlaDelTriEdge p_edge){  if (p_edge.is_legal())   return false;  PlaDelTriTriangle triangle_to_change;  if (p_edge.left_triangle.opposite_corner(p_edge) == p_corner) {    triangle_to_change=p_edge.right_triangle;  } else   if (p_edge.right_triangle.opposite_corner(p_edge) == p_corner) {    triangle_to_change=p_edge.left_triangle;  } else {    System.out.println("PlanarDelaunayTriangulation.legalize_edge: edge lines inconsistant");    return false;  }  PlaDelTriEdge flipped_edge=p_edge.flip();  search_graph.insert(flipped_edge.left_triangle,p_edge.left_triangle);  search_graph.insert(flipped_edge.right_triangle,p_edge.left_triangle);  search_graph.insert(flipped_edge.left_triangle,p_edge.right_triangle);  search_graph.insert(flipped_edge.right_triangle,p_edge.right_triangle);  for (int index=0; index < 3; ++index) {    PlaDelTriEdge curr_edge=triangle_to_change.edge_lines[index];    if (curr_edge != p_edge) {      legalize_edge(p_corner,curr_edge);    }  }  return true;}  }
class C{  protected void deleteSunXmlKeyValFiles(SMSFlatFileTreeNode node) throws SMSException {  NodeNameFilter filter=new NodeNameFilter(SMSEntry.ATTR_XML_KEYVAL + "=*");  Set toDelete=node.searchChildren(filter,false);  for (Iterator i=toDelete.iterator(); i.hasNext(); ) {    SMSFlatFileTreeNode c=(SMSFlatFileTreeNode)i.next();    node.removeChild(c,mRootDir);  }}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childData=child.getData();  assertEquals("characterdataAppendDataGetDataAssert","Margaret Martin, Esquire",childData);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConfirmationMethodElement createConfirmationMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConfirmationMethodElementImpl();}  }
class C{  public void onFileCreate(final File file){}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",orientation=" + orientationString;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodename.class,args);}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  public String str(){  return "";}  }
class C{  @Override public void reset(){  if (included) {    return;  }  getCoyoteResponse().reset();  outputBuffer.reset();  usingOutputStream=false;  usingWriter=false;  isCharacterEncodingSet=false;}  }
class C{  public void onUpdateFinish(){  WXLogUtils.d("Instance onUpdateSuccess");}  }
class C{  protected String accessJMXValue(){  try {    Object result=getJMXConnection().getAttribute(new ObjectName(name),attribute);    if (result != null)     return result.toString();  } catch (  Exception e) {  }  return null;}  }
class C{  private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {  PolicyNotification policyNotification=null;  try {    String notificationDataBlock=getNotificationDataBlock(xml);    if (notificationDataBlock != null) {      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);      if (rootNode != null) {        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);        if (notificationNode != null) {          policyNotification=PolicyNotification.parseXML(notificationNode);        } else {          debug.error("ResultsCacheUtil." + "extractPolicyNotification():" + "cannot find notification node");          throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_root_element",null,null);        }      } else {        debug.error("ResultsCacheUtil." + "extractPolicyNotification():");      }    } else {      debug.error("ResultsCacheUtil:" + "extractPolicyNotification():" + "notification data block is null");    }  } catch (  Exception xe) {    debug.error("ResultsCacheUtil.extractPolicyNotification():",xe);    throw new PolicyEvaluationException(ResBundleUtils.rbName,"xml_parsing_error",null,xe);  }  return policyNotification;}  }
class C{  public NameIDMappingResponse createNameIDMappingResponse(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_RES,elem);  if (obj == null) {    return new NameIDMappingResponseImpl(elem);  } else {    return (NameIDMappingResponse)obj;  }}  }
class C{  public boolean isDecorate(){  if (decorate == null) {    ServletContext context=JKJsfUtil.getServletContext();    decorate=JKConversionUtil.toBoolean(context.getInitParameter("jk.decorate"),true);  }  return decorate;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  public void write(ASN1Writer writer) throws IOException {  writer.writeStartSequence();  writer.writeInteger(numFrames);  for (int i=0; i < numFrames; i++) {    writer.writeOctetString(classNames[i]);    writer.writeOctetString(methodNames[i]);    writer.writeInteger(lineNumbers[i]);  }  writer.writeEndSequence();}  }
class C{  private void preProcessPasswordModification(Modification m) throws DirectoryException {switch (m.getModificationType().asEnum()) {case ADD:case REPLACE:    preProcessPasswordAddOrReplace(m);  break;case DELETE:preProcessPasswordDelete(m);break;default :AttributeDescription attrDesc=m.getAttribute().getAttributeDescription();throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODIFY_INVALID_MOD_TYPE_FOR_PASSWORD.get(m.getModificationType(),attrDesc));}}  }
class C{  public void postIdle(final Runnable runnable){  post(new IdleRunnable(runnable));}  }
class C{  public void addCellEditorListener(CellEditorListener l){  listenerList.add(CellEditorListener.class,l);}  }
class C{  public FailedLoginException(){  super();}  }
class C{  public String toString(){  return ("HOTPPrincipal:  " + name);}  }
class C{  public XMLSignatureException(){  super();}  }
class C{  public ProxiedAuthV1Control(boolean isCritical,DN authorizationDN){  super(OID_PROXIED_AUTH_V1,isCritical);  this.authorizationDN=authorizationDN;  rawAuthorizationDN=ByteString.valueOfUtf8(authorizationDN.toString());}  }
class C{  public String toString(){  return _prefix != null ? (_prefix + ":" + _localName) : (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  public boolean isWrapperFor(Class<?> wrappedType){  if (wrappedType.isAssignableFrom(request.getClass())) {    return true;  }  if (request instanceof ServletRequestWrapper) {    return ((ServletRequestWrapper)request).isWrapperFor(wrappedType);  }  return false;}  }
class C{  @NonNull public final Agera filter(@NonNull Condition condition){  return new AgeraFilter(this,condition);}  }
class C{  public void mouseMoved(MouseEvent event){  if (tipShowing) {    checkForTipChange(event);  } else   if (showImmediately) {    JComponent component=(JComponent)event.getSource();    toolTipText=component.getToolTipText(event);    if (toolTipText != null) {      preferredLocation=component.getToolTipLocation(event);      mouseEvent=event;      insideComponent=component;      exitTimer.stop();      showTipWindow();    }  } else {    insideComponent=(JComponent)event.getSource();    mouseEvent=event;    toolTipText=null;    enterTimer.restart();  }}  }
class C{  private byte[][] minMaxIPs(byte[] ip1,byte[] subnetmask1,byte[] ip2,byte[] subnetmask2){  int ipLength=ip1.length;  byte[] min1=new byte[ipLength];  byte[] max1=new byte[ipLength];  byte[] min2=new byte[ipLength];  byte[] max2=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    min1[i]=(byte)(ip1[i] & subnetmask1[i]);    max1[i]=(byte)(ip1[i] & subnetmask1[i] | ~subnetmask1[i]);    min2[i]=(byte)(ip2[i] & subnetmask2[i]);    max2[i]=(byte)(ip2[i] & subnetmask2[i] | ~subnetmask2[i]);  }  return new byte[][]{min1,max1,min2,max2};}  }
class C{  @SuppressWarnings("unused") static <T>Promise<List<T>> promiseList(Class<T> componentType){  return new BasePromise<>();}  }
class C{  public static String base64Encode(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return Base64.getEncoder().encodeToString(value.getBytes());}  }
class C{  private <R extends Response>Promise<R,ResourceException> evaluateOnResponse(final Context context,final Request request,final R response){  if (onResponse != null) {    logger.info("Filter response: {}.",context.getId());    ScriptEntry scriptEntry=onResponse.getRight();    if (!scriptEntry.isActive()) {      return new ServiceUnavailableException("Failed to execute inactive script: " + onResponse.getRight().getName()).asPromise();    }    Script script=populateScript(scriptEntry,context,request);    script.put("response",response);    try {      evalScript(script,onResponse.getLeft(),onResponse.getRight().getName());    } catch (    ResourceException e) {      return e.asPromise();    }  }  return newResultPromise(response);}  }
class C{  private void initMSISDNConfig(Map options) throws AuthLoginException {  String errorMsgKey=null;  if (options != null) {    debug.message("MSISDN: getting attributes.");    userSearchAttr=CollectionHelper.getMapAttr(options,USER_SEARCH_ATTR);    principalUser=CollectionHelper.getMapAttr(options,PRINCIPAL);    principalPasswd=CollectionHelper.getMapAttr(options,PRINCIPAL_PASSWD);    useSSL=Boolean.valueOf(CollectionHelper.getMapAttr(options,USE_SSL,ISAuthConstants.FALSE_VALUE)).booleanValue();    serverHost=CollectionHelper.getServerMapAttr(options,LDAP_URL);    userNamingAttr=CollectionHelper.getMapAttr(options,USER_NAMING_ATTR,DEFAULT_USER_NAMING_ATTR);    returnUserDN=CollectionHelper.getMapAttr(options,RETURN_USER_DN,ISAuthConstants.TRUE_VALUE);    if (serverHost == null) {      debug.error("Fatal error: LDAP Server and Port misconfigured");      errorMsgKey="wrongLDAPServer";    } else {      String port=null;      int index=serverHost.indexOf(':');      if (index != -1) {        port=serverHost.substring(index + 1);        serverPort=Integer.parseInt(port);        serverHost=serverHost.substring(0,index);      }      startSearchLoc=CollectionHelper.getServerMapAttr(options,START_SEARCH_DN);      if (startSearchLoc == null) {        debug.error("Fatal error: LDAP Start Search DN misconfigured");        errorMsgKey="wrongStartDN";      }    }    if (debug.messageEnabled()) {      debug.message("\n ldapProviderUrl=" + serverHost + "\n\t serverPort = "+ serverPort+ "\n\t startSearchLoc="+ startSearchLoc+ "\n\t userSearchAttr="+ userSearchAttr+ "\n\t principalUser="+ principalUser+ "\n\t serverHost ="+ serverHost+ "\n\t userNamingAttr ="+ userNamingAttr+ "\n\t returnUserDN ="+ returnUserDN+ "\n\t useSSL="+ useSSL);    }  } else {    debug.error("options is null");    errorMsgKey="MSISDNValidateEx";  }  if (errorMsgKey != null) {    throw new AuthLoginException(amAuthMSISDN,errorMsgKey,null);  }}  }
class C{  public boolean addAudienceRestrictionCondition(AudienceRestrictionCondition arc){  if (arc != null) {    _arcs.add(arc);    return true;  } else {    return false;  }}  }
class C{  public TagNotFoundException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  private void initFromCollection(Collection<? extends E> c){  initElementsFromCollection(c);  heapify();}  }
class C{  private boolean changeStatus(DataServerHandler dsHandler,StatusMachineEvent event){  try {    lock();  } catch (  InterruptedException ex) {    if (logger.isTraceEnabled()) {      logger.trace("Status analyzer for domain " + baseDN + " has been interrupted when"+ " trying to acquire domain lock for changing the status of DS "+ dsHandler.getServerId());    }    return true;  }  try {    ServerStatus newStatus=ServerStatus.INVALID_STATUS;    ServerStatus oldStatus=dsHandler.getStatus();    try {      newStatus=dsHandler.changeStatus(event);    } catch (    IOException e) {      logger.error(ERR_EXCEPTION_CHANGING_STATUS_FROM_STATUS_ANALYZER,baseDN,dsHandler.getServerId(),e.getMessage());    }    if (newStatus == ServerStatus.INVALID_STATUS || newStatus == oldStatus) {      return false;    }    enqueueTopoInfoToAllExcept(dsHandler);  } catch (  Exception e) {    logger.error(LocalizableMessage.raw(stackTraceToSingleLineString(e)));  } finally {    release();  }  return false;}  }
class C{  boolean isParagraph(){  return (this == P || this == IMPLIED || this == DT || this == H1 || this == H2 || this == H3 || this == H4 || this == H5 || this == H6);}  }
class C{  public boolean validatePendingSetBeanContext(BeanContext newValue){  return true;}  }
class C{  @Bean public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  Contact contact=new Contact(jHipsterProperties.getSwagger().getContactName(),jHipsterProperties.getSwagger().getContactUrl(),jHipsterProperties.getSwagger().getContactEmail());  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),contact,jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(java.sql.Date.class).directModelSubstitute(java.time.LocalDate.class,java.sql.Date.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  private void addLdapAttributesForFields(final Collection<JsonPointer> fields,final Resource resource,final Set<String> ldapAttributes){  final PropertyMapper propertyMapper=resource.getPropertyMapper();  if (fields.isEmpty()) {    propertyMapper.getLdapAttributes(ROOT,ROOT,ldapAttributes);  } else {    for (    final JsonPointer field : fields) {      propertyMapper.getLdapAttributes(ROOT,field,ldapAttributes);    }  }}  }
class C{  public void execute(Runnable command,long timeout,TimeUnit unit){  submittedCount.incrementAndGet();  try {    super.execute(command);  } catch (  RejectedExecutionException rx) {    if (super.getQueue() instanceof TaskQueue) {      final TaskQueue queue=(TaskQueue)super.getQueue();      try {        if (!queue.force(command,timeout,unit)) {          submittedCount.decrementAndGet();          throw new RejectedExecutionException("Queue capacity is full.");        }      } catch (      InterruptedException x) {        submittedCount.decrementAndGet();        throw new RejectedExecutionException(x);      }    } else {      submittedCount.decrementAndGet();      throw rx;    }  }}  }
class C{  public static Foo toModel(FooSoap soapModel){  if (soapModel == null) {    return null;  }  Foo model=new FooImpl();  model.setUuid(soapModel.getUuid());  model.setFooId(soapModel.getFooId());  model.setGroupId(soapModel.getGroupId());  model.setCompanyId(soapModel.getCompanyId());  model.setUserId(soapModel.getUserId());  model.setUserName(soapModel.getUserName());  model.setCreateDate(soapModel.getCreateDate());  model.setModifiedDate(soapModel.getModifiedDate());  model.setField1(soapModel.getField1());  model.setField2(soapModel.getField2());  model.setField3(soapModel.getField3());  model.setField4(soapModel.getField4());  model.setField5(soapModel.getField5());  return model;}  }
class C{  public CMSSignedData(Map hashes,byte[] sigBlock) throws CMSException {  this(hashes,CMSUtils.readContentInfo(sigBlock));}  }
class C{  public void update(Graphics g,JComponent c){  AbstractButton button=(AbstractButton)c;  if ((c.getBackground() instanceof UIResource) && button.isContentAreaFilled() && c.isEnabled()) {    ButtonModel model=button.getModel();    if (!MetalUtils.isToolBarButton(c)) {      if (!model.isArmed() && !model.isPressed() && MetalUtils.drawGradient(c,g,"Button.gradient",0,0,c.getWidth(),c.getHeight(),true)) {        paint(g,c);        return;      }    } else     if (model.isRollover() && MetalUtils.drawGradient(c,g,"Button.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      paint(g,c);      return;    }  }  super.update(g,c);}  }
class C{  private ArrayList<DbEntry> tryRemove(int col,int row,ArrayList<DbEntry> items,float[] outLoss){  boolean[][] occupied=new boolean[mTrgX][mTrgY];  col=mShouldRemoveX ? col : Integer.MAX_VALUE;  row=mShouldRemoveY ? row : Integer.MAX_VALUE;  ArrayList<DbEntry> finalItems=new ArrayList<>();  ArrayList<DbEntry> removedItems=new ArrayList<>();  for (  DbEntry item : items) {    if ((item.cellX <= col && (item.spanX + item.cellX) > col) || (item.cellY <= row && (item.spanY + item.cellY) > row)) {      removedItems.add(item);      if (item.cellX >= col)       item.cellX--;      if (item.cellY >= row)       item.cellY--;    } else {      if (item.cellX > col)       item.cellX--;      if (item.cellY > row)       item.cellY--;      finalItems.add(item);      markCells(occupied,item,true);    }  }  OptimalPlacementSolution placement=new OptimalPlacementSolution(occupied,removedItems);  placement.find();  finalItems.addAll(placement.finalPlacedItems);  outLoss[0]=placement.lowestWeightLoss;  outLoss[1]=placement.lowestMoveCost;  return finalItems;}  }
class C{  private void clearAuthFailureTimes(){  logger.trace("Clearing authentication failure times for user %s",userDNString);  List<Long> failureTimes=getAuthFailureTimes();  if (!failureTimes.isEmpty()) {    failureTimes.clear();    clearAttribute(OP_ATTR_PWPOLICY_FAILURE_TIME);  }}  }
class C{  public WeakHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  private boolean containsPan(){  return component.containsGesture(HighLevelGesture.PAN_START) || component.containsGesture(HighLevelGesture.PAN_MOVE) || component.containsGesture(HighLevelGesture.PAN_END);}  }
class C{  @Override public Name composeName(Name name,Name prefix) throws NamingException {  Name prefixClone=(Name)prefix.clone();  return prefixClone.addAll(name);}  }
class C{  public AcceptEncodingHeader createAcceptEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("the encoding parameter is null");  AcceptEncoding acceptEncoding=new AcceptEncoding();  acceptEncoding.setEncoding(encoding);  return acceptEncoding;}  }
class C{  static ZoneOffsetTransition readExternal(DataInput in) throws IOException {  long epochSecond=Ser.readEpochSec(in);  ZoneOffset before=Ser.readOffset(in);  ZoneOffset after=Ser.readOffset(in);  if (before.equals(after)) {    throw new IllegalArgumentException("Offsets must not be equal");  }  return new ZoneOffsetTransition(epochSecond,before,after);}  }
class C{  private com.sun.identity.liberty.ws.disco.jaxb.ModifyResponseElement update(com.sun.identity.liberty.ws.disco.jaxb.ModifyType modify,com.sun.identity.liberty.ws.soapbinding.Message message) throws JAXBException {  DiscoUtils.debug.message("in update.");  ModifyResponseElement resp=null;  StatusType status=null;  try {    resp=DiscoUtils.getDiscoFactory().createModifyResponseElement();    status=DiscoUtils.getDiscoFactory().createStatusType();    resp.setStatus(status);  } catch (  JAXBException je) {    DiscoUtils.debug.error("DiscoService.update: couldn't form " + "ModifyResponse.");    throw je;  }  String providerID=DiscoServiceManager.getDiscoProviderID();  String resourceID=null;  ResourceIDType resID=modify.getResourceID();  if (resID == null) {    resourceID=getResourceID(modify.getEncryptedResourceID(),providerID);  } else {    resourceID=resID.getValue();  }  DiscoEntryHandler entryHandler=null;  String userDN=null;  boolean isB2E=false;  String logMsg=null;  if (resourceID == null || resourceID.equals(DiscoConstants.IMPLIED_RESOURCE)) {    DiscoUtils.debug.message("DiscoveryService.lookup: in B2E case");    isB2E=true;  }  if (!isB2E) {    ResourceIDMapper idMapper=DiscoServiceManager.getResourceIDMapper(providerID);    if (idMapper == null) {      idMapper=DiscoServiceManager.getDefaultResourceIDMapper();    }    userDN=idMapper.getUserID(providerID,resourceID,message);    logMsg=DiscoUtils.bundle.getString("messageID") + "=" + message.getCorrelationHeader().getMessageID()+ "."+ DiscoUtils.bundle.getString("providerID")+ "="+ providerID+ "."+ DiscoUtils.bundle.getString("securityMechID")+ "="+ message.getAuthenticationMechanism()+ "."+ DiscoUtils.bundle.getString("resourceOfferingID")+ "="+ resourceID+ "."+ DiscoUtils.bundle.getString("operation")+ "="+ "Update";    if (userDN == null) {      DiscoUtils.debug.error("DiscoService.update: couldn't find user " + "from resourceID: " + resourceID);      status.setCode(DiscoConstants.QNAME_FAILED);      String[] data={resourceID};      LogUtil.error(Level.INFO,LogUtil.DS_UPDATE_FAILURE,data);      return resp;    }    entryHandler=DiscoServiceManager.getDiscoEntryHandler();  } else {    entryHandler=DiscoServiceManager.getGlobalEntryHandler();  }  if (DiscoServiceManager.needPolicyEvalUpdate()) {    DiscoUtils.debug.message("DiscoService.lookup: needPolicyEval.");    if (!isUpdateAllowed(userDN,message,modify.getRemoveEntry(),modify.getInsertEntry(),entryHandler,DiscoServiceManager.getAuthorizer())) {      status.setCode(DiscoConstants.QNAME_FAILED);      String[] data={userDN};      LogUtil.error(Level.INFO,LogUtil.DS_UPDATE_FAILURE,data);      return resp;    }  }  Map results=entryHandler.modifyDiscoEntries(userDN,modify.getRemoveEntry(),modify.getInsertEntry());  String statusCode=(String)results.get(DiscoEntryHandler.STATUS_CODE);  if (statusCode.equals(DiscoConstants.STATUS_OK)) {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("DiscoService.update: modified " + "DiscoEntries through DiscoEntryHandler successfully.");    }    status.setCode(DiscoConstants.QNAME_OK);    List entryIds=(List)results.get(DiscoEntryHandler.NEW_ENTRY_IDS);    if ((entryIds != null) && (entryIds.size() != 0)) {      resp.getNewEntryIDs().addAll(entryIds);    }    String[] data={logMsg};    LogUtil.access(Level.INFO,LogUtil.DS_UPDATE_SUCCESS,data);  } else {    DiscoUtils.debug.error("DiscoService.update: couldn't modify " + "DiscoEntries through DiscoEntryHandler.");    status.setCode(DiscoConstants.QNAME_FAILED);    String[] data={logMsg};    LogUtil.error(Level.INFO,LogUtil.DS_UPDATE_FAILURE,data);  }  return resp;}  }
class C{  public double user_to_board(double p_value){  return UnitMeasure.scale(p_value / scale_factor,user_unit,board_unit);}  }
class C{  protected void fireItemStateChanged(ItemEvent event){  Object[] listeners=listenerList.getListenerList();  ItemEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ItemListener.class) {      if (e == null) {        e=new ItemEvent(AbstractButton.this,ItemEvent.ITEM_STATE_CHANGED,AbstractButton.this,event.getStateChange());      }      ((ItemListener)listeners[i + 1]).itemStateChanged(e);    }  }  if (accessibleContext != null) {    if (event.getStateChange() == ItemEvent.SELECTED) {      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.SELECTED);      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,Integer.valueOf(0),Integer.valueOf(1));    } else {      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.SELECTED,null);      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,Integer.valueOf(1),Integer.valueOf(0));    }  }}  }
class C{  protected void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {}  }
class C{  static int inverseMod32(int val){  int t=val;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  return t;}  }
class C{  protected void verifyAndLinkRoleToGroup(SSOToken token,Guid[] membersGuid,String roleDN) throws AMException {  DN dn=DN.valueOf(roleDN);  String groupName=getGroupFromRoleDN(dn);  if (groupName != null) {    String orgDN=dn.parent().toString();    String groupDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + "=" + groupName+ ",ou=Groups,"+ orgDN;    String groupRDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + "=" + groupName;    try {      AssignableDynamicGroup group=(AssignableDynamicGroup)UMSObject.getObject(token,new Guid(groupDN));      group.addMembers(membersGuid);      Attr attrs[]=new Attr[1];      attrs[0]=new Attr("adminrole",groupRDN);      AttrSet attrSet=new AttrSet(attrs);      int numMembers=membersGuid.length;      for (int i=0; i < numMembers; i++) {        addAttributesToEntry(token,membersGuid[i].getDn(),attrSet);      }    } catch (    EntryNotFoundException ex) {      debug.error("Compliance.verifyAndLinkRoleToGroup: " + "Admin groups are missing");    }catch (    UMSException ue) {      debug.error("Compliance." + "verifyAndLinkRoleToGroup(): ",ue);      throw new AMException(AMSDKBundle.getString("771"),"771");    }  }}  }
class C{  public Request _create_request(Context ctx,String operation,NVList arg_list,NamedValue result,ExceptionList exceptions,ContextList contexts){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public Parameter(MethodInfo method,int parameter){  this.method=method;  this.parameter=parameter;}  }
class C{  public static BuildVersion binaryVersion(final Connection connection) throws ConfigException {  try {    final SearchResultEntry entry=connection.readEntry("","fullVendorVersion");    return valueOf(entry.getAttribute("fullVendorVersion").firstValueAsString());  } catch (  NullPointerException|NoSuchElementException|LdapException e) {    throw new ConfigException(ERR_CONFIGVERSION_NOT_FOUND.get(stackTraceToSingleLineString(e,false)));  }}  }
class C{  public boolean doCheckSiteStatus(URL url){  if (debug.messageEnabled()) {    debug.message("SiteStatusCheckThreadImpl.doCheckSiteStatus: check " + url);  }  URLChecker checker=getURLChecker(url);  if (checker != null && (checker.getStatus() == URLStatus.STATUS_UNKNOWN)) {synchronized (checker) {      checker.cancel();      checker.notify();    }synchronized (urlCheckers) {      urlCheckers.remove(getThreadName(url));    }    debug.error("SiteStatusCheckThreadImpl.doCheckSiteStatus() " + "Killing thread " + getThreadName(url));    return false;  } else   if ((checker != null) && (checker.getStatus() == URLStatus.STATUS_AVAILABLE)) {    return true;  } else {    return false;  }}  }
class C{  public void startTable(int height,int width){}  }
class C{  public XMLString newstr(char[] string,int start,int length){  return new XStringForChars(string,start,length);}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public static int findPowerOfTwo(int value){  for (int ii=value; ii > 0; ii--) {    if (isPowerOfTwo(ii)) {      return ii;    }  }  throw new IllegalArgumentException("No power of two found.");}  }
class C{  private boolean isLicenseAccepted(){  return Boolean.parseBoolean(getContext().getRequestParameter(SetupConstants.ACCEPT_LICENSE_PARAM));}  }
class C{  public Subpath(Subpath subpath){  this.startPoint=subpath.startPoint;  this.segments.addAll(subpath.getSegments());  this.closed=subpath.closed;}  }
class C{  public StateInteractive cutout_items(){  return StateSelecRegionCutout.get_instance(items_list,return_state,i_brd,actlog);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  private boolean serializeCompactRDFStructProp(XMPNode node,int indent,boolean hasRDFResourceQual) throws XMPException, IOException {  boolean hasAttrFields=false;  boolean hasElemFields=false;  boolean emitEndTag=true;  for (Iterator ic=node.iterateChildren(); ic.hasNext(); ) {    XMPNode field=(XMPNode)ic.next();    if (canBeRDFAttrProp(field)) {      hasAttrFields=true;    } else {      hasElemFields=true;    }    if (hasAttrFields && hasElemFields) {      break;    }  }  if (hasRDFResourceQual && hasElemFields) {    throw new XMPException("Can't mix rdf:resource qualifier and element fields",XMPError.BADRDF);  }  if (!node.hasChildren()) {    write(" rdf:parseType=\"Resource\"/>");    writeNewline();    emitEndTag=false;  } else   if (!hasElemFields) {    serializeCompactRDFAttrProps(node,indent + 1);    write("/>");    writeNewline();    emitEndTag=false;  } else   if (!hasAttrFields) {    write(" rdf:parseType=\"Resource\">");    writeNewline();    serializeCompactRDFElementProps(node,indent + 1);  } else {    write('>');    writeNewline();    writeIndent(indent + 1);    write(RDF_STRUCT_START);    serializeCompactRDFAttrProps(node,indent + 2);    write(">");    writeNewline();    serializeCompactRDFElementProps(node,indent + 1);    writeIndent(indent + 1);    write(RDF_STRUCT_END);    writeNewline();  }  return emitEndTag;}  }
class C{  public boolean isJspPage(String uri){  init();  if (jspProperties == null) {    return false;  }  String uriPath=null;  int index=uri.lastIndexOf('/');  if (index >= 0) {    uriPath=uri.substring(0,index + 1);  }  String uriExtension=null;  index=uri.lastIndexOf('.');  if (index >= 0) {    uriExtension=uri.substring(index + 1);  }  Iterator<JspPropertyGroup> iter=jspProperties.iterator();  while (iter.hasNext()) {    JspPropertyGroup jpg=iter.next();    String extension=jpg.getExtension();    String path=jpg.getPath();    if (extension == null) {      if (uri.equals(path)) {        return true;      }    } else {      if ((path == null || path.equals(uriPath)) && (extension.equals("*") || extension.equals(uriExtension))) {        return true;      }    }  }  return false;}  }
class C{  public static String createTempFile(final String... lines) throws Exception {  final File f=File.createTempFile("LDIFBasedTestCase",".txt");  f.deleteOnExit();  try (final FileWriter w=new FileWriter(f)){    for (    final String s : lines) {      w.write(s + System.getProperty("line.separator"));    }  }   return f.getAbsolutePath();}  }
class C{  public String[] mapToNativeResource(Resource xacmlContextResource) throws XACMLException {  String[] resourceService=new String[2];  String resourceName=null;  String serviceName=null;  List attributes=xacmlContextResource.getAttributes();  if (attributes != null) {    for (int count=0; count < attributes.size(); count++) {      Attribute attr=(Attribute)attributes.get(count);      if (attr != null) {        URI tmpURI=attr.getAttributeId();        if (tmpURI.toString().equals(XACMLConstants.RESOURCE_ID)) {          tmpURI=attr.getDataType();          if (tmpURI.toString().equals(XACMLConstants.XS_STRING)) {            Element element=(Element)attr.getAttributeValues().get(0);            resourceName=XMLUtils.getElementValue(element);          }        } else         if (tmpURI.toString().equals(XACMLConstants.TARGET_SERVICE)) {          tmpURI=attr.getDataType();          if (tmpURI.toString().equals(XACMLConstants.XS_STRING)) {            Element element=(Element)attr.getAttributeValues().get(0);            serviceName=XMLUtils.getElementValue(element);          }        }      }    }  }  resourceService[0]=resourceName;  resourceService[1]=serviceName;  return resourceService;}  }
class C{  @Override public synchronized Principal authenticate(String username,String credentials){  int numberOfTries=2;  while (numberOfTries > 0) {    try {      open();      Principal principal=authenticate(dbConnection,username,credentials);      return (principal);    } catch (    SQLException e) {      containerLog.error(sm.getString("jdbcRealm.exception"),e);      if (dbConnection != null)       close(dbConnection);    }    numberOfTries--;  }  return null;}  }
class C{  public AccessDeniedException(final String message,final UrlLocation parameterLocation){  super(400,"access_denied",message,parameterLocation);}  }
class C{  private PatternDN(PatternRDN... equality){  this.equality=equality;}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean ignoreUserProfile(){  String profile=null;  try {    profile=ssoToken.getProperty(ISAuthConstants.USER_PROFILE);  } catch (  SSOException e) {    debug.warning("AMModelBase.ignoreUserProfile",e);  }  return ((profile != null) && profile.equals(ISAuthConstants.IGNORE));}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public boolean contains(Point p){  return false;}  }
class C{  final V doRemove(Object key,Object value){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) < 0)       break outer;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       break outer;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key,cmp);        if (head.right == null)         tryReduceLevel();      }      @SuppressWarnings("unchecked") V vv=(V)v;      return vv;    }  }  return null;}  }
class C{  Object processPATTERN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    XPath pattern=handler.createMatchPatternXPath(value,owner);    return pattern;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public static OAuthProblemException handleOAuthProblemException(String message){  return OAuthProblemException.error(OAuth2Constants.Error.INVALID_REQUEST).description(message);}  }
class C{  public void removeAttributeNames(String[] attributeNames){  if (attributeNames != null && m_attrSet != null) {    for (int i=0; i < attributeNames.length; i++) {      removeAttributeName(attributeNames[i]);    }  }}  }
class C{  private String replaceIllegalChar(String data,char ch,String replacement){  int idx=0;  StringBuilder buffer=new StringBuilder(data.length() * 4);  while ((data != null) && (idx=data.indexOf(ch)) != -1) {    buffer.append(data.substring(0,idx));    buffer.append(replacement);    data=data.substring(idx + 1);  }  if ((data != null) && (data.length() > 0)) {    buffer.append(data);  }  return buffer.toString();}  }
class C{  public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  OAuthUtil.debugMessage("OAuth2PostAuthnPlugin:onLoginSuccess called");}  }
class C{  public FileImageInputStream(RandomAccessFile raf){  if (raf == null) {    throw new IllegalArgumentException("raf == null!");  }  this.raf=raf;  disposerRecord=new CloseableDisposerRecord(raf);  if (getClass() == FileImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  protected void imageSubmit(String imageData){  StringBuilder dataBuffer=new StringBuilder();  Element elem=getElement();  HTMLDocument hdoc=(HTMLDocument)elem.getDocument();  getFormData(dataBuffer);  if (dataBuffer.length() > 0) {    dataBuffer.append('&');  }  dataBuffer.append(imageData);  submitData(dataBuffer.toString());  return;}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-106,-5,-29,85,116,51,-101,-121,-90};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public MapCursor addCursor(int x,int y,byte direction){  return addCursor(x,y,direction,(byte)0,true);}  }
class C{  public void fireGenerateEvent(int eventType,String name,Attributes atts){}  }
class C{  public URLPermission(String url,String actions){  super(url);  init(actions);}  }
class C{  Tracker(String path,FileDeleteStrategy deleteStrategy,Object marker,ReferenceQueue<? super Object> queue){  super(marker,queue);  this.path=path;  this.deleteStrategy=deleteStrategy == null ? FileDeleteStrategy.NORMAL : deleteStrategy;}  }
class C{  Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
class C{  public FrameBodyTPE4(){}  }
class C{  public void testGetMacLength(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  for (int i=0; i < macs.length; i++) {    assertTrue("Length should be positive",(macs[i].getMacLength() >= 0));  }}  }
class C{  public void appendCell(long value){  appendCell(String.valueOf(value));}  }
class C{  private boolean passesMillerRabin(int iterations,Random rnd){  BigInteger thisMinusOne=this.subtract(ONE);  BigInteger m=thisMinusOne;  int a=m.getLowestSetBit();  m=m.shiftRight(a);  if (rnd == null) {    rnd=ThreadLocalRandom.current();  }  for (int i=0; i < iterations; i++) {    BigInteger b;    do {      b=new BigInteger(this.bitLength(),rnd);    } while (b.compareTo(ONE) <= 0 || b.compareTo(this) >= 0);    int j=0;    BigInteger z=b.modPow(m,this);    while (!((j == 0 && z.equals(ONE)) || z.equals(thisMinusOne))) {      if (j > 0 && z.equals(ONE) || ++j == a)       return false;      z=z.modPow(TWO,this);    }  }  return true;}  }
class C{  public AuthScope(final String host,int port,final String realm,final String scheme){  this.host=(host == null) ? ANY_HOST : host.toLowerCase(Locale.ENGLISH);  this.port=(port < 0) ? ANY_PORT : port;  this.realm=(realm == null) ? ANY_REALM : realm;  this.scheme=(scheme == null) ? ANY_SCHEME : scheme.toUpperCase(Locale.ENGLISH);}  }
class C{  public RespectBindingFeature(){  this.enabled=true;}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id) throws XMLSignatureException {  if (xmlString == null || xmlString.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: xmlString is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Element el=null;  try {    Document doc=XMLUtils.toDOMDocument(xmlString,SAMLUtilsCommon.debug);    el=signXML(doc,certAlias,algorithm,id);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return XMLUtils.print(el);}  }
class C{  public static boolean equals(boolean[] a,boolean[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  protected void fireItemStateChanged(ItemEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ItemListener.class) {      ((ItemListener)listeners[i + 1]).itemStateChanged(e);    }  }}  }
class C{  public void addUsers(Set users) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  dsServices.modifyMemberShip(super.token,users,super.entryDN,ROLE,ADD_MEMBER);}  }
class C{  public static FontProgram createFont(String fontProgram,boolean cached) throws java.io.IOException {  return createFont(fontProgram,null,cached);}  }
class C{  public MaterialBarcodeScannerBuilder withText(String text){  mText=text;  return this;}  }
class C{  public void checkForLocal(){  isLocal=true;}  }
class C{  public void testHashCodeEqual(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertEquals("incorrect value",aNumber.hashCode(),bNumber.hashCode());}  }
class C{  boolean containsNonHiddenArguments(){  for (  final Argument arg : args) {    if (!arg.isHidden()) {      return true;    }  }  return false;}  }
class C{  public PluginResult.PostResponse invokePostResponseSearchPlugins(PostResponseSearchOperation searchOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseSearchPlugins) {    if (isInternalOperation(searchOperation,p)) {      continue;    }    try {      result=p.doPostResponse(searchOperation);    } catch (    Exception e) {      logException(searchOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(searchOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public long startTimeInMilliseconds(){  return startTimeInMilliseconds;}  }
class C{  public X509Extensions generate(){  return new X509Extensions(extOrdering,extensions);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPModification(type=").append(modificationType);  buffer.append(", attr=");  attribute.toString(buffer);  buffer.append("})");}  }
class C{  public void testConstructorBytesPositive3(){  byte aBytes[]={127,56,100,-1};  byte rBytes[]={127,56,100,-1};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void displayProgress(ProgressDescriptor descriptor){  getCurrentStepPanel().displayProgress(descriptor);  ProgressStep status=descriptor.getProgressStep();  if (status.isLast()) {    setButtonEnabled(ButtonName.CLOSE,true);  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiPanelUI();  return MultiLookAndFeel.createUIs(mui,((MultiPanelUI)mui).uis,a);}  }
class C{  public void test_hashCode(){  try {    DateFormat df1=DateFormat.getInstance();    DateFormat df2=(DateFormat)df1.clone();    assertTrue("Hash codes of clones are not equal",df1.hashCode() == df2.hashCode());    assertTrue("Hash codes of different objects are the same",df1.hashCode() != DateFormat.getDateInstance().hashCode());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private boolean isMimeTypeEqual(MimeType mtype){  if (this.mimeType == null) {    return (mtype == null);  }  return mimeType.match(mtype);}  }
class C{  protected StreamBitratePropertiesReader(){}  }
class C{  public static void main(final String[] args){  final int retCode=new LDIFDiff().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  @Issue("JENKINS-26541") @Test public void sandboxRejection() throws Exception {  assertRejected("Jenkins.getInstance()");  assertRejected("parallel(main: {Jenkins.getInstance()})");  assertRejected("parallel(main: {parallel(main2: {Jenkins.getInstance()})})");  assertRejected("node {parallel(main: {ws {parallel(main2: {ws {Jenkins.getInstance()}})}})}");}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  try {    if (m_needToOutputDocTypeDecl) {      outputDocTypeDecl(m_elemContext.m_elementName,false);      m_needToOutputDocTypeDecl=false;    }    final java.io.Writer writer=m_writer;    if (!m_inDoctype)     writer.write("]>"); else {      writer.write('>');    }    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static ArgumentException missingBindPassword(String bindDN){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_PASSWORD.get(bindDN);  return new ArgumentException(msg);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  mySyntax=(Properties)s.readObject();  impl=new NameImpl(mySyntax);  int n=s.readInt();  try {    while (--n >= 0) {      add((String)s.readObject());    }  } catch (  InvalidNameException e) {    throw (new java.io.StreamCorruptedException("Invalid name"));  }}  }
class C{  @Override public Foo fetchByPrimaryKey(Serializable primaryKey){  Serializable serializable=entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);  if (serializable == nullModel) {    return null;  }  Foo foo=(Foo)serializable;  if (foo == null) {    Session session=null;    try {      session=openSession();      foo=(Foo)session.get(FooImpl.class,primaryKey);      if (foo != null) {        cacheResult(foo);      } else {        entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey,nullModel);      }    } catch (    Exception e) {      entityCache.removeResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);      throw processException(e);    } finally {      closeSession(session);    }  }  return foo;}  }
class C{  public ArrayList(Collection<? extends E> c){  elementData=c.toArray();  if ((size=elementData.length) != 0) {    if (elementData.getClass() != Object[].class)     elementData=Arrays.copyOf(elementData,size,Object[].class);  } else {    this.elementData=EMPTY_ELEMENTDATA;  }}  }
class C{  @Override public String toString(){  return reason.toString();}  }
class C{  @Override @Deprecated public void removeValue(String name){  removeAttribute(name);}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=null;  m_firstFree--;}  }
class C{  @SuppressWarnings("unchecked") public EnumMap<K,V> clone(){  EnumMap<K,V> result=null;  try {    result=(EnumMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }  result.vals=result.vals.clone();  result.entrySet=null;  return result;}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSAssertion.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertion.signXML: the assertion is " + "already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_ASSERTION_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_POST_ASSERTION_MINOR_VERSION || minorVersion == IFSConstants.FF_12_ART_ASSERTION_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.ASSERTION_ID,this.getAssertionID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    FSUtils.debug.message(" Exception :" + e.getMessage());    throw new SAMLResponderException(e);  }}  }
class C{  public void testFloatValueNegative2(){  String a="-27467238945723645782";  float result=-2.7467239E19f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public char last(){  if (start == end) {    return DONE;  }  offset=end - 1;  return string.charAt(offset);}  }
class C{  @Override public void update(){  if (marioDeathSeqRunning) {    if (frameCounter % 10 == 0)     if (frameCounter < 71)     mario.getSpriteFrame().setImage(playerDeathSprites[frameCounter / 10]); else     if (frameCounter == 80)     mario.getSpriteFrame().setImage(null); else     if (frameCounter == 120) {      main.Main.gameBGM.stop();      main.Main.goombaAttack.play();      while (main.Main.goombaAttack.isPlaying()) {      }      gameLoop.stop(true);    }    frameCounter++;    return;  }  if (runDeathSeq) {    if (fireballHit)     if (frameHeight > 0) {      spriteFrame.setFitHeight(frameHeight);      spriteFrame.setTranslateY(spriteFrame.getTranslateY() + fbEffectDelta);      frameHeight-=fbEffectDelta;    } else     cycleComplete=true; else     if (frameCounter++ == 40)     cycleComplete=true;    return;  }  if (frameCounter++ == 14)   spriteFrame.setImage(playerStates.get(0)); else   if (frameCounter == 28) {    spriteFrame.setImage(playerStates.get(1));    frameCounter=0;  }  if (!bottomCollide(checkBlockCollision))   yPos+=yVel; else   while (custCollide(4,checkBlockCollision)) {    yPos-=1;    for (int i=0; i < spriteBoundsArray.length; i++) {      if (spriteBoundsArray[i] == null)       continue;      spriteBoundsArray[i].setTranslateY(yPos);    }    spriteFrame.setTranslateY(yPos);  }  if (yPos > HEIGHT)   cycleComplete=true;  if (leftCollide(checkBlockCollision) || rightCollide(checkBlockCollision))   xVel=-xVel;  xPos-=xVel;  updatePosition();  attemptAttack();}  }
class C{  private final void prevToken(){  if (m_queueMark > 0) {    m_queueMark--;    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  public void addFileset(FileSet fs){  filesets.add(fs);}  }
class C{  public static JLabel makeJLabel(IconType iconName,LocalizableMessage text,TextStyle style){  JLabel l=new JLabel();  if (text != null) {    l.setText(text.toString());  }  ImageIcon icon=getImageIcon(iconName);  l.setIcon(icon);  LocalizableMessage tooltip=getIconTooltip(iconName);  if (tooltip != null) {    l.setToolTipText(tooltip.toString());  }  setTextStyle(l,style);  return l;}  }
class C{  public ShapeTileBox horizontal_offset(double p_dist){  if (p_dist == 0 || is_empty()) {    return this;  }  int dist=(int)Math.round(p_dist);  PlaPointInt lower_left=new PlaPointInt(box_ll.v_x - dist,box_ll.v_y);  PlaPointInt upper_right=new PlaPointInt(box_ur.v_x + dist,box_ur.v_y);  return new ShapeTileBox(lower_left,upper_right);}  }
class C{  @Override public Writer append(char c) throws IOException {  try {    beforeWrite(1);    out.append(c);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  private PrepNight(){}  }
class C{  public static void fill(boolean[] a,boolean val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public void test_parseLjava_io_File() throws IOException {  File f=Support_Resources.resourceToTempFile("/simple.xml");  try {    Document d=db.parse(f);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((File)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new File("_"));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  f=Support_Resources.resourceToTempFile("/wrong.xml");  try {    db.parse(f);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  public KeyUsage(byte[] encoding) throws IOException {  super(encoding);  this.keyUsage=(boolean[])ASN1.decode(encoding);}  }
class C{  public void testToString2(){  assertNotNull(new IdentityStub("testToString2").toString());}  }
class C{  public synchronized void resetOrders(){  orders=null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns08.class,args);}  }
class C{  String locateCurrentHostServer(SessionID sid) throws SessionException {  String primaryID=sid.getExtension().getPrimaryID();  String serverID=sid.getSessionServerID();  if (serverConfig.isLocalServer(serverID)) {    return serverID;  }  if (!serverConfig.isPrimaryServer(serverID)) {    return serverID;  }synchronized (this) {    if (clusterStateService == null) {      try {        initializeClusterService();      } catch (      Exception e) {        sessionDebug.error("Unable to Initialize the Cluster Service, please review Configuration settings.",e);        throw new SessionException(e);      }    }  }  if (clusterStateService.isUp(primaryID)) {    return primaryID;  } else {    int selectionListSize=clusterStateService.getServerSelectionListSize();    String sKey=sid.getExtension().getStorageKey();    if (sKey == null) {      throw new SessionException("SessionService.locateCurrentHostServer: StorageKey is null");    }    PermutationGenerator perm=new PermutationGenerator(sKey.hashCode(),selectionListSize);    String selectedServerId=null;    for (int i=0; i < selectionListSize; ++i) {      selectedServerId=clusterStateService.getServerSelection(perm.itemAt(i));      if (selectedServerId == null) {        continue;      }      if (clusterStateService.isUp(selectedServerId)) {        break;      }    }    return selectedServerId;  }}  }
class C{  public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {  Set<String> members=new HashSet<>();  String siteId=getSiteId(ssoToken,siteName);  if (siteId != null) {    Set<String> allServers=ServerConfiguration.getServers(ssoToken);    for (    String svr : allServers) {      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {        members.add(svr);      }    }  }  return members;}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  public KeySelectorException(){  super();}  }
class C{  public VersionNamingConfiguration(String searchVersionRegex,String replaceVersionRegex,List<String> noQualifierForBranches){  branchPolicies=new LinkedList<>();  for (  String branch : noQualifierForBranches) {    branchPolicies.add(BranchingPolicy.fixedBranchName(branch,Collections.singletonList(BranchNameTransformations.IGNORE.name())));  }  branchPolicies.add(new BranchingPolicy("(.*)"));  this.searchPattern=Pattern.compile(searchVersionRegex);  this.replaceVersionRegex=replaceVersionRegex;}  }
class C{  public int hashCode(){  if (hashCode == Integer.MAX_VALUE) {    hashCode=0;    int len=getTabCount();    for (int i=0; i < len; i++) {      TabStop ts=getTab(i);      hashCode^=ts != null ? getTab(i).hashCode() : 0;    }    if (hashCode == Integer.MAX_VALUE) {      hashCode-=1;    }  }  return hashCode;}  }
class C{  protected void writeStartParagraph(Element elem) throws IOException {  AttributeSet attr=elem.getAttributes();  Object resolveAttr=attr.getAttribute(StyleConstants.ResolveAttribute);  if (resolveAttr instanceof StyleContext.NamedStyle) {    writeStartTag("<p class=" + mapStyleName(((StyleContext.NamedStyle)resolveAttr).getName()) + ">");  } else {    writeStartTag("<p>");  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  Session.saveSession(Session.getActiveSession(),outState);  if (pendingFacebookDialogCallId != null) {    outState.putString(DIALOG_CALL_ID_SAVE_KEY,pendingFacebookDialogCallId.toString());  }  pendingFacebookDialogCallStore.saveInstanceState(outState);}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSNameIdentifierMappingResponse.signXML");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse.signXML:" + " the response is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() < 1) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse.signXML:" + " null certAlias");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.RESPONSE_ID,this.getResponseID(),false);    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;  } catch (  Exception e) {    FSUtils.debug.error("FSNameIdentifierMappingResponse.signXML: " + "unable to sign",e);    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(getSearchFilter(AMObject.USER),searchControl,avfilter);}  }
class C{  private CliConstants(){}  }
class C{  private Builder(){  super(Event35Id.SCHEMA$);}  }
class C{  public void paintArrowButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int direction){  String compName=context.getComponent().getName();  boolean ltr=context.getComponent().getComponentOrientation().isLeftToRight();  if ("Spinner.nextButton".equals(compName) || "Spinner.previousButton".equals(compName)) {    if (ltr) {      paintForeground(context,g,x,y,w,h,null);    } else {      AffineTransform transform=new AffineTransform();      transform.translate(w,0);      transform.scale(-1,1);      paintForeground(context,g,x,y,w,h,transform);    }  } else   if (direction == SwingConstants.WEST) {    paintForeground(context,g,x,y,w,h,null);  } else   if (direction == SwingConstants.NORTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(90));      paintForeground(context,g,y,0,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(90));      transform.translate(0,-(x + w));      paintForeground(context,g,y,0,h,w,transform);    }  } else   if (direction == SwingConstants.EAST) {    AffineTransform transform=new AffineTransform();    transform.translate(w,0);    transform.scale(-1,1);    paintForeground(context,g,x,y,w,h,transform);  } else   if (direction == SwingConstants.SOUTH) {    if (ltr) {      AffineTransform transform=new AffineTransform();      transform.rotate(Math.toRadians(-90));      transform.translate(-h,0);      paintForeground(context,g,y,x,h,w,transform);    } else {      AffineTransform transform=new AffineTransform();      transform.scale(-1,1);      transform.rotate(Math.toRadians(-90));      transform.translate(-(h + y),-(w + x));      paintForeground(context,g,y,x,h,w,transform);    }  }}  }
class C{  public FrameBodyTSST(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public VolatileCallSite(MethodHandle target){  super(target);}  }
class C{  public boolean after(Date when){  return getMillisOf(this) > getMillisOf(when);}  }
class C{  private static void checkRange(int fromIndex,int toIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  if (toIndex < 0)   throw new IndexOutOfBoundsException("toIndex < 0: " + toIndex);  if (fromIndex > toIndex)   throw new IndexOutOfBoundsException("fromIndex: " + fromIndex + " > toIndex: "+ toIndex);}  }
class C{  private boolean matchAddress(byte[] addrBytes){  if (wildCardBitSet.cardinality() == IN4ADDRSZ) {    return true;  }  for (int i=0; i < rulePrefixBytes.length; i++) {    if (!wildCardBitSet.get(i) && (ruleAddrBytes[i] & rulePrefixBytes[i]) != (addrBytes[i] & rulePrefixBytes[i])) {      return false;    }  }  return true;}  }
class C{  public BackingStoreException(String s){  super(s);}  }
class C{  public DNLock tryWriteLockEntry(final DN entry){  return acquireLockFromCache(entry).tryWriteLockEntry();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.SecurityElement createSecurityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.SecurityElementImpl();}  }
class C{  public void addListener(PrintStreamListener listener){  listeners.add(listener);}  }
class C{  static Version decodeVersionInformation(int versionBits){  int bestDifference=Integer.MAX_VALUE;  int bestVersion=0;  for (int i=0; i < VERSION_DECODE_INFO.length; i++) {    int targetVersion=VERSION_DECODE_INFO[i];    if (targetVersion == versionBits) {      return getVersionForNumber(i + 7);    }    int bitsDifference=FormatInformation.numBitsDiffering(versionBits,targetVersion);    if (bitsDifference < bestDifference) {      bestVersion=i + 7;      bestDifference=bitsDifference;    }  }  if (bestDifference <= 3) {    return getVersionForNumber(bestVersion);  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  childNode=childList.item(3);  clonedNode=childNode.cloneNode(false);  lastChildNode=clonedNode.getLastChild();  assertNull("nodeCloneFalseNoCopyTextAssert1",lastChildNode);}  }
class C{  public static boolean isCertificateException(Throwable t){  while (t != null) {    if (t instanceof SSLHandshakeException || t instanceof GeneralSecurityException) {      return true;    }    t=t.getCause();  }  return false;}  }
class C{  public ByteArrayInputStream(byte buf[],int offset,int length){  this.buf=buf;  this.pos=offset;  this.count=Math.min(offset + length,buf.length);  this.mark=offset;}  }
class C{  public static SimplePropertyMapper simple(final String attribute){  return simple(AttributeDescription.valueOf(attribute));}  }
class C{  public static String escapeSpecialCharacters(String txt){  if (txt == null) {    return txt;  }  int len=txt.length();  if (len == 0) {    return txt;  }  StringBuilder buf=new StringBuilder();  for (int i=0; i < len; i++) {    char c=txt.charAt(i);switch (c) {case '&':      buf.append("&amp;");    break;case '<':  buf.append("&lt;");break;case '>':buf.append("&gt;");break;case '\"':buf.append("&quot;");break;case '\'':buf.append("&apos;");break;case '/':buf.append("&#47;");break;case '\u00A0':buf.append("&#x00A0;");break;default :buf.append(c);}}return buf.toString();}  }
class C{  @Override public void destroySubcontext(String name) throws NamingException {  getBoundContext().destroySubcontext(parseName(name));}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  public boolean containsObject(NSObject obj){  return set.contains(obj);}  }
class C{  int checkValidYear(long prolepticYear){  if (prolepticYear < getMinimumYear() || prolepticYear > getMaximumYear()) {    throw new DateTimeException("Invalid Hijrah year: " + prolepticYear);  }  return (int)prolepticYear;}  }
class C{  public X509Principal(boolean reverse,Hashtable lookUp,String dirName){  super(reverse,lookUp,dirName);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  public WindowBeanshell(BoardFrame p_board_frame){  super(p_board_frame);  stat=board_frame.stat;  workFrame=new JFrame("Ammi Client Beanshell");  workPanel=(JPanel)workFrame.getContentPane();  bshConsole=new JConsole();  workPanel.add(bshConsole,BorderLayout.CENTER);  workPanel.add(newButtons(),BorderLayout.NORTH);  workFrame.setSize(500,500);  bshInterp=new Interpreter(bshConsole);}  }
class C{  public ApplicationImpl(ApplicationServiceFactory applicationServiceFactory){  this.applicationServiceFactory=applicationServiceFactory;}  }
class C{  public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  private static void rdf_EmptyPropertyElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  boolean hasPropertyAttrs=false;  boolean hasResourceAttr=false;  boolean hasNodeIDAttr=false;  boolean hasValueAttr=false;  Node valueNode=null;  if (xmlNode.hasChildNodes()) {    throw new XMPException("Nested content not allowed with rdf:resource or property attributes",BADRDF);  }  for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {    Node attribute=xmlNode.getAttributes().item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      continue;    }    int attrTerm=getRDFTermKind(attribute);switch (attrTerm) {case RDFTERM_ID:      break;case RDFTERM_RESOURCE:    if (hasNodeIDAttr) {      throw new XMPException("Empty property element can't have both rdf:resource and rdf:nodeID",BADRDF);    } else     if (hasValueAttr) {      throw new XMPException("Empty property element can't have both rdf:value and rdf:resource",BADXMP);    }  hasResourceAttr=true;if (!hasValueAttr) {  valueNode=attribute;}break;case RDFTERM_NODE_ID:if (hasResourceAttr) {throw new XMPException("Empty property element can't have both rdf:resource and rdf:nodeID",BADRDF);}hasNodeIDAttr=true;break;case RDFTERM_OTHER:if ("value".equals(attribute.getLocalName()) && NS_RDF.equals(attribute.getNamespaceURI())) {if (hasResourceAttr) {throw new XMPException("Empty property element can't have both rdf:value and rdf:resource",BADXMP);}hasValueAttr=true;valueNode=attribute;} else if (!XML_LANG.equals(attribute.getNodeName())) {hasPropertyAttrs=true;}break;default :throw new XMPException("Unrecognized attribute of empty property element",BADRDF);}}XMPNode childNode=addChildNode(xmp,xmpParent,xmlNode,"",isTopLevel);boolean childIsStruct=false;if (hasValueAttr || hasResourceAttr) {childNode.setValue(valueNode != null ? valueNode.getNodeValue() : "");if (!hasValueAttr) {childNode.getOptions().setURI(true);}} else if (hasPropertyAttrs) {childNode.getOptions().setStruct(true);childIsStruct=true;}for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {Node attribute=xmlNode.getAttributes().item(i);if (attribute == valueNode || "xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {continue;}int attrTerm=getRDFTermKind(attribute);switch (attrTerm) {case RDFTERM_ID:case RDFTERM_NODE_ID:break;case RDFTERM_RESOURCE:addQualifierNode(childNode,"rdf:resource",attribute.getNodeValue());break;case RDFTERM_OTHER:if (!childIsStruct) {addQualifierNode(childNode,attribute.getNodeName(),attribute.getNodeValue());} else if (XML_LANG.equals(attribute.getNodeName())) {addQualifierNode(childNode,XML_LANG,attribute.getNodeValue());} else {addChildNode(xmp,childNode,attribute,attribute.getNodeValue(),false);}break;default :throw new XMPException("Unrecognized attribute of empty property element",BADRDF);}}}  }
class C{  ChildIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  initNodeTest(DTMFilter.SHOW_ALL);}  }
class C{  public static int indexOf(final String value,final String needle,int offset,boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.indexOf(needle,offset);  }  return value.toLowerCase().indexOf(needle.toLowerCase(),offset);}  }
class C{  public static String removeSlashFromBeginning(String string){  if (string != null && !string.equals("") && string.charAt(0) == '/') {    return string.substring(1,string.length());  }  return string;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  cot=getStringOptionValue(FedCLIConstants.ARGUMENT_COT);  String[] params={realm,cot};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_COT",params);  try {    CircleOfTrustManager cotManager=new CircleOfTrustManager(ssoToken);    cotManager.deleteCircleOfTrust(realm,cot);    Object[] obj={cot};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("delete-circle-of-trust-succeeded"),obj));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_COT",params);  } catch (  COTException e) {    debugWarning("DeleteCircleOfTrust.handleRequest",e);    String[] args={realm,cot,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_COT",args);    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public FlacStreamReader(RandomAccessFile raf){  this.raf=raf;}  }
class C{  public void testAddMathContextEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.2313E+41";  int cScale=-37;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(5,RoundingMode.UP);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenomodificationallowederr.class,args);}  }
class C{  public InconsistentTypeCode(String reason){  super(reason);}  }
class C{  public int size(){  return map.size();}  }
class C{  public int hashCode(){  return ((location == null ? 0 : location.hashCode() << 24) ^ (env == null ? 0 : env.hashCode() << 16) ^ (className == null ? 0 : className.hashCode() << 8)^ (data == null ? 0 : data.hashCode()));}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  protected void removeFromMapping(){  if (path != null) {    removeMapping(this);    for (int counter=getChildCount() - 1; counter >= 0; counter--)     ((TreeStateNode)getChildAt(counter)).removeFromMapping();  }}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  private void loadConfiguration(){  mApiToken=mConfigurationManager.getString(PREF_API_TOKEN,"");  mKitUrl=mConfigurationManager.getString(PREF_KIT_URL,"");}  }
class C{  private void assertOnlyNewestRecordIsLeft(FileChangeNumberIndexDB cnIndexDB,int newestChangeNumber) throws ChangelogException {  assertEquals(cnIndexDB.count(),1);  assertFalse(cnIndexDB.isEmpty());  final ChangeNumberIndexRecord oldest=cnIndexDB.getOldestRecord();  final ChangeNumberIndexRecord newest=cnIndexDB.getNewestRecord();  assertEquals(oldest.getChangeNumber(),newestChangeNumber);  assertEquals(oldest.getChangeNumber(),newest.getChangeNumber());  assertEquals(oldest.getBaseDN(),newest.getBaseDN());  assertEquals(oldest.getCSN(),newest.getCSN());}  }
class C{  @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  public void clear(){  m.clear();}  }
class C{  public CODESET_INCOMPATIBLE(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public Object validateValue() throws Throwable {  if (tag == ERROR) {    rethrowError();  }  if (value == NO_VALUE) {    return null;  }  if (elementType == value.getClass() || elementType.isInstance(value)) {    return copyValue();  } else {    throw new AnnotationTypeMismatchException(definingMethod,value.getClass().getName());  }}  }
class C{  public void damageRange(JTextComponent a,int b,int c,Position.Bias d,Position.Bias e){  for (int i=0; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).damageRange(a,b,c,d,e);  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.NamePronouncedElement createNamePronouncedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.NamePronouncedElementImpl();}  }
class C{  public void testConstructorSignBytesException1(){  byte aBytes[]={123,45,-3,-76};  int aSign=3;  try {    new BigInteger(aSign,aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void persist(@NonNull final String module,@NonNull final String key,@Nullable final String previousKey,@Nullable final String value){  persist(module,key,previousKey,value,false);}  }
class C{  public void ssoTokenChanged(SSOTokenEvent evt){  try {    int type=evt.getType();switch (type) {case SSOTokenEvent.SSO_TOKEN_IDLE_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_MAX_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_DESTROY:      SSOToken token=evt.getToken();    clearAllData(token.getTokenID());  break;}} catch (SSOException ssoe) {}}  }
class C{  public static long toLong(byte[] b,int off){  return (((long)b[off + 7]) & 0xFF) + ((((long)b[off + 6]) & 0xFF) << 8) + ((((long)b[off + 5]) & 0xFF) << 16)+ ((((long)b[off + 4]) & 0xFF) << 24)+ ((((long)b[off + 3]) & 0xFF) << 32)+ ((((long)b[off + 2]) & 0xFF) << 40)+ ((((long)b[off + 1]) & 0xFF) << 48)+ ((((long)b[off + 0]) & 0xFF) << 56);}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ITEM_STATE_CHANGED:    typeStr="ITEM_STATE_CHANGED";  break;default :typeStr="unknown type";}String stateStr;switch (stateChange) {case SELECTED:stateStr="SELECTED";break;case DESELECTED:stateStr="DESELECTED";break;default :stateStr="unknown type";}return typeStr + ",item=" + item+ ",stateChange="+ stateStr;}  }
class C{  public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public void close() throws IOException {  if (!def.finished()) {    finish();  }  def.end();  out.close();}  }
class C{  public DoubleArraySpliterator(double[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  return decode(buf,0,p);}  }
class C{  private void assertNoAnno(Collection<AST.Anno> annos) throws SyntaxException {  if (!annos.isEmpty()) {    err.SyntaxException("JavaScript don't have annotations",annos.iterator().next().line_col());  }}  }
class C{  private void disableMapper() throws Exception {  String externalDN="cn=EXTERNAL,cn=SASL Mechanisms,cn=config";  String mapperDN="cn=Subject Equals DN,cn=Certificate Mappers,cn=config";  assertModifyReplaceIsSuccess(externalDN,"ds-cfg-certificate-mapper",mapperDN);}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  @Override public V put(K key,V value){  if (locked)   throw new IllegalStateException(sm.getString("parameterMap.locked"));  return (super.put(key,value));}  }
class C{  public void updateBlur(){  invalidate();}  }
class C{  public void noEntrySelected(){  searchResult=null;  delete.setVisible(false);  saveChanges.setVisible(false);  cardLayout.show(mainPanel,NOTHING_SELECTED);  displayedEntryPanel=null;}  }
class C{  @Override public void onDestroy(){  for (  SystemServiceEventMonitor monitor : MONITORS) {    try {      monitor.stop();      Logger.w(TAG,monitor.getMonitorName() + " stopped");    } catch (    Exception e) {      Logger.e(TAG,monitor.getMonitorName() + " did not stop.\nThe following error occurred: " + e+ e.getMessage()+ e.getStackTrace());    }  }  isAlreadyRunning=false;  alertUserOnStartStop(false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrreplacechild1.class,args);}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  public PdfPage addNewPage(PageSize pageSize){  checkClosingStatus();  PdfPage page=new PdfPage(this,pageSize);  checkAndAddPage(page);  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.START_PAGE,page));  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.INSERT_PAGE,page));  return page;}  }
class C{  public void toggleExpanded(){  if (isExpanded()) {    collapse();  } else {    expand();  }}  }
class C{  public ImageIcon(Image image,String description){  this(image);  this.description=description;}  }
class C{  private Border createNonRolloverToggleBorder(){  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.RadioButtonBorder(table.getColor("ToggleButton.shadow"),table.getColor("ToggleButton.darkShadow"),table.getColor("ToggleButton.light"),table.getColor("ToggleButton.highlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public void testSetScaleRoundUp(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478139";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_UP);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public final boolean parentOf(ThreadGroup g){  for (; g != null; g=g.parent) {    if (g == this) {      return true;    }  }  return false;}  }
class C{  public static SearchRequest newSingleEntrySearchRequest(final DN name,final SearchScope scope,final Filter filter,final String... attributeDescriptions){  return newSearchRequest(name,scope,filter,attributeDescriptions).setSizeLimit(1);}  }
class C{  public RandomAccessFileOrArray(IRandomAccessSource byteSource){  this.byteSource=byteSource;}  }
class C{  public void commitResize(){  resizeWidgetIfNeeded(true);  requestLayout();}  }
class C{  public void testFlipBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,13,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public QueryResults equalitySelect(String table,List<String> projection,List<DbDataContainer> predicatesAndValues) throws GroundDBException, EmptyResultException {  String select="select ";  for (  String item : projection) {    select+=item + ", ";  }  select=select.substring(0,select.length() - 2) + " from " + table;  if (predicatesAndValues.size() > 0) {    select+=" where ";    for (    DbDataContainer container : predicatesAndValues) {      select+=container.getField() + " = ? and ";    }    select=select.substring(0,select.length() - 4);  }  try {    PreparedStatement preparedStatement=this.connection.prepareStatement(select + ";");    int index=1;    for (    DbDataContainer container : predicatesAndValues) {      PostgresClient.setValue(preparedStatement,container.getValue(),container.getGroundType(),index);      index++;    }    LOGGER.info("Executing query: " + preparedStatement.toString() + ".");    ResultSet resultSet=preparedStatement.executeQuery();    if (!resultSet.isBeforeFirst()) {      throw new EmptyResultException("No results found for query: " + preparedStatement.toString());    }    resultSet.next();    return new PostgresResults(resultSet);  } catch (  SQLException e) {    LOGGER.error("Unexpected error in database query: " + e.getMessage());    throw new GroundDBException(e.getMessage());  }}  }
class C{  public boolean isInteractive(){  return !noPromptArg.isPresent();}  }
class C{  private javax.security.cert.X509Certificate[] createPeerCertificateChain() throws SSLPeerUnverifiedException {  try {    javax.security.cert.X509Certificate[] chain=new javax.security.cert.X509Certificate[peerCertificates.length];    for (int i=0; i < peerCertificates.length; i++) {      byte[] encoded=peerCertificates[i].getEncoded();      chain[i]=javax.security.cert.X509Certificate.getInstance(encoded);    }    return chain;  } catch (  CertificateEncodingException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }catch (  CertificateException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic192Element createBasic192Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic192ElementImpl();}  }
class C{  public DOM2Helper(){}  }
class C{  private Map xmlToResourcePrefixes(String xmlResourcePrefixes){  Map resourcePrefixes=new HashMap();  try {    Document document=XMLUtils.getXMLDocument(new ByteArrayInputStream(xmlResourcePrefixes.getBytes("UTF8")));    if ((document != null)) {      Node rootNode=XMLUtils.getRootNode(document,RESOURCE_PREFIXES);      if (rootNode != null) {        Set nodeSet=XMLUtils.getChildNodes(rootNode,PREFIX);        if (nodeSet != null) {          Iterator nodes=nodeSet.iterator();          while (nodes.hasNext()) {            Node node=(Node)nodes.next();            String prefix=XMLUtils.getNodeAttributeValue(node,NAME);            String count=XMLUtils.getNodeAttributeValue(node,COUNT);            if ((prefix != null) && (count != null)) {              resourcePrefixes.put(prefix,count);            }          }        }      }    }  } catch (  Exception xmle) {    PolicyManager.debug.error("XML parsing error for resource prefixes " + " in organization: " + org);  }  return resourcePrefixes;}  }
class C{  public JPasswordField(String text){  this(null,text,0);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String xacmlSamlNsPrefix="";  String xacmlSamlNsDeclaration="";  if (declareNS) {    xacmlSamlNsDeclaration=XACMLConstants.XACML_SAML_NS_DECLARATION;  }  if (includeNSPrefix) {    xacmlSamlNsPrefix=XACMLConstants.XACML_SAML_NS_PREFIX;  }  sb.append("\n<").append(XACMLConstants.SAML_NS_PREFIX).append(XACMLConstants.SAML_STATEMENT).append(XACMLConstants.SAML_NS_DECLARATION).append(XACMLConstants.XSI_TYPE_XACML_AUTHZ_DECISION_STATEMENT).append(XACMLConstants.XSI_NS_DECLARATION).append(XACMLConstants.XACML_SAML_NS_DECLARATION).append(">\n");  if (response != null) {    sb.append(response.toXMLString(includeNSPrefix,true));  }  if (request != null) {    sb.append(request.toXMLString(includeNSPrefix,true));  }  sb.append("</").append(XACMLConstants.SAML_NS_PREFIX).append(XACMLConstants.SAML_STATEMENT).append(">");  return sb.toString();}  }
class C{  private boolean backendSupportsControl(final String oid){  return backend != null && backend.supportsControl(oid);}  }
class C{  void parseAttributeSpecificationList(Element elem) throws IOException {  while (true) {    skipSpace();switch (ch) {case '/':case '>':case '<':case -1:      return;case '-':    if ((ch=readCh()) == '-') {      ch=readCh();      parseComment();      strpos=0;    } else {      error("invalid.tagchar","-",elem.getName());      ch=readCh();    }  continue;}AttributeList att;String attname;String attvalue;if (parseIdentifier(true)) {attname=getString(0);skipSpace();if (ch == '=') {  ch=readCh();  skipSpace();  att=elem.getAttribute(attname);  attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION)&& (att.type != NAME));} else {  attvalue=attname;  att=elem.getAttributeByValue(attvalue);  if (att == null) {    att=elem.getAttribute(attname);    if (att != null) {      attvalue=att.getValue();    } else {      attvalue=null;    }  }}} else if (!strict && ch == ',') {ch=readCh();continue;} else if (!strict && ch == '"') {ch=readCh();skipSpace();if (parseIdentifier(true)) {  attname=getString(0);  if (ch == '"') {    ch=readCh();  }  skipSpace();  if (ch == '=') {    ch=readCh();    skipSpace();    att=elem.getAttribute(attname);    attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION));  } else {    attvalue=attname;    att=elem.getAttributeByValue(attvalue);    if (att == null) {      att=elem.getAttribute(attname);      if (att != null) {        attvalue=att.getValue();      }    }  }} else {  char str[]={(char)ch};  error("invalid.tagchar",new String(str),elem.getName());  ch=readCh();  continue;}} else if (!strict && (attributes.isEmpty()) && (ch == '=')) {ch=readCh();skipSpace();attname=elem.getName();att=elem.getAttribute(attname);attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION));} else if (!strict && (ch == '=')) {ch=readCh();skipSpace();attvalue=parseAttributeValue(true);error("attvalerr");return;} else {char str[]={(char)ch};error("invalid.tagchar",new String(str),elem.getName());if (!strict) {  ch=readCh();  continue;} else {  return;}}if (att != null) {attname=att.getName();} else {error("invalid.tagatt",attname,elem.getName());}if (attributes.isDefined(attname)) {error("multi.tagatt",attname,elem.getName());}if (attvalue == null) {attvalue=((att != null) && (att.value != null)) ? att.value : HTML.NULL_ATTRIBUTE_VALUE;} else if ((att != null) && (att.values != null) && !att.values.contains(attvalue)) {error("invalid.tagattval",attname,elem.getName());}HTML.Attribute attkey=HTML.getAttributeKey(attname);if (attkey == null) {attributes.addAttribute(attname,attvalue);} else {attributes.addAttribute(attkey,attvalue);}}}  }
class C{  public static String decode(String encoded){  return decode(encoded,encryptor);}  }
class C{  public static void assertJsonValue(JsonValue jsonValue,String resourceFilePath) throws IOException {  assertThat(jsonValue.toString()).isEqualTo(jsonFromFile(resourceFilePath).toString());}  }
class C{  public void processMouseEvent(MouseEvent e,MenuElement path[],MenuSelectionManager manager){  processMenuDragMouseEvent(new MenuDragMouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getX(),e.getY(),e.getXOnScreen(),e.getYOnScreen(),e.getClickCount(),e.isPopupTrigger(),path,manager));}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  try {    KeyManagerFactory.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      KeyManagerFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyManagerFactory.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider().getName(),mProv.getName());    checkResult(keyMF);  }}  }
class C{  public WorldCreator generator(String generator,CommandSender output){  this.generator=getGeneratorForName(name,generator,output);  return this;}  }
class C{  public PrivacyHeader createPrivacyHeader(String privacyType){  if (privacyType == null)   throw new NullPointerException("null privacyType arg");  Privacy privacy=new Privacy(privacyType);  return privacy;}  }
class C{  protected static boolean isAdminGroupsEnabled(String orgDN) throws AMException {  if (!isUnderRootSuffix(orgDN)) {    return false;  }  try {    if (AMDCTree.gsc == null) {      ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()));      AMDCTree.gsc=scm.getGlobalSchema();    }    Map attrMap=AMDCTree.gsc.getReadOnlyAttributeDefaults();    Set values=(Set)attrMap.get(ADMIN_GROUPS_ENABLED_ATTR);    boolean enabled=false;    if (values == null || values.isEmpty()) {      enabled=false;    } else {      String val=(String)values.iterator().next();      enabled=(val.equalsIgnoreCase("true"));    }    if (debug.messageEnabled()) {      debug.message("Compliance.isAdminGroupsEnabled = " + enabled);    }    return enabled;  } catch (  SMSException ex) {    debug.error(AMSDKBundle.getString("357"),ex);    throw new AMException(AMSDKBundle.getString("357"),"357");  }catch (  SSOException ex) {    debug.error(AMSDKBundle.getString("357"),ex);    throw new AMException(AMSDKBundle.getString("357"),"357");  }}  }
class C{  public SIPDialog(SipProviderImpl sipProvider,SIPResponse sipResponse){  this(sipProvider);  this.sipStack=(SIPTransactionStack)sipProvider.getSipStack();  this.setLastResponse(null,sipResponse);  this.localSequenceNumber=sipResponse.getCSeq().getSeqNumber();  this.originalLocalSequenceNumber=localSequenceNumber;  this.localParty=sipResponse.getFrom().getAddress();  this.remoteParty=sipResponse.getTo().getAddress();  this.method=sipResponse.getCSeq().getMethod();  this.callIdHeader=sipResponse.getCallId();  this.serverTransactionFlag=false;  this.setLocalTag(sipResponse.getFrom().getTag());  this.setRemoteTag(sipResponse.getTo().getTag());  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("Creating a dialog : " + this);    logger.logStackTrace();  }  this.isBackToBackUserAgent=sipStack.isBackToBackUserAgent;  addEventListener(sipStack);  releaseReferences=sipStack.isAggressiveCleanup();}  }
class C{  private static float[] HSVtoRGB(float[] hsv,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  float hue=hsv[0];  float saturation=hsv[1];  float value=hsv[2];  rgb[0]=value;  rgb[1]=value;  rgb[2]=value;  if (saturation > 0.0f) {    hue=(hue < 1.0f) ? hue * 6.0f : 0.0f;    int integer=(int)hue;    float f=hue - (float)integer;switch (integer) {case 0:      rgb[1]*=1.0f - saturation * (1.0f - f);    rgb[2]*=1.0f - saturation;  break;case 1:rgb[0]*=1.0f - saturation * f;rgb[2]*=1.0f - saturation;break;case 2:rgb[0]*=1.0f - saturation;rgb[2]*=1.0f - saturation * (1.0f - f);break;case 3:rgb[0]*=1.0f - saturation;rgb[1]*=1.0f - saturation * f;break;case 4:rgb[0]*=1.0f - saturation * (1.0f - f);rgb[1]*=1.0f - saturation;break;case 5:rgb[1]*=1.0f - saturation;rgb[2]*=1.0f - saturation * f;break;}}return rgb;}  }
class C{  private Builder(net.aimeizi.person.QueryParameter other){  super(net.aimeizi.person.QueryParameter.SCHEMA$);  if (isValidValue(fields()[0],other.ageStart)) {    this.ageStart=data().deepCopy(fields()[0].schema(),other.ageStart);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.ageEnd)) {    this.ageEnd=data().deepCopy(fields()[1].schema(),other.ageEnd);    fieldSetFlags()[1]=true;  }}  }
class C{  public NetPermission(String name,String actions){  super(name,actions);}  }
class C{  public boolean isPurgeHistoricalSubcommand(){  return isSubcommand(PURGE_HISTORICAL_SUBCMD_NAME);}  }
class C{  public static String encode(String s){  String str=null;  try {    str=encode(s,"UTF8");  } catch (  UnsupportedEncodingException e) {  }  return str;}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return getService().dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public static float parseFloat(String lexicalXSDFloat){  if (theConverter == null)   initConverter();  return theConverter.parseFloat(lexicalXSDFloat);}  }
class C{  public AddResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public COTException(Throwable t){  super(t);}  }
class C{  public void testDSAProvider() throws Exception {  AlgorithmParameters params=AlgorithmParameters.getInstance("DSA");  assertEquals("Algorithm","DSA",params.getAlgorithm());  BigInteger p=BigInteger.ONE;  BigInteger q=BigInteger.TEN;  BigInteger g=BigInteger.ZERO;  params.init(new DSAParameterSpec(p,q,g));  byte[] enc=params.getEncoded();  assertNotNull(enc);  assertNotNull(params.getEncoded("ASN.1"));  DSAParameterSpec spec=params.getParameterSpec(DSAParameterSpec.class);  assertEquals("p is wrong ",p,spec.getP());  assertEquals("q is wrong ",q,spec.getQ());  assertEquals("g is wrong ",g,spec.getG());  params=AlgorithmParameters.getInstance("DSA");  params.init(enc);  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));  params=AlgorithmParameters.getInstance("DSA");  params.init(enc,"ASN.1");  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));  params=AlgorithmParameters.getInstance("DSA");  try {    params.init(enc,"DOUGLASMAWSON");    fail("unsupported format should have raised IOException");  } catch (  IOException e) {  }}  }
class C{  public RepeatTime createRepeatTime(int repeatInterval,int activeDuration,int[] offsets){  RepeatField repeatTimeField=new RepeatField();  try {    repeatTimeField.setRepeatInterval(repeatInterval);    repeatTimeField.setActiveDuration(activeDuration);    repeatTimeField.setOffsetArray(offsets);  } catch (  SdpException s) {    s.printStackTrace();  }  return repeatTimeField;}  }
class C{  protected void onConnected(){}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  protected void collapse(boolean adjustTree){  if (isExpanded()) {    Enumeration cursor=preorderEnumeration();    cursor.nextElement();    int rowsDeleted=0;    boolean isFixed=isFixedRowHeight();    int lastYEnd;    if (isFixed)     lastYEnd=0; else     lastYEnd=getPreferredHeight() + getYOrigin();    int startHeight=getPreferredHeight();    int startYEnd=lastYEnd;    int myRow=getRow();    if (!isFixed) {      while (cursor.hasMoreElements()) {        TreeStateNode node=(TreeStateNode)cursor.nextElement();        if (node.isVisible()) {          rowsDeleted++;          lastYEnd=node.getYOrigin() + node.getPreferredHeight();        }      }    } else {      while (cursor.hasMoreElements()) {        TreeStateNode node=(TreeStateNode)cursor.nextElement();        if (node.isVisible()) {          rowsDeleted++;        }      }    }    for (int counter=rowsDeleted + myRow; counter > myRow; counter--) {      visibleNodes.removeElementAt(counter);    }    expanded=false;    if (myRow == -1)     markSizeInvalid(); else     if (adjustTree)     updatePreferredSize(myRow);    if (myRow != -1 && adjustTree && (rowsDeleted > 0 || startHeight != getPreferredHeight())) {      startYEnd+=(getPreferredHeight() - startHeight);      if (!isFixed && (myRow + 1) < getRowCount() && startYEnd != lastYEnd) {        int counter, maxCounter, shiftAmount;        shiftAmount=startYEnd - lastYEnd;        for (counter=myRow + 1, maxCounter=visibleNodes.size(); counter < maxCounter; counter++)         ((TreeStateNode)visibleNodes.elementAt(counter)).shiftYOriginBy(shiftAmount);      }      didAdjustTree();      visibleNodesChanged();    }    if (treeSelectionModel != null && rowsDeleted > 0 && myRow != -1) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  private JPanel createLogPanel(){  JCheckBox cbOutsideLogs=UIFactory.makeJCheckBox(INFO_DELETE_OUTSIDE_LOGS_LABEL.get(),INFO_DELETE_OUTSIDE_LOGS_TOOLTIP.get(),UIFactory.TextStyle.INSTRUCTIONS);  cbOutsideLogs.setSelected(true);  hmCbs.put(FieldName.EXTERNAL_LOG_FILES,cbOutsideLogs);  return createOutsidePathPanel(cbOutsideLogs,outsideLogs,INFO_DELETE_OUTSIDE_LOGS_MSG.get());}  }
class C{  private static void extractLineItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"line found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float x1=0;    float y1=0;    float x2=0;    float y2=0;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("x1")) {        x1=Float.parseFloat(value);      } else       if (name.equals("y1")) {        y1=Float.parseFloat(value);      } else       if (name.equals("x2")) {        x2=Float.parseFloat(value);      } else       if (name.equals("y2")) {        y2=Float.parseFloat(value);      }    }    if (!pureTransparent && avg != null && !Float.isNaN(x1) && !Float.isNaN(y1) && !Float.isNaN(x2) && !Float.isNaN(y2)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(x1,y1);      builder.absoluteLineTo(x2,y2);      child.setPathData(builder.toString());    }  }}  }
class C{  public static byte[] LZWDecode(byte[] in){  ByteArrayOutputStream out=new ByteArrayOutputStream();  LZWDecoder lzw=new LZWDecoder();  lzw.decode(in,out);  return out.toByteArray();}  }
class C{  public void testHashCode(){  int effectiveKeyBits=0;  byte[] iv=new byte[]{1,2,3,4,5,6,7,8};  RC2ParameterSpec ps1=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps2=new RC2ParameterSpec(effectiveKeyBits,iv);  assertTrue("Equal objects should have the same hash codes.",ps1.hashCode() == ps2.hashCode());}  }
class C{  public static boolean isTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;}  }
class C{  public void fillOval(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling oval: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillOval(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillOval(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillOval(x,y,width,height);}  }
class C{  public static int combine(int hashCode,float value){  int v=Float.floatToIntBits(value);  return combine(hashCode,v);}  }
class C{  public static boolean isJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be decoded using Q codec");  }}  }
class C{  public RouterActivityLogger(ConnectionFactory connectionFactory,boolean suspendException){  this.connectionFactory=connectionFactory;  this.suspendException=suspendException;  IdentityServer identityServer=IdentityServer.getInstance();  this.logFullObjects=Boolean.valueOf(identityServer.getProperty(OPENIDM_AUDIT_LOG_FULL_OBJECTS,"false"));}  }
class C{  private boolean hasNext(Pattern pattern){  if (!hasNext()) {    return false;  }  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));  return matcher.find();}  }
class C{  public InternalSessionEvent(InternalSession internalSession,SessionEventType eventType){  this(internalSession,eventType,Time.currentTimeMillis());}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  public synchronized boolean isAutoWaitForIdle(){  return isAutoWaitForIdle;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiMenuItemUI();  return MultiLookAndFeel.createUIs(mui,((MultiMenuItemUI)mui).uis,a);}  }
class C{  boolean isConfigSame(Dictionary<String,Object> newCfg,Dictionary<String,Object> oldCfg,boolean strict){  if (newCfg == null || oldCfg == null) {    return oldCfg == newCfg;  }  Dictionary<String,Object> newCompare=new Hashtable<>(new DictionaryAsMap<>(newCfg));  String newPropVal=(String)newCompare.get(JSONEnhancedConfig.JSON_CONFIG_PROPERTY);  JsonValue newJsonConfig=JsonUtil.parseStringified(newPropVal);  Dictionary<String,Object> oldCompare=new Hashtable<>(new DictionaryAsMap<>(oldCfg));  String oldPropVal=(String)oldCompare.get(JSONEnhancedConfig.JSON_CONFIG_PROPERTY);  JsonValue oldJsonConfig=JsonUtil.parseStringified(oldPropVal);  if (!strict) {    newJsonConfig.remove(ResourceResponse.FIELD_CONTENT_ID);    newJsonConfig.remove(ResourceResponse.FIELD_CONTENT_REVISION);    oldJsonConfig.remove(ResourceResponse.FIELD_CONTENT_ID);    oldJsonConfig.remove(ResourceResponse.FIELD_CONTENT_REVISION);  }  return oldJsonConfig.isEqualTo(newJsonConfig);}  }
class C{  private File file(String id) throws IOException {  if (this.directory == null) {    return null;  }  String filename=id + FILE_EXT;  File file=new File(directory(),filename);  return file;}  }
class C{  void addRootOutline(PdfOutline outline){  if (!outlineMode)   return;  if (pagesWithOutlines.size() == 0) {    put(PdfName.Outlines,outline.getContent());  }}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public void putData(Map data){  if (isCommonData()) {    getGlobalData().putAll(data);  } else {    getInstanceData().putAll(data);  }}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public final void resume(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      threads[i].resume();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    groupsSnapshot[i].resume();  }}  }
class C{  public AttributeDesignator(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("AttributeDesignator: Input is null.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=null;  tag=element.getLocalName();  if ((tag == null) || (!tag.equals("AttributeDesignator"))) {    SAMLUtilsCommon.debug.message("AttributeDesignator: wrong input");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  int i=0;  NamedNodeMap atts=((Node)element).getAttributes();  int attrCount=atts.getLength();  for (i=0; i < attrCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null || attName.length() == 0) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("AttributeDesignator:" + "Attribute Name is either null or empty.");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));      }      if (attName.equals("AttributeName")) {        _attributeName=((Attr)att).getValue().trim();      } else       if (attName.equals("AttributeNamespace")) {        _attributeNameSpace=((Attr)att).getValue().trim();      }    }  }  if (_attributeName == null || _attributeName.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeDesignator: " + "AttributeName is required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  if (_attributeNameSpace == null || _attributeNameSpace.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeDesignator: " + "AttributeNamespace is required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("AttributeDesignator: illegal input!");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));      }    }  }}  }
class C{  private JobService rangeGeneral(String key,long from,long to,String order,Handler<AsyncResult<List<Job>>> handler){  if (to < from) {    handler.handle(Future.failedFuture("to can not be greater than from"));    return this;  }  client.zrange(RedisHelper.getKey(key),from,to,null);  return this;}  }
class C{  public PasswordExpiringControl(int secondsUntilExpiration){  this(false,secondsUntilExpiration);}  }
class C{  protected void check(){  if (host.getAutoDeploy()) {    DeployedApplication[] apps=deployed.values().toArray(new DeployedApplication[0]);    for (int i=0; i < apps.length; i++) {      if (!isServiced(apps[i].name))       checkResources(apps[i],false);    }    if (host.getUndeployOldVersions()) {      checkUndeploy();    }    deployApps();  }}  }
class C{  public QName(String qname,PrefixResolver resolver){  this(qname,resolver,false);}  }
class C{  public void paintRadioButtonMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public WebtopParser(){}  }
class C{  public ThreadGroup(ThreadGroup parent,String name){  this(checkParentAccess(parent),parent,name);}  }
class C{  public void selectAllAccessibleSelection(){  JList.this.addSelectionInterval(0,getAccessibleChildrenCount() - 1);}  }
class C{  private void populateDefaultUserAttributes() throws AMException {  int[] sessionAttrs=getDefaultSessionAttributes(getOrgDN());  maxSession=sessionAttrs[0];  idleTime=sessionAttrs[1];  cacheTime=sessionAttrs[2];  userEnabled=true;  if (DEBUG.messageEnabled()) {    DEBUG.message("Populate Default User attributes" + "\n  idle->" + idleTime + "\n  cache->"+ cacheTime+ "\n  max->"+ maxSession+ "\n  userLoginEnabled->"+ userEnabled+ "\n  clientUserSuccessURL ->"+ clientUserSuccessURL+ "\n  defaultUserSuccessURL ->"+ defaultUserSuccessURL+ "\n  clientUserFailureURL ->"+ clientUserFailureURL+ "\n  defaultUserFailureURL ->"+ defaultUserFailureURL+ "\n  clientSuccessRoleURL ->"+ clientSuccessRoleURL+ "\n  defaultSuccessRoleURL ->"+ defaultSuccessRoleURL+ "\n  clientFailureRoleURL ->"+ clientFailureRoleURL+ "\n  defaultFailureRoleURL ->"+ defaultFailureRoleURL+ "\n  userAuthConfig ->"+ userAuthConfig+ "\n  charset->"+ localeContext.getMIMECharset()+ "\n  locale->"+ localeContext.getLocale().toString());  }}  }
class C{  protected String paramString(){  String labelString=(label != null ? label : "");  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  String lightWeightPopupEnabledString=(isLightWeightPopupEnabled() ? "true" : "false");  return super.paramString() + ",desiredLocationX=" + desiredLocationX+ ",desiredLocationY="+ desiredLocationY+ ",label="+ labelString+ ",lightWeightPopupEnabled="+ lightWeightPopupEnabledString+ ",margin="+ marginString+ ",paintBorder="+ paintBorderString;}  }
class C{  public void installUI(JComponent c){  splitPane=(JSplitPane)c;  dividerLocationIsSet=false;  dividerKeyboardResize=false;  keepHidden=false;  installDefaults();  installListeners();  installKeyboardActions();  setLastDragLocation(-1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnametotallength.class,args);}  }
class C{  private Promise<Void,ResourceException> revokeTokens(final String tokenId,ActionRequest request){  try {    JsonValue token=getToken(tokenId);    String username=getAttributeValue(token,USERNAME);    if (StringUtils.isEmpty(username)) {      debug.error("TokenResource :: revokeTokens : No username associated with " + "token with ID, " + tokenId + ".");      throw new NotFoundException("Not Found",null);    }    final JsonValue jVal=request.getContent();    final String clientIdParameter=jVal.get(OAuth2Constants.Params.CLIENT_ID).asString();    if (StringUtils.isEmpty(clientIdParameter)) {      debug.error("TokenResource :: revokeTokens : No clientId provided");      throw new BadRequestException("Missing clientId",null);    }    final String clientId=getAttributeValue(token,OAuthTokenField.CLIENT_ID.getOAuthField());    if (!clientId.equalsIgnoreCase(clientIdParameter)) {      debug.error("TokenResource :: revokeTokens : clientIds do not match");      throw new ForbiddenException("Unauthorized",null);    } else {      deleteAccessTokensRefreshToken(token);      tokenStore.delete(tokenId);    }    return newResultPromise(null);  } catch (  CoreTokenException e) {    return new ServiceUnavailableException(e.getMessage(),e).asPromise();  }catch (  ResourceException e) {    return e.asPromise();  }}  }
class C{  public void mouseExited(MouseEvent event){  boolean shouldHide=true;  if (insideComponent == null) {  }  if (window != null && event.getSource() == window && insideComponent != null) {    Container insideComponentWindow=insideComponent.getTopLevelAncestor();    if (insideComponentWindow != null) {      Point location=event.getPoint();      SwingUtilities.convertPointToScreen(location,window);      location.x-=insideComponentWindow.getX();      location.y-=insideComponentWindow.getY();      location=SwingUtilities.convertPoint(null,location,insideComponent);      if (location.x >= 0 && location.x < insideComponent.getWidth() && location.y >= 0 && location.y < insideComponent.getHeight()) {        shouldHide=false;      } else {        shouldHide=true;      }    }  } else   if (event.getSource() == insideComponent && tipWindow != null) {    Window win=SwingUtilities.getWindowAncestor(insideComponent);    if (win != null) {      Point location=SwingUtilities.convertPoint(insideComponent,event.getPoint(),win);      Rectangle bounds=insideComponent.getTopLevelAncestor().getBounds();      location.x+=bounds.x;      location.y+=bounds.y;      Point loc=new Point(0,0);      SwingUtilities.convertPointToScreen(loc,tip);      bounds.x=loc.x;      bounds.y=loc.y;      bounds.width=tip.getWidth();      bounds.height=tip.getHeight();      if (location.x >= bounds.x && location.x < (bounds.x + bounds.width) && location.y >= bounds.y && location.y < (bounds.y + bounds.height)) {        shouldHide=false;      } else {        shouldHide=true;      }    }  }  if (shouldHide) {    enterTimer.stop();    if (insideComponent != null) {      insideComponent.removeMouseMotionListener(this);    }    insideComponent=null;    toolTipText=null;    mouseEvent=null;    hideTipWindow();    exitTimer.restart();  }}  }
class C{  public void testDisableExternalGeneralEntities() throws Exception {  String xml="<!DOCTYPE foo [" + "  <!ENTITY bar SYSTEM \"/no-such-document.xml\">" + "]>"+ "<foo>&bar;</foo>";  testDisableExternalEntities("http://xml.org/sax/features/external-general-entities",xml);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssUsernameToken10Element createWssUsernameToken10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssUsernameToken10ElementImpl();}  }
class C{  public String[] listChildren(SetRelationDefinition<?,?> d){  validateRelationDefinition(d);  return serverContext.listManagedObjects(path,d);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  private static boolean jwtHasAudienceClaim(JwtClaimsSet jwtClaims) throws AuthLoginException {  List<String> audienceClaim=jwtClaims.getAudience();  return (audienceClaim != null && !audienceClaim.isEmpty());}  }
class C{  public ASCIIReader(InputStream inputStream,int size){  fInputStream=inputStream;  fBuffer=new byte[size];}  }
class C{  @Override public Foo remove(Serializable primaryKey) throws NoSuchFooException {  Session session=null;  try {    session=openSession();    Foo foo=(Foo)session.get(FooImpl.class,primaryKey);    if (foo == null) {      if (_log.isDebugEnabled()) {        _log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);      }      throw new NoSuchFooException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);    }    return remove(foo);  } catch (  NoSuchFooException nsee) {    throw nsee;  }catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public BindOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,String protocolVersion,ByteString rawBindDN,String saslMechanism,ByteString saslCredentials){  super(clientConnection,operationID,messageID,requestControls);  this.protocolVersion=protocolVersion;  this.authType=AuthenticationType.SASL;  this.saslMechanism=saslMechanism;  this.saslCredentials=saslCredentials;  setRawBindDN(rawBindDN);  cancelResult=getBindCancelResult();}  }
class C{  public static void checkDBDirPermissions(String dbDirPermissions,DN configDN,ConfigChangeResult ccr){  try {    FilePermission backendPermission=decodeDBDirPermissions(dbDirPermissions,configDN);    if (!backendPermission.isOwnerWritable() || !backendPermission.isOwnerReadable() || !backendPermission.isOwnerExecutable()) {      addErrorMessage(ccr,ERR_CONFIG_BACKEND_INSANE_MODE.get(dbDirPermissions));    }  } catch (  ConfigException ce) {    addErrorMessage(ccr,ce.getMessageObject());  }}  }
class C{  public static MatchedValuesFilter createGreaterOrEqualFilter(AttributeType attributeType,ByteString assertionValue){  Reject.ifNull(attributeType,assertionValue);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(GREATER_OR_EQUAL_TYPE,rawAttributeType,assertionValue,null,null,null,null);  filter.attributeType=attributeType;  filter.assertionValue=assertionValue;  return filter;}  }
class C{  public static Scenario s9_empty_repository(){  return new ScenarioBuilder().getScenario();}  }
class C{  synchronized static Object findRegisteredComponentOfType(JComponent from,Class target){  JRootPane rp=SwingUtilities.getRootPane(from);  if (rp != null) {    for (int counter=components.size() - 1; counter >= 0; counter--) {      Object component=((WeakReference)components.get(counter)).get();      if (component == null) {        components.remove(counter);      } else       if (target.isInstance(component) && SwingUtilities.getRootPane((Component)component) == rp) {        return component;      }    }  }  return null;}  }
class C{  public DiscoveryFragmentGeneratorApi(ToolOptions options){  this.options=options;  this.dataPath=getDataPath();}  }
class C{  protected Popup(){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionType createOperationalProtectionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionTypeImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.IDPSSODescriptorType createIDPSSODescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.IDPSSODescriptorTypeImpl();}  }
class C{  @DataProvider(name="badimportexport") public Object[][] createBadData() throws Exception {  return new Object[][]{{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-backend-id: userRoot","ds-task-import-exclude-filter: ()"),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-backend-id: userRoot","ds-task-import-include-filter: ()"),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-backend-id: doesnotexist"),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-backend-id: monitor"),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-backend-id: userRoot","ds-task-import-include-branch: dc=opends,dc=org"),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: " + ldifFile.getPath()),ResultCode.UNWILLING_TO_PERFORM},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-ldif-file: doesnotexist","ds-task-import-backend-id: userRoot"),ResultCode.UNWILLING_TO_PERFORM}};}  }
class C{  public NetClass append_net_class(){  NetClass new_class=net_classes.append(layer_structure,clearance_matrix,itera_board);  NetClass default_class=net_classes.get(0);  new_class.set_via_rule(default_class.get_via_rule());  new_class.set_trace_half_width(default_class.get_trace_half_width(0));  new_class.set_trace_clearance_class(default_class.get_trace_clearance_class());  return new_class;}  }
class C{  public static Class<?> loadClassWithout(ClassLoader loader,String className) throws ClassNotFoundException {  return javax.management.loading.DefaultLoaderRepository.loadClassWithout(loader,className);}  }
class C{  public void testCase13(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public void clientChanged(String clientType,int dbType,int opType){  if (debug.messageEnabled()) {    debug.message(CLASS + "clientChanged() Notification: " + "clientType = "+ clientType+ " :DB = "+ dbType+ " : Op = "+ opType);  }  if ((clientType == null) || (clientType.length() == 0)) {    return;  }  if (opType == AMClientCapData.ADDED) {    if (dbType == AMClientCapData.INTERNAL) {      if (!internalClientData.containsKey(clientType)) {        Map iMap=intCapInstance.loadMinimalClient(clientType);        Map oMap=(Map)mergedClientData.get(clientType);        Map mMap=mergeMap(oMap,iMap);        handleParentChange(clientType,mMap);        unloadClient(clientType);      }    } else     if (dbType == AMClientCapData.EXTERNAL) {synchronized (updatedClients) {        if (!externalClientData.containsKey(clientType)) {          Map eMap=extCapInstance.loadMinimalClient(clientType);          Map oMap=(Map)mergedClientData.get(clientType);          Map mMap=mergeMap(oMap,eMap);          handleParentChange(clientType,mMap);          unloadClient(clientType);        }      }    }  } else   if (opType == AMClientCapData.MODIFIED) {synchronized (updatedClients) {      if (updatedClients.contains(clientType)) {        updatedClients.remove(clientType);      } else {        Map cMap=extCapInstance.loadMinimalClient(clientType);        Map oMap=(Map)mergedClientData.get(clientType);        Map mMap=mergeMap(oMap,cMap);        handleParentChange(clientType,mMap);        unloadClient(clientType);      }    }  } else   if (opType == AMClientCapData.REMOVED) {    if (externalClientData.containsKey(clientType)) {      removeFromMaps(clientType);    }  } else {    debug.warning(CLASS + "clientChanged(): unknown OpType");  }}  }
class C{  public static String serialize(Serializable object) throws JobPersistenceException {  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(baos);    oos.writeObject(object);    oos.flush();    oos.close();    return Base64.encode(baos.toByteArray());  } catch (  Exception e) {    e.printStackTrace();    throw new JobPersistenceException(e.getMessage());  }}  }
class C{  public boolean isFedStatusActive(){  return this.isActive;}  }
class C{  public ConfigException createClassLoadingExceptionAdaptor(DN dn,String className,Exception e){  LocalizableMessage message=ERR_ADMIN_CANNOT_INSTANTIATE_CLASS.get(className,dn,stackTraceToSingleLineString(e,true));  return new ConfigException(message,e);}  }
class C{  public int length(){  return m_length;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public String flattenToString(Context context){  String flattened=componentName.flattenToString();  if (user != null) {    flattened+="#" + UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  }  return flattened;}  }
class C{  @Override protected void stopInternal() throws LifecycleException {  setState(LifecycleState.STOPPING);  try {    protocolHandler.stop();  } catch (  Exception e) {    throw new LifecycleException(sm.getString("coyoteConnector.protocolHandlerStopFailed"),e);  }}  }
class C{  protected void releaseContent(){  super.releaseContent();  try {    if (outputStream != null) {      outputStream.close();      outputStream=null;    }  } catch (  IOException e) {    throw new PdfException(PdfException.IoException,e);  }}  }
class C{  private void buildStatic(ClassWriter classWriter,List<Instruction> staticIns,List<ExceptionTable> exceptionTable){  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_STATIC,"<clinit>","()V",null,null);  buildInstructions(methodVisitor,new CodeInfo(0),staticIns,exceptionTable,VoidType.get());  methodVisitor.visitEnd();}  }
class C{  public JTextPane(){  super();  EditorKit editorKit=createDefaultEditorKit();  String contentType=editorKit.getContentType();  if (contentType != null && getEditorKitClassNameForContentType(contentType) == defaultEditorKitMap.get(contentType)) {    setEditorKitForContentType(contentType,editorKit);  }  setEditorKit(editorKit);}  }
class C{  public boolean shouldStripWhiteSpace(XPathContext support,int targetElement) throws TransformerException {  if (null != m_whiteSpaceInfoList) {    while (DTM.NULL != targetElement) {      DTM dtm=support.getDTM(targetElement);      WhiteSpaceInfo info=(WhiteSpaceInfo)m_whiteSpaceInfoList.getTemplate(support,targetElement,null,false,dtm);      if (null != info)       return info.getShouldStripSpace();      int parent=dtm.getParent(targetElement);      if (DTM.NULL != parent && DTM.ELEMENT_NODE == dtm.getNodeType(parent))       targetElement=parent; else       targetElement=DTM.NULL;    }  }  return false;}  }
class C{  public ModelTypeTable cloneEmpty(){  return new ModelTypeTable(typeTable.cloneEmpty(),typeNameConverter);}  }
class C{  public static void assertJsonValue(JsonValue jsonValue,String resourceFilePath) throws IOException {  assertThat(jsonValue.toString()).isEqualTo(jsonFromFile(resourceFilePath).toString());}  }
class C{  private boolean checkOTP(String otp) throws AuthLoginException {  AMIdentity id=null;  id=getIdentity(userName);  if (id == null) {    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  byte[] secretKeyBytes=getSharedSecret(id);  String otpGen=null;  try {    if (algorithm == HOTP) {      int counter=0;      Set<String> counterSet=null;      try {        if (StringUtils.isEmpty(counterAttrName)) {          debug.error("OATH" + ".checkOTP() : " + "invalid counter attribute name : ");          throw new AuthLoginException(amAuthOATH,"authFailed",null);        }        counterSet=id.getAttribute(counterAttrName);      } catch (      IdRepoException e) {        debug.error("OATH" + ".checkOTP() : " + "error getting counter attribute : ",e);        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }catch (      SSOException e) {        debug.error("OATH" + ".checkOTP() : " + "error invalid repo id : "+ id,e);        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      if (counterSet == null || counterSet.isEmpty()) {        debug.error("OATH" + ".checkOTP() : " + "Counter value is empty or null");        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      try {        counter=Integer.parseInt((String)(counterSet.iterator().next()));      } catch (      NumberFormatException e) {        debug.error("OATH" + ".checkOTP() : " + "Counter is not a valid number",e);        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      if (windowSize < 0) {        debug.error("OATH" + ".checkOTP() : " + "Window size is not valid");        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      counter++;      for (int i=0; i <= windowSize; i++) {        otpGen=HOTPAlgorithm.generateOTP(secretKeyBytes,counter + i,passLen,checksum,truncationOffset);        if (isEqual(otpGen,otp)) {          setCounterAttr(id,counter + i);          return true;        }      }    } else     if (algorithm == TOTP) {      validateTOTPParameters();      clockDriftCheckEnabled=!StringUtils.isEmpty(observedClockDriftAttrName);      Set attrNames=new HashSet();      String lastLoginTimeAttrValue="";      String lastObservedClockDriftAttr=null;      Map<String,Set<String>> totpAttributeValues=null;      long lastClockDriftInSeconds=0;      long lastLoginTimeInSeconds=0;      attrNames.add(loginTimeAttrName);      if (clockDriftCheckEnabled) {        attrNames.add(observedClockDriftAttrName);      }      try {        totpAttributeValues=id.getAttributes(attrNames);        if (!totpAttributeValues.isEmpty()) {          lastLoginTimeAttrValue=CollectionHelper.getMapAttr(totpAttributeValues,loginTimeAttrName);          if (lastLoginTimeAttrValue != null && !lastLoginTimeAttrValue.isEmpty()) {            lastLoginTimeInSeconds=Long.parseLong(lastLoginTimeAttrValue);          }          if (lastLoginTimeInSeconds < 0) {            debug.error("OATH.checkOTP(): invalid login time value: " + lastLoginTimeInSeconds);            throw new AuthLoginException(amAuthOATH,"authFailed",null);          }          if (clockDriftCheckEnabled) {            lastObservedClockDriftAttr=CollectionHelper.getMapAttr(totpAttributeValues,observedClockDriftAttrName);            if (!StringUtils.isEmpty(lastObservedClockDriftAttr)) {              lastClockDriftInSeconds=Long.parseLong(lastObservedClockDriftAttr);            } else {              if (debug.messageEnabled()) {                debug.message("OATH.checkOTP(): last observed time drift Set was empty");              }            }          }        } else {          debug.error("OATH.checkOTP(): error TOTP attributes were empty");          throw new AuthLoginException(amAuthOATH,"authFailed",null);        }      } catch (      IdRepoException e) {        debug.error("OATH.checkOTP(): error getting TOTP attributes : ",e);        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }catch (      SSOException e) {        debug.error("OATH.checkOTP(): error invalid repo id : " + id,e);        throw new AuthLoginException(amAuthOATH,"authFailed",null);      }      long lastLoginTimeStep=lastLoginTimeInSeconds / totpTimeStep;      long currentTimeStep=(timeInSeconds / totpTimeStep) + (lastClockDriftInSeconds / totpTimeStep);      if (lastLoginTimeStep == currentTimeStep) {        debug.error("OATH.checkOTP(): Login failed attempting to use the same OTP in same Time Step: " + currentTimeStep);        throw new InvalidPasswordException(amAuthOATH,"authFailed",null,userName,null);      }      boolean sameWindow=false;      if (lastLoginTimeStep >= (currentTimeStep - totpStepsInWindow) && lastLoginTimeStep <= (currentTimeStep + totpStepsInWindow)) {        if (debug.messageEnabled()) {          debug.message("OATH.checkOTP(): Login in the same TOTP window");        }        sameWindow=true;      }      if (debug.messageEnabled()) {        debug.message("OATH.checkOTP(): values lastLoginTimeInSeconds: " + lastLoginTimeInSeconds + " lastLoginTimeStep: "+ lastLoginTimeStep+ " sameWindow:"+ sameWindow+ " \n clockDriftSeconds:  "+ lastClockDriftInSeconds+ " clockDriftCheckEnabled:  "+ clockDriftCheckEnabled);      }      String passLenStr=Integer.toString(passLen);      otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(currentTimeStep),passLenStr);      if (isEqual(otpGen,otp)) {        setLoginTime(id,currentTimeStep);        return true;      }      for (int curTimeStepOffSet=1; curTimeStepOffSet <= totpStepsInWindow; curTimeStepOffSet++) {        long timeInFutureStep=currentTimeStep + curTimeStepOffSet;        long timeInPastStep=currentTimeStep - curTimeStepOffSet;        otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(timeInFutureStep),passLenStr);        if (isEqual(otpGen,otp)) {          setLoginTime(id,timeInFutureStep);          return true;        }        otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(timeInPastStep),passLenStr);        if (isEqual(otpGen,otp) && sameWindow) {          debug.error("OATH.checkOTP(): " + "Login the same window with a OTP that is older than the current OTP");          return false;        } else         if (isEqual(otpGen,otp) && !sameWindow) {          setLoginTime(id,timeInPastStep);          return true;        }      }    } else {      debug.error("OATH.checkOTP(): No OTP algorithm selected");      throw new AuthLoginException(amAuthOATH,"authFailed",null);    }  } catch (  AuthLoginException e) {    throw e;  }catch (  Exception e) {    debug.error("OATH.checkOTP(): checkOTP process failed : ",e);    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }  return false;}  }
class C{  public boolean containsValue(Object value){  for (LinkedHashMap.Entry<K,V> e=head; e != null; e=e.after) {    V v=e.value;    if (v == value || (value != null && value.equals(v)))     return true;  }  return false;}  }
class C{  private static String tryHashStringSha256(Context context,String input){  String salt=createSalt(context);  try {    MessageDigest hash=MessageDigest.getInstance("SHA-256");    hash.reset();    hash.update(input.getBytes());    hash.update(salt.getBytes());    byte[] hashedBytes=hash.digest();    return bytesToHex(hashedBytes);  } catch (  NoSuchAlgorithmException e) {    return input;  }}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public StatusDetailImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  private static QueryRequest makeMockQueryRequest(){  QueryRequest mockRequest=mock(QueryRequest.class);  given(mockRequest.getAdditionalParameter(QueryResponsePresentation.REMAINING)).willReturn("true");  return mockRequest;}  }
class C{  @Override public boolean equals(Object obj){  boolean equalled=true;  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  NotSubject object=(NotSubject)obj;  if (eSubject == null) {    if (object.getESubject() != null) {      return false;    }  } else {    if (!eSubject.equals(object.getESubject())) {      return false;    }  }  if (pSubjectName == null) {    if (object.getPSubjectName() != null) {      return false;    }  } else {    if (!pSubjectName.equals(object.getPSubjectName())) {      return false;    }  }  return equalled;}  }
class C{  @Override public Privilege findByName(String name) throws EntitlementException {  return findByName(name,getAdminSubject());}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  @Override protected final ShapeTile[] calculate_tree_shapes(AwtreeShapeSearch p_search_tree){  return new ShapeTile[0];}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  PrincipalName krb5Principal;  try {    krb5Principal=new PrincipalName(fullName,nameType);    oos.writeObject(krb5Principal.asn1Encode());    oos.writeObject(krb5Principal.getRealm().asn1Encode());  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message){  showInternalMessageDialog(parentComponent,message,UIManager.getString("OptionPane.messageDialogTitle",parentComponent),INFORMATION_MESSAGE);}  }
class C{  public MiApplicationWindow1(){  initialize();}  }
class C{  protected static void cleanDeletedOrgCache(String orgDN){  String tdn=orgDN;  while (!tdn.equalsIgnoreCase(rootSuffix)) {    if (deletedOrg.containsKey(tdn)) {synchronized (deletedOrg) {        deletedOrg.remove(tdn);      }    }    tdn=DN.valueOf(tdn).parent().toString().toLowerCase();  }}  }
class C{  protected void headerName(int tok) throws ParseException {  this.lexer.match(tok);  this.lexer.SPorHT();  this.lexer.match(':');  this.lexer.SPorHT();}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
