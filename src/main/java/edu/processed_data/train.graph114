class C{  public static boolean supportsWebActions(AccessibilityNodeInfoCompat node){  return AccessibilityNodeInfoUtils.supportsAnyAction(node,AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT,AccessibilityNodeInfoCompat.ACTION_PREVIOUS_HTML_ELEMENT);}  }
class C{  public static boolean isDesignTime(){  return ThreadGroupContext.getContext().isDesignTime();}  }
class C{  private static String[][] buildTypeArrayFromString(String accept){  if ((accept == null) || (accept.length() == 0)) {    return new String[0][0];  }  StringBuilder typeSubType;  String type;  String subtype;  String level=null;  String quality=null;  Map<String,Object> appMap=FacesContext.getCurrentInstance().getExternalContext().getApplicationMap();  String[] types=Util.split(appMap,accept,CONTENT_TYPE_DELIMITER);  String[][] arrayAccept=new String[types.length][MAX_CONTENT_TYPE_PARTS];  int index=-1;  for (int i=0; i < types.length; i++) {    String token=types[i].trim();    index+=1;    if (token.contains(";")) {      String[] typeParts=Util.split(appMap,token,";");      typeSubType=new StringBuilder(typeParts[0].trim());      for (int j=1; j < typeParts.length; j++) {        quality="not set";        token=typeParts[j].trim();        if (token.contains("level")) {          typeSubType.append(';').append(token);          String[] levelParts=Util.split(appMap,token,"=");          level=levelParts[0].trim();          if (level.equalsIgnoreCase("level")) {            level=levelParts[1].trim();          }        } else {          quality=token;          String[] qualityParts=Util.split(appMap,quality,"=");          quality=qualityParts[0].trim();          if (quality.equalsIgnoreCase("q")) {            quality=qualityParts[1].trim();            break;          } else {            quality="not set";          }        }      }    } else {      typeSubType=new StringBuilder(token);      quality="not set";    }    if (typeSubType.indexOf(CONTENT_TYPE_SUBTYPE_DELIMITER) >= 0) {      String[] typeSubTypeParts=Util.split(appMap,typeSubType.toString(),CONTENT_TYPE_SUBTYPE_DELIMITER);      if (typeSubTypeParts.length == 1) {        type=typeSubTypeParts[0].trim();        subtype="*";      } else       if (typeSubTypeParts.length == 0) {        type=typeSubType.toString();        subtype="";      } else {        type=typeSubTypeParts[0].trim();        subtype=typeSubTypeParts[1].trim();      }    } else {      type=typeSubType.toString();      subtype="";    }    if ("not set".equals(quality)) {      if (type.equals("*") && subtype.equals("*")) {        quality="0.01";      } else       if (!type.equals("*") && subtype.equals("*")) {        quality="0.02";      } else       if (type.equals("*") && subtype.length() == 0) {        quality="0.01";      } else {        quality="1";      }    }    arrayAccept[index][0]=quality;    arrayAccept[index][1]=type;    arrayAccept[index][2]=subtype;    arrayAccept[index][3]=level;  }  return (arrayAccept);}  }
class C{  public FileInputReader(String f) throws IOException {  if (Debug.debugging("binaryfile")) {    Debug.output("FileInputReader created from " + f);  }  File file=new File(f);  name=file.getName();  absolutePath=file.getAbsolutePath();  inputFile=init(file);}  }
class C{  private Operation buildDatastoreSetQuery(final State current){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  public void testAddDiffScaleZeroZero(){  String a="0";  int aScale=-15;  String b="0";  int bScale=10;  String c="0E-10";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public static int intersectPath(PathIterator p,double x,double y,double w,double h){  int cross=0;  int count;  double mx, my, cx, cy;  mx=my=cx=cy=0.0;  double coords[]=new double[6];  double rx1=x;  double ry1=y;  double rx2=x + w;  double ry2=y + h;  while (!p.isDone()) {    count=0;switch (p.currentSegment(coords)) {case PathIterator.SEG_MOVETO:      if (cx != mx || cy != my) {        count=intersectLine(cx,cy,mx,my,rx1,ry1,rx2,ry2);      }    mx=cx=coords[0];  my=cy=coords[1];break;case PathIterator.SEG_LINETO:count=intersectLine(cx,cy,cx=coords[0],cy=coords[1],rx1,ry1,rx2,ry2);break;case PathIterator.SEG_QUADTO:count=intersectQuad(cx,cy,coords[0],coords[1],cx=coords[2],cy=coords[3],rx1,ry1,rx2,ry2);break;case PathIterator.SEG_CUBICTO:count=intersectCubic(cx,cy,coords[0],coords[1],coords[2],coords[3],cx=coords[4],cy=coords[5],rx1,ry1,rx2,ry2);break;case PathIterator.SEG_CLOSE:if (cy != my || cx != mx) {count=intersectLine(cx,cy,mx,my,rx1,ry1,rx2,ry2);}cx=mx;cy=my;break;}if (count == CROSSING) {return CROSSING;}cross+=count;p.next();}if (cy != my) {count=intersectLine(cx,cy,mx,my,rx1,ry1,rx2,ry2);if (count == CROSSING) {return CROSSING;}cross+=count;}return cross;}  }
class C{  public boolean isDocumentAllDeclarationsProcessed(int documentHandle){  return false;}  }
class C{  private void doParentClosureVisit(Node node,Set<Node> closure){  if (closure.contains(node))   return;  closure.add(node);  for (  Edge edge : getEdges(node)) {    Node sub=Edges.traverseReverseDirected(node,edge);    if (sub != null) {      doParentClosureVisit(sub,closure);    }  }}  }
class C{  private static File astFile(final String uriOrFileName){  try {    final String astFileName=uriOrFileName + ".xml";    return uriOrFileName.startsWith("file:") ? new File(URI.create(astFileName)) : new File(astFileName);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void rebalance(final Cache cache){  if (isRebalancing()) {    cache.getResourceManager().createRebalanceFactory().start();  }}  }
class C{  public boolean isHorizonClippingEnabled(){  return this.iconRenderer.isHorizonClippingEnabled();}  }
class C{  public abbr addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void dealAll(CardCollection that){  int n=size();  deal(that,n);}  }
class C{  protected void configurePopup(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setBorderPainted(true);  setBorder(LIST_BORDER);  setOpaque(false);  add(scroller);  setDoubleBuffered(true);  setFocusable(false);}  }
class C{  public BaseScriptingEnvironment(BridgeContext ctx){  bridgeContext=ctx;  document=ctx.getDocument();  docPURL=new ParsedURL(((SVGDocument)document).getURL());  userAgent=bridgeContext.getUserAgent();}  }
class C{  @Override public void clear(){  while (queue.poll() != null)   ;  modCount++;  Arrays.fill(table,null);  size=0;  while (queue.poll() != null)   ;}  }
class C{  public PotentialConsumer createPotentialConsumer(final Object baseObject,final AttributeType type){  String methodName=type.getMethodName();  Class<?> dataType=type.getDataType();  PotentialConsumer consumer=createPotentialConsumer(baseObject,methodName,dataType);  String description=type.getBaseDescription();  consumer.setCustomDescription(description);  return consumer;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void checkServices(String update){  TreeSet<String> props=new TreeSet<>();  Enumeration<URL> us;  try {    us=getClass().getClassLoader().getResources(ELKIServiceLoader.RESOURCE_PREFIX);  } catch (  IOException e) {    throw new AbortException("Error enumerating service folders.",e);  }  while (us.hasMoreElements()) {    URL u=us.nextElement();    try {      if (("jar".equals(u.getProtocol()))) {        JarURLConnection con=(JarURLConnection)u.openConnection();        try (JarFile jar=con.getJarFile()){          Enumeration<JarEntry> entries=jar.entries();          while (entries.hasMoreElements()) {            String prop=entries.nextElement().getName();            if (prop.startsWith(ELKIServiceLoader.RESOURCE_PREFIX)) {              props.add(prop.substring(ELKIServiceLoader.RESOURCE_PREFIX.length()));            } else             if (prop.startsWith(ELKIServiceLoader.FILENAME_PREFIX)) {              props.add(prop.substring(ELKIServiceLoader.FILENAME_PREFIX.length()));            }          }        }         continue;      }      if ("file".equals(u.getProtocol())) {        props.addAll(Arrays.asList(new File(u.toURI()).list()));      }    } catch (    IOException|URISyntaxException e) {      throw new AbortException("Error enumerating service folders.",e);    }  }  for (  String prop : props) {    if (LOG.isVerbose()) {      LOG.verbose("Checking property: " + prop);    }    checkService(prop,update);  }}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void testMultipleDatasources() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/multi-datasource-test/test");  final String expected="Got connections!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (getBitFromSystemName(systemName) != 0);}  }
class C{  public void update() throws IOException {  parentDb.store(this);  clearValues();}  }
class C{  private static void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  public static String applyActionsToString(OFInstructionApplyActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  public int lastIndexOf(int ch,int fromIndex){  return 0;}  }
class C{  public boolean localArgumentAvailable(Environment env,Context ctx){  MemberDefinition reff=ctx.field;  if (reff.getClassDefinition() != client) {    throw new CompilerError("localArgumentAvailable");  }  return (reff.isConstructor() || reff.isVariable() || reff.isInitializer());}  }
class C{  public boolean isLocal(){  return "file".equalsIgnoreCase(url.getProtocol());}  }
class C{  private void sendAction(String action){  Intent intent=new Intent(this,CaptureService.class);  intent.setAction(action);  startService(intent);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  ComputeImageList response=client.get(ComputeImageList.class,baseUrl);  return ResourceUtils.defaultList(response.getComputeImages());}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean isFullyZoomedOutX(){  if (mScaleX > mMinScaleX || mMinScaleX > 1f)   return false; else   return true;}  }
class C{  void resendOneToOneFile(ContactId contact,MmContent file,MmContent fileIcon,String fileTransferId){  long timestamp=System.currentTimeMillis();  long timestampSent=timestamp;  if (!ServerApiUtils.isImsConnected()) {    setOneToOneFileTransferStateAndTimestamp(fileTransferId,contact,State.QUEUED,timestamp,timestampSent);    return;  }  if (!mImService.isFileTransferSessionAvailable() || mImService.isMaxConcurrentOutgoingFileTransfersReached()) {    if (sLogger.isActivated()) {      sLogger.debug("The max number of file transfer sessions is achieved: re-queue the file transfer with Id ".concat(fileTransferId));    }    setOneToOneFileTransferStateAndTimestamp(fileTransferId,contact,State.QUEUED,timestamp,timestampSent);    return;  }  setOneToOneFileTransferStateAndTimestamp(fileTransferId,contact,State.INITIATING,timestamp,timestampSent);  FileTransferProtocol ftProtocol=getFileTransferProtocolForOneToOneFileTransfer(contact);  if (ftProtocol == null) {    throw new ServerApiGenericException("No valid file transfer protocol could be determined for resending file with Id '" + fileTransferId + "'!");  }  final FileSharingSession session=mImService.createFileTransferSession(fileTransferId,contact,file,fileIcon,timestamp,ftProtocol);  OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(fileTransferId);  session.addListener(oneToOneFileTransfer);  session.startSession();}  }
class C{  public static String join(String separator,Object... elements){  if (elements == null || elements.length == 0) {    return "";  }  return join(separator,Arrays.asList(elements));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(stack.getUIMgrSafe().getVideoFrame().getSubtitleDelay());}  }
class C{  public void fling(int velocityX,int velocityY){  if (getChildCount() > 0) {    int width=getWidth() - getPaddingRight() - getPaddingLeft();    int right=getChildAt(0).getWidth();    int height=getHeight() - getPaddingBottom() - getPaddingTop();    int bottom=getChildAt(0).getHeight();    mScroller.fling(getScrollX(),getScrollY(),velocityX,velocityY,0,Math.max(0,right - width),0,Math.max(0,bottom - height));    invalidate();  }}  }
class C{  void addNumber(int number,String url){  addPageInfo(new PageParamInfo.PageInfo(number,url));}  }
class C{  void addAvailableElement(QName elemName){  m_availElems.put(elemName,elemName);}  }
class C{  @SuppressWarnings("unused") private static int shlosserJackknifeEstimator(int nRows,int sampleSize,ReaderColumnSelection sampleRowsReader){  HashMap<DblArray,Integer> valsCount=getValCounts(sampleRowsReader);  double nBar=((double)sampleSize) / valsCount.size();  double u=0;  for (  int cnt : valsCount.values()) {    u+=Math.pow(cnt - nBar,2);  }  u/=nBar;  if (sampleSize != usedSampleSize)   computeCriticalValue(sampleSize);  if (u < uniformityCriticalValue) {    return smoothedJackknifeEstimator(nRows,sampleSize,sampleRowsReader,valsCount);  } else {    return shlosserEstimator(nRows,sampleSize,sampleRowsReader,valsCount);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (periodic: ");  result.append(periodic);  result.append(')');  return result.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns03.class,args);}  }
class C{  private void sequenceCommand(long sequence,ServerSessionContext session,CompletableFuture<Result> future,ThreadContext context){  if (!log.isOpen()) {    context.executor().execute(null);    return;  }  Result result=session.getResult(sequence);  if (result == null) {    context.executor().execute(null);  } else {    context.executor().execute(null);  }}  }
class C{  private static void awaitAcceptable(ServerSocketChannel channel) throws IOException {  Selector selector=Selector.open();  SelectionKey key=channel.register(selector,SelectionKey.OP_ACCEPT);  try {    assertEquals(true,awaitOp(selector,key,SelectionKey.OP_ACCEPT));  }  finally {    key.cancel();    selector.close();  }}  }
class C{  public static void registerErrorBundle(ResourceBundle bundle){  registerErrorBundle(bundle,false);}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  private void writeStringWithoutLength(String s,int len){  int p=pos;  byte[] buff=data;  for (int i=0; i < len; i++) {    int c=s.charAt(i);    if (c < 0x80) {      buff[p++]=(byte)c;    } else     if (c >= 0x800) {      buff[p++]=(byte)(0xe0 | (c >> 12));      buff[p++]=(byte)(((c >> 6) & 0x3f));      buff[p++]=(byte)(c & 0x3f);    } else {      buff[p++]=(byte)(0xc0 | (c >> 6));      buff[p++]=(byte)(c & 0x3f);    }  }  pos=p;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("IdocvtblctlgTV ver [");  buffer.append(ver);  buffer.append("] logDocColName [");  buffer.append(logDocColName);  buffer.append("] docColName [");  buffer.append(docColName);  buffer.append("] docColFmtDef [");  buffer.append(docColFmtDef);  buffer.append("] primaryColName [");  buffer.append(primaryColName);  buffer.append("] from [");  buffer.append(from);  buffer.append("] where [");  buffer.append(where);  buffer.append("] orderBy [");  buffer.append(orderBy);  buffer.append("]");  return buffer.toString();}  }
class C{  public static Map<String,Object> endPreviousDay(GenericValue techDataCalendar,Timestamp dateFrom){  Map<String,Object> result=FastMap.newInstance();  Timestamp dateTo=null;  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return ServiceUtil.returnError("Pb reading Calendar Week associated with calendar");  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  Time startTime=(Time)position.get("startTime");  int moveDay=((Integer)position.get("moveDay")).intValue();  Double capacity=(Double)position.get("capacity");  dateTo=(moveDay == 0) ? dateFrom : UtilDateTime.getDayEnd(dateFrom,Long.valueOf(moveDay));  Timestamp endAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateTo).getTime() + startTime.getTime() + capacity.longValue()+ cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateTo.after(endAvailablePeriod)) {    dateTo=endAvailablePeriod;  } else {    dateTo=UtilDateTime.getDayStart(dateTo,-1);    cDateTrav.setTime(dateTo);    position=dayEndCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));    startTime=(Time)position.get("startTime");    moveDay=((Integer)position.get("moveDay")).intValue();    capacity=(Double)position.get("capacity");    if (moveDay != 0)     dateTo=UtilDateTime.getDayStart(dateTo,moveDay);    dateTo.setTime(dateTo.getTime() + startTime.getTime() + capacity.longValue()+ cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  }  result.put("dateTo",dateTo);  result.put("previousCapacity",position.get("capacity"));  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.176 -0500",hash_original_method="F334246A42A35DCD33E898B66500F960",hash_generated_method="8C3482C65DAFD6353C1FE0C003DBDD4F") public int stat(String messageId) throws IOException {  return sendCommand(NNTPCommand.STAT,messageId);}  }
class C{  @Override public boolean supportsAlterTableWithAddColumn(){  debugCodeCall("supportsAlterTableWithAddColumn");  return true;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().queue(t.get2(),0,null);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  void updateSetting(ConnectionInfo info){  connInfoMap.put(info.name,info);  info.lastAccess=ticker++;}  }
class C{  int weave(Advice advice,List<String> toObserve) throws PTAgentException {  int[] observedVariableIndices=new int[toObserve.size()];  for (int i=0; i < observedVariableIndices.length; i++) {    int exportIndex=exportedVariables.indexOf(toObserve.get(i));    if (exportIndex == -1) {      throw new PTAgentException("Hardcoded tracepoint %s does not export any variable %s",id,toObserve.get(i));    } else {      observedVariableIndices[i]=exportIndex;    }  }  ConfiguredAdvice a=new ConfiguredAdvice(advice,observedVariableIndices);  while (true) {    ConfiguredAdvice[] oldWoven=woven.get();    for (    ConfiguredAdvice e : oldWoven) {      if (e.id == a.id) {        throw new PTAgentException("Cannot weave multiple advice with the same id %s",id);      }    }    ConfiguredAdvice[] newWoven=new ConfiguredAdvice[oldWoven.length + 1];    System.arraycopy(oldWoven,0,newWoven,0,oldWoven.length);    newWoven[oldWoven.length]=a;    if (woven.compareAndSet(oldWoven,newWoven)) {      return a.id;    }  }}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  protected int read(){  int curByte=0;  try {    curByte=in.read();  } catch (  IOException e) {    status=STATUS_FORMAT_ERROR;  }  return curByte;}  }
class C{  public boolean isFocusPainted(){  return paintFocus;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  static void write(long ptr,int hash,byte[] keyBytes,byte[] valBytes,GridUnsafeMemory mem){  hash(ptr,hash,mem);  writeKeyLength(ptr,keyBytes.length,mem);  writeValueLength(ptr,valBytes.length,mem);  writeKeyBytes(ptr,keyBytes,mem);  writeValueBytes(ptr,keyBytes.length,valBytes,mem);}  }
class C{  public URL url(){  return this.path;}  }
class C{  public ImageLoader(ImageProducer p,ChangeListener changeListener,String description){  producer=p;  addChangeListener(changeListener);  consumer=new InnerImageConsumer();  p.startProduction(consumer);  this.description=description;}  }
class C{  public boolean isStopping(){  return this.isStopping;}  }
class C{  private CachedExceptionSet computeBlockExceptionSet(BasicBlock basicBlock,TypeFrame result) throws DataflowAnalysisException {  ExceptionSet exceptionSet=computeThrownExceptionTypes(basicBlock);  TypeFrame copyOfResult=createFact();  copy(result,copyOfResult);  CachedExceptionSet cachedExceptionSet=new CachedExceptionSet(copyOfResult,exceptionSet);  thrownExceptionSetMap.put(basicBlock,cachedExceptionSet);  return cachedExceptionSet;}  }
class C{  public static Calendar truncate(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar truncated=(Calendar)date.clone();  modify(truncated,field,ModifyType.TRUNCATE);  return truncated;}  }
class C{  public void characters(char[] ch,int start,int length) throws Exception {  buff.append(ch,start,length);}  }
class C{  @Override @NoInline public final Address allocSlowOnce(int bytes,int align,int offset){  bytes=getMaximumAlignedSize(bytes,align);  int sizeClass=space.getSizeClass(bytes);  Address cell=freeList.get(sizeClass);  if (cell.isZero()) {    Address block=currentBlock.get(sizeClass);    if (!block.isZero()) {      space.returnConsumedBlock(block,sizeClass);      currentBlock.set(sizeClass,Address.zero());    }    block=space.getAllocationBlock(sizeClass,freeList);    if (!block.isZero()) {      currentBlock.set(sizeClass,block);      cell=freeList.get(sizeClass);      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(!cell.isZero());    } else {      return Address.zero();    }  }  freeList.set(sizeClass,cell.loadAddress());  cell.store(Address.zero());  return alignAllocation(cell,align,offset);}  }
class C{  protected MultiDataObject.Entry createSecondaryEntry(MultiDataObject obj,FileObject secondaryFile){  return new FileEntry(obj,secondaryFile);}  }
class C{  private static PrintWriter openFile(String name,int nSwitch){  FileOutputStream file=null;  OutputStreamWriter writer=null;  try {switch (nSwitch) {case 1:      file=new FileOutputStream(name,false);    break;case 2:  file=new FileOutputStream(name,true);break;}writer=new OutputStreamWriter(file);} catch (IOException ee) {System.out.println("Error opening file: " + ee);System.exit(1);}return new PrintWriter(new BufferedWriter(writer));}  }
class C{  public EncapsulateFieldDescriptor(){  super(IJavaRefactorings.ENCAPSULATE_FIELD);}  }
class C{  protected final void fireServiceAdded(Class serviceClass){  BeanContextServiceAvailableEvent bcssae=new BeanContextServiceAvailableEvent(getBeanContextServicesPeer(),serviceClass);  fireServiceAdded(bcssae);}  }
class C{  public void copyTuple(final byte[] key,final byte[] val){  copyTuple(key,val,false,0L);}  }
class C{  public void receiveResultresolveUserToken(org.oscm.example.client.SessionServiceStub.ResolveUserTokenResponseE result){}  }
class C{  public static void premultiply(int[] p,int offset,int length){  length+=offset;  for (int i=offset; i < length; i++) {    int rgb=p[i];    int a=(rgb >> 24) & 0xff;    int r=(rgb >> 16) & 0xff;    int g=(rgb >> 8) & 0xff;    int b=rgb & 0xff;    float f=a * (1.0f / 255.0f);    r*=f;    g*=f;    b*=f;    p[i]=(a << 24) | (r << 16) | (g << 8)| b;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.367 -0500",hash_original_method="85594AF52A8DC28CABB86FCCC3D624C3",hash_generated_method="D20666622A0B86A22EA9D270C887E52F") public static String extractNetworkPortion(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  boolean firstCharAdded=false;  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (isDialable(c) && (c != '+' || !firstCharAdded)) {      firstCharAdded=true;      ret.append(c);    } else     if (isStartsPostDial(c)) {      break;    }  }  int pos=addPlusChar(phoneNumber);  if (pos >= 0 && ret.length() > pos) {    ret.insert(pos,'+');  }  return ret.toString();}  }
class C{  private void appendDependencyXml(StringBuilder builder,String groupId,String artifactId,String indent,String version,boolean isTestDependency,boolean isOptional,String classifier,Collection<String> exclusions){  builder.append(indent).append("<dependency>\n");  builder.append(indent).append("  <groupId>").append(groupId).append("</groupId>\n");  builder.append(indent).append("  <artifactId>").append(artifactId).append("</artifactId>\n");  if (null != version) {    builder.append(indent).append("  <version>").append(version).append("</version>\n");  }  if (isTestDependency) {    builder.append(indent).append("  <scope>test</scope>\n");  }  if (isOptional) {    builder.append(indent).append("  <optional>true</optional>\n");  }  if (null != classifier) {    builder.append(indent).append("  <classifier>").append(classifier).append("</classifier>\n");  }  if (null != exclusions && !exclusions.isEmpty()) {    builder.append(indent).append("  <exclusions>\n");    for (    String dependency : exclusions) {      int splitPos=dependency.indexOf(':');      String excludedGroupId=dependency.substring(0,splitPos);      String excludedArtifactId=dependency.substring(splitPos + 1);      builder.append(indent).append("    <exclusion>\n");      builder.append(indent).append("      <groupId>").append(excludedGroupId).append("</groupId>\n");      builder.append(indent).append("      <artifactId>").append(excludedArtifactId).append("</artifactId>\n");      builder.append(indent).append("    </exclusion>\n");    }    builder.append(indent).append("  </exclusions>\n");  }  builder.append(indent).append("</dependency>\n");}  }
class C{  public boolean isOrthogonal(){  return getRegions().size() > 1;}  }
class C{  public static boolean isComponentVisibleToClient(Component child){  if (!child.isVisible()) {    return false;  }  HasComponents parent=child.getParent();  if (parent instanceof SelectiveRenderer) {    if (!((SelectiveRenderer)parent).isRendered(child)) {      return false;    }  }  if (parent != null) {    return isComponentVisibleToClient(parent);  } else {    if (child instanceof UI) {      return true;    } else {      return false;    }  }}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("Usage: java Exercise_12_28 *");    System.exit(1);  }  ArrayList<File> list=getFiles(args);  for (int i=0; i < list.size(); i++) {    padFileName(list.get(i));  }}  }
class C{  public static BufferedImage toBufferedImage(byte[] bytes,String format) throws IOException {  return coder.toBufferedImage(bytes,format);}  }
class C{  public boolean isLength(CSSName cssName){  FSDerivedValue val=valueByName(cssName);  return val instanceof LengthValue;}  }
class C{  public void start(){  super.start();  deaths=0;  level=1;  score=0;  maze=new IntGrid2D(0,0);  try {    maze.setTo(TableLoader.loadPNMFile(PacMan.class.getResourceAsStream("images/maze0.pbm")));  } catch (  Exception e) {    e.printStackTrace();  }  agents=new Continuous2D(1.0,maze.getWidth(),maze.getHeight());  dots=new Continuous2D(1.0,maze.getWidth(),maze.getHeight());  resetGame();}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  public void showOutOfMemory(){  if (!isEnabled() || (m_MemoryUsage == null)) {    return;  }  System.gc();  String msg="Not enough memory (less than 50MB left on heap). Please load a smaller " + "dataset or use a larger heap size.\n" + "- initial heap size:   " + Utils.doubleToString(toMegaByte(m_MemoryUsage.getInit()),1) + "MB\n"+ "- current memory (heap) used:  "+ Utils.doubleToString(toMegaByte(m_MemoryUsage.getUsed()),1)+ "MB\n"+ "- max. memory (heap) available: "+ Utils.doubleToString(toMegaByte(m_MemoryUsage.getMax()),1)+ "MB\n"+ "\n"+ "Note:\n"+ "The Java heap size can be specified with the -Xmx option.\n"+ "E.g., to use 128MB as heap size, the command line looks like this:\n"+ "   java -Xmx128m -classpath ...\n"+ "This does NOT work in the SimpleCLI, the above java command refers\n"+ "to the one with which Weka is started. See the Weka FAQ on the web\n"+ "for further info.";  System.err.println(msg);  if (getUseGUI()) {    JOptionPane.showMessageDialog(null,msg,"OutOfMemory",JOptionPane.WARNING_MESSAGE);  }}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  static public void addBasicServiceOrClientCounters(final CounterSet serviceRoot,final String serviceName,final Class serviceIface,final Properties properties){{    final CounterSet serviceInfoSet=serviceRoot.makePath("Info");    serviceInfoSet.addCounter("Service Type",new OneShotInstrument<String>(serviceIface.getName()));    serviceInfoSet.addCounter("Service Name",new OneShotInstrument<String>(serviceName));    AbstractStatisticsCollector.addServiceProperties(serviceInfoSet,properties);  }  serviceRoot.attach(getMemoryCounterSet());}  }
class C{  public JAXRSAnalyzer(final Set<Path> projectPaths,final Set<Path> classPaths,final String projectName,final String projectVersion,final Backend backend,final Path outputLocation){  Objects.requireNonNull(projectPaths);  Objects.requireNonNull(classPaths);  Objects.requireNonNull(projectName);  Objects.requireNonNull(projectVersion);  Objects.requireNonNull(backend);  if (projectPaths.isEmpty())   throw new IllegalArgumentException("At least one project path is mandatory");  this.projectPaths.addAll(projectPaths);  this.classPaths.addAll(classPaths);  this.projectName=projectName;  this.projectVersion=projectVersion;  this.outputLocation=outputLocation;  this.backend=backend;}  }
class C{  public ListContainersParams withLimit(int limit){  this.limit=limit;  return this;}  }
class C{  public static int ENOMSG(){  return Errno.ENOMSG.intValue();}  }
class C{  private void dumpFocusStack(PrintWriter pw){  pw.println("\nAudio Focus stack entries (last is top of stack):");synchronized (mAudioFocusLock) {    Iterator<FocusStackEntry> stackIterator=mFocusStack.iterator();    while (stackIterator.hasNext()) {      FocusStackEntry fse=stackIterator.next();      pw.println("  source:" + fse.mSourceRef + " -- pack: "+ fse.mPackageName+ " -- client: "+ fse.mClientId+ " -- duration: "+ fse.mFocusChangeType+ " -- uid: "+ fse.mCallingUid+ " -- stream: "+ fse.mStreamType);    }  }}  }
class C{  byte nt(){  if (mPositionInVariant == INVALID) {    return mTemplatePosition < mTemplate.length ? mTemplate[mTemplatePosition] : DnaUtils.UNKNOWN_RESIDUE;  }  return mNextVariant.allele().nt()[mPositionInVariant];}  }
class C{  public static String toValidChannel(String channel){  if (channel == null) {    return null;  }  if (!validateChannel(channel)) {    return null;  }  if (!channel.startsWith("#")) {    channel="#" + channel;  }  return StringUtil.toLowerCase(channel);}  }
class C{  public int read(char[] buffer,int offset,int size) throws IOException {  int charsRead=0;  if (this.atEndOfData) {    return -1;  }  if ((offset + size) > buffer.length) {    size=buffer.length - offset;  }  while (charsRead < size) {    char ch=this.savedChar;    if (ch == 0) {      ch=this.reader.read();    } else {      this.savedChar=0;    }    if (ch == ']') {      char ch2=this.reader.read();      if (ch2 == ']') {        char ch3=this.reader.read();        if (ch3 == '>') {          this.atEndOfData=true;          break;        }        this.savedChar=ch2;        this.reader.unread(ch3);      } else {        this.reader.unread(ch2);      }    }    buffer[charsRead]=ch;    charsRead++;  }  if (charsRead == 0) {    charsRead=-1;  }  return charsRead;}  }
class C{  private static void appendSeparator(DateTimeFormatterBuilder bld,boolean extended){  if (extended) {    bld.appendLiteral('-');  }}  }
class C{  @Override public Set<V> apply(Set<V> vertices){  List<V> list=new ArrayList<V>(vertices);  Collections.shuffle(list,random);  Set<V> seeds=new LinkedHashSet<V>();  for (int i=0; i < n; i++)   seeds.add(list.get(i));  return seeds;}  }
class C{  @Override public String globalInfo(){  return "Simple aggregator of statistics.\n" + "For each numeric attribute the following attributes get generated:\n" + "- " + getDefaultSuffixCount() + ": the number of rows used to calculate this aggregate\n"+ "- "+ getDefaultSuffixMean()+ ": the average/mean\n"+ "- "+ getDefaultSuffixStdDev()+ ": the standard deviation";}  }
class C{  public static Jerry $(String cssSelector,Jerry context){  return context.find(cssSelector);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case DELETED:  return isSetDeleted();}throw new IllegalStateException();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Object nextEnhancedCoordinate(StreamPosTokenizer tt,String str) throws IOException {switch (tt.nextToken()) {case '?':{      StringBuilder buf=new StringBuilder();      buf.append('?');      int ch=tt.nextChar();      for (; ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'; ch=tt.nextChar()) {        buf.append((char)ch);      }      tt.pushCharBack(ch);      return buf.toString();    }case '$':{    StringBuilder buf=new StringBuilder();    buf.append('$');    int ch=tt.nextChar();    for (; ch >= '0' && ch <= '9'; ch=tt.nextChar()) {      buf.append((char)ch);    }    tt.pushCharBack(ch);    return buf.toString();  }case StreamPosTokenizer.TT_NUMBER:return tt.nval;default :throw new IOException("coordinate missing at position" + tt.getStartPosition() + " in "+ str);}}  }
class C{  public DefaultSQLDataHandler(boolean ignoreUnknownTypes){  m_ignoreUnknownTypes=ignoreUnknownTypes;}  }
class C{  public String stackTraceToString(Exception e){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  PrintStream ps=new PrintStream(bos);  e.printStackTrace(ps);  return bos.toString();}  }
class C{  protected ClientRequestContextWrapper(ClientRequestContext delegate){  super(delegate);}  }
class C{  public void attachRTCListener(PnRTCListener listener){  this.pcClient.setRTCListener(listener);}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public final void startServiceThread(){  if (serviceThread != null) {    return;  }  String threadName=userImpl.getClass().getSimpleName() + "Thread";  serviceThread=new ServiceThread(threadName);  serviceThread.start();}  }
class C{  private void parseTurretLock(Element turretLockTag,Entity entity){  String value=turretLockTag.getAttribute(DIRECTION);  try {    int turDir=Integer.parseInt(value);    ((Tank)entity).setSecondaryFacing(turDir);    ((Tank)entity).lockTurret(((Tank)entity).getLocTurret());  } catch (  Exception e) {    System.err.println(e);    e.printStackTrace();    warning.append("Invalid turret lock direction value in " + "movement tag.\n");  }}  }
class C{  IBinding resolveName(Name name){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.625 -0500",hash_original_method="978CECAE21C2C2AADE050CB638E188D1",hash_generated_method="42989D1D068EE582A6D8BA8313235CA1") public CursorWrapper(Cursor cursor){  mCursor=cursor;  this.addTaint(cursor.getTaint());}  }
class C{  public RowBuilder add(Object columnValue){  if (index == endIndex) {    throw new CursorIndexOutOfBoundsException("No more columns left.");  }  data[index++]=columnValue;  return this;}  }
class C{  @Override public String[] startSymbols(){  return startSymbols;}  }
class C{  @Override public void showLevelProperties(boolean showProerties){  propertiesRequired=showProerties;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.947 -0500",hash_original_method="4074EC86E696A918C28D96A3FA80513A",hash_generated_method="A534DEC657F3794646B757D69A82EF0B") public void onCorruption(SQLiteDatabase dbObj){  Log.e(TAG,"Corruption reported by sqlite on database: " + dbObj.getPath());  if (!dbObj.isOpen()) {    deleteDatabaseFile(dbObj.getPath());    return;  }  List<Pair<String,String>> attachedDbs=null;  try {    try {      attachedDbs=dbObj.getAttachedDbs();    } catch (    SQLiteException e) {    }    try {      dbObj.close();    } catch (    SQLiteException e) {    }  }  finally {    if (attachedDbs != null) {      for (      Pair<String,String> p : attachedDbs) {        deleteDatabaseFile(p.second);      }    } else {      deleteDatabaseFile(dbObj.getPath());    }  }}  }
class C{  public boolean unregister(HGIndexer indexer){  removeFromSubtypes(indexer);  List<HGIndexer<?,?>> forType=indexers.get(indexer.getType());  if (forType == null)   return false;  int i=forType.indexOf(indexer);  if (i < 0)   return false;  HGHandle hIndexer=graph.getHandle(forType.get(i));  HGHandle maintenanceOp=hg.findOne(graph,hg.and(hg.type(ApplyNewIndexer.class),hg.eq("hindexer",hIndexer)));  if (maintenanceOp != null)   graph.remove(maintenanceOp);  deleteIndex(forType.get(i));  graph.remove(hIndexer);  forType.remove(i);  if (forType.isEmpty())   indexers.remove(indexer.getType());  return true;}  }
class C{  private static Map<String,String> extractKeyValuePairs(String props,ObjectName mbean){  Map<String,String> map=new LinkedHashMap<String,String>();  int eq=props.indexOf("=");  while (eq != -1) {    String key=props.substring(0,eq);    String value=mbean.getKeyProperty(key);    map.put(key,value);    props=props.substring(key.length() + 1 + value.length());    if (props.startsWith(",")) {      props=props.substring(1);    }    eq=props.indexOf("=");  }  return map;}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType) throws SQLException {  super.registerOutParameter(parameterName,translateAndCheckSqlType(sqlType));}  }
class C{  @Override protected boolean sameOriginDisabled(){  return true;}  }
class C{  public SequenceNameLocus region(int index){  return mRegions[index];}  }
class C{  public Vector4f normalize(){  float invLength=1.0f / length();  x*=invLength;  y*=invLength;  z*=invLength;  w*=invLength;  return this;}  }
class C{  public NotificationChain basicSetTrigger(Trigger newTrigger,NotificationChain msgs){  Trigger oldTrigger=trigger;  trigger=newTrigger;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGraphPackage.TRANSITION__TRIGGER,oldTrigger,newTrigger);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private SourceMethodNode(String signature){  this.signature=signature;}  }
class C{  public StatusInfo(int severity,String message){  fStatusMessage=message;  fSeverity=severity;}  }
class C{  static public Map<String,Object> asMap(final String name,final Object val){  final Map<String,Object> tmp=new LinkedHashMap<String,Object>(1);  tmp.put(name,val);  return tmp;}  }
class C{  public void onUpdate(Project.NameKey project,Integer oldValue,Integer newValue){}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return eBasicSetContainer(otherEnd,SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static boolean isCreationByStringSupported(){  return Display.impl.isLookupFontSupported();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_moreGuards_1_();}  }
class C{  private boolean pathIsWindows(String path){  if (path != null && path.length() > 1) {    return (Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (path.startsWith("//") || path.startsWith("\\\\"));  }  return false;}  }
class C{  public static String removeIANA2JavaMapping(String ianaEncoding){  return fIANA2JavaMap.remove(ianaEncoding);}  }
class C{  public MalformedGraphException(final String msg){  super(msg);}  }
class C{  private void parseStartDocument(){  mListener.startDocument();  mParserOffset+=(2 * WORD_SIZE);}  }
class C{  public static int fixed(double value){  return (int)(value * SwfConstants.FIXED_POINT_MULTIPLE);}  }
class C{  public static boolean isEmailValid(String email){  if (email == null || email.length() == 0)   return false;  try {    InternetAddress ia=new InternetAddress(email,true);    if (ia != null)     return true;  } catch (  AddressException ex) {    log.warning(email + " - " + ex.getLocalizedMessage());  }  return false;}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public DynamicDriveToolTipTagFragmentGenerator(String title,int style){  this.title=title;  this.style=style;}  }
class C{  public ProductSkuDecoratorImpl(final ImageService imageService,final AttributableImageService productSkuImageService,final ProductSku productSkuEntity,final String httpServletContextPath,final ProductService productService,final I18NWebSupport i18NWebSupport){  this.productService=productService;  this.i18NWebSupport=i18NWebSupport;  if (productSkuEntity != null) {    BeanUtils.copyProperties(productSkuEntity,this);  }  this.httpServletContextPath=httpServletContextPath;  this.productSkuImageService=productSkuImageService;  this.imageService=imageService;}  }
class C{  public BlowFishCrypt(SecretKeySpec secretKeySpec){  this.secretKeySpec=secretKeySpec;}  }
class C{  public boolean wasModified(){  return m_wasModified;}  }
class C{  public String domain(){  return this.domain;}  }
class C{  static final void validateValues(final double[] values){  if (values == null) {    throw new SketchesArgumentException("Values cannot be null.");  }  final int lenM1=values.length - 1;  for (int j=0; j < lenM1; j++) {    if (values[j] < values[j + 1])     continue;    throw new SketchesArgumentException("Values must be unique, monotonically increasing and not NaN.");  }}  }
class C{  public RefactoringStatus(){  fEntries=new ArrayList(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.712 -0400",hash_original_method="339A1A14B62A6BDA365D4D355DB33354",hash_generated_method="A6112A3F201B8D9F6CC84BFD334BDEC4") public Soundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  public void activeLineRangeChanged(ActiveLineRangeEvent e){  if (e.getMin() == -1) {    clearActiveLineRange();  } else {    setActiveLineRange(e.getMin(),e.getMax());  }}  }
class C{  public ScaleSelector(){  slider=new JSlider(1,10,1);  value=new JLabel("x1");  size=new JLabel("   ");  preview=new ImagePanel();  value.setPreferredSize(new Dimension(25,10));  size.setHorizontalAlignment(JLabel.CENTER);  slider.setMajorTickSpacing(1);  slider.setSnapToTicks(true);  slider.addChangeListener(this);  setLayout(new BorderLayout());  Box b1=new Box(BoxLayout.X_AXIS);  b1.add(Box.createHorizontalStrut(5));  b1.add(Box.createHorizontalGlue());  b1.add(preview);  b1.add(Box.createHorizontalGlue());  b1.add(Box.createHorizontalStrut(5));  add(b1,BorderLayout.CENTER);  Box b2=new Box(BoxLayout.X_AXIS);  b2.add(slider);  b2.add(Box.createHorizontalStrut(5));  b2.add(value);  Box b3=new Box(BoxLayout.X_AXIS);  b3.add(Box.createHorizontalStrut(5));  b3.add(Box.createHorizontalGlue());  b3.add(size);  b3.add(Box.createHorizontalGlue());  b3.add(Box.createHorizontalStrut(5));  Box b4=new Box(BoxLayout.Y_AXIS);  b4.add(b2);  b4.add(b3);  add(b4,BorderLayout.SOUTH);}  }
class C{  public void testValueOfDoublePos2(){  double a=12321237576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="12321237576.987888";  int resScale=6;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public Coord translate(Coord coordinates){  return translate(coordinates.getLatitude(),coordinates.getLongitude());}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  checkKeySize(key,fixedKeySize);  core.init(opmode,key,random);}  }
class C{  protected TableGroupJoinNode leafLeftMostPending(TableGroupJoinNode rootTable){  TableGroupJoinNode leafTable=null;  for (  TableGroupJoinNode table : rootTable) {    if ((leafTable != null) && !isAncestor(table,leafTable))     break;    if (isPending(table))     leafTable=table;  }  return leafTable;}  }
class C{  public boolean hasTableBuilder(int tag){  return this.tableBuilders.containsKey(tag);}  }
class C{  protected Node createNode(Node parent,Object name,Map attributes){  return new Node(parent,name,attributes);}  }
class C{  public void restart(){  Logger.println("(ExecutionManager.restart) Starting execution manager");  stoppedMsgsLock.lock();  this.stopped=false;  while (!stoppedMsgs.isEmpty()) {    ConsensusMessage pm=stoppedMsgs.remove();    if (pm.getNumber() > tomLayer.getLastExec())     acceptor.processMessage(pm);  }  stoppedMsgsLock.unlock();  Logger.println("(ExecutionManager.restart) Finished stopped messages processing");}  }
class C{  protected final void fireVetoableChange(PropertyChangeEvent event) throws PropertyVetoException {  VetoableChangeSupport aVetoSupport=this.vetoSupport;  if (aVetoSupport == null) {    return;  }  aVetoSupport.fireVetoableChange(event);}  }
class C{  public void detach(){  if (detached) {    Tracer.throwClientError("Can't detach this TraceScope  because " + "it is already detached.");  }  tracer.detachScope(this);  detached=true;  parent=null;}  }
class C{  public void editButtonActionPerformed(){  String nodeAddress=readNodeAddress();  if (nodeAddress.equals("")) {    return;  }  curNode=(IEEE802154Node)itc.getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(Bundle.getMessage("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  jmri.util.JmriJFrame editFrame=new EditNodeFrame(itc,curNode);  try {    editFrame.initComponents();  } catch (  Exception ex) {    log.error("Exception initializing Frame: {}",ex.toString());    return;  }  editFrame.setVisible(true);}  }
class C{  public DellSCConsistencyGroups(){  this.connectionManager=DellSCConnectionManager.getInstance();  this.util=DellSCUtil.getInstance();}  }
class C{  public boolean fwIfNext(char c){  if (isNext(c)) {    pos++;    return true;  }  return false;}  }
class C{  public static VectorStoreRAM readFromFile(FlagConfig flagConfig,String vectorFile) throws IOException {  if (vectorFile.isEmpty()) {    throw new IllegalArgumentException("vectorFile argument cannot be empty.");  }  VectorStoreRAM store=new VectorStoreRAM(flagConfig);  store.initFromFile(vectorFile);  return store;}  }
class C{  int[] readCodewords() throws FormatException {  int width=bitMatrix.getWidth();  int height=bitMatrix.getHeight();  erasures=new int[MAX_CW_CAPACITY];  float moduleWidth=1.0f;  int[] rowCounters=new int[width];  int[] codewords=new int[MAX_CW_CAPACITY];  int next=0;  int matchingConsecutiveScans=0;  boolean rowInProgress=false;  int rowNumber=0;  int rowHeight=0;  for (int i=1; i < height; i++) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    int rowDifference=0;    for (int j=0; j < width; j++) {      if (bitMatrix.get(j,i) != bitMatrix.get(j,i - 1)) {        rowDifference++;      }    }    if (rowDifference <= moduleWidth * MAX_ROW_DIFFERENCE) {      for (int j=0; j < width; j++) {        if (bitMatrix.get(j,i)) {          rowCounters[j]++;        }      }      matchingConsecutiveScans++;      if ((matchingConsecutiveScans + 1) >= 2.0f * moduleWidth) {        rowInProgress=true;      }    } else {      if (rowInProgress) {        next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);        if (next == -1) {          throw FormatException.getFormatInstance();        }        for (int j=0; j < rowCounters.length; j++) {          rowCounters[j]=0;        }        rowNumber++;        rowHeight=0;      }      matchingConsecutiveScans=0;      rowInProgress=false;    }    rowHeight++;  }  if (rowInProgress) {    if (rowNumber >= MAX_ROWS) {      throw FormatException.getFormatInstance();    }    next=processRow(rowCounters,rowNumber,rowHeight,codewords,next);    rowNumber++;    rows=rowNumber;  }  erasures=trimArray(erasures,eraseCount);  return trimArray(codewords,next);}  }
class C{  public void removeAll(final Collection<Sensor> sensors){  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);  boolean rv=selection.removeAll(sensors);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){  String host=origin.getHost();  boolean isLocalHost=true;  for (int i=0; i < host.length(); i++) {    char ch=host.charAt(i);    if (ch == '.' || ch == ':') {      isLocalHost=false;      break;    }  }  if (isLocalHost) {    host+=".local";    return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());  } else {    return origin;  }}  }
class C{  private void checkForActiveBlockSnapshot(BlockSnapshot snapshot){  if (!TechnologyType.RP.toString().equalsIgnoreCase(snapshot.getTechnologyType())) {    if (!snapshot.getIsSyncActive()) {      throw APIException.badRequests.invalidParameterBlockSnapshotCannotBeExportedWhenInactive(snapshot.getLabel(),snapshot.getId());    }  }}  }
class C{  Optional<String> jarRoot(){  return Optional.ofNullable(jarRoot);}  }
class C{  public static void listObject_test1() throws Exception {  int i;  println("Test: listObjects(final String bucketName)");  String[] fileNames=new String[3];  for (i=0; i < 3; i++) {    String fileName=createFile(1 * MB);    client.putObject(bucketName,fileName,fileName);    Files.delete(Paths.get(fileName));    fileNames[i]=fileName;  }  i=0;  for (  Result r : client.listObjects(bucketName)) {    println(i++,r.get());    if (i == 10) {      break;    }  }  for (i=0; i < 3; i++) {    client.removeObject(bucketName,fileNames[i]);  }}  }
class C{  public FileHandler(int size,int limit,String directory) throws MqttException {  sizeLimit=(size <= 0) ? DEFAULT_SIZE : size;  noOfFiles=(limit <= 0) ? DEFAULT_LIMIT : limit;  if (directory == null || directory.equals(""))   throw new MqttException(MqttException.REASON_CODE_UNABLE_TO_WRITE);  this.directory=directory;  try {    validateLog();  } catch (  Exception e) {    throw new MqttException(MqttException.REASON_CODE_UNABLE_TO_WRITE);  }}  }
class C{  public static synchronized void unregisterIdentityHandler(final IdentityHandler identityHandler){  LinkedList<IdentityHandler> newList=duplicateIdentityHandlers();  if (newList.remove(identityHandler))   identityHandlers=newList;}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:38.168 -0500",hash_original_method="92DB73E806C3C282A27A1468C26BF7B3",hash_generated_method="838908A3C418F7AAF40CF8FDA53D821C") public void updateAdnByIndex(int efid,AdnRecord adn,int recordIndex,String pin2,Message response){  int extensionEF=extensionEfForEf(efid);  if (extensionEF < 0) {    sendErrorResponse(response,"EF is not known ADN-like EF:" + efid);    return;  }  Message pendingResponse=userWriteResponse.get(efid);  if (pendingResponse != null) {    sendErrorResponse(response,"Have pending update for EF:" + efid);    return;  }  userWriteResponse.put(efid,response);  new AdnRecordLoader(phone).updateEF(adn,efid,extensionEF,recordIndex,pin2,obtainMessage(EVENT_UPDATE_ADN_DONE,efid,recordIndex,adn));}  }
class C{  protected boolean popNamespace(String prefix){  try {    if (m_prefixMap.popNamespace(prefix)) {      m_saxHandler.endPrefixMapping(prefix);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  public ScopedClassPool create(ClassLoader cl,ClassPool src,ScopedClassPoolRepository repository){  return new ScopedClassPool(cl,src,repository,false);}  }
class C{  public Index(){  super("text_information.index",2);}  }
class C{  public boolean isSessionTerminated(){  return mSessionTerminated;}  }
class C{  public static Bitmap rotateImage(Bitmap bitmap,int degree){  Matrix matrix=new Matrix();  matrix.postRotate(degree);  bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);  return bitmap;}  }
class C{  protected Tag(String id){  this(id,false,false);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Compute closure example started.");    Collection<Integer> res=ignite.compute().apply(null,Arrays.asList("Count characters using closure".split(" ")));    int sum=res.stream().mapToInt(null).sum();    System.out.println();    System.out.println(">>> Total number of characters in the phrase is '" + sum + "'.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  protected void createFrame(){  setIconImage(ComponentHelper.getImage("weka_icon.gif"));  setSize(ArffViewerMainPanel.WIDTH,ArffViewerMainPanel.HEIGHT);  setCenteredLocation();  setDefaultCloseOperation(DISPOSE_ON_CLOSE);  removeWindowListener(this);  addWindowListener(this);  getContentPane().setLayout(new BorderLayout());  m_MainPanel=new ArffViewerMainPanel(this);  m_MainPanel.setConfirmExit(false);  getContentPane().add(m_MainPanel,BorderLayout.CENTER);  setJMenuBar(m_MainPanel.getMenu());}  }
class C{  public static boolean isHostInUse(DbClient dbClient,URI hostId){  List<Initiator> initiators=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Initiator.class,ContainmentConstraint.Factory.getContainedObjectsConstraint(hostId,Initiator.class,"host"));  for (  Initiator initiator : initiators) {    if (isInitiatorInUse(dbClient,initiator.getId().toString())) {      return true;    }  }  List<String> ipEndpoints=getIpInterfaceEndpoints(dbClient,hostId);  if (isHostIpInterfacesInUse(dbClient,ipEndpoints,hostId)) {    return true;  }  return !findExportsByHost(dbClient,hostId.toString()).isEmpty();}  }
class C{  public double distanceToPoint(Vec3 point){  return this.dot(point);}  }
class C{  public void swap(ObjectMatrix1D other){  if (!(other instanceof DenseObjectMatrix1D)) {    super.swap(other);  }  DenseObjectMatrix1D y=(DenseObjectMatrix1D)other;  if (y == this)   return;  checkSize(y);  final Object[] elems=this.elements;  final Object[] otherElems=y.elements;  if (elements == null || otherElems == null)   throw new InternalError();  int s=this.stride;  int ys=y.stride;  int index=index(0);  int otherIndex=y.index(0);  for (int k=size; --k >= 0; ) {    Object tmp=elems[index];    elems[index]=otherElems[otherIndex];    otherElems[otherIndex]=tmp;    index+=s;    otherIndex+=ys;  }  return;}  }
class C{  @Override public void execute() throws BuildException {  log("Starting scan.",verboseLevel);  long start=System.currentTimeMillis();  setupIvy();  int numErrors=0;  if (!verifySortedCoordinatesPropertiesFile(centralizedVersionsFile)) {    ++numErrors;  }  if (!verifySortedCoordinatesPropertiesFile(ignoreConflictsFile)) {    ++numErrors;  }  collectDirectDependencies();  if (!collectVersionConflictsToIgnore()) {    ++numErrors;  }  int numChecked=0;  @SuppressWarnings("unchecked") Iterator<Resource> iter=(Iterator<Resource>)ivyXmlResources.iterator();  while (iter.hasNext()) {    final Resource resource=iter.next();    if (!resource.isExists()) {      throw new BuildException("Resource does not exist: " + resource.getName());    }    if (!(resource instanceof FileResource)) {      throw new BuildException("Only filesystem resources are supported: " + resource.getName() + ", was: "+ resource.getClass().getName());    }    File ivyXmlFile=((FileResource)resource).getFile();    try {      if (!checkIvyXmlFile(ivyXmlFile)) {        ++numErrors;      }      if (!resolveTransitively(ivyXmlFile)) {        ++numErrors;      }      if (!findLatestConflictVersions()) {        ++numErrors;      }    } catch (    Exception e) {      throw new BuildException("Exception reading file " + ivyXmlFile.getPath() + " - "+ e.toString(),e);    }    ++numChecked;  }  log("Checking for orphans in " + centralizedVersionsFile.getName(),verboseLevel);  for (  Map.Entry<String,Dependency> entry : directDependencies.entrySet()) {    String coordinateKey=entry.getKey();    if (!entry.getValue().directlyReferenced) {      log("ORPHAN coordinate key '" + coordinateKey + "' in "+ centralizedVersionsFile.getName()+ " is not found in any "+ IVY_XML_FILENAME+ " file.",Project.MSG_ERR);      ++numErrors;    }  }  int numConflicts=emitConflicts();  int messageLevel=numErrors > 0 ? Project.MSG_ERR : Project.MSG_INFO;  log("Checked that " + centralizedVersionsFile.getName() + " and "+ ignoreConflictsFile.getName()+ " have lexically sorted '/org/name' keys and no duplicates or orphans.",messageLevel);  log("Scanned " + numChecked + " "+ IVY_XML_FILENAME+ " files for rev=\"${/org/name}\" format.",messageLevel);  log("Found " + numConflicts + " indirect dependency version conflicts.");  log(String.format(Locale.ROOT,"Completed in %.2fs., %d error(s).",(System.currentTimeMillis() - start) / 1000.0,numErrors),messageLevel);  if (numConflicts > 0 || numErrors > 0) {    throw new BuildException("Lib versions check failed. Check the logs.");  }}  }
class C{  WeatherAttribute(int max,String... desc){  maxValue=max;  value=Rand.rand(max + 1);  this.desc=desc;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void applyProfile(File file,ModelMap model){  List<String> lines=new ArrayList<>();  if (execute(APPLY_CMD,file,lines)) {    setCurrentProfile(file.getName());    model.addAttribute("success",true);    model.addAttribute("message","Success applying profile: " + file.getName());  } else {    model.addAttribute("success",false);    model.addAttribute("message","Error applying profile: " + file.getName());    model.addAttribute("output",StringUtils.join(lines,"\n"));  }}  }
class C{  public static final long fileTimeToUnixTime(FileTime ftime){  return ftime.to(TimeUnit.SECONDS);}  }
class C{  public static double ceil(double x){  return Math.ceil(x);}  }
class C{  public static Drawable blurEffectsOnDrawable(Context mContext,int drawable,int radius){  if (radius == 0)   radius=20;  Bitmap blurBitmap;  Bitmap bitmap=drawableTobitmap(mContext,drawable);  blurBitmap=BlurEffect.fastblur(mContext,bitmap,radius);  return new BitmapDrawable(blurBitmap);}  }
class C{  public boolean triStripIntersection(float[] points,int stride,short[] elements,int count,Vec3 result){  if (points == null || points.length < stride) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","triStripIntersection","missingArray"));  }  if (stride < 3) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","triStripIntersection","invalidStride"));  }  if (elements == null || elements.length == 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","triStripIntersection","missingArray"));  }  if (count < 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","triStripIntersection","invalidCount"));  }  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","triStripIntersection","missingResult"));  }  double vx=this.direction.x;  double vy=this.direction.y;  double vz=this.direction.z;  double sx=this.origin.x;  double sy=this.origin.y;  double sz=this.origin.z;  double tMin=Double.POSITIVE_INFINITY;  final double EPSILON=0.00001;  int vertex=elements[0] * stride;  double vert1x=points[vertex++];  double vert1y=points[vertex++];  double vert1z=points[vertex];  vertex=elements[1] * stride;  double vert2x=points[vertex++];  double vert2y=points[vertex++];  double vert2z=points[vertex];  for (int idx=2; idx < count; idx++) {    double vert0x=vert1x;    double vert0y=vert1y;    double vert0z=vert1z;    vert1x=vert2x;    vert1y=vert2y;    vert1z=vert2z;    vertex=elements[idx] * stride;    vert2x=points[vertex++];    vert2y=points[vertex++];    vert2z=points[vertex];    double edge1x=vert1x - vert0x;    double edge1y=vert1y - vert0y;    double edge1z=vert1z - vert0z;    double edge2x=vert2x - vert0x;    double edge2y=vert2y - vert0y;    double edge2z=vert2z - vert0z;    double px=(vy * edge2z) - (vz * edge2y);    double py=(vz * edge2x) - (vx * edge2z);    double pz=(vx * edge2y) - (vy * edge2x);    double det=edge1x * px + edge1y * py + edge1z * pz;    if (det > -EPSILON && det < EPSILON) {      continue;    }    double inv_det=1.0 / det;    double tx=sx - vert0x;    double ty=sy - vert0y;    double tz=sz - vert0z;    double u=inv_det * (tx * px + ty * py + tz * pz);    if (u < -EPSILON || u > 1 + EPSILON) {      continue;    }    double qx=(ty * edge1z) - (tz * edge1y);    double qy=(tz * edge1x) - (tx * edge1z);    double qz=(tx * edge1y) - (ty * edge1x);    double v=inv_det * (vx * qx + vy * qy + vz * qz);    if (v < -EPSILON || u + v > 1 + EPSILON) {      continue;    }    double t=inv_det * (edge2x * qx + edge2y * qy + edge2z * qz);    if (t >= 0 && t < tMin) {      tMin=t;    }  }  if (tMin != Double.POSITIVE_INFINITY) {    result.set(sx + vx * tMin,sy + vy * tMin,sz + vz * tMin);  }  return tMin != Double.POSITIVE_INFINITY;}  }
class C{  private static void logSession(final Session session){  final TransportStrategy transportStrategy=TransportStrategy.findStrategyForSession(session);  final Properties properties=session.getProperties();  final String sessionDetails=(transportStrategy != null) ? transportStrategy.toString(properties) : properties.toString();  LOGGER.debug("starting mail with " + sessionDetails);}  }
class C{  public void testJob03(){  System.out.println("testJob03");}  }
class C{  public boolean undo(TicTacToeBoard board){  if (oldMarker == '\0') {    return false;  }  board.set(col,row,oldMarker);  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr removedAttr;  String removedValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  removedValue=removedAttr.getValue();  assertEquals("elementRemoveAttributeNodeAssert","No",removedValue);}  }
class C{  private ExampleSet applyOnDataDummyCoding(ExampleSet exampleSet,boolean effectCoding) throws ProcessStoppedException {  List<Attribute> nominalAttributes=new ArrayList<>();  List<Attribute> transformedAttributes=new ArrayList<>();  Map<Attribute,List<Attribute>> targetAttributesFromSources=new HashMap<>();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (!attribute.isNumerical()) {      nominalAttributes.add(attribute);      List<String> targetNames=getTargetAttributesFromSourceAttribute(attribute);      List<Attribute> targets=new ArrayList<>();      for (      String targetName : targetNames) {        Attribute createAttribute=AttributeFactory.createAttribute(targetName,Ontology.INTEGER);        transformedAttributes.add(createAttribute);        targets.add(createAttribute);      }      targetAttributesFromSources.put(attribute,targets);    }  }  exampleSet.getExampleTable().addAttributes(transformedAttributes);  for (  Attribute attribute : transformedAttributes) {    exampleSet.getAttributes().addRegular(attribute);  }  int progressCompletedCounter=0;  int progressTriggerCounter=0;  if (getOperator() != null) {    getOperator().getProgress().setTotal(exampleSet.size());  }  for (  Example example : exampleSet) {    for (    Attribute nominalAttribute : nominalAttributes) {      double sourceValue=example.getValue(nominalAttribute);      for (      Attribute targetAttribute : targetAttributesFromSources.get(nominalAttribute)) {        example.setValue(targetAttribute,getValue(targetAttribute,sourceValue));        if (getOperator() != null && ++progressTriggerCounter > LOOPS_UNTIL_PROGRESS_TRIGGER) {          progressTriggerCounter=0;          getOperator().getProgress().setCompleted(progressCompletedCounter);        }      }    }    progressCompletedCounter++;  }  for (  Attribute nominalAttribute : nominalAttributes) {    exampleSet.getAttributes().remove(nominalAttribute);  }  return exampleSet;}  }
class C{  public PrintPage(float width,float height,Printable painter,PageFormat format){  setPrintable(painter);  setPageFormat(format);  setSize(width,height);}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public static final boolean isLoggingBehaviorEnabled(LoggingBehavior behavior){synchronized (loggingBehaviors) {    return BuildConfig.DEBUG && loggingBehaviors.contains(behavior);  }}  }
class C{  private static void printProfileInfo(GaData gaData){  ProfileInfo profileInfo=gaData.getProfileInfo();  System.out.println("Profile Info");  System.out.println("Account ID: " + profileInfo.getAccountId());  System.out.println("Web Property ID: " + profileInfo.getWebPropertyId());  System.out.println("Internal Web Property ID: " + profileInfo.getInternalWebPropertyId());  System.out.println("Profile ID: " + profileInfo.getProfileId());  System.out.println("Profile Name: " + profileInfo.getProfileName());  System.out.println("Table ID: " + profileInfo.getTableId());}  }
class C{  public byte[] decryptData(final byte[] cyphered,final int offset) throws CryptoException {  return decryptData(cyphered,cyphered.length - offset,offset);}  }
class C{  SavedState(Parcelable superState){  this.superState=superState != EMPTY_STATE ? superState : null;}  }
class C{  public EclipseProjectGenerator<Context> copy(URL resource,String targetFolder){  tasks.add(new CopyResourceTask<Context>(resource,targetFolder));  return this;}  }
class C{  public static Test suite(){  return (new TestSuite(ELITCase.class));}  }
class C{  public final int countCategories(){  return mCategories != null ? mCategories.size() : 0;}  }
class C{  private static void removeBranchesAfterGotos(BasicBlock bb){  Instruction firstGoto=null;  Instruction end=bb.lastRealInstruction();  for (Enumeration<Instruction> branches=bb.enumerateBranchInstructions(); branches.hasMoreElements(); ) {    Instruction s=branches.nextElement();    if (Goto.conforms(s)) {      firstGoto=s;      break;    }  }  if (firstGoto != null) {    Enumeration<Instruction> ie=IREnumeration.forwardIntraBlockIE(firstGoto,end);    ie.nextElement();    while (ie.hasMoreElements()) {      Instruction s=ie.nextElement();      if (GuardResultCarrier.conforms(s)) {        insertTrueGuard(s,GuardResultCarrier.getGuardResult(s));      }      s.remove();    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(header,"TableHeader.background","TableHeader.foreground","TableHeader.font");  LookAndFeel.installProperty(header,"opaque",Boolean.TRUE);}  }
class C{  public void reset(){  mRenderer.resetTextures();}  }
class C{  public GridifyRuntimeException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public DateTimeFormatter withDefaultYear(int defaultYear){  return new DateTimeFormatter(iPrinter,iParser,iLocale,iOffsetParsed,iChrono,iZone,iPivotYear,defaultYear);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int cap=MIN_SEGMENT_TABLE_CAPACITY;  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    if (seg != null) {      seg.threshold=(int)(cap * seg.loadFactor);      seg.table=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    }  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public PrintWriter(Writer out){  this(out,false);}  }
class C{  protected boolean communicateToHighscore(ConjunctiveRuleModel rule,double[] counts) throws UndefinedParameterError {  double optimisticScore=this.getOptimisticScore(counts);  if (optimisticScore <= this.getPruningScore()) {    return true;  } else {    double posScore=this.getScore(counts,true);    double negScore=this.getScore(counts,false);    if (posScore > this.bestScore) {      this.bestRule=rule;      this.bestScore=posScore;    }    if (negScore > this.bestScore) {      ConjunctiveRuleModel negRule=new ConjunctiveRuleModel(rule,rule.getLabel().getMapping().getNegativeIndex());      this.bestRule=negRule;      this.bestScore=negScore;    }    return false;  }}  }
class C{  public OptionSet clearUriPath(){  getUriPath().clear();  return this;}  }
class C{  protected void fillTableActions(){  Table table;  if ((applyTo != null) && (Table.class.isAssignableFrom(applyTo.getClass()))) {    table=(Table)applyTo;  } else {    return;  }  ButtonsPanel buttons=table.getButtonsPanel();  if (buttons == null) {    return;  }  com.haulmont.cuba.gui.components.Button addToSetBtn=(Button)buttons.getComponent("addToSetBtn");  com.haulmont.cuba.gui.components.Button addToCurSetBtn=(Button)buttons.getComponent("addToCurSetBtn");  com.haulmont.cuba.gui.components.Button removeFromCurSetBtn=(Button)buttons.getComponent("removeFromCurSetBtn");  Action addToSet=table.getAction("filter.addToSet");  Action addToCurrSet=table.getAction("filter.addToCurSet");  Action removeFromCurrSet=table.getAction("filter.removeFromCurSet");  if (addToSet != null)   table.removeAction(addToSet);  if (addToSetBtn != null)   addToSetBtn.setVisible(false);  if (addToCurrSet != null) {    table.removeAction(addToCurrSet);  }  if (addToCurSetBtn != null) {    addToCurSetBtn.setVisible(false);  }  if (removeFromCurrSet != null) {    table.removeAction(removeFromCurrSet);  }  if (removeFromCurSetBtn != null) {    removeFromCurSetBtn.setVisible(false);  }  if ((filterEntity != null) && (BooleanUtils.isTrue(filterEntity.getIsSet()))) {    addToCurrSet=new AddToCurrSetAction();    if (addToCurSetBtn == null) {      addToCurSetBtn=componentsFactory.createComponent(Button.class);      addToCurSetBtn.setId("addToCurSetBtn");      addToCurSetBtn.setCaption(getMainMessage("filter.addToCurSet"));      buttons.add(addToCurSetBtn);    } else {      addToCurSetBtn.setVisible(true);    }    if (StringUtils.isEmpty(addToCurSetBtn.getIcon())) {      addToCurSetBtn.setIcon("icons/join-to-set.png");    }    addToCurSetBtn.setAction(addToCurrSet);    table.addAction(addToCurrSet);    removeFromCurrSet=new RemoveFromSetAction(table);    if (removeFromCurSetBtn == null) {      removeFromCurSetBtn=componentsFactory.createComponent(Button.class);      removeFromCurSetBtn.setId("removeFromCurSetBtn");      removeFromCurSetBtn.setCaption(getMainMessage("filter.removeFromCurSet"));      buttons.add(removeFromCurSetBtn);    } else {      removeFromCurSetBtn.setVisible(true);    }    if (StringUtils.isEmpty(removeFromCurSetBtn.getIcon())) {      removeFromCurSetBtn.setIcon("icons/delete-from-set.png");    }    removeFromCurSetBtn.setAction(removeFromCurrSet);    table.addAction(removeFromCurrSet);  } else {    addToSet=new AddToSetAction(table);    if (addToSetBtn == null) {      addToSetBtn=componentsFactory.createComponent(Button.class);      addToSetBtn.setId("addToSetBtn");      addToSetBtn.setCaption(getMainMessage("filter.addToSet"));      buttons.add(addToSetBtn);    } else {      addToSetBtn.setVisible(true);    }    if (StringUtils.isEmpty(addToSetBtn.getIcon())) {      addToSetBtn.setIcon("icons/insert-to-set.png");    }    addToSetBtn.setAction(addToSet);    table.addAction(addToSet);  }}  }
class C{  public final int charLength(){  return _value.length();}  }
class C{  @Override protected final boolean failIfRegionMissing(){  return false;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public void deleteFichas(String[] idsFichas){  if (isFichaEnUso(idsFichas))   throw new FichaException("Alguna ficha en uso."); else {    iniciarTransaccion();    fichaDBEntity.deleteFichas(idsFichas);    fmtFichaDBEntity.deleteFmtFichas(idsFichas);    fmtPrefDBEntity.deleteFmtPrefFichas(idsFichas);    usoObjetoDbEntity.deleteByIdObjUsuario(idsFichas);    mapDescUDocDBEntity.delete(idsFichas);    commit();  }}  }
class C{  void ensureHeight(final ExecutionUnit executionUnit,final int height){  Dimension old=new Dimension((int)model.getProcessWidth(executionUnit),(int)model.getProcessHeight(executionUnit));  if (height > old.getHeight()) {    model.setProcessHeight(executionUnit,height);    balance();    model.fireProcessSizeChanged();  }}  }
class C{  public static final boolean isIntermedietDeliveryNotification(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_INTRMD_DELIV_NOTIF);}  }
class C{  protected void retrieveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.AREAS_EDICION,request);  AreaVO areaVO=(AreaVO)request.getAttribute("areaVO");  AreasForm areasForm=(AreasForm)form;  areasForm.set(areaVO);  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  setInTemporalSession(request,DescripcionConstants.LISTA_TIPO_NORMAS_KEY,descripcionService.makeListTipoNorma());  List camposDato=descripcionService.getCamposByArea(areaVO.getId(),areaVO.getNombre());  setInTemporalSession(request,ControlAccesoConstants.LISTA_CAMPOS_DATO,camposDato);  setReturnActionFordward(request,mapping.findForward("retrieve"));}  }
class C{  public static void putChar(byte[] arr,long off,char val){  if (UNALIGNED)   UNSAFE.putChar(arr,off,val); else   putCharByByte(arr,off,val,BIG_ENDIAN);}  }
class C{  public int[] toArray(){  int pos=0;  int[] array=new int[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public String typeName(){  return "fieldref";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.448 -0500",hash_original_method="9979A78C8840F79217BFF27E2D058EEC",hash_generated_method="2A6FD794BA745C39D70D661668FDD982") protected final void assertNotAborted() throws InterruptedIOException {  if (aborted) {    throw new InterruptedIOException("Connection has been shut down.");  }}  }
class C{  @Deprecated public static Bundle parseUrl(String url){  url=url.replace("fbconnect","http");  try {    URL u=new URL(url);    Bundle b=decodeUrl(u.getQuery());    b.putAll(decodeUrl(u.getRef()));    return b;  } catch (  MalformedURLException e) {    return new Bundle();  }}  }
class C{  private void truncateTemporaryTables(){  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"truncateTemporaryTables",new Object[]{m_objectTypes,m_direction});  m_counterPrg=new Integer(0);  m_totalPrg=new Integer(0);  Vector<String> v=new Vector<String>(m_targetMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    String vendor=m_target.getVendor();    String catalog=m_target.getCatalog();    String schema=m_target.getSchema();    String table=obj.getName();    String sql=null;    if (table.toUpperCase().startsWith("T_"))     sql=s_dbEngine.sql_delete(vendor,catalog,schema,table); else     if (table.toUpperCase().startsWith("I_"))     sql=s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,table,"I_IsImported='Y'"); else     if (table.equalsIgnoreCase("Test"))     sql=s_dbEngine.sql_delete(vendor,catalog,schema,table); else     if (table.toUpperCase().startsWith("AD_PINSTANCE") || table.equalsIgnoreCase("AD_Find") || table.equalsIgnoreCase("AD_Error")|| table.equalsIgnoreCase("AD_Issue"))     sql=s_dbEngine.sql_delete(vendor,catalog,schema,table); else     if (table.equalsIgnoreCase("AD_ChangeLog"))     sql=s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,table,"IsCustomization != 'Y'"); else     if (table.equalsIgnoreCase("AD_Session")) {      if (hasTableColumn(obj,"updated"))       sql=s_dbEngine.sql_delete(vendor,catalog,schema,table,"AD_Session_ID NOT IN (SELECT AD_Session_ID FROM AD_ChangeLog)",7); else       sql=s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,table,"AD_Session_ID NOT IN (SELECT AD_Session_ID FROM AD_ChangeLog)");    } else     if (table.equalsIgnoreCase("AD_Note"))     sql=s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,table,"Processed='Y'"); else     if (table.toUpperCase().endsWith("LOG")) {      if (hasTableColumn(obj,"updated"))       sql=s_dbEngine.sql_deleteByAge(vendor,catalog,schema,table,7); else       sql=s_dbEngine.sql_delete(vendor,catalog,schema,table);    }    if (sql != null) {      s_logger.log(Level.FINE,"purgeTableToTruncate",new Object[]{m_objectType,table,m_direction});      Savepoint sp=m_target.setSavepoint(table);      Statement stmt=m_target.setStatement();      Integer sqlResult=m_target.executeUpdate(stmt,sql,false,false);      if (sqlResult != null) {        logDropDetail(sqlResult,null);        m_trackingList.add(table.toUpperCase());        m_counterPrg=new Integer(m_counterPrg.intValue() + 1);      }      m_target.releaseStatement(stmt);      m_target.releaseSavepoint(sp);      m_totalPrg=new Integer(m_totalPrg.intValue() + 1);    }  }  logResults();}  }
class C{  public void paintToMovie(Graphics g){synchronized (Display2D.this.simulation.state.schedule) {    long steps=Display2D.this.simulation.state.schedule.getSteps();    if (steps > lastEncodedSteps && shouldUpdate() && Display2D.this.simulation.state.schedule.getTime() < Schedule.AFTER_SIMULATION) {      Display2D.this.movieMaker.add(paint(g,true,false));      lastEncodedSteps=steps;    } else     paint(g,false,false);  }}  }
class C{  protected Change createUndoChange(UndoEdit edit,ContentStamp stampToRestore) throws CoreException {  return new UndoTextFileChange(getName(),fFile,edit,stampToRestore,fSaveMode);}  }
class C{  void escape() throws IOException {  int end=chars.length();  if (end == 0) {    return;  }  int pos=0;  if (otherEscapes.isEmpty()) {    for (int i=0; i < end; ++i) {      if (escapeOneChar(pos,i,chars.charAt(i))) {        pos=i + 1;      }    }  } else {    int codepoint=Character.codePointAt(chars,0);    for (int i=0; i < end; ) {      int charCount=Character.charCount(codepoint);      int i2=i + charCount;      int nextCodepoint=i2 < end ? Character.codePointAt(chars,i2) : -1;      if (escapeOneCodepoint(pos,i,codepoint,nextCodepoint)) {        pos=i2;      }      i=i2;      codepoint=nextCodepoint;    }  }  out.append(chars,pos,end);}  }
class C{  @Override public void dropDatabaseSchemaOnDatabase(AbstractSession session) throws EclipseLinkException {  session.priviledgedExecuteNonSelectingCall(new SQLCall(buildDatabaseSchemaDeletionWriter(session,new StringWriter()).toString()));}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractEntityReference ae=(AbstractEntityReference)n;  ae.nodeName=nodeName;  return n;}  }
class C{  private static Instances addZtoD(Instances D,double Z[][],int L){  int H=Z[0].length;  int N=D.numInstances();  for (int a=0; a < H; a++) {    D.insertAttributeAt(new Attribute("A" + a),L + a);  }  for (int a=0; a < H; a++) {    for (int i=0; i < N; i++) {      D.instance(i).setValue(L + a,Z[i][a]);    }  }  D.setClassIndex(L);  return D;}  }
class C{  private Map<String,Integer> checkMetadata(BinaryType meta,Map<String,Integer> fieldsMeta,Object newVal,String name){  String oldFldTypeName=meta == null ? null : meta.fieldTypeName(name);  boolean nullFieldVal=false;  int newFldTypeId;  if (newVal instanceof BinaryValueWithType) {    newFldTypeId=((BinaryValueWithType)newVal).typeId();    if (((BinaryValueWithType)newVal).value() == null)     nullFieldVal=true;  } else   newFldTypeId=BinaryUtils.typeByClass(newVal.getClass());  if (oldFldTypeName == null) {    if (fieldsMeta == null)     fieldsMeta=new HashMap<>();    fieldsMeta.put(name,newFldTypeId);  } else   if (!nullFieldVal) {    String newFldTypeName=BinaryUtils.fieldTypeName(newFldTypeId);    if (!F.eq(newFldTypeName,oldFldTypeName)) {      throw new BinaryObjectException("Wrong value has been set [" + "typeName=" + (typeName == null ? meta.typeName() : typeName) + ", fieldName="+ name+ ", fieldType="+ oldFldTypeName+ ", assignedValueType="+ newFldTypeName+ ']');    }  }  return fieldsMeta;}  }
class C{  public static void startActionBaz(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService2.class);  intent.setAction(ACTION_BAZ);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  void reportWarning(String msg,Element e){  messager.printMessage(Diagnostic.Kind.WARNING,msg,e);}  }
class C{  public static boolean isHeader(Header header){  String xtension=header.getStringValue(XTENSION);  xtension=xtension == null ? "" : xtension.trim();  return "TABLE".equals(xtension);}  }
class C{  public void renderPaymentInputFields(PaymentItem paymentItem,AccountOnFile accountOnFile,InputDataPersister inputDataPersister,PaymentContext paymentContext){  if (paymentItem == null) {    throw new InvalidParameterException("Error rendering PaymentInputFields, basicPaymentItem may not be null");  }  RenderInputRegistry registry=new RenderInputRegistry(customRenderers);  for (  PaymentProductField field : paymentItem.getPaymentProductFields()) {    RenderInputFieldInterface renderer=registry.getRenderInputFieldForFieldType(field.getDisplayHints().getFormElement().getType());    if (renderer != null) {      renderField.renderField(renderer,field,paymentItem,accountOnFile,inputDataPersister,paymentContext);    }  }}  }
class C{  public static long currentTimeMillis(){  if (mockTime != null)   return mockTime.getTime(); else   return System.currentTimeMillis();}  }
class C{  @Interruptible public static void writeAvailableByte(BootImageInterface bootImage,Address ref,byte val){  bootImage.setByte(ref.plus(AVAILABLE_BITS_OFFSET),val);}  }
class C{  public final void complete(O v){  int state=this.state;  for (; ; ) {    if (state == FUSED_EMPTY) {      setValue(v);      STATE.lazySet(this,FUSED_READY);      Subscriber<? super O> a=actual;      a.onNext(v);      if (this.state != CANCELLED) {        a.onComplete();      }      return;    }    if ((state & ~HAS_REQUEST_NO_VALUE) != 0) {      return;    }    if (state == HAS_REQUEST_NO_VALUE) {      STATE.lazySet(this,HAS_REQUEST_HAS_VALUE);      Subscriber<? super O> a=actual;      a.onNext(v);      if (this.state != CANCELLED) {        a.onComplete();      }      return;    }    setValue(v);    if (STATE.compareAndSet(this,NO_REQUEST_NO_VALUE,NO_REQUEST_HAS_VALUE)) {      return;    }    state=this.state;    if (state == CANCELLED) {      value=null;      return;    }  }}  }
class C{  public List<String> provideWhiteList(){  LinkedList<String> whiteList=new LinkedList<>();  whiteList.add("org.chromium");  return whiteList;}  }
class C{  public MembershipRecord(Member member,MemberStatus status,int incarnation){  checkArgument(member != null);  checkArgument(status != null);  this.member=member;  this.status=status;  this.incarnation=incarnation;}  }
class C{  protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException {  boolean matchFound;  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if ((m_tokenChar == '\'') || (m_tokenChar == '"')) {    appendOp(2,OpCodes.OP_LITERAL);    Literal();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '$') {    nextToken();    appendOp(2,OpCodes.OP_VARIABLE);    QName();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (m_tokenChar == '(') {    nextToken();    appendOp(2,OpCodes.OP_GROUP);    Expr();    consumeExpected(')');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if ((null != m_token) && ((('.' == m_tokenChar) && (m_token.length() > 1) && Character.isDigit(m_token.charAt(1))) || Character.isDigit(m_tokenChar))) {    appendOp(2,OpCodes.OP_NUMBERLIT);    Number();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    matchFound=true;  } else   if (lookahead('(',1) || (lookahead(':',1) && lookahead('(',3))) {    matchFound=FunctionCall();  } else {    matchFound=false;  }  return matchFound;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  setArea(SerialUtilities.readShape(stream));}  }
class C{  private void createExpandedPanel(final int numberOfColumns){  this.expandedPanel=new Text(this.composite,SWT.MULTI | SWT.READ_ONLY | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);  this.expandedPanel.setText(this.detailText);  this.expandedPanel.setBackground(this.getGreyColor());  final GridData gd=new GridData(GridData.FILL,GridData.FILL,false,false,numberOfColumns,1);  gd.minimumHeight=gd.heightHint=150;  this.expandedPanel.setLayoutData(gd);}  }
class C{  public void unregisterContentObserver(ContentObserver observer){  contentResolver.unregisterContentObserver(observer);}  }
class C{  public final TimeUnit units(){  return this.units;}  }
class C{  public static boolean isNetworkUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return HTTPS_SCHEME.equals(scheme) || HTTP_SCHEME.equals(scheme);}  }
class C{  public final int establishedFusionMode(){  return establishedFusionMode;}  }
class C{  public boolean isUnique(){  return _isUnique;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("one",null));}  }
class C{  private boolean isView(MPartDescriptor descriptor){  return descriptor.getTags().contains("View");}  }
class C{  public void bind(){  if (this.geometryBuffer != null) {    this.geometryBuffer.bindFramebuffer(false);  } else   throw new NullPointerException("The buffers aren't initialized yet");}  }
class C{  @SuppressWarnings("unchecked") public <T>T put(String key,T val){  Object old=map.putIfAbsent(key,val);  return old == null ? val : (T)old;}  }
class C{  protected AbstractDelegateExtent(Extent extent){  checkNotNull(extent);  this.extent=extent;}  }
class C{  public boolean isType(int TYPE){  return (TYPE == type);}  }
class C{  public void clearAll(){  final List<EncodedImage> old;synchronized (this) {    old=new ArrayList<>(mMap.values());    mMap.clear();  }  for (int i=0; i < old.size(); i++) {    EncodedImage encodedImage=old.get(i);    if (encodedImage != null) {      encodedImage.close();    }  }}  }
class C{  public void appendImageTag(String align,String alt,String height,String src,String width){  StringBuilder sb=new StringBuilder("<img");  if (align != null) {    sb.append(" align=\"");    sb.append(align);    sb.append("\"");  }  if (alt != null) {    sb.append(" alt=\"");    sb.append(alt);    sb.append("\"");  }  if (height != null) {    sb.append(" height=\"");    sb.append(height);    sb.append("\"");  }  if (src != null) {    sb.append(" src=\"");    sb.append(src);    sb.append("\"");  }  if (width != null) {    sb.append(" width=\"");    sb.append(width);    sb.append("\"");  }  sb.append(">");  text.append(sb.toString());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.281 -0500",hash_original_method="57FADA8DB6AE415E8D7938E17AD42A96",hash_generated_method="23AC31C1150E253AA6670C5491C86B02") public Region createFromParcel(Parcel p){  int ni=nativeCreateFromParcel(p);  if (ni == 0) {    throw new RuntimeException();  }  return new Region(ni);}  }
class C{  public void clearWarnings() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    this.clearWarningsCalled=true;    this.warningChain=null;  }}  }
class C{  public static @CheckForNull BugCollection doAnalysis(@Nonnull Project p){  requireNonNull(p,"null project");  RedoAnalysisCallback ac=new RedoAnalysisCallback();  AnalyzingDialog.show(p,ac,true);  if (ac.finished) {    return ac.getBugCollection();  } else {    return null;  }}  }
class C{  public AllocatableValue finalize(boolean useStack){  AllocatableValue dst;  if (useStack) {    dst=reservedSlot;  } else {    ((AMD64FrameMapBuilder)getResult().getFrameMapBuilder()).freeRBPSpillSlot();    dst=newVariable(LIRKind.value(AMD64Kind.QWORD));  }  placeholder.replace(getResult().getLIR(),new MoveFromRegOp(AMD64Kind.QWORD,dst,rbp.asValue(LIRKind.value(AMD64Kind.QWORD))));  return dst;}  }
class C{  public void addKeyBinding(String keyBinding,ActionListener action){  Hashtable current=bindings;  StringTokenizer st=new StringTokenizer(keyBinding);  while (st.hasMoreTokens()) {    KeyStroke keyStroke=parseKeyStroke(st.nextToken());    if (keyStroke == null)     return;    if (st.hasMoreTokens()) {      Object o=current.get(keyStroke);      if (o instanceof Hashtable)       current=(Hashtable)o; else {        o=new Hashtable();        current.put(keyStroke,o);        current=(Hashtable)o;      }    } else     current.put(keyStroke,action);  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.menu_bug:    Toast.makeText(this,R.string.bug,Toast.LENGTH_SHORT).show();  break;}return true;}  }
class C{  public ProductRenderer(){  tnbprod=new ThumbNailBuilder(48,48,"uk/chromis/images/package.png");}  }
class C{  public final boolean isInSphere(IMovingAgent agent){  return isInSphere(agent,false);}  }
class C{  protected SSLSocketInputStream(SSLSocketImpl owner){  this.owner=owner;}  }
class C{  private void assertValidIndex(long index){  Assert.index(validIndex(index),"invalid log index: %d",index);}  }
class C{  public boolean processOnline(){  log.info("Amt=" + getPayAmt());  setIsOnline(true);  setErrorMessage(null);  if (isApproved()) {    log.info("Already processed - " + getR_Result() + " - "+ getR_RespMsg());    setErrorMessage("Payment already Processed");    return true;  }  if (m_mPaymentProcessor == null)   setPaymentProcessor();  if (m_mPaymentProcessor == null) {    log.log(Level.WARNING,"No Payment Processor Model");    setErrorMessage("No Payment Processor Model");    return false;  }  boolean approved=false;  try {    PaymentProcessor pp=PaymentProcessor.create(m_mPaymentProcessor,this);    if (pp == null)     setErrorMessage("No Payment Processor"); else {      String msg=pp.validate();      if (msg != null && msg.trim().length() > 0) {        setErrorMessage(Msg.getMsg(getCtx(),msg));      } else {        approved=pp.processCC();        if (approved)         setErrorMessage(null); else         setErrorMessage("From " + getCreditCardName() + ": "+ getR_RespMsg());      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"processOnline",e);    setErrorMessage("Payment Processor Error: " + e.getMessage());  }  setIsApproved(approved);  return approved;}  }
class C{  public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException {  for (int i=0; i < _args.length; i++) {    if (_args[i] instanceof FunctionCallIdentifier) {      raiseValidateError("UDF function call not supported as parameter to built-in function call",false);    }    _args[i].validateExpression(ids,constVars,conditional);  }  String outputName=getTempName();  DataIdentifier output=new DataIdentifier(outputName);  output.setAllPositions(this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());  Identifier id=this.getFirstExpr().getOutput();  output.setProperties(this.getFirstExpr().getOutput());  output.setNnz(-1);  this.setOutput(output);switch (this.getOpCode()) {case COLSUM:case COLMAX:case COLMIN:case COLMEAN:case COLSD:case COLVAR:    checkNumParameters(1);  checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(1,id.getDim2());output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case ROWSUM:case ROWMAX:case ROWINDEXMAX:case ROWMIN:case ROWINDEXMIN:case ROWMEAN:case ROWSD:case ROWVAR:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(id.getDim1(),1);output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case SUM:case PROD:case TRACE:case SD:case VAR:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(id.getValueType());break;case MEAN:if (getSecondExpr() != null) {checkNumParameters(2);} else {checkNumParameters(1);}checkMatrixParam(getFirstExpr());if (getSecondExpr() != null) {checkMatchingDimensions(getFirstExpr(),getSecondExpr());}output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(id.getValueType());break;case MIN:case MAX:if (getSecondExpr() == null) {checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);} else {checkNumParameters(2);DataType dt1=getFirstExpr().getOutput().getDataType();DataType dt2=getSecondExpr().getOutput().getDataType();DataType dtOut=(dt1 == DataType.MATRIX || dt2 == DataType.MATRIX) ? DataType.MATRIX : DataType.SCALAR;if (dt1 == DataType.MATRIX && dt2 == DataType.MATRIX) checkMatchingDimensions(getFirstExpr(),getSecondExpr(),true);long[] dims=getBinaryMatrixCharacteristics(getFirstExpr(),getSecondExpr());output.setDataType(dtOut);output.setDimensions(dims[0],dims[1]);output.setBlockDimensions(dims[2],dims[3]);}output.setValueType(id.getValueType());break;case CUMSUM:case CUMPROD:case CUMMIN:case CUMMAX:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(id.getDim1(),id.getDim2());output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case CAST_AS_SCALAR:checkNumParameters(1);checkMatrixFrameParam(getFirstExpr());if ((getFirstExpr().getOutput().getDim1() != -1 && getFirstExpr().getOutput().getDim1() != 1) || (getFirstExpr().getOutput().getDim2() != -1 && getFirstExpr().getOutput().getDim2() != 1)) {raiseValidateError("dimension mismatch while casting matrix to scalar: dim1: " + getFirstExpr().getOutput().getDim1() + " dim2 "+ getFirstExpr().getOutput().getDim2(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);}output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(id.getValueType());break;case CAST_AS_MATRIX:checkNumParameters(1);checkScalarFrameParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(id.getDim1(),id.getDim2());if (getFirstExpr().getOutput().getDataType() == DataType.SCALAR) output.setDimensions(1,1);output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case CAST_AS_FRAME:checkNumParameters(1);checkMatrixScalarParam(getFirstExpr());output.setDataType(DataType.FRAME);output.setDimensions(id.getDim1(),id.getDim2());if (getFirstExpr().getOutput().getDataType() == DataType.SCALAR) output.setDimensions(1,1);output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case CAST_AS_DOUBLE:checkNumParameters(1);checkScalarParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(ValueType.DOUBLE);break;case CAST_AS_INT:checkNumParameters(1);checkScalarParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(ValueType.INT);break;case CAST_AS_BOOLEAN:checkNumParameters(1);checkScalarParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(ValueType.BOOLEAN);break;case CBIND:case RBIND:checkNumParameters(2);if (getFirstExpr().getOutput().getDataType() == DataType.SCALAR) {checkScalarParam(getFirstExpr());checkScalarParam(getSecondExpr());checkValueTypeParam(getFirstExpr(),ValueType.STRING);checkValueTypeParam(getSecondExpr(),ValueType.STRING);} else {checkMatrixFrameParam(getFirstExpr());checkMatrixFrameParam(getSecondExpr());}output.setDataType(id.getDataType());output.setValueType(id.getValueType());long appendDim1=-1, appendDim2=-1;long m1rlen=getFirstExpr().getOutput().getDim1();long m1clen=getFirstExpr().getOutput().getDim2();long m2rlen=getSecondExpr().getOutput().getDim1();long m2clen=getSecondExpr().getOutput().getDim2();if (getOpCode() == BuiltinFunctionOp.CBIND) {if (m1rlen > 0 && m2rlen > 0 && m1rlen != m2rlen) {raiseValidateError("inputs to cbind must have same number of rows: input 1 rows: " + m1rlen + ", input 2 rows: "+ m2rlen,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}appendDim1=(m1rlen > 0) ? m1rlen : m2rlen;appendDim2=(m1clen > 0 && m2clen > 0) ? m1clen + m2clen : -1;} else if (getOpCode() == BuiltinFunctionOp.RBIND) {if (m1clen > 0 && m2clen > 0 && m1clen != m2clen) {raiseValidateError("inputs to rbind must have same number of columns: input 1 columns: " + m1clen + ", input 2 columns: "+ m2clen,conditional,LanguageErrorCodes.INVALID_PARAMETERS);}appendDim1=(m1rlen > 0 && m2rlen > 0) ? m1rlen + m2rlen : -1;appendDim2=(m1clen > 0) ? m1clen : m2clen;}output.setDimensions(appendDim1,appendDim2);output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());break;case PPRED:raiseValidateError("ppred() has been deprecated. Please use the operator directly.",true);checkNumParameters(3);DataType dt1=getFirstExpr().getOutput().getDataType();DataType dt2=getSecondExpr().getOutput().getDataType();if (dt1 == DataType.SCALAR && dt2 == DataType.SCALAR) {raiseValidateError("ppred() requires at least one matrix input.",conditional,LanguageErrorCodes.INVALID_PARAMETERS);}if (dt1 == DataType.MATRIX) checkMatrixParam(getFirstExpr());if (dt2 == DataType.MATRIX) checkMatrixParam(getSecondExpr());if (dt1 == DataType.MATRIX && dt2 == DataType.MATRIX) checkMatchingDimensions(getFirstExpr(),getSecondExpr(),true);if (getThirdExpr().getOutput().getDataType() != DataType.SCALAR || getThirdExpr().getOutput().getValueType() != ValueType.STRING) {raiseValidateError("Third argument in ppred() is not an operator ",conditional,LanguageErrorCodes.INVALID_PARAMETERS);}long[] dims=getBinaryMatrixCharacteristics(getFirstExpr(),getSecondExpr());output.setDataType(DataType.MATRIX);output.setDimensions(dims[0],dims[1]);output.setBlockDimensions(dims[2],dims[3]);output.setValueType(id.getValueType());break;case TRANS:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(id.getDim2(),id.getDim1());output.setBlockDimensions(id.getColumnsInBlock(),id.getRowsInBlock());output.setValueType(id.getValueType());break;case REV:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setDimensions(id.getDim1(),id.getDim2());output.setBlockDimensions(id.getColumnsInBlock(),id.getRowsInBlock());output.setValueType(id.getValueType());break;case DIAG:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);if (id.getDim2() != -1) {if (id.getDim2() == 1) {output.setDimensions(id.getDim1(),id.getDim1());} else {if (id.getDim1() != id.getDim2()) {raiseValidateError("Invoking diag on matrix with dimensions (" + id.getDim1() + ","+ id.getDim2()+ ") in "+ this.toString(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);}output.setDimensions(id.getDim1(),1);}}output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());output.setValueType(id.getValueType());break;case NROW:case NCOL:case LENGTH:checkNumParameters(1);checkMatrixFrameParam(getFirstExpr());output.setDataType(DataType.SCALAR);output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setValueType(ValueType.INT);break;case TABLE:checkMatrixParam(getFirstExpr());if (getSecondExpr() == null) raiseValidateError("Invalid number of arguments to table(): " + this.toString(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);if (getSecondExpr().getOutput().getDataType() == DataType.MATRIX) checkMatchingDimensions(getFirstExpr(),getSecondExpr());long outputDim1=-1, outputDim2=-1;switch (_args.length) {case 2:break;case 3:if (getThirdExpr().getOutput().getDataType() == DataType.MATRIX) checkMatchingDimensions(getFirstExpr(),getThirdExpr());break;case 4:if (getThirdExpr().getOutput().getDataType() != DataType.SCALAR || _args[3].getOutput().getDataType() != DataType.SCALAR) {raiseValidateError("Invalid argument types to table(): output dimensions must be of type scalar: " + this.toString(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);} else {if (getThirdExpr() instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)getThirdExpr()).getName())) _args[2]=constVars.get(((DataIdentifier)getThirdExpr()).getName());if (_args[3] instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_args[3]).getName())) _args[3]=constVars.get(((DataIdentifier)_args[3]).getName());if (getThirdExpr().getOutput() instanceof ConstIdentifier) outputDim1=((ConstIdentifier)getThirdExpr().getOutput()).getLongValue();if (_args[3].getOutput() instanceof ConstIdentifier) outputDim2=((ConstIdentifier)_args[3].getOutput()).getLongValue();}break;case 5:if (getThirdExpr().getOutput().getDataType() == DataType.MATRIX) checkMatchingDimensions(getFirstExpr(),getThirdExpr());if (_args[3].getOutput().getDataType() != DataType.SCALAR || _args[4].getOutput().getDataType() != DataType.SCALAR) {raiseValidateError("Invalid argument types to table(): output dimensions must be of type scalar: " + this.toString(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);} else {if (_args[3] instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_args[3]).getName())) _args[3]=constVars.get(((DataIdentifier)_args[3]).getName());if (_args[4] instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_args[4]).getName())) _args[4]=constVars.get(((DataIdentifier)_args[4]).getName());if (_args[3].getOutput() instanceof ConstIdentifier) outputDim1=((ConstIdentifier)_args[3].getOutput()).getLongValue();if (_args[4].getOutput() instanceof ConstIdentifier) outputDim2=((ConstIdentifier)_args[4].getOutput()).getLongValue();}break;default :raiseValidateError("Invalid number of arguments to table(): " + this.toString(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);}output.setDimensions(outputDim1,outputDim2);output.setBlockDimensions(-1,-1);output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);break;case MOMENT:checkMatrixParam(getFirstExpr());if (getThirdExpr() != null) {checkNumParameters(3);checkMatrixParam(getSecondExpr());checkMatchingDimensions(getFirstExpr(),getSecondExpr());checkScalarParam(getThirdExpr());} else {checkNumParameters(2);checkScalarParam(getSecondExpr());}output.setDataType(DataType.SCALAR);output.setValueType(ValueType.DOUBLE);output.setDimensions(0,0);output.setBlockDimensions(0,0);break;case COV:if (getThirdExpr() != null) {checkNumParameters(3);} else {checkNumParameters(2);}checkMatrixParam(getFirstExpr());checkMatrixParam(getSecondExpr());checkMatchingDimensions(getFirstExpr(),getSecondExpr());if (getThirdExpr() != null) {checkMatrixParam(getThirdExpr());checkMatchingDimensions(getFirstExpr(),getThirdExpr());}output.setDataType(DataType.SCALAR);output.setValueType(ValueType.DOUBLE);output.setDimensions(0,0);output.setBlockDimensions(0,0);break;case QUANTILE:if (getThirdExpr() != null) {checkNumParameters(3);} else {checkNumParameters(2);}check1DMatrixParam(getFirstExpr());if (getThirdExpr() != null) {checkMatrixParam(getSecondExpr());checkMatchingDimensions(getFirstExpr(),getSecondExpr());}if (getThirdExpr() != null) {output.setDimensions(getThirdExpr().getOutput().getDim1(),getThirdExpr().getOutput().getDim2());output.setBlockDimensions(getThirdExpr().getOutput().getRowsInBlock(),getThirdExpr().getOutput().getColumnsInBlock());output.setDataType(getThirdExpr().getOutput().getDataType());} else {output.setDimensions(getSecondExpr().getOutput().getDim1(),getSecondExpr().getOutput().getDim2());output.setBlockDimensions(getSecondExpr().getOutput().getRowsInBlock(),getSecondExpr().getOutput().getColumnsInBlock());output.setDataType(getSecondExpr().getOutput().getDataType());}break;case INTERQUANTILE:if (getThirdExpr() != null) {checkNumParameters(3);} else {checkNumParameters(2);}checkMatrixParam(getFirstExpr());if (getThirdExpr() != null) {checkMatrixParam(getSecondExpr());checkMatchingDimensionsQuantile();}if ((getThirdExpr() == null && getSecondExpr().getOutput().getDataType() != DataType.SCALAR) && (getThirdExpr() != null && getThirdExpr().getOutput().getDataType() != DataType.SCALAR)) {raiseValidateError("Invalid parameters to " + this.getOpCode(),conditional,LanguageErrorCodes.INVALID_PARAMETERS);}output.setValueType(id.getValueType());output.setDimensions(-1,-1);output.setBlockDimensions(-1,-1);output.setDataType(DataType.MATRIX);break;case IQM:if (getSecondExpr() != null) {checkNumParameters(2);} else {checkNumParameters(1);}checkMatrixParam(getFirstExpr());if (getSecondExpr() != null) {checkMatrixParam(getSecondExpr());checkMatchingDimensions(getFirstExpr(),getSecondExpr());}output.setValueType(id.getValueType());output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setDataType(DataType.SCALAR);break;case MEDIAN:if (getSecondExpr() != null) {checkNumParameters(2);} else {checkNumParameters(1);}checkMatrixParam(getFirstExpr());if (getSecondExpr() != null) {checkMatrixParam(getSecondExpr());checkMatchingDimensions(getFirstExpr(),getSecondExpr());}output.setValueType(id.getValueType());output.setDimensions(0,0);output.setBlockDimensions(0,0);output.setDataType(DataType.SCALAR);break;case SAMPLE:{Expression[] in=getAllExpr();for (Expression e : in) checkScalarParam(e);if (in[0].getOutput().getValueType() != ValueType.DOUBLE && in[0].getOutput().getValueType() != ValueType.INT) throw new LanguageException("First argument to sample() must be a number.");if (in[1].getOutput().getValueType() != ValueType.DOUBLE && in[1].getOutput().getValueType() != ValueType.INT) throw new LanguageException("Second argument to sample() must be a number.");boolean check=false;if (isConstant(in[0]) && isConstant(in[1])) {long range=((ConstIdentifier)in[0]).getLongValue();long size=((ConstIdentifier)in[1]).getLongValue();if (range < size) check=true;}if (in.length == 4) {checkNumParameters(4);if (in[3].getOutput().getValueType() != ValueType.INT) throw new LanguageException("Fourth arugment, seed, to sample() must be an integer value.");if (in[2].getOutput().getValueType() != ValueType.BOOLEAN) throw new LanguageException("Third arugment to sample() must either denote replacement policy (boolean) or seed (integer).");} else if (in.length == 3) {checkNumParameters(3);if (in[2].getOutput().getValueType() != ValueType.BOOLEAN && in[2].getOutput().getValueType() != ValueType.INT) throw new LanguageException("Third arugment to sample() must either denote replacement policy (boolean) or seed (integer).");}if (check && in.length >= 3 && isConstant(in[2]) && in[2].getOutput().getValueType() == ValueType.BOOLEAN && !((BooleanIdentifier)in[2]).getValue()) throw new LanguageException("Sample (size=" + ((ConstIdentifier)in[0]).getLongValue() + ") larger than population (size="+ ((ConstIdentifier)in[1]).getLongValue()+ ") can only be generated with replacement.");output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);if (isConstant(in[1])) output.setDimensions(((ConstIdentifier)in[1]).getLongValue(),1); else output.setDimensions(-1,1);setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());break;}case SEQ:checkScalarParam(getFirstExpr());checkScalarParam(getSecondExpr());if (getThirdExpr() != null) {checkNumParameters(3);checkScalarParam(getThirdExpr());} else checkNumParameters(2);if (getFirstExpr() instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)getFirstExpr()).getName())) _args[0]=constVars.get(((DataIdentifier)getFirstExpr()).getName());if (getSecondExpr() instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)getSecondExpr()).getName())) _args[1]=constVars.get(((DataIdentifier)getSecondExpr()).getName());if (getThirdExpr() != null && getThirdExpr() instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)getThirdExpr()).getName())) _args[2]=constVars.get(((DataIdentifier)getThirdExpr()).getName());long dim1=-1, dim2=1;if (isConstant(getFirstExpr()) && isConstant(getSecondExpr()) && (getThirdExpr() != null ? isConstant(getThirdExpr()) : true)) {double from, to, incr;try {from=getDoubleValue(getFirstExpr());to=getDoubleValue(getSecondExpr());if (getThirdExpr() == null) {expandArguments();_args[2]=new DoubleIdentifier(((from > to) ? -1.0 : 1.0),this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());}incr=getDoubleValue(getThirdExpr());} catch (LanguageException e) {throw new LanguageException("Arguments for seq() must be numeric.");}if ((from > to) && (incr >= 0)) throw new LanguageException("Wrong sign for the increment in a call to seq()");dim1=1 + (long)Math.floor((to - from) / incr);}output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);output.setDimensions(dim1,dim2);output.setBlockDimensions(0,0);break;case SOLVE:checkNumParameters(2);checkMatrixParam(getFirstExpr());checkMatrixParam(getSecondExpr());if (getSecondExpr().getOutput().dimsKnown() && !is1DMatrix(getSecondExpr())) raiseValidateError("Second input to solve() must be a vector",conditional);if (getFirstExpr().getOutput().dimsKnown() && getSecondExpr().getOutput().dimsKnown() && getFirstExpr().getOutput().getDim1() != getSecondExpr().getOutput().getDim1()) raiseValidateError("Dimension mismatch in a call to solve()",conditional);output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);output.setDimensions(getFirstExpr().getOutput().getDim2(),1);output.setBlockDimensions(0,0);break;case INVERSE:checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);Identifier in=getFirstExpr().getOutput();if (in.dimsKnown() && in.getDim1() != in.getDim2()) raiseValidateError("Input to inv() must be square matrix -- given: a " + in.getDim1() + "x"+ in.getDim2()+ " matrix.",conditional);output.setDimensions(in.getDim1(),in.getDim2());output.setBlockDimensions(in.getRowsInBlock(),in.getColumnsInBlock());break;case CHOLESKY:{checkNumParameters(1);checkMatrixParam(getFirstExpr());output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);Identifier inA=getFirstExpr().getOutput();if (inA.dimsKnown() && inA.getDim1() != inA.getDim2()) raiseValidateError("Input to cholesky() must be square matrix -- given: a " + inA.getDim1() + "x"+ inA.getDim2()+ " matrix.",conditional);output.setDimensions(inA.getDim1(),inA.getDim2());output.setBlockDimensions(inA.getRowsInBlock(),inA.getColumnsInBlock());break;}case OUTER:Identifier id2=this.getSecondExpr().getOutput();checkNumParameters(3);checkMatrixParam(getFirstExpr());checkMatrixParam(getSecondExpr());checkScalarParam(getThirdExpr());checkValueTypeParam(getThirdExpr(),ValueType.STRING);if (id.getDim2() > 1 || id2.getDim1() > 1) {raiseValidateError("Outer vector operations require a common dimension of one: " + id.getDim1() + "x"+ id.getDim2()+ " o "+ id2.getDim1()+ "x"+ id2.getDim2()+ ".",false);}output.setDataType(id.getDataType());output.setDimensions(id.getDim1(),id2.getDim2());output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());break;case CONV2D:case CONV2D_BACKWARD_FILTER:case CONV2D_BACKWARD_DATA:case MAX_POOL:case AVG_POOL:case MAX_POOL_BACKWARD:{Expression input=_args[0];if (!(this.getOpCode() == BuiltinFunctionOp.MAX_POOL || this.getOpCode() == BuiltinFunctionOp.AVG_POOL)) {Expression filter=_args[1];checkMatrixParam(filter);}output.setDataType(DataType.MATRIX);output.setValueType(ValueType.DOUBLE);output.setBlockDimensions(input.getOutput().getRowsInBlock(),input.getOutput().getColumnsInBlock());checkMatrixParam(input);break;}default :if (this.isMathFunction()) {if (this.getOpCode() == BuiltinFunctionOp.ABS) {output.setValueType(getFirstExpr().getOutput().getValueType());} else {output.setValueType(ValueType.DOUBLE);}checkMathFunctionParam();output.setDataType(id.getDataType());output.setDimensions(id.getDim1(),id.getDim2());output.setBlockDimensions(id.getRowsInBlock(),id.getColumnsInBlock());} else {BuiltinFunctionOp op=getOpCode();if (op == BuiltinFunctionOp.EIGEN || op == BuiltinFunctionOp.LU || op == BuiltinFunctionOp.QR) raiseValidateError("Function " + op + " needs to be called with multi-return assignment.",false,LanguageErrorCodes.INVALID_PARAMETERS); else raiseValidateError("Unsupported function " + op,false,LanguageErrorCodes.INVALID_PARAMETERS);}}return;}  }
class C{  static void closeSequenceWithReifiedType(final Node that,final Map<TypeParameter,Type> types,final GenerateJsVisitor gen,final boolean wantsIterable){  gen.out("],");  boolean nonempty=false;  Type elem=null;  for (  Map.Entry<TypeParameter,Type> e : types.entrySet()) {    if (e.getKey().getName().equals("Element")) {      elem=e.getValue();    } else     if (e.getKey().equals(that.getUnit().getIterableDeclaration().getTypeParameters().get(1))) {      nonempty="ceylon.language::Nothing".equals(e.getValue().asQualifiedString());    }  }  if (elem == null) {    gen.out("/*WARNING no Element found* /");    elem=that.getUnit().getAnythingType();  }  TypeUtils.typeNameOrList(that,elem,gen,false);  if (nonempty) {    gen.out(",1");  }  gen.out(")");}  }
class C{  void apply(AttributedString str){  str.addAttributes(attrs.contents(),beginIndex,endIndex);}  }
class C{  public void testCreateParentMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  createFile(igfs,FILE,true,chunk);  checkExist(igfs,igfsSecondary,SUBDIR);  checkFile(igfs,igfsSecondary,FILE,chunk);}  }
class C{  @Override public String toString(){  return "Cell " + super.toString();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void clearLog(SolrCore core,PluginInfo ulogPluginInfo){  if (ulogPluginInfo == null)   return;  File tlogDir=new File(getTlogDir(core,ulogPluginInfo));  if (tlogDir.exists()) {    String[] files=getLogList(tlogDir);    for (    String file : files) {      File f=new File(tlogDir,file);      try {        Files.delete(f.toPath());      } catch (      IOException cause) {        log.error("Could not remove tlog file:" + f,cause);      }    }  }}  }
class C{  public static int checkHeading(final int newHeading){  int result=newHeading;  while (result < 0) {    result+=PRECISION;  }  return result % PRECISION;}  }
class C{  public static void checkConvergenceFromAnyHost(ServiceHost host,NodeGroupState ngs,Operation parentOp){  checkConvergenceAcrossPeers(host,ngs,parentOp);}  }
class C{  @Override public synchronized void updateFloat(int columnIndex,float x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setFloat(columnIndex,x);  } else {    this.inserter.setFloat(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public TreeRTGCeibaRosea(float length,int branch,float verStart,float verRand){  this();  this.length=length;  this.branch=branch;  this.verStart=verStart;  this.verRand=verRand;}  }
class C{  public void deleteConsistencyGroup(String instanceId) throws StorageCenterAPIException {  LOG.debug("Deleting consistency group '{}'",instanceId);  RestResult rr=restClient.delete(String.format("StorageCenter/ScReplayProfile/%s",instanceId));  if (!checkResults(rr)) {    String msg=String.format("Error deleting CG %s: %s",instanceId,rr.getErrorMsg());    LOG.error(msg);    throw new StorageCenterAPIException(msg);  }}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public void loadUrl(String url,JSONObject props) throws JSONException {  LOG.d("App","App.loadUrl(" + url + ","+ props+ ")");  int wait=0;  boolean openExternal=false;  boolean clearHistory=false;  HashMap<String,Object> params=new HashMap<String,Object>();  if (props != null) {    JSONArray keys=props.names();    for (int i=0; i < keys.length(); i++) {      String key=keys.getString(i);      if (key.equals("wait")) {        wait=props.getInt(key);      } else       if (key.equalsIgnoreCase("openexternal")) {        openExternal=props.getBoolean(key);      } else       if (key.equalsIgnoreCase("clearhistory")) {        clearHistory=props.getBoolean(key);      } else {        Object value=props.get(key);        if (value == null) {        } else         if (value.getClass().equals(String.class)) {          params.put(key,(String)value);        } else         if (value.getClass().equals(Boolean.class)) {          params.put(key,(Boolean)value);        } else         if (value.getClass().equals(Integer.class)) {          params.put(key,(Integer)value);        }      }    }  }  if (wait > 0) {    try {synchronized (this) {        this.wait(wait);      }    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  this.webView.showWebPage(url,openExternal,clearHistory,params);}  }
class C{  public void damageRange(JTextComponent a,int b,int c){  for (int i=0; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).damageRange(a,b,c);  }}  }
class C{  public static boolean[] convertStringToBooleanArr(String noDictionaryColMapping){  String[] splittedValue=null != noDictionaryColMapping ? noDictionaryColMapping.split(CarbonCommonConstants.COMA_SPC_CHARACTER) : new String[0];  boolean[] noDictionaryMapping=new boolean[splittedValue.length];  int index=0;  for (  String str : splittedValue) {    noDictionaryMapping[index++]=Boolean.parseBoolean(str);  }  return noDictionaryMapping;}  }
class C{  private boolean valueHasChanged(ActionEvent e,String oldValue){  boolean result=true;  String n=getNewValue(e);  String o="";  if (oldValue != null && oldValue.length() > 0)   o=oldValue;  if (n.equalsIgnoreCase(o))   result=false;  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null)   return sm.getMessageText(); else   return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  protected void emit_AnnotatedPropertyAssignment_SemicolonKeyword_1_3_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean isConfigMode(){  return scenario.equals(PropertyConstants.CONFIG_MODE) ? true : false;}  }
class C{  public String sqlObjectDetail_createColumn(String sourceVendorName,String targetVendorName,String catalogName,String schemaName,String tableName,String columnName,String dataType,int size,int scale,boolean isNullable,String defaultValue){  String translatedColumnName=normalizeColumnName(targetVendorName,columnName);  String translatedDataType=translateDataType(sourceVendorName,targetVendorName,dataType,size,scale);  String translatedDefaultValue=translateExpression(sourceVendorName,targetVendorName,defaultValue);  if (!isNullable) {    if (defaultValue == null || defaultValue.length() == 0 || defaultValue.equalsIgnoreCase("NULL")) {      translatedDefaultValue=normalizeColumnValue(targetVendorName,getDataTypeID(sourceVendorName,dataType));    }  }  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObjectDetail_createColumn(catalogName,schemaName,tableName,translatedColumnName,translatedDataType,isNullable,translatedDefaultValue);}  }
class C{  public SVGOMMaskElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  protected static Tuple<String,String> createTuple(String one,String two){  return new Tuple<>(one,two);}  }
class C{  protected String allValidSubmissions(String separator){  String res="";  int size=submissions.size();  boolean firsterr=true;  for (int i=0; i < size; i++) {    Submission subm=submissions.elementAt(i);    if (!subm.errors) {      res+=((!firsterr) ? separator : "") + subm.name;      firsterr=false;    }  }  return res;}  }
class C{  public static Transaction createFakeTxWithoutChangeAddress(NetworkParameters params,Coin value,Address to){  Transaction t=new Transaction(params);  TransactionOutput outputToMe=new TransactionOutput(params,t,value,to);  t.addOutput(outputToMe);  long split=new Random().nextLong();  if (split < 0) {    split*=-1;  }  if (split == 0) {    split=15;  }  while (split > value.getValue()) {    split/=2;  }  Transaction prevTx1=new Transaction(params);  TransactionOutput prevOut1=new TransactionOutput(params,prevTx1,Coin.valueOf(split),to);  prevTx1.addOutput(prevOut1);  t.addInput(prevOut1).setScriptSig(ScriptBuilder.createInputScript(TransactionSignature.dummy()));  Transaction prevTx2=new Transaction(params);  TransactionOutput prevOut2=new TransactionOutput(params,prevTx2,Coin.valueOf(value.getValue() - split),to);  prevTx2.addOutput(prevOut2);  t.addInput(prevOut2).setScriptSig(ScriptBuilder.createInputScript(TransactionSignature.dummy()));  return roundTripTransaction(params,t);}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public Shape createProgressBarIndeterminatePattern(int x,int y,int w,int h){  final double wHalf=w / 2.0;  final double xOffset=5;  path.reset();  path.moveTo(xOffset,0);  path.lineTo(xOffset + wHalf,0);  path.curveTo(xOffset + wHalf - 5,h / 2 - 4,xOffset + wHalf + 5,h / 2 + 4,xOffset + wHalf,h);  path.lineTo(xOffset,h);  path.curveTo(xOffset + 5,h / 2 + 4,xOffset - 5,h / 2 - 4,xOffset,0);  path.closePath();  return path;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:29.919 -0500",hash_original_method="8A5EBF82F92FAE3DB13A729C4B6DDBA4",hash_generated_method="83C5A9A53DA3465E2C66ACC70037B43D") public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  private static Point2D.Double bezierII(int degree,Point2D.Double[] V,double t){  int i, j;  Point2D.Double q;  Point2D.Double[] vTemp;  vTemp=new Point2D.Double[degree + 1];  for (i=0; i <= degree; i++) {    vTemp[i]=(Point2D.Double)V[i].clone();  }  for (i=1; i <= degree; i++) {    for (j=0; j <= degree - i; j++) {      vTemp[j].x=(1.0 - t) * vTemp[j].x + t * vTemp[j + 1].x;      vTemp[j].y=(1.0 - t) * vTemp[j].y + t * vTemp[j + 1].y;    }  }  q=vTemp[0];  return q;}  }
class C{  public void sendTo(IMessage message,EntityPlayerMP player){  netHandler.sendTo(message,player);}  }
class C{  public static boolean isEnum(SootClass clz){  return ((clz.getModifiers() & 0x4000) != 0);}  }
class C{  void copyLocalVarAttr() throws IOException {  c.copy(4);  int tableLength=c.copyU2();  if (tableLength > 0) {    if (Inject.verbose) {      traceln();      traceln("Local variables for method " + methodName);    }    for (int tcnt=tableLength; tcnt > 0; --tcnt) {      int startPC=c.readU2();      int newStartPC=map[startPC];      c.writeU2(newStartPC);      int length=c.readU2();      int endPC=startPC + length;      int newEndPC=map[endPC];      int newLength=newEndPC - newStartPC;      c.writeU2(newLength);      int nameIndex=c.copyU2();      int descriptorIndex=c.copyU2();      int index=c.copyU2();      if (Inject.verbose) {        trace("   ");        trace(descriptorIndex);        trace(" ");        trace(nameIndex);        traceln("  pc= [was] " + startPC + " [now] "+ newStartPC+ ", length= [was] "+ length+ " [now] "+ newLength+ ", slot="+ index);      }    }  }}  }
class C{  protected void silentlyVisitMethodNode(final MethodNode directMethodCallCandidate){  ErrorCollector collector=new ErrorCollector(typeCheckingContext.getErrorCollector().getConfiguration());  startMethodInference(directMethodCallCandidate,collector);}  }
class C{  public static String toString3(double d){  long l=(long)d;  if (l == d)   return toString(l);  String str=Double.toString(d);  int pos;  if ((pos=str.indexOf('E')) != -1 && pos == str.length() - 2) {    return new StringBuffer(pos + 2).append(str.charAt(0)).append(str.substring(2,toDigit(str.charAt(pos + 1)) + 2)).append('.').append(str.substring(toDigit(str.charAt(pos + 1)) + 2,pos)).toString();  }  return str;}  }
class C{  public void fromFile(final File file){  final Document document=DOMCreateUtils.parseFile(file,DOMCreateUtils.ENCODING_UTF8);  clear();  final Node root=document.getFirstChild();  if (root.getNodeType() == Node.ELEMENT_NODE && ROOT_ELEMENT_NAME.equals(root.getNodeName())) {    NodeList list=((Element)root).getElementsByTagName(FOLDER_PATHS_ELEMENT_NAME);    if (list.getLength() > 0) {      list=((Element)list.item(0)).getElementsByTagName(PATH_ELEMENT_NAME);      final int count=list.getLength();      for (int i=0; i < count; i++) {        final Element pathElement=(Element)list.item(i);        final Node child=pathElement.getFirstChild();        if (child.getNodeType() == Node.TEXT_NODE) {          final String path=child.getNodeValue();          addFolder(path);        }      }    }  }}  }
class C{  public Property dayOfMonth(){  return new Property(this,getChronology().dayOfMonth());}  }
class C{  public RectListManager copy(){  return new RectListManager(rects);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MovePath(final IGame game,final Entity entity){  this.setEntity(entity);  this.setGame(game);}  }
class C{  public void dispose(){}  }
class C{  public static <T>LazyIterable<T> take(Iterable<T> iterable,int count){  return new TakeIterable<>(iterable,count);}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public ClientDetailsException(String message,Object params,boolean includeStacktrace){  super(message);  this.parameters=params;  this.stacktrace=includeStacktrace;}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      queryLoadBalancerContainerTemplate(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public static TsFciRunner2 serializableInstance(){  return new TsFciRunner2(Dag.serializableInstance(),new Parameters());}  }
class C{  static boolean isAlphaNum(int ch){  return isAlpha(ch) || isNumeric(ch);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.272 -0500",hash_original_method="8076C86F5BED3901532DF78458E5A05E",hash_generated_method="8E524DAF36E4E0F50709434963804CC6") public Node(Object item){  this.item=item;}  }
class C{  public static double docDiff(String original,String formatted,Class<? extends Lexer> lexerClass) throws Exception {  CodeBuffTokenStream original_tokens=Tool.tokenize(original,lexerClass);  CodeBuffTokenStream formatted_tokens=Tool.tokenize(formatted,lexerClass);  int i=-1;  int ws_distance=0;  int original_ws=0;  int formatted_ws=0;  while (true) {    Token ot=original_tokens.LT(i);    if (ot == null || ot.getType() == Token.EOF)     break;    List<Token> ows=original_tokens.getHiddenTokensToLeft(ot.getTokenIndex());    original_ws+=tokenText(ows).length();    Token ft=formatted_tokens.LT(i);    if (ft == null || ft.getType() == Token.EOF)     break;    List<Token> fws=formatted_tokens.getHiddenTokensToLeft(ft.getTokenIndex());    formatted_ws+=tokenText(fws).length();    ws_distance+=whitespaceEditDistance(tokenText(ows),tokenText(fws));    i++;  }  int max_ws=Math.max(original_ws,formatted_ws);  double normalized_ws_distance=((float)ws_distance) / max_ws;  return normalized_ws_distance;}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  public static SslSettings trustCertificateCN(String certificateCommonName){  checkArgument(!isNullOrEmpty(certificateCommonName),"certificateCommonName is null or empty");  return new SslSettings(true,certificateCommonName,true);}  }
class C{  private void showMissingPermissionError(){  Activity activity=getActivity();  if (activity != null) {    Toast.makeText(activity,R.string.request_permission,Toast.LENGTH_SHORT).show();    activity.finish();  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void replaceItemList(FilmstripItemList list){  if (list.size() == 0 && mFilmstripItems.size() == 0) {    return;  }  mFilmstripItems=list;  if (mListener != null) {    mListener.onFilmstripItemLoaded();  }}  }
class C{  public String globalInfo(){  return "A data generator that produces data randomly by producing a decision list.\n" + "The decision list consists of rules.\n" + "Instances are generated randomly one by one. If decision list fails "+ "to classify the current instance, a new rule according to this current "+ "instance is generated and added to the decision list.\n\n"+ "The option -V switches on voting, which means that at the end "+ "of the generation all instances are "+ "reclassified to the class value that is supported by the most rules.\n\n"+ "This data generator can generate 'boolean' attributes (= nominal with "+ "the values {true, false}) and numeric attributes. The rules can be "+ "'A' or 'NOT A' for boolean values and 'B < random_value' or "+ "'B >= random_value' for numeric values.";}  }
class C{  private void draw(int x,int y,Color c){  StdDraw.setPenColor(c);  StdDraw.filledCircle(x + 0.5,y + 0.5,0.25);}  }
class C{  public Task<BlockConsistencyGroupRestRep> restoreSnapshotSession(URI consistencyGroupId,URI snapshotSessionId){  final String url=getIdUrl() + "/protection/snapshot-sessions/{fcid}/restore";  return postTask(url,consistencyGroupId,snapshotSessionId);}  }
class C{  protected void adaptToRemove(){  int myStart=fPosition.offset;  int myEnd=fPosition.offset + fPosition.length - 1;  myEnd=Math.max(myStart,myEnd);  int yoursStart=fOffset;  int yoursEnd=fOffset + fLength - 1;  yoursEnd=Math.max(yoursStart,yoursEnd);  if (myEnd < yoursStart)   return;  if (myStart <= yoursStart) {    if (yoursEnd <= myEnd)     fPosition.length-=fLength; else     fPosition.length-=(myEnd - yoursStart + 1);  } else   if (yoursStart < myStart) {    if (yoursEnd < myStart)     fPosition.offset-=fLength; else {      fPosition.offset-=(myStart - yoursStart);      fPosition.length-=(yoursEnd - myStart + 1);    }  }  if (fPosition.offset < 0)   fPosition.offset=0;  if (fPosition.length < 0)   fPosition.length=0;}  }
class C{  public static UTMCoord fromLatLon(Angle latitude,Angle longitude){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  final UTMCoordConverter converter=new UTMCoordConverter();  long err=converter.convertGeodeticToUTM(latitude.radians,longitude.radians);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    throw new IllegalArgumentException("UTM Conversion Error");  }  return new UTMCoord(latitude,longitude,converter.getZone(),converter.getHemisphere(),converter.getEasting(),converter.getNorthing(),Angle.fromRadians(converter.getCentralMeridian()));}  }
class C{  public RestStatus status(){  Throwable cause=unwrapCause();  if (cause == this) {    return RestStatus.INTERNAL_SERVER_ERROR;  } else {    return ExceptionsHelper.status(cause);  }}  }
class C{  public ServiceParameterException(String message){  super(message);}  }
class C{  public void onReceivedClientCertRequest(WebView view,ClientCertRequestHandler handler,String host_and_port){  handler.cancel();}  }
class C{  private void createStartLabel(){  startLabel=new JLabel("Ignore all bytes before:");  startLabel.setBounds(10,120,130,25);  this.add(startLabel);  startPosition=new JTextField();  startPosition.setBounds(150,120,110,25);  this.add(startPosition);}  }
class C{  public PDFXref(int id,int gen,boolean compressed){  this.id=id;  this.generation=gen;  this.compressed=compressed;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void close(){  this.hide();}  }
class C{  private static int mix32(long z){  z=(z ^ (z >>> 33)) * 0x62a9d9ed799705f5L;  return (int)(((z ^ (z >>> 28)) * 0xcb24d0a5c88c35b3L) >>> 32);}  }
class C{  public boolean isDynamic(){  return false;}  }
class C{  public PTBTokenizer(Reader r){  this(r,false);}  }
class C{  public SharedAuthenticatedUser retrieveSharedConnectionUser(AuthenticationProvider authProvider,Credentials credentials){  String shareKey=getShareKey(credentials);  if (shareKey == null || connectionMap.get(shareKey) == null)   return null;  return new SharedAuthenticatedUser(authProvider,credentials,shareKey);}  }
class C{  @Override public boolean isReadOnly(int columnIndex){  return true;}  }
class C{  private void paintArrowDown(Graphics2D g,JComponent c,int width,int height){  int xOffset=width / 2 - 3;  int yOffset=height / 2 - 5;  g.translate(xOffset,yOffset);  Shape s=shapeGenerator.createArrowLeft(1,1,4.2,6);  g.setPaint(getCommonArrowPaint(s,type));  g.fill(s);  g.translate(-xOffset,-yOffset);}  }
class C{  private boolean conditionC0(String value,int index){  if (contains(value,index,4,"CHIA")) {    return true;  } else   if (index <= 1) {    return false;  } else   if (isVowel(charAt(value,index - 2))) {    return false;  } else   if (!contains(value,index - 1,3,"ACH")) {    return false;  } else {    char c=charAt(value,index + 2);    return (c != 'I' && c != 'E') || contains(value,index - 2,6,"BACHER","MACHER");  }}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  traceHandler.traceDebug(TAG,"onUpgrade");  try {    db.execSQL("DROP TABLE IF EXISTS " + ARRIVED_MESSAGE_TABLE_NAME);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onUpgrade",e);    throw e;  }  onCreate(db);  traceHandler.traceDebug(TAG,"onUpgrade complete");}  }
class C{  private boolean skipScope(){switch (fToken) {case Symbols.TokenRPAREN:    return skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN);case Symbols.TokenRBRACKET:  return skipScope(Symbols.TokenLBRACKET,Symbols.TokenRBRACKET);case Symbols.TokenRBRACE:return skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE);case Symbols.TokenGREATERTHAN:if (!fPrefs.prefHasGenerics) return false;int storedPosition=fPosition;int storedToken=fToken;nextToken();switch (fToken) {case Symbols.TokenLESSTHAN:return true;case Symbols.TokenIDENT:boolean isGenericStarter;try {isGenericStarter=!JavaHeuristicScanner.isGenericStarter(getTokenContent());} catch (BadLocationException e) {return false;}if (isGenericStarter) break;case Symbols.TokenQUESTIONMARK:case Symbols.TokenGREATERTHAN:if (skipScope(Symbols.TokenLESSTHAN,Symbols.TokenGREATERTHAN)) return true;}fPosition=storedPosition;fToken=storedToken;return false;default :Assert.isTrue(false);return false;}}  }
class C{  public void addCommand(JobHandlerCommand command){  if (stop.get()) {    logger.error("Failed to add command {}. Thread is stopped.",command);  }  this.commands.add(command);}  }
class C{  private static String humanReadableUnits(long bytes,DecimalFormat df){  String newSizeAndUnits;  if (bytes / ONE_GB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_GB)) + " GB";  } else   if (bytes / ONE_MB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_MB)) + " MB";  } else   if (bytes / ONE_KB > 0) {    newSizeAndUnits=String.valueOf(df.format((float)bytes / ONE_KB)) + " KB";  } else {    newSizeAndUnits=String.valueOf(bytes) + " bytes";  }  return newSizeAndUnits;}  }
class C{  private SimpleWindowState restoreWindowState(){  SimpleWindowState laststate=null;  final String statestr=preferences.get(prefnzPrefix + PREF_WINDOW_STATE,null);  if (logger.isDebugEnabled())   logger.debug("Restoring preference " + PREF_WINDOW_STATE + "="+ statestr);  if (statestr != null) {    SimpleWindowState state=null;    try {      state=SimpleWindowState.valueOf(statestr);    } catch (    final IllegalArgumentException e) {      state=null;    }    if (state != null) {switch (state) {case ICONFIED:        this.setExtendedState(Frame.ICONIFIED);      break;case NORMAL:    this.setExtendedState(Frame.NORMAL);  break;case MAXIMIZED:this.setExtendedState(Frame.MAXIMIZED_BOTH);break;default :logger.error("Invalid window state (nothing will changed): " + statestr);}}laststate=state;}return laststate;}  }
class C{  public void runThread(Thread t){}  }
class C{  protected String normalizeString(String s,boolean preserve,boolean stripfirst){  StringBuffer sb=new StringBuffer(s.length());  if (preserve) {    for (int i=0; i < s.length(); i++) {      char c=s.charAt(i);switch (c) {case 10:case 13:case '\t':        sb.append(' ');      break;default :    sb.append(c);}}return sb.toString();}int idx=0;if (stripfirst) {loop: while (idx < s.length()) {switch (s.charAt(idx)) {default :  break loop;case 10:case 13:case ' ':case '\t':idx++;}}}boolean space=false;for (int i=idx; i < s.length(); i++) {char c=s.charAt(i);switch (c) {case 10:case 13:break;case ' ':case '\t':if (!space) {sb.append(' ');space=true;}break;default :sb.append(c);space=false;}}return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.024 -0500",hash_original_method="8E4AD7240C251CF428BBDBBDF32B610B",hash_generated_method="2A2A56198B9E7D41956B2035F014B4D4") public int[] answerSubnegotiation(int suboptionData[],int suboptionLength){  return null;}  }
class C{  protected boolean approximatelyLinearDependent(PCAFilteredResult pca1,PCAFilteredResult pca2){  double[][] m1_czech=pca1.dissimilarityMatrix();  double[][] v2_strong=pca2.adapatedStrongEigenvectors();  for (int i=0; i < v2_strong[0].length; i++) {    double[] v2_i=getCol(v2_strong,i);    double distsq=squareSum(v2_i) - transposeTimesTimes(v2_i,m1_czech,v2_i);    if (distsq > deltasq) {      return false;    }  }  return true;}  }
class C{  @Override public void previous(Long maxPosition,Callback<TimelineResult<Tweet>> cb){  createCollectionRequest(null,maxPosition).enqueue(new CollectionCallback(cb));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MContainer[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK))   dispose();}  }
class C{  public void addTable(String tagString,ByteBuffer data){  tables.put(tagString,data);}  }
class C{  Type loadTypeArguments(Map<String,Object> m,final TypeDeclaration td,final Declaration container,final List<TypeParameter> typeParams){  if (td == null) {    return null;  }  @SuppressWarnings("unchecked") final Map<String,Map<String,Object>> targs=(Map<String,Map<String,Object>>)m.get(KEY_TYPE_ARGS);  if (targs == null) {    return null;  }  final HashMap<TypeParameter,Type> concretes=new HashMap<TypeParameter,Type>(targs.size());  HashMap<TypeParameter,SiteVariance> variances=null;  Declaration d=td;  while (d != null) {    if (d instanceof Generic) {      for (      TypeParameter tparm : ((Generic)d).getTypeParameters()) {        Map<String,Object> targMap=targs.get(partiallyQualifiedName(d) + "." + tparm.getName());        if (targMap == null) {          continue;        }        if (targMap.containsKey(KEY_PACKAGE) || targMap.containsKey(KEY_TYPES)) {          final Type _pt=getTypeFromJson(targMap,container,typeParams);          concretes.put(tparm,_pt);        } else         if (targMap.containsKey(KEY_NAME) && typeParams != null) {          for (          TypeParameter typeParam : typeParams) {            if (typeParam.getName().equals(targMap.get(KEY_NAME))) {              concretes.put(tparm,typeParam.getType());            }          }        }        Integer usv=(Integer)targMap.get(KEY_US_VARIANCE);        if (usv != null) {          if (variances == null) {            variances=new HashMap<>();          }          variances.put(tparm,SiteVariance.values()[usv]);        }      }    }    d=ModelUtil.getContainingDeclaration(d);  }  if (!concretes.isEmpty()) {    return td.getType().substitute(concretes,variances);  }  return null;}  }
class C{  public void arc(float x,float y,float w,float h,float startAngle,float sweepAngle){  arc(x,y,w,h,startAngle,sweepAngle,false);}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    s.write(jpeg,0,jpeg.length);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  public TIntIntHash(){  super();  no_entry_key=(int)0;  no_entry_value=(int)0;}  }
class C{  public DefaultTreeSelectionModel(){  listSelectionModel=new DefaultListSelectionModel();  selectionMode=DISCONTIGUOUS_TREE_SELECTION;  leadIndex=leadRow=-1;  uniquePaths=new Hashtable<TreePath,Boolean>();  lastPaths=new Hashtable<TreePath,Boolean>();  tempPaths=new TreePath[1];}  }
class C{  public static boolean canSustainPlantOn(IBlockAccess world,int x,int y,int z,ForgeDirection dir,IPlantable plant,Block soil){  return soil != null && soil.canSustainPlant(world,x,y,z,dir,plant);}  }
class C{  DigestPrivacy(boolean clientMode) throws SaslException {  super(clientMode);  try {    generatePrivacyKeyPair(clientMode);  } catch (  SaslException e) {    throw e;  }catch (  UnsupportedEncodingException e) {    throw new SaslException("DIGEST-MD5: Error encoding string value into UTF-8",e);  }catch (  IOException e) {    throw new SaslException("DIGEST-MD5: Error accessing " + "buffers required to generate cipher keys",e);  }catch (  NoSuchAlgorithmException e) {    throw new SaslException("DIGEST-MD5: Error creating " + "instance of required cipher or digest",e);  }}  }
class C{  public int addScatterPlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addScatterPlot(name,color,XY);}  }
class C{  private void cleanUpRequestedTokenMap(Token tokenObj){  RequestedTokenMap map=tokenMapHelper.getTokenMap(tokenObj.getId().toString());  if (map != null) {    _dbClient.removeObject(map);    _log.info("A token had a stale RequestedTokenMap.  Deleting.");  } else {    _log.info("No RequestedTokenMap for token to be deleted.");  }}  }
class C{  public String toString(){  return alternates[current];}  }
class C{  public JProductsSelector(){  initComponents();  flowpanel=new JFlowPanel();  add(flowpanel,BorderLayout.CENTER);}  }
class C{  public void onMapInitialised(){  start();}  }
class C{  public void fill(int fromIndex,int toIndex,float val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  if (expr != null) {    expr.checkValue(env,ctx,vset,exp);    expr=convert(env,ctx,Type.tInt,expr);    expr=expr.inlineValue(env,ctx);  }  return vset.clearDeadEnd();}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    issetBitfield=0;    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"User\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME\" TEXT,"+ "\"SEX\" TEXT,"+ "\"PHONE_NUMBER\" INTEGER,"+ "\"UPDATE_TIME\" INTEGER);");}  }
class C{  void prependEnumeration(Enumeration<?> enumeration){  Enumerator e=new Enumerator();  e.m_mine=m_mine;  e.m_next=m_next;  m_next=e;  m_mine=enumeration;}  }
class C{  public boolean isSpannedBy(String other){  return new MIMEType(other).spans(this,true);}  }
class C{  public void write(String str,int off,int len) throws IOException {  internalOut.write(str,off,len);}  }
class C{  public void nodeInfo(long memPtr){  enter();  try {    PlatformCallbackUtils.nodeInfo(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  private void generateTagClasses() throws Exception {  Map<String,ArrayList<RendererBean>> renderersByComponentFamily=GeneratorUtil.getComponentFamilyRendererMap(configBean,propManager.getProperty(PropertyManager.RENDERKIT_ID));  Map<String,ComponentBean> componentsByComponentFamily=GeneratorUtil.getComponentFamilyComponentMap(configBean);  for (  Map.Entry entry : renderersByComponentFamily.entrySet()) {    String componentFamily=(String)entry.getKey();    List<RendererBean> renderers=(List<RendererBean>)entry.getValue();    component=componentsByComponentFamily.get(componentFamily);    for (Iterator<RendererBean> rendererIter=renderers.iterator(); rendererIter.hasNext(); ) {      renderer=rendererIter.next();      if (renderer.isIgnoreForJsp() || renderer.isIgnoreAll()) {        continue;      }      String rendererType=renderer.getRendererType();      if (this.propManager.isExcludeRenderer(rendererType)) {        continue;      }      tagClassName=GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType));      if (tagClassName == null) {        throw new IllegalStateException("Could not determine tag class name");      }      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"Generating " + tagClassName + "...");      }      File file=new File(outputDir,tagClassName + ".java");      writer=new CodeWriter(new FileWriter(file));      tagHandlerPrefix();      tagHandlerSetterMethods();      tagHandlerGeneralMethods();      tagHanderSetPropertiesMethod();      tagHandlerClassicSupportMethods();      tagHandlerReleaseMethod();      tagHandlerSuffix();      writer.flush();      writer.close();    }  }}  }
class C{  public void moveParagraph(String paragraphId,int index,boolean throwWhenIndexIsOutOfBound){synchronized (paragraphs) {    int oldIndex;    Paragraph p=null;    if (index < 0 || index >= paragraphs.size()) {      if (throwWhenIndexIsOutOfBound) {        throw new IndexOutOfBoundsException("paragraph size is " + paragraphs.size() + " , index is "+ index);      } else {        return;      }    }    for (int i=0; i < paragraphs.size(); i++) {      if (paragraphs.get(i).getId().equals(paragraphId)) {        oldIndex=i;        if (oldIndex == index) {          return;        }        p=paragraphs.remove(i);      }    }    if (p != null) {      paragraphs.add(index,p);    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("kdf: 0x");  buffer.append(Functions.toFullHexString(kdf));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSharedDataLen: ");  buffer.append(pSharedData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSharedData: ");  buffer.append(Functions.toHexString(pSharedData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen: ");  buffer.append(pPublicData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData: ");  buffer.append(Functions.toHexString(pPublicData));  return buffer.toString();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  protected SetterDeclarationImpl(){  super();}  }
class C{  private static void write(CharSequence from,File to,Charset charset,boolean append) throws IOException {  asCharSink(to,charset,modes(append)).write(from);}  }
class C{  public void orderlyClose(){  try {    server.orderlyCloseChannel(ch);  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  public void putField(String key,Object field){  resultItems.put(key,field);}  }
class C{  public void test_primitive_long(){  final IKeyBuilder keyBuilder=KeyBuilder.newUnicodeInstance();  final Schema schema=new Schema("Employee","Id",KeyType.Long);  final Long primaryKey=1L;  final byte[] key=schema.getKey(keyBuilder,primaryKey,"Id",12L);  final KeyDecoder decoded=new KeyDecoder(key);  assertEquals(schema.getPrimaryKeyType(),decoded.getPrimaryKeyType());  assertEquals("Id",decoded.getColumnName());  assertEquals(12L,decoded.getTimestamp());}  }
class C{  private void checkExistsParent(int parentDivId) throws Exception {  int idx;  FolderTokenDivider div=null;  if (parentDivId == FolderBaseDefs.CLF_ROOT_ID)   return;  idx=m_dividers.findIndexById(parentDivId);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_INVALID_PARENT,FolderBaseError.EM_INVALID_PARENT);  }  div=m_dividers.get(idx);  if (div.isRemove()) {    throw new IeciTdException(FolderBaseError.EC_INVALID_PARENT,FolderBaseError.EM_INVALID_PARENT);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void uaRIMNe(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxNe(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxNe(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  protected boolean isLeftEdge(@NonNull SpanLookup spanLookup,int position){  int spanIndex=spanLookup.getIndex(position);  return spanIndex == 0;}  }
class C{  public synchronized void onSocketReaderRemoved(){  sockReadersRmv++;}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public static void addLanguage(Language language){  if (language == null)   return;  ArrayList<Language> list=new ArrayList<Language>(Arrays.asList(s_languages));  list.add(language);  s_languages=new Language[list.size()];  list.toArray(s_languages);}  }
class C{  public void writeRawByte(final byte value) throws IOException {  if (position == limit) {    throw new OutOfSpaceException(position,limit);  }  buffer[position++]=value;}  }
class C{  public CipherParameters encrypt(byte[] out,int keyLen){  return encrypt(out,0,keyLen);}  }
class C{  public boolean isConstructorRef(){  return constructorRef;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xF9D8EB63,version=150) public int sceHttpsEnd(){  if (!isHttpsInit) {    return ERROR_HTTP_NOT_INIT;  }  isHttpsInit=false;  return 0;}  }
class C{  public void acceptInvitation() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.acceptInvitation();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static void testEventsSimilarToQsim(final Scenario scenario,final PlanAlgorithm planRouter,final MobsimFactory qSimFactory,final String eventsFileQSim,final MobsimFactory pseudoSimFactory,final String eventsFilePSim,final TravelTimeCalculator travelTime,final boolean ignoreLinkEvents){  final EventsManager events=EventsUtils.createEventsManager();  final EventStreamComparator handler=new EventStreamComparator(ignoreLinkEvents);  events.addHandler(handler);  events.addHandler(travelTime);  new PersonPrepareForSim(planRouter,scenario).run(scenario.getPopulation());  long timeQSim, timePSim;{    final EventWriterXML writer=eventsFileQSim != null ? new EventWriterXML(eventsFileQSim) : null;    try {      log.info("running reference simulation...");      if (writer != null)       events.addHandler(writer);      final long startQSim=System.currentTimeMillis();      qSimFactory.createMobsim(scenario,events).run();      timeQSim=System.currentTimeMillis() - startQSim;      if (writer != null) {        events.removeHandler(writer);      }      log.info("running reference simulation... DONE");    } catch (    Error e) {      throw e;    } finally {      if (writer != null)       writer.closeFile();    }  }  handler.startCompare();{    final EventWriterXML writer=eventsFilePSim != null ? new EventWriterXML(eventsFilePSim) : null;    try {      log.info("running tested simulation...");      if (writer != null)       events.addHandler(writer);      final long startPSim=System.currentTimeMillis();      pseudoSimFactory.createMobsim(scenario,events).run();      timePSim=System.currentTimeMillis() - startPSim;      if (writer != null) {        events.removeHandler(writer);      }      log.info("running tested simulation... DONE");    } catch (    Error e) {      throw e;    } finally {      if (writer != null)       writer.closeFile();    }  }  handler.assertNoMoreStoredEvents();  log.info("reference simulation took " + timeQSim + " ms.");  log.info("tested simulation took " + timePSim + " ms.");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.858 -0500",hash_original_method="E601A465E2566ECC4B972E253D5CFD79",hash_generated_method="57FA755FC26750AD99632FC2AFFBA3C3") public int compareTo(String string){  addTaint(string.getTaintInt());  return getTaintInt();}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  protected int startTransfer(Message m,Connection con){  int retVal;  if (!con.isReadyForTransfer()) {    return TRY_LATER_BUSY;  }  if (!policy.acceptSending(getHost(),con.getOtherNode(getHost()),con,m)) {    return MessageRouter.DENIED_POLICY;  }  retVal=con.startTransfer(getHost(),m);  if (retVal == RCV_OK) {    addToSendingConnections(con);  } else   if (deleteDelivered && retVal == DENIED_OLD && m.getTo() == con.getOtherNode(this.getHost())) {    this.deleteMessage(m.getId(),false);  }  return retVal;}  }
class C{  public static void installKeybindings(UIDefaults table){  Object fieldInputMap=new UIDefaults.LazyInputMap(new Object[]{"control C",DefaultEditorKit.copyAction,"control V",DefaultEditorKit.pasteAction,"control X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"control A",DefaultEditorKit.selectAllAction,"control BACK_SLASH","unselect","shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"control LEFT",DefaultEditorKit.previousWordAction,"control RIGHT",DefaultEditorKit.nextWordAction,"control shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"control shift RIGHT",DefaultEditorKit.selectionNextWordAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"control shift O","toggle-componentOrientation"});  Object passwordInputMap=new UIDefaults.LazyInputMap(new Object[]{"control C",DefaultEditorKit.copyAction,"control V",DefaultEditorKit.pasteAction,"control X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"control A",DefaultEditorKit.selectAllAction,"control BACK_SLASH","unselect","shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"control LEFT",DefaultEditorKit.beginLineAction,"control RIGHT",DefaultEditorKit.endLineAction,"control shift LEFT",DefaultEditorKit.selectionBeginLineAction,"control shift RIGHT",DefaultEditorKit.selectionEndLineAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"control shift O","toggle-componentOrientation"});  Object multilineInputMap=new UIDefaults.LazyInputMap(new Object[]{"control C",DefaultEditorKit.copyAction,"control V",DefaultEditorKit.pasteAction,"control X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"control LEFT",DefaultEditorKit.previousWordAction,"control RIGHT",DefaultEditorKit.nextWordAction,"control shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"control shift RIGHT",DefaultEditorKit.selectionNextWordAction,"control A",DefaultEditorKit.selectAllAction,"control BACK_SLASH","unselect","HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"control HOME",DefaultEditorKit.beginAction,"control END",DefaultEditorKit.endAction,"control shift HOME",DefaultEditorKit.selectionBeginAction,"control shift END",DefaultEditorKit.selectionEndAction,"UP",DefaultEditorKit.upAction,"DOWN",DefaultEditorKit.downAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"PAGE_UP",DefaultEditorKit.pageUpAction,"PAGE_DOWN",DefaultEditorKit.pageDownAction,"shift PAGE_UP","selection-page-up","shift PAGE_DOWN","selection-page-down","ctrl shift PAGE_UP","selection-page-left","ctrl shift PAGE_DOWN","selection-page-right","shift UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"ENTER",DefaultEditorKit.insertBreakAction,"TAB",DefaultEditorKit.insertTabAction,"control T","next-link-action","control shift T","previous-link-action","control SPACE","activate-link-action","control shift O","toggle-componentOrientation"});  Object[] defaults={"TextField.focusInputMap",fieldInputMap,"PasswordField.focusInputMap",passwordInputMap,"TextArea.focusInputMap",multilineInputMap,"TextPane.focusInputMap",multilineInputMap,"EditorPane.focusInputMap",multilineInputMap,"Button.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"CheckBox.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"ComboBox.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","hidePopup","PAGE_UP","pageUpPassThrough","PAGE_DOWN","pageDownPassThrough","HOME","homePassThrough","END","endPassThrough","DOWN","selectNext2","KP_DOWN","selectNext2","UP","selectPrevious2","KP_UP","selectPrevious2","ENTER","enterPressed","F4","togglePopup","alt DOWN","togglePopup","alt KP_DOWN","togglePopup","alt UP","togglePopup","alt KP_UP","togglePopup"}),"Desktop.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl F5","restore","ctrl F4","close","ctrl F7","move","ctrl F8","resize","RIGHT","right","KP_RIGHT","right","LEFT","left","KP_LEFT","left","UP","up","KP_UP","up","DOWN","down","KP_DOWN","down","ESCAPE","escape","ctrl F9","minimize","ctrl F10","maximize","ctrl F6","selectNextFrame","ctrl TAB","selectNextFrame","ctrl alt F6","selectNextFrame","shift ctrl alt F6","selectPreviousFrame","ctrl F12","navigateNext","shift ctrl F12","navigatePrevious"}),"FileChooser.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","cancelSelection","F2","editFileName","F5","refresh","BACK_SPACE","Go Up","ENTER","approveSelection","ctrl ENTER","approveSelection"}),"InternalFrame.windowBindings",new Object[]{"shift ESCAPE","showSystemMenu","ctrl SPACE","showSystemMenu","ESCAPE","hideSystemMenu"},"List.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","UP","selectPreviousRow","KP_UP","selectPreviousRow","shift UP","selectPreviousRowExtendSelection","shift KP_UP","selectPreviousRowExtendSelection","ctrl shift UP","selectPreviousRowExtendSelection","ctrl shift KP_UP","selectPreviousRowExtendSelection","ctrl UP","selectPreviousRowChangeLead","ctrl KP_UP","selectPreviousRowChangeLead","DOWN","selectNextRow","KP_DOWN","selectNextRow","shift DOWN","selectNextRowExtendSelection","shift KP_DOWN","selectNextRowExtendSelection","ctrl shift DOWN","selectNextRowExtendSelection","ctrl shift KP_DOWN","selectNextRowExtendSelection","ctrl DOWN","selectNextRowChangeLead","ctrl KP_DOWN","selectNextRowChangeLead","LEFT","selectPreviousColumn","KP_LEFT","selectPreviousColumn","shift LEFT","selectPreviousColumnExtendSelection","shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl shift LEFT","selectPreviousColumnExtendSelection","ctrl shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl LEFT","selectPreviousColumnChangeLead","ctrl KP_LEFT","selectPreviousColumnChangeLead","RIGHT","selectNextColumn","KP_RIGHT","selectNextColumn","shift RIGHT","selectNextColumnExtendSelection","shift KP_RIGHT","selectNextColumnExtendSelection","ctrl shift RIGHT","selectNextColumnExtendSelection","ctrl shift KP_RIGHT","selectNextColumnExtendSelection","ctrl RIGHT","selectNextColumnChangeLead","ctrl KP_RIGHT","selectNextColumnChangeLead","HOME","selectFirstRow","shift HOME","selectFirstRowExtendSelection","ctrl shift HOME","selectFirstRowExtendSelection","ctrl HOME","selectFirstRowChangeLead","END","selectLastRow","shift END","selectLastRowExtendSelection","ctrl shift END","selectLastRowExtendSelection","ctrl END","selectLastRowChangeLead","PAGE_UP","scrollUp","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollUpExtendSelection","ctrl PAGE_UP","scrollUpChangeLead","PAGE_DOWN","scrollDown","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollDownExtendSelection","ctrl PAGE_DOWN","scrollDownChangeLead","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo"}),"MenuBar.windowBindings",new Object[]{"F10","takeFocus"},"RadioButton.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"OptionPane.windowBindings",new Object[]{"ESCAPE","close"},"FormattedTextField.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C",DefaultEditorKit.copyAction,"ctrl V",DefaultEditorKit.pasteAction,"ctrl X",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"control INSERT",DefaultEditorKit.copyAction,"shift INSERT",DefaultEditorKit.pasteAction,"shift DELETE",DefaultEditorKit.cutAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"ctrl LEFT",DefaultEditorKit.previousWordAction,"ctrl KP_LEFT",DefaultEditorKit.previousWordAction,"ctrl RIGHT",DefaultEditorKit.nextWordAction,"ctrl KP_RIGHT",DefaultEditorKit.nextWordAction,"ctrl shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"ctrl shift RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl A",DefaultEditorKit.selectAllAction,"HOME",DefaultEditorKit.beginLineAction,"END",DefaultEditorKit.endLineAction,"shift HOME",DefaultEditorKit.selectionBeginLineAction,"shift END",DefaultEditorKit.selectionEndLineAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"shift BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"ctrl H",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"ctrl DELETE",DefaultEditorKit.deleteNextWordAction,"ctrl BACK_SPACE",DefaultEditorKit.deletePrevWordAction,"RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"ENTER",JTextField.notifyAction,"ctrl BACK_SLASH","unselect","control shift O","toggle-componentOrientation","ESCAPE","reset-field-edit","UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement"}),"RootPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"shift F10","postPopup","CONTEXT_MENU","postPopup"}),"RootPane.defaultButtonWindowKeyBindings",new Object[]{"ENTER","press","released ENTER","release","ctrl ENTER","press","ctrl released ENTER","release"},"ScrollBar.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","positiveUnitIncrement","KP_RIGHT","positiveUnitIncrement","DOWN","positiveUnitIncrement","KP_DOWN","positiveUnitIncrement","PAGE_DOWN","positiveBlockIncrement","ctrl PAGE_DOWN","positiveBlockIncrement","LEFT","negativeUnitIncrement","KP_LEFT","negativeUnitIncrement","UP","negativeUnitIncrement","KP_UP","negativeUnitIncrement","PAGE_UP","negativeBlockIncrement","ctrl PAGE_UP","negativeBlockIncrement","HOME","minScroll","END","maxScroll"}),"ScrollPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","unitScrollRight","KP_RIGHT","unitScrollRight","DOWN","unitScrollDown","KP_DOWN","unitScrollDown","LEFT","unitScrollLeft","KP_LEFT","unitScrollLeft","UP","unitScrollUp","KP_UP","unitScrollUp","PAGE_UP","scrollUp","PAGE_DOWN","scrollDown","ctrl PAGE_UP","scrollLeft","ctrl PAGE_DOWN","scrollRight","ctrl HOME","scrollHome","ctrl END","scrollEnd"}),"Slider.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","positiveUnitIncrement","KP_RIGHT","positiveUnitIncrement","DOWN","negativeUnitIncrement","KP_DOWN","negativeUnitIncrement","PAGE_DOWN","negativeBlockIncrement","LEFT","negativeUnitIncrement","KP_LEFT","negativeUnitIncrement","UP","positiveUnitIncrement","KP_UP","positiveUnitIncrement","PAGE_UP","positiveBlockIncrement","HOME","minScroll","END","maxScroll"}),"Spinner.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement"}),"SplitPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","negativeIncrement","DOWN","positiveIncrement","LEFT","negativeIncrement","RIGHT","positiveIncrement","KP_UP","negativeIncrement","KP_DOWN","positiveIncrement","KP_LEFT","negativeIncrement","KP_RIGHT","positiveIncrement","HOME","selectMin","END","selectMax","F8","startResize","F6","toggleFocus","ctrl TAB","focusOutForward","ctrl shift TAB","focusOutBackward"}),"TabbedPane.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"RIGHT","navigateRight","KP_RIGHT","navigateRight","LEFT","navigateLeft","KP_LEFT","navigateLeft","UP","navigateUp","KP_UP","navigateUp","DOWN","navigateDown","KP_DOWN","navigateDown","ctrl DOWN","requestFocusForVisibleComponent","ctrl KP_DOWN","requestFocusForVisibleComponent"}),"TabbedPane.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl TAB","navigateNext","ctrl shift TAB","navigatePrevious","ctrl PAGE_DOWN","navigatePageDown","ctrl PAGE_UP","navigatePageUp","ctrl UP","requestFocus","ctrl KP_UP","requestFocus"}),"TableHeader.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","toggleSortOrder","LEFT","selectColumnToLeft","KP_LEFT","selectColumnToLeft","RIGHT","selectColumnToRight","KP_RIGHT","selectColumnToRight","alt LEFT","moveColumnLeft","alt KP_LEFT","moveColumnLeft","alt RIGHT","moveColumnRight","alt KP_RIGHT","moveColumnRight","alt shift LEFT","resizeLeft","alt shift KP_LEFT","resizeLeft","alt shift RIGHT","resizeRight","alt shift KP_RIGHT","resizeRight","ESCAPE","focusTable"}),"Table.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","RIGHT","selectNextColumn","KP_RIGHT","selectNextColumn","shift RIGHT","selectNextColumnExtendSelection","shift KP_RIGHT","selectNextColumnExtendSelection","ctrl shift RIGHT","selectNextColumnExtendSelection","ctrl shift KP_RIGHT","selectNextColumnExtendSelection","ctrl RIGHT","selectNextColumnChangeLead","ctrl KP_RIGHT","selectNextColumnChangeLead","LEFT","selectPreviousColumn","KP_LEFT","selectPreviousColumn","shift LEFT","selectPreviousColumnExtendSelection","shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl shift LEFT","selectPreviousColumnExtendSelection","ctrl shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl LEFT","selectPreviousColumnChangeLead","ctrl KP_LEFT","selectPreviousColumnChangeLead","DOWN","selectNextRow","KP_DOWN","selectNextRow","shift DOWN","selectNextRowExtendSelection","shift KP_DOWN","selectNextRowExtendSelection","ctrl shift DOWN","selectNextRowExtendSelection","ctrl shift KP_DOWN","selectNextRowExtendSelection","ctrl DOWN","selectNextRowChangeLead","ctrl KP_DOWN","selectNextRowChangeLead","UP","selectPreviousRow","KP_UP","selectPreviousRow","shift UP","selectPreviousRowExtendSelection","shift KP_UP","selectPreviousRowExtendSelection","ctrl shift UP","selectPreviousRowExtendSelection","ctrl shift KP_UP","selectPreviousRowExtendSelection","ctrl UP","selectPreviousRowChangeLead","ctrl KP_UP","selectPreviousRowChangeLead","HOME","selectFirstColumn","shift HOME","selectFirstColumnExtendSelection","ctrl shift HOME","selectFirstRowExtendSelection","ctrl HOME","selectFirstRow","END","selectLastColumn","shift END","selectLastColumnExtendSelection","ctrl shift END","selectLastRowExtendSelection","ctrl END","selectLastRow","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollLeftExtendSelection","ctrl PAGE_UP","scrollLeftChangeSelection","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollRightExtendSelection","ctrl PAGE_DOWN","scrollRightChangeSelection","TAB","selectNextColumnCell","shift TAB","selectPreviousColumnCell","ENTER","selectNextRowCell","shift ENTER","selectPreviousRowCell","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","ESCAPE","cancel","F2","startEditing","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo","F8","focusHeader"}),"ToggleButton.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"}),"ToolBar.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"UP","navigateUp","KP_UP","navigateUp","DOWN","navigateDown","KP_DOWN","navigateDown","LEFT","navigateLeft","KP_LEFT","navigateLeft","RIGHT","navigateRight","KP_RIGHT","navigateRight"}),"Tree.focusInputMap",new UIDefaults.LazyInputMap(new Object[]{"ADD","expand","SUBTRACT","collapse","ctrl C","copy","ctrl V","paste","ctrl X","cut","COPY","copy","PASTE","paste","CUT","cut","control INSERT","copy","shift INSERT","paste","shift DELETE","cut","UP","selectPrevious","KP_UP","selectPrevious","shift UP","selectPreviousExtendSelection","shift KP_UP","selectPreviousExtendSelection","ctrl shift UP","selectPreviousExtendSelection","ctrl shift KP_UP","selectPreviousExtendSelection","ctrl UP","selectPreviousChangeLead","ctrl KP_UP","selectPreviousChangeLead","DOWN","selectNext","KP_DOWN","selectNext","shift DOWN","selectNextExtendSelection","shift KP_DOWN","selectNextExtendSelection","ctrl shift DOWN","selectNextExtendSelection","ctrl shift KP_DOWN","selectNextExtendSelection","ctrl DOWN","selectNextChangeLead","ctrl KP_DOWN","selectNextChangeLead","RIGHT","selectChild","KP_RIGHT","selectChild","LEFT","selectParent","KP_LEFT","selectParent","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollUpExtendSelection","ctrl PAGE_UP","scrollUpChangeLead","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollDownExtendSelection","ctrl PAGE_DOWN","scrollDownChangeLead","HOME","selectFirst","shift HOME","selectFirstExtendSelection","ctrl shift HOME","selectFirstExtendSelection","ctrl HOME","selectFirstChangeLead","END","selectLast","shift END","selectLastExtendSelection","ctrl shift END","selectLastExtendSelection","ctrl END","selectLastChangeLead","F2","startEditing","ctrl A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","ctrl LEFT","scrollLeft","ctrl KP_LEFT","scrollLeft","ctrl RIGHT","scrollRight","ctrl KP_RIGHT","scrollRight","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo"}),"Tree.ancestorInputMap",new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","cancel"})};  table.putDefaults(defaults);}  }
class C{  public PiNodes(boolean insert,boolean typeChecks){  super(new Object[]{insert,typeChecks});  this.insertion=insert;  this.typeChecks=typeChecks;}  }
class C{  protected ScheduleTimeEventImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:03.328 -0500",hash_original_method="48A673DBBFEBFCB1D74A4ACDDDC3C6AB",hash_generated_method="BF486431FF0AE34E20C9943AA080AC10") protected String encodeBody(){  return method;}  }
class C{  @Transactional public void followUser(final String followerId,final String followingUserId) throws ServiceException {  try {    follow(followerId,followingUserId,Follow.FOLLOWING_TYPE_C_USER);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] follows a user[id="+ followingUserId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public boolean removeNode(Node node){  boolean changed=false;  List<Edge> edgeList1=edgeLists.get(node);  for (  Edge edge : new ArrayList<>(edgeList1)) {    Node node2=edge.getDistalNode(node);    if (node2 != node) {      List<Edge> edgeList2=edgeLists.get(node2);      edgeList2.remove(edge);      edgesSet.remove(edge);      changed=true;    }    edgeList1.remove(edge);  }  edgeLists.remove(node);  nodes.remove(node);  namesHash.remove(node.getName());  stuffRemovedSinceLastTripleAccess=true;  getPcs().firePropertyChange("nodeRemoved",node,null);  return changed;}  }
class C{  public void close(){  try {    if (m_zipFile != null)     m_zipFile.close();  } catch (  IOException ex) {    System.err.println("ZipUtil.close - " + ex);  }  m_zipFile=null;}  }
class C{  public void range(IHypercube space,IVisitKDNode visitor){  if (space.contains(region)) {    this.drain(visitor);    return;  }  if (space.intersects(cached)) {    visitor.visit(this);  }  if (space.getLeft(dimension) < coord) {    if (below != null) {      below.range(space,visitor);    }  }  if (coord < space.getRight(dimension)) {    if (above != null) {      above.range(space,visitor);    }  }}  }
class C{  protected void processConnectedNode(String tenantId,Trace trace,Node node,StringBuilder nodePath){  if (node.containerNode()) {    for (int i=0; i < ((ContainerNode)node).getNodes().size(); i++) {      Node n=((ContainerNode)node).getNodes().get(i);      processConnectedNode(tenantId,trace,n,new StringBuilder(nodePath).append(':').append(i));    }    Criteria criteria=new Criteria().setStartTime(100);    criteria.getCorrelationIds().add(new CorrelationIdentifier(Scope.CausedBy,nodePath.toString()));    List<Trace> fragments=searchFragments(tenantId,criteria);    ContainerNode anchor=(ContainerNode)node;    for (    Trace tf : fragments) {      for (int i=0; i < tf.getNodes().size(); i++) {        Node n=tf.getNodes().get(i);        if (anchor.getClass() != Producer.class) {          Producer p=new Producer();          anchor.getNodes().add(p);          p.getNodes().add(n);        } else {          anchor.getNodes().add(n);        }        processConnectedNode(tenantId,trace,n,new StringBuilder(tf.getId()).append(':').append(i));      }    }  }  if (node.getClass() == Producer.class && !node.getCorrelationIds().isEmpty()) {    Criteria criteria=new Criteria().setStartTime(100);    criteria.getCorrelationIds().addAll(node.getCorrelationIds());    List<Trace> fragments=searchFragments(tenantId,criteria);    for (    Trace tf : fragments) {      for (int i=0; !tf.getId().equals(trace.getId()) && i < tf.getNodes().size(); i++) {        Node n=tf.getNodes().get(i);        ((Producer)node).getNodes().add(n);        processConnectedNode(tenantId,trace,n,new StringBuilder(tf.getId()).append(':').append(i));      }    }  }}  }
class C{  public WindowsCodePageDataBean(){}  }
class C{  public static PutMappingRequest putMappingRequest(String... indices){  return new PutMappingRequest(indices);}  }
class C{  @Override public byte[] rpop(final byte[] key){  checkIsInMultiOrPipeline();  client.rpop(key);  return client.getBinaryBulkReply();}  }
class C{  public static String typeToString(Attribute att){  return typeToString(att.type());}  }
class C{  public int readUInt24() throws IOException {  return 0xffffff & (this.read() << 16 | this.read() << 8 | this.read());}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (triggerName == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'triggerName' was not present! Struct: " + toString());  }  if (cronExpression == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'cronExpression' was not present! Struct: " + toString());  }}  }
class C{  public final void add(K key,V value){  mItems.add(new Item(key,value));  mSorted=false;}  }
class C{  public Builder argument(GraphQLArgument.Builder builder){  this.arguments.add(builder.build());  return this;}  }
class C{  String encodedPassword(){  if (password.isEmpty())   return "";  int passwordStart=url.indexOf(':',scheme.length() + 3) + 1;  int passwordEnd=url.indexOf('@');  return url.substring(passwordStart,passwordEnd);}  }
class C{  public DrawerBuilder withGenerateMiniDrawer(boolean generateMiniDrawer){  this.mGenerateMiniDrawer=generateMiniDrawer;  return this;}  }
class C{  protected boolean isTrafficClassChanged(){  return true;}  }
class C{  public VisibleWhitespaceToken(){  super();  dotRect=new Rectangle2D.Float(0,0,1,1);}  }
class C{  public final static Point[] bresenham_line(int x1,int y1,int x2,int y2){  int i;  int d, x, y, ax, ay, sx, sy, dx, dy, t;  dx=x2 - x1;  ax=Math.abs(dx) << 1;  sx=MoreMath.sign(dx);  dy=y2 - y1;  ay=Math.abs(dy) << 1;  sy=MoreMath.sign(dy);  t=Math.max(Math.abs(dx),Math.abs(dy)) + 1;  Point[] ret_val=new Point[t];  x=x1;  y=y1;  if (ax > ay) {    d=ay - (ax >> 1);    for (i=0; ; ) {      ret_val[i++]=new Point(x,y);      if (x == x2)       return ret_val;      if (d >= 0) {        y+=sy;        d-=ax;      }      x+=sx;      d+=ay;    }  } else {    d=ax - (ay >> 1);    for (i=0; ; ) {      ret_val[i++]=new Point(x,y);      if (y == y2)       return ret_val;      if (d >= 0) {        x+=sx;        d-=ay;      }      y+=sy;      d+=ax;    }  }}  }
class C{  protected TokenIterator createTokenIterator(HeaderIterator hit){  return new BasicTokenIterator(hit);}  }
class C{  static public boolean start(ASyncProcess parent,ProcessInfo pi){  if (pi.getAD_Process_ID() == 110)   return startDocumentPrint(ReportEngine.ORDER,null,pi.getRecord_ID(),null);  if (pi.getAD_Process_ID() == MProcess.getProcess_ID("Rpt PP_Order",null))   return startDocumentPrint(ReportEngine.MANUFACTURING_ORDER,null,pi.getRecord_ID(),null);  if (pi.getAD_Process_ID() == MProcess.getProcess_ID("Rpt DD_Order",null))   return startDocumentPrint(ReportEngine.DISTRIBUTION_ORDER,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 116)   return startDocumentPrint(ReportEngine.INVOICE,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 117)   return startDocumentPrint(ReportEngine.SHIPMENT,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 217)   return startDocumentPrint(ReportEngine.PROJECT,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 276)   return startDocumentPrint(ReportEngine.RFQ,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 159)   return startDocumentPrint(ReportEngine.DUNNING,null,pi.getRecord_ID(),null); else   if (pi.getAD_Process_ID() == 202 || pi.getAD_Process_ID() == 204)   return startFinReport(pi);  return startStandardReport(pi);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Entity entity;  Notation notation;  String entityName;  String notationName;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  entity=(Entity)entities.getNamedItemNS(nullNS,"ent1");  assertNull("entityNull",entity);  notation=(Notation)notations.getNamedItemNS(nullNS,"notation1");  assertNull("notationNull",notation);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof UnresolvedPermission))   return false;  UnresolvedPermission that=(UnresolvedPermission)obj;  if (!this.type.equals(that.type)) {    return false;  }  if (this.name == null) {    if (that.name != null) {      return false;    }  } else   if (!this.name.equals(that.name)) {    return false;  }  if (this.actions == null) {    if (that.actions != null) {      return false;    }  } else {    if (!this.actions.equals(that.actions)) {      return false;    }  }  if ((this.certs == null && that.certs != null) || (this.certs != null && that.certs == null) || (this.certs != null && that.certs != null && this.certs.length != that.certs.length)) {    return false;  }  int i, j;  boolean match;  for (i=0; this.certs != null && i < this.certs.length; i++) {    match=false;    for (j=0; j < that.certs.length; j++) {      if (this.certs[i].equals(that.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  for (i=0; that.certs != null && i < that.certs.length; i++) {    match=false;    for (j=0; j < this.certs.length; j++) {      if (that.certs[i].equals(this.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  return true;}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  protected Smp(int maxThreads){  maxThreads=Math.max(1,maxThreads);  this.maxThreads=maxThreads;  if (maxThreads > 1) {    this.taskGroup=new FJTaskRunnerGroup(maxThreads);  } else {    this.taskGroup=null;  }}  }
class C{  public Quit(){  super();}  }
class C{  void paint(Graphics g){  if (vert == null || nvert <= 0) {    return;  }  transform();  if (gr == null) {    gr=new Color[16];    for (int i=0; i < 16; i++) {      int grey=(int)(170 * (1 - Math.pow(i / 15.0,2.3)));      gr[i]=new Color(grey,grey,grey);    }  }  int lg=0;  int lim=ncon;  int c[]=con;  int v[]=tvert;  if (lim <= 0 || nvert <= 0) {    return;  }  for (int i=0; i < lim; i++) {    int T=c[i];    int p1=((T >> 16) & 0xFFFF) * 3;    int p2=(T & 0xFFFF) * 3;    int grey=v[p1 + 2] + v[p2 + 2];    if (grey < 0) {      grey=0;    }    if (grey > 15) {      grey=15;    }    if (grey != lg) {      lg=grey;      g.setColor(gr[grey]);    }    g.drawLine(v[p1],v[p1 + 1],v[p2],v[p2 + 1]);  }}  }
class C{  public static void loadLibrary(String libname) throws IOException {  File lib=jniExtractor.extractJni(libname);  System.load(lib.getAbsolutePath());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.setAttribute("newAttr","newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public ByteList ConstantDoubleInfo(ByteList bytes,double value){  if (show_bytecode) {    StringBuilder numStr=new StringBuilder();    IL_FormatDoubleAsString(value,numStr);    cpool_out.write("\n      ConstantDoubleInfo " + numStr.toString());  }  bytes=Double(bytes,value);  return bytes;}  }
class C{  public void compile(Collection<JCTree.JCCompilationUnit> parsed){  compiler.processAnnotations(compiler.enterTrees(com.sun.tools.javac.util.List.from(parsed)));  while (!todo.isEmpty()) {    Env<AttrContext> next=todo.remove();    try {      Env<AttrContext> attributedTree=compiler.attribute(next);      Queue<Env<AttrContext>> analyzedTree=compiler.flow(attributedTree);    } catch (    Exception e) {      LOG.log(Level.SEVERE,"Error compiling " + next.toplevel.sourcefile.getName(),e);    }  }}  }
class C{  private void resolutionFinished(final ConflictResolution[] resolutions,final ConflictResolutionStatus[] statuses){  ConflictHelpers.showConflictErrors(getSite().getShell(),resolutions,statuses);  final RefreshPendingChangesCommand refreshCommand=new RefreshPendingChangesCommand(repository);  UICommandExecutorFactory.newUIJobCommandExecutor(getSite().getShell()).execute(refreshCommand);  queryConflicts(filters);}  }
class C{  public ImportedSymbol[] importSymbols(String libraryName,String[] symbolNames){  if (importLibraries == null) {    importLibraries=new HashMap();  }  ArrayList imports=(ArrayList)importLibraries.get(libraryName);  if (imports == null) {    imports=new ArrayList();    importLibraries.put(libraryName,imports);  }  ImportedSymbol[] symbols=new ImportedSymbol[symbolNames.length];  for (int i=0; i < symbolNames.length; i++) {    ImportedSymbol imp=new ImportedSymbol(0,symbolNames[i],libraryName);    symbols[i]=imp;    imports.add(imp);  }  return symbols;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof FlexibleServletAccessor<?>) {    FlexibleServletAccessor<?> flexibleServletAccessor=(FlexibleServletAccessor<?>)obj;    if (this.name == null) {      return flexibleServletAccessor.name == null;    }    return this.name.equals(flexibleServletAccessor.name);  } else {    String str=(String)obj;    if (this.name == null) {      return str == null;    }    return this.name.equals(str);  }}  }
class C{  private void updateAttribute(final Elements elements,final String attribute,final String requestHost){  for (  Element element : elements) {    String newLink=rewriteLink(element.attr(attribute),requestHost);    element.attr(attribute,newLink);  }}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((EcosListener)client).reply((EcosReply)r);}  }
class C{  public void click(long time,float x,float y){  if (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.UNDISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL) {    return;  }  int clicked=getTabIndexAtPositon(x,y,LayoutTab.getTouchSlop());  if (clicked >= 0) {    boolean isRtl=!((mCurrentMode == Orientation.PORTRAIT) ^ LocalizationUtils.isLayoutRtl());    if (mStackTabs[clicked].getLayoutTab().checkCloseHitTest(x,y,isRtl)) {      StackTab tab=mStackTabs[clicked];      final float halfCloseBtnWidth=LayoutTab.CLOSE_BUTTON_WIDTH_DP / 2.f;      final float halfCloseBtnHeight=mBorderTopPadding / 2.f;      final float contentWidth=tab.getLayoutTab().getOriginalContentWidth();      tab.setDiscardOriginY(halfCloseBtnHeight);      tab.setDiscardOriginX(isRtl ? halfCloseBtnWidth : contentWidth - halfCloseBtnWidth);      tab.setDiscardFromClick(true);      mLayout.uiRequestingCloseTab(time,tab.getId());      RecordUserAction.record("MobileStackViewCloseTab");      RecordUserAction.record("MobileTabClosed");    } else {      mLayout.uiSelectingTab(time,mStackTabs[clicked].getId());    }  }}  }
class C{  public void visitRect(int x1,int y1,int width,int height,CellCallable<T> function){  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      function.call(this,x1 + x,y1 + y);    }  }}  }
class C{  public DisplayWorld(){}  }
class C{  public void finished(long work,long latency){  finishedUpdater.getAndIncrement(this);  totalWorkUpdater.getAndAdd(this,work);  totalWorkSquaredUpdater.getAndAdd(this,work * work);  totalLatencyUpdater.getAndAdd(this,latency);  totalLatencySquaredUpdater.getAndAdd(this,latency * latency);}  }
class C{  public static String ipBytesToStr(byte[] ip){  try {    return InetAddress.getByAddress(null,ip).getHostAddress();  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));  }}  }
class C{  public Vertex applyRELATION(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  Vertex relation=null;  Vertex left=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex right=arguments.get(1).getTarget().applyQuotient(variables,network);  if (arguments.size() > 2) {    relation=arguments.get(2).getTarget().applyQuotient(variables,network);  }  if (relation == null) {    if (left.hasAnyRelationshipToTarget(right)) {      result=network.createVertex(Primitive.TRUE);    } else     if (left.hasRelationship(right)) {      result=left.mostConscious(right);    } else     if (right.hasRelationship(left)) {      result=right.mostConscious(left);    } else     if (left.hasAnyRelationshipToTargetOfType(right)) {      result=left.mostConsciousTargetOfType(right);    } else     if (right.hasAnyRelationshipToTargetOfType(left)) {      result=right.mostConsciousTargetOfType(left);    }  } else {    relation=relation.applyQuotient(variables,network);    if (left.hasOrInheritsRelationship(relation,right)) {      result=network.createVertex(Primitive.TRUE);    } else     if (left.hasOrInheritsInverseRelationship(relation,right)) {      result=network.createVertex(Primitive.FALSE);    } else {      if (relation.is(Primitive.IS)) {        if (left.hasAnyRelationshipToTarget(right)) {          result=network.createVertex(Primitive.TRUE);        }      }      if (result == null && (right.getData() instanceof String)) {        Vertex lower=network.createVertex(((String)right.getData()).toLowerCase());        if (left.hasOrInheritsRelationship(relation,lower)) {          result=network.createVertex(Primitive.TRUE);        } else         if (left.hasOrInheritsInverseRelationship(relation,lower)) {          result=network.createVertex(Primitive.FALSE);        }        Vertex caps=network.createVertex(Utils.capitalize(((String)right.getData()).toLowerCase()));        if (left.hasOrInheritsRelationship(relation,caps)) {          result=network.createVertex(Primitive.TRUE);        } else         if (left.hasOrInheritsInverseRelationship(relation,caps)) {          result=network.createVertex(Primitive.FALSE);        }      }      if (result == null) {        Collection<Relationship> words=right.getRelationships(Primitive.WORD);        result=checkRelationTargetForAllWords(arguments,variables,network,left,right,relation,words);      }      if (result == null) {        Collection<Relationship> words=right.getRelationships(Primitive.SYNONYM);        result=checkRelationTargetForAllWords(arguments,variables,network,left,right,relation,words);      }      if (result == null) {        Collection<Relationship> words=relation.getRelationships(Primitive.WORD);        result=checkRelationRelationshipForAllWords(arguments,variables,network,left,right,relation,words);      }      if (result == null) {        Collection<Relationship> words=relation.getRelationships(Primitive.SYNONYM);        result=checkRelationRelationshipForAllWords(arguments,variables,network,left,right,relation,words);      }    }  }  if (result != null) {    network.getBot().log(SELF,"Found relation",Level.FINER,left,relation,right,result);  } else {    result=network.createVertex(Primitive.UNKNOWN);    network.getBot().log(SELF,"Relation unknown",Level.FINER,left,relation,right,result);  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapwrongdocumenterr.class,args);}  }
class C{  protected Vector<String> cmd_matchFrom(String selection){  Vector<String> vector=new Vector<String>(2);  if (selection.equals(m_matchOptions[MATCH_INVOICE]))   vector.add(m_matchOptions[MATCH_SHIPMENT]); else   if (selection.equals(m_matchOptions[MATCH_ORDER]))   vector.add(m_matchOptions[MATCH_SHIPMENT]); else {    vector.add(m_matchOptions[MATCH_INVOICE]);    vector.add(m_matchOptions[MATCH_ORDER]);  }  return vector;}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/storage-pools/{poolId}/register") public StoragePoolRestRep registerStoragePool(@PathParam("id") URI id,@PathParam("poolId") URI poolId){  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  queryRegisteredSystem(id);  ArgValidator.checkFieldUriType(poolId,StoragePool.class,"poolId");  StoragePool pool=_dbClient.queryObject(StoragePool.class,poolId);  ArgValidator.checkEntity(pool,poolId,isIdEmbeddedInURL(poolId));  if (!id.equals(pool.getStorageDevice())) {    throw APIException.badRequests.poolNotBelongingToSystem(poolId,id);  }  if (RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(pool.getRegistrationStatus())) {    registerStoragePool(pool);    StringBuffer errorMessage=new StringBuffer();    ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(Arrays.asList(pool),_dbClient,_coordinator,errorMessage);  }  return StoragePoolService.toStoragePoolRep(pool,_dbClient,_coordinator);}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  ModelSelection modSelection;  if (m_binarySplits) {    modSelection=new BinC45ModelSelection(m_minNumObj,instances,m_useMDLcorrection,m_doNotMakeSplitPointActualValue);  } else {    modSelection=new C45ModelSelection(m_minNumObj,instances,m_useMDLcorrection,m_doNotMakeSplitPointActualValue);  }  if (!m_reducedErrorPruning) {    m_root=new C45PruneableClassifierTree(modSelection,!m_unpruned,m_CF,m_subtreeRaising,!m_noCleanup,m_collapseTree);  } else {    m_root=new PruneableClassifierTree(modSelection,!m_unpruned,m_numFolds,!m_noCleanup,m_Seed);  }  m_root.buildClassifier(instances);  if (m_binarySplits) {    ((BinC45ModelSelection)modSelection).cleanup();  } else {    ((C45ModelSelection)modSelection).cleanup();  }}  }
class C{  public String toStringList(){  int size=size();  StringBuffer buf=new StringBuffer(20 * size);  buf.append('[');  for (int i=0; i < size; i++) {    if (i > 0) {      buf.append(',').append(' ');    }    buf.append(iTypes[i].getName());    buf.append('=');    buf.append(iValues[i]);  }  buf.append(']');  return buf.toString();}  }
class C{  public boolean isSet(String name){  return (values.get(name) != null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testManyMessages(){  Message m1=new Message(h1,h2,msgId1,1);  h1.createNewMessage(m1);  Message m2=new Message(h1,h2,msgId2,1);  h1.createNewMessage(m2);  mc.reset();  h1.connect(h2);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertFalse(mc.next());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public AsyncResult RepublishAsync(RepublishRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public boolean isRouteBusy(){  return busy;}  }
class C{  protected StringUtils(){}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  public void updateClientCookies(Boolean clientCookies) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  scope.setAttribute("setclientcookies",Caster.toString(clientCookies,""));}  }
class C{  protected DnDListener(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  public ValidationContext createValidationContext(){  return currentContext;}  }
class C{  public Object showDialog(WindowBasedTextGUI textGUI){  textGUI.addWindow(this);  waitUntilClosed();  return null;}  }
class C{  public static boolean isNotEmpty(int[] array){  return (array != null && array.length != 0);}  }
class C{  public Font.Builder[] loadFontsForBuilding(byte[] b) throws IOException {  WritableFontData wfd=WritableFontData.createWritableFontData(b);  if (isCollection(wfd)) {    return loadCollectionForBuilding(wfd);  }  return new Font.Builder[]{loadSingleOTFForBuilding(wfd,0)};}  }
class C{  public boolean isConfirmDropMessage(){  return confirmDropMessage;}  }
class C{  SunCertPathBuilderException(String msg,AdjacencyList adjList){  this(msg);  this.adjList=adjList;}  }
class C{  public TypesSwitch(){  if (modelPackage == null) {    modelPackage=TypesPackage.eINSTANCE;  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public static void evictAll(File directory){  new Thread(new CacheClear(new FileManager(),directory)).start();}  }
class C{  public void endVisit(Assignment node){}  }
class C{  public TranspilerState prepare(Script script){  final N4JSResource resource=(N4JSResource)script.eResource();  final ContainerTypesHelper.MemberCollector memberCollector=containerTypesHelper.fromContext(resource);  final Tracer tracer=new Tracer();  final InformationRegistry info=new InformationRegistry();  final STECache steCache=createIM(script,tracer,info);  return new TranspilerState(resource,memberCollector,steCache.im,steCache,tracer,info);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void writeXml(ResultSet rs,java.io.Writer writer) throws SQLException {  this.populate(rs);  curPosBfrWrite=this.getRow();  this.writeXml(writer);}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(Constants.INDENT);  buffer.append("RandomInfo: ");  buffer.append(RandomInfo);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pVersion: ");  buffer.append(pVersion);  return buffer.toString();}  }
class C{  public String toNamespacedString(){  return (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  public QuickSort(E ar[]){  this.ar=ar;  threshold=ar.length / ratio;  helpersWorking=0;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + my_p+ ")";}  }
class C{  public void removeStickyEventRemote(Object event){  byte[] objectInArray=WearBusTools.parseToSend(event);  if (objectInArray != null) {    new SendCommandToNode(WearBusTools.PREFIX_EVENT + WearBusTools.MESSAGE_PATH_COMMAND,objectInArray,event.getClass(),context).start();  }}  }
class C{  public void clear(){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.clear();    }  } else {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public void end(){  if (parentNode != rootNode) {    Node thisNode=parentNode;    while (thisNode != rootNode) {      if (domBuilder.config.isImpliedEndTags()) {        if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) {          thisNode=thisNode.getParentNode();          continue;        }      }      error("Unclosed tag closed: <" + thisNode.getNodeName() + ">");      thisNode=thisNode.getParentNode();    }  }  if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) {    removeLastChildNodeIfEmptyText(parentNode,true);  }  if (domBuilder.config.isUseFosterRules()) {    HtmlFosterRules fosterRules=new HtmlFosterRules();    fosterRules.fixFosterElements(rootNode);  }  rootNode.end();  if (log.isDebugEnabled()) {    log.debug("LagartoDom tree created in " + rootNode.getElapsedTime() + " ms");  }}  }
class C{  public OAEPParameterSpec(String mdName,String mgfName,AlgorithmParameterSpec mgfSpec,PSource pSrc){  if (mdName == null) {    throw new NullPointerException("mdName == null");  } else   if (mgfName == null) {    throw new NullPointerException("mgfName == null");  } else   if (pSrc == null) {    throw new NullPointerException("pSrc == null");  }  this.mdName=mdName;  this.mgfName=mgfName;  this.mgfSpec=mgfSpec;  this.pSrc=pSrc;}  }
class C{  public int size(){  return size;}  }
class C{  private void recordNewPositions(IJavaElement newElement,int depth){  if (depth < this.maxDepth && newElement instanceof IParent) {    JavaElementInfo info=null;    try {      info=(JavaElementInfo)((JavaElement)newElement).getElementInfo();    } catch (    JavaModelException npe) {      return;    }    IJavaElement[] children=info.getChildren();    if (children != null) {      insertPositions(children,true);      for (int i=0, length=children.length; i < length; i++) {        recordNewPositions(children[i],depth + 1);      }    }  }}  }
class C{  @Override protected void initialize(InputStream snapshotInputStream,InternalDistributedMember imageTarget,InternalRegionArguments internalRegionArgs) throws TimeoutException, IOException, ClassNotFoundException {  Assert.assertTrue(!isInitialized());  if (logger.isDebugEnabled()) {    logger.debug("DistributedRegion.initialize BEGIN: {}",getFullPath());  }  if (this.scope.isDistributed() && this.concurrencyChecksEnabled) {    createVersionVector();  }  if (this.scope.isGlobal()) {    getLockService();  }  try {    try {      PersistentMemberID persistentId=null;      boolean recoverFromDisk=isRecoveryNeeded();      DiskRegion dskRgn=getDiskRegion();      if (recoverFromDisk) {        if (logger.isDebugEnabled()) {          logger.debug("DistributedRegion.getInitialImageAndRecovery: Starting Recovery");        }        dskRgn.initializeOwner(this);        if (logger.isDebugEnabled()) {          logger.debug("DistributedRegion.getInitialImageAndRecovery: Finished Recovery");        }        persistentId=dskRgn.getMyPersistentID();      }      createOQLIndexes(internalRegionArgs,recoverFromDisk);      if (getDataPolicy().withReplication() || getDataPolicy().withPreloaded()) {        getInitialImageAndRecovery(snapshotInputStream,imageTarget,internalRegionArgs,recoverFromDisk,persistentId);      } else {        new CreateRegionProcessor(this).initializeRegion();        if (snapshotInputStream != null) {          releaseBeforeGetInitialImageLatch();          loadSnapshotDuringInitialization(snapshotInputStream);        }      }    } catch (    DiskAccessException dae) {      this.handleDiskAccessException(dae,true);      throw dae;    }    initMembershipRoles();    isInitializingThread=false;    super.initialize(null,null,null);  }  finally {    if (this.eventTracker != null) {      this.eventTracker.setInitialized();    }  }}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  public static Set<String> loadAppClasses(Set<String> classes){  Set<String> notLoaded=new HashSet<String>();  for (  String clz : classes) {    SootClass sc=Scene.v().loadClass(clz,SootClass.BODIES);    sc.setApplicationClass();    logger.debug("Loading class as application class: {}",clz);    if (API.v().isSystemClass(sc)) {      API.v().removeSystemClassDesignation(sc);      for (      SootMethod m : sc.getMethods()) {        API.v().removeSystemMethodDesignation(m);      }    }  }  return notLoaded;}  }
class C{  public void normalize(){  if (!isNormalized()) {    invert();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void synthesizeWindowActivation(final boolean activate){  assert Display.getCurrent() != null;  assert PlatformHelper.isWin32();  EventQueue.invokeLater(null);}  }
class C{  @VisibleForTesting protected void addOMADownloadToSharedPrefs(String omaInfo){  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);  omaDownloads.add(omaInfo);  storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  PrintWriter outW;  if ((retrieveFile() == null) && (getWriter() == null)) {    outW=new PrintWriter(System.out);  } else {    outW=new PrintWriter(getWriter());  }  JSONNode json=JSONInstances.toJSON(getInstances());  StringBuffer buffer=new StringBuffer();  json.toString(buffer);  outW.println(buffer.toString());  outW.flush();  if (getWriter() != null) {    outW.close();  }  setWriteMode(WAIT);  outW=null;  resetWriter();  setWriteMode(CANCEL);}  }
class C{  public ToggleInlineMenuButtonBuilder<T> initialValue(boolean value){  this.initialValue=value;  return this;}  }
class C{  @Interruptible public void resizeFreeList(int units,int grain){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(parent == null && !Plan.isInitialized());  table=new int[(int)((units + 1 + heads) << 1)];  initializeHeap(units,grain);}  }
class C{  protected void appendClassName(StringBuffer buffer,Object object){  if (useClassName && object != null) {    register(object);    if (useShortClassName) {      buffer.append(getShortClassName(object.getClass()));    } else {      buffer.append(object.getClass().getName());    }  }}  }
class C{  protected void configurePropertiesFromAction(Action a){  setMnemonicFromAction(a);  setTextFromAction(a,false);  AbstractAction.setToolTipTextFromAction(this,a);  setIconFromAction(a);  setActionCommandFromAction(a);  AbstractAction.setEnabledFromAction(this,a);  if (AbstractAction.hasSelectedKey(a) && shouldUpdateSelectedStateFromAction()) {    setSelectedFromAction(a);  }  setDisplayedMnemonicIndexFromAction(a,false);}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  final boolean clipDivider=mClipDivider;  if (!clipDivider) {    divider.setBounds(bounds);  } else {    canvas.save();    canvas.clipRect(bounds);  }  divider.draw(canvas);  if (clipDivider) {    canvas.restore();  }}  }
class C{  public void parseDmozFile(File dmozFile,int subsetDenom,boolean includeAdult,int skew,Pattern topicPattern) throws IOException, SAXException, ParserConfigurationException {  SAXParserFactory parserFactory=SAXParserFactory.newInstance();  SAXParser parser=parserFactory.newSAXParser();  XMLReader reader=parser.getXMLReader();  RDFProcessor rp=new RDFProcessor(reader,subsetDenom,includeAdult,skew,topicPattern);  reader.setContentHandler(rp);  reader.setErrorHandler(rp);  LOG.info("skew = " + rp.hashSkew);  XMLCharFilter in=new XMLCharFilter(new BufferedReader(new InputStreamReader(new BufferedInputStream(new FileInputStream(dmozFile)),"UTF-8")));  try {    InputSource is=new InputSource(in);    reader.parse(is);  } catch (  Exception e) {    if (LOG.isErrorEnabled()) {      LOG.error(e.toString());    }    System.exit(0);  } finally {    in.close();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final String toString(){  return (name + ((isSource == true) ? " source" : " target") + " port");}  }
class C{  public MetalinkFileBuilder addLanguage(String language){  if (language != null && !language.isEmpty())   this.language.add(language);  return this;}  }
class C{  public ConnectionProviderException(){  super();}  }
class C{  public static <T1,T2>Flux<Tuple2<T1,T2>> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2){  return zip(source1,source2,tuple2Function());}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  ElemContext elemContext=m_elemContext;  if (elemContext.m_startTagOpen) {    closeStartTag();    elemContext.m_startTagOpen=false;  } else   if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_needToOutputDocTypeDecl) {    String n=name;    if (n == null || n.length() == 0) {      n=localName;    }    outputDocTypeDecl(n);  }  if (null != namespaceURI && namespaceURI.length() > 0) {    super.startElement(namespaceURI,localName,name,atts);    return;  }  try {    ElemDesc elemDesc=getElemDesc2(name);    int elemFlags=elemDesc.getFlags();    if (m_doIndent) {      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      if (m_ispreserve)       m_ispreserve=false; else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        indent();      }      m_inBlockElem=!isBlockElement;    }    if (atts != null)     addAttributes(atts);    m_isprevtext=false;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);    if (m_tracer != null)     firePseudoAttributes();    if ((elemFlags & ElemDesc.EMPTY) != 0) {      m_elemContext=elemContext.push();      m_elemContext.m_elementName=name;      m_elemContext.m_elementDesc=elemDesc;      return;    } else {      elemContext=elemContext.push(namespaceURI,localName,name);      m_elemContext=elemContext;      elemContext.m_elementDesc=elemDesc;      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;    }    if ((elemFlags & ElemDesc.HEADELEM) != 0) {      closeStartTag();      elemContext.m_startTagOpen=false;      if (!m_omitMetaTag) {        if (m_doIndent)         indent();        writer.write("<META http-equiv=\"Content-Type\" content=\"text/html; charset=");        String encoding=getEncoding();        String encode=Encodings.getMimeEncoding(encoding);        writer.write(encode);        writer.write("\">");      }    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public When(){  super(KEY);}  }
class C{  private void unregisterListener(String requestUrl){  String listenerId=getUniqueListenerId(requestUrl);  log.debug("Unregister listener " + listenerId);  routeRepository.removeRoute(hookRootUri + LISTENER_HOOK_TARGET_PATH + getListenerUrlSegment(requestUrl));  listenerRepository.removeListener(listenerId);}  }
class C{  public String toString(){  return polynomial.toString(16);}  }
class C{  public boolean isApplicationPreConfiguredStatic(){  return isApplicationPreConfiguredStatic;}  }
class C{  public boolean isNx(){  return nx;}  }
class C{  public void reset(InputStream in){  reset();  this.reader=new LineReader(in);}  }
class C{  public static boolean validateAllVolumesInCGIngested(List<UnManagedVolume> ingestedUnManagedVolumes,UnManagedProtectionSet umpset,IngestionRequestContext requestContext,DbClient dbClient){  if (umpset == null) {    _logger.warn("INGEST VALIDATION: unmanaged protection set is null");    return false;  }  _logger.info("Checking if all volumes in UnManagedProtectionSet {} have been ingested yet...",umpset.forDisplay());  if (umpset.getManagedVolumeIds() != null && !umpset.getManagedVolumeIds().isEmpty()) {    boolean noUmvsLeft=true;    for (    String managedVolumeId : umpset.getManagedVolumeIds()) {      BlockObject managedVolume=requestContext.findDataObjectByType(Volume.class,URI.create(managedVolumeId),true);      if (hasUnManagedVolume(managedVolume,ingestedUnManagedVolumes,dbClient)) {        _logger.info(String.format("INGEST VALIDATION: Managed volume %s (%s) still has a corresponding unmanaged volume left which means that there is still some info to be ingested",managedVolume.getId(),managedVolume.forDisplay()));        noUmvsLeft=false;      }    }    if (!noUmvsLeft) {      return false;    }  }  if (umpset.getUnManagedVolumeIds() != null && umpset.getManagedVolumeIds() != null && umpset.getVolumeWwns() != null && umpset.getUnManagedVolumeIds().size() == umpset.getManagedVolumeIds().size() && umpset.getManagedVolumeIds().size() == umpset.getVolumeWwns().size()) {    _logger.info("INGEST VALIDATION: Found that all volumes associated with the RP CG have been ingested: " + umpset.getCgName());    return true;  }  if (umpset.getUnManagedVolumeIds() == null) {    String msg=String.format("INGEST VALIDATION: No unmanaged volumes found in unmanaged protection set: " + umpset.getCgName());    _logger.error(msg);    return false;  }  if (umpset.getManagedVolumeIds() == null) {    String msg=String.format("INGEST VALIDATION: No managed volumes found in unmanaged protection set: " + umpset.getCgName());    _logger.error(msg);    return false;  }  if (umpset.getVolumeWwns() == null) {    String msg=String.format("INGEST VALIDATION: No volume WWNs found in unmanaged protection set: " + umpset.getCgName());    _logger.error(msg);    return false;  }  if (!umpset.getUnManagedVolumeIds().isEmpty()) {    String msg=String.format("INGEST VALIDATION: Found that the unmanaged protection set: %s is not yet ingestable because there " + "are %d volumes to be ingested, however only %d volume have been ingested.",umpset.getCgName(),umpset.getVolumeWwns().size(),umpset.getManagedVolumeIds().size());    _logger.info(msg);    return false;  }  if (umpset.getManagedVolumeIds().size() != umpset.getVolumeWwns().size()) {    String msg=String.format("INGEST VALIDATION: Found that the unmanaged protection set: %s is not yet ingestable because there " + " are %d volumes in the RP CG that are on arrays that are not under management.",umpset.getCgName(),umpset.getVolumeWwns().size() - umpset.getManagedVolumeIds().size());    _logger.info(msg);    return false;  }  _logger.info("INGEST VALIDATION: All of the volumes associated with RP CG " + umpset.getCgName() + " have been ingested.");  return true;}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public final String toString(Attribute att){  return toString(att.index());}  }
class C{  public boolean isCollapsibleByDefault(){  Object oo=get_Value(COLUMNNAME_IsCollapsibleByDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void insertLegAct(Plan plan,int pos,Leg leg,Activity act){  if (pos < plan.getPlanElements().size()) {    Object o=plan.getPlanElements().get(pos);    if (!(o instanceof Leg)) {      throw new IllegalArgumentException("Position to insert leg and act is not valid (act instead of leg at position).");    }  } else   if (pos > plan.getPlanElements().size()) {    throw new IllegalArgumentException("Position to insert leg and act is not valid.");  }  plan.getPlanElements().add(pos,act);  plan.getPlanElements().add(pos,leg);}  }
class C{  public TurtleParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  public List<Synapse> connectOneToOne(List<Neuron> sourceNeurons,final List<Neuron> targetNeurons){  return connectOneToOne(sourceNeurons,targetNeurons,useBidirectionalConnections,true);}  }
class C{  void maybeRemoveInherits(Node exprNode){  Preconditions.checkState(exprNode.isExprResult());  if (exprNode.getFirstChild().isCall()) {    Node callNode=exprNode.getFirstChild();    if (!"goog.inherits".equals(callNode.getFirstChild().getQualifiedName())) {      return;    }    String className=callNode.getSecondChild().getQualifiedName();    String superClassName=callNode.getLastChild().getQualifiedName();    if (!types.containsKey(className)) {      compiler.report(JSError.make(exprNode,GentsErrorManager.GENTS_CLASS_PASS_ERROR,String.format("Class %s could not be found.",className)));      return;    }    Node classNode=types.get(className);    String storedSuperClassName=classNode.getSecondChild().getQualifiedName();    if (classNode.getSecondChild().isEmpty() || !storedSuperClassName.equals(superClassName)) {      compiler.report(JSError.make(exprNode,GentsErrorManager.GENTS_CLASS_PASS_ERROR,String.format("Invalid superclass for %s",className)));      return;    }    exprNode.detachFromParent();    compiler.reportCodeChange();  } else   if (exprNode.getFirstChild().isAssign()) {    Node assignNode=exprNode.getFirstChild();    Node lhs=assignNode.getFirstChild();    if (lhs.isGetProp() && "prototype".equals(lhs.getLastChild().getString())) {      compiler.report(JSError.make(exprNode,GentsErrorManager.GENTS_CLASS_PASS_ERROR,String.format("Cannot directly assign to prototype for %s",lhs.getFirstChild().getQualifiedName())));    }  }}  }
class C{  public static TransitionKind mapUmlTransitionType(Transition transition){  org.eclipse.uml2.uml.TransitionKind kind=transition.getKind();  if (kind == org.eclipse.uml2.uml.TransitionKind.LOCAL_LITERAL) {    return TransitionKind.LOCAL;  } else   if (kind == org.eclipse.uml2.uml.TransitionKind.INTERNAL_LITERAL) {    return TransitionKind.INTERNAL;  } else {    return TransitionKind.EXTERNAL;  }}  }
class C{  protected void removeDefinition(DefinitionRecord defRec){  TreeSet defs=(TreeSet)definitionLists.get(defRec.namespaceURI,defRec.localName);  if (defs == null) {    return;  }  Element imp=defRec.importElement;  ImportRecord ir=(ImportRecord)imports.get(imp);  DefinitionRecord activeDefRec=(DefinitionRecord)defs.first();  defs.remove(defRec);  definitions.remove(defRec.definition,imp);  removeDefinitionElementListeners(defRec.definition,ir);  if (defRec != activeDefRec) {    return;  }  if (defRec.template != null) {    removeTemplateElementListeners(defRec.template,ir);  }  rebind(defRec.namespaceURI,defRec.localName,document.getDocumentElement());}  }
class C{  public void endVisit(AnonymousClassDeclaration node){}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public void printPI(char[] target,char[] space,char[] data) throws IOException {  if (prettyPrinter.getFormat()) {    if (canIndent) {      printNewline();      printString(margin.toString());    }  }  printString("<?");  printCharacters(target);  printSpaces(space,false);  printCharacters(data);  printString("?>");}  }
class C{  public boolean remove(K key,V value){  kvUtil.verifyKeyAndValueNotNull(key,value);  AccessTimeObjectHolder<V> holder=objects.get(key);  if (holder == null)   return false;  V holderValue=holder.peek();  if (!holderValue.equals(value))   return false;  AccessTimeObjectHolder<V> gh=gatedHolder(holder);  boolean validBeforeInvalidate=gh != null;  boolean removed=this.objects.remove(key,holder);  releaseHolder(holder);  return validBeforeInvalidate ? removed : false;}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Server Finder",width / 2,20,16777215);  drawCenteredString(fontRendererObj,"This will search for servers with similar IPs",width / 2,40,10526880);  drawCenteredString(fontRendererObj,"to the IP you type into the field below.",width / 2,50,10526880);  drawCenteredString(fontRendererObj,"The servers it finds will be added to your server list.",width / 2,60,10526880);  drawString(fontRendererObj,"Server address:",width / 2 - 100,height / 4 + 24,10526880);  ipBox.drawTextBox();  drawString(fontRendererObj,"Max. threads:",width / 2 - 100,height / 4 + 60,10526880);  maxThreadsBox.drawTextBox();  drawCenteredString(fontRendererObj,state.toString(),width / 2,height / 4 + 73,10526880);  drawString(fontRendererObj,"Checked: " + checked + " / 1792",width / 2 - 100,height / 4 + 84,10526880);  drawString(fontRendererObj,"Working: " + working,width / 2 - 100,height / 4 + 94,10526880);  super.drawScreen(par1,par2,par3);}  }
class C{  boolean updateNameAndPassword(String newName,String newPassword){  boolean updated=false;  final String oldName=configuration.getUser();  if (isNewName(oldName,newName) && (newPassword == null || newPassword.isEmpty())) {    if (getAuthService().isHandlingPasswords()) {      throw new PasswordException(Messages.ConfigurationAction_9);    }  }  configuration.setUser(newName);  if (newPassword != null && !newPassword.isEmpty()) {    configuration.setPass(newPassword);    updated=true;  }  return updated;}  }
class C{  public void GetInstance01(boolean mode) throws CertificateException, CRLException {  try {    CertificateFactory.getInstance(null);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i]);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i]);    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider(),mProv);    checkResult(cerF,mode);  }}  }
class C{  public static String readUTF(DataInputStream d) throws IOException {  if (d.readBoolean()) {    return d.readUTF();  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).appendData("newString");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean isLookup(){  boolean retValue=false;  if (DisplayType.isLookup(m_vo.displayType))   retValue=true; else   if (m_vo.IsKey)   retValue=false; else   if (m_vo.displayType == DisplayType.Location || m_vo.displayType == DisplayType.Locator || m_vo.displayType == DisplayType.Account || m_vo.displayType == DisplayType.PAttribute)   retValue=true;  return retValue;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.725 -0500",hash_original_method="5A03B3005777615BF04A1D43320D1AA1",hash_generated_method="A568AD10F00EA2CC70306780A6D6D9DD") public boolean removeAll(java.util.Collection<?> collection){  return this.hlist.removeAll(collection);}  }
class C{  @Override public boolean addEdge(Number edge,Pair<? extends Integer> endpoints,EdgeType edgeType){  if (endpoints == null)   throw new IllegalArgumentException("endpoints may not be null");  Integer v1=endpoints.getFirst();  Integer v2=endpoints.getSecond();  if (v1.equals(v2))   throw new IllegalArgumentException("No self-loops"); else   return super.addEdge(edge,endpoints,edgeType);}  }
class C{  public final void replaceAll(Object from,Object to,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  final int length=this.length;  Object[][] fieldx=null;  Object[] fieldxy=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        Object obj=fieldxy[z];        if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from)))         fieldxy[z]=to;      }    }  }}  }
class C{  private boolean updateManualGoals(){  if (!MEASURETYPE_Manual.equals(getMeasureType()))   return false;  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (int i=0; i < goals.length; i++) {    MGoal goal=goals[i];    goal.setMeasureActual(getManualActual());    goal.save(get_TrxName());  }  return true;}  }
class C{  @SuppressWarnings("SimplifiableIfStatement") public static boolean projectScopedTaskExecutionActionsVisibleFor(NodeSelection nodeSelection){  if (nodeSelection.isEmpty()) {    return false;  }  return nodeSelection.hasAllNodesOfType(ProjectNode.class);}  }
class C{  public static BufferedImage blur(BufferedImage sourceImage,int kernelSize){  int size=kernelSize * kernelSize;  float value=1f / size;  float[] matrix=new float[size];  for (int i=0; i < size; i++)   matrix[i]=value;  BufferedImage destImage=new BufferedImage(sourceImage.getWidth(),sourceImage.getHeight(),BufferedImage.TYPE_4BYTE_ABGR);  BufferedImageOp op=new ConvolveOp(new Kernel(kernelSize,kernelSize,matrix));  op.filter(sourceImage,destImage);  return destImage;}  }
class C{  public static int sum(int[] deck){  int sum=0;  for (int i=0; i < deck.length; i++) {    sum+=((i + 1) % 13) * deck[i];  }  return sum;}  }
class C{  public static double[] copyOfRange(double[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      double[] copy=new double[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private boolean verify(String value,int allowedMask,char[] allowedChars,int minLength,int maxLength){  if ((minLength != -1) && (value.length() < minLength)) {    return false;  }  if ((maxLength != -1) && (value.length() > maxLength)) {    return false;  }  int i=0;  while (i < value.length()) {    boolean found=false;    char ch=value.charAt(i);    if ((allowedMask & HEX) != 0) {      if (((ch >= '0') && (ch <= '9')) || ((ch >= 'A') && (ch <= 'F')) || ((ch >= 'a') && (ch <= 'f'))) {        found=true;      }    }    if ((allowedMask & DIGITS) != 0) {      if (((ch >= '0') && (ch <= '9'))) {        found=true;      } else       if ((i == 0) && ((ch == '-') || (ch == '+'))) {        found=true;      }    }    if ((!found) && ((allowedMask & ABC) != 0)) {      if (((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) {        found=true;      }    }    if ((!found) && (allowedChars != null)) {      int c=0;      while ((!found) && (c < allowedChars.length)) {        if (ch == allowedChars[c]) {          found=true;        } else {          c++;        }      }    }    if (!found) {      return false;    }    i++;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.166 -0500",hash_original_method="789B5085E0E3F0644FA7F1CD116FCAD9",hash_generated_method="9BEA173807ADFA497EA149EC2DE7C825") public static void register(){}  }
class C{  public AbstractXNetSerialConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD) public static byte[] copyOf(byte[] original,int newLength){  byte[] copy;  if (Utils.hasGingerbread()) {    copy=Arrays.copyOf(original,newLength);  } else {    copy=new byte[newLength];    System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  }  return copy;}  }
class C{  public int read() throws IOException {  while (in != null) {    int c=in.read();    if (c != -1) {      return c;    }    nextStream();  }  return -1;}  }
class C{  public static boolean createShipment(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int M_InOutLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,String Description,boolean IsSOTrx,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND M_InOutLine_ID=" + M_InOutLine_ID + " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"M_InOutLine_ID=?",M_InOutLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setM_InOutLine_ID(M_InOutLine_ID);    cd.setIsSOTrx(IsSOTrx);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  public ExactQuantifier createExactQuantifier(){  ExactQuantifierImpl exactQuantifier=new ExactQuantifierImpl();  return exactQuantifier;}  }
class C{  public static boolean isPowerOfTwo(int value){  return (value == powerOfTwoCeiling(value));}  }
class C{  private void processLess(VirtualFile file,Request request,Response response) throws Exception {  long lastModified=getLastModified(file);  if (lastModified < 0) {    sendOk(response,file);  } else {    String etag=getETag(file,lastModified);    if (request.isModified(etag,lastModified)) {      sendOk(response,file);    } else {      sendNotModified(response,etag,lastModified);    }  }}  }
class C{  private List<Element> children(){  return XmlUtils.toElementList(element.getChildNodes());}  }
class C{  int referenceKind(){  return LambdaToMethod.this.referenceKind(tree.sym);}  }
class C{  public FIXException(String message){  super(message);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case ExpressionsPackage.EXPRESSION:{      Expression expression=(Expression)theEObject;      T result=caseExpression(expression);      if (result == null)       result=defaultCase(theEObject);      return result;    }case ExpressionsPackage.LITERAL:{    Literal literal=(Literal)theEObject;    T result=caseLiteral(literal);    if (result == null)     result=defaultCase(theEObject);    return result;  }case ExpressionsPackage.BOOL_LITERAL:{  BoolLiteral boolLiteral=(BoolLiteral)theEObject;  T result=caseBoolLiteral(boolLiteral);  if (result == null)   result=caseLiteral(boolLiteral);  if (result == null)   result=defaultCase(theEObject);  return result;}case ExpressionsPackage.INT_LITERAL:{IntLiteral intLiteral=(IntLiteral)theEObject;T result=caseIntLiteral(intLiteral);if (result == null) result=caseLiteral(intLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.DOUBLE_LITERAL:{DoubleLiteral doubleLiteral=(DoubleLiteral)theEObject;T result=caseDoubleLiteral(doubleLiteral);if (result == null) result=caseLiteral(doubleLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.FLOAT_LITERAL:{FloatLiteral floatLiteral=(FloatLiteral)theEObject;T result=caseFloatLiteral(floatLiteral);if (result == null) result=caseLiteral(floatLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.HEX_LITERAL:{HexLiteral hexLiteral=(HexLiteral)theEObject;T result=caseHexLiteral(hexLiteral);if (result == null) result=caseLiteral(hexLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.STRING_LITERAL:{StringLiteral stringLiteral=(StringLiteral)theEObject;T result=caseStringLiteral(stringLiteral);if (result == null) result=caseLiteral(stringLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.NULL_LITERAL:{NullLiteral nullLiteral=(NullLiteral)theEObject;T result=caseNullLiteral(nullLiteral);if (result == null) result=caseLiteral(nullLiteral);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.ASSIGNMENT_EXPRESSION:{AssignmentExpression assignmentExpression=(AssignmentExpression)theEObject;T result=caseAssignmentExpression(assignmentExpression);if (result == null) result=caseExpression(assignmentExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.CONDITIONAL_EXPRESSION:{ConditionalExpression conditionalExpression=(ConditionalExpression)theEObject;T result=caseConditionalExpression(conditionalExpression);if (result == null) result=caseExpression(conditionalExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.LOGICAL_OR_EXPRESSION:{LogicalOrExpression logicalOrExpression=(LogicalOrExpression)theEObject;T result=caseLogicalOrExpression(logicalOrExpression);if (result == null) result=caseExpression(logicalOrExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.LOGICAL_AND_EXPRESSION:{LogicalAndExpression logicalAndExpression=(LogicalAndExpression)theEObject;T result=caseLogicalAndExpression(logicalAndExpression);if (result == null) result=caseExpression(logicalAndExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.LOGICAL_NOT_EXPRESSION:{LogicalNotExpression logicalNotExpression=(LogicalNotExpression)theEObject;T result=caseLogicalNotExpression(logicalNotExpression);if (result == null) result=caseExpression(logicalNotExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.BITWISE_XOR_EXPRESSION:{BitwiseXorExpression bitwiseXorExpression=(BitwiseXorExpression)theEObject;T result=caseBitwiseXorExpression(bitwiseXorExpression);if (result == null) result=caseExpression(bitwiseXorExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.BITWISE_OR_EXPRESSION:{BitwiseOrExpression bitwiseOrExpression=(BitwiseOrExpression)theEObject;T result=caseBitwiseOrExpression(bitwiseOrExpression);if (result == null) result=caseExpression(bitwiseOrExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.BITWISE_AND_EXPRESSION:{BitwiseAndExpression bitwiseAndExpression=(BitwiseAndExpression)theEObject;T result=caseBitwiseAndExpression(bitwiseAndExpression);if (result == null) result=caseExpression(bitwiseAndExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION:{LogicalRelationExpression logicalRelationExpression=(LogicalRelationExpression)theEObject;T result=caseLogicalRelationExpression(logicalRelationExpression);if (result == null) result=caseExpression(logicalRelationExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.SHIFT_EXPRESSION:{ShiftExpression shiftExpression=(ShiftExpression)theEObject;T result=caseShiftExpression(shiftExpression);if (result == null) result=caseExpression(shiftExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION:{NumericalAddSubtractExpression numericalAddSubtractExpression=(NumericalAddSubtractExpression)theEObject;T result=caseNumericalAddSubtractExpression(numericalAddSubtractExpression);if (result == null) result=caseExpression(numericalAddSubtractExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION:{NumericalMultiplyDivideExpression numericalMultiplyDivideExpression=(NumericalMultiplyDivideExpression)theEObject;T result=caseNumericalMultiplyDivideExpression(numericalMultiplyDivideExpression);if (result == null) result=caseExpression(numericalMultiplyDivideExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION:{NumericalUnaryExpression numericalUnaryExpression=(NumericalUnaryExpression)theEObject;T result=caseNumericalUnaryExpression(numericalUnaryExpression);if (result == null) result=caseExpression(numericalUnaryExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION:{PrimitiveValueExpression primitiveValueExpression=(PrimitiveValueExpression)theEObject;T result=casePrimitiveValueExpression(primitiveValueExpression);if (result == null) result=caseExpression(primitiveValueExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.FEATURE_CALL:{FeatureCall featureCall=(FeatureCall)theEObject;T result=caseFeatureCall(featureCall);if (result == null) result=caseExpression(featureCall);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION:{ElementReferenceExpression elementReferenceExpression=(ElementReferenceExpression)theEObject;T result=caseElementReferenceExpression(elementReferenceExpression);if (result == null) result=caseExpression(elementReferenceExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.PARENTHESIZED_EXPRESSION:{ParenthesizedExpression parenthesizedExpression=(ParenthesizedExpression)theEObject;T result=caseParenthesizedExpression(parenthesizedExpression);if (result == null) result=caseExpression(parenthesizedExpression);if (result == null) result=defaultCase(theEObject);return result;}case ExpressionsPackage.TYPE_CAST_EXPRESSION:{TypeCastExpression typeCastExpression=(TypeCastExpression)theEObject;T result=caseTypeCastExpression(typeCastExpression);if (result == null) result=caseExpression(typeCastExpression);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.907 -0500",hash_original_method="9FC931A03E07E67B33BB5A4FA8F46AC4",hash_generated_method="01C5EF5795B351A3BE1C30AD17B445BE") private void readKaraoke(){  int entryCount=mParcel.readInt();  for (int i=0; i < entryCount; i++) {    Karaoke kara=new Karaoke();    kara.startTimeMs=mParcel.readInt();    kara.endTimeMs=mParcel.readInt();    kara.startChar=mParcel.readInt();    kara.endChar=mParcel.readInt();    if (mKaraokeList == null) {      mKaraokeList=new ArrayList<Karaoke>();    }    mKaraokeList.add(kara);  }}  }
class C{  public int indent(){  return indent;}  }
class C{  private void readFromSourceInput(){  if (sourceInput.isDone()) {    close();  } else {    sourceInput.read(thisBuffer);  }}  }
class C{  @Override public IRCBinder onBind(Intent intent){  return binder;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.303 -0500",hash_original_method="BE8A77015DA0080195A899A1BFDA2B08",hash_generated_method="4DD51F69C4AFAD774B946588A2335384") public javax.sip.header.Header createHeader(String headerName,String headerValue) throws java.text.ParseException {  if (headerName == null)   throw new NullPointerException("header name is null");  String hdrText=new StringBuffer().append(headerName).append(":").append(headerValue).toString();  return createHeader(hdrText);}  }
class C{  static int check_parameters(SMat A,long dimensions,long iterations,double endl,double endr,boolean b){  int error_index;  error_index=0;  if (endl > endr)   error_index=2; else   if (dimensions > iterations)   error_index=3; else   if (A.cols <= 0 || A.rows <= 0)   error_index=4; else   if (iterations <= 0 || iterations > A.cols || iterations > A.rows)   error_index=5; else   if (dimensions <= 0 || dimensions > iterations)   error_index=6;  if (0 != error_index)   svd_error("svdLAS2 parameter error: %s\n",error_msg[error_index]);  return (error_index);}  }
class C{  @Override public Void visitLiteral(LiteralTree tree,AnnotatedTypeMirror type){  if (!type.isAnnotatedInHierarchy(REGEX)) {    String regex=null;    if (tree.getKind() == Tree.Kind.STRING_LITERAL) {      regex=(String)tree.getValue();    } else     if (tree.getKind() == Tree.Kind.CHAR_LITERAL) {      regex=Character.toString((Character)tree.getValue());    }    if (regex != null) {      if (isRegex(regex)) {        int groupCount=getGroupCount(regex);        type.addAnnotation(createRegexAnnotation(groupCount));      } else {        type.addAnnotation(createPartialRegexAnnotation(regex));      }    }  }  return super.visitLiteral(tree,type);}  }
class C{  public Clustering<MedoidModel> run(Database database,Relation<V> relation){  if (relation.size() <= 0) {    return new Clustering<>("k-Medoids Clustering","kmedoids-clustering");  }  DistanceQuery<V> distQ=null;  if (initializer instanceof PAMInitialMeans) {    distQ=database.getDistanceQuery(relation,getDistanceFunction(),DatabaseQuery.HINT_OPTIMIZED_ONLY);    if (distQ == null) {      LOG.verbose("Adding a distance matrix index to accelerate PAM.");      PrecomputedDistanceMatrix<V> idx=new PrecomputedDistanceMatrix<V>(relation,getDistanceFunction());      idx.initialize();      distQ=idx.getDistanceQuery(getDistanceFunction());    }  }  if (distQ == null) {    distQ=database.getDistanceQuery(relation,getDistanceFunction());  }  if (LOG.isStatistics()) {    LOG.statistics(new StringStatistic(KEY + ".initialization",initializer.toString()));  }  ArrayModifiableDBIDs medoids=DBIDUtil.newArray(initializer.chooseInitialMedoids(k,relation.getDBIDs(),distQ));  List<ModifiableDBIDs> clusters=new ArrayList<>();  for (int i=0; i < k; i++) {    clusters.add(DBIDUtil.newHashSet(relation.size() / k));  }  Mean[] mdists=Mean.newArray(k);  assignToNearestCluster(medoids,mdists,clusters,distQ);  IndefiniteProgress prog=LOG.isVerbose() ? new IndefiniteProgress("K-Medoids iteration",LOG) : null;  int iteration=0;  for (boolean changed=true; changed; iteration++) {    LOG.incrementProcessed(prog);    changed=false;    int i=0;    for (DBIDIter miter=medoids.iter(); miter.valid(); miter.advance(), i++) {      DBID best=null;      Mean bestm=mdists[i];      for (DBIDIter iter=clusters.get(i).iter(); iter.valid(); iter.advance()) {        if (DBIDUtil.equal(miter,iter)) {          continue;        }        Mean mdist=new Mean();        for (DBIDIter iter2=clusters.get(i).iter(); iter2.valid(); iter2.advance()) {          mdist.put(distQ.distance(iter,iter2));        }        if (mdist.getMean() < bestm.getMean()) {          best=DBIDUtil.deref(iter);          bestm=mdist;        }      }      if (best != null && !DBIDUtil.equal(miter,best)) {        changed=true;        medoids.set(i,best);        mdists[i]=bestm;      }    }    if (changed) {      assignToNearestCluster(medoids,mdists,clusters,distQ);    }  }  LOG.setCompleted(prog);  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(KEY + ".iterations",iteration));  }  Clustering<MedoidModel> result=new Clustering<>("k-Medoids Clustering","kmedoids-clustering");  for (DBIDArrayIter it=medoids.iter(); it.valid(); it.advance()) {    MedoidModel model=new MedoidModel(DBIDUtil.deref(it));    result.addToplevelCluster(new Cluster<>(clusters.get(it.getOffset()),model));  }  return result;}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public ImageMetadata(int w,int h,int exifOrientation,ImageFormat format){  this.w=w;  this.h=h;  this.format=format;  this.exifOrientation=exifOrientation;}  }
class C{  public boolean isIgnored(){  return ignored;}  }
class C{  public static Reader asReaderUTF8Lenient(InputStream in){  return new UnicodeReader(in,"utf-8");}  }
class C{  public int size(){  if (fileTable != null) {    int size=0;    try {synchronized (this) {        FastIterator<Object> iter=fileTable.keys();        while (iter.next() != null) {          size++;        }      }    } catch (    IOException e) {      Debug.logError(e,module);    }    return size;  } else {    return memoryTable.size();  }}  }
class C{  public void close() throws IOException {  LOG.trace("close()");  endAttachments();  mpEncoder.close();}  }
class C{  public static ConditionOperand NOT_EQUAL(){  return new ConditionOperand(NOT_EQUAL);}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void updateAttrs(String ref,JSONObject attr){  if (TextUtils.isEmpty(ref) || attr == null || attr.size() < 1) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  task.args.add(attr);  msg.what=WXDomHandler.MsgType.WX_DOM_UPDATE_ATTRS;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public boolean isPathSelected(TreePath path){  return (path != null) ? (uniquePaths.get(path) != null) : false;}  }
class C{  public static void info(final String message,final Object... objects){  NaviLogger.info(message,objects);}  }
class C{  protected void addTiersToPool(CIMObjectPath storagePoolpath,Iterator<CIMInstance> it,DbClient dbClient,Map<String,Object> keyMap) throws IOException {  Map<URI,StoragePool> poolsToMatchWithVpool=(Map<URI,StoragePool>)keyMap.get(Constants.MODIFIED_STORAGEPOOLS);  Map<String,String> tierUtilizationPercentageMap=new HashMap<String,String>();  CIMInstance tierInstance=null;  List<StorageTier> _tierList=new ArrayList<StorageTier>();  Set<String> tierUris=new HashSet<String>();  while (it.hasNext()) {    try {      tierInstance=it.next();      String tierUtilizationPercentage=tierInstance.getPropertyValue(Constants.PERCENTAGE).toString();      String driveTechnologyIdentifier=tierInstance.getPropertyValue(Constants.TECHNOLOGY).toString();      String driveTechnology=StorageTier.SupportedTiers.getTier(driveTechnologyIdentifier);      if (null == driveTechnology) {        _logger.info("Unsupported Drive Type :" + driveTechnologyIdentifier);      } else {        tierUtilizationPercentageMap.put(driveTechnology,tierUtilizationPercentage);      }      String tierNativeGuid=getTierNativeGuidFromTierInstance(tierInstance);      StorageTier tierObject=checkStorageTierExistsInDB(tierNativeGuid,dbClient);      if (null == tierObject) {        tierObject=createStorageTier(tierInstance,tierObject,tierNativeGuid,null,_tierList,null,driveTechnology);        dbClient.createObject(tierObject);      }      tierUris.add(tierObject.getId().toString());    } catch (    Exception e) {      _logger.error("Determing Drive Type, Tier Info failed for {} : ",tierInstance.getObjectPath(),e);    }  }  URI poolURI=getStoragePoolURI(storagePoolpath,dbClient);  StoragePool pool=dbClient.queryObject(StoragePool.class,poolURI);  if (null != pool) {    pool.addTierUtilizationPercentage(tierUtilizationPercentageMap);    if (!poolsToMatchWithVpool.containsKey(pool.getId()) && ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getTiers(),tierUris)) {      poolsToMatchWithVpool.put(pool.getId(),pool);    }    pool.addTiers(tierUris);    dbClient.persistObject(pool);  }}  }
class C{  public void clearSearch(){  getTable().setSearchString("");}  }
class C{  @SuppressWarnings("unchecked") public static <T>byte[] serial(T obj) throws UtilException {  byte[] result=null;  if (obj != null && !(obj instanceof Void)) {    if (obj instanceof Collection || obj instanceof Map) {      result=jdkSerial(obj);    } else {      Schema<T> schema=RuntimeSchema.getSchema((Class<T>)obj.getClass());      LinkedBuffer buffer=LinkedBuffer.allocate(INIT_SIZE);      try {        result=ProtostuffIOUtil.toByteArray(obj,schema,buffer);      } catch (      Exception e) {        throw new UtilException(ErrorCodeDef.SERIALIZE_ERROR,e);      }    }  }  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.TIME_EVENT_SPEC__TYPE:    return getType();case StextPackage.TIME_EVENT_SPEC__VALUE:  return getValue();case StextPackage.TIME_EVENT_SPEC__UNIT:return getUnit();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean addDominator(int objectId){  return this.dominator.add(objectId);}  }
class C{  public LineSegmentPair(ILineSegment il1,ILineSegment il2){  one=il1;  two=il2;}  }
class C{  public void stop(BundleContext context) throws Exception {  super.stop(context);  plugin=null;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public int searchULong(int startIndex,int startOffset,int endIndex,int endOffset,int length,int key){  int location=0;  int bottom=0;  int top=length;  while (top != bottom) {    location=(top + bottom) / 2;    int locationStart=this.readULongAsInt(startIndex + location * startOffset);    if (key < locationStart) {      top=location;    } else {      int locationEnd=this.readULongAsInt(endIndex + location * endOffset);      if (key <= locationEnd) {        return location;      }      bottom=location + 1;    }  }  return -1;}  }
class C{  public SurfaceEllipse(LatLon center,double majorRadius,double minorRadius,Angle heading){  this(center,majorRadius,minorRadius);  if (heading == null) {    String message=Logging.getMessage("nullValue.HeadingIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.heading=heading;}  }
class C{  public void joinChat(View view){  String username=mUsername.getText().toString();  if (!validUsername(username))   return;  SharedPreferences sp=getSharedPreferences(Constants.SHARED_PREFS,MODE_PRIVATE);  SharedPreferences.Editor edit=sp.edit();  edit.putString(Constants.USER_NAME,username);  edit.apply();  Intent intent=new Intent(this,MainActivity.class);  startActivity(intent);}  }
class C{  public static void test(int nrRequests,NetworkRequester networkRequester) throws IOException {  await().until(null);  for (int i=0; i < nrRequests; i++) {    System.out.printf("====: execution request\n");    networkRequester.request();  }}  }
class C{  public ObjectFactory(){}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public GPUImageFilterGroup(List<GPUImageFilter> filters){  mFilters=filters;  if (mFilters == null) {    mFilters=new ArrayList<GPUImageFilter>();  } else {    updateMergedFilters();  }  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  public void removeListIndent(){  Line line=this.lines;  while (line != null) {    if (!line.isEmpty) {switch (line.getLineType()) {case ULIST:        line.value=line.value.substring(line.leading + 2);      break;case OLIST:    line.value=line.value.substring(line.value.indexOf('.') + 2);  break;default :line.value=line.value.substring(Math.min(line.leading,4));break;}line.initLeading();}line=line.next;}}  }
class C{  public static Vector<?> create(Vector<String> markerNames,Properties properties,ProgressSupport progressSupport,boolean matchInOutVectorSize){  return getInstance()._create(markerNames,null,properties,progressSupport,matchInOutVectorSize);}  }
class C{  public synchronized void start(){  Log.d(TAG,"start");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  setState(STATE_LISTEN);  if (mAcceptThread == null) {    mAcceptThread=new AcceptThread();    mAcceptThread.start();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @RequestMapping(value="/activate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> activateAccount(@RequestParam(value="key") String key){  return Optional.ofNullable(userService.activateRegistration(key)).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public static byte[] align(byte[] src,int factor){  if (src.length % factor == 0) {    return src;  }  int padding=factor - src.length % factor;  return concat(src,RandomUtils.randomByteArray(padding));}  }
class C{  void createEdges(String[] v){  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[3],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED);}  }
class C{  public static Bitmap doBlur(Bitmap sentBitmap,int radius,boolean canReuseInBitmap){  Bitmap bitmap;  if (canReuseInBitmap) {    bitmap=sentBitmap;  } else {    bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  }  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  @Override public String toString(){  return out.toString();}  }
class C{  public void updateVolume(int currentVolume){  if (Math.abs(currentVolume - volume) > 20) {    volume=currentVolume;    slm.setValue(volume);  }}  }
class C{  public static WeekFragment newInstance(int position,String selectorDateIndicatorValue,int currentDateIndicatorValue,int primaryTextColor){  WeekFragment f=new WeekFragment();  Bundle b=new Bundle();  b.putInt(RWeekCalendar.POSITIONKEY,position);  b.putString(RWeekCalendar.DATE_SELECTOR_BACKGROUND,selectorDateIndicatorValue);  b.putInt(RWeekCalendar.CURRENT_DATE_BACKGROUND,currentDateIndicatorValue);  b.putInt(RWeekCalendar.PRIMARY_BACKGROUND,primaryTextColor);  f.setArguments(b);  return f;}  }
class C{  @Deprecated public URI(final char[] escaped) throws URIException, NullPointerException {  parseUriReference(new String(escaped),true);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.BUILT_IN_TYPE___GET_TYPE_VARS:    return getTypeVars();}return super.eInvoke(operationID,arguments);}  }
class C{  static public double betaComplemented(double a,double b,double x){  return Gamma.incompleteBeta(b,a,x);}  }
class C{  public synchronized void addPoint(Feature feature,HasCoordinates3d point){  points.put(feature,new Point3d(point.getX(),point.getY(),point.getZ()));  center=null;  maxDistance=null;}  }
class C{  private List<PrinterRec> scanPrinters(){  PrinterResult result=new MdnsServices().scan();  return result.getPrinters();}  }
class C{  public ShadowFilter(){}  }
class C{  public boolean execute(IGameState gameState){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  if (isValid(board)) {    oldMarker=board.get(col,row);    board.clear(col,row);    board.set(col,row,player.getMark());    return true;  }  return false;}  }
class C{  private void createNodes(){  PLayer layer=getLayer();  pixelMatrixNode=new PixelMatrixImageNode(model.getPixelMatrix());  layer.addChild(pixelMatrixNode);  sensorMatrixNode=new SensorMatrixNode(this,model.getSensorMatrix());  layer.addChild(sensorMatrixNode);}  }
class C{  private void doTreeTag(JCas jcas){  try {    if (ttProc == null) {      ttProc=new TreeTaggerProcess(ttprops.getTreeTaggingProcess());    }    Logger.printDetail(component,"TreeTagger (pos tagging) with: " + ttprops.parFileName);    AnnotationIndex ai=jcas.getAnnotationIndex(Token.type);    List<String> tokenStrings=new ArrayList<>();    List<Token> tokens=new ArrayList<>();    for (FSIterator fsi=ai.iterator(); fsi.hasNext(); ) {      Token token=(Token)fsi.next();      tokenStrings.add(token.getCoveredText());      tokens.add(token);    }    ttreader=new TreeTaggerReader(tokens,ttProc.getStdout(),jcas,annotate_sentences);    ttwriter=new TreeTaggerWriter(tokenStrings,ttProc.getStdin());    Thread rThread=new Thread(ttreader);    Thread wThread=new Thread(ttwriter);    rThread.start();    wThread.start();    rThread.join();    wThread.join();  } catch (  IOException|InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public boolean namespaceEquals(NodeId nodeId,ExpandedNodeId expandedNodeId){  int expandedNamespaceIndex=expandedNodeId.getNamespaceUri() != null ? getIndex(expandedNodeId.getNamespaceUri()) : expandedNodeId.getNamespaceIndex();  return nodeId.getNamespaceIndex() == expandedNamespaceIndex;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_concreteMethodDeclaration_1_();}  }
class C{  public void copyArea(int x,int y,int width,int height,int dx,int dy){  System.out.println("copyArea");}  }
class C{  public final int size(){  return current_item + 1;}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  public ProjectObject(boolean deleted){  this.deleted=deleted;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,long value){  buffer.append(value);}  }
class C{  public void addItem(Item item){synchronized (items) {    items.add(item);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sinh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected boolean allKeyFieldsPresent(Entity e,EnumSet<DeviceField> keyFields){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      break;case IPV4:    if (e.ipv4Address == null)     return false;  break;case SWITCH:if (e.switchDPID == null) return false;break;case PORT:if (e.switchPort == null) return false;break;case VLAN:break;default :throw new IllegalStateException();}}return true;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source,boolean useAnchor){  double anchorY=this.getRangeAxis().java2DToValue(source.getY(),state.getDataArea(),RectangleEdge.LEFT);  this.rangeAxis.resizeRange(factor,anchorY);}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public Java2DRenderer(String url,String baseurl,int width){  this(url,baseurl,width,NO_HEIGHT);}  }
class C{  private void touchEventsCancelled(){  final View mobileView=getViewForID(mMobileItemId);  if (mCellIsMobile) {    mAboveItemId=INVALID_ID;    mMobileItemId=INVALID_ID;    mBelowItemId=INVALID_ID;    mobileView.setVisibility(VISIBLE);    mHoverCell=null;    invalidate();  }  mCellIsMobile=false;  mIsMobileScrolling=false;  mActivePointerId=INVALID_POINTER_ID;}  }
class C{  public boolean modifyShadowImagePair(StorageSystem storageSystem,String sourceVolumeNativeId,String targetVolumeNativeId,HDSApiProtectionManager.ShadowImageOperationType operationType) throws Exception {  HDSApiClient apiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  HDSApiProtectionManager apiProtectionManager=apiClient.getHdsApiProtectionManager();  log.info("{} pair operation started",operationType.name());  Map<String,String> repliMap=apiProtectionManager.getReplicationRelatedObjectIds(sourceVolumeNativeId,targetVolumeNativeId);  log.info("Replication Obj Ids :{}",repliMap);  String replicationGroupObjId=repliMap.get(HDSConstants.REPLICATION_GROUP_OBJ_ID);  String replicationInfoObjId=repliMap.get(HDSConstants.REPLICATION_INFO_OBJ_ID);  ReplicationInfo replicationInfo=apiProtectionManager.modifyShadowImagePair(replicationGroupObjId,replicationInfoObjId,operationType,storageSystem.getModel());  log.info("{} pair operation completed",operationType.name());  return (replicationInfo != null);}  }
class C{  public final void testGetReductionPolynomial01(){  BigInteger rp=BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000);  assertTrue(new ECFieldF2m(2000,rp).getReductionPolynomial().equals(rp));}  }
class C{  private static void ensureExists(File file){  assert file.exists();}  }
class C{  public RegExp(int type){  this.type=type;}  }
class C{  public List<String> toNameValueBlock(){  Set<String> names=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (int i=0; i < namesAndValues.size(); i+=2) {    String name=namesAndValues.get(i).toLowerCase(Locale.US);    String value=namesAndValues.get(i + 1);    if (name.equals("connection") || name.equals("host") || name.equals("keep-alive")|| name.equals("proxy-connection")|| name.equals("transfer-encoding")) {      continue;    }    if (names.add(name)) {      result.add(name);      result.add(value);      continue;    }    for (int j=0; j < result.size(); j+=2) {      if (name.equals(result.get(j))) {        result.set(j + 1,result.get(j + 1) + "\0" + value);        break;      }    }  }  return result;}  }
class C{  public void removeAction(Object o){  actions.removeElement(o);}  }
class C{  public AccountId build(){  return new AccountId(this.address);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  GoogleBaseService service=(GoogleBaseService)request.getAttribute(AuthenticationFilter.SERVICE_ATTRIBUTE);  String id=request.getParameter(RecipeUtil.ID_PARAMETER);  try {    if (isDelete()) {      recipeDelete(service,id);      listOwnRecipes(response);    } else {      Recipe recipe=null;      if (isAdd()) {        recipe=new Recipe();      } else       if (isUpdate()) {        URL entryUrl=urlFactory.getItemsEntryURL(id);        GoogleBaseEntry entry=service.getEntry(entryUrl);        recipe=new Recipe(entry);      }      if (recipe != null) {        editRecipe(request,response,recipe,null);      }    }  } catch (  ServiceException e) {    RecipeUtil.logServiceException(this,e);    RecipeUtil.forwardToErrorPage(request,response,e);    return;  }}  }
class C{  public static void removeFromListSet(final String setName,final String listName){  final Set<String> listSet=getListSet(setName);  if (!listSet.isEmpty()) {    listSet.remove(listName);    switchboard.setConfig(setName,collection2string(listSet));  }}  }
class C{  public InputStream post(String raw_cookies,Map parameters) throws IOException {  setCookies(raw_cookies);  postCookies();  setParameters(parameters);  return doPost();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static List<InputMethodSubtype> sort(Context context,int flags,InputMethodInfo imi,List<InputMethodSubtype> subtypeList){  if (imi == null)   return subtypeList;  final HashSet<InputMethodSubtype> inputSubtypesSet=new HashSet<InputMethodSubtype>(subtypeList);  final ArrayList<InputMethodSubtype> sortedList=new ArrayList<InputMethodSubtype>();  int N=imi.getSubtypeCount();  for (int i=0; i < N; ++i) {    InputMethodSubtype subtype=imi.getSubtypeAt(i);    if (inputSubtypesSet.contains(subtype)) {      sortedList.add(subtype);      inputSubtypesSet.remove(subtype);    }  }  for (  InputMethodSubtype subtype : inputSubtypesSet) {    sortedList.add(subtype);  }  return sortedList;}  }
class C{  public List<User> findByName(String namePattern){  String upperPattern=namePattern.toUpperCase();  List<User> result=new ArrayList<>();  for (  User u : userService.findAll()) {    if (u.displayName.toUpperCase().contains(upperPattern)) {      result.add(u);    }  }  return result;}  }
class C{  public V2 addAction(int icon,CharSequence title,Action.OnActionListener listener,Bundle extra){  N.addAction(icon,title,listener,extra);  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case COUNT:  return isSetCount();}throw new IllegalStateException();}  }
class C{  @Deprecated public void clearUsernamePassword(){  throw new MustOverrideException();}  }
class C{  public NotificationChain basicSetReactSequence(Sequence newReactSequence,NotificationChain msgs){  Sequence oldReactSequence=reactSequence;  reactSequence=newReactSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE,oldReactSequence,newReactSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.EIP_MODEL;}  }
class C{  public GridNioException(String msg){  super(msg);}  }
class C{  @Deprecated public void shareNote(String guid,OnClientCallback<String> callback){  AsyncReflector.execute(mClient,callback,"shareNote",mAuthenticationToken,guid);}  }
class C{  public String validate(){  String retValue=null;  getLines(true);  if (m_lines.length == 0)   retValue="@NoLines@"; else   if (getPercentTotal().compareTo(Env.ONEHUNDRED) != 0)   retValue="@PercentTotal@ <> 100"; else {    int lineFound=-1;    for (int i=0; i < m_lines.length; i++) {      if (m_lines[i].getPercent().compareTo(Env.ZERO) == 0) {        if (lineFound >= 0 && m_lines[i].getPercent().compareTo(Env.ZERO) == 0) {          retValue="@Line@ " + lineFound + " + "+ m_lines[i].getLine()+ ": == 0";          break;        }        lineFound=m_lines[i].getLine();      }    }  }  setIsValid(retValue == null);  return retValue;}  }
class C{  public void testVirtualDestinationsWithWildcardWithoutIndividualVirtualQueue() throws Exception {  startAllBrokers();  sendReceive("local.test.1",true,"Consumer.a.local.test.>",false,1,1);  sendReceive("global.test.1",true,"Consumer.a.global.test.>",false,1,1);  destroyAllBrokers();}  }
class C{  private void removeIgnore(RPObject ignoreObj){  for (  String attr : ignoreObj) {    if (attr.charAt(0) == '_') {      ignore.remove(attr.substring(1));    }  }}  }
class C{  public void testQuoteUnQuoteIdentifierWithBackQuote() throws Exception {  String[] identifiers=new String[]{"abcxyz","abc`xyz","abc``xyz","abc```xyz","`abcxyz`","`abc`xyz`","`abc``xyz`","`abc```xyz`","``abcxyz``","``abc`xyz``","``abc``xyz``","``abc```xyz``","```abcxyz```","```abc`xyz```","```abc``xyz```","```abc```xyz```","`abcxyz","``abcxyz","```abcxyz","abcxyz`","abcxyz``","abcxyz```","``abcxyz`","``abc`xyz`","``abc``xyz`","``abc```xyz`","```abcxyz`","```abc`xyz`","```abc``xyz`","```abc```xyz`","`abcxyz``","`abc`xyz``","`abc``xyz``","`abc```xyz``","`abcxyz```","`abc`xyz```","`abc``xyz```","`abc```xyz```"};  String[] identifiersUnQuoted=new String[]{"abcxyz","abc`xyz","abc``xyz","abc```xyz","abcxyz","`abc`xyz`","abc`xyz","`abc```xyz`","``abcxyz``","``abc`xyz``","``abc``xyz``","``abc```xyz``","`abcxyz`","```abc`xyz```","`abc`xyz`","```abc```xyz```","`abcxyz","``abcxyz","```abcxyz","abcxyz`","abcxyz``","abcxyz```","``abcxyz`","``abc`xyz`","``abc``xyz`","``abc```xyz`","`abcxyz","```abc`xyz`","`abc`xyz","```abc```xyz`","`abcxyz``","`abc`xyz``","`abc``xyz``","`abc```xyz``","abcxyz`","`abc`xyz```","abc`xyz`","`abc```xyz```"};  String[] identifiersQuotedNonPedantic=new String[]{"`abcxyz`","`abc``xyz`","`abc````xyz`","`abc``````xyz`","`abcxyz`","```abc``xyz```","`abc``xyz`","```abc``````xyz```","`````abcxyz`````","`````abc``xyz`````","`````abc````xyz`````","`````abc``````xyz`````","```abcxyz```","```````abc``xyz```````","```abc``xyz```","```````abc``````xyz```````","```abcxyz`","`````abcxyz`","```````abcxyz`","`abcxyz```","`abcxyz`````","`abcxyz```````","`````abcxyz```","`````abc``xyz```","`````abc````xyz```","`````abc``````xyz```","```abcxyz`","```````abc``xyz```","```abc``xyz`","```````abc``````xyz```","```abcxyz`````","```abc``xyz`````","```abc````xyz`````","```abc``````xyz`````","`abcxyz```","```abc``xyz```````","`abc``xyz```","```abc``````xyz```````"};  String[] identifiersQuotedPedantic=new String[]{"`abcxyz`","`abc``xyz`","`abc````xyz`","`abc``````xyz`","```abcxyz```","```abc``xyz```","```abc````xyz```","```abc``````xyz```","`````abcxyz`````","`````abc``xyz`````","`````abc````xyz`````","`````abc``````xyz`````","```````abcxyz```````","```````abc``xyz```````","```````abc````xyz```````","```````abc``````xyz```````","```abcxyz`","`````abcxyz`","```````abcxyz`","`abcxyz```","`abcxyz`````","`abcxyz```````","`````abcxyz```","`````abc``xyz```","`````abc````xyz```","`````abc``````xyz```","```````abcxyz```","```````abc``xyz```","```````abc````xyz```","```````abc``````xyz```","```abcxyz`````","```abc``xyz`````","```abc````xyz`````","```abc``````xyz`````","```abcxyz```````","```abc``xyz```````","```abc````xyz```````","```abc``````xyz```````"};  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". non-pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiers[i],"`",false));    assertEquals(i + 1 + ". "+ identifiers[i]+ ". non-pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiers[i],false));  }  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". pedantic quoting",identifiersQuotedPedantic[i],StringUtils.quoteIdentifier(identifiers[i],"`",true));    assertEquals(i + 1 + ". "+ identifiers[i]+ ". pedantic quoting",identifiersQuotedPedantic[i],StringUtils.quoteIdentifier(identifiers[i],true));    assertEquals(i + 1 + ". "+ identifiersUnQuoted[i]+ ". pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiersUnQuoted[i],"`",true));    assertEquals(i + 1 + ". "+ identifiersUnQuoted[i]+ ". pedantic quoting",identifiersQuotedNonPedantic[i],StringUtils.quoteIdentifier(identifiersUnQuoted[i],true));  }  for (int i=0; i < identifiers.length; i++) {    assertEquals(i + 1 + ". "+ identifiers[i]+ ". unquoting",identifiersUnQuoted[i],StringUtils.unQuoteIdentifier(identifiers[i],"`"));    assertEquals(i + 1 + ". "+ identifiersQuotedNonPedantic[i]+ ". non-pedantic unquoting",identifiersUnQuoted[i],StringUtils.unQuoteIdentifier(identifiersQuotedNonPedantic[i],"`"));    assertEquals(i + 1 + ". "+ identifiersQuotedPedantic[i]+ ". pedantic unquoting",identifiers[i],StringUtils.unQuoteIdentifier(identifiersQuotedPedantic[i],"`"));  }}  }
class C{  protected void validateOoziePropertiesFileLocation(String ooziePropertiesFileLocationString){  if (StringUtils.isBlank(ooziePropertiesFileLocationString)) {    throw new IllegalArgumentException("Oozie properties file location must be specified.");  }}  }
class C{  protected void markUnManagedFSObjectsInActive(StorageSystem storageSystem,Set<URI> discoveredUnManagedFileSystems){  _logger.info(" -- Processing {} discovered Un-Managed FS Objects from -- {}",discoveredUnManagedFileSystems.size(),storageSystem.getLabel());  if (discoveredUnManagedFileSystems.isEmpty()) {    return;  }  URIQueryResultList allAvailableUnManagedFileSystemsInDB=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceUnManagedFileSystemConstraint(storageSystem.getId()),allAvailableUnManagedFileSystemsInDB);  List<UnManagedFileSystem> unManagedFileSystems=new ArrayList<UnManagedFileSystem>();  int totalObjs=0;  while (allAvailableUnManagedFileSystemsInDB.iterator().hasNext()) {    URI unManagedFileSystemUri=allAvailableUnManagedFileSystemsInDB.iterator().next();    if (!discoveredUnManagedFileSystems.contains(unManagedFileSystemUri)) {      UnManagedFileSystem uFS=_dbClient.queryObject(UnManagedFileSystem.class,unManagedFileSystemUri);      _logger.info("Found a stale un-managed active file system in DB {} - Marking this to In-Active",uFS.getNativeGuid());      uFS.setInactive(true);      unManagedFileSystems.add(uFS);      if (unManagedFileSystems.size() == 1000) {        totalObjs+=1000;        _partitionManager.updateInBatches(unManagedFileSystems,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_FILESYSTEM);        unManagedFileSystems.clear();      }    }  }  totalObjs+=unManagedFileSystems.size();  if (!unManagedFileSystems.isEmpty()) {    _partitionManager.updateInBatches(unManagedFileSystems,Constants.DEFAULT_PARTITION_SIZE,_dbClient,UNMANAGED_FILESYSTEM);  }  _logger.info("Total number of stale unmanaged file systems processed {}",totalObjs);}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  public boolean checkIsNagarPanchayat(){  String grade=(String)persistenceService.findAllBy("select grade from City").get(0);  return PropertyTaxConstants.GRADE_NAGAR_PANCHAYAT.equalsIgnoreCase(grade);}  }
class C{  @Override public SSLEngineResult unwrap(ByteBuffer src,ByteBuffer[] dsts,int offset,int length) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((src == null) || (dsts == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  if (src.remaining() < recordProtocol.getMinRecordSize()) {    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);  }  try {    src.mark();    int capacity=0;    for (int i=offset; i < offset + length; i++) {      if (dsts[i] == null) {        throw new IllegalStateException("Some of the input parameters are null");      }      if (dsts[i].isReadOnly()) {        throw new ReadOnlyBufferException();      }      capacity+=dsts[i].remaining();    }    if (capacity < recordProtocol.getDataSize(src.remaining())) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,getHandshakeStatus(),0,0);    }    recProtIS.setSourceBuffer(src);    int type=recordProtocol.unwrap();switch (type) {case ContentType.HANDSHAKE:case ContentType.CHANGE_CIPHER_SPEC:      if (handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.FINISHED)) {        session=recordProtocol.getSession();      }    break;case ContentType.APPLICATION_DATA:  break;case ContentType.ALERT:if (alertProtocol.isFatalAlert()) {  alertProtocol.setProcessed();  if (session != null) {    session.invalidate();  }  String description="Fatal alert received " + alertProtocol.getAlertDescription();  shutdown();  throw new SSLException(description);} else {  if (logger != null) {    logger.println("Warning allert has been received: " + alertProtocol.getAlertDescription());  }switch (alertProtocol.getDescriptionCode()) {case AlertProtocol.CLOSE_NOTIFY:    alertProtocol.setProcessed();  close_notify_was_received=true;if (!close_notify_was_sent) {  closeOutbound();  closeInbound();} else {  closeInbound();  shutdown();}break;case AlertProtocol.NO_RENEGOTIATION:alertProtocol.setProcessed();if (session == null) {throw new AlertException(AlertProtocol.HANDSHAKE_FAILURE,new SSLHandshakeException("Received no_renegotiation " + "during the initial handshake"));} else {handshakeProtocol.stop();}break;default :alertProtocol.setProcessed();}}break;}return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),recProtIS.consumed(),appData.placeTo(dsts,offset,length));} catch (BufferUnderflowException e) {src.reset();return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);}catch (AlertException e) {alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());engine_was_closed=true;src.reset();if (session != null) {session.invalidate();}throw e.getReason();}catch (SSLException e) {throw e;}catch (IOException e) {alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);engine_was_closed=true;throw new SSLException(e.getMessage());}}  }
class C{  public static void saveSettings(final INaviView view,final Graph2DView view2d,final ZyGraphViewSettings settings){  Preconditions.checkNotNull(view,"IE02132: View argument can not be null");  Preconditions.checkNotNull(view2d,"IE02133: View2D argument can not be null");  Preconditions.checkNotNull(settings,"IE02134: Settings argument can not be null");  final HashMap<String,String> settingsMap=new HashMap<String,String>();  settingsMap.put(CViewSettings.ANIMATION_SPEED,String.valueOf(settings.getDisplaySettings().getAnimationSpeed()));  settingsMap.put(CViewSettings.AUTOLAYOUT_THRESHOLD,String.valueOf(settings.getLayoutSettings().getAutolayoutDeactivationThreshold()));  settingsMap.put(CViewSettings.AUTOMATIC_LAYOUTING,String.valueOf(settings.getLayoutSettings().getAutomaticLayouting()));  settingsMap.put(CViewSettings.CIRCULAR_LAYOUT_STYLE,String.valueOf(settings.getLayoutSettings().getCircularSettings().getStyle().ordinal()));  settingsMap.put(CViewSettings.DISPLAY_MULTIPLE_EDGES_AS_ONE,String.valueOf(settings.getEdgeSettings().getDisplayMultipleEdgesAsOne()));  settingsMap.put(CViewSettings.FUNCTION_NODE_INFORMATION,String.valueOf(settings.getDisplaySettings().getFunctionNodeInformation()));  settingsMap.put(CViewSettings.GRADIENT_BACKGROUND,String.valueOf(settings.getDisplaySettings().getGradientBackground()));  settingsMap.put(CViewSettings.HIERARCHIC_LAYOUT_STYLE,String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getStyle().ordinal()));  settingsMap.put(CViewSettings.LAYOUT_ANIMATION,String.valueOf(settings.getLayoutSettings().getAnimateLayout()));  settingsMap.put(CViewSettings.LAYOUT_CALCULATION_TRESHOLD,String.valueOf(settings.getLayoutSettings().getLayoutCalculationTimeWarningThreshold()));  settingsMap.put(CViewSettings.MINIMUM_CIRCULAR_NODE_DISTANCE,String.valueOf(settings.getLayoutSettings().getCircularSettings().getMinimumNodeDistance()));  settingsMap.put(CViewSettings.MINIMUM_HIERARCHIC_EDGE_DISTANCE,String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumEdgeDistance()));  settingsMap.put(CViewSettings.MINIMUM_HIERARCHIC_LAYER_DISTANCE,String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumLayerDistance()));  settingsMap.put(CViewSettings.MINIMUM_HIERARCHIC_NODE_DISTANCE,String.valueOf(settings.getLayoutSettings().getHierarchicalSettings().getMinimumNodeDistance()));  settingsMap.put(CViewSettings.MINIMUM_ORTHOGONAL_NODE_DISTANCE,String.valueOf(settings.getLayoutSettings().getOrthogonalSettings().getMinimumNodeDistance()));  settingsMap.put(CViewSettings.MOUSEWHEEL_ACTION,String.valueOf(settings.getMouseSettings().getMouseWheelAction().ordinal()));  settingsMap.put(CViewSettings.ORTHOGONAL_LAYOUT_STYLE,String.valueOf(settings.getLayoutSettings().getOrthogonalSettings().getStyle().ordinal()));  settingsMap.put(CViewSettings.ORTHOGONAL_ORIENTATION,String.valueOf(settings.getLayoutSettings().getOrthogonalSettings().getOrientation().ordinal()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING,String.valueOf(settings.getProximitySettings().getProximityBrowsing()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING_THRESHOLD,String.valueOf(settings.getProximitySettings().getProximityBrowsingActivationThreshold()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING_CHILDREN,String.valueOf(settings.getProximitySettings().getProximityBrowsingChildren()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING_FROZEN,String.valueOf(settings.getProximitySettings().getProximityBrowsingFrozen()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING_PARENTS,String.valueOf(settings.getProximitySettings().getProximityBrowsingParents()));  settingsMap.put(CViewSettings.PROXIMITY_BROWSING_PREVIEW,String.valueOf(settings.getProximitySettings().getProximityBrowsingPreview()));  settingsMap.put(CViewSettings.SCROLL_SENSIBILITY,String.valueOf(settings.getMouseSettings().getScrollSensitivity()));  settingsMap.put(CViewSettings.SEARCH_CASE_SENSITIVE,String.valueOf(settings.getSearchSettings().getSearchCaseSensitive()));  settingsMap.put(CViewSettings.SEARCH_REGEX,String.valueOf(settings.getSearchSettings().getSearchRegEx()));  settingsMap.put(CViewSettings.SEARCH_SELECTED_ONLY,String.valueOf(settings.getSearchSettings().getSearchSelectedNodesOnly()));  settingsMap.put(CViewSettings.SEARCH_VISIBLE_ONLY,String.valueOf(settings.getSearchSettings().getSearchVisibleNodesOnly()));  settingsMap.put(CViewSettings.ZOOM_SENSIBILITY,String.valueOf(settings.getMouseSettings().getZoomSensitivity()));  settingsMap.put(CViewSettings.SIMPLIFIED_VARIABLE_ACCESS,String.valueOf(settings.getDisplaySettings().getSimplifiedVariableAccess()));  settingsMap.put("view_center_x",String.valueOf(view2d.getCenter().getX()));  settingsMap.put("view_center_y",String.valueOf(view2d.getCenter().getY()));  settingsMap.put("world_rect_x",String.valueOf(view2d.getWorldRect().x));  settingsMap.put("world_rect_y",String.valueOf(view2d.getWorldRect().y));  settingsMap.put("world_rect_width",String.valueOf(view2d.getWorldRect().width));  settingsMap.put("world_rect_height",String.valueOf(view2d.getWorldRect().height));  settingsMap.put("zoom",String.valueOf(view2d.getZoom()));  try {    view.saveSettings(settingsMap);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  public static Iterable<MatchResult> findMatches(Pattern pattern,CharSequence s){  List<MatchResult> results=new ArrayList<MatchResult>();  for (Matcher m=pattern.matcher(s); m.find(); )   results.add(m.toMatchResult());  return results;}  }
class C{  public void tagDefineBits(int id,byte[] imageData) throws IOException {  if (tags != null) {    tags.tagDefineBits(id,imageData);  }}  }
class C{  public boolean isMenuOrders(){  Object oo=get_Value(COLUMNNAME_IsMenuOrders);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BitmapAjaxCallback file(File imageFile){  this.imageFile=imageFile;  return this;}  }
class C{  public boolean isOfType(int type){  return type == this.type;}  }
class C{  private static boolean isNull(SmtExpr left,SmtExpr right,List<SmtExpr> others){  if (left == null || right == null) {    return true;  }  for (  SmtExpr smtExpr : others) {    if (smtExpr == null) {      return true;    }  }  return false;}  }
class C{  public boolean isEnableBluetooth(){  return mBluetoothAdapter.isEnabled();}  }
class C{  public final boolean votePhoto(final long photoId,final int vote) throws AbelanaClientException, AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    VoteRequest voteRequest=new VoteRequest();    voteRequest.photoId=photoId;switch (vote) {case -1:      voteRequest.vote=VoteRequest.THUMBS_DOWN;    break;case 1:  voteRequest.vote=VoteRequest.THUMBS_UP;break;case 0:default :voteRequest.vote=VoteRequest.NEUTRAL;break;}try {StatusResponse statusResponse=mBlockingStub.ratePhoto(voteRequest);if (statusResponse.error != null && statusResponse.error.code.equals("403")) {throw new AbelanaClientException(mContext.getString(R.string.abelana_auth_error_message));}return statusResponse.error == null;} catch (RuntimeException e) {Log.e("AbelanaClient",e.getMessage());throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));}} else {throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));}}  }
class C{  public void link(String url,String frameTitle){  Intent viewIntent=new Intent("android.intent.action.VIEW",Uri.parse(url));  startActivity(viewIntent);}  }
class C{  public PullParams withRegistry(String registry){  this.registry=registry;  return this;}  }
class C{  private void loadMenuSetting(String name){  menu.setItemState(name,client.settings.getBoolean(name));}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == DeprecatableElement.class) {switch (baseFeatureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:      return SGenPackage.FEATURE_TYPE__DEPRECATED;case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:    return SGenPackage.FEATURE_TYPE__COMMENT;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int j;  int n=length();  if (n == 0) {    return "{}";  }  Iterator keys=sortedKeys();  StringBuffer sb=new StringBuffer("{");  int newindent=indent + indentFactor;  Object o;  if (n == 1) {    o=keys.next();    sb.append(quote(o.toString()));    sb.append(": ");    sb.append(valueToString(this.map.get(o),indentFactor,indent));  } else {    while (keys.hasNext()) {      o=keys.next();      if (sb.length() > 1) {        sb.append(",\n");      } else {        sb.append('\n');      }      for (j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(quote(o.toString()));      sb.append(": ");      sb.append(valueToString(this.map.get(o),indentFactor,newindent));    }    if (sb.length() > 1) {      sb.append('\n');      for (j=0; j < indent; j+=1) {        sb.append(' ');      }    }  }  sb.append('}');  return sb.toString();}  }
class C{  public void removeAttribute(String name){  _attributes.remove(name.toLowerCase(Locale.ENGLISH));}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAME:    setName(NAME_EDEFAULT);  return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__VERSION:setVersion(VERSION_EDEFAULT);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__REFERENCES:getReferences().clear();return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DISPLAYNAME:setDisplayname(DISPLAYNAME_EDEFAULT);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__CATEGORY:setCategory(CATEGORY_EDEFAULT);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK:setFunctionblock((FunctionBlock)null);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENTITIES:getEntities().clear();return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENUMS:getEnums().clear();return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__SUPER_TYPE:setSuperType((FunctionblockModel)null);return;}super.eUnset(featureID);}  }
class C{  public void handleDOMNodeRemovedEvent(MutationEvent evt){}  }
class C{  public BaseCalendarEvent(long id,int color,String title,String description,String location,long dateStart,long dateEnd,int allDay,String duration){  this.mId=id;  this.mColor=color;  this.mAllDay=(allDay == 1);  this.mDuration=duration;  this.mTitle=title;  this.mDescription=description;  this.mLocation=location;  this.mStartTime=Calendar.getInstance();  this.mStartTime.setTimeInMillis(dateStart);  this.mEndTime=Calendar.getInstance();  this.mEndTime.setTimeInMillis(dateEnd);}  }
class C{  private void attachmentOfBridgeServer(){  if (cache.getCacheServers().size() < brigeNum) {    try {      attachBridgeServer();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public SVGRasterizer(URL url){  this.input=new TranscoderInput(url.toString());}  }
class C{  public StunCandidateHarvester(TransportAddress stunServer,String shortTermCredentialUsername){  this.stunServer=stunServer;  this.shortTermCredentialUsername=shortTermCredentialUsername;  if (System.getProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER) == null)   System.setProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,"400");  if (System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS) == null)   System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"3");}  }
class C{  public UnmodifiableSetException(){}  }
class C{  public boolean addName(String s,Character binding){  if (s == null) {    return false;  }  boolean changed=teamNames.add(s);  if (changed) {    changed|=setBinding(s,binding);  }  return changed;}  }
class C{  @Override @Suspendable public void start() throws Exception {}  }
class C{  public SqlConnectionSpecMySQL(){  this.tableType="InnoDB";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:31.336 -0500",hash_original_method="B52E22744B2B372E6DB0945A3673793A",hash_generated_method="B4A2164E39D126E607505733A191D881") public ZipFile(String name) throws IOException {  this(new File(name),OPEN_READ);}  }
class C{  public VnSyllParser(){  init();}  }
class C{  public void onPlayerStarted(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerStarted");  }}  }
class C{  protected GlobalInterlock(){  this.ipaddr=SystemConfiguration.getHostname();}  }
class C{  public void addNormal(ITurnOrdered marker){  if (this.numNormal == normal_turns.size()) {    throw new IllegalStateException("Have already added " + this.numNormal + " normal turns.");  }  normal_turns.addElement(marker);  total_turns.addElement(marker);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  protected Document createDocument(){  String encoding=getEncoding();  Document doc=documentFactory.createDocument(encoding);  doc.setEntityResolver(entityResolver);  if (inputSource != null) {    doc.setName(inputSource.getSystemId());  }  return doc;}  }
class C{  public LTRFSKDecoder(){  mCICDecimator=new RealPrimeCICDecimate(32,1,375,60,WindowType.HAMMING,2);  mHBFilter1=new FloatHalfBandFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter2=new FloatHalfBandFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter1.setListener(mHBFilter2);  mHBFilter3=new FloatHalfBandFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter2.setListener(mHBFilter3);  mHBFilter4=new FloatHalfBandFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter3.setListener(mHBFilter4);  mHBFilter5=new FloatHalfBandFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter4.setListener(mHBFilter5);  mHBFilter6=new FloatHalfBandNoDecimateFilter(Filters.FIR_HALF_BAND_31T_ONE_EIGHTH_FCO,1.1002f);  mHBFilter5.setListener(mHBFilter6);  mDCFilter=new IIRSinglePoleDCRemovalFilter(0.9946f);  mHBFilter6.setListener(mDCFilter);  mSquaringFilter=new SquaringFilter();  mDCFilter.setListener(mSquaringFilter);  mPulseShaper=new LTRPulseShapingFilter();  mSquaringFilter.setListener(mPulseShaper);  mSlicer=new Slicer(Output.NORMAL,5);  mPulseShaper.setListener(mSlicer);}  }
class C{  @Get @Put @Post @Delete public String noOp(String postdata){  setStatus(Status.SUCCESS_OK);  return "{\"status\":\"ok\"}";}  }
class C{  @Override protected void done(){  executionList.execute();}  }
class C{  @Override public boolean process(ContentEvent event){  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createStorageSystem(StorageSystemRequestParam param) throws Exception {  ArgValidator.checkFieldNotEmpty(param.getSystemType(),"system_type");  if (!StorageSystem.Type.isDriverManagedStorageSystem(param.getSystemType())) {    ArgValidator.checkFieldValueFromSystemType(param.getSystemType(),"system_type",Arrays.asList(StorageSystem.Type.vnxfile,StorageSystem.Type.isilon,StorageSystem.Type.rp,StorageSystem.Type.netapp,StorageSystem.Type.netappc,StorageSystem.Type.vnxe,StorageSystem.Type.xtremio,StorageSystem.Type.ecs,StorageSystem.Type.unity,StorageSystem.Type.hp3par));  }  StorageSystem.Type systemType=StorageSystem.Type.valueOf(param.getSystemType());  if (systemType.equals(StorageSystem.Type.vnxfile)) {    validateVNXFileSMISProviderMandatoryDetails(param);  }  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  checkForDuplicateName(param.getName(),StorageSystem.class);  ArgValidator.checkFieldValidIP(param.getIpAddress(),"ip_address");  ArgValidator.checkFieldNotNull(param.getPortNumber(),"port_number");  ArgValidator.checkFieldRange(param.getPortNumber(),1,65535,"port_number");  validateStorageSystemExists(param.getIpAddress(),param.getPortNumber());  StorageSystem system=prepareStorageSystem(param);  auditOp(OperationTypeEnum.CREATE_STORAGE_SYSTEM,true,null,param.getSerialNumber(),param.getSystemType(),param.getIpAddress(),param.getPortNumber());  startStorageSystem(system);  if (StorageSystem.Type.ecs.toString().equals(system.getSystemType())) {    ObjectController controller=getController(ObjectController.class,param.getSystemType());    ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);    String taskId=UUID.randomUUID().toString();    tasks.add(new AsyncTask(StorageSystem.class,system.getId(),taskId));    TaskList taskList=discoverStorageSystems(tasks,controller);    return taskList.getTaskList().listIterator().next();  } else {    FileController controller=getController(FileController.class,param.getSystemType());    ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);    String taskId=UUID.randomUUID().toString();    tasks.add(new AsyncTask(StorageSystem.class,system.getId(),taskId));    if (StorageSystem.Type.vnxfile.toString().equals(system.getSystemType()) || StorageSystem.Type.isilon.toString().equals(system.getSystemType())) {      controller.startMonitoring(new AsyncTask(StorageSystem.class,system.getId(),taskId),StorageSystem.Type.valueOf(system.getSystemType()));    }    TaskList taskList=discoverStorageSystems(tasks,controller);    return taskList.getTaskList().listIterator().next();  }}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    return iface.cast(this);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }}  }
class C{  void readSlot(int position,int[] buffer){{    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=(position & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    System.arraycopy(chunk,slotpos,buffer,0,slotsize);  }}  }
class C{  public VcfSampleNameRelabeller(final Map<String,String> sampleNameMap){  mSampleNameMap=sampleNameMap;}  }
class C{  protected boolean isBetter(Chromosome chromosome1,Chromosome chromosome2){  if (maximize) {    return chromosome1.compareTo(chromosome2) > 0;  } else {    return chromosome1.compareTo(chromosome2) < 0;  }}  }
class C{  public boolean findRecord(Record r){  for (int i=Section.ANSWER; i <= Section.ADDITIONAL; i++)   if (sections[i] != null && sections[i].contains(r))   return true;  return false;}  }
class C{  public void testMergeInRightWithNodeMergeStrategy() throws Exception {  WebXml srcWebXml=getWebXml("other","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value $right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value2",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VERSIONS:return isSetVersions();}throw new IllegalStateException();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EntityQuery filterByDate(Timestamp moment){  if (moment != null) {    this.filterByDate=true;    this.filterByDateMoment=moment;    this.filterByFieldNames=null;  } else {    this.filterByDate=false;    this.filterByDateMoment=null;    this.filterByFieldNames=null;  }  return this;}  }
class C{  public static void main(String[] args){  SillyPedsWithUI simple=new SillyPedsWithUI(new SillyPeds(System.currentTimeMillis()));  Console c=new Console(simple);  c.setVisible(true);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    Provider provider=history.getExplicitProvider();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    X509Certificate[] certs=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    KeyPairType keyPairType=KeyPairUtil.getKeyPairType(privateKey);    DSignJar dSignJar=new DSignJar(frame,privateKey,keyPairType,alias,provider);    dSignJar.setLocationRelativeTo(frame);    dSignJar.setVisible(true);    SignatureType signatureType=dSignJar.getSignatureType();    String signatureName=dSignJar.getSignatureName();    File inputJarFile=dSignJar.getInputJar();    File outputJarFile=dSignJar.getOutputJar();    String tsaUrl=dSignJar.getTimestampingServerUrl();    if (signatureType == null) {      return;    }    String signer=KSE.getFullApplicationName();    DigestType digestType=dSignJar.getDigestType();    if (inputJarFile.equals(outputJarFile)) {      JarSigner.sign(inputJarFile,privateKey,certs,signatureType,signatureName,signer,digestType,tsaUrl,provider);    } else {      JarSigner.sign(inputJarFile,outputJarFile,privateKey,certs,signatureType,signatureName,signer,digestType,tsaUrl,provider);    }    JOptionPane.showMessageDialog(frame,res.getString("SignJarAction.SignJarSuccessful.message"),res.getString("SignJarAction.SignJar.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void handleCreateView(ReactShadowNode node,int rootViewTag,@Nullable CatalystStylesDiffMap initialProps){  if (!ENABLED) {    int tag=node.getReactTag();    mUIViewOperationQueue.enqueueCreateView(rootViewTag,tag,node.getViewClass(),initialProps);    return;  }  boolean isLayoutOnly=node.getViewClass().equals(ViewProps.VIEW_CLASS_NAME) && isLayoutOnlyAndCollapsable(initialProps);  node.setIsLayoutOnly(isLayoutOnly);  if (!isLayoutOnly) {    mUIViewOperationQueue.enqueueCreateView(rootViewTag,node.getReactTag(),node.getViewClass(),initialProps);  }}  }
class C{  @Override protected Command createChangeConstraintCommand(EditPart child,Object constraint){  if (!(child instanceof NodePart))   return null;  if (!(constraint instanceof Rectangle))   return null;  NodePart nodePart=(NodePart)child;  Figure figure=(Figure)nodePart.getFigure();  Rectangle oldBounds=figure.getBounds();  Rectangle newBounds=(Rectangle)constraint;  if (nodePart instanceof EntityPart) {    if (oldBounds.width != newBounds.width && newBounds.width != -1)     return null;    if (oldBounds.height != newBounds.height && newBounds.height != -1)     return null;  }  return new NodeMoveCommand(nodePart,oldBounds.getCopy(),newBounds.getCopy());}  }
class C{  public CDataNodeComponent(final INaviModule module,final IViewContainer originContainer){  super(new BorderLayout());  Preconditions.checkNotNull(module,"IE01960: Module argument can not be null");  final JideSplitPane splitPane=new JideSplitPane(JideSplitPane.VERTICAL_SPLIT);  splitPane.setDoubleBuffered(true);  splitPane.setOneTouchExpandable(true);  splitPane.setMinimumSize(new Dimension(0,0));  splitPane.setProportionalLayout(true);  splitPane.setInitiallyEven(true);  final JPanel panel=new JPanel(new BorderLayout());  dataSectionComponent=new DataSectionComponent(module,originContainer);  panel.add(dataSectionComponent);  final JTabbedPane pane=new JTabbedPane();  pane.addTab("Navigation",new CNavigationPanel(dataSectionComponent.getHexView()));  splitPane.addPane(panel);  splitPane.addPane(pane);  add(splitPane);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(MAC_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public ActionFactory(DiagnosticTool frame,Controller controller){  super();  this.frame=frame;  this.controller=controller;  initialize();  controller.addControllerListener(this);}  }
class C{  protected void generatePseudoKingCastlingMoves(long fromBB,PriorityMoveList moves){  if (colorToMove == WHITE && (getCastling(colorToMove) & CASTLE_SHORT) != 0 && fromBB == E1 && getPiece(SQUARE_G1) == EMPTY && GameUtils.isWhitePiece(this,SQUARE_H1) && getPiece(SQUARE_H1) == ROOK && getPiece(SQUARE_F1) == EMPTY && !isInCheck(WHITE,E1) && !isInCheck(WHITE,F1)) {    moves.appendLowPriority(new Move(SQUARE_E1,SQUARE_G1,KING,colorToMove,EMPTY,Move.SHORT_CASTLING_CHARACTERISTIC));  }  if (colorToMove == WHITE && (getCastling(colorToMove) & CASTLE_LONG) != 0 && fromBB == E1 && GameUtils.isWhitePiece(this,SQUARE_A1) && getPiece(SQUARE_A1) == ROOK && getPiece(SQUARE_D1) == EMPTY && getPiece(SQUARE_C1) == EMPTY && getPiece(SQUARE_B1) == EMPTY && !isInCheck(WHITE,E1) && !isInCheck(WHITE,D1)) {    moves.appendLowPriority(new Move(SQUARE_E1,SQUARE_C1,KING,colorToMove,EMPTY,Move.LONG_CASTLING_CHARACTERISTIC));  }  if (colorToMove == BLACK && (getCastling(colorToMove) & CASTLE_SHORT) != 0 && fromBB == E8 && !GameUtils.isWhitePiece(this,SQUARE_H8) && getPiece(SQUARE_H8) == ROOK && getPiece(SQUARE_G8) == EMPTY && getPiece(SQUARE_F8) == EMPTY && !isInCheck(BLACK,E8) && !isInCheck(BLACK,F8)) {    moves.appendLowPriority(new Move(SQUARE_E8,SQUARE_G8,KING,colorToMove,EMPTY,Move.SHORT_CASTLING_CHARACTERISTIC));  }  if (colorToMove == BLACK && (getCastling(colorToMove) & CASTLE_LONG) != 0 && !GameUtils.isWhitePiece(this,SQUARE_A8) && getPiece(SQUARE_A8) == ROOK && fromBB == E8 && getPiece(SQUARE_D8) == EMPTY && getPiece(SQUARE_C8) == EMPTY && getPiece(SQUARE_B8) == EMPTY && !isInCheck(BLACK,E8) && !isInCheck(BLACK,D8)) {    moves.appendLowPriority(new Move(SQUARE_E8,SQUARE_C8,KING,colorToMove,EMPTY,Move.LONG_CASTLING_CHARACTERISTIC));  }}  }
class C{  public void successHandling(String result,boolean displayToast){  if (result.equalsIgnoreCase(DomoticzValues.Result.ERROR))   Toast.makeText(getActivity(),R.string.action_failed,Toast.LENGTH_SHORT).show(); else   if (result.equalsIgnoreCase(DomoticzValues.Result.OK)) {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_success,Toast.LENGTH_SHORT).show();  } else {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_unknown,Toast.LENGTH_SHORT).show();  }  if (debug)   addDebugText("- Result: " + result);}  }
class C{  public static void copyFiles(Directory source,Directory target,List<String> files) throws IOException {  if (!source.equals(target)) {    for (    String file : files) {      target.copyFrom(source,file,file,IOContext.READONCE);    }  }}  }
class C{  protected AbstractDoubleSpliterator(long est,int additionalCharacteristics){  this.est=est;  this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics;}  }
class C{  public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public static void main(String[] arg){  try {    MD5OutputStream out=new MD5OutputStream(new NullOutputStream());    InputStream in=new BufferedInputStream(new FileInputStream(arg[0]));    byte[] buf=new byte[65536];    int num_read;    long total_read=0;    while ((num_read=in.read(buf)) != -1) {      total_read+=num_read;      out.write(buf,0,num_read);    }    System.out.println(MD5.asHex(out.hash()) + "  " + arg[0]);    in.close();    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void MixColumn(){  long r0, r1, r2, r3;  r0=r1=r2=r3=0;  for (int j=0; j < BC; j+=8) {    int a0=(int)((A0 >> j) & 0xff);    int a1=(int)((A1 >> j) & 0xff);    int a2=(int)((A2 >> j) & 0xff);    int a3=(int)((A3 >> j) & 0xff);    r0|=(long)((mul0x2(a0) ^ mul0x3(a1) ^ a2^ a3) & 0xff) << j;    r1|=(long)((mul0x2(a1) ^ mul0x3(a2) ^ a3^ a0) & 0xff) << j;    r2|=(long)((mul0x2(a2) ^ mul0x3(a3) ^ a0^ a1) & 0xff) << j;    r3|=(long)((mul0x2(a3) ^ mul0x3(a0) ^ a1^ a2) & 0xff) << j;  }  A0=r0;  A1=r1;  A2=r2;  A3=r3;}  }
class C{  private void cancelLeaveTimer(){  if (leaveTimeout != null) {    LOGGER.debug("{} - Cancelling leave timeout",member().address());    leaveTimeout.cancel();    leaveTimeout=null;  }}  }
class C{  public Twitter(){  tweetList=new ArrayList<Integer>();  userList=new ArrayList<Integer>();  followMap=new HashMap<Integer,Map<Integer,Integer>>();}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void testNoFieldSkew() throws Exception {  Directory dir=newDirectory();  IndexWriterConfig iwConfig=newIndexWriterConfig().setMergePolicy(newLogMergePolicy());  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwConfig);  Document doc=new Document();  doc.add(newTextField("foo","bar baz somethingelse",Field.Store.NO));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  IndexSearcher is=newSearcher(ir);  BooleanQuery.Builder queryBuilder=new BooleanQuery.Builder();  queryBuilder.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);  queryBuilder.add(new TermQuery(new Term("foo","baz")),BooleanClause.Occur.SHOULD);  Query query=queryBuilder.build();  List<Explanation> scores=new ArrayList<>();  for (  Similarity sim : sims) {    is.setSimilarity(sim);    scores.add(is.explain(query,0));  }  ir.close();  int numExtraDocs=TestUtil.nextInt(random(),1,1000);  for (int i=0; i < numExtraDocs; i++) {    iw.addDocument(new Document());  }  ir=iw.getReader();  is=newSearcher(ir);  for (int i=0; i < sims.size(); i++) {    is.setSimilarity(sims.get(i));    Explanation expected=scores.get(i);    Explanation actual=is.explain(query,0);    assertEquals(sims.get(i).toString() + ": actual=" + actual+ ",expected="+ expected,expected.getValue(),actual.getValue(),0F);  }  iw.close();  ir.close();  dir.close();}  }
class C{  static String parse(String in){  String out=in;  int hexStart=out.indexOf("0x");  if (hexStart != -1 && out.indexOf("ETHER") != -1) {    int hexEnd=out.indexOf(' ',hexStart);    if (hexEnd > hexStart + 2) {      out=out.substring(hexStart,hexEnd);    }  } else {    int octets=0;    int lastIndex, old, end;    if (out.indexOf('-') > -1) {      out=out.replace('-',':');    }    lastIndex=out.lastIndexOf(':');    if (lastIndex > out.length() - 2) {      out=null;    } else {      end=Math.min(out.length(),lastIndex + 3);      ++octets;      old=lastIndex;      while (octets != 5 && lastIndex != -1 && lastIndex > 1) {        lastIndex=out.lastIndexOf(':',--lastIndex);        if (old - lastIndex == 3 || old - lastIndex == 2) {          ++octets;          old=lastIndex;        }      }      if (octets == 5 && lastIndex > 1) {        out=out.substring(lastIndex - 2,end).trim();      } else {        out=null;      }    }  }  if (out != null && out.startsWith("0x")) {    out=out.substring(2);  }  return out;}  }
class C{  public static Object create(String factoryKey,Object configSource){  if (factoryKey == null) {    String message=Logging.getMessage("generic.FactoryKeyIsNull");    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(configSource)) {    String message=Logging.getMessage("generic.ConfigurationSourceIsInvalid",configSource);    throw new IllegalArgumentException(message);  }  Factory factory=(Factory)WorldWind.createConfigurationComponent(factoryKey);  return factory.createFromConfigSource(configSource,null);}  }
class C{  @BeforeClass protected void init(){  this.githubUrl=this.githubUrlParser.parse("https://github.com/eclipse/che");  assertNotNull(this.githubUrl);}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  final public SyntaxTreeNode OldSubstitution() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[3];  SyntaxTreeNode tn=null;  Token t;  anchor=null;  String n;  bpa("Substitution");switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IDENTIFIER:    tn=Identifier();  zn[0]=tn;break;case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=NonExpPrefixOp();zn[0]=tn;break;case op_1:case AND:case op_3:case op_4:case OR:case op_6:case op_7:case op_8:case op_9:case op_10:case op_11:case op_12:case op_13:case op_14:case op_15:case op_16:case op_17:case op_18:case op_19:case IN:case op_21:case op_22:case op_23:case op_24:case op_25:case op_27:case op_30:case op_31:case op_32:case op_33:case op_34:case op_35:case op_36:case op_37:case op_38:case op_39:case op_40:case op_41:case op_42:case op_43:case op_44:case op_45:case op_46:case op_47:case op_48:case op_49:case op_50:case op_51:case op_52:case op_53:case op_54:case op_55:case op_56:case op_59:case op_62:case op_63:case op_64:case EQUALS:case op_66:case op_67:case op_71:case op_72:case op_73:case op_74:case op_75:case op_77:case op_78:case op_79:case op_80:case op_81:case op_82:case op_83:case op_84:case op_85:case op_86:case op_87:case op_88:case op_89:case op_90:case op_91:case op_92:case op_93:case op_94:case op_95:case op_96:case op_97:case op_98:case op_100:case op_101:case op_102:case op_103:case op_104:case op_105:case op_106:case op_107:case op_108:case op_109:case op_110:case op_111:case op_117:case op_118:case op_119:tn=InfixOp();zn[0]=tn;break;case op_57:case op_68:case op_69:case op_70:tn=PostfixOp();zn[0]=tn;break;default :jj_la1[36]=jj_gen;jj_consume_token(-1);throw new ParseException();}expecting="<-";t=jj_consume_token(SUBSTITUTE);n=tn.getImage();zn[1]=new SyntaxTreeNode(mn,t);expecting="Expression or Op. Symbol";try {if (jj_2_13(2147483647)) {t=jj_consume_token(op_76);SyntaxTreeNode zzn[]=new SyntaxTreeNode[2];zzn[0]=new SyntaxTreeNode(mn,N_IdPrefix,new SyntaxTreeNode[0]);zzn[1]=new SyntaxTreeNode(mn,N_NonExpPrefixOp,t);tn=new SyntaxTreeNode(mn,N_GenNonExpPrefixOp,zzn);} else if (jj_2_14(1)) {tn=Expression();} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LAMBDA:tn=Lambda();break;default :jj_la1[37]=jj_gen;jj_consume_token(-1);throw new ParseException();}}} catch (ParseException e) {if (OperatorStack.isWellReduced()) OperatorStack.popStack(); else {if (true) throw e;}if ((anchor != null) && (anchor.isKind(N_GenPrefixOp) || anchor.isKind(N_GenInfixOp) || anchor.isKind(N_GenPostfixOp)|| anchor.isKind(N_GenNonExpPrefixOp))) {tn=anchor;anchor=null;} else {if (true) throw e;}}epa();zn[2]=tn;{if (true) return new SyntaxTreeNode(mn,N_Substitution,zn);}throw new Error("Missing return statement in function");}  }
class C{  public RelativeError(double relativeError){  super();  this.relativeError=relativeError;}  }
class C{  @Override protected void init_actions(){  action_obj=new CUP$Parser$actions(this);}  }
class C{  public RefactoringDescriptorChange(final String name){  super(name);}  }
class C{  boolean stem(char[] term,int len){  result=null;  k=len - 1;  if ((k <= 1) || (k >= MaxWordLen - 1)) {    return false;  }  DictEntry entry=dict_ht.get(term,0,len);  if (entry != null) {    if (entry.root != null) {      result=entry.root;      return true;    }    return false;  }  word.reset();  word.reserve(len + 10);  for (int i=0; i < len; i++) {    char ch=term[i];    if (!isAlpha(ch))     return false;    word.unsafeWrite(ch);  }  matchedEntry=null;  while (true) {    plural();    if (matched())     break;    pastTense();    if (matched())     break;    aspect();    if (matched())     break;    ityEndings();    if (matched())     break;    nessEndings();    if (matched())     break;    ionEndings();    if (matched())     break;    erAndOrEndings();    if (matched())     break;    lyEndings();    if (matched())     break;    alEndings();    if (matched())     break;    entry=wordInDict();    iveEndings();    if (matched())     break;    izeEndings();    if (matched())     break;    mentEndings();    if (matched())     break;    bleEndings();    if (matched())     break;    ismEndings();    if (matched())     break;    icEndings();    if (matched())     break;    ncyEndings();    if (matched())     break;    nceEndings();    matched();    break;  }  entry=matchedEntry;  if (entry != null) {    result=entry.root;  }  return true;}  }
class C{  public void move(float factor){  if (!stationary) {    moveRandomly(factor);  }}  }
class C{  public void remove(){}  }
class C{  protected void addLibraryPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureType_library_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureType_library_feature","_UI_FeatureType_type"),SGenPackage.Literals.FEATURE_TYPE__LIBRARY,false,false,false,null,null,null));}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public ObjectFactory(){}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> processWhenFullAndEvict(final int size){  return null;}  }
class C{  boolean alwaysOnTop(){  if (SwingUtilities.getAncestorOfClass(JInternalFrame.class,this) != null) {    return false;  }  return true;}  }
class C{  @Override public boolean supportsTableCorrelationNames(){  debugCodeCall("supportsTableCorrelationNames");  return true;}  }
class C{  public LineOfContact(String sidc){  super(sidc);  this.path2=this.createPath();}  }
class C{  public BoundedNursery(){  super(Options.set,"Bounded Nursery","Bound the maximum size of the nursery to this value",Plan.DEFAULT_MAX_NURSERY);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.OFFSET_DATE_TIME_TYPE,this);}  }
class C{  public synchronized void close(){  if (mode != null) {    if (mode == AccessMode.read) {      if (dataInput != null) {        dataInput.close();        dataInput=null;      }    } else     if (mode == AccessMode.write) {      if (dataOutput != null) {        if (logFlushTask != null)         logFlushTask.removeLogFile(this);        dataOutput.close();        dataOutput=null;      }    }    mode=null;  }}  }
class C{  public RegionState(S id,Collection<Region<S,E>> regions,PseudoState<S,E> pseudoState){  super(id,null,null,null,pseudoState,regions);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Month)) {    return false;  }  Month that=(Month)obj;  if (this.month != that.month) {    return false;  }  if (this.year != that.year) {    return false;  }  return true;}  }
class C{  public OMRangeRings(double latPoint,double lonPoint,double radius,Length units){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,units,-1);}  }
class C{  public int countTokens(String delims){  setDelims(delims,null);  return countTokens();}  }
class C{  public int documentID(int position){  return results.get(position).getIndexNumber();}  }
class C{  public InternalSiteServiceClient(String server){  setServer(server);}  }
class C{  public boolean isReuseAddress(){  try {    return channel.socket().getReuseAddress();  } catch (  SocketException e) {    throw new RuntimeIoException(e);  }}  }
class C{  public void testZeroPos(){  String numA="0";  String numB="27384627835298756289327365";  String res="27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String toString(){  return new StringBuilder().append(getKey()).append('=').append(getValue()).toString();}  }
class C{  public static WritableNativeArray makeNativeArray(List objects){  WritableNativeArray nativeArray=new WritableNativeArray();  if (objects == null) {    return nativeArray;  }  for (  Object elem : objects) {    elem=makeNativeObject(elem);    if (elem == null) {      nativeArray.pushNull();    } else     if (elem instanceof Boolean) {      nativeArray.pushBoolean((Boolean)elem);    } else     if (elem instanceof Integer) {      nativeArray.pushInt((Integer)elem);    } else     if (elem instanceof Double) {      nativeArray.pushDouble((Double)elem);    } else     if (elem instanceof String) {      nativeArray.pushString((String)elem);    } else     if (elem instanceof WritableNativeArray) {      nativeArray.pushArray((WritableNativeArray)elem);    } else     if (elem instanceof WritableNativeMap) {      nativeArray.pushMap((WritableNativeMap)elem);    } else {      throw new IllegalArgumentException("Could not convert " + elem.getClass());    }  }  return nativeArray;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @NoInline private static void throwNewIllegalAccessException() throws IllegalAccessException {  throw new IllegalAccessException();}  }
class C{  public void sendMessageDeliveryStatusImmediately(String chatId,ContactId remote,String msgId,ImdnDocument.DeliveryStatus status,final String remoteInstanceId,long timestamp) throws PayloadException, NetworkException {  final DeliveryStatus delivery=new DeliveryStatus(chatId,remote,msgId,status,timestamp);  sendSipMessageDeliveryStatus(delivery,remoteInstanceId);}  }
class C{  void checkAddSubacription(VOUserDetails user){  if (user == null) {    return;  }  final String subscriptionAddPage="/marketplace/subscriptions/creation/add.jsf";  if (requestedRedirect.contains(subscriptionAddPage)) {    List<Long> invisibleProductKeys=new ArrayList<Long>();    try {      invisibleProductKeys=getUserGroupService().getInvisibleProductKeysForUser(user.getKey());    } catch (    ObjectNotFoundException e) {    }    long selectedServiceKey=sessionBean.getSelectedServiceKeyForCustomer();    if (!user.hasAdminRole() && invisibleProductKeys.contains(Long.valueOf(selectedServiceKey))) {      requestedRedirect=requestedRedirect.replaceAll(subscriptionAddPage,BaseBean.MARKETPLACE_ACCESS_DENY_PAGE);    }  }}  }
class C{  public int crcShadow(){  return uint16FromData(2);}  }
class C{  public void reload(){  reloadChildren();  if (mSkybox != null)   mSkybox.reload();  reloadPlugins();  mReloadPickerInfo=true;}  }
class C{  public HeaderCard(String key,double value,String comment) throws HeaderCardException {  this(key,dblString(value,spaceAvailableForValue(key)),comment,false,false);}  }
class C{  @SuppressWarnings({"rawtypes"}) public void register(String name,Class guiClass){  if (guiMap.containsKey(name)) {    logger.warn("Overwriting Existing Gui mapping: %s with `%s`",name,guiClass);  }  guiMap.put(name,guiClass);}  }
class C{  public final void clearHitBoxes(){  hitBoxes.clear();}  }
class C{  private void purgeOrphan(DBObject table,boolean isProcessCustomizedTarget){  if (isProcessCustomizedTarget && table.getCustomizationLevel() == s_parameters.CUSTOMNONE)   return;  DBConnection connection=null;  if (isProcessCustomizedTarget) {    connection=m_target;  } else {    connection=m_source;  }  String localTableName=table.getName();  if (m_trackingList.contains(localTableName.toUpperCase()))   return;  m_trackingList.add(localTableName.toUpperCase());  ArrayList<String> localColumnNames=new ArrayList<String>();  ArrayList<String> foreignKeyNames=new ArrayList<String>();  ArrayList<String> foreignTableNames=new ArrayList<String>();  ArrayList<String> foreignColumnNames=new ArrayList<String>();  if (connection.getForeignKeys() != null) {    for (Iterator<String> it=connection.getForeignKeys().keySet().iterator(); it.hasNext(); ) {      String key=it.next();      DBObject obj=connection.getForeignKeys().get(key);      if (!isProcessCustomizedTarget || (isProcessCustomizedTarget && obj.getCustomizationLevel() > s_parameters.CUSTOMNONE)) {        DBObject_ForeignKey_Table objHeader=(DBObject_ForeignKey_Table)obj.getHeaders().get(0);        DBObject localTable=connection.getObjectByName(objHeader.getTable(),connection.getTables());        DBObject foreignTable=connection.getObjectByName(objHeader.getFTable(),connection.getTables());        if (localTable.getName().equalsIgnoreCase(localTableName)) {          if (!localTable.getName().equalsIgnoreCase(foreignTable.getName())) {            ArrayList<String> nullableColumns=new ArrayList<String>();            ArrayList<String> newColumns=new ArrayList<String>();            for (Iterator<Integer> it2=localTable.getContents().keySet().iterator(); it2.hasNext(); ) {              Integer key2=it2.next();              DBObject_Table_Column col=(DBObject_Table_Column)localTable.getContents().get(key2);              if (col.isNullable())               nullableColumns.add(col.getName().toUpperCase());              if (col.isNew())               newColumns.add(col.getName().toUpperCase());            }            for (Iterator<Integer> it2=obj.getContents().keySet().iterator(); it2.hasNext(); ) {              Integer key2=it2.next();              DBObject_ForeignKey_Column objContents=(DBObject_ForeignKey_Column)obj.getContents().get(key2);              if (!nullableColumns.contains(objContents.getColumn().toUpperCase())) {                if (!newColumns.contains(objContents.getColumn().toUpperCase())) {                  foreignKeyNames.add(obj.getName());                  foreignTableNames.add(foreignTable.getName());                  foreignColumnNames.add(objContents.getFColumn());                  localColumnNames.add(objContents.getColumn());                }              }            }            purgeOrphan(foreignTable,isProcessCustomizedTarget);          }        }      }    }  }  if (foreignColumnNames.size() > 0) {    String vendor=m_target.getVendor();    String catalog=m_target.getCatalog();    String schema=m_target.getSchema();    s_logger.log(Level.FINE,"purgeOrphan",new Object[]{m_objectType,localTableName,m_direction});    String sqlCommand=s_dbEngine.sqlAction_purgeOrphans(vendor,catalog,schema,localTableName,localColumnNames,foreignKeyNames,foreignTableNames,foreignColumnNames);    Statement stmt=m_target.setStatement();    Integer sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);    if (sqlResult != null) {      logDropDetail(sqlResult,null);      m_counterPrg=new Integer(m_counterPrg.intValue() + 1);    }    m_target.releaseStatement(stmt);    m_totalPrg=new Integer(m_totalPrg.intValue() + 1);  }}  }
class C{  boolean isShowText(){  return fDetailsBlock.isTextVisible();}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public PLCollisionData(){  super();  ray=new PLVector3[]{new PLVector3(),new PLVector3()};  hitPoint=new PLVector3[]{new PLVector3()};  points=new PLVector3[]{new PLVector3(),new PLVector3(),new PLVector3(),new PLVector3()};}  }
class C{  public void reset(Parameters parameters){  client.reset(parameters);}  }
class C{  public QueryBuilder(Analyzer analyzer){  this.analyzer=analyzer;}  }
class C{  public static String resolveFQN(Container startPoint,Resource endPoint){  checkArgument(startPoint != null,"Null source folder occurred");  checkArgument(endPoint != null,"Null resource occurred");  checkArgument(startPoint.getLocation().isPrefixOf(endPoint.getLocation()),"Given base folder is not prefix of checked resource");  Path path=endPoint.getLocation().removeFirstSegments(startPoint.getLocation().segmentCount());  if (isJavaFile(endPoint)) {    final String ext=((File)endPoint).getExtension();    if (!isNullOrEmpty(ext)) {      final String name=endPoint.getName();      path=path.removeLastSegments(1).append(name.substring(0,name.length() - ext.length() - 1));    }  }  return path.toString().replace('/','.');}  }
class C{  public boolean contains(final S1Interval y){  if (isInverted()) {    if (y.isInverted()) {      return y.lo() >= lo() && y.hi() <= hi();    }    return (y.lo() >= lo() || y.hi() <= hi()) && !isEmpty();  } else {    if (y.isInverted()) {      return isFull() || y.isEmpty();    }    return y.lo() >= lo() && y.hi() <= hi();  }}  }
class C{  javax.cache.Cache<Integer,String> createJsr107Cache(String cacheName,Integer size){  CacheManager cm=cacheManager();  Builder<Integer,String> mc=createCacheBuilder(size);  javax.cache.Cache<Integer,String> cache=cm.createCache(cacheName,mc);  return cache;}  }
class C{  private void generateCustomCatalogs(Breadcrumbs pBreadcrumbs,Element feed,boolean inSubDir,boolean atTop) throws IOException {  Element entry;  if (logger.isDebugEnabled())   logger.debug("STARTED: Generating custom catalogs");  List<CustomCatalogEntry> customCatalogs=currentProfile.getCustomCatalogs();  CatalogManager.callback.startCreateCustomCatalogs(customCatalogs.size());  if (Helper.isNullOrEmpty(customCatalogs)) {    logger.trace("ENDED: No Custom Catalogs set");  } else {    int pos=1;    Map<String,BookFilter> customCatalogsFilters=CatalogManager.customCatalogsFilters;    for (    CustomCatalogEntry customCatalog : customCatalogs) {      CatalogManager.callback.checkIfContinueGenerating();      String customCatalogTitle=customCatalog.getLabel();      String customCatalogSearch=customCatalog.getValue();      logger.trace("Current CustomCatalog is '" + customCatalogTitle + "'");      if (customCatalog.getAtTop() != atTop) {        logger.trace("IGNORED: AtTop setting means skip at the moment.");        continue;      }      if (Helper.isNotNullOrEmpty(customCatalogTitle) && (!customCatalogTitle.equals(Constants.CUSTOMCATALOG_DEFAULT_TITLE)) && (!customCatalogSearch.equals(Constants.CUSTOMCATALOG_DEFAULT_SEARCH))) {        BookFilter customCatalogBookFilter=null;        if (customCatalogsFilters != null) {          customCatalogBookFilter=customCatalogsFilters.get(customCatalogTitle);        }        if (customCatalogBookFilter == null) {          String externalLinkUrl=customCatalog.getValue();          logger.info("Generating custom catalog: " + customCatalogTitle);          if (logger.isDebugEnabled())           logger.debug("Adding external link '" + customCatalogTitle + "', URLValue="+ externalLinkUrl);          boolean opdsLink=false;          if (externalLinkUrl.toUpperCase().startsWith(Constants.CUSTOMCATALOG_OPDSURL.toUpperCase())) {            externalLinkUrl=externalLinkUrl.substring(Constants.CUSTOMCATALOG_OPDSURL.length());            opdsLink=true;          } else           if (externalLinkUrl.toUpperCase().startsWith(Constants.CUSTOMCATALOG_HTMLURL.toUpperCase())) {            externalLinkUrl=externalLinkUrl.substring(Constants.CUSTOMCATALOG_HTMLURL.length());            opdsLink=false;          } else           if (externalLinkUrl.toUpperCase().endsWith(".XML")) {            opdsLink=true;            if (externalLinkUrl.toUpperCase().startsWith(Constants.CUSTOMCATALOG_OPDSHTTP.toUpperCase())) {              externalLinkUrl=externalLinkUrl.substring(Constants.CUSTOMCATALOG_OPDS.length());            }          }          if (externalLinkUrl.length() > 2) {            if (externalLinkUrl.startsWith("\"")) {              externalLinkUrl=externalLinkUrl.substring(1);            }            if (externalLinkUrl.endsWith("\"")) {              externalLinkUrl=externalLinkUrl.substring(0,externalLinkUrl.length() - 1);            }          }          entry=FeedHelper.getExternalLinkEntry(customCatalogTitle,Localization.Main.getText("content.externalLink"),opdsLink,"urn:calibre2opds:externalLink" + (pos++),externalLinkUrl,currentProfile.getExternalIcons() ? getIconPrefix(inSubDir) + Icons.ICONFILE_EXTERNAL : Icons.ICON_EXTERNAL);          if (entry != null) {            feed.addContent(entry);          }        } else {          List<Book> customCatalogBooks=FilterHelper.filter(customCatalogBookFilter,getBooks());          int nb=customCatalogBooks.size();          String s;switch ((int)nb) {case 0:            s=Localization.Main.getText("bookword.none",nb);          break;case 1:        s=Localization.Main.getText("bookword.one",nb);      break;default :    s=Localization.Main.getText("bookword.many",nb);  break;}logger.info("Generating custom catalog: " + customCatalogTitle + " ("+ s+ ")");if (Helper.isNullOrEmpty(customCatalogBooks)) {logger.warn(Localization.Main.getText("error.customCatalogEmpty",customCatalogTitle) + " (" + customCatalogSearch+ ")");} else {LevelSubCatalog customSubCatalog=new LevelSubCatalog(customCatalogBooks,customCatalogTitle);customSubCatalog.setCatalogType(Constants.CUSTOM_TYPE);customSubCatalog.setCatalogFolder(Constants.CUSTOM_TYPE);customSubCatalog.setCatalogLevel(Breadcrumbs.addBreadcrumb(pBreadcrumbs,customCatalogTitle,null));customSubCatalog.setCatalogBaseFilename(CatalogManager.getInitialUr());String customFilename=customSubCatalog.getCatalogBaseFolderFileName();String customUrl=CatalogManager.getCatalogFileUrl(customFilename + Constants.XML_EXTENSION,pBreadcrumbs.size() > 1 || inSubDir);Breadcrumbs custombreadcrumbs=Breadcrumbs.addBreadcrumb(pBreadcrumbs,customCatalogTitle,customUrl);entry=customSubCatalog.getCatalog(custombreadcrumbs,null,inSubDir,Localization.Main.getText("deeplevel.summary",Summarizer.getBookWord(customCatalogBooks.size())),"calibre:" + customSubCatalog.getCatalogFolder() + Constants.URN_SEPARATOR+ customSubCatalog.getCatalogLevel(),null,useExternalIcons ? getIconPrefix(inSubDir) + Icons.ICONFILE_CUSTOM : Icons.ICON_CUSTOM);customSubCatalog=null;if (entry != null) {  feed.addContent(entry);}CatalogManager.callback.incStepProgressIndicatorPosition();}customCatalogBooks=null;if (logger.isDebugEnabled()) logger.debug("ENDED: Generating custom catalog " + customCatalogTitle);}}}if (logger.isDebugEnabled()) logger.debug("COMPLETED: Generating custom catalogs");CatalogManager.recordRamUsage("After generating Custom Catalogs");}CatalogManager.callback.endCreateCustomCatalogs();CatalogManager.callback.showMessage("");}  }
class C{  public void makeCurrentReadFrom(EglSurfaceBase readSurface){  mEglCore.makeCurrent(mEGLSurface,readSurface.mEGLSurface);}  }
class C{  @Deprecated public static boolean isEnumSubclass(Object value){  if (value instanceof Class) {    Class superclass=((Class)value).getSuperclass();    while (superclass != null) {      if (superclass.getName().equals("java.lang.Enum")) {        return true;      }      superclass=superclass.getSuperclass();    }  }  return false;}  }
class C{  public Iterator(String s){  desc=s;  index=curPos=0;  param=false;}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  public static BridgeServerRequest createForAdd(CacheInfo cache){  BridgeServerRequest request=new BridgeServerRequest();  request.cacheId=cache.getId();  request.operation=ADD_OPERATION;  request.friendlyName=LocalizedStrings.BridgeServerRequest_ADD_BRIDGE_SERVER.toLocalizedString();  request.bridgeInfo=null;  return request;}  }
class C{  public static void writeInfoFlowDetailsToFile(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + INFO_FLOW_DETAILS_FILE_NAME);    Set<MethodModel> entryPoints=securitySpecModel.getEntryPoints();    SortedSet<MethodModel> allMethods=new TreeSet<MethodModel>();    allMethods.addAll(entryPoints);    for (    MethodModel entryPoint : entryPoints) {      allMethods.addAll(securitySpecModel.getOutputEvents(entryPoint));    }    for (    MethodModel method : allMethods) {      if (method.hasInfoFlowInfo()) {        fw.write(method.getSignature() + "\n");        List<String> receiverInfoKinds=method.getArgumentInfoKinds(-1);        Map<String,List<CallLocationModel>> receiverSourceInfoUnits=method.getArgumentSourceInfoUnits(-1);        String desc="<receiver> " + method.getReceiverType();        writeInfoFlowDetails(desc,receiverInfoKinds,receiverSourceInfoUnits,fw);        List<String> args=method.getMethodArguments();        for (int i=0; i < args.size(); i++) {          List<String> argInfoKinds=method.getArgumentInfoKinds(i);          Map<String,List<CallLocationModel>> argInfoUnits=method.getArgumentSourceInfoUnits(i);          desc="<argument " + (i + 1) + "> : "+ args.get(i);          writeInfoFlowDetails(desc,argInfoKinds,argInfoUnits,fw);        }        List<String> sinkInfoKinds=method.getSinkInfoKinds();        desc="<sinks>";        writeInfoFlowDetails(desc,sinkInfoKinds,null,fw);      }    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing info flow details to file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  @Interruptible public static void boot(){  if (STATS) {    Callbacks.addExitMonitor(new Lock.ExitMonitor());    Callbacks.addAppRunStartMonitor(new Lock.AppRunStartMonitor());  }}  }
class C{  public static int dispatchMana(ItemStack stack,EntityPlayer player,int manaToSend,boolean add){  if (stack == null)   return 0;  IInventory mainInv=player.inventory;  IInventory baublesInv=BotaniaAPI.internalHandler.getBaublesInventory(player);  int invSize=mainInv.getSizeInventory();  int size=invSize;  if (baublesInv != null)   size+=baublesInv.getSizeInventory();  for (int i=0; i < size; i++) {    boolean useBaubles=i >= invSize;    IInventory inv=useBaubles ? baublesInv : mainInv;    int slot=i - (useBaubles ? invSize : 0);    ItemStack stackInSlot=inv.getStackInSlot(slot);    if (stackInSlot == stack)     continue;    if (stackInSlot != null && stackInSlot.getItem() instanceof IManaItem) {      IManaItem manaItemSlot=(IManaItem)stackInSlot.getItem();      if (manaItemSlot.canReceiveManaFromItem(stackInSlot,stack)) {        if (stack.getItem() instanceof IManaItem && !((IManaItem)stack.getItem()).canExportManaToItem(stack,stackInSlot))         continue;        int received;        if (manaItemSlot.getMana(stackInSlot) + manaToSend <= manaItemSlot.getMaxMana(stackInSlot))         received=manaToSend; else         received=manaToSend - (manaItemSlot.getMana(stackInSlot) + manaToSend - manaItemSlot.getMaxMana(stackInSlot));        if (add)         manaItemSlot.addMana(stackInSlot,manaToSend);        if (useBaubles)         BotaniaAPI.internalHandler.sendBaubleUpdatePacket(player,slot);        return received;      }    }  }  return 0;}  }
class C{  public void deliveryComplete(final IMqttDeliveryToken token){  logger.trace("Delivery complete for {}",token.getMessageId());}  }
class C{  public static final Axis3D xAxis(){  return new Axis3D(Vec3D.X_AXIS);}  }
class C{  @SuppressWarnings({"unchecked"}) private <T>List<T> executeQueryWithNamedParams(Query query,Map<String,?> params){  Validate.notNull(query);  Validate.notNull(params);  for (  Map.Entry<String,?> entry : params.entrySet()) {    query.setParameter(entry.getKey(),entry.getValue());  }  return query.getResultList();}  }
class C{  MotionEvent createMotionEventForStackScroll(MotionEvent ev){  MotionEvent pev=MotionEvent.obtainNoHistory(ev);  pev.setLocation(0,mScroller.progressToScrollRange(mScroller.getStackScroll()));  return pev;}  }
class C{  public boolean isLoadOnStartup(){  return loadOnStartup;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  private Volume prepareVolume(Volume volume,final Project project,final VirtualArray varray,final VirtualPool vpool,final String size,final Recommendation placement,final String label,final BlockConsistencyGroup consistencyGroup,final String token,final boolean remote,final Volume.PersonalityTypes personality,final URI srcVolumeId,final URI raGroupURI,final String copyMode){  boolean newVolume=false;  if (volume == null) {    validateVolumeLabel(label,project);    newVolume=true;    volume=new Volume();    volume.setId(URIUtil.createId(Volume.class));    volume.setOpStatus(new OpStatusMap());  } else {    volume=_dbClient.queryObject(Volume.class,volume.getId());  }  volume.setLabel(label);  volume.setCapacity(SizeUtil.translateSize(size));  volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));  volume.setVirtualPool(vpool.getId());  volume.setProject(new NamedURI(project.getId(),volume.getLabel()));  volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));  volume.setVirtualArray(varray.getId());  volume.setSrdfGroup(raGroupURI);  volume.setSrdfCopyMode(copyMode);  if (null != placement.getSourceStoragePool()) {    StoragePool pool=_dbClient.queryObject(StoragePool.class,placement.getSourceStoragePool());    if (null != pool) {      volume.setProtocol(new StringSet());      volume.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),pool.getProtocols()));    }  }  volume.setPersonality(personality.toString());  if (personality.equals(Volume.PersonalityTypes.SOURCE)) {    volume.setAccessState(VolumeAccessState.READWRITE.name());  } else   if (personality.equals(Volume.PersonalityTypes.TARGET)) {    volume.setAccessState(VolumeAccessState.NOT_READY.name());  }  URI storageSystemUri=null;  if (!remote) {    storageSystemUri=placement.getSourceStorageSystem();    volume.setStorageController(storageSystemUri);    volume.setPool(placement.getSourceStoragePool());  } else {    storageSystemUri=((SRDFRecommendation)placement).getVirtualArrayTargetMap().get(varray.getId()).getTargetStorageDevice();    volume.setStorageController(storageSystemUri);    volume.setPool(((SRDFRecommendation)placement).getVirtualArrayTargetMap().get(varray.getId()).getTargetStoragePool());  }  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemUri);  String systemType=storageSystem.checkIfVmax3() ? DiscoveredDataObject.Type.vmax3.name() : storageSystem.getSystemType();  volume.setSystemType(systemType);  volume.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);  op.setStartTime(Calendar.getInstance());  volume.getOpStatus().put(token,op);  if (consistencyGroup != null) {    volume.setConsistencyGroup(consistencyGroup.getId());    volume.setReplicationGroupInstance(consistencyGroup.getLabel());  }  if (null != vpool.getAutoTierPolicyName()) {    URI autoTierPolicyUri=StorageScheduler.getAutoTierPolicy(volume.getPool(),vpool.getAutoTierPolicyName(),_dbClient);    if (null != autoTierPolicyUri) {      volume.setAutoTieringPolicyUri(autoTierPolicyUri);    }  }  if (srcVolumeId != null) {    Volume srcVolume=_dbClient.queryObject(Volume.class,srcVolumeId);    if (srcVolume.getSrdfTargets() == null) {      srcVolume.setSrdfTargets(new StringSet());    }    srcVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());    srcVolume.getSrdfTargets().add(volume.getId().toString());    _dbClient.persistObject(srcVolume);    volume.setSrdfParent(new NamedURI(srcVolume.getId(),srcVolume.getLabel()));    computeCapacityforSRDFV3ToV2(volume,vpool);  }  if (newVolume) {    _dbClient.createObject(volume);  } else {    _dbClient.updateAndReindexObject(volume);  }  return volume;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public static Object evaluateOutputEval(Draft3Job job,Object output,Object binding) throws Draft3ExpressionException {  Object outputEval=getOutputEval(binding);  return Draft3ExpressionResolver.resolve(outputEval,job,output);}  }
class C{  public static void createDeepCopyFunctionProgramBlock(String namespace,String oldName,long pid,int IDPrefix,Program prog,HashSet<String> fnStack,HashSet<String> fnCreated,boolean plain) throws DMLRuntimeException {  FunctionProgramBlock fpb=prog.getFunctionProgramBlock(namespace,oldName);  String fnameNew=(plain) ? oldName : (oldName + CP_CHILD_THREAD + pid);  String fnameNewKey=DMLProgram.constructFunctionKey(namespace,fnameNew);  if (prog.getFunctionProgramBlocks().containsKey(fnameNewKey))   return;  FunctionProgramBlock copy=null;  ArrayList<DataIdentifier> tmp1=new ArrayList<DataIdentifier>();  ArrayList<DataIdentifier> tmp2=new ArrayList<DataIdentifier>();  if (fpb.getInputParams() != null)   tmp1.addAll(fpb.getInputParams());  if (fpb.getOutputParams() != null)   tmp2.addAll(fpb.getOutputParams());  if (fpb instanceof ExternalFunctionProgramBlockCP) {    ExternalFunctionProgramBlockCP efpb=(ExternalFunctionProgramBlockCP)fpb;    HashMap<String,String> tmp3=efpb.getOtherParams();    if (IDPrefix != -1)     copy=new ExternalFunctionProgramBlockCP(prog,tmp1,tmp2,tmp3,saveReplaceFilenameThreadID(efpb.getBaseDir(),CP_CHILD_THREAD + IDPrefix,CP_CHILD_THREAD + pid)); else     copy=new ExternalFunctionProgramBlockCP(prog,tmp1,tmp2,tmp3,saveReplaceFilenameThreadID(efpb.getBaseDir(),CP_ROOT_THREAD_ID,CP_CHILD_THREAD + pid));  } else   if (fpb instanceof ExternalFunctionProgramBlock) {    ExternalFunctionProgramBlock efpb=(ExternalFunctionProgramBlock)fpb;    HashMap<String,String> tmp3=efpb.getOtherParams();    if (IDPrefix != -1)     copy=new ExternalFunctionProgramBlock(prog,tmp1,tmp2,tmp3,saveReplaceFilenameThreadID(efpb.getBaseDir(),CP_CHILD_THREAD + IDPrefix,CP_CHILD_THREAD + pid)); else     copy=new ExternalFunctionProgramBlock(prog,tmp1,tmp2,tmp3,saveReplaceFilenameThreadID(efpb.getBaseDir(),CP_ROOT_THREAD_ID,CP_CHILD_THREAD + pid));  } else {    if (!fnStack.contains(fnameNewKey)) {      fnStack.add(fnameNewKey);      copy=new FunctionProgramBlock(prog,tmp1,tmp2);      copy.setChildBlocks(rcreateDeepCopyProgramBlocks(fpb.getChildBlocks(),pid,IDPrefix,fnStack,fnCreated,plain,fpb.isRecompileOnce()));      copy.setRecompileOnce(fpb.isRecompileOnce());      copy.setThreadID(pid);      fnStack.remove(fnameNewKey);    } else     copy=fpb;  }  prog.addFunctionProgramBlock(namespace,fnameNew,copy);  fnCreated.add(DMLProgram.constructFunctionKey(namespace,fnameNew));}  }
class C{  public boolean classExists(Identifier nm){  return env.classExists(nm);}  }
class C{  public void writeRequest(Headers headers,String requestLine) throws IOException {  if (state != STATE_IDLE)   throw new IllegalStateException("state: " + state);  sink.writeUtf8(requestLine).writeUtf8("\r\n");  for (int i=0, size=headers.size(); i < size; i++) {    sink.writeUtf8(headers.name(i)).writeUtf8(": ").writeUtf8(headers.value(i)).writeUtf8("\r\n");  }  sink.writeUtf8("\r\n");  state=STATE_OPEN_REQUEST_BODY;}  }
class C{  public BType addBuilder(MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(null);  builders.add(builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  public static void main(String args[]){  int size=Integer.parseInt(args[0]);  boolean print=new Boolean(args[1]).booleanValue();  double mean=new Double(args[2]).doubleValue();  String generatorName=args[3];  random(size,print,mean,generatorName);}  }
class C{  private static void addPerspectiveAndDescendants(List perspectiveIds,String id){  IPerspectiveRegistry registry=PlatformUI.getWorkbench().getPerspectiveRegistry();  IPerspectiveDescriptor[] perspectives=registry.getPerspectives();  for (int i=0; i < perspectives.length; i++) {    PerspectiveDescriptor descriptor=((PerspectiveDescriptor)perspectives[i]);    if (descriptor.getOriginalId().equals(id)) {      perspectiveIds.add(descriptor.getId());    }  }}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBlob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  protected String doIt() throws Exception {  StringBuffer sql=new StringBuffer("SELECT BatchDocumentNo,I_IsImported FROM I_Budget where I_Budget_ID=" + getRecord_ID());  PreparedStatement pstmt=null;  ResultSet rs=null;  String message=null;  String isImported=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    if (rs.next()) {      glDocNo=rs.getString(1);      isImported=rs.getString(2);    }  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql.toString(),ex);  } finally {    rs.close();    pstmt.close();  }  if (isImported.equals("Y"))   return "Budget already imported.";  docCheck=" AND BatchDocumentNo= '" + glDocNo + "'";  clientCheck=" AND AD_Client_ID= " + Env.getAD_Client_ID(getCtx());  boolean isUpdated=updateTable();  if (!isUpdated)   return "Problem when updating table.Refer Import Error message on window";  boolean isQtyOk=checkQty();  if (!isQtyOk)   return "Qty Mismatch.Credit Line must have negative qty and Debit line must have positive qty.";  message=checkBalance();  int i=0;  if (message != null && message.equals("Document Ok") && finCalendar > 0) {    getConstantsId();    MJournalBatch journalBatch=createGlBatch();    if (journalBatch != null) {      createJournal(journalBatch);      if (docAction.equals("CO"))       journalBatch.processIt(DocAction.ACTION_Complete);      sql=new StringBuffer("UPDATE I_Budget " + "SET I_IsImported='Y', Processed='Y', Updated=SysDate " + "WHERE I_IsImported='N' AND GL_JournalBatch_ID IS NOT NULL ").append(clientCheck).append(docCheck);      i=DB.executeUpdate(sql.toString(),get_TrxName());      log.fine("Imported =" + i);      if (i > 0)       return "Budget Imported.";    }  }  return message;}  }
class C{  private void removeStorageViewVirtualVolumes(VPlexStorageViewInfo storageViewInfo,List<String> virtualVolumeNames) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_STORAGE_VIEW_REMOVE_VOLUMES);  StringBuilder volumeNamesBuilder=new StringBuilder();  for (  String virtualVolumename : virtualVolumeNames) {    if (volumeNamesBuilder.length() != 0) {      volumeNamesBuilder.append(",");    }    volumeNamesBuilder.append(virtualVolumename);  }  modifyStorageViewVirtualVolumes(storageViewInfo,volumeNamesBuilder.toString(),requestURI);}  }
class C{  public static boolean contains(boolean[] self,Object value){  for (  boolean next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  private void validateNotificationActions(List<JobAction> jobActions){  Assert.notEmpty(jobActions,"At least one notification action must be specified.");  Set<JobAction> validatedJobActionsSet=new LinkedHashSet<>();  for (  JobAction jobAction : jobActions) {    Assert.hasText(jobAction.getNamespace(),"A job action namespace must be specified.");    jobAction.setNamespace(jobAction.getNamespace().trim());    Assert.hasText(jobAction.getJobName(),"A job action job name must be specified.");    jobAction.setJobName(jobAction.getJobName().trim());    JobAction lowercaseJobDefinitionKey=new JobAction();    lowercaseJobDefinitionKey.setNamespace(jobAction.getNamespace().toLowerCase());    lowercaseJobDefinitionKey.setJobName(jobAction.getJobName().toLowerCase());    if (validatedJobActionsSet.contains(lowercaseJobDefinitionKey)) {      throw new IllegalArgumentException(String.format("Duplicate job action {namespace: \"%s\", jobName: \"%s\"} found.",jobAction.getNamespace(),jobAction.getJobName()));    }    validatedJobActionsSet.add(lowercaseJobDefinitionKey);  }}  }
class C{  public static int roll1D20(){  return rand.nextInt(20) + 1;}  }
class C{  private boolean aceptaRelaciones(PrevisionVO prevision){  boolean aceptaRelaciones=false;  if (prevision.getEstado() == EstadoPrevision.ACEPTADA.getIdentificador() && !prevision.isCaducada())   if (prevision.getIdusrgestor().equals(getServiceClient().getId())) {    Date currentDate=DateUtils.getFechaActualSinHora();    if (DateUtils.isFechaMayorOIgual(currentDate,prevision.getFechainitrans()) && DateUtils.isFechaMenorOIgual(currentDate,prevision.getFechafintrans())) {      aceptaRelaciones=true;    }  }  return aceptaRelaciones;}  }
class C{  public boolean equals(Object obj){  return (obj == INSTANCE);}  }
class C{  public void run(){  if (mClosed) {    return;  }  try {    sendSdesPacket();    boolean terminate=false;    while (!terminate) {      try {        Thread.sleep((long)mRtcpSession.getReportInterval());        if ((mRtcpSession.timeOfLastRTCPSent + mRtcpSession.T) <= mRtcpSession.currentTime()) {          if ((mRtcpSession.isByeRequested && mWaitingForByeBackoff)) {            if (mRtcpSession.timeOfLastRTCPSent > 0 && mRtcpSession.timeOfLastRTPSent > 0) {              mRtcpSession.getMySource().activeSender=false;              mRtcpSession.timeOfLastRTCPSent=mRtcpSession.currentTime();            } else {              terminate=true;            }          } else {            if (!mClosed) {              byte[] data=assembleRtcpPacket();              if (data != null) {                transmit(assembleRtcpPacket());              }              if (mRtcpSession.isByeRequested && !mWaitingForByeBackoff) {                terminate=true;              } else {                mRtcpSession.timeOfLastRTCPSent=mRtcpSession.currentTime();              }            } else {              terminate=true;            }          }        }        mWaitingForByeBackoff=false;      } catch (      InterruptedException e) {        mWaitingForByeBackoff=true;        mRtcpSession.isByeRequested=true;      }    }  } catch (  NetworkException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }catch (  RuntimeException e) {    sLogger.error("Can't send the RTCP packet",e);  }}  }
class C{  public Path generateAuditReport() throws ServerException, ConflictException {  if (!inProgress.compareAndSet(false,true)) {    throw new ConflictException("Generating report is already in progress");  }  Path auditReport=null;  try {    String dateTime=new SimpleDateFormat("dd-MM-yyyy_hh:mm:ss").format(new Date());    auditReport=createTempDirectory(null).resolve("report_" + dateTime + ".txt");    Files.createFile(auditReport);    CodenvyLicense license=null;    try {      license=licenseManager.load();    } catch (    LicenseException ignored) {    }    reportPrinter.printHeader(auditReport,userManager.getTotalCount(),license);    printAllUsers(auditReport);  } catch (  Exception exception) {    if (auditReport != null) {      deleteReportDirectory(auditReport);    }    LOG.error(exception.getMessage(),exception);    throw new ServerException(exception.getMessage(),exception);  } finally {    inProgress.set(false);  }  return auditReport;}  }
class C{  public void shutdown(){  Iterator iterator=writers.values().iterator();  while (iterator.hasNext()) {    Writer writer=(Writer)iterator.next();    try {      writer.flush();      writer.close();    } catch (    Exception e) {    }  }  writers.clear();}  }
class C{  public static <T,P,A>Collection<A> collectWith(Iterable<T> iterable,Function2<? super T,? super P,? extends A> function,P parameter){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).collectWith(function,parameter);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.collectWith((ArrayList<T>)iterable,function,parameter);  }  if (iterable instanceof List<?>) {    return ListIterate.collectWith((List<T>)iterable,function,parameter);  }  if (iterable instanceof Collection) {    return IterableIterate.collectWith(iterable,function,parameter,DefaultSpeciesNewStrategy.INSTANCE.speciesNew((Collection<T>)iterable,((Collection<T>)iterable).size()));  }  if (iterable != null) {    return IterableIterate.collectWith(iterable,function,parameter);  }  throw new IllegalArgumentException("Cannot perform a collectWith on null");}  }
class C{  public NormalizationH3(float mu){  this.mu=mu;}  }
class C{  public static String format(String input,int indent){  try {    Source xmlInput=new StreamSource(new StringReader(input));    StringWriter stringWriter=new StringWriter();    StreamResult xmlOutput=new StreamResult(stringWriter);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount",String.valueOf(indent));    transformer.transform(xmlInput,xmlOutput);    return xmlOutput.getWriter().toString();  } catch (  IllegalArgumentException|TransformerException e) {    Logging.getInstance().log(XMLHelper.class,e);    return input;  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void createXYPlot(){  if (chart == null) {    NumberAxis xAxis=new NumberAxis("");    xAxis.setAutoRangeIncludesZero(false);    NumberAxis yAxis=new NumberAxis("");    yAxis.setAutoRangeIncludesZero(false);    XYPlot plot=new XYPlot();    plot.setDomainAxis(xAxis);    plot.setRangeAxis(yAxis);    XYToolTipGenerator toolTipGenerator=new StandardXYToolTipGenerator();    XYItemRenderer renderer=new XYLineAndShapeRenderer(false,true);    renderer.setBaseToolTipGenerator(toolTipGenerator);    plot.setRenderer(renderer);    plot.setOrientation(PlotOrientation.VERTICAL);    chart=new JFreeChart("",JFreeChart.DEFAULT_TITLE_FONT,plot,true);    ChartFactory.getChartTheme().apply(chart);  } else   if (!(chart.getPlot() instanceof XYPlot)) {    throw new FrameworkException("Can not combine XY plot and categorial plot");  }}  }
class C{  private JTable testTable(String name){  JTable table=new JTable(2,2);  table.getColumnModel().getColumn(0).setHeaderValue("c0");  table.getColumnModel().getColumn(1).setHeaderValue("c1");  table.setName(name);  return table;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.883 -0400",hash_original_method="3BD8DE3008375A571DA60BEB46AD0165",hash_generated_method="651258AEEC35B19DC42DDC2BB9A3E97E") public static IOFileFilter magicNumberFileFilter(String magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  private static Map<String,String> methodWithMapResult(){  Map<String,String> result=new HashMap<>(RETURN_COUNT);  result.put(A,"valueA");  result.put(B,"valueB");  return result;}  }
class C{  public static boolean evaluate(Context context,Writer writer,String logTag,InputStream instream) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  BufferedReader br=null;  String encoding=null;  try {    encoding=RuntimeSingleton.getString(INPUT_ENCODING,ENCODING_DEFAULT);    br=new BufferedReader(new InputStreamReader(instream,encoding));  } catch (  UnsupportedEncodingException uce) {    String msg="Unsupported input encoding : " + encoding + " for template "+ logTag;    throw new ParseErrorException(msg);  }  return evaluate(context,writer,logTag,br);}  }
class C{  public double lastTime(){  return lastTime;}  }
class C{  public TIntIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  @Override protected Setup fromString(String s){  return new Setup(s);}  }
class C{  private CProjectLoader(){}  }
class C{  public void saveData(File file) throws IOException {synchronized (accumulators) {    ObjectOutputStream oos=null;    try {      oos=new ObjectOutputStream(new FileOutputStream(file));      oos.writeObject(accumulators);    }  finally {      if (oos != null) {        oos.close();      }    }  }}  }
class C{  private static void writeJson() throws IOException {  JsonFactory jsonFactory=new JsonFactory();  OutputStream outputStream=new ByteArrayOutputStream();  JsonGenerator jsonGenerator=jsonFactory.createGenerator(outputStream,JsonEncoding.UTF8);  jsonGenerator.writeStartObject();  jsonGenerator.writeStringField("message","Hi");  jsonGenerator.writeFieldName("place");  jsonGenerator.writeStartObject();  jsonGenerator.writeStringField("name","World!");  jsonGenerator.writeEndObject();  jsonGenerator.writeEndObject();  jsonGenerator.close();  System.out.println(outputStream.toString());}  }
class C{  public MyPipelineFactory(Timer timer,TcpWorker tcpWorker,int idleTimeoutSec){  this.tcpWorker=tcpWorker;  this.idleStateHandler=new IdleStateHandler(timer,0,0,idleTimeoutSec);  this.myIdleHandler=new MyIdleHandler(tcpWorker);}  }
class C{  @MediumTest public void testLifeCycleCreate(){  Forwarding activity=startActivity(mStartIntent,null,null);  getInstrumentation().callActivityOnStart(activity);  getInstrumentation().callActivityOnResume(activity);  getInstrumentation().callActivityOnPause(activity);  getInstrumentation().callActivityOnStop(activity);}  }
class C{  public static String toJSONString(List list){  if (list == null)   return "null";  boolean first=true;  StringBuffer sb=new StringBuffer();  Iterator iter=list.iterator();  sb.append('[');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Object value=iter.next();    if (value == null) {      sb.append("null");      continue;    }    sb.append(JSONValue.toJSONString(value));  }  sb.append(']');  return sb.toString();}  }
class C{  public JQuickStartLabel(String text){  super(text);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public ColorTintFilter(Color mixColor,float mixValue){  if (mixColor == null) {    throw new IllegalArgumentException("mixColor cannot be null");  }  this.mixColor=mixColor;  if (mixValue < 0.0f) {    mixValue=0.0f;  } else   if (mixValue > 1.0f) {    mixValue=1.0f;  }  this.mixValue=mixValue;  int mix_r=(int)(mixColor.getRed() * mixValue);  int mix_g=(int)(mixColor.getGreen() * mixValue);  int mix_b=(int)(mixColor.getBlue() * mixValue);  float factor=1.0f - mixValue;  preMultipliedRed=new int[256];  preMultipliedGreen=new int[256];  preMultipliedBlue=new int[256];  for (int i=0; i < 256; i++) {    int value=(int)(i * factor);    preMultipliedRed[i]=value + mix_r;    preMultipliedGreen[i]=value + mix_g;    preMultipliedBlue[i]=value + mix_b;  }}  }
class C{  public ORB initORB(String[] args){  Debug.message("corba","CORBAManager.getORB(): initializing ORB");  if (Environment.isApplet()) {    if (Debug.debugging("corba")) {      System.out.println("CORBAManager: initializing applet");    }    return ORB.init(Environment.getApplet(),Environment.getProperties());  }  if (Debug.debugging("corba")) {    System.out.println("CORBAManager: initializing application");  }  return ORB.init((String[])null,System.getProperties());}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  public static double distanceInKilometers(Location start,Location end){  return start.distanceTo(end) / 1000;}  }
class C{  public int capacity(){  return this.capacity;}  }
class C{  public static void perspectiveM(double[] m,int offset,double fovy,double aspect,double zNear,double zFar){  double f=1.0 / Math.tan(fovy * (Math.PI / 360.0));  double rangeReciprocal=1.0 / (zNear - zFar);  m[offset + 0]=f / aspect;  m[offset + 1]=0.0;  m[offset + 2]=0.0;  m[offset + 3]=0.0;  m[offset + 4]=0.0;  m[offset + 5]=f;  m[offset + 6]=0.0;  m[offset + 7]=0.0;  m[offset + 8]=0.0;  m[offset + 9]=0.0;  m[offset + 10]=(zFar + zNear) * rangeReciprocal;  m[offset + 11]=-1.0;  m[offset + 12]=0.0;  m[offset + 13]=0.0;  m[offset + 14]=2.0 * zFar * zNear* rangeReciprocal;  m[offset + 15]=0.0;}  }
class C{  public static void unsubscribe(String topic,Subscriber<?> subscriber){  client().unsubscribe(topic,subscriber);}  }
class C{  public double toDouble(){  return TypeFormat.parseDouble(this);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof MyPojo))   return false;  MyPojo myObj=(MyPojo)obj;  if ((field1 == null && myObj.field1 != null) || (field1 != null && !field1.equals(myObj.field1)))   return false;  if ((field4 == null && myObj.field4 != null) || (field4 != null && !field4.equals(myObj.field4)))   return false;  return field2 == myObj.field2 && field3 == myObj.field3;}  }
class C{  private void addCssOnErrorRemarks(Collection<StylesheetContent> styleSheetsOnError,TestSolutionHandler testSolutionHandler,ProcessRemarkService processRemarkService){  for (  StylesheetContent stylesheetContent : styleSheetsOnError) {    List<EvidenceElement> evidenceElementList=new ArrayList<EvidenceElement>();    evidenceElementList.add(processRemarkService.getEvidenceElement(ProcessRemarkService.DEFAULT_EVIDENCE,stylesheetContent.getURI()));    processRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,null,UNTESTED_RESOURCE_MSG_CODE,evidenceElementList);  }  testSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);}  }
class C{  public void breakpointHit(final IBreakpoint breakpoint){  if (breakpoint instanceof ILineBreakpoint) {    thread.setBreakpoints(new IBreakpoint[]{breakpoint});  }}  }
class C{  public static int checkedCollatorCompare(String s1,String s2,Collator collator){  if (s1 == null) {    if (s2 == null)     return 0; else     return 1;  } else   if (s2 == null) {    if (s1 == null)     return 0; else     return -1;  }  return collator.compare(s1,s2);}  }
class C{  public List<ParallelSuffixArrayEntry> lookupSource(String sourceQuery,int numResults){  return lookupSource(sourceQuery,numResults,false);}  }
class C{  public ICUTokenizerFactory(Map<String,String> args){  super(args);  tailored=new HashMap<>();  String rulefilesArg=get(args,RULEFILES);  if (rulefilesArg != null) {    List<String> scriptAndResourcePaths=splitFileNames(rulefilesArg);    for (    String scriptAndResourcePath : scriptAndResourcePaths) {      int colonPos=scriptAndResourcePath.indexOf(":");      String scriptCode=scriptAndResourcePath.substring(0,colonPos).trim();      String resourcePath=scriptAndResourcePath.substring(colonPos + 1).trim();      tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT,scriptCode),resourcePath);    }  }  cjkAsWords=getBoolean(args,"cjkAsWords",true);  myanmarAsWords=getBoolean(args,"myanmarAsWords",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Part updateAndGetSecurityPart(){  if (AcceptorImpl.isAuthenticationRequired() && this.handshake.getVersion().compareTo(Version.GFE_65) >= 0 && (this.communicationMode != Acceptor.GATEWAY_TO_GATEWAY) && (!this.requestMsg.getAndResetIsMetaRegion()) && (!isInternalMessage())) {    setSecurityPart();    return this.securePart;  } else {    if (AcceptorImpl.isAuthenticationRequired() && logger.isDebugEnabled()) {      logger.debug("ServerConnection.updateAndGetSecurityPart() not adding security part for msg type {}",MessageType.getString(this.requestMsg.msgType));    }  }  return null;}  }
class C{  public boolean isOpaque(){  return getFlag(IS_OPAQUE);}  }
class C{  public Element addAttribute(String attribute_name,int attribute_value){  getElementHashEntry().put(attribute_name,new Integer(attribute_value));  return (this);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public static IFeed readFeed(ParseSource source) throws IOException, ParseException, ServiceException {  return readFeed(source,null,null,null);}  }
class C{  public void delete(byte[] key) throws IOException {  if (key == null)   return;  key=normalizeKey(key);synchronized (this) {    if (this.cache != null)     this.cache.remove(key);    if (this.blob != null)     this.blob.delete(key);  }}  }
class C{  protected boolean isHttpSeparator(char ch){  return (HTTP_SEPARATORS.indexOf(ch) >= 0);}  }
class C{  public void masqueradeAs(TXStateProxy txState){  assert txState != null;  if (!txState.getLock().isHeldByCurrentThread()) {    txState.getLock().lock();  }  setTXState(txState);}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  private synchronized void initCipher(){  if (m_cipher != null)   return;  Cipher cc=null;  try {    cc=Cipher.getInstance("DES/ECB/PKCS5Padding");    if (false) {      KeyGenerator keygen=KeyGenerator.getInstance("DES");      m_key=keygen.generateKey();      byte[] key=m_key.getEncoded();      StringBuffer sb=new StringBuffer("Key ").append(m_key.getAlgorithm()).append("(").append(key.length).append(")= ");      for (int i=0; i < key.length; i++)       sb.append(key[i]).append(",");      log.info(sb.toString());    } else     m_key=new javax.crypto.spec.SecretKeySpec(new byte[]{100,25,28,-122,-26,94,-3,-26},"DES");  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  m_cipher=cc;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void addObjectToUnManagedConsistencyGroup(VNXeApiClient apiClient,UnManagedVolume unManagedVolume,String cgNameToProcess,StorageSystem storageSystem,DbClient dbClient) throws Exception {  log.info("Unmanaged volume {} belongs to consistency group {} on the array",unManagedVolume.getLabel(),cgNameToProcess);  unManagedVolume.getVolumeCharacterstics().put(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString(),Boolean.TRUE.toString());  String unManagedCGNativeGuid=NativeGUIDGenerator.generateNativeGuidForCG(storageSystem.getNativeGuid(),cgNameToProcess);  UnManagedConsistencyGroup unManagedCG=null;  if (unManagedCGToUpdateMap.containsKey(unManagedCGNativeGuid)) {    unManagedCG=unManagedCGToUpdateMap.get(unManagedCGNativeGuid);    log.info("Unmanaged consistency group {} was previously added to the unManagedCGToUpdateMap",unManagedCG.getLabel());  } else {    unManagedCG=DiscoveryUtils.checkUnManagedCGExistsInDB(dbClient,unManagedCGNativeGuid);    if (null == unManagedCG) {      StorageResource res=apiClient.getStorageResource(cgNameToProcess);      unManagedCG=createUnManagedCG(unManagedCGNativeGuid,res,storageSystem.getId(),dbClient);      log.info("Created unmanaged consistency group: {}",unManagedCG.getId().toString());    } else {      log.info("Unmanaged consistency group {} was previously added to the database",unManagedCG.getLabel());      log.info("Cleaning out unmanaged volume map from unmanaged consistency group: {}",unManagedCG.getLabel());      unManagedCG.getUnManagedVolumesMap().clear();    }  }  log.info("Adding unmanaged volume {} to unmanaged consistency group {}",unManagedVolume.getLabel(),unManagedCG.getLabel());  unManagedVolume.getVolumeInformation().put(SupportedVolumeInformation.UNMANAGED_CONSISTENCY_GROUP_URI.toString(),unManagedCG.getId().toString());  unManagedCG.getUnManagedVolumesMap().put(unManagedVolume.getNativeGuid(),unManagedVolume.getId().toString());  unManagedCGToUpdateMap.put(unManagedCGNativeGuid,unManagedCG);  allCurrentUnManagedCgURIs.add(unManagedCG.getId());}  }
class C{  public ClientGUI(Client client,MegaMekController c){  super(new BorderLayout());  this.addComponentListener(this);  this.client=client;  controller=c;  loadSoundClip();  panMain.setLayout(cardsMain);  panSecondary.setLayout(cardsSecondary);  JPanel panDisplay=new JPanel(new BorderLayout());  panDisplay.add(panMain,BorderLayout.CENTER);  panDisplay.add(panSecondary,BorderLayout.SOUTH);  add(panDisplay,BorderLayout.CENTER);}  }
class C{  public static int v(String tag,String msg,Throwable tr){  return isPrint && msg != null ? android.util.Log.v(tag,msg,tr) : -1;}  }
class C{  @Override public final int compareTo(final SemiCluster other){  if (other == null) {    return 1;  }  if (this.size() < other.size()) {    return -1;  }  if (this.size() > other.size()) {    return 1;  }  if (other.vertices.containsAll(vertices)) {    return 0;  }  return -1;}  }
class C{  public static int compareTo(int[] n1,int off1,int len1,int[] n2,int off2){  for (int i=0; i < len1; i++) {    if (n2[off2 + i] == n1[off1 + i]) {      continue;    }    if (n2[off2 + i] > n1[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {      if (e.value == null) {        return true;      }    }    return false;  }  for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {    if (value.equals(e.value)) {      return true;    }  }  return false;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  private void addPoliticsMenu(final JMenu menuGame){  final AbstractAction politicsAction=SwingAction.of("Show Politics Panel",null);  menuGame.add(politicsAction).setMnemonic(KeyEvent.VK_P);}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:03.750 -0500",hash_original_method="491F69AA4FD12992599C16C8B0915773",hash_generated_method="96F1DAB79A4CAC2E01C61FFEE8C1D882") public void close() throws IOException {  mFd.close();}  }
class C{  public static String stringFor(int k){switch (k) {case cudaMemcpyHostToHost:    return "cudaMemcpyHostToHost";case cudaMemcpyHostToDevice:  return "cudaMemcpyHostToDevice";case cudaMemcpyDeviceToHost:return "cudaMemcpyDeviceToHost";case cudaMemcpyDeviceToDevice:return "cudaMemcpyDeviceToDevice";case cudaMemcpyDefault:return "cudaMemcpyDefault";}return "INVALID cudaMemcpyKind: " + k;}  }
class C{  public AntProblem(Reader reader,int maxMoves) throws IOException {  super(1,1);  rules=new Rules();  rules.add(new TurnLeft());  rules.add(new TurnRight());  rules.add(new MoveForward());  rules.add(new IsFoodAhead());  rules.add(new IfElse(Void.class));  rules.add(new Sequence(Void.class,Void.class));  rules.setReturnType(Void.class);  world=new World(reader,maxMoves);}  }
class C{  public void addNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  public static void sendStillInitializing(InternalDistributedMember recipient,int processorId,DM dm){  ManageBackupBucketReplyMessage m=new ManageBackupBucketReplyMessage(processorId,false,true);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public JsonToken peek() throws IOException {  if (token != null) {    return token;  }switch (peekStack()) {case EMPTY_DOCUMENT:    replaceTop(JsonScope.NONEMPTY_DOCUMENT);  JsonToken firstToken=nextValue();if (!lenient && token != JsonToken.BEGIN_ARRAY && token != JsonToken.BEGIN_OBJECT) {  throw new IOException("Expected JSON document to start with '[' or '{' but was " + token);}return firstToken;case EMPTY_ARRAY:return nextInArray(true);case NONEMPTY_ARRAY:return nextInArray(false);case EMPTY_OBJECT:return nextInObject(true);case DANGLING_NAME:return objectValue();case NONEMPTY_OBJECT:return nextInObject(false);case NONEMPTY_DOCUMENT:try {JsonToken token=nextValue();if (lenient) {return token;}throw syntaxError("Expected EOF");} catch (EOFException e) {return token=JsonToken.END_DOCUMENT;}case CLOSED:throw new IllegalStateException("JsonReader is closed");default :throw new AssertionError();}}  }
class C{  public void disconnect(String clientHandle,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.disconnect(invocationContext,activityToken);  connections.remove(clientHandle);  stopSelf();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public double computeAverageLocal(int states[][][],int h,int j){  initialise();  addObservations(states,h,j);  return computeAverageLocalOfObservations();}  }
class C{  public static void printUsage(){  String usage="\n" + "Usage:\n" + "\n"+ "jmc2obj                             Run program in GUI mode\n"+ "jmc2obj [OPTIONS] WORLD_DIRECTORY   Run program in command line mode\n"+ "\n"+ "Options:\n"+ "  -o --output=DIR                   Output directory. Default is current\n"+ "                                    directory.\n"+ "  -a --area=MINX,MINZ,MAXX,MAXZ     Area to export, in Minecraft units.\n"+ "  -c --chunks=MINX,MINZ,MAXX,MAXZ   Area to export, in chunks (one chunk is\n"+ "                                    16x16 units).\n"+ "  -h --height=MINY,MAXY             Minimum and maximum height to export.\n"+ "                                    World bottom is 0, ocean level is 63,\n"+ "                                    world top is 256. Default is 0,256.\n"+ "  -d --dimension=ID                 World dimension to export. Dimension ids\n"+ "                                    are: 0 - Overworld; -1 - Nether; 1 - The\n"+ "                                    End. Mods may add more dimensions. Default\n"+ "                                    is 0.\n"+ "  -e --export=obj[,mtl[,tex]]       What files to export (any combination is\n"+ "                                    valid): obj - geometry file (.obj); mtl -\n"+ "                                    materials file (.mtl); tex - textures\n"+ "                                    directory. Default is obj,mtl.\n"+ "     --texturepack=FILE             When exporting textures, use this texture\n"+ "                                    pack. If omitted will export the default\n"+ "                                    Minecraft textures.\n"+ "     --texturescale=SCALE           When exporting textures, scale the images\n"+ "                                    by this factor. Default is 1 (no scaling).\n"+ "     --objfile=NAME                 Name of geometry file to export. Default\n"+ "                                    is minecraft.obj\n"+ "     --mtlfile=NAME                 Name of materials file to export. Default\n"+ "                                    is minecraft.mtl\n"+ "     --scale=SCALE                  How to scale the exported geometry. Default\n"+ "                                    is 1 (no scaling).\n"+ "     --offset=none|center|X,Z       How to offset the coordinates of the\n"+ "                                    exported geometry: none - no offset;\n"+ "                                    center - place the center of the exported\n"+ "                                    area at the origin; X,Z - apply the given\n"+ "                                    offset. Default is none.\n"+ "  -s --render-sides                 Render world sides and bottom.\n"+ "     --render-entities              Render entities.\n"+ "     --include-unknown              Include blocks with unknown block ids.\n"+ "     --ignore-biomes                Don't render biomes.\n"+ "     --object-per-chunk             Export a separate object for each chunk.\n"+ "     --object-per-mat               Export a separate object for each material.\n"+ "     --object-per-block             Export a separate object for each block.\n"+ "                                    WARNING: Will produce very large files.\n"+ "     --remove-dup                   Try harder to merge vertexes that have the\n"+ "                                    same coordinates.\n"+ "     --optimize-geometry            Reduce size of exported files by joining\n"+ "                                    adjacent faces together when possible.\n"+ "     --help                         Display this help.\n";  System.out.println(usage);}  }
class C{  public boolean isAudioMessage(){  return mAudioMessage;}  }
class C{  public void allowConnection(final boolean allowed){  allowConnection=allowed;  updateActions(database);}  }
class C{  public static BayesImProbs serializableInstance(){  return new BayesImProbs(MlBayesIm.serializableInstance());}  }
class C{  public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {  super();  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  int colon=buffer.indexOf(':');  if (colon == -1) {    throw new ParseException("Invalid header: " + buffer.toString());  }  String s=buffer.substringTrimmed(0,colon);  if (s.length() == 0) {    throw new ParseException("Invalid header: " + buffer.toString());  }  this.buffer=buffer;  this.name=s;  this.valuePos=colon + 1;}  }
class C{  public void resume() throws SystemException {  XAResource xar=null;synchronized (this.resourceMap) {    Iterator iterator=resourceMap.entrySet().iterator();    Map.Entry entry;    Boolean isActive=Boolean.FALSE;    while (iterator.hasNext()) {      entry=(Map.Entry)iterator.next();      xar=(XAResource)entry.getKey();      isActive=(Boolean)entry.getValue();      if (!isActive.booleanValue())       try {        xar.start(xid,XAResource.TMRESUME);        entry.setValue(Boolean.TRUE);      } catch (      Exception e) {        String exception=LocalizedStrings.GlobalTransaction_GLOBATRANSACTION_RESUME_RESUME_NOT_SUCCESFUL_DUE_TO_0.toLocalizedString(e);        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception,e);        throw new SystemException(exception);      }    }  }}  }
class C{  public DateFormatter(DateFormat format){  super(format);  setFormat(format);}  }
class C{  @SuppressWarnings("rawtypes") public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public void newMessage(Message m){}  }
class C{  @Override public void run(MessageLogger logger){  logger.log("<simulation-log>");  try {    addAgent();    while (!agent.isDone() && !frame.simulationPaused()) {      Thread.sleep(500);      env.step();    }  } catch (  InterruptedException e) {  }catch (  Exception e) {    e.printStackTrace();  }  logger.log(getStatistics());  logger.log("</simulation-log>\n");}  }
class C{  public void remove(int index){  if (SysProperties.CHECK) {    if (index >= size) {      throw new ArrayIndexOutOfBoundsException("i=" + index + " size="+ size);    }  }  System.arraycopy(data,index + 1,data,index,size - index - 1);  size--;}  }
class C{  public void cacheHashCode(){  _hashCode=1;  for (int counter=size() - 1; counter >= 0; counter--) {    _hashCode=31 * _hashCode + get(counter).hashCode();  }}  }
class C{  protected void addItemToSection(FormToolkit toolkit,String sectionTitle,String text){  addItemToSection(toolkit,sectionTitle,text,null,SWT.DEFAULT);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean isDeliveryRule(){  Object oo=get_Value(COLUMNNAME_DeliveryRule);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void assertXmlEqual(String expected,String actual) throws TransformerException, SAXException, IOException, ParserConfigurationException {  Document expectedDoc=XmlUtil.parse(expected);  Document actualDoc=XmlUtil.parse(actual);  expected=toIndentedString(expectedDoc);  actual=toIndentedString(actualDoc);  assertEquals(expected,actual);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.642 -0500",hash_original_method="45B83D89DB9565F8F2123157436CF2DA",hash_generated_method="C1C2C141E940D6A5568E115AEE5A3968") public boolean contains(Object o){  return al.contains(o);}  }
class C{  public static ByteString copyFrom(long l){  return ByteString.copyFrom(Longs.toByteArray(l));}  }
class C{  public CGraphPanelDialogs(final CGraphModel model,final CGraphWindowMenuBar menuBar){  m_model=model;  m_menuBar=menuBar;  final CGraphWindow parent=model.getParent();  final ZyGraph graph=model.getGraph();  final String defaultLanguage=ConfigManager.instance().getGeneralSettings().getDefaultScriptingLanguage();  final HashMap<String,Object> bindings=new HashMap<String,Object>();  bindings.put("cg",model.getView2D());  bindings.put("cf",model.getGraphFrame());  bindings.put("cdb",model.getApiDatabase());  m_scriptingDlg=new CScriptingDialog(parent,defaultLanguage,PluginInterface.instance(),bindings);  m_scriptingDlg.setTitle(String.format("%s - %s",m_scriptingDlg.getTitle(),graph.getRawView().getName()));  m_criteriaDlg=new CCriteriaDialog(model.getParent(),new CCriteriaFactory(model.getGraph(),model.getView2D(),model.getDatabase().getContent().getNodeTagManager()));}  }
class C{  public String logUserData(){  return "First Name :" + firstname + ", Last Name :"+ lastname+ ", Age :"+ age+ ", Phone "+ phone+ ", Address :"+ address;}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public Wine deletePrefix() throws CancelException {  if (prefix.getWinePrefixDirectory().exists()) {    ProgressControl progressControl=this.setupWizard.progressBar(format(translate("Please wait while the virtual drive is being deleted..."),prefixName));    final long startSize=prefix.getSize();    final long endSize=0L;    try (DirectoryWatcherSize observableDirectorySize=new DirectoryWatcherSize(executorService,prefix.getWinePrefixDirectory().toPath())){      observableDirectorySize.setOnChange(null);      prefix.delete();    } catch (    IOException|IllegalStateException e) {      throw new ScriptFailureException(e);    }  }  return this;}  }
class C{  public static String quote(String s){  return "\"" + s + "\"";}  }
class C{  public synchronized Filter request(ParsedURL purl){  return (Filter)super.requestImpl(purl);}  }
class C{  public boolean addOwner(Principal caller,Principal owner) throws NotOwnerException {  if (!ownerList.contains(caller))   throw new NotOwnerException();  if (ownerList.contains(owner)) {    return false;  } else {    ownerList.addElement(owner);    return true;  }}  }
class C{  private void joinAid2B(JClass jc,Set<URI> selectionUris){  JClass joinToClass=lookupAlias(jc.joinToAlias);  Set<URI> joinToUris=joinToClass.getUris();  boolean manualMatch=false;  jc.setCacheValid(true);  for (  URI aURI : joinToUris) {    Set<URI> bURIs=null;    if (jc.getMetaData().isIndexed(jc.getField())) {      Constraint constraint=jc.getMetaData().buildConstraint(aURI,jc.getClazz(),jc.getField());      bURIs=engine.queryByConstraint(constraint);    } else {      log.info(String.format("Joiner suboptimal query %s.%s should be indexed to join to %s",jc.getClazz().getSimpleName(),jc.getField(),joinToClass.getClazz().getSimpleName()));      bURIs=engine.queryByType(jc.getClazz());      manualMatch=true;    }    for (    URI bURI : bURIs) {      if (selectionUris != null && !selectionUris.contains(bURI)) {        continue;      }      DataObject object=(DataObject)engine.queryObject(jc.getClazz(),bURI);      if (manualMatch) {        Method method=getGettr(jc,jc.getField());        if (method == null) {          throw new JoinerException("Cannot find gettr for join: " + jc.getField());        }        Object values=null;        try {          values=method.invoke(object);        } catch (        Exception ex) {          log.warn("failed to invoke method {}",method.getName());        }        if (!uriInObject(aURI,values)) {          continue;        }      }      if (testSelections(jc,object) == false) {        continue;      }      jc.addToJoinMap(aURI,bURI);      jc.addToCache(object);      jc.getUris().add(bURI);    }  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof NumberAxis)) {    return false;  }  NumberAxis that=(NumberAxis)obj;  if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {    return false;  }  if (this.autoRangeStickyZero != that.autoRangeStickyZero) {    return false;  }  if (!ObjectUtilities.equal(this.tickUnit,that.tickUnit)) {    return false;  }  if (!ObjectUtilities.equal(this.numberFormatOverride,that.numberFormatOverride)) {    return false;  }  if (!this.rangeType.equals(that.rangeType)) {    return false;  }  return super.equals(obj);}  }
class C{  public <T>T readObject(Class<T> type) throws IOException {  if (_headers == null)   parseHeaders();  JsonReaderImpl reader=new JsonReaderImpl(new InputStreamReader(getInputStream()));  return (T)reader.readObject(type);}  }
class C{  public SpinnerNumberModel(Number value,Comparable minimum,Comparable maximum,Number stepSize){  if ((value == null) || (stepSize == null)) {    throw new IllegalArgumentException("value and stepSize must be non-null");  }  if (!(((minimum == null) || (minimum.compareTo(value) <= 0)) && ((maximum == null) || (maximum.compareTo(value) >= 0)))) {    throw new IllegalArgumentException("(minimum <= value <= maximum) is false");  }  this.value=value;  this.minimum=minimum;  this.maximum=maximum;  this.stepSize=stepSize;}  }
class C{  private static BigDecimal lnNewton(BigDecimal x,int scale){  int sp1=scale + 1;  BigDecimal n=x;  BigDecimal term;  BigDecimal tolerance=BigDecimal.valueOf(5).movePointLeft(sp1);  do {    BigDecimal eToX=exp(x,sp1);    term=eToX.subtract(n).divide(eToX,sp1,BigDecimal.ROUND_DOWN);    x=x.subtract(term);    Thread.yield();  } while (term.compareTo(tolerance) > 0);  return x.setScale(scale,BigDecimal.ROUND_HALF_EVEN);}  }
class C{  public static void copyFile(String sourceFilePath,String targetFilePath){  File sourceFile=new File(sourceFilePath);  File targetFile=new File(targetFilePath);  try {    InputStream in=new FileInputStream(sourceFile);    OutputStream out=new FileOutputStream(targetFile);    byte[] buf=new byte[1024];    int len;    while ((len=in.read(buf)) > 0) {      out.write(buf,0,len);    }    in.close();    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public void close(){synchronized (this) {    if (this.closed)     return; else     this.closed=true;  }  socketDelegate.close();  turnCandidateHarvest.close(this);}  }
class C{  public String elementName(){  return elementName;}  }
class C{  public void fillHeader(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {  fillMinified(dataModel);  dataModel.put(Common.STATIC_RESOURCE_VERSION,Latkes.getStaticResourceVersion());  fillTrendTags(dataModel);  fillPersonalNav(request,response,dataModel);  fillLangs(dataModel);}  }
class C{  public static void printMyLog(Object object){  if (Log.DEBUG > DEBUG_LEVEL) {    String tag="MYLOG";    String method=callMethodAndLine();    String content="";    if (object != null) {      content=object.toString() + "                    ----    " + method;    } else {      content=" ## " + "                ----    " + method;    }    Log.d(tag,content);    if (DEBUG_SYSOUT) {      System.out.println(tag + "  " + content+ "  "+ method);    }  }}  }
class C{  public PatternOrExpr(){}  }
class C{  private static void writeXml(Comment comment,IndentWriter out,boolean escaped) throws IOException {  char[] data=comment.getData().toCharArray();  if (data == null) {    out.write("<!---->");    return;  }  out.write("<!--");  boolean sawDash=false;  int length=data.length;  int start=0, last=0;  while (last < length) {    char c=data[last];    if (c == '-') {      if (sawDash) {        out.write(data,start,last - start);        start=last;        out.write(' ');      }      sawDash=true;    } else {      sawDash=false;    }    last++;  }  out.write(data,start,last - start);  if (sawDash)   out.write(' ');  out.write("-->");}  }
class C{  public static Test suite(){  return (new TestSuite(ImplicitNavigationITCase.class));}  }
class C{  private final boolean isQuit(Message msg){  return (msg.what == SM_QUIT_CMD) && (msg.obj == mSmHandlerObj);}  }
class C{  @VisibleForTesting protected void handleOperationResult(Operation requestedOperation,Operation completedOperation) throws BadRequestException, DocumentNotFoundException, TimeoutException, InterruptedException {switch (completedOperation.getStatusCode()) {case Operation.STATUS_CODE_OK:case Operation.STATUS_CODE_ACCEPTED:case Operation.STATUS_CODE_NOT_MODIFIED:    return;case Operation.STATUS_CODE_NOT_FOUND:  throw new DocumentNotFoundException(requestedOperation,completedOperation);case Operation.STATUS_CODE_TIMEOUT:TimeoutException timeoutException=new TimeoutException(completedOperation.getBody(ServiceErrorResponse.class).message);handleTimeoutException(completedOperation,timeoutException);break;case Operation.STATUS_CODE_BAD_REQUEST:throw new BadRequestException(requestedOperation,completedOperation);default :handleUnknownError(requestedOperation,completedOperation);}}  }
class C{  public boolean isPerInstanceMetaClassChange(){  return instance != null;}  }
class C{  public static boolean isSuperType(ITypeBinding possibleSuperType,ITypeBinding type,boolean considerTypeArguments){  if (type.isArray() || type.isPrimitive()) {    return false;  }  if (!considerTypeArguments) {    type=type.getTypeDeclaration();  }  if (Bindings.equals(type,possibleSuperType)) {    return true;  }  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    if (isSuperType(possibleSuperType,superClass,considerTypeArguments)) {      return true;    }  }  if (possibleSuperType.isInterface()) {    ITypeBinding[] superInterfaces=type.getInterfaces();    for (int i=0; i < superInterfaces.length; i++) {      if (isSuperType(possibleSuperType,superInterfaces[i],considerTypeArguments)) {        return true;      }    }  }  return false;}  }
class C{  protected String[] parseLine(String nextLine,boolean multi) throws IOException {  if (!multi && pending != null) {    pending=null;  }  if (nextLine == null) {    if (pending != null) {      String s=pending;      pending=null;      return new String[]{s};    }    return null;  }  List<String> tokensOnThisLine=new ArrayList<String>();  StringBuilder sb=new StringBuilder(nextLine.length() + READ_BUFFER_SIZE);  boolean inQuotes=false;  boolean fromQuotedField=false;  if (pending != null) {    sb.append(pending);    pending=null;    inQuotes=!this.ignoreQuotations;  }  for (int i=0; i < nextLine.length(); i++) {    char c=nextLine.charAt(i);    if (c == this.escape) {      if (isNextCharacterEscapable(nextLine,inQuotes(inQuotes),i)) {        i=appendNextCharacterAndAdvanceLoop(nextLine,sb,i);      }    } else     if (c == quotechar) {      if (isNextCharacterEscapedQuote(nextLine,inQuotes(inQuotes),i)) {        i=appendNextCharacterAndAdvanceLoop(nextLine,sb,i);      } else {        inQuotes=!inQuotes;        if (atStartOfField(sb)) {          fromQuotedField=true;        }        if (!strictQuotes) {          if (i > 2 && nextLine.charAt(i - 1) != this.separator && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) != this.separator) {            if (ignoreLeadingWhiteSpace && sb.length() > 0 && isWhitespace(sb)) {              sb.setLength(0);            } else {              sb.append(c);            }          }        }      }      inField=!inField;    } else     if (c == separator && !(inQuotes && !ignoreQuotations)) {      tokensOnThisLine.add(convertEmptyToNullIfNeeded(sb.toString(),fromQuotedField));      fromQuotedField=false;      sb.setLength(0);      inField=false;    } else {      if (!strictQuotes || (inQuotes && !ignoreQuotations)) {        sb.append(c);        inField=true;        fromQuotedField=true;      }    }  }  if ((inQuotes && !ignoreQuotations)) {    if (multi) {      sb.append('\n');      pending=sb.toString();      sb=null;    } else {      throw new IOException("Un-terminated quoted field at end of CSV line");    }    if (inField) {      fromQuotedField=true;    }  } else {    inField=false;  }  if (sb != null) {    tokensOnThisLine.add(convertEmptyToNullIfNeeded(sb.toString(),fromQuotedField));  }  return tokensOnThisLine.toArray(new String[tokensOnThisLine.size()]);}  }
class C{  protected void uninstallViewListeners(View p){  p.removePropertyChangeListener(viewListener);}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public static boolean isChunkVibrated(Chunk3D chunk){  for (  Coord4D coord : Mekanism.activeVibrators) {    if (coord.getChunk3D().equals(chunk)) {      return true;    }  }  return false;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.NULL_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void acc_divide(AccurateValue n2,AccurateValue quotient,AccurateValue remainder){  int i, idx;  String result;  int signResult=1;  AccurateValue n1=this.acc_copy();  n2=n2.acc_copy();  acc_align(n1,n2);  quotient.digits=new int[n1.digits.length + 1];  remainder.digits=new int[n1.digits.length + 1];  if (n2.acc_isZero()) {    System.err.println("ArithmeticException: Divide by Zero");    return;  } else   if (n1.acc_isZero()) {    return;  }  if (n1.sign != n2.sign) {    signResult=-1;  }  n1.sign=+1;  n2.sign=+1;  quotient.sign=signResult;  remainder.sign=signResult;  if (n2.acc_compareTo(n1) > 0) {    idx=remainder.digits.length - 1;    for (i=n1.digits.length - 1; i >= 0; i--) {      remainder.digits[idx]=n1.digits[i];      idx--;    }    return;  }  n1.acc_reduceInner();  n2.acc_reduceInner();  while (n2.acc_compareToFull(0,n2.digits.length,n1,0) > 0) {    n2.acc_expand();  }  result=acc_subProcess(n1,n2);  idx=result.indexOf("+");  if (idx == 0) {    for (i=0; i < quotient.digits.length; i++) {      quotient.digits[i]=0;    }    remainder.acc_pack(result);  } else {    String str1=result.substring(0,idx);    String str2=result.substring(idx + 1);    quotient.acc_pack(str1);    remainder.acc_pack(str2);  }  remainder.acc_reduceInner();  quotient.acc_reduceInner();  quotient.sign*=signResult;  if (remainder.sign != 0) {    remainder.sign=this.sign;  }}  }
class C{  public static String showInputDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {  return (String)showInputDialog(parentComponent,message,title,messageType,null,null,null);}  }
class C{  public void updateLeagueHistory(){  Collections.sort(teamList,new TeamCompPoll());  String[] yearTop10=new String[10];  Team tt;  for (int i=0; i < 10; ++i) {    tt=teamList.get(i);    yearTop10[i]=tt.abbr + " (" + tt.wins+ "-"+ tt.losses+ ")";  }  leagueHistory.add(yearTop10);}  }
class C{  public void restrictListenersToSessionNodes(){  this.sessionSupport=null;  this.sessionHandler=null;}  }
class C{  protected void sequence_Parameter(ISerializationContext context,msi.gama.lang.gaml.gaml.Parameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public EntryDestroyedException(String s,Throwable ex){  super(s,ex);}  }
class C{  public List<String> top(int n){  List<String> top=new ArrayList<>();  CategoryColumn copy=this.copy();  copy.sortDescending();  for (int i=0; i < n; i++) {    top.add(copy.get(i));  }  return top;}  }
class C{  public Builder entities(List<Entity> entities){  this.entities=entities;  return this;}  }
class C{  void offline(){  if (!disconnected && !cleanSession) {    Exception e=new Exception("Android offline");    connectionLost(e);  }}  }
class C{  public void testMixedQueries(){  final String TEST_GROUP_1="query ";  final String TEST_GROUP_2="test ";  final String TEST_LINE2="line2 ";  final int GROUP_COUNT=10;  writeEntries(GROUP_COUNT,TEST_GROUP_1,TEST_LINE2);  writeEntries(GROUP_COUNT,TEST_GROUP_2,TEST_LINE2);  checkOpenCursorCount(2 * GROUP_COUNT);  checkResultCounts(TEST_GROUP_1,GROUP_COUNT,GROUP_COUNT,null,null);  checkResultCounts(TEST_GROUP_2,GROUP_COUNT,GROUP_COUNT,null,null);  checkResultCounts(TEST_LINE2,2 * GROUP_COUNT,2 * GROUP_COUNT,null,null);}  }
class C{  public final void testSetValidator(){  Validator<Object> validator=new AbstractValidatorImplementation("foo",true);  NegateValidator<Object> negateValidator=new NegateValidator<>("foo",new AbstractValidatorImplementation("bar",false));  negateValidator.setValidator(validator);  assertEquals(validator,negateValidator.getValidator());}  }
class C{  public static XMLObjectWriter newInstance(Writer out) throws XMLStreamException {  XMLObjectWriter writer=new XMLObjectWriter();  writer.setOutput(out);  return writer;}  }
class C{  public static void main(String[] args){  runEvaluator(new InfoGainAttributeEval(),args);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DelayabilityAnalysis(DirectedGraph dg,EarliestnessComputation earliest,Map equivRhsMap){  this(dg,earliest,equivRhsMap,new ArrayPackedSet(new CollectionFlowUniverse(equivRhsMap.values())));}  }
class C{  @Override public XMLEvent nextTag() throws XMLStreamException {  log.log(Level.FINE,"nextTag()");  XMLEvent event=this.nextEvent();  while (!(event instanceof EndElement) && !(event instanceof StartElement)) {    if (event instanceof Characters) {      Characters chars=(Characters)event;      if (!chars.isIgnorableWhiteSpace()) {        throw new XMLStreamException("Non-ignorable CHARACTERS found!");      }    }  }  log.log(Level.FINE,"nextTag(): {0}",event);  return event;}  }
class C{  public Name addAll(int posn,Name suffix) throws InvalidNameException {  unparsed=null;  if (suffix instanceof LdapName) {    LdapName s=(LdapName)suffix;    rdns.addAll(posn,s.rdns);  } else {    Enumeration<String> comps=suffix.getAll();    while (comps.hasMoreElements()) {      rdns.add(posn++,(new Rfc2253Parser(comps.nextElement()).parseRdn()));    }  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.104 -0500",hash_original_method="22330635CB403C3ADB4BC9A546866054",hash_generated_method="CF14B3DEA7D6CA29CBA2485ECD24310A") @Deprecated public void trackExternalFree(long size){}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (mJournalWriter != null) {    mJournalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(mJournalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(mAppVersion));  writer.write("\n");  writer.write("\n");  for (  CacheEntry cacheEntry : mLruEntries.values()) {    if (cacheEntry.isUnderEdit()) {      writer.write(sACTION_LIST[ACTION_DIRTY] + ' ' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ '\n');    } else {      writer.write(sACTION_LIST[ACTION_CLEAN] + ' ' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ '\n');    }  }  writer.close();  mJournalFileTmp.renameTo(mJournalFile);  mJournalWriter=new BufferedWriter(new FileWriter(mJournalFile,true),IO_BUFFER_SIZE);}  }
class C{  public GsonBuilder generateNonExecutableJson(){  this.generateNonExecutableJson=true;  return this;}  }
class C{  public PredictiveInfoCalculatorViaMutualInfo(String miCalculatorClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  @SuppressWarnings("unchecked") Class<MutualInfoCalculatorMultiVariate> miClass=(Class<MutualInfoCalculatorMultiVariate>)Class.forName(miCalculatorClassName);  MutualInfoCalculatorMultiVariate miCalc=miClass.newInstance();  construct(miCalc);}  }
class C{  public boolean isDrawCubicEnabled(){  return mDrawCubic;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.746 -0500",hash_original_method="723583A81B93D8753154A40B95765CF8",hash_generated_method="38A63EEC2A6796D02AEF351E230EEF19") private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  @Description(summary="Compile and run all tests (excluding the compile step).") public void test(){  test(false);}  }
class C{  private void initCircleCropWindow(@NonNull RectF bitmapRect){  mOffset=0.1f * Math.min(bitmapRect.width(),bitmapRect.height());  mDrawableWidth=bitmapRect.width();  mDrawableHeight=bitmapRect.height();  mCenterPointX=mDrawableWidth / 2.0f;  mCenterPointY=mDrawableHeight / 2.0f;  mRadius=(Math.min(mDrawableWidth,mDrawableHeight) - mOffset) / 2.0f;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.970 -0500",hash_original_method="DC2799CF7E851187E8911CC07ABDB302",hash_generated_method="AE851C4DDB9B7D0AB27D748CDE20FEDB") @DSSpec(DSCat.IO) public static byte[] sha256(InputStream data) throws IOException {  return digest(getSha256Digest(),data);}  }
class C{  public JToggleButton(String text,Icon icon,boolean selected){  setModel(new ToggleButtonModel());  model.setSelected(selected);  init(text,icon);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mmt";  String parameter="2.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private List<Year> parseYears(String value){  List<Year> years=new LinkedList<Year>();  for (  DateTimeFormatter df : docDateFormats) {    try {      Year year=Year.parse(value,df);      years.add(year);    } catch (    DateTimeParseException e) {      getMonitor().debug("Unable to parse date '{}' with format {}",value,df.toString());      getMonitor().trace("Parse exception thrown whilst parsing date",e);    }  }  return years;}  }
class C{  public static IKeyBuilder newInstance(){  return newInstance(DEFAULT_INITIAL_CAPACITY);}  }
class C{  public AuthorityKeyIdentifier(SubjectPublicKeyInfo spki,GeneralNames name,BigInteger serialNumber){  Digest digest=AndroidDigestFactory.getSHA1();  byte[] resBuf=new byte[digest.getDigestSize()];  byte[] bytes=spki.getPublicKeyData().getBytes();  digest.update(bytes,0,bytes.length);  digest.doFinal(resBuf,0);  this.keyidentifier=new DEROctetString(resBuf);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public final AC noGrid(){  return noGrid(curIx);}  }
class C{  public double compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public static Coordinate[] removeNull(Coordinate[] coord){  int nonNull=0;  for (int i=0; i < coord.length; i++) {    if (coord[i] != null)     nonNull++;  }  Coordinate[] newCoord=new Coordinate[nonNull];  if (nonNull == 0)   return newCoord;  int j=0;  for (int i=0; i < coord.length; i++) {    if (coord[i] != null)     newCoord[j++]=coord[i];  }  return newCoord;}  }
class C{  public static void error(ErrorMessages message,File file){  errors++;  err(NL + "Error: " + ErrorMessages.get(message)+ " ("+ file+ ")");}  }
class C{  public void onPause(boolean multitasking){}  }
class C{  Blob(byte[] data,ResultSetInternalMethods creatorResultSetToSet,int columnIndexToSet){  setBinaryData(data);}  }
class C{  public SmellSource(final double[] distalstim,final DecayFunction decay,final double[] location){  this.stimulusVector=distalstim;  this.decayFunction=decay;  this.location=location;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void checkRowDoesntExist(String sql) throws Exception {  Statement s=this.conn.createStatement();  ResultSet rs=s.executeQuery(sql);  assertFalse("Row should not exist",rs.next());  rs.close();  s.close();}  }
class C{  public DriverTask deleteConsistencyGroup(VolumeConsistencyGroup volumeConsistencyGroup){  DellSCDriverTask task=new DellSCDriverTask("deleteVolume");  try {    StorageCenterAPI api=connectionManager.getConnection(volumeConsistencyGroup.getStorageSystemId());    ScReplayProfile[] cgs=api.getConsistencyGroups(volumeConsistencyGroup.getStorageSystemId());    for (    ScReplayProfile cg : cgs) {      if (cg.instanceId.equals(volumeConsistencyGroup.getNativeId())) {        api.deleteConsistencyGroup(cg.instanceId);        break;      }    }    task.setStatus(TaskStatus.READY);  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error deleting CG %s: %s",volumeConsistencyGroup.getDisplayName(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  public static void isValidDateRange(Date fromDate,Date toDate) throws ValidationException {  if (fromDate.after(toDate)) {    Object[] params={"From: " + fromDate.toString(),"To: " + toDate.toString()};    ValidationException vf=new ValidationException(ReasonEnum.INVALID_DATE_RANGE,null,params);    logValidationFailure(vf);    throw vf;  }}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role info name: " + name);  result.append("; isReadable: " + isReadable);  result.append("; isWritable: " + isWritable);  result.append("; description: " + description);  result.append("; minimum degree: " + minDegree);  result.append("; maximum degree: " + maxDegree);  result.append("; MBean class: " + referencedMBeanClassName);  return result.toString();}  }
class C{  @Override public boolean onPreferenceClick(Preference preference){  if (preference == mPlayExample) {    getSampleText();    return true;  }  return false;}  }
class C{  private void ok(){  Filter filter=null;  try {    filter=filterEditor.createFilter();  } catch (  FilterEditorException e) {    JOptionPane.showInternalMessageDialog(this,"Cannot create filter",e.getMessage(),JOptionPane.ERROR_MESSAGE);    filters.requestFocus();  }  for (  Sensor sensor : sensors) {    sensor.setFilter(filter);  }  setVisible(false);}  }
class C{  public static Number wrapNumber(final double n,final boolean integer){  if (integer) {    return (long)n;  } else {    return n;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:57.207 -0500",hash_original_method="4EE79409E957004105525310D650EB01",hash_generated_method="529539D458B0DF619AD23836E4AF8D3C") static State stateFromDCState(DriverCall.State dcState){switch (dcState) {case ACTIVE:    return State.ACTIVE;case HOLDING:  return State.HOLDING;case DIALING:return State.DIALING;case ALERTING:return State.ALERTING;case INCOMING:return State.INCOMING;case WAITING:return State.WAITING;default :throw new RuntimeException("illegal call state:" + dcState);}}  }
class C{  public Node buildTreeGrow(Node node,int depth){  if (depth == 0) {    return node.copyNode();  } else {    Node copy=node.copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      if (node.getArgument(i) == null) {        copy.setArgument(i,buildTreeGrow(node.getArgumentType(i),depth - 1));      } else {        copy.setArgument(i,buildTreeGrow(node.getArgument(i),depth - 1));      }    }    return copy;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode18.class,args);}  }
class C{  public static boolean isStaticSelector(JCTree base,Names names){  if (base == null)   return false;switch (base.getTag()) {case IDENT:    JCIdent id=(JCIdent)base;  return id.name != names._this && id.name != names._super && isStaticSym(base);case SELECT:return isStaticSym(base) && isStaticSelector(((JCFieldAccess)base).selected,names);case TYPEAPPLY:case TYPEARRAY:return true;case ANNOTATED_TYPE:return isStaticSelector(((JCAnnotatedType)base).underlyingType,names);default :return false;}}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end){  int len=end - start;  Object o=in[start];  if (NumberComparator.isNumber(o)) {    mergeSort(in,out,start,end,NumberComparator.createComparator(o.getClass()));    return;  }  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      java.lang.Comparable<Object> current=(java.lang.Comparable<Object>)out[i];      Object prev=out[i - 1];      if (current.compareTo(prev) < 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && current.compareTo(prev=out[j - 1]) < 0);        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med);  mergeSort(out,in,med,end);  if (((java.lang.Comparable<Object>)in[med - 1]).compareTo(in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    java.lang.Comparable<Object> fromVal=(java.lang.Comparable<Object>)in[start];    java.lang.Comparable<Object> rVal=(java.lang.Comparable<Object>)in[r];    if (fromVal.compareTo(rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  public String explain(boolean multiline,Schema schema){  return explain(multiline,"",schema);}  }
class C{  public boolean visit(CopyTargetEdit edit){  return visitNode(edit);}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathValidatorException {  try {    CertPathValidator.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertPathValidator.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathValidator.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertPathValidator cerPV;  for (int i=0; i < validValues.length; i++) {    cerPV=CertPathValidator.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPV.getProvider().getName(),mProv.getName());    checkResult(cerPV);  }}  }
class C{  protected int sp2px(int spVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,spVal,getResources().getDisplayMetrics());}  }
class C{  public String formatSQL(Object obj,Object expr){  String sql=null;  if (expr instanceof String) {    sql=(String)expr;    if (log.isLoggable(Level.FINEST)) {      log.finest("SQL retrieved from state = " + sql);    }  } else   if (obj != null) {    sql=toString(obj);    if (sql != null) {      if (sql.startsWith("prep")) {        sql=sql.replaceFirst("prep[0-9]*: ","");      }      sql=sql.replaceAll("X'.*'",BINARY_SQL_MARKER);    }    if (log.isLoggable(Level.FINEST)) {      log.finest("SQL derived from context = " + sql);    }  }  return sql;}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public String readString(){  int len=readVarInt();  return readString(len);}  }
class C{  private boolean invokeFunction(String name,Object... cmd){  for (  EngineInfo engine : engines) {    try {      Object result=engine.getEngine().invokeFunction(name,cmd);      if (null != result && result instanceof Boolean) {        if (!((Boolean)result).booleanValue()) {          return false;        }      }    } catch (    ScriptException|NoSuchMethodException e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to invoke function " + name + " in script: "+ engine.getScriptFile().getFileName()+ ": "+ e.getMessage(),e);    }  }  return true;}  }
class C{  public boolean createEmptyMarkup(){  return writeMarkup(null);}  }
class C{  public static QuarkMetaResultSet count(String connectionId,int statementId,int updateCount){  return new QuarkMetaResultSet(connectionId,statementId,true,null,null,updateCount);}  }
class C{  private void checkKernel(Car car) throws BuildFailedException {  boolean foundLeadCar=false;  for (  Car c : car.getKernel().getCars()) {    if (c.getKernel().isLead(c) && !c.isOutOfService()) {      foundLeadCar=true;    }    if (car.getLocation() != c.getLocation() || car.getTrack() != c.getTrack()) {      throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorCarKernelLocation"),new Object[]{c.toString(),car.getKernelName(),car.toString()}));    }  }  if (foundLeadCar == false) {    throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorCarKernelNoLead"),new Object[]{car.getKernelName()}));  }}  }
class C{  public KernelPCA(KernelTrick k,int dimensions,int basisSize,Nystrom.SamplingMethod samplingMethod){  setDimensions(dimensions);  setKernel(k);  setBasisSize(basisSize);  setBasisSamplingMethod(samplingMethod);}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new SparseDoubleMatrix2D(rows,columns);}  }
class C{  public void clear(){  for (int i=0; i < segments.length; ++i)   segments[i].clear();}  }
class C{  public static <U,I>Function<U,IntPredicate> notInTrain(FastPreferenceData<U,I> trainData){  return null;}  }
class C{  @Override public V putIfAbsent(final K s,final V v){  return this.arc[getPartition(s)].putIfAbsent(s,v);}  }
class C{  private final boolean calculateNextBMPElement(Element element){  int currentBlock=m_nextBlock_;  int currentValue=m_nextValue_;  m_currentCodepoint_=m_nextCodepoint_;  m_nextCodepoint_++;  m_nextBlockIndex_++;  if (!checkBlockDetail(currentValue)) {    setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);    return true;  }  while (m_nextCodepoint_ < UCharacter.SUPPLEMENTARY_MIN_VALUE) {    m_nextIndex_++;    if (m_nextCodepoint_ == LEAD_SURROGATE_MIN_VALUE_) {      m_nextIndex_=BMP_INDEX_LENGTH_;    } else     if (m_nextCodepoint_ == TRAIL_SURROGATE_MIN_VALUE_) {      m_nextIndex_=m_nextCodepoint_ >> Trie.INDEX_STAGE_1_SHIFT_;    }    m_nextBlockIndex_=0;    if (!checkBlock(currentBlock,currentValue)) {      setResult(element,m_currentCodepoint_,m_nextCodepoint_,currentValue);      return true;    }  }  m_nextCodepoint_--;  m_nextBlockIndex_--;  return false;}  }
class C{  public Object key(){  return s[0] + ":" + s[1];}  }
class C{  public static void frustumM(double[] m,int offset,double left,double right,double bottom,double top,double near,double far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (top == bottom) {    throw new IllegalArgumentException("top == bottom");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  if (near <= 0.0) {    throw new IllegalArgumentException("near <= 0.0");  }  if (far <= 0.0) {    throw new IllegalArgumentException("far <= 0.0");  }  final double r_width=1.0 / (right - left);  final double r_height=1.0 / (top - bottom);  final double r_depth=1.0 / (near - far);  final double x=2.0 * (near * r_width);  final double y=2.0 * (near * r_height);  final double A=(right + left) * r_width;  final double B=(top + bottom) * r_height;  final double C=(far + near) * r_depth;  final double D=2.0 * (far * near * r_depth);  m[offset + 0]=x;  m[offset + 5]=y;  m[offset + 8]=A;  m[offset + 9]=B;  m[offset + 10]=C;  m[offset + 14]=D;  m[offset + 11]=-1.0;  m[offset + 1]=0.0;  m[offset + 2]=0.0;  m[offset + 3]=0.0;  m[offset + 4]=0.0;  m[offset + 6]=0.0;  m[offset + 7]=0.0;  m[offset + 12]=0.0;  m[offset + 13]=0.0;  m[offset + 15]=0.0;}  }
class C{  @Override public double calculateAnomalyScore(double value){  double probabilityDensity=(1.0 / Math.sqrt(2.0 * Math.PI * variance)) * Math.exp((-1.0 * Math.pow((value - mean),2.0)) / (2.0 * variance));  if (probabilityDensity == 0.0) {    throw new ArithmeticException("Cannot take the log of 0.");  }  return -1.0 * Math.log(probabilityDensity);}  }
