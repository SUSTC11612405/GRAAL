class C{  public static TransitSchedule mergeSimilarRoutes(TransitSchedule transitScheduleOrig){  printStatistic(transitScheduleOrig);  TransitScheduleFactory transitScheduleFactory=transitScheduleOrig.getFactory();  TransitSchedule transitSchedule=transitScheduleFactory.createTransitSchedule();  for (  TransitStopFacility stop : transitScheduleOrig.getFacilities().values()) {    transitSchedule.addStopFacility(stop);  }  for (  TransitLine oldLine : transitScheduleOrig.getTransitLines().values()) {    TransitLine newLine=mergeTransitLine(transitScheduleFactory,oldLine);    transitSchedule.addTransitLine(newLine);  }  printStatistic(transitSchedule);  return transitSchedule;}  }
class C{  public static boolean isVolumeInIngestedCG(Volume volume,DbClient dbClient){  boolean result=false;  URI cgUri=volume.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgUri)) {    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    if (cg != null) {      if (!cg.getTypes().contains(Types.LOCAL.toString()) && !cg.getTypes().contains(Types.SRDF.toString())) {        result=true;      }    }  }  return result;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static boolean isGaussianBlurSupported(){  return Display.getInstance().isGaussianBlurSupported();}  }
class C{  private final int rotatedPixel(int x,int y){  double tx=-(cx - x);  double ty=-(cy - y);  double rx=cos * tx - sin * ty;  double ry=cos * ty + sin * tx;  return pixelBilinear(rx + cx,ry + cy);}  }
class C{  public static void deleteProject(final AbstractSQLProvider provider,final INaviProject project) throws CouldntDeleteException {  checkArguments(provider,project);  NaviLogger.info("Deleting project %s",project.getConfiguration().getName());  PostgreSQLHelpers.deleteById(provider.getConnection(),CTableNames.PROJECTS_TABLE,project.getConfiguration().getId());}  }
class C{  private static String codegenCompiledLocales(String[] locales){  StringJoiner.ItemStringer itemStringer=new StringJoiner.ItemQuoter();  return "[ " + StringJoiner.join(locales,", ",itemStringer) + " ]";}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  Comparator c=(Comparator)s.readObject();  m=(c == null ? new TreeMap() : new TreeMap(c));  keySet=m.keySet();  int size=s.readInt();  ((TreeMap)m).readTreeSet(size,s,PRESENT);}  }
class C{  private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){  Map<URI,ExportMask> exportMaskMap=new HashMap<>();  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);  while (exportMaskIterator.hasNext()) {    ExportMask exportMask=exportMaskIterator.next();    exportMaskMap.put(exportMask.getId(),exportMask);  }  return exportMaskMap;}  }
class C{  private void putEntry(String key,CacheHeader entry){  mEntries.put(key,entry);}  }
class C{  private void writeStartMask(int mask) throws IOException {  if (mask != 0) {    if ((mask & UNDERLINE) != 0) {      write("<u>");    }    if ((mask & ITALIC) != 0) {      write("<i>");    }    if ((mask & BOLD) != 0) {      write("<b>");    }  }}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  MWMInOutBoundLine[] lines=getLines(true,MWMInOutBoundLine.COLUMNNAME_Line);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  if (getDeliveryRule() != null && getDeliveryRule().equals(MWMInOutBound.DELIVERYVIARULE_Delivery)) {    for (    MWMInOutBoundLine line : lines) {      MProduct product=line.getMProduct();      if (product != null && product.isExcludeAutoDelivery()) {        m_processMsg="@M_Product_ID@ " + product.getValue() + " @IsExcludeAutoDelivery@";        return DocAction.STATUS_Invalid;      }    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  public void addChar(char c){  addChar(defaultFace,c);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.176 -0400",hash_original_method="754F09391C9F58E67CB8193278068D67",hash_generated_method="1362B898D3AA3C428EE7562F5674E6C8") protected void handleDirectoryEnd(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  private void resetStatus(boolean adding){  if (front == rear) {    status=adding ? DequeStatus.Full : DequeStatus.Empty;  } else {    status=DequeStatus.Normal;  }}  }
class C{  public RequestCreator resizeDimen(int targetWidthResId,int targetHeightResId){  Resources resources=picasso.context.getResources();  int targetWidth=resources.getDimensionPixelSize(targetWidthResId);  int targetHeight=resources.getDimensionPixelSize(targetHeightResId);  return resize(targetWidth,targetHeight);}  }
class C{  public Enumeration<Permission> permissions(){  return permList.elements();}  }
class C{  private ObjectInfo selectObject(final int type) throws DeviceDisconnectedException, DfuException, UploadAbortedException, RemoteDfuException, UnknownResponseException {  if (!mConnected)   throw new DeviceDisconnectedException("Unable to read object info: device disconnected");  OP_CODE_SELECT_OBJECT[1]=(byte)type;  writeOpCode(mControlPointCharacteristic,OP_CODE_SELECT_OBJECT);  final byte[] response=readNotificationResponse();  final int status=getStatusCode(response,OP_CODE_SELECT_OBJECT_KEY);  if (status != DFU_STATUS_SUCCESS)   throw new RemoteDfuException("Selecting object failed",status);  final ObjectInfo info=new ObjectInfo();  info.maxSize=mControlPointCharacteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32,3);  info.offset=mControlPointCharacteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32,3 + 4);  info.CRC32=mControlPointCharacteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32,3 + 8);  return info;}  }
class C{  public MethodDeclarationMatch(IJavaElement element,int accuracy,int offset,int length,SearchParticipant participant,IResource resource){  super(element,accuracy,offset,length,participant,resource);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SSOLVE;}  }
class C{  public static Date date(final String immCode,final Date refDate){  QL.require(isIMMcode(immCode,false),"not a valid IMM code");  Date referenceDate;  if (refDate.isNull()) {    referenceDate=new Settings().evaluationDate();  } else {    referenceDate=refDate;  }  final char code=immCode.charAt(0);  final Month m=Month.valueOf(code);  int y=immCode.charAt(1) - '0';  if (y == 0 && referenceDate.year() <= 1909) {    y+=10;  }  final int yMod=(referenceDate.year() % 10);  y+=referenceDate.year() - yMod;  final Date result=nextDate(new Date(1,m,y),false);  if (result.lt(referenceDate)) {    return nextDate(new Date(1,m,y + 10),false);  }  return result;}  }
class C{  public CalendarIntervalTriggerImpl(String name,String group,IntervalUnit intervalUnit,int repeatInterval){  this(name,group,new Date(),null,intervalUnit,repeatInterval);}  }
class C{  public Hours toStandardHours(){  long hours=getStandardHours();  return Hours.hours(FieldUtils.safeToInt(hours));}  }
class C{  public Object clone(){  AclEntryImpl i;  try {    i=new AclEntryImpl(this);  } catch (  UnknownHostException e) {    i=null;  }  return (Object)i;}  }
class C{  public void removePostDial(){  parameters.delete(POSTDIAL);}  }
class C{  public BufferedReader(Reader in,int sz){  super(in);  if (sz <= 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.in=in;  cb=new char[sz];  nextChar=nChars=0;}  }
class C{  protected int available() throws IOException {  return getInputStream().available();}  }
class C{  public void autonomousPeriodic(){  if (apFirstRun) {    System.out.println("NerdyIterativeRobot IterativeRobot.autonomousPeriodic() method... Overload me!");    apFirstRun=false;  }  Timer.delay(0.001);}  }
class C{  public long end_data(){  return Long.parseLong(fields[45]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:02.379 -0500",hash_original_method="FB185B7C2F06925C4BFCD27CA8D3CCFA",hash_generated_method="54EA4035BADA299A0CB903894C3D5048") public void writeToParcel(Parcel dest,int flags){  dest.writeByte(groupFormed ? (byte)1 : (byte)0);  dest.writeByte(isGroupOwner ? (byte)1 : (byte)0);  if (groupOwnerAddress != null) {    dest.writeByte((byte)1);    dest.writeByteArray(groupOwnerAddress.getAddress());  } else {    dest.writeByte((byte)0);  }}  }
class C{  protected void addContentTypeRequestHeader(final HttpState state,final HttpConnection conn) throws IOException, HttpException {  LOG.trace("enter EntityEnclosingMethod.addContentTypeRequestHeader(" + "HttpState, HttpConnection)");  if (!parameters.isEmpty()) {    final StringBuffer buffer=new StringBuffer(MULTIPART_FORM_CONTENT_TYPE);    if (Part.getBoundary() != null) {      buffer.append("; boundary=");      buffer.append(Part.getBoundary());    }    setRequestHeader("Content-Type",buffer.toString());  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,String[] args,String configFilePath) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,args,false,configFilePath);}  }
class C{  private ShardRequest createShardRequest(final ResponseBuilder rb,final List<String> ids){  final ShardRequest sreq=new ShardRequest();  sreq.purpose=1;  sreq.params=new ModifiableSolrParams(rb.req.getParams());  sreq.params.set(ShardParams.SHARDS_QT,"/get");  sreq.params.set("distrib",false);  sreq.params.remove(ShardParams.SHARDS);  sreq.params.remove("id");  sreq.params.remove("ids");  sreq.params.set("ids",StrUtils.join(ids,','));  return sreq;}  }
class C{  public double doubleValue(){  assertDefined();  return m_value.doubleValue();}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public boolean isOpaque(SynthContext ss){  return opaque;}  }
class C{  public DiskWriteAttributesImpl(Properties properties){  String isSynchronousString=properties.getProperty(SYNCHRONOUS_PROPERTY);  if (isSynchronousString == null) {    this.isSynchronous=DEFAULT_IS_SYNCHRONOUS;  } else {    verifyBooleanString(isSynchronousString,SYNCHRONOUS_PROPERTY);    this.isSynchronous=Boolean.valueOf(isSynchronousString).booleanValue();  }  String compactOplogsString=properties.getProperty(CacheXml.ROLL_OPLOG);  if (compactOplogsString == null) {    this.compactOplogs=DEFAULT_ROLL_OPLOGS;  } else {    verifyBooleanString(compactOplogsString,CacheXml.ROLL_OPLOG);    this.compactOplogs=Boolean.valueOf(compactOplogsString).booleanValue();  }  String bytesThresholdString=properties.getProperty(CacheXml.BYTES_THRESHOLD);  if (bytesThresholdString != null) {    if (this.isSynchronous) {    }    this.bytesThreshold=verifyLongInString(bytesThresholdString,CacheXml.BYTES_THRESHOLD);  } else {    this.bytesThreshold=0L;  }  String timeIntervalString=properties.getProperty(CacheXml.TIME_INTERVAL);  if (timeIntervalString != null) {    if (this.isSynchronous) {    }    this.timeInterval=verifyLongInString(timeIntervalString,CacheXml.TIME_INTERVAL);  } else {    if (!this.isSynchronous && this.bytesThreshold == 0) {      this.timeInterval=DiskWriteAttributesImpl.DEFAULT_TIME_INTERVAL;    } else {      this.timeInterval=0;    }  }  String maxOplogSizeString=properties.getProperty(CacheXml.MAX_OPLOG_SIZE);  if (maxOplogSizeString != null) {    long opSize=verifyLongInString(maxOplogSizeString,CacheXml.MAX_OPLOG_SIZE);    if (opSize == 0 && this.compactOplogs == true) {      throw new IllegalStateException(LocalizedStrings.DiskWriteAttributesImpl_COMPACTION_CANNOT_BE_SET_TO_TRUE_IF_MAXOPLOGSIZE_IS_SET_TO_INFINITE_INFINITE_IS_REPRESENTED_BY_SIZE_ZERO_0.toLocalizedString());    }    if (opSize == 0 || opSize == DEFAULT_MAX_OPLOG_SIZE_LIMIT) {      if (this.compactOplogs) {        throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_CANNOT_SET_MAXOPLOGS_SIZE_TO_INFINITY_0_IF_COMPACTION_IS_SET_TO_TRUE.toLocalizedString());      } else {        this.maxOplogSize=DEFAULT_MAX_OPLOG_SIZE_LIMIT;      }    } else {      this.maxOplogSize=opSize;    }  } else {    this.maxOplogSize=DEFAULT_MAX_OPLOG_SIZE;  }}  }
class C{  public DefaultWaypointRenderer(){  try {    img=ImageIO.read(getClass().getResource("resources/standard_waypoint.png"));  } catch (  Exception ex) {    mLog.error("couldn't read standard_waypoint.png",ex);  }}  }
class C{  @Override public long longValue(){  return (long)value;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof PageAttributes)) {    return false;  }  PageAttributes rhs=(PageAttributes)obj;  return (color == rhs.color && media == rhs.media && orientationRequested == rhs.orientationRequested && origin == rhs.origin && printQuality == rhs.printQuality && printerResolution[0] == rhs.printerResolution[0] && printerResolution[1] == rhs.printerResolution[1] && printerResolution[2] == rhs.printerResolution[2]);}  }
class C{  public HighlightBuilder highlighterType(String highlighterType){  this.highlighterType=highlighterType;  return this;}  }
class C{  private String uploadCloudId(Context context){  int retries=5;  for (int i=0; i < retries; i++) {    try {      String id=InstanceID.getInstance(context).getToken(PROJECT_ID,INSTANCE_ID_SCOPE);      Boolean synced=Server.syncCloudId(id);      if (synced != null) {        return synced ? id : null;      }    } catch (    IOException e) {      Log.e(TAG,"getting GCM token",e);      exception(e);    }    if (i + 1 < retries) {      SystemClock.sleep((1 << i) * 1000);      event("gms","gcm token retry",i + 1);    } else {      event("gms","couldn't get gcm token after retries",retries);    }  }  return null;}  }
class C{  private void loadDBVendor(){  s_logger.log(Level.FINE,"loadDBVendor",getDirection());  String result=null;  try {    result=m_connection.getMetaData().getDatabaseProductName();  } catch (  SQLException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"loadDBVendorError",new Object[]{getDirection(),e.getMessage()});  }  setVendor(result);  s_logger.log(Level.FINE,"dbVendorLoaded",new Object[]{getDirection(),result});  s_logger.flush();}  }
class C{  public synchronized void end(){  super.end();  this.trimEdits(indexOfNextAdd,edits.size() - 1);}  }
class C{  public static JCalValue multi(Object... values){  return multi(Arrays.asList(values));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GCTraceSet(){}  }
class C{  public final double doOperation() throws OperatorFailedException {  final int dim=parameter.getDimension();  final int dim1=MathUtils.nextInt(dim);  int dim2=dim1;  while (dim1 == dim2) {    dim2=MathUtils.nextInt(dim);  }  double scalar1=parameter.getParameterValue(dim1);  double scalar2=parameter.getParameterValue(dim2);  final double d=MathUtils.nextDouble() * delta * scalar1;  scalar1-=d;  if (parameterWeights[dim1] != parameterWeights[dim2]) {    scalar2+=d * (double)parameterWeights[dim1] / (double)parameterWeights[dim2];  } else {    scalar2+=d;  }  parameter.setParameterValue(dim1,scalar1);  parameter.setParameterValue(dim2,scalar2);  return Math.log(scalar2 / (scalar1 + d));}  }
class C{  public static String addressesAsString(ClusterNode node){  return addressesAsString(node.addresses(),node.hostNames());}  }
class C{  public void showMachines(){  showMachines(appContext.getWorkspace());}  }
class C{  public static void main(String[] argv){  runFilter(new NonSparseToSparse(),argv);}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  protected void render(Graphics2D g){  g.setColor(Color.WHITE);  g.fillRect(-400,-300,800,600);  g.translate(0.0,-1.0 * SCALE);  for (int i=0; i < this.world.getBodyCount(); i++) {    GameObject go=(GameObject)this.world.getBody(i);    go.render(g);  }}  }
class C{  public void copyResource(String resourceName,File destFile,FilterChain filterChain,String encoding) throws IOException {  copyResource(resourceName,destFile.getPath(),defaultFileHandler,filterChain,encoding);}  }
class C{  @Override public void trim(){}  }
class C{  private static void copyFile(Path srcFile,Path destFile) throws IOException {  String[] copyArgs={"-cp",srcFile.toString(),destFile.toString()};  FsShell shell=new FsShell();  try {    LOG.debug("Using shell to copy with args " + Arrays.asList(copyArgs));    ToolRunner.run(shell,copyArgs);  } catch (  Exception e) {    throw new IOException(e);  } finally {    shell.close();  }}  }
class C{  synchronized public double nextGaussian(){  if (__haveNextNextGaussian) {    __haveNextNextGaussian=false;    return __nextNextGaussian;  } else {    double v1, v2, s;    do {      v1=2 * nextDouble() - 1;      v2=2 * nextDouble() - 1;      s=v1 * v1 + v2 * v2;    } while (s >= 1 || s == 0);    double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);    __nextNextGaussian=v2 * multiplier;    __haveNextNextGaussian=true;    return v1 * multiplier;  }}  }
class C{  public ParameterFile(Reader reader) throws IOException {  super();  if (reader instanceof CommentedLineReader) {    parameters=load((CommentedLineReader)reader);  } else {    parameters=load(new CommentedLineReader(reader));  }}  }
class C{  public String toString(){  return name;}  }
class C{  public int deleteBack(){  return 0;}  }
class C{  public static String[] computeAsyncParameterTypes(IMethod syncMethod) throws RemoteServiceException {  List<String> parameters=new ArrayList<String>();  for (  String parameterSig : syncMethod.getParameterTypes()) {    parameters.add(resolveToQualifiedErasure(syncMethod.getDeclaringType(),parameterSig));  }  return computeAsyncParameterTypes(parameters);}  }
class C{  public static float memToPhys(long value,int cnvID){  return (cnvFactors[cnvID][cnvSystem].memToPhys(value).floatValue());}  }
class C{  @SuppressWarnings("unused") public boolean isRebalanceClusterClients(){  return this.rebalanceClusterClients;}  }
class C{  public void test_MultipleAccessToOneTable() throws SQLException {  for (int i=0; i < numThreads; i++) {    threadPool.runTask(createTask1(i));  }}  }
class C{  public void focusWithoutAnimation(){  mEditText.setHint(null);  mLabel.setVisibility(View.VISIBLE);  mEditText.requestFocus();}  }
class C{  public static char MGRSZoneToUTMZone(char mgrsZone){  if (Character.toUpperCase(mgrsZone) >= 'N') {    return 'N';  } else {    return 'S';  }}  }
class C{  public ClassNode popEnclosingClassNode(){  return enclosingClassNodes.removeFirst();}  }
class C{  public NotIsolatedAnalysis(DirectedGraph dg,LatestComputation latest,Map equivRhsMap,BoundedFlowSet set){  super(dg);  this.set=set;  unitToGen=equivRhsMap;  unitToLatest=latest;  doAnalysis();}  }
class C{  public LinearRulePanel(){  this.add(tabbedPane);  JTextField slopeField=createTextField(null,null);  JTextField biasField=createTextField(null,null);  mainTab.addItem("Slope",slopeField);  mainTab.addItem("Bias",biasField);  mainTab.addItem("Add noise",this.getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");}  }
class C{  public static Days daysBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalDate && end instanceof LocalDate) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int days=chrono.days().getDifference(((LocalDate)end).getLocalMillis(),((LocalDate)start).getLocalMillis());    return Days.days(days);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Days.days(amount);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET:    return getTarget();case N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX:  return getIndex();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void processLocally(final DM dm){  basicProcess(dm);}  }
class C{  public String toString(){  return getClass() + "{branchingFactor=" + m+ ", nentries="+ nentries+ ", height="+ height+ ", nnodes="+ nnodes+ ", nleaves="+ nleaves+ "}";}  }
class C{  public ConfigHelper(Class<D> destinationClass,Class<S> sourceClass,String xml){  this(destinationClass,sourceClass,xmlToXStream(xml));}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.814 -0500",hash_original_method="84FF2A14EA759DC7C1F299809C55E832",hash_generated_method="F6B2AA4C452966F0A0FC1D5FF2BE0A93") public String(char[] data){  this(data,0,data.length);}  }
class C{  public int toStartPc(int line){  int n=tableLength();  for (int i=0; i < n; ++i)   if (line == lineNumber(i))   return startPc(i);  return -1;}  }
class C{  public SecretKeySpec(byte[] key,int offset,int len,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (len < 0 || offset < 0) {    throw new ArrayIndexOutOfBoundsException("len < 0 || offset < 0");  }  if (key.length - offset < len) {    throw new IllegalArgumentException("key too short");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[len];  System.arraycopy(key,offset,this.key,0,len);}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<string>");  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    if (b < 16)     xml.append('0');    xml.append(Integer.toHexString(b));  }  xml.append("</string>");}  }
class C{  @Override public int compareTo(NewSplitEmittedTerm term2){  int result;  if ((result=term.compareTo(term2.getTerm())) != 0)   return result;  if ((result=splitno - term2.getSplitno()) != 0)   return result;  return flushno - term2.getFlushno();}  }
class C{  public char[] toCharArray(int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  int len=endIndex - startIndex;  if (len == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  char chars[]=new char[len];  System.arraycopy(buffer,startIndex,chars,0,len);  return chars;}  }
class C{  public int hash(String s){  int h=0;  for (int i=0; i < s.length(); i++) {    h=(h << 1) + s.charAt(i);  }  if (h < 0) {    h=0 - h;  }  return h % tableSize;}  }
class C{  protected Anonymous_state_1_Impl(){  super();}  }
class C{  private final void _writeSegmentedRaw(char[] cbuf,int offset,int len) throws IOException, JsonGenerationException {  final int end=_outputEnd;  final byte[] bbuf=_outputBuffer;  main_loop:   while (offset < len) {    inner_loop:     while (true) {      int ch=(int)cbuf[offset];      if (ch >= 0x80) {        break inner_loop;      }      if (_outputTail >= end) {        _flushBuffer();      }      bbuf[_outputTail++]=(byte)ch;      if (++offset >= len) {        break main_loop;      }    }    if ((_outputTail + 3) >= _outputEnd) {      _flushBuffer();    }    char ch=cbuf[offset++];    if (ch < 0x800) {      bbuf[_outputTail++]=(byte)(0xc0 | (ch >> 6));      bbuf[_outputTail++]=(byte)(0x80 | (ch & 0x3f));    } else {      _outputRawMultiByteChar(ch,cbuf,offset,len);    }  }}  }
class C{  protected void paintTab(SeaGlassContext ss,Graphics g,Rectangle[] rects,int tabIndex,Rectangle iconRect,Rectangle textRect){  Rectangle tabRect=rects[tabIndex];  int selectedIndex=tabPane.getSelectedIndex();  boolean isSelected=selectedIndex == tabIndex;  JComponent b=ss.getComponent();  boolean flipSegments=(orientation == ControlOrientation.HORIZONTAL && !tabPane.getComponentOrientation().isLeftToRight());  String segmentPosition="only";  if (tabPane.getTabCount() > 1) {    if (tabIndex == 0 && tabIndex == leadingTabIndex) {      segmentPosition=flipSegments ? "last" : "first";    } else     if (tabIndex == tabPane.getTabCount() - 1 && tabIndex == trailingTabIndex) {      segmentPosition=flipSegments ? "first" : "last";    } else {      segmentPosition="middle";    }  }  b.putClientProperty("JTabbedPane.Tab.segmentPosition",segmentPosition);  updateTabContext(tabIndex,isSelected,isSelected && selectedTabIsPressed,getRolloverTab() == tabIndex,getFocusIndex() == tabIndex);  SeaGlassLookAndFeel.updateSubregion(ss,g,tabRect);  int x=tabRect.x;  int y=tabRect.y;  int height=tabRect.height;  int width=tabRect.width;  tabContext.getPainter().paintTabbedPaneTabBackground(tabContext,g,x,y,width,height,tabIndex,tabPlacement);  tabContext.getPainter().paintTabbedPaneTabBorder(tabContext,g,x,y,width,height,tabIndex,tabPlacement);  if (tabCloseButtonPlacement != CENTER) {    tabRect=paintCloseButton(g,tabContext,tabIndex);  }  if (tabPane.getTabComponentAt(tabIndex) == null) {    String title=tabPane.getTitleAt(tabIndex);    Font font=ss.getStyle().getFont(ss);    FontMetrics metrics=SwingUtilities2.getFontMetrics(tabPane,g,font);    Icon icon=getIconForTab(tabIndex);    layoutLabel(ss,tabPlacement,metrics,tabIndex,title,icon,tabRect,iconRect,textRect,isSelected);    paintText(ss,g,tabPlacement,font,metrics,tabIndex,title,textRect,isSelected);    paintIcon(g,tabPlacement,tabIndex,icon,iconRect,isSelected);  }}  }
class C{  private void printAllPostponedMessages(){  for (int i=lastPrintedMessageNum + 1; !postponedMessages.isEmpty(); i++) {    LogMessage nextLogMessage=postponedMessages.get(i);    if (nextLogMessage != null) {      printLine(nextLogMessage);      postponedMessages.remove(i);    }  }}  }
class C{  public QueryStringDecoderUtil(String uri){  this(uri,Charset.defaultCharset());}  }
class C{  static Result parse(String input){  return parse(input,true);}  }
class C{  private boolean isPolicyEnabled(Application app){  if (AutoScalerPolicy.STATE_ENABLED.equals(app.getPolicyState())) {    return true;  } else   return false;}  }
class C{  private boolean matches(JDiffMethod jDiffMethod,Method method){  if (jDiffMethod.mName.equals(method.getName())) {    String jdiffReturnType=jDiffMethod.mReturnType;    String reflectionReturnType=typeToString(method.getGenericReturnType());    List<String> jdiffParamList=jDiffMethod.mParamList;    if (jdiffReturnType.equals(reflectionReturnType)) {      Type[] params=method.getGenericParameterTypes();      if (jdiffParamList.size() == params.length) {        for (int i=0; i < jdiffParamList.size(); i++) {          if (!compareParam(jdiffParamList.get(i),params[i])) {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void fireRequestBrowserContent(String browserContent){  fireRequestBrowserContent(new InfoDisplayEvent(this,browserContent));}  }
class C{  public boolean ready() throws IOException {  if (_byteBuffer != null) {    return _byteBuffer.hasRemaining();  } else {    throw new IOException("Reader closed");  }}  }
class C{  public void createMaps() throws IOException {  final Image map=loadImage();  if (map == null) {    System.out.println("You need to select a map image for this to work");    System.out.println("Shutting down");    System.exit(0);  }  m_seaZoneOnly=doSeaZone();  final String mapDir=getMapDirectory();  if (mapDir == null || mapDir.equals("")) {    System.out.println("You need to specify a map name for this to work");    System.out.println("Shutting down");    System.exit(0);  }  try {    m_mapData=new MapData(mapDir);  } catch (  final NullPointerException npe) {    System.out.println("Bad data given or missing text files, shutting down");    System.exit(0);  }  for (  final String territoryName : m_mapData.getTerritories()) {    final boolean seaZone=Util.isTerritoryNameIndicatingWater(territoryName);    if (!seaZone && m_seaZoneOnly) {      continue;    }    if (seaZone && !m_seaZoneOnly) {      continue;    }    processImage(territoryName,map);  }  System.out.println("All Finished!");  System.exit(0);}  }
class C{  public TextReporter(){  this(new PrintWriter(System.out,true));}  }
class C{  public static PreviousExpression previous(Expression expression,String property){  return new PreviousExpression(expression,property);}  }
class C{  public SASJavaExec(String execCommand,String script,String inputString){  this.execCommand=execCommand.trim();  this.script=script.trim();  this.inputString=inputString;}  }
class C{  public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  processBytes(in,inOff,blockSize,out,outOff);  return blockSize;}  }
class C{  public static double[] deleteRange(double[] x,int J1,int J2){  double[] array=new double[x.length - (J2 - J1 + 1)];  System.arraycopy(x,0,array,0,J1);  System.arraycopy(x,J2 + 1,array,J1,x.length - (J2 + 1));  return array;}  }
class C{  public void ignoreUnknownElements(){  ignoreUnknownElements(IGNORE_ALL);}  }
class C{  public byte[] encodeToDER(){  try {    return derByteStream().toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public SslError(int error,X509Certificate certificate){  addError(error);  mCertificate=new SslCertificate(certificate);}  }
class C{  @Override public void close(){  buf=null;}  }
class C{  public boolean adjustValue(long key,double amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public final CC endGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  endGroupY(xy[1]);case 1:endGroupX(xy[0]);}return this;}  }
class C{  public String base64UrlEncode(byte[] data){  String encodedData=new String(Base64.encode(data,Base64.URL_SAFE));  encodedData=encodedData.replace("=","");  encodedData=encodedData.replace("\n","");  return encodedData;}  }
class C{  private NullValue(){}  }
class C{  public static void sort(long[] array){  sort(0,array.length,array);}  }
class C{  public void delete(@Nonnull final String username,@Nonnull final String cursorName){  Objects.requireNonNull(username);  Preconditions.checkArgument(!username.isEmpty(),"username cannot be empty");  Objects.requireNonNull(cursorName);  Preconditions.checkArgument(!cursorName.isEmpty(),"cursorName cannot be empty");  final String key=getCursorKey(username,cursorName);  final Location location=new Location(NAMESPACE,key);  final DeleteValue deleteValue=new DeleteValue.Builder(location).build();  LOGGER.debug("Deleting key (async): {}",location);  try (Timer.Context context=deleteTimer.time()){    client.executeAsync(deleteValue);  } }  }
class C{  public Parser(InputStream referersYaml) throws RefererParserException {  referers=loadReferers(referersYaml);}  }
class C{  public void addEntry(EntryEventImpl ev,Integer bucketId){  this.putAllData[this.putAllDataSize]=new PutAllEntryData(ev);  this.putAllData[this.putAllDataSize].setBucketId(bucketId);  this.putAllDataSize+=1;}  }
class C{  @Override public void updateRowId(int columnIndex,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  public static boolean writeModPoll(int register,int type,int value,String expectedOutput){  return execModPoll(register,type,value,expectedOutput,1);}  }
class C{  public static byte[] decode(String s,int options){  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  protected static List<StructFieldDeclaration> listFields(Class<?> structClass){  List<StructFieldDeclaration> list=new ArrayList<StructFieldDeclaration>();  for (  Method method : structClass.getMethods()) {    if (acceptFieldGetter(method,true)) {      StructFieldDeclaration io=fromGetter(method);      try {        Method setter=structClass.getMethod(method.getName(),io.valueClass);        if (acceptFieldGetter(setter,false)) {          io.setter=setter;        }      } catch (      Exception ex) {      }      if (io != null) {        list.add(io);      }    }  }  int nFieldFields=0;  for (  java.lang.reflect.Field field : structClass.getFields()) {    if (acceptFieldGetter(field,true)) {      StructFieldDeclaration io=StructFieldDeclaration.fromField(field);      if (io != null) {        list.add(io);        nFieldFields++;      }    }  }  if (nFieldFields > 0 && BridJ.warnStructFields) {    BridJ.warning("Struct " + structClass.getName() + " has "+ nFieldFields+ " struct fields implemented as Java fields, which won't give the best performance and might require counter-intuitive calls to BridJ.readFromNative / .writeToNative. Please consider using JNAerator to generate your struct instead, or use BRIDJ_WARN_STRUCT_FIELDS=0 or -Dbridj.warnStructFields=false to mute this warning.");  }  return list;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.837 -0500",hash_original_method="224A26155E20D2310F3074B7F0735777",hash_generated_method="2ECEA51D62B8E86E19253E5893782A6D") protected void runTest() throws Throwable {  assertNotNull(fName);  Method runMethod=null;  try {    runMethod=getClass().getMethod(fName,(Class[])null);  } catch (  NoSuchMethodException e) {    fail("Method \"" + fName + "\" not found");  }  if (!Modifier.isPublic(runMethod.getModifiers())) {    fail("Method \"" + fName + "\" should be public");  }  try {    runMethod.invoke(this,(Object[])null);  } catch (  InvocationTargetException e) {    e.fillInStackTrace();    throw e.getTargetException();  }catch (  IllegalAccessException e) {    e.fillInStackTrace();    throw e;  }}  }
class C{  public static double[] subarray(double[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_DOUBLE_ARRAY;  }  double[] subarray=new double[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public static PermissionDeniedResponse from(@NonNull String permission,boolean permanentlyDenied){  return new PermissionDeniedResponse(new PermissionRequest(permission),permanentlyDenied);}  }
class C{  public GraphIOException(Throwable cause){  super(cause);}  }
class C{  public NAryValueOperator(List<ValueExpr> args){  setArguments(args);}  }
class C{  public MCostDetail createVarianceCostDetail(MPPCostCollector costCollector,BigDecimal amount,BigDecimal quantity,MCostDetail costDetail,MProduct product,MAcctSchema accountSchema,MCostType costType,MCostElement costElement){  final MCostDetail costDetailVariance=new MCostDetail(costCollector.getCtx(),0,costCollector.get_TrxName());  if (costDetail != null) {    MCostDetail.copyValues(costDetail,costDetailVariance);    costDetailVariance.setProcessed(false);  }  if (product != null) {    costDetailVariance.setM_Product_ID(product.getM_Product_ID());    costDetailVariance.setM_AttributeSetInstance_ID(costCollector.getM_AttributeSetInstance_ID());  }  if (accountSchema != null) {    costDetailVariance.setC_AcctSchema_ID(accountSchema.getC_AcctSchema_ID());  }  if (costElement != null) {    costDetailVariance.setM_CostElement_ID(costElement.getM_CostElement_ID());  }  costDetailVariance.setPP_Cost_Collector_ID(costCollector.getPP_Cost_Collector_ID());  costDetailVariance.setM_CostType_ID(costType.getM_CostType_ID());  costDetailVariance.setM_CostElement_ID(costElement.getM_CostElement_ID());  costDetailVariance.setAmt(amount);  costDetailVariance.setAmtLL(BigDecimal.ZERO);  costDetailVariance.setQty(quantity);  costDetailVariance.setDateAcct(costCollector.getDateAcct());  costDetailVariance.saveEx();  processCostDetail(costDetailVariance);  return costDetailVariance;}  }
class C{  public void removeStops(int regency){  Integer[] keys=new Integer[stops.keySet().size()];  stops.keySet().toArray(keys);  for (int i=0; i < keys.length; i++) {    if (keys[i] <= regency)     stops.remove(keys[i]);  }}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockSpread(BlockSpreadEvent event){  handleStateChange(event.getWorld(),event.getBlock(),event,event,event.getNewState());}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public boolean showProtectedMediaSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER;}  }
class C{  public static void logBasePageProtocol(boolean isHttpBasePage){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchBasePageProtocol",isHttpBasePage ? PROTOCOL_IS_HTTP : PROTOCOL_NOT_HTTP,PROTOCOL_BOUNDARY);}  }
class C{  public RestoreSnapshotRequest source(Map source){  for (  Map.Entry<String,Object> entry : ((Map<String,Object>)source).entrySet()) {    String name=entry.getKey();    if (name.equals("indices")) {      if (entry.getValue() instanceof String) {        indices(Strings.splitStringByCommaToArray((String)entry.getValue()));      } else       if (entry.getValue() instanceof ArrayList) {        indices((ArrayList<String>)entry.getValue());      } else {        throw new IllegalArgumentException("malformed indices section, should be an array of strings");      }    } else     if (name.equals("partial")) {      partial(nodeBooleanValue(entry.getValue()));    } else     if (name.equals("settings")) {      if (!(entry.getValue() instanceof Map)) {        throw new IllegalArgumentException("malformed settings section");      }      settings((Map<String,Object>)entry.getValue());    } else     if (name.equals("include_global_state")) {      includeGlobalState=nodeBooleanValue(entry.getValue());    } else     if (name.equals("include_aliases")) {      includeAliases=nodeBooleanValue(entry.getValue());    } else     if (name.equals("rename_pattern")) {      if (entry.getValue() instanceof String) {        renamePattern((String)entry.getValue());      } else {        throw new IllegalArgumentException("malformed rename_pattern");      }    } else     if (name.equals("rename_replacement")) {      if (entry.getValue() instanceof String) {        renameReplacement((String)entry.getValue());      } else {        throw new IllegalArgumentException("malformed rename_replacement");      }    } else     if (name.equals("index_settings")) {      if (!(entry.getValue() instanceof Map)) {        throw new IllegalArgumentException("malformed index_settings section");      }      indexSettings((Map<String,Object>)entry.getValue());    } else     if (name.equals("ignore_index_settings")) {      if (entry.getValue() instanceof String) {        ignoreIndexSettings(Strings.splitStringByCommaToArray((String)entry.getValue()));      } else       if (entry.getValue() instanceof List) {        ignoreIndexSettings((List<String>)entry.getValue());      } else {        throw new IllegalArgumentException("malformed ignore_index_settings section, should be an array of strings");      }    } else {      if (IndicesOptions.isIndicesOptions(name) == false) {        throw new IllegalArgumentException("Unknown parameter " + name);      }    }  }  indicesOptions(IndicesOptions.fromMap((Map<String,Object>)source,IndicesOptions.lenientExpandOpen()));  return this;}  }
class C{  private static OFActionSetDlSrc decode_set_src_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetDlSrc();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  @Nullable public static DomainApplication loadDomainApplication(String applicationId,DateTime now){  DomainApplication application=ofy().load().key(Key.create(DomainApplication.class,applicationId)).now();  if (application == null || isAtOrAfter(now,application.getDeletionTime())) {    return null;  }  return application;}  }
class C{  private void highlightNextSelection(){  System.out.println("Highlighting next selection.");  if (!this.selections.isEmpty()) {    Selection sel=this.selections.get(0);    this.expression.setSelectionColor(SELECTION);    this.expression.select(sel.x,sel.y);    this.expression.grabFocus();  }}  }
class C{  public static void run(Dfareporting reporting,File reportFile) throws Exception {  System.out.println("=================================================================");  System.out.printf("Retrieving and printing a report file for report with ID %s%n",reportFile.getReportId());  System.out.printf("The ID number of this report file is %s%n",reportFile.getId());  System.out.println("=================================================================");  HttpResponse fileContents=reporting.files().get(reportFile.getReportId(),reportFile.getId()).executeMedia();  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(fileContents.getContent(),Charsets.UTF_8));    String line;    while ((line=reader.readLine()) != null) {      System.out.println(line);    }  }  finally {    fileContents.disconnect();  }}  }
class C{  public boolean isEmpty(){  return type == EMPTY;}  }
class C{  public synchronized Set entrySet(){  return map.entrySet();}  }
class C{  public _ScheduleDays(final String[] flagStrings){  super(flagStrings);}  }
class C{  public boolean isOneLineTag(){  return (this.flags & ONE_LINE_TAG) != 0;}  }
class C{  public JFrame showInNewFrame(){  if (m_frame == null) {    m_frame=new JFrame();    m_frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    m_frame.setContentPane(getPanel());    m_frame.pack();    m_frame.setVisible(true);  }  return m_frame;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public String post(String resource,Map<String,String> params) throws APIException, IOException {  return openURL(resource,params,"POST");}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void list(PrintWriter p,boolean listShadowed){  if (listShadowed)   _list(p,listShadowed,"root",null); else {    Hashtable gather=new Hashtable();    _list(null,listShadowed,"root",gather);    Vector vec=new Vector();    Enumeration e=gather.keys();    while (e.hasMoreElements())     vec.addElement(e.nextElement());    java.util.Collections.sort(vec);    for (int x=0; x < vec.size(); x++) {      String s=(String)vec.get(x);      String v=null;      if (s != null)       v=(String)gather.get(s);      if (v == null)       v=UNKNOWN_VALUE;      if (p != null)       p.println(s + " = " + v);    }  }  if (p != null)   p.flush();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private boolean refreshChildPadding(int i,ChildDrawable r){  if (r.mDrawable != null) {    final Rect rect=mTmpRect;    r.mDrawable.getPadding(rect);    if (rect.left != mPaddingL[i] || rect.top != mPaddingT[i] || rect.right != mPaddingR[i] || rect.bottom != mPaddingB[i]) {      mPaddingL[i]=rect.left;      mPaddingT[i]=rect.top;      mPaddingR[i]=rect.right;      mPaddingB[i]=rect.bottom;      return true;    }  }  return false;}  }
class C{  public final void testGetPublic01(){  KeyPair kp=new KeyPair(null,null);  assertNull(kp.getPublic());}  }
class C{  public static WifiP2pUpnpServiceRequest newInstance(){  return new WifiP2pUpnpServiceRequest();}  }
class C{  public ParameterGuesser(IJavaElement enclosingElement){  fEnclosingElement=enclosingElement;  fAlreadyMatchedNames=new HashSet<String>();}  }
class C{  public DirectSolrConnection(SolrCore c){  core=c;  parser=new SolrRequestParsers(c.getSolrConfig());}  }
class C{  @Override protected void reset(){}  }
class C{  protected void skipTransform() throws IOException {  loop:   for (; ; ) {    current=reader.read();switch (current) {case ')':      break loop;default :    if (current == -1) {      break loop;    }}}}  }
class C{  public int compareTo(Object o){  if (o instanceof LaggedFactor) {    LaggedFactor f=(LaggedFactor)o;    int n=this.factor.compareTo(f.getFactor());    if (n != 0) {      return n;    } else {      return this.lag - f.getLag();    }  } else {    return 0;  }}  }
class C{  public void run(int condition){  if (condition == C_STARTED_FRESH) {    startFresh();  } else {    startFromCheckpoint();  }  int result=R_NOTDONE;  while (result == R_NOTDONE) {    result=evolve();  }  finish(result);}  }
class C{  public static GraphQLObjectType object(Class<?> object) throws IllegalAccessException, InstantiationException, NoSuchMethodException {  GraphQLObjectType.Builder builder=objectBuilder(object);  return new GraphQLObjectTypeWrapper(builder.build());}  }
class C{  public static String errorJSON(String provider,Error error){  final JSONObject json=new JSONObject();  try {    json.put("provider",provider);    json.put("error",error.number);    json.put("msg",error.message);  } catch (  JSONException exc) {    logJSONException(exc);  }  return json.toString();}  }
class C{  public final void addItem(final int id,@NonNull final CharSequence title,@Nullable final Drawable icon){  Item item=new Item(id,title);  item.setIcon(icon);  adapter.add(item);  adaptGridViewHeight();}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("wildfly8x",DeployerType.INSTALLED,WildFly8xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("wildfly8x",DeployerType.REMOTE,WildFly8xRemoteDeployer.class);  deployerFactory.registerDeployer("wildfly9x",DeployerType.INSTALLED,WildFly9xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("wildfly9x",DeployerType.REMOTE,WildFly9xRemoteDeployer.class);  deployerFactory.registerDeployer("wildfly10x",DeployerType.INSTALLED,WildFly10xInstalledLocalDeployer.class);  deployerFactory.registerDeployer("wildfly10x",DeployerType.REMOTE,WildFly10xRemoteDeployer.class);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public UtilityTable queryUtil(Query.UtilQuery query){  BNetwork network=query.getNetwork();  Collection<String> queryVars=query.getQueryVars();  Assignment evidence=query.getEvidence();  Map<Assignment,Double> fullJoint=getFullJoint(network,true);  SortedMap<String,Set<Value>> actionValues=new TreeMap<String,Set<Value>>();  for (  BNode n : network.getNodes()) {    if (queryVars.contains(n.getId())) {      actionValues.put(n.getId(),n.getValues());    }  }  Set<Assignment> actionAssigns=InferenceUtils.getAllCombinations(actionValues);  UtilityTable table=new UtilityTable();  for (  Assignment actionAssign : actionAssigns) {    double totalUtility=0.0f;    double totalProb=0.0f;    for (    Assignment jointAssign : fullJoint.keySet()) {      if (jointAssign.contains(evidence)) {        double totalUtilityForAssign=0.0f;        Assignment stateAndActionAssign=new Assignment(jointAssign,actionAssign);        for (        UtilityNode valueNode : network.getUtilityNodes()) {          double singleUtility=valueNode.getUtility(stateAndActionAssign);          totalUtilityForAssign+=singleUtility;        }        totalUtility+=(totalUtilityForAssign * fullJoint.get(jointAssign));        totalProb+=fullJoint.get(jointAssign);      }    }    table.setUtil(actionAssign,totalUtility / totalProb);  }  return table;}  }
class C{  public void addItemListener(ItemListener l){  listenerList.add(ItemListener.class,l);}  }
class C{  public Builder withMaterialGrid(){  return this.with(Line.fromLeft(16,TypedValue.COMPLEX_UNIT_DIP)).with(Line.fromLeft(72,TypedValue.COMPLEX_UNIT_DIP)).with(Line.fromRight(16,TypedValue.COMPLEX_UNIT_DIP));}  }
class C{  public Iterator iterator(){  return new BagIterator(this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Uri buildRequestUri(int track,int chunkIndex){  Assertions.checkState(tracks != null);  Assertions.checkState(chunkStartTimes != null);  Assertions.checkState(chunkIndex < chunkStartTimes.size());  String chunkUrl=chunkTemplate.replace(URL_PLACEHOLDER_BITRATE,Integer.toString(tracks[track].format.bitrate)).replace(URL_PLACEHOLDER_START_TIME,chunkStartTimes.get(chunkIndex).toString());  return UriUtil.resolveToUri(baseUri,chunkUrl);}  }
class C{  public TranscoderInput(XMLReader xmlReader){  this.xmlReader=xmlReader;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_DEFINED_TYPE_ELEMENT:    return getDefinedTypeElement();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_DECLARED_TYPE_REF:  return getDeclaredTypeRef();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_NAME:return getName();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_DECLARED_STATIC:return isDeclaredStatic();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_STATIC:return isStatic();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_DECLARED_FINAL:return isDeclaredFinal();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_FINAL:return isFinal();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_CONSTRUCTOR:return isConstructor();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_CALLABLE_CONSTRUCTOR:return isCallableConstructor();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean isUpdateAnnFile(){  return m_isUpdateAnnFile;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private Date penalyDateWithThreeMonths(final Date date){  final Calendar penalyDate=Calendar.getInstance();  penalyDate.setTime(date);  penalyDate.add(Calendar.MONTH,3);  penalyDate.set(Calendar.DAY_OF_MONTH,1);  return penalyDate.getTime();}  }
class C{  public StrBuilder insert(final int index,final char chars[],final int offset,final int length){  validateIndex(index);  if (chars == null) {    return insert(index,nullText);  }  if (offset < 0 || offset > chars.length) {    throw new StringIndexOutOfBoundsException("Invalid offset: " + offset);  }  if (length < 0 || offset + length > chars.length) {    throw new StringIndexOutOfBoundsException("Invalid length: " + length);  }  if (length > 0) {    ensureCapacity(size + length);    System.arraycopy(buffer,index,buffer,index + length,size - index);    System.arraycopy(chars,offset,buffer,index,length);    size+=length;  }  return this;}  }
class C{  public Cuboid(Location l1){  this(l1,l1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String executeAppleScript(String[] appleScript,String[] argv){  StringBuilder retval=new StringBuilder();  try {    List<String> execArgs=new LinkedList<String>();    execArgs.add("/usr/bin/osascript");    execArgs.add("-");    if (argv != null) {      for (int i=0; i < argv.length; ++i)       execArgs.add(argv[i]);    }    Process osascript=Runtime.getRuntime().exec(execArgs.toArray(new String[execArgs.size()]));    OutputStream outputStream=osascript.getOutputStream();    PrintWriter writer=new PrintWriter(outputStream,true);    writer.println("on run argv");    for (int i=0; i < appleScript.length; ++i)     writer.println(appleScript[i]);    writer.println("end run");    writer.close();    InputStreamReader reader=new InputStreamReader(osascript.getInputStream());    int ch;    while ((ch=reader.read()) != -1)     retval.append((char)ch);  } catch (  IOException e) {  }  return retval.toString().replaceAll("\n$","");}  }
class C{  public void addHeader(Header header){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(header));}  }
class C{  public static Matcher findRegex(Object left,Object right){  String stringToCompare;  if (left instanceof String) {    stringToCompare=(String)left;  } else {    stringToCompare=toString(left);  }  String regexToCompareTo;  if (right instanceof String) {    regexToCompareTo=(String)right;  } else   if (right instanceof Pattern) {    Pattern pattern=(Pattern)right;    return pattern.matcher(stringToCompare);  } else {    regexToCompareTo=toString(right);  }  return Pattern.compile(regexToCompareTo).matcher(stringToCompare);}  }
class C{  public Archive createDefaultDeployment(){  try {    Iterator<DefaultDeploymentFactory> providerIter=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("swarm.application")).loadService(DefaultDeploymentFactory.class).iterator();    if (!providerIter.hasNext()) {      providerIter=ServiceLoader.load(DefaultDeploymentFactory.class,ClassLoader.getSystemClassLoader()).iterator();    }    final Map<String,DefaultDeploymentFactory> factories=new HashMap<>();    while (providerIter.hasNext()) {      final DefaultDeploymentFactory factory=providerIter.next();      final DefaultDeploymentFactory current=factories.get(factory.getType());      if (current == null) {        factories.put(factory.getType(),factory);      } else {        if (factory.getPriority() > current.getPriority()) {          factories.put(factory.getType(),factory);        }      }    }    final DefaultDeploymentFactory factory=factories.get(determineDeploymentType());    return factory != null ? factory.create() : ShrinkWrap.create(JARArchive.class);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected void validateParameterValue(org.oscm.xsd.ServiceParameter[] param){}  }
class C{  public ModularParser(){}  }
class C{  public final boolean extractText(final ExtractedTextRequest request,final ExtractedText outText){  return getView().extractText(request,outText);}  }
class C{  public MessageBuilder withChannel(Channel channel){  this.channelID=channel.getID();  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.803 -0500",hash_original_method="8D41BAE77B1D2757C2C572E8ECB76782",hash_generated_method="2546F8BD279B1E33E4D844073D43ED11") public boolean selectArticle(String articleId) throws IOException {  return selectArticle(articleId,null);}  }
class C{  public boolean isAsync(){  return this.isDeclaredAsync();}  }
class C{  public String rootID(){  return "[PRJ]" + this.project.getFullPath();}  }
class C{  public static IgniteBiTuple<IgniteConfiguration,GridSpringResourceContext> loadConfiguration(URL springCfgUrl) throws IgniteCheckedException {  IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> t=loadConfigurations(springCfgUrl);  return F.t(F.first(t.get1()),t.get2());}  }
class C{  public void incrementValidCreators(){  for (  ObjectCreator<?> creator : creators) {    creator.incrementValidNext();  }}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  splitPane=new JSplitPane();  contentPane.add(splitPane,BorderLayout.CENTER);  final JScrollPane scrollPane1=new JScrollPane();  splitPane.setLeftComponent(scrollPane1);  fieldList=new JList();  scrollPane1.setViewportView(fieldList);  detailPane=new JPanel();  detailPane.setLayout(new GridBagLayout());  splitPane.setRightComponent(detailPane);  detailPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(8,8,8,8),null));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_ClassName.Text"));  GridBagConstraints gbc;  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.anchor=GridBagConstraints.EAST;  detailPane.add(label1,gbc);  final JPanel spacer1=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=1;  gbc.gridy=0;  gbc.fill=GridBagConstraints.HORIZONTAL;  detailPane.add(spacer1,gbc);  final JPanel spacer2=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=1;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer2,gbc);  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_Optional.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=2;  gbc.anchor=GridBagConstraints.EAST;  detailPane.add(label2,gbc);  final JLabel label3=new JLabel();  this.$$$loadLabelText$$$(label3,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_Annotation.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=4;  gbc.anchor=GridBagConstraints.EAST;  detailPane.add(label3,gbc);  final JPanel spacer3=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=3;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer3,gbc);  final JPanel spacer4=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=5;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer4,gbc);  final JPanel spacer5=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=9;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer5,gbc);  final JLabel label4=new JLabel();  this.$$$loadLabelText$$$(label4,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_InjectionType.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=10;  gbc.anchor=GridBagConstraints.EAST;  detailPane.add(label4,gbc);  classNameLabel=new JLabel();  classNameLabel.setText("none");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.WEST;  detailPane.add(classNameLabel,gbc);  annotationLabel=new JLabel();  annotationLabel.setText("none");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=4;  gbc.anchor=GridBagConstraints.WEST;  detailPane.add(annotationLabel,gbc);  injectionTypeLabel=new JLabel();  injectionTypeLabel.setText("none");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=10;  gbc.anchor=GridBagConstraints.WEST;  detailPane.add(injectionTypeLabel,gbc);  optionalLabel=new JLabel();  optionalLabel.setText("none");  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=2;  gbc.anchor=GridBagConstraints.WEST;  detailPane.add(optionalLabel,gbc);  final JPanel spacer6=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=7;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer6,gbc);  final JLabel label5=new JLabel();  this.$$$loadLabelText$$$(label5,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_Injection.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=8;  gbc.anchor=GridBagConstraints.WEST;  detailPane.add(label5,gbc);  final JScrollPane scrollPane2=new JScrollPane();  gbc=new GridBagConstraints();  gbc.gridx=2;  gbc.gridy=12;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  detailPane.add(scrollPane2,gbc);  injectedServiceList=new JList();  scrollPane2.setViewportView(injectedServiceList);  final JPanel spacer7=new JPanel();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=11;  gbc.fill=GridBagConstraints.VERTICAL;  detailPane.add(spacer7,gbc);  final JLabel label6=new JLabel();  this.$$$loadLabelText$$$(label6,ResourceBundle.getBundle("org/apache/zest/envisage/detail/DependencyPane").getString("CTL_InjectedServices.Text"));  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=12;  gbc.anchor=GridBagConstraints.NORTHEAST;  detailPane.add(label6,gbc);  final JSeparator separator1=new JSeparator();  gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=6;  gbc.gridwidth=3;  gbc.fill=GridBagConstraints.BOTH;  detailPane.add(separator1,gbc);}  }
class C{  public ProductId(String prodId){  super(prodId);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public boolean handleMessage(Message m,Object object){  if (super.handleMessage(m,object))   return true;  if (m.getType().equals("collectiveUpdate-" + getJob())) {    return DRM.handleMessage(m,object);  } else   if (m.getType().equals("addCommand")) {    newCommands.add(object);  } else   if (m.getType().equals("getInfo")) {    m.setReply("java.version " + System.getProperty("java.version") + "\nDRM.version "+ version()+ "\nmemory "+ Runtime.getRuntime().freeMemory());  } else   if (m.getType().equals("getStatus")) {    m.setReply("running");  } else {    Logger.debug(getClass().getName() + "#handleMessage",m.getType() + " received from " + m.getSender());    return false;  }  return true;}  }
class C{  @PermitAll @POST public ResultEntity<List<MqttGrantedQoS>> subscribe(@PathParam("clientId") String clientId,@Auth UserPrincipal user,@QueryParam("protocol") @DefaultValue("4") byte protocol,@QueryParam("packetId") @DefaultValue("0") int packetId,List<Subscription> subscriptions){  String userName=user.getName();  MqttVersion version=MqttVersion.fromProtocolLevel(protocol);  List<MqttTopicSubscription> requestSubscriptions=new ArrayList<>();  List<MqttTopicSubscriptionGranted> grantedSubscriptions=new ArrayList<>();  if (!this.validator.isClientIdValid(clientId)) {    logger.debug("Protocol violation: Client id {} not valid based on configuration",clientId);    throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));  }  for (  Subscription subscription : subscriptions) {    if (!this.validator.isTopicFilterValid(subscription.getTopic())) {      logger.debug("Protocol violation: Client {} subscription {} is not valid based on configuration",clientId,subscription.getTopic());      throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));    }    MqttQoS requestQos;    try {      requestQos=MqttQoS.valueOf(subscription.getQos());    } catch (    IllegalArgumentException e) {      logger.debug("Protocol violation: Client {} subscription qos {} is not valid",clientId,subscription.getQos());      throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));    }    requestSubscriptions.add(new MqttTopicSubscription(subscription.getTopic(),requestQos));  }  logger.debug("Message received: Received SUBSCRIBE message from client {} user {}",clientId,userName);  List<MqttGrantedQoS> grantedQosLevels=this.authenticator.authSubscribe(clientId,userName,requestSubscriptions);  if (subscriptions.size() != grantedQosLevels.size()) {    logger.warn("Authorization error: SUBSCRIBE message's subscriptions count not equal to granted QoS count");    throw new AuthorizeException(new ErrorEntity(ErrorCode.UNAUTHORIZED));  }  logger.trace("Authorization granted on topic {} as {} for client {}",ArrayUtils.toString(requestSubscriptions),ArrayUtils.toString(grantedQosLevels),clientId);  for (int i=0; i < requestSubscriptions.size(); i++) {    MqttGrantedQoS grantedQoS=grantedQosLevels.get(i);    String topic=requestSubscriptions.get(i).topic();    List<String> topicLevels=Topics.sanitize(topic);    grantedSubscriptions.add(new MqttTopicSubscriptionGranted(topic,grantedQoS));    if (grantedQoS != MqttGrantedQoS.NOT_GRANTED) {      logger.trace("Update subscription: Update client {} subscription with topic {} QoS {}",clientId,topic,grantedQoS);      this.storage.updateSubscription(clientId,topicLevels,MqttQoS.valueOf(grantedQoS.value()));    }  }  Message<MqttPacketIdVariableHeader,MqttSubscribePayloadGranted> msg=new Message<>(new MqttFixedHeader(MqttMessageType.SUBSCRIBE,false,MqttQoS.AT_LEAST_ONCE,false,0),new MqttAdditionalHeader(version,clientId,userName,null),MqttPacketIdVariableHeader.from(packetId),new MqttSubscribePayloadGranted(grantedSubscriptions));  this.cluster.sendToApplication(msg);  return new ResultEntity<>(grantedQosLevels);}  }
class C{  protected ModifiableElementImpl(){  super();}  }
class C{  public CActionZoomIn(final ZyGraph graph){  super("Zoom In");  m_graph=Preconditions.checkNotNull(graph,"IE02834: graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Zoom In");  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/magnify_up.jpg")));}  }
class C{  public void testIterators() throws Exception {  IgniteCache<Long,Long> cache=populate();  int cnt=0;  for (  Cache.Entry<Long,Long> e : cache.localEntries(CachePeekMode.OFFHEAP)) {    assertEquals(e.getKey(),e.getValue());    cnt++;  }  int cnt0=cnt;  assertTrue(cnt > 0);  for (  Cache.Entry<Long,Long> e : cache.localEntries(CachePeekMode.SWAP)) {    assertEquals(e.getKey(),e.getValue());    cnt++;  }  assertTrue(cnt > cnt0);  assertEquals(ENTRY_CNT,cnt);}  }
class C{  public void nextIteration() throws Exception {  if (m_UsePropertyIterator) {    if (m_CurrentProperty != m_PropertyNumber) {      setProperty(0,m_ResultProducer);      m_CurrentProperty=m_PropertyNumber;    }  }  if (m_CurrentInstances == null) {    File currentFile=(File)getDatasets().elementAt(m_DatasetNumber);    AbstractFileLoader loader=ConverterUtils.getLoaderForFile(currentFile);    loader.setFile(currentFile);    Instances data=new Instances(loader.getDataSet());    if (data.classIndex() == -1) {      if (m_ClassFirst) {        data.setClassIndex(0);      } else {        data.setClassIndex(data.numAttributes() - 1);      }    }    m_CurrentInstances=data;    m_ResultProducer.setInstances(m_CurrentInstances);  }  m_ResultProducer.doRun(m_RunNumber);  advanceCounters();}  }
class C{  public void mark(){  mark(1);}  }
class C{  public void append(long key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=idealLongArraySize(pos + 1);    long[] nkeys=new long[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void addAttribute(String ns,String prefix,String ln,String val){  int len=keys.length;  if (length == len) {    String[] t=new String[len * 2];    System.arraycopy(keys,0,t,0,len);    keys=t;  }  keys[length++]=ns;  keys[length++]=prefix;  keys[length++]=ln;  values.put(ns,ln,val);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cld");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a cld instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.DIRECTION_FLAG));}  }
class C{  protected void clearCache(){  super.clearCache();  rlog.info(CACHEDUMP_MSG);}  }
class C{  public static int indexOf(String src,char c,int startIndex,int endIndex){  if (startIndex < 0) {    startIndex=0;  }  int srclen=src.length();  if (endIndex > srclen) {    endIndex=srclen;  }  for (int i=startIndex; i < endIndex; i++) {    if (src.charAt(i) == c) {      return i;    }  }  return -1;}  }
class C{  public IncompatibleVersionException(String message){  super(message);}  }
class C{  public void deleteWords(int p_146177_1_){  if (text.length() != 0)   if (selectionEnd != cursorPosition)   writeText(""); else   deleteFromCursor(getNthWordFromCursor(p_146177_1_) - cursorPosition);}  }
class C{  public ManagementException(Throwable cause){  super(cause);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public static synchronized long environmentPointer(@Nullable String gridName){  PlatformProcessor proc=instance(gridName);  return proc != null ? proc.environmentPointer() : 0;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] points=new double[5][2];  System.out.print("Enter five points: ");  for (int i=0; i < points.length; i++) {    for (int j=0; j < points[i].length; j++) {      points[i][j]=input.nextDouble();    }  }  System.out.println("The five points are" + (sameLine(points) ? " " : " not ") + "on the same line");}  }
class C{  private boolean verifyResult(Object result,String[] expected){  assert expected.length == 1 : "Single-valued test expecting " + expected.length + " results";  return expected[0].equals(String.valueOf(result));}  }
class C{  private boolean qualifiesNotNode(final IAbstractCriteriumTreeNode node,final NaviNode naviNode){  final List<? extends IAbstractCriteriumTreeNode> children=node.getChildren();  if (children.size() != 1) {    throw new IllegalStateException("IE01142: NOT operator has more or less than one child criterium.");  }  return !qualifies(children.get(0),naviNode);}  }
class C{  public boolean isFree(){  return free;}  }
class C{  public GeoPoint[] findArcDistancePoints(final PlanetModel planetModel,final double arcDistanceValue,final GeoPoint startPoint,final Membership... bounds){  if (Math.abs(D) >= MINIMUM_RESOLUTION) {    throw new IllegalStateException("Can't find arc distance using plane that doesn't go through origin");  }  if (!evaluateIsZero(startPoint)) {    throw new IllegalArgumentException("Start point is not on plane");  }  assert Math.abs(x * x + y * y + z * z - 1.0) < MINIMUM_RESOLUTION_SQUARED : "Plane needs to be normalized";  final double azimuthMagnitude=Math.sqrt(this.x * this.x + this.y * this.y);  final double cosPlaneAltitude=this.z;  final double sinPlaneAltitude=azimuthMagnitude;  final double cosPlaneAzimuth=this.x / azimuthMagnitude;  final double sinPlaneAzimuth=this.y / azimuthMagnitude;  assert Math.abs(sinPlaneAltitude * sinPlaneAltitude + cosPlaneAltitude * cosPlaneAltitude - 1.0) < MINIMUM_RESOLUTION : "Improper sin/cos of altitude: " + (sinPlaneAltitude * sinPlaneAltitude + cosPlaneAltitude * cosPlaneAltitude);  assert Math.abs(sinPlaneAzimuth * sinPlaneAzimuth + cosPlaneAzimuth * cosPlaneAzimuth - 1.0) < MINIMUM_RESOLUTION : "Improper sin/cos of azimuth: " + (sinPlaneAzimuth * sinPlaneAzimuth + cosPlaneAzimuth * cosPlaneAzimuth);  final double x0=startPoint.x;  final double y0=startPoint.y;  final double z0=startPoint.z;  final double x1=x0 * cosPlaneAzimuth + y0 * sinPlaneAzimuth;  final double y1=-x0 * sinPlaneAzimuth + y0 * cosPlaneAzimuth;  final double z1=z0;  final double x2=x1 * cosPlaneAltitude - z1 * sinPlaneAltitude;  final double y2=y1;  final double z2=+x1 * sinPlaneAltitude + z1 * cosPlaneAltitude;  assert Math.abs(z2) < MINIMUM_RESOLUTION : "Rotation should have put startpoint on x-y plane, instead has value " + z2;  final double startAngle=Math.atan2(y2,x2);  final double point1Angle=startAngle + arcDistanceValue;  final double point2Angle=startAngle - arcDistanceValue;  final double point1x2=Math.cos(point1Angle);  final double point1y2=Math.sin(point1Angle);  final double point1z2=0.0;  final double point2x2=Math.cos(point2Angle);  final double point2y2=Math.sin(point2Angle);  final double point2z2=0.0;  final double point1x1=point1x2 * cosPlaneAltitude + point1z2 * sinPlaneAltitude;  final double point1y1=point1y2;  final double point1z1=-point1x2 * sinPlaneAltitude + point1z2 * cosPlaneAltitude;  final double point2x1=point2x2 * cosPlaneAltitude + point2z2 * sinPlaneAltitude;  final double point2y1=point2y2;  final double point2z1=-point2x2 * sinPlaneAltitude + point2z2 * cosPlaneAltitude;  final double point1x0=point1x1 * cosPlaneAzimuth - point1y1 * sinPlaneAzimuth;  final double point1y0=point1x1 * sinPlaneAzimuth + point1y1 * cosPlaneAzimuth;  final double point1z0=point1z1;  final double point2x0=point2x1 * cosPlaneAzimuth - point2y1 * sinPlaneAzimuth;  final double point2y0=point2x1 * sinPlaneAzimuth + point2y1 * cosPlaneAzimuth;  final double point2z0=point2z1;  final GeoPoint point1=planetModel.createSurfacePoint(point1x0,point1y0,point1z0);  final GeoPoint point2=planetModel.createSurfacePoint(point2x0,point2y0,point2z0);  boolean isPoint1Inside=meetsAllBounds(point1,bounds);  boolean isPoint2Inside=meetsAllBounds(point2,bounds);  if (isPoint1Inside) {    if (isPoint2Inside) {      return new GeoPoint[]{point1,point2};    } else {      return new GeoPoint[]{point1};    }  } else {    if (isPoint2Inside) {      return new GeoPoint[]{point2};    } else {      return new GeoPoint[0];    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 1) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }    }    try {      updateProgress("Performing operation (progress will not be updated):",-1);      g1=factory.buildGeometry(inputGeometryList);      outputGeometry=g1.buffer(0);    } catch (    Exception e) {      showFeedback("Error during analysis.");      return;    }    ShapeFile output=null;    if (outputGeometry instanceof GeometryCollection) {      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      output=new ShapeFile(outputFile,outputShapeType,fields);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  Workflow.Method removeVplexVolumesFromSRDFTargetCGMethod(URI vplexURI,List<URI> vplexVolumeURIs){  return new Workflow.Method("removeVplexVolumesFromSRDFTargetCG",vplexURI,vplexVolumeURIs);}  }
class C{  public void sort(){  java.util.Arrays.sort(objs,0,numObjs);}  }
class C{  protected void flow(Env<AttrContext> env,Queue<Env<AttrContext>> results){  try {    if (shouldStop(CompileState.FLOW))     return;    if (relax || compileStates.isDone(env,CompileState.FLOW)) {      results.add(env);      return;    }    if (verboseCompilePolicy)     printNote("[flow " + env.enclClass.sym + "]");    JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);    try {      make.at(Position.FIRSTPOS);      TreeMaker localMake=make.forToplevel(env.toplevel);      flow.analyzeTree(env,localMake);      compileStates.put(env,CompileState.FLOW);      if (shouldStop(CompileState.FLOW))       return;      results.add(env);    }  finally {      log.useSource(prev);    }  }  finally {    if (!taskListener.isEmpty()) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);      taskListener.finished(e);    }  }}  }
class C{  public int numLeaves(int leafCounter){  if (!m_isLeaf) {    m_leafModelNum=0;    if (m_left != null) {      leafCounter=m_left.numLeaves(leafCounter);    }    if (m_right != null) {      leafCounter=m_right.numLeaves(leafCounter);    }  } else {    leafCounter++;    m_leafModelNum=leafCounter;  }  return leafCounter;}  }
class C{  @Override public boolean equals(Object o){  if (o != null) {    if (this == o)     return true;    if (o instanceof PLVector3)     return this.equals((PLVector3)o);  }  return false;}  }
class C{  public String globalInfo(){  return "Transforms numeric attributes using a given transformation method.";}  }
class C{  private AklToussaint(){}  }
class C{  public static void copyFile(@NonNull String pathFrom,@NonNull String pathTo) throws IOException {  if (pathFrom.equalsIgnoreCase(pathTo)) {    return;  }  FileChannel outputChannel=null;  FileChannel inputChannel=null;  try {    inputChannel=new FileInputStream(new File(pathFrom)).getChannel();    outputChannel=new FileOutputStream(new File(pathTo)).getChannel();    inputChannel.transferTo(0,inputChannel.size(),outputChannel);    inputChannel.close();  }  finally {    if (inputChannel != null)     inputChannel.close();    if (outputChannel != null)     outputChannel.close();  }}  }
class C{  private HadoopShuffleJob<UUID> newJob(HadoopJobId jobId) throws IgniteCheckedException {  HadoopMapReducePlan plan=ctx.jobTracker().plan(jobId);  HadoopShuffleJob<UUID> job=new HadoopShuffleJob<>(ctx.localNodeId(),log,ctx.jobTracker().job(jobId,null),mem,plan.reducers(),plan.reducers(ctx.localNodeId()));  UUID[] rdcAddrs=new UUID[plan.reducers()];  for (int i=0; i < rdcAddrs.length; i++) {    UUID nodeId=plan.nodeForReducer(i);    assert nodeId != null : "Plan is missing node for reducer [plan=" + plan + ", rdc="+ i+ ']';    rdcAddrs[i]=nodeId;  }  boolean init=job.initializeReduceAddresses(rdcAddrs);  assert init;  return job;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean valid(Class type) throws Exception {  return lookup(type) != null;}  }
class C{  protected ArrayList<KeyNamePair> loadInvoiceData(int C_BPartner_ID){  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();  StringBuffer display=new StringBuffer("i.DocumentNo||' - '||").append(DB.TO_CHAR("DateInvoiced",DisplayType.Date,Env.getAD_Language(Env.getCtx()))).append("|| ' - ' ||").append(DB.TO_CHAR("GrandTotal",DisplayType.Amount,Env.getAD_Language(Env.getCtx())));  StringBuffer sql=new StringBuffer("SELECT i.C_Invoice_ID,").append(display).append(" FROM C_Invoice i " + "WHERE i.C_BPartner_ID=? AND i.IsSOTrx='N' AND i.DocStatus IN ('CL','CO')" + " AND i.C_Invoice_ID IN "+ "(SELECT il.C_Invoice_ID FROM C_InvoiceLine il"+ " LEFT OUTER JOIN M_MatchInv mi ON (il.C_InvoiceLine_ID=mi.C_InvoiceLine_ID) "+ " JOIN C_Invoice i2 ON (il.C_Invoice_ID = i2.C_Invoice_ID) "+ " WHERE i2.C_BPartner_ID=? AND i2.IsSOTrx='N' AND i2.DocStatus IN ('CL','CO') "+ "GROUP BY il.C_Invoice_ID,mi.C_InvoiceLine_ID,il.QtyInvoiced "+ "HAVING (il.QtyInvoiced<>SUM(mi.Qty) AND mi.C_InvoiceLine_ID IS NOT NULL)"+ " OR mi.C_InvoiceLine_ID IS NULL) "+ "ORDER BY i.DateInvoiced");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,C_BPartner_ID);    pstmt.setInt(2,C_BPartner_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  return list;}  }
class C{  public NeuralNetwork(int input,int[] hidden){  this.input=new InputUnit[input];  this.hidden=new HiddenUnit[hidden.length][];  for (int i=0; i < hidden.length; i++)   this.hidden[i]=new HiddenUnit[hidden[i]];  for (int i=0; i < input; i++)   this.input[i]=new InputUnit();  for (int i=0; i < hidden.length; i++)   for (int j=0; j < hidden[i]; j++)   if (i == 0)   this.hidden[i][j]=new HiddenUnit(this.input,random); else   this.hidden[i][j]=new HiddenUnit(this.hidden[i - 1],random);}  }
class C{  public final void print(int i) throws IOException {  if (i == 0x80000000) {    print("-2147483648");    return;  }  if (i < 0) {    write('-');    i=-i;  } else   if (i < 9) {    write('0' + i);    return;  }  int length=0;  int exp=10;  if (i >= 1000000000) {    length=9;  } else {    for (; exp <= i; length++) {      exp=10 * exp;    }  }  require(length);  byte[] buffer=_writeBuffer;  int writeLength=_writeLength;  writeLength+=length;  _writeLength=writeLength + 1;  for (int j=0; j <= length; j++) {    buffer[writeLength - j]=(byte)(i % 10 + '0');    i=i / 10;  }}  }
class C{  public void addAvailableLoad(AvailableLoad availableLoad,@Nonnull ValueNumber[] value){  Objects.requireNonNull(value);  getUpdateableAvailableLoadMap().put(availableLoad,value);  for (  ValueNumber v : value) {    getUpdateablePreviouslyKnownAs().put(v,availableLoad);    if (RLE_DEBUG) {      System.out.println("Adding available load of " + availableLoad + " for "+ v+ " to "+ System.identityHashCode(this));    }  }}  }
class C{  public VideoQuality(){}  }
class C{  public AbstractPersistentConcurrentOffHeapMap(Factory<? extends Segment<K,V>> segmentFactory){  super(segmentFactory);}  }
class C{  public void runNow(){  gcExecutorLoop.setDependencyTracker(_dataObjectScanner.getDependencyTracker());  Future f=_executor.submit(gcExecutorLoop,0);  _log.info("Waiting for GC job to finish ...");  try {    f.get();  } catch (  ExecutionException|InterruptedException ex) {  }  _log.info("GC job finished.");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDscalerDoubleRefresh(evalBool(stack.pop()));  return null;}  }
class C{  public static boolean hasJavaVersion(JAVA_VERSION version){  return (Version.compareVersions(getJavaVersion(),version.get()) > 0) ? true : false;}  }
class C{  private EventNode read() throws Exception {  int event=parser.next();  if (event != END_DOCUMENT) {    if (event == START_TAG) {      return start();    }    if (event == TEXT) {      return text();    }    if (event == END_TAG) {      return end();    }    return read();  }  return null;}  }
class C{  String publicNameFromDiskName(String diskName){  if (!shouldDiskNameBeVisible(diskName)) {    throw new IllegalArgumentException("disk file should not be visible: " + diskName);  }  return diskName.substring(mFilePrefix.length(),diskName.length());}  }
class C{  protected String findFileName(String[] searchPaths,String partialFile){  if (searchPaths == null || searchPaths.length == 0) {    return null;  }  for (int i=0; i < searchPaths.length; i++) {    String dtedFileName=searchPaths[i] + partialFile;    if (BinaryFile.exists(dtedFileName)) {      return dtedFileName;    }  }  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String args[]) throws ParseException {  String rou[]={"Privacy: none\n","Privacy: none;id;user\n"};  for (int i=0; i < rou.length; i++) {    PrivacyParser rp=new PrivacyParser(rou[i]);    PrivacyList list=(PrivacyList)rp.parse();    System.out.println("encoded = " + list.encode());  }}  }
class C{  private void computeFirstHour(){  mFirstHour=(mViewStartY + mCellHeight + HOUR_GAP - 1) / (mCellHeight + HOUR_GAP);  mFirstHourOffset=mFirstHour * (mCellHeight + HOUR_GAP) - mViewStartY;}  }
class C{  public static void checkString(String text,IonValue value){  checkType(IonType.STRING,value);  IonString str=(IonString)value;  assertEquals("string content",text,str.stringValue());}  }
class C{  public File newFile() throws IOException {  return File.createTempFile("junit",null,getRoot());}  }
class C{  protected void put(Throwable throwable){  if (!exceptionsMap.containsKey(throwable)) {    AutomonExpirable automonExpirable=new AutomonExpirable();    automonExpirable.setThrowable(throwable);    exceptionsMap.put(throwable,automonExpirable);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ASSIGNMENT_EXPRESSION__LHS:    return getLhs();case N4JSPackage.ASSIGNMENT_EXPRESSION__OP:  return getOp();case N4JSPackage.ASSIGNMENT_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public BiosCommandResult doCancelReplicationPolicy(StorageSystem system,String policyName,TaskCompleter taskCompleter){  IsilonSyncPolicy policy=null;  try {    IsilonApi isi=getIsilonDevice(system);    try {      policy=isi.getReplicationPolicy(policyName);    } catch (    IsilonException e) {      policy=null;      return BiosCommandResult.createSuccessfulResult();    }    if (policy != null) {      JobState policyState=policy.getLastJobState();      if (policyState.equals(JobState.running) || policyState.equals(JobState.paused)) {        _log.info("Canceling Replication Policy  -{} because policy is in - {} state ",policyName,policyState);        IsilonSyncPolicy modifiedPolicy=new IsilonSyncPolicy();        modifiedPolicy.setName(policyName);        modifiedPolicy.setLastJobState(JobState.canceled);        isi.modifyReplicationPolicy(policyName,modifiedPolicy);        IsilonSyncIQJob isiSyncJobcancel=null;        try {          isiSyncJobcancel=new IsilonSyncIQJob(policyName,system.getId(),taskCompleter,policyName);          ControllerServiceImpl.enqueueJob(new QueueJob(isiSyncJobcancel));          return BiosCommandResult.createPendingResult();        } catch (        Exception ex) {          _log.error("Cancel Replication Job Failed ",ex);          ServiceError error=DeviceControllerErrors.isilon.jobFailed("Cancel Replication Job Failed as:" + ex.getMessage());          if (taskCompleter != null) {            taskCompleter.error(_dbClient,error);          }          return BiosCommandResult.createErrorResult(error);        }      } else {        return BiosCommandResult.createSuccessfulResult();      }    }    return BiosCommandResult.createSuccessfulResult();  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  @Override public void resolve(SerializerProvider provider) throws JsonMappingException {  if (_valueSerializer == null) {    if (provider.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING) || Modifier.isFinal(_accessorMethod.getReturnType().getModifiers())) {      JavaType t=provider.constructType(_accessorMethod.getGenericReturnType());      _valueSerializer=provider.findTypedValueSerializer(t,false,_property);      _forceTypeInformation=isNaturalTypeWithStdHandling(t,_valueSerializer);    }  }}  }
class C{  public static boolean isVoid(TypeArgument ref0){  if (ref0 instanceof TypeRef) {    TypeRef ref=(TypeRef)ref0;    return (ref.getDeclaredType() instanceof VoidType);  }  return false;}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public FUPropertyEditor(){}  }
class C{  public boolean isNoFallthroughCasesInSwitch(){  return noFallthroughCasesInSwitch;}  }
class C{  public void enableControls(){  VOLUME.setEnabled(true);  PAUSE_BUTTON.setEnabled(true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.KEY_DEFINITION___DEFAULT_KEY_1:    getDefaultKey_1().clear();  return;case UmplePackage.KEY_DEFINITION___KEY_1:getKey_1().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public JsonMappingException weirdStringException(Class<?> instClass,String msg){  return JsonMappingException.from(_parser,"Can not construct instance of " + instClass.getName() + " from String value '"+ _valueDesc()+ "': "+ msg);}  }
class C{  public static void enable(Composite composite,boolean enabled){  for (  Control control : composite.getChildren()) {    if (Composite.class.isInstance(control)) {      enable((Composite)control,enabled);    }    if (Label.class.isInstance(control)) {      continue;    }    control.setEnabled(enabled);  }  composite.setEnabled(enabled);}  }
class C{  public Object credentials(){  return cred;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  returnNumberToInterpolate=args[2].toLowerCase();  resolution=Double.parseDouble(args[3]);  excludeNeverClassified=Boolean.parseBoolean(args[4]);  excludeUnclassified=Boolean.parseBoolean(args[5]);  excludeBareGround=Boolean.parseBoolean(args[6]);  excludeLowVegetation=Boolean.parseBoolean(args[7]);  excludeMediumVegetation=Boolean.parseBoolean(args[8]);  excludeHighVegetation=Boolean.parseBoolean(args[9]);  excludeBuilding=Boolean.parseBoolean(args[10]);  excludeLowPoint=Boolean.parseBoolean(args[11]);  excludeModelKeyPoint=Boolean.parseBoolean(args[12]);  excludeWater=Boolean.parseBoolean(args[13]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    maxDist=(resolution * 2) * (resolution * 2);    PointRecord point;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < las.getNumPointRecords(); a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      str1="Data Scale:\tcontinuous";      out.println(str1);      str1="Preferred Palette:\t" + "spectrum.pal";      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      int numPointsToUse=10;      int numPointsInArea=0;      boolean flag=false;      int maxIteration=20;      int k=0;      double halfResolution=resolution / 2;      double area=Math.PI * maxDist;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          numPointsToUse=10;          flag=false;          k=0;          do {            k++;            results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);            for (i=0; i < results.size(); i++) {              if (results.get(i).distance > maxDist) {                flag=true;              }            }            if (!flag) {              numPointsToUse=numPointsToUse * 2;            }          } while (!flag && k < maxIteration);          numPointsInArea=0;          for (i=0; i < results.size(); i++) {            if (results.get(i).distance <= maxDist) {              numPointsInArea++;            }          }          image.setValue(row,col,numPointsInArea / area);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Calculating point density:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static Instruction resolveMember(Instruction s,IR ir){  Operand memberOp=Unary.getClearVal(s);  RegisterOperand offset=Unary.getClearResult(s);  int dictId;  if (memberOp instanceof LocationOperand) {    dictId=((LocationOperand)memberOp).getFieldRef().getId();  } else {    dictId=((MethodOperand)memberOp).getMemberRef().getId();  }  BranchProfileOperand bp=BranchProfileOperand.never();  BasicBlock predBB=s.getBasicBlock();  BasicBlock succBB=predBB.splitNodeAt(s.prevInstructionInCodeOrder(),ir);  BasicBlock testBB=predBB.createSubBlock(s.getBytecodeIndex(),ir,1f - bp.takenProbability);  BasicBlock resolveBB=predBB.createSubBlock(s.getBytecodeIndex(),ir,bp.takenProbability);  s.remove();  RegisterOperand offsetTable=getStatic(testBB.lastInstruction(),ir,Entrypoints.memberOffsetsField);  testBB.appendInstruction(Load.create(INT_LOAD,offset.copyRO(),offsetTable,AC(Offset.fromIntZeroExtend(dictId << LOG_BYTES_IN_INT)),new LocationOperand(TypeReference.Int),TG()));  testBB.appendInstruction(Unary.create(INT_2ADDRSigExt,offset,offset.copy()));  testBB.appendInstruction(IfCmp.create(REF_IFCMP,ir.regpool.makeTempValidation(),offset.copy(),AC(Address.fromIntSignExtend(NEEDS_DYNAMIC_LINK)),ConditionOperand.EQUAL(),resolveBB.makeJumpTarget(),bp));  resolveBB.appendInstruction(CacheOp.mutate(s,RESOLVE,memberOp));  resolveBB.appendInstruction(testBB.makeGOTO());  predBB.insertOut(testBB);  ir.cfg.linkInCodeOrder(predBB,testBB);  testBB.insertOut(succBB);  testBB.insertOut(resolveBB);  ir.cfg.linkInCodeOrder(testBB,succBB);  resolveBB.insertOut(testBB);  ir.cfg.addLastInCodeOrder(resolveBB);  return testBB.lastInstruction();}  }
class C{  private void initPrimaryBackupMaps(){  Map<UUID,Set<Integer>> tmpPrm=new HashMap<>();  Map<UUID,Set<Integer>> tmpBkp=new HashMap<>();  for (int partsCnt=assignment.size(), p=0; p < partsCnt; p++) {    Map<UUID,Set<Integer>> tmp=tmpPrm;    Map<UUID,Set<Integer>> map=primary;    for (    ClusterNode node : assignment.get(p)) {      UUID id=node.id();      Set<Integer> set=tmp.get(id);      if (set == null) {        tmp.put(id,set=new HashSet<>());        map.put(id,Collections.unmodifiableSet(set));      }      set.add(p);      tmp=tmpBkp;      map=backup;    }  }}  }
class C{  public CLIQUESubspace(long[] dimensions){  super(dimensions);  denseUnits=new ArrayList<>();  coverage=0;}  }
class C{  private void checkIterator(Direction dir,boolean endInclusive){  final boolean keyGenMatches=(lastKeyGen == storeData.persistitKey.getGeneration());  if ((itDir != dir) || !keyGenMatches) {    if (keyGenMatches) {      if ((itDir == GTEQ && dir == GT) || (itDir == LTEQ && dir == LT)) {        itDir=dir;        return;      }    }    final int saveSize=storeData.persistitKey.getEncodedSize();    final boolean exact=dir == EQ || dir == GTEQ || dir == LTEQ;    final boolean reverse=(dir == LT) || (dir == LTEQ);    final boolean exactEnd=endInclusive;    assert storeData.nudgeDir == null;    if (!KeyShim.isSpecial(storeData.persistitKey) && !exact) {      if (reverse) {        KeyShim.nudgeLeft(storeData.persistitKey);        storeData.nudgeDir=FDBStoreData.NudgeDir.LEFT;      } else {        KeyShim.nudgeDeeper(storeData.persistitKey);        storeData.nudgeDir=FDBStoreData.NudgeDir.DEEPER;      }    }    adapter.getUnderlyingStore().indexIterator(adapter.getSession(),storeData,true,exact,exactEnd,reverse,adapter.scanOptions());    storeData.nudgeDir=null;    storeData.persistitKey.setEncodedSize(saveSize);    lastKeyGen=storeData.persistitKey.getGeneration();    itDir=dir;  }}  }
class C{  public SauceLabsIntegration sauceLabs(){  return sauceLabsIntegration;}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public GSSContextImpl(GSSManagerImpl gssManager,GSSCredential myCred) throws GSSException {  this.gssManager=gssManager;  this.myCred=(GSSCredentialImpl)myCred;  initiator=false;}  }
class C{  public boolean isDistributable(){  return distributable;}  }
class C{  public void writeElementList(String tagName,Collection<String> listValues){  for (  String listValue : listValues) {    openTag(tagName);    writeText(listValue);    closeTag(tagName);  }}  }
class C{  @Override public int read() throws IOException {  if (finished) {    return (outputIndex == outputLength) ? -1 : outputBuffer[outputIndex++] & 0xFF;  }  if (outputIndex < outputLength) {    return outputBuffer[outputIndex++] & 0xFF;  }  outputIndex=0;  outputLength=0;  while (outputLength == 0) {    int outputSize=cipher.getOutputSize(inputBuffer.length);    if ((outputBuffer == null) || (outputBuffer.length < outputSize)) {      this.outputBuffer=new byte[outputSize];    }    int byteCount=in.read(inputBuffer);    if (byteCount == -1) {      try {        outputLength=cipher.doFinal(outputBuffer,0);      } catch (      Exception e) {        throw new IOException("Error while finalizing cipher",e);      }      finished=true;      break;    }    try {      outputLength=cipher.update(inputBuffer,0,byteCount,outputBuffer,0);    } catch (    ShortBufferException e) {      throw new AssertionError(e);    }  }  return read();}  }
class C{  public void initialize(int gsmSignalStrength,int gsmBitErrorRate,int cdmaDbm,int cdmaEcio,int evdoDbm,int evdoEcio,int evdoSnr,int lteSignalStrength,int lteRsrp,int lteRsrq,int lteRssnr,int lteCqi,boolean gsm){  mGsmSignalStrength=gsmSignalStrength;  mGsmBitErrorRate=gsmBitErrorRate;  mCdmaDbm=cdmaDbm;  mCdmaEcio=cdmaEcio;  mEvdoDbm=evdoDbm;  mEvdoEcio=evdoEcio;  mEvdoSnr=evdoSnr;  mLteSignalStrength=lteSignalStrength;  mLteRsrp=lteRsrp;  mLteRsrq=lteRsrq;  mLteRssnr=lteRssnr;  mLteCqi=lteCqi;  mTdScdmaRscp=INVALID;  isGsm=gsm;  if (DBG)   log("initialize: " + toString());}  }
class C{  public void onFfmpegSelected(File selection){  if (selection == null) {    System.err.println("The VideoExport library requires ffmpeg but it was not found. " + "Please try again or read the documentation.");  } else {    String ffmpeg_path=selection.getAbsolutePath();    settings.put(SETTINGS_FFMPEG_PATH,ffmpeg_path);    startFfmpeg(ffmpeg_path);  }}  }
class C{  protected JavacTypes(Context context){  setContext(context);}  }
class C{  public ConstantOptionletVolatility(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc,final Handle<Quote> vol,final DayCounter dc){  super(settlementDays,cal,bdc,dc);  this.volatility_=vol;  volatility_.addObserver(this);}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  private boolean isSingle(String subreddit){  return !(isSpecial(subreddit) || subreddit.contains("+") || subreddit.contains(".")|| subreddit.contains(MULTI_REDDIT));}  }
class C{  public ResolvedEvent(EventStoreClientMessages.ResolvedEvent event){  this.event=(event.hasEvent()) ? new RecordedEvent(event.getEvent()) : null;  this.link=(event.hasLink()) ? new RecordedEvent(event.getLink()) : null;  this.originalPosition=new Position(event.getCommitPosition(),event.getPreparePosition());}  }
class C{  public PrimitiveType toPrimitive(){  if (this.isBoxedPrimitive()) {    return new PrimitiveType(PrimitiveTypes.toUnboxedType(this.getRuntimeClass()));  }  throw new IllegalArgumentException("Type must be boxed primitive");}  }
class C{  void attemptDeadServiceRecovery(Exception e){  Log.e(TAG,"NFC Adapter Extras dead - attempting to recover");  mAdapter.attemptDeadServiceRecovery(e);  initService(mAdapter);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void test_setEndRuleIIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,0);  st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setEndRule(12,-1,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,10,Calendar.SUNDAY,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,-1,8,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,-10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public static <T>void writeCollection(BinaryRawWriterEx writer,Collection<T> col){  writeCollection(writer,col,null,null);}  }
class C{  public void resetServerState() throws SQLException {  if (!getParanoid() && ((this.io != null) && versionMeetsMinimum(4,0,6))) {    changeUser(this.user,this.password);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    MovingAverageSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  protected <X>X fromBytes(byte[] bytes) throws IgniteCheckedException {  if (bytes == null || bytes.length == 0)   return null;  return marsh.unmarshal(bytes,getClass().getClassLoader());}  }
class C{  public TurkishLowerCaseFilter(TokenStream in){  super(in);}  }
class C{  private static int count(String str,char a,int high){  if (high < 0)   return 0; else   if (str.charAt(high) == a) {    return 1 + count(str,a,high - 1);  } else   return count(str,a,high - 1);}  }
class C{  private int fetchIntegerValue() throws BerException {  int result=0;  final int backup=next;  try {    final int length=fetchLength();    if (length <= 0)     throw new BerException();    if (length > (bytes.length - next))     throw new IndexOutOfBoundsException("Decoded length exceeds buffer");    final int end=next + length;    result=bytes[next++];    while (next < end) {      final byte b=bytes[next++];      if (b < 0) {        result=(result << 8) | (256 + b);      } else {        result=(result << 8) | b;      }    }  } catch (  BerException e) {    next=backup;    throw e;  }catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }catch (  ArithmeticException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  public double nextDouble(){  int y;  int z;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53);}  }
class C{  public IMarker createMarker() throws CoreException {  IMarker marker=resource.createMarker(type);  marker.setAttributes(attributes);  return marker;}  }
class C{  public boolean isBorder(){  for (int i=0; i < 3; i++) {    if (getAdjacentTriangleAcrossEdge(i) == null)     return true;  }  return false;}  }
class C{  public RemoteContainerStub(){  this(null);}  }
class C{  public MyFunctionExecutionException(){}  }
class C{  public static int compare(Location a,Location b){  return Integer.compare(ORDERED_ZONES.indexOf(a.uuid),ORDERED_ZONES.indexOf(b.uuid));}  }
class C{  public void didCommit(){}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  private void updateOptionPaneState(){  int type=-2;  boolean closable=wasClosable;  Object obj=frame.getClientProperty("JInternalFrame.messageType");  if (obj == null) {    return;  }  if (obj instanceof Integer) {    type=((Integer)obj).intValue();  }switch (type) {case JOptionPane.ERROR_MESSAGE:    selectedBackgroundKey="OptionPane.errorDialog.titlePane.background";  selectedForegroundKey="OptionPane.errorDialog.titlePane.foreground";selectedShadowKey="OptionPane.errorDialog.titlePane.shadow";closable=false;break;case JOptionPane.QUESTION_MESSAGE:selectedBackgroundKey="OptionPane.questionDialog.titlePane.background";selectedForegroundKey="OptionPane.questionDialog.titlePane.foreground";selectedShadowKey="OptionPane.questionDialog.titlePane.shadow";closable=false;break;case JOptionPane.WARNING_MESSAGE:selectedBackgroundKey="OptionPane.warningDialog.titlePane.background";selectedForegroundKey="OptionPane.warningDialog.titlePane.foreground";selectedShadowKey="OptionPane.warningDialog.titlePane.shadow";closable=false;break;case JOptionPane.INFORMATION_MESSAGE:case JOptionPane.PLAIN_MESSAGE:selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;closable=false;break;default :selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;break;}if (closable != frame.isClosable()) {frame.setClosable(closable);}}  }
class C{  private TextImpl firstTextNodeInCurrentRun(){  TextImpl firstTextInCurrentRun=this;  for (Node p=getPreviousSibling(); p != null; p=p.getPreviousSibling()) {    short nodeType=p.getNodeType();    if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {      firstTextInCurrentRun=(TextImpl)p;    } else {      break;    }  }  return firstTextInCurrentRun;}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public String[] list() throws IOException {  if (isFile() && !isHidden())   return getFSFile().list();  if (isSMB())   try {    final SmbFile sf=getSmbFile();    if (!sf.isDirectory() || sf.isHidden())     return null;    try {      return TimeoutRequest.list(sf,SMB_TIMEOUT);    } catch (    final SmbException e) {      throw new IOException("SMB.list SmbException for " + sf.toString() + ": "+ e.getMessage());    }  } catch (  final MalformedURLException e) {    throw new IOException("SMB.list MalformedURLException for " + toNormalform(false) + ": "+ e.getMessage());  }  return null;}  }
class C{  public void traverse(){  while (root.hasChildren()) {    this.visit(root);    this.await();  }}  }
class C{  public void deleteChar(AttributedCharacterIterator newParagraph,int deletePos){  fStart=newParagraph.getBeginIndex();  int end=newParagraph.getEndIndex();  if (end - fStart != fChars.length - 1) {    initAll(newParagraph);  }  char[] newChars=new char[end - fStart];  int changedIndex=deletePos - fStart;  System.arraycopy(fChars,0,newChars,0,deletePos - fStart);  System.arraycopy(fChars,changedIndex + 1,newChars,changedIndex,end - deletePos);  fChars=newChars;  if (fBidi != null) {    fBidi=new Bidi(newParagraph);    if (fBidi.isLeftToRight()) {      fBidi=null;    }  }  fParagraph=StyledParagraph.deleteChar(newParagraph,fChars,deletePos,fParagraph);  invalidateComponents();}  }
class C{  protected void addActionExceptionWarning(Exception e){  String msg=e.getMessage();  if (msg != null) {    warnings.add(msg);  }}  }
class C{  private static boolean isFiveBytesSequence(byte b){  return -8 <= b && b <= -5;}  }
class C{  public static long secondsSinceMillis(long timeInMillis){  return (System.currentTimeMillis() - timeInMillis) / 1000;}  }
class C{  public void clear(){  this.chartArea.setRect(0.0,0.0,0.0,0.0);  this.plotInfo=new PlotRenderingInfo(this);  if (this.entities != null) {    this.entities.clear();  }}  }
class C{  private Attribute convertToOpenSamlAttribute(PrincipalAttribute principalAttribute){  assert principalAttribute != null;  XMLObjectBuilderFactory builderFactory=Configuration.getBuilderFactory();  @SuppressWarnings("unchecked") XMLObjectBuilder<Attribute> builder=builderFactory.getBuilder(Attribute.DEFAULT_ELEMENT_NAME);  Attribute attribute=builder.buildObject(Attribute.DEFAULT_ELEMENT_NAME);  attribute.setName(principalAttribute.getName());  attribute.setNameFormat(principalAttribute.getNameFormat());  String friendlyName=principalAttribute.getFriendlyName();  if (friendlyName != null) {    attribute.setFriendlyName(friendlyName);  }  String[] values=principalAttribute.getValues();  if (values != null) {    @SuppressWarnings("unchecked") final XMLObjectBuilder<XSString> stringBuilder=builderFactory.getBuilder(XSString.TYPE_NAME);    for (    String value : values) {      XSString attributeVal=stringBuilder.buildObject(AttributeValue.DEFAULT_ELEMENT_NAME,XSString.TYPE_NAME);      attributeVal.setValue(value);      attribute.getAttributeValues().add(attributeVal);    }  }  log.debug("Created Attribute - name: {}, nameFormat: {}",principalAttribute.getName(),principalAttribute.getNameFormat());  return attribute;}  }
class C{  public static NalUnitHeader extract(byte[] h264Packet){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  NalUnitHeader header=new NalUnitHeader(false,0,0);  extract(h264Packet,header);  return header;}  }
class C{  public void removeAllSeries(){  for (int i=0; i < this.seriesList.size(); i++) {    MatrixSeries series=(MatrixSeries)this.seriesList.get(i);    series.removeChangeListener(this);  }  this.seriesList.clear();  fireDatasetChanged();}  }
class C{  public static SelectorProvider create(){  return new sun.nio.ch.KQueueSelectorProvider();}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Override public void putAll(Map m){  Iterator<Map.Entry> iter=m.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry entry=iter.next();    put(entry.getKey(),entry.getValue());  }}  }
class C{  public boolean removeKey(long key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.values[i]=null;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public Boolean isVAssertsEnabled(){  return vAssertsEnabled;}  }
class C{  public ResponseBody body(){  return this.response.body();}  }
class C{  public void updateVdcTargetVersion(String siteId,String action,long vdcTargetVersion,String sourceSiteUUID,String targetSiteUUID) throws Exception {  SiteInfo siteInfo;  SiteInfo currentSiteInfo=coordinator.getTargetInfo(siteId,SiteInfo.class);  String targetDataRevision=null;  if (currentSiteInfo != null) {    targetDataRevision=currentSiteInfo.getTargetDataRevision();  } else {    targetDataRevision=SiteInfo.DEFAULT_TARGET_VERSION;  }  siteInfo=new SiteInfo(vdcTargetVersion,action,targetDataRevision,ActionScope.SITE,sourceSiteUUID,targetSiteUUID);  coordinator.setTargetInfo(siteId,siteInfo);  log.info("VDC target version updated to {} for site {}",siteInfo,siteId);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  private void initRecyclerView(){  CycleBinder cycleBinder=planAdapter.getCycleBinder();  OfferBinder offerBinder=planAdapter.getOfferBinder();  recyclerView.setAdapter(planAdapter);  RecyclerView.LayoutManager layoutManager=new LinearLayoutManager(getActivity());  recyclerView.setLayoutManager(layoutManager);  recyclerView.setItemAnimator(new DefaultItemAnimator());  presenter.acceptOffers(offerBinder.getOfferAcceptStream());  presenter.dismissOffer(offerBinder.getOfferDismissStream());  presenter.dismissOffer(offerModel.getUndoOfferRemoveStream());  presenter.undoAcceptOffer(offerBinder.getUndoAcceptStream());}  }
class C{  protected void onModalTriggerClick(AjaxRequestTarget target){}  }
class C{  public boolean layerHasCoordinateSystem(String[] layerNames,String coordSys){  if (layerNames == null || layerNames.length == 0) {    String message=Logging.getMessage("nullValue.WMSLayerNames");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(coordSys)) {    String message=Logging.getMessage("nullValue.WMSCoordSys");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  for (  String name : layerNames) {    WMSLayerCapabilities layerCaps=this.getLayerByName(name);    if (layerCaps == null || !layerCaps.hasCoordinateSystem(coordSys))     return false;  }  return true;}  }
class C{  public void hideTooltip(){  logger.trace("Hiding tooltip...");  hideRequested=false;  super.hide();}  }
class C{  public CallStack copy(){  CallStack cs=new CallStack();  cs.stack=(Vector)this.stack.clone();  return cs;}  }
class C{  public HttpResponse removeContactFromRevokedList(ContactId contact) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Remove " + contact + " from revoked list");  }  String url="/resource-lists/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/index/~~/resource-lists/list%5B@name=%22rcs_revokedcontacts%22%5D/entry%5B@uri=%22"+ Uri.encode(PhoneUtils.formatContactIdToUri(contact).toString())+ "%22%5D";  return sendRequestToXDMS(new HttpDeleteRequest(url));}  }
class C{  public boolean steepUp(double ixi){  if (co.reachability.doubleValue(cur) >= Double.POSITIVE_INFINITY) {    return false;  }  if (!next.valid()) {    return true;  }  return co.reachability.doubleValue(cur) <= co.reachability.doubleValue(next) * ixi;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private double[][] makeJointVectorForNextPastSource(double[] destination,double[] source){  double[][] destNextPastSourceVectors=new double[destination.length - k][k + 2];  for (int t=k; t < destination.length; t++) {    for (int i=0; i < k + 1; i++) {      destNextPastSourceVectors[t - k][i]=destination[t - i];    }    destNextPastSourceVectors[t - k][k + 1]=source[t - 1];  }  return destNextPastSourceVectors;}  }
class C{  public long totalQueryCount(){  return _totalQueryCount;}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((Z21Listener)client).reply((Z21Reply)m);}  }
class C{  public NondominatedPopulation(DominanceComparator comparator,Iterable<? extends Solution> iterable){  this(comparator);  addAll(iterable);}  }
class C{  public void destroy(){  for (  ChannelInvoker invoker : this.channels.values()) {    invoker.releaseAtOnce();  }}  }
class C{  public static String convert(double coordinate,int outputType){  if (coordinate < -180.0 || coordinate > 180.0 || Double.isNaN(coordinate)) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }  if ((outputType != FORMAT_DEGREES) && (outputType != FORMAT_MINUTES) && (outputType != FORMAT_SECONDS)) {    throw new IllegalArgumentException("outputType=" + outputType);  }  StringBuilder sb=new StringBuilder();  if (coordinate < 0) {    sb.append('-');    coordinate=-coordinate;  }  DecimalFormat df=new DecimalFormat("###.#####");  if (outputType == FORMAT_MINUTES || outputType == FORMAT_SECONDS) {    int degrees=(int)Math.floor(coordinate);    sb.append(degrees);    sb.append(':');    coordinate-=degrees;    coordinate*=60.0;    if (outputType == FORMAT_SECONDS) {      int minutes=(int)Math.floor(coordinate);      sb.append(minutes);      sb.append(':');      coordinate-=minutes;      coordinate*=60.0;    }  }  sb.append(df.format(coordinate));  return sb.toString();}  }
class C{  public static String describe(NativeObject instance){  return instance.typeInfo.describe(instance);}  }
class C{  public TestedProject createTestedProject(){  TestedProjectImpl testedProject=new TestedProjectImpl();  return testedProject;}  }
class C{  public StringIndexOutOfBoundsException(){}  }
class C{  @Override public boolean isSupportingView(){  return false;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.out.println("\nUsage: " + DataSource.class.getName() + " <file>\n");    System.exit(1);  }  DataSource loader=new DataSource(args[0]);  System.out.println("Incremental? " + loader.isIncremental());  System.out.println("Loader: " + loader.getLoader().getClass().getName());  System.out.println("Data:\n");  Instances structure=loader.getStructure();  System.out.println(structure);  while (loader.hasMoreElements(structure)) {    System.out.println(loader.nextElement(structure));  }  Instances inst=loader.getDataSet();  loader=new DataSource(inst);  System.out.println("\n\nProxy-Data:\n");  System.out.println(loader.getStructure());  while (loader.hasMoreElements(structure)) {    System.out.println(loader.nextElement(inst));  }}  }
class C{  protected String parseName() throws ParseException, IOException {  StringBuffer sb=new StringBuffer();  boolean midEscaped=false;  do {    sb.append((char)current);    current=reader.read();    midEscaped=false;    if (current == '\\') {      midEscaped=true;      current=reader.read();    }  } while (XMLUtilities.isXMLNameCharacter((char)current) && (midEscaped || (current != '-' && current != '.')));  return sb.toString();}  }
class C{  public Category_Selector idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  @Override public long position(byte[] pattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(" + quoteBytes(pattern) + ", "+ start+ ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (pattern == null) {        return -1;      }      if (pattern.length == 0) {        return 1;      }      BufferedInputStream in=new BufferedInputStream(value.getInputStream());      IOUtils.skipFully(in,start - 1);      int pos=0;      int patternPos=0;      while (true) {        int x=in.read();        if (x < 0) {          break;        }        if (x == (pattern[patternPos] & 0xff)) {          if (patternPos == 0) {            in.mark(pattern.length);          }          if (patternPos == pattern.length) {            return pos - patternPos;          }          patternPos++;        } else {          if (patternPos > 0) {            in.reset();            pos-=patternPos;          }        }        pos++;      }      return -1;    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB search");}  }
class C{  public String globalInfo(){  return "Performs a principal components analysis and transformation of " + "the data. Use in conjunction with a Ranker search. Dimensionality " + "reduction is accomplished by choosing enough eigenvectors to "+ "account for some percentage of the variance in the original data---"+ "default 0.95 (95%). Attribute noise can be filtered by transforming "+ "to the PC space, eliminating some of the worst eigenvectors, and "+ "then transforming back to the original space.";}  }
class C{  @Override void paintPeer(final Graphics g){  final Color[] colors=getGUIcolors();  g.setColor(colors[BACKGROUND_COLOR]);  tsb.paint(g,colors,true);}  }
class C{  public Greeting(String book,String content,String id,String email){  this(book,content);  authorEmail=email;  authorId=id;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public Segment(){  this(null,0,0);}  }
class C{  public FuzzyConditionBuilder maxEdits(Integer maxEdits){  this.maxEdits=maxEdits;  return this;}  }
class C{  public Vertex details(Vertex source,Vertex vertex,Vertex vertex2){  return define(source,vertex,vertex2,null,null,null);}  }
class C{  public boolean canEncode(char ch){  int index;  int theBytes;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 15000)   theBytes=(int)(index2.charAt(index)); else   theBytes=(int)(index2a.charAt(index - 15000));  if (theBytes != 0)   return (true);  return (ch == '\u0000');}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  WebSessionCtx wctx=WebSessionCtx.get((HttpServletRequest)request);  String sessionID=wctx.ctx.getProperty("#AD_Session_ID");  if (sessionID == null) {  }  String uri="";  if (request instanceof HttpServletRequest) {    HttpServletRequest req=(HttpServletRequest)request;    uri=req.getRequestURI();  }  boolean pass=true;  boolean check=true;  if (sessionID == null)   if (uri.endsWith("index.html") || uri.endsWith("cmd.html") || uri.endsWith("menu.html")|| uri.endsWith("menu.js")|| uri.endsWith("window.html")|| uri.endsWith("Logo.gif")|| uri.endsWith("standard.js")|| uri.endsWith("standard.css")|| uri.endsWith("calendar-blue.css")|| uri.endsWith("table.css")|| uri.endsWith("table.js")|| uri.endsWith("calendar.js")|| uri.endsWith("calendar-en.js")|| uri.endsWith("window.css")|| uri.endsWith("window.js")|| uri.endsWith("WLogin"))   ; else   pass=false; else   if (!uri.startsWith(WebEnv.DIR_BASE) || uri.endsWith(".gif") || uri.endsWith(".jpg")|| uri.endsWith(".png")|| uri.endsWith(".html")|| uri.endsWith(".css")|| uri.endsWith(".js"))   check=false; else   ;  StringBuffer sb=new StringBuffer("| Parameters");  if (check) {    try {      String enc=request.getCharacterEncoding();      if (enc == null)       request.setCharacterEncoding(WebEnv.ENCODING);    } catch (    Exception e) {      log.log(Level.SEVERE,"Set CharacterEndocung=" + WebEnv.ENCODING,e);    }    Enumeration en=request.getParameterNames();    while (en.hasMoreElements()) {      String name=(String)en.nextElement();      sb.append(" - ").append(name).append("=").append(request.getParameter(name));    }    if (uri.endsWith("WWindowStatus"))     pass=false;  }  if (pass && check)   log.info("Start " + uri + sb.toString());  long myTime=0l;  if (pass && check && m_timing)   myTime=System.currentTimeMillis();  if (pass)   chain.doFilter(request,response); else {    RequestDispatcher rd=request.getRequestDispatcher("/index.html");    rd.forward(request,response);  }  if (check && pass) {    if (m_timing)     myTime=System.currentTimeMillis() - myTime;    log.info("End   " + uri + "| "+ (m_timing ? String.valueOf(myTime) : null));  }}  }
class C{  private void hideErrorMessage(){  errorTextView.setVisibility(View.GONE);  if (!pageIsLoaded) {    tryToLoadWebView(true);  }}  }
class C{  public static byte[] buildAudioSpecificConfig(int sampleRate,int numChannels){  int sampleRateIndex=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE.length; ++i) {    if (sampleRate == AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[i]) {      sampleRateIndex=i;    }  }  int channelConfig=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE.length; ++i) {    if (numChannels == AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[i]) {      channelConfig=i;    }  }  byte[] csd=new byte[2];  csd[0]=(byte)((2 << 3) | (sampleRateIndex >> 1));  csd[1]=(byte)(((sampleRateIndex & 0x1) << 7) | (channelConfig << 3));  return csd;}  }
class C{  public List<A> toList(){  shared=true;  return elems;}  }
class C{  public ApproximationSetCollector(double[] epsilon){  this(null,epsilon);}  }
class C{  public WorkerThread(Object colladaSource,Position position,AppFrame appFrame){  this.colladaSource=colladaSource;  this.position=position;  this.appFrame=appFrame;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public boolean removeAll(Collection<?> c){  if (c == null)   throw new NullPointerException();  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len != 0) {      int newlen=0;      Object[] temp=new Object[len];      for (int i=0; i < len; ++i) {        Object element=elements[i];        if (!c.contains(element))         temp[newlen++]=element;      }      if (newlen != len) {        setArray(Arrays.copyOf(temp,newlen));        return true;      }    }    return false;  }  finally {    lock.unlock();  }}  }
class C{  protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  byte[] states=_hash._states;  int i=_index;  while (i-- > 0 && (states[i] != TPrimitiveHash.FULL)) {    ;  }  return i;}  }
class C{  public void optimizeQueryExpression(Query query){  SubQueryInfo tmp=subQueryInfo;  subQueryInfo=null;  preparingQueryExpression++;  try {    query.prepare();  }  finally {    subQueryInfo=tmp;    preparingQueryExpression--;  }}  }
class C{  public AccountHeaderBuilder withOnProfileClickDrawerCloseDelay(int onProfileClickDrawerCloseDelay){  this.mOnProfileClickDrawerCloseDelay=onProfileClickDrawerCloseDelay;  return this;}  }
class C{  public void updateData(@Nullable OrderedRealmCollection<Item> data){  if (hasAutoUpdates) {    if (adapterData != null) {      removeListener(adapterData);    }    if (data != null) {      addListener(data);    }  }  this.adapterData=data;  notifyDataSetChanged();}  }
class C{  public static JPopupButton createSelectionColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes){  return createSelectionColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,defaultAttributes,new Rectangle(1,17,20,4));}  }
class C{  protected PDFImage(PDFObject imageObj){  this.imageObj=imageObj;}  }
class C{  protected final Name _handleUnusualFieldName(int ch) throws IOException, JsonParseException {  if (ch == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    return _parseApostropheFieldName();  }  if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {    _reportUnexpectedChar(ch,"was expecting double-quote to start field name");  }  final int[] codes=CharTypes.getInputCodeUtf8JsNames();  if (codes[ch] != 0) {    _reportUnexpectedChar(ch,"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");  }  int[] quads=_quadBuffer;  int qlen=0;  int currQuad=0;  int currQuadBytes=0;  while (true) {    if (currQuadBytes < 4) {      ++currQuadBytes;      currQuad=(currQuad << 8) | ch;    } else {      if (qlen >= quads.length) {        _quadBuffer=quads=growArrayBy(quads,quads.length);      }      quads[qlen++]=currQuad;      currQuad=ch;      currQuadBytes=1;    }    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(" in field name");      }    }    ch=_inputBuffer[_inputPtr] & 0xFF;    if (codes[ch] != 0) {      break;    }    ++_inputPtr;  }  if (currQuadBytes > 0) {    if (qlen >= quads.length) {      _quadBuffer=quads=growArrayBy(quads,quads.length);    }    quads[qlen++]=currQuad;  }  Name name=_symbols.findName(quads,qlen);  if (name == null) {    name=addName(quads,qlen,currQuadBytes);  }  return name;}  }
class C{  public void resetFilters(Boolean enabled){  if (logger.isLoggable(Level.FINE)) {    logger.fine("enabled = " + enabled);  }  Set keys=filters.keySet();  for (Iterator it=keys.iterator(); it.hasNext(); ) {    String title=(String)it.next();    setFilterValue(title,enabled);  }  updateInterface();}  }
class C{  protected boolean scrollBottom(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int lineCount=layout.getLineCount();  if (getBottomLine(widget) <= lineCount - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(lineCount) - getInnerHeight(widget));    return true;  }  return false;}  }
class C{  public final AC fill(int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setFill(true);  }  return this;}  }
class C{  @Override public boolean showProgressBar(){  if (mProgressBar != null && mProgressBar.getVisibility() == View.GONE) {    mProgressBar.setVisibility(View.VISIBLE);    return true;  }  return false;}  }
class C{  public JobKOctetsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  public boolean markAsHam(final SlingHttpServletRequest request,final String id){  boolean result=false;  try {    final ResourceResolver resolver=request.getResourceResolver();    final Session session=resolver.adaptTo(Session.class);    final Node node=session.getNodeByIdentifier(id);    if (node != null) {      final Resource resource=resolver.getResource(node.getPath());      result=akismetService.submitHam(resource);    }  } catch (  RepositoryException e) {    LOGGER.error("Could not submit ham.",e);  }  return result;}  }
class C{  final void runWorker(Worker w){  Thread wt=Thread.currentThread();  Runnable task=w.firstTask;  w.firstTask=null;  w.unlock();  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();      try {        beforeExecute(wt,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  public GF2Polynomial[] divide(GF2Polynomial g) throws RuntimeException {  GF2Polynomial[] result=new GF2Polynomial[2];  GF2Polynomial q=new GF2Polynomial(len);  GF2Polynomial a=new GF2Polynomial(this);  GF2Polynomial b=new GF2Polynomial(g);  GF2Polynomial j;  int i;  if (b.isZero()) {    throw new RuntimeException();  }  a.reduceN();  b.reduceN();  if (a.len < b.len) {    result[0]=new GF2Polynomial(0);    result[1]=a;    return result;  }  i=a.len - b.len;  q.expandN(i + 1);  while (i >= 0) {    j=b.shiftLeft(i);    a.subtractFromThis(j);    a.reduceN();    q.xorBit(i);    i=a.len - b.len;  }  result[0]=q;  result[1]=a;  return result;}  }
class C{  public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  @Override void readStream(InputStream is,byte[] buffer,int offset,RowCursor cursor) throws IOException {}  }
class C{  public int size(){  return versionWindow.length;}  }
class C{  public void close(){}  }
class C{  private SubscriberExceptionContext context(Object event){  return new SubscriberExceptionContext(bus,event,target,method);}  }
class C{  public static KeyStore loadJKSKeyStore(String file,String password){  return loadKeyStore("jks",file,password);}  }
class C{  final void removeHalfEdges(int index,DoubleEdgeListHalfEdge edge){  DoubleEdgeListFace face=edge.twin.face;  DoubleEdgeListHalfEdge ePrev=edge.getPrevious();  DoubleEdgeListHalfEdge tPrev=edge.twin.getPrevious();  DoubleEdgeListHalfEdge eNext=edge.next;  DoubleEdgeListHalfEdge tNext=edge.twin.next;  ePrev.next=tNext;  tPrev.next=eNext;  face.edge=eNext;  DoubleEdgeListHalfEdge te=eNext;  while (te != tNext) {    te.face=face;    te=te.next;  }  this.faces.remove(edge.face);  this.edges.remove(index);  this.edges.remove(index);}  }
class C{  public JCExpression Type(Type t){  if (t == null)   return null;  JCExpression tp;switch (t.getTag()) {case BYTE:case CHAR:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:case BOOLEAN:case VOID:    tp=TypeIdent(t.getTag());  break;case TYPEVAR:tp=Ident(t.tsym);break;case WILDCARD:{WildcardType a=((WildcardType)t);tp=Wildcard(TypeBoundKind(a.kind),Type(a.type));break;}case CLASS:Type outer=t.getEnclosingType();JCExpression clazz=outer.hasTag(CLASS) && t.tsym.owner.kind == TYP ? Select(Type(outer),t.tsym) : QualIdent(t.tsym);tp=t.getTypeArguments().isEmpty() ? clazz : TypeApply(clazz,Types(t.getTypeArguments()));break;case ARRAY:tp=TypeArray(Type(types.elemtype(t)));break;case ERROR:tp=TypeIdent(ERROR);break;default :throw new AssertionError("unexpected type: " + t);}return tp.setType(t);}  }
class C{  public static Font buildFontFrom(final Control control,final int style,final int size){  final Font temp=control.getFont();  final FontData[] fontData=temp.getFontData();  if (fontData == null || fontData.length == 0) {    return temp;  }  return new Font(control.getDisplay(),fontData[0].getName(),size,style);}  }
class C{  private Map<URI,Integer> createVolumeMapForExportMask(ExportMask exportMask){  Map<URI,Integer> map=new HashMap<>();  for (  URI uri : ExportMaskUtils.getVolumeURIs(exportMask)) {    map.put(uri,ExportGroup.LUN_UNASSIGNED);  }  return map;}  }
class C{  public static <T extends Number,V>void show(BackgroundTask<T,V> task,@Nullable String title,@Nullable String message,Number total,boolean cancelAllowed,boolean percentProgress){  if (task.getOwnerFrame() == null) {    throw new IllegalArgumentException("Task without owner cannot be run");  }  Map<String,Object> params=new HashMap<>();  params.put("task",task);  params.put("title",title);  params.put("message",message);  params.put("total",total);  params.put("cancelAllowed",cancelAllowed);  params.put("percentProgress",percentProgress);  task.getOwnerFrame().openWindow("backgroundWorkProgressWindow",WindowManager.OpenType.DIALOG,params);}  }
class C{  public void fireLastChange(){  lock();  try {    getImplementation().getLastChange().fire(getPropertyChangeSupport());  }  finally {    unlock();  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public DistributedLogClientBuilder clientBuilder(ClientBuilder builder){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientBuilder=builder;  return newBuilder;}  }
class C{  public void flush(byte[] buf,int offset,int len) throws IOException {  out.write(buf,offset,len);}  }
class C{  protected void applyForegroundColor(Color color,Control control){  applyForegroundColor(color,control,getForegroundColorExclusions());}  }
class C{  private void recursiveDelete(final File f){  if (f.isDirectory()) {    final File[] children=f.listFiles();    for (int i=0; i < children.length; i++) {      recursiveDelete(children[i]);    }  }  if (log.isInfoEnabled())   log.info("Removing: " + f);  if (!f.delete())   throw new RuntimeException("Could not remove: " + f);}  }
class C{  private void checkElements(String id,int tipoFicha,Elemento[] elems,Elemento tablaPadre){  for (int i=0; i < elems.length; i++) {    Elemento elem=elems[i];switch (elem.getTipo()) {case TiposElemento.TIPO_ELEMENTO_ETIQUETA_DATO:      checkElement(id,tipoFicha,(ElementoEtiquetaDato)elem,tablaPadre);    break;case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:  if (elem.getTipo() == TiposElemento.TIPO_ELEMENTO_TABLA || elem.getTipo() == TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL) {    checkElements(id,tipoFicha,((ContenedorElementos)elem).getElementos(),elem);  } else {    checkElements(id,tipoFicha,((ContenedorElementos)elem).getElementos(),null);  }break;}}}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.AGGREGATOR__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.AGGREGATOR__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void deselectSegment(Segment segment){  if (segment.isUnpaired()) {    ArrayList<Segment> remove=new ArrayList<>();    for (    Entry<Segment,Segment> entry : indirectSelections.entrySet()) {      if (entry.getValue() == segment) {        remove.add(entry.getKey());      }    }    for (    Segment other : remove) {      indirectSelections.remove(other);      deselectSegment(other);    }  } else {    Segment unpaired=indirectSelections.get(segment);    if (unpaired != null) {      deselectSegment(unpaired);    }    if (selectedSegments.remove(segment) && segment.getDBIDs() != null) {      unselectedObjects.addDBIDs(segment.getDBIDs());    }  }}  }
class C{  public AccountHeaderBuilder withSelectionSecondLineShown(boolean selectionSecondLineShown){  this.mSelectionSecondLineShown=selectionSecondLineShown;  return this;}  }
class C{  public TriggerProcessParameter addTriggerProcessParameter(TriggerProcessParameterName name,Object value){  TriggerProcessParameter param=new TriggerProcessParameter();  param.setTriggerProcess(this);  param.setName(name);  param.setValue(value);  getTriggerProcessParameters().add(param);  return param;}  }
class C{  int shouldDebugGraphics(){  return DebugGraphics.shouldComponentDebug(this);}  }
class C{  protected ExitPointSpecImpl(){  super();}  }
class C{  @Override public String toString(){  return "CUlinkState[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public void testCommonPoolShutDown(){  assertFalse(ForkJoinPool.commonPool().isShutdown());  assertFalse(ForkJoinPool.commonPool().isTerminating());  assertFalse(ForkJoinPool.commonPool().isTerminated());  ForkJoinPool.commonPool().shutdown();  assertFalse(ForkJoinPool.commonPool().isShutdown());  assertFalse(ForkJoinPool.commonPool().isTerminating());  assertFalse(ForkJoinPool.commonPool().isTerminated());  ForkJoinPool.commonPool().shutdownNow();  assertFalse(ForkJoinPool.commonPool().isShutdown());  assertFalse(ForkJoinPool.commonPool().isTerminating());  assertFalse(ForkJoinPool.commonPool().isTerminated());}  }
class C{  public final long calcMargin(int[] coords){  internalCoordCopy(coords);  int sum=0;  int i=-1;  while (++i < this.coordCopy.length) {    if (this.coordCopy[i] == -1) {      for (int j=0; j < table.getDimension(i); j++) {        this.coordCopy[i]=j;        sum+=calcMargin(this.coordCopy);      }      this.coordCopy[i]=-1;      return sum;    }  }  return table.getValue(this.coordCopy);}  }
class C{  public void stop(){  for (Iterator<Builder> i=getBuildOrder(); i.hasNext(); ) {    Builder builder=i.next();    if (builder != null) {      builder.stop();    }  }}  }
class C{  public void addSubTree(Taxonomy source,int taxId){  final TaxonNode node=source.mNodes.get(taxId);  if (node == null) {    throw new IllegalArgumentException("Taxonomy does not contain node with id " + taxId);  }  addPath(source,taxId);  for (  final TaxonNode tn : node.depthFirstTraversal()) {    if (!mNodes.containsKey(tn.getId())) {      addNode(tn.getId(),tn.getParentId(),tn.getName(),tn.getRank());    }  }}  }
class C{  private void grow(final int capacity){  a=CharArrays.grow(a,capacity,size);}  }
class C{  public void writeObject(Serializable s){  try {    os.writeObject(s);  } catch (  java.io.IOException e) {    System.out.println("Error writing object: ");    e.printStackTrace();  }}  }
class C{  public boolean hitEnd(){  return hitEnd;}  }
class C{  private int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  public String binarySplitsTipText(){  return "Whether to use binary splits on nominal attributes when " + "building the trees.";}  }
class C{  public synchronized void disconnect(){  if (connection != null && connection.isConnected()) {    connection.close();    transaction=null;    setTransaction(null);  }}  }
class C{  public SetQuestToTimeStampAction(final String questname){  this.questname=checkNotNull(questname);  this.index=-1;}  }
class C{  public static void hideView(Activity context,int id){  if (context != null) {    View view=context.findViewById(id);    if (view != null) {      view.setVisibility(View.GONE);    } else {      Log.e("PercolateAndroidUtils","View does not exist.  Could not hide it.");    }  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  protected void checkIntegrity() throws MalformedTreeException {}  }
class C{  private void chooseImage(){  final String[] info=getInfoString().split(";");  put("subclass",imageNames[Math.abs((info[0].hashCode() + info[1].hashCode()) % imageNames.length)]);}  }
class C{  public void refresh(){  if (tabbedPane.isVisible() && tabbedPane.isShowing()) {    Rectangle allBounds=tabbedPane.getBounds();    Component comp;    try {      comp=tabbedPane.getSelectedComponent();    } catch (    ArrayIndexOutOfBoundsException aioobe) {      resetTabbedPane();      comp=tabbedPane.getSelectedComponent();    }    if (comp != null) {      Rectangle compBounds=comp.getBounds();      Rectangle allTabs=new Rectangle(allBounds.x,allBounds.y,allBounds.width,compBounds.y - 1);      tabbedPane.repaint(allTabs);    }  }}  }
class C{  public boolean isWEP(){  return wep;}  }
class C{  public void runUsingBootstrapper() throws Exception {  runUsing(P2BootstrapInstallation.latest().outsideJvmRunner());}  }
class C{  public void testInvalidDefinitionsFile() throws Exception {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  ncf.setDefinitionsFile(definitionsFile);  try {    PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));    out.println("{");    out.println("\"BLOB_to_String_v1\": [");    out.println("{");    out.println("  \"schema\": \"vip\",");    out.println("  \"table\": \"clients\",");    out.println("  \"columns\": [");    out.println("    \"personal_code\",");    out.println("    \"birth_date\",");    out.println("    \"email\"");    out.println("    ]");    out.println("}");    out.close();    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(ncf);    filterHelper.done();    fail("Exception not thrown during preparation though definitions file was an invalid JSON");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  public UIMAAnnotationsTokenizerFactory(Map<String,String> args){  super(args);  tokenType=require(args,"tokenType");  descriptorPath=require(args,"descriptorPath");  configurationParameters.putAll(args);}  }
class C{  public ProtocolException(){  this(false);}  }
class C{  public static int[] minus(int y1[],int y2[]){  int keep[]=new int[Math.max(y1.length,y2.length)];  int i=0, j=0, k=0;  while (j < y1.length && k < y2.length) {    if (y1[j] == y2[k]) {      j++;      k++;    } else     if (y1[j] < y2[k]) {      keep[i++]=y1[j];      j++;    } else {      k++;    }  }  while (j < y1.length) {    keep[i++]=y1[j++];  }  return Arrays.copyOf(keep,i);}  }
class C{  public static GridLayout createFormGridLayout(boolean makeColumnsEqualWidth,int numColumns){  GridLayout layout=new GridLayout();  layout.marginTop=FORM_BODY_MARGIN_TOP;  layout.marginBottom=FORM_BODY_MARGIN_BOTTOM;  layout.marginLeft=FORM_BODY_MARGIN_LEFT;  layout.marginRight=FORM_BODY_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_BODY_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_BODY_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  @Override public void restoreEntity(BackupDataInputStream data){  if (!restoreSuccessful) {    return;  }  int dataSize=data.size();  if (mBuffer.length < dataSize) {    mBuffer=new byte[dataSize];  }  try {    int bytesRead=data.read(mBuffer,0,dataSize);    if (DEBUG)     Log.d(TAG,"read " + bytesRead + " of "+ dataSize+ " available");    String backupKey=data.getKey();    if (JOURNAL_KEY.equals(backupKey)) {      if (VERBOSE)       Log.v(TAG,"Journal entry restored");      if (!mKeys.isEmpty()) {        Log.wtf(TAG,keyToBackupKey(mKeys.get(0)) + " received after " + JOURNAL_KEY);        restoreSuccessful=false;        return;      }      Journal journal=new Journal();      MessageNano.mergeFrom(journal,readCheckedBytes(mBuffer,dataSize));      applyJournal(journal);      restoreSuccessful=false;      return;    }    if (!mExistingKeys.isEmpty() && !mExistingKeys.contains(backupKey)) {      if (DEBUG)       Log.e(TAG,"Ignoring key not present in the backup state " + backupKey);      return;    }    Key key=backupKeyToKey(backupKey);    mKeys.add(key);switch (key.type) {case Key.FAVORITE:      restoreFavorite(key,mBuffer,dataSize);    break;case Key.SCREEN:  restoreScreen(key,mBuffer,dataSize);break;case Key.ICON:restoreIcon(key,mBuffer,dataSize);break;case Key.WIDGET:restoreWidget(key,mBuffer,dataSize);break;default :Log.w(TAG,"unknown restore entity type: " + key.type);mKeys.remove(key);break;}} catch (IOException e) {Log.w(TAG,"ignoring unparsable backup entry",e);}}  }
class C{  public void testLongSortMissingFirst() throws Exception {  checkSortMissingFirst("longdv_missingfirst","-1","4");}  }
class C{  public void testAddEjbReferenceDescriptionWithNoReferenceDescriptor() throws Exception {  String xml="<weblogic-web-app>" + "  <run-as-role-assignment/>" + "  <session-descriptor/>"+ "</weblogic-web-app>";  WeblogicXml descr=WeblogicXmlIo.parseWeblogicXml(new ByteArrayInputStream(xml.getBytes("UTF-8")));  EjbRef ref=new EjbRef();  ref.setName("foo");  ref.setJndiName("fee");  descr.addEjbReference(ref);  List<Element> elements=getAllElements(descr.getDocument().getRootElement());  Element n=elements.get(0);  assertEquals("run-as-role-assignment",n.getName());  n=elements.get(2);  assertEquals("session-descriptor",n.getName());  n=elements.get(1);  assertEquals("reference-descriptor",n.getName());  n=(Element)n.getChildren(WeblogicXmlTag.EJB_REFERENCE_DESCRIPTION).get(0);  assertEquals("ejb-reference-description",n.getName());  Element m=(Element)n.getChildren(WeblogicXmlTag.EJB_REF_NAME).get(0);  assertEquals("ejb-ref-name",m.getName());  assertEquals("foo",m.getValue());  m=(Element)n.getChildren(WeblogicXmlTag.JNDI_NAME).get(0);  assertEquals("jndi-name",m.getName());  assertEquals("fee",m.getValue());}  }
class C{  public void fatal(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.FATAL,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public CompletableFuture<Object> eval(final String script,final String language,final Map<String,Object> boundVars){  return eval(script,language,new SimpleBindings(boundVars));}  }
class C{  public void wrap(final ByteBuffer byteBuffer,final int offset){  wrap(POOL.acquireMutableDirectBuffer(byteBuffer),offset);}  }
class C{  private void isPositionIndex(int index){  if (index < 0 || index > size) {    throw new IndexOutOfBoundsException("Index [" + index + "] must be less than or equal to size ["+ size+ "]");  }}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(stack.getUIMgrSafe().getVideoFrame().getMediaTimeMillis(true));}  }
class C{  public form(String action,Element element){  addElement(element);  setAction(action);}  }
class C{  public short loadShort(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (short)0;}  }
class C{  public void testCanHandleZeroOrMore() throws Exception {  Dtd dtd=new Dtd("http://java.sun.com/dtd/web-app_2_3.dtd");  List<DescriptorTag> elementOrder=dtd.getElementOrder("web-resource-collection");  assertEquals(4,elementOrder.size());  DescriptorTag tag=elementOrder.get(0);  assertEquals("web-resource-name",tag.getTagName());  assertFalse(tag.isMultipleAllowed());  tag=elementOrder.get(1);  assertEquals("description",tag.getTagName());  assertFalse(tag.isMultipleAllowed());  tag=elementOrder.get(2);  assertEquals("url-pattern",tag.getTagName());  assertTrue(tag.isMultipleAllowed());  tag=elementOrder.get(3);  assertEquals("http-method",tag.getTagName());  assertTrue(tag.isMultipleAllowed());}  }
class C{  public long maxSize(){  return delegate.getCache().maxSize();}  }
class C{  public Options addOptionGroup(OptionGroup group){  Iterator options=group.getOptions().iterator();  if (group.isRequired()) {    requiredOpts.add(group);  }  while (options.hasNext()) {    Option option=(Option)options.next();    option.setRequired(false);    addOption(option);    optionGroups.put(option.getKey(),group);  }  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void generate(Writer out) throws java.io.IOException {  out.write("<HTML>");  generateHeader(out);  out.write("<BODY>");  body.generate(out);  out.write("</BODY>");  out.write("</HTML>");}  }
class C{  private void removeFromMyPlanUI(int position){  offers.remove(position);  notifyBinderItemRemoved(position);  notifyBinderItemRangeChanged(position,1);}  }
class C{  protected boolean isWithinHoles(final GeoPoint point){  if (holes != null) {    for (    final GeoPolygon hole : holes) {      if (!hole.isWithin(point)) {        return true;      }    }  }  return false;}  }
class C{  public boolean wasConfirmed(){  return wasConfirmed;}  }
class C{  public void move(Direction direction){  if (!board.isLayerOn().get()) {    moveTiles(direction);  }}  }
class C{  private void growHeapMap(int cmid){  int[] newMap=new int[Math.max((int)(map.length * 1.25),cmid + 1)];  for (int j=0; j < map.length; j++) {    newMap[j]=map[j];  }  map=newMap;}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(ActiveMQActivationSpec.class.getName()).append('(');  buffer.append("ra=").append(ra);  if (connectionFactoryLookup != null) {    buffer.append(" connectionFactoryLookup=").append(connectionFactoryLookup);  }  buffer.append(" destination=").append(destination);  buffer.append(" destinationType=").append(destinationType);  if (messageSelector != null) {    buffer.append(" selector=").append(messageSelector);  }  buffer.append(" ack=").append(getAcknowledgeMode());  buffer.append(" durable=").append(subscriptionDurability);  buffer.append(" clientID=").append(getClientID());  if (subscriptionName != null) {    buffer.append(" subscription=").append(subscriptionName);  }  buffer.append(" user=").append(user);  if (password != null) {    buffer.append(" password=").append("****");  }  buffer.append(" maxSession=").append(maxSession);  buffer.append(')');  return buffer.toString();}  }
class C{  @Override public final void preTearDown() throws Exception {  vm0.invoke(null);  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public static CSVData parse(Path path,Charset encoding) throws IOException, SimpleParserException {  return new CSVParser(path,encoding).doParse();}  }
class C{  @SuppressWarnings("unchecked") private static <Type extends Message>Type copyAsType(final Type typeDefaultInstance,final Message source){  return (Type)typeDefaultInstance.newBuilderForType().mergeFrom(source).build();}  }
class C{  public String weightThresholdTipText(){  return "Weight threshold for weight pruning.";}  }
class C{  public static String reverse(String s){  return new StringBuilder(s).reverse().toString();}  }
class C{  public boolean isInterface(){  return false;}  }
class C{  void _updateModelFromText(){  Document doc=getDocument();  Object name=getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);  if ((name instanceof HTML.UnknownTag) && (doc instanceof StyledDocument)) {    SimpleAttributeSet sas=new SimpleAttributeSet();    JTextComponent textComponent=getTextComponent();    if (textComponent != null) {      String text=textComponent.getText();      isSettingAttributes=true;      try {        sas.addAttribute(StyleConstants.NameAttribute,new HTML.UnknownTag(text));        ((StyledDocument)doc).setCharacterAttributes(getStartOffset(),getEndOffset() - getStartOffset(),sas,false);      }  finally {        isSettingAttributes=false;      }    }  }}  }
class C{  public static Object[] escapeXml(Object raw){  if (raw == null) {    return new Object[]{null};  }  if (raw.getClass().isArray()) {    if (raw instanceof Object[]) {      final Object[] rawa=(Object[])raw;      final Object[] out=new Object[rawa.length];      for (int i=0; i < rawa.length; i++) {        out[i]=StringEscapeUtils.escapeXml(String.valueOf(rawa[i]));      }      return out;    } else {      int len=Array.getLength(raw);      Object[] out=new Object[len];      for (int i=0; i < len; i++) {        out[i]=StringEscapeUtils.escapeXml(String.valueOf(Array.get(raw,i)));      }      return out;    }  }  return new Object[]{StringEscapeUtils.escapeXml(String.valueOf(raw))};}  }
class C{  public Builder languageCode(String languageCode){  this.lang=languageCode;  return this;}  }
class C{  public synchronized void connected(BluetoothSocket socket,BluetoothDevice device,final String socketType){  if (D)   Log.d(TAG,"connected, Socket Type:" + socketType);  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mSecureAcceptThread != null) {    mSecureAcceptThread.cancel();    mSecureAcceptThread=null;  }  if (mInsecureAcceptThread != null) {    mInsecureAcceptThread.cancel();    mInsecureAcceptThread=null;  }  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  mConnectedThread=new ConnectedThread(socket,socketType);  mConnectedThread.start();  setState(STATE_CONNECTED);}  }
class C{  public Long longValueOf(String name){  Metric m=getMetric(name);  if (m == null) {    return null;  } else {    return m.longValue();  }}  }
class C{  protected Filter buildTagFilter(Map<String,List<String>> tagFilters){  RegexStringComparator regexStringComparator=new RegexStringComparator(buildTagFilterRegex(tagFilters));  regexStringComparator.setCharset(_charset);  RowFilter filter=new RowFilter(CompareOp.EQUAL,regexStringComparator);  return filter;}  }
class C{  public PennTreebankReader(String treebankHome,String parseViewName) throws Exception {  this(treebankHome,null,parseViewName);}  }
class C{  @Override public boolean onHarmlessAction(){  onAction();  return true;}  }
class C{  public void triangulate(Polygon polygon){  _triangulations.clear();  _triangulations.add(polygon);  start();}  }
class C{  public Intent putExtra(String name,char value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putChar(name,value);  return this;}  }
class C{  public synchronized void search(String searchString,boolean regexp){  int[] selected;  int i;  int index;  selected=getSelectedRows();  for (i=0; i < selected.length; i++)   selected[i]=getActualRow(selected[i]);  m_Model.search(searchString,regexp);  clearSelection();  for (i=0; i < selected.length; i++) {    index=getDisplayRow(selected[i]);    if (index != -1)     getSelectionModel().addSelectionInterval(index,index);  }}  }
class C{  void processArgs(String[] argv){  for (int i=0; i < argv.length; i++) {    String arg=argv[i];    if (arg.startsWith("-h")) {      usage();      System.exit(0);    } else     if (arg.equals("-d")) {      outputDir=argv[++i];    } else     if (arg.equals("-v")) {      verbose=true;    } else     if (arg.equals("-V")) {      versionName=argv[++i];    } else     if (arg.equals("-doc")) {      outputDoc=true;    } else     if (arg.equals("-map")) {      outputDoc=true;      mapFile=argv[++i];    } else     if (arg.equals("-f")) {      zoneNamesFile=argv[++i];    } else     if (arg.equals("-S")) {      try {        Zoneinfo.setYear(Integer.parseInt(argv[++i]));      } catch (      Exception e) {        error("invalid year: " + argv[i]);        usage();        System.exit(1);      }    } else {      boolean isStartYear=arg.equals("-s");      if (isStartYear || arg.equals("-e")) {        try {          int year=Integer.parseInt(argv[++i]);          if (isStartYear) {            Zoneinfo.setStartYear(year);          } else {            Zoneinfo.setEndYear(year);          }        } catch (        Exception e) {          error("invalid year: " + argv[i]);          usage();          System.exit(1);        }      } else {        while (i < argv.length) {          ziFiles.add(argv[i++]);        }      }    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  installShowFilesListener();}  }
class C{  public static final String zeroPad(String s,int fieldLength){  return characterPad(s,fieldLength,'0',false);}  }
class C{  protected void writeEmbeddedForeignKeysStmt(Table table,StringBuilder ddl){  for (int idx=0; idx < table.getForeignKeyCount(); idx++) {    ForeignKey key=table.getForeignKey(idx);    if (key.getForeignTableName() == null) {      log.warn("Foreign key table is null for key " + key);    } else {      printStartOfEmbeddedStatement(ddl);      if (databaseInfo.isEmbeddedForeignKeysNamed()) {        ddl.append("CONSTRAINT ");        printIdentifier(getForeignKeyName(table,key),ddl);        ddl.append(" ");      }      ddl.append("FOREIGN KEY (");      writeLocalReferences(key,ddl);      ddl.append(") REFERENCES ");      if (StringUtils.isNotBlank(table.getCatalog())) {        ddl.append(getDelimitedIdentifier(table.getCatalog())).append(".");      }      if (StringUtils.isNotBlank(table.getSchema())) {        ddl.append(getDelimitedIdentifier(table.getSchema())).append(".");      }      printIdentifier(getTableName(key.getForeignTableName()),ddl);      ddl.append(" (");      writeForeignReferences(key,ddl);      ddl.append(")");    }  }}  }
class C{  public static Album valueOf(Cursor cursor){  return new Album(cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_ID)),cursor.getLong(cursor.getColumnIndex(MediaStore.Images.Media._ID)),cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME)),cursor.getLong(3) + "");}  }
class C{  public void hideAppMenu(){  if (mAppMenu != null && mAppMenu.isShowing())   mAppMenu.dismiss();}  }
class C{  public OutgoingMessageEnvelope(SystemStream systemStream,Object key,Object message){  this(systemStream,null,null,key,key,message);}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void addEffect(Effect effect,double param){  addEffect(effect,new FixedParameter(param));}  }
class C{  Values(Values fromParent){  this.table=fromParent.table.clone();  this.mask=fromParent.mask;  this.size=fromParent.size;  this.tombstones=fromParent.tombstones;  this.maximumLoad=fromParent.maximumLoad;  this.clean=fromParent.clean;  inheritValues(fromParent);}  }
class C{  public void remove(int index){  mCategories.remove(index);  mTitles.remove(index);  mValues.remove(index);}  }
class C{  protected void _handleDuplicateField(String fieldName,ObjectNode objectNode,JsonNode oldValue,JsonNode newValue) throws JsonProcessingException {  ;}  }
class C{  public static boolean canAssign(ITypeBinding typeToAssign,ITypeBinding definedType){  TypeEnvironment typeEnvironment=new TypeEnvironment(false,true);  TType defined=typeEnvironment.create(definedType);  TType toAssign=typeEnvironment.create(typeToAssign);  return toAssign.canAssignTo(defined);}  }
class C{  public void reset(){  Cell[] as=cells;  base=identity;  if (as != null) {    for (    Cell a : as) {      if (a != null) {        a.reset(identity);      }    }  }}  }
class C{  public BasicHttpClient(String baseUrl){  this(baseUrl,new BasicRequestHandler(){  });}  }
class C{  public COptionsPanel(final JFrame parent,final DebugTargetSettings debugTarget,final ZyGraph graph,final CDebugPerspectiveModel debugModel){  super(new BorderLayout());  Preconditions.checkNotNull(graph,"IE01468: Graph argument can not be null");  m_parent=parent;  m_debugTarget=debugTarget;  m_graph=graph;  setBorder(new TitledBorder("Debugger Options"));  setDebugger(debugModel.getCurrentSelectedDebugger());  debugModel.addListener(m_listener);  setPreferredSize(new Dimension(200,300));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.367 -0500",hash_original_method="7820E53496F884EF2746E72E77D564A9",hash_generated_method="12DF36F239CCC00EC8C6997617C75F9B") public static boolean isStatusServerError(int status){  return (status >= 500 && status < 600);}  }
class C{  public FasStable(Graph graph,IndependenceTest test){  this.graph=graph;  this.test=test;}  }
class C{  public boolean canRedo(){  return hexEditControl != null && hexEditControl.canRedo();}  }
class C{  private int parseByte() throws IOException {  while (_chunkLength <= 0) {    if (_isLastChunk) {      return -1;    }    int code=read();switch (code) {case BC_BINARY_CHUNK:      _isLastChunk=false;    _chunkLength=(read() << 8) + read();  break;case 'B':_isLastChunk=true;_chunkLength=(read() << 8) + read();break;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:_isLastChunk=true;_chunkLength=code - 0x20;break;case 0x34:case 0x35:case 0x36:case 0x37:_isLastChunk=true;_chunkLength=(code - 0x34) * 256 + read();break;default :throw expect("byte[]",code);}}_chunkLength--;return read();}  }
class C{  private HashMap<String,Boolean> evaluateNetwork(NeuralNetwork network,List<Integer> inputList){  inputList.add(1);  if (inputList.size() != this.getGameDataManager().getNumInputs()) {    System.err.println("Incorrect number of neural network inputs. " + inputList.size() + " vs "+ this.getGameDataManager().getNumInputs());    return null;  }  for (int i=0; i < this.getGameDataManager().getNumInputs(); i++) {    if (network.getNeurons().containsKey(i)) {      network.getNeurons().get(i).setValue(inputList.get(i));    } else {      System.err.println("no neuron at " + i);    }  }  for (  Neuron neuron : network.getNeurons().values()) {    float sum=0;    for (int j=0; j < neuron.getIncomingGeneList().size(); j++) {      Gene incoming=neuron.getIncomingGeneList().get(j);      Neuron other=network.getNeurons().get(incoming.getNeuralInIndex());      sum=sum + incoming.getWeight() * other.getValue();    }    if (neuron.getIncomingGeneList().size() > 0) {      neuron.setValue(sigmoid(sum));    }  }  HashMap<String,Boolean> gamepadOutputs=new HashMap<String,Boolean>();  for (int o=0; o < this.getGameDataManager().getNumOutputs(); o++) {    String button="P1 " + this.getGameDataManager().getButtonNames()[o];    if (network.getNeurons().get(MaxNodes + o).getValue() > 0) {      gamepadOutputs.put(button,true);    } else {      gamepadOutputs.put(button,false);    }  }  return gamepadOutputs;}  }
class C{  @Nullable protected MutableTryBlock<EH> readNextItem(){  MutableTryBlock<EH> ret=next.next;  if (ret == listEnd) {    return null;  }  while (ret.next != listEnd) {    if (ret.endCodeAddress == ret.next.startCodeAddress && ret.getExceptionHandlers().equals(ret.next.getExceptionHandlers())) {      ret.mergeNext();    } else {      break;    }  }  return ret;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (m_entityResolver != null) {    return m_entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  protected void childDeserializedHook(Object child,BCSChild bcsChild){}  }
class C{  public static String escapeHtml(String s){  if (s == null)   return null;  StringBuilder cb=new StringBuilder();  int lineCharacter=0;  boolean startsWithSpace=false;  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);    lineCharacter++;    if (ch == '<')     cb.append("&lt;"); else     if (ch == '&')     cb.append("&amp;"); else     if (ch == '\n' || ch == '\r') {      lineCharacter=0;      cb.append(ch);      startsWithSpace=false;    } else     if (lineCharacter > 70 && ch == ' ' && !startsWithSpace) {      lineCharacter=0;      cb.append('\n');      for (; i + 1 < s.length() && s.charAt(i + 1) == ' '; i++) {      }    } else     if (lineCharacter == 1 && (ch == ' ' || ch == '\t')) {      cb.append((char)ch);      startsWithSpace=true;    } else     cb.append(ch);  }  return cb.toString();}  }
class C{  @Override public void send(DatagramPacket p) throws IOException {  if (delegate == null) {    try {      super.send(p);    } catch (    Exception ex) {      InetAddress tmpAddr=p.getAddress();      if (((ex instanceof NoRouteToHostException) || (ex.getMessage() != null && ex.getMessage().equals("No route to host"))) && (tmpAddr instanceof Inet6Address) && (tmpAddr.isLinkLocalAddress())) {        Inet6Address newAddr=Inet6Address.getByAddress("",tmpAddr.getAddress(),((Inet6Address)super.getLocalAddress()).getScopeId());        p.setAddress(newAddr);        super.send(p);      } else       if (ex instanceof IOException) {        throw ((IOException)ex);      }    }    if (logNonStun(++nbSentPackets)) {      StunStack.logPacketToPcap(p,true,getLocalAddress(),getLocalPort());    }  } else {    delegate.send(p);  }}  }
class C{  public TimeInstant addHours(final int hours){  return this.addMinutes(60 * hours);}  }
class C{  void yrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nxx=(float)(xx * ct + zx * st);  float Nxy=(float)(xy * ct + zy * st);  float Nxz=(float)(xz * ct + zz * st);  float Nxo=(float)(xo * ct + zo * st);  float Nzx=(float)(zx * ct - xx * st);  float Nzy=(float)(zy * ct - xy * st);  float Nzz=(float)(zz * ct - xz * st);  float Nzo=(float)(zo * ct - xo * st);  xo=Nxo;  xx=Nxx;  xy=Nxy;  xz=Nxz;  zo=Nzo;  zx=Nzx;  zy=Nzy;  zz=Nzz;}  }
class C{  public static String toString(Timestamp data){  return data == null ? "" : data.toLocalDateTime().format(formatter("dd/MM/yyyy"));}  }
class C{  public void start(Context context){  mContext=context;  SensorManager sm=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);  Sensor s=sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  if (s == null) {    Log.e(LOG_TAG,"No accelerometer in this device. Cannot use rage shake.");    return;  }  sm.registerListener(this,s,SensorManager.SENSOR_DELAY_NORMAL);}  }
class C{  private void log(String errorString){  log.log(errorString);}  }
class C{  public Map<Host,CommandResult> executeSequential(RequestBuilder requestBuilder,Set<Host> hosts) throws CommandException {  Preconditions.checkNotNull(requestBuilder);  Preconditions.checkArgument(!CollectionUtil.isCollectionEmpty(hosts));  Map<Host,CommandResult> resultMap=Maps.newHashMap();  for (  Host host : hosts) {    resultMap.put(host,host.execute(requestBuilder));  }  return resultMap;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.VAR_FAKE_DEFINITION;}  }
class C{  public Card(int rank,int suit){  if ((rank < ACE) || (rank > KING))   throw new IllegalArgumentException("Rank \"" + rank + "\" is an invalid rank for a card.");  if ((suit < CLUBS) || (suit > SPADES))   throw new IllegalArgumentException("Suit \"" + suit + "\" is an invalid suit for a card.");  this.suit=suit;  this.rank=rank;}  }
class C{  void invoke(ClientType clientType){  try {    LOGGER.info("Starting service.");    ExecutorService service=ClientServiceFactory.startClientService(_system,clientType,_jobCounter);    LOGGER.info("Service started.");    Thread currentThread=Thread.currentThread();    while (!currentThread.isInterrupted()) {      try {        Thread.sleep(500);      } catch (      InterruptedException ex) {        currentThread.interrupt();        break;      }    }    LOGGER.info("Stopping service.");    service.shutdownNow();    try {      if (!service.awaitTermination(60000,TimeUnit.MILLISECONDS)) {        LOGGER.warn("Shutdown timed out after 60 seconds.  Exiting.");      }    } catch (    InterruptedException iex) {      LOGGER.warn("Forcing shutdown.");    }    LOGGER.info("Service stopped.");  } catch (  Exception ex) {    throw new SystemException("There was a problem invoking the committer.",ex);  } finally {    if (_system != null) {      _system.stop();    }    LOGGER.info("Finished");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.DICTIONARY_PROPERTY_TYPE__KEY_TYPE:    return getKeyType();case DatatypePackage.DICTIONARY_PROPERTY_TYPE__VALUE_TYPE:  return getValueType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  v.add(rid);  v.add(keyEncryptionAlgorithm);  v.add(encryptedKey);  return new DERSequence(v);}  }
class C{  public static final void checkNumericString(String value){  check(value);}  }
class C{  public X509CertificateGenerator(X509CertificateVersion version){  this.version=version;}  }
class C{  public void fireGroupParametersChanged(final Group group){  for (  GroupListener listener : groupListeners) {    listener.groupParameterChanged(new NetworkEvent<Group>(this,group,group));  }}  }
class C{  public static void submitTopology(String name,Map<String,Object> stormConfig,StormTopology topology) throws AlreadyAliveException, InvalidTopologyException {  com.twitter.heron.api.Config heronConfig=ConfigUtils.translateConfig(stormConfig);  try {    HeronSubmitter.submitTopology(name,heronConfig,topology.getStormTopology());  } catch (  com.twitter.heron.api.exception.AlreadyAliveException e) {    throw new AlreadyAliveException();  }catch (  com.twitter.heron.api.exception.InvalidTopologyException e) {    throw new InvalidTopologyException();  }}  }
class C{  public static Date convertDate(String date){  Date receivedDate=null;  try {    receivedDate=dateFormat.parse(date);  } catch (  ParseException e) {    Log.e(TAG,"Invalid date format." + e);  }  return receivedDate;}  }
class C{  public void fill(Shape s){  try {    shapepipe.fill(this,s);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      shapepipe.fill(this,s);    } catch (    InvalidPipeException e2) {    }  } finally {    surfaceData.markDirty();  }}  }
class C{  public Object copyValue() throws Throwable {  if (tag != ARRAY || Array.getLength(value) == 0) {    return value;  }  Class type=value.getClass();  if (type == int[].class) {    return ((int[])value).clone();  } else   if (type == byte[].class) {    return ((byte[])value).clone();  } else   if (type == short[].class) {    return ((short[])value).clone();  } else   if (type == long[].class) {    return ((long[])value).clone();  } else   if (type == char[].class) {    return ((char[])value).clone();  } else   if (type == boolean[].class) {    return ((boolean[])value).clone();  } else   if (type == float[].class) {    return ((float[])value).clone();  } else   if (type == double[].class) {    return ((double[])value).clone();  }  return ((Object[])value).clone();}  }
class C{  public RenderPass(RajawaliScene scene,Camera camera,int clearColor){  mPassType=PassType.RENDER;  mScene=scene;  mCamera=camera;  mClearColor=clearColor;  mOldClearColor=0x00000000;  mEnabled=true;  mClear=true;  mNeedsSwap=true;}  }
class C{  public void execute(){  RunnableExecutorPair list;synchronized (this) {    if (executed) {      return;    }    executed=true;    list=runnables;    runnables=null;  }  RunnableExecutorPair reversedList=null;  while (list != null) {    RunnableExecutorPair tmp=list;    list=list.next;    tmp.next=reversedList;    reversedList=tmp;  }  while (reversedList != null) {    executeListener(reversedList.runnable,reversedList.executor);    reversedList=reversedList.next;  }}  }
class C{  private void startupPlugins(){  for (  PluginEntry entry : entryMap.values()) {    if (entry.onload) {      getPlugin(entry.service);    } else {      pluginMap.put(entry.service,null);    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private List<WorkflowAnnotation> positionOperatorAnnotations(final Collection<Operator> operators){  List<WorkflowAnnotation> movedAnnos=new LinkedList<>();  for (  Operator op : operators) {    WorkflowAnnotations annotations=rendererModel.getOperatorAnnotations(op);    if (annotations != null) {      Rectangle2D opRect=rendererModel.getOperatorRect(op);      for (      WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {        Rectangle2D loc=anno.getLocation();        double annoCenter=loc.getCenterX();        double opCenter=opRect.getCenterX();        double newX=loc.getX() + (opCenter - annoCenter);        double newY=opRect.getMaxY() + OperatorAnnotation.Y_OFFSET;        if (loc.getX() != newX || loc.getY() != newY) {          anno.setLocation(new Rectangle2D.Double(newX,newY,loc.getWidth(),loc.getHeight()));          movedAnnos.add(anno);        }      }    }  }  return movedAnnos;}  }
class C{  public static <T1,T2,T3,T4,R>Supplier<R> partial4(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final QuadFunction<T1,T2,T3,T4,R> quadFunc){  return null;}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  public LamoishEffect(){}  }
class C{  public Address toAddress(){  return new Address(value);}  }
class C{  protected static boolean isReserved(char c){  return isGenericDelimiter(c) || isSubDelimiter(c);}  }
class C{  public GridBoundedConcurrentLinkedHashMap(int max,int initCap){  this(max,initCap,DFLT_LOAD_FACTOR,DFLT_CONCUR_LVL);}  }
class C{  public static boolean isFilenameValid(String filename){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  public void write(OutputStream os) throws IOException {  ByteCodeWriter out=new ByteCodeWriter(os,this);  out.writeInt(MAGIC);  out.writeShort(_minor);  out.writeShort(_major);  _constantPool.write(out);  out.writeShort(_accessFlags);  out.writeClass(_thisClass);  out.writeClass(_superClass);  out.writeShort(_interfaces.size());  for (int i=0; i < _interfaces.size(); i++) {    String className=_interfaces.get(i);    out.writeClass(className);  }  out.writeShort(_fields.size());  for (int i=0; i < _fields.size(); i++) {    JavaField field=_fields.get(i);    field.write(out);  }  out.writeShort(_methods.size());  for (int i=0; i < _methods.size(); i++) {    JavaMethod method=_methods.get(i);    method.write(out);  }  out.writeShort(_attributes.size());  for (int i=0; i < _attributes.size(); i++) {    Attribute attr=_attributes.get(i);    attr.write(out);  }}  }
class C{  public DanielAnalysisListenerEvents(String cleFile,ActivityFacilities parcels,List<Tuple<Integer,Integer>> timeslots){  this.micro2macroZonesFile=cleFile;  this.parcels=parcels;  this.timeslots=timeslots;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static String toRegex(String glob,String separator){  checkNotNull(separator,"separator must be non-null");  checkArgument(separator.length() == 1,"separator must be a single character: %s",separator);  return toRegex(glob,separator.charAt(0));}  }
class C{  private void checkNetworkExportAssociations(Network network,List<URI> varrayUris){  if (varrayUris == null || varrayUris.isEmpty() || network == null || network.getConnectedVirtualArrays() == null || network.getConnectedVirtualArrays().isEmpty()) {    return;  }  _log.info("Checking if varrays {} can be removed for network {}",varrayUris,network.getId());  List<StoragePort> storagePorts=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,StoragePort.class,AlternateIdConstraint.Factory.getConstraint(StoragePort.class,"network",network.getId().toString()));  for (  StoragePort storagePort : storagePorts) {    if (storagePort != null && (storagePort.getAssignedVirtualArrays() == null || storagePort.getAssignedVirtualArrays().isEmpty())) {      _log.info("Port {} is using implicit varray assignment. Checking the port exports.",storagePort.getNativeGuid());      if (EndpointUtility.isValidEndpoint(storagePort.getPortNetworkId(),EndpointType.SAN)) {        _log.info("The port is of type FC or iscsi. Checking if in use by an export group.");        List<ExportMask> masks=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,ExportMask.class,"storagePorts",storagePort.getId().toString());        if (masks != null && !masks.isEmpty()) {          _log.info("The port is in use by {} masks. Checking the masks virtual arrays.",masks.size());          for (          ExportMask mask : masks) {            if (!mask.getInactive()) {              List<ExportGroup> groups=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,mask.getId(),ExportGroup.class,"exportMasks");              for (              ExportGroup group : groups) {                if (!group.getInactive() && varrayUris.contains(group.getVirtualArray())) {                  _log.info("The port is in use by export group {} in virtual array {} ",group.getLabel(),group.getVirtualArray());                  throw APIException.badRequests.cannotUnassignNetworkInUse(network.getId(),group.getId(),"ExportGroup");                }              }            }          }        }      } else {        _log.info("The port is of type IP. Checking if in use by a file share.");        List<FileShare> fileShares=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,storagePort.getId(),FileShare.class,"storagePort");        for (        FileShare fileShare : fileShares) {          if (!fileShare.getInactive() && varrayUris.contains(fileShare.getVirtualArray())) {            _log.info("The port is in use by file share {} in virtual array {} ",fileShare.getLabel(),fileShare.getVirtualArray());            throw APIException.badRequests.cannotUnassignNetworkInUse(network.getId(),fileShare.getId(),"FileShareExport");          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.223 -0400",hash_original_method="8C409C50276DC5FFF073C17593B975AC",hash_generated_method="253D44827C6A185BCD712DA99FC5ECAC") public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  protected ObjectStreamException(String classname){  super(classname);}  }
class C{  private void handleSystemIn(){  if (!hasAddedSystemIn && SystemInUtil.getInstance().hasBeenUsed()) {    hasAddedSystemIn=true;    try {      TestCluster.getInstance().addEnvironmentTestCall(new GenericMethod(SystemInUtil.class.getMethod("addInputLine",new Class<?>[]{String.class}),new GenericClass(SystemInUtil.class)));    } catch (    SecurityException e) {      logger.error("Error while handling Random: " + e.getMessage(),e);    }catch (    NoSuchMethodException e) {      logger.error("Error while handling Random: " + e.getMessage(),e);    }  }}  }
class C{  public static List<GrantedAuthority> createAllAuthorityList(){  return createAuthorityList(SpPermission.getAllAuthorities());}  }
class C{  public HGLiveHandle atomRead(final HGPersistentHandle pHandle,final Object atom,final HGAtomAttrib attrib){  LiveHandle lHandle=null;  if ((attrib.getFlags() & HGSystemFlags.MANAGED) != 0)   lHandle=new LiveHandle(atom,pHandle,attrib.getFlags(),attrib.getRetrievalCount(),attrib.getLastAccessTime()); else   lHandle=new LiveHandle(atom,pHandle,attrib.getFlags());  insert(lHandle);  return lHandle;}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public BlockBorder(RectangleInsets insets,Paint paint){  ParamChecks.nullNotPermitted(insets,"insets");  ParamChecks.nullNotPermitted(paint,"paint");  this.insets=insets;  this.paint=paint;}  }
class C{  public void clear(){  namespaceStack.clear();  namespaceCacheList.clear();  rootNamespaceCache.clear();  currentNamespaceCache=null;}  }
class C{  public void displayScore(){  System.out.println(name + " has " + score()+ " points");}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName,IPath[] inclusionFilters,IPath[] exclusionFilters) throws CoreException {  IProject project=jproject.getProject();  IContainer container=null;  if (containerName == null || containerName.length() == 0) {    container=project;  } else {    IFolder folder=project.getFolder(containerName);    if (!folder.exists()) {      CoreUtility.createFolder(folder,false,true,null);    }    container=folder;  }  IPackageFragmentRoot root=jproject.getPackageFragmentRoot(container);  IClasspathEntry cpe=JavaCore.newSourceEntry(root.getPath(),inclusionFilters,exclusionFilters,null);  addToClasspath(jproject,cpe);  return root;}  }
class C{  public static Collection<GridTcpRouter> allTcpRouters(){  return new ArrayList<GridTcpRouter>(tcpRouters.values());}  }
class C{  private void index() throws IOException {  IndexWriter indexWriter=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  Document doc=new Document();  doc.add(new SortedSetDocValuesFacetField("Author","Bob"));  doc.add(new SortedSetDocValuesFacetField("Publish Year","2010"));  indexWriter.addDocument(config.build(doc));  doc=new Document();  doc.add(new SortedSetDocValuesFacetField("Author","Lisa"));  doc.add(new SortedSetDocValuesFacetField("Publish Year","2010"));  indexWriter.addDocument(config.build(doc));  doc=new Document();  doc.add(new SortedSetDocValuesFacetField("Author","Lisa"));  doc.add(new SortedSetDocValuesFacetField("Publish Year","2012"));  indexWriter.addDocument(config.build(doc));  doc=new Document();  doc.add(new SortedSetDocValuesFacetField("Author","Susan"));  doc.add(new SortedSetDocValuesFacetField("Publish Year","2012"));  indexWriter.addDocument(config.build(doc));  doc=new Document();  doc.add(new SortedSetDocValuesFacetField("Author","Frank"));  doc.add(new SortedSetDocValuesFacetField("Publish Year","1999"));  indexWriter.addDocument(config.build(doc));  indexWriter.close();}  }
class C{  protected final void firePropertyChange(String propertyName,Object oldValue,Object newValue){  PropertyChangeSupport aChangeSupport=this.changeSupport;  if (aChangeSupport == null) {    return;  }  aChangeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public static IntentBuilder newVoiceNote(){  return new NoArgsIntentBuilder(ACTION_NEW_VOICE_NOTE);}  }
class C{  public ParseException(String message,int line,int column){  super(message);  exception=null;  lineNumber=line;  columnNumber=column;}  }
class C{  public static int powerOfTwoCeiling(int reference){  int power=(int)Math.ceil(Math.log(reference) / Math.log(2d));  return (int)Math.pow(2d,power);}  }
class C{  public AbstractCodeEvent(Object source,String code){  super(source);  this.code=code;}  }
class C{  public void testBug11575() throws Exception {  DatabaseMetaData dbmd=this.conn.getMetaData();  if (isServerRunningOnWindows()) {    assertEquals(true,dbmd.storesLowerCaseIdentifiers());    assertEquals(true,dbmd.storesLowerCaseQuotedIdentifiers());    assertEquals(false,dbmd.storesMixedCaseIdentifiers());    assertEquals(false,dbmd.storesMixedCaseQuotedIdentifiers());    assertEquals(false,dbmd.storesUpperCaseIdentifiers());    assertEquals(true,dbmd.storesUpperCaseQuotedIdentifiers());  } else {    assertEquals(false,dbmd.storesLowerCaseIdentifiers());    assertEquals(false,dbmd.storesLowerCaseQuotedIdentifiers());    assertEquals(true,dbmd.storesMixedCaseIdentifiers());    assertEquals(true,dbmd.storesMixedCaseQuotedIdentifiers());    assertEquals(false,dbmd.storesUpperCaseIdentifiers());    assertEquals(true,dbmd.storesUpperCaseQuotedIdentifiers());  }}  }
class C{  public boolean isBound(){  return bound;}  }
class C{  public void enable(){  toState(State.ENABLED);}  }
class C{  public void guardarGrupo(GrupoVO grupo) throws ActionNotAllowedException {  iniciarTransaccion();  if (grupo.getId() == null) {    checkPermission(ControlAccesoSecurityManager.ALTA_GRUPO);    grupoDBEntity.insertGrupo(grupo);  } else {    checkPermission(ControlAccesoSecurityManager.MODIFICACION_GRUPO);    grupoDBEntity.updateGrupo(grupo);  }  commit();}  }
class C{  boolean doSimStep(){  if (analyzeRunTimes)   this.startTime=System.nanoTime();  final double now=this.getSimTimer().getTimeOfDay();  this.listenerManager.fireQueueSimulationBeforeSimStepEvent(now);  if (analyzeRunTimes)   this.qSimInternalTime+=System.nanoTime() - this.startTime;  if (this.withindayEngine != null) {    if (analyzeRunTimes)     startTime=System.nanoTime();    this.withindayEngine.doSimStep(now);    if (analyzeRunTimes)     this.mobsimEngineRunTimes.get(this.withindayEngine).addAndGet(System.nanoTime() - this.startTime);  }  for (  MobsimEngine mobsimEngine : this.mobsimEngines) {    if (analyzeRunTimes)     this.startTime=System.nanoTime();    if (mobsimEngine == this.withindayEngine)     continue;    mobsimEngine.doSimStep(now);    if (analyzeRunTimes)     this.mobsimEngineRunTimes.get(mobsimEngine).addAndGet(System.nanoTime() - this.startTime);  }  if (analyzeRunTimes)   this.startTime=System.nanoTime();  this.printSimLog(now);  boolean doContinue=(this.agentCounter.isLiving() && (this.stopTime > now));  this.events.afterSimStep(now);  this.listenerManager.fireQueueSimulationAfterSimStepEvent(now);  final QSimConfigGroup qsimConfigGroup=this.scenario.getConfig().qsim();  if (qsimConfigGroup.getSimEndtimeInterpretation() == EndtimeInterpretation.onlyUseEndtime) {    if (now > qsimConfigGroup.getEndTime()) {      doContinue=false;    } else {      doContinue=true;    }  }  if (doContinue) {    this.simTimer.incrementTime();  }  if (analyzeRunTimes)   this.qSimInternalTime+=System.nanoTime() - this.startTime;  return doContinue;}  }
class C{  public int indexOf(String subString,int start){  if (start < 0) {    start=0;  }  int subCount=subString.length();  if (subCount > 0) {    if (subCount + start > count) {      return -1;    }    char firstChar=subString.charAt(0);    while (true) {      int i=start;      boolean found=false;      for (; i < count; i++) {        if (value[i] == firstChar) {          found=true;          break;        }      }      if (!found || subCount + i > count) {        return -1;      }      int o1=i, o2=0;      while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {      }      if (o2 == subCount) {        return i;      }      start=i + 1;    }  }  return (start < count || start == 0) ? start : count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.977 -0400",hash_original_method="70863C8791AB5339C3CC7588D2279663",hash_generated_method="547BCE8CF58E174576D9C3FDC0ADF440") protected FileAlterationObserver(FileEntry rootEntry,FileFilter fileFilter,IOCase caseSensitivity){  if (rootEntry == null) {    throw new IllegalArgumentException("Root entry is missing");  }  if (rootEntry.getFile() == null) {    throw new IllegalArgumentException("Root directory is missing");  }  this.rootEntry=rootEntry;  this.fileFilter=fileFilter;  if (caseSensitivity == null || caseSensitivity.equals(IOCase.SYSTEM)) {    this.comparator=NameFileComparator.NAME_SYSTEM_COMPARATOR;  } else   if (caseSensitivity.equals(IOCase.INSENSITIVE)) {    this.comparator=NameFileComparator.NAME_INSENSITIVE_COMPARATOR;  } else {    this.comparator=NameFileComparator.NAME_COMPARATOR;  }}  }
class C{  public static boolean taskScopedTaskExecutionActionsEnabledFor(NodeSelection nodeSelection){  if (nodeSelection.isEmpty()) {    return false;  }  List<?> elements=nodeSelection.toList();  List<TaskNode> taskNodes=FluentIterable.from(elements).filter(TaskNode.class).toList();  if (elements.size() != taskNodes.size() || hasMultipleOrIncludedParentProject(taskNodes)) {    return false;  }  List<ProjectTaskNode> projectNodes=FluentIterable.from(elements).filter(ProjectTaskNode.class).toList();  if (projectNodes.size() == taskNodes.size()) {    return true;  }  List<TaskSelectorNode> taskSelectorNodes=FluentIterable.from(elements).filter(TaskSelectorNode.class).toList();  if (taskSelectorNodes.size() == taskNodes.size()) {    return canFindRootProjects(taskSelectorNodes);  }  return false;}  }
class C{  void runWith(ConfigScript s) throws Exception {  s.setDelegate(this);  s.run();}  }
class C{  @Override public String toString(){  return "DeletePendingAchievementDetailsCommand [player=" + player.getName() + "]";}  }
class C{  public Matrix4x3f reflect(float nx,float ny,float nz,float px,float py,float pz){  return reflect(nx,ny,nz,px,py,pz,this);}  }
class C{  boolean isEntranceTransitionEnabled(){  return mEntranceTransitionEnabled;}  }
class C{  protected RegionFactory(GemFireCacheImpl cache,String regionAttributesId){  this.cache=cache;  RegionAttributes<K,V> ra=getCache().getRegionAttributes(regionAttributesId);  if (ra == null) {    throw new IllegalStateException(LocalizedStrings.RegionFactory_NO_ATTRIBUTES_ASSOCIATED_WITH_0.toLocalizedString(regionAttributesId));  }  this.attrsFactory=new AttributesFactory<K,V>(ra);}  }
class C{  public byte[] readBytes(final int count){  int bytesToRead=count;  if (bytesToRead < 0)   bytesToRead=byteStream.available();  byte[] bytes=new byte[bytesToRead];  if (currentBitIndex >= 0) {    for (int i=0; i < bytesToRead; i++) {      bytes[i]=(byte)read(Byte.SIZE);    }  } else {    byteStream.read(bytes,0,bytes.length);  }  return bytes;}  }
class C{  public Test insertTest(TestIdentifier testId){  return findTest(testId,true);}  }
class C{  public void addValue(double data,double weight){  m_Counts[(int)data]+=weight;  m_SumOfCounts+=weight;}  }
class C{  public static RelationalOpExpression gt(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),">",new ConstantExpression(value));}  }
class C{  @Override public void onDateChanged(DatePicker view,int year,int monthOfYear,int dayOfMonth){  changeDisplay(year,monthOfYear,dayOfMonth);}  }
class C{  public static boolean isNull(JCTree tree){  if (!tree.hasTag(LITERAL))   return false;  JCLiteral lit=(JCLiteral)tree;  return (lit.typetag == BOT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.061 -0500",hash_original_method="454399D3A9345FFC357883E67C1190C2",hash_generated_method="34FCB14B87FB5B3F78BB9BE9C7C550CA") public void headers(Headers headers){  if (DebugFlags.LOAD_LISTENER)   Log.v(LOGTAG,"LoadListener.headers");  if (mCancelled)   return;  ArrayList<String> cookies=headers.getSetCookie();  for (int i=0; i < cookies.size(); ++i) {    CookieManager.getInstance().setCookie(mUri,cookies.get(i));  }  sendMessageInternal(obtainMessage(MSG_CONTENT_HEADERS,headers));}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,float[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putFloatArray(name,value);  return this;}  }
class C{  public boolean isParameterized(){  return false;}  }
class C{  private void updatePreferenceSummary(Preference preference,String[] summary,String[] values,String value){  int index=getIndex(values,value);  if (index == -1) {    preference.setSummary(R.string.value_unknown);  } else {    preference.setSummary(summary[index]);  }}  }
class C{  public void restoreDefaultManager() throws SecurityException {  System.setSecurityManager(defaultManager);}  }
class C{  public Set<Resource> someValuesFrom(){  Set<Resource> targets=new HashSet<>();  for (  OwlClass c : svfClasses) {    targets.add(c.getURI());  }  return targets;}  }
class C{  public RydePgpCompressionOutputStream(@Provided @Config("rdeRydeBufferSize") Integer bufferSize,@WillNotClose OutputStream os){  super(createDelegate(bufferSize,os));}  }
class C{  public boolean isStoreMessage(){  return alphabet != null;}  }
class C{  public IMethod findOverriddenMethod(IMethod overriding,boolean testVisibility) throws JavaModelException {  int flags=overriding.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor()) {    return null;  }  IType type=overriding.getDeclaringType();  IType superClass=fHierarchy.getSuperclass(type);  if (superClass != null) {    IMethod res=findOverriddenMethodInHierarchy(superClass,overriding);    if (res != null) {      if (!testVisibility || JavaModelUtil.isVisibleInHierarchy(res,type.getPackageFragment())) {        return res;      }    }  }  IType[] interfaces=fHierarchy.getSuperInterfaces(type);  for (int i=0; i < interfaces.length; i++) {    IMethod res=findOverriddenMethodInHierarchy(interfaces[i],overriding);    if (res != null) {      return res;    }  }  return null;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public int size(){  return info[0] & 0xff;}  }
class C{  public boolean isService(){  return MProduct.PRODUCTTYPE_Service.equals(m_productType);}  }
class C{  public Hyperlink(){}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  protected SelectedDenseObjectMatrix3D(Object[] elements,int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets,int offset){  int slices=sliceOffsets.length;  int rows=rowOffsets.length;  int columns=columnOffsets.length;  setUp(slices,rows,columns);  this.elements=elements;  this.sliceOffsets=sliceOffsets;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public int viewablePageCount(){  return getSwipeToDismiss() ? pageCount() - 1 : pageCount();}  }
class C{  public List<BytecodeInstruction> determineMethodCallsToOwnClass(){  List<BytecodeInstruction> calls=new ArrayList<BytecodeInstruction>();  for (  BytecodeInstruction ins : determineMethodCalls())   if (ins.isMethodCallForClass(className)) {    if (GraphPool.getInstance(classLoader).getRawCFG(className,ins.getCalledMethod()) != null)     calls.add(ins);  }  return calls;}  }
class C{  public java.lang.StringBuffer insert(int offset,long l){  return null;}  }
class C{  static public void removeTopLevelWindowListener(TopLevelWindowListener l){  topLevelWindowListener=TopLevelWindowMulticaster.remove(topLevelWindowListener,l);}  }
class C{  public static boolean reachable(NetworkInterface itf,InetAddress addr,int reachTimeout){  try {    return addr.isReachable(itf,0,reachTimeout);  } catch (  IOException ignore) {    return false;  }}  }
class C{  public String stem(String s){  i=0;  add(s.toCharArray(),s.length());  stem();  return toString();}  }
class C{  public String name(){  return theName;}  }
class C{  public boolean isSetPacket(){  return this.packet != null;}  }
class C{  public final long completions(){  return completions;}  }
class C{  int compare(K k1,K k2) throws ClassCastException {  Comparator<? super K> cmp=comparator;  if (cmp != null)   return cmp.compare(k1,k2); else   return ((Comparable<? super K>)k1).compareTo(k2);}  }
class C{  public long manhattanDistance(final int x,final int y,final int z){  return Math.abs((long)this.x - x) + Math.abs((long)this.y - y) + Math.abs((long)this.z - z);}  }
class C{  TIntIntValueHashIterator(TPrimitiveHash hash){  super(hash);}  }
class C{  public void removeImmunity(StatusType statusType){  RPEntity entity=entityRef.get();  if (entity == null) {    return;  }  immunities.remove(statusType);  entity.sendPrivateText("You are not immune to being " + statusType.getName() + " anymore.");}  }
class C{  protected void onSetTopicProtection(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public CustomFile(final String fileName,final long fileSize,final String filePath,final String baseSoftwareModuleName,final String baseSoftwareModuleVersion,final String mimeType){  this.fileName=fileName;  this.fileSize=fileSize;  this.filePath=filePath;  this.baseSoftwareModuleName=baseSoftwareModuleName;  this.baseSoftwareModuleVersion=baseSoftwareModuleVersion;  this.mimeType=mimeType;}  }
class C{  private boolean skipDuringInitialization(CacheDistributionAdvisee rgn){  boolean skip=false;  if (rgn instanceof LocalRegion) {    LocalRegion lr=(LocalRegion)rgn;    if (!lr.isInitialized()) {      Set recipients=new CreateRegionProcessor(rgn).getRecipients();      recipients.remove(getSender());      if (!recipients.isEmpty()) {        skip=true;      }    }  }  return skip;}  }
class C{  private void populateWeaponsAndEquipmentChoices(){  Vector<WeaponType> weapons=new Vector<WeaponType>();  Vector<EquipmentType> equipment=new Vector<EquipmentType>();  for (Enumeration<EquipmentType> e=EquipmentType.getAllTypes(); e.hasMoreElements(); ) {    EquipmentType et=e.nextElement();    if ((et instanceof WeaponType)) {      weapons.add((WeaponType)et);      if (et.hasFlag(WeaponType.F_C3M) || et.hasFlag(WeaponType.F_C3MBS)) {        equipment.add(et);      }    }    if ((et instanceof MiscType)) {      equipment.add(et);    }  }  weaponsModel.setData(weapons);  equipmentModel.setData(equipment);}  }
class C{  public Object moveToNextValue(Object val){  if (dataPersister == null) {    return null;  } else {    return dataPersister.moveToNextValue(val);  }}  }
class C{  public AbstractEvolutionaryAlgorithm(Problem problem,Population population,NondominatedPopulation archive,Initialization initialization){  super(problem);  this.population=population;  this.archive=archive;  this.initialization=initialization;}  }
class C{  public void opc_invokestatic(short methodIndex,int numArgs,int numReturnValues){  emitByte(opc_invokestatic);  emitShort(methodIndex);  setStack(getStack() - numArgs + numReturnValues);}  }
class C{  protected void verificarAsientoRegistralError(int numPrueba,String codigoEntidadRegistral){  String idAsientoRegistral=getIdAsientoRegistral(9,codigoEntidadRegistral);  AsientoRegistralDTO asiento=getIntercambioRegistralWS().getAsientoRegistral(idAsientoRegistral);  Assert.assertEquals(0,asiento.getAnexos().size());}  }
class C{  public EGLSurface createOffscreenSurface(int width,int height){  int[] surfaceAttribs={EGL14.EGL_WIDTH,width,EGL14.EGL_HEIGHT,height,EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreatePbufferSurface(mEGLDisplay,mEGLConfig,surfaceAttribs,0);  checkEglError("eglCreatePbufferSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());    jpaUserRoles.setRole(userRoles.getRole());    Users users=new Users();    users.setUsername(userRoles.getUsername());    jpaUserRoles.setUsers(users);    userRolesDAO.update(jpaUserRoles);    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);    LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " updated in UserRoles by User:"+ principal.getName()+ userRoles);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void sendWakeOnLan(@NonNull String ipStr,@NonNull String macStr,int port,int timeoutMillis,int packets) throws IOException, IllegalArgumentException {  if (ipStr == null)   throw new IllegalArgumentException("Ip Address cannot be null");  if (macStr == null)   throw new IllegalArgumentException("MAC Address cannot be null");  if (port <= 0 || port > 65535)   throw new IllegalArgumentException("Invalid port " + port);  if (packets <= 0)   throw new IllegalArgumentException("Invalid number of packets to send " + packets);  byte[] macBytes=getMacBytes(macStr);  byte[] bytes=new byte[6 + 16 * macBytes.length];  for (int i=0; i < 6; i++) {    bytes[i]=(byte)0xff;  }  for (int i=6; i < bytes.length; i+=macBytes.length) {    System.arraycopy(macBytes,0,bytes,i,macBytes.length);  }  InetAddress address=InetAddress.getByName(ipStr);  DatagramPacket packet=new DatagramPacket(bytes,bytes.length,address,port);  for (int i=0; i < packets; i++) {    DatagramSocket socket=new DatagramSocket();    socket.setSoTimeout(timeoutMillis);    socket.send(packet);    socket.close();  }}  }
class C{  public void rotateAroundX(float angle){  angle*=Math.PI / 180.0;  float f1=MathHelper.cos(angle);  float f2=MathHelper.sin(angle);  double d0=this.x;  double d1=this.y * (double)f1 + this.z * (double)f2;  double d2=this.z * (double)f1 - this.y * (double)f2;  this.set(d0,d1,d2);}  }
class C{  public SVGOMTSpanElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public final void write(char cbuf[],int off,int len) throws IOException {  if (bufferSize == 0) {    writer.write(cbuf,off,len);    return;  }  if (len == 0) {    return;  }  if (len >= bufferSize) {    if (autoFlush)     flushBuffer(); else     bufferOverflow();    writer.write(cbuf,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(bufferSize - nextChar,t - b);    System.arraycopy(cbuf,b,cb,nextChar,d);    b+=d;    nextChar+=d;    if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  @Override public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  @Override public String toString(){  return "DragStartEvent(source=" + getSourceShortTypeName() + ")";}  }
class C{  public void writeUnsafe(int value){  buffer.put((byte)value);}  }
class C{  public TestSuiteBuilder(Class clazz){  this(clazz.getName(),clazz.getClassLoader());}  }
class C{  public T caseMetadatable(Metadatable object){  return null;}  }
class C{  public JsCompiler stopOnErrors(boolean flag){  stopOnErrors=flag;  return this;}  }
class C{  public Polygon toPolygon(int x,int y){  assert x >= 0 && y >= 0 && x < getGridWidth() && y < getGridHeight() : "x: " + x + "y: "+ y;  if (!isInGrid(x,y)) {    throw new IndexOutOfBoundsException();  }  Coordinate[] coordinates=new Coordinate[5];  double x_orig=getMBR().getMinX();  double y_orig=getMBR().getMinY();  coordinates[0]=new Coordinate();  coordinates[0].x=x_orig + (x * getPixelWidth());  coordinates[0].y=y_orig + (y * getPixelHeight());  coordinates[0].z=0.0;  coordinates[1]=new Coordinate();  coordinates[1].x=x_orig + (x * getPixelWidth());  coordinates[1].y=y_orig + ((y + 1) * getPixelHeight());  coordinates[1].z=0.0;  coordinates[2]=new Coordinate();  coordinates[2].x=x_orig + ((x + 1) * getPixelWidth());  coordinates[2].y=y_orig + ((y + 1) * getPixelHeight());  coordinates[2].z=0.0;  coordinates[3]=new Coordinate();  coordinates[3].x=x_orig + ((x + 1) * getPixelWidth());  coordinates[3].y=y_orig + (y * getPixelHeight());  coordinates[3].z=0.0;  coordinates[4]=new Coordinate();  coordinates[4].x=x_orig + (x * getPixelWidth());  coordinates[4].y=y_orig + (y * getPixelHeight());  coordinates[4].z=0.0;  LinearRing ring=geometryFactory.createLinearRing(coordinates);  Polygon polygon=geometryFactory.createPolygon(ring,null);  return polygon;}  }
class C{  void logAddOrRemoveRow(Session session,int tableId,Row row,boolean add){  if (trace.isDebugEnabled()) {    trace.debug("log " + (add ? "+" : "-") + " s: "+ session.getId()+ " table: "+ tableId+ " row: "+ row);  }  session.addLogPos(logSectionId,logPos);  logPos++;  Data data=dataBuffer;  data.reset();  int columns=row.getColumnCount();  data.writeVarInt(columns);  data.checkCapacity(row.getByteCount(data));  if (session.isRedoLogBinaryEnabled()) {    for (int i=0; i < columns; i++) {      data.writeValue(row.getValue(i));    }  } else {    for (int i=0; i < columns; i++) {      Value v=row.getValue(i);      if (v.getType() == Value.BYTES) {        data.writeValue(ValueNull.INSTANCE);      } else {        data.writeValue(v);      }    }  }  Data buffer=getBuffer();  buffer.writeByte((byte)(add ? ADD : REMOVE));  buffer.writeVarInt(session.getId());  buffer.writeVarInt(tableId);  buffer.writeVarLong(row.getKey());  if (add) {    buffer.writeVarInt(data.length());    buffer.checkCapacity(data.length());    buffer.write(data.getBytes(),0,data.length());  }  write(buffer);}  }
class C{  public static Object[] toArray(Iterator tuples,String field){  Object[] array=new Object[100];  int i=0;  for (; tuples.hasNext(); ++i) {    if (i >= array.length)     array=ArrayLib.resize(array,3 * array.length / 2);    array[i]=((Tuple)tuples.next()).get(field);  }  return ArrayLib.trim(array,i);}  }
class C{  @Override public void visit(Tree.MethodDefinition that){  if (!isNativeHeader(that.getDeclarationModel()))   return;  if (errorFree(that)) {    gen.encodeMethod(that.getDeclarationModel());    super.visit(that);  }}  }
class C{  public void divideConst(double c){  for (int i=0; i < probabilities.length; i++)   probabilities[i]/=c;}  }
class C{  private Token source_skipline(boolean white) throws IOException, LexerException {  Source s=getSource();  Token tok=s.skipline(white);  if (tok.getType() == EOF && s.isAutopop()) {    pop_source();    Source t=getSource();    if (getFeature(Feature.LINEMARKERS) && s.isNumbered() && t != null) {      return line_token(t.getLine() + 1,t.getName()," 2");    }  }  return tok;}  }
class C{  @Override public int cipherBits(){  if (!(_s instanceof SSLSocket))   return super.cipherBits();  SSLSocket sslSocket=(SSLSocket)_s;  SSLSession sslSession=sslSocket.getSession();  if (sslSession != null)   return _sslKeySizes.get(sslSession.getCipherSuite()); else   return 0;}  }
class C{  private static void debugOut(Throwable th){  if (testing) {    System.out.println(th);  }}  }
class C{  public CannotCompileException(Throwable e){  super("by " + e.toString());  message=null;  initCause(e);}  }
class C{  ProviderList removeInvalid(){  int n=loadAll();  if (n == configs.length) {    return this;  }  ProviderConfig[] newConfigs=new ProviderConfig[n];  for (int i=0, j=0; i < configs.length; i++) {    ProviderConfig config=configs[i];    if (config.isLoaded()) {      newConfigs[j++]=config;    }  }  return new ProviderList(newConfigs,true);}  }
class C{  public static boolean hasRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public MultiPercolateRequest add(BytesReference data,boolean allowExplicitIndex) throws Exception {  XContent xContent=XContentFactory.xContent(data);  int from=0;  int length=data.length();  byte marker=xContent.streamSeparator();  while (true) {    int nextMarker=findNextMarker(marker,from,data,length);    if (nextMarker == -1) {      break;    }    if (nextMarker == 0) {      from=nextMarker + 1;      continue;    }    PercolateRequest percolateRequest=new PercolateRequest();    if (indices != null) {      percolateRequest.indices(indices);    }    if (documentType != null) {      percolateRequest.documentType(documentType);    }    if (indicesOptions != IndicesOptions.strictExpandOpenAndForbidClosed()) {      percolateRequest.indicesOptions(indicesOptions);    }    if (nextMarker - from > 0) {      try (XContentParser parser=xContent.createParser(data.slice(from,nextMarker - from))){        XContentParser.Token token=parser.nextToken();        if (token != null) {          assert token == XContentParser.Token.START_OBJECT;          token=parser.nextToken();          if (token != XContentParser.Token.FIELD_NAME) {            throw new ElasticsearchParseException("Expected field");          }          token=parser.nextToken();          if (token != XContentParser.Token.START_OBJECT) {            throw new ElasticsearchParseException("expected start object");          }          String percolateAction=parser.currentName();          if ("percolate".equals(percolateAction)) {            parsePercolateAction(parser,percolateRequest,allowExplicitIndex);          } else           if ("count".equals(percolateAction)) {            percolateRequest.onlyCount(true);            parsePercolateAction(parser,percolateRequest,allowExplicitIndex);          } else {            throw new ElasticsearchParseException("[{}] isn't a supported percolate operation",percolateAction);          }        }      }     }    from=nextMarker + 1;    nextMarker=findNextMarker(marker,from,data,length);    if (nextMarker == -1) {      break;    }    percolateRequest.source(data.slice(from,nextMarker - from));    from=nextMarker + 1;    add(percolateRequest);  }  return this;}  }
class C{  public static WhiteList loadWhiteListFromJson(URI whitelistUri,ImportResolver resolver,MessageQueue mq) throws IOException, ParseException {  Pair<Reader,FilePosition> wl=resolver.resolve(whitelistUri,null,null);  try {    return (new JSONWhiteListLoader(wl.b,resolver,mq)).loadFrom(wl.a);  }  finally {    wl.a.close();  }}  }
class C{  public synchronized int totalReceivedMessages(){  return F.sumInt(receivedMessages().values());}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  DataFlavor[] flavors=getTransferDataFlavors();  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor))     return true;  }  return false;}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void waitForReceiverNotifications(int targetNumber) throws TimeoutException {  int count=mReceiver.numDownloadsCompleted();  int currentWaitTime=0;  while (count < targetNumber) {    Log.i(LOG_TAG,"Waiting for notification of downloads...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for download notifications!" + " Received " + count + "notifications.");    count=mReceiver.numDownloadsCompleted();  }}  }
class C{  public void run(){  File file=new File(base + template);  try {    if (file.exists()) {      log.info("loading template from: " + file.getName());      log.fine("--------------------------------");      DocFlavor flavor=DocFlavor.SERVICE_FORMATTED.PRINTABLE;      PrintRequestAttributeSet attrs=new HashPrintRequestAttributeSet();      attrs.add(OrientationRequested.PORTRAIT);      attrs.add(PrintQuality.HIGH);      attrs.add(new JobName(file.getName() + ".rio",null));      PrintService service=PrintServiceLookup.lookupDefaultPrintService();      if (service != null) {        log.info("printer selected : " + service.getName());        DocPrintJob job=service.createPrintJob();        job.addPrintJobListener(this);        PrintJobAttributeSet atts=job.getAttributes();        Attribute[] arr=atts.toArray();        for (int i=0; i < arr.length; i++) {          log.fine("arr[" + i + "]= "+ arr[0].getName());        }        Doc sdoc=new SimpleDoc(this,flavor,null);        SharedContext ctx=new SharedContext(uac);        ctx.registerWithThread();        ctx.setBaseURL(base);        job.print(sdoc,attrs);      } else {        log.info("printer selection cancelled");      }    } else {      log.severe("file " + file.getName() + " doesn't exist");    }  } catch (  Exception e) {    log.log(Level.SEVERE,"error loading file " + file.getName(),e);    e.printStackTrace();  }  runner=null;}  }
class C{  public final boolean isNIL(){  return getHead() == null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.132 -0500",hash_original_method="CE70A50578573A39D0EE1A321E1352B9",hash_generated_method="4ACBB08C16048E4D345988848A8BFF02") public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  private void bufferContent(){  if (buffer != null) {    return;  }  if (content != null) {    try {      final ByteArrayOutputStream tmp=new ByteArrayOutputStream();      final byte[] data=new byte[4096];      int l=0;      while ((l=content.read(data)) >= 0) {        tmp.write(data,0,l);      }      buffer=tmp.toByteArray();      content=null;      contentLength=buffer.length;    } catch (    final IOException e) {      LOG.error(e.getMessage(),e);      buffer=null;      content=null;      contentLength=0;    }  }}  }
class C{  public MulticastSocket() throws IOException {  setReuseAddress(true);}  }
class C{  public boolean isOK(){  return fSeverity == IStatus.OK;}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public MetadataEditorCompat putBitmap(int key,Bitmap bitmap){  if (sHasRemoteControlAPIs) {    try {      mPutBitmapMethod.invoke(mActualMetadataEditor,key,bitmap);    } catch (    Exception e) {      throw new RuntimeException(e.getMessage(),e);    }  }  return this;}  }
class C{  public static void captureImage(Context mContext,@SuppressWarnings("SameParameterValue") int CAMERA_CAPTURE_IMAGE_REQUEST_CODE,@SuppressWarnings("SameParameterValue") String camera){  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  fileUri=getOutputMediaFileUri(MEDIA_TYPE_IMAGE);  intent.putExtra(MediaStore.EXTRA_OUTPUT,fileUri);  if (camera.equalsIgnoreCase("Front")) {    intent.putExtra("android.intent.extras.CAMERA_FACING",Camera.CameraInfo.CAMERA_FACING_FRONT);  } else   if (camera.equalsIgnoreCase("Back")) {    intent.putExtra("android.intent.extras.CAMERA_FACING",Camera.CameraInfo.CAMERA_FACING_BACK);  }  ((Activity)mContext).startActivityForResult(intent,CAMERA_CAPTURE_IMAGE_REQUEST_CODE);}  }
class C{  private static void optimizeSteps(final Traversal.Admin traversal,final VertexStep step1,final Step step2){  final Step newStep=new VertexStep(traversal,Vertex.class,step1.getDirection(),step1.getEdgeLabels());  for (  final String label : (Iterable<String>)step2.getLabels()) {    newStep.addLabel(label);  }  TraversalHelper.replaceStep(step1,newStep,traversal);  traversal.removeStep(step2);}  }
class C{  public static boolean isSourceActive(int source){  return (Boolean)CompatUtils.invoke(null,false,METHOD_isSourceActive,source);}  }
class C{  public Boolean isDowngradeFormat(){  return downgradeFormat;}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__CHANGE_TYPE_1:  return CHANGE_TYPE_1_EDEFAULT == null ? changeType_1 != null : !CHANGE_TYPE_1_EDEFAULT.equals(changeType_1);case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__STATE_1:return state_1 != null && !state_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public final DccChat dccSendChatRequest(String nick,int timeout){  DccChat chat=null;  try {    ServerSocket ss=null;    int[] ports=getDccPorts();    if (ports == null) {      ss=new ServerSocket(0);    } else {      for (int i=0; i < ports.length; i++) {        try {          ss=new ServerSocket(ports[i]);          break;        } catch (        Exception e) {        }      }      if (ss == null) {        throw new IOException("All ports returned by getDccPorts() are in use.");      }    }    ss.setSoTimeout(timeout);    int port=ss.getLocalPort();    InetAddress inetAddress=getDccInetAddress();    if (inetAddress == null) {      inetAddress=getInetAddress();    }    byte[] ip=inetAddress.getAddress();    long ipNum=ipToLong(ip);    sendCTCPCommand(nick,"DCC CHAT chat " + ipNum + " "+ port);    Socket socket=ss.accept();    ss.close();    chat=new DccChat(this,nick,socket);  } catch (  Exception e) {  }  return chat;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public static BufferedWriter newWriter(File file,String charset,boolean append,boolean writeBom) throws IOException {  boolean shouldWriteBom=writeBom && !file.exists();  if (append) {    FileOutputStream stream=new FileOutputStream(file,append);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(stream,charset);    }    return new EncodingAwareBufferedWriter(new OutputStreamWriter(stream,charset));  } else {    FileOutputStream stream=new FileOutputStream(file);    if (shouldWriteBom) {      IOGroovyMethods.writeUTF16BomIfRequired(stream,charset);    }    return new EncodingAwareBufferedWriter(new OutputStreamWriter(stream,charset));  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public void addExportFormat(ExportFormat exportFormat){  getExportFormats().add(exportFormat);}  }
class C{  public Wine waitAllWatchDirectory(File directory,long endSize) throws CancelException {  ProgressControl progressControl=this.setupWizard.progressBar(format(translate("Please wait while the program is being installed..."),prefixName));  final long startSize=FileUtils.sizeOfDirectory(directory);  try (DirectoryWatcherSize observableDirectorySize=new DirectoryWatcherSize(executorService,prefix.getWinePrefixDirectory().toPath())){    observableDirectorySize.setOnChange(null);    waitExit();  } catch (  IllegalStateException e) {    throw new ScriptFailureException(e);  }  return this;}  }
class C{  @Override public DeploymentMode deployMode(){  return depMode;}  }
class C{  public ServerConnection(Socket s,Cache c,CachedRegionHelper helper,CacheServerStats stats,int hsTimeout,int socketBufferSize,String communicationModeStr,byte communicationMode,Acceptor acceptor){  StringBuffer buffer=new StringBuffer(100);  if (((AcceptorImpl)acceptor).isGatewayReceiver()) {    buffer.append("GatewayReceiver connection from [");  } else {    buffer.append("Server connection from [");  }  buffer.append(communicationModeStr).append(" host address=").append(s.getInetAddress().getHostAddress()).append("; ").append(communicationModeStr).append(" port=").append(s.getPort()).append("]");  this.name=buffer.toString();  this.stats=stats;  this.acceptor=(AcceptorImpl)acceptor;  this.crHelper=helper;  this.logWriter=(InternalLogWriter)c.getLoggerI18n();  this.securityLogWriter=(InternalLogWriter)c.getSecurityLoggerI18n();  this.communicationModeStr=communicationModeStr;  this.communicationMode=communicationMode;  this.principal=null;  this.authzRequest=null;  this.postAuthzRequest=null;  this.randomConnectionIdGen=new Random(this.hashCode());  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    initStreams(s,socketBufferSize,stats);    if (isDebugEnabled) {      logger.debug("{}: Accepted client connection from {}[client host name={}; client host address={}; client port={}]",getName(),s.getInetAddress().getCanonicalHostName(),s.getInetAddress().getHostAddress(),s.getPort());    }    this.handShakeTimeout=hsTimeout;  } catch (  Exception e) {    if (isDebugEnabled) {      logger.debug("While creating server connection",e);    }  }}  }
class C{  public void add(long val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  private String wrap(String str){  StringBuilder buf=new StringBuilder(str);  int len=lineLength;  while (len < buf.length()) {    int idx=buf.lastIndexOf(" ",len);    if (idx != -1) {      buf.replace(idx,idx + 1,breaker);      len=idx + breaker.length() + lineLength;    } else {      buf.insert(len,breaker);      len+=breaker.length() + lineLength;    }  }  buf.insert(0,"<html>");  return buf.toString();}  }
class C{  public void notify(final Service service,final SoundCloudTrack track,boolean isPaused){  if (mNotificationBuilder == null) {    initNotificationBuilder(service);  }  mNotificationView.setTextViewText(R.id.simple_sound_cloud_notification_title,track.getArtist());  mNotificationView.setTextViewText(R.id.simple_sound_cloud_notification_subtitle,track.getTitle());  mNotificationExpandedView.setTextViewText(R.id.simple_sound_cloud_notification_title,track.getArtist());  mNotificationExpandedView.setTextViewText(R.id.simple_sound_cloud_notification_subtitle,track.getTitle());  if (isPaused) {    mNotificationView.setImageViewResource(R.id.simple_sound_cloud_notification_play,R.drawable.simple_sound_cloud_notification_play);    mNotificationExpandedView.setImageViewResource(R.id.simple_sound_cloud_notification_play,R.drawable.simple_sound_cloud_notification_play);    mNotificationBuilder.setOngoing(false);  } else {    mNotificationView.setImageViewResource(R.id.simple_sound_cloud_notification_play,R.drawable.simple_sound_cloud_notification_pause);    mNotificationExpandedView.setImageViewResource(R.id.simple_sound_cloud_notification_play,R.drawable.simple_sound_cloud_notification_pause);    mNotificationBuilder.setOngoing(true);  }  service.startForeground(NOTIFICATION_ID,buildNotification());  int newTrackId=track.getId();  if (mTrackId == -1 || mTrackId != newTrackId) {    loadArtwork(service,SoundCloudArtworkHelper.getArtworkUrl(track,SoundCloudArtworkHelper.XLARGE));    mTrackId=newTrackId;  }}  }
class C{  public CTextField(String text){  super(text);  init();}  }
class C{  public void enableCallStatusDisplay(boolean aIsEnabled){  mIsCallStatusHidden=!aIsEnabled;}  }
class C{  public static void doCastToWrappedType(MethodVisitor mv,ClassNode sourceType,ClassNode targetType){  mv.visitMethodInsn(INVOKESTATIC,getClassInternalName(targetType),"valueOf","(" + getTypeDescription(sourceType) + ")"+ getTypeDescription(targetType),false);}  }
class C{  private static ByteString checkLowercase(ByteString name) throws IOException {  for (int i=0, length=name.size(); i < length; i++) {    byte c=name.getByte(i);    if (c >= 'A' && c <= 'Z') {      throw new IOException("PROTOCOL_ERROR response malformed: mixed case name: " + name.utf8());    }  }  return name;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static boolean isIPv6(final InetAddress ip){  return ip instanceof Inet6Address && ip.getHostName().equals(ip.getHostAddress());}  }
class C{  public MapOptions panControl(boolean panControl){  this.panControl=panControl;  return this;}  }
class C{  public final AC shrinkPrio(int p){  return shrinkPrio(p,curIx);}  }
class C{  void kick(){  if (ce() == null) {    return;  }  final Entity en=ce();  final boolean isAptPiloting=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);  final boolean isMeleeMaster=(en.getCrew() != null) && en.getCrew().getOptions().booleanOption("melee_master");  ToHitData leftLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.LEFT);  ToHitData rightLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.RIGHT);  ToHitData rightRearLeg=null;  ToHitData leftRearLeg=null;  ToHitData attackLeg;  int attackSide=KickAttackAction.LEFT;  int value=leftLeg.getValue();  attackLeg=leftLeg;  if (value > rightLeg.getValue()) {    value=rightLeg.getValue();    attackSide=KickAttackAction.RIGHT;    attackLeg=rightLeg;  }  if (clientgui.getClient().getGame().getEntity(cen) instanceof QuadMech) {    rightRearLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.RIGHTMULE);    leftRearLeg=KickAttackAction.toHit(clientgui.getClient().getGame(),cen,target,KickAttackAction.LEFTMULE);    if (value > rightRearLeg.getValue()) {      value=rightRearLeg.getValue();      attackSide=KickAttackAction.RIGHTMULE;      attackLeg=rightRearLeg;    }    if (value > leftRearLeg.getValue()) {      value=leftRearLeg.getValue();      attackSide=KickAttackAction.LEFTMULE;      attackLeg=leftRearLeg;    }  }  final double kickOdds=Compute.oddsAbove(attackLeg.getValue(),isAptPiloting);  final int kickDmg=KickAttackAction.getDamageFor(en,attackSide,(target instanceof Infantry) && !(target instanceof BattleArmor));  String title=Messages.getString("PhysicalDisplay.KickDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.KickDialog.message",new Object[]{attackLeg.getValueAsString(),kickOdds,attackLeg.getDesc(),kickDmg,attackLeg.getTableDesc()});  if (isMeleeMaster) {    message=Messages.getString("PhysicalDisplay.MeleeMaster") + "\n\n" + message;  }  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    attacks.addElement(new KickAttackAction(cen,target.getTargetType(),target.getTargetId(),attackSide));    if (isMeleeMaster) {      attacks.addElement(new KickAttackAction(cen,target.getTargetType(),target.getTargetId(),attackSide));    }    ready();  }}  }
class C{  private boolean isTypeValid(@NotNull final String value){  if (myType == ArgumentType.INTEGER) {    try {      Integer.parseInt(value);    } catch (    final NumberFormatException ignored) {      return false;    }  }  return true;}  }
class C{  protected void readTillEOL() throws IOException {  while (m_Tokenizer.nextToken() != StreamTokenizer.TT_EOL) {  }  m_Tokenizer.pushBack();}  }
class C{  public boolean isResponseAvailable() throws IOException {  LOG.trace("enter HttpConnection.isResponseAvailable()");  if (this.isOpen) {    return this.inputStream.available() > 0;  } else {    return false;  }}  }
class C{  public Coordinate[] simplify(double distanceTol){  this.distanceTol=Math.abs(distanceTol);  if (distanceTol < 0)   angleOrientation=CGAlgorithms.CLOCKWISE;  isDeleted=new byte[inputLine.length];  boolean isChanged=false;  do {    isChanged=deleteShallowConcavities();  } while (isChanged);  return collapseLine();}  }
class C{  private boolean parseLocationPath(PsiBuilder builder,boolean isAbsolute,PsiBuilder.Marker... m){  assert m.length <= 1;  PsiBuilder.Marker marker=m.length == 1 ? m[0] : builder.mark();  if (isAbsolute) {    makeToken(builder);    if (builder.getTokenType() == null) {      marker.done(XPathElementTypes.STEP);      return true;    }  }  if (!parseStep(builder)) {    marker.drop();    return false;  }  marker.done(XPathElementTypes.STEP);  marker=marker.precede();  if (XPathTokenTypes.PATH_OPS.contains(builder.getTokenType())) {    do {      makeToken(builder);      if (!parseStep(builder)) {        builder.error("location step expected");      }      marker.done(XPathElementTypes.STEP);      marker=marker.precede();    } while (XPathTokenTypes.PATH_OPS.contains(builder.getTokenType()));  }  marker.drop();  return true;}  }
class C{  public static void closeQuietly(Statement stmt){  if (stmt == null) {    return;  }  try {    stmt.close();  } catch (  SQLException ex) {  }}  }
class C{  public static void escapeJava(Writer out,String str) throws IOException {  escapeJavaStyleString(out,str,false,false);}  }
class C{  public LinearSGD(LossFunc loss,double lambda0,double lambda1){  this(loss,0.001,new PowerDecay(1,0.1),lambda0,lambda1);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static void appendTag(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> parentTag){  try {    tagManager.addTag(parentTag,parentTag.getObject().getId() == 0 ? "New Root Tag" : "New Child Tag");  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00135: " + "Could not append tag";    final String innerDescription=CUtilityFunctions.createDescription(String.format("It was not possible to append a tag to the tag '%s'.",parentTag.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag can not be appended."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  static public double log10(double value){  return Math.log(value) * 0.43429448190325176;}  }
class C{  public static boolean hasRotated(Location first,Location second){  return first.getPitch() != second.getPitch() || first.getYaw() != second.getYaw();}  }
class C{  @Override protected void onStop(){  if (null != mDownloaderClientStub) {    mDownloaderClientStub.disconnect(this);  }  super.onStop();}  }
class C{  public void addTransaction(Transaction t){  addTransaction(t,true);}  }
class C{  public static double incompleteBetaFraction2(double a,double b,double x){  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, z, thresh;  int n;  k1=a;  k2=b - 1.0;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=a + b;  k7=a + 1.0;  ;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  z=x / (1.0 - x);  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(z * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(z * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2-=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6+=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  private double calculateTraitsLikelihood(ContrastedTraitNode contrastNode){  int count=contrastNode.getTraitCount();  if (count == 1)   return calculateSingleTraitLikelihood(contrastNode);  return calculateMultipleTraitsLikelihood(contrastNode,count);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus activateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("activateInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=new PropertyHandler(settings);    ph.setState(FlowState.ACTIVATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Exception t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.ACTIVATION);  }}  }
class C{  public void onPreProcessRequest(AsyncHttpRequest request){}  }
class C{  private void cleanConstraintMaps(Container parent){  HashSet<Component> parentCompSet=new HashSet<Component>();  for (int iter=0; iter < parent.getComponentCount(); iter++) {    parentCompSet.add(parent.getComponentAt(iter));  }  Iterator<Map.Entry<ComponentWrapper,CC>> it=ccMap.entrySet().iterator();  while (it.hasNext()) {    Component c=(Component)it.next().getKey().getComponent();    if (parentCompSet.contains(c) == false) {      it.remove();      scrConstrMap.remove(c);    }  }}  }
class C{  @Override public int hashCode(){  return 2 * new Double(param).hashCode();}  }
class C{  @UiHandler("thirdChoiceButton") public void handleThirdChoiceClick(final ClickEvent event){  this.actionDelegate.thirdChoiceClicked();}  }
class C{  @Override protected void onTearDown() throws Exception {  endTransaction();}  }
class C{  private String hashKeyFromUrl(String url){  String key;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(url.getBytes());    key=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException ex) {    key=String.valueOf(url.hashCode());  }  return key;}  }
class C{  public DocValuesOrdinalsReader(String field){  this.field=field;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (selTable.getSelectedRow() >= 0) {    IDColumn id=(IDColumn)selTable.getValueAt(selTable.getSelectedRow(),0);    if (id != null)     display(id);  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,new Point(CameraManager.mDesiredWidth,CameraManager.mDesiredHeight));  Log.d(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public OscMessage add(){  _myTypetag=Bytes.append(_myTypetag,new byte[]{0x4e});  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.175 -0500",hash_original_method="1992218C2CA2A9A793E8A4995C16BACA",hash_generated_method="64D74600A863EF1A66C3817EBCC9190A") public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public void paintTreeBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public int accessFlags(int i){  return ByteArray.readU16bit(info,i * 4 + 3);}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  b.append("/");  if (getObjectId() != null) {    b.append(getObjectId());    if (getObjectInstanceId() != null) {      b.append("/").append(getObjectInstanceId());      if (getResourceId() != null) {        b.append("/").append(getResourceId());        if (getResourceInstanceId() != null) {          b.append("/").append(getResourceInstanceId());        }      }    }  }  return b.toString();}  }
class C{  public void applyMostPlayedChart(StatisticType type){  PieChart chart=(PieChart)mItemView.findViewById(R.id.statisticsChart);  mShownChallenges=mStatisticsLogic.fillChart(chart,type);  chart.setOnChartValueSelectedListener(new ChartValueSelectedListener(this));  if (chart.getData() != null) {    chart.highlightValue(0,0);    TextView text=(TextView)mItemView.findViewById(R.id.challengeView);    String question=mChallengeDataSource.getById(mShownChallenges.get(0)).getQuestion();    if (text != null)     text.setText(question);  }  TextView title=(TextView)mItemView.findViewById(R.id.titleView);  if (title != null)   title.setText(getTitle(type));}  }
class C{  void startStreamCompression() throws Exception {  serverAckdCompression=true;  initReaderAndWriter();  packetWriter.setWriter(writer);  packetWriter.openStream();synchronized (this) {    this.notify();  }}  }
class C{  public void actionPerformed(ActionEvent evt){  String data=textField.getText();  if (data != null) {    data=URLEncoder.encode(data);  }  AttributeSet attr=getElement().getAttributes();  HTMLDocument hdoc=(HTMLDocument)getElement().getDocument();  String action=(String)attr.getAttribute(HTML.Attribute.ACTION);  if (action == null) {    action=hdoc.getBase().toString();  }  try {    URL url=new URL(action + "?" + data);    JEditorPane pane=(JEditorPane)getContainer();    pane.setPage(url);  } catch (  MalformedURLException e1) {  }catch (  IOException e2) {  }}  }
class C{  public static boolean equals(final byte[] bufferA,final int offsetA,final byte[] bufferB,final int offsetB,final int len){  if (len < 0) {    return false;  }  if (offsetA < 0 || offsetA > bufferA.length) {    return false;  }  if (offsetB < 0 || offsetB > bufferB.length) {    return false;  }  if (offsetA + len > bufferA.length) {    return false;  }  if (offsetB + len > bufferB.length) {    return false;  }  for (int i=0; i < len; i++) {    if (bufferA[offsetA + i] != bufferB[offsetB + i]) {      return false;    }  }  return true;}  }
class C{  private Resource generatePreviewResource(Resource resource,Eml eml,BigDecimal nextVersion){  Resource copy=new Resource();  copy.setShortname(resource.getShortname());  copy.setTitle(resource.getTitle());  copy.setLastPublished(resource.getLastPublished());  copy.setStatus(resource.getStatus());  copy.setOrganisation(resource.getOrganisation());  copy.setKey(resource.getKey());  copy.setEmlVersion(nextVersion);  if (resource.isCitationAutoGenerated()) {    Citation citation=new Citation();    URI homepage=cfg.getResourceVersionUri(resource.getShortname(),nextVersion);    citation.setCitation(resource.generateResourceCitation(nextVersion,homepage));    eml.setCitation(citation);  }  Date releaseDate=new Date();  copy.setLastPublished(releaseDate);  eml.setPubDate(releaseDate);  copy.setEml(eml);  List<VersionHistory> histories=Lists.newArrayList();  histories.addAll(resource.getVersionHistory());  copy.setVersionHistory(histories);  VersionHistory history=new VersionHistory(nextVersion,releaseDate,PublicationStatus.PUBLIC);  User modifiedBy=getCurrentUser();  if (modifiedBy != null) {    history.setModifiedBy(modifiedBy);  }  if (resource.getDoi() != null && (resource.getIdentifierStatus() == IdentifierStatus.PUBLIC_PENDING_PUBLICATION || resource.getIdentifierStatus() == IdentifierStatus.PUBLIC)) {    copy.setDoi(resource.getDoi());    copy.setIdentifierStatus(IdentifierStatus.PUBLIC);    history.setDoi(resource.getDoi());    history.setStatus(IdentifierStatus.PUBLIC);  }  copy.addVersionHistory(history);  return copy;}  }
class C{  public Quaterniond rotationZ(double angle){  double cos=Math.cos(angle * 0.5);  double sin=Math.sin(angle * 0.5);  w=cos;  x=0.0;  y=0.0;  z=sin;  return this;}  }
class C{  public void writeAll(Iterable<String[]> allLines){  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  try {    for (    String[] line : allLines) {      writeNext(line,true,sb);      sb.setLength(0);    }  } catch (  IOException e) {    exception=e;  }}  }
class C{  public DefaultIoEventSizeEstimator(){  class2size.put(boolean.class,4);  class2size.put(byte.class,1);  class2size.put(char.class,2);  class2size.put(int.class,4);  class2size.put(short.class,2);  class2size.put(long.class,8);  class2size.put(float.class,4);  class2size.put(double.class,8);  class2size.put(void.class,0);}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(new ImmutablePair[]{(ImmutablePair)first,(ImmutablePair)second});}  }
class C{  public static StringBuilder appendMap(StringBuilder buff,HashMap<String,?> map){  ArrayList<String> list=New.arrayList(map.keySet());  Collections.sort(list);  for (  String k : list) {    appendMap(buff,k,map.get(k));  }  return buff;}  }
class C{  public T casePropertyAssignment(PropertyAssignment object){  return null;}  }
class C{  public DelimitedTextTableReader(){  this("\t");}  }
class C{  public ElementRule(Class type,String description,String example,int min,int max){  if (type == null)   throw new IllegalArgumentException("Class cannot be null!");  this.c=type;  this.min=min;  this.max=max;  this.description=description;  this.example=example;}  }
class C{  public boolean addRule(Rule r){  if (!super.validRule(r)) {    return false;  } else   if (!validRule(r)) {    return false;  }  rules.add(r);  updateVarsAndTerminals(r);  return true;}  }
class C{  public static ConcurrentModificationException newConcurrentModificationException(String message){  return new ConcurrentModificationException(formatMessage(0,message));}  }
class C{  public PaymentDeregistrationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public CDatabaseSortingHandler(final CDatabaseManager manager){  super(CModuleTransferable.MODULE_FLAVOR);  m_manager=Preconditions.checkNotNull(manager,"IE01926: Manager argument can not be null");}  }
class C{  public static WritableRecordStore makeRecordStorage(DBIDs ids,int hints,Class<?>... dataclasses){  return DataStoreFactory.FACTORY.makeRecordStorage(ids,hints,dataclasses);}  }
class C{  public static boolean isReferenceLiteral(int slot){  if (!isReference(slot) || slot > getHighestInUseSlot()) {    return false;  } else {    return (slotAsOffset(slot).toInt() == 0) || (findObjectLiteral(getSlotContentsAsObject(slotAsOffset(slot))) != 0);  }}  }
class C{  protected static void parse_grammar_spec() throws java.lang.Exception {  parser parser_obj;  parser_obj=new parser();  try {    if (opt_do_debug)     parser_obj.debug_parse(); else     parser_obj.parse();  } catch (  Exception e) {    lexer.emit_error("Internal error: Unexpected exception");    throw e;  }}  }
class C{  public Task(String description,TimePeriod duration){  ParamChecks.nullNotPermitted(description,"description");  this.description=description;  this.duration=duration;  this.percentComplete=null;  this.subtasks=new java.util.ArrayList();}  }
class C{  public static final CButton createCancelButton(boolean withText){  if (withText)   return createCancelButton(Msg.getMsg(Env.getCtx(),A_CANCEL));  return createCancelButton("");}  }
class C{  public void resizeAsync(final String clusterId,final int size,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/resize",getBasePath(),clusterId);  ClusterResizeOperation op=new ClusterResizeOperation();  op.setNewSlaveCount(size);  createObjectAsync(path,serializeObjectAsJson(op),responseCallback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:55:56.181 -0500",hash_original_method="0E268DF7E77D68AC976AB928986A09DD",hash_generated_method="2BECFD958CA5727B8248577B0B44C684") public static String[] appendSelectionArgs(String[] originalValues,String[] newValues){  if (originalValues == null || originalValues.length == 0) {    return newValues;  }  String[] result=new String[originalValues.length + newValues.length];  System.arraycopy(originalValues,0,result,0,originalValues.length);  System.arraycopy(newValues,0,result,originalValues.length,newValues.length);  return result;}  }
class C{  public void performShutdown(){  if (closeError != null)   statusObservable.onError(closeError); else   statusObservable.onCompleted();  scheduler.shutdown();}  }
class C{  public RaftParameters withHeartbeatInterval(int heartbeatInterval){  this.heartbeatInterval=heartbeatInterval;  return this;}  }
class C{  @Override protected void swapValues(int a,int b){  byte tt=values[a];  values[a]=values[b];  values[b]=tt;}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  if (!map.isEmpty()) {    putAllImpl(map);  }}  }
class C{  public static final boolean imageIsContiguous(RenderedImage image){  SampleModel sm;  if (image instanceof BufferedImage) {    WritableRaster ras=((BufferedImage)image).getRaster();    sm=ras.getSampleModel();  } else {    sm=image.getSampleModel();  }  if (sm instanceof ComponentSampleModel) {    ComponentSampleModel csm=(ComponentSampleModel)sm;    if (csm.getPixelStride() != csm.getNumBands()) {      return false;    }    int[] bandOffsets=csm.getBandOffsets();    for (int i=0; i < bandOffsets.length; i++) {      if (bandOffsets[i] != i) {        return false;      }    }    int[] bankIndices=csm.getBankIndices();    for (int i=0; i < bandOffsets.length; i++) {      if (bankIndices[i] != 0) {        return false;      }    }    return true;  }  return ImageUtil.isBinary(sm);}  }
class C{  private void logGraphicalLoadAverage(double loadAvg,int availCpus){  double loadAverage=loadAvg;  if (loadAverage < 0) {    loadAverage=0;  }  double value=(double)WIDTH / availCpus;  long load=Math.round(loadAverage * value);  if (load > WIDTH) {    load=WIDTH;  }  String title="CPU load";  StringBuilder sb=new StringBuilder();  sb.append(START_END_CHAR);  sb.append('-');  sb.append(title);  for (int i=title.length() + 1; i < WIDTH; i++) {    sb.append('-');  }  sb.append(START_END_CHAR);  log.info(sb.toString());  sb=new StringBuilder();  sb.append(START_END_CHAR);  for (int i=0; i < load; i++) {    sb.append('/');  }  for (long i=load; i < WIDTH; i++) {    sb.append(' ');  }  sb.append(START_END_CHAR);  log.info(sb.toString());  sb=new StringBuilder();  sb.append(START_END_CHAR);  for (int i=0; i < WIDTH; i++) {    sb.append('-');  }  sb.append(START_END_CHAR);  log.info(sb.toString());}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENUM_ATTRIBUTE_SOURCE;}  }
class C{  private static void learn(){  int listSize=learningQueue.size();  LOG.info("THE classifier will be retrained on new list of" + listSize);  for (int i=0; i < listSize; i++) {    Instance inst=learningQueue.poll();    if (inst != null)     learner.trainOnInstance(inst);  }}  }
class C{  protected void showState(){  int[] vals=((EightPuzzleEnvironment)env).getBoard().getState();  for (int i=0; i < 9; i++) {    squareButtons[i].setBackground(vals[i] == 0 ? Color.LIGHT_GRAY : Color.WHITE);    squareButtons[i].setText(vals[i] == 0 ? "" : Integer.toString(vals[i]));  }}  }
class C{  public void testRLE() throws IOException {  ArrayList<File> files=FileUtils.getAllImageFiles(new File("testdata/ferrari"),true);  int sum=0, saved=0;  for (Iterator<File> iterator=files.iterator(); iterator.hasNext(); ) {    File next=iterator.next();    BufferedImage image=ImageIO.read(next);    ScalableColor f1=new ScalableColor();    f1.extract(image);    double[] hist=f1.getDoubleHistogram();    int[] rep=new int[hist.length];    int actualLength=0;    for (int i=0; i < hist.length; i++) {      if (hist[i] == 0) {        int count=0;        while (i + count < hist.length && hist[i + count] == 0 && count < 8)         count++;        if (count == 0)         rep[actualLength]=0; else {          rep[actualLength]=7 + count;          i+=count - 1;        }      } else {        rep[actualLength]=(int)hist[i];      }      actualLength++;    }    for (int i=0; i < actualLength; i++) {      System.out.print(rep[i] + " ");    }    System.out.println();    double[] hist2=new double[144];    int pos=0;    for (int i=0; i < actualLength; i++) {      if (rep[i] < 8) {        hist2[pos]=rep[i];        pos++;      } else {        for (int j=7; j < rep[i]; j++) {          hist2[pos]=0;          pos++;        }      }    }    sum+=144;    saved+=actualLength;    assertTrue(Arrays.equals(hist2,f1.getDoubleHistogram()));  }  System.out.println("sum of dimensions = " + sum);  System.out.println("actual dimensions = " + saved);}  }
class C{  public int size(){  return options.size();}  }
class C{  private Program(String name,boolean parallel,boolean closure,IQueryOptions queryOptions){  if (name == null)   throw new IllegalArgumentException();  if (queryOptions == null)   throw new IllegalArgumentException();  this.name=name;  this.parallel=parallel;  this.closure=closure;  this.queryOptions=queryOptions;}  }
class C{  public void reportDeferredDiagnostic(){  if (deferredDiagnosticKind != null) {    if (deferredDiagnosticArg == null)     logMandatoryNote(deferredDiagnosticSource,deferredDiagnosticKind.getKey(prefix)); else     logMandatoryNote(deferredDiagnosticSource,deferredDiagnosticKind.getKey(prefix),deferredDiagnosticArg);    if (!verbose)     logMandatoryNote(deferredDiagnosticSource,prefix + ".recompile");  }}  }
class C{  public void removePropertyChangeListener(ScenePropertyChangeListener listener){  if (listener != null) {    logger.log(Level.FINE,"Remove property listener {0}",listener);    listeners.remove(listener);  }}  }
class C{  public ExchangeRate(final ExchangeRate toCopy){  source_=toCopy.source_;  target_=toCopy.target_;  rate_=toCopy.rate_;  type_=toCopy.type_;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int deleteJobDetail(Connection conn,JobKey jobKey) throws SQLException {  PreparedStatement ps=null;  try {    if (logger.isDebugEnabled()) {      logger.debug("Deleting job: " + jobKey);    }    ps=conn.prepareStatement(rtp(DELETE_JOB_DETAIL));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  private VisorNodeGcJob(Void arg,boolean debug){  super(arg,debug);}  }
class C{  public DataSource<Void> prefetchToDiskCache(ImageRequest imageRequest,Object callerContext,Priority priority){  if (!mIsPrefetchEnabledSupplier.get()) {    return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);  }  try {    Producer<Void> producerSequence=mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);    return submitPrefetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext,priority);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  public static BigDecimal convertBase(Properties ctx,BigDecimal Amt,int CurFrom_ID,Timestamp ConvDate,int C_ConversionType_ID,int AD_Client_ID,int AD_Org_ID){  return convert(ctx,Amt,CurFrom_ID,MClient.get(ctx).getC_Currency_ID(),ConvDate,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);}  }
class C{  public boolean doesConfigExist() throws Exception {  List<Configuration> configs=_coordinator.queryAllConfiguration(SIGNATURE_KEY_CONFIG);  if (CollectionUtils.isEmpty(configs)) {    return false;  }  return true;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public ShowHideToolBarAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ShowHideToolBarAction.statusbar"));  putValue(NAME,res.getString("ShowHideToolBarAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ShowHideToolBarAction.tooltip"));}  }
class C{  protected void makeWidgets(){  String locText;  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  setLayout(gridbag);  locText=i18n.get(CoordPanel.class,"border","Decimal Degrees");  setBorder(new TitledBorder(new EtchedBorder(),locText));  Insets leftInsets=new Insets(0,10,0,10);  Insets rightInsets=new Insets(0,0,0,10);  locText=i18n.get(CoordPanel.class,"latlabel","Latitude: ");  JLabel latlabel=new JLabel(locText);  c.gridx=0;  c.gridy=0;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  c.anchor=GridBagConstraints.EAST;  gridbag.setConstraints(latlabel,c);  add(latlabel);  latitude=new JTextField(10);  c.gridx=1;  c.gridy=0;  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=1.0f;  c.insets=rightInsets;  gridbag.setConstraints(latitude,c);  add(latitude);  locText=i18n.get(CoordPanel.class,"lonlabel","Longitude: ");  JLabel lonlabel=new JLabel(locText);  c.gridx=0;  c.gridy=1;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  gridbag.setConstraints(lonlabel,c);  add(lonlabel);  longitude=new JTextField(10);  c.gridx=1;  c.gridy=1;  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=1.0f;  c.insets=rightInsets;  gridbag.setConstraints(longitude,c);  add(longitude);}  }
class C{  private void createMediaPlayerIfNeeded(){  LogUtils.d(TAG,"createMediaPlayerIfNeeded. needed? ",(mMediaPlayer == null));  if (mMediaPlayer == null) {    mMediaPlayer=new MediaPlayer();    mMediaPlayer.setWakeMode(mService.getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);    mMediaPlayer.setOnPreparedListener(this);    mMediaPlayer.setOnCompletionListener(this);    mMediaPlayer.setOnErrorListener(this);    mMediaPlayer.setOnSeekCompleteListener(this);  } else {    mMediaPlayer.reset();  }}  }
class C{  public boolean isShipConfirm(){  Object oo=get_Value(COLUMNNAME_IsShipConfirm);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void printDepGraph(){  System.out.println(toString());  System.out.println("-----------------------------------");}  }
class C{  public MMRadSplit(){  super();}  }
class C{  public void testOpenWithBadChecksumType() throws Exception {  File logDir=prepareLogDir("testOpenWithBadChecksumType");  DiskLog log=openLog(logDir,false);  writeEventsToLog(log,4);  LogFile lf=log.getLogFile(3);  RandomAccessFile raf=new RandomAccessFile(lf.getFile(),"rw");  long len=raf.length();  raf.seek(len - 9);  raf.writeByte(101);  raf.close();  log.release();  try {    log=openLog(logDir,false);    throw new Exception("Able to open log with bad checksum!");  } catch (  LogConsistencyException e) {    logger.info("Received expected exception" + e.toString());  }  findSeqnoWithoutChecksums(logDir,3);}  }
class C{  public boolean hasRespondedToBaudRateQuery(){  return isBaudRateQueried;}  }
class C{  public static FetchHealthDiagnosisResponse create(DistributionManager dm,InternalDistributedMember recipient,int id,GemFireHealth.Health healthCode){  FetchHealthDiagnosisResponse m=new FetchHealthDiagnosisResponse();  m.setRecipient(recipient);{    HealthMonitor hm=dm.getHealthMonitor(recipient);    if (hm.getId() == id) {      m.diagnosis=hm.getDiagnosis(healthCode);    }  }  return m;}  }
class C{  public String toString(int depth){  if (depth <= 0)   return "";  String sEO="";  if (this.subExpressionOf != null) {    sEO=Strings.indent(2,"\nsubExpressionOf: " + Strings.indent(2,this.subExpressionOf.toString(1)));  }  ;  return "\n*OpApplNode: " + operator.getName() + "  "+ super.toString(depth + 1)+ "  errors: "+ (errors != null ? "non-null" : "null")+ toStringBody(depth)+ sEO;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.875 -0500",hash_original_method="85265833A731D9185DA35397C2BF1AAD",hash_generated_method="3680A25A8219A45DFCC50FEC17B62D94") private void createAndQueueNewRequest(){  if (mConnection != null) {    RequestHandle newHandle=mRequestQueue.queueSynchronousRequest(mUrl,mUri,mMethod,mHeaders,mRequest.mEventHandler,mBodyProvider,mBodyLength);    mRequest=newHandle.mRequest;    mConnection=newHandle.mConnection;    newHandle.processRequest();    return;  }  mRequest=mRequestQueue.queueRequest(mUrl,mUri,mMethod,mHeaders,mRequest.mEventHandler,mBodyProvider,mBodyLength).mRequest;}  }
class C{  private void processTokenResponse(String responseCode,String result){  String refreshToken;  String accessToken;  int timeToExpireSecond;  try {    IdentityProxy identityProxy=IdentityProxy.getInstance();    if (Constants.REQUEST_SUCCESSFUL.equals(responseCode)) {      JSONObject response=new JSONObject(result);      try {        accessToken=response.getString(Constants.ACCESS_TOKEN);        refreshToken=response.getString(Constants.REFRESH_TOKEN);        timeToExpireSecond=Integer.parseInt(response.getString(Constants.EXPIRE_LABEL));        Token token=new Token();        Date date=new Date();        String currentDate=dateFormat.format(date);        token.setDate(currentDate);        token.setRefreshToken(refreshToken);        token.setAccessToken(accessToken);        token.setExpired(false);        SharedPreferences mainPref=IdentityProxy.getInstance().getContext().getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);        Editor editor=mainPref.edit();        editor.putString(Constants.ACCESS_TOKEN,accessToken);        editor.putString(Constants.REFRESH_TOKEN,refreshToken);        editor.putString(USERNAME_LABEL,info.getUsername());        long expiresIn=date.getTime() + (timeToExpireSecond * 1000);        Date expireDate=new Date(expiresIn);        String strDate=dateFormat.format(expireDate);        token.setDate(strDate);        editor.putString(Constants.DATE_LABEL,strDate);        editor.commit();        identityProxy.receiveAccessToken(responseCode,Constants.SUCCESS_RESPONSE,token);      } catch (      JSONException e) {        Log.e(TAG,"Invalid JSON format",e);      }    } else     if (responseCode != null) {      if (Constants.INTERNAL_SERVER_ERROR.equals(responseCode)) {        identityProxy.receiveAccessToken(responseCode,result,null);      } else {        JSONObject mainObject=new JSONObject(result);        String errorDescription=mainObject.getString(Constants.ERROR_DESCRIPTION_LABEL);        identityProxy.receiveAccessToken(responseCode,errorDescription,null);      }    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON",e);  }}  }
class C{  public static int calcHeaderWidth(JTable table,int col){  if (table == null)   return -1;  if (col < 0 || col > table.getColumnCount()) {    System.out.println("invalid col " + col);    return -1;  }  JTableHeader header=table.getTableHeader();  TableCellRenderer defaultHeaderRenderer=null;  if (header != null)   defaultHeaderRenderer=header.getDefaultRenderer();  TableColumnModel columns=table.getColumnModel();  TableColumn column=columns.getColumn(col);  int width=-1;  TableCellRenderer h=column.getHeaderRenderer();  if (h == null)   h=defaultHeaderRenderer;  if (h != null) {    Component c=h.getTableCellRendererComponent(table,column.getHeaderValue(),false,false,-1,col);    width=c.getPreferredSize().width + 5;  }  return width;}  }
class C{  public String globalInfo(){  return "Designate an incoming data set as a test set.";}  }
class C{  public void validationRemoved(String validationKey){  upstreamValidationManager.validationStateRemoved(DynamicNameExtractionPart.TITLE,validationKey);  ValidationControlDecoration<?> toRemove=null;  for (  Entry<ValidationControlDecoration<?>,String> entry : controlValidators.entrySet()) {    if (entry.getValue().equals(validationKey)) {      toRemove=entry.getKey();      break;    }  }  controlValidators.remove(toRemove);}  }
class C{  public static void showWarning(final String message){  closeStartupDialogs();  MessageService.instance().showWarning(message);}  }
class C{  public RotationMatrixBuilder(int dimension){  super();  this.dimension=dimension;  planes=new ArrayList<Plane>();}  }
class C{  private void logDroppedData(){  log.info("Dropped elements due to the high load on the CMR (total count): " + cmrManagementService.getDroppedDataCount());}  }
class C{  public void orientCollidersUsingSepsetsPattern(SepsetMap set,IKnowledge knowledge,Graph graph){  TetradLogger.getInstance().log("info","Starting Collider Orientation:");  List<Node> nodes=graph.getNodes();  for (  Node a : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(a);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node b=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(b,c)) {        continue;      }      List<Node> sepset=set.get(b,c);      if (sepset != null && !sepset.contains(a) && isArrowpointAllowedPattern(b,a,knowledge,graph) && isArrowpointAllowedPattern(c,a,knowledge,graph) && !createsCycle(b,a,graph) && !createsCycle(c,a,graph)) {        graph.setEndpoint(b,a,Endpoint.ARROW);        graph.setEndpoint(c,a,Endpoint.ARROW);        TetradLogger.getInstance().log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(b,a,c,sepset));        new MeekRulesPattern().meekR2(graph,knowledge);      }    }  }  TetradLogger.getInstance().log("info","Finishing Collider Orientation.");}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x) throws SQLException {  updateCharacterStream(columnIndex,x,-1);}  }
class C{  @Override public void pause(boolean shouldBePaused){  paused=shouldBePaused;  if (currentProcess != null && !currentProcess.isTerminated) {    log.fine("trying to terminate the process?");    currentProcess.isTerminated=true;  }}  }
class C{  public void incrementEntry(Assignment a,double probIncr,double utilIncr){  double[] old=matrix.getOrDefault(a,new double[]{0.0,0.0});  double[] val=new double[]{old[0] + probIncr,old[1] + utilIncr};  matrix.put(a,val);}  }
class C{  private boolean isNotHotspotClass(String className){  return (isShowHotspotClasses() || !(className.indexOf("[internal HotSpot]") >= 0));}  }
class C{  public static double[] randomNormal(int m,double mu,double sigma){  double[] A=new double[m];  for (int i=0; i < A.length; i++)   A[i]=Random.normal(mu,sigma);  return A;}  }
class C{  @Override public boolean execute(String sql) throws SQLException {  try {    debugCodeCall("execute",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  @Override public MapStream<K,V> sequential(){  inner=inner.sequential();  return this;}  }
class C{  public void checkpointStart(){  if (_isWhileCheckpoint) {    throw new IllegalStateException();  }  _isWhileCheckpoint=true;  long sequence=++_sequence;  setSequence(sequence);  byte[] headerBuffer=_headerBuffer;  BitsUtil.writeInt16(headerBuffer,0,CHECKPOINT_START);  writeImpl(headerBuffer,0,2);  _lastCheckpointStart=_index - _startAddress;}  }
class C{  void validateMirrors(Collection<? extends Mirror> mirrors){  Iterator<? extends Mirror> iter=mirrors.iterator();  while (iter.hasNext()) {    MirrorImpl mirror=(MirrorImpl)iter.next();    if (!vm.equals(mirror.vm)) {      throw new VMMismatchException(mirror.toString());    }  }}  }
class C{  public BuddhistCalendar(TimeZone zone){  super(zone);}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.492 -0500",hash_original_method="F539697840E1FFDBA9E983D0C0D8D0DD",hash_generated_method="EFC70E180FE8A4B13933F470F54EF0F3") public boolean sendKeyEvent(KeyEvent event){synchronized (mIMM.mH) {    Handler h=mTargetView != null ? mTargetView.getHandler() : null;    if (h == null) {      if (mIMM.mServedView != null) {        h=mIMM.mServedView.getHandler();      }    }    if (h != null) {      h.sendMessage(h.obtainMessage(ViewRootImpl.DISPATCH_KEY_FROM_IME,event));    }  }  return false;}  }
class C{  public boolean isSquare(){  return (getRowDimension() == getColumnDimension());}  }
class C{  private static int intIntoCharArray(char[] buf,int cursor,int n){  while ((n & 0xffff0000) != 0) {    int q=(int)((0x51EB851FL * (n >>> 2)) >>> 35);    int r=n - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    n=q;  }  while (n != 0) {    int q=(0xCCCD * n) >>> 19;    int r=n - 10 * q;    buf[--cursor]=DIGITS[r];    n=q;  }  return cursor;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.round(z1));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void drawHighFarOut(double aRadius,Graphics2D g2,double xx,double m){  double side=aRadius * 2;  g2.draw(new Line2D.Double(xx - side,m + side,xx + side,m + side));  g2.draw(new Line2D.Double(xx - side,m + side,xx,m));  g2.draw(new Line2D.Double(xx + side,m + side,xx,m));}  }
class C{  public static Date now(){  return mockTime != null ? mockTime : new Date();}  }
class C{  public static void initialize(Application app,QuantumFluxDatabaseUpgradeListener quantumFluxDatabaseUpgradeListener){  initialize(app,null,quantumFluxDatabaseUpgradeListener);}  }
class C{  public LineColTrackingAppendable(Appendable out,CharSequence indent){  this.out=out;  this.indent=indent;}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  public boolean isOwner(){  if (getUser().isIdentifiedUser()) {    Account.Id id=getUser().asIdentifiedUser().getAccountId();    return id.equals(getChange().getOwner());  }  return false;}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  try {    super.dynInit();    dynInit();    jbInit();    calculate();    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    frame.getContentPane().add(statusBar,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  @Override public String toString(){switch (value) {case EQUAL:    return "==";case NOT_EQUAL:  return "!=";case LESS:return "<";case LESS_EQUAL:return "<=";case GREATER:return ">";case GREATER_EQUAL:return ">=";case HIGHER:return ">U";case LOWER:return "<U";case HIGHER_EQUAL:return ">=U";case LOWER_EQUAL:return "<=U";case CMPL_EQUAL:return "==F";case CMPL_GREATER:return ">F";case CMPG_LESS:return "<F";case CMPL_GREATER_EQUAL:return ">=F";case CMPG_LESS_EQUAL:return "<=F";case CMPL_NOT_EQUAL:return "!=FU";case CMPL_LESS:return "<FU";case CMPG_GREATER_EQUAL:return ">=FU";case CMPG_GREATER:return ">FU";case CMPL_LESS_EQUAL:return "<=FU";case CARRY_FROM_ADD:return "carry(+)";case NO_CARRY_FROM_ADD:return "nocarry(+)";case OVERFLOW_FROM_ADD:return "overflow(+)";case NO_OVERFLOW_FROM_ADD:return "nooverflow(+)";case BORROW_FROM_SUB:return "borrow(-)";case NO_BORROW_FROM_SUB:return "noborrow(-)";case BORROW_FROM_RSUB:return "borrow(r-)";case NO_BORROW_FROM_RSUB:return "noborrow(r-)";case OVERFLOW_FROM_SUB:return "overflow(-)";case NO_OVERFLOW_FROM_SUB:return "nooverflow(-)";case OVERFLOW_FROM_RSUB:return "overflow(r-)";case NO_OVERFLOW_FROM_RSUB:return "nooverflow(r-)";case BIT_TEST:return "bt";case NO_BIT_TEST:return "!bt";case RBIT_TEST:return "rbt";case NO_RBIT_TEST:return "!rbt";case OVERFLOW_FROM_MUL:return "overflow(*)";case NO_OVERFLOW_FROM_MUL:return "nooverflow(*)";default :return "UNKNOWN";}}  }
class C{  public boolean isDestroyed(){  return _lifecycle.isDestroyed();}  }
class C{  protected void removeToken(String token){synchronized (sessionTokens) {    sessionTokens.remove(token);  }}  }
class C{  public Purify(CorrelationMatrix correlationMatrix,double sig,TestType testType,Clusters clusters){  if (DataUtils.containsMissingValue(correlationMatrix.getMatrix())) {    throw new IllegalArgumentException("Please remove or impute missing data first.");  }  this.correlationMatrix=correlationMatrix;  initAlgorithm(sig,testType,clusters);  if (testType == TestType.TETRAD_DELTA) {    throw new RuntimeException("Covariance/correlation matrix is not enough to " + "run Bollen's tetrad test.");  }  this.variables=correlationMatrix.getVariables();}  }
class C{  public void fireRequestMessage(InfoDisplayEvent evt){  for (  InfoDisplayListener listener : IDListeners) {    listener.requestMessage(evt);  }}  }
class C{  public OperationPendingExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  @Override public synchronized void clear() throws IOException {  ConcurrentLog.info("Heap","clearing heap " + this.name());  assert this.buffer != null;  if (this.buffer == null)   this.buffer=new TreeMap<byte[],byte[]>(this.ordering);  this.buffer.clear();  this.buffersize=0;  super.clear();}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  double total=0;  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    total+=mDataset.getValue(i);    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  float currentAngle=mRenderer.getStartAngle();  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  mPieMapper.setDimensions(radius,mCenterX,mCenterY);  boolean loadPieCfg=!mPieMapper.areAllSegmentPresent(sLength);  if (loadPieCfg) {    mPieMapper.clearPieSegments();  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int i=0; i < sLength; i++) {    SimpleSeriesRenderer seriesRenderer=mRenderer.getSeriesRendererAt(i);    if (seriesRenderer.isGradientEnabled()) {      RadialGradient grad=new RadialGradient(mCenterX,mCenterY,longRadius,seriesRenderer.getGradientStartColor(),seriesRenderer.getGradientStopColor(),TileMode.MIRROR);      paint.setShader(grad);    } else {      paint.setColor(seriesRenderer.getColor());    }    float value=(float)mDataset.getValue(i);    float angle=(float)(value / total * 360);    if (seriesRenderer.isHighlighted()) {      double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));      float translateX=(float)(radius * 0.1 * Math.sin(rAngle));      float translateY=(float)(radius * 0.1 * Math.cos(rAngle));      oval.offset(translateX,translateY);      canvas.drawArc(oval,currentAngle,angle,true,paint);      oval.offset(-translateX,-translateY);    } else {      canvas.drawArc(oval,currentAngle,angle,true,paint);    }    paint.setColor(seriesRenderer.getColor());    paint.setShader(null);    drawLabel(canvas,mDataset.getCategory(i),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);    if (mRenderer.isDisplayValues()) {      drawLabel(canvas,getLabel(mRenderer.getSeriesRendererAt(i).getChartValuesFormat(),mDataset.getValue(i)),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius / 2,longRadius / 2,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,false,true);    }    if (loadPieCfg) {      mPieMapper.addPieSegment(i,value,currentAngle,angle);    }    currentAngle+=angle;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public ConflationKey(Object entryKey,String regionPath,boolean allowsConflation){  this.entryKey=entryKey;  this.regionPath=regionPath;  this.allowsConflation=allowsConflation;}  }
class C{  protected StmtBody(SootMethod m){  super(m);}  }
class C{  @Override public void transitionToActive(){  this.role=HARole.ACTIVE.getOFRole();}  }
class C{  public int lengthPGPData(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_PGPDATA);}  }
class C{  public static boolean isLmpOrAbove(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public static byte[] nextBytes(int nBytes){  byte[] buffer=new byte[nBytes];  return nextBytes(buffer);}  }
class C{  public Groestl512(){  super();}  }
class C{  private static ChangeCorrectionProposal addSetterProposal(ProposalParameter context,int relevance){  boolean isBoolean=isBoolean(context);  String setterName=GetterSetterUtil.getSetterName(context.variableBinding,context.compilationUnit.getJavaProject(),null,isBoolean);  ITypeBinding declaringType=context.variableBinding.getDeclaringClass();  if (declaringType == null)   return null;  IMethodBinding method=Bindings.findMethodInHierarchy(declaringType,setterName,new ITypeBinding[]{context.variableBinding.getType()});  if (method != null && Bindings.isVoidType(method.getReturnType()) && (Modifier.isStatic(method.getModifiers()) == Modifier.isStatic(context.variableBinding.getModifiers()))) {    Expression assignedValue=getAssignedValue(context);    if (assignedValue == null)     return null;    Expression mi=createMethodInvocation(context,method,assignedValue);    context.astRewrite.replace(context.accessNode.getParent(),mi,null);    String label=Messages.format(CorrectionMessages.GetterSetterCorrectionSubProcessor_replacewithsetter_description,BasicElementLabels.getJavaCodeString(ASTNodes.asString(context.accessNode)));    Image image=JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);    ASTRewriteCorrectionProposal proposal=new ASTRewriteCorrectionProposal(label,context.compilationUnit,context.astRewrite,relevance,image);    return proposal;  } else {  }  return null;}  }
class C{  public Call(String functionName,Class<?> returnType,String name1,Class<?> type1,String name2,Class<?> type2){  this(functionName,returnType,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  public void start(){  super.start();  setupPortrayals();}  }
class C{  public void addMediaElement(String participantId,MediaElement element) throws RoomException {  addMediaElement(participantId,element,null);}  }
class C{  private SignedRequestsHelper(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_TYPE__MULTIPLICITY:    setMultiplicity(MULTIPLICITY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException();          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException();          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException();          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException();    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException();    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @Transactional protected void _setServiceEnabled(boolean enabled){synchronized (_serviceManagementRecordService) {    ServiceManagementRecord record=_serviceManagementRecordService.findServiceManagementRecord(Service.SCHEDULING);    if (record == null) {      record=new ServiceManagementRecord(_userService.findAdminUser(),Service.SCHEDULING,enabled);    }    record.setEnabled(enabled);    _serviceManagementRecordService.updateServiceManagementRecord(record);  }}  }
class C{  public V remove(Object key){  return doRemove(key,null);}  }
class C{  public static final boolean isSymbol(int value){  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetdoctype.class,args);}  }
class C{  public void testNestedCallProc() throws Exception {  check("CALL func1(field1, CALL func2(field2))","{call func1(field1, {call func2(field2)})}");  check("select CALL func1(field1, CALL func2(field2))","select {call func1(field1, {call func2(field2)})}");  check("select CALL func1(field1, CALL func2(field2), field3) from SomeTable;","select {call func1(field1, {call func2(field2)}, field3)} from SomeTable;");}  }
class C{  public void afterLast() throws SQLException {  checkCursorMove();  fbFetcher.afterLast();  notifyRowUpdater();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.dialBackgroundPaint=SerialUtilities.readPaint(stream);  this.dialOutlinePaint=SerialUtilities.readPaint(stream);  this.needlePaint=SerialUtilities.readPaint(stream);  this.valuePaint=SerialUtilities.readPaint(stream);  this.tickPaint=SerialUtilities.readPaint(stream);  this.tickLabelPaint=SerialUtilities.readPaint(stream);  if (this.dataset != null) {    this.dataset.addChangeListener(this);  }}  }
class C{  public boolean isCanceled(){  return canceled;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(6);  value=splitNode.getNodeValue();  assertEquals("textSplitTextThreeAssert"," Jones",value);}  }
class C{  static void skipWhitespace(IXMLReader reader,StringBuffer buffer) throws IOException {  char ch;  if (buffer == null) {    do {      ch=reader.read();    } while ((ch == ' ') || (ch == '\t') || (ch == '\n'));  } else {    for (; ; ) {      ch=reader.read();      if ((ch != ' ') && (ch != '\t') && (ch != '\n')) {        break;      }      if (ch == '\n') {        buffer.append('\n');      } else {        buffer.append(' ');      }    }  }  reader.unread(ch);}  }
class C{  public static int[][] align(int[] real,int[] pred){  int missing=numberOfMissingLabels(real);  int[] _real=new int[real.length - missing];  int[] _pred=new int[real.length - missing];  int offset=0;  for (int i=0; i < real.length; i++) {    if (real[i] == -1 || pred[i] == -1) {      offset++;      continue;    }    _real[i - offset]=real[i];    _pred[i - offset]=pred[i];  }  int[][] res=new int[2][0];  res[0]=_real;  res[1]=_pred;  return res;}  }
class C{  public void testRotationEvents() throws Exception {  LogFile tfrw=LogHelper.createLogFile("testRotationEvents.dat",3);  LogEventRotateWriter writer=new LogEventRotateWriter(tfrw.getFile(),45,true);  LogRecord logRec=writer.write();  tfrw.writeRecord(logRec,10000);  tfrw.close();  LogFile tfro=LogHelper.openExistingFileForRead("testRotationEvents.dat");  LogRecord logRec2=tfro.readRecord(0);  LogEventRotateReader reader=new LogEventRotateReader(logRec2,true);  assertEquals("Checking recordType",LogRecord.EVENT_ROTATE,reader.getRecordType());  assertEquals("Checking index",45,reader.getIndex());  tfro.close();}  }
class C{  @Override void destroyPooledConnection(Object connectionObject){  try {    ((ManagedConnection)connectionObject).removeConnectionEventListener((ConnectionEventListener)connEventListner);    ((ManagedConnection)connectionObject).destroy();    connectionObject=null;  } catch (  ResourceException rex) {    if (logger.isTraceEnabled()) {      logger.trace("ManagedPoolcacheImpl::destroyPooledConnection:Exception in closing the connection.Ignoring it. The exeption is {}",rex.getMessage(),rex);    }  }}  }
class C{  boolean update(){  if (selectedContent == null) {    selectedContent=new SelectedNodes();    return true;  }  return selectedContent.update();}  }
class C{  public SelectExistingAsset(java.awt.Frame parent,boolean modal,FileObject folder,AssetPackProject project,List<FileDescription> list){  super(parent,modal);  this.project=project;  this.list=list;  Node node=null;  initComponents();  setLocationRelativeTo(null);  try {    node=DataObject.find(folder).getNodeDelegate();  } catch (  DataObjectNotFoundException ex) {    Logger.getLogger(this.getClass().getName()).log(Level.WARNING,"Error loading asset folder!");    Exceptions.printStackTrace(ex);  }  if (node != null) {    explorerManager.setRootContext(node);    explorerManager.getRootContext().setDisplayName(node.getName());  }}  }
class C{  protected void validateConfig(){  A.notNull(getStreamer(),"Streamer");  A.notNull(getIgnite(),"Ignite");  A.notNull(endpointUrl,"Twitter Streaming API endpoint");  A.ensure(getSingleTupleExtractor() != null || getMultipleTupleExtractor() != null,"Twitter extractor");  String followParam=apiParams.get(SITE_USER_ID_KEY);  A.ensure(followParam != null && followParam.matches("^(\\d+,? ?)+$"),"Site streaming endpoint must provide 'follow' param with value as comma separated numbers");}  }
class C{  public int truncate(){  Query query=model.dialect().deleteAll(model);  query.use(db());  return query.execute();}  }
class C{  public static void validateGa(BigInteger ga) throws CryptoException {  if (ga.equals(ONE)) {    throw new CryptoException("ga is equal to 1.  It should not be.  The chances of this happening are on the order of 2^160 for a 160-bit q.  Try again.");  }}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void scanCommentChar(){  scanChar();  if (ch == '\\') {    if (peekChar() == '\\' && !isUnicode()) {      skipChar();    } else {      convertUnicode();    }  }}  }
class C{  public static PatternFilterExpr filter(Filter filter){  return new PatternFilterExpr(filter);}  }
class C{  private boolean isLockoutEnabled(){  if (_maxAuthnLoginAttemtsCount == 0 || _maxAuthnLoginAttemtsLifeTimeInMins == 0) {    return false;  }  return true;}  }
class C{  protected boolean tryEnter(){  return lock.enterBusy();}  }
class C{  public void destroy(){  coapServer.destroy();  LOG.info("Bootstrap server destroyed.");}  }
class C{  public boolean save(){  if (!beforeSave(false))   return false;  return saveUpdate();}  }
class C{  Block createNextBlock(@Nullable Address to,@Nullable TransactionOutPoint prevOut,long time,byte[] pubKey,BigInteger coinbaseValue){  Block b=new Block(params);  b.setDifficultyTarget(difficultyTarget);  b.addCoinbaseTransaction(pubKey,coinbaseValue);  if (to != null) {    Transaction t=new Transaction(params);    t.addOutput(new TransactionOutput(params,t,Utils.toNanoCoins(50,0),to));    TransactionInput input;    if (prevOut == null) {      input=new TransactionInput(params,t,Script.createInputScript(EMPTY_BYTES,EMPTY_BYTES));      byte[] counter=new byte[32];      counter[0]=(byte)txCounter;      counter[1]=(byte)(txCounter++ >> 8);      input.getOutpoint().setHash(new Sha256Hash(counter));    } else {      input=new TransactionInput(params,t,Script.createInputScript(EMPTY_BYTES,EMPTY_BYTES),prevOut);    }    t.addInput(input);    b.addTransaction(t);  }  b.setPrevBlockHash(getHash());  if (getTimeSeconds() >= time)   b.setTime(getTimeSeconds() + 1); else   b.setTime(time);  b.solve();  try {    b.verifyHeader();  } catch (  VerificationException e) {    throw new RuntimeException(e);  }  return b;}  }
class C{  @Override public void writeEndElement() throws XMLStreamException {  log.log(Level.FINE,"writeEndElement()");  calculateAndNextTag();}  }
class C{  protected TreeMaker(Context context){  context.put(treeMakerKey,this);  this.pos=Position.NOPOS;  this.toplevel=null;  this.names=Names.instance(context);  this.syms=Symtab.instance(context);  this.types=Types.instance(context);}  }
class C{  public void merge(GCActivityNames gcActivityNames){  ArgumentChecking.notNull(gcActivityNames,"gcActivityNames");  for (  String activityName : gcActivityNames.getNames()) {    if (!contains((activityName))) {      add(activityName);    }  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance newInstance=(Instance)instance.copy();  if (!newInstance.isMissing(m_AttIndex.getIndex())) {    if ((int)newInstance.value(m_AttIndex.getIndex()) == m_SecondIndex.getIndex()) {      newInstance.setValue(m_AttIndex.getIndex(),m_FirstIndex.getIndex());    } else     if ((int)newInstance.value(m_AttIndex.getIndex()) == m_FirstIndex.getIndex()) {      newInstance.setValue(m_AttIndex.getIndex(),m_SecondIndex.getIndex());    }  }  push(newInstance);  return true;}  }
class C{  public int put(int key){  int s=find(key);  if (s < 0) {    count++;    if (count >= rehashCount) {      rehash();      s=getSlot(key);    } else {      s=-s - 1;    }    keys[s]=key;  }  return s;}  }
class C{  public static <NodeType>boolean dominates(final ITreeNode<NodeType> node,final ITreeNode<NodeType> target,final ITreeNode<NodeType> source){  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  Preconditions.checkNotNull(target,"Error: target argument can not be null");  Preconditions.checkNotNull(source,"Error: Source argument can not be null");  return com.google.security.zynamics.zylib.types.trees.TreeAlgorithms.dominates(node,target,source);}  }
class C{  private void handleTableAbsenceError(String table,KeyValuePersistenceSettings settings){  int hndNum=tblAbsenceHandlersCnt.incrementAndGet();  String tableFullName=settings.getKeyspace() + "." + table;  try {synchronized (tblAbsenceHandlersCnt) {      if (hndNum != 0) {        log.warning("Table " + tableFullName + " absence problem detected. "+ "Another thread already fixed it.");        return;      }      log.warning("Table " + tableFullName + " absence problem detected. "+ "Trying to create table.");      IgniteException error=new IgniteException("Failed to create Cassandra table " + tableFullName);      int attempt=0;      while (error != null && attempt < CQL_EXECUTION_ATTEMPTS_COUNT) {        error=null;        try {          createKeyspace(settings);          createTable(table,settings);          createTableIndexes(table,settings);        } catch (        Throwable e) {          if (CassandraHelper.isHostsAvailabilityError(e))           handleHostsAvailabilityError(e,attempt,null); else           throw new IgniteException("Failed to create Cassandra table " + tableFullName,e);          error=(e instanceof IgniteException) ? (IgniteException)e : new IgniteException(e);        }        attempt++;      }      if (error != null)       throw error;    }  }  finally {    if (hndNum == 0)     tblAbsenceHandlersCnt.set(-1);  }}  }
class C{  public void testDivideLargeScale(){  BigDecimal arg1=new BigDecimal("320.0E+2147483647");  BigDecimal arg2=new BigDecimal("6E-2147483647");  try {    BigDecimal result=arg1.divide(arg2,Integer.MAX_VALUE,java.math.RoundingMode.CEILING);    fail("Expected ArithmeticException when dividing with a scale that's too large");  } catch (  ArithmeticException e) {  }}  }
class C{  protected void runUpload(Integer numOfThreads,HashMap<String,String> attributes,Boolean createNewVersion,Boolean force) throws Exception {  runUpload(numOfThreads,attributes,createNewVersion,force,null,null);}  }
class C{  public FilerException(String s){  super(s);}  }
class C{  protected void createCapGeometry(DrawContext dc,ShapeData shapeData){  if (shapeData.capVertexBuffer != null && shapeData.capVertexBuffer.capacity() >= this.totalNumLocations * 3)   shapeData.capVertexBuffer.clear(); else   shapeData.capVertexBuffer=Buffers.newDirectFloatBuffer(this.totalNumLocations * 3);  for (  ExtrudedBoundaryInfo boundary : shapeData) {    boundary.capVertexBuffer=WWBufferUtil.copyArrayToBuffer(boundary.capVertices,shapeData.capVertexBuffer.slice());    shapeData.capVertexBuffer.position(shapeData.capVertexBuffer.position() + boundary.capVertexBuffer.limit());  }  if (shapeData.cb == null)   this.createTessllationGeometry(dc,shapeData);  this.generateCapInteriorIndices(shapeData);}  }
class C{  public Tasks<StorageSystemRestRep> discoverAll(){  return postTasks(baseUrl + "/discover");}  }
class C{  private void skipToEndOfLine(){  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n') {      pos++;      break;    }  }}  }
class C{  public EditableOMRangeRings(){  createGraphic(null);}  }
class C{  @Override public int error_sym(){  return 1;}  }
class C{  public static XmlPullParser createParser() throws XmlPullParserException {  return getParserFactory().newPullParser();}  }
class C{  private void notifyListener(){  Iterator<ChangeListener> iter;  iter=m_ChangeListeners.iterator();  while (iter.hasNext()) {    iter.next().stateChanged(new ChangeEvent(this));  }}  }
class C{  public static boolean namespaceIsAbsolute(Attr namespace){  return namespaceIsAbsolute(namespace.getValue());}  }
class C{  public final AC sizeGroup(String s,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setSizeGroup(s);  }  return this;}  }
class C{  public void updateEllipse(int x1,int y1,int majorAxisSpan,int minorAxisSpan,float rotateAngle,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkEllipse.write(x1,y1,majorAxisSpan,minorAxisSpan,rotateAngle,properties,link.dos);}  }
class C{  public void reset(){  if (run_sim_thread != null) {    keep_running=false;    try {      run_sim_thread.join();    } catch (    InterruptedException e) {    }  }  sim_time=0;  keep_running=true;  pause=true;  for (int i=0; i < control_systems.length; i++) {    control_systems[i].trialEnd();    control_systems[i].quit();  }  if (descriptionfile != null) {    try {      loadEnvironmentDescription();    } catch (    FileNotFoundException e) {      Dialog tmp;      description_file_loaded=false;      simulated_objects=new SimulatedObject[0];      String msg="file not found: " + descriptionfile;      if (graphics_on)       tmp=new DialogMessage(parent,"TBSim Error",msg); else       System.out.println(msg);      descriptionfile=null;    }catch (    IOException e) {      Dialog tmp;      description_file_loaded=false;      simulated_objects=new SimulatedObject[0];      String msg="error trying to load " + descriptionfile;      if (graphics_on)       tmp=new DialogMessage(parent,"TBSim Error",msg); else       System.out.println(msg);      descriptionfile=null;    }    if (graphics_on) {      buffer=createImage(width,height);      bufferg=buffer.getGraphics();      bufferg.setColor(Color.white);      bufferg.fillRect(0,0,width,height);      this.repaint();      pause=true;    }  } else {    Dialog tmp;    String msg="Error: no description file";    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error","You must choose description file first.\n" + "Use the `load' option under the `file' menu.");  }  run_sim_thread=new Thread(this);  run_sim_thread.start();}  }
class C{  public int findRssiTarget(int from,int to,double threshold){  from-=mRssiBase;  to-=mRssiBase;  int emptyCount=0;  int d=from < to ? 1 : -1;  for (int i=from; i != to; i+=d)   if (i >= 0 && i < mEntriesSize && mEntries[i].mVolume > 1.0) {    emptyCount=0;    if (mEntries[i].mValue < threshold) {      int rssi=mRssiBase + i;      if (DBG) {        DecimalFormat df=new DecimalFormat("#.##");        logd("Scan target found: rssi=" + rssi + " threshold="+ df.format(threshold * 100)+ "% value="+ df.format(mEntries[i].mValue * 100)+ "% volume="+ df.format(mEntries[i].mVolume));      }      return rssi;    }  } else   if (++emptyCount >= BSSID_STAT_EMPTY_COUNT) {    int rssi=mRssiBase + i;    double lossPreset=presetLoss(rssi);    if (lossPreset < threshold) {      if (DBG) {        DecimalFormat df=new DecimalFormat("#.##");        logd("Scan target found: rssi=" + rssi + " threshold="+ df.format(threshold * 100)+ "% value="+ df.format(lossPreset * 100)+ "% volume=preset");      }      return rssi;    }  }  return mRssiBase + to;}  }
class C{  @SuppressWarnings("unused") @Override protected Money handleTransactionThatIsPaymentInAdvanceOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final LocalDate transactionDate,final Money paymentInAdvance,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  final MonetaryCurrency currency=paymentInAdvance.getCurrency();  Money transactionAmountRemaining=paymentInAdvance;  Money principalPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money interestPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money feeChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  Money penaltyChargesPortion=Money.zero(transactionAmountRemaining.getCurrency());  if (loanTransaction.isChargesWaiver()) {    penaltyChargesPortion=currentInstallment.waivePenaltyChargesComponent(transactionDate,loanTransaction.getPenaltyChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    feeChargesPortion=currentInstallment.waiveFeeChargesComponent(transactionDate,loanTransaction.getFeeChargesPortion(currency));    transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);  } else   if (loanTransaction.isInterestWaiver()) {    interestPortion=currentInstallment.waiveInterestComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(interestPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else   if (loanTransaction.isChargePayment()) {    if (loanTransaction.isPenaltyPayment()) {      penaltyChargesPortion=currentInstallment.payPenaltyChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(penaltyChargesPortion);    } else {      feeChargesPortion=currentInstallment.payFeeChargesComponent(transactionDate,transactionAmountRemaining);      transactionAmountRemaining=transactionAmountRemaining.minus(feeChargesPortion);    }    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  } else {    principalPortion=currentInstallment.payPrincipalComponent(transactionDate,transactionAmountRemaining);    transactionAmountRemaining=transactionAmountRemaining.minus(principalPortion);    loanTransaction.updateComponents(principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion);  }  if (principalPortion.plus(interestPortion).plus(feeChargesPortion).plus(penaltyChargesPortion).isGreaterThanZero()) {    transactionMappings.add(LoanTransactionToRepaymentScheduleMapping.createFrom(currentInstallment,principalPortion,interestPortion,feeChargesPortion,penaltyChargesPortion));  }  return transactionAmountRemaining;}  }
class C{  public static final double[] recombination_t(double p[],int L,Instances iTemplate){  double y[]=new double[L];  for (int k=0; k < p.length; k++) {    String d_string=iTemplate.classAttribute().value(k);    int d[]=MLUtils.toIntArray(d_string);    for (    int j : d) {      y[j]+=p[k];    }  }  return y;}  }
class C{  public void deselect(){  int selStart=xtext.getSelectionStart();  int selEnd=xtext.getSelectionEnd();  if (selStart != selEnd) {    xtext.select(selStart,selStart);  }}  }
class C{  public static CmdLine defineCommand(final String... nameArgs){  Validate.defineBoolean((nameArgs != null) && (nameArgs.length > 0) && (nameArgs.length <= CmdLine.MAX_LENGTH)).testTrue().throwExceptionOnFailedValidation().validate();  final List<Token> tokens=CmdLine.DEFINED_COMMAND_TOKENIZER.tokenize(nameArgs);  final CommandDefinition command=CmdLine.createCommandDefinition(tokens);  final List<String> names=command.getNames();  for (  final String name : names) {    final CommandDefinition existingCommand=CmdLine.COMMAND_DEFINITION_MAP.put(name,command);    if (existingCommand != null) {      throw (new DuplicateException("Error: The command '" + name + "' has already been defined.  Define a new command name."));    }  }  return (CmdLine.INSTANCE);}  }
class C{  public boolean sphereInFrustum(Vector3 center,float radius){  for (int i=0; i < 6; i++)   if ((planes[i].normal.x * center.x + planes[i].normal.y * center.y + planes[i].normal.z * center.z) < (-radius - planes[i].d))   return false;  return true;}  }
class C{  @Override public Set<String> locationNames(){  Set<String> locations=new HashSet<String>();  Set<StringBuilder> l=this.name2ids.keySet();  for (  StringBuilder s : l) {    locations.add(s.toString());  }  return locations;}  }
class C{  public boolean displayTopicFromNames(String[] names){  if (names.length == 0)   return displayTopic(DEFAULT); else {    StringBuffer helpName=new StringBuffer();    for (    String name : names) {      if (helpName.length() > 0)       helpName.append("_");      helpName.append(name);    }    return displayTopic(helpName.toString());  }}  }
class C{  public T caseTypableElement(TypableElement object){  return null;}  }
class C{  public FastAdapterBottomSheetDialog<Item> remove(int position){  mFastItemAdapter.remove(position);  return this;}  }
class C{  public OrganizationDataException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public CaseInsensitiveHashSet(Collection<? extends String> c,float f){  super(c,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  @After public void tearDown(){  List<HashMap> financialActivities=this.financialActivityAccountHelper.getAllFinancialActivityAccounts(this.responseSpec);  for (  HashMap financialActivity : financialActivities) {    Integer financialActivityAccountId=(Integer)financialActivity.get("id");    Integer deletedFinancialActivityAccountId=this.financialActivityAccountHelper.deleteFinancialActivityAccount(financialActivityAccountId,this.responseSpec,CommonConstants.RESPONSE_RESOURCE_ID);    Assert.assertNotNull(deletedFinancialActivityAccountId);    Assert.assertEquals(financialActivityAccountId,deletedFinancialActivityAccountId);  }}  }
class C{  private VOPriceModel createPriceModelDefinition(List<VOPricedRole> ppr,VOServiceDetails productDetails){  VOPriceModel pm=productDetails.getPriceModel();  pm.setType(PriceModelType.PRO_RATA);  pm.setConsideredEvents(new ArrayList<VOPricedEvent>());  pm.setCurrencyISOCode("EUR");  pm.setDescription("desc");  pm.setOneTimeFee(BigDecimal.ZERO);  pm.setPeriod(PricingPeriod.MONTH);  pm.setPricePerPeriod(BigDecimal.valueOf(10L));  pm.setPricePerUserAssignment(BigDecimal.valueOf(22L));  pm.setSelectedParameters(new ArrayList<VOPricedParameter>());  pm.setRoleSpecificUserPrices(ppr);  return pm;}  }
class C{  private boolean shouldSqlBeLogged(String sql){  if (sql == null) {    return false;  }  sql=sql.trim();  if (sql.length() < 6) {    return false;  }  sql=sql.substring(0,6).toLowerCase();  return (DriverSpy.DumpSqlSelect && "select".equals(sql)) || (DriverSpy.DumpSqlInsert && "insert".equals(sql)) || (DriverSpy.DumpSqlUpdate && "update".equals(sql))|| (DriverSpy.DumpSqlDelete && "delete".equals(sql))|| (DriverSpy.DumpSqlCreate && "create".equals(sql));}  }
class C{  public static Range findRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result;  if (dataset instanceof CategoryRangeInfo) {    CategoryRangeInfo info=(CategoryRangeInfo)dataset;    result=info.getRangeBounds(visibleSeriesKeys,includeInterval);  } else {    result=iterateToFindRangeBounds(dataset,visibleSeriesKeys,includeInterval);  }  return result;}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,String dhcpClientName,Collection<AttachmentPoint> oldAPs,Collection<AttachmentPoint> attachmentPoints,Collection<Entity> entities,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.dhcpClientName=dhcpClientName;  this.entities=entities.toArray(new Entity[entities.size()]);  this.oldAPs=null;  this.attachmentPoints=null;  if (oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(oldAPs);  }  if (attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  vlanIds=computeVlandIds();}  }
class C{  protected final void connect(final DebugConnection connection) throws DebugExceptionWrapper {  if (isConnected()) {    throw new IllegalStateException("IE01270: Debugger is already connected");  }  this.connection=connection;  try {    this.connection.addEventListener(synchronizer);    this.connection.startConnection();  } catch (  final ConnectException e) {    this.connection.removeEventListener(synchronizer);    this.connection=null;    throw new DebugExceptionWrapper(e);  }}  }
class C{  private long convertToBytes(int megaBytes){  long bytes=megaBytes;  bytes=bytes * 1024 * 1024;  return bytes;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildmermaid(zone);}  }
class C{  public static <S,E>boolean isNormalPseudoState(State<S,E> state){  if (state == null) {    return false;  }  PseudoState<S,E> pseudoState=state.getPseudoState();  if (pseudoState == null) {    return false;  }  PseudoStateKind kind=pseudoState.getKind();  if (kind == PseudoStateKind.INITIAL || kind == PseudoStateKind.END) {    return false;  } else {    return true;  }}  }
class C{  public void reorderIntegerKeys(){  List keys=getOrderedKeys();  int numKeys=keys.size();  if (numKeys <= 0)   return;  if (!(getOrderedKey(0) instanceof Integer))   return;  List newKeys=new ArrayList();  List newValues=new ArrayList();  for (int i=0; i < numKeys; i++) {    Integer key=(Integer)getOrderedKey(i);    Object val=getOrderedValue(i);    int numNew=newKeys.size();    int pos=0;    for (int j=0; j < numNew; j++) {      Integer newKey=(Integer)newKeys.get(j);      if (newKey.intValue() < key.intValue())       ++pos; else       break;    }    if (pos >= numKeys) {      newKeys.add(key);      newValues.add(val);    } else {      newKeys.add(pos,key);      newValues.add(pos,val);    }  }  this.clear();  for (int l=0; l < numKeys; l++) {    put(newKeys.get(l),newValues.get(l));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElement("address");  attribute=doc.createAttribute("domestic");  state=element.hasAttribute("domestic");  assertFalse("elementhasattribute03_False",state);  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttribute("domestic");  assertTrue("elementhasattribute03_True",state);}  }
class C{  public Object eval(Reader reader,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(reader,ctxt);}  }
class C{  public IdentityArrayList(final ObjectIterator<? extends K> i){  this();  while (i.hasNext())   this.add(i.next());}  }
class C{  public void close(){  url=null;}  }
class C{  protected void expandClusterOrder(DBIDRef objectID){  ModifiableDoubleDBIDList neighbors=DBIDUtil.newDistanceDBIDList();  DoubleDBIDListIter neighbor=neighbors.iter();  candidates.add(objectID);  predecessor.putDBID(objectID,objectID);  reachability.put(objectID,Double.POSITIVE_INFINITY);  DBIDArrayMIter it=candidates.iter();  DBIDVar cur=DBIDUtil.newVar(), prev=DBIDUtil.newVar();  while (!candidates.isEmpty()) {    findBest(candidates,it,cur);    processedIDs.add(cur);{      predecessor.assignVar(cur,prev);      double dist=reachability.doubleValue(cur);      clusterOrder.add(cur,dist,prev);      LOG.incrementProcessed(progress);    }    neighbors.clear();    rangeQuery.getRangeForDBID(cur,epsilon,neighbors);    if (neighbors.size() >= minpts) {      neighbors.sort();      final double coreDistance=neighbor.seek(minpts - 1).doubleValue();      for (neighbor.seek(0); neighbor.valid(); neighbor.advance()) {        if (processedIDs.contains(neighbor)) {          continue;        }        double reach=MathUtil.max(neighbor.doubleValue(),coreDistance);        double prevreach=reachability.doubleValue(neighbor);        if (reach < prevreach) {          reachability.put(neighbor,reach);          predecessor.putDBID(neighbor,cur);          if (prevreach >= Double.POSITIVE_INFINITY) {            candidates.add(neighbor);          }        }      }    }  }}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer){  this(constructor,representer,new DumperOptions());}  }
class C{  protected void processG1Creation(G1Message g1Message,Style12Message message,GameService service,String entireMessage){  if (LOG.isDebugEnabled()) {    LOG.debug("Processing new obs/playing game.");  }  unprocessedG1Messages.remove(message.gameId);  Game game=IcsUtils.createGame(g1Message,message,isBicsParser);  IcsUtils.updateNonPositionFields(game,message);  IcsUtils.updatePosition(game,message);  IcsUtils.verifyLegal(game);  if (game instanceof FischerRandomGame) {    ((FischerRandomGame)game).initialPositionIsSet();  } else   if (game instanceof FischerRandomCrazyhouseGame) {    ((FischerRandomCrazyhouseGame)game).initialPositionIsSet();  } else   if (game instanceof FischerRandomBughouseGame) {    ((FischerRandomBughouseGame)game).initialPositionIsSet();  } else   if (game instanceof WildGame) {    ((WildGame)game).initialPositionIsSet();  }  if (game.getVariant() == Variant.wild || game.getVariant() == Variant.fischerRandom) {    game.setHeader(PgnHeader.FEN,game.toFen());  }  if (vetoGameCreation(game,g1Message)) {    connector.publishEvent(new ChatEvent(null,ChatType.INTERNAL,"Vetoing observing game " + game.getId() + " because you are playing a game.",null));    connector.onUnobserve(game);  } else {    service.addGame(game);    adjustWhiteOnTopHeader(game,message);    if (isBughouse(game)) {      if (g1Message.parterGameId.equals("0")) {        adjustBughouseHeadersAndFollowPartnersGamesForBics(game,message,service);      } else {        adjustBughouseHeadersAndFollowPartnersGamesForFics(game,g1Message,message,service);      }    }    if (LOG.isDebugEnabled()) {      LOG.debug("Firing game created.");    }    service.fireGameCreated(game.getId());    if (message.fullMoveNumber > 1 || message.fullMoveNumber == 1 && !message.isWhitesMoveAfterMoveIsMade) {      connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);    }  }}  }
class C{  @Override public Instance generateExample() throws Exception {  Instance result;  double[] atts;  int i;  int selected;  Random random;  result=null;  random=getRandom();  if (m_DatasetFormat == null) {    throw new Exception("Dataset format not defined.");  }  atts=new double[m_DatasetFormat.numAttributes()];  selected=random.nextInt(10);  for (i=0; i < 7; i++) {    if ((1 + (random.nextInt(100))) <= getNoisePercent()) {      atts[i]=m_originalInstances[selected][i] == 0 ? 1 : 0;    } else {      atts[i]=m_originalInstances[selected][i];    }  }  for (i=0; i < m_numIrrelevantAttributes; i++) {    atts[i + 7]=random.nextInt(2);  }  atts[atts.length - 1]=selected;  result=new DenseInstance(1.0,atts);  result.setDataset(m_DatasetFormat);  return result;}  }
class C{  public InlineQueryResponse.InlineQueryResponseBuilder cacheTime(Integer cacheTime){  this.cache_time=cacheTime;  return this;}  }
class C{  private void functionWithMultipleReturns(){  if (true) {    return;  }  if (false) {    return;  }  Log.i("Coding Guidelines","Do your stuff here");}  }
class C{  protected SparseObjectMatrix3D(int slices,int rows,int columns,AbstractIntObjectMap elements,int sliceZero,int rowZero,int columnZero,int sliceStride,int rowStride,int columnStride){  setUp(slices,rows,columns,sliceZero,rowZero,columnZero,sliceStride,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public static void writePrimitiveValue(Object primitiveValue,JsonGenerator jsonGenerator) throws IOException {  Class<?> primitiveClass=PrimitiveUtil.wrap(primitiveValue.getClass());  if (String.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeString(String.valueOf(primitiveValue));  } else   if (Byte.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeObject(primitiveValue);  } else   if (Short.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((short)primitiveValue);  } else   if (Integer.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((int)primitiveValue);  } else   if (Float.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((float)primitiveValue);  } else   if (Double.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((double)primitiveValue);  } else   if (Long.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((long)primitiveValue);  } else   if (Boolean.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeBoolean((boolean)primitiveValue);  } else   if (UUID.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeString(primitiveValue.toString());  } else   if (BigDecimal.class.isAssignableFrom(primitiveClass)) {    jsonGenerator.writeNumber((BigDecimal)primitiveValue);  } else {    jsonGenerator.writeObject(primitiveValue.toString());  }}  }
class C{  public void add(T object,int inc){  Integer current=map.get(object);  if (current == null) {    current=Integer.valueOf(inc);  } else {    current=Integer.valueOf(current.intValue() + inc);  }  map.put(object,current);}  }
class C{  private SimplePanel createContentWidget(){  SimplePanel messageWrapper=new SimplePanel();  Label messageLabel=new Label();  messageWrapper.add(messageLabel);  messageWrapper.setStyleName(resources.notificationCss().notificationPopupMessageWrapper());  messageWrapper.ensureDebugId(MESSAGE_WRAPPER_DBG_ID + notification.getId());  return messageWrapper;}  }
class C{  protected void cleanupRuntimeProgram(){  JMLCUtils.cleanupRuntimeProgram(runtimeProgram,(script.getOutputVariables() == null) ? new String[0] : script.getOutputVariables().toArray(new String[0]));}  }
class C{  public static void close(InputStream inputStream){  try {    if (inputStream != null) {      inputStream.close();    }  } catch (  IOException ex) {    LOGGER.warn(String.format(LOG_FORMAT," stream"));  }}  }
class C{  public TvShowEpisode(){  super();}  }
class C{  @LargeTest public void testEffectUndefinedColorParam() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "MPEG4_SP_640x480_30fps_512Kbps_0_27.mp4";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",1000,2000,EffectColor.TYPE_COLOR,0xabcdabcd);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Effect added",flagForException);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failoverProtection(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  TaskResourceRep taskResp=null;  StoragePort storageportNFS=null;  StoragePort storageportCIFS=null;  TaskList taskList=new TaskList();  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=_dbClient.queryObject(FileShare.class,id);  ArgValidator.checkEntity(fs,id,true);  checkForPendingTasks(Arrays.asList(fs.getTenant().getURI()),Arrays.asList(fs));  URI projectURI=fs.getProject().getURI();  Project project=_permissionsHelper.getObjectById(projectURI,Project.class);  ArgValidator.checkEntity(project,projectURI,false);  _log.info("Found filesystem project {}",projectURI);  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  StringBuffer notSuppReasonBuff=new StringBuffer();  String operation=ProtectionOp.FAILOVER.getRestOp();  if (!FileSystemReplicationUtils.validateMirrorOperationSupported(fs,currentVpool,notSuppReasonBuff,operation)) {    _log.error("Mirror Operation {} is not supported for the file system {} as : {}",operation.toUpperCase(),fs.getLabel(),notSuppReasonBuff.toString());    throw APIException.badRequests.unableToPerformMirrorOperation(operation.toUpperCase(),fs.getId(),notSuppReasonBuff.toString());  }  Operation op=_dbClient.createTaskOpStatus(FileShare.class,id,task,ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILOVER);  op.setDescription("Filesystem Failover");  boolean replicateConfiguration=param.isReplicateConfiguration();  if (replicateConfiguration) {    List<String> targetfileUris=new ArrayList<String>();    targetfileUris.addAll(fs.getMirrorfsTargets());    FileShare targetFileShare=_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    SMBShareMap smbShareMap=fs.getSMBFileShares();    if (smbShareMap != null) {      storageportCIFS=_fileScheduler.placeFileShareExport(targetFileShare,StorageProtocol.File.CIFS.name(),null);    }    FSExportMap nfsExportMap=fs.getFsExports();    if (nfsExportMap != null) {      storageportNFS=_fileScheduler.placeFileShareExport(targetFileShare,StorageProtocol.File.NFS.name(),null);    }  }  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  try {    fileServiceApi.failoverFileShare(id,storageportNFS,storageportCIFS,replicateConfiguration,task);  } catch (  InternalException e) {    if (_log.isErrorEnabled()) {      _log.error("",e);    }    FileShare fileShare=_dbClient.queryObject(FileShare.class,fs.getId());    op=fs.getOpStatus().get(task);    op.error(e);    fileShare.getOpStatus().updateTaskStatus(task,op);    _dbClient.updateObject(fs);    throw e;  }  taskResp=toTask(fs,task,op);  taskList.getTaskList().add(taskResp);  return taskList;}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T fetch(T config){  config.addCredentials(this);  String xml=POST(this.url + "/check-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  @Deprecated public static GamaRuntimeException warning(final String s){  return warning(s,GAMA.getRuntimeScope());}  }
class C{  public FactPurchase(int id,int productId,int storeId,float purchasePrice){  this.id=id;  this.productId=productId;  this.storeId=storeId;  this.purchasePrice=purchasePrice;}  }
class C{  public InspectableFileCachedInputStream(final int bufferSize,final File overflowFile) throws IOException {  if (bufferSize <= 0)   throw new IllegalArgumentException("Illegal buffer size " + bufferSize);  if (overflowFile != null)   this.overflowFile=overflowFile; else   (this.overflowFile=File.createTempFile(getClass().getSimpleName(),"overflow")).deleteOnExit();  buffer=new byte[bufferSize];  randomAccessFile=new RandomAccessFile(this.overflowFile,"rw");  fileChannel=randomAccessFile.getChannel();  mark=-1;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.557 -0400",hash_original_method="B75081E678B9EDAB87E52EF21686F3B2",hash_generated_method="BFF60BFDCC4DB93E6D36092F69D1D31B") public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  public CGAffineTransform(double[] matrix){  this.type=TYPE_UNKNOWN;  m00=matrix[0];  m10=matrix[1];  m01=matrix[2];  m11=matrix[3];  if (matrix.length > 4) {    m02=matrix[4];    m12=matrix[5];  }}  }
class C{  public void testNonPositivePrefixLengthArgument() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains(TruncateTokenFilterFactory.PREFIX_LENGTH_KEY + " parameter must be a positive number: -5"));}  }
class C{  public int read(char[] buf,int n){  int readBytes=0;  boolean eof=false;  while (!eof && readBytes < n) {    int sz=(bufsize > 0) ? bufsize : read4(buffer);    if (bufsize == 0 && sz < 4)     eof=true;    int bytes=Math.min(n - readBytes,sz);    System.arraycopy(buffer,offset,buf,readBytes,bytes);    offset=(offset + bytes) % 4;    bufsize=sz - bytes;    readBytes+=bytes;  }  return readBytes;}  }
class C{  private void updateMediaInformationLists(Movie movie){  List<String> availableCodecs=new ArrayList<>(videoCodecsObservable);  for (  MediaFile mf : movie.getMediaFiles(MediaFileType.VIDEO)) {    String codec=mf.getVideoCodec();    boolean codecFound=false;    for (    String mfCodec : availableCodecs) {      if (mfCodec.equals(codec)) {        codecFound=true;        break;      }    }    if (!codecFound) {      addVideoCodec(codec);    }  }  availableCodecs=new ArrayList<>(audioCodecsObservable);  for (  MediaFile mf : movie.getMediaFiles(MediaFileType.VIDEO)) {    for (    MediaFileAudioStream audio : mf.getAudioStreams()) {      String codec=audio.getCodec();      boolean codecFound=false;      for (      String mfCodec : availableCodecs) {        if (mfCodec.equals(codec)) {          codecFound=true;          break;        }      }      if (!codecFound) {        addAudioCodec(codec);      }    }  }}  }
class C{  public static void main(String[] args) throws Exception {  new Negater().start(args);}  }
class C{  protected int bytesPerAtom(){  return (3);}  }
class C{  private void init(){  try {    m_NumInstances=m_TrainSet.numInstances();    m_NumClasses=m_TrainSet.numClasses();    m_NumAttributes=m_TrainSet.numAttributes();    m_ClassType=m_TrainSet.classAttribute().type();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isDateOnly(){  return dateOnly;}  }
class C{  public void onFinishedTask(){  MinionsCore.debugPrint("onFinishedTask " + this + " ["+ this.posX+ "|"+ this.posY+ "|"+ this.posZ+ "], resetting minion "+ worker);  this.worker.giveTask(null,true);  if (boss != null) {    boss.onTaskFinished(this,posX,posY,posZ);  }}  }
class C{  public static boolean end(Animator animator){  if (animator != null && animator.isStarted()) {    animator.end();    return true;  }  return false;}  }
class C{  public ShardRouting shard(){  return shard;}  }
class C{  public RunScriptAction(NetworkPanel networkPanel){  super("Run Script...");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Script.png"));  putValue(SHORT_DESCRIPTION,"Open and apply a network .bsh script to this network");  this.networkPanel=networkPanel;}  }
class C{  @Before public void onBefore(){  knownUser=new User(KNOWN_USER);  knownRole=new Role(KNOWN_ROLE);  entityManager.persist(knownRole);  entityManager.persist(knownUser);  entityManager.flush();  entityManager.clear();}  }
class C{  public static void initializeToolJar() throws RuntimeException {  ToolsJarLocator locator=new ToolsJarLocator(Properties.TOOLS_JAR_LOCATION);  locator.getLoaderForToolsJar();  if (locator.getLocationNotOnClasspath() != null) {    try {      logger.info("Using JDK libraries at: " + locator.getLocationNotOnClasspath());      addFile(locator.getLocationNotOnClasspath());    } catch (    IOException e) {      throw new RuntimeException("Failed to add " + locator.getLocationNotOnClasspath() + " to system classpath");    }  }}  }
class C{  private boolean checkOverlappingAttributes(UserGroup userGroup,String attributeParamString){  boolean overlaps=false;  if (StringUtils.isBlank(attributeParamString)) {    _log.warn("Invalid attribute string {} in user group {}.",attributeParamString,this.getLabel());    return overlaps;  }  UserAttributeParam attributeParam=UserAttributeParam.fromString(attributeParamString);  if (attributeParam == null) {    _log.warn("Failed to convert attributes param string {} to object.",attributeParamString);    return overlaps;  }  if (CollectionUtils.isEmpty(userGroup._attributes)) {    _log.info("No attributes to compare");    return overlaps;  }  for (  String comparingAttributeParamString : userGroup._attributes) {    if (StringUtils.isBlank(comparingAttributeParamString)) {      _log.info("Invalid attribute string {}",comparingAttributeParamString);      break;    }    UserAttributeParam comparingAttributeParam=UserAttributeParam.fromString(comparingAttributeParamString);    if (comparingAttributeParam == null) {      _log.info("Failed to convert attributes param string {} to object.",comparingAttributeParamString);      return overlaps;    }    if (comparingAttributeParam.containsOverlappingAttributeValues(attributeParam)) {      _log.debug("Attributes {} match with {}",attributeParamString,comparingAttributeParamString);      overlaps=true;      break;    }  }  return overlaps;}  }
class C{  public String addHeader(String key,String value){  return headers.put(key,value);}  }
class C{  public String toString(){  return "[My test Certificate, type: " + getType() + "]";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void validate() throws MessageException {  if (!_parameters.hasParameter("auth_policies")) {    throw new MessageException("auth_policies is required in a PAPE response.",OpenIDException.PAPE_ERROR);  }  String authTime=getAuthTime();  if (authTime != null) {    try {      _dateFormat.parse(authTime);    } catch (    ParseException e) {      throw new MessageException("Invalid auth_time in PAPE response: " + authTime,OpenIDException.PAPE_ERROR,e);    }  }  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    String paramName=((Parameter)it.next()).getKey();    if (PAPE_FIELDS.contains(paramName) || paramName.startsWith(PapeMessage.AUTH_LEVEL_NS_PREFIX))     continue;    if (paramName.startsWith(AUTH_LEVEL_PREFIX) && (authLevelAliases.values().contains(paramName.substring(AUTH_LEVEL_PREFIX.length()))))     continue;    throw new MessageException("Invalid parameter in PAPE response: " + paramName,OpenIDException.PAPE_ERROR);  }}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);}  }
class C{  @SuppressWarnings("unchecked") public static MultipartUploadListing parseListMultipartUploads(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    MultipartUploadListing multipartUploadListing=new MultipartUploadListing();    multipartUploadListing.setBucketName(root.getChildText("Bucket"));    multipartUploadListing.setMaxUploads(Integer.valueOf(root.getChildText("MaxUploads")));    multipartUploadListing.setTruncated(Boolean.valueOf(root.getChildText("IsTruncated")));    if (root.getChild("Delimiter") != null) {      String delimiter=root.getChildText("Delimiter");      if (!isNullOrEmpty(delimiter)) {        multipartUploadListing.setDelimiter(delimiter);      }    }    if (root.getChild("Prefix") != null) {      String prefix=root.getChildText("Prefix");      if (!isNullOrEmpty(prefix)) {        multipartUploadListing.setPrefix(prefix);      }    }    if (root.getChild("KeyMarker") != null) {      String keyMarker=root.getChildText("KeyMarker");      if (!isNullOrEmpty(keyMarker)) {        multipartUploadListing.setKeyMarker(keyMarker);      }    }    if (root.getChild("UploadIdMarker") != null) {      String uploadIdMarker=root.getChildText("UploadIdMarker");      if (!isNullOrEmpty(uploadIdMarker)) {        multipartUploadListing.setUploadIdMarker(uploadIdMarker);      }    }    if (root.getChild("NextKeyMarker") != null) {      String nextKeyMarker=root.getChildText("NextKeyMarker");      if (!isNullOrEmpty(nextKeyMarker)) {        multipartUploadListing.setNextKeyMarker(nextKeyMarker);      }    }    if (root.getChild("NextUploadIdMarker") != null) {      String nextUploadIdMarker=root.getChildText("NextUploadIdMarker");      if (!isNullOrEmpty(nextUploadIdMarker)) {        multipartUploadListing.setNextUploadIdMarker(nextUploadIdMarker);      }    }    List<Element> uploadElems=root.getChildren("Upload");    for (    Element elem : uploadElems) {      if (elem.getChild("Initiated") == null) {        continue;      }      MultipartUpload mu=new MultipartUpload();      mu.setKey(elem.getChildText("Key"));      mu.setUploadId(elem.getChildText("UploadId"));      mu.setStorageClass(elem.getChildText("StorageClass"));      mu.setInitiated(DateUtil.parseIso8601Date(elem.getChildText("Initiated")));      multipartUploadListing.addMultipartUpload(mu);    }    List<Element> commonPrefixesElems=root.getChildren("CommonPrefixes");    for (    Element elem : commonPrefixesElems) {      String prefix=elem.getChildText("Prefix");      if (!isNullOrEmpty(prefix)) {        multipartUploadListing.addCommonPrefix(prefix);      }    }    return multipartUploadListing;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public static Object read(InputStream stream) throws Exception {  ObjectInputStream ois;  Object result;  if (!(stream instanceof BufferedInputStream)) {    stream=new BufferedInputStream(stream);  }  ois=new ObjectInputStream(stream);  result=ois.readObject();  ois.close();  return result;}  }
class C{  public boolean isAssignedCategoryProductIds(final long categoryId,final long productId){  return (((ProductCategoryService)service).findByCategoryIdProductId(categoryId,productId) != null);}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public static void downloadUrlToFileSystemInBackground(String url,String fileName){  downloadUrlTo(url,fileName,false,true,false,null);}  }
class C{  public String minBoxRelWidthTipText(){  return "The minimum relative width of the box. A node is only made a leaf " + "if the width of the split dimension of the instances in a node " + "normalized over the width of the split dimension of all the "+ "instances is less than or equal to this minimum relative width.";}  }
class C{  public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  return (entity != null) && (entity.getOwnerId() == playerId) && entity.isSelectableThisTurn()&& !(useValidNonInfantryCheck && (game.getPhase() == IGame.Phase.PHASE_MOVEMENT) && (((entity instanceof Infantry) && game.getOptions().booleanOption("inf_move_later")) || ((entity instanceof Protomech) && game.getOptions().booleanOption("protos_move_later")))&& game.checkForValidNonInfantryAndOrProtomechs(playerId));}  }
class C{  public JLBHOptions skipFirstRun(boolean skip){  skipFirstRun=skip ? SKIP_FIRST_RUN.SKIP : SKIP_FIRST_RUN.NO_SKIP;  return this;}  }
class C{  public static String pathNodesToString(ArrayList<PathParser.PathDataNode> nodes,boolean onlyCommands){  DecimalFormat floatFormatter=new DecimalFormat("###.#########");  StringBuilder sb=new StringBuilder();  for (  PathParser.PathDataNode n : nodes) {    sb.append(n.mType);    sb.append(' ');    if (!onlyCommands) {      for (      float p : n.mParams) {        if (("" + p).contains("e") || ("" + p).contains("E"))         sb.append(floatFormatter.format(p)); else         sb.append(p);        sb.append(',');      }      sb.replace(sb.length() - 1,sb.length()," ");    }  }  return sb.toString();}  }
class C{  public CToggleButton(Icon icon){  this(null,icon,false);}  }
class C{  public static byte[] keyGenPrivate(byte[] randomBytes) throws NoSuchAlgorithmException, DigestException {  if (randomBytes.length < 32) {    throw new RuntimeException("Random bytes too small");  }  MessageDigest digest=MessageDigest.getInstance("SHA-256");  digest.digest(randomBytes,0,randomBytes.length);  byte[] privateKey=digest.digest();  privateKey[0]&=248;  privateKey[31]&=127;  privateKey[31]|=64;  return privateKey;}  }
class C{  public static Result fromContent(String content,String format) throws IllegalArgumentException {  if (content == null) {    throw new IllegalArgumentException("content cannot be null");  }  if (format == null) {    throw new IllegalArgumentException("format cannot be null");  }  try {    return fromContent(new InputStreamReader(new ByteArrayInputStream(content.getBytes("UTF-8")),"UTF-8"),format);  } catch (  IOException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public void addAlias(String field,float tiebreaker,Map<String,Float> fieldBoosts){  Alias a=new Alias();  a.tie=tiebreaker;  a.fields=fieldBoosts;  aliases.put(field,a);}  }
class C{  public SVGOMFlowRegionBreakElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public LabeledList(LabeledList old){  super(old.size());  labelToIndex=old.labelToIndex.mutableCopy();  int sz=old.size();  for (int i=0; i < sz; i++) {    Object one=old.get0(i);    if (one != null) {      set0(i,one);    }  }}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    debugCodeCall("isReadOnly");    return conn.isReadOnly();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public synchronized Vertex findByData(Object data){  if (data == null) {    return null;  }  Vertex vertex=this.verticiesByData.get(data);  if (vertex != null) {    return vertex;  }  Query query=this.entityManager.createNamedQuery("findVertexByData");  setHints(query);  query.setParameter("data",BasicVertex.convertDataValue(data));  query.setParameter("type",BasicVertex.convertDataType(data));  try {    vertex=(Vertex)query.getSingleResult();    if (trackAccessCount()) {      vertex.incrementAccessCount();    }    this.verticiesByData.put(vertex.getData(),vertex);    return vertex;  } catch (  NoResultException notFound) {    return null;  }}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  protected boolean shouldIndent(){  return m_doIndent && (!m_ispreserve && !m_isprevtext) && m_elemContext.m_currentElemDepth > 0;}  }
class C{  public VinciUpload name(String name){  mFilePartName=name;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.PR_MASK; else   newMask=newMask & (~Agent.PR_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),s,a.getNetwork(),a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public Builder enterAnimResId(int enterAnimResId){  mEnterAnimResId=enterAnimResId;  return this;}  }
class C{  public boolean hasQuotaBytesTotal(){  return hasExtension(QuotaBytesTotal.class);}  }
class C{  public void trace(String message,Object... args){  logger.trace(message,args);}  }
class C{  private static void printBasicFeedDetails(BaseFeed feed){  System.out.println("\tFeed is " + (feed.getCanPost() ? "writable!" : "read-only!"));  System.out.println("\tNumber of entries: " + feed.getTotalResults());  System.out.println("\tStart Index: " + feed.getStartIndex());  System.out.println("\tEnd Index: " + feed.getItemsPerPage());  System.out.println("\tFeed URI: " + (feed.getSelfLink() == null ? "<none>" : feed.getSelfLink().getHref()) + "\n");  System.out.println("\tFeed Title: " + feed.getTitle().getPlainText());  System.out.println("\tAtom ID: " + feed.getId());  System.out.println("\tLast updated: " + feed.getUpdated());  System.out.println("\tFeed Categories:");  Iterator it=feed.getCategories().iterator();  while (it.hasNext()) {    System.out.println("\t\t" + it.next().toString());  }  System.out.println("\tLinks:");  if (feed.getLinks().size() == 0) {    System.out.println("\t\t<No links, sorry!>");  }  for (int i=0; i < feed.getLinks().size(); i++) {    System.out.println("\t\t" + feed.getLinks().get(i).getHref());  }  System.out.println("\t" + "HTML Link: " + feed.getHtmlLink().getHref());}  }
class C{  public List<GroupCloudDeviceDB> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<GroupCloudDeviceDB> list=new ArrayList<GroupCloudDeviceDB>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public void moveTo(Resource to){  containerType=to.getType();  containerId=to.getId();  update();}  }
class C{  public void stringEquals() throws IOException {  writeCode(STRING_EQUALS);}  }
class C{  public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  return prepareStatement(sql,resultSetType,resultSetConcurrency,this.resultSetHoldability);}  }
class C{  @Override public void traceError(String tag,String message){  traceCallback(MqttServiceConstants.TRACE_ERROR,tag,message);}  }
class C{  public void add(S item){  if (item instanceof Ordered) {    if (!ordered.contains(item)) {      ordered.add(item);    }  } else   if (AnnotationUtils.isAnnotationDeclaredLocally(Order.class,item.getClass())) {    if (!ordered.contains(item)) {      ordered.add(item);    }  } else   if (!unordered.contains(item)) {    unordered.add(item);  }  Collections.sort(ordered,comparator);  list.clear();  list.addAll(ordered);  list.addAll(unordered);}  }
class C{  public SGraphItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int poolSize,ThreadFactory tf){  this(q,poolSize,null,tf);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Comment comment;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String value;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  comment=aNewDoc.createComment("this is a comment");  aNode=doc.importNode(comment,false);  ownerDocument=aNode.getOwnerDocument();  assertNotNull("ownerDocumentNotNull",ownerDocument);  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  value=aNode.getNodeValue();  assertEquals("nodeValue","this is a comment",value);}  }
class C{  public String toString(){  return "(" + value.toString() + ")";}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext.getBytes(encoding),secretKeys);}  }
class C{  public boolean isSensorAssignedAnywhere(Sensor sensor){  for (  PositionablePoint po : layoutEditor.pointList) {    if (po != boundary) {      if (po.getEastBoundSensor() == sensor) {        if (!sensorAssignedElseWhere(sensor.getDisplayName())) {          return true;        }      }      if (po.getWestBoundSensor() == sensor) {        if (!sensorAssignedElseWhere(sensor.getDisplayName())) {          return true;        }      }    }  }  for (  LayoutTurnout to : layoutEditor.turnoutList) {    if ((to.getSensorA() != null) && to.getSensorA() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorB() != null) && to.getSensorB() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorC() != null) && to.getSensorC() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorD() != null) && to.getSensorD() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }  }  for (  LayoutSlip to : layoutEditor.slipList) {    if ((to.getSensorA() != null) && to.getSensorA() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorB() != null) && to.getSensorB() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorC() != null) && to.getSensorC() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((to.getSensorD() != null) && to.getSensorD() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }  }  for (  LevelXing x : layoutEditor.xingList) {    if ((x.getSensorA() != null) && x.getSensorA() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((x.getSensorB() != null) && x.getSensorB() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((x.getSensorC() != null) && x.getSensorC() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }    if ((x.getSensorD() != null) && x.getSensorD() == sensor) {      if (!sensorAssignedElseWhere(sensor.getDisplayName())) {        return true;      }    }  }  return false;}  }
class C{  public SusiThought(){  super(true);  this.metadata_name="metadata";  this.data_name="data";}  }
class C{  public boolean isRelocationTargetOf(ShardRouting other){  boolean b=this.allocationId != null && other.allocationId != null && this.state == ShardRoutingState.INITIALIZING && this.allocationId.getId().equals(other.allocationId.getRelocationId());  assert b == false || other.state == ShardRoutingState.RELOCATING : "ShardRouting is a relocation target but the source shard state isn't relocating. This [" + this + "], other ["+ other+ "]";  assert b == false || other.allocationId.getId().equals(this.allocationId.getRelocationId()) : "ShardRouting is a relocation target but the source id isn't equal to source's allocationId.getRelocationId. This [" + this + "], other ["+ other+ "]";  assert b == false || other.currentNodeId().equals(this.relocatingNodeId) : "ShardRouting is a relocation target but source current node id isn't equal to target relocating node. This [" + this + "], other ["+ other+ "]";  assert b == false || this.currentNodeId().equals(other.relocatingNodeId) : "ShardRouting is a relocation target but current node id isn't equal to source relocating node. This [" + this + "], other ["+ other+ "]";  assert b == false || isSameShard(other) : "ShardRouting is a relocation target but both routings are not of the same shard. This [" + this + "], other ["+ other+ "]";  assert b == false || this.primary == other.primary : "ShardRouting is a relocation target but primary flag is different. This [" + this + "], target ["+ other+ "]";  return b;}  }
class C{  @Override public void registerListener(DeployableMonitorListener listener){  this.listener=listener;}  }
class C{  public void loadDataset() throws IOException {  FileInputStream fis=new FileInputStream(new File(this.path));  InputStreamReader isr=new InputStreamReader(fis);  StringBuilder sb;  try (BufferedReader bufferedReader=new BufferedReader(isr)){    sb=new StringBuilder();    String line;    while ((line=bufferedReader.readLine()) != null) {      sb.append(line);    }  }   String json=sb.toString();  this.loadDatasetJson(json);}  }
class C{  public Builder followRedirects(boolean followRedirects){  this.followRedirects=followRedirects;  return this;}  }
class C{  void addMouseInputListener(final MouseInputListener listener){  TABLE.addMouseListener(listener);  TABLE.addMouseMotionListener(listener);}  }
class C{  public Path duplicate(){  Path dup=new Path();  dup.copyFrom(this);  return dup;}  }
class C{  static private void addOpaqueTagPlugin(WbXmlDefinition def,Properties props,String key,String value){  try {    String[] keys=key.split(Pattern.quote("."));    byte pageCode=Integer.decode(keys[3]).byteValue();    String name=keys[4];    String tagProp=new StringBuilder(PROP_WBXML_TAG_PREFIX).append(pageCode).append(".").append(name).toString();    WbXmlTagDef tagDef=getTagDefinition(tagProp,props.getProperty(tagProp));    Class clazz=Class.forName(value);    OpaqueContentPlugin plugin=(OpaqueContentPlugin)clazz.newInstance();    def.addOpaqueTag(tagDef,plugin);  } catch (  Exception e) {    log.log(Level.SEVERE,"Error loading plugin {0}={1}",new Object[]{key,value});    log.log(Level.SEVERE,"Exception",e);  }}  }
class C{  protected void test(String name,Problem problem){  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm(name,properties,problem);  Assert.assertEquals(0,algorithm.getNumberOfEvaluations());  Assert.assertEquals(0,algorithm.getResult().size());  Assert.assertFalse(algorithm.isTerminated());  while (algorithm.getNumberOfEvaluations() < 1000) {    algorithm.step();  }  algorithm.terminate();  Assert.assertTrue((algorithm.getNumberOfEvaluations() - 1000) < 100);  Assert.assertTrue(algorithm.getResult().size() > 0);  Assert.assertTrue(algorithm.isTerminated());}  }
class C{  public DChangePassword(JFrame parent,Dialog.ModalityType modality,Password oldPassword,PasswordQualityConfig passwordQualityConfig){  this(parent,modality,res.getString("DChangePassword.Title"),oldPassword,passwordQualityConfig);}  }
class C{  public OrientedVariant(Variant variant,int alleleId){  this(variant,true,alleleId,alleleId);}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public RootLayer(float width,float height){  super(width,height);  setState(State.ADDED);}  }
class C{  protected void redraw(){  Date modelTime=model.getTime();  if (Math.abs(modelTime.getTime() - lastUpdateTimeMs) > UPDATE_FREQUENCY_MS) {    lastUpdateTimeMs=modelTime.getTime();    RaDec sunPosition=SolarPositionCalculator.getSolarPosition(modelTime);    rendererLock.lock();    try {      renderer.queueEnableSkyGradient(GeocentricCoordinates.getInstance(sunPosition));    }  finally {      rendererLock.unlock();    }  }}  }
class C{  public void handleGatewaySenderCreation(GatewaySender sender) throws ManagementException {  if (!isServiceInitialised("handleGatewaySenderCreation")) {    return;  }  GatewaySenderMBeanBridge bridge=new GatewaySenderMBeanBridge(sender);  GatewaySenderMXBean senderMBean=new GatewaySenderMBean(bridge);  ObjectName senderObjectName=MBeanJMXAdapter.getGatewaySenderMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),sender.getId());  ObjectName changedMBeanName=service.registerInternalMBean(senderMBean,senderObjectName);  service.federate(changedMBeanName,GatewaySenderMXBean.class,true);  Notification notification=new Notification(JMXNotificationType.GATEWAY_SENDER_CREATED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.GATEWAY_SENDER_CREATED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public final <E extends Throwable>Flux<T> onErrorResumeWith(Class<E> type,Function<? super E,? extends Publisher<? extends T>> fallback){  Objects.requireNonNull(type,"type");  @SuppressWarnings("unchecked") Function<? super Throwable,Publisher<? extends T>> handler=(Function<? super Throwable,Publisher<? extends T>>)fallback;  return onErrorResumeWith(null,handler);}  }
class C{  default B useCanPlaceOnTag(final BlockItemMeta src){  this.meta().setUseCanPlaceOnTag(src.useCanPlaceOnTag());  return this.getBuilder();}  }
class C{  public void close(){  if (datagramSocket != null) {    datagramSocket.close();  }}  }
class C{  public Iterator nodeIterator(){  return nodeMap.iterator();}  }
class C{  public boolean readRequest(MuxInputStream in,MuxOutputStream out) throws IOException {  int channel=isClient ? 3 : 2;  in.init(this,channel);  out.init(this,channel);  if (readChannel(channel) != null) {    in.setInputStream(is);    in.readToData(false);    return true;  } else   return false;}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.333 -0500",hash_original_method="70E7035C56BDBF9C3F6572F798B0D4BF",hash_generated_method="E58169526819F86AAC7DAC1E5CC765D6") public Location(String provider){  mProvider=provider;}  }
class C{  public void testSimpleClickAtInnerElements(){  mRecordingModule.reset();  View innerButton=getViewByTestId("A");  assertNotNull(innerButton);  createGestureGenerator().startGesture(innerButton).endGesture();  waitForBridgeAndUIIdle();  assertEquals(1,mRecordingModule.getCalls().size());  assertEquals("inner",mRecordingModule.getCalls().get(0));  mRecordingModule.reset();  innerButton=getViewByTestId("C");  assertNotNull(innerButton);  createGestureGenerator().startGesture(innerButton).endGesture();  waitForBridgeAndUIIdle();  assertEquals(1,mRecordingModule.getCalls().size());  assertEquals("outer",mRecordingModule.getCalls().get(0));}  }
class C{  public OMGeometryList findGraphics(String area_key){  PoliticalArea area=findPoliticalArea(area_key);  if (area == null) {    return null;  } else {    return area.getGeometry();  }}  }
class C{  private static void usage(){  StringBuilder helpInfo=new StringBuilder();  helpInfo.append("-h").append("\t\t\thelp command").append("\n").append("-help").append("\t\t\thelp command").append("\n").append("-f").append("\t\t\trequired config, indicate config file").append("\n").append("-l").append("\t\t\tlog file that store the output").append("\n").append("-w").append("\t\t\tfilter worker numbers").append("\n").append("-v").append("\t\t\tprint info log").append("\n").append("-vv").append("\t\t\tprint debug log").append("\n").append("-vvvv").append("\t\t\tprint trace log").append("\n");  System.out.println(helpInfo.toString());}  }
class C{  private String formatString(String content){  if (content != null)   return StringUtils.formatString(content);  return content;}  }
class C{  public FlowNetwork(In in){  this(in.readInt());  int E=in.readInt();  if (E < 0)   throw new IllegalArgumentException("Number of edges must be nonnegative");  for (int i=0; i < E; i++) {    int v=in.readInt();    int w=in.readInt();    if (v < 0 || v >= V)     throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and "+ (V - 1));    if (w < 0 || w >= V)     throw new IndexOutOfBoundsException("vertex " + w + " is not between 0 and "+ (V - 1));    double capacity=in.readDouble();    addEdge(new FlowEdge(v,w,capacity));  }}  }
class C{  public void componentHidden(ComponentEvent e){  ((ComponentListener)a).componentHidden(e);  ((ComponentListener)b).componentHidden(e);}  }
class C{  public static CaseSwitchExpression caseSwitch(Expression valueToSwitchOn){  return new CaseSwitchExpression(valueToSwitchOn);}  }
class C{  public void applyData(String variable,Object data,int... ids){  if (data == null) {    throw new NullPointerException();  }  if (variable == null) {    variable=mVariableBeanMap.get(data.getClass().getName());    if (variable == null) {      throw new DataBindException("can't find the mapping, have you declare the variable in  '<data>'?");    }  }  final Array<PropertyBindInfo> infos=mBindMap_variable.get(variable.hashCode());  if (infos == null || infos.size == 0) {    throw new DataBindException("can't find any mapping of variable ( " + variable + " ) in <bind> element");  }  final ViewHelper mViewHelper=this.mViewHelper;  final IDataResolver mDataResolver=this.mDataResolver;  final SparseArray<ListenerImplContext> mListenerMap=this.mListenerMap;  final EventParseCaretaker caretaker=this.mEventCareTaker;  mDataResolver.putObject(variable,data);  PropertyBindInfo info;  final boolean checkId=ids != null && ids.length > 0;  for (int i=0, size=infos.size; i < size; i++) {    info=infos.get(i);    if (!checkId || ArrayUtil.contains(ids,info.viewId)) {      mDataResolver.setCurrentBindingView(mViewHelper.getView(info.viewId));      applyDataReally(info.viewId,0,info,mViewHelper,mDataResolver,mListenerMap,caretaker);    }  }  mDataResolver.clearObjects();}  }
class C{  public static UUID generateLegacyCfId(String ksName,String cfName){  return UUID.nameUUIDFromBytes(ArrayUtils.addAll(ksName.getBytes(),cfName.getBytes()));}  }
class C{  public static void LDC(float x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public ListProducedItemsOfClassAction(final String clazz,final String message){  this.clazz=checkNotNull(clazz);  this.message=checkNotNull(message);}  }
class C{  public XYPlot findSubplot(PlotRenderingInfo info,Point2D source){  ParamChecks.nullNotPermitted(info,"info");  ParamChecks.nullNotPermitted(source,"source");  XYPlot result=null;  int subplotIndex=info.getSubplotIndex(source);  if (subplotIndex >= 0) {    result=(XYPlot)this.subplots.get(subplotIndex);  }  return result;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  @Override public final TokenStreamComponents createComponents(String fieldName){  Tokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,true);  return new TokenStreamComponents(tokenizer,new QPTestFilter(tokenizer));}  }
class C{  public String toString(){  return "<" + start + ","+ end+ ">";}  }
class C{  private void log(String message){  LogWriterUtils.getLogWriter().info("[IncrementalBackupDUnitTest] " + message);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public int hashCode(){  return super.hashCode() * 37 + positivePrefix.hashCode();}  }
class C{  public boolean isAlwaysUpdateable(){  Object oo=get_Value(COLUMNNAME_IsAlwaysUpdateable);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String model(){  return model;}  }
class C{  protected Element createElementForDeployableInDomain(Deployable deployable,Element domain){  Element appDeployment=domain.getOwnerDocument().createElement("app-deployment");  domain.appendChild(appDeployment);  String id=createIdForDeployable(deployable);  Element appId=appDeployment.getOwnerDocument().createElement("name");  appDeployment.appendChild(appId);  appId.setTextContent(id);  Element target=appDeployment.getOwnerDocument().createElement("target");  appDeployment.appendChild(target);  target.setTextContent(getServerName());  Element moduleType=appDeployment.getOwnerDocument().createElement("module-type");  appDeployment.appendChild(moduleType);  moduleType.setTextContent(deployable.getType().getType());  Element sourcePath=appDeployment.getOwnerDocument().createElement("source-path");  appDeployment.appendChild(sourcePath);  if (deployable.getType() == DeployableType.WAR && getFileHandler().exists(getAbsolutePath(deployable))) {    WAR war=(WAR)deployable;    boolean needsCopy;    if (deployable.isExpanded()) {      needsCopy=!getFileHandler().getName(deployable.getFile()).equals(war.getContext());    } else {      needsCopy=getFileHandler().getName(deployable.getFile()).equals(war.getContext() + ".war");    }    if (needsCopy) {      String cargodeploy=getFileHandler().createDirectory(((WebLogicConfiguration)getContainer().getConfiguration()).getDomainHome(),"cargodeploy");      String targetDirectoryname=getFileHandler().append(cargodeploy,war.getContext());      getFileHandler().delete(targetDirectoryname);      String targetFilename=getFileHandler().append(cargodeploy,war.getContext() + ".war");      getFileHandler().delete(targetFilename);      if (deployable.isExpanded()) {        getFileHandler().copyDirectory(deployable.getFile(),targetDirectoryname);        sourcePath.setTextContent(targetDirectoryname);      } else {        getFileHandler().copyFile(deployable.getFile(),targetFilename,true);        sourcePath.setTextContent(targetFilename);      }    } else {      sourcePath.setTextContent(getAbsolutePath(deployable));    }  } else {    sourcePath.setTextContent(getAbsolutePath(deployable));  }  return appDeployment;}  }
class C{  public void test_14() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,false,false);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(0,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  private static String decode(final CharSequence txt){  try {    return URLDecoder.decode(txt.toString(),Charset.defaultCharset().name());  } catch (  final UnsupportedEncodingException ex) {    throw new IllegalStateException(ex);  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  set(s.readDouble());}  }
class C{  private static void growDiag(AbstractWordAlignment in,SymmetricalWordAlignment out,int[][] neighbors){  assert (out.isEmpty());  intersection(in,out);  boolean redo=true;  while (redo) {    redo=false;    for (int ei=0; ei < out.e2f.length; ++ei) {      Integer[] e2fc=out.e2f[ei].toArray(new Integer[out.e2f[ei].size()]);      for (      int fi : e2fc) {        for (        int[] neighbor : neighbors) {          int nfi=fi + neighbor[0];          int nei=ei + neighbor[1];          if (nfi < 0 || nei < 0 || nfi >= out.f2e.length || nei >= out.e2f.length)           continue;          if (!out.f2e[nfi].contains(nei)) {            if (out.f2e[nfi].isEmpty() || out.e2f[nei].isEmpty()) {              if (in.f2e[nfi].contains(nei) || in.e2f[nei].contains(nfi)) {                out.e2f[nei].add(nfi);                out.f2e[nfi].add(nei);                redo=true;              }            }          }        }      }    }  }}  }
class C{  public static int compareLong(long a,long b){  return a == b ? 0 : a < b ? -1 : 1;}  }
class C{  public void onUnload(){  this.isCubeLoaded=false;  this.world.unloadEntities(this.entities.getEntities());  for (  Entity entity : this.entities.getEntities()) {    entity.addedToChunk=false;  }  for (  TileEntity blockEntity : this.tileEntityMap.values()) {    this.world.removeTileEntity(blockEntity.getPos());  }}  }
class C{  @Category(FlakyTest.class) @Test public void testPartitionRegionInitialization() throws Throwable {  final String name=getUniqueName();  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  VM vm3=host.getVM(3);  LogWriterUtils.getLogWriter().info("*****INITIALIZATION TEST STARTED*****");  int AsyncInvocationArrSize=8;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm0.invokeAsync(getCacheSerializableRunnableForPRCreate(name,MAX_REGIONS,0,"NONE"));  async[1]=vm1.invokeAsync(getCacheSerializableRunnableForPRCreate(name,MAX_REGIONS,0,"NONE"));  async[2]=vm2.invokeAsync(getCacheSerializableRunnableForPRCreate(name,MAX_REGIONS,0,"NONE"));  async[3]=vm3.invokeAsync(getCacheSerializableRunnableForPRCreate(name,MAX_REGIONS,0,"NONE"));  for (int count=0; count < 4; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < 4; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }  async[4]=vm0.invokeAsync(getCacheSerializableRunnableForPRInitialize());  async[5]=vm1.invokeAsync(getCacheSerializableRunnableForPRInitialize());  async[6]=vm2.invokeAsync(getCacheSerializableRunnableForPRInitialize());  async[7]=vm3.invokeAsync(getCacheSerializableRunnableForPRInitialize());  for (int count=4; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=4; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }  LogWriterUtils.getLogWriter().info("*****INITIALIZATION TEST ENDED*****");}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  double[] dist=new double[num_classes];  HashMap currentData=new HashMap();  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    double dt=instance.value(num_classes + j);    if (dt != 0) {      currentData.put(j,dt);    }  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    Set<Integer> s1=weightsB[currentCategory].keySet();    for (    int j : s1) {      ranking[j]=ranking[j] + best_matches[i] * (Double)weightsB[currentCategory].get(j);    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
