class C{  public DynamicGVTBuilder(){}  }
class C{  public void searchRaceWithEntrant(String stream){  entrantToSearch=stream;  raceFinder.setLocationRelativeTo(parent);  raceFinder.open(stream);  if (isDataStale()) {    reload();  } else {    searchRaceWithEntrant(currentRaces);  }}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4);}  }
class C{  synchronized private boolean scatter(final Value predecessor,final double newDist){  if (newDist < dist) {    dist=newDist;    this.predecessor.set(predecessor);    return true;  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.SNIPPET__CODE:    setCode((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static Instances read(InputStream stream) throws Exception {  DataSource source;  Instances result;  source=new DataSource(stream);  result=source.getDataSet();  return result;}  }
class C{  private void updateLastKnown(List<AuthnProvider> knownProviders){  _lastKnownConfiguration=new HashMap<URI,Long>();  for (  AuthnProvider provider : knownProviders) {    _lastKnownConfiguration.put(provider.getId(),provider.getLastModified());  }  _lastKnownLdapConnectionTimeout=SystemPropertyUtil.getLdapConnectionTimeout(_coordinator);}  }
class C{  public TestConfigurationBuilder(TestConfiguration initialConfig){  this.diagnosticFiles=new ArrayList<>(initialConfig.getDiagnosticFiles());  this.testSourceFiles=new ArrayList<>(initialConfig.getTestSourceFiles());  this.processors=new LinkedHashSet<>(initialConfig.getProcessors());  this.options=new SimpleOptionMap();  this.addOptions(initialConfig.getOptions());  this.shouldEmitDebugInfo=initialConfig.shouldEmitDebugInfo();}  }
class C{  public TDoubleHashSet(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public DistributedLogManager createDistributedLogManager(String nameOfLogStream,ClientSharingOption clientSharingOption,Optional<DistributedLogConfiguration> streamConfiguration,Optional<DynamicDistributedLogConfiguration> dynamicStreamConfiguration) throws InvalidStreamNameException, IOException {  return namespace.createDistributedLogManager(nameOfLogStream,clientSharingOption,streamConfiguration,dynamicStreamConfiguration);}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Config c=Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  if (PermissionsUtils.checkReadStoragePermission(fragment.getActivity())) {    fragment.startActivityForResult(getIntent(context),REQUEST_CODE);  }}  }
class C{  public ImageException(String message){  super(message);}  }
class C{  public void shutdown(boolean waitForJobsToComplete){synchronized (nextRunnableLock) {    getLog().debug("Shutting down threadpool...");    isShutdown=true;    if (workers == null)     return;    Iterator<WorkerThread> workerThreads=workers.iterator();    while (workerThreads.hasNext()) {      WorkerThread wt=workerThreads.next();      wt.shutdown();      availWorkers.remove(wt);    }    nextRunnableLock.notifyAll();    if (waitForJobsToComplete == true) {      boolean interrupted=false;      try {        while (handoffPending) {          try {            nextRunnableLock.wait(100);          } catch (          InterruptedException _) {            interrupted=true;          }        }        while (busyWorkers.size() > 0) {          WorkerThread wt=(WorkerThread)busyWorkers.getFirst();          try {            getLog().debug("Waiting for thread " + wt.getName() + " to shut down");            nextRunnableLock.wait(2000);          } catch (          InterruptedException _) {            interrupted=true;          }        }        workerThreads=workers.iterator();        while (workerThreads.hasNext()) {          WorkerThread wt=(WorkerThread)workerThreads.next();          try {            wt.join();            workerThreads.remove();          } catch (          InterruptedException _) {            interrupted=true;          }        }      }  finally {        if (interrupted) {          Thread.currentThread().interrupt();        }      }      getLog().debug("No executing jobs remaining, all threads stopped.");    }    getLog().debug("Shutdown of threadpool complete.");  }}  }
class C{  @Override public Collection<Object> values(){  checkInitialized();  return Collections.unmodifiableCollection(super.values());}  }
class C{  @Override public void onSensorChanged(SensorEvent event){  assert (event.values.length == 3);  assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());  if (!mIsRunning) {    return;  }switch (event.sensor.getType()) {case Sensor.TYPE_ACCELEROMETER:    if (mGravityVector == null) {      mGravityVector=new float[3];    }  mGravityVector[0]=event.values[0];mGravityVector[1]=event.values[1];mGravityVector[2]=event.values[2];getOrientationUsingGetRotationMatrix();break;case Sensor.TYPE_MAGNETIC_FIELD:if (mMagneticFieldVector == null) {mMagneticFieldVector=new float[3];}mMagneticFieldVector[0]=event.values[0];mMagneticFieldVector[1]=event.values[1];mMagneticFieldVector[2]=event.values[2];getOrientationUsingGetRotationMatrix();break;default :assert (false);}}  }
class C{  public static BufferedImage createRGBImageFromCMYK(Raster cmykRaster,ICC_Profile cmykProfile){  BufferedImage image;  int w=cmykRaster.getWidth();  int h=cmykRaster.getHeight();  if (cmykProfile != null) {    ColorSpace cmykCS=new ICC_ColorSpace(cmykProfile);    image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);    WritableRaster rgbRaster=image.getRaster();    ColorSpace rgbCS=image.getColorModel().getColorSpace();    ColorConvertOp cmykToRgb=new ColorConvertOp(cmykCS,rgbCS,null);    cmykToRgb.filter(cmykRaster,rgbRaster);  } else {    int[] rgb=new int[w * h];    int[] C=cmykRaster.getSamples(0,0,w,h,0,(int[])null);    int[] M=cmykRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Y=cmykRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=cmykRaster.getSamples(0,0,w,h,3,(int[])null);    for (int i=0, imax=C.length; i < imax; i++) {      int k=K[i];      rgb[i]=(255 - Math.min(255,C[i] + k)) << 16 | (255 - Math.min(255,M[i] + k)) << 8 | (255 - Math.min(255,Y[i] + k));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  @SuppressWarnings("unchecked") private void processFields(){  List<FieldNode> fields=cn.fields;  for (  FieldNode field : fields) {    if (DescriptorMapping.getInstance().isTransformedField(className,field.name,field.desc)) {      String newDesc=transformFieldDescriptor(className,field.name,field.desc);      logger.info("Transforming field " + field.name + " from "+ field.desc+ " to "+ newDesc);      if (!newDesc.equals(field.desc))       TransformationStatistics.transformBooleanField();      field.desc=newDesc;    }  }}  }
class C{  public AuditEvent convertToAuditEvent(PersistentAuditEvent persistentAuditEvent){  Instant instant=persistentAuditEvent.getAuditEventDate().atZone(ZoneId.systemDefault()).toInstant();  return new AuditEvent(Date.from(instant),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();switch (getType()) {case Building.LIGHT:    buf.append("Light ");  break;case Building.MEDIUM:buf.append("Medium ");break;case Building.HEAVY:buf.append("Heavy ");break;case Building.HARDENED:buf.append("Hardened ");break;case Building.WALL:buf.append("");break;}switch (getBldgClass()) {case Building.HANGAR:buf.append("Hangar ");break;case Building.FORTRESS:buf.append("Fortress ");break;case Building.GUN_EMPLACEMENT:buf.append("Gun Emplacement");break;default :buf.append("Standard ");}buf.append(name);return buf.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void checkForOutputExistence(String outDir){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(outDir);    FileStatus[] outFiles=fs.listStatus(outDirectory);    assertEquals("number of files in directory not 1",1,outFiles.length);    FSDataInputStream fsout=fs.open(outFiles[0].getPath());    BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));    String outLine=outIn.readLine();    outIn.close();    assertNotNull("file is empty",outLine);    assertTrue("file is empty",outLine.length() > 0);  } catch (  IOException e) {    fail("unable to read " + outDir + ": "+ e.getMessage());  }}  }
class C{  public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException {  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER);}  }
class C{  public String toJava(){  if (isFull()) {    return "Wildcards.FULL";  } else   if (isExact()) {    return "Wildcards.EXACT";  }  StringBuilder b=new StringBuilder();  EnumSet<Flag> myFlags=getWildcardedFlags();  if (myFlags.size() < 3) {    b.append("Wildcards.of(" + commaJoiner.join(prefix("Flag.",myFlags.iterator())) + ")");  } else {    EnumSet<Flag> invFlags=inverted().getWildcardedFlags();    b.append("Wildcards.ofMatches(" + commaJoiner.join(prefix("Flag.",invFlags.iterator())) + ")");  }  if (Flag.NW_SRC.isPartiallyOn(flags)) {    b.append(".setNwSrcMask(" + getNwSrcMask() + ")");  }  if (Flag.NW_DST.isPartiallyOn(flags)) {    b.append(".setNwDstMask(" + getNwDstMask() + ")");  }  return b.toString();}  }
class C{  @Override public int perimeter(int size){  int retval=0;  QuadTreeNode neighbor=gtEqualAdjNeighbor(NORTH);  if (neighbor == null || neighbor instanceof WhiteNode)   retval+=size; else   if (neighbor instanceof GreyNode) {    retval+=neighbor.sumAdjacent(Quadrant.cSouthEast,Quadrant.cSouthWest,size);  }  neighbor=gtEqualAdjNeighbor(EAST);  if (neighbor == null || neighbor instanceof WhiteNode)   retval+=size; else   if (neighbor instanceof GreyNode) {    retval+=neighbor.sumAdjacent(Quadrant.cSouthWest,Quadrant.cNorthWest,size);  }  neighbor=gtEqualAdjNeighbor(SOUTH);  if (neighbor == null || neighbor instanceof WhiteNode)   retval+=size; else   if (neighbor instanceof GreyNode) {    retval+=neighbor.sumAdjacent(Quadrant.cNorthWest,Quadrant.cNorthEast,size);  }  neighbor=gtEqualAdjNeighbor(WEST);  if (neighbor == null || neighbor instanceof WhiteNode)   retval+=size; else   if (neighbor instanceof GreyNode) {    retval+=neighbor.sumAdjacent(Quadrant.cNorthEast,Quadrant.cSouthEast,size);  }  return retval;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrnotspecifiedvalue.class,args);}  }
class C{  public ScaleIOSnapshotVolumeResponse snapshotVolume(String volId,String snapshotName,String systemId) throws Exception {  String uri=ScaleIOConstants.getSnapshotVolumesURI(systemId);  ScaleIOSnapshotVolumes spVol=new ScaleIOSnapshotVolumes();  spVol.addSnapshot(volId,snapshotName);  ClientResponse response=post(URI.create(uri),getJsonForEntity(spVol));  return getResponseObject(ScaleIOSnapshotVolumeResponse.class,response);}  }
class C{  public AbortException(List<LocalizedText> customerMessages,List<LocalizedText> providerMessages){  super(customerMessages);  this.providerMessages=providerMessages;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.example.com/";  String qualifiedName;  Document doc;  Attr newAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,"");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static DeactivateInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeactivateInstanceE object=new DeactivateInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deactivateInstance").equals(reader.getName())) {          object.setDeactivateInstance(org.oscm.xsd.DeactivateInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public TLongIntHashMapDecorator(TLongIntHashMap map){  super();  this._map=map;}  }
class C{  public StringExpr_ createStringExpr_(){  StringExpr_Impl stringExpr_=new StringExpr_Impl();  return stringExpr_;}  }
class C{  public double evaluate(double time){  scoreMatrix.setTime(time);  return -scoreMatrix.getScore(sitePatterns);}  }
class C{  public void testQueueManagement(){  Message m1=new Message(h1,h3,"dummy",BUFFER_SIZE - 1);  h1.createNewMessage(m1);  assertEquals(1,h1.getNrofMessages());  Message m2=new Message(h1,h3,msgId1,BUFFER_SIZE / 3);  h1.createNewMessage(m2);  assertEquals(1,h1.getNrofMessages());  assertEquals(msgId1,h1.getMessageCollection().iterator().next().getId());  mc.reset();  clock.advance(10);  Message m3=new Message(h1,h3,msgId2,BUFFER_SIZE / 3);  h1.createNewMessage(m3);  clock.advance(10);  Message m4=new Message(h1,h3,"newestMsg",BUFFER_SIZE / 3);  h1.createNewMessage(m4);  clock.advance(10);  Message m5=new Message(h2,h3,"MSG_from_h2",BUFFER_SIZE / 2);  h2.createNewMessage(m5);  checkCreates(3);  h2.connect(h1);  h2.update(true);  assertTrue(mc.next());  assertEquals(mc.TYPE_DELETE,mc.getLastType());  assertEquals(h1,mc.getLastFrom());  assertEquals(msgId1,mc.getLastMsg().getId());  assertTrue(mc.getLastDropped());  assertTrue(mc.next());  assertEquals(mc.TYPE_DELETE,mc.getLastType());  assertEquals(msgId2,mc.getLastMsg().getId());  assertEquals(1,h1.getNrofMessages());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(h2,mc.getLastFrom());  assertFalse(mc.next());  clock.advance(10);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h1,mc.getLastTo());  assertFalse(mc.next());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void appendLongInteger(long longInt){  int size;  long temp=longInt;  for (size=0; (temp != 0) && (size < LONG_INTEGER_LENGTH_MAX); size++) {    temp=(temp >>> 8);  }  appendShortLength(size);  int i;  int shift=(size - 1) * 8;  for (i=0; i < size; i++) {    append((int)((longInt >>> shift) & 0xff));    shift=shift - 8;  }}  }
class C{  protected boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  public static Builder builder(QueryRequest request){  return new Builder(request);}  }
class C{  @Override public void onViewDragStateChanged(int state){  if (state == mDragState) {    return;  }  if ((mDragState == ViewDragHelper.STATE_DRAGGING || mDragState == ViewDragHelper.STATE_SETTLING) && state == ViewDragHelper.STATE_IDLE && (mDragOffset == mConfigView.getVerticalDragRange())) {    mConfigView.hideView();  }  mDragState=state;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void testDoc2_Query2_All_Slops_Should_match() throws Exception {  for (int slop=0; slop < 30; slop++) {    float freq1=checkPhraseQuery(DOC_2,QUERY_2,slop,1);    float freq2=checkPhraseQuery(DOC_2_B,QUERY_2,slop,1);    assertTrue("slop=" + slop + " freq2="+ freq2+ " should be greater than freq1 "+ freq1,freq2 > freq1);  }}  }
class C{  static RuleDay parse(String day){  RuleDay d=new RuleDay();  if (day.startsWith("last")) {    d.lastOne=true;    d.dayName=day.substring(4);    d.dow=getDOW(d.dayName);  } else {    int index;    if ((index=day.indexOf(">=")) != -1) {      d.dayName=day.substring(0,index);      d.dow=getDOW(d.dayName);      d.soonerOrLater=1;      d.thanDayOfMonth=Integer.parseInt(day.substring(index + 2));    } else     if ((index=day.indexOf("<=")) != -1) {      d.dayName=day.substring(0,index);      d.dow=getDOW(d.dayName);      d.soonerOrLater=-1;      d.thanDayOfMonth=Integer.parseInt(day.substring(index + 2));    } else {      d.thanDayOfMonth=Integer.parseInt(day);    }  }  return d;}  }
class C{  private void processDataLinks(List<Draft3DataLink> dataLinks,ApplicationPort port,Draft3Job job,boolean strip){  for (  Draft3DataLink dataLink : dataLinks) {    String source=dataLink.getSource();    String destination=dataLink.getDestination();    String scatter=null;    if (job.getId().contains(DOT_SEPARATOR)) {      String mod=job.getId().substring(job.getId().indexOf(DOT_SEPARATOR) + 1);      if (strip) {        mod=mod.substring(mod.indexOf(DOT_SEPARATOR) + 1);      }      scatter=mod + SLASH_SEPARATOR + Draft3SchemaHelper.normalizeId(port.getId());    } else {      scatter=port.getId();    }    if ((source.equals(scatter) || destination.equals(scatter)) && (dataLink.getScattered() == null || !dataLink.getScattered())) {      dataLink.setScattered(port.getScatter());    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.METADATA__KEY:    setKey(KEY_EDEFAULT);  return;case EipPackage.METADATA__VALUES:getValues().clear();return;}super.eUnset(featureID);}  }
class C{  public void createOverlay(DrawingView view,TextHolderFigure figure){  view.getComponent().add(textField,0);  textField.setText(figure.getText());  textField.setColumns(figure.getTextColumns());  textField.selectAll();  textField.setVisible(true);  editedFigure=figure;  editedFigure.addFigureListener(figureHandler);  this.view=view;  updateWidget();}  }
class C{  @Override public boolean onUsed(final RPEntity user){  if (user instanceof Player) {    String extra=" ";    if (((Player)user).isQuestInState("mithril_cloak","twilight_zone")) {      StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("hell");      int x=5;      int y=5;      if (zone == null) {        user.sendPrivateText("Oh oh. For some strange reason the scroll did not teleport me to the right place.");        logger.warn("twilight elixir to unknown zone hell," + " teleported " + user.getName() + " to Semos instead");        zone=SingletonRepository.getRPWorld().getZone("0_semos_city");      }      ((Player)user).teleport(zone,x,y,null,(Player)user);      extra=" Now you will go to hell, for thinking of yourself before you think of others.";    }    user.sendPrivateText("Didn't you know, one man's drink is another man's poison? That elixir was meant for Ida in the twilight zone." + extra);    return super.onUsed(user);  } else {    logger.warn("some non player RPEntity just used a twilight elixir, which shouldn't be possible.");    return false;  }}  }
class C{  protected GridNioFilterAdapter(String name){  assert name != null;  this.name=name;}  }
class C{  public void bindNull(int index){  mPreparedStatement.bindNull(index);}  }
class C{  public void show(ShareContent content,Mode mode){  isAutomaticMode=(mode == Mode.AUTOMATIC);  showImpl(content,isAutomaticMode ? BASE_AUTOMATIC_MODE : mode);}  }
class C{  public GridPaneEx(){  setAlignment(Pos.TOP_LEFT);  setHgap(5);  setVgap(10);}  }
class C{  @Override protected void onDestroy(){  RxBus.get().unregister(mouseMam);  ArrayList<Cat> cats=catMam.getCats();  for (  Cat cat : cats) {    RxBus.get().unregister(cat);  }  super.onDestroy();}  }
class C{  private void skipFragmentIgnorables() throws ParseException {  while (!tokens.isEmpty()) {    Token<HtmlTokenType> t=tokens.peek();switch (t.type) {case DIRECTIVE:      break;default :    return;}tokens.advance();}}  }
class C{  public int maxProfit(int k,int[] prices){  if (prices == null || prices.length < 2 || k == 0) {    return 0;  }  int n=prices.length;  int res=0;  if (k >= n / 2) {    for (int i=1; i < n; i++) {      if (prices[i] > prices[i - 1]) {        res+=prices[i] - prices[i - 1];      }    }    return res;  }  int[][] dp=new int[k + 1][n + 1];  for (int i=1; i <= k; i++) {    int curMax=Integer.MIN_VALUE;    for (int j=0; j < n; j++) {      dp[i][j + 1]=Math.max(Math.max(dp[i - 1][j + 1],dp[i][j]),prices[j] + curMax);      curMax=Math.max(curMax,dp[i - 1][j] - prices[j]);    }  }  return dp[k][n];}  }
class C{  public static Location copyLocation(Location source,Location dest){  if (dest == null) {    return null;  }  dest.setWorld(source.getWorld());  dest.setX(source.getX());  dest.setY(source.getY());  dest.setZ(source.getZ());  dest.setPitch(source.getPitch());  dest.setYaw(source.getYaw());  return dest;}  }
class C{  @Override public String toString(){  return this.years + ":" + this.months+ ":"+ this.days+ ":"+ this.hours+ ":"+ this.minutes+ ":"+ this.seconds+ ":"+ this.milliseconds;}  }
class C{  public ImageReference(ImageDescriptor descriptor,boolean returnMissingImageOnError,Device device){  this.cache=getImageCache(descriptor,returnMissingImageOnError,device);  this.cache.register(this);}  }
class C{  public ArrayOfDoublesUpdatableSketch build(){  if (dstMem_ == null) {    return new HeapArrayOfDoublesQuickSelectSketch(nomEntries_,resizeFactor_.lg(),samplingProbability_,numValues_,seed_);  }  return new DirectArrayOfDoublesQuickSelectSketch(nomEntries_,resizeFactor_.lg(),samplingProbability_,numValues_,seed_,dstMem_);}  }
class C{  private boolean isInherited(Scope scope,Declaration member){  return inInitializer() && scope.getInheritingDeclaration(member) == typeDeclaration;}  }
class C{  public Volume prepareVolume(Volume volume,Project project,VirtualArray varray,VirtualPool vpool,String size,RPRecommendation recommendation,String label,BlockConsistencyGroup consistencyGroup,URI protectionSystemURI,Volume.PersonalityTypes personality,String rsetName,String internalSiteName,String rpCopyName,Volume sourceVolume,boolean vplex,Volume changeVpoolVolume,boolean isPreCreatedVolume){  volume=(changeVpoolVolume != null) ? changeVpoolVolume : volume;  boolean isNewVolume=(volume == null);  if (isNewVolume || isPreCreatedVolume) {    if (!isPreCreatedVolume) {      volume=new Volume();      volume.setId(URIUtil.createId(Volume.class));      volume.setOpStatus(new OpStatusMap());    } else {      volume=_dbClient.queryObject(Volume.class,volume.getId());    }    volume.setSyncActive(true);    volume.setLabel(label);    volume.setCapacity(SizeUtil.translateSize(size));    volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));    volume.setVirtualPool(vpool.getId());    volume.setProject(new NamedURI(project.getId(),volume.getLabel()));    volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));    volume.setVirtualArray(varray.getId());    if (null != recommendation.getSourceStoragePool()) {      StoragePool pool=_dbClient.queryObject(StoragePool.class,recommendation.getSourceStoragePool());      if (null != pool) {        volume.setProtocol(new StringSet());        volume.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),pool.getProtocols()));        if (!vplex) {          volume.setPool(pool.getId());          volume.setStorageController(pool.getStorageDevice());          StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,pool.getStorageDevice());          String systemType=storageSystem.checkIfVmax3() ? DiscoveredDataObject.Type.vmax3.name() : storageSystem.getSystemType();          volume.setSystemType(systemType);        }      }    }    volume.setVirtualArray(varray.getId());  }  if (personality.equals(Volume.PersonalityTypes.METADATA)) {    volume.addInternalFlags(Flag.INTERNAL_OBJECT);    volume.addInternalFlags(Flag.SUPPORTS_FORCE);    volume.setAccessState(Volume.VolumeAccessState.NOT_READY.name());  } else   if (personality.equals(Volume.PersonalityTypes.SOURCE)) {    volume.setAccessState(Volume.VolumeAccessState.READWRITE.name());    volume.setLinkStatus(Volume.LinkStatus.OTHER.name());  } else   if (personality.equals(Volume.PersonalityTypes.TARGET)) {    volume.setAccessState(Volume.VolumeAccessState.NOT_READY.name());    volume.setLinkStatus(Volume.LinkStatus.OTHER.name());  }  if (consistencyGroup != null) {    volume.setConsistencyGroup(consistencyGroup.getId());    if (changeVpoolVolume != null && !changeVpoolVolume.checkForRp() && RPHelper.isVPlexVolume(changeVpoolVolume,_dbClient)) {      if (consistencyGroup.getArrayConsistency()) {        if (null == changeVpoolVolume.getAssociatedVolumes() || changeVpoolVolume.getAssociatedVolumes().isEmpty()) {          _log.error("VPLEX volume {} has no backend volumes.",changeVpoolVolume.forDisplay());          throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(changeVpoolVolume.forDisplay());        }        for (        String backendVolumeId : changeVpoolVolume.getAssociatedVolumes()) {          Volume backingVolume=_dbClient.queryObject(Volume.class,URI.create(backendVolumeId));          String rgName=consistencyGroup.getCgNameOnStorageSystem(backingVolume.getStorageController());          if (rgName == null) {            rgName=consistencyGroup.getLabel();          } else {            VolumeGroup volumeGroup=ControllerUtils.getApplicationForCG(_dbClient,consistencyGroup,rgName);            if (volumeGroup != null) {              backingVolume.getVolumeGroupIds().add(volumeGroup.getId().toString());            }          }          _log.info(String.format("Preparing VPLEX volume [%s](%s) for RP Protection, " + "backend end volume [%s](%s) updated with replication group name: %s",volume.getLabel(),volume.getId(),backingVolume.getLabel(),backingVolume.getId(),rgName));          backingVolume.setReplicationGroupInstance(rgName);          _dbClient.updateObject(backingVolume);        }      }    }  }  volume.setPersonality(personality.toString());  volume.setProtectionController(protectionSystemURI);  volume.setRSetName(rsetName);  volume.setInternalSiteName(internalSiteName);  volume.setRpCopyName(rpCopyName);  if (NullColumnValueGetter.isNotNullValue(vpool.getAutoTierPolicyName())) {    URI autoTierPolicyUri=StorageScheduler.getAutoTierPolicy(volume.getPool(),vpool.getAutoTierPolicyName(),_dbClient);    if (null != autoTierPolicyUri) {      volume.setAutoTieringPolicyUri(autoTierPolicyUri);    }  }  if (isNewVolume && !isPreCreatedVolume) {    _dbClient.createObject(volume);  } else {    _dbClient.updateObject(volume);  }  if (sourceVolume != null) {    if (sourceVolume.getRpTargets() == null) {      sourceVolume.setRpTargets(new StringSet());    }    sourceVolume.getRpTargets().add(volume.getId().toString());    _dbClient.updateObject(sourceVolume);  }  return volume;}  }
class C{  protected void addAnnotationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AnnotatableElement_annotations_feature"),getString("_UI_PropertyDescriptor_description","_UI_AnnotatableElement_annotations_feature","_UI_AnnotatableElement_type"),TypesPackage.Literals.ANNOTATABLE_ELEMENT__ANNOTATIONS,true,false,true,null,null,null));}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return -(m_right.num(xctxt));}  }
class C{  public GetLatestTask(final Shell shell,final TFSRepository repository,final String localItem){  super(shell,repository);  this.serverItems=null;  this.localItem=localItem;}  }
class C{  public TypeRef value(){  return this.getTypeRef();}  }
class C{  public GroupCategorySet(GroupCategory[] categories){  Assert.isNotNull(categories);  fContent=new ArrayList(categories.length);  for (int i=0; i < categories.length; i++) {    if (!fContent.contains(categories[i]))     fContent.add(categories[i]);  }}  }
class C{  public void test_ESTCARD() throws Exception {  doInsertbyURL("POST",packagePath + "test_estcard.ttl");  final long rangeCount=m_repo.size();  assertEquals(7,rangeCount);}  }
class C{  public RequestHandle patch(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPatch(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.375 -0500",hash_original_method="28B9C3C3AF577CC75DD224D050447CF4",hash_generated_method="2519B50D30B20B11517B949E5B02DAC4") public void enableLogging(){  this.getStackLogger().enableLogging();}  }
class C{  protected Point computeLocation(Rectangle viewport,Rectangle controls){  double x;  double y;  if (this.locationCenter != null) {    x=this.locationCenter.x - controls.width / 2;    y=this.locationCenter.y - controls.height / 2;  } else   if (this.position.equals(AVKey.NORTHEAST)) {    x=viewport.getWidth() - controls.width - this.borderWidth;    y=viewport.getHeight() - controls.height - this.borderWidth;  } else   if (this.position.equals(AVKey.SOUTHEAST)) {    x=viewport.getWidth() - controls.width - this.borderWidth;    y=0d + this.borderWidth;  } else   if (this.position.equals(AVKey.NORTHWEST)) {    x=0d + this.borderWidth;    y=viewport.getHeight() - controls.height - this.borderWidth;  } else   if (this.position.equals(AVKey.SOUTHWEST)) {    x=0d + this.borderWidth;    y=0d + this.borderWidth;  } else {    x=viewport.getWidth() - controls.width - this.borderWidth;    y=viewport.getHeight() - controls.height - this.borderWidth;  }  if (this.locationOffset != null) {    x+=this.locationOffset.x;    y+=this.locationOffset.y;  }  return new Point((int)x,(int)y);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public S_Loop createS_Loop(){  S_LoopImpl s_Loop=new S_LoopImpl();  return s_Loop;}  }
class C{  @Path("remove") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse remove(final RemoveRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.remove(request);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  private void writeHeader() throws OpenStegoException {  int channelBits=1;  int noOfPixels=0;  int headerSize=0;  LSBDataHeader header=null;  try {    noOfPixels=this.imgWidth * this.imgHeight;    header=new LSBDataHeader(this.dataLength,channelBits,this.fileName,this.config);    headerSize=header.getHeaderSize();    while (true) {      if ((noOfPixels * 3 * channelBits) / 8.0 < (headerSize + this.dataLength)) {        channelBits++;        if (channelBits > ((LSBConfig)this.config).getMaxBitsUsedPerChannel()) {          throw new OpenStegoException(null,LSBPlugin.NAMESPACE,LSBErrors.IMAGE_SIZE_INSUFFICIENT);        }      } else {        break;      }    }    header.setChannelBitsUsed(channelBits);    write(header.getHeaderData());    if (this.currBit != 0) {      this.currBit=0;      writeCurrentBitSet();      nextPixel();    }    this.channelBitsUsed=channelBits;    this.bitSet=new byte[3 * channelBits];  } catch (  OpenStegoException osEx) {    throw osEx;  }catch (  Exception ex) {    throw new OpenStegoException(ex);  }}  }
class C{  private EventsEntity(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public AuthPermission(String name,String actions){  super(init(name),actions);}  }
class C{  public boolean configurationExists(final String name){  mSingleArg[0]=name;  final Cursor cursor=mDatabase.query(Tables.CONFIGURATIONS,NAME_PROJECTION,NAME_SELECTION + " AND " + NOT_DELETED_SELECTION,mSingleArg,null,null,null);  try {    return cursor.getCount() > 0;  }  finally {    cursor.close();  }}  }
class C{  public static void sort(int[] a){  int n=a.length;  int[] aux=new int[n];  sort(a,0,n - 1,0,aux);}  }
class C{  public void transitionToIntentReviewLayout(){  mCaptureLayout.setVisibility(View.GONE);  mIntentReviewLayout.setVisibility(View.VISIBLE);  mCancelLayout.setVisibility(View.GONE);  mMode=MODE_INTENT_REVIEW;}  }
class C{  private List createListaUsoObjeto(HttpServletRequest request){  List listaUsoObjeto=new ArrayList();  request.setAttribute(Constants.LISTA_USO_OBJETO,listaUsoObjeto);  return listaUsoObjeto;}  }
class C{  public ReplyException(String msg){  super(msg);}  }
class C{  public byte readByte(){  return data[pos++];}  }
class C{  public static String matchClusterCode(String clusterName){  if (clusterName == null) {    return null;  }  for (  ClusterInfo cluster : CLUSTER_LIST) {    if (clusterName.contains(cluster.getClusterCode())) {      return cluster.getClusterCode();    }  }  for (  ClusterInfo cluster : CLUSTER_LIST) {    if (clusterName.contains(cluster.getClusterShortName())) {      return cluster.getClusterCode();    }  }  return clusterName;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  private View findFocusableViewInBoundsV(boolean topFocus,int top,int bottom){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    if (top < viewBottom && viewTop < bottom) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public Object read(InputNode node,Object result) throws Exception {  Instance type=factory.getInstance(node);  if (type.isReference()) {    return type.getInstance();  }  type.setInstance(result);  if (result != null) {    return populate(node,result);  }  return result;}  }
class C{  public SVGOMFEOffsetElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  @Override public boolean supportsSavepoints(){  debugCodeCall("supportsSavepoints");  return true;}  }
class C{  public void fileFound(String fileFound){  System.out.println("File found :). The following file " + fileFound + " has been successfully loaded");}  }
class C{  public TLongObjectHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (greaterOp_1: ");  result.append(greaterOp_1);  result.append(')');  return result.toString();}  }
class C{  void startSourceFileForGeneratedImplementation(String nameOfGeneratedClass,TypeElement sourceClass){  messager.printMessage(Kind.NOTE,"Creating class " + nameOfGeneratedClass);  fileObject=getSourceFile(nameOfGeneratedClass,sourceClass);  if (fileObject == null) {    giveUp();    return;  }  writer=getWriter(fileObject);  if (writer == null) {    giveUp();    return;  }  currentIndentationLevel=0;}  }
class C{  public long[] decode(String hash){  long[] ret={};  if (hash.equals(""))   return ret;  return this._decode(hash,this.alphabet);}  }
class C{  private void updatePositionNeeds(){  needQBs=2 - teamQBs.size();  needRBs=4 - teamRBs.size();  needWRs=6 - teamWRs.size();  needOLs=10 - teamOLs.size();  needKs=2 - teamKs.size();  needSs=2 - teamSs.size();  needCBs=6 - teamCBs.size();  needF7s=14 - teamF7s.size();  if (dataAdapterPosition != null) {    positions=new ArrayList<String>();    positions.add("QB (Need: " + needQBs + ")");    positions.add("RB (Need: " + needRBs + ")");    positions.add("WR (Need: " + needWRs + ")");    positions.add("OL (Need: " + needOLs + ")");    positions.add("K (Need: " + needKs + ")");    positions.add("S (Need: " + needSs + ")");    positions.add("CB (Need: " + needCBs + ")");    positions.add("F7 (Need: " + needF7s + ")");    positions.add("Top 100 Recruits");    dataAdapterPosition.clear();    for (    String p : positions) {      dataAdapterPosition.add(p);    }    dataAdapterPosition.notifyDataSetChanged();  }}  }
class C{  private BinarySearch(){}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public RemoteObjectInvocationHandler(RemoteRef ref){  super(ref);  if (ref == null) {    throw new NullPointerException();  }}  }
class C{  public Categories addCategory(Category category){  super.addElement(Category.KEY,category);  return this;}  }
class C{  public static void append(File file,byte[] bytes) throws IOException {  OutputStream stream=null;  try {    stream=new FileOutputStream(file,true);    stream.write(bytes,0,bytes.length);    stream.flush();    OutputStream temp=stream;    stream=null;    temp.close();  }  finally {    closeWithWarning(stream);  }}  }
class C{  public DescriptorImpl(final String description,final String label){  this.description=description;  this.label=label;}  }
class C{  @Nullable public synchronized V remove(K key){  V oldValue=mMap.remove(key);  mSizeInBytes-=getValueSizeInBytes(oldValue);  return oldValue;}  }
class C{  public MediaConfig createChannelFileAttachment(String file,MediaConfig config){  config.addCredentials(this);  String xml=POSTFILE(this.url + "/create-channel-attachment",file,config.name,config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    MediaConfig media=new MediaConfig();    media.parseXML(root);    return media;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public static boolean matchUserStatus(String id,User user){  if (id.equals("$mod")) {    if (user.isModerator()) {      return true;    }  } else   if (id.equals("$sub")) {    if (user.isSubscriber()) {      return true;    }  } else   if (id.equals("$turbo")) {    if (user.hasTurbo()) {      return true;    }  } else   if (id.equals("$admin")) {    if (user.isAdmin()) {      return true;    }  } else   if (id.equals("$broadcaster")) {    if (user.isBroadcaster()) {      return true;    }  } else   if (id.equals("$staff")) {    if (user.isStaff()) {      return true;    }  } else   if (id.equals("$bot")) {    if (user.isBot()) {      return true;    }  } else   if (id.equals("$globalmod")) {    if (user.isGlobalMod()) {      return true;    }  } else   if (id.equals("$anymod")) {    if (user.isAdmin() || user.isBroadcaster() || user.isGlobalMod()|| user.isModerator()|| user.isStaff()) {      return true;    }  }  return false;}  }
class C{  public static Selection createFromStartLength(int s,int l){  Assert.isTrue(s >= 0 && l >= 0);  Selection result=new Selection();  result.fStart=s;  result.fLength=l;  result.fExclusiveEnd=s + l;  return result;}  }
class C{  public static byte[] hash(InputStream in) throws IOException {  if (HASH_DIGEST == null) {    throw new EvernoteUtilException(EDAM_HASH_ALGORITHM + " not supported",new NoSuchAlgorithmException(EDAM_HASH_ALGORITHM));  }  byte[] buf=new byte[1024];  int n;  while ((n=in.read(buf)) != -1) {    HASH_DIGEST.update(buf,0,n);  }  return HASH_DIGEST.digest();}  }
class C{  @LayoutlibDelegate static long uptimeMillis(){  return System.currentTimeMillis() - sBootTime;}  }
class C{  void unregisterDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener){  mDownloadFileCacher.unregisterDownloadFileChangeListener(onDownloadFileChangeListener);}  }
class C{  public DateParser(){  this(DateFormat.getDateInstance(DateFormat.SHORT));}  }
class C{  public ShoppingCartItem(ShoppingCartItem item){  this.delegator=item.getDelegator();  try {    this._product=item.getProduct();  } catch (  IllegalStateException e) {    this._product=null;  }  try {    this._parentProduct=item.getParentProduct();  } catch (  IllegalStateException e) {    this._parentProduct=null;  }  this.delegatorName=item.delegatorName;  this.prodCatalogId=item.getProdCatalogId();  this.productId=item.getProductId();  this.supplierProductId=item.getSupplierProductId();  this.parentProductId=item.getParentProductId();  this.externalId=item.getExternalId();  this.itemType=item.getItemType();  this.itemGroup=item.getItemGroup();  this.productCategoryId=item.getProductCategoryId();  this.itemDescription=item.itemDescription;  this.reservStart=item.getReservStart();  this.reservLength=item.getReservLength();  this.reservPersons=item.getReservPersons();  this.accommodationMapId=item.getAccommodationMapId();  this.accommodationSpotId=item.getAccommodationSpotId();  this.quantity=item.getQuantity();  this.setBasePrice(item.getBasePrice());  this.setDisplayPrice(item.getDisplayPrice());  this.setRecurringBasePrice(item.getRecurringBasePrice());  this.setRecurringDisplayPrice(item.getRecurringDisplayPrice());  this.setSpecialPromoPrice(item.getSpecialPromoPrice());  this.reserv2ndPPPerc=item.getReserv2ndPPPerc();  this.reservNthPPPerc=item.getReservNthPPPerc();  this.listPrice=item.getListPrice();  this.setIsModifiedPrice(item.getIsModifiedPrice());  this.selectedAmount=item.getSelectedAmount();  this.requirementId=item.getRequirementId();  this.quoteId=item.getQuoteId();  this.quoteItemSeqId=item.getQuoteItemSeqId();  this.associatedOrderId=item.getAssociatedOrderId();  this.associatedOrderItemSeqId=item.getAssociatedOrderItemSeqId();  this.orderItemAssocTypeId=item.getOrderItemAssocTypeId();  this.setStatusId(item.getStatusId());  if (UtilValidate.isEmpty(item.getOrderItemAttributes())) {    this.orderItemAttributes=FastMap.<String,String>newInstance();    this.orderItemAttributes.putAll(item.getOrderItemAttributes());  }  this.attributes=item.getAttributes() == null ? new HashMap<String,Object>() : new HashMap<String,Object>(item.getAttributes());  this.setOrderItemSeqId(item.getOrderItemSeqId());  this.locale=item.locale;  this.setShipBeforeDate(item.getShipBeforeDate());  this.setShipAfterDate(item.getShipAfterDate());  this.setEstimatedShipDate(item.getEstimatedShipDate());  this.setCancelBackOrderDate(item.getCancelBackOrderDate());  this.contactMechIdsMap=item.getOrderItemContactMechIds() == null ? null : new HashMap<String,String>(item.getOrderItemContactMechIds());  this.orderItemPriceInfos=item.getOrderItemPriceInfos() == null ? null : new LinkedList<GenericValue>(item.getOrderItemPriceInfos());  this.itemAdjustments.addAll(item.getAdjustments());  this.isPromo=item.getIsPromo();  this.promoQuantityUsed=item.promoQuantityUsed;  this.quantityUsedPerPromoCandidate=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoCandidate);  this.quantityUsedPerPromoFailed=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoFailed);  this.quantityUsedPerPromoActual=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoActual);  this.additionalProductFeatureAndAppls=item.getAdditionalProductFeatureAndAppls() == null ? null : new HashMap<String,GenericValue>(item.getAdditionalProductFeatureAndAppls());  if (item.getAlternativeOptionProductIds() != null) {    List<String> tempAlternativeOptionProductIds=FastList.newInstance();    tempAlternativeOptionProductIds.addAll(item.getAlternativeOptionProductIds());    this.setAlternativeOptionProductIds(tempAlternativeOptionProductIds);  }  if (item.configWrapper != null) {    this.configWrapper=new ProductConfigWrapper(item.configWrapper);  }  this.featuresForSupplier.addAll(item.featuresForSupplier);}  }
class C{  public void writeText(char text[],int off,int len) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  if (off < 0 || off > text.length || len < 0 || len > text.length) {    throw new IndexOutOfBoundsException();  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text,off,len);  } else {    Util.writeText(writer,buffer,text,off,len);  }}  }
class C{  public void pleaseStop(){  stopping=true;  mc.pleaseStop();}  }
class C{  public static boolean checkTransactionLockTime(Transaction transaction,int locktime){  if (Math.abs(transaction.getLockTime() - locktime) > 5 * 60) {    System.out.println("Locktime not correct. Should be: " + locktime + " Is: "+ transaction.getLockTime()+ " Diff: "+ Math.abs(transaction.getLockTime() - locktime));    return false;  }  if (locktime == 0) {    return true;  }  for (  TransactionInput input : transaction.getInputs()) {    if (input.getSequenceNumber() == 0) {      return true;    }  }  System.out.println("No Sequence Number is 0..");  return false;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=Utils.convertDpToPixel(4f);      float yOffset=l.getLineWidth() + Utils.calcTextHeight(mLimitLinePaint,label) / 2f;      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      if (l.getLabelPosition() == LimitLine.LimitLabelPosition.POS_RIGHT) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public static void showCommandLineOptions(){  showCommandLineOptions(new TextUICommandLine());}  }
class C{  public WordEntry find(final String str){  final WordEntry entry=words.get(trimWord(str));  return entry;}  }
class C{  private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime,String filter){  registerListener(requestUrl,target,methods,expireTime,filter,null);}  }
class C{  public AbstractTestContext(){  super();}  }
class C{  public final String value(int valIndex){  if (!isNominal() && !isString()) {    return "";  } else {    Object val=m_Values.elementAt(valIndex);    if (val instanceof SerializedObject) {      val=((SerializedObject)val).getObject();    }    return (String)val;  }}  }
class C{  public static void readSkel(BufferedReader reader) throws IOException {  Vector lines=new Vector();  StringBuffer section=new StringBuffer();  String ln;  while ((ln=reader.readLine()) != null) {    if (ln.startsWith("---")) {      lines.addElement(section.toString());      section.setLength(0);    } else {      section.append(ln);      section.append(NL);    }  }  if (section.length() > 0)   lines.addElement(section.toString());  if (lines.size() != size) {    Out.error(ErrorMessages.WRONG_SKELETON);    throw new GeneratorException();  }  line=new String[size];  for (int i=0; i < size; i++)   line[i]=(String)lines.elementAt(i);}  }
class C{  @Override public void finishTerm(BlockTermState _state) throws IOException {  IntBlockTermState state=(IntBlockTermState)_state;  assert state.docFreq > 0;  assert state.docFreq == docCount : state.docFreq + " vs " + docCount;  final int singletonDocID;  if (state.docFreq == 1) {    singletonDocID=docDeltaBuffer[0];  } else {    singletonDocID=-1;    for (int i=0; i < docBufferUpto; i++) {      final int docDelta=docDeltaBuffer[i];      final int freq=freqBuffer[i];      if (!writeFreqs) {        docOut.writeVInt(docDelta);      } else       if (freqBuffer[i] == 1) {        docOut.writeVInt((docDelta << 1) | 1);      } else {        docOut.writeVInt(docDelta << 1);        docOut.writeVInt(freq);      }    }  }  final long lastPosBlockOffset;  if (writePositions) {    assert state.totalTermFreq != -1;    if (state.totalTermFreq > BLOCK_SIZE) {      lastPosBlockOffset=posOut.getFilePointer() - posStartFP;    } else {      lastPosBlockOffset=-1;    }    if (posBufferUpto > 0) {      int lastPayloadLength=-1;      int lastOffsetLength=-1;      int payloadBytesReadUpto=0;      for (int i=0; i < posBufferUpto; i++) {        final int posDelta=posDeltaBuffer[i];        if (writePayloads) {          final int payloadLength=payloadLengthBuffer[i];          if (payloadLength != lastPayloadLength) {            lastPayloadLength=payloadLength;            posOut.writeVInt((posDelta << 1) | 1);            posOut.writeVInt(payloadLength);          } else {            posOut.writeVInt(posDelta << 1);          }          if (payloadLength != 0) {            posOut.writeBytes(payloadBytes,payloadBytesReadUpto,payloadLength);            payloadBytesReadUpto+=payloadLength;          }        } else {          posOut.writeVInt(posDelta);        }        if (writeOffsets) {          int delta=offsetStartDeltaBuffer[i];          int length=offsetLengthBuffer[i];          if (length == lastOffsetLength) {            posOut.writeVInt(delta << 1);          } else {            posOut.writeVInt(delta << 1 | 1);            posOut.writeVInt(length);            lastOffsetLength=length;          }        }      }      if (writePayloads) {        assert payloadBytesReadUpto == payloadByteUpto;        payloadByteUpto=0;      }    }  } else {    lastPosBlockOffset=-1;  }  long skipOffset;  if (docCount > BLOCK_SIZE) {    skipOffset=skipWriter.writeSkip(docOut) - docStartFP;  } else {    skipOffset=-1;  }  state.docStartFP=docStartFP;  state.posStartFP=posStartFP;  state.payStartFP=payStartFP;  state.singletonDocID=singletonDocID;  state.skipOffset=skipOffset;  state.lastPosBlockOffset=lastPosBlockOffset;  docBufferUpto=0;  posBufferUpto=0;  lastDocID=0;  docCount=0;}  }
class C{  public ApiException(int code,ObjectNode jsonResponse){  super((jsonResponse.get(ApiMethod.ERROR_NODE) != null) ? JsonUtils.stringFromJsonNode(jsonResponse.get(ApiMethod.ERROR_NODE),"message") : "No message returned");  this.code=code;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testReorderAppDeploymentsAfterConfigurationVersionAndBeforeAdminServerName() throws Exception {  WAR war=createWar();  deployer.createElementForDeployableInDomain(war,domain);  deployer.reorderAppDeploymentsAfterConfigurationVersion(domain);  String xml=this.xmlUtil.toString(domain);  int indexOfConfigurationVersion=xml.indexOf("configuration-version");  int indexOfAppDeployment=xml.indexOf("app-deployment");  int indexOfAdminServerName=xml.indexOf("admin-server-name");  assertTrue(indexOfAppDeployment > indexOfConfigurationVersion);  assertTrue(indexOfAppDeployment < indexOfAdminServerName);}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  int off=0;  int length=data.length;  int endOffset=off + length;  int bytesWritten=0;  while (off < endOffset) {    byte ch=data[off++];    if (ch == '_') {      out.write(' ');    } else     if (ch == '=') {      if (off + 1 >= endOffset) {        throw new IOException("Invalid quoted printable encoding; truncated escape sequence");      }      byte b1=data[off++];      byte b2=data[off++];      if (b1 == '\r') {        if (b2 != '\n') {          throw new IOException("Invalid quoted printable encoding; CR must be followed by LF");        }      } else {        int c1=hexToBinary(b1);        int c2=hexToBinary(b2);        out.write((c1 << UPPER_NIBBLE_SHIFT) | c2);        bytesWritten++;      }    } else {      out.write(ch);      bytesWritten++;    }  }  return bytesWritten;}  }
class C{  public boolean isFovVisible(){  return (frustum.getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public NotificationChain basicSetTypeArg(TypeArgument newTypeArg,NotificationChain msgs){  TypeArgument oldTypeArg=typeArg;  typeArg=newTypeArg;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG,oldTypeArg,newTypeArg);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static String join(String separator,float[] elements){  if (elements == null || elements.length == 0) {    return "";  }  List<Float> list=new ArrayList<Float>(elements.length);  for (  Float element : elements) {    list.add(element);  }  return join(separator,list);}  }
class C{  public Position(int offset){  this(offset,0);}  }
class C{  protected void onUnhandledException(WebURL webUrl,Throwable e){  String urlStr=(webUrl == null ? "NULL" : webUrl.getURL());  logger.warn("Unhandled exception while fetching {}: {}",urlStr,e.getMessage());  logger.info("Stacktrace: ",e);}  }
class C{  private void createLdifFilesDirectory() throws FileOperationFailedException {  String schemaExportDirName=getSchemaFilesDirectory();  _log.info("Schema ldif files directory {}",schemaExportDirName);  File schemaExportDir=new File(schemaExportDirName);  if (!schemaExportDir.exists()) {    if (!schemaExportDir.mkdirs()) {      throw new FileOperationFailedException("create","directory",schemaExportDirName);    }  }  schemaExportDir.deleteOnExit();  String configExportDirName=getConfigFilesDirectory();  _log.info("Config ldif files directory {}",configExportDirName);  File configExportDir=new File(configExportDirName);  if (!configExportDir.exists()) {    if (!configExportDir.mkdirs()) {      throw new FileOperationFailedException("create","directory",configExportDirName);    }  }  configExportDir.deleteOnExit();}  }
class C{  public void assertNull(Object object){  TestUtils.assertNull(object);}  }
class C{  public static String escapeXml(String s){  initializeEscapeMap();  if (s == null || s.length() == 0) {    return s;  }  char[] sChars=s.toCharArray();  StringBuilder sb=new StringBuilder();  int lastReplacement=0;  for (int i=0; i < sChars.length; i++) {    if (isInvalidXMLCharacter(sChars[i])) {      sb.append(sChars,lastReplacement,i - lastReplacement);      sb.append(sChars[i] == 0xFFFE ? "\\ufffe" : xmlLowValueEscapeStrings[sChars[i]]);      lastReplacement=i + 1;    }  }  if (lastReplacement < sChars.length) {    sb.append(sChars,lastReplacement,sChars.length - lastReplacement);  }  return StringEscapeUtils.escapeXml(sb.toString());}  }
class C{  public ButtonGroup(){}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isHasBack(){  FacesContext realContext=FacesContext.getCurrentInstance(), copyContext=createShadowFacesContext(realContext);  NavigationHandler nav=copyContext.getApplication().getNavigationHandler();  nav.handleNavigation(copyContext,null,"back");  return compareUIViewRoots(realContext.getViewRoot(),copyContext.getViewRoot());}  }
class C{  public LongSparseArrayDataRow(int size){  super(size);  values=new long[size];}  }
class C{  public PropertyAtom(final String id,final String key,final Object val){  super(id);  this.key=key;  this.val=val;}  }
class C{  public void print(final CharSequence text) throws IOException {  final int size=text.length();  int pos=0;  for (int i=0; i < size; i++) {    if (text.charAt(i) == '\n') {      write(text.subSequence(pos,size),i - pos + 1);      pos=i + 1;      atStartOfLine=true;    }  }  write(text.subSequence(pos,size),size - pos);}  }
class C{  private boolean isClosureProgram2(IStep step){  if (step == null)   throw new IllegalArgumentException();  if (step.isRule())   return false;  final IProgram program=(IProgram)step;  if (program.isClosure())   return true;  final Iterator<IStep> itr=program.steps();  while (itr.hasNext()) {    if (isClosureProgram2(itr.next()))     return true;  }  return false;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void expandAll(){  if (!chkExpand.isChecked())   chkExpand.setChecked(true);  TreeUtils.expandAll(menuTree);}  }
class C{  public static SavedAdStyles run(AdSense adsense,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all saved ad styles for default account\n");  System.out.println("=================================================================");  String pageToken=null;  SavedAdStyles savedAdStyles=null;  do {    savedAdStyles=adsense.savedadstyles().list().setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (savedAdStyles.getItems() != null && !savedAdStyles.getItems().isEmpty()) {      for (      SavedAdStyle savedAdStyle : savedAdStyles.getItems()) {        System.out.printf("Saved ad style with name \"%s\" was found.\n",savedAdStyle.getName());      }    } else {      System.out.println("No saved ad styles found.");    }    pageToken=savedAdStyles.getNextPageToken();  } while (pageToken != null);  System.out.println();  return savedAdStyles;}  }
class C{  public static Border createEtchedLowered(){  Border b=new Border();  b.type=TYPE_ETCHED_LOWERED;  b.themeColors=true;  return b;}  }
class C{  public void reset(){  m_currentSearchIndex=0;}  }
class C{  public static void minimizeApp(Context context){  Intent startMain=new Intent(Intent.ACTION_MAIN);  startMain.addCategory(Intent.CATEGORY_HOME);  startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(startMain);}  }
class C{  public static void logDeviceInfo(String tag){  Log.d(tag,"Android SDK: " + Build.VERSION.SDK_INT + ", "+ "Release: "+ Build.VERSION.RELEASE+ ", "+ "Brand: "+ Build.BRAND+ ", "+ "Device: "+ Build.DEVICE+ ", "+ "Id: "+ Build.ID+ ", "+ "Hardware: "+ Build.HARDWARE+ ", "+ "Manufacturer: "+ Build.MANUFACTURER+ ", "+ "Model: "+ Build.MODEL+ ", "+ "Product: "+ Build.PRODUCT);}  }
class C{  private void writePostResource(String path,Element postResourceEl){  if (getFileHandler().isDirectory(path)) {    writeDirectoryPostResource(postResourceEl,path);  } else   if (path.toLowerCase().endsWith(".jar")) {    writeJarPostResource(postResourceEl,path);  } else {    writeFilePostResource(postResourceEl,path);  }}  }
class C{  private Producer<CloseableReference<CloseableImage>> newBitmapCacheGetToBitmapCacheSequence(Producer<CloseableReference<CloseableImage>> inputProducer){  BitmapMemoryCacheProducer bitmapMemoryCacheProducer=mProducerFactory.newBitmapMemoryCacheProducer(inputProducer);  BitmapMemoryCacheKeyMultiplexProducer bitmapKeyMultiplexProducer=mProducerFactory.newBitmapMemoryCacheKeyMultiplexProducer(bitmapMemoryCacheProducer);  ThreadHandoffProducer<CloseableReference<CloseableImage>> threadHandoffProducer=mProducerFactory.newBackgroundThreadHandoffProducer(bitmapKeyMultiplexProducer);  return mProducerFactory.newBitmapMemoryCacheGetProducer(threadHandoffProducer);}  }
class C{  static Pair<byte[],Long> decomposeName(Column column){  ByteBuffer nameBuffer;  if (column.isSetName()) {    nameBuffer=column.bufferForName();  } else {    nameBuffer=ByteBuffer.wrap(column.getName());  }  return decompose(nameBuffer);}  }
class C{  public synchronized boolean hasMoreTokens(){  return (this.pos < this.sourceLength);}  }
class C{  public String sanitizeString(String string){  StringBuilder retval=new StringBuilder();  StringCharacterIterator iterator=new StringCharacterIterator(string);  char character=iterator.current();  while (character != java.text.CharacterIterator.DONE) {    if (character == '<') {      retval.append("&lt;");    } else     if (character == '>') {      retval.append("&gt;");    } else     if (character == '&') {      retval.append("&amp;");    } else     if (character == '\"') {      retval.append("&quot;");    } else     if (character == '\t') {      addCharEntity(9,retval);    } else     if (character == '!') {      addCharEntity(33,retval);    } else     if (character == '#') {      addCharEntity(35,retval);    } else     if (character == '$') {      addCharEntity(36,retval);    } else     if (character == '%') {      addCharEntity(37,retval);    } else     if (character == '\'') {      addCharEntity(39,retval);    } else     if (character == '(') {      addCharEntity(40,retval);    } else     if (character == ')') {      addCharEntity(41,retval);    } else     if (character == '*') {      addCharEntity(42,retval);    } else     if (character == '+') {      addCharEntity(43,retval);    } else     if (character == ',') {      addCharEntity(44,retval);    } else     if (character == '-') {      addCharEntity(45,retval);    } else     if (character == '.') {      addCharEntity(46,retval);    } else     if (character == '/') {      addCharEntity(47,retval);    } else     if (character == ':') {      addCharEntity(58,retval);    } else     if (character == ';') {      addCharEntity(59,retval);    } else     if (character == '=') {      addCharEntity(61,retval);    } else     if (character == '?') {      addCharEntity(63,retval);    } else     if (character == '@') {      addCharEntity(64,retval);    } else     if (character == '[') {      addCharEntity(91,retval);    } else     if (character == '\\') {      addCharEntity(92,retval);    } else     if (character == ']') {      addCharEntity(93,retval);    } else     if (character == '^') {      addCharEntity(94,retval);    } else     if (character == '_') {      addCharEntity(95,retval);    } else     if (character == '`') {      addCharEntity(96,retval);    } else     if (character == '{') {      addCharEntity(123,retval);    } else     if (character == '|') {      addCharEntity(124,retval);    } else     if (character == '}') {      addCharEntity(125,retval);    } else     if (character == '~') {      addCharEntity(126,retval);    } else {      retval.append(character);    }    character=iterator.next();  }  return retval.toString();}  }
class C{  public void install(RSyntaxTextArea textArea){  if (this.textArea != null) {    uninstall();  }  this.textArea=textArea;  textArea.addCaretListener(this);}  }
class C{  public static int schemaInitialId(){  return FNV1_OFFSET_BASIS;}  }
class C{  public long remainder(long instant){  throw unsupported();}  }
class C{  public Vertex randomSynthesize(Vertex source){  log("random synthesize",Level.FINE);  return synthesizeResponse(null,null,null,true,null,source.getNetwork());}  }
class C{  public final void testGetEncryptedData03() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  @HLEFunction(nid=0x7D2F3D7F,version=271) public int sceJpegFinishMJpeg(){  return 0;}  }
class C{  @Override public void save(){  if (hasItem()) {    EventLogConfiguration config=getItem().getEventLogConfiguration();    config.clear();    if (mBinaryLogger.isSelected()) {      config.addLogger(EventLogType.BINARY_MESSAGE);    }    if (mDecodedLogger.isSelected()) {      config.addLogger(EventLogType.DECODED_MESSAGE);    }    if (mCallEventLogger.isSelected()) {      config.addLogger(EventLogType.CALL_EVENT);    }  }  setModified(false);}  }
class C{  public static VOPricedParameter toVOPricedParameter(PricedParameter pricedParam,LocalizerFacade facade){  Parameter parameter=pricedParam.getParameter();  VOParameterDefinition paraDef=ParameterDefinitionAssembler.toVOParameterDefinition(parameter.getParameterDefinition(),facade);  VOPricedParameter result=new VOPricedParameter(paraDef);  result.setPricePerUser(pricedParam.getPricePerUser());  result.setPricePerSubscription(pricedParam.getPricePerSubscription());  result.setPricedOptions(ParameterOptionAssembler.toVOPricedOptions(pricedParam,facade));  result.setParameterKey(parameter.getKey());  result.setRoleSpecificUserPrices(PricedProductRoleAssembler.toVOPricedProductRoles(pricedParam.getRoleSpecificUserPrices(),facade));  result.setSteppedPrices(SteppedPriceAssembler.toVOSteppedPrices(pricedParam.getSteppedPrices()));  updateValueObject(result,pricedParam);  return result;}  }
class C{  boolean isSimulation(){  return this.simulation;}  }
class C{  public boolean easyConfig(String ssid,String password,boolean isVersion2){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_EASY_CONFIG_ID,BroadlinkConstants.CMD_EASY_CONFIG);  initJsonObjectParams.addProperty("ssid",ssid);  initJsonObjectParams.addProperty("password",password);  initJsonObjectParams.addProperty("broadlinkv2",isVersion2 ? 1 : 0);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  public Object newInstance(String owner) throws IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {  return itemCtor.newInstance(owner);}  }
class C{  public static boolean canWrite(String fileName){  return FilePath.get(fileName).canWrite();}  }
class C{  public boolean implies(Permission p){  return true;}  }
class C{  @DSComment("Utility function") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.466 -0500",hash_original_method="A988E80FBF926E38476CB13622AE0017",hash_generated_method="7C5E5705B6EC3452A5193A1A55FAF86A") public static boolean isWellFormedSmsAddress(String address){  String networkPortion=PhoneNumberUtils.extractNetworkPortion(address);  return (!(networkPortion.equals("+") || TextUtils.isEmpty(networkPortion))) && isDialable(networkPortion);}  }
class C{  public List<Map<String,Object>> query(final String indexName,final String q,final Operator operator,final int offset,final int count){  assert count > 1;  SearchRequestBuilder request=elasticsearchClient.prepareSearch(indexName).setQuery(QueryBuilders.multiMatchQuery(q,"_all").operator(operator).zeroTermsQuery(ZeroTermsQuery.ALL)).setFrom(offset).setSize(count);  SearchResponse response=request.execute().actionGet();  SearchHit[] hits=response.getHits().getHits();  ArrayList<Map<String,Object>> result=new ArrayList<Map<String,Object>>();  for (  SearchHit hit : hits) {    Map<String,Object> map=hit.getSource();    result.add(map);  }  return result;}  }
class C{  public static boolean isPattern(String pattern){  return pattern.indexOf('*') != -1 || pattern.indexOf('?') != -1;}  }
class C{  public static void sort(int[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public static void main(String[] args) throws Exception {  int timeout=Integer.MIN_VALUE;  int maxContentLength=Integer.MIN_VALUE;  String logLevel="info";  boolean followTalk=false;  boolean keepConnection=false;  boolean dumpContent=false;  String urlString=null;  String usage="Usage: Ftp [-logLevel level] [-followTalk] [-keepConnection] [-timeout N] [-maxContentLength L] [-dumpContent] url";  if (args.length == 0) {    System.err.println(usage);    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("-logLevel")) {      logLevel=args[++i];    } else     if (args[i].equals("-followTalk")) {      followTalk=true;    } else     if (args[i].equals("-keepConnection")) {      keepConnection=true;    } else     if (args[i].equals("-timeout")) {      timeout=Integer.parseInt(args[++i]) * 1000;    } else     if (args[i].equals("-maxContentLength")) {      maxContentLength=Integer.parseInt(args[++i]);    } else     if (args[i].equals("-dumpContent")) {      dumpContent=true;    } else     if (i != args.length - 1) {      System.err.println(usage);      System.exit(-1);    } else {      urlString=args[i];    }  }  Ftp ftp=new Ftp();  ftp.setFollowTalk(followTalk);  ftp.setKeepConnection(keepConnection);  if (timeout != Integer.MIN_VALUE)   ftp.setTimeout(timeout);  if (maxContentLength != Integer.MIN_VALUE)   ftp.setMaxContentLength(maxContentLength);  Content content=ftp.getProtocolOutput(urlString,WebPage.newBuilder().build()).getContent();  System.err.println("Content-Type: " + content.getContentType());  System.err.println("Content-Length: " + content.getMetadata().get(Response.CONTENT_LENGTH));  System.err.println("Last-Modified: " + content.getMetadata().get(Response.LAST_MODIFIED));  if (dumpContent) {    System.out.print(new String(content.getContent()));  }  ftp=null;}  }
class C{  public void write(ArrayList data){  data.add(xCoord);  data.add(yCoord);  data.add(zCoord);  data.add(dimensionId);}  }
class C{  public String toString(){  if (_name != null)   return "Lifecycle[" + _name + ", "+ getStateName()+ "]"; else   return "Lifecycle[" + getStateName() + "]";}  }
class C{  public SVG12DOMImplementation(){  factories=svg12Factories;  registerFeature("CSS","2.0");  registerFeature("StyleSheets","2.0");  registerFeature("SVG",new String[]{"1.0","1.1","1.2"});  registerFeature("SVGEvents",new String[]{"1.0","1.1","1.2"});}  }
class C{  private static <T>T attemptLoad(final Class<T> ofClass,final String className){  if (LOG.isLoggable(Level.FINEST)) {    LOG.finest("Attempting service load: " + className);  }  Level level;  Exception thrown;  try {    Class clazz=Class.forName(className);    if (!ofClass.isAssignableFrom(clazz)) {      if (LOG.isLoggable(Level.WARNING)) {        LOG.warning(clazz.getName() + " is not assignable to " + ofClass.getName());      }      return null;    }    return ofClass.cast(clazz.newInstance());  } catch (  ClassNotFoundException ex) {    level=Level.FINEST;    thrown=ex;  }catch (  InstantiationException ex) {    level=Level.WARNING;    thrown=ex;  }catch (  IllegalAccessException ex) {    level=Level.WARNING;    thrown=ex;  }  LOG.log(level,"Could not load " + ofClass.getSimpleName() + " instance: "+ className,thrown);  return null;}  }
class C{  @Override public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int countTestCases(){  return 1;}  }
class C{  public void overwriteSetSelectedText(String str){  if (!overwrite || selectionStart != selectionEnd) {    setSelectedText(str);    return;  }  int caret=getCaretPosition();  int caretLineEnd=getLineEndOffset(getCaretLine());  if (caretLineEnd - caret <= str.length()) {    setSelectedText(str);    return;  }  document.beginCompoundEdit();  try {    document.remove(caret,str.length());    document.insertString(caret,str,null);  } catch (  BadLocationException bl) {    bl.printStackTrace();  } finally {    document.endCompoundEdit();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("invalidAttribute");  assertNull("elementGetAttributeNodeNullAssert",domesticAttr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.339 -0500",hash_original_method="72982976B71B01DF2412198462460DF0",hash_generated_method="3FC970F17DE45AAF7F1BC31C989BC4E0") final public boolean isVisible(){  return isAdded() && !isHidden() && mView != null && mView.getWindowToken() != null && mView.getVisibility() == View.VISIBLE;}  }
class C{  public boolean checkError(){  Writer delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  private boolean showHelpOnFirstLaunch(){  try {    PackageInfo info=getPackageManager().getPackageInfo(PACKAGE_NAME,0);    int currentVersion=info.versionCode;    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);    int lastVersion=prefs.getInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,0);    if (currentVersion > lastVersion) {      prefs.edit().putInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,currentVersion).commit();      Intent intent=new Intent(this,HelpActivity.class);      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);      String page=lastVersion == 0 ? HelpActivity.DEFAULT_PAGE : HelpActivity.WHATS_NEW_PAGE;      intent.putExtra(HelpActivity.REQUESTED_PAGE_KEY,page);      startActivity(intent);      return true;    }  } catch (  PackageManager.NameNotFoundException e) {    Log.w(TAG,e);  }  return false;}  }
class C{  public boolean isReviewer(ReviewDb db,@Nullable ChangeData cd) throws OrmException {  if (getUser().isIdentifiedUser()) {    Collection<Account.Id> results=changeData(db,cd).reviewers().all();    return results.contains(getUser().getAccountId());  }  return false;}  }
class C{  public CLocalEdgeCommentWrapper(final INaviEdge edge){  m_edge=edge;}  }
class C{  public void reverse(){  long tmp;  int limit=size / 2;  int j=size - 1;  long[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  @Override public Boolean visitArray_Array(final AnnotatedArrayType type1,final AnnotatedArrayType type2,final VisitHistory visited){  if (!arePrimeAnnosEqual(type1,type2)) {    return false;  }  return areEqual(type1.getComponentType(),type2.getComponentType(),visited);}  }
class C{  private void addRoleBasedRecuringCharges(PriceConverter formatter,RDOUserFees userFee,List<RDORole> roles){  for (  RDORole role : roles) {    RDORole existingRole=userFee.getRole(role.getRoleId());    if (existingRole == null) {      userFee.getRoles().add(role);    } else {      existingRole.setBasePrice(role.getBasePrice());      existingRole.setFactor(ValueRounder.roundValue(new BigDecimal(role.getFactor()),formatter.getActiveLocale(),ValueRounder.SCALING_FACTORS));      existingRole.setPrice(role.getPrice());    }  }}  }
class C{  public StreamStatusWriter(String path,TwitchApi api){  this.path=path;  this.api=api;}  }
class C{  private static void addWeaponQuirk(List<QuirkEntry> quirkEntries,@Nullable Mounted m,int loc,int slot,String unitId,Entity entity){  if (m == null) {    return;  }  if (m.countQuirks() > 0) {    WeaponQuirks weapQuirks=m.getQuirks();    Enumeration<IOptionGroup> quirksGroup=weapQuirks.getGroups();    Enumeration<IOption> quirkOptions;    while (quirksGroup.hasMoreElements()) {      IOptionGroup group=quirksGroup.nextElement();      quirkOptions=group.getSortedOptions();      while (quirkOptions.hasMoreElements()) {        IOption option=quirkOptions.nextElement();        if (!option.booleanValue()) {          continue;        }        QuirkEntry qe=new QuirkEntry(option.getName(),entity.getLocationAbbr(loc),slot,m.getType().getInternalName(),unitId);        quirkEntries.add(qe);      }    }  }}  }
class C{  public static void toggleFavorite(){  try {    if (musicPlaybackService != null) {      musicPlaybackService.toggleFavorite();    }  } catch (  final RemoteException ignored) {  }}  }
class C{  public void onSwapRemove(int cnt){  swapRemoves.addAndGet(cnt);  if (delegate != null)   delegate.onSwapRemove(cnt);}  }
class C{  private final void nextToken(){  if (m_queueMark < m_ops.getTokenQueueSize()) {    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark++);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  public static int dp2px(Context context,float dp){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());  return Math.round(px);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  double distTolerance=10;  boolean loseNoFeatures=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distTolerance=Double.parseDouble(args[2]);  loseNoFeatures=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    if (shapeType.getBaseType() == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYGON;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      outputShapeType=ShapeType.POLYLINE;    } else {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      recJTS=record.getGeometry().getJTSGeometries();      ArrayList<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();      for (int a=0; a < recJTS.length; a++) {        geomList.add(recJTS[a]);      }      DouglasPeuckerSimplifier dps=new DouglasPeuckerSimplifier(factory.buildGeometry(geomList));      dps.setDistanceTolerance(distTolerance);      com.vividsolutions.jts.geom.Geometry outputGeom=dps.getResultGeometry();      if (outputGeom.isEmpty() && loseNoFeatures) {        outputGeom=factory.buildGeometry(geomList);      }      if (!outputGeom.isEmpty()) {        for (int a=0; a < outputGeom.getNumGeometries(); a++) {          com.vividsolutions.jts.geom.Geometry g=outputGeom.getGeometryN(a);          if (g instanceof com.vividsolutions.jts.geom.Polygon && !g.isEmpty()) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Exterior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              buffCoords=p.getInteriorRingN(b).getCoordinates();              if (!Topology.isLineClosed(buffCoords)) {                System.out.println("Interior ring not closed.");              }              if (Topology.isClockwisePolygon(buffCoords)) {                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              } else {                for (i=0; i < buffCoords.length; i++) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbPoly,rowData);          } else           if (g instanceof com.vividsolutions.jts.geom.LineString && !g.isEmpty()) {            LineString ls=(LineString)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbGeometry,rowData);          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isIdentifier(String token){  int size=token.length();  for (int i=0; i < size; i++) {    char c=token.charAt(i);    if (isOperator(c))     return false;  }  if (token.startsWith("'") && token.endsWith("'"))   return false; else {    try {      new BigDecimal(token);      return false;    } catch (    NumberFormatException e) {    }  }  if (isSQLFunctions(token))   return false;  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress=0;  double z, w, wN;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double largeValue=Float.MAX_VALUE;  double smallValue=0.0001;  boolean somethingDone;  int loopNum=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  smallValue=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double noDataOutput=-32768.0;    WhiteboxRaster output;    if (smallValue < 0.01 && smallValue > 0) {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,largeValue);    } else {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,largeValue);    }    output.setNoDataValue(noDataOutput);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      if (row == 0 || row == (rows - 1)) {        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,noDataOutput);          }        }      } else {        for (col=0; col < cols; col++) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }        for (col=cols - 1; col >= 0; col--) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1:",progress);    }    i=0;    do {      loopNum++;      somethingDone=false;switch (i) {case 0:        for (row=1; row < (rows - 1); row++) {          for (col=1; col < (cols - 1); col++) {            z=DEM.getValue(row,col);            w=output.getValue(row,col);            if (w > z) {              for (n=0; n < 8; n++) {                wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;                if (z == noData && wN == noDataOutput) {                  w=noDataOutput;                  output.setValue(row,col,w);                }                if (wN < w) {                  if (wN > z) {                    output.setValue(row,col,wN);                    w=wN;                  } else {                    output.setValue(row,col,z);                    break;                  }                  somethingDone=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + loopNum + ":",progress);        }      break;case 1:    for (row=(rows - 2); row >= 1; row--) {      for (col=(cols - 2); col >= 1; col--) {        z=DEM.getValue(row,col);        w=output.getValue(row,col);        if (w > z) {          for (n=0; n < 8; n++) {            wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;            if (z == noData && wN == noDataOutput) {              w=noDataOutput;              output.setValue(row,col,w);            }            if (wN < w) {              if (wN > z) {                output.setValue(row,col,wN);                w=wN;              } else {                output.setValue(row,col,z);                break;              }              somethingDone=true;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * (rows - row) / (rows - 1));      updateProgress("Loop " + loopNum + ":",progress);    }  break;case 2:for (row=1; row < (rows - 1); row++) {  for (col=(cols - 2); col >= 1; col--) {    z=DEM.getValue(row,col);    w=output.getValue(row,col);    if (w > z) {      for (n=0; n < 8; n++) {        wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;        if (z == noData && wN == noDataOutput) {          w=noDataOutput;          output.setValue(row,col,w);        }        if (wN < w) {          if (wN > z) {            output.setValue(row,col,wN);            w=wN;          } else {            output.setValue(row,col,z);            break;          }          somethingDone=true;        }      }    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(int)(100f * row / (rows - 1));  updateProgress("Loop " + loopNum + ":",progress);}break;case 3:for (row=(rows - 2); row >= 1; row--) {for (col=1; col < (cols - 1); col++) {z=DEM.getValue(row,col);w=output.getValue(row,col);if (w > z) {  for (n=0; n < 8; n++) {    wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;    if (z == noData && wN == noDataOutput) {      w=noDataOutput;      output.setValue(row,col,w);    }    if (wN < w) {      if (wN > z) {        output.setValue(row,col,wN);        w=wN;      } else {        output.setValue(row,col,z);        break;      }      somethingDone=true;    }  }}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}break;}i++;if (i > 3) {i=0;}} while (somethingDone);loopNum++;double zN;dX=new int[]{-1,0,1,1,-1};dY=new int[]{-1,-1,-1,0,0};for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}loopNum++;dX=new int[]{-1,0,1,1,-1};dY=new int[]{1,1,1,0,0};for (row=rows - 1; row >= 0; row--) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.flush();output.findMinAndMaxVals();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isModified(){  return modified;}  }
class C{  private static List<Result> queryContacts(ContentResolver resolver,String input,HashSet<String> addressesRetVal){  String where=null;  String[] whereArgs=null;  if (!TextUtils.isEmpty(input)) {    where=CONTACTS_WHERE;    String param1=input + "%";    String param2="% " + input + "%";    whereArgs=new String[]{param1,param2,param1,param2};  }  Cursor c=resolver.query(CommonDataKinds.StructuredPostal.CONTENT_URI,CONTACTS_PROJECTION,where,whereArgs,Contacts.DISPLAY_NAME + " ASC");  try {    Map<String,List<Result>> nameToAddresses=new HashMap<String,List<Result>>();    c.moveToPosition(-1);    while (c.moveToNext()) {      String name=c.getString(CONTACTS_INDEX_DISPLAY_NAME);      String address=c.getString(CONTACTS_INDEX_ADDRESS);      if (name != null) {        List<Result> addressesForName=nameToAddresses.get(name);        Result result;        if (addressesForName == null) {          Uri contactPhotoUri=null;          if (c.getLong(CONTACTS_INDEX_PHOTO_ID) > 0) {            contactPhotoUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,c.getLong(CONTACTS_INDEX_CONTACT_ID));          }          addressesForName=new ArrayList<Result>();          nameToAddresses.put(name,addressesForName);          result=new Result(name,address,R.drawable.ic_contact_picture,contactPhotoUri);        } else {          result=new Result(null,address,null,null);        }        addressesForName.add(result);        addressesRetVal.add(address);      }    }    List<Result> allResults=new ArrayList<Result>();    for (    List<Result> result : nameToAddresses.values()) {      allResults.addAll(result);    }    return allResults;  }  finally {    if (c != null) {      c.close();    }  }}  }
class C{  public static <K,V>ObjectObjectHashMap<K,V> newMap(int expectedElements){  return new ObjectObjectHashMap<>(expectedElements);}  }
class C{  public VisorTaskArgument(Collection<UUID> nodes,boolean debug){  this(nodes,null,debug);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public void duration(long duration){  min=Math.min(min,duration);  max=Math.max(max,duration);  sum+=duration;  cnt++;}  }
class C{  public Decimal subtract(Decimal decimal){  assertDefined();  if (null == m_value) {    return (decimal);  }  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());  return new Decimal(value,SCALE);}  }
class C{  public Population(){  super();  data=new ArrayList<Solution>();}  }
class C{  public void clear() throws SchedulerException {  sched.clear();}  }
class C{  private Set intersectIP(Set permitted,Set ips){  Set intersect=new HashSet();  for (Iterator it=ips.iterator(); it.hasNext(); ) {    byte[] ip=ASN1OctetString.getInstance(((GeneralSubtree)it.next()).getBase().getName()).getOctets();    if (permitted == null) {      if (ip != null) {        intersect.add(ip);      }    } else {      Iterator it2=permitted.iterator();      while (it2.hasNext()) {        byte[] _permitted=(byte[])it2.next();        intersect.addAll(intersectIPRange(_permitted,ip));      }    }  }  return intersect;}  }
class C{  public int addBlocks(int resId){  InputStream blockIs=mResources.openRawResource(resId);  try {    return loadBlocks(blockIs);  } catch (  IOException e) {    throw new IllegalStateException("Failed to load block defintions from resource: " + mResources.getResourceEntryName(resId));  }}  }
class C{  public Element(Locator locator,String uri,String localName,String qName,Attributes atts,boolean retainAttributes,List<PrefixMapping> prefixMappings){  super(locator);  this.uri=uri;  this.localName=localName;  this.qName=qName;  if (retainAttributes) {    this.attributes=atts;  } else {    this.attributes=new AttributesImpl(atts);  }  this.prefixMappings=prefixMappings;}  }
class C{  public Mono<T> mono(){  return Mono.from(flux());}  }
class C{  public static Resource parseResource(String nTriplesResource,ValueFactory valueFactory) throws IllegalArgumentException {  if (nTriplesResource.startsWith("<")) {    return parseURI(nTriplesResource,valueFactory);  } else   if (nTriplesResource.startsWith("_:")) {    return parseBNode(nTriplesResource,valueFactory);  } else {    throw new IllegalArgumentException("Not a legal N-Triples resource: " + nTriplesResource);  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="";  distPrefId="";  distType=Preference.BLANK_PREF_VALUE;  prefLevel=Preference.BLANK_PREF_VALUE;  subjectArea=DynamicList.getInstance(new ArrayList(),factory);  courseNbr=DynamicList.getInstance(new ArrayList(),factory);  exam=DynamicList.getInstance(new ArrayList(),factory);  filterSubjectAreaId=null;  filterCourseNbr=null;  filterSubjectAreas=new ArrayList();  iExamType=null;}  }
class C{  @Deprecated public static char[] encode(final String unescapedComponent,final BitSet allowed,final String charset) throws URIException {  return URI.encode(unescapedComponent,allowed,charset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:51.416 -0500",hash_original_method="E1FBF626549ACB1158CD9E14F440ADC4",hash_generated_method="0E00904E93A6F196E058B95B3DFA9B3A") public static void validate(int[] oid){  if (oid == null) {    throw new IllegalArgumentException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the " + "second subidentifier value MUST be less than 40");  }  for (  int anOid : oid) {    if (anOid < 0) {      throw new IllegalArgumentException("Subidentifier MUST have positive value");    }  }}  }
class C{  boolean implementsAlg(String serv,String alg,String attribute,String val){  String servAlg=serv + "." + alg;  String prop=getPropertyIgnoreCase(servAlg);  if (prop == null) {    alg=getPropertyIgnoreCase("Alg.Alias." + servAlg);    if (alg != null) {      servAlg=serv + "." + alg;      prop=getPropertyIgnoreCase(servAlg);    }  }  if (prop != null) {    if (attribute == null) {      return true;    }    return checkAttribute(servAlg,attribute,val);  }  return false;}  }
class C{  public void wipeDevice(String code,String data){  String inputPin;  String savedPin=Preference.getString(context,resources.getString(R.string.shared_pref_pin));  try {    JSONObject wipeKey=new JSONObject(data);    inputPin=(String)wipeKey.get(resources.getString(R.string.shared_pref_pin));    String status;    if (inputPin.trim().equals(savedPin.trim())) {      status=resources.getString(R.string.shared_pref_default_status);    } else {      status=resources.getString(R.string.shared_pref_false_status);    }    resultBuilder.build(code,status);    if (inputPin.trim().equals(savedPin.trim())) {      Toast.makeText(context,resources.getString(R.string.toast_message_wipe),Toast.LENGTH_LONG).show();      try {        Thread.sleep(PRE_WIPE_WAIT_TIME);      } catch (      InterruptedException e) {        Log.e(TAG,"Wipe pause interrupted :" + e.toString());      }      devicePolicyManager.wipeData(ACTIVATION_REQUEST);    } else {      Toast.makeText(context,resources.getString(R.string.toast_message_wipe_failed),Toast.LENGTH_LONG).show();    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  public double coefficientOfVariance(){  return Math.sqrt(variance()) / mean();}  }
class C{  int parseYear(String source,String token,int ofs) throws ParseException {  int year=parseNumber(source,ofs,"year",-1,-1);  int len=source.length();  int tokenLen=token.length();  int thisYear=Calendar.getInstance().get(Calendar.YEAR);  if ((len == 2) && (tokenLen < 3)) {    int c=(thisYear / 100) * 100;    year+=c;    if (year > (thisYear + 20)) {      year-=100;    }  }  validateNumber(year,ofs,"year",1000,thisYear + 1000);  return year;}  }
class C{  public boolean isWildcardExport(){  return wildcardExport;}  }
class C{  public final void testGetItemId(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertEquals(proxySpinnerAdapter.getAdapter().hasStableIds(),proxySpinnerAdapter.hasStableIds());  assertEquals(-1,proxySpinnerAdapter.getItemId(0));  assertEquals(0,proxySpinnerAdapter.getItemId(1));  assertEquals(1,proxySpinnerAdapter.getItemId(2));}  }
class C{  public static byte[] patternToHash(List<LockPatternView.Cell> pattern){  if (pattern == null) {    return null;  } else {    int size=pattern.size();    byte[] res=new byte[size];    for (int i=0; i < size; i++) {      LockPatternView.Cell cell=pattern.get(i);      res[i]=(byte)cell.getIndex();    }    MessageDigest md=null;    try {      md=MessageDigest.getInstance("SHA-1");      return md.digest(res);    } catch (    NoSuchAlgorithmException e) {      e.printStackTrace();      return res;    }  }}  }
class C{  private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {  final MessageDigest digest=MessageDigest.getInstance(HASH_ALGORITHM);  byte[] bytes=password.getBytes("UTF-8");  digest.update(bytes,0,bytes.length);  byte[] key=digest.digest();  SecretKeySpec secretKeySpec=new SecretKeySpec(key,"AES");  return secretKeySpec;}  }
class C{  protected void invoke(String path) throws TomcatManagerException, IOException {  invoke(path,null,null);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  style=Integer.parseInt(tokenizer.nextToken());  iconSrc=Integer.parseInt(tokenizer.nextToken());  iconId=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  tooltip=nextToken.substring(1,nextToken.length() - 1);  actionType=Integer.parseInt(tokenizer.nextToken());  actionId=Integer.parseInt(tokenizer.nextToken());}  }
class C{  public static DistributionConfigImpl produce(Properties props){  if (props != null) {    Object o=props.get(DS_CONFIG_NAME);    if (o instanceof DistributionConfigImpl) {      return (DistributionConfigImpl)o;    }  }  return new DistributionConfigImpl(props,false,false);}  }
class C{  synchronized void useMultiplexer(ConnectionMultiplexer newMultiplexer){  multiplexer=newMultiplexer;  usingMultiplexer=true;}  }
class C{  public JSearchPanel createSearchPanel(boolean monitorKeystrokes){  JSearchPanel jsp=new JSearchPanel(m_set,m_field,monitorKeystrokes);  if (m_lock != null) {    jsp.setLock(m_lock);  }  return jsp;}  }
class C{  @NotNull public String readCurrentBranch(){  return branchExist() ? DvcsUtil.tryLoadFileOrReturn(myCurrentBranch,HgRepository.DEFAULT_BRANCH) : HgRepository.DEFAULT_BRANCH;}  }
class C{  public static void uiImpl(){  UIManager.put("ToolBar.isPaintPlainBackground",Boolean.FALSE);  UIManager.put("ToolBar.shadow",new ColorUIResource(new Color(180,183,187)));  UIManager.put("ToolBar.highlight",new ColorUIResource(Color.white));  UIManager.put("ToolBar.dockingBackground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ToolBar.floatingBackground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ToolBar.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ToolBar.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ToolBar.border",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch8_toolbar.BEToolBarUI.ToolBarBorder(UIManager.getColor("ToolBar.shadow"),UIManager.getColor("ToolBar.highlight"),new Insets(6,0,11,0))));  UIManager.put("ToolBarSeparatorUI",org.jb2011.lnf.beautyeye.ch8_toolbar.BEToolBarSeparatorUI.class.getName());  UIManager.put("ToolBarUI",org.jb2011.lnf.beautyeye.ch8_toolbar.BEToolBarUI.class.getName());}  }
class C{  public void fireScrollEvent(int scrollX,int scrollY,int oldscrollX,int oldscrollY){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    ScrollListener a=(ScrollListener)listeners.get(0);    a.scrollChanged(scrollX,scrollY,oldscrollX,oldscrollY);    return;  }  ScrollListener[] array;synchronized (this) {    array=new ScrollListener[listeners.size()];    int alen=array.length;    for (int iter=0; iter < alen; iter++) {      array[iter]=(ScrollListener)listeners.get(iter);    }  }  if (isEdt) {    fireScrollSync(array,scrollX,scrollY,oldscrollX,oldscrollY);  } else {    scrollListenerArray=true;    Runnable cl=new CallbackClass(array,new int[]{scrollX,scrollY,oldscrollX,oldscrollY});    if (blocking) {      Display.getInstance().callSeriallyAndWait(cl);    } else {      Display.getInstance().callSerially(cl);    }  }}  }
class C{  private void savePreset(Preset preset){  String key="presets." + preset.pref + ".";  preset.jar=jdbcDrvJarTf.getText();  setStringProp(key + "jar",preset.jar);  preset.drv=jdbcDrvClsTf.getText();  setStringProp(key + "drv",preset.drv);  preset.url=jdbcUrlTf.getText();  setStringProp(key + "url",preset.url);  preset.user=userTf.getText();  setStringProp(key + "user",preset.user);  savePreferences();}  }
class C{  protected OMGraphic createOMGraphicFromBufferedImage(BufferedImage bi,int x,int y,int zoomLevel,Projection proj) throws InterruptedException {  OMGraphic raster=null;  if (bi != null) {    BufferedImage rasterImage=preprocessImage(bi,bi.getWidth(),bi.getHeight());    if (proj instanceof Mercator) {      raster=getTileMatchingProjectionType(rasterImage,x,y,zoomLevel);    } else {      raster=getTileNotMatchingProjectionType(rasterImage,x,y,zoomLevel);    }    if (mapTileLogger.isLoggable(Level.FINE)) {      raster.putAttribute(OMGraphic.LABEL,new OMTextLabeler("Tile: " + zoomLevel + "|"+ x+ "|"+ y,OMText.JUSTIFY_CENTER));      raster.setSelected(true);    }  }  return raster;}  }
class C{  public Builder enableLog(final boolean logEnable){  this.logEnable=logEnable;  return this;}  }
class C{  protected void onEntranceTransitionStart(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void groupPlayerStandingCSV(){  for (  PlayerQB p : teamQBs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerRB p : teamRBs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerWR p : teamWRs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerK p : teamKs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerOL p : teamOLs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerS p : teamSs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerCB p : teamCBs) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }  for (  PlayerF7 p : teamF7s) {    if (p.year == 0)     teamRSs.add(p); else     if (p.year == 1)     teamFRs.add(p); else     if (p.year == 2)     teamSOs.add(p); else     if (p.year == 3)     teamJRs.add(p); else     if (p.year == 4)     teamSRs.add(p);  }}  }
class C{  public boolean isWasAdmin(){  return wasAdmin;}  }
class C{  @Override public final boolean onCreateOptionsMenu(final Menu menu){  final MenuInflater inflater=getMenuInflater();  inflater.inflate(R.menu.control_menu,menu);  return true;}  }
class C{  protected void sequence_VariableRef(ISerializationContext context,VariableRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.VARIABLE_REF__REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.VARIABLE_REF__REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getVariableRefAccess().getRefVarDefinitionValid_IDParserRuleCall_1_0_1(),semanticObject.getRef());  feeder.finish();}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public static boolean validateThreads(final CFlags flags){  if (flags.isSet(THREADS_FLAG)) {    final int threads=(Integer)flags.getValue(THREADS_FLAG);    if (threads <= 0) {      Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + THREADS_FLAG,threads + "","1");      return false;    }    final int maxThreads=Environment.getAvailableProcessors() * 10;    if (threads > maxThreads) {      Diagnostic.error(ErrorType.INVALID_MAX_INTEGER_FLAG_VALUE,"--" + THREADS_FLAG,threads + "",maxThreads + "");      return false;    }  }  return true;}  }
class C{  public final CC gapTop(String boundsSize){  ver.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ZDT3(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public boolean pageScroll(int direction){  int width=getWidth();  int height=getHeight();  if (direction == View.FOCUS_UP) {    mTempRect.top=getScrollY() - height;    if (mTempRect.top < 0) {      mTempRect.top=0;    }    mTempRect.bottom=mTempRect.top + height;    return scrollAndFocusVertically(direction,mTempRect.top,mTempRect.bottom);  } else   if (direction == View.FOCUS_DOWN) {    mTempRect.top=getScrollY() + height;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      if (mTempRect.top + height > view.getBottom()) {        mTempRect.top=view.getBottom() - height;      }    }    mTempRect.bottom=mTempRect.top + height;    return scrollAndFocusVertically(direction,mTempRect.top,mTempRect.bottom);  } else   if (direction == View.FOCUS_LEFT) {    mTempRect.left=getScrollX() - width;    if (mTempRect.left < 0) {      mTempRect.left=0;    }    mTempRect.right=mTempRect.left + width;    return scrollAndFocusHorizontally(direction,mTempRect.left,mTempRect.right);  } else {    mTempRect.left=getScrollX() + width;    int count=getChildCount();    if (count > 0) {      View view=getChildAt(0);      if (mTempRect.left + width > view.getRight()) {        mTempRect.left=view.getRight() - width;      }    }    mTempRect.right=mTempRect.left + width;    return scrollAndFocusHorizontally(direction,mTempRect.left,mTempRect.right);  }}  }
class C{  public static void i(String msg,Throwable thr){  log(LEVEL.INFO,null,msg,thr);}  }
class C{  protected ReactionPropertyImpl(){  super();}  }
class C{  public static void disableConnectionReuseIfNecessary(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {    System.setProperty("http.keepAlive","false");  }}  }
class C{  public void addMethodRefs(Map<String,ConfigurationMethodRef> configs){  methodInvocationRef.putAll(configs);}  }
class C{  public static void applyFilters(List<Integer> filterIds,Script script){  ScriptFilterDao dao=new ScriptFilterDao();  applyFiltersToScript(dao.findForIds(filterIds),script);}  }
class C{  private void writeXMLContent(char[] content,int start,int length,boolean escapeChars) throws XMLStreamException {  if (!escapeChars) {    _writer.write(content,start,length);    return;  }  int startWritePos=start;  final int end=start + length;  for (int index=start; index < end; index++) {    char ch=content[index];    if (!_writer.canEncode(ch)) {      _writer.write(content,startWritePos,index - startWritePos);      _writer.write(ENCODING_PREFIX);      _writer.write(Integer.toHexString(ch));      _writer.write(SEMICOLON);      startWritePos=index + 1;      continue;    }switch (ch) {case OPEN_START_TAG:      _writer.write(content,startWritePos,index - startWritePos);    _writer.write("&lt;");  startWritePos=index + 1;break;case AMPERSAND:_writer.write(content,startWritePos,index - startWritePos);_writer.write("&amp;");startWritePos=index + 1;break;case CLOSE_START_TAG:_writer.write(content,startWritePos,index - startWritePos);_writer.write("&gt;");startWritePos=index + 1;break;}}_writer.write(content,startWritePos,end - startWritePos);}  }
class C{  public Set<String> addIncrementalContent(IndependentDistribution content,boolean followPrevious){  if (!paused) {    curState.addToState_incremental(content.toDiscrete(),followPrevious);    return update();  } else {    log.info("system is paused, ignoring content " + content);    return Collections.emptySet();  }}  }
class C{  @Override public Object parseObject(final String source,final ParsePosition pos){  return parser.parseObject(source,pos);}  }
class C{  protected CCProgressTimer(CCTexture2D texture){  super();  sprite_=CCSprite.sprite(texture);  percentage_=0.f;  vertexDataCount_=0;  setAnchorPoint(CGPoint.ccp(.5f,.5f));  setContentSize(sprite_.getContentSize());  type_=kCCProgressTimerTypeRadialCCW;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 184) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public ScoringFunction createNewScoringFunction(Person person){  final CharyparNagelScoringParameters parameters=params.getScoringParameters(person);  SumScoringFunction sumScoringFunction=new SumScoringFunction();  sumScoringFunction.addScoringFunction(new CharyparNagelActivityScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelLegScoring(parameters,this.network));  sumScoringFunction.addScoringFunction(new CharyparNagelMoneyScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelAgentStuckScoring(parameters));  return sumScoringFunction;}  }
class C{  FieldArray(){  this(10);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().getLatestRepoPlugins();}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    for (    AstNode label : labels) {      label.visit(v);    }    statement.visit(v);  }}  }
class C{  static String build(final String accountId,final String region,final DateTime instanceLaunchTime){  return Paths.get(accountId,region,instanceLaunchTime.toString("YYYY"),instanceLaunchTime.toString("MM"),instanceLaunchTime.toString("dd")).toString() + "/";}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,char[] chars){  StringCharacterIterator sci=new StringCharacterIterator(new String(chars));  GlyphVector gv=awtFont.createGlyphVector(frc,chars);  return new AWTGVTGlyphVector(gv,this,scale,sci);}  }
class C{  public Long deleteRoom(Rooms r){  log.debug("deleteRoom");  try {    r.setDeleted("true");    r.setUpdatetime(new Date());    if (r.getRooms_id() == null) {      em.persist(r);    } else {      if (!em.contains(r)) {        em.merge(r);      }    }    return r.getRooms_id();  } catch (  Exception ex2) {    log.error("[deleteRoomsOrganisation] ",ex2);  }  return null;}  }
class C{  public ExternalEvent nextEvent(){  int responseSize=0;  int msgSize;  int interval;  int from;  int to;  from=drawHostAddress(this.hostRange);  to=drawToAddress(hostRange,from);  msgSize=drawMessageSize();  interval=drawNextEventTimeDiff();  MessageCreateEvent mce=new MessageCreateEvent(from,to,this.getID(),msgSize,responseSize,this.nextEventsTime);  this.nextEventsTime+=interval;  if (this.msgTime != null && this.nextEventsTime > this.msgTime[1]) {    this.nextEventsTime=Double.MAX_VALUE;  }  return mce;}  }
class C{  public void sortByKeys(SortOrder order){  final int size=this.keys.size();  final DefaultKeyedValue[] data=new DefaultKeyedValue[size];  for (int i=0; i < size; i++) {    data[i]=new DefaultKeyedValue((Comparable)this.keys.get(i),(Number)this.values.get(i));  }  Comparator comparator=new KeyedValueComparator(KeyedValueComparatorType.BY_KEY,order);  Arrays.sort(data,comparator);  clear();  for (int i=0; i < data.length; i++) {    final DefaultKeyedValue value=data[i];    addValue(value.getKey(),value.getValue());  }}  }
class C{  protected void moveRandomly(float factor){  double hor=Math.random() - .5;  double vert=Math.random() - .5;  setLat(getLat() + (float)vert / factor);  setLon(getLon() + (float)hor / factor);}  }
class C{  public static String defaultString(Object obj){  return defaultString(obj,"");}  }
class C{  public DimensionalNode parent(IMultiPoint value){  if (value == null) {    throw new IllegalArgumentException("unable to insert null value into KDTree");  }  if (root == null) {    return null;  }  DimensionalNode node=root;  DimensionalNode next;  while (node != null) {    if (node.isBelow(value)) {      next=node.getBelow();      if (next == null) {        break;      } else {        node=next;      }    } else {      next=node.getAbove();      if (next == null) {        break;      } else {        node=next;      }    }  }  return node;}  }
class C{  protected void makeInputNodes(MethodScope methodScope,LoopScope loopScope,Node node,boolean updateUsages){  Edges edges=node.getNodeClass().getEdges(Edges.Type.Inputs);  for (int index=0; index < edges.getDirectCount(); index++) {    if (skipEdge(node,edges,index,true,true)) {      continue;    }    int orderId=readOrderId(methodScope);    Node value=ensureNodeCreated(methodScope,loopScope,orderId);    edges.initializeNode(node,index,value);    if (updateUsages && value != null && !value.isDeleted()) {      edges.update(node,null,value);    }  }  for (int index=edges.getDirectCount(); index < edges.getCount(); index++) {    if (skipEdge(node,edges,index,false,true)) {      continue;    }    int size=methodScope.reader.getSVInt();    if (size != -1) {      NodeList<Node> nodeList=new NodeInputList<>(node,size);      edges.initializeList(node,index,nodeList);      for (int idx=0; idx < size; idx++) {        int orderId=readOrderId(methodScope);        Node value=ensureNodeCreated(methodScope,loopScope,orderId);        nodeList.initialize(idx,value);        if (updateUsages && value != null && !value.isDeleted()) {          edges.update(node,null,value);        }      }    }  }}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    if (tc.getProtocol() == Mx1Packetizer.ASCII) {      tc.sendMx1Message(tc.getCommandStation().resetModeMsg(),this);    }    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public boolean isPlaylistSessionReady(){  return mSessionReady;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public JDIPermission(String name){  super(name);  if (!name.equals("virtualMachineManager")) {    throw new IllegalArgumentException("name: " + name);  }}  }
class C{  public static Angle average(Angle a,Angle b,Angle c){  if (a == null || b == null || c == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return Angle.fromDegrees((a.degrees + b.degrees + c.degrees) / 3);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node lchild;  String childName;  Node appendedChild;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("br");  appendedChild=employeeNode.appendChild(createdNode);  lchild=employeeNode.getLastChild();  childName=lchild.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  private void create3WayNetwork(Scenario sc){  Network net=sc.getNetwork();  NetworkFactory fac=net.getFactory();  Node n1, n2, n3, n4;  Link l;  n1=fac.createNode(Id.create(1,Node.class),new Coord(0.0,0.0));  net.addNode(n1);  double x=-10.0;  n2=fac.createNode(Id.create(2,Node.class),new Coord(x,10.0));  net.addNode(n2);  n3=fac.createNode(Id.create(3,Node.class),new Coord(0.0,10.0));  net.addNode(n3);  n4=fac.createNode(Id.create(4,Node.class),new Coord(10.0,8.0));  net.addNode(n4);  l=fac.createLink(Id.create(13,Link.class),n1,n3);  net.addLink(l);  l=fac.createLink(Id.create(31,Link.class),n3,n1);  net.addLink(l);  l=fac.createLink(Id.create(23,Link.class),n2,n3);  net.addLink(l);  l=fac.createLink(Id.create(32,Link.class),n3,n2);  net.addLink(l);  l=fac.createLink(Id.create(34,Link.class),n3,n4);  net.addLink(l);  l=fac.createLink(Id.create(43,Link.class),n4,n3);  net.addLink(l);}  }
class C{  public static void assertEqual(byte expected,byte actual,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected == actual,errorMessage);}  }
class C{  public static double pdf(double x,double m,double shape){  double a=Math.sqrt(shape / (2.0 * Math.PI * x* x* x));  double b=((-shape) * (x - m) * (x - m)) / (2.0 * m * m* x);  return a * Math.exp(b);}  }
class C{  public TwoColumnOutput(OutputStream out,int leftWidth,int rightWidth,String spacer){  this(new OutputStreamWriter(out),leftWidth,rightWidth,spacer);}  }
class C{  private void recordSlavePartitionsText(){  try {    ITypedRegion[] partitions=TextUtilities.computePartitioning(tempDocument,partitioning,0,tempDocument.getLength(),false);    savedPartitionText=new String[partitions.length];    for (int i=0; i < savedPartitionText.length; i++) {      if (!isSlaveContentType(partitions[i].getType())) {        continue;      }      savedPartitionText[i]=tempDocument.get(partitions[i].getOffset(),partitions[i].getLength());    }  } catch (  BadLocationException e) {  }}  }
class C{  public void testDivideRoundCeilingNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static int instanceOf(Object o,Class<?> c){  if (o == null)   return FALSE;  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;}  }
class C{  public ServiceExtensionManager(ImsModule imsModule,Context ctx,Core core,RcsSettings rcsSettings){  mCtx=ctx;  mCore=core;  mRcsSettings=rcsSettings;  mSupportedExtensionUpdater=new SupportedExtensionUpdater(mCtx,imsModule,mRcsSettings,this);}  }
class C{  public TextureAtlas(int initialWidth,int initialHeight,int maxWidth,int maxHeight){  this(initialWidth,initialHeight,maxWidth,maxHeight,DEFAULT_USE_MIP_MAPS,DEFAULT_USE_ANISOTROPY);}  }
class C{  public void testMergeOneFilterIntoDocumentWithSameFilterAndParam() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "    <init-param>"+ "      <param-name>f1param1</param-name>"+ "      <param-value>f1param1value</param-value>"+ "    </init-param>"+ "  </filter>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));  List<String> initParams=WebXmlUtils.getFilterInitParamNames(srcWebXml,"f1");  assertEquals(1,initParams.size());  assertEquals("f1param1",initParams.get(0));}  }
class C{  private void generateSerializerRegistration() throws SAXException {  final SerializerCreation sc=this.creation.getSerializerCreation();  if (sc == null) {    return;  }  handler.startElement("",TOP_SERIALIZER_REGISTRATION,TOP_SERIALIZER_REGISTRATION,EMPTY);  for (  Class c : sc.getSerializerRegistrations()) {    handler.startElement("",SERIALIZER_REGISTRATION,SERIALIZER_REGISTRATION,EMPTY);    handler.startElement("",CLASS_NAME,CLASS_NAME,EMPTY);    handler.characters(c.getName().toCharArray(),0,c.getName().length());    handler.endElement("",CLASS_NAME,CLASS_NAME);    handler.endElement("",SERIALIZER_REGISTRATION,SERIALIZER_REGISTRATION);  }  for (  Map.Entry<Class,Integer> e : sc.getInstantiatorRegistrations().entrySet()) {    Class c=e.getKey();    Integer i=e.getValue();    AttributesImpl atts=new AttributesImpl();    atts.addAttribute("","",ID,"",i.toString());    handler.startElement("",INSTANTIATOR_REGISTRATION,INSTANTIATOR_REGISTRATION,atts);    handler.startElement("",CLASS_NAME,CLASS_NAME,EMPTY);    handler.characters(c.getName().toCharArray(),0,c.getName().length());    handler.endElement("",CLASS_NAME,CLASS_NAME);    handler.endElement("",INSTANTIATOR_REGISTRATION,INSTANTIATOR_REGISTRATION);  }  handler.endElement("",TOP_SERIALIZER_REGISTRATION,TOP_SERIALIZER_REGISTRATION);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void sort(Object[] array){  ComparableTimSort.sort(array);}  }
class C{  @action(name="cfp",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'cfp' performative message.")) public Object primCfp(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,CFP,getContentArg(scope));}  }
class C{  public Command show(int top,int bottom,int left,int right,boolean includeTitle,boolean modal){  this.top=top;  this.bottom=bottom;  if (isRTL()) {    this.left=right;    this.right=left;  } else {    this.left=left;    this.right=right;  }  setDisposed(false);  this.modal=modal;  lastCommandPressed=null;  showModal(this.top,this.bottom,this.left,this.right,includeTitle,modal,false);  return lastCommandPressed;}  }
class C{  public static StartupSettings fromJSONFile(File jsonFile) throws JSONException, FileNotFoundException, IOException {  StringBuffer buffer=new StringBuffer();  try (BufferedReader br=new BufferedReader(new FileReader(jsonFile))){    String line;    while ((line=br.readLine()) != null) {      buffer.append(line.trim());    }  }   JSONObject jsonObject=new JSONArray(buffer.toString()).getJSONObject(0);  int port=jsonObject.getInt("port");  String id=jsonObject.getString("id");  int gossipInterval=jsonObject.getInt("gossip_interval");  int cleanupInterval=jsonObject.getInt("cleanup_interval");  String cluster=jsonObject.getString("cluster");  if (cluster == null) {    throw new IllegalArgumentException("cluster was null. It is required");  }  StartupSettings settings=new StartupSettings(id,port,new GossipSettings(gossipInterval,cleanupInterval),cluster);  String configMembersDetails="Config-members [";  JSONArray membersJSON=jsonObject.getJSONArray("members");  for (int i=0; i < membersJSON.length(); i++) {    JSONObject memberJSON=membersJSON.getJSONObject(i);    RemoteGossipMember member=new RemoteGossipMember(memberJSON.getString("cluster"),memberJSON.getString("host"),memberJSON.getInt("port"),"");    settings.addGossipMember(member);    configMembersDetails+=member.getAddress();    if (i < (membersJSON.length() - 1))     configMembersDetails+=", ";  }  log.info(configMembersDetails + "]");  return settings;}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public void skipWhile(String skip) throws IOException {  char ch;  do {    ch=read();  } while (skip.indexOf(ch) > -1);  unreadCharacter(ch);}  }
class C{  public DeleteWarmerRequest names(@Nullable String... names){  this.names=names;  return this;}  }
class C{  public boolean arrayContains(int[] ar,int value){  for (int i=0; i < ar.length; i++) {    if (ar[i] == value) {      return true;    }  }  return false;}  }
class C{  private void skipSynchOrStartServiceOnPeer(Operation peerOp,String link,SynchronizePeersRequest request){  if (request.options.contains(ServiceOption.ON_DEMAND_LOAD)) {    peerOp.complete();    return;  }  Operation checkGet=Operation.createGet(UriUtils.buildUri(peerOp.getUri(),link)).addPragmaDirective(Operation.PRAGMA_DIRECTIVE_NO_FORWARDING).setConnectionSharing(true).setExpiration(Utils.fromNowMicrosUtc(TimeUnit.SECONDS.toMicros(2))).setCompletion(null);  sendRequest(checkGet);}  }
class C{  public static final boolean isIplSpecificIdentityReportMessage(LocoNetMessage m,Integer hostMfr,Integer hostDevice){  if (!isIplIdentityReportMessage(m)) {    return false;  }  if ((m.getElement(4) == hostMfr) && (m.getElement(5) == hostDevice)) {    return true;  }  return false;}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public void testFloatingPrecision1() throws Exception {  new BufferValidator(100,"LINESTRING (331771 5530174, 331776 5530175, 331782 5530177, 331787 5530177, 331791 5530178, 331796 5530178, 331800 5530178, 331805 5530177, 331811 5530176, 331817 5530175, 331823 5530173, 331828 5530171, 331832 5530169, 331835 5530167, 331839 5530163, 331843 5530160, 331846 5530157, 331849 5530154, 331853 5530150, 331855 5530145, 331857 5530141)").test();}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,String digestAlgorithm,String otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,new ASN1ObjectIdentifier(otherObjectTypeID),new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public void incrementTargetsCountAll(){  targetsCountAll.incrementAndGet();}  }
class C{  @Override protected boolean isSuccessful(final Player player){  return getState() > 0;}  }
class C{  void mutateStaticField(String field){  PurityNode node=PurityGlobalNode.node;  mutated.put(node,field);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public void testFlipBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.flipBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  private static long sublong(String value,int begin_index,int end_index){  String substring=value.substring(begin_index,end_index);  return (substring.length() > 0) ? Long.parseLong(substring) : -1;}  }
class C{  private void processBlockChanges(){synchronized (blockChanges) {    List<BlockChangeMessage> messages=new ArrayList<>(blockChanges);    blockChanges.clear();    Map<Key,Map<BlockVector,BlockChangeMessage>> chunks=new HashMap<>();    for (    BlockChangeMessage message : messages) {      if (message != null) {        Key key=new Key(message.getX() >> 4,message.getZ() >> 4);        if (canSeeChunk(key)) {          Map<BlockVector,BlockChangeMessage> map=chunks.get(key);          if (map == null) {            map=new HashMap<>();            chunks.put(key,map);          }          map.put(new BlockVector(message.getX(),message.getY(),message.getZ()),message);        }      }    }    for (    Map.Entry<Key,Map<BlockVector,BlockChangeMessage>> entry : chunks.entrySet()) {      Key key=entry.getKey();      List<BlockChangeMessage> value=new ArrayList<>(entry.getValue().values());      if (value.size() == 1) {        session.send(value.get(0));      } else       if (value.size() > 1) {        session.send(new MultiBlockChangeMessage(key.getX(),key.getZ(),value));      }    }    List<Message> postMessages=new ArrayList<>(afterBlockChanges);    afterBlockChanges.clear();    postMessages.forEach(null);  }}  }
class C{  @Override public void onConnected(Bundle connectionHint){  mLastLocation=LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);  if (mLastLocation != null) {    mLatitudeText.setText(String.valueOf(mLastLocation.getLatitude()));    mLongitudeText.setText(String.valueOf(mLastLocation.getLongitude()));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrValue;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("class");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("class");  attrValue=districtNode.getNodeValue();  assertEquals("namednodemapSetNamedItemThatExistsAssert","",attrValue);}  }
class C{  @Nullable @Override public final ImageFormat determineFormat(byte[] headerBytes,int headerSize){  Preconditions.checkNotNull(headerBytes);  if (WebpSupportStatus.isWebpHeader(headerBytes,0,headerSize)) {    return getWebpFormat(headerBytes,headerSize);  }  if (isJpegHeader(headerBytes,headerSize)) {    return DefaultImageFormats.JPEG;  }  if (isPngHeader(headerBytes,headerSize)) {    return DefaultImageFormats.PNG;  }  if (isGifHeader(headerBytes,headerSize)) {    return DefaultImageFormats.GIF;  }  if (isBmpHeader(headerBytes,headerSize)) {    return DefaultImageFormats.BMP;  }  return ImageFormat.UNKNOWN;}  }
class C{  public SymbolTableEntryOriginal createSymbolTableEntryOriginal(){  SymbolTableEntryOriginalImpl symbolTableEntryOriginal=new SymbolTableEntryOriginalImpl();  return symbolTableEntryOriginal;}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public TaskDescriptionCompat(String label,Bitmap icon,int colorPrimary){  if ((colorPrimary != 0) && (Color.alpha(colorPrimary) != 255)) {    throw new RuntimeException("A TaskDescription's primary color should be opaque");  }  mLabel=label;  mIcon=icon;  mColorPrimary=colorPrimary;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.464 -0400",hash_original_method="31F26CED2D9DD4AAAFE52ACDE68992E7",hash_generated_method="11FC7D3D554A594833AA979DB176E76F") private int handleX(String value,DoubleMetaphoneResult result,int index){  if (index == 0) {    result.append('S');    index++;  } else {    if (!((index == value.length() - 1) && (contains(value,index - 3,3,"IAU","EAU") || contains(value,index - 2,2,"AU","OU")))) {      result.append("KS");    }    index=contains(value,index + 1,1,"C","X") ? index + 2 : index + 1;  }  return index;}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void openOSM(File file){  osm=new OSM(file.getPath());  LOG.info("Read OSM");}  }
class C{  void initNullKeyForUrl(String url){  initNullKeyForUrlInternal(url,false);}  }
class C{  @VisibleForTesting void overrideDecidedStateForTesting(boolean decidedState){  mDidOverrideDecidedStateForTesting=true;  mDecidedStateForTesting=decidedState;}  }
class C{  private GPOUtils(){}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  try {    NameSpace namespace=callstack.top();    BSHType typeNode=getTypeNode();    Class type=typeNode.getType(callstack,interpreter);    BSHVariableDeclarator[] bvda=getDeclarators();    for (int i=0; i < bvda.length; i++) {      BSHVariableDeclarator dec=bvda[i];      Object value=dec.eval(typeNode,callstack,interpreter);      try {        namespace.setTypedVariable(dec.name,type,value,modifiers);      } catch (      UtilEvalError e) {        throw e.toEvalError(this,callstack);      }    }  } catch (  EvalError e) {    e.reThrow("Typed variable declaration");  }  return Primitive.VOID;}  }
class C{  public static boolean isVisible(Class<?> clazz,ClassLoader classLoader){  if (classLoader == null) {    return true;  }  try {    Class<?> actualClass=classLoader.loadClass(clazz.getName());    return (clazz == actualClass);  } catch (  ClassNotFoundException ex) {    return false;  }}  }
class C{  public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseHeaderElement(buffer,cursor);}  }
class C{  private SnapshotIndexCommit snapshot(SnapshotIndexCommit commit) throws IOException {  SnapshotHolder snapshotHolder=snapshots.get(commit.getGeneration());  if (snapshotHolder == null) {    snapshotHolder=new SnapshotHolder(0);    snapshots.put(commit.getGeneration(),snapshotHolder);  }  snapshotHolder.counter++;  return new OneTimeReleaseSnapshotIndexCommit(this,commit);}  }
class C{  public static boolean[] hexDigitMsb0ToBinary(final char hexDigit){switch (hexDigit) {case '0':    return FFFF.clone();case '1':  return FFFT.clone();case '2':return FFTF.clone();case '3':return FFTT.clone();case '4':return FTFF.clone();case '5':return FTFT.clone();case '6':return FTTF.clone();case '7':return FTTT.clone();case '8':return TFFF.clone();case '9':return TFFT.clone();case 'a':case 'A':return TFTF.clone();case 'b':case 'B':return TFTT.clone();case 'c':case 'C':return TTFF.clone();case 'd':case 'D':return TTFT.clone();case 'e':case 'E':return TTTF.clone();case 'f':case 'F':return TTTT.clone();default :throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");}}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException();  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  public void onMessage(Message message){}  }
class C{  private void add(Geometry geom){  if (geom.isEmpty())   return;  if (geom instanceof Point) {    addPoint(geom.getCoordinate());  } else   if (geom instanceof LineString) {    addLineSegments(geom.getCoordinates());  } else   if (geom instanceof Polygon) {    Polygon poly=(Polygon)geom;    add(poly);  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  @Override public boolean contractorBillNumberChangeRequired(final EgBillregister bill,final WorkOrder workOrder,final CFinancialYear financialYear){  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:    setAnnotationList((AnnotationList)null);  return;case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS:getDeclaredModifiers().clear();return;}super.eUnset(featureID);}  }
class C{  public int alloc(final RWStore store,final int size,final IAllocationContext context){  try {    if (size <= 0)     throw new IllegalArgumentException("Allocate requires positive size, got: " + size);    if (size > m_size)     throw new IllegalArgumentException("FixedAllocator with slots of " + m_size + " bytes requested allocation for "+ size+ " bytes");    if (m_freeBits == 0) {      throw new IllegalStateException("Request to allocate from " + m_size + "byte slot FixedAllocator with zero bits free - should not be on the Free List");    }    int addr=-1;    if (m_size <= m_store.cSmallSlot) {      return allocFromIndex(size);    }    final Iterator<AllocBlock> iter=m_allocBlocks.iterator();    int count=-1;    while (addr == -1 && iter.hasNext()) {      count++;      final AllocBlock block=iter.next();      checkBlock(block);      addr=block.alloc(m_size);    }    if (addr != -1) {      addr+=3;      if (--m_freeBits == 0) {        if (s_islogTrace)         log.trace("Remove from free list");        removeFromFreeList();        if (m_freeList.size() > 0) {          if (s_islogDebug) {            final FixedAllocator nxt=(FixedAllocator)m_freeList.get(0);            log.debug("Freelist head: " + nxt.getSummaryStats());          }        }      }      addr+=(count * 32 * m_bitSize);      final int value=-((m_index << RWStore.OFFSET_BITS) + addr);      if (m_statsBucket != null) {        m_statsBucket.allocate(size);      }      return value;    } else {      StringBuilder sb=new StringBuilder();      sb.append("FixedAllocator returning null address, with freeBits: " + m_freeBits + "\n");      for (      AllocBlock ab : m_allocBlocks) {        sb.append(ab.show() + "\n");      }      log.error(sb);      return 0;    }  }  finally {    if (s_islogDebug)     checkBits();  }}  }
class C{  private static String generateIB(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String wBit,final IOperandTreeNode rootNodeOfRegisterList){  final String startAddress=environment.getNextVariableString();  final String endAddress=environment.getNextVariableString();  final Integer numberOfSetBits=rootNodeOfRegisterList.getChildren().size();  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,dw,String.valueOf(4),dw,startAddress));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,dw,String.valueOf(numberOfSetBits * 4),dw,endAddress));  if (wBit.equals("2")) {    instructions.add(ReilHelpers.createStr(baseOffset++,dw,endAddress,dw,registerNodeValue));  }  return startAddress;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.267 -0500",hash_original_method="41C1A121517CD12760C521BBD9AF1967",hash_generated_method="AF18146D80DB438DD0A2F77C34F0CB67") public void drawRoundRect(RectF rect,float rx,float ry,Paint paint){  if (rect == null) {    throw new NullPointerException();  }  native_drawRoundRect(mNativeCanvas,rect,rx,ry,paint.mNativePaint);}  }
class C{  private static String prettyPrintObject(LzPersistentBaseImpl<? extends GenericPK> object,PrettyPrintOptions options){  if (options != null && options.getStyle() == ReferenceStyle.NAME) {    if (options.isExplicitType()) {      return PrettyPrintConstant.IDENTIFIER_TAG + AnalysisScope.AXIS + ":"+ PrettyPrintConstant.OPEN_IDENT+ object.getName()+ PrettyPrintConstant.CLOSE_IDENT;    } else {      return PrettyPrintConstant.OPEN_IDENT + object.getName() + PrettyPrintConstant.CLOSE_IDENT;    }  } else {    return PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + object.getOid()+ PrettyPrintConstant.CLOSE_IDENT;  }}  }
class C{  public AbstractPreferencePagePresenter(String title,String category,ImageResource icon){  this.title=title;  this.category=category;  this.icon=icon;}  }
class C{  public static void inexistentField(String targetFieldName,String targetClassName){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorException5,targetFieldName,targetClassName));}  }
class C{  public static String displaySymbolTable(LocalVariableMap symbolTable){  StringBuilder sb=new StringBuilder();  Set<String> keys=symbolTable.keySet();  if (keys.isEmpty()) {    sb.append("None\n");  } else {    int count=0;    for (    String key : keys) {      sb.append("  [");      sb.append(++count);      sb.append("]");      sb.append(" (");      sb.append(determineOutputTypeAsString(symbolTable,key));      sb.append(") ");      sb.append(key);      sb.append(": ");      sb.append(symbolTable.get(key));      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public ReilBlock(final List<ReilInstruction> instructions){  Preconditions.checkNotNull(instructions,"Error: Instructions argument can not be null");  for (  final ReilInstruction instruction : instructions) {    Preconditions.checkNotNull(instruction,"Error: Instructions list contains a null-element");  }  m_instructions=new ArrayList<ReilInstruction>(instructions);}  }
class C{  public void assertValidRange(int range[],String sname) throws SettingsError {  if (range.length != 2) {    throw new SettingsError("Range setting " + getFullPropertyName(sname) + " should contain only two comma separated integer values");  }  if (range[0] > range[1]) {    throw new SettingsError("Range setting's " + getFullPropertyName(sname) + " first value should be smaller or equal to second value");  }}  }
class C{  public GenericValue findByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {  if (primaryKey == null) {    return null;  }  GenericValue genericValue=GenericValue.create(primaryKey);  genericDAO.select(genericValue);  return genericValue;}  }
class C{  public static boolean hideSoftInput(Activity activity){  if (activity.getCurrentFocus() != null) {    InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);    return imm.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),0);  }  return false;}  }
class C{  public TeamCommand(Server server){  super(server,"t","Allows players on the same team to chat with each other in the game.");}  }
class C{  public T caseNamespace_(Namespace_ object){  return null;}  }
class C{  public Portfolio findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Portfolio instance=entityManager.find(Portfolio.class,id);    instance.getPortfolioAccounts().size();    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public void unlock(long stamp){  long a=stamp & ABITS, m, s;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L)     break; else     if (m == WBIT) {      if (a != m)       break;      U.putLongVolatile(this,STATE,(s+=WBIT) == 0L ? ORIGIN : s);      if ((h=whead) != null && h.status != 0)       release(h);      return;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return;  }  throw new IllegalMonitorStateException();}  }
class C{  public void remove(int start,int end){  checkWidget();  this.table.remove(start,end);}  }
class C{  private void defineInternalFrameMenuButtons(UIDefaults d){  String p="InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"";  String c=PAINTER_PREFIX + "TitlePaneMenuButtonPainter";  d.put(p + ".WindowNotFocused",new TitlePaneMenuButtonWindowNotFocusedState());  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Enabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED));  d.put(p + "[Disabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_DISABLED));  d.put(p + "[MouseOver].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER));  d.put(p + "[Pressed].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED));  d.put(p + "[Enabled+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER_WINDOWNOTFOCUSED));  d.put(p + "[Pressed+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED_WINDOWNOTFOCUSED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",19,18));}  }
class C{  public void sourcesAreProperForm(final SteadyStateEvolutionState state,final BreedingPipeline[] breedingPipelines){  for (int x=0; x < breedingPipelines.length; x++) {    ((SteadyStateBSourceForm)(breedingPipelines[x])).sourcesAreProperForm(state);  }}  }
class C{  @SuppressFBWarnings("DM_EXIT") @VisibleForTesting void prepareNativeLibraries(){  try {    BrowserStartupController.get(getApplicationContext(),LibraryProcessType.PROCESS_BROWSER).startBrowserProcessesSync(false);  } catch (  ProcessInitException e) {    Log.e(TAG,"ProcessInitException while starting the browser process");    System.exit(-1);  }}  }
class C{  public int numKeys(){  int result=basic.numKeys();  for (  DeterministicKeyChain chain : chains)   result+=chain.numKeys();  return result;}  }
class C{  private void requestExpressionFocus(){  currentExpression.requestFocusInWindow();}  }
class C{  public boolean isSignedSet(){  if (signed == null)   return false; else   return true;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public String addAndStartProcess(ClusterProcess clusterProcess){  return addAndStartProcess(clusterProcess,clusterConfig.getTimeout());}  }
class C{  SAXParserMMImpl(SAXParserFactoryMMImpl spf,Hashtable features) throws SAXException {  this(spf,features,false);}  }
class C{  public ComponentPrinter(PrintableComponent... components){  this.components=components;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue((V)val));}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  public NotificationData clone(){  NotificationData result=new NotificationData();  return result;}  }
class C{  private static void initTestFile(File blah,long size) throws Exception {  if (blah.exists())   blah.delete();  FileOutputStream fos=new FileOutputStream(blah);  BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(fos,"8859_1"));  for (int i=0; i < size; i++) {    awriter.write("e");  }  awriter.flush();  awriter.close();}  }
class C{  protected boolean useFastVectorHighlighter(SolrParams params,SchemaField schemaField){  boolean useFvhParam=params.getFieldBool(schemaField.getName(),HighlightParams.USE_FVH,false);  if (!useFvhParam)   return false;  boolean termPosOff=schemaField.storeTermPositions() && schemaField.storeTermOffsets();  if (!termPosOff) {    log.warn("Solr will use the standard Highlighter instead of FastVectorHighlighter because the {} field " + "does not store TermVectors with TermPositions and TermOffsets.",schemaField.getName());  }  return termPosOff;}  }
class C{  public void write(char cbuf[],int off,int len){  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  buf.append(cbuf,off,len);}  }
class C{  @Override final public Constant<E> clone(){  return this;}  }
class C{  private void updateContact(int index){  Contact contact=contacts.get(index);  Intent intent=new Intent(this,ViewActivity.class);  intent.putExtra("CONTACT",contact);  startActivity(intent);}  }
class C{  private List<IsilonNetworkPool> discoverNetworkPools(StorageSystem storageSystem) throws IsilonCollectionException {  List<IsilonNetworkPool> isilonNetworkPoolList=new ArrayList<IsilonNetworkPool>();  URI storageSystemId=storageSystem.getId();  _log.info("discoverNetworkPools for storage system {} - start",storageSystemId);  List<IsilonNetworkPool> isilonNetworkPoolsTemp=null;  try {    if (VersionChecker.verifyVersionDetails(ONEFS_V8,storageSystem.getFirmwareVersion()) >= 0) {      _log.info("Isilon release version {} and storagesystem label {}",storageSystem.getFirmwareVersion(),storageSystem.getLabel());      IsilonApi isilonApi=getIsilonDevice(storageSystem);      isilonNetworkPoolsTemp=isilonApi.getNetworkPools(null);      if (isilonNetworkPoolsTemp != null) {        isilonNetworkPoolList.addAll(isilonNetworkPoolsTemp);      }    } else {      IsilonSshApi sshDmApi=new IsilonSshApi();      sshDmApi.setConnParams(storageSystem.getIpAddress(),storageSystem.getUsername(),storageSystem.getPassword());      Map<String,List<String>> networkPools=sshDmApi.getNetworkPools();      List<String> smartconnects=null;      IsilonNetworkPool isiNetworkPool=null;      for (      Map.Entry<String,List<String>> networkpool : networkPools.entrySet()) {        smartconnects=networkpool.getValue();        if (smartconnects != null) {          for (          String smartconnect : smartconnects) {            isiNetworkPool=new IsilonNetworkPool();            isiNetworkPool.setAccess_zone(networkpool.getKey());            isiNetworkPool.setSc_dns_zone(smartconnect);            isilonNetworkPoolList.add(isiNetworkPool);          }        }      }    }  } catch (  Exception e) {    _log.error("discover of NetworkPools is failed. %s",e.getMessage());  }  return isilonNetworkPoolList;}  }
class C{  void callbackJavascript(final String instanceId,final String callback,final Object data,boolean keepAlive){  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(callback) || mJSHandler == null) {    return;  }  addJSTask(METHOD_CALLBACK,instanceId,callback,data,keepAlive);  sendMessage(instanceId,WXJSBridgeMsgType.CALL_JS_BATCH);}  }
class C{  public Aspects findAspectsByClassName(String aspectClassName) throws PersistentModelException {  try {    if ("org.trade.persistent.dao.Strategy".equals(aspectClassName)) {      List<Strategy> items=m_strategyHome.findAll();      Aspects aspects=new Aspects();      for (      Object item : items) {        aspects.add((Aspect)item);      }      aspects.setDirty(false);      return aspects;    } else     if ("org.trade.persistent.dao.Portfolio".equals(aspectClassName)) {      List<Portfolio> items=m_portfolioHome.findAll();      Aspects aspects=new Aspects();      for (      Object item : items) {        aspects.add((Aspect)item);      }      aspects.setDirty(false);      return aspects;    } else {      return m_aspectHome.findByClassName(aspectClassName);    }  } catch (  Exception ex) {    throw new PersistentModelException("Error finding Aspects: " + ex.getMessage());  }}  }
class C{  public Builder collapseKey(String value){  collapseKey=value;  return this;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE_ID;case 3:return AUTH_SCHEME;case 4:return AUTH_CHALLENGE_RESPONSE;default :return null;}}  }
class C{  public long optLong(int index){  return optLong(index,0);}  }
class C{  public Set<Map.Entry<String,JsonElement>> entrySet(){  return Collections.unmodifiableSet(members.entrySet());}  }
class C{  public JSONObject put(String key,Collection<?> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public static IgniteState state(){  return state(null);}  }
class C{  public static void deleteDirectory(final File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    final String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public GeneralRuntimeException(){  super();}  }
class C{  private ClassControlFlowGraph computeCCFG(String className){  if (rawCFGs.get(className) == null)   throw new IllegalArgumentException("can't compute CCFG, don't know CFGs for class " + className);  ClassCallGraph ccg=new ClassCallGraph(classLoader,className);  if (Properties.WRITE_CFG)   ccg.toDot();  ClassControlFlowGraph ccfg=new ClassControlFlowGraph(ccg);  if (Properties.WRITE_CFG)   ccfg.toDot();  return ccfg;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isPingPongSupported(){  return clientVersion >= Pong.MIN_PROTOCOL_VERSION;}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.ENTITY__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  SelectableLabel(String text){  super(text);  setEditable(false);  setBorder(null);  setOpaque(false);  JLabel tmp=new JLabel();  setFont(tmp.getFont());}  }
class C{  protected void sequence_PatternCharacter_Term(ISerializationContext context,PatternCharacter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public PerfDataBuffer(VmIdentifier vmid) throws MonitorException {  try {    ByteBuffer bb=perf.attach(vmid.getLocalVmId(),vmid.getMode());    createPerfDataBuffer(bb,vmid.getLocalVmId());  } catch (  IllegalArgumentException e) {    try {      String filename=PerfDataFile.getTempDirectory() + PerfDataFile.dirNamePrefix + Integer.toString(vmid.getLocalVmId());      File f=new File(filename);      FileChannel fc=new RandomAccessFile(f,"r").getChannel();      ByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0L,(int)fc.size());      fc.close();      createPerfDataBuffer(bb,vmid.getLocalVmId());    } catch (    FileNotFoundException e2) {      throw new MonitorException(vmid.getLocalVmId() + " not found",e);    }catch (    IOException e2) {      throw new MonitorException("Could not map 1.4.1 file for " + vmid.getLocalVmId(),e2);    }  }catch (  IOException e) {    throw new MonitorException("Could not attach to " + vmid.getLocalVmId(),e);  }}  }
class C{  public void print(CharSequence text) throws IOException {  int size=text.length();  int pos=0;  for (int i=0; i < size; i++) {    if (text.charAt(i) == '\n') {      write(text.subSequence(pos,size),i - pos + 1);      pos=i + 1;      atStartOfLine=true;    }  }  write(text.subSequence(pos,size),size - pos);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.235 -0500",hash_original_method="469514DB0DA90571D02A531A0FA63D6F",hash_generated_method="A9605FE51958909BD225DA582AF5352D") public final long readLong() throws IOException {  readFully(scratch,0,SizeOf.LONG);  return Memory.peekLong(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isTimeout(){  return m_timeout;}  }
class C{  public boolean isWorking(){  return working;}  }
class C{  public static Map<String,List<User>> createRoleMap(List<User> users){  Map<String,List<User>> roles=new HashMap<String,List<User>>();  for (  User user : users) {    for (    String role : user.getRoles()) {      List<User> usersForRole;      if (roles.containsKey(role)) {        usersForRole=roles.get(role);      } else {        usersForRole=new ArrayList<User>();      }      if (!usersForRole.contains(user)) {        usersForRole.add(user);      }      roles.put(role,usersForRole);    }  }  return roles;}  }
class C{  void invalidate(){  m_row=-1;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public double toDouble(){  if (m_length == 0)   return Double.NaN;  int i;  char c;  String valueString=fsb().getString(m_start,m_length);  for (i=0; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i == m_length)   return Double.NaN;  if (valueString.charAt(i) == '-')   i++;  for (; i < m_length; i++) {    c=valueString.charAt(i);    if (c != '.' && (c < '0' || c > '9'))     break;  }  for (; i < m_length; i++)   if (!XMLCharacterRecognizer.isWhiteSpace(valueString.charAt(i)))   break;  if (i != m_length)   return Double.NaN;  try {    return new Double(valueString).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  @NonNull public List<TrayItem> queryProviderSafe(@NonNull final Uri uri){  try {    return queryProvider(uri);  } catch (  TrayException e) {    return new ArrayList<>();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PICTURE_CACHE'";  db.execSQL(sql);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.174 -0400",hash_original_method="5A37259F0EF0B23F2917794B45619826",hash_generated_method="75DEA827C7EB00AC33348C52A8F99A33") protected File[] filterDirectoryContents(File directory,int depth,File[] files) throws IOException {  return files;}  }
class C{  static boolean isInstanceOfNotEqualConditionEvaluator(Object o){  return o instanceof RangeJunction.NotEqualConditionEvaluator;}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.f;  } else   if (lSpeed == 1) {    return -1.f;  } else {    return ((lSpeed - 1) / 126.f);  }}  }
class C{  public Geo cross(Geo b){  return cross(b,new Geo());}  }
class C{  public String globalInfo(){  return "Class for running an arbitrary clusterer on data that has been passed " + "through an arbitrary filter. Like the clusterer, the structure of the filter " + "is based exclusively on the training data and test instances will be processed "+ "by the filter without changing their structure.";}  }
class C{  public NearestNeighbour(int k,boolean weighted,DistanceMetric distanceMetric,VectorCollectionFactory<VecPaired<Vec,Double>> vcf){  this.mode=null;  this.vcf=vcf;  this.k=k;  this.weighted=weighted;  this.distanceMetric=distanceMetric;}  }
class C{  public StatusDetail withDetail(final String key,final String value){  final LinkedHashMap<String,String> newDetails=new LinkedHashMap<>(details);  newDetails.put(key,value);  return statusDetail(name,status,message,newDetails);}  }
class C{  public IntIteratorSpliterator(PrimitiveIterator.OfInt iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public static DetailPostWebFragment newInstance(String param1,String param2){  DetailPostWebFragment fragment=new DetailPostWebFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public boolean hasActiveShield(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  if (isShutDown() || (getCrew().isKoThisRound() || getCrew().isUnconscious())) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && m.curMode().equals(MiscType.S_ACTIVE_SHIELD)) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  public static void notifyNativeGestureStarted(View view,MotionEvent event){  RootViewUtil.getRootView(view).onChildStartedNativeGesture(event);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, ClassNotFoundException {  s.defaultReadObject();  thisX500Name=new X500Name(name);}  }
class C{  public static boolean gitLocalConfig(final AtomicReference<String> path) throws IOException {  return gitLocalConfig(Environment.getCurrentDirectory(),path);}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  public static final double show(Window owner){  ApplyTorqueDialog atd=new ApplyTorqueDialog(owner);  atd.setLocationRelativeTo(owner);  atd.setVisible(true);  if (!atd.canceled) {    double t=atd.torquePanel.getTorque();    return t;  }  return 0.0;}  }
class C{  public final void sort(){  flushLocal();  ((SortTODSharedDeque)queue).sort();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    int image2Min=(int)image2.getMinimumValue();    int image2Max=(int)image2.getMaximumValue();    int image2Range=image2Max - image2Min + 1;    long[][] contingencyTable=new long[image1Range][image2Range];    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          contingencyTable[(int)(x - image1Min)][(int)(y - image2Min)]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    DecimalFormat df=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="CROSS-TABULATION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    String contingency="\t\tImage 1\nImage 2";    for (int a=0; a < image1Range; a++) {      contingency+="\t" + (a + image1Min);    }    contingency+="\n";    for (int b=0; b < image2Range; b++) {      contingency+=(b + image2Min);      for (int a=0; a < image1Range; a++) {        contingency+="\t" + df.format(contingencyTable[a][b]);      }      contingency+="\n";    }    retstr+=contingency;    returnData(retstr);    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void remove(String key){  map.remove(key);}  }
class C{  public static Map<String,Object> findProductById(DispatchContext ctx,Map<String,Object> context){  Delegator delegator=ctx.getDelegator();  String idToFind=(String)context.get("idToFind");  String goodIdentificationTypeId=(String)context.get("goodIdentificationTypeId");  String searchProductFirstContext=(String)context.get("searchProductFirst");  String searchAllIdContext=(String)context.get("searchAllId");  boolean searchProductFirst=UtilValidate.isNotEmpty(searchProductFirstContext) && "N".equals(searchProductFirstContext) ? false : true;  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;  GenericValue product=null;  List<GenericValue> productsFound=null;  try {    productsFound=ProductWorker.findProductsById(delegator,idToFind,goodIdentificationTypeId,searchProductFirst,searchAllId);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isNotEmpty(productsFound)) {    product=EntityUtil.getFirst(productsFound);    productsFound.remove(0);  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("product",product);  result.put("productsList",productsFound);  return result;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeDouble(knnDistance);}  }
class C{  public Number parse(String text,ParsePosition parsePosition){  String s=text.substring(parsePosition.getIndex());  long tot=0, max=0;  char ch[]=s.toUpperCase().toCharArray();  int i, p;  for (p=ch.length - 1; p >= 0; p--) {    for (i=0; i < syms.length; i++) {      if (syms[i].symbol == ch[p]) {        if (syms[i].value >= max)         tot+=(max=syms[i].value); else         tot-=syms[i].value;      }    }  }  parsePosition.setIndex(s.length());  return new Long(tot);}  }
class C{  public static String encodeWithinQuery(final String unescaped) throws URIException {  return encodeWithinQuery(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  protected void removeValues() throws Exception {  int i, j;  int flag, count;  count=m_vals.size();  j=0;  for (i=0; i < count; i++) {    flag=m_editFlags.get(j);    if ((flag == FolderEditFlag.NONE) || (flag == FolderEditFlag.UPDATE)) {      flag=FolderEditFlag.REMOVE;      m_editFlags.set(j,flag);      j=j + 1;    } else     if (flag == FolderEditFlag.NEW) {      m_editFlags.remove(j);      m_vals.remove(j);    }  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof AttributeSet) {    AttributeSet attrs=(AttributeSet)obj;    return isEqual(attrs);  }  return false;}  }
class C{  protected void reset(int linksSize,int varArraySize){  _frameTop=0;  _linksTop=0;  if (_links == null) {    _links=new int[linksSize];  }  _links[_linksTop++]=0;  _stackFrames=new XObject[varArraySize];}  }
class C{  public SimpleDateFormat(){  super();}  }
class C{  private static double[][] powerSymmMatrix(double[][] inMatrix,double power){  EigenValueDecompositionSymm eigenDeco=new EigenValueDecompositionSymm(inMatrix);  int m=Matrix.getNumOfRows(inMatrix);  double[][] eigenVectors=eigenDeco.getV();  double[] eigenValues=eigenDeco.getRealEigenvalues();  for (int i=0; i < m; ++i) {    eigenValues[i]=Math.pow(eigenValues[i],power);  }  return (Matrix.mult(Matrix.mult(eigenVectors,Matrix.diag(eigenValues)),Matrix.transpose(eigenVectors)));}  }
class C{  public boolean isValid(){  if (!_parameters.hasParameter("required") && !_parameters.hasParameter("if_available")) {    _log.warn("One of 'required' or 'if_available' parameters must be present.");    return false;  }  if (!_parameters.hasParameter("mode") || !"fetch_request".equals(_parameters.getParameterValue("mode"))) {    _log.warn("Invalid mode value in fetch_request: " + _parameters.getParameterValue("mode"));    return false;  }  if (_parameters.hasParameter("required")) {    String[] aliases=_parameters.getParameterValue("required").split(",");    for (int i=0; i < aliases.length; i++) {      String alias=aliases[i];      if (!_parameters.hasParameter("type." + alias)) {        _log.warn("Type missing for attribute alias: " + alias);        return false;      }      if (!checkCount(alias))       return false;    }  }  if (_parameters.hasParameter("if_available")) {    String[] aliases=_parameters.getParameterValue("if_available").split(",");    for (int i=0; i < aliases.length; i++) {      String alias=aliases[i];      if (!_parameters.hasParameter("type." + alias)) {        _log.warn("Type missing for attribute alias: " + alias);        return false;      }      if (!checkCount(alias))       return false;    }  }  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    String paramName=((Parameter)it.next()).getKey();    if (!paramName.equals("mode") && !paramName.startsWith("type.") && !paramName.startsWith("count.")&& !paramName.equals("required")&& !paramName.equals("if_available")&& !paramName.equals("update_url")) {      _log.warn("Invalid parameter name in fetch request: " + paramName);    }  }  return true;}  }
class C{  private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  @RequestMapping(value="/foos/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteFoo(@PathVariable Long id){  log.debug("REST request to delete Foo : {}",id);  fooRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("foo",id.toString())).build();}  }
class C{  private static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  protected RrdNioBackend(String path,boolean readOnly,int syncPeriod) throws IOException {  super(path,readOnly);  try {    mapFile();    if (!readOnly) {      fileSyncTimer.schedule(syncTask,syncPeriod * 1000L,syncPeriod * 1000L);    }  } catch (  final IOException ioe) {    super.close();    throw ioe;  }}  }
class C{  private static Device findAvailableDevice(){  Device device=Display.getCurrent();  if (device == null) {    device=Display.getDefault();  }  if (device == null)   throw new IllegalStateException("No display available");  return device;}  }
class C{  public static final int max(int a,int b,int c){  return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public void updateOwners(Property property,BasicProperty basicProp,Address ownerAddress){  int orderNo=0;  basicProp.getPropertyOwnerInfo().clear();  for (  final PropertyOwnerInfo ownerInfo : property.getBasicProperty().getPropertyOwnerInfoProxy()) {    if (ownerInfo != null) {      User user=null;      if (StringUtils.isNotBlank(ownerInfo.getOwner().getAadhaarNumber()))       user=userService.getUserByAadhaarNumber(ownerInfo.getOwner().getAadhaarNumber()); else       user=(User)find("From User where name = ? and mobileNumber = ? and gender = ? ",ownerInfo.getOwner().getName(),ownerInfo.getOwner().getMobileNumber(),ownerInfo.getOwner().getGender());      if (user == null) {        orderNo++;        final Citizen newOwner=new Citizen();        newOwner.setAadhaarNumber(ownerInfo.getOwner().getAadhaarNumber());        newOwner.setMobileNumber(ownerInfo.getOwner().getMobileNumber());        newOwner.setEmailId(ownerInfo.getOwner().getEmailId());        newOwner.setGender(ownerInfo.getOwner().getGender());        newOwner.setGuardian(ownerInfo.getOwner().getGuardian());        newOwner.setGuardianRelation(ownerInfo.getOwner().getGuardianRelation());        newOwner.setName(ownerInfo.getOwner().getName());        newOwner.setSalutation(ownerInfo.getOwner().getSalutation());        newOwner.setPassword("NOT SET");        newOwner.setUsername(propertyTaxUtil.generateUserName(ownerInfo.getOwner().getName()));        userService.createUser(newOwner);        ownerInfo.setBasicProperty(basicProp);        ownerInfo.setOwner(newOwner);        ownerInfo.setOrderNo(orderNo);        LOGGER.debug("createOwners: OwnerAddress: " + ownerAddress);        ownerInfo.getOwner().addAddress(ownerAddress);      } else {        user.setAadhaarNumber(ownerInfo.getOwner().getAadhaarNumber());        user.setMobileNumber(ownerInfo.getOwner().getMobileNumber());        user.setName(ownerInfo.getOwner().getName());        user.setGender(ownerInfo.getOwner().getGender());        user.setEmailId(ownerInfo.getOwner().getEmailId());        user.setGuardian(ownerInfo.getOwner().getGuardian());        user.setGuardianRelation(ownerInfo.getOwner().getGuardianRelation());        ownerInfo.setOwner(user);        ownerInfo.setBasicProperty(basicProp);      }    }    basicProp.addPropertyOwners(ownerInfo);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isPicture());}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EXIT_EVENT;}  }
class C{  public String globalInfo(){  return "Class for visualizing class probability estimates.\n\n" + "For more information, see\n\n" + getTechnicalInformation().toString();}  }
class C{  public void write(Out out,int value) throws IOException {  int code=codes[value];  int bitCount=30 - Integer.numberOfLeadingZeros(code);  Node n=tree;  for (int i=bitCount; i >= 0; i--) {    boolean goRight=((code >> i) & 1) == 1;    int prob=(int)((long)MAX_PROBABILITY * n.right.frequency / n.frequency);    out.writeBit(goRight,prob);    n=goRight ? n.right : n.left;  }}  }
class C{  public TreeRTGAcaciaAbyssinica(){  super();  this.logBlock=Blocks.LOG2.getDefaultState();  this.leavesBlock=Blocks.LEAVES2.getDefaultState();  this.trunkSize=12;}  }
class C{  public void ifPresent(IntConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4});}  }
class C{  private void writeTreeLikelihood(String tag,String id,int num,PartitionData partition,XMLWriter writer){  PartitionSubstitutionModel substModel=partition.getPartitionSubstitutionModel();  PartitionTreeModel treeModel=partition.getPartitionTreeModel();  PartitionClockModel clockModel=partition.getPartitionClockModel();  writer.writeComment("Likelihood for tree given sequence data");  String prefix;  if (num > 0) {    prefix=partition.getPrefix() + substModel.getPrefixCodon(num);  } else {    prefix=partition.getPrefix();  }  String idString=prefix + id;  Attribute[] attributes;  if (tag.equals(MarkovJumpsTreeLikelihoodParser.MARKOV_JUMP_TREE_LIKELIHOOD)) {    AncestralStatesComponentOptions ancestralStatesOptions=(AncestralStatesComponentOptions)options.getComponentOptions(AncestralStatesComponentOptions.class);    boolean saveCompleteHistory=ancestralStatesOptions.isCompleteHistoryLogging(partition);    attributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,idString),new Attribute.Default<Boolean>(TreeLikelihoodParser.USE_AMBIGUITIES,substModel.isUseAmbiguitiesTreeLikelihood()),new Attribute.Default<Boolean>(MarkovJumpsTreeLikelihoodParser.USE_UNIFORMIZATION,true),new Attribute.Default<Integer>(MarkovJumpsTreeLikelihoodParser.NUMBER_OF_SIMULANTS,1),new Attribute.Default<String>(AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG_NAME,prefix + AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG),new Attribute.Default<String>(MarkovJumpsTreeLikelihoodParser.SAVE_HISTORY,saveCompleteHistory ? "true" : "false")};  } else   if (tag.equals(TreeLikelihoodParser.ANCESTRAL_TREE_LIKELIHOOD)) {    attributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,idString),new Attribute.Default<Boolean>(TreeLikelihoodParser.USE_AMBIGUITIES,substModel.isUseAmbiguitiesTreeLikelihood()),new Attribute.Default<String>(AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG_NAME,prefix + AncestralStateTreeLikelihoodParser.RECONSTRUCTION_TAG)};  } else {    attributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,idString),new Attribute.Default<Boolean>(TreeLikelihoodParser.USE_AMBIGUITIES,substModel.isUseAmbiguitiesTreeLikelihood())};  }  writer.writeOpenTag(tag,attributes);  if (!options.samplePriorOnly) {    if (num > 0) {      writeCodonPatternsRef(prefix,num,substModel.getCodonPartitionCount(),writer);    } else {      writer.writeIDref(SitePatternsParser.PATTERNS,prefix + SitePatternsParser.PATTERNS);    }  } else {    writer.writeIDref(AlignmentParser.ALIGNMENT,partition.getAlignment().getId());  }  writer.writeIDref(TreeModel.TREE_MODEL,treeModel.getPrefix() + TreeModel.TREE_MODEL);  if (num > 0) {    writer.writeIDref(GammaSiteModel.SITE_MODEL,substModel.getPrefix(num) + SiteModel.SITE_MODEL);  } else {    writer.writeIDref(GammaSiteModel.SITE_MODEL,substModel.getPrefix() + SiteModel.SITE_MODEL);  }  ClockModelGenerator.writeBranchRatesModelRef(clockModel,writer);  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_TREE_LIKELIHOOD,partition,prefix,writer);  writer.writeCloseTag(tag);}  }
class C{  private static void sift(final int[] primary,final int[] names,final int left,final int right){  int currentLeft;  final int primaryTMP;  final int namesTMP;  int childL;  currentLeft=left;  primaryTMP=primary[currentLeft];  namesTMP=names[currentLeft];  childL=2 * left + 1;  if ((childL < right) && (primary[childL] < primary[childL + 1])) {    childL+=1;  }  while ((childL <= right) && (primaryTMP < primary[childL])) {    primary[currentLeft]=primary[childL];    names[currentLeft]=names[childL];    currentLeft=childL;    childL=2 * childL + 1;    if ((childL < right) && (primary[childL] < primary[childL + 1])) {      childL+=1;    }  }  primary[currentLeft]=primaryTMP;  names[currentLeft]=namesTMP;}  }
class C{  public static cuComplex cuCmul(cuComplex x,cuComplex y){  cuComplex prod;  prod=cuCmplx((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)),(cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y)));  return prod;}  }
class C{  public View onContentViewCreated(View contentView){  ViewGroup mainView=(ViewGroup)activity.getLayoutInflater().inflate(layoutId,null);  mainView.addView(contentView,0);  return mainView;}  }
class C{  public static KeyPair load(File certificateFile,File privateKeyFile,String privateKeyPassword) throws IOException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException, KeyStoreException {  Cert cert=Cert.load(certificateFile);  PrivKey privKey=PrivKey.loadFromKeyStore(privateKeyFile,privateKeyPassword);  return new KeyPair(cert,privKey);}  }
class C{  public void addPrivilegedService(Class<? extends Service> serviceType){  super.addPrivilegedService(serviceType);}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  public void startTransition(long durationMillis){  mFrom=0;  mTo=255;  mAlpha=0;  mDuration=mOriginalDuration=durationMillis;  mReverse=false;  mTransitionState=TRANSITION_STARTING;  invalidateSelf();}  }
class C{  private void drawXTickMarks(Graphics g){  Rectangle plotRect=getPlotRect();  int yPos=plotRect.y + plotRect.height;  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  for (double d=0.0; d <= 1.0; d+=0.1) {    int xPos=getXPos(d);    g.setColor(boundaryColor);    g.drawLine(xPos,yPos,xPos,yPos - 10);    g.drawString(nf.format(d),xPos - 3,yPos + 12);  }}  }
class C{  private static String buildToolTip(final ZyLabelContent content){  return HtmlGenerator.getHtml(content,MONOSPACE_FONT,true);}  }
class C{  public static double convertFeetToMeters(double feet){  return (feet / METERS_TO_FEET);}  }
class C{  public static void appendUnpaddedInteger(StringBuffer buf,int value){  if (value < 0) {    buf.append('-');    if (value != Integer.MIN_VALUE) {      value=-value;    } else {      buf.append("" + -(long)Integer.MIN_VALUE);      return;    }  }  if (value < 10) {    buf.append((char)(value + '0'));  } else   if (value < 100) {    int d=((value + 1) * 13421772) >> 27;    buf.append((char)(d + '0'));    buf.append((char)(value - (d << 3) - (d << 1) + '0'));  } else {    buf.append(Integer.toString(value));  }}  }
class C{  public boolean isConstant(){  return constant;}  }
class C{  public void write(byte[] buf) throws IOException {  write(buf,0,buf.length);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes){  encode3to4(threeBytes,0,numSigBytes,b4,0);  return b4;}  }
class C{  public void closeFile(){  closeFile(true);}  }
class C{  public void updateStatus(JobContext jobContext){  try {    if (_status == JobStatus.SUCCESS) {      s_logger.debug("Calling task completer for successful job");      _taskCompleter.ready(jobContext.getDbClient());    } else     if (_status == JobStatus.FAILED) {      s_logger.debug("Calling task completer for failed job");      ServiceError error=DeviceControllerErrors.vplex.cacheInvalidateJobFailed(_errorDescription);      _taskCompleter.error(jobContext.getDbClient(),error);    }  } catch (  Exception e) {    s_logger.error("Problem while trying to update status",e);  }}  }
class C{  private void cancelScrollFeedback(){  removeMessages(SCROLL_FEEDBACK);}  }
class C{  public final void actionDelete() throws BasicException {  saveData();  if (canDeleteData()) {    Object obj=getCurrentElement();    int iIndex=getIndex();    int iCount=m_bd.getSize();    if (iIndex >= 0 && iIndex < iCount) {      m_iState=ST_DELETE;      m_editorrecord.writeValueDelete(obj);      m_Dirty.setDirty(true);      fireStateUpdate();    }  }}  }
class C{  public QueryInvalidException(String msg){  super(msg);}  }
class C{  public static Timestamp toTimestamp(String string){  if (string == null)   return null; else   try {    return Timestamp.valueOf(string);  } catch (  Throwable t) {    return null;  }}  }
class C{  public boolean hasNext(){  return (current != null);}  }
class C{  @Override public long skip(long n) throws IOException {  if (n <= 0) {    return n;  }  long skipLen=0;  while (n > 0) {    long sublen=Math.min(n,_readLength - _readOffset);    if (sublen > 0) {      _readOffset+=sublen;      skipLen+=sublen;      n-=sublen;    } else {      if (_source.hasSkip()) {        _readOffset=_readLength=0;        long sourceSkipped=_source.skip(n);        if (sourceSkipped <= 0) {          return skipLen;        } else {          _position+=sourceSkipped;          skipLen+=sourceSkipped;          n-=sourceSkipped;        }      } else       if (!readBuffer()) {        return skipLen;      }    }  }  return skipLen;}  }
class C{  @Override public double op(double z){  z=(z - average) / sigma;  double result=0.5 * (1.0 + errorFunction.op(z * Constants.M_SQRT_2));  if (result <= 1e-8) {    double sum=1.0;    final double zsqr=z * z;    double i=1.0, g=1.0, x, y, a=Constants.QL_MAX_REAL, lasta;    do {      lasta=a;      x=(4.0 * i - 3.0) / zsqr;      y=x * ((4.0 * i - 1) / zsqr);      a=g * (x - y);      sum-=a;      g*=y;      ++i;      a=Math.abs(a);    } while (lasta > a && a >= Math.abs(sum * Constants.QL_EPSILON));    result=-gaussian.op(z) / z * sum;  }  return result;}  }
class C{  public boolean isZoomXEnabled(){  return mZoomXEnabled;}  }
class C{  protected void connectToAnyPeer() throws PeerDiscoveryException {  final State state=state();  if (!(state == State.STARTING || state == State.RUNNING))   return;  PeerAddress addr=null;  long nowMillis=Utils.currentTimeMillis();  long retryTime=0;  lock.lock();  try {    if (!haveReadyInactivePeer(nowMillis)) {      discoverPeers();      groupBackoff.trackSuccess();      nowMillis=Utils.currentTimeMillis();    }    if (inactives.size() == 0) {      log.debug("Peer discovery didn't provide us any more peers, not trying to build new connection.");      return;    }    addr=inactives.poll();    retryTime=backoffMap.get(addr).getRetryTime();  }  finally {    retryTime=Math.max(retryTime,groupBackoff.getRetryTime());    lock.unlock();    if (retryTime > nowMillis) {      final long millis=retryTime - nowMillis;      log.info("Waiting {} msec before next connect attempt {}",millis,addr == null ? "" : " to " + addr);      Utils.sleep(millis);    }  }  checkNotNull(addr);  connectTo(addr,false);}  }
class C{  public int read(char buff[],int off,int len) throws IOException {  int b=read();  if (b == -1)   return -1; else {    buff[off]=(char)b;    return 1;  }}  }
class C{  public InputStream read(int size,boolean extraCRLF) throws DecodingException {  nextSeen=false;  nextChar=0;  FixedLengthInputStream fin=new FixedLengthInputStream(this.in,size);  if (extraCRLF) {    return new EolInputStream(this,fin);  } else {    return fin;  }}  }
class C{  public static void registerTurtleUpgrade(ITurtleUpgrade upgrade){  if (upgrade != null) {    findCC();    if (computerCraft_registerTurtleUpgrade != null) {      try {        computerCraft_registerTurtleUpgrade.invoke(null,upgrade);      } catch (      Exception e) {      }    }  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void println(long x){  out.println(x);}  }
class C{  public static String[] warningOptionNames(){  String[] result={OPTION_ReportAnnotationSuperInterface,OPTION_ReportAssertIdentifier,OPTION_ReportAutoboxing,OPTION_ReportComparingIdentical,OPTION_ReportDeadCode,OPTION_ReportDeadCodeInTrivialIfStatement,OPTION_ReportDeprecation,OPTION_ReportDeprecationInDeprecatedCode,OPTION_ReportDeprecationWhenOverridingDeprecatedMethod,OPTION_ReportDiscouragedReference,OPTION_ReportEmptyStatement,OPTION_ReportEnumIdentifier,OPTION_ReportFallthroughCase,OPTION_ReportFieldHiding,OPTION_ReportFinallyBlockNotCompletingNormally,OPTION_ReportFinalParameterBound,OPTION_ReportForbiddenReference,OPTION_ReportHiddenCatchBlock,OPTION_ReportIncompatibleNonInheritedInterfaceMethod,OPTION_ReportIncompleteEnumSwitch,OPTION_ReportIndirectStaticAccess,OPTION_ReportInvalidJavadoc,OPTION_ReportInvalidJavadocTags,OPTION_ReportInvalidJavadocTagsDeprecatedRef,OPTION_ReportInvalidJavadocTagsNotVisibleRef,OPTION_ReportInvalidJavadocTagsVisibility,OPTION_ReportLocalVariableHiding,OPTION_ReportMethodCanBePotentiallyStatic,OPTION_ReportMethodCanBeStatic,OPTION_ReportMethodWithConstructorName,OPTION_ReportMissingDeprecatedAnnotation,OPTION_ReportMissingHashCodeMethod,OPTION_ReportMissingJavadocComments,OPTION_ReportMissingJavadocCommentsOverriding,OPTION_ReportMissingJavadocCommentsVisibility,OPTION_ReportMissingJavadocTagDescription,OPTION_ReportMissingJavadocTags,OPTION_ReportMissingJavadocTagsMethodTypeParameters,OPTION_ReportMissingJavadocTagsOverriding,OPTION_ReportMissingJavadocTagsVisibility,OPTION_ReportMissingOverrideAnnotation,OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation,OPTION_ReportMissingSerialVersion,OPTION_ReportMissingSynchronizedOnInheritedMethod,OPTION_ReportNoEffectAssignment,OPTION_ReportNoImplicitStringConversion,OPTION_ReportNonExternalizedStringLiteral,OPTION_ReportNonStaticAccessToStatic,OPTION_ReportNullReference,OPTION_ReportOverridingMethodWithoutSuperInvocation,OPTION_ReportOverridingPackageDefaultMethod,OPTION_ReportParameterAssignment,OPTION_ReportPossibleAccidentalBooleanAssignment,OPTION_ReportPotentialNullReference,OPTION_ReportRawTypeReference,OPTION_ReportRedundantNullCheck,OPTION_ReportRedundantSuperinterface,OPTION_ReportRedundantSpecificationOfTypeArguments,OPTION_ReportSpecialParameterHidingField,OPTION_ReportSyntheticAccessEmulation,OPTION_ReportTasks,OPTION_ReportTypeParameterHiding,OPTION_ReportUnavoidableGenericTypeProblems,OPTION_ReportUncheckedTypeOperation,OPTION_ReportUndocumentedEmptyBlock,OPTION_ReportUnhandledWarningToken,OPTION_ReportUnnecessaryElse,OPTION_ReportUnnecessaryTypeCheck,OPTION_ReportUnqualifiedFieldAccess,OPTION_ReportUnusedDeclaredThrownException,OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable,OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding,OPTION_ReportUnusedImport,OPTION_ReportUnusedLabel,OPTION_ReportUnusedLocal,OPTION_ReportUnusedObjectAllocation,OPTION_ReportUnusedParameter,OPTION_ReportUnusedParameterIncludeDocCommentReference,OPTION_ReportUnusedParameterWhenImplementingAbstract,OPTION_ReportUnusedParameterWhenOverridingConcrete,OPTION_ReportUnusedPrivateMember,OPTION_ReportUnusedTypeArgumentsForMethodInvocation,OPTION_ReportUnusedWarningToken,OPTION_ReportVarargsArgumentNeedCast};  return result;}  }
class C{  public AnchorUpdateControl(Layout[] layout,String action){  this(layout,action,true);}  }
class C{  public static Data convertInputType(String parameterName,Object parameterValue,Metadata metadata){  String name=parameterName;  Object value=parameterValue;  boolean hasMetadata=(metadata != null) ? true : false;  boolean hasMatrixMetadata=hasMetadata && (metadata instanceof MatrixMetadata) ? true : false;  boolean hasFrameMetadata=hasMetadata && (metadata instanceof FrameMetadata) ? true : false;  if (name == null) {    throw new MLContextException("Input parameter name is null");  } else   if (value == null) {    throw new MLContextException("Input parameter value is null for: " + parameterName);  } else   if (value instanceof JavaRDD<?>) {    @SuppressWarnings("unchecked") JavaRDD<String> javaRDD=(JavaRDD<String>)value;    if (hasMatrixMetadata) {      MatrixMetadata matrixMetadata=(MatrixMetadata)metadata;      if (matrixMetadata.getMatrixFormat() == MatrixFormat.IJV) {        return MLContextConversionUtil.javaRDDStringIJVToMatrixObject(name,javaRDD,matrixMetadata);      } else {        return MLContextConversionUtil.javaRDDStringCSVToMatrixObject(name,javaRDD,matrixMetadata);      }    } else     if (hasFrameMetadata) {      FrameMetadata frameMetadata=(FrameMetadata)metadata;      if (frameMetadata.getFrameFormat() == FrameFormat.IJV) {        return MLContextConversionUtil.javaRDDStringIJVToFrameObject(name,javaRDD,frameMetadata);      } else {        return MLContextConversionUtil.javaRDDStringCSVToFrameObject(name,javaRDD,frameMetadata);      }    } else     if (!hasMetadata) {      String firstLine=javaRDD.first();      boolean isAllNumbers=isCSVLineAllNumbers(firstLine);      if (isAllNumbers) {        return MLContextConversionUtil.javaRDDStringCSVToMatrixObject(name,javaRDD);      } else {        return MLContextConversionUtil.javaRDDStringCSVToFrameObject(name,javaRDD);      }    }  } else   if (value instanceof RDD<?>) {    @SuppressWarnings("unchecked") RDD<String> rdd=(RDD<String>)value;    if (hasMatrixMetadata) {      MatrixMetadata matrixMetadata=(MatrixMetadata)metadata;      if (matrixMetadata.getMatrixFormat() == MatrixFormat.IJV) {        return MLContextConversionUtil.rddStringIJVToMatrixObject(name,rdd,matrixMetadata);      } else {        return MLContextConversionUtil.rddStringCSVToMatrixObject(name,rdd,matrixMetadata);      }    } else     if (hasFrameMetadata) {      FrameMetadata frameMetadata=(FrameMetadata)metadata;      if (frameMetadata.getFrameFormat() == FrameFormat.IJV) {        return MLContextConversionUtil.rddStringIJVToFrameObject(name,rdd,frameMetadata);      } else {        return MLContextConversionUtil.rddStringCSVToFrameObject(name,rdd,frameMetadata);      }    } else     if (!hasMetadata) {      String firstLine=rdd.first();      boolean isAllNumbers=isCSVLineAllNumbers(firstLine);      if (isAllNumbers) {        return MLContextConversionUtil.rddStringCSVToMatrixObject(name,rdd);      } else {        return MLContextConversionUtil.rddStringCSVToFrameObject(name,rdd);      }    }  } else   if (value instanceof MatrixBlock) {    MatrixBlock matrixBlock=(MatrixBlock)value;    return MLContextConversionUtil.matrixBlockToMatrixObject(name,matrixBlock,(MatrixMetadata)metadata);  } else   if (value instanceof FrameBlock) {    FrameBlock frameBlock=(FrameBlock)value;    return MLContextConversionUtil.frameBlockToFrameObject(name,frameBlock,(FrameMetadata)metadata);  } else   if (value instanceof DataFrame) {    DataFrame dataFrame=(DataFrame)value;    if (hasMatrixMetadata) {      return MLContextConversionUtil.dataFrameToMatrixObject(name,dataFrame,(MatrixMetadata)metadata);    } else     if (hasFrameMetadata) {      return MLContextConversionUtil.dataFrameToFrameObject(name,dataFrame,(FrameMetadata)metadata);    } else     if (!hasMetadata) {      boolean looksLikeMatrix=doesDataFrameLookLikeMatrix(dataFrame);      if (looksLikeMatrix) {        return MLContextConversionUtil.dataFrameToMatrixObject(name,dataFrame);      } else {        return MLContextConversionUtil.dataFrameToFrameObject(name,dataFrame);      }    }  } else   if (value instanceof BinaryBlockMatrix) {    BinaryBlockMatrix binaryBlockMatrix=(BinaryBlockMatrix)value;    if (metadata == null) {      metadata=binaryBlockMatrix.getMatrixMetadata();    }    JavaPairRDD<MatrixIndexes,MatrixBlock> binaryBlocks=binaryBlockMatrix.getBinaryBlocks();    return MLContextConversionUtil.binaryBlocksToMatrixObject(name,binaryBlocks,(MatrixMetadata)metadata);  } else   if (value instanceof BinaryBlockFrame) {    BinaryBlockFrame binaryBlockFrame=(BinaryBlockFrame)value;    if (metadata == null) {      metadata=binaryBlockFrame.getFrameMetadata();    }    JavaPairRDD<Long,FrameBlock> binaryBlocks=binaryBlockFrame.getBinaryBlocks();    return MLContextConversionUtil.binaryBlocksToFrameObject(name,binaryBlocks,(FrameMetadata)metadata);  } else   if (value instanceof Matrix) {    Matrix matrix=(Matrix)value;    return matrix.toMatrixObject();  } else   if (value instanceof Frame) {    Frame frame=(Frame)value;    return frame.toFrameObject();  } else   if (value instanceof double[][]) {    double[][] doubleMatrix=(double[][])value;    return MLContextConversionUtil.doubleMatrixToMatrixObject(name,doubleMatrix,(MatrixMetadata)metadata);  } else   if (value instanceof URL) {    URL url=(URL)value;    return MLContextConversionUtil.urlToMatrixObject(name,url,(MatrixMetadata)metadata);  } else   if (value instanceof Integer) {    return new IntObject((Integer)value);  } else   if (value instanceof Double) {    return new DoubleObject((Double)value);  } else   if (value instanceof String) {    return new StringObject((String)value);  } else   if (value instanceof Boolean) {    return new BooleanObject((Boolean)value);  }  return null;}  }
class C{  @Override public List<ExampleSetBasedIndividual> operate(ExampleSetBasedIndividual individual) throws Exception {  List<ExampleSetBasedIndividual> l=new LinkedList<ExampleSetBasedIndividual>();  AttributeWeightedExampleSet clone=(AttributeWeightedExampleSet)individual.getExampleSet().clone();  double p=prob < 0 ? 1.0d / clone.getAttributes().size() : prob;  p/=4.0d;  try {    if ((maxNumberOfAttributes < 0) || (clone.getAttributes().size() < maxNumberOfAttributes)) {      addOriginalAttribute(clone,p);    }    boolean generationPossible=false;    if ((maxNumberOfAttributes < 0) || (clone.getAttributes().size() <= maxNumberOfAttributes)) {      generationPossible=addGeneratedAttribute(clone,p);    }    deselect(clone,generationPossible ? 2 : 1,p);  } catch (  GenerationException e) {    individual.getExampleSet().getLog().logWarning("GeneratingMutation: Exception occured during generation of attributes, using only original example set instead.");  }  if (clone.getNumberOfUsedAttributes() > 0) {    l.add(new ExampleSetBasedIndividual(clone));  }  l.add(individual);  return l;}  }
class C{  public int findPeakElement(int[] num){  if (num == null || num.length == 0)   return 0;  int n=num.length;  if (n <= 1)   return 0;  if (num[0] > num[1])   return 0;  if (num[n - 1] > num[n - 2])   return n - 1;  int left=1, right=n - 2;  while (left < right) {    int mid=(right - left) / 2 + left;    if (num[mid] > num[mid - 1] && num[mid] > num[mid + 1])     return mid; else     if (num[mid] > num[mid + 1])     right=mid - 1; else     left=mid + 1;  }  return left;}  }
class C{  public static void serializeTrace(Model model){  try {    List<TLCState> trace=getErrorOfOriginalTrace(model).getStates(Length.ALL);    Assert.isNotNull(trace);    Iterator<TLCState> it=trace.iterator();    IFile traceSourceFile=model.getTraceSourceFile();    ModelHelper.createOrClearFiles(new IFile[]{traceSourceFile},new NullProgressMonitor());    while (it.hasNext()) {      traceSourceFile.appendContents(new ByteArrayInputStream((MP.DELIM + MP.STARTMSG + "0000"+ MP.COLON+ MP.STATE+ " "+ MP.DELIM+ "\n").getBytes()),IResource.FORCE | IWorkspace.AVOID_UPDATE,new NullProgressMonitor());      TLCState state=(TLCState)it.next();      StringBuffer toAppend=new StringBuffer();      toAppend.append(state.getStateNumber()).append(": ").append(state.getLabel()).append("\n").append(state.toString());      traceSourceFile.appendContents(new ByteArrayInputStream(toAppend.toString().getBytes()),IResource.FORCE | IWorkspace.AVOID_UPDATE,new NullProgressMonitor());      traceSourceFile.appendContents(new ByteArrayInputStream((MP.DELIM + MP.ENDMSG + "0000"+ " "+ MP.DELIM+ "\n").getBytes()),IResource.FORCE | IWorkspace.AVOID_UPDATE,new NullProgressMonitor());    }  } catch (  CoreException e) {    TLCUIActivator.getDefault().logError("Error writing trace contents to file",e);  }}  }
class C{  public AmqpSender createSender(final String address) throws Exception {  return createSender(address,false);}  }
class C{  @Override public void prepareAccessibilityDrop(){  if (mReorderAlarm.alarmPending()) {    mReorderAlarm.cancelAlarm();    mReorderAlarmListener.onAlarm(mReorderAlarm);  }}  }
class C{  @RequestMapping(value="/{id}",params="action=delete",method=POST) public Callable<String> deleteTodo(@PathVariable("id") Long id){  return null;}  }
class C{  public WitboxFaces(int face,int[] type){  mType=face;  generatePlaneCoords(face,type);  int vertexShader=ViewerRenderer.loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);  int fragmentShader=ViewerRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);  mProgram=GLES20.glCreateProgram();  GLES20.glAttachShader(mProgram,vertexShader);  GLES20.glAttachShader(mProgram,fragmentShader);  GLES20.glLinkProgram(mProgram);}  }
class C{  public <T extends ServiceDocument>Iterable<T> selectedDocuments(Class<T> type){  if (this.results == null || this.results.selectedDocuments == null) {    return Collections.emptyList();  }  Stream<T> stream=this.results.selectedDocuments.values().stream().map(null);  return null;}  }
class C{  public static PlatformDecoder buildPlatformDecoder(PoolFactory poolFactory,boolean decodeMemoryFileEnabled){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return new ArtDecoder(poolFactory.getBitmapPool(),poolFactory.getFlexByteArrayPoolMaxNumThreads());  } else {    if (decodeMemoryFileEnabled && Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      return new GingerbreadPurgeableDecoder();    } else {      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());    }  }}  }
class C{  protected void uninstallListeners(){  frame.removePropertyChangeListener(this);  removePropertyChangeListener(this);}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  if (getSelectedPoints() != null && getSelectedPoints().size() > 0) {    for (    int i : getSelectedPoints()) {      double x=((Number)xTipData.get(i)).doubleValue();      double y=((Number)yTipData.get(i)).doubleValue();      double x1=transformX(x);      double y1=transformY(y);      double x2=transformX(((Number)xData.get(0)).doubleValue());      double y2=transformY(((Number)yData.get(0)).doubleValue());      GeneralPath path=new GeneralPath();      path.moveTo((float)x1,(float)y1);      path.lineTo((float)x2,(float)y2);      g2.draw(path);    }  } else {    for (int i=0; i < xData.getCount(); i++) {      double x1=transformX(((Number)xTipData.get(i)).doubleValue());      double y1=transformY(((Number)yTipData.get(i)).doubleValue());      double x2=transformX(((Number)xData.get(i)).doubleValue());      double y2=transformY(((Number)yData.get(i)).doubleValue());      GeneralPath path=new GeneralPath();      path.moveTo((float)x1,(float)y1);      path.lineTo((float)x2,(float)y2);      g2.draw(path);    }  }}  }
class C{  public MessageBuilder appendQuote(String content){  return appendCode("",content);}  }
class C{  @Override public boolean isAscending(){  return false;}  }
class C{  private DebugProtocolHelper(){}  }
class C{  public String name(){  return name;}  }
class C{  public MergePolicyWrapper(MergePolicy in){  this.in=in;}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  public static String ssx(String shpFileName){  String ret=null;  if (shpFileName != null) {    ret=shpFileName.substring(0,shpFileName.indexOf(".shp")) + ".ssx";  }  return ret;}  }
class C{  @Nullable public GeoPoint center(){  return center;}  }
class C{  public static boolean running(){  return running;}  }
class C{  public CheckItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private boolean sendEmail(MRequest request,String AD_Message){  String subject=Msg.getMsg(m_client.getAD_Language(),AD_Message,new String[]{request.getDocumentNo()});  return m_client.sendEMail(request.getSalesRep_ID(),subject,request.getSummary(),request.createPDF());}  }
class C{  public static <T extends ServiceDocument>boolean documentEquals(Class<T> type,T document1,T document2) throws IllegalAccessException {  ServiceDocumentDescription documentDescription=ServiceDocumentDescription.Builder.create().buildDescription(type,EnumSet.noneOf(Service.ServiceOption.class));  return ServiceDocument.equals(documentDescription,document1,document2);}  }
class C{  public Map<String,String> find(String userId,String keyFilter) throws ServerException {  requireNonNull(userId,"Required non-null user id");  return preferenceDao.getPreferences(userId,keyFilter);}  }
class C{  private void checkField(final boolean invalid,final String failLabel,final String fieldLabel) throws RequestProcessAdviceException {  if (invalid) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get(failLabel) + " - " + langPropsService.get(fieldLabel)));  }}  }
class C{  public void addSuperClass(ClassType type){  addSuperClassNoBidirectionalUpdate(type);  type.addSubclassNoBidirectionalUpdate(this);}  }
class C{  public GivenName(){  super(KEY);}  }
class C{  public void removeGrid(String gridName){  gridNames.remove(gridName);}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  core.init(opmode,key,params,random);}  }
class C{  public ResultSet monitor(ResultSet rs){  return (ResultSet)monitorJDBC(rs);}  }
class C{  public CharClassInterval(int start,int end,int charClass){  this.start=start;  this.end=end;  this.charClass=charClass;}  }
class C{  public static void removeMonitor(DependencyMonitor monitor){  monitors.remove(monitor);}  }
class C{  private byte readAndCheckByte() throws IOException, EOFException {  int b1=in.read();  if (-1 == b1) {    throw new EOFException();  }  return (byte)b1;}  }
class C{  @Override public void configureHyperlinkLabelProvider(com.google.inject.Binder binder){  binder.bind(org.eclipse.jface.viewers.ILabelProvider.class).annotatedWith(org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkLabelProvider.class).to(N4JSHyperlinkLabelProvider.class);}  }
class C{  private synchronized long waitForAtLeastOneAvailableConnection(long waitTime) throws PoolExhaustedException {  while (availableSize() == 0) {    if (waitTime <= 0)     throw new PoolExhaustedException("ConnectionPool: pool is empty - increase either maxPoolSize or borrowConnectionTimeout");    long before=System.currentTimeMillis();    try {      if (LOGGER.isTraceEnabled())       LOGGER.logTrace(this + ": about to wait for connection during " + waitTime+ "ms...");      this.wait(waitTime);    } catch (    InterruptedException ex) {      InterruptedExceptionHelper.handleInterruptedException(ex);      if (LOGGER.isTraceEnabled())       LOGGER.logTrace(this + ": interrupted during wait",ex);    }    if (LOGGER.isTraceEnabled())     LOGGER.logTrace(this + ": done waiting.");    long now=System.currentTimeMillis();    waitTime-=(now - before);  }  return waitTime;}  }
class C{  protected void sendFunctionGroup1(){  byte[] result=jmri.NmraPacket.function0Through4Packet(address.getNumber(),address.isLongAddress(),getF0(),getF1(),getF2(),getF3(),getF4());  station.sendPacket(result,1);}  }
class C{  TaskProgress(String stageName,int taskId){  this.stageName=stageName;  this.taskId=taskId;}  }
class C{  public static final LoginManager acquireLoginManager(LoginType loginType,Map<String,?> configs) throws IOException, LoginException {synchronized (LoginManager.class) {    LoginManager loginManager=CACHED_INSTANCES.get(loginType);    if (loginManager == null) {      loginManager=new LoginManager(loginType,configs);      CACHED_INSTANCES.put(loginType,loginManager);    }    return loginManager.acquire();  }}  }
class C{  public String current(){  return this.currentState;}  }
class C{  public static boolean lineLocationContainment(Location loc1,Location loc2){  return (loc1.beginLine() >= loc2.beginLine()) && (loc2.endLine() >= loc1.endLine());}  }
class C{  public File makeLargeGzipFile(int kbytes) throws IOException {  final byte[] line=new byte[1024];  final File file=File.createTempFile("test","GzipAsynch.gz");  try (GZIPOutputStream out=new GZIPOutputStream(new FileOutputStream(file))){    for (int i=0; i < kbytes; i++) {      for (int pos=0; pos < 1024; pos++) {        line[pos]=(byte)('!' + (pos * (long)i) % 91);      }      line[1023]=(byte)'\n';      out.write(line);    }  }   return file;}  }
class C{  @Override public void clear(){}  }
class C{  @Override public RabbitGroup saveGroup(RabbitGroup group){  return groupRepository.save(group);}  }
class C{  public void dispose(){  if (glHandle == 0)   return;  delete();  if (data.isManaged())   if (managedTextures.get(Gdx.app) != null)   managedTextures.get(Gdx.app).removeValue(this,true);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,null);}  }
class C{  public final static VersionInfo loadVersionInfo(final String pckg,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  if (clsldr == null)   clsldr=Thread.currentThread().getContextClassLoader();  Properties vip=null;  try {    InputStream is=clsldr.getResourceAsStream(pckg.replace('.','/') + "/" + VERSION_PROPERTY_FILE);    if (is != null) {      try {        Properties props=new Properties();        props.load(is);        vip=props;      }  finally {        is.close();      }    }  } catch (  IOException ex) {  }  VersionInfo result=null;  if (vip != null)   result=fromMap(pckg,vip,clsldr);  return result;}  }
class C{  public DgKSNetwork convertNetworkLanesAndSignals(Network network,Lanes lanes,SignalsData signals,Envelope signalsBoundingBox,double startTime,double endTime){  log.info("Checking cycle time...");  this.cycle=readCycle(signals);  log.info("cycle set to " + this.cycle);  signalizedLinks=this.getSignalizedLinkIds(signals.getSignalSystemsData());  log.info("Converting network ...");  this.timeInterval=endTime - startTime;  this.signalsBoundingBox=signalsBoundingBox;  this.dgNetwork=this.convertNetwork(network,lanes,signals);  log.info("Network converted.");  return this.dgNetwork;}  }
class C{  private static String formatNumberCroreFormat(final BigDecimal num){  final double absAmount=num.abs().doubleValue();  final long numLakhs=(long)(absAmount / 100000);  final double numThousands=absAmount - (numLakhs * 100000);  final DecimalFormat formatter=new DecimalFormat("#,##");  final String firstPart=(num.doubleValue() < 0 ? "-" : "") + (numLakhs > 0 ? formatter.format(numLakhs) + "," : "");  formatter.applyPattern("00,000.00");  return (firstPart + formatter.format(numThousands));}  }
class C{  public static int ELIBSCN(){  return 81;}  }
class C{  public void run(){  while (this.stop) {    System.out.print("\b ");  }}  }
class C{  public static synchronized int pollId(final Class<?> clazz){  Class<?> matchClass=null;  if (COUNTERS.containsKey(clazz)) {    matchClass=clazz;  } else   if (!NO_COUNTERS.contains(clazz)) {    for (    Class<?> key : COUNTERS.keySet()) {      if (key.isAssignableFrom(clazz)) {        matchClass=key;        break;      }    }  }  int result=-1;  if (matchClass == null) {    NO_COUNTERS.add(clazz);    result=pollGlobalId();  } else {    result=COUNTERS.get(matchClass);    COUNTERS.put(matchClass,result + 1);  }  if (result < 0) {    throw new IllegalStateException("The generated id for class:" + clazz.getName() + " is negative. Possible integer overflow.");  }  return result;}  }
class C{  public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public SafeTimeTracker(long delay,long random){  internalDelay=delay;  randomRange=random;}  }
class C{  private static void scrapeLink(String episodeURL,int episodeNum,Series series){  StringBuilder episodeTextBuffer=new StringBuilder("Episode Number: " + episodeNum + "<br>");  String episodeText;  URL url;  InputStream is=null;  BufferedReader br;  String line;  try {    url=new URL(episodeURL);    is=url.openStream();    br=new BufferedReader(new InputStreamReader(is));    while ((line=br.readLine()) != null) {      episodeTextBuffer.append(line);      episodeTextBuffer.append(" ");    }  } catch (  IOException ioe) {    ioe.printStackTrace();  } finally {    try {      if (is != null)       is.close();    } catch (    IOException ioe) {    }  }  episodeText=episodeTextBuffer.toString();  episodeText=episodeText.replaceAll("\\n","");  episodeText=episodeText.replaceAll("<br>","\n");  episodeText=episodeText.replaceAll("</div>(.*\n)*.*","\n");  episodeText=episodeText.replaceAll("<[^>]*>","\n");  episodeText=episodeText.replace("&nbsp","");  episodeText=episodeText.replaceAll("\\n+\\s*","\n");  episodeText=episodeText.replaceAll("\\n{2,}","\n");  episodeText=episodeText.replaceAll(":;",": ");  saveEpisode(episodeText,episodeNum,series);}  }
class C{  public static boolean isConfigFileKeyword(String name){  return CONFIG_KEYWORDS.contains(name);}  }
class C{  public void replaceAnnFile(Reader readerAnnFile){  m_pathAnnFile=null;  m_readerAnnFile=readerAnnFile;  m_isUpdateAnnFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  public IntStack(int blocksize){  super(blocksize);}  }
class C{  private GrantorRequestProcessor(InternalDistributedSystem system,InternalDistributedMember elder){  super(system,elder);}  }
class C{  public static SecureConnectionMode parse(String value,String defaultValue){  SecureConnectionMode mode=parse(value);  if (mode == null && defaultValue != null)   mode=parse(defaultValue);  return mode;}  }
class C{  public void testServerResponseRetransmissions() throws Exception {  String oldRetransValue=System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"2");  System.setProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,"100");  System.setProperty(StackProperties.KEEP_CRANS_AFTER_A_RESPONSE,"true");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  requestCollector.waitForRequest();  Vector<StunMessageEvent> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  StunMessageEvent evt=reqs.get(0);  byte[] tid=evt.getMessage().getTransactionID();  stunStack.sendResponse(tid,bindingResponse,serverAddress,clientAddress);  Thread.sleep(500);  assertTrue("There were too few retransmissions of a binding response: " + responseCollector.receivedResponses.size(),responseCollector.receivedResponses.size() < 3);  if (oldRetransValue != null)   System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,oldRetransValue); else   System.clearProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  System.clearProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:21.661 -0500",hash_original_method="9928E14A90ED22F7792AF824C555C38E",hash_generated_method="FD09E15A05B5DCDBEE2328F70AACD50E") private TextImpl firstTextNodeInCurrentRun(){  TextImpl firstTextInCurrentRun=this;  for (Node p=getPreviousSibling(); p != null; p=p.getPreviousSibling()) {    short nodeType=p.getNodeType();    if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {      firstTextInCurrentRun=(TextImpl)p;    } else {      break;    }  }  return firstTextInCurrentRun;}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  public ApproximationSetPlot(DiagnosticTool frame,String metric){  super(frame,metric);  setLayout(new BorderLayout());}  }
class C{  public static void assertNotNull(Object object){  assertTrue(object != null);}  }
class C{  private static boolean oRule(String s){  int pos=s.length() - 1;  if (pos < 2)   return false;  if (!isVowel(s,pos) && isVowel(s,pos - 1) && !isVowel(s,pos - 2)) {switch (s.charAt(pos)) {case 'w':case 'x':case 'y':      return false;default :    return true;}}return false;}  }
class C{  void refreshAccessPoints(){  if (mWifiManager.isWifiEnabled()) {    mScanner.resume();  }  getPreferenceScreen().removeAll();}  }
class C{  public boolean isDefaultButton(){  JRootPane root=SwingUtilities.getRootPane(this);  if (root != null) {    return root.getDefaultButton() == this;  }  return false;}  }
class C{  public void testCase16(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public EditableOMRect(OMRect omc){  setGraphic(omc);}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractElement ae=(AbstractElement)n;  if (attributes != null) {    NamedNodeMap map=attributes;    for (int i=map.getLength() - 1; i >= 0; i--) {      AbstractAttr aa=(AbstractAttr)map.item(i);      if (aa.getSpecified()) {        Attr attr=(Attr)aa.deepExport(aa.cloneNode(false),d);        if (aa instanceof AbstractAttrNS) {          ae.setAttributeNodeNS(attr);        } else {          ae.setAttributeNode(attr);        }      }    }  }  return n;}  }
class C{  public static void main(String[] args) throws IOException {  long t1=Util.getTimestamp(2003,4,1);  long t2=Util.getTimestamp(2003,5,1);  System.out.println("t1 = " + t1);  System.out.println("t2 = " + t2);  String rrdPath=Util.getRrd4jDemoPath("demo.rrd");  DataProcessor dp=new DataProcessor(t1,t2);  dp.addDatasource("X",rrdPath,"sun",ConsolFun.AVERAGE);  dp.addDatasource("Y",rrdPath,"shade",ConsolFun.AVERAGE);  dp.addDatasource("Z","X,Y,+,2,/");  dp.addDatasource("DERIVE[Z]","Z,PREV(Z),-,STEP,/");  dp.addDatasource("TREND[Z]","DERIVE[Z],SIGN");  dp.addDatasource("AVG[Z]","Z",ConsolFun.AVERAGE);  dp.addDatasource("DELTA","Z,AVG[Z],-");  long laptime=System.currentTimeMillis();  dp.processData();  System.out.println("Data processed in " + (System.currentTimeMillis() - laptime) + " milliseconds\n---");  System.out.println(dp.dump());  System.out.println("\nAggregates for X");  Aggregates agg=dp.getAggregates("X");  System.out.println(agg.dump());  System.out.println("\nAggregates for Y");  agg=dp.getAggregates("Y");  System.out.println(agg.dump());  System.out.println("\n95-percentile for X: " + Util.formatDouble(dp.get95Percentile("X")));  System.out.println("95-percentile for Y: " + Util.formatDouble(dp.get95Percentile("Y")));  System.out.println("\nLast archive update time was: " + dp.getLastRrdArchiveUpdateTime());}  }
class C{  private void afterServerCommit(TXCommitMessage txcm){  if (this.internalAfterSendCommit != null) {    this.internalAfterSendCommit.run();  }  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache == null) {    return;  }  cache.getCancelCriterion().checkCancelInProgress(null);  InternalDistributedSystem ds=cache.getDistributedSystem();  DM dm=ds.getDistributionManager();  txcm.setDM(dm);  txcm.setAckRequired(false);  txcm.setDisableListeners(true);  cache.getTxManager().setTXState(null);  txcm.hookupRegions(dm);  txcm.basicProcess();}  }
class C{  private boolean conditionCH1(String value,int index){  return ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index - 2,6,"ORCHES","ARCHIT","ORCHID") || contains(value,index + 2,1,"T","S")|| ((contains(value,index - 1,1,"A","O","U","E") || index == 0) && (contains(value,index + 2,1,L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));}  }
class C{  public static void toggleBreakpointStatus(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress unrelocatedAddress){  Preconditions.checkNotNull(manager,"IE01723: Manager argument can not be null");  Preconditions.checkNotNull(module,"IE01724: Module argument can not be null");  Preconditions.checkNotNull(unrelocatedAddress,"IE01725: Address argument can not be null");  final BreakpointAddress address=new BreakpointAddress(module,unrelocatedAddress);  toggleBreakpoint(manager,address);}  }
class C{  @Override public String toString(){  return getClass().getName() + "[data=" + data+ "]";}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public boolean visitTree(VisitContext visitContext,VisitCallback callback){  if (!isVisitable(visitContext)) {    return false;  }  FacesContext facesContext=visitContext.getFacesContext();  boolean visitRows=requiresRowIteration(visitContext);  Integer oldRowKey=null;  if (visitRows) {    oldRowKey=getRowKey();    setRowKey(facesContext,null);  }  pushComponentToEL(facesContext,null);  try {    VisitResult result=visitContext.invokeVisitCallback(this,callback);    if (result == VisitResult.COMPLETE) {      return true;    }    if ((result == VisitResult.ACCEPT)) {      if (visitDataChildren(visitContext,callback,visitRows)) {        return true;      }    }  } catch (  IOException e) {    LOG.log(Level.SEVERE,e.getMessage(),e);  } finally {    popComponentFromEL(facesContext);    if (visitRows) {      try {        setRowKey(facesContext,oldRowKey);        restoreOrigValue(facesContext);      } catch (      Exception e) {        LOG.log(Level.SEVERE,e.getMessage(),e);      }    }  }  return false;}  }
class C{  public TestBase(String name){  testName=name;}  }
class C{  private LRAction searchSingleReduction(){  Reduce act=null;  for (  Terminal t : table.getActionTable().getColumns()) {    LRAction act2=table.getActionTable().get(rdState,t);    if (act2 instanceof Reduce) {      if (act == null)       act=(Reduce)act2; else       if (((Reduce)act2).getProduction() != act.getProduction())       return null;    } else     if (act2 instanceof Shift)     return null;  }  return act;}  }
class C{  public static String joinSizeTagToKey(String key,String tag){  return new StringBuilder(key).append(SIZE_SP).append(tag).toString();}  }
class C{  public PriceListProduct(int M_Product_ID,String value,String name,String description,String help,String documentNote,String imageURL,String descriptionURL,BigDecimal price,String uomName,String uomSymbol){  m_Product_ID=M_Product_ID;  m_value=value;  m_name=name;  m_description=description;  m_help=help;  m_documentNote=documentNote;  m_imageURL=imageURL;  m_descriptionURL=descriptionURL;  m_price=price;  m_uomName=uomName;  m_uomSymbol=uomSymbol;}  }
class C{  private void prepareNativeDaemon(){  mBandwidthControlEnabled=false;  final boolean hasKernelSupport=new File("/proc/net/xt_qtaguid/ctrl").exists();  if (hasKernelSupport) {    Slog.d(TAG,"enabling bandwidth control");    try {      mConnector.execute("bandwidth","enable");      mBandwidthControlEnabled=true;    } catch (    NativeDaemonConnectorException e) {      Log.wtf(TAG,"problem enabling bandwidth controls",e);    }  } else {    Slog.d(TAG,"not enabling bandwidth control");  }  SystemProperties.set(PROP_QTAGUID_ENABLED,mBandwidthControlEnabled ? "1" : "0");synchronized (mQuotaLock) {    int size=mActiveQuotas.size();    if (size > 0) {      Slog.d(TAG,"pushing " + size + " active quota rules");      final HashMap<String,Long> activeQuotas=mActiveQuotas;      mActiveQuotas=Maps.newHashMap();      for (      Map.Entry<String,Long> entry : activeQuotas.entrySet()) {        setInterfaceQuota(entry.getKey(),entry.getValue());      }    }    size=mActiveAlerts.size();    if (size > 0) {      Slog.d(TAG,"pushing " + size + " active alert rules");      final HashMap<String,Long> activeAlerts=mActiveAlerts;      mActiveAlerts=Maps.newHashMap();      for (      Map.Entry<String,Long> entry : activeAlerts.entrySet()) {        setInterfaceAlert(entry.getKey(),entry.getValue());      }    }    size=mUidRejectOnQuota.size();    if (size > 0) {      Slog.d(TAG,"pushing " + size + " active uid rules");      final SparseBooleanArray uidRejectOnQuota=mUidRejectOnQuota;      mUidRejectOnQuota=new SparseBooleanArray();      for (int i=0; i < uidRejectOnQuota.size(); i++) {        setUidNetworkRules(uidRejectOnQuota.keyAt(i),uidRejectOnQuota.valueAt(i));      }    }  }  setFirewallEnabled(mFirewallEnabled || LockdownVpnTracker.isEnabled());}  }
class C{  public static final int signedToInt(byte b){  return ((int)b & 0xff);}  }
class C{  public SamlCodeEvent(Object source,String code){  super(source,code);}  }
class C{  public Set<String> addContent(String variable,double value){  if (!paused) {    curState.addToState(new Assignment(variable,value));    return update();  } else {    log.info("system is paused, ignoring " + variable + "="+ value);    return Collections.emptySet();  }}  }
class C{  public float interpolate(float x){  final int n=mX.length;  if (Float.isNaN(x)) {    return x;  }  if (x <= mX[0]) {    return mY[0];  }  if (x >= mX[n - 1]) {    return mY[n - 1];  }  int i=0;  while (x >= mX[i + 1]) {    i+=1;    if (x == mX[i]) {      return mY[i];    }  }  float h=mX[i + 1] - mX[i];  float t=(x - mX[i]) / h;  return (mY[i] * (1 + 2 * t) + h * mM[i] * t) * (1 - t) * (1 - t) + (mY[i + 1] * (3 - 2 * t) + h * mM[i + 1] * (t - 1)) * t * t;}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  private static final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);    return keyFactory.generatePublic(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm",nsae);  }catch (  InvalidKeySpecException ike) {    throw new InvalidKeyException("Cannot construct public key",ike);  }}  }
class C{  public <T>T mapTo(final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor,final int flags){  return JBBPMapper.map(this,mappingClass,customFieldProcessor,flags);}  }
class C{  public static void unregisterSemanticNodes(){  semanticNodes=new LinkedList();}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  public TrieIterator(TrieNode node){  super();  m_Root=node;  m_CurrentLeaf=(TrieNode)m_Root.getFirstLeaf();  m_LastLeaf=(TrieNode)m_Root.getLastLeaf();}  }
class C{  public static JavacNode injectField(JavacNode typeNode,JCVariableDecl field){  return injectField(typeNode,field,false);}  }
class C{  private static boolean checkAppSignature(String facetId,Context context){  try {    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(context.getPackageName(),PackageManager.GET_SIGNATURES);    for (    Signature sign : packageInfo.signatures) {      byte[] sB=sign.toByteArray();      MessageDigest messageDigest=MessageDigest.getInstance("SHA1");      messageDigest.update(sign.toByteArray());      String currentSignature=Base64.encodeToString(messageDigest.digest(),Base64.DEFAULT);      if (currentSignature.toLowerCase().contains(facetId.split(":")[2].toLowerCase())) {        return true;      }    }  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return false;}  }
class C{  public static RemoveHealthListenerRequest create(int id){  RemoveHealthListenerRequest m=new RemoveHealthListenerRequest();  m.id=id;  return m;}  }
class C{  public void close(){  if (getParentInternalFrame() != null) {    getParentInternalFrame().doDefaultCloseAction();  } else   if (getParentFrame() != null) {    ((Window)getParentFrame()).dispatchEvent(new WindowEvent(getParentFrame(),WindowEvent.WINDOW_CLOSING));  }}  }
class C{  public static SRegResponse createSRegResponse(SRegRequest req,Map userData) throws MessageException {  SRegResponse resp=new SRegResponse();  List attributes=req.getAttributes();  Iterator iter=attributes.iterator();  while (iter.hasNext()) {    String attr=(String)iter.next();    String value=(String)userData.get(attr);    if (value != null)     resp.addAttribute(attr,value);  }  return resp;}  }
class C{  @Override public int size(){  final Segment<V>[] segments=this.segments;  long sum=0;  long check=0;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      sum+=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;    }    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        check+=segments[i].count;        if (mc[i] != segments[i].modCount) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segments.length; ++i)     segments[i].lock();    for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE;  return (int)sum;}  }
class C{  public void testParallelExhausted() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","doc.stored=false","doc.tokenized=false","task.max.depth.log=1","# ----- alg ","CreateIndex","{ [ AddDoc]: 4} : * ","ResetInputs ","{ [ AddDoc]: 4} : * ","CloseIndex"};  Benchmark benchmark=execBenchmark(algLines);  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=2 * 20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  protected void verifyMatch(Object target,Object deserialized){  CronExpression targetCronExpression=(CronExpression)target;  CronExpression deserializedCronExpression=(CronExpression)deserialized;  assertNotNull(deserializedCronExpression);  assertEquals(targetCronExpression.getCronExpression(),deserializedCronExpression.getCronExpression());  assertEquals(targetCronExpression.getTimeZone(),deserializedCronExpression.getTimeZone());}  }
class C{  public static boolean ISK(int x){  return 0 != ((x) & BITRK);}  }
class C{  public boolean isDependentEntities(){  Object oo=get_Value(COLUMNNAME_IsDependentEntities);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void removeWaiter(WaitNode node){  if (node != null) {    node.thread=null;    retry:     for (; ; ) {      for (WaitNode pred=null, q=waiters, s; q != null; q=s) {        s=q.next;        if (q.thread != null)         pred=q; else         if (pred != null) {          pred.next=s;          if (pred.thread == null)           continue retry;        } else         if (!UNSAFE.compareAndSwapObject(this,waitersOffset,q,s))         continue retry;      }      break;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.378 -0500",hash_original_method="212FDF834FF8F6725237F29A41B6704B",hash_generated_method="46C0413BA03B9DE945DBF06FA8B5E0CE") public static String convertPreDial(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (isPause(c)) {      c=PAUSE;    } else     if (isToneWait(c)) {      c=WAIT;    }    ret.append(c);  }  return ret.toString();}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void increment(double coord,float value){  if (cachefill >= 0) {    if (cachefill < cachec.length) {      cachec[cachefill]=coord;      cachev[cachefill]=value;      cachefill++;      return;    } else {      materialize();    }  }  testResample(coord);  super.increment(coord,value);}  }
class C{  public WPAttributeDialog(int M_AttributeSetInstance_ID,int M_Product_ID,int C_BPartner_ID,boolean productWindow,int AD_Column_ID,int WindowNo){  super();  this.setTitle(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"));  this.setAttribute("modal",Boolean.TRUE);  this.setBorder("normal");  this.setWidth("500px");  this.setHeight("600px");  this.setSizable(true);  log.config("M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID + ", M_Product_ID="+ M_Product_ID+ ", C_BPartner_ID="+ C_BPartner_ID+ ", ProductW="+ productWindow+ ", Column="+ AD_Column_ID);  m_WindowNo=SessionManager.getAppDesktop().registerWindow(this);  m_M_AttributeSetInstance_ID=M_AttributeSetInstance_ID;  m_M_Product_ID=M_Product_ID;  m_C_BPartner_ID=C_BPartner_ID;  m_productWindow=productWindow;  m_AD_Column_ID=AD_Column_ID;  m_WindowNoParent=WindowNo;  m_columnName=MColumn.getColumnName(Env.getCtx(),AD_Column_ID);  if (m_columnName == null || m_columnName.trim().length() == 0) {    m_columnName="M_AttributeSetInstance_ID";  }  try {    init();  } catch (  Exception ex) {    log.log(Level.SEVERE,"VPAttributeDialog" + ex);  }  if (!initAttributes()) {    dispose();    return;  }  AEnv.showCenterScreen(this);}  }
class C{  public Vector multiply(double n){  return new Vector(this.x * n,this.y * n,this.z * n);}  }
class C{  public static String date2String_yyyy_MM_dd_HH_mm_ss(Date date){  return getSimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);}  }
class C{  public void init(java.net.URL url){  init(null,url);}  }
class C{  @Override public boolean isValidCombination(int weeklyMinutes,DatePattern datePattern,TimePattern timePattern){  if (timePattern.getType() != null && timePattern.getType() == TimePattern.sTypeExactTime)   return true;  if (datePattern == null)   return false;  if (datePattern.getType() != null && datePattern.getType() == DatePattern.sTypePatternSet) {    for (    DatePattern child : datePattern.findChildren())     if (isValidCombination(weeklyMinutes,child,timePattern))     return true;    return false;  } else {    return weeklyMinutes == datePattern.getEffectiveNumberOfWeeks() * timePattern.getNrMeetings() * timePattern.getMinPerMtg() / getSemesterWeeks(datePattern);  }}  }
class C{  private void calcNextPos(int dx,int minX,int maxX,int dy,int minY,int maxY){  if (dx != 0) {    leadColumn+=dx;    if (leadColumn > maxX) {      leadColumn=minX;      leadRow++;      if (leadRow > maxY) {        leadRow=minY;      }    } else     if (leadColumn < minX) {      leadColumn=maxX;      leadRow--;      if (leadRow < minY) {        leadRow=maxY;      }    }  } else {    leadRow+=dy;    if (leadRow > maxY) {      leadRow=minY;      leadColumn++;      if (leadColumn > maxX) {        leadColumn=minX;      }    } else     if (leadRow < minY) {      leadRow=maxY;      leadColumn--;      if (leadColumn < minX) {        leadColumn=maxX;      }    }  }}  }
class C{  @Override public void exportGroupDelete(URI export,String opId) throws ControllerException {  ExportTaskCompleter taskCompleter=new ExportDeleteCompleter(export,false,opId);  Workflow workflow=null;  try {    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,export);    if (exportGroup != null && exportGroup.getExportMasks() != null) {      workflow=_wfUtils.newWorkflow("exportGroupDelete",false,opId);      Set<URI> storageSystemURIs=new HashSet<URI>();      List<ExportMask> tempExportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup);      for (      ExportMask tempExportMask : tempExportMasks) {        List<String> lockKeys=ControllerLockingUtil.getHostStorageLockKeys(_dbClient,ExportGroup.ExportGroupType.valueOf(exportGroup.getType()),StringSetUtil.stringSetToUriList(exportGroup.getInitiators()),tempExportMask.getStorageDevice());        boolean acquiredLocks=_wfUtils.getWorkflowService().acquireWorkflowLocks(workflow,lockKeys,LockTimeoutValue.get(LockType.EXPORT_GROUP_OPS));        if (!acquiredLocks) {          throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),"ExportGroupDelete: " + exportGroup.getLabel());        }        if (tempExportMask != null && tempExportMask.getVolumes() != null) {          List<URI> uriList=getExportRemovableObjects(exportGroup,tempExportMask);          Map<URI,List<URI>> storageToVolumes=getStorageToVolumes(uriList);          for (          URI storageURI : storageToVolumes.keySet()) {            if (!storageSystemURIs.contains(storageURI)) {              storageSystemURIs.add(storageURI);              _wfUtils.generateExportGroupDeleteWorkflow(workflow,null,null,storageURI,export);            }          }        } else {          exportGroup.removeExportMask(tempExportMask.getId());          _dbClient.persistObject(exportGroup);        }      }      workflow.executePlan(taskCompleter,"Removed export from all devices.");    } else {      taskCompleter.ready(_dbClient);    }  } catch (  Exception ex) {    String message="exportGroupDelete caught an exception.";    _log.error(message,ex);    if (workflow != null) {      _wfUtils.getWorkflowService().releaseAllWorkflowLocks(workflow);    }    ServiceError serviceError=DeviceControllerException.errors.jobFailed(ex);    taskCompleter.error(_dbClient,serviceError);  }}  }
class C{  public NoInitialContextException(String explanation){  super(explanation);}  }
class C{  protected void animateToNearestState(){  final PanelState nearestState=findNearestPanelStateFromHeight(getHeight());  final float displacement=getPanelHeightFromState(nearestState) - getHeight();  final long duration=calculateAnimationDuration(INITIAL_ANIMATION_VELOCITY_DP_PER_SECOND,displacement);  animatePanelToState(nearestState,StateChangeReason.SWIPE,duration);}  }
class C{  synchronized void checkThreshold(){  Ratio successRatio=circuit.getSuccessThreshold();  Ratio failureRatio=circuit.getFailureThreshold();  if (successRatio != null) {    if (bitSet.occupiedBits() == successRatio.denominator || (successRatio.ratio == 1.0 && bitSet.positiveRatio() < 1.0))     if (bitSet.positiveRatio() >= successRatio.ratio)     circuit.close(); else     circuit.open();  } else   if (failureRatio != null) {    if (bitSet.occupiedBits() == failureRatio.denominator || (failureRatio.ratio == 1.0 && bitSet.negativeRatio() < 1.0))     if (bitSet.negativeRatio() >= failureRatio.ratio)     circuit.open(); else     circuit.close();  } else {    if (bitSet.positiveRatio() == 1)     circuit.close(); else     circuit.open();  }}  }
class C{  public synchronized void channelDone(int channel){  if (!chBusy[channel])   throw new IllegalStateException("channel " + channel + " is not busy");  chBusy[channel]=false;  gate.release();}  }
class C{  protected void sequence_SimpleQuantifier(ISerializationContext context,SimpleQuantifier semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testBaselineParameters() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text_baseline",SweetSpotSimilarity.class);  ClassicSimilarity d=new ClassicSimilarity();  for (int i=1; i <= 6; i++) {    assertEquals("tf i=" + i,1.5F,sim.tf(i),0.0F);  }  for (int i=6; i <= 1000; i++) {    assertTrue("tf: i=" + i + " : s="+ sim.tf(i)+ " < d="+ d.tf(i),sim.tf(i) < d.tf(i));  }  assertEquals("norm 1 == 7",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F);  assertEquals("norm 2 == 6",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F);  assertEquals("norm 3",1.00F,sim.computeLengthNorm(3),0.0F);  assertEquals("norm 4",1.00F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 5",1.00F,sim.computeLengthNorm(5),0.0F);  assertTrue("norm 6 too high: " + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F);  assertTrue("norm 7 higher then norm 6",sim.computeLengthNorm(7) < sim.computeLengthNorm(6));  assertEquals("norm 20",0.25F,sim.computeLengthNorm(20),0.0F);}  }
class C{  private void dumpComplexTypeAttribute(XSComplexType type){  Iterator itr;  itr=type.iterateAttGroups();  while (itr.hasNext()) {    dumpRef((XSAttGroupDecl)itr.next());  }  itr=type.iterateDeclaredAttributeUses();  while (itr.hasNext()) {    attributeUse((XSAttributeUse)itr.next());  }}  }
class C{  public static double computePerspectiveNearDistance(Angle fieldOfView,double distanceToObject){  if (fieldOfView == null) {    String msg=Logging.getMessage("nullValue.FOVIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (distanceToObject < 0) {    String msg=Logging.getMessage("generic.DistanceLessThanZero");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double tanHalfFov=fieldOfView.tanHalfAngle();  return distanceToObject / (2 * Math.sqrt(2 * tanHalfFov * tanHalfFov + 1));}  }
class C{  public double worldToView(Axis axis,Number value,boolean extrapolate){  checkAxisBounds(axis);  double min=axis.getMin().doubleValue();  double max=axis.getMax().doubleValue();  double val=value.doubleValue();  if (!extrapolate) {    if (val <= min) {      return 0.0;    }    if (val >= max) {      return getShapeLength();    }  }  double minLog=(min > 0.0) ? Math.log10(min) : 0.0;  double maxLog=(max > 0.0) ? Math.log10(max) : 1.0;  return (Math.log10(val) - minLog) * getShapeLength() / (maxLog - minLog);}  }
class C{  @SuppressWarnings("unchecked") public Continuation(Name top,Hashtable<?,?> environment){  super();  starter=top;  this.environment=(Hashtable<?,?>)((environment == null) ? null : environment.clone());}  }
class C{  private void testProbability(double probability){  Replace replace=new Replace(probability);  int count=0;  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution original=new Solution(1,0);    original.setVariable(0,new Subset(50,100));    Solution mutated=replace.evolve(new Solution[]{original})[0];    if (testSubset((Subset)original.getVariable(0),(Subset)mutated.getVariable(0))) {      count++;    }  }  Assert.assertEquals((double)count / TestThresholds.SAMPLES,probability,TestThresholds.VARIATION_EPS);}  }
class C{  private void LINK(BasicBlock block1,BasicBlock block2){  if (DEBUG) {    System.out.println("  Linking " + block1 + " with "+ block2);  }  BasicBlock s=block2;  while (getSemi(getLabel(block2)) < getSemi(getLabel(getChild(s)))) {    if (getSize(s) + getSize(getChild(getChild(s))) >= 2 * getSize(getChild(s))) {      LTDominatorInfo.getInfo(getChild(s),ir).setAncestor(s);      LTDominatorInfo.getInfo(s,ir).setChild(getChild(getChild(s)));    } else {      LTDominatorInfo.getInfo(getChild(s),ir).setSize(getSize(s));      LTDominatorInfo.getInfo(s,ir).setAncestor(getChild(s));      s=getChild(s);    }  }  LTDominatorInfo.getInfo(s,ir).setLabel(getLabel(block2));  LTDominatorInfo.getInfo(block1,ir).setSize(getSize(block1) + getSize(block2));  if (getSize(block1) < 2 * getSize(block2)) {    BasicBlock tmp=s;    s=getChild(block1);    LTDominatorInfo.getInfo(block1,ir).setChild(tmp);  }  while (s != null) {    LTDominatorInfo.getInfo(s,ir).setAncestor(block1);    s=getChild(s);  }  if (DEBUG) {    System.out.println("  .... done");  }}  }
class C{  public boolean contains(Object value,Object filter,Locale locale){  String filterText=(filter == null) ? null : filter.toString().trim();  if (StringUtils.isBlank(filterText)) {    return true;  }  if (value == null) {    return false;  }  return StringUtils.containsIgnoreCase(value.toString(),filterText);}  }
class C{  @Override public DPState compute(Rule rule,List<HGNode> tailNodes,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  if (rule != null && rule.getOwner().equals(ownerID)) {    if (rule.getPrecomputableCost() <= Float.NEGATIVE_INFINITY) {      rule.setPrecomputableCost(phrase_weights,weights);    }    for (int k=0; k < phrase_weights.length; k++) {      acc.add(k + denseFeatureIndex,rule.getDenseFeature(k));    }    for (    String key : rule.getFeatureVector().keySet())     acc.add(key,rule.getFeatureVector().getSparse(key));  }  return null;}  }
class C{  public void reset(XMLComponentManager componentManager) throws XMLConfigurationException {  super.reset(componentManager);  fDoctypeName=null;  fDoctypePublicId=null;  fDoctypeSystemId=null;  fSeenDoctypeDecl=false;  fScanningDTD=false;  fExternalSubsetSource=null;  if (!fParserSettings) {    fNamespaceContext.reset();    setScannerState(SCANNER_STATE_XML_DECL);    setDispatcher(fXMLDeclDispatcher);    return;  }  try {    fLoadExternalDTD=componentManager.getFeature(LOAD_EXTERNAL_DTD);  } catch (  XMLConfigurationException e) {    fLoadExternalDTD=true;  }  try {    fDisallowDoctype=componentManager.getFeature(DISALLOW_DOCTYPE_DECL_FEATURE);  } catch (  XMLConfigurationException e) {    fDisallowDoctype=false;  }  fDTDScanner=(XMLDTDScanner)componentManager.getProperty(DTD_SCANNER);  try {    fValidationManager=(ValidationManager)componentManager.getProperty(VALIDATION_MANAGER);  } catch (  XMLConfigurationException e) {    fValidationManager=null;  }  try {    fNamespaceContext=(NamespaceContext)componentManager.getProperty(NAMESPACE_CONTEXT);  } catch (  XMLConfigurationException e) {  }  if (fNamespaceContext == null) {    fNamespaceContext=new NamespaceSupport();  }  fNamespaceContext.reset();  setScannerState(SCANNER_STATE_XML_DECL);  setDispatcher(fXMLDeclDispatcher);}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  @PostConstruct @Override public void init() throws ConfigException {  try {    _codeSource=new CodeSource(new URL(_path.getURL()),(Certificate[])null);  } catch (  Exception e) {    log.log(Level.FINE,e.toString(),e);  }  super.init();  getClassLoader().addURL(_path,_isScanned);}  }
class C{  public noscript addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected void parseC() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x1=parseFloat();skipCommaSpaces();float y1=parseFloat();skipCommaSpaces();float x2=parseFloat();skipCommaSpaces();float y2=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoCubicAbs(x1,y1,x2,y2,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String name=m_arg0.execute(xctxt).str();  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int doc=dtm.getDocument();  String uri=dtm.getUnparsedEntityURI(name);  return new XString(uri);}  }
class C{  public void revokeModerator(String nickname) throws XMPPException {  changeRole(nickname,"participant",null);}  }
class C{  public static void saveData(final AbstractSQLProvider provider,final INaviModule module,final byte[] data) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE01267: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE01268: Module argument can not be null");  Preconditions.checkNotNull(data,"IE01269: Data argument can not be null");  final CConnection connection=provider.getConnection();  try {    connection.executeUpdate("DELETE FROM " + CTableNames.DATA_PARTS_TABLE + " WHERE module_id = "+ module.getConfiguration().getId(),true);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }  final String preparedStatement="INSERT INTO " + CTableNames.DATA_PARTS_TABLE + "(module_id, part_id, data) VALUES(?, ?, ?)";  try (PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(preparedStatement)){    statement.setInt(1,module.getConfiguration().getId());    statement.setInt(2,0);    statement.setBinaryStream(3,new ByteArrayInputStream(data,0,data.length),data.length);    statement.execute();  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public void addSource(ITLAPMOutputSource source){  ITLAPMOutputSource existingSource=(ITLAPMOutputSource)sources.get(source.getFullModulePath());  if (existingSource != null) {    ITLAPMOutputSourceListener[] existingListeners=existingSource.getListeners();    for (int i=0; i < existingListeners.length; i++) {      source.addListener(existingListeners[i]);      existingSource.removeListener(existingListeners[i]);    }  } else {    List list=(List)listenerLists.get(source.getFullModulePath());    if (list != null) {      for (Iterator it=list.iterator(); it.hasNext(); ) {        source.addListener((ITLAPMOutputSourceListener)it.next());        it.remove();      }    }  }  sources.put(source.getFullModulePath(),source);}  }
class C{  public NoBilingSharesDataAvailableException(){}  }
class C{  private CollectorUtil(){  instanceNotAllowed(getClass());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(m_apps_host);  sb.append("{").append(m_db_host).append("-").append(m_db_name).append("-").append(m_db_uid).append("}");  return sb.toString();}  }
class C{  public boolean match(URI uri){  return matchNormalized(uri.normalize());}  }
class C{  private static void writeOp(byte[] inBuffer,int inOffset,int count,byte[] outBuffer,int write_pos,int buff_len){  if ((write_pos + count) <= buff_len) {    System.arraycopy(inBuffer,inOffset,outBuffer,write_pos,count);  } else {    int tillEndCount;    int fromStartCount;    tillEndCount=buff_len - write_pos;    fromStartCount=count - tillEndCount;    System.arraycopy(inBuffer,inOffset,outBuffer,write_pos,tillEndCount);    System.arraycopy(inBuffer,inOffset + tillEndCount,outBuffer,0,fromStartCount);  }}  }
class C{  public Builder addJavadoc(String javadoc){  javadocs.add(javadoc);  return this;}  }
class C{  private void updateProducerDescription(){  StringBuffer sb=new StringBuffer();  sb.append(getFilter().getDescription());  sb.append(" at (");  sb.append(receptiveField.getCenterX());  sb.append(", ");  sb.append(receptiveField.getCenterY());  sb.append(")");  description=sb.toString();}  }
class C{  synchronized public void close(){  this.valid=false;  for (  DBConnectionWrapper conn : this.connections) {    logger.fine("Closing connection to (" + conn.getAppUser() + ", "+ conn.getDb()+ ")");    try {      if (conn.isInuse() && conn.getCurrentStatement() != null) {        logger.fine("Cancel pending query, connection  (" + conn.getAppUser() + ", "+ conn.getDb()+ ")");        conn.getCurrentStatement().cancel();      }    } catch (    Exception ex) {      logger.log(Level.SEVERE,"Exception",ex);    }    conn.close();    logger.fine("Closed connection to (" + conn.getAppUser() + ", "+ conn.getDb()+ ")");  }  this.connections.clear();}  }
class C{  public java.sql.Statement createStatement() throws SQLException {  checkClosed();  try {    return StatementWrapper.getInstance(this,this.pooledConnection,this.mc.createStatement());  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  public CodeItem(CstMethodRef ref,DalvCode code,boolean isStatic,TypeList throwsList){  super(ALIGNMENT,-1);  if (ref == null) {    throw new NullPointerException("ref == null");  }  if (code == null) {    throw new NullPointerException("code == null");  }  if (throwsList == null) {    throw new NullPointerException("throwsList == null");  }  this.ref=ref;  this.code=code;  this.isStatic=isStatic;  this.throwsList=throwsList;  this.catches=null;  this.debugInfo=null;}  }
class C{  public static Transformer<Duo<Object,Object>,Boolean> ne(){  return FunctionalTools.compose(eq(),not());}  }
class C{  @Override public boolean exists(){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  return loader.getResource(getTrimPath()) != null;}  }
class C{  public static boolean isTrue(boolean expression,String message){  if (!expression)   throw new AssertionFailedException("assertion failed: " + message);  return expression;}  }
class C{  public static Matrix centerCorpImageview(DragImageView imageView,Bitmap bitmap){  float height, width;  int x1=0, y1=0;  float scale=1;  if (imageView.imageViewHeight / bitmap.getHeight() > imageView.imageViewWidth / bitmap.getWidth()) {    height=bitmap.getHeight();    scale=imageView.imageViewHeight / height;    width=imageView.imageViewWidth / scale;    x1=(int)((bitmap.getWidth() - width) / 2);    y1=0;  } else {    width=bitmap.getWidth();    scale=imageView.imageViewWidth / width;    height=imageView.imageViewHeight / scale;    y1=(int)((bitmap.getHeight() - height) / 2);    x1=0;  }  Bitmap cutBitmap=Bitmap.createBitmap(bitmap,x1,y1,(int)width,(int)height);  imageView.setImageBitmap(cutBitmap);  return imageView.resetMatrix();}  }
class C{  public static void initialize_update_sources(Context ctx){  if (_SOURCES != null) {    return;  }  _SOURCES=new ArrayList<UpdateSource>();  Log.v(MainActivity.TAG,"Reading update sources...");  try {    InputStream is=ctx.getAssets().open("sources.json");    StringBuilder buffer=new StringBuilder();    BufferedReader br=new BufferedReader(new InputStreamReader(is,"UTF-8"));    String s;    while ((s=br.readLine()) != null) {      buffer.append(s);    }    JSONArray sources=new JSONArray(buffer.toString());    for (int i=0; i < sources.length(); ++i) {      String name=sources.getJSONObject(i).getString("name");      Log.v(MainActivity.TAG,"Reading " + name);      String url=sources.getJSONObject(i).getString("url");      JSONObject packages=sources.getJSONObject(i).optJSONObject("packages");      if (packages == null || packages.length() == 0) {        throw new JSONException("packages missing or empty for " + name);      }      ArrayList<UpdateSourceEntry> entries=new ArrayList<UpdateSourceEntry>();      Iterator<String> it=packages.keys();      while (it.hasNext()) {        String applicable_packages=it.next();        JSONObject entry=packages.getJSONObject(applicable_packages);        UpdateSourceEntry use=new UpdateSourceEntry(applicable_packages);        use.set_version_regexp(entry.getString("version"));        try {          use.set_download_regexp(entry.getString("download_regexp"));        } catch (        JSONException ignored) {        }        try {          use.set_download_url(entry.getString("download"));        } catch (        JSONException ignored) {        }        try {          use.set_changelog_regexp(entry.getString("changelog"));        } catch (        JSONException ignored) {        }        entries.add(use);      }      UpdateSource us=new UpdateSource(name,url,entries);      JSONArray conditions=sources.getJSONObject(i).optJSONArray("autoselect_if");      if (conditions != null) {        List<String> autoselect_conditions=new ArrayList<String>();        for (int j=0; j < conditions.length(); ++j) {          autoselect_conditions.add(conditions.getString(j));        }        if (autoselect_conditions.size() > 0) {          us.set_autoselect_conditions(autoselect_conditions);        }      }      int delay=sources.getJSONObject(i).optInt("request_delay",0);      if (delay > 0) {        us.set_request_delay(delay);      }      _SOURCES.add(us);    }  } catch (  IOException e) {    Log.e(MainActivity.TAG,"Could not open sources.json!",e);  }catch (  JSONException e) {    Log.e(MainActivity.TAG,"sources.json seems to be malformed!",e);  }}  }
class C{  private IRuntimeClasspathEntry[] resolveClasspathEntries(List<IClasspathEntry> classpathEntries) throws CoreException {  LinkedHashSet<IRuntimeClasspathEntry> runtimeClasspathEntries=new LinkedHashSet<IRuntimeClasspathEntry>();  for (  IClasspathEntry classpathEntry : classpathEntries) {    if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {      String projectName=classpathEntry.getPath().lastSegment();      IJavaProject theproject=JavaProjectUtilities.findJavaProject(projectName);      IRuntimeClasspathEntry projectEntry=JavaRuntime.newProjectRuntimeClasspathEntry(theproject);      runtimeClasspathEntries.add(projectEntry);      runtimeClasspathEntries.addAll(dependenciesForProject(theproject));    } else {      runtimeClasspathEntries.add(JavaRuntime.newArchiveRuntimeClasspathEntry(classpathEntry.getPath()));    }  }  return runtimeClasspathEntries.toArray(NO_ENTRIES);}  }
class C{  public void redraw(){  if (Double.parseDouble(tfRectangle1X.getText()) != rectangle1.getX()) {    rectangle1.setX(Double.parseDouble(tfRectangle1X.getText()));  }  if (Double.parseDouble(tfRectangle1Y.getText()) != rectangle1.getY()) {    rectangle1.setY(Double.parseDouble(tfRectangle1Y.getText()));  }  if (Double.parseDouble(tfRectangle1Width.getText()) != rectangle1.getWidth()) {    rectangle1.setWidth(Double.parseDouble(tfRectangle1Width.getText()));  }  if (Double.parseDouble(tfRectangle1Height.getText()) != rectangle1.getHeight()) {    rectangle1.setHeight(Double.parseDouble(tfRectangle1Height.getText()));  }  if (Double.parseDouble(tfRectangle2X.getText()) != rectangle2.getX()) {    rectangle2.setX(Double.parseDouble(tfRectangle2X.getText()));  }  if (Double.parseDouble(tfRectangle2Y.getText()) != rectangle2.getY()) {    rectangle2.setY(Double.parseDouble(tfRectangle2Y.getText()));  }  if (Double.parseDouble(tfRectangle2Width.getText()) != rectangle2.getWidth()) {    rectangle2.setWidth(Double.parseDouble(tfRectangle2Width.getText()));  }  if (Double.parseDouble(tfRectangle2Height.getText()) != rectangle2.getHeight()) {    rectangle2.setHeight(Double.parseDouble(tfRectangle2Height.getText()));  }}  }
class C{  public static void addSaslMech(String mech){  if (!defaultMechs.contains(mech)) {    defaultMechs.add(mech);  }}  }
class C{  public void enable() throws IOException {synchronized (optOutLock) {    if (isOptOut()) {      config.getNode("mcstats.opt-out").setValue(false);      configurationLoader.save(config);    }    if (task == null) {      start();    }  }}  }
class C{  public void testGetFormat(){  byte[] key=new byte[]{1,2,3,4,5};  String algorithm="Algorithm";  SecretKeySpec ks=new SecretKeySpec(key,algorithm);  assertTrue("The returned value is not \"RAW\".",ks.getFormat() == "RAW");}  }
class C{  public static void notEmpty(Object[] arr,String name){  notNull(arr,name);  if (arr.length == 0)   throw new IllegalArgumentException(INVALID_ARG_MSG_PREFIX + name + NOT_EMPTY_SUFFIX);}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  public CommentedLineReader(Reader in){  super(in);}  }
class C{  public IssueCollector(IssueFilter issueFilter){  this.issueFilter=Objects.requireNonNull(issueFilter);  this.collectedIssues=new LinkedList<>();}  }
class C{  public static int[] copyOfRange(int[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      int[] copy=new int[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public void loadAndPopulateStaticAspects(NBTTagCompound nbt,long aspectSeed){  if (nbt != null && nbt.hasKey("entries")) {    this.loadStaticAspects(nbt);    this.updateAspects(aspectSeed);  } else {    this.generateStaticAspects(aspectSeed);  }}  }
class C{  private void upgradeLeaf(TableEntry10 table,TableUpgrade upgradeTable,Page10 page) throws IOException {  try (ReadStream is=openRead(page.segment().address(),page.segment().length())){    is.position(page.address());    byte[] minKey=new byte[table.keyLength()];    byte[] maxKey=new byte[table.keyLength()];    is.read(minKey,0,minKey.length);    is.read(maxKey,0,maxKey.length);    int blocks=BitsUtil.readInt16(is);    for (int i=0; i < blocks; i++) {      upgradeLeafBlock(is,table,upgradeTable,page);    }  } }  }
class C{  private static double[] reparameterize(ArrayList<Point2D.Double> d,int first,int last,double[] u,Point2D.Double[] bezCurve){  int nPts=last - first + 1;  int i;  double[] uPrime;  uPrime=new double[nPts];  for (i=first; i <= last; i++) {    uPrime[i - first]=newtonRaphsonRootFind(bezCurve,d.get(i),u[i - first]);  }  return (uPrime);}  }
class C{  @Override public void send(DatagramPacket p) throws IOException {  socketDelegate.send(p);}  }
class C{  public CryptoException(){  super();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshot-sessions/{sid}/restore") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep restoreConsistencyGroupSnapshotSession(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapSessionId){  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  final BlockSnapshotSession snapSession=(BlockSnapshotSession)queryResource(snapSessionId);  verifySnapshotSessionIsForConsistencyGroup(snapSession,consistencyGroup);  return getSnapshotSessionManager().restoreSnapshotSession(snapSessionId);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();  logWrapper.setNext(msgFilter);  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);  msgFilter.setNext(logFragment.getLogView());}  }
class C{  public Vertex synthesize(Vertex source){  log("synthesize",Level.FINE);  return synthesizeResponse(null,null,null,false,null,source.getNetwork());}  }
class C{  public AEADBadTagException(){  super();}  }
class C{  public EntryStream<K,V> filterKeyValue(BiPredicate<? super K,? super V> predicate){  return filter(null);}  }
class C{  void draw(Graphics2D g,int x,int y){  sprite.draw(g,x + xOffset,y + yOffset);}  }
class C{  public ConfigSetter(Class<?> configInterface,Method method){  super(configInterface,method);  Method getMethod=ConfigUtil.getGetMethod(configInterface,method);  Preconditions.checkNotNullArgument(getMethod,String.format("Cannot find getter for config \"%s\" property \"%s\"",configInterface.getSimpleName(),getPropertyName()));  sourceType=ConfigUtil.getSourceType(configInterface,method);  if (!String.class.equals(ConfigUtil.getMethodType(method)))   stringifier=TypeStringify.getInstance(configInterface,method);}  }
class C{  public ServiceStateException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public CpcRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  static Instruction makeMoveInstruction(IR ir,Register r1,ConstantOperand c){  Operator mv=IRTools.getMoveOp(c.getType());  RegisterOperand o1=new RegisterOperand(r1,c.getType());  Operand o2=c.copy();  Instruction s=Move.create(mv,o1,o2);  s.setSourcePosition(SSA_SYNTH_BCI,ir.getGc().getInlineSequence());  return s;}  }
class C{  public void test_munge03(){  assertEquals("test_context",GangliaMunge.munge("test context"));}  }
class C{  public Uniform(RandomEngine randomGenerator){  this(0,1,randomGenerator);}  }
class C{  public void testGeneratingJsonSchema() throws Exception {  ObjectMapper mapper=new ObjectMapper();  JsonSchema jsonSchema=mapper.generateJsonSchema(SimpleBean.class);  assertNotNull(jsonSchema);  assertTrue(jsonSchema.equals(jsonSchema));  assertFalse(jsonSchema.equals(null));  assertFalse(jsonSchema.equals("foo"));  assertNotNull(jsonSchema.toString());  assertNotNull(JsonSchema.getDefaultSchemaNode());  ObjectNode root=jsonSchema.getSchemaNode();  assertEquals("object",root.get("type").asText());  assertEquals(false,root.path("required").getBooleanValue());  JsonNode propertiesSchema=root.get("properties");  assertNotNull(propertiesSchema);  JsonNode property1Schema=propertiesSchema.get("property1");  assertNotNull(property1Schema);  assertEquals("integer",property1Schema.get("type").asText());  assertEquals(false,property1Schema.path("required").getBooleanValue());  JsonNode property2Schema=propertiesSchema.get("property2");  assertNotNull(property2Schema);  assertEquals("string",property2Schema.get("type").asText());  assertEquals(false,property2Schema.path("required").getBooleanValue());  JsonNode property3Schema=propertiesSchema.get("property3");  assertNotNull(property3Schema);  assertEquals("array",property3Schema.get("type").asText());  assertEquals(false,property3Schema.path("required").getBooleanValue());  assertEquals("string",property3Schema.get("items").get("type").asText());  JsonNode property4Schema=propertiesSchema.get("property4");  assertNotNull(property4Schema);  assertEquals("array",property4Schema.get("type").asText());  assertEquals(false,property4Schema.path("required").getBooleanValue());  assertEquals("number",property4Schema.get("items").get("type").asText());}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {  if (((encoding.getTag() & (byte)(0x1F)) != Krb5.KRB_AP_REP) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  DerValue der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  DerValue subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  pvno=subDer.getData().getBigInteger().intValue();  if (pvno != Krb5.PVNO) {    throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  msgType=subDer.getData().getBigInteger().intValue();  if (msgType != Krb5.KRB_AP_REP) {    throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);  }  encPart=EncryptedData.parse(der.getData(),(byte)0x02,false);  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,new Boolean(expected),new Boolean(actual));}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((MakeIndicator)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public synchronized boolean hasSectionToday(){  try {    final Query query=new Query().addSort(Keys.OBJECT_ID,SortDirection.DESCENDING).setCurrentPageNum(1).setPageSize(1);    query.setFilter(new PropertyFilter(Article.ARTICLE_TYPE,FilterOperator.EQUAL,Article.ARTICLE_TYPE_C_JOURNAL_SECTION));    final JSONObject result=articleRepository.get(query);    final List<JSONObject> journals=CollectionUtils.<JSONObject>jsonArrayToList(result.optJSONArray(Keys.RESULTS));    if (journals.isEmpty()) {      return false;    }    final JSONObject maybeToday=journals.get(0);    final long created=maybeToday.optLong(Article.ARTICLE_CREATE_TIME);    return DateUtils.isSameDay(new Date(created),new Date());  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Check section generated failed",e);    return false;  }}  }
class C{  public List<NamedRelatedResourceRep> listByConsistencyGroup(URI consistencyGroupId){  return getList(getByConsistencyGroupUrl(),consistencyGroupId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void countProximityPosition(int i){  if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  public final int read(byte b[],int off,int len){  if (len > buf.length - position) {    len=buf.length - position;  }  for (int i=0; i < len; i++) {    b[off + i]=buf[position++];  }  return len;}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (node instanceof Locator) {    Locator loc=(Locator)node;    fLocator.setColumnNumber(loc.getColumnNumber());    fLocator.setLineNumber(loc.getLineNumber());    fLocator.setPublicId(loc.getPublicId());    fLocator.setSystemId(loc.getSystemId());  } else {    fLocator.setColumnNumber(0);    fLocator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.DOCUMENT_TYPE_NODE:    serializeDocType((DocumentType)node,true);  break;case Node.COMMENT_NODE:serializeComment((Comment)node);break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:serializeElement((Element)node,true);break;case Node.PROCESSING_INSTRUCTION_NODE:serializePI((ProcessingInstruction)node);break;case Node.CDATA_SECTION_NODE:serializeCDATASection((CDATASection)node);break;case Node.TEXT_NODE:serializeText((Text)node);break;case Node.ENTITY_REFERENCE_NODE:serializeEntityReference((EntityReference)node,true);break;default :}}  }
class C{  protected ExpandedItem(Parcel parcel){  ParcelInfo parcelInfo=Concierge.receiveParcel(parcel);  int parcelableVersion=parcelInfo.getParcelVersion();  if (parcelableVersion >= Build.CM_VERSION_CODES.APRICOT) {    if (parcel.readInt() != 0) {      onClickPendingIntent=PendingIntent.CREATOR.createFromParcel(parcel);    }    if (parcel.readInt() != 0) {      itemTitle=parcel.readString();    }    if (parcel.readInt() != 0) {      itemSummary=parcel.readString();    }    itemDrawableResourceId=parcel.readInt();  }  if (parcelableVersion >= Build.CM_VERSION_CODES.BOYSENBERRY) {    if (parcel.readInt() != 0) {      itemBitmapResource=Bitmap.CREATOR.createFromParcel(parcel);    }  }  parcelInfo.complete();}  }
class C{  public void addObserveRelation(ObserveRelation relation){  relations.add(relation);}  }
class C{  public StateContext<S,E> postTransition(StateContext<S,E> stateContext){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    if ((stateContext=interceptor.postTransition(stateContext)) == null) {      break;    }  }  return stateContext;}  }
class C{  public void clear(){  while (this.positions.size() > 0 || this.controlPoints.size() > 0) {    this.removeControlPoint();  }  this.shapeCenterPosition=null;  this.shapeOrientation=null;  this.shapeRectangle=null;}  }
class C{  protected String valueToString(ValueType value){  if (value == null) {    return "null";  }  return value.toString();}  }
class C{  Vset checkBlockStatement(Environment env,Context ctx,Vset vset,Hashtable exp){  return check(env,ctx,vset,exp);}  }
class C{  private void postPlugin(boolean isPing) throws IOException {  PluginDescriptionFile description=plugin.getDescription();  String pluginName=description.getName();  boolean onlineMode=Bukkit.getServer().getOnlineMode();  String pluginVersion=description.getVersion();  String serverVersion=Bukkit.getVersion();  int playersOnline=this.getOnlinePlayers();  StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  String osversion=System.getProperty("os.version");  String java_version=System.getProperty("java.version");  int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  byte[] uncompressed=json.toString().getBytes();  byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  if (debug) {    System.out.println("[Metrics] Prepared request for " + pluginName + " uncompressed="+ uncompressed.length+ " compressed="+ compressed.length);  }  OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if (response == null || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  private void debugReflection(String msg){  if (debug) {    checker.message(javax.tools.Diagnostic.Kind.NOTE,MSG_PREFEX_REFLECTION + msg);  }}  }
class C{  public String serialize(){  return serialize(CUR_VERSION);}  }
class C{  public void write(CDATA cdata) throws SAXException {  String text=cdata.getText();  if (lexicalHandler != null) {    lexicalHandler.startCDATA();    write(text);    lexicalHandler.endCDATA();  } else {    write(text);  }}  }
class C{  public Builder deleteMembers(){  deleteFields.add("members");  return this;}  }
class C{  public void removeModel(ModelRenderer model){  models.remove(model);  modelBaseRot.remove(model);}  }
class C{  public void update(){  checkPermission(Permission.MANAGE_ROLES);  checkPosition();  JSONObject frame=getFrame();  if (name != null)   frame.put("name",name);  if (color >= 0)   frame.put("color",color);  if (grouped != null)   frame.put("hoist",grouped.booleanValue());  if (mentionable != null)   frame.put("mentionable",mentionable.booleanValue());  update(frame);}  }
class C{  Vector processSIMPLEPATTERNLIST(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");    int nPatterns=tokenizer.countTokens();    Vector patterns=new Vector(nPatterns);    for (int i=0; i < nPatterns; i++) {      XPath pattern=handler.createMatchPatternXPath(tokenizer.nextToken(),owner);      patterns.addElement(pattern);    }    return patterns;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public Deck subdeck(int low,int high){  Deck sub=new Deck(high - low + 1);  for (int i=0; i < sub.cards.length; i++) {    sub.cards[i]=this.cards[low + i];  }  return sub;}  }
class C{  public void readBinary(BinaryRawReader reader){  items=new TreeMap<>();  int count=reader.readInt();  for (int i=0; i < count; i++)   items.put(reader.readString(),reader.readByteArray());  staticObjects=reader.readByteArray();  timeout=reader.readInt();  lockNodeId=reader.readUuid();  lockId=reader.readLong();  lockTime=reader.readTimestamp();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.977 -0500",hash_original_method="C99C4952C168074F3FBA7AB2C1372665",hash_generated_method="F33ED7C3E1DB2DC82243B965350B6674") public boolean isMessagePartOfTransaction(SIPMessage messageToTest){  ViaList viaHeaders=messageToTest.getViaHeaders();  boolean transactionMatches;  String messageBranch=((Via)viaHeaders.getFirst()).getBranch();  boolean rfc3261Compliant=getBranch() != null && messageBranch != null && getBranch().toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE) && messageBranch.toLowerCase().startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE);  transactionMatches=false;  if (TransactionState.COMPLETED == this.getState()) {    if (rfc3261Compliant) {      transactionMatches=getBranch().equalsIgnoreCase(((Via)viaHeaders.getFirst()).getBranch()) && getMethod().equals(messageToTest.getCSeq().getMethod());    } else {      transactionMatches=getBranch().equals(messageToTest.getTransactionId());    }  } else   if (!isTerminated()) {    if (rfc3261Compliant) {      if (viaHeaders != null) {        if (getBranch().equalsIgnoreCase(((Via)viaHeaders.getFirst()).getBranch())) {          transactionMatches=getOriginalRequest().getCSeq().getMethod().equals(messageToTest.getCSeq().getMethod());        }      }    } else {      if (getBranch() != null) {        transactionMatches=getBranch().equalsIgnoreCase(messageToTest.getTransactionId());      } else {        transactionMatches=getOriginalRequest().getTransactionId().equalsIgnoreCase(messageToTest.getTransactionId());      }    }  }  return transactionMatches;}  }
class C{  public ParameterRef newParameterRef(Type paramType,int number){  return new ParameterRef(paramType,number);}  }
class C{  public void storeKnownDevices(){  StringBuffer listKnownDevices=new StringBuffer();  boolean first=true;  for (  String id : knownDevices) {    if (id.length() > 0) {      if (!first)       listKnownDevices=listKnownDevices.append(","); else       first=false;      listKnownDevices=listKnownDevices.append(id);    }  }  SharedPreferences.Editor editor=settings.edit();  editor.putString("knownDevices",listKnownDevices.toString());  editor.commit();}  }
class C{  private static int decode4to3(final byte[] source,final int srcOffset,final byte[] destination,final int destOffset,final int options){  byte[] DECODABET=Base64.getDecodabet(options);  if (source[srcOffset + 2] == Base64.EQUALS_SIGN) {    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12;    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == Base64.EQUALS_SIGN) {    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6;    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6 | DECODABET[source[srcOffset + 3]] & 0xFF;      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)outBuff;      return 3;    } catch (    Exception e) {      System.out.println("" + source[srcOffset] + ": "+ DECODABET[source[srcOffset]]);      System.out.println("" + source[srcOffset + 1] + ": "+ DECODABET[source[srcOffset + 1]]);      System.out.println("" + source[srcOffset + 2] + ": "+ DECODABET[source[srcOffset + 2]]);      System.out.println("" + source[srcOffset + 3] + ": "+ DECODABET[source[srcOffset + 3]]);      return -1;    }  }}  }
class C{  private static String generateSPNativeGuidFromIndication(Hashtable<String,String> cimIndication,String poolNativeId_IndicationAttribute){  String serialNumber=null;  String deviceType=null;  String poolNativeId=null;  String spInstanceId=null;  try {    spInstanceId=cimIndication.get(poolNativeId_IndicationAttribute);    String[] individualIds=spInstanceId.split(Constants.PATH_DELIMITER_REGEX);    try {      serialNumber=individualIds[1];      poolNativeId=spInstanceId.substring(spInstanceId.indexOf(serialNumber) + serialNumber.length() + 1,spInstanceId.length());    } catch (    Exception e) {      _logger.error("Format of SourceInstanceModelPathSPInstanceID is not correct {}",spInstanceId);      return null;    }    String modelPathCompositeId=cimIndication.get(CIMConstants.SOURCE_INSTANCE_MODEL_PATH_COMPOSITE_ID);    if (modelPathCompositeId != null && modelPathCompositeId.indexOf(CIMConstants.CLARIION_PREFIX) != -1) {      deviceType=_deviceTypeMap.get(StorageSystem.Type.vnxblock.name());    } else     if (modelPathCompositeId != null && modelPathCompositeId.indexOf(CIMConstants.SYMMETRIX_PREFIX) != -1) {      deviceType=_deviceTypeMap.get(StorageSystem.Type.vmax.name());    }    _logger.debug("Using serialNumber - {}, deviceType - {} poolNativeId - {} to compute NativeGuid ",new Object[]{serialNumber,deviceType,poolNativeId});    if (serialNumber == null || (serialNumber != null && serialNumber.length() <= 0) || deviceType == null || (deviceType != null && deviceType.length() <= 0) || poolNativeId == null || (poolNativeId != null && poolNativeId.length() <= 0)) {      return null;    }    String nativeGuid=getNativeGuidforPool(deviceType,serialNumber,poolNativeId);    _logger.debug("Required format of NativeGuid computed : {}",nativeGuid);    return nativeGuid;  } catch (  Exception e) {    _logger.error("Unable to compute native guid using indication's SourceInstanceModelPathSPInstanceID {} - {}",spInstanceId,e.getMessage());    return null;  }}  }
class C{  public boolean isNegative(){  return signum() == -1;}  }
class C{  @Override public void writeCData(String data) throws XMLStreamException {  log.log(Level.FINE,"writeCData({0})",data);  writeCharsInternal(data,false);}  }
class C{  private boolean isAVL(Node x){  if (x == null)   return true;  int bf=balanceFactor(x);  if (bf > 1 || bf < -1)   return false;  return isAVL(x.left) && isAVL(x.right);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private void closeDatabases(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migrateCloseDatabases");  m_source.close();  m_target.close();  m_source.reset();  m_source=null;  m_target.reset();  m_target=null;  m_direction=null;  m_objectType=null;  m_objectTypes=null;  m_sourceMap=null;  m_targetMap=null;  m_objectList=new ArrayList<String>();  m_trackingList=new ArrayList<String>();  m_tempIndexes=null;  m_counterPrg=null;  m_counterDrp=null;  m_counterUpd=null;  m_counterAdd=null;  m_totalPrg=null;  m_totalDrp=null;  m_totalUpd=null;  m_totalAdd=null;  m_detailType=null;  m_detailTypes=null;  m_detailCounterDrp=null;  m_detailCounterUpd=null;  m_detailCounterAdd=null;  System.gc();}  }
class C{  public boolean contains(CharSequence cs){  return map.containsKey(cs);}  }
class C{  public JSONObject makeReferralInfoProps(final String utmSource,final String utmCampaign,final String utmMedium,final String utmContent,final String utmTerm){  JSONObject props;  try {    props=new JSONObject();    props.put("Referral Source",utmSource);    props.put("Referral Campaign",utmCampaign);    props.put("Referral Medium",utmMedium);    props.put("Referral Campaign Content",utmContent);    props.put("Referral Term",utmTerm);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  private void applyForegroundColor(Color color,Control control,List exclusions){  if (exclusions.contains(control))   return;  control.setForeground(color);  if (control instanceof Composite) {    Control[] children=((Composite)control).getChildren();    for (int i=0; i < children.length; i++) {      applyForegroundColor(color,children[i],exclusions);    }  }}  }
class C{  public void tagFreeCharacter(int charId) throws IOException {  startTag(TAG_FREECHARACTER,false);  out.writeUI16(charId);  completeTag();}  }
class C{  public boolean isPlayable(){  return mPlayable;}  }
class C{  public AuthenticationFailedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public boolean put(Object object) throws CacheException, InterruptedException {  boolean putDone=super.put(object);  if (takeFirst) {    this.take();    this.takeFirst=false;  }synchronized (forWaiting) {    forWaiting.notifyAll();  }  return putDone;}  }
class C{  public JFXSpinner(){  super();  getStyleClass().add(DEFAULT_STYLE_CLASS);  initialize();}  }
class C{  public static PlatformUser createAdmin(DataService mgr,String userId,Organization org) throws NonUniqueBusinessKeyException {  PlatformUser user=Organizations.createUserForOrg(mgr,org,true,userId);  return user;}  }
class C{  public static DirichletBayesImWrapper serializableInstance(){  return new DirichletBayesImWrapper(BayesPmWrapper.serializableInstance(),new Parameters());}  }
class C{  public String applyMask(String value){  return formatter.applyMask(displayHints.getMask(),value);}  }
class C{  private static boolean hasMatchingAncestor(Context context,AccessibilityNodeInfoCompat node,NodeFilter filter){  if (node == null) {    return false;  }  final AccessibilityNodeInfoCompat result=getMatchingAncestor(context,node,filter);  if (result == null) {    return false;  }  result.recycle();  return true;}  }
class C{  private boolean doesUserNotHavePasswordAndNeedsIt(final User editedUser){  return !editedUser.getIsSingleUser() && editedUser.getPassword() == null;}  }
class C{  public SwingTerminal(TerminalSize initialTerminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalScrollController scrollController){  if (deviceConfiguration == null) {    deviceConfiguration=TerminalEmulatorDeviceConfiguration.getDefault();  }  if (fontConfiguration == null) {    fontConfiguration=SwingTerminalFontConfiguration.getDefault();  }  if (colorConfiguration == null) {    colorConfiguration=TerminalEmulatorColorConfiguration.getDefault();  }  terminalImplementation=new SwingTerminalImplementation(this,fontConfiguration,initialTerminalSize,deviceConfiguration,colorConfiguration,scrollController);}  }
class C{  public Double2D tv(final Double2D d1,final Double2D d2){  return new Double2D(tdx(d1.x,d2.x),tdy(d1.y,d2.y));}  }
class C{  static public String normalizeToEncoding(String origString_,Charset encoding_){  String normString=origString_;  CharsetEncoder encoder=encoding_.newEncoder();  if (!encoder.canEncode(origString_)) {    final int length=origString_.length();    char[] normSeq=new char[(origString_.length())];    int charNum=0;    for (int offset=0; offset < length; ) {      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);      Character replacedChar=replacement.getFirst();      int codepoint=replacement.getSecond();      if (null != replacedChar) {        normSeq[charNum]=replacedChar;        charNum++;      }      offset+=Character.charCount(codepoint);    }    normString=new String(normSeq);  }  return normString;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.282 -0400",hash_original_method="3DD1F54AED9C9361A6A54B10F128DAE9",hash_generated_method="3FB8B09BDF3878CD331AF8E6EEE97886") public boolean isTetheringOn(){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_PERM,"Need BLUETOOTH permission");synchronized (mBluetoothPanProfileHandler) {    return mBluetoothPanProfileHandler.isTetheringOn();  }}  }
class C{  @Override public final void release(final K ctx){  if (ctx.usage == USAGE_CLQ) {    ctxQueue.offer(getOrCreateReference(ctx));  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int widthMode=MeasureSpec.getMode(widthMeasureSpec);  int widthSize=MeasureSpec.getSize(widthMeasureSpec);  int heightMode=MeasureSpec.getMode(heightMeasureSpec);  int heightSize=MeasureSpec.getSize(heightMeasureSpec);  if (widthMode == MeasureSpec.AT_MOST && heightMode == MeasureSpec.AT_MOST) {    setMeasuredDimension(defaultWidth,defaultWidth);  } else   if (widthMode == MeasureSpec.AT_MOST) {    setMeasuredDimension(defaultWidth,heightSize);  } else   if (heightMode == MeasureSpec.AT_MOST) {    setMeasuredDimension(widthSize,defaultWidth);  }}  }
class C{  public ZoneRulesBuilder addWindow(ZoneOffset standardOffset,LocalDateTime until,TimeDefinition untilDefinition){  Objects.requireNonNull(standardOffset,"standardOffset");  Objects.requireNonNull(until,"until");  Objects.requireNonNull(untilDefinition,"untilDefinition");  TZWindow window=new TZWindow(standardOffset,until,untilDefinition);  if (windowList.size() > 0) {    TZWindow previous=windowList.get(windowList.size() - 1);    window.validateWindowOrder(previous);  }  windowList.add(window);  return this;}  }
class C{  public void storePersistentState(Editor editor,String prefix){  editor.putString(prefix + ".hash",String.valueOf(mEditText.getText().toString().hashCode()));  editor.putInt(prefix + ".maxSize",mEditHistory.mmMaxHistorySize);  editor.putInt(prefix + ".position",mEditHistory.mmPosition);  editor.putInt(prefix + ".size",mEditHistory.mmHistory.size());  int i=0;  for (  EditItem ei : mEditHistory.mmHistory) {    String pre=prefix + "." + i;    editor.putInt(pre + ".start",ei.mmStart);    editor.putString(pre + ".before",ei.mmBefore.toString());    editor.putString(pre + ".after",ei.mmAfter.toString());    i++;  }}  }
class C{  public CoordinateSystem(double minX,double maxX,double minY,double maxY){  this(minX,maxX,minY,maxY,AxisDirection.EAST,AxisDirection.SOUTH);}  }
class C{  public static ErThrowableInformation fromThrowableProxy(ThrowableProxy tp){  ErThrowableInformation ert=new ErThrowableInformation();  ert.setThrowable(ErThrowable.fromThrowableProxy(tp));  String[] rep=new String[tp.getExtendedStackTrace().length + 1];  rep[0]=tp.toString();  for (int i=0; i < rep.length - 1; i++) {    rep[i + 1]=tp.getExtendedStackTrace()[i].toString();  }  ert.setRep(rep);  return ert;}  }
class C{  public static boolean isNotEmpty(final short[] array){  return array != null && array.length != 0;}  }
class C{  public TextDrawable(TextView tv,boolean bindToViewsText,boolean bindToViewsPaint){  this(tv,tv.getText().toString(),false,false);}  }
class C{  @Override public boolean equals(Object itemSet){  if ((itemSet == null) || !(itemSet.getClass().equals(this.getClass()))) {    return false;  }  if (m_items.length != ((ItemSet)itemSet).m_items.length) {    return false;  }  for (int i=0; i < m_items.length; i++) {    if (m_items[i] != ((ItemSet)itemSet).m_items[i]) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextnomodificationallowederr.class,args);}  }
class C{  private void assertResultSet(boolean ordered,ResultSet rs,String[][] data) throws SQLException {  int len=rs.getMetaData().getColumnCount();  int rows=data.length;  if (rows == 0) {    if (rs.next()) {      fail("testResultSet expected rowCount:" + rows + " got:0");    }  }  int len2=data[0].length;  if (len < len2) {    fail("testResultSet expected columnCount:" + len2 + " got:"+ len);  }  for (int i=0; i < rows; i++) {    if (!rs.next()) {      fail("testResultSet expected rowCount:" + rows + " got:"+ i);    }    String[] row=getData(rs,len);    if (ordered) {      String[] good=data[i];      if (!testRow(good,row,good.length)) {        fail("testResultSet row not equal, got:\n" + formatRow(row) + "\n"+ formatRow(good));      }    } else {      boolean found=false;      for (int j=0; j < rows; j++) {        String[] good=data[i];        if (testRow(good,row,good.length)) {          found=true;          break;        }      }      if (!found) {        fail("testResultSet no match for row:" + formatRow(row));      }    }  }  if (rs.next()) {    String[] row=getData(rs,len);    fail("testResultSet expected rowcount:" + rows + " got:>="+ (rows + 1)+ " data:"+ formatRow(row));  }}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  Matcher matcher=getAllPattern().matcher(systemName);  matcher.matches();  if (matcher.group(7) != null) {    int num=Integer.valueOf(matcher.group(7)).intValue();    return matcher.group(1) + matcher.group(2) + (num / 1000)+ "B"+ (num % 1000);  } else {    int node=Integer.valueOf(matcher.group(4)).intValue();    int bit=Integer.valueOf(matcher.group(6)).intValue();    return matcher.group(1) + matcher.group(2) + node+ "B"+ bit;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String fieldName;  int fieldNum=0;  String assignmentType;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double xCoord, yCoord, value, z;  int progress;  double cellSize=-1.0;  int rows;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  boolean useRecID=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  fieldName=args[2];  assignmentType=args[3].toLowerCase();  if (args[4].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[4]);  }  if (!args[5].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[5]);  }  baseFileHeader=args[6];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    if (input.getShapeType() != ShapeType.POINT && input.getShapeType() != ShapeType.POINTZ && input.getShapeType() != ShapeType.POINTM && input.getShapeType() != ShapeType.MULTIPOINT && input.getShapeType() != ShapeType.MULTIPOINTZ && input.getShapeType() != ShapeType.MULTIPOINTM) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (int i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(fieldName)) {        fieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (fieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      rows=output.getNumberRows();      cols=output.getNumberColumns();    }    double[][] geometry;    if (assignmentType.equals("minimum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            value=Double.valueOf(data[fieldNum].toString());            z=output.getValue(row,col);            if (z == backgroundValue || z < value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("maximum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue || z > value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("sum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            } else {              output.setValue(row,col,value + z);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("first")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("last")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            output.setValue(row,col,value);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("mean")) {    } else     if (assignmentType.equals("range")) {    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static protected void runWatchDog(){  boolean warned=false;  logFine(WATCHDOG_NAME,"Starting");  try {    basicLoadEmergencyClasses();  } catch (  ExceptionInInitializerError e) {    boolean noSurprise=false;    Throwable cause=e.getCause();    if (cause != null) {      if (cause instanceof IllegalStateException) {        String msg=cause.getMessage();        if (msg.indexOf("Shutdown in progress") >= 0) {          noSurprise=true;        }      }    }    if (!noSurprise) {      logWarning(WATCHDOG_NAME,"Unable to load GemFire classes: ",e);    }    return;  }catch (  CancelException e) {  }catch (  Throwable t) {    logWarning(WATCHDOG_NAME,"Unable to initialize watchdog",t);    return;  }  for (; ; ) {    if (stopping) {      return;    }    try {      if (isCacheClosing) {        break;      }synchronized (failureSync) {        if (stopping) {          return;        }        logFine(WATCHDOG_NAME,"Waiting for disaster");        try {          failureSync.wait(WATCHDOG_WAIT * 1000);        } catch (        InterruptedException e) {        }        if (stopping) {          return;        }      }      if (failureActionCompleted) {        logInfo(WATCHDOG_NAME,"all actions completed; exiting");      }      if (failure == null) {        logFine(WATCHDOG_NAME,"no failure detected");        continue;      }      if (!warned) {        warned=logWarning(WATCHDOG_NAME,"failure detected",failure);      }      if (!gemfireCloseCompleted) {        logInfo(WATCHDOG_NAME,"closing GemFire");        try {          emergencyClose();        } catch (        Throwable t) {          logWarning(WATCHDOG_NAME,"trouble closing GemFire",t);          continue;        }        gemfireCloseCompleted=true;      }      if (!failureActionCompleted) {        Runnable r=failureAction;        if (r != null) {          logInfo(WATCHDOG_NAME,"running user's runnable");          try {            r.run();          } catch (          Throwable t) {            logWarning(WATCHDOG_NAME,"trouble running user's runnable",t);            continue;          }        }        failureActionCompleted=true;      }      stopping=true;      stopProctor();      if (exitOK) {        logWarning(WATCHDOG_NAME,CALLING_SYSTEM_EXIT,exitExcuse);        System.exit(1);      }      logInfo(WATCHDOG_NAME,"exiting");      return;    } catch (    Throwable t) {      logWarning(WATCHDOG_NAME,"thread encountered a problem: " + t,t);    }  }}  }
class C{  public PotentialProducer createPotentialProducer(final Object baseObject,final AttributeType type){  String methodName=type.getMethodName();  Class<?> dataType=type.getDataType();  PotentialProducer producer=createPotentialProducer(baseObject,methodName,dataType);  String description=type.getBaseDescription();  producer.setCustomDescription(description);  return producer;}  }
class C{  public boolean isTextureInitializationFailed(){  return this.textureInitializationFailed;}  }
class C{  @Override public boolean stopSelfResultForPlugin(int startId){  if (mPluginHostService != null) {    return mPluginHostService.stopSelfResult(startId);  }  return false;}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public int numSquares2(int n){  int[] res=new int[n + 1];  Arrays.fill(res,Integer.MAX_VALUE);  res[0]=0;  for (int i=0; i <= n; i++) {    for (int j=1; j * j <= i; j++) {      res[i]=Math.min(res[i],res[i - j * j] + 1);    }  }  return res[n];}  }
class C{  private void fetchStats(NetworkTemplate template){  INetworkStatsSession session=null;  try {    mStatsService.forceUpdate();    session=mStatsService.openSession();    final NetworkStats stats=session.getSummaryForAllUid(template,Long.MIN_VALUE,Long.MAX_VALUE,false);    reportStats(stats);  } catch (  RemoteException e) {    Log.w(LOG_TAG,"Failed to fetch network stats.");  } finally {    TrafficStats.closeQuietly(session);  }}  }
class C{  public int readVarInt() throws IOException {  int b=readByte();  if (b >= 0) {    return b;  }  int x=b & 0x7f;  b=readByte();  if (b >= 0) {    return x | (b << 7);  }  x|=(b & 0x7f) << 7;  b=readByte();  if (b >= 0) {    return x | (b << 14);  }  x|=(b & 0x7f) << 14;  b=readByte();  if (b >= 0) {    return x | b << 21;  }  return x | ((b & 0x7f) << 21) | (readByte() << 28);}  }
class C{  public TsFciRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  @LargeTest public void testCameraPairwiseScenario16() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MIN,WhiteBalance.AUTO,SceneMode.PARTY,PictureSize.SMALL,Geotagging.OFF);}  }
class C{  public void runButtonActionPerformed(java.awt.event.ActionEvent e){  if (!mRunButton.isSelected()) {    return;  }  boolean ok=false;  for (int i=0; i < MAXSEQUENCE; i++) {    if (mUseField[i].isSelected()) {      ok=true;    }  }  if (!ok) {    mRunButton.setSelected(false);    return;  }  mNextSequenceElement=0;  sendNextItem();}  }
class C{  public RoundedBitmapBuilder cornerRadiusDp(int corner,float radius){  return cornerRadius(corner,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radius,mDisplayMetrics));}  }
class C{  private static String linkToHtml(Link l){  if (l == null) {    return "null";  }  StringBuilder result=new StringBuilder();  result.append("<div class=\"Link\"><b class=\"Link\">Link:</b>" + l.getType() + ": \""+ convertTags(l.getText())+ "\" -> \""+ convertTags(l.getTarget())+ "\"");  if (l.getParameters().size() != 0) {    for (    String parameter : l.getParameters()) {      result.append("<br/>\nPARAMETER: \"" + convertTags(parameter) + "\"");    }  }  result.append("</div>\n");  return result.toString();}  }
class C{  public X509Ext(ASN1ObjectIdentifier oid,byte[] value,boolean critical){  this.oid=oid;  this.value=new byte[value.length];  System.arraycopy(value,0,this.value,0,this.value.length);  this.critical=critical;  name=lookupFriendlyName();}  }
class C{  @SmallTest public void testCreateSpeechRules_metadata() throws Exception {  final String strategy="<ss:rule>" + "  <ss:metadata>" + "    <ss:queuing>UNINTERRUPTIBLE</ss:queuing>"+ "  </ss:metadata>"+ "</ss:rule>";  final AccessibilityEvent event=AccessibilityEvent.obtain();  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  final Utterance utterance=new Utterance();  final boolean processed=processor.processEvent(event,utterance);  assertTrue("The event must match the filter",processed);  assertEquals("The meta-data must have its queuing poperty set",2,utterance.getMetadata().get(Utterance.KEY_METADATA_QUEUING));}  }
class C{  public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  public Builder mutable(){  return new Builder(this);}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  Raptor.getInstance().getPreferences().setValue(service.getConnector().getShortName() + "-" + PreferenceKeys.BUG_WHO_QUADRANT,newQuadrant);}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String qual=getString(stack);  return new Long(MMC.getInstance().getQualityOverallBitrate(qual));}  }
class C{  public int capacity(){  return value.length;}  }
class C{  public static String toUnitbytes(long bytes){  if (bytes < 0) {    return "? " + GENERAL_UNIT_KILOBYTES;  }  long unitValue;  String unitName;  if (bytes < 0xA00000) {    unitValue=0x400;    unitName=GENERAL_UNIT_KILOBYTES;  } else   if (bytes < 0x280000000L) {    unitValue=0x100000;    unitName=GENERAL_UNIT_MEGABYTES;  } else   if (bytes < 0xA0000000000L) {    unitValue=0x40000000;    unitName=GENERAL_UNIT_GIGABYTES;  } else {    unitValue=0x10000000000L;    unitName=GENERAL_UNIT_TERABYTES;  }  NumberFormat numberFormat;  if ((double)bytes * 100 / unitValue < 99995)   numberFormat=NUMBER_FORMAT1; else   numberFormat=NUMBER_FORMAT0;  try {    return numberFormat.format((double)bytes / unitValue) + " " + unitName;  } catch (  ArithmeticException ae) {    return "0 " + unitName;  }}  }
class C{  public void testAllSystem(String trainnameNRC,String trainnameGUMLTLT,String trainnameKLUE) throws Exception {  SentimentSystemNRC nrcSystem=new SentimentSystemNRC(tweetList);  Map<String,ClassificationResult> nrcResult=nrcSystem.test(trainnameNRC);  SentimentSystemGUMLTLT gumltltSystem=new SentimentSystemGUMLTLT(tweetList);  Map<String,ClassificationResult> gumltltResult=gumltltSystem.test(trainnameGUMLTLT);  SentimentSystemKLUE klueSystem=new SentimentSystemKLUE(tweetList);  Map<String,ClassificationResult> klueResult=klueSystem.test(trainnameKLUE);  this.evalAllModels(nrcResult,gumltltResult,klueResult);}  }
class C{  public boolean observed(String form){  return table.containsKey(form);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private boolean startProcess(){  log.fine(m_pi.toString());  boolean started=false;  if (DB.isRemoteProcess()) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.process(m_wscctx,m_pi);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else       log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);      started=false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      started=false;    }  }  if (!started && !m_IsServerProcess) {    ProcessCall myObject=null;    try {      Class myClass=Class.forName(m_pi.getClassName());      myObject=(ProcessCall)myClass.newInstance();      if (myObject == null)       m_pi.setSummary("No Instance for " + m_pi.getClassName(),true); else       myObject.startProcess(m_wscctx,m_pi,m_trx);      if (m_trx != null) {        m_trx.commit();        m_trx.close();      }    } catch (    Exception e) {      if (m_trx != null) {        m_trx.rollback();        m_trx.close();      }      m_pi.setSummary("Error starting Class " + m_pi.getClassName(),true);      log.log(Level.SEVERE,m_pi.getClassName(),e);    }  }  return !m_pi.isError();}  }
class C{  public static Set notifyListeners(Set cacheOpReceivers,Set adjunctRecipients,FilterRoutingInfo filterInfo,PartitionedRegion r,EntryEventImpl event,boolean ifNew,boolean ifOld,DirectReplyProcessor processor,boolean sendDeltaWithFullValue){  PutMessage msg=new PutMessage(Collections.EMPTY_SET,true,r.getPRId(),processor,event,0,ifNew,ifOld,null,false);  msg.setInternalDs(r.getSystem());  msg.versionTag=event.getVersionTag();  msg.setSendDeltaWithFullValue(sendDeltaWithFullValue);  return msg.relayToListeners(cacheOpReceivers,adjunctRecipients,filterInfo,event,r,processor);}  }
class C{  public void clearCache(){  if (cumulative) {    for (    Map.Entry<K,SumEntry> e : sums.entrySet()) {      SumEntry val=e.getValue();      val.changed=false;    }  } else {    sums.clear();  }}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=Math.abs((int)Math.ceil(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  private String shortFQN(String fqn,String method,int size){  String line=fqn + "." + method;  if (line.length() > size) {    line="..." + line.substring(3,size);  }  return line;}  }
class C{  private byte adviseOp(byte requestedOpCode,EntryEventImpl event){{    Object oldVal;    if (this.op == OP_NULL) {      oldVal=getOriginalValue();    } else {      oldVal=getNearSidePendingValue();    }    Region region=event.getRegion();    boolean needOldValue=region instanceof HARegion || region instanceof BucketRegion;    event.setTXEntryOldValue(oldVal,needOldValue);  }  byte advisedOpCode=OP_NULL;switch (requestedOpCode) {case OP_L_DESTROY:switch (this.op) {case OP_NULL:      advisedOpCode=requestedOpCode;    break;case OP_L_DESTROY:case OP_CREATE_LD:case OP_LLOAD_CREATE_LD:case OP_NLOAD_CREATE_LD:case OP_PUT_LD:case OP_LLOAD_PUT_LD:case OP_NLOAD_PUT_LD:case OP_D_INVALIDATE_LD:case OP_D_DESTROY:  throw new IllegalStateException(LocalizedStrings.TXEntryState_UNEXPECTED_CURRENT_OP_0_FOR_REQUESTED_OP_1.toLocalizedString(new Object[]{opToString(),opToString(requestedOpCode)}));case OP_L_INVALIDATE:advisedOpCode=requestedOpCode;break;case OP_PUT_LI:advisedOpCode=OP_PUT_LD;break;case OP_LLOAD_PUT_LI:advisedOpCode=OP_LLOAD_PUT_LD;break;case OP_NLOAD_PUT_LI:advisedOpCode=OP_NLOAD_PUT_LD;break;case OP_D_INVALIDATE:advisedOpCode=OP_D_INVALIDATE_LD;break;case OP_CREATE_LI:advisedOpCode=OP_CREATE_LD;break;case OP_LLOAD_CREATE_LI:advisedOpCode=OP_LLOAD_CREATE_LD;break;case OP_NLOAD_CREATE_LI:advisedOpCode=OP_NLOAD_CREATE_LD;break;case OP_CREATE:advisedOpCode=OP_CREATE_LD;break;case OP_SEARCH_CREATE:advisedOpCode=requestedOpCode;break;case OP_LLOAD_CREATE:advisedOpCode=OP_LLOAD_CREATE_LD;break;case OP_NLOAD_CREATE:advisedOpCode=OP_NLOAD_CREATE_LD;break;case OP_LOCAL_CREATE:advisedOpCode=requestedOpCode;break;case OP_PUT:advisedOpCode=OP_PUT_LD;break;case OP_SEARCH_PUT:advisedOpCode=requestedOpCode;break;case OP_LLOAD_PUT:advisedOpCode=OP_LLOAD_PUT_LD;break;case OP_NLOAD_PUT:advisedOpCode=OP_NLOAD_PUT_LD;break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_UNHANDLED_0.toLocalizedString(opToString()));}break;case OP_D_DESTROY:Assert.assertTrue(!isOpDestroy(),"Transactional destroy assertion op=" + this.op);advisedOpCode=requestedOpCode;break;case OP_L_INVALIDATE:switch (this.op) {case OP_NULL:advisedOpCode=requestedOpCode;break;case OP_L_DESTROY:case OP_CREATE_LD:case OP_LLOAD_CREATE_LD:case OP_NLOAD_CREATE_LD:case OP_PUT_LD:case OP_LLOAD_PUT_LD:case OP_NLOAD_PUT_LD:case OP_D_DESTROY:case OP_D_INVALIDATE_LD:throw new IllegalStateException(LocalizedStrings.TXEntryState_UNEXPECTED_CURRENT_OP_0_FOR_REQUESTED_OP_1.toLocalizedString(new Object[]{opToString(),opToString(requestedOpCode)}));case OP_L_INVALIDATE:advisedOpCode=requestedOpCode;break;case OP_LLOAD_PUT_LI:case OP_NLOAD_PUT_LI:case OP_LLOAD_CREATE_LI:case OP_NLOAD_CREATE_LI:advisedOpCode=this.op;break;case OP_PUT_LI:advisedOpCode=OP_PUT_LI;break;case OP_CREATE_LI:advisedOpCode=OP_CREATE_LI;break;case OP_D_INVALIDATE:advisedOpCode=OP_D_INVALIDATE;break;case OP_CREATE:advisedOpCode=OP_CREATE_LI;break;case OP_SEARCH_CREATE:advisedOpCode=OP_LOCAL_CREATE;break;case OP_LLOAD_CREATE:advisedOpCode=OP_LLOAD_CREATE_LI;break;case OP_NLOAD_CREATE:advisedOpCode=OP_NLOAD_CREATE_LI;break;case OP_LOCAL_CREATE:advisedOpCode=OP_LOCAL_CREATE;break;case OP_PUT:advisedOpCode=OP_PUT_LI;break;case OP_SEARCH_PUT:advisedOpCode=requestedOpCode;break;case OP_LLOAD_PUT:advisedOpCode=OP_LLOAD_PUT_LI;break;case OP_NLOAD_PUT:advisedOpCode=OP_NLOAD_PUT_LI;break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_UNHANDLED_0.toLocalizedString(opToString()));}break;case OP_D_INVALIDATE:switch (this.op) {case OP_NULL:advisedOpCode=requestedOpCode;break;case OP_L_DESTROY:case OP_CREATE_LD:case OP_LLOAD_CREATE_LD:case OP_NLOAD_CREATE_LD:case OP_PUT_LD:case OP_LLOAD_PUT_LD:case OP_NLOAD_PUT_LD:case OP_D_INVALIDATE_LD:case OP_D_DESTROY:throw new IllegalStateException(LocalizedStrings.TXEntryState_UNEXPECTED_CURRENT_OP_0_FOR_REQUESTED_OP_1.toLocalizedString(new Object[]{opToString(),opToString(requestedOpCode)}));case OP_D_INVALIDATE:case OP_L_INVALIDATE:advisedOpCode=OP_D_INVALIDATE;break;case OP_PUT_LI:case OP_LLOAD_PUT_LI:case OP_NLOAD_PUT_LI:case OP_CREATE_LI:case OP_LLOAD_CREATE_LI:case OP_NLOAD_CREATE_LI:advisedOpCode=this.op;break;case OP_CREATE:advisedOpCode=OP_CREATE;break;case OP_SEARCH_CREATE:advisedOpCode=OP_LOCAL_CREATE;break;case OP_LLOAD_CREATE:advisedOpCode=OP_CREATE;break;case OP_NLOAD_CREATE:advisedOpCode=OP_CREATE;break;case OP_LOCAL_CREATE:advisedOpCode=OP_LOCAL_CREATE;break;case OP_PUT:case OP_SEARCH_PUT:case OP_LLOAD_PUT:case OP_NLOAD_PUT:advisedOpCode=requestedOpCode;break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_UNHANDLED_0.toLocalizedString(opToString()));}break;case OP_CREATE:case OP_SEARCH_CREATE:case OP_LLOAD_CREATE:case OP_NLOAD_CREATE:advisedOpCode=requestedOpCode;break;case OP_PUT:switch (this.op) {case OP_CREATE:case OP_SEARCH_CREATE:case OP_LLOAD_CREATE:case OP_NLOAD_CREATE:case OP_LOCAL_CREATE:case OP_CREATE_LI:case OP_LLOAD_CREATE_LI:case OP_NLOAD_CREATE_LI:case OP_CREATE_LD:case OP_LLOAD_CREATE_LD:case OP_NLOAD_CREATE_LD:case OP_PUT_LD:case OP_LLOAD_PUT_LD:case OP_NLOAD_PUT_LD:case OP_D_INVALIDATE_LD:case OP_L_DESTROY:case OP_D_DESTROY:advisedOpCode=OP_CREATE;break;default :advisedOpCode=requestedOpCode;break;}break;case OP_SEARCH_PUT:switch (this.op) {case OP_NULL:advisedOpCode=requestedOpCode;break;case OP_L_INVALIDATE:advisedOpCode=requestedOpCode;break;case OP_PUT_LI:advisedOpCode=OP_PUT;break;case OP_LLOAD_PUT_LI:advisedOpCode=OP_LLOAD_PUT;break;case OP_NLOAD_PUT_LI:advisedOpCode=OP_NLOAD_PUT;break;case OP_CREATE_LI:advisedOpCode=OP_CREATE;break;case OP_LLOAD_CREATE_LI:advisedOpCode=OP_LLOAD_CREATE;break;case OP_NLOAD_CREATE_LI:advisedOpCode=OP_NLOAD_CREATE;break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_PREVIOUS_OP_0_UNEXPECTED_FOR_REQUESTED_OP_1.toLocalizedString(new Object[]{opToString(),opToString(requestedOpCode)}));}break;case OP_LLOAD_PUT:case OP_NLOAD_PUT:switch (this.op) {case OP_NULL:case OP_L_INVALIDATE:case OP_PUT_LI:case OP_LLOAD_PUT_LI:case OP_NLOAD_PUT_LI:case OP_D_INVALIDATE:advisedOpCode=requestedOpCode;break;case OP_CREATE:case OP_LOCAL_CREATE:case OP_CREATE_LI:case OP_LLOAD_CREATE_LI:case OP_NLOAD_CREATE_LI:if (requestedOpCode == OP_LLOAD_PUT) {advisedOpCode=OP_LLOAD_CREATE;} else {advisedOpCode=OP_NLOAD_CREATE;}break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_PREVIOUS_OP_0_UNEXPECTED_FOR_REQUESTED_OP_1.toLocalizedString(new Object[]{opToString(),opToString(requestedOpCode)}));}break;default :throw new IllegalStateException(LocalizedStrings.TXEntryState_OPCODE_0_SHOULD_NEVER_BE_REQUESTED.toLocalizedString(opToString(requestedOpCode)));}return advisedOpCode;}  }
class C{  protected void computeOffsets(DrawContext dc){  if (dc.getFrameTimeStamp() != this.frameNumber) {    final BasicWWTexture texture=this.getTexture();    final int viewportWidth=dc.getView().getViewport().width;    final int viewportHeight=dc.getView().getViewport().height;    if (texture != null) {      this.originalImageWidth=texture.getWidth(dc);      this.originalImageHeight=texture.getHeight(dc);    } else     if (this.getImageSource() == null) {      this.originalImageWidth=1;      this.originalImageHeight=1;    } else {      this.frameNumber=dc.getFrameTimeStamp();      return;    }    if (this.size != null) {      Dimension d=this.size.compute(this.originalImageWidth,this.originalImageHeight,viewportWidth,viewportHeight);      this.width=d.width;      this.height=d.height;    } else {      this.width=this.originalImageWidth;      this.height=this.originalImageHeight;    }    Offset rotationOffset=this.getRotationOffset();    if (rotationOffset != null) {      Point.Double pointD=rotationOffset.computeOffset(this.width,this.height,null,null);      rotationPoint=new Point((int)pointD.x,(int)pointD.y);    } else {      this.rotationPoint=new Point(this.width,this.height);    }    if (this.screenOffset != null) {      Point.Double pointD=this.screenOffset.computeOffset(viewportWidth,viewportHeight,null,null);      this.screenLocation=new Point((int)pointD.x,(int)(pointD.y));    } else {      this.screenLocation=new Point(viewportWidth / 2,viewportHeight / 2);    }    this.awtScreenLocation=new Point(this.screenLocation.x,viewportHeight - this.screenLocation.y);    Point.Double overlayPoint;    if (this.imageOffset != null)     overlayPoint=this.imageOffset.computeOffset(this.width,this.height,null,null); else     overlayPoint=new Point.Double(this.originalImageWidth / 2.0,this.originalImageHeight / 2.0);    this.dx=-overlayPoint.x;    this.dy=-overlayPoint.y;    this.frameNumber=dc.getFrameTimeStamp();  }}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  synchronized void markRemoved(){  if (!(!removed)) {    throw new AssertionError();  }  removed=true;  if (!permanent && callCount == 0) {    ObjectTable.decrementKeepAliveCount();  }  if (exportedTransport != null) {    exportedTransport.targetUnexported();  }}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  public ServiceChannel createServiceChannel(ApplicationDescription applicationDescription) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(applicationDescription));}  }
class C{  public void close(){  this._stats.close();}  }
class C{  public WebSocket disconnect(int closeCode,String reason,long closeDelay){synchronized (mStateManager) {switch (mStateManager.getState()) {case CREATED:      finishAsynchronously();    return this;case OPEN:  break;default :return this;}mStateManager.changeToClosing(CloseInitiator.CLIENT);WebSocketFrame frame=WebSocketFrame.createCloseFrame(closeCode,reason);sendFrame(frame);}mListenerManager.callOnStateChanged(CLOSING);if (closeDelay < 0) {closeDelay=DEFAULT_CLOSE_DELAY;}stopThreads(closeDelay);return this;}  }
class C{  @Override protected void doPreRender(KMLTraversalContext tc,DrawContext dc){  if (this.getRenderable() == null)   this.initializeRenderable(tc);  KMLRenderable r=this.getRenderable();  if (r != null) {    r.preRender(tc,dc);  }}  }
class C{  public static boolean containsHTML(String text){  if ((text == null) || text.isEmpty()) {    return false;  }  return (text.indexOf('<') != -1) || (text.indexOf('>') != -1);}  }
class C{  private CResultFilter(){}  }
class C{  public void transformValues(TDoubleFunction function){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  private void readEntityDeclaration() throws IOException, XmlPullParserException {  read(START_ENTITY);  boolean generalEntity=true;  skip();  if (peekCharacter() == '%') {    generalEntity=false;    position++;    skip();  }  String name=readName();  skip();  int quote=peekCharacter();  String entityValue;  if (quote == '"' || quote == '\'') {    position++;    entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION);    if (peekCharacter() == quote) {      position++;    }  } else   if (readExternalId(true,false)) {    entityValue="";    skip();    if (peekCharacter() == NDATA[0]) {      read(NDATA);      skip();      readName();    }  } else {    throw new XmlPullParserException("Expected entity value or external ID",this,null);  }  if (generalEntity && processDocDecl) {    if (documentEntities == null) {      documentEntities=new HashMap<String,char[]>();    }    documentEntities.put(name,entityValue.toCharArray());  }  skip();  read('>');}  }
class C{  public static double recall(double truePositive,double falseNegative){  final double totalPositive=truePositive + falseNegative;  if (totalPositive == 0) {    throw new IllegalArgumentException();  }  return truePositive / totalPositive;}  }
class C{  public static List<String> readFileToList(String filePath,String charsetName){  File file=new File(filePath);  List<String> fileContent=new ArrayList<String>();  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      fileContent.add(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public IndexSegment(final IndexSegmentStore fileStore){  super(fileStore,ImmutableNodeFactory.INSTANCE,true,fileStore.getIndexMetadata(),fileStore.getIndexMetadata().getIndexSegmentRecordCompressorFactory());  this.fileStore=(IndexSegmentStore)fileStore;  _reopen();}  }
class C{  public QueryResultHandlerException(String msg){  super(msg);}  }
class C{  public static CSVFormat newFormat(final char delimiter){  return new CSVFormat(delimiter,null,null,null,null,false,false,null,null,null,false);}  }
class C{  public static EntropyRateCalculatorDiscrete newInstance(int base,int history){  return new EntropyRateCalculatorDiscrete(base,history);}  }
class C{  public StrTokenizer(final String input,final char delim){  this(input);  setDelimiterChar(delim);}  }
class C{  private void updatePturb(){  double xj=0;  double yj=0;  for (int j=0; j < m_plots.size(); j++) {    PlotData2D temp_plot=(m_plots.get(j));    for (int i=0; i < temp_plot.m_plotInstances.numInstances(); i++) {      if (temp_plot.m_plotInstances.instance(i).isMissing(m_xIndex) || temp_plot.m_plotInstances.instance(i).isMissing(m_yIndex)) {      } else {        if (m_JitterVal > 0) {          xj=m_JRand.nextGaussian();          yj=m_JRand.nextGaussian();        }        temp_plot.m_pointLookup[i][2]=pturbX(temp_plot.m_pointLookup[i][0],xj);        temp_plot.m_pointLookup[i][3]=pturbY(temp_plot.m_pointLookup[i][1],yj);      }    }  }}  }
class C{  @Override public void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  public GeneratorModel createGeneratorModel(){  GeneratorModelImpl generatorModel=new GeneratorModelImpl();  return generatorModel;}  }
class C{  public final V remove(int index){  if (GWT.isScript()) {    V ret=jsArray.get(index);    jsArray.remove(index);    return ret;  } else {    return javaArray.remove(index);  }}  }
class C{  public void createDefaultState(final String fileContentDescription,final EditorType editorType,final Keymap keymap,final int numberOfLines,final int tabSize){  setCharPosition(null);  setLineNumber(numberOfLines);  setFileType(fileContentDescription);  setEditorTypeFromInstance(editorType);  setKeybindingsFromInstance(keymap);  setTabSize(tabSize);}  }
class C{  static CipherSuite valueOf(int id1,int id2){  id1&=0xff;  id2&=0xff;  int id=(id1 << 8) | id2;  CipherSuite c=idMap.get(id);  if (c == null) {    String h1=Integer.toString(id1,16);    String h2=Integer.toString(id2,16);    c=new CipherSuite("Unknown 0x" + h1 + ":0x"+ h2,id);  }  return c;}  }
class C{  protected synchronized WebBackForwardList clone(){  throw new MustOverrideException();}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  public final boolean isOperationRunning(final int id){  return mChronosListener.isRunning(id);}  }
class C{  @CanIgnoreReturnValue @Override public boolean put(@Nullable K key,@Nullable V value){  addNode(key,value,null);  return true;}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (wrappedKey.length == 0) {    throw new InvalidKeyException("The wrapped key is empty");  }  byte[] buffer=new byte[wrappedKey.length];  cipher.decrypt(wrappedKey,0,wrappedKey.length,buffer,0);  for (int i=0; i < buffer.length / 2; i++) {    byte temp=buffer[i];    buffer[i]=buffer[buffer.length - 1 - i];    buffer[buffer.length - 1 - i]=temp;  }  iv=new byte[IV_LEN];  System.arraycopy(buffer,0,iv,0,iv.length);  cipher.init(true,cipherKey.getAlgorithm(),cipherKey.getEncoded(),iv);  byte[] buffer2=new byte[buffer.length - iv.length];  cipher.decrypt(buffer,iv.length,buffer2.length,buffer2,0);  int keyValLen=buffer2.length - CHECKSUM_LEN;  byte[] cks=getChecksum(buffer2,0,keyValLen);  int offset=keyValLen;  for (int i=0; i < CHECKSUM_LEN; i++) {    if (buffer2[offset + i] != cks[i]) {      throw new InvalidKeyException("Checksum comparison failed");    }  }  cipher.init(decrypting,cipherKey.getAlgorithm(),cipherKey.getEncoded(),IV2);  byte[] out=new byte[keyValLen];  System.arraycopy(buffer2,0,out,0,keyValLen);  return ConstructKeys.constructKey(out,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public byte[] toByteArray() throws IOException {  return text == null ? new byte[0] : text.getBytes("UTF-8");}  }
class C{  private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractElementNS ae=(AbstractElementNS)n;  ae.namespaceURI=namespaceURI;  return n;}  }
class C{  private Future<ReplDBMSHeader> waitForCommittedEvent(WatchPredicate<ReplDBMSHeader> predicate,boolean cancel) throws InterruptedException {  return waitForEvent(predicate,cancel,commitWatches,true);}  }
class C{  public void go(){  dim.go();}  }
class C{  public void registerBugCollection(BugCollection bugCollection){}  }
class C{  public Instances kNearestNeighbours(Instance target,int k) throws Exception {  MyHeap heap=new MyHeap(k);  if (m_Stats != null)   m_Stats.searchStart();  nearestNeighbours(heap,m_Root,target,k);  if (m_Stats != null)   m_Stats.searchFinish();  Instances neighbours=new Instances(m_Instances,heap.totalSize());  m_Distances=new double[heap.totalSize()];  int[] indices=new int[heap.totalSize()];  int i=1;  MyHeapElement h;  while (heap.noOfKthNearest() > 0) {    h=heap.getKthNearest();    indices[indices.length - i]=h.index;    m_Distances[indices.length - i]=h.distance;    i++;  }  while (heap.size() > 0) {    h=heap.get();    indices[indices.length - i]=h.index;    m_Distances[indices.length - i]=h.distance;    i++;  }  m_DistanceFunction.postProcessDistances(m_Distances);  for (i=0; i < indices.length; i++)   neighbours.add(m_Instances.instance(indices[i]));  return neighbours;}  }
class C{  public SocketCommandServer(){  this(0,50,false);}  }
class C{  public static NbtInputStream fromDeflater(File in,NbtLimiter limiter) throws IOException {  return fromDeflater(new FileInputStream(in),limiter);}  }
class C{  public Builder user(final User user){  this.user=user;  return this;}  }
class C{  public static final String listToString(List<Object> l){  StringBuffer row=new StringBuffer();  for (  Object obj : l) {    row.append(obj.toString()).append(" ");  }  return (row.toString());}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("java.util.Scanner");  sb.append("[delimiters=" + delimPattern + "]");  sb.append("[position=" + position + "]");  sb.append("[match valid=" + matchValid + "]");  sb.append("[need input=" + needInput + "]");  sb.append("[source closed=" + sourceClosed + "]");  sb.append("[skipped=" + skipped + "]");  sb.append("[group separator=" + groupSeparator + "]");  sb.append("[decimal separator=" + decimalSeparator + "]");  sb.append("[positive prefix=" + positivePrefix + "]");  sb.append("[negative prefix=" + negativePrefix + "]");  sb.append("[positive suffix=" + positiveSuffix + "]");  sb.append("[negative suffix=" + negativeSuffix + "]");  sb.append("[NaN string=" + nanString + "]");  sb.append("[infinity string=" + infinityString + "]");  return sb.toString();}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      wait();    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  public boolean isPurge(){  return purge;}  }
class C{  public VolumeMonitor(SpeechController speechController,TalkBackService context){  if (speechController == null)   throw new IllegalStateException();  mContext=context;  mSpeechController=speechController;  mAudioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  mTelephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);}  }
class C{  public ResourceLineage(){  resourceMap=new LinkedMap<>();}  }
class C{  public void normalise(){  this.dirty=true;  float mag=(float)Math.sqrt(points[3] * points[3] + points[0] * points[0] + points[1] * points[1] + points[2] * points[2]);  points[3]=points[3] / mag;  points[0]=points[0] / mag;  points[1]=points[1] / mag;  points[2]=points[2] / mag;}  }
class C{  protected void _addFields(){  final AnnotationIntrospector ai=_annotationIntrospector;  for (  AnnotatedField f : _classDef.fields()) {    String implName=f.getName();    String explName;    if (ai == null) {      explName=null;    } else     if (_forSerialization) {      explName=ai.findSerializablePropertyName(f);    } else {      explName=ai.findDeserializablePropertyName(f);    }    if ("".equals(explName)) {      explName=implName;    }    boolean visible=(explName != null);    if (!visible) {      visible=_visibilityChecker.isFieldVisible(f);    }    boolean ignored=(ai != null) && ai.hasIgnoreMarker(f);    _property(implName).addField(f,explName,visible,ignored);  }}  }
class C{  public ParsedURL(String urlStr){  userAgent=getGlobalUserAgent();  data=parseURL(urlStr);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement04.class,args);}  }
class C{  private void _shutdownScheduledExecutorService(){  _logger.info("Shutting down scheduled disable warden alerts executor service");  _scheduledExecutorService.shutdown();  try {    if (!_scheduledExecutorService.awaitTermination(5,TimeUnit.SECONDS)) {      _logger.warn("Shutdown of scheduled disable warden alerts executor service timed out after 5 seconds.");      _scheduledExecutorService.shutdownNow();    }  } catch (  InterruptedException ex) {    _logger.warn("Shutdown of executor service was interrupted.");    Thread.currentThread().interrupt();  }}  }
class C{  public final void removePoint(double x){  dataPoints--;  if (dataPoints <= 0) {    initialize();  } else {    sumX-=x;    sumXSq-=x * x;  }}  }
class C{  public synchronized MetaStore storeTerm(long term){  LOGGER.debug("Store term {}",term);  buffer.writeLong(0,term).flush();  return this;}  }
class C{  public EmailIntentBuilder bcc(@NonNull Collection<String> bcc){  checkNotNull(bcc);  for (  String email : bcc) {    checkEmail(email);  }  this.bcc.addAll(bcc);  return this;}  }
class C{  public static java.lang.String valueOf(char c){  return null;}  }
class C{  public static final boolean isASCII(Resources res,int resId) throws IOException, NotFoundException {  BufferedReader buffer=new BufferedReader(new InputStreamReader(res.openRawResource(resId)));  boolean isASCII=isASCII(buffer);  buffer.close();  return isASCII;}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  private void tellClients(){  Player partner=SingletonRepository.getRuleProcessor().getPlayer(partnerName);  if (partner == null) {    player.addEvent(new TradeStateChangeEvent(-1,tradeState,TradeState.NO_ACTIVE_TRADE));  } else {    player.addEvent(new TradeStateChangeEvent(partner.getInt("id"),tradeState,partner.getTradeState()));    partner.addEvent(new TradeStateChangeEvent(player.getInt("id"),partner.getTradeState(),tradeState));    partner.notifyWorldAboutChanges();  }  player.notifyWorldAboutChanges();}  }
class C{  private void distributeExtraSpace(int extraHeight){  int topSpacerHeight;  int middleSpacerHeight;  int bottomSpacerHeight;  if (extraHeight < mTotalSpacerHeight) {    topSpacerHeight=Math.round(extraHeight * (TOP_SPACER_HEIGHT_DP / TOTAL_SPACER_HEIGHT_DP));    extraHeight-=topSpacerHeight;    middleSpacerHeight=Math.round(extraHeight * (MIDDLE_SPACER_HEIGHT_DP / (MIDDLE_SPACER_HEIGHT_DP + BOTTOM_SPACER_HEIGHT_DP)));    extraHeight-=middleSpacerHeight;    bottomSpacerHeight=extraHeight;  } else {    topSpacerHeight=mTopSpacerHeight;    middleSpacerHeight=mMiddleSpacerHeight;    bottomSpacerHeight=mBottomSpacerHeight;    extraHeight-=mTotalSpacerHeight;    topSpacerHeight+=(extraHeight + 1) / 2;    bottomSpacerHeight+=extraHeight / 2;  }  int widthSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY);  mTopSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(topSpacerHeight,MeasureSpec.EXACTLY));  mMiddleSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(middleSpacerHeight,MeasureSpec.EXACTLY));  mBottomSpacer.measure(widthSpec,MeasureSpec.makeMeasureSpec(bottomSpacerHeight,MeasureSpec.EXACTLY));}  }
class C{  public static void updateVArrayRelations(Collection<StoragePort> ports,Collection<StoragePort> remPorts,DbClient dbClient,CoordinatorClient coordinator){  HashSet<URI> systemsToProcess=getStorageSytemsFromPorts(ports,remPorts);  for (  URI systemUri : systemsToProcess) {    updateSystemVarrays(systemUri,dbClient);  }}  }
class C{  public XMLSignatureInput resolve(Attr uri,String baseURI,boolean secureValidation) throws ResourceResolverException {  ResourceResolverContext context=new ResourceResolverContext(uri,baseURI,secureValidation);  return resolverSpi.engineResolveURI(context);}  }
class C{  @Deprecated public static Uri addToGroup(ContentResolver resolver,long personId,long groupId){  ContentValues values=new ContentValues();  values.put(GroupMembership.PERSON_ID,personId);  values.put(GroupMembership.GROUP_ID,groupId);  return resolver.insert(GroupMembership.CONTENT_URI,values);}  }
class C{  public static boolean putFloat(ContentResolver cr,String name,float value){  return putFloatForUser(cr,name,value,UserHandle.myUserId());}  }
class C{  public CompactConcurrentHashSet2(int initialCapacity){  if (initialCapacity < 0)   throw new IllegalArgumentException();  int cap=((initialCapacity >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(initialCapacity + (initialCapacity >>> 1) + 1));  this.sizeCtl=cap;}  }
class C{  protected void parseStartSound(InStream in) throws IOException {  int id=in.readUI16();  SoundInfo info=new SoundInfo(in);  tagtypes.tagStartSound(id,info);}  }
class C{  public static void process(Process p,LineConsumer stdout) throws IOException {  try (BufferedReader inputReader=new BufferedReader(new InputStreamReader(p.getInputStream()))){    String line;    while ((line=inputReader.readLine()) != null) {      stdout.writeLine(line);    }  } }  }
class C{  public UDView bringToFront(){  final View view=getView();  if (view != null) {    view.bringToFront();  }  return this;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="y:x";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);  nodeName=aNewDoc.getNodeName();  nodeValue=aNewDoc.getNodeValue();  assertEquals("nodeName","#document",nodeName);  assertNull("nodeValue",nodeValue);}  }
class C{  public boolean usesClass(String className){  return findClass(className) != NOT_FOUND;}  }
class C{  boolean verifyDeveloperPayload(Purchase p){  String payload=p.getDeveloperPayload();  return true;}  }
class C{  public static String printInferenceResult(InferenceResult ir){  StringBuilder sb=new StringBuilder();  sb.append("InferenceResult.isTrue=" + ir.isTrue());  sb.append("\n");  sb.append("InferenceResult.isPossiblyFalse=" + ir.isPossiblyFalse());  sb.append("\n");  sb.append("InferenceResult.isUnknownDueToTimeout=" + ir.isUnknownDueToTimeout());  sb.append("\n");  sb.append("InferenceResult.isPartialResultDueToTimeout=" + ir.isPartialResultDueToTimeout());  sb.append("\n");  sb.append("InferenceResult.#Proofs=" + ir.getProofs().size());  sb.append("\n");  int proofNo=0;  for (  Proof p : ir.getProofs()) {    proofNo++;    sb.append("InferenceResult.Proof#" + proofNo + "=\n"+ ProofPrinter.printProof(p));  }  return sb.toString();}  }
class C{  private void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request){  Assert.notNull(request,"A user namespace authorization create request must be specified.");  validateUserNamespaceAuthorizationKey(request.getUserNamespaceAuthorizationKey());  validateNamespacePermissions(request.getNamespacePermissions());}  }
class C{  final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  public boolean isMarkSeen(){  return fieldMarkSeen;}  }
class C{  public void addPlayer(final Player player){  this.onlinePlayers.add(player);}  }
class C{  public void checkLoadScript(String scriptType,ParsedURL scriptURL,ParsedURL docURL) throws SecurityException {  ScriptSecurity s=getScriptSecurity(scriptType,scriptURL,docURL);  if (s != null) {    s.checkLoadScript();  }}  }
class C{  static public long longFactorial(int k) throws IllegalArgumentException {  if (k < 0)   throw new IllegalArgumentException("Negative k");  if (k < longFactorials.length)   return longFactorials[k];  throw new IllegalArgumentException("Overflow");}  }
class C{  private void generatePaySelect(){  if (miniTable.getRowCount() == 0)   return;  miniTable.setSelectedIndices(new int[]{0});  calculateSelection();  if (m_noSelected == 0)   return;  String msg=generatePaySelect(miniTable,(ValueNamePair)fieldPaymentRule.getSelectedItem().getValue(),new Timestamp(fieldPayDate.getComponent().getValue().getTime()),(BankInfo)fieldBankAccount.getSelectedItem().getValue());  if (msg != null && msg.length() > 0) {    FDialog.error(m_WindowNo,form,"SaveError",msg);    return;  }  if (!FDialog.ask(m_WindowNo,form,"VPaySelectGenerate?","(" + m_ps.getName() + ")"))   return;  int AD_Proces_ID=155;  ProcessModalDialog dialog=new ProcessModalDialog(this,m_WindowNo,AD_Proces_ID,X_C_PaySelection.Table_ID,m_ps.getC_PaySelection_ID(),false);  if (dialog.isValid()) {    try {      dialog.setWidth("500px");      dialog.setVisible(true);      dialog.setPage(form.getPage());      dialog.doModal();    } catch (    SuspendNotAllowedException e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }catch (    InterruptedException e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }  }}  }
class C{  public StatelessSection(int headerResourceId,int footerResourceId,int itemResourceId){  this(headerResourceId,itemResourceId);  this.footerResourceId=footerResourceId;  this.hasFooter=true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1__PARAMETER_LIST_1:    return getParameterList_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public void evalMinAggregatedValue(final String field,final String fieldValue,final long value) throws RequiredInputMissingException {  if (StringUtils.isBlank(field))   throw new RequiredInputMissingException("Missing required input for parameter 'field'");  if (StringUtils.isBlank(fieldValue))   throw new RequiredInputMissingException("Missing required input for parameter 'fieldValue'");  String fieldKey=StringUtils.lowerCase(StringUtils.trim(field));  String fieldValueKey=StringUtils.lowerCase(StringUtils.trim(fieldValue));  Map<String,Long> fieldAggregationValues=this.aggregatedValues.get(fieldKey);  if (fieldAggregationValues == null)   fieldAggregationValues=new HashMap<>();  long aggregationValue=(fieldAggregationValues.containsKey(fieldValueKey) ? fieldAggregationValues.get(fieldValueKey) : Integer.MAX_VALUE);  if (value < aggregationValue) {    fieldAggregationValues.put(fieldValueKey,value);    this.aggregatedValues.put(fieldKey,fieldAggregationValues);  }}  }
class C{  public void receiveResendFileTransferInvitation(FileSharingSession session,ContactId remoteContact,String displayName){  if (sLogger.isActivated()) {    sLogger.info("Receive resend FT invitation from " + remoteContact + " displayName="+ displayName);  }  OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(session.getFileTransferId());  session.addListener(oneToOneFileTransfer);}  }
class C{  public static ConjunctionOfClauses convert(Sentence s){  ConjunctionOfClauses result=null;  Sentence cnfSentence=ConvertToCNF.convert(s);  List<Clause> clauses=new ArrayList<Clause>();  clauses.addAll(ClauseCollector.getClausesFrom(cnfSentence));  result=new ConjunctionOfClauses(clauses);  return result;}  }
class C{  public void registerConverter(final SingleValueConverter converter){  registerConverter(converter,PRIORITY_NORMAL);}  }
class C{  public SelfSignSslOkHttpStack(OkHttpClient okHttpClient,Map<String,SSLSocketFactory> factoryMap){  this.okHttpClient=okHttpClient;  this.socketFactoryMap=factoryMap;}  }
class C{  public AppletServer(int port,ClassPool src) throws IOException, NotFoundException, CannotCompileException {  this(new ClassPool(src),new StubGenerator(),port);}  }
class C{  public void taskClassName(String taskClsName){  this.taskClsName=taskClsName;}  }
class C{  @Override public ServiceExceptionNotAuthorized rethrow(String msg){  return new ServiceExceptionNotAuthorized(msg,this);}  }
class C{  public List<Option> asSortedList(){  ArrayList<Option> options=new ArrayList<Option>();  if (if_match_list != null)   for (  byte[] value : if_match_list)   options.add(new Option(OptionNumberRegistry.IF_MATCH,value));  if (hasUriHost())   options.add(new Option(OptionNumberRegistry.URI_HOST,getUriHost()));  if (etag_list != null)   for (  byte[] value : etag_list)   options.add(new Option(OptionNumberRegistry.ETAG,value));  if (hasIfNoneMatch())   options.add(new Option(OptionNumberRegistry.IF_NONE_MATCH));  if (hasUriPort())   options.add(new Option(OptionNumberRegistry.URI_PORT,getUriPort()));  if (location_path_list != null)   for (  String str : location_path_list)   options.add(new Option(OptionNumberRegistry.LOCATION_PATH,str));  if (uri_path_list != null)   for (  String str : uri_path_list)   options.add(new Option(OptionNumberRegistry.URI_PATH,str));  if (hasContentFormat())   options.add(new Option(OptionNumberRegistry.CONTENT_FORMAT,getContentFormat()));  if (hasMaxAge())   options.add(new Option(OptionNumberRegistry.MAX_AGE,getMaxAge()));  if (uri_query_list != null)   for (  String str : uri_query_list)   options.add(new Option(OptionNumberRegistry.URI_QUERY,str));  if (hasAccept())   options.add(new Option(OptionNumberRegistry.ACCEPT,getAccept()));  if (location_query_list != null)   for (  String str : location_query_list)   options.add(new Option(OptionNumberRegistry.LOCATION_QUERY,str));  if (hasProxyUri())   options.add(new Option(OptionNumberRegistry.PROXY_URI,getProxyUri()));  if (hasProxyScheme())   options.add(new Option(OptionNumberRegistry.PROXY_SCHEME,getProxyScheme()));  if (hasObserve())   options.add(new Option(OptionNumberRegistry.OBSERVE,getObserve()));  if (hasBlock1())   options.add(new Option(OptionNumberRegistry.BLOCK1,getBlock1().getValue()));  if (hasBlock2())   options.add(new Option(OptionNumberRegistry.BLOCK2,getBlock2().getValue()));  if (hasSize1())   options.add(new Option(OptionNumberRegistry.SIZE1,getSize1()));  if (hasSize2())   options.add(new Option(OptionNumberRegistry.SIZE2,getSize2()));  if (others != null)   options.addAll(others);  Collections.sort(options);  return options;}  }
class C{  public SubscriptionMigrationException(){  super();}  }
class C{  public void clear(){  m.clear();}  }
class C{  public Node encode(Object obj){  Node node=null;  if (obj != null) {    String name=mxCodecRegistry.getName(obj);    mxObjectCodec enc=mxCodecRegistry.getCodec(name);    if (enc != null) {      node=enc.encode(this,obj);    } else {      if (obj instanceof Node) {        node=((Node)obj).cloneNode(true);      } else {        System.err.println("No codec for " + name);      }    }  }  return node;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  @Override public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LALR1AutomatonFactory().createAutomaton(this,grammarInfo);}  }
class C{  public void close(){  AQUtility.close(close);  close=null;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADDRESS_BOOK'";  db.execSQL(sql);}  }
class C{  public void progressbarReady(TextView downloadStatus,ProgressBar progressBar){  int status=Variable.getVariable().getDownloadStatus();  if (status == Constant.DOWNLOADING || status == Constant.PAUSE) {    try {      this.downloadStatusTV=downloadStatus;      initProgressBar(progressBar);      this.vh=(View)progressBar.getParent();      itemPosition=mapsRV.getChildAdapterPosition(vh);    } catch (    Exception e) {      e.getStackTrace();    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget cw=getWidget(stack);  Widget pw=getWidget(stack);  if (SageConstants.LITE)   return null;  if (cw != null && pw != null && pw.willContain(cw))   WidgetFidget.contain(pw,cw);  return null;}  }
class C{  protected static String urlDecode(String str) throws UnsupportedEncodingException {  return URLDecoder.decode(str.replace("+","%2B"),"UTF-8");}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {  Kryo kryo=new Kryo();  Input lInput=new Input(bos.toByteArray());  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());  lInput.close();  return oper;}  }
class C{  public Weight(String magnitude,WeightUnit unit){  this.magnitude=new BigDecimal(magnitude);  this.unit=unit;}  }
class C{  public SerialTurnout(String systemName,String userName){  super(systemName,userName);  tSystemName=systemName;  tBit=SerialAddress.getBitFromSystemName(systemName);}  }
class C{  public DistributedLogClientBuilder handshakeWithClientInfo(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setHandshakeWithClientInfo(enabled);  return newBuilder;}  }
class C{  public void fireSynapseChanged(final Synapse changed){  for (  SynapseListener listener : synapseListeners) {    listener.synapseChanged(new NetworkEvent<Synapse>(this,changed));  }}  }
class C{  public boolean checkValidity(){  Matcher matcher=sValidityPattern.matcher(getFieldName());  isValid=matcher.find();  return isValid;}  }
class C{  public void ensureCapacity(int additionalCapacity){  int sizeNeeded=size + additionalCapacity;  if (sizeNeeded >= threshold)   resize(MathUtils.nextPowerOfTwo((int)(sizeNeeded / loadFactor)));}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  out.write(b,off,len);  incCount(len);}  }
class C{  private Headers parseResponseHeaders(URI uri,int responseCode,Map<String,List<String>> responseHeaders){  try {    NoHttp.getCookieManager().put(uri,responseHeaders);  } catch (  IOException e) {    Logger.e(e,"Save cookie filed: " + uri.toString() + ".");  }  Headers headers=new HttpHeaders();  headers.set(responseHeaders);  headers.set(Headers.HEAD_KEY_RESPONSE_CODE,Integer.toString(responseCode));  for (  String headKey : headers.keySet()) {    List<String> headValues=headers.getValues(headKey);    for (    String headValue : headValues) {      StringBuilder builder=new StringBuilder();      if (!TextUtils.isEmpty(headKey))       builder.append(headKey).append(": ");      if (!TextUtils.isEmpty(headValue))       builder.append(headValue);      Logger.i(builder.toString());    }  }  return headers;}  }
class C{  protected void illegalMessageReceived(OFMessage m){  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");  throw new SwitchStateException(msg);}  }
class C{  public WordsToTokens(Parser p){  parser=p;}  }
class C{  public static ArrayList<Coords> intervening(Coords src,Coords dest,boolean split){  IdealHex iSrc=IdealHex.get(src);  IdealHex iDest=IdealHex.get(dest);  int[] directions=new int[3];  int centerDirection=src.direction(dest);  if (split) {    centerDirection=(int)Math.round(src.radian(dest) + 0.0001 / HEXSIDE) % 6;  }  directions[2]=centerDirection;  directions[1]=(centerDirection + 5) % 6;  directions[0]=(centerDirection + 1) % 6;  ArrayList<Coords> hexes=new ArrayList<>();  Coords current=src;  hexes.add(current);  while (!dest.equals(current)) {    current=Coords.nextHex(current,iSrc,iDest,directions);    hexes.add(current);  }  return hexes;}  }
class C{  private GeofenceErrorMessages(){}  }
class C{  public static <STATE,ACTION,PLAYER>IterativeDeepeningAlphaBetaSearch<STATE,ACTION,PLAYER> createFor(Game<STATE,ACTION,PLAYER> game,double utilMin,double utilMax,int time){  return new IterativeDeepeningAlphaBetaSearch<STATE,ACTION,PLAYER>(game,utilMin,utilMax,time);}  }
class C{  public Depend_ createDepend_(){  Depend_Impl depend_=new Depend_Impl();  return depend_;}  }
class C{  public DragControl(){}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 != p2) ? p1 : p2;}  }
class C{  public final GVector subSelf(GVector vector){  if (length != vector.length) {    throw new MatrixSizeException();  }  for (int i=0; i < length; i++) {    this.values[i]-=vector.values[i];  }  return this;}  }
class C{  public void add(Collection geometries){  for (Iterator i=geometries.iterator(); i.hasNext(); ) {    Geometry geometry=(Geometry)i.next();    add(geometry);  }}  }
class C{  public boolean hasOpenTradePosition(){  if (null == getOpenTradePosition()) {    return false;  }  return true;}  }
class C{  @Override public synchronized void removeConfigurationListener(ConfigurationListener cl){}  }
class C{  protected void showPopup(Iterator<String> iter){  getPopupComponent();  boolean different=false;  Vector<String> v=new Vector<String>();  ListModel<String> model=entryList.getModel();  for (int i=0; iter.hasNext(); i++) {    String next=iter.next();    v.add(next);    if (!different && i < model.getSize())     different|=!next.equals(model.getElementAt(i));  }  different|=model.getSize() != v.size();  if (different) {    entryList.setListData(v);    entryList.clearSelection();  }  entryList.setCurrentText(getText());  showPopup();}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return false;}  }
class C{  @ObjectiveCName("registerApplePushWithApnsId:withToken:") public void registerApplePush(int apnsId,String token){  modules.getPushesModule().registerApplePush(apnsId,token);}  }
class C{  public StructImpl(StructTypeImpl type,Object[] values){  if (type == null) {    throw new IllegalArgumentException(LocalizedStrings.StructImpl_TYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.type=type;  this.values=values;  if (this.values != null) {    for (    Object o : values) {      if (o instanceof PdxInstance || o instanceof PdxString) {        this.hasPdx=true;        break;      }    }  }}  }
class C{  public GOCDataBuilder withSeverity(final int smSeverityc){  this.smSeverityc=smSeverityc;  return this;}  }
class C{  @Override public Experiment read(File file){  Experiment result;  FileReader freader;  BufferedReader breader;  String line;  result=null;  freader=null;  breader=null;  try {    freader=new FileReader(file);    breader=new BufferedReader(freader);    line=breader.readLine();    result=OptionUtils.fromCommandLine(Experiment.class,line);  } catch (  Exception e) {    result=null;    handleException("Failed to read experiment from: " + file,e);  } finally {    FileUtils.closeQuietly(breader);    FileUtils.closeQuietly(freader);  }  return result;}  }
class C{  int encryptFinal(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  int oddBytes=plainLen % numBytes;  int len=encrypt(plain,plainOffset,(plainLen - oddBytes),cipher,cipherOffset);  plainOffset+=len;  cipherOffset+=len;  if (oddBytes != 0) {    embeddedCipher.encryptBlock(register,0,k,0);    for (int i=0; i < oddBytes; i++) {      cipher[i + cipherOffset]=(byte)(k[i] ^ plain[i + plainOffset]);    }  }  return plainLen;}  }
class C{  public static <T>T deserializeFile(String path,Class<T> clazz){  try {    JAXBContext context=JAXBContext.newInstance(clazz);    Unmarshaller m=context.createUnmarshaller();    Object o=m.unmarshal(new FileInputStream(path));    return clazz.cast(o);  } catch (  JAXBException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    e.printStackTrace();  }  return null;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public boolean hasRemaining(){  boolean rem=_buf.hasRemaining();  return rem;}  }
class C{  public static boolean exists(String path){  File f=new File(path);  return f.exists();}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  private void closeRepository(String name,RepositoryHolder holder) throws IOException {  logger.debug("closing repository [{}][{}]",holder.type,name);  if (holder.repository != null) {    holder.repository.close();  }}  }
class C{  public StrBuilder deleteAll(final StrMatcher matcher){  return replace(matcher,null,0,size,-1);}  }
class C{  public static boolean[] copyOfRange(boolean[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      boolean[] copy=new boolean[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  @Pure public final int hashCode(){  return super.hashCode();}  }
class C{  private boolean checkPlayServices(){  int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {      GooglePlayServicesUtil.getErrorDialog(resultCode,this,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i("LOG","This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  public BooleanPropertyAttributeType createBooleanPropertyAttributeTypeFromString(EDataType eDataType,String initialValue){  BooleanPropertyAttributeType result=BooleanPropertyAttributeType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return null;}  }
class C{  protected void uploadTestDataFilesToS3(String s3KeyPrefix,List<ManifestFile> manifestFiles) throws Exception {  uploadTestDataFilesToS3(s3KeyPrefix,manifestFiles,new ArrayList<String>());}  }
class C{  static public String name(){  String releaseName;  if (official) {    String addOn;    if ("unknown".equals(revisionId)) {      addOn=buildDate;    } else {      addOn="R" + revisionId;    }    releaseName=major + "." + minor+ getModifier()+ "-"+ addOn;  } else {    String addOn;    if ("unknown".equals(revisionId)) {      addOn=buildDate + "-" + buildUser;    } else {      addOn=buildDate + "-" + buildUser+ "-R"+ revisionId;    }    releaseName=major + "." + minor+ getModifier()+ "-"+ addOn;  }  return releaseName;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.474 -0500",hash_original_method="E7336EB9055C9F862A0B8D336BB5AE0F",hash_generated_method="9B77596588C53FA62A7F6A9D3F01E4F8") public void putString(String key,String value){  unparcel();  mMap.put(key,value);}  }
class C{  @Deprecated public void compact(int[] map,int numValuesAllocated){  if (true) {    throw new UnsupportedOperationException();  }  ArrayList<ValueNumber> oldList=this.allocatedValueList;  ArrayList<ValueNumber> newList=new ArrayList<ValueNumber>(Collections.<ValueNumber>nCopies(numValuesAllocated,null));  for (  ValueNumber value : oldList) {    int newNumber=map[value.getNumber()];    if (newNumber >= 0) {      newList.set(newNumber,value);    }  }  this.allocatedValueList=newList;}  }
class C{  public ImageResizer(Context context,int imageWidth,int imageHeight){  super(context);  setImageSize(imageWidth,imageHeight);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.301 -0500",hash_original_method="6C44E95231996B5164D16D96A5AF9CAD",hash_generated_method="40B9E65FBFB1331A55BF5EE628C65CE7") private void nativeLoadUrl(String url,Map<String,String> headers){  addTaint(url.getTaint());  addTaint(headers.getTaint());}  }
class C{  public static DecomposableMatchBuilder1<Byte,Byte> caseByte(MatchesAny b){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Byte.class));}  }
class C{  @Override @SideEffectFree public Object clone(){  try {    Locale that=(Locale)super.clone();    return that;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @Override public synchronized void acceptDataSet(ThresholdDataEvent e){  if (m_env == null) {    m_env=Environment.getSystemWide();  }  if (!GraphicsEnvironment.isHeadless()) {    if (m_visPanel == null) {      m_visPanel=new VisualizePanel();    }    if (m_masterPlot == null) {      m_masterPlot=e.getDataSet();    }    try {      if (!m_masterPlot.getPlotInstances().relationName().equals(e.getDataSet().getPlotInstances().relationName())) {        m_masterPlot=e.getDataSet();        m_visPanel.setMasterPlot(m_masterPlot);        m_visPanel.validate();        m_visPanel.repaint();      } else {        m_visPanel.addPlot(e.getDataSet());        m_visPanel.validate();        m_visPanel.repaint();      }      m_visPanel.setXIndex(4);      m_visPanel.setYIndex(5);    } catch (    Exception ex) {      System.err.println("Problem setting up visualization (ModelPerformanceChart)");      ex.printStackTrace();    }  } else {    m_headlessEvents.add(e);  }  if (m_imageListeners.size() > 0 && !m_processingHeadlessEvents) {    setupOffscreenRenderer();    if (m_offscreenPlotData == null || !m_offscreenPlotData.get(0).relationName().equals(e.getDataSet().getPlotInstances().relationName())) {      m_offscreenPlotData=new ArrayList<Instances>();      m_thresholdSeriesTitles=new ArrayList<String>();    }    m_offscreenPlotData.add(e.getDataSet().getPlotInstances());    m_thresholdSeriesTitles.add(e.getDataSet().getPlotName());    List<String> options=new ArrayList<String>();    String additional="-color=/last";    if (m_additionalOptions != null && m_additionalOptions.length() > 0) {      additional=m_additionalOptions;      try {        additional=m_env.substitute(additional);      } catch (      Exception ex) {      }    }    String[] optsParts=additional.split(",");    for (    String p : optsParts) {      options.add(p.trim());    }    String xAxis="False Positive Rate";    if (m_xAxis != null && m_xAxis.length() > 0) {      xAxis=m_xAxis;      try {        xAxis=m_env.substitute(xAxis);      } catch (      Exception ex) {      }    }    String yAxis="True Positive Rate";    if (m_yAxis != null && m_yAxis.length() > 0) {      yAxis=m_yAxis;      try {        yAxis=m_env.substitute(yAxis);      } catch (      Exception ex) {      }    }    String width=m_width;    String height=m_height;    int defWidth=500;    int defHeight=400;    try {      width=m_env.substitute(width);      height=m_env.substitute(height);      defWidth=Integer.parseInt(width);      defHeight=Integer.parseInt(height);    } catch (    Exception ex) {    }    try {      List<Instances> series=new ArrayList<Instances>();      for (int i=0; i < m_offscreenPlotData.size(); i++) {        Instances temp=new Instances(m_offscreenPlotData.get(i));        temp.setRelationName(m_thresholdSeriesTitles.get(i));        series.add(temp);      }      BufferedImage osi=m_offscreenRenderer.renderXYLineChart(defWidth,defHeight,series,xAxis,yAxis,options);      ImageEvent ie=new ImageEvent(this,osi);      notifyImageListeners(ie);    } catch (    Exception e1) {      e1.printStackTrace();    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.EQUATION_DEFINITION;}  }
class C{  @SuppressWarnings("unchecked") public static void matchBlockSystemPools(Object systemPools,Object dbClient,Object coordinator,Object systemId) throws Exception {  List<StoragePool> modifiedPools=new ArrayList<StoragePool>(((Map<URI,StoragePool>)systemPools).values());  StringBuffer errorMessage=new StringBuffer();  matchModifiedStoragePoolsWithAllVpool(modifiedPools,(DbClient)dbClient,(CoordinatorClient)coordinator,(URI)systemId,errorMessage);}  }
class C{  private void renewEntityCapsVersion(){  if (capsManager != null && capsManager.entityCapsEnabled())   capsManager.updateLocalEntityCaps();}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public void computeSquadronBombLoadout(){  for (  Mounted bomb : bombList) {    equipmentList.remove(bomb);  }  bombList.clear();  for (int btype=0; btype < BombType.B_NUM; btype++) {    int maxBombCount=0;    for (    Integer fId : fighters) {      int bombCount=0;      Aero fighter=(Aero)game.getEntity(fId);      ArrayList<Mounted> bombs=fighter.getBombs();      for (      Mounted m : bombs) {        if (((BombType)m.getType()).getBombType() == btype) {          bombCount++;        }      }      maxBombCount=Math.max(bombCount,maxBombCount);    }    bombChoices[btype]=maxBombCount;  }  int gameTL=TechConstants.getSimpleLevel(game.getOptions().stringOption("techlevel"));  for (int type=0; type < BombType.B_NUM; type++) {    for (int i=0; i < bombChoices[type]; i++) {      if ((type == BombType.B_ALAMO) && !game.getOptions().booleanOption("at2_nukes")) {        continue;      }      if ((type > BombType.B_TAG) && (gameTL < TechConstants.T_SIMPLE_ADVANCED)) {        continue;      }      if ((null != BombType.getBombWeaponName(type)) && (type != BombType.B_ARROW) && (type != BombType.B_HOMING)) {        try {          addBomb(EquipmentType.get(BombType.getBombWeaponName(type)),LOC_NOSE);        } catch (        LocationFullException ex) {        }      }      if ((type != BombType.B_TAG) && (null == BombType.getBombWeaponName(type))) {        try {          addEquipment(EquipmentType.get(BombType.getBombInternalName(type)),LOC_NOSE,false);        } catch (        LocationFullException ex) {        }      }    }    bombChoices[type]=0;  }  if (game.getOptions().booleanOption("stratops_space_bomb") && game.getBoard().inSpace() && (getBombs(AmmoType.F_SPACE_BOMB).size() > 0)) {    try {      addEquipment(EquipmentType.get(SPACE_BOMB_ATTACK),LOC_NOSE,false);    } catch (    LocationFullException ex) {    }  }  if (!game.getBoard().inSpace() && (getBombs(AmmoType.F_GROUND_BOMB).size() > 0)) {    try {      addEquipment(EquipmentType.get(DIVE_BOMB_ATTACK),LOC_NOSE,false);    } catch (    LocationFullException ex) {    }    for (int i=0; i < Math.min(10,getBombs(AmmoType.F_GROUND_BOMB).size()); i++) {      try {        addEquipment(EquipmentType.get(ALT_BOMB_ATTACK),LOC_NOSE,false);      } catch (      LocationFullException ex) {      }    }  }  updateWeaponGroups();  loadAllWeapons();}  }
class C{  public final double correct(){  return m_Correct;}  }
class C{  public void run(InterpreterContextRunner runner){  sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.RUN_INTERPRETER_CONTEXT_RUNNER,gson.toJson(runner)));}  }
class C{  public PagedQuery(final String query,final QueryLanguage language,final int requestLimit,final int requestOffset){  LOGGER.debug("Query Language: {}, requestLimit: " + requestLimit + ", requestOffset: "+ requestOffset,language);  LOGGER.debug("Query: {}",query);  String rval=query;  hasLimitAndOffset=requestLimit > 0;  if (hasLimitAndOffset) {    int queryLimit=-1;    int queryOffset=-1;    final Matcher matcher=LIMIT_OR_OFFSET.matcher(query);    while (matcher.find()) {      final String clause=matcher.group().toLowerCase();      final int value=Integer.parseInt(SPLITTER.split(clause)[1]);      if (clause.startsWith("limit")) {        if (query.indexOf('}',matcher.end()) < 0) {          queryLimit=value;        }      } else {        queryOffset=value;      }    }    final boolean queryLimitExists=(queryLimit >= 0);    final boolean queryOffsetExists=(queryOffset >= 0);    final int maxQueryCount=getMaxQueryResultCount(queryLimit,queryOffset,queryLimitExists,queryOffsetExists);    final int offset=(requestOffset < 0) ? 0 : requestOffset;    final int maxRequestCount=requestLimit + offset;    limitSubstitute=(maxRequestCount < maxQueryCount) ? requestLimit : queryLimit - offset;    offsetSubstitute=queryOffsetExists ? queryOffset + offset : offset;    rval=modifyLimit(language,rval,queryLimit,queryLimitExists,queryOffsetExists,limitSubstitute);    rval=modifyOffset(language,offset,rval,queryOffsetExists);    LOGGER.debug("Modified Query: {}",rval);  }  this.modifiedQuery=rval;}  }
class C{  public RectHV(double xmin,double ymin,double xmax,double ymax){  if (Double.isNaN(xmin) || Double.isNaN(xmax))   throw new IllegalArgumentException("x-coordinate cannot be NaN");  if (Double.isNaN(ymin) || Double.isNaN(ymax))   throw new IllegalArgumentException("y-coordinates cannot be NaN");  if (xmax < xmin || ymax < ymin) {    throw new IllegalArgumentException("Invalid rectangle");  }  this.xmin=xmin;  this.ymin=ymin;  this.xmax=xmax;  this.ymax=ymax;}  }
class C{  public static List<org.oscm.vo.VOCatalogEntry> convertToApiVOCatalogEntry(List<org.oscm.internal.vo.VOCatalogEntry> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOCatalogEntry> newVO=new ArrayList<org.oscm.vo.VOCatalogEntry>();  for (  org.oscm.internal.vo.VOCatalogEntry tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  public void startCheck(){  checker=new Thread(new CheckForUpdate());  checker.setPriority(Thread.MIN_PRIORITY);  checker.start();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (!USE_EXO_PLAYER) {    videoSceneObjectPlayer=makeMediaPlayer();  } else {    videoSceneObjectPlayer=makeExoPlayer();  }  if (null != videoSceneObjectPlayer) {    final Minimal360Video main=new Minimal360Video(videoSceneObjectPlayer);    setMain(main,"gvr.xml");  }}  }
class C{  public void updateNameOnMigrationCommit(String updatedName){  String currentPath=getPath();  setPath(currentPath.replace(getName(),updatedName));  setName(updatedName);}  }
class C{  public static void executeInBulk(@NotNull Document document,final boolean executeInBulk,@NotNull Runnable task){  if (!(document instanceof DocumentEx)) {    task.run();    return;  }  DocumentEx documentEx=(DocumentEx)document;  if (executeInBulk == documentEx.isInBulkUpdate()) {    task.run();    return;  }  documentEx.setInBulkUpdate(executeInBulk);  try {    task.run();  }  finally {    documentEx.setInBulkUpdate(!executeInBulk);  }}  }
class C{  protected Date calcSleepTime(Integer SleepSecondsAfterNotice){  if (mapping.getCondition().getSleepSecAfterAction() != null) {    Calendar cal=Calendar.getInstance();    cal.setTime(new Date());    cal.add(Calendar.SECOND,SleepSecondsAfterNotice);    return cal.getTime();  } else {    return null;  }}  }
class C{  public void tagGenerator(byte[] data) throws IOException {  if (tags != null) {    tags.tagGenerator(data);  }}  }
class C{  public mat4 copy(mat4 matA){  for (int i=0; i < 16; ++i) {    this.m[i]=matA.m[i];  }  return this;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,z1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  private void internalRemoveConnection(String hostAndPort){  if ((hostAndPort == null) || (hostAndPort.length() == 0)) {    throw new ConnectionManagerException("Passed host/port is null or blank.");  }  try {    if (!isConnected(hostAndPort)) {      throw new ConnectionManagerException(MessageFormatter.format("The connection manager is not managing a connection to host {}",hostAndPort).getMessage());    }    _listener.pause();    CimConnection connection=_connections.get(hostAndPort);    if (connection != null) {      s_logger.info("Closing connection to the CIM provider on host/port {}",hostAndPort);      connection.close();      _connections.remove(hostAndPort);      connectionLastTouch.remove(hostAndPort);      pinnedConnections.remove(hostAndPort);    }  } catch (  ConnectionManagerException e) {    throw e;  }catch (  Exception e) {    throw new ConnectionManagerException(MessageFormatter.format("Failed removing the connection to the provider on host/port {}",hostAndPort).getMessage(),e);  } finally {    _listener.resume();  }}  }
class C{  protected void verifyObb1Contents(String filePath){  String path=null;  path=doWaitForPath(filePath);  doValidateIntContents(path,"OneToOneThousandInts.bin",0,1000);  doValidateIntContents(path,"SevenHundredInts.bin",0,700);  doValidateZeroLongFile(path,"FiveLongs.bin",5,true);}  }
class C{  public SplitAction(DrawingEditor editor){  super(editor,new SVGPathFigure(),false);  labels.configureAction(this,ID);}  }
class C{  public static RSAPrivateKey newKey(byte[] encoded) throws InvalidKeyException {  RSAPrivateCrtKeyImpl key=new RSAPrivateCrtKeyImpl(encoded);  if (key.getPublicExponent().signum() == 0) {    return new RSAPrivateKeyImpl(key.getModulus(),key.getPrivateExponent());  } else {    return key;  }}  }
class C{  public String cacheName(){  return cacheName;}  }
class C{  @Inject public AddRemoteRepositoryPresenter(AddRemoteRepositoryView view,GitServiceClient service,AppContext appContext){  this.view=view;  this.view.setDelegate(this);  this.service=service;  this.appContext=appContext;}  }
class C{  public double calculateLogLikelihood(){  return calculateLogLikelihood(intervals,demographicFunction);}  }
class C{  public ScVolume createReplayView(String instanceId,String name) throws StorageCenterAPIException {  Parameters params=new Parameters();  params.add("Name",name);  params.add("Notes",instanceId);  RestResult rr=restClient.post(String.format("StorageCenter/ScReplay/%s/CreateView",instanceId),params.toJson());  if (!checkResults(rr)) {    LOG.warn("Error creating view volume of replay {}: {}",instanceId,rr.getErrorMsg());    throw new StorageCenterAPIException(rr.getErrorMsg());  }  return gson.fromJson(rr.getResult(),ScVolume.class);}  }
class C{  private ComparableTimSort(Object[] a,Object[] work,int workBase,int workLen){  this.a=a;  int len=a.length;  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;  if (work == null || workLen < tlen || workBase + tlen > work.length) {    tmp=new Object[tlen];    tmpBase=0;    tmpLen=tlen;  } else {    tmp=work;    tmpBase=workBase;    tmpLen=workLen;  }  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void handleDiscontinuity(){  if (startMediaTimeState == START_IN_SYNC) {    startMediaTimeState=START_NEED_SYNC;  }}  }
class C{  public CLKernel createKernel(String name,Object... args) throws CLBuildException {}  }
class C{  public void addFooterView(View view){  if (null == view) {    throw new IllegalArgumentException("the view to add must not be null!");  } else   if (mWrapAdapter == null) {    mTmpFooterView.add(view);  } else {    mWrapAdapter.addFooterView(view);  }}  }
class C{  public T caseS_Declaration(S_Declaration object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.718 -0400",hash_original_method="29A8172D11EE1F6C2B41EDC469205BD4",hash_generated_method="59F81D826E94B385983D565339AE7DB1") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  public static OrganizationAuthorityException convertToApi(org.oscm.internal.types.exception.OrganizationAuthorityException oldEx){  return convertExceptionToApi(oldEx,OrganizationAuthorityException.class);}  }
class C{  public static <T>void assertIterator(List<T> expected,Iterator<T> it){  assertIterator(expected,it,true);}  }
class C{  public synchronized void remove(ComponentName componentName,UserHandleCompat user){  mCache.remove(new ComponentKey(componentName,user));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.483 -0500",hash_original_method="CEA0E6C41E8B0166BD3ED01845CB7616",hash_generated_method="2A0DF62DC3D6BDA6FD332746248CC193") public int receive(byte[] data,int length) throws IOException {  __receivePacket.setData(data);  __receivePacket.setLength(length);  _socket_.receive(__receivePacket);  return __receivePacket.getLength();}  }
class C{  private void checkContains(Spanned text,String[] spans,String spanName,int start,int end) throws Exception {  for (  String i : spans) {    if (i.equals(spanName)) {      assertEquals(start,text.getSpanStart(i));      assertEquals(end,text.getSpanEnd(i));      return;    }  }  fail();}  }
class C{  public CSSClassCondition(String localName,String namespaceURI,String value){  super(localName,namespaceURI,true,value);}  }
class C{  public final int length(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  @Override public float idf(long docFreq,long docCount){  return (float)(Math.log((docCount + 1) / (double)(docFreq + 1)) + 1.0);}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public _MelLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public static <T>List<T> createUnsafeList(Collection<? extends T> collection){  List<T> list=new UnsafeArrayList<>(collection.size());  list.addAll(collection);  return list;}  }
class C{  public void ensureCapacity(int minCapacity){  modCount++;  int oldCapacity=elementData.length;  if (minCapacity > oldCapacity) {    Object oldData[]=elementData;    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    elementData=Arrays.copyOf(elementData,newCapacity);  }}  }
class C{  public static int scale(float val,int max){  if (val == 1)   return max - 1;  return (int)(val * max);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  protected float parseFraction() throws ParseException, IOException {  float value=0;  if (current < '0' || current > '9') {    reportUnexpectedCharacterError(current);  }  float weight=0.1f;  do {    value+=weight * (current - '0');    weight*=0.1f;    current=reader.read();  } while (current >= '0' && current <= '9');  return value;}  }
class C{  public int readSignedExpGolombCodedInt(){  int codeNum=readExpGolombCodeNum();  return ((codeNum % 2) == 0 ? -1 : 1) * ((codeNum + 1) / 2);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public TableViewerColumn build(){  TableViewerColumn viewerColumn=new TableViewerColumn(builder.getTableViewer(),style);  TableColumn column=viewerColumn.getColumn();  column.setText(headerText);  column.setMoveable(moveable);  column.setResizable(resizable);  column.setToolTipText(toolTipText);  if (cellLabelProvider != null) {    viewerColumn.setLabelProvider(cellLabelProvider);  } else {    if (propertyName == null) {      viewerColumn.setLabelProvider(new ColumnLabelProvider());    } else {      PropertyDescriptor descriptor=builder.getPropertyDescriptor(propertyName);      viewerColumn.setLabelProvider(new PropertyCellLabelProvider(descriptor,valueFormatter));    }  }  if (widthPixel != null && widthPercent != null) {    throw new IllegalArgumentException("Cannot specify a width both in pixel and in percent!");  }  if (widthPercent == null) {    builder.getTableLayout().setColumnData(column,new ColumnPixelData(widthPixel == null ? 100 : widthPixel));  } else {    builder.getTableLayout().setColumnData(column,new ColumnWeightData(widthPercent));  }  if (editingSupport != null) {    viewerColumn.setEditingSupport(editingSupport);  }  return viewerColumn;}  }
class C{  public void benchHasChildMatchAll(){  TermsByQueryRequestBuilder stringFilter=this.newTermsByQueryRequestBuilder();  stringFilter.setIndices(CHILD_INDEX).setTypes(CHILD_TYPE).setField("pid").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  TermsByQueryRequestBuilder longFilter=this.newTermsByQueryRequestBuilder();  longFilter.setIndices(CHILD_INDEX).setTypes(CHILD_TYPE).setField("num").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  long tookString=0;  long tookLong=0;  long expected=NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS CHILD MATCH-ALL ====");  for (int i=0; i < NUM_QUERIES; i++) {    tookString+=runQuery("string",i,expected,stringFilter);    tookLong+=runQuery("long",i,expected,longFilter);  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  private static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  public LogStream print(long l){  if (ps != null) {    indent();    lineBuffer.append(l);  }  return this;}  }
class C{  public static byte[] fromBase64(String input){  return new Base64().decode(input);}  }
class C{  public static void d(String tag,String msg,Throwable tr){  println(DEBUG,tag,msg,tr);}  }
class C{  public int bitsLeft(){  return (byteLimit - byteOffset) * 8 - bitOffset;}  }
class C{  public static Formatter of(String message,Object... objects){  return new Formatter(message,objects);}  }
class C{  public SendablePhotoMessage.SendablePhotoMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public ElasticSearchTransportClient(ElasticSearchIndexRequestBuilderFactory indexBuilderFactory){  this.indexRequestBuilderFactory=indexBuilderFactory;  openLocalDiscoveryClient();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public DeleteWarmerRequest(String... names){  names(names);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int[] dX;  int[] dY;  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void addExposedTypes(GenericArrayType type,Class<?> cause){  if (done(type)) {    return;  }  visit(type);  logger.debug("Adding exposed types from {}, which is the component type on generic array type {}",type.getGenericComponentType(),type);  addExposedTypes(type.getGenericComponentType(),cause);}  }
class C{  public boolean equalsDefault(){  return false;}  }
class C{  public Boolean isMemoryHotAddEnabled(){  return memoryHotAddEnabled;}  }
class C{  public Set(Class<?> type,String name){  super(type,type);  this.name=name;}  }
class C{  public static int readInt(){  return scanner.nextInt();}  }
class C{  public static void deviceBind(Context context,String accessToken,String deviceKey,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    String jsonParams=new JSONStringer().object().key(ApiKey.DEVICE_KEY).value(deviceKey).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + DEVICE_BINDING,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  public void snapshotAfter(){  after=new HeapSnapshot();}  }
class C{  public void createMonthScenarioParAndUserAssignChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-04 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_MONTH_ASSIGN",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"USER");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_MONTH_ASSIGN",serviceDetails,basicSetup.getCustomerUser1(),role);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 12:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-13 06:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-15 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-22 00:00:00"),"MAX_FOLDER_NUMBER","88");  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 12:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_MONTH_ASSIGN",subDetails);}  }
class C{  public Insert columns(Property<?>... columns){  for (  Property<?> column : columns) {    this.columns.add(column.getExpression());  }  defaultValues=false;  invalidateCompileCache();  return this;}  }
class C{  public static <A,V extends MonadicValue<? extends Observable<A>>>ObservableTValue<A> fromValue(final V monadicValue){  return of(AnyM.ofValue(monadicValue));}  }
class C{  public static DictionarySelector createVectorDictionaryEditor(JPanel scalarPanel,JPanel vectorPanel){  DictionarySelector editor=new DictionarySelector(scalarPanel,vectorPanel);  editor.addButton(new JButton(new ShowHelpAction("Pages/Worlds/TextWorld/TextWorld.html")));  editor.setMinimumSize(new Dimension(300,400));  return editor;}  }
class C{  public TenantDeletionConstraintException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void addStateValueAsBoolean(String name,boolean booleanValue){  addStateValueAsBoolean(null,name,booleanValue);}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  private long tryDecReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      int r;      long next;      if ((r=readerOverflow) > 0) {        readerOverflow=r - 1;        next=s;      } else       next=s - RUNIT;      state=next;      return next;    }  } else   if ((LockSupport.nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  @Override public void draw(Object object,Graphics2D graphics,DrawInfo2D info){  GeomInfo2D gInfo;  if (info instanceof GeomInfo2D) {    gInfo=(GeomInfo2D)info;  } else {    gInfo=new GeomInfo2D(info,new AffineTransform());  }  MasonGeometry gm=(MasonGeometry)object;  Geometry geometry=gm.getGeometry();  if (geometry.isEmpty()) {    return;  }  if (paint != null) {    graphics.setPaint(paint);  }  if ((gm.isMovable) || (gm.shape == null) || (!gm.transform.equals(gInfo.transform))) {    gm.transform.setTransform(gInfo.transform);    if (geometry instanceof Point) {      Point point=(Point)geometry;      double offset=3 * scale / 2.0;      Ellipse2D.Double ellipse=new Ellipse2D.Double(point.getX() - offset,point.getY() - offset,3 * scale,3 * scale);      GeneralPath path=(GeneralPath)(new GeneralPath(ellipse).createTransformedShape(gInfo.transform));      gm.shape=path;    } else     if (geometry instanceof LineString) {      gm.shape=drawGeometry(geometry,gInfo,false);      filled=false;    } else     if (geometry instanceof Polygon) {      gm.shape=drawPolygon((Polygon)geometry,gInfo,filled);    } else     if (geometry instanceof MultiLineString) {      MultiLineString multiLine=(MultiLineString)geometry;      for (int i=0; i < multiLine.getNumGeometries(); i++) {        GeneralPath p=drawGeometry(multiLine.getGeometryN(i),gInfo,false);        if (i == 0) {          gm.shape=p;        } else {          gm.shape.append(p,false);        }      }      filled=false;    } else     if (geometry instanceof MultiPolygon) {      MultiPolygon multiPolygon=(MultiPolygon)geometry;      for (int i=0; i < multiPolygon.getNumGeometries(); i++) {        GeneralPath p=drawPolygon((Polygon)multiPolygon.getGeometryN(i),gInfo,filled);        if (i == 0) {          gm.shape=p;        } else {          gm.shape.append(p,false);        }      }    } else {      throw new UnsupportedOperationException("Unsupported JTS type for draw()" + geometry);    }  }  if (filled) {    graphics.fill(gm.shape);  } else {    graphics.draw(gm.shape);  }}  }
class C{  public SetShuffle(int playerId,boolean shuffle){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("shuffle",shuffle);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_1__TAIL_1:    return getTail_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void switchOverToHash(int numAtts){  for (int index=0; index < numAtts; index++) {    String qName=super.getQName(index);    Integer i=new Integer(index);    m_indexFromQName.put(qName,i);    String uri=super.getURI(index);    String local=super.getLocalName(index);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static List<HttpCookie> parse(String header){  return new CookieParser(header).parse();}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new X509Extension(critical,new DEROctetString(value)));}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public Function build(Class<?> cls){  EdmFunction edmFunction=cls.getAnnotation(EdmFunction.class);  EdmReturnType edmReturnType=cls.getAnnotation(EdmReturnType.class);  if (edmReturnType == null) {    throw new IllegalArgumentException("The class must have EdmReturnType: " + cls.getName());  }  Set<Parameter> parameters=new HashSet<>();  for (  Field field : cls.getDeclaredFields()) {    EdmParameter parameterAnnotation=field.getAnnotation(EdmParameter.class);    if (parameterAnnotation != null) {      String parameterName=isNullOrEmpty(parameterAnnotation.name()) ? field.getName() : parameterAnnotation.name();      String parameterType=isNullOrEmpty(parameterAnnotation.type()) ? field.getType().getSimpleName() : parameterAnnotation.type();      parameters.add(new ParameterImpl.Builder().setMaxLength(parameterAnnotation.maxLength()).setName(parameterName).setNullable(parameterAnnotation.nullable()).setPrecision(parameterAnnotation.precision()).setScale(parameterAnnotation.scale()).setSRID(parameterAnnotation.srid()).setType(parameterType).setUnicode(parameterAnnotation.unicode()).setJavaField(field).build());    }  }  return new FunctionImpl.Builder().setBound(edmFunction.isBound()).setComposable(edmFunction.isComposable()).setEntitySetPath(edmFunction.entitySetPath()).setName(edmFunction.name()).setParameters(parameters).setReturnType(edmReturnType.type()).setNamespace(edmFunction.namespace()).setJavaClass(cls).build();}  }
class C{  public static void finishStartingService(Service service,int startId){synchronized (mStartingServiceSync) {    if (mStartingService != null) {      if (service.stopSelfResult(startId)) {        mStartingService.release();      }    }  }}  }
class C{  public void copyUTF8Bytes(BytesRef bytes){  copyUTF8Bytes(bytes.bytes,bytes.offset,bytes.length);}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public static void debug(Object message){  RuntimeSingleton.debug(message);}  }
class C{  @Command(description="Deletes a key") public void deleteKey(@Param(name="keyId",description="Key ID") String keyId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(KEY_ID_PARAM,keyId);  try {    SignerClient.execute(new DeleteKey(keyId,true));    AuditLogger.log(DELETE_THE_KEY_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(DELETE_THE_KEY_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  public static byte[] toMACAddress(String macAddress){  return MACAddress.valueOf(macAddress).toBytes();}  }
