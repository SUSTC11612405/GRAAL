class C{  public PDUException(String message){  super(message);}  }
class C{  private boolean processAllocation(){  if (m_allocation == null)   return true;  boolean success=m_allocation.processIt(MAllocationHdr.DOCACTION_Complete);  if (success)   success=m_allocation.save(); else   m_allocation.saveEx();  addLog(0,m_allocation.getDateAcct(),null,m_allocation.getDescription());  m_allocation=null;  return success;}  }
class C{  public String toString(){  return map.toString();}  }
class C{  public void save(){  new JobConfigurationDao().saveOrUpdate(projectBean.getJobConfiguration());  jobRegions=null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static VariableLatch create(int initialValue){  return new VariableLatch(0);}  }
class C{  public static boolean isCfile(File file){  try {    InputStream buffy=new BufferedInputStream(new FileInputStream(file));  } catch (  FileNotFoundException ex) {    return false;  }  for (int i=0; i < 20; i++) {  }  return true;}  }
class C{  public CHelpButton(final Action action,final IHelpInformation information){  super(action);  m_information=information;}  }
class C{  public AsmAnalyzer(Log log,List<String> osJarPath,AsmGenerator gen,String[] deriveFrom,String[] includeGlobs){  mLog=log;  mGen=gen;  mOsSourceJar=osJarPath != null ? osJarPath : new ArrayList<String>();  mDeriveFrom=deriveFrom != null ? deriveFrom : new String[0];  mIncludeGlobs=includeGlobs != null ? includeGlobs : new String[0];}  }
class C{  public static void forceDepartureOf(DistributedLockService dlock,InternalDistributedMember member){  DLockGrantor grantor=null;  try {    grantor=DLockGrantor.waitForGrantor((DLockService)dlock);    if (grantor != null) {      grantor.handleDepartureOf(member);    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  public static ActionErrors validateCampos(ActionMapping mapping,HttpServletRequest request,Busqueda busqueda,IBusquedaForm busquedaForm){  ActionErrors errors=new ActionErrors();  if (busqueda != null) {    if (!ArrayUtils.isEmpty(busquedaForm.getGenericoIdCampoNumerico())) {      for (int i=0; i < busquedaForm.getGenericoIdCampoNumerico().length; i++) {        String valor=busquedaForm.getGenericoCampoNumerico()[i];        String valorFin=busquedaForm.getGenericoCampoNumericoFin()[i];        if (StringUtils.isNotBlank(valor) && !NumberUtils.isNumber(valor)) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_INVALID,Messages.getString(busquedaForm.getGenericoEtiquetaCampoNumerico()[i],request.getLocale())));        }        if (busquedaForm.getGenericoOperadorCampoNumerico()[i].equals(CustomDateFormat.DATE_OPERATOR_RANGE)) {          if (StringUtils.isNotBlank(valorFin) && !NumberUtils.isNumber(valorFin)) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_INVALID,Messages.getString(busquedaForm.getGenericoEtiquetaCampoNumerico()[i],request.getLocale())));          }        }      }    }    if (!ArrayUtils.isEmpty(busquedaForm.getGenericoIdFecha())) {      for (int i=0; i < busquedaForm.getGenericoIdFecha().length; i++) {        try {          if (!new CustomDate(busquedaForm.getGenericoFechaFormato()[i],busquedaForm.getGenericoFechaA()[i],busquedaForm.getGenericoFechaM()[i],busquedaForm.getGenericoFechaD()[i],busquedaForm.getGenericoFechaS()[i]).validate() || !new CustomDate(busquedaForm.getGenericoFechaIniFormato()[i],busquedaForm.getGenericoFechaIniA()[i],busquedaForm.getGenericoFechaIniM()[i],busquedaForm.getGenericoFechaIniD()[i],busquedaForm.getGenericoFechaIniS()[i]).validate() || !new CustomDate(busquedaForm.getGenericoFechaFinFormato()[i],busquedaForm.getGenericoFechaFinA()[i],busquedaForm.getGenericoFechaFinM()[i],busquedaForm.getGenericoFechaFinD()[i],busquedaForm.getGenericoFechaFinS()[i]).validate()) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(busquedaForm.getGenericoEtiquetaFecha()[i],request.getLocale())));          }        } catch (        Exception e) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(busquedaForm.getGenericoEtiquetaFecha()[i],request.getLocale())));        }      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_FECHA_INICIAL)) {      try {        if (!new CustomDate(busquedaForm.getFechaFormatoIni(),busquedaForm.getFechaAIni(),busquedaForm.getFechaMIni(),busquedaForm.getFechaDIni(),busquedaForm.getFechaSIni()).validate() || !new CustomDate(busquedaForm.getFechaIniFormatoIni(),busquedaForm.getFechaIniAIni(),busquedaForm.getFechaIniMIni(),busquedaForm.getFechaIniDIni(),busquedaForm.getFechaIniSIni()).validate() || !new CustomDate(busquedaForm.getFechaFinFormatoIni(),busquedaForm.getFechaFinAIni(),busquedaForm.getFechaFinMIni(),busquedaForm.getFechaFinDIni(),busquedaForm.getFechaFinSIni()).validate()) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FECHA_INICIO,request.getLocale())));        }      } catch (      Exception e) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FECHA_INICIO,request.getLocale())));      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_FECHA_FINAL)) {      try {        if (!new CustomDate(busquedaForm.getFechaFormatoFin(),busquedaForm.getFechaAFin(),busquedaForm.getFechaMFin(),busquedaForm.getFechaDFin(),busquedaForm.getFechaSFin()).validate() || !new CustomDate(busquedaForm.getFechaIniFormatoFin(),busquedaForm.getFechaIniAFin(),busquedaForm.getFechaIniMFin(),busquedaForm.getFechaIniDFin(),busquedaForm.getFechaIniSFin()).validate() || !new CustomDate(busquedaForm.getFechaFinFormatoFin(),busquedaForm.getFechaFinAFin(),busquedaForm.getFechaFinMFin(),busquedaForm.getFechaFinDFin(),busquedaForm.getFechaFinSFin()).validate()) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FECHA_FINAL,request.getLocale())));        }      } catch (      Exception e) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FECHA_FINAL,request.getLocale())));      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_FECHAS)) {      try {        if (!new CustomDate(busquedaForm.getFechaFormato(),busquedaForm.getFechaA(),busquedaForm.getFechaM(),busquedaForm.getFechaD(),busquedaForm.getFechaS()).validate() || !new CustomDate(busquedaForm.getFechaIniFormato(),busquedaForm.getFechaIniA(),busquedaForm.getFechaIniM(),busquedaForm.getFechaIniD(),busquedaForm.getFechaIniS()).validate() || !new CustomDate(busquedaForm.getFechaFinFormato(),busquedaForm.getFechaFinA(),busquedaForm.getFechaFinM(),busquedaForm.getFechaFinD(),busquedaForm.getFechaFinS()).validate()) {          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA2,request.getLocale())));        }      } catch (      Exception e) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA2,request.getLocale())));      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_DATO_NUMERICO)) {      if (StringUtils.isNotBlank(busquedaForm.getNumero()) && !NumberUtils.isNumber(busquedaForm.getNumero())) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_INVALID,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FORM_NUMERO,request.getLocale())));      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_NIVELES_DESCRIPCION)) {      if (busquedaForm.getNiveles().length == 0) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.DESCRIPCION_BUSQUEDA_NIVELES,request.getLocale())));      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_ESTADO)) {      if (busquedaForm.getEstados().length == 0)       errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(FondosConstants.FONDOS_ESTADO,request.getLocale())));    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_BLOQUEO)) {      if (busquedaForm.getBloqueos().length == 0)       errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(FondosConstants.FONDOS_BLOQUEO,request.getLocale())));    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_CONDICIONES_AVANZADAS)) {      for (int i=0; i < busquedaForm.getTipoCampo().length; i++) {        if (busquedaForm.isReemplazoValoresNulos()) {          if (busquedaForm.getTipoCampo()[i].intValue() == 3) {            if (StringUtils.isNotEmpty(busquedaForm.getCampo()[i]) && StringUtils.isEmpty(busquedaForm.getValor1D()[i]) && StringUtils.isEmpty(busquedaForm.getValor1M()[i])&& StringUtils.isEmpty(busquedaForm.getValor1A()[i])&& StringUtils.isEmpty(busquedaForm.getValor1S()[i])) {              continue;            }          } else {            if (StringUtils.isNotEmpty(busquedaForm.getCampo()[i]) && StringUtils.isEmpty(busquedaForm.getValor1()[i])) {              continue;            }          }        }        String fila=new Integer(i + 1).toString();        if (busquedaForm.getTipoCampo()[i].intValue() == 3) {          if (StringUtils.isNotEmpty(busquedaForm.getCampo()[i]) && StringUtils.isEmpty(busquedaForm.getValor1D()[i]) && StringUtils.isEmpty(busquedaForm.getValor1M()[i])&& StringUtils.isEmpty(busquedaForm.getValor1A()[i])&& StringUtils.isEmpty(busquedaForm.getValor1S()[i])) {            if (busquedaForm.getTipoCampo().length > 1) {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO,fila));            } else {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO_SOLOUNO));            }          }          try {            CustomDate fecha1=new CustomDate(busquedaForm.getFormatoFecha1()[i],busquedaForm.getValor1A()[i],busquedaForm.getValor1M()[i],busquedaForm.getValor1D()[i],busquedaForm.getValor1S()[i]);            if (!fecha1.validate()) {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));            }          } catch (          Exception e) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));          }          try {            if (busquedaForm.getOperador()[i].equals(CustomDateFormat.DATE_OPERATOR_RANGE)) {              CustomDate fecha2=new CustomDate(busquedaForm.getFormatoFecha2()[i],busquedaForm.getValor2A()[i],busquedaForm.getValor2M()[i],busquedaForm.getValor2D()[i],busquedaForm.getValor2S()[i]);              if (!fecha2.validate()) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));              }            }          } catch (          Exception e) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_CONDICIONES_AVANZADAS,request.getLocale())));          }        } else {          if (busquedaForm.getTipoCampo()[i].intValue() == TipoCampo.NUMERICO_VALUE) {            if (!StringUtils.isNumeric(busquedaForm.getValor1()[i])) {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_FILA_VALOR,fila));            } else             if (busquedaForm.getOperador()[i].equals(CustomDateFormat.DATE_OPERATOR_RANGE)) {              if (StringUtils.isEmpty(busquedaForm.getValor1()[i])) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CAMPOS_OPERADOR_RANGO_OBLIGATORIOS,fila));              } else               if (!StringUtils.isNumeric(busquedaForm.getValor2()[i])) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_FILA_VALOR,fila));              }            }          } else           if (StringUtils.isNotEmpty(busquedaForm.getCampo()[i]) && StringUtils.isEmpty(busquedaForm.getValor1()[i])) {            if (busquedaForm.getTipoCampo().length > 1) {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO,fila));            } else {              errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_BUSQUEDA_AVANZADA_VALOR_OBLIGATORIO_SOLOUNO));            }          }        }      }    }    if (busqueda.getMapEntrada().containsKey(CamposBusquedas.CAMPO_ENTRADA_BUSQUEDA_AMBITO)) {      if (!ArrayUtils.isEmpty(busquedaForm.getIdObjetoAmbito())) {        String[] codRefs=(String[])ArrayUtils.clone(busquedaForm.getIdObjetoAmbito());        for (int i=codRefs.length - 1; i >= 0; i--) {          if (StringUtils.isBlank(codRefs[i]))           codRefs=(String[])ArrayUtils.remove(codRefs,i); else {            for (int j=i - 1; j >= 0; j--) {              if (codRefs[i].equals(codRefs[j])) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_REPETIDO,busquedaForm.getNombreObjetoAmbito()[i]));              } else               if (StringUtils.indexOf(codRefs[i],codRefs[j]) == 0) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,busquedaForm.getNombreObjetoAmbito()[i],busquedaForm.getNombreObjetoAmbito()[j]));              } else               if (StringUtils.indexOf(codRefs[j],codRefs[i]) == 0) {                errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,busquedaForm.getNombreObjetoAmbito()[j],busquedaForm.getNombreObjetoAmbito()[i]));              }            }          }        }      }    }  }  return errors;}  }
class C{  public boolean existTradestrategy(Tradestrategy tradestrategy){  if (null != this.getTradestrategies()) {    for (    Tradestrategy currTradestrategy : this.getTradestrategies()) {      if (currTradestrategy.equals(tradestrategy)) {        return true;      }    }  }  return false;}  }
class C{  public static Date parseRfc822Date(String dateString) throws ParseException {  return getRfc822DateFormat().parse(dateString);}  }
class C{  public void addAlternateName(java.lang.String param){  if (localAlternateName == null) {    localAlternateName=new java.lang.String[]{};  }  localAlternateNameTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAlternateName);  list.add(param);  this.localAlternateName=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void nuevaUnidadDocumentalExecuteLogic(ActionMapping mappings,HttpServletRequest request,int subtipo,String idFicha){  if (subtipo == ElementoCuadroClasificacion.SUBTIPO_CAJA)   saveCurrentInvocation(KeysClientsInvocations.CUADRO_NUEVA_FS_EN_DIVISIONFS,request); else   saveCurrentInvocation(KeysClientsInvocations.CUADRO_NUEVA_UDOC_EN_DIVISIONFS,request);  setReturnActionFordward(request,mappings.findForward("edicion_udocEnFS"));}  }
class C{  private void print(Queue<Runnable> queue,IoEvent event){  StringBuilder sb=new StringBuilder();  sb.append("Adding event ").append(event.getType()).append(" to session ").append(event.getSession().getId());  boolean first=true;  sb.append("\nQueue : [");  for (  Runnable elem : queue) {    if (first) {      first=false;    } else {      sb.append(", ");    }    sb.append(((IoEvent)elem).getType()).append(", ");  }  sb.append("]\n");  LOGGER.debug(sb.toString());}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize) {        break;      }      Map.Entry<K,V> toEvict=map.eldest();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected final void CAST_Decipher(int A,int B,int C,int D,int result[]){  int x;  for (int i=0; i < 6; i++) {    x=(11 - i) * 4;    C^=F1(D,_Km[x],_Kr[x]);    B^=F2(C,_Km[x + 1],_Kr[x + 1]);    A^=F3(B,_Km[x + 2],_Kr[x + 2]);    D^=F1(A,_Km[x + 3],_Kr[x + 3]);  }  for (int i=6; i < 12; i++) {    x=(11 - i) * 4;    D^=F1(A,_Km[x + 3],_Kr[x + 3]);    A^=F3(B,_Km[x + 2],_Kr[x + 2]);    B^=F2(C,_Km[x + 1],_Kr[x + 1]);    C^=F1(D,_Km[x],_Kr[x]);  }  result[0]=A;  result[1]=B;  result[2]=C;  result[3]=D;}  }
class C{  public void testAlgorithmParameterGenerator05() throws NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  try {    AlgorithmParameterGenerator.getInstance(null,validProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],validProviderName);      fail("NoSuchAlgorithmException must be thrown when (algorithm: ".concat(invalidValues[i].concat(")")));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  private static int writeSetsIn(int n,int p,int currentIndexInSet,int firstCandidate,int[] currentSet,int[][] sets,int upToSetNum){  for (int candidate=firstCandidate; candidate < n - p + currentIndexInSet + 1; candidate++) {    currentSet[currentIndexInSet]=candidate;    if (currentIndexInSet == p - 1) {      System.arraycopy(currentSet,0,sets[upToSetNum++],0,p);    } else {      upToSetNum=writeSetsIn(n,p,currentIndexInSet + 1,candidate + 1,currentSet,sets,upToSetNum);    }  }  return upToSetNum;}  }
class C{  public static BayesImWrapper serializableInstance(){  return new BayesImWrapper(BayesPmWrapper.serializableInstance(),new Parameters());}  }
class C{  protected void writePivotTable(final Writer w,@SuppressWarnings("rawtypes") final ICounter[] a,final PeriodEnum basePeriod,final TimestampFormatEnum timestampFormat) throws IOException {  if (w == null)   throw new IllegalArgumentException();  if (a == null)   throw new IllegalArgumentException();  if (a.length == 0) {    return;  }  if (basePeriod == null)   throw new IllegalArgumentException();  if (timestampFormat == null)   throw new IllegalArgumentException();  final HistoryTable t=new HistoryTable(a,basePeriod);  final PivotTable pt=new PivotTable(model.pattern,model.category,t);  final DateFormat dateFormat;switch (timestampFormat) {case dateTime:switch (basePeriod) {case Minutes:      dateFormat=DateFormat.getTimeInstance(DateFormat.SHORT);    break;case Hours:  dateFormat=DateFormat.getTimeInstance(DateFormat.MEDIUM);break;case Days:dateFormat=DateFormat.getDateInstance(DateFormat.MEDIUM);break;default :throw new AssertionError();}break;case epoch:dateFormat=null;break;default :throw new AssertionError(timestampFormat.toString());}new HTMLPivotTableRenderer(pt,new HTMLValueFormatter(model)).render(w);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public void replaceCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    ArrayList<JSONObject> serialized=new ArrayList<JSONObject>(configs.size());    boolean found=false;    try {      for (      HomeserverConnectionConfig c : configs) {        if (c.getCredentials().userId.equals(config.getCredentials().userId)) {          serialized.add(config.toJson());          found=true;        } else {          serialized.add(c.toJson());        }      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    if (!found)     return;    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.commit();  }}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  private String convertToQuarter(String month){  if (month.length() != 7)   return month;  String mm=month.substring(5,7);  int mon=Integer.parseInt(mm);  return month.substring(0,5) + "Q" + ((mon / 3) + 1);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.036 -0500",hash_original_method="5CA794846447D2C6B22D76C82E64F776",hash_generated_method="38419854DDD9759FDC9FBB9E51521BEE") public static byte[] hexStringToBytes(String s){  byte[] ret;  if (s == null)   return null;  int sz=s.length();  ret=new byte[sz / 2];  for (int i=0; i < sz; i+=2) {    ret[i / 2]=(byte)((hexCharToInt(s.charAt(i)) << 4) | hexCharToInt(s.charAt(i + 1)));  }  return ret;}  }
class C{  @Override public String replacePath(String inputURI){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("About to filter: " + inputURI);  }  if (inputURI.contains(TemporaryDirectoryManager.DIRECTORY_TEMPLATE)) {synchronized (LOCK) {      initialiseDirectory();      String[] components=inputURI.split("[:;]");      for (      String component : components) {        if (component.contains(DIRECTORY_TEMPLATE)) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Component of URL: " + component);            LOGGER.debug("temporaryDirectoryName: " + temporaryDirectoryName);          }          String prefix=component.substring(0,component.indexOf(DIRECTORY_TEMPLATE));          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("prefix: " + prefix);          }          File temporaryDirectory=new File(prefix,temporaryDirectoryName);          if (!createdDirectories.contains(temporaryDirectory.getPath())) {            if (!temporaryDirectory.exists()) {              if (!temporaryDirectory.mkdirs()) {                throw new IllegalStateException("Directory " + temporaryDirectory + " could not be created while configuring "+ inputURI);              } else {                createdDirectories.add(temporaryDirectory.getPath());              }            } else {              createdDirectories.add(temporaryDirectory.getPath());            }          }        }      }    }    final String modifiedInputURI=inputURI.replace(TemporaryDirectoryManager.DIRECTORY_TEMPLATE,temporaryDirectoryName);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("modifiedInputURI: " + modifiedInputURI);    }    return modifiedInputURI;  }  return inputURI;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTB16");  translateAll(environment,instruction,"UXTB16",instructions);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public boolean hasStatus(StatusType statusType){  for (  Status status : statuses) {    if (status.getStatusType() == statusType) {      return true;    }  }  return false;}  }
class C{  public static String gsm8BitUnpackedToString(byte[] data,int offset,int length,String characterset){  boolean isMbcs=false;  Charset charset=null;  ByteBuffer mbcsBuffer=null;  if (!TextUtils.isEmpty(characterset) && !characterset.equalsIgnoreCase("us-ascii") && Charset.isSupported(characterset)) {    isMbcs=true;    charset=Charset.forName(characterset);    mbcsBuffer=ByteBuffer.allocate(2);  }  String languageTableToChar=sLanguageTables[0];  String shiftTableToChar=sLanguageShiftTables[0];  StringBuilder ret=new StringBuilder(length);  boolean prevWasEscape=false;  for (int i=offset; i < offset + length; i++) {    int c=data[i] & 0xff;    if (c == 0xff) {      break;    } else     if (c == GSM_EXTENDED_ESCAPE) {      if (prevWasEscape) {        ret.append(' ');        prevWasEscape=false;      } else {        prevWasEscape=true;      }    } else {      if (prevWasEscape) {        char shiftChar=shiftTableToChar.charAt(c);        if (shiftChar == ' ') {          ret.append(languageTableToChar.charAt(c));        } else {          ret.append(shiftChar);        }      } else {        if (!isMbcs || c < 0x80 || i + 1 >= offset + length) {          ret.append(languageTableToChar.charAt(c));        } else {          mbcsBuffer.clear();          mbcsBuffer.put(data,i++,2);          mbcsBuffer.flip();          ret.append(charset.decode(mbcsBuffer).toString());        }      }      prevWasEscape=false;    }  }  return ret.toString();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension minimumSize=insetSize(parent);  if (parent.getComponentCount() > 0) {    Dimension childSize=getComponent(0).getMinimumSize();    minimumSize.width+=childSize.width;    minimumSize.height+=childSize.height;  }  return minimumSize;}  }
class C{  public boolean isSetCursorResponse(){  return this.cursorResponse != null;}  }
class C{  public void testOverlappingMultiPolygonsHolesRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  MultiPolygon[] pt=new MultiPolygon[4];  STRUCT[] st=new STRUCT[8];  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(10);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPolygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    MultiPolygon pt2=(MultiPolygon)or.read(st[i]);    assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  public T clear(String value){  return attr("clear",value);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  protected void assertSameScores(Query q1,Query q2) throws Exception {  assertSameSet(q1,q2);  assertSameScores(q1,q2,null);  int numFilters=TEST_NIGHTLY ? atLeast(10) : atLeast(3);  for (int i=0; i < numFilters; i++) {    Query filter=randomFilter();    assertSameScores(q1,q2,filter);    assertSameScores(filteredQuery(q1,filter),filteredQuery(q2,filter),null);  }}  }
class C{  protected String determineInitialUrl(int tabId){  String initialUrl=null;  if (mTabModel != null) {    initialUrl=mTabModel.getInitialUrlForDocument(tabId);  }  if (TextUtils.isEmpty(initialUrl) && getIntent() != null) {    initialUrl=IntentHandler.getUrlFromIntent(getIntent());  }  if (TextUtils.isEmpty(initialUrl) && mDocumentTab != null && mDocumentTab.getWebContents() != null) {    NavigationEntry entry=mDocumentTab.getWebContents().getNavigationController().getEntryAtIndex(0);    if (entry != null)     initialUrl=entry.getOriginalUrl();  }  return initialUrl;}  }
class C{  public T campaignName(String value){  setString(CAMPAIGN_NAME,value);  return (T)this;}  }
class C{  public void put(String key,int value){  put(key.toCharArray(),key.length(),value);}  }
class C{  private void looper(){  Log.i(TAG,"Looping over pending exports");  if (toExport.size() > 0) {    Log.i(TAG,"Will process export " + toExport.get(0));    process(toExport.get(0));  } else {    Log.i(TAG,"No more pending exports left. Finishing");    mIsExecuting=false;  }}  }
class C{  public LinkedParameter(String name,Parameter argumentParameter,Operator argumentOperator,LinkedParameterComponentOptions options){  this.name=name;  this.argumentParameter=argumentParameter;  this.argumentOperator=argumentOperator;  this.options=options;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.298 -0500",hash_original_method="C65533A90B04CD548C8B98EAAB2119A6",hash_generated_method="AF5446B5C911B4C540F3AF6999AEC3A4") private void correctTooHigh(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final View lastChild=getChildAt(childCount - 1);    final int lastBottom=lastChild.getBottom();    final int end=(mBottom - mTop) - mListPadding.bottom;    int bottomOffset=end - lastBottom;    View firstChild=getChildAt(0);    final int firstTop=firstChild.getTop();    if (bottomOffset > 0 && (mFirstPosition > 0 || firstTop < mListPadding.top)) {      if (mFirstPosition == 0) {        bottomOffset=Math.min(bottomOffset,mListPadding.top - firstTop);      }      offsetChildrenTopAndBottom(bottomOffset);      if (mFirstPosition > 0) {        fillUp(mFirstPosition - 1,firstChild.getTop() - mDividerHeight);        adjustViewsUpOrDown();      }    }  }}  }
class C{  public TextComponent(){}  }
class C{  public JSONObject postComment(String revisionID,String message,boolean silent,String action) throws IOException, ConduitAPIException {  JSONObject params=new JSONObject();  params.element("revision_id",revisionID).element("action",action).element("message",message).element("silent",silent);  return this.callConduit("differential.createcomment",params);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int readInteger(String name) throws IOException {  while (true) {    String input=readString(name);    try {      return Integer.parseInt(input);    } catch (    NumberFormatException nfe) {      System.out.println("Invalid number " + input);    }  }}  }
class C{  void implReset(){  state[0]=0x67452301;  state[1]=0xefcdab89;  state[2]=0x98badcfe;  state[3]=0x10325476;}  }
class C{  public static Bitmap parseToBnW(byte[] data,int length){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int numOfPixels=width * height;  int[] pixels=new int[numOfPixels];  int pixelIndex=0;  int bitIndex=7;  byte currentByte=0x00;  while (pixelIndex < numOfPixels) {    if (pixelIndex % 8 == 0) {      currentByte=data[valueIndex++];      bitIndex=7;    }    pixels[pixelIndex++]=bitToRGB((currentByte >> bitIndex--) & 0x01);  }  ;  if (pixelIndex != numOfPixels) {    Log.e(LOG_TAG,"parse end and size error");  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  public void add(int row,TableCellRenderer renderer){  cellRenderers.get(row).add(renderer);}  }
class C{  public boolean put(int key,int value){  int key0;  final int tab[]=table;  final byte stat[]=state;  final int length=tab.length;  int hash=HashFunctions.hash(key) & 0x7FFFFFFF;  int i=hash % length;  int decrement=(hash / length) % length;  if (decrement == 0)   decrement=1;  int t=0;  int p0=i;  while (stat[i] == FULL && tab[i] != key) {    t++;    i-=decrement;    if (i < 0)     i+=length;  }  if (stat[i] == FULL) {    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  while (t > 1) {    key0=tab[p0];    hash=HashFunctions.hash(key0) & 0x7FFFFFFF;    decrement=(hash / length) % length;    if (decrement == 0)     decrement=1;    int pc=p0 - decrement;    if (pc < 0)     pc+=length;    if (stat[pc] != FREE) {      p0=pc;      t--;    } else {      this.totalProbesSaved+=(t - 1);      tab[pc]=key0;      stat[pc]=FULL;      values[pc]=values[p0];      i=p0;      t=0;    }  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.THIS_LITERAL__STRICT_MODE:    setStrictMode((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isLcdCrystalEnabled(){  return null == lcdCrystalEnabled ? _lcdCrystalEnabled : lcdCrystalEnabled.get();}  }
class C{  protected void copyQuery(){  if ((getCurrentTable() != null) && (getQueryPanel() != null)) {    getQueryPanel().setQuery(getCurrentTable().getQuery());  }}  }
class C{  public void invalidateSizes(){  visibleNodesChanged();}  }
class C{  public MultiPoint(Point[] points,PrecisionModel precisionModel,int SRID){  super(points,new GeometryFactory(precisionModel,SRID));}  }
class C{  protected void storeCommon(NamedBean t,Element elem){  storeUserName(t,elem);  storeComment(t,elem);  storeProperties(t,elem);}  }
class C{  public FlushConsolidationHandler(int explicitFlushAfterFlushes){  this.explicitFlushAfterFlushes=ObjectUtil.checkPositive(explicitFlushAfterFlushes,"explicitFlushAfterFlushes");}  }
class C{  public boolean addRoadName(String road){  if (_roadList.contains(road)) {    return false;  }  _roadList.add(road);  log.debug("train (" + getName() + ") add car road "+ road);  setDirtyAndFirePropertyChange(ROADS_CHANGED_PROPERTY,_roadList.size() - 1,_roadList.size());  return true;}  }
class C{  public boolean isPaused(){  return AnimatorUtil.isPaused(getAnimator()) || (mTarget != null && mTarget.isAnimationPaused());}  }
class C{  public static boolean validateText(String text){  return text != null && !text.isEmpty();}  }
class C{  protected void drawFilledPath(Canvas c,Path filledPath,int fillColor,int fillAlpha){  c.save();  c.clipPath(filledPath);  int color=(fillAlpha << 24) | (fillColor & 0xffffff);  c.drawColor(color);  c.restore();}  }
class C{  private static Rectangle mouseScreenBounds(){  return MouseInfo.getPointerInfo().getDevice().getDefaultConfiguration().getBounds();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return DELETED;default :return null;}}  }
class C{  public static Action procedure(){  return create(PROCEDURE);}  }
class C{  private static Method findAccessibleMethod(Method method,Type generic) throws NoSuchMethodException {  String name=method.getName();  Class<?>[] params=method.getParameterTypes();  if (generic instanceof Class) {    Class<?> type=(Class<?>)generic;    return findAccessibleMethod(type.getMethod(name,params));  }  if (generic instanceof ParameterizedType) {    ParameterizedType pt=(ParameterizedType)generic;    Class<?> type=(Class<?>)pt.getRawType();    for (    Method m : type.getMethods()) {      if (m.getName().equals(name)) {        Class<?>[] pts=m.getParameterTypes();        if (pts.length == params.length) {          if (Arrays.equals(params,pts)) {            return findAccessibleMethod(m);          }          Type[] gpts=m.getGenericParameterTypes();          if (params.length == gpts.length) {            if (Arrays.equals(params,TypeResolver.erase(TypeResolver.resolve(pt,gpts)))) {              return findAccessibleMethod(m);            }          }        }      }    }  }  throw new NoSuchMethodException("Method '" + name + "' is not accessible");}  }
class C{  public IntBitSet(int start,int end){  data=new int[8];  set(start,end + 1);}  }
class C{  public static void completeServerURIs(final MqttConnectionDetails connection,final boolean sslEnabled,final boolean websocket){  for (int i=0; i < connection.getServerURI().size(); i++) {    final String serverURI=connection.getServerURI().get(i);    final String completeServerURI=MqttUtils.getCompleteServerURI(serverURI,sslEnabled,websocket);    if (!completeServerURI.equals(serverURI)) {      logger.info("Auto-complete for server URI ({} -> {})",serverURI,completeServerURI);      connection.getServerURI().set(i,completeServerURI);    }  }}  }
class C{  public int indexOfFromTo(double element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  double[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.155 -0400",hash_original_method="CA74EF1D2F9A90E5C225B258755971AB",hash_generated_method="2D4F2DC2DE1D91B2E895F806A54E624E") public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      deflate();    }    writeTrailer();  }}  }
class C{  public static void printTriples(final FluoClient fluoClient) throws Exception {  try (Snapshot snapshot=fluoClient.newSnapshot()){    CellScanner cscanner=snapshot.scanner().fetch(new Column("triples","SPO")).build();    for (    RowColumnValue rcv : cscanner) {      System.out.println("Triple: " + rcv.getsRow());    }  } }  }
class C{  public static SpanQuery spanContainingQuery(SpanQuery big,SpanQuery little){  return spanQuery(new SpanContainingQuery(big,little));}  }
class C{  @InService(SegmentServiceImpl.class) public Page writePage(Page page,long oldSequence,int saveLength,int saveTail,int saveSequence,Result<Integer> result){  if (isClosed()) {    return null;  }  int pid=page.getId();  int nextPid=page.getNextId();  WriteStream out=out();  int head=(int)out.position();  try {    int available=getAvailable();    if (available < head + page.size()) {      return null;    }    Page newPage=page.writeCheckpoint(_table,this,oldSequence,saveLength,saveTail,saveSequence);    if (newPage == null) {      return null;    }    newPage.setSequence(getSequence());    out=out();    int tail=(int)out.position();    if (addIndex(out,page,newPage,saveSequence,newPage.getLastWriteType(),pid,nextPid,head,tail - head,result)) {      return newPage;    } else {      return null;    }  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  static public SerialLightManager instance(){  if (_instance == null) {    _instance=new SerialLightManager();  }  return _instance;}  }
class C{  public char last(){  if (max > off) {    return chars[pos=max - 1];  }  pos=max;  return DONE;}  }
class C{  protected Message createKeepAliveMessage(LocalCandidate candidate) throws StunException {  if (CandidateType.SERVER_REFLEXIVE_CANDIDATE.equals(candidate.getType()))   return null; else {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"candidate");  }}  }
class C{  public String putHeader(final String name,final String value){  if (headers == null) {    headers=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);  }  return headers.put(name,value);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"{}: processor not found",this);    }    return;  }  if (rp instanceof PutAllResponse) {    PutAllResponse processor=(PutAllResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public static Account createDummyAccount(Context context){  String accountName="DummyAccount";  String accountType=context.getString(R.string.account_type);  Account newAccount=new Account(accountName,accountType);  AccountManager accountManager=(AccountManager)context.getSystemService(Context.ACCOUNT_SERVICE);  if (accountManager.addAccountExplicitly(newAccount,null,null)) {    Timber.i("Account created!");  } else {    Timber.e("Account could not be created!");    return null;  }  return newAccount;}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (containsMapping(rowKey,columnKey,value)) {    remove(rowKey,columnKey);    return true;  }  return false;}  }
class C{  void flushEdt(){  if (!isEdt()) {    return;  }  while (!shouldEDTSleepNoFormAnimation()) {    edtLoopImpl();  }  while (animationQueue != null && animationQueue.size() > 0) {    edtLoopImpl();  }}  }
class C{  public void evaluateRotationAngle(Projection proj){  renderRotationAngle=null;  double projRotation=proj.getRotationAngle();  Object noRotationAtt=getAttribute(OMGraphicConstants.NO_ROTATE);  boolean compensateForProjRot=noRotationAtt != null && !noRotationAtt.equals(Boolean.FALSE);  if (compensateForProjRot) {    renderRotationAngle=rotationAngle - projRotation;  } else   if (rotationAngle != DEFAULT_ROTATIONANGLE) {    renderRotationAngle=rotationAngle;  }}  }
class C{  public void fillLatestCmts(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.SIDE_LATEST_CMTS,(Object)Collections.emptyList());}  }
class C{  @SuppressWarnings("NumericOverflow") public void checkIntOverflowDistribution(int partCnt) throws Exception {  IgniteUuid fileId=IgniteUuid.randomUuid();  IgfsGroupDataBlocksKeyMapper mapper=new IgfsGroupDataBlocksKeyMapper(1);  int part1=partition(mapper,fileId,Integer.MAX_VALUE - 1,partCnt);  int part2=partition(mapper,fileId,Integer.MAX_VALUE,partCnt);  int part3=partition(mapper,fileId,(long)Integer.MAX_VALUE + 1,partCnt);  assert checkPartition(part1,part2,partCnt) : "[fileId = " + fileId + "part1="+ part1+ ", part2="+ part2+ ", partCnt="+ partCnt+ ']';  assert checkPartition(part2,part3,partCnt) : "[fileId = " + fileId + "part1="+ part2+ ", part3="+ part3+ ", partCnt="+ partCnt+ ']';}  }
class C{  private static void saveViewDocument(IFile viewFile,ViewDocument viewInfo) throws IOException {  XStream xstream=XStreamFactory.newStaxXStream();  XStreamFactory.configureRefXStream(xstream);  ObjectXmlPersist persist=new ObjectXmlPersist(xstream);  persist.save(viewFile.getRawLocationURI(),viewInfo);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public byte[] readBytes(int howmany,boolean allowless) throws EOFException, FormatException {  byte foo[]=new byte[howmany];  int gotsofar=0;  int err=0;  try {    while (gotsofar < howmany) {      err=inputStream.read(foo,gotsofar,howmany - gotsofar);      if (err == -1) {        if (allowless) {          byte retval[]=new byte[gotsofar];          System.arraycopy(foo,0,retval,0,gotsofar);          count(gotsofar);          return retval;        } else {          if (gotsofar > 0) {            throw new FormatException("StreamInputReader: EOF while reading data");          } else {            throw new EOFException();          }        }      }      gotsofar+=err;    }  } catch (  IOException i) {    throw new FormatException("StreamInputReader: readBytes IOException: " + i.getMessage());  }  count(howmany);  return foo;}  }
class C{  public void ensureCapacity(int minimumCapacity){  int newCapacity=Tools.arraySize(minimumCapacity,m_fillFactor);  if (newCapacity > m_data.length) {    rehash(newCapacity);  }}  }
class C{  private boolean readMetaData() throws IOException {  SegmentExtent metaExtentInit=new SegmentExtent(0,0,META_SEGMENT_SIZE);  try (InSegment reader=openRead(metaExtentInit)){    ReadStream is=reader.in();    if (!readMetaDataHeader(is)) {      return false;    }    _segmentId=1;  }   int metaLength=_segmentMeta[0].size();  SegmentExtent metaExtent=new SegmentExtent(0,0,metaLength);  _metaExtents.clear();  _metaExtents.add(metaExtent);  _metaAddress=0;  _metaOffset=META_OFFSET;  _metaTail=_metaOffset + metaLength;  while (true) {    try (InSegment reader=openRead(metaExtent)){      ReadStream is=reader.in();      if (metaExtent.address() == 0) {        is.position(META_OFFSET);      }      long metaAddress=_metaAddress;      while (readMetaDataEntry(is)) {      }      if (_metaAddress == metaAddress) {        return true;      }      metaExtent=new SegmentExtent(0,_metaAddress,metaLength);    }   }}  }
class C{  public boolean resume(){  paused=false;  return true;}  }
class C{  public MosaicId(final NamespaceId namespaceId,final String name){  MustBe.notNull(namespaceId,"namespaceId");  MustBe.notNull(name,"name");  this.namespaceId=namespaceId;  this.name=name;  this.validate();}  }
class C{  public static BiSortVal createTree(int size,int seed){  if (size > 1) {    seed=random(seed);    int next_val=seed % RANGE;    BiSortVal retval=new BiSortVal(next_val);    retval.left=createTree(size / 2,seed);    retval.right=createTree(size / 2,skiprand(seed,size + 1));    return retval;  } else {    return null;  }}  }
class C{  @Override public int compareTo(DoubleDoublePair other){  int fdiff=Double.compare(this.first,other.first);  if (fdiff != 0) {    return fdiff;  }  return Double.compare(this.second,other.second);}  }
class C{  public static <T>Comparator<T> reverse(Comparator<T> comparator){  if (comparator instanceof ReverseOrderComparator) {    return ((ReverseOrderComparator<T>)comparator).comparator;  }  return new ReverseOrderComparator<T>(comparator);}  }
class C{  private CSettingsDialogFunctions(){}  }
class C{  public void clear(){  list.clear();}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((ASN1Encodable)obj).toASN1Primitive())));  } catch (  Exception e) {    return false;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.TYPE__REFERENCES:    return ((InternalEList<?>)getReferences()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static MockProxyMetaClass make(Class theClass){  return make(theClass,false);}  }
class C{  public String normalizeUserName(String name) throws ServerException {  return accountValidator.normalizeAccountName(name,GENERATED_NAME_PREFIX);}  }
class C{  public PdxSerializationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isBluetoothEnabled(){  return mAdapter.isEnabled();}  }
class C{  public void addBulkMessages(LinkedList<Message> messages){  LinkedList<TextView> mMessages=this.messages;  Context mContext=this.context;  int mSize=messages.size();  for (int i=mSize - 1; i > -1; i--) {    mMessages.add(messages.get(i).renderTextView(mContext));    if (mMessages.size() > historySize) {      mMessages.remove(0);    }  }  notifyDataSetChanged();}  }
class C{  public static void processMouseDragged(MouseEvent e){  sharedInstance._processMouseDragged(e);}  }
class C{  public void addListener(final ISPARQLUpdateListener l){  if (isReadOnly())   throw new UnsupportedOperationException();  if (l == null)   throw new IllegalArgumentException();  listeners.add(l);}  }
class C{  public static ActivateInstance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ActivateInstance object=new ActivateInstance();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"activateInstance".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ActivateInstance)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  public void perturbOverlappingPoints(final double factor){  double distance;  boolean repeat;  int numPoints=getNumPoints();  for (int i=0; i < numPoints; i++) {    repeat=false;    for (int j=i + 1; j < numPoints; j++) {      distance=getDistance(i,j);      if ((distance == 0) || (Double.isNaN(distance))) {        repeat=true;        continue;      }    }    if (repeat) {      double[] newPoint=new double[dimensions];      for (int k=0; k < dimensions; k++) {        newPoint[k]=getComponent(i,k) + ((Math.random() - 0.5) * factor);        getPoint(i).setData(newPoint);      }    } else {      continue;    }  }}  }
class C{  public static void logStopSignal(final Logger logger){  logger.logMessage(Level.INFO,"Consumer received STOP Signal");}  }
class C{  public ProjectHostingClient(ProjectHostingService service,String project,String username,String password) throws AuthenticationException, MalformedURLException {  this.service=service;  this.project=project;  this.username=username;  this.password=password;  if ((username != null) && (password != null)) {    service.setUserCredentials(username,password);  }  issuesBaseUri=FEED_URI_BASE + "/p/" + project+ "/issues";  issuesFeedUrl=makeIssuesFeedUrl(project);  String issuesBaseUriHttp=issuesBaseUri.replaceFirst("https","http");  issueIdPattern=Pattern.compile(issuesBaseUriHttp + PROJECTION + "/(\\d+)$");  commentIdPattern=Pattern.compile(issuesBaseUriHttp + "/\\d+/comments" + PROJECTION+ "/(\\d+)$");}  }
class C{  public RolloutGroupConditionBuilder errorAction(final RolloutGroupErrorAction action,final String expression){  conditions.setErrorAction(action);  conditions.setErrorActionExp(expression);  return this;}  }
class C{  @MediumTest @UiThreadTest public void testSetSelection(){  int childCount=mListView.getChildCount();  for (int i=0; i < childCount; i++) {    mListView.setSelection(i);    assertEquals("Set selection",i,mListView.getSelectedItemPosition());  }}  }
class C{  public boolean isTerminal(){  List<? extends ParseTreeNode> children=children();  if (children.isEmpty()) {    return false;  }  ParseTreeNode lastChild=children.get(children.size() - 1);  return lastChild instanceof Statement && ((Statement)lastChild).isTerminal();}  }
class C{  public int cospan(final CharSet s){  return cospan(s,0);}  }
class C{  public void testNextLongBoundNonPositive(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  public boolean isAsync(){  return this.isDeclaredAsync();}  }
class C{  public String addStepToCreateSnapshotSession(Workflow workflow,URI systemURI,URI session,String repGroupName,String waitFor){  String stepId=workflow.createStep(BlockDeviceController.CREATE_SNAPSHOT_SESSION_STEP_GROUP,String.format("Creating block snapshot session"),waitFor,systemURI,getDeviceType(systemURI),getClass(),createBlockSnapshotSessionMethod(systemURI,session,repGroupName),rollbackMethodNullMethod(),null);  return stepId;}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public void clearSelection(){  if (anchorSelectionIndex > -1) {    leadSelectionIndex=anchorSelectionIndex;  } else {    anchorSelectionIndex=leadSelectionIndex=0;  }  repaintSelection();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.495 -0500",hash_original_method="FA18FCA0F08D3E4AC2B0D49617508B22",hash_generated_method="FE2BE72850B9AB32DECB3FE94671B44D") public boolean reportFullscreenMode(boolean enabled){  mIMM.setFullscreenMode(enabled);  return true;}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  private FCZoneReference findFCZoneReferenceForVolGroupKey(URI exportGroupURI,URI volumeURI,String refKey,String[] newOrExisting){  Map<String,FCZoneReference> volRefMap=_networkScheduler.makeExportToReferenceMap(refKey);  String volExportKey=make2UriKey(volumeURI,exportGroupURI);  if (volRefMap.containsKey(volExportKey)) {    FCZoneReference ref=volRefMap.get(volExportKey);    if (ref != null && ref.getInactive() == false) {      _log.info(String.format("Existing zone reference: vol %s group %s refkey %s",volumeURI,exportGroupURI,refKey));      newOrExisting[0]="Existing";      return ref;    }  }  return null;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("servers") @Valid Servers server,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Servers jpaServers=new com.wipro.ats.bdre.md.dao.jpa.Servers();    jpaServers.setServerId(server.getServerId());    jpaServers.setServerName(server.getServerName());    jpaServers.setServerType(server.getServerType());    jpaServers.setServerIp(server.getServerIp());    jpaServers.setSshPrivateKey(server.getSshPrivateKey());    jpaServers.setLoginUser(server.getLoginUser());    jpaServers.setLoginPassword(server.getLoginPassword());    jpaServers.setServerMetainfo(server.getServerMetaInfo());    serversDAO.update(jpaServers);    restWrapper=new RestWrapper(server,RestWrapper.OK);    LOGGER.info("Record with ID:" + server.getServerId() + " updated in Servers by User:"+ principal.getName()+ server);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void main(String[] args){  int count=0;  for (int i=1; i <= 10000; i++) {    if (playCraps() == 1)     count++;  }  System.out.println("Number of winning games: " + count);}  }
class C{  public Object run(GroovyCodeSource source,String[] args) throws CompilationFailedException {  Class scriptClass=parseClass(source);  return runScriptOrMainOrTestOrRunnable(scriptClass,args);}  }
class C{  public boolean isObject(){  return getWrappedPath().isObject();}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  protected boolean acceptItem(NavigationItem item){  return true;}  }
class C{  public long tryReadLock(){  for (; ; ) {    long s, m, next;    if ((m=(s=state) & ABITS) == WBIT)     return 0L; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))       return next;    } else     if ((next=tryIncReaderOverflow(s)) != 0L)     return next;  }}  }
class C{  public ResourceFilter location(String value){  return setMatcher(value,Matcher.location);}  }
class C{  public TerrainProfileLayer(){}  }
class C{  @Override public ModelRendererTurbo addBox(float x,float y,float z,int w,int h,int d){  addBox(x,y,z,w,h,d,0.0F);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isProbablePrime(int certainty){  return peer.isProbablePrime(certainty);}  }
class C{  public void position(final long v) throws IOException {  this.off=origin + (int)Math.min(v,limit);}  }
class C{  public static Face drawWest(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face west=new Face();  west.normal=Direction.WEST.toVector();  west.drawVertex(new Vertex(minX,minY,minZ,textureCoordinates.getWestMinU(),textureCoordinates.getWestMaxV()));  west.drawVertex(new Vertex(minX,minY,maxZ,textureCoordinates.getWestMaxU(),textureCoordinates.getWestMaxV()));  west.drawVertex(new Vertex(minX,maxY,maxZ,textureCoordinates.getWestMaxU(),textureCoordinates.getWestMinV()));  west.drawVertex(new Vertex(minX,maxY,minZ,textureCoordinates.getWestMinU(),textureCoordinates.getWestMinV()));  model.drawFace(west);  return west;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public static PathPatternProcessorDecorator include(final Object processor,final String... patterns){  return new PathPatternProcessorDecorator(processor,true,patterns);}  }
class C{  public static Transaction createFakeTxWithChangeAddress(NetworkParameters params,Coin value,Address to,Address changeOutput){  Transaction t=new Transaction(params);  TransactionOutput outputToMe=new TransactionOutput(params,t,value,to);  t.addOutput(outputToMe);  TransactionOutput change=new TransactionOutput(params,t,valueOf(1,11),changeOutput);  t.addOutput(change);  Transaction prevTx=new Transaction(params);  TransactionOutput prevOut=new TransactionOutput(params,prevTx,value,to);  prevTx.addOutput(prevOut);  t.addInput(prevOut).setScriptSig(ScriptBuilder.createInputScript(TransactionSignature.dummy()));  return roundTripTransaction(params,t);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static void checkNull(Object o,Object value){  if (o != null)   error(String.valueOf(value));}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void delete(String idToDelete) throws IOException, ServiceException {  TableEntry entry=entriesCached.get(idToDelete);  if (entry != null) {    entry.delete();    out.println("Deleted!");  } else {    out.println("I don't know that ID.");    out.println("In GData, you must get an entry before deleting it,");    out.println("so that you have the version ID.");    out.println("You might have to 'list' first.");  }}  }
class C{  @Ignore @Test public void test_DRPERSISTENCE_PGSPERSISTENCE_VALIDATEQUEUE_Restart_Validate_Receiver(){  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  vm2.invoke(null);  vm3.invoke(null);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  String diskStore1=(String)vm4.invoke(null);  String diskStore2=(String)vm5.invoke(null);  String diskStore3=(String)vm6.invoke(null);  String diskStore4=(String)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("The DS are: " + diskStore1 + ","+ diskStore2+ ","+ diskStore3+ ","+ diskStore4);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  LogWriterUtils.getLogWriter().info("Completed puts in the region");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created back the cache");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Created the senders back from the disk store.");  AsyncInvocation inv1=vm4.invokeAsync(null);  AsyncInvocation inv2=vm5.invokeAsync(null);  AsyncInvocation inv3=vm6.invokeAsync(null);  AsyncInvocation inv4=vm7.invokeAsync(null);  try {    inv1.join();    inv2.join();    inv3.join();    inv4.join();  } catch (  InterruptedException e) {    e.printStackTrace();    fail();  }  startSenderInVMsAsync("ln",vm4,vm5,vm6,vm7);  LogWriterUtils.getLogWriter().info("Waiting for senders running.");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  LogWriterUtils.getLogWriter().info("All the senders are now running...");  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  private void renegotiateIfNeeded(SSLEngineResult res) throws IgniteCheckedException, SSLException {  if (res.getStatus() != CLOSED && res.getStatus() != BUFFER_UNDERFLOW && res.getHandshakeStatus() != NOT_HANDSHAKING) {    handshakeStatus=res.getHandshakeStatus();    if (log.isDebugEnabled())     log.debug("Renegotiation requested [status=" + res.getStatus() + ", handshakeStatus = "+ handshakeStatus+ ']');    handshakeFinished=false;    handshake();  }}  }
class C{  private static File resolveHadoopConfig(String name){  File path=U.resolveIgnitePath("modules/hadoop/config/" + name);  return path != null ? path : U.resolveIgnitePath("config/hadoop/" + name);}  }
class C{  public void write(OutputStream out,java.util.List<Figure> figures) throws IOException {  Rectangle2D.Double drawingRect=null;  for (  Figure f : figures) {    if (drawingRect == null) {      drawingRect=f.getBounds();    } else {      drawingRect.add(f.getBounds());    }  }  AffineTransform tx=new AffineTransform();  tx.translate(-Math.min(0,drawingRect.x),-Math.min(0,drawingRect.y));  write(out,figures,tx,new Dimension((int)(Math.abs(drawingRect.x) + drawingRect.width),(int)(Math.abs(drawingRect.y) + drawingRect.height)));}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  public static long lastModifiedSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.lastModified();}  }
class C{  public void inputOverrideConfig(DataInputStream dataIn){  settingList.clear();  new DefaultConfigFilePrinter().parseConfig(new BufferedReader(new InputStreamReader(dataIn)),settingList);  mc.ingameGUI.getChatGUI().printChatMessage(new ChatComponentText("Finder Compass server config loaded; " + settingList.size() + " custom Setting-Sets loaded"));}  }
class C{  @NotNull public static String readFile(@NotNull VirtualFile file) throws IOException {  final int ATTEMPTS=3;  for (int attempt=0; attempt < ATTEMPTS; attempt++) {    try {      return new String(file.contentsToByteArray());    } catch (    IOException e) {      LOG.info(String.format("IOException while reading %s (attempt #%s)",file,attempt));      if (attempt >= ATTEMPTS - 1) {        throw e;      }    }  }  throw new AssertionError("Shouldn't get here. Couldn't read " + file);}  }
class C{  public JsonElement parse(Reader json) throws JsonIOException, JsonSyntaxException {  try {    JsonReader jsonReader=new JsonReader(json);    JsonElement element=parse(jsonReader);    if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {      throw new JsonSyntaxException("Did not consume the entire document.");    }    return element;  } catch (  MalformedJsonException e) {    throw new JsonSyntaxException(e);  }catch (  IOException e) {    throw new JsonIOException(e);  }catch (  NumberFormatException e) {    throw new JsonSyntaxException(e);  }}  }
class C{  public void dispose(){  m_graph.getRawView().removeListener(m_listener);  for (  final ITypeDescription description : m_model.getDescriptions()) {    description.removeListener(m_descriptionListener);  }}  }
class C{  private void heapifyUp(int twopos,int cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    int par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  public void testRemoveFirstOccurrence(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=1; i < SIZE; i+=2) {    assertTrue(q.removeFirstOccurrence(new Integer(i)));  }  for (int i=0; i < SIZE; i+=2) {    assertTrue(q.removeFirstOccurrence(new Integer(i)));    assertFalse(q.removeFirstOccurrence(new Integer(i + 1)));  }  assertTrue(q.isEmpty());}  }
class C{  public void fillToolBar(ToolBarManager manager,IInformationControl infoControl){  ConfigureAnnotationsAction configureAnnotationsAction=new ConfigureAnnotationsAction(annotation,infoControl);  manager.add(configureAnnotationsAction);}  }
class C{  public void run(){  if (isFetching()) {    logger.info("Triggered fetch cancelled. A fetch is already in progress.");    return;  }  try {    setFetching(true);    logger.info("Fetcher starting fetches");    logJavaMailProperties();    updateDynamicAccounts();    ArrayList<Account> mergedAccounts=new ArrayList<Account>(getDynamicAccounts().size() + getStaticAccounts().size());    mergedAccounts.addAll(getDynamicAccounts().values());    mergedAccounts.addAll(getStaticAccounts());    Collections.sort(mergedAccounts);    StringBuilder logMessage=new StringBuilder(64);    logMessage.append("Processing ");    logMessage.append(getStaticAccounts().size());    logMessage.append(" static accounts and ");    logMessage.append(getDynamicAccounts().size());    logMessage.append(" dynamic accounts.");    logger.info(logMessage.toString());    for (    Account mergedAccount : mergedAccounts) {      try {        new StoreProcessor(mergedAccount).process();      } catch (      MessagingException ex) {        logger.error("A MessagingException has terminated processing of this Account",ex);      }    }  } catch (  Exception ex) {    logger.error("An Exception has terminated this fetch.",ex);  } finally {    logger.info("Fetcher completed fetches");    setFetching(false);  }}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role name: " + roleName);  if (roleValue != null) {    result.append("; value: ");    for (Iterator<ObjectName> objNameIter=roleValue.iterator(); objNameIter.hasNext(); ) {      ObjectName currObjName=objNameIter.next();      result.append(currObjName.toString());      if (objNameIter.hasNext()) {        result.append(", ");      }    }  }  result.append("; problem type: " + problemType);  return result.toString();}  }
class C{  static LuaValue reverse(LuaValue arg){  LuaString s=arg.checkstring();  int n=s.length();  byte[] b=new byte[n];  for (int i=0, j=n - 1; i < n; i++, j--)   b[j]=(byte)s.luaByte(i);  return LuaString.valueOf(b);}  }
class C{  public final CC growY(){  ver.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  public void removeStrategyWorker(String key){  if (m_strategyWorkers.containsKey(key)) {    m_strategyWorkers.remove(key);  }}  }
class C{  public static boolean isLexemeBoundary(@NotNull Editor editor,int offset){  if (!(editor instanceof EditorEx) || offset <= 0 || offset >= editor.getDocument().getTextLength())   return false;  if (CharArrayUtil.isEmptyOrSpaces(editor.getDocument().getImmutableCharSequence(),offset - 1,offset + 1))   return false;  EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();  HighlighterIterator it=highlighter.createIterator(offset);  if (it.getStart() != offset) {    return false;  }  IElementType rightToken=it.getTokenType();  it.retreat();  IElementType leftToken=it.getTokenType();  return !Comparing.equal(leftToken,rightToken);}  }
class C{  public MBankAccount(Properties ctx,int C_BankAccount_ID,String trxName){  super(ctx,C_BankAccount_ID,trxName);  if (C_BankAccount_ID == 0) {    setIsDefault(false);    setBankAccountType(BANKACCOUNTTYPE_Checking);    setCurrentBalance(Env.ZERO);    setCreditLimit(Env.ZERO);  }}  }
class C{  public final CC gap(String... args){switch (args.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + args.length);case 4:  gapBottom(args[3]);case 3:gapTop(args[2]);case 2:gapRight(args[1]);case 1:gapLeft(args[0]);}return this;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.TYPE_ALIAS_DEFINITION;}  }
class C{  public static void register(){  for (  Impl impl : Impl.values()) {    registerEnchantment(new GlowEnchantment(impl));  }  stopAcceptingRegistrations();}  }
class C{  public CollectionObject(CollectionObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.companyId=parent.getCompanyId();  this.projectName=parent.getProjectName();  this.projectId=parent.getProjectId();  this.creatorId=parent.getCreatorId();  this.creatorName=parent.getCreatorName();  this.attachId=parent.getAttachId();  this.deleted=parent.getDeleted();  this.title=parent.getTitle();  this.attachType=parent.getAttachType();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void pausePlaying(){  mVideoView.pause();  mHandlerForProgressBar.removeCallbacks(mRunnForProgressBar);  mIsPlaying=VIDEO_IS_PAUSED;}  }
class C{  public static XField createXField(String className,Field field){  String fieldName=field.getName();  String fieldSig=field.getSignature();  XField xfield=getExactXField(className,fieldName,fieldSig,field.isStatic());  assert xfield.isResolved() : "Could not exactly resolve " + xfield;  return xfield;}  }
class C{  public boolean isRedirectingOutput(){  return this.redirectOutput;}  }
class C{  private void updateHistory(final long newMessages){  if (dayCounters.isEmpty()) {    return;  }synchronized (dayCounters) {    DayCounter counterLast=dayCounters.get(dayCounters.size() - 1);    GregorianCalendar calNow=new GregorianCalendar();    GregorianCalendar calLast=counterLast.getDate();    calNow.clear(Calendar.AM_PM);    calNow.clear(Calendar.HOUR);    calNow.clear(Calendar.HOUR_OF_DAY);    calNow.clear(Calendar.MINUTE);    calNow.clear(Calendar.SECOND);    calNow.clear(Calendar.MILLISECOND);    calLast.clear(Calendar.AM_PM);    calLast.clear(Calendar.HOUR);    calLast.clear(Calendar.HOUR_OF_DAY);    calLast.clear(Calendar.MINUTE);    calLast.clear(Calendar.SECOND);    calLast.clear(Calendar.MILLISECOND);    long millisPerDay=86400000;    long millisDelta=calNow.getTime().getTime() - calLast.getTime().getTime();    int dayDelta=(int)(millisDelta / millisPerDay);    if (dayDelta > 0) {      counterLast.finalizeDayCounter();      DayCounter counterNew;      for (int i=1; i < dayDelta; i++) {        calLast.add(Calendar.DAY_OF_YEAR,1);        counterNew=new DayCounter(calLast,false);        counterNew.finalizeDayCounter();        dayCounters.add(counterNew);      }      counterNew=new DayCounter(calNow,false);      dayCounters.add(counterNew);      setHistoryLimit(dayCounterMax);    }    counterLast=dayCounters.get(dayCounters.size() - 1);    counterLast.updateDayCounter(newMessages);  }}  }
class C{  default String renderGenerics(Generator gen,M model){  return gen.onEach(model.getGenerics()).collect(joinIfNotEmpty(", ","<",">" + genericsSuffix()));}  }
class C{  public static byte[] accDecoderPktOpsMode(int number,int cvNum,int data){  int dBits=(((number - 1) & 0x03) << 1);  int aBits=(number - 1) >> 2;  aBits+=1;  int cBit=1;  return NmraPacket.accDecoderPktOpsMode(aBits,cBit,dBits,cvNum,data);}  }
class C{  @Override public GraphNode nextElement(){  if (empty()) {    GraphNode v=theNextElement;    currentRoot=theNextElement;    info.set(v.getIndex(),getConnected(v));    push(v);  }  recurse:   while (!empty()) {    GraphNode v=peek();    Enumeration<GraphNode> pendingChildren=info.get(v.getIndex());    for (Enumeration<GraphNode> e=pendingChildren; e.hasMoreElements(); ) {      GraphNode n=e.nextElement();      Enumeration<GraphNode> nChildren=info.get(n.getIndex());      if (nChildren == null) {        info.set(n.getIndex(),getConnected(n));        push(n);        continue recurse;      }    }    while (info.get(theNextElement.getIndex()) != null && e.hasMoreElements()) {      theNextElement=e.nextElement();    }    return pop();  }  return null;}  }
class C{  public ProcessTerminatedAbnormallyException(final int exitValue,final Throwable cause){  super(cause);  this.exitValue=exitValue;}  }
class C{  protected void mouseDragged(Minecraft p_146119_1_,int p_146119_2_,int p_146119_3_){}  }
class C{  public PathMatcher createPathMatcherModel(boolean isRecursive){  GraphEdgeMatcher edgeMatcher=editor.createEdgeMatcher();  EdgeMatcherPathMatcher pathPatcher=new EdgeMatcherPathMatcher("ad hoc",edgeMatcher);  PathExpression pathExpressionModel=new PathExpression();  pathExpressionModel.addPathMatcher(new PathMatcherTerm(pathPatcher,isRecursive,false));  pathMatcherModel=pathExpressionModel;  return pathMatcherModel;}  }
class C{  public UserEntities(){}  }
class C{  public LongBuffer modificationTimeStampBuffer(){  byteBuffer.position(PERFDATA_PROLOG_MODTIMESTAMP_OFFSET);  LongBuffer lb=byteBuffer.asLongBuffer();  lb.limit(1);  return lb;}  }
class C{  private void permutePivot(IntIntPair pos1,IntIntPair pos2){  int r1=pos1.first;  int c1=pos1.second;  int r2=pos2.first;  int c2=pos2.second;  int index;  index=row[r2];  row[r2]=row[r1];  row[r1]=index;  index=col[c2];  col[c2]=col[c1];  col[c1]=index;}  }
class C{  private void processLog(final CaptureLog log){  final CaptureLogAnalyzer analyzer=new CaptureLogAnalyzer();  final EvoTestCaseCodeGenerator codeGen=new EvoTestCaseCodeGenerator();  analyzer.analyze(log,codeGen,this.targetClasses);  this.carvedTest=codeGen.getCode();  codeGen.clear();}  }
class C{  protected void mergeGlyphGroups(WordInfo wi){  int numGG=wi.getNumGlyphGroups();  newSize=0;  if (ggis == null) {    newSize=numGG;    newGGIS=new GlyphGroupInfo[numGG];    for (int i=0; i < numGG; i++)     newGGIS[i]=wi.getGlyphGroup(i);  } else {    int s=0;    int i=0;    GlyphGroupInfo nggi=wi.getGlyphGroup(i);    int nStart=nggi.getStart();    GlyphGroupInfo oggi=ggis[size - 1];    int oStart=oggi.getStart();    newGGIS=assureSize(newGGIS,size + numGG);    if (nStart < oStart) {      oggi=ggis[s];      oStart=oggi.getStart();      while ((s < size) && (i < numGG)) {        if (nStart < oStart) {          newGGIS[newSize++]=nggi;          i++;          if (i < numGG) {            nggi=wi.getGlyphGroup(i);            nStart=nggi.getStart();          }        } else {          newGGIS[newSize++]=oggi;          s++;          if (s < size) {            oggi=ggis[s];            oStart=oggi.getStart();          }        }      }    }    while (s < size) {      newGGIS[newSize++]=ggis[s++];    }    while (i < numGG) {      newGGIS[newSize++]=wi.getGlyphGroup(i++);    }  }}  }
class C{  private void addConditions(Settings s,String cPrefix,String vPrefix,ArrayList<Tuple<String,ArithmeticCondition>> list,int nrof){  for (int i=1; i <= nrof; i++) {    ArithmeticCondition ac=s.getCondition(cPrefix + i);    String mcbValue=s.getSetting(vPrefix + i);    list.add(new Tuple<String,ArithmeticCondition>(mcbValue,ac));  }}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  @Deprecated public Scanner createScanner(byte[] beginKey,byte[] endKey) throws IOException {  return createScannerByKey(beginKey,endKey);}  }
class C{  private RollingFileAppender<ILoggingEvent> createLogAppender(LoggerContext context,Encoder<ILoggingEvent> encoder){  RollingFileAppender<ILoggingEvent> appender=new RollingFileAppender<>();  appender.setEncoder(encoder);  appender.setFile(file);  FixedWindowRollingPolicy rolling=new FixedWindowRollingPolicy();  rolling.setParent(appender);  rolling.setContext(context);  rolling.setMinIndex(1);  if (maxNumberLogs.isPresent() && maxNumberLogs.get() >= 0) {    rolling.setMaxIndex(maxNumberLogs.get());  } else {    rolling.setMaxIndex(1);  }  rolling.setFileNamePattern(getFileWithPattern("%i"));  SizeBasedTriggeringPolicy<ILoggingEvent> trigger=new SizeBasedTriggeringPolicy<>();  trigger.setMaxFileSize(getMaxFileSize());  trigger.setContext(context);  rolling.start();  trigger.start();  appender.setRollingPolicy(rolling);  appender.setTriggeringPolicy(trigger);  return appender;}  }
class C{  public CLDevice[] listGPUDevices(boolean onlyAvailable){  try {    return listDevices(CLDevice.Type.GPU,onlyAvailable);  } catch (  CLException ex) {    if (ex.getCode() == CL_DEVICE_NOT_FOUND) {      return new CLDevice[0];    }    throw new RuntimeException("Unexpected OpenCL error",ex);  }}  }
class C{  public static void writeRouteStops2Shape(String fileName,Map<Id,TransitStopFacility> stops,Collection<Id> stops2write){  PointFeatureFactory factory=initPointFeatureType("TransitRouteStops",null);  write(createStopFeatures(stops,stops2write,factory),fileName);}  }
class C{  public void onConfiguration(ContactsOps.View view,boolean firstTimeIn){  super.onConfiguration(view,firstTimeIn);  if (firstTimeIn) {    initializeCommands();    unregisterContentObserver();    registerContentObserver();  } else   if (mCursor != null)   displayCursor(mCursor);}  }
class C{  @SuppressWarnings("unchecked") <T extends Operation<U>,U>U executeOperation(Commit commit){  if (commit.operation() instanceof NoOpCommand) {    commit.close();    return null;  }  Function function=operations.get(commit.type());  if (function == null) {    for (    Map.Entry<Class,Function> entry : operations.entrySet()) {      if (entry.getKey().isAssignableFrom(commit.type())) {        function=entry.getValue();        break;      }    }    if (function != null) {      operations.put(commit.type(),function);    }  }  if (function == null) {    throw new IllegalStateException("unknown state machine operation: " + commit.type());  } else {    try {      return (U)function.apply(commit);    } catch (    Exception e) {      throw new ApplicationException("An application error occurred",e);    }  }}  }
class C{  @LargeTest public void testAudioTrack() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  assertEquals("Audio Track Item Duration",audioTrack.getDuration(),audioTrack.getTimelineDuration());  assertEquals("Audio Track Start Time",0,audioTrack.getStartTime());  assertFalse("Audio Track is Looping",audioTrack.isLooping());  audioTrack.getVolume();  assertFalse("Audio Track Ducking is Disabled",audioTrack.isDuckingEnabled());  assertTrue("Audio Track Filename",audioTrack.getFilename().equals(audioFileName));  assertEquals("Audio Ducking Threshold",0,audioTrack.getDuckingThreshhold());  assertFalse("Audio Track Mute",audioTrack.isMuted());  audioTrack.getDuckedTrackVolume();}  }
class C{  public void onOptionsMenuClosed(Menu menu){}  }
class C{  private void copyFeatures(FeatureStructure aSrcFS,FeatureStructure aDestFS){  Type srcType=aSrcFS.getType();  Type destType=aDestFS.getType();  for (  Feature srcFeat : srcType.getFeatures()) {    Feature destFeat;    if (destType == aSrcFS.getType()) {      destFeat=srcFeat;    } else {      destFeat=destType.getFeatureByBaseName(srcFeat.getShortName());      if (destFeat == null) {        throw new UIMARuntimeException(UIMARuntimeException.TYPE_NOT_FOUND_DURING_CAS_COPY,new Object[]{srcFeat.getName()});      }    }    if (srcFeat.getRange().isPrimitive()) {      aDestFS.setFeatureValueFromString(destFeat,aSrcFS.getFeatureValueAsString(srcFeat));    } else {      FeatureStructure refFS=aSrcFS.getFeatureValue(srcFeat);      if (refFS != null) {        boolean foundexisting=false;        if (refFS instanceof Annotation) {          if (!foundexisting && batchCopyAnnoList != null) {            for (            Annotation curAnno : batchCopyAnnoList) {              if (curAnno.getAddress() == ((Annotation)refFS).getAddress()) {                aDestFS.setFeatureValue(destFeat,copyFs(curAnno));                foundexisting=true;              }            }          }          if (!foundexisting) {            AnnotationIndex<AnnotationFS> annoIndex=aDestFS.getCAS().getAnnotationIndex(refFS.getType());            FSIterator<AnnotationFS> it=annoIndex.iterator();            while (it.hasNext()) {              AnnotationFS fs=it.next();              if (fs.getBegin() == ((AnnotationFS)refFS).getBegin() && fs.getEnd() == ((AnnotationFS)refFS).getEnd() && fs.getView().getViewName().equals(((AnnotationFS)refFS).getView().getViewName())) {                aDestFS.setFeatureValue(destFeat,fs);                foundexisting=true;              }            }          }        }        if (!foundexisting) {          FeatureStructure copyRefFs=copyFs(refFS);          aDestFS.setFeatureValue(destFeat,copyRefFs);        }      }    }  }}  }
class C{  public final void testSetRegex(){  RegexConstraint regexConstraint=new RegexConstraint(Pattern.compile("."));  regexConstraint.setRegex(REGEX);  assertEquals(REGEX,regexConstraint.getRegex());}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  private String tryToInvert(String maybeNumber){  if (!maybeNumber.isEmpty()) {    return Integer.toString(Integer.parseInt(maybeNumber) * -1);  }  return "";}  }
class C{  public final void testF0Value(){  assertEquals(3,RSAKeyGenParameterSpec.F0.intValue());}  }
class C{  private void dumpState(){  System.out.println("LdapReferralException.dumpState");  System.out.println("  hashCode=" + hashCode());  System.out.println("  foundEntry=" + foundEntry);  System.out.println("  skipThisReferral=" + skipThisReferral);  System.out.println("  referralIndex=" + referralIndex);  if (referrals != null) {    System.out.println("  referrals:");    for (int i=0; i < referralCount; i++) {      System.out.println("    [" + i + "] "+ referrals.elementAt(i));    }  } else {    System.out.println("  referrals=null");  }  System.out.println("  errorEx=" + errorEx);  if (nextReferralEx == null) {    System.out.println("  nextRefEx=null");  } else {    System.out.println("  nextRefEx=" + nextReferralEx.hashCode());  }  System.out.println();}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public boolean exists(){  return getBestPath().exists();}  }
class C{  private void rotateLeft(Node<K,V> root){  Node<K,V> left=root.left;  Node<K,V> pivot=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.right=pivotLeft;  if (pivotLeft != null) {    pivotLeft.parent=root;  }  replaceInParent(root,pivot);  pivot.left=root;  root.parent=pivot;  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;}  }
class C{  private void compareTupleQueryResults(TupleQueryResult queryResult,TupleQueryResult expectedResult,boolean checkOrder) throws Exception {  MutableTupleQueryResult queryResultTable=new MutableTupleQueryResult(queryResult);  MutableTupleQueryResult expectedResultTable=new MutableTupleQueryResult(expectedResult);  boolean resultsEqual;  resultsEqual=QueryResultUtil.equals(queryResultTable,expectedResultTable);  if (checkOrder) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    while (queryResultTable.hasNext()) {      BindingSet bs=queryResultTable.next();      BindingSet expectedBs=expectedResultTable.next();      if (!bs.equals(expectedBs)) {        resultsEqual=false;        break;      }    }  }  if (!resultsEqual) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    List<BindingSet> queryBindings=Iterations.asList(queryResultTable);    List<BindingSet> expectedBindings=Iterations.asList(expectedResultTable);    List<BindingSet> missingBindings=new ArrayList<BindingSet>(expectedBindings);    missingBindings.removeAll(queryBindings);    List<BindingSet> unexpectedBindings=new ArrayList<BindingSet>(queryBindings);    unexpectedBindings.removeAll(expectedBindings);    StringBuilder message=new StringBuilder(128);    message.append("\n============ ");    message.append(getName());    message.append(" =======================\n");    if (!missingBindings.isEmpty()) {      message.append("Missing bindings: \n");      for (      BindingSet bs : missingBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',getName().length(),message);      message.append("========================\n");    }    if (!unexpectedBindings.isEmpty()) {      message.append("Unexpected bindings: \n");      for (      BindingSet bs : unexpectedBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',getName().length(),message);      message.append("========================\n");    }    if (checkOrder && missingBindings.isEmpty() && unexpectedBindings.isEmpty()) {      message.append("Results are not in expected order.\n");      message.append(" =======================\n");      message.append("query result: \n");      for (      BindingSet bs : queryBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      message.append("expected result: \n");      for (      BindingSet bs : expectedBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      System.out.print(message.toString());    }    log.error(message.toString());    fail(message.toString());  }}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  private void createBundlePoolIfNecessary(){  File cacheFile=GoomphCacheLocations.bundlePool();  String url=FileMisc.asUrl(cacheFile);  if (!repos.contains(url) && !metadataRepos.contains(url) && !artifactRepos.contains(url)) {    return;  }  if (cacheFile.isDirectory()) {    for (    File child : FileMisc.list(cacheFile)) {      if (child.isFile()) {        if (child.getName().startsWith("artifacts.")) {          return;        }      }    }  }  Errors.rethrow().run(null);}  }
class C{  public synchronized Object clone(){  try {    ElementIterator it=new ElementIterator(root);    if (elementStack != null) {      it.elementStack=new Stack<StackItem>();      for (int i=0; i < elementStack.size(); i++) {        StackItem item=elementStack.elementAt(i);        StackItem clonee=(StackItem)item.clone();        it.elementStack.push(clonee);      }    }    return it;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void showFloatingActionButton(){  if (mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",0,1);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",0,1);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(overshootInterpolator);    animSetXY.setDuration(200);    animSetXY.start();    mHidden=false;  }}  }
class C{  public void checkEmail(){  try {    log("Checking email.",Level.FINER);    Store store=connectStore();    Folder inbox=store.getFolder("INBOX");    if (inbox == null) {      throw new BotException("Failed to check email, no INBOX.");    }    inbox.open(Folder.READ_WRITE);    Message[] messages=inbox.search(new FlagTerm(new Flags(Flags.Flag.SEEN),false));    inbox.setFlags(messages,new Flags(Flags.Flag.SEEN),true);    if ((messages != null) && (messages.length > 0)) {      log("Processing emails",Level.INFO,messages.length);      Network memory=getBot().memory().newMemory();      Vertex sense=memory.createVertex(getPrimitive());      Vertex vertex=sense.getRelationship(Primitive.LASTMESSAGE);      long lastMessage=0;      if (vertex != null) {        lastMessage=((Number)vertex.getData()).longValue();      }      long maxMessage=0;      int count=0;      for (int index=0; index < messages.length; index++) {        long recievedTime=0;        if (messages[index].getReceivedDate() == null) {          log("Missing received date",Level.FINE,messages[index].getSubject());          recievedTime=messages[index].getSentDate().getTime();        } else {          recievedTime=messages[index].getReceivedDate().getTime();        }        if (recievedTime > lastMessage) {          count++;          if (count > this.maxEmails) {            log("Max email limit reached",Level.WARNING,this.maxEmails);            break;          }          input(messages[index]);          Utils.sleep(100);          if (recievedTime > maxMessage) {            maxMessage=recievedTime;          }        }      }      if (maxMessage != 0) {        sense.setRelationship(Primitive.LASTMESSAGE,memory.createVertex(maxMessage));        memory.save();      }    }    log("Done checking email.",Level.FINER);    inbox.close(false);    store.close();  } catch (  MessagingException exception) {    log(exception);  }}  }
class C{  public File resourceFile(String resourceName,String path){  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ path);}  }
class C{  public int skipWhitespace(){  try {    int readChar=20;    char c=SPACE;    while (Character.isWhitespace(c)) {      reader.mark(1);      readChar=reader.read();      c=(char)readChar;    }    reader.reset();    return readChar;  } catch (  IOException ioe) {    throw new JsonException("An IO exception occurred while reading the JSON payload",ioe);  }}  }
class C{  public boolean doesExist(){  return (c != null);}  }
class C{  public BubbleActions withTypeface(Typeface typeface){  overlay.setLabelTypeface(typeface);  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  if (width == 0 || height == 0) {    if (component != null) {      TextUI mapper=component.getUI();      try {        Rectangle r=mapper.modelToView(component,dot,dotBias);        if (r != null && r.width != 0 && r.height != 0) {          damage(r);        }      } catch (      BadLocationException ble) {      }    }  }  visible=!visible;  repaint();}  }
class C{  public boolean isOverwriteProduct(){  Object oo=get_Value(COLUMNNAME_OverwriteProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType, outputShapeType=ShapeType.POLYLINE;  int[] parts={0};  double psi=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  MinimizationCriterion minimizationCriteria=MinimizationCriterion.AREA;  if (args[1].toLowerCase().contains("peri")) {    minimizationCriteria=MinimizationCriterion.PERIMETER;  }  String outputFile=args[2];  if (args[3].toLowerCase().contains("true")) {    outputShapeType=ShapeType.POLYGON;  } else {    outputShapeType=ShapeType.POLYLINE;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    DBFField fields[]=new DBFField[4];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("SHRT_AXIS");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("LNG_AXIS");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    fields[3]=new DBFField();    fields[3].setName("ELONGATION");    fields[3].setDataType(DBFField.DBFDataType.NUMERIC);    fields[3].setFieldLength(10);    fields[3].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    MinimumBoundingRectangle mbr=new MinimumBoundingRectangle(minimizationCriteria);    int recordNum;    if (shapeType.getBaseType() == ShapeType.POLYGON || shapeType.getBaseType() == ShapeType.POLYLINE) {      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        mbr.setCoordinates(vertices);        double[][] points=mbr.getBoundingBox();        Object[] rowData=new Object[4];        rowData[0]=(double)recordNum;        rowData[1]=mbr.getShortAxisLength();        rowData[2]=mbr.getLongAxisLength();        rowData[3]=mbr.getElongationRatio();        Geometry poly;        if (outputShapeType == ShapeType.POLYLINE) {          poly=new PolyLine(parts,points);        } else {          poly=new Polygon(parts,points);        }        output.addRecord(poly,rowData);        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      ArrayList<Double> pointsX=new ArrayList<>();      ArrayList<Double> pointsY=new ArrayList<>();      oldProgress=-1;      for (      ShapeFileRecord record : input.records) {        recordNum=record.getRecordNumber();        vertices=record.getGeometry().getPoints();        int numVertices=vertices.length;        for (i=0; i < numVertices; i++) {          pointsX.add(vertices[i][0]);          pointsY.add(vertices[i][1]);        }        progress=(int)((recordNum * 100.0) / numPolys);        if (progress != oldProgress) {          updateProgress(progress);          if (cancelOp) {            cancelOperation();            return;          }        }        oldProgress=progress;      }      vertices=new double[pointsX.size()][2];      for (i=0; i < vertices.length; i++) {        vertices[i][0]=pointsX.get(i);        vertices[i][1]=pointsY.get(i);      }      mbr.setCoordinates(vertices);      double[][] points=mbr.getBoundingBox();      Object[] rowData=new Object[4];      rowData[0]=1.0d;      rowData[1]=mbr.getShortAxisLength();      rowData[2]=mbr.getLongAxisLength();      rowData[3]=mbr.getElongationRatio();      Geometry poly;      if (outputShapeType == ShapeType.POLYLINE) {        poly=new PolyLine(parts,points);      } else {        poly=new Polygon(parts,points);      }      output.addRecord(poly,rowData);    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static double calculateLogLikelihood(IntervalList intervals,DemographicFunction demographicFunction,double threshold){  double logL=0.0;  double startTime=0.0;  final int n=intervals.getIntervalCount();  for (int i=0; i < n; i++) {    final double duration=intervals.getInterval(i);    final double finishTime=startTime + duration;    final double intervalArea=demographicFunction.getIntegral(startTime,finishTime);    if (intervalArea == 0 && duration != 0) {      return Double.NEGATIVE_INFINITY;    }    final int lineageCount=intervals.getLineageCount(i);    final double kChoose2=Binomial.choose2(lineageCount);    logL+=-kChoose2 * intervalArea;    if (intervals.getIntervalType(i) == IntervalType.COALESCENT) {      final double demographicAtCoalPoint=demographicFunction.getDemographic(finishTime);      if (duration == 0.0 || demographicAtCoalPoint * (intervalArea / duration) >= threshold) {        logL-=Math.log(demographicAtCoalPoint);      } else {        return Double.NEGATIVE_INFINITY;      }    }    startTime=finishTime;  }  return logL;}  }
class C{  protected Value parseValue() throws IOException, RDFParseException {  int c=peek();  if (c == '<') {    return parseURIOrSid();  } else   if (c == ':' || TurtleUtil.isPrefixStartChar(c)) {    return parseQNameOrBoolean();  } else   if (c == '_') {    return parseNodeID();  } else   if (c == '"' || c == '\'') {    return parseQuotedLiteral();  } else   if (ASCIIUtil.isNumber(c) || c == '.' || c == '+' || c == '-') {    return parseNumber();  } else   if (c == -1) {    throwEOFException();    return null;  } else {    reportFatalError("Expected an RDF value here, found '" + (char)c + "'");    return null;  }}  }
class C{  public KMLUpdate(String namespaceURI){  super(namespaceURI);}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.add(listener);}  }
class C{  public void endTag(String name) throws IOException {  tab--;  printTag("/" + name,null,false);}  }
class C{  public boolean isMostrarCabeceras(){  return mostrarCabeceras;}  }
class C{  private void switchToPanel(int panelResId){switch (panelResId) {case R.id.info_panel:    infoPanel.setVisibility(View.VISIBLE);  playlistListView.setVisibility(View.GONE);break;case R.id.playlist:infoPanel.setVisibility(View.GONE);playlistListView.setVisibility(View.VISIBLE);break;}}  }
class C{  public void onCreate(Bundle icicle){  super.onCreate(icicle);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }}  }
class C{  protected void clearOrCreateWindow(String name){  if (mWindow == null) {    mWindow=new CursorWindow(name);  } else {    mWindow.clear();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturexml.class,args);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.581 -0400",hash_original_method="65CB23093571023AFD966C156CCF81DC",hash_generated_method="82EF4FC138409DCC182E9C80804C5C0D") private void loginImpl() throws LoginException {  if (subject == null) {    subject=new Subject();  }  if (sharedState == null) {    sharedState=new HashMap<String,Object>();  }  Throwable firstProblem=null;  int[] logged=new int[4];  int[] total=new int[4];  for (  Module module : modules) {    try {      module.create(subject,callbackHandler,sharedState);      if (module.module.login()) {        ++total[module.getFlag()];        ++logged[module.getFlag()];        if (module.getFlag() == SUFFICIENT) {          break;        }      }    } catch (    Throwable ex) {      if (firstProblem == null) {        firstProblem=ex;      }      if (module.klass == null) {        ++total[REQUIRED];        break;      }      ++total[module.getFlag()];      if (module.getFlag() == REQUISITE) {        break;      }    }  }  boolean fail=true;  if (logged[REQUIRED] != total[REQUIRED] || logged[REQUISITE] != total[REQUISITE]) {  } else {    if (total[REQUIRED] == 0 && total[REQUISITE] == 0) {      if (logged[OPTIONAL] != 0 || logged[SUFFICIENT] != 0) {        fail=false;      }    } else {      fail=false;    }  }  int commited[]=new int[4];  total[0]=total[1]=total[2]=total[3]=0;  if (!fail) {    for (    Module module : modules) {      if (module.klass != null) {        ++total[module.getFlag()];        try {          module.module.commit();          ++commited[module.getFlag()];        } catch (        Throwable ex) {          if (firstProblem == null) {            firstProblem=ex;          }        }      }    }  }  fail=true;  if (commited[REQUIRED] != total[REQUIRED] || commited[REQUISITE] != total[REQUISITE]) {  } else {    if (total[REQUIRED] == 0 && total[REQUISITE] == 0) {      if (commited[OPTIONAL] != 0 || commited[SUFFICIENT] != 0) {        fail=false;      } else {      }    } else {      fail=false;    }  }  if (fail) {    for (    Module module : modules) {      try {        module.module.abort();      } catch (      Throwable ex) {        if (firstProblem == null) {          firstProblem=ex;        }      }    }    if (firstProblem instanceof PrivilegedActionException && firstProblem.getCause() != null) {      firstProblem=firstProblem.getCause();    }    if (firstProblem instanceof LoginException) {      throw (LoginException)firstProblem;    }    throw (LoginException)new LoginException("auth.37").initCause(firstProblem);  }  loggedIn=true;}  }
class C{  private void readFully(byte[] buffer) throws IOException {  int bytesToRead=buffer.length;  int bytesSoFar=0;  while (bytesSoFar < buffer.length) {    int bytesRead=inputStream.read(buffer,bytesSoFar,bytesToRead);    if (bytesRead <= 0) {      throw new EOFException();    }    bytesSoFar+=bytesRead;    bytesToRead-=bytesRead;  }}  }
class C{  public void verifyValidity(OCSPResp response,X509Certificate subject,X509Certificate issuer) throws Exception {  verifyValidity(response,subject,issuer,new Date());}  }
class C{  public void paintChildren(Graphics g,Rectangle clip){  BufferedImage localDrawingBuffer=drawingBuffer;  if (bufferDirty) {    localDrawingBuffer=resetDrawingBuffer(localDrawingBuffer,getProjection());    drawProjectionBackground(localDrawingBuffer.getGraphics());    renderDataForProjection(getProjection(),localDrawingBuffer.getGraphics());    drawingBuffer=localDrawingBuffer;  }  if (localDrawingBuffer != null) {    g.drawImage(localDrawingBuffer,0,0,null);  }}  }
class C{  public boolean mouseDragged(MouseEvent e){  return false;}  }
class C{  public String authenticate(String username,String resource,CallbackHandler cbh) throws XMPPException {  String selectedMechanism=null;  for (  String mechanism : mechanismsPreferences) {    if (implementedMechanisms.containsKey(mechanism) && serverMechanisms.contains(mechanism)) {      selectedMechanism=mechanism;      break;    }  }  if (selectedMechanism != null) {    try {      Class<? extends SASLMechanism> mechanismClass=implementedMechanisms.get(selectedMechanism);      Constructor<? extends SASLMechanism> constructor=mechanismClass.getConstructor(SASLAuthentication.class);      currentMechanism=constructor.newInstance(this);      currentMechanism.authenticate(username,connection.getHost(),cbh);synchronized (this) {        if (!saslNegotiated && !saslFailed) {          try {            wait(30000);          } catch (          InterruptedException e) {          }        }      }      if (saslFailed) {        if (errorCondition != null) {          throw new XMPPException("SASL authentication " + selectedMechanism + " failed: "+ errorCondition);        } else {          throw new XMPPException("SASL authentication failed using mechanism " + selectedMechanism);        }      }      if (saslNegotiated) {        return bindResourceAndEstablishSession(resource);      } else {      }    } catch (    XMPPException e) {      throw e;    }catch (    Exception e) {      e.printStackTrace();    }  } else {    throw new XMPPException("SASL Authentication failed. No known authentication mechanisims.");  }  throw new XMPPException("SASL authentication failed");}  }
class C{  public Task performStartOperation(String vmId) throws IOException {  String path=String.format("%s/%s/start",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  @LargeTest public void testCameraPairwiseScenario19() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.NONE,WhiteBalance.AUTO,SceneMode.ACTION,PictureSize.LARGE,Geotagging.OFF);}  }
class C{  public float dist(PVector v){  float dx=x - v.x;  float dy=y - v.y;  float dz=z - v.z;  return (float)Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public String nextCDATA() throws JSONException {  char c;  int i;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();    if (end()) {      throw syntaxError("Unclosed CDATA");    }    sb.append(c);    i=sb.length() - 3;    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {      sb.setLength(i);      return sb.toString();    }  }}  }
class C{  @Override public void onPrepareNextItemShowInScreen(final View next){  frame_disappear(next);}  }
class C{  public void initMatchPattern(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_MATCHPATTERN);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  nextToken();  Pattern();  if (null != m_token) {    String extraTokens="";    while (null != m_token) {      extraTokens+="'" + m_token + "'";      nextToken();      if (null != m_token)       extraTokens+=", ";    }    error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.shrink();}  }
class C{  protected static void assertNotNull(final Object obj,final String message,final Object... args){  if (obj == null) {    throw new NullPointerException(String.format(message,args));  }}  }
class C{  private void convertFromNodes(Collection<ClusterNode> nodes){  Collection<String> names=new LinkedHashSet<>();  Collection<String> hosts=new LinkedHashSet<>();  Collection<UUID> nodeIds=new ArrayList<>(nodes.size());  for (  final ClusterNode node : nodes) {    try {      Collection<InetAddress> addrs=U.toInetAddresses(node);      for (      InetAddress addr : addrs) {        if (addr.getHostName() == null)         names.add(addr.getHostAddress() + ":" + 9001); else {          names.add(addr.getHostName() + ":" + 9001);          hosts.add(addr.getHostName());        }      }    } catch (    IgniteCheckedException ignored) {      names.addAll(node.addresses());    }    nodeIds.add(node.id());  }  this.nodeIds=nodeIds;  this.names=names;  this.hosts=hosts;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.THROW_STATEMENT;}  }
class C{  @SuppressWarnings("unchecked") private Comparable decrement(Object value,Number step){  return (Comparable)minus((Number)value,step);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.700 -0400",hash_original_method="0193751AAA804ED5CB76B9DFD0A89C43",hash_generated_method="4C177C435DD368C07D0A28449E0D2EEB") final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  public Entry(){}  }
class C{  @Override public boolean waitForExists(Selector obj,long timeout){  if (obj.getChildOrSibling().length == 0 && obj.checkBySelectorNull(obj) == false)   return device.wait(Until.hasObject(obj.toBySelector()),timeout);  return device.findObject(obj.toUiSelector()).waitForExists(timeout);}  }
class C{  public static void main(java.lang.String[] args){  SidesPageRangesTest pd=new SidesPageRangesTest();  PrintService defService=null;  DocFlavor flavors[]=null;  PrintService[] pservice;  defService=PrintServiceLookup.lookupDefaultPrintService();  if (defService == null) {    pservice=PrintServiceLookup.lookupPrintServices(null,null);    if (pservice.length == 0) {      throw new RuntimeException("Printer is required for this test.  TEST ABORTED");    }    defService=pservice[0];  }  System.out.println("Default Print Service " + defService);  if (defService.isAttributeCategorySupported(PageRanges.class)) {    System.out.println("\nPageRanges Attribute category is supported");  } else {    System.out.println("\nPageRanges Attribute category is not supported. terminating...");    return;  }  flavors=defService.getSupportedDocFlavors();  System.out.println("\nGetting Supported values for PageRanges for each supported DocFlavor");  System.out.println("===============================================================\n");  for (int y=0; y < flavors.length; y++) {    System.out.println("\n\n");    System.out.println("Doc Flavor: " + flavors[y]);    System.out.println("-----------------------------");    Object vals=defService.getSupportedAttributeValues(PageRanges.class,flavors[y],null);    if (vals == null) {      System.out.println("No supported values for PageRanges for this doc flavor. ");    }    PageRanges[] pr=null;    if (vals instanceof PageRanges[]) {      pr=(PageRanges[])vals;      for (int x=0; x < pr.length; x++) {        System.out.println("\nSupported Value " + pr[x]);        System.out.println("is " + pr[x] + " value supported? "+ defService.isAttributeValueSupported(pr[x],flavors[y],null));        if (!defService.isAttributeValueSupported(pr[x],flavors[y],null)) {          throw new RuntimeException("PageRanges contradicts getSupportedAttributeValues");        }      }    } else     if (vals instanceof PageRanges) {      System.out.println(vals);      System.out.println("is " + vals + " value supported? "+ defService.isAttributeValueSupported((javax.print.attribute.Attribute)vals,flavors[y],null));      if (!defService.isAttributeValueSupported((javax.print.attribute.Attribute)vals,flavors[y],null)) {        throw new RuntimeException("PageRanges contradicts getSupportedAttributeValues");      }    }    vals=defService.getSupportedAttributeValues(Sides.class,flavors[y],null);    if (vals == null) {      System.out.println("No supported values for Sides for this doc flavor. ");    }    Sides[] s=null;    if (vals instanceof Sides[]) {      s=(Sides[])vals;      for (int x=0; x < s.length; x++) {        System.out.println("\nSupported Value " + s[x]);        System.out.println("is " + s[x] + " value supported? "+ defService.isAttributeValueSupported(s[x],flavors[y],null));        if (!defService.isAttributeValueSupported(s[x],flavors[y],null)) {          throw new RuntimeException("Sides contradicts getSupportedAttributeValues");        }      }    }  }}  }
class C{  public ServiceDocument addWorkspace(Workspace workspace){  super.addElement(workspace);  return this;}  }
class C{  public static String post(String apiKey,String deviceRegistrationId,Map<String,String> params) throws IOException {  StringBuilder postBody=new StringBuilder();  postBody.append("registration_id").append("=").append(deviceRegistrationId);  Set<String> keys=params.keySet();  for (  String key : keys) {    String value=params.get(key);    postBody.append("&").append("data.").append(key).append("=").append(URLEncoder.encode(value,"UTF-8"));  }  byte[] postData=postBody.toString().getBytes("UTF-8");  URL url=new URL("https://android.googleapis.com/gcm/send");  HttpsURLConnection.setDefaultHostnameVerifier(new CustomizedHostnameVerifier());  HttpsURLConnection conn=(HttpsURLConnection)url.openConnection();  conn.setDoOutput(true);  conn.setUseCaches(false);  conn.setRequestMethod("POST");  conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");  conn.setRequestProperty("Content-Length",Integer.toString(postData.length));  conn.setRequestProperty("Authorization","key=" + apiKey);  OutputStream out=conn.getOutputStream();  out.write(postData);  out.close();  int responseCode=conn.getResponseCode();  if (responseCode == 200) {    String response=conn.getResponseMessage();    return response;  } else {    System.err.println(responseCode + ": " + conn.getResponseMessage());  }  return null;}  }
class C{  public String sqlAD_getUnsequencedTables(String vendorName,String catalogName,String schemaName){  String tableName="AD_Table";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_Client_ID");  columnNames.add("TableName");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("t.IsView = 'N'");  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Sequence","t0",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("t0.Name = t.TableName","t0.IsTableID='Y'")),null,false);  conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  protected Class resolveClassInternal(String className,boolean requireAnnotation,boolean forAnnotationUse) throws ClassNotFoundException {  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    return Class.forName(className,true,cl);  } catch (  ClassNotFoundException e) {    if (log.isDebugEnabled()) {      log.debug("Class not found for resolving from name as-is '" + className + "'");    }  }  if (forAnnotationUse) {    Class clazz=checkImports(annotationImports,requireAnnotation,className);    if (clazz != null) {      return clazz;    }  }  Class clazz=checkImports(imports,requireAnnotation,className);  if (clazz != null) {    return clazz;  }  if (!forAnnotationUse) {    for (    String name : methodInvocationRef.keySet()) {      if (JavaClassHelper.isSimpleNameFullyQualfied(className,name)) {        try {          ClassLoader cl=Thread.currentThread().getContextClassLoader();          Class found=Class.forName(name,true,cl);          if (!requireAnnotation || found.isAnnotation()) {            return found;          }        } catch (        ClassNotFoundException e1) {          if (log.isDebugEnabled()) {            log.debug("Class not found for resolving from method invocation ref:" + name);          }        }      }    }  }  throw new ClassNotFoundException("Unknown class " + className);}  }
class C{  @Override public void visitVarDef(JCVariableDecl tree){  tree.mods=translate(tree.mods);  tree.vartype=translate(tree.vartype);  if (tree.init != null) {    if ((tree.mods.flags & (Flags.PUBLIC | Flags.PROTECTED)) != 0)     tree.init=translate(tree.init); else {      String t=tree.vartype.toString();      if (t.equals("boolean"))       tree.init=new JCLiteral(TypeTags.BOOLEAN,0){      }; else       if (t.equals("byte"))       tree.init=new JCLiteral(TypeTags.BYTE,0){      }; else       if (t.equals("char"))       tree.init=new JCLiteral(TypeTags.CHAR,0){      }; else       if (t.equals("double"))       tree.init=new JCLiteral(TypeTags.DOUBLE,0.d){      }; else       if (t.equals("float"))       tree.init=new JCLiteral(TypeTags.FLOAT,0.f){      }; else       if (t.equals("int"))       tree.init=new JCLiteral(TypeTags.INT,0){      }; else       if (t.equals("long"))       tree.init=new JCLiteral(TypeTags.LONG,0){      }; else       if (t.equals("short"))       tree.init=new JCLiteral(TypeTags.SHORT,0){      }; else       tree.init=new JCLiteral(TypeTags.BOT,null){      };    }  }  result=tree;}  }
class C{  public static boolean isJsBinaryVersionSupported(int major,int minor){  return major == JS_BINARY_MAJOR_VERSION;}  }
class C{  public double[][][] computeLocalFromPreviousObservations(int states[][][],int h,int j){  int timeSteps=states.length;  if ((timeSteps == 0) || (states[0] == null)) {    return new double[timeSteps][][];  }  int agentRows=states[0].length;  if (agentRows == 0) {    return new double[timeSteps][agentRows][];  }  int agentColumns=states[0][0].length;  if (agentRows == 0) {    return new double[timeSteps][agentRows][agentColumns];  }  if (timeSteps - startObservationTime <= 0) {    return new double[timeSteps][][];  }  double[][][] localTE=new double[timeSteps][agentRows][agentColumns];  average=0;  max=0;  min=0;  int[][][] pastVal=new int[agentRows][agentColumns][destEmbeddingDelay];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      for (int d=0; d < destEmbeddingDelay; d++) {        pastVal[r][c][d]=0;        for (int p=0; p < k - 1; p++) {          pastVal[r][c][d]+=states[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay][r][c];          pastVal[r][c][d]*=base;        }      }    }  }  int[][][] sourcePastVal=new int[agentRows][agentColumns][sourceEmbeddingDelay];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      int sourceAgentRow=r - h;      if ((sourceAgentRow < 0) || (sourceAgentRow >= agentRows)) {        if (periodicBoundaryConditions) {          sourceAgentRow=(sourceAgentRow + agentRows) % agentRows;        } else {          continue;        }      }      int sourceAgentColumn=c - j;      if ((sourceAgentColumn < 0) || (sourceAgentColumn >= agentColumns)) {        if (periodicBoundaryConditions) {          sourceAgentColumn=(sourceAgentColumn + agentColumns) % agentColumns;        } else {          continue;        }      }      for (int d=0; d < sourceEmbeddingDelay; d++) {        sourcePastVal[r][c][d]=0;        for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {          sourcePastVal[r][c][d]+=states[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay][sourceAgentRow][sourceAgentColumn];          sourcePastVal[r][c][d]*=base;        }      }    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  double logTerm;  for (int t=startObservationTime; t < timeSteps; t++) {    for (int r=0; r < agentRows; r++) {      for (int c=0; c < agentColumns; c++) {        int sourceAgentRow=r - h;        if ((sourceAgentRow < 0) || (sourceAgentRow >= agentRows)) {          if (periodicBoundaryConditions) {            sourceAgentRow=(sourceAgentRow + agentRows) % agentRows;          } else {            continue;          }        }        int sourceAgentColumn=c - j;        if ((sourceAgentColumn < 0) || (sourceAgentColumn >= agentColumns)) {          if (periodicBoundaryConditions) {            sourceAgentColumn=(sourceAgentColumn + agentColumns) % agentColumns;          } else {            continue;          }        }        if (k > 0) {          pastVal[r][c][destEmbeddingPhase]+=states[t - 1][r][c];        }        sourcePastVal[r][c][sourceEmbeddingPhase]+=states[t - delay][sourceAgentRow][sourceAgentColumn];        destVal=states[t][r][c];        int thisPastVal=pastVal[r][c][destEmbeddingPhase];        int thisSourceVal=sourcePastVal[r][c][sourceEmbeddingPhase];        logTerm=((double)sourceNextPastCount[thisSourceVal][destVal][thisPastVal] / (double)sourcePastCount[thisSourceVal][thisPastVal]) / ((double)nextPastCount[destVal][thisPastVal] / (double)pastCount[thisPastVal]);        localTE[t][r][c]=Math.log(logTerm) / log_2;        average+=localTE[t][r][c];        if (localTE[t][r][c] > max) {          max=localTE[t][r][c];        } else         if (localTE[t][r][c] < min) {          min=localTE[t][r][c];        }        if (k > 0) {          pastVal[r][c][destEmbeddingPhase]-=maxShiftedValue[states[t - 1 - (k - 1) * destEmbeddingDelay][r][c]];          pastVal[r][c][destEmbeddingPhase]*=base;        }        sourcePastVal[r][c][sourceEmbeddingPhase]-=maxShiftedSourceValue[states[t - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay][sourceAgentRow][sourceAgentColumn]];        sourcePastVal[r][c][sourceEmbeddingPhase]*=base;      }    }    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }  if (periodicBoundaryConditions) {    average=average / (double)((timeSteps - startObservationTime) * agentRows * agentColumns);  } else {    average=average / (double)((timeSteps - startObservationTime) * (agentRows - Math.abs(h)) * (agentColumns - Math.abs(j)));  }  return localTE;}  }
class C{  private Query updateQuery(Operation op,Query tq){  Query rq=null;  AuthorizationContext ctx=op.getAuthorizationContext();  if (!this.getHost().isAuthorizationEnabled()) {    return tq;  }  if (ctx == null) {    return null;  }  if (ctx.isSystemUser()) {    return tq;  }  if (ctx.getResourceQuery(Action.GET) == null) {    rq=new MatchNoDocsQuery();  } else {    rq=LuceneQueryConverter.convertToLuceneQuery(ctx.getResourceQuery(Action.GET));  }  BooleanQuery.Builder builder=new BooleanQuery.Builder().add(rq,Occur.FILTER).add(tq,Occur.FILTER);  return builder.build();}  }
class C{  @Override public int readNonBlock(byte[] buffer,int offset,int length) throws IOException {  int sublen=getDelegate().readTimeout(buffer,offset,length,0);  if (sublen > 0) {    logStream().write(buffer,offset,sublen);  }  return sublen;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_DECLARATION_OR_BINDING;}  }
class C{  @Override public void disconnect(){  LOG.trace("enter HttpURLConnection.disconnect()");  throw new RuntimeException("Not implemented yet");}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  if (gc.getStroke() instanceof BasicStroke)   return toSVG((BasicStroke)gc.getStroke()); else   return null;}  }
class C{  public static final byte[] inflateBestEffort(byte[] in){  return inflateBestEffort(in,Integer.MAX_VALUE);}  }
class C{  public PI addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean existsFdrsInArch(String entidad) throws Exception {  boolean exists=false;  if (_logger.isDebugEnabled())   _logger.debug("existsFdrsInArch");  DbConnection dbConn=new DbConnection();  try {    if (_id == Defs.NULL_ID)     AdminException.throwException(ArchiveErrorCodes.EC_ARCH_NO_ID);    dbConn.open(DBSessionManager.getSession(entidad));    _tblPrefix="A" + Integer.toString(_id);    exists=existsFdrs(entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return exists;}  }
class C{  protected Object execute() throws IOException {  init();  if (!getSelectedRemote()) {    return null;  }  Codenvy codenvy=getMultiRemoteCodenvy().getCodenvy(remoteName);  if (codenvy == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a(format("Please login into the remote %s",remoteName));    buffer.reset();    System.out.println(buffer.toString());    return null;  }  codenvy.factory().update(factoryID,getContentFile(new File(jsonFilePath))).execute();  System.out.println(String.format("The factory with ID %s has been successfully updated",factoryID));  return null;}  }
class C{  @Override public final long encodeNormValue(float f){  return SmallFloat.floatToByte315(f);}  }
class C{  public final void test_insertProviderAtLjava_security_ProviderLI(){  try {    Security.insertProviderAt(null,1);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  Provider p=new MyProvider();  int initNum=Security.getProviders().length;  Provider initialSecondProviderName=Security.getProviders()[1];  try {    assertEquals(initNum + 1,Security.insertProviderAt(p,-1));    assertSame(p,Security.getProviders()[initNum]);    assertEquals(-1,Security.insertProviderAt(p,1));    Security.removeProvider(p.getName());    assertEquals(initNum + 1,Security.insertProviderAt(p,initNum + 100));    assertSame(p,Security.getProviders()[initNum]);    Security.removeProvider(p.getName());    assertEquals(1,Security.insertProviderAt(p,1));    assertSame(p,Security.getProviders()[0]);    assertSame(initialSecondProviderName,Security.getProviders()[2]);  }  finally {    Security.removeProvider(p.getName());  }}  }
class C{  public Defns(int initialSize){  this.defnIdx=initialSize;  this.table=new Object[defnIdx + 32];}  }
class C{  public SWTPaintCanvas(final Composite parent,final int style,final Color color){  this(parent,style);  this.setColor(color);}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public static byte[] convertCRLToDER(String pemCRL){  String base64=pemCRL.replace(CRL_BEGIN,"");  base64=base64.replace(CRL_END,"");  base64=base64.replaceAll("\\s","");  return Base64.decodeBase64(base64);}  }
class C{  public DefaultValueDataset(double value){  this(new Double(value));}  }
class C{  @VisibleForTesting NativePooledByteBuffer newByteBuf(InputStream inputStream,NativePooledByteBufferOutputStream outputStream) throws IOException {  mPooledByteStreams.copy(inputStream,outputStream);  return outputStream.toByteBuffer();}  }
class C{  public static Number plus(Character left,Number right){  return NumberNumberPlus.plus(Integer.valueOf(left),right);}  }
class C{  public static int indexOf(long[] array,long[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public boolean isAll(){  return all;}  }
class C{  public Dimension2D(){}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof TimePeriodAnchor)) {    return false;  }  TimePeriodAnchor position=(TimePeriodAnchor)obj;  if (!this.name.equals(position.name)) {    return false;  }  return true;}  }
class C{  public static <T>void reverse(T[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    T tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  @Override public void onClick(final View view){  final String uuidValue=mUuidView.getText().toString();  try {    if (TextUtils.isEmpty(uuidValue) || uuidValue.length() != 36)     throw new Exception();    final UUID uuid=UUID.fromString(uuidValue);    final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());    final SharedPreferences.Editor editor=preferences.edit();    editor.putString(PREF_PREVIOUS_UUID,uuid.toString());    editor.apply();    final UpdateFragment parentFragment=(UpdateFragment)getParentFragment();    parentFragment.writeNewUuid(uuid);    dismiss();  } catch (  final Exception e) {    mUuidView.setError(getText(R.string.update_dialog_uuid_error));    mUuidView.requestFocus();  }}  }
class C{  public static List<String> readLines(URL self) throws IOException {  return IOGroovyMethods.readLines(newReader(self));}  }
class C{  @SuppressWarnings("unchecked") public static <T>Property<T> property(Class<?> mixinClass,String fieldName){  try {    Field field=mixinClass.getField(fieldName);    if (!Property.class.isAssignableFrom(field.getType())) {      throw new IllegalArgumentException("Field must be of type Property<?>");    }    return (Property<T>)Proxy.newProxyInstance(mixinClass.getClassLoader(),array(field.getType()),new PropertyReferenceHandler<>(new PropertyFunction<T>(null,null,null,null,field)));  } catch (  NoSuchFieldException e) {    throw new IllegalArgumentException("No such field '" + fieldName + "' in mixin "+ mixinClass.getName());  }}  }
class C{  private boolean overflow(int digit){  return (digit == 0);}  }
class C{  public void emit(int val){  numEntries+=1;  breaks();  emitUC(val >> 16);  emitUC(val & 0xFFFF);}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  private void removeModuleListeners(final INaviModule module){  if (module.isLoaded()) {    for (    final INaviView view : module.getContent().getViewContainer().getViews()) {      for (      final IViewContainerListener listener : m_listeners) {        try {          listener.deletedView(CProjectContainer.this,view);        } catch (        final Exception exception) {          CUtilityFunctions.logException(exception);        }      }    }  }  module.removeListener(m_moduleListener);}  }
class C{  public MariaDbFunctionStatement clone() throws CloneNotSupportedException {  MariaDbFunctionStatement clone=(MariaDbFunctionStatement)super.clone();  clone.outputResultSet=null;  return clone;}  }
class C{  public Acsc(){  super("acsc",1);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public RecordSet(Connection inConnection,String query) throws SQLException {  connection=inConnection;  queryString=query;  getAllQuery();}  }
class C{  @FXML public void initialize() throws Exception {  stepsMapManager=new ControllerMap<>(stepBox.getChildren());  sourceMapManager=new ControllerMap<>(sourcesBox.getChildren());  pipeline.getSources().forEach(null);  pipeline.getSteps().forEach(null);  stepBox.setOnDragOver(null);  stepBox.setOnDragDropped(null);  addSourceBox.getChildren().add(addSourceButton);}  }
class C{  public boolean isGlobalProgrammerAvailable(){  return true;}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public List<Relationship> orderedRelationshipsByConsciousness(Primitive primitive){  return orderedRelationships(this.network.createVertex(primitive));}  }
class C{  private static boolean alertIfMonkey(Context context,int stringId){  if (ActivityManager.isUserAMonkey()) {    AlertDialog.Builder builder=new AlertDialog.Builder(context);    builder.setMessage(stringId);    builder.setPositiveButton(R.string.monkey_ok,null);    builder.show();    return true;  } else {    return false;  }}  }
class C{  public void replace(StackablePath... paths){  check();  history.kill();  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,paths));}  }
class C{  public boolean writeReference(Object obj,XMLFormat.OutputElement xml) throws XMLStreamException {  Index id=(Index)_objectToId.get(obj);  if (id == null) {    id=Index.of(_counter++);    _objectToId.put(obj,id);    _tmp.clear().append(id.intValue());    if (_idURI == null) {      xml.getStreamWriter().writeAttribute(_idName,_tmp);    } else {      xml.getStreamWriter().writeAttribute(_idURI,_idName,_tmp);    }    return false;  }  _tmp.clear().append(id.intValue());  if (_refURI == null) {    xml._writer.writeAttribute(_refName,_tmp);  } else {    xml._writer.writeAttribute(_refURI,_refName,_tmp);  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double[] copyOfRange(double[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      double[] copy=new double[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  NetworkSystemList response=client.get(NetworkSystemList.class,baseUrl);  return ResourceUtils.defaultList(response.getSystems());}  }
class C{  private void createNewCell(short index,String valor,HSSFCellStyle style){  HSSFCell cell=this.currentRow.createCell(index);  cell.setCellStyle(style);  cell.setCellValue(valor);}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (listenerList == null) {    listenerList=new Vector<PropertyChangeListener>();  }  listenerList.add(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean beforeDelete(){  return false;}  }
class C{  public File resolve(ArtifactFactory artifactFactory,ArtifactResolver artifactResolver,ArtifactRepository localRepository,List<ArtifactRepository> repositories) throws ArtifactResolutionException, ArtifactNotFoundException {  Artifact artifact=artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);  artifactResolver.resolve(artifact,repositories,localRepository);  return artifact.getFile();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.229 -0400",hash_original_method="F0BA6BD7A97A3BE1D734FEB4A734FBAE",hash_generated_method="21C0C1C9E5DDB851177A346608BA8979") public static void copy(byte[] input,OutputStream output) throws IOException {  output.write(input);}  }
class C{  public SearchResult(String name,String className,Object obj,Attributes attrs,boolean isRelative){  super(name,className,obj,isRelative);  this.attrs=attrs;}  }
class C{  public static int optimalImageWidth(int screenWidth){  int preOptimalWidth=screenWidth / 2;  if (preOptimalWidth >= 720) {    return 720;  } else   if (preOptimalWidth >= 540) {    return 540;  } else   if (preOptimalWidth >= 360) {    return 360;  } else {    return 360;  }}  }
class C{  private void prepareTechnicalProduct(TechnicalProduct tProd) throws NonUniqueBusinessKeyException {  ParameterDefinition pd=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"intParam",ParameterType.SERVICE_PARAMETER,tProd,mgr,null,null,true);  ParameterOption option=new ParameterOption();  option.setOptionId("OPT");  option.setParameterDefinition(pd);  List<ParameterOption> list=new ArrayList<ParameterOption>();  list.add(option);  pd.setOptionList(list);  mgr.persist(option);  Event event=TechnicalProducts.addEvent("eventId",EventType.SERVICE_EVENT,tProd,mgr);  mgr.persist(event);  LocalizedResource lr=new LocalizedResource();  lr.setLocale("en");  lr.setObjectKey(event.getKey());  lr.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr.setValue("en_event");  mgr.persist(lr);  LocalizedResource lr2=new LocalizedResource();  lr2.setLocale("de");  lr2.setObjectKey(event.getKey());  lr2.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr2.setValue("de_event");  mgr.persist(lr2);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerValue derValue=new DerValue(nameValue);  out.putDerValue(derValue);}  }
class C{  private void calculateAmrAndAcrClaims(final OAuth2AccessTokenEntity accessToken,final JWTClaimsSet.Builder idClaims){  final OAuth2Authentication authN=accessToken.getAuthenticationHolder().getAuthentication();  final Collection<GrantedAuthority> authorities=authN.getAuthorities();  for (  final GrantedAuthority authority : authorities) {    log.debug("Evaluating authority {} of the authentication",authority);    final AuthenticationClassRefAuthority acr=AuthenticationClassRefAuthority.getAuthenticationClassRefAuthority(authority);    if (acr != null) {      idClaims.claim(OIDCConstants.ACR,acr.getAuthority());      log.debug("Added {} claim as",OIDCConstants.ACR,acr.getAuthority());    }    final AuthenticationMethodRefAuthority amr=AuthenticationMethodRefAuthority.getAuthenticationClassRefAuthority(authority);    if (amr != null) {      idClaims.claim(OIDCConstants.AMR,amr.getAuthority());      log.debug("Added {} claim as",OIDCConstants.AMR,amr.getAuthority());    }  }}  }
class C{  @Override public boolean isClosed(){  return rows == null && source == null;}  }
class C{  public synchronized boolean shouldStop(){  return fStop;}  }
class C{  protected JavaType findSerializationType(Annotated a,boolean useStaticTyping,JavaType declaredType){  Class<?> serClass=_annotationIntrospector.findSerializationType(a);  if (serClass != null) {    Class<?> rawDeclared=declaredType.getRawClass();    if (serClass.isAssignableFrom(rawDeclared)) {      declaredType=declaredType.widenBy(serClass);    } else {      if (!rawDeclared.isAssignableFrom(serClass)) {        throw new IllegalArgumentException("Illegal concrete-type annotation for method '" + a.getName() + "': class "+ serClass.getName()+ " not a super-type of (declared) class "+ rawDeclared.getName());      }      declaredType=_config.constructSpecializedType(declaredType,serClass);    }    useStaticTyping=true;  }  JavaType secondary=BeanSerializerFactory.modifySecondaryTypesByAnnotation(_config,a,declaredType);  if (secondary != declaredType) {    useStaticTyping=true;    declaredType=secondary;  }  if (!useStaticTyping) {    JsonSerialize.Typing typing=_annotationIntrospector.findSerializationTyping(a);    if (typing != null) {      useStaticTyping=(typing == JsonSerialize.Typing.STATIC);    }  }  return useStaticTyping ? declaredType : null;}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,double splitRatio,int samplingType,boolean useLocalRandomSeed,int seed,boolean autoSwitchToShuffled) throws UserError {  this(exampleSet,new double[]{splitRatio,1 - splitRatio},samplingType,useLocalRandomSeed,seed,autoSwitchToShuffled);}  }
class C{  public FilterEditorException(final String message){  super(message);}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof GraphChange))   return false;  GraphChange otherGC=(GraphChange)other;  if (!otherGC.removes.equals(this.removes) || !otherGC.colliders.equals(this.colliders) || !otherGC.nonColliders.equals(this.nonColliders)|| !otherGC.orients.equals(this.orients))   return false;  return true;}  }
class C{  public void showTip(long delay){  if (this.tipContent != null) {    this.tipContent.setVisibility(View.VISIBLE);    removeAnimationCallback();    mShowCallback=new ShowCallback();    mHandler.postDelayed(mShowCallback,delay);    mDismissCallback=new DismissCallback();    mHandler.postDelayed(mDismissCallback,delay + TIP_STAY_DURATION_NORMAL + TIP_SHOW_DURATION);  }}  }
class C{  public void updateConsistencyRPEnabled(String cgName,String clusterName,boolean isRPEnabled) throws VPlexApiException {  s_logger.info("Request to update consistency group RP enabled on  VPlex at {}",_baseURI);  List<VPlexClusterInfo> clusterInfoList=_discoveryMgr.getClusterInfoLite();  Iterator<VPlexClusterInfo> clusterInfoIter=clusterInfoList.iterator();  while (clusterInfoIter.hasNext()) {    VPlexClusterInfo clusterInfo=clusterInfoIter.next();    if (!clusterInfo.getName().equals(clusterName)) {      clusterInfoIter.remove();    }  }  _cgMgr.setConsistencyGroupRPEnabled(cgName,clusterInfoList,isRPEnabled);}  }
class C{  public static String randomString(int length){  if (length < 1) {    return null;  }  char[] randBuffer=new char[length];  for (int i=0; i < randBuffer.length; i++) {    randBuffer[i]=numbersAndLetters[new Random().nextInt(71)];  }  return new String(randBuffer);}  }
class C{  private boolean matches(T value,T against){  return Matchers.greaterThan(against.doubleValue()).matches(value.doubleValue());}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_bt:{      this.startActivity(new Intent(this,MActivity.class));      break;    }}}  }
class C{  public static Map<String,Object> configureMongo(Boolean caseSensitive,String collection,String valueField){  Map<String,Object> config=new HashMap<>();  config.put(MongoGazetteer.CONFIG_CASE_SENSITIVE,caseSensitive == null ? MongoGazetteer.DEFAULT_CASE_SENSITIVE : caseSensitive);  config.put(MongoGazetteer.CONFIG_COLLECTION,Strings.isNullOrEmpty(collection) ? MongoGazetteer.DEFAULT_COLLECTION : collection);  config.put(MongoGazetteer.CONFIG_VALUE_FIELD,Strings.isNullOrEmpty(valueField) ? MongoGazetteer.DEFAULT_VALUE_FIELD : valueField);  return config;}  }
class C{  public ExcelGenerationException(final Throwable cause){  super(ExcelHssfView.class,Messages.getString("ExcelView.errorexporting"),cause);}  }
class C{  public boolean isSubjectDisabled(){  return subjectDisabled;}  }
class C{  public static double[] random(int m){  double[] array=new double[m];  for (int i=0; i < m; i++) {    array[i]=Random.raw();  }  return array;}  }
class C{  final boolean isTransient(){  return Modifier.isTransient(getModifiers());}  }
class C{  public final MutableDouble2D addIn(final double x,final double y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  private static <A extends Annotation>boolean shouldSkipCollection(Class<?> resourceClass,Class<A> annotationClass,RequestScope requestScope){  try {    requestScope.getPermissionExecutor().checkUserPermissions(resourceClass,annotationClass);  } catch (  ForbiddenAccessException e) {    return true;  }  return false;}  }
class C{  public void testReadVarint() throws Exception {  assertReadVarint(bytes(0x00),0);  assertReadVarint(bytes(0x01),1);  assertReadVarint(bytes(0x7f),127);  assertReadVarint(bytes(0xa2,0x74),(0x22 << 0) | (0x74 << 7));  assertReadVarint(bytes(0xbe,0xf7,0x92,0x84,0x0b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x0bL << 28));  assertReadVarint(bytes(0xbe,0xf7,0x92,0x84,0x1b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x1bL << 28));  assertReadVarint(bytes(0x80,0xe6,0xeb,0x9c,0xc3,0xc9,0xa4,0x49),(0x00 << 0) | (0x66 << 7) | (0x6b << 14)| (0x1c << 21)| (0x43L << 28)| (0x49L << 35)| (0x24L << 42)| (0x49L << 49));  assertReadVarint(bytes(0x9b,0xa8,0xf9,0xc2,0xbb,0xd6,0x80,0x85,0xa6,0x01),(0x1b << 0) | (0x28 << 7) | (0x79 << 14)| (0x42 << 21)| (0x3bL << 28)| (0x56L << 35)| (0x00L << 42)| (0x05L << 49)| (0x26L << 56)| (0x01L << 63));  assertReadVarintFailure(InvalidProtocolBufferException.malformedVarint(),bytes(0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00));  assertReadVarintFailure(InvalidProtocolBufferException.truncatedMessage(),bytes(0x80));}  }
class C{  public static void logDebug(String message){  ILog log=getDefault().getLog();  IStatus status=new Status(IStatus.INFO,PLUGIN_ID,0,message,null);  log.log(status);}  }
class C{  private void applyRotation(int position,float start,float end){  final float centerX=mContainer.getWidth() / 2.0f;  final float centerY=mContainer.getHeight() / 2.0f;  final Rotate3dAnimation rotation=new Rotate3dAnimation(start,end,centerX,centerY,310.0f,true);  rotation.setDuration(500);  rotation.setFillAfter(true);  rotation.setInterpolator(new AccelerateInterpolator());  rotation.setAnimationListener(new DisplayNextView(position));  mContainer.startAnimation(rotation);}  }
class C{  protected void reportErrors(SerializedParameterization config){  StringBuilder buf=new StringBuilder();  buf.append("Task is not completely configured:" + NEWLINE + NEWLINE);  for (  ParameterException e : config.getErrors()) {    if (e instanceof UnspecifiedParameterException) {      buf.append("The parameter ");      buf.append(((UnspecifiedParameterException)e).getParameterName());      buf.append(" is required.").append(NEWLINE);    } else {      buf.append(e.getMessage() + NEWLINE);    }  }  LOG.warning(buf.toString());  config.clearErrors();}  }
class C{  private boolean isValidLicense(String licenseStatus,StorageSystem system) throws IsilonException, JSONException {  Set<String> validLicenseStatus=new HashSet<String>();  validLicenseStatus.add(LICENSE_ACTIVATED);  validLicenseStatus.add(LICENSE_EVALUATION);  if (validLicenseStatus.contains(licenseStatus)) {    return true;  }  return false;}  }
class C{  @Override public void zoomRange(double lowerPercent,double upperPercent){  double startLog=switchedLog10(getRange().getLowerBound());  double lengthLog=switchedLog10(getRange().getUpperBound()) - startLog;  Range adjusted;  if (isInverted()) {    adjusted=new Range(switchedPow10(startLog + (lengthLog * (1 - upperPercent))),switchedPow10(startLog + (lengthLog * (1 - lowerPercent))));  } else {    adjusted=new Range(switchedPow10(startLog + (lengthLog * lowerPercent)),switchedPow10(startLog + (lengthLog * upperPercent)));  }  setRange(adjusted);}  }
class C{  public void reset(){  cur.reset();  line.reset();  inuse=true;  word.setLength(0);}  }
class C{  public void newDomain(){  JFileChooser fileChooser=new JFileChooser(System.getProperty("user.dir"));  fileChooser.setDialogTitle("Save the new domain in file ...");  fileChooser.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {    File fileToSave=fileChooser.getSelectedFile();    if (fileToSave.exists()) {      int result=JOptionPane.showConfirmDialog(frame,"The file exists, overwrite?","Existing file",JOptionPane.YES_NO_CANCEL_OPTION);      if (result == JOptionPane.NO_OPTION || result == JOptionPane.CLOSED_OPTION || result == JOptionPane.CANCEL_OPTION) {        return;      }    }    newDomain(fileToSave);  }}  }
class C{  public AgentWorkgroups(String agentJID,List<String> workgroups){  this.agentJID=agentJID;  this.workgroups=workgroups;}  }
class C{  private boolean authNProviderExistsForDomain(String domain){  URIQueryResultList providers=new URIQueryResultList();  try {    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAuthnProviderDomainConstraint(domain),providers);  } catch (  DatabaseException ex) {    _log.error("Could not query for authn providers to check for existing domain {}",domain,ex.getStackTrace());    throw ex;  }  boolean bExist=false;  Iterator<URI> it=providers.iterator();  while (it.hasNext()) {    URI providerURI=it.next();    AuthnProvider provider=_dbClient.queryObject(AuthnProvider.class,providerURI);    if (provider != null && provider.getDisable() == false) {      bExist=true;      break;    }  }  return bExist;}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public mat4 translate(vec3 v){  float[] m=this.m;  m[12]+=m[0] * v.x() + m[4] * v.y() + m[8] * v.z();  m[13]+=m[1] * v.x() + m[5] * v.y() + m[9] * v.z();  m[14]+=m[2] * v.x() + m[6] * v.y() + m[10] * v.z();  m[15]+=m[3] * v.x() + m[7] * v.y() + m[11] * v.z();  return this;}  }
class C{  protected static void test_StartWebViewDialogActivity_LoadsUrlAndShowsTitle(String url,String title){  final WebViewDialogActivity activity=Robolectric.buildActivity(WebViewDialogActivity.class).withIntent(WebViewDialogActivity.newIntent(RuntimeEnvironment.application,url,title)).setup().get();  final View dialogView=Shadows.shadowOf(activity).getContentView();  assertNotNull(dialogView);  final WebView webView=(WebView)dialogView.findViewById(R.id.eula_webView);  assertNotNull(webView);  final ShadowWebView shadowWebView=Shadows.shadowOf(webView);  assertEquals(shadowWebView.getLastLoadedUrl(),url);  final TextView titleView=(TextView)dialogView.findViewById(R.id.tv_dialog_title);  assertNotNull(titleView);  if (TextUtils.isEmpty(title)) {    Assertions.assertThat(titleView).isNotVisible();  } else {    Assertions.assertThat(titleView).isVisible();    Assertions.assertThat(titleView).hasText(title);  }  dialogView.findViewById(R.id.positiveButton).performClick();  assertTrue(activity.isFinishing());}  }
class C{  public SitesEntry(){  super();  this.getCategories().add(CATEGORY);}  }
class C{  public static long random(long min,long max){  long next=RANDOM.nextLong();  if ((next >= min) && (next <= max))   return next;  next+=Long.MIN_VALUE;  if ((next >= min) && (next <= max))   return next;  final long interval=1L + max - min;  if (interval <= 0)   throw new Error("Interval error");  return MathLib.abs(next % interval) + min;}  }
class C{  private void destroyRegion(){  try {    assertTrue("Cache is found as null ",cache != null);    Region rgn=cache.getRegion(regionName);    rgn.localDestroyRegion();    cache.close();  } catch (  Exception ex) {  }}  }
class C{  public File showOpenDialog(){  if (useNativeFileChooser) {    return showOpenDialogNative();  } else {    return showOpenDialogSwing();  }}  }
class C{  public static List<Integer> createColors(Resources r,int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(r.getColor(i));  }  return result;}  }
class C{  @Override public void postPutAll(DistributedPutAllOperation putallOp,VersionedObjectList successfulPuts,LocalRegion region){  if (putallOp.putAllData.length == 0) {    return;  }  if (region instanceof DistributedRegion) {    super.postPutAll(putallOp,successfulPuts,region);  } else {    region.getCancelCriterion().checkCancelInProgress(null);    if (logger.isDebugEnabled()) {      logger.debug("DistTXStateProxyImplOnCoordinator.postPutAll " + "processing putAll op for region {}, size of putAllOp " + "is {}",region,putallOp.putAllData.length);    }    HashMap<Integer,DistributedPutAllOperation> bucketToPutallMap=new HashMap<Integer,DistributedPutAllOperation>();    HashMap<Integer,DistTXCoordinatorInterface> bucketToTxStateStubMap=new HashMap<Integer,DistTXCoordinatorInterface>();    for (int i=0; i < putallOp.putAllData.length; i++) {      assert (putallOp.putAllData[i] != null);      Object key=putallOp.putAllData[i].key;      int bucketId=putallOp.putAllData[i].getBucketId();      DistributedPutAllOperation putAllForBucket=bucketToPutallMap.get(bucketId);      ;      if (putAllForBucket == null) {        EntryEventImpl event=EntryEventImpl.createPutAllEvent(null,region,Operation.PUTALL_CREATE,key,putallOp.putAllData[i].getValue());        event.setEventId(putallOp.putAllData[i].getEventID());        putAllForBucket=new DistributedPutAllOperation(event,putallOp.putAllDataSize,putallOp.isBridgeOp);        bucketToPutallMap.put(bucketId,putAllForBucket);      }      putallOp.putAllData[i].setFakeEventID();      putAllForBucket.addEntry(putallOp.putAllData[i]);      KeyInfo ki=new KeyInfo(key,null,null);      DistTXCoordinatorInterface tsi=(DistTXCoordinatorInterface)getRealDeal(ki,region);      bucketToTxStateStubMap.put(bucketId,tsi);    }    for (    Entry<Integer,DistTXCoordinatorInterface> e : bucketToTxStateStubMap.entrySet()) {      Integer bucketId=e.getKey();      DistTXCoordinatorInterface dtsi=e.getValue();      DistributedPutAllOperation putAllForBucket=bucketToPutallMap.get(bucketId);      if (logger.isDebugEnabled()) {        logger.debug("DistTXStateProxyImplOnCoordinator.postPutAll processing" + " putAll for ##bucketId = {}, ##txStateStub = {}, " + "##putAllOp = {}",bucketId,dtsi,putAllForBucket);      }      dtsi.postPutAll(putAllForBucket,successfulPuts,region);    }  }}  }
class C{  public ListenerList(){  this(EQUALITY);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND:  return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  private void stubWarnIfNotFound(String warning){  if (warnings.add(warning) && (warnIfNotFound || debugStubParser)) {    processingEnv.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING,"StubParser: " + warning);  }}  }
class C{  void validatePersistentMatchBetweenDataStores(PartitionRegionConfig prconf){  final boolean isPersistent=pr.getAttributes().getDataPolicy() == DataPolicy.PERSISTENT_PARTITION;  if (pr.getLocalMaxMemory() == 0 || prconf == null) {    return;  }  Set<Node> nodes=prconf.getNodes();  Iterator itor=nodes.iterator();  while (itor.hasNext()) {    Node n=(Node)itor.next();    if (n.getPRType() != Node.ACCESSOR_DATASTORE) {      continue;    } else {      if (n.isPersistent() != (pr.getAttributes().getDataPolicy() == DataPolicy.PERSISTENT_PARTITION)) {        throw new IllegalStateException("DataPolicy for Datastore members should all be persistent or not.");      }    }  }}  }
class C{  public static int hash(int aSeed,char aChar){  return firstTerm(aSeed) + (int)aChar;}  }
class C{  @Deprecated public SelfStartingMonitoringView(MonitorableRegistry registry,MonitoringView monitoringView,final long quietPeriodInMillis){  dynamicMonitoringView=new DynamicMonitoringView(registry,monitoringView,quietPeriodInMillis);}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void addJarResource(String jarName) throws MalformedURLException, IOException {  URL url=findResource(jarName);  if (url == null) {    throw new IOException("Resource not found: " + jarName);  }  if (url.getProtocol().startsWith("jap")) {    addURL(new URL(url + "!/"));  } else {    addURL(new URL("jap:" + url + "!/"));  }}  }
class C{  public final int read(char[] buf,int offset,int length) throws IOException {  if (_readEncoding != null) {    return _readEncoding.read(buf,offset,length);  }  byte[] readBuffer=_readBuffer;  if (readBuffer == null)   return -1;  int readOffset=_readOffset;  int readLength=_readLength;  int sublen=Math.min(length,readLength - readOffset);  if (readLength <= readOffset) {    if (!readBuffer()) {      return -1;    }    readLength=_readLength;    readOffset=_readOffset;    sublen=Math.min(length,readLength - readOffset);  }  for (int i=sublen - 1; i >= 0; i--) {    buf[offset + i]=(char)(readBuffer[readOffset + i] & 0xff);  }  _readOffset=readOffset + sublen;  return sublen;}  }
class C{  protected void prepareConfiguration() throws IOException {  Configuration secondaryConf=HadoopSecondaryFileSystemConfigurationTest.configuration(IGFS_SCHEME,SECONDARY_AUTHORITY,true,true);  secondaryConf.setInt("fs.igfs.block.size",1024);  secondaryConfFullPath=HadoopSecondaryFileSystemConfigurationTest.writeConfiguration(secondaryConf,HadoopSecondaryFileSystemConfigurationTest.SECONDARY_CFG_PATH);  secondaryUri=HadoopSecondaryFileSystemConfigurationTest.mkUri(IGFS_SCHEME,SECONDARY_AUTHORITY);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.EQUATION_REF__REF:    setRef((EquationDefinition)null);  return;}super.eUnset(featureID);}  }
class C{  public void mark(int readlimit){  stream.mark(readlimit);  if (markSupported()) {    markpos=framePos;    markPushBackLen=pushBackLen;    if (markPushBackLen > 0) {      if (markPushBackBuffer == null) {        markPushBackBuffer=new byte[frameSize];      }      System.arraycopy(pushBackBuffer,0,markPushBackBuffer,0,markPushBackLen);    }  }}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public GlassFish4xStandaloneLocalConfiguration(String home){  super(home);}  }
class C{  public static Stats of(Iterable<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public static long nanosFromDate(long ms){  Calendar cal=getCalendar();  cal.setTimeInMillis(ms);  return nanosFromCalendar(cal);}  }
class C{  public Bits orSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo(xs.bits.length);  for (int i=0; i < xs.bits.length; i++) {    bits[i]=bits[i] | xs.bits[i];  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  public WalletAppKit connectToLocalHost(){  try {    final InetAddress localHost=InetAddress.getLocalHost();    return setPeerNodes(new PeerAddress(params,localHost,params.getPort()));  } catch (  UnknownHostException e) {    throw new RuntimeException(e);  }}  }
class C{  private CacheXmlGenerator(Cache cache,boolean useSchema,String version,boolean includeKeysValues){  this(cache,useSchema,version,includeKeysValues,true);}  }
class C{  public final ArrayDeque<EventBean> expireEvents(long expireBefore){  if (window.isEmpty()) {    return null;  }  TimeWindowPair pair=window.getFirst();  if (pair.getTimestamp() >= expireBefore) {    return null;  }  ArrayDeque<EventBean> resultBeans=new ArrayDeque<EventBean>();  do {    if (pair.getEventHolder() != null) {      if (pair.getEventHolder() instanceof EventBean) {        resultBeans.add((EventBean)pair.getEventHolder());      } else {        resultBeans.addAll((List<EventBean>)pair.getEventHolder());      }    }    window.removeFirst();    if (window.isEmpty()) {      break;    }    pair=window.getFirst();  } while (pair.getTimestamp() < expireBefore);  if (reverseIndex != null) {    for (    EventBean expired : resultBeans) {      reverseIndex.remove(expired);    }  }  size-=resultBeans.size();  return resultBeans;}  }
class C{  public String toString(){  StringBuffer retStr=new StringBuffer();  if (isAddressLinesReverse()) {    retStr.append(", ").append(parseCRP(getCountry()));    if (getAddress4() != null && getAddress4().length() > 0)     retStr.append(", ").append(getAddress4());    if (getAddress3() != null && getAddress3().length() > 0)     retStr.append(", ").append(getAddress3());    if (getAddress2() != null && getAddress2().length() > 0)     retStr.append(", ").append(getAddress2());    if (getAddress1() != null)     retStr.append(getAddress1());  } else {    if (getAddress1() != null)     retStr.append(getAddress1());    if (getAddress2() != null && getAddress2().length() > 0)     retStr.append(", ").append(getAddress2());    if (getAddress3() != null && getAddress3().length() > 0)     retStr.append(", ").append(getAddress3());    if (getAddress4() != null && getAddress4().length() > 0)     retStr.append(", ").append(getAddress4());    retStr.append(", ").append(parseCRP(getCountry()));  }  return retStr.toString();}  }
class C{  public static JsonValue value(String string){  return string == null ? NULL : new JsonString(string);}  }
class C{  private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(0,delta);    } else {      scrollBy(0,delta);    }  }}  }
class C{  public void put(Type producedType,TypeDeclaration dec,Type superType){  Map<TypeDeclaration,Type> cache=superTypes.get(producedType);  if (cache == null) {    cache=new ConcurrentHashMap<TypeDeclaration,Type>();    superTypes.put(producedType,cache);  }  cache.put(dec,superType);}  }
class C{  public static GcSession initWithClientSessionId(String clientSessionId,String customerId,Region region,EnvironmentType environment,String appIdentifier){  if (clientSessionId == null) {    throw new InvalidParameterException("Error creating GcSession, clientSessionId may not be null");  }  if (customerId == null) {    throw new InvalidParameterException("Error creating GcSession, customerId may not be null");  }  if (region == null) {    throw new InvalidParameterException("Error creating GcSession, region may not be null");  }  if (environment == null) {    throw new InvalidParameterException("Error creating GcSession, environment may not be null");  }  if (appIdentifier == null) {    throw new InvalidParameterException("Error creating GcSession, appIdentifier may not be null");  }  return initSession(clientSessionId,customerId,region,environment,appIdentifier,null);}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.dateTime().print(this);}  }
class C{  public static double normalizeRadians(double r){  if (r < 0 && r >= -TWO_PI)   return r + TWO_PI;  if (r >= TWO_PI && r < FOUR_PI)   return r - TWO_PI;  if (r >= 0 && r < TWO_PI)   return r;  r-=TWO_PI * Math.floor(r * TWO_PI_INVERSE);  if (r < 0.)   r+=TWO_PI;  return r;}  }
class C{  public void stopDream(){synchronized (mLock) {    stopDreamLocked();  }}  }
class C{  @Override public boolean isNominal(){  return false;}  }
class C{  public static boolean isMultOperator(String opr){  boolean is=false;  if (opr.equals(FolderSearchOpr.IN_AND) || opr.equals(FolderSearchOpr.IN_OR) || opr.equals(FolderSearchOpr.LIKE_AND)|| opr.equals(FolderSearchOpr.LIKE_OR))   is=true;  return is;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Node removedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      removedNode=entRef.removeChild(entText);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static String formatPercentage(BigDecimal percentage){  if (percentage == null)   return "";  return percentageDecimalFormat.format(percentage);}  }
class C{  public static Angle greatCircleDistance(LatLon p1,LatLon p2){  if ((p1 == null) || (p2 == null)) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double a=Math.sin((lat2 - lat1) / 2.0);  double b=Math.sin((lon2 - lon1) / 2.0);  double c=a * a + +Math.cos(lat1) * Math.cos(lat2) * b* b;  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public Base64OutputStreamWriter(final int size,final Writer writer){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }  this.buf=new byte[size];  this.chars=new char[size];  this.totalCharsWritten=0;  this.writer=writer;}  }
class C{  public Period minusHours(int hours){  return plusHours(-hours);}  }
class C{  public void showControl(){  if (!controlShown) {    createPartControl(parent,toolkit);    subComposite.layout();    controlShown=true;    inputChanged();    setSwitchSteppingControlButtonChecked(true);  }}  }
class C{  public Object read(String value,Class type) throws Exception {  Transform transform=lookup(type);  if (transform == null) {    throw new TransformException("Transform of %s not supported",type);  }  return transform.read(value);}  }
class C{  public StackSaverFactory(String cameraDirectory,ContentResolver contentResolver){  mCameraDirectory=cameraDirectory;  mContentResolver=contentResolver;}  }
class C{  public static double gini(Map<String,WeightMass> dist){  return gini(dist,SplitMetric.sum(dist));}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException {  if (!initialized) {    throw new IllegalStateException("ExemptionMechanism not initialized");  }  byte[] blob=exmechSpi.engineGenExemptionBlob();  done=true;  return blob;}  }
class C{  public static String dec2Hex(int value){  String result="";  return dec2Hex(value,result);}  }
class C{  @PUT @Path("/policies/{id}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updatePolicy(@Context final HttpServletRequest httpServletRequest,@PathParam("id") String policyId,String jsonString){  return RestApiResponseHandler.getResponseOk(new JSONObject());}  }
class C{  private void connectTxHsc1SerialDevice(SerialInterface serialInterface,Nhhs2 nhhs2){  SerialDevice.interConnectSerialDevices(serialInterface,nhhs2);}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  try {    Vector<String> testMethods=new Vector<String>();    Method[] methods=OptionHandlerTest.class.getDeclaredMethods();    for (    Method method : methods) {      if (method.getName().startsWith("test")) {        testMethods.add(method.getName());      }    }    GenericPropertiesCreator creator=new GenericPropertiesCreator();    creator.execute(false);    Properties props=creator.getOutputProperties();    Enumeration<?> names=props.propertyNames();    while (names.hasMoreElements()) {      String name=names.nextElement().toString();      StringTokenizer tok=new StringTokenizer(props.getProperty(name,""),",");      while (tok.hasMoreTokens()) {        String classname=tok.nextToken();        try {          Class<?> cls=Class.forName(classname);          if (!ClassDiscovery.hasInterface(OptionHandler.class,cls)) {            continue;          }        } catch (        Exception e) {          continue;        }        for (int i=0; i < testMethods.size(); i++) {          suite.addTest(new OptionHandlerTest(testMethods.get(i),classname));        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return suite;}  }
class C{  private boolean invokeItemLongClickMethod(Object handler,String methodName,Object... params){  Method method=null;  try {    if (handler == null) {      throw new AbAppException("invokeItemLongClickMethod: handler is null :");    }    method=handler.getClass().getDeclaredMethod(methodName,AdapterView.class,View.class,int.class,long.class);    if (method != null) {      Object obj=method.invoke(handler,params);      return Boolean.valueOf(obj == null ? false : Boolean.valueOf(obj.toString()));    } else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public static String removeSpaces(String str){  return removeRegex(str,"[\\ ]");}  }
class C{  private void parseElement(Element element,BaseContentEntry<?> entry){  NodeList nodeList=element.getChildNodes();  for (int i=0; i < nodeList.getLength(); i++) {    Node node=nodeList.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element child=(Element)node;      if (!hasClass(child,"hentry") && !child.getTagName().equals("q") && !child.getTagName().equals("blockquote")) {        boolean parseDeeper=true;        if (hasClass(child,"entry-title")) {          entry.setTitle(titleParser.parseTitle(child));          parseDeeper=false;        }        if (hasClass(child,"entry-content")) {          entry.setContent(contentParser.parseContent(child));          parseDeeper=false;        }        if (hasClass(child,"updated")) {          entry.setUpdated(updatedParser.parseUpdated(child));          parseDeeper=false;        }        if (hasClass(child,"vcard")) {          entry.getAuthors().add(authorParser.parseAuthor(child));          parseDeeper=false;        }        if (hasClass(child,"entry-summary")) {          entry.setSummary(summaryParser.parseSummary(child));          parseDeeper=false;        }        if (hasClass(child,"gs:data")) {          if (getType(entry) == LIST_PAGE) {            ((ListPageEntry)(BaseContentEntry)entry).setData(dataParser.parseData(child));          }          parseDeeper=false;        }        if (hasClass(child,"gs:field")) {          if (getType(entry) == LIST_ITEM) {            ((ListItemEntry)(BaseContentEntry)entry).addField(fieldParser.parseField(child));          }          parseDeeper=false;        }        if (parseDeeper) {          parseElement(child,entry);        }      }    }  }}  }
class C{  private void build(){  int count=names.size();  int last=count - 1;  for (int i=0; i < count; i++) {    String prefix=prefixes.get(i);    String segment=names.get(i);    int index=indexes.get(i);    if (i > 0) {      builder.append('/');    }    if (attribute && i == last) {      builder.append('@');      builder.append(segment);    } else {      if (prefix != null) {        builder.append(prefix);        builder.append(':');      }      builder.append(segment);      builder.append('[');      builder.append(index);      builder.append(']');    }  }  location=builder.toString();}  }
class C{  protected void clearAutoscroll(){  if (autoScroller != null) {    autoScroller.stop();    autoScroller=null;  }}  }
class C{  public static String join(int[] array,String token){  String result="";  if ((array != null) && (array.length > 0)) {    int length=array.length;    if (length == 1)     result=String.valueOf(array[0]);    StringBuffer buffer=new StringBuffer();    buffer.append(array[0]);    for (int i=1; i < length; i++)     buffer.append(token).append(array[i]);    result=buffer.toString();  }  return result;}  }
class C{  private void checkEntries(IgniteCache<Integer,CacheValue> cache,int lowerBound,int upperBound) throws Exception {  for (int i=lowerBound; i < upperBound; i++) {    cache.localPromote(Collections.singleton(i));    GridCacheEntryEx entry=dht(cache).entryEx(i);    assert entry != null;    assert entry.key() != null;    CacheValue val=CU.value(entry.rawGet(),entry.context(),false);    assert val != null;    assertEquals(CU.value(entry.key(),entry.context(),false),new Integer(val.value()));    assert entry.version().equals(versions.get(i));  }}  }
class C{  public void pauseRamp(JobNodeBean node){  if (node instanceof ActJobNodeBean) {    ActJobNodeBean jobNode=(ActJobNodeBean)node;    controller.pauseRampJob(jobNode.getId());  } else   if (node instanceof VMNodeBean) {    VMNodeBean agentNode=(VMNodeBean)node;    controller.pauseRampInstance(agentNode.getId());  }}  }
class C{  public synchronized void selectAll(){  this.selectionStart=0;  this.selectionEnd=getText().length();  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    peer.select(selectionStart,selectionEnd);  }}  }
class C{  @Override protected void tearDown(){  deleteFileFromTmp("WordsFromFile.txt");  deleteFileFromTmp("RegExpFromFile.txt");  super.tearDown();}  }
class C{  public void addArc(int x1,int y1,int w,int h,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(x1,y1,w,h,s,e,properties,link.dos);}  }
class C{  public int headerLength(){  return this.header().length();}  }
class C{  public int parseNumber() throws ParseException {  int length=orig.length;  boolean gotNum=false;  int result=0;  while (index < length) {switch (orig[index]) {case '0':      result*=10;    gotNum=true;  break;case '1':result=result * 10 + 1;gotNum=true;break;case '2':result=result * 10 + 2;gotNum=true;break;case '3':result=result * 10 + 3;gotNum=true;break;case '4':result=result * 10 + 4;gotNum=true;break;case '5':result=result * 10 + 5;gotNum=true;break;case '6':result=result * 10 + 6;gotNum=true;break;case '7':result=result * 10 + 7;gotNum=true;break;case '8':result=result * 10 + 8;gotNum=true;break;case '9':result=result * 10 + 9;gotNum=true;break;default :if (gotNum) return result; else throw new ParseException("No Number found",index);}index++;}if (gotNum) return result;throw new ParseException("No Number found",index);}  }
class C{  @Override public void updateObject(String columnLabel,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x, "+ scale+ ");");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String symb=getString(stack);  String s=getString(stack);  if (SageConstants.LITE)   return null;  return stack.getUIMgr() == null ? null : stack.getUIMgr().getModuleGroup().addWidget(WidgetMeta.getTypeForName(s),symb);}  }
class C{  Route flipTlsMode(){  return new Route(address,proxy,inetSocketAddress,!modernTls);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.437 -0500",hash_original_method="10BF9B2FD08E11C5C21016EDE854825A",hash_generated_method="47A6FDE77E057ED0571051084086F67C") public void removeAccuracy(){  mAccuracy=0.0f;  mHasAccuracy=false;}  }
class C{  public void convert(String token){  isBot=true;  email=null;  password=null;  this.token=token;  if (isReady()) {    ((User)getOurUser()).convertToBot();  }}  }
class C{  public boolean replaceEdit(UndoableEdit anEdit){  return false;}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  if (m instanceof EnumMap) {    EnumMap<?,?> em=(EnumMap<?,?>)m;    if (em.keyType != keyType) {      if (em.isEmpty())       return;      throw new ClassCastException(em.keyType + " != " + keyType);    }    for (int i=0; i < keyUniverse.length; i++) {      Object emValue=em.vals[i];      if (emValue != null) {        if (vals[i] == null)         size++;        vals[i]=emValue;      }    }  } else {    super.putAll(m);  }}  }
class C{  protected void paintText(SynthContext context,Graphics g,String title){  if (progressBar.isStringPainted()) {    SynthStyle style=context.getStyle();    Font font=style.getFont(context);    FontMetrics fm=SwingUtilities2.getFontMetrics(progressBar,g,font);    int strLength=style.getGraphicsUtils(context).computeStringWidth(context,font,fm,title);    Rectangle bounds=progressBar.getBounds();    if (rotateText && progressBar.getOrientation() == JProgressBar.VERTICAL) {      Graphics2D g2=(Graphics2D)g;      Point textPos;      AffineTransform rotation;      if (progressBar.getComponentOrientation().isLeftToRight()) {        rotation=AffineTransform.getRotateInstance(-Math.PI / 2);        textPos=new Point((bounds.width + fm.getAscent() - fm.getDescent()) / 2,(bounds.height + strLength) / 2);      } else {        rotation=AffineTransform.getRotateInstance(Math.PI / 2);        textPos=new Point((bounds.width - fm.getAscent() + fm.getDescent()) / 2,(bounds.height - strLength) / 2);      }      if (textPos.x < 0) {        return;      }      font=font.deriveFont(rotation);      g2.setFont(font);      g2.setColor(style.getColor(context,ColorType.TEXT_FOREGROUND));      style.getGraphicsUtils(context).paintText(context,g,title,textPos.x,textPos.y,-1);    } else {      Rectangle textRect=new Rectangle((bounds.width / 2) - (strLength / 2),(bounds.height - (fm.getAscent() + fm.getDescent())) / 2,0,0);      if (textRect.y < 0) {        return;      }      g.setColor(style.getColor(context,ColorType.TEXT_FOREGROUND));      g.setFont(font);      style.getGraphicsUtils(context).paintText(context,g,title,textRect.x,textRect.y,-1);    }  }}  }
class C{  public void record(@Nonnull String context) throws IllegalArgumentException {  checkNotNull(context);  if (!store.add(context)) {    throw new IllegalArgumentException("Context is already claimed: " + context);  }}  }
class C{  public USTelephone(){  super(Pattern.compile(PHONE_REGEX,Pattern.CASE_INSENSITIVE),0,1.0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static PublicRegexp simplify(Regexp re){  return PublicRegexp.deepCopy(Simplify.simplify(re));}  }
class C{  public boolean checkAddrPattern(final String theAddrPattern){  return theAddrPattern.equals(addrPattern());}  }
class C{  @Override public void parse(final Cookie cookie,final String portValue) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    if ((portValue == null) || (portValue.trim().equals(""))) {      cookie2.setPortAttributeBlank(true);    } else {      final int[] ports=parsePortAttribute(portValue);      cookie2.setPorts(ports);    }    cookie2.setPortAttributeSpecified(true);  }}  }
class C{  public final double sampleCount(){synchronized (_lock) {    long count=_count.get();    long lastCount=_lastCount;    _lastCount=count;    return count - lastCount;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof FlowArrangement)) {    return false;  }  FlowArrangement that=(FlowArrangement)obj;  if (this.horizontalAlignment != that.horizontalAlignment) {    return false;  }  if (this.verticalAlignment != that.verticalAlignment) {    return false;  }  if (this.horizontalGap != that.horizontalGap) {    return false;  }  if (this.verticalGap != that.verticalGap) {    return false;  }  return true;}  }
class C{  public final CC shrinkPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkPrioY(widthHeight[1]);case 1:shrinkPrioX(widthHeight[0]);}return this;}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  public double eval(double params[]){  double tmp=params[0] * params[0];  return (tmp * tmp * params[0]);}  }
class C{  public InvalidSearchFilterException(){  super();}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    removeByDiskKey(entry.diskKey);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public Goto(AST source){  super(source,"goto");}  }
class C{  public static String resolveResourceId(Request restletReq){  String resourceId=restletReq.getResourceRef().getRelativeRef(restletReq.getRootRef().getParentRef()).getPath(DECODE);  if (!resourceId.startsWith("/"))   resourceId="/" + resourceId;  return resourceId;}  }
class C{  public void concatenate(NetObjectList net_obj_list){  super.concatenate(net_obj_list);}  }
class C{  private Document parse(final String data){  if (docBuilder == null || data == null) {    return null;  }  Document document=null;  try {    String buf=BEGINPART + data + ENDPART;    InputSource inputSource=new InputSource(new StringReader(buf));    document=docBuilder.parse(inputSource);  } catch (  Exception e) {    e.printStackTrace();  }  return document;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:20.821 -0500",hash_original_method="71EB0F41099D1D8D08C83EAF224E8D36",hash_generated_method="18477F0F671E7A0E78BDF283C62D7B0F") private NodeImpl shallowCopy(short operation,Node node){switch (node.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  AttrImpl attrCopy;if (attr.namespaceAware) {  attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());  attrCopy.setPrefix(attr.getPrefix());} else {  attrCopy=createAttribute(attr.getName());}attrCopy.setNodeValue(attr.getValue());return attrCopy;case Node.CDATA_SECTION_NODE:return createCDATASection(((CharacterData)node).getData());case Node.COMMENT_NODE:return createComment(((Comment)node).getData());case Node.DOCUMENT_FRAGMENT_NODE:return createDocumentFragment();case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot copy node of type " + node.getNodeType());case Node.ELEMENT_NODE:ElementImpl element=(ElementImpl)node;ElementImpl elementCopy;if (element.namespaceAware) {elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName());elementCopy.setPrefix(element.getPrefix());} else {elementCopy=createElement(element.getTagName());}NamedNodeMap attributes=element.getAttributes();for (int i=0; i < attributes.getLength(); i++) {AttrImpl elementAttr=(AttrImpl)attributes.item(i);AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr);notifyUserDataHandlers(operation,elementAttr,elementAttrCopy);if (elementAttr.namespaceAware) {elementCopy.setAttributeNodeNS(elementAttrCopy);} else {elementCopy.setAttributeNode(elementAttrCopy);}}return elementCopy;case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new UnsupportedOperationException();case Node.ENTITY_REFERENCE_NODE:return createEntityReference(node.getNodeName());case Node.PROCESSING_INSTRUCTION_NODE:ProcessingInstruction pi=(ProcessingInstruction)node;return createProcessingInstruction(pi.getTarget(),pi.getData());case Node.TEXT_NODE:return createTextNode(((Text)node).getData());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}}  }
class C{  public ServiceChannel createServiceChannel(String connectUrl,String endpointUri,SecurityMode mode,org.opcfoundation.ua.transport.security.Cert remoteCertificate) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(connectUrl,endpointUri,mode,remoteCertificate));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.166 -0500",hash_original_method="873D99639E9E59C87CD3A574B36E4573",hash_generated_method="779F213A44CB5DBFF44E61D24BDD1114") private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  long lastTime=System.nanoTime();  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      if (nanosTimeout <= 0)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      long now=System.nanoTime();      nanosTimeout-=now - lastTime;      lastTime=now;      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override public boolean isInlineTag(){  return true;}  }
class C{  public T addFieldDataField(String name){  sourceBuilder().fieldDataField(name);  return (T)this;}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  @Override protected synchronized void handleDataPointSuccess(){  super.handleDataPointSuccess();}  }
class C{  public static Vector<String> readFileIntoVector(String filePath) throws Exception {  Vector<String> result=new Vector<String>();  File f=new File(filePath);  if (!f.exists())   throw new Exception("Reader : File" + filePath + " not valid!");  BufferedReader br=new BufferedReader(new FileReader(f));  String line="";  while ((line=br.readLine()) != null) {    result.add(line);  }  br.close();  return result;}  }
class C{  PackageType(PackageType parent,String path){  this(parent + "." + path);}  }
class C{  public DynamicObject createObject(){  return emptyShape.newInstance();}  }
class C{  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches){  LinkedList<Patch> patchesCopy=new LinkedList<Patch>();  for (  Patch aPatch : patches) {    Patch patchCopy=new Patch();    for (    Diff aDiff : aPatch.diffs) {      Diff diffCopy=new Diff(aDiff.operation,aDiff.text);      patchCopy.diffs.add(diffCopy);    }    patchCopy.start1=aPatch.start1;    patchCopy.start2=aPatch.start2;    patchCopy.length1=aPatch.length1;    patchCopy.length2=aPatch.length2;    patchesCopy.add(patchCopy);  }  return patchesCopy;}  }
class C{  public static double max(double a,double b,double c){  return max(max(a,b),c);}  }
class C{  public void testFormatInfinityDP(){  mFReal=new FormatReal(2,2);  mStr=mFReal.format(mStrBuff,Float.POSITIVE_INFINITY).toString();  assertEquals("Should be Infinity","#Infinity#",mStr);}  }
class C{  public static void showCenterScreen(Window window){  SessionManager.getAppDesktop().showWindow(window,"center");}  }
class C{  public static void copyFile(File source,File target) throws AdeUsageException {  final String closeFail=" failed to close.";  FileInputStream fisSource=null;  FileOutputStream fosTarget=null;  FileChannel inputChannel=null;  FileChannel outputChannel=null;  try {    fisSource=new FileInputStream(source);    fosTarget=new FileOutputStream(target);    inputChannel=fisSource.getChannel();    outputChannel=fosTarget.getChannel();    outputChannel.transferFrom(inputChannel,0,inputChannel.size());    inputChannel.close();    inputChannel=null;    outputChannel.close();    outputChannel=null;    fisSource.close();    fisSource=null;    fosTarget.close();    fosTarget=null;  } catch (  IOException e) {    throw new AdeUsageException("Copy file utility error",e);  } finally {    if (inputChannel != null) {      try {        inputChannel.close();      } catch (      IOException e1) {        logger.warn(inputChannel.toString() + closeFail,e1);      }    }    if (outputChannel != null) {      try {        outputChannel.close();      } catch (      IOException e1) {        logger.warn(outputChannel.toString() + closeFail,e1);      }    }    if (fisSource != null) {      try {        fisSource.close();      } catch (      IOException e1) {        logger.warn(fisSource.toString() + closeFail,e1);      }    }    if (fosTarget != null) {      try {        fosTarget.close();      } catch (      IOException e1) {        logger.warn(fosTarget.toString() + closeFail,e1);      }    }  }}  }
class C{  void sendBit5Baud(boolean bitValue) throws IOException {  SerialExt.setBreak(bitValue ? 0 : 1);  try {    Thread.sleep(200);  } catch (  InterruptedException e) {    log.error(null,e);  }}  }
class C{  int closure(int[] flags) throws RESyntaxException {  int idxBeforeTerminal=idx;  int[] terminalFlags={NODE_NORMAL};  int ret=terminal(terminalFlags);  flags[0]|=terminalFlags[0];  if (idx >= len) {    return ret;  }  boolean greedy=true;  char closureType=pattern.charAt(idx);switch (closureType) {case '?':case '*':    flags[0]|=NODE_NULLABLE;case '+':  idx++;case '{':int opcode=instruction[ret];if (opcode == RE.OP_BOL || opcode == RE.OP_EOL) {syntaxError("Bad closure operand");}if ((terminalFlags[0] & NODE_NULLABLE) != 0) {syntaxError("Closure operand can't be nullable");}}if (idx < len && pattern.charAt(idx) == '?') {idx++;greedy=false;}if (greedy) {switch (closureType) {case '{':{bracket();int bracketEnd=idx;int bracketMin=this.bracketMin;int bracketOpt=this.bracketOpt;int pos=ret;for (int c=0; c < bracketMin; c++) {idx=idxBeforeTerminal;setNextOfEnd(pos,pos=terminal(terminalFlags));}if (bracketOpt == bracketUnbounded) {idx=bracketEnd;nodeInsert(RE.OP_STAR,0,pos);setNextOfEnd(pos + RE.nodeSize,pos);break;} else if (bracketOpt > 0) {int opt[]=new int[bracketOpt + 1];nodeInsert(RE.OP_MAYBE,0,pos);opt[0]=pos;for (int c=1; c < bracketOpt; c++) {  opt[c]=node(RE.OP_MAYBE,0);  idx=idxBeforeTerminal;  terminal(terminalFlags);}int end=opt[bracketOpt]=node(RE.OP_NOTHING,0);for (int c=0; c < bracketOpt; c++) {  setNextOfEnd(opt[c],end);  setNextOfEnd(opt[c] + RE.nodeSize,opt[c + 1]);}} else {lenInstruction=pos;node(RE.OP_NOTHING,0);}idx=bracketEnd;break;}case '?':{nodeInsert(RE.OP_MAYBE,0,ret);int n=node(RE.OP_NOTHING,0);setNextOfEnd(ret,n);setNextOfEnd(ret + RE.nodeSize,n);break;}case '*':{nodeInsert(RE.OP_STAR,0,ret);setNextOfEnd(ret + RE.nodeSize,ret);break;}case '+':{nodeInsert(RE.OP_CONTINUE,0,ret);int n=node(RE.OP_PLUS,0);setNextOfEnd(ret + RE.nodeSize,n);setNextOfEnd(n,ret);break;}}} else {switch (closureType) {case '?':{nodeInsert(RE.OP_RELUCTANTMAYBE,0,ret);int n=node(RE.OP_NOTHING,0);setNextOfEnd(ret,n);setNextOfEnd(ret + RE.nodeSize,n);break;}case '*':{nodeInsert(RE.OP_RELUCTANTSTAR,0,ret);setNextOfEnd(ret + RE.nodeSize,ret);break;}case '+':{nodeInsert(RE.OP_CONTINUE,0,ret);int n=node(RE.OP_RELUCTANTPLUS,0);setNextOfEnd(n,ret);setNextOfEnd(ret + RE.nodeSize,n);break;}}}return ret;}  }
class C{  public PcMaxRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  PrincipalName krb5Principal;  try {    krb5Principal=new PrincipalName(fullName,nameType);    oos.writeObject(krb5Principal.asn1Encode());    oos.writeObject(krb5Principal.getRealm().asn1Encode());  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  @Override public void run(IProgressMonitor progressMonitor) throws InvocationTargetException, InterruptedException {  this.monitor=progressMonitor;  try {    initialize();  } catch (  IOException e) {    throw new InvocationTargetException(e,NLS.bind(N4ExportMessages.Export_cannotOpen,e.getMessage()));  }  int totalWork=countSelectedResources();  monitor.beginTask(DataTransferMessages.DataTransfer_exportingTitle,totalWork);  exportResources();  try {    exporter.finished();  } catch (  IOException e) {    throw new InvocationTargetException(e,NLS.bind(N4ExportMessages.Export_cannotClose,e.getMessage()));  } finally {    monitor.done();  }}  }
class C{  protected int nextInXMLDecl() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case 'v':return readIdentifier("ersion",LexicalUnits.VERSION_IDENTIFIER,-1);case 'e':return readIdentifier("ncoding",LexicalUnits.ENCODING_IDENTIFIER,-1);case 's':return readIdentifier("tandalone",LexicalUnits.STANDALONE_IDENTIFIER,-1);case '=':nextChar();return LexicalUnits.EQ;case '?':nextChar();if (current != '>') {throw createXMLException("pi.end.expected");}nextChar();context=TOP_LEVEL_CONTEXT;return LexicalUnits.PI_END;case '"':attrDelimiter='"';return readString();case '\'':attrDelimiter='\'';return readString();default :throw createXMLException("invalid.character");}}  }
class C{  public static int mergeRgb(int[] rgbData){  int rgb=rgbData[ALPHA] << SHIFT_ALPHA;  rgb|=rgbData[RED] << SHIFT_RED;  rgb|=rgbData[GREEN] << SHIFT_GREEN;  rgb|=rgbData[BLUE] << SHIFT_BLUE;  return rgb;}  }
class C{  protected static String tokenizeColons(final String id){  try {    final Matcher matcher=IPv4AddrIV.getIPv4Matcher(id);    if (matcher.matches()) {      return id;    }    final List<String> tokens=new LinkedList<String>();    final StringTokenizer tokenizer=new StringTokenizer(id,":");    while (tokenizer.hasMoreTokens()) {      final String token=tokenizer.nextToken();      final String encoded=URLEncoder.encode(token,"UTF-8");      tokens.add(encoded);    }    final StringBuilder sb=new StringBuilder();    for (    String token : tokens) {      sb.append(token).append(':');    }    sb.setLength(sb.length() - 1);    return sb.toString();  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public TSIG(Name algorithm,Name name,byte[] key){  this.name=name;  this.alg=algorithm;  this.key=key;  getDigest();}  }
class C{  private static char[] yy_unpack_cmap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 198) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean canRead(Permission p){  if (permissions != null) {    return permissions[p.value][0];  }  return false;}  }
class C{  @Before public void createDatabase(){  int cTable=createTable(SCHEMA,"customers","cid varchar(4) not null primary key, name varchar(64), dob_year varchar(4)");  createIndex(SCHEMA,"customers","name_dob","name","dob_year");  int oTable=createTable(SCHEMA,"orders","oid int not null primary key, cid varchar(4), placed varchar(64)",akibanFK("cid","customers","cid"));  createIndex(SCHEMA,"orders","placed","placed");  TableName groupName=getTable(SCHEMA,"customers").getGroup().getName();  namePlacedGi=createLeftGroupIndex(groupName,"namePlaced","customers.name","orders.placed");  int startingCid=0;  int endingCid=CUSTOMERS_COUNT;  insertRows(cTable,oTable,startingCid,endingCid);}  }
class C{  @Override protected void createChildren(){  if (m_addressSpace.isLoaded()) {    m_addressSpace.getContent().addListener(m_addrSpaceContentListener);    for (    final INaviModule module : m_addressSpace.getContent().getModules()) {      add(new CModuleNode(getProjectTree(),this,m_database,m_addressSpace,module,new CProjectContainer(m_database,m_project,m_addressSpace)));    }  }}  }
class C{  public static Test suite() throws Exception {  return suite(true);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria){  return contains(value,start,length,new String[]{criteria});}  }
class C{  public CCShuffleTiles(int s,ccGridSize gridSize,float d){  super(gridSize,d);  seed=s;  rand=new Random();  tilesOrder=null;  tiles=null;}  }
class C{  public Property weekyear(){  return new Property(this,getChronology().weekyear());}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  HistogramDataset clone=(HistogramDataset)super.clone();  int seriesCount=getSeriesCount();  clone.list=new java.util.ArrayList(seriesCount);  for (int i=0; i < seriesCount; i++) {    clone.list.add(new HashMap((Map)this.list.get(i)));  }  return clone;}  }
class C{  private static void quickSort(int[] array,int[] index,int left,int right){  if (left < right) {    int middle=partition(array,index,left,right);    quickSort(array,index,left,middle);    quickSort(array,index,middle + 1,right);  }}  }
class C{  public AbstractEstimate persistFinancialDetail(final FinancialDetail financialDetail,final AbstractEstimate estimate){  super.validate(estimate);  estimate.getFinancialDetails().clear();  estimate.addFinancialDetails(financialDetail);  return super.persist(estimate);}  }
class C{  public static void installColorsAndFont(JComponent c,String defaultBgName,String defaultFgName,String defaultFontName){  Font f=c.getFont();  if (f == null || f instanceof UIResource) {    c.setFont(getInstance().getFont(defaultFontName));  }  installColors(c,defaultBgName,defaultFgName);}  }
class C{  public InternationalFormatter(){  setOverwriteMode(false);}  }
class C{  public REProgram(char[] instruction,int lenInstruction){  setInstructions(instruction,lenInstruction);}  }
class C{  public SortedSetDocValues iterator(LeafReader reader) throws IOException {  if (isEmpty()) {    return DocValues.emptySortedSet();  } else {    return new LegacySortedSetDocValuesWrapper(new Iterator(reader),reader.maxDoc());  }}  }
class C{  public boolean next(){  if (!hasNext) {    return false;  }  for (int i=0; i < m; i++) {    out[i]=in[index[i]];  }  moveIndex();  return true;}  }
class C{  public String analyzeDump(){  StringBuffer statData=new StringBuffer();  int deadlocks=tdi.getDeadlocks() == null ? 0 : tdi.getDeadlocks().getNodeCount();  int threadCount=tdi.getThreads() == null ? 0 : tdi.getThreads().getNodeCount();  int waiting=tdi.getWaitingThreads() == null ? 0 : tdi.getWaitingThreads().getNodeCount();  int sleeping=tdi.getSleepingThreads() == null ? 0 : tdi.getSleepingThreads().getNodeCount();  int overallThreadsWaitingWithoutLocks=tdi.getOverallThreadsWaitingWithoutLocksCount();  int monitorsWithoutLocksCount=tdi.getMonitorsWithoutLocks() == null ? 0 : tdi.getMonitorsWithoutLocks().getNodeCount();  if ((deadlocks == 0) && (threadCount > 0) && ((waiting / (threadCount / 100.0)) > 10.0)) {    statData.append("<tr bgcolor=\"#ffffff\"<td></td></tr>");    statData.append("<tr bgcolor=\"#cccccc\"><td colspan=2><font face=System " + "><p>" + (int)(waiting / (threadCount / 100.0)) + "% of all threads are waiting for a monitor to become available again.</p><br>");    statData.append("This might indicate a congestion or even a deadlock. If a monitor doesn't have a locking thread, it might be<br>");    statData.append("hold by some external resource or system thread. You should check the <a href=\"wait://\">waiting threads</a>.<br></td></tr>");  } else   if (deadlocks > 0) {    statData.append("<tr bgcolor=\"#ffffff\"<td></td></tr>");    statData.append("<tr bgcolor=\"#cccccc\"><td colspan=2><font face=System " + "><p>The JVM has detected " + deadlocks + " deadlock(s) in the thread dump. You should check the <br><a href=\"dead://\">deadlocks</a> for further information.</p><br>");  }  if ((threadCount > 0) && ((sleeping / (threadCount / 100.0)) > 25.0)) {    statData.append("<tr bgcolor=\"#ffffff\"<td></td></tr>");    statData.append("<tr bgcolor=\"#cccccc\"><td colspan=2><font face=System" + "><p>" + (int)(sleeping / (threadCount / 100.0)) + "% of all threads are sleeping on a monitor.</p><br>");    statData.append("This might indicate they are waiting for some external resource (e.g. database) which is overloaded<br>");    statData.append("or not available or are just waiting to get to do something (idle threads).<br>");    statData.append("You should check the <a href=\"sleep://\">sleeping threads</a> with a filter excluding all idle threads.</td></tr>");  }  if (monitorsWithoutLocksCount > 0) {    statData.append("<tr bgcolor=\"#ffffff\"<td></td></tr>");    statData.append("<tr bgcolor=\"#cccccc\"><td colspan=2><font face=System" + "><p>This thread dump contains monitors without a locking thread information.<br>");    statData.append("This means, the monitor is hold by a system thread or some external resource.</p<br>");    statData.append("You should check the monitors without locking threads for more information.<br></td></tr>");  }  if ((threadCount > 0) && (overallThreadsWaitingWithoutLocks / (threadCount / 100.0) > 50.0)) {    statData.append("<tr bgcolor=\"#ffffff\"<td></td></tr>");    statData.append("<tr bgcolor=\"#cccccc\"><td colspan=2><font face=System " + "<p>" + (int)(overallThreadsWaitingWithoutLocks / (threadCount / 100.0)) + "% of all threads are waiting for a monitor without a application ");    statData.append("thread holding it.<br> This indicates a congestion. It is very likely the garbage collector is running ");    statData.append("and is blocking the monitors.</p<br>");    statData.append("You should check the monitors without locking threads for more information on the blocked threads.<br>");    statData.append("You also should analyze the garbage collector behaviour. Go to the ");    statData.append("<a href=\"http://www.tagtraum.com/gcviewer.html\">GCViewer-Homepage</a> for more<br>");    statData.append(" information on how to do this.</td></tr>");  }  return statData.toString();}  }
class C{  public IOUtils(){  super();}  }
class C{  private MultipartFormParser(){}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public void add(Component component,Object constraints){  if (!(component instanceof UIResource)) {    if (constraints instanceof String) {      addTab((String)constraints,component);    } else     if (constraints instanceof Icon) {      addTab(null,(Icon)constraints,component);    } else {      add(component);    }  } else {    super.add(component,constraints);  }}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public final void writeFloat(float f) throws IOException {  this.writeInt(Float.floatToIntBits(f));}  }
class C{  private void onClose(){  if (getOwner() == null) {    System.exit(0);  }  getOwner().setEnabled(true);  this.setVisible(false);  dispose();}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,System.currentTimeMillis() + delay,-period);}  }
class C{  public ContentModelState advance(Object token){switch (model.type) {case '+':    if (model.first(token)) {      return new ContentModelState(model.content,new ContentModelState(model,next,value + 1)).advance(token);    }  if (value != 0) {    if (next != null) {      return next.advance(token);    } else {      return null;    }  }break;case '*':if (model.first(token)) {return new ContentModelState(model.content,this).advance(token);}if (next != null) {return next.advance(token);} else {return null;}case '?':if (model.first(token)) {return new ContentModelState(model.content,next).advance(token);}if (next != null) {return next.advance(token);} else {return null;}case '|':for (ContentModel m=(ContentModel)model.content; m != null; m=m.next) {if (m.first(token)) {return new ContentModelState(m,next).advance(token);}}break;case ',':{ContentModel m=(ContentModel)model.content;for (int i=0; i < value; i++, m=m.next) ;if (m.first(token) || m.empty()) {if (m.next == null) {return new ContentModelState(m,next).advance(token);} else {return new ContentModelState(m,new ContentModelState(model,next,value + 1)).advance(token);}}break;}case '&':{ContentModel m=(ContentModel)model.content;boolean complete=true;for (int i=0; m != null; i++, m=m.next) {if ((value & (1L << i)) == 0) {if (m.first(token)) {return new ContentModelState(m,new ContentModelState(model,next,value | (1L << i))).advance(token);}if (!m.empty()) {complete=false;}}}if (complete) {if (next != null) {return next.advance(token);} else {return null;}}break;}default :if (model.content == token) {if (next == null && (token instanceof Element) && ((Element)token).content != null) {return new ContentModelState(((Element)token).content);}return next;}}return null;}  }
class C{  private void prepareShadeAnimation(int animationType,int shadeColorId,int iconResId,CameraAppUI.AnimationFinishedListener listener){  mAnimationFinishedListener=listener;  if (mPeepHoleAnimator != null && mPeepHoleAnimator.isRunning()) {    mPeepHoleAnimator.end();  }  mAnimationType=animationType;  resetShade(shadeColorId,iconResId);}  }
class C{  public double calcAngleBetweenLines(Entry start1,Entry end1,Entry start2,Entry end2){  double angle1=calcAngleWithRatios(start1,end1);  double angle2=calcAngleWithRatios(start2,end2);  return Math.abs(angle1 - angle2);}  }
class C{  @SuppressWarnings("unused") private static int guaranteedErrorEstimator(int nRows,int sampleSize,ReaderColumnSelection sampleRowsReader){  HashMap<DblArray,Integer> valsCount=getValCounts(sampleRowsReader);  int singltonValsCount=0;  int otherValsCount=0;  for (  Integer c : valsCount.values()) {    if (c == 1)     singltonValsCount++; else     otherValsCount++;  }  return (int)Math.round(otherValsCount + singltonValsCount * Math.sqrt(((double)nRows) / sampleSize));}  }
class C{  private void validateUserAndPassword(boolean correct){  int min=SysProperties.DELAY_WRONG_PASSWORD_MIN;  if (correct) {    long delay=wrongPasswordDelay;    if (delay > min && delay > 0) {synchronized (INSTANCE) {        delay=MathUtils.secureRandomInt((int)delay);        try {          Thread.sleep(delay);        } catch (        InterruptedException e) {        }        wrongPasswordDelay=min;      }    }  } else {synchronized (INSTANCE) {      long delay=wrongPasswordDelay;      int max=SysProperties.DELAY_WRONG_PASSWORD_MAX;      if (max <= 0) {        max=Integer.MAX_VALUE;      }      wrongPasswordDelay+=wrongPasswordDelay;      if (wrongPasswordDelay > max || wrongPasswordDelay < 0) {        wrongPasswordDelay=max;      }      if (min > 0) {        delay+=Math.abs(MathUtils.secureRandomLong() % 100);        try {          Thread.sleep(delay);        } catch (        InterruptedException e) {        }      }      throw DbException.get(ErrorCode.WRONG_USER_OR_PASSWORD);    }  }}  }
class C{  public void updateCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateCharacterStream(columnIndex,x,length);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS:    return getImplementedProjects();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public MessageRelayEvent(int from,int to,String id,double time,int stage){  super(from,to,id,time);  this.stage=stage;}  }
class C{  public void flush(){  if (nterms == 0) {    reset();    return;  }  if (log.isInfoEnabled())   log.info("count=" + count + ", ndocs="+ ndocs+ ", nfields="+ nfields+ ", nterms="+ nterms);  buffer[count - 1].normalize();  final KV[] a=new KV[nterms];  @SuppressWarnings("unchecked") final ITupleSerializer<ITermDocKey<V>,ITermDocVal> tupleSer=textIndexer.getIndex().getIndexMetadata().getTupleSerializer();  int n=0;  for (int i=0; i < count; i++) {    final TermFrequencyData<V> termFreq=buffer[i];    final V docId=termFreq.docId;    final int fieldId=termFreq.fieldId;    for (    Map.Entry<String,ITermMetadata> e : termFreq.terms.entrySet()) {      final String termText=e.getKey();      final ITermMetadata termMetadata=e.getValue();      final ITermDocRecord<V> rec=new ReadOnlyTermDocRecord<V>(termText,docId,fieldId,termMetadata.getLocalTermWeight());      final byte[] key=tupleSer.serializeKey(rec);      final byte[] val=tupleSer.serializeVal(rec);      if (log.isDebugEnabled()) {        log.debug("{" + termText + ","+ docId+ ","+ fieldId+ "}: #occurences="+ termMetadata.termFreq()+ ", termWeight="+ termMetadata.getLocalTermWeight());      }      a[n++]=new KV(key,val);    }  }  assert n == nterms : "ntokens=" + nterms + ", n="+ n;  Arrays.sort(a);  final byte[][] keys=new byte[nterms][];  final byte[][] vals=new byte[nterms][];  for (int i=0; i < nterms; i++) {    keys[i]=a[i].key;    vals[i]=a[i].val;  }  writeOnIndex(n,keys,vals);  reset();}  }
class C{  public CartSizeSpinnerAdapter(Context context,List<ProductVariant> sizes){  super(context,layoutID,sizes);  this.sizes=sizes;  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  private static boolean hasSelfPermission(Context context,String permission){  try {    return checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;  } catch (  RuntimeException t) {    return false;  }}  }
class C{  static long decodeMin(byte[] b,int dimension){  int offset=dimension * BYTES;  return NumericUtils.sortableBytesToLong(b,offset);}  }
class C{  public boolean queryCache(ImageTask imageTask,CubeImageView imageView){  if (null == mImageProvider) {    return false;  }  BitmapDrawable drawable=mImageProvider.getBitmapFromMemCache(imageTask);  if (imageTask.getStatistics() != null) {    imageTask.getStatistics().s0_afterCheckMemoryCache(drawable != null);  }  if (drawable == null) {    return false;  }  if (DEBUG) {    CLog.d(LOG_TAG,MSG_HIT_CACHE,imageTask,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());  }  imageTask.addImageView(imageView);  imageTask.onLoadTaskFinish(drawable,mImageLoadHandler);  return true;}  }
class C{  public List<BikeRentalStation> findBikeSharesInEnvelope(Envelope env){  List<BikeRentalStation> bikeRentalStations=new ArrayList<>();  if (bikeRentalStationMap != null) {    EdgeStore.Edge e=edgeStore.getCursor();    VertexStore.Vertex v=vertexStore.getCursor();    TIntSet nearbyEdges=spatialIndex.query(VertexStore.envelopeToFixed(env));    nearbyEdges.forEach(null);  }  return bikeRentalStations;}  }
class C{  @Override public String ping(){  return "pong";}  }
class C{  public void testCallMethod() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  MockCallback<Message> fooCallback=new MockCallback<Message>();  MockCallback<Message> barCallback=new MockCallback<Message>();  TestService mockService=control.createMock(TestService.class);  mockService.foo(EasyMock.same(mockController),EasyMock.same(fooRequest),this.<FooResponse>wrapsCallback(fooCallback));  mockService.bar(EasyMock.same(mockController),EasyMock.same(barRequest),this.<BarResponse>wrapsCallback(barCallback));  control.replay();  mockService.callMethod(fooDescriptor,mockController,fooRequest,fooCallback);  mockService.callMethod(barDescriptor,mockController,barRequest,barCallback);  control.verify();}  }
class C{  public void removeModifyListener(ModifyListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  removeListener(SWT.Modify,listener);}  }
class C{  public Object minus(int minimum){  Object value=getValue();  if (value == null) {    if (m_displayType == DisplayType.Integer)     value=new Integer(minimum); else     value=new BigDecimal(minimum);    setValue(value);    return value;  }  if (value instanceof BigDecimal) {    BigDecimal bd=((BigDecimal)value).subtract(Env.ONE);    BigDecimal min=new BigDecimal(minimum);    if (bd.compareTo(min) < 0)     value=min; else     value=bd;  } else {    int i=((Integer)value).intValue();    i--;    if (i < minimum)     i=minimum;    value=new Integer(i);  }  setValue(value);  return value;}  }
class C{  public int size(){  return 5;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of examples to generate (default " + defaultNumExamples() + ")","n",1,"-n <num>"));  return result.elements();}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    throw new NullPointerException();  }  final Segment[] segments=this.segments;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      mcsum+=mc[i]=segments[i].modCount;      if (segments[i].containsValue(value)) {        return true;      }    }    boolean cleanSweep=true;    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        if (mc[i] != segments[i].modCount) {          cleanSweep=false;          break;        }      }    }    if (cleanSweep) {      return false;    }  }  for (int i=0; i < segments.length; ++i) {    segments[i].lock();  }  boolean found=false;  try {    for (int i=0; i < segments.length; ++i) {      if (segments[i].containsValue(value)) {        found=true;        break;      }    }  }  finally {    for (int i=0; i < segments.length; ++i) {      segments[i].unlock();    }  }  return found;}  }
class C{  public void displayMessage(String message){  ua.displayMessage(message);}  }
class C{  private boolean fileExist(String fileName){  String pathToIgnite=downloadFolder + (downloadFolder.endsWith("/") ? "" : '/') + fileName;  return new File(pathToIgnite).exists();}  }
class C{  public boolean hasFailures(){  for (  BulkItemResponse response : responses) {    if (response.isFailed()) {      return true;    }  }  return false;}  }
class C{  public void addRectangle(float lt1,float ln1,float lt2,float ln2,int lType,int nsegs,LinkProperties properties) throws IOException {  LinkRectangle.write(lt1,ln1,lt2,ln2,lType,nsegs,properties,link.dos);}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  private static Typeface createTypeface(Context context,int typefaceValue) throws IllegalArgumentException {  Typeface typeface;switch (typefaceValue) {case ROBOTO_LIGHT:    typeface=Typeface.createFromAsset(context.getAssets(),"fonts/Roboto-Light.ttf");  break;case ROBOTO_REGULAR:typeface=Typeface.createFromAsset(context.getAssets(),"fonts/Roboto-Regular.ttf");break;default :throw new IllegalArgumentException("Unknown `typeface` attribute value " + typefaceValue);}return typeface;}  }
class C{  public void testClearParameters() throws SQLException {  PreparedStatement ps=null;  try {    String query="select * from zoo where id = ? and family=?";    ps=conn.prepareStatement(query);    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sql) {    }    ps.setInt(1,2);    ps.setString(2,"dog");    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sqle) {    }    ps.setInt(1,2);    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sqle) {    }    ps.setInt(1,2);    ps.setString(2,"cat");    try {      ps.execute();    } catch (    SQLException sqle) {      fail("SQLException is thrown during execute method after calling clearParameters() twice");    }  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }}  }
class C{  public void call(final String methodName){  call(methodName,null,null);}  }
class C{  protected void addMessageProcessor(MessageProcessor newMessageProcessor) throws IOException {synchronized (messageProcessors) {    messageProcessors.add(newMessageProcessor);  }}  }
class C{  private static void clearBreadcrumb(Thread t){  String name=t.getName();  int i=name.indexOf(CommonBreadcrumbStart);  if (i >= 0) {    t.setName(name.substring(0,i));  }}  }
class C{  public static boolean equals(byte[] array1,byte[] array2,int length){  if (length < 0) {    throw new IllegalArgumentException();  }  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length < length || array2.length < length) {    return false;  }  for (int i=0; i < length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private void addStrokedView(View view,boolean focused,boolean setBounds){  setCorrectBounds(view);  if (mStrokeCell == null || mStrokeColor != mStrokeColorSelected) {    mStrokeCell=new BitmapDrawable(getResources(),getBitmap(view.getWidth(),view.getHeight(),focused));  }  if (setBounds)   mStrokeCell.setBounds(mStrokeCellCurrentBounds);}  }
class C{  public static byte[] chars2utf(char[] src,int sindex,int len){  byte[] dst=new byte[len * 3];  int len1=chars2utf(src,sindex,dst,0,len);  byte[] result=new byte[len1];  System.arraycopy(dst,0,result,0,len1);  return result;}  }
class C{  Builder fromRoot(ElementMetadata<?,?> root){  this.selectedElement=this.root=Preconditions.checkNotNull(root);  if (steps != null) {    List<MetadataKey<?>> prevSteps=Lists.newArrayList(steps);    steps.clear();    for (    MetadataKey<?> step : prevSteps) {      addStep(step);    }  }  return this;}  }
class C{  private void validateModule(final ModuleBean module,final boolean external){  LEnv.LOGGER.debug("Validating " + module.getName() + "...");  launcherFrame.setStatus(StatusType.PROGRESS,"Validating " + module.getName());  boolean ok=true;  for (  final FileBean file : module.getFileList()) {    Path filePath=Paths.get(file.getPath());    filePath=LEnv.PATH_APP.resolve(filePath.subpath(1,filePath.getNameCount()));    if (!file.getSha256().equals(LUtils.calculateFileSha256(filePath))) {      ok=false;      LEnv.LOGGER.error(module.getName() + " validation failed, " + (Files.exists(filePath) ? "corrupt" : "missing")+ " file: "+ LEnv.PATH_APP.relativize(filePath));      if (module == modules.getLauncherMod() && launcher.isClassPathEntry(file)) {        Sound.beepOnError();        LEnv.LOGGER.error(module.getName() + " validation failed and cannot be repaired! You must download " + module.getName()+ " manually!");        launcherFrame.setStatus(StatusType.ERROR,module.getName() + " validation failed and cannot be repaired! You must download " + module.getName()+ " manually!");        throw new FinishException();      }    }  }  if (ok)   LEnv.LOGGER.debug(module.getName() + " validation OK."); else   updateModule(module,external,true);}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public static String toConvertString(InputStream is){  StringBuffer res=new StringBuffer();  InputStreamReader isr=new InputStreamReader(is);  BufferedReader read=new BufferedReader(isr);  try {    String line;    line=read.readLine();    while (line != null) {      res.append(line);      line=read.readLine();    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (null != isr) {        isr.close();        isr=null;      }      if (null != read) {        read.close();        read=null;      }      if (null != is) {        is.close();        is=null;      }    } catch (    IOException e) {    }  }  return res.toString();}  }
class C{  public void update(float delta){  if (active) {    for (    Component component : this.components) {      component.update(delta);    }    if (getChildren() != null) {      for (      GameObject node : getChildren()) {        node.update(delta);      }    }  }}  }
class C{  public JSONAPIDocument(){}  }
class C{  public void putAll(Map<?,?> t){  if ((t == null) || (t.size() == 0)) {    return;  }  CompositeData[] values;  try {    values=t.values().toArray(new CompositeData[t.size()]);  } catch (  java.lang.ArrayStoreException e) {    throw new ClassCastException("Map argument t contains values which are not instances of <tt>CompositeData</tt>");  }  putAll(values);}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  public static boolean isConstantName(String name){  return Pattern.matches("[\\dA-Z_]+",name);}  }
class C{  public boolean hasUnit(){  return super.hasAttribute(UNIT);}  }
class C{  public void write(ProfileMeasurement prototype,int count,List<Object> group,Function<Object,Object> valueGenerator){  ProfileMeasurement m=prototype;  for (int i=0; i < count; i++) {    ProfilePeriod next=m.getPeriod().next();    m=new ProfileMeasurement(prototype.getProfileName(),prototype.getEntity(),next.getStartTimeMillis(),prototype.getPeriod().getDurationMillis(),TimeUnit.MILLISECONDS);    Object nextValue=valueGenerator.apply(m.getValue());    m.setValue(nextValue);    write(m,group);  }}  }
class C{  public Long registerUserInit(long user_level,long level_id,int availible,int status,String login,String password,String lastname,String firstname,String email,Date age,String street,String additionalname,String fax,String zip,long states_id,String town,long language_id,boolean sendWelcomeMessage,List<Long> organisations,String phone,String baseURL,Boolean sendConfirmation,String sip_user,String sip_pass,String sip_auth,boolean generateSipUserData,String jname_timezone,Boolean forceTimeZoneCheck,String userOffers,String userSearchs,Boolean showContactData,Boolean showContactDataToContacts) throws Exception {  return registerUserInit(user_level,level_id,availible,status,login,password,lastname,firstname,email,age,street,additionalname,fax,zip,states_id,town,language_id,sendWelcomeMessage,organisations,phone,baseURL,sendConfirmation,sip_user,sip_pass,sip_auth,generateSipUserData,omTimeZoneDaoImpl.getOmTimeZone(jname_timezone),forceTimeZoneCheck,userOffers,userSearchs,showContactData,showContactDataToContacts);}  }
class C{  public String drop(String message){  if (messages.isEmpty() || !messages.containsKey(message)) {    return null;  }  int count=messages.get(message) - 1;  if (count == 0) {    messages.remove(message);    if (!loader.getMessage().equals(message)) {      return loader.getMessage();    }    if (!messages.isEmpty()) {      return messages.keySet().iterator().next();    }    return null;  } else {    messages.put(message,count);    return message;  }}  }
class C{  private JavaScriptRelationSets(){}  }
class C{  public float maxS(){  return _maxS;}  }
class C{  @Provides @Named("envFolderPath") @Singleton protected String provideEnvironmentsFolderRelPath(){  return ".codenvy/runners/environments";}  }
class C{  private void validateConnection(){  m_connectionOK=false;  validateAppServer();  DB.closeTarget();  connectToDatabase();  hostField.setDisplay();}  }
class C{  public ThisTypeRefStructural createThisTypeRefStructural(){  ThisTypeRefStructuralImpl thisTypeRefStructural=new ThisTypeRefStructuralImpl();  return thisTypeRefStructural;}  }
class C{  public static PcLocalRunner serializableInstance(){  return new PcLocalRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class type=value.getType();    return validate(node,type);  }  return true;}  }
class C{  public void onConfigurationChanged(Configuration newConfig){}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public static long round(Double number){  return Math.round(number);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void addMatch(Hmmer2HmmPfamSearchRecord methodMatches,Map<String,RawProtein<PIRSFHmmer2RawMatch>> rawResults) throws IOException {  for (  String sequenceId : methodMatches.getSequenceMatches().keySet()) {    Hmmer2HmmPfamSequenceMatch sequenceMatch=methodMatches.getSequenceMatches().get(sequenceId);    for (    Hmmer2HmmPfamDomainMatch domainMatch : sequenceMatch.getDomainMatches()) {      final RawProtein<PIRSFHmmer2RawMatch> rawProtein;      if (rawResults.keySet().contains(methodMatches.getSequenceId())) {        rawProtein=rawResults.get(methodMatches.getSequenceId());      } else {        rawProtein=new RawProtein<PIRSFHmmer2RawMatch>(methodMatches.getSequenceId());        rawResults.put(methodMatches.getSequenceId(),rawProtein);      }      rawProtein.addMatch(new PIRSFHmmer2RawMatch(methodMatches.getSequenceId(),sequenceMatch.getModelAccession(),SignatureLibrary.PIRSF,signatureLibraryRelease,domainMatch.getSeqFrom(),domainMatch.getSeqTo(),sequenceMatch.getEValue(),sequenceMatch.getSequenceScore(),domainMatch.getHmmFrom(),domainMatch.getHmmTo(),domainMatch.getHmmBounds(),domainMatch.getEValue(),domainMatch.getScore()));    }  }}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuffer buffer=new StringBuffer(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("================== %s ======================%n",this.getClass().getSimpleName()));  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("mca_label_dictionary_id = %s%n",this.mca_label_dictionary_id.toString()));  sb.append(String.format("mca_link_id = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.mca_link_id[0],this.mca_link_id[1],this.mca_link_id[2],this.mca_link_id[3],this.mca_link_id[4],this.mca_link_id[5],this.mca_link_id[6],this.mca_link_id[7],this.mca_link_id[8],this.mca_link_id[9],this.mca_link_id[10],this.mca_link_id[11],this.mca_link_id[12],this.mca_link_id[13],this.mca_link_id[14],this.mca_link_id[15]));  sb.append(String.format("mca_tag_symbol = %s%n",this.mca_tag_symbol));  if (this.mca_tag_name != null) {    sb.append(String.format("mca_tag_name = %s%n",this.mca_tag_name));  }  if (this.mca_channel_id != null) {    sb.append(String.format("mca_channel_id = %d%n",this.mca_channel_id));  }  if (this.rfc_5646_spoken_language != null) {    sb.append(String.format("rfc_5646_spoken_language = %s%n",this.rfc_5646_spoken_language));  }  if (this.mca_title != null) {    sb.append(String.format("mca_title = %s%n",this.mca_title));  }  if (this.mca_title_version != null) {    sb.append(String.format("mca_title_version = %s%n",this.mca_title_version));  }  if (this.mca_audio_content_kind != null) {    sb.append(String.format("mca_audio_content_kind = %s%n",this.mca_audio_content_kind));  }  if (this.mca_audio_element_kind != null) {    sb.append(String.format("mca_audio_element_kind = %s%n",this.mca_audio_element_kind));  }  return sb.toString();}  }
class C{  public ProcessDialog(int AD_Process_ID,boolean isSOTrx){  log.info("Process=" + AD_Process_ID);  m_ctx=Env.getCtx();  m_WindowNo=SessionManager.getAppDesktop().registerWindow(this);  this.setAttribute(IDesktop.WINDOWNO_ATTRIBUTE,m_WindowNo);  m_AD_Process_ID=AD_Process_ID;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx",isSOTrx ? "Y" : "N");  try {    initComponents();    init();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public void applyMirroredCorrection(ResultPoint[] points){  if (!mirrored || points == null || points.length < 3) {    return;  }  ResultPoint bottomLeft=points[0];  points[0]=points[2];  points[2]=bottomLeft;}  }
class C{  private boolean updateImages(boolean forceImage){  ResourceManager parentResourceManager=JFaceResources.getResources();  ImageDescriptor image=currentAction.getHoverImageDescriptor();  if (image == null) {    image=currentAction.getImageDescriptor();  }  ImageDescriptor disabledImage=currentAction.getDisabledImageDescriptor();  if (image == null && forceImage) {    image=ImageDescriptor.getMissingImageDescriptor();  }  LocalResourceManager localManager=new LocalResourceManager(parentResourceManager);  widget.setDisabledImage(disabledImage == null ? null : localManager.createImageWithDefault(disabledImage));  widget.setImage(image == null ? null : localManager.createImageWithDefault(image));  disposeOldImages();  imageManager=localManager;  return image != null;}  }
class C{  public static boolean isNotEmpty(float[] array){  return (array != null && array.length != 0);}  }
class C{  public MBeanRule attribute(String attribute){  this.attributes.add(attribute);  return this;}  }
class C{  public optgroup addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void save(){  Path propsPath=getApplicationRootPath().resolve(sPROPERTIES_FILENAME);  OutputStream out=null;  try {    out=new FileOutputStream(propsPath.toString());    String comments="SDRTrunk - SDR Trunking Decoder Application Settings";    mProperties.store(out,comments);  } catch (  Exception e) {    mLog.error("SystemProperties - exception while saving " + "application properties",e);  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void reportReturnCode(String operation,int code){  if (!data.containsKey(operation)) {synchronized (this) {      if (!data.containsKey(operation)) {        data.put(operation,constructOneMeasurement(operation));      }    }  }  data.get(operation).reportReturnCode(code);}  }
class C{  public void reInitializeClassesAfterTestExecution(TestCase executedTestCase,ExecutionResult testCaseResult){  final ExecutionTrace trace=testCaseResult.getTrace();  List<String> classesInitializedDuringTestExecution=trace.getInitializedClasses();  this.addInitializedClasses(classesInitializedDuringTestExecution);  if (initializedClasses.isEmpty()) {    return;  } else {    if (reset_all_observed_classes) {      ClassReInitializeExecutor.getInstance().resetClasses(initializedClasses);    } else {      List<String> classesToReset=new LinkedList<String>();      classesToReset.addAll(trace.getClassesWithStaticWrites());      if (Properties.RESET_STATIC_FIELD_GETS) {        classesToReset.addAll(trace.getClassesWithStaticReads());      }      HashSet<String> moreClassesForReset=getMoreClassesToReset(executedTestCase,testCaseResult);      classesToReset.addAll(moreClassesForReset);      Collections.sort(classesToReset);      ClassLoader loader=null;      if (executedTestCase instanceof DefaultTestCase) {        DefaultTestCase defaultTestCase=(DefaultTestCase)executedTestCase;        ClassLoader changedClassLoader=defaultTestCase.getChangedClassLoader();        if (changedClassLoader != null) {          loader=changedClassLoader;        }      }      if (loader == null) {        ClassReInitializeExecutor.getInstance().resetClasses(classesToReset);      } else {        ClassReInitializeExecutor.getInstance().resetClasses(classesToReset,loader);      }    }  }}  }
class C{  public static org.oscm.internal.vo.VOInstanceInfo convertToUp(org.oscm.vo.VOInstanceInfo oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOInstanceInfo newVO=new org.oscm.internal.vo.VOInstanceInfo();  newVO.setInstanceId(oldVO.getInstanceId());  newVO.setAccessInfo(oldVO.getAccessInfo());  newVO.setBaseUrl(oldVO.getBaseUrl());  newVO.setLoginPath(oldVO.getLoginPath());  return newVO;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE_TYPE;case 2:  return SW_PORT_TUPLE;case 3:return DATA;default :return null;}}  }
class C{  public boolean isFeasible(){  return primal() != null;}  }
class C{  public void calculateDerived(){  xStats.calculateDerived();  yStats.calculateDerived();  differencesStats.calculateDerived();  correlation=Double.NaN;  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);    if (!Utils.eq(yStats.stdDev,0)) {      correlation=slope * xStats.stdDev / yStats.stdDev;    } else {      correlation=1.0;    }  }  if (Utils.gr(differencesStats.stdDev,0)) {    double tval=differencesStats.mean / Math.sqrt((1 / count + m_testTrainRatio) * differencesStats.stdDev * differencesStats.stdDev);    if (count > 1) {      differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);    } else     differencesProbability=1;  } else {    if (differencesStats.sumSq == 0) {      differencesProbability=1.0;    } else {      differencesProbability=0.0;    }  }  differencesSignificance=0;  if (differencesProbability <= sigLevel) {    if (xStats.mean > yStats.mean) {      differencesSignificance=1;    } else {      differencesSignificance=-1;    }  }}  }
class C{  private boolean resourceIsDeploymentDescriptor(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder webInf=WebAppUtilities.getWebInfSrc(project);    if (webInf.exists()) {      if (resource.getParent().equals(webInf)) {        String name=resource.getName();        return name.equals("web.xml") || name.equals("appengine-web.xml");      }    }  }  return false;}  }
class C{  public void pause(){  if (isInitialized()) {    resetSyncParams();    audioTrack.pause();  }}  }
class C{  public String resultProducerTipText(){  return "Set the resultProducer for which learning rate results should be " + "generated.";}  }
class C{  public void cross(long animationDurationMS){  if (mState == FLAG_STATE_CROSS) {    return;  }  toggle(animationDurationMS);}  }
class C{  public GeneralDataCoding(Alphabet alphabet,MessageClass messageClass,boolean compressed) throws IllegalArgumentException {  if (alphabet == null) {    throw new IllegalArgumentException("alphabet is mandatory, can't be null");  }  this.alphabet=alphabet;  this.messageClass=messageClass;  this.compressed=compressed;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public void draw(GasTank leftTank,GasTank rightTank){  if (meets(new ChemicalPairOutput(leftTank.getGas(),rightTank.getGas()))) {    leftTank.draw(leftGas.amount,true);    rightTank.draw(rightGas.amount,true);  } else   if (meets(new ChemicalPairOutput(rightTank.getGas(),leftTank.getGas()))) {    leftTank.draw(rightGas.amount,true);    rightTank.draw(leftGas.amount,true);  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void addBean(String name,BeanDefine beanDefine){  Assert.notNull(name);  Assert.notNull(beanDefine);  if (pool.put(name,beanDefine) != null) {    LOGGER.warn("Duplicated Bean: {}",name);  }}  }
class C{  public IgniteConfiguration(IgniteConfiguration cfg){  assert cfg != null;  discoSpi=cfg.getDiscoverySpi();  commSpi=cfg.getCommunicationSpi();  deploySpi=cfg.getDeploymentSpi();  evtSpi=cfg.getEventStorageSpi();  cpSpi=cfg.getCheckpointSpi();  colSpi=cfg.getCollisionSpi();  failSpi=cfg.getFailoverSpi();  loadBalancingSpi=cfg.getLoadBalancingSpi();  indexingSpi=cfg.getIndexingSpi();  swapSpaceSpi=cfg.getSwapSpaceSpi();  addrRslvr=cfg.getAddressResolver();  allResolversPassReq=cfg.isAllSegmentationResolversPassRequired();  atomicCfg=cfg.getAtomicConfiguration();  binaryCfg=cfg.getBinaryConfiguration();  daemon=cfg.isDaemon();  cacheCfg=cfg.getCacheConfiguration();  cacheKeyCfg=cfg.getCacheKeyConfiguration();  cacheSanityCheckEnabled=cfg.isCacheSanityCheckEnabled();  connectorCfg=cfg.getConnectorConfiguration();  classLdr=cfg.getClassLoader();  clientMode=cfg.isClientMode();  clockSyncFreq=cfg.getClockSyncFrequency();  clockSyncSamples=cfg.getClockSyncSamples();  consistentId=cfg.getConsistentId();  deployMode=cfg.getDeploymentMode();  discoStartupDelay=cfg.getDiscoveryStartupDelay();  failureDetectionTimeout=cfg.getFailureDetectionTimeout();  gridName=cfg.getGridName();  hadoopCfg=cfg.getHadoopConfiguration();  igfsCfg=cfg.getFileSystemConfiguration();  igfsPoolSize=cfg.getIgfsThreadPoolSize();  igniteHome=cfg.getIgniteHome();  igniteWorkDir=cfg.getWorkDirectory();  inclEvtTypes=cfg.getIncludeEventTypes();  includeProps=cfg.getIncludeProperties();  lateAffAssignment=cfg.isLateAffinityAssignment();  lifecycleBeans=cfg.getLifecycleBeans();  locHost=cfg.getLocalHost();  log=cfg.getGridLogger();  lsnrs=cfg.getLocalEventListeners();  marsh=cfg.getMarshaller();  marshLocJobs=cfg.isMarshalLocalJobs();  marshCacheKeepAliveTime=cfg.getMarshallerCacheKeepAliveTime();  marshCachePoolSize=cfg.getMarshallerCacheThreadPoolSize();  mbeanSrv=cfg.getMBeanServer();  metricsHistSize=cfg.getMetricsHistorySize();  metricsExpTime=cfg.getMetricsExpireTime();  metricsLogFreq=cfg.getMetricsLogFrequency();  metricsUpdateFreq=cfg.getMetricsUpdateFrequency();  mgmtPoolSize=cfg.getManagementThreadPoolSize();  netTimeout=cfg.getNetworkTimeout();  nodeId=cfg.getNodeId();  odbcCfg=cfg.getOdbcConfiguration();  p2pEnabled=cfg.isPeerClassLoadingEnabled();  p2pLocClsPathExcl=cfg.getPeerClassLoadingLocalClassPathExclude();  p2pMissedCacheSize=cfg.getPeerClassLoadingMissedResourcesCacheSize();  p2pPoolSize=cfg.getPeerClassLoadingThreadPoolSize();  platformCfg=cfg.getPlatformConfiguration();  pluginCfgs=cfg.getPluginConfigurations();  pubPoolSize=cfg.getPublicThreadPoolSize();  rebalanceThreadPoolSize=cfg.getRebalanceThreadPoolSize();  segChkFreq=cfg.getSegmentCheckFrequency();  segPlc=cfg.getSegmentationPolicy();  segResolveAttempts=cfg.getSegmentationResolveAttempts();  segResolvers=cfg.getSegmentationResolvers();  sndRetryCnt=cfg.getNetworkSendRetryCount();  sndRetryDelay=cfg.getNetworkSendRetryDelay();  sslCtxFactory=cfg.getSslContextFactory();  storeSesLsnrs=cfg.getCacheStoreSessionListenerFactories();  svcCfgs=cfg.getServiceConfiguration();  sysPoolSize=cfg.getSystemThreadPoolSize();  timeSrvPortBase=cfg.getTimeServerPortBase();  timeSrvPortRange=cfg.getTimeServerPortRange();  txCfg=cfg.getTransactionConfiguration();  userAttrs=cfg.getUserAttributes();  utilityCacheKeepAliveTime=cfg.getUtilityCacheKeepAliveTime();  utilityCachePoolSize=cfg.getUtilityCacheThreadPoolSize();  waitForSegOnStart=cfg.isWaitForSegmentOnStart();  warmupClos=cfg.getWarmupClosure();}  }
class C{  protected void waitForInitialSync(){  LOG.i("Registering resource to wait for initial sync.");  EventBusIdlingResource<SyncSucceededEvent> syncSucceededResource=new EventBusIdlingResource<>(UUID.randomUUID().toString(),mEventBus);  Espresso.registerIdlingResources(syncSucceededResource);}  }
class C{  public static UUID parseUuid(byte[] atom){  ParsableByteArray atomData=new ParsableByteArray(atom);  if (!isPsshAtom(atomData,null)) {    return null;  }  atomData.setPosition(Atom.FULL_HEADER_SIZE);  return new UUID(atomData.readLong(),atomData.readLong());}  }
class C{  public String lookString(){switch (kind) {case NORMAL:    return "";case BACKWARD_ACTION:  return "LOOK_BACK";case FIXED_BASE:return "FIXED_BASE";case FIXED_LOOK:return "FIXED_LOOK";case FINITE_CHOICE:return "FINITE_CHOICE";case FORWARD_ACTION:return "LOOK_FORWARD";case GENERAL_LOOK:return "LOOK_ACTION";default :return "unknown lookahead type";}}  }
class C{  public boolean isOneDotThree(){  return jdkVersion == JDK1_3;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testMetaHTMLParsing(){  try {    ParseUtil parser=new ParseUtil(NutchConfiguration.create());    for (int t=0; t < docs.length; t++) {      Content content=getContent(docs[t]);      Parse parse=parser.parse(content).get(content.getUrl());      assertEquals(metalanguages[t],(String)parse.getData().getParseMeta().get(Metadata.LANGUAGE));    }  } catch (  Exception e) {    e.printStackTrace(System.out);    fail(e.toString());  }}  }
class C{  private static MiniAccumuloCluster startMiniAccumulo() throws IOException, InterruptedException, AccumuloException, AccumuloSecurityException {  final File miniDataDir=Files.createTempDir();  final MiniAccumuloCluster accumulo=new MiniAccumuloCluster(miniDataDir,"password");  accumulo.start();  final Instance instance=new ZooKeeperInstance(accumulo.getInstanceName(),accumulo.getZooKeepers());  accumuloConn=instance.getConnector("root",new PasswordToken("password"));  return accumulo;}  }
class C{  public List<Element> append(String name,Collection<String> values){  if (values.isEmpty()) {    Element element=append(name,(String)null);    return Arrays.asList(element);  }  List<Element> elements=new ArrayList<Element>(values.size());  for (  String value : values) {    elements.add(append(name,value));  }  return elements;}  }
class C{  public void cancel(){  timer.stop();  try {    this.dispose();  } catch (  NullPointerException npe) {    return;  }}  }
class C{  public synchronized VisualTable addTable(VisualTable table){  addDataGroup(table.getGroup(),table,table.getParentTable());  table.setVisualization(this);  return table;}  }
class C{  public SpringTransactionManager(@NotNull DataSource dataSource,@NotNull PlatformTransactionManager platformTransactionManager){  this.dataSource=requireNonNull(dataSource);  this.platformTransactionManager=requireNonNull(platformTransactionManager);}  }
class C{  @Override public void search(BayesNet bayesNet,Instances instances) throws Exception {  int nOrder[]=new int[instances.numAttributes()];  nOrder[0]=instances.classIndex();  int nAttribute=0;  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {    if (nAttribute == instances.classIndex()) {      nAttribute++;    }    nOrder[iOrder]=nAttribute++;  }  if (m_bRandomOrder) {    Random random=new Random();    int iClass;    if (getInitAsNaiveBayes()) {      iClass=0;    } else {      iClass=-1;    }    for (int iOrder=0; iOrder < instances.numAttributes(); iOrder++) {      int iOrder2=Math.abs(random.nextInt()) % instances.numAttributes();      if (iOrder != iClass && iOrder2 != iClass) {        int nTmp=nOrder[iOrder];        nOrder[iOrder]=nOrder[iOrder2];        nOrder[iOrder2]=nTmp;      }    }  }  double fBaseScore=calcScore(bayesNet);  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {    int iAttribute=nOrder[iOrder];    double fBestScore=fBaseScore;    boolean bProgress=(bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());    while (bProgress && (bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents())) {      int nBestAttribute=-1;      for (int iOrder2=0; iOrder2 < iOrder; iOrder2++) {        int iAttribute2=nOrder[iOrder2];        double fScore=calcScoreWithExtraParent(iAttribute,iAttribute2);        if (fScore > fBestScore) {          fBestScore=fScore;          nBestAttribute=iAttribute2;        }      }      if (nBestAttribute != -1) {        bayesNet.getParentSet(iAttribute).addParent(nBestAttribute,instances);        fBaseScore=fBestScore;        bProgress=true;      } else {        bProgress=false;      }    }  }}  }
class C{  public boolean willCommit(){  return willCommit;}  }
class C{  public static void dump(PrintServiceAttributeSet psas){  System.out.println("PrintServiceAttributeSet - length=" + psas.size());  Attribute[] ats=psas.toArray();  for (int i=0; i < ats.length; i++)   System.out.println(ats[i].getName() + " = " + ats[i]+ "  ("+ ats[i].getCategory()+ ")");}  }
class C{  private long readUidValidity() throws IOException {  File validityFile=new File(rootFolder,VALIDITY_FILE);  if (!validityFile.exists()) {    return resetUidValidity();  }  FileInputStream fis=null;  InputStreamReader isr=null;  try {    fis=new FileInputStream(validityFile);    isr=new InputStreamReader(fis);    char[] uidValidity=new char[20];    int len=isr.read(uidValidity);    return Long.parseLong(String.valueOf(uidValidity,0,len).trim());  }  finally {    IOUtils.closeQuietly(isr);    IOUtils.closeQuietly(fis);  }}  }
class C{  public void bind(ConversationViewHolder holder,long contactId,long providerId,long accountId,String address,String nickname,int contactType,String message,long messageDate,int presence,String underLineText,boolean showChatMsg,boolean scrolling){  if (nickname == null) {    nickname=address.split("@")[0].split("\\.")[0];  } else {    nickname=nickname.split("@")[0].split("\\.")[0];  }  if (Imps.Contacts.TYPE_GROUP == contactType) {    String groupCountString=getGroupCount(getContext().getContentResolver(),contactId);    nickname+=groupCountString;  }  if (!TextUtils.isEmpty(underLineText)) {    String lowercase=nickname.toLowerCase();    int start=lowercase.indexOf(underLineText.toLowerCase());    if (start >= 0) {      int end=start + underLineText.length();      SpannableString str=new SpannableString(nickname);      str.setSpan(new UnderlineSpan(),start,end,Spannable.SPAN_INCLUSIVE_INCLUSIVE);      holder.mLine1.setText(str);    } else     holder.mLine1.setText(nickname);  } else   holder.mLine1.setText(nickname);  holder.mStatusIcon.setVisibility(View.GONE);  if (holder.mAvatar != null) {    if (Imps.Contacts.TYPE_GROUP == contactType) {      holder.mAvatar.setVisibility(View.VISIBLE);      if (AVATAR_DEFAULT_GROUP == null)       AVATAR_DEFAULT_GROUP=new RoundedAvatarDrawable(BitmapFactory.decodeResource(getResources(),R.drawable.group_chat));      holder.mAvatar.setImageDrawable(AVATAR_DEFAULT_GROUP);    } else {      Drawable avatar=null;      try {        avatar=DatabaseUtils.getAvatarFromAddress(this.getContext().getContentResolver(),address,ImApp.SMALL_AVATAR_WIDTH,ImApp.SMALL_AVATAR_HEIGHT);      } catch (      Exception e) {        Log.e(ImApp.LOG_TAG,"error decoding avatar",e);      }      try {        if (avatar != null) {          if (avatar instanceof RoundedAvatarDrawable)           setAvatarBorder(presence,(RoundedAvatarDrawable)avatar);          holder.mAvatar.setImageDrawable(avatar);        } else {          String letterString=null;          if (nickname.length() > 0)           letterString=nickname.substring(0,1); else           letterString="?";          int color=getAvatarBorder(presence);          int padding=24;          LetterAvatar lavatar=new LetterAvatar(getContext(),color,letterString,padding);          holder.mAvatar.setImageDrawable(lavatar);        }        holder.mAvatar.setVisibility(View.VISIBLE);      } catch (      OutOfMemoryError ome) {      }    }  }  if (showChatMsg && message != null) {    if (holder.mLine2 != null) {      if (SecureMediaStore.isVfsUri(message)) {        FileInfo fInfo=SystemServices.getFileInfoFromURI(getContext(),Uri.parse(message));        if (fInfo.type == null || fInfo.type.startsWith("image")) {          if (holder.mMediaThumb != null) {            holder.mMediaThumb.setVisibility(View.VISIBLE);            if (fInfo.type != null && fInfo.type.equals("image/png")) {              holder.mMediaThumb.setScaleType(ImageView.ScaleType.FIT_CENTER);            } else {              holder.mMediaThumb.setScaleType(ImageView.ScaleType.CENTER_CROP);            }            setThumbnail(getContext().getContentResolver(),holder,Uri.parse(message));            holder.mLine2.setVisibility(View.GONE);          }        } else {          holder.mLine2.setText("");        }      } else       if ((!TextUtils.isEmpty(message)) && message.startsWith("/")) {        String cmd=message.toString().substring(1);        if (cmd.startsWith("sticker")) {          String[] cmds=cmd.split(":");          String mimeTypeSticker="image/png";          Uri mediaUri=Uri.parse("asset://" + cmds[1]);          setThumbnail(getContext().getContentResolver(),holder,mediaUri);          holder.mLine2.setVisibility(View.GONE);          holder.mMediaThumb.setScaleType(ImageView.ScaleType.FIT_CENTER);        }      } else       if ((!TextUtils.isEmpty(message)) && message.startsWith(":")) {        String[] cmds=message.split(":");        try {          String[] stickerParts=cmds[1].split("-");          String stickerPath="stickers/" + stickerParts[0].toLowerCase() + "/"+ stickerParts[1].toLowerCase()+ ".png";          AssetFileDescriptor afd=getContext().getAssets().openFd(stickerPath);          afd.getLength();          afd.close();          Uri mediaUri=Uri.parse("asset://localhost/" + stickerPath);          setThumbnail(getContext().getContentResolver(),holder,mediaUri);          holder.mLine2.setVisibility(View.GONE);          holder.mMediaThumb.setScaleType(ImageView.ScaleType.FIT_CENTER);        } catch (        Exception e) {        }      } else {        if (holder.mMediaThumb != null)         holder.mMediaThumb.setVisibility(View.GONE);        holder.mLine2.setVisibility(View.VISIBLE);        try {          holder.mLine2.setText(android.text.Html.fromHtml(message).toString());        } catch (        RuntimeException re) {        }      }    }    if (messageDate != -1) {      Date dateLast=new Date(messageDate);      holder.mStatusText.setText(sPrettyTime.format(dateLast));    } else {      holder.mStatusText.setText("");    }  } else   if (holder.mLine2 != null) {    holder.mLine2.setText(address);    if (holder.mMediaThumb != null)     holder.mMediaThumb.setVisibility(View.GONE);  }  holder.mLine1.setVisibility(View.VISIBLE);  if (providerId != -1)   getEncryptionState(providerId,accountId,address,holder);}  }
class C{  private static byte CallByteMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallByteMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Byte,false);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void removeGlassPane(Form f,Painter p){  Painter existing=f.getGlassPane();  if (existing == null) {    return;  }  if (existing == p) {    f.setGlassPane(null);    return;  }  if (existing instanceof PainterChain) {    PainterChain pc=(PainterChain)existing;    if (pc.chain.length == 1) {      f.setGlassPane(null);    } else {      Vector v=new Vector();      int plen=pc.chain.length;      for (int iter=0; iter < plen; iter++) {        if (pc.chain[iter] != p) {          v.addElement(pc.chain[iter]);        }      }      if (v.size() == 0) {        f.setGlassPane(null);        return;      }      Painter[] newChain=new Painter[v.size()];      int clen=newChain.length;      for (int iter=0; iter < clen; iter++) {        newChain[iter]=(Painter)v.elementAt(iter);      }      pc.chain=newChain;      f.repaint();    }  }}  }
class C{  public static Element U8(RenderScript rs){  if (rs.mElement_U8 == null) {    rs.mElement_U8=createUser(rs,DataType.UNSIGNED_8);  }  return rs.mElement_U8;}  }
class C{  @Override public boolean parseAlignments(){  return false;}  }
class C{  public static SequenceIndexContainer createBamIndex(final InputStream bam) throws IOException, UnindexableDataException {  final BamReader input=new BamReader(bam);  return createBamIndexInternal(input,input.numReferences(),true);}  }
class C{  private td createTD(Element element){  td td=new td().addElement(element).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP);  td.setColSpan(3);  return td;}  }
class C{  public void fatalError(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  public BooleanIterator(boolean[] primitiveArray){  super(primitiveArray);}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar,String lineEnd){  this.rawWriter=writer;  this.pw=new PrintWriter(writer);  this.separator=separator;  this.quotechar=quotechar;  this.escapechar=escapechar;  this.lineEnd=lineEnd;}  }
class C{  public int add(GL10 gl,Drawable drawable,int minWidth,int minHeight){  return add(gl,drawable,null,null,minWidth,minHeight);}  }
class C{  public ExitAction(){  super("Exit");}  }
class C{  private void add(DimensionIndex index){  flatten.add(index);  lookup.put(index.getAxis(),index);}  }
class C{  void downcase(StringBuffer text,int leng){  for (int i=0; i < leng; i++) {    if (Character.isUpperCase(text.charAt(i))) {      text.setCharAt(i,Character.toLowerCase(text.charAt(i)));    }  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public IntListAdapter(AbstractIntList content){  this.content=content;}  }
class C{  public CharSequence mergeToCharSequence(@NotNull char[] text,int textLength,@NotNull List<? extends TextChange> changes){  return StringFactory.createShared(mergeToCharArray(text,textLength,changes));}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"toString()","Entry");  }  final StringBuilder retStr=new StringBuilder();  retStr.append("ModelMBeanNotificationInfo: ").append(this.getName());  retStr.append(" ; Description: ").append(this.getDescription());  retStr.append(" ; Descriptor: ").append(this.getDescriptor());  retStr.append(" ; Types: ");  String[] nTypes=this.getNotifTypes();  for (int i=0; i < nTypes.length; i++) {    if (i > 0)     retStr.append(", ");    retStr.append(nTypes[i]);  }  return retStr.toString();}  }
class C{  private void resumeDocumentListenerNotification(){  if (fDeferredDocumentEvent != null) {    DocumentEvent event=fDeferredDocumentEvent;    fDeferredDocumentEvent=null;    doFireDocumentChanged(event);  }}  }
class C{  protected OMGraphicList computeGraphics(){  return prepare();}  }
class C{  public InputStream createInputRaw(String filename){  InputStream stream=null;  if (filename == null)   return null;  if (filename.length() == 0) {    return null;  }  if (filename.indexOf(":") != -1) {    try {      URL url=new URL(filename);      HttpURLConnection con=(HttpURLConnection)url.openConnection();      con.setRequestMethod("GET");      con.setDoInput(true);      con.connect();      return con.getInputStream();    } catch (    MalformedURLException mfue) {    }catch (    FileNotFoundException fnfe) {    }catch (    IOException e) {      e.printStackTrace();      return null;    }  }  AssetManager assets=activity.getAssets();  try {    stream=assets.open(filename);    if (stream != null) {      return stream;    }  } catch (  IOException e) {  }  File absFile=new File(filename);  if (absFile.exists()) {    try {      stream=new FileInputStream(absFile);      if (stream != null) {        return stream;      }    } catch (    FileNotFoundException fnfe) {    }  }  File sketchFile=new File(sketchPath(filename));  if (sketchFile.exists()) {    try {      stream=new FileInputStream(sketchFile);      if (stream != null) {        return stream;      }    } catch (    FileNotFoundException fnfe) {    }  }  try {    stream=activity.openFileInput(filename);    if (stream != null) {      return stream;    }  } catch (  FileNotFoundException e) {  }  return null;}  }
class C{  private boolean doAuthentication(UsernamePasswordCredentials credentials){  List<LdapOrADServer> connectedServers=_ldapServers.getConnectedServers();  for (  LdapOrADServer server : connectedServers) {    try {      return doAuthenticationOverSingleServer(server,credentials);    } catch (    CommunicationException e) {      _failureHandler.handle(_ldapServers,server);      _alertLog.error(MessageFormat.format("Connection to LDAP server {0} failed for domain(s) {1}. {2}",Arrays.toString(server.getContextSource().getUrls()),_domains,e.getMessage()));    }  }  throw UnauthorizedException.unauthorized.ldapCommunicationException();}  }
class C{  @Deprecated public void addMacro(Macro macro){  macros.put(macro.getName(),macro);}  }
class C{  public boolean savedPasswordExists(){  return sHaveNonZeroPasswordFile.get();}  }
class C{  public static boolean tryDelete(String path){  try {    FilePath.get(path).delete();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static float calculateTextHeight(float textSizePx){  Paint p=new Paint();  p.setTextSize(textSizePx);  Paint.FontMetrics fm=p.getFontMetrics();  return -fm.top + fm.bottom;}  }
class C{  public static Object fromXml(String str){  return xstream.fromXML(str);}  }
class C{  public void detach(){  if (m_allowDetach) {    if (m_axis > -1)     m_iterator=null;    super.detach();  }}  }
class C{  protected DoubleMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseDoubleMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,this.offset);}  }
class C{  public String removeAllMissingColsTipText(){  return "Remove columns with all missing values.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.730 -0500",hash_original_method="FA58700A4888ED9E658B43737D17A966",hash_generated_method="21972E6A0238BBC5342FCFEFA63E7A08") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void onAnimationRepeat(Animator animation){}  }
class C{  private void updateMonitor(){  m_MonitorLabel.setText(" x " + m_ActiveTasks);  if (m_ActiveTasks > 0 && !m_animating) {    m_MonitorLabel.setIcon(m_iconAnimated);    m_animating=true;  }  if (m_ActiveTasks == 0 && m_animating) {    m_MonitorLabel.setIcon(m_iconStationary);    m_animating=false;  }}  }
class C{  public static double tan(final double a){  double angle=a;  if (USE_JDK_MATH) {    return Math.tan(angle);  }  boolean negateResult=false;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  }  if (angle > TAN_MAX_VALUE_FOR_INT_MODULO) {    angle=remainderPi(angle);    if (angle < 0.0) {      angle=-angle;      negateResult=!negateResult;    }  }  int index=(int)(angle * TAN_INDEXER + 0.5);  double delta=angle - index * TAN_DELTA_HI - index * TAN_DELTA_LO;  index&=2 * (TAN_VIRTUAL_TABS_SIZE - 1) - 1;  if (index > TAN_VIRTUAL_TABS_SIZE - 1) {    index=2 * (TAN_VIRTUAL_TABS_SIZE - 1) - index;    delta=-delta;    negateResult=!negateResult;  }  double result;  if (index < TAN_TABS_SIZE) {    result=MyTTan.tanTab[index] + delta * (MyTTan.tanDer1DivF1Tab[index] + delta * (MyTTan.tanDer2DivF2Tab[index] + delta * (MyTTan.tanDer3DivF3Tab[index] + delta * MyTTan.tanDer4DivF4Tab[index])));  } else {    index=TAN_VIRTUAL_TABS_SIZE - 1 - index;    result=1 / (MyTTan.tanTab[index] - delta * (MyTTan.tanDer1DivF1Tab[index] - delta * (MyTTan.tanDer2DivF2Tab[index] - delta * (MyTTan.tanDer3DivF3Tab[index] - delta * MyTTan.tanDer4DivF4Tab[index]))));  }  return negateResult ? -result : result;}  }
class C{  public boolean isSetName(){  return this.name != null;}  }
class C{  OptionalInt(int value){  this.isPresent=true;  this.value=value;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  nameBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Socket createSocket(String host,int port) throws IOException {  if (proxyLog.isLoggable(Log.BRIEF)) {    proxyLog.log(Log.BRIEF,"host: " + host + ", port: "+ port);  }  if (altFactoryList.size() == 0) {    return initialFactory.createSocket(host,port);  }  RMISocketFactory factory;  factory=successTable.get(host);  if (factory != null) {    if (proxyLog.isLoggable(Log.BRIEF)) {      proxyLog.log(Log.BRIEF,"previously successful factory found: " + factory);    }    return factory.createSocket(host,port);  }  Socket initialSocket=null;  Socket fallbackSocket=null;  final AsyncConnector connector=new AsyncConnector(initialFactory,host,port,AccessController.getContext());  IOException initialFailure=null;  try {synchronized (connector) {      Thread t=java.security.AccessController.doPrivileged(new NewThreadAction(connector,"AsyncConnector",true));      t.start();      try {        long now=System.currentTimeMillis();        long deadline=now + connectTimeout;        do {          connector.wait(deadline - now);          initialSocket=checkConnector(connector);          if (initialSocket != null)           break;          now=System.currentTimeMillis();        } while (now < deadline);      } catch (      InterruptedException e) {        throw new InterruptedIOException("interrupted while waiting for connector");      }    }    if (initialSocket == null)     throw new NoRouteToHostException("connect timed out: " + host);    proxyLog.log(Log.BRIEF,"direct socket connection successful");    return initialSocket;  } catch (  UnknownHostException|NoRouteToHostException e) {    initialFailure=e;  }catch (  SocketException e) {    if (eagerHttpFallback) {      initialFailure=e;    } else {      throw e;    }  } finally {    if (initialFailure != null) {      if (proxyLog.isLoggable(Log.BRIEF)) {        proxyLog.log(Log.BRIEF,"direct socket connection failed: ",initialFailure);      }      for (int i=0; i < altFactoryList.size(); ++i) {        factory=altFactoryList.elementAt(i);        if (proxyLog.isLoggable(Log.BRIEF)) {          proxyLog.log(Log.BRIEF,"trying with factory: " + factory);        }        try (Socket testSocket=factory.createSocket(host,port)){          InputStream in=testSocket.getInputStream();          int b=in.read();        } catch (        IOException ex) {          if (proxyLog.isLoggable(Log.BRIEF)) {            proxyLog.log(Log.BRIEF,"factory failed: ",ex);          }          continue;        }        proxyLog.log(Log.BRIEF,"factory succeeded");        try {          fallbackSocket=factory.createSocket(host,port);        } catch (        IOException ex) {        }        break;      }    }  }synchronized (successTable) {    try {synchronized (connector) {        initialSocket=checkConnector(connector);      }      if (initialSocket != null) {        if (fallbackSocket != null)         fallbackSocket.close();        return initialSocket;      }      connector.notUsed();    } catch (    UnknownHostException|NoRouteToHostException e) {      initialFailure=e;    }catch (    SocketException e) {      if (eagerHttpFallback) {        initialFailure=e;      } else {        throw e;      }    }    if (fallbackSocket != null) {      rememberFactory(host,factory);      return fallbackSocket;    }    throw initialFailure;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.560 -0500",hash_original_method="502912F9C717431C8F131DAFAEA6CFFC",hash_generated_method="50D637142878A0E2645D56388C70D614") public ProtocolCommandSupport(Object source){  __listeners=new ListenerList();  __source=source;}  }
class C{  public static int gridCount(){  return CLASSLOADERS.size();}  }
class C{  public void addTrailer(MovieTrailer obj){  trailer.add(obj);  firePropertyChange(TRAILER,null,trailer);}  }
class C{  @Override public void longWrite(ObjectReference src,Address slot,long value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.longWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  static double area(S2Point a,S2Point b,S2Point c){  final double sa=b.angle(c);  final double sb=c.angle(a);  final double sc=a.angle(b);  final double s=0.5 * (sa + sb + sc);  if (s >= 3e-4) {    double s2=s * s;    double dmin=s - Math.max(sa,Math.max(sb,sc));    if (dmin < 1e-2 * s * s2* s2) {      double area=girardArea(a,b,c);      if (dmin < s * (0.1 * area)) {        return area;      }    }  }  return 4 * Math.atan(Math.sqrt(Math.max(0.0,Math.tan(0.5 * s) * Math.tan(0.5 * (s - sa)) * Math.tan(0.5 * (s - sb))* Math.tan(0.5 * (s - sc)))));}  }
class C{  public static boolean containsIgnoreCase(String[] array,String value){  for (  String str : array) {    if (value == null && str == null)     return true;    if (value != null && value.equalsIgnoreCase(str))     return true;  }  return false;}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {}  }
class C{  @Override public void destroy(Contextual<?> contextual){  getManager().destroy(contextual);}  }
class C{  public static boolean replaceTextEdit(List<TextEditGroup> textEditGroups,TextEdit oldEdit,TextEdit newEdit){  TextEdit parentEdit=oldEdit.getParent();  if (parentEdit != null) {    return replaceTextEdit(parentEdit,oldEdit,newEdit);  }  for (  TextEditGroup group : textEditGroups) {    TextEdit[] edits=group.getTextEdits();    if (!replaceTextEdit(oldEdit,newEdit,edits)) {      return false;    }    group.clearTextEdits();    for (    TextEdit edit : edits) {      group.addTextEdit(edit);    }  }  return true;}  }
class C{  public String varianceCoveredTipText(){  return "Retain enough PC attributes to account for this proportion of variance.";}  }
class C{  public PostscriptWriter(){  super(null);}  }
class C{  public boolean isNextBusinessDay(){  Object oo=get_Value(COLUMNNAME_IsNextBusinessDay);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void statInit(){  fDateFrom.setWidth("97px");  fDateTo.setWidth("97px");  fAmtFrom.getDecimalbox().setWidth("90px");  fAmtTo.getDecimalbox().setWidth("90px");  fDateFrom.setAttribute("zk_component_ID","Lookup_Criteria_DateFrom");  fDateFrom.addEventListener(Events.ON_CHANGE,this);  fDateTo.setAttribute("zk_component_ID","Lookup_Criteria_DateTo");  fDateTo.addEventListener(Events.ON_CHANGE,this);  fAmtFrom.setAttribute("zk_component_ID","Lookup_Criteria_AmtFrom");  fAmtFrom.addEventListener(Events.ON_CHANGE,this);  fAmtTo.setAttribute("zk_component_ID","Lookup_Criteria_AmtTo");  fAmtTo.addEventListener(Events.ON_CHANGE,this);  SimpleDateFormat dateFormat=DisplayType.getDateFormat(DisplayType.Date,AEnv.getLanguage(Env.getCtx()));  fDateFrom.setFormat(dateFormat.toPattern());  fDateTo.setFormat(dateFormat.toPattern());  DecimalFormat format=DisplayType.getNumberFormat(DisplayType.Amount,AEnv.getLanguage(Env.getCtx()));  fAmtFrom.getDecimalbox().setFormat(format.toPattern());  fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());  fAmtTo.getDecimalbox().setFormat(format.toPattern());  fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());  fCash_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,p_TabNo,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_Cash_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"C_Cash_ID"),"",false,false,true);  fCash_ID.addValueChangeListener(this);  fCash_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_Cash_ID");  fCashBook_ID=new WTableDirEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_CashBook_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"C_CashBook_ID"),"",false,false,true);  fCashBook_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fCashBook_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_CashBook_ID");  fCashBook_ID.getComponent().setWidth("100%");  fInvoice_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Invoice_ID),DisplayType.Search),Msg.translate(Env.getCtx(),"C_Invoice_ID"),"",false,false,true);  fInvoice_ID.addValueChangeListener(this);  fInvoice_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_Invoice_ID");  fPayment_ID=new WSearchEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Payment_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"C_Payment_ID"),"",false,false,true);  fPayment_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_Payment_ID");  fBankAccount_ID=new WTableDirEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_BankAccount_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"C_BankAccount_ID"),"",false,false,true);  fBankAccount_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fBankAccount_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BankAccount_ID");  fBankAccount_ID.getComponent().setWidth("100%");  fCharge_ID=new WTableDirEditor(MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Charge_ID),DisplayType.TableDir),Msg.translate(Env.getCtx(),"C_Charge_ID"),"",false,false,true);  fCharge_ID.getComponent().addEventListener(Events.ON_CHANGE,this);  fCharge_ID.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_Charge_ID");  fCharge_ID.getComponent().setWidth("100%");  cbAbsolute.setLabel(Msg.translate(Env.getCtx(),"AbsoluteAmt"));  cbAbsolute.addEventListener(Events.ON_CHECK,this);  cbAbsolute.setAttribute("zk_component_ID","Lookup_Criteria_AbsoluteAmt");  Rows rows=new Rows();  Row row=new Row();  rows.appendChild(row);  row.appendChild(fCashBook_ID.getLabel().rightAlign());  row.appendChild(fCashBook_ID.getComponent());  row.appendChild(fCash_ID.getLabel().rightAlign());  row.appendChild(fCash_ID.getComponent());  row=new Row();  rows.appendChild(row);  row.appendChild(fInvoice_ID.getLabel().rightAlign());  row.appendChild(fInvoice_ID.getComponent());  row.appendChild(fPayment_ID.getLabel().rightAlign());  row.appendChild(fPayment_ID.getComponent());  row=new Row();  rows.appendChild(row);  row.appendChild(fBankAccount_ID.getLabel().rightAlign());  row.appendChild(fBankAccount_ID.getComponent());  row.appendChild(lDateFrom.rightAlign());  Hbox hbox=new Hbox();  hbox.appendChild(fDateFrom);  hbox.appendChild(lDateTo);  hbox.appendChild(fDateTo);  row.appendChild(hbox);  row=new Row();  rows.appendChild(row);  row.appendChild(fCharge_ID.getLabel().rightAlign());  row.appendChild(fCharge_ID.getComponent());  row.appendChild(lAmtFrom.rightAlign());  hbox=new Hbox();  hbox.appendChild(fAmtFrom);  hbox.appendChild(lAmtTo);  hbox.appendChild(fAmtTo);  hbox.appendChild(cbAbsolute);  row.appendChild(hbox);  p_criteriaGrid.appendChild(rows);  super.setSizes();}  }
class C{  public void free(final long laddr,final int sze,final IAllocationContext context){  assertOpen();  final int addr=(int)laddr;switch (addr) {case 0:case -1:case -2:    return;}m_allocationWriteLock.lock();try {  checkContext(context);  if (m_lockAddresses != null && m_lockAddresses.containsKey((int)laddr))   throw new IllegalStateException("address locked: " + laddr);  if (sze > m_maxFixedAlloc - 4) {    freeBlob(addr,sze,context);  } else {    final FixedAllocator alloc=getBlockByAddress(addr);    if (m_minReleaseAge == 0) {      if (context != null && context.isIsolated()) {        if (alloc.canImmediatelyFree(addr,sze,context)) {          immediateFree(addr,sze,true);        } else {          getContextAllocation(context).deferFree(encodeAddr(addr,sze));        }      } else       if (this.isSessionProtected()) {        immediateFree(addr,sze,false);      } else {        immediateFree(addr,sze);      }    } else     if (context != null && (context.isIsolated()) && alloc.canImmediatelyFree(addr,sze,context)) {      immediateFree(addr,sze);    } else {      boolean alwaysDefer=m_activeTxCount > 0;      if (!alwaysDefer)       alwaysDefer=context == null && !m_contexts.isEmpty();      if (alwaysDefer)       if (log.isDebugEnabled())       log.debug("Should defer " + addr + " real: "+ physicalAddress(addr));      if (alwaysDefer || !alloc.canImmediatelyFree(addr,sze,context)) {        if (context != null && context.isIsolated()) {          getContextAllocation(context).deferFree(encodeAddr(addr,sze));        } else {          deferFree(addr,sze);        }      } else {        immediateFree(addr,sze);      }    }  }}  finally {  m_allocationWriteLock.unlock();}}  }
class C{  public String replaceMissingValuesTipText(){  return "If set the filter uses weka.filters.unsupervised.attribute.ReplaceMissingValues" + " to replace the missing values";}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (derivedFeatureID) {case GamlPackage.SDECLARATION__NAME:      return GamlPackage.GAML_DEFINITION__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public T caseTag(Tag object){  return null;}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  public static RegistrarContact makeRegistrarContact2(){  return new RegistrarContact.Builder().setParent(makeRegistrar2()).setName("John Doe").setEmailAddress("johndoe@theregistrar.com").setPhoneNumber("+1.1234567890").setTypes(ImmutableSet.of(RegistrarContact.Type.ADMIN)).setGaeUserId(THE_REGISTRAR_GAE_USER_ID).build();}  }
class C{  public static void show(Context context,String message,Object... args){  show(context,String.format(context.getResources().getConfiguration().locale,message,args));}  }
class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(count);  s.writeObject(value);}  }
class C{  public DOMSignatureProperties(List<? extends SignatureProperty> properties,String id){  if (properties == null) {    throw new NullPointerException("properties cannot be null");  } else   if (properties.isEmpty()) {    throw new IllegalArgumentException("properties cannot be empty");  } else {    this.properties=Collections.unmodifiableList(new ArrayList<SignatureProperty>(properties));    for (int i=0, size=this.properties.size(); i < size; i++) {      if (!(this.properties.get(i) instanceof SignatureProperty)) {        throw new ClassCastException("properties[" + i + "] is not a valid type");      }    }  }  this.id=id;}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private synchronized boolean isPaintingThread(){  return (Thread.currentThread() == paintThread);}  }
class C{  public Node(){  super();}  }
class C{  private long readUntil(long pos) throws IOException {  if (pos < length) {    return pos;  }  if (foundEOF) {    return length;  }  long len=pos - length;  cache.seek(length);  while (len > 0) {    int nbytes=stream.read(buf,0,(int)Math.min(len,(long)BUFFER_LENGTH));    if (nbytes == -1) {      foundEOF=true;      return length;    }    cache.write(buf,0,nbytes);    len-=nbytes;    length+=nbytes;  }  return pos;}  }
class C{  public void resetTime(){  time=0;}  }
class C{  private void orthes(){  int low=0;  int high=n - 1;  for (int m=low + 1; m <= high - 1; m++) {    double scale=0.0;    for (int i=m; i <= high; i++) {      scale=scale + Math.abs(H[i][m - 1]);    }    if (scale != 0.0) {      double h=0.0;      for (int i=high; i >= m; i--) {        ort[i]=H[i][m - 1] / scale;        h+=ort[i] * ort[i];      }      double g=Math.sqrt(h);      if (ort[m] > 0) {        g=-g;      }      h=h - ort[m] * g;      ort[m]=ort[m] - g;      for (int j=m; j < n; j++) {        double f=0.0;        for (int i=high; i >= m; i--) {          f+=ort[i] * H[i][j];        }        f=f / h;        for (int i=m; i <= high; i++) {          H[i][j]-=f * ort[i];        }      }      for (int i=0; i <= high; i++) {        double f=0.0;        for (int j=high; j >= m; j--) {          f+=ort[j] * H[i][j];        }        f=f / h;        for (int j=m; j <= high; j++) {          H[i][j]-=f * ort[j];        }      }      ort[m]=scale * ort[m];      H[m][m - 1]=scale * g;    }  }  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      V[i][j]=(i == j ? 1.0 : 0.0);    }  }  for (int m=high - 1; m >= low + 1; m--) {    if (H[m][m - 1] != 0.0) {      for (int i=m + 1; i <= high; i++) {        ort[i]=H[i][m - 1];      }      for (int j=m; j <= high; j++) {        double g=0.0;        for (int i=m; i <= high; i++) {          g+=ort[i] * V[i][j];        }        g=(g / ort[m]) / H[m][m - 1];        for (int i=m; i <= high; i++) {          V[i][j]+=g * ort[i];        }      }    }  }}  }
class C{  public ProgramDiagnosticDataType clone(){  ProgramDiagnosticDataType result=new ProgramDiagnosticDataType();  result.CreateSessionId=CreateSessionId;  result.CreateClientName=CreateClientName;  result.InvocationCreationTime=InvocationCreationTime;  result.LastTransitionTime=LastTransitionTime;  result.LastMethodCall=LastMethodCall;  result.LastMethodSessionId=LastMethodSessionId;  if (LastMethodInputArguments != null) {    result.LastMethodInputArguments=new Argument[LastMethodInputArguments.length];    for (int i=0; i < LastMethodInputArguments.length; i++)     result.LastMethodInputArguments[i]=LastMethodInputArguments[i].clone();  }  if (LastMethodOutputArguments != null) {    result.LastMethodOutputArguments=new Argument[LastMethodOutputArguments.length];    for (int i=0; i < LastMethodOutputArguments.length; i++)     result.LastMethodOutputArguments[i]=LastMethodOutputArguments[i].clone();  }  result.LastMethodCallTime=LastMethodCallTime;  result.LastMethodReturnStatus=LastMethodReturnStatus == null ? null : LastMethodReturnStatus.clone();  return result;}  }
class C{  public void testAddKeyArgument() throws Exception {  final PyKeywordArgument classKeyword=myGenerator.createKeywordArgument(myLanguagelevel,"metaclass","ABCMeta");  final PyKeywordArgument functionKeyword=myGenerator.createKeywordArgument(myLanguagelevel,"new_param","spam");  doTest(classKeyword,functionKeyword);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.IMPORT_DECLARATION__IMPORT_SPECIFIERS:    return ((InternalEList<?>)getImportSpecifiers()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static FXGResourceResolver createDefaultResourceResolver(){  return new FileResolver();}  }
class C{  private List<LocalizedResource> search(Long key,String locale,List<LocalizedResource> queryResult){  List<LocalizedResource> result=new ArrayList<>();  for (  LocalizedResource localizedResource : queryResult) {    if (localizedResource.getObjectKey() == key.longValue() && localizedResource.getLocale().equals(locale)) {      result.add(localizedResource);    }  }  return result;}  }
class C{  protected int assertLineTerminates(int c) throws IOException, RDFParseException {  c=reader.read();  c=skipWhitespace(c);  if (c != -1 && c != '\r' && c != '\n') {    reportFatalError("Content after '.' is not allowed");  }  return c;}  }
class C{  public ProblemStub(int numberOfObjectives){  super(0,numberOfObjectives,0);}  }
class C{  public static String toDelimitedString(Object[] array,String delimiter){  StringBuilder result=new StringBuilder(100);  if (array != null && array.length != 0) {    for (int i=0; i < array.length; i++) {      result.append(array[i].toString());      if (i < array.length - 1) {        result.append(delimiter);      }    }  }  return result.toString();}  }
class C{  public Boolean isDot1X(){  return dot1X;}  }
class C{  protected void sendOnOffCommand(int newState){  if (log.isDebugEnabled()) {    log.debug("start sendOnOff(" + newState + ") Current: "+ mState);  }  int command1;  if (newState == ON) {    command1=Constants.CMD_LIGHT_ON_FAST;  } else   if (newState == OFF) {    command1=Constants.CMD_LIGHT_OFF_FAST;  } else {    log.warn("illegal state requested for Light: " + getSystemName());    return;  }  if (log.isDebugEnabled()) {    log.debug("set state " + newState + " "+ getSystemName());  }  InsteonSequence out=new InsteonSequence();  out.addFunction(idhighbyte,idmiddlebyte,idlowbyte,Constants.FUNCTION_REQ_STD,Constants.FLAG_STD,command1,0);  tc.sendInsteonSequence(out,null);  if (log.isDebugEnabled()) {    log.debug("end sendOnOff(" + newState + ")  insteon "+ StringUtil.twoHexFromInt(idhighbyte)+ "."+ StringUtil.twoHexFromInt(idmiddlebyte)+ "."+ StringUtil.twoHexFromInt(idlowbyte)+ " cmd1: "+ command1);  }}  }
class C{  public String sqlAD_getTableEntityType(String vendorName,String catalogName,String schemaName,String tableName){  String searchTableName="AD_Table";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("TableName");  columnNames.add("EntityType");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("TABLE_NAME");  aliasNames.add("ENTITY_TYPE");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("UPPER(t.name) = '").append(tableName.toUpperCase()).append("'").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public void draw(){  GLES20.glUseProgram(getProgram());  int positionHandle=GLES20.glGetAttribLocation(getProgram(),VERTEX_POSITION);  GLES20.glEnableVertexAttribArray(positionHandle);  GLES20.glVertexAttribPointer(positionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,COORDS_PER_VERTEX * SIZE_OF_FLOAT,vertexBuffer);  int colorHandle=GLES20.glGetUniformLocation(getProgram(),VERTEX_COLOR);  GLES20.glUniform4fv(colorHandle,1,getColor(),0);  GLES20.glDrawElements(GLES20.GL_TRIANGLE_FAN,shortBuffer.capacity(),GLES20.GL_UNSIGNED_SHORT,shortBuffer);  GLES20.glDisableVertexAttribArray(positionHandle);}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuffer sb=new StringBuffer();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public void testAwaitTermination_timesOut() throws InterruptedException {  ForkJoinPool p=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    assertFalse(p.isTerminated());    assertFalse(p.awaitTermination(Long.MIN_VALUE,NANOSECONDS));    assertFalse(p.awaitTermination(Long.MIN_VALUE,MILLISECONDS));    assertFalse(p.awaitTermination(-1L,NANOSECONDS));    assertFalse(p.awaitTermination(-1L,MILLISECONDS));    assertFalse(p.awaitTermination(0L,NANOSECONDS));    assertFalse(p.awaitTermination(0L,MILLISECONDS));    long timeoutNanos=999999L;    long startTime=System.nanoTime();    assertFalse(p.awaitTermination(timeoutNanos,NANOSECONDS));    assertTrue(System.nanoTime() - startTime >= timeoutNanos);    assertFalse(p.isTerminated());    startTime=System.nanoTime();    long timeoutMillis=timeoutMillis();    assertFalse(p.awaitTermination(timeoutMillis,MILLISECONDS));    assertTrue(millisElapsedSince(startTime) >= timeoutMillis);    assertFalse(p.isTerminated());    p.shutdown();    assertTrue(p.awaitTermination(LONG_DELAY_MS,MILLISECONDS));    assertTrue(p.isTerminated());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public synchronized BlockingQueue<T> buildBlockingQueue(){  checkMemoryManager();  OffHeapBlockingQueue<T> queue=new OffHeapBlockingQueue<T>(memoryManager,capacity,serializer);  return queue;}  }
class C{  @Override public void printErrorMessage(final String message){  printErrorMessage(message,preferenceStore.getBoolean(UIPreferenceConstants.CONSOLE_SHOW_ON_NEW_ERROR));}  }
class C{  public InvalidCredentialsException(){  super();}  }
class C{  public void done(){  CountDownLatch latch=this.latch;  latch.countDown();}  }
class C{  public static void upDateCountersTreatZeroAsMissing(ArrayList<LabeledItemSet> itemSets,Instances instancesNoClass,Instances instancesClass){  for (int i=0; i < instancesNoClass.numInstances(); i++) {    Enumeration<LabeledItemSet> enu=new WekaEnumeration<LabeledItemSet>(itemSets);    while (enu.hasMoreElements()) {      enu.nextElement().upDateCounterTreatZeroAsMissing(instancesNoClass.instance(i),instancesClass.instance(i));    }  }}  }
class C{  public ConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node parentNode;  String parentName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  parentNode=employeeNode.getParentNode();  parentName=parentNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",parentName);  } else {    assertEquals("nodeParentNodeAssert1","staff",parentName);  }}  }
class C{  public boolean resetAttribute(AbstractElement elt,String ns,String prefix,String ln){  String val=(String)values.get(ns,ln);  if (val == null) {    return false;  }  if (prefix != null) {    ln=prefix + ':' + ln;  }  elt.setUnspecifiedAttribute(ns,ln,val);  return true;}  }
class C{  public HostAddress(String fqdn){  if (fqdn == null)   throw new IllegalArgumentException("FQDN is null");  if (fqdn.charAt(fqdn.length() - 1) == '.') {    this.fqdn=fqdn.substring(0,fqdn.length() - 1);  } else {    this.fqdn=fqdn;  }  this.port=5222;}  }
class C{  public static double kurtosis(double moment4,double standardDeviation){  return -3 + moment4 / (standardDeviation * standardDeviation * standardDeviation* standardDeviation);}  }
class C{  private void disableRemovedAutoTieringPolicies(Set<String> discoveredPolicyIds,URI systemURI){  List<AutoTieringPolicy> disabledPolicies=new ArrayList<>();  URIQueryResultList queryResults=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceFASTPolicyConstraint(systemURI),queryResults);  Iterator<URI> queryResultsIter=queryResults.iterator();  while (queryResultsIter.hasNext()) {    URI autoTieringPolicyURI=queryResultsIter.next();    AutoTieringPolicy autoTieringPolicy=_dbClient.queryObject(AutoTieringPolicy.class,autoTieringPolicyURI);    if ((autoTieringPolicy != null) && (!discoveredPolicyIds.contains(autoTieringPolicy.getPolicyName()))) {      autoTieringPolicy.setPolicyEnabled(false);      autoTieringPolicy.setPools(new StringSet());      autoTieringPolicy.setInactive(true);      disabledPolicies.add(autoTieringPolicy);    }  }  _dbClient.updateObject(disabledPolicies);}  }
class C{  LazyProjectDescriptionHandle(URI location,boolean archive,Provider<XtextResourceSet> resourceSetProvider){  this.location=location;  this.archive=archive;  this.resourceSetProvider=resourceSetProvider;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:11.440 -0500",hash_original_method="929FEA5C59B893442F4AD64A16378707",hash_generated_method="22943E4CDBF792E0F208BA9E8C0BB83A") public NinePatchDrawable(Resources res,Bitmap bitmap,byte[] chunk,Rect padding,String srcName){  this(new NinePatchState(new NinePatch(bitmap,chunk,srcName),padding),res);  mNinePatchState.mTargetDensity=mTargetDensity;}  }
class C{  @Override public void onIinLookupComplete(IinDetailsResponse response){  iinLookupPending=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:19.573 -0500",hash_original_method="50013D1BFDE90D48B77E5308F2555E14",hash_generated_method="C8184D0A3CCC7B7E4EB18A24673D33BD") public static ApnSetting fromString(String data){  if (data == null)   return null;  int version;  if (data.matches(V2_FORMAT_REGEX + ".*")) {    version=2;    data=data.replaceFirst(V2_FORMAT_REGEX,"");  } else {    version=1;  }  String[] a=data.split("\\s*,\\s*");  if (a.length < 14) {    return null;  }  int authType;  try {    authType=Integer.parseInt(a[12]);  } catch (  Exception e) {    authType=0;  }  String[] typeArray;  String protocol, roamingProtocol;  boolean carrierEnabled;  int bearer;  if (version == 1) {    typeArray=new String[a.length - 13];    System.arraycopy(a,13,typeArray,0,a.length - 13);    protocol=RILConstants.SETUP_DATA_PROTOCOL_IP;    roamingProtocol=RILConstants.SETUP_DATA_PROTOCOL_IP;    carrierEnabled=true;    bearer=0;  } else {    if (a.length < 18) {      return null;    }    typeArray=a[13].split("\\s*\\|\\s*");    protocol=a[14];    roamingProtocol=a[15];    try {      carrierEnabled=Boolean.parseBoolean(a[16]);    } catch (    Exception e) {      carrierEnabled=true;    }    bearer=Integer.parseInt(a[17]);  }  return new ApnSetting(-1,a[10] + a[11],a[0],a[1],a[2],a[3],a[7],a[8],a[9],a[4],a[5],authType,typeArray,protocol,roamingProtocol,carrierEnabled,bearer);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void initGUI(){  setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  labelStatsExp=new JLabel(MetaDataStatisticsViewer.ICON_ARROW_DOWN,SwingConstants.RIGHT);  gbc.gridx=0;  gbc.gridy=0;  gbc.insets=new Insets(3,10,3,10);  gbc.anchor=GridBagConstraints.WEST;  gbc.weighty=1.0;  gbc.gridheight=2;  add(labelStatsExp,gbc);  panelAttName=new JPanel();  panelAttName.setLayout(new BoxLayout(panelAttName,BoxLayout.PAGE_AXIS));  panelAttName.setOpaque(false);  panelAttName.setBorder(BorderFactory.createMatteBorder(0,0,0,1,Color.LIGHT_GRAY));  labelAttHeader=new JLabel(LABEL_DOTS);  labelAttHeader.setFont(labelAttHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelAttHeader.setForeground(Color.GRAY);  panelAttName.add(labelAttHeader);  labelAttName=new JLabel(LABEL_DOTS);  labelAttName.setFont(labelAttName.getFont().deriveFont(Font.BOLD,FONT_SIZE_LABEL_VALUE));  labelAttName.setMinimumSize(DIMENSION_LABEL_ATTRIBUTE);  labelAttName.setPreferredSize(DIMENSION_LABEL_ATTRIBUTE);  panelAttName.add(labelAttName);  gbc.gridx+=1;  gbc.insets=new Insets(3,5,3,10);  gbc.anchor=GridBagConstraints.CENTER;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.weightx=0.0;  gbc.weighty=1.0;  gbc.gridheight=2;  add(panelAttName,gbc);  gbc.gridx+=1;  gbc.insets=new Insets(5,15,5,10);  labelAttType=new JLabel(LABEL_DOTS);  labelAttType.setMinimumSize(DIMENSION_LABEL_TYPE);  labelAttType.setPreferredSize(DIMENSION_LABEL_TYPE);  add(labelAttType,gbc);  JPanel panelStatsMissing=new JPanel();  panelStatsMissing.setLayout(new BoxLayout(panelStatsMissing,BoxLayout.PAGE_AXIS));  panelStatsMissing.setOpaque(false);  labelStatsMissing=new JLabel(LABEL_DOTS);  labelStatsMissing.setMinimumSize(DIMENSION_LABEL_MISSINGS);  labelStatsMissing.setPreferredSize(DIMENSION_LABEL_MISSINGS);  panelStatsMissing.add(labelStatsMissing);  gbc.gridx+=1;  gbc.fill=GridBagConstraints.NONE;  gbc.weightx=0.0;  add(panelStatsMissing,gbc);  JPanel chartPanel=new JPanel(new BorderLayout());  chartPanel.setBackground(COLOR_TRANSPARENT);  chartPanel.setOpaque(false);  listOfChartPanels.add(chartPanel);  updateVisibilityOfChartPanels();  gbc.fill=GridBagConstraints.NONE;  gbc.weighty=0.0;  gbc.insets=new Insets(0,10,0,10);  for (  JPanel panel : listOfChartPanels) {    gbc.gridx+=1;    add(panel,gbc);  }  String constructionLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.construction.label");  panelStatsConstruction=new JPanel();  panelStatsConstruction.setLayout(new BoxLayout(panelStatsConstruction,BoxLayout.PAGE_AXIS));  panelStatsConstruction.setOpaque(false);  panelStatsConstruction.setVisible(false);  JLabel labelConstructionHeader=new JLabel(constructionLabel);  labelConstructionHeader.setFont(labelConstructionHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelConstructionHeader.setForeground(Color.GRAY);  panelStatsConstruction.add(labelConstructionHeader);  labelStatsConstruction=new JLabel(LABEL_DOTS);  labelStatsConstruction.setFont(labelStatsConstruction.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  labelStatsConstruction.setMinimumSize(DIMENSION_LABEL_CONSTRUCTION);  labelStatsConstruction.setPreferredSize(DIMENSION_LABEL_CONSTRUCTION);  panelStatsConstruction.add(labelStatsConstruction);  gbc.gridx+=1;  gbc.fill=GridBagConstraints.NONE;  gbc.weightx=0.0;  add(panelStatsConstruction,gbc);  cardStatsPanel=new JPanel();  cardStatsPanel.setOpaque(false);  cardLayout=new CardLayout();  cardStatsPanel.setLayout(cardLayout);  JPanel statsNumPanel=new JPanel();  GridBagLayout layout=new GridBagLayout();  GridBagConstraints gbcStatPanel=new GridBagConstraints();  statsNumPanel.setLayout(layout);  statsNumPanel.setOpaque(false);  String avgLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.avg.label");  String devianceLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.variance.label");  String minLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.min.label");  String maxLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.max.label");  JPanel panelStatsMin=new JPanel();  panelStatsMin.setLayout(new BoxLayout(panelStatsMin,BoxLayout.PAGE_AXIS));  panelStatsMin.setOpaque(false);  JLabel labelMinHeader=new JLabel(minLabel);  labelMinHeader.setFont(labelMinHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelMinHeader.setForeground(Color.GRAY);  panelStatsMin.add(labelMinHeader);  labelStatsMin=new JLabel(LABEL_DOTS);  labelStatsMin.setFont(labelStatsMin.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  listOfNumStatPanels.add(panelStatsMin);  panelStatsMin.add(labelStatsMin);  JPanel panelStatsMax=new JPanel();  panelStatsMax.setLayout(new BoxLayout(panelStatsMax,BoxLayout.PAGE_AXIS));  panelStatsMax.setOpaque(false);  JLabel labelMaxHeader=new JLabel(maxLabel);  labelMaxHeader.setFont(labelMaxHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelMaxHeader.setForeground(Color.GRAY);  panelStatsMax.add(labelMaxHeader);  labelStatsMax=new JLabel(LABEL_DOTS);  labelStatsMax.setFont(labelStatsMax.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  listOfNumStatPanels.add(panelStatsMax);  panelStatsMax.add(labelStatsMax);  JPanel panelStatsAvg=new JPanel();  panelStatsAvg.setLayout(new BoxLayout(panelStatsAvg,BoxLayout.PAGE_AXIS));  panelStatsAvg.setOpaque(false);  JLabel labelAvgHeader=new JLabel(avgLabel);  labelAvgHeader.setFont(labelAvgHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelAvgHeader.setForeground(Color.GRAY);  panelStatsAvg.add(labelAvgHeader);  labelStatsAvg=new JLabel(LABEL_DOTS);  labelStatsAvg.setFont(labelStatsAvg.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  listOfNumStatPanels.add(panelStatsAvg);  panelStatsAvg.add(labelStatsAvg);  JPanel panelStatsDeviance=new JPanel();  panelStatsDeviance.setLayout(new BoxLayout(panelStatsDeviance,BoxLayout.PAGE_AXIS));  panelStatsDeviance.setOpaque(false);  JLabel labelDevianceHeader=new JLabel(devianceLabel);  labelDevianceHeader.setFont(labelDevianceHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelDevianceHeader.setForeground(Color.GRAY);  panelStatsDeviance.add(labelDevianceHeader);  labelStatsDeviation=new JLabel(LABEL_DOTS);  labelStatsDeviation.setFont(labelStatsDeviation.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsDeviance.add(labelStatsDeviation);  listOfAdditionalNumStatPanels.add(panelStatsDeviance);  listOfNumStatPanels.add(panelStatsDeviance);  updateVisibilityOfNumStatPanels();  gbcStatPanel.gridx=0;  gbcStatPanel.weightx=0.0;  gbcStatPanel.fill=GridBagConstraints.NONE;  gbcStatPanel.insets=new Insets(0,0,0,6);  panelStatsMin.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE);  statsNumPanel.add(panelStatsMin,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsMax.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE);  statsNumPanel.add(panelStatsMax,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsAvg.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE);  statsNumPanel.add(panelStatsAvg,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsDeviance.setPreferredSize(DIMENSION_PANEL_NUMERIC_PREF_SIZE);  statsNumPanel.add(panelStatsDeviance,gbcStatPanel);  gbcStatPanel.gridx+=1;  gbcStatPanel.weightx=1.0;  gbcStatPanel.fill=GridBagConstraints.HORIZONTAL;  gbcStatPanel.anchor=GridBagConstraints.EAST;  statsNumPanel.add(new JLabel(),gbcStatPanel);  cardStatsPanel.add(statsNumPanel,CARD_NUMERICAL);  JPanel statsNomPanel=new JPanel();  statsNomPanel.setLayout(layout);  statsNomPanel.setOpaque(false);  String leastLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.least.label");  String mostLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.most.label");  String valuesLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.values.label");  JPanel panelStatsLeast=new JPanel();  panelStatsLeast.setLayout(new BoxLayout(panelStatsLeast,BoxLayout.PAGE_AXIS));  panelStatsLeast.setOpaque(false);  JLabel labelLeastHeader=new JLabel(leastLabel);  labelLeastHeader.setFont(labelLeastHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelLeastHeader.setForeground(Color.GRAY);  labelLeastHeader.setAlignmentX(Component.LEFT_ALIGNMENT);  panelStatsLeast.add(labelLeastHeader);  labelStatsLeast=new JLabel(LABEL_DOTS);  labelStatsLeast.setFont(labelStatsLeast.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsLeast.add(labelStatsLeast);  JPanel panelStatsMost=new JPanel();  panelStatsMost.setLayout(new BoxLayout(panelStatsMost,BoxLayout.PAGE_AXIS));  panelStatsMost.setOpaque(false);  JLabel labelMostHeader=new JLabel(mostLabel);  labelMostHeader.setFont(labelMostHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelMostHeader.setForeground(Color.GRAY);  labelMostHeader.setAlignmentX(Component.LEFT_ALIGNMENT);  panelStatsMost.add(labelMostHeader);  labelStatsMost=new JLabel(LABEL_DOTS);  labelStatsMost.setFont(labelStatsMost.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsMost.add(labelStatsMost);  JPanel panelStatsValues=new JPanel();  panelStatsValues.setLayout(new BoxLayout(panelStatsValues,BoxLayout.PAGE_AXIS));  panelStatsValues.setOpaque(false);  JLabel labelValuesHeader=new JLabel(valuesLabel);  labelValuesHeader.setFont(labelValuesHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelValuesHeader.setForeground(Color.GRAY);  labelValuesHeader.setAlignmentX(Component.LEFT_ALIGNMENT);  panelStatsValues.add(labelValuesHeader);  labelStatsValues=new JLabel(LABEL_DOTS);  labelStatsValues.setFont(labelStatsValues.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsValues.add(labelStatsValues);  nominalValueFiller=Box.createRigidArea(DIMENSION_FILLER_NOMINAL_VALUE_SIZE);  panelStatsValues.add(nominalValueFiller);  detailsButton=new JButton(new ShowNomValueAction(this));  detailsButton.setVisible(false);  detailsButton.setOpaque(false);  detailsButton.setContentAreaFilled(false);  detailsButton.setBorderPainted(false);  detailsButton.addMouseListener(enlargeAndHoverAndPopupMouseAdapter);  detailsButton.setHorizontalAlignment(SwingConstants.LEFT);  detailsButton.setHorizontalTextPosition(SwingConstants.LEFT);  detailsButton.setIcon(null);  Font font=detailsButton.getFont();  Map attributes=font.getAttributes();  attributes.put(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);  detailsButton.setFont(font.deriveFont(attributes));  panelStatsValues.add(detailsButton);  panelStatsValues.add(new JLabel());  gbcStatPanel.gridx=0;  gbcStatPanel.weightx=0.0;  gbcStatPanel.fill=GridBagConstraints.NONE;  gbcStatPanel.insets=new Insets(0,0,0,6);  panelStatsLeast.setPreferredSize(DIMENSION_PANEL_NOMINAL_PREF_SIZE);  statsNomPanel.add(panelStatsLeast,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsMost.setPreferredSize(DIMENSION_PANEL_NOMINAL_PREF_SIZE);  statsNomPanel.add(panelStatsMost,gbcStatPanel);  gbcStatPanel.gridx+=1;  statsNomPanel.add(panelStatsValues,gbcStatPanel);  gbcStatPanel.gridx+=1;  gbcStatPanel.weightx=1.0;  gbcStatPanel.fill=GridBagConstraints.HORIZONTAL;  statsNomPanel.add(new JLabel(),gbcStatPanel);  cardStatsPanel.add(statsNomPanel,CARD_NOMINAL);  JPanel statsDateTimePanel=new JPanel();  statsDateTimePanel.setLayout(layout);  statsDateTimePanel.setOpaque(false);  String durationLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.duration.label");  String fromLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.from.label");  String untilLabel=I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.until.label");  JPanel panelStatsFrom=new JPanel();  panelStatsFrom.setLayout(new BoxLayout(panelStatsFrom,BoxLayout.PAGE_AXIS));  panelStatsFrom.setOpaque(false);  JLabel labelFromHeader=new JLabel(fromLabel);  labelFromHeader.setFont(labelFromHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelFromHeader.setForeground(Color.GRAY);  panelStatsFrom.add(labelFromHeader);  labelStatsFrom=new JLabel(LABEL_DOTS);  labelStatsFrom.setFont(labelStatsFrom.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsFrom.add(labelStatsFrom);  JPanel panelStatsUntil=new JPanel();  panelStatsUntil.setLayout(new BoxLayout(panelStatsUntil,BoxLayout.PAGE_AXIS));  panelStatsUntil.setOpaque(false);  JLabel labelUntilHeader=new JLabel(untilLabel);  labelUntilHeader.setFont(labelUntilHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelUntilHeader.setForeground(Color.GRAY);  panelStatsUntil.add(labelUntilHeader);  labelStatsUntil=new JLabel(LABEL_DOTS);  labelStatsUntil.setFont(labelStatsUntil.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsUntil.add(labelStatsUntil);  JPanel panelStatsDuration=new JPanel();  panelStatsDuration.setLayout(new BoxLayout(panelStatsDuration,BoxLayout.PAGE_AXIS));  panelStatsDuration.setOpaque(false);  JLabel labelDurationHeader=new JLabel(durationLabel);  labelDurationHeader.setFont(labelDurationHeader.getFont().deriveFont(FONT_SIZE_LABEL_HEADER));  labelDurationHeader.setForeground(Color.GRAY);  panelStatsDuration.add(labelDurationHeader);  labelStatsDuration=new JLabel(LABEL_DOTS);  labelStatsDuration.setFont(labelStatsDuration.getFont().deriveFont(FONT_SIZE_LABEL_VALUE));  panelStatsDuration.add(labelStatsDuration);  gbcStatPanel.gridx=0;  gbcStatPanel.weightx=0.0;  gbcStatPanel.fill=GridBagConstraints.NONE;  gbcStatPanel.insets=new Insets(0,0,0,6);  panelStatsFrom.setPreferredSize(DIMENSION_PANEL_DATE_PREF_SIZE);  statsDateTimePanel.add(panelStatsFrom,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsUntil.setPreferredSize(DIMENSION_PANEL_DATE_PREF_SIZE);  statsDateTimePanel.add(panelStatsUntil,gbcStatPanel);  gbcStatPanel.gridx+=1;  panelStatsDuration.setPreferredSize(DIMENSION_PANEL_DATE_PREF_SIZE);  statsDateTimePanel.add(panelStatsDuration,gbcStatPanel);  gbcStatPanel.gridx+=1;  gbcStatPanel.weightx=1.0;  gbcStatPanel.fill=GridBagConstraints.HORIZONTAL;  statsDateTimePanel.add(new JLabel(),gbcStatPanel);  cardStatsPanel.add(statsDateTimePanel,CARD_DATE_TIME);  gbc.gridx+=1;  gbc.insets=new Insets(5,10,5,10);  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.weightx=1.0;  gbc.weighty=0.0;  gbc.anchor=GridBagConstraints.WEST;  add(cardStatsPanel,gbc);  setOpaque(false);  addMouseListener(enlargeAndHoverAndPopupMouseAdapter);  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));}  }
class C{  protected void updateEntry(HashEntry entry,Object newValue){  entry.setValue(newValue);}  }
class C{  public File extractLibrary(String libraryName,String dirName) throws IOException {  File javaLibPath=new File(System.getProperty("java.library.path"));  for (  String sourcePath : platformNames(libraryName)) {    InputStream cinput;    try {      cinput=readFile(sourcePath);    } catch (    FileNotFoundException fnfe) {      File file=new File(javaLibPath,sourcePath);      if (file.exists())       return file;      continue;    }    String sourceCrc=crc(cinput);    if (dirName == null)     dirName=sourceCrc;    File extractedDir=new File(System.getProperty("java.io.tmpdir") + "/playn" + System.getProperty("user.name")+ "/"+ dirName);    File extractedFile=new File(extractedDir,new File(sourcePath).getName());    String extractedCrc=null;    if (extractedFile.exists()) {      try {        extractedCrc=crc(new FileInputStream(extractedFile));      } catch (      FileNotFoundException ignored) {      }    }    if (extractedCrc == null || !extractedCrc.equals(sourceCrc)) {      extractedDir.mkdirs();      copyTo(sourcePath,extractedFile);      if (sourcePath.endsWith(".jnilib")) {        String hackPath=sourcePath.replaceAll(".jnilib",".dylib");        copyTo(sourcePath,new File(extractedDir,new File(hackPath).getName()));      }    }    return extractedFile;  }  throw new FileNotFoundException("Unable to find shared lib for '" + libraryName + "'");}  }
class C{  ReverseAxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator,axis);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  mySyntax=(Properties)s.readObject();  impl=new NameImpl(mySyntax);  int n=s.readInt();  try {    while (--n >= 0) {      add((String)s.readObject());    }  } catch (  InvalidNameException e) {    throw (new java.io.StreamCorruptedException("Invalid name"));  }}  }
class C{  public List<String> mvn(String... arguments) throws IOException {  return mvnRunner.runMaven(localDir,arguments);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:50.847 -0500",hash_original_method="B2F7E99E5659CE0D7ECF8F6FFE68B901",hash_generated_method="7A856CD3563648732364FDA9AD6EC849") public boolean isFunctionEnabled(String function){  return propertyContainsFunction("sys.usb.config",function);}  }
class C{  public Groups(){  _groupsImpl=new GroupsImpl();}  }
class C{  private Node distcomp(){  Node node=new Node(NodeType.DISTCOMP,lineargs);  while (next() != null && line().startsWith(NodeType.EXT.getMatch())) {    node.getChildren().add(extent());  }  return node;}  }
class C{  public static void main(String[] args){  try {    SSHMain app=parseArguments(args);    app.start();    System.exit(app.myExitCode);  } catch (  Throwable t) {    t.printStackTrace();    System.exit(1);  }}  }
class C{  public ExceptionBuilder error(int error){  body.setError(new Integer(error));  return this;}  }
class C{  public CCTwirl(CGPoint pos,int t,float amp,ccGridSize gSize,float d){  super(gSize,d);  position=CGPoint.make(pos.x,pos.y);  twirls=t;  amplitude=amp;  amplitudeRate=1.0f;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(int decimals){  VCardFloatFormatter formatter=new VCardFloatFormatter(decimals);  StringBuilder sb=new StringBuilder("geo:");  sb.append(formatter.format(coordA));  sb.append(',');  sb.append(formatter.format(coordB));  if (coordC != null) {    sb.append(',');    sb.append(coordC);  }  if (crs != null && !crs.equalsIgnoreCase(CRS_WGS84)) {    writeParameter(PARAM_CRS,crs,sb);  }  if (uncertainty != null) {    writeParameter(PARAM_UNCERTAINTY,formatter.format(uncertainty),sb);  }  for (  Map.Entry<String,String> entry : parameters.entrySet()) {    String name=entry.getKey();    String value=entry.getValue();    writeParameter(name,value,sb);  }  return sb.toString();}  }
class C{  public void testSessionRegisterKeepAlive() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  callerContext.execute(null);  await();  assertEquals(session.getTimestamp(),timestamp + 1000);}  }
class C{  private void showNextSuperToast(){  final SuperActivityToast superActivityToast=mList.peek();  if (mList.isEmpty() || superActivityToast.getActivity() == null) {    return;  }  if (!superActivityToast.isShowing()) {    final Message message=obtainMessage(Messages.DISPLAY);    message.obj=superActivityToast;    sendMessage(message);  }}  }
class C{  private Node createInstructionNode(final ReilInstruction reilInstruction){  final Node node=m_internalGraph.createNode();  m_nodesMap.put(node,new ReilInstructionGraphNode(reilInstruction));  return node;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  return vset;}  }
class C{  protected TXEntryState txReadEntry(KeyInfo keyInfo,LocalRegion localRegion,boolean rememberRead,Object expectedOldValue,boolean createIfAbsent) throws EntryNotFoundException {  LocalRegion dataReg=localRegion.getDataRegionForWrite(keyInfo);  TXRegionState txr=txReadRegion(dataReg);  TXEntryState result=null;  if (txr != null) {    result=txr.readEntry(keyInfo.getKey());  }  if (result == null && rememberRead) {    if (txr == null) {      txr=txWriteRegion(localRegion,keyInfo);    }    result=dataReg.createReadEntry(txr,keyInfo,createIfAbsent);  }  if (result != null) {    if (expectedOldValue != null) {      Object val=result.getNearSidePendingValue();      if (!AbstractRegionEntry.checkExpectedOldValue(expectedOldValue,val,localRegion)) {        txr.cleanupNonDirtyEntries(localRegion);        throw new EntryNotFoundException(LocalizedStrings.AbstractRegionMap_THE_CURRENT_VALUE_WAS_NOT_EQUAL_TO_EXPECTED_VALUE.toLocalizedString());      }    }  } else {    if (txr != null) {      txr.cleanupNonDirtyEntries(dataReg);    }    if (expectedOldValue == null) {      return result;    } else {      if (!Token.isInvalid(expectedOldValue)) {        throw new EntryNotFoundException(LocalizedStrings.AbstractRegionMap_THE_CURRENT_VALUE_WAS_NOT_EQUAL_TO_EXPECTED_VALUE.toLocalizedString());      }    }  }  return result;}  }
class C{  public T caseBuiltInType(BuiltInType object){  return null;}  }
class C{  private void jbInit() throws Exception {  setIconImage(Env.getImage("mProcess.gif"));  dialog.setLayout(mainLayout);  dialog.setMinimumSize(new Dimension(500,200));  bOK.addActionListener(this);  bPrint.addActionListener(this);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  message.setContentType("text/html");  message.setEditable(false);  message.setBackground(Color.white);  message.setFocusable(true);  getContentPane().add(dialog);  dialog.add(southPanel,BorderLayout.SOUTH);  southPanel.add(bPrint,null);  southPanel.add(bOK,null);  dialog.add(messagePane,BorderLayout.NORTH);  messagePane.setBorder(null);  messagePane.setMaximumSize(new Dimension(600,300));  centerPanel=new CPanel();  centerPanel.setBorder(null);  centerPanel.setLayout(new BorderLayout());  dialog.add(centerPanel,BorderLayout.CENTER);  mainLayout.setVgap(2);  this.getRootPane().setDefaultButton(bOK);}  }
class C{  public boolean isResetConfiguration(){  return resetConfiguration;}  }
class C{  public static String readStringNZ(Memory mem,int address,int n){  address&=Memory.addressMask;  if (address + n > MemoryMap.END_RAM) {    n=MemoryMap.END_RAM - address + 1;    if (n < 0) {      n=0;    }  }  byte[] bytes=new byte[Math.min(n,10000)];  int length=0;  IMemoryReader memoryReader=MemoryReader.getMemoryReader(address,n,1);  for (; n > 0; n--) {    int b=memoryReader.readNext();    if (b == 0) {      break;    }    if (length >= bytes.length) {      byte[] newBytes=new byte[bytes.length + 10000];      System.arraycopy(bytes,0,newBytes,0,bytes.length);      bytes=newBytes;    }    bytes[length]=(byte)b;    length++;  }  return new String(bytes,0,length,Constants.charset);}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=android.view.ViewGroup.LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public static char[] utf2chars(byte[] src){  return utf2chars(src,0,src.length);}  }
class C{  public static long[] cycleRightI(long[] v,int shift,int len){  long[] t=copy(v,len,len - shift);  truncateI(t,len);  shiftRightI(v,shift);  orI(v,t);  return v;}  }
class C{  public long skip(long n) throws java.io.IOException {  return 0l;}  }
class C{  public static String unquote(String name){  if (!name.isEmpty() && name.charAt(0) == '$') {    return name.substring(1);  }  return name;}  }
class C{  private long nextLong(long n){  long bits;  long val;  do {    bits=(rnd.nextLong() << 1) >>> 1;    val=bits % n;  } while (bits - val + (n - 1) < 0L);  return val;}  }
class C{  private boolean verifyPermissions(@NonNull int[] grantResults){  if (grantResults.length < 1) {    return false;  }  for (  int result : grantResults) {    if (result != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public NioProcessor(Executor executor){  super(executor);  try {    selector=Selector.open();  } catch (  IOException e) {    throw new RuntimeIoException("Failed to open a selector.",e);  }}  }
class C{  public CTextArea(String text,int rows,int columns){  this(new JTextArea(text,rows,columns));}  }
class C{  @Override public String id(){  return id;}  }
class C{  public void insert(int offset,byte[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  public JDBFileFilter(String[] filters,String description){  this();  for (  String filter : filters) {    addExtension(filter);  }  if (description != null) {    setDescription(description);  }}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  @Nonnull public BugInstance addOptionalLocalVariable(DismantleBytecode dbc,OpcodeStack.Item item){  int register=item.getRegisterNumber();  if (register >= 0) {    this.add(LocalVariableAnnotation.getLocalVariableAnnotation(dbc.getMethod(),register,dbc.getPC() - 1,dbc.getPC()));  }  return this;}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Address address){  writeTo(serializer,label,address,AddressEncoding.COMPRESSED);}  }
class C{  private static Properties filterOutAdminProperties(Properties props){  Properties props2=new Properties();  for (Enumeration names=props.propertyNames(); names.hasMoreElements(); ) {    String name=(String)names.nextElement();    if (!(ENTITY_CONFIG_XML_FILE_NAME.equals(name) || REFRESH_INTERVAL_NAME.equals(name) || REMOTE_COMMAND_NAME.equals(name))) {      String value=props.getProperty(name);      if ((name != null) && (value != null)) {        props2.setProperty(name,value);      }    }  }  return props2;}  }
class C{  public CLBuffer<T> createSubBuffer(Usage usage,long offset,long length){}  }
class C{  public boolean isIPNoCheckMode(){  return isAllIPMode() && getConfigBool(SwitchboardConstants.NETWORK_DOMAIN_NOCHECK,false);}  }
class C{  public boolean hasNextLine(){  saveState();  String result=findWithinHorizon(linePattern(),0);  if (result != null) {    MatchResult mr=this.match();    String lineSep=mr.group(1);    if (lineSep != null) {      result=result.substring(0,result.length() - lineSep.length());      cacheResult(result);    } else {      cacheResult();    }  }  revertState();  return (result != null);}  }
class C{  public Tween target(float targetValue){  targetValues[0]=targetValue;  return this;}  }
class C{  public static Status createStatus(int severity,String message,Throwable throwable){  return new Status(severity,getPluginInstance().getBundle().getSymbolicName(),message,throwable);}  }
class C{  public ReceiptHeader createReceiptHeader(String receiptnumber,char receiptType,String refNum,String statusCode,User user,EgwStatus status) throws NumberFormatException {  ReceiptHeader receiptHeader=createUnsavedReceiptHeader(receiptnumber,receiptType,refNum,statusCode,user,status);  session.saveOrUpdate(receiptHeader);  return receiptHeader;}  }
class C{  public void deleteVolumes(String[] volumeIdsToBeDeleted) throws Exception {  _log.info("CinderApi - start deleteVolumes");  for (  String volumeId : volumeIdsToBeDeleted) {    try {      deleteVolume(volumeId);    } catch (    CinderException e) {      _log.error("Failed to delete the volume with the id : " + volumeId,e);    }  }  _log.info("CinderApi - end deleteVolumes");}  }
class C{  private void updateFrom(final String from){  if (from != null && !from.contentEquals("0000") && !from.contentEquals("000000")) {    if (mFromTalkgroup == null || !mFromTalkgroup.contentEquals(from)) {      mFromTalkgroup=from;      broadcast(ChangedAttribute.FROM_TALKGROUP);      if (hasAliasList()) {        mFromAlias=getAliasList().getTalkgroupAlias(mFromTalkgroup);      } else {        mFromAlias=null;      }      broadcast(ChangedAttribute.FROM_TALKGROUP_ALIAS);      broadcast(new Metadata(MetadataType.FROM,mFromTalkgroup,mFromAlias,true));      if (mCurrentCallEvent != null && (mCurrentCallEvent.getFromID() == null || !mCurrentCallEvent.getFromID().contentEquals(from))) {        mCurrentCallEvent.setFromID(from);        broadcast(mCurrentCallEvent);      }    }  }}  }
class C{  protected void actualizarProductores(){  if (CollectionUtils.isEmpty(listaProductores))   listaProductores=service.lookupGestionSeriesBI().getProductoresSerie(id);  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  eliminaInformacionAnteriorProductores(descripcionBI);  if (!CollectionUtils.isEmpty(listaProductores)) {    ProductorSerieVO productor;    for (int i=0; i < listaProductores.size(); i++) {      productor=(ProductorSerieVO)listaProductores.get(i);      descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoReferenciaVO(id,ID_CAMPO_PRODUCTOR,(i + 1),CampoReferenciaVO.REFERENCIA_A_ELEMENTO_DESCRIPTOR,productor.getIdProductor(),ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO));      if (productor.getFechaInicial() != null)       descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_INICIO_PRODUCTOR,(i + 1),productor.getFechaInicial(),ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO));      if (productor.getFechaFinal() != null)       descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_FIN_PRODUCTOR,(i + 1),productor.getFechaFinal(),ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO));    }  }}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  newVector.addElement("measureTotal_points_visited");  newVector.addElement("measureMean_points_visited");  newVector.addElement("measureStdDev_points_visited");  newVector.addElement("measureMin_points_visited");  newVector.addElement("measureMax_points_visited");  newVector.addElement("measureTotalCoordsPerPoint");  newVector.addElement("measureMeanCoordsPerPoint");  newVector.addElement("measureStdDevCoordsPerPoint");  newVector.addElement("measureMinCoordsPerPoint");  newVector.addElement("measureMaxCoordsPerPoint");  return newVector.elements();}  }
class C{  public static int countDays(int startYear,int startMonth,int startDay,int endYear,int endMonth,int endDay){  Calendar startC=Calendar.getInstance();  startC.set(Calendar.YEAR,startYear);  startC.set(Calendar.MONTH,startMonth - 1);  startC.set(Calendar.DAY_OF_MONTH,startDay);  Calendar endC=Calendar.getInstance();  endC.set(Calendar.YEAR,endYear);  endC.set(Calendar.MONTH,endMonth - 1);  endC.set(Calendar.DAY_OF_MONTH,endDay);  return (int)((endC.getTimeInMillis() - startC.getTimeInMillis()) / 86400000 + 1);}  }
class C{  public T attr(String attribute,String value){  setAttribute(attribute,value);  return (T)this;}  }
class C{  @Override public void reset(){  lock.writeLock().lock();  try {    isInitialized.set(false);  }  finally {    lock.writeLock().unlock();  }}  }
class C{  protected void writeEmbeddedIndicesStmt(Table table,StringBuilder ddl){  if (databaseInfo.isIndicesSupported()) {    for (int idx=0; idx < table.getIndexCount(); idx++) {      printStartOfEmbeddedStatement(ddl);      writeEmbeddedIndexCreateStmt(table,table.getIndex(idx),ddl);    }  }}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void write(int data) throws IOException {  boolean bitValue=false;  int x=0;  int y=0;  int channel=0;  int bit=0;  for (int i=0; i < 8; i++) {    bitValue=((data >> (7 - i)) & 0x1) == 0x1;    do {      x=this.rand.nextInt(this.imgWidth);      y=this.rand.nextInt(this.imgHeight);      channel=this.rand.nextInt(3);      bit=this.rand.nextInt(this.channelBitsUsed);    } while (this.bitWritten[x][y][channel][bit]);    this.bitWritten[x][y][channel][bit]=true;    setPixelBit(x,y,channel,bit,bitValue);  }}  }
class C{  public static void recreateDir(final String dir){  new File(dir).delete();  new File(dir).mkdir();}  }
class C{  public void testGetDescription(AbstractDosPlugin instance){  String result=instance.getDescription();  assertTrue(result.length() > 0);}  }
class C{  @Override public double computeScoreNormalization(double cooccurrence,int similarNodeDegree,int nodeDegree){  return 1.0 / Math.sqrt(similarNodeDegree);}  }
class C{  private void readControlHeader(PlogLCR LCR) throws IOException {  for (  PlogLCRTag tag : LCR.rawTags) {switch (tag.id) {case PlogLCRTag.TAG_FEATURES_1:      int features=tag.valueInt();    this.plogDictCacheEnabled=(features & PlogLCRTag.TAG_FEATURES_1_CACHE_DICT) > 0;  break;default :}}}  }
class C{  int readCorner1(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public void actionPerformed(ActionEvent e){  LoadXmlThrottlesLayoutAction lxta=new LoadXmlThrottlesLayoutAction();  try {    if (lxta.loadThrottlesLayout(new File(ThrottleFrame.getDefaultThrottleFilename()))) {      return;    }  } catch (  java.io.IOException ex) {    log.error("No default throttle layout, creating an empty throttle window");  }  ThrottleFrame tf=ThrottleFrameManager.instance().createThrottleFrame();  tf.toFront();}  }
class C{  public ManifoldPoint(){  localPoint=new Vec2();  normalImpulse=tangentImpulse=0f;  id=new ContactID();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:24.359 -0500",hash_original_method="331041DCF96E441D5D9D656234CC8B8B",hash_generated_method="27730FD3E32C56D5BFFCC44197D688DA") public void addStroke(GestureStroke stroke){  mStrokes.add(stroke);  mBoundingBox.union(stroke.boundingBox);}  }
class C{  public BrokerShareResultEvaluator(Document xml) throws XPathExpressionException {  super(xml,"BrokerRevenueShareResult");}  }
class C{  public Hypervolume(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet,true);}  }
class C{  public T applicationVersion(String value){  setString(APPLICATION_VERSION,value);  return (T)this;}  }
class C{  public static String encodeModifiedUTF7(String string){  ByteBuffer encode=X_MODIFIED_UTF_7_CHARSET.encode(string);  return new String(encode.array(),0,encode.remaining());}  }
class C{  private void clear(){  mSealed=false;  mSourceNodeId=ROOT_NODE_ID;  mParentNodeId=ROOT_NODE_ID;  mLabelForId=ROOT_NODE_ID;  mLabeledById=ROOT_NODE_ID;  mWindowId=UNDEFINED;  mConnectionId=UNDEFINED;  mMovementGranularities=0;  mChildNodeIds.clear();  mBoundsInParent.set(0,0,0,0);  mBoundsInScreen.set(0,0,0,0);  mBooleanProperties=0;  mPackageName=null;  mClassName=null;  mText=null;  mContentDescription=null;  mViewIdResourceName=null;  mActions=0;  mTextSelectionStart=UNDEFINED;  mTextSelectionEnd=UNDEFINED;}  }
class C{  @Override public int nextInt(){  int max=Integer.parseInt(_basis.lastString());  int nextint=max - _zipfian.nextInt(max);  setLastInt(nextint);  return nextint;}  }
class C{  public MiniDrawer withCrossFader(@NonNull ICrossfader crossFader){  this.mCrossFader=crossFader;  return this;}  }
class C{  public void decrypt(int[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(buffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,buffer,nI);  }  ;}  }
class C{  public JobAttributes(JobAttributes obj){  set(obj);}  }
class C{  public boolean isGuaranteeDate(){  Object oo=get_Value(COLUMNNAME_IsGuaranteeDate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <T>T fromCommandLine(Class<T> cls,String cmdline) throws Exception {  String[] options;  String classname;  options=Utils.splitOptions(cmdline);  classname=options[0];  options[0]="";  return (T)Utils.forName(cls,classname,options);}  }
class C{  public SoapMessageEncoder(OutputStream output) throws Exception {  multipart=new MultiPartOutputStream(output);}  }
class C{  private static int parseLine(Class<?> service,URL u,BufferedReader r,int lc,List<String> names,Set<String> returned) throws IOException, ServiceConfigurationError {  String ln=r.readLine();  if (ln == null) {    return -1;  }  int ci=ln.indexOf('#');  if (ci >= 0)   ln=ln.substring(0,ci);  ln=ln.trim();  int n=ln.length();  if (n != 0) {    if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))     fail(service,u,lc,"Illegal configuration-file syntax");    int cp=ln.codePointAt(0);    if (!Character.isJavaIdentifierStart(cp))     fail(service,u,lc,"Illegal provider-class name: " + ln);    for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) {      cp=ln.codePointAt(i);      if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))       fail(service,u,lc,"Illegal provider-class name: " + ln);    }    if (!returned.contains(ln)) {      names.add(ln);      returned.add(ln);    }  }  return lc + 1;}  }
class C{  private void adjustView(){  if ((dvx == 0) && (dvy == 0)) {    return;  }  final int sx=convertWorldXToScaledScreen(x) - getScreenViewX() + SIZE_UNIT_PIXELS / 2;  final int sy=convertWorldYToScaledScreen(y) - getScreenViewY() + SIZE_UNIT_PIXELS / 2;  if ((sx < 0) || (sx >= sw) || (sy < -SIZE_UNIT_PIXELS)|| (sy > sh)) {    center();  } else {    calculatePanningSpeed();    if (speed != 0) {      final int scalediv=(Math.abs(dvx) + Math.abs(dvy)) * PAN_SCALE;      int dx=speed * dvx / scalediv;      int dy=speed * dvy / scalediv;      if (dvx < 0) {        dx=MathHelper.clamp(dx,dvx,-1);      } else       if (dvx > 0) {        dx=MathHelper.clamp(dx,1,dvx);      }      if (dvy < 0) {        dy=MathHelper.clamp(dy,dvy,-1);      } else       if (dvy > 0) {        dy=MathHelper.clamp(dy,1,dvy);      }      svx+=dx;      dvx-=dx;      svy+=dy;      dvy-=dy;    }  }}  }
class C{  public static Join cross(SqlTable<?> table,Property<?>... usingColumns){  return new Join(table,JoinType.CROSS,usingColumns);}  }
class C{  protected void notifyTestTreeCreated(final TestConfiguration configuration,TestTree testTree){  getDefault().asyncExec(null);}  }
class C{  public int scanBuiltInLibraryClasses(String libDir,String jarFileName) throws IOException {  String LibDir=libDir;  int libPathLen=LibDir.length();  int numLibAllClasses=0;  int numLibAllMethods=0;  JarEntry je;  JarInputStream jis=new JarInputStream(new BufferedInputStream(new FileInputStream(jarFileName)));  while ((je=jis.getNextJarEntry()) != null) {    String nameOfEntry=je.toString();    int strLen=nameOfEntry.length();    if (strLen > libPathLen) {      nameOfEntry=nameOfEntry.substring(0,libPathLen);      if (nameOfEntry.equalsIgnoreCase(LibDir)) {        String name='/' + je.getName().replace('\\','/');        String remainingClassName=name.substring(libPathLen + 1,name.length());        String javaName=name.replace('/','.');        int idx=javaName.lastIndexOf(".class");        int javaNameLen=javaName.length();        boolean classStringIsWithinName=javaNameLen > (idx + ".class".length());        if (idx != -1 && !classStringIsWithinName) {          javaName=javaName.substring(1,idx);          Class foundClass=null;          try {            foundClass=GlobalValues.GroovyShell.getClassLoader().loadClass(javaName);          } catch (          ClassNotFoundException e) {            foundClass=null;          }          if (javaName.indexOf("$") == -1) {            String smallName=javaName.substring(javaName.lastIndexOf(".") + 1,javaName.length());            String nameToInsert=smallName + GlobalValues.smallNameFullPackageSeparator + javaName;            AutoCompletionGroovySci.scanMethodsGroovySci.add(nameToInsert);            numLibAllClasses++;          }          if (foundClass != null) {            Method[] classMethods=foundClass.getDeclaredMethods();            for (            Method currentMethod : classMethods) {              if (Modifier.isPublic(currentMethod.getModifiers())) {                String methodName=currentMethod.getName();                Class<?>[] methodArgs=currentMethod.getParameterTypes();                StringBuilder args=new StringBuilder();                int nargs=methodArgs.length;                int argcnt=0;                for (                Class arg : methodArgs) {                  args.append(arg.getName());                  if (++argcnt < nargs)                   args.append(", ");                }                methodName=methodName + "(" + args.toString()+ ")";                if (AutoCompletionGroovySci.scanMethodsGroovySci.indexOf(methodName) == -1) {                  AutoCompletionGroovySci.scanMethodsGroovySci.add(methodName);                  numLibAllMethods++;                }              }            }          }        }      }    }  }  jis.close();  return numLibAllClasses;}  }
class C{  public static DoubleMatrix2D mult(DoubleMatrix2D A,double s){  return A.assign(F.mult(s));}  }
class C{  public String ballSplitterTipText(){  return "The BallSplitter algorithm set that would be used by the TopDown " + "BallTree constructor.";}  }
class C{  protected boolean filterHeader(int index){  if (this.headerName == null)   return true;  final String name=((Header)this.allHeaders.get(index)).getName();  return this.headerName.equalsIgnoreCase(name);}  }
class C{  private void buildSpectrogram(){  short[] amplitudes=wave.getSampleAmplitudes();  int numSamples=amplitudes.length;  int pointer=0;  if (overlapFactor > 1) {    int numOverlappedSamples=numSamples * overlapFactor;    int backSamples=fftSampleSize * (overlapFactor - 1) / overlapFactor;    int fftSampleSize_1=fftSampleSize - 1;    short[] overlapAmp=new short[numOverlappedSamples];    pointer=0;    for (int i=0; i < amplitudes.length; i++) {      overlapAmp[pointer++]=amplitudes[i];      if (pointer % fftSampleSize == fftSampleSize_1) {        i-=backSamples;      }    }    numSamples=numOverlappedSamples;    amplitudes=overlapAmp;  }  numFrames=numSamples / fftSampleSize;  framesPerSecond=(int)(numFrames / wave.length());  WindowFunction window=new WindowFunction();  window.setWindowType("Hamming");  double[] win=window.generate(fftSampleSize);  double[][] signals=new double[numFrames][];  for (int f=0; f < numFrames; f++) {    signals[f]=new double[fftSampleSize];    int startSample=f * fftSampleSize;    for (int n=0; n < fftSampleSize; n++) {      signals[f][n]=amplitudes[startSample + n] * win[n];    }  }  absoluteSpectrogram=new double[numFrames][];  FastFourierTransform fft=new FastFourierTransform();  for (int i=0; i < numFrames; i++) {    absoluteSpectrogram[i]=fft.getMagnitudes(signals[i]);  }  if (absoluteSpectrogram.length > 0) {    numFrequencyUnit=absoluteSpectrogram[0].length;    unitFrequency=(double)wave.getWaveHeader().getSampleRate() / 2 / numFrequencyUnit;    spectrogram=new double[numFrames][numFrequencyUnit];    double maxAmp=Double.MIN_VALUE;    double minAmp=Double.MAX_VALUE;    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] > maxAmp) {          maxAmp=absoluteSpectrogram[i][j];        } else         if (absoluteSpectrogram[i][j] < minAmp) {          minAmp=absoluteSpectrogram[i][j];        }      }    }    double minValidAmp=0.00000000001F;    if (minAmp == 0) {      minAmp=minValidAmp;    }    double diff=Math.log10(maxAmp / minAmp);    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] < minValidAmp) {          spectrogram[i][j]=0;        } else {          spectrogram[i][j]=(Math.log10(absoluteSpectrogram[i][j] / minAmp)) / diff;        }      }    }  }}  }
class C{  public void incomingStarted(){  inputStream.incomingStarted();}  }
class C{  @Override public void visitIdent(JCIdent tree){  if (context == null || !analyzer.lambdaIdentSymbolFilter(tree.sym)) {    super.visitIdent(tree);  } else {    int prevPos=make.pos;    try {      make.at(tree);      LambdaTranslationContext lambdaContext=(LambdaTranslationContext)context;      JCTree ltree=lambdaContext.translate(tree);      if (ltree != null) {        result=ltree;      } else {        super.visitIdent(tree);      }    }  finally {      make.at(prevPos);    }  }}  }
class C{  public double pace(double f){  return (f == 0.0 || f == 1.0 ? f : sigmoid(f));}  }
class C{  public GenericComment(String value,AbstractDocument owner){  ownerDocument=owner;  setNodeValue(value);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureTreeSize");  return newVector.elements();}  }
class C{  public void shuffleOutputs(){  Collections.shuffle(outputs);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetsystemid.class,args);}  }
class C{  public boolean contains(String key){  String s=null;  for (int i=0; null != (s=this.getKey(i)); i++) {    if (0 == key.compareToIgnoreCase(s))     return true;  }  return false;}  }
class C{  private boolean isMainToolBarHidden(){  return !extension.getModel().getOptionsParam().getViewParam().isShowMainToolbar();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("[");  buffer.append("CompositeRule containing ");  Iterator itr=rules.iterator();  while (itr.hasNext()) {    Rule rule=(Rule)itr.next();    buffer.append("(");    buffer.append(rule.getClass().getName());    buffer.append(") ");  }  buffer.append(": ");  buffer.append("]");  return buffer.toString();}  }
class C{  public ItemDroppingTeleporterBehaviour(final SpeakerNPC speakerNPC,final List<String> setZones,final String zoneStartsWithLimiter,final String repeatedText,final boolean useHighProbabilityZones,final String itemName){  super(speakerNPC,setZones,zoneStartsWithLimiter,repeatedText,useHighProbabilityZones);  this.speakerNPC=speakerNPC;  this.itemName=itemName;}  }
class C{  public RepaintArea(){}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void reloadTagsForPreview(ActionEvent ae){  tagsForPreview=createTagList(readTags(getUserLanguage()));}  }
class C{  public void addComment(String comment){  try {    if (rootNode.getNodeName().equals("interaction")) {      Comment com=doc.createComment(comment);      rootNode.appendChild(com);    } else {      log.warning("could not add comment");    }  } catch (  Exception e) {    e.printStackTrace();    log.warning("could not record preamble or comment: " + e);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CLASS_DEFINITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.CLASS_DEFINITION___CLASS_CONTENT_1:getClassContent_1().clear();getClassContent_1().addAll((Collection<? extends ClassContent_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static long objectFieldOffset(Field field){  return UNSAFE.objectFieldOffset(field);}  }
class C{  public SolarisPrincipal(String name){  if (name == null)   throw new NullPointerException(rb.getString("provided.null.name"));  this.name=name;}  }
class C{  public boolean isTranslationEnabled(){  return mIsTranslationEnabled;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.d(TAG,"onCreate()");  super.onCreate(savedInstanceState);  setContentView(R.layout.download_image_activity);  mLoadingProgressBar=(ProgressBar)findViewById(R.id.progressBar_loading);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.startBT=(Button)this.findViewById(R.id.start_bt);}  }
class C{  public TriggerIsNPCNameForUnstartedQuestCondition(final String region){  this.regions=Arrays.asList(region);}  }
class C{  private static String formatCpimSipUri(String input){  input=input.trim();  if (input.startsWith(PhoneUtils.URI_START_DELIMITER)) {    return input;  }  if (input.startsWith("\"")) {    return input;  }  if (input.startsWith(PhoneUtils.SIP_URI_HEADER) || input.startsWith(PhoneUtils.TEL_URI_HEADER)) {    return addUriDelimiters(input);  }  PhoneNumber validatedNumber=ContactUtil.getValidPhoneNumberFromUri(input);  if (validatedNumber == null) {    return addUriDelimiters(input);  }  ContactId contact=ContactUtil.createContactIdFromValidatedData(validatedNumber);  return addUriDelimiters(PhoneUtils.formatContactIdToUri(contact).toString());}  }
class C{  public void testConnectPolarBluetoothSensor_underRecording(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  bluetoothSensorTest(R.string.settings_sensor_type_polar,POLAR_NAME,true);}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testParallelSenderQueueEventsOverflow_2() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  Wait.pause(1000);  vm2.invoke(null);  vm3.invoke(null);  int numEventPuts=50;  vm4.invoke(null);  long numOvVm4=(Long)vm4.invoke(null);  long numOvVm5=(Long)vm5.invoke(null);  long numOvVm6=(Long)vm6.invoke(null);  long numOvVm7=(Long)vm7.invoke(null);  long numMemVm4=(Long)vm4.invoke(null);  long numMemVm5=(Long)vm5.invoke(null);  long numMemVm6=(Long)vm6.invoke(null);  long numMemVm7=(Long)vm7.invoke(null);  LogWriterUtils.getLogWriter().info("Entries overflown to disk: " + numOvVm4 + ","+ numOvVm5+ ","+ numOvVm6+ ","+ numOvVm7);  LogWriterUtils.getLogWriter().info("Entries in VM: " + numMemVm4 + ","+ numMemVm5+ ","+ numMemVm6+ ","+ numMemVm7);  long totalOverflown=numOvVm4 + numOvVm5 + numOvVm6+ numOvVm7;  assertTrue("Total number of entries overflown to disk should be at least greater than 55",(totalOverflown > 55));  long totalInMemory=numMemVm4 + numMemVm5 + numMemVm6+ numMemVm7;  assertEquals("Total number of entries on disk and in VM is incorrect",(numEventPuts * 2),(totalOverflown + totalInMemory));  assertTrue("Number of entries in memory VM4 is incorrect. Should be less than 10",(numMemVm4 < 10));  assertTrue("Number of entries in memory VM5 is incorrect. Should be less than 5",(numMemVm5 < 5));  assertTrue("Number of entries in memory VM6 is incorrect. Should be less than 5",(numMemVm6 < 5));  assertTrue("Number of entries in memory VM7 is incorrect. Should be less than 20",(numMemVm7 < 20));  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  Sesion oSesion=AutenticacionAdministracion.obtenerDatosEntidad(request);  SesionAdministracion poSesion=new SesionAdministracion();  poSesion.setIdEntidad(oSesion.getIdEntidad());  poSesion.setIdSesion(oSesion.getIdSesion());  poSesion.setIdUsuario(oSesion.getUsuario());  request.getSession().setAttribute(ConstantesSesionAdmin.ID_SESION_ADMINISTRACION,poSesion);  return mapping.findForward(FORWARD_SUCCESS);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthScrollPaneUI();}  }
class C{  public static void matrixMultWDivMM(MatrixBlock mW,MatrixBlock mU,MatrixBlock mV,MatrixBlock mX,MatrixBlock ret,WDivMMType wt) throws DMLRuntimeException {  if (mW.isEmptyBlock(false) || (wt.isLeft() && mU.isEmptyBlock(false)) || (wt.isRight() && mV.isEmptyBlock(false))|| (wt.isBasic() && mW.isEmptyBlock(false))) {    ret.examSparsity();    return;  }  ret.sparse=wt.isBasic() ? mW.sparse : false;  ret.allocateDenseOrSparseBlock();  boolean scalarX=wt.hasScalar();  if (!mW.sparse && !mU.sparse && !mV.sparse&& (mX == null || !mX.sparse || scalarX)&& !mU.isEmptyBlock()&& !mV.isEmptyBlock())   matrixMultWDivMMDense(mW,mU,mV,mX,ret,wt,0,mW.rlen,0,mW.clen); else   if (mW.sparse && !mU.sparse && !mV.sparse&& (mX == null || mX.sparse || scalarX)&& !mU.isEmptyBlock()&& !mV.isEmptyBlock())   matrixMultWDivMMSparseDense(mW,mU,mV,mX,ret,wt,0,mW.rlen,0,mW.clen); else   matrixMultWDivMMGeneric(mW,mU,mV,mX,ret,wt,0,mW.rlen,0,mW.clen);  ret.recomputeNonZeros();  ret.examSparsity();}  }
class C{  private static String handleServerError(Object err,Context context){  VolleyError error=(VolleyError)err;  NetworkResponse response=error.networkResponse;  if (response != null) {switch (response.statusCode) {case 404:case 422:case 401:      try {        HashMap<String,String> result=new Gson().fromJson(new String(response.data),new TypeToken<Map<String,String>>(){        }.getType());        if (result != null && result.containsKey("error")) {          return result.get("error");        }      } catch (      Exception e) {        e.printStackTrace();      }    return error.getMessage();default :  return context.getResources().getString(R.string.generic_server_down);}}return context.getResources().getString(R.string.generic_error);}  }
class C{  public void write(String str){  buf.append(str);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.858 -0500",hash_original_method="4E1EA61EF3802406B1375FE91CF7D26A",hash_generated_method="4E1EA61EF3802406B1375FE91CF7D26A") boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public void notifyDestroy(){  ScopeContext scopeContext=new ScopeContext(SCOPE_NAME,this);  application.publishEvent(FacesContext.getCurrentInstance(),PreDestroyCustomScopeEvent.class,scopeContext);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x5152773B,version=150) public int sceHttpDeleteConnection(int connectionId){  return 0;}  }
class C{  @Override public void shutdown(){  try {    if (cxn != null) {      cxn.close();    }    repo.shutDown();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void adjustDayOfWeek(Calendar startTime){  int daysDiff=getDayOfWeek() - getDayOfWeek(startTime);  startTime.add(Calendar.DAY_OF_WEEK,daysDiff);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.RETURN_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected Optional<U> findUserByUsername(String username){  return userRepository.findByEmail(username);}  }
class C{  @Bean(destroyMethod="shutdown") public net.sf.ehcache.CacheManager ehCacheManager(){  CacheConfiguration cacheConfiguration=new CacheConfiguration();  cacheConfiguration.setName(HERD_CACHE_NAME);  cacheConfiguration.setTimeToLiveSeconds(configurationHelper.getProperty(ConfigurationValue.HERD_CACHE_TIME_TO_LIVE_SECONDS,Long.class));  cacheConfiguration.setTimeToIdleSeconds(configurationHelper.getProperty(ConfigurationValue.HERD_CACHE_TIME_TO_IDLE_SECONDS,Long.class));  cacheConfiguration.setMaxElementsInMemory(configurationHelper.getProperty(ConfigurationValue.HERD_CACHE_MAX_ELEMENTS_IN_MEMORY,Integer.class));  cacheConfiguration.setMemoryStoreEvictionPolicy(configurationHelper.getProperty(ConfigurationValue.HERD_CACHE_MEMORY_STORE_EVICTION_POLICY));  net.sf.ehcache.config.Configuration config=new net.sf.ehcache.config.Configuration();  config.addCache(cacheConfiguration);  return net.sf.ehcache.CacheManager.create(config);}  }
class C{  public static void verify(X509CRL crl,PublicKey key,Provider sigProvider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {  crl.verify(key,sigProvider);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  float lastX=ev.getX();  float lastY=ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    System.out.println("---->ACTION_DOWN");  break;case MotionEvent.ACTION_MOVE:float dx=lastX - mFirstX;float dy=lastY - mFirstY;if (mIsHorizontal == null) {if (!judgeScrollDirection(dx,dy)) {break;}}if (mIsHorizontal) {if (mIsShown && mPreItemView != mCurrentItemView) {System.out.println("2---> hiddenRight");hiddenRight(mPreItemView);}if (mIsShown && mPreItemView == mCurrentItemView) {dx=dx - mRightViewWidth;System.out.println("======dx " + dx);}if (dx < 0 && dx > -mRightViewWidth) {mCurrentItemView.scrollTo((int)(-dx),0);}return true;} else {if (mIsShown) {System.out.println("3---> hiddenRight");hiddenRight(mPreItemView);}}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:System.out.println("============ACTION_UP");clearPressedState();if (mIsShown) {System.out.println("4---> hiddenRight");hiddenRight(mPreItemView);}if (mIsHorizontal != null && mIsHorizontal) {if (mFirstX - lastX > mRightViewWidth / 2) {showRight(mCurrentItemView);} else {System.out.println("5---> hiddenRight");hiddenRight(mCurrentItemView);}return true;}break;}return super.onTouchEvent(ev);}  }
class C{  public InlineQueryResultCachedDocumentBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  protected void zeroAllCallbacks(){  zeroPathCallbacks();  vm.nrCallbacksMethodExploration=0;}  }
class C{  public static <V,E>Graph<V,Collection<V>> foldKPartiteGraph(KPartiteGraph<V,E> g,Predicate<V> p,Supplier<Graph<V,Collection<V>>> graph_factory){  Graph<V,Collection<V>> newGraph=graph_factory.get();  Collection<V> vertices=g.getVertices(p);  for (  V v : vertices) {    newGraph.addVertex(v);    for (    V s : g.getSuccessors(v)) {      for (      V t : g.getSuccessors(s)) {        if (!vertices.contains(t) || t.equals(v))         continue;        newGraph.addVertex(t);        Collection<V> v_coll=newGraph.findEdge(v,t);        if (v_coll == null) {          v_coll=new ArrayList<V>();          newGraph.addEdge(v_coll,v,t);        }        v_coll.add(s);      }    }  }  return newGraph;}  }
class C{  public void calculateValueMax(){  int max=0;  for (  final int value : values)   if (value > max)   max=value;  valueMax=max;}  }
class C{  @SuppressWarnings("unchecked") private void registerRoute(Buffer buffer){  JsonObject storageObject=new JsonObject(buffer.toString());  String requestUrl=storageObject.getString(REQUESTURL);  String routedUrl=getRoutedUrlSegment(requestUrl);  log.debug("Register route to  " + routedUrl);  JsonObject jsonHook=storageObject.getJsonObject(HOOK);  JsonArray jsonMethods=jsonHook.getJsonArray("methods");  HttpHook hook=new HttpHook(jsonHook.getString("destination"));  if (jsonMethods != null) {    hook.setMethods(jsonMethods.getList());  }  if (jsonHook.getInteger(EXPIRE_AFTER) != null) {    hook.setExpireAfter(jsonHook.getInteger(EXPIRE_AFTER));  } else {    hook.setExpireAfter(DEFAULT_HOOK_LISTENERS_EXPIRE_AFTER_TIME);  }  if (jsonHook.getInteger(QUEUE_EXPIRE_AFTER) != null) {    hook.setQueueExpireAfter(jsonHook.getInteger(QUEUE_EXPIRE_AFTER));  }  extractAndAddStaticHeadersToHook(jsonHook,hook);  String expirationTimeExpression=storageObject.getString(EXPIRATION_TIME);  if (expirationTimeExpression != null) {    try {      hook.setExpirationTime(ExpiryCheckHandler.parseDateTime(expirationTimeExpression));    } catch (    Exception e) {      log.warn("Route " + routedUrl + " has an invalid expiration time "+ expirationTimeExpression+ " and will not be registred!");      return;    }  } else {    log.warn("Route " + routedUrl + " has no expiration time and will not be registred!");    return;  }  boolean fullUrl=storageObject.getBoolean(FULL_URL,false);  hook.setFullUrl(fullUrl);  routeRepository.addRoute(routedUrl,createRoute(routedUrl,hook));}  }
class C{  private void computeDiffs(URI expoUri,Map<URI,Integer> addedBlockObjectsFromRequest,Map<URI,Integer> removedBlockObjectsFromRequest,List<URI> newInitiators,Map<BlockObjectControllerKey,Map<URI,Integer>> addedBlockObjects,Map<BlockObjectControllerKey,Map<URI,Integer>> removedBlockObjects,List<URI> addedInitiators,List<URI> removedInitiators,List<URI> addedHosts,List<URI> removedHosts,List<URI> addedClusters,List<URI> removedClusters){  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,expoUri);  Map<URI,Integer> existingMap=StringMapUtil.stringMapToVolumeMap(exportGroup.getVolumes());  List<URI> existingInitiators=StringSetUtil.stringSetToUriList(exportGroup.getInitiators());  BlockObjectControllerKey controllerKey=null;  if (exportGroup.getVolumes() != null) {    _log.info("Existing export group volumes: " + Joiner.on(',').join(exportGroup.getVolumes().keySet()));    Map<URI,Integer> existingBlockObjectMap=StringMapUtil.stringMapToVolumeMap(exportGroup.getVolumes());    for (    Map.Entry<URI,Integer> existingBlockObjectEntry : existingBlockObjectMap.entrySet()) {      BlockObject bo=BlockObject.fetch(_dbClient,existingBlockObjectEntry.getKey());      URI storageControllerUri=getExportStorageController(bo);      controllerKey=new BlockObjectControllerKey();      controllerKey.setStorageControllerUri(bo.getStorageController());      if (!storageControllerUri.equals(bo.getStorageController())) {        controllerKey.setProtectionControllerUri(storageControllerUri);      }      Log.info("Existing block object {} in storage {}",bo.getId(),controllerKey.getController());      getOrAddStorageMap(controllerKey,addedBlockObjects);      getOrAddStorageMap(controllerKey,removedBlockObjects);    }  }  for (  URI uri : addedBlockObjectsFromRequest.keySet()) {    BlockObject bo=BlockObject.fetch(_dbClient,uri);    URI storageControllerUri=getExportStorageController(bo);    controllerKey=new BlockObjectControllerKey();    controllerKey.setStorageControllerUri(bo.getStorageController());    if (!storageControllerUri.equals(bo.getStorageController())) {      controllerKey.setProtectionControllerUri(storageControllerUri);    }    getOrAddStorageMap(controllerKey,addedBlockObjects).put(uri,addedBlockObjectsFromRequest.get(uri));    getOrAddStorageMap(controllerKey,removedBlockObjects);    _log.info("Block object {} to add to storage: {}",bo.getId(),controllerKey.getController());  }  for (  URI uri : removedBlockObjectsFromRequest.keySet()) {    if (existingMap.containsKey(uri)) {      BlockObject bo=BlockObject.fetch(_dbClient,uri);      URI storageControllerUri=getExportStorageController(bo);      controllerKey=new BlockObjectControllerKey();      controllerKey.setStorageControllerUri(bo.getStorageController());      if (!storageControllerUri.equals(bo.getStorageController())) {        controllerKey.setProtectionControllerUri(storageControllerUri);      }      getOrAddStorageMap(controllerKey,addedBlockObjects);      getOrAddStorageMap(controllerKey,removedBlockObjects).put(uri,existingMap.get(uri));      _log.info("Block object {} to remove from storage: {}",bo.getId(),controllerKey.getController());    }  }  for (  URI uri : newInitiators) {    if (exportGroup.getInitiators() == null || !exportGroup.getInitiators().contains(uri.toString())) {      addedInitiators.add(uri);    } else {      existingInitiators.remove(uri);    }  }  removedInitiators.addAll(existingInitiators);  _log.info("Initiators to add: {}",addedInitiators.toArray());  _log.info("Initiators to remove: {}",removedInitiators.toArray());  if (exportGroup.forHost() || exportGroup.forCluster()) {    StringSet updatedInitiatorIds=new StringSet();    if (exportGroup.getInitiators() != null) {      updatedInitiatorIds.addAll(exportGroup.getInitiators());    }    if (removedInitiators != null) {      updatedInitiatorIds.removeAll(StringSetUtil.uriListToStringSet(removedInitiators));    }    if (addedInitiators != null) {      updatedInitiatorIds.addAll(StringSetUtil.uriListToStringSet(addedInitiators));    }    List<Initiator> updatedInitiators=new ArrayList<>();    if (updatedInitiatorIds != null && !updatedInitiatorIds.isEmpty()) {      updatedInitiators=_dbClient.queryObject(Initiator.class,StringSetUtil.stringSetToUriList(updatedInitiatorIds));    }    if (exportGroup.getHosts() != null) {      for (      URI hostId : StringSetUtil.stringSetToUriList(exportGroup.getHosts())) {        boolean remove=true;        for (        Initiator initiator : updatedInitiators) {          if (initiator.getHost().equals(hostId)) {            remove=false;            break;          }        }        if (remove) {          removedHosts.add(hostId);        }      }    }    for (    Initiator initiator : updatedInitiators) {      if ((exportGroup.getHosts() == null || !exportGroup.getHosts().contains(initiator.getHost().toString())) && !addedHosts.contains(initiator.getHost())) {        addedHosts.add(initiator.getHost());      }    }    _log.info("Hosts to add: {}",addedHosts.toArray());    _log.info("Hosts to remove: {}",removedHosts.toArray());    if (exportGroup.forCluster()) {      Set<URI> updatedHostIds=new HashSet<>();      if (exportGroup.getHosts() != null) {        updatedHostIds.addAll(StringSetUtil.stringSetToUriList(exportGroup.getHosts()));      }      if (addedHosts != null) {        updatedHostIds.addAll(addedHosts);      }      if (removedHosts != null) {        updatedHostIds.removeAll(removedHosts);      }      List<Host> updatedHosts=new ArrayList<>();      if (!updatedHostIds.isEmpty()) {        updatedHosts=_dbClient.queryObject(Host.class,updatedHostIds);      }      if (exportGroup.getClusters() != null) {        for (        URI clusterId : StringSetUtil.stringSetToUriList(exportGroup.getClusters())) {          boolean remove=true;          for (          Host host : updatedHosts) {            if (clusterId.equals(host.getCluster())) {              remove=false;              break;            }          }          if (remove) {            removedClusters.add(clusterId);          }        }      }      for (      Host host : updatedHosts) {        if ((exportGroup.getClusters() == null || !exportGroup.getClusters().contains(host.getCluster().toString())) && !addedClusters.contains(host.getCluster())) {          addedClusters.add(host.getCluster());        }      }      _log.info("Clusters to add: {}",addedClusters.toArray());      _log.info("Clusters to remove: {}",removedClusters.toArray());    }  }}  }
class C{  public static ConstantNode forPrimitive(Stamp stamp,JavaConstant constant,StructuredGraph graph){  if (stamp instanceof IntegerStamp) {    assert constant.getJavaKind().isNumericInteger() && stamp.getStackKind() == constant.getJavaKind().getStackKind();    IntegerStamp istamp=(IntegerStamp)stamp;    return forIntegerBits(istamp.getBits(),constant,graph);  } else {    assert constant.getJavaKind().isNumericFloat() && stamp.getStackKind() == constant.getJavaKind();    return forPrimitive(constant,graph);  }}  }
class C{  private MiBandSupport sendCustomNotification(VibrationProfile vibrationProfile,int flashTimes,int flashColour,int originalColour,long flashDuration,BtLEAction extraAction,TransactionBuilder builder){  getNotificationStrategy().sendCustomNotification(vibrationProfile,flashTimes,flashColour,originalColour,flashDuration,extraAction,builder);  LOG.info("Sending notification to MiBand");  return this;}  }
class C{  public EventStoreBuilder heartbeatInterval(Duration duration){  settingsBuilder.heartbeatInterval(duration);  return this;}  }
class C{  public void multiplyByScalar(float scalar){  this.dirty=true;  multiplyByScalar(scalar);}  }
class C{  private FDBigInteger mult(FDBigInteger other){  if (this.nWords == 0) {    return this;  }  if (this.size() == 1) {    return other.mult(data[0]);  }  if (other.nWords == 0) {    return other;  }  if (other.size() == 1) {    return this.mult(other.data[0]);  }  int[] r=new int[nWords + other.nWords];  mult(this.data,this.nWords,other.data,other.nWords,r);  return new FDBigInteger(r,this.offset + other.offset);}  }
class C{  public RemoteFileChannel(String hostname,File file) throws IOException {  this(hostname,file.getPath());}  }
class C{  @Nullable private Object toPaint(IXMLElement elem,String value) throws IOException {  String str=value;  if (str == null) {    return null;  }  str=str.trim().toLowerCase();  if (str.equals("none")) {    return null;  } else   if (str.equals("currentcolor")) {    String currentColor=readInheritAttribute(elem,"color","black");    if (currentColor == null || currentColor.trim().toLowerCase().equals("currentColor")) {      return null;    } else {      return toPaint(elem,currentColor);    }  } else   if (SVG_COLORS.containsKey(str)) {    return SVG_COLORS.get(str);  } else   if (str.startsWith("#") && str.length() == 7) {    return new Color(Integer.decode(str));  } else   if (str.startsWith("#") && str.length() == 4) {    int th=Integer.decode(str);    return new Color((th & 0xf) | ((th & 0xf) << 4) | ((th & 0xf0) << 4)| ((th & 0xf0) << 8)| ((th & 0xf00) << 8)| ((th & 0xf00) << 12));  } else   if (str.startsWith("rgb")) {    try {      StringTokenizer tt=new StringTokenizer(str,"() ,");      tt.nextToken();      String r=tt.nextToken();      String g=tt.nextToken();      String b=tt.nextToken();      Color c=new Color(r.endsWith("%") ? (int)(Double.parseDouble(r.substring(0,r.length() - 1)) * 2.55) : Integer.decode(r),g.endsWith("%") ? (int)(Double.parseDouble(g.substring(0,g.length() - 1)) * 2.55) : Integer.decode(g),b.endsWith("%") ? (int)(Double.parseDouble(b.substring(0,b.length() - 1)) * 2.55) : Integer.decode(b));      return c;    } catch (    Exception e) {      System.out.println("SVGInputFormat.toPaint illegal RGB value " + str);      e.printStackTrace();      return null;    }  } else   if (str.startsWith("url(")) {    String href=value.substring(4,value.length() - 1);    if (identifiedElements.containsKey(href.substring(1)) && elementObjects.containsKey(identifiedElements.get(href.substring(1)))) {      Object obj=elementObjects.get(identifiedElements.get(href.substring(1)));      return obj;    }    if (DEBUG) {      System.out.println("SVGInputFormat.toPaint not implemented for " + href);    }    return null;  } else {    return null;  }}  }
class C{  private ContentProviderOperation modifyExtensionsCapabilityForContact(long rawContactId,ContactId contact,Set<String> newExtensions,Set<String> oldExtensions){  if (newExtensions.containsAll(oldExtensions) && oldExtensions.containsAll(newExtensions)) {    return null;  }  return ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_RAW_CONTACT_MIMETYPE_DATA1,new String[]{Long.toString(rawContactId),MIMETYPE_CAPABILITY_EXTENSIONS,contact.toString()}).withValue(Data.DATA2,ServiceExtensionManager.getExtensions(newExtensions)).build();}  }
class C{  public int read(byte[] b) throws IOException {  return mData.readEntityData(b,0,b.length);}  }
class C{  public static boolean isSameCompilationUnit(ClassNode a,ClassNode b){  CompileUnit cu1=a.getCompileUnit();  CompileUnit cu2=b.getCompileUnit();  return cu1 != null && cu2 != null && cu1 == cu2;}  }
class C{  public synchronized void addTask(Runnable task){  if (worker == null) {    worker=new LayoutThread();    worker.start();  }  tasks.addElement(task);  notifyAll();}  }
class C{  public EditableOMPoly(OMPoly omp){  setGraphic(omp);}  }
class C{  public boolean disconnect(BluetoothDevice device){  if (DBG)   log("disconnect(" + device + ")");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.disconnect(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));      return false;    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public boolean smartSetBlock(final Vector position,final BaseBlock block){  this.changes++;  try {    return this.bypassAll.setBlock(position,block);  } catch (  final WorldEditException e) {    throw new RuntimeException("Unexpected exception",e);  }}  }
class C{  public static <Type>NegateValidator<Type> create(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type> validator){  return new NegateValidator<>(errorMessage,validator);}  }
class C{  public ReferenceGenome referenceGenome(Sex sex){  return mReferences[sex.ordinal()];}  }
class C{  void createSceneVao(){  int vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  long bufferSize=4 * (3 + 3) * mesh.numVertices;  long normalsOffset=4L * 3 * mesh.numVertices;  glBufferData(GL_ARRAY_BUFFER,bufferSize,GL_STATIC_DRAW);  glBufferSubData(GL_ARRAY_BUFFER,0L,mesh.positions);  glBufferSubData(GL_ARRAY_BUFFER,normalsOffset,mesh.normals);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);  this.vaoScene=vao;}  }
class C{  public Cuboid expand(Vector3D other){  return new Cuboid(min.subtract(other),max.add(other));}  }
class C{  public CircleRegion(Match match,Vector center,double radius){  super(new RegionBounds(match,Cuboid.between(new Vector(center.getX() - radius,Double.NEGATIVE_INFINITY,center.getZ() - radius),new Vector(center.getX() + radius,Double.POSITIVE_INFINITY,center.getZ() + radius))));  this.center=center;  this.radius=radius;}  }
class C{  public AirspyDeviceInformation(){}  }
class C{  void close(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write(")");}  }
class C{  public DataParseException(Throwable cause){  super(cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:01.727 -0500",hash_original_method="54F56FCB0FE10A11F3FC3B4B0BA615D4",hash_generated_method="E5158DEF50508063A3FAA4CB78999168") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static boolean isPositiveCompletion(int reply){  return (reply >= 200 && reply < 300);}  }
class C{  public static RectF adjustToFitInBounds(RectF rect,int viewportWidth,int viewportHeight){  float dx=0, dy=0;  RectF newRect=new RectF(rect);  if (newRect.width() < viewportWidth) {    dx=viewportWidth / 2 - (newRect.left + newRect.right) / 2;  } else {    if (newRect.left > 0) {      dx=-newRect.left;    } else     if (newRect.right < viewportWidth) {      dx=viewportWidth - newRect.right;    }  }  if (newRect.height() < viewportHeight) {    dy=viewportHeight / 2 - (newRect.top + newRect.bottom) / 2;  } else {    if (newRect.top > 0) {      dy=-newRect.top;    } else     if (newRect.bottom < viewportHeight) {      dy=viewportHeight - newRect.bottom;    }  }  if (dx != 0 || dy != 0) {    newRect.offset(dx,dy);  }  return newRect;}  }
class C{  public CrashInfo(Throwable tr){  StringWriter sw=new StringWriter();  tr.printStackTrace(new PrintWriter(sw));  stackTrace=sw.toString();  exceptionMessage=tr.getMessage();  Throwable rootTr=tr;  while (tr.getCause() != null) {    tr=tr.getCause();    if (tr.getStackTrace() != null && tr.getStackTrace().length > 0) {      rootTr=tr;    }    String msg=tr.getMessage();    if (msg != null && msg.length() > 0) {      exceptionMessage=msg;    }  }  exceptionClassName=rootTr.getClass().getName();  if (rootTr.getStackTrace().length > 0) {    StackTraceElement trace=rootTr.getStackTrace()[0];    throwFileName=trace.getFileName();    throwClassName=trace.getClassName();    throwMethodName=trace.getMethodName();    throwLineNumber=trace.getLineNumber();  } else {    throwFileName="unknown";    throwClassName="unknown";    throwMethodName="unknown";    throwLineNumber=0;  }}  }
class C{  private CColorEvaluator(){}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static boolean isAppInBackground(){  return (null == mCurrentActivity) && (null != getInstance()) && getInstance().mIsInBackground;}  }
class C{  @RequestMapping(value="/contactEmails",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public ResponseEntity<Void> create(@Valid @RequestBody ContactEmail contactEmail) throws URISyntaxException {  log.debug("REST request to save ContactEmail : {}",contactEmail);  if (contactEmail.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new contactEmail cannot already have an ID").build();  }  ownerService.checkNewOwner(contactEmail);  contactEmail.setEmail(findOrSaveEmail(contactEmail.getEmail()));  contactEmail=contactEmailRepository.save(contactEmail);  Contact contact=contactRepository.findOne(contactEmail.getContact().getId());  contact.setPreferredEmail(contactEmail.getEmail());  contact=contactRepository.save(contact);  return ResponseEntity.created(new URI("/api/contactEmails/" + contactEmail.getId())).build();}  }
class C{  public void testCase6(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-116,-45,126,-116,20,61,14,-86,-65,86,1,35,35,106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void updateClob(String columnLabel,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public Boolean continuous(){  return continuous;}  }
class C{  public void finishUpdating(){  W_deltas=null;  W_updaters=null;  B_deltas=null;  B_updaters=null;  activations=unactivated=deltas=null;  W.get(0).mutableMultiply(1.0 - p_i);  B.get(0).mutableMultiply(1.0 - p_i);  for (int i=1; i < W.size(); i++) {    W.get(i).mutableMultiply(1.0 - p_o);    B.get(i).mutableMultiply(1.0 - p_o);  }}  }
class C{  public void removeAllSections(){  this.sections.clear();}  }
class C{  public static void destroy(){  if (instance != null) {    instance.getDatabase().close();  }}  }
class C{  public DERUTCTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=Strings.toByteArray(dateF.format(time));}  }
class C{  public boolean containsValue(Object value,boolean identity){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return true;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return true;  } else   if (identity) {    if (value == zeroValue)     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return true;  } else {    if (hasZeroValue && value.equals(zeroValue))     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return true;  }  return false;}  }
class C{  public NewFilterWizard(){  setWindowTitle("New Filter");}  }
class C{  public static File locate(String path){  File dir=new File("src/test/resources").getAbsoluteFile();  while (dir != null) {    File needle=new File(dir,path);    if (needle.exists()) {      return needle;    }    dir=dir.getParentFile();  }  throw new WebDriverException(new FileNotFoundException("Could not find " + path + " in the project"));}  }
class C{  public void testDispose_0args(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.dispose();  jmri.util.JUnitAppender.assertWarnMessage("Dispose called without knowing the original throttle listener");}  }
class C{  public void testTestBitNegative3(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=300;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public void intersection(Rectangle2D r){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(r);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],r.getMinX());  clip[1]=Math.max(clip[1],r.getMinY());  clip[6]=Math.min(clip[6],r.getMaxX());  clip[7]=Math.min(clip[7],r.getMaxY());}  }
class C{  private void handleMetadata(String meta,JSONMessage message){  String[] tokens=meta.split("\\s+",2);  String type=tokens[0];  String args=tokens.length > 1 ? tokens[1] : "";switch (type) {case "get_weight":    String weight=tokens[1];  LOG.info("WEIGHT: %s = %.3f",weight,Decoder.weights.getWeight(weight));break;case "set_weights":{String[] argTokens=args.split("\\s+");for (int i=0; i < argTokens.length; i+=2) {  String feature=argTokens[i];  String newValue=argTokens[i + 1];  float old_weight=Decoder.weights.getWeight(feature);  Decoder.weights.set(feature,Float.parseFloat(newValue));  LOG.info("set_weights: {} {} -> {}",feature,old_weight,Decoder.weights.getWeight(feature));}message.addMetaData("weights " + Decoder.weights.toString());break;}case "get_weights":message.addMetaData("weights " + Decoder.weights.toString());break;case "add_rule":{String argTokens[]=args.split(" \\|\\|\\| ");if (argTokens.length < 3) {LOG.error("* INVALID RULE '{}'",meta);return;}String lhs=argTokens[0];String source=argTokens[1];String target=argTokens[2];String featureStr="";String alignmentStr="";if (argTokens.length > 3) featureStr=argTokens[3];if (argTokens.length > 4) alignmentStr=" ||| " + argTokens[4];String ruleString=(joshuaConfiguration.search_algorithm.equals("stack")) ? String.format("%s ||| [X,1] %s ||| [X,1] %s ||| -1 %s %s",lhs,source,target,featureStr,alignmentStr) : String.format("%s ||| %s ||| %s ||| -1 %s %s",lhs,source,target,featureStr,alignmentStr);Rule rule=new HieroFormatReader().parseLine(ruleString);decoder.addCustomRule(rule);LOG.info("Added custom rule {}",rule.toString());break;}case "list_rules":LOG.info("list_rules");ArrayList<Trie> nodes=new ArrayList<>();nodes.add(decoder.getCustomPhraseTable().getTrieRoot());while (nodes.size() > 0) {Trie trie=nodes.remove(0);if (trie == null) continue;if (trie.hasRules()) {for (Rule rule : trie.getRuleCollection().getRules()) {message.addRule(rule.toString());LOG.debug("Found rule: " + rule);}}if (trie.getExtensions() != null) nodes.addAll(trie.getExtensions());}break;case "remove_rule":{Rule rule=new HieroFormatReader().parseLine(args);LOG.info("remove_rule " + rule);Trie trie=decoder.getCustomPhraseTable().getTrieRoot();int[] sourceTokens=rule.getFrench();for (int sourceToken : sourceTokens) {Trie nextTrie=trie.match(sourceToken);if (nextTrie == null) return;trie=nextTrie;}if (trie.hasRules()) {for (Rule ruleCand : trie.getRuleCollection().getRules()) {if (Arrays.equals(rule.getEnglish(),ruleCand.getEnglish())) {trie.getRuleCollection().getRules().remove(ruleCand);break;}}}break;}}}  }
class C{  private void readMoreChars() throws IOException {  if (availableCapacity(charBuffer) == 0) {    if (charBuffer.position() > 0) {      charBuffer.compact().flip();    } else {      charBuffer=grow(charBuffer);    }  }  int limit=charBuffer.limit();  int numChars=reader.read(charBuffer.array(),limit,availableCapacity(charBuffer));  if (numChars == -1) {    endOfInput=true;  } else {    charBuffer.limit(limit + numChars);  }}  }
class C{  public synchronized void reopen(){  if (this.logWriter.isClosed()) {    createLogWriter();  }}  }
class C{  public SessionDiagnosticsDataType clone(){  SessionDiagnosticsDataType result=new SessionDiagnosticsDataType();  result.SessionId=SessionId;  result.SessionName=SessionName;  result.ClientDescription=ClientDescription == null ? null : ClientDescription.clone();  result.ServerUri=ServerUri;  result.EndpointUrl=EndpointUrl;  result.LocaleIds=LocaleIds == null ? null : LocaleIds.clone();  result.ActualSessionTimeout=ActualSessionTimeout;  result.MaxResponseMessageSize=MaxResponseMessageSize;  result.ClientConnectionTime=ClientConnectionTime;  result.ClientLastContactTime=ClientLastContactTime;  result.CurrentSubscriptionsCount=CurrentSubscriptionsCount;  result.CurrentMonitoredItemsCount=CurrentMonitoredItemsCount;  result.CurrentPublishRequestsInQueue=CurrentPublishRequestsInQueue;  result.TotalRequestCount=TotalRequestCount == null ? null : TotalRequestCount.clone();  result.UnauthorizedRequestCount=UnauthorizedRequestCount;  result.ReadCount=ReadCount == null ? null : ReadCount.clone();  result.HistoryReadCount=HistoryReadCount == null ? null : HistoryReadCount.clone();  result.WriteCount=WriteCount == null ? null : WriteCount.clone();  result.HistoryUpdateCount=HistoryUpdateCount == null ? null : HistoryUpdateCount.clone();  result.CallCount=CallCount == null ? null : CallCount.clone();  result.CreateMonitoredItemsCount=CreateMonitoredItemsCount == null ? null : CreateMonitoredItemsCount.clone();  result.ModifyMonitoredItemsCount=ModifyMonitoredItemsCount == null ? null : ModifyMonitoredItemsCount.clone();  result.SetMonitoringModeCount=SetMonitoringModeCount == null ? null : SetMonitoringModeCount.clone();  result.SetTriggeringCount=SetTriggeringCount == null ? null : SetTriggeringCount.clone();  result.DeleteMonitoredItemsCount=DeleteMonitoredItemsCount == null ? null : DeleteMonitoredItemsCount.clone();  result.CreateSubscriptionCount=CreateSubscriptionCount == null ? null : CreateSubscriptionCount.clone();  result.ModifySubscriptionCount=ModifySubscriptionCount == null ? null : ModifySubscriptionCount.clone();  result.SetPublishingModeCount=SetPublishingModeCount == null ? null : SetPublishingModeCount.clone();  result.PublishCount=PublishCount == null ? null : PublishCount.clone();  result.RepublishCount=RepublishCount == null ? null : RepublishCount.clone();  result.TransferSubscriptionsCount=TransferSubscriptionsCount == null ? null : TransferSubscriptionsCount.clone();  result.DeleteSubscriptionsCount=DeleteSubscriptionsCount == null ? null : DeleteSubscriptionsCount.clone();  result.AddNodesCount=AddNodesCount == null ? null : AddNodesCount.clone();  result.AddReferencesCount=AddReferencesCount == null ? null : AddReferencesCount.clone();  result.DeleteNodesCount=DeleteNodesCount == null ? null : DeleteNodesCount.clone();  result.DeleteReferencesCount=DeleteReferencesCount == null ? null : DeleteReferencesCount.clone();  result.BrowseCount=BrowseCount == null ? null : BrowseCount.clone();  result.BrowseNextCount=BrowseNextCount == null ? null : BrowseNextCount.clone();  result.TranslateBrowsePathsToNodeIdsCount=TranslateBrowsePathsToNodeIdsCount == null ? null : TranslateBrowsePathsToNodeIdsCount.clone();  result.QueryFirstCount=QueryFirstCount == null ? null : QueryFirstCount.clone();  result.QueryNextCount=QueryNextCount == null ? null : QueryNextCount.clone();  result.RegisterNodesCount=RegisterNodesCount == null ? null : RegisterNodesCount.clone();  result.UnregisterNodesCount=UnregisterNodesCount == null ? null : UnregisterNodesCount.clone();  return result;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public long copy(final InputStream from,final OutputStream to,final long bytesToCopy) throws IOException {  Preconditions.checkState(bytesToCopy > 0);  long copied=0;  byte[] tmp=mByteArrayPool.get(mTempBufSize);  try {    while (copied < bytesToCopy) {      int read=from.read(tmp,0,(int)Math.min(mTempBufSize,bytesToCopy - copied));      if (read == -1) {        return copied;      }      to.write(tmp,0,read);      copied+=read;    }    return copied;  }  finally {    mByteArrayPool.release(tmp);  }}  }
class C{  static String packageNameOf(@NonNull Element type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=enclosing;  }}  }
class C{  void zrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nyx=(float)(yx * ct + xx * st);  float Nyy=(float)(yy * ct + xy * st);  float Nyz=(float)(yz * ct + xz * st);  float Nyo=(float)(yo * ct + xo * st);  float Nxx=(float)(xx * ct - yx * st);  float Nxy=(float)(xy * ct - yy * st);  float Nxz=(float)(xz * ct - yz * st);  float Nxo=(float)(xo * ct - yo * st);  yo=Nyo;  yx=Nyx;  yy=Nyy;  yz=Nyz;  xo=Nxo;  xx=Nxx;  xy=Nxy;  xz=Nxz;}  }
class C{  public void test_indexOfLjava_lang_ObjectI(){  assertTrue("Failed to find correct index",(tVector.indexOf("Test 98",50) == 98));  assertTrue("Found index of bogus element",(tVector.indexOf("Test 1001",50) == -1));  tVector.setElementAt(null,20);  tVector.setElementAt(null,40);  tVector.setElementAt(null,60);  assertTrue("a) Incorrect indexOf returned for null: " + tVector.indexOf(null,25),tVector.indexOf(null,25) == 40);  assertTrue("b) Incorrect indexOf returned for null: " + tVector.indexOf(null,20),tVector.indexOf(null,20) == 20);  try {    tVector.indexOf(null,-1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  private void initUI(){  adjustedFont=FontSizer.INSTANCE.getAdjustedDefaultFont();  int width=DEFAULT_WIDTH;  int height=DEFAULT_HEIGHT;  if (adjustedFont != null) {    FontMetrics fontMetrics=this.getFontMetrics(FontSizer.INSTANCE.getAdjustedDefaultFont());    int message1Width=fontMetrics.stringWidth(controller.getLocaliser().getString("showOpenUriView.message1"));    int message2Width=fontMetrics.stringWidth(controller.getLocaliser().getString("showOpenUriView.message2"));    width=Math.max(Math.max(message1Width,message2Width) + WIDTH_DELTA,width);    height=Math.max(height,NUMBER_OF_ROWS * fontMetrics.getHeight() + HEIGHT_DELTA);  }  setMinimumSize(new Dimension(width,height));  positionDialogRelativeToParent(this,0.5D,0.47D);  setLayout(new GridBagLayout());  GridBagConstraints constraints=new GridBagConstraints();  JLabel filler00=new JLabel();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=0.3;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  add(filler00,constraints);  JLabel filler01=new JLabel();  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=2;  constraints.gridy=1;  constraints.weightx=0.3;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  add(filler01,constraints);  ImageIcon bigIcon=ImageLoader.createImageIcon(ImageLoader.QUESTION_MARK_ICON_FILE);  constraints.fill=GridBagConstraints.BOTH;  constraints.gridx=0;  constraints.gridy=1;  constraints.weightx=0.5;  constraints.weighty=0.2;  constraints.gridwidth=1;  constraints.gridheight=3;  constraints.anchor=GridBagConstraints.CENTER;  JLabel bigIconLabel=new JLabel(bigIcon);  add(bigIconLabel,constraints);  JLabel messageLabel1=new JLabel();  messageLabel1.setText(controller.getLocaliser().getString("showOpenUriView.message1"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=1;  constraints.weightx=0.8;  constraints.weighty=0.3;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_START;  add(messageLabel1,constraints);  JLabel messageLabel2=new JLabel();  messageLabel2.setText(controller.getLocaliser().getString("showOpenUriView.message2"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=2;  constraints.weightx=0.8;  constraints.weighty=0.3;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.ABOVE_BASELINE_LEADING;  add(messageLabel2,constraints);  rememberCheckBox=new JCheckBox();  rememberCheckBox.setText(controller.getLocaliser().getString("showOpenUriView.rememberMyDecision"));  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=3;  constraints.weightx=0.8;  constraints.weighty=0.3;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.ABOVE_BASELINE_LEADING;  add(rememberCheckBox,constraints);  JPanel buttonPanel=new JPanel();  constraints.fill=GridBagConstraints.NONE;  constraints.gridx=1;  constraints.gridy=4;  constraints.weightx=0.8;  constraints.weighty=0.1;  constraints.gridwidth=4;  constraints.gridheight=1;  constraints.anchor=GridBagConstraints.LINE_END;  add(buttonPanel,constraints);  ShowOpenUriCancelAction cancelAction=new ShowOpenUriCancelAction(controller,this,this);  cancelButton=new JButton(cancelAction);  cancelButton.setText(controller.getLocaliser().getString("showOpenUriView.noText"));  buttonPanel.add(cancelButton);  ShowOpenUriSubmitAction showOpenUriSubmitAction=new ShowOpenUriSubmitAction(mainFrame,this.bitcoinController,this,this);  submitButton=new JButton(showOpenUriSubmitAction);  submitButton.setText(controller.getLocaliser().getString("showOpenUriView.yesText"));  buttonPanel.add(submitButton);  JLabel filler3=new JLabel();  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridx=2;  constraints.gridy=4;  constraints.weightx=0.05;  constraints.weighty=0.1;  constraints.gridwidth=1;  constraints.anchor=GridBagConstraints.LINE_START;  add(filler3,constraints);}  }
class C{  public JsonObjectRequest(int method,String url,String requestBody,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_NameAndType_info cu=(CONSTANT_NameAndType_info)cp;  i=((CONSTANT_Utf8_info)(constant_pool[name_index])).compareTo(cp_constant_pool[cu.name_index]);  if (i != 0)   return i;  return ((CONSTANT_Utf8_info)(constant_pool[descriptor_index])).compareTo(cp_constant_pool[cu.descriptor_index]);}  }
class C{  public static DumpedPrivateKey fromBase58(@Nullable NetworkParameters params,String base58) throws AddressFormatException {  return new DumpedPrivateKey(params,base58);}  }
class C{  private boolean validateNode(AugmentedNode<ILineSegment> n){  if (n == null)   return true;  ILineSegment min=n.min();  ILineSegment max=n.max();  if (n.value() != null) {    if (!min.equals(n.value())) {      error(n);      return false;    }    if (!max.equals(n.value())) {      error(n);      return false;    }    return true;  }  if (!validateNode(n.left())) {    return false;  }  if (!validateNode(n.right())) {    return false;  }  if (n.left() != null) {    if (!min.equals(n.left().min())) {      error(n);      return false;    }  }  if (n.right() != null) {    if (!max.equals(n.right().max())) {      error(n);      return false;    }  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_beforeCode_2_();}  }
class C{  public static RegisterOperand insertBinary(Instruction s,IR ir,Operator operator,TypeReference type,Operand o1,Operand o2){  RegisterOperand t=ir.regpool.makeTemp(type);  s.insertBefore(CPOS(s,Binary.create(operator,t,o1,o2)));  return t.copyD2U();}  }
class C{  public final double sampleCount(){  long count=_count.get();  long lastCount=_lastCount.getAndSet(count);  return count - lastCount;}  }
class C{  private void sendLocation(String address,LatLng latLng){  Message message=new Message();  message.fillMessageForSend(activeUser,address,Const.MessageType.TYPE_LOCATION,null,latLng);  etMessage.setText("");  if (SocketManager.getInstance().isSocketConnect()) {    JSONObject emitMessage=EmitJsonCreator.createEmitSendMessage(message);    SocketManager.getInstance().emitMessage(Const.EmitKeyWord.SEND_MESSAGE,emitMessage);  } else {    unSentMessageList.add(message);  }  onMessageSent(message);}  }
class C{  void transfer(HashMap.Entry[] newTable){  int newCapacity=newTable.length;  for (Entry e=header.after; e != header; e=e.after) {    int index=indexFor(e.hash,newCapacity);    e.next=newTable[index];    newTable[index]=e;  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean makeDirsForFile(final File file){  if (file == null)   return false;  Log.d("FileUtils","file: " + file + " isDirectory(): "+ file.isDirectory());  final String fileParentDir=file.getParent();  final File fileDir=TextUtils.isEmpty(fileParentDir) ? null : new File(file.getParent());  boolean isSucceed=fileDir == null || fileDir.exists();  if (isSucceed)   Log.d("FileUtils","fileDir: " + fileDir + " already exists(): "+ isSucceed);  if (!isSucceed && fileDir != null) {    isSucceed=fileDir.mkdirs();    Log.d("FileUtils","fileDir: " + fileDir + " mkdirs(): "+ isSucceed);  }  return isSucceed;}  }
class C{  public void removePresetDirectory(String id){  File presetDir=getPresetDirectory(id);  if (presetDir.isDirectory()) {    killDirectory(presetDir);  }}  }
class C{  @Override public boolean hasSideEffect(){  return false;}  }
class C{  public IndexOutOfBoundsException(){}  }
class C{  public void freezeAllHiddenPages(){  for (int i=0; i < mRecentTabs.size(); i++) {    freeze(mRecentTabs.get(i).get());  }  mRecentTabs.clear();}  }
class C{  public ProtocolException(){}  }
class C{  public boolean testAndSetRecvSequencenumber(int newValue){  if (recvSequenceNumber == null) {    recvSequenceNumber=new AtomicInteger(newValue);    return true;  }  int oldValue=recvSequenceNumber.get();  boolean wrapAround=(oldValue & 0x00000000ffffffff) >= 4294966271L;  boolean exactMatch=oldValue + 1 == newValue;  boolean wrapMatch=wrapAround & (newValue < 1024);  boolean match=exactMatch | wrapMatch;  if (match)   recvSequenceNumber.set(newValue);  return match;}  }
class C{  @Override public List<String> addJobFlowStepsRequest(AmazonElasticMapReduceClient emrClient,AddJobFlowStepsRequest addJobFlowStepsRequest){  return emrClient.addJobFlowSteps(addJobFlowStepsRequest).getStepIds();}  }
class C{  public SQLDataException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public final LogFile loadLogFileBySession(final long id){  LogFile logFile=null;  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_LOGFILE,ContentProvider.CONTENT_URI_SESSION_SUFFIX),id),null,null,null,null);  if (cursor.moveToNext()) {    logFile=new LogFile(cursor.getString(cursor.getColumnIndex(Schema.COL_MANUFACTURER)),cursor.getString(cursor.getColumnIndex(Schema.COL_MODEL)),cursor.getString(cursor.getColumnIndex(Schema.COL_REVISION)),cursor.getString(cursor.getColumnIndex(Schema.COL_SWID)),cursor.getString(cursor.getColumnIndex(Schema.COL_SWVER)),cursor.getInt(cursor.getColumnIndex(Schema.COL_SESSION_ID)));  }  cursor.close();  return logFile;}  }
class C{  public JdkProvider(){}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(m_Quantity).append(" * ").append(m_Name).append(" = ").append(getTotal());  return sb.toString();}  }
class C{  public boolean isSetResponseTo(){  return EncodingUtils.testBit(__isset_bitfield,__RESPONSETO_ISSET_ID);}  }
class C{  public void replaceAnnFile(Reader readerAnnFile){  m_doc.replaceAnnFile(readerAnnFile);}  }
class C{  private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){  double x0=bar.getMinX();  double x1=bar.getMaxX();  double y0=bar.getMinY();  double y1=bar.getMaxY();  if (base == RectangleEdge.TOP) {    x0+=xOffset;    x1+=xOffset;    if (!pegShadow) {      y0+=yOffset;    }    y1+=yOffset;  } else   if (base == RectangleEdge.BOTTOM) {    x0+=xOffset;    x1+=xOffset;    y0+=yOffset;    if (!pegShadow) {      y1+=yOffset;    }  } else   if (base == RectangleEdge.LEFT) {    if (!pegShadow) {      x0+=xOffset;    }    x1+=xOffset;    y0+=yOffset;    y1+=yOffset;  } else   if (base == RectangleEdge.RIGHT) {    x0+=xOffset;    if (!pegShadow) {      x1+=xOffset;    }    y0+=yOffset;    y1+=yOffset;  }  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  protected void serializePI(ProcessingInstruction node) throws SAXException {  ProcessingInstruction pi=node;  String name=pi.getNodeName();  if ((fFeatures & WELLFORMED) != 0) {    isPIWellFormed(node);  }  if (!applyFilter(node,NodeFilter.SHOW_PROCESSING_INSTRUCTION)) {    return;  }  if (name.equals("xslt-next-is-raw")) {    fNextIsRaw=true;  } else {    this.fSerializer.processingInstruction(name,pi.getData());  }}  }
class C{  static String plurals(final String s,final int i){  return i == 1 ? "one " + s : i + " " + s+ "s";}  }
class C{  public String contentType(){  return this.contentType;}  }
class C{  private SnmpPduRequest newErrorResponsePdu(SnmpPduPacket req,int s,int i){  SnmpPduRequest result=newValidResponsePdu(req,null);  result.errorStatus=s;  result.errorIndex=i;  result.varBindList=req.varBindList;  ((SnmpAdaptorServer)adaptorServer).updateErrorCounters(result.errorStatus);  return result;}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Mr Ross");  final StendhalRPZone zone=SingletonRepository.getRPWorld().getZone("int_ados_ross_house");  new FatherNPC().createDadNPC(zone);  return true;}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  if (!mode.equalsIgnoreCase("CBC")) {    throw new NoSuchAlgorithmException(mode + " cannot be used");  }}  }
class C{  public static void executeApiTask(ExportGroupService exportGroupService,ExecutorService executorService,DbClient dbClient,VirtualArray virtualArray,Project project,ExportGroup exportGroup,Map<URI,Map<URI,Integer>> storageMap,List<URI> clusters,List<URI> hosts,List<URI> initiators,Map<URI,Integer> volumeMap,ExportPathParameters pathParam,String task,TaskResourceRep taskRes){  CreateExportGroupSchedulingThread schedulingThread=new CreateExportGroupSchedulingThread(exportGroupService,virtualArray,project,exportGroup,storageMap,clusters,hosts,initiators,volumeMap,pathParam,task,taskRes);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    String message="Failed to execute export group creation API task for resource " + exportGroup.getId();    _log.error(message);    taskRes.setMessage(message);    exportGroup.setInactive(true);    dbClient.updateAndReindexObject(exportGroup);  }}  }
class C{  public static void writeDocument(Document doc,String filename){  writeDocument(doc,filename,false);}  }
class C{  public CResumeHotkeyAction(final JFrame parent,final IFrontEndDebuggerProvider debugPerspectiveModel){  Preconditions.checkNotNull(debugPerspectiveModel,"IE01653: Debug perspective model argument can not be null");  m_parent=parent;  m_debugPerspectiveModel=debugPerspectiveModel;}  }
class C{  @Override public boolean load(File fi,boolean registerDeferred) throws JmriConfigureXmlException {  return this.load(FileUtil.fileToURL(fi),registerDeferred);}  }
class C{  public static Hashtable<String,Object> parseQuery(String query,boolean keepDuplicates) throws URISyntaxException {  if (query == null) {    return null;  }  Hashtable<String,Object> parameters=new Hashtable<String,Object>();  List<NameValuePair> nvps=parseQueryOrdered(query);  Iterator<NameValuePair> i=nvps.iterator();  while (i.hasNext()) {    NameValuePair nvp=i.next();    if (parameters.containsKey(nvp.getName())) {      if (keepDuplicates == true) {        Object v=parameters.get(nvp.getName());        if (v instanceof String) {          parameters.put(nvp.getName(),new String[]{(String)v,nvp.getValue()});        } else {          int size=((String[])v).length;          String array[]=new String[size + 1];          System.arraycopy(v,0,array,0,size);          array[size]=nvp.getValue();          parameters.put(nvp.getName(),nvp.getValue());        }      }    } else {      parameters.put(nvp.getName(),(nvp.getValue() == null) ? String.valueOf(true) : nvp.getValue());    }  }  return parameters;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.408 -0500",hash_original_method="1F926905027AA18BF39C8A7A893395A9",hash_generated_method="CE549DC87D1EC01EC2BEE46F103ED306") private void cancelReconnectAlarm(DataConnectionAc dcac){  if (dcac == null)   return;  PendingIntent intent=dcac.getReconnectIntentSync();  if (intent != null) {    AlarmManager am=(AlarmManager)mPhone.getContext().getSystemService(Context.ALARM_SERVICE);    am.cancel(intent);    dcac.setReconnectIntentSync(null);  }}  }
class C{  public final void layerProtocol(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No layered protocol unless connected.");  }  this.layered=LayerType.LAYERED;  this.secure=secure;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SRuntimePackage.EXECUTION_SLOT__VALUE:    setValue(newValue);  return;case SRuntimePackage.EXECUTION_SLOT__FQ_NAME:setFqName((String)newValue);return;case SRuntimePackage.EXECUTION_SLOT__WRITABLE:setWritable((Boolean)newValue);return;case SRuntimePackage.EXECUTION_SLOT__TYPE:setType((org.yakindu.base.types.Type)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void saveAsTable(){  int retVal=fileChooser.showSaveDialog(null);  if (retVal == JFileChooser.APPROVE_OPTION) {    _saveFileName=fileChooser.getSelectedFile().getPath();    _saveFile=new File(_saveFileName);    if (log.isDebugEnabled()) {      log.debug("File chosen: " + _saveFileName);    }  }  saveToCSV();}  }
class C{  private ArrayList<String> sortStrings(){  if (sortFields.isEmpty())   return new ArrayList<>();  String className=queryClass.getSimpleName();  ArrayList<String> sorts=new ArrayList<>();  for (int i=0; i < sortFields.size(); i++) {    sorts.add(String.format("%s (%s)",Ruqus.visibleFieldFromField(className,sortFields.get(i)),Ruqus.typeEnumForField(className,sortFields.get(i)).getPrettySortString(sortDirs.get(i))));  }  return sorts;}  }
class C{  public static void startTimer(String name){  if (openTimers.containsKey(name)) {    throw new IllegalArgumentException("timer already exists");  }  openTimers.put(name,System.nanoTime());}  }
class C{  public Bagging(Regressor baseRegressor,int extraSamples,boolean simultaniousTraining){  this(baseRegressor,extraSamples,simultaniousTraining,DEFAULT_ROUNDS,new Random(1));}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ModbusException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Object monitor(Object object){  if (!isEnabled() || object == null)   return object; else   return monitorNoCheck(object,getInterfaces(object.getClass()));}  }
class C{  public EncryptedSageFile(SageFileSource sageFileSource) throws IOException {  this(sageFileSource,IOUtils.getCryptoKeys());}  }
class C{  public int iterativeSize(){  IntList p=this;  int size=0;  while (p != null) {    size+=1;    p=p.tail;  }  return size;}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  AbstractItem<?,?> that=(AbstractItem<?,?>)o;  return mIdentifier == that.mIdentifier;}  }
class C{  public static Iterable<String> contentFor(final String path){  if (API.manualAPI != null)   return API.manualAPI.contentFor(path);  return null;}  }
class C{  public List<V> removeAll(K key){  key=sanitizeKey(key);  List<V> removed=map.remove(key);  if (removed == null) {    return Collections.emptyList();  }  List<V> unmodifiableCopy=Collections.unmodifiableList(new ArrayList<V>(removed));  removed.clear();  return unmodifiableCopy;}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  int chksum=0x00;  int loop;  for (loop=0; loop < len - 1; loop++) {    chksum^=getElement(loop);  }  return ((chksum & 0xFF) == getElement(len - 1));}  }
class C{  static synchronized String format(String key,Object[] arguments){  if (messageFormat == null) {    messageFormat=new MessageFormat(textResources.getString(key));  } else {    messageFormat.applyPattern(textResources.getString(key));  }  return (messageFormat.format(arguments));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.586 -0500",hash_original_method="88171EFEE6286ACCEFBDA2CCA56DC062",hash_generated_method="408EE93D32F3AD0106656C9DF079935A") public boolean onIsMultiPane(){  boolean preferMultiPane=getResources().getBoolean(com.android.internal.R.bool.preferences_prefer_dual_pane);  return preferMultiPane;}  }
class C{  public void decrement(){  value--;}  }
class C{  private boolean parse(){  if (mData == null) {    return true;  }  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(mData));  mDnsQueryName=readDnsName(dis);  if (mDnsQueryName == null) {    return false;  }  try {    mDnsType=dis.readUnsignedShort();    mVersion=dis.readUnsignedByte();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if (mDnsType == WifiP2pDnsSdServiceInfo.DNS_TYPE_PTR) {    String rData=readDnsName(dis);    if (rData == null) {      return false;    }    if (rData.length() <= mDnsQueryName.length()) {      return false;    }    mInstanceName=rData.substring(0,rData.length() - mDnsQueryName.length() - 1);  } else   if (mDnsType == WifiP2pDnsSdServiceInfo.DNS_TYPE_TXT) {    return readTxtData(dis);  } else {    return false;  }  return true;}  }
class C{  protected Path createTriangle(int x,int y,float triangleSize,float height,boolean flip){  Path path=new Path();  path.setFillType(Path.FillType.EVEN_ODD);  triangleSize/=2;  Vector2D[] p=createTriangleVertices(triangleSize);  p[0]=p[2].add(p[0].subtract(p[2]).scalarMultiply(height));  p[1]=p[2].add(p[1].subtract(p[2]).scalarMultiply(height));  path.moveTo((float)p[0].getX() + x,(float)p[0].getY() + y);  path.lineTo((float)p[1].getX() + x,(float)p[1].getY() + y);  path.lineTo((float)p[2].getX() + x,(float)p[2].getY() + y);  path.close();  return path;}  }
class C{  public void error(Element e,String msg){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  public SQLTransactionRollbackException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public int strId2IdxAdd(Map fmap){  strId2Idx(fmap);  if (idx < 0) {    idx=fmap.size();    fmap.put(strId,new Integer(idx));  }  return idx;}  }
class C{  public void keyPressed(KeyEvent e){  if ((e.getKeyCode() == accelerateKey) || (e.getKeyCode() == accelerateKey1)) {    _controlPanel.accelerate1();  } else   if (e.getKeyCode() == accelerateKey2) {    _controlPanel.accelerate10();  } else   if ((e.getKeyCode() == decelerateKey) || (e.getKeyCode() == decelerateKey1)) {    _controlPanel.decelerate1();  } else   if (e.getKeyCode() == decelerateKey2) {    _controlPanel.decelerate10();  } else   if (e.getKeyCode() == forwardKey) {    _buttonPanel.forwardButton.doClick();  } else   if (e.getKeyCode() == reverseKey) {    _buttonPanel.reverseButton.doClick();  } else   if (e.getKeyCode() == stopKey) {    _buttonPanel.stop();  }}  }
class C{  public boolean isSetTriggerName(){  return this.triggerName != null;}  }
class C{  public void onDrawShadow(Paint paint){  shadowPaint.setShadowLayer(mShadowRadius,0.0f,mShadowOffset,shadowColor);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected AwaitExpressionImpl(){  super();}  }
class C{  protected long unwrapKey(Object key){  return ((Long)key).longValue();}  }
class C{  @OnOpen public void onOpen(Session session) throws IOException {  if (Boolean.parseBoolean(InitParametersInjector.get(InitParametersInjector.INIT_PARAM_ENABLE_ROLES))) {    Principal principal=session.getUserPrincipal();    if (principal == null) {      session.getBasicRemote().sendText("Login first to be able to use the Services websocket channel.");      session.close();    }  }  openSessions.put(session.getId(),session);  callInternal("onOpen",session,null,null);}  }
class C{  public static void fillAsterisks(char[] list){  for (int i=0; i < list.length; i++) {    list[i]='*';  }}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("Java_gTarg");  listenUntilVMDisconnect();  if (!testFailed) {    println("Java_gTest: passed");  } else {    throw new Exception("Java_gTest: failed");  }}  }
class C{  public void add(int theOpCode){  if (opcodeCount(theOpCode) != 0)   throw new IllegalArgumentException("Unexpected operands");  int newStack=itsStackTop + stackChange(theOpCode);  if (newStack < 0 || Short.MAX_VALUE < newStack)   badStack(newStack);  if (DEBUGCODE)   System.out.println("Add " + bytecodeStr(theOpCode));  addToCodeBuffer(theOpCode);  itsStackTop=(short)newStack;  if (newStack > itsMaxStack)   itsMaxStack=(short)newStack;  if (DEBUGSTACK) {    System.out.println("After " + bytecodeStr(theOpCode) + " stack = "+ itsStackTop);  }  if (theOpCode == ByteCode.ATHROW) {    addSuperBlockStart(itsCodeBufferTop);  }}  }
class C{  public void insert(){  log.info("");  int no=delete();  if (m_Value == null || m_Value.length() == 0) {    if (DisplayType.isLookup(m_DisplayType))     m_Value="-1"; else     if (DisplayType.isDate(m_DisplayType))     m_Value=" "; else {      FDialog.warn(m_WindowNo,this.getTitle(),"ValuePreferenceNotInserted");      return;    }  }  int Client_ID=cbClient.isChecked() ? m_AD_Client_ID : 0;  int Org_ID=cbOrg.isChecked() ? m_AD_Org_ID : 0;  int AD_Preference_ID=DB.getNextID(m_ctx,"AD_Preference",null);  StringBuffer sql=new StringBuffer("INSERT INTO AD_Preference (" + "AD_Preference_ID, AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy,Updated,UpdatedBy," + "AD_Window_ID, AD_User_ID, Attribute, Value) VALUES (");  sql.append(AD_Preference_ID).append(",").append(Client_ID).append(",").append(Org_ID).append(", 'Y',SysDate,").append(m_AD_User_ID).append(",SysDate,").append(m_AD_User_ID).append(", ");  if (cbWindow.isChecked())   sql.append(m_AD_Window_ID).append(","); else   sql.append("NULL,");  if (cbUser.isChecked())   sql.append(m_AD_User_ID).append(","); else   sql.append("NULL,");  sql.append(DB.TO_STRING(m_Attribute)).append(",").append(DB.TO_STRING(m_Value)).append(")");  log.fine(sql.toString());  no=DB.executeUpdate(sql.toString(),null);  if (no == 1) {    Env.setContext(m_ctx,getContextKey(),m_Value);    FDialog.info(m_WindowNo,this,"ValuePreferenceInserted");  } else   FDialog.warn(m_WindowNo,this.getTitle(),"ValuePreferenceNotInserted");}  }
class C{  protected void showSubplot(DetailViewSelectedEvent e){  if (!single) {    currentSubplot=e.makeDetailView();    showPlot(currentSubplot);  }}  }
class C{  private void assertNotInDebug(QueryResponse response,String key){  assertNotNull("debug map is null",response.getDebugMap());  assertFalse("debug map contains: " + key,response.getDebugMap().containsKey(key));}  }
class C{  public String toString(){  return "Other-Name: " + name;}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  public void assertBool(boolean b,String errorMessage){  TestUtils.assertBool(b,errorMessage);}  }
class C{  public static boolean useSolderingIron(ItemStack aStack,EntityLivingBase aPlayer){  if (aPlayer == null || aStack == null)   return false;  if (GT_Utility.isStackInList(aStack,GregTech_API.sSolderingToolList)) {    if (aPlayer instanceof EntityPlayer) {      EntityPlayer tPlayer=(EntityPlayer)aPlayer;      if (tPlayer.capabilities.isCreativeMode)       return true;      if (isElectricItem(aStack) && ic2.api.item.ElectricItem.manager.getCharge(aStack) > 1000.0d) {        for (int i=0; i < tPlayer.inventory.mainInventory.length; i++) {          if (GT_Utility.isStackInList(tPlayer.inventory.mainInventory[i],GregTech_API.sSolderingMetalList)) {            if (tPlayer.inventory.mainInventory[i].stackSize < 1)             return false;            if (tPlayer.inventory.mainInventory[i].stackSize == 1) {              tPlayer.inventory.mainInventory[i]=null;            } else {              tPlayer.inventory.mainInventory[i].stackSize--;            }            if (tPlayer.inventoryContainer != null)             tPlayer.inventoryContainer.detectAndSendChanges();            if (canUseElectricItem(aStack,10000)) {              return GT_ModHandler.useElectricItem(aStack,10000,(EntityPlayer)aPlayer);            }            GT_ModHandler.useElectricItem(aStack,(int)ic2.api.item.ElectricItem.manager.getCharge(aStack),(EntityPlayer)aPlayer);            return false;          }        }      }    } else {      damageOrDechargeItem(aStack,1,1000,aPlayer);      return true;    }  }  return false;}  }
class C{  public IssueCollector(){  this(new AcceptingIssueFilter());}  }
class C{  private final void expandChannels(byte[] buffer,int offset,int frameCount,int bytesPerFrame,int channels){  int inOffset=offset + bytesPerFrame * frameCount;  int outOffset=offset + bytesPerFrame * channels * frameCount;switch (bytesPerFrame) {case 1:    if (channels == 2) {      for (; frameCount > 0; frameCount--) {        buffer[--outOffset]=buffer[--inOffset];        buffer[--outOffset]=buffer[inOffset];      }    } else {      for (; frameCount > 0; frameCount--) {        inOffset--;        for (int channel=0; channel < channels; channel++) {          buffer[--outOffset]=buffer[inOffset];        }      }    }  break;case 2:if (channels == 2) {  for (; frameCount > 0; frameCount--) {    buffer[--outOffset]=buffer[--inOffset];    buffer[--outOffset]=buffer[inOffset - 1];    buffer[--outOffset]=buffer[inOffset];    buffer[--outOffset]=buffer[--inOffset];  }} else {  for (; frameCount > 0; frameCount--) {    inOffset--;    for (int channel=0; channel < channels; channel++) {      buffer[--outOffset]=buffer[inOffset];      buffer[--outOffset]=buffer[inOffset - 1];    }    inOffset--;  }}break;default :for (; frameCount > 0; frameCount--) {for (int channel=0; channel < channels; channel++) {for (int by=1; by <= bytesPerFrame; by++) {  buffer[--outOffset]=buffer[inOffset - by];}}inOffset-=bytesPerFrame;}break;}}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  @Override public String toString(){  if (this.map.getMap().isEmpty())   return "";  final StringBuilder param=new StringBuilder(this.map.getMap().size() * 40);  for (  final Map.Entry<String,String> entry : entrySet()) {    param.append(MultiProtocolURL.escape(entry.getKey())).append('=').append(MultiProtocolURL.escape(entry.getValue())).append('&');  }  param.setLength(param.length() - 1);  return param.toString();}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public Address(String name){  if (name == null || name.length() == 0)   throw new IllegalArgumentException("Name must not be empty in Address.");  this.name=name;  port=-1;}  }
class C{  public void removeFromTo(int from,int to){  checkRangeFromTo(from,to,size);  int numMoved=size - to - 1;  if (numMoved >= 0) {    System.arraycopy(elements,to + 1,elements,from,numMoved);    fillFromToWith(from + numMoved,size - 1,null);  }  int width=to - from + 1;  if (width > 0)   size-=width;}  }
class C{  public void parseFile(){  try {    try {      if (token == PACKAGE) {        long p=scan();        IdentifierToken id=parseName(false);        expect(SEMICOLON);        actions.packageDeclaration(p,id);      }    } catch (    SyntaxError e) {      recoverFile();    }    while (token == IMPORT) {      try {        long p=scan();        IdentifierToken id=parseName(true);        expect(SEMICOLON);        if (id.id.getName().equals(idStar)) {          id.id=id.id.getQualifier();          actions.importPackage(p,id);        } else {          actions.importClass(p,id);        }      } catch (      SyntaxError e) {        recoverFile();      }    }    while (token != EOF) {      try {switch (token) {case FINAL:case PUBLIC:case PRIVATE:case ABSTRACT:case CLASS:case INTERFACE:case STRICTFP:          parseClass();        break;case SEMICOLON:      scan();    break;case EOF:  return;default :env.error(pos,"toplevel.expected");throw new SyntaxError();}} catch (SyntaxError e) {recoverFile();}}} catch (IOException e) {env.error(pos,"io.exception",env.getSource());return;}}  }
class C{  protected List<ResolveInfo> onQueryPackageManager(Intent queryIntent){  return mPackageManager.queryIntentActivities(queryIntent,0);}  }
class C{  protected void restoreAllocation(){  for (  ContainerHost host : getContainerHostList()) {    for (    ContainerVm vm : host.getVmList()) {      vm.containerDestroyAll();      vm.reallocateMigratingInContainers();    }    host.containerVmDestroyAll();    host.reallocateMigratingInContainerVms();  }  for (  Map<String,Object> map : getSavedAllocation()) {    PowerContainerVm vm=(PowerContainerVm)map.get("vm");    PowerContainerHost host=(PowerContainerHost)map.get("host");    if (!host.getVmList().contains(vm)) {      if (!host.containerVmCreate(vm)) {        Log.printConcatLine("Couldn't restore VM #",vm.getId()," on host #",host.getId());        System.exit(0);      }      getVmTable().put(vm.getUid(),host);    }  }  for (  Map<String,Object> map : getSavedAllocation()) {    PowerContainerVm vm=(PowerContainerVm)map.get("vm");    if (map.get("container") != null && map.containsKey("container")) {      Container container=(Container)map.get("container");      if (!vm.getContainerList().contains(container)) {        if (!vm.containerCreate(container)) {          Log.printConcatLine("Couldn't restore Container #",container.getId()," on vm #",vm.getId());          System.exit(0);        }      } else {        Log.print("The Container is in the VM already");      }      if (container.getVm() == null) {        Log.print("The Vm is null");      }      ((PowerContainerAllocationPolicy)getDatacenter().getContainerAllocationPolicy()).getContainerTable().put(container.getUid(),vm);    }  }}  }
class C{  public void test_insertLargeValue(){  final IRawStore store=new SimpleMemoryRawStore();  try {    final Random r=new Random();    final HTreeIndexMetadata metadata=new HTreeIndexMetadata(UUID.randomUUID());    metadata.setAddressBits(2);    metadata.setRawRecords(true);    metadata.setMaxRecLen(64);    final HTree htree=HTree.create(store,metadata);    assertEquals(64,htree.getMaxRecLen());    assertTrue(htree.rawRecords);    final byte[] key=new byte[]{1,2,3};    final byte[] val=new byte[htree.getMaxRecLen() + 1];    r.nextBytes(val);    assertNull(htree.insert(key,val));    assertEquals(1,htree.getLeafCount());    final DirectoryPage root=(DirectoryPage)htree.getRoot();    final BucketPage bucket=(BucketPage)root.childRefs[0].get();    final long addr=bucket.getRawRecord(0);    assertTrue(addr != IRawStore.NULL);    final ByteBuffer actual=htree.readRawRecord(addr);    TestCase3.assertEquals(val,actual);  }  finally {    store.destroy();  }}  }
class C{  public Enumeration<V> elements(){  return new VsIt();}  }
class C{  public TypeParameterReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean insideDocComment,SearchParticipant participant,IResource resource){  super(enclosingElement,accuracy,offset,length,participant,resource);  setInsideDocComment(insideDocComment);}  }
class C{  public static void scheduleGcThreads(){  model.scheduleGcThreads();}  }
class C{  public int readInt(){  return readIntArray()[0];}  }
class C{  public static int readVarInt(ByteBuffer buff){  int b=buff.get();  if (b >= 0) {    return b;  }  return readVarIntRest(buff,b);}  }
class C{  @Override public void initializeAfterLoading(){  super.initializeAfterLoading();  Utils.removeEmptyStringsFromList(tags);  Utils.removeEmptyStringsFromList(genres);  for (  String genre : new ArrayList<>(genres)) {    addGenre(MediaGenres.getGenre(genre));  }  Pattern pattern=Pattern.compile("(?i)season([0-9]{1,4})-poster\\..{2,4}");  for (  MediaFile mf : getMediaFiles(MediaFileType.SEASON_POSTER)) {    if (mf.getFilename().startsWith("season-specials-poster")) {      seasonPosters.put(0,mf);    } else {      Matcher matcher=pattern.matcher(mf.getFilename());      if (matcher.matches()) {        try {          int season=Integer.parseInt(matcher.group(1));          seasonPosters.put(season,mf);        } catch (        Exception e) {        }      }    }  }  for (  TvShowEpisode episode : episodes) {    episode.addPropertyChangeListener(propertyChangeListener);  }}  }
class C{  public static void load(String cmpid){  try {    String home=getHomeToken();    String script="adempiere.findUserToken('" + cmpid + "', '"+ home+ "');";    AuScript aus=new AuScript(null,script);    Clients.response("findUserToken",aus);  } catch (  Exception e) {    log.log(Level.WARNING,e.getLocalizedMessage(),e);  }}  }
class C{  @Override public void onMouseOut(MouseOutEvent event){  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelected());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanel());  }}  }
class C{  @ApiOperation(value="Load a configuration file to the specified engine") @RequestMapping(value="engine/{engine}/profile",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postProfileByEngine(@PathVariable("engine") String engineName,@RequestParam(value="file") MultipartFile file){  loadProfileImpl(getSymmetricEngine(engineName),file);}  }
class C{  private void checkId(final String id){  if (!myLayout.isToolWindowRegistered(id)) {    throw new IllegalStateException("window with id=\"" + id + "\" isn't registered");  }}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  int crossOver(int index,E x){  int minChildIndex=findMinChild(index);  if ((minChildIndex > 0) && (ordering.compare(elementData(minChildIndex),x) < 0)) {    queue[index]=elementData(minChildIndex);    queue[minChildIndex]=x;    return minChildIndex;  }  return crossOverUp(index,x);}  }
class C{  public Builder(){}  }
class C{  protected JButton createLeftOneTouchButton(){  SynthArrowButton b=new SynthArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.leftOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(true));  return b;}  }
class C{  public void bind(InetAddress host,int port) throws IOException {  if (socket != null)   socket.close();  InetSocketAddress newAddr=new InetSocketAddress(host.getHostAddress(),port);  this.socket=new DatagramSocket(newAddr);}  }
class C{  private boolean validConsist(){  int cN=validConsist(consistTextField.getText());  if (cN == -1) {    consistStatus.setText(rb.getString("EditStateERROR"));    JOptionPane.showMessageDialog(this,rb.getString("ToolTipConsist"),rb.getString("DIALOG_NceConsist"),JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  protected QName pushQName(String localName,String qualifiedName,Namespace namespace,String prefix){  if ((prefix == null) || (prefix.length() == 0)) {    this.defaultNamespace=null;  }  return createQName(localName,qualifiedName,namespace);}  }
class C{  public BlueMarbleLandsatLayer(){  this("http://worldwind25.arc.nasa.gov/wms");}  }
class C{  public static int dialDownDamage(Mounted weapon,WeaponType wtype,int range){  int toReturn=wtype.getDamage(range);  if (!wtype.hasModes()) {    return toReturn;  }  String damage=weapon.curMode().getName();  if ((damage.trim().toLowerCase().indexOf("damage") == 0) && (damage.trim().length() > 6)) {    toReturn=Integer.parseInt(damage.substring(6).trim());  }  return Math.min(wtype.getDamage(range),toReturn);}  }
class C{  @Check(CheckType.FAST) public void exitOnStatechart(Exit exit){  if (exit.getParentRegion().getComposite() instanceof Statechart) {    error(ISSUE_EXIT_ON_STATECHART,exit,null,-1);  }}  }
class C{  public Partial(ReadablePartial partial){  super();  if (partial == null) {    throw new IllegalArgumentException("The partial must not be null");  }  iChronology=DateTimeUtils.getChronology(partial.getChronology()).withUTC();  iTypes=new DateTimeFieldType[partial.size()];  iValues=new int[partial.size()];  for (int i=0; i < partial.size(); i++) {    iTypes[i]=partial.getFieldType(i);    iValues[i]=partial.getValue(i);  }}  }
class C{  public Boolean isHostNameAsTargetAddress(){  return hostNameAsTargetAddress;}  }
class C{  public static float[] normalizeFloatArray(float[] buffer,float peak,float target){  float invPeak=target / peak;  for (int i=0; i < buffer.length; i++) {    buffer[i]*=invPeak;  }  return buffer;}  }
class C{  @Override public void updateTime(String columnLabel,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static double logPdf(double x,double lambda){  if (x < 0)   return Double.NEGATIVE_INFINITY;  return Math.log(lambda) - (lambda * x);}  }
class C{  @DELETE @Path("{guid}/traits/{traitName}") @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response deleteTrait(@Context HttpServletRequest request,@PathParam("guid") String guid,@PathParam(TRAIT_NAME) String traitName){  LOG.info("Deleting trait={} from entity={} ",traitName,guid);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.deleteTrait(" + guid + ", "+ traitName+ ")");    }    metadataService.deleteTrait(guid,traitName);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(TRAIT_NAME,traitName);    return Response.ok(response).build();  } catch (  EntityNotFoundException|TypeNotFoundException e) {    LOG.error("An entity with GUID={} does not exist traitName={} ",guid,traitName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  TraitNotFoundException e) {    LOG.error("The trait name={} for entity={} does not exist.",traitName,guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to delete trait name={} for entity={}",traitName,guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to delete trait name={} for entity={}",traitName,guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (!newRecord) {  }  return success;}  }
