class C{  protected Probe(String name){  this.name=name;  start=System.nanoTime();  log("Probe created at " + new Date());}  }
class C{  public ID3Node(int atributes,int attributeId){  cr=null;  children=new ID3Node[atributes];  this.attributeId=attributeId;}  }
class C{  public HessianInput createHessianInput(InputStream is){  return new HessianInput(is);}  }
class C{  public static <A extends Annotation>A generateAnnotation(Attribute.Compound anno,Class<A> annoType){  AnnotationProxyMaker apm=new AnnotationProxyMaker(anno,annoType);  return annoType.cast(apm.generateAnnotation());}  }
class C{  public String typeName(){  return "int";}  }
class C{  private void dropDateMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropDateMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.DATE_TIME);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);  }}  }
class C{  public static ThreadFactory privilegedThreadFactory(){  return new PrivilegedThreadFactory();}  }
class C{  public ClearableStringBuilder clear(){  sb.setLength(0);  return this;}  }
class C{  public void testGetName(){  String expectedReturn="USERNAME";  String actualReturn=usernameAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  public void testGetName() throws Exception {  Container c=new Jetty7xInstalledLocalContainer(null);  String name=c.getName();  assertEquals("Jetty 7.x",name);}  }
class C{  @Override public void addListener(final IEventLayerListener e){}  }
class C{  @Override public StorageOSUserDAO validateToken(String tokenIn){  if (tokenIn == null) {    _log.error("token is null");    return null;  }  TokenOnWire tw=_tokenEncoder.decode(tokenIn);  String vdcId=URIUtil.parseVdcIdFromURI(tw.getTokenId());  if (vdcId != null && !tw.isProxyToken() && !VdcUtil.getLocalShortVdcId().equals(vdcId)) {    return getForeignToken(tw,tokenIn);  }  return resolveUser(fetchTokenLocal(tw));}  }
class C{  private boolean generateTransforms(List<JimpleTransform> changes){  List<SootClass> classes=new LinkedList<SootClass>();  classes.addAll(Scene.v().getClasses());  for (  SootClass clz : classes) {    for (    SootMethod m : clz.getMethods()) {      if (API.v().isSystemMethod(m) || m.isAbstract() || !m.isConcrete()|| m.isPhantom()|| SootUtils.isRuntimeStubMethod(m))       continue;      StmtBody stmtBody=(StmtBody)m.getActiveBody();      Iterator stmtIt=stmtBody.getUnits().snapshotIterator();      while (stmtIt.hasNext()) {        Stmt stmt=(Stmt)stmtIt.next();        if (stmt.containsInvokeExpr()) {          Set<SootMethod> targets=PTABridge.v().getTargetsInsNoContext(stmt);          FileStreamTransformDirective directive=findTransformTarget(targets);          if (directive != null && targets.size() != 1) {            logger.info("FilePrecisionTransforms failed: Found transform target but stmt has multiple potential callees: {} {}",stmt,SootUtils.getSourceLocation(stmt));            AnalysisReport.v().addEntry("FilePrecisionTransforms failed: Found transform target but stmt has multiple potential callees",stmt,AnalysisReport.Level.GUARDED);            return false;          }          if (directive != null) {            InvokeExpr ie=stmt.getInvokeExpr();            String concat=directive.prefix;            for (            int arg : directive.argsToConcat) {              if (ie.getArg(arg).getType().equals(RefType.v("java.lang.String"))) {                if (JSAStrings.v().isHotspotValue(ie.getArg(arg))) {                  String resolved=JSAStrings.v().getRegex(ie.getArg(arg));                  if (JSAStrings.v().ignoreRE(resolved) || !JSAStrings.v().isConstant(ie.getArg(arg))) {                    logger.info("FilePrecisionTransforms failed: argument to call not contant JSA: {} {} {} {}",stmt,arg,resolved,SootUtils.getSourceLocation(stmt));                    AnalysisReport.v().addEntry("FilePrecisionTransforms failed: argument to call not contant JSA",stmt,AnalysisReport.Level.GUARDED);                    return false;                  }                  concat+=("/" + resolved);                } else {                  logger.info("FilePrecisionTransforms failed: argument to call not tracked by JSA: {} {} {}",stmt,arg,SootUtils.getSourceLocation(stmt));                  AnalysisReport.v().addEntry("FilePrecisionTransforms failed: argument to call not tracked by JSA",stmt,AnalysisReport.Level.GUARDED);                  return false;                }              } else               if (ie.getArg(arg).getType().equals(RefType.v("java.io.File"))) {                List<String> allResolvedValues=new LinkedList<String>();                for (                IAllocNode node : PTABridge.v().getPTSetIns(ie.getArg(arg))) {                  List<String> nodeResolvedValues=getFileVAModelString((AllocNode)node);                  if (nodeResolvedValues == null) {                    logger.info("FilePrecisionTransforms failed: VA could not resolve field for java.io.File: {} {} {}",stmt,arg,SootUtils.getSourceLocation(stmt));                    AnalysisReport.v().addEntry("FilePrecisionTransforms failed: VA could not resolve field for java.io.File",stmt,AnalysisReport.Level.GUARDED);                    return false;                  } else {                    allResolvedValues.addAll(nodeResolvedValues);                  }                }                if (allResolvedValues.size() != 1) {                  logger.info("FilePrecisionTransforms failed: VA resolved too many values for filename: {} {} {}",stmt,Arrays.toString(allResolvedValues.toArray()),SootUtils.getSourceLocation(stmt));                  AnalysisReport.v().addEntry("FilePrecisionTransforms failed: VA resolved too many values for filename",stmt,AnalysisReport.Level.GUARDED);                  return false;                } else {                  concat=allResolvedValues.get(0);                }              } else {                logger.info("FilePrecisionTransforms failed: argument type not supported: {} {} {}",stmt,arg,SootUtils.getSourceLocation(stmt));                AnalysisReport.v().addEntry("FilePrecisionTransforms failed: argument type not supported",stmt,AnalysisReport.Level.GUARDED);                return false;              }              logger.info("Creating / getting file stream clone for {} {}",concat,directive.steam_type.name());              SootClass clone=getClone(concat,directive.steam_type);              if (clone == null) {                logger.info("FilePrecisionTransforms failed: cloner returned null!",stmt,arg,SootUtils.getSourceLocation(stmt));                return false;              }              JimpleTransform jTransform=new JimpleTransform();              jTransform.m=m;              if (stmt instanceof AssignStmt) {                AssignStmt assign=(AssignStmt)stmt;                if (assign.getRightOp() instanceof InvokeExpr) {                  jTransform.insertAfter=stmt;                  jTransform.deleteTheseStmts.add(stmt);                  jTransform.newStmts.add(Jimple.v().newAssignStmt(((AssignStmt)stmt).getLeftOp(),Jimple.v().newNewExpr(clone.getType())));                  jTransform.newStmts.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr((Local)((AssignStmt)stmt).getLeftOp(),clone.getMethod("void <init>(java.lang.String)").makeRef(),StringConstant.v(concat))));                } else {                  logger.info("FilePrecisionTransforms failed: unsupported RHS of assignment: {} {}",stmt,SootUtils.getSourceLocation(stmt));                  AnalysisReport.v().addEntry("FilePrecisionTransforms failed: unsupported RHS of assignment",stmt,AnalysisReport.Level.GUARDED);                  return false;                }              } else               if (stmt instanceof InvokeStmt && (stmt.getInvokeExpr() instanceof SpecialInvokeExpr)) {                SpecialInvokeExpr constructorCall=(SpecialInvokeExpr)stmt.getInvokeExpr();                jTransform.insertAfter=stmt;                jTransform.deleteTheseStmts.add(stmt);                Stmt newAssignStmt=(Stmt)stmtBody.getUnits().getPredOf(stmt);                if (!(newAssignStmt instanceof AssignStmt) || !(((AssignStmt)newAssignStmt).getRightOp() instanceof NewExpr)) {                  logger.info("FilePrecisionTransforms failed: unsupported pred statement of constructor call for File*Stream: {} {}",stmt,SootUtils.getSourceLocation(stmt));                  AnalysisReport.v().addEntry("FilePrecisionTransforms failed: unsupported pred statement of constructor call for File*Stream",stmt,AnalysisReport.Level.GUARDED);                  return false;                }                jTransform.deleteTheseStmts.add(newAssignStmt);                jTransform.newStmts.add(Jimple.v().newAssignStmt(((AssignStmt)newAssignStmt).getLeftOp(),Jimple.v().newNewExpr(clone.getType())));                List<Value> newArgs=new LinkedList<Value>();                newArgs.addAll(constructorCall.getArgs());                InvokeExpr newConstructorInvoke=Jimple.v().newSpecialInvokeExpr((Local)((AssignStmt)newAssignStmt).getLeftOp(),clone.getMethod(constructorCall.getMethodRef().getSubSignature()).makeRef(),newArgs);                jTransform.newStmts.add(Jimple.v().newInvokeStmt(newConstructorInvoke));              } else {                logger.info("FilePrecisionTransforms failed: stmt type not supported: {} {}",stmt,SootUtils.getSourceLocation(stmt));                AnalysisReport.v().addEntry("FilePrecisionTransforms failed: stmt type not supported",stmt,AnalysisReport.Level.GUARDED);                return false;              }              changes.add(jTransform);            }          }        }      }    }  }  return true;}  }
class C{  public static void picture(double x,double y,String s,double degrees){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.787 -0500",hash_original_method="7184EAAE07D7B6F9BEC01EBE5F329335",hash_generated_method="7184EAAE07D7B6F9BEC01EBE5F329335") ZygoteConnection(LocalSocket socket) throws IOException {  mSocket=socket;  mSocketOutStream=new DataOutputStream(socket.getOutputStream());  mSocketReader=new BufferedReader(new InputStreamReader(socket.getInputStream()),256);  mSocket.setSoTimeout(CONNECTION_TIMEOUT_MILLIS);  try {    peer=mSocket.getPeerCredentials();  } catch (  IOException ex) {    Log.e(TAG,"Cannot read peer credentials",ex);    throw ex;  }}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void startUpload(String bucketName,String key,File file) throws AmazonClientException, AmazonServiceException {  this.startUpload(bucketName,key,file,false);}  }
class C{  public DTMDocumentImpl(DTMManager mgr,int documentNumber,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory){  initDocument(documentNumber);  m_xsf=xstringfactory;}  }
class C{  @CheckReturnValue @Nonnull static public <E>String arrayToString(@Nonnull E[] v){  StringBuilder retval=new StringBuilder();  boolean first=true;  for (  E e : v) {    if (!first) {      retval.append(',');    }    first=false;    retval.append('[');    retval.append(e.toString());    retval.append(']');  }  return new String(retval);}  }
class C{  public boolean isA_CreateAsset(){  Object oo=get_Value(COLUMNNAME_A_CreateAsset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private InternalDistributedMember createAddress(int port){  GMSMember gms=new GMSMember("localhost",port);  gms.setUUID(UUID.randomUUID());  gms.setVmKind(DistributionManager.NORMAL_DM_TYPE);  gms.setVersionOrdinal(Version.CURRENT_ORDINAL);  return new InternalDistributedMember(gms);}  }
class C{  public static String JQ(String request) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.query(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  return response;}  }
class C{  public LuceneSearcher(Directory dir,String[] fields,boolean readOnly){  m_hitCountCache=new HashMap();  directory=dir;  analyzer=new StandardAnalyzer();  this.fields=(String[])fields.clone();  try {    writer=new IndexWriter(directory,analyzer,!readOnly);    writer.close();    writer=null;  } catch (  IOException e1) {    e1.printStackTrace();  }  m_readOnly=readOnly;  if (!readOnly) {    setReadMode(false);  } else {    m_readMode=false;    setReadMode(true);  }}  }
class C{  public void startImpl(Result<I> result){  DeployFactory2<I> builder=builder();  if (builder == null) {    result.ok(null);    return;  }  if (!_lifecycle.toStarting()) {    result.ok(_instance);    return;  }  I deployInstance=null;  boolean isActive=false;  try {    deployInstance=builder.get();    _instance=deployInstance;    isActive=true;    result.ok(deployInstance);  } catch (  ConfigException e) {    log.log(Level.FINEST,e.toString(),e);    log.log(Level.FINE,e.toString(),e);    result.fail(e);  }catch (  Throwable e) {    log.log(Level.FINEST,e.toString(),e);    log.log(Level.FINE,e.toString(),e);    result.fail(e);  } finally {    if (isActive) {      _lifecycle.toActive();    } else {      _lifecycle.toError();    }  }}  }
class C{  @After public final void stopConnector(){  stopConnector(null);}  }
class C{  public long[] toArray(){  return Arrays.copyOf(values,size);}  }
class C{  public static boolean toBoolean(String str){  boolean boolValue=false;  if (str != null)   boolValue=str.equalsIgnoreCase(Constants.TRUE_STRING);  return boolValue;}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    assertNull(certFactorySpi.engineGenerateCertPath(dis));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public boolean visit(MethodRef node){  return true;}  }
class C{  public boolean userCanViewArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int acsId;  int archMgrId=ISicresAdminDefsKeys.NULL_ID;  ArchivesTable table=new ArchivesTable();  LdapUsersTable usrTable=new LdapUsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),table.getAcsIdArchHdrColName(),table.getLoadArchIdQual(archId));    archMgrId=DbSelectFns.selectLongInteger(dbConn,usrTable.getOwnershipTableName(),usrTable.getOwnerIdColumnName(),usrTable.getLoadOwnerIdQual(acsId));    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,archMgrId,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void add(Node nde){  if (nde == null)   return;  nde.insertBefore(head);  head=nde;  size++;}  }
class C{  @Override public QueryBase visit(final ASTSelectQuery astQuery,Object data) throws VisitorException {  final QueryBase queryRoot=getQueryBase(astQuery,data,QueryType.SELECT);  handleNamedSubqueryClause(astQuery,queryRoot);  handleSelect(astQuery.getSelect(),queryRoot);  handleWhereClause(astQuery,queryRoot);  handleGroupBy(astQuery,queryRoot);  handleHaving(astQuery,queryRoot);  handleOrderBy(astQuery,queryRoot);  handleSlice(astQuery,queryRoot);  handleBindings(astQuery,queryRoot);  return queryRoot;}  }
class C{  private static File findOurJar(){  return new File(ClassRootFinder.findClassRootOfClass(PublicApiCreatorApp.class));}  }
class C{  private View findDirectChild(final View descendant){  View directChild=descendant;  for (ViewParent p=descendant.getParent(); p != this && p != null; p=p.getParent()) {    if (p instanceof View) {      directChild=(View)p;    }  }  return directChild;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public Consist addConsist(DccLocoAddress locoAddress){  if (consistTable.containsKey(locoAddress)) {    return consistTable.get(locoAddress);  }  log.debug("Add consist, address " + locoAddress);  NceConsist consist=new NceConsist(locoAddress,memo);  consistTable.put(locoAddress,consist);  return consist;}  }
class C{  public static long pop_array(long[] arr,int wordOffset,int numWords){  long popCount=0;  for (int i=wordOffset, end=wordOffset + numWords; i < end; ++i) {    popCount+=Long.bitCount(arr[i]);  }  return popCount;}  }
class C{  public ParallaxPage(@LayoutRes int layoutResId,String title,String description){  this.layoutResId=layoutResId;  this.title=title;  this.description=description;}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType,String typeName) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterName,sqlType,typeName);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  public String valueToString(Object value) throws ParseException {  if (value == null) {    return "";  }  return value.toString();}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public SIPHeader parse() throws ParseException {  UnsupportedList unsupportedList=new UnsupportedList();  if (debug)   dbg_enter("UnsupportedParser.parse");  try {    headerName(TokenTypes.UNSUPPORTED);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      Unsupported unsupported=new Unsupported();      unsupported.setHeaderName(SIPHeaderNames.UNSUPPORTED);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      unsupported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      unsupportedList.add(unsupported);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        unsupported=new Unsupported();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        unsupported.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        unsupportedList.add(unsupported);      }    }  }  finally {    if (debug)     dbg_leave("UnsupportedParser.parse");  }  return unsupportedList;}  }
class C{  public ReplacesParser(String callID){  super(callID);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  public static ReadableByteChannel newChannel(final InputStream in){  checkNotNull(in,"in");  if (in instanceof FileInputStream && FileInputStream.class.equals(in.getClass())) {    return ((FileInputStream)in).getChannel();  }  return new ReadableByteChannelImpl(in);}  }
class C{  public LabeledOMSpline(int[] xPoints,int[] yPoints){  super(xPoints,yPoints);}  }
class C{  private Snapshot createDiskSnapshot(SnapshotDescriptor descriptor){  SnapshotFile file=new SnapshotFile(SnapshotFile.createSnapshotFile(name,storage.directory(),descriptor.index(),descriptor.timestamp()));  Snapshot snapshot=new FileSnapshot(file,this);  LOGGER.debug("Created disk snapshot: {}",snapshot);  return snapshot;}  }
class C{  public ObjectVirtualPoolRestRep update(URI id,ObjectVirtualPoolUpdateParam input){  return client.put(ObjectVirtualPoolRestRep.class,input,getIdUrl(),id);}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes){  this(separator,quotechar,escape,strictQuotes,DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  public int idRangeOffset(int segment){  isValidIndex(segment);  return this.data.readUShort(this.idRangeOffsetLocation(segment));}  }
class C{  public JSONArray conclude(JSONArray choices){  JSONArray a=new JSONArray();  if (this.selectionMapping != null && this.selectionMapping.size() == 1) {    final String aggregator=this.selectionMapping.keySet().iterator().next();    final String aggregator_as=this.selectionMapping.get(aggregator);    if (aggregator.startsWith("COUNT(") && aggregator.endsWith(")")) {      return a.put(new JSONObject().put(aggregator_as,choices.length()));    }    if (aggregator.startsWith("MAX(") && aggregator.endsWith(")")) {      final AtomicDouble max=new AtomicDouble(Double.MIN_VALUE);      String c=aggregator.substring(4,aggregator.length() - 1);      choices.forEach(null);      return a.put(new JSONObject().put(aggregator_as,max.get()));    }    if (aggregator.startsWith("MIN(") && aggregator.endsWith(")")) {      final AtomicDouble min=new AtomicDouble(Double.MAX_VALUE);      String c=aggregator.substring(4,aggregator.length() - 1);      choices.forEach(null);      return a.put(new JSONObject().put(aggregator_as,min.get()));    }    if (aggregator.startsWith("SUM(") && aggregator.endsWith(")")) {      final AtomicDouble sum=new AtomicDouble(0.0d);      String c=aggregator.substring(4,aggregator.length() - 1);      choices.forEach(null);      return a.put(new JSONObject().put(aggregator_as,sum.get()));    }    if (aggregator.startsWith("AVG(") && aggregator.endsWith(")")) {      final AtomicDouble sum=new AtomicDouble(0.0d);      String c=aggregator.substring(4,aggregator.length() - 1);      choices.forEach(null);      return a.put(new JSONObject().put(aggregator_as,sum.get() / choices.length()));    }  }  if (this.selectionMapping != null && this.selectionMapping.size() == 2) {    Iterator<String> ci=this.selectionMapping.keySet().iterator();    String aggregator=ci.next();    String column=ci.next();    if (column.indexOf('(') >= 0) {      String s=aggregator;      aggregator=column;      column=s;    }    final String aggregator_as=this.selectionMapping.get(aggregator);    final String column_as=this.selectionMapping.get(column);    final String column_final=column;    if (aggregator.startsWith("PERCENT(") && aggregator.endsWith(")")) {      final AtomicDouble sum=new AtomicDouble(0.0d);      String c=aggregator.substring(8,aggregator.length() - 1);      choices.forEach(null);      choices.forEach(null);      return a;    }  }  for (  Object json : choices) {    JSONObject extraction=this.extract((JSONObject)json);    if (extraction.length() > 0)     a.put(extraction);  }  return a;}  }
class C{  public static void previewRoom(final Activity fromActivity,RoomPreviewData roomPreviewData){  if ((null != fromActivity) && (null != roomPreviewData)) {    VectorRoomActivity.sRoomPreviewData=roomPreviewData;    Intent intent=new Intent(fromActivity,VectorRoomActivity.class);    intent.putExtra(VectorRoomActivity.EXTRA_ROOM_ID,roomPreviewData.getRoomId());    intent.putExtra(VectorRoomActivity.EXTRA_ROOM_PREVIEW_ID,roomPreviewData.getRoomId());    intent.putExtra(VectorRoomActivity.EXTRA_EXPAND_ROOM_HEADER,true);    fromActivity.startActivity(intent);  }}  }
class C{  protected void initFactorsIfNeeded(Vertex<CfLongId,FloatMatrixWritable,FloatWritable> vertex){  if (null == vertex.getValue() || vertex.getValue().columns != d + 1) {    vertex.setValue(new FloatMatrixWritable(FloatMatrix.rand(d + 1)));  }  if (vertex.getId().isUser()) {    vertex.getValue().put(0,1f);  }}  }
class C{  public static String memoryUsage(){  final Runtime runtime=Runtime.getRuntime();  runtime.gc();  final long max=runtime.maxMemory();  final long total=runtime.totalMemory();  final long free=runtime.freeMemory();  final long used=total - free;  return String.format("%d\t%d\t%d\t%d",max,total,free,used);}  }
class C{  public Map<String,String> loadProperties() throws IOException {  Path storageFile=getStorageFile().orElseThrow(null);  Properties properties=loadProperties(storageFile);  return new HashMap<>((Map)properties);}  }
class C{  public static String replace(String strInput,String strPattern,String replacement,boolean caseSensitive,boolean replaceAll) throws MalformedPatternException {  return _replace(strInput,strPattern,escape(replacement),caseSensitive,replaceAll);}  }
class C{  public SparseObjectMatrix2D(int rows,int columns){  this(rows,columns,rows * (columns / 1000),0.2,0.5);}  }
class C{  public static boolean assertDistribution(final double[] da,final double tolerance){  double sum=0.0;  for (  final double d : da) {    Exam.assertTrue(Utils.realFormat(d),d >= 0.0 && d <= (1.0 + tolerance) && !Double.isNaN(d));    sum+=d;  }  if (Exam.checkEquals(1.0,sum,tolerance)) {    return true;  }  throw new Exam.ExamException("sum=" + Utils.realFormat(sum) + "  "+ Utils.realFormatArray(da));}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  private Object writeReplace(){  return new Ser(Ser.OFFSET_TIME_TYPE,this);}  }
class C{  @Override public void mouseReleased(MouseEvent event){  if (event.getSource() == getComponentDecreaseSpinnerButton()) {    decreaseTimer.stop();  } else {    increaseTimer.stop();  }}  }
class C{  public Edge(S src,Symbol symbol,S dest){  this.src=src;  this.symbol=symbol;  this.dest=dest;  this.srcItem=src.getFirstItem();  this.hashCache=calcHashCode();}  }
class C{  public void onThreadWaitTimeout(SceKernelThreadInfo thread){  if (removeWaitingThread(thread)) {    thread.cpuContext._v0=ERROR_KERNEL_WAIT_TIMEOUT;  } else {    log.warn("Mutex deleted while we were waiting for it! (timeout expired)");    thread.cpuContext._v0=ERROR_KERNEL_WAIT_DELETE;  }}  }
class C{  private void computeCapacityforSRDFV3ToV2(Volume targetVolume,final VirtualPool vpool){  if (targetVolume == null) {    return;  }  StorageSystem targetSystem=_dbClient.queryObject(StorageSystem.class,targetVolume.getStorageController());  StoragePool targetPool=_dbClient.queryObject(StoragePool.class,targetVolume.getPool());  Volume sourceVolume=_dbClient.queryObject(Volume.class,targetVolume.getSrdfParent());  StorageSystem sourceSystem=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  StoragePool sourcePool=_dbClient.queryObject(StoragePool.class,sourceVolume.getPool());  if (sourceSystem != null && targetSystem != null) {    boolean isCapacityReset=false;    if (sourcePool != null && targetPool != null) {      MetaVolumeRecommendation sourceVolumeRecommendation=MetaVolumeUtils.getCreateRecommendation(sourceSystem,sourcePool,sourceVolume.getCapacity(),sourceVolume.getThinlyProvisioned(),vpool.getFastExpansion(),null);      MetaVolumeRecommendation targetVolumeRecommendation=MetaVolumeUtils.getCreateRecommendation(targetSystem,targetPool,targetVolume.getCapacity(),targetVolume.getThinlyProvisioned(),vpool.getFastExpansion(),null);      isCapacityReset=computeCapacityforSRDFV3ToV2Meta(sourcePool,targetPool,sourceVolume,targetVolume,sourceVolumeRecommendation,targetVolumeRecommendation);    }    if (sourceSystem.checkIfVmax3() && !targetSystem.checkIfVmax3() && !isCapacityReset) {      Long cylinderCount=(long)Math.ceil((double)targetVolume.getCapacity() / V3CYLINDERSIZE);      targetVolume.setCapacity(cylinderCount * V3CYLINDERSIZE);      _log.info("Cylinder Count : {}, VMAX2 volume Capacity : {}",cylinderCount,targetVolume.getCapacity());    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean isAscending(){  return true;}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.GROUP__NON_CAPTURING:    setNonCapturing((Boolean)newValue);  return;case RegularExpressionPackage.GROUP__PATTERN:setPattern((Pattern)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public PLRGBA clone(){  return new PLRGBA(red,green,blue,alpha);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public Referenceable createTableInstance(Referenceable dbReference,Table hiveTable) throws Exception {  return createOrUpdateTableInstance(dbReference,null,hiveTable);}  }
class C{  public static void assertCompoundSegments(SolrCore core,boolean compound){  RefCounted<SolrIndexSearcher> searcherRef=core.getRegisteredSearcher();  try {    assertCompoundSegments(searcherRef.get().getRawReader(),compound);  }  finally {    searcherRef.decref();  }}  }
class C{  public static String join(CharSequence delimiter,Object[] tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public StringBuilder(String str){  super(str.length() + 16);  append(str);}  }
class C{  protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleList,IFloodlightModule module){  Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module);  if (servs != null) {    for (    Class<? extends IFloodlightService> c : servs)     moduleMap.put(c,module);  }  moduleList.add(module);}  }
class C{  public static String convertToURI(String playerURL){  int index=playerURL.indexOf('|');  StringBuilder sb=new StringBuilder(playerURL);  while (index > 0) {    sb.setCharAt(index,':');    index=playerURL.indexOf('|',index + 1);  }  return sb.toString();}  }
class C{  private ProposedResourceDelta buildDeleteDelta(ProposedResourceDelta parentDelta,IResource resource){  ProposedResourceDelta delta=parentDelta.getChild(resource.getName());  if (delta == null) {    delta=new ProposedResourceDelta(resource);    parentDelta.add(delta);  }  delta.setKind(IResourceDelta.REMOVED);  if (resource.getType() == IResource.FILE)   return delta;  try {    IResource[] members=((IContainer)resource).members();    int childCount=members.length;    if (childCount > 0) {      ProposedResourceDelta[] childDeltas=new ProposedResourceDelta[childCount];      for (int i=0; i < childCount; i++)       childDeltas[i]=buildDeleteDelta(delta,members[i]);    }  } catch (  CoreException e) {  }  return delta;}  }
class C{  @Override public void writeTo(ChannelBuffer data){  super.writeTo(data);  if (this.interfaces != null) {    for (    OFInterfaceVendorData intf : this.interfaces) {      intf.writeTo(data);    }  }}  }
class C{  public boolean isDeliveryViaRule(){  Object oo=get_Value(COLUMNNAME_DeliveryViaRule);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public GridBoundedConcurrentLinkedHashSet(int max,int initCap,float loadFactor){  this(max,initCap,loadFactor,DFLT_CONCUR_LVL);}  }
class C{  private void testRepeatVarsPostResult(final Waiter waiter,final RepeatVars repeatVars,final boolean download,final int repeatWindow,final int requestNum){  try {    waiter.assertEquals(repeatVars.isRepeatDownload(),download);    waiter.assertEquals(repeatVars.isRepeatUpload(),!download);    waiter.assertTrue(repeatVars.getStartDateRepeat() != 0);    waiter.assertEquals(repeatVars.getRepeatWindows(),repeatWindow);    waiter.assertTrue(repeatVars.getRepeatPacketSize().intValue() != 0);    waiter.assertTrue(repeatVars.getRepeatTempPckSize() != 0);    waiter.assertNotNull(repeatVars.getRepeatTransferRateList());    waiter.assertEquals(repeatVars.getRepeatTransferRateList().size(),requestNum);    waiter.assertEquals(repeatVars.isRepeatFinished(),true);  } catch (  IllegalAccessException e) {    Assert.fail(e.getMessage());  }}  }
class C{  public SSLSession negotiate() throws IOException {  return negotiate(null);}  }
class C{  public boolean isSetBegin_in_both(){  return EncodingUtils.testBit(__isset_bitfield,__BEGIN_IN_BOTH_ISSET_ID);}  }
class C{  public static Point layerToParent(Layer layer,Layer parent,float x,float y){  Point into=new Point(x,y);  return layerToParent(layer,parent,into,into);}  }
class C{  public FilteredWarmEmissionHandler(final double simulationEndTime,final int noOfTimeBins,final String userGroup,final PersonFilter personFilter,final Network network,final AreaFilter areaFilter){  this.delegate=new EmissionsPerLinkWarmEventHandler(simulationEndTime,noOfTimeBins);  this.af=areaFilter;  this.network=network;  this.ug=userGroup;  this.pf=personFilter;  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");}  }
class C{  public XMLParser(String xml){  this.xml=xml;  eventType=START_DOCUMENT;}  }
class C{  public double pdf(int k){  if (k < 0 || k >= cdf.length - 1)   return 0.0;  return cdf[k - 1] - cdf[k];}  }
class C{  public GeoPoint(final double x,final double y,final double z){  super(x,y,z);}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void init(){  if (getC_Charge_ID() != 0) {    String sql="SELECT C_Tax_ID FROM C_Tax WHERE AD_Client_ID=? AND IsActive='Y' " + "AND IsTaxExempt='Y' AND ValidFrom < SYSDATE ORDER BY IsDefault DESC";    taxId=DB.getSQLValueEx(null,sql,Env.getAD_Client_ID(getCtx()));    m_ioLine=null;  } else {    getShipLine();  }  if (m_ioLine != null) {    if (getInvoiceLineId() != 0) {      MInvoiceLine invoiceLine=new MInvoiceLine(getCtx(),getInvoiceLineId(),get_TrxName());      precision=invoiceLine.getPrecision();      unitAmount=invoiceLine.getPriceEntered();      originalQty=invoiceLine.getQtyInvoiced();      taxId=invoiceLine.getC_Tax_ID();    } else     if (m_ioLine.getC_OrderLine_ID() != 0) {      MOrderLine orderLine=new MOrderLine(getCtx(),m_ioLine.getC_OrderLine_ID(),get_TrxName());      precision=orderLine.getPrecision();      unitAmount=orderLine.getPriceEntered();      originalQty=orderLine.getQtyDelivered();      taxId=orderLine.getC_Tax_ID();    } else {      throw new IllegalStateException("No Invoice/Order line found the Shipment/Receipt line associated");    }  } else   if (getC_Charge_ID() != 0) {    MCharge charge=MCharge.get(this.getCtx(),getC_Charge_ID());    unitAmount=charge.getChargeAmt();  }}  }
class C{  public void flushBuffer() throws IOException {  flush();  if (!disableFlushBuffer) {    super.flushBuffer();  }}  }
class C{  public static MutableTableRequirement mutableTable(TableDefinition tableDefinition,String name,MutableTableRequirement.State state){  return MutableTableRequirement.builder(tableDefinition).withName(name).withState(state).build();}  }
class C{  public Analyzer showStatisticalSignificance(){  showStatisticalSignificance=true;  return this;}  }
class C{  protected void removeRange(int fromIndex,int toIndex){  modCount++;  int numMoved=size - toIndex;  System.arraycopy(elementData,toIndex,elementData,fromIndex,numMoved);  int newSize=size - (toIndex - fromIndex);  while (size != newSize)   elementData[--size]=null;}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,StringLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpSTRINGTerminalRuleCall_3_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  public final BooleanProperty closableProperty(){  return closableProperty;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  @Override public String toString(){  return TemplateLoaderUtils.getClassNameForToString(this) + "(" + (resourceLoaderClass != null ? "resourceLoaderClass=" + resourceLoaderClass.getName() : "classLoader=" + StringUtil.jQuote(classLoader))+ ", basePackagePath"+ "="+ StringUtil.jQuote(basePackagePath)+ (resourceLoaderClass != null ? (basePackagePath.startsWith("/") ? "" : " /* relatively to resourceLoaderClass pkg */") : "")+ ")";}  }
class C{  public static void prepareDB(boolean clean) throws Exception {  if (clean) {    cleanDB();  }  doInTransaction(null);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public Node buildTreeFull(Class<?> type,int depth){  if (depth == 0) {    return PRNG.nextItem(listAvailableTerminals(type)).copyNode();  } else {    Node node=PRNG.nextItem(listAvailableFunctions(type)).copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      node.setArgument(i,buildTreeFull(node.getArgumentType(i),depth - 1));    }    return node;  }}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:19.281 -0500",hash_original_method="FC1062696978183943559E1C2F0FCB30",hash_generated_method="13F6F1E90AEE0599F591A3C893AFE89C") private boolean matchesWifi(NetworkIdentity ident){  if (ident.mType == TYPE_WIFI) {    return true;  }  return false;}  }
class C{  String[] defPrefixes(){  String[] split=prefix.split("!");  String[] result=new String[split.length + 1];  for (int i=0; i < result.length; i++) {    if (i == 0) {      result[i]="";    } else {      result[i]=result[i - 1] + split[i - 1];    }    if (i != 0) {      result[i]=result[i] + "!";    }  }  return result;}  }
class C{  public String cpuInfo(){  return m_cpuInfo;}  }
class C{  @Override protected void process(DBIDRef id,ArrayDBIDs ids,DBIDArrayIter it,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  clinkstep3(id,it,n,pi,lambda,m);  clinkstep4567(id,ids,it,n,pi,lambda,m);  clinkstep8(id,it,n,pi,lambda,m);}  }
class C{  public static List rpDiscovery(String realm,YadisResolver yadisResolver) throws DiscoveryException {  return yadisResolver.discoverRP(realm);}  }
class C{  public String option1Name(){  return "Serial connection uses ";}  }
class C{  final void resetOperator(UniqueString us){  this.operator=Context.getGlobalContext().getSymbol(us);}  }
class C{  protected int countClasses(File jar,String prefix,String suffix) throws IOException {  int count=0;  JarFile file=new JarFile(jar);  try {    Enumeration<JarEntry> entries=file.entries();    while (entries.hasMoreElements()) {      String name=entries.nextElement().getName();      if (name.startsWith(prefix) && name.endsWith(suffix) && !name.contains("-")) {        count++;      }    }    return count;  }  finally {    file.close();  }}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  @SuppressWarnings("unused") public UnsupportedIO(DataflowRunner runner,PubsubIO.Read.Bound<?>.PubsubBoundedReader doFn){  this.doFn=doFn;}  }
class C{  @Override public void buildKernel(Instances data) throws Exception {  if (!getChecksTurnedOff()) {    getCapabilities().testWithFail(data);  }  initVars(data);  for (int i=0; i < data.numInstances(); i++) {    m_kernelPrecalc[i]=dotProd(data.instance(i),data.instance(i));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MqttIdentifierRejectedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static IOException convertToIOException(Throwable e){  if (e instanceof IOException) {    return (IOException)e;  }  if (e instanceof JdbcSQLException) {    JdbcSQLException e2=(JdbcSQLException)e;    if (e2.getOriginalCause() != null) {      e=e2.getOriginalCause();    }  }  return new IOException(e.toString(),e);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public select addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public Amount add(final Amount amount){  return new Amount(this.getNumMicroNem() + amount.getNumMicroNem());}  }
class C{  public ClientMessageSerializer(StringProperty username,ObjectProperty<Long> sessionId){  this.username=username;  this.sessionId=sessionId;}  }
class C{  public final boolean oneIteration() throws Exception {  messageProducer.send(destProducer,outMessage);  if (transacted)   context.commit();  if ((inMessage=messageConsumer.receive(timeout)) != null) {    if (transacted)     context.commit();    incIterations();  } else {    throw new Exception("No response to message (\nID: " + outMessage.getJMSMessageID() + "\nCorrID: "+ outMessage.getJMSCorrelationID()+ " )");  }  return true;}  }
class C{  public static CCScheduler sharedScheduler(){  if (_sharedScheduler != null) {    return _sharedScheduler;  }synchronized (CCScheduler.class) {    if (_sharedScheduler == null) {      _sharedScheduler=new CCScheduler();    }    return _sharedScheduler;  }}  }
class C{  public NotificationChain basicSetOwningOperation(Operation newOwningOperation,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwningOperation,TypesPackage.PARAMETER__OWNING_OPERATION,msgs);  return msgs;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  ((MouseWheelListener)a).mouseWheelMoved(e);  ((MouseWheelListener)b).mouseWheelMoved(e);}  }
class C{  public void add(E value,String label){  Entry entry=new Entry<>(value,label);  addItem(entry);}  }
class C{  private static final String decode(Set<? extends File> src){  if (src == null || src.isEmpty())   return "";  StringBuilder buffer=new StringBuilder();  for (  File file : src) {    buffer.append(file.getAbsolutePath()).append(';');  }  if (buffer.length() > 0) {    buffer.setLength(buffer.length() - 1);  }  return buffer.toString();}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.isArrowAtTop);  return result;}  }
class C{  private void adjustWindowSize(ContainerWrapper parent){}  }
class C{  public void registerInternalProviders() throws IOException {  if (mHistoryMemberDatabases.size() > 0) {    return;  }  if (mOpenHelper == null) {    return;  }  mOpenHelper.detachAll();  mAllDatabasesAttached=false;  mQueryHelper.clear();  mForbiddenCanonicalPaths.clear();  mHistoryMemberDatabases.clear();  for (  String databaseName : HistoryConstants.PROTECTED_INTERNAL_DATABASES) {    Uri databaseUri=Uri.fromFile(getContext().getDatabasePath(databaseName));    String canonicalPath=new File(databaseUri.getPath()).getCanonicalPath();    mForbiddenCanonicalPaths.add(canonicalPath);  }  for (  HistoryMemberDatabase internalMember : INTERNAL_MEMBERS) {    Uri databaseUri=Uri.fromFile(getContext().getDatabasePath(internalMember.getDatabaseName()));    internalMember.setDatabaseUri(databaseUri);    registerDatabase(internalMember);  }}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ","+ standardDeviation+ ")";}  }
class C{  private int xToScreenCoords(int mapCoord){  return (int)(mapCoord * map.getScale() - map.getScrollX());}  }
class C{  public static int showInfoMsgBox(Shell shell,String title,String message){  MessageBox messageBox=new MessageBox(shell,SWT.OK);  messageBox.setText(title);  messageBox.setMessage(message);  return messageBox.open();}  }
class C{  public boolean isStateActive(State state){switch (state) {case triggerExpressionPrecedence_main_region_A:    return stateVector[0] == State.triggerExpressionPrecedence_main_region_A;default :  return false;}}  }
class C{  @Override public void actionPerformed(ActionEvent e){  Object o;  o=e.getSource();  if (o == m_MenuFileOpen) {    loadFile();  } else   if (o == m_MenuFileSave) {    saveFile();  } else   if (o == m_MenuFileSaveAs) {    saveFileAs();  } else   if (o == m_MenuFileClose) {    closeFile();  } else   if (o == m_MenuFileCloseAll) {    closeAllFiles();  } else   if (o == m_MenuFileProperties) {    showProperties();  } else   if (o == m_MenuFileExit) {    close();  } else   if (o == m_MenuEditUndo) {    undo();  } else   if (o == m_MenuEditCopy) {    copyContent();  } else   if (o == m_MenuEditSearch) {    search();  } else   if (o == m_MenuEditClearSearch) {    clearSearch();  } else   if (o == m_MenuEditDeleteAttribute) {    deleteAttribute(false);  } else   if (o == m_MenuEditDeleteAttributes) {    deleteAttribute(true);  } else   if (o == m_MenuEditRenameAttribute) {    renameAttribute();  } else   if (o == m_MenuEditAttributeAsClass) {    attributeAsClass();  } else   if (o == m_MenuEditDeleteInstance) {    deleteInstance(false);  } else   if (o == m_MenuEditDeleteInstances) {    deleteInstance(true);  } else   if (o == m_MenuEditSortInstances) {    sortInstances();  } else   if (o == m_MenuViewAttributes) {    showAttributes();  } else   if (o == m_MenuViewValues) {    showValues();  } else   if (o == m_MenuViewOptimalColWidths) {    setOptimalColWidths();  }  updateMenu();}  }
class C{  @RequestMapping("/accounts/{accountNumber}") public Account byNumber(@PathVariable("accountNumber") String accountNumber){  logger.info("accounts-service byNumber() invoked: " + accountNumber);  Account account=accountRepository.findByNumber(accountNumber);  logger.info("accounts-service byNumber() found: " + account);  if (account == null)   throw new AccountNotFoundException(accountNumber); else {    return account;  }}  }
class C{  public boolean hasItems(){  return this.extentTree.hasItems();}  }
class C{  @Override public void roll(int field,int amount){  int savedYearOffset=yearOffset;  yearOffset=0;  try {    super.roll(field,amount);  }  finally {    yearOffset=savedYearOffset;  }}  }
class C{  public int stepForward(int amount){  currentPosition+=amount;  currentPosition=Math.max(0,Math.min(currentPosition,content.length()));  remaining=content.substring(currentPosition);  return currentPosition;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_11:    return anonymous_linkingOp_1_1 != null && !anonymous_linkingOp_1_1.isEmpty();case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_21:  return anonymous_linkingOp_2_1 != null && !anonymous_linkingOp_2_1.isEmpty();case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_31:return anonymous_linkingOp_3_1 != null && !anonymous_linkingOp_3_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void fileReadToByteArrayAsync(String path,SuperUserCommandCallback callback){  SuperUserCommand superUserCommand=new SuperUserCommand("cat '" + path + "'");  superUserCommand.setHideInput(true);  superUserCommand.setHideStandardOutput(true);  superUserCommand.setBinaryStandardOutput(true);  superUserCommand.executeAsync(callback);}  }
class C{  public byte[] concatenateArray(byte[][] arraycp){  byte[] dest=new byte[arraycp.length * arraycp[0].length];  int indx=0;  for (int i=0; i < arraycp.length; i++) {    System.arraycopy(arraycp[i],0,dest,indx,arraycp[i].length);    indx=indx + arraycp[i].length;  }  return dest;}  }
class C{  public int pauseDownload(long... ids){  initPauseMethod();  if (pauseDownload == null) {    return -1;  }  try {    return ((Integer)pauseDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  public Builder clearCenterCrop(){  centerCrop=false;  return this;}  }
class C{  public static Map<String,Object> createForGeneral(String displayName,String defaultValue,boolean isRequired,boolean isSecure,String displayOrder){  Map<String,Object> fieldProperties=new HashMap<String,Object>();  fieldProperties.put("display-name",displayName);  fieldProperties.put("default-value",defaultValue);  fieldProperties.put("required",isRequired);  fieldProperties.put("secure",isSecure);  fieldProperties.put("display-order",displayOrder);  return fieldProperties;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  private String stripNamespace(final String query,final DataSourceSchema dataSource) throws QuarkException {  String result=query.replace("\n"," ");  if (dataSource != null) {    try {      final SqlParser parser=getSqlParser(query);      SqlNode node=parser.parseQuery();      result=stripNamespace(node,dataSource.getName(),dataSource.getDataSource().getSqlDialect());    } catch (    Exception e) {      LOG.warn("Exception while parsing the input query: " + e.getMessage());    }  }  return result;}  }
class C{  public void dumpHeader(){  dumpHeader(this);}  }
class C{  private void checkNoSelfIntersectingRing(EdgeIntersectionList eiList){  Set nodeSet=new TreeSet();  boolean isFirst=true;  for (Iterator i=eiList.iterator(); i.hasNext(); ) {    EdgeIntersection ei=(EdgeIntersection)i.next();    if (isFirst) {      isFirst=false;      continue;    }    if (nodeSet.contains(ei.coord)) {      validErr=new TopologyValidationError(TopologyValidationError.RING_SELF_INTERSECTION,ei.coord);      return;    } else {      nodeSet.add(ei.coord);    }  }}  }
class C{  public final AssertSubscriber<T> assertFusionEnabled(){  if (establishedFusionMode != Fuseable.SYNC && establishedFusionMode != Fuseable.ASYNC) {    throw new AssertionError("Fusion was not enabled");  }  return this;}  }
class C{  public String hostname(){  return connectString().substring(0,connectString().lastIndexOf(':'));}  }
class C{  protected EqualityExpressionImpl(){  super();}  }
class C{  @Override protected final void closeNoLock(String reason){  if (isClosed.compareAndSet(false,true)) {    assert rwl.isWriteLockedByCurrentThread() || failEngineLock.isHeldByCurrentThread() : "Either the write lock must be held or the engine must be currently be failing itself";    try {      this.versionMap.clear();      try {        IOUtils.close(searcherManager);      } catch (      Throwable t) {        logger.warn("Failed to close SearcherManager",t);      }      try {        IOUtils.close(translog);      } catch (      Throwable t) {        logger.warn("Failed to close translog",t);      }      logger.trace("rollback indexWriter");      try {        indexWriter.rollback();      } catch (      AlreadyClosedException e) {      }      logger.trace("rollback indexWriter done");    } catch (    Throwable e) {      logger.warn("failed to rollback writer on close",e);    } finally {      store.decRef();      logger.debug("engine closed [{}]",reason);    }  }}  }
class C{  public Position(Ticker ticker,int size,double averageCost){  this.ticker=ticker;  this.size=size;  this.averageCost=averageCost;}  }
class C{  protected void startTracking(){  mIsLive=true;  final long time=SantaPreferences.getCurrentTime();  if (time >= mFirstDeparture && time < mFinalArrival) {    startOnChristmas();  } else {    returnToStartupActivity();  }}  }
class C{  @Override public void makeDirty(){  likelihoodKnown=false;  factorsKnown=false;  loadingsKnown=false;  residualKnown=false;  totalRecompute=true;  changedValues.clear();  LxFKnown=false;  logDetColKnown=false;  traceKnown=false;  dataKnown=false;}  }
class C{  public static void arraycopy8Bit(Object src,int srcPos,Object dst,int dstPos,int len){  Address srcPtr=Magic.objectAsAddress(src).plus(srcPos);  Address dstPtr=Magic.objectAsAddress(dst).plus(dstPos);  aligned8Copy(dstPtr,srcPtr,len);}  }
class C{  public boolean isEnforcePriceLimit(){  if (!m_calculated)   calculatePrice();  return m_enforcePriceLimit;}  }
class C{  public Multiplicity lookupMultiplicity(String text){  return lookup(exactMultiplicity,startsWithMultiplicity,endsWithMultiplicity,text,Multiplicity.UNKNOWN);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final float[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ObjectVirtualPoolRestRep createObjectVirtualPool(ObjectVirtualPoolParam param){  ArgValidator.checkFieldNotEmpty(param.getName(),VPOOL_NAME);  checkForDuplicateName(param.getName(),VirtualPool.class);  ArgValidator.checkFieldNotEmpty(param.getDescription(),VPOOL_DESCRIPTION);  VirtualPoolUtil.validateObjectVirtualPoolCreateParams(param,_dbClient);  VirtualPool cos=prepareVirtualPool(param);  StringBuffer errorMessage=new StringBuffer();  ImplicitPoolMatcher.matchVirtualPoolWithAllStoragePools(cos,_dbClient,_coordinator,errorMessage);  _dbClient.createObject(cos);  recordOperation(OperationTypeEnum.CREATE_VPOOL,VPOOL_CREATED_DESCRIPTION,cos);  return toObjectVirtualPool(cos);}  }
class C{  public static void saveFloatToPreference(Context context,String key,float value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (Float.MIN_VALUE == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putFloat(key,value).apply();  }}  }
class C{  public final double doOperation() throws OperatorFailedException {  int index=MathUtils.nextInt(values.length);  double newValue=values[index];  if (newValue < parameter.getBounds().getLowerLimit(index) || newValue > parameter.getBounds().getUpperLimit(index)) {    throw new OperatorFailedException("proposed value outside boundaries");  }  parameter.setParameterValue(index,newValue);  return 0.0;}  }
class C{  @LargeTest public void testMountBadPackageNameObb(){  mFile=createObbFile(OBB_FILE_3_BAD_PACKAGENAME,R.raw.obb_file3_bad_packagename);  String filePath=mFile.getAbsolutePath();  mountObb(filePath,OBB_FILE_3_BAD_PACKAGENAME,OnObbStateChangeListener.ERROR_PERMISSION_DENIED);}  }
class C{  Vertex times(double c){  return (new Vertex(c * p.x,c * p.y));}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuffer();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  public synchronized boolean offer(KeyType key,MetricDatum datum){  MetricDatum old=map.get(key);  if (old == null) {    boolean offered=queue.offer(new MetricDatumWithKey<KeyType>(key,datum));    if (offered) {      map.put(key,datum);    }    return offered;  } else {    accumulate(old,datum);    return true;  }}  }
class C{  private static void bidirectionalOneToManyRelation(Entity lesson,Entity word){  Property lessonIdProperty=word.addLongProperty("lessonId").getProperty();  word.addToOne(lesson,lessonIdProperty);  lesson.addToMany(word,lessonIdProperty);}  }
class C{  public static void safeClose(Closeable c){  try {    if (c != null) {      c.close();    }  } catch (  IOException ignored) {  }}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @NoInline public final void insert(Address addr){  checkTailInsert(1);  uncheckedTailInsert(addr);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.346 -0400",hash_original_method="3AFE1BBA347326120AD78BEE94F7B2A6",hash_generated_method="3AFE1BBA347326120AD78BEE94F7B2A6") void stopAnimation(){  mAnimation=null;  mTransformation=null;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  public void testGetInstance1(){  if (this.cert == null) {    return;  }  try {    ByteArrayInputStream bais=new ByteArrayInputStream(cert.getEncoded());    X509Certificate.getInstance(bais);  } catch (  java.security.cert.CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateException e) {  }  try {    X509Certificate.getInstance((InputStream)null);    fail("No expected CertificateException");  } catch (  CertificateException e) {  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          flowDir=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              flowDir+=1 << i;            }          }          output.setValue(row,col,flowDir);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void logFatal(Object message,Throwable exception){  logInternal(FATAL,message,exception);}  }
class C{  public void copyTo(OsmElement e,int lat,int lon){  reset();  selectionLat=lat;  selectionLon=lon;  mode=Mode.COPY;  try {    storage.insertElementUnsafe(e);  } catch (  StorageException sex) {    sex.printStackTrace();  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void encodeAttributeValue(String value) throws IOException {  WbXmlAttributeValueDef valueAttrDef=getDefinition().locateAttributeValue(value);  if (valueAttrDef != null) {    writeSwitchPageAttribute(valueAttrDef.getToken().getPageCode());    write(valueAttrDef.getToken().getToken());  } else {    WbXmlExtensionDef extDef=getDefinition().locateExtension(value);    if (extDef != null) {      write(WbXmlLiterals.EXT_T_0);      writeUnsignedInteger(extDef.getToken());    } else {      writeString(value);    }  }}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  public String writeFormatted(Geometry geometry){  Writer sw=new StringWriter();  try {    writeFormatted(geometry,true,sw);  } catch (  IOException ex) {    Assert.shouldNeverReachHere();  }  return sw.toString();}  }
class C{  public SVGOMVKernElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  private void synchronizeThread(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(m_threadListener);  }  if (newThread != null) {    m_dataProvider.setRegisterInformation(newThread.getRegisterValues());    newThread.addListener(m_threadListener);  }  updateGui();}  }
class C{  static public void assertVerticalCenterAligned(View reference,View test){  int[] xy=new int[2];  reference.getLocationOnScreen(xy);  int referenceTop=xy[1];  test.getLocationOnScreen(xy);  int testTop=xy[1];  int center=(reference.getMeasuredHeight() - test.getMeasuredHeight()) / 2;  int delta=testTop - referenceTop;  assertEquals("views are not vertically center aligned",center,delta);}  }
class C{  public EditSession paste(World world,Vector to){  return paste(world,to,true,true,null);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  zoomDelegate.remove(listener);}  }
class C{  public Float remove(Double key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  protected boolean supportsTransactions(){  return true;}  }
class C{  public b addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static IbmWebBndXmi parseIbmWebBndXmi(InputStream input) throws IOException, JDOMException {  IbmWebBndXmiIo io=new IbmWebBndXmiIo();  return (IbmWebBndXmi)io.parseXml(input);}  }
class C{  public static Document createXMLOrigDocFdr(List list,int type,int canAdd,int canDel,AxSf axsf,Locale locale,boolean bad){  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_ORIGDOCS_TEXT);  addLibro(type,canAdd,canDel,root);  int fld8Type=0;  if (axsf.getFld8() != null && axsf.getFld8().getScrTypeadm() != null) {    fld8Type=axsf.getFld8().getScrTypeadm().getId().intValue();    if (fld8Type != 1) {      fld8Type=0;    }  }  String id="0";  if (axsf.getFld8() != null) {    id=axsf.getFld8().getId().toString();  }  addRegistro(id,fld8Type,root);  addCols(locale,root);  Element docs=root.addElement(XML_DOCS_TEXT);  if (bad) {    SaveOrigDocDataDocInput saveOrigDocDataDocInput=null;    for (Iterator it=list.iterator(); it.hasNext(); ) {      saveOrigDocDataDocInput=(SaveOrigDocDataDocInput)it.next();      addDocsBad(saveOrigDocDataDocInput,locale,docs);    }  } else {    ScrRegorigdoc scr=null;    for (Iterator it=list.iterator(); it.hasNext(); ) {      scr=(ScrRegorigdoc)it.next();      addDocs(scr,locale,docs);    }  }  return document;}  }
class C{  public void startAccounts(List<String> matrixIds){  for (  String matrixId : matrixIds) {    if (mMatrixIds.indexOf(matrixId) < 0) {      MXSession session=Matrix.getInstance(getApplicationContext()).getSession(matrixId);      mSessions.add(session);      mMatrixIds.add(matrixId);      session.getDataHandler().addListener(mEventsListener);      session.getDataHandler().getCallsManager().addListener(mCallsManagerListener);      session.startEventStream(null);    }  }}  }
class C{  public void addCase(SwitchCase switchCase){  assertNotNull(switchCase);  if (cases == null) {    cases=new ArrayList<SwitchCase>();  }  cases.add(switchCase);  switchCase.setParent(this);}  }
class C{  private void openContextMenu(MouseEvent e){  if (e.isPopupTrigger()) {    selectClicked(e,false);    List<RemovedListItem> selectedItems=list.getSelectedValuesList();    List<StreamInfo> selected=new ArrayList<>();    for (    RemovedListItem item : selectedItems) {      selected.add(item.getStreamInfo());    }    StreamInfosContextMenu m=new StreamInfosContextMenu(selected,false);    for (    ContextMenuListener cml : contextMenuListeners) {      m.addContextMenuListener(cml);    }    m.show(list,e.getX(),e.getY());  }}  }
class C{  private Intent makeMapsIntent(String address){  Log.d(TAG,"makeMapsIntent: address = " + address);  return new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + Uri.encode(address)));}  }
class C{  private static void appendEscape(StringBuffer sb,int code){  sb.append('%');  sb.append(hexDigits[(code >> 12) & 0x0f]);  sb.append(hexDigits[(code >> 8) & 0x0f]);  sb.append('%');  sb.append(hexDigits[(code >> 4) & 0x0f]);  sb.append(hexDigits[code & 0x0f]);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof DrawingTool) {    if (getDrawingTool() == (DrawingTool)someObj) {      setDrawingTool(null);    }  }}  }
class C{  public static int toIPv4Address(byte[] ipAddress){  int ip=0;  for (int i=0; i < 4; i++) {    int t=(ipAddress[i] & 0xff) << ((3 - i) * 8);    ip|=t;  }  return ip;}  }
class C{  protected Anonymous_entryOrExitAction_2_Impl(){  super();}  }
class C{  public boolean canBeZero(){  boolean zero=true;  if (getFormat().equals(PERCENT_POSITIVE_7_2)) {    zero=false;  } else   if (getFormat().equals(PERCENT_POSITIVE_10_2)) {    zero=false;  }  return zero;}  }
class C{  public TarEntry(String name,boolean preserveLeadingSlashes){  this();  name=normalizeFileName(name,preserveLeadingSlashes);  boolean isDir=name.endsWith("/");  this.devMajor=0;  this.devMinor=0;  this.name=new StringBuffer(name);  this.mode=isDir ? DEFAULT_DIR_MODE : DEFAULT_FILE_MODE;  this.linkFlag=isDir ? LF_DIR : LF_NORMAL;  this.userId=0;  this.groupId=0;  this.size=0;  this.modTime=(new Date()).getTime() / MILLIS_PER_SECOND;  this.linkName=new StringBuffer("");  this.userName=new StringBuffer("");  this.groupName=new StringBuffer("");  this.devMajor=0;  this.devMinor=0;}  }
class C{  public static boolean isNumericTypeSpecifier(char c,boolean isDecimal){  if (isDecimal) {switch (c) {case 'G':case 'g':case 'D':case 'd':case 'F':case 'f':      return true;  }} else {switch (c) {case 'G':case 'g':case 'I':case 'i':case 'L':case 'l':    return true;}}return false;}  }
class C{  protected List<byte[]> convertStringListToByteArray(List<String> valueList){  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());  for (  String value : valueList) {    byteArrayList.add(value.getBytes(Charset.defaultCharset()));  }  return byteArrayList;}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  public DoubleNode(E e){  this.value=e;}  }
class C{  public static DateTimeFormatter dateHour(){  if (dh == null) {    dh=new DateTimeFormatterBuilder().append(date()).append(literalTElement()).append(hour()).toFormatter();  }  return dh;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public static void DismissNotifications(Context c){  NotificationManager mNotificationManager=(NotificationManager)c.getSystemService(Context.NOTIFICATION_SERVICE);  mNotificationManager.cancelAll();  Intent dismissWearableNotifications=new Intent(c,PhoneNotificationService.class);  dismissWearableNotifications.setAction(NotificationConstants.ACTION_DISMISS);  c.sendBroadcast(dismissWearableNotifications);}  }
class C{  public static int discrete(double[] probabilities){  if (probabilities == null)   throw new NullPointerException("argument array is null");  double EPSILON=1E-14;  double sum=0.0;  for (int i=0; i < probabilities.length; i++) {    if (!(probabilities[i] >= 0.0))     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ probabilities[i]);    sum+=probabilities[i];  }  if (sum > 1.0 + EPSILON || sum < 1.0 - EPSILON)   throw new IllegalArgumentException("sum of array entries does not approximately equal 1.0: " + sum);  while (true) {    double r=uniform();    sum=0.0;    for (int i=0; i < probabilities.length; i++) {      sum=sum + probabilities[i];      if (sum > r)       return i;    }  }}  }
class C{  public static String asCommaDelimitedString(Collection<String> strings){  StringBuilder sb=new StringBuilder();  for (  String string : strings) {    if (sb.length() > 0) {      sb.append(COMMA_DELIMITER);    }    sb.append(string);  }  return sb.toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.GATEWAY__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.GATEWAY__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.GATEWAY__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private ComplianceFeature checkCameraPolicy(org.wso2.emm.agent.beans.Operation operation){  boolean cameraStatus=devicePolicyManager.getCameraDisabled(deviceAdmin);  if ((operation.isEnabled() && !cameraStatus) || (!operation.isEnabled() && cameraStatus)) {    policy.setCompliance(true);  } else {    policy.setCompliance(false);  }  return policy;}  }
class C{  private void buildGui(){  addNorth(logo);  final Browser browser=new Browser();  browser.setText(new RHtml("About page","html/about.html","appVersion",Consts.APP_VERSION.toString(),"appBuildNumber",Env.APP_BUILD_INFO.getBuildNumber().toString(),"copyrightYears",Env.COPYRIGHT_YEARS,"authorName",Consts.APP_AUTHOR.getPersonName().toString(),"authorEmail",Consts.APP_AUTHOR.getContact().getEmail(),"urlHomePage",Consts.URL_HOME_PAGE.toString(),"urlProjectPage",Consts.URL_PROJECT_PAGE.toString()).get());  addCenter(new XScrollPane(browser));}  }
class C{  protected Weight(){  super();}  }
class C{  public void removeUpdate(DocumentEvent e){  updateTree(e);}  }
class C{  public static double[][] convertHashMapToDoubleArray(HashMap<CellIndex,Double> matrix){  int max_rows=-1, max_cols=-1;  for (  CellIndex ci : matrix.keySet()) {    if (ci.row > max_rows) {      max_rows=ci.row;    }    if (ci.column > max_cols) {      max_cols=ci.column;    }  }  double[][] ret_arr=new double[max_rows][max_cols];  for (  CellIndex ci : matrix.keySet()) {    int i=ci.row - 1;    int j=ci.column - 1;    ret_arr[i][j]=matrix.get(ci);  }  return ret_arr;}  }
class C{  public long distance2(int[] point1,int[] point2) throws Exception {  if (point1.length == point2.length) {    long sum=0;    for (int i=0; i < point1.length; i++) {      sum=sum + (point2[i] - point1[i]) * (point2[i] - point1[i]);    }    return sum;  } else {    throw new Exception("Exception in Euclidean distance: array lengths are not equal");  }}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  private static String sanitizeDisplayname(String displayName){  if (!TextUtils.isEmpty(displayName)) {    final String ircPattern=" (IRC)";    if (displayName.endsWith(ircPattern)) {      displayName=displayName.substring(0,displayName.length() - ircPattern.length());    }  }  return displayName;}  }
class C{  public void accountSummary(int arg0,String arg1,String arg2,String arg3,String arg4){  _log.debug("accountSummary: " + arg0 + " "+ arg1+ " "+ arg2+ " "+ arg3+ " "+ arg4);}  }
class C{  private void savePreviousManifestFile(String name){  if (Setup.isSaveTrainManifestsEnabled()) {    createFile(getBackupManifestDirectory() + " ",false);    createFile(getBackupManifestDirectory(name) + " ",false);    File file=findFile(getDefaultManifestFilename(name));    if (file == null) {      log.debug("No {} manifest file to backup",name);    } else     if (file.canWrite()) {      String lastModified=new SimpleDateFormat("yyyyMMdd-HHmmss").format(file.lastModified());      String backupName=getBackupManifestFilename(name,lastModified);      if (file.renameTo(new File(backupName))) {        log.debug("created new manifest backup file {}",backupName);      } else {        log.error("could not create manifest backup file {}",backupName);      }    }  }}  }
class C{  public Vector4i mul(Vector4i v){  x*=v.x;  y*=v.y;  z*=v.z;  w*=v.w;  return this;}  }
class C{  private LoggerHolder(){  throw new AssertionError("The LoggerHolder should never be instantiated");}  }
class C{  @Override public void changeTo(final String file,int page,Object location,final Integer type,final boolean storeView){  if (showMethods) {    System.out.println("DefaultActionHandler.changeTo()" + file);  }}  }
class C{  public SwingComponets(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,715,461);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(null);  contentPane.add(getMainPanel());}  }
class C{  private void handleInvoke(InvokeInstruction obj){  Type returnType=obj.getReturnType(getCPG());  Location location=getLocation();  if (trackValueNumbers) {    try {      ValueNumberFrame vnaFrame=vnaDataflow.getFactAtLocation(location);      Set<ValueNumber> nonnullParameters=UnconditionalValueDerefAnalysis.checkAllNonNullParams(location,vnaFrame,cpg,null,null,typeDataflow);      if (!nonnullParameters.isEmpty()) {        IsNullValue kaboom=IsNullValue.noKaboomNonNullValue(location);        IsNullValueFrame frame=getFrame();        for (        ValueNumber vn : nonnullParameters) {          IsNullValue knownValue=frame.getKnownValue(vn);          if (knownValue != null && !knownValue.isDefinitelyNotNull()) {            if (knownValue.isDefinitelyNull()) {              frame.setTop();              return;            }            frame.setKnownValue(vn,kaboom);          }          for (int i=0; i < vnaFrame.getNumSlots(); i++) {            IsNullValue value=frame.getValue(i);            if (vnaFrame.getValue(i).equals(vn) && !value.isDefinitelyNotNull()) {              frame.setValue(i,kaboom);              if (value.isDefinitelyNull()) {                frame.setTop();                return;              }            }          }        }      }    } catch (    DataflowAnalysisException e) {      AnalysisContext.logError("Error looking up nonnull parameters for invoked method",e);    }  }  boolean modelCallReturnValue=MODEL_NONNULL_RETURN && returnType instanceof ReferenceType;  if (!modelCallReturnValue) {    handleNormalInstruction(obj);  } else {    IsNullValue result=null;    TypeFrame typeFrame;    try {      typeFrame=typeDataflow.getFactAtLocation(location);      Set<XMethod> targetSet=Hierarchy2.resolveMethodCallTargets(obj,typeFrame,cpg);      if (targetSet.isEmpty()) {        XMethod calledMethod=XFactory.createXMethod(obj,getCPG());        result=getReturnValueNullness(calledMethod);      } else {        for (        XMethod calledMethod : targetSet) {          IsNullValue pushValue=getReturnValueNullness(calledMethod);          if (result == null) {            result=pushValue;          } else {            result=IsNullValue.merge(result,pushValue);          }        }      }    } catch (    DataflowAnalysisException e) {      result=IsNullValue.nonReportingNotNullValue();    }catch (    ClassNotFoundException e) {      result=IsNullValue.nonReportingNotNullValue();    }    modelInstruction(obj,getNumWordsConsumed(obj),getNumWordsProduced(obj),result);    newValueOnTOS();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_1__LIST_1:    return isList_1();case UmplePackage.ANONYMOUS_PARAMETER_1__NAME_1:  return getName_1();case UmplePackage.ANONYMOUS_PARAMETER_1__TYPE_1:return getType_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static AffineTransformation translationInstance(double x,double y){  AffineTransformation trans=new AffineTransformation();  trans.setToTranslation(x,y);  return trans;}  }
class C{  @Override public Set<K> keySet(){  return new KeySet(this);}  }
class C{  @SuppressWarnings("unchecked") private void doubleCapacity(){  assert head == tail;  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=(E[])a;  head=0;  tail=n;}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(){  return createBusinessObjectDataEntity(businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(false),new SimpleDateFormat(AbstractHerdDao.DEFAULT_SINGLE_DAY_DATE_MASK).format(System.currentTimeMillis()),AbstractDaoTest.SUBPARTITION_VALUES,AbstractDaoTest.INITIAL_DATA_VERSION,true,BusinessObjectDataStatusEntity.VALID);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void processIntentUniversalLink(){  Intent intent;  Uri uri;  if (null != (intent=getIntent())) {    if (intent.hasExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI)) {      Log.d(LOG_TAG,"## processIntentUniversalLink(): EXTRA_UNIVERSAL_LINK_URI present1");      uri=intent.getParcelableExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI);      if (null != uri) {        Intent myBroadcastIntent=new Intent(VectorUniversalLinkReceiver.BROADCAST_ACTION_UNIVERSAL_LINK_RESUME);        myBroadcastIntent.putExtras(getIntent().getExtras());        myBroadcastIntent.putExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_SENDER_ID,VectorUniversalLinkReceiver.HOME_SENDER_ID);        sendBroadcast(myBroadcastIntent);        showWaitingView();        intent.removeExtra(VectorUniversalLinkReceiver.EXTRA_UNIVERSAL_LINK_URI);        Log.d(LOG_TAG,"## processIntentUniversalLink(): Broadcast BROADCAST_ACTION_UNIVERSAL_LINK_RESUME sent");      }    }  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("quad iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=quad.getX1();    coords[1]=quad.getY1();    type=SEG_MOVETO;  } else {    coords[0]=quad.getCtrlX();    coords[1]=quad.getCtrlY();    coords[2]=quad.getX2();    coords[3]=quad.getY2();    type=SEG_QUADTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 2);  }  return type;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public void init() throws ServletException {}  }
class C{  private static String[] composeList(MessageFormat format,String[] list){  if (list.length <= 3)   return list;  String[] listItems={list[0],list[1]};  String newItem=format.format(listItems);  String[] newList=new String[list.length - 1];  System.arraycopy(list,2,newList,1,newList.length - 1);  newList[0]=newItem;  return composeList(format,newList);}  }
class C{  public void addPart(String key,Object value){  jsonParams.put(key,value);}  }
class C{  public void updateBlob(String columnLabel,InputStream inputStream,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public WebsiteAction(KseFrame kseFrame,Target target){  super(kseFrame);switch (target) {case GITHUB:    setData(res.getString("WebsiteAction.GitHubProject.statusbar"),res.getString("WebsiteAction.GitHubProject.text"),res.getString("WebsiteAction.GitHubProject.tooltip"),res.getString("WebsiteAction.image"),URLs.GITHUB_PROJECT);  break;case ISSUE_TRACKER:setData(res.getString("WebsiteAction.GitHubIssueTracker.statusbar"),res.getString("WebsiteAction.GitHubIssueTracker.text"),res.getString("WebsiteAction.GitHubIssueTracker.tooltip"),res.getString("WebsiteAction.image"),URLs.GITHUB_ISSUE_TRACKER);break;default :case MAIN:setData(res.getString("WebsiteAction.statusbar"),res.getString("WebsiteAction.text"),res.getString("WebsiteAction.tooltip"),res.getString("WebsiteAction.image"),URLs.KSE_WEB_SITE);break;}}  }
class C{  public boolean isShowLegendItem(){  return mShowLegendItem;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  fsb.append((char[])m_obj,m_start,m_length);}  }
class C{  private void shareCurrentTrack(){  final long currentAudioId=MusicUtils.getCurrentAudioId();  final String trackName=MusicUtils.getTrackName();  if (currentAudioId == -1 || trackName == null) {    return;  }  final Intent shareIntent=new Intent();  final String artistName=MusicUtils.getArtistName();  final String shareMessage=(artistName != null) ? getString(R.string.now_listening_to,trackName,artistName) : getString(R.string.now_listening_to_no_artist_available,trackName);  shareIntent.setAction(Intent.ACTION_SEND);  shareIntent.setType("text/plain");  shareIntent.putExtra(Intent.EXTRA_TEXT,shareMessage);  shareIntent.putExtra(Intent.EXTRA_STREAM,Uri.parse(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI + "/" + currentAudioId));  startActivity(Intent.createChooser(shareIntent,getString(R.string.share_track_using)));}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  protected TimeStampType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  private void extractLocalWritesForRow(@Output Map<Cell,byte[]> result,SortedMap<Cell,byte[]> writes,byte[] row){  Cell lowCell=Cells.createSmallestCellForRow(row);  Iterator<Entry<Cell,byte[]>> it=writes.tailMap(lowCell).entrySet().iterator();  while (it.hasNext()) {    Entry<Cell,byte[]> entry=it.next();    Cell cell=entry.getKey();    if (!Arrays.equals(row,cell.getRowName())) {      break;    }    result.put(cell,entry.getValue());  }}  }
class C{  public static boolean isValidOffset(final BaseType baseType,final int offset){  Preconditions.checkNotNull(baseType,"Error: base type argument can not be null.");  return (offset < 0) ? false : findMember(baseType,offset).isValid();}  }
class C{  private void addLinkMovementMethod(){  MovementMethod m=textView.getMovementMethod();  if ((m == null) || !(m instanceof TouchableMovementMethod)) {    if (textView.getLinksClickable()) {      textView.setMovementMethod(TouchableMovementMethod.getInstance());    }  }}  }
class C{  public boolean isRemoteVerificationEnabled(){  return __remoteVerificationEnabled;}  }
class C{  @Override public void writeTo(OutputStream os) throws IOException, MessagingException {  writeTo(os,os);}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  if (!(value.equals("yes") || value.equals("no"))) {    handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null);    return null;  }  return new Boolean(value.equals("yes") ? true : false);}  }
class C{  public CategoricalDistribution eliminationAsk(final RandomVariable[] X,final AssignmentProposition[] e,final BayesianNetwork bn){  Set<RandomVariable> hidden=new HashSet<RandomVariable>();  List<RandomVariable> VARS=new ArrayList<RandomVariable>();  calculateVariables(X,e,bn,hidden,VARS);  List<Factor> factors=new ArrayList<Factor>();  for (  RandomVariable var : order(bn,VARS)) {    factors.add(0,makeFactor(var,e,bn));    if (hidden.contains(var)) {      factors=sumOut(var,factors,bn);    }  }  Factor product=pointwiseProduct(factors);  return ((ProbabilityTable)product.pointwiseProductPOS(_identity,X)).normalize();}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public SparseLongArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new long[initialCapacity];  mSize=0;}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public void testFirstTermHighestTotalTermFreq() throws Exception {  int numTerms=20;  String field=null;  TermStats[] terms=HighFreqTerms.getHighFreqTerms(reader,numTerms,field,new HighFreqTerms.TotalTermFreqComparator());  assertEquals("Term with highest totalTermFreq is first",200,terms[0].totalTermFreq);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteProtectionSystem(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,ProtectionSystem.class,"id");  ProtectionSystem system=_dbClient.queryObject(ProtectionSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  List<ProtectionSet> protectionSetsToDelete=new ArrayList<ProtectionSet>();  if (checkForVolumes(id,protectionSetsToDelete)) {    throw APIException.badRequests.unableToDeactivateDueToDependencies(id);  }  _dbClient.markForDeletion(protectionSetsToDelete);  URIQueryResultList sitelist=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getRPSiteArrayProtectionSystemConstraint(id.toString()),sitelist);  Iterator<URI> it=sitelist.iterator();  while (it.hasNext()) {    URI rpSiteArrayId=it.next();    RPSiteArray siteArray=_dbClient.queryObject(RPSiteArray.class,rpSiteArrayId);    if (siteArray != null) {      _dbClient.markForDeletion(siteArray);    }  }  _dbClient.markForDeletion(system);  auditOp(OperationTypeEnum.DELETE_PROTECTION_SYSTEM,true,null,system.getId().toString());  return Response.ok().build();}  }
class C{  private Public(){  super("public");}  }
class C{  public void removeUpdateManagerListener(UpdateManagerListener l){  listeners.remove(l);}  }
class C{  public KNNDistanceOrderResult run(Database database,Relation<O> relation){  final DistanceQuery<O> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<O> knnQuery=database.getKNNQuery(distanceQuery,k + 1);  final int size=(int)((sample <= 1.) ? Math.ceil(relation.size() * sample) : sample);  DBIDs sample=DBIDUtil.randomSample(relation.getDBIDs(),size,rnd);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Sampling kNN distances",size,LOG) : null;  double[] knnDistances=new double[size];  int i=0;  for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance(), i++) {    final KNNList neighbors=knnQuery.getKNNForDBID(iditer,k + 1);    knnDistances[i]=neighbors.getKNNDistance();    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  return new KNNDistanceOrderResult(knnDistances,k);}  }
class C{  public int addLast(String key,String value,List<String> possibleValues){  TagItem tagItem=new TagItem(key,value,false,possibleValues,key.contains("hours") ? TagItem.Type.OPENING_HOURS : TagItem.Type.TEXT,true);  tagItemList.add(tagItem);  keyTagItem.put(key,tagItem);  notifyItemInserted(tagItemList.size() - 1);  change=true;  return tagItemList.size() - 1;}  }
class C{  private static byte[] ntlmHash(final String password) throws AuthenticationException {  try {    final byte[] unicodePassword=password.getBytes("UnicodeLittleUnmarked");    final MD4 md4=new MD4();    md4.update(unicodePassword);    return md4.getOutput();  } catch (  UnsupportedEncodingException e) {    throw new AuthenticationException("Unicode not supported: " + e.getMessage(),e);  }}  }
class C{  @Override public void draw(@NonNull Canvas canvas){  pruneRipples();  final Rect bounds=getDirtyBounds();  final int saveCount=canvas.save(Canvas.CLIP_SAVE_FLAG);  canvas.clipRect(bounds);  drawContent(canvas);  drawBackgroundAndRipples(canvas);  canvas.restoreToCount(saveCount);}  }
class C{  public String generateToken(String userId,String workspaceId){  lock.writeLock().lock();  try {    final String token=generate("machine",128);    tokens.put(workspaceId,userId,token);    return token;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_right.num(xctxt);}  }
class C{  public BufferedImage createIcon(String sidc,AVList params){  if (sidc == null) {    String msg=Logging.getMessage("nullValue.SymbolCodeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  SymbolCode symbolCode=new SymbolCode(sidc);  String filename=this.composeFilename(symbolCode);  BufferedImage srcImg=this.readImage(filename);  if (srcImg == null) {    String msg=Logging.getMessage("Symbology.SymbolIconNotFound",symbolCode);    Logging.logger().severe(msg);    throw new MissingResourceException(msg,BufferedImage.class.getName(),filename);  }  int width=srcImg.getWidth();  int height=srcImg.getHeight();  BufferedImage destImg=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);  this.drawImage(srcImg,destImg);  Color color=this.getColorFromParams(params);  if (!SymbologyConstants.SCHEME_METOC.equalsIgnoreCase(symbolCode.getScheme())) {    if (color == null)     color=this.getColorForStandardIdentity(symbolCode);    this.multiply(destImg,color);    if (this.mustDrawFill(symbolCode)) {      destImg=this.composeFilledImage(destImg,symbolCode);    }  } else   if (color != null) {    this.replaceColor(destImg,color);  }  return destImg;}  }
class C{  public XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  public StaticInvokeExpr newStaticInvokeExpr(SootMethodRef method,Value arg1,Value arg2){  return new JStaticInvokeExpr(method,Arrays.asList(new Value[]{arg1,arg2}));}  }
class C{  public final static TypeDecl mostSpecificSuperClass(final ArrayList types){  ArrayList csList=new ArrayList();  for (Iterator iter=types.iterator(); iter.hasNext(); ) {    csList.add(mostSpecificSuperClass((TypeDecl)iter.next()));  }  greatestLowerBounds(csList);  if (csList.size() == 1) {    return (TypeDecl)csList.get(0);  } else {    return null;  }}  }
class C{  public GVector(double[] vector){  length=vector.length;  values=new double[vector.length];  for (int i=0; i < length; i++) {    values[i]=vector[i];  }}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  public Matrix4f lerp(Matrix4fc other,float t){  return lerp(other,t,this);}  }
class C{  public void warn(Object message){  log(Level.WARNING,String.valueOf(message),null);}  }
class C{  @Override public boolean recognizedFile(IFile file){  if (checkFolderType(file)) {    final String ext=file.getFileExtension();    if (RECOGNIZED_EXTENSIONS.contains(ext)) {      return true;    }  }  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultOHLCDataset clone=(DefaultOHLCDataset)super.clone();  clone.data=new OHLCDataItem[this.data.length];  System.arraycopy(this.data,0,clone.data,0,this.data.length);  return clone;}  }
class C{  DirectArrayOfDoublesQuickSelectSketch(final int nomEntries,final int lgResizeFactor,final float samplingProbability,final int numValues,final long seed,final Memory dstMem){  super(numValues,seed);  mem_=dstMem;  final int startingCapacity=1 << startingSubMultiple(Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries) * 2),ResizeFactor.getRF(lgResizeFactor),MIN_LG_ARR_LONGS);  checkIfEnoughMemory(dstMem,startingCapacity,numValues);  mem_.putByte(PREAMBLE_LONGS_BYTE,(byte)1);  mem_.putByte(SERIAL_VERSION_BYTE,serialVersionUID);  mem_.putByte(FAMILY_ID_BYTE,(byte)Family.TUPLE.getID());  mem_.putByte(SKETCH_TYPE_BYTE,(byte)SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch.ordinal());  final boolean isBigEndian=ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);  mem_.putByte(FLAGS_BYTE,(byte)((isBigEndian ? 1 << Flags.IS_BIG_ENDIAN.ordinal() : 0) | (samplingProbability < 1f ? 1 << Flags.IS_IN_SAMPLING_MODE.ordinal() : 0) | (1 << Flags.IS_EMPTY.ordinal())));  mem_.putByte(NUM_VALUES_BYTE,(byte)numValues);  mem_.putShort(SEED_HASH_SHORT,Util.computeSeedHash(seed));  theta_=(long)(Long.MAX_VALUE * (double)samplingProbability);  mem_.putLong(THETA_LONG,theta_);  mem_.putByte(LG_NOM_ENTRIES_BYTE,(byte)Integer.numberOfTrailingZeros(nomEntries));  mem_.putByte(LG_CUR_CAPACITY_BYTE,(byte)Integer.numberOfTrailingZeros(startingCapacity));  mem_.putByte(LG_RESIZE_FACTOR_BYTE,(byte)lgResizeFactor);  mem_.putFloat(SAMPLING_P_FLOAT,samplingProbability);  mem_.putInt(RETAINED_ENTRIES_INT,0);  keysOffset_=ENTRIES_START;  valuesOffset_=keysOffset_ + SIZE_OF_KEY_BYTES * startingCapacity;  mem_.clear(keysOffset_,SIZE_OF_KEY_BYTES * startingCapacity);  lgCurrentCapacity_=Integer.numberOfTrailingZeros(startingCapacity);  setRebuildThreshold();}  }
class C{  public CStackViewSynchronizer(final JStackView stackView,final CStackMemoryProvider model,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(stackView,"IE01506: Stack view argument can not be null");  Preconditions.checkNotNull(model,"IE01507: Model argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01508: Debug perspective model argument can not be null");  m_stackView=stackView;  m_model=model;  m_debugPerspectiveModel=debugPerspectiveModel;  m_debugPerspectiveModel.addListener(m_listener);  synchronizeDebuggers(null,m_debugPerspectiveModel.getCurrentSelectedDebugger());}  }
class C{  public Object clone(){  TableDefinition clone=(TableDefinition)super.clone();  if (fields != null) {    clone.setFields(new ArrayList<FieldDefinition>(fields.size()));    for (    FieldDefinition fieldDef : getFields()) {      clone.addField((FieldDefinition)fieldDef.clone());    }  }  if (foreignKeyMap != null) {    clone.setForeignKeyMap(new HashMap(this.foreignKeyMap));  }  if (uniqueKeys != null) {    clone.setUniqueKeys(new ArrayList(this.uniqueKeys));  }  return clone;}  }
class C{  public CreateGroupScriptCommand(Configuration configuration,String resourcePath,String groupRole){  super(configuration,resourcePath);  this.groupRole=groupRole;}  }
class C{  public void notifyFailed(Throwable exception) throws CarbonSortKeyAndGroupByException {  dataSorterAndWriterExecutorService.shutdownNow();  executorService.shutdownNow();  observer.setFailed(true);  LOGGER.error(exception);  throw new CarbonSortKeyAndGroupByException(exception);}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void load(){  if (!RapidMiner.getExecutionMode().canAccessFilesystem()) {    LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.tools.usagestats.UsageStatistics.accessing_file_system_error_bypassing_loading");    return;  }  File file=FileSystemService.getUserConfigFile("usagestats.xml");  if (file.exists()) {    try {      LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.tools.usagestats.UsageStatistics.loading_operator_statistics");      Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file);      Element root=doc.getDocumentElement();      String lastReset=root.getAttribute("last-reset");      if (lastReset != null && !lastReset.isEmpty()) {        try {          this.lastReset=getDateFormat().parse(lastReset);        } catch (        ParseException e) {          this.lastReset=new Date();        }      } else {        this.lastReset=new Date();      }      this.randomKey=root.getAttribute("random-key");      if (randomKey == null || randomKey.isEmpty()) {        this.randomKey=createRandomKey();      }      String initialSetup=root.getAttribute("initial-setup");      if (initialSetup != null) {        try {          this.initialSetup=getDateFormat().parse(initialSetup);        } catch (        ParseException e) {        }      }      String nextTransmission=root.getAttribute("next-transmission");      if (lastReset != null && !lastReset.isEmpty()) {        try {          this.nextTransmission=getDateFormat().parse(nextTransmission);        } catch (        ParseException e) {          scheduleTransmission(true);        }      } else {        scheduleTransmission(false);      }      Element actionStats=XMLTools.getChildElement(root,ActionStatisticsCollector.XML_TAG,false);      if (actionStats != null) {        ActionStatisticsCollector.getInstance().load(actionStats);      }    } catch (    Exception e) {      LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.tools.usagestats.UsageStatistics.loading_operator_usage_error",e),e);    }  } else {    this.randomKey=createRandomKey();    this.initialSetup=new Date();    this.lastReset=new Date();  }}  }
class C{  BareBonesBrowserLaunchCommand(String url){  urlToOpen=url;}  }
class C{  public String resolveRelativeUri(String uri){  if (uri.startsWith("/") || uri.startsWith(File.separator)) {    return uri;  } else {    return baseURI + uri;  }}  }
class C{  public TestSubscriber(Long initialRequest){  this(EmptySubscriber.INSTANCE,initialRequest);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jxgymy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  static boolean isConstant(Operand op){  return op instanceof IntConstantOperand;}  }
class C{  public IMarker findTaintMarker(int offset,int length){  SimpleMarkerAnnotation annotation=fTaintAnnotationMap.get(new Position(offset,length));  if (annotation != null)   return annotation.getMarker();  return null;}  }
class C{  public void commit() throws ResourceException {  internalCommit();}  }
class C{  public boolean isItalic(){  if (fontInfo != null)   return fontInfo.italic;  return false;}  }
class C{  @Override protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){  final TableCellTextField tableCellTextField=(TableCellTextField)getEditor().getEditorComponent();  tableCellTextField.processKeyBinding(ks,e,condition,pressed);  if (!tableCellTextField.hasFocus())   tableCellTextField.requestFocus();  return super.processKeyBinding(ks,e,condition,pressed);}  }
class C{  public static QueryBuilder<ParsedGraphQuery> construct(){  return new AbstractQueryBuilder<ParsedGraphQuery>(new ParsedGraphQuery());}  }
class C{  void removeLocals(){  locals=new HashMultiMap();  backLocals=new HashMultiMap();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void validate(){  Preconditions.checkNotNull(this.imageId,"imageId cannot be null");  Preconditions.checkNotNull(this.diskFlavorName,"diskFlavorName cannot be null");  Preconditions.checkNotNull(this.vmFlavorName,"vmFlavorName cannot be null");  Preconditions.checkNotNull(this.projectId,"projectId cannot be null");  Preconditions.checkNotNull(this.nodeType,"nodeType cannot be null");  Preconditions.checkNotNull(this.nodeProperties,"nodeProperties cannot be null");  Preconditions.checkNotNull(this.clusterId,"clusterId cannot be null");  Preconditions.checkArgument(this.nodeCount > 0 && this.nodeCount < 1000,"Invalid nodeCount");}  }
class C{  public Optimized(int n,int s,int t,Iterator<EdgeInfo> edges){  super(n,s,t);  queue=new int[n];  QUEUE_SIZE=n;  capacity=new int[n][n];  flow=new int[n][n];  previous=new int[n];  visited=new int[n];  while (edges.hasNext()) {    EdgeInfo ei=edges.next();    capacity[ei.start][ei.end]=ei.capacity;  }}  }
class C{  public ObserveRequest(String path){  this(null,new LwM2mPath(path),null);}  }
class C{  public static boolean isZero(int[] n){  for (int i=0; i < n.length; i++) {    if (n[i] != 0) {      return false;    }  }  return true;}  }
class C{  public boolean isSetRenameToPath(){  return this.renameToPath != null;}  }
class C{  public static int maxFill(final int n,final float f){  return Math.min((int)Math.ceil(n * f),n - 1);}  }
class C{  public void startNested() throws IOException {  startNested(randomBoundary());}  }
class C{  public static boolean verify(int[] packet){  boolean valid=true;  try {    if (packet[0] != SpecialByte.START_BYTE.getValue()) {      return false;    }    if (packetEndsWithEscapeByte(packet)) {      return false;    }    int[] unEscaped=unEscapePacket(packet);    if (unEscaped.length < 3) {      return false;    }    int len=getPacketLength(unEscaped);    int expectedPacketLength=len + 4;    if (unEscaped.length != expectedPacketLength) {      return false;    }    int[] frameData=new int[len];    Checksum checksum=new Checksum();    for (int i=3; i < unEscaped.length - 1; i++) {      frameData[i - 3]=unEscaped[i];      checksum.addByte(frameData[i - 3]);    }    checksum.addByte(unEscaped[unEscaped.length - 1]);    if (!checksum.verify()) {      valid=false;    }  } catch (  Exception e) {    throw new RuntimeException("Packet verification failed with error: ",e);  }  return valid;}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  if (dataset == null) {    return null;  }  if (this.renderAsPercentages) {    return new Range(0.0,1.0);  } else {    return DatasetUtilities.findStackedRangeBounds(dataset);  }}  }
class C{  public static long copyAndCloseInput(Reader in,Writer out,long length) throws IOException {  try {    long copied=0;    int len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);    char[] buffer=new char[len];    while (length > 0) {      len=in.read(buffer,0,len);      if (len < 0) {        break;      }      if (out != null) {        out.write(buffer,0,len);      }      length-=len;      len=(int)Math.min(length,Constants.IO_BUFFER_SIZE);      copied+=len;    }    return copied;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    in.close();  }}  }
class C{  protected BCSSServiceProvider createBCSSServiceProvider(Class<?> serviceClass,BeanContextServiceProvider provider){  return new BCSSServiceProvider(provider);}  }
class C{  protected int _documentRoot(int nodeIdentifier){  if (nodeIdentifier == NULL)   return NULL;  for (int parent=_parent(nodeIdentifier); parent != NULL; nodeIdentifier=parent, parent=_parent(nodeIdentifier))   ;  return nodeIdentifier;}  }
class C{  public GenericCDATASection(String value,AbstractDocument owner){  ownerDocument=owner;  setNodeValue(value);}  }
class C{  public void add(String key,String value){  String k=normalize(key);  List<String> l=map.get(k);  if (l == null) {    l=new LinkedList<String>();    map.put(k,l);  }  l.add(value);}  }
class C{  public SmashQueue(){  this(THREAD_POOL_SIZE);}  }
class C{  public void checkQuestion(Vertex sentence,Network network){  if (sentence.instanceOf(Primitive.QUESTION)) {    log("Sentence is a question",Level.FINE,sentence);    return;  }  Collection<Relationship> words=sentence.getRelationships(Primitive.WORD);  if (words != null) {    for (    Relationship word : words) {      Vertex meaning=word.getTarget().mostConscious(Primitive.MEANING);      if (meaning != null) {        if (meaning.instanceOf(Primitive.QUESTION)) {          sentence.addRelationship(Primitive.INSTANTIATION,Primitive.QUESTION);          log("Sentence is a question",Level.FINE,sentence,meaning);          break;        }      }    }  }}  }
class C{  public void clearBiases(){  for (  Neuron neuron : this.getFlatNeuronList()) {    if (neuron.getUpdateRule() instanceof BiasedUpdateRule) {      ((BiasedUpdateRule)neuron.getUpdateRule()).setBias(0);    }  }  fireNeuronsUpdated(getFlatNeuronList());}  }
class C{  public ClassDefinition_ createClassDefinition_(){  ClassDefinition_Impl classDefinition_=new ClassDefinition_Impl();  return classDefinition_;}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startDocument");  m_insideParse=true;  if (m_contentHandler != null) {    if (m_incremental) {      m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());      int cpriority=Thread.currentThread().getPriority();      m_transformer.runTransformThread(cpriority);    }    m_contentHandler.startDocument();  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void reloadPage(){  logger.info("Reloading Page: ");  if (manager.getBaseURL() != null) {    loadPage(manager.getBaseURL());  }}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return ParseIOUtils.toByteArray(in);  }  finally {    ParseIOUtils.closeQuietly(in);  }}  }
class C{  public Properties load(String file){  try {    prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(file));  } catch (  Exception e) {    System.out.println(e.getMessage());  }  return prop;}  }
class C{  public void testCopyCharArraySet(){  CharArraySet setIngoreCase=new CharArraySet(10,true);  CharArraySet setCaseSensitive=new CharArraySet(10,false);  List<String> stopwords=Arrays.asList(TEST_STOP_WORDS);  List<String> stopwordsUpper=new ArrayList<>();  for (  String string : stopwords) {    stopwordsUpper.add(string.toUpperCase(Locale.ROOT));  }  setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));  setIngoreCase.add(Integer.valueOf(1));  setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));  setCaseSensitive.add(Integer.valueOf(1));  CharArraySet copy=CharArraySet.copy(setIngoreCase);  CharArraySet copyCaseSens=CharArraySet.copy(setCaseSensitive);  assertEquals(setIngoreCase.size(),copy.size());  assertEquals(setCaseSensitive.size(),copy.size());  assertTrue(copy.containsAll(stopwords));  assertTrue(copy.containsAll(stopwordsUpper));  assertTrue(copyCaseSens.containsAll(stopwords));  for (  String string : stopwordsUpper) {    assertFalse(copyCaseSens.contains(string));  }  List<String> newWords=new ArrayList<>();  for (  String string : stopwords) {    newWords.add(string + "_1");  }  copy.addAll(newWords);  assertTrue(copy.containsAll(stopwords));  assertTrue(copy.containsAll(stopwordsUpper));  assertTrue(copy.containsAll(newWords));  for (  String string : newWords) {    assertFalse(setIngoreCase.contains(string));    assertFalse(setCaseSensitive.contains(string));  }}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  private JSONObject copyFile(File srcFile,File destFile) throws IOException, InvalidModificationException, JSONException {  if (destFile.exists() && destFile.isDirectory()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  copyAction(srcFile,destFile);  return makeEntryForFile(destFile);}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  @ApiOperation(value="Stop the single engine") @RequestMapping(value="engine/stop",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postStop(){  stopImpl(getSymmetricEngine());}  }
class C{  public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,ColumnIdentifier columnIdentifier,DataType dataType){  this(carbonTableIdentifier,columnIdentifier);  this.dataType=dataType;}  }
class C{  private void createDefinedDynamicRegions() throws CacheException {  Set s=dynamicRegionList.entrySet(false);  Iterator i=s.iterator();  TreeMap sorted=new TreeMap();  while (i.hasNext()) {    Region.Entry e=(Region.Entry)i.next();    DynamicRegionAttributes dda=(DynamicRegionAttributes)e.getValue();    sorted.put(dda.rootRegionName + "/" + dda.name,dda);  }  i=sorted.values().iterator();  while (i.hasNext()) {    DynamicRegionAttributes dda=(DynamicRegionAttributes)i.next();    doBeforeRegionCreated(dda.rootRegionName,dda.name,null);    Region region=createDynamicRegionImpl(dda.rootRegionName,dda.name,false);    doAfterRegionCreated(region,false,false,null);  }}  }
class C{  public void importPackage(String packageName){  importedPackages.add(packageName);}  }
class C{  protected void sendBatch(){  isCallbackScheduled=false;  if (this.hasViews()) {    EventBean[] newData=null;    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      newData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if ((lastBatch != null) && (!lastBatch.isEmpty())) {      oldData=lastBatch.toArray(new EventBean[lastBatch.size()]);    }    if ((newData != null) || (oldData != null) || (isForceOutput)) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,timeBatchViewFactory.getViewName(),newData,oldData);      }      updateChildren(newData,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  if ((!currentBatch.isEmpty()) || ((lastBatch != null) && (!lastBatch.isEmpty())) || (isForceOutput)) {    scheduleCallback();    isCallbackScheduled=true;  }  lastBatch=currentBatch;  currentBatch=new LinkedHashSet<EventBean>();}  }
class C{  public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newTransformerHandler(templates);}  }
class C{  @Override public int compareTo(FiringPlan other){  return (int)(getUtility() - other.getUtility() + 0.5);}  }
class C{  @Deprecated protected String normalizeMimeType(String mimeType){  return mimeType;}  }
class C{  @Override protected void initScene(){  mBackgroundQuad=new ScreenQuad();  mTangoCameraTexture=new StreamingTexture("camera",(StreamingTexture.ISurfaceListener)null);  Material tangoCameraMaterial=new Material();  tangoCameraMaterial.setColorInfluence(0);  try {    tangoCameraMaterial.addTexture(mTangoCameraTexture);    mBackgroundQuad.setMaterial(tangoCameraMaterial);  } catch (  ATexture.TextureException e) {    e.printStackTrace();  }  getCurrentScene().addChildAt(mBackgroundQuad,0);}  }
class C{  private void stepOutput(){  if (isEmpty()) {    return;  }  for (  final Port port : Port.VALUES) {    final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);    if (!sendingPipe.isWriting()) {      sendingPipe.beginWrite(peek());    }  }}  }
class C{  private RenderingHintsKeyExt(){}  }
class C{  public static int hashCode(Object a[]){  if (a == null)   return 0;  int result=1;  for (  Object element : a)   result=31 * result + (element == null ? 0 : element.hashCode());  return result;}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public NewProjectionPlotAction(final Workspace workspace){  super("Projection Plot",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("ProjectionIcon.png"));  putValue(SHORT_DESCRIPTION,"New Projection Plot");}  }
class C{  EscapeSet(int reg,int size,EscapeState escState){  regSet=new BitSet(size);  regSet.set(reg);  escape=escState;  childSets=new ArrayList<EscapeSet>();  parentSets=new ArrayList<EscapeSet>();  replaceableArray=false;}  }
class C{  public final Unsigned addAndGet(Unsigned delta){  return Word.unsigned(value.addAndGet(delta.rawValue()));}  }
class C{  public static File loadServerKey(){  return Paths.get(TESTING_CERTS_DIR.toString(),"server.key").toFile();}  }
class C{  public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void validateUpdate(IDataType newType) throws TypeUpdateException {  if (!getName().equals(newType.getName()) || !getClass().getName().equals(newType.getClass().getName())) {    throw new TypeUpdateException(newType);  }}  }
class C{  public XML addClass(Class<?> aClass,Global global){  checksClassAbsence(aClass);  XmlClass xmlClass=new XmlClass();  xmlClass.name=aClass.getName();  xmlJmapper.classes.add(xmlClass);  addGlobal(aClass,global);  return this;}  }
class C{  public boolean portAllocationUseExistingZones(String storageSystemType,boolean backend){  if (backend) {    return customConfigHandler.getComputedCustomConfigBooleanValue(CustomConfigConstants.PORT_ALLOCATION_USE_PREZONED_PORT_BACKEND,storageSystemType,null);  } else {    return customConfigHandler.getComputedCustomConfigBooleanValue(CustomConfigConstants.PORT_ALLOCATION_USE_PREZONED_PORT_FRONTEND,CustomConfigConstants.DEFAULT_KEY,null);  }}  }
class C{  public boolean hasMatridIds(Context context){  boolean localUpdateOnly=(null != mMXIDsByElement);  if (null == mMXIDsByElement) {    mMXIDsByElement=new HashMap<>();  }  if (couldContainMatridIds()) {    PIDsRetriever.getIntance().retrieveMatrixIds(context,this,localUpdateOnly);  }  return (mMXIDsByElement.size() != 0);}  }
class C{  public boolean startPriority(Runnable task,long timeout){  long expire;  if (timeout < 0 || timeout > MAX_EXPIRE)   expire=MAX_EXPIRE; else   expire=CurrentTime.getCurrentTimeActual() + timeout;  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=true;  boolean isQueue=false;  boolean isWake=true;  return scheduleImpl(task,loader,expire,isPriority,isQueue,isWake);}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public void add(T object){  add(object,1);}  }
class C{  private void readObject(){}  }
class C{  public boolean hasProperty(URI r){  return properties.containsKey(r);}  }
class C{  public static final int quickCheck(int c,int modeValue){  final int qcMask[]={0,0,QC_NFD,QC_NFKD,QC_NFC,QC_NFKC};  int norm32=(int)getNorm32(c) & qcMask[modeValue];  if (norm32 == 0) {    return 1;  } else   if ((norm32 & QC_ANY_NO) != 0) {    return 0;  } else {    return 2;  }}  }
class C{  public EnableNetStatsDump(File logFileAbsoluteLocation){  mLogFileAbsoluteLocation=logFileAbsoluteLocation;}  }
class C{  public static void addRenderedHiddenField(FacesContext context,String clientId){  Map map=getHiddenFieldMap(context,true);  map.put(clientId,Boolean.FALSE);}  }
class C{  public static byte toByteValue(double d){  return (byte)d;}  }
class C{  public void testMaxIndegree(){  int indegree=RandomUtil.getInstance().nextInt(8) + 2;  int mlag=RandomUtil.getInstance().nextInt(9) + 1;  double percentHousekeeping=RandomUtil.getInstance().nextDouble() * 20.0;  SimpleRandomizer simpleRandomizer=new SimpleRandomizer(indegree,SimpleRandomizer.MAX,mlag,percentHousekeeping);  simpleRandomizer.initialize(this.lagGraph);  int max=0;  SortedSet factors=lagGraph.getFactors();  for (Iterator it=factors.iterator(); it.hasNext(); ) {    String factor=(String)it.next();    SortedSet parents=lagGraph.getParents(factor);    if (parents.size() > max) {      max=parents.size();    }  }  assertTrue(indegree <= max);}  }
class C{  protected void readHeader(){  String id="";  for (int i=0; i < 6; i++) {    id+=(char)read();  }  if (!id.startsWith("GIF")) {    status=STATUS_FORMAT_ERROR;    return;  }  readLSD();  if (gctFlag && !err()) {    gct=readColorTable(gctSize);    bgColor=gct[bgIndex];  }}  }
class C{  public MiniDrawer withInRTL(boolean inRTL){  this.mInRTL=inRTL;  return this;}  }
class C{  private void createValidation(Class<?> vaultClass,Class<?> assetClass,Class<?> idClass){  for (  Method method : vaultClass.getMethods()) {    if (!method.getName().startsWith("create")) {      continue;    }    if (!Modifier.isAbstract(method.getModifiers())) {      continue;    }    TypeRef resultRef=findResult(method.getParameters());    if (resultRef == null) {      continue;    }    TypeRef typeRef=resultRef.to(Result.class).param(0);    Class<?> typeClass=typeRef.rawClass();    if (unbox(idClass).equals(unbox(typeClass))) {      continue;    }    if (void.class.equals(unbox(typeClass))) {      continue;    }    try {      new ShimConverter<>(assetClass,typeClass);    } catch (    Exception e) {      throw error(e,"{0}.{1}: {2}",vaultClass.getSimpleName(),method.getName(),e.getMessage());    }  }}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  public boolean isUseIpAddressAsCommonName(){  return useIpAddressAsCommonName;}  }
class C{  public long add(long instant,int amount){  instant=super.add(instant,amount);  FieldUtils.verifyValueBounds(this,get(instant),iMin,iMax);  return instant;}  }
class C{  public SecurityCheckException(){  super();}  }
class C{  public DefaultLeafCoder(){}  }
class C{  public void startKeyPairGeneration(){  generator=new Thread(new GenerateKeyPair());  generator.setPriority(Thread.MIN_PRIORITY);  generator.start();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected void addNode(Node nodeToInsert,Node insertBeforeNode){  nodeToInsert.next=insertBeforeNode;  nodeToInsert.previous=insertBeforeNode.previous;  insertBeforeNode.previous.next=nodeToInsert;  insertBeforeNode.previous=nodeToInsert;}  }
class C{  private void _startStreamingMessages(String topic,List<KafkaStream<byte[],byte[]>> streams){  ExecutorService executorService=_topics.get(topic).getStreamExecutorService();  for (  final KafkaStream<byte[],byte[]> stream : streams) {    executorService.submit(new KafkaConsumer(stream));  }}  }
class C{  public static Vector3D create(double x,double y,double z){  return new Vector3D(x,y,z);}  }
class C{  public static void deleteMovementLines(Properties ctx,int movementId){  String sql="DELETE FROM M_MovementLine WHERE " + " M_Movement_Id=" + movementId + " AND AD_CLIENT_ID="+ Env.getAD_Client_ID(ctx);  DB.executeUpdate(sql,null);}  }
class C{  public SearchAction(SearchInformation info,String messageKey){  this.info=info;  putValue(Action.NAME,MessageFormat.format(I18n.tr(messageKey),new Object[]{info.getTitle()}));  if (SearchMediator.validateInfo(info) != SearchMediator.QUERY_VALID) {    throw new IllegalArgumentException("invalid search info: " + info);  }}  }
class C{  public SimpleUserContext(AuthenticationProvider authProvider,Map<String,GuacamoleConfiguration> configs){  this(authProvider,UUID.randomUUID().toString(),configs);}  }
class C{  public void init(InputStream is){  this.is=is;}  }
class C{  @Override protected void onStarted(final Player player){  player.drop("money",30);  player.sendPrivateText("You throw 30 coins into the well and make a wish.");}  }
class C{  public static void v(String msg){  log(LEVEL.VERBOSE,null,msg,null);}  }
class C{  @Override public boolean load(Element shared,Element perNode){  boolean result=true;  Attribute a;  int x=0;  int y=0;  int windowHeight=400;  int windowWidth=300;  int panelHeight=340;  int panelWidth=280;  int sidetrackwidth=3;  int mainlinetrackwidth=3;  try {    x=shared.getAttribute("x").getIntValue();    y=shared.getAttribute("y").getIntValue();    if ((a=shared.getAttribute("height")) != null) {      windowHeight=a.getIntValue();      panelHeight=windowHeight - 60;    }    if ((a=shared.getAttribute("width")) != null) {      windowWidth=a.getIntValue();      panelWidth=windowWidth - 18;    }    if ((a=shared.getAttribute("windowheight")) != null) {      windowHeight=a.getIntValue();    }    if ((a=shared.getAttribute("windowwidth")) != null) {      windowWidth=a.getIntValue();    }    if ((a=shared.getAttribute("panelheight")) != null) {      panelHeight=a.getIntValue();    }    if ((a=shared.getAttribute("panelwidth")) != null) {      panelWidth=a.getIntValue();    }    mainlinetrackwidth=shared.getAttribute("mainlinetrackwidth").getIntValue();    sidetrackwidth=shared.getAttribute("sidetrackwidth").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert LayoutEditor's attribute");    result=false;  }  double xScale=1.0;  double yScale=1.0;  a=shared.getAttribute("xscale");  if (a != null) {    try {      xScale=(Float.parseFloat(a.getValue()));    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("yscale");  if (a != null) {    try {      yScale=(Float.parseFloat(a.getValue()));    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  String name="";  if (shared.getAttribute("name") != null) {    name=shared.getAttribute("name").getValue();  }  if (jmri.jmrit.display.PanelMenu.instance().isPanelNameUsed(name)) {    JFrame frame=new JFrame("DialogDemo");    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    log.warn("File contains a panel with the same name (" + name + ") as an existing panel");    int n=JOptionPane.showConfirmDialog(frame,java.text.MessageFormat.format(rb.getString("DuplicatePanel"),new Object[]{name}),rb.getString("DuplicatePanelTitle"),JOptionPane.YES_NO_OPTION);    if (n == JOptionPane.NO_OPTION) {      return false;    }  }  String defaultColor="black";  String defaultTextColor="black";  if (shared.getAttribute("defaulttrackcolor") != null) {    defaultColor=shared.getAttribute("defaulttrackcolor").getValue();  }  if (shared.getAttribute("defaulttextcolor") != null) {    defaultTextColor=shared.getAttribute("defaulttextcolor").getValue();  }  String turnoutCircleColor="track";  if (shared.getAttribute("turnoutcirclecolor") != null) {    turnoutCircleColor=shared.getAttribute("turnoutcirclecolor").getValue();  }  int turnoutCircleSize=2;  if (shared.getAttribute("turnoutcirclesize") != null) {    try {      turnoutCircleSize=shared.getAttribute("turnoutcirclesize").getIntValue();    } catch (    DataConversionException e1) {      log.warn("unable to convert turnoutcirclesize");    }  }  boolean turnoutDrawUnselectedLeg=true;  if ((a=shared.getAttribute("turnoutdrawunselectedleg")) != null && a.getValue().equals("no")) {    turnoutDrawUnselectedLeg=false;  }  LayoutEditor panel=new LayoutEditor(name);  panel.setLayoutName(name);  panel.setMainlineTrackWidth(mainlinetrackwidth);  panel.setSideTrackWidth(sidetrackwidth);  panel.setDefaultTrackColor(defaultColor);  panel.setDefaultTextColor(defaultTextColor);  panel.setTurnoutCircleColor(turnoutCircleColor);  panel.setTurnoutCircleSize(turnoutCircleSize);  panel.setTurnoutDrawUnselectedLeg(turnoutDrawUnselectedLeg);  panel.setXScale(xScale);  panel.setYScale(yScale);  double sz=20.0;  a=shared.getAttribute("turnoutbx");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setTurnoutBX(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("turnoutcx");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setTurnoutCX(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("turnoutwid");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setTurnoutWid(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("xoverlong");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setXOverLong(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("xoverhwid");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setXOverHWid(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  a=shared.getAttribute("xovershort");  if (a != null) {    try {      sz=(Float.parseFloat(a.getValue()));      panel.setXOverShort(sz);    } catch (    Exception e) {      log.error("failed to convert to float - " + a.getValue());      result=false;    }  }  int iz=10;  a=shared.getAttribute("gridSize");  if (a != null) {    try {      iz=(Integer.parseInt(a.getValue()));      panel.setGridSize(iz);    } catch (    Exception e) {      log.error("failed to convert to int - " + a.getValue());      result=false;    }  }  String slValue="both";  if ((a=shared.getAttribute("sliders")) != null && a.getValue().equals("no")) {    slValue="none";  }  if ((a=shared.getAttribute("scrollable")) != null) {    slValue=a.getValue();  }  boolean edValue=true;  if ((a=shared.getAttribute("editable")) != null && a.getValue().equals("no")) {    edValue=false;  }  boolean value=true;  if ((a=shared.getAttribute("positionable")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllPositionable(value);  value=true;  if ((a=shared.getAttribute("controlling")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllControlling(value);  value=true;  if ((a=shared.getAttribute("animating")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setTurnoutAnimation(value);  boolean hbValue=true;  if ((a=shared.getAttribute("showhelpbar")) != null && a.getValue().equals("no")) {    hbValue=false;  }  boolean dgValue=false;  if ((a=shared.getAttribute("drawgrid")) != null && a.getValue().equals("yes")) {    dgValue=true;  }  boolean sgaValue=false;  if ((a=shared.getAttribute("snaponadd")) != null && a.getValue().equals("yes")) {    sgaValue=true;  }  boolean sgmValue=false;  if ((a=shared.getAttribute("snaponmove")) != null && a.getValue().equals("yes")) {    sgmValue=true;  }  boolean aaValue=false;  if ((a=shared.getAttribute("antialiasing")) != null && a.getValue().equals("yes")) {    aaValue=true;  }  value=false;  if ((a=shared.getAttribute("turnoutcircles")) != null && a.getValue().equals("yes")) {    value=true;  }  panel.setTurnoutCircles(value);  value=false;  if ((a=shared.getAttribute("tooltipsnotedit")) != null && a.getValue().equals("yes")) {    value=true;  }  panel.setTooltipsNotEdit(value);  value=false;  if ((a=shared.getAttribute("autoblkgenerate")) != null && a.getValue().equals("yes")) {    value=true;  }  panel.setAutoBlockAssignment(value);  value=true;  if ((a=shared.getAttribute("tooltipsinedit")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setTooltipsInEdit(value);  if ((a=shared.getAttribute("defaulttrackcolor")) != null) {    panel.setDefaultTrackColor(a.getValue());  }  if ((a=shared.getAttribute("defaultoccupiedtrackcolor")) != null) {    panel.setDefaultOccupiedTrackColor(a.getValue());  }  if ((a=shared.getAttribute("defaultalternativetrackcolor")) != null) {    panel.setDefaultAlternativeTrackColor(a.getValue());  }  try {    int red=shared.getAttribute("redBackground").getIntValue();    int blue=shared.getAttribute("blueBackground").getIntValue();    int green=shared.getAttribute("greenBackground").getIntValue();    panel.setDefaultBackgroundColor(ColorUtil.colorToString(new Color(red,green,blue)));    panel.setBackgroundColor(new Color(red,green,blue));  } catch (  org.jdom2.DataConversionException e) {    log.warn("Could not parse color attributes!");  }catch (  NullPointerException e) {  }  if (shared.getAttribute("useDirectTurnoutControl") != null) {    if (shared.getAttribute("useDirectTurnoutControl").getValue().equals("yes")) {      panel.setDirectTurnoutControl(true);    }  }  panel.initView();  List<Element> items=shared.getChildren();  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    String adapterName=item.getAttribute("class").getValue();    if (log.isDebugEnabled()) {      String id="<null>";      try {        id=item.getAttribute("ident").getValue();      } catch (      Exception e) {      }      log.debug("Load " + id + " for ["+ panel.getName()+ "] via "+ adapterName);    }    try {      XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();      adapter.load(item,panel);      if (!panel.loadOK()) {        result=false;      }    } catch (    Exception e) {      log.error("Exception while loading " + item.getName() + ":"+ e);      result=false;      e.printStackTrace();    }  }  panel.disposeLoadData();  panel.setConnections();  panel.setAllEditable(edValue);  panel.setShowHelpBar(hbValue);  panel.setDrawGrid(dgValue);  panel.setSnapOnAdd(sgaValue);  panel.setSnapOnMove(sgmValue);  panel.setAntialiasingOn(aaValue);  panel.setScroll(slValue);  panel.pack();  panel.setLayoutDimensions(windowWidth,windowHeight,x,y,panelWidth,panelHeight);  panel.setVisible(true);  panel.resetDirty();  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerUser(panel);  }  if (jmri.InstanceManager.getDefault(jmri.TransitManager.class).getSystemNameList().size() > 0) {    if (shared.getAttribute("openDispatcher") != null) {      if (shared.getAttribute("openDispatcher").getValue().equals("yes")) {        panel.setOpenDispatcherOnLoad(true);        jmri.jmrit.dispatcher.DispatcherFrame df=jmri.jmrit.dispatcher.DispatcherFrame.instance();        df.loadAtStartup();      } else {        panel.setOpenDispatcherOnLoad(false);      }    }  }  return result;}  }
class C{  public void deleteMessages(List<String> nodes) throws XMPPException {  OfflineMessageRequest request=new OfflineMessageRequest();  for (  String node : nodes) {    OfflineMessageRequest.Item item=new OfflineMessageRequest.Item(node);    item.setAction("remove");    request.addItem(item);  }  PacketFilter responseFilter=new PacketIDFilter(request.getPacketID());  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(request);  IQ answer=(IQ)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (answer == null) {    throw new XMPPException("No response from server.");  } else   if (answer.getError() != null) {    throw new XMPPException(answer.getError());  }}  }
class C{  public ByteVector putShort(final int s){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void unloadSoundEffects(){  sendMsg(mAudioHandler,MSG_UNLOAD_SOUND_EFFECTS,SENDMSG_QUEUE,0,0,null,0);}  }
class C{  public void valueChange(ValueChangeEvent evt){  Object newValue=evt.getNewValue();  if (newValue instanceof Integer)   Env.setContext(Env.getCtx(),m_WindowNo,"Account_ID",((Integer)newValue).intValue());}  }
class C{  public void stopService(Service service){  if (service == null) {    throw new IllegalArgumentException("service is required");  }  stopService(service.getSelfLink());}  }
class C{  public T caseContentFilter(ContentFilter object){  return null;}  }
class C{  protected void shutdownImpl(ShutdownModeAmp mode,Result<Boolean> result){  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  I oldInstance=_instance;  if (oldInstance == null) {    result.ok(true);    return;  }  boolean isStopping=false;  try {    thread.setContextClassLoader(oldInstance.classLoader());    isStopping=_lifecycle.toStopping();    _lifecycle.toStop();    if (!isStopping) {      return;    }    _instance=null;    oldInstance.shutdown(mode);    result.ok(true);  } catch (  Throwable e) {    result.fail(e);  } finally {    thread.setContextClassLoader(oldLoader);  }}  }
class C{  protected int calcHits(Vector<Report> vPhaseReport){  if ((ae instanceof BattleArmor) && (weapon.getLocation() == BattleArmor.LOC_SQUAD) && !(weapon.isSquadSupportWeapon())&& !(ae.getSwarmTargetId() == target.getTargetId())) {    bSalvo=true;    int toReturn=allShotsHit() ? ((BattleArmor)ae).getShootingStrength() : Compute.missilesHit(((BattleArmor)ae).getShootingStrength());    Report r=new Report(3325);    r.newlines=0;    r.subject=subjectId;    r.add(toReturn);    r.add(" troopers ");    r.add(toHit.getTableDesc());    vPhaseReport.add(r);    return toReturn;  }  return 1;}  }
class C{  public void printCallStack(DMLFrame currFrame,Stack<DMLFrame> callStack){  int frameID=0;  if (currFrame == null)   System.out.println("DML runtime is currently inactive."); else {    if (callStack != null) {      for (      DMLFrame frame : callStack) {        System.out.println("Frame id: " + frameID++);        printFrame(frame);      }    }    System.out.println("Current frame id: " + frameID++);    printFrame(currFrame);  }}  }
class C{  public void enableCache(){  enableCache(getCount());}  }
class C{  private void emitStringIndex(CstString string) throws IOException {  if ((string == null) || (file == null)) {    output.writeUleb128(0);  } else {    output.writeUleb128(1 + file.getStringIds().indexOf(string));  }  if (DEBUG) {    System.err.printf("Emit string %s\n",string == null ? "<null>" : string.toQuoted());  }}  }
class C{  public static void organizeDistribution(final Object[] objs,final RandomChoiceChooser chooser){  organizeDistribution(objs,chooser,false);}  }
class C{  public int nextClearBit(int fromIndex){  int i=fromIndex >> ADDRESS_BITS;  int max=data.length;  for (; i < max; i++) {    if (data[i] == -1) {      continue;    }    int j=Math.max(fromIndex,i << ADDRESS_BITS);    for (int end=j + 64; j < end; j++) {      if (!get(j)) {        return j;      }    }  }  return max << ADDRESS_BITS;}  }
class C{  public static void putLayer(JComponent c,int layer){  Integer layerObj;  layerObj=new Integer(layer);  c.putClientProperty(LAYER_PROPERTY,layerObj);}  }
class C{  @Override public SQLXML createSQLXML() throws SQLException {  throw unsupported("SQLXML");}  }
class C{  public static VOMarketplace toVOMarketplace(Marketplace domObj,LocalizerFacade facade){  if (domObj == null) {    return null;  }  VOMarketplace voResult=new VOMarketplace();  updateValueObject(voResult,domObj);  voResult.setMarketplaceId(domObj.getMarketplaceId());  voResult.setName(facade.getText(domObj.getKey(),LocalizedObjectTypes.MARKETPLACE_NAME));  voResult.setOpen(domObj.isOpen());  voResult.setTaggingEnabled(domObj.isTaggingEnabled());  voResult.setReviewEnabled(domObj.isReviewEnabled());  voResult.setSocialBookmarkEnabled(domObj.isSocialBookmarkEnabled());  voResult.setCategoriesEnabled(domObj.isCategoriesEnabled());  voResult.setRestricted(domObj.isRestricted());  voResult.setHasPublicLandingPage(domObj.getPublicLandingpage() != null);  Organization owner=domObj.getOrganization();  if (owner != null) {    voResult.setOwningOrganizationId(owner.getOrganizationId());    String name=owner.getName();    voResult.setOwningOrganizationName(name != null ? name : "<empty>");  }  Tenant tenant=domObj.getTenant();  if (tenant != null) {    voResult.setTenantId(tenant.getTenantId());  }  return voResult;}  }
class C{  public GridTable(Properties ctx,int AD_Table_ID,String TableName,int WindowNo,int TabNo,boolean withAccessControl,boolean virtual){  super();  log.info(TableName);  m_ctx=ctx;  m_AD_Table_ID=AD_Table_ID;  setTableName(TableName);  m_WindowNo=WindowNo;  m_TabNo=TabNo;  m_withAccessControl=withAccessControl;  m_virtual=virtual;}  }
class C{  public void saveHandleDatabase(HandleDatabase database) throws IOException {  String file=getHandleDatabaseFile();  database.store(fileHandler.getOutputStream(file));}  }
class C{  public void start(){  log.info("DistributedOwnerLockService starting up");  try {    dataManager=coordinator.getWorkflowDataManager();  } catch (  Exception ex) {    log.error("Can't get a DistributedDataManager",ex);  }}  }
class C{  private Document signElement(Document doc,String id,X509Certificate cert,PrivateKey key,String signAlgorithm,String digestAlgorithm) throws MarshalException, XMLSignatureException {  try {    XMLSignatureFactory xmlSignatureFactory=XMLSignatureFactory.getInstance("DOM",new org.jcp.xml.dsig.internal.dom.XMLDSigRI());    List<Transform> transforms=new ArrayList<Transform>();    Transform enveloped=xmlSignatureFactory.newTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE,(XMLStructure)null);    transforms.add(enveloped);    Transform c14n=xmlSignatureFactory.newTransform(Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS,(XMLStructure)null);    transforms.add(c14n);    Reference ref;    try {      ref=xmlSignatureFactory.newReference("#" + id,xmlSignatureFactory.newDigestMethod(digestAlgorithm,null),transforms,null,null);    } catch (    NoSuchAlgorithmException e) {      ref=xmlSignatureFactory.newReference("#" + id,xmlSignatureFactory.newDigestMethod(DigestMethod.SHA256,null),transforms,null,null);    }    SignedInfo signedInfo;    try {      signedInfo=xmlSignatureFactory.newSignedInfo(xmlSignatureFactory.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE,(C14NMethodParameterSpec)null),xmlSignatureFactory.newSignatureMethod(signAlgorithm,null),Collections.singletonList(ref));    } catch (    NoSuchAlgorithmException e) {      signedInfo=xmlSignatureFactory.newSignedInfo(xmlSignatureFactory.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE,(C14NMethodParameterSpec)null),xmlSignatureFactory.newSignatureMethod(XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA256,null),Collections.singletonList(ref));    }    KeyInfoFactory keyInfoFactory=xmlSignatureFactory.getKeyInfoFactory();    List<X509Certificate> x509Content=new ArrayList<>();    x509Content.add(cert);    X509Data x509Data=keyInfoFactory.newX509Data(x509Content);    KeyInfo keyInfo=keyInfoFactory.newKeyInfo(Collections.singletonList(x509Data));    Element elementToSign=doc.getElementById(id);    NodeList issuerList=elementToSign.getElementsByTagNameNS("*","Issuer");    Element elementBeforeSignature;    if (issuerList.getLength() > 0) {      elementBeforeSignature=(Element)issuerList.item(0);    } else {      elementBeforeSignature=elementToSign;    }    Element nextElementAfterIssuer=(Element)elementBeforeSignature.getNextSibling();    DOMSignContext domSignContext=new DOMSignContext(key,elementToSign);    domSignContext.setDefaultNamespacePrefix("ds");    domSignContext.setNextSibling(nextElementAfterIssuer);    javax.xml.crypto.dsig.XMLSignature signature=xmlSignatureFactory.newXMLSignature(signedInfo,keyInfo);    signature.sign(domSignContext);    return doc;  } catch (  InvalidAlgorithmParameterException e) {    e.printStackTrace();  }catch (  NoSuchAlgorithmException e1) {    e1.printStackTrace();  }  return null;}  }
class C{  public final Instances relation(int valIndex){  if (!isRelationValued()) {    return null;  } else {    return (Instances)((RelationalAttributeInfo)m_AttributeInfo).m_Values.get(valIndex);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void init(RemoteAuthenticatedUser user,ModeledConnectionGroup balancingGroup,ModeledConnection connection,ModeledSharingProfile sharingProfile){  this.user=user;  this.balancingGroup=balancingGroup;  this.connection=connection;  this.sharingProfile=sharingProfile;}  }
class C{  private boolean shutdownInProgress(){  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache == null || cache.isClosed()) {    return true;  }  String reason=cqProxy.getPool().getCancelCriterion().cancelInProgress();  if (reason != null) {    return true;  }  return false;}  }
class C{  public void validateCustomDdl(Integer customDdlId,String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedCustomDdlName,String expectedDdl,CustomDdl actualCustomDdl){  assertNotNull(actualCustomDdl);  if (customDdlId != null) {    assertEquals(customDdlId,Integer.valueOf(actualCustomDdl.getId()));  }  assertEquals(new CustomDdlKey(expectedNamespace,expectedBusinessObjectDefinitionName,expectedBusinessObjectFormatUsage,expectedBusinessObjectFormatFileType,expectedBusinessObjectFormatVersion,expectedCustomDdlName),actualCustomDdl.getCustomDdlKey());  assertEquals(expectedDdl,actualCustomDdl.getDdl());}  }
class C{  public DaemonClient(URL url,String username,String password,String charset){  this.url=url;  this.username=username;  this.password=password;  this.charset=charset;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  private String readAttributeName(boolean returnLowerCase){  skipWhitespace();  int c=find(ATTRIBUTE_NAME_TERMINATORS);  String forSubstring=returnLowerCase ? inputLowerCase : input;  String result=pos < c ? forSubstring.substring(pos,c) : null;  pos=c;  return result;}  }
class C{  public Table createTable(CreateTableData data){synchronized (database) {    data.schema=this;    throw DbException.getUnsupportedException("Create table unsupported");  }}  }
class C{  private static FunctionBlock findBlock(final Callgraph callgraph,final Function function){  for (  final FunctionBlock callgraphNode : callgraph) {    if (function == callgraphNode.getFunction()) {      return callgraphNode;    }  }  throw new IllegalStateException("Error: Call graph node of unknown function");}  }
class C{  public boolean isSkipped(){  return this.skipped;}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  this.checkWidget();  this.selectionListeners.remove(listener);}  }
class C{  public Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    final int length=this.length();    Iterator<String> keys=this.keySet().iterator();    writer.write('{');    if (length == 1) {      Object key=keys.next();      writer.write(quote(key.toString()));      writer.write(':');      if (indentFactor > 0) {        writer.write(' ');      }      writeValue(writer,this.map.get(key),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      while (keys.hasNext()) {        Object key=keys.next();        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        indent(writer,newindent);        writer.write(quote(key.toString()));        writer.write(':');        if (indentFactor > 0) {          writer.write(' ');        }        writeValue(writer,this.map.get(key),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      indent(writer,indent);    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  public boolean isGrabsPointerEvents(){  return grabsPointerEvents;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap bitmap=Bitmap.createBitmap(width,height,drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,width,height);  drawable.draw(canvas);  return bitmap;}  }
class C{  public static boolean compare(final Boolean me,final Boolean you){  if (me == you) {    return true;  }  if (me == null) {    return false;  }  return me.equals(you);}  }
class C{  public static boolean isTypeOf(Class<?> lookupClass,Class<?> targetClass){  if (targetClass == null || lookupClass == null) {    return false;  }  return targetClass.isAssignableFrom(lookupClass);}  }
class C{  protected void completeUIInstall(){  this.setShowsRootHandles(tree.getShowsRootHandles());  updateRenderer();  updateDepthOffset();  setSelectionModel(tree.getSelectionModel());  treeState=createLayoutCache();  configureLayoutCache();  updateSize();}  }
class C{  public void removeInfoDisplayListener(InfoDisplayListener aInfoDisplayListener){  IDListeners.remove(aInfoDisplayListener);}  }
class C{  public WrapperQueryBuilder(String source){  this.source=source.getBytes(Charsets.UTF_8);  this.offset=0;  this.length=this.source.length;}  }
class C{  protected WorkingSetImpl(final String id,final WorkingSetManager manager){  this.id=checkNotNull(id,"id");  this.manager=checkNotNull(manager,"manager");}  }
class C{  @Override public void cleanupPointers(){  updateCallerRegisterLocations();  maps.cleanupPointers();  maps=null;  if (mapId < 0) {    ReferenceMaps.jsrLock.unlock();  }  bridgeTarget=null;  bridgeParameterTypes=null;}  }
class C{  public AugmentedDickeyFuller(double[] ts){  this.ts=ts;  this.lag=(int)Math.floor(Math.cbrt((ts.length - 1)));  computeADFStatistics();}  }
class C{  void trace(){  glUseProgram(computeProgram);  invProjMatrix.transformProject(tmpVector.set(-1,-1,0));  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invProjMatrix.transformProject(tmpVector.set(-1,1,0));  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invProjMatrix.transformProject(tmpVector.set(1,-1,0));  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invProjMatrix.transformProject(tmpVector.set(1,1,0));  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,ssbo);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_WRITE_ONLY,GL_RGBA8);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_WRITE_ONLY,GL_RGBA8);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,0);  glUseProgram(0);}  }
class C{  public void disconnectAll(){  cancelConnecting();  ArrayList<OneSheeldDevice> tempConnectedDevices;synchronized (connectedDevicesLock) {    tempConnectedDevices=new ArrayList<>(connectedDevices.values());  }  if (tempConnectedDevices.size() > 0)   Log.i("Manager: Disconnect all connected devices."); else   Log.i("Manager: There are no connected devices to disconnect.");  for (  OneSheeldDevice device : tempConnectedDevices) {    disconnect(device);  }}  }
class C{  public int addLog(final EvolutionState state,final String owner){  File file=openFile(state,basefilename + owner.substring(owner.lastIndexOf(".")) + ".stat");  try {    int log=state.output.addLog(file,Output.V_NO_GENERAL - 1,false,!state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false),state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false));    logtable.put(owner,new Integer(log));    return log;  } catch (  IOException i) {    state.output.fatal("An IOException occurred while trying to create the log " + file + ":\n"+ i);  }  return -4;}  }
class C{  public void write(char[] cbuf,int off,int len) throws IOException {  internalOut.write(cbuf,off,len);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.503 -0400",hash_original_method="541CE82552DC13E1CD2436EB1FCBF182",hash_generated_method="E8C3252656A91FE7B34D8999D9623613") public Cache(int pref_size,int size){  cache_size=size;  prefix_size=pref_size;  hashes=new long[cache_size];  hashes_idx=new long[cache_size];  encodings=new byte[cache_size][];  cache=new Object[cache_size];}  }
class C{  public static void simulateRPU(LogicCircuit lc,GateLibrary gate_library,Args options){  ArrayList<Gate> logic_and_output_gates=new ArrayList<Gate>();  logic_and_output_gates.addAll(lc.get_logic_gates());  logic_and_output_gates.addAll(lc.get_output_gates());  for (  Gate gate : logic_and_output_gates) {    gate.set_unvisited(true);  }  for (  Gate gate : logic_and_output_gates) {    Evaluate.simulateRPU(gate,gate_library,options);  }}  }
class C{  void rememberFactory(String host,RMISocketFactory factory){synchronized (successTable) {    while (hostList.size() >= MaxRememberedHosts) {      successTable.remove(hostList.elementAt(0));      hostList.removeElementAt(0);    }    hostList.addElement(host);    successTable.put(host,factory);  }}  }
class C{  public boolean isMapCert(){  return mapCert;}  }
class C{  public AdempiereService(PO processor,Class<?> serverClass){  super();  m_processor=processor;  m_serverClass=serverClass;}  }
class C{  public void test_getPrivateExponent() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger d=BigInteger.valueOf(2753);  RSAPrivateKey key=(RSAPrivateKey)gen.generatePrivate(new RSAPrivateKeySpec(n,d));  assertEquals("invalid private exponent",d,key.getPrivateExponent());}  }
class C{  public RegressionResult regress(Node target,List<Node> regressors){  TetradMatrix allCorrelations=correlations.getMatrix();  List<Node> variables=correlations.getVariables();  int yIndex=variables.indexOf(target);  int[] xIndices=new int[regressors.size()];  for (int i=0; i < regressors.size(); i++) {    xIndices[i]=variables.indexOf(regressors.get(i));    if (xIndices[i] == -1) {      throw new NullPointerException("Can't find variable " + regressors.get(i) + " in this list: "+ variables);    }  }  TetradMatrix rX=allCorrelations.getSelection(xIndices,xIndices);  TetradMatrix rY=allCorrelations.getSelection(xIndices,new int[]{yIndex});  TetradMatrix bStar=rX.inverse().times(rY);  TetradVector b=new TetradVector(bStar.rows() + 1);  for (int k=1; k < b.size(); k++) {    double sdY=sd.get(yIndex);    double sdK=sd.get(xIndices[k - 1]);    b.set(k,bStar.get(k - 1,0) * (sdY / sdK));  }  b.set(0,Double.NaN);  if (means != null) {    double b0=means.get(yIndex);    for (int i=0; i < xIndices.length; i++) {      b0-=b.get(i + 1) * means.get(xIndices[i]);    }    b.set(0,b0);  }  int[] allIndices=new int[1 + regressors.size()];  allIndices[0]=yIndex;  for (int i=1; i < allIndices.length; i++) {    allIndices[i]=variables.indexOf(regressors.get(i - 1));  }  TetradMatrix r=allCorrelations.getSelection(allIndices,allIndices);  TetradMatrix rInv=r.inverse();  int n=correlations.getSampleSize();  int k=regressors.size() + 1;  double vY=rInv.get(0,0);  double r2=1.0 - (1.0 / vY);  double tss=n * sd.get(yIndex) * sd.get(yIndex);  double rss=tss * (1.0 - r2);  double seY=Math.sqrt(rss / (double)(n - k));  TetradVector sqErr=new TetradVector(allIndices.length);  TetradVector t=new TetradVector(allIndices.length);  TetradVector p=new TetradVector(allIndices.length);  sqErr.set(0,Double.NaN);  t.set(0,Double.NaN);  p.set(0,Double.NaN);  TetradMatrix rxInv=rX.inverse();  for (int i=0; i < regressors.size(); i++) {    double _r2=1.0 - (1.0 / rxInv.get(i,i));    double _tss=n * sd.get(xIndices[i]) * sd.get(xIndices[i]);    double _se=seY / Math.sqrt(_tss * (1.0 - _r2));    double _t=b.get(i + 1) / _se;    double _p=2 * (1.0 - ProbUtils.tCdf(Math.abs(_t),n - k));    sqErr.set(i + 1,_se);    t.set(i + 1,_t);    p.set(i + 1,_p);  }  this.graph=createGraph(target,allIndices,regressors,p);  String[] vNames=createVarNamesArray(regressors);  double[] bArray=b.toArray();  double[] tArray=t.toArray();  double[] pArray=p.toArray();  double[] seArray=sqErr.toArray();  return new RegressionResult(false,vNames,n,bArray,tArray,pArray,seArray,r2,rss,alpha,null,null);}  }
class C{  public Boolean isChangeTrackingEnabled(){  return changeTrackingEnabled;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof ContextGetterDecl))   return false;  return name.equals(((Decl)obj).name) && getArgType().equals(((ContextGetterDecl)obj).getArgType());}  }
class C{  void checkAssignable(DiagnosticPosition pos,VarSymbol v,JCTree base,Env<AttrContext> env){  if ((v.flags() & FINAL) != 0 && ((v.flags() & HASINIT) != 0 || !((base == null || (base.hasTag(IDENT) && TreeInfo.name(base) == names._this)) && isAssignableAsBlankFinal(v,env)))) {    if (v.isResourceVariable()) {      log.error(pos,"try.resource.may.not.be.assigned",v);    } else {      log.error(pos,"cant.assign.val.to.final.var",v);    }  }}  }
class C{  public boolean isReference(){  return true;}  }
class C{  public MultipleSoloMapComponentException(Class c1,Class c2){  super("Class " + c1 + " conflicts with Class "+ c2);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_ENTITY_1__TRACE_ENTITY_1:    setTrace_entity_1(TRACE_ENTITY_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  boolean onHeartbeatStop(){  SocketPool clusterSocketPool;  if (isExternal()) {    clusterSocketPool=_clusterSocketPool.getAndSet(null);  } else {    clusterSocketPool=_clusterSocketPool.get();  }  if (clusterSocketPool != null) {    clusterSocketPool.getFactory().notifyHeartbeatStop();  }  log.fine("notify-heartbeat-stop " + this);  return true;}  }
class C{  private String createWorkflowStepsForBlockVolumeExport(Workflow workflow,StorageSystem vplexSystem,Map<URI,StorageSystem> storageSystemMap,Map<URI,Volume> volumeMap,URI projectURI,URI tenantURI,String dependantStepId) throws IOException, ControllerException {  String lastStep=dependantStepId;  lastStep=addRollbackStepToForgetVolumes(workflow,vplexSystem.getId(),new ArrayList<URI>(volumeMap.keySet()),lastStep);  URI vplexURI=vplexSystem.getId();  for (  Map.Entry<URI,StorageSystem> storageEntry : storageSystemMap.entrySet()) {    URI storageSystemURI=storageEntry.getKey();    StorageSystem storageSystem=storageEntry.getValue();    URI varray=getVolumesVarray(storageSystem,volumeMap.values());    _log.info(String.format("Creating ExportGroup for storage system %s (%s) in Virtual Aarray[(%s)]",storageSystem.getLabel(),storageSystemURI,varray));    if (varray == null) {      _log.warn(String.format("No Volumes for storage system %s (%s), no need to create an ExportGroup.",storageSystem.getLabel(),storageSystemURI));      continue;    }    VPlexBackendManager backendMgr=new VPlexBackendManager(_dbClient,this,_blockDeviceController,_blockScheduler,_networkDeviceController,projectURI,tenantURI,_vplexApiLockManager,coordinator);    Map<URI,List<StoragePort>> initiatorPortMap=backendMgr.getInitiatorPortsForArray(vplexURI,storageSystemURI,varray);    if (initiatorPortMap.isEmpty()) {      throw DeviceControllerException.exceptions.noNetworksConnectingVPlexToArray(vplexSystem.getNativeGuid(),storageSystem.getNativeGuid());    }    ExportMaskPlacementDescriptor descriptor=backendMgr.chooseBackendExportMask(vplexSystem,storageSystem,varray,volumeMap,lastStep);    for (    URI exportMaskURI : descriptor.getPlacedMasks()) {      ExportGroup exportGroup=descriptor.getExportGroupForMask(exportMaskURI);      ExportMask exportMask=descriptor.getExportMask(exportMaskURI);      Map<URI,Volume> placedVolumes=descriptor.getPlacedVolumes(exportMaskURI);      lastStep=backendMgr.addWorkflowStepsToAddBackendVolumes(workflow,lastStep,exportGroup,exportMask,placedVolumes,varray,vplexSystem,storageSystem);    }  }  return lastStep;}  }
class C{  private void init() throws OAuthException, ValidationException, ConfigurationLoadException {  logger.info("Initializing session and services");  try {    Credential oAuth2Credential=new OfflineCredentials.Builder().forApi(Api.ADWORDS).fromFile(configPath).build().generateCredential();    String userAgentFromConfig=getUserAgentFromConfig();    session=new AdWordsSession.Builder().fromFile(configPath).withUserAgent(PREFIX_USER_AGENT + userAgentFromConfig).withOAuth2Credential(oAuth2Credential).build();    services=new AdWordsServices();  } catch (  ValidationException e) {    if ("refreshToken".equalsIgnoreCase(e.getTrigger())) {      retrieveRefreshToken();    } else {      logger.error("General exception",e);    }    throw new OAuthException("Please add your refreshToken to your ads.properties file",e);  }}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/active") public SiteActive checkIsActive(){  log.info("Begin to check if site Active or Standby");  SiteActive isActiveSite=new SiteActive();  try {    Site localSite=drUtil.getLocalSite();    isActiveSite.setIsActive(localSite.getState() == SiteState.ACTIVE);    isActiveSite.setLocalSiteName(localSite.getName());    isActiveSite.setLocalUuid(localSite.getUuid());    isActiveSite.setIsMultiSite(drUtil.isMultisite());    return isActiveSite;  } catch (  Exception e) {    log.error("Can't get site is Active or Standby");    throw APIException.badRequests.siteIdNotFound();  }}  }
class C{  public void animateFling(float velocityX,float velocityY,int duration,long popTime,float flingVelocityMax){  long timeDifference=System.currentTimeMillis() - popTime;  if (context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {    float translationAmount=Math.max(velocityY / 8,flingVelocityMax);    ObjectAnimator animatorTranslateY=ObjectAnimator.ofFloat(peekView,"translationY",translationAmount);    animatorTranslateY.setInterpolator(new DecelerateInterpolator());    animatorTranslateY.setDuration(Math.max(0,duration - timeDifference));    animatorTranslateY.start();  } else   if (context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {    float translationAmount=Math.max(velocityX / 8,flingVelocityMax);    ObjectAnimator animatorTranslateX=ObjectAnimator.ofFloat(peekView,"translationX",translationAmount);    animatorTranslateX.setInterpolator(new DecelerateInterpolator());    animatorTranslateX.setDuration(Math.max(0,duration - timeDifference));    animatorTranslateX.start();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALLOPERATORS\"";  db.execSQL(sql);}  }
class C{  protected void drawZeroDomainBaseline(Graphics2D g2,Rectangle2D area){  if (isDomainZeroBaselineVisible()) {    XYItemRenderer r=getRenderer();    if (r instanceof AbstractXYItemRenderer) {      AbstractXYItemRenderer renderer=(AbstractXYItemRenderer)r;      renderer.drawDomainLine(g2,this,getDomainAxis(),area,0.0,this.domainZeroBaselinePaint,this.domainZeroBaselineStroke);    }  }}  }
class C{  public void reset(){  try {    close();    open();    lineno=-1;  } catch (  FileNotFoundException ex) {    error=true;    Logger.getLogger(LineReaderCtx.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  protected final void push(Element el,Namespaces ns,String qname){  if (DEBUG)   System.err.println("push(" + el + ")");  Node parent=getBottom().n;  openNodes.add(new OpenNode(el,ns,qname));  doAppend(el,parent);}  }
class C{  @Override public String toString(){  String result;  String[] authors;  int i;  Enumeration<TechnicalInformation> enm;  result="";  authors=getAuthors();  if (getType() == Type.BOOK) {    for (i=0; i < authors.length; i++) {      if (i > 0) {        result+=", ";      }      result+=authors[i];    }    if (exists(Field.YEAR)) {      result+=" (" + getValue(Field.YEAR) + ").";    } else {      result+=".";    }    result+=" " + getValue(Field.TITLE) + ".";    result+=" " + getValue(Field.PUBLISHER);    if (exists(Field.ADDRESS)) {      result+=", " + getValue(Field.ADDRESS);    }    result+=".";  } else   if (getType() == Type.ARTICLE) {    for (i=0; i < authors.length; i++) {      if (i > 0) {        result+=", ";      }      result+=authors[i];    }    if (exists(Field.YEAR)) {      result+=" (" + getValue(Field.YEAR) + ").";    } else {      result+=".";    }    result+=" " + getValue(Field.TITLE) + ".";    if (exists(Field.JOURNAL)) {      result+=" " + getValue(Field.JOURNAL) + ".";      if (exists(Field.VOLUME)) {        result+=" " + getValue(Field.VOLUME);      }      if (exists(Field.NUMBER)) {        result+="(" + getValue(Field.NUMBER) + ")";      }      if (exists(Field.PAGES)) {        result+=":" + getValue(Field.PAGES);      }      result+=".";    }    if (exists(Field.URL)) {      result+=" URL " + getValue(Field.URL) + ".";    }  } else   if ((getType() == Type.CONFERENCE) || (getType() == Type.INPROCEEDINGS)) {    for (i=0; i < authors.length; i++) {      if (i > 0) {        result+=", ";      }      result+=authors[i];    }    result+=": " + getValue(Field.TITLE) + ".";    result+=" In: " + getValue(Field.BOOKTITLE);    if (exists(Field.ADDRESS)) {      result+=", " + getValue(Field.ADDRESS);    }    if (exists(Field.PAGES)) {      result+=", " + getValue(Field.PAGES);    }    if (exists(Field.YEAR)) {      result+=", " + getValue(Field.YEAR) + ".";    } else {      result+=".";    }  } else   if (getType() == Type.INCOLLECTION) {    for (i=0; i < authors.length; i++) {      if (i > 0) {        result+=", ";      }      result+=authors[i];    }    result+=": " + getValue(Field.TITLE) + ".";    result+=" In ";    if (exists(Field.EDITOR)) {      result+=getValue(Field.EDITOR) + ", editors, ";    }    result+=getValue(Field.BOOKTITLE);    if (exists(Field.ADDRESS)) {      result+=", " + getValue(Field.ADDRESS);    }    if (exists(Field.PAGES)) {      result+=", " + getValue(Field.PAGES);    }    if (exists(Field.YEAR)) {      result+=", " + getValue(Field.YEAR) + ".";    } else {      result+=".";    }  } else {    for (i=0; i < authors.length; i++) {      if (i > 0) {        result+=", ";      }      result+=authors[i];    }    if (exists(Field.YEAR)) {      result+=" (" + getValue(Field.YEAR) + ").";    } else {      result+=".";    }    result+=" " + getValue(Field.TITLE) + ".";    if (exists(Field.ADDRESS)) {      result+=" " + getValue(Field.ADDRESS) + ".";    }    if (exists(Field.URL)) {      result+=" URL " + getValue(Field.URL) + ".";    }  }  enm=additional();  while (enm.hasMoreElements()) {    result+="\n\n" + enm.nextElement().toString();  }  return result;}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  private void startDownloadImageActivity(Uri url){  if (url != null) {    if (!mProcessButtonClick)     UiUtils.showToast(this,"Already downloading image " + url); else     if (!URLUtil.isValidUrl(url.toString()))     UiUtils.showToast(this,"Invalid URL " + url.toString()); else {      mProcessButtonClick=false;      final Intent intent=DownloadImageActivity.makeIntent(url);      startActivity(intent);    }  }}  }
class C{  public boolean markIPAddressAsUsed(String vcenter,String datacenter,String cluster,String vlan,String ipAddress){  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ "  vlan: "+ vlan+ "  ipAddress: "+ ipAddress);  String query2="SELECT IN_USE FROM IPPOOL WHERE VLAN_TKEY = (SELECT TKEY from VLAN WHERE NAME = ? AND CLUSTER_TKEY = ?) AND IP_ADDRESS = ?";  String query3="UPDATE IPPOOL SET IN_USE = TRUE WHERE IP_ADDRESS = ? AND VLAN_TKEY = (SELECT TKEY from VLAN WHERE NAME = ? AND CLUSTER_TKEY = ?)";  if (vcenter == null) {    logger.error("Failed to mark IP address as used. vCenter not defined.");    return false;  }  if (datacenter == null) {    logger.error("Failed to mark IP address as used. Datacenter not defined.");    return false;  }  if (cluster == null) {    logger.error("Failed to mark IP address as used. Cluster not defined.");    return false;  }  if (vlan == null) {    logger.error("Failed to mark IP address as used. VLAN not defined.");    return false;  }  if (ipAddress == null) {    logger.error("Failed to mark IP address as used. IP address not defined.");    return false;  }  boolean success=true;  try (Connection con=getDatasource().getConnection()){    int cluster_tkey=getClusterTKey(con,vcenter,datacenter,cluster);    if (cluster_tkey == -1) {      throw new SQLException("Unknown cluster " + cluster);    }    logger.debug("retrieved tkey " + cluster_tkey + " for cluster "+ cluster);    boolean inUse=false;    boolean foundIPAddress=false;    try (PreparedStatement stmt=con.prepareStatement(query2)){      stmt.setString(1,vlan);      stmt.setInt(2,cluster_tkey);      stmt.setString(3,ipAddress);      ResultSet rs=stmt.executeQuery();      while (rs.next()) {        inUse=rs.getBoolean("IN_USE");        foundIPAddress=true;      }    }     if (!foundIPAddress) {      throw new SQLException("IP address " + ipAddress + " is not registered.");    }    if (inUse) {      throw new SQLException("IP address " + ipAddress + " is already marked as used.");    }    try (PreparedStatement stmt=con.prepareStatement(query3)){      stmt.setString(1,ipAddress);      stmt.setString(2,vlan);      stmt.setInt(3,cluster_tkey);      stmt.executeUpdate();      logger.debug("IP address " + ipAddress + " has been marked as used.");    }   } catch (  Exception e) {    logger.error("Failed to mark IP address as used.",e);    success=false;  }  return success;}  }
class C{  public static String urlEncodeArgs(Map<String,? extends Object> args,boolean useExpandedEntites){  StringBuilder buf=new StringBuilder();  if (args != null) {    for (    Map.Entry<String,? extends Object> entry : args.entrySet()) {      String name=entry.getKey();      Object value=entry.getValue();      String valueStr=null;      if (name == null || value == null) {        continue;      }      Collection<?> col;      if (value instanceof String) {        col=Arrays.asList(value);      } else       if (value instanceof Collection) {        col=UtilGenerics.cast(value);      } else       if (value.getClass().isArray()) {        col=Arrays.asList((Object[])value);      } else {        col=Arrays.asList(value);      }      for (      Object colValue : col) {        if (colValue instanceof String) {          valueStr=(String)colValue;        } else         if (colValue == null) {          continue;        } else {          valueStr=colValue.toString();        }        if (UtilValidate.isNotEmpty(valueStr)) {          if (buf.length() > 0) {            if (useExpandedEntites) {              buf.append("&amp;");            } else {              buf.append("&");            }          }          buf.append(UtilCodec.getEncoder("url").encode(name));          buf.append('=');          buf.append(UtilCodec.getEncoder("url").encode(valueStr));        }      }    }  }  return buf.toString();}  }
class C{  public Map<Integer,TestTable1> selectToMap(){  List<TestTable1> list=SELECT().selectByExample(this);  Map<Integer,TestTable1> m=new LinkedHashMap<Integer,TestTable1>();  for (  TestTable1 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  public void dumpConOptions(){  Properties props=null;  if (comms != null) {    props=comms.getConOptions().getDebug();    log.fine(CLASS_NAME,"dumpConOptions",dumpProperties(props,clientID + " : Connect Options").toString());  }}  }
class C{  @Override public int hashCode(){  if (hashCodeCache == null) {    hashCodeCache=super.hashCode();  }  return hashCodeCache;}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  private void fakeResponse(final HttpMethod method) throws IOException, HttpException {  LOG.debug("CONNECT failed, fake the response for the original method");  if (method instanceof HttpMethodBase) {    ((HttpMethodBase)method).fakeResponse(this.connectMethod.getStatusLine(),this.connectMethod.getResponseHeaderGroup(),conn,this.connectMethod.getResponseBodyAsStream());    method.getProxyAuthState().setAuthScheme(this.connectMethod.getProxyAuthState().getAuthScheme());    this.connectMethod=null;  } else {    releaseConnection=true;    LOG.warn("Unable to fake response on method as it is not derived from HttpMethodBase.");  }}  }
class C{  public void addLayoutTurnout(int type){  double rot=0.0;  String s=rotationField.getText().trim();  if (s.length() < 1) {    rot=0.0;  } else {    try {      rot=Double.parseDouble(s);    } catch (    Exception e) {      JOptionPane.showMessageDialog(this,rb.getString("Error3") + " " + e,Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }  }  numLayoutTurnouts++;  String name="";  boolean duplicate=true;  while (duplicate) {    name="TO" + numLayoutTurnouts;    if (finder.findLayoutTurnoutByName(name) == null) {      duplicate=false;    }    if (duplicate) {      numLayoutTurnouts++;    }  }  LayoutTurnout o=new LayoutTurnout(name,type,currentPoint,rot,xScale,yScale,this);  turnoutList.add(o);  setDirty(true);  LayoutBlock b=provideLayoutBlock(blockIDField.getText().trim());  if (b != null) {    o.setLayoutBlock(b);    String sensorName=(blockSensor.getText().trim());    if (sensorName.length() > 0) {      if (!validateSensor(sensorName,b,this)) {        b.setOccupancySensorName("");      } else {        blockSensor.setText(b.getOccupancySensorName());      }    }  }  o.setContinuingSense(Turnout.CLOSED);  String turnoutName=nextTurnout.getText().trim();  if (validatePhysicalTurnout(turnoutName,this)) {    o.setTurnout(turnoutName);    if (o.getTurnout().getSystemName().equals(turnoutName.toUpperCase())) {      nextTurnout.setText(turnoutName.toUpperCase());    }  } else {    o.setTurnout("");    nextTurnout.setText("");  }}  }
class C{  public List<String> listTraits(final String guid) throws AtlasServiceException {  JSONObject jsonResponse=callAPI(API.LIST_TRAITS,null,guid,URI_TRAITS);  return extractResults(jsonResponse,AtlasClient.RESULTS,new ExtractOperation<String,String>());}  }
class C{  private int calculatePrice(boolean addWhippedCream,boolean addChocolate){  int basePrice=5;  if (addWhippedCream) {    basePrice=basePrice + 1;  }  if (addChocolate) {    basePrice=basePrice + 2;  }  return quantity * basePrice;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int s=size();  ConstPool cp=getConstPool();  String[] names=new String[s];  int[] flags=new int[s];  for (int i=0; i < s; i++) {    names[i]=cp.getUtf8Info(name(i));    flags[i]=accessFlags(i);  }  return new MethodParametersAttribute(newCp,names,flags);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isAffineSupported(){  return impl.isAffineSupported();}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){  InputMap map=getInputMap(condition,false);  ActionMap am=getActionMap(false);  if (map != null && am != null && isEnabled()) {    Object binding=map.get(ks);    Action action=(binding == null) ? null : am.get(binding);    if (action != null) {      return SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());    }  }  return false;}  }
class C{  public static long[] copy(long[] v){  return Arrays.copyOf(v,v.length);}  }
class C{  public static boolean verifyExtension(final String alias,final String path){  final ParametricFileType ft=getTypeFromAlias(alias);  final ParametricFileType ft2=getTypeFromFileName(path);  return ft.equals(ft2);}  }
class C{  public Builder clearRotation(){  rotationDegrees=0;  rotationPivotX=0;  rotationPivotY=0;  hasRotationPivot=false;  return this;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,String configFilePath) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,false,configFilePath);}  }
class C{  private X509Certificate decodeCertificate(byte[] certificateDer){  assert certificateDer != null;  ByteArrayInputStream stream=new ByteArrayInputStream(certificateDer);  CertificateFactory certFactory;  try {    certFactory=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new IllegalStateException("Internal error: X.509 Certificate " + "Factory is not available (uncompliant JRE?)",e);  }  X509Certificate certificate=null;  try {    certificate=(X509Certificate)certFactory.generateCertificate(stream);  } catch (  CertificateException e) {    throw new WSFaultException(FaultKey.WSSE_INVALID_SECURITY_TOKEN,e);  }  return certificate;}  }
class C{  public static ThreadPoolExecutor newCachedThreadPool(ThreadFactory threadFactory,int threadTimeoutMillis){  return newThreadPoolExecutor(0,Integer.MAX_VALUE,threadTimeoutMillis,TimeUnit.MILLISECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  private ScriptLoader(){}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public static void calculateAlignedPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans,boolean normal){  float totalAlignment=normal ? total.alignment : 1.0f - total.alignment;  int totalAscent=(int)(allocated * totalAlignment);  int totalDescent=allocated - totalAscent;  for (int i=0; i < children.length; i++) {    SizeRequirements req=children[i];    float alignment=normal ? req.alignment : 1.0f - req.alignment;    int maxAscent=(int)(req.maximum * alignment);    int maxDescent=req.maximum - maxAscent;    int ascent=Math.min(totalAscent,maxAscent);    int descent=Math.min(totalDescent,maxDescent);    offsets[i]=totalAscent - ascent;    spans[i]=(int)Math.min((long)ascent + (long)descent,Integer.MAX_VALUE);  }}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.149 -0500",hash_original_method="53798D26DA92803B5299289F1912C9D0",hash_generated_method="FEA64DAEE719055E865CD3E5F5BD0AB2") public void traceInstructions(boolean enable){}  }
class C{  public void sendAsynchronous(XBeeRequest request) throws XBeeException {  try {    this.sendRequest(request);  } catch (  Exception e) {    throw new XBeeException(e);  }}  }
class C{  public static void init(Component component){  if (Registry.is("ide.mnemonic.helper.old") || Registry.is("ide.checkDuplicateMnemonics")) {    new MnemonicHelper().register(component);  } else {    LISTENER.addTo(component);  }}  }
class C{  @Override public void put(String name,int value){  emulatedFields.put(name,value);}  }
class C{  public void addItem(final String labelText,final JComponent item){  JLabel label=new JLabel(labelText);  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=0;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);  myNextItemRow++;}  }
class C{  public RuntimeExceptionConfig(Throwable e){  super(getMessage(e),e);}  }
class C{  public VolumeQuery(URL feedUrl){  super(feedUrl);}  }
class C{  protected String doIt() throws Exception {  log.info("C_PaySelection_ID=" + p_C_PaySelection_ID + ", PaymentRule="+ p_PaymentRule);  MPaySelection psel=new MPaySelection(getCtx(),p_C_PaySelection_ID,get_TrxName());  if (psel.get_ID() == 0)   throw new IllegalArgumentException("Not found C_PaySelection_ID=" + p_C_PaySelection_ID);  if (psel.isProcessed())   throw new IllegalArgumentException("@Processed@");  MPaySelectionLine[] lines=psel.getLines(false);  for (int i=0; i < lines.length; i++) {    MPaySelectionLine line=lines[i];    if (!line.isActive() || line.isProcessed())     continue;    createCheck(line);  }  psel.setProcessed(true);  psel.saveEx();  return "@C_PaySelectionCheck_ID@ - #" + m_list.size();}  }
class C{  public String peekErrorErrorMessage(){  return peekStringAtOffset(ERROR_MESSAGE_OFFSET);}  }
class C{  protected int index(int row,int column){  return rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  public SignificantTermsBuilder include(String[] terms){  if (includePattern != null) {    throw new IllegalArgumentException("include clause must be an array of exact values or a regex, not both");  }  this.includeTerms=terms;  return this;}  }
class C{  public static SortedSet unmodifiableSortedSet(SortedSet s){  return new UnmodifiableSortedSet(s);}  }
class C{  public static Intent goToGooglePlay(String id){  Intent intent=new Intent(android.content.Intent.ACTION_VIEW);  intent.setData(Uri.parse("https://play.google.com/store/apps/details?id=" + id));  return intent;}  }
class C{  public SearchAction(SearchInformation info){  this(info,I18n.tr("Search for: {0}"));}  }
class C{  public void markChanges(SerialReply l){  int begAddress=SerialTrafficController.instance().getSavedPollAddress();  int count=l.getNumDataElements() - 8;  for (int i=0; i < count; i++) {    if (sensorArray[i + begAddress - 1] == null) {      continue;    }    boolean value=((l.getElement(5 + i) & 0x01) != 0) ^ sensorArray[i + begAddress - 1].getInverted();    if (value) {      sensorORedSetting[i + begAddress - 1]=true;    }  }}  }
class C{  private static void doChildClosureVisit(SessionNode node,Set<SessionNode> closure){  if (!closure.contains(node)) {    closure.add(node);    Collection<SessionNode> children=node.getChildren();    for (    SessionNode child : children) {      doChildClosureVisit(child,closure);    }  }}  }
class C{  private static String methodName(@NonNls final String method){  return GitSSHHandler.HANDLER_NAME + "." + method;}  }
class C{  public FacetMember toFacet(DimensionIndex index,DimensionMember member){  if (member.getID() instanceof Intervalle) {    Intervalle interval=(Intervalle)member.getID();    return toFacet(interval);  } else {    FacetMemberString fm=new FacetMemberString(member.getKey(),index.getDisplayName(member).toString().trim());    if (index != null && !index.getAttributes().isEmpty() && member.getAttributes() != null) {      int i=0;      HashMap<String,String> attrs=new HashMap<String,String>();      for (      Attribute attr : index.getAttributes()) {        if (member.getAttributes()[i] != null) {          attrs.put(attr.getName(),member.getAttributes()[i].toString());        }        i++;      }      fm.setAttributes(attrs);    }    return fm;  }}  }
class C{  public static ResultSet query(Statement stmt,String sql) throws SQLException {  return stmt.executeQuery(sql);}  }
class C{  void clear(){  if (messagesTableModel != null) {    messagesTableModel.clear();    messagesTableModel=null;  }}  }
class C{  public void verifySession(final TwitterSession session){  final AccountService accountService=accountServiceProvider.getAccountService(session);  try {    scribeVerifySession();    accountService.verifyCredentials(true,false).execute();  } catch (  IOException|RuntimeException e) {  }}  }
class C{  protected void sequence_InterfaceImplementsList_Members_N4InterfaceDeclaration_TypeVariables(ISerializationContext context,N4InterfaceDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_DB'";  db.execSQL(sql);}  }
class C{  public DataFilterCriteria(){  filterClauses=new LinkedHashMap<DataFilterClause,DataFilterConjunction>();}  }
class C{  public Vector<Report> resolveAction(IGame game){  Vector<Report> reports=new Vector<Report>();  Report r;  if (!isPossible(game)) {    r=new Report(3445);    r.subject=getEntityId();    r.newlines=1;    reports.addElement(r);    return reports;  }  final Entity attacker=getEntity(game);  final Coords apos=attacker.getPosition();  final Targetable target=getTarget(game);  final Coords tpos=target.getPosition();  if (attacker.usedSearchlight()) {    r=new Report(3450);    r.subject=getEntityId();    r.add(attacker.getDisplayName());    r.newlines=1;    reports.addElement(r);    return reports;  }  attacker.setUsedSearchlight(true);  ArrayList<Coords> in=Coords.intervening(apos,tpos);  for (  Coords c : in) {    for (    Entity en : game.getEntitiesVector(c)) {      LosEffects los=LosEffects.calculateLos(game,getEntityId(),en);      if (los.canSee()) {        en.setIlluminated(true);        r=new Report(3455);        r.subject=getEntityId();        r.newlines=1;        r.add(en.getDisplayName());        r.add(attacker.getDisplayName());        reports.addElement(r);      }    }  }  return reports;}  }
class C{  public static void main(String[] args){  String filename=args[0];  String delimiter=args[1];  String source=args[2];  SymbolGraph sg=new SymbolGraph(filename,delimiter);  Graph G=sg.graph();  if (!sg.contains(source)) {    StdOut.println(source + " not in database.");    return;  }  int s=sg.indexOf(source);  BreadthFirstPaths bfs=new BreadthFirstPaths(G,s);  while (!StdIn.isEmpty()) {    String sink=StdIn.readLine();    if (sg.contains(sink)) {      int t=sg.indexOf(sink);      if (bfs.hasPathTo(t)) {        for (        int v : bfs.pathTo(t)) {          StdOut.println("   " + sg.nameOf(v));        }      } else {        StdOut.println("Not connected");      }    } else {      StdOut.println("   Not in database.");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.299 -0400",hash_original_method="2C1F233833FFEC69CE12E7A0069A8B49",hash_generated_method="00BD38C214AA3F43B6E5A11F05CCAD5E") public URLClassLoader(URL[] urls,ClassLoader parent){  this(urls,parent,null);}  }
class C{  public static boolean intersectsCircle(Geo p1,Geo p2,Geo center,double radius){  double d1=Geo.distance(p1,center);  if (d1 < radius)   return true;  double d2=Geo.distance(p2,center);  if (d2 < radius)   return true;  double dist=pointCircleDistance(p1,p2,center);  if (dist > radius)   return false;  Geo g=p1.cross(p2);  Geo f=center.cross(g);  Geo i=f.crossNormalize(g,g);  double d=Geo.distance(p1,p2);  if (center.distance(i) < radius) {    double d11=Geo.distance(p1,i);    double d12=Geo.distance(p2,i);    return (d11 <= d && d12 <= d && Math.abs(d11 + d12 - d) < 0.01f);  }  Geo i2=i.antipode(i);  if (center.distance(i2) < radius) {    double d21=Geo.distance(p1,i2);    double d22=Geo.distance(p2,i2);    return (d21 <= d && d22 <= d && Math.abs(d21 + d22 - d) < 0.01f);  }  return false;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final E remove(int index){  throw new UnsupportedOperationException();}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((RemoveFrequentValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public boolean isDisposed(){  Object oo=get_Value(COLUMNNAME_IsDisposed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    VolleyLog.d(TAG,"Memory cache cleared");  }}  }
class C{  public static boolean hasKitKat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  @SuppressWarnings("rawtypes") public List<Object> extractPropertyValues(Object data,List<String> filters,int cascade,Network network,Map<String,Vertex> processed){  List<Object> values=new ArrayList<Object>();  Set<Object> valuesSet=new HashSet<Object>();  if (data instanceof JSONObject) {    if (((JSONObject)data).get("values") == null) {      return values;    }    JSONArray array=((JSONObject)data).getJSONArray("values");    Object type=((JSONObject)data).get("valuetype");    for (Iterator iterator=array.iterator(); iterator.hasNext(); ) {      Object value=iterator.next();      if (value instanceof JSONObject) {        if (type.equals("compound")) {          value=processCompoundRelationship((JSONObject)value,cascade,network,processed);          if ((value != null) && !valuesSet.contains(value)) {            valuesSet.add(value);            values.add(value);          }        } else {          Object id=((JSONObject)value).get("id");          if (id instanceof String) {            String domain=extractDomain((String)id);            if (filters.contains(domain)) {              continue;            }            if ((cascade > 0) && domain.equals("m")) {              Vertex nested=processId((String)id,cascade - 1,false,"",network,processed);              if (!valuesSet.contains(nested)) {                valuesSet.add(nested);                values.add(nested);              }              continue;            }          }          Object text=((JSONObject)value).get("value");          if (text == null) {            text=((JSONObject)value).get("text");          }          if (text != null) {            if (!valuesSet.contains(text)) {              valuesSet.add(text);              values.add(text);            }          }        }      }    }  }  return values;}  }
class C{  default B removeIcons(){  this.meta().removeIcons();  return this.getBuilder();}  }
class C{  public PaymentDeregistrationException(){}  }
class C{  public void startADB() throws Exception {  String output=cmd.runCommand("adb start-server");  String[] lines=output.split("\n");  if (lines[0].contains("internal or external command")) {    System.out.println("Please set ANDROID_HOME in your system variables");  }}  }
class C{  public int length(){  return this.len;}  }
class C{  private void doSave(){  if (txt_PubCert.getDocument().getLength() < MIN_CERT_LENGTH) {    logger.error("Illegal state! There seems to be no certificate available.");    bt_save.setEnabled(false);  }  final JFileChooser fc=new JFileChooser(System.getProperty("user.home"));  fc.setFileSelectionMode(JFileChooser.FILES_ONLY);  fc.setMultiSelectionEnabled(false);  fc.setSelectedFile(new File(OWASP_ZAP_ROOT_CA_FILENAME));  if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {    final File f=fc.getSelectedFile();    if (logger.isInfoEnabled()) {      logger.info("Saving Root CA certificate to " + f);    }    try {      writePubCertificateToFile(f);    } catch (    final Exception e) {      logger.error("Error while writing certificate data to file " + f,e);    }  }}  }
class C{  public static double covariance(double[] x,double[] y,int delay){  double meanX=0, meanY=0;  for (int n=0; n < x.length - delay; n++) {    meanX+=x[n];    meanY+=y[n + delay];  }  meanX/=(double)(x.length - delay);  meanY/=(double)(x.length - delay);  double c=0;  for (int t=0; t < x.length - delay; t++) {    c+=(x[t] - meanX) * (y[t + delay] - meanY);  }  return c / (double)(x.length - delay - 1);}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new NPCOwnedChest(getNPC(ctx));}  }
class C{  public final byte[] array(){  byte[] a=_buf.array();  return a;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Atomic reference example started.");    final String refName=UUID.randomUUID().toString();    String val=UUID.randomUUID().toString();    IgniteAtomicReference<String> ref=ignite.atomicReference(refName,val,true);    System.out.println("Atomic reference initial value : " + ref.get() + '.');    IgniteRunnable c=new ReferenceClosure(refName);    ignite.compute().run(c);    String newVal=UUID.randomUUID().toString();    System.out.println("Try to change value of atomic reference with wrong expected value.");    ref.compareAndSet("WRONG EXPECTED VALUE",newVal);    ignite.compute().run(c);    System.out.println("Try to change value of atomic reference with correct expected value.");    ref.compareAndSet(val,newVal);    ignite.compute().run(c);  }   System.out.println();  System.out.println("Finished atomic reference example...");  System.out.println("Check all nodes for output (this node is also part of the cluster).");}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public Source createSource(){  SourceImpl source=new SourceImpl();  return source;}  }
class C{  public StoppableCountDownOrUpLatch(CancelCriterion stopper,int count){  Assert.assertTrue(stopper != null);  if (count < 0)   throw new IllegalArgumentException(LocalizedStrings.StoppableCountDownOrUpLatch_COUNT_0.toLocalizedString());  this.stopper=stopper;  this.count_=count;}  }
class C{  public boolean exclude(IgfsPath path) throws IgniteCheckedException {  assert path != null;  Collection<Pattern> excludePatterns0;  if (excludeRecompile.compareAndSet(true,false)) {    Collection<String> excludePaths0=excludePaths;    if (excludePaths0 != null) {      excludePatterns0=new HashSet<>(excludePaths0.size(),1.0f);      for (      String excludePath : excludePaths0) {        try {          excludePatterns0.add(Pattern.compile(excludePath));        } catch (        PatternSyntaxException ignore) {          throw new IgniteCheckedException("Invalid regex pattern: " + excludePath);        }      }      excludePatterns=excludePatterns0;    } else     excludePatterns0=excludePatterns=null;  } else   excludePatterns0=excludePatterns;  if (excludePatterns0 != null) {    String pathStr=path.toString();    for (    Pattern pattern : excludePatterns0) {      if (pattern.matcher(pathStr).matches())       return true;    }  }  return false;}  }
class C{  public boolean increment(int key){  return adjustValue(key,1);}  }
class C{  @Override public boolean contains(Object x){  List<A> l=this;  while (l.tail != null) {    if (x == null) {      if (l.head == null)       return true;    } else {      if (l.head.equals(x))       return true;    }    l=l.tail;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.073 -0500",hash_original_method="DDF05333033BF6873CD233D3316FD8A3",hash_generated_method="73AECAACAB3642727AC8C508F30B1597") public void status(int majorVersion,int minorVersion,int code,String reasonPhrase){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener: from: " + mUrl + " major: "+ majorVersion+ " minor: "+ minorVersion+ " code: "+ code+ " reason: "+ reasonPhrase);  }  HashMap status=new HashMap();  status.put("major",majorVersion);  status.put("minor",minorVersion);  status.put("code",code);  status.put("reason",reasonPhrase);  mDataBuilder.clear();  mMimeType="";  mEncoding="";  mTransferEncoding="";  sendMessageInternal(obtainMessage(MSG_STATUS,status));}  }
class C{  public static String dispDeleteDropHintScript(){  final String deleteTagDropStyle="document.getElementById('show-delete-drop-hint').innerHTML = '." + UI.getCurrent().getTheme() + " .show-delete-drop-hint { border: 1px dashed #26547a !important; }';";  return new StringBuilder().append(DELETE_DROP_CREATE_SCRIPT).append(deleteTagDropStyle).toString();}  }
class C{  public static Map<String,Object> updatePaymentApplicationDef(DispatchContext dctx,Map<String,Object> context){  if (!context.containsKey("useHighestAmount")) {    context.put("useHighestAmount","Y");  }  return updatePaymentApplication(dctx,context);}  }
class C{  public boolean isMcastEnabled(){  return this.mcastEnabled;}  }
class C{  protected static int checkAddressType(String address){  if (null == address) {    return PDU_UNKNOWN_ADDRESS_TYPE;  }  if (address.matches(REGEXP_IPV4_ADDRESS_TYPE)) {    return PDU_IPV4_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_PHONE_NUMBER_ADDRESS_TYPE)) {    return PDU_PHONE_NUMBER_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_EMAIL_ADDRESS_TYPE)) {    return PDU_EMAIL_ADDRESS_TYPE;  } else   if (address.matches(REGEXP_IPV6_ADDRESS_TYPE)) {    return PDU_IPV6_ADDRESS_TYPE;  } else {    return PDU_UNKNOWN_ADDRESS_TYPE;  }}  }
class C{  public boolean hasSize1(){  return size1 != null;}  }
class C{  public Polygon(Position.PositionList corners){  this();  if (corners == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.setOuterBoundary(corners.list);}  }
class C{  public static boolean typeMatches(Class<?> type,JavacNode node,JCTree typeNode){  String typeName=typeNode.toString();  TypeResolver resolver=new TypeResolver(node.getImportList());  return resolver.typeMatches(node,type.getName(),typeName);}  }
class C{  private void close(){  if (!_state.isClose()) {    System.out.println("Expected close at: " + _state);    ;    Thread.dumpStack();    throw new IllegalStateException(_state.toString());  }synchronized (this) {    _pollHandle.destroy();    try {      writeStream().close();    } catch (    Throwable e) {      log.log(Level.FINER,e.toString(),e);    }    try {      readStream().close();    } catch (    Throwable e) {      log.log(Level.FINER,e.toString(),e);    }    PortTcp port=port();    SocketBar socket=_socket;    if (port != null) {      port.closeSocket(socket);    }    try {      socket.close();    } catch (    Throwable e) {      log.log(Level.FINER,e.toString(),e);    }    try {      connProtocol().onClose();    } catch (    Throwable e) {      log.warning(e.toString());      if (log.isLoggable(Level.FINER)) {        log.log(Level.FINER,e.toString(),e);      }    }    if (log.isLoggable(Level.FINER)) {      if (port != null)       log.finer("closing connection " + dbgId() + ", total="+ port.getConnectionCount()); else       log.finer("closing connection " + id());    }    StateConnection oldState=_state;    _state=_state.toFree();    if (_state.isFree()) {      _port.freeConnection(this);    } else {      System.out.println("UNFREE: " + oldState + " "+ this);    }  }}  }
class C{  public void checkTrace(final StateVec trace){  stateTrace=trace;  for (int soln=0; soln < solutions.length; soln++) {    OrderOfSolution os=solutions[soln];    Vect initNodes=constructBEGraph(os);    initSccParams(os);    int numOfInits=initNodes.size();    for (int i=0; i < numOfInits; i++) {      initNode=(BEGraphNode)initNodes.elementAt(i);      if (initNode.getNumber() == 0) {        checkSccs(initNode);      }    }  }}  }
class C{  private static void s_uarkp(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  for (int i=rl, cix=rl * 2; i < ru; i++, cix+=2)   if (!a.isEmpty(i)) {    kbuff.set(0,0);    sum(a.values(i),a.pos(i),a.size(i),kbuff,kplus);    c[cix + 0]=kbuff._sum;    c[cix + 1]=kbuff._correction;  }}  }
class C{  public TagAttachObject(){  super();}  }
class C{  public T tabindex(String value){  return attr("tabindex",value);}  }
class C{  public String name(){  return name;}  }
class C{  private void warnIfNonManagedSchemaExists(){  if (!resourceName.equals(managedSchemaResourceName)) {    boolean exists=false;    SolrResourceLoader loader=config.getResourceLoader();    if (loader instanceof ZkSolrResourceLoader) {      ZkSolrResourceLoader zkLoader=(ZkSolrResourceLoader)loader;      String nonManagedSchemaPath=zkLoader.getCollectionZkPath() + "/" + resourceName;      try {        exists=zkLoader.getZkController().pathExists(nonManagedSchemaPath);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        log.warn("",e);      }catch (      KeeperException e) {        log.warn("Error checking for the existence of the non-managed schema " + resourceName,e);      }    } else {      InputStream nonManagedSchemaInputStream=null;      try {        nonManagedSchemaInputStream=loader.openSchema(resourceName);        if (null != nonManagedSchemaInputStream) {          exists=true;        }      } catch (      IOException e) {      } finally {        IOUtils.closeQuietly(nonManagedSchemaInputStream);      }    }    if (exists) {      log.warn("The schema has been upgraded to managed, but the non-managed schema " + resourceName + " is still loadable.  PLEASE REMOVE THIS FILE.");    }  }}  }
class C{  @Override protected void processTuple(T stitchedFileMetaData){  LOG.debug("stitchedFileMetaData: {}",stitchedFileMetaData);  enqueueForProcessing(stitchedFileMetaData);}  }
class C{  public UnionQuery(HGQuery<T> left,HGQuery<T> right){  this.left=left;  this.right=right;}  }
class C{  private JPanel createEntriesPanel(){  GridBagLayout layout=new GridBagLayout();  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  JPanel entriesPanel=new JPanel();  entriesPanel.setLayout(layout);  List<String> keys=new ArrayList<>(map.getAll().keySet());  Collections.sort(keys);  boolean alternatingRow=true;  for (  String key : keys) {    IOObject object=map.get(key);    if (object == null) {      continue;    }    Icon icon=RendererService.getIcon(object.getClass());    if (icon == null) {      icon=UNKNOWN_TYPE;    }    String type=RendererService.getName(object.getClass());    if (type == null) {      type=object.getClass().getSimpleName();    }    Action removeAction=new RemoveCacheEntryAction(map,key);    Action openAction=new OpenCacheEntryAction(map,key);    IOObjectCacheEntryPanel entry=new IOObjectCacheEntryPanel(icon,type,openAction,removeAction);    if (alternatingRow) {      entry.setDefaultBackground(Colors.WHITE);    }    alternatingRow=!alternatingRow;    entriesPanel.add(entry,gbc);    gbc.gridy+=1;  }  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  entriesPanel.add(Box.createVerticalGlue(),gbc);  return entriesPanel;}  }
class C{  public Query createQuery(String whereClause,String trxName){  return new Query(this.getCtx(),this,whereClause,trxName);}  }
class C{  @SuppressWarnings("static-access") private void resetOptionPreserveTableIDs(){  m_optionPreserveTableIDs.setSelected(s_parameters.isPreserveTableID());}  }
class C{  public JToolbarToggleButton(){  initialize();}  }
class C{  public void colorMode(int mode){  colorMode(mode,colorModeX,colorModeY,colorModeZ,colorModeA);}  }
class C{  public static long calculateOverdueTimestamp(){  return Instant.now().toEpochMilli() - getDurationForKey(TenantConfigurationKey.POLLING_TIME_INTERVAL).toMillis() - getDurationForKey(TenantConfigurationKey.POLLING_OVERDUE_TIME_INTERVAL).toMillis();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:07.239 -0500",hash_original_method="84F635671A3C26E6B4F1228C3E17A491",hash_generated_method="544C09CA031344D5713194550EB2CB9D") public LocalServerSocket(String name) throws IOException {  impl=new LocalSocketImpl();  impl.create(true);  localAddress=new LocalSocketAddress(name);  impl.bind(localAddress);  impl.listen(LISTEN_BACKLOG);}  }
class C{  public boolean isSameHash(ClassHash other){  return Arrays.equals(classHash,other.classHash);}  }
class C{  public String globalInfo(){  return "Sorts incoming instances in ascending or descending order " + "according to the values of user specified attributes. Instances " + "can be sorted according to multiple attributes (defined in order). "+ "Handles data sets larger than can be fit into main memory via "+ "instance connections and specifying the in-memory buffer size. Implements "+ "a merge-sort by writing the sorted in-memory buffer to a file when full "+ "and then interleaving instances from the disk based file(s) when the "+ "incoming stream has finished.";}  }
class C{  void methodCall(PurityGraph g,Local right,List args,Local left){  MultiMap mu=new HashMultiMap();  Iterator it=args.iterator();  int nb=0;  while (it.hasNext()) {    Value arg=(Value)it.next();    if (arg instanceof Local && ((Local)arg).getType() instanceof RefLikeType) {      mu.putAll(cacheNode(new PurityParamNode(nb)),locals.get(arg));    }    nb++;  }  if (right != null)   mu.putAll(PurityThisNode.node,locals.get(right));  boolean hasChanged=true;  while (hasChanged) {    hasChanged=false;    it=(new LinkedList(mu.keySet())).iterator();    while (it.hasNext()) {      PurityNode n1=(PurityNode)it.next();      Iterator it3=(new LinkedList(mu.get(n1))).iterator();      while (it3.hasNext()) {        PurityNode n3=(PurityNode)it3.next();        Iterator it12=g.edges.get(n1).iterator();        while (it12.hasNext()) {          PurityEdge e12=(PurityEdge)it12.next();          if (!e12.isInside()) {            Iterator it34=edges.get(n3).iterator();            while (it34.hasNext()) {              PurityEdge e34=(PurityEdge)it34.next();              if (e34.isInside() && e12.getField().equals(e34.getField()))               if (mu.put(e12.getTarget(),e34.getTarget()))               hasChanged=true;            }          }        }      }    }    it=g.edges.keySet().iterator();    while (it.hasNext()) {      PurityNode n1=(PurityNode)it.next();      Iterator it3=g.edges.keySet().iterator();      while (it3.hasNext()) {        PurityNode n3=(PurityNode)it3.next();        Set mu1=new HashSet(mu.get(n1));        Set mu3=new HashSet(mu.get(n3));        boolean cond=n1.equals(n3) || mu1.contains(n3) || mu3.contains(n1);        Iterator itt=mu1.iterator();        while (!cond && itt.hasNext()) {          cond=cond || mu3.contains(itt.next());        }        if (cond && (!n1.equals(n3) || n1.isLoad())) {          Iterator it12=g.edges.get(n1).iterator();          while (it12.hasNext()) {            PurityEdge e12=(PurityEdge)it12.next();            if (!e12.isInside()) {              Iterator it34=g.edges.get(n3).iterator();              while (it34.hasNext()) {                PurityEdge e34=(PurityEdge)it34.next();                if (e34.isInside()) {                  if (e12.getField().equals(e34.getField())) {                    PurityNode n2=e12.getTarget();                    PurityNode n4=e34.getTarget();                    if (!n4.isParam() && mu.put(n2,n4))                     hasChanged=true;                    if (mu.putAll(n2,mu.get(n4)))                     hasChanged=true;                  }                }              }            }          }        }      }    }  }  it=g.nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isParam()) {      mu.put(n,n);      nodes.add(n);    }  }  it=g.edges.keySet().iterator();  while (it.hasNext()) {    PurityNode n1=(PurityNode)it.next();    Iterator it12=g.edges.get(n1).iterator();    while (it12.hasNext()) {      PurityEdge e12=(PurityEdge)it12.next();      String f=e12.getField();      PurityNode n2=e12.getTarget();      Iterator itm1=mu.get(n1).iterator();      while (itm1.hasNext()) {        PurityNode mu1=(PurityNode)itm1.next();        if (e12.isInside()) {          Iterator itm2=mu.get(n2).iterator();          while (itm2.hasNext()) {            PurityNode mu2=(PurityNode)itm2.next();            PurityEdge edge=cacheEdge(new PurityEdge(mu1,f,mu2,true));            edges.put(mu1,edge);            backEdges.put(mu2,edge);          }        } else {          PurityEdge edge=cacheEdge(new PurityEdge(mu1,f,n2,false));          edges.put(mu1,edge);          backEdges.put(n2,edge);        }      }    }  }  if (left != null) {    localsRemove(left);    it=g.ret.iterator();    while (it.hasNext())     localsPutAll(left,mu.get(it.next()));  }  it=g.globEscape.iterator();  while (it.hasNext())   globEscape.addAll(mu.get(it.next()));  if (doCheck)   sanityCheck();  Set<PurityNode> escaping=getEscaping();  it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!escaping.contains(n))     if (n.isLoad())     removeNode(n); else {      Iterator itt=(new LinkedList(edges.get(n))).iterator();      while (itt.hasNext()) {        PurityEdge e=(PurityEdge)itt.next();        if (!e.isInside()) {          edges.remove(n,e);          backEdges.remove(e.getTarget(),e);        }      }    }  }  it=g.mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=mu.get(n).iterator();    while (itt.hasNext()) {      PurityNode nn=(PurityNode)itt.next();      if (nodes.contains(nn) && !nn.isInside()) {        Iterator ittt=g.mutated.get(n).iterator();        while (ittt.hasNext()) {          String f=(String)ittt.next();          mutated.put(nn,f);        }      }    }  }  if (doCheck)   sanityCheck();}  }
class C{  public void processSubToken(String subtok){}  }
class C{  public Format(String s){  width=0;  precision=-1;  pre="";  post="";  leadingZeroes=false;  showPlus=false;  alternate=false;  showSpace=false;  leftAlign=false;  fmt=' ';  int state=0;  int length=s.length();  int parseState=0;  int i=0;  while (parseState == 0) {    if (i >= length)     parseState=5; else     if (s.charAt(i) == '%') {      if (i < length - 1) {        if (s.charAt(i + 1) == '%') {          pre=pre + '%';          i++;        } else         parseState=1;      } else       throw new java.lang.IllegalArgumentException();    } else     pre=pre + s.charAt(i);    i++;  }  while (parseState == 1) {    if (i >= length)     parseState=5; else     if (s.charAt(i) == ' ')     showSpace=true; else     if (s.charAt(i) == '-')     leftAlign=true; else     if (s.charAt(i) == '+')     showPlus=true; else     if (s.charAt(i) == '0')     leadingZeroes=true; else     if (s.charAt(i) == '#')     alternate=true; else {      parseState=2;      i--;    }    i++;  }  while (parseState == 2) {    if (i >= length)     parseState=5; else     if ('0' <= s.charAt(i) && s.charAt(i) <= '9') {      width=width * 10 + s.charAt(i) - '0';      i++;    } else     if (s.charAt(i) == '.') {      parseState=3;      precision=0;      i++;    } else     parseState=4;  }  while (parseState == 3) {    if (i >= length)     parseState=5; else     if ('0' <= s.charAt(i) && s.charAt(i) <= '9') {      precision=precision * 10 + s.charAt(i) - '0';      i++;    } else     parseState=4;  }  if (parseState == 4) {    if (i >= length)     parseState=5; else     fmt=s.charAt(i);    i++;  }  if (i < length)   post=s.substring(i,length);}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  private static String formatAddress(InterfaceAddress interfaceAddress) throws IOException {  StringBuilder sb=new StringBuilder();  InetAddress address=interfaceAddress.getAddress();  if (address instanceof Inet6Address) {    sb.append("inet6 ");    sb.append(NetworkAddress.formatAddress(address));    sb.append(" prefixlen:");    sb.append(interfaceAddress.getNetworkPrefixLength());  } else {    sb.append("inet ");    sb.append(NetworkAddress.formatAddress(address));    int netmask=0xFFFFFFFF << (32 - interfaceAddress.getNetworkPrefixLength());    sb.append(" netmask:" + NetworkAddress.formatAddress(InetAddress.getByAddress(new byte[]{(byte)(netmask >>> 24),(byte)(netmask >>> 16 & 0xFF),(byte)(netmask >>> 8 & 0xFF),(byte)(netmask & 0xFF)})));    InetAddress broadcast=interfaceAddress.getBroadcast();    if (broadcast != null) {      sb.append(" broadcast:" + NetworkAddress.formatAddress(broadcast));    }  }  if (address.isLoopbackAddress()) {    sb.append(" scope:host");  } else   if (address.isLinkLocalAddress()) {    sb.append(" scope:link");  } else   if (address.isSiteLocalAddress()) {    sb.append(" scope:site");  }  return sb.toString();}  }
class C{  private void applyCubePruning(int i,int j,PriorityQueue<CubePruneState> candidates){  HashSet<CubePruneState> visitedStates=new HashSet<>();  int popLimit=config.pop_limit;  int popCount=0;  while (candidates.size() > 0 && ((++popCount <= popLimit) || popLimit == 0)) {    CubePruneState state=candidates.poll();    DotNode dotNode=state.getDotNode();    List<Rule> rules=state.rules;    SourcePath sourcePath=dotNode.getSourcePath();    List<SuperNode> superNodes=dotNode.getAntSuperNodes();    if (stateConstraint == null || stateConstraint.isLegal(state.getDPStates())) {      getCell(i,j).addHyperEdgeInCell(state.computeNodeResult,state.getRule(),i,j,state.antNodes,sourcePath,true);    }    for (int k=0; k < state.ranks.length; k++) {      int[] nextRanks=new int[state.ranks.length];      System.arraycopy(state.ranks,0,nextRanks,0,state.ranks.length);      nextRanks[k]++;      if (k == 0 && (nextRanks[k] > rules.size() || (config.num_translation_options > 0 && nextRanks[k] > config.num_translation_options)))       continue; else       if ((k != 0 && nextRanks[k] > superNodes.get(k - 1).nodes.size()))       continue;      Rule nextRule=rules.get(nextRanks[0] - 1);      List<HGNode> nextAntNodes=new ArrayList<>(state.antNodes.size());      for (int x=0; x < state.ranks.length - 1; x++)       nextAntNodes.add(superNodes.get(x).nodes.get(nextRanks[x + 1] - 1));      CubePruneState nextState=new CubePruneState(new ComputeNodeResult(featureFunctions,nextRule,nextAntNodes,i,j,sourcePath,this.sentence),nextRanks,rules,nextAntNodes,dotNode);      if (visitedStates.contains(nextState))       continue;      visitedStates.add(nextState);      candidates.add(nextState);    }  }}  }
class C{  public static long toLong(byte[] bytes,int index){  return ((((long)bytes[index + 7]) << 56) | (((long)bytes[index + 6] & 0xff) << 48) | (((long)bytes[index + 5] & 0xff) << 40)| (((long)bytes[index + 4] & 0xff) << 32)| (((long)bytes[index + 3] & 0xff) << 24)| (((long)bytes[index + 2] & 0xff) << 16)| (((long)bytes[index + 1] & 0xff) << 8)| (((long)bytes[index] & 0xff)));}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters("DES");}  }
class C{  public BitSequence(){  bits=new BitSet();  numBits=0;  firstBitNum=0;  lastBitNum=0;}  }
class C{  private void doCreate() throws SearchException, PageException {  required("collection",action,"collection",collection);  required("collection",action,"path",path);  getSearchEngine().createCollection(collection,path,language,SearchEngine.DENY_OVERWRITE);}  }
class C{  public NotificationRoomManager(NotificationRoomHandler notificationRoomHandler,KurentoClientProvider kcProvider){  super();  this.notificationRoomHandler=notificationRoomHandler;  this.internalManager=new RoomManager(notificationRoomHandler,kcProvider);}  }
class C{  public static Vec2i spitballRoom(Random rand,VectorField<DungeonTile> dungeon,int x,int y,int minSize,int maxSize,final DungeonTile material){  int sizeDelta=maxSize - minSize;  int x1=x;  int y1=y;  int x2=x;  int y2=y;  int len=rand.nextInt(sizeDelta) + minSize;  int breadth=len - (len / 4);  if (breadth < minSize)   breadth=minSize;  if (rand.nextBoolean()) {    int tmp=len;    len=breadth;    breadth=tmp;  }  int halfBreadth=breadth / 2;  int dir=rand.nextInt(4);switch (dir) {case 0:    x2=x1 + len;  y1-=halfBreadth;y2+=halfBreadth;break;case 1:y2=y1 + len;x1-=halfBreadth;x2+=halfBreadth;break;case 2:x2=x1 - len;y1-=halfBreadth;y2+=halfBreadth;break;default :case 3:y2=y1 - len;x1-=halfBreadth;x2+=halfBreadth;break;}if (!dungeon.isInBounds(x1,y1) || !dungeon.isInBounds(x2,y2)) {return null;}int width=Math.abs(x2 - x1) + 1;int height=Math.abs(y2 - y1) + 1;final MutableCollisionResult collision=new MutableCollisionResult();dungeon.visitRect(x1,y1,width,height,null);if (collision.result) {return null;}dungeon.visitRect(x1,y1,width,height,null);Vec2i result=new Vec2i(x,y);int dir2=rand.nextInt(3);if (dir2 >= dir) dir2++;switch (dir2) {case 0:result.x=x1;result.y=y1 + (height / 2) + 1;break;case 1:result.y=y1;result.x=x1 + (width / 2) + 1;break;case 2:result.x=x2;result.y=y1 + (height / 2) + 1;break;default :case 3:result.y=y2;result.x=x1 + (width / 2) + 1;break;}return result;}  }
class C{  public int curCP(){  if (pendingJumps != null) {    resolvePending();  }  if (pendingStatPos != Position.NOPOS) {    markStatBegin();  }  fixedPc=true;  return cp;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  private HashtableReport(LinkedList<String>[] bins,int tableSize,int elements,float loadFactor,int threshold){  this.bins=bins;  this.tableSize=tableSize;  this.elements=elements;  this.loadFactor=loadFactor;  this.threshold=threshold;  StringBuilder str=new StringBuilder();  int empty=0;  for (int i=0; i < bins.length; i++) {    LinkedList<String> list=bins[i];    if (list == null) {      str.append(i).append(",");      empty++;    } else {    }  }  emptyBins=str.toString();  numEmpty=empty;}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof URLPermission)) {    return false;  }  URLPermission that=(URLPermission)p;  if (!this.methods.get(0).equals("*") && Collections.indexOfSubList(this.methods,that.methods) == -1) {    return false;  }  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {    return false;  }  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals("*") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {    return false;  }  if (!this.scheme.equals(that.scheme)) {    return false;  }  if (this.ssp.equals("*")) {    return true;  }  if (!this.authority.implies(that.authority)) {    return false;  }  if (this.path == null) {    return that.path == null;  }  if (that.path == null) {    return false;  }  if (this.path.endsWith("/-")) {    String thisprefix=this.path.substring(0,this.path.length() - 1);    return that.path.startsWith(thisprefix);  }  if (this.path.endsWith("/*")) {    String thisprefix=this.path.substring(0,this.path.length() - 1);    if (!that.path.startsWith(thisprefix)) {      return false;    }    String thatsuffix=that.path.substring(thisprefix.length());    if (thatsuffix.indexOf('/') != -1) {      return false;    }    if (thatsuffix.equals("-")) {      return false;    }    return true;  }  return this.path.equals(that.path);}  }
class C{  public DelimitedTextTableReader(String delimiterRegex,ParserFactory pf){  super(pf);  m_delim=delimiterRegex;}  }
class C{  private void sortListLocked(){  Collections.sort(mAlbums,mComparator);}  }
class C{  public static void clearUpdatePromptVersion(){  if (ensureInitialized()) {    FreshAirLog.v("Clearing update prompt version history");    preferences.clearLastUpdatePromptVersion();  }}  }
class C{  protected boolean isReverseSoftButtons(){  LookAndFeel lf=parent.getUIManager().getLookAndFeel();  if (isRTL()) {    return !lf.isReverseSoftButtons();  }  return lf.isReverseSoftButtons();}  }
class C{  public RasterImageNode(){}  }
class C{  public static void tick(){  Iterator<AsyncCubeIOProvider> cubeItr=cubeTasks.values().iterator();  while (cubeItr.hasNext()) {    AsyncCubeIOProvider task=cubeItr.next();    if (task.isFinished()) {      task.runSynchronousPart();      cubeItr.remove();    }  }  Iterator<AsyncColumnIOProvider> columnIter=columnTasks.values().iterator();  while (columnIter.hasNext()) {    AsyncColumnIOProvider task=columnIter.next();    if (task.isFinished()) {      task.runSynchronousPart();      columnIter.remove();    }  }}  }
class C{  public static boolean nonemptyQueryResult(ResultSet R){  logger.trace("nonemptyQueryResult(R)");  boolean nonEmpty=false;  if (R == null) {    return false;  }  try {    if (R.getRow() != 0) {      nonEmpty=true;    } else {      logger.trace("nonemptyQueryResult(R) - check R.first()...");      nonEmpty=R.first();      R.beforeFirst();    }  } catch (  Throwable t) {    surfaceThrowable("nonemptyQueryResult()",t);  }  return nonEmpty;}  }
class C{  public void logInfo(Object message){  logInternal(INFO,message,null);}  }
class C{  public Path createExtraClasspath(){  if (getExtraClasspath() == null) {    this.extraClasspath=new Path(getProject());  }  return this.extraClasspath.createPath();}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl){  this(in,defl,512);}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    return false;  } else {    if (subject.isReadOnly()) {      cleanState();      throw new LoginException("Subject is read-only");    }    Set<Principal> principals=subject.getPrincipals();    if (!principals.contains(ldapPrincipal)) {      principals.add(ldapPrincipal);    }    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "added LdapPrincipal \"" + ldapPrincipal + "\" to Subject");    }    if (!principals.contains(userPrincipal)) {      principals.add(userPrincipal);    }    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "added UserPrincipal \"" + userPrincipal + "\" to Subject");    }    if (authzPrincipal != null && (!principals.contains(authzPrincipal))) {      principals.add(authzPrincipal);      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "added UserPrincipal \"" + authzPrincipal + "\" to Subject");      }    }  }  cleanState();  commitSucceeded=true;  return true;}  }
class C{  public void Save(){  try {    XMLOutputter out=new XMLOutputter();    java.io.FileWriter writer=new java.io.FileWriter(this.xmlFile);    out.output(this.xmlDocument,writer);    writer.flush();    writer.close();  } catch (  Exception ex) {    LOG.error("Error in handler: " + ex.getMessage(),ex);  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(LengthConstraintType.NONE)) {    return LengthConstraintType.NONE;  } else   if (this.equals(LengthConstraintType.RANGE)) {    return LengthConstraintType.RANGE;  } else   if (this.equals(LengthConstraintType.FIXED)) {    return LengthConstraintType.FIXED;  }  return null;}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  public void subtract(FeatureVector other){  for (int i=0; i < denseFeatures.size(); i++)   denseFeatures.set(i,getDense(i) - other.getDense(i));  for (  String key : other.keySet()) {    float oldValue=(sparseFeatures.containsKey(key)) ? sparseFeatures.get(key) : 0.0f;    sparseFeatures.put(key,oldValue - other.getSparse(key));  }}  }
class C{  public static String decodeEmail(String userEmail){  return userEmail.replace(",",".");}  }
class C{  public static void runScript(final File file,final List<Pair<String,Object>> bindings) throws ScriptException, IOException {  final ScriptEngine engine=manager.getEngineByExtension(FileUtils.getFileExtension(file));  Preconditions.checkNotNull(engine,"Error: Script %s has an unknown extension.",file.getAbsolutePath());  final String script=FileUtils.readTextfile(file);  runScript(engine,script,bindings);}  }
class C{  @Override public String toString(){  return "Version{" + _version + "}"+ " Connected{"+ isConnected()+ "}"+ " Server{"+ _server+ "}"+ " Port{"+ _port+ "}"+ " Password{"+ _password+ "}";}  }
class C{  public void requestVoiceVerificationCode() throws IOException {  this.pushServiceSocket.createAccount(true);}  }
class C{  public Expression locationPathPattern(int opPos) throws TransformerException {  opPos=getFirstChildPos(opPos);  return stepPattern(opPos,0,null);}  }
class C{  public LabeledStmt(){}  }
class C{  private void addSignatureChecksumToData(CompilationUnit unit){  Long signatureChecksum=unit.getSignatureChecksum();  if (signatureChecksum == null) {    SwcScript script=(SwcScript)unit.getSource().getOwner();    signatureChecksum=new Long(script.getLastModified());  }  if (swcDefSignatureChecksums != null) {    for (Iterator<QName> iter=unit.topLevelDefinitions.iterator(); iter.hasNext(); ) {      QName qname=iter.next();      swcDefSignatureChecksums.put(qname,signatureChecksum);    }  }}  }
class C{  public boolean isRemoteMoviePaused() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_PAUSED;}  }
class C{  public final void compute(Vertex<CfLongId,FloatMatrixWritable,FloatWritable> vertex,final Iterable<FloatMatrixMessage> messages){  double rmsePartialSum=0d;  float l2norm=0f;  if (tolerance > 0) {    oldValue=new FloatMatrixWritable(vertex.getValue().getRows(),vertex.getValue().getColumns(),vertex.getValue().data);  }  for (  FloatMatrixMessage msg : messages) {    float rating=vertex.getEdgeValue(msg.getSenderId()).get();    updateValue(vertex.getValue(),msg.getFactors(),rating,minRating,maxRating,lambda,gamma);  }  for (  FloatMatrixMessage msg : messages) {    float predicted=vertex.getValue().dot(msg.getFactors());    float rating=vertex.getEdgeValue(msg.getSenderId()).get();    predicted=Math.min(predicted,maxRating);    predicted=Math.max(predicted,minRating);    float err=predicted - rating;    rmsePartialSum+=(err * err);  }  aggregate(RMSE_AGGREGATOR,new DoubleWritable(rmsePartialSum));  if (tolerance > 0) {    l2norm=vertex.getValue().distance2(oldValue);  }  if (tolerance < 0 || (tolerance > 0 && l2norm > tolerance)) {    sendMessageToAllEdges(vertex,new FloatMatrixMessage(vertex.getId(),vertex.getValue(),0.0f));  }  vertex.voteToHalt();}  }
class C{  public void close(){synchronized (this) {    if (idleFuture != null)     idleFuture.cancel(true);    if (idleReconnectFuture != null)     idleReconnectFuture.cancel(true);  }}  }
class C{  public AttributeWeights(){}  }
class C{  private void checkConsistency() throws ConfigurationException {  if (this.securityPropertiesAuthenticationInfo == null && this.alias != null) {    throw new ConfigurationException("\n\tError : " + "Both securityPropertiesAuthenticationInfo and alias are " + "null which makes it impossible to fetch the associated "+ "key from keyStore.");  }}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  private void scanPrivateFile(Uri oldUri,String filePath,MediaType mt){  try {    int n=context.getContentResolver().delete(oldUri,null,null);    if (n > 0) {      LOG.debug("Deleted from Files provider: " + oldUri + ", path: "+ filePath);    }    nativeScanFile(context,filePath);  } catch (  Throwable e) {    LOG.error("Unable to scan file: " + filePath,e);  }}  }
class C{  public final void testMinLength(){  assertNotNull(Constraints.minLength(1));}  }
class C{  public Object executeOn(Connection conn,Op op,boolean timeoutFatal){  try {    return executeWithPossibleReAuthentication(conn,op);  } catch (  Exception e) {    handleException(op,e,conn,0,true,timeoutFatal);    throw new ServerConnectivityException("Received error connecting to server",e);  }}  }
class C{  public ResourceNotFoundException(Throwable cause){  super(cause);}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void recordAllocationForceForTest(int count,String desc,Object newObj){  recordAllocationForceForTestReal(count,desc,newObj,2);}  }
class C{  protected void serializeCData(CData item,TagNode tagNode,Writer writer) throws IOException {  if (dontEscape(tagNode)) {    writer.write(item.getContentWithoutStartAndEndTokens());  } else {    writer.write(escapeXml(item.getContentWithStartAndEndTokens()));  }}  }
class C{  public static PrefixQueryBuilder prefixQuery(String name,String prefix){  return new PrefixQueryBuilder(name,prefix);}  }
class C{  private static int distanceToEnemy(final Territory t,final GameData data,final PlayerID player,final boolean sea){  if (Matches.TerritoryIsImpassable.match(t)) {    return 0;  }  Match<Territory> endCondition;  Match<Territory> routeCondition;  if (sea) {    endCondition=new CompositeMatchAnd<>(Matches.TerritoryIsWater,Matches.territoryHasEnemyUnits(player,data));    routeCondition=Matches.TerritoryIsWater;  } else {    endCondition=new CompositeMatchAnd<>(Matches.isTerritoryEnemy(player,data),Matches.TerritoryIsNotImpassable,Matches.TerritoryIsLand);    routeCondition=new CompositeMatchAnd<>(Matches.isTerritoryAllied(player,data),Matches.TerritoryIsNotImpassable,Matches.TerritoryIsLand);  }  final Route r=findNearest(t,endCondition,routeCondition,data);  if (r == null) {    return 0;  } else {    return r.numberOfSteps();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void applyToQuery(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final String name,final String value){  if (false && context.queryHints != null) {    context.queryHints.setProperty(name,value);  }  final Iterator<BOp> itr=BOpUtility.preOrderIteratorWithAnnotations(queryRoot);  final List<ASTBase> list=new LinkedList<ASTBase>();  while (itr.hasNext()) {    final BOp op=itr.next();    if (!isNodeAcceptingQueryHints(op))     continue;    final ASTBase t=(ASTBase)op;    list.add(t);  }  for (  ASTBase t : list) {    _applyQueryHint(context,queryRoot,scope,t,name,value);  }}  }
class C{  public void testMapRemove(){  if (!isAddRemoveModifiable())   return;  resetEmpty();  Object[] keys=getSampleKeys();  Object[] values=getSampleValues();  for (int i=0; i < keys.length; i++) {    Object o=map.remove(keys[i]);    assertTrue("First map.remove should return null",o == null);  }  verify();  resetFull();  for (int i=0; i < keys.length; i++) {    Object o=map.remove(keys[i]);    confirmed.remove(keys[i]);    verify();    assertEquals("map.remove with valid key should return value",values[i],o);  }  Object[] other=getOtherKeys();  resetFull();  int size=map.size();  for (int i=0; i < other.length; i++) {    Object o=map.remove(other[i]);    assertEquals("map.remove for nonexistent key should return null",o,null);    assertEquals("map.remove for nonexistent key should not " + "shrink map",size,map.size());  }  verify();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenDividers[");  for (int i=0; i < m_al.size(); i++) {    buffer.append(" [divider").append(i + 1);    buffer.append(" = ").append((m_al.get(i)).toString());    buffer.append("] ");  }  buffer.append("]");  return buffer.toString();}  }
class C{  public static void addLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.add(behavior);    updateGraphDebugBehavior();  }}  }
class C{  private boolean isPrimalFeasible(){  double[] x=row();  double sum=0.0;  for (int j=0; j < n; j++) {    if (x[j] < 0) {      StdOut.println("row vector not a probability distribution");      StdOut.printf("    x[%d] = %f\n",j,x[j]);      return false;    }    sum+=x[j];  }  if (Math.abs(sum - 1.0) > EPSILON) {    StdOut.println("row vector x[] is not a probability distribution");    StdOut.println("    sum = " + sum);    return false;  }  return true;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public Matrix3f rotationX(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=1.0f;  m01=0.0f;  m02=0.0f;  m10=0.0f;  m11=cos;  m12=sin;  m20=0.0f;  m21=-sin;  m22=cos;  return this;}  }
class C{  public void testNoTransformersAdded(){  verifyTransformers(fInst);}  }
class C{  public void test_read_writeByte() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeByte(Byte.MIN_VALUE);  raf.writeByte(11);  raf.writeByte(Byte.MAX_VALUE);  raf.writeByte(Byte.MIN_VALUE - 1);  raf.writeByte(Byte.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Byte.MIN_VALUE,raf.readByte());  assertEquals("Test 2: Incorrect value written or read;",11,raf.readByte());  assertEquals("Test 3: Incorrect value written or read;",Byte.MAX_VALUE,raf.readByte());  assertEquals("Test 4: Incorrect value written or read;",127,raf.readByte());  assertEquals("Test 5: Incorrect value written or read;",-128,raf.readByte());  try {    raf.readByte();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeByte(13);    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readByte();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public void assertSameLength(FloatMatrix a){  if (!sameLength(a)) {    throw new SizeException("Matrices must have same length (is: " + length + " and "+ a.length+ ")");  }}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((N4ClassifierDefinition)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static void silentCloseOutputStream(OutputStream os){  try {    if (os != null) {      os.close();    }  } catch (  IOException e) {    Log.w(LOG_TAG,"Cannot close output stream",e);  }}  }
class C{  public CompositeTupleSet(){  this(true);}  }
class C{  private void createCertificate(String alias,JFrame parent){  log.info("");  try {    File dir=m_file.getParentFile();    if (!dir.exists())     dir.mkdir();  } catch (  Exception e) {    log.log(Level.SEVERE,"directory",e);  }  String dname=getDname(this,parent);  if (dname == null)   return;  try {    genkey(alias,m_password,m_file.getAbsolutePath(),dname);    selfcert(alias,m_password,m_file.getAbsolutePath(),dname);  } catch (  Exception e) {    log.log(Level.SEVERE,"certificate",e);  }}  }
class C{  public boolean contains(final int[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void correctParameterData(boolean[] parameterData,boolean compact) throws NotFoundException {  int numCodewords;  int numDataCodewords;  if (compact) {    numCodewords=7;    numDataCodewords=2;  } else {    numCodewords=10;    numDataCodewords=4;  }  int numECCodewords=numCodewords - numDataCodewords;  int[] parameterWords=new int[numCodewords];  int codewordSize=4;  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (parameterData[codewordSize * i + codewordSize - j]) {        parameterWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(GenericGF.AZTEC_PARAM);    rsDecoder.decode(parameterWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw NotFoundException.getNotFoundInstance();  }  for (int i=0; i < numDataCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      parameterData[i * codewordSize + codewordSize - j]=(parameterWords[i] & flag) == flag;      flag<<=1;    }  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:      return TypesPackage.TSTRUCT_SETTER___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___IS_WRITEABLE:    return TypesPackage.TSTRUCT_SETTER___IS_WRITEABLE;case TypesPackage.TMEMBER___IS_STATIC:  return TypesPackage.TSTRUCT_SETTER___IS_STATIC;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TMemberWithAccessModifier.class) {switch (baseOperationID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_SETTER___GET_MEMBER_ACCESS_MODIFIER;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TSetter.class) {switch (baseOperationID) {case TypesPackage.TSETTER___IS_WRITEABLE:return TypesPackage.TSTRUCT_SETTER___IS_WRITEABLE;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TStructMember.class) {switch (baseOperationID) {case TypesPackage.TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_SETTER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER;case TypesPackage.TSTRUCT_MEMBER___IS_STATIC:return TypesPackage.TSTRUCT_SETTER___IS_STATIC;case TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER:return TypesPackage.TSTRUCT_SETTER___GET_MEMBER_ACCESS_MODIFIER;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void sendMessage(byte[] content,String contentType) throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.sendMessage2(content,contentType);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  static boolean isBetween(float value,float start,float end){  if (start > end) {    float tmp=start;    start=end;    end=tmp;  }  return value >= start && value <= end;}  }
class C{  public Instrumenter attachAdaptiveMultimethodVariationCollector(){  includeAdaptiveMultimethodVariation=true;  return this;}  }
class C{  public RibbonArchiveImpl(ArchiveBase<?> archive){  super(archive);}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.359 -0500",hash_original_method="F7D4263990E83377B0F1337DC2A9789F",hash_generated_method="4462E72B31EDF62C36CD117457DEE7F2") public float distanceTo(Location dest){synchronized (mResults) {    if (mLatitude != mLat1 || mLongitude != mLon1 || dest.mLatitude != mLat2 || dest.mLongitude != mLon2) {      computeDistanceAndBearing(mLatitude,mLongitude,dest.mLatitude,dest.mLongitude,mResults);      mLat1=mLatitude;      mLon1=mLongitude;      mLat2=dest.mLatitude;      mLon2=dest.mLongitude;      mDistance=mResults[0];      mInitialBearing=mResults[1];    }    return mDistance;  }}  }
class C{  public Instance(){  this.features=new ArrayList<Feature>();}  }
class C{  public static ExampleSet materializeExampleSet(ExampleSet exampleSet,int dataManagement) throws UndefinedParameterError {  List<Attribute> attributes=new ArrayList<Attribute>(exampleSet.getAttributes().allSize());  Map<Attribute,String> specialAttributes=new LinkedHashMap<Attribute,String>();  Iterator<AttributeRole> a=exampleSet.getAttributes().allAttributeRoles();  while (a.hasNext()) {    AttributeRole role=a.next();    Attribute attribute=role.getAttribute();    Attribute newAttribute=AttributeFactory.createAttribute(attribute.getName(),attribute.getValueType());    if (attribute.isNominal()) {      newAttribute.setMapping((NominalMapping)attribute.getMapping().clone());    }    if (role.isSpecial()) {      specialAttributes.put(newAttribute,role.getSpecialName());    }    attributes.add(newAttribute);  }  MemoryExampleTable table=new MemoryExampleTable(attributes);  DataRowFactory factory=new DataRowFactory(dataManagement,'.');  for (  Example example : exampleSet) {    Iterator<Attribute> i=exampleSet.getAttributes().allAttributes();    int attributeCounter=0;    DataRow row=factory.create(attributes.size());    while (i.hasNext()) {      Attribute attribute=i.next();      double value=example.getValue(attribute);      Attribute newAttribute=attributes.get(attributeCounter);      if (attribute.isNominal()) {        if (!Double.isNaN(value)) {          String nominalValue=attribute.getMapping().mapIndex((int)value);          value=newAttribute.getMapping().mapString(nominalValue);        }      }      row.set(newAttribute,value);      attributeCounter++;    }    table.addDataRow(row);  }  ExampleSet createdSet=table.createExampleSet(specialAttributes);  createdSet.getAnnotations().addAll(exampleSet.getAnnotations());  return createdSet;}  }
class C{  private BugInstance createBugInstance(String type){  return new BugInstance(this,type,NORMAL_PRIORITY).addClassAndMethod(this).addSourceLine(this);}  }
class C{  public boolean isUnresolved(){  return unresolved;}  }
class C{  protected boolean isIncomingDiscoveryAllowed(long sw,short port,boolean isStandard){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.OFPP_LOCAL.getValue())   return false;  ImmutablePort ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",HexString.toHexString(sw),port);    }    return false;  }  return true;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected void sleep(final int waitTime) throws InterruptedException {  Thread.sleep(waitTime);}  }
class C{  public static int paddingRequired(int size,int alignmentSize){  int padding=alignmentSize - (size % alignmentSize);  return padding == alignmentSize ? 0 : padding;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public MySqlSystemVariables(){}  }
class C{  public void assertion(boolean b,java.lang.String msg){  if (!b) {    java.lang.String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public AttachmentEntry updateAttachment(AttachmentEntry entry,File newFile,String newTitle,String newDescription) throws IOException, ServiceException {  entry.setMediaSource(new MediaFileSource(newFile,mediaTypes.getContentType(newFile)));  if (newTitle != null) {    entry.setTitle(new PlainTextConstruct(newTitle));  }  if (newDescription != null) {    entry.setSummary(new PlainTextConstruct(newDescription));  }  return entry.updateMedia(true);}  }
class C{  public TouchHandlerOld(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }}  }
class C{  public LoggingFraction formatter(String name,String pattern){  patternFormatter(new PatternFormatter(name).pattern(pattern));  return this;}  }
class C{  private static Class<?> loadClass(URL[] urls,String name) throws ClassNotFoundException {  ClassLoader parent=getRMIContextClassLoader();  if (loaderLog.isLoggable(Log.VERBOSE)) {    loaderLog.log(Log.VERBOSE,"(thread context class loader: " + parent + ")");  }  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    try {      Class<?> c=Class.forName(name,false,parent);      if (loaderLog.isLoggable(Log.VERBOSE)) {        loaderLog.log(Log.VERBOSE,"class \"" + name + "\" found via "+ "thread context class loader "+ "(no security manager: codebase disabled), "+ "defined by "+ c.getClassLoader());      }      return c;    } catch (    ClassNotFoundException e) {      if (loaderLog.isLoggable(Log.BRIEF)) {        loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via "+ "thread context class loader "+ "(no security manager: codebase disabled)",e);      }      throw new ClassNotFoundException(e.getMessage() + " (no security manager: RMI class loader disabled)",e.getException());    }  }  Loader loader=lookupLoader(urls,parent);  try {    if (loader != null) {      loader.checkPermissions();    }  } catch (  SecurityException e) {    try {      Class<?> c=loadClassForName(name,false,parent);      if (loaderLog.isLoggable(Log.VERBOSE)) {        loaderLog.log(Log.VERBOSE,"class \"" + name + "\" found via "+ "thread context class loader "+ "(access to codebase denied), "+ "defined by "+ c.getClassLoader());      }      return c;    } catch (    ClassNotFoundException unimportant) {      if (loaderLog.isLoggable(Log.BRIEF)) {        loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via "+ "thread context class loader "+ "(access to codebase denied)",e);      }      throw new ClassNotFoundException("access to class loader denied",e);    }  }  try {    Class<?> c=loadClassForName(name,false,loader);    if (loaderLog.isLoggable(Log.VERBOSE)) {      loaderLog.log(Log.VERBOSE,"class \"" + name + "\" "+ "found via codebase, "+ "defined by "+ c.getClassLoader());    }    return c;  } catch (  ClassNotFoundException e) {    if (loaderLog.isLoggable(Log.BRIEF)) {      loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via codebase",e);    }    throw e;  }}  }
class C{  @Override public AttributedCharacterIterator formatToCharacterIterator(Object obj){  StringBuffer sb=new StringBuffer();  CharacterIteratorFieldDelegate delegate=new CharacterIteratorFieldDelegate();  if (obj instanceof Date) {    format((Date)obj,sb,delegate);  } else   if (obj instanceof Number) {    format(new Date(((Number)obj).longValue()),sb,delegate);  } else   if (obj == null) {    throw new NullPointerException("formatToCharacterIterator must be passed non-null object");  } else {    throw new IllegalArgumentException("Cannot format given Object as a Date");  }  return delegate.getIterator(sb.toString());}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  @Interruptible public static String intAsHexString(int number){  char[] buf=new char[10];  int index=10;  while (--index > 1) {    int digit=number & 0x0000000f;    buf[index]=digit <= 9 ? (char)('0' + digit) : (char)('a' + digit - 10);    number>>=4;  }  buf[index--]='x';  buf[index]='0';  return new String(buf);}  }
class C{  protected Size2D arrangeRR(BlockContainer container,Range widthRange,Range heightRange,Graphics2D g2){  double[] w=new double[5];  double[] h=new double[5];  if (this.topBlock != null) {    RectangleConstraint c1=new RectangleConstraint(widthRange,heightRange);    Size2D size=this.topBlock.arrange(g2,c1);    w[0]=size.width;    h[0]=size.height;  }  if (this.bottomBlock != null) {    Range heightRange2=Range.shift(heightRange,-h[0],false);    RectangleConstraint c2=new RectangleConstraint(widthRange,heightRange2);    Size2D size=this.bottomBlock.arrange(g2,c2);    w[1]=size.width;    h[1]=size.height;  }  Range heightRange3=Range.shift(heightRange,-(h[0] + h[1]));  if (this.leftBlock != null) {    RectangleConstraint c3=new RectangleConstraint(widthRange,heightRange3);    Size2D size=this.leftBlock.arrange(g2,c3);    w[2]=size.width;    h[2]=size.height;  }  Range widthRange2=Range.shift(widthRange,-w[2],false);  if (this.rightBlock != null) {    RectangleConstraint c4=new RectangleConstraint(widthRange2,heightRange3);    Size2D size=this.rightBlock.arrange(g2,c4);    w[3]=size.width;    h[3]=size.height;  }  h[2]=Math.max(h[2],h[3]);  h[3]=h[2];  Range widthRange3=Range.shift(widthRange,-(w[2] + w[3]),false);  if (this.centerBlock != null) {    RectangleConstraint c5=new RectangleConstraint(widthRange3,heightRange3);    Size2D size=this.centerBlock.arrange(g2,c5);    w[4]=size.width;    h[4]=size.height;  }  double width=Math.max(w[0],Math.max(w[1],w[2] + w[4] + w[3]));  double height=h[0] + h[1] + Math.max(h[2],Math.max(h[3],h[4]));  if (this.topBlock != null) {    this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,width,h[0]));  }  if (this.bottomBlock != null) {    this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,height - h[1],width,h[1]));  }  if (this.leftBlock != null) {    this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],h[2]));  }  if (this.rightBlock != null) {    this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],h[0],w[3],h[3]));  }  if (this.centerBlock != null) {    this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],width - w[2] - w[3],height - h[0] - h[1]));  }  return new Size2D(width,height);}  }
class C{  public static String bytesToHumanReadable(long bytes){  if (bytes == -1) {    return "";  }  int unit=1024;  if (bytes < unit)   return bytes + " B";  int exp=(int)(Math.log(bytes) / Math.log(unit));  String pre=String.valueOf(("kMGTPEZY").charAt(exp - 1));  return String.format("%.2f %sB",bytes / Math.pow(unit,exp),pre);}  }
class C{  public CUarray(){}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public void testGetDataLength(){  char expectedReturn=1;  this.requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4);  char actualReturn=this.requestedAddressFamilyAttribute.getDataLength();  assertEquals("Datalength is not properly calculated",expectedReturn,actualReturn);  expectedReturn=1;  this.requestedAddressFamilyAttribute.setFamily(MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V6);  actualReturn=this.requestedAddressFamilyAttribute.getDataLength();  assertEquals("Datalength is not properly calculated",expectedReturn,actualReturn);}  }
class C{  public void modelUpdated(algs.example.gui.model.Model<IMultiPoint> model){  getCanvas().redrawState();  getCanvas().repaint();}  }
class C{  public void onInitialize(RefElement refElement){}  }
class C{  public double azimuth(Geo v2){  double ret=strictAzimuth(v2);  if (Double.isNaN(ret)) {    return 0;  }  return ret;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  GenericDescriptorBO(final KLVPacket.Header header){  super(header);}  }
class C{  public void feedFromInputStream(InputStream is,boolean closeStream){  BufferedStreamFeeder sf=new BufferedStreamFeeder(is);  sf.setCloseStream(closeStream);  try {    sf.feedAll(this);  }  finally {    close();    sf.close();  }}  }
class C{  public boolean visibleToScripts(String fullClassName){  if (fullClassName.startsWith("org.mozilla.javascript"))   return false;  if (fullClassName.startsWith("org.apache.flex.forks.batik.")) {    String batikPkg=fullClassName.substring(17);    if (batikPkg.startsWith("script"))     return false;    if (batikPkg.startsWith("apps"))     return false;    if (batikPkg.startsWith("bridge.")) {      if (batikPkg.indexOf(".BaseScriptingEnvironment") != -1)       return false;      if (batikPkg.indexOf(".ScriptingEnvironment") != -1)       return false;    }  }  return true;}  }
class C{  private void leakyLearning(final Neuron neuron){  double sumOfInputs=neuron.getTotalInput();  for (  Synapse incoming : neuron.getFanIn()) {    activation=incoming.getSource().getActivation();    if (normalizeInputs) {      if (sumOfInputs != 0) {        activation=activation / sumOfInputs;      }    }    val=incoming.getStrength() + leakyLearningRate * (activation - incoming.getStrength());    incoming.setStrength(val);  }}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public static String addToList(String newItem,String semicolonSepList,int maxItems){  StringBuilder sb=new StringBuilder(newItem);  String[] items=semicolonSepList.split(";");  for (int i=0; i < items.length && i < maxItems; i++) {    String port=items[i];    if (port.equals(newItem)) {      continue;    }    sb.append(";");    sb.append(port);  }  return sb.toString();}  }
class C{  public UnrolledUnsafeCopierBuilder offset(long offset){  checkArgument(offset >= 0);  this.offset=offset;  return this;}  }
class C{  private int peekStack(){  if (stackSize == 0) {    throw new IllegalStateException("XML Writer is closed.");  }  return stack[stackSize - 1];}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  protected Node decodeFloatingNode(MethodScope methodScope,LoopScope loopScope,int nodeOrderId){  long readerByteIndex=methodScope.reader.getByteIndex();  Node node=instantiateNode(methodScope,nodeOrderId);  if (node instanceof FixedNode) {    throw shouldNotReachHere("Not a floating node: " + node.getClass().getName());  }  readProperties(methodScope,node);  assert node.getNodeClass().getEdges(Edges.Type.Successors).getCount() == 0;  makeInputNodes(methodScope,loopScope,node,false);  methodScope.reader.setByteIndex(readerByteIndex);  return node;}  }
class C{  public static void multiplyVectorByMatrix(double[] v,double[] m,double[] result){  double vx=v[0], vy=v[1], vz=v[2], vw=v[3];  result[0]=vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12];  result[1]=vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13];  result[2]=vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14];  result[3]=vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15];}  }
class C{  private static void useCacheOrOnlineRepository(){  if (REP_MIRROR == null) {    establishMirror();  }  if (CACHE_URL != null) {    PACKAGE_MANAGER.setPackageRepositoryURL(CACHE_URL);  } else   if (REP_URL != null) {    PACKAGE_MANAGER.setPackageRepositoryURL(REP_URL);  }}  }
class C{  public void sendChunks(InputStream inputStream,String msgId,String contentType,long contentSize,TypeMsrpChunk typeMsrpChunk) throws NetworkException {  mMsrpSession.sendChunks(inputStream,msgId,contentType,contentSize,typeMsrpChunk);}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final CTag tag,final TagType type){  checkArguments(provider,tag);  Preconditions.checkNotNull(type,"IE00549: Type argument can not be null");  Preconditions.checkArgument(tag.getType() == type,"IE00550: Type of the node is different from the type of the given node");}  }
class C{  private void executePrevious(){  lastSearchResult=searchExecutor.previous();  processSearchResult(lastSearchResult);}  }
class C{  int checkCallingPermission(String permission){  return checkPermission(permission,Binder.getCallingPid(),UserHandle.getAppId(Binder.getCallingUid()));}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof AffineTransformation))   return false;  AffineTransformation trans=(AffineTransformation)obj;  return m00 == trans.m00 && m01 == trans.m01 && m02 == trans.m02 && m10 == trans.m10 && m11 == trans.m11 && m12 == trans.m12;}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  public static boolean isRPProtectingVplexVolumes(UnManagedVolume umv,IngestionRequestContext requestContext,DbClient dbClient){  VolumeIngestionContext context=requestContext.getVolumeContext(umv.getNativeGuid());  boolean isRPProtectingVplexVolumes=false;  if (context instanceof RecoverPointVolumeIngestionContext) {    RecoverPointVolumeIngestionContext rpContext=(RecoverPointVolumeIngestionContext)context;    ProtectionSet pset=rpContext.getManagedProtectionSet();    if (pset == null) {      return isRPProtectingVplexVolumes;    }    for (    String volumeIdStr : pset.getVolumes()) {      for (      Set<DataObject> dataObjList : rpContext.getDataObjectsToBeUpdatedMap().values()) {        for (        DataObject dataObj : dataObjList) {          if (URIUtil.identical(dataObj.getId(),URI.create(volumeIdStr))) {            Volume volume=(Volume)dataObj;            if (volume.isVPlexVolume(dbClient)) {              isRPProtectingVplexVolumes=true;              break;            }          }        }      }    }  } else   if (context instanceof BlockVolumeIngestionContext) {    Set<DataObject> updatedObjects=requestContext.getDataObjectsToBeUpdatedMap().get(umv.getNativeGuid());    if (updatedObjects != null && !updatedObjects.isEmpty()) {      for (      DataObject dataObj : updatedObjects) {        if (dataObj instanceof Volume) {          Volume volume=(Volume)dataObj;          if (volume.isVPlexVolume(dbClient)) {            isRPProtectingVplexVolumes=true;            break;          }        }      }    }  } else {    _logger.error("Context found of type: {} invalid",context.getClass().toString());  }  return isRPProtectingVplexVolumes;}  }
class C{  private void checkAffinity(int blockSize,IgfsEntryInfo info,Iterable<IgfsBlockLocation> affinity){  for (  IgfsBlockLocation loc : affinity) {    info("Going to check IGFS block location: " + loc);    int block=(int)(loc.start() / blockSize);    int endPos;    do {      IgfsBlockKey key=new IgfsBlockKey(info.id(),info.fileMap().affinityKey(block * blockSize,false),false,block);      ClusterNode affNode=grid(0).affinity(DATA_CACHE_NAME).mapKeyToNode(key);      assertTrue("Failed to find node in affinity [dataMgr=" + loc.nodeIds() + ", nodeId="+ affNode.id()+ ", block="+ block+ ']',loc.nodeIds().contains(affNode.id()));      endPos=(block + 1) * blockSize;      block++;    } while (endPos < loc.start() + loc.length());  }}  }
class C{  public <R>Optional<R> map(Func1<T,R> func1){  return value == null ? Optional.<R>empty() : Optional.of(func1.call(value));}  }
class C{  public boolean isNumerical(){  return getValueType() == ValueType.NUMERICAL;}  }
class C{  public void rename(String name1,String name2) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_RENAMESTRING_NAME1_STRING_NAME2_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public static boolean isClassExists(String className){  try {    Class.forName(className);    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {}  }
class C{  public Element store(Object o){  LocoAddress p=(LocoAddress)o;  Element element=new Element("locoaddress");  DccLocoAddressXml adapter=new DccLocoAddressXml();  element.addContent(adapter.store(p));  if (p != null) {    element.addContent(new Element("number").addContent("" + p.getNumber()));    element.addContent(new Element("protocol").addContent(p.getProtocol().getShortName()));  } else {    element.addContent(new Element("number").addContent(""));    element.addContent(new Element("protocol").addContent(""));  }  return element;}  }
class C{  public Long deleteFileOrFolder(String SID,Long fileExplorerItemId) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long User_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(User_level)) {      fileExplorerItemDao.deleteFileExplorerItem(fileExplorerItemId);    }  } catch (  Exception err) {    log.error("[deleteFileOrFolder]",err);  }  return null;}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  int hit=0;  for (int i=0; i != max; i++) {    int next=subject.parse(buf,start + hit,end,data);    if (next == 0) {      break;    }    if (next == NO_MATCH) {      if (i < min) {        return NO_MATCH;      }      break;    }    hit+=next;  }  return hit;}  }
class C{  public LRUCache(final int minSize,final int maxSize){  super(minSize,1.1f,true);  this.maxSize=maxSize;}  }
class C{  @Override protected Element narrow(ElementMetadata<?,?> meta,ValidationContext vc){  String kind=Kinds.getElementKind(this);  if (kind != null) {    return adapt(this,meta,kind);  }  return super.narrow(meta,vc);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (null != m_patterns) {    int n=m_patterns.length;    for (int i=0; i < n; i++) {      if (m_patterns[i].canTraverseOutsideSubtree())       return true;    }  }  return false;}  }
class C{  private void cleanUpOnFailure(){  FilesUtility.delete(newReleaseFS.getContentFolder());}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  @NoInline @Entrypoint static void unlockAndThrow(Object objToUnlock,Throwable objToThrow){  ObjectModel.genericUnlock(objToUnlock);  athrow(objToThrow);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.EMBEDDED) {    try {      String eth0Info=IOUtils.exec(new String[]{"ifconfig",Sage.getBoolean("UseWireless",false) ? Sage.get("WirelessInterface","ra0") : Sage.get("NetworkInterface","eth0")});      int idx0=eth0Info.indexOf("Mask:");      if (idx0 != -1) {        int idx1=eth0Info.indexOf("\n",idx0);        if (idx1 != -1) {          return eth0Info.substring(idx0 + "Mask:".length(),idx1).trim();        }      }    } catch (    Throwable e) {      System.out.println("ERROR:" + e);    }  }  return "255.255.255.0";}  }
class C{  public BluetoothPeerNetwork(BluetoothDevice bluetoothDevice){  this.mBluetoothDevice=bluetoothDevice;}  }
class C{  public void releaseAcquiredTrigger(OperableTrigger trigger){synchronized (lock) {    TriggerWrapper tw=triggersByKey.get(trigger.getKey());    if (tw != null && tw.state == TriggerWrapper.STATE_ACQUIRED) {      tw.state=TriggerWrapper.STATE_WAITING;      timeTriggers.add(tw);    }  }}  }
class C{  public KStepMarkov(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights,Function<V,Double> vertex_priors,int steps){  super(graph,edge_weights,vertex_priors,0);  initialize(steps);}  }
class C{  public int judgeArea(ConvexBoardArea a){  final String METHOD_NAME="judgeArea(ConvexBoardArea)";  owner.methodBegin(getClass(),METHOD_NAME);  try {    boolean flip=getDirection() > 2;    HexLine[] edges=a.getEdges();    if ((edges[getDirection()] == null) || (edges[(getDirection() + 3) % 6] == null)) {      System.err.println(new IllegalStateException("Detection of NULL edges in ConvexBoardArea :: " + a.toString()));      return 0;    }    if (edges[getDirection()].getIntercept() == getIntercept()) {      return 0;    }    if (edges[(getDirection() + 3) % 6].getIntercept() == getIntercept()) {      return 0;    }    boolean edgeone=(edges[getDirection()].getIntercept() < getIntercept()) ^ flip;    boolean edgetwo=(edges[(getDirection() + 3) % 6].getIntercept() < getIntercept()) ^ flip;    if (edgeone && edgetwo) {      return 1;    }    if ((!edgeone) && (!edgetwo)) {      return -1;    }    return 0;  }  finally {    owner.methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public static Metrics isBoring(CharSequence text,TextPaint paint,TextDirectionHeuristic textDir,Metrics metrics){  char[] temp=TextUtils.obtain(500);  int length=text.length();  boolean boring=true;  outer:   for (int i=0; i < length; i+=500) {    int j=i + 500;    if (j > length)     j=length;    TextUtils.getChars(text,i,j,temp,0);    int n=j - i;    for (int a=0; a < n; a++) {      char c=temp[a];      if (c == '\n' || c == '\t' || c >= FIRST_RIGHT_TO_LEFT) {        boring=false;        break outer;      }    }    if (textDir != null && textDir.isRtl(temp,0,n)) {      boring=false;      break outer;    }  }  TextUtils.recycle(temp);  if (boring && text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] styles=sp.getSpans(0,length,ParagraphStyle.class);    if (styles.length > 0) {      boring=false;    }  }  if (boring) {    Metrics fm=metrics;    if (fm == null) {      fm=new Metrics();    }    TextLine line=TextLine.obtain();    line.set(paint,text,0,length,Layout.DIR_LEFT_TO_RIGHT,Layout.DIRS_ALL_LEFT_TO_RIGHT,false,null);    fm.width=(int)FloatMath.ceil(line.metrics(fm));    TextLine.recycle(line);    return fm;  } else {    return null;  }}  }
class C{  public Point[] newArray(int size){  return new Point[size];}  }
class C{  private boolean printData(PrintService printService){  try {    SimpleDoc doc;    System.out.println("Printing data as:" + _dataContentType);    if (_dataContentType.equalsIgnoreCase("application/pdf")) {      PdfDecoder decodePDF=new PdfDecoder(true);      decodePDF.openPdfArray(_printData);      decodePDF.setPagePrintRange(1,decodePDF.getPageCount());      decodePDF.setUsePDFPaperSize(true);      doc=new SimpleDoc(decodePDF,DocFlavor.SERVICE_FORMATTED.PAGEABLE,null);    } else {      doc=new SimpleDoc(_printData,DocFlavor.BYTE_ARRAY.AUTOSENSE,null);    }    DocPrintJob job=printService.createPrintJob();    job.print(doc,new HashPrintRequestAttributeSet());    System.out.println("Job sent to printer succesfully");    return true;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  private void appendTypeParametersLabels(ITypeParameter[] typeParameters,long flags,StringBuilder builder) throws JavaModelException {  if (typeParameters.length > 0) {    builder.append(getLT());    for (int i=0; i < typeParameters.length; i++) {      if (i > 0) {        builder.append(JavaElementLabels.COMMA_STRING);      }      appendTypeParameterWithBounds(typeParameters[i],flags,builder);    }    builder.append(getGT());  }}  }
class C{  public void prepare(boolean fullHeap){}  }
class C{  private static void addToRow(int[] fromRow,int[] toRow,int startIndex){  for (int i=toRow.length - 1; i >= startIndex; i--) {    toRow[i]=fromRow[i] ^ toRow[i];  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  public void increment(double coord,long[] data){  long[] existing=get(coord);  for (int i=0; i < existing.length; i++) {    existing[i]+=data[i];  }}  }
class C{  public boolean isExpired(){  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());}  }
class C{  public RenameNonVirtualMethodProcessor(IMethod method){  super(method);}  }
class C{  void attachView(){  getPresenter().attachView(delegateCallback.getMvpView());}  }
class C{  @Override public void onClick(View v){  if (mItemClickListener != null) {    mItemClickListener.onMenuItemClick(v,((ViewGroup)v.getParent()).indexOfChild(v));  }  close();}  }
class C{  void sendCompletionNotification(){  if (progressListener != null) {    new NotificationTask(this,progressListener,progressNotifier).run();  }}  }
class C{  @Before public void beforeTest() throws IOException {  checkState(null == targetPlatformInstallLocation);  checkState(null == targetPlatformFile);  final Path tempRoot=createTempDirectory();  final String tempFolderName=name.getMethodName() + "-time-" + System.currentTimeMillis();  targetPlatformInstallLocation=createDirectory(tempRoot,tempFolderName).toFile();  final TargetPlatformModel model=new TargetPlatformModel();  for (  final Entry<String,String> dependencyEntry : getNpmDependencies().entrySet()) {    model.addNpmDependency(dependencyEntry.getKey(),dependencyEntry.getValue());  }  targetPlatformFile=new File(tempRoot.toFile(),TP_FILE_NAME);  targetPlatformFile.createNewFile();  try (FileWriter fw=new FileWriter(targetPlatformFile)){    fw.write(model.toString());    fw.flush();  } }  }
class C{  CarPane(){  drawCar();  animation=new Timeline(new KeyFrame(Duration.millis(50),null));  animation.setCycleCount(Timeline.INDEFINITE);  animation.play();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_3__OR_OP_1:    setOrOp_1(OR_OP_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_LINKING_OP_3__CONSTRAINT_EXPR_1:getConstraintExpr_1().clear();return;}super.eUnset(featureID);}  }
class C{  public int hashCode(){  return (int)time + (int)count;}  }
class C{  public void removeMessageEventNotificationListener(MessageEventNotificationListener messageEventNotificationListener){synchronized (messageEventNotificationListeners) {    messageEventNotificationListeners.remove(messageEventNotificationListener);  }}  }
class C{  private void process(Method method,Annotation label,Annotation[] list) throws Exception {  MethodPart part=factory.getInstance(method,label,list);  MethodType type=part.getMethodType();  if (type == MethodType.GET) {    process(part,read);  }  if (type == MethodType.IS) {    process(part,read);  }  if (type == MethodType.SET) {    process(part,write);  }}  }
class C{  private String token(final String home,final String code) throws IOException {  final String uri=new Href(this.github).path(PsGithub.LOGIN).path("oauth").path(PsGithub.ACCESS_TOKEN).toString();  final List<String> tokens=new JdkRequest(uri).method("POST").header("Accept","application/xml").body().formParam("client_id",this.app).formParam("redirect_uri",home).formParam("client_secret",this.key).formParam(PsGithub.CODE,code).back().fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(XmlResponse.class).xml().xpath("/OAuth/access_token/text()");  if (tokens.isEmpty()) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,"No access token");  }  return tokens.get(0);}  }
class C{  public Boolean stopServer(PropertyHandler ph,String serverId) throws OpenStackConnectionException {  String uri;  try {    uri=connection.getNovaEndpoint() + "/servers/" + URLEncoder.encode(serverId,"UTF-8")+ "/action";    connection.processRequest(uri,"POST","{\"os-stop\": null}");    logger.debug("Stop server: " + serverId);    return Boolean.TRUE;  } catch (  UnsupportedEncodingException e) {    logger.error("Runtime error happened during encoding",e);    throw new RuntimeException(e);  }}  }
class C{  public SimpleHttpOperationInvoker(final Gfsh gfsh,Map<String,String> securityProperties){  this(gfsh,REST_API_URL,securityProperties);}  }
class C{  private SourceCallTree(){  forEntryPoints();}  }
class C{  public BinaryValueOperator(ValueExpr leftArg,ValueExpr rightArg){  setLeftArg(leftArg);  setRightArg(rightArg);}  }
class C{  public PerformRefactoringHistoryOperation(final RefactoringHistory history){  Assert.isNotNull(history);  fRefactoringHistory=history;}  }
class C{  public String addHighlight(String channel,String comment){  if (channel == null || channel.isEmpty() || !Helper.isRegularChannel(channel)) {    return "Failed adding stream highlight (no channel).";  }  StreamInfo streamInfo=api.getStreamInfo(Helper.toStream(channel),null);  String streamTime="Stream Time N/A";  if (streamInfo.isValid() && streamInfo.getOnline()) {    streamTime=DateTime.ago(streamInfo.getTimeStarted());  }  if (comment == null) {    comment="";  }  String line=String.format("%s %s [%s] %s",DateTime.fullDateTime(),channel,streamTime,comment);synchronized (this) {    if (streamInfo.getTimeStarted() != lastStreamStartWritten) {      addToFile("-");    }    boolean success=addToFile(line);    if (success) {      lastStreamStartWritten=streamInfo.getTimeStarted();      String shortComment="";      if (!comment.isEmpty()) {        shortComment="(" + StringUtil.shortenTo(comment,30) + ")";      }      return "Added stream highlight for " + channel + " ["+ streamTime+ "] "+ shortComment;    }    return "Failed adding stream highlight (write error).";  }}  }
class C{  public void testField(){  checkDHPrivateKey key=new checkDHPrivateKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),2211791113380396553L);}  }
class C{  public boolean testIsFinished(){  return mRender.testIsFinished();}  }
class C{  public boolean unregisterStatemachine(IStatemachine statemachine,long cyclePeriod){  if (timerTasks.containsKey(cyclePeriod)) {    boolean ret=timerTasks.get(cyclePeriod).removeStatemachine(statemachine);    return ret;  }  return false;}  }
class C{  public void toNativeArray(long[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  public void testTomcat7xSystemProperties() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/systemproperty-test/test?systemPropertyName=testProperty");  final String expected="testValue";  PingUtils.assertPingTrue("System property testProperty not found on " + url.getPath(),expected,url,logger);}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  double minFitness=Double.NEGATIVE_INFINITY;  try {    minFitness=Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new UserError(operator,207,new Object[]{value,ProcessBranch.PARAMETER_CONDITION_VALUE,e});  }  PerformanceVector performance=operator.getConditionInput(PerformanceVector.class);  return performance.getMainCriterion().getFitness() > minFitness;}  }
class C{  public static IndicesAliasesRequest indexAliasesRequest(){  return new IndicesAliasesRequest();}  }
class C{  String convertURL(String url){  if (docInfo != null) {    return docInfo.convertURL(url);  } else {    return url;  }}  }
class C{  public StateEntry(State state,String value){  this.state=state;  this.value=value;}  }
class C{  private static void readStandardMappingTable(final int idx){  String char_value, NAME, STD_value, MAC_value, WIN_value, PDF_value, raw;  int mac_value, win_value, std_value;  String line;  BufferedReader input_stream=null;  if (idx == MAC) {    checkLoaded(WIN);  }  try {    glyphToChar[idx]=new HashMap<String,Integer>();    input_stream=new BufferedReader(new InputStreamReader(loader.getResourceAsStream("org/jpedal/res/pdf/standard_encoding.cfg"),enc));    usesGlyphlist=true;    if (input_stream == null) {      LogWriter.writeLog("Unable to open standard_encoding.cfg from jar");    }    while (true) {      line=input_stream.readLine();      if (line == null) {        break;      }      final StringTokenizer values=new StringTokenizer(line);      final int count=values.countTokens();      NAME=values.nextToken();      STD_value=values.nextToken();      MAC_value=values.nextToken();      WIN_value=values.nextToken();      PDF_value=values.nextToken();      raw=values.nextToken();      if (count == 7) {        char_value=Character.toString((char)Integer.parseInt(raw,16));      } else {        char_value=raw;      }      unicodeToName.put(char_value,NAME);      if ((idx == MAC) && (Character.isDigit(MAC_value.charAt(0)))) {        mac_value=Integer.parseInt(MAC_value,8);        if (mac_value == 201) {          char_value=ellipsis;        }        MAC_char_encoding_table[mac_value]=char_value;        unicode_char_decoding_table[MAC][mac_value]=NAME;        glyphToChar[MAC].put(NAME,mac_value);      } else       if ((idx == STD) && (Character.isDigit(STD_value.charAt(0)))) {        std_value=Integer.parseInt(STD_value,8);        if (std_value == 188) {          char_value=ellipsis;        }        STD_char_encoding_table[std_value]=char_value;        unicode_char_decoding_table[STD][std_value]=NAME;        glyphToChar[STD].put(NAME,std_value);      } else       if ((idx == PDF) && (Character.isDigit(PDF_value.charAt(0)))) {        std_value=Integer.parseInt(PDF_value,8);        if (std_value == 131) {          char_value=ellipsis;        }        PDF_char_encoding_table[std_value]=char_value;        unicode_char_decoding_table[PDF][std_value]=NAME;      } else       if (idx == WIN && Character.isDigit(WIN_value.charAt(0))) {        win_value=Integer.parseInt(WIN_value,8);        if (win_value == 133) {          char_value=ellipsis;        }        WIN_char_encoding_table[win_value]=char_value;        unicode_char_decoding_table[WIN][win_value]=NAME;        glyphToChar[WIN].put(NAME,win_value);      }      unicode_name_mapping_table.put(NAME,char_value);    }    if (idx == MAC) {      MAC_char_encoding_table[202]=" ";    }    if (idx == WIN) {      WIN_char_encoding_table[160]=" ";      WIN_char_encoding_table[255]="-";      unicode_char_decoding_table[WIN][160]="space";    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for "+ idx);  }  if (input_stream != null) {    try {      input_stream.close();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");    }  }}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("UidInOperator ( ").append("range = ").append(Arrays.toString(this.ranges)).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public final boolean isEmpty(){  return !myIterable.iterator().hasNext();}  }
class C{  public static GenericValue create(GenericValue value){  GenericValue newValue=new GenericValue();  newValue.init(value);  return newValue;}  }
class C{  @Override protected void forceDeleteAttributeAt(int position){  int index=locateIndex(position);  m_NumAttributes--;  if ((index >= 0) && (m_Indices[index] == position)) {    int[] tempIndices=new int[m_Indices.length - 1];    System.arraycopy(m_Indices,0,tempIndices,0,index);    for (int i=index; i < m_Indices.length - 1; i++) {      tempIndices[i]=m_Indices[i + 1] - 1;    }    m_Indices=tempIndices;  } else {    int[] tempIndices=new int[m_Indices.length];    System.arraycopy(m_Indices,0,tempIndices,0,index + 1);    for (int i=index + 1; i < m_Indices.length - 1; i++) {      tempIndices[i]=m_Indices[i] - 1;    }    m_Indices=tempIndices;  }}  }
class C{  public static <E>ConstantSet<E> of(Order<? super E> order,E... elements){  SparseSet<E> sparse=new SparseSet<E>(order);  for (  E e : elements)   sparse.add(e);  return new ConstantSet<E>(sparse);}  }
class C{  protected void selectionChanged(String changedSelector){  if (controller != null) {    controller.prepare(changedSelector);    updateEnabledState();  }}  }
class C{  public boolean isMenuRfQs(){  Object oo=get_Value(COLUMNNAME_IsMenuRfQs);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void onNavMenuItemClick(final View view,final int position){  displayFragment(position);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public FileVirtualPoolRestRep updateFileVirtualPoolWithAssignedPools(@PathParam("id") URI id,VirtualPoolPoolUpdateParam param){  VirtualPool vPool=updateVirtualPoolWithAssignedStoragePools(id,param);  return toFileVirtualPool(vPool,VirtualPool.getFileRemoteProtectionSettings(vPool,_dbClient));}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message){  super(message);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.SINGLE_IS_A__ANONYMOUS_SINGLE_IS_A11:    return ((InternalEList<?>)getAnonymous_singleIsA_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void main(String args[]){  try {    System.out.println("Starting Convert4Gnuplot");    String[] args1=new String[]{"/Users/thomas/Development/opus_home/vsp_configs/re-estimate_travel_data_related_models/create_plots/highway_low_cap_accessibility_indicators","908"};    String[] args2=new String[]{"/Users/thomas/Development/opus_home/vsp_configs/re-estimate_travel_data_related_models/create_plots/highway_accessibility_indicators","908"};    String[] args3=new String[]{"/Users/thomas/Development/opus_home/vsp_configs/re-estimate_travel_data_related_models/create_plots/ferry_accessibility_indicators","908"};    ArrayList<String[]> tasks=new ArrayList<String[]>();    tasks.add(args1);    tasks.add(args2);    tasks.add(args3);    for (int i=0; i < tasks.size(); i++) {      init(tasks.get(i));      System.out.println("Starting queue process ...");      if (isSingleDataSet)       queueSingleDataSet(); else       queueMultipleDataSets();    }    System.out.println("Finished!");  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isSetOperatorId(){  return EncodingUtils.testBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  m_outputProperties=new OutputProperties();  m_outputProperties.setDOMBackPointer(handler.getOriginatingNode());  m_outputProperties.setLocaterInfo(handler.getLocator());  m_outputProperties.setUid(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,this);  String entitiesFileName=(String)m_outputProperties.getProperties().get(OutputPropertiesFactory.S_KEY_ENTITIES);  if (null != entitiesFileName) {    try {      String absURL=SystemIDResolver.getAbsoluteURI(entitiesFileName,handler.getBaseIdentifier());      m_outputProperties.getProperties().put(OutputPropertiesFactory.S_KEY_ENTITIES,absURL);    } catch (    TransformerException te) {      handler.error(te.getMessage(),te);    }  }  handler.getStylesheet().setOutput(m_outputProperties);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(m_outputProperties);  m_outputProperties=null;}  }
class C{  private void put(ContentValues contentValues,String key,String value){  if (value == null)   contentValues.putNull(key); else   contentValues.put(key,value);}  }
class C{  public static IJavaSearchScope create(IMember[] members) throws JavaModelException {  return create(members,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  static boolean isAssignable(Class<?> target,Class<?> source){  if (!target.isPrimitive() || !source.isPrimitive()) {    throw new IllegalArgumentException("types must be primitive");  }  return source.equals(target) || isSubtype(source,target);}  }
class C{  public void writeRequest(Headers headers,String requestLine) throws IOException {  if (state != STATE_IDLE)   throw new IllegalStateException("state: " + state);  sink.writeUtf8(requestLine).writeUtf8("\r\n");  for (int i=0, size=headers.size(); i < size; i++) {    sink.writeUtf8(headers.name(i)).writeUtf8(": ").writeUtf8(headers.value(i)).writeUtf8("\r\n");  }  sink.writeUtf8("\r\n");  state=STATE_OPEN_REQUEST_BODY;}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();}  }
class C{  public void load(Matrix2f src){  System.arraycopy(src.getArray(),0,mMat,0,mMat.length);}  }
class C{  public void checkOnEliminar(String[] ids) throws EliminacionActionNotAllowedException {  boolean borrables=true;  Collection eliminaciones=getEliminaciones(ids);  for (Iterator itEliminacion=eliminaciones.iterator(); itEliminacion.hasNext() && borrables; ) {    EliminacionSerieVO eliminacionVO=(EliminacionSerieVO)itEliminacion.next();    if (eliminacionVO.getEstado() == ValoracionConstants.ESTADO_ELIMINACION_ABIERTA || eliminacionVO.getEstado() == ValoracionConstants.ESTADO_ELIMINACION_RECHAZADA) {      borrables=true;    } else     borrables=false;  }  if (!borrables)   throw new EliminacionActionNotAllowedException(ArchivoErrorCodes.ERROR_ELIMINACION_NO_BORRABLE);}  }
class C{  public Vector2d add(Vector2fc v){  x+=v.x();  y+=v.y();  return this;}  }
class C{  public void removeDesignation(Object entity,URI type) throws RepositoryException {  removeDesignations(entity,type);}  }
class C{  public static MediaMangerImpl newInstance(){  return new MediaMangerImpl();}  }
class C{  public MatrixSizeException(String str){  super(str);}  }
class C{  public static int registerImage(RenderedImage img){synchronized (images) {    int key=counter;    counter++;    assert (images.get(key) == null);    images.put(key,new SoftReference<>(img));    if (counter % 50 == 49) {      for (TIntObjectIterator<SoftReference<RenderedImage>> iter=images.iterator(); iter.hasNext(); ) {        iter.advance();        if (iter.value() == null || iter.value().get() == null) {          iter.remove();        }      }    }    if (LOG.isDebuggingFiner()) {      LOG.debugFiner("Registered image: " + key);    }    return key;  }}  }
class C{  @SuppressWarnings("unchecked") public CacheLongKeyLIRS(Config config){  setMaxMemory(config.maxMemory);  this.nonResidentQueueSize=config.nonResidentQueueSize;  DataUtils.checkArgument(Integer.bitCount(config.segmentCount) == 1,"The segment count must be a power of 2, is {0}",config.segmentCount);  this.segmentCount=config.segmentCount;  this.segmentMask=segmentCount - 1;  this.stackMoveDistance=config.stackMoveDistance;  segments=new Segment[segmentCount];  clear();  this.segmentShift=32 - Integer.bitCount(segmentMask);}  }
class C{  public void run(){  while (true) {    try {      Thread.sleep(30);      for (      DefaultFuture future : FUTURES.values()) {        if (future == null || future.isDone()) {          continue;        }        if (System.currentTimeMillis() - future.getStartTimestamp() > future.getTimeout()) {          ChannelBuffer timeoutResponse=ChannelBuffers.dynamicBuffer(64);          TProtocol prot=TBaseTools.newProtocol(null,timeoutResponse);          byte type=future.isSent() ? T_SERVER_TIMEOUT : T_CLIENT_TIMEOUT;          TMessage tmessage=new TMessage(future.getMethod(),type,future.getId());          prot.writeMessageBegin(tmessage);          DefaultFuture.received(future.getChannel(),timeoutResponse);        }      }    } catch (    Throwable e) {      logger.error("Exception when scan the timeout invocation of remoting.",e);    }  }}  }
class C{  public static void writeJson(Serializable serializable,OutputStream output) throws IOException {  TransportFormat.JSON.writeSerializableTo(serializable,output);}  }
class C{  @RequestMapping(value="/posts/{postId:\\d+}/replies",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<ReplyDTO> updateReply(@Valid @RequestBody ReplyDTO replyDTO,@PathVariable Long postId) throws URISyntaxException {  log.debug("REST request to update Reply : {}",replyDTO);  if (replyDTO.getId() == null) {    return createReply(replyDTO,postId);  }  Reply reply=replyDTO.toReply();  Reply result=replyRepository.save(reply);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("reply",replyDTO.getId().toString())).body(new ReplyDTO(result));}  }
class C{  private static String lowPart(final String text){  final String sector;  final String[] sectors=MediaType.sectors(text);  if (sectors.length > 1) {    sector=sectors[1].trim();  } else {    sector="";  }  return sector;}  }
class C{  public Date toDate(String iso8601string) throws ParseException {  if (iso8601string == null) {    return null;  }  DateFormat df=new SimpleDateFormat(ISO8601);  df.setTimeZone(TimeZone.getTimeZone("UTC"));  int z=iso8601string.indexOf('Z');  if (z > 0) {    iso8601string=iso8601string.substring(0,z) + "+0000";  }  try {    Date date=df.parse(iso8601string);    return date;  } catch (  ParseException e) {    DateFormat dfshort=new SimpleDateFormat(ISO8601short);    dfshort.setTimeZone(TimeZone.getTimeZone("UTC"));    try {      return dfshort.parse(iso8601string);    } catch (    ParseException ee) {      DateFormat lastChance=new SimpleDateFormat(JavaDateToStringFormat);      lastChance.setTimeZone(TimeZone.getTimeZone("UTC"));      return lastChance.parse(iso8601string);    }  }}  }
class C{  public MetaData transformPassedThrough(MetaData md){  md.addToHistory(outputPort);  return md;}  }
class C{  protected PlanNode trySideBranch(PlanNode scan,TableGroupJoinNode leafTable,TableGroupJoinNode rootTable,TableSource indexTable,List<TableSource> ancestors){  boolean findRequired=!ancestors.isEmpty();  TableGroupJoinNode leafMostChild=leafTable;  TableGroupJoinNode leafMostParent=null;  while (leafMostChild != rootTable) {    TableGroupJoinNode parent=leafMostChild.getParent();    if (findRequired ? isRequired(parent) : isParent(parent)) {      leafMostParent=parent;      break;    }    leafMostChild=parent;  }  TableGroupJoinNode sideBranch=null;  if (leafMostParent != null) {    TableGroupJoinNode childParent=null;    for (TableGroupJoinNode table=leafMostParent.getFirstChild(); table != null; table=table.getNextSibling()) {      if (isRequired(table)) {        sideBranch=table;        break;      }      if (isParent(table)) {        childParent=table;      }    }    if (sideBranch == null)     sideBranch=childParent;  }  if (sideBranch == null)   return null;  List<TableSource> tables=new ArrayList<>();  if (!ancestors.isEmpty() || (leafMostChild.getTable().getTable() == sideBranch.getTable().getTable())) {    if (!ancestors.contains(leafMostParent.getTable()))     ancestors.add(leafMostParent.getTable());    scan=new AncestorLookup(scan,indexTable,ancestors);    scan=new BranchLookup(scan,leafMostParent.getTable().getTable(),sideBranch.getTable().getTable(),tables);  } else {    scan=new BranchLookup(scan,indexTable.getTable(),leafMostParent.getTable().getTable(),sideBranch.getTable().getTable(),tables);    if (!ancestors.isEmpty())     scan=new AncestorLookup(scan,sideBranch.getTable(),ancestors);  }  return fillBranch(scan,tables,sideBranch,rootTable,rootTable);}  }
class C{  public void testConnect() throws Exception {  IMqttAsyncClient mqttclient=null;  try {    mqttclient=new MqttAndroidClient(mContext,mqttServerURI,"testConnect");    IMqttToken connectToken=null;    IMqttToken disconnectToken=null;    connectToken=mqttclient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttclient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    connectToken=mqttclient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttclient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);  } catch (  Exception exception) {    fail("Failed: " + "testConnect" + " exception= "+ exception);  } finally {    if (mqttclient != null) {      mqttclient.close();    }  }}  }
class C{  @Override public void removeSessionInformation(String sessionId){}  }
class C{  public void stopShimmerAnimation(){  if (mAnimator != null) {    mAnimator.end();    mAnimator.removeAllUpdateListeners();    mAnimator.cancel();  }  mAnimator=null;  mAnimationStarted=false;}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,Collection<V> sources,Collection<V> sinks){  super(g);  Map<V,Double> unit_voltages=new HashMap<V,Double>();  for (  V v : sources)   unit_voltages.put(v,new Double(1.0));  this.source_voltages=unit_voltages;  this.sinks=sinks;  initialize();}  }
class C{  @ExceptionHandler(VersionException.class) @ResponseStatus(value=HttpStatus.CONFLICT) public Map<String,Object> handleVersionException(VersionException ex){  log.warn("VersionException:",ex);  return LemonUtil.mapOf("exception","VersionException","message",ex.getMessage());}  }
class C{  public CarouselItemView(Context context){  super(context);}  }
class C{  private JMXConnector connect(String host,int port){  try {    if (!isNodeAvailable(host)) {      log.info("Node({}) is unavailable",host);      throw new IllegalStateException("Node is unavailable");    }    log.debug("Connecting to JMX Server {}:{}",host,port);    String connectorAddress=String.format(serviceUrl,host,port);    JMXServiceURL jmxUrl=new JMXServiceURL(connectorAddress);    return JMXConnectorFactory.connect(jmxUrl);  } catch (  MalformedURLException e) {    log.error(String.format("Failed to construct jmx url for %s:%d",host,port),e);    throw new IllegalStateException("Failed to construct jmx url");  }catch (  IOException e) {    log.error(String.format("Failed to connect %s:%d",host,port),e);    throw new IllegalStateException("Failed to connect " + host);  }}  }
class C{  OSDirectory addChildFolder(String newCildFolderName,List<IDirectory> grandChilden){  List<IDirectory> children=this.getChildren();  OSDirectory result=(OSDirectory)findChildByRelPath(children,newCildFolderName);  if (result == null) {    File newChildFile=FileUtils.tryGetCanonicalFile(new File(mCurrent,newCildFolderName),null);    result=new OSDirectory(newChildFile,this,grandChilden);    if (result != null) {      children.add(result);    }  }  return result;}  }
class C{  private void sendRequest(){  int i=tabPane.getSelectedIndex();  String prompt=rb.getString("CS" + i + "PromptChar");  if (log.isDebugEnabled()) {    log.debug("send " + prompt + " for pane "+ i);  }  if (source == null) {    log.error("DataSource should not be null in sendRequest");    timer.stop();    return;  }  source.sendBytes(prompt.getBytes());}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public CubePortrayal3D(){  this(1f);}  }
class C{  public static Document jsoup2DOM(org.jsoup.nodes.Document jsoupDocument){  Document document=null;  try {    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();    document=docBuilder.newDocument();    Map<String,String> nsMap=new HashMap<String,String>();    createDOM(jsoupDocument,document,document,nsMap);  } catch (  ParserConfigurationException pce) {    throw new RuntimeException(pce);  }  return document;}  }
class C{  public ContentValues(int size){  mValues=new HashMap<String,Object>(size,1.0f);}  }
class C{  protected void paintLeftTabBorder(int tabIndex,Graphics g,int x,int y,int w,int h,int btm,int rght,boolean isSelected){  int tabCount=tabPane.getTabCount();  int currentRun=getRunForTab(tabCount,tabIndex);  int lastIndex=lastTabInRun(tabCount,currentRun);  int firstIndex=tabRuns[currentRun];  g.translate(x,y);  int bottom=h - 1;  int right=w - 1;  g.setColor(isSelected ? selectHighlight : highlight);  g.drawLine(1,6,6,1);  g.drawLine(6,1,right,1);  g.drawLine(1,6,1,bottom);  if (!isSelected)   g.drawLine(right - 1,0,right - 1,bottom);  g.setColor(darkShadow);  g.drawLine(1,5,6,0);  g.drawLine(6,0,right,0);  g.drawLine(0,6,0,bottom);  g.drawLine(0,bottom,right,bottom);  if (!isSelected)   g.drawLine(right,0,right,bottom);  g.translate(-x,-y);}  }
class C{  private td createSelectField(String m_columnName,option[] options){  select sel=new select(m_columnName,options);  sel.setID(m_columnName);  sel.setDisabled(false);  sel.setClass("Cmandatory");  return createTD(sel);}  }
class C{  protected void copy_zero_set(CoverTreeNode query_chi,MyHeap new_upper_k,Stack<d_node> zero_set,Stack<d_node> new_zero_set) throws Exception {  new_zero_set.clear();  d_node ele;  for (int i=0; i < zero_set.length; i++) {    ele=zero_set.element(i);    double upper_dist=new_upper_k.peek().distance + query_chi.max_dist;    if (shell(ele.dist,query_chi.parent_dist,upper_dist)) {      double d=Math.sqrt(m_DistanceFunction.distance(query_chi.p(),ele.n.p(),upper_dist * upper_dist));      if (m_TreeStats != null) {        m_TreeStats.incrPointCount();      }      if (d <= upper_dist) {        if (d < new_upper_k.peek().distance) {          update(new_upper_k,d);        }        d_node temp=new d_node(d,ele.n);        new_zero_set.push(temp);        if (m_TreeStats != null) {          m_TreeStats.incrLeafCount();        }      }    }  }}  }
class C{  public static PlaceHolderFragment newInstance(int sectionNumber){  PlaceHolderFragment fragment=new PlaceHolderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public BigInteger decrypt(BigInteger c){  BigInteger u=g.modPow(lambda,nSquared).subtract(BigInteger.ONE).divide(n).modInverse(n);  return c.modPow(lambda,nSquared).subtract(BigInteger.ONE).divide(n).multiply(u).mod(n);}  }
class C{  public static Enum<?> findMatchingEnumVal(Field field,String unknownEnumName){  if (unknownEnumName == null || unknownEnumName.length() == 0) {    return null;  }  for (  Enum<?> enumVal : (Enum<?>[])field.getType().getEnumConstants()) {    if (enumVal.name().equals(unknownEnumName)) {      return enumVal;    }  }  throw new IllegalArgumentException("Unknwown enum unknown name " + unknownEnumName + " for field "+ field);}  }
class C{  public static Angle axisAngle(Vec4 v1,Vec4 v2,Vec4[] result){  if (v1 == null || v2 == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (result == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 u1=v1.normalize3();  Vec4 u0=v2.normalize3();  Angle angle=Angle.fromRadians(Math.acos(u0.x * u1.x + u0.y * u1.y + u0.z * u1.z));  double A=(u0.y * u1.z) - (u0.z * u1.y);  double B=(u0.z * u1.x) - (u0.x * u1.z);  double C=(u0.x * u1.y) - (u0.y * u1.x);  double L=Math.sqrt(A * A + B * B + C * C);  result[0]=new Vec4(A / L,B / L,C / L);  return angle;}  }
class C{  public area addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  static int decodeRemainingLenght(ByteBuf in){  int multiplier=1;  int value=0;  byte digit;  do {    if (in.readableBytes() < 1) {      return -1;    }    digit=in.readByte();    value+=(digit & 0x7F) * multiplier;    multiplier*=128;  } while ((digit & 0x80) != 0);  return value;}  }
class C{  public long timestamp(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return timestamp;}  }
class C{  public static short[] toShortArray(double[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  private void fillSOMGroupFieldValues(){  tfAlpha.setText(Double.toString(((SOMGroup)som).getInitAlpha()));  tfInitNeighborhoodSize.setText(Double.toString(((SOMGroup)som).getInitNeighborhoodSize()));  tfAlphaDecayRate.setText(Double.toString(((SOMGroup)som).getAlphaDecayRate()));  tfNeigborhoodDecayAmount.setText(Double.toString(((SOMGroup)som).getNeighborhoodDecayAmount()));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z > minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public LiteralExtensionIV createIV(final Value value){  if (value instanceof Literal == false)   throw new IllegalArgumentException();  final Literal lit=(Literal)value;  final URI dt=lit.getDatatype();  if (dt == null)   throw new IllegalArgumentException();  final String dts=dt.stringValue();  BigdataURI resolvedDT=null;  for (  BigdataURI val : datatypes.values()) {    if (val.stringValue().equals(dts)) {      resolvedDT=val;    }  }  if (resolvedDT == null)   throw new IllegalArgumentException();  final String s=lit.getLabel();  final boolean valid;  if (dts.equals(XSD.POSITIVE_INTEGER.stringValue())) {    valid=XMLDatatypeUtil.isValidPositiveInteger(s);  } else   if (dts.equals(XSD.NEGATIVE_INTEGER.stringValue())) {    valid=XMLDatatypeUtil.isValidNegativeInteger(s);  } else   if (dts.equals(XSD.NON_POSITIVE_INTEGER.stringValue())) {    valid=XMLDatatypeUtil.isValidNonPositiveInteger(s);  } else   if (dts.equals(XSD.NON_NEGATIVE_INTEGER.stringValue())) {    valid=XMLDatatypeUtil.isValidNonNegativeInteger(s);  } else {    valid=false;  }  if (!valid) {    throw new RuntimeException("could not correctly parse label: " + s + " for datatype: "+ dts);  }  final BigInteger bi=XMLDatatypeUtil.parseInteger(s);  final AbstractLiteralIV delegate=new XSDIntegerIV(bi);  return new LiteralExtensionIV(delegate,resolvedDT.getIV());}  }
class C{  public static boolean is24HourFormat(Context context){  String value=Settings.System.getString(context.getContentResolver(),Settings.System.TIME_12_24);  if (value == null) {    Locale locale=context.getResources().getConfiguration().locale;synchronized (sLocaleLock) {      if (sIs24HourLocale != null && sIs24HourLocale.equals(locale)) {        return sIs24Hour;      }    }    java.text.DateFormat natural=java.text.DateFormat.getTimeInstance(java.text.DateFormat.LONG,locale);    if (natural instanceof SimpleDateFormat) {      SimpleDateFormat sdf=(SimpleDateFormat)natural;      String pattern=sdf.toPattern();      if (pattern.indexOf('H') >= 0) {        value="24";      } else {        value="12";      }    } else {      value="12";    }synchronized (sLocaleLock) {      sIs24HourLocale=locale;      sIs24Hour=value.equals("24");    }    return sIs24Hour;  }  return value.equals("24");}  }
class C{  public NibbleArray(byte... data){  this.data=data;}  }
class C{  public boolean addProperty(final String list,final String property,final String value){  boolean ret=false;  if (names.containsKey(list)) {    properties.get(names.get(list)).put(property,value);    ret=true;  }  return ret;}  }
class C{  protected int calculateNewCapacity(int proposedCapacity){  int newCapacity=1;  if (proposedCapacity > MAXIMUM_CAPACITY) {    newCapacity=MAXIMUM_CAPACITY;  } else {    while (newCapacity < proposedCapacity) {      newCapacity<<=1;    }    if (newCapacity > MAXIMUM_CAPACITY) {      newCapacity=MAXIMUM_CAPACITY;    }  }  return newCapacity;}  }
class C{  @SuppressWarnings("unchecked") private void applyToGroupAndSubGroups(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final GraphPatternGroup<IGroupMemberNode> group,final String name,final String value){  for (  IGroupMemberNode child : group) {    _applyQueryHint(context,queryRoot,scope,(ASTBase)child,name,value);    if (child instanceof GraphPatternGroup<?>) {      applyToGroupAndSubGroups(context,queryRoot,scope,(GraphPatternGroup<IGroupMemberNode>)child,name,value);    }  }  _applyQueryHint(context,queryRoot,scope,(ASTBase)group,name,value);}  }
class C{  protected List<double[]> categorize(){  int[] n=new int[numberOfGroups];  for (  Observation observation : data) {    n[observation.getGroup()]++;  }  List<double[]> groupedData=new ArrayList<double[]>();  for (int i=0; i < numberOfGroups; i++) {    groupedData.add(new double[n[i]]);  }  for (  Observation observation : data) {    int group=observation.getGroup();    n[group]--;    groupedData.get(group)[n[group]]=observation.getValue();  }  return groupedData;}  }
class C{  public void error(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.512 -0400",hash_original_method="9BAF96B4D9E8101BDDD78FF605269055",hash_generated_method="341BEB56629B11E0EB997F8D19E408F8") public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public boolean matchCombatType(CombatType type){  return this.combatType == CombatType.BOTH || type == this.combatType;}  }
class C{  private TestRun parseTestRun(Element runElement,File testFile,int runIndex) throws TestParseException {  File workspace=null;  if (runElement.getChild("workspace") != null) {    if (runElement.getChild("workspace").getAttribute("dir") == null) {      throw new TestParseException("Missing <dir> in <workspace>");    }    workspace=new File(runElement.getChild("workspace").getAttribute("dir").getValue().trim());    if (!workspace.exists()) {      throw new TestParseException("<workspace> does not exist: " + workspace);    }    if (!workspace.isDirectory()) {      throw new TestParseException("<workspace> is not a directory: " + workspace);    }  }  tolerance=parseTolerance(runElement);  Element descElement=runElement.getChild("desc");  geomOp=parseGeometryOperation(runElement);  resultMatcher=parseResultMatcher(runElement);  PrecisionModel precisionModel=parsePrecisionModel(runElement);  TestRun testRun=new TestRun(descElement != null ? descElement.getTextTrim() : "",runIndex,precisionModel,geomOp,resultMatcher,testFile);  testRun.setWorkspace(workspace);  List caseElements=runElement.getChildren("case");  if (caseElements.size() == 0) {    throw new TestParseException("Missing <case> in <run>");  }  for (Iterator i=parseTestCases(caseElements,testFile,testRun,tolerance).iterator(); i.hasNext(); ) {    TestCase testCase=(TestCase)i.next();    testRun.addTestCase(testCase);  }  return testRun;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mStep--;  canvas.drawCircle(x + SHAPE_WIDTH - mStep,y,mStep,paint);}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void print(char ch) throws IOException {  if (_startLine)   printIndent();  if (ch == '\r') {    _destLine++;  } else   if (ch == '\n' && !_lastCr)   _destLine++;  _lastCr=ch == '\r';  _os.print(ch);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int numTables(){  return this.tables.size();}  }
class C{  private void invalidateAnchorPositions(){  this.setStartPosition(this.startAnchor.getAttachmentPoint());  this.setEndPosition(this.endAnchor.getAttachmentPoint());}  }
class C{  public boolean skipWriteIfEmpty(){  return false;}  }
class C{  @Override public char next(){  ++docPos;  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {    return text.next();  }  try {    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);  } catch (  BadLocationException e) {    throw new RuntimeException(e);  }  segmentEnd+=text.count;  return text.current();}  }
class C{  void handleResponse(ByteBuf response){  long requestId=response.readLong();  byte status=response.readByte();switch (status) {case SUCCESS:    try {      handleResponseSuccess(requestId,readResponse(response));    } catch (    SerializationException e) {      handleResponseFailure(requestId,e);    }  break;case FAILURE:try {  handleResponseFailure(requestId,readError(response));} catch (SerializationException e) {  handleResponseFailure(requestId,e);}break;}response.release();}  }
class C{  public Action<T> whenPermissionsGranted(PermissionsGrantedListener listener){  this.permissionsGrantedRef=new WeakReference<>(listener);  return this;}  }
class C{  static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  @Override public void executeHQL(String[] hqls) throws CommandNeedRetryException, IOException {  for (  String sql : hqls)   executeHQL(sql);}  }
class C{  private void updateOffsetViewWidth(){  final int addressBytes=m_addressMode == AddressMode.BIT32 ? 8 : 16;  m_offsetViewWidth=PADDING_OFFSETVIEW + (m_charWidth * addressBytes);}  }
class C{  public ReactionPropertyItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public JobStateReasons(int initialCapacity){  super(initialCapacity);}  }
class C{  protected int expandCluster(final DBIDRef seed,final int clusterid,final WritableIntegerDataStore clusterids,final T neighbors,ArrayModifiableDBIDs activeSet,final FiniteProgress progress){  assert (activeSet.size() == 0);  int clustersize=1 + processCorePoint(seed,neighbors,clusterid,clusterids,activeSet);  final DBIDVar id=DBIDUtil.newVar();  while (!activeSet.isEmpty()) {    activeSet.pop(id);    final T newneighbors=npred.getNeighbors(id);    if (corepred.isCorePoint(id,newneighbors)) {      clustersize+=processCorePoint(id,newneighbors,clusterid,clusterids,activeSet);    }    LOG.incrementProcessed(progress);  }  return clustersize;}  }
class C{  public long num_threads(){  return Long.parseLong(fields[19]);}  }
class C{  public static byte[] bitmapToByte(Bitmap bitmap){  if (bitmap == null) {    return null;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,100,baos);  return baos.toByteArray();}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object params[]){  throw new RuntimeException();}  }
class C{  @CanIgnoreReturnValue public E removeFirst(){  return remove();}  }
class C{  protected SimbrainJTable(SimbrainDataTable dataModel){  data=dataModel;  this.setModel(data);}  }
class C{  public final void reset(){  this.voxelId=SnipeData.DEFAULT_VOXEL_ID;  this.replaceId=SnipeData.DEFAULT_REPLACE_ID;  this.data=SnipeData.DEFAULT_DATA_VALUE;  this.brushSize=SnipeData.DEFAULT_BRUSH_SIZE;  this.voxelHeight=SnipeData.DEFAULT_VOXEL_HEIGHT;  this.cCen=SnipeData.DEFAULT_CYLINDER_CENTER;  this.replaceData=SnipeData.DEFAULT_REPLACE_DATA_VALUE;  this.voxelList=new VoxelList();}  }
class C{  public boolean isModal(){  return mModal;}  }
class C{  public static void throwException(Throwable t){  UNSAFE.throwException(t);}  }
class C{  public void endElement(String elemName) throws SAXException {  if (m_tracer != null)   super.fireEndElem(elemName);}  }
class C{  public FuzzyCondition transpositions(Boolean transpositions){  this.transpositions=transpositions;  return this;}  }
class C{  private MouseInputListener createWindowMouseInputListener(JRootPane root){  return new MouseInputHandler();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.173 -0500",hash_original_method="5C41D3987D5608A9FF91B81AF91F1E3A",hash_generated_method="69F31347E4784F980B23BB6EF0D1744C") public synchronized void onResume(Activity activity){  NfcActivityState state=mNfcState.get(activity);  if (DBG)   Log.d(TAG,"onResume() for " + activity + " "+ state);  if (state != null) {    state.resumed=true;    updateNfcService(state);  }}  }
class C{  @Override public void encodeAll(FacesContext context) throws IOException {}  }
class C{  public Island(){  super();}  }
class C{  public DotSpan(){  this.radius=DEFAULT_RADIUS;  this.color=0;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public HttpsURL(final String userinfo,final String host,final int port,final String path,final String query) throws URIException {  this(userinfo,host,port,path,query,null);}  }
class C{  public static Predicate<String> empty(){  return null;}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public long numEvents(){  return cqQuery.getVsdStats().getNumEvents();}  }
class C{  public SWFShape tagDefineShape(int id,Rect outline) throws IOException {  if (tags != null) {    return tags.tagDefineShape(id,outline);  }  return null;}  }
class C{  public final static String formatRequestLine(final RequestLine reqline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatRequestLine(null,reqline).toString();}  }
class C{  public void disconnect(final IProject[] projects,final boolean disconnectServer){  Check.notNull(projects,"projects");  waitForManagerStartup();  ((ProjectRepositoryManagerListener)listeners.getListener()).onOperationStarted();  for (int i=0; i < projects.length; i++) {    disconnect(projects[i],disconnectServer);  }  ((ProjectRepositoryManagerListener)listeners.getListener()).onOperationFinished();}  }
class C{  public void stay(){  r+=HugLifeUtils.randomInt(-colorShift,colorShift);  r=Math.min(r,255);  r=Math.max(r,0);}  }
class C{  public static void installKeybindings(UIDefaults table){  UIDefaults.LazyInputMap buttonFocusInputMap=new UIDefaults.LazyInputMap(new Object[]{"SPACE","pressed","released SPACE","released"});  UIDefaults.LazyInputMap fieldInputMap=new UIDefaults.LazyInputMap(new String[]{"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"meta X",DefaultEditorKit.cutAction,"meta C",DefaultEditorKit.copyAction,"meta V",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"RIGHT",DefaultEditorKit.forwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"UP",DefaultEditorKit.upAction,"KP_UP",DefaultEditorKit.upAction,"DOWN",DefaultEditorKit.downAction,"KP_DOWN",DefaultEditorKit.downAction,"shift UP",DefaultEditorKit.selectionUpAction,"shift KP_UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"shift KP_DOWN",DefaultEditorKit.selectionDownAction,"alt LEFT",DefaultEditorKit.previousWordAction,"alt KP_LEFT",DefaultEditorKit.previousWordAction,"alt RIGHT",DefaultEditorKit.nextWordAction,"alt KP_RIGHT",DefaultEditorKit.nextWordAction,"alt shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift RIGHT",DefaultEditorKit.selectionNextWordAction,"alt shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"alt UP",DefaultEditorKit.beginLineAction,"alt KP_UP",DefaultEditorKit.beginLineAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"ctrl KP_LEFT",DefaultEditorKit.beginLineAction,"meta LEFT",DefaultEditorKit.beginLineAction,"meta KP_LEFT",DefaultEditorKit.beginLineAction,"alt DOWN",DefaultEditorKit.endLineAction,"alt KP_DOWN",DefaultEditorKit.endLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"ctrl KP_RIGHT",DefaultEditorKit.endLineAction,"meta RIGHT",DefaultEditorKit.endLineAction,"meta KP_RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"HOME",DefaultEditorKit.beginAction,"END",DefaultEditorKit.endAction,"meta UP",DefaultEditorKit.beginAction,"meta KP_UP",DefaultEditorKit.beginAction,"meta DOWN",DefaultEditorKit.endAction,"meta KP_DOWN",DefaultEditorKit.endAction,"shift HOME",DefaultEditorKit.selectionBeginAction,"shift END",DefaultEditorKit.selectionEndAction,"meta A",DefaultEditorKit.selectAllAction,"meta shift A","unselect","controlBackground shift O","toggle-componentOrientation","alt DELETE",MacEditorKit.deleteNextWordAction,"alt BACK_SPACE",MacEditorKit.deletePrevWordAction,"ENTER",JTextField.notifyAction});  UIDefaults.LazyInputMap passwordFieldInputMap=new UIDefaults.LazyInputMap(new String[]{"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"meta X",DefaultEditorKit.beepAction,"meta C",DefaultEditorKit.beepAction,"meta V",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.beepAction,"COPY",DefaultEditorKit.beepAction,"PASTE",DefaultEditorKit.pasteAction,"RIGHT",DefaultEditorKit.forwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"UP",DefaultEditorKit.upAction,"KP_UP",DefaultEditorKit.upAction,"DOWN",DefaultEditorKit.downAction,"KP_DOWN",DefaultEditorKit.downAction,"shift UP",DefaultEditorKit.selectionUpAction,"shift KP_UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"shift KP_DOWN",DefaultEditorKit.selectionDownAction,"alt LEFT",DefaultEditorKit.previousWordAction,"alt KP_LEFT",DefaultEditorKit.previousWordAction,"alt RIGHT",DefaultEditorKit.nextWordAction,"alt KP_RIGHT",DefaultEditorKit.nextWordAction,"alt shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift RIGHT",DefaultEditorKit.selectionNextWordAction,"alt shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"alt UP",DefaultEditorKit.beginLineAction,"alt KP_UP",DefaultEditorKit.beginLineAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"ctrl KP_LEFT",DefaultEditorKit.beginLineAction,"meta LEFT",DefaultEditorKit.beginLineAction,"meta KP_LEFT",DefaultEditorKit.beginLineAction,"alt DOWN",DefaultEditorKit.endLineAction,"alt KP_DOWN",DefaultEditorKit.endLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"ctrl KP_RIGHT",DefaultEditorKit.endLineAction,"meta RIGHT",DefaultEditorKit.endLineAction,"meta KP_RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"HOME",DefaultEditorKit.beginAction,"END",DefaultEditorKit.endAction,"meta UP",DefaultEditorKit.beginAction,"meta KP_UP",DefaultEditorKit.beginAction,"meta DOWN",DefaultEditorKit.endAction,"meta KP_DOWN",DefaultEditorKit.endAction,"shift HOME",DefaultEditorKit.selectionBeginAction,"shift END",DefaultEditorKit.selectionEndAction,"meta A",DefaultEditorKit.selectAllAction,"meta shift A","unselect","controlBackground shift O","toggle-componentOrientation","alt DELETE",MacEditorKit.deleteNextWordAction,"alt BACK_SPACE",MacEditorKit.deletePrevWordAction,"ENTER",JTextField.notifyAction});  UIDefaults.LazyInputMap spinnerInputMap=new UIDefaults.LazyInputMap(new String[]{"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"meta X",DefaultEditorKit.cutAction,"meta C",DefaultEditorKit.copyAction,"meta V",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"RIGHT",DefaultEditorKit.forwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement","shift UP",DefaultEditorKit.selectionUpAction,"shift KP_UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"shift KP_DOWN",DefaultEditorKit.selectionDownAction,"alt LEFT",DefaultEditorKit.previousWordAction,"alt KP_LEFT",DefaultEditorKit.previousWordAction,"alt RIGHT",DefaultEditorKit.nextWordAction,"alt KP_RIGHT",DefaultEditorKit.nextWordAction,"alt shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift RIGHT",DefaultEditorKit.selectionNextWordAction,"alt shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"alt UP",DefaultEditorKit.beginLineAction,"alt KP_UP",DefaultEditorKit.beginLineAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"ctrl KP_LEFT",DefaultEditorKit.beginLineAction,"meta LEFT",DefaultEditorKit.beginLineAction,"meta KP_LEFT",DefaultEditorKit.beginLineAction,"alt DOWN",DefaultEditorKit.endLineAction,"alt KP_DOWN",DefaultEditorKit.endLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"ctrl KP_RIGHT",DefaultEditorKit.endLineAction,"meta RIGHT",DefaultEditorKit.endLineAction,"meta KP_RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"HOME",DefaultEditorKit.beginAction,"END",DefaultEditorKit.endAction,"meta UP",DefaultEditorKit.beginAction,"meta KP_UP",DefaultEditorKit.beginAction,"meta DOWN",DefaultEditorKit.endAction,"meta KP_DOWN",DefaultEditorKit.endAction,"shift HOME",DefaultEditorKit.selectionBeginAction,"shift END",DefaultEditorKit.selectionEndAction,"meta A",DefaultEditorKit.selectAllAction,"meta shift A","unselect","controlBackground shift O","toggle-componentOrientation","alt DELETE",MacEditorKit.deleteNextWordAction,"alt BACK_SPACE",MacEditorKit.deletePrevWordAction,"ENTER",JTextField.notifyAction});  UIDefaults.LazyInputMap multilineInputMap=new UIDefaults.LazyInputMap(new String[]{"shift ENTER",DefaultEditorKit.insertBreakAction,"alt ENTER",DefaultEditorKit.insertBreakAction,"ENTER",DefaultEditorKit.insertBreakAction,"TAB",DefaultEditorKit.insertTabAction,"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"meta X",DefaultEditorKit.cutAction,"meta C",DefaultEditorKit.copyAction,"meta V",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"PAGE_UP",DefaultEditorKit.pageUpAction,"PAGE_DOWN",DefaultEditorKit.pageDownAction,"shift PAGE_UP","selection-page-up","shift PAGE_DOWN","selection-page-down","ctrl shift PAGE_UP","selection-page-left","ctrl shift PAGE_DOWN","selection-page-right","RIGHT",DefaultEditorKit.forwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"UP",DefaultEditorKit.upAction,"KP_UP",DefaultEditorKit.upAction,"DOWN",DefaultEditorKit.downAction,"KP_DOWN",DefaultEditorKit.downAction,"shift UP",DefaultEditorKit.selectionUpAction,"shift KP_UP",DefaultEditorKit.selectionUpAction,"shift DOWN",DefaultEditorKit.selectionDownAction,"shift KP_DOWN",DefaultEditorKit.selectionDownAction,"alt LEFT",DefaultEditorKit.previousWordAction,"alt KP_LEFT",DefaultEditorKit.previousWordAction,"alt RIGHT",DefaultEditorKit.nextWordAction,"alt KP_RIGHT",DefaultEditorKit.nextWordAction,"alt shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift RIGHT",DefaultEditorKit.selectionNextWordAction,"alt shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"alt UP",DefaultEditorKit.beginLineAction,"alt KP_UP",DefaultEditorKit.beginLineAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"ctrl KP_LEFT",DefaultEditorKit.beginLineAction,"meta LEFT",DefaultEditorKit.beginLineAction,"meta KP_LEFT",DefaultEditorKit.beginLineAction,"alt DOWN",DefaultEditorKit.endLineAction,"alt KP_DOWN",DefaultEditorKit.endLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"ctrl KP_RIGHT",DefaultEditorKit.endLineAction,"meta RIGHT",DefaultEditorKit.endLineAction,"meta KP_RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift KP_LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"ctrl shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift KP_RIGHT",DefaultEditorKit.selectionEndLineAction,"HOME",DefaultEditorKit.beginAction,"END",DefaultEditorKit.endAction,"meta UP",DefaultEditorKit.beginAction,"meta KP_UP",DefaultEditorKit.beginAction,"meta DOWN",DefaultEditorKit.endAction,"meta KP_DOWN",DefaultEditorKit.endAction,"shift HOME",DefaultEditorKit.selectionBeginAction,"shift END",DefaultEditorKit.selectionEndAction,"meta A",DefaultEditorKit.selectAllAction,"meta shift A","unselect","controlBackground shift O","toggle-componentOrientation","alt DELETE",MacEditorKit.deleteNextWordAction,"alt BACK_SPACE",MacEditorKit.deletePrevWordAction});  UIDefaults.LazyInputMap comboEditorInputMap=new UIDefaults.LazyInputMap(new String[]{"BACK_SPACE",DefaultEditorKit.deletePrevCharAction,"DELETE",DefaultEditorKit.deleteNextCharAction,"meta X",DefaultEditorKit.cutAction,"meta C",DefaultEditorKit.copyAction,"meta V",DefaultEditorKit.pasteAction,"CUT",DefaultEditorKit.cutAction,"COPY",DefaultEditorKit.copyAction,"PASTE",DefaultEditorKit.pasteAction,"RIGHT",DefaultEditorKit.forwardAction,"KP_RIGHT",DefaultEditorKit.forwardAction,"LEFT",DefaultEditorKit.backwardAction,"KP_LEFT",DefaultEditorKit.backwardAction,"shift RIGHT",DefaultEditorKit.selectionForwardAction,"shift KP_RIGHT",DefaultEditorKit.selectionForwardAction,"shift LEFT",DefaultEditorKit.selectionBackwardAction,"shift KP_LEFT",DefaultEditorKit.selectionBackwardAction,"alt LEFT",DefaultEditorKit.previousWordAction,"alt KP_LEFT",DefaultEditorKit.previousWordAction,"alt RIGHT",DefaultEditorKit.nextWordAction,"alt KP_RIGHT",DefaultEditorKit.nextWordAction,"alt shift LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift KP_LEFT",DefaultEditorKit.selectionPreviousWordAction,"alt shift RIGHT",DefaultEditorKit.selectionNextWordAction,"alt shift KP_RIGHT",DefaultEditorKit.selectionNextWordAction,"ctrl LEFT",DefaultEditorKit.beginLineAction,"meta LEFT",DefaultEditorKit.beginLineAction,"ctrl RIGHT",DefaultEditorKit.endLineAction,"meta RIGHT",DefaultEditorKit.endLineAction,"ctrl shift LEFT",DefaultEditorKit.selectionBeginLineAction,"meta shift LEFT",DefaultEditorKit.selectionBeginLineAction,"ctrl shift RIGHT",DefaultEditorKit.selectionEndLineAction,"meta shift RIGHT",DefaultEditorKit.selectionEndLineAction,"shift HOME",DefaultEditorKit.selectionBeginAction,"shift END",DefaultEditorKit.selectionEndAction,"meta A",DefaultEditorKit.selectAllAction,"meta shift A","unselect","controlBackground shift O","toggle-componentOrientation","alt DELETE",MacEditorKit.deleteNextWordAction,"alt BACK_SPACE",MacEditorKit.deletePrevWordAction,"ENTER",JTextField.notifyAction});  UIDefaults.LazyInputMap tabbedPaneFocusInputMap=new UIDefaults.LazyInputMap(new Object[]{"RIGHT","navigateRight","KP_RIGHT","navigateRight","LEFT","navigateLeft","KP_LEFT","navigateLeft","UP","navigateUp","KP_UP","navigateUp","DOWN","navigateDown","KP_DOWN","navigateDown","ctrl DOWN","requestFocusForVisibleComponent","ctrl KP_DOWN","requestFocusForVisibleComponent"});  UIDefaults.LazyInputMap tabbedPaneAncestorInputMap=new UIDefaults.LazyInputMap(new Object[]{"ctrl PAGE_DOWN","navigatePageDown","ctrl PAGE_UP","navigatePageUp","ctrl UP","requestFocus","ctrl KP_UP","requestFocus"});  UIDefaults.LazyInputMap tableAncestorInputMap=new UIDefaults.LazyInputMap(new Object[]{"meta C","copy","meta V","paste","meta X","cut","COPY","copy","PASTE","paste","CUT","cut","RIGHT","selectNextColumn","KP_RIGHT","selectNextColumn","shift RIGHT","selectNextColumnExtendSelection","shift KP_RIGHT","selectNextColumnExtendSelection","ctrl shift RIGHT","selectNextColumnExtendSelection","ctrl shift KP_RIGHT","selectNextColumnExtendSelection","ctrl RIGHT","selectNextColumnChangeLead","ctrl KP_RIGHT","selectNextColumnChangeLead","LEFT","selectPreviousColumn","KP_LEFT","selectPreviousColumn","shift LEFT","selectPreviousColumnExtendSelection","shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl shift LEFT","selectPreviousColumnExtendSelection","ctrl shift KP_LEFT","selectPreviousColumnExtendSelection","ctrl LEFT","selectPreviousColumnChangeLead","ctrl KP_LEFT","selectPreviousColumnChangeLead","DOWN","selectNextRow","KP_DOWN","selectNextRow","shift DOWN","selectNextRowExtendSelection","shift KP_DOWN","selectNextRowExtendSelection","ctrl shift DOWN","selectNextRowExtendSelection","ctrl shift KP_DOWN","selectNextRowExtendSelection","ctrl DOWN","selectNextRowChangeLead","ctrl KP_DOWN","selectNextRowChangeLead","UP","selectPreviousRow","KP_UP","selectPreviousRow","shift UP","selectPreviousRowExtendSelection","shift KP_UP","selectPreviousRowExtendSelection","ctrl shift UP","selectPreviousRowExtendSelection","ctrl shift KP_UP","selectPreviousRowExtendSelection","ctrl UP","selectPreviousRowChangeLead","ctrl KP_UP","selectPreviousRowChangeLead","HOME","selectFirstColumn","shift HOME","selectFirstColumnExtendSelection","ctrl shift HOME","selectFirstRowExtendSelection","ctrl HOME","selectFirstRow","END","selectLastColumn","shift END","selectLastColumnExtendSelection","ctrl shift END","selectLastRowExtendSelection","ctrl END","selectLastRow","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","ctrl shift PAGE_UP","scrollLeftExtendSelection","ctrl PAGE_UP","scrollLeftChangeSelection","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","ctrl shift PAGE_DOWN","scrollRightExtendSelection","ctrl PAGE_DOWN","scrollRightChangeSelection","TAB","selectNextColumnCell","shift TAB","selectPreviousColumnCell","ENTER","selectNextRowCell","shift ENTER","selectPreviousRowCell","meta A","selectAll","ctrl SLASH","selectAll","ctrl BACK_SLASH","clearSelection","ESCAPE","cancel","F2","startEditing","SPACE","addToSelection","ctrl SPACE","toggleAndAnchor","shift SPACE","extendTo","ctrl shift SPACE","moveSelectionTo"});  UIDefaults.LazyInputMap tableAncestorInputMapRightToLeft=new UIDefaults.LazyInputMap(new Object[]{"RIGHT","selectPreviousColumn","KP_RIGHT","selectPreviousColumn","shift RIGHT","selectPreviousColumnExtendSelection","shift KP_RIGHT","selectPreviousColumnExtendSelection","ctrl shift RIGHT","selectPreviousColumnExtendSelection","ctrl shift KP_RIGHT","selectPreviousColumnExtendSelection","shift RIGHT","selectPreviousColumnChangeLead","shift KP_RIGHT","selectPreviousColumnChangeLead","LEFT","selectNextColumn","KP_LEFT","selectNextColumn","shift LEFT","selectNextColumnExtendSelection","shift KP_LEFT","selectNextColumnExtendSelection","ctrl shift LEFT","selectNextColumnExtendSelection","ctrl shift KP_LEFT","selectNextColumnExtendSelection","ctrl LEFT","selectNextColumnChangeLead","ctrl KP_LEFT","selectNextColumnChangeLead","ctrl PAGE_UP","scrollRightChangeSelection","ctrl PAGE_DOWN","scrollLeftChangeSelection","ctrl shift PAGE_UP","scrollRightExtendSelection","ctrl shift PAGE_DOWN","scrollLeftExtendSelection"});  UIDefaults.LazyInputMap comboBoxAncestorInputMap=new UIDefaults.LazyInputMap(new Object[]{"ESCAPE","hidePopup","PAGE_UP","pageUpPassThrough","PAGE_DOWN","pageDownPassThrough","HOME","homePassThrough","END","endPassThrough","DOWN","selectNext","KP_DOWN","selectNext","alt DOWN","togglePopup","alt KP_DOWN","togglePopup","alt UP","togglePopup","alt KP_UP","togglePopup","SPACE","spacePopup","ENTER","enterPressed","UP","selectPrevious","KP_UP","selectPrevious"});  Object[] rootPaneDefaultButtonWindowKeyBindings=new Object[]{"ENTER","press","released ENTER","release","ctrl ENTER","press","ctrl released ENTER","release"};  UIDefaults.LazyInputMap spinnerAncestorInputMap=new UIDefaults.LazyInputMap(new Object[]{"UP","increment","KP_UP","increment","DOWN","decrement","KP_DOWN","decrement"});  UIDefaults.LazyInputMap treeFocusInputMap=new UIDefaults.LazyInputMap(new Object[]{"meta C","copy","meta V","paste","meta X","cut","COPY","copy","PASTE","paste","CUT","cut","UP","selectPrevious","KP_UP","selectPrevious","shift UP","selectPreviousExtendSelection","shift KP_UP","selectPreviousExtendSelection","DOWN","selectNext","KP_DOWN","selectNext","shift DOWN","selectNextExtendSelection","shift KP_DOWN","selectNextExtendSelection","RIGHT","selectChild","KP_RIGHT","selectChild","LEFT","selectParent","KP_LEFT","selectParent","PAGE_UP","scrollUpChangeSelection","shift PAGE_UP","scrollUpExtendSelection","PAGE_DOWN","scrollDownChangeSelection","shift PAGE_DOWN","scrollDownExtendSelection","HOME","selectFirst","alt UP","selectFirst","shift HOME","selectFirstExtendSelection","END","selectLast","alt DOWN","selectLast","shift END","selectLastExtendSelection","F2","startEditing","meta A","selectAll","meta shift A","clearSelection","ctrl SPACE","toggleSelectionPreserveAnchor","shift SPACE","extendSelection","ctrl HOME","selectFirstChangeLead","ctrl END","selectLastChangeLead","ctrl UP","selectPreviousChangeLead","ctrl KP_UP","selectPreviousChangeLead","ctrl DOWN","selectNextChangeLead","ctrl KP_DOWN","selectNextChangeLead","ctrl PAGE_DOWN","scrollDownChangeLead","ctrl shift PAGE_DOWN","scrollDownExtendSelection","ctrl PAGE_UP","scrollUpChangeLead","ctrl shift PAGE_UP","scrollUpExtendSelection","ctrl LEFT","scrollLeft","ctrl KP_LEFT","scrollLeft","ctrl RIGHT","scrollRight","ctrl KP_RIGHT","scrollRight","SPACE","toggleSelectionPreserveAnchor"});  Object[] defaults={"Button.focusInputMap",buttonFocusInputMap,"CheckBox.focusInputMap",buttonFocusInputMap,"ComboBox.ancestorInputMap",comboBoxAncestorInputMap,"ComboBox.editorInputMap",comboEditorInputMap,"EditorPane.focusInputMap",multilineInputMap,"FormattedTextField.focusInputMap",fieldInputMap,"FormattedTextField.keyBindings",null,"PasswordField.focusInputMap",passwordFieldInputMap,"PasswordField.keyBindings",null,"RadioButton.focusInputMap",buttonFocusInputMap,"RootPane.defaultButtonWindowKeyBindings",rootPaneDefaultButtonWindowKeyBindings,"Spinner.ancestorInputMap",spinnerAncestorInputMap,"Spinner.focusInputMap",spinnerInputMap,"TabbedPane.focusInputMap",tabbedPaneFocusInputMap,"TabbedPane.ancestorInputMap",tabbedPaneAncestorInputMap,"TabbedPane.actionMap",table.get("TabbedPane.actionMap"),"TabbedPane.wrap.focusInputMap",tabbedPaneFocusInputMap,"TabbedPane.wrap.ancestorInputMap",tabbedPaneAncestorInputMap,"TabbedPane.wrap.actionMap",table.get("TabbedPane.actionMap"),"TabbedPane.scroll.focusInputMap",tabbedPaneFocusInputMap,"TabbedPane.scroll.ancestorInputMap",tabbedPaneAncestorInputMap,"TabbedPane.scroll.actionMap",table.get("TabbedPane.actionMap"),"Table.ancestorInputMap",tableAncestorInputMap,"Table.ancestorInputMap.rightToLeft",tableAncestorInputMapRightToLeft,"TextArea.focusInputMap",multilineInputMap,"TextArea.keyBindings",null,"TextField.focusInputMap",fieldInputMap,"TextField.keyBindings",null,"TextPane.focusInputMap",multilineInputMap,"TextPane.keyBindings",null,"ToggleButton.focusInputMap",buttonFocusInputMap,"Tree.focusInputMap",treeFocusInputMap};  table.putDefaults(defaults);}  }
class C{  @Override public int compareTo(Value o){  if (o instanceof StringVal) {    return str.compareTo(((StringVal)o).str);  } else {    return 0;  }}  }
class C{  public void initInBuffer(int hashCode){  inHashCode=hashCode;  inStream=new ByteArrayOutputStream();}  }
class C{  @Override public final byte[] convertIndexToRGB(final byte[] index){  isConverted=true;  return convert4Index(index);}  }
class C{  public boolean supportsUnionAll() throws SQLException {  return true;}  }
class C{  public static Integer convertMillisToSeconds(Long millis){  return Long.valueOf(millis / 1000).intValue();}  }
class C{  public CoordinateDMS roundMinutes(){  final int roundMinutesNorth=(tenthsOfSecondsNorth > 300 ? minutesNorth + 1 : (tenthsOfSecondsNorth < -300 ? minutesNorth - 1 : minutesNorth));  final int roundMinutesEast=(tenthsOfSecondsEast > 300 ? minutesEast + 1 : (tenthsOfSecondsEast < -300 ? minutesEast - 1 : minutesEast));  return new CoordinateDMS(degreesNorth,roundMinutesNorth,0,degreesEast,roundMinutesEast,0);}  }
class C{  @Override public void clear(){  super.clear();  double[] keys=_set;  long[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public SegmentRange(long fromMillisecond,long toMillisecond){  Segment start=getSegment(fromMillisecond);  Segment end=getSegment(toMillisecond);  this.millisecond=fromMillisecond;  this.segmentNumber=calculateSegmentNumber(fromMillisecond);  this.segmentStart=start.segmentStart;  this.segmentEnd=end.segmentEnd;  this.segmentCount=(end.getSegmentNumber() - start.getSegmentNumber() + 1);}  }
class C{  public void readMenuItem(AttributeSet attrs,String tagName){  itemType=getItemType(tagName);  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SublimeMenuGenericItem);  itemId=a.getResourceId(R.styleable.SublimeMenuGenericItem_android_id,defaultItemId);  itemTitle=a.getText(R.styleable.SublimeMenuGenericItem_android_title);  itemHint=a.getText(R.styleable.SublimeMenuGenericItem_android_hint);  itemIconResId=a.getResourceId(R.styleable.SublimeMenuGenericItem_android_icon,0);  itemCheckable=a.getBoolean(R.styleable.SublimeMenuGenericItem_android_checkable,(groupCheckableBehavior != SublimeGroup.CheckableBehavior.NONE));  itemChecked=a.getBoolean(R.styleable.SublimeMenuGenericItem_android_checked,defaultItemChecked);  itemVisible=a.getBoolean(R.styleable.SublimeMenuGenericItem_android_visible,groupVisible);  itemEnabled=a.getBoolean(R.styleable.SublimeMenuGenericItem_android_enabled,groupEnabled);  itemShowIconSpace=a.getBoolean(R.styleable.SublimeMenuGenericItem_showIconSpace,itemIconResId != 0);  valueProvidedAsync=a.getBoolean(R.styleable.SublimeMenuGenericItem_valueProvidedAsync,false);  itemBadgeText=a.getText(R.styleable.SublimeMenuGenericItem_badgeText);  a.recycle();  itemAdded=false;}  }
class C{  public boolean checkExists(TriggerKey triggerKey) throws SchedulerException {  try {    return getRemoteScheduler().checkExists(triggerKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  @Override public void stopReplication(){  logger.trace("stopReplication()");  storageManagerLock.writeLock().lock();  try {    if (replicator == null)     return;    bindingsJournal=originalBindingsJournal;    messageJournal=originalMessageJournal;    try {      replicator.stop();    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.errorStoppingReplicationManager(e);    }    replicator=null;    performCachedLargeMessageDeletes();  }  finally {    storageManagerLock.writeLock().unlock();  }}  }
class C{  void trackMotionScroll(float deltaAngle){  if (getChildCount() == 0) {    return;  }  for (int i=0; i < getAdapter().getCount(); i++) {    CarouselItem child=(CarouselItem)getAdapter().getView(i,null,null);    float angle=child.getCurrentAngle();    angle+=deltaAngle;    while (angle > 360.0f)     angle-=360.0f;    while (angle < 0.0f)     angle+=360.0f;    child.setCurrentAngle(angle);    Calculate3DPosition(child,getWidth(),angle);  }  mRecycler.clear();  invalidate();}  }
class C{  void storeStratum(String stratumId){  if (stratumIndex > 0) {    if ((stratumTable[stratumIndex - 1].fileIndex == fileIndex) && (stratumTable[stratumIndex - 1].lineIndex == lineIndex)) {      --stratumIndex;    }  }  assureStratumTableSize();  stratumTable[stratumIndex].id=stratumId;  stratumTable[stratumIndex].fileIndex=fileIndex;  stratumTable[stratumIndex].lineIndex=lineIndex;  ++stratumIndex;  currentFileId=0;}  }
class C{  void init(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  decrypting=(opmode == Cipher.DECRYPT_MODE) || (opmode == Cipher.UNWRAP_MODE);  byte[] keyBytes=getKeyBytes(key);  int tagLen=-1;  byte[] ivBytes=null;  if (params != null) {    if (cipherMode == GCM_MODE) {      if (params instanceof GCMParameterSpec) {        tagLen=((GCMParameterSpec)params).getTLen();        if (tagLen < 96 || tagLen > 128 || ((tagLen & 0x07) != 0)) {          throw new InvalidAlgorithmParameterException("Unsupported TLen value; must be one of " + "{128, 120, 112, 104, 96}");        }        tagLen=tagLen >> 3;        ivBytes=((GCMParameterSpec)params).getIV();      } else {        throw new InvalidAlgorithmParameterException("Unsupported parameter: " + params);      }    } else {      if (params instanceof IvParameterSpec) {        ivBytes=((IvParameterSpec)params).getIV();        if ((ivBytes == null) || (ivBytes.length != blockSize)) {          throw new InvalidAlgorithmParameterException("Wrong IV length: must be " + blockSize + " bytes long");        }      } else       if (params instanceof RC2ParameterSpec) {        ivBytes=((RC2ParameterSpec)params).getIV();        if ((ivBytes != null) && (ivBytes.length != blockSize)) {          throw new InvalidAlgorithmParameterException("Wrong IV length: must be " + blockSize + " bytes long");        }      } else {        throw new InvalidAlgorithmParameterException("Unsupported parameter: " + params);      }    }  }  if (cipherMode == ECB_MODE) {    if (ivBytes != null) {      throw new InvalidAlgorithmParameterException("ECB mode cannot use IV");    }  } else   if (ivBytes == null) {    if (decrypting) {      throw new InvalidAlgorithmParameterException("Parameters " + "missing");    }    if (random == null) {      random=SunJCE.getRandom();    }    if (cipherMode == GCM_MODE) {      ivBytes=new byte[GaloisCounterMode.DEFAULT_IV_LEN];    } else {      ivBytes=new byte[blockSize];    }    random.nextBytes(ivBytes);  }  buffered=0;  diffBlocksize=blockSize;  String algorithm=key.getAlgorithm();  if (cipherMode == GCM_MODE) {    if (tagLen == -1) {      tagLen=GaloisCounterMode.DEFAULT_TAG_LEN;    }    if (decrypting) {      minBytes=tagLen;    } else {      requireReinit=Arrays.equals(ivBytes,lastEncIv) && MessageDigest.isEqual(keyBytes,lastEncKey);      if (requireReinit) {        throw new InvalidAlgorithmParameterException("Cannot reuse iv for GCM encryption");      }      lastEncIv=ivBytes;      lastEncKey=keyBytes;    }    ((GaloisCounterMode)cipher).init(decrypting,algorithm,keyBytes,ivBytes,tagLen);  } else {    cipher.init(decrypting,algorithm,keyBytes,ivBytes);  }  requireReinit=false;}  }
class C{  protected Element writeIntToXML(Element parent,int o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Integer.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Integer(o).toString()));  return node;}  }
class C{  public long run(String[] args) throws Exception {  int ncycles=Integer.parseInt(args[0]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  ObjectStreamClass desc=ObjectStreamClass.lookup(Dummy50.class);  doReps(oout,oin,sbuf,desc,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,desc,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public boolean isEmpty(){  return (size == 0);}  }
class C{  public OptionSet clearLocationPath(){  getLocationPath().clear();  return this;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public MandatoryUdaMissingException(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.724 -0500",hash_original_method="62CDCB67E7EC0B179AEAB50C07EF0602",hash_generated_method="CA66DF63F87B017456736C73611F0CBD") protected int estimateElementsLen(final HeaderElement[] elems){  if ((elems == null) || (elems.length < 1))   return 0;  int result=(elems.length - 1) * 2;  for (int i=0; i < elems.length; i++) {    result+=estimateHeaderElementLen(elems[i]);  }  return result;}  }
class C{  static public void runAndWait(Test suite){  TestRunner aTestRunner=new TestRunner();  aTestRunner.doRun(suite,true);}  }
class C{  @Override public void parse(Reader in) throws IOException, ParseException {  boolean ignoreCase=synonymManager.getIgnoreCase();  for (  CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {    for (    String term : cpsm.mappings.keySet()) {      for (      String mapping : cpsm.mappings.get(term)) {        String casedTerm=synonymManager.applyCaseSetting(ignoreCase,term);        String casedMapping=synonymManager.applyCaseSetting(ignoreCase,mapping);        add(new CharsRef(casedTerm),new CharsRef(casedMapping),false);      }    }  }}  }
class C{  public Boolean isSyncTimeWithHost(){  return syncTimeWithHost;}  }
class C{  public BaleenFileLoggerBuilder(String name,String pattern,String file,Filter<ILoggingEvent> filter,boolean dailyLogFiles,Optional<Integer> maxSize,Optional<Integer> maxNumberLogs){  super(name,pattern,filter);  this.file=file;  this.dailyLogFiles=dailyLogFiles;  this.maxSize=maxSize;  this.maxNumberLogs=maxNumberLogs;}  }
class C{  public static String buildCustomUiResourceUriPrefixPath(Service service){  return UriUtils.buildUriPath(ServiceUriPaths.UI_RESOURCES,service.getDocumentTemplate().documentDescription.userInterfaceResourcePath);}  }
class C{  private DocLine[] loadLines(X_M_Production prod){  ArrayList<DocLine> list=new ArrayList<DocLine>();  String sqlPL="SELECT * FROM M_ProductionLine pl " + "WHERE pl.M_Production_ID=? " + "ORDER BY pl.Line";  try {    PreparedStatement pstmtPL=DB.prepareStatement(sqlPL,getTrxName());    pstmtPL.setInt(1,get_ID());    ResultSet rsPL=pstmtPL.executeQuery();    while (rsPL.next()) {      X_M_ProductionLine line=new X_M_ProductionLine(getCtx(),rsPL,getTrxName());      if (line.getMovementQty().signum() == 0) {        log.info("LineQty=0 - " + line);        continue;      }      DocLine docLine=new DocLine(line,this);      docLine.setQty(line.getMovementQty(),false);      docLine.setProductionBOM(line.getM_Product_ID() == prod.getM_Product_ID());      log.fine(docLine.toString());      list.add(docLine);    }    rsPL.close();    pstmtPL.close();  } catch (  Exception ee) {    log.log(Level.SEVERE,sqlPL,ee);  }  DocLine[] dl=new DocLine[list.size()];  list.toArray(dl);  return dl;}  }
class C{  public boolean isAuthenticated(){  return _isAuthenticated;}  }
class C{  public final void testSetCaseSensitivity(){  Case caseSensitivity=Case.UPPERCASE;  LetterValidator characterValidator=new LetterValidator("foo",Case.CASE_INSENSITIVE,true);  characterValidator.setCaseSensitivity(caseSensitivity);  assertEquals(caseSensitivity,characterValidator.getCaseSensitivity());}  }
class C{  public void stop(){  mCancel=true;  if (mRunning.compareAndSet(true,false)) {    if (mSampleDispatcherTask != null) {      mSampleDispatcherTask.cancel(true);      mFilledBuffers.clear();    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(values.size());  for (int i=0; i < values.size(); i++) {    s.writeObject(values.elementAt(i));  }}  }
class C{  protected void appendClassName(final StringBuffer buffer,final Object object){  if (useClassName && object != null) {    register(object);    if (useShortClassName) {      buffer.append(getShortClassName(object.getClass()));    } else {      buffer.append(object.getClass().getName());    }  }}  }
class C{  public void testConfigWar() throws Exception {  WAR war=createWar();  deployer.addDeployableToDomain(war,this.domain);  String xml=this.xmlUtil.toString(domain);  XMLAssert.assertXpathEvaluatesTo("cargo","//weblogic:app-deployment/weblogic:name",xml);  XMLAssert.assertXpathEvaluatesTo(deployer.getAbsolutePath(war),"//weblogic:app-deployment/weblogic:source-path",xml);}  }
class C{  private List<Statement> newStatements(PolicyType policy,String prefix){  List<Statement> statements=this.newBucketStatement(policy,prefix);  List<Statement> objectStatements=this.newObjectStatement(policy,prefix);  statements.addAll(objectStatements);  return statements;}  }
class C{  @Override public String toString(){  try {    StringBuffer text=new StringBuffer();    text.append(m_attr.name() + ":\n");    for (int v=0; v < m_classifications.length; v++) {      text.append("\t");      if (m_attr.isNominal()) {        text.append(m_attr.value(v));      } else       if (v < m_breakpoints.length) {        text.append("< " + m_breakpoints[v]);      } else       if (v > 0) {        text.append(">= " + m_breakpoints[v - 1]);      } else {        text.append("not ?");      }      text.append("\t-> " + m_class.value(m_classifications[v]) + "\n");    }    if (m_missingValueClass != -1) {      text.append("\t?\t-> " + m_class.value(m_missingValueClass) + "\n");    }    text.append("(" + m_correct + "/"+ m_numInst+ " instances correct)\n");    return text.toString();  } catch (  Exception e) {    return "Can't print OneR classifier!";  }}  }
class C{  public static String mapFullWidthLetterToHalfWidth(String text){}  }
class C{  public Controller createController(){  Console console=new Console(this);  console.setVisible(true);  return console;}  }
class C{  public static void fail(Service service,TaskService.State taskServiceState,Throwable t,Operation.CompletionHandler handler){  if (taskServiceState == null) {    handler.handle(null,null);    return;  }  Date now=DateTime.now().toDate();  taskServiceState.state=TaskService.State.TaskState.ERROR;  taskServiceState.endTime=now;  taskServiceState.steps.forEach(null);  ServiceHostUtils.getCloudStoreHelper(service.getHost()).createPatch(taskServiceState.documentSelfLink).setBody(taskServiceState).setCompletion(handler).sendWith(service);}  }
class C{  static <T,F>boolean postCompleteDrainDelayError(long n,Subscriber<? super T> actual,Queue<T> queue,AtomicLongFieldUpdater<F> field,F instance,BooleanSupplier isCancelled,Throwable error){  long e=n & COMPLETED_MASK;  for (; ; ) {    while (e != n) {      if (isCancelled.getAsBoolean()) {        return true;      }      T t=queue.poll();      if (t == null) {        if (error == null) {          actual.onComplete();        } else {          actual.onError(error);        }        return true;      }      actual.onNext(t);      e++;    }    if (isCancelled.getAsBoolean()) {      return true;    }    if (queue.isEmpty()) {      if (error == null) {        actual.onComplete();      } else {        actual.onError(error);      }      return true;    }    n=field.get(instance);    if (n == e) {      n=field.addAndGet(instance,-(e & REQUESTED_MASK));      if ((n & REQUESTED_MASK) == 0L) {        return false;      }      e=n & COMPLETED_MASK;    }  }}  }
class C{  private ColorPickerSwatch createColorSwatch(int color,int selectedColor){  ColorPickerSwatch view=new ColorPickerSwatch(getContext(),color,color == selectedColor,mOnColorSelectedListener);  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.TRACE_STATE_EXITED__STATE:    setState((ExecutionState)null);  return;}super.eUnset(featureID);}  }
class C{  public AnsibleRunner vaultPass(String pass){  if (pass != null && pass.length() > 0) {    vaultPass=pass;  }  return this;}  }
class C{  private void doOnBlockSetLightUpdates(BlockPos pos,IBlockState newBlockState,int oldOpacity){  int newOpacity=newBlockState.getLightOpacity(this.getWorld(),pos);  if (oldOpacity == newOpacity || (oldOpacity >= 15 && newOpacity >= 15)) {    return;  }  int localX=Coords.blockToLocal(pos.getX());  int localZ=Coords.blockToLocal(pos.getZ());  int oldSkylightY=getHeightValue(localX,localZ);  this.opacityIndex.onOpacityChange(localX,pos.getY(),localZ,newOpacity);  setModified(true);  int newSkylightY=oldSkylightY;  if (!getWorld().isRemote) {    newSkylightY=getHeightValue(localX,localZ);  } else   if (!(oldSkylightY < world.getMinHeight() && newOpacity == 0)) {    int oldSkylightActual=oldSkylightY - 1;    if ((pos.getY() > oldSkylightActual - 1) && newOpacity != 0) {      newSkylightY=pos.getY() + 1;    } else     if (newOpacity == 0 && pos.getY() == oldSkylightY - 1) {      int newTop=oldSkylightActual - 1;      while (getBlockLightOpacity(new BlockPos(localX,newTop,localZ)) == 0 && newTop > oldSkylightActual - 65) {        newTop--;      }      newSkylightY=newTop;    } else {      newSkylightY=oldSkylightActual;    }    ((ClientHeightMap)opacityIndex).setHeight(localX,localZ,newSkylightY);  }  int minY=MathUtil.minInteger(oldSkylightY,newSkylightY);  int maxY=MathUtil.maxInteger(oldSkylightY,newSkylightY);  if (minY > maxY) {    int t=minY;    minY=maxY;    maxY=t;  }  LightingManager lightManager=this.world.getLightingManager();  lightManager.columnSkylightUpdate(LightingManager.UpdateType.IMMEDIATE,this,localX,minY,maxY,localZ);}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,AddTableChange change,StringBuilder ddl){  createTable(change.getNewTable(),ddl,false,false);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public XTIFFDecodeParam(TIFFDecodeParam param){  if (param == null)   return;  setDecodePaletteAsShorts(param.getDecodePaletteAsShorts());}  }
class C{  public void windowActivated(WindowEvent e){  clipboardParser.execute(parser);}  }
class C{  public void detach(){  if (m_allowRelease) {    m_DTMXRTreeFrag.destruct();    setObject(null);  }}  }
class C{  protected void resetNextNewNodeId() throws Exception {  m_nextNewNodeId=SboType.NULL_ID;}  }
class C{  public ARQ2SPIN(Model model,boolean addPrefixes){  this.model=model;  this.addPrefixes=addPrefixes;  JenaUtil.setGraphReadOptimization(true);  try {    StmtIterator it=model.listStatements(null,SP.varName,(RDFNode)null);    while (it.hasNext()) {      Resource variable=it.nextStatement().getSubject();      if (variable.isURIResource()) {        if (SPINPreferences.get().isCreateURIVariables() || variable.getURI().startsWith(SP.NS + "arg") || SPIN.NS.equals(variable.getNameSpace())) {          Variable var=variable.as(Variable.class);          String name=var.getName();          var2Resource.put(name,var);        }      }    }  }  finally {    JenaUtil.setGraphReadOptimization(false);  }}  }
class C{  public BayesPmWrapper(DagWrapper dagWrapper,Parameters params){  if (dagWrapper == null) {    throw new NullPointerException("Graph must not be null.");  }  Dag graph;  try {    graph=new Dag(dagWrapper.getDag());  } catch (  Exception e) {    throw new RuntimeException("The parent graph cannot be converted to " + "a DAG.");  }  int lowerBound, upperBound;  if (params.getString("initializationMode","manualRetain").equals("manual")) {    lowerBound=upperBound=2;  } else   if (params.getString("initializationMode","manualRetain").equals("automatic")) {    lowerBound=params.getInt("lowerBoundNumVals",2);    upperBound=params.getInt("upperBoundNumVals",2);  } else {    throw new IllegalStateException("Unrecognized type.");  }  setBayesPm(graph,lowerBound,upperBound);}  }
class C{  protected int nextChar() throws IOException {  current=reader.read();  if (current == -1) {    return current;  }  if (position == buffer.length) {    char[] t=new char[1 + position + position / 2];    System.arraycopy(buffer,0,t,0,position);    buffer=t;  }  return buffer[position++]=(char)current;}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.682 -0500",hash_original_method="FF57B3B0C583923138679674F4E2FE25",hash_generated_method="4D7D32FD10AEDBFD723DC815365E48EE") public int rspCid(Message response){  int retVal=response.arg1;  if (DBG)   log("rspCid=" + retVal);  return retVal;}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  private void sendMessageDisconnectedToUI(){  Log.i("medtronicCGMService","Disconnected");  if (connectedSent)   log.debug("Send Message Disconnected to UI");  connectedSent=false;  for (int i=mClients.size() - 1; i >= 0; i--) {    try {      Message mSend=null;      mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_NO_PERMISSION);      mClients.get(i).send(mSend);    } catch (    RemoteException e) {      mClients.remove(i);    }  }}  }
class C{  public DeferredTreeViewer(Composite parent,int style){  super(parent,style);}  }
class C{  private static LookupResult tryAsScript(String name,CompilationUnit compilationUnit,ClassNode oldClass){  LookupResult lr=null;  if (oldClass != null) {    lr=new LookupResult(null,oldClass);  }  if (name.startsWith("java."))   return lr;  if (name.indexOf('$') != -1)   return lr;  GroovyClassLoader gcl=compilationUnit.getClassLoader();  URL url=null;  try {    url=gcl.getResourceLoader().loadGroovySource(name);  } catch (  MalformedURLException e) {  }  if (url != null && (oldClass == null || isSourceNewer(url,oldClass))) {    SourceUnit su=compilationUnit.addSource(url);    return new LookupResult(su,null);  }  return lr;}  }
class C{  public void close(){  if (mBluetoothGatt == null) {    return;  }  Log.w(TAG,"mBluetoothGatt closed");  mBluetoothDeviceAddress=null;  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  private void removeRequests(Collection requestsToRemove){  if (!requestsToRemove.isEmpty()) {synchronized (this) {      this.pendingRequests.removeAll(requestsToRemove);    }    this.dlock.getStats().incPendingRequests(-requestsToRemove.size());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.717 -0500",hash_original_method="D5DFF4CEFF9EFFF0748C4A7B53D21FF4",hash_generated_method="14EF3B907582DAACD36CDF9102EE8DCD") protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException {  ProxySelector psel=this.proxySelector;  if (psel == null)   psel=ProxySelector.getDefault();  if (psel == null)   return null;  URI targetURI=null;  try {    targetURI=new URI(target.toURI());  } catch (  URISyntaxException usx) {    throw new HttpException("Cannot convert host to URI: " + target,usx);  }  List<Proxy> proxies=psel.select(targetURI);  Proxy p=chooseProxy(proxies,target,request,context);  HttpHost result=null;  if (p.type() == Proxy.Type.HTTP) {    if (!(p.address() instanceof InetSocketAddress)) {      throw new HttpException("Unable to handle non-Inet proxy address: " + p.address());    }    final InetSocketAddress isa=(InetSocketAddress)p.address();    result=new HttpHost(getHost(isa),isa.getPort());  }  return result;}  }
class C{  public static void pushTx(String tx) throws APIException, IOException {  pushTx(tx,null);}  }
class C{  P2Model p2model(){  P2Model model=new P2Model();  model.addRepo(release.updateSite());  model.addIU("org.eclipse.platform.ide");  model.addFeature("org.eclipse.jdt");  model.addFeature("org.eclipse.pde");  return model;}  }
class C{  public TextDecl(char[] buf,int off,int end) throws InvalidTokenException {  init(false,buf,off,end);}  }
class C{  public CSSMediaPanel(){  super(new GridBagLayout());  listeners.put("AddButtonAction",new AddButtonAction());  listeners.put("RemoveButtonAction",new RemoveButtonAction());  listeners.put("ClearButtonAction",new ClearButtonAction());  setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),resources.getString("Panel.title")));  ExtendedGridBagConstraints constraints=new ExtendedGridBagConstraints();  constraints.insets=new Insets(5,5,5,5);  mediaList=new JList();  mediaList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  mediaList.setModel(listModel);  mediaList.addListSelectionListener(new MediaListSelectionListener());  listModel.addListDataListener(new MediaListDataListener());  JScrollPane scrollPane=new JScrollPane();  scrollPane.setBorder(BorderFactory.createLoweredBevelBorder());  constraints.weightx=1.0;  constraints.weighty=1.0;  constraints.fill=GridBagConstraints.BOTH;  constraints.setGridBounds(0,0,1,3);  scrollPane.getViewport().add(mediaList);  add(scrollPane,constraints);  ButtonFactory bf=new ButtonFactory(bundle,this);  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.anchor=GridBagConstraints.NORTH;  addButton=bf.createJButton("AddButton");  constraints.setGridBounds(1,0,1,1);  add(addButton,constraints);  removeButton=bf.createJButton("RemoveButton");  constraints.setGridBounds(1,1,1,1);  add(removeButton,constraints);  clearButton=bf.createJButton("ClearButton");  constraints.setGridBounds(1,2,1,1);  add(clearButton,constraints);  updateButtons();}  }
class C{  public static float mapPoint(float x,float sourceStart,float sourceEnd,float targetStart,float targetEnd){  if (x <= sourceStart) {    return targetStart;  }  if (x >= sourceEnd) {    return targetEnd;  }  return (x - sourceStart) / (sourceEnd - sourceStart) * (targetEnd - targetStart) + targetStart;}  }
class C{  private VMInstanceRequest populateAmazonRequest(){  VMInstanceRequest output=new VMInstanceRequest();  try {    output.setImage(VMImageType.AGENT);    output.setJobId(this.request.getJobId());    output.setLoggingProfile(this.request.getLoggingProfile());    output.setStopBehavior(this.request.getStopBehavior());    output.setProvider(VMProvider.Amazon);    output.setRegion(this.request.getRegion());    output.setReportingMode(this.request.getReportingMode());    return output;  } catch (  Exception ex) {    logger.error(ex.getMessage());    return null;  }}  }
class C{  public void createTopic(String topic,int partitions,int replication,Properties topicConfig){  broker.createTopic(topic,partitions,replication,topicConfig);}  }
class C{  ASTJoinGroupPartition(final LinkedList<IGroupMemberNode> nonOptionalNonMinusNodes,final IGroupMemberNode optionalOrMinus,final GroupNodeVarBindingInfoMap bindingInfoMap,final Set<IVariable<?>> externallyBound){  this.nonOptionalNonMinusNodes=nonOptionalNonMinusNodes;  this.optionalOrMinus=optionalOrMinus;  this.bindingInfoMap=bindingInfoMap;  this.externallyBound=externallyBound;  recomputeDefinitelyProduced();}  }
class C{  public NondominatedSorting(DominanceComparator comparator){  super();  this.comparator=comparator;}  }
class C{  public void renderAllAsSelected(Graphics gr){  Shape shape=getShape();  if (shape != null) {    setGraphicsForFill(gr);    ((Graphics2D)gr).fill(shape);    select();    setGraphicsForEdge(gr);    ((Graphics2D)gr).draw(shape);    deselect();  }}  }
class C{  public GetEndpointsResponse GetEndpoints(RequestHeader RequestHeader,String EndpointUrl,String[] LocaleIds,String... ProfileUris) throws ServiceFaultException, ServiceResultException {  GetEndpointsRequest req=new GetEndpointsRequest(RequestHeader,EndpointUrl,LocaleIds,ProfileUris);  return (GetEndpointsResponse)channel.serviceRequest(req);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument02.class,args);}  }
class C{  public void start(){  super.start();  createGrids();  for (int x=0; x < cycleCount; x++) {    Cycle c=new Cycle(x + 1,random.nextInt(4) + 1);    cycleGrid.setObjectLocation(c,random.nextInt(gridWidth),random.nextInt(gridHeight));    c.stopper=schedule.scheduleRepeating(c);  }}  }
class C{  private void verifyToken(String token){  client.api.verifyToken(token);  tokenDialog.verifyingToken();}  }
class C{  public void testBuilder_EmptyOnConstruct_OneAppend(){  SQLException root=new SQLException();  SQLExceptionChainBuilder<SQLException> builder=new SQLExceptionChainBuilder<SQLException>();  builder.append(root);  assertTrue("SQLExceptionChainBuilder has a exception",builder.hasException());  assertSame("Expected root exception to be identical to returned exception",root,builder.getException());}  }
class C{  @Override public void updateConfiguration(Auth authNew){  try {    if (!isReferenced(ActionRightIDs.EDITPROFILE,authNew)) {      log.warn("Right id: " + ActionRightIDs.EDITPROFILE + " is not referenced in the auth configuration. No user is able to change the configuration anymore.");    }    Profiles profilesMod=new Profiles();    for (    Profile profile : authNew.getProfiles().getProfile()) {      if (!OriginType.DEFAULT.equals(profile.getOrigin())) {        profilesMod.getProfile().add(profile);      }    }    authNew.setProfiles(profilesMod);    Userprofiles userprofilesMod=new Userprofiles();    for (    Userprofile userprofile : authNew.getUserprofiles().getUserprofile()) {      if (!OriginType.DEFAULT.equals(userprofile.getOrigin())) {        userprofilesMod.getUserprofile().add(userprofile);      }    }    authNew.setUserprofiles(userprofilesMod);    writeLock.lock();    try {      checkWritePermission();      backupConfigurationFile();      Marshaller marshaller=getContext().createMarshaller();      marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);      marshaller.setProperty(Marshaller.JAXB_ENCODING,"UTF-8");      marshaller.setSchema(getSchema());      marshaller.marshal(authNew,new FileOutputStream(getAuthConfiguration().getFile().getPath()));      this.auth=null;    }  finally {      writeLock.unlock();    }    fireChangeEvent();  } catch (  sernet.gs.service.SecurityException e) {    log.error(e.getMessage(),e);    throw e;  }catch (  Exception e) {    String message="Error while updating authorization configuration.";    log.error(message,e);    writeLock.lock();    try {      log.error("Trying to restore the authorization configuration from backup file now...");      restoreConfigurationFile();      log.error("Authorization configuration restored from backup file.");    }  finally {      writeLock.unlock();    }    throw new RuntimeException(message);  }}  }
class C{  public void transform(float[] src,int srcOff,double[] dst,int dstOff,int length){  while (--length >= 0) {    float x=src[srcOff++];    float y=src[srcOff++];    dst[dstOff++]=x * m00 + y * m01 + m02;    dst[dstOff++]=x * m10 + y * m11 + m12;  }}  }
class C{  public ElementType type(){  return theType;}  }
class C{  public static PKIXCertPathBuilderResult build(PKIXBuilderParameters params) throws Exception {  CertPathBuilder builder=CertPathBuilder.getInstance("PKIX");  return (PKIXCertPathBuilderResult)builder.build(params);}  }
class C{  public void update(float dt){  if (elapsed == -1) {    elapsed=0;  } else {    elapsed+=dt;  }  if (elapsed >= interval) {    if (callback != null) {      callback.update(elapsed);    } else {      try {        invocation.invoke(target,elapsed);      } catch (      Exception e) {        e.printStackTrace();      }    }    elapsed=0;  }}  }
class C{  public void addressRelease(){  isAddressSet=false;  jmri.InstanceManager.throttleManagerInstance().releaseThrottle(throttle,this);  throttle.removePropertyChangeListener(this);  throttle=null;  rosterLoco=null;  sendAddress();  clearLeadLoco();  for (int i=0; i < listeners.size(); i++) {    ThrottleControllerListener l=listeners.get(i);    l.notifyControllerAddressReleased(this);    if (log.isDebugEnabled()) {      log.debug("Notify TCListener address released: " + l.getClass());    }  }}  }
class C{  public static Map<String,String> createSingleValueMap(Map httpParams){  final Map<String,String> clean=new HashMap<String,String>();  if (httpParams != null) {    for (    final Map.Entry<Object,Object> entry : ((Map<Object,Object>)httpParams).entrySet()) {      final String value=getSingleValue(entry.getValue());      clean.put(entry.getKey().toString(),value);    }  }  return clean;}  }
class C{  public boolean verify(Tree node){  isComplex=false;  checkedNode=node;  final boolean isSimple=isSimpleStatementNode(node);  if (!isSimple) {    this.isComplex=isComplexStatementNode(node);  }  return isSimple || isComplex;}  }
class C{  public LogReaderTask(final File selectedFile,final MqttViewManager viewManager,final MqttSpyMainController mainController){  this.selectedFile=selectedFile;  this.viewManager=viewManager;  this.controller=mainController;  super.updateTitle("Processing message audit log file " + selectedFile.getName());}  }
class C{  private Set<String> transport2Protocol(String transport){  Set<String> protocols=new HashSet<String>();  if (transport == null) {    return protocols;  }  if (Transport.IP.name().equals(transport)) {    protocols.add(Block.iSCSI.name());    protocols.add(Block.RBD.name());    protocols.add(File.NFS.name());    protocols.add(File.CIFS.name());    protocols.add(File.NFSv4.name());  }  if (Transport.Ethernet.name().equals(transport)) {    protocols.add(Block.FCoE.name());    return protocols;  }  if (Transport.FC.name().equals(transport)) {    protocols.add(Block.FC.name());    return protocols;  }  if (Transport.ScaleIO.name().equals(transport)) {    protocols.add(Block.ScaleIO.name());    return protocols;  }  return protocols;}  }
class C{  private void paintString(Graphics g,int x,int y,int width,int height,int fillStart,int amountFull,Insets b){  if (!(g instanceof Graphics2D)) {    return;  }  Graphics2D g2=(Graphics2D)g;  String progressString=progressBar.getString();  g2.setFont(progressBar.getFont());  Point renderLocation=getStringPlacement(g2,progressString,x,y,width,height);  Rectangle oldClip=g2.getClipBounds();  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    g2.setColor(getSelectionBackground());    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);    g2.setColor(getSelectionForeground());    g2.clipRect(fillStart,y,amountFull,height);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);  } else {    g2.setColor(getSelectionBackground());    AffineTransform rotate=AffineTransform.getRotateInstance(Math.PI / 2);    g2.setFont(progressBar.getFont().deriveFont(rotate));    renderLocation=getStringPlacement(g2,progressString,x,y,width,height);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);    g2.setColor(getSelectionForeground());    g2.clipRect(x,fillStart,width,amountFull);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);  }  g2.setClip(oldClip);}  }
class C{  @Override public void addPages(){  pageConnections=new PageConnections();  pageDriver=new PageDriver();  addPage(pageConnections);  addPage(pageDriver);}  }
class C{  public void shape(PShape shape,float x,float y){  g.shape(shape,x,y);}  }
class C{  public static boolean isIdentifier(IElementType tokenType){  return tokenType == BashTokenTypes.WORD || BashTokenTypes.identifierKeywords.contains(tokenType);}  }
class C{  static String toString(Xid id){  if (id == null)   return "[NULL Xid]";  String s=id.getClass().getName();  s=s.substring(s.lastIndexOf('.') + 1);  s=s + " [FormatId=" + id.getFormatId()+ ", GlobalId="+ new String(id.getGlobalTransactionId()).trim()+ ", BranchQual="+ new String(id.getBranchQualifier()).trim()+ "]";  return s;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (delegationSuperClassSteps: ");  result.append(delegationSuperClassSteps);  result.append(", delegationTargetIsAbstract: ");  result.append(delegationTargetIsAbstract);  result.append(')');  return result.toString();}  }
class C{  public void startNamedTransaction(String savepointName){  SQLiteStatement statement=mDbHelper.getWritableDatabase().compileStatement("SAVEPOINT " + savepointName);  statement.execute();  statement.close();}  }
class C{  public static <E>boolean isNotEmpty(Collection<E> c){  return (c != null) && !c.isEmpty();}  }
class C{  DownloadState query(String url){  return downloadRequestQueue.query(Uri.parse(url));}  }
class C{  public boolean removeBody(Body body){  return bodies.remove(body);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    if (resolve)     return getRewiredTarget();  return basicGetRewiredTarget();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ProtocolException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public FastMultiByteArrayInputStream(final MeasurableInputStream is) throws IOException {  this(is,is.length());}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  @Inline @Entrypoint public static void charFieldWrite(Object ref,char value,Offset offset,int locationMetadata){  if (NEEDS_CHAR_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().charWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static boolean isMacOSX105(){  return _isMacOSX105;}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");synchronized (session) {      closeOldResultSet();      if (conn != null) {        conn=null;      }    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static int readLen16(ByteBuffer buffer){  int len=0;  int i=Buffers.readUShort(buffer);  if ((i & 0x8000) != 0) {    len|=(i & 0x7fff) << 15;    len+=Buffers.readUShort(buffer);  } else {    len=i;  }  return len;}  }
class C{  void die(){  boolean reportHandled=false;  if (bv != null) {    bv.die();  }  Iterator<String> names=phaseComponents.keySet().iterator();  while (names.hasNext()) {    JComponent component=phaseComponents.get(names.next());    if (component instanceof ReportDisplay) {      if (reportHandled) {        continue;      }      reportHandled=true;    }    if (component instanceof Distractable) {      ((Distractable)component).removeAllListeners();    }  }  frame.removeAll();  frame.setVisible(false);  try {    frame.dispose();  } catch (  Throwable error) {    error.printStackTrace();  }  if (chatlounge != null) {    chatlounge.die();  }  TimerSingleton.getInstance().killTimer();  if (menuBar != null) {    menuBar.die();    menuBar=null;  }}  }
class C{  void repaintAnimations(){  if (animatableComponents != null) {    loopAnimations(animatableComponents,null);  }  if (internalAnimatableComponents != null) {    loopAnimations(internalAnimatableComponents,animatableComponents);  }  if (animMananger != null) {    animMananger.updateAnimations();  }}  }
class C{  private LayoutManager createLayout(){  SeaGlassContext context=getContext(this);  LayoutManager lm=(LayoutManager)style.get(context,"InternalFrameTitlePane.titlePaneLayout");  context.dispose();  return (lm != null) ? lm : new SeaGlassTitlePaneLayout();}  }
class C{  public static void checkAndAppendLongElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Long l=AVListImpl.getLongValue(params,paramKey);  if (l != null) {    appendLong(context,path,l);  }}  }
class C{  public MockContentResolver(){  this(null);}  }
class C{  private String formatIdList(List<Long> ids){  String idsStr="";  int i=1;  for (  Long id : ids) {    if (id != null) {      idsStr+=id;      if (i < ids.size()) {        idsStr+=",";      }    }    i++;  }  return idsStr;}  }
class C{  public synchronized boolean isEmpty(){  return count == 0;}  }
class C{  private void reverseBlock(int from,int to){  while (from < to) {    T old=data[from];    data[from++]=data[to];    data[to--]=old;  }}  }
class C{  public void handleRequest(String request,OutputStream out) throws IOException, MapRequestFormatException {  Properties requestProperties=convertRequestToProps(request);  String requestType=requestProperties.getProperty(REQUEST);  if (requestType != null) {    if (requestType.equalsIgnoreCase(MAP)) {      Debug.message("imageserver","MRH: Map request...");      handleMapRequest(requestProperties,out);    } else     if (requestType.equalsIgnoreCase(CAPABILITIES)) {      Debug.message("imageserver","MRH: Capabilities request...");      handleCapabilitiesRequest(requestProperties,out);    } else     if (requestType.equalsIgnoreCase(PAN)) {      Debug.message("imageserver","MRH: Pan request...");      handlePanRequest(requestProperties,out);    } else     if (requestType.equalsIgnoreCase(RECENTER)) {      Debug.message("imageserver","MRH: Recenter request...");      handleRecenterRequest(requestProperties,out);    } else {      throw new MapRequestFormatException("Request type not handled: " + requestType);    }  } else {    throw new MapRequestFormatException("Request not understood: " + request);  }}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  static short[] toUBytes(long data,int length){  if (data == 0) {    return null;  }  short[] res=new short[length];  for (int i=0; i < length; i++, data++) {    res[i]=getUByte(data);  }  return res;}  }
class C{  public void addFeature(PointFeature feat,int index){  if (index >= capacity) {    throw new AssertionError("Number of features seems to have grown since validation.");  }  polygons[index]=feat.getPolygon();  lats[index]=feat.getLat();  lons[index]=feat.getLon();  ids[index]=feat.getId();  for (  Entry<String,Integer> ad : feat.getProperties().entrySet()) {    String propId=ad.getKey();    Integer propVal=ad.getValue();    this.getOrCreatePropertyForId(propId);    this.properties.get(propId)[index]=propVal;  }}  }
class C{  @Override public void postRemoveAll(DistributedRemoveAllOperation op,VersionedObjectList successfulOps,LocalRegion region){  if (op.removeAllData.length == 0) {    return;  }  if (region instanceof DistributedRegion) {    super.postRemoveAll(op,successfulOps,region);  } else {    region.getCancelCriterion().checkCancelInProgress(null);    if (logger.isDebugEnabled()) {      logger.debug("DistTXStateProxyImplOnCoordinator.postRemoveAll " + "processing removeAll op for region {}, size of removeAll " + "is {}",region,op.removeAllDataSize);    }    HashMap<Integer,DistributedRemoveAllOperation> bucketToRemoveAllMap=new HashMap<Integer,DistributedRemoveAllOperation>();    HashMap<Integer,DistTXCoordinatorInterface> bucketToTxStateStubMap=new HashMap<Integer,DistTXCoordinatorInterface>();    for (int i=0; i < op.removeAllData.length; i++) {      assert (op.removeAllData[i] != null);      Object key=op.removeAllData[i].key;      int bucketId=op.removeAllData[i].getBucketId();      DistributedRemoveAllOperation removeAllForBucket=bucketToRemoveAllMap.get(bucketId);      if (removeAllForBucket == null) {        EntryEventImpl event=EntryEventImpl.createRemoveAllEvent(op,region,key);        event.setEventId(op.removeAllData[i].getEventID());        removeAllForBucket=new DistributedRemoveAllOperation(event,op.removeAllDataSize,op.isBridgeOp);        bucketToRemoveAllMap.put(bucketId,removeAllForBucket);      }      op.removeAllData[i].setFakeEventID();      removeAllForBucket.addEntry(op.removeAllData[i]);      KeyInfo ki=new KeyInfo(key,null,null);      DistTXCoordinatorInterface tsi=(DistTXCoordinatorInterface)getRealDeal(ki,region);      bucketToTxStateStubMap.put(bucketId,tsi);    }    for (    Entry<Integer,DistTXCoordinatorInterface> e : bucketToTxStateStubMap.entrySet()) {      Integer bucketId=e.getKey();      DistTXCoordinatorInterface dtsi=e.getValue();      DistributedRemoveAllOperation removeAllForBucket=bucketToRemoveAllMap.get(bucketId);      if (logger.isDebugEnabled()) {        logger.debug("DistTXStateProxyImplOnCoordinator.postRemoveAll processing" + " removeAll for ##bucketId = {}, ##txStateStub = {}, " + "##removeAllOp = {}",bucketId,dtsi,removeAllForBucket);      }      dtsi.postRemoveAll(removeAllForBucket,successfulOps,region);    }  }}  }
class C{  @Override public boolean isDataFlavorSupported(DataFlavor flavor){  return this.flavor.equals(flavor);}  }
class C{  private void onBluetoothActionStateChanged(Context context,Intent intent){  int currentState=intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,DEFAULT_INT);  int previousState=intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE,DEFAULT_INT);  String currentStateString=getBTStateStringFromCode(currentState);  String previousStateString=getBTStateStringFromCode(previousState);  Log.d(TAG,String.format("BT state change. %s (%d) to %s (%d) ",previousStateString,previousState,currentStateString,currentState));}  }
class C{  public void append(PseudoOp... elements){  contents.addAll(Arrays.asList(elements));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void widgetDefaultSelected(SelectionEvent e){}  }
class C{  private void adjustForVSB(boolean wantsVSB,Rectangle available,Rectangle vsbR,Insets vpbInsets,boolean leftToRight){  int oldWidth=vsbR.width;  if (wantsVSB) {    int vsbWidth=Math.max(0,Math.min(vsb.getPreferredSize().width,available.width));    available.width-=vsbWidth;    vsbR.width=vsbWidth;    if (leftToRight) {      vsbR.x=available.x + available.width + vpbInsets.right;    } else {      vsbR.x=available.x - vpbInsets.left;      available.x+=vsbWidth;    }  } else {    available.width+=oldWidth;  }}  }
class C{  private void initColours(){  Display display=Display.getCurrent();  ISharedTextColors sharedColors=DBeaverUI.getSharedTextColors();  ColorRegistry colorRegistry=PlatformUI.getWorkbench().getThemeManager().getCurrentTheme().getColorRegistry();  listBackground=display.getSystemColor(SWT.COLOR_LIST_BACKGROUND);  widgetBackground=display.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);  widgetDarkShadow=display.getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);  widgetForeground=display.getSystemColor(SWT.COLOR_WIDGET_FOREGROUND);  widgetNormalShadow=display.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);  RGB white=display.getSystemColor(SWT.COLOR_WHITE).getRGB();  RGB black=display.getSystemColor(SWT.COLOR_BLACK).getRGB();  if (widgetNormalShadow.hashCode() < widgetBackground.hashCode()) {    elementBackground=sharedColors.getColor(UIUtils.blend(black,widgetBackground.getRGB(),15));  } else {    elementBackground=sharedColors.getColor(UIUtils.blend(white,widgetBackground.getRGB(),15));  }  navigationElementShadowStroke=sharedColors.getColor(UIUtils.blend(white,widgetNormalShadow.getRGB(),55));  bottomNavigationElementShadowStroke1=sharedColors.getColor(UIUtils.blend(black,widgetBackground.getRGB(),10));  bottomNavigationElementShadowStroke2=sharedColors.getColor(UIUtils.blend(black,widgetBackground.getRGB(),5));  hoverGradientStart=sharedColors.getColor(UIUtils.blend(white,widgetBackground.getRGB(),20));  hoverGradientEnd=sharedColors.getColor(UIUtils.blend(widgetNormalShadow.getRGB(),widgetBackground.getRGB(),10));  indentedDefaultBackground=sharedColors.getColor(UIUtils.blend(white,widgetBackground.getRGB(),10));  indentedHoverBackground=sharedColors.getColor(UIUtils.blend(white,widgetBackground.getRGB(),75));}  }
class C{  protected int dp2px(float dp){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dp * scale + 0.5f);}  }
class C{  @SuppressWarnings("unused") @Override protected Money handleTransactionThatIsALateRepaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,final List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,transactionAmountUnprocessed,transactionMappings);}  }
class C{  public static boolean contains(final int key){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(YeloApplication.getStaticContext());  return preferences.contains(YeloApplication.getStaticContext().getString(key));}  }
class C{  public ItemHit itemName(String value){  setString(ITEM_NAME,value);  return this;}  }
class C{  public String signMessage(String message,@Nullable KeyParameter aesKey) throws KeyCrypterException {  byte[] data=Utils.formatMessageForSigning(message);  Sha256Hash hash=Sha256Hash.twiceOf(data);  ECDSASignature sig=sign(hash,aesKey);  int recId=-1;  for (int i=0; i < 4; i++) {    ECKey k=ECKey.recoverFromSignature(i,sig,hash,isCompressed());    if (k != null && k.pub.equals(pub)) {      recId=i;      break;    }  }  if (recId == -1)   throw new RuntimeException("Could not construct a recoverable key. This should never happen.");  int headerByte=recId + 27 + (isCompressed() ? 4 : 0);  byte[] sigData=new byte[65];  sigData[0]=(byte)headerByte;  System.arraycopy(Utils.bigIntegerToBytes(sig.r,32),0,sigData,1,32);  System.arraycopy(Utils.bigIntegerToBytes(sig.s,32),0,sigData,33,32);  return new String(Base64.encode(sigData),Charset.forName("UTF-8"));}  }
class C{  public static void main(String[] args){  runFileSaver(new ArffSaver(),args);}  }
class C{  public void addKeyListener(KeyListener l){  m_textArea.addKeyListener(l);}  }
class C{  public PairedStats snapshot(){  return new PairedStats(xStats.snapshot(),yStats.snapshot(),sumOfProductsOfDeltas);}  }
class C{  private void initAndEdit(){  initiateSharedPreferences();  edit();}  }
class C{  @Override public int compareTo(final MutableByte other){  return NumberUtils.compare(this.value,other.value);}  }
class C{  public static long hailstoneLengthImp(long n2){  long n=n2;  long moves=0;  while (n != 1) {    if (n <= 1) {      throw new IllegalStateException();    }    if (isEven(n)) {      n=n / 2;    } else {      n=3 * n + 1;    }    ++moves;  }  return moves;}  }
class C{  @SuppressWarnings("unchecked") public DataSource read(InputStream input,Class<? extends Comparable<?>>... types) throws IOException {  AudioInputStream audio;  try {    audio=AudioSystem.getAudioInputStream(input);  } catch (  UnsupportedAudioFileException e) {    throw new IOException(e);  }  DataTable data=new DataTable(Double.class);  double factor=this.<Number>getSetting("factor").doubleValue();  double offset=this.<Number>getSetting("offset").doubleValue();  int sampleSize=audio.getFormat().getSampleSizeInBits();  byte[] samples=new byte[sampleSize / 8];  while (audio.read(samples) >= 0) {    int b=samples[0];    if (samples.length == 1) {      b=b << 8;    } else     if (samples.length == 2) {      b=(b & 0xFF) | (samples[1] << 8);    }    double v=factor * b + offset;    data.add(v);  }  return data;}  }
class C{  protected OtherContent(ElementKey<?,?> key){  super(key);}  }
class C{  public <T>Invoker<T> refer(Class<T> serviceType,URL url) throws RpcException {  ThriftRpcInvoker<T> invoker=new ThriftRpcInvoker<T>(serviceType,url,getClients(url),invokers);  invokers.add(invoker);  return invoker;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void validate(InputNode node,Label label) throws Exception {  Converter reader=label.getConverter(context);  Position line=node.getPosition();  Class expect=type.getType();  boolean valid=reader.validate(node);  if (valid == false) {    throw new PersistenceException("Invalid value for %s in %s at %s",label,expect,line);  }  criteria.set(label,null);}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    debugCodeCall("executeQuery",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.102 -0400",hash_original_method="EDA7487DCECD411B0E9FBCE942C20A22",hash_generated_method="9F1E443C899E55485C185E755AF35886") public void writeTo(OutputStream out) throws IOException {  if (!closed) {    throw new IOException("Stream not closed");  }  if (isInMemory()) {    memoryOutputStream.writeTo(out);  } else {    FileInputStream fis=new FileInputStream(outputFile);    try {      IOUtils.copy(fis,out);    }  finally {      IOUtils.closeQuietly(fis);    }  }}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public URI peek(){  return _authSvcEndpoints[_currentIndex];}  }
class C{  protected ClientConnectionManager createConnectionManager(SchemeRegistry schemeRegistry,BasicHttpParams httpParams){  return new ThreadSafeClientConnManager(httpParams,schemeRegistry);}  }
class C{  public DockerContainersUtil filterByName(String pattern){  if (this.containers == null) {    return this;  }  List<Container> matched=new ArrayList<>();  for (  Container container : containers) {    String[] names=container.getNames();    for (    String name : names) {      if (name.substring(1).matches(pattern)) {        matched.add(container);      }    }  }  return new DockerContainersUtil(matched);}  }
class C{  private void bes(){  TetradLogger.getInstance().log("info","** BACKWARD EQUIVALENCE SEARCH");  sortedArrows=new ConcurrentSkipListSet<>();  lookupArrows=new ConcurrentHashMap<>();  neighbors=new ConcurrentHashMap<>();  initializeArrowsBackward();  while (!sortedArrows.isEmpty()) {    Arrow arrow=sortedArrows.first();    sortedArrows.remove(arrow);    Node x=arrow.getA();    Node y=arrow.getB();    if (!arrow.getNaYX().equals(getNaYX(x,y))) {      continue;    }    if (!graph.isAdjacentTo(x,y))     continue;    Edge edge=graph.getEdge(x,y);    if (edge.pointsTowards(x))     continue;    HashSet<Node> diff=new HashSet<>(arrow.getNaYX());    diff.removeAll(arrow.getHOrT());    if (!validDelete(x,y,arrow.getHOrT(),arrow.getNaYX()))     continue;    Set<Node> H=arrow.getHOrT();    double bump=arrow.getBump();    boolean deleted=delete(x,y,H,bump,arrow.getNaYX());    if (!deleted)     continue;    score+=bump;    clearArrow(x,y);    Set<Node> visited=reapplyOrientation(x,y,H);    Set<Node> toProcess=new HashSet<>();    for (    Node node : visited) {      final Set<Node> neighbors=getNeighbors(node);      final Set<Node> storedNeighbors=this.neighbors.get(node);      if (!(neighbors.equals(storedNeighbors))) {        toProcess.add(node);      }    }    toProcess.add(x);    toProcess.add(y);    toProcess.addAll(getCommonAdjacents(x,y));    storeGraph();    reevaluateBackward(toProcess);  }  meekOrientRestricted(getVariables(),getKnowledge());}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void BeginRead(){  while (this.hasWriter || this.waitingWriters > 0) {    try {      this.wait();    } catch (    InterruptedException e) {      Assert.fail(EC.SYSTEM_INTERRUPTED);    }  }  this.numReaders++;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.287 -0500",hash_original_method="1DECC82647C03783DFB70A54A4715DCA",hash_generated_method="D01D43B09DAFD2BBAD87A5CC970B7DC0") public void drawBitmap(int[] colors,int offset,int stride,int x,int y,int width,int height,boolean hasAlpha,Paint paint){  drawBitmap(colors,offset,stride,(float)x,(float)y,width,height,hasAlpha,paint);}  }
class C{  public SelectResults filterEvaluate(ExecutionContext context,SelectResults intermediateResults,boolean completeExpansionNeeded,CompiledValue iterOperands,RuntimeIterator[] indpndntItrs,boolean isIntersection,boolean conditioningNeeded,boolean evalProj) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  if (!isDependentOnCurrentScope(context))   return super.filterEvaluate(context,intermediateResults);  IndexInfo[] idxInfo=getIndexInfo(context);  Support.Assert(idxInfo != null,"a comparison that is dependent, not indexed, and filter evaluated is not possible");  Support.Assert(idxInfo.length == 1,"In operator should have only one index");  return singleBaseCollectionFilterEvaluate(context,intermediateResults,completeExpansionNeeded,iterOperands,idxInfo[0],indpndntItrs,isIntersection,conditioningNeeded,evalProj);}  }
class C{  public static void generateJavaScriptLogSessionExpiredRelation(Writer writer,String idioma,Long numIdioma,String message,int enabled) throws IOException {  writer.write("<script language=\"javascript\">alert( \"" + message + "\" );");  if (enabled == 1) {    writer.write("if (window.dialogArguments[8].opener){window.dialogArguments[8].opener.location.href=\"./__index.jsp?Idioma=" + idioma + "&numIdioma="+ numIdioma+ "\";window.top.close();}");    writer.write("else {window.close();}");  } else {    writer.write("window.open(\"./__index.jsp?Idioma=" + idioma + "&numIdioma="+ numIdioma+ "\" , \"_top\",\"location=no\",true);");  }  writer.write("</script>");}  }
class C{  public void stop(){  if (!mRunning) {    return;  }  for (  SmashDispatcher dispatcher : mDispatchers) {    if (dispatcher != null) {      dispatcher.quit();    }  }}  }
class C{  public BlueMarbleLayer(){  this("http://worldwind25.arc.nasa.gov/wms");}  }
class C{  public TranslationImportException(Reason reason){  super(String.valueOf(reason));  setMessageKey(getMessageKey() + "." + reason);}  }
