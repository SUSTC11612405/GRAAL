class C{  @DataProvider(name="compositeData") public Object[][] createCompositeData(){  return new Object[][]{{new AuditLogFilter[]{TRUE,TRUE,TRUE},true,true},{new AuditLogFilter[]{TRUE,TRUE,FALSE},true,false},{new AuditLogFilter[]{TRUE,FALSE,TRUE},true,false},{new AuditLogFilter[]{TRUE,FALSE,FALSE},true,false},{new AuditLogFilter[]{FALSE,TRUE,TRUE},true,false},{new AuditLogFilter[]{FALSE,TRUE,FALSE},true,false},{new AuditLogFilter[]{FALSE,FALSE,TRUE},true,false},{new AuditLogFilter[]{FALSE,FALSE,FALSE},false,false}};}  }
class C{  public static boolean isSpace(int c){  return c < 0x10000 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public ScenarioBuilder tagLight(String tagName){  return tag(tagName,true);}  }
class C{  public void test_CtorLjava_io_OutputStreamLjava_security_MessageDigest(){  MessageDigest md=new MyMessageDigest1();  MyOutputStream out=new MyOutputStream();  MyDigestOutputStream dos=new MyDigestOutputStream(out,md);  assertSame(out,dos.myOutputStream());  assertSame(md,dos.myMessageDigest());  dos=new MyDigestOutputStream(null,null);  assertNull(dos.myOutputStream());  assertNull(dos.myMessageDigest());  dos=new MyDigestOutputStream(null,md);  assertNull(dos.myOutputStream());  assertNotNull(dos.myMessageDigest());  dos=new MyDigestOutputStream(out,null);  assertNotNull(dos.myOutputStream());  assertNull(dos.myMessageDigest());}  }
class C{  protected int positionForMouseEvent(MouseEvent e){  int newX=(e.getSource() == BasicSplitPaneDivider.this) ? (e.getX() + getLocation().x) : e.getX();  newX=Math.min(maxX,Math.max(minX,newX - offset));  return newX;}  }
class C{  public boolean isShowUsernameEnabled(){  return showUsernameEnabled;}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  return this;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return _fooLocalService.createFoo(fooId);}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  private void paintView(Graphics g){  Rectangle clip=g.getClipBounds();  JComponent view=(JComponent)getView();  if (view.getWidth() >= getWidth()) {    int x=view.getX();    int y=view.getY();    g.translate(x,y);    g.setClip(clip.x - x,clip.y - y,clip.width,clip.height);    view.paintForceDoubleBuffered(g);    g.translate(-x,-y);    g.setClip(clip.x,clip.y,clip.width,clip.height);  } else {    try {      inBlitPaint=true;      paintForceDoubleBuffered(g);    }  finally {      inBlitPaint=false;    }  }}  }
class C{  public SignedJwt reconstructAuthId(String authId) throws RestAuthException {  try {    return jwtBuilderFactory.reconstruct(authId,SignedJwt.class);  } catch (  JwtRuntimeException e) {    throw new RestAuthException(ResourceException.BAD_REQUEST,"Failed to parse JWT, " + e.getLocalizedMessage(),e);  }}  }
class C{  @Override public int doWrite(ByteChunk chunk) throws IOException {  int len=chunk.getLength();  int start=chunk.getStart();  byte[] b=chunk.getBuffer();  socketWrapper.write(isBlocking(),b,start,len);  byteCount+=len;  return len;}  }
class C{  public SQLNonTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public void deleteSubOrganizationalUnits(Set subOrganizationalUnitDNs) throws AMException, SSOException {  Iterator iter=subOrganizationalUnitDNs.iterator();  while (iter.hasNext()) {    String subOrganizationalUnitDN=(String)iter.next();    AMOrganizationalUnit subOrgUnit=new AMOrganizationalUnitImpl(super.token,subOrganizationalUnitDN);    subOrgUnit.delete();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS07.class,args);}  }
class C{  public OAuth2FlowFinder(OAuth2RequestFactory requestFactory,ExceptionHandler exceptionHandler,Map<String,Finder> endpointClasses){  this.requestFactory=requestFactory;  this.exceptionHandler=exceptionHandler;  this.endpointClasses=new ConcurrentHashMap<String,Finder>(endpointClasses);}  }
class C{  public void shape(char[] text,int start,int count,int context){  if (isContextual()) {    contextualShape(text,start,count,getIndexFromRange(context));  } else {    nonContextualShape(text,start,count);  }}  }
class C{  @Override public int read(byte[] bytes,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processBytes(bytes,offset,returnLength);  return returnLength;}  }
class C{  public boolean compressObjectClassSets(){  return compressObjectClassSets;}  }
class C{  public StringDate(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody,8);}  }
class C{  public static String normalize(CharSequence src,Form form){  return NormalizerBase.normalize(src.toString(),form);}  }
class C{  @Override public String toString(){  return toSQL();}  }
class C{  public void update(Graphics g){}  }
class C{  public RegexFileFilter(String pattern,int flags){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  public static List<ModificationType> values(){  return IMMUTABLE_ELEMENTS;}  }
class C{  public final void testGetDigestAlgorithm(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals("SHA-1",pssps.getDigestAlgorithm());}  }
class C{  public static Map<String,Set<String>> parse(CommandManager mgr,String fileName) throws CLIException {  BufferedReader in=null;  Map<String,Set<String>> attrValues=new HashMap<>();  try {    in=new BufferedReader(new FileReader(fileName));    String line=in.readLine();    while (line != null) {      line=line.trim();      if ((line.length() > 0) && !line.startsWith("#")) {        boolean retry=true;        int idx=0;        while (retry) {          idx=line.indexOf('=',idx + 1);          if (idx == -1) {            throw createIncorrectFormatException(mgr,line);          }          retry=(line.charAt(idx - 1) == '\\');        }        String key=line.substring(0,idx).trim();        String value=line.substring(idx + 1).trim();        key=stripEscapeChars(key);        Set<String> values=attrValues.get(key);        if (values == null) {          values=new HashSet<>();          attrValues.put(key,values);        }        values.add(hexToString(value));      }      line=in.readLine();    }  } catch (  IOException e) {    throw new CLIException(e,ExitCodes.IO_EXCEPTION);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }  return attrValues;}  }
class C{  ReasonsMask(){  this(0);}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits){  this.effectiveKeyBits=effectiveKeyBits;  iv=null;}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();  pos=mark;}  }
class C{  public InvalidCipherTextException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void appendNodes(NodeVector nodes){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.appendNodes(nodes);}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(1000);  String prefix="";  String secprefix="";  String libprefix="";  String uri="";  String securi="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;    libprefix=IFSConstants.LIB_PREFIX;    secprefix=WSSEConstants.TAG_SEC + ":";  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;    securi=" " + WSSEConstants.TAG_XMLNS + ":"+ WSSEConstants.TAG_SEC+ "="+ "\""+ WSSEConstants.NS_SEC+ "\"";  }  try {    xml.append("<").append(secprefix).append(WSSEConstants.TAG_SESSIONCONTEXTSTATEMENT).append(securi).append(">\n");    xml.append(this._subject.toString(includeNS,true));    if (_proxySubject != null) {      xml.append(_proxySubject.toString(includeNS,declareNS));    }    xml.append(_sessionContext.toXMLString(includeNS,declareNS));    xml.append("</").append(secprefix).append("SessionContextStatement>");  } catch (  Exception e) {    return null;  }  return (xml.toString());}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public final long readLong() throws IOException {  readFully(readBuffer,0,8);  return (((long)readBuffer[0] << 56) + ((long)(readBuffer[1] & 255) << 48) + ((long)(readBuffer[2] & 255) << 40)+ ((long)(readBuffer[3] & 255) << 32)+ ((long)(readBuffer[4] & 255) << 24)+ ((readBuffer[5] & 255) << 16)+ ((readBuffer[6] & 255) << 8)+ ((readBuffer[7] & 255) << 0));}  }
class C{  public boolean isObfuscated(final Argument argument){  return obfuscatedArgs.contains(argument);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public void test_parseLjava_io_InputStreamLjava_lang_String(){  InputStream is=getClass().getResourceAsStream("/systemid.xml");  try {    Document d=db.parse(is,SAXParserTestSupport.XML_SYSTEM_ID);    assertNotNull(d);    assertEquals(4,d.getChildNodes().getLength());    assertEquals("collection",d.getChildNodes().item(0).getNodeName());    assertEquals("#comment",d.getChildNodes().item(1).getNodeName());    assertEquals("collection",d.getChildNodes().item(2).getNodeName());    assertEquals("#comment",d.getChildNodes().item(3).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputStream)null,SAXParserTestSupport.XML_SYSTEM_ID);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=getClass().getResourceAsStream("/wrong.xml");    db.parse(is,SAXParserTestSupport.XML_SYSTEM_ID);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  private LocalizableMessage checkAnyListenAddressInUse(Collection<InetAddress> listenAddresses,int listenPort,boolean allowReuseAddress,DN configEntryDN){  for (  InetAddress a : listenAddresses) {    try {      if (isAddressInUse(a,listenPort,allowReuseAddress)) {        throw new IOException(ERR_CONNHANDLER_ADDRESS_INUSE.get().toString());      }    } catch (    IOException e) {      logger.traceException(e);      return ERR_CONNHANDLER_CANNOT_BIND.get("HTTP",configEntryDN,a.getHostAddress(),listenPort,getExceptionMessage(e));    }  }  return null;}  }
class C{  void declarePrefix(String prefix,String uri){  if (!declSeen) {    copyTables();  }  if (declarations == null) {    declarations=new ArrayList<>();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.add(prefix);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if ((argNum < 1) || (argNum > 2))   reportWrongNumberArgs();}  }
class C{  public boolean isConnected(){  return mClient.isConnected();}  }
class C{  public static void cloneServerInstance(SSOToken token,String serverName,String cloneName) throws SSOException, SMSException, ConfigurationException {  cloneServerInstance(token,serverName,cloneName,getNextId(token));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ServiceRef[");  sb.append("className=");  sb.append(getClassName());  sb.append(",factoryClassLocation=");  sb.append(getFactoryClassLocation());  sb.append(",factoryClassName=");  sb.append(getFactoryClassName());  Enumeration<RefAddr> refAddrs=getAll();  while (refAddrs.hasMoreElements()) {    RefAddr refAddr=refAddrs.nextElement();    sb.append(",{type=");    sb.append(refAddr.getType());    sb.append(",content=");    sb.append(refAddr.getContent());    sb.append("}");  }  sb.append("]");  return (sb.toString());}  }
class C{  public AccountUsableResponseControl(boolean isInactive,boolean isReset,boolean isExpired,int remainingGraceLogins,boolean isLocked,int secondsBeforeUnlock){  this(false,isInactive,isReset,isExpired,remainingGraceLogins,isLocked,secondsBeforeUnlock);}  }
class C{  @Override public void lifecycleEvent(LifecycleEvent event){  if (Lifecycle.START_EVENT.equals(event.getType())) {    component=event.getLifecycle();    createMBeans();  } else   if (Lifecycle.STOP_EVENT.equals(event.getType())) {    destroyMBeans();    component=null;  }}  }
class C{  private ConditionResult processEquality(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_EQUALITY_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (assertionValue == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_EQUALITY_NO_ASSERTION_VALUE.get(entry.getName(),toString(),getAttributeType().getNameOrOID());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);  if (isEmpty(attrs)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for equality component %s in " + "filter %s because entry %s didn't have attribute " + "type %s",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());    }    return ConditionResult.FALSE;  }  MatchingRule matchingRule=getAttributeType().getEqualityMatchingRule();  if (matchingRule == null) {    if (logger.isTraceEnabled()) {      logger.trace("Attribute type %s does not have an equality matching " + "rule -- returning undefined.",getAttributeType().getNameOrOID());    }    return ConditionResult.UNDEFINED;  }  ConditionResult result=ConditionResult.FALSE;  for (  Attribute a : attrs) {    final ConditionResult cr=a.matchesEqualityAssertion(assertionValue);    if (cr == ConditionResult.TRUE) {      if (logger.isTraceEnabled()) {        logger.trace("Returning TRUE for equality component %s in filter %s " + "for entry %s",this,completeFilter,entry.getName());      }      return ConditionResult.TRUE;    } else     if (cr == ConditionResult.UNDEFINED) {      result=ConditionResult.UNDEFINED;    }  }  if (logger.isTraceEnabled()) {    logger.trace("Returning %s for equality component %s in filter %s " + "because entry %s didn't have attribute type %s with value %s",result,this,completeFilter,entry.getName(),getAttributeType().getNameOrOID(),assertionValue);  }  return result;}  }
class C{  public String encode(){  return userName + Separators.AT + hostName;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  boolean state;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  state=domesticAttr.getSpecified();  assertTrue("acronymTitleSpecified",state);}  }
class C{  protected void createPrimaryIndicator(Request request) throws IOException {  String id=request.getRequestedSessionId();  if ((id != null) && (id.length() > 0)) {    Manager manager=request.getContext().getManager();    Session session=manager.findSession(id);    if (session instanceof ClusterSession) {      ClusterSession cses=(ClusterSession)session;      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.session.indicator",request.getContext().getName(),id,primaryIndicatorName,Boolean.valueOf(cses.isPrimarySession())));      }      request.setAttribute(primaryIndicatorName,cses.isPrimarySession() ? Boolean.TRUE : Boolean.FALSE);    } else {      if (log.isDebugEnabled()) {        if (session != null) {          log.debug(sm.getString("ReplicationValve.session.found",request.getContext().getName(),id));        } else {          log.debug(sm.getString("ReplicationValve.session.invalid",request.getContext().getName(),id));        }      }    }  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int minWidth=insets.left + insets.right;  int minHeight=insets.top + insets.bottom;  if (viewport != null) {    Dimension size=viewport.getMinimumSize();    minWidth+=size.width;    minHeight+=size.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    minWidth+=vpbInsets.left + vpbInsets.right;    minHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    Dimension size=rowHead.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((colHead != null) && colHead.isVisible()) {    Dimension size=colHead.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    Dimension size=vsb.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((hsb != null) && (hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER)) {    Dimension size=hsb.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  return new Dimension(minWidth,minHeight);}  }
class C{  public static ScheduleOption defaultValue(){  return RUN_NOW;}  }
class C{  public void invoke(String invokeMethod,Marshallable param,ClientCallback clientCallback){  TransactInfo transactInfo=TransactInfo.createDirectInvoke(invokeMethod);  mClientProxy.transact(transactInfo,param,clientCallback);}  }
class C{  public static boolean isOnline(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo netInfo=cm.getActiveNetworkInfo();  if (netInfo != null && netInfo.isConnectedOrConnecting()) {    return true;  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.BirthdayElement createBirthdayElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.BirthdayElementImpl();}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public void requestSecondsUntilPasswordExpiration(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_EXPIRATION);}  }
class C{  @Override public String toString(){  return content;}  }
class C{  public boolean isUrlable(){  return URLABLE_TAGS.contains(getLocalName());}  }
class C{  public void handleTblButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH);  table.restoreStateData();  Integer[] selected=tblModel.getSelectedRows();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    tblModel.setRowIndex(selected[i].intValue());    names.add((String)tblModel.getValue(TF_DATA_NAME));  }  try {    ServicesModel model=(ServicesModel)getModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.unassignServices(curRealm,names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","services.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","services.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  public static boolean isCoexistenceMode(){  isRealmEnabled();  return (coexistenceCache);}  }
class C{  public void testIsDefaultNamespaceNull_XercesBugs(){  String message="isDefaultNamespace() should be consistent with lookupNamespaceURI(null)";  assertTrue(message,doctype.isDefaultNamespace(null));  if (sp != null) {    assertTrue(message,sp.isDefaultNamespace(null));  }  if (png != null) {    assertTrue(message,png.isDefaultNamespace(null));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode03.class,args);}  }
class C{  @Override public boolean isRequestedSessionIdFromURL(){  return this._getHttpServletRequest().isRequestedSessionIdFromURL();}  }
class C{  private void processInput(boolean endOfInput) throws IOException {  decoderIn.flip();  CoderResult coderResult;  while (true) {    coderResult=decoder.decode(decoderIn,decoderOut,endOfInput);    if (coderResult.isOverflow()) {      flushOutput();    } else     if (coderResult.isUnderflow()) {      break;    } else {      throw new IOException("Unexpected coder result");    }  }  decoderIn.compact();}  }
class C{  public float dot(Vector with){  return vals[I1] * with.vals[I1] + vals[I2] * with.vals[I2] + vals[I3] * with.vals[I3];}  }
class C{  void dndDone(){}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void merge(Map map){  if (map == null) {    throw new NullPointerException();  }  if (!byteValues) {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String name=(String)itr.next();      Set values=(Set)this.get(name);      if (values != null) {        values.addAll((Set)map.get(name));      } else {        this.put(name,(Set)map.get(name));      }    }  } else {    putAll(map);  }}  }
class C{  private Instruction insertOrReplaceInstruction(Instruction instruction) throws JavaSpecificationViolation {  if (GetGraphicsParser.handles(instruction))   return addLoadAndTraceInstructions(EventKind.GETGRAPHICS,true); else   if (CreateGraphicsParser.handles(instruction))   return addLoadAndTraceInstructions(EventKind.CREATEGRAPHICS,true); else {    instructions.add(instruction);    return null;  }}  }
class C{  public Map preProcessModify(SSOToken token,String entryDN,Map oldAttributes,Map newAttributes,int objectType) throws AMPreCallBackException {  return newAttributes;}  }
class C{  public boolean documentIsEmpty(){  return m_docIsEmpty && (m_elemContext.m_currentElemDepth == 0);}  }
class C{  public X509EncodedKeySpec(byte[] encodedKey){  super(encodedKey);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void clearGraceLoginTimes(){  logger.trace("Clearing grace login times for user %s",userDNString);  List<Long> graceTimes=getGraceLoginTimes();  if (!graceTimes.isEmpty()) {    graceTimes.clear();    clearAttribute(OP_ATTR_PWPOLICY_GRACE_LOGIN_TIME);  }}  }
class C{  @Override public void run(){  LocalizableMessage disconnectMessage=INFO_IDLETIME_LIMIT_EXCEEDED.get();  long sleepTime=5000L;  while (!shutdownRequested) {    try {synchronized (shutdownLock) {        if (!shutdownRequested) {          try {            shutdownLock.wait(sleepTime);          } catch (          InterruptedException e) {            logger.traceException(e);            shutdownRequested=true;            break;          }        }      }      sleepTime=5000L;      for (      ConnectionHandler<?> ch : DirectoryServer.getConnectionHandlers()) {        for (        ClientConnection c : ch.getClientConnections()) {          if (c == null) {            logger.trace("Null client connection found in \"" + ch.getConnectionHandlerName() + "\"");            continue;          }          long idleTime=c.getIdleTime();          if (idleTime > 0) {            long idleTimeLimit=c.getIdleTimeLimit();            if (idleTimeLimit > 0) {              if (idleTime >= idleTimeLimit) {                if (logger.isTraceEnabled()) {                  logger.trace("Terminating client connection " + c.getConnectionID() + " due to the idle time limit");                }                try {                  c.disconnect(DisconnectReason.IDLE_TIME_LIMIT_EXCEEDED,true,disconnectMessage);                } catch (                Exception e) {                  logger.traceException(e);                  logger.error(ERR_IDLETIME_DISCONNECT_ERROR,c.getConnectionID(),stackTraceToSingleLineString(e));                }              } else {                long shouldSleepTime=idleTimeLimit - idleTime;                if (shouldSleepTime < sleepTime) {                  sleepTime=shouldSleepTime;                }              }            }          }        }      }    } catch (    Exception e) {      logger.traceException(e);      logger.error(ERR_IDLETIME_UNEXPECTED_ERROR,stackTraceToSingleLineString(e));    }  }}  }
class C{  boolean nameRefsAreLegal(){  assert (arity >= 0 && arity <= names.length);  assert (result >= -1 && result < names.length);  for (int i=0; i < arity; i++) {    Name n=names[i];    assert (n.index() == i) : Arrays.asList(n.index(),i);    assert (n.isParam());  }  for (int i=arity; i < names.length; i++) {    Name n=names[i];    assert (n.index() == i);    for (    Object arg : n.arguments) {      if (arg instanceof Name) {        Name n2=(Name)arg;        int i2=n2.index;        assert (0 <= i2 && i2 < names.length) : n.debugString() + ": 0 <= i2 && i2 < names.length: 0 <= " + i2+ " < "+ names.length;        assert (names[i2] == n2) : Arrays.asList("-1-",i,"-2-",n.debugString(),"-3-",i2,"-4-",n2.debugString(),"-5-",names[i2].debugString(),"-6-",this);        assert (i2 < i);      }    }  }  return true;}  }
class C{  public NoSuchMechanismException(String message){  super(message);}  }
class C{  void iconst(final int cst){  if (cst >= -1 && cst <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + cst);  } else   if (cst >= Byte.MIN_VALUE && cst <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,cst);  } else   if (cst >= Short.MIN_VALUE && cst <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,cst);  } else {    mv.visitLdcInsn(cst);  }}  }
class C{  public int responseCode(){  return responseCode;}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  @Override public void destroy(){}  }
class C{  public String createHttpConnector(String parent,String address,int port) throws Exception {  return createConnector(parent,address,port,false,false);}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public StringEncoderComparator(StringEncoder stringEncoder){  this.stringEncoder=stringEncoder;}  }
class C{  public LineBorder(Color color,int thickness){  this(color,thickness,false);}  }
class C{  public void testGetNotBefore(){  if (this.cert == null) {    return;  }  assertEquals("The NotBefore date is not correct.",tbt_cert.getNotBefore(),cert.getNotBefore());}  }
class C{  public SchemaViolationException(String explanation){  super(explanation);}  }
class C{  private ServiceTypeManager(PolicyManager pm){  token=pm.token;}  }
class C{  protected ServletOutputStream createOutputStream() throws IOException {  if (debug > 1) {    System.out.println("createOutputStream gets called");  }  CompressionResponseStream stream=new CompressionResponseStream(this,origResponse.getOutputStream());  stream.setDebugLevel(debug);  stream.setCompressionThreshold(compressionThreshold);  stream.setCompressionBuffer(compressionBuffer);  stream.setCompressionMimeTypes(compressionMimeTypes);  return stream;}  }
class C{  @Override public void clear(){  this.callStack.clear();  super.clear();}  }
class C{  public MarkovNameGenerator build() throws IllegalStateException {  checkState();  return new MarkovNameGenerator(this);}  }
class C{  @Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  private void addValueInRefsTable(XPathContext xctxt,XMLString ref,int node){  XNodeSet nodes=(XNodeSet)m_refsTable.get(ref);  if (nodes == null) {    nodes=new XNodeSet(node,xctxt.getDTMManager());    nodes.nextNode();    m_refsTable.put(ref,nodes);  } else {    if (nodes.getCurrentNode() != node) {      nodes.mutableNodeset().addNode(node);      nodes.nextNode();    }  }}  }
class C{  public static void fill(float[] array,int start,int end,float value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  static String serializeNodeValue(Object value){  String strValue;  if (value == null) {    strValue=null;  } else   if (value instanceof Boolean) {    strValue=XMPUtils.convertFromBoolean((boolean)value);  } else   if (value instanceof Integer) {    strValue=XMPUtils.convertFromInteger((int)value);  } else   if (value instanceof Long) {    strValue=XMPUtils.convertFromLong((long)value);  } else   if (value instanceof Double) {    strValue=XMPUtils.convertFromDouble((double)value);  } else   if (value instanceof XMPDateTime) {    strValue=XMPUtils.convertFromDate((XMPDateTime)value);  } else   if (value instanceof GregorianCalendar) {    XMPDateTime dt=XMPDateTimeFactory.createFromCalendar((GregorianCalendar)value);    strValue=XMPUtils.convertFromDate(dt);  } else   if (value instanceof byte[]) {    strValue=XMPUtils.encodeBase64((byte[])value);  } else {    strValue=value.toString();  }  return strValue != null ? Utils.removeControlChars(strValue) : null;}  }
class C{  protected String paramNameOrValue() throws ParseException {  int startIdx=lexer.getPtr();  while (lexer.hasMoreChars()) {    char next=lexer.lookAhead(0);    boolean isValidChar=false;switch (next) {case '[':case ']':case '/':case ':':case '&':case '+':case '$':      isValidChar=true;  }  if (isValidChar || isUnreserved(next)) {    lexer.consume(1);  } else   if (isEscaped()) {    lexer.consume(3);  } else   break;}return lexer.getBuffer().substring(startIdx,lexer.getPtr());}  }
class C{  public boolean equals(Object resourceMatch){  if (resourceMatch instanceof ResourceMatch) {    ResourceMatch rm=(ResourceMatch)resourceMatch;    return (rm.resourceMatch.equals(this.resourceMatch));  }  return (false);}  }
class C{  public void remove_items_unfixed(Collection<BrdItem> p_item_list){  for (  BrdItem curr_item : p_item_list) {    if (curr_item.is_delete_fixed() || curr_item.is_user_fixed())     continue;    remove_item(curr_item);  }}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  handleRemove(changes.getOffset(),changes.getLength());  super.removeUpdate(changes,a,f);}  }
class C{  public ArtifactResolve createArtifactResolve(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESOLVE,elem);  if (obj == null) {    return new ArtifactResolveImpl(elem);  } else {    return (ArtifactResolve)obj;  }}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  cstate.popStackMark();}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  protected void indent(int depth) throws IOException {  if (m_startNewLine)   outputLineSep();  if (m_indentAmount > 0)   printSpace(depth * m_indentAmount);}  }
class C{  public void testIsSupported1() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",builder);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XXX","1.0");  assertFalse("throw_False",state);}  }
class C{  public synchronized V remove(Object key){  Entry<?,?> tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)tab[index];  for (Entry<K,V> prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      modCount++;      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      V oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public static Object createInstanceAndCallStaticMethod(Configuration config,String className,String methodName) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  DexClassLoader dcl=createInstance(config);  Class c=dcl.loadClass(className);  Method m=c.getMethod(methodName,(Class[])null);  return m.invoke(null,(Object[])null);}  }
class C{  public void testCipherSpi04() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineUnwrap(new byte[0],"",0);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().updateFoo(foo);}  }
class C{  public Component add(Component c,int index){  ensurePopupMenuCreated();  popupMenu.add(c,index);  return c;}  }
class C{  public boolean warningEnabled(){  return debugInst.warningEnabled();}  }
class C{  @Override public String listStatus(String path) throws MalformedURLException, IOException, AuthenticationException {  ensureValidToken();  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=LISTSTATUS",URLUtil.encodePath(path))),token);  conn.setRequestMethod("GET");  conn.connect();  String resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  public X509Principal(boolean reverse,String dirName){  super(reverse,dirName);}  }
class C{  public void testConstrCharIntInt(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  BigDecimal result=new BigDecimal(value,offset,len);  String res="3.804738E-40";  int resScale=46;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public boolean isIssued(){  String issued=getStringProperty(ISSUED);  return issued != null && Boolean.parseBoolean(issued);}  }
class C{  public X500Principal(String name){  if (name == null) {    throw new NullPointerException("name == null");  }  try {    dn=new Name(name);  } catch (  IOException e) {    throw incorrectInputName(e,name);  }}  }
class C{  public void addOfflineReplica(DN baseDN,CSN offlineCSN){  offlineReplicas.update(baseDN,offlineCSN);}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties){  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public boolean useSSL(){  return currentConfig.isUseSSL();}  }
class C{  public boolean hashData(){  return hashData;}  }
class C{  public UnrecoverableKeyException(){  super();}  }
class C{  private void subFormat(int patternCharIndex,int count,FieldDelegate delegate,StringBuffer buffer,boolean useDateFormatSymbols){  int maxIntCount=Integer.MAX_VALUE;  String current=null;  int beginOffset=buffer.length();  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];  int value;  if (field == CalendarBuilder.WEEK_YEAR) {    if (calendar.isWeekDateSupported()) {      value=calendar.getWeekYear();    } else {      patternCharIndex=PATTERN_YEAR;      field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];      value=calendar.get(field);    }  } else   if (field == CalendarBuilder.ISO_DAY_OF_WEEK) {    value=CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));  } else {    value=calendar.get(field);  }  int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;  if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) {    current=calendar.getDisplayName(field,style,locale);  }switch (patternCharIndex) {case PATTERN_ERA:    if (useDateFormatSymbols) {      String[] eras=formatData.getEras();      if (value < eras.length) {        current=eras[value];      }    }  if (current == null) {    current="";  }break;case PATTERN_WEEK_YEAR:case PATTERN_YEAR:if (calendar instanceof GregorianCalendar) {if (count != 2) {  zeroPaddingNumber(value,count,maxIntCount,buffer);} else {  zeroPaddingNumber(value,2,2,buffer);}} else {if (current == null) {  zeroPaddingNumber(value,style == Calendar.LONG ? 1 : count,maxIntCount,buffer);}}break;case PATTERN_MONTH:if (useDateFormatSymbols) {String[] months;if (count >= 4) {months=formatData.getMonths();current=months[value];} else if (count == 3) {months=formatData.getShortMonths();current=months[value];}} else {if (count < 3) {current=null;} else if (forceStandaloneForm) {current=calendar.getDisplayName(field,style | 0x8000,locale);if (current == null) {current=calendar.getDisplayName(field,style,locale);}}}if (current == null) {zeroPaddingNumber(value + 1,count,maxIntCount,buffer);}break;case PATTERN_MONTH_STANDALONE:assert current == null;if (locale == null) {String[] months;if (count >= 4) {months=formatData.getMonths();current=months[value];} else if (count == 3) {months=formatData.getShortMonths();current=months[value];}} else {if (count >= 3) {current=calendar.getDisplayName(field,style | 0x8000,locale);}}if (current == null) {zeroPaddingNumber(value + 1,count,maxIntCount,buffer);}break;case PATTERN_HOUR_OF_DAY1:if (current == null) {if (value == 0) {zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1,count,maxIntCount,buffer);} else {zeroPaddingNumber(value,count,maxIntCount,buffer);}}break;case PATTERN_DAY_OF_WEEK:if (useDateFormatSymbols) {String[] weekdays;if (count >= 4) {weekdays=formatData.getWeekdays();current=weekdays[value];} else {weekdays=formatData.getShortWeekdays();current=weekdays[value];}}break;case PATTERN_AM_PM:if (useDateFormatSymbols) {String[] ampm=formatData.getAmPmStrings();current=ampm[value];}break;case PATTERN_HOUR1:if (current == null) {if (value == 0) {zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1,count,maxIntCount,buffer);} else {zeroPaddingNumber(value,count,maxIntCount,buffer);}}break;case PATTERN_ZONE_NAME:if (current == null) {if (formatData.locale == null || formatData.isZoneStringsSet) {int zoneIndex=formatData.getZoneIndex(calendar.getTimeZone().getID());if (zoneIndex == -1) {value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);buffer.append(ZoneInfoFile.toCustomID(value));} else {int index=(calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3;if (count < 4) {index++;}String[][] zoneStrings=formatData.getZoneStringsWrapper();buffer.append(zoneStrings[zoneIndex][index]);}} else {TimeZone tz=calendar.getTimeZone();boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);int tzstyle=(count < 4 ? TimeZone.SHORT : TimeZone.LONG);buffer.append(tz.getDisplayName(daylight,tzstyle,formatData.locale));}}break;case PATTERN_ZONE_VALUE:value=(calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000;int width=4;if (value >= 0) {buffer.append('+');} else {width++;}int num=(value / 60) * 100 + (value % 60);CalendarUtils.sprintf0d(buffer,num,width);break;case PATTERN_ISO_ZONE:value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);if (value == 0) {buffer.append('Z');break;}value/=60000;if (value >= 0) {buffer.append('+');} else {buffer.append('-');value=-value;}CalendarUtils.sprintf0d(buffer,value / 60,2);if (count == 1) {break;}if (count == 3) {buffer.append(':');}CalendarUtils.sprintf0d(buffer,value % 60,2);break;default :if (current == null) {zeroPaddingNumber(value,count,maxIntCount,buffer);}break;}if (current != null) {buffer.append(current);}int fieldID=PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];Field f=PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];delegate.formatted(fieldID,f,f,beginOffset,buffer.length(),buffer);}  }
class C{  public StoreException(Throwable cause){  super(cause);}  }
class C{  public boolean is_on_the_left(ShapeTile p_tile){  int border_line_count=p_tile.border_line_count();  for (int index=0; index < border_line_count; ++index) {    if (side_of(p_tile.corner(index)) == PlaSide.ON_THE_RIGHT)     return false;  }  return true;}  }
class C{  public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public RecordingInputStream(InputStream parentStream){  this.enableRecording=false;  this.parentStream=parentStream;  this.buffer=new ByteStringBuilder(32);}  }
class C{  private void runSearchChildren() throws SearchAbandonException {  ConnectionWithControls conn=null;  BasicNode parentNode=getNode();  parentNode.setSizeLimitReached(false);  try {    conn=controller.findConnectionForDisplayedEntry(parentNode);    DN parentDn=controller.findBaseDNForChildEntries(parentNode);    int parentComponents=parentDn.size();    SearchRequest request=newSearchRequest(parentDn,useCustomFilter() ? WHOLE_SUBTREE : SINGLE_LEVEL,controller.getChildSearchFilter(),controller.getAttrsForRedSearch()).setSizeLimit(controller.getMaxChildren());    try (ConnectionEntryReader entries=conn.search(request)){      while (entries.hasNext()) {        SearchResultEntry r=entries.readEntry();        if (r.getName().isRootDN()) {          continue;        }        boolean add=false;        if (useCustomFilter()) {          final DN dn=r.getName();          add=dn.size() == parentComponents + 1;          if (!add) {            RDN[] rdns=new RDN[parentComponents + 1];            final DN parentToAddDN=dn.parent(dn.size() - rdns.length);            boolean mustAddParent=mustAddParent(parentToAddDN) && mustAddParent2(parentToAddDN);            if (mustAddParent) {              SearchResultEntry parentResult=searchManuallyEntry(conn,parentToAddDN);              childEntries.add(parentResult);            }          }        } else {          add=true;        }        if (add) {          childEntries.add(r);          if (childEntries.size() >= 20) {            changeStateTo(State.SEARCHING_CHILDREN);            childEntries.clear();          }        }        throwAbandonIfNeeded(null);      }    }   } catch (  LdapException e) {    if (e.getResult().getResultCode() == ResultCode.SIZE_LIMIT_EXCEEDED) {      parentNode.setSizeLimitReached(true);    } else {      throwAbandonIfNeeded(e);    }  }catch (  IOException e) {    throwAbandonIfNeeded(e);  } finally {    if (conn != null) {      controller.releaseLDAPConnection(conn);    }  }}  }
class C{  public ServicesSelectViewBean(){  super("ServicesSelect");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static PropertyException propertyIsReadOnlyException(final PropertyDefinition<?> pd){  return new PropertyException(pd,ERR_PROPERTY_IS_READ_ONLY_EXCEPTION.get(pd.getName()));}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WSFederationAction action=WSFederationActionFactory.createAction(request,response);  if (action == null) {    WSFederationUtils.debug.error("Can't create WSFederationAction");    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  try {    action.process();  } catch (  WSFederationException wsfe) {    if (WSFederationUtils.debug.messageEnabled()) {      WSFederationUtils.debug.message("WSFedServlet.doPost:Can't process action",wsfe);    }    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }}  }
class C{  public static JLabel createDefaultLabel(LocalizableMessage text){  JLabel label=new JLabel(text.toString());  label.setFont(ColorAndFontConstants.defaultFont);  label.setForeground(ColorAndFontConstants.foreground);  return label;}  }
class C{  static boolean shouldUpdateStyle(PropertyChangeEvent event){  LookAndFeel laf=UIManager.getLookAndFeel();  return (laf instanceof SynthLookAndFeel && ((SynthLookAndFeel)laf).shouldUpdateStyleOnEvent(event));}  }
class C{  @Override public int hashCode(){  return isPresent ? Long.hashCode(value) : 0;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public ByteString hash48(ByteSequence data) throws DecodeException {  try {    byte[] hash=cryptoManager.digest("SHA-1",data.toByteArray());    return ByteString.valueOfBytes(hash,0,6);  } catch (  NoSuchAlgorithmException e) {    throw DecodeException.error(ERR_CANNOT_HASH_DATA.get());  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public static void logEndRecords(){  if (lmgr != null) {    try {      SSOToken ssot=getLoggingSSOToken();      LogMessageProviderBase provider=(LogMessageProviderBase)MessageProviderFactory.getProvider("Logging");      String[] s=new String[1];      Enumeration e=lmgr.getLoggerNames();      com.sun.identity.log.LogRecord lr=null;      while (e.hasMoreElements()) {        String logger=(String)e.nextElement();        if (logger.length() != 0 && !logger.equals("global")) {          Logger result=(Logger)Logger.getLogger(logger);          s[0]=logger;          lr=provider.createLogRecord(LogConstants.END_LOG_NAME,s,ssot);          result.log(lr,ssot);          result.flush();        }      }    } catch (    IOException ioex) {    }  }}  }
class C{  @Override public Expected<T> ifEmpty(final Runnable runnable){  if (isEmpty()) {    runnable.run();  }  return this;}  }
class C{  protected void releaseConnection(){  try {    managedConn.releaseConnection();  } catch (  IOException ignored) {    this.log.debug("IOException releasing connection",ignored);  }  managedConn=null;}  }
class C{  public static PdfAction createMovie(PdfAnnotation annotation,String title,PdfName operation){  PdfAction action=new PdfAction().put(PdfName.S,PdfName.Movie).put(PdfName.T,new PdfString(title)).put(PdfName.Operation,operation);  if (annotation != null) {    action.put(PdfName.Annotation,annotation.getPdfObject());  }  return action;}  }
class C{  public MultipleRealmsFoundException(String realm){  super(IdRepoErrorCode.MULTIPLE_MAPPINGS_FOUND,realm);}  }
class C{  protected static void overrideTemplateParameters(Template template,MavenProject project,Logger log){  List<io.fabric8.openshift.api.model.Parameter> parameters=template.getParameters();  if (parameters != null && project != null) {    Properties properties=getProjectAndFabric8Properties(project);    boolean missingProperty=false;    for (    io.fabric8.openshift.api.model.Parameter parameter : parameters) {      String parameterName=parameter.getName();      String name="fabric8.apply." + parameterName;      String propertyValue=properties.getProperty(name);      if (propertyValue != null) {        log.info("Overriding template parameter " + name + " with value: "+ propertyValue);        parameter.setValue(propertyValue);      } else {        missingProperty=true;        log.info("No property defined for template parameter: " + name);      }    }    if (missingProperty) {      log.debug("Current properties " + new TreeSet<>(properties.keySet()));    }  }}  }
class C{  public static boolean isFileTypeSupported(int fileType,Sequence sequence){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,sequence)) {      return true;    }  }  return false;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS06.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetimplementation.class,args);}  }
class C{  public void removeActionListener(ActionListener l){  listeners.remove(l);}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  public Node removeNamedItemNS(String namespaceURI,String localName){  return removeNamedItem(localName);}  }
class C{  public DOMSource(Node n){  setNode(n);}  }
class C{  public double toDouble(){  XMLString s=trim();  double result=Double.NaN;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c != '-' && c != '.' && (c < 0X30 || c > 0x39)) {      return result;    }  }  try {    result=Double.parseDouble(s.toString());  } catch (  NumberFormatException e) {  }  return result;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(PROXY_RESTRICTION_ELEMENT).append(NS);  if (count >= 0) {    sb.append(" ").append(COUNT_ATTR).append("=\"").append(count).append("\"");  }  sb.append(">\n");  int length=0;  if ((audiences != null) && ((length=audiences.size()) > 0)) {    for (int i=0; i < length; i++) {      String au=(String)audiences.get(i);      sb.append("<").append(appendNS).append(AUDIENCE_ELEMENT).append(">").append(au).append("</").append(appendNS).append(AUDIENCE_ELEMENT).append(">\n");    }  }  sb.append("</").append(appendNS).append(PROXY_RESTRICTION_ELEMENT).append(">\n");  return sb.toString();}  }
class C{  public static Object convertInputStreamToJAXB(InputStream is) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(XMLUtils.createSAXSource(new InputSource(is)));}  }
class C{  MinguoDate(LocalDate isoDate){  Objects.requireNonNull(isoDate,"isoDate");  this.isoDate=isoDate;}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  final void advance(){  for (; ; ) {    if (nextTableIndex >= 0) {      if ((nextEntry=entryAt(currentTable,nextTableIndex--)) != null)       break;    } else     if (nextSegmentIndex >= 0) {      Segment<K,V> seg=segmentAt(segments,nextSegmentIndex--);      if (seg != null && (currentTable=seg.table) != null)       nextTableIndex=currentTable.length - 1;    } else     break;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementName;  doc=(Document)load("hc_staff",false);  elementNode=doc.getDocumentElement();  elementName=elementNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEqualsAutoCase("element","nodeName","html",elementName);  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if ((messageValue != null) && (messageValue.length() != 0)) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.STATUS_MESSAGE);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG);    xmlString.append(SAML2Constants.NEWLINE).append(messageValue);    xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.STATUS_MESSAGE).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  public QRCode(){  mode=null;  ecLevel=null;  version=-1;  matrixWidth=-1;  maskPattern=-1;  numTotalBytes=-1;  numDataBytes=-1;  numECBytes=-1;  numRSBlocks=-1;  matrix=null;}  }
class C{  public boolean addSASLProperty(String property){  int idx=property.indexOf("=");  if (idx == -1) {    System.err.println("Invalid SASL property format:" + property);    return false;  }  String key=property.substring(0,idx);  String value=property.substring(idx + 1,property.length());  List<String> valList=saslProperties.get(key);  if (valList == null) {    valList=new ArrayList<>();  }  valList.add(value);  saslProperties.put(key,valList);  return true;}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    cipher.processBlock(buf,0,block,0);    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    for (int i=bufOff; i != buf.length; i++) {      buf[i]=block[i - blockSize];    }    for (int i=blockSize; i != bufOff; i++) {      buf[i]^=block[i - blockSize];    }    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,blockSize,out,outOff);    } else {      cipher.processBlock(buf,blockSize,out,outOff);    }    System.arraycopy(block,0,out,outOff + blockSize,len);  } else {    byte[] lastBlock=new byte[blockSize];    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,0,block,0);    } else {      cipher.processBlock(buf,0,block,0);    }    for (int i=blockSize; i != bufOff; i++) {      lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);    }    System.arraycopy(buf,blockSize,block,0,len);    cipher.processBlock(block,0,out,outOff);    System.arraycopy(lastBlock,0,out,outOff + blockSize,len);  }  int offset=bufOff;  reset();  return offset;}  }
class C{  public static void main(final String[] args){  final int retCode=new LDIFSearch().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public void cloneSubtree(XMPNode destination){  try {    for (Iterator it=iterateChildren(); it.hasNext(); ) {      XMPNode child=(XMPNode)it.next();      destination.addChild((XMPNode)child.clone());    }    for (Iterator it=iterateQualifier(); it.hasNext(); ) {      XMPNode qualifier=(XMPNode)it.next();      destination.addQualifier((XMPNode)qualifier.clone());    }  } catch (  XMPException e) {    assert false;  }}  }
class C{  public void testDoubleValueNegRounded1(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=-1;  double result=-1.54747264387948E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public LinkRef(String linkName){  super(linkClassName,new StringRefAddr(linkAddrType,linkName));}  }
class C{  public static String downloadString(String url,int triesCount) throws MalformedURLException {  return downloadString(new URL(url),null,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,"utf-8",triesCount);}  }
class C{  public String listToCSVString(final List<String> list){  final StringBuilder sb=new StringBuilder();  if (list == null) {    return sb.toString();  }  for (int i=0; i < list.size(); i++) {    sb.append(list.get(i));    if (i != list.size() - 1) {      sb.append(",");    }  }  return sb.toString();}  }
class C{  void appendBtoFList(NodeSetDTM flist,NodeSetDTM blist){  int n=blist.size();  for (int i=(n - 1); i >= 0; i--) {    flist.addElement(blist.item(i));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  NamedNodeMap nodeMap;  Notation notation1;  Notation notation2;  Notation notationImp1;  Notation notationImp2;  Notation notationImpNew1;  Notation notationImpNew2;  String publicId1;  String publicId1Imp;  String publicId1NewImp;  String publicId2Imp;  String publicId2NewImp;  String systemId1Imp;  String systemId1NewImp;  String systemId2;  String systemId2Imp;  String systemId2NewImp;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getNotations();  assertNotNull("notationsNotNull",nodeMap);  notation1=(Notation)nodeMap.getNamedItem("notation1");  notation2=(Notation)nodeMap.getNamedItem("notation2");  notationImp1=(Notation)doc.importNode(notation1,true);  notationImp2=(Notation)doc.importNode(notation2,false);  notationImpNew1=(Notation)docImp.importNode(notation1,false);  notationImpNew2=(Notation)docImp.importNode(notation2,true);  publicId1=notation1.getPublicId();  publicId1Imp=notation1.getPublicId();  publicId1NewImp=notation1.getPublicId();  systemId1Imp=notation1.getSystemId();  systemId1NewImp=notation1.getSystemId();  publicId2Imp=notation2.getPublicId();  publicId2NewImp=notation2.getPublicId();  systemId2=notation2.getSystemId();  systemId2Imp=notation2.getSystemId();  systemId2NewImp=notation2.getSystemId();  assertEquals("documentimportnode22_N1PID",publicId1,publicId1Imp);  assertEquals("documentimportnode22_N1NPID",publicId1,publicId1NewImp);  assertNull("documentimportnode22_N1SID",systemId1Imp);  assertNull("documentimportnode22_N1NSID",systemId1NewImp);  assertEquals("documentimportnode22_N2SID",systemId2,systemId2Imp);  assertEquals("documentimportnode22_N2NSID",systemId2,systemId2NewImp);  assertNull("documentimportnode22_N2PID",publicId2Imp);  assertNull("documentimportnode22_N2NPID",publicId2Imp);}  }
class C{  public SyntaxStyle(int fgColor,int bgColor){  this.fgColor=fgColor;  this.bgColor=bgColor;}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public void end_scope() throws IOException {  current_indent_level--;  new_line();  write(END_SCOPE);}  }
class C{  public static SetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,InstantiableRelationDefinition<?,?> r) throws ArgumentException {  return new SetPropSubCommandHandler(parser,path.child(r,"DUMMY"),r);}  }
class C{  public boolean isOverriden(){  return overridesMe.size() > 0;}  }
class C{  private JsonValue addMemberToGroupViaUpdate(String groupId,String userId) throws Exception {  System.out.println("1. Add a member to a group by writing entire group with updated Members list:");  HttpResponse<String> response=Unirest.put(azureEndpoint + "/group/" + groupId).header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").header("content-type","application/json").header("if-match","*").body(writeValueAsString(json(object(field("Members",array(object(field("ObjectId",userId)))))))).asString();  return json(readJson(response.getBody()));}  }
class C{  @Override public long skip(long bytes) throws IOException {  if (closed) {    throw new FileItemStream.ItemSkippedException();  }  int av=available();  if (av == 0) {    av=makeAvailable();    if (av == 0) {      return 0;    }  }  long res=Math.min(av,bytes);  head+=res;  return res;}  }
class C{  private static void configurePlugins(Configuration config,RestExpress server){  configureMetrics(config,server);  new HyperExpressPlugin(Linkable.class).register(server);  new CorsHeaderPlugin("*").flag(PUBLIC_ROUTE).allowHeaders(CONTENT_TYPE,ACCEPT,LOCATION).exposeHeaders(LOCATION).register(server);}  }
class C{  @Override protected void addSubView(View child,int index){  if (child == null || getRealView() == null) {    return;  }  if (mOrientation == VERTICAL) {    if (child instanceof WXBaseRefreshLayout) {      return;    }  }  int count=tempscview.getChildCount();  index=index >= count ? -1 : index;  if (index == -1) {    getRealView().addView(child);  } else {    getRealView().addView(child,index);  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public void recordAbstractMethodsForOverrideCheck(SClassDef c,List<SMethodDef> abstractMethods) throws SyntaxException {  List<SMethodDef> visitedMethods=new ArrayList<>();  Set<SInterfaceDef> visitedTypes=new HashSet<>();  recordAbstractMethodsForOverrideCheck_class(c.parent(),abstractMethods,visitedMethods,visitedTypes);  for (  SInterfaceDef i : c.superInterfaces()) {    recordAbstractMethodsForOverrideCheck_interface(i,abstractMethods,visitedMethods,visitedTypes);  }}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(entityTag);}  }
class C{  public static Map cloneStringToSetMap(Map orig){  Map cloned=null;  if (orig != null) {    cloned=new HashMap(orig.size() * 2);    for (Iterator i=orig.keySet().iterator(); i.hasNext(); ) {      String key=(String)i.next();      Set values=(Set)orig.get(key);      Set cloneValues=null;      if (values != null) {        cloneValues=new HashSet(values.size() * 2);        for (Iterator j=values.iterator(); j.hasNext(); ) {          String val=(String)j.next();          cloneValues.add(val);        }      }      cloned.put(key,cloneValues);    }  }  return cloned;}  }
class C{  private OptionalDouble(){  this.isPresent=false;  this.value=Double.NaN;}  }
class C{  private static void parseArgs(final String[] args){  if (args.length != 3) {    giveUp();  }  host=args[0];  port=Integer.parseInt(args[1]);  infoType=args[2];  final String infoTypeLc=infoType.toLowerCase();  if (!"all".equals(infoTypeLc) && !"controls".equals(infoTypeLc) && !"extops".equals(infoTypeLc)) {    giveUp();  }}  }
class C{  protected void createMBean(){  try {    jmxPool=new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this);  } catch (  Exception x) {    log.warn("Unable to start JMX integration for connection pool. Instance[" + getName() + "] can't be monitored.",x);  }}  }
class C{  public boolean isDenyLoginIfDBIsDown(){  return hotSwappableSessionServiceConfig.denyLoginIfDBIsDown;}  }
class C{  public boolean removeLogFiles(){  return removeLogFilesArg.isPresent();}  }
class C{  public void testCase7(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3};  int aSign=-1;  int bSign=1;  byte rBytes[]={-12,-23,-34,-45,-56,-67,-78,-12,-23,-33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public char toCharArray()[]{synchronized (lock) {    return Arrays.copyOf(buf,count);  }}  }
class C{  public ModifyDNOperation processModifyDN(DN entryDN,RDN newRDN,boolean deleteOldRDN,DN newSuperior){  return processModifyDN(entryDN,newRDN,deleteOldRDN,newSuperior,null);}  }
class C{  private void copyCurrentConfigFileToArchiveFile(File archiveFile) throws DirectoryException {  byte[] buffer=new byte[8192];  try (FileInputStream inputStream=new FileInputStream(configFile);GZIPOutputStream outputStream=new GZIPOutputStream(new FileOutputStream(archiveFile))){    int bytesRead=inputStream.read(buffer);    while (bytesRead > 0) {      outputStream.write(buffer,0,bytesRead);      bytesRead=inputStream.read(buffer);    }  } catch (  IOException e) {    logger.traceException(e);    throw new DirectoryException(ResultCode.UNDEFINED,ERR_CONFIG_FILE_CANNOT_WRITE_CONFIG_ARCHIVE.get(stackTraceToSingleLineString(e)));  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public static byte[] bigIntegerToByteArray(BigInteger value){  byte[] result=value.toByteArray();  if (result[0] == 0x0) {    byte[] tmp=new byte[result.length - 1];    System.arraycopy(result,1,tmp,0,tmp.length);    result=tmp;  }  return result;}  }
class C{  protected void createHandler(){  if (handler != null)   return;  try {    handler=new Handler(Looper.getMainLooper());  } catch (  RuntimeException e) {  }}  }
class C{  private EnumEvalResult evalComplex(EnumEvalResult left,EnumEvalResult right){  if (booleanType == EnumBooleanTypes.AND_BOOLEAN_TYPE) {    if (left == EnumEvalResult.TRUE && right == EnumEvalResult.TRUE) {      return EnumEvalResult.TRUE;    }  } else   if (left == EnumEvalResult.TRUE || right == EnumEvalResult.TRUE) {    return EnumEvalResult.TRUE;  }  return EnumEvalResult.FALSE;}  }
class C{  @Override public boolean isDisableWriteToDiskDynamicStaticResource(){  return true;}  }
class C{  public boolean nextValidToken() throws IOException {  while (tokeniser.nextToken()) {    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.Comment)     continue;    return true;  }  return false;}  }
class C{  public Lyrics3v2Field(){}  }
class C{  public static final Query createTestQuery2(){  Query query=new Query();  query.setWhere("myindexedfield1 = 'thisismyfield' AND myindexedfield2 = 'blah'");  query.setDatabase(Fixtures.DB);  query.setTable("mytable");  return query;}  }
class C{  public MBeanNotificationInfo createNotificationInfo(){  if (info != null)   return info;  info=new MBeanNotificationInfo(getNotifTypes(),getName(),getDescription());  return info;}  }
class C{  private static int determineType(InputStream is) throws IOException {  byte[] magicBytes=new byte[8];  int b;  long index=-1;  boolean bom=false;  do {    if (is.markSupported())     is.mark(16);    b=is.read();    index++;    bom=index < 3 && ((index == 0 && b == 0xEF) || (bom && ((index == 1 && b == 0xBB) || (index == 2 && b == 0xBF))));  } while (b != -1 && b == ' ' || b == '\t' || b == '\r' || b == '\n' || b == '\f' || bom);  magicBytes[0]=(byte)b;  int read=is.read(magicBytes,1,7);  int type=determineType(new String(magicBytes,0,read));  if (is.markSupported())   is.reset();  return type;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.KeyIdentifierType createKeyIdentifierType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.KeyIdentifierTypeImpl();}  }
class C{  void addParameter(String key,String value){  parameterMap.put(key,new String[]{value});}  }
class C{  public static int insertOrUpdate(@Nullable SQLiteDatabase sqlDb,String table,@Nullable String selection,String[] selectionArgs,@NonNull final ContentValues values,@Nullable final String[] excludeFieldsForUpdate){  if (sqlDb == null) {    return -1;  }  final long items=DatabaseUtils.queryNumEntries(sqlDb,table,selection,selectionArgs);  if (items == 0) {    final long row=sqlDb.insert(table,null,values);    if (row == -1) {      return -1;    }    return 1;  } else {    if (excludeFieldsForUpdate != null) {      for (      String excludeField : excludeFieldsForUpdate) {        values.remove(excludeField);      }    }    sqlDb.update(table,values,selection,selectionArgs);    return 0;  }}  }
class C{  public boolean isShort(STypeDef requiredType,NumberLiteral literal,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof ShortTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Short",lineCol))) && !literal.literal().contains(".");}  }
class C{  public InvalidClientMetadata(){  super(400,"invalid_client_metadata","The request contains invalid metadata.");}  }
class C{  public boolean isAncestorOrgDeleted(SSOToken token,String dn,int profileType) throws AMException {  if (debug.messageEnabled()) {    debug.message("Compliance.isAncestorOrgDeleted-> " + " checking from... " + dn);  }  String tdn=DN.valueOf(dn).toString().toLowerCase();  if ((profileType == AMObject.ORGANIZATION) && deletedOrg.containsKey(tdn)) {    if (((Boolean)deletedOrg.get(tdn)).booleanValue()) {      return true;    }  }  if (profileType != AMObject.ORGANIZATION) {    tdn=DirectoryServicesFactory.getInstance().getOrganizationDN(internalToken,dn);  }  while (!tdn.equalsIgnoreCase(rootSuffix)) {    if (debug.messageEnabled()) {      debug.message("Compliance.isAncestorOrgDeleted-> " + "Checking for deleted status of " + tdn);    }    if (deletedOrg.containsKey(tdn)) {      return ((Boolean)deletedOrg.get(tdn)).booleanValue();    }    try {      PersistentObject po=UMSObject.getObject(internalToken,new Guid(tdn));      Attr attr=po.getAttribute(ORG_STATUS_ATTRIBUTE);      if (debug.messageEnabled() && (attr != null)) {        debug.message("Compliance.isAncestorOrgDeleted-> " + ORG_STATUS_ATTRIBUTE + "="+ attr.toString());      }      if (((attr != null) && (attr.size() != 0)) && attr.contains("deleted")) {        if (debug.messageEnabled()) {          debug.message("isAncestorOrgDeleted: caching org: " + tdn + " as deleted");        }synchronized (deletedOrg) {          deletedOrg.put(tdn,Boolean.TRUE);        }        return true;      } else {        if (debug.messageEnabled()) {          debug.message("isAncestorOrgDeleted: caching org: " + tdn + " as active");        }synchronized (deletedOrg) {          deletedOrg.put(tdn,Boolean.FALSE);        }      }    } catch (    UMSException umse) {      debug.error("Compliance.isAncestorOrgDeleted-> " + "UMSException",umse);      return false;    }    tdn=DirectoryServicesFactory.getInstance().getOrganizationDN(token,dn);  }  return false;}  }
class C{  @Inject public OAuth2RouterProvider(AuditEventPublisher eventPublisher,AuditEventFactory eventFactory,OAuth2RequestFactory requestFactory,JacksonRepresentationFactory jacksonRepresentationFactory){  this.eventPublisher=eventPublisher;  this.eventFactory=eventFactory;  this.requestFactory=requestFactory;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  @Override public double distance(PlaPointFloat p_from_point){  return p_from_point.distance(nearest_point(p_from_point));}  }
class C{  public final void testGetType02(){  CRL crl=new MyCRL(null);  assertNull(crl.getType());}  }
class C{  public void finishResponse() throws IOException {  outputBuffer.close();}  }
class C{  public static void banIP(String address){  server.banIP(address);}  }
class C{  @Override public Foo findByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_First(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  static EntryIDSet evaluateBoundedRange(IndexQueryFactory<IndexQuery> indexQueryFactory,SearchFilter filter1,SearchFilter filter2,StringBuilder debugBuffer,BackendMonitor monitor){  StringBuilder tmpBuff1=debugBuffer != null ? new StringBuilder() : null;  StringBuilder tmpBuff2=debugBuffer != null ? new StringBuilder() : null;  EntryIDSet results1=evaluate(indexQueryFactory,filter1,tmpBuff1,monitor);  EntryIDSet results2=evaluate(indexQueryFactory,filter2,tmpBuff2,monitor);  if (debugBuffer != null) {    debugBuffer.append(filter1).append(tmpBuff1).append(results1).append(filter2).append(tmpBuff2).append(results2);  }  results1.retainAll(results2);  return results1;}  }
class C{  public int indexOf(Object elem){  return delegate.indexOf(elem);}  }
class C{  public NumberVariableLength(String identifier,AbstractTagFrameBody frameBody,int minimumSize){  super(identifier,frameBody);  this.minLength=minimumSize;}  }
class C{  void compute(){  if (random.nextBoolean()) {    value=value + random.nextInt(variation);    ask=value + random.nextInt(variation / 2);    bid=value + random.nextInt(variation / 2);  } else {    value=value - random.nextInt(variation);    ask=value - random.nextInt(variation / 2);    bid=value - random.nextInt(variation / 2);  }  if (value <= 0) {    value=1.0;  }  if (ask <= 0) {    ask=1.0;  }  if (bid <= 0) {    bid=1.0;  }  if (random.nextBoolean()) {    int shareVariation=random.nextInt(100);    if (shareVariation > 0 && share + shareVariation < stocks) {      share+=shareVariation;    } else     if (shareVariation < 0 && share + shareVariation > 0) {      share+=shareVariation;    }  }}  }
class C{  public JobMessageFromOperator(String message,Locale locale){  super(message,locale);}  }
class C{  private ByteString readNextRecord() throws IOException {  try {    final long filePosition=reader.getFilePointer();    if (reader.length() == filePosition) {      return null;    }    int distanceToBlockStart=getDistanceToNextBlockStart(filePosition,blockSize);    final int recordLength=readRecordLength(distanceToBlockStart);    long currentPosition=reader.getFilePointer();    distanceToBlockStart=getDistanceToNextBlockStart(currentPosition,blockSize);    final ByteStringBuilder recordBytes=new ByteStringBuilder(getLengthOfStoredRecord(recordLength,distanceToBlockStart));    int remainingBytesToRead=recordLength;    while (distanceToBlockStart < remainingBytesToRead) {      if (distanceToBlockStart != 0) {        recordBytes.appendBytes(reader,distanceToBlockStart);      }      reader.skipBytes(SIZE_OF_BLOCK_OFFSET);      currentPosition+=distanceToBlockStart + SIZE_OF_BLOCK_OFFSET;      remainingBytesToRead-=distanceToBlockStart;      distanceToBlockStart=blockSize - SIZE_OF_BLOCK_OFFSET;    }    if (remainingBytesToRead > 0) {      recordBytes.appendBytes(reader,remainingBytesToRead);    }    return recordBytes.toByteString();  } catch (  EOFException e) {    return null;  }}  }
class C{  public void mouseEntered(MouseEvent e){  handler.mouseEntered(e);}  }
class C{  private void parse_oneVarPostOperation() throws SyntaxException {  Element opNode=(Element)current;  String op=opNode.getContent();  parsedExpsNotEmpty(opNode);  Expression e=parsedExps.pop();  OneVariableOperation ovo=new OneVariableOperation(op,e,opNode.getLineCol());  parsedExps.push(ovo);  nextNode(true);  parse_expression();}  }
class C{  public ChangeNumberIndexRecord(DN baseDN,CSN csn){  this(0,baseDN,csn);}  }
class C{  @Override public void afterAuthorizeSuccess(OAuth2Request o2request,Request request,Response response){  Series<CookieSetting> cookiesSetInThisResponse=response.getCookieSettings();  CookieSetting loginHintCookieSetting=cookiesSetInThisResponse.getFirst(LOGIN_HINT_COOKIE);  if (loginHintCookieSetting != null && loginHintCookieSetting.getMaxAge() != 0) {    cookiesSetInThisResponse.removeFirst(LOGIN_HINT_COOKIE);  }  removeCookie(request,response);}  }
class C{  @Override public void doPost(HttpServletRequest req,HttpServletResponse res) throws ServletException, IOException {  LDAPConnectionOptions connOptions=new LDAPConnectionOptions();  connOptions.setUseSSL(useSSL);  connOptions.setStartTLS(useStartTLS);  LDAPConnection connection=null;  BatchRequest batchRequest=null;  BufferedInputStream is=new BufferedInputStream(req.getInputStream(),65536);  if (is.markSupported()) {    is.mark(65536);  }  ObjectFactory objFactory=new ObjectFactory();  BatchResponse batchResponse=objFactory.createBatchResponse();  List<JAXBElement<?>> batchResponses=batchResponse.getBatchResponses();  Document doc=createSafeDocument();  MessageFactory messageFactory=null;  String messageContentType=null;  if (useSSL || useStartTLS) {    SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();    try {      sslConnectionFactory.init(trustAll,null,null,null,trustStorePathValue,trustStorePasswordValue);    } catch (    SSLConnectionException e) {      batchResponses.add(createErrorResponse(objFactory,new LDAPException(LDAPResultCode.CLIENT_SIDE_CONNECT_ERROR,LocalizableMessage.raw("Invalid SSL or TLS configuration to connect to LDAP server."))));    }    connOptions.setSSLConnectionFactory(sslConnectionFactory);  }  SOAPBody soapBody=null;  MimeHeaders mimeHeaders=new MimeHeaders();  String bindDN=null;  String bindPassword=null;  boolean authenticationInHeader=false;  boolean authenticationIsID=false;  final Enumeration<String> en=req.getHeaderNames();  while (en.hasMoreElements()) {    String headerName=en.nextElement();    String headerVal=req.getHeader(headerName);    if (headerName.equalsIgnoreCase("content-type")) {      try {        if (headerVal.startsWith(SOAPConstants.SOAP_1_1_CONTENT_TYPE)) {          messageFactory=MessageFactory.newInstance(SOAPConstants.SOAP_1_1_PROTOCOL);          messageContentType=SOAPConstants.SOAP_1_1_CONTENT_TYPE;        } else         if (headerVal.startsWith(SOAPConstants.SOAP_1_2_CONTENT_TYPE)) {          MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);          messageContentType=SOAPConstants.SOAP_1_2_CONTENT_TYPE;        } else {          throw new ServletException("Content-Type does not match SOAP 1.1 or SOAP 1.2");        }      } catch (      SOAPException e) {        throw new ServletException(e.getMessage());      }    } else     if (headerName.equalsIgnoreCase("authorization") && headerVal.startsWith("Basic ")) {      authenticationInHeader=true;      String authorization=headerVal.substring(6).trim();      try {        String unencoded=new String(Base64.decode(authorization));        int colon=unencoded.indexOf(':');        if (colon > 0) {          if (useHTTPAuthzID) {            connOptions.setSASLMechanism("mech=" + SASL_MECHANISM_PLAIN);            connOptions.addSASLProperty("authid=u:" + unencoded.substring(0,colon).trim());            authenticationIsID=true;          } else {            bindDN=unencoded.substring(0,colon).trim();          }          bindPassword=unencoded.substring(colon + 1);        }      } catch (      ParseException ex) {        batchResponses.add(createErrorResponse(objFactory,new LDAPException(LDAPResultCode.INVALID_CREDENTIALS,LocalizableMessage.raw(ex.getMessage()))));        break;      }    }    StringTokenizer tk=new StringTokenizer(headerVal,",");    while (tk.hasMoreTokens()) {      mimeHeaders.addHeader(headerName,tk.nextToken().trim());    }  }  if (!authenticationInHeader) {    if (userDN != null) {      bindDN=userDN;      if (userPassword != null) {        bindPassword=userPassword;      } else {        batchResponses.add(createErrorResponse(objFactory,new LDAPException(LDAPResultCode.INVALID_CREDENTIALS,LocalizableMessage.raw("Invalid configured credentials."))));      }    } else {      bindDN="";      bindPassword="";    }  } else {    if (((!authenticationIsID && bindDN == null) || bindPassword == null) && batchResponses.isEmpty()) {      batchResponses.add(createErrorResponse(objFactory,new LDAPException(LDAPResultCode.INVALID_CREDENTIALS,LocalizableMessage.raw("Unable to retrieve credentials."))));    }  }  if (batchResponses.isEmpty()) {    try {      SOAPMessage message=messageFactory.createMessage(mimeHeaders,is);      soapBody=message.getSOAPBody();    } catch (    SOAPException ex) {      batchResponses.add(createXMLParsingErrorResponse(is,objFactory,batchResponse,String.valueOf(ex.getCause())));    }  }  if (soapBody != null) {    Iterator<?> it=soapBody.getChildElements();    while (it.hasNext()) {      Object obj=it.next();      if (!(obj instanceof SOAPElement)) {        continue;      }      SOAPElement se=(SOAPElement)obj;      JAXBElement<BatchRequest> batchRequestElement=null;      try {        Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();        unmarshaller.setSchema(schema);        batchRequestElement=unmarshaller.unmarshal(se,BatchRequest.class);      } catch (      JAXBException e) {        batchResponses.add(createXMLParsingErrorResponse(is,objFactory,batchResponse,String.valueOf(e)));      }      if (batchRequestElement != null) {        boolean authzInBind=false;        boolean authzInControl=false;        batchRequest=batchRequestElement.getValue();        if (batchRequest.authRequest != null) {          if (authenticationIsID) {            connOptions.addSASLProperty("authzid=" + batchRequest.authRequest.getPrincipal());            authzInBind=true;          } else {            authzInControl=true;          }        }        batchResponse.setRequestID(batchRequest.getRequestID());        org.opends.server.types.Control proxyAuthzControl=null;        boolean connected=false;        if (connection == null) {          connection=new LDAPConnection(hostName,port,connOptions);          try {            connection.connectToHost(bindDN,bindPassword);            if (authzInControl) {              proxyAuthzControl=checkAuthzControl(connection,batchRequest.authRequest.getPrincipal());            }            if (authzInBind || authzInControl) {              LDAPResult authResponse=objFactory.createLDAPResult();              ResultCode code=ResultCodeFactory.create(objFactory,LDAPResultCode.SUCCESS);              authResponse.setResultCode(code);              batchResponses.add(objFactory.createBatchResponseAuthResponse(authResponse));            }            connected=true;          } catch (          LDAPConnectionException e) {            batchResponses.add(createErrorResponse(objFactory,e));          }        }        if (connected) {          List<DsmlMessage> list=batchRequest.getBatchRequests();          for (          DsmlMessage request : list) {            JAXBElement<?> result=performLDAPRequest(connection,objFactory,proxyAuthzControl,request);            if (result != null) {              batchResponses.add(result);            }            Object o=result.getValue();            if (o instanceof ErrorResponse) {              if (ON_ERROR_EXIT.equals(batchRequest.getOnError())) {                break;              }            } else             if (o instanceof LDAPResult) {              int code=((LDAPResult)o).getResultCode().getCode();              if (code != LDAPResultCode.SUCCESS && code != LDAPResultCode.REFERRAL && code != LDAPResultCode.COMPARE_TRUE && code != LDAPResultCode.COMPARE_FALSE && ON_ERROR_EXIT.equals(batchRequest.getOnError())) {                break;              }            }          }        }        if (connection != null) {          connection.close(nextMessageID);        }      }    }  }  try {    Marshaller marshaller=jaxbContext.createMarshaller();    marshaller.marshal(objFactory.createBatchResponse(batchResponse),doc);    sendResponse(doc,messageFactory,messageContentType,res);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected View createChild(String name){  if (name.equals("StaticTextResult")) {    return new StaticTextField(this,name,ResultVal);  } else   if (name.equals("StaticTextWarning")) {    return new StaticTextField(this,name,lockWarning);  } else   if (name.equals("StaticTextMessage")) {    return new StaticTextField(this,name,ErrorMessage);  } else   if (name.equals("StaticTextHeader")) {    return new StaticTextField(this,name,TextHeaderVal);  } else   if (name.equals(REDIRECT_URL)) {    String redirect=redirect_url;    redirect_url=AuthUtils.encodeURL(redirect,ac);    return new StaticTextField(this,name,redirect_url);  } else   if (name.equals(DEFAULT_LOGIN_URL)) {    String default_login_url=AuthUtils.encodeURL(LOGINURL,ac);    return new StaticTextField(this,name,default_login_url);  } else   if (name.equals(LOGIN_URL)) {    if ((loginURL == null) || (loginURL.length() == 0)) {      loginURL=LOGINURL;    }    loginURL=AuthUtils.encodeURL(loginURL,ac);    return new StaticTextField(this,name,loginURL);  } else   if (name.equals(PAGE_STATE)) {    return new StaticTextField(this,name,pageState);  } else   if (name.equals("Image")) {    return new ImageField(this,name,pageImage);  } else   if (name.equals(TILED_CALLBACKS)) {    return new CallBackTiledView(this,TILED_CALLBACKS);  } else   if (name.equals(TILED_BUTTONS)) {    return new ButtonTiledView(this,TILED_BUTTONS);  } else   if (name.equals(DEFAULT_BTN)) {    return new StaticTextField(this,DEFAULT_BTN,"");  } else   if (name.equals(TXT_GOTO_LOGIN_AFTER_FAIL)) {    return new StaticTextField(this,TXT_GOTO_LOGIN_AFTER_FAIL,"");  } else   if (name.equals(CMD_SUBMIT)) {    return new StaticTextField(this,CMD_SUBMIT,"");  } else   if (name.equals(LBL_SUBMIT)) {    return new StaticTextField(this,LBL_SUBMIT,"");  } else   if (name.equals(CMD_CONTINUE)) {    return new StaticTextField(this,CMD_CONTINUE,"");  } else   if (name.equals(LBL_CONTINUE)) {    return new StaticTextField(this,LBL_CONTINUE,"");  } else   if (name.equals(CMD_AGREE)) {    return new StaticTextField(this,CMD_AGREE,"");  } else   if (name.equals(LBL_AGREE)) {    return new StaticTextField(this,LBL_AGREE,"");  } else   if (name.equals(CMD_DISAGREE)) {    return new StaticTextField(this,CMD_DISAGREE,"");  } else   if (name.equals(LBL_DISAGREE)) {    return new StaticTextField(this,LBL_DISAGREE,"");  } else   if (name.equals(CMD_YES)) {    return new StaticTextField(this,CMD_YES,"");  } else   if (name.equals(LBL_YES)) {    return new StaticTextField(this,LBL_YES,"");  } else   if (name.equals(CMD_NO)) {    return new StaticTextField(this,CMD_NO,"");  } else   if (name.equals(LBL_NO)) {    return new StaticTextField(this,LBL_NO,"");  } else   if (name.equals(CMD_NEW_USER)) {    return new StaticTextField(this,CMD_NEW_USER,"");  } else   if (name.equals(LBL_NEW_USER)) {    return new StaticTextField(this,LBL_NEW_USER,"");  } else   if (name.equals(LBL_RESET)) {    return new StaticTextField(this,LBL_RESET,"");  } else   if (name.equals(HTML_TITLE_LOGIN)) {    return new StaticTextField(this,HTML_TITLE_LOGIN,"");  } else   if (name.equals(HTML_TITLE_MESSAGE)) {    return new StaticTextField(this,HTML_TITLE_MESSAGE,"");  } else   if (name.equals(HTML_TITLE_REDIRECT)) {    return new StaticTextField(this,HTML_TITLE_REDIRECT,"");  } else   if (name.equals(HTML_TITLE_ACCOUNTEXPIRED)) {    return new StaticTextField(this,HTML_TITLE_ACCOUNTEXPIRED,"");  } else   if (name.equals(HTML_TITLE_AUTHERROR)) {    return new StaticTextField(this,HTML_TITLE_AUTHERROR,"");  } else   if (name.equals(HTML_TITLE_SELFREGERROR)) {    return new StaticTextField(this,HTML_TITLE_SELFREGERROR,"");  } else   if (name.equals(HTML_TITLE_DISCLAIMER)) {    return new StaticTextField(this,HTML_TITLE_DISCLAIMER,"");  } else   if (name.equals(HTML_TITLE_INVALIDPASSWORD)) {    return new StaticTextField(this,HTML_TITLE_INVALIDPASSWORD,"");  } else   if (name.equals(HTML_TITLE_INVALIDDOMAIN)) {    return new StaticTextField(this,HTML_TITLE_INVALIDDOMAIN,"");  } else   if (name.equals(HTML_TITLE_USERPROFILENOTFOUND)) {    return new StaticTextField(this,HTML_TITLE_USERPROFILENOTFOUND,"");  } else   if (name.equals(HTML_TITLE_AUTHFAILED)) {    return new StaticTextField(this,HTML_TITLE_AUTHFAILED,"");  } else   if (name.equals(HTML_TITLE_MEMBERSHIP)) {    return new StaticTextField(this,HTML_TITLE_MEMBERSHIP,"");  } else   if (name.equals(HTML_TITLE_AUTHMODULEDENIED)) {    return new StaticTextField(this,HTML_TITLE_AUTHMODULEDENIED,"");  } else   if (name.equals(HTML_TITLE_NOCONFIGERROR)) {    return new StaticTextField(this,HTML_TITLE_NOCONFIGERROR,"");  } else   if (name.equals(HTML_TITLE_ORGINACTIVE)) {    return new StaticTextField(this,HTML_TITLE_ORGINACTIVE,"");  } else   if (name.equals(HTML_TITLE_SELFREGMODULE)) {    return new StaticTextField(this,HTML_TITLE_SELFREGMODULE,"");  } else   if (name.equals(HTML_TITLE_SESSIONTIMEOUT)) {    return new StaticTextField(this,HTML_TITLE_SESSIONTIMEOUT,"");  } else   if (name.equals(HTML_TITLE_USERNOTFOUND)) {    return new StaticTextField(this,HTML_TITLE_USERNOTFOUND,"");  } else   if (name.equals(HTML_TITLE_USERINACTIVE)) {    return new StaticTextField(this,HTML_TITLE_USERINACTIVE,"");  } else   if (name.equals(HTML_TITLE_NEWORG)) {    return new StaticTextField(this,HTML_TITLE_NEWORG,"");  } else   if (name.equals(HTML_TITLE_MAXSESSIONS)) {    return new StaticTextField(this,HTML_TITLE_MAXSESSIONS,"");  } else {    return super.createChild(name);  }}  }
class C{  public static Properties loadProperties(String fileName) throws IOException {  Properties prop=new Properties();  InputStream propIn=new FileInputStream(fileName);  try {    prop.load(propIn);  }  finally {    propIn.close();  }  return prop;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("CallParamRule[");  sb.append("paramIndex=");  sb.append(paramIndex);  sb.append(", attributeName=");  sb.append(attributeName);  sb.append(", from stack=");  sb.append(fromStack);  sb.append("]");  return (sb.toString());}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set set=amir.getAllowedIdOperations(idType);    if (!set.contains(IdOperation.SERVICE)) {      throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-support-service"),(Object[])params),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_ASSIGNED_SERVICES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    Set services=amid.getAssignedServices();    if ((services != null) && !services.isEmpty()) {      String msg=getResourceString("assigned-service-result");      String[] arg={""};      for (Iterator i=services.iterator(); i.hasNext(); ) {        arg[0]=(String)i.next();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(getResourceString("no-service-assigned"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_ASSIGNED_SERVICES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAssignedServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNED_SERVICES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("GetAssignedServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNED_SERVICES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public PerlinNoiseGenerator(World world){  this(new Random(world.getSeed()));}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public String toString(){  String s=null;  final Connection c=this.getInnermostDelegateInternal();  if (c != null) {    try {      if (c.isClosed()) {        s="connection is closed";      } else {        final StringBuffer sb=new StringBuffer();        sb.append(hashCode());        final DatabaseMetaData meta=c.getMetaData();        if (meta != null) {          sb.append(", URL=");          sb.append(meta.getURL());          sb.append(", UserName=");          sb.append(meta.getUserName());          sb.append(", ");          sb.append(meta.getDriverName());          s=sb.toString();        }      }    } catch (    final SQLException ex) {    }  }  if (s == null) {    s=super.toString();  }  return s;}  }
class C{  public void closeAll(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("Closing " + socketTable.size() + " sockets from IOHandler");  for (Enumeration<Socket> values=socketTable.elements(); values.hasMoreElements(); ) {    Socket s=(Socket)values.nextElement();    try {      s.close();    } catch (    IOException ex) {    }  }}  }
class C{  public IDPEntry createIDPEntry() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPENTRY);  if (obj == null) {    return new IDPEntryImpl();  } else {    return (IDPEntry)obj;  }}  }
class C{  public static Stack<String> splitParts(String name){  while (name.startsWith("."))   name=name.substring(1);  Stack<String> parts=new Stack<>();  int last=0;  int pos=0;  String part;  while (true) {    pos=last;    while (true) {      pos=name.indexOf('.',pos);      if (pos < 0)       break;      if (name.charAt(pos - 1) == '\\')       ++pos; else       break;    }    if (pos < 0)     break;    part=name.substring(last,pos);    if (!part.endsWith("]"))     part+="[0]";    parts.add(part);    last=pos + 1;  }  part=name.substring(last);  if (!part.endsWith("]"))   part+="[0]";  parts.add(part);  return parts;}  }
class C{  public static String tokenToString(byte token){  return (token == Token.END) ? "END" : TOKEN_TYPES[token];}  }
class C{  boolean isLegalInsertText(String text){  if (getAllowsInvalid()) {    return true;  }  for (int counter=text.length() - 1; counter >= 0; counter--) {    char aChar=text.charAt(counter);    if (!Character.isDigit(aChar) && specialChars.indexOf(aChar) == -1) {      return false;    }  }  return true;}  }
class C{  private boolean isLoginFailureLockoutMode(){  return loginFailureLockoutMode;}  }
class C{  public void replaceAttributeValues(String attrName,Set oldValues,Set newValues) throws SMSException, SSOException {  validatePluginConfig();  Map attributes=getAttributes();  Set newVals=new HashSet();  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals.addAll(oldVals);    newVals.removeAll(oldValues);  }  newVals.addAll(newValues);  ps.validateAttrValues(token,attrName,newVals,true,pc.getOrganizationName());  SMSEntry e=pc.getSMSEntry();  SMSUtils.replaceAttributeValues(e,attrName,oldValues,newValues,ps.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  private int success(Assertion assertion,NameID nameId,String userName) throws AuthLoginException, SAML2Exception {  setSessionProperties(assertion,nameId,userName);  setSessionAttributes(assertion,userName);  DEBUG.message("SAML2 :: User Authenticated via SAML2 - {}",getPrincipal().getName());  storeUsernamePasswd(DNUtils.DNtoName(getPrincipal().getName()),null);  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public static void deregisterBackend(Backend<?> backend){  ifNull(backend);synchronized (directoryServer) {    TreeMap<String,Backend<?>> newBackends=new TreeMap<>(directoryServer.backends);    newBackends.remove(backend.getBackendID());    directoryServer.backends=newBackends;    for (    DN baseDN : backend.getBaseDNs()) {      LocalBackendWorkflowElement.remove(baseDN);    }    BackendMonitor monitor=backend.getBackendMonitor();    if (monitor != null) {      deregisterMonitorProvider(monitor);      monitor.finalizeMonitorProvider();      backend.setBackendMonitor(null);    }  }}  }
class C{  private Long convertIntToLong(int quoteParam){  Long quoteParamLong=new Long(convertIntToIntString(quoteParam));  return quoteParamLong;}  }
class C{  public FSSession(String sessionID){  this(sessionID,null);}  }
class C{  public void _read(InputStream input){  value=input.read_any();}  }
class C{  @Override public void prepareAccessibilityDrop(){  if (mReorderAlarm.alarmPending()) {    mReorderAlarm.cancelAlarm();    mReorderAlarmListener.onAlarm(mReorderAlarm);  }}  }
class C{  @Override public int read(char[] chr) throws IOException {  try {    beforeRead(chr != null ? chr.length : 0);    int n=in.read(chr);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  private void skip(){  index++;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DigestMethodType createDigestMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DigestMethodTypeImpl();}  }
class C{  public static Border createLineBorder(Color color,int thickness,boolean rounded){  return new LineBorder(color,thickness,rounded);}  }
class C{  public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.AttributeQueryDescriptorElement createAttributeQueryDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.AttributeQueryDescriptorElementImpl();}  }
class C{  private static IntermediateResponseProtocolOp readIntermediateResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_INTERMEDIATE_RESPONSE_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  String oid=null;  ByteString value=null;  try {    if (reader.hasNextElement() && reader.peekType() == TYPE_INTERMEDIATE_RESPONSE_OID) {      try {        if (reader.hasNextElement()) {          oid=reader.readOctetStringAsString();        }      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_INTERMEDIATE_RESPONSE_CANNOT_DECODE_OID.get(e.getMessage());        throw new LDAPException(PROTOCOL_ERROR,message);      }    }    if (reader.hasNextElement() && reader.peekType() == TYPE_INTERMEDIATE_RESPONSE_VALUE) {      try {        value=reader.readOctetString();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_INTERMEDIATE_RESPONSE_CANNOT_DECODE_VALUE.get(e.getMessage());        throw new LDAPException(PROTOCOL_ERROR,message);      }    }  } catch (  IOException e) {    logger.traceException(e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_INTERMEDIATE_RESPONSE_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new IntermediateResponseProtocolOp(oid,value);}  }
class C{  public void exiting(String sourceClass,String sourceMethod){  logp(Level.FINER,sourceClass,sourceMethod,"RETURN");}  }
class C{  public void testKeyStore01(){  String propName="keystore.type";  String defKSType=Security.getProperty(propName);  String dType=KeyStore.getDefaultType();  String resType=defKSType;  if (resType == null) {    resType=defaultType;  }  assertNotNull("Default type have not be null",dType);  assertEquals("Incorrect default type",dType,resType);  if (defKSType == null) {    Security.setProperty(propName,defaultType);    dType=KeyStore.getDefaultType();    resType=Security.getProperty(propName);    assertNotNull("Incorrect default type",resType);    assertNotNull("Default type have not be null",dType);    assertEquals("Incorrect default type",dType,resType);  }}  }
class C{  @Override public ConnectionChangeRecordWriter writeChangeRecord(final ModifyRequest change) throws LdapException {  Reject.ifNull(change);  connection.modify(change);  return this;}  }
class C{  protected void send(SessionMessage msg){  if (cluster != null) {    cluster.send(msg);  }}  }
class C{  public XMLString toLowerCase(){  return new XMLStringDefault(m_str.toLowerCase());}  }
class C{  public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static void copyFile(File sourceFile,File destFile,Properties tokens,boolean overwrite,boolean preserveLastModified) throws IOException {  if (overwrite || (!destFile.exists()) || (destFile.lastModified() < sourceFile.lastModified())) {    if (destFile.exists() && destFile.isFile()) {      destFile.delete();    }    File parent=destFile.getParentFile();    if ((parent != null) && (!parent.exists())) {      parent.mkdirs();    }    if (sourceFile.isDirectory()) {      destFile.mkdirs();      return;    }    String line=null;    if ((tokens != null) && (!tokens.isEmpty())) {      BufferedReader in=new BufferedReader(new FileReader(sourceFile));      BufferedWriter out=new BufferedWriter(new FileWriter(destFile));      try {        while ((line=in.readLine()) != null) {          if (line.length() > 0) {            Enumeration tokensName=tokens.propertyNames();            while (tokensName.hasMoreElements()) {              String name=(String)tokensName.nextElement();              if (line.indexOf(name) >= 0) {                line=line.replaceAll(name,tokens.getProperty(name));              }            }            out.write(line);            out.newLine();          } else {            out.newLine();          }        }      }  finally {        out.close();        in.close();      }    } else {      FileInputStream in=null;      FileOutputStream out=null;      try {        in=new FileInputStream(sourceFile);        out=new FileOutputStream(destFile);        byte[] buffer=new byte[BUFFER_SIZE];        int count=0;        while ((count=in.read(buffer,0,buffer.length)) != -1) {          out.write(buffer,0,count);        }      }  finally {        out.close();        in.close();      }    }    if (preserveLastModified) {      destFile.setLastModified(sourceFile.lastModified());    }  }}  }
class C{  @Override public void execute() throws MojoExecutionException, MojoFailureException {  try {    readAcis(getAciDescriptions());  } catch (  IOException e) {    throw new MojoFailureException(e.getMessage(),e);  }  File table=new File(outputDirectory,"table-global-acis.xml");  try {    writeStringToFile(getGlobalAcisTable(),table);  } catch (  IOException e) {    throw new MojoFailureException(e.getMessage(),e);  }}  }
class C{  public boolean read_scope(DsnReadScopeParameters p_par){  Object next_token=null;  for (; ; ) {    Object prev_token=next_token;    try {      next_token=p_par.scanner.next_token();    } catch (    java.io.IOException e) {      System.out.println("ScopeKeyword.read_scope: IO error scanning file");      System.out.println(e);      return false;    }    if (next_token == null) {      return true;    }    if (next_token == CLOSED_BRACKET) {      break;    }    if (prev_token == OPEN_BRACKET) {      DsnKeywordScope next_scope;      if (next_token instanceof DsnKeywordScope) {        next_scope=(DsnKeywordScope)next_token;        if (!next_scope.read_scope(p_par)) {          return false;        }      } else {        skip_scope(p_par.scanner);      }    }  }  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Document doc=target.getDocument();    target.setCaretPosition(0);    target.moveCaretPosition(doc.getLength());  }}  }
class C{  @DataProvider(name="invalidStatements") public Object[][] invalids(){  return new Object[][]{{"1.3.6.1.4.1.42.2.27..8.5.1"},{"2.16.840.1.113730.3.XXX.18"},{"2.16.840.1.113730.*.4.18"},{"2.16.840,1.113730.3.4.18"},{"+"}};}  }
class C{  public TransportNotSupportedException(String message){  super(message);}  }
class C{  public LongAdder(){}  }
class C{  public TrustManagerImpl(KeyStore keyStore){  this(keyStore,null);}  }
class C{  public FrameBodyWOAF(){}  }
class C{  public final void merge_entries_in_front(BrdTracep p_from_trace,BrdTracep p_to_trace,Polyline p_joined_polyline,int p_from_entry_no,int p_to_entry_no){  int compensated_half_width=p_to_trace.get_half_width() + get_clearance_compensation(p_to_trace.clearance_idx(),p_to_trace.get_layer());  ArrayList<ShapeTile> link_shapes=offset_shapes(p_joined_polyline,compensated_half_width,p_from_entry_no,p_to_entry_no);  boolean change_order=p_from_trace.corner_first().equals(p_to_trace.corner_first());  int from_shape_count_minus_1=p_from_trace.tile_shape_count() - 1;  int remove_no;  if (change_order) {    remove_no=0;  } else {    remove_no=from_shape_count_minus_1;  }  AwtreeNodeLeaf[] from_trace_entries=p_from_trace.get_search_tree_entries(this);  AwtreeNodeLeaf[] to_trace_entries=p_to_trace.get_search_tree_entries(this);  remove_leaf(from_trace_entries[remove_no]);  remove_leaf(to_trace_entries[0]);  final int link_shapes_count=link_shapes.size();  int new_shape_count=from_trace_entries.length + link_shapes_count + to_trace_entries.length - 2;  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];  int old_to_shape_count=to_trace_entries.length;  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];  for (int i=0; i < from_shape_count_minus_1; ++i) {    int from_no;    if (change_order) {      from_no=from_shape_count_minus_1 - i;    } else {      from_no=i;    }    new_precalculated_tree_shapes[i]=p_from_trace.get_tree_shape(this,from_no);    new_leaf_arr[i]=from_trace_entries[from_no];    new_leaf_arr[i].object=p_to_trace;    new_leaf_arr[i].shape_index_in_object=i;  }  for (int index=1; index < old_to_shape_count; ++index) {    int curr_ind=from_shape_count_minus_1 + link_shapes_count + index - 1;    new_precalculated_tree_shapes[curr_ind]=p_to_trace.get_tree_shape(this,index);    new_leaf_arr[curr_ind]=to_trace_entries[index];    new_leaf_arr[curr_ind].shape_index_in_object=curr_ind;  }  for (int index=0; index < link_shapes_count; ++index) {    int curr_ind=from_shape_count_minus_1 + index;    new_precalculated_tree_shapes[curr_ind]=link_shapes.get(index);  }  p_to_trace.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);  for (int i=0; i < link_shapes_count; ++i) {    int curr_ind=from_shape_count_minus_1 + i;    new_leaf_arr[curr_ind]=insert(p_to_trace,curr_ind);  }  p_to_trace.set_search_tree_entries(this,new_leaf_arr);}  }
class C{  public ServicesAddViewBean(){  super("ServicesAdd",DEFAULT_DISPLAY_URL,null);  String serviceName=(String)getPageSessionAttribute(SERVICE_NAME);  if (serviceName != null) {    initialize(serviceName);  }}  }
class C{  public static void main(String[] args){  int retCode=mainCLI(args,System.out,System.err,System.in);  System.exit(retCode);}  }
class C{  public InvalidSearchControlsException(){  super();}  }
class C{  public void testmodInversePos1(){  byte aBytes[]={24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={122,45,36,100,122,45};  int aSign=1;  int mSign=1;  byte rBytes[]={47,3,96,62,87,19};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  public Response createResponse(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.RESPONSE,elem);  if (obj == null) {    return new ResponseImpl(elem);  } else {    return (Response)obj;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentities.class,args);}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  @DataProvider(name="v6Matches1") public Object[][] v6MatchData1(){  return new Object[][]{{"12ab:0:0:cd3f:0000:0000:23DC:DC30"},{"12ab::cd3f:0:0:23dc:dc30"}};}  }
class C{  public static void updateProviderKeyInfo(String realm,String entityID,String certAlias,boolean isIDP) throws WSFederationMetaException {  WSFederationMetaManager metaManager=new WSFederationMetaManager();  FederationConfigElement config=metaManager.getEntityConfig(realm,entityID);  if (!config.isHosted()) {    String[] args={entityID,realm};    throw new WSFederationMetaException("entityNotHosted",args);  }  FederationElement desp=metaManager.getEntityDescriptor(realm,entityID);  if (isIDP) {    IDPSSOConfigElement idpConfig=metaManager.getIDPSSOConfig(realm,entityID);    if ((idpConfig == null) || (desp == null)) {      String[] args={entityID,realm};      throw new WSFederationMetaException("entityNotIDP",args);    }    if ((certAlias == null) || (certAlias.length() == 0)) {      removeKeyDescriptor(desp);      setExtendedAttributeValue(idpConfig,SAML2Constants.SIGNING_CERT_ALIAS,null);    } else {      TokenSigningKeyInfoElement kde=getKeyDescriptor(certAlias);      updateKeyDescriptor(desp,kde);      Set value=new HashSet();      value.add(certAlias);      setExtendedAttributeValue(idpConfig,SAML2Constants.SIGNING_CERT_ALIAS,value);    }  } else {    SPSSOConfigElement spConfig=metaManager.getSPSSOConfig(realm,entityID);    if ((spConfig == null) || (desp == null)) {      String[] args={entityID,realm};      throw new WSFederationMetaException("entityNotSP",args);    }    if ((certAlias == null) || (certAlias.length() == 0)) {      removeKeyDescriptor(desp);      setExtendedAttributeValue(spConfig,SAML2Constants.SIGNING_CERT_ALIAS,null);    } else {      TokenSigningKeyInfoElement kde=getKeyDescriptor(certAlias);      updateKeyDescriptor(desp,kde);      Set value=new HashSet();      value.add(certAlias);      setExtendedAttributeValue(spConfig,SAML2Constants.SIGNING_CERT_ALIAS,value);    }  }  metaManager.setFederation(realm,desp);  metaManager.setEntityConfig(realm,config);}  }
class C{  public synchronized void initScriptsFramework(String framework){  Message msg=mJSHandler.obtainMessage();  msg.obj=framework;  msg.what=WXJSBridgeMsgType.INIT_FRAMEWORK;  msg.setTarget(mJSHandler);  msg.sendToTarget();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignaturePropertiesType createSignaturePropertiesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignaturePropertiesTypeImpl();}  }
class C{  void updateBlocks(int startLine,int endLine,int newLineCount){  if (mBlockEndLines == null) {    createBlocks();    return;  }  int firstBlock=-1;  int lastBlock=-1;  for (int i=0; i < mNumberOfBlocks; i++) {    if (mBlockEndLines[i] >= startLine) {      firstBlock=i;      break;    }  }  for (int i=firstBlock; i < mNumberOfBlocks; i++) {    if (mBlockEndLines[i] >= endLine) {      lastBlock=i;      break;    }  }  final int lastBlockEndLine=mBlockEndLines[lastBlock];  boolean createBlockBefore=startLine > (firstBlock == 0 ? 0 : mBlockEndLines[firstBlock - 1] + 1);  boolean createBlock=newLineCount > 0;  boolean createBlockAfter=endLine < mBlockEndLines[lastBlock];  int numAddedBlocks=0;  if (createBlockBefore)   numAddedBlocks++;  if (createBlock)   numAddedBlocks++;  if (createBlockAfter)   numAddedBlocks++;  final int numRemovedBlocks=lastBlock - firstBlock + 1;  final int newNumberOfBlocks=mNumberOfBlocks + numAddedBlocks - numRemovedBlocks;  if (newNumberOfBlocks == 0) {    mBlockEndLines[0]=0;    mBlockIndices[0]=INVALID_BLOCK_INDEX;    mNumberOfBlocks=1;    return;  }  if (newNumberOfBlocks > mBlockEndLines.length) {    int[] blockEndLines=ArrayUtils.newUnpaddedIntArray(Math.max(mBlockEndLines.length * 2,newNumberOfBlocks));    int[] blockIndices=new int[blockEndLines.length];    System.arraycopy(mBlockEndLines,0,blockEndLines,0,firstBlock);    System.arraycopy(mBlockIndices,0,blockIndices,0,firstBlock);    System.arraycopy(mBlockEndLines,lastBlock + 1,blockEndLines,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    System.arraycopy(mBlockIndices,lastBlock + 1,blockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    mBlockEndLines=blockEndLines;    mBlockIndices=blockIndices;  } else {    System.arraycopy(mBlockEndLines,lastBlock + 1,mBlockEndLines,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    System.arraycopy(mBlockIndices,lastBlock + 1,mBlockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);  }  mNumberOfBlocks=newNumberOfBlocks;  int newFirstChangedBlock;  final int deltaLines=newLineCount - (endLine - startLine + 1);  if (deltaLines != 0) {    newFirstChangedBlock=firstBlock + numAddedBlocks;    for (int i=newFirstChangedBlock; i < mNumberOfBlocks; i++) {      mBlockEndLines[i]+=deltaLines;    }  } else {    newFirstChangedBlock=mNumberOfBlocks;  }  mIndexFirstChangedBlock=Math.min(mIndexFirstChangedBlock,newFirstChangedBlock);  int blockIndex=firstBlock;  if (createBlockBefore) {    mBlockEndLines[blockIndex]=startLine - 1;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;    blockIndex++;  }  if (createBlock) {    mBlockEndLines[blockIndex]=startLine + newLineCount - 1;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;    blockIndex++;  }  if (createBlockAfter) {    mBlockEndLines[blockIndex]=lastBlockEndLine + deltaLines;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;  }}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,org.w3c.dom.Node context,QName mode,ContentHandler handler) throws TransformerException {  XPathContext xctxt=m_xcontext;  try {    if (null != mode)     pushMode(mode);    xctxt.pushCurrentNode(xctxt.getDTMHandleFromNode(context));    executeChildTemplates(elem,handler);  }  finally {    xctxt.popCurrentNode();    if (null != mode)     popMode();  }}  }
class C{  public static SearchRequest newSearchRequest(final DN name,final SearchScope scope,final Filter filter,final String... attributeDescriptions){  Reject.ifNull(name,scope,filter);  final SearchRequest request=new SearchRequestImpl(name,scope,filter);  for (  final String attributeDescription : attributeDescriptions) {    request.addAttribute(attributeDescription);  }  return request;}  }
class C{  public InflaterInputStream(InputStream in){  this(in,new Inflater());  usesDefaultInflater=true;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  protected void printBorder(Graphics g){  paintBorder(g);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(4);  testEmployee.setAttribute("lang","EN-us");  attrValue=testEmployee.getAttribute("lang");  assertEquals("attrValue","EN-us",attrValue);}  }
class C{  public boolean redo(Set<Integer> p_changed_nets){  brd_components.redo(observers);  Collection<UndoObjectStorable> cancelled_objects=new LinkedList<UndoObjectStorable>();  Collection<UndoObjectStorable> restored_objects=new LinkedList<UndoObjectStorable>();  boolean result=undo_items.redo(cancelled_objects,restored_objects);  Iterator<UndoObjectStorable> it=cancelled_objects.iterator();  while (it.hasNext()) {    BrdItem curr_item=(BrdItem)it.next();    search_tree_manager.remove(curr_item);    observers.notify_deleted(curr_item);    if (p_changed_nets != null) {      for (int i=0; i < curr_item.net_count(); ++i) {        p_changed_nets.add(curr_item.get_net_no(i));      }    }  }  it=restored_objects.iterator();  while (it.hasNext()) {    BrdItem curr_item=(BrdItem)it.next();    curr_item.r_board=this;    search_tree_manager.insert(curr_item);    curr_item.art_item_clear();    observers.notify_new(curr_item);    if (p_changed_nets != null) {      for (int i=0; i < curr_item.net_count(); ++i) {        p_changed_nets.add(curr_item.get_net_no(i));      }    }  }  return result;}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    Collection<? extends GrantedAuthority> authorities=authentication.getAuthorities();    if (authorities != null) {      for (      GrantedAuthority authority : authorities) {        if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public CredentialExpiredException(){  super();}  }
class C{  void unlock(){  exclusiveLock.unlock();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HtmlEntityDao.dropTable(db,ifExists);  CollectEntityDao.dropTable(db,ifExists);}  }
class C{  public static String ensureLeft(final String value,final String prefix,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.startsWith(prefix) ? value : prefix + value;  }  String _value=value.toLowerCase();  String _prefix=prefix.toLowerCase();  return _value.startsWith(_prefix) ? value : prefix + value;}  }
class C{  private final Object arenaExchange(Object item,boolean timed,long ns){  Node[] a=arena;  Node p=participant.get();  for (int i=p.index; ; ) {    int b, m, c;    long j;    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);    if (q != null && U.compareAndSwapObject(a,j,q,null)) {      Object v=q.item;      q.match=item;      Thread w=q.parked;      if (w != null)       U.unpark(w);      return v;    } else     if (i <= (m=(b=bound) & MMASK) && q == null) {      p.item=item;      if (U.compareAndSwapObject(a,j,null,p)) {        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;        Thread t=Thread.currentThread();        for (int h=p.hash, spins=SPINS; ; ) {          Object v=p.match;          if (v != null) {            U.putOrderedObject(p,MATCH,null);            p.item=null;            p.hash=h;            return v;          } else           if (spins > 0) {            h^=h << 1;            h^=h >>> 3;            h^=h << 10;            if (h == 0)             h=SPINS | (int)t.getId(); else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();          } else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS; else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {            U.putObject(t,BLOCKER,this);            p.parked=t;            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);            p.parked=null;            U.putObject(t,BLOCKER,null);          } else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);            p.item=null;            p.hash=h;            i=p.index>>>=1;            if (Thread.interrupted())             return null;            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;            break;          }        }      } else       p.item=null;    } else {      if (p.bound != b) {        p.bound=b;        p.collides=0;        i=(i != m || m == 0) ? m : m - 1;      } else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {        p.collides=c + 1;        i=(i == 0) ? m : i - 1;      } else       i=m + 1;      p.index=i;    }  }}  }
class C{  public void windowClosed(WindowEvent e){synchronized (getTreeLock()) {    Window[] windows=getOwnedWindows();    for (    Window window : windows) {      if (window != null) {        if (window.isDisplayable()) {          return;        }        window.removeWindowListener(this);      }    }    dispose();  }}  }
class C{  @Override public Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  int count=countByField2(field2);  if (count == 0) {    return null;  }  List<Foo> list=findByField2(field2,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public void fill_area(PlaArea p_area,Graphics p_g,Color p_color,double p_translucency_factor){  if (p_color == null || p_area.is_empty())   return;  if (p_area instanceof ShapeCircle) {    fill_circle((ShapeCircle)p_area,p_g,p_color,p_translucency_factor);  } else {    ShapeSegments border=(ShapeSegments)p_area.get_border();    if (!border.is_bounded()) {      System.out.println("GraphicsContext.fill_area: shape not bounded");      return;    }    Rectangle clip_shape=(Rectangle)p_g.getClip();    ShapeTileBox clip_box=coordinate_transform.screen_to_board(clip_shape);    if (!border.bounding_box().intersects(clip_box)) {      return;    }    PlaShape[] holes=p_area.get_holes();    PlaPointFloat[][] draw_polygons=new PlaPointFloat[holes.length + 1][];    for (int jndex=0; jndex < draw_polygons.length; ++jndex) {      ShapeSegments curr_draw_shape;      if (jndex == 0) {        curr_draw_shape=border;      } else {        curr_draw_shape=(ShapeSegments)holes[jndex - 1];      }      draw_polygons[jndex]=new PlaPointFloat[curr_draw_shape.border_line_count() + 1];      PlaPointFloat curr_draw_polygon[]=draw_polygons[jndex];      for (int index=0; index < curr_draw_polygon.length - 1; ++index) {        curr_draw_polygon[index]=curr_draw_shape.corner_approx(index);      }      curr_draw_polygon[curr_draw_polygon.length - 1]=curr_draw_polygon[0];    }    fill_area(draw_polygons,p_g,p_color,p_translucency_factor);  }  if (show_area_division) {    ShapeTile[] tiles=p_area.split_to_convex();    for (int index=0; index < tiles.length; ++index) {      PlaPointFloat[] corners=new PlaPointFloat[tiles[index].border_line_count() + 1];      ShapeTile curr_tile=tiles[index];      for (int jndex=0; jndex < corners.length - 1; ++jndex) {        corners[jndex]=curr_tile.corner_approx(jndex);      }      corners[corners.length - 1]=corners[0];      draw(corners,1,Color.white,p_g,0.7);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(0);{    boolean success=false;    try {      testAddress.setAttribute("invalid^Name","value");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  @Override public void onInflate(final Activity activity,final AttributeSet attrs,final Bundle savedInstanceState){  super.onInflate(activity,attrs,savedInstanceState);}  }
class C{  public GenericURI parseUrl(String url) throws ParseException {  return new URLParser(url).parse();}  }
class C{  String checkString(String s,int base){  if (s == null) {    throw new NullPointerException("s == null");  }  int charCount=s.length();  int i=0;  if (charCount > 0) {    char ch=s.charAt(0);    if (ch == '+') {      s=s.substring(1);      --charCount;    } else     if (ch == '-') {      ++i;    }  }  if (charCount - i == 0) {    throw invalidBigInteger(s);  }  boolean nonAscii=false;  for (; i < charCount; ++i) {    char ch=s.charAt(i);    if (Character.digit(ch,base) == -1) {      throw invalidBigInteger(s);    }    if (ch > 128) {      nonAscii=true;    }  }  return nonAscii ? toAscii(s,base) : s;}  }
class C{  public synchronized NSObject anyObject(){  if (set.isEmpty())   return null; else   return set.iterator().next();}  }
class C{  public char first(){  pos=offset;  if (count != 0) {    return array[pos];  }  return DONE;}  }
class C{  public boolean remove_items(Collection<BrdItem> p_item_list,boolean with_delete_fixed){  boolean all_deleted=true;  for (  BrdItem curr_item : p_item_list) {    if (!curr_item.can_delete(with_delete_fixed)) {      all_deleted=false;      continue;    }    remove_item(curr_item);  }  return all_deleted;}  }
class C{  public static void reset(){  getInstance().resetInstance();}  }
class C{  public DefaultBehaviorPrinter(){}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("EventParser.parse");  try {    headerName(TokenTypes.EVENT);    this.lexer.SPorHT();    Event event=new Event();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    String value=token.getTokenValue();    event.setEventType(value);    super.parse(event);    this.lexer.SPorHT();    this.lexer.match('\n');    return event;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("EventParser.parse");  }}  }
class C{  public Object clone(){  MimeType newObj=null;  try {    newObj=(MimeType)super.clone();  } catch (  CloneNotSupportedException cannotHappen) {  }  newObj.parameters=(MimeTypeParameterList)parameters.clone();  return newObj;}  }
class C{  public void add(Permission permission){  if (!(permission instanceof ServicePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,permission);  }}  }
class C{  public int readInt() throws SQLException {  Integer attrib=(Integer)getNextAttribute();  return (attrib == null) ? 0 : attrib.intValue();}  }
class C{  public Object clone() throws CloneNotSupportedException {  UnionPathIterator clone=(UnionPathIterator)super.clone();  if (m_iterators != null) {    int n=m_iterators.length;    clone.m_iterators=new DTMIterator[n];    for (int i=0; i < n; i++) {      clone.m_iterators[i]=(DTMIterator)m_iterators[i].clone();    }  }  return clone;}  }
class C{  public boolean doesEntryExists(SSOToken token,String entryDN){  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN};    Boolean res=((Boolean)client.send(client.encodeMessage("doesEntryExists",objs),sessionCookies.getLBCookie(tokenID),null));    return res.booleanValue();  } catch (  RemoteException rex) {    return false;  }catch (  Exception ex) {    return false;  }}  }
class C{  public boolean isExactMatch(){  return exactmatch;}  }
class C{  public static void sendResponseECP(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String idpEntityID,String realm,String acsURL,Response res) throws SAML2Exception {  ECPFactory ecpFactory=ECPFactory.getInstance();  ECPResponse ecpResponse=ecpFactory.createECPResponse();  ecpResponse.setMustUnderstand(Boolean.TRUE);  ecpResponse.setActor(SAML2Constants.SOAP_ACTOR_NEXT);  ecpResponse.setAssertionConsumerServiceURL(acsURL);  String header=ecpResponse.toXMLString(true,true);  String body=res.toXMLString(true,true);  try {    SOAPMessage reply=SOAPCommunicator.getInstance().createSOAPMessage(header,body,false);    String[] logdata={idpEntityID,realm,acsURL,""};    if (LogUtil.isAccessLoggable(Level.FINE)) {      logdata[3]=SOAPCommunicator.getInstance().soapMessageToString(reply);    }    LogUtil.access(Level.INFO,LogUtil.SEND_ECP_RESPONSE,logdata,null);    if (reply.saveRequired()) {      reply.saveChanges();    }    response.setStatus(HttpServletResponse.SC_OK);    SAML2Utils.putHeaders(reply.getMimeHeaders(),response);    ByteArrayOutputStream stream=new ByteArrayOutputStream();    reply.writeTo(stream);    out.println(stream.toString());    out.flush();  } catch (  Exception ex) {    SAML2Utils.debug.error("IDPSSOUtil.sendResponseECP",ex);    String[] data={idpEntityID,realm,acsURL};    LogUtil.error(Level.INFO,LogUtil.SEND_ECP_RESPONSE_FAILED,data,null);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"failedToSendECPResponse",ex.getMessage());    return;  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().deleteFoo(foo);}  }
class C{  public boolean isExpired(final Date date){  if (date == null) {    throw new IllegalArgumentException("Date may not be null");  }  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQueryCount(dynamicQuery);}  }
class C{  private void updateRightPane(TreePath[] paths){  TreePath path=null;  if (paths != null && paths.length == 1) {    path=paths[0];  }  BasicNode node=null;  if (path != null) {    node=(BasicNode)path.getLastPathComponent();  }  if (node != null) {    DN dn;    if (controller.isFollowReferrals() && node.getReferral() != null && node.getRemoteUrl() == null && node.getError() != null && node.getError().getState() == NodeRefresher.State.SOLVING_REFERRAL) {      entryPane.referralSolveError(node.getDN(),node.getReferral(),node.getError());      dn=null;    } else     if (controller.isFollowReferrals() && node.getRemoteUrl() != null) {      dn=DN.valueOf(node.getRemoteUrl().getRawBaseDN());    } else {      dn=node.getDN();    }    if (dn != null) {      try {        ConnectionWithControls conn=controller.findConnectionForDisplayedEntry(node);        LDAPEntryReader reader=new LDAPEntryReader(dn,conn);        reader.addEntryReadListener(entryPane);        entryPane.setTreePath(path);        stopCurrentReader();        startReader(reader);      } catch (      Throwable t) {        if (!isInterruptedException(t)) {          EntryReadErrorEvent ev=new EntryReadErrorEvent(this,dn,t);          entryPane.entryReadError(ev);        }      }    }  } else {    stopCurrentReader();    if (paths != null && paths.length > 1) {      entryPane.multipleEntriesSelected();    } else {      entryPane.noEntrySelected();    }  }}  }
class C{  @Override public Promise<Void,AuthenticationException> cleanSubject(MessageInfoContext messageInfo,Subject subject){  return newResultPromise(null);}  }
class C{  public static NSObject parse(byte[] bytes) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {switch (determineType(bytes)) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(bytes);case TYPE_XML:  return XMLPropertyListParser.parse(bytes);case TYPE_ASCII:return ASCIIPropertyListParser.parse(bytes);default :throw new PropertyListFormatException("The given data is not a property list of a supported format.");}}  }
class C{  private OptionalLong(long value){  this.isPresent=true;  this.value=value;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  double pos=(double)getPositionInContextNodeList(xctxt);  return new XNumber(pos);}  }
class C{  protected void fireTreeNodesRemoved(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesRemoved(e);    }  }}  }
class C{  protected void onDropView(final V view){}  }
class C{  public static PlaceholderFragment newInstance(View.OnClickListener listener,int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  fragment.listener=listener;  return fragment;}  }
class C{  public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static CancelExtendedRequest newCancelExtendedRequest(final int requestID){  return new CancelExtendedRequestImpl(requestID);}  }
class C{  public void drawFrame(int textureId,float[] texMatrix){  mProgram.draw(GlUtil.IDENTITY_MATRIX,mRectDrawable.getVertexArray(),0,mRectDrawable.getVertexCount(),mRectDrawable.getCoordsPerVertex(),mRectDrawable.getVertexStride(),texMatrix,mRectDrawable.getTexCoordArray(),textureId,mRectDrawable.getTexCoordStride());}  }
class C{  public Set searchDynamicGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP),wildcard,avPairs,level);}  }
class C{  private TimSort(T[] a,Comparator<? super T> c,T[] work,int workBase,int workLen){  this.a=a;  this.c=c;  int len=a.length;  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;  if (work == null || workLen < tlen || workBase + tlen > work.length) {    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),tlen);    tmp=newArray;    tmpBase=0;    tmpLen=tlen;  } else {    tmp=work;    tmpBase=workBase;    tmpLen=workLen;  }  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.restartServer();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType createAuthnRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl();}  }
class C{  @AndroidOnly("RI doesn't throw the specified IAE") public void test_addHandshakeCompletedListener() throws IOException {  SSLSocket ssl=getSSLSocket();  HandshakeCompletedListener ls=new HandshakeCL();  try {    ssl.addHandshakeCompletedListener(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.addHandshakeCompletedListener(ls);  ssl.close();}  }
class C{  public void addNotifType(String notifType){  Lock writeLock=notifTypesLock.writeLock();  writeLock.lock();  try {    String results[]=new String[notifTypes.length + 1];    System.arraycopy(notifTypes,0,results,0,notifTypes.length);    results[notifTypes.length]=notifType;    notifTypes=results;    this.info=null;  }  finally {    writeLock.unlock();  }}  }
class C{  protected Expression equals(int opPos) throws TransformerException {  return compileOperation(new Equals(),opPos);}  }
class C{  LogExtracts tryParse(String message){  for (  Extractor extractor : Extractor.values()) {    Matcher matcher=extractor.newMatcher(message);    if (matcher.matches()) {      return extract(extractor,matcher);    }  }  return null;}  }
class C{  @Inject public TokenInvalidator(TokenStore tokenStore,OAuth2RealmResolver realmResolver){  this.tokenStore=tokenStore;  this.realmResolver=realmResolver;}  }
class C{  public SubentryManager() throws DirectoryException {  super(DN.valueOf(CONFIG_DN),EnumSet.of(PluginType.PRE_OPERATION_ADD,PluginType.PRE_OPERATION_DELETE,PluginType.PRE_OPERATION_MODIFY,PluginType.PRE_OPERATION_MODIFY_DN,PluginType.POST_OPERATION_ADD,PluginType.POST_OPERATION_DELETE,PluginType.POST_OPERATION_MODIFY,PluginType.POST_OPERATION_MODIFY_DN,PluginType.POST_SYNCHRONIZATION_ADD,PluginType.POST_SYNCHRONIZATION_DELETE,PluginType.POST_SYNCHRONIZATION_MODIFY,PluginType.POST_SYNCHRONIZATION_MODIFY_DN),true);  DirectoryServer.registerInternalPlugin(this);  DirectoryServer.registerBackendInitializationListener(this);}  }
class C{  public static AccountUsabilityRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public boolean hasNext(){  return pos < length;}  }
class C{  public boolean isAffiliate(String realm,String entityName) throws AMConsoleException {  boolean isAffiliate=false;  try {    IDFFMetaManager idffManager=getIDFFMetaManager();    AffiliationDescriptorType ad=(AffiliationDescriptorType)idffManager.getAffiliationDescriptor(realm,entityName);    if (ad != null) {      isAffiliate=true;    }  } catch (  IDFFMetaException e) {    debug.warning("IDFFModel.isAffiliate",e);    throw new AMConsoleException(getErrorString(e));  }  return isAffiliate;}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.SecurityHeaderType createSecurityHeaderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.SecurityHeaderTypeImpl();}  }
class C{  void pop(){  if (!stack.isEmpty()) {    DirectoryNode node=stack.pop();    try {      node.stream().close();    } catch (    IOException ignore) {    }  }}  }
class C{  private void updateValuesFromBundle(Bundle savedInstanceState){  if (savedInstanceState != null) {    if (savedInstanceState.keySet().contains(ADDRESS_REQUESTED_KEY)) {      addressRequested=savedInstanceState.getBoolean(ADDRESS_REQUESTED_KEY);    }    if (savedInstanceState.keySet().contains(LOCATION_ADDRESS_KEY)) {      addressOutput=savedInstanceState.getString(LOCATION_ADDRESS_KEY);      displayAddressOutput();    }  }}  }
class C{  @Override public void flush(){}  }
class C{  private PluginInfo createPluginFromNode(final Node element){  PluginInfo info=new PluginInfo();  NodeList list=element.getChildNodes();  for (int i=0; i < list.getLength(); i++) {    Node childElem=(Node)list.item(i);    if ("name".equals(childElem.getNodeName())) {      info.setName(childElem.getNodeName().trim());    }    if ("class".equals(childElem.getNodeName())) {      info.setClassName(childElem.getNodeName().trim());    }    if ("params".equals(childElem.getNodeName())) {      NodeList list2=childElem.getChildNodes();      if (list.getLength() > 0) {        info.setParams(new ArrayList<PluginParam>());      }      for (int j=0; j < list2.getLength(); j++) {        Node node=list2.item(j);        if ("param".equals(node.getNodeName())) {          NamedNodeMap map=node.getAttributes();          PluginParam pp=new PluginParam();          for (int k=0; k < map.getLength(); k++) {            if ("name".equals(map.item(k).getNodeName())) {              pp.setName(map.item(k).getNodeName().trim());            }            if ("value".equals(map.item(k).getNodeName())) {              pp.setValue(map.item(k).getNodeName().trim());            }          }          info.getParams().add(pp);        }      }    }  }  return info;}  }
class C{  public UnknownServiceException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private void scanPIData(String target,XMLString data) throws IOException, JasperException {  if (target.length() == 3) {    char c0=Character.toLowerCase(target.charAt(0));    char c1=Character.toLowerCase(target.charAt(1));    char c2=Character.toLowerCase(target.charAt(2));    if (c0 == 'x' && c1 == 'm' && c2 == 'l') {      err.jspError("jsp.error.xml.reservedPITarget");    }  }  if (!skipSpaces()) {    if (skipString("?>")) {      data.clear();      return;    } else {      err.jspError("jsp.error.xml.spaceRequiredInPI");    }  }  fStringBuffer.clear();  if (scanData("?>",fStringBuffer)) {    do {      int c=peekChar();      if (c != -1) {        if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer);        } else         if (XMLChar.isInvalid(c)) {          err.jspError("jsp.error.xml.invalidCharInPI",Integer.toHexString(c));          scanChar();        }      }    } while (scanData("?>",fStringBuffer));  }  data.setValues(fStringBuffer);}  }
class C{  public void testSignumNegative(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  private static String[] createTimestampFormats(){  timestampFormats=new String[DateAdapterConstants.TIMESTAMP_INPUT_FORMATS.length + DateAdapterConstants.DATE_INPUT_FORMATS.length + 3];  timestampFormats[0]="yyyy-MM-dd'T'HH:mm:ss.SSSXXX";  timestampFormats[1]="yyyy-MM-dd'T'HH:mm:ssXXX";  timestampFormats[2]="yyyy-MM-dd'T'HH:mmXXX";  System.arraycopy(DateAdapterConstants.TIMESTAMP_INPUT_FORMATS,0,timestampFormats,3,DateAdapterConstants.TIMESTAMP_INPUT_FORMATS.length);  System.arraycopy(DateAdapterConstants.DATE_INPUT_FORMATS,0,timestampFormats,DateAdapterConstants.TIMESTAMP_INPUT_FORMATS.length + 3,DateAdapterConstants.DATE_INPUT_FORMATS.length);  return timestampFormats;}  }
class C{  public ByteArrayBuilder appendIntUTF8(int i){  return appendString(Integer.toString(i));}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public void endNamespaceDecls(){  if (!decls.isEmpty()) {    for (Iterator itr=decls.entrySet().iterator(); itr.hasNext(); ) {      Map.Entry e=(Map.Entry)itr.next();      String prefix=(String)e.getKey();      String uri=(String)e.getValue();      if (!uri.equals(nss.getURI(prefix)))       nss.declarePrefix(prefix,uri);    }    decls.clear();    reverseDecls.clear();  }  inCollectingMode=false;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle alloc=a.getBounds();  alloc.height=metrics.getHeight();  alloc.width=1;  int p0=getStartOffset();  if (pos < p0 || pos > getEndOffset()) {    throw new BadLocationException("Position out of range",pos);  }  int testP=(b == Position.Bias.Forward) ? pos : Math.max(p0,pos - 1);  int line=0;  int[] lineEnds=getLineEnds();  if (lineEnds != null) {    line=findLine(testP - p0);    if (line > 0) {      p0+=lineEnds[line - 1];    }    alloc.y+=alloc.height * line;  }  if (pos > p0) {    Segment segment=SegmentCache.getSharedSegment();    loadText(segment,p0,pos);    alloc.x+=Utilities.getTabbedTextWidth(segment,metrics,alloc.x,WrappedPlainView.this,p0);    SegmentCache.releaseSharedSegment(segment);  }  return alloc;}  }
class C{  public final void testGetType(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertEquals("TEST_TYPE",c1.getType());}  }
class C{  @Override public void initParams(final HttpServletRequest request,final IConfiguration configuration,final Object... params) throws ConnectorException {  super.initParams(request,configuration,params);  this.ckFinderFuncNum=request.getParameter("CKFinderFuncNum");  this.ckEditorFuncNum=request.getParameter("CKEditorFuncNum");  this.responseType=request.getParameter("response_type");  this.langCode=request.getParameter("langCode");  if (this.errorCode == Constants.Errors.CKFINDER_CONNECTOR_ERROR_NONE) {    this.uploaded=uploadFile(request);  }}  }
class C{  public void init(byte[] password,byte[] salt){  super.init(password,salt,1);}  }
class C{  public SAMLv2AffiliateViewBean(){  super("SAMLv2Affiliate");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public static void addAttributeToSchema(String serviceName,String subSchemaName,String schemaType,Node attributeSchemaNode,SSOToken adminToken) throws UpgradeException {  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType,adminToken);  addAttributeToSchema(ss,attributeSchemaNode);}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/sslConnectorCiphers");}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  PrintWriter out=resp.getWriter();  Enumeration<String> values=req.getHeaders("X-Bug48839");  while (values.hasMoreElements()) {    out.println(values.nextElement());  }}  }
class C{  public synchronized Object clone() throws CloneNotSupportedException {  VariableStack vs=(VariableStack)super.clone();  vs._stackFrames=(XObject[])_stackFrames.clone();  vs._links=(int[])_links.clone();  return vs;}  }
class C{  protected static boolean isClientTypeValid(String userAgent){  boolean valid=true;  for (int i=0; (i < invalidCharacters.length) && valid; i++) {    valid=(userAgent.indexOf(invalidCharacters[i]) == -1);  }  return valid;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyInfoElement createKeyInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyInfoElementImpl();}  }
class C{  public void transform(Source source,Result outputTarget) throws TransformerException {  createResultContentHandler(outputTarget);  if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {    try {      DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();      DocumentBuilder builder=builderF.newDocumentBuilder();      String systemID=source.getSystemId();      source=new DOMSource(builder.newDocument());      if (systemID != null) {        source.setSystemId(systemID);      }    } catch (    ParserConfigurationException e) {      throw new TransformerException(e.getMessage());    }  }  try {    if (source instanceof DOMSource) {      DOMSource dsource=(DOMSource)source;      m_systemID=dsource.getSystemId();      Node dNode=dsource.getNode();      if (null != dNode) {        try {          if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)           this.startDocument();          try {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE) {              String data=dNode.getNodeValue();              char[] chars=data.toCharArray();              characters(chars,0,chars.length);            } else {              org.apache.xml.serializer.TreeWalker walker;              walker=new org.apache.xml.serializer.TreeWalker(this,m_systemID);              walker.traverse(dNode);            }          }  finally {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)             this.endDocument();          }        } catch (        SAXException se) {          throw new TransformerException(se);        }        return;      } else {        String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);        throw new IllegalArgumentException(messageStr);      }    }    InputSource xmlSource=SAXSource.sourceToInputSource(source);    if (null == xmlSource) {      throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_SOURCE_TYPE,new Object[]{source.getClass().getName()}));    }    if (null != xmlSource.getSystemId())     m_systemID=xmlSource.getSystemId();    XMLReader reader=null;    boolean managedReader=false;    try {      if (source instanceof SAXSource) {        reader=((SAXSource)source).getXMLReader();      }      if (null == reader) {        try {          reader=XMLReaderManager.getInstance().getXMLReader();          managedReader=true;        } catch (        SAXException se) {          throw new TransformerException(se);        }      } else {        try {          reader.setFeature("http://xml.org/sax/features/namespace-prefixes",true);        } catch (        org.xml.sax.SAXException se) {        }      }      ContentHandler inputHandler=this;      reader.setContentHandler(inputHandler);      if (inputHandler instanceof org.xml.sax.DTDHandler)       reader.setDTDHandler((org.xml.sax.DTDHandler)inputHandler);      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/properties/lexical-handler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/properties/declaration-handler",inputHandler);      } catch (      org.xml.sax.SAXException se) {      }      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/handlers/LexicalHandler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/handlers/DeclHandler",inputHandler);      } catch (      org.xml.sax.SAXNotRecognizedException snre) {      }      reader.parse(xmlSource);    } catch (    org.apache.xml.utils.WrappedRuntimeException wre) {      Throwable throwable=wre.getException();      while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {        throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();      }      throw new TransformerException(wre.getException());    }catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }catch (    IOException ioe) {      throw new TransformerException(ioe);    } finally {      if (managedReader) {        XMLReaderManager.getInstance().releaseXMLReader(reader);      }    }  }  finally {    if (null != m_outputStream) {      try {        m_outputStream.close();      } catch (      IOException ioe) {      }      m_outputStream=null;    }  }}  }
class C{  @Override public void close(){}  }
class C{  public static String[] list(String name) throws RemoteException, java.net.MalformedURLException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  String prefix="";  if (parsed.port > 0 || !parsed.host.equals(""))   prefix+="//" + parsed.host;  if (parsed.port > 0)   prefix+=":" + parsed.port;  prefix+="/";  String[] names=registry.list();  for (int i=0; i < names.length; i++) {    names[i]=prefix + names[i];  }  return names;}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  public int popInt(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Integer value=(Integer)wrapper.getValue();  return value.intValue();}  }
class C{  public void windowClosing(WindowEvent e){}  }
class C{  public static MatchedValuesFilter createSubstringsFilter(String rawAttributeType,ByteString subInitial,List<ByteString> subAny,ByteString subFinal){  Reject.ifNull(rawAttributeType);  return new MatchedValuesFilter(SUBSTRINGS_TYPE,rawAttributeType,null,subInitial,subAny,subFinal,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetownerdocumentnull.class,args);}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  public boolean isLocalSessionService(URL url){  return isUrlPrefix(localServerSessionServiceURL,url);}  }
class C{  private Object delegate(int testNumber) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(new byte[0]);switch (testNumber) {case 0:    return scanner.nextByte();case 1:  return scanner.nextBoolean();case 2:return scanner.nextShort();case 3:return scanner.nextInt();case 4:return scanner.nextIntUTF8();case 5:return scanner.nextLong();case 6:return scanner.nextLongUTF8();case 7:return scanner.nextCSN();default :return null;}}  }
class C{  private void rejectAccessAndTerminateProcess(RadiusResponse response,ContextHolder holder){  response.setResponsePacket(new AccessReject());  response.setUniversalId(holder.getUniversalId());  terminateAuthnProcess(holder);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(-69);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public String toString(){  return (status);}  }
class C{  public void signXML() throws SAMLException {  throw new SAMLException(FSUtils.BUNDLE_NAME,"unsupportedOperation",null);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof BasicStroke)) {    return false;  }  BasicStroke bs=(BasicStroke)obj;  if (width != bs.width) {    return false;  }  if (join != bs.join) {    return false;  }  if (cap != bs.cap) {    return false;  }  if (miterlimit != bs.miterlimit) {    return false;  }  if (dash != null) {    if (dash_phase != bs.dash_phase) {      return false;    }    if (!java.util.Arrays.equals(dash,bs.dash)) {      return false;    }  } else   if (bs.dash != null) {    return false;  }  return true;}  }
class C{  public RAFRandomAccessSource(RandomAccessFile raf) throws java.io.IOException {  this.raf=raf;  length=raf.length();}  }
class C{  public void paint(GlyphView v,Graphics g,Shape a,int p0,int p1){  if (g instanceof Graphics2D) {    Rectangle2D alloc=a.getBounds2D();    Graphics2D g2d=(Graphics2D)g;    float y=(float)alloc.getY() + layout.getAscent() + layout.getLeading();    float x=(float)alloc.getX();    if (p0 > v.getStartOffset() || p1 < v.getEndOffset()) {      try {        Shape s=v.modelToView(p0,Position.Bias.Forward,p1,Position.Bias.Backward,a);        Shape savedClip=g.getClip();        g2d.clip(s);        layout.draw(g2d,x,y);        g.setClip(savedClip);      } catch (      BadLocationException e) {      }    } else {      layout.draw(g2d,x,y);    }  }}  }
class C{  public void nodesWereInserted(TreeNode node,int[] childIndices){  if (listenerList != null && node != null && childIndices != null && childIndices.length > 0) {    int cCount=childIndices.length;    Object[] newChildren=new Object[cCount];    for (int counter=0; counter < cCount; counter++)     newChildren[counter]=node.getChildAt(childIndices[counter]);    fireTreeNodesInserted(this,getPathToRoot(node),childIndices,newChildren);  }}  }
class C{  private BinaryValue(){}  }
class C{  protected Instrument(Soundbank soundbank,Patch patch,String name,Class<?> dataClass){  super(soundbank,name,dataClass);  this.patch=patch;}  }
class C{  @Override public boolean removeAll(Collection c){  if (c instanceof CaseInsensitiveHashSet) {    return super.removeAll(c);  } else {    Set<String> ciHashSet=new CaseInsensitiveHashSet(c);    return super.removeAll(ciHashSet);  }}  }
class C{  public boolean removeElement(Object key){  return false;}  }
class C{  public void testSocket_ActionsBeforeConnect() throws IOException {  assertFalse(this.channel1.isConnected());  DatagramSocket s=this.channel1.socket();  assertSocketActionBeforeConnect(s);}  }
class C{  public PdfCanvas stroke(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_STROKE,resources);  contentStream.getOutputStream().writeBytes(S);  return this;}  }
class C{  public void updateConnect(){  connectionsEstablished.getAndIncrement();}  }
class C{  public int size(){  return components.size();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, KeyManagementException {  try {    SSLContext.getInstance(null,mProv.getName());    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      SSLContext.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        SSLContext.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (protocol: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i],mProv.getName());    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider().getName(),mProv.getName());    checkSSLContext(sslC);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  retrieveCommonProperties();  try {    IDFFModel model=(IDFFModel)getModel();    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTES);    Map stdValues=ps.getAttributeValues(model.getEntitySPDescriptor(realm,entityName),false,model);    Map extValues=ps.getAttributeValues(model.getAllSPExtendedMetaMap(),false,model);    Map spAllExtValues=model.getSPEntityConfig(realm,entityName,ENTITY_LOCATION);    spAllExtValues.putAll(extValues);    model.updateEntitySPDescriptor(realm,entityName,stdValues,spAllExtValues,isHosted());    model.updateSPEntityConfig(realm,entityName,spAllExtValues);    if (isHosted()) {      model.updateSPAuthenticationContexts(realm,entityName,getAuthenticationContexts());    }    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idff.entityDescriptor.provider.sp.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    debug.warning("IDFFSPViewBean -> handleButton1Request",e);  }  forwardTo();}  }
class C{  private boolean needsRepaintAfterBlit(){  Component heavyParent=getParent();  while (heavyParent != null && heavyParent.isLightweight()) {    heavyParent=heavyParent.getParent();  }  if (heavyParent != null) {    ComponentPeer peer=heavyParent.getPeer();    if (peer != null && peer.canDetermineObscurity() && !peer.isObscured()) {      return false;    }  }  return true;}  }
class C{  public static IOFileFilter trueFileFilter(){  return TrueFileFilter.TRUE;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ResourceOfferingElement createResourceOfferingElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceOfferingElementImpl();}  }
class C{  public static XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodevalue.class,args);}  }
class C{  public void finalizeChangeListener(){  for (  DN dependency : dependencies) {    Entry listenerConfigEntry=getConfigEntry(dependency);    if (listenerConfigEntry != null) {      configRepository.deregisterChangeListener(listenerConfigEntry.getName(),dependencyListener);    }  }  Entry parentConfigEntry=getConfigEntry(dn.parent());  if (parentConfigEntry != null) {    configRepository.deregisterDeleteListener(parentConfigEntry.getName(),cleanerListener);  }}  }
class C{  public SeparatedValuesReader(Reader input,Separator separator){  this.input=input;  this.separator=separator;}  }
class C{  public static InvalidScopeException create(final String message,final OAuth2Request request){  final Set<String> responseTypes=Utils.splitResponseType(request.<String>getParameter(RESPONSE_TYPE));  return new InvalidScopeException(message,Utils.isOAuth2FragmentErrorType(responseTypes) ? FRAGMENT : QUERY);}  }
class C{  public NO_RESOURCES(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public ServerException(String s){  super(s);}  }
class C{  public TokenOwnerAuthzModule(String tokenIdParameter,SSOTokenManager ssoTokenManager,String... allowedActions){  Reject.ifNull(allowedActions);  Reject.ifTrue(StringUtils.isEmpty(tokenIdParameter));  this.ssoTokenManager=ssoTokenManager;  this.allowedActions=new HashSet<>(Arrays.asList(allowedActions));  this.tokenIdParameter=tokenIdParameter;}  }
class C{  private void configureErrorMessage(final SMSException exception) throws ForbiddenException, NotFoundException, PermanentException, ConflictException, BadRequestException {  if (exception.getErrorCode().equalsIgnoreCase("sms-REALM_NAME_NOT_FOUND")) {    throw new NotFoundException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-INVALID_SSO_TOKEN")) {    throw new PermanentException(401,"Unauthorized-Invalid SSO Token",exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-organization_already_exists1")) {    throw new ConflictException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-invalid-org-name")) {    throw new BadRequestException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-cannot_delete_rootsuffix")) {    throw new PermanentException(401,"Unauthorized-Cannot delete root suffix",exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-entries-exists")) {    throw new ConflictException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-SMSSchema_service_notfound")) {    throw new NotFoundException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-no-organization-schema")) {    throw new NotFoundException(exception.getMessage(),exception);  } else   if (exception.getErrorCode().equalsIgnoreCase("sms-attribute-values-does-not-match-schema")) {    throw new BadRequestException(exception.getMessage(),exception);  } else {    throw new BadRequestException(exception.getMessage(),exception);  }}  }
class C{  public DataSourceFactoryConfigVisitor(BundleContext bundleContext){  this.bundleContext=bundleContext;}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  private void createThreads(int timersToCreate){  if (timersToCreate > poolSize) {    timersToCreate=poolSize;  }  for (int i=currentThreadCount; i < timersToCreate; i++) {    threads[i - busyThreadCount]=new WorkerThread(name,this);    threads[i - busyThreadCount].setDaemon(daemon);    threads[i - busyThreadCount].start();  }  currentThreadCount=timersToCreate;}  }
class C{  public LifecycleListenerRule(String listenerClass,String attributeName){  this.listenerClass=listenerClass;  this.attributeName=attributeName;}  }
class C{  public boolean shove_vias(ShapeTile p_obstacle_shape,BrdFromSide p_from_side,int p_layer,NetNosList p_net_no_arr,int p_cl_type,Collection<BrdItem> p_ignore_items,int p_max_recursion_depth,int p_max_via_recursion_depth,boolean p_copper_sharing_allowed){  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_obstacle_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_obstacle_shape,p_layer,NetNosList.EMPTY,p_cl_type);  if (!shape_entries.store_items(obstacles,false,p_copper_sharing_allowed)) {    return true;  }  if (p_ignore_items != null) {    shape_entries.shove_via_list.removeAll(p_ignore_items);  }  if (shape_entries.shove_via_list.isEmpty()) {    return true;  }  double shape_radius=0.5 * p_obstacle_shape.bounding_box().min_width();  for (  BrdAbitVia curr_via : shape_entries.shove_via_list) {    if (curr_via.shares_net_no(p_net_no_arr))     continue;    if (p_max_via_recursion_depth <= 0)     return true;    PlaPointInt[] try_via_centers=try_shove_via_points(p_obstacle_shape,p_layer,curr_via,p_cl_type,true);    PlaPointInt new_via_center=null;    double max_dist=0.5 * curr_via.get_shape_on_layer(p_layer).bounding_box().max_width() + shape_radius;    double max_dist_square=max_dist * max_dist;    PlaPointInt curr_via_center=curr_via.center_get();    PlaPointFloat check_via_center=curr_via_center.to_float();    PlaVectorInt rel_coor=null;    for (int index=0; index < try_via_centers.length; ++index) {      if (index != 0)       continue;      if (check_via_center.distance_square(try_via_centers[index].to_float()) > max_dist_square)       continue;      LinkedList<BrdItem> ignore_items=new LinkedList<BrdItem>();      if (p_ignore_items != null)       ignore_items.addAll(p_ignore_items);      rel_coor=try_via_centers[index].difference_by(curr_via_center);      boolean shove_ok=check(curr_via,rel_coor,p_max_recursion_depth,p_max_via_recursion_depth - 1,ignore_items,null);      if (shove_ok) {        new_via_center=try_via_centers[index];        break;      }    }    if (new_via_center == null)     continue;    if (!insert(curr_via,rel_coor,p_max_recursion_depth,p_max_via_recursion_depth - 1,null)) {      return false;    }  }  return true;}  }
class C{  public final void testRead02() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dis.read();      }      assertEquals("retval1",-1,dis.read());      assertEquals("retval2",-1,dis.read());      assertEquals("retval3",-1,dis.read());      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  boolean searchAllBaseDNs(){  return baseDNs.isEmpty();}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> deleteInstance(Context context,String resourceId,DeleteRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public EncryptedResourceID(Element elem,String nspaceURI) throws DiscoveryException {  init(elem,nspaceURI);}  }
class C{  boolean buildAndPublishMissingChanges(CSN startCSN,ReplicationBroker session) throws Exception {synchronized (replayOperations) {    Iterator<CSN> it=replayOperations.keySet().iterator();    while (it.hasNext()) {      if (shutdown.get()) {        return false;      }      if (it.next().isNewerThan(startCSN)) {        break;      }      it.remove();    }  }  CSN lastRetrievedChange;  InternalSearchOperation op;  CSN currentStartCSN=startCSN;  do {    if (shutdown.get()) {      return false;    }    lastRetrievedChange=null;    long missingChangesDelta=currentStartCSN.getTime() + 10000;    CSN endCSN=new CSN(missingChangesDelta,0xffffffff,getServerId());    ScanSearchListener listener=new ScanSearchListener(currentStartCSN,endCSN);    op=searchForChangedEntries(getBaseDN(),currentStartCSN,endCSN,listener);    final List<FakeOperation> opsToSend=new LinkedList<>();synchronized (replayOperations) {      Iterator<FakeOperation> itOp=replayOperations.values().iterator();      while (itOp.hasNext()) {        if (shutdown.get()) {          return false;        }        FakeOperation fakeOp=itOp.next();        if (fakeOp.getCSN().isNewerThan(endCSN) || !state.cover(fakeOp.getCSN()) || currentStartCSN.isNewerThan(now())) {          break;        }        lastRetrievedChange=fakeOp.getCSN();        opsToSend.add(fakeOp);        itOp.remove();      }    }    for (    FakeOperation opToSend : opsToSend) {      if (shutdown.get()) {        return false;      }      session.publishRecovery(opToSend.generateMessage());    }    if (lastRetrievedChange != null) {      if (logger.isDebugEnabled()) {        logger.debug(LocalizableMessage.raw("publish loop" + " >=" + currentStartCSN + " <="+ endCSN+ " nentries="+ op.getEntriesSent()+ " result="+ op.getResultCode()+ " lastRetrievedChange="+ lastRetrievedChange));      }      currentStartCSN=lastRetrievedChange;    } else {      if (logger.isDebugEnabled()) {        logger.debug(LocalizableMessage.raw("publish loop" + " >=" + currentStartCSN + " <="+ endCSN+ " nentries="+ op.getEntriesSent()+ " result="+ op.getResultCode()+ " no changes"));      }      currentStartCSN=endCSN;    }  } while (pendingChanges.recoveryUntil(currentStartCSN) && op.getResultCode().equals(ResultCode.SUCCESS));  return op.getResultCode().equals(ResultCode.SUCCESS);}  }
class C{  public static Object generate(CustomCommandScope service,Map<String,String> commands,String suffix) throws Exception {  try {    ClassWriter cw=new ClassWriter(0);    MethodVisitor mv;    AnnotationVisitor av0;    String className=AbstractFelixCommandsService.class.getName().replace('.','/') + suffix;    cw.visit(V1_5,ACC_PUBLIC + ACC_SUPER,className,null,AbstractFelixCommandsService.class.getName().replace('.','/'),null);    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(Ljava/lang/Object;)V",null,null);    mv.visitCode();    Label l0=new Label();    mv.visitLabel(l0);    mv.visitLineNumber(10,l0);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(ALOAD,1);    mv.visitMethodInsn(INVOKESPECIAL,AbstractFelixCommandsService.class.getName().replace('.','/'),"<init>","(Ljava/lang/Object;)V");    Label l1=new Label();    mv.visitLabel(l1);    mv.visitLineNumber(11,l1);    mv.visitInsn(RETURN);    Label l2=new Label();    mv.visitLabel(l2);    mv.visitLocalVariable("this","L" + className + ";",null,l0,l2,0);    mv.visitLocalVariable("service","Ljava/lang/Object;",null,l0,l2,1);    mv.visitMaxs(2,2);    mv.visitEnd();    Set<String> names=commands.keySet();    for (    String name : names) {      if (isMethodAvailable(service,name)) {        mv=cw.visitMethod(ACC_PUBLIC,name,"(Lorg/apache/felix/service/command/CommandSession;[Ljava/lang/String;)V",null,null);        av0=mv.visitAnnotation("Lorg/apache/felix/service/command/Descriptor;",true);        av0.visit("value",commands.get(name));        av0.visitEnd();        mv.visitCode();        l0=new Label();        mv.visitLabel(l0);        mv.visitLineNumber(15,l0);        mv.visitVarInsn(ALOAD,0);        mv.visitLdcInsn(name);        mv.visitVarInsn(ALOAD,1);        mv.visitVarInsn(ALOAD,2);        mv.visitMethodInsn(INVOKEVIRTUAL,className,"runCommand","(Ljava/lang/String;Lorg/apache/felix/service/command/CommandSession;" + "[Ljava/lang/String;)V");        l1=new Label();        mv.visitLabel(l1);        mv.visitLineNumber(16,l1);        mv.visitInsn(RETURN);        l2=new Label();        mv.visitLabel(l2);        mv.visitLocalVariable("this","L" + className + ";",null,l0,l2,0);        mv.visitLocalVariable("session","Lorg/apache/felix/service/command/CommandSession;",null,l0,l2,1);        mv.visitLocalVariable("args","[Ljava/lang/String;",null,l0,l2,2);        mv.visitMaxs(4,3);        mv.visitEnd();      }    }    cw.visitEnd();    Class<?> aClass=classLoader.defineClass(className,cw.toByteArray());    Constructor<?> constructor=aClass.getConstructor(Object.class);    return constructor.newInstance(service);  } catch (  Exception e) {    throw e;  }}  }
class C{  public PreferencesManager(Context context){  mContext=context;  mGson=new Gson();  mMode=INVALID_VALUE;}  }
class C{  public void addMenuKeyListener(MenuKeyListener l){  listenerList.add(MenuKeyListener.class,l);}  }
class C{  public static List<String> filterTags(List<LanguageRange> priorityList,Collection<String> tags,FilteringMode mode){  return LocaleMatcher.filterTags(priorityList,tags,mode);}  }
class C{  private static long[] innerSquare(long[] a){  long[] output=new long[19];  output[0]=a[0] * a[0];  output[1]=a[0] * a[1] * 2;  output[2]=(a[1] * a[1] + a[0] * a[2]) * 2;  output[3]=(a[1] * a[2] + a[0] * a[3]) * 2;  output[4]=a[2] * a[2] + a[1] * a[3] * 4 + a[0] * a[4] * 2;  output[5]=(a[2] * a[3] + a[1] * a[4] + a[0] * a[5]) * 2;  output[6]=(a[3] * a[3] + a[2] * a[4] + a[0] * a[6] + a[1] * a[5] * 2) * 2;  output[7]=(a[3] * a[4] + a[2] * a[5] + a[1] * a[6] + a[0] * a[7]) * 2;  output[8]=a[4] * a[4] + (a[2] * a[6] + a[0] * a[8] + (a[1] * a[7] + a[3] * a[5]) * 2) * 2;  output[9]=(a[4] * a[5] + a[3] * a[6] + a[2] * a[7] + a[1] * a[8] + a[0] * a[9]) * 2;  output[10]=(a[5] * a[5] + a[4] * a[6] + a[2] * a[8] + (a[3] * a[7] + a[1] * a[9]) * 2) * 2;  output[11]=(a[5] * a[6] + a[4] * a[7] + a[3] * a[8] + a[2] * a[9]) * 2;  output[12]=a[6] * a[6] + (a[4] * a[8] + (a[5] * a[7] + a[3] * a[9]) * 2) * 2;  output[13]=(a[6] * a[7] + a[5] * a[8] + a[4] * a[9]) * 2;  output[14]=(a[7] * a[7] + a[6] * a[8] + a[5] * a[9] * 2) * 2;  output[15]=(a[7] * a[8] + a[6] * a[9]) * 2;  output[16]=a[8] * a[8] + a[7] * a[9] * 4;  output[17]=a[8] * a[9] * 2;  output[18]=a[9] * a[9] * 2;  return output;}  }
class C{  private static void handleForwardException(Exception exception) throws SAML2Exception {  debug.error("Failed to forward to auto submitting JSP",exception);  throw new SAML2Exception(bundle.getString("postToTargetFailed"));}  }
class C{  @Override public void removeSessionListener(SessionListener listener){  listeners.remove(listener);}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void onIdle() throws IllegalStateException {  currentState.idle();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedatabegining.class,args);}  }
class C{  public SiteEditViewBean(){  super("SiteEdit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public boolean containsValue(Date val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSDate.class)) {      NSDate dat=(NSDate)o;      if (dat.getDate().equals(val))       return true;    }  }  return false;}  }
class C{  public boolean cover(MultiDomainServerState covered){  for (  DN baseDN : covered.list.keySet()) {    ServerState state=list.get(baseDN);    ServerState coveredState=covered.list.get(baseDN);    if (state == null || coveredState == null || !state.cover(coveredState)) {      return false;    }  }  return true;}  }
class C{  private void parseMajorVersion(String reqID,String majorVer) throws SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request(Element): invalid " + "MajorVersion",e);    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Request(Element):MajorVersion of " + "the Request is too high.");      }      throw new SAMLRequestVersionTooHighException(reqID + "|" + SAMLUtils.bundle.getString("requestVersionTooHigh"));    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Request(Element):MajorVersion of " + "the Request is too low.");      }      throw new SAMLRequestVersionTooLowException(reqID + "|" + SAMLUtils.bundle.getString("requestVersionTooLow"));    }  }}  }
class C{  public int size(){  int len=getArrayLength() - (getGapEnd() - getGapStart());  return len;}  }
class C{  public boolean hasPredicates(){  return !CollectionUtils.isEmpty(predicates);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetlastchild.class,args);}  }
class C{  public void createPendingRequest(HttpServletRequest httpRequest,String resourceSetId,String resourceSetName,String resourceOwnerId,String requestingPartyId,String realm,Set<String> scopes) throws ServerException {  UmaPendingRequest pendingRequest=new UmaPendingRequest(resourceSetId,resourceSetName,resourceOwnerId,realm,requestingPartyId,scopes);  store.create(pendingRequest);  if (isEmailResourceOwnerOnPendingRequestCreationEnabled(realm)) {    Pair<String,String> template=pendingRequestEmailTemplate.getCreationTemplate(resourceOwnerId,realm);    try {      String scopesString=pendingRequestEmailTemplate.buildScopeString(scopes,resourceOwnerId,realm);      String baseUrl=baseURLProviderFactory.get(realm).getRootURL(httpRequest);      emailService.email(realm,resourceOwnerId,template.getFirst(),MessageFormat.format(template.getSecond(),requestingPartyId,resourceSetName,scopesString,baseUrl,pendingRequest.getId()));    } catch (    MessagingException e) {      debug.warning("Pending Request Creation email could not be sent",e);    }  }}  }
class C{  public boolean removeChild(Tree<E> child){  return children.remove(child);}  }
class C{  public SoftReference(T referent){  super(referent);  this.timestamp=clock;}  }
class C{  public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  @DataProvider(name="urlobjects2") public Object[][] createURLObjects2(){  return new Object[][]{{new LDAPUrl(false,null,null,null,null,null),LDAPUrl.valueOf("ldap:///")},{new LDAPUrl(true,null,null,null,null,null),LDAPUrl.valueOf("ldaps:///")},{new LDAPUrl(true,"void.central.sun.com",null,null,null,null),LDAPUrl.valueOf("ldaps://void.central.sun.com")},{new LDAPUrl(true,null,1245,null,null,null),LDAPUrl.valueOf("ldaps://:1245")},{new LDAPUrl(true,"void.central",123,null,null,null),LDAPUrl.valueOf("ldaps://void.central:123")},{new LDAPUrl(true,null,null,null,null,null,"cn","sn"),LDAPUrl.valueOf("ldaps:///?cn,sn??")},{new LDAPUrl(true,null,null,null,null,Filter.equality("uid","abc"),"cn"),LDAPUrl.valueOf("ldaps:///?cn??(uid=abc)")},{new LDAPUrl(true,null,null,null,SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),LDAPUrl.valueOf("ldaps:///?cn?sub?(uid=abc)")},{new LDAPUrl(true,null,null,DN.valueOf("uid=abc,o=target"),SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),LDAPUrl.valueOf("ldaps:///uid=abc,o=target?cn?sub?(uid=abc)")},{new LDAPUrl(true,"localhost",1345,DN.valueOf("uid=abc,o=target"),SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),LDAPUrl.valueOf("ldaps://localhost:1345/uid=abc,o=target?cn?sub?(uid=abc)")}};}  }
class C{  public void addAll(ResourceSaveIndexes other){  this.hostIndexes.addAll(other.hostIndexes);  this.pathIndexes.addAll(other.pathIndexes);  this.parentPath.addAll(other.parentPath);}  }
class C{  @Override public Foo fetchByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator){  int count=countByUuid(uuid);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid(uuid,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  @Override public Promise<AuthStatus,AuthenticationException> secureResponse(MessageInfoContext messageInfo,Subject serviceSubject){  return newResultPromise(SEND_SUCCESS);}  }
class C{  public void store() throws Exception {  BufferedWriter writer=null;  try {    writer=new BufferedWriter(new FileWriter(getDocumentFile()));    ArrayList rawTokens=getRawTokens();    for (int i=0; i < rawTokens.size(); i++) {      writer.write(((Token)rawTokens.get(i)).toString());    }    writer.flush();    writer.close();  } catch (  Exception ex) {    throw ex;  } finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public int drainPermits(){  return sync.drainPermits();}  }
class C{  void noteItem(){  ++items;  notifyListener();}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {  if (this == handler.getCurrentProcessor()) {    handler.popProcessor();  }  int nChars=m_accumulator.length();  if ((nChars > 0) && ((null != m_xslTextElement) || !XMLCharacterRecognizer.isWhiteSpace(m_accumulator)) || handler.isSpacePreserve()) {    ElemTextLiteral elem=new ElemTextLiteral();    elem.setDOMBackPointer(m_firstBackPointer);    elem.setLocaterInfo(handler.getLocator());    try {      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }    boolean doe=(null != m_xslTextElement) ? m_xslTextElement.getDisableOutputEscaping() : false;    elem.setDisableOutputEscaping(doe);    elem.setPreserveSpace(true);    char[] chars=new char[nChars];    m_accumulator.getChars(0,nChars,chars,0);    elem.setChars(chars);    ElemTemplateElement parent=handler.getElemTemplateElement();    parent.appendChild(elem);  }  m_accumulator.setLength(0);  m_firstBackPointer=null;}  }
class C{  public synchronized void removeActionListener(ActionListener l){  if ((l != null) && (getAction() == l)) {    setAction(null);  } else {    listenerList.remove(ActionListener.class,l);  }}  }
class C{  public synchronized Object send(String functionName,Object param,String cookies) throws Exception {  return (send(encodeMessage(functionName,param),cookies));}  }
class C{  public String findFilterDef(String name) throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  FilterDef filterDef=context.findFilterDef(name);  return filterDef.toString();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String documentFragmentName;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  documentFragmentName=docFragment.getNodeName();  assertEquals("nodeDocumentFragmentNodeNameAssert1","#document-fragment",documentFragmentName);}  }
class C{  public TldScanner(ServletContext context,boolean namespaceAware,boolean validation,boolean blockExternal){  this.context=context;  this.tldParser=new TldParser(namespaceAware,validation,blockExternal);}  }
class C{  public SQLNonTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public void reload(){  internalLoad();}  }
class C{  public DRLCertFactory(){  super("DRLCertFactory",1.0,"ASN.1, DER, PkiPath, PKCS7");  put("CertificateFactory.X509","org.apache.harmony.security.provider.cert.X509CertFactoryImpl");  put("Alg.Alias.CertificateFactory.X.509","X509");}  }
class C{  public void clear(){synchronized (mapBundles) {    mapBundles.clear();  }}  }
class C{  public boolean isBorderPaintedFlat(){  return flat;}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof SampleAuthPrincipal)) {    return false;  }  SampleAuthPrincipal that=(SampleAuthPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  public boolean isEditing(){  TreeUI tree=getUI();  if (tree != null)   return tree.isEditing(this);  return false;}  }
class C{  public boolean hasConnection(){  return mConnection != null;}  }
class C{  public static boolean isZeroPageLoginAllowed(ZeroPageLoginConfig config,HttpServletRequest request){  final boolean isPost="POST".equalsIgnoreCase(request.getMethod());  if (!isPost && !config.isEnabled()) {    return false;  }  final String referer=request.getHeader(HTTP_REFERER);  final Set<String> whitelist=config.getRefererWhitelist();  if (referer == null) {    return config.isAllowedWithoutReferer();  }  return whitelist.isEmpty() || whitelist.contains(referer);}  }
class C{  protected void backupProductHome() throws InstallException {  String locatorFile=getProductLocatorFile();  try {    FileUtils.backupFile(locatorFile,STR_BACK_UP_FILE_SUFFIX);    saveProductHome();  } catch (  Exception e) {    Debug.log("MigrateServerLocatorHandler - Error occurred " + "while backup and deletion for file: '" + locatorFile + "'.");    Object[] args={locatorFile};    throw new InstallException(LocalizedMessage.get(LOC_DR_ERR_PRODUCT_LOCATOR_BACKUP,args));  }}  }
class C{  public void disableSync(){  data.put("enabled",Boolean.FALSE);}  }
class C{  protected Rectangle applyPaddings(Rectangle rect,float[] paddings,boolean reverse){  return rect.<Rectangle>applyMargins(paddings[0],paddings[1],paddings[2],paddings[3],reverse);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    TestCase.assertTrue("dialog mismatch ",this.dialog == serverTransaction.getDialog());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1 && this.sendReInviteFlag) {      dialog=inviteTid.getDialog();      this.sendReInvite(sipProvider);    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    TestCase.fail(s);  }}  }
class C{  public BuilderImage<T> size(Size size){  this.config.setSize(size);  return this;}  }
class C{  public X509NameTokenizer(String oid){  this.oid=oid;  this.index=-1;}  }
class C{  public static void closeQuietly(Socket socket){  if (socket != null) {    try {      socket.close();    } catch (    Exception ignored) {    }  }}  }
class C{  private static byte[] parseSamples(PdfDictionary imageDictionary,PdfDictionary colorSpaceDic,PdfCanvasParser ps) throws IOException {  if (!imageDictionary.containsKey(PdfName.Filter) && imageColorSpaceIsKnown(imageDictionary,colorSpaceDic)) {    return parseUnfilteredSamples(imageDictionary,colorSpaceDic,ps);  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ByteArrayOutputStream accumulated=new ByteArrayOutputStream();  int ch;  int found=0;  PdfTokenizer tokeniser=ps.getTokeniser();  while ((ch=tokeniser.read()) != -1) {    if (found == 0 && PdfTokenizer.isWhitespace(ch)) {      found++;      accumulated.write(ch);    } else     if (found == 1 && ch == 'E') {      found++;      accumulated.write(ch);    } else     if (found == 1 && PdfTokenizer.isWhitespace(ch)) {      baos.write(accumulated.toByteArray());      accumulated.reset();      accumulated.write(ch);    } else     if (found == 2 && ch == 'I') {      found++;      accumulated.write(ch);    } else     if (found == 3 && PdfTokenizer.isWhitespace(ch)) {      byte[] tmp=baos.toByteArray();      if (inlineImageStreamBytesAreComplete(tmp,imageDictionary)) {        return tmp;      }      baos.write(accumulated.toByteArray());      accumulated.reset();      baos.write(ch);      found=0;    } else {      baos.write(accumulated.toByteArray());      accumulated.reset();      baos.write(ch);      found=0;    }  }  throw new InlineImageParseException(PdfException.CannotFindImageDataOrEI);}  }
class C{  public void pause(){  setPaused(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix04.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceexistingattributegevalue.class,args);}  }
class C{  public TopologyMsg createTopologyMsgForDS(int destDsId){  List<DSInfo> dsInfos=new ArrayList<>();  for (  DataServerHandler dsHandler : connectedDSs.values()) {    if (dsHandler.getServerId() == destDsId) {      continue;    }    dsInfos.add(dsHandler.toDSInfo());  }  List<RSInfo> rsInfos=new ArrayList<>();  rsInfos.add(toRSInfo(localReplicationServer,generationId));  for (  ReplicationServerHandler rsHandler : connectedRSs.values()) {    rsInfos.add(rsHandler.toRSInfo());    rsHandler.addDSInfos(dsInfos);  }  return new TopologyMsg(dsInfos,rsInfos);}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  private Map addResourcePrefixes(Set prefixes,Map prefixMap){  Iterator iter=prefixes.iterator();  while (iter.hasNext()) {    String prefix=(String)iter.next();    int intValue=0;    String count=(String)prefixMap.get(prefix);    if (count != null) {      try {        intValue=Integer.parseInt(count);      } catch (      Exception e) {        PolicyManager.debug.error("ResourceManager.addResourcePrefixes:",e);      }    }    intValue++;    prefixMap.put(prefix,Integer.toString(intValue));  }  return prefixMap;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenomodificationallowederrEE.class,args);}  }
class C{  private PasswordPolicyResult checkADResult(String diagMessage){  if (diagMessage.contains(AD_PASSWORD_EXPIRED) || diagMessage.contains(S4_PASSWORD_EXPIRED)) {    return new PasswordPolicyResult(PasswordPolicyErrorType.PASSWORD_EXPIRED);  } else   if (diagMessage.contains(AD_ACCOUNT_DISABLED) || diagMessage.contains(S4_ACCOUNT_DISABLED)) {    return new PasswordPolicyResult(PasswordPolicyErrorType.ACCOUNT_LOCKED);  } else   if (diagMessage.contains(AD_ACCOUNT_EXPIRED) || diagMessage.contains(S4_ACCOUNT_EXPIRED)) {    return new PasswordPolicyResult(PasswordPolicyErrorType.ACCOUNT_LOCKED);  } else   if (diagMessage.contains(AD_PASSWORD_RESET) || diagMessage.contains(S4_PASSWORD_RESET)) {    return new PasswordPolicyResult(PasswordPolicyErrorType.CHANGE_AFTER_RESET);  } else   if (diagMessage.contains(AD_ACCOUNT_LOCKED) || diagMessage.contains(S4_ACCOUNT_LOCKED)) {    return new PasswordPolicyResult(PasswordPolicyErrorType.ACCOUNT_LOCKED);  } else {    return null;  }}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public TextNotificationMessageTemplateElement(String text){  this.text=text;}  }
class C{  public boolean isRelationship(){  return type == SchemaFieldType.RELATIONSHIP;}  }
class C{  public static String cleanMetaAlias(HttpServletRequest request){  FSUtils.debug.message("FSSSOAndFedHandler.cleanMetaAlias: Called");  Enumeration paramEnum=request.getParameterNames();  String returnString=new String();  while (paramEnum.hasMoreElements()) {    String paramKey=(String)paramEnum.nextElement();    if (paramKey.equalsIgnoreCase(IFSConstants.META_ALIAS)) {      FSUtils.debug.message("FSSSOAndFedHandler.cleanMetaAlias: found metaAlias");    } else {      String paramValue=request.getParameter(paramKey);      if (returnString == null || returnString.length() < 1) {        returnString=paramKey + "=" + URLEncDec.encode(paramValue);      } else {        returnString=returnString + "&" + paramKey+ "="+ URLEncDec.encode(paramValue);      }    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOAndFedHandler.cleanMetaAlias: " + " returning with " + returnString);  }  return returnString;}  }
class C{  @Override public boolean accept(File dir,String name){  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  public ConnectionWrapper(HostPort hostPort,PreferredConnection.Type connectionType,DN bindDn,String bindPwd,int connectTimeout,TrustManager trustManager,KeyManager keyManager) throws LdapException {  this.hostPort=hostPort;  this.connectionType=connectionType;  this.bindDn=bindDn;  this.bindPwd=bindPwd;  this.connectTimeout=connectTimeout;  this.trustManager=trustManager;  this.keyManager=keyManager;  final Options options=toOptions(connectionType,bindDn,bindPwd,connectTimeout,trustManager,keyManager);  connectionFactory=new LDAPConnectionFactory(hostPort.getHost(),hostPort.getPort(),options);  connection=connectionFactory.getConnection();}  }
class C{  static ObjectName createObjectName(String domain,Loader loader) throws MalformedObjectNameException {  ObjectName name=null;  Context context=loader.getContext();  ContextName cn=new ContextName(context.getName(),false);  Container host=context.getParent();  name=new ObjectName(domain + ":type=Loader,host=" + host.getName()+ ",context="+ cn.getDisplayName());  return name;}  }
class C{  public void stopServer() throws Exception {  Method method=catalinaDaemon.getClass().getMethod("stopServer",(Class[])null);  method.invoke(catalinaDaemon,(Object[])null);}  }
class C{  public ZipInputStream(InputStream in,Charset charset){  super(new PushbackInputStream(in,512),new Inflater(true),512);  usesDefaultInflater=true;  if (in == null) {    throw new NullPointerException("in is null");  }  if (charset == null)   throw new NullPointerException("charset is null");  this.zc=ZipCoder.get(charset);}  }
class C{  public AttributeSet addAttributes(AttributeSet old,AttributeSet attr){  if (!(attr instanceof HTMLDocument.TaggedAttributeSet)) {    old=removeHTMLTags(old,attr);  }  return super.addAttributes(old,convertAttributeSet(attr));}  }
class C{  private static String filterForBugID4988885(String msg){  return msg.replaceAll("<br>","&#10;<br>");}  }
class C{  public Boolean isZipEnabled(){  return zipEnable;}  }
class C{  private <M extends ConfigurationClient,N extends Configuration>ManagedObject<M> createExistingManagedObject(ManagedObjectDefinition<M,N> d,ManagedObjectPath<? super M,? super N> p,PropertySet properties){  RelationDefinition<?,?> rd=p.getRelationDefinition();  PropertyDefinition<?> pd=null;  if (rd instanceof InstantiableRelationDefinition) {    InstantiableRelationDefinition<?,?> ird=(InstantiableRelationDefinition<?,?>)rd;    pd=ird.getNamingPropertyDefinition();  }  return new LDAPManagedObject<>(this,d,p.asSubType(d),properties,true,pd);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTabbedPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiTabbedPaneUI)mui).uis,a);}  }
class C{  public void reportEvent(ValidatableObject source,Exception nestedException) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,nestedException.toString(),new ValidationEventLocatorImpl(source),nestedException));}  }
class C{  public int hashCode(){  int hash=(ignoreCase ? 1 : 0);  try {    NamingEnumeration<?> all=getAll();    while (all.hasMore()) {      hash+=all.next().hashCode();    }  } catch (  NamingException e) {  }  return hash;}  }
class C{  public void remove(int index){  removeTabAt(index);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedKeyType createEncryptedKeyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedKeyTypeImpl();}  }
class C{  public UnicodeInputStreamReader(InputStream is) throws UnsupportedEncodingException {  super(new InputStreamReader(is,"UTF-8"));}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;    this.critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Deprecated public static <A>ImmutableList<A> fill(final int len,final A init){  ImmutableList<A> l=empty();  for (int i=0; i < len; i++) {    l=new ImmutableList<>(init,l);  }  return l;}  }
class C{  public HeapImpl(final Name name){  this(null,name);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public void testNegPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void delete(AudioFile f) throws CannotReadException, CannotWriteException {  getDefaultAudioFileIO().deleteTag(f);}  }
class C{  public NotCondition(){}  }
class C{  public boolean nextBoolean() throws DataFormatException {  return nextByte() != 0;}  }
class C{  public SelectReferralTypeViewBean(){  super("SelectReferralType",DEFAULT_DISPLAY_URL);}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static void printInfo(){  System.out.println(NOTE_VERSION.get(DirectoryServer.getVersionString()));  System.out.println(NOTE_BUILD_ID.get(BUILD_ID));  System.out.println(NOTE_JAVA_VERSION.get(System.getProperty("java.version")));  System.out.println(NOTE_JAVA_VENDOR.get(System.getProperty("java.vendor")));  System.out.println(NOTE_JVM_VERSION.get(System.getProperty("java.vm.version")));  System.out.println(NOTE_JVM_VENDOR.get(System.getProperty("java.vm.vendor")));  System.out.println(NOTE_JAVA_HOME.get(System.getProperty("java.home")));  System.out.println(NOTE_JAVA_CLASSPATH.get(System.getProperty("java.class.path")));  System.out.println(NOTE_CURRENT_DIRECTORY.get(System.getProperty("user.dir")));  String installDir=toCanonicalPath(DirectoryServer.getServerRoot());  if (installDir == null) {    System.out.println(NOTE_UNKNOWN_INSTALL_DIRECTORY.get());  } else {    System.out.println(NOTE_INSTALL_DIRECTORY.get(installDir));  }  String instanceDir=toCanonicalPath(DirectoryServer.getInstanceRoot());  if (instanceDir == null) {    System.out.println(NOTE_UNKNOWN_INSTANCE_DIRECTORY.get());  } else {    System.out.println(NOTE_INSTANCE_DIRECTORY.get(instanceDir));  }  System.out.println(NOTE_OPERATING_SYSTEM.get(System.getProperty("os.name") + " " + System.getProperty("os.version")+ " "+ System.getProperty("os.arch")));  String sunOsArchDataModel=System.getProperty("sun.arch.data.model");  if (sunOsArchDataModel != null) {    if (!sunOsArchDataModel.toLowerCase().equals("unknown")) {      System.out.println(NOTE_JVM_ARCH.get(sunOsArchDataModel + "-bit"));    }  } else {    System.out.println(NOTE_JVM_ARCH.get("unknown"));  }  try {    System.out.println(NOTE_SYSTEM_NAME.get(InetAddress.getLocalHost().getCanonicalHostName()));  } catch (  Exception e) {    System.out.println(NOTE_SYSTEM_NAME.get("Unknown (" + e + ")"));  }  System.out.println(NOTE_AVAILABLE_PROCESSORS.get(Runtime.getRuntime().availableProcessors()));  System.out.println(NOTE_MAX_MEMORY.get(Runtime.getRuntime().maxMemory()));  System.out.println(NOTE_TOTAL_MEMORY.get(Runtime.getRuntime().totalMemory()));  System.out.println(NOTE_FREE_MEMORY.get(Runtime.getRuntime().freeMemory()));}  }
class C{  public ImmutableDescriptor(String[] fieldNames,Object[] fieldValues){  this(makeMap(fieldNames,fieldValues));}  }
class C{  public void removeAttribute(String name,boolean notify){  if (!isValidInternal())   throw new IllegalStateException(sm.getString("standardSession.removeAttribute.ise"));  removeAttributeInternal(name,notify);}  }
class C{  @AfterClass public void cleanUp() throws Exception {  processDelete("cn=Unprivileged Root,cn=Root DNs,cn=config","cn=Unprivileged JMX Root,cn=Root DNs,cn=config","cn=Proxy Root,cn=Root DNs,cn=config","cn=Privileged User,o=test","cn=UnPrivileged User,o=test","cn=PWReset Target,o=test","cn=test1 user,dc=unindexed,dc=jeb","cn=test2 user,dc=unindexed,dc=jeb","dc=unindexed,dc=jeb");  for (int i=0; connections != null && i < connections.length; i++) {    connections[i].finalize();    connections[i]=null;  }  TestCaseUtils.disableBackend("unindexedRoot");}  }
class C{  @Override public boolean isStretchHeight(){  return true;}  }
class C{  @Override public void displayMessage(LocalizableMessage msg){  schemaElementPanel=null;  noEntryPanel.setMessage(msg);  ((CardLayout)mainPanel.getLayout()).show(mainPanel,NOTHING_SELECTED);}  }
class C{  public ObjectHolder(Object initial){  value=initial;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestEnvelopeElement createAuthnRequestEnvelopeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeElementImpl();}  }
class C{  public JInternalFrame selectFrame(boolean forward){  JInternalFrame selectedFrame=getSelectedFrame();  JInternalFrame frameToSelect=getNextFrame(selectedFrame,forward);  if (frameToSelect == null) {    return null;  }  setComponentOrderCheckingEnabled(false);  if (forward && selectedFrame != null) {    selectedFrame.moveToBack();  }  try {    frameToSelect.setSelected(true);  } catch (  PropertyVetoException pve) {  }  setComponentOrderCheckingEnabled(true);  return frameToSelect;}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  private static boolean calc_horizontal_first_from_door(ExpandObject p_from_door,PlaPointFloat p_from_point,PlaPointFloat p_to_point){  ShapeTile door_shape=p_from_door.get_shape();  ShapeTileBox from_door_box=door_shape.bounding_box();  if (p_from_door.get_dimension().is_area()) {    return from_door_box.height() >= from_door_box.width();  }  PlaSegmentFloat door_line_segment=door_shape.diagonal_corner_segment();  PlaPointFloat left_corner;  PlaPointFloat right_corner;  if (door_line_segment.point_a.v_x < door_line_segment.point_b.v_x || door_line_segment.point_a.v_x == door_line_segment.point_b.v_x && door_line_segment.point_a.v_y <= door_line_segment.point_b.v_y) {    left_corner=door_line_segment.point_a;    right_corner=door_line_segment.point_b;  } else {    left_corner=door_line_segment.point_b;    right_corner=door_line_segment.point_a;  }  double door_dx=right_corner.v_x - left_corner.v_x;  double door_dy=right_corner.v_y - left_corner.v_y;  double abs_door_dy=Math.abs(door_dy);  double door_max_width=Math.max(door_dx,abs_door_dy);  boolean result;  double door_half_max_width=0.5 * door_max_width;  if (from_door_box.width() <= door_half_max_width) {    result=true;  } else   if (from_door_box.height() <= door_half_max_width) {    result=false;  } else {    double dx=p_to_point.v_x - p_from_point.v_x;    double dy=p_to_point.v_y - p_from_point.v_y;    if (left_corner.v_y < right_corner.v_y) {      if (Signum.of(dx) == Signum.of(dy)) {        result=Math.abs(dx) > Math.abs(dy);      } else {        result=Math.abs(dx) < Math.abs(dy);      }    } else {      if (Signum.of(dx) == Signum.of(dy)) {        result=Math.abs(dx) < Math.abs(dy);      } else {        result=Math.abs(dx) > Math.abs(dy);      }    }  }  return result;}  }
class C{  private void updatePressed(boolean p){  this.pressed=p && isEnabled();  if (shouldActLikeButton()) {    comboBox.repaint();  }}  }
class C{  private boolean performHandshake() throws Exception {{    ServerStartMsg serverStartMsg=waitForSpecificMsg(session,ServerStartMsg.class);    baseDN=serverStartMsg.getBaseDN();    serverState=serverStartMsg.getServerState();    generationId=serverStartMsg.getGenerationId();    windowSize=serverStartMsg.getWindowSize();    sslEncryption=serverStartMsg.getSSLEncryption();    String serverURL="localhost:" + port;    ReplServerStartMsg replServerStartMsg=new ReplServerStartMsg(serverId,serverURL,baseDN,windowSize,serverState,generationId,sslEncryption,groupId,degradedStatusThreshold);    session.publish(replServerStartMsg);    if (!sslEncryption) {      session.stopEncryption();    }    ReplicationMsg msg=session.receive();    if (msg instanceof StopMsg) {      return false;    }    StartSessionMsg startSessionMsg=(StartSessionMsg)msg;    assertEquals(startSessionMsg.isAssured(),isAssured);    if (isAssured) {      assertEquals(startSessionMsg.getAssuredMode(),assuredMode);      assertEquals(startSessionMsg.getSafeDataLevel(),safeDataLevel);    }    assertEquals(startSessionMsg.getStatus(),ServerStatus.NORMAL_STATUS);    Assertions.assertThat(startSessionMsg.getReferralsURLs()).isEmpty();    debugInfo("Received start session assured parameters are ok.");    RSInfo rsInfo=new RSInfo(serverId,"localhost:" + port,generationId,groupId,1);    session.publish(new TopologyMsg(new ArrayList<DSInfo>(),Arrays.asList(rsInfo)));  }  return true;}  }
class C{  public static Foo remove(long fooId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().remove(fooId);}  }
class C{  boolean hasNewReasons(ReasonsMask mask){  return ((_reasons | mask.getReasons() ^ _reasons) != 0);}  }
class C{  public void writeLog(String msgId,String userDN){  writeLog(msgId,"",userDN);}  }
class C{  public void serialize(XMPMeta xmp,OutputStream out,SerializeOptions options) throws XMPException {  try {    outputStream=new CountOutputStream(out);    this.xmp=(XMPMetaImpl)xmp;    this.options=options;    this.padding=options.getPadding();    writer=new OutputStreamWriter(outputStream,options.getEncoding());    checkOptionsConsistence();    String tailStr=serializeAsRDF();    writer.flush();    addPadding(tailStr.length());    write(tailStr);    writer.flush();    outputStream.close();  } catch (  IOException e) {    throw new XMPException("Error writing to the OutputStream",XMPError.UNKNOWN);  }}  }
class C{  public GSERParser readEndSequence() throws DecodeException {  skip(GSER_SP);  next(GSER_SEQUENCE_END);  return this;}  }
class C{  private long readUntil(long pos) throws IOException {  if (pos < length) {    return pos;  }  if (foundEOF) {    return length;  }  long len=pos - length;  cache.seek(length);  while (len > 0) {    int nbytes=stream.read(buf,0,(int)Math.min(len,(long)BUFFER_LENGTH));    if (nbytes == -1) {      foundEOF=true;      return length;    }    cache.write(buf,0,nbytes);    len-=nbytes;    length+=nbytes;  }  return pos;}  }
class C{  public boolean isVisible(){  return privateInstance.visible;}  }
class C{  public void layoutContainer(Container parent){  if (parent.getComponentCount() > 0) {    Insets insets=parent.getInsets();    int w=parent.getWidth() - (insets.left + insets.right);    int h=parent.getHeight() - (insets.top + insets.bottom);    getComponent(0).setBounds(insets.left,insets.top,w,h);  }}  }
class C{  public ImmutableList<A> appendList(final ImmutableList<A> x){  return x.prependList(this);}  }
class C{  public boolean isVisible(){  int n=getLayoutViewCount() - 1;  for (int i=0; i < n; i++) {    View v=getLayoutView(i);    if (v.isVisible()) {      return true;    }  }  if (n > 0) {    View v=getLayoutView(n);    if ((v.getEndOffset() - v.getStartOffset()) == 1) {      return false;    }  }  if (getStartOffset() == getDocument().getLength()) {    boolean editable=false;    Component c=getContainer();    if (c instanceof JTextComponent) {      editable=((JTextComponent)c).isEditable();    }    if (!editable) {      return false;    }  }  return true;}  }
class C{  public S decodeResult(final ExtendedResult result,final DecodeOptions options) throws DecodeException {  return getRequest().getResultDecoder().decodeExtendedResult(result,options);}  }
class C{  @Override public void bind(String name,Object obj) throws NamingException {  bind(new CompositeName(name),obj);}  }
class C{  public static void main(String[] args){  int returnCode=mainPasswordModify(args,true,System.out,System.err);  if (returnCode != 0) {    System.exit(filterExitCode(returnCode));  }}  }
class C{  public final int length(){  return array.length;}  }
class C{  public ConstraintViolationException(ServerManagedObject<?> managedObject,LocalizableMessage message){  this(managedObject,Collections.singleton(message));}  }
class C{  public static void sort(short[] a){  doSort(a,0,a.length - 1);}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  if (valueList != null) {    ValueExp v=val.apply(name);    boolean numeric=v instanceof NumericValueExp;    for (    ValueExp element : valueList) {      element=element.apply(name);      if (numeric) {        if (((NumericValueExp)element).doubleValue() == ((NumericValueExp)v).doubleValue()) {          return true;        }      } else {        if (((StringValueExp)element).getValue().equals(((StringValueExp)v).getValue())) {          return true;        }      }    }  }  return false;}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  public static AddRequest newAddRequest(final String... ldifLines){  final ChangeRecord record=LDIFChangeRecordReader.valueOfLDIFChangeRecord(ldifLines);  if (record instanceof AddRequest) {    return (AddRequest)record;  } else {    final LocalizableMessage message=WARN_READ_LDIF_RECORD_CHANGE_RECORD_WRONG_TYPE.get("add");    throw new LocalizedIllegalArgumentException(message);  }}  }
class C{  void postRemove(HashMapEntry<K,V> e){}  }
class C{  MutableBigInteger divide(MutableBigInteger b,MutableBigInteger quotient){  return divide(b,quotient,true);}  }
class C{  public static List<IOFileFilter> toList(IOFileFilter... filters){  if (filters == null) {    throw new IllegalArgumentException("The filters must not be null");  }  List<IOFileFilter> list=new ArrayList<IOFileFilter>(filters.length);  for (int i=0; i < filters.length; i++) {    if (filters[i] == null) {      throw new IllegalArgumentException("The filter[" + i + "] is null");    }    list.add(filters[i]);  }  return list;}  }
class C{  public TooManyHopsException(String message){  super(message);}  }
class C{  public FSResponse processSAMLRequest(FSSAMLRequest samlRequest){  FSUtils.debug.error("FSSSOAndFedHandler.processSAMLRequest: " + "Call should not resolve here, abstract class.");  return null;}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public boolean calculate_expansion_rooms(ArtEngine p_autoroute_engine){  ShapeTile search_shape=new ShapeTileBox(location);  Collection<AwtreeObject> overlaps=p_autoroute_engine.art_search_tree.find_overlap_objects(search_shape,-1,NetNosList.EMPTY);  for (int index=first_layer_no; index <= last_layer_no; ++index) {    ExpandRoomComplete found_room=null;    Iterator<AwtreeObject> iter=overlaps.iterator();    while (iter.hasNext()) {      board.awtree.AwtreeObject curr_ob=iter.next();      if (!(curr_ob instanceof ExpandRoomComplete)) {        iter.remove();        continue;      }      ExpandRoomComplete curr_room=(ExpandRoomComplete)curr_ob;      if (curr_room.get_layer() == index) {        found_room=curr_room;        iter.remove();        break;      }    }    if (found_room == null) {      ExpandRoomFreespaceIncomplete new_incomplete_room=new ExpandRoomFreespaceIncomplete(null,index,search_shape);      Collection<ExpandRoomFreespaceComplete> new_rooms=p_autoroute_engine.complete_expansion_room(new_incomplete_room);      if (new_rooms.size() != 1) {        return false;      }      Iterator<ExpandRoomFreespaceComplete> iterb=new_rooms.iterator();      if (iterb.hasNext())       found_room=iterb.next();    }    room_arr[index - first_layer_no]=found_room;  }  return true;}  }
class C{  public PlaPoint corner_last(){  return polyline.corner_last();}  }
class C{  public Templater androidSdkVersion(String androidSdkVersion){  this.androidSdkVersion=androidSdkVersion;  return this;}  }
class C{  private String stripCodeValueSentences(String string){  return string.replaceAll("This result code corresponds to the LDAP result code value of \\{@code \\d+\\}.","");}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-modify-service1-name","entity-modify-service1-attributes"}) @Test(groups={"api","service"}) public void assignUnassignService(String parentRealm,String idType,String entityName,String strServiceNames,String svcModificationAttrs) throws Exception {  Object[] params={parentRealm,idType,entityName,strServiceNames,svcModificationAttrs};  entering("assignUnassignService",params);  try {    AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);    Set<String> serviceNames=CollectionUtils.parseStringToSet(strServiceNames);    if ((serviceNames != null) && !serviceNames.isEmpty()) {      String serviceName=serviceNames.iterator().next();      amid.assignService(serviceName,Collections.EMPTY_MAP);      Map<String,Set<String>> values=CollectionUtils.parseStringToMap(svcModificationAttrs);      amid.modifyService(serviceName,values);      Map<String,Set<String>> verification=amid.getServiceAttributes(serviceName);      for (      String key : verification.keySet()) {        if (values.keySet().contains(key)) {          assert values.get(key).equals(verification.get(key));        }      }    }  } catch (  Exception e) {    log(Level.SEVERE,"setup",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("assignUnassignService");}  }
class C{  protected Popup(Component owner,Component contents,int x,int y){  this();  if (contents == null) {    throw new IllegalArgumentException("Contents must be non-null");  }  reset(owner,contents,x,y);}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  se.write(cbuf,off,len);}  }
class C{  public String registerTrail(SSOToken token,PageTrail pageTrail){  String randomStr="";  try {    String key=token.getTokenID().toString();synchronized (mapTokenIDs) {      Map map=(Map)mapTokenIDs.get(key);      if (map == null) {        map=new HashMap(10);        token.addSSOTokenListener(this);      }      randomStr=getRandomString();      map.put(randomStr,pageTrail);      mapTokenIDs.put(key,map);    }  } catch (  SSOTokenListenersUnsupportedException ex) {    debug.message("PageTrailManager.registerTrail(): could not add sso listener: {}",ex.getMessage());    randomStr="";  }catch (  SSOException ssoe) {    debug.warning("PageTrailManager.registerTrail()",ssoe);    randomStr="";  }  return randomStr;}  }
class C{  protected void processActionEvent(ActionEvent e){  ActionListener listener=actionListener;  if (listener != null) {    listener.actionPerformed(e);  }}  }
class C{  private Collection<String> flatMatchAll(String[] names,Pattern prefixPattern,int threshold,boolean strict){  @SuppressWarnings("unchecked") Comparator<String> wordComparator=(Comparator)commonSequenceMatcher.getCollator();  ThresholdCollection<String> thresholdCollection=new ThresholdCollection<String>(threshold,wordComparator);  for (  String name : names) {    name=normalize(name);    Matcher prefix=prefixPattern.matcher(name);    int prefixEnd=prefix.find() ? prefix.end() : 0;    int sxePosition=seasonEpisodeMatcher.find(name,prefixEnd);    if (sxePosition > 0) {      String hit=name.substring(0,sxePosition).trim();      List<SxE> sxe=seasonEpisodeMatcher.match(name.substring(sxePosition));      if (!strict && sxe.size() == 1 && sxe.get(0).season >= 0) {        thresholdCollection.addDirect(hit);      } else {        thresholdCollection.add(hit);      }    } else {      int datePosition=dateMatcher.find(name,prefixEnd);      if (datePosition > 0) {        thresholdCollection.addDirect(name.substring(0,datePosition).trim());      }    }  }  return thresholdCollection;}  }
class C{  public ThreadFilterTextErrorLogPublisher(Thread thread,TextWriter writer){  this.thread=thread;  this.writer=writer;}  }
class C{  public void test_getIntLjava_lang_ObjectI(){  int[] x={1};  int ret=0;  boolean thrown=false;  try {    ret=Array.getInt(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getInt(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getInt(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getInt(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  protected void fireCharEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CHARACTERS,chars,start,length);  }}  }
class C{  public static String URLDecode(String str,String enc){  return URLDecode(str,enc,false);}  }
class C{  private void fillBuffer() throws IOException {  if (!endOfInput && (lastCoderResult == null || lastCoderResult.isUnderflow())) {    encoderIn.compact();    int position=encoderIn.position();    int c=reader.read(encoderIn.array(),position,encoderIn.remaining());    if (c == -1) {      endOfInput=true;    } else {      encoderIn.position(position + c);    }    encoderIn.flip();  }  encoderOut.compact();  lastCoderResult=encoder.encode(encoderIn,encoderOut,endOfInput);  encoderOut.flip();}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RSeqParser.parse");  RSeq rseq=new RSeq();  try {    headerName(TokenTypes.RSEQ);    rseq.setHeaderName(SIPHeaderNames.RSEQ);    String number=this.lexer.number();    try {      rseq.setSeqNumber(Long.parseLong(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rseq;  }  finally {    if (debug)     dbg_leave("RSeqParser.parse");  }}  }
class C{  public void fatal(Object message,Throwable t){}  }
class C{  private boolean checkRecordFolderIsCreated(String issueID){  return isDirectoryExist(RecordConstants.RECORD_FOLDER_NAME + File.separator + issueID);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public void shutdown(boolean shutdownWrapped){  stopRequested.set(true);  while (writerThread != null && writerThread.isAlive()) {    try {      writerThread.interrupt();      writerThread.join();    } catch (    InterruptedException ex) {    }  }  while (!queue.isEmpty()) {    String message=queue.poll();    writer.writeRecord(message);  }  if (shutdownWrapped && writer != null) {    writer.shutdown();  }  DirectoryServer.deregisterShutdownListener(this);}  }
class C{  private void update(ServerState serverState){  this.serverState.update(serverState);}  }
class C{  void moveDot(NavigationFilter.FilterBypass fb,int dot,Position.Bias bias){  fb.moveDot(dot,bias);}  }
class C{  @KnownFailure("Not supported ops applied: test fails on arguments: '', '', '%', '%' ") public void test_getColumnsTableWithNoCatalogSchema() throws SQLException {  try {    ResultSet noSchemaTable=meta.getColumns("","",DatabaseCreator.TEST_TABLE1,"fkey");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support empty string as input parameter or Wildcard %",1,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet noSchemaTable=meta.getColumns("","",DatabaseCreator.TEST_TABLE1,"%");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support empty string as input parameter or Wildcard %",5,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  try {    ResultSet noSchemaTable=meta.getColumns("","","%","%");    assertNotNull(noSchemaTable);    noSchemaTable.last();    int size=noSchemaTable.getRow();    assertEquals("Does not support double Wildcard '%' as input",6,size);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void expect(char... expectedSymbols) throws ParseException {  if (!accept(expectedSymbols)) {    String excString="Expected '" + expectedSymbols[0] + "'";    for (int i=1; i < expectedSymbols.length; i++) {      excString+=" or '" + expectedSymbols[i] + "'";    }    excString+=" but found '" + (char)data[index] + "'";    throw new ParseException(excString,index);  }}  }
class C{  private static void insertValue(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){  if (paramVal != null) {    List<String> list=new ArrayList<>();    list.add(paramVal);    paramsMap.put(parameterName,list);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  private UnicodeBlock(String idName){  super(idName);  map.put(idName,this);}  }
class C{  public SignatureException(){  super();}  }
class C{  public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  public NotIdentifiableEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){  super(_severity,_message,_locator,_linkedException);}  }
class C{  private synchronized void writeObject(ObjectOutputStream oos) throws IOException, ClassNotFoundException {  serializing=true;synchronized (BeanContext.globalHierarchyLock) {    try {      oos.defaultWriteObject();      bcsPreSerializationHook(oos);      if (serializable > 0 && this.equals(getBeanContextPeer()))       writeChildren(oos);      serialize(oos,(Collection)bcmListeners);    }  finally {      serializing=false;    }  }}  }
class C{  public List<Attribute> toAttributeList() throws IllegalStateException {  return CollectionUtils.newArrayList(toAttribute());}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  protected boolean updateChildren(DocumentEvent.ElementChange ec,DocumentEvent e,ViewFactory f){  return false;}  }
class C{  public NumberEditor(JSpinner spinner){  this(spinner,getDefaultPattern(spinner.getLocale()));}  }
class C{  @Override public void flush() throws IOException {  flushBuffer();  if (out != null) {    out.flush();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  Node parentNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  parentNode=clonedNode.getParentNode();  assertNull("nodeCloneGetParentNullAssert1",parentNode);}  }
class C{  public PaddingException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public static String removeStaticAttributeFlag(String attributeName){  if (isStaticAttribute(attributeName)) {    return attributeName.substring(STATIC_QUOTE.length(),attributeName.length() - STATIC_QUOTE.length());  } else {    return attributeName;  }}  }
class C{  private JsonValue updateValueWithObject(String resourceID,JsonValue value,JsonPointer path,Object obj) throws ResourceException {  ensureJsonPointerExists(path,value);  value.put(path,obj);  return performUpdate(resourceID,value);}  }
class C{  protected void tearDown(){  ht10=null;  ht100=null;  htfull=null;  keyVector=null;  elmVector=null;}  }
class C{  public void createEntry(SSOToken token,String entryName,int objectType,String parentDN,Map attributes) throws AMEntryExistsException, AMException, SSOException {  try {    if (entryName == null || entryName.length() == 0) {      throw new AMException(token,"320");    } else     if (parentDN == null) {      throw new AMException(token,"322");    }    String tmpDN=getNamingAttribute(objectType) + "=" + entryName+ ","+ parentDN;    validateAttributeUniqueness(tmpDN,objectType,true,attributes);    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(parentDN));switch (objectType) {case AMObject.USER:      createUser(token,po,attributes,entryName);    break;case AMObject.MANAGED_ROLE:case AMObject.ROLE:  createRole(token,po,attributes,entryName);break;case AMObject.ORGANIZATION:createOrganization(token,po,attributes,entryName);break;case AMObject.STATIC_GROUP:case AMObject.GROUP:createGroup(token,po,attributes,entryName);break;case AMObject.ASSIGNABLE_DYNAMIC_GROUP:createAssignDynamicGroup(token,po,attributes,entryName);break;case AMObject.DYNAMIC_GROUP:createDynamicGroup(token,po,attributes,entryName);break;case AMObject.PEOPLE_CONTAINER:createPeopleContainer(po,attributes,entryName);break;case AMObject.ORGANIZATIONAL_UNIT:createOrganizationalUnit(token,po,attributes,entryName);break;case AMObject.GROUP_CONTAINER:createGroupContainer(po,attributes,entryName);break;case AMObject.FILTERED_ROLE:createFilteredRole(token,po,attributes,entryName);break;case AMObject.RESOURCE:createResource(po,attributes,entryName);break;case AMObject.UNDETERMINED_OBJECT_TYPE:case AMObject.UNKNOWN_OBJECT_TYPE:throw new AMException(token,"326");default :createEntity(token,po,objectType,attributes,entryName);}} catch (AccessRightsException e) {if (debug.warningEnabled()) {debug.warning("DirectoryServicesImpl.createEntry() " + "Insufficient access rights to create entry: " + entryName,e);}throw new AMException(token,"460");}catch (EntryAlreadyExistsException e) {if (debug.warningEnabled()) {debug.warning("DirectoryServicesImpl.createEntry() Entry: " + entryName + "already exists: ",e);}String msgid=getEntryExistsMsgID(objectType);String name=getEntryName(e);Object args[]={name};throw new AMException(AMSDKBundle.getString(msgid,args),msgid,args);}catch (UMSException e) {if (debug.warningEnabled()) {debug.warning("DirectoryServicesImpl.createEntry() Unable to " + "create entry: " + entryName,e);}throw new AMException(token,"324",e);}}  }
class C{  public void updateUI(){  setUI((LabelUI)UIManager.getUI(this));}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  protected boolean accept(Component aComponent){  if (!super.accept(aComponent)) {    return false;  } else   if (SunToolkit.isInstanceOf(aComponent,"javax.swing.JTable")) {    return true;  } else   if (SunToolkit.isInstanceOf(aComponent,"javax.swing.JComboBox")) {    JComboBox box=(JComboBox)aComponent;    return box.getUI().isFocusTraversable(box);  } else   if (aComponent instanceof JComponent) {    JComponent jComponent=(JComponent)aComponent;    InputMap inputMap=jComponent.getInputMap(JComponent.WHEN_FOCUSED,false);    while (inputMap != null && inputMap.size() == 0) {      inputMap=inputMap.getParent();    }    if (inputMap != null) {      return true;    }  }  return fitnessTestPolicy.accept(aComponent);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  NamedNodeMap attributes;  Attr districtAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("district");  districtAttr=testEmployee.setAttributeNode(newAttribute);  districtAttr=testEmployee.removeAttributeNode(newAttribute);  attributes=testEmployee.getAttributes();  districtAttr=(Attr)attributes.getNamedItem("district");  assertNull("elementRemoveAttributeAfterCreateAssert",districtAttr);}  }
class C{  GrizzlyLDAPConnection(final org.glassfish.grizzly.Connection<?> connection,final GrizzlyLDAPConnectionFactory factory){  this.connection=connection;  this.factory=factory;  final Duration requestTimeout=factory.getLDAPOptions().get(REQUEST_TIMEOUT);  this.requestTimeoutMS=requestTimeout.isUnlimited() ? 0 : requestTimeout.to(TimeUnit.MILLISECONDS);}  }
class C{  protected void endTag(boolean omitted){  handleText(stack.tag);  if (omitted && !stack.elem.omitEnd()) {    error("end.missing",stack.elem.getName());  } else   if (!stack.terminate()) {    error("end.unexpected",stack.elem.getName());  }  handleEndTag(stack.tag);  stack=stack.next;  recent=(stack != null) ? stack.elem : null;}  }
class C{  public static boolean isHoliday(){  DateFormat dateFormat=new SimpleDateFormat("dd-MM-yyyy");  TimeZone timeZone=TimeZone.getTimeZone("IST");  dateFormat.setTimeZone(timeZone);  String todayString=dateFormat.format(Calendar.getInstance(timeZone).getTime());  System.out.println("TradingHolidays.isHoliday(): Trading Date: [" + todayString + "]");  String tradingHolidaysArr[]=ZStreamingConfig.getTradingHolidays();  try {    Date today=dateFormat.parse(todayString);    for (    String tradingDay : tradingHolidaysArr) {      Date refDay=dateFormat.parse(tradingDay);      if (today.compareTo(refDay) == 0) {        System.out.println("TradingHolidays.isHoliday(): ITS A TRADING HOLIDAY !!!");        return true;      }    }  } catch (  ParseException e) {    System.out.println("TradingHolidays.isHoliday(): ERROR: ParseException on parsing date !!!");    e.printStackTrace();    return true;  }  return false;}  }
class C{  public void delaunayPlace(Pnt site){  Triangle triangle=locate(site);  if (triangle == null)   throw new IllegalArgumentException("No containing triangle");  if (triangle.contains(site))   return;  Set<Triangle> cavity=getCavity(site,triangle);  mostRecent=update(site,cavity);}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  public void deleteBackend(String backendName) throws ApplicationException {  try {    DN dn=DN.valueOf("ds-cfg-backend-id" + "=" + backendName + ",cn=Backends,cn=config");    Utilities.deleteConfigSubtree(DirectoryServer.getConfigurationHandler(),dn);  } catch (  OpenDsException|ConfigException ode) {    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,ode.getMessageObject(),ode);  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void addMessageDestinationRef(MessageDestinationRef mdr){  if (entries.contains(mdr.getName())) {    return;  } else {    if (!checkResourceType(mdr)) {      throw new IllegalArgumentException(sm.getString("namingResources.resourceTypeFail",mdr.getName(),mdr.getType()));    }    entries.add(mdr.getName());  }synchronized (mdrs) {    mdr.setNamingResources(this);    mdrs.put(mdr.getName(),mdr);  }  support.firePropertyChange("messageDestinationRef",null,mdr);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (-1 == m_stackFrame) {    return returnNextNode(m_firstWalker.nextNode());  } else {    VariableStack vars=m_execContext.getVarStack();    int savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);    int n=returnNextNode(m_firstWalker.nextNode());    vars.setStackFrame(savedStart);    return n;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.ResponseAbstractType createResponseAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.ResponseAbstractTypeImpl();}  }
class C{  SessionInfo fromJwt(@Nonnull String jwtString) throws JwtRuntimeException {  Reject.ifNull(jwtString,"jwtString must not be null.");  SignedJwt signedJwt;  if (jweAlgorithm != null) {    if (jwsAlgorithm != JwsAlgorithm.NONE) {      EncryptedThenSignedJwt signedEncryptedJwt=jwtBuilderFactory.reconstruct(jwtString,EncryptedThenSignedJwt.class);      if (!doesJwtAlgorithmMatch(signedEncryptedJwt) || !signedEncryptedJwt.verify(verificationHandler)) {        throw new JwtRuntimeException("Invalid JWT!");      }      signedEncryptedJwt.decrypt(decryptionKey);      signedJwt=signedEncryptedJwt;    } else {      EncryptedJwt encryptedJwt=jwtBuilderFactory.reconstruct(jwtString,EncryptedJwt.class);      encryptedJwt.decrypt(decryptionKey);      return fromJson(encryptedJwt.getClaimsSet());    }  } else {    signedJwt=jwtBuilderFactory.reconstruct(jwtString,SignedJwt.class);    if (!doesJwtAlgorithmMatch(signedJwt) || !signedJwt.verify(verificationHandler)) {      throw new JwtRuntimeException("Invalid JWT!");    }  }  JwtClaimsSet claimsSet=signedJwt.getClaimsSet();  return fromJson(claimsSet);}  }
class C{  public ID3v22Frame(ByteBuffer byteBuffer,String loggingFilename) throws InvalidFrameException, InvalidDataTypeException {  setLoggingFilename(loggingFilename);  read(byteBuffer);}  }
class C{  private PlaDelTriTriangle position_locate_recu(PlaDelTriCorner p_corner,PlaDelTriTriangle p_triangle){  if (!p_triangle.contains(p_corner))   return null;  if (p_triangle.is_leaf())   return p_triangle;  for (  PlaDelTriTriangle curr_child : p_triangle.children) {    PlaDelTriTriangle result=position_locate_recu(p_corner,curr_child);    if (result != null)     return result;  }  System.out.println("TriangleGraph.position_locate_reku: containing triangle not found");  return null;}  }
class C{  public static SSOToken datastoreLogin(String username,String password,String realm) throws Exception {  AuthContext lc=new AuthContext(realm);  AuthContext.IndexType indexType=AuthContext.IndexType.MODULE_INSTANCE;  lc.login(indexType,"DataStore");  Callback[] callbacks=null;  while (lc.hasMoreRequirements()) {    callbacks=lc.getRequirements();    if (callbacks != null) {      addLoginCallbackMessage(callbacks,username,password);      lc.submitRequirements(callbacks);    }  }  return (lc.getStatus() == AuthContext.Status.SUCCESS) ? lc.getSSOToken() : null;}  }
class C{  public ServiceTypeAttribute(int type){  super(OctetUtils.toOctets(AttributeType.SERVICE_TYPE,type));  this.type=type;}  }
class C{  public MakeLDIFException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  public ReflectiveOperationException(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(9,"Ann ");  childData=child.getData();  assertEquals("characterdataInsertDataMiddleAssert","Margaret Ann Martin",childData);}  }
class C{  private void postTest() throws Exception {  debugInfo("Post test cleaning.");  stop(broker2,broker3,broker4);  broker2=broker3=broker4=null;  remove(replServer1,replServer2,replServer3);  replServer1=replServer2=replServer3=null;  super.cleanRealEntries();  Arrays.fill(replServerPort,0);  TestCaseUtils.initializeTestBackend(false);}  }
class C{  private void update(RSInfo rsInfo,Set<Integer> connectedDSs){  this.rsInfo=new RSInfo(this.rsInfo.getId(),this.rsInfo.getServerUrl(),rsInfo.getGenerationId(),rsInfo.getGroupId(),rsInfo.getWeight());  this.connectedDSs=connectedDSs;  this.connectedDSNumber=connectedDSs.size();}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public PrinterMessageFromOperator(String message,Locale locale){  super(message,locale);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public void testPosZero(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0,-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_Last(field2,orderByComparator);}  }
class C{  public boolean hasTag(){  return hasParameter(ParameterNames.TAG);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec11(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,new RSAOtherPrimeInfo[0]);    fail("Expected IAE not thrown");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public List<Foo> findAll(){  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public boolean isRepair(){  return repair;}  }
class C{  public final void info(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,null);  }}  }
class C{  public TIFFField(int tag,int type,int count,Object data){  this.tag=tag;  this.type=type;  this.count=count;  this.data=data;}  }
class C{  public String toString(){  return super.toString() + "; Link Remaining Name: '" + this.linkRemainingName+ "'";}  }
class C{  public InvalidKeySpecException(){  super();}  }
class C{  public static boolean isThreadCpuTimeEnabled(){  return threadMXBean.isThreadCpuTimeEnabled();}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public void print(String s){  writer.print(s);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID);}  }
class C{  public void testWrite2() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestOutputStream tos=new TestOutputStream();  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());  cos.write(data);  cos.flush();  byte[] result=tos.toByteArray();  if (!Arrays.equals(result,data)) {    fail("CipherOutputStream wrote incorrect data.");  }  try {    cos.write(null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public TabSeparatedTablePrinter(OutputStream stream){  this(new BufferedWriter(new OutputStreamWriter(stream)));}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener,FunctionTable aTable) throws javax.xml.transform.TransformerException {  m_funcTable=aTable;  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  final void treeifyBin(Node<K,V>[] tab,int hash){  int n, index;  Node<K,V> e;  if (tab == null || (n=tab.length) < MIN_TREEIFY_CAPACITY)   resize(); else   if ((e=tab[index=(n - 1) & hash]) != null) {    TreeNode<K,V> hd=null, tl=null;    do {      TreeNode<K,V> p=replacementTreeNode(e,null);      if (tl == null)       hd=p; else {        p.prev=tl;        tl.next=p;      }      tl=p;    } while ((e=e.next) != null);    if ((tab[index]=hd) != null)     hd.treeify(tab);  }}  }
class C{  public Binding(String name,Object obj){  super(name,null);  this.boundObj=obj;}  }
class C{  public static void send(URL url,NotificationSet set) throws SendNotificationException {  NotificationSender sender=new NotificationSender(url,set);  sender.run();}  }
class C{  public static String encode(String clearText,AMEncryption encr){  if (checkCaller()) {    if (!isAccessPermitted())     return null;  }  if (clearText == null || clearText.length() == 0) {    return null;  }  byte[] encData=null;  try {    encData=encr.encrypt(clearText.getBytes("utf-8"));  } catch (  UnsupportedEncodingException uee) {    Debug debug=Debug.getInstance("amSDK");    debug.error("Crypt:: utf-8 encoding is not supported");    encData=encryptor.encrypt(clearText.getBytes());  }  String str=null;  str=Base64.encode(encData).trim();  BufferedReader bufReader=new BufferedReader(new StringReader(str));  StringBuffer strClean=new StringBuffer(str.length());  String strTemp=null;  try {    while ((strTemp=bufReader.readLine()) != null) {      strClean.append(strTemp);    }  } catch (  IOException ioe) {    Debug debug=Debug.getInstance("amSDK");    debug.error("Crypt:: Error while base64 encoding",ioe);  }  return (strClean.toString());}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("Attr Name=").append(name);  buf.append("\n\tType=").append(type);  buf.append("\n\tUIType=").append(uitype);  buf.append("\n\tSyntax=").append(syntax);  buf.append("\n\tI18n Key=").append(key);  buf.append("\n\tDefault values=").append(defaultValues);  buf.append("\n\tChoice Values=").append(choiceValues);  buf.append("\n\tRangeStart=").append(rangeStart);  buf.append("\n\tRangeEnd=").append(rangeEnd);  buf.append("\n\tMinValue=").append(minValue);  buf.append("\n\tMaxValue=").append(maxValue);  buf.append("\n\tCoS Qualifier=").append(cosQualifier);  buf.append("\n\tAny=").append(any);  buf.append("\n\tView Bean URL=").append(attributeViewBeanURL);  buf.append("\n\tisOptional=").append(isOptional);  buf.append("\n\tisServiceIdentifier=").append(isServiceIdentifier);  buf.append("\n\tisResourceNameAllowed=").append(isResourceNameAllowed);  buf.append("\n\tisStatusAttribute=").append(isStatusAttribute);  buf.append("\n\tisSearchable=").append(isSearchable);  buf.append("\n\tresourceName=").append(resourceName);  buf.append("\n");  return buf.toString();}  }
class C{  public void writeAccountFedInfo(String userID,FSAccountFedInfoKey fedInfoKey,FSAccountFedInfo fedInfo,FSAccountFedInfoKey oldFedInfoKey) throws FSAccountMgmtException {  writeAccountFedInfo(userID,fedInfoKey,fedInfo);}  }
class C{  public Blob readBlob() throws SQLException {  return (Blob)getNextAttribute();}  }
class C{  private void unwrapRequest(State state){  if (state.wrapRequest == null)   return;  if (state.outerRequest.isAsyncStarted()) {    if (!state.outerRequest.getAsyncContext().hasOriginalRequestAndResponse()) {      return;    }  }  ServletRequest previous=null;  ServletRequest current=state.outerRequest;  while (current != null) {    if ((current instanceof Request) || (current instanceof RequestFacade))     break;    if (current == state.wrapRequest) {      ServletRequest next=((ServletRequestWrapper)current).getRequest();      if (previous == null)       state.outerRequest=next; else       ((ServletRequestWrapper)previous).setRequest(next);      break;    }    previous=current;    current=((ServletRequestWrapper)current).getRequest();  }}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public final void testReadbyteArrayintint04() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      dis.read(bArray,0,bArray.length);      assertEquals("retval1",-1,dis.read(bArray,0,1));      assertEquals("retval2",-1,dis.read(bArray,0,bArray.length));      assertEquals("retval3",-1,dis.read(bArray,0,1));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public boolean containsValue(byte[] val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSData.class)) {      NSData dat=(NSData)o;      if (Arrays.equals(dat.bytes(),val))       return true;    }  }  return false;}  }
class C{  public void testCFII_ServerClosed_NonBlock() throws Exception {  ensureServerOpen();  this.channel1.configureBlocking(false);  statusNotConnected_NotPending();  boolean connected=channel1.connect(localAddr1);  if (!connected) {    statusNotConnected_Pending();  }  ensureServerClosed();  tryFinish();  this.channel1.close();  statusChannelClosed();}  }
class C{  public IDFFMetaException(String errorCode,Object[] args){  super(IDFFMetaUtils.IDFF_BUNDLE_NAME,errorCode,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatagetlengthanddata.class,args);}  }
class C{  DOMStringListImpl(){  fStrings=new Vector();}  }
class C{  public void addListener(ServiceListener listener){  serviceConfigManager.addListener(listener);}  }
class C{  public <V>V put(final String uri,final Object params,final Type type) throws IOException {  HttpURLConnection request=createPut(uri);  return sendJson(request,params,type);}  }
class C{  public String toXML(){  StringBuilder answer=new StringBuilder(100);  answer.append("\n").append("<Rule");  if (ruleName != null) {    answer.append(" name=\"");    answer.append(XMLUtils.escapeSpecialCharacters(ruleName));    answer.append("\">");  } else {    answer.append(">");  }  answer.append("\n").append("<ServiceName name=\"");  answer.append(XMLUtils.escapeSpecialCharacters(serviceTypeName));  answer.append("\" />");  if (applicationName != null) {    answer.append("\n").append("<").append(PolicyManager.POLICY_RULE_APPLICATION_NAME_NODE).append(" name=\"").append(XMLUtils.escapeSpecialCharacters(applicationName)).append("\" />");  }  if (resourceNames != null) {    for (    String resourceName : resourceNames) {      answer.append("\n").append("<ResourceName name=\"");      answer.append(XMLUtils.escapeSpecialCharacters(resourceName));      answer.append("\" />");    }  }  Set actionNames=new HashSet();  actionNames.addAll(actions.keySet());  Iterator actionNamesIter=actionNames.iterator();  while (actionNamesIter.hasNext()) {    String actionName=(String)actionNamesIter.next();    answer.append("\n").append("<AttributeValuePair>");    answer.append("\n").append("<Attribute name=\"");    answer.append(XMLUtils.escapeSpecialCharacters(actionName));    answer.append("\" />");    Set values=(Set)actions.get(actionName);    if (values.size() > 0) {      Iterator items=values.iterator();      while (items.hasNext()) {        answer.append("\n").append("<Value>");        answer.append(XMLUtils.escapeSpecialCharacters((String)items.next()));        answer.append("</Value>");      }    }    answer.append("\n").append("</AttributeValuePair>");  }  answer.append("\n").append("</Rule>");  return (answer.toString());}  }
class C{  public PAOSException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  @Override public boolean shouldShowRequestPermissionRationale(@NonNull final String permission){  return super.shouldShowRequestPermissionRationale(permission);}  }
class C{  public void testRemoveNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr newAttr;  Node removedNode;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItemNS("http://www.usa.com","domestic");  assertNotNull("retval",removedNode);  newAttr=(Attr)attributes.getNamedItem("dmstc:domestic");  assertNull("nodeRemoved",newAttr);}  }
class C{  public boolean validate(String value,String rule){  return (value.equalsIgnoreCase(rule));}  }
class C{  public void wakeup(){  if (this.waiter == null) {    throw new IllegalStateException("Nobody waiting on this object.");  }  this.cond.signalAll();}  }
class C{  public void testConstrDoubleNegInfinity(){  double a=Double.NEGATIVE_INFINITY;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static boolean containsAny(final String value,final String[] needles){  return containsAny(value,needles,false);}  }
class C{  @Override public MinguoDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  void processMonitorMsg(MonitorMsg msg,ServerHandler sender){  domainMonitor.receiveMonitorDataResponse(msg,sender.getServerId());}  }
class C{  static public boolean unconnnected_routing_items(String p_s,RoutingBoard p_board){  Iterator<BrdItem> it=p_board.get_items().iterator();  while (it.hasNext()) {    BrdItem curr_item=it.next();    if (curr_item.is_route()) {      Collection<BrdItem> contact_list=curr_item.get_normal_contacts();      if (contact_list.size() == 0) {        System.out.print(p_s);        System.out.print(": uncontacted routing item found ");        return true;      }    }  }  return false;}  }
class C{  public ConnectionEntryReader search(SearchRequest request){  addControls(request);  return conn.getConnection().search(request);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public MetadataDescriptor(final ContainerType type,final String propName,final int propType){  this(type,propName,propType,0,0);}  }
class C{  public void finishedPaintingChildren(JSplitPane sp,Graphics g){  if (sp == splitPane && getLastDragLocation() != -1 && !isContinuousLayout() && !draggingHW) {    Dimension size=splitPane.getSize();    g.setColor(dividerDraggingColor);    if (orientation == JSplitPane.HORIZONTAL_SPLIT) {      g.fillRect(getLastDragLocation(),0,dividerSize - 1,size.height - 1);    } else {      g.fillRect(0,lastDragLocation,size.width - 1,dividerSize - 1);    }  }}  }
class C{  @Override public void init(ServletConfig config) throws ServletException {  super.init(config);  try {    msgFactory=MessageFactory.newInstance();  } catch (  SOAPException ex) {    Utils.debug.error("SOAPReceiver.init: create message " + "factory failed.");    throw new ServletException(ex.getMessage());  }}  }
class C{  public DSMLModifyOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public static void explainFallback(Activity activity,String message){  Toast.makeText(activity,message,Toast.LENGTH_LONG).show();}  }
class C{  private static int topType(Object a,Object b){  if (a instanceof Double || b instanceof Double)   return 4;  if (a instanceof Long || b instanceof Long) {    if (a instanceof Float || b instanceof Float)     return 4;    return 3;  }  if (a instanceof Float || b instanceof Float)   return 2;  return 1;}  }
class C{  public void log(Level level,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setParameters(params);  doLog(lr);}  }
class C{  public int next(){  int node=_currentNode;  int current=makeNodeIdentity(node);  while (true) {    current++;    int type=_type2(current);    if (NULL == type) {      _currentNode=NULL;      return returnNode(node);    }    if (ATTRIBUTE_NODE == type || NAMESPACE_NODE == type)     continue;    _currentNode=makeNodeHandle(current);    return returnNode(node);  }}  }
class C{  @Override public FileVisitResult visitFileFailed(T file,IOException exc) throws IOException {  Objects.requireNonNull(file);  throw exc;}  }
class C{  @Override public void onPropertyChanged(Observable sender,int propertyId){  Conversation conversation=(Conversation)sender;switch (propertyId) {case Conversation.SUBJECT_PROPERTY_ID:    setSubject(conversation.getSubject());  break;case Conversation.STATE_PROPERTY_ID:setState(conversation.getState().toString());break;default :}}  }
class C{  public boolean isIdentity(){  return true;}  }
class C{  public JobService failedCount(String type,Handler<AsyncResult<Long>> handler){  delegate.failedCount(type,handler);  return this;}  }
class C{  public final int intValue(){  return this.value;}  }
class C{  public RoutableMsg(){}  }
class C{  final TreeNode<K,V> putTreeVal(HashMap<K,V> map,Node<K,V>[] tab,int h,K k,V v){  Class<?> kc=null;  boolean searched=false;  TreeNode<K,V> root=(parent != null) ? root() : this;  for (TreeNode<K,V> p=root; ; ) {    int dir, ph;    K pk;    if ((ph=p.hash) > h)     dir=-1; else     if (ph < h)     dir=1; else     if ((pk=p.key) == k || (k != null && k.equals(pk)))     return p; else     if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0) {      if (!searched) {        TreeNode<K,V> q, ch;        searched=true;        if (((ch=p.left) != null && (q=ch.find(h,k,kc)) != null) || ((ch=p.right) != null && (q=ch.find(h,k,kc)) != null))         return q;      }      dir=tieBreakOrder(k,pk);    }    TreeNode<K,V> xp=p;    if ((p=(dir <= 0) ? p.left : p.right) == null) {      Node<K,V> xpn=xp.next;      TreeNode<K,V> x=map.newTreeNode(h,k,v,xpn);      if (dir <= 0)       xp.left=x; else       xp.right=x;      xp.next=x;      x.parent=x.prev=xp;      if (xpn != null)       ((TreeNode<K,V>)xpn).prev=x;      moveRootToFront(tab,balanceInsertion(root,x));      return null;    }  }}  }
class C{  public static Charset forName(String charsetName,Charset defaultCharset){  try {    return Charset.forName(charsetName);  } catch (  Exception ex) {    try {      Matcher matcher=CODE_PAGE_REGEX.matcher(charsetName);      if (matcher.find()) {        int codePage=NumberUtils.toInteger(matcher.group(2));        return codePage > 0 ? Charset.forName("CP" + codePage) : defaultCharset;      } else {        log.debug("Charset not found for " + charsetName,ex);      }    } catch (    Exception e) {      log.debug("Charset not found for " + charsetName,e);    }  }  return defaultCharset;}  }
class C{  public void removeFocusListener(FocusListener l){}  }
class C{  public Object newInstance(Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix05.class,args);}  }
class C{  public boolean update(CSN csn){  if (csn == null) {    return false;  }  saved=false;  final int serverId=csn.getServerId();  while (true) {    final CSN existingCSN=serverIdToCSN.get(serverId);    if (existingCSN == null) {      if (serverIdToCSN.putIfAbsent(serverId,csn) == null) {        return true;      }      continue;    } else     if (csn.isNewerThan(existingCSN)) {      if (serverIdToCSN.replace(serverId,existingCSN,csn)) {        return true;      }      continue;    }    return false;  }}  }
class C{  private final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey); else   msgKey="";  if (msg == null) {    throwex=true;    try {      msg=java.text.MessageFormat.format(MsgKey.BAD_MSGKEY,new Object[]{msgKey,m_resourceBundleName});    } catch (    Exception e) {      msg="The message key '" + msgKey + "' is not in the message class '"+ m_resourceBundleName+ "'";    }  } else   if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      throwex=true;      try {        fmsg=java.text.MessageFormat.format(MsgKey.BAD_MSGFORMAT,new Object[]{msgKey,m_resourceBundleName});        fmsg+=" " + msg;      } catch (      Exception formatfailed) {        fmsg="The format of message '" + msgKey + "' in message class '"+ m_resourceBundleName+ "' failed.";      }    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public boolean isLocalAddress(){  return LOCALHOST.equals(this.normalizedHost);}  }
class C{  public @Nonnull Map<String,String> loadScripts(@Nonnull CpsFlowExecution execution){  return Collections.emptyMap();}  }
class C{  public StateSelectedItem info_display(){  WindowObjectInfo.display(items_list,i_brd.get_panel().board_frame,i_brd.coordinate_transform,new Point(100,100));  return this;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(NAME_ID_ELEMENT).append(NS);  String nameQualifier=getNameQualifier();  if ((nameQualifier != null) && (nameQualifier.trim().length() != 0)) {    sb.append(" ").append(NAME_QUALIFIER_ATTR).append("=\"").append(nameQualifier).append("\"");  }  String spNameQualifier=getSPNameQualifier();  if ((spNameQualifier != null) && (spNameQualifier.trim().length() != 0)) {    sb.append(" ").append(SP_NAME_QUALIFIER_ATTR).append("=\"").append(spNameQualifier).append("\"");  }  String format=getFormat();  if ((format != null) && (format.trim().length() != 0)) {    sb.append(" ").append(FORMAT_ATTR).append("=\"").append(format).append("\"");  }  String spProvidedID=getSPProvidedID();  if ((spProvidedID != null) && (spProvidedID.trim().length() != 0)) {    sb.append(" ").append(SP_PROVIDED_ID_ATTR).append("=\"").append(spProvidedID).append("\"");  }  sb.append(">");  String value=getValue();  if ((value != null) && (value.trim().length() != 0)) {    sb.append(XMLUtils.escapeSpecialCharacters(value));  } else {    SAML2SDKUtils.debug.error("NameIDImpl.processElement(): name identifier is missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_name_identifier"));  }  sb.append("</").append(appendNS).append(NAME_ID_ELEMENT).append(">");  return sb.toString();}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  checkPositionIndex(index);  Object[] a=c.toArray();  int numNew=a.length;  if (numNew == 0)   return false;  Node<E> pred, succ;  if (index == size) {    succ=null;    pred=last;  } else {    succ=node(index);    pred=succ.prev;  }  for (  Object o : a) {    @SuppressWarnings("unchecked") E e=(E)o;    Node<E> newNode=new Node<>(pred,e,null);    if (pred == null)     first=newNode; else     pred.next=newNode;    pred=newNode;  }  if (succ == null) {    last=pred;  } else {    pred.next=succ;    succ.prev=pred;  }  size+=numNew;  modCount++;  return true;}  }
class C{  public void scrollRectToVisible(Rectangle contentRect){  Component view=getView();  if (view == null) {    return;  } else {    if (!view.isValid()) {      validateView();    }    int dx, dy;    dx=positionAdjustment(getWidth(),contentRect.width,contentRect.x);    dy=positionAdjustment(getHeight(),contentRect.height,contentRect.y);    if (dx != 0 || dy != 0) {      Point viewPosition=getViewPosition();      Dimension viewSize=view.getSize();      int startX=viewPosition.x;      int startY=viewPosition.y;      Dimension extent=getExtentSize();      viewPosition.x-=dx;      viewPosition.y-=dy;      if (view.isValid()) {        if (getParent().getComponentOrientation().isLeftToRight()) {          if (viewPosition.x + extent.width > viewSize.width) {            viewPosition.x=Math.max(0,viewSize.width - extent.width);          } else           if (viewPosition.x < 0) {            viewPosition.x=0;          }        } else {          if (extent.width > viewSize.width) {            viewPosition.x=viewSize.width - extent.width;          } else {            viewPosition.x=Math.max(0,Math.min(viewSize.width - extent.width,viewPosition.x));          }        }        if (viewPosition.y + extent.height > viewSize.height) {          viewPosition.y=Math.max(0,viewSize.height - extent.height);        } else         if (viewPosition.y < 0) {          viewPosition.y=0;        }      }      if (viewPosition.x != startX || viewPosition.y != startY) {        setViewPosition(viewPosition);        scrollUnderway=false;      }    }  }}  }
class C{  public PasswordPolicyStateExtendedRequest(){}  }
class C{  public static ConstraintResult newSuccess(){  return new ConstraintSuccessImpl();}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber,warnings);}  }
class C{  void updateVisibilityModel(){  Component c=getContainer();  if (c instanceof JTextField) {    JTextField field=(JTextField)c;    BoundedRangeModel vis=field.getHorizontalVisibility();    int hspan=(int)getPreferredSpan(X_AXIS);    int extent=vis.getExtent();    int maximum=Math.max(hspan,extent);    extent=(extent == 0) ? maximum : extent;    int value=maximum - extent;    int oldValue=vis.getValue();    if ((oldValue + extent) > maximum) {      oldValue=maximum - extent;    }    value=Math.max(0,Math.min(value,oldValue));    vis.setRangeProperties(value,extent,0,maximum,false);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  EntitlementSubjectImpl object=(EntitlementSubjectImpl)obj;  if (uuid == null) {    if (object.getID() != null) {      return false;    }  } else {    if (!uuid.equals(object.getID())) {      return false;    }  }  if (pSubjectName == null) {    if (object.getPSubjectName() != null) {      return false;    }  } else {    if (!pSubjectName.equals(object.getPSubjectName())) {      return false;    }  }  return (exclusive == object.exclusive);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  private static boolean isTainted(Object o){  try {    checkTypeSafe(o);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public static void copy(String input,OutputStream output) throws IOException {  StringReader in=new StringReader(input);  OutputStreamWriter out=new OutputStreamWriter(output);  copy(in,out);  out.flush();}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  public Canvas(){}  }
class C{  public static void saveAsXML(NSObject root,OutputStream out) throws IOException {  OutputStreamWriter w=new OutputStreamWriter(out,"UTF-8");  w.write(root.toXMLPropertyList());  w.close();}  }
class C{  private boolean processInteractionConsentResponse(boolean isQuery,Message msg,String resource){  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler.processInteraction" + "Response:Init");  }  if (msg == null || resource == null) {    IDPPUtils.debug.error("PPRequestHandler:processInteraction" + "Response:null input params");    return false;  }  resource=IDPPUtils.getExpressionContext(resource);  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PPRequestHandler:processInteraction" + "PP Element that was trying to access:" + resource);  }  try {    InteractionResponseElement ire=InteractionManager.getInstance().getInteractionResponseElement(msg);    if (ire == null) {      return false;    }    Map responses=InteractionUtils.getParameters(ire);    if (responses == null || responses.isEmpty()) {      return false;    }    String value=(String)responses.get(resource);    if (value == null || value.equals("false")) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("PPRequestHandler.process" + "Interaction: response is deny");      }      return false;    } else {      return true;    }  } catch (  Exception e) {    IDPPUtils.debug.error("PPRequestHandler.processInteraction" + "Response: Exception occured.",e);    return false;  }}  }
class C{  public static void marshal(Object jaxbObject,String xml){  _marshal(jaxbObject,xml);}  }
class C{  public FrameBodyTCOM(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private void turnOffWifi(){  WifiManager wifiManager=(WifiManager)getSystemService(Context.WIFI_SERVICE);  wifiManager.setWifiEnabled(false);  ResultProcessor.process(this,intent,ResultProcessor.RESULT_SUCCESS,getString(R.string.wifi_turned_off));}  }
class C{  private final boolean checkProximityPosition(XPathContext xctxt,int predPos,DTM dtm,int context,int pos){  try {    DTMAxisTraverser traverser=dtm.getAxisTraverser(Axis.PRECEDINGSIBLING);    for (int child=traverser.first(context); DTM.NULL != child; child=traverser.next(context,child)) {      try {        xctxt.pushCurrentNode(child);        if (NodeTest.SCORE_NONE != super.execute(xctxt,child)) {          boolean pass=true;          try {            xctxt.pushSubContextList(this);            for (int i=0; i < predPos; i++) {              xctxt.pushPredicatePos(i);              try {                XObject pred=m_predicates[i].execute(xctxt);                try {                  if (XObject.CLASS_NUMBER == pred.getType()) {                    throw new Error("Why: Should never have been called");                  } else                   if (!pred.boolWithSideEffects()) {                    pass=false;                    break;                  }                }  finally {                  pred.detach();                }              }  finally {                xctxt.popPredicatePos();              }            }          }  finally {            xctxt.popSubContextList();          }          if (pass)           pos--;          if (pos < 1)           return false;        }      }  finally {        xctxt.popCurrentNode();      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new java.lang.RuntimeException(se.getMessage());  }  return (pos == 1);}  }
class C{  public void initializeDigestAlgorithm(DigestAlgorithm digestAlgorithm) throws NoSuchAlgorithmException {  if (initialized) {    LOGGER.warn("The TLS message digest algorithm has already been set");    return;  }  if (digestAlgorithm == DigestAlgorithm.LEGACY) {    this.hash1=MessageDigest.getInstance("MD5");    this.hash2=MessageDigest.getInstance("SHA-1");  } else {    this.hash1=MessageDigest.getInstance(digestAlgorithm.getJavaName());  }  initialized=true;  updateDigest(rawBytes);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenKeyTransferKeyInfoElement createTokenKeyTransferKeyInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenKeyTransferKeyInfoElementImpl();}  }
class C{  public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {  handler.error(XSLTErrorResources.ER_CHARS_NOT_ALLOWED,null,null);}  }
class C{  public static boolean isLocationGranted(Activity activity){  int permissionCheck=ContextCompat.checkSelfPermission(activity,permission);  return (permissionCheck == PackageManager.PERMISSION_GRANTED);}  }
class C{  public int next(){  final int result=_currentNode;  int nodeType=_nodeType;  _currentNode=END;  if (nodeType >= DTM.NTYPES) {    if (getExpandedTypeID(result) == nodeType) {      return returnNode(result);    }  } else {    if (getNodeType(result) == nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){}  }
class C{  public DataStoreTest(){  super("CLI");}  }
class C{  public boolean isConfiguredInstance(){  return getStateAccess().getInstanceData().isConfiguredInstance();}  }
class C{  public NumberOfInterveningJobs(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  public static String quote(long l){  return quote(Long.toString(l));}  }
class C{  public PrincipalTokenRestriction(String dn){  this.dn=Misc.canonicalize(dn);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ExtensionTypeImpl();}  }
class C{  public synchronized Callback[] submitCallbackInfo(){  if (debug.messageEnabled()) {    debug.message("submitRequiredInfo. ThreadName is.. :" + Thread.currentThread().getName());  }  if (loginStatus.getStatus() != LoginStatus.AUTH_IN_PROGRESS || isFailed) {    debug.message("submitReq no more requirements returning null");    return null;  }  Thread thread=Thread.currentThread();  long lastCallbackSent=authContext.getLoginState().getLastCallbackSent();  long pageTimeOut=authContext.getLoginState().getPageTimeOut();  if (debug.messageEnabled()) {    debug.message("submitRequiredInfo. ThreadName is.. :" + thread);    debug.message("lastCallbackSent : " + lastCallbackSent);    debug.message("pageTimeOut : " + pageTimeOut);  }  authThread.setHash(thread,pageTimeOut,lastCallbackSent);  while (authContext.getLoginState().getSubmittedInfo() == null && loginStatus.getStatus() == LoginStatus.AUTH_IN_PROGRESS) {    try {      if (debug.messageEnabled()) {        debug.message(Thread.currentThread() + " Waiting...." + loginStatus.getStatus());      }      if (loginStatus.getStatus() != LoginStatus.AUTH_IN_PROGRESS) {        return null;      }      if ((authContext.getLoginState().getSubmittedInfo() == null)) {        wait();      }    } catch (    InterruptedException e) {      debug.message("submitRequired info INTERRUPTED");      break;    }  }  debug.message("Threadwaking up go submit info...");  authThread.removeFromHash(thread,"timeoutHash");  Callback[] setSubmittedInfo=authContext.getLoginState().getSubmittedInfo();  debug.message("Returning submitted info: ");  return setSubmittedInfo;}  }
class C{  public static String[] between(final String value,final String start,final String end){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(start,NULL_STRING_PREDICATE,null);  validate(end,NULL_STRING_PREDICATE,null);  String[] parts=value.split(end);  return Arrays.stream(parts).map(null).toArray(null);}  }
class C{  void pushImportSource(Source sourceFromURIResolver){  m_importSourceStack.push(sourceFromURIResolver);}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  protected void fireTreeNodesChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesChanged(e);    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AssertionTypeImpl();}  }
class C{  public void removeEnvironment(String envName){  NamingResourcesImpl nresources=(NamingResourcesImpl)this.resource;  if (nresources == null) {    return;  }  ContextEnvironment env=nresources.findEnvironment(envName);  if (env == null) {    throw new IllegalArgumentException("Invalid environment name '" + envName + "'");  }  nresources.removeEnvironment(envName);}  }
class C{  public boolean equal_at_start(int line_idx,PlaPointInt p_point){  if (p_point == null)   return false;  PlaPoint corner=corner(line_idx - 1);  return corner.equals(p_point);}  }
class C{  public synchronized void enableType(String prefix) throws IllegalArgumentException {  if (prefix == null) {    throw new IllegalArgumentException("The prefix cannot be null.");  }  if (!enabledTypes.contains(prefix)) {    enabledTypes.add(prefix);  }}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public RadiusConn(Set<RADIUSServer> primaries,String secret,byte[] seed,int healthCheckInterval) throws SocketException {  this(primaries,primaries,secret,DEFAULT_TIMEOUT,seed,healthCheckInterval);}  }
class C{  public static String join(String[] values,String separator){  return values != null ? StringUtil.join(separator,(Object[])values) : null;}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarContentBorder(context,g,x,y,w,h);}  }
class C{  public void testValueOfDoublePos1(){  double a=65678765876567576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="65678765876567576";  int resScale=0;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  static void computeBestServerForWeight(RSEvaluations evals,int currentRsServerId,int localServerId){  final Map<Integer,ReplicationServerInfo> bestServers=evals.bestRSs;  int sumOfWeights=0;  int sumOfConnectedDSs=0;  for (  ReplicationServerInfo rsInfo : bestServers.values()) {    sumOfWeights+=rsInfo.getWeight();    sumOfConnectedDSs+=rsInfo.getConnectedDSNumber();  }  Map<Integer,BigDecimal> loadDistances=new HashMap<>();  final MathContext mathContext=new MathContext(32,RoundingMode.HALF_UP);  for (  Entry<Integer,ReplicationServerInfo> entry : bestServers.entrySet()) {    final Integer rsId=entry.getKey();    final ReplicationServerInfo rsInfo=entry.getValue();    BigDecimal loadGoalBd=BigDecimal.valueOf(rsInfo.getWeight()).divide(BigDecimal.valueOf(sumOfWeights),mathContext);    BigDecimal currentLoadBd=BigDecimal.ZERO;    if (sumOfConnectedDSs != 0) {      int connectedDSs=rsInfo.getConnectedDSNumber();      currentLoadBd=BigDecimal.valueOf(connectedDSs).divide(BigDecimal.valueOf(sumOfConnectedDSs),mathContext);    }    BigDecimal loadDistanceBd=loadGoalBd.subtract(currentLoadBd,mathContext);    loadDistances.put(rsId,loadDistanceBd);  }  if (currentRsServerId == -1) {    computeBestServerWhenNotConnected(evals,loadDistances,localServerId);  } else {    computeBestServerWhenConnected(evals,loadDistances,localServerId,currentRsServerId,sumOfWeights,sumOfConnectedDSs);  }}  }
class C{  public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s1_linear_with_only_annotated_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public static Object retrieveSAML2Token(String primaryKey) throws SAML2TokenRepositoryException {  return SAML2TokenRepositoryHolder.getRepo().retrieveSAML2Token(primaryKey);}  }
class C{  private void write(ByteChunk bc){  int length=bc.getLength();  checkLengthBeforeWrite(length);  System.arraycopy(bc.getBytes(),bc.getStart(),headerBuffer,pos,length);  pos=pos + length;}  }
class C{  public void insert(int offset,CharSequence seq){  if (seq == null)   return;  int len=seq.length();  if (len == 0)   return;  if (offset < 0 || offset > editable.length())   throw new ArrayIndexOutOfBoundsException(offset);  integerArray.clear();  char c;  for (int i=0; i < len; i++) {    c=seq.charAt(i);    if (c == '\r' || c == '\n')     integerArray.add(i + 1);  }  contentInserted(offset,len,integerArray);}  }
class C{  public static long readUint32(DataInput di) throws IOException {  final byte[] buf8={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};  di.readFully(buf8,4,4);  final long l=ByteBuffer.wrap(buf8).getLong();  return l;}  }
class C{  public synchronized void freeInstance(DTMIterator obj){  m_freeStack.add(obj);}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public void rotate_deg(int p_component_no,int p_rotate_degree,PlaPointInt p_pole){  BrdComponent curr_component=get(p_component_no);  undo_list.save_for_undo(curr_component);  curr_component.rotate_deg(p_rotate_degree,p_pole,flip_style_rotate_first);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if (select) {      target.moveCaretPosition(0);    } else {      target.setCaretPosition(0);    }  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public void login(IndexType type,String indexName) throws AuthLoginException {  login(type,indexName,null,null,null,null);}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textwithnomarkup.class,args);}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Delete Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Entry DN:  ");  buffer.append(dn);  buffer.append(EOL);}  }
class C{  public boolean isSimple(){  return m_simpleString != null;}  }
class C{  public Builder withThreadPoolIdleTimeout(final long timeout,final TimeUnit units){  Reject.ifTrue(timeout < 0,"Idle timeout cannot be negative");  this.idleTimeout=TimeUnit.SECONDS.convert(timeout,units);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element entRefAddr;  Node entRefNode;  String entRefName;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  entRefAddr=(Element)elementList.item(1);  entRefNode=entRefAddr.getFirstChild();  nodeType=(int)entRefNode.getNodeType();  if (!equals(5,nodeType)) {    entRefNode=doc.createEntityReference("ent2");    assertNotNull("createdEntRefNotNull",entRefNode);  }  entRefName=entRefNode.getNodeName();  assertEquals("nodeEntityReferenceNodeNameAssert1","ent2",entRefName);}  }
class C{  public final int incrementAndGet(){  return unsafe.getAndAddInt(this,valueOffset,1) + 1;}  }
class C{  public final void testGetModulus(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getModulus()));}  }
class C{  public static boolean hasEntityBody(String method){  return StringUtils.equals(method,POST) || StringUtils.equals(method,PUT) || StringUtils.equals(method,PATCH)|| StringUtils.equals(method,DELETE)|| isWebDavMethod(method);}  }
class C{  @RequiresPermission(Manifest.permission.READ_PHONE_STATE) public final boolean isMultiSim(){  return getActiveMultiSimInfo().size() > 1;}  }
class C{  public void removeAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException {  modifyAttributeValue(ModificationType.DELETE,principal,guid,name,value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeLocalName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  employeeLocalName=testEmployee.getLocalName();  assertEquals("lname","employee",employeeLocalName);}  }
class C{  public boolean isLockout(){  return locked;}  }
class C{  public void testGetMinCRL(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the minCRL should be null.",selector.getMinCRL());  BigInteger minCRL=new BigInteger("10000");  selector.setMinCRLNumber(minCRL);  assertTrue("The result should be equal to specified.",minCRL.equals(selector.getMinCRL()));}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  @ConstructorProperties({"bevelType","highlightOuterColor","highlightInnerColor","shadowOuterColor","shadowInnerColor"}) public BevelBorder(int bevelType,Color highlightOuterColor,Color highlightInnerColor,Color shadowOuterColor,Color shadowInnerColor){  this(bevelType);  this.highlightOuter=highlightOuterColor;  this.highlightInner=highlightInnerColor;  this.shadowOuter=shadowOuterColor;  this.shadowInner=shadowInnerColor;}  }
class C{  private void logUnexpectedException(Exception e){  logger.trace(ERR_CHANGE_NUMBER_INDEXER_UNEXPECTED_EXCEPTION,getClass().getSimpleName(),stackTraceToSingleLineString(e));}  }
class C{  public void testFormatIpv4Address() throws Exception {  assertEquals("127.0.0.1",formatIpAddress(new byte[]{127,0,0,1}));}  }
class C{  public AuthorityKeyIdentifier(GeneralNames name,BigInteger serialNumber){  this.keyidentifier=null;  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public DateTimeFormatter withDecimalStyle(DecimalStyle decimalStyle){  if (this.decimalStyle.equals(decimalStyle)) {    return this;  }  return new DateTimeFormatter(printerParser,locale,decimalStyle,resolverStyle,resolverFields,chrono,zone);}  }
class C{  public String checkConflicts(RebuildConfig config){  if (this.baseDN.equals(config.baseDN)) {    for (    String thisIndex : this.rebuildList) {      for (      String thatIndex : config.rebuildList) {        String[] existingIndexParts=thisIndex.split("\\.");        String[] newIndexParts=thatIndex.split("\\.");        if (newIndexParts[0].equalsIgnoreCase(existingIndexParts[0])) {          if ((newIndexParts.length == 1 && existingIndexParts.length >= 1) || (newIndexParts.length > 1 && existingIndexParts.length == 1) || newIndexParts[1].equalsIgnoreCase(existingIndexParts[1])) {            return thatIndex;          }        }      }    }  }  return null;}  }
class C{  private Iterables(){}  }
class C{  @Override public String toString(){  return "InetUnixAddress[" + new String(ipaddress,StandardCharsets.UTF_8) + "]";}  }
class C{  @Inject public LdapAdapter(LdapTokenAttributeConversion conversion,LdapQueryFilterVisitor queryConverter,LdapQueryFactory queryFactory,LdapConnectionFactoryProvider connectionFactoryProvider){  this.conversion=conversion;  this.queryConverter=queryConverter;  this.queryFactory=queryFactory;  this.connectionFactory=connectionFactoryProvider.createFactory();}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SQLDataException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public MazeSearchResult find_connection(){  while (occupy_next_element()) {  }  if (destination_door == null)   return null;  return new MazeSearchResult(destination_door,section_no_of_destination_door);}  }
class C{  int multiplyByTenAndAddUnits(int number,byte digitByte){  return number * 10 + (digitByte - '0');}  }
class C{  private static String normalizeDN(String subOrgName,String orgDN){  if (subOrgName == null || subOrgName.length() == 0) {    return (orgDN);  }  if (SMSEntry.debug.messageEnabled()) {    SMSEntry.debug.message("OrganizationConfigManager." + "normalizeDN()-subOrgName " + subOrgName);  }  String subOrgDN=null;  if (LDAPUtils.isDN(subOrgName) && (!subOrgName.startsWith("///"))) {    int ndx=subOrgName.lastIndexOf(DNMapper.serviceDN);    if (ndx == -1) {      ndx=subOrgName.lastIndexOf(SMSEntry.getRootSuffix());    }    if (ndx > 0) {      subOrgName=subOrgName.substring(0,ndx - 1);    }    subOrgDN=DNMapper.normalizeDN(subOrgName) + orgDN;  } else   if (subOrgName.indexOf('/') != -1) {    String tmp=DNMapper.convertToDN(subOrgName).toString();    if (SMSEntry.debug.messageEnabled()) {      SMSEntry.debug.message("OrganizationConfigManager." + "normalizeDN()-slashConvertedString: " + tmp);    }    if (tmp != null && tmp.length() > 0) {      if (tmp.charAt(tmp.length() - 1) == ',') {        subOrgDN=tmp + DNMapper.serviceDN;      } else {        int dx=tmp.indexOf(SMSEntry.COMMA);        if (dx >= 0) {          subOrgDN=tmp + SMSEntry.COMMA + DNMapper.serviceDN;        } else {          subOrgDN=tmp + SMSEntry.COMMA + orgDN;        }      }    } else {      subOrgDN=orgDN;    }  } else   if (subOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_NAME)) {    subOrgDN=SMSEntry.ORG_PLACEHOLDER_RDN + subOrgName + SMSEntry.COMMA+ DNMapper.serviceDN;  } else {    if (coexistMode) {      subOrgDN=orgNamingAttrInLegacyMode + SMSEntry.EQUALS + subOrgName+ SMSEntry.COMMA+ DNMapper.realmNameToAMSDKName(orgDN);    } else {      subOrgDN=SMSEntry.ORG_PLACEHOLDER_RDN + subOrgName + SMSEntry.COMMA+ orgDN;    }  }  if (SMSEntry.debug.messageEnabled()) {    SMSEntry.debug.message("OrganizationConfigManager::" + "normalizeDN() suborgdn " + subOrgDN);  }  return (subOrgDN);}  }
class C{  public Iterator<Integer> rsIterator(){  return data.rsStates.keySet().iterator();}  }
class C{  private ResourceAccessStatement createResourceAccessStatement(NameIdentifier senderIdentity,SessionContext invocatorSession,Object resourceID,boolean isBear) throws SecurityTokenException {  if (debug.messageEnabled()) {    debug.message("LibSecurityTokenProvider." + "createResourceAccessStatement: resourceID class = " + resourceID.getClass() + ", value = "+ resourceID);  }  ResourceAccessStatement ras=null;  try {    ProxySubject proxySubject=null;    Subject subject=null;    List subjects=createSubjectAndProxySubject(senderIdentity,invocatorSession,isBear);    subject=(Subject)subjects.get(0);    if (subjects.size() == 2) {      proxySubject=(ProxySubject)subjects.get(1);    }    if (resourceID instanceof String) {      ras=new ResourceAccessStatement((String)resourceID,proxySubject,invocatorSession,subject);    } else {      ras=new ResourceAccessStatement((EncryptedResourceID)resourceID,proxySubject,invocatorSession,subject);    }    if (debug.messageEnabled()) {      debug.message("LibSecurityTokenProvider." + "createResourceAccessStatement: ras = " + ras);    }  } catch (  Exception e) {    debug.error("createResourceAccessStatement: ",e);    throw new SecurityTokenException(e.getMessage());  }  return ras;}  }
class C{  public OptimisticConcurrencyCheckFailedException(String tokenId,String etag,Throwable cause){  super(MessageFormat.format("Operation failed:\n" + "Token ID: {0}\n" + "ETag: {1}",tokenId,etag),cause);}  }
class C{  public boolean isRunAsAttr(String attribute){  return getProperties().get(attribute).isNotNull() && getProperties().get(attribute).get(RUN_AS_USER).defaultTo(false).asBoolean();}  }
class C{  public void testGetInstance2() throws java.security.cert.CertificateEncodingException, CertificateEncodingException {  boolean certificateException=false;  X509Certificate c=null;  if (this.cert == null) {    return;  }  try {    c=X509Certificate.getInstance(cert.getEncoded());  } catch (  java.security.cert.CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateException e) {    certificateException=true;  }  if (!certificateException) {    assertNotNull(c);    assertTrue(Arrays.equals(c.getEncoded(),cert.getEncoded()));  }  try {    X509Certificate.getInstance(new byte[]{(byte)1});  } catch (  CertificateException e) {  }  try {    X509Certificate.getInstance((byte[])null);    fail("No expected CertificateException");  } catch (  CertificateException e) {  }}  }
class C{  public void addDisallowedString(final String string){  disallowedStrings.add(string.toLowerCase());}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EncryptedIDElement createEncryptedIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl();}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent bcsre){}  }
class C{  private void destroy(final PooledObject<T> toDestroy) throws Exception {  toDestroy.invalidate();  idleObjects.remove(toDestroy);  allObjects.remove(new IdentityWrapper<>(toDestroy.getObject()));  try {    factory.destroyObject(toDestroy);  }  finally {    destroyedCount.incrementAndGet();    createCount.decrementAndGet();  }}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (DEBUG)   System.out.println("processingInstruction: target: " + target + ", data: "+ data);  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(null,target,DTM.PROCESSING_INSTRUCTION_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(data);  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public BasicLineParser(){  this(null);}  }
class C{  private static Class<?> forName(String name) throws ReflectException {  try {    return Class.forName(name);  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public static SetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,OptionalRelationDefinition<?,?> r) throws ArgumentException {  return new SetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  public void addAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i == 0) {      Object[] objPath={model.getRoot()};      if (objPath[0] == null)       return;      TreePath path=new TreePath(objPath);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public final void addElements(int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_firstFree+=numberOfElements;}  }
class C{  public void addEntry(final Entry entry) throws DirectoryException {  final DN entryDN=entry.getName();  if (backend.contains(entryDN)) {    throw new DirectoryException(ResultCode.ENTRY_ALREADY_EXISTS,ERR_CONFIG_FILE_ADD_ALREADY_EXISTS.get(entryDN));  }  final DN parentDN=retrieveParentDNForAdd(entryDN);  final List<ConfigAddListener> addListeners=getAddListeners(parentDN);  final LocalizableMessageBuilder unacceptableReason=new LocalizableMessageBuilder();  for (  final ConfigAddListener listener : addListeners) {    if (!listener.configAddIsAcceptable(entry,unacceptableReason)) {      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_CONFIG_FILE_ADD_REJECTED_BY_LISTENER.get(entryDN,parentDN,unacceptableReason));    }  }  final ConfigLdapResultHandler resultHandler=new ConfigLdapResultHandler();  backend.handleAdd(UNCANCELLABLE_REQUEST_CONTEXT,Requests.newAddRequest(entry),null,resultHandler);  if (!resultHandler.hasCompletedSuccessfully()) {    LdapException ex=resultHandler.getResultError();    throw new DirectoryException(ex.getResult().getResultCode(),ERR_CONFIG_FILE_ADD_FAILED.get(entryDN,parentDN,ex.getLocalizedMessage()),ex);  }  writeUpdatedConfig();  final ConfigChangeResult ccr=new ConfigChangeResult();  for (  final ConfigAddListener listener : addListeners) {    final ConfigChangeResult result=listener.applyConfigurationAdd(entry);    ccr.aggregate(result);    handleConfigChangeResult(result,entry.getName(),listener.getClass().getName(),"applyConfigurationAdd");  }  if (ccr.getResultCode() != ResultCode.SUCCESS) {    final String reasons=Utils.joinAsString(".  ",ccr.getMessages());    throw new DirectoryException(ccr.getResultCode(),ERR_CONFIG_FILE_ADD_APPLY_FAILED.get(reasons));  }}  }
class C{  public RedisConnectionFactory(){}  }
class C{  protected void tearDown(){}  }
class C{  public void cleanupPlayer(Context context,boolean notify,boolean stopService){  MusicPreferance.saveLastSong(context,getPlayingSongDetail());  MusicPreferance.saveLastSongListType(context,type);  MusicPreferance.saveLastAlbID(context,id);  MusicPreferance.saveLastPosition(context,currentPlaylistNum);  MusicPreferance.saveLastPath(context,path);  cleanupPlayer(notify,stopService);}  }
class C{  public long forceGetValueAsLong(long defaultValue){  long[] l=getValueAsLongs();  if (l != null && l.length >= 1) {    return l[0];  }  byte[] b=getValueAsBytes();  if (b != null && b.length >= 1) {    return b[0];  }  Rational[] r=getValueAsRationals();  if (r != null && r.length >= 1 && r[0].getDenominator() != 0) {    return (long)r[0].toDouble();  }  return defaultValue;}  }
class C{  public SubjectAttributeToUserAttributeCertificateMapper(){  super();}  }
class C{  public void processMenuKeyEvent(MenuKeyEvent e){  if (DEBUG) {    System.out.println("in JMenuItem.processMenuKeyEvent for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(e));  }switch (e.getID()) {case KeyEvent.KEY_PRESSED:    fireMenuKeyPressed(e);  break;case KeyEvent.KEY_RELEASED:fireMenuKeyReleased(e);break;case KeyEvent.KEY_TYPED:fireMenuKeyTyped(e);break;default :break;}}  }
class C{  @Override public URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null) {    throw new IllegalArgumentException("url == null");  }  String host=url.getHost();  if (host == null || host.isEmpty() || host.equalsIgnoreCase("localhost")) {    return new FileURLConnection(url);  }  URL ftpURL=new URL("ftp",host,url.getFile());  return (proxy == null) ? ftpURL.openConnection() : ftpURL.openConnection(proxy);}  }
class C{  public BuilderImages<T> crop(){  this.config.setCrop();  return this;}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public synchronized void dragEnter(DropTargetDragEvent dtde){  isDraggingInside=true;  if (!active)   return;  if (dtListener != null) {    dtListener.dragEnter(dtde);  } else   dtde.getDropTargetContext().setTargetActions(DnDConstants.ACTION_NONE);  initializeAutoscrolling(dtde.getLocation());}  }
class C{  private boolean isAllowedByDns(String dnsName) throws PolicyException {  boolean allowed=false;  dnsName=dnsName.toLowerCase();  Iterator dnsNames=dnsList.iterator();  while (dnsNames.hasNext()) {    String dnsPattern=(String)dnsNames.next();    if (dnsPattern.equals("*")) {      allowed=true;      break;    }    int starIndex=dnsPattern.indexOf("*");    if (starIndex != -1) {      String dnsWildSuffix=dnsPattern.substring(1);      if (dnsName.endsWith(dnsWildSuffix)) {        allowed=true;        break;      }    } else     if (dnsPattern.equalsIgnoreCase(dnsName)) {      allowed=true;      break;    }  }  return allowed;}  }
class C{  public <TCol extends Collection<String>>TCol nextStrings(TCol output) throws DataFormatException {  final int colSize=nextByte();  for (int i=0; i < colSize; i++) {    output.add(nextString());  }  return output;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  @Deprecated public ServerRuntimeException(String s,Exception ex){  super(s,ex);}  }
class C{  public DLSequence(ASN1Encodable obj){  super(obj);}  }
class C{  private boolean scanSurrogates(XMLStringBuffer buf) throws IOException, JasperException {  int high=scanChar();  int low=peekChar();  if (!XMLChar.isLowSurrogate(low)) {    err.jspError("jsp.error.xml.invalidCharInContent",Integer.toString(high,16));    return false;  }  scanChar();  int c=XMLChar.supplemental((char)high,(char)low);  if (!XMLChar.isValid(c)) {    err.jspError("jsp.error.xml.invalidCharInContent",Integer.toString(c,16));    return false;  }  buf.append((char)high);  buf.append((char)low);  return true;}  }
class C{  public void incrementAttribute(Attribute attribute) throws DirectoryException {  AttributeDescription attrDesc=attribute.getAttributeDescription();  Attribute a=getAttribute(attrDesc);  if (a == null) {    LocalizableMessage message=ERR_ENTRY_INCREMENT_NO_SUCH_ATTRIBUTE.get(attrDesc);    throw new DirectoryException(ResultCode.NO_SUCH_ATTRIBUTE,message);  }  Iterator<ByteString> i=attribute.iterator();  if (!i.hasNext()) {    LocalizableMessage message=ERR_ENTRY_INCREMENT_INVALID_VALUE_COUNT.get(attrDesc);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  String incrementValue=i.next().toString();  long increment=parseLong(incrementValue,attrDesc);  if (i.hasNext()) {    LocalizableMessage message=ERR_ENTRY_INCREMENT_INVALID_VALUE_COUNT.get(attrDesc);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  AttributeBuilder builder=new AttributeBuilder(a.getAttributeDescription());  for (  ByteString v : a) {    long currentValue=parseLong(v.toString(),attrDesc);    long newValue=currentValue + increment;    builder.add(String.valueOf(newValue));  }  replaceAttribute(builder.toAttribute());}  }
class C{  protected String toJson(Object object) throws IOException {  try {    return gson.toJson(object);  } catch (  JsonParseException jpe) {    IOException ioe=new IOException("Parse exception converting object to JSON");    ioe.initCause(jpe);    throw ioe;  }}  }
class C{  public String findFieldName(String name){  if (acroFieldsSom == null && xfaPresent) {    acroFieldsSom=new AcroFieldsSearch(datasetsSom.getName2Node().keySet());    return acroFieldsSom.getAcroShort2LongName().containsKey(name) ? acroFieldsSom.getAcroShort2LongName().get(name) : acroFieldsSom.inverseSearchGlobal(Xml2Som.splitParts(name));  }  return null;}  }
class C{  public void isBinary(boolean b){}  }
class C{  private ByteBuffer writeStringUTF16BEBOM(String next,int i,int noOfValues) throws CharacterCodingException {  CharsetEncoder encoder=Charset.forName(TextEncoding.CHARSET_UTF_16_BE_ENCODING_FORMAT).newEncoder();  encoder.onMalformedInput(CodingErrorAction.IGNORE);  encoder.onUnmappableCharacter(CodingErrorAction.IGNORE);  ByteBuffer bb=null;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));  } else {    if (isNullSeperateMultipleValues()) {      bb=encoder.encode(CharBuffer.wrap('\ufeff' + next + '\0'));    } else {      bb=encoder.encode(CharBuffer.wrap('\ufeff' + next));    }  }  bb.rewind();  return bb;}  }
class C{  public XMLSignatureException(String s){  super(s);}  }
class C{  public void reinsert_tree_items(){  remove_all_board_items();  insert_all_board_items();}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue());}  }
class C{  private JMenu createMenu(){  JMenu menu=new JMenu("");  if (getWindowDecorationStyle() == JRootPane.FRAME) {    addMenuItems(menu);  }  return menu;}  }
class C{  public String[] findReloadedContextMemoryLeaks(){  System.gc();  List<String> result=new ArrayList<>();  for (  Map.Entry<ClassLoader,String> entry : childClassLoaders.entrySet()) {    ClassLoader cl=entry.getKey();    if (cl instanceof WebappClassLoaderBase) {      if (!((WebappClassLoaderBase)cl).getState().isAvailable()) {        result.add(entry.getValue());      }    }  }  return result.toArray(new String[result.size()]);}  }
class C{  public static JLabel createPrimaryLabel(){  return createPrimaryLabel(LocalizableMessage.EMPTY);}  }
class C{  @Override public void write(char[] chr){}  }
class C{  @Override public void write(byte[] buf,int off,int nbytes){  digest.update(buf,off,nbytes);}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  private static void repairAltText(XMPNode arrayNode) throws XMPException {  if (arrayNode == null || !arrayNode.getOptions().isArray()) {    return;  }  arrayNode.getOptions().setArrayOrdered(true).setArrayAlternate(true).setArrayAltText(true);  for (Iterator it=arrayNode.iterateChildren(); it.hasNext(); ) {    XMPNode currChild=(XMPNode)it.next();    if (currChild.getOptions().isCompositeProperty()) {      it.remove();    } else     if (!currChild.getOptions().getHasLanguage()) {      String childValue=currChild.getValue();      if (childValue == null || childValue.length() == 0) {        it.remove();      } else {        XMPNode repairLang=new XMPNode(XMPConst.XML_LANG,"x-repair",null);        currChild.addQualifier(repairLang);      }    }  }}  }
class C{  public PageLinks(GitHubResponse response){  String linkHeader=response.getHeader(HEADER_LINK);  if (linkHeader != null) {    String[] links=linkHeader.split(DELIM_LINKS);    for (    String link : links) {      String[] segments=link.split(DELIM_LINK_PARAM);      if (segments.length < 2)       continue;      String linkPart=segments[0].trim();      if (!linkPart.startsWith("<") || !linkPart.endsWith(">"))       continue;      linkPart=linkPart.substring(1,linkPart.length() - 1);      for (int i=1; i < segments.length; i++) {        String[] rel=segments[i].trim().split("=");        if (rel.length < 2 || !META_REL.equals(rel[0]))         continue;        String relValue=rel[1];        if (relValue.startsWith("\"") && relValue.endsWith("\""))         relValue=relValue.substring(1,relValue.length() - 1);        if (META_FIRST.equals(relValue))         first=linkPart; else         if (META_LAST.equals(relValue))         last=linkPart; else         if (META_NEXT.equals(relValue))         next=linkPart; else         if (META_PREV.equals(relValue))         prev=linkPart;      }    }  } else {    next=response.getHeader(HEADER_NEXT);    last=response.getHeader(HEADER_LAST);  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>Segment<K,V> segmentAt(Segment<K,V>[] ss,int j){  long u=(j << SSHIFT) + SBASE;  return ss == null ? null : (Segment<K,V>)UNSAFE.getObjectVolatile(ss,u);}  }
class C{  public String join(){  return equalJoiner.join(key,value);}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public static int convertToUtf32(String text,int idx){  return (text.charAt(idx) - 0xd800) * 0x400 + text.charAt(idx + 1) - 0xdc00 + 0x10000;}  }
class C{  public EjbRef(String ejbType,String home,String remote,String link){  this(ejbType,home,remote,link,null,null);}  }
class C{  public void test_readFully$BII() throws IOException {  byte[] buf=new byte[10];  oos.writeBytes("HelloWorld");  oos.close();  ois=new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));  ois.readFully(buf,0,10);  ois.close();  assertEquals("Read incorrect bytes","HelloWorld",new String(buf,0,10,"UTF-8"));}  }
class C{  public void testGetType(){  assertEquals("The type of X509CRL should be X.509",tbt_crl.getType(),"X.509");}  }
class C{  public LongArraySpliterator(long[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ConditionsElement createConditionsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsElementImpl();}  }
class C{  public void addValue(String value){  setValue(this.value + "\u0000" + value);}  }
class C{  public static Map<String,List<String>> cloneExtraProperties(SchemaElement element){  Map<String,List<String>> extraProperties=new HashMap<>();  Map<String,List<String>> props=element.getExtraProperties();  for (  String name : props.keySet()) {    extraProperties.put(name,new ArrayList<>(props.get(name)));  }  return extraProperties;}  }
class C{  boolean isFractionalExclusive(){  return fractionalExclusive;}  }
class C{  static ChronoZonedDateTimeImpl<?> ofInstant(Chronology chrono,Instant instant,ZoneId zone){  ZoneRules rules=zone.getRules();  ZoneOffset offset=rules.getOffset(instant);  Objects.requireNonNull(offset,"offset");  LocalDateTime ldt=LocalDateTime.ofEpochSecond(instant.getEpochSecond(),instant.getNano(),offset);  ChronoLocalDateTimeImpl<?> cldt=(ChronoLocalDateTimeImpl<?>)chrono.localDateTime(ldt);  return new ChronoZonedDateTimeImpl<>(cldt,offset,zone);}  }
class C{  public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("MessageProcessorThread-TCP-" + getIpAddress().getHostAddress() + '/'+ getPort());  thread.setPriority(sipStack.getThreadPriority());  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createServerSocket(getPort(),0,getIpAddress());  if (getIpAddress().getHostAddress().equals(IN_ADDR_ANY) || getIpAddress().getHostAddress().equals(IN6_ADDR_ANY)) {    super.setIpAddress(sock.getInetAddress());  }  this.isRunning=true;  thread.start();}  }
class C{  public void testReceiveACK(){  try {    Request ack=createRiInviteRequest(null,null,null);    ack.setMethod(Request.ACK);    RequestEvent receivedRequestEvent=null;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(ack);      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      assertNotNull("The sent ACK event was not received at the other end!",receivedRequestEvent);      assertNotNull("The sent ACK was not received at the other end!",receivedRequestEvent.getRequest());    } catch (    TooManyListenersException ex) {      ex.printStackTrace();      fail("A TooManyListenersException was thrown while trying to add " + "a SipListener to a TI SipProvider.");    }catch (    SipException ex) {      throw new TckInternalError("The RI failed to send the request!",ex);    }    assertNull("The Tested Implementation has implicitly created a ServerTransaction " + "for the received request. Transactions should only be created " + "explicitly using the SipProvider.getNewXxxTransaction() method.",receivedRequestEvent.getServerTransaction());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public AccountCredentials(String accountName,String credential){  this.accountName=accountName;  this.credential=credential;}  }
class C{  public boolean isCustomizable(String clientType){  return clientCapDataExtInstance.isClientPresent(clientType);}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  String convertNumberToI18N(String numericText){  if (zeroDigit == '0') {    return numericText;  }  int diff=zeroDigit - '0';  char[] array=numericText.toCharArray();  for (int i=0; i < array.length; i++) {    array[i]=(char)(array[i] + diff);  }  return new String(array);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public IOException(Throwable cause){  super(cause == null ? null : cause.toString(),cause);}  }
class C{  @Override public void initializeForBranch(TemplateFile templateFile,Branch branch,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length < 1 || arguments.length > 2) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,1,2,arguments.length);    throw new InitializationException(message);  }  AttributeType t=DirectoryServer.getSchema().getAttributeType(arguments[0]);  if (!branch.hasAttribute(t)) {    LocalizableMessage message=ERR_MAKELDIF_TAG_UNDEFINED_ATTRIBUTE.get(arguments[0],lineNumber);    throw new InitializationException(message);  }  if (arguments.length == 2) {    assertionValue=arguments[1];  } else {    assertionValue=null;  }}  }
class C{  public ListenerTracesViewer(TracesViewer tracesViewer){  this.tracesViewer=tracesViewer;  ANIMATION_STARTED=false;  aboutFrame=new AboutFrame();  tracesSessionsDisplayer=new TracesSessionsDisplayer();  helpBox=new HelpBox();  scriptFrame=new ScriptFrame();}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INVOCATION_DEFAULT:    typeStr="INVOCATION_DEFAULT";  break;default :typeStr="unknown type";}return typeStr + ",runnable=" + runnable+ ",notifier="+ notifier+ ",catchExceptions="+ catchExceptions+ ",when="+ when;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS04.class,args);}  }
class C{  public FileAttributesFilter(final SeparatedValuesFile file,final String key,final Expression<String> value,@SuppressWarnings("rawtypes") final LeftValueExpression<Map> target){  this.file=file;  this.key=key;  this.value=value;  this.target=target;}  }
class C{  public static List<ICEPoint> readPoints(String namedCurve){  String namedCurveLow=namedCurve.toLowerCase();  String fileName="points_" + namedCurveLow + ".txt";  BufferedReader br=new BufferedReader(new InputStreamReader(ICEPointReader.class.getClassLoader().getResourceAsStream(fileName)));  String line;  List<ICEPoint> points=new LinkedList<>();  try {    while ((line=br.readLine()) != null) {      if (line.length() != 0 && !line.startsWith("#")) {        String[] nums=line.split("\\s+,\\s+");        int order=Integer.parseInt(nums[0]);        BigInteger x=new BigInteger(nums[1],16);        BigInteger y=new BigInteger(nums[2],16);        points.add(new ICEPoint(order,x,y));      }    }    Collections.sort(points,new ICEPointCopmparator());    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Using the following curves and points");      for (      ICEPoint p : points) {        LOGGER.debug(p.getOrder() + " , " + p.getX().toString(16)+ " , "+ p.getY().toString(16));      }    }    return points;  } catch (  IOException|NumberFormatException ex) {    throw new ConfigurationException(ex.getLocalizedMessage(),ex);  }}  }
class C{  @Override public void rename(Name oldName,Name newName) throws NamingException {  Object value=lookup(oldName);  bind(newName,value);  unbind(oldName);}  }
class C{  public COTException(String errorCode,Object[] args){  super(COTUtils.RESOURCE_BUNDLE_NAME,errorCode,args);}  }
class C{  public static PolicyNotification parseXML(Node pNode) throws PolicyEvaluationException {  PolicyNotification policyNotification=new PolicyNotification();  String attr=XMLUtils.getNodeAttributeValue(pNode,NOTIFICATION_ID);  if (attr == null) {    debug.error("PolicyResponse.parseXML: missing attribute " + NOTIFICATION_ID);    String objs[]={NOTIFICATION_ID};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  policyNotification.setNotificationId(attr);  Node node=XMLUtils.getChildNode(pNode,POLICY_CHANGE);  if (node != null) {    PolicyChangeNotification pcn=PolicyChangeNotification.parseXML(node);    policyNotification.setPolicyChangeNotification(pcn);    policyNotification.setNotificationType(POLICY_CHANGE_TYPE);    return policyNotification;  }  debug.error("PolicyNotification: missing either " + POLICY_CHANGE + " element in the xml");  String objs[]={POLICY_CHANGE};  throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_element",objs,null);}  }
class C{  public boolean checkDatabase(Identifier id){  boolean dbExists;  dbExists=databases.exists(id);  return dbExists;}  }
class C{  public final void testGetPublicKey(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.getPublicKey();}  }
class C{  public boolean isFillInAllowed(){  return fillInAllowed;}  }
class C{  private void configureGetRedirectCallback(final String redirectUrl,RedirectCallback redirectCallback) throws AuthLoginException {  final RedirectCallback rcNew=new RedirectCallback(redirectUrl,null,"GET",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());  Map<String,String> redirectData=rcNew.getRedirectData();  rcNew.setRedirectData(redirectData);  rcNew.setTrackingCookie(true);  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);}  }
class C{  public JavaClass parse() throws IOException, ClassFormatException {  readID();  readVersion();  readConstantPool();  readClassInfo();  readInterfaces();  readFields();  readMethods();  readAttributes();  return new JavaClass(class_name,superclass_name,access_flags,constant_pool,interface_names,runtimeVisibleAnnotations);}  }
class C{  public void logAbandonRequest(AbandonOperation abandonOperation){}  }
class C{  public ResourceQueryAuthenticator(Provider<CryptoService> cryptoService,Provider<ConnectionFactory> connectionFactory,String queryOnResource,String queryId,String authenticationIdProperty,String userCredentialProperty,String userRolesProperty){  Reject.ifNull(cryptoService,"CryptoService is null");  Reject.ifNull(connectionFactory,"ConnectionFactory is null");  Reject.ifNull(queryOnResource,"User query resource was null");  Reject.ifNull(queryId,"Credential query was null");  Reject.ifNull(authenticationIdProperty,"authenticationId property is not defined");  Reject.ifNull(userCredentialProperty,"userCredential property is not defined");  this.cryptoServiceProvider=cryptoService;  this.connectionFactoryProvider=connectionFactory;  this.queryOnResource=queryOnResource;  this.queryId=queryId;  this.authenticationIdProperty=authenticationIdProperty;  this.userCredentialProperty=userCredentialProperty;  this.userRolesProperty=userRolesProperty;}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  javax.xml.transform.Templates processFromNode(Node node,String systemID) throws TransformerConfigurationException {  m_DOMsystemID=systemID;  return processFromNode(node);}  }
class C{  private static Attribute addRootPrivileges(){  Attribute privilege=new LinkedAttribute("ds-privilege-name");  privilege.add("bypass-acl");  privilege.add("modify-acl");  privilege.add("config-read");  privilege.add("config-write");  privilege.add("ldif-import");  privilege.add("ldif-export");  privilege.add("backend-backup");  privilege.add("backend-restore");  privilege.add("server-shutdown");  privilege.add("server-restart");  privilege.add("disconnect-client");  privilege.add("cancel-request");  privilege.add("password-reset");  privilege.add("update-schema");  privilege.add("privilege-change");  privilege.add("unindexed-search");  privilege.add("subentry-write");  privilege.add("changelog-read");  return privilege;}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public void start(BundleContext context) throws Exception {  bc=context;  shellCommandsTracker=new ServiceTracker<CustomCommandScope,CustomCommandScope>(bc,bc.createFilter("(objectClass=" + CustomCommandScope.class.getName() + ")"),new ShellCommandsCustomizer());  shellCommandsTracker.open();  Dictionary<String,Object> props=new Hashtable<String,Object>();  props.put(CommandProcessor.COMMAND_SCOPE,"debug");  props.put(CommandProcessor.COMMAND_FUNCTION,DebugCommands.FUNCTIONS);  bc.registerService(DebugCommands.class.getName(),new DebugCommands(bc),props);}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,Supplier<String> msgSupplier){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msgSupplier.get());  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr);}  }
class C{  public PdfCollection(){  this(new PdfDictionary());}  }
class C{  public static void reportStart(String str,Object... param){  writeProgressText(str,param,false);}  }
class C{  public static boolean equals(byte[] a,byte[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  private boolean isValidTelephoneChars(char theChar){  int aVal=theChar;  if ((aVal == 40) || (aVal == 41) || (aVal == 45)|| (aVal == 46)) {    return true;  } else {    return false;  }}  }
class C{  public void paintValue(java.awt.Graphics gfx,java.awt.Rectangle box){}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  public void removeMessageDestinationRef(String name){  namingResources.removeMessageDestinationRef(name);  fireContainerEvent("removeMessageDestinationRef",name);}  }
class C{  public ConnectTimeoutException(){  super();}  }
class C{  public ExactMatchConversationCanceller(String escapeSequence){  this.escapeSequence=escapeSequence;}  }
class C{  public Process executeAsync(final CommandLine command) throws IOException {  return executeAsync(command,(Map<String,String>)null);}  }
class C{  private Promise<AuthStatus,AuthenticationException> validate(HttpServletRequest request,MessageInfoContext messageInfo,Subject clientSubject){  String tokenId=getRequestUtils().getTokenId(request);  if (StringUtils.isEmpty(tokenId)) {    tokenId=request.getHeader(getCookieHeaderName());  }  if (!StringUtils.isEmpty(tokenId)) {    SSOToken ssoToken=getFactory().getTokenFromId(tokenId);    if (ssoToken != null) {      int authLevel;      try {        authLevel=ssoToken.getAuthLevel();        String name=ssoToken.getPrincipal().getName();        handler.handle(new Callback[]{new CallerPrincipalCallback(clientSubject,name)});        clientSubject.getPrincipals().add(ssoToken.getPrincipal());      } catch (      SSOException e) {        return newExceptionPromise(new AuthenticationException(e.getMessage()));      }catch (      UnsupportedCallbackException e) {        return newExceptionPromise(new AuthenticationException(e.getMessage()));      }catch (      IOException e) {        return newExceptionPromise(new AuthenticationException(e.getMessage()));      }      Map<String,Object> context=(Map<String,Object>)messageInfo.getRequestContextMap().get("org.forgerock.authentication.context");      context.put("authLevel",authLevel);      context.put("tokenId",ssoToken.getTokenID().toString());      return newResultPromise(SUCCESS);    }  }  return newResultPromise(getInvalidSSOTokenAuthStatus());}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int n=m.size();  if (n == 0)   return;  if (n > size)   resize(capacity(n));  for (  Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public ECParameterSpec(EllipticCurve curve,ECPoint g,BigInteger n,int h){  if (curve == null) {    throw new NullPointerException("curve is null");  }  if (g == null) {    throw new NullPointerException("g is null");  }  if (n == null) {    throw new NullPointerException("n is null");  }  if (n.signum() != 1) {    throw new IllegalArgumentException("n is not positive");  }  if (h <= 0) {    throw new IllegalArgumentException("h is not positive");  }  this.curve=curve;  this.g=g;  this.n=n;  this.h=h;}  }
class C{  public static String formPropertySheetXML(String properties,boolean addSection){  return (addSection) ? getXMLDefinitionHeader() + PropertyTemplate.START_TAG + PropertyTemplate.SECTION_DUMMY_START_TAG+ properties+ PropertyTemplate.SECTION_END_TAG+ PropertyTemplate.END_TAG : getXMLDefinitionHeader() + PropertyTemplate.START_TAG + properties+ PropertyTemplate.END_TAG;}  }
class C{  public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: org config changed: " + orgName);  }synchronized (idRepoListeners) {    if (type == ServiceListener.ADDED) {      if (idRepoListeners.get(orgName) == null) {        try {          AMIdentityRepository idRepo=new AMIdentityRepository(appToken,orgName);          idRepo.addEventListener(this);          idRepoListeners.put(orgName,idRepo);          if (DelegationManager.debug.messageEnabled()) {            DelegationManager.debug.message("DelegationPolicyImpl: IdRepo event listener" + " added for realm (" + orgName + ").");          }        } catch (        Exception e) {          DelegationManager.debug.error("DelegationPolicyImpl: failed to process " + "organization config changes. ",e);        }      }    } else     if (type == ServiceListener.REMOVED) {      idRepoListeners.remove(orgName);      if (DelegationManager.debug.messageEnabled()) {        DelegationManager.debug.message("DelegationPolicyImpl: IdRepo event listener" + " removed for realm (" + orgName + ").");      }    }  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(CONDITION_ELEMENT).append(" ").append(NS).append(">");  sb.append("</").append(appendNS).append(CONDITION_ELEMENT).append(">");  if (SAML2SDKUtils.debug.messageEnabled()) {    SAML2SDKUtils.debug.message("ConditionImpl.toXMLString(): condition=" + sb.toString());  }  return sb.toString();}  }
class C{  @Override protected void installListeners(){  super.installListeners();  splitPane.addPropertyChangeListener(this);}  }
class C{  public void finish() throws Exception {}  }
class C{  public void testEqualsBigIntegerFalse(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object bNumber=new BigInteger(bSign,bBytes);  assertFalse(aNumber.equals(bNumber));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.TimestampType createTimestampType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.TimestampTypeImpl();}  }
class C{  protected void fireEscapingEvent(String name,String data) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name,data);  }}  }
class C{  public StreamResult(File f){  setSystemId(f);}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  AMViewConfig amconfig=AMViewConfig.getInstance();  try {    AMViewBeanBase vb=getTabNodeAssociatedViewBean("cscGeneral",nodeID);    unlockPageTrailForSwapping();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    debug.error("ServerEditGeneralViewBean.nodeClicked",e);    forwardTo();  }}  }
class C{  private void hangUp(){  if (mIncomingInviteDialog != null) {    mIncomingInviteDialog.cancel();    mIncomingInviteDialog=null;  }  if (mConversation != null) {    mConversation.setConversationListener(null);    mConversation.disconnect();  } else   if (mOutgoingInvite != null) {    mOutgoingInvite.cancel();  }  if (mCameraCapturer != null) {    if (mCameraCapturer.isPreviewing()) {      mCameraCapturer.stopPreview();    }    mCameraCapturer=null;  }  mConversation=null;  mOutgoingInvite=null;}  }
class C{  private void addObjectIfNotFound(Object obj,Vector v){  int n=v.size();  boolean addIt=true;  for (int i=0; i < n; i++) {    if (v.elementAt(i) == obj) {      addIt=false;      break;    }  }  if (addIt) {    v.addElement(obj);  }}  }
class C{  public boolean is_shove_fixed(){  return shove_fixed;}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  public void nextRequest(){  for (int i=0; i <= lastActiveFilter; i++) {    activeFilters[i].recycle();  }  response.recycle();  pos=0;  lastActiveFilter=-1;  responseFinished=false;  byteCount=0;}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public TransformerFactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  protected String createUri(final String path){  return baseUri + configureUri(path);}  }
class C{  public void init(String[] arguments) throws Exception {  init();  load(arguments);}  }
class C{  private void cleanUpInstance(){synchronized (lock) {    try {      logger.trace("Cleaning up instance");      List<Trigger> storedTriggers=new ArrayList<>();      String[] groupNames=getTriggerGroupNames(null);      for (      String groupName : groupNames) {        String[] triggerNames=getTriggerNames(null,groupName);        for (        String triggerName : triggerNames) {          storedTriggers.add(getTriggerWrapper(groupName,triggerName).getTrigger());        }      }      WaitingTriggers wt=getWaitingTriggers();      TreeSet<Trigger> waitingTriggers=wt.getTriggers();      for (      Trigger t : waitingTriggers) {        storedTriggers.remove(t);      }      AcquiredTriggers at=getAcquiredTriggers(instanceId);      List<Trigger> acquiredTriggers=at.getTriggers();      for (      Trigger t : acquiredTriggers) {        if (hasTriggerMisfired(t)) {          logger.trace("Trigger {} has misfired",t.getName());          processTriggerMisfired(getTriggerWrapper(t.getGroup(),t.getName()));          if (t.getNextFireTime() != null) {            removeAcquiredTrigger(t,instanceId);          }        } else {          releaseAcquiredTrigger(null,t);        }      }      for (      Trigger t : storedTriggers) {        logger.trace("Adding trigger {} waitingTriggers",t.getName());        addWaitingTrigger(t);      }    } catch (    JobPersistenceException e) {      logger.warn("Error initializing RepoJobStore",e);    }  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  aaccfJohnsonDN=DN.valueOf("uid=aaccf.johnson,dc=example,dc=com");  aaronZimmermanDN=DN.valueOf("uid=aaron.zimmerman,dc=example,dc=com");  albertSmithDN=DN.valueOf("uid=albert.smith,dc=example,dc=com");  albertZimmermanDN=DN.valueOf("uid=albert.zimmerman,dc=example,dc=com");  lowercaseMcGeeDN=DN.valueOf("uid=lowercase.mcgee,dc=example,dc=com");  margaretJonesDN=DN.valueOf("uid=margaret.jones,dc=example,dc=com");  maryJonesDN=DN.valueOf("uid=mary.jones,dc=example,dc=com");  samZweckDN=DN.valueOf("uid=sam.zweck,dc=example,dc=com");  zorroDN=DN.valueOf("uid=zorro,dc=example,dc=com");}  }
class C{  public void addToPartialMatchMap(String ua,String clientType){  partialMatchMap.put(ua,clientType);}  }
class C{  public void testConstructorSignBytesPositive2(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15};  int aSign=1;  byte rBytes[]={0,-12,56,100,-2,-76,89,45,91,3,-15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  @Override public void onFocusChange(View v,boolean hasFocus){  mRecyclerViewBridge.setFocusView(v,oldView,1.0f);  oldView=v;}  }
class C{  @Deprecated public Set<Map.Entry<Long,V>> entrySet(){  HashSet<Map.Entry<Long,V>> set=new HashSet<Map.Entry<Long,V>>();  for (  long key : keySet()) {    set.add(new Entry(key,get(key)));  }  return set;}  }
class C{  public EddystoneEidrGenerator(byte[] serviceEcdhPublicKey){  checkArgument(serviceEcdhPublicKey != null && serviceEcdhPublicKey.length == 32);  this.serviceEcdhPublicKey=serviceEcdhPublicKey;  beaconPrivateKey=generateBeaconPrivateKey();  beaconPublicKey=generateBeaconPublicKey();}  }
class C{  @Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){  Log.d(TAG,"FmRadioContentProvider.update");  int rows=0;  mSqlDb=mDbHelper.getWritableDatabase();switch (URI_MATCHER.match(uri)) {case STATION_FREQ:    rows=mSqlDb.update(TABLE_NAME,values,selection,selectionArgs);  getContext().getContentResolver().notifyChange(uri,null);break;case STATION_FREQ_ID:String stationID=uri.getPathSegments().get(1);rows=mSqlDb.update(TABLE_NAME,values,FmRadioStation.Station._ID + "=" + stationID+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);getContext().getContentResolver().notifyChange(uri,null);break;default :Log.e(TAG,"Error: Unkown URI to update: " + uri);break;}return rows;}  }
class C{  public FileWriterWithEncoding(File file,String encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl(value);}  }
class C{  protected static boolean isAncestorOrgDeleted(SSOToken token,String dn,int profileType) throws AMException {  return complianceServices.isAncestorOrgDeleted(token,dn,profileType);}  }
class C{  public ScriptsViewBean(){  super("Scripts");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public FacebookException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public CodeException(String msg){  super(msg);}  }
class C{  boolean elementExists(String name){  return !"unknown".equals(name) && (elementHash.get(name) != null);}  }
class C{  private boolean matchFilterAttributeValues(Attribute a,AttributeType attrType,SearchFilter filter){  for (  ByteString value : a) {    if (!matchFilterAttributeValue(attrType,value,filter)) {      return false;    }  }  return true;}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public DTMStringPool(int chainSize){  m_intToString=new Vector();  m_hashChain=new IntVector(chainSize);  removeAllElements();  stringToIndex("");}  }
class C{  private static void executeSearch(SearchOperation searchOp,LocalBackendWorkflowElement workflow) throws CanceledOperationException {  SearchScope originalScope=searchOp.getScope();  if (originalScope == SearchScope.BASE_OBJECT) {    workflow.execute(searchOp);    return;  }  SearchResultCode searchResultCode=new SearchResultCode(searchOp.getResultCode(),searchOp.getErrorMessage());  SearchScope newScope=elaborateScopeForSearchInSubordinates(originalScope);  searchOp.setScope(newScope);  DN originalBaseDN=searchOp.getBaseDN();  for (  LocalBackendWorkflowElement subordinate : getRootDSESubordinates()) {    DN ncDN=subordinate.getBaseDN();    searchOp.setBaseDN(ncDN);    execute(searchOp,ncDN);    boolean sendReferenceEntry=searchResultCode.elaborateGlobalResultCode(searchOp.getResultCode(),searchOp.getErrorMessage());    if (sendReferenceEntry) {    }  }  searchOp.setBaseDN(originalBaseDN);  searchOp.setScope(originalScope);  searchResultCode.elaborateGlobalResultCode(ResultCode.NO_SUCH_OBJECT,new LocalizableMessageBuilder(LocalizableMessage.EMPTY));  searchOp.setResultCode(searchResultCode.resultCode);  searchOp.setErrorMessage(searchResultCode.errorMessage);}  }
class C{  public static boolean verifyResponseIssuer(String realm,String hostEntity,Issuer resIssuer,String requestId) throws SAML2Exception {  boolean issuerValid=isSourceSiteValid(resIssuer,realm,hostEntity);  if (!issuerValid) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils " + "Issuer in Response is not valid.");    }    String[] data={hostEntity,realm,requestId};    LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_RESPONSE,data,null);    throw new SAML2Exception(bundle.getString("invalidIssuerInResponse"));  }  return issuerValid;}  }
class C{  private void expect(char expectedSymbol) throws ParseException {  if (!accept(expectedSymbol))   throw new ParseException("Expected '" + expectedSymbol + "' but found '"+ (char)data[index]+ "'",index);}  }
class C{  void clear(){  ob=null;}  }
class C{  public ParserConfigurationException(){  super();}  }
class C{  public InputStream(){  this(checkPermission());}  }
class C{  public Image loadImage(final String resourceName){  try {    final URL url=getClass().getResource(resourceName);    if (url != null) {      final ImageProducer ip=(ImageProducer)url.getContent();      if (ip != null) {        return Toolkit.getDefaultToolkit().createImage(ip);      }    }  } catch (  final Exception ignored) {  }  return null;}  }
class C{  public static List<Foo> findByUuid(java.lang.String uuid){  return getPersistence().findByUuid(uuid);}  }
class C{  protected void doTrace(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  int responseLength;  String CRLF="\r\n";  StringBuilder buffer=new StringBuilder("TRACE ").append(req.getRequestURI()).append(" ").append(req.getProtocol());  Enumeration<String> reqHeaderEnum=req.getHeaderNames();  while (reqHeaderEnum.hasMoreElements()) {    String headerName=reqHeaderEnum.nextElement();    buffer.append(CRLF).append(headerName).append(": ").append(req.getHeader(headerName));  }  buffer.append(CRLF);  responseLength=buffer.length();  resp.setContentType("message/http");  resp.setContentLength(responseLength);  ServletOutputStream out=resp.getOutputStream();  out.print(buffer.toString());  out.close();  return;}  }
class C{  private boolean isEscapingDisabled(){  return m_disableOutputEscapingStates.peekOrFalse();}  }
class C{  public JKEmptyReportException(String arg0){  super(arg0);}  }
class C{  @Override protected void shutdownInput() throws IOException {  shutdownInput=true;  try {    Libcore.os.shutdown(fd,SHUT_RD);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsSocketException();  }}  }
class C{  public void removeTableModelListener(TableModelListener l){  listenerList.remove(TableModelListener.class,l);}  }
class C{  public void addFileAttachment(String description,byte[] fileStore,String fileDisplay,PdfName mimeType,PdfDictionary fileParameter,PdfName afRelationshipValue){  addFileAttachment(description,PdfFileSpec.createEmbeddedFileSpec(this,fileStore,description,fileDisplay,mimeType,fileParameter,afRelationshipValue,true));}  }
class C{  public RadiusServiceConfig loadConfig(){  try {    RadiusServiceConfig cfg=null;    final ServiceConfig serviceConf=serviceConfigManager.getGlobalConfig("default");    if (serviceConf != null) {      final Map<String,Set<String>> configAttributes=serviceConf.getAttributes();      final boolean isEnabled="YES".equals(CollectionHelper.getMapAttrThrows(configAttributes,RadiusServerConstants.GBL_ATT_LISTENER_ENABLED));      final int listenerPort=CollectionHelper.getIntMapAttr(configAttributes,RadiusServerConstants.GBL_ATT_LISTENER_PORT,-1,LOG);      final int coreThreads=CollectionHelper.getIntMapAttr(configAttributes,RadiusServerConstants.GBL_ATT_THREADS_CORE_SIZE,-1,LOG);      final int maxThreads=CollectionHelper.getIntMapAttr(configAttributes,RadiusServerConstants.GBL_ATT_THREADS_MAX_SIZE,-1,LOG);      final int queueSize=CollectionHelper.getIntMapAttr(configAttributes,RadiusServerConstants.GBL_ATT_QUEUE_SIZE,-1,LOG);      final int keepaliveSeconds=CollectionHelper.getIntMapAttr(configAttributes,RadiusServerConstants.GBL_ATT_THREADS_KEEPALIVE_SECONDS,-1,LOG);      final ThreadPoolConfig poolCfg=new ThreadPoolConfig(coreThreads,maxThreads,queueSize,keepaliveSeconds);      final Set<String> clientConfigNames=serviceConf.getSubConfigNames();      final List<ClientConfig> definedClientConfigs=new ArrayList<ClientConfig>();      for (      final String clientConfigName : clientConfigNames) {        try {          final ClientConfig clientConfig=new ClientConfig();          clientConfig.setName(clientConfigName);          final ServiceConfig clientCfg=serviceConf.getSubConfig(clientConfigName);          final Map<String,Set<String>> map=clientCfg.getAttributes();          clientConfig.setIpaddr(CollectionHelper.getMapAttrThrows(map,RadiusServerConstants.CLIENT_ATT_IP_ADDR));          clientConfig.setSecret(CollectionHelper.getMapAttrThrows(map,RadiusServerConstants.CLIENT_ATT_SECRET));          final Boolean setLogPackets="YES".equals(CollectionHelper.getMapAttrThrows(map,RadiusServerConstants.CLIENT_ATT_LOG_PACKETS));          clientConfig.setLogPackets(setLogPackets);          clientConfig.setAccessRequestHandlerClassname(CollectionHelper.getMapAttrThrows(map,RadiusServerConstants.CLIENT_ATT_CLASSNAME));          final Class accessRequestHandlerClass=validateClass(clientConfig);          if (accessRequestHandlerClass == null) {            throw new ClientConfigurationException(clientConfigName,RadiusServerConstants.CLIENT_ATT_CLASSNAME);          } else {            clientConfig.setAccessRequestHandler(accessRequestHandlerClass);            clientConfig.setClassIsValid(true);          }          final Set<String> properties=map.get(RadiusServerConstants.CLIENT_ATT_PROPERTIES);          if (properties != null) {            clientConfig.setHandlerConfig(extractProperties(properties));          } else {            LOG.warning("No properties defined for handler.");          }          definedClientConfigs.add(clientConfig);        } catch (        final ValueNotFoundException vnfe) {          LOG.error(vnfe.getMessage() + " in RADIUS client config '" + clientConfigName+ "'. Requests "+ "from this client will be ignored.");        }catch (        final ClientConfigurationException e) {          LOG.error(e.getMessage());        }      }      cfg=new RadiusServiceConfig(isEnabled,listenerPort,poolCfg,definedClientConfigs.toArray(new ClientConfig[0]));    }    return cfg;  } catch (  final Exception e) {    LOG.error("Unable to load RADIUS Service Configuration",e);  }  return null;}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    lastWasCR=markedLastWasCR;  }}  }
class C{  protected boolean checkWritable() throws NamingException {  if (isWritable()) {    return true;  } else {    if (exceptionOnFailedWrite) {      throw new javax.naming.OperationNotSupportedException(sm.getString("namingContext.readOnly"));    }  }  return false;}  }
class C{  public static void debugWhatToShow(int whatToShow){  java.util.Vector v=new java.util.Vector();  if (0 != (whatToShow & DTMFilter.SHOW_ATTRIBUTE))   v.addElement("SHOW_ATTRIBUTE");  if (0 != (whatToShow & DTMFilter.SHOW_NAMESPACE))   v.addElement("SHOW_NAMESPACE");  if (0 != (whatToShow & DTMFilter.SHOW_CDATA_SECTION))   v.addElement("SHOW_CDATA_SECTION");  if (0 != (whatToShow & DTMFilter.SHOW_COMMENT))   v.addElement("SHOW_COMMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT))   v.addElement("SHOW_DOCUMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_FRAGMENT))   v.addElement("SHOW_DOCUMENT_FRAGMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_TYPE))   v.addElement("SHOW_DOCUMENT_TYPE");  if (0 != (whatToShow & DTMFilter.SHOW_ELEMENT))   v.addElement("SHOW_ELEMENT");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY))   v.addElement("SHOW_ENTITY");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY_REFERENCE))   v.addElement("SHOW_ENTITY_REFERENCE");  if (0 != (whatToShow & DTMFilter.SHOW_NOTATION))   v.addElement("SHOW_NOTATION");  if (0 != (whatToShow & DTMFilter.SHOW_PROCESSING_INSTRUCTION))   v.addElement("SHOW_PROCESSING_INSTRUCTION");  if (0 != (whatToShow & DTMFilter.SHOW_TEXT))   v.addElement("SHOW_TEXT");  int n=v.size();  for (int i=0; i < n; i++) {    if (i > 0)     System.out.print(" | ");    System.out.print(v.elementAt(i));  }  if (0 == n)   System.out.print("empty whatToShow: " + whatToShow);  System.out.println();}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  private void layoutButtons(){  setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  GridBagConstraints gbcAux=new GridBagConstraints();  gbcAux.gridwidth=GridBagConstraints.REMAINDER;  gbcAux.fill=GridBagConstraints.HORIZONTAL;  JPanel previousPanel=new JPanel(new GridBagLayout());  previousPanel.setOpaque(false);  previousPanel.add(previousButton,gbcAux);  int width=(int)previousButton.getPreferredSize().getWidth();  previousPanel.add(Box.createHorizontalStrut(width),gbcAux);  gbc.gridwidth=5;  gbc.weightx=0.0;  gbc.weighty=0.0;  gbc.insets.bottom=0;  gbc.insets.right=UIFactory.HORIZONTAL_INSET_BETWEEN_BUTTONS;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.NONE;  add(previousPanel,gbc);  gbc.gridwidth--;  JPanel nextFinishPanel=new JPanel(new GridBagLayout());  nextFinishPanel.setOpaque(false);  nextFinishPanel.add(nextButton,gbcAux);  if (getApplication().finishOnLeft()) {    nextFinishPanel.add(finishButton,gbcAux);  }  width=(int)Math.max(nextButton.getPreferredSize().getWidth(),finishButton.getPreferredSize().getWidth());  nextFinishPanel.add(Box.createHorizontalStrut(width),gbcAux);  add(nextFinishPanel,gbc);  gbc.gridwidth--;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets.right=0;  add(Box.createHorizontalGlue(),gbc);  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.weightx=0.0;  gbc.fill=GridBagConstraints.NONE;  gbc.insets.left=UIFactory.HORIZONTAL_INSET_BETWEEN_BUTTONS;  if (!getApplication().finishOnLeft()) {    gbc.insets.right=UIFactory.HORIZONTAL_INSET_BETWEEN_BUTTONS;    add(finishButton,gbc);    gbc.insets.right=0;  }  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=0.0;  gbc.fill=GridBagConstraints.NONE;  gbc.insets.left=0;  JPanel quitClosePanel=new JPanel(new GridBagLayout());  quitClosePanel.setOpaque(false);  quitClosePanel.add(Box.createHorizontalStrut(UIFactory.HORIZONTAL_INSET_BETWEEN_BUTTONS),gbcAux);  quitClosePanel.add(quitButton,gbcAux);  quitClosePanel.add(closeButton,gbcAux);  width=(int)Math.max(quitButton.getPreferredSize().getWidth(),closeButton.getPreferredSize().getWidth());  quitClosePanel.add(Box.createHorizontalStrut(width),gbcAux);  add(quitClosePanel,gbc);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.AttributedDateTime createAttributedDateTime() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.AttributedDateTimeImpl();}  }
class C{  public PropertyListFormatException(String message){  super(message);}  }
class C{  public XObject execute(XPathContext xctxt,int currentNode,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == NodeTest.SHOW_BYFUNCTION) {    if (null != m_relativePathPattern) {      return m_relativePathPattern.execute(xctxt);    } else     return NodeTest.SCORE_NONE;  }  XObject score;  score=super.execute(xctxt,currentNode,dtm,expType);  if (score == NodeTest.SCORE_NONE)   return NodeTest.SCORE_NONE;  if (getPredicateCount() != 0) {    if (!executePredicates(xctxt,dtm,currentNode))     return NodeTest.SCORE_NONE;  }  if (null != m_relativePathPattern)   return m_relativePathPattern.executeRelativePathPattern(xctxt,dtm,currentNode);  return score;}  }
class C{  public static Document createDocument(){  return createDocument(false);}  }
class C{  public SAAJResult(SOAPMessage message){  super(message.getSOAPPart());}  }
class C{  public ResponseImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public SQLException(String theReason,String theSQLState,int theErrorCode,Throwable theCause){  this(theReason,theSQLState,theCause);  vendorCode=theErrorCode;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformsTypeImpl();}  }
class C{  public SSOToken retrieveValidTokenWithoutResettingIdleTime(String tokenId) throws UnsupportedOperationException, SSOException {  for (  SSOProviderPlugin ssoProvider : getSsoProviderPlugins()) {    if (ssoProvider.isApplicable(tokenId)) {      return ssoProvider.createSSOToken(tokenId,false,false);    }  }  if (dProProvider != null)   return (dProProvider.createSSOToken(tokenId,false,false)); else   return (grappaProvider.createSSOToken(tokenId,false,false));}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public static boolean isRelayStateURLValid(HttpServletRequest request,String relayState,String role){  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());  if (metaAlias == null) {    metaAlias=request.getParameter(SAML2MetaManager.NAME_META_ALIAS_IN_URI);  }  return isRelayStateURLValid(metaAlias,relayState,role);}  }
class C{  public InvalidArgumentException(String message,Throwable cause){  super(message);  m_Cause=cause;}  }
class C{  public Issuer createIssuer(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ISSUER,elem);  if (obj == null) {    return new IssuerImpl(elem);  } else {    return (Issuer)obj;  }}  }
class C{  public AssertionError(float detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public FrameBodySYLT(int textEncoding,String language,int timeStampFormat,int contentType,String description,byte[] lyrics){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  setObjectValue(DataTypes.OBJ_LANGUAGE,language);  setObjectValue(DataTypes.OBJ_TIME_STAMP_FORMAT,timeStampFormat);  setObjectValue(DataTypes.OBJ_CONTENT_TYPE,contentType);  setObjectValue(DataTypes.OBJ_DESCRIPTION,description);  setObjectValue(DataTypes.OBJ_DATA,lyrics);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);}  }
class C{  private static Method findMethod(Method[] methodsCache,String methodName){  if (methodName.equals(INIT_METHOD)) {    return methodsCache[INIT];  } else   if (methodName.equals(DESTROY_METHOD)) {    return methodsCache[DESTROY];  } else   if (methodName.equals(SERVICE_METHOD)) {    return methodsCache[SERVICE];  } else   if (methodName.equals(DOFILTER_METHOD)) {    return methodsCache[DOFILTER];  } else   if (methodName.equals(EVENT_METHOD)) {    return methodsCache[EVENT];  } else   if (methodName.equals(DOFILTEREVENT_METHOD)) {    return methodsCache[DOFILTEREVENT];  }  return null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509PkiPathV1Token10Element createWssX509PkiPathV1Token10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509PkiPathV1Token10ElementImpl();}  }
class C{  public static Entry entryFromLdifString(String ldif) throws Exception {  return entriesFromLdifString(ldif).get(0);}  }
class C{  public GeneralPath(int rule){  super(rule,INIT_SIZE);}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TLSMessageChannel that=(TLSMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  public static float dip2Dimension(float dip,Context context){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,displayMetrics);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element docElem;  Element newElem;  Node retval;  doc=(Document)load("hc_staff",true);  docElem=doc.getDocumentElement();  attributes=docElem.getAttributes();  newElem=doc.createElement("html");{    boolean success=false;    try {      retval=attributes.setNamedItem(newElem);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public String jmxSslUsername(){  return values.jmxSslUsername;}  }
class C{  private boolean isSubcommand(String name){  SubCommand subCommand=getSubCommand();  return subCommand != null && subCommand.getName().equalsIgnoreCase(name);}  }
class C{  protected boolean parseChunkHeader() throws IOException {  int result=0;  boolean eol=false;  int readDigit=0;  boolean extension=false;  while (!eol) {    if (pos >= lastValid) {      if (readBytes() <= 0)       return false;    }    if (buf[pos] == Constants.CR || buf[pos] == Constants.LF) {      parseCRLF(false);      eol=true;    } else     if (buf[pos] == Constants.SEMI_COLON && !extension) {      extension=true;      extensionSize++;    } else     if (!extension) {      int charValue=HexUtils.getDec(buf[pos]);      if (charValue != -1 && readDigit < 8) {        readDigit++;        result=(result << 4) | charValue;      } else {        return false;      }    } else {      extensionSize++;      if (maxExtensionSize > -1 && extensionSize > maxExtensionSize) {        throwIOException(sm.getString("chunkedInputFilter.maxExtension"));      }    }    if (!eol) {      pos++;    }  }  if (readDigit == 0 || result < 0) {    return false;  }  if (result == 0) {    endChunk=true;  }  remaining=result;  return true;}  }
class C{  public void encode(ByteStringBuilder buffer,EntryEncodeConfig config) throws DirectoryException {  encodeV3(buffer,config);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  protected View createChild(String name){  View child=null;  if (name.equals(CC_TITLE)) {    child=new StaticTextField(this,CC_TITLE,"");  } else   if (name.equals(RESET_MESSAGE)) {    child=new StaticTextField(this,RESET_MESSAGE,"");  } else {    child=super.createChild(name);  }  return child;}  }
class C{  private static CharInfo mutableCopyOf(CharInfo charInfo){  CharInfo copy=new CharInfo();  int max=charInfo.array_of_bits.length;  System.arraycopy(charInfo.array_of_bits,0,copy.array_of_bits,0,max);  copy.firstWordNotUsed=charInfo.firstWordNotUsed;  max=charInfo.shouldMapAttrChar_ASCII.length;  System.arraycopy(charInfo.shouldMapAttrChar_ASCII,0,copy.shouldMapAttrChar_ASCII,0,max);  max=charInfo.shouldMapTextChar_ASCII.length;  System.arraycopy(charInfo.shouldMapTextChar_ASCII,0,copy.shouldMapTextChar_ASCII,0,max);  copy.m_charToString=(HashMap)charInfo.m_charToString.clone();  copy.onlyQuotAmpLtGt=charInfo.onlyQuotAmpLtGt;  return copy;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public Observable<DriveId> createFile(DriveFolder folder,File file,String title){  return createFile(folder,file,title,MimeTypeMap.getFileExtensionFromUrl(file.getPath()));}  }
class C{  public FrameBodyTSOT(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public final void insert(AwtreeObject p_obj){  int shape_count=p_obj.tree_shape_count(this);  if (shape_count <= 0)   return;  AwtreeNodeLeaf[] leaf_arr=new AwtreeNodeLeaf[shape_count];  for (int index=0; index < shape_count; ++index) {    leaf_arr[index]=insert(p_obj,index);  }  p_obj.set_search_tree_entries(this,leaf_arr);}  }
class C{  public boolean isInheritedFromRDNCollectiveAttributeSubentry(){  return hasObjectClass(OC_INHERITED_FROM_RDN_COLLECTIVE_ATTR_SUBENTRY_LC);}  }
class C{  public static String urlEncode(String value){  return Uris.formEncodeParameterNameOrValue(value);}  }
class C{  public static void registerSupportedExtension(String oid,ExtendedOperationHandler<?> handler){  DirectoryServer.registerSupportedExtension(oid,handler);}  }
class C{  public ModifyRequestProtocolOp(ByteString dn,List<RawModification> modifications){  this.dn=dn;  if (modifications == null) {    this.modifications=new ArrayList<>();  } else {    this.modifications=modifications;  }}  }
class C{  public void appendQuotedChars(StringBuffer toAddTo){  appendQuoted(chars,toAddTo);}  }
class C{  public void test_newInstanceLjava_lang_Class$I(){  int[][] x;  int[] y={2};  x=(int[][])Array.newInstance(int[].class,y);  assertEquals("Failed to instantiate array properly",2,x.length);  boolean thrown=false;  try {    x=(int[][])Array.newInstance(null,y);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }  thrown=false;  try {    Array.newInstance(int[].class,new int[]{1,-1});  } catch (  NegativeArraySizeException e) {    thrown=true;  }  if (!thrown) {    fail("Negative array size failed to throw NegativeArraySizeException");  }  thrown=false;  try {    Array.newInstance(int[].class,new int[]{});  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Zero array size failed to throw IllegalArgumentException");  }}  }
