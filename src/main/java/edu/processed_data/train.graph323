class C{  public void testInvalidPositionsOutput() throws Exception {  String testFile="the test => testola";  Analyzer analyzer=new EnglishAnalyzer();  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  expectThrows(ParseException.class,null);  analyzer.close();}  }
class C{  @Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public Iterable<String> groupListing(@Auth AutomationClient automationClient){  return groupDAO.getGroups().stream().map(null).collect(toSet());}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public Builder consistentId(Object consistentId){  impl.consistentId=consistentId;  return this;}  }
class C{  public CSVParser build(){  return new CSVParser(separator,quoteChar,escapeChar,strictQuotes,ignoreLeadingWhiteSpace,ignoreQuotations,nullFieldIndicator);}  }
class C{  public void startInitialSync(String replicaSetName){  initialSyncReplicaSets.add(replicaSetName);}  }
class C{  public void addImage(Bitmap image){  Bitmap[] temp=this.images;  if (temp == null) {    temp=new Bitmap[0];  }  this.images=new Bitmap[temp.length + 1];  for (int i=0; i < temp.length; i++) {    this.images[i]=temp[i];  }  this.images[temp.length]=image;}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public IntConstantOperand(int v){  value=v;}  }
class C{  public boolean isSriovEnabled(){  return sriovEnabled;}  }
class C{  public static void main(java.lang.String[] args){  StreamPrintingOrientation pd=new StreamPrintingOrientation();  PrinterJob pj=PrinterJob.getPrinterJob();  HashPrintRequestAttributeSet prSet=new HashPrintRequestAttributeSet();  PrintService service=null;  FileOutputStream fos=null;  File f=null, f1=null;  String mType="application/postscript";  try {    f=new File("streamexample.ps");    fos=new FileOutputStream(f);    StreamPrintServiceFactory[] factories=PrinterJob.lookupStreamPrintServices(mType);    if (factories.length > 0)     service=factories[0].getPrintService(fos);    if (service != null) {      System.out.println("Stream Print Service " + service);      pj.setPrintService(service);    } else {      throw new RuntimeException("No stream Print Service available.");    }  } catch (  Exception e) {    e.printStackTrace();  }  pj.setPrintable(pd);  prSet.add(OrientationRequested.LANDSCAPE);  prSet.add(new Copies(3));  prSet.add(new JobName("orientation test",null));  System.out.println("open PrintDialog..");  if (pj.printDialog(prSet)) {    try {      System.out.println("\nValues in attr set passed to print method");      Attribute attr[]=prSet.toArray();      for (int x=0; x < attr.length; x++) {        System.out.println("Name " + attr[x].getName() + "  "+ attr[x]);      }      System.out.println("About to print the data ...");      if (service != null) {        System.out.println("TEST: calling Print");        pj.print(prSet);        System.out.println("TEST: Printed");      }    } catch (    PrinterException pe) {      pe.printStackTrace();    }  }}  }
class C{  public AnimatableColorValue(AnimationTarget target,float r,float g,float b){  super(target);  red=r;  green=g;  blue=b;}  }
class C{  LongAdder(){}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.write(server_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  out.write(cipher_suite.toBytes());  out.write(compression_method);  length=38 + session_id.length;}  }
class C{  public static byte[] encode(byte[] data,PGPPublicKey key,String name,DateTime modified) throws IOException, PGPException {  checkNotNull(data,"data");  checkArgument(key.isEncryptionKey(),"not an encryption key");  Ghostryde ghost=new Ghostryde(1024 * 64);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try (Encryptor encryptor=ghost.openEncryptor(output,key);Compressor kompressor=ghost.openCompressor(encryptor);OutputStream go=ghost.openOutput(kompressor,name,modified)){    go.write(data);  }   return output.toByteArray();}  }
class C{  public Object[] toArray(Object[] a){  Class t=a.getClass().getComponentType();  if ((t != Object.class) && (t != Rectangle.class)) {    Arrays.fill(a,null);    return a;  }  if (a.length < size)   a=new Rectangle[size];  System.arraycopy(rects,0,a,0,size);  Arrays.fill(a,size,a.length,null);  return a;}  }
class C{  void register(Address address,LocalServer server){  registry.put(address,server);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public static String checkForInvalidCharacters(String toStrip,int whatToKeep,String whatElseToKeep){  if ((null == toStrip) || (toStrip.length() == 0)) {    return null;  }  String invalidChars="";  int toStripLength=toStrip.length();  for (int i=0; i < toStripLength; i++) {    if ((!isValidChar(toStrip.charAt(i),whatToKeep)) && (!isValidChar(toStrip.charAt(i),whatElseToKeep))) {      if (invalidChars.indexOf(toStrip.charAt(i)) == -1) {        invalidChars=invalidChars + toStrip.substring(i,i + 1);      }    }  }  if ("".equals(invalidChars)) {    return null;  } else {    return invalidChars;  }}  }
class C{  public static boolean contains(Iterable<?> iterable,Object value){  if (iterable instanceof Collection) {    return ((Collection<?>)iterable).contains(value);  }  if (iterable instanceof RichIterable) {    return ((RichIterable<?>)iterable).contains(value);  }  return IterableIterate.detectIndex(iterable,Predicates.equal(value)) > -1;}  }
class C{  public KVO<O>[] filter(final KVO<O>[] a){  return a;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Integer(0); else   return new Integer(uiMgr.getRootPanel().getHeight());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.532 -0500",hash_original_method="A37AC0F546410BFB8FB9B835A95E1AD0",hash_generated_method="776F05CA560EFB9C0C763CBDB1EB98A5") public static boolean putLong(ContentResolver cr,String name,long value){  return putString(cr,name,Long.toString(value));}  }
class C{  private boolean intersectsPixelClosure(Coordinate p0,Coordinate p1){  li.computeIntersection(p0,p1,corner[0],corner[1]);  if (li.hasIntersection())   return true;  li.computeIntersection(p0,p1,corner[1],corner[2]);  if (li.hasIntersection())   return true;  li.computeIntersection(p0,p1,corner[2],corner[3]);  if (li.hasIntersection())   return true;  li.computeIntersection(p0,p1,corner[3],corner[0]);  if (li.hasIntersection())   return true;  return false;}  }
class C{  public boolean login() throws LoginException {  succeeded=false;  ntSystem=new NTSystem(debugNative);  if (ntSystem == null) {    if (debug) {      System.out.println("\t\t[NTLoginModule] " + "Failed in NT login");    }    throw new FailedLoginException("Failed in attempt to import the " + "underlying NT system identity information");  }  if (ntSystem.getName() == null) {    throw new FailedLoginException("Failed in attempt to import the " + "underlying NT system identity information");  }  userPrincipal=new NTUserPrincipal(ntSystem.getName());  if (debug) {    System.out.println("\t\t[NTLoginModule] " + "succeeded importing info: ");    System.out.println("\t\t\tuser name = " + userPrincipal.getName());  }  if (ntSystem.getUserSID() != null) {    userSID=new NTSidUserPrincipal(ntSystem.getUserSID());    if (debug) {      System.out.println("\t\t\tuser SID = " + userSID.getName());    }  }  if (ntSystem.getDomain() != null) {    userDomain=new NTDomainPrincipal(ntSystem.getDomain());    if (debug) {      System.out.println("\t\t\tuser domain = " + userDomain.getName());    }  }  if (ntSystem.getDomainSID() != null) {    domainSID=new NTSidDomainPrincipal(ntSystem.getDomainSID());    if (debug) {      System.out.println("\t\t\tuser domain SID = " + domainSID.getName());    }  }  if (ntSystem.getPrimaryGroupID() != null) {    primaryGroup=new NTSidPrimaryGroupPrincipal(ntSystem.getPrimaryGroupID());    if (debug) {      System.out.println("\t\t\tuser primary group = " + primaryGroup.getName());    }  }  if (ntSystem.getGroupIDs() != null && ntSystem.getGroupIDs().length > 0) {    String groupSIDs[]=ntSystem.getGroupIDs();    groups=new NTSidGroupPrincipal[groupSIDs.length];    for (int i=0; i < groupSIDs.length; i++) {      groups[i]=new NTSidGroupPrincipal(groupSIDs[i]);      if (debug) {        System.out.println("\t\t\tuser group = " + groups[i].getName());      }    }  }  if (ntSystem.getImpersonationToken() != 0) {    iToken=new NTNumericCredential(ntSystem.getImpersonationToken());    if (debug) {      System.out.println("\t\t\timpersonation token = " + ntSystem.getImpersonationToken());    }  }  succeeded=true;  return succeeded;}  }
class C{  protected void parseAdaptationSetChild(XmlPullParser xpp) throws XmlPullParserException, IOException {}  }
class C{  public boolean isEmpty(){  long sum=0L;  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> seg=segmentAt(segments,j);    if (seg != null) {      if (seg.count != 0)       return false;      sum+=seg.modCount;    }  }  if (sum != 0L) {    for (int j=0; j < segments.length; ++j) {      Segment<K,V> seg=segmentAt(segments,j);      if (seg != null) {        if (seg.count != 0)         return false;        sum-=seg.modCount;      }    }    if (sum != 0L)     return false;  }  return true;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.menuList=this.findView(R.id.menu_list);  this.menuList.addItemDecoration(new EasyDividerItemDecoration(this,EasyDividerItemDecoration.VERTICAL_LIST));}  }
class C{  public void deliver(){  if (this.listener != null) {    this.listener.register(context);  }  TargetChooserActivity.start(context,this);}  }
class C{  public void test_wellDesigned02() throws MalformedQueryException {  final String queryStr="" + "PREFIX : <http://example/>\n" + "SELECT * \n"+ "{ \n"+ "    ?X  :name \"paul\" . \n"+ "    OPTIONAL {?X :name \"george\" . ?X :email ?Z } \n"+ "}";  final BigdataValueFactory f=store.getValueFactory();  final BigdataURI name=f.createURI("http://example/name");  final BigdataURI email=f.createURI("http://example/email");  final BigdataLiteral paul=f.createLiteral("paul");  final BigdataLiteral george=f.createLiteral("george");  final BigdataValue[] values=new BigdataValue[]{name,email,paul,george};  store.getLexiconRelation().addTerms(values,values.length,false);  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  QueryRoot queryRoot=astContainer.getOriginalAST();  queryRoot=(QueryRoot)new ASTWildcardProjectionOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  final QueryRoot expected=BOpUtility.deepCopy(queryRoot);  queryRoot=(QueryRoot)new ASTBottomUpOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  assertEquals(expected,queryRoot);}  }
class C{  private String toString(CompilationUnit ast){  if (ast == null)   return "null";  List<AbstractTypeDeclaration> types=ast.types();  if (types != null && types.size() > 0)   return types.get(0).getName().getIdentifier() + "(" + ast.hashCode()+ ")"; else   return "AST without any type";}  }
class C{  @Override public double evaluateAttribute(int attribute) throws Exception {  int i, j, ii, jj;  int ni, nj;  double sum=0.0;  ni=m_trainInstances.attribute(attribute).numValues() + 1;  nj=m_numClasses + 1;  double[] sumi, sumj;  Instance inst;  double temp=0.0;  sumi=new double[ni];  sumj=new double[nj];  double[][] counts=new double[ni][nj];  sumi=new double[ni];  sumj=new double[nj];  for (i=0; i < ni; i++) {    sumi[i]=0.0;    for (j=0; j < nj; j++) {      sumj[j]=0.0;      counts[i][j]=0.0;    }  }  for (i=0; i < m_numInstances; i++) {    inst=m_trainInstances.instance(i);    if (inst.isMissing(attribute)) {      ii=ni - 1;    } else {      ii=(int)inst.value(attribute);    }    if (inst.isMissing(m_classIndex)) {      jj=nj - 1;    } else {      jj=(int)inst.value(m_classIndex);    }    counts[ii][jj]++;  }  for (i=0; i < ni; i++) {    sumi[i]=0.0;    for (j=0; j < nj; j++) {      sumi[i]+=counts[i][j];      sum+=counts[i][j];    }  }  for (j=0; j < nj; j++) {    sumj[j]=0.0;    for (i=0; i < ni; i++) {      sumj[j]+=counts[i][j];    }  }  if (m_missing_merge && (sumi[ni - 1] < m_numInstances) && (sumj[nj - 1] < m_numInstances)) {    double[] i_copy=new double[sumi.length];    double[] j_copy=new double[sumj.length];    double[][] counts_copy=new double[sumi.length][sumj.length];    for (i=0; i < ni; i++) {      System.arraycopy(counts[i],0,counts_copy[i],0,sumj.length);    }    System.arraycopy(sumi,0,i_copy,0,sumi.length);    System.arraycopy(sumj,0,j_copy,0,sumj.length);    double total_missing=(sumi[ni - 1] + sumj[nj - 1] - counts[ni - 1][nj - 1]);    if (sumi[ni - 1] > 0.0) {      for (j=0; j < nj - 1; j++) {        if (counts[ni - 1][j] > 0.0) {          for (i=0; i < ni - 1; i++) {            temp=((i_copy[i] / (sum - i_copy[ni - 1])) * counts[ni - 1][j]);            counts[i][j]+=temp;            sumi[i]+=temp;          }          counts[ni - 1][j]=0.0;        }      }    }    sumi[ni - 1]=0.0;    if (sumj[nj - 1] > 0.0) {      for (i=0; i < ni - 1; i++) {        if (counts[i][nj - 1] > 0.0) {          for (j=0; j < nj - 1; j++) {            temp=((j_copy[j] / (sum - j_copy[nj - 1])) * counts[i][nj - 1]);            counts[i][j]+=temp;            sumj[j]+=temp;          }          counts[i][nj - 1]=0.0;        }      }    }    sumj[nj - 1]=0.0;    if (counts[ni - 1][nj - 1] > 0.0 && total_missing != sum) {      for (i=0; i < ni - 1; i++) {        for (j=0; j < nj - 1; j++) {          temp=(counts_copy[i][j] / (sum - total_missing)) * counts_copy[ni - 1][nj - 1];          counts[i][j]+=temp;          sumi[i]+=temp;          sumj[j]+=temp;        }      }      counts[ni - 1][nj - 1]=0.0;    }  }  return ContingencyTables.symmetricalUncertainty(counts);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  public PSPCommunicationException(String message){  super(message);}  }
class C{  protected static double[] convertKernelUnitLength(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_KERNEL_UNIT_LENGTH_ATTRIBUTE);  if (s.length() == 0) {    return null;  }  double[] units=new double[2];  StringTokenizer tokens=new StringTokenizer(s," ,");  try {    units[0]=SVGUtilities.convertSVGNumber(tokens.nextToken());    if (tokens.hasMoreTokens()) {      units[1]=SVGUtilities.convertSVGNumber(tokens.nextToken());    } else {      units[1]=units[0];    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KERNEL_UNIT_LENGTH_ATTRIBUTE,s});  }  if (tokens.hasMoreTokens() || units[0] <= 0 || units[1] <= 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KERNEL_UNIT_LENGTH_ATTRIBUTE,s});  }  return units;}  }
class C{  public Path[] availableShardPaths(ShardId shardId){  assert assertEnvIsLocked();  final NodePath[] nodePaths=nodePaths();  final Path[] shardLocations=new Path[nodePaths.length];  for (int i=0; i < nodePaths.length; i++) {    shardLocations[i]=nodePaths[i].resolve(shardId);  }  return shardLocations;}  }
class C{  public TObjectFloatHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  public static String randomAlphabetic(int count){  return random(count,true,false);}  }
class C{  public List<InnerClass> computeGloballyImpliedICs(){  Set<Entry> cpRefs=new HashSet<>();{    ArrayList<InnerClass> innerClassesSaved=innerClasses;    innerClasses=null;    visitRefs(VRM_CLASSIC,cpRefs);    innerClasses=innerClassesSaved;  }  ConstantPool.completeReferencesIn(cpRefs,true);  Set<Entry> icRefs=new HashSet<>();  for (  Entry e : cpRefs) {    if (!(e instanceof ClassEntry))     continue;    while (e != null) {      InnerClass ic=getGlobalInnerClass(e);      if (ic == null)       break;      if (!icRefs.add(e))       break;      e=ic.outerClass;    }  }  ArrayList<InnerClass> impliedICs=new ArrayList<>();  for (  InnerClass ic : allInnerClasses) {    if (icRefs.contains(ic.thisClass) || ic.outerClass == this.thisClass) {      if (verbose > 1)       Utils.log.fine("Relevant IC: " + ic);      impliedICs.add(ic);    }  }  return impliedICs;}  }
class C{  public void refresh(){  if (arrayAdapter != null) {    arrayAdapter.clear();    arrayAdapter.addAll(Connections.getInstance(getActivity()).getConnection(clientHandle).history());    arrayAdapter.notifyDataSetChanged();  }}  }
class C{  private static boolean referencesDifferentSlots(Context ascContext,ObjectValue referencingTypeInfo,QName qName,ObjectValue referencedTypeInfo){  boolean result=false;  int kind=Tokens.GET_TOKEN;  String localPart=qName.getLocalPart().intern();  ObjectValue namespace=ascContext.getNamespace(qName.getNamespace().intern());  if (referencingTypeInfo.hasName(ascContext,kind,localPart,namespace) && referencedTypeInfo.hasName(ascContext,kind,localPart,namespace)) {    int referencingIndex=referencingTypeInfo.getSlotIndex(ascContext,kind,localPart,namespace);    int referencedIndex=referencedTypeInfo.getSlotIndex(ascContext,kind,localPart,namespace);    if (referencingIndex != referencedIndex) {      Slot referencingSlot=referencingTypeInfo.getSlot(ascContext,referencingIndex);      Slot referencedSlot=referencedTypeInfo.getSlot(ascContext,referencedIndex);      if ((referencingSlot instanceof VariableSlot) && (referencedSlot instanceof VariableSlot) && (referencingSlot.getValue() != referencedSlot.getValue())) {        result=true;      }    }  }  return result;}  }
class C{  private ConnectFuture(ObservableClient client,boolean awaitedState){  this.awaitedState=awaitedState;  client.registerForConnectionChanges(this);  check(client);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void debug(String format,Object... args){  if (DEBUG) {    System.out.printf(format,args);  }}  }
class C{  public static String shortCodify(String text){  String emojifiedText=emojify(text);  for (  Emoji emoji : EmojiManager.data()) {    StringBuilder shortCodeBuilder=new StringBuilder();    shortCodeBuilder.append(":").append(emoji.getAliases().get(0)).append(":");    emojifiedText=emojifiedText.replace(emoji.getEmoji(),shortCodeBuilder.toString());  }  return emojifiedText;}  }
class C{  static public void inssort(long[] array,SortComparatorL comp){  long tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (comp.lt(array[j],array[j - 1])); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public TriggerBuilder<T> startNow(){  this.startTime=new Date();  return this;}  }
class C{  public void start(){  if (!started) {    started=true;    deltaUs=elapsedRealtimeMinus(positionUs);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void installApplication(JSONObject data,org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appUrl;  String type;  String name;  String operationType;  String schedule=null;  try {    if (!data.isNull(getContextResources().getString(R.string.app_type))) {      type=data.getString(getContextResources().getString(R.string.app_type));      if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_enterprise))) {        appUrl=data.getString(getContextResources().getString(R.string.app_url));        if (data.has(getContextResources().getString(R.string.app_schedule))) {          schedule=data.getString(getContextResources().getString(R.string.app_schedule));        }        operation.setStatus(getContextResources().getString(R.string.operation_value_completed));        getResultBuilder().build(operation);        getAppList().installApp(appUrl,schedule,operation);      } else       if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_public))) {        appUrl=data.getString(getContextResources().getString(R.string.app_identifier));        operation.setStatus(getContextResources().getString(R.string.operation_value_completed));        getResultBuilder().build(operation);        Preference.putInt(getContext(),getContext().getResources().getString(R.string.app_install_id),operation.getId());        Preference.putString(getContext(),getContext().getResources().getString(R.string.app_install_code),operation.getCode());        triggerGooglePlayApp(appUrl);      } else       if (type.equalsIgnoreCase(getContextResources().getString(R.string.intent_extra_web))) {        name=data.getString(getContextResources().getString(R.string.intent_extra_name));        appUrl=data.getString(getContextResources().getString(R.string.app_url));        operationType=getContextResources().getString(R.string.operation_install);        JSONObject payload=new JSONObject();        payload.put(getContextResources().getString(R.string.intent_extra_identity),appUrl);        payload.put(getContextResources().getString(R.string.intent_extra_title),name);        payload.put(getContextResources().getString(R.string.operation_type),operationType);        operation.setPayLoad(payload.toString());        manageWebClip(operation);      } else {        operation.setStatus(getContextResources().getString(R.string.operation_value_error));        operation.setOperationResponse("Invalid application details provided.");        getResultBuilder().build(operation);        throw new AndroidAgentException("Invalid application details");      }      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(TAG,"Application installation triggered.");      }    }  } catch (  JSONException e) {    operation.setStatus(getContextResources().getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing APPLICATION payload.");    getResultBuilder().build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        start=zzMarkedPos - 1;        yybegin(CHAR_LITERAL);      }case 22:    break;case 20:{    yybegin(YYINITIAL);    addToken(start,zzStartRead + 2,Token.COMMENT_DOCUMENTATION);  }case 23:break;case 19:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 24:break;case 11:{addToken(start,zzStartRead - 1,Token.ERROR_CHAR);addNullToken();return firstToken;}case 25:break;case 21:{start=zzMarkedPos - 4;yybegin(CD_COMMENT);}case 26:break;case 3:{addToken(Token.WHITESPACE);}case 27:break;case 10:{addToken(start,zzStartRead,Token.LITERAL_CHAR);yybegin(YYINITIAL);}case 28:break;case 4:{addToken(Token.SEPARATOR);}case 29:break;case 16:{addToken(Token.VARIABLE);}case 30:break;case 1:{addToken(Token.IDENTIFIER);}case 31:break;case 8:{addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);yybegin(YYINITIAL);}case 32:break;case 14:{addToken(Token.FUNCTION);}case 33:break;case 15:{addToken(Token.DATA_TYPE);}case 34:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 35:break;case 17:{start=zzMarkedPos - 2;yybegin(C_STYLE_COMMENT);}case 36:break;case 5:{start=zzMarkedPos - 1;yybegin(STRING);}case 37:break;case 18:{addToken(Token.OPERATOR);}case 38:break;case 2:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 39:break;case 7:{}case 40:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 41:break;case 9:{addToken(start,zzStartRead - 1,Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 42:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case CD_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);return firstToken;}case 84:break;case STRING:{addToken(start,zzStartRead - 1,Token.ERROR_STRING_DOUBLE);return firstToken;}case 85:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.ERROR_CHAR);return firstToken;}case 86:break;case YYINITIAL:{addNullToken();return firstToken;}case 87:break;case C_STYLE_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 88:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static String encodePathForURL(String str){  StringBuffer result=new StringBuffer();  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')     result.append(ch); else {switch (ch) {case '-':case '_':case '.':case '!':case '~':case '*':case '\'':case '(':case ')':case ':':case '/':case '\\':        result.append(ch);      break;default :    result.append('%');  result.append(hexchars[(ch & 0xf0) >> 4]);result.append(hexchars[ch & 0x0f]);break;}}}return result.toString();}  }
class C{  public void update(GlowPlayer player){}  }
class C{  ServerSessionContext registerSession(ServerSessionContext session){  session.setAddress(addresses.get(session.client()));  session.setConnection(connections.get(session.client()));  sessions.put(session.id(),session);  clients.put(session.client(),session);  return session;}  }
class C{  private CoordinatorImp createCC(RecoveryCoordinator adaptor,String root,boolean checkOrphans,boolean heuristic_commit,long timeout){  CoordinatorImp cc=null;  if (maxTimeout_ > 0 && timeout > maxTimeout_) {    timeout=maxTimeout_;    LOGGER.logWarning("Attempt to create a transaction with a timeout that exceeds maximum - truncating to: " + maxTimeout_);  }synchronized (shutdownSynchronizer_) {    if (shutdownInProgress_)     throw new IllegalStateException("Server is shutting down...");    if (otsOverride_) {      checkOrphans=false;    }    cc=new CoordinatorImp(root,adaptor,heuristic_commit,timeout,checkOrphans,single_threaded_2pc_);    recoverymanager_.register(cc);synchronized (getLatch(root.intern())) {      rootToCoordinatorMap_.put(root.intern(),cc);    }    startlistening(cc);  }  return cc;}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  return new Instances(inputFormat,0);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementempty.class,args);}  }
class C{  public void refresh(boolean updateLabels){  tableViewer.refresh(updateLabels);}  }
class C{  public static void insertThriftRenamePartitionLogEntry(HiveMetaStore.HMSHandler hmsHandler,Partition oldPartition,Partition newPartition,HiveConf hiveConf) throws Exception {  final MetastoreAuditLogListener metastoreAuditLogListener=new MetastoreAuditLogListener(hiveConf);  AlterPartitionEvent event=new AlterPartitionEvent(oldPartition,newPartition,true,hmsHandler);  metastoreAuditLogListener.onAlterPartition(event);}  }
class C{  public ResponseProcessingTask(Client client,String requestTicket,Collection<ResponseListener> responseListeners,LwM2mResponse response){  this.requestTicket=requestTicket;  this.exception=null;  this.hasException=false;  this.responseListeners=responseListeners;  this.response=response;  this.client=client;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private String normalizeCommandLine(String commandLine){  return commandLine.trim().replaceAll(PART_SEPARATOR + "+",PART_SEPARATOR);}  }
class C{  private void initSaveGpxTaskDialog(final boolean newDialog){  if (newDialog) {    mSaveGpxProgress=new ProgressDialog(this);    mSaveGpxProgress.setCancelable(false);    mSaveGpxProgress.setIndeterminate(true);    final String defaultTitle=getResources().getString(R.string.exporting_gpx);    final String defaultMessage=getResources().getString(R.string.please_stay_patient);    mSaveGpxProgress.setTitle(defaultTitle);    mSaveGpxProgress.setMessage(defaultMessage);    mUploadTaskFragment.retainProgress(defaultTitle,defaultMessage,mSaveGpxProgress.getProgress());  } else {    mSaveGpxProgress=new ProgressDialog(this);    mSaveGpxProgress.setCancelable(false);    mSaveGpxProgress.setIndeterminate(true);    mSaveGpxTaskFragment.restoreProgress(mSaveGpxProgress);  }}  }
class C{  public static OutputAnalyzer jps() throws Exception {  return jps(null,null);}  }
class C{  public static byte[] internalize(byte[] buf,int offset,int len){  byte[] translated=new byte[len];  for (int j=0; j < len; j++) {    byte b=buf[offset + j];    if (b == '/')     translated[j]=(byte)'.'; else     translated[j]=b;  }  return translated;}  }
class C{  public void dispose(){  MapHandler mh=((MapHandler)getBeanContext());  if (mh != null) {    mh.dispose();  }  beanContextChildSupport=null;  getContentPane().removeAll();  JMenuBar jmb=getJMenuBar();  if (jmb != null) {    jmb.removeAll();  }  setJMenuBar(null);  getRootPane().remove(this);  super.dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.224 -0500",hash_original_method="F8E908A70E700CBC7624EF366C4425D3",hash_generated_method="AEFF8E84E95C023F6D8865FE889AC2AA") public RC2ParameterSpec(int effectiveKeyBits,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length - offset < 8) {    throw new IllegalArgumentException("iv.length - offset < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,offset,this.iv,0,8);}  }
class C{  protected Caret createCaret(){  Caret caret=new ConfigurableCaret();  caret.setBlinkRate(500);  return caret;}  }
class C{  public void shutdown(){  if (env != null) {    env.shutdown();  }}  }
class C{  public boolean bringPointIntoView(int offset){  return mInputView.bringPointIntoView(offset);}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  void copyArea(JComponent c,Graphics g,int x,int y,int w,int h,int deltaX,int deltaY,boolean clip){  getPaintManager().copyArea(c,g,x,y,w,h,deltaX,deltaY,clip);}  }
class C{  public static MCostQueue add(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID,int M_CostElement_ID,BigDecimal amt,BigDecimal qty,int precision,MCostDetail cd,String trxName){  if (CLogMgt.isLevelFine())   s_log.fine("Entering: org=" + AD_Org_ID + ", product="+ product.get_ID()+ ", asi="+ M_AttributeSetInstance_ID+ ", amt="+ amt+ ", qty="+ qty+ ", precision="+ precision);  MCostQueue cq=new MCostQueue(product,M_AttributeSetInstance_ID,as,AD_Org_ID,M_CostElement_ID,trxName);  cq.setCosts(amt,qty,precision);  cq.setDateAcct(cd.getDateAcct());  cq.saveEx();  if (CLogMgt.isLevelFine())   s_log.fine("Leaving: " + cq);  return cq;}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  private Canvas beginRecordingPicture(int imageWidth,int imageHeight){  if (targetWidth == 0 || targetHeight == 0) {    return picture.beginRecording(imageWidth,imageHeight);  } else {    Canvas canvas=picture.beginRecording(targetWidth,targetHeight);    prepareScaledCanvas(canvas,imageWidth,imageHeight);    return canvas;  }}  }
class C{  public boolean isUseVertexBufferObject(){  return this.isVertexBufferObjectAvailable && this.isVertexBufferObjectEnabled;}  }
class C{  public boolean isHasPostal_Add(){  Object oo=get_Value(COLUMNNAME_HasPostal_Add);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean remove(Object o){  DigraphNode node=(DigraphNode)poNodes.get(o);  if (node == null) {    return false;  }  poNodes.remove(o);  node.dispose();  return true;}  }
class C{  private CacheManager findCacheManager(URI uri,ClassLoader classLoader){synchronized (cacheManagersLock) {    for (    CacheManager cacheManager : cacheManagers) {      if (!cacheManager.getURI().equals(uri))       continue;      if (!cacheManager.getClassLoader().equals(classLoader))       continue;      return cacheManager;    }  }  return null;}  }
class C{  protected void preFinaliseAddObservations() throws Exception {}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof JButton) {    JButton button=(JButton)e.getSource();    if (button == refreshButton) {      refreshAttributes();      return;    }    if (button == clearButton) {      clearCurrentNotifications();      return;    }    if (button == subscribeButton) {      registerListener();      return;    }    if (button == unsubscribeButton) {      unregisterListener();      return;    }  }}  }
class C{  public static void clearClientCredentials(Context context){  SharedPreferences mainPref=context.getSharedPreferences(Constants.PACKAGE_NAME,Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(Constants.CLIENT_ID,null);  editor.putString(Constants.CLIENT_SECRET,null);  editor.apply();}  }
class C{  public void changeSignature(List<String> users,String signature) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.SIGNATURE,signature);  for (  String user : users) {    logger.log(Level.INFO,"Updating signature ( signature: " + signature + " ) for user "+ user+ " ...");    updateSettings(user,entry,Constants.SIGNATURE);    logger.log(Level.INFO,"Successfully updated signature.");  }}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new HubGenerator(Double.valueOf(args[0]),Double.valueOf(args[1]),Double.valueOf(args[2]));}  }
class C{  private void mapPoint(View fromView,View toView,int pt[]){  fromView.getLocationInWindow(mTmpLoc);  int x=mTmpLoc[0];  int y=mTmpLoc[1];  toView.getLocationInWindow(mTmpLoc);  int vX=mTmpLoc[0];  int vY=mTmpLoc[1];  pt[0]+=x - vX;  pt[1]+=y - vY;}  }
class C{  public boolean compile(String className,String rawCode) throws URISyntaxException {  SourceCode sc=new SourceCode(className,rawCode);  return this.compile(sc);}  }
class C{  public static char[] encodeRawKey(byte[] raw_key){  if (raw_key.length != 32)   throw new IllegalArgumentException("provided key not 32 bytes (256 bits) wide");  final String kPrefix;  final String kSuffix;  if (sqlcipher_uses_native_key) {    Log.d(TAG,"sqlcipher uses native method to set key");    kPrefix="x'";    kSuffix="'";  } else {    Log.d(TAG,"sqlcipher uses PRAGMA to set key - SPECIAL HACK IN PROGRESS");    kPrefix="x''";    kSuffix="''";  }  final char[] key_chars=encodeHex(raw_key,HEX_DIGITS_LOWER);  if (key_chars.length != 64)   throw new IllegalStateException("encoded key is not 64 bytes wide");  char[] kPrefix_c=kPrefix.toCharArray();  char[] kSuffix_c=kSuffix.toCharArray();  CharBuffer cb=CharBuffer.allocate(kPrefix_c.length + kSuffix_c.length + key_chars.length);  cb.put(kPrefix_c);  cb.put(key_chars);  cb.put(kSuffix_c);  return cb.array();}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private static Map<String,List<Request>> asMap(final Collection<Request> reqs) throws IOException {  final Map<String,List<Request>> map=new HashMap<>(reqs.size());  for (  final Request req : reqs) {    final String header=new RqHeaders.Smart(req).single("Content-Disposition");    final Matcher matcher=RqMtBase.NAME.matcher(header);    if (!matcher.matches()) {      throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("\"name\" not found in Content-Disposition header: %s",header));    }    final String name=matcher.group(1);    if (!map.containsKey(name)) {      map.put(name,new LinkedList<Request>());    }    map.get(name).add(req);  }  return map;}  }
class C{  public Room roomFromRoomSummary(RoomSummary roomSummary){  if ((null == roomSummary) || (null == roomSummary.getMatrixId())) {    return null;  }  MXSession session=Matrix.getMXSession(mContext,roomSummary.getMatrixId());  if ((null == session) || (!session.isAlive())) {    return null;  }  return Matrix.getMXSession(mContext,roomSummary.getMatrixId()).getDataHandler().getStore().getRoom(roomSummary.getRoomId());}  }
class C{  public boolean lastParentExists(){  return ids.length > 1 && lastExistingIdx == ids.length - 2;}  }
class C{  @After public void tearDown() throws Exception {  cache.close();}  }
class C{  @Nonnull public List<T_ENTITY> listForOwner(@Nonnull String owner){  try {    String prefix="x";    NamedParameter parameter=new NamedParameter(OwnableEntity.PROPERTY_CREATOR,"pId",owner);    StringBuilder sb=new StringBuilder();    sb.append(buildQlSelect(prefix)).append(startWhere()).append(buildWhereClause(Operation.EQUALS,prefix,parameter));    return listWithJQL(sb.toString(),parameter);  } catch (  Exception e) {    LOG.info("No entities for owner " + owner);  }  return Collections.emptyList();}  }
class C{  public ReceiveFileTransfer acceptFileTransferResume(IncomingFileTransferEvent event,File destination,long startPosition) throws IOException, InterruptedException, DccException {  checkNotNull(event,"Event cannot be null");  checkNotNull(destination,"Destination file cannot be null");  checkArgument(startPosition >= 0,"Start position %s must be positive",startPosition);  CountDownLatch countdown=new CountDownLatch(1);  PendingRecieveFileTransfer pendingTransfer=new PendingRecieveFileTransfer(event);synchronized (pendingReceiveTransfers) {    pendingReceiveTransfers.put(pendingTransfer,countdown);  }  if (event.isPassive())   bot.sendDCC().filePassiveResumeRequest(event.getUser().getNick(),event.getRawFilename(),startPosition,event.getToken()); else   bot.sendDCC().fileResumeRequest(event.getUser().getNick(),event.getRawFilename(),event.getPort(),startPosition);  if (!countdown.await(bot.getConfiguration().getDccResumeAcceptTimeout(),TimeUnit.MILLISECONDS))   throw new DccException(DccException.Reason.FileTransferResumeTimeout,event.getUser(),"Event: " + event);  if (shuttingDown)   throw new DccException(DccException.Reason.FileTransferResumeCancelled,event.getUser(),"Transfer " + event + " canceled due to bot shutting down");  if (pendingTransfer.getPosition() != startPosition)   log.warn("User is resuming transfer at position {} instead of requested position {} for transfer {}. Defaulting to users position",pendingTransfer.getPosition(),startPosition,event);  return acceptFileTransfer(event,destination,pendingTransfer.getPosition());}  }
class C{  private int g(int k,int w){  int g1, g2, g3, g4, g5, g6;  g1=(w >> 8) & 0xff;  g2=w & 0xff;  g3=ftable[g2 ^ key0[k]] ^ g1;  g4=ftable[g3 ^ key1[k]] ^ g2;  g5=ftable[g4 ^ key2[k]] ^ g3;  g6=ftable[g5 ^ key3[k]] ^ g4;  return ((g5 << 8) + g6);}  }
class C{  public void onConfiguration(ContactsOps.View view,boolean firstTimeIn){  super.onConfiguration(view,firstTimeIn);  if (firstTimeIn) {    initializeCommands();    unregisterContentObserver();    registerContentObserver();  } else   if (mCursor != null)   displayCursor(mCursor);}  }
class C{  public static void removeGlideProgressListener(ProgressListener listener){  if (listener != null) {    WeakReference<ProgressListener> founded=findGlideProgressListener(listener);    if (founded != null) {      glideProgressListeners.remove(founded);      Log.d(GlideProgressListener.class.getSimpleName(),"Glide download listener remove");    }  }}  }
class C{  private boolean teleportToSpouse(final Player player){  if (!player.isZoneChangeAllowed()) {    player.sendPrivateText("You were told to watch your pet, weren't you?");    return false;  }  final String spouseName=getInfoString();  if (spouseName == null) {    player.sendPrivateText("This wedding ring hasn't been engraved yet.");    logger.debug(player.getName() + "tried to use a wedding ring without a spouse name engraving.");    return false;  }  final Player spouse=SingletonRepository.getRuleProcessor().getPlayer(spouseName);  if (spouse == null) {    player.sendPrivateText(spouseName + " is not online.");    return false;  }  if (spouse.isEquipped("wedding ring")) {    final Item weddingRing=spouse.getFirstEquipped("wedding ring");    if (weddingRing.getInfoString() == null) {      player.sendPrivateText("Sorry, " + spouseName + " has divorced you and is now engaged to someone else.");      return false;    } else     if (!(weddingRing.getInfoString().equals(player.getName()))) {      player.sendPrivateText("Sorry, " + spouseName + " has divorced you and is now remarried.");      return false;    }  } else {    player.sendPrivateText(spouseName + " is not wearing the wedding ring.");    return false;  }  final int secondsNeeded=getLastUsed() + getCoolingPeriod(player,spouse) - (int)(System.currentTimeMillis() / 1000);  if (secondsNeeded > 0) {    player.sendPrivateText("The ring has not yet regained its power. You think it might be ready in " + TimeUtil.approxTimeUntil(secondsNeeded) + ".");    return false;  }  final StendhalRPZone sourceZone=player.getZone();  if (!sourceZone.isTeleportOutAllowed(player.getX(),player.getY())) {    player.sendPrivateText("The strong anti magic aura in this area prevents the wedding ring from working!");    return false;  }  final StendhalRPZone destinationZone=spouse.getZone();  final int x=spouse.getX();  final int y=spouse.getY();  if (!destinationZone.isTeleportInAllowed(x,y)) {    player.sendPrivateText("The strong anti magic aura in the destination area prevents the wedding ring from working!");    return false;  }  final String zoneName=destinationZone.getName();  if (player.getKeyedSlot("!visited",zoneName) == null) {    player.sendPrivateText("Although you have heard a lot of rumors about the destination, " + "you cannot join " + spouseName + " there because it is still an unknown place for you.");    return false;  }  final Direction dir=spouse.getDirection();  if (player.teleport(destinationZone,x,y,dir,player)) {    TeleportNotifier.get().notify(player,true);    storeLastUsed();    return true;  }  return false;}  }
class C{  public Matrix4d sub(Matrix4dc subtrahend){  return sub(subtrahend,this);}  }
class C{  public String serialize(Object obj) throws ApiException {  try {    if (obj != null)     return JsonUtil.getJsonMapper().writeValueAsString(obj); else     return null;  } catch (  Exception e) {    throw new ApiException(500,e.getMessage());  }}  }
class C{  public void dispose(){  disposeLock.lock();  try {    String suffix=getGraphTitleSuffix(this);    Shell[] shells=UIHelper.getCurrentDisplay().getShells();    for (int i=0; i < shells.length; i++) {      if (shells[i].getText().endsWith(suffix)) {        shells[i].dispose();      }    }    if (incompleteStateExploration != null) {      incompleteStateExploration.delete();      incompleteStateExploration=null;    }    JFaceResources.getFontRegistry().removeListener(fontChangeListener);    TLCModelLaunchDataProvider provider=TLCOutputSourceRegistry.getModelCheckSourceRegistry().getProvider(getModel());    if (provider != null) {      provider.setPresenter(null);    }    super.dispose();  } catch (  CoreException e) {    e.printStackTrace();  } finally {    disposeLock.unlock();  }}  }
class C{  public boolean isEmpty(){  if (matrix == null) {    return true;  }  for (  Assignment a : matrix.keySet()) {    if (!a.isEmpty()) {      return false;    }  }  return true;}  }
class C{  protected String parseMovesMessage(String inboundMessage,List<ChatEvent> events){  MovesMessage movesMessage=movesParser.parse(inboundMessage);  if (movesMessage != null) {    process(movesMessage,connector.getGameService());    events.add(new ChatEvent(null,ChatType.MOVES,inboundMessage));    return null;  } else {    return inboundMessage;  }}  }
class C{  private static float[] HSLtoRGB(float[] hsl,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  float hue=hsl[0];  float saturation=hsl[1];  float lightness=hsl[2];  if (saturation > 0.0f) {    hue=(hue < 1.0f) ? hue * 6.0f : 0.0f;    float q=lightness + saturation * ((lightness > 0.5f) ? 1.0f - lightness : lightness);    float p=2.0f * lightness - q;    rgb[0]=normalize(q,p,(hue < 4.0f) ? (hue + 2.0f) : (hue - 4.0f));    rgb[1]=normalize(q,p,hue);    rgb[2]=normalize(q,p,(hue < 2.0f) ? (hue + 4.0f) : (hue - 2.0f));  } else {    rgb[0]=lightness;    rgb[1]=lightness;    rgb[2]=lightness;  }  return rgb;}  }
class C{  @Ignore @Test public void testValidate(){  System.out.println("validate");  Path goodFile=Paths.get("test","data","diff_delim","sim_data_20vars_100cases.csv");  Path badFile=Paths.get("test","data","missing_var_name_and_value","sim_data_20vars_100cases.csv");  char delimiter=',';  DataValidation dataValidation=new TabularContinuousData(badFile,delimiter);  Assert.assertTrue(!dataValidation.validate(System.err,false));  dataValidation=new TabularContinuousData(goodFile,delimiter);  Assert.assertTrue(dataValidation.validate(System.err,false));}  }
class C{  public static final char toLowerCase(char ch){  if (ch >= 'A' && ch <= 'Z')   return (char)(ch | 0x20);  return ch;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public WampRouterBuilder addRealm(String realmName,WampRoles[] roles,boolean useStrictUriValidation) throws ApplicationError {  if (realmName == null || roles == null)   throw new ApplicationError(ApplicationError.INVALID_REALM);  if (!UriValidator.tryValidate(realmName,useStrictUriValidation) || this.realms.containsKey(realmName))   throw new ApplicationError(ApplicationError.INVALID_REALM);  Set<WampRoles> roleSet=new HashSet<WampRoles>();  for (  WampRoles r : roles) {    if (r == null)     throw new ApplicationError(ApplicationError.INVALID_REALM);    roleSet.add(r);  }  if (roleSet.size() == 0)   throw new ApplicationError(ApplicationError.INVALID_REALM);  RealmConfig realmConfig=new RealmConfig(roleSet,useStrictUriValidation);  this.realms.put(realmName,realmConfig);  return this;}  }
class C{  public static void write(Path self,String text,boolean writeBom) throws IOException {  write(self,text,Charset.defaultCharset().name(),writeBom);}  }
class C{  private void onWaypointStart(){  name=null;  description=null;  category=null;  photoUrl=null;  latitude=null;  longitude=null;  altitude=null;  time=null;  waypointType=null;}  }
class C{  private void checkField(final boolean invalid,final String failLabel,final String fieldLabel) throws RequestProcessAdviceException {  if (invalid) {    throw new RequestProcessAdviceException(new JSONObject().put(Keys.MSG,langPropsService.get(failLabel) + " - " + langPropsService.get(fieldLabel)));  }}  }
class C{  public static boolean isAssignable(Type lhsType,Type rhsType){  Assert.notNull(lhsType,"Left-hand side type must not be null");  Assert.notNull(rhsType,"Right-hand side type must not be null");  if (lhsType.equals(rhsType) || lhsType.equals(Object.class)) {    return true;  }  if (lhsType instanceof Class<?>) {    Class<?> lhsClass=(Class<?>)lhsType;    if (rhsType instanceof Class<?>) {      return ClassUtils.isAssignable(lhsClass,(Class<?>)rhsType);    }    if (rhsType instanceof ParameterizedType) {      Type rhsRaw=((ParameterizedType)rhsType).getRawType();      if (rhsRaw instanceof Class<?>) {        return ClassUtils.isAssignable(lhsClass,(Class<?>)rhsRaw);      }    } else     if (lhsClass.isArray() && rhsType instanceof GenericArrayType) {      Type rhsComponent=((GenericArrayType)rhsType).getGenericComponentType();      return isAssignable(lhsClass.getComponentType(),rhsComponent);    }  }  if (lhsType instanceof ParameterizedType) {    if (rhsType instanceof Class<?>) {      Type lhsRaw=((ParameterizedType)lhsType).getRawType();      if (lhsRaw instanceof Class<?>) {        return ClassUtils.isAssignable((Class<?>)lhsRaw,(Class<?>)rhsType);      }    } else     if (rhsType instanceof ParameterizedType) {      return isAssignable((ParameterizedType)lhsType,(ParameterizedType)rhsType);    }  }  if (lhsType instanceof GenericArrayType) {    Type lhsComponent=((GenericArrayType)lhsType).getGenericComponentType();    if (rhsType instanceof Class<?>) {      Class<?> rhsClass=(Class<?>)rhsType;      if (rhsClass.isArray()) {        return isAssignable(lhsComponent,rhsClass.getComponentType());      }    } else     if (rhsType instanceof GenericArrayType) {      Type rhsComponent=((GenericArrayType)rhsType).getGenericComponentType();      return isAssignable(lhsComponent,rhsComponent);    }  }  if (lhsType instanceof WildcardType) {    return isAssignable((WildcardType)lhsType,rhsType);  }  return false;}  }
class C{  @Override public double classifyInstance(Instance inst) throws Exception {  if (m_attribute == null) {    return m_intercept;  } else {    if (inst.isMissing(m_attributeIndex)) {      return m_classMeanForMissing;    }    return m_intercept + m_slope * inst.value(m_attributeIndex);  }}  }
class C{  public static DimensionConstrain createRelativeDimension(final float fraction){  return createRelativeDimension(fraction,fraction);}  }
class C{  public boolean hasErrors(){  if (errors.size() > 0) {    return true;  } else {    return false;  }}  }
class C{  private void transmit(RtcpCompoundPacket packet){  byte[] data=packet.data;  if (packet.offset > 0) {    System.arraycopy(data,packet.offset,data=new byte[packet.length],0,packet.length);  }  stats.numBytes+=packet.length;  stats.numPackets++;  rtcpSession.updateavgrtcpsize(packet.length);  rtcpSession.timeOfLastRTCPSent=rtcpSession.currentTime();  try {    datagramConnection.send(remoteAddress,remotePort,data);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public Type NULL(){  return nullType;}  }
class C{  public CombatSupportArea(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  public static String convertFileName(String name,int maxBytes){  try {    return convertFileName(name,maxBytes,Charset.defaultCharset());  } catch (  CharacterCodingException cce) {    try {      return convertFileName(name,maxBytes,Charset.forName("UTF-8"));    } catch (    CharacterCodingException e) {      throw new RuntimeException("UTF-8 should have encoded: " + name,e);    }  }}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T extends Serializable>T serDeser(final T orgig){  try {    final ByteArrayOutputStream byteOS=new ByteArrayOutputStream();    new ObjectOutputStream(byteOS).writeObject(orgig);    return (T)new ObjectInputStream(new ByteArrayInputStream(byteOS.toByteArray())).readObject();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void removeRequestListener(RequestListener listener){  this.eventDispatcher.removeRequestListener(listener);}  }
class C{  public HttpErrorResponseException(int statusCode,String statusDescription,String responseMessage){  super();  this.statusCode=statusCode;  this.statusDescription=statusDescription;  this.responseMessage=responseMessage;}  }
class C{  public Boolean isBlckgScties(){  return blckgScties;}  }
class C{  private DataPoint isUnique(Node from,DataPoint point,double tolerance){  if (logger.isDebugEnabled())   logger.debug("is unique? tolerance " + tolerance + " - "+ point);  while (from.type == Type.branch) {    Branch branch=(Branch)from;    double d=point.get(branch.splitDimension);    if (Math.abs(d - branch.midPoint) < tolerance) {      if (logger.isDebugEnabled())       logger.debug("at branch : " + branch + " - recursing both paths");      DataPoint leftCheck=isUnique(branch.left,point,tolerance);      DataPoint rightCheck=isUnique(branch.right,point,tolerance);      if ((leftCheck == null) && (rightCheck == null)) {        return null;      } else {        if (leftCheck != null) {          return leftCheck;        } else {          return rightCheck;        }      }    } else     if (point.getVector()[branch.splitDimension] < branch.midPoint) {      if (logger.isDebugEnabled())       logger.debug("at branch : " + branch + " - going left");      from=branch.left;    } else {      if (logger.isDebugEnabled())       logger.debug("at branch : " + branch + " - going right");      from=branch.right;    }  }  Leaf leaf=(Leaf)from;  for (  DataPoint p : leaf.points) {    for (int i=0; i < p.getDimension(); i++) {      if (Math.abs(p.get(i) - point.get(i)) >= tolerance) {        break;      }    }    if (getDistance(p,point) < tolerance) {      return p;    }  }  return null;}  }
class C{  @Override public void onUpdateComplete(int taskId,Object cookie,int updateCount){}  }
class C{  public boolean fastContains(double p){  if (isInverted()) {    return (p >= lo() || p <= hi()) && !isEmpty();  } else {    return p >= lo() && p <= hi();  }}  }
class C{  public void testGetRandomCoordInZoneBoundingBox(){  final double minX=0.0;  final double minY=0.0;  final double maxX=9.0;  final double maxY=18.0;  final int[] areaCounters=new int[9];  final World world=new World();  ZoneLayer layer=(ZoneLayer)world.createLayer(Id.create("zones",Layer.class));  Zone zone=layer.createZone(Id.create("1",Zone.class),"4.5","9","0","0","9","18");  layer.createZone(Id.create("2",Zone.class),"30","15","9","0","51","30");  for (int i=0; i < 900; i++) {    Coord c=WorldUtils.getRandomCoordInZone(zone,layer);    assertTrue("Coordinate is out of bounds: x = " + c.getX(),c.getX() >= minX);    assertTrue("Coordinate is out of bounds: x = " + c.getX(),c.getX() <= maxX);    assertTrue("Coordinate is out of bounds: y = " + c.getY(),c.getY() >= minY);    assertTrue("Coordinate is out of bounds: y = " + c.getY(),c.getY() <= maxY);    int areaIndex=((int)c.getX()) / ((int)((maxX - minX) / 3.0)) * 3 + ((int)c.getY()) / ((int)((maxY - minY) / 3.0));    areaCounters[areaIndex]++;  }  for (int i=0; i < areaCounters.length; i++) {    int count=areaCounters[i];    assertTrue("random coordinates seem not to be equally distributed, as area " + i + " has only "+ count+ " points in it.",count > 90);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.849 -0500",hash_original_method="0A1F69177689475EC5D7889C7292052F",hash_generated_method="0A1F69177689475EC5D7889C7292052F") void onShutdown(){}  }
class C{  public long pid(){  return this.pid;}  }
class C{  public <S extends Serializable,T>DataStream<T> aggregate(GraphAggregation<K,EV,S,T> graphAggregation){  return graphAggregation.run(getEdges());}  }
class C{  public double optimize(UnivariateFunction f,double tol,double lowerBound,double upperBound){  numFun=2;  return minin(lowerBound,upperBound,f.evaluate(lowerBound),f.evaluate(upperBound),f,tol);}  }
class C{  public Workflow.Method zoneExportAddVolumesMethod(URI exportGroupURI,List<URI> exportMaskURIs,Collection<URI> volumeURIs){  return new Workflow.Method("zoneExportAddVolumes",exportGroupURI,exportMaskURIs,volumeURIs);}  }
class C{  public InstanceQuery() throws RemoteException, NotBoundException {  Registry registry=LocateRegistry.getRegistry();  m_appstub=(AppMessage)registry.lookup("AppMessage");}  }
class C{  List<Field> ownFields(){  return ownFields;}  }
class C{  public MyGraph(int[][] edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  public void addFormulaList(List<String[]> elements,String keyword,String attributeName){  if (elements.isEmpty()) {    return;  }  cfgBuffer.append(COMMENT).append(keyword + " definition").append(CR);  cfgBuffer.append(keyword).append(CR);  for (int i=0; i < elements.size(); i++) {    String[] element=elements.get(i);    cfgBuffer.append(element[0]).append(CR);    if (!element[1].equals(EMPTY_STRING)) {      tlaBuffer.append(COMMENT).append(keyword + " definition ").append(ATTRIBUTE).append(attributeName).append(INDEX).append(i).append(CR);      tlaBuffer.append(element[1]).append(CR).append(SEP).append(CR);    }  }}  }
class C{  public SmellSourcePanel(final SmellSource source){  smellSource=source;  final Dimension initDim=new Dimension(100,125);  valArray=smellSource.getStimulusVector();  stimulusVals=new JTextField[valArray.length];  stimulusPanel.setLayout(new GridBagLayout());  con.fill=GridBagConstraints.HORIZONTAL;  stimScroller.setPreferredSize(initDim);  final int initCol=5;  tfStimulusNum.setColumns(initCol);  addStimulusPanel.add(tfStimulusNum);  addStimulusPanel.add(stimulusButton);  final int initTFCol=3;  tfRandomUpper.setColumns(initTFCol);  tfRandomLower.setColumns(initTFCol);  randomSubPanelUpper.setLayout(new FlowLayout());  randomSubPanelUpper.add(lowerLabel);  randomSubPanelUpper.add(tfRandomLower);  randomSubPanelUpper.add(upperLabel);  randomSubPanelUpper.add(tfRandomUpper);  randomSubPanelLower.setLayout(new FlowLayout());  randomSubPanelLower.add(randomizeButton);  randomMainPanel.setLayout(new BorderLayout());  randomMainPanel.add(randomSubPanelUpper,BorderLayout.NORTH);  randomMainPanel.add(randomSubPanelLower,BorderLayout.SOUTH);  final int majorTickSpacing=25;  jsNoiseLevel.setMajorTickSpacing(majorTickSpacing);  jsNoiseLevel.setPaintTicks(true);  jsNoiseLevel.setPaintLabels(true);  rbAddNoise.addActionListener(this);  stimulusButton.setActionCommand("addStimulus");  stimulusButton.addActionListener(this);  randomizeButton.setActionCommand("randomize");  randomizeButton.addActionListener(this);  fillFieldValues();  this.add(tabbedPane);  dispersionPanel.addItem("Decay function",cbDecayFunction);  dispersionPanel.addItem("Dispersion",tfDispersion);  tfPeak.setToolTipText("How far (in pixels) the smell disperses.");  dispersionPanel.addItem("Peak distance",tfPeak);  tfPeak.setToolTipText("Distance at which smell has peak value.");  dispersionPanel.addItem("Add noise",rbAddNoise);  dispersionPanel.addItem("Noise level",jsNoiseLevel);  valuesPanel.addItem("Stimulus dimensions",addStimulusPanel);  valuesPanel.addItem("Stimulus values",stimScroller);  valuesPanel.addItem("Randomize stimulus",randomMainPanel);  tabbedPane.addTab("Stimulus Values",valuesPanel);  tabbedPane.addTab("Stimulus Dispersion",dispersionPanel);}  }
class C{  public static String createLibraryFileName(String libraryName){  String libPrefix=createLibraryPrefix();  String libExtension=createLibraryExtension();  String fullName=libPrefix + libraryName + "."+ libExtension;  return fullName;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(EPG.getInstance().getLastRun());}  }
class C{  public HttpClient(String url,Map<String,Object> parameters,Map<String,String> headers){  this.url=url;  this.parameters=parameters;  this.headers=headers;}  }
class C{  public void parseExpression(String expression_in){  Reader reader=new StringReader(expression=expression_in);  ExpressionCompiler compiler=null;  Parser parser=getParserFromPool();  try {    errorList=sage.Pooler.getPooledVector();    Node topNode=parser.parseStream(reader,this);    compiler=getECFromPool();    fastNodes=compiler.compile(topNode);    if (fastNodes != null && fastNodes.length == 1) {      if (fastNodes[0].type == CommandElement.CONST) {        fastResultSet=true;        fastResult=fastNodes[0].value;      } else       if (fastNodes[0].type == CommandElement.VAR) {        fastVarLookup=fastNodes[0].varName;      }    }  } catch (  Throwable e) {    if (e instanceof ParseException) {      errorList.addElement(((ParseException)e).getErrorInfo());    } else {      errorList.addElement("Syntax error");    }  }  returnParserToPool(parser);  if (compiler != null)   returnECToPool(compiler);}  }
class C{  public ImmutableOpenMap<KType,VType> build(){  ObjectObjectHashMap<KType,VType> map=this.map;  this.map=null;  return new ImmutableOpenMap<>(map);}  }
class C{  public SimpleDateFormatEditor(){  m_propSupport=new PropertyChangeSupport(this);  m_customEditor=new CustomEditor();}  }
class C{  private byte skipEntityBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '&') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == ';') {      break;    }  }  charIndex=initialCharIndex;  lastChar=';';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public byte[] toByteArray(){  return mFileDescSet.toByteArray();}  }
class C{  public Packet nextResult(){  try {    return resultQueue.take();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public BlockSwapper(World world,EntityPlayer player,ItemStack truncator,BlockPos origCoords,int range,boolean leaves){  this.world=world;  this.player=player;  this.truncator=truncator;  this.origin=origCoords;  this.range=range;  this.treatLeavesSpecial=leaves;  this.candidateQueue=new PriorityQueue<>();  this.completedCoords=new HashSet<>();  candidateQueue.offer(new SwapCandidate(this.origin,this.range));}  }
class C{  public static Iterable<Registrar> loadAll(){  return ofy().load().type(Registrar.class).ancestor(getCrossTldKey());}  }
class C{  public void add(DimensionalNode dn){  if (inProgress) {    throw new ConcurrentModificationException("Can't add point while iterator in progress");  }  nodes.add(dn);}  }
class C{  @Override public boolean add(E e){  return addLastImpl(e);}  }
class C{  private void closeDialog(){  m_table.removeMouseListener(m_listener);  setVisible(false);  dispose();}  }
class C{  public boolean isFinished(){  return (successMarks.get() + failedMarks.get()) == completeMarks;}  }
class C{  private boolean evaluateQuery(CqQueryImpl cQuery,Object[] event) throws Exception {  ExecutionContext execContext=cQuery.getQueryExecutionContext();  execContext.reset();  execContext.setBindArguments(event);  boolean status=false;  if (execContext.getScopeNum() <= 0) {    SelectResults results=(SelectResults)((DefaultQuery)cQuery.getQuery()).executeUsingContext(execContext);    if (results != null && results.size() > 0) {      status=true;    }  } else {    CompiledSelect cs=((DefaultQuery)(cQuery.getQuery())).getSelect();    status=cs.evaluateCq(execContext);  }  return status;}  }
class C{  @Override public AgentAppController createController(){  return new MapColoringController();}  }
class C{  public WebElement findElement(String locator){  return findElement(byFromLocator(locator));}  }
class C{  public static String escape(String s){  return JSONValue.escape(s);}  }
class C{  public Array(final Array array){  this(array,EnumSet.noneOf(Address.Flags.class));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.875 -0500",hash_original_method="84733F87EF08EE029ED9292B40928CC1",hash_generated_method="F0F3281614602C65EE2A4BACD0B9E7C9") @Override public boolean equals(Object object){  return super.equals(object);}  }
class C{  @Action(value="/receipts/challan-save") @ValidationErrorPage(value=NEW) public String save(){  if (!actionName.equals(CollectionConstants.WF_ACTION_NAME_REJECT_CHALLAN))   if (getPositionUser() == null || getPositionUser() == -1)   position=collectionsUtil.getPositionOfUser(collectionsUtil.getLoggedInUser()); else   position=collectionsUtil.getPositionById(positionUser);  if (actionName.equals(CollectionConstants.WF_ACTION_NAME_NEW_CHALLAN) || actionName.equals(CollectionConstants.WF_ACTION_NAME_MODIFY_CHALLAN) || actionName.equals(CollectionConstants.WF_ACTION_NAME_VALIDATE_CHALLAN))   return saveChallan(); else   challanService.workflowtransition(receiptHeader.getChallan(),position,actionName,approvalRemarks);  if (receiptHeader.getChallan().getState() != null && receiptHeader.getChallan().getState().getOwnerPosition() != null)   approverName=collectionsUtil.getApproverName(receiptHeader.getChallan().getState().getOwnerPosition());  return SUCCESS;}  }
class C{  @Override public void reset() throws IOException {  lemmaListIndex=0;  lemmaList=Collections.emptyList();  tagsList.clear();  super.reset();}  }
class C{  public boolean hasCurrencyCode(){  return getCurrencyCode() != null;}  }
class C{  public static ConstantSize dluX(int value){  return ConstantSize.dluX(value);}  }
class C{  public boolean isSelfSigned(){  return selfSigned;}  }
class C{  public T caseNullLiteral(NullLiteral object){  return null;}  }
class C{  public static void doSetup(){  new TypeExpressionsStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  JPEGMetadata(ImageTypeSpecifier imageType,ImageWriteParam param,JPEGImageWriter writer){  this(false,false);  boolean wantJFIF=true;  boolean wantAdobe=false;  int transform=JPEG.ADOBE_UNKNOWN;  boolean willSubsample=true;  boolean wantICC=false;  boolean wantProg=false;  boolean wantOptimized=false;  boolean wantExtended=false;  boolean wantQTables=true;  boolean wantHTables=true;  float quality=JPEG.DEFAULT_QUALITY;  byte[] componentIDs={1,2,3,4};  int numComponents=0;  ImageTypeSpecifier destType=null;  if (param != null) {    destType=param.getDestinationType();    if (destType != null) {      if (imageType != null) {        writer.warningOccurred(JPEGImageWriter.WARNING_DEST_IGNORED);        destType=null;      }    }    if (param.canWriteProgressive()) {      if (param.getProgressiveMode() == ImageWriteParam.MODE_DEFAULT) {        wantProg=true;        wantOptimized=true;        wantHTables=false;      }    }    if (param instanceof JPEGImageWriteParam) {      JPEGImageWriteParam jparam=(JPEGImageWriteParam)param;      if (jparam.areTablesSet()) {        wantQTables=false;        wantHTables=false;        if ((jparam.getDCHuffmanTables().length > 2) || (jparam.getACHuffmanTables().length > 2)) {          wantExtended=true;        }      }      if (!wantProg) {        wantOptimized=jparam.getOptimizeHuffmanTables();        if (wantOptimized) {          wantHTables=false;        }      }    }    if (param.canWriteCompressed()) {      if (param.getCompressionMode() == ImageWriteParam.MODE_EXPLICIT) {        quality=param.getCompressionQuality();      }    }  }  ColorSpace cs=null;  if (destType != null) {    ColorModel cm=destType.getColorModel();    numComponents=cm.getNumComponents();    boolean hasExtraComponents=(cm.getNumColorComponents() != numComponents);    boolean hasAlpha=cm.hasAlpha();    cs=cm.getColorSpace();    int type=cs.getType();switch (type) {case ColorSpace.TYPE_GRAY:      willSubsample=false;    if (hasExtraComponents) {      wantJFIF=false;    }  break;case ColorSpace.TYPE_3CLR:if (cs == JPEG.JCS.getYCC()) {  wantJFIF=false;  componentIDs[0]=(byte)'Y';  componentIDs[1]=(byte)'C';  componentIDs[2]=(byte)'c';  if (hasAlpha) {    componentIDs[3]=(byte)'A';  }}break;case ColorSpace.TYPE_YCbCr:if (hasExtraComponents) {wantJFIF=false;if (!hasAlpha) {wantAdobe=true;transform=JPEG.ADOBE_YCCK;}}break;case ColorSpace.TYPE_RGB:wantJFIF=false;wantAdobe=true;willSubsample=false;componentIDs[0]=(byte)'R';componentIDs[1]=(byte)'G';componentIDs[2]=(byte)'B';if (hasAlpha) {componentIDs[3]=(byte)'A';}break;default :wantJFIF=false;willSubsample=false;}} else if (imageType != null) {ColorModel cm=imageType.getColorModel();numComponents=cm.getNumComponents();boolean hasExtraComponents=(cm.getNumColorComponents() != numComponents);boolean hasAlpha=cm.hasAlpha();cs=cm.getColorSpace();int type=cs.getType();switch (type) {case ColorSpace.TYPE_GRAY:willSubsample=false;if (hasExtraComponents) {wantJFIF=false;}break;case ColorSpace.TYPE_RGB:if (hasAlpha) {wantJFIF=false;}break;case ColorSpace.TYPE_3CLR:wantJFIF=false;willSubsample=false;if (cs.equals(ColorSpace.getInstance(ColorSpace.CS_PYCC))) {willSubsample=true;wantAdobe=true;componentIDs[0]=(byte)'Y';componentIDs[1]=(byte)'C';componentIDs[2]=(byte)'c';if (hasAlpha) {componentIDs[3]=(byte)'A';}}break;case ColorSpace.TYPE_YCbCr:if (hasExtraComponents) {wantJFIF=false;if (!hasAlpha) {wantAdobe=true;transform=JPEG.ADOBE_YCCK;}}break;case ColorSpace.TYPE_CMYK:wantJFIF=false;wantAdobe=true;transform=JPEG.ADOBE_YCCK;break;default :wantJFIF=false;willSubsample=false;}}if (wantJFIF && JPEG.isNonStandardICC(cs)) {wantICC=true;}if (wantJFIF) {JFIFMarkerSegment jfif=new JFIFMarkerSegment();markerSequence.add(jfif);if (wantICC) {try {jfif.addICC((ICC_ColorSpace)cs);} catch (IOException e) {}}}if (wantAdobe) {markerSequence.add(new AdobeMarkerSegment(transform));}if (wantQTables) {markerSequence.add(new DQTMarkerSegment(quality,willSubsample));}if (wantHTables) {markerSequence.add(new DHTMarkerSegment(willSubsample));}markerSequence.add(new SOFMarkerSegment(wantProg,wantExtended,willSubsample,componentIDs,numComponents));if (!wantProg) {markerSequence.add(new SOSMarkerSegment(willSubsample,componentIDs,numComponents));}if (!isConsistent()) {throw new InternalError("Default image metadata is inconsistent");}}  }
class C{  public static Element I8(RenderScript rs){  if (rs.mElement_I8 == null) {    rs.mElement_I8=createUser(rs,DataType.SIGNED_8);  }  return rs.mElement_I8;}  }
class C{  @Override public void positionChanged(final double x,final double y){  for (  final PositionChangeListener l : listeners) {    l.positionChanged(x,y);  }}  }
class C{  public void addEntry(double start,int from,int via,int to,double duration){  List<ScheduleEntry> list=schedules.get(from);  if (list == null) {    list=new ArrayList<ScheduleEntry>();    schedules.put(from,list);  }  list.add(new ScheduleEntry(start,from,via,to,duration));}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public boolean contains(String key){  String s=null;  for (int i=0; null != (s=this.getKey(i)); i++) {    if (0 == key.compareToIgnoreCase(s))     return true;  }  return false;}  }
class C{  @Override public Object allocateConnection(final ManagedConnectionFactory mcf,final ConnectionRequestInfo cxRequestInfo) throws ResourceException {  if (ActiveMQRAConnectionManager.trace) {    ActiveMQRALogger.LOGGER.trace("allocateConnection(" + mcf + ", "+ cxRequestInfo+ ")");  }  ManagedConnection mc=mcf.createManagedConnection(null,cxRequestInfo);  Object c=mc.getConnection(null,cxRequestInfo);  if (ActiveMQRAConnectionManager.trace) {    ActiveMQRALogger.LOGGER.trace("Allocated connection: " + c + ", with managed connection: "+ mc);  }  connections.add(mc);  return c;}  }
class C{  private static int indexOfNextChar(int startingPosition,int stopPosition,String searchIn,String openingMarkers,String closingMarkers,Set<SearchMode> searchMode){  if (searchIn == null) {    return -1;  }  int searchInLength=searchIn.length();  if (startingPosition >= searchInLength) {    return -1;  }  char c0=Character.MIN_VALUE;  char c1=searchIn.charAt(startingPosition);  char c2=startingPosition + 1 < searchInLength ? searchIn.charAt(startingPosition + 1) : Character.MIN_VALUE;  for (int i=startingPosition; i <= stopPosition; i++) {    c0=c1;    c1=c2;    c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;    boolean dashDashCommentImmediateEnd=false;    int markerIndex=-1;    if (searchMode.contains(SearchMode.ALLOW_BACKSLASH_ESCAPE) && c0 == '\\') {      i++;      c1=c2;      c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;    } else     if (searchMode.contains(SearchMode.SKIP_BETWEEN_MARKERS) && (markerIndex=openingMarkers.indexOf(c0)) != -1) {      int nestedMarkersCount=0;      char openingMarker=c0;      char closingMarker=closingMarkers.charAt(markerIndex);      while (++i <= stopPosition && ((c0=searchIn.charAt(i)) != closingMarker || nestedMarkersCount != 0)) {        if (c0 == openingMarker) {          nestedMarkersCount++;        } else         if (c0 == closingMarker) {          nestedMarkersCount--;        } else         if (searchMode.contains(SearchMode.ALLOW_BACKSLASH_ESCAPE) && c0 == '\\') {          i++;        }      }      c1=i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE;      c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;    } else     if (searchMode.contains(SearchMode.SKIP_BLOCK_COMMENTS) && c0 == '/' && c1 == '*') {      if (c2 != '!') {        i++;        while (++i <= stopPosition && (searchIn.charAt(i) != '*' || (i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE) != '/')) {        }        i++;      } else {        i++;        i++;        int j=1;        for (; j <= NON_COMMENTS_MYSQL_VERSION_REF_LENGTH; j++) {          if (i + j >= searchInLength || !Character.isDigit(searchIn.charAt(i + j))) {            break;          }        }        if (j == NON_COMMENTS_MYSQL_VERSION_REF_LENGTH) {          i+=NON_COMMENTS_MYSQL_VERSION_REF_LENGTH;        }      }      c1=i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE;      c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;    } else     if (searchMode.contains(SearchMode.SKIP_BLOCK_COMMENTS) && c0 == '*' && c1 == '/') {      i++;      c1=c2;      c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;    } else     if (searchMode.contains(SearchMode.SKIP_LINE_COMMENTS) && ((c0 == '-' && c1 == '-' && (Character.isWhitespace(c2) || (dashDashCommentImmediateEnd=c2 == ';') || c2 == Character.MIN_VALUE)) || c0 == '#')) {      if (dashDashCommentImmediateEnd) {        i++;        i++;        c1=i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE;        c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;      } else {        while (++i <= stopPosition && (c0=searchIn.charAt(i)) != '\n' && c0 != '\r') {        }        c1=i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE;        if (c0 == '\r' && c1 == '\n') {          i++;          c1=i + 1 < searchInLength ? searchIn.charAt(i + 1) : Character.MIN_VALUE;        }        c2=i + 2 < searchInLength ? searchIn.charAt(i + 2) : Character.MIN_VALUE;      }    } else     if (!searchMode.contains(SearchMode.SKIP_WHITE_SPACE) || !Character.isWhitespace(c0)) {      return i;    }  }  return -1;}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  public String decodeRequestString(HttpServletRequest request,String source){  if (conf.isDecodeUsingEncodingHeader()) {    String enc=request.getCharacterEncoding();    if (enc != null) {      try {        return URLDecoder.decodeURL(source,enc);      } catch (      URISyntaxException ex) {        if (log.isWarnEnabled()) {          log.warn("Could not decode: " + source + " (header encoding: '"+ enc+ "'); exception: "+ ex.getMessage());        }      }    }  }  if (conf.isDecodeUsingCustomCharsetRequired()) {    String enc=conf.getDecodeUsing();    if (enc != null) {      try {        return URLDecoder.decodeURL(source,enc);      } catch (      URISyntaxException ex) {        if (log.isWarnEnabled()) {          log.warn("Could not decode: " + source + " (encoding: '"+ enc+ "') using default encoding; exception: "+ ex.getMessage());        }      }    }  }  return source;}  }
class C{  public TransitionSpecification createTransitionSpecification(){  TransitionSpecificationImpl transitionSpecification=new TransitionSpecificationImpl();  return transitionSpecification;}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.290 -0500",hash_original_method="06014D7BF95F9BC6196F9727E94F85D2",hash_generated_method="E9517494F4BC21001B2B7B8478CB61B4") private int line(){  return line(this.pointer);}  }
class C{  private SolrCore create(CoreDescriptor dcore,boolean publishState,boolean newCollection){  if (isShutDown) {    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE,"Solr has been shutdown.");  }  SolrCore core=null;  try {    MDCLoggingContext.setCore(core);    SolrIdentifierValidator.validateCoreName(dcore.getName());    if (zkSys.getZkController() != null) {      zkSys.getZkController().preRegister(dcore);    }    ConfigSet coreConfig=coreConfigService.getConfig(dcore);    log.info("Creating SolrCore '{}' using configuration from {}",dcore.getName(),coreConfig.getName());    core=new SolrCore(dcore,coreConfig);    if (!isZooKeeperAware() && core.getUpdateHandler().getUpdateLog() != null) {      core.getUpdateHandler().getUpdateLog().recoverFromLog();    }    registerCore(dcore.getName(),core,publishState,newCollection);    return core;  } catch (  Exception e) {    coreInitFailures.put(dcore.getName(),new CoreLoadFailure(dcore,e));    log.error("Error creating core [{}]: {}",dcore.getName(),e.getMessage(),e);    final SolrException solrException=new SolrException(ErrorCode.SERVER_ERROR,"Unable to create core [" + dcore.getName() + "]",e);    if (core != null && !core.isClosed())     IOUtils.closeQuietly(core);    throw solrException;  }catch (  Throwable t) {    SolrException e=new SolrException(ErrorCode.SERVER_ERROR,"JVM Error creating core [" + dcore.getName() + "]: "+ t.getMessage(),t);    log.error("Error creating core [{}]: {}",dcore.getName(),t.getMessage(),t);    coreInitFailures.put(dcore.getName(),new CoreLoadFailure(dcore,e));    if (core != null && !core.isClosed())     IOUtils.closeQuietly(core);    throw t;  } finally {    MDCLoggingContext.clear();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CiphertextHeaders(final byte version,final CiphertextType type,final CryptoAlgorithm cryptoAlgo,final byte[] encryptionContext,final List<KeyBlob> keyBlobs,final ContentType contentType,final int frameSize){  version_=version;  typeVal_=type.getValue();  cryptoAlgoVal_=cryptoAlgo.getValue();  encryptionContext_=encryptionContext.clone();  if (encryptionContext_.length > Constants.UNSIGNED_SHORT_MAX_VAL) {    throw new AwsCryptoException("Size of encryption context exceeds the allowed maximum " + Constants.UNSIGNED_SHORT_MAX_VAL);  }  encryptionContextLen_=encryptionContext.length;  cipherKeyCount_=keyBlobs.size();  cipherKeyBlobs_=new ArrayList<>(keyBlobs);  contentTypeVal_=contentType.getValue();  reservedField_=0;  nonceLen_=cryptoAlgo.getNonceLen();  messageId_=new byte[Constants.MESSAGE_ID_LEN];  RND.nextBytes(messageId_);  frameLength_=frameSize;}  }
class C{  public static String toString(char[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  private void convertToBinary(final Object[] args){  if (args == null)   return;  for (int i=0; i < args.length; i++)   args[i]=ctx.cacheObjects().binary().toBinary(args[i]);}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  m_ReplaceMissingValues.input(inst);  m_ReplaceMissingValues.batchFinished();  inst=m_ReplaceMissingValues.output();  m_NominalToBinary.input(inst);  m_NominalToBinary.batchFinished();  inst=m_NominalToBinary.output();  double output=0, sumSoFar=0;  if (m_K > 0) {    for (int i=0; i <= m_K; i++) {      if (sumSoFar < 0) {        output-=m_Weights[i];      } else {        output+=m_Weights[i];      }      if (m_IsAddition[i]) {        sumSoFar+=innerProduct(m_Train.instance(m_Additions[i]),inst);      } else {        sumSoFar-=innerProduct(m_Train.instance(m_Additions[i]),inst);      }    }  }  double[] result=new double[2];  result[1]=1 / (1 + Math.exp(-output));  result[0]=1 - result[1];  return result;}  }
class C{  public Object remove(int index){  Object old=get(index);  content.remove(index);  modCount++;  return old;}  }
class C{  public final void cancelOperation(int token){  mWorkerThreadHandler.removeMessages(token);}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="start") @ResponseBody public Object startOrScheduleRecording(@RequestParam(value="id",required=true) String id,@RequestParam(value="startDelay",required=false) Long startDelay,@RequestParam(value="recordingDuration",required=false) Long recordingDuration,@RequestParam(value="extractInvocations",required=false,defaultValue="true") Boolean extractInvocations,@RequestParam(value="autoFinalize",required=false,defaultValue="true") Boolean autoFinalize) throws BusinessException {  if (null == getStorageById(id)) {    throw new BusinessException("Start or schedule recording on storage with ID=" + id + " via storage REST service.",StorageErrorCodeEnum.STORAGE_DOES_NOT_EXIST);  }  StorageData storageData=new StorageData();  storageData.setId(id);  RecordingProperties recordingProperties=getRecordingProperties(extractInvocations.booleanValue());  recordingProperties.setAutoFinalize(autoFinalize.booleanValue());  if ((null != startDelay) && (startDelay.longValue() > 0)) {    recordingProperties.setStartDelay(startDelay.longValue());  }  if ((null != recordingDuration) && (recordingDuration.longValue() > 0)) {    recordingProperties.setRecordDuration(recordingDuration.longValue());  }  StorageData recordingStorage=storageService.startOrScheduleRecording(storageData,recordingProperties);  Map<String,Object> resultMap=new HashMap<>();  if (recordingProperties.getStartDelay() > 0) {    resultMap.put("message","Recording scheduled.");  } else {    resultMap.put("message","Recording started.");  }  resultMap.put("recordingStorage",recordingStorage);  return resultMap;}  }
class C{  public SimpleFileStatus(String path,long fileSize,long modificationTime){  this.fileSize=fileSize;  this.modificationTime=modificationTime;  this.path=new Path(path);}  }
class C{  private static boolean isValidPort(int port){  return port >= 0 && port <= 65535;}  }
class C{  private void createObjectMapperInstance(){  try {    Method getInstanceMethod=injectorClassInstance.getClass().getMethod("getInstance",Class.class);    Class objectMapper=deploymentUnitClassLoader.loadClass("com.fasterxml.jackson.databind.ObjectMapper");    objectMapperInstance=getInstanceMethod.invoke(injectorClassInstance,objectMapper);  } catch (  Exception e) {    throw new FluxError(FluxError.ErrorType.runtime,"Error occurred while creating Object Mapper instance for Deployment Unit: " + name,e);  }}  }
class C{  public void text(double x,double y,String s,double degrees){  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,s);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  private void appendTable(StringBuilder sb){  sb.append("\"");  if (options.dbSchema != null) {    sb.append(options.dbSchema);    sb.append("\".\"");  }  sb.append(options.dbObjectName);  sb.append("\"");}  }
class C{  protected SVGOMColorProfileElement(){}  }
class C{  public static void write(float lt,float ln,int w,int h,byte[] bytes,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.BITMAP_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_BITMAP);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(w);  dos.writeInt(h);  dos.writeInt(bytes.length);  dos.write(bytes,0,bytes.length);  properties.write(dos);}  }
class C{  public boolean hasHierarchy(){  return mHierarchy != null;}  }
class C{  @Override public void stop(ShutdownModeAmp mode){  _lifecycle.toDestroy();  _activeService.set(null);  FailSafeHaltThread failSafeThread=_failSafeHaltThread;  if (failSafeThread != null) {    failSafeThread.wake();  }  FailSafeMemoryFreeThread memoryFreeThread=_failSafeMemoryFreeThread;  if (memoryFreeThread != null)   memoryFreeThread.startShutdown();  ShutdownThread shutdownThread=_shutdownThread;  if (shutdownThread != null)   shutdownThread.wake();}  }
class C{  public static boolean hasHoneycombMR1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.722 -0400",hash_original_method="CF250A137F40D9381257D232C0971E16",hash_generated_method="600017799DF7EF285FD0AAC0E01978D7") public void fatal(Object message,Throwable t){}  }
class C{  public static String cleanupEscapedChar(char escapedChar,String toClean){  if (toClean == null || toClean.indexOf(escapedChar) == -1 || toClean.indexOf('\\') == -1) {    return toClean;  }  StringBuilder buf=new StringBuilder(toClean.length());  char[] chars=toClean.toCharArray();  for (int i=0; i < chars.length - 1; ++i) {    if (chars[i] != '\\' || chars[i + 1] != escapedChar) {      buf.append(chars[i]);    }  }  buf.append(chars[chars.length - 1]);  return buf.toString();}  }
class C{  @OptionEquivalent("--exclude-module") public void addExclude(Exclude module){  this.excludeModules.add(module);}  }
class C{  public AsymptoticGrowthModel(String name,Parameter asymptoteValueParameter,Parameter shapeParameter,Type units){  super(name);  flexibleGrowth=new FlexibleGrowth(units);  this.asyptoteValue=asymptoteValueParameter;  addVariable(asymptoteValueParameter);  asymptoteValueParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.shapeParameter=shapeParameter;  addVariable(shapeParameter);  shapeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0,1));  setUnits(units);}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore4.class,args);}  }
class C{  public final boolean isEmbeddedFontsOn(){  return svgFont;}  }
class C{  public static int validate(String hostname,String port,String exclList){  Matcher match=HOSTNAME_PATTERN.matcher(hostname);  String exclListArray[]=exclList.split(",");  if (!match.matches())   return R.string.proxy_error_invalid_host;  for (  String excl : exclListArray) {    Matcher m=EXCLUSION_PATTERN.matcher(excl);    if (!m.matches())     return R.string.proxy_error_invalid_exclusion_list;  }  if (hostname.length() > 0 && port.length() == 0) {    return R.string.proxy_error_empty_port;  }  if (port.length() > 0) {    if (hostname.length() == 0) {      return R.string.proxy_error_empty_host_set_port;    }    int portVal=-1;    try {      portVal=Integer.parseInt(port);    } catch (    NumberFormatException ex) {      return R.string.proxy_error_invalid_port;    }    if (portVal <= 0 || portVal > 0xFFFF) {      return R.string.proxy_error_invalid_port;    }  }  return 0;}  }
class C{  public boolean empty(){  return vstack.empty();}  }
class C{  private void onCloseClicked(@NotNull Notification notification){  Notification.CloseNotificationHandler closeHandler=notification.getCloseHandler();  if (closeHandler != null) {    closeHandler.onCloseClicked();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().hasPCCode());}  }
class C{  public static boolean deleteEntityAndChildren(final Datastore datastore,final Key key) throws DatastoreException {  BeginTransactionRequest.Builder transactionRequest=BeginTransactionRequest.newBuilder();  BeginTransactionResponse transactionResponse=datastore.beginTransaction(transactionRequest.build());  boolean comitting=false;  boolean res=false;  try {    ReadOptions.Builder readOptions=ReadOptions.newBuilder().setTransaction(transactionResponse.getTransaction());    Query.Builder query=Query.newBuilder();    Filter ancestorFilter=makeFilter("__key__",PropertyFilter.Operator.HAS_ANCESTOR,makeValue(key)).build();    query.setFilter(makeFilter(ancestorFilter));    query.addProjection(PropertyExpression.newBuilder().setProperty(PropertyReference.newBuilder().setName("__key__")));    RunQueryRequest runQueryRequest=RunQueryRequest.newBuilder().setReadOptions(readOptions).setQuery(query).build();    List<Key> resultKeys=new ArrayList<>();    for (    EntityResult result : datastore.runQuery(runQueryRequest).getBatch().getEntityResultList()) {      resultKeys.add(result.getEntity().getKey());    }    CommitRequest request=CommitRequest.newBuilder().setTransaction(transactionResponse.getTransaction()).setMutation(Mutation.newBuilder().addAllDelete(resultKeys)).build();    comitting=true;    CommitResponse response=datastore.commit(request);    res=response.getMutationResult().getIndexUpdates() > 0;  }  finally {    if (!comitting) {      RollbackRequest.Builder rollback=RollbackRequest.newBuilder().setTransaction(transactionResponse.getTransaction());      datastore.rollback(rollback.build());    }  }  return res;}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  private void mergeJFIFsubtree(Node JPEGvariety) throws IIOInvalidTreeException {  if (JPEGvariety.getChildNodes().getLength() != 0) {    Node jfifNode=JPEGvariety.getFirstChild();    JFIFMarkerSegment jfifSeg=(JFIFMarkerSegment)findMarkerSegment(JFIFMarkerSegment.class,true);    if (jfifSeg != null) {      jfifSeg.updateFromNativeNode(jfifNode,false);    } else {      markerSequence.add(0,new JFIFMarkerSegment(jfifNode));    }  }}  }
class C{  protected SQLException unsupported(String message) throws SQLException {  try {    throw DbException.getUnsupportedException(message);  } catch (  Exception e) {    return logAndConvert(e);  }}  }
class C{  public void testIcons(){  GWTPlugin plugin=GWTPlugin.getDefault();  ImageRegistry imageRegistry=plugin.getImageRegistry();  for (  String imageId : IMAGE_IDS) {    Image image=imageRegistry.get(imageId);    assertNotNull("ImageId: " + imageId + " was not in the ImageRegistry",image);  }}  }
class C{  public static String toStringEmptyIfNull(Object o){  if (o == null)   return "";  return o.toString();}  }
class C{  public boolean isTaggingEnabled(){  return taggingEnabled;}  }
class C{  public boolean isConnected(){  boolean result=false;synchronized (CONN_SYNC) {    result=((this.system != null) && this.system.isConnected());  }  return result;}  }
class C{  protected static SimplePostTool parseArgsAndInit(String[] args){  String urlStr=null;  try {    final String mode=System.getProperty("data",DEFAULT_DATA_MODE);    if (!DATA_MODES.contains(mode)) {      fatal("System Property 'data' is not valid for this tool: " + mode);    }    String params=System.getProperty("params","");    urlStr=System.getProperty("url",DEFAULT_POST_URL);    urlStr=SimplePostTool.appendParam(urlStr,params);    URL url=new URL(urlStr);    boolean auto=isOn(System.getProperty("auto",DEFAULT_AUTO));    String type=System.getProperty("type");    int recursive=0;    String r=System.getProperty("recursive",DEFAULT_RECURSIVE);    try {      recursive=Integer.parseInt(r);    } catch (    Exception e) {      if (isOn(r))       recursive=DATA_MODE_WEB.equals(mode) ? 1 : 999;    }    int delay=DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;    try {      delay=Integer.parseInt(System.getProperty("delay","" + delay));    } catch (    Exception e) {    }    OutputStream out=isOn(System.getProperty("out",DEFAULT_OUT)) ? System.out : null;    String fileTypes=System.getProperty("filetypes",DEFAULT_FILE_TYPES);    boolean commit=isOn(System.getProperty("commit",DEFAULT_COMMIT));    boolean optimize=isOn(System.getProperty("optimize",DEFAULT_OPTIMIZE));    return new SimplePostTool(mode,url,auto,type,recursive,delay,fileTypes,out,commit,optimize,args);  } catch (  MalformedURLException e) {    fatal("System Property 'url' is not a valid URL: " + urlStr);    return null;  }}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public static Icon iconStream(String name,String type){  return iconStream("/edu/wpi/grip/ui/icons/",name,type);}  }
class C{  public Matrix dht2(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dht2();  return new Matrix(dm.toArray());}  }
class C{  public boolean isImageMask(){  return imageMask;}  }
class C{  public void testRollover(){  StrideReadings strideReadings=new StrideReadings();  int initialStrides=128 - StrideReadings.NUM_READINGS_FOR_AVERAGE - 5;  for (int i=1; i <= StrideReadings.NUM_READINGS_FOR_AVERAGE + 10; i++) {    strideReadings.updateStrideReading((initialStrides + i) % 128);    if (i >= StrideReadings.MIN_READINGS_FOR_AVERAGE) {      assertEquals(60,strideReadings.getCadence());    } else {      assertEquals(StrideReadings.CADENCE_NOT_AVAILABLE,strideReadings.getCadence());    }  }}  }
class C{  public static byte[] serializeToByteArray(Object value){  try {    ByteArrayOutputStream buffer=new ByteArrayOutputStream();    try (ObjectOutputStream oos=new ObjectOutputStream(buffer)){      oos.writeObject(value);    }     return buffer.toByteArray();  } catch (  IOException exn) {    throw new IllegalArgumentException("unable to serialize " + value,exn);  }}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  public String priceList(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_PriceList_ID=(Integer)mTab.getValue("M_PriceList_ID");  if (M_PriceList_ID == null || M_PriceList_ID.intValue() == 0)   return "";  if (steps)   log.warning("init");  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT pl.IsTaxIncluded,pl.EnforcePriceLimit,pl.C_Currency_ID,c.StdPrecision," + "plv.M_PriceList_Version_ID,plv.ValidFrom " + "FROM M_PriceList pl,C_Currency c,M_PriceList_Version plv "+ "WHERE pl.C_Currency_ID=c.C_Currency_ID"+ " AND pl.M_PriceList_ID=plv.M_PriceList_ID"+ " AND pl.M_PriceList_ID=? "+ " AND plv.ValidFrom <= ? "+ "ORDER BY plv.ValidFrom DESC";  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,M_PriceList_ID.intValue());    Timestamp date=new Timestamp(System.currentTimeMillis());    if (mTab.getAD_Table_ID() == I_C_Order.Table_ID)     date=Env.getContextAsDate(ctx,WindowNo,"DateOrdered"); else     if (mTab.getAD_Table_ID() == I_C_Invoice.Table_ID)     date=Env.getContextAsDate(ctx,WindowNo,"DateInvoiced");    pstmt.setTimestamp(2,date);    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("IsTaxIncluded",new Boolean("Y".equals(rs.getString(1))));      Env.setContext(ctx,WindowNo,"EnforcePriceLimit",rs.getString(2));      Integer ii=new Integer(rs.getInt(3));      mTab.setValue("C_Currency_ID",ii);      Env.setContext(ctx,WindowNo,"M_PriceList_Version_ID",rs.getInt(5));    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (steps)   log.warning("fini");  return "";}  }
class C{  public void updateText(float latPoint,float lonPoint,String stuff,String font,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(latPoint,lonPoint,stuff,font,justify,properties,link.dos);}  }
class C{  public Map<Integer,Integer> buildCharStringTable(){  final Map<Integer,Integer> returnStrings=new HashMap<Integer,Integer>();  for (int key=0; key < glyfCount; key++) {    if (!emptyCharStrings[key]) {      returnStrings.put(key,key);    }  }  return returnStrings;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.001 -0500",hash_original_method="03994A77D1324F910A7EC2E8D4C779CB",hash_generated_method="90ECE281F75BAE93DFEF4C3AA4D51FDF") public String byteStringNoComma(){  StringBuffer retval=new StringBuffer();  try {    while (true) {      char next=lookAhead(0);      if (next == '\n' || next == ',') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {  }  return retval.toString();}  }
class C{  public static final short secondaryOrder(int order){  return (short)CollationElementIteratorICU.secondaryOrder(order);}  }
class C{  public void testGet(){  System.out.println("get");  DumpParserFactory result=DumpParserFactory.get();  assertNotNull(result);}  }
class C{  public static Collection flatten(byte[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  private GPNode generateCompatibleTree(final GPNode original,final GPFunctionSet set,final EvolutionState state,final GPType returntype,final int thread){  GPNode node=(GPNode)(pickCompatibleNode(original,set,state,returntype,thread).lightClone());  node.resetNode(state,thread);  GPInitializer initializer=((GPInitializer)state.initializer);  for (int x=0; x < node.children.length; x++) {    node.children[x]=generateCompatibleTree(original.children[x],set,state,original.constraints(initializer).childtypes[x],thread);    node.children[x].parent=node;    node.children[x].argposition=(byte)x;  }  return node;}  }
class C{  public void addBoundingSector(Sector sector){  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.boundingSectors.add(sector);}  }
class C{  private void removeDefaultEventListeners(){  PInputEventListener panEventHandler=canvas.getPanEventHandler();  PInputEventListener zoomEventHandler=canvas.getZoomEventHandler();  canvas.removeInputEventListener(panEventHandler);  canvas.removeInputEventListener(zoomEventHandler);}  }
class C{  public static int segment(final long index){  return (int)(index >>> SEGMENT_SHIFT);}  }
class C{  protected Vector<Double> makeTestValueList(int seed,int numValues,double minValue,double maxValue,int attrType) throws Exception {  double range=maxValue - minValue;  Vector<Double> values=new Vector<Double>(numValues);  Random random=new Random(seed);  if (attrType == Attribute.NOMINAL) {    for (int i=0; i < numValues; i++) {      Double v=new Double((Math.abs(random.nextInt()) % (int)range) + (int)minValue);      values.add(v);    }  }  if (attrType == Attribute.NUMERIC) {    for (int i=0; i < numValues; i++) {      Double v=new Double(random.nextDouble() * range + minValue);      values.add(v);    }  }  return values;}  }
class C{  public ThreadState bindSubject(Subject subject){  if (subject == null) {    return null;  }  ThreadState threadState=new SubjectThreadState(subject);  threadState.bind();  return threadState;}  }
class C{  public boolean clientExists(Session session,ClientId id,boolean includeSubsystems){  Example ex=Example.create(id);  if (includeSubsystems) {    ex.excludeProperty("type").excludeZeroes();  }  Criteria criteria=session.createCriteria(ClientType.class);  criteria.createCriteria("identifier").add(ex);  return criteria.list().size() > 0;}  }
class C{  @Deprecated public static final void randomize(int array[],Random r){  A.shuffle(array,r);}  }
class C{  public int hashCode(){  return attr.hashCode() + entries.hashCode();}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  if (bestCandidate != null) {    try {      return bestCandidate.loadClass(name);    } catch (    Throwable t) {      bestCandidate=null;    }  }  Throwable throwable=null;  Class<?> clazz=null;  ClassLoadHelper loadHelper=null;  Iterator<ClassLoadHelper> iter=loadHelpers.iterator();  while (iter.hasNext()) {    loadHelper=iter.next();    try {      clazz=loadHelper.loadClass(name);      break;    } catch (    Throwable t) {      throwable=t;    }  }  if (clazz == null) {    if (throwable instanceof ClassNotFoundException) {      throw (ClassNotFoundException)throwable;    } else {      throw new ClassNotFoundException(String.format("Unable to load class %s by any known loaders.",name),throwable);    }  }  bestCandidate=loadHelper;  return clazz;}  }
class C{  @Override public void onTaskRemoved(Intent rootIntent){  Intent intent=new Intent(this,DummyActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public static void printError(int errorCode,String cause,Throwable throwable){  if (errorCode == EC.GENERAL) {    printError(errorCode,ECGeneralMsg(cause,throwable));  } else {    printError(errorCode,cause,throwable,true);  }}  }
class C{  public void execute(){  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  Parameters searchParams=getParams();  Parameters params=searchParams;  Cfci cfci=new Cfci(getIndependenceTest());  cfci.setKnowledge(knowledge);  cfci.setDepth(params.getInt("depth",-1));  Graph graph=cfci.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  private void sanitizeParent(Dimension child){  DimensionExtended xChild=getExtended(child);  if (xChild.getParent() != null) {    DimensionExtended xParent=getExtended(xChild.getParent());    xChild.setParent(null);    child.setParentId(null);    xParent.remove(child);  }}  }
class C{  public JobExecutionException(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isIdleTimeToValid(){  return idleTimeTo == null || idleTimeToSec != null;}  }
class C{  public static Test suite(){  TestSuite suite=new TestSuite();  return suite;}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  initialise(k,tau,epsilon);}  }
class C{  protected void storeState(){}  }
class C{  public void testFileRetentionAndInactive() throws Exception {  File testDir=createTestDir("testFileRetentionAndInactive");  String prefix1="testfile";  File[] files1=createFiles(testDir,prefix1,5);  for (int i=0; i < files1.length; i++) {    File[] purgeCandidates2=FileCommands.filesOverRetentionAndInactive(testDir,"testfile",1,files1[i].getName());    assertEquals("Expect to purge files below active only",i,purgeCandidates2.length);  }}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public void test_addAllILjava_util_Collection(){  ll.addAll(50,(Collection)ll.clone());  assertEquals("Returned incorrect size after adding to existing list",200,ll.size());  for (int i=0; i < 50; i++)   assertTrue("Manipulated elements < index",ll.get(i) == objArray[i]);  for (int i=0; i >= 50 && (i < 150); i++)   assertTrue("Failed to ad elements properly",ll.get(i) == objArray[i - 50]);  for (int i=0; i >= 150 && (i < 200); i++)   assertTrue("Failed to ad elements properly",ll.get(i) == objArray[i - 100]);  List myList=new LinkedList();  myList.add(null);  myList.add("Blah");  myList.add(null);  myList.add("Booga");  myList.add(null);  ll.addAll(50,myList);  assertNull("a) List w/nulls not added correctly",ll.get(50));  assertEquals("b) List w/nulls not added correctly","Blah",ll.get(51));  assertNull("c) List w/nulls not added correctly",ll.get(52));  assertEquals("d) List w/nulls not added correctly","Booga",ll.get(53));  assertNull("e) List w/nulls not added correctly",ll.get(54));  try {    ll.addAll(-1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.addAll(ll.size() + 1,(Collection)null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.addAll(0,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  private void makeAndAddView(int position,float angleOffset){  CarouselItemView child;  if (!mDataChanged) {    child=(CarouselItemView)mRecycler.get(position);    if (child != null) {      setUpChild(child,child.getIndex(),angleOffset);    } else {      child=(CarouselItemView)mAdapter.getView(position,null,this);      setUpChild(child,child.getIndex(),angleOffset);    }    return;  }  child=(CarouselItemView)mAdapter.getView(position,null,this);  setUpChild(child,child.getIndex(),angleOffset);}  }
class C{  public MinMaxNode(Comparator<Integer> selector){  if (selector != IComparator.MAX && selector != IComparator.MIN) {    throw new IllegalArgumentException("MinMaxNode needs one of either IComparator.MIN or IComparator.MAX");  }  this.selector=selector;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public T caseAnonymous_key_1_(Anonymous_key_1_ object){  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_genExpr_1_();}  }
class C{  @RequestMapping(value="/user/rights",method=RequestMethod.POST) public JsonResponse changeRights(@RequestBody JsonInputForAdmin input) throws ServiceException, CheckException {  String login=this.authentificationUtils.getAuthentificatedUser().getLogin();  if (login.equalsIgnoreCase(input.getLogin())) {    throw new CheckException("You can't change your own rights");  }  this.userService.changeUserRights(input.getLogin(),input.getRole());  return new HttpOk();}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  while (true) {    InputNode next=node.getNext();    if (next == null) {      return true;    }    if (!next.isEmpty()) {      root.validate(next,type);    }  }}  }
class C{  public void addTimeEventListener(TimeEventListener tel){  if (!timeEventListeners.contains(tel)) {    timeEventListeners.add(tel);  }}  }
class C{  public void keep(Object obj){  if (children == null)   children=new LinkedList();  children.add(obj);}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public void onLoaded(){  if (!addedToEnet && !FMLCommonHandler.instance().getEffectiveSide().isClient() && Info.isIc2Available()) {    worldObj=parent.getWorldObj();    xCoord=parent.xCoord;    yCoord=parent.yCoord;    zCoord=parent.zCoord;    MinecraftForge.EVENT_BUS.post(new EnergyTileLoadEvent(this));    addedToEnet=true;  }}  }
class C{  public static @EnsuresNonNull("#1") <T extends Object>T[][][][][] castNonNullDeep(T[][][][][] arr){  return (T[][][][][])castNonNullArray(arr);}  }
class C{  protected Object execute(){  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (projectId == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No projectID has been set");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectId).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToDestroy=project.getInnerReference();  project.getCodenvy().project().deleteResources(projectToDestroy,"").execute();  System.out.println(String.format("The project %s has been deleted",projectToDestroy.name()));  return null;}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(Application.class);  app.setShowBanner(false);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  addLiquibaseScanPackages();  Environment env=app.run(args).getEnvironment();  log.info("Access URLs:\n----------------------------------------------------------\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t" + "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));}  }
class C{  public WorksheetFeed(){  super(WorksheetEntry.class);  getCategories().add(WorksheetEntry.CATEGORY);}  }
class C{  @Field(31) public __VARIANT_NAME_3_union byref(Pointer<Pointer<?>> byref){  this.io.setPointerField(this,31,byref);  return this;}  }
class C{  void align() throws IOException {  onNewLine=false;  aligned=true;  needsAlign=false;  for (int i=0; i < lmargin; i++)   out.write(formatPreferences.indent());}  }
class C{  public static String resolve(IObject object){  if (object == null) {    throw new NullPointerException(Messages.ClassSpecificNameResolverRegistry_Error_MissingObject.pattern);  }  return instance().registry.doResolve(object);}  }
class C{  public static int hashDoubleArray(int seed,double... doubleArray){  return hash(seed,doubleArray);}  }
class C{  protected DocumentFactory createDocumentFactory(DOMImplementation domImpl,String parserClassname){  return new SAXSVGDocumentFactory(parserClassname);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer batchStateId,Principal principal){  RestWrapper restWrapper=null;  try {    batchStatusDAO.delete(batchStateId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchStateId + " deleted from BatchStatus by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static ViewGroup buildStickyDrawerItemFooter(Context ctx,DrawerBuilder drawer,View.OnClickListener onClickListener){  final LinearLayout linearLayout=new LinearLayout(ctx);  linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  linearLayout.setOrientation(LinearLayout.VERTICAL);  linearLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_background,R.color.material_drawer_background));  if (drawer.mStickyFooterDivider) {    addStickyFooterDivider(ctx,linearLayout);  }  fillStickyDrawerItemFooter(drawer,linearLayout,onClickListener);  return linearLayout;}  }
class C{  public static String formatPercentage(double percentage){  return percentageDecimalFormat.format(percentage);}  }
class C{  public static void selectChildrenOfSelection(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01935: Graph argument can not be null");  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.selectSuccessorsOfSelection(selectableGraph);  } else {    final Collection<INaviViewNode> rawNodes=GraphConverters.convert(graph.getSelectedNodes());    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getSuccessors(rawNodes)),true);  }}  }
class C{  private void updateInfoPanel(){  int count=views.size();switch (count) {case 0:    infoLabel.setText(labels.getString("ActivityWindow.noActivities.text"));  cancelAllButton.setEnabled(false);break;case 1:infoLabel.setText(labels.getString("ActivityWindow.oneActivity.text"));cancelAllButton.setEnabled(true);break;default :infoLabel.setText(labels.getFormatted("ActivityWindow.nActivities.text",count));cancelAllButton.setEnabled(true);break;}}  }
class C{  protected void removeTag(short tagId){  mTags.remove(tagId);}  }
class C{  public void enableHardwareLayersForContent(){  View widget=getContent();  if (widget != null) {    widget.setLayerType(LAYER_TYPE_HARDWARE,null);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public Coin div(final long divisor){  return divide(divisor);}  }
class C{  public void addValue(String value){synchronized (values) {    values.add(value);  }}  }
class C{  public void textureMode(int mode){  this.textureMode=mode;}  }
class C{  protected <E>RepositoryResult<E> createRepositoryResult(CloseableIteration<? extends E,SailException> sailIter){  return new RepositoryResult<E>(new SailCloseableIteration<E>(sailIter));}  }
class C{  public ResumingClientHandshaker(DTLSSession session,RecordLayer recordLayer,SessionListener sessionListener,DtlsConnectorConfig config,int maxTransmissionUnit){  super(session,recordLayer,sessionListener,config,maxTransmissionUnit);  if (session.getSessionIdentifier() == null) {    throw new IllegalArgumentException("Session must contain the ID of the session to resume");  }}  }
class C{  public RWStore(final FileMetadata fileMetadata,final Quorum<?,?> quorum){  if (fileMetadata == null)   throw new IllegalArgumentException();  this.m_minReleaseAge=Long.valueOf(fileMetadata.getProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,AbstractTransactionService.Options.DEFAULT_MIN_RELEASE_AGE));  if (log.isInfoEnabled())   log.info(AbstractTransactionService.Options.MIN_RELEASE_AGE + "=" + m_minReleaseAge);  m_metaBitsSize=cDefaultMetaBitsSize;  m_useMetabitsDemispace=Boolean.valueOf(fileMetadata.getProperty(Options.META_BITS_DEMI_SPACE,Options.DEFAULT_META_BITS_DEMI_SPACE));  cDefaultFreeBitsThreshold=Integer.valueOf(fileMetadata.getProperty(Options.FREE_BITS_THRESHOLD,Options.DEFAULT_FREE_BITS_THRESHOLD));  if (cDefaultFreeBitsThreshold < 1 || cDefaultFreeBitsThreshold > 5000) {    throw new IllegalArgumentException(Options.FREE_BITS_THRESHOLD + " : Must be between 1 and 5000");  }  m_readBlobsAsync=Boolean.valueOf(fileMetadata.getProperty(Options.READ_BLOBS_ASYNC,Options.DEFAULT_READ_BLOBS_ASYNC));  cSmallSlot=Integer.valueOf(fileMetadata.getProperty(Options.SMALL_SLOT_TYPE,Options.DEFAULT_SMALL_SLOT_TYPE));  cSmallSlotThreshold=Integer.valueOf(fileMetadata.getProperty(Options.SMALL_SLOT_THRESHOLD,Options.DEFAULT_SMALL_SLOT_THRESHOLD));  cSmallSlotWasteCheckAllocators=Integer.valueOf(fileMetadata.getProperty(Options.SMALL_SLOT_WASTE_CHECK_ALLOCATORS,Options.DEFAULT_SMALL_SLOT_WASTE_CHECK_ALLOCATORS));  cSmallSlotHighWaste=Float.valueOf(fileMetadata.getProperty(Options.SMALL_SLOT_HIGH_WASTE,Options.DEFAULT_SMALL_SLOT_HIGH_WASTE));  cSmallSlotThresholdHighWaste=(int)(cSmallSlotHighWaste * 8192 / 100);  if (cSmallSlot < 0 || cSmallSlot > 2048) {    throw new IllegalArgumentException(Options.SMALL_SLOT_TYPE + " : Must be between 0 and 2048");  }  m_metaBits=new int[m_metaBitsSize];  m_metaTransientBits=new int[m_metaBitsSize];  m_quorum=quorum;  m_fd=fileMetadata.file;  this.storeCounters.set(new StoreCounters(10));  final IRootBlockView m_rb=fileMetadata.rootBlock;  m_allocs=new ArrayList<FixedAllocator>();  try {    final RandomAccessFile m_raf=fileMetadata.getRandomAccessFile();    m_reopener=new ReopenFileChannel(m_fd,m_raf,fileMetadata.readOnly);  } catch (  IOException e1) {    throw new RuntimeException(e1);  }  if (Boolean.valueOf(fileMetadata.getProperty(Options.DOUBLE_BUFFER_WRITES,Options.DEFAULT_DOUBLE_BUFFER_WRITES))) {    try {      m_bufferedWrite=new BufferedWrite(this);    } catch (    InterruptedException e1) {      m_bufferedWrite=null;    }  } else {    m_bufferedWrite=null;  }  m_writeCacheBufferCount=fileMetadata.writeCacheBufferCount;  m_readCacheBufferCount=Integer.valueOf(fileMetadata.getProperty(com.bigdata.journal.Options.READ_CACHE_BUFFER_COUNT,com.bigdata.journal.Options.DEFAULT_READ_CACHE_BUFFER_COUNT));  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.WRITE_CACHE_BUFFER_COUNT + "=" + m_writeCacheBufferCount);  this.m_minCleanListSize=Integer.valueOf(fileMetadata.getProperty(com.bigdata.journal.Options.WRITE_CACHE_MIN_CLEAN_LIST_SIZE,com.bigdata.journal.Options.DEFAULT_WRITE_CACHE_MIN_CLEAN_LIST_SIZE));  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.WRITE_CACHE_MIN_CLEAN_LIST_SIZE + "=" + m_minCleanListSize);  this.m_compactionThreshold=Double.valueOf(fileMetadata.getProperty(com.bigdata.journal.Options.WRITE_CACHE_COMPACTION_THRESHOLD,com.bigdata.journal.Options.DEFAULT_WRITE_CACHE_COMPACTION_THRESHOLD)).intValue();  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.WRITE_CACHE_COMPACTION_THRESHOLD + "=" + m_compactionThreshold);  this.m_hotCacheThreshold=Double.valueOf(fileMetadata.getProperty(com.bigdata.journal.Options.HOT_CACHE_THRESHOLD,com.bigdata.journal.Options.DEFAULT_HOT_CACHE_THRESHOLD)).intValue();  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.HOT_CACHE_THRESHOLD + "=" + m_hotCacheThreshold);  this.m_hotCacheSize=Double.valueOf(fileMetadata.getProperty(com.bigdata.journal.Options.HOT_CACHE_SIZE,com.bigdata.journal.Options.DEFAULT_HOT_CACHE_SIZE)).intValue();  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.HOT_CACHE_SIZE + "=" + m_hotCacheSize);  this.m_compressorKey=fileMetadata.getProperty(com.bigdata.journal.Options.HALOG_COMPRESSOR,com.bigdata.journal.Options.DEFAULT_HALOG_COMPRESSOR);  if (log.isInfoEnabled())   log.info(com.bigdata.journal.Options.HALOG_COMPRESSOR + "=" + m_compressorKey);  try {    if (m_rb.getNextOffset() == 0) {      setAllocations(fileMetadata);      m_storeUUID=m_rb.getUUID();      defaultInit();      m_maxFixedAlloc=m_allocSizes[m_allocSizes.length - 1] * 64;      m_minFixedAlloc=m_allocSizes[0] * 64;      m_storageStats=new StorageStats(m_allocSizes);    } else {      initfromRootBlock(m_rb);      m_maxFixedAlloc=m_allocSizes[m_allocSizes.length - 1] * 64;      m_minFixedAlloc=m_allocSizes[0] * 64;      if (m_storageStatsAddr != 0) {        final long statsAddr=m_storageStatsAddr >> 16;        final int statsLen=((int)m_storageStatsAddr) & 0xFFFF;        final byte[] stats=new byte[statsLen + 4];        getData(statsAddr,stats);        final DataInputStream instr=new DataInputStream(new ByteArrayInputStream(stats));        m_storageStats=new StorageStats(instr);        for (        FixedAllocator fa : m_allocs) {          m_storageStats.register(fa);        }      } else {        m_storageStats=new StorageStats(m_allocSizes);      }      if (log.isTraceEnabled()) {        final StringBuilder str=new StringBuilder();        this.showAllocators(str);        log.trace(str);      }    }    m_maxFileSize=((long)Integer.MAX_VALUE) * m_maxFixedAlloc;    m_writeCacheService=newWriteCacheService();    final int maxBlockLessChk=m_maxFixedAlloc - 4;    assert m_maxFixedAlloc > 0;    m_deferredFreeOut=PSOutputStream.getNew(this,m_maxFixedAlloc,null);  } catch (  IOException e) {    throw new StorageTerminalError("Unable to initialize store",e);  }}  }
class C{  public String dump(){  StringBuilder bl=new StringBuilder();  for (  ConsolFun cf : ConsolFun.values()) {    bl.append(cf.name() + '=' + Util.formatDouble(this.getAggregate(cf)));  }  return bl.toString();}  }
class C{  public OMGraphicList prepare(){  OMGraphicList oldList=getList();  if (oldList != null) {    oldList.generate(getProjection());    if (getCoverage() != null) {      getCoverage().generate(getProjection());    }    repaint();  }  return super.prepare();}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  if (m_listenee == source) {    m_listenee=null;    m_format=null;  }}  }
class C{  public boolean findCellForSpan(int[] cellXY,int spanX,int spanY){  boolean foundCell=false;  final int endX=mCountX - (spanX - 1);  final int endY=mCountY - (spanY - 1);  for (int y=0; y < endY && !foundCell; y++) {    inner:     for (int x=0; x < endX; x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (mOccupied[x + i][y + j]) {            x+=i;            continue inner;          }        }      }      if (cellXY != null) {        cellXY[0]=x;        cellXY[1]=y;      }      foundCell=true;      break;    }  }  return foundCell;}  }
class C{  protected void processStartOption(final String key,final String value,final Map<String,Object> options,final List<String> vmArgs,final Properties props) throws Exception {  processUnknownStartOption(key,value,options,vmArgs,props);}  }
class C{  public void printTable(HardcopyWriter w,int colWidth[]){  int[] columnSize=new int[4];  int charPerLine=w.getCharactersPerLine();  int tableLineWidth=0;  int totalColWidth=0;  for (int j=0; j < 4; j++) {    totalColWidth+=colWidth[j];  }  float ratio=((float)charPerLine) / ((float)totalColWidth);  for (int j=0; j < 4; j++) {    columnSize[j]=(int)Math.round(colWidth[j] * ratio - 1.);    tableLineWidth+=(columnSize[j] + 1);  }  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] columnStrings=new String[4];  for (int i=0; i < 4; i++) {    columnStrings[i]=this.getColumnName(i);  }  w.setFontStyle(Font.BOLD);  printColumns(w,columnStrings,columnSize);  w.setFontStyle(0);  w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  String[] spaces=new String[4];  for (int k=0; k < 4; k++) {    spaces[k]="";    for (int i=0; i < columnSize[k]; i++) {      spaces[k]=spaces[k] + " ";    }  }  for (int i=0; i < this.getRowCount(); i++) {    for (int j=0; j < 4; j++) {      if (this.getValueAt(i,j) == null) {        columnStrings[j]=spaces[j];      } else {        columnStrings[j]=(String)this.getValueAt(i,j);      }    }    printColumns(w,columnStrings,columnSize);    w.write(w.getCurrentLineNumber(),0,w.getCurrentLineNumber(),tableLineWidth);  }  w.close();}  }
class C{  private static final File[] encode(String src){  if (src == null || src.length() == 0) {    return (new File[0]);  }  StringTokenizer tokenizer=new StringTokenizer(src,";");  File[] dirs=new File[tokenizer.countTokens()];  for (int i=0; i < dirs.length; i++) {    dirs[i]=new File(tokenizer.nextToken());  }  return dirs;}  }
class C{  static PluginContainer checkPluginInstance(Object plugin){  Optional<PluginContainer> optPlugin=SpongeImpl.getGame().getPluginManager().fromInstance(checkNotNull(plugin,"plugin"));  checkArgument(optPlugin.isPresent(),"Provided object is not a plugin instance");  return optPlugin.get();}  }
class C{  public boolean isVisibleInCatalog(){  return visibleInCatalog;}  }
class C{  public boolean apply(T value,boolean flag){  return apply(value,blacklist,flag);}  }
class C{  public boolean retainAll(int[] array){  Arrays.sort(array);  int[] set=_set;  byte[] states=_states;  boolean changed=false;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && Arrays.binarySearch(array,set[i]) < 0) {      remove(set[i]);      changed=true;    }  }  return changed;}  }
class C{  private void checkLangDeclarationValidity(SSPHandler sspHandler,ElementHandler selectionHandler,TestSolutionHandler testSolutionHandler){  LangChecker ec=new LangDeclarationValidityChecker(true,true);  ec.setNomenclatureLoaderService(nomenclatureLoaderService);  ec.check(sspHandler,selectionHandler,testSolutionHandler);}  }
class C{  boolean hasError(int rowIndex,int columnIndex){  Set<Integer> errorRows=errorCells.get(columnIndex);  if (errorRows != null && errorRows.contains(rowIndex) && !metaData.getColumnMetaData(columnIndex).isRemoved()) {    return true;  }  return false;}  }
class C{  @Override public CertPathValidatorResult engineValidate(CertPath cp,CertPathParameters params) throws CertPathValidatorException, InvalidAlgorithmParameterException {  ValidatorParams valParams=PKIX.checkParams(cp,params);  return validate(valParams);}  }
class C{  @Override public void onBackPressed(){  return;}  }
class C{  @Override protected Script createOutputScript(){  return ScriptBuilder.createP2SHOutputScript(createP2SHRedeemScript());}  }
class C{  protected boolean isZoneLoaded(View zone){  return (zone.getViewCount() > 0);}  }
class C{  protected Anonymous_entryOrExitAction_1_Impl(){  super();}  }
class C{  public AbstractMRMessage createOutPacket(){  return null;}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeDecimalFormats(this);}  }
class C{  public static List findMatchingName(String fname,String lname){  List list=null;  if ((fname == null || fname.trim().length() == 0) && (lname == null || lname.trim().length() == 0))   return list;  Conjunction and=Restrictions.conjunction();  if (fname != null && fname.trim().length() > 0)   and.add(Restrictions.ilike("firstName",fname,MatchMode.START));  if (lname != null && lname.trim().length() > 0)   and.add(Restrictions.ilike("lastName",lname,MatchMode.START));  StaffDAO sdao=new StaffDAO();  list=sdao.getSession().createCriteria(Staff.class).add(and).list();  Collections.sort(list);  return list;}  }
class C{  public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }}  }
class C{  public static CPreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency){  return prepareStatement(sql,resultSetType,resultSetConcurrency,null);}  }
class C{  public static void generateFullZoningMap(DbClient dbClient,URI varrayURI,ExportMask mask,Collection<Initiator> initiators){  boolean changed=false;  Set<StoragePort> storagePorts=ExportMaskUtils.getPortsForExportMask(dbClient,mask,Transport.FC);  for (  Initiator initiator : initiators) {    if (mask.getZoningMap() == null || mask.getZoningMap().get(initiator.getId().toString()) == null) {      _log.info(String.format("No zoning map entry for initiator %s (%s), will zone to all ports",initiator.getInitiatorPort(),initiator.getId()));      List<URI> targetPorts=findInitiatorTargetsInVarray(dbClient,varrayURI,initiator,storagePorts);      if (!targetPorts.isEmpty()) {        changed=true;        mask.addZoningMapEntry(initiator.getId().toString(),StringSetUtil.uriListToStringSet(targetPorts));      }    }  }  if (changed) {    dbClient.updateObject(mask);  }}  }
class C{  private void expandAll(Object nil){  vis().setAllExpanded(true);}  }
class C{  public boolean saveAs(){  if (filer1 == null) {    filer1=new JFileChooser();  }  int returnVal=filer1.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    currFileName=filer1.getSelectedFile().getPath();    return doSaveFile();  } else {    return false;  }}  }
class C{  public static int convertSQLTypeToValueType(int sqlType){switch (sqlType) {case Types.CHAR:case Types.NCHAR:    return Value.STRING_FIXED;case Types.VARCHAR:case Types.LONGVARCHAR:case Types.NVARCHAR:case Types.LONGNVARCHAR:  return Value.STRING;case Types.NUMERIC:case Types.DECIMAL:return Value.DECIMAL;case Types.BIT:case Types.BOOLEAN:return Value.BOOLEAN;case Types.INTEGER:return Value.INT;case Types.SMALLINT:return Value.SHORT;case Types.TINYINT:return Value.BYTE;case Types.BIGINT:return Value.LONG;case Types.REAL:return Value.FLOAT;case Types.DOUBLE:case Types.FLOAT:return Value.DOUBLE;case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:return Value.BYTES;case Types.OTHER:case Types.JAVA_OBJECT:return Value.JAVA_OBJECT;case Types.DATE:return Value.DATE;case Types.TIME:return Value.TIME;case Types.TIMESTAMP:return Value.TIMESTAMP;case Types.BLOB:return Value.BLOB;case Types.CLOB:case Types.NCLOB:return Value.CLOB;case Types.NULL:return Value.NULL;case Types.ARRAY:return Value.ARRAY;case DataType.TYPE_RESULT_SET:return Value.RESULT_SET;default :throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1,"" + sqlType);}}  }
class C{  public TokenScanner(ITypeRoot typeRoot) throws CoreException {  IJavaProject project=typeRoot.getJavaProject();  IBuffer buffer=typeRoot.getBuffer();  if (buffer == null) {    throw new CoreException(createError(DOCUMENT_ERROR,"Element has no source",null));  }  String sourceLevel=project.getOption(JavaCore.COMPILER_SOURCE,true);  String complianceLevel=project.getOption(JavaCore.COMPILER_COMPLIANCE,true);  fScanner=ToolFactory.createScanner(true,false,true,sourceLevel,complianceLevel);  fScanner.setSource(buffer.getCharacters());  fDocument=null;  fEndPosition=fScanner.getSource().length - 1;}  }
class C{  public static void importExpressionTrees(final CConnection connection,final int moduleId,final int rawModuleId) throws SQLException {  final String query="INSERT INTO " + CTableNames.EXPRESSION_TREE_IDS_TABLE + " SELECT "+ moduleId+ ", id "+ " FROM ex_"+ rawModuleId+ "_expression_trees";  connection.executeUpdate(query,true);}  }
class C{  public SimpleDataTableRow(DataTableRow other){  copyValuesFromOtherRow(other);}  }
class C{  ControllerPlan createControllerPlan(RVMMethod method,int optLevel,InstrumentationPlan instPlan,int prevCMID,double expectedSpeedup,double expectedCompilationTime,double priority){  CompilationPlan compPlan=createCompilationPlan((NormalMethod)method,optLevel,instPlan);  return new ControllerPlan(compPlan,Controller.controllerClock,prevCMID,expectedSpeedup,expectedCompilationTime,priority);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private List<VNXFileSystem> discoverAllFileSystems(StorageSystem system) throws VNXFileCollectionException, VNXException {  List<VNXFileSystem> fileSystems=new ArrayList<VNXFileSystem>();  _logger.info("Start FileSystem discovery for storage system {}",system.getId());  try {    List<VNXFileSystem> vnxFileSystems=getAllFileSystem(system);    _logger.info("Number filesytems found: {}",vnxFileSystems.size());    if (vnxFileSystems != null) {      for (      VNXFileSystem vnxfs : vnxFileSystems) {        FileShare fs=null;        URIQueryResultList results=new URIQueryResultList();        String fsNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vnxfs.getFsId() + "",NativeGUIDGenerator.FILESYSTEM);        if (checkStorageFileSystemExistsInDB(fsNativeGuid)) {          continue;        }        vnxfs.setFsNativeGuid(fsNativeGuid);        fileSystems.add(vnxfs);      }    }    _logger.info("Number of FileSystem found {} and they are : ",fileSystems.size());  } catch (  IOException e) {    _logger.error("I/O Exception: Discovery of FileSystem failed for storage system {} for {}",system.getId(),e.getMessage());    VNXFileCollectionException vnxe=new VNXFileCollectionException("Storage FileSystem discovery error for storage system " + system.getId());    vnxe.initCause(e);    throw vnxe;  }  _logger.info("Storage FilesSystem discovery for storage system {} complete",system.getId());  return fileSystems;}  }
class C{  public static MReportColumn copy(Properties ctx,int AD_Client_ID,int AD_Org_ID,int PA_ReportColumnSet_ID,MReportColumn source,String trxName){  MReportColumn retValue=new MReportColumn(ctx,0,trxName);  MReportColumn.copyValues(source,retValue,AD_Client_ID,AD_Org_ID);  retValue.setPA_ReportColumnSet_ID(PA_ReportColumnSet_ID);  retValue.setOper_1_ID(0);  retValue.setOper_2_ID(0);  return retValue;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public LocalDateTime withDayOfWeek(int dayOfWeek){  return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(),dayOfWeek));}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public static TriggerMethod newInstance(){  final TriggerMethod returnInstance=new TriggerMethod();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  static List<MethodType> allMethodTypes(int minargc,int maxargc,Class<?>... types){  ArrayList<MethodType> result=new ArrayList<>();  if (types.length > 0) {    ArrayList<MethodType> argcTypes=new ArrayList<>();    for (    Class<?> rtype : types) {      argcTypes.add(MethodType.methodType(rtype));    }    if (types[0] == void.class)     types=Arrays.copyOfRange(types,1,types.length);    for (int argc=0; argc <= maxargc; argc++) {      if (argc >= minargc)       result.addAll(argcTypes);      if (argc >= maxargc)       break;      ArrayList<MethodType> prevTypes=argcTypes;      argcTypes=new ArrayList<>();      for (      MethodType prevType : prevTypes) {        for (        Class<?> ptype : types) {          argcTypes.add(prevType.insertParameterTypes(argc,ptype));        }      }    }  }  return Collections.unmodifiableList(result);}  }
class C{  public InternalFunctionException(){}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_NODE__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static Date asDate(String dateString) throws ParseException {  return new SimpleDateFormat(CommConstants.DATE_FORMAT_PATTERN).parse(dateString);}  }
class C{  public void writeImage(URL imageURL) throws IOException {  writeImage(imageURL.toString());}  }
class C{  public int markAll(String toMark,boolean matchCase,boolean wholeWord,boolean regex){  Highlighter h=getHighlighter();  int numMarked=0;  if (toMark != null && !toMark.equals(markedWord) && h != null) {    if (markAllHighlights != null)     clearMarkAllHighlights(); else     markAllHighlights=new ArrayList(10);    int caretPos=getCaretPosition();    markedWord=toMark;    setCaretPosition(0);    boolean found=SearchEngine.find(this,toMark,true,matchCase,wholeWord,regex);    while (found) {      int start=getSelectionStart();      int end=getSelectionEnd();      try {        markAllHighlights.add(h.addHighlight(start,end,markAllHighlightPainter));      } catch (      BadLocationException ble) {        ble.printStackTrace();      }      numMarked++;      found=SearchEngine.find(this,toMark,true,matchCase,wholeWord,regex);    }    setCaretPosition(caretPos);    repaint();  }  return numMarked;}  }
class C{  private String keyPassword(){  String password=_config.get(_prefix + ".ssl.key-password");  if (password != null) {    return password;  } else {    return keyStorePassword();  }}  }
class C{  public void writeRGB(OutStream out) throws IOException {  out.writeUI8(red);  out.writeUI8(green);  out.writeUI8(blue);}  }
class C{  @Override public void sendRequest(Operation op){  URI referer=this.referer;  if (referer == null) {    referer=getDefaultReferer();  }  op.setReferer(referer);  String authToken=authenticationToken.get();  if (authToken != null) {    op.addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authToken);  }  this.sender.sendRequest(op);}  }
class C{  private void find(){  FindWindow find=new FindWindow(m_targetWindowNo,m_title,m_AD_Table_ID,m_tableName,m_whereExtended,m_findFields,1,m_AD_Tab_ID);  if (!find.isCancel()) {    m_panel.onFindCallback(find.getQuery());  }}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof SegmentInfo) {    final SegmentInfo other=(SegmentInfo)obj;    return other.dir == dir && other.name.equals(name);  } else {    return false;  }}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public TextEditor outdent(){  return outdent(4);}  }
class C{  public NotSerializableException(){  super();}  }
class C{  @SuppressWarnings("unchecked") public Collection<Map<T,double[]>> cluster(Map<T,double[]> object_locations,int num_clusters){  if (object_locations == null || object_locations.isEmpty())   throw new IllegalArgumentException("'objects' must be non-empty");  if (num_clusters < 2 || num_clusters > object_locations.size())   throw new IllegalArgumentException("number of clusters " + "must be >= 2 and <= number of objects (" + object_locations.size() + ")");  Set<double[]> centroids=new HashSet<double[]>();  Object[] obj_array=object_locations.keySet().toArray();  Set<T> tried=new HashSet<T>();  while (centroids.size() < num_clusters && tried.size() < object_locations.size()) {    T o=(T)obj_array[(int)(rand.nextDouble() * obj_array.length)];    tried.add(o);    double[] mean_value=object_locations.get(o);    boolean duplicate=false;    for (    double[] cur : centroids) {      if (Arrays.equals(mean_value,cur))       duplicate=true;    }    if (!duplicate)     centroids.add(mean_value);  }  if (tried.size() >= object_locations.size())   throw new NotEnoughClustersException();  Map<double[],Map<T,double[]>> clusterMap=assignToClusters(object_locations,centroids);  int iterations=0;  double max_movement=Double.POSITIVE_INFINITY;  while (iterations++ < max_iterations && max_movement > convergence_threshold) {    max_movement=0;    Set<double[]> new_centroids=new HashSet<double[]>();    for (    Map.Entry<double[],Map<T,double[]>> entry : clusterMap.entrySet()) {      double[] centroid=entry.getKey();      Map<T,double[]> elements=entry.getValue();      ArrayList<double[]> locations=new ArrayList<double[]>(elements.values());      double[] mean=DiscreteDistribution.mean(locations);      max_movement=Math.max(max_movement,Math.sqrt(DiscreteDistribution.squaredError(centroid,mean)));      new_centroids.add(mean);    }    clusterMap=assignToClusters(object_locations,new_centroids);  }  return clusterMap.values();}  }
class C{  public boolean isAPDS(){  if ((getEntity() instanceof BattleArmor) && getType().getInternalName().equals("ISBAAPDS")) {    return true;  } else   if (getType() instanceof WeaponType) {    return ((WeaponType)getType()).getAmmoType() == AmmoType.T_APDS;  } else {    return false;  }}  }
class C{  public boolean isAdminEmail(final String email) throws RepositoryException {  final JSONObject user=getByEmail(email);  if (null == user) {    return false;  }  return Role.ADMIN_ROLE.equals(user.optString(User.USER_ROLE));}  }
class C{  private Credential buildCredentialFromData(final Map<String,String> data){  if (data == null) {    return null;  }  final String certificate=data.get("certificate");  final String issuingCa=data.get("issuing_ca");  final String privateKey=data.get("private_key");  final String privateKeyType=data.get("private_key_type");  final String serialNumber=data.get("serial_number");  if (certificate == null && issuingCa == null && privateKey == null && privateKeyType == null && serialNumber == null) {    return null;  }  return new Credential().certificate(certificate).issuingCa(issuingCa).privateKey(privateKey).privateKeyType(privateKeyType).serialNumber(serialNumber);}  }
class C{  public BaseMessage(final long id,final String topic,final String payload,final Date date){  this.id=id;  this.topic=topic;  this.payload=payload;  this.date=date;}  }
class C{  public void executeStatement(String statement) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    st.execute(statement);  } else   throw new NoConnectionException();}  }
class C{  private Document convertHtmlToDoc(String html){  html=html.replaceAll("<!--(.*?)-->","");  Document document;  try {    document=Jsoup.parse(html);  } catch (  Throwable ex) {    System.err.println("Exception raised when parsing HTML with JSoup; returning empty document");    System.err.println("Stack trace:");    ex.printStackTrace(System.err);    System.err.println("----- Original HTML begin -----");    System.err.println(html);    System.err.println("----- Original HTML end -----");    document=new Document("www.example.com");  }  return document;}  }
class C{  public static void writeManipulatorNBT(IEnergyManipulator manipulator,NBTTagCompound compound){  if (manipulator.getActiveDeity() != null)   compound.setString("ActiveDeity",manipulator.getActiveDeity().name());  if (manipulator.getActiveAmplifier() != null)   compound.setString("ActiveAmplifier",manipulator.getActiveAmplifier().name());}  }
class C{  protected String doIt() throws Exception {  if (p_PP_Order_ID == 0) {    throw new FillMandatoryException(MPPOrder.COLUMNNAME_PP_Order_ID);  }  if (p_IsComplete) {    MPPOrder order=new MPPOrder(getCtx(),p_PP_Order_ID,get_TrxName());    if (!order.isAvailable()) {      throw new AdempiereException("@NoQtyAvailable@");    }    boolean ok=order.processIt(MPPOrder.DOCACTION_Complete);    order.saveEx();    if (!ok) {      throw new AdempiereException(order.getProcessMsg());    }    if (!MPPOrder.DOCSTATUS_Completed.equals(order.getDocStatus())) {      throw new AdempiereException(order.getProcessMsg());    }  }  if (p_IsPrintPickList) {    ReportEngine re=this.getReportEngine("Manufacturing_Order_BOM_Header ** TEMPLATE **","PP_Order_BOM_Header_v");    if (re == null) {      return "";    }    ReportCtl.preview(re);    re.print();  }  if (p_IsPrintPackList) {    ReportEngine re=this.getReportEngine("Manufacturing_Order_BOM_Header_Packing ** TEMPLATE **","PP_Order_BOM_Header_v");    if (re == null) {      return "";    }    ReportCtl.preview(re);    re.print();  }  if (p_IsPrintWorkflow) {    ReportEngine re=this.getReportEngine("Manufacturing_Order_Workflow_Header ** TEMPLATE **","PP_Order_Workflow_Header_v");    if (re == null) {      return "";    }    ReportCtl.preview(re);    re.print();  }  return "@OK@";}  }
class C{  public SourceFile(File javaFile){  this.javaFile=javaFile;}  }
class C{  public void markEndCall(){  super.get().decrease();}  }
class C{  private void clearBlock(byte[] block){  for (int i=0; i != block.length; i++) {    block[i]=0;  }}  }
class C{  public static PasswordValidator buildChangeValidator(Map<String,String> properties,PasswordUtils passwordUtils){  return buildUpdateValidator(properties,passwordUtils);}  }
class C{  public static void write(boolean x){  writeBit(x);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque()) {    CompiereColor bg=CompiereColor.getDefaultBackground();    bg.paint(g,c);  } else {    g.setColor(c.getBackground());    g.fillRect(0,0,c.getWidth(),c.getHeight());  }  paint(g,c);}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode){  buf.append(m_val);}  }
class C{  public boolean isIndexMaintenanceSynchronous(){  return indexMaintenanceSynchronous;}  }
class C{  public HadoopSplitWrapper(int id,String clsName,byte[] bytes,String[] hosts){  assert hosts != null;  assert clsName != null;  assert bytes != null;  this.hosts=hosts;  this.id=id;  this.clsName=clsName;  this.bytes=bytes;}  }
class C{  public EventTimeSourceBuilder<T> emit(T elem,long timeStamp){  builder.emit(elem,timeStamp);  return this;}  }
class C{  public void scheduleFsync(long sequence,K key,Result<Boolean> result){  _requestSequence=Math.max(_requestSequence,sequence);  if (sequence <= _tailSequence) {    result.ok(Boolean.TRUE);  } else {    _storeFsync.addResult(key,result);  }}  }
class C{  public Version(Class<? extends Service> serviceClass,String versionDescription,Version... impliedVersions) throws IllegalArgumentException {  this.serviceClass=serviceClass;  Matcher matcher=VERSION_PROPERTY_PATTERN.matcher(versionDescription);  if (!matcher.matches()) {    throw new IllegalArgumentException("Version description does not match expected format" + "[{service}]{major}[.{minor}]:" + versionDescription);  }  String minorValue=matcher.group(3);  major=Integer.parseInt(matcher.group(2));  minor=(minorValue != null) ? Integer.parseInt(minorValue.substring(1)) : ANY;  computeImpliedVersions(impliedVersions);}  }
class C{  Page split(int at){  return isLeaf() ? splitLeaf(at) : splitNode(at);}  }
class C{  private static boolean supportsSSE41(TargetDescription target){  AMD64 arch=(AMD64)target.arch;  return arch.getFeatures().contains(CPUFeature.SSE4_1);}  }
class C{  public CustomRequest(String url,Class<T> clazz,Map<String,String> params,Response.Listener<T> listener,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  this.clazz=clazz;  this.headers=null;  this.params=params;  this.listener=listener;  this.mRequestBody=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.683 -0500",hash_original_method="3025739AB5329DC0A390687D4C2BFD5B",hash_generated_method="13B71AEB548DF52975090635E15697F9") public SIPHeader parse() throws ParseException {  RequireList requireList=new RequireList();  if (debug)   dbg_enter("RequireParser.parse");  try {    headerName(TokenTypes.REQUIRE);    while (lexer.lookAhead(0) != '\n') {      Require r=new Require();      r.setHeaderName(SIPHeaderNames.REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      requireList.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new Require();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        requireList.add(r);      }    }  }  finally {    if (debug)     dbg_leave("RequireParser.parse");  }  return requireList;}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){  long deadline;  if (Diff_Timeout <= 0) {    deadline=Long.MAX_VALUE;  } else {    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);  }  return diff_main(text1,text2,checklines,deadline);}  }
class C{  public void testLineWithLink() throws Exception {  final LinkInTrace linkInTrace=new PyTracebackParser().findLinkInTrace("File \"foo/bar.py\", line 42 failed");  Assert.assertNotNull("Failed to parse line",linkInTrace);  Assert.assertEquals("Bad file name","foo/bar.py",linkInTrace.getFileName());  Assert.assertEquals("Bad line number",42,linkInTrace.getLineNumber());  Assert.assertEquals("Bad start pos",6,linkInTrace.getStartPos());  Assert.assertEquals("Bad end pos",16,linkInTrace.getEndPos());}  }
class C{  private Point readPoint(OraGeom oraGeom,int elemIndex){  int etype=oraGeom.eType(elemIndex);  int interpretation=oraGeom.interpretation(elemIndex);  checkOrdinates(oraGeom,elemIndex,"Point");  checkETYPE(etype,OraGeom.ETYPE.POINT,"Point");  checkInterpretation(interpretation,OraGeom.INTERP.POINT,"Point");  CoordinateSequence seq=extractCoords(oraGeom,elemIndex);  return createPoint(seq);}  }
class C{  public User create(User newUser,boolean isTemporary) throws ConflictException, ServerException {  requireNonNull(newUser,"Required non-null user");  if (reservedNames.contains(newUser.getName().toLowerCase())) {    throw new ConflictException(String.format("Username '%s' is reserved",newUser.getName()));  }  final String userId=newUser.getId() != null ? newUser.getId() : generate("user",ID_LENGTH);  final UserImpl user=new UserImpl(userId,newUser.getEmail(),newUser.getName(),firstNonNull(newUser.getPassword(),generate("",PASSWORD_LENGTH)),newUser.getAliases());  try {    userDao.create(user);    profileDao.create(new ProfileImpl(user.getId()));    preferencesDao.setPreferences(user.getId(),ImmutableMap.of("temporary",Boolean.toString(isTemporary),"codenvy:created",Long.toString(currentTimeMillis())));  } catch (  ConflictException|ServerException x) {    try {      userDao.remove(user.getId());      profileDao.remove(user.getId());      preferencesDao.remove(user.getId());    } catch (    ConflictException|ServerException rollbackEx) {      LOG.error(format("An attempt to clean up resources due to user creation failure was unsuccessful." + "Now the system may be in inconsistent state. " + "User with id '%s' must not exist",user.getId()),rollbackEx);    }    throw x;  }  return user;}  }
class C{  public static double nextDown(final double start){  if (start > Double.NEGATIVE_INFINITY) {    if (start == 0.0) {      return -Double.MIN_VALUE;    }    final long bits=Double.doubleToRawLongBits(start);    return Double.longBitsToDouble(bits + (bits > 0 ? -1 : 1));  } else   if (start == Double.NEGATIVE_INFINITY) {    return Double.NEGATIVE_INFINITY;  } else {    return start;  }}  }
class C{  public int hashCode(){  return (username + realm).hashCode();}  }
class C{  private void updatePacketRecvAddress(DatagramPacket packet){  packet.setAddress(connectedAddress);  packet.setPort(connectedPort);}  }
class C{  public static KindName absentKind(int kind){switch (kind) {case ABSENT_VAR:    return KindName.VAR;case WRONG_MTHS:case WRONG_MTH:case ABSENT_MTH:case WRONG_STATICNESS:  return KindName.METHOD;case ABSENT_TYP:return KindName.CLASS;default :throw new AssertionError("Unexpected kind: " + kind);}}  }
class C{  private void handleRequestCompletion(Operation op,Throwable e){  if (hasOption(Service.ServiceOption.INSTRUMENTATION)) {    op.setHandlerCompletionTime(System.nanoTime() / 1000);  }  ServiceDocument linkedState=op.getLinkedState();  boolean isUpdate=op.getAction() != Action.GET && op.getAction() != Action.OPTIONS;  boolean isStateUpdated=isUpdate;  if (op.isFromReplication()) {    isStateUpdated=true;  }  if (op.getStatusCode() == Operation.STATUS_CODE_NOT_MODIFIED) {    isStateUpdated=false;  } else   if (op.getTransactionId() != null && linkedState != null && op.getTransactionId().equals(linkedState.documentTransactionId)) {    isStateUpdated=true;  }  if (e == null && isStateUpdated) {    try {      if (linkedState != null && !op.isFromReplication() && !hasOption(ServiceOption.CONCURRENT_UPDATE_HANDLING)) {        op.linkState(Utils.clone(op.getLinkedState()));      }      applyUpdate(op);      linkedState=op.getLinkedState();    } catch (    Throwable e1) {      logSevere(e1);      e=e1;    }  }  if (e != null) {    if (hasOption(Service.ServiceOption.INSTRUMENTATION)) {      adjustStat(op.getAction() + Service.STAT_NAME_FAILURE_COUNT,1);    }    processCompletionStageTransactionNotification(op,e);    return;  }  boolean processPending=true;  try {    if (op.getAction() == Action.DELETE && op.getTransactionId() == null && handleDeleteCompletion(op)) {      processPending=false;      return;    }    if (op.getAction() == Action.OPTIONS) {      handleOptionsCompletion(op);      return;    }    if (isStateUpdated && linkedState != null) {      if (linkedState.documentDescription != null) {        linkedState.documentDescription=null;      }      linkedState.documentSelfLink=this.context.selfLink;      linkedState.documentUpdateAction=op.getAction().name();      if (linkedState.documentKind == null) {        linkedState.documentKind=Utils.buildKind(this.context.stateType);      }      if (processCompletionStageReplicationProposal(op)) {        processPending=false;        return;      }      processPending=false;      processCompletionStageIndexing(op);    } else {      processCompletionStagePublishAndComplete(op);    }  }  finally {    if (!processPending) {      return;    }    processPending(op);  }}  }
class C{  @Override public void onAppWidgetOptionsChanged(Context context,AppWidgetManager appWidgetManager,int appWidgetId,Bundle newOptions){  Log.v("TAG","Changed widget dimensions");  updateWidget(context,appWidgetId,isSmallWidget(appWidgetManager,appWidgetId));  super.onAppWidgetOptionsChanged(context,appWidgetManager,appWidgetId,newOptions);}  }
class C{  private void outputPhases(Properties ctx,PrintWriter out,int projectID,int phaseID,boolean includeAny){  out.println("<phases projectID='" + projectID + "'>");  if (includeAny) {    out.println("<phase id='-1'");    if (phaseID == 0)     out.println(" selected='selected'");    out.println(">ANY</phase>");  }  if (projectID == 1)   out.println("<phase id='1'>Planning</phase>");  out.println("</phases>");}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + (forMatching ? 1231 : 1237);  result=prime * result + (ignoreIgnorable ? 1231 : 1237);  result=prime * result + (mergeExpressions ? 1231 : 1237);  result=prime * result + state;  return result;}  }
class C{  public static String formatMillis(int millis){  String result="";  int hr=millis / 3600000;  millis%=3600000;  int min=millis / 60000;  millis%=60000;  int sec=millis / 1000;  if (hr > 0) {    result+=hr + ":";  }  if (min >= 0) {    if (min > 9) {      result+=min + ":";    } else {      result+="0" + min + ":";    }  }  if (sec > 9) {    result+=sec;  } else {    result+="0" + sec;  }  return result;}  }
class C{  public static void storeProductConfigWrapper(ProductConfigWrapper configWrapper,Delegator delegator){  if (configWrapper == null || (!configWrapper.isCompleted()))   return;  String configId=null;  List<ConfigItem> questions=configWrapper.getQuestions();  List<GenericValue> configsToCheck=FastList.newInstance();  int selectedOptionSize=0;  for (  ConfigItem ci : questions) {    String configItemId=null;    Long sequenceNum=null;    List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();    List<ConfigOption> options=ci.getOptions();    if (ci.isStandard()) {      selectedOptions.addAll(options);    } else {      for (      ConfigOption oneOption : options) {        if (oneOption.isSelected()) {          selectedOptions.add(oneOption);        }      }    }    if (selectedOptions.size() > 0) {      selectedOptionSize+=selectedOptions.size();      configItemId=ci.getConfigItemAssoc().getString("configItemId");      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");      try {        List<GenericValue> configs=EntityQuery.use(delegator).from("ProductConfigConfig").where("configItemId",configItemId,"sequenceNum",sequenceNum).queryList();        for (        GenericValue productConfigConfig : configs) {          for (          ConfigOption oneOption : selectedOptions) {            String configOptionId=oneOption.configOption.getString("configOptionId");            if (productConfigConfig.getString("configOptionId").equals(configOptionId)) {              String comments=oneOption.getComments() != null ? oneOption.getComments() : "";              if ((UtilValidate.isEmpty(comments) && UtilValidate.isEmpty(productConfigConfig.getString("description"))) || comments.equals(productConfigConfig.getString("description"))) {                configsToCheck.add(productConfigConfig);              }            }          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }  }  if (UtilValidate.isNotEmpty(configsToCheck)) {    for (    GenericValue productConfigConfig : configsToCheck) {      String tempConfigId=productConfigConfig.getString("configId");      try {        List<GenericValue> tempResult=EntityQuery.use(delegator).from("ProductConfigConfig").where("configId",tempConfigId).queryList();        if (tempResult.size() == selectedOptionSize && configsToCheck.containsAll(tempResult)) {          List<GenericValue> configOptionProductOptions=EntityQuery.use(delegator).from("ConfigOptionProductOption").where("configId",tempConfigId).queryList();          if (UtilValidate.isNotEmpty(configOptionProductOptions)) {            for (            ConfigItem ci : questions) {              String configItemId=null;              Long sequenceNum=null;              List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();              List<ConfigOption> options=ci.getOptions();              if (ci.isStandard()) {                selectedOptions.addAll(options);              } else {                for (                ConfigOption oneOption : options) {                  if (oneOption.isSelected()) {                    selectedOptions.add(oneOption);                  }                }              }              boolean match=true;              for (              ProductConfigWrapper.ConfigOption anOption : selectedOptions) {                if (match && anOption.hasVirtualComponent()) {                  List<GenericValue> components=anOption.getComponents();                  for (                  GenericValue aComponent : components) {                    if (anOption.isVirtualComponent(aComponent)) {                      Map<String,String> componentOptions=anOption.getComponentOptions();                      String optionProductId=aComponent.getString("productId");                      String optionProductOptionId=componentOptions.get(optionProductId);                      String configOptionId=anOption.configOption.getString("configOptionId");                      configItemId=ci.getConfigItemAssoc().getString("configItemId");                      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");                      GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");                      configOptionProductOption.set("configId",tempConfigId);                      configOptionProductOption.set("configItemId",configItemId);                      configOptionProductOption.set("sequenceNum",sequenceNum);                      configOptionProductOption.set("configOptionId",configOptionId);                      configOptionProductOption.set("productId",optionProductId);                      configOptionProductOption.set("productOptionId",optionProductOptionId);                      if (!configOptionProductOptions.remove(configOptionProductOption)) {                        match=false;                        break;                      }                    }                  }                }              }              if (match && (UtilValidate.isEmpty(configOptionProductOptions))) {                configWrapper.configId=tempConfigId;                Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);                return;              }            }          } else {            configWrapper.configId=tempConfigId;            Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);            return;          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }  }  boolean nextId=true;  for (  ConfigItem ci : questions) {    String configItemId=null;    Long sequenceNum=null;    List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();    List<ConfigOption> options=ci.getOptions();    if (ci.isStandard()) {      selectedOptions.addAll(options);    } else {      for (      ConfigOption oneOption : options) {        if (oneOption.isSelected()) {          selectedOptions.add(oneOption);        }      }    }    if (selectedOptions.size() > 0) {      if (nextId) {        configId=delegator.getNextSeqId("ProductConfigConfig");        nextId=false;      }      configItemId=ci.getConfigItemAssoc().getString("configItemId");      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");      for (      ConfigOption oneOption : selectedOptions) {        List<GenericValue> toBeStored=FastList.newInstance();        String configOptionId=oneOption.configOption.getString("configOptionId");        String description=oneOption.getComments();        GenericValue productConfigConfig=delegator.makeValue("ProductConfigConfig");        productConfigConfig.put("configId",configId);        productConfigConfig.put("configItemId",configItemId);        productConfigConfig.put("sequenceNum",sequenceNum);        productConfigConfig.put("configOptionId",configOptionId);        productConfigConfig.put("description",description);        toBeStored.add(productConfigConfig);        if (oneOption.hasVirtualComponent()) {          List<GenericValue> components=oneOption.getComponents();          for (          GenericValue component : components) {            if (oneOption.isVirtualComponent(component)) {              String componentOption=oneOption.componentOptions.get(component.getString("productId"));              GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");              configOptionProductOption.put("configId",configId);              configOptionProductOption.put("configItemId",configItemId);              configOptionProductOption.put("sequenceNum",sequenceNum);              configOptionProductOption.put("configOptionId",configOptionId);              configOptionProductOption.put("productId",component.getString("productId"));              configOptionProductOption.put("productOptionId",componentOption);              toBeStored.add(configOptionProductOption);            }          }        }        try {          delegator.storeAll(toBeStored);        } catch (        GenericEntityException e) {          configId=null;          Debug.logWarning(e.getMessage(),module);        }      }    }  }  configWrapper.configId=configId;  Debug.logInfo("New configId created:" + configId,module);  return;}  }
class C{  DecodingException(final String cause){  super(cause);}  }
class C{  private void init(Condition condition){  ErrorSpecification defaultErrorSpecification=ErrorSpecification.specFor(condition);  this.condition=condition.value;  if (defaultErrorSpecification != null) {    this.type=defaultErrorSpecification.getType();    this.code=defaultErrorSpecification.getCode();  }}  }
class C{  private void resolveDependencies(Set<String> blackList){  while (!dependencies.isEmpty() && TimeController.getInstance().isThereStillTimeInThisPhase()) {    logger.debug("Dependencies left: {}",dependencies.size());    Iterator<DependencyPair> iterator=dependencies.iterator();    DependencyPair dependency=iterator.next();    iterator.remove();    if (analyzedClasses.contains(dependency.getDependencyClass().getRawClass())) {      continue;    }    String className=dependency.getDependencyClass().getClassName();    if (blackList.contains(className)) {      continue;    }    boolean added=false;    added=addDependencyClass(dependency.getDependencyClass(),dependency.getRecursion());    if (!added) {      blackList.add(className);    }  }}  }
class C{  public static void clearAppData(Context context){  DevicePolicyManager devicePolicyManager;  ComponentName demoDeviceAdmin;  Resources resources=context.getResources();  devicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);  demoDeviceAdmin=new ComponentName(context,AgentDeviceAdminReceiver.class);  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(context.getResources().getString(R.string.shared_pref_policy),resources.getString(R.string.shared_pref_default_string));  editor.putString(context.getResources().getString(R.string.shared_pref_isagreed),resources.getString(R.string.shared_pref_device_active));  editor.putString(context.getResources().getString(R.string.shared_pref_regId),resources.getString(R.string.shared_pref_default_string));  editor.putString(context.getResources().getString(R.string.shared_pref_registered),resources.getString(R.string.shared_pref_device_active));  editor.putString(context.getResources().getString(R.string.shared_pref_ip),resources.getString(R.string.shared_pref_default_string));  editor.putString(context.getResources().getString(R.string.shared_pref_sender_id),resources.getString(R.string.shared_pref_default_string));  editor.putString(context.getResources().getString(R.string.shared_pref_eula),resources.getString(R.string.shared_pref_default_string));  editor.commit();  devicePolicyManager.removeActiveAdmin(demoDeviceAdmin);}  }
class C{  private List parseArray(JsonLexer lexer){  List content=new ArrayList();  JsonToken currentToken;  for (; ; ) {    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a value on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated array.");    }    if (currentToken.getType() == OPEN_CURLY) {      content.add(parseObject(lexer));    } else     if (currentToken.getType() == OPEN_BRACKET) {      content.add(parseArray(lexer));    } else     if (currentToken.getType().ordinal() >= NULL.ordinal()) {      content.add(currentToken.getValue());    } else     if (currentToken.getType() == CLOSE_BRACKET) {      return content;    } else {      throw new JsonException("Expected a value, an array, or an object " + "on line: " + currentToken.getStartLine() + ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected " + CLOSE_BRACKET.getLabel() + " "+ "or "+ COMMA.getLabel()+ " "+ "on line: "+ lexer.getReader().getLine()+ ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated array.");    }    if (currentToken.getType() == CLOSE_BRACKET) {      break;    } else     if (currentToken.getType() != COMMA) {      throw new JsonException("Expected a value or " + CLOSE_BRACKET.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ " "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }  }  return content;}  }
class C{  private DirichletBayesIm(BayesPm bayesPm,DirichletBayesIm oldBayesIm,double symmetricAlpha) throws IllegalArgumentException {  if (bayesPm == null) {    throw new NullPointerException("BayesPm must not be null.");  }  this.bayesPm=new BayesPm(bayesPm);  Graph graph=bayesPm.getDag();  this.nodes=new Node[graph.getNumNodes()];  Iterator<Node> it=graph.getNodes().iterator();  for (int i=0; i < this.nodes.length; i++) {    this.nodes[i]=it.next();  }  initialize(oldBayesIm,symmetricAlpha);}  }
class C{  public FastStringBuffer replaceAll(String replace,String with){  int replaceLen=replace.length();  int withLen=with.length();  int matchPos=0;  for (int i=0; i < this.count; i++) {    if (this.value[i] == replace.charAt(matchPos)) {      matchPos++;      if (matchPos == replaceLen) {        this.replace(i - (replaceLen - 1),i + 1,with);        matchPos=0;        i=i - (replaceLen - withLen);      }      continue;    } else {      matchPos=0;    }  }  return this;}  }
class C{  public int hashCode(){  return (int)value;}  }
class C{  public void findTimexes(String timexType,HashMap<Pattern,String> hmPattern,HashMap<String,String> hmOffset,HashMap<String,String> hmNormalization,Sentence s,JCas jcas){  RuleManager rm=RuleManager.getInstance(language,find_temponyms);  HashMap<String,String> hmDatePosConstraint=rm.getHmDatePosConstraint();  HashMap<String,String> hmDurationPosConstraint=rm.getHmDurationPosConstraint();  HashMap<String,String> hmTimePosConstraint=rm.getHmTimePosConstraint();  HashMap<String,String> hmSetPosConstraint=rm.getHmSetPosConstraint();  HashMap<String,String> hmTemponymPosConstraint=rm.getHmTemponymPosConstraint();  HashMap<String,Pattern> hmDateFastCheck=rm.getHmDateFastCheck();  HashMap<String,Pattern> hmDurationFastCheck=rm.getHmDurationFastCheck();  HashMap<String,Pattern> hmTimeFastCheck=rm.getHmTimeFastCheck();  HashMap<String,Pattern> hmSetFastCheck=rm.getHmSetFastCheck();  HashMap<String,Pattern> hmTemponymFastCheck=rm.getHmTemponymFastCheck();  Pattern f=null;  Boolean fastCheckOK=true;  for (Iterator<Pattern> i=Toolbox.sortByValue(hmPattern).iterator(); i.hasNext(); ) {    Pattern p=(Pattern)i.next();    if (timexType.equals("DATE")) {      f=hmDateFastCheck.get(hmPattern.get(p));    } else     if (timexType.equals("Time")) {      f=hmTimeFastCheck.get(hmPattern.get(p));    } else     if (timexType.equals("DURATION")) {      f=hmDurationFastCheck.get(hmPattern.get(p));    } else     if (timexType.equals("SET")) {      f=hmSetFastCheck.get(hmPattern.get(p));    } else     if (timexType.equals("TEMPONYM")) {      f=hmTemponymFastCheck.get(hmPattern.get(p));    }    if (!(f == null)) {      fastCheckOK=false;      if (f.matcher(s.getCoveredText()).find()) {        fastCheckOK=true;      }    }    if (fastCheckOK) {      for (      MatchResult r : Toolbox.findMatches(p,s.getCoveredText())) {        boolean infrontBehindOK=ContextAnalyzer.checkTokenBoundaries(r,s,jcas) && ContextAnalyzer.checkInfrontBehind(r,s);        boolean posConstraintOK=true;        if (timexType.equals("DATE")) {          if (hmDatePosConstraint.containsKey(hmPattern.get(p))) {            posConstraintOK=checkPosConstraint(s,hmDatePosConstraint.get(hmPattern.get(p)),r,jcas);          }        } else         if (timexType.equals("DURATION")) {          if (hmDurationPosConstraint.containsKey(hmPattern.get(p))) {            posConstraintOK=checkPosConstraint(s,hmDurationPosConstraint.get(hmPattern.get(p)),r,jcas);          }        } else         if (timexType.equals("TIME")) {          if (hmTimePosConstraint.containsKey(hmPattern.get(p))) {            posConstraintOK=checkPosConstraint(s,hmTimePosConstraint.get(hmPattern.get(p)),r,jcas);          }        } else         if (timexType.equals("SET")) {          if (hmSetPosConstraint.containsKey(hmPattern.get(p))) {            posConstraintOK=checkPosConstraint(s,hmSetPosConstraint.get(hmPattern.get(p)),r,jcas);          }        } else         if (timexType.equals("TEMPONYM")) {          if (hmTemponymPosConstraint.containsKey(hmPattern.get(p))) {            posConstraintOK=checkPosConstraint(s,hmSetPosConstraint.get(hmPattern.get(p)),r,jcas);          }        }        if ((infrontBehindOK == true) && (posConstraintOK == true)) {          int timexStart=r.start();          int timexEnd=r.end();          if (hmOffset.containsKey(hmPattern.get(p))) {            String offset=hmOffset.get(hmPattern.get(p));            Pattern paOffset=Pattern.compile("group\\(([0-9]+)\\)-group\\(([0-9]+)\\)");            for (            MatchResult mr : Toolbox.findMatches(paOffset,offset)) {              int startOffset=Integer.parseInt(mr.group(1));              int endOffset=Integer.parseInt(mr.group(2));              timexStart=r.start(startOffset);              timexEnd=r.end(endOffset);            }          }          if (hmNormalization.containsKey(hmPattern.get(p))) {            String[] attributes=new String[5];            if (timexType.equals("DATE")) {              attributes=getAttributesForTimexFromFile(hmPattern.get(p),rm.getHmDateNormalization(),rm.getHmDateQuant(),rm.getHmDateFreq(),rm.getHmDateMod(),rm.getHmDateEmptyValue(),r,jcas);            } else             if (timexType.equals("DURATION")) {              attributes=getAttributesForTimexFromFile(hmPattern.get(p),rm.getHmDurationNormalization(),rm.getHmDurationQuant(),rm.getHmDurationFreq(),rm.getHmDurationMod(),rm.getHmDurationEmptyValue(),r,jcas);            } else             if (timexType.equals("TIME")) {              attributes=getAttributesForTimexFromFile(hmPattern.get(p),rm.getHmTimeNormalization(),rm.getHmTimeQuant(),rm.getHmTimeFreq(),rm.getHmTimeMod(),rm.getHmTimeEmptyValue(),r,jcas);            } else             if (timexType.equals("SET")) {              attributes=getAttributesForTimexFromFile(hmPattern.get(p),rm.getHmSetNormalization(),rm.getHmSetQuant(),rm.getHmSetFreq(),rm.getHmSetMod(),rm.getHmSetEmptyValue(),r,jcas);            } else             if (timexType.equals("TEMPONYM")) {              attributes=getAttributesForTimexFromFile(hmPattern.get(p),rm.getHmTemponymNormalization(),rm.getHmTemponymQuant(),rm.getHmTemponymFreq(),rm.getHmTemponymMod(),rm.getHmTemponymEmptyValue(),r,jcas);            }            if (!(attributes == null)) {              addTimexAnnotation(timexType,timexStart + s.getBegin(),timexEnd + s.getBegin(),s,attributes[0],attributes[1],attributes[2],attributes[3],attributes[4],"t" + timexID++,hmPattern.get(p),jcas);            }          } else {            Logger.printError("SOMETHING REALLY WRONG HERE: " + hmPattern.get(p));          }        }      }    }    fastCheckOK=true;  }}  }
class C{  public PKCS10CertificationRequest(byte[] bytes){  super(toDERSequence(bytes));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double gridRes;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  outputType=args[2].toLowerCase();  logTransform=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 2 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 3 of 3:",0);    oldProgress=-1;    if (outputType.contains("specific") || outputType.contains("sca")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (outputType.contains("total")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    if (logTransform) {      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  if (!(handler.getElemTemplateElement() instanceof Stylesheet)) {    msg="func:function element must be top level.";    handler.error(msg,new SAXException(msg));  }  super.startElement(handler,uri,localName,rawName,attributes);  String val=attributes.getValue("name");  int indexOfColon=val.indexOf(":");  if (indexOfColon > 0) {  } else {    msg="func:function name must have namespace";    handler.error(msg,new SAXException(msg));  }}  }
class C{  public JoinableTrips(final List<AcceptabilityCondition> conditions,final Map<Id,TripRecord> tripRecords){  this.distanceRadius=Double.NaN;  this.timeRadius=Double.NaN;  this.conditions=conditions;  this.tripRecords.putAll(tripRecords);}  }
class C{  public int hashCode(){  return (ref == null) ? super.hashCode() : ref.remoteHashCode();}  }
class C{  public double magnitude(){  return Math.sqrt(this.magnitudeSquared());}  }
class C{  public static BBOBFunction createInstance(int function,int dimension,int instance){  int rseed=function + 10000 * instance;  if (function == 1) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    BBOBFunction problem=new Sphere(dimension);    problem=new TransformVariablesShift(problem,xopt);    problem=new TransformObjectiveShift(problem,fopt);    return problem;  } else   if (function == 2) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    BBOBFunction problem=new Ellipsoid(dimension);    problem=new TransformVariablesOscillate(problem);    problem=new TransformVariablesShift(problem,xopt);    problem=new TransformObjectiveShift(problem,fopt);    return problem;  } else   if (function == 6) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] b=new double[dimension];    double[][] M=new double[dimension][dimension];    double[][] rot1=BBOBUtils.computeRotation(rseed + 1000000,dimension);    double[][] rot2=BBOBUtils.computeRotation(rseed,dimension);    for (int i=0; i < dimension; i++) {      b[i]=0.0;      for (int j=0; j < dimension; j++) {        M[i][j]=0.0;        for (int k=0; k < dimension; k++) {          double exponent=1.0 * k / (dimension - 1.0);          M[i][j]+=rot1[i][k] * Math.pow(Math.sqrt(10.0),exponent) * rot2[k][j];        }      }    }    BBOBFunction problem=new AttractiveSector(dimension,xopt);    problem=new TransformObjectiveOscillate(problem);    problem=new TransformObjectivePower(problem,0.9);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesShift(problem,xopt);    return problem;  } else   if (function == 8) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] minusOne=new double[dimension];    for (int i=0; i < dimension; i++) {      minusOne[i]=-1.0;      xopt[i]*=0.75;    }    BBOBFunction problem=new Rosenbrock(dimension);    problem=new TransformVariablesShift(problem,minusOne);    problem=new TransformVariablesScale(problem,Math.max(1.0,Math.sqrt(dimension / 8.0)));    problem=new TransformVariablesShift(problem,xopt);    problem=new TransformObjectiveShift(problem,fopt);    return problem;  } else   if (function == 13) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] b=new double[dimension];    double[][] M=new double[dimension][dimension];    double[][] rot1=BBOBUtils.computeRotation(rseed + 1000000,dimension);    double[][] rot2=BBOBUtils.computeRotation(rseed,dimension);    for (int i=0; i < dimension; i++) {      b[i]=0.0;      for (int j=0; j < dimension; j++) {        M[i][j]=0.0;        for (int k=0; k < dimension; k++) {          double exponent=1.0 * k / (dimension - 1.0);          M[i][j]+=rot1[i][k] * Math.pow(Math.sqrt(10.0),exponent) * rot2[k][j];        }      }    }    BBOBFunction problem=new SharpRidge(dimension);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesShift(problem,xopt);    return problem;  } else   if (function == 14) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] b=new double[dimension];    double[][] M=BBOBUtils.computeRotation(rseed + 1000000,dimension);    BBOBFunction problem=new DifferentPowers(dimension);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesShift(problem,xopt);    return problem;  } else   if (function == 15) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] zeros=new double[dimension];    double[] b=new double[dimension];    double[][] M=new double[dimension][dimension];    double[][] rot1=BBOBUtils.computeRotation(rseed + 1000000,dimension);    double[][] rot2=BBOBUtils.computeRotation(rseed,dimension);    for (int i=0; i < dimension; i++) {      b[i]=0.0;      for (int j=0; j < dimension; j++) {        M[i][j]=0.0;        for (int k=0; k < dimension; k++) {          double exponent=1.0 * k / (dimension - 1.0);          M[i][j]+=rot1[i][k] * Math.pow(Math.sqrt(10.0),exponent) * rot2[k][j];        }      }    }    BBOBFunction problem=new Rastrigin(dimension);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesAsymmetric(problem,0.2);    problem=new TransformVariablesOscillate(problem);    problem=new TransformVariablesAffine(problem,rot1,zeros);    problem=new TransformVariablesShift(problem,xopt);    return problem;  } else   if (function == 17) {    double[] xopt=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] zeros=new double[dimension];    double[] b=new double[dimension];    double[][] M=new double[dimension][dimension];    double[][] rot1=BBOBUtils.computeRotation(rseed + 1000000,dimension);    double[][] rot2=BBOBUtils.computeRotation(rseed,dimension);    for (int i=0; i < dimension; i++) {      b[i]=0.0;      for (int j=0; j < dimension; j++) {        double exponent=1.0 * i / (dimension - 1.0);        M[i][j]+=rot2[i][j] * Math.pow(Math.sqrt(10.0),exponent);      }    }    BBOBFunction problem=new Schaffers(dimension);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesAsymmetric(problem,0.5);    problem=new TransformVariablesAffine(problem,rot1,zeros);    problem=new TransformVariablesShift(problem,xopt);    problem=new TransformObjectivePenalize(problem,10.0);    return problem;  } else   if (function == 20) {    double[] tmp1=BBOBUtils.computeXOpt(rseed,dimension);    double fopt=BBOBUtils.computeFOpt(function,instance);    double[] xopt=new double[dimension];    double[] tmp2=new double[dimension];    double[] b=new double[dimension];    double[][] M=new double[dimension][dimension];    for (int i=0; i < dimension; i++) {      xopt[i]=0.5 * 4.2096874633;      if (tmp1[i] - 0.5 < 0.0) {        xopt[i]*=-1;      }    }    for (int i=0; i < dimension; i++) {      b[i]=0.0;      for (int j=0; j < dimension; j++) {        if (i == j) {          double exponent=1.0 * i / (dimension - 1.0);          M[i][j]+=Math.pow(Math.sqrt(10.0),exponent);        }      }    }    for (int i=0; i < dimension; i++) {      tmp1[i]=-2 * Math.abs(xopt[i]);      tmp2[i]=2 * Math.abs(xopt[i]);    }    BBOBFunction problem=new Schwefel(dimension);    problem=new TransformObjectiveShift(problem,fopt);    problem=new TransformVariablesScale(problem,100);    problem=new TransformVariablesShift(problem,tmp1);    problem=new TransformVariablesAffine(problem,M,b);    problem=new TransformVariablesShift(problem,tmp2);    problem=new TransformVariablesZHat(problem,xopt);    problem=new TransformVariablesScale(problem,2);    problem=new TransformVariablesXHat(problem,rseed);    return problem;  } else   if (function == 21) {    int numberOfPeaks=101;    double maxcondition=1000.0;    double maxcondition1=Math.sqrt(1000.0);    double b=10.0;    double c=5.0;    double[] fitvalues={1.1,9.1};    double[] xopt=new double[dimension];    double fopt=BBOBUtils.computeFOpt(function,instance);    double[][] xLocal=new double[dimension][numberOfPeaks];    double[][] arrScales=new double[numberOfPeaks][dimension];    double[][] rotation=BBOBUtils.computeRotation(rseed,dimension);    double[] gallagher_peaks=BBOBUtils.uniform(numberOfPeaks - 1,rseed);    List<Integer> rperm=new ArrayList<Integer>();    for (int i=0; i < numberOfPeaks - 1; i++) {      rperm.add(i);    }    Collections.sort(rperm,new GallagherPeakComprator(gallagher_peaks));    double[] arrCondition=new double[numberOfPeaks];    arrCondition[0]=maxcondition1;    double[] peaks=new double[numberOfPeaks];    peaks[0]=10;    for (int i=1; i < numberOfPeaks; i++) {      arrCondition[i]=Math.pow(maxcondition,rperm.get(i - 1) / (numberOfPeaks - 2.0));      peaks[i]=(i - 1.0) / (numberOfPeaks - 2.0) * (fitvalues[1] - fitvalues[0]) + fitvalues[0];    }    for (int i=0; i < numberOfPeaks; i++) {      rperm.clear();      gallagher_peaks=BBOBUtils.uniform(dimension,rseed + (1000 * i));      for (int j=0; j < dimension; j++) {        rperm.add(j);      }      Collections.sort(rperm,new GallagherPeakComprator(gallagher_peaks));      for (int j=0; j < dimension; j++) {        arrScales[i][j]=Math.pow(arrCondition[i],rperm.get(j) / (dimension - 1.0) - 0.5);      }    }    gallagher_peaks=BBOBUtils.uniform(dimension * numberOfPeaks,rseed);    for (int i=0; i < dimension; i++) {      xopt[i]=0.8 * (b * gallagher_peaks[i] - c);      for (int j=0; j < numberOfPeaks; j++) {        xLocal[i][j]=0.0;        for (int k=0; k < dimension; k++) {          xLocal[i][j]+=rotation[i][k] * (b * gallagher_peaks[j * dimension + k] - c);        }        if (j == 0) {          xLocal[i][j]*=0.8;        }      }    }    BBOBFunction problem=new Gallagher(dimension,rotation,xLocal,arrScales,peaks);    problem=new TransformObjectiveShift(problem,fopt);    return problem;  } else {    throw new FrameworkException("unknown BBOB function " + function);  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public void morphIntoFab(View fab,long hideSheetDuration,long hideSheetColorDuration,AnimationListener listener){  revealSheetWithFab(fab,getSheetRevealRadius(),getFabRevealRadius(fab),hideSheetDuration,sheetColor,fabColor,hideSheetColorDuration,listener);}  }
class C{  private static void cleanStaleHostReferences(ExportGroup exportGroup,DbClient dbClient){  StringSet exportGroupInitiators=exportGroup.getInitiators();  if (!CollectionUtils.isEmpty(exportGroup.getHosts()) && !CollectionUtils.isEmpty(exportGroupInitiators)) {    Set<String> egHosts=new HashSet<>();    Collection<Initiator> initiators=Collections2.transform(exportGroupInitiators,CommonTransformerFunctions.fctnStringToInitiator(dbClient));    for (    Initiator initiator : initiators) {      if (initiator.getHost() != null) {        egHosts.add(initiator.getHost().toString());      }    }    Set<String> staleHosts=Sets.difference(exportGroup.getHosts(),egHosts);    if (!CollectionUtils.isEmpty(staleHosts)) {      Collection<URI> staleHostURIs=Collections2.transform(staleHosts,CommonTransformerFunctions.FCTN_STRING_TO_URI);      exportGroup.removeHosts(new ArrayList<>(staleHostURIs));      _log.info("Stale host references {} will be removed from Export Group {}",staleHostURIs,exportGroup.getId());    }  }}  }
class C{  private PostgreSQLEdgeFunctions(){}  }
class C{  private static void swap(Object[] x,int a,int b){  Object t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  private void handle423IntervalTooBrief(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("423 response received");  }  SipResponse resp=ctx.getSipResponse();  mDialogPath.incrementCseq();  mExpirePeriod=SipUtils.getMinExpiresPeriod(resp);  if (sLogger.isActivated()) {    sLogger.info("Send new REGISTER");  }  SipRequest register=SipMessageFactory.createRegister(mDialogPath,mFeatureTags,mExpirePeriod,mInstanceId,mRcsSettings.isSipKeepAliveEnabled());  sendRegister(register);}  }
class C{  private boolean handleTouchEvent(MotionEvent ev){  DeviceProfile grid=mLauncher.getDeviceProfile();  int x=(int)ev.getX();  int y=(int)ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    if (!mContentBounds.isEmpty()) {      Rect tmpRect=new Rect(mContentBounds);      tmpRect.inset(-grid.allAppsIconSizePx / 2,0);      if (ev.getX() < tmpRect.left || ev.getX() > tmpRect.right) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    } else {      if (ev.getX() < getPaddingLeft() || ev.getX() > (getWidth() - getPaddingRight())) {        mBoundsCheckLastTouchDownPos.set(x,y);        return true;      }    }  break;case MotionEvent.ACTION_UP:if (mBoundsCheckLastTouchDownPos.x > -1) {  ViewConfiguration viewConfig=ViewConfiguration.get(getContext());  float dx=ev.getX() - mBoundsCheckLastTouchDownPos.x;  float dy=ev.getY() - mBoundsCheckLastTouchDownPos.y;  float distance=(float)Math.hypot(dx,dy);  if (distance < viewConfig.getScaledTouchSlop()) {    Launcher launcher=(Launcher)getContext();    launcher.showWorkspace(true);    return true;  }}case MotionEvent.ACTION_CANCEL:mBoundsCheckLastTouchDownPos.set(-1,-1);break;}return false;}  }
class C{  public static JPanel createDialogButtonPanel(JButton jbPositive,boolean resizable){  return createDialogButtonPanel((jbPositive == null ? null : new JButton[]{jbPositive}),resizable);}  }
class C{  public void dispose(){  final CommentManager commentManager=CommentManager.get(m_provider);  commentManager.unloadGlobalCodeNodeComment(m_codeNode,getGlobalCodeNodeComment());  commentManager.unloadLocalCodeNodeComment(m_codeNode,getLocalCodeNodeComment());  commentManager.removeListener(m_internalCommentListener);}  }
class C{  private static long convertHexFloatingPointLiteralToBits(char[] source){  int length=source.length;  long mantissa=0;  int next=0;  char nextChar=source[next];  nextChar=source[next];  if (nextChar == '0') {    next++;  } else {    throw new NumberFormatException();  }  nextChar=source[next];  if (nextChar == 'X' || nextChar == 'x') {    next++;  } else {    throw new NumberFormatException();  }  int binaryPointPosition=-1;  loop:   while (true) {    nextChar=source[next];switch (nextChar) {case '0':      next++;    continue loop;case '.':  binaryPointPosition=next;next++;continue loop;default :break loop;}}int mantissaBits=0;int leadingDigitPosition=-1;loop: while (true) {nextChar=source[next];int hexdigit;switch (nextChar) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':hexdigit=nextChar - '0';break;case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':hexdigit=(nextChar - 'a') + 10;break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':hexdigit=(nextChar - 'A') + 10;break;case '.':binaryPointPosition=next;next++;continue loop;default :if (binaryPointPosition < 0) {binaryPointPosition=next;}break loop;}if (mantissaBits == 0) {leadingDigitPosition=next;mantissa=hexdigit;mantissaBits=4;} else if (mantissaBits < 60) {mantissa<<=4;mantissa|=hexdigit;mantissaBits+=4;} else {}next++;continue loop;}nextChar=source[next];if (nextChar == 'P' || nextChar == 'p') {next++;} else {throw new NumberFormatException();}int exponent=0;int exponentSign=+1;loop: while (next < length) {nextChar=source[next];switch (nextChar) {case '+':exponentSign=+1;next++;continue loop;case '-':exponentSign=-1;next++;continue loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':int digit=nextChar - '0';exponent=(exponent * 10) + digit;next++;continue loop;default :break loop;}}boolean doublePrecision=true;if (next < length) {nextChar=source[next];switch (nextChar) {case 'f':case 'F':doublePrecision=false;next++;break;case 'd':case 'D':doublePrecision=true;next++;break;default :throw new NumberFormatException();}}if (mantissa == 0) {return 0L;}int scaleFactorCompensation=0;long top=(mantissa >>> (mantissaBits - 4));if ((top & 0x8) == 0) {mantissaBits--;scaleFactorCompensation++;if ((top & 0x4) == 0) {mantissaBits--;scaleFactorCompensation++;if ((top & 0x2) == 0) {mantissaBits--;scaleFactorCompensation++;}}}long result=0L;if (doublePrecision) {long fraction;if (mantissaBits > DOUBLE_PRECISION) {int extraBits=mantissaBits - DOUBLE_PRECISION;fraction=mantissa >>> (extraBits - 1);long lowBit=fraction & 0x1;fraction+=lowBit;fraction=fraction >>> 1;if ((fraction & (1L << DOUBLE_PRECISION)) != 0) {fraction=fraction >>> 1;scaleFactorCompensation-=1;}} else {fraction=mantissa << (DOUBLE_PRECISION - mantissaBits);}int scaleFactor=0;if (mantissaBits > 0) {if (leadingDigitPosition < binaryPointPosition) {scaleFactor=4 * (binaryPointPosition - leadingDigitPosition);scaleFactor-=scaleFactorCompensation;} else {scaleFactor=-4 * (leadingDigitPosition - binaryPointPosition - 1);scaleFactor-=scaleFactorCompensation;}}int e=(exponentSign * exponent) + scaleFactor;if (e - 1 > MAX_DOUBLE_EXPONENT) {result=Double.doubleToLongBits(Double.POSITIVE_INFINITY);} else if (e - 1 >= MIN_NORMALIZED_DOUBLE_EXPONENT) {long biasedExponent=e - 1 + DOUBLE_EXPONENT_BIAS;result=fraction & ~(1L << DOUBLE_FRACTION_WIDTH);result|=(biasedExponent << DOUBLE_EXPONENT_SHIFT);} else if (e - 1 > MIN_UNNORMALIZED_DOUBLE_EXPONENT) {long biasedExponent=0;result=fraction >>> (MIN_NORMALIZED_DOUBLE_EXPONENT - e + 1);result|=(biasedExponent << DOUBLE_EXPONENT_SHIFT);} else {result=Double.doubleToLongBits(Double.NaN);}return result;}long fraction;if (mantissaBits > SINGLE_PRECISION) {int extraBits=mantissaBits - SINGLE_PRECISION;fraction=mantissa >>> (extraBits - 1);long lowBit=fraction & 0x1;fraction+=lowBit;fraction=fraction >>> 1;if ((fraction & (1L << SINGLE_PRECISION)) != 0) {fraction=fraction >>> 1;scaleFactorCompensation-=1;}} else {fraction=mantissa << (SINGLE_PRECISION - mantissaBits);}int scaleFactor=0;if (mantissaBits > 0) {if (leadingDigitPosition < binaryPointPosition) {scaleFactor=4 * (binaryPointPosition - leadingDigitPosition);scaleFactor-=scaleFactorCompensation;} else {scaleFactor=-4 * (leadingDigitPosition - binaryPointPosition - 1);scaleFactor-=scaleFactorCompensation;}}int e=(exponentSign * exponent) + scaleFactor;if (e - 1 > MAX_SINGLE_EXPONENT) {result=Float.floatToIntBits(Float.POSITIVE_INFINITY);} else if (e - 1 >= MIN_NORMALIZED_SINGLE_EXPONENT) {long biasedExponent=e - 1 + SINGLE_EXPONENT_BIAS;result=fraction & ~(1L << SINGLE_FRACTION_WIDTH);result|=(biasedExponent << SINGLE_EXPONENT_SHIFT);} else if (e - 1 > MIN_UNNORMALIZED_SINGLE_EXPONENT) {long biasedExponent=0;result=fraction >>> (MIN_NORMALIZED_SINGLE_EXPONENT - e + 1);result|=(biasedExponent << SINGLE_EXPONENT_SHIFT);} else {result=Float.floatToIntBits(Float.NaN);}return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.212 -0500",hash_original_method="41C6950B308582DB9C9A99E22648CC08",hash_generated_method="CB1212C9E00CED60E958D8E65D773551") private void nativeReceivedResponse(int nativeResponse){  addTaint(nativeResponse);}  }
class C{  public DisposableObjectMap(){  super();}  }
class C{  public void initialise(int k) throws Exception {  this.k=k;  addedMoreThanOneObservationSet=false;}  }
class C{  @Override protected void onResume(){  checkNotificationSetting();  if (db.getNoteServerSyncHelper().isSyncPossible()) {    synchronize();  }  super.onResume();}  }
class C{  private void handleOnOffSwitchClick(int idx,boolean action){  listener.onSwitchClick(idx,action);}  }
class C{  private int newIndex(int i,int n){  return (2 * i + 1) % (n | 1);}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  public ConnectionTcp findConnectionByThreadId(long threadId){  ArrayList<ConnectionTcp> connList=new ArrayList<ConnectionTcp>(_activeConnectionSet.keySet());  return null;}  }
class C{  public void store(Offset val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public IonIndependenceFacts(Node x,Node y,Collection<List<Node>> z){  if (x == null || y == null || z == null) {    throw new NullPointerException();  }  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public ResponseMessage optionsObject(OptionsRequest optionsRequest){  assertParameterNotNull(optionsRequest,"optionsRequest");  String bucketName=optionsRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  @SuppressWarnings("deprecation") RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.OPTIONS).setBucket(bucketName).setKey(optionsRequest.getObjectName()).addHeader(OSSHeaders.ORIGIN,optionsRequest.getOrigin()).addHeader(OSSHeaders.ACCESS_CONTROL_REQUEST_METHOD,optionsRequest.getRequestMethod().name()).addHeader(OSSHeaders.ACCESS_CONTROL_REQUEST_HEADER,optionsRequest.getRequestHeaders()).setOriginalRequest(optionsRequest).build();  return doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  @Override protected void populateOperationDescriptor(Descriptor desc,Method method,String beanKey){  Method resolvedOperation=findJmxMethod(method,beanKey);  ManagedOperation mo=this.attributeSource.getManagedOperation(resolvedOperation);  if (mo != null) {    applyCurrencyTimeLimit(desc,mo.getCurrencyTimeLimit());  }}  }
class C{  public void clear(final boolean needPacking){  final Iterator<Table> it=this.columns.iterator();  int i=0;  while (it.hasNext()) {    final Table t=it.next();    if (i >= 3) {      t.dispose();      it.remove();    } else {      if (i != 0) {        t.setData(null);      }      t.deselectAll();    }    i++;  }  this.updateContent();  if (needPacking) {    this.composite.pack();    this.setMinSize(this.composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));  }  this.columns.get(0).forceFocus();}  }
class C{  private static void ReleaseLongArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseLongArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    long[] sourceArray=(long[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if (releaseMode == 0 || releaseMode == 1) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_LONG);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private void jbInit() throws Exception {  this.setName("Login");  titleLabel.setFont(new java.awt.Font("Serif",2,10));  titleLabel.setForeground(Color.blue);  titleLabel.setRequestFocusEnabled(false);  titleLabel.setToolTipText(Adempiere.getURL());  titleLabel.setHorizontalTextPosition(SwingConstants.CENTER);  titleLabel.setIcon(Adempiere.getImageIconLogo());  titleLabel.setText(Adempiere.getSubtitle());  titleLabel.setVerticalTextPosition(SwingConstants.BOTTOM);  versionLabel.setRequestFocusEnabled(false);  versionLabel.setHorizontalAlignment(SwingConstants.RIGHT);  versionLabel.setHorizontalTextPosition(SwingConstants.RIGHT);  hostLabel.setRequestFocusEnabled(false);  hostLabel.setLabelFor(hostField);  hostField.addActionListener(this);  userLabel.setRequestFocusEnabled(false);  userLabel.setLabelFor(userTextField);  passwordLabel.setRequestFocusEnabled(false);  passwordLabel.setLabelFor(passwordField);  languageLabel.setLabelFor(languageCombo);  copy0Label.setFont(new java.awt.Font("Serif",2,10));  copy0Label.setForeground(Color.blue);  copy0Label.setRequestFocusEnabled(false);  copy1Label.setRequestFocusEnabled(false);  roleLabel.setRequestFocusEnabled(false);  roleLabel.setLabelFor(roleCombo);  clientLabel.setRequestFocusEnabled(false);  orgLabel.setRequestFocusEnabled(false);  dateLabel.setRequestFocusEnabled(false);  warehouseLabel.setRequestFocusEnabled(false);  printerLabel.setRequestFocusEnabled(false);  compileDate.setHorizontalAlignment(SwingConstants.RIGHT);  compileDate.setHorizontalTextPosition(SwingConstants.RIGHT);  compileDate.setText(Adempiere.DATE_VERSION);  compileDate.setToolTipText(Adempiere.getImplementationVendor());  southPanel.setLayout(southLayout);  loginTabPane.addChangeListener(this);  connectionPanel.setLayout(connectionLayout);  titleLabel.setHorizontalAlignment(SwingConstants.CENTER);  versionLabel.setText(Adempiere.MAIN_VERSION);  versionLabel.setToolTipText(Adempiere.getImplementationVersion());  hostLabel.setHorizontalAlignment(SwingConstants.RIGHT);  hostLabel.setText("Host");  hostLabel.setLabelFor(hostField);  connectionPanel.add(hostLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  connectionPanel.add(hostField,new GridBagConstraints(1,2,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  userLabel.setHorizontalAlignment(SwingConstants.RIGHT);  userLabel.setText("User");  userLabel.setLabelFor(userTextField);  connectionPanel.add(userLabel,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  userTextField.setText("System");  connectionPanel.add(userTextField,new GridBagConstraints(1,3,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  passwordLabel.setHorizontalAlignment(SwingConstants.RIGHT);  passwordLabel.setText("Password");  passwordLabel.setLabelFor(passwordField);  connectionPanel.add(passwordLabel,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  passwordField.setText("System");  connectionPanel.add(passwordField,new GridBagConstraints(1,4,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  languageLabel.setHorizontalAlignment(SwingConstants.RIGHT);  languageLabel.setText("Language");  languageLabel.setLabelFor(languageCombo);  languageCombo.addActionListener(this);  connectionPanel.add(languageLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  connectionPanel.add(languageCombo,new GridBagConstraints(1,5,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  copy0Label.setHorizontalAlignment(SwingConstants.RIGHT);  connectionPanel.add(copy0Label,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  copy1Label.setText(Adempiere.COPYRIGHT);  connectionPanel.add(copy1Label,new GridBagConstraints(1,6,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,12,12),0,0));  connectionPanel.add(compileDate,new GridBagConstraints(2,1,2,1,0.0,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(2,0,0,12),0,0));  connectionPanel.add(titleLabel,new GridBagConstraints(0,0,2,2,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  connectionPanel.add(versionLabel,new GridBagConstraints(2,0,2,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,5,0,12),0,0));  loginTabPane.add(connectionPanel,res.getString("Connection"));  defaultPanel.setLayout(defaultPanelLayout);  roleLabel.setText("Role");  roleLabel.setHorizontalAlignment(SwingConstants.RIGHT);  roleLabel.setLabelFor(roleCombo);  roleCombo.addActionListener(this);  defaultPanel.add(roleLabel,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  defaultPanel.add(roleCombo,new GridBagConstraints(1,0,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(12,0,5,12),0,0));  clientLabel.setText("Client");  clientLabel.setHorizontalAlignment(SwingConstants.RIGHT);  clientLabel.setLabelFor(clientCombo);  defaultPanel.add(clientLabel,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  clientCombo.addActionListener(this);  defaultPanel.add(clientCombo,new GridBagConstraints(1,1,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  orgLabel.setText("Organization");  orgLabel.setHorizontalAlignment(SwingConstants.RIGHT);  orgLabel.setLabelFor(orgCombo);  defaultPanel.add(orgLabel,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  orgCombo.addActionListener(this);  defaultPanel.add(orgCombo,new GridBagConstraints(1,2,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  dateLabel.setText("Date");  dateLabel.setHorizontalAlignment(SwingConstants.RIGHT);  dateLabel.setLabelFor(dateField);  defaultPanel.add(dateLabel,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  defaultPanel.add(dateField,new GridBagConstraints(1,4,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  warehouseLabel.setText("Warehouse");  warehouseLabel.setHorizontalAlignment(SwingConstants.RIGHT);  warehouseLabel.setLabelFor(warehouseCombo);  printerLabel.setText("Printer");  printerLabel.setHorizontalAlignment(SwingConstants.RIGHT);  printerLabel.setLabelFor(printerField);  defaultPanel.add(printerLabel,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,12,5),0,0));  defaultPanel.add(printerField,new GridBagConstraints(1,5,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,12,12),0,0));  defaultPanel.add(warehouseLabel,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,12,5,5),0,0));  defaultPanel.add(warehouseCombo,new GridBagConstraints(1,3,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,12),0,0));  loginTabPane.add(defaultPanel,res.getString("Defaults"));  this.getContentPane().add(mainPanel);  mainPanel.add(loginTabPane,BorderLayout.CENTER);  mainPanel.setName("loginMainPanel");  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(confirmPanel,BorderLayout.NORTH);  southPanel.add(statusBar,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  CButton helpBtn=new CButton(Env.getImageIcon2("Help24"));  helpBtn.setActionCommand("onlineLoginHelp");  helpBtn.addActionListener(this);  helpBtn.setToolTipText(res.getString("Help"));  confirmPanel.addComponent(helpBtn);  statusBar.setStatusDB(null);}  }
class C{  public char consume(){  return queue.charAt(pos++);}  }
class C{  private void createJournalEntriesForRepaymentsAndWriteOffs(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office,final boolean writeOff,final boolean isIncomeFromFee){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal principalAmount=loanTransactionDTO.getPrincipal();  final BigDecimal interestAmount=loanTransactionDTO.getInterest();  final BigDecimal feesAmount=loanTransactionDTO.getFees();  final BigDecimal penaltiesAmount=loanTransactionDTO.getPenalties();  final BigDecimal overPaymentAmount=loanTransactionDTO.getOverPayment();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  final boolean isReversal=loanTransactionDTO.isReversed();  BigDecimal totalDebitAmount=new BigDecimal(0);  Map<GLAccount,BigDecimal> accountMap=new HashMap<>();  if (principalAmount != null && !(principalAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(principalAmount);    GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),paymentTypeId);    accountMap.put(account,principalAmount);  }  if (interestAmount != null && !(interestAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(interestAmount);    GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_RECEIVABLE.getValue(),paymentTypeId);    if (accountMap.containsKey(account)) {      BigDecimal amount=accountMap.get(account).add(interestAmount);      accountMap.put(account,amount);    } else {      accountMap.put(account,interestAmount);    }  }  if (feesAmount != null && !(feesAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(feesAmount);    if (isIncomeFromFee) {      GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.getValue(),paymentTypeId);      if (accountMap.containsKey(account)) {        BigDecimal amount=accountMap.get(account).add(feesAmount);        accountMap.put(account,amount);      } else {        accountMap.put(account,feesAmount);      }    } else {      GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.FEES_RECEIVABLE.getValue(),paymentTypeId);      if (accountMap.containsKey(account)) {        BigDecimal amount=accountMap.get(account).add(feesAmount);        accountMap.put(account,amount);      } else {        accountMap.put(account,feesAmount);      }    }  }  if (penaltiesAmount != null && !(penaltiesAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(penaltiesAmount);    if (isIncomeFromFee) {      GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.getValue(),paymentTypeId);      if (accountMap.containsKey(account)) {        BigDecimal amount=accountMap.get(account).add(penaltiesAmount);        accountMap.put(account,amount);      } else {        accountMap.put(account,penaltiesAmount);      }    } else {      GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.PENALTIES_RECEIVABLE.getValue(),paymentTypeId);      if (accountMap.containsKey(account)) {        BigDecimal amount=accountMap.get(account).add(penaltiesAmount);        accountMap.put(account,amount);      } else {        accountMap.put(account,penaltiesAmount);      }    }  }  if (overPaymentAmount != null && !(overPaymentAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(overPaymentAmount);    GLAccount account=this.helper.getLinkedGLAccountForLoanProduct(loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.OVERPAYMENT.getValue(),paymentTypeId);    if (accountMap.containsKey(account)) {      BigDecimal amount=accountMap.get(account).add(overPaymentAmount);      accountMap.put(account,amount);    } else {      accountMap.put(account,overPaymentAmount);    }  }  for (  Entry<GLAccount,BigDecimal> entry : accountMap.entrySet()) {    this.helper.createCreditJournalEntryOrReversalForLoan(office,currencyCode,loanId,transactionId,transactionDate,entry.getValue(),isReversal,entry.getKey());  }  if (!(totalDebitAmount.compareTo(BigDecimal.ZERO) == 0)) {    if (writeOff) {      this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.LOSSES_WRITTEN_OFF.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);    } else {      if (loanTransactionDTO.isLoanToLoanTransfer()) {        this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,FINANCIAL_ACTIVITY.ASSET_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);      } else       if (loanTransactionDTO.isAccountTransfer()) {        this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,FINANCIAL_ACTIVITY.LIABILITY_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);      } else {        this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,ACCRUAL_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);      }    }  }}  }
class C{  protected Element createNestedText(DescriptorTag tag,String text){  Element element=new Element(tag.getTagName(),tag.getTagNamespace());  element.setText(text);  return element;}  }
class C{  public SAXModifier(boolean pruneElements){  this.pruneElements=pruneElements;}  }
class C{  public int readMinimalBinary(final int b) throws IOException {  return readMinimalBinary(b,Fast.mostSignificantBit(b));}  }
class C{  @Override public void write(final int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        final int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public static String createHash(char[] password) throws NoSuchAlgorithmException, InvalidKeySpecException {  SecureRandom random=new SecureRandom();  byte[] salt=new byte[SALT_BYTE_SIZE];  random.nextBytes(salt);  byte[] hash=pbkdf2(password,salt,PBKDF2_ITERATIONS,HASH_BYTE_SIZE);  return PBKDF2_ITERATIONS + ":" + toHex(salt)+ ":"+ toHex(hash);}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  private void initData(List<GoodsListBean> tempList){  mList.clear();  GoodsModel[] g=tempList.get(0).getPosts();  nexPage=tempList.get(0).getNext();  TOTAL_COUNTER=tempList.get(0).getCount();  ArrayList<GoodsModel> tempAL=new ArrayList<>();  for (int i=0; i < g.length; i++)   tempAL.add(g[i]);  addItems(tempAL);  goodsListAdapter=new GoodsListAdapter(this,mList);  mHeaderAndFooterRecyclerViewAdapter=new HeaderAndFooterRecyclerViewAdapter(goodsListAdapter);  recyclerView.setAdapter(mHeaderAndFooterRecyclerViewAdapter);  recyclerView.addOnScrollListener(mOnScrollListener);  mCurrentCounter=mList.size();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double heightIncrement=0;  double currentMaxVal=0;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      heightIncrement=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=0;          maxValDist=0;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              maxValDist=dist;              flag=false;            }          } while (flag);          oldDist=dist;          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              if (dist < maxValDist || maxValDist == 0) {                maxValDist=dist;              }              flag=false;            }          } while (flag);          if (maxValDist == 0) {            if (dist > oldDist) {              maxValDist=-dist;            } else {              maxValDist=-oldDist;            }          }          output.setValue(row,col,maxValDist);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static long clamp(long value,long a,long b){  long min=(a > b) ? b : a;  long max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public boolean isObject(){  return rawClass.equals(Object.class);}  }
class C{  public char loadChar(Offset offset){  return (char)0;}  }
class C{  public static String cleanWhitespace(String in){  char[] inArray=in.toCharArray();  StringBuffer out=new StringBuffer(inArray.length);  boolean lastWasSpace=false;  for (int i=0; i < inArray.length; i++) {    char c=inArray[i];    if (Character.isWhitespace(c)) {      if (!lastWasSpace)       out.append(' ');      lastWasSpace=true;    } else {      out.append(c);      lastWasSpace=false;    }  }  return out.toString();}  }
class C{  public int compareSwappedTo(DoubleIntPair other){  int fdiff=this.second - other.second;  if (fdiff != 0) {    return fdiff;  }  return Double.compare(this.second,other.second);}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ ",rows="+ rows+ ",cols="+ cols+ "]";}  }
class C{  public void testSize0ContinuousMode() throws Exception {  processSize0Test(DeploymentMode.CONTINUOUS);}  }
class C{  @Override protected UIComponent createComponent(FacesContext context,String newId){  UIComponent component;  Application application=context.getApplication();  if (binding != null) {    ValueBinding vb=application.createValueBinding(binding);    component=application.createComponent(vb,context,getComponentType());    component.setValueBinding("binding",vb);  } else {    component=application.createComponent(getComponentType());  }  component.setId(newId);  setProperties(component);  return component;}  }
class C{  public void testGetF28Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF28Momentary();  assertEquals(expResult,result);}  }
class C{  public static LazySortedSetX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public DigitalOut createDigitalOut(){  return new SimpleDigitalOut();}  }
class C{  public void addToCourseOfferings(CourseOffering co,Boolean isOwner,Boolean canDelete){  this.courseOfferingIds.add(co.getUniqueId().toString());  this.courseOfferingNames.add((co.getCourseNameWithTitle()));  this.ownedCourse.add(isOwner);  this.resvId.add("");  this.limits.add(co.getReservation() == null ? "" : co.getReservation().toString());  this.requested.add("");  this.projected.add(co.getProjectedDemand() == null ? "" : co.getProjectedDemand().toString());  this.lastTerm.add(co.getDemand() == null ? "" : co.getDemand().toString());  this.canDelete.add(canDelete);}  }
class C{  public TIntObjectHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public static void writeFile(Document doc,String path) throws IOException {  File f=new File(path);  FileOutputStream fos=new FileOutputStream(f);  try {    TransformerFactory tFactory=TransformerFactory.newInstance();    Transformer transformer=tFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    DOMSource source=new DOMSource(doc);    StreamResult result=new StreamResult(fos);    transformer.transform(source,result);  } catch (  Exception ex) {    throw new IOException("Problem with XML-Transformer: " + ex.toString());  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_countMatchPattern)   m_countMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_format_avt)   m_format_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_fromMatchPattern)   m_fromMatchPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSeparator_avt)   m_groupingSeparator_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_groupingSize_avt)   m_groupingSize_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lettervalue_avt)   m_lettervalue_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_valueExpr)   m_valueExpr.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  public static void pause(int src,double delay){  SimEvent e=new SimEvent(SimEvent.HOLD_DONE,clock + delay,src);  future.addEvent(e);  entities.get(src).setState(SimEntity.HOLDING);}  }
class C{  public boolean isSubject(){  return typeString.startsWith(SUBJECT);}  }
class C{  public Value createBlob(InputStream x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=session.getDataHandler().getLobStorage().createBlob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  public boolean doAccessibleAction(int i){  if (i == 0 && isValid() == true) {    URL u=(URL)getAccessibleActionObject(i);    if (u != null) {      HyperlinkEvent linkEvent=new HyperlinkEvent(JEditorPane.this,HyperlinkEvent.EventType.ACTIVATED,u);      JEditorPane.this.fireHyperlinkUpdate(linkEvent);      return true;    }  }  return false;}  }
class C{  private void init(boolean showExample){  try {    jbInit();    dynInit();    example.setVisible(showExample);    blindLabel.setVisible(showExample);    blindField.setVisible(showExample);    AdempierePLAF.showCenterScreen(this);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public void cancelAutoCompletion(){  if (inCompletion) {    textField.setText(textBefore);    textField.setCaretPosition(caretPosBefore);    prevCompletion=null;    prevCompletionIndex=0;    inCompletion=false;  }}  }
class C{  public static void save(Tree t,List<String> ruleNames,String fileName,String fontName,int fontSize) throws IOException {  writePS(t,ruleNames,fileName,fontName,fontSize);}  }
class C{  public void mapDatasetToDomainAxis(int index,int axisIndex){  List<Integer> axisIndices=new java.util.ArrayList<Integer>(1);  axisIndices.add(axisIndex);  mapDatasetToDomainAxes(index,axisIndices);}  }
class C{  public void testMultiplyScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="92000312286217574978643009574114545567010139156902666284589309.1880727173060570190220616";  int cScale=25;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public long entriesCount(@Nullable String spaceName,Set<Integer> parts){  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? -1 : m.size(parts);}  }
class C{  public EntryKind createEntryKindFromString(EDataType eDataType,String initialValue){  EntryKind result=EntryKind.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private AlarmEvent unblock(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_BLOCKED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_UNBLOCKING);  }  return null;}  }
class C{  private String abbreviateDescription(String description){  if (description == null) {    return null;  }  if (description.length() <= 200) {    return description;  }  return description.substring(0,197) + "...";}  }
class C{  private void verifyPasswordRecoveryMails(int index,int paramsCount,EmailType mailType){  assertEquals(mailType,sendedMails.get(index).getEmailType());  assertEquals(paramsCount,sendedMails.get(index).getParams().length);}  }
class C{  public void focusGained(FocusEvent e){  if (log.isDebugEnabled()) {    log.debug("focusGained");  }  if (mValue instanceof JTextField) {    JTextField tempField=(JTextField)mValue;    originalValue=tempField.getText();  }}  }
class C{  public ItemStack fillFluidItemStack(ItemStack container,StoredFluidStack fill,INetworkCache network,ActionType action){  if (FluidContainerRegistry.isContainer(container)) {    return fillFluidContainer(container,fill,network,action);  } else   if ((container.getItem() instanceof IFluidContainerItem)) {    return fillFluidHandler(container,fill,network,action);  }  return container;}  }
class C{  public TreeVisualizer(TreeDisplayListener tdl,String dot,NodePlace p){  super();  initialize();  if (m_ShowBorder) {    setBorder(BorderFactory.createTitledBorder("Tree View"));  }  m_listener=tdl;  TreeBuild builder=new TreeBuild();  Node n=null;  n=builder.create(new StringReader(dot));  m_highlightNode=5;  m_topNode=n;  m_placer=p;  m_placer.place(m_topNode);  m_viewPos=new Dimension(0,0);  m_viewSize=new Dimension(800,600);  m_nViewPos=new Dimension(0,0);  m_nViewSize=new Dimension(800,600);  m_scaling=0;  m_numNodes=Node.getCount(m_topNode,0);  m_numLevels=Node.getHeight(m_topNode,0);  m_nodes=new NodeInfo[m_numNodes];  m_edges=new EdgeInfo[m_numNodes - 1];  arrayFill(m_topNode,m_nodes,m_edges);  changeFontSize(12);  m_mouseState=0;  m_oldMousePos=new Dimension(0,0);  m_newMousePos=new Dimension(0,0);  m_frameLimiter=new Timer(120,this);  m_winMenu=new JPopupMenu();  m_topN=new JMenuItem("Center on Top Node");  m_topN.setActionCommand("Center on Top Node");  m_fitToScreen=new JMenuItem("Fit to Screen");  m_fitToScreen.setActionCommand("Fit to Screen");  m_selectFont=new JMenu("Select Font");  m_selectFont.setActionCommand("Select Font");  m_autoScale=new JMenuItem("Auto Scale");  m_autoScale.setActionCommand("Auto Scale");  m_selectFontGroup=new ButtonGroup();  m_accept=new JMenuItem("Accept The Tree");  m_accept.setActionCommand("Accept The Tree");  m_winMenu.add(m_topN);  m_winMenu.addSeparator();  m_winMenu.add(m_fitToScreen);  m_winMenu.add(m_autoScale);  m_winMenu.addSeparator();  m_winMenu.add(m_selectFont);  if (m_listener != null) {    m_winMenu.addSeparator();    m_winMenu.add(m_accept);  }  m_topN.addActionListener(this);  m_fitToScreen.addActionListener(this);  m_autoScale.addActionListener(this);  m_accept.addActionListener(this);  m_size24=new JRadioButtonMenuItem("Size 24",false);  m_size22=new JRadioButtonMenuItem("Size 22",false);  m_size20=new JRadioButtonMenuItem("Size 20",false);  m_size18=new JRadioButtonMenuItem("Size 18",false);  m_size16=new JRadioButtonMenuItem("Size 16",false);  m_size14=new JRadioButtonMenuItem("Size 14",false);  m_size12=new JRadioButtonMenuItem("Size 12",true);  m_size10=new JRadioButtonMenuItem("Size 10",false);  m_size8=new JRadioButtonMenuItem("Size 8",false);  m_size6=new JRadioButtonMenuItem("Size 6",false);  m_size4=new JRadioButtonMenuItem("Size 4",false);  m_size2=new JRadioButtonMenuItem("Size 2",false);  m_size1=new JRadioButtonMenuItem("Size 1",false);  m_size24.setActionCommand("Size 24");  m_size22.setActionCommand("Size 22");  m_size20.setActionCommand("Size 20");  m_size18.setActionCommand("Size 18");  m_size16.setActionCommand("Size 16");  m_size14.setActionCommand("Size 14");  m_size12.setActionCommand("Size 12");  m_size10.setActionCommand("Size 10");  m_size8.setActionCommand("Size 8");  m_size6.setActionCommand("Size 6");  m_size4.setActionCommand("Size 4");  m_size2.setActionCommand("Size 2");  m_size1.setActionCommand("Size 1");  m_selectFontGroup.add(m_size24);  m_selectFontGroup.add(m_size22);  m_selectFontGroup.add(m_size20);  m_selectFontGroup.add(m_size18);  m_selectFontGroup.add(m_size16);  m_selectFontGroup.add(m_size14);  m_selectFontGroup.add(m_size12);  m_selectFontGroup.add(m_size10);  m_selectFontGroup.add(m_size8);  m_selectFontGroup.add(m_size6);  m_selectFontGroup.add(m_size4);  m_selectFontGroup.add(m_size2);  m_selectFontGroup.add(m_size1);  m_selectFont.add(m_size24);  m_selectFont.add(m_size22);  m_selectFont.add(m_size20);  m_selectFont.add(m_size18);  m_selectFont.add(m_size16);  m_selectFont.add(m_size14);  m_selectFont.add(m_size12);  m_selectFont.add(m_size10);  m_selectFont.add(m_size8);  m_selectFont.add(m_size6);  m_selectFont.add(m_size4);  m_selectFont.add(m_size2);  m_selectFont.add(m_size1);  m_size24.addItemListener(this);  m_size22.addItemListener(this);  m_size20.addItemListener(this);  m_size18.addItemListener(this);  m_size16.addItemListener(this);  m_size14.addItemListener(this);  m_size12.addItemListener(this);  m_size10.addItemListener(this);  m_size8.addItemListener(this);  m_size6.addItemListener(this);  m_size4.addItemListener(this);  m_size2.addItemListener(this);  m_size1.addItemListener(this);  m_nodeMenu=new JPopupMenu();  m_visualise=new JMenuItem("Visualize The Node");  m_visualise.setActionCommand("Visualize The Node");  m_visualise.addActionListener(this);  m_nodeMenu.add(m_visualise);  if (m_listener != null) {    m_remChildren=new JMenuItem("Remove Child Nodes");    m_remChildren.setActionCommand("Remove Child Nodes");    m_remChildren.addActionListener(this);    m_nodeMenu.add(m_remChildren);    m_classifyChild=new JMenuItem("Use Classifier...");    m_classifyChild.setActionCommand("classify_child");    m_classifyChild.addActionListener(this);    m_nodeMenu.add(m_classifyChild);  }  m_focusNode=-1;  m_highlightNode=-1;  addMouseMotionListener(this);  addMouseListener(this);  m_frameLimiter.setRepeats(false);  m_frameLimiter.start();}  }
class C{  long hash(long x){  x=((x >>> 32) ^ x) * constant;  x=((x >>> 32) ^ x) * constant;  x=(x >>> 32) ^ x;  return x;}  }
class C{  public static void writeString(String path,String name,String encoding,String s) throws IOException {  String fileName=getPatchedFileName(path,name);  if (UtilValidate.isEmpty(fileName)) {    throw new IOException("Cannot obtain buffered writer for an empty filename!");  }  try {    FileUtils.writeStringToFile(new File(fileName),s,encoding);  } catch (  IOException e) {    Debug.logError(e,module);    throw e;  }}  }
class C{  public String clustererTipText(){  return "The base clusterer to be used.";}  }
class C{  public static Map<String,DocumentPartitioner> removeDocumentPartitioners(Document document){  Map<String,DocumentPartitioner> partitioners=new HashMap<String,DocumentPartitioner>();  String[] partitionings=document.getPartitionings();  for (int i=0; i < partitionings.length; i++) {    DocumentPartitioner partitioner=document.getDocumentPartitioner(partitionings[i]);    if (partitioner != null) {      document.setDocumentPartitioner(partitionings[i],null);      partitioner.disconnect();      partitioners.put(partitionings[i],partitioner);    }  }  return partitioners;}  }
class C{  public void load(InputStream stream) throws IOException {  load(stream,false);}  }
class C{  public Map<Context,List<OutlierClassificationResult>> searchContextGivenOutliers(List<ContextualDatum> data) throws Exception {  List<ContextualDatum> inputOutliers=findInputOutliers(data);  return searchContextGivenOutliers(data,inputOutliers);}  }
class C{  public void embedAll(FontRenderContext context,boolean embed,String embedAs) throws IOException {  Collection<Entry> col=getEntries();  Iterator<Entry> i=col.iterator();  while (i.hasNext()) {    Entry e=(Entry)i.next();    if (!e.isWritten()) {      e.setWritten(true);      FontIncluder fontIncluder=null;      if (PDFFontIncluder.isStandardFont(e.getFont())) {        embed=false;      }      if (embed) {        if (embedAs.equals(FontConstants.EMBED_FONTS_TYPE3)) {          fontIncluder=new PDFFontEmbedderType3(context,pdf,e.getReference(),tracker);        } else         if (embedAs.equals(FontConstants.EMBED_FONTS_TYPE1)) {          fontIncluder=PDFFontEmbedderType1.create(context,pdf,e.getReference(),tracker);        } else {          System.out.println("PDFFontTable: invalid value for embedAs: " + embedAs);        }      } else {        fontIncluder=new PDFFontIncluder(context,pdf,e.getReference(),tracker);      }      fontIncluder.includeFont(e.getFont(),e.getEncoding(),e.getReference());    }  }  tracker.writeAll();}  }
class C{  public Builder addUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.addUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  public Vector2f sub(Vector2fc v){  x-=v.x();  y-=v.y();  return this;}  }
class C{  public void suspendProcessInstanceFor(long seconds){  props.setProperty(SUSPEND_UNTIL,"" + (System.currentTimeMillis() + (1000L * seconds)));}  }
class C{  public CommodityChannelIndexSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  public Source<Integer> between(final int startInclusive,final int endInclusive){  ArgumentAssertions.checkArguments(startInclusive <= endInclusive,"There are no Integer values to be generated between (%s) and (%s)",startInclusive,endInclusive);  return Compositions.weightWithValues(range(startInclusive,endInclusive),startInclusive,endInclusive);}  }
class C{  public WindowSize(int width,int height){  if (width < 0 || height < 0) {    throw new IllegalArgumentException("width<0||height<0");  }  this.fullscreen=false;  this.width=width;  this.height=height;}  }
class C{  @Override public final void preTearDownCacheTestCase() throws Exception {  preTearDownPartitionedRegionDUnitTest();  closeCache();  Invoke.invokeInEveryVM(CacheTestCase.class,"closeCache");}  }
class C{  public static int decode(int rgba8888Code){  int id=(rgba8888Code & 0xFF000000) >>> 24;  id+=((rgba8888Code & 0x00FF0000) >>> 16) * 256;  id+=((rgba8888Code & 0x0000FF00) >>> 8) * 256 * 256;  return id;}  }
class C{  @Override public boolean removeFromWorld(){  NPCList.get().remove("Paul Sheriff");  zone.remove(paul);  zone.remove(board);  return true;}  }
class C{  public void close(){  updateDimensions(width,height);  state=State.CLOSED;  showIcons(false);  animator[LEFT].setFloatValues(0,button[LEFT]);  animator[RIGHT].setFloatValues(width,button[RIGHT]);  animator[RADIUS].setFloatValues(0,button[RADIUS]);  animator[TOP].setFloatValues(0,button[TOP]);  animator[BOTTOM].setFloatValues(height,button[BOTTOM]);  animatorSet.cancel();  animatorSet.start();  if (iconClosedDrawable instanceof Animatable) {    ((Animatable)iconClosedDrawable).start();  }  this.animate().y(yPosition).setDuration(animationDuration).setInterpolator(DECELERATE_INTERPOLATOR).start();}  }
class C{  public InitUpdate(final AbstractSimulatedDevice device){  this.device=device;}  }
class C{  @GET @Path("authenticate") public Response authenticate(@Required @QueryParam("oauth_provider") String oauthProvider,@QueryParam("userId") String userId,@QueryParam("scope") List<String> scopes) throws ForbiddenException, BadRequestException, OAuthAuthenticationException {  OAuthAuthenticator oauth=getAuthenticator(oauthProvider);  if (!isNullOrEmpty(userId) && !userId.equals(EnvironmentContext.getCurrent().getSubject().getUserId())) {    throw new ForbiddenException("Provided userId " + userId + " is not related to current user "+ EnvironmentContext.getCurrent().getSubject().getUserId());  }  final String authUrl=oauth.getAuthenticateUrl(getRequestUrl(uriInfo),scopes == null ? Collections.<String>emptyList() : scopes);  return Response.temporaryRedirect(URI.create(authUrl)).build();}  }
class C{  @SuppressWarnings("unchecked") private void _handleStatement(final Resource s,final URI p,final Value o,final Resource c,final StatementEnum type){  final BigdataStatement stmt=valueFactory.createStatement((BigdataResource)s,(BigdataURI)p,(BigdataValue)o,(BigdataResource)c,type);  if (statements == null) {    statements=new UnsynchronizedUnboundedChunkBuffer<S>(producerChunkSize,(Class<? extends S>)BigdataStatement.class);  }  statements.add((S)stmt);  statementCount++;  if (log.isTraceEnabled())   log.trace("n=" + statementCount + ", added: "+ stmt);}  }
class C{  static public boolean isValidValue(int value){  if (value < 0)   return false;  if (value > 6)   return false;  return true;}  }
class C{  public FieldRef(String declClass,String fieldType,String fieldName){  mDeclClass=declClass;  mFieldType=fieldType;  mFieldName=fieldName;}  }
class C{  protected void finalizeRestoreImpl(StorageUnitAlternateKeyDto glacierStorageUnitKey){  BusinessObjectDataRestoreDto businessObjectDataRestoreDto=businessObjectDataFinalizeRestoreHelperService.prepareToFinalizeRestore(glacierStorageUnitKey);  businessObjectDataFinalizeRestoreHelperService.executeS3SpecificSteps(businessObjectDataRestoreDto);  businessObjectDataFinalizeRestoreHelperService.enableOriginStorageUnit(businessObjectDataRestoreDto);  notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,businessObjectDataRestoreDto.getBusinessObjectDataKey(),businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataRestoreDto.getNewOriginStorageUnitStatus(),businessObjectDataRestoreDto.getOldOriginStorageUnitStatus());}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  private void ensureSingleKeystoneProvider(AuthnCreateParam param){  List<URI> allProviders=_dbClient.queryByType(AuthnProvider.class,true);  for (  URI providerURI : allProviders) {    AuthnProvider provider=getProviderById(providerURI,true);    if (AuthnProvider.ProvidersType.keystone.toString().equalsIgnoreCase(provider.getMode().toString())) {      throw APIException.badRequests.keystoneProviderAlreadyPresent();    }  }}  }
class C{  public FlowData(IOObject data,Port port){  if (data == null) {    throw new IllegalArgumentException("data must not be null!");  }  if (port == null) {    throw new IllegalArgumentException("port must not be null!");  }  this.data=data;  this.port=port;}  }
class C{  public SOAPMessage sendRequestAndReceiveResponse(String address,String contentType,InputStream content) throws Exception {  try (AsyncHttpSender sender=new AsyncHttpSender(client)){    sender.doPost(new URI(address),content,CHUNKED_LENGTH,contentType);    sender.waitForResponse(getTimeoutSec());    String responseContentType=sender.getResponseContentType();    MimeHeaders mimeHeaders=getMimeHeaders(responseContentType);    LOG.debug("Received response with content type {}",responseContentType);    return messageFactory.createMessage(mimeHeaders,sender.getResponseContent());  } }  }
class C{  void allowCancel(boolean allow){  cancelButton.setEnabled(allow);}  }
class C{  public static boolean parseMethod(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  IElementType nextTokenType=b.lookAhead(1);  assert b instanceof PerlBuilder;  if (PACKAGE_TOKENS.contains(currentTokenType) && CONVERTABLE_TOKENS.contains(nextTokenType)) {    PerlTokenData nextTokenData=((PerlBuilder)b).lookupToken(1);    PerlTokenData nextNextTokenData=((PerlBuilder)b).lookupToken(2);    IElementType nextNextTokenType=nextNextTokenData == null ? null : nextNextTokenData.getTokenType();    String canonicalPackageName=PerlPackageUtil.getCanonicalPackageName(b.getTokenText());    String potentialSubName=canonicalPackageName + PerlPackageUtil.PACKAGE_SEPARATOR + nextTokenData.getTokenText();    if (nextNextTokenType == LEFT_PAREN || ((PerlBuilder)b).isKnownSub(potentialSubName) || !((PerlBuilder)b).isKnownPackage(potentialSubName)) {      return convertPackageIdentifier(b,l) && convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());    } else {      return false;    }  } else   if (CONVERTABLE_TOKENS.contains(currentTokenType)) {    PerlTokenData prevTokenData=((PerlBuilder)b).lookupToken(-1);    if (prevTokenData != null && prevTokenData.getTokenType() == OPERATOR_DEREFERENCE) {      return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());    } else     if (PACKAGE_TOKENS.contains(nextTokenType)) {      IElementType nextNextTokenType=b.lookAhead(2);      if (nextNextTokenType == OPERATOR_DEREFERENCE) {        return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());      } else       if (CONVERTABLE_TOKENS.contains(nextNextTokenType)) {        if (b.lookAhead(3) == OPERATOR_DEREFERENCE) {          return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());        }        PerlTokenData nextTokenData=((PerlBuilder)b).lookupToken(1);        PerlTokenData nextNextTokenData=((PerlBuilder)b).lookupToken(2);        String packageOrSub=PerlPackageUtil.getCanonicalPackageName(nextTokenData.getTokenText()) + PerlPackageUtil.PACKAGE_SEPARATOR + nextNextTokenData.getTokenText();        if (((PerlBuilder)b).isKnownSub(packageOrSub)) {          return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());        } else         if (((PerlBuilder)b).isKnownPackage(packageOrSub)) {          return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType()) && mergePackageName(b,l);        }        return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());      } else {        return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType()) && convertPackageIdentifier(b,l);      }    } else     if (CONVERTABLE_TOKENS.contains(nextTokenType) && b.lookAhead(2) != OPERATOR_DEREFERENCE) {      PerlTokenData nextTokenData=((PerlBuilder)b).lookupToken(1);      String potentialSubName=nextTokenData.getTokenText() + PerlPackageUtil.PACKAGE_SEPARATOR + b.getTokenText();      if (((PerlBuilder)b).isKnownSub(potentialSubName)) {        return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType()) && convertIdentifier(b,l,PACKAGE);      } else {        return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());      }    } else     if (nextTokenType == OPERATOR_DEREFERENCE && ((PerlBuilder)b).isKnownPackage(b.getTokenText())) {      return false;    } else {      return convertIdentifier(b,l,((PerlBuilder)b).popSubElementType());    }  }  return false;}  }
class C{  public static short[] trimToCapacity(short[] array,int maxCapacity){  if (array.length > maxCapacity) {    short oldArray[]=array;    array=new short[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  public int readInt() throws SQLException {  Integer attrib=(Integer)getNextAttribute();  return (attrib == null) ? 0 : attrib.intValue();}  }
class C{  public double dot(Vector that){  if (this.d != that.d)   throw new IllegalArgumentException("Dimensions don't agree");  double sum=0.0;  for (int i=0; i < d; i++)   sum=sum + (this.data[i] * that.data[i]);  return sum;}  }
class C{  public boolean isObstacle(final Entity entity){  return (getResistance(entity) > 95);}  }
class C{  public static double log10(double x){  return Math.log(x) / LOG10;}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  private void handleRedirect(State state,HttpResponse response,int statusCode) throws StopRequest, RetryDownload {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP redirect " + statusCode);  }  if (state.mRedirectCount >= Constants.MAX_REDIRECTS) {    throw new StopRequest(DownloaderService.STATUS_TOO_MANY_REDIRECTS,"too many redirects");  }  Header header=response.getFirstHeader("Location");  if (header == null) {    return;  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Location :" + header.getValue());  }  String newUri;  try {    newUri=new URI(mInfo.mUri).resolve(new URI(header.getValue())).toString();  } catch (  URISyntaxException ex) {    if (Constants.LOGV) {      Log.d(Constants.TAG,"Couldn't resolve redirect URI " + header.getValue() + " for "+ mInfo.mUri);    }    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"Couldn't resolve redirect URI");  }  ++state.mRedirectCount;  state.mRequestUri=newUri;  if (statusCode == 301 || statusCode == 303) {    state.mNewUri=newUri;  }  throw new RetryDownload();}  }
class C{  public static Struct toStruct(Object o,Struct defaultValue,boolean caseSensitive){  if (o instanceof Struct)   return (Struct)o; else   if (o instanceof Map) {    return MapAsStruct.toStruct((Map)o,caseSensitive);  } else   if (o instanceof Node)   return XMLCaster.toXMLStruct((Node)o,false); else   if (o instanceof ObjectWrap) {    return toStruct(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue,caseSensitive);  }  return defaultValue;}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  System.arraycopy(b,off,buf,count,len);  count=newcount;}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public void test_putValue(){  SSLSession s=clientSession;  mySSLSessionBindingListener sbl=new mySSLSessionBindingListener();  assertNotNull(s.getValueNames());  assertEquals(0,s.getValueNames().length);  s.putValue("Name_01",sbl);  s.putValue("Name_02",sbl);  s.putValue("Name_03",sbl);  assertEquals(3,s.getValueNames().length);  s.removeValue("Name_01");  assertEquals(2,s.getValueNames().length);  try {    s.putValue(null,null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.putValue("ABC",null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.putValue(null,sbl);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.removeValue(null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public boolean hasFeature(String feature,String version){  if (("CORE".equals(feature.toUpperCase()) || "XML".equals(feature.toUpperCase())) && ("1.0".equals(version) || "2.0".equals(version)))   return true;  return false;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public ConversionHandler from(MappedField sourceMappedField){  this.sourceField=sourceMappedField.getValue();  placeholders.put(sourceTypePattern,sourceField.getType().getName());  placeholders.put(sourceNamePattern,sourceField.getName());  placeholders.put(sourceGetPattern,sourceMappedField.getMethod());  placeholders.put(sourceSetPattern,sourceMappedField.setMethod());  return this;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();}throw new IllegalStateException();}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public void testCreate_aggregate() throws Exception {  TestTrace t=new TestTrace();  MockFunction aggFunction=new MockFunction();  db.exec("create table TEST(id integer, firstname text, lastname text)",null);  db.exec("insert into TEST values(3, 'James', 'Bond'); ",null);  db.exec("insert into TEST values(4, 'Fiona', 'Apple'); ",null);  db.trace((Trace)t);  db.create_aggregate("myaggfunc",1,aggFunction);  db.function_type("myaggfunc",Constants.SQLITE3_TEXT);  db.exec("PRAGMA show_datatypes = on",null);  assertFalse(aggFunction.functionCalled);  assertFalse(aggFunction.stepCalled);  assertFalse(aggFunction.lastStepCalled);  db.exec("select myaggfunc(TEST.firstname) from TEST",t);  assertTrue(aggFunction.stepCalled);  assertTrue(aggFunction.lastStepCalled);  assertTrue(aggFunction.functionCalled);  assertEquals("James Fiona ",aggFunction.getAggValue());  db.exec("drop table TEST",null);  try {    db.create_aggregate("myaggfunc",0,null);  } catch (  Throwable e) {    assertEquals("null SQLite.Function not allowed",e.getMessage());  }  try {    db.create_aggregate("myaggfunc",0,aggFunction);  } catch (  Throwable e) {    assertEquals("wrong number of arguments to function myaggfunc()",e.getMessage());  }}  }
class C{  public TournamentSelection(DominanceComparator comparator){  this(2,comparator);}  }
class C{  @Override public void updateSelectedReduce(Collection<GraphNode> reduction){  if (reduction.size() == 0) {    emptySelection();  }  setNode(reduction.iterator().next());}  }
class C{  public EipActionBarContributor(){  super(ADDITIONS_LAST_STYLE);  loadResourceAction=new LoadResourceAction();  validateAction=new ValidateAction();  controlAction=new ControlAction();}  }
class C{  public ContentFilterResult clone(){  ContentFilterResult result=new ContentFilterResult();  if (ElementResults != null) {    result.ElementResults=new ContentFilterElementResult[ElementResults.length];    for (int i=0; i < ElementResults.length; i++)     result.ElementResults[i]=ElementResults[i].clone();  }  result.ElementDiagnosticInfos=ElementDiagnosticInfos == null ? null : ElementDiagnosticInfos.clone();  return result;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.134 -0400",hash_original_method="81DE240BA78D06EF3CA4E4150F572C81",hash_generated_method="808CF2626AF6DCC1C8634FF7BB4FDEE1") @Override protected void onDestroy(){  super.onDestroy();  doReallyStop(false);  mFragments.dispatchDestroy();  if (mLoaderManager != null) {    mLoaderManager.doDestroy();  }}  }
class C{  protected XMouseDragGestureRecognizer(DragSource ds,Component c,int act,DragGestureListener dgl){  super(ds,c,act,dgl);}  }
class C{  private void removeListeners(){  m_debugger.removeListener(m_debuggerListener);  m_debugger.getProcessManager().removeListener(m_processListener);}  }
class C{  public ServerLocator createServerLocator(){  if (getDiscoveryConfiguration() != null) {    return ActiveMQClient.createServerLocator(isHA(),getDiscoveryConfiguration()).setProtocolManagerFactory(clientProtocolManager);  } else {    return ActiveMQClient.createServerLocator(isHA(),getTransportConfig()).setProtocolManagerFactory(clientProtocolManager);  }}  }
class C{  private void cleareffectorPanel(){  if (currentEffectorPanel != null) {    mainPanel.remove(currentEffectorPanel);  }}  }
class C{  public SRuntimeAdapterFactory(){  if (modelPackage == null) {    modelPackage=SRuntimePackage.eINSTANCE;  }}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  @SuppressWarnings("UseOfSystemOutOrSystemErr") public void dumpOutDebugInfo(){  LOG.info("Dump debug output");  Map<String,String> envs=System.getenv();  LOG.info("\nDumping System Env: begin");  for (  Map.Entry<String,String> env : envs.entrySet()) {    LOG.info("System env: key=" + env.getKey() + ", val="+ env.getValue());  }  LOG.info("Dumping System Env: end");  String cmd="ls -al";  Runtime run=Runtime.getRuntime();  Process pr;  try {    pr=run.exec(cmd);    pr.waitFor();    BufferedReader buf=new BufferedReader(new InputStreamReader(pr.getInputStream()));    String line;    LOG.info("\nDumping files in local dir: begin");    try {      while ((line=buf.readLine()) != null) {        LOG.info("System CWD content: " + line);      }      LOG.info("Dumping files in local dir: end");    }  finally {      buf.close();    }  } catch (  IOException e) {    LOG.debug("Exception",e);  }catch (  InterruptedException e) {    LOG.info("Interrupted",e);  }  LOG.info("Classpath: {}",System.getProperty("java.class.path"));  LOG.info("Config resources: {}",getConfig().toString());  try {    Configuration.dumpConfiguration(getConfig(),new PrintWriter(System.out));  } catch (  Exception e) {    LOG.error("Error dumping configuration.",e);  }}  }
class C{  public RDFSailInserter(SailConnection con,ValueFactory vf,UpdateContext uc){  super(vf);  this.con=con;  this.uc=uc;}  }
class C{  private DataLoader.DataAndUrl downloadCrl(final List<String> downloadUrls){  if (CollectionUtils.isEmpty(downloadUrls)) {    return null;  }  try {    final DataLoader.DataAndUrl dataAndUrl=dataLoader.get(downloadUrls);    return dataAndUrl;  } catch (  DSSException e) {    LOG.warn("",e);  }  return null;}  }
class C{  public boolean isEncapRemoteSourceSupported(){  return encapRemoteSourceSupported;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicTextFieldUI();}  }
class C{  public void addLocalClass(String namespace,String localPart,String className){  if (localClassMappings == null)   localClassMappings=new NameMappings();  localClassMappings.addClass(namespace,localPart,className);}  }
class C{  protected OkHttpClient configureHttpClient(){  final OkHttpClient.Builder builder=new OkHttpClient.Builder();  final CookieManager cookieManager=new CookieManager();  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);  builder.cookieJar(new JavaNetCookieJar(cookieManager));  builder.connectTimeout(60,TimeUnit.SECONDS);  builder.writeTimeout(60,TimeUnit.SECONDS);  builder.readTimeout(90,TimeUnit.SECONDS);  return builder.build();}  }
class C{  private List<TypeLiteral<?>> resolveAll(Type[] types){  TypeLiteral<?>[] result=new TypeLiteral<?>[types.length];  for (int t=0; t < types.length; t++) {    result[t]=resolve(types[t]);  }  return Arrays.asList(result);}  }
class C{  public SpanTermQuery(Term term){  this.term=Objects.requireNonNull(term);  this.termContext=null;}  }
class C{  @Override public int hashCode(){  if (hash == 0) {    int result=17;    result=37 * result + range.hashCode();    long bitsWeight=Double.doubleToLongBits(weight);    result=37 * result + (int)(bitsWeight ^ (bitsWeight >>> 32));    hash=result;  }  return hash;}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  void foo(Param param){  bar(param.getS());}  }
class C{  private String createColumnMethods(StringBuffer mandatory,String columnName,boolean isUpdateable,boolean isMandatory,int displayType,int AD_Reference_ID,int fieldLength,String defaultValue,String ValueMin,String ValueMax,String VFormat,String Callout,String Name,String Description,boolean virtualColumn,boolean IsEncrypted){  Class clazz=DisplayType.getClass(displayType,true);  if (defaultValue == null)   defaultValue="";  if (DisplayType.isLOB(displayType))   fieldLength=0;  if (columnName.equalsIgnoreCase("Posted") || columnName.equalsIgnoreCase("Processed") || columnName.equalsIgnoreCase("Processing")) {    clazz=Boolean.class;    AD_Reference_ID=0;  } else   if (columnName.equalsIgnoreCase("Record_ID")) {    clazz=Integer.class;    AD_Reference_ID=0;  } else   if (columnName.equalsIgnoreCase("AD_Language") || columnName.equalsIgnoreCase("EntityType")) {    clazz=String.class;  }  String dataType=clazz.getName();  dataType=dataType.substring(dataType.lastIndexOf('.') + 1);  if (dataType.equals("Boolean"))   dataType="boolean"; else   if (dataType.equals("Integer"))   dataType="int"; else   if (displayType == DisplayType.Binary)   dataType="byte[]";  StringBuffer sb=new StringBuffer();  sb.append("/** Set ").append(Name);  sb.append(".\n@param ").append(columnName).append(" ");  if (Description != null && Description.length() > 0)   sb.append(Description); else   sb.append(Name);  sb.append(" */\n");  String setValue="set_Value";  if (IsEncrypted)   setValue="set_ValueE";  sb.append("public ");  if (!isUpdateable) {    setValue="set_ValueNoCheck";    if (IsEncrypted)     setValue="set_ValueNoCheckE";  }  sb.append("void set").append(columnName).append(" (").append(dataType).append(" ").append(columnName).append(")" + "{");  if (AD_Reference_ID != 0) {    String staticVar=addListValidation(sb,AD_Reference_ID,columnName,!isMandatory);    sb.insert(0,staticVar);  }  if (virtualColumn) {    sb.append("throw new IllegalArgumentException (\"").append(columnName).append(" is virtual column\");");  } else   if (clazz.equals(Integer.class)) {    if (columnName.endsWith("_ID")) {      if (isMandatory) {        int firstOK=1;        if (columnName.equals("AD_Client_ID") || columnName.equals("AD_Org_ID") || columnName.equals("Record_ID")|| columnName.equals("C_DocType_ID")|| columnName.equals("Node_ID")|| columnName.equals("AD_Role_ID")|| columnName.equals("M_AttributeSet_ID")|| columnName.equals("M_AttributeSetInstance_ID"))         firstOK=0;        sb.append("if (").append(columnName).append(" < ").append(firstOK).append(") throw new IllegalArgumentException (\"").append(columnName).append(" is mandatory.\");");      } else       sb.append("if (").append(columnName).append(" <= 0) ").append(setValue).append(" (\"").append(columnName).append("\", null); else \n");    }    sb.append(setValue).append(" (\"").append(columnName).append("\", new Integer(").append(columnName).append("));");  } else   if (clazz.equals(Boolean.class))   sb.append(setValue).append(" (\"").append(columnName).append("\", new Boolean(").append(columnName).append("));"); else {    if (isMandatory && AD_Reference_ID == 0) {      sb.append("if (").append(columnName).append(" == null)" + " throw new IllegalArgumentException (\"").append(columnName).append(" is mandatory.\");");    }    if (clazz.equals(String.class) && fieldLength > 0) {      sb.append("if (");      if (!isMandatory)       sb.append(columnName).append(" != null && ");      sb.append(columnName).append(".length() > ").append(fieldLength).append("){log.warning(\"Length > ").append(fieldLength).append(" - truncated\");").append(columnName).append(" = ").append(columnName).append(".substring(0,").append(fieldLength - 1).append(");}");    }    sb.append(setValue).append(" (\"").append(columnName).append("\", ").append(columnName).append(");");  }  sb.append("}");  if (isMandatory) {    mandatory.append("set").append(columnName).append(" (");    if (clazz.equals(Integer.class))     mandatory.append("0"); else     if (clazz.equals(Boolean.class)) {      if (defaultValue.indexOf('Y') != -1)       mandatory.append(true); else       mandatory.append("false");    } else     if (clazz.equals(BigDecimal.class))     mandatory.append("Env.ZERO"); else     if (clazz.equals(Timestamp.class))     mandatory.append("new Timestamp(System.currentTimeMillis())"); else     mandatory.append("null");    mandatory.append(");");    if (defaultValue.length() > 0)     mandatory.append("// ").append(defaultValue).append(Env.NL);  }  sb.append("/** Get ").append(Name);  if (Description != null && Description.length() > 0)   sb.append(".\n@return ").append(Description); else   sb.append(".\n@return ").append(Name);  sb.append(" */\n");  String getValue="get_Value";  if (IsEncrypted)   getValue="get_ValueE";  sb.append("public ").append(dataType);  if (clazz.equals(Boolean.class)) {    sb.append(" is");    if (columnName.toLowerCase().startsWith("is"))     sb.append(columnName.substring(2)); else     sb.append(columnName);  } else   sb.append(" get").append(columnName);  sb.append("() {");  if (clazz.equals(Integer.class))   sb.append("Integer ii = (Integer)").append(getValue).append("(\"").append(columnName).append("\");" + "if (ii == null)" + " return 0;"+ "return ii.intValue();"); else   if (clazz.equals(BigDecimal.class))   sb.append("BigDecimal bd = (BigDecimal)").append(getValue).append("(\"").append(columnName).append("\");" + "if (bd == null)" + " return Env.ZERO;"+ "return bd;"); else   if (clazz.equals(Boolean.class))   sb.append("Object oo = ").append(getValue).append("(\"").append(columnName).append("\");" + "if (oo != null) { if (oo instanceof Boolean) return ((Boolean)oo).booleanValue(); return \"Y\".equals(oo);}" + "return false;"); else   if (dataType.equals("Object"))   sb.append("return ").append(getValue).append("(\"").append(columnName).append("\");"); else   sb.append("return (").append(dataType).append(")").append(getValue).append("(\"").append(columnName).append("\");");  sb.append("}");  return sb.toString();}  }
class C{  public static boolean isIMMdate(final Date date){  return isIMMdate(date,true);}  }
class C{  protected ObjectFactory3D(){}  }
class C{  public void fill(byte value){  value&=0xF;  Arrays.fill(handle,(byte)((value << 4) | value));}  }
class C{  public void copyYRotationPoint(MowzieModelRenderer target){  rotationPointY=target.rotationPointY;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.TYPE_DEFINING_ELEMENT;}  }
class C{  public boolean isUnsnapped(){  return unsnapped;}  }
class C{  public ConcurrentModificationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public LZ1(){  super(30,2,21,21,1);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.386 -0500",hash_original_method="ABFB0B36CEC0E1D483C56AE8A85E75EC",hash_generated_method="AE82E35E09B52D83A2FD40E3CC9579E6") void onConnectedInOrOut(){  connectTime=System.currentTimeMillis();  connectTimeReal=SystemClock.elapsedRealtime();  duration=0;  if (Phone.DEBUG_PHONE) {    log("onConnectedInOrOut: connectTime=" + connectTime);  }  if (!isIncoming) {    processNextPostDialChar();  }  releaseWakeLock();}  }
class C{  public boolean isConvertibleTo(ClassInfo type){  if (type.isPrimitive()) {    return (type == ClassInfo.primitiveVoid || isPrimitive());  } else {    return getDetails().isConvertibleTo(type);  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public float[] keys(){  float[] keys=new float[size()];  float[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public void closeContinuousQuery(String queryName) throws Exception {  CqService cqService=cache.getCqService();  if (cqService != null) {    Collection<? extends InternalCqQuery> allCqs=cqService.getAllCqs();    for (    InternalCqQuery query : allCqs) {      if (query.getName().equals(queryName)) {        try {          query.close();          return;        } catch (        CqClosedException e) {          throw new Exception(e.getMessage());        }catch (        CqException e) {          throw new Exception(e.getMessage());        }      }    }  }}  }
class C{  final public int loadSigned8(int addr){  try {    return readableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)];  } catch (  NullPointerException e) {    System.err.println("Null pointer exception at address: 0x" + Integer.toHexString(addr));    throw e;  }}  }
class C{  public VideoData(IoBuffer data,boolean copy){  super(Type.STREAM_DATA);  if (copy) {    byte[] array=new byte[data.limit()];    data.mark();    data.get(array);    data.reset();    setData(array);  } else {    setData(data);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isConnected(){  return mPeripheral.isConnected();}  }
class C{  public void commitSample(boolean isKeyframe,int offset){  Assertions.checkState(offset <= 0);  int sampleSize=(int)(totalBytesWritten + offset - pendingSampleOffset);  infoQueue.commitSample(pendingSampleTimeUs,pendingSampleOffset,sampleSize,isKeyframe ? C.SAMPLE_FLAG_SYNC : 0);}  }
class C{  private void connectionLost(){  Message msg=mHandler.obtainMessage(BlueToothServer.MESSAGE_TOAST);  Bundle bundle=new Bundle();  bundle.putString(BlueToothServer.TOAST,"Device connection was lost");  msg.setData(bundle);  mHandler.sendMessage(msg);  BluetoothChatService.this.start();}  }
class C{  public boolean hasResourceId(){  return hasExtension(ResourceId.class);}  }
class C{  public IndicatorCollector(Indicator indicator){  this(indicator,null,null);}  }
class C{  public void showProgressDialog(){  showDialog(DIALOG_PROGRESS_ID);}  }
class C{  public boolean isIpRouteConfigSupported(){  return ipRouteConfigSupported;}  }
class C{  public Object clone(){  ParameterizedHashMap<K,V> result=null;  try {    result=(ParameterizedHashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {  }  result.table=new Entry[table.length];  result.entrySet=null;  result.modCount=0;  result.size=0;  result.init();  result.putAllForCreate(this);  return result;}  }
class C{  private static void senSegmentFile(String infile,String outfile,JVnSenSegmenter senSegmenter){  try {    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(infile),"UTF-8"));    BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outfile),"UTF-8"));    String para="", line="", text="";    while ((line=in.readLine()) != null) {      if (!line.equals("")) {        if (line.charAt(0) == '#') {          text+=line + "\n";          continue;        }        para=senSegmenter.senSegment(line).trim();        text+=para.trim() + "\n\n";      } else {        text+="\n";      }    }    text=text.trim();    out.write(text);    out.newLine();    in.close();    out.close();  } catch (  Exception e) {    System.out.println("Error in sensegment file " + infile);  }}  }
class C{  private QueryExp buildOptionalQueryExp(final String[] attributes,final Object[] values){  QueryExp queryExp=null;  for (int i=0; i < attributes.length; i++) {    if (values[i] instanceof Boolean) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i])));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i]))));      }    } else     if (values[i] instanceof Number) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i]));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i])));      }    } else     if (values[i] instanceof String) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((String)values[i]));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((String)values[i])));      }    }  }  return queryExp;}  }
class C{  private boolean isParent(ERiCNeighborPredicate<V>.Instance npred,Cluster<CorrelationModel> parent,Iter<Cluster<CorrelationModel>> iter){  StringBuilder msg=LOG.isDebugging() ? new StringBuilder() : null;  for (; iter.valid(); iter.advance()) {    Cluster<CorrelationModel> child=iter.get();    if (parent.getModel().getPCAResult().getCorrelationDimension() == child.getModel().getPCAResult().getCorrelationDimension()) {      return false;    }    boolean dist=npred.weakNeighbors(parent.getModel().getPrototype(),child.getModel().getPrototype(),parent.getModel().getPCAResult(),child.getModel().getPCAResult());    if (msg != null) {      msg.append("\ndist(").append(child).append(" - ").append(parent).append(") = ").append(dist);    }    if (dist) {      if (msg != null) {        LOG.debugFine(msg);      }      return true;    }  }  if (msg != null) {    LOG.debugFine(msg.toString());  }  return false;}  }
class C{  private static int checkHtmlCdataCloseable(String localName,StringBuilder sb){  int escapingTextSpanStart=-1;  for (int i=0, n=sb.length(); i < n; ++i) {    char ch=sb.charAt(i);    if (ch == '\u0000') {      return i;    }switch (ch) {case '<':      if (i + 3 < n && '!' == sb.charAt(i + 1) && '-' == sb.charAt(i + 2) && '-' == sb.charAt(i + 3)) {        if (escapingTextSpanStart == -1) {          escapingTextSpanStart=i;        } else {          return escapingTextSpanStart;        }      } else       if (i + 1 + localName.length() < n && '/' == sb.charAt(i + 1) && Strings.eqIgnoreCase(localName,sb.substring(i + 2,i + 2 + localName.length()))) {        if (escapingTextSpanStart < 0) {          return i;        }        if (!"script".equals(localName)) {          return i;        }      }    break;case '>':  if (i >= 2 && '-' == sb.charAt(i - 1) && '-' == sb.charAt(i - 2)) {    if (escapingTextSpanStart < 0) {      return i - 2;    }    escapingTextSpanStart=-1;  }break;}}if (escapingTextSpanStart >= 0) {return escapingTextSpanStart;}return -1;}  }
class C{  void addInitiatorsToStorageView(String viewName,String clusterName,List<PortInfo> initiatorPortInfo) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterName,false);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  List<VPlexInitiatorInfo> initiatorInfoList=findInitiatorsOnCluster(storageViewInfo.getClusterId(),initiatorPortInfo,null);  VPlexClusterInfo clusterInfo=discoveryMgr.findClusterInfo(storageViewInfo.getClusterId());  if (clusterInfo == null) {    throw VPlexApiException.exceptions.couldNotFindCluster(storageViewInfo.getClusterId());  }  if (initiatorInfoList.size() != initiatorPortInfo.size()) {    s_logger.info("Could not find all of the requested initiators on VPLex.");    initiatorInfoList=buildInitiatorInfoList(initiatorInfoList,initiatorPortInfo,clusterInfo);  }  registerInitiators(clusterInfo,initiatorInfoList);  addStorageViewInitiators(storageViewInfo,initiatorInfoList);}  }
class C{  public int bitextSize(){  return sa.numSentences();}  }
class C{  public MekaFileChooser(){  super();  initialize();}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  private boolean areWeUsingGemFireSecurityProfile(ServletContextEvent event){  String profile=null;  WebApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());  if (ctx.getEnvironment() != null) {    String[] profiles=ctx.getEnvironment().getActiveProfiles();    if (profiles != null && profiles.length > 0) {      StringBuilder sb=new StringBuilder();      for (      String p : profiles)       sb.append(p).append(",");      LOGGER.info("#SpringProfilesConfigured : " + sb.toString());      profile=ctx.getEnvironment().getActiveProfiles()[0];      LOGGER.info("#First Profile : " + profile);    } else {      LOGGER.info("No SpringProfileConfigured using default spring profile");      return false;    }  }  if (PulseConstants.APPLICATION_PROPERTY_PULSE_SEC_PROFILE_GEMFIRE.equals(profile)) {    LOGGER.info("Using gemfire integrated security profile");    return true;  }  return false;}  }
class C{  public QuarterDateFormat(){  this(TimeZone.getDefault());}  }
class C{  public void bindWithModel(Object modelObject){  if (modelObject == null)   throw new IllegalArgumentException("The modelObject argument cannot be null.");  if (modelObject.getClass() != getModelObject().getClass())   throw new IllegalArgumentException("The model object type not is valid. Please pass an object of the same type that you passed on your Binder.Builder.");  int direction=this.builder.getBindDirection();  bind(direction,modelObject);}  }
class C{  public static String formatMapOld(String name,Map<String,String> props,String header,boolean wasModified){  String indent="  ";  StringBuilder builder=new StringBuilder();  builder.append(header);  builder.append(String.format("%s%s\n",name,modifiedSign(wasModified)));  builder.append("{\n");  for (  String key : props.keySet()) {    builder.append(String.format("%s%s = %s\n",indent,key,props.get(key)));  }  builder.append(String.format("}"));  return builder.toString();}  }
class C{  private void verifyVPlexVolumeResults() throws Exception {  for (  URI volumeURI : vplexTestVolumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    Assert.assertNotNull(String.format("VPLEX test volume %s not found",volumeURI),volume);    StringSet associatedVolumes=volume.getAssociatedVolumes();    if ((associatedVolumes != null) && (!associatedVolumes.isEmpty())) {      Assert.assertFalse("INTERNAL_OBJECT should NOT be set for a VPLEX volume",volume.checkInternalFlags(Flag.INTERNAL_OBJECT));    } else {      Assert.assertTrue("INTERNAL_OBJECT should be set for a VPLEX backend volume",volume.checkInternalFlags(Flag.INTERNAL_OBJECT));    }  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  protected synchronized ProjHolder backPop(){  ProjHolder proj=forwardStack.pop();  if (backStack == null) {    backStack=new Stack<ProjHolder>();  }  while (backStack.size() >= stackSize) {    backStack.removeElementAt(0);  }  backStack.push(proj);  return proj;}  }
class C{  public static boolean isCompound(FTypeRef typeRef){  return isStruct(typeRef) || isUnion(typeRef);}  }
class C{  @Override public int compareLongitude(float lon){  DefaultMapEntity node=getTrkPt(0);  if (node != null) {    int result=node.compareLongitude(lon);    for (int i=1; i < trkpts.size(); i++)     if (result != getTrkPt(i).compareLongitude(lon))     return 0;    return result;  } else {    return 0;  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public HessianFieldException(Throwable cause){  super(cause);}  }
class C{  public VirtualMachine attach(Map<String,? extends Connector.Argument> args) throws IOException, IllegalConnectorArgumentsException {  String pid=argument(ARG_PID,args).value();  String t=argument(ARG_TIMEOUT,args).value();  int timeout=0;  if (t.length() > 0) {    timeout=Integer.decode(t).intValue();  }  String address=null;  com.sun.tools.attach.VirtualMachine vm=null;  try {    vm=com.sun.tools.attach.VirtualMachine.attach(pid);    Properties props=vm.getAgentProperties();    address=props.getProperty("sun.jdwp.listenerAddress");  } catch (  Exception x) {    throw new IOException(x.getMessage());  } finally {    if (vm != null)     vm.detach();  }  if (address == null) {    throw new IOException("Not a debuggee, or not listening for debugger to attach");  }  int pos=address.indexOf(':');  if (pos < 1) {    throw new IOException("Unable to determine transport endpoint");  }  final String lib=address.substring(0,pos);  address=address.substring(pos + 1,address.length());  TransportService ts=null;  if (lib.equals("dt_socket")) {    ts=new SocketTransportService();  } else {    if (lib.equals("dt_shmem")) {      try {        Class<?> c=Class.forName("com.sun.tools.jdi.SharedMemoryTransportService");        ts=(TransportService)c.newInstance();      } catch (      Exception x) {      }    }  }  if (ts == null) {    throw new IOException("Transport " + lib + " not recognized");  }  Connection connection=ts.attach(address,timeout,0);  return Bootstrap.virtualMachineManager().createVirtualMachine(connection);}  }
class C{  public void paint(Graphics2D g,int xStart,int xEnd,int y){  Composite oldComposite=g.getComposite();  g.setComposite(AlphaComposite.SrcOver);  Shape clip=g.getClip();  g.setClip(xStart,y - 3,xEnd - xStart,3);  UIUtil.drawImage(g,myImage,xStart,y - 3,null);  g.setComposite(oldComposite);  g.setClip(clip);}  }
class C{  public boolean isNew(){  return isNew;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  if (m_savedLastOrder == null)   m_savedLastOrder=new IntStack();  m_savedLastOrder.push(getElemDef().getLastOrder());  getElemDef().setLastOrder(-1);}  }
class C{  public String toString(){  if (primaryGroup) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("UnixNumericGroupPrincipal.Primary.Group.name","sun.security.util.AuthResources"));    Object[] source={name};    return form.format(source);  } else {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("UnixNumericGroupPrincipal.Supplementary.Group.name","sun.security.util.AuthResources"));    Object[] source={name};    return form.format(source);  }}  }
class C{  public static String stringFor(int m){switch (m) {case cudaReadModeElementType:    return "cudaReadModeElementType";case cudaReadModeNormalizedFloat:  return "cudaReadModeNormalizedFloat";}return "INVALID cudaTextureReadMode: " + m;}  }
class C{  public boolean isDeclaredDynamic(){  return declaredDynamic;}  }
class C{  public void addConstraintCommand(DefineCommand command){  if (command instanceof CreateIndex) {    constraintCommands.add(command);  } else {    AlterTableAddConstraint con=(AlterTableAddConstraint)command;    boolean alreadySet;    if (con.getType() == CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY) {      alreadySet=setPrimaryKeyColumns(con.getIndexColumns());    } else {      alreadySet=false;    }    if (!alreadySet) {      constraintCommands.add(command);    }  }}  }
class C{  public static void close(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {      Logger.e(e,"",e.toString());    }  }}  }
class C{  public StreamSource(Reader reader,String systemId){  setReader(reader);  setSystemId(systemId);}  }
class C{  private Uri formatSipUri(String path){  return path.startsWith(SIP_URI_HEADER) ? Uri.parse(path) : Uri.parse(SIP_URI_HEADER + path);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.display_acronym_activity);  initializeViewFields();  final List<ParcelableAcronymExpansion> result=getIntent().getParcelableArrayListExtra(KEY_ACRONYM_DATA);  mAdapter.addAll(result);  mAdapter.notifyDataSetChanged();}  }
class C{  static public int extractInstruction(byte[] packet){switch (extractAddressType(packet)) {case BROADCAST:case NO_ADDRESS:case IDLE:case LOCO_SHORT_ADDRESS:    return packet[1] & 0xFF;case LOCO_LONG_ADDRESS:case ACCESSORY_ADDRESS:  return packet[2] & 0xFF;}return 0;}  }
class C{  public vec3 scale(float s){  this.m[0]*=s;  this.m[1]*=s;  this.m[2]*=s;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.944 -0500",hash_original_method="D3B7CEC20A124B5B8658676D7721D307",hash_generated_method="2B4C16F7BEE7A65CECC0B61F85D894BA") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public boolean reset() throws IOException {  return SMTPReply.isPositiveCompletion(rset());}  }
class C{  private boolean checkForVolumes(URI id,List<ProtectionSet> protectionSetsToDelete){  boolean volumesExist=false;  URIQueryResultList list=new URIQueryResultList();  Constraint constraint=ContainmentConstraint.Factory.getProtectionSystemProtectionSetConstraint(id);  _dbClient.queryByConstraint(constraint,list);  Iterator<URI> it=list.iterator();  while (it.hasNext()) {    URI protectionSetId=it.next();    ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,protectionSetId);    if (protectionSet != null && !protectionSet.getInactive()) {      if (protectionSet.getVolumes() != null && !protectionSet.getVolumes().isEmpty()) {        for (        String volId : protectionSet.getVolumes()) {          Volume vol=_dbClient.queryObject(Volume.class,URI.create(volId));          if (vol != null && !vol.getInactive()) {            volumesExist=true;            break;          }        }      }      if (!volumesExist) {        protectionSetsToDelete.add(protectionSet);      }    }  }  return volumesExist;}  }
class C{  @Override public ServerBartender findServerByName(String name){  for (  ClusterHeartbeat cluster : _clusterMap.values()) {    ServerBartender server=cluster.findServerByName(name);    if (server != null) {      return server;    }  }  return null;}  }
class C{  public NioProcessor(Executor executor,SelectorProvider selectorProvider){  super(executor);  try {    if (selectorProvider == null) {      selector=Selector.open();    } else {      selector=selectorProvider.openSelector();    }  } catch (  IOException e) {    throw new RuntimeIoException("Failed to open a selector.",e);  }}  }
class C{  public void startDiscovery(String serviceType,String serviceName){  if (!mDiscoveryStarted) {    mDiscoveryStarted=true;    mDiscoveryTimer.start();    mDiscoveryServiceType=serviceType;    mDiscoveryServiceName=serviceName;    mDiscoveryListener=new NsdListenerDiscovery(this);    mNsdManager.discoverServices(mDiscoveryServiceType,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);  }}  }
class C{  private void addMediaTypes(final MethodResult methodResult,final ClassResult classResult,final ResourceMethod resourceMethod){  resourceMethod.getRequestMediaTypes().addAll(methodResult.getRequestMediaTypes());  if (resourceMethod.getRequestMediaTypes().isEmpty()) {    resourceMethod.getRequestMediaTypes().addAll(classResult.getRequestMediaTypes());  }  if (resourceMethod.getResponseMediaTypes().isEmpty())   resourceMethod.getResponseMediaTypes().addAll(methodResult.getResponseMediaTypes());  if (resourceMethod.getResponseMediaTypes().isEmpty()) {    resourceMethod.getResponseMediaTypes().addAll(classResult.getResponseMediaTypes());  }}  }
class C{  void logStep(Workflow workflow,Step step){  try {    boolean create=false;    com.emc.storageos.db.client.model.WorkflowStep logStep=null;    if (step.workflowStepURI == null) {      create=true;      logStep=new com.emc.storageos.db.client.model.WorkflowStep();      logStep.setId(URIUtil.createId(com.emc.storageos.db.client.model.WorkflowStep.class));      step.workflowStepURI=logStep.getId();      logStep.setWorkflowId(workflow._workflowURI);      logStep.setCreationTime(Calendar.getInstance());      logStep.setStepId(step.stepId);    } else {      logStep=_dbClient.queryObject(com.emc.storageos.db.client.model.WorkflowStep.class,step.workflowStepURI);    }    logStep.setControllerName(step.controllerName);    logStep.setDescription(step.description);    logStep.setSystemId(step.deviceURI);    logStep.setSystemType(step.deviceType);    logStep.setEndTime(step.status.endTime);    logStep.setExecuteMethod(step.executeMethod.methodName);    logStep.setMessage(step.status.message);    if (step.rollbackMethod != null) {      logStep.setRollbackMethod(step.rollbackMethod.methodName);    }    logStep.setStartTime(step.status.startTime);    logStep.setState(step.status.state.name());    logStep.setStepGroup(step.stepGroup);    logStep.setStepId(step.stepId);    logStep.setWaitFor(step.waitFor);    logStep.setSuspendStep(step.suspendStep);    byte[] executeMethodData=GenericSerializer.serialize(step.executeMethod);    logStep.setExecuteMethodData(executeMethodData);    if (step.rollbackMethod != null) {      byte[] rollbackMethodData=GenericSerializer.serialize(step.rollbackMethod);      logStep.setRollbackMethodData(rollbackMethodData);    }    if (create) {      _dbClient.createObject(logStep);    } else {      _dbClient.updateObject(logStep);    }  } catch (  DatabaseException ex) {    _log.error("Cannot persist Cassandra WorkflowEntry record");  }}  }
class C{  private void findSentenceIntervals(JCas jcas){  HashSet<Timex3Interval> timexesToRemove=new HashSet<Timex3Interval>();  FSIterator iterSentence=jcas.getAnnotationIndex(Sentence.type).iterator();  while (iterSentence.hasNext()) {    Sentence s=(Sentence)iterSentence.next();    String sString=s.getCoveredText();    FSIterator iterInter=jcas.getAnnotationIndex(Timex3Interval.type).subiterator(s);    int count=0;    List<Timex3Interval> txes=new ArrayList<Timex3Interval>();    List<Timex3Interval> sentenceTxes=new ArrayList<Timex3Interval>();    while (iterInter.hasNext()) {      Timex3Interval t=(Timex3Interval)iterInter.next();      sString=sString.replace(t.getCoveredText(),"<TX3_" + count + ">");      count++;      txes.add(t);    }    if (count > 0) {      if (find_interval_candidates) {        IntervalCandidateSentence sI=new IntervalCandidateSentence(jcas);        sI.setBegin(s.getBegin());        sI.setEnd(s.getEnd());        sI.addToIndexes();      }      for (      Pattern p : hmIntervalPattern.keySet()) {        String name=hmIntervalPattern.get(p);        List<MatchResult> results=(List<MatchResult>)Toolbox.findMatches(p,sString);        if (results.size() > 0) {          for (          MatchResult r : results) {            Pattern pNorm=Pattern.compile("group\\(([1-9]+)\\)-group\\(([1-9]+)\\)");            String norm=hmIntervalNormalization.get(name);            Matcher mNorm=pNorm.matcher(norm);            if (!mNorm.matches()) {              System.err.println("Problem with the Norm in rule " + name);            }            Timex3Interval startTx=null, endTx=null;            try {              int startId=Integer.parseInt(mNorm.group(1));              int endId=Integer.parseInt(mNorm.group(2));              startTx=txes.get(Integer.parseInt(r.group(startId)));              endTx=txes.get(Integer.parseInt(r.group(endId)));            } catch (            Exception e) {              e.printStackTrace();              return;            }            Timex3Interval annotation=new Timex3Interval(jcas);            annotation.setBegin(startTx.getBegin() > endTx.getBegin() ? endTx.getBegin() : startTx.getBegin());            annotation.setEnd(startTx.getEnd() > endTx.getEnd() ? startTx.getEnd() : endTx.getEnd());            boolean duplicate=false;            for (            Timex3Interval tx : sentenceTxes) {              if (tx.getBegin() == annotation.getBegin() && tx.getEnd() == annotation.getEnd()) {                duplicate=true;                break;              }            }            if (!duplicate) {              annotation.setTimexValueEB(startTx.getTimexValueEB());              annotation.setTimexValueLB(startTx.getTimexValueLE());              annotation.setTimexValueEE(endTx.getTimexValueEB());              annotation.setTimexValueLE(endTx.getTimexValueLE());              annotation.setTimexType(startTx.getTimexType());              annotation.setFoundByRule(name);              String emptyValue=createEmptyValue(startTx,endTx,jcas);              annotation.setEmptyValue(emptyValue);              annotation.setBeginTimex(startTx.getBeginTimex());              annotation.setEndTimex(endTx.getEndTimex());              try {                sentenceTxes.add(annotation);              } catch (              NumberFormatException e) {                Logger.printError(component,"Couldn't do emptyValue calculation on accont of a faulty normalization in " + annotation.getTimexValueEB() + " or "+ annotation.getTimexValueEE());              }              timexesToRemove.add(startTx);              timexesToRemove.add(endTx);              annotation.addToIndexes();            }          }        }      }    }  }  for (  Timex3Interval txi : timexesToRemove) {    txi.removeFromIndexes();  }}  }
class C{  @Override public void generatePartition(Instances data) throws Exception {  buildClassifier(data);}  }
class C{  public static String prettyPrintXmlDeepDiff(Map<?,?> a,Map<?,?> b,@Nullable String path){  return prettyPrintDiffedMap(deepDiff(a,b,false),path);}  }
class C{  public boolean addNode(Node node){  if (node == null) {    throw new NullPointerException();  }  if (edgeLists.containsKey(node)) {    return false;  }  edgeLists.put(node,new ArrayList<Edge>());  nodes.add(node);  namesHash.put(node.getName(),node);  return true;}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numUpslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numUpslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 > z) {              numUpslopeNeighbours++;            }          }          output.setValue(row,col,numUpslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static KeyPair random(final CryptoEngine engine){  final KeyPair pair=engine.createKeyGenerator().generateKeyPair();  return new KeyPair(pair.getPrivateKey(),pair.getPublicKey(),engine);}  }
class C{  protected void debugCodeCall(String methodName){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "();");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PaintItem)) {    return false;  }  PaintItem that=(PaintItem)obj;  if (this.value != that.value) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  return true;}  }
class C{  public void retryReferral(){  if (debug)   System.out.println("LdapReferralException.retryReferral");  if (referralIndex > 0)   referralIndex--;}  }
class C{  public OracleDatabaseImpl(OracleConnection conn,DescriptorCache descriptorCache,MetricsCollector metrics,boolean localCaching){  this.conn=conn;  this.sharedDescriptorCache=descriptorCache;  this.metrics=metrics;  if (localCaching) {    localDescriptorCache=new HashMap<String,CollectionDescriptor>();    localCollectionCache=new HashMap<String,OracleCollectionImpl>();  } else {    localDescriptorCache=null;    localCollectionCache=null;  }}  }
class C{  protected void actualizarProductor(){  if (StringUtils.isBlank(productor)) {    FondoVO fondo=service.lookupGestionFondosBI().getFondoXId(id);    if (fondo != null)     productor=fondo.getIdEntProductora();  }  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  if (productor != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoReferenciaVO(id,ID_CAMPO_PRODUCTOR,1,CampoReferenciaVO.REFERENCIA_A_ELEMENTO_DESCRIPTOR,productor,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_REFERENCIA,id,ID_CAMPO_PRODUCTOR);}  }
class C{  public DoubleMatrix3D descending(int slices,int rows,int columns){  DoubleMatrix3D matrix=make(slices,rows,columns);  int v=0;  for (int slice=slices; --slice >= 0; ) {    for (int row=rows; --row >= 0; ) {      for (int column=columns; --column >= 0; ) {        matrix.setQuick(slice,row,column,v++);      }    }  }  return matrix;}  }
class C{  public Page(int pageNum,String text){  this(pageNum,null,text);}  }
class C{  public ThumbnailSetRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public boolean contains(String field){  return delegate.contains(field);}  }
class C{  private void initFactories(){  variableFactories.put(RuntimeVariable.Length.name(),new ChromosomeLengthOutputVariableFactory());  variableFactories.put(RuntimeVariable.Size.name(),new ChromosomeSizeOutputVariableFactory());  variableFactories.put(RuntimeVariable.Coverage.name(),new ChromosomeCoverageOutputVariableFactory());  variableFactories.put(RuntimeVariable.Fitness.name(),new ChromosomeFitnessOutputVariableFactory());}  }
class C{  public static void shuffle(List<?> list,java.util.Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public FourierGenerator(int maxPeaks,int adaptionType,int attributesPerPeak,double epsilon,RandomGenerator random){  this.factory=new SinusFactory(maxPeaks);  factory.setAdaptionType(adaptionType);  factory.setEpsilon(epsilon);  factory.setAttributePerPeak(attributesPerPeak);  this.random=random;}  }
class C{  public CActionSelectNodeSuccessors(final ZyGraph graph,final NaviNode node){  super("Select successors");  m_graph=Preconditions.checkNotNull(graph,"IE00934: Graph argument can't be null");  m_node=Preconditions.checkNotNull(node,"IE00935: Node argument can't be null");}  }
class C{  public void readAttributes(ObjectInputStream in,MutableAttributeSet a) throws ClassNotFoundException, IOException {  readAttributeSet(in,a);}  }
class C{  public void purgeOldHostsAndMetrics(final int dmax){  final String[] knownHosts=getKnownHosts();  for (  String hostName : knownHosts) {    if (!purgeOldHost(hostName,dmax)) {      purgeOldMetrics(hostName);    }  }}  }
class C{  static Intent createAddToHomeIntent(Context context,String url,String title,Bitmap touchIcon,Bitmap favicon){  Intent i=new Intent(INSTALL_SHORTCUT);  Intent shortcutIntent=createShortcutIntent(url);  shortcutIntent.setPackage(context.getPackageName());  i.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);  i.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  i.putExtra(Intent.EXTRA_SHORTCUT_ICON,createIcon(context,touchIcon,favicon,BookmarkIconType.ICON_HOME_SHORTCUT));  i.putExtra("duplicate",false);  return i;}  }
class C{  public static <T>T loadManifest(Context context,String tag,String url,UriLoadable.Parser<T> parser) throws IOException {  String userAgent=getUserAgent(context);  int retryCount=0;  while (true) {    try {      DefaultUriDataSource manifestDataSource=new DefaultUriDataSource(context,userAgent);      ManifestFetcher<T> manifestFetcher=new ManifestFetcher<>(url,manifestDataSource,parser);      SyncManifestCallback<T> callback=new SyncManifestCallback<>();      manifestFetcher.singleLoad(context.getMainLooper(),callback);      return callback.getResult();    } catch (    IOException e) {      if (retryCount++ < MANIFEST_LOAD_MAX_RETRY_COUNT) {        Log.e(tag,"Failed to load manifest",e);        try {          Thread.sleep(5000);        } catch (        InterruptedException e2) {          throw new InterruptedIOException();        }      } else {        throw e;      }    }  }}  }
class C{  public CarouselView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  @Nonnull public BugInstance addMethod(@SlashedClassName String className,String methodName,String methodSig,int accessFlags){  addMethod(MethodAnnotation.fromForeignMethod(className,methodName,methodSig,accessFlags));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.286 -0500",hash_original_method="29D77D40DB4AFADA133299814B25205C",hash_generated_method="30044EA25A08F89B504B681E78335132") public void deleteAt(int row,int count){  if (((row | count) < 0) || (row + count > size())) {    throw new IndexOutOfBoundsException(row + ", " + count);  }  moveRowGapTo(row + count);  mRowGapStart-=count;  mRowGapLength+=count;}  }
class C{  public long entriesCount(@Nullable String spaceName){  GridOffHeapPartitionedMap m=offheap(spaceName);  return m == null ? -1 : m.size();}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar,String lineEnd){  this.rawWriter=writer;  this.pw=new PrintWriter(writer);  this.separator=separator;  this.quotechar=quotechar;  this.escapechar=escapechar;  this.lineEnd=lineEnd;}  }
class C{  public void initialize(){  LayoutTool layoutTool=new LayoutTool(graphModel,edgeMatcher);  positions=Maps.newHashMapWithExpectedSize(graphModel.getNodes().size());  layoutTool.layoutTree();  Point2dUtils.translatePos(region,graphModel.getNodes(),positions);}  }
class C{  public void write(int code) throws IOException {  if (_outputStream == null)   throw new IOException("Writer closed");  if ((code & 0xffffff80) == 0) {    _bytes[_index]=(byte)code;    if (++_index >= _bytes.length) {      flushBuffer();    }  } else {    write2(code);  }}  }
class C{  public ScrollFrame(Offset screenLocation){  super(null);  this.setScreenLocation(screenLocation);  this.initializeUIControls();}  }
class C{  public static void addMenu(WEditorPopupMenu popupMenu){  Menuitem changeLogItem=new Menuitem();  changeLogItem.setLabel(Msg.getElement(Env.getCtx(),"AD_ChangeLog_ID"));  changeLogItem.setImage("/images/ChangeLog16.png");  changeLogItem.setAttribute(WEditorPopupMenu.EVENT_ATTRIBUTE,WEditorPopupMenu.CHANGE_LOG_EVENT);  changeLogItem.addEventListener(Events.ON_CLICK,popupMenu);  popupMenu.appendChild(changeLogItem);}  }
class C{  public void addElevations(File file) throws IOException {  if (file == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!file.exists()) {    String message=Logging.getMessage("generic.FileNotFound",file.getPath());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DataRasterReaderFactory readerFactory=(DataRasterReaderFactory)WorldWind.createConfigurationComponent(AVKey.DATA_RASTER_READER_FACTORY_CLASS_NAME);  DataRasterReader reader=readerFactory.findReaderFor(file,null);  AVList metadata=reader.readMetadata(file,null);  if (metadata == null || !AVKey.ELEVATION.equals(metadata.getStringValue(AVKey.PIXEL_FORMAT))) {    String msg=Logging.getMessage("ElevationModel.SourceNotElevations",file.getAbsolutePath());    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  DataRaster[] rasters=reader.read(file,null);  if (rasters == null || rasters.length == 0) {    String msg=Logging.getMessage("ElevationModel.CannotReadElevations",file.getAbsolutePath());    Logging.logger().severe(msg);    throw new WWRuntimeException(msg);  }  for (  DataRaster raster : rasters) {    this.addRaster(raster,file.getAbsolutePath());  }}  }
class C{  public boolean interrupt(JobKey jobKey) throws UnableToInterruptJobException {  List<JobExecutionContext> jobs=getCurrentlyExecutingJobs();  JobDetail jobDetail=null;  Job job=null;  boolean interrupted=false;  for (  JobExecutionContext jec : jobs) {    jobDetail=jec.getJobDetail();    if (jobKey.equals(jobDetail.getKey())) {      job=jec.getJobInstance();      if (job instanceof InterruptableJob) {        ((InterruptableJob)job).interrupt();        interrupted=true;      } else {        throw new UnableToInterruptJobException("Job " + jobDetail.getKey() + " can not be interrupted, since it does not implement "+ InterruptableJob.class.getName());      }    }  }  return interrupted;}  }
class C{  private void loadBooleanSettings(){  for (  String settingName : booleanSettings.keySet()) {    BooleanSetting setting=booleanSettings.get(settingName);    Boolean value=settings.getBoolean(settingName);    setting.setSettingValue(value);  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("Signature.DSA");  for (int i=0; i < providers.length; i++) {    Signature.getInstance("DSA",providers[i].getName());  }  try {    Signature.getInstance("bogus",providers[0].getName());    fail();  } catch (  NoSuchAlgorithmException expected) {  }  Provider[] pp=Security.getProviders();  for (int i=0; i < pp.length; i++) {    try {      Signature.getInstance("DSA",pp[i].toString());      fail(pp[i].toString());    } catch (    NoSuchProviderException expected) {    }  }  String[] sp={null,""};  for (int i=0; i < sp.length; i++) {    try {      Signature.getInstance("DSA",sp[i]);      fail(sp[i]);    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  @Override public void presentation(String programName,String programEditor,String editorURL,String scriptorName,String prefixName) throws CancelException {  final String textToShow=String.format(translate("This wizard will help you install %1$s on your computer.\n\n" + "This program was created by: %2$s\n%3$s\n\nThis installation program is provided by: %4$s" + "\n\n%1$s will be installed in: ${application.user.wineprefix}%5$s\n\n"+ "${application.name} is not responsible for anything that might happen as a result of using"+ " these scripts.\n\nClick Next to start"),programName,programEditor,editorURL,scriptorName,prefixName);  presentation(textToShow);}  }
class C{  public ProcessStepDossierPart addPSDP(long processStepId,long dossierPartId) throws PortalException, SystemException {  ProcessStepDossierPart psdp=null;  ProcessStepDossierPartPK pk=new ProcessStepDossierPartPK(processStepId,dossierPartId);  psdp=processStepDossierPartPersistence.fetchByPrimaryKey(pk);  if (Validator.isNull(psdp)) {    psdp=processStepDossierPartPersistence.create(pk);  }  processStepDossierPartPersistence.update(psdp);  return psdp;}  }
class C{  protected Integer mapThrowableFlat(Throwable throwable){  Class<? extends Throwable> throwableClass=throwable.getClass();  Integer resId=throwableToMsgIdMap.get(throwableClass);  if (resId == null) {    Class<? extends Throwable> closestClass=null;    Set<Entry<Class<? extends Throwable>,Integer>> mappings=throwableToMsgIdMap.entrySet();    for (    Entry<Class<? extends Throwable>,Integer> mapping : mappings) {      Class<? extends Throwable> candidate=mapping.getKey();      if (candidate.isAssignableFrom(throwableClass)) {        if (closestClass == null || closestClass.isAssignableFrom(candidate)) {          closestClass=candidate;          resId=mapping.getValue();        }      }    }  }  return resId;}  }
class C{  public <T>void put(TypeTag tag,T red,T black){  cache.put(tag,new Tuple<>(red,black));}  }
class C{  public int numPendingOutput(){  if (m_OutputFormat == null) {    throw new NullPointerException("No output instance format defined");  }  return m_OutputQueue.size();}  }
class C{  public int parseSeq(int rlen[]) throws DecodeException {  int seq=parseByte();  int len=parseLength();  if (rlen != null) {    rlen[0]=len;  }  return seq;}  }
class C{  public EPServiceIsolationException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private static byte[] hexStr2Bin(String hex){  int sz=hex.length() / 2;  byte[] b=new byte[hex.length() / 2];  for (int i=0; i < sz; i++) {    try {      b[i]=(byte)Integer.parseInt(hex.substring(i * 2,i * 2 + 2),16);    } catch (    Exception e) {      e.printStackTrace();      return null;    }  }  return b;}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  BigInteger n=params.getN();  int nBitLength=n.bitLength();  BigInteger d;  do {    d=new BigInteger(nBitLength,random);  } while (d.equals(ZERO) || (d.compareTo(n) >= 0));  ECPoint Q=params.getG().multiply(d);  return new AsymmetricCipherKeyPair(new ECPublicKeyParameters(Q,params),new ECPrivateKeyParameters(d,params));}  }
class C{  private void showAbout(){  if (about == null) {    about=new CommonAboutDialog(frame);  }  about.setVisible(true);}  }
class C{  public final boolean isSupported(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  public <T extends GeoVisibleResource>Iterator<URI> queryByType(Class<T> clazz,boolean activeOnly) throws Exception {  WebResource rRoot=createRequest(GEOVISIBLE_URI + clazz.getName()).queryParam("active_only",Boolean.toString(activeOnly));  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).get(ClientResponse.class);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  @SuppressWarnings("rawtypes") ResourcesResponse resources=(ResourcesResponse)objInputStream.readObject();  @SuppressWarnings("unchecked") List<URI> ids=resources.getObjects();  return ids.iterator();}  }
class C{  public void paintTextAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean hasArchiveNotifyStatus(){  return hasExtension(ArchiveNotifyStatus.class);}  }
class C{  public static ODataUri createODataUri(String urlString) throws ODataException {  return new ODataParserImpl().parseUri(urlString,buildEntityDataModel());}  }
class C{  public DLSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public Matrix L(){  return L.clone();}  }
class C{  public static double autoCorrelation(DoubleArrayList data,int lag,double mean,double variance){  int N=data.size();  if (lag >= N)   throw new IllegalArgumentException("Lag is too large");  double[] elements=data.elements();  double run=0;  for (int i=lag; i < N; ++i)   run+=(elements[i] - mean) * (elements[i - lag] - mean);  return (run / (N - lag)) / variance;}  }
class C{  public static boolean checkCameraHardware(Context context){  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {    return true;  } else {    return false;  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:06.933 -0500",hash_original_method="575079C176E4EB6FD7A12CD67A6942A7",hash_generated_method="4A008A76C11FDFEC076499B05D184DCF") @Override public int read() throws IOException {  bytik=in.get() & 0x00FF;  consumed++;  return bytik;}  }
class C{  public static void doPagingSearch(BufferedReader in,IndexSearcher searcher,Query query,int hitsPerPage,boolean raw,boolean interactive) throws IOException {  TopDocs results=searcher.search(query,5 * hitsPerPage);  ScoreDoc[] hits=results.scoreDocs;  int numTotalHits=results.totalHits;  System.out.println(numTotalHits + " total matching documents");  int start=0;  int end=Math.min(numTotalHits,hitsPerPage);  while (true) {    if (end > hits.length) {      System.out.println("Only results 1 - " + hits.length + " of "+ numTotalHits+ " total matching documents collected.");      System.out.println("Collect more (y/n) ?");      String line=in.readLine();      if (line.length() == 0 || line.charAt(0) == 'n') {        break;      }      hits=searcher.search(query,numTotalHits).scoreDocs;    }    end=Math.min(hits.length,start + hitsPerPage);    for (int i=start; i < end; i++) {      if (raw) {        System.out.println("doc=" + hits[i].doc + " score="+ hits[i].score);        continue;      }      Document doc=searcher.doc(hits[i].doc);      String path=doc.get("path");      if (path != null) {        System.out.println((i + 1) + ". " + path);        String title=doc.get("title");        if (title != null) {          System.out.println("   Title: " + doc.get("title"));        }      } else {        System.out.println((i + 1) + ". " + "No path for this document");      }    }    if (!interactive || end == 0) {      break;    }    if (numTotalHits >= end) {      boolean quit=false;      while (true) {        System.out.print("Press ");        if (start - hitsPerPage >= 0) {          System.out.print("(p)revious page, ");        }        if (start + hitsPerPage < numTotalHits) {          System.out.print("(n)ext page, ");        }        System.out.println("(q)uit or enter number to jump to a page.");        String line=in.readLine();        if (line.length() == 0 || line.charAt(0) == 'q') {          quit=true;          break;        }        if (line.charAt(0) == 'p') {          start=Math.max(0,start - hitsPerPage);          break;        } else         if (line.charAt(0) == 'n') {          if (start + hitsPerPage < numTotalHits) {            start+=hitsPerPage;          }          break;        } else {          int page=Integer.parseInt(line);          if ((page - 1) * hitsPerPage < numTotalHits) {            start=(page - 1) * hitsPerPage;            break;          } else {            System.out.println("No such page");          }        }      }      if (quit)       break;      end=Math.min(numTotalHits,start + hitsPerPage);    }  }}  }
class C{  public void updateSearchIndex(DBTransaction transaction,Set<SearchIndexEntry> entries) throws SQLException {  Set<SearchIndexEntry> oldEntries=readExistingEntries(transaction);  Set<SearchIndexEntry> toDelete=Sets.difference(oldEntries,entries);  Set<SearchIndexEntry> toAdd=Sets.difference(entries,oldEntries);  deleteObsoleteEntries(transaction,toDelete);  addNewEntries(transaction,toAdd);}  }
class C{  public static int[] toPrimitive(Integer[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_INT_ARRAY;  }  final int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  @Override public void run(){  boolean terminate=false;  while (!(terminate || Thread.currentThread().isInterrupted())) {    try {      Runnable eventProcessor=eventQueue.take();      eventProcessor.run();    } catch (    InterruptedException e) {      terminate=true;    }  }}  }
class C{  public void sendToDimension(IMessage message,int dimensionId){  netHandler.sendToDimension(message,dimensionId);}  }
class C{  public static <T>LazyDequeX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public DateMidnight withYearOfCentury(int yearOfCentury){  return withMillis(getChronology().yearOfCentury().set(getMillis(),yearOfCentury));}  }
class C{  void parse(String baseDir,String className){  String fileName=baseDir + "/" + className.replace('.','/')+ ".java";  current=new ParseState();  try {    RandomAccessFile file=new RandomAccessFile(fileName,"r");    byte[] buff=new byte[(int)file.length()];    file.readFully(buff);    source=new String(buff,"UTF-8");    file.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  source=replaceUnicode(source);  source=removeRemarks(source);  try {    readToken();    parseCompilationUnit();  } catch (  Exception e) {    throw new RuntimeException(source.substring(0,current.index) + "[*]" + source.substring(current.index),e);  }}  }
class C{  private Stat preparePortStatInfo(String nativeId,URI resourceId,long iops,long timeSample){  Stat ipPortStat=new Stat();  ipPortStat.setServiceType(Constants._File);  ipPortStat.setTimeCollected(timeSample);  ipPortStat.setResourceId(resourceId);  ipPortStat.setNativeGuid(nativeId);  ipPortStat.setTotalIOs(iops);  return ipPortStat;}  }
class C{  public SerialTurnout(String systemName,SerialTrafficController tc,String userName){  super(systemName,userName);  this.tc=tc;  housecode=tc.getAdapterMemo().getSerialAddress().houseCodeAsValueFromSystemName(getSystemName());  devicecode=tc.getAdapterMemo().getSerialAddress().deviceCodeAsValueFromSystemName(getSystemName());}  }
class C{  public void doFinalOrientation(Graph graph){  if (completeRuleSetUsed) {    zhangFinalOrientation(graph);  } else {    spirtesFinalOrientation(graph);  }}  }
class C{  public Node addMappingAndRender(String prefix,String uri,Attr n){  NameSpaceSymbEntry ob=symb.get(prefix);  if ((ob != null) && uri.equals(ob.uri)) {    if (!ob.rendered) {      ob=(NameSpaceSymbEntry)ob.clone();      needsClone();      symb.put(prefix,ob);      ob.lastrendered=uri;      ob.rendered=true;      return ob.n;    }    return null;  }  NameSpaceSymbEntry ne=new NameSpaceSymbEntry(uri,n,true,prefix);  ne.lastrendered=uri;  needsClone();  symb.put(prefix,ne);  if ((ob != null) && (ob.lastrendered != null) && (ob.lastrendered.equals(uri))) {    ne.rendered=true;    return null;  }  return ne.n;}  }
class C{  public void testSendFunctionGroup3(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendFunctionGroup3();  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup3 needs to be implemented if invoked");}  }
class C{  public BaseDateTime(DateTimeZone zone){  this(DateTimeUtils.currentTimeMillis(),ISOChronology.getInstance(zone));}  }
class C{  public static double multiply(double left,double right){  return left * right;}  }
class C{  public static void notEmpty(Collection<?> c,String name){  notNull(c,name);  if (c.isEmpty())   throw new IllegalArgumentException(INVALID_ARG_MSG_PREFIX + name + NOT_EMPTY_SUFFIX);}  }
class C{  public URI rdfKey(){  return key;}  }
class C{  private Geometry transFormGeometry(Geometry geometry){  geometry=doManualTransformation((Geometry)geometry.clone());  return geometry;}  }
class C{  public boolean isSameAs(FirewallRule r){  if (this.action != r.action || this.wildcard_dl_type != r.wildcard_dl_type || (this.wildcard_dl_type == false && this.dl_type != r.dl_type) || this.wildcard_tp_src != r.wildcard_tp_src || (this.wildcard_tp_src == false && this.tp_src != r.tp_src) || this.wildcard_tp_dst != r.wildcard_tp_dst || (this.wildcard_tp_dst == false && this.tp_dst != r.tp_dst) || this.wildcard_dpid != r.wildcard_dpid || (this.wildcard_dpid == false && this.dpid != r.dpid) || this.wildcard_in_port != r.wildcard_in_port || (this.wildcard_in_port == false && this.in_port != r.in_port) || this.wildcard_nw_src != r.wildcard_nw_src || (this.wildcard_nw_src == false && (this.nw_src_prefix != r.nw_src_prefix || this.nw_src_maskbits != r.nw_src_maskbits)) || this.wildcard_dl_src != r.wildcard_dl_src || (this.wildcard_dl_src == false && this.dl_src != r.dl_src) || this.wildcard_nw_proto != r.wildcard_nw_proto || (this.wildcard_nw_proto == false && this.nw_proto != r.nw_proto) || this.wildcard_nw_dst != r.wildcard_nw_dst || (this.wildcard_nw_dst == false && (this.nw_dst_prefix != r.nw_dst_prefix || this.nw_dst_maskbits != r.nw_dst_maskbits)) || this.wildcard_dl_dst != r.wildcard_dl_dst || (this.wildcard_dl_dst == false && this.dl_dst != r.dl_dst)) {    return false;  }  return true;}  }
class C{  private Iterator<Date> std_lower_bound(final Date date){  final List<Date> ldates=new ArrayList<Date>();  if (dates_.size() > 0) {    int index=-1;    for (int i=0; i < dates_.size(); i++) {      final Date d=dates_.get(i);      if (d.equals(date)) {        index=i;        break;      }    }    if (index > 0) {      for (int i=index; i < dates_.size(); i++) {        ldates.add(dates_.get(i));      }      return ldates.iterator();    }  }  return ldates.iterator();}  }
class C{  public final Vec4D normalizeTo(float len){  float mag=(float)Math.sqrt(x * x + y * y + z * z);  if (mag > 0) {    mag=len / mag;    x*=mag;    y*=mag;    z*=mag;    w*=mag;  }  return this;}  }
class C{  public static boolean isKnownAsFieldMethodCall(BytecodeInstruction instruction){  return knownFieldMethodCalls.contains(instruction);}  }
class C{  private void angularBind(String name,Object o,String noteId,AngularObjectWatcher watcher){  AngularObjectRegistry registry=interpreterContext.getAngularObjectRegistry();  if (registry.get(name,noteId,null) == null) {    registry.add(name,o,noteId,null);  } else {    registry.get(name,noteId,null).set(o);  }  angularWatch(name,watcher);}  }
class C{  public void deleteHistory(String pipelineName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling deleteHistory");  }  String path="/v1/pipeline/{pipelineName}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"DELETE",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public String sqlAD_getSystemParametersWithoutElement(String vendorName,String catalogName,String schemaName,ArrayList<String> customEntities){  String tableName="AD_Process_Para";  String tableAlias="c";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("ColumnName");  columnNames.add("Name");  columnNames.add("Description");  columnNames.add("Help");  columnNames.add("EntityType");  ArrayList<String> aliasNames=null;  ArrayList<String> conditions=new ArrayList<String>();  String subQuery=sql_select(vendorName,catalogName,schemaName,"AD_Element","e",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList("UPPER(c.ColumnName)=UPPER(e.ColumnName)")),null,false);  conditions.add(new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString());  StringBuffer entityClause=new StringBuffer();  if (customEntities != null && customEntities.size() > 0) {    for (int i=0; i < customEntities.size(); i++) {      if (i == 0)       entityClause.append("c.entitytype NOT IN ("); else       entityClause.append(", ");      entityClause.append("'").append(customEntities.get(i)).append("'");    }    entityClause.append(")");  }  conditions.add(entityClause.toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,conditions,sortColumns,true);}  }
class C{  public GlobalRosterEntryComboBox(){  super(Roster.getDefault(),Roster.ALLENTRIES,null,null,null,null,null,null,null);}  }
class C{  @SuppressWarnings("unchecked") public <T extends AbstractEffectList>T concat(@Nonnull AbstractEffectList list){  effects.addAll(list.effects);  return (T)this;}  }
class C{  public void numberValue(float v) throws ParseException {  if (index == a.length) {    as.add(a);    a=new float[a.length * 2 + 1];    index=0;  }  a[index++]=v;  count++;}  }
class C{  public static Realm parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException, RealmException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag)) {    return null;  }  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new Realm(subDer);  }}  }
class C{  public ObjectNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void show(){  show(false,null);}  }
class C{  public void renderWorld(IBlockAccess blockAccess){  render(Optional.of(blockAccess),Optional.empty());}  }
class C{  public static String stringToHexString(String in){  byte[] ba=in.getBytes();  return toHexString(ba);}  }
class C{  @Override public void handleNotification(Notification notification,Object handback){  String type=notification.getType();  if (PulseConstants.NOTIFICATION_TYPE_SYSTEM_ALERT.equals(type)) {    Cluster.Alert alert=new Cluster.Alert();    Long timeStamp=notification.getTimeStamp();    Date date=new Date(timeStamp);    alert.setTimestamp(date);    String notificationSource=(String)notification.getUserData();    alert.setMemberName(notificationSource);    String alertDescription=notification.getMessage();    if (alertDescription.startsWith("[error")) {      alert.setSeverity(Cluster.Alert.ERROR);    } else     if (alertDescription.startsWith("[warning")) {      alert.setSeverity(Cluster.Alert.WARNING);    } else     if (alertDescription.startsWith("[severe")) {      alert.setSeverity(Cluster.Alert.SEVERE);    } else {      alert.setSeverity(Cluster.Alert.INFO);    }    alert.setDescription(notification.getMessage());    alert.setAcknowledged(false);    alert.setId(Cluster.Alert.nextID());    cluster.addAlert(alert);  } else {    Cluster.Alert alert=new Cluster.Alert();    Long timeStamp=notification.getTimeStamp();    Date date=new Date(timeStamp);    alert.setTimestamp(date);    String notificationSource=(String)notification.getSource();    alert.setMemberName(notificationSource);    String alertDescription=notification.getMessage();    alert.setDescription(alertDescription);    alert.setSeverity(Cluster.Alert.INFO);    alert.setAcknowledged(false);    alert.setId(Cluster.Alert.nextID());    cluster.addAlert(alert);    if (PulseConstants.NOTIFICATION_TYPE_REGION_DESTROYED.equals(type)) {      String msg=notification.getMessage();      String deletedRegion=msg.substring(msg.indexOf("Name ") + "Name ".length());      String memberName=notificationSource;      Cluster.Member member=cluster.getMembersHMap().get(memberName);      if (member.getMemberRegions().get(deletedRegion) != null) {        member.getMemberRegions().remove(deletedRegion);        member.setTotalRegionCount(member.getMemberRegions().size());      }    }  }}  }
class C{  public static int minDistance(String word1,String word2){  if (word1.equals(word2))   return 0;  int m=word1.length();  int n=word2.length();  int[][] d=new int[m + 1][n + 1];  d[0][0]=0;  for (int i=1; i < m + 1; i++)   d[i][0]=i;  for (int j=1; j < n + 1; j++)   d[0][j]=j;  for (int i=1; i < m + 1; i++) {    for (int j=1; j < n + 1; j++) {      d[i][j]=Math.min(Math.min(d[i][j - 1] + 1,d[i - 1][j] + 1),word1.charAt(i - 1) == word2.charAt(j - 1) ? d[i - 1][j - 1] : d[i - 1][j - 1] + 1);    }  }  return d[m][n];}  }
class C{  public static ContactListAdapter createRcsContactListAdapter(Context context){  ContentResolver content=context.getContentResolver();  Cursor cursor=null;  ConnectionManager apiConnectionManager=ConnectionManager.getInstance();  MatrixCursor matrix=new MatrixCursor(PROJECTION_PHONE);  ContactService contactsApi=apiConnectionManager.getContactApi();  try {    Set<RcsContact> rcsContacts=contactsApi.getRcsContacts();    if (rcsContacts != null && !rcsContacts.isEmpty()) {      Set<ContactId> rcsContactIds=new HashSet<>();      for (      RcsContact rcsContact : rcsContacts) {        rcsContactIds.add(rcsContact.getContactId());      }      cursor=content.query(Phone.CONTENT_URI,PROJECTION_PHONE,WHERE_CLAUSE_PHONE,null,null);      if (cursor == null) {        throw new SQLException("Query failed!");      }      Set<ContactId> treatedContactIDs=new HashSet<>();      int columnIdxId=cursor.getColumnIndexOrThrow(Phone._ID);      int columIdxLabel=cursor.getColumnIndexOrThrow(Phone.LABEL);      int columnIdxType=cursor.getColumnIndexOrThrow(Phone.TYPE);      int columnIdxContactId=cursor.getColumnIndexOrThrow(Phone.CONTACT_ID);      int columnIdxNumber=cursor.getColumnIndexOrThrow(Phone.NUMBER);      while (cursor.moveToNext()) {        String phoneNumber=cursor.getString(columnIdxNumber);        if (!ContactUtil.isValidContact(phoneNumber)) {          continue;        }        ContactId contact=ContactUtil.formatContact(phoneNumber);        if (rcsContactIds.contains(contact) && !treatedContactIDs.contains(contact)) {          matrix.addRow(new Object[]{cursor.getLong(columnIdxId),contact.toString(),cursor.getString(columIdxLabel),cursor.getInt(columnIdxType),cursor.getLong(columnIdxContactId)});          treatedContactIDs.add(contact);        }      }    }    return new ContactListAdapter(context,matrix);  } catch (  RcsServiceNotAvailableException e) {    return null;  }catch (  RcsServiceException e) {    Log.w(LOGTAG,ExceptionUtil.getFullStackTrace(e));    return null;  } finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  IKnowledge knowledge=knowledgeEditable.getKnowledge();  KnowledgeSelection selection=new KnowledgeSelection(knowledge);  InternalClipboard.getInstance().setContents(selection,this);}  }
class C{  private static boolean ecjSupportsJava7Features(){  try {    TryStatement.class.getDeclaredField("resources");    return true;  } catch (  NoSuchFieldException e) {    return false;  }}  }
class C{  public EmbeddedJMSResource(boolean useNetty){  try {    configuration=new ConfigurationImpl().setName(SERVER_NAME).setPersistenceEnabled(false).setSecurityEnabled(false).addAcceptorConfiguration("invm","vm://0");    if (useNetty) {      configuration.addAcceptorConfiguration("netty",DefaultConnectionProperties.DEFAULT_BROKER_BIND_URL);    }    jmsConfiguration=new JMSConfigurationImpl();    init();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void bezier(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4){  g.bezier(x1,y1,x2,y2,x3,y3,x4,y4);}  }
class C{  public DateMidnight withZoneRetainFields(DateTimeZone newZone){  newZone=DateTimeUtils.getZone(newZone);  DateTimeZone originalZone=DateTimeUtils.getZone(getZone());  if (newZone == originalZone) {    return this;  }  long millis=originalZone.getMillisKeepLocal(newZone,getMillis());  return new DateMidnight(millis,getChronology().withZone(newZone));}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthToken[");  buffer.append("m_user = ").append(m_user);  buffer.append(", m_dept = ").append(m_dept);  buffer.append(", m_groups = ").append(m_groups);  buffer.append("]");  return buffer.toString();}  }
class C{  public void print(long lnum){  print(String.valueOf(lnum));}  }
class C{  public URLDataSource2(URL url){  this.url=url;}  }
class C{  public static void deleteVMs(String documentSelfLink,boolean isMock,VerificationHost host,boolean deleteDocumentOnly) throws Throwable {  host.testStart(1);  ResourceRemovalTaskState deletionState=new ResourceRemovalTaskState();  QuerySpecification resourceQuerySpec=new QueryTask.QuerySpecification();  resourceQuerySpec.query.setTermPropertyName(ServiceDocument.FIELD_NAME_SELF_LINK).setTermMatchValue(documentSelfLink);  deletionState.resourceQuerySpec=resourceQuerySpec;  deletionState.isMockRequest=isMock;  deletionState.documentExpirationTimeMicros=Utils.getNowMicrosUtc() + TimeUnit.MINUTES.toMicros(AWS_VM_REQUEST_TIMEOUT_MINUTES);  if (deleteDocumentOnly) {    deletionState.options=EnumSet.of(TaskOption.DOCUMENT_CHANGES_ONLY);  }  host.send(Operation.createPost(UriUtils.buildUri(host,ResourceRemovalTaskService.FACTORY_LINK)).setBody(deletionState).setCompletion(host.getCompletion()));  host.testWait();  ProvisioningUtils.queryComputeInstances(host,1);}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public static OneCameraFeatureConfig createDefault(ContentResolver contentResolver,MemoryManager memoryManager){  boolean useCaptureModule=true;  Log.i(TAG,"CaptureModule? " + useCaptureModule);  HdrPlusSupportLevel hdrPlusSupportLevel=GcamHelper.determineHdrPlusSupportLevel(contentResolver,useCaptureModule);  return new OneCameraFeatureConfig(useCaptureModule,buildCaptureModuleDetector(contentResolver),hdrPlusSupportLevel,memoryManager.getMaxAllowedNativeMemoryAllocation(),GservicesHelper.getMaxAllowedImageReaderCount(contentResolver));}  }
class C{  GameKeyHandler(StendhalClient client,GameScreen screen){  this.client=client;  this.screen=screen;}  }
class C{  public static PcdRunner serializableInstance(){  return new PcdRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  private void checkDefaultAndFixed(XSElementDecl element){  if (element.getDefaultValue() != null) {    log(Level.WARNING,WARNING_DEFAULT_ATTRIBUTE + " Element: " + element.getName());  }  if (element.getFixedValue() != null) {    log(Level.WARNING,WARNING_FIXED_ATTRIBUTE + " Element: " + element.getName());  }}  }
class C{  public static LiteralImpl randomDate(){  StringBuilder sb=new StringBuilder();  Formatter formatter=new Formatter(sb,Locale.US);  formatter.format("%04d-%02d-%02d",randomIntBetween(1,9999),randomIntBetween(1,12),randomIntBetween(1,28));  formatter.close();  return new LiteralImpl(sb.toString(),XMLSchema.DATE);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tGenerates randomly distributed instances in the cluster.","A",1,"-A <range>"));  result.addElement(new Option("\tGenerates uniformly distributed instances in the cluster.","U",1,"-U <range>"));  result.addElement(new Option("\tGenerates gaussian distributed instances in the cluster.","G",1,"-G <range>"));  result.addElement(new Option("\tThe attribute min/max (-A and -U) or mean/stddev (-G) for\n" + "\tthe cluster.","D",1,"-D <num>,<num>"));  result.addElement(new Option("\tThe range of number of instances per cluster (default " + defaultMinInstNum() + ".."+ defaultMaxInstNum()+ ").","N",1,"-N <num>..<num>"));  result.addElement(new Option("\tUses integer instead of continuous values (default continuous).","I",0,"-I"));  return result.elements();}  }
class C{  public Builder(Context context){  this.context=context;  initDefaultBackgroundColor(this.context);}  }
class C{  @Inline @Entrypoint public static void doubleFieldWrite(Object ref,double value,Offset offset,int locationMetadata){  if (NEEDS_DOUBLE_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().doubleWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  @JsonCreator public static HeapConfig create(@JsonProperty("size_mb") final int sizeMb,@JsonProperty("new_mb") final int newMb,@JsonProperty("gc_type") final GC_TYPE gcType){  return new HeapConfig(sizeMb,newMb,gcType);}  }
class C{  public boolean isSelected(){  return selectionModel.isSelected();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected void relaxNode(final Node outNode,final Node toNode,final RouterPriorityQueue<Node> pendingNodes){  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  if (this.pruneDeadEnds) {    PreProcessDijkstra.DeadEndData ddOutData=getPreProcessData(outNode);    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,toNode,ddOutData);    }  } else {    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,toNode,null);    }  }}  }
class C{  public String toString(){  return "BB: " + id;}  }
class C{  @Override public List<Node> generate(int popSize){  List<Node> population=new ArrayList<>();  int popSizeGrow=(int)popSize / 2;  int popSizeFull=popSize - popSizeGrow;  population.addAll(this.full.generate(popSizeGrow));  population.addAll(this.grow.generate(popSizeFull));  return population;}  }
class C{  public static void initialiseProgressBar(final DistributionBar bar,final Item item){  final Long notStartedTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_NOT_STARTED,item);  final Long runningTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_RUNNING,item);  final Long scheduledTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_SCHEDULED,item);  final Long errorTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_ERROR,item);  final Long finishedTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_FINISHED,item);  final Long cancelledTargetsCount=getStatusCount(SPUILabelDefinitions.VAR_COUNT_TARGETS_CANCELLED,item);  if (isNoTargets(errorTargetsCount,notStartedTargetsCount,runningTargetsCount,scheduledTargetsCount,finishedTargetsCount,cancelledTargetsCount)) {    HawkbitCommonUtil.setBarPartSize(bar,TotalTargetCountStatus.Status.SCHEDULED.toString().toLowerCase(),0,0);    HawkbitCommonUtil.setBarPartSize(bar,TotalTargetCountStatus.Status.FINISHED.toString().toLowerCase(),0,1);  } else {    bar.setNumberOfParts(6);    setProgressBarDetails(bar,item);  }}  }
class C{  public int hashCode(){  return _lowerNick.hashCode();}  }
class C{  public synchronized void reset(){  super.reset();  if (this.indexes != null) {    this.indexes=new SimpleLookupTable();    this.indexStates=null;  }  this.indexLocations=new SimpleLookupTable();  this.javaPluginLocation=null;}  }
class C{  public void initializeId(int id){  this.id.init(id);}  }
class C{  private void fetchAllSolrNodesForTranslation(){  LinkedHashMap<String,ZkCollectionState> zkState=getZkClusterData().getClusterState();  for (  String collection : zkState.keySet()) {    ZkCollectionState collectionMetadata=zkState.get(collection);    for (    String shard : collectionMetadata.getShards().keySet()) {      ZkShardInfo shardInfo=collectionMetadata.getShards().get(shard);      for (      String replica : shardInfo.getReplicas().keySet()) {        String nodeNameFull=shardInfo.getReplicas().get(replica).getNodeName();        String nodeName=nodeNameFull.split("_solr")[0].split(":")[0];        allSolrNodes.add(nodeName);      }    }  }}  }
class C{  public void addPlayerDetailsTab(final PlayerStats playerStats,final Map<Toon,PlayerStats> playerStatsMap){  tp.addTab(playerStats.getName(),Icons.F_USER,new PlayerDetailsComp("MRA - " + getDisplayName() + " \u00d7 "+ playerStats.getName(),this,playerStats,playerStatsMap),true,true,null);  tp.wrappedTabbedPane.setSelectedIndex(tp.getTabCount() - 1);}  }
class C{  public HotspotPeerNetwork(ScanResult scanResult){  this.scanResult=scanResult;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.299 -0400",hash_original_method="B494848479781580D469120D32A92415",hash_generated_method="365FDE2A6C2A205DBB00FE193E53680D") final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  @Override protected void loadChars(jmri.jmrix.AbstractMRReply msg,java.io.DataInputStream istream) throws java.io.IOException {  int i;  byte lastbyte=(byte)0xFF;  if (log.isDebugEnabled()) {    log.debug("loading characters from port");  }  for (i=0; i < msg.maxSize(); i++) {    byte char1=readByteProtected(istream);    while ((i == 0) && ((char1 & 0xF0) == 0xF0)) {      if ((char1 & 0xFF) != 0xF0 && (char1 & 0xFF) != 0xF2) {        lastbyte=char1;        char1=readByteProtected(istream);      }    }    if (lastbyte == (byte)0xFD) {      msg.setUnsolicited();    }    msg.setElement(i,char1 & 0xFF);    if (endOfMessage(msg)) {      break;    }  }}  }
class C{  private long addAndGet(IgniteAtomicSequence seq,long l) throws Exception {  long locSeqVal=seq.get();  assertEquals(locSeqVal + l,seq.addAndGet(l));  assertEquals(locSeqVal + l,seq.get());  return seq.get();}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  public BitSet(){  this(BITS_PER_UNIT);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1694) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public Block(Unit aHead,Unit aTail,Body aBody,int aIndexInMethod,int aBlockLength,BlockGraph aBlockGraph){  mHead=aHead;  mTail=aTail;  mBody=aBody;  mIndexInMethod=aIndexInMethod;  mBlockLength=aBlockLength;}  }
class C{  public void testMainFull(){  String[] args=new String[]{"src/test/resources/uk/gov/dstl/baleen/runner/runner.yaml"};  Baleen.main(args);}  }
class C{  public ICalReader(File file) throws FileNotFoundException {  this(file,ICalVersion.V2_0);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8){  return construct(e1,e2,e3,e4,e5,e6,e7,e8);}  }
class C{  protected void testWeightedScaleWithR(SIZE sz,RANGE rng,SPARSITY sp,RUNTIME_PLATFORM rt){  RUNTIME_PLATFORM oldrt=rtplatform;  rtplatform=rt;  try {    TestConfiguration config=getTestConfiguration("WeightedScaleTest");    config.addVariable("rows1",sz.size);    config.addVariable("rows2",rows2);    loadTestConfiguration(config);    String S_HOME=SCRIPT_DIR + TEST_DIR;    fullDMLScriptName=S_HOME + "WeightedScaleTest" + ".dml";    programArgs=new String[]{"-args",input("vector"),Integer.toString(sz.size),input("weight"),input("prob"),Integer.toString(rows2),output("mean"),output("std"),output("se"),output("var"),output("cv"),output("min"),output("max"),output("rng"),output("g1"),output("se_g1"),output("g2"),output("se_g2"),output("median"),output("iqm"),output("out_minus"),output("out_plus"),output("quantile")};    fullRScriptName=S_HOME + "WeightedScaleTest" + ".R";    rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();    createHelperMatrix();    double[][] vector=getRandomMatrix(sz.size,1,rng.min,rng.max,sp.sparsity,20160124165503L);    double[][] weight=getRandomMatrix(sz.size,1,1,10,1,20160124165504L);    OrderStatisticsTest.round(weight);    double[][] prob=getRandomMatrix(rows2,1,0,1,1,20160124165505L);    writeInputMatrix("vector",vector,true);    writeInputMatrix("weight",weight,true);    writeInputMatrix("prob",prob,true);    runTest(true,false,null,-1);    runRScript(true);    for (    String file : config.getOutputFiles()) {      HashMap<CellIndex,Double> dmlfile;      HashMap<CellIndex,Double> rfile;      if (file.endsWith(".scalar")) {        file=file.replace(".scalar","");        dmlfile=readDMLScalarFromHDFS(file);        rfile=readRScalarFromFS(file);      } else {        dmlfile=readDMLMatrixFromHDFS(file);        rfile=readRMatrixFromFS(file);      }      TestUtils.compareMatrices(dmlfile,rfile,epsilon,file + "-DML",file + "-R");    }  }  finally {    rtplatform=oldrt;  }}  }
class C{  public boolean visit(ParameterizedType node){  return true;}  }
class C{  private void addRelativeImportResultsFromSkeletons(@NotNull final PsiFile foothold){  final boolean inSource=FileIndexFacade.getInstance(foothold.getProject()).isInContent(foothold.getVirtualFile());  if (inSource)   return;  PsiDirectory containingDirectory=foothold.getContainingDirectory();  if (myRelativeLevel > 0) {    containingDirectory=ResolveImportUtil.stepBackFrom(foothold,myRelativeLevel);  }  if (containingDirectory != null) {    final QualifiedName containingQName=QualifiedNameFinder.findCanonicalImportPath(containingDirectory,null);    if (containingQName != null && containingQName.getComponentCount() > 0) {      final QualifiedName absoluteQName=containingQName.append(myQualifiedName.toString());      final QualifiedNameResolverImpl absoluteVisitor=(QualifiedNameResolverImpl)new QualifiedNameResolverImpl(absoluteQName).fromElement(foothold);      final Sdk sdk=PythonSdkType.getSdk(foothold);      if (sdk == null)       return;      final VirtualFile skeletonsDir=PySdkUtil.findSkeletonsDir(sdk);      if (skeletonsDir == null)       return;      final PsiDirectory directory=myContext.getPsiManager().findDirectory(skeletonsDir);      final PsiElement psiElement=absoluteVisitor.resolveModuleAt(directory);      if (psiElement != null)       myLibResults.add(psiElement);    }  }}  }
class C{  public static Image pack(final Image sourceImage){  int width=sourceImage.getWidth();  int height=sourceImage.getHeight();  int[] rgb=sourceImage.getRGBCached();  Image i=pack(rgb,width,height);  if (i == null) {    return sourceImage;  }  return i;}  }
class C{  public boolean includeAliases(){  return includeAliases;}  }
class C{  public Builder workerPoolSize(final int workerPoolSize){  this.workerPoolSize=workerPoolSize;  return this;}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static char toCharValue(double d){  return (char)d;}  }
class C{  final protected String indent(final Node node){  return indent(depth(node));}  }
class C{  public static String dump(final DeviceDescriptor descriptor,final String manufacturer,final String product,final String serial){  return String.format("Device Descriptor:%n" + "  bLength %18d%n" + "  bDescriptorType %10d%n"+ "  bcdUSB %19s%n"+ "  bDeviceClass %13d %s%n"+ "  bDeviceSubClass %10d%n"+ "  bDeviceProtocol %10d%n"+ "  bMaxPacketSize0 %10d%n"+ "  idVendor %17s%n"+ "  idProduct %16s%n"+ "  bcdDevice %16s%n"+ "  iManufacturer %12d%s%n"+ "  iProduct %17d%s%n"+ "  iSerial %18d%s%n"+ "  bNumConfigurations %7d%n",descriptor.bLength(),descriptor.bDescriptorType(),decodeBCD(descriptor.bcdUSB()),descriptor.bDeviceClass() & 0xff,getUSBClassName(descriptor.bDeviceClass()),descriptor.bDeviceSubClass() & 0xff,descriptor.bDeviceProtocol() & 0xff,descriptor.bMaxPacketSize0() & 0xff,String.format("0x%04x",descriptor.idVendor() & 0xffff),String.format("0x%04x",descriptor.idProduct() & 0xffff),decodeBCD(descriptor.bcdDevice()),descriptor.iManufacturer() & 0xff,(manufacturer == null) ? "" : (" " + manufacturer),descriptor.iProduct() & 0xff,(product == null) ? "" : (" " + product),descriptor.iSerialNumber() & 0xff,(serial == null) ? "" : (" " + serial),descriptor.bNumConfigurations() & 0xff);}  }
class C{  public boolean isCopy(){  return m_isCopy;}  }
class C{  public static @DottedClassName String extractPackageName(@DottedClassName String className){  int i=className.lastIndexOf('.');  if (i < 0) {    return "";  }  return className.substring(0,i);}  }
class C{  public boolean isPaused(){  return mIsPaused;}  }
class C{  protected String buildTagFilterRegex(Map<String,List<String>> tags){  final SortedMap<Integer,List<Integer>> tagHash=new TreeMap<Integer,List<Integer>>();  final int numOfPartitionFields=(_ed.getPartitions() == null) ? 0 : _ed.getPartitions().length;  for (  Map.Entry<String,List<String>> entry : tags.entrySet()) {    String tagName=entry.getKey();    if (_ed.isPartitionTag(tagName)) {      continue;    }    List<String> stringValues=entry.getValue();    List<Integer> hashValues=new ArrayList<Integer>(stringValues.size());    for (    String value : stringValues) {      hashValues.add(value.hashCode());    }    tagHash.put(tagName.hashCode(),hashValues);  }  final int headerLength=4 + numOfPartitionFields * 4 + 8;  StringBuilder sb=new StringBuilder();  sb.append("(?s)");  sb.append("^(?:.{").append(headerLength).append("})");  sb.append("(?:.{").append(8).append("})*");  for (  Map.Entry<Integer,List<Integer>> entry : tagHash.entrySet()) {    try {      addId(sb,ByteUtil.intToBytes(entry.getKey()));      List<Integer> hashValues=entry.getValue();      sb.append("(?:");      boolean first=true;      for (      Integer value : hashValues) {        if (!first) {          sb.append('|');        }        addId(sb,ByteUtil.intToBytes(value));        first=false;      }      sb.append(")");      sb.append("(?:.{").append(8).append("})*");    } catch (    Exception ex) {      LOG.error("constructing regex error",ex);    }  }  sb.append("$");  if (LOG.isDebugEnabled())   LOG.debug("Tag filter pattern is " + sb.toString());  return sb.toString();}  }
class C{  public void printStackTrace(PrintWriter output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      if (this.fileName != null) {        output.print("Caused in ");        output.print(this.fileName);        output.print(" by: ");      } else {        output.print("Caused by: ");      }      throwable.printStackTrace(output);    }  }}  }
class C{  @DSComment("Database access") @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.373 -0500",hash_original_method="78D2410201CEBD83C87275DB09AEC8B4",hash_generated_method="2A4D5BD1B81B68465454108E8B5D9953") public long executeInsert(){  mDatabase.addTaint(this.getTaint());  int ret=this.getTaintInt();  ret+=mDatabase.getTaintInt();  return ret;}  }
class C{  private synchronized void endProcess(final boolean error,final boolean finished){  if (error) {    isError=true;  } else   if (finished) {    isProcessFinished=true;  }}  }
class C{  public boolean hasGrantedPolicy(ComponentName admin,int usesPolicy){  if (mService != null) {    try {      return mService.hasGrantedPolicy(admin,usesPolicy,UserHandle.myUserId());    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }  return false;}  }
class C{  public GenericArrayIterator(final T[] array){  setArray(array);}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws org.xml.sax.SAXException {  return getCurrentProcessor().resolveEntity(this,publicId,systemId);}  }
class C{  public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int n;  int cols;  result=new StringBuffer();  cells=toArray();  result.append("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n");  result.append("   <tr>");  for (n=0; n < cells[0].length; n++) {    if (isRowName(n)) {      result.append("<td><b>" + cells[0][n] + "</b></td>");    } else     if (isMean(n)) {      if (n == 1)       cols=1; else       cols=2;      if (getShowStdDev())       cols++;      result.append("<td align=\"center\" colspan=\"" + cols + "\">");      result.append("<b>" + cells[0][n] + "</b>");      result.append("</td>");    }  }  result.append("</tr>\n");  for (i=1; i < cells.length; i++) {    result.append("   <tr>");    for (n=0; n < cells[i].length; n++) {      if (isRowName(n))       result.append("<td>"); else       if (isMean(n) || isStdDev(n))       result.append("<td align=\"right\">"); else       if (isSignificance(n))       result.append("<td align=\"center\">"); else       result.append("<td>");      if (cells[i][n].trim().equals(""))       result.append("&nbsp;"); else       if (isStdDev(n))       result.append("&plusmn;&nbsp;" + cells[i][n]); else       result.append(cells[i][n]);      result.append("</td>");    }    result.append("</tr>\n");  }  result.append("</table>\n");  return result.toString();}  }
class C{  public boolean containsJavaResources() throws JavaModelException {  return ((JarPackageFragmentInfo)getElementInfo()).containsJavaResources();}  }
class C{  public void testClearBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.clearBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public SVGGraphics2DIOException(String s,IOException ex){  super(s);  embedded=ex;}  }
class C{  public void sameFrame(int pos,int offsetDelta) throws BadBytecode {}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object){  if (object.isNull())   return object;  if (GCTrace.traceInducedGC) {    TraceGenerator.rootEnumerate(object);    return object;  } else   if (GCTrace.deathScan) {    TraceGenerator.propagateDeathTime(object);    return object;  } else {    return super.traceObject(object);  }}  }
class C{  public String explain() throws DMLException {  return Explain.explain(_prog);}  }
class C{  public TargetTableEvent(final TargetComponentEvent targetComponentEvent){  super(null,null);  this.targetComponentEvent=targetComponentEvent;}  }
class C{  @Override public boolean batchFinished() throws Exception {  Instances data=getInputFormat();  if (data == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_Converter == null) {    int[] randomIndices=new int[m_ClassCounts.length];    for (int i=0; i < randomIndices.length; i++) {      randomIndices[i]=i;    }    for (int j=randomIndices.length - 1; j > 0; j--) {      int toSwap=m_Random.nextInt(j + 1);      int tmpIndex=randomIndices[j];      randomIndices[j]=randomIndices[toSwap];      randomIndices[toSwap]=tmpIndex;    }    double[] randomizedCounts=new double[m_ClassCounts.length];    for (int i=0; i < randomizedCounts.length; i++) {      randomizedCounts[i]=m_ClassCounts[randomIndices[i]];    }    if (m_ClassOrder == RANDOM) {      m_Converter=randomIndices;      m_ClassCounts=randomizedCounts;    } else {      int[] sorted=Utils.sort(randomizedCounts);      m_Converter=new int[sorted.length];      if (m_ClassOrder == FREQ_ASCEND) {        for (int i=0; i < sorted.length; i++) {          m_Converter[i]=randomIndices[sorted[i]];        }      } else       if (m_ClassOrder == FREQ_DESCEND) {        for (int i=0; i < sorted.length; i++) {          m_Converter[i]=randomIndices[sorted[sorted.length - i - 1]];        }      } else {        throw new IllegalArgumentException("Class order not defined!");      }      double[] tmp2=new double[m_ClassCounts.length];      for (int i=0; i < m_Converter.length; i++) {        tmp2[i]=m_ClassCounts[m_Converter[i]];      }      m_ClassCounts=tmp2;    }    ArrayList<String> values=new ArrayList<String>(data.classAttribute().numValues());    for (int i=0; i < data.numClasses(); i++) {      values.add(data.classAttribute().value(m_Converter[i]));    }    ArrayList<Attribute> newVec=new ArrayList<Attribute>(data.numAttributes());    for (int i=0; i < data.numAttributes(); i++) {      if (i == data.classIndex()) {        newVec.add(new Attribute(data.classAttribute().name(),values,data.classAttribute().getMetadata()));      } else {        newVec.add(data.attribute(i));      }    }    Instances newInsts=new Instances(data.relationName(),newVec,0);    newInsts.setClassIndex(data.classIndex());    setOutputFormat(newInsts);    int[] temp=new int[m_Converter.length];    for (int i=0; i < temp.length; i++) {      temp[m_Converter[i]]=i;    }    m_Converter=temp;    for (int xyz=0; xyz < data.numInstances(); xyz++) {      Instance datum=data.instance(xyz);      if (!datum.isMissing(datum.classIndex())) {        datum.setClassValue(m_Converter[(int)datum.classValue()]);      }      push(datum);    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public void merge(CollectorConfiguration config,boolean overwrite) throws IllegalArgumentException {  for (  String key : config.getInstrumentation().keySet()) {    if (getInstrumentation().containsKey(key) && !overwrite) {      throw new IllegalArgumentException("Instrumentation for '" + key + "' already exists");    }    getInstrumentation().put(key,config.getInstrumentation().get(key));  }  for (  String key : config.getBusinessTransactions().keySet()) {    if (getBusinessTransactions().containsKey(key) && !overwrite) {      throw new IllegalArgumentException("Business Transaction config for '" + key + "' already exists");    }    getBusinessTransactions().put(key,config.getBusinessTransactions().get(key));  }  getProperties().putAll(config.getProperties());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SourceInfo sourceInfo(){  return fsource.sourceInfo();}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  if (allowWrite) {    final String smtpUsername=request.getParameter(SMTP_USERNAME_PROPERTY);    final String smtpPassword=request.getParameter(SMTP_PASSWORD_PROPERTY);    final String sender=request.getParameter(SENDER_PROPERTY);    final String recipient=request.getParameter(RECIPIENT_PROPERTY);    final String host=request.getParameter(HOST_PROPERTY);    final Long port=getPortNumber(request.getParameter(PORT_PROPERTY));    final Map<String,Object> properties=new HashMap<String,Object>();    properties.put(EmailService.EMAIL_SMTP_USERNAME,smtpUsername);    properties.put(EmailService.EMAIL_SENDER,sender);    properties.put(EmailService.EMAIL_RECIPIENT,recipient);    properties.put(EmailService.EMAIL_SMTP_HOST,host);    properties.put(EmailService.EMAIL_SMTP_PORT,port);    if (smtpPassword == null || !smtpPassword.contains(PublickConstants.PASSWORD_REPLACEMENT)) {      properties.put(EmailService.EMAIL_SMTP_PASSWORD,smtpPassword);    }    final boolean result=emailService.setProperties(properties);    if (result) {      response.setStatus(SlingHttpServletResponse.SC_OK);      sendResponse(writer,"OK","Settings successfully updated.");    } else {      response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);      sendResponse(writer,"Error","Settings failed to update.");    }  } else {    response.setStatus(SlingHttpServletResponse.SC_FORBIDDEN);    sendResponse(writer,"Error","Current user not authorized.");  }}  }
class C{  public String contentDescription(){  return mContentDescription;}  }
class C{  private void addItem(List<Map<String,Object>> data,String className,String description,Intent intent){  Map<String,Object> temp=new HashMap<>();  temp.put(TAG_CLASS_NAME,className);  temp.put(TAG_DESCRIPTION,description);  temp.put(TAG_INTENT,intent);  data.add(temp);}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  try {    String ns=alav.getNamespaceURI();    String ln=alav.getLocalName();    if (ns == null && (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE) || ln.equals(SVG_TRANSFORM_ATTRIBUTE))) {      node.setTransform(computeTransform((SVGTransformable)e,ctx));      handleGeometryChanged();    } else     if (ns == null && (ln.equals(SVG_WIDTH_ATTRIBUTE) || ln.equals(SVG_HEIGHT_ATTRIBUTE)) || ns.equals(XLINK_NAMESPACE_URI) && (ln.equals(XLINK_HREF_ATTRIBUTE))) {      buildCompositeGraphicsNode(ctx,e,(CompositeGraphicsNode)node);    }  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public CLEvent writeBytes(CLQueue queue,long offset,long length,ByteBuffer in,boolean blocking,CLEvent... eventsToWaitFor){  return writeBytes(queue,offset,length,pointerToBuffer(in),blocking,eventsToWaitFor);}  }
class C{  public void removeAllCookie(){  throw new MustOverrideException();}  }
class C{  public static String fileAsString(String fileName){  File f=null;  BufferedReader reader=null;  try {    f=new File(fileName);    reader=new BufferedReader(new FileReader(f));    StringBuilder result=new StringBuilder(10000);    String line=null;    while ((line=reader.readLine()) != null) {      result.append(line).append("\n");    }    return result.toString();  } catch (  IOException e) {    Raptor.getInstance().onError("Error reading file: " + f.getAbsolutePath(),e);    return null;  } finally {    try {      reader.close();    } catch (    Throwable t) {    }  }}  }
class C{  public void testBug27867() throws Exception {  if (!versionMeetsMinimum(4,1)) {    return;  }  String gbkColumnName="\u00e4\u00b8\u00ad\u00e6\u2013\u2021\u00e6\u00b5\u2039\u00e8\u00af\u2022";  createTable("ColumnNameEncoding","(`" + gbkColumnName + "` varchar(1) default NULL, `ASCIIColumn` varchar(1) default NULL"+ ")ENGINE=MyISAM DEFAULT CHARSET=utf8");  this.rs=this.stmt.executeQuery("SELECT * FROM ColumnNameEncoding");  java.sql.ResultSetMetaData tblMD=this.rs.getMetaData();  assertEquals(gbkColumnName,tblMD.getColumnName(1));  assertEquals("ASCIIColumn",tblMD.getColumnName(2));}  }
class C{  public T caseLogicalRelationExpression(LogicalRelationExpression object){  return null;}  }
class C{  public Pos3D translate(Pos3D pos){  return translate(pos.xPos,pos.yPos,pos.zPos);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaDevAttrMaxThreadsPerBlock:    return "cudaDevAttrMaxThreadsPerBlock";case cudaDevAttrMaxBlockDimX:  return "cudaDevAttrMaxBlockDimX";case cudaDevAttrMaxBlockDimY:return "cudaDevAttrMaxBlockDimY";case cudaDevAttrMaxBlockDimZ:return "cudaDevAttrMaxBlockDimZ";case cudaDevAttrMaxGridDimX:return "cudaDevAttrMaxGridDimX";case cudaDevAttrMaxGridDimY:return "cudaDevAttrMaxGridDimY";case cudaDevAttrMaxGridDimZ:return "cudaDevAttrMaxGridDimZ";case cudaDevAttrMaxSharedMemoryPerBlock:return "cudaDevAttrMaxSharedMemoryPerBlock";case cudaDevAttrTotalConstantMemory:return "cudaDevAttrTotalConstantMemory";case cudaDevAttrWarpSize:return "cudaDevAttrWarpSize";case cudaDevAttrMaxPitch:return "cudaDevAttrMaxPitch";case cudaDevAttrMaxRegistersPerBlock:return "cudaDevAttrMaxRegistersPerBlock";case cudaDevAttrClockRate:return "cudaDevAttrClockRate";case cudaDevAttrTextureAlignment:return "cudaDevAttrTextureAlignment";case cudaDevAttrGpuOverlap:return "cudaDevAttrGpuOverlap";case cudaDevAttrMultiProcessorCount:return "cudaDevAttrMultiProcessorCount";case cudaDevAttrKernelExecTimeout:return "cudaDevAttrKernelExecTimeout";case cudaDevAttrIntegrated:return "cudaDevAttrIntegrated";case cudaDevAttrCanMapHostMemory:return "cudaDevAttrCanMapHostMemory";case cudaDevAttrComputeMode:return "cudaDevAttrComputeMode";case cudaDevAttrMaxTexture1DWidth:return "cudaDevAttrMaxTexture1DWidth";case cudaDevAttrMaxTexture2DWidth:return "cudaDevAttrMaxTexture2DWidth";case cudaDevAttrMaxTexture2DHeight:return "cudaDevAttrMaxTexture2DHeight";case cudaDevAttrMaxTexture3DWidth:return "cudaDevAttrMaxTexture3DWidth";case cudaDevAttrMaxTexture3DHeight:return "cudaDevAttrMaxTexture3DHeight";case cudaDevAttrMaxTexture3DDepth:return "cudaDevAttrMaxTexture3DDepth";case cudaDevAttrMaxTexture2DLayeredWidth:return "cudaDevAttrMaxTexture2DLayeredWidth";case cudaDevAttrMaxTexture2DLayeredHeight:return "cudaDevAttrMaxTexture2DLayeredHeight";case cudaDevAttrMaxTexture2DLayeredLayers:return "cudaDevAttrMaxTexture2DLayeredLayers";case cudaDevAttrSurfaceAlignment:return "cudaDevAttrSurfaceAlignment";case cudaDevAttrConcurrentKernels:return "cudaDevAttrConcurrentKernels";case cudaDevAttrEccEnabled:return "cudaDevAttrEccEnabled";case cudaDevAttrPciBusId:return "cudaDevAttrPciBusId";case cudaDevAttrPciDeviceId:return "cudaDevAttrPciDeviceId";case cudaDevAttrTccDriver:return "cudaDevAttrTccDriver";case cudaDevAttrMemoryClockRate:return "cudaDevAttrMemoryClockRate";case cudaDevAttrGlobalMemoryBusWidth:return "cudaDevAttrGlobalMemoryBusWidth";case cudaDevAttrL2CacheSize:return "cudaDevAttrL2CacheSize";case cudaDevAttrMaxThreadsPerMultiProcessor:return "cudaDevAttrMaxThreadsPerMultiProcessor";case cudaDevAttrAsyncEngineCount:return "cudaDevAttrAsyncEngineCount";case cudaDevAttrUnifiedAddressing:return "cudaDevAttrUnifiedAddressing";case cudaDevAttrMaxTexture1DLayeredWidth:return "cudaDevAttrMaxTexture1DLayeredWidth";case cudaDevAttrMaxTexture1DLayeredLayers:return "cudaDevAttrMaxTexture1DLayeredLayers";case cudaDevAttrMaxTexture2DGatherWidth:return "cudaDevAttrMaxTexture2DGatherWidth";case cudaDevAttrMaxTexture2DGatherHeight:return "cudaDevAttrMaxTexture2DGatherHeight";case cudaDevAttrMaxTexture3DWidthAlt:return "cudaDevAttrMaxTexture3DWidthAlt";case cudaDevAttrMaxTexture3DHeightAlt:return "cudaDevAttrMaxTexture3DHeightAlt";case cudaDevAttrMaxTexture3DDepthAlt:return "cudaDevAttrMaxTexture3DDepthAlt";case cudaDevAttrPciDomainId:return "cudaDevAttrPciDomainId";case cudaDevAttrTexturePitchAlignment:return "cudaDevAttrTexturePitchAlignment";case cudaDevAttrMaxTextureCubemapWidth:return "cudaDevAttrMaxTextureCubemapWidth";case cudaDevAttrMaxTextureCubemapLayeredWidth:return "cudaDevAttrMaxTextureCubemapLayeredWidth";case cudaDevAttrMaxTextureCubemapLayeredLayers:return "cudaDevAttrMaxTextureCubemapLayeredLayers";case cudaDevAttrMaxSurface1DWidth:return "cudaDevAttrMaxSurface1DWidth";case cudaDevAttrMaxSurface2DWidth:return "cudaDevAttrMaxSurface2DWidth";case cudaDevAttrMaxSurface2DHeight:return "cudaDevAttrMaxSurface2DHeight";case cudaDevAttrMaxSurface3DWidth:return "cudaDevAttrMaxSurface3DWidth";case cudaDevAttrMaxSurface3DHeight:return "cudaDevAttrMaxSurface3DHeight";case cudaDevAttrMaxSurface3DDepth:return "cudaDevAttrMaxSurface3DDepth";case cudaDevAttrMaxSurface1DLayeredWidth:return "cudaDevAttrMaxSurface1DLayeredWidth";case cudaDevAttrMaxSurface1DLayeredLayers:return "cudaDevAttrMaxSurface1DLayeredLayers";case cudaDevAttrMaxSurface2DLayeredWidth:return "cudaDevAttrMaxSurface2DLayeredWidth";case cudaDevAttrMaxSurface2DLayeredHeight:return "cudaDevAttrMaxSurface2DLayeredHeight";case cudaDevAttrMaxSurface2DLayeredLayers:return "cudaDevAttrMaxSurface2DLayeredLayers";case cudaDevAttrMaxSurfaceCubemapWidth:return "cudaDevAttrMaxSurfaceCubemapWidth";case cudaDevAttrMaxSurfaceCubemapLayeredWidth:return "cudaDevAttrMaxSurfaceCubemapLayeredWidth";case cudaDevAttrMaxSurfaceCubemapLayeredLayers:return "cudaDevAttrMaxSurfaceCubemapLayeredLayers";case cudaDevAttrMaxTexture1DLinearWidth:return "cudaDevAttrMaxTexture1DLinearWidth";case cudaDevAttrMaxTexture2DLinearWidth:return "cudaDevAttrMaxTexture2DLinearWidth";case cudaDevAttrMaxTexture2DLinearHeight:return "cudaDevAttrMaxTexture2DLinearHeight";case cudaDevAttrMaxTexture2DLinearPitch:return "cudaDevAttrMaxTexture2DLinearPitch";case cudaDevAttrMaxTexture2DMipmappedWidth:return "cudaDevAttrMaxTexture2DMipmappedWidth";case cudaDevAttrMaxTexture2DMipmappedHeight:return "cudaDevAttrMaxTexture2DMipmappedHeight";case cudaDevAttrComputeCapabilityMajor:return "cudaDevAttrComputeCapabilityMajor";case cudaDevAttrComputeCapabilityMinor:return "cudaDevAttrComputeCapabilityMinor";case cudaDevAttrMaxTexture1DMipmappedWidth:return "cudaDevAttrMaxTexture1DMipmappedWidth";case cudaDevAttrStreamPrioritiesSupported:return "cudaDevAttrStreamPrioritiesSupported";case cudaDevAttrGlobalL1CacheSupported:return "cudaDevAttrGlobalL1CacheSupported";case cudaDevAttrLocalL1CacheSupported:return "cudaDevAttrLocalL1CacheSupported";case cudaDevAttrMaxSharedMemoryPerMultiprocessor:return "cudaDevAttrMaxSharedMemoryPerMultiprocessor";case cudaDevAttrMaxRegistersPerMultiprocessor:return "cudaDevAttrMaxRegistersPerMultiprocessor";case cudaDevAttrManagedMemory:return "cudaDevAttrManagedMemory";case cudaDevAttrIsMultiGpuBoard:return "cudaDevAttrIsMultiGpuBoard";case cudaDevAttrMultiGpuBoardGroupID:return "cudaDevAttrMultiGpuBoardGroupID";case cudaDevAttrHostNativeAtomicSupported:return "cudaDevAttrHostNativeAtomicSupported";case cudaDevAttrSingleToDoublePrecisionPerfRatio:return "cudaDevAttrSingleToDoublePrecisionPerfRatio";case cudaDevAttrPageableMemoryAccess:return "cudaDevAttrPageableMemoryAccess";case cudaDevAttrConcurrentManagedAccess:return "cudaDevAttrConcurrentManagedAccess";}return "INVALID cudaDeviceAttr: " + n;}  }
class C{  public Builder backgroundColor(int sliderBackgroundColor){  this.sliderBackgroundColor=sliderBackgroundColor;  return this;}  }
class C{  protected Object evaluateLeftContainsRight(List elements,String lvalue,String rvalue){  List array;  if (elements instanceof java.util.Vector) {    array=new java.util.Vector();  } else {    array=new ArrayList();  }  for (Iterator e=elements.iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof StructuredContent) {      if ((o=evaluateLeftContainsRight((StructuredContent)o,lvalue,rvalue)) != null) {        array.add(o);      }    }  }  if (array.size() == 1) {    return (StructuredContent)array.get(0);  }  return array;}  }
class C{  public boolean hasThread(){  return !this.waitingThreads.isEmpty();}  }
class C{  public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {  if (inputStream == null)   return false;  byte[] signature=new byte[2];  int readStatus=inputStream.read(signature);  inputStream.unread(signature);  int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);  return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader;}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  private float[] vector2ArrayToFloatArray(Array<Vector2> dots){  float[] floatDots=new float[dots.size * 2];  return floatDots;}  }
class C{  public final boolean isInternal(JIPFunctor funct){  return m_globalDB.isInternal(funct.getName());}  }
class C{  private void printRow(final PrintStream stream,final String[] items,final int[] columnDisplayWidths){  if (overallIndent > 0) {    printSpaces(stream,overallIndent);  }  boolean needsNewRow=false;  final String[] newRow=new String[items.length];  for (int i=0; i < columns.length; i++) {    if (i > 0) {      printSpaces(stream,gutterWidthCharacters);    }    if (i > items.length - 1) {      break;    }    final int columnWidth=columnDisplayWidths[i];    String text=items[i];    if (text == null) {      if ((i + 1) < columns.length) {        printSpaces(stream,columnWidth);      }      continue;    }    if (wrapColumnText && text.length() > columnWidth) {      final String sub=text.substring(0,columnWidth);      int wrapIndex=-1;      for (      final char wrapChar : CHARACTERS_FOR_WRAPPING) {        wrapIndex=sub.lastIndexOf(wrapChar);        if (wrapIndex >= 0) {          int moonWalker=wrapIndex;          while (moonWalker >= 0 && isWrappingBreakCharacter(sub.charAt(moonWalker))) {            moonWalker--;          }          if (moonWalker > -1) {            wrapIndex=moonWalker + 1;            break;          }        }      }      if (wrapIndex == -1) {        wrapIndex=sub.length() - 1;      }      if (wrapIndex + 1 <= text.length()) {        newRow[i]=StringUtil.trimBegin(text.substring(wrapIndex + 1));      }      text=StringUtil.trimEnd(sub.substring(0,wrapIndex + 1));      needsNewRow=true;    }    if (truncateLongLines) {      stream.print(text.substring(0,Math.min(columnWidth,text.length())));    } else {      stream.print(text);    }    if ((text.length() < columnWidth) && ((i + 1) < columns.length)) {      printSpaces(stream,columnWidth - text.length());    }  }  stream.println();  if (needsNewRow) {    printRow(stream,newRow,columnDisplayWidths);  }}  }
class C{  public boolean dropBufferedUpdates(){  versionInfo.blockUpdates();  try {    if (state != State.BUFFERING)     return false;    if (log.isInfoEnabled()) {      log.info("Dropping buffered updates " + this);    }synchronized (this) {      if (tlog != null) {        tlog.rollback(recoveryInfo.positionOfStart);      }    }    state=State.ACTIVE;    operationFlags&=~FLAG_GAP;  } catch (  IOException e) {    SolrException.log(log,"Error attempting to roll back log",e);    return false;  } finally {    versionInfo.unblockUpdates();  }  return true;}  }
class C{  public void add(final PassiveEntity entity){  final RPSlot content=getSlot(CONTENT_SLOT);  content.add(entity);}  }
class C{  public static ModelInfo createFromElements(ModelInfo defaultInfo,Element element){  String title=StringUtil.internString(UtilXml.childElementValue(element,"title"));  if (title == null || title.isEmpty()) {    title=defaultInfo.getTitle();  }  String description=StringUtil.internString(UtilXml.childElementValue(element,"description"));  if (description == null || description.isEmpty()) {    description=defaultInfo.getDescription();  }  String copyright=StringUtil.internString(UtilXml.childElementValue(element,"copyright"));  if (copyright == null || copyright.isEmpty()) {    copyright=defaultInfo.getCopyright();  }  String author=StringUtil.internString(UtilXml.childElementValue(element,"author"));  if (author == null || author.isEmpty()) {    author=defaultInfo.getAuthor();  }  String version=StringUtil.internString(UtilXml.childElementValue(element,"version"));  if (version == null || version.isEmpty()) {    version=defaultInfo.getVersion();  }  String defaultResourceName=StringUtil.internString(UtilXml.childElementValue(element,"default-resource-name"));  if (defaultResourceName == null || defaultResourceName.isEmpty()) {    defaultResourceName=defaultInfo.getDefaultResourceName();  }  return new ModelInfo(title,description,copyright,author,version,defaultResourceName);}  }
class C{  public boolean checkPrereadDuplicates(PrereadNamesInterface[] prereadNames,File duplicatesOutputFile) throws IOException {  assert mCount == mHashes.length();  boolean duplicatesDetected=false;  if (mCount > 0) {    OutputStream output=null;    try {      sort();      long currentHash=mHashes.get(0);      final Set<String> names=new HashSet<>();      for (long i=1; i < mHashes.length(); i++) {        final long nextHash=mHashes.get(i);        if (nextHash > currentHash) {          currentHash=nextHash;          if (!names.isEmpty()) {            names.clear();          }        } else         if (nextHash == currentHash) {          if (names.isEmpty()) {            final long lastIndexId=mIndexIds.get(i - 1);            names.add(prereadNames[readerIndex(lastIndexId)].name(sequenceId(lastIndexId)));          }          final long indexId=mIndexIds.get(i);          final String name=prereadNames[readerIndex(indexId)].name(sequenceId(indexId));          if (!names.add(name)) {            duplicatesDetected=true;            if (output == null && duplicatesOutputFile != null) {              output=new FileOutputStream(duplicatesOutputFile,true);            }            if (output != null) {              output.write((name + StringUtils.LS).getBytes());            }          }        } else {          throw new RuntimeException("List sorting failed");        }      }    }  finally {      if (output != null) {        output.close();      }    }  }  return duplicatesDetected;}  }
class C{  public LabeledStatement newLabeledStatement(){  return new LabeledStatement(this);}  }
class C{  public <U>SimpleReactStream<Double> from(final DoubleStream stream){  return from(stream.boxed());}  }
class C{  private static ValueAnimator loadAnimator(Context c,Resources res,Resources.Theme theme,AttributeSet attrs,ValueAnimator anim,float pathErrorScale) throws Resources.NotFoundException {  TypedArray arrayAnimator=null;  TypedArray arrayObjectAnimator=null;  if (theme != null) {    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);  } else {    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);  }  if (anim != null) {    if (theme != null) {      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);    } else {      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);    }  }  if (anim == null) {    anim=new ValueAnimator();  }  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator);  final int resId=arrayAnimator.getResourceId(R.styleable.Animator_android_interpolator,0);  if (resId > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(c,resId));  }  arrayAnimator.recycle();  if (arrayObjectAnimator != null) {    arrayObjectAnimator.recycle();  }  return anim;}  }
class C{  private Object invokeUsingReflection(Object concreteService,Method method,Object[] arguments) throws Throwable {  try {    return method.invoke(concreteService,arguments);  } catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  @Override public final int computeHashCode(int val){  return HashFunctions.hash(val);}  }
class C{  public void deleteAttributeType(int attType){  int i=0;  while (i < m_Attributes.size()) {    if (attribute(i).type() == attType) {      deleteAttributeAt(i);    } else {      i++;    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiColorChooserUI();  return MultiLookAndFeel.createUIs(mui,((MultiColorChooserUI)mui).uis,a);}  }
class C{  public static ARRAY toARRAY(int[] ints,String dataType,OracleConnection connection) throws SQLException {  ArrayDescriptor descriptor=ArrayDescriptor.createDescriptor(dataType,connection);  return new ARRAY(descriptor,connection,ints);}  }
class C{  private void buildItemTables(){  try {    final ItemGroupsXMLLoader loader=new ItemGroupsXMLLoader(new URI("/data/conf/items.xml"));    final List<DefaultItem> items=loader.load();    for (    final DefaultItem item : items) {      final String clazz=item.getItemName();      if (classToItem.containsKey(clazz)) {        LOGGER.warn("Repeated item name: " + clazz);      }      classToItem.put(clazz,item);      String typeString=ExpressionType.OBJECT;      if (item.getItemClass().equals("food")) {        typeString+=ExpressionType.SUFFIX_FOOD;      } else       if (item.getItemClass().equals("drink")) {        typeString+=ExpressionType.SUFFIX_FOOD;        typeString+=ExpressionType.SUFFIX_FLUID;      }      WordList.getInstance().registerName(item.getItemName(),typeString);    }  } catch (  final Exception e) {    LOGGER.error("items.xml could not be loaded",e);  }}  }
class C{  protected IJavaElement createHandle(Annotation annotation,IAnnotatable parent){  if (parent == null)   return null;  TypeReference typeRef=annotation.type;  char[][] typeName=typeRef.getTypeName();  String name=new String(typeName[typeName.length - 1]);  try {    IAnnotation[] annotations=parent.getAnnotations();    int length=annotations == null ? 0 : annotations.length;    for (int i=0; i < length; i++) {      if (annotations[i].getElementName().equals(name)) {        return annotations[i];      }    }    if (parent instanceof LocalVariable) {      LocalVariable localVariable=(LocalVariable)parent;      IAnnotation[][] annotationsOnDimensions=localVariable.annotationsOnDimensions;      int noOfDimensions=annotationsOnDimensions == null ? 0 : annotationsOnDimensions.length;      for (int i=0; i < noOfDimensions; ++i) {        IAnnotation[] dimAnnotations=annotationsOnDimensions[i];        int noOfAnnotations=dimAnnotations.length;        for (int j=0; j < noOfAnnotations; ++j) {          if (dimAnnotations[j].getElementName().equals(name))           return dimAnnotations[j];        }      }    }  } catch (  JavaModelException jme) {  }  return null;}  }
class C{  public static boolean removeDirectory(File directory,Map<String,String> progress){  if (directory == null)   return false;  if (!directory.exists())   return true;  if (!directory.isDirectory())   return false;  String[] list=directory.list();  if (list != null) {    for (int i=0; i < list.length; i++) {      File entry=new File(directory,list[i]);      if (entry.isDirectory()) {        if (!removeDirectory(entry,progress))         return false;      } else {        if (progress != null)         progress.put("delete file",entry.getName());        if (!entry.delete())         return false;      }    }  }  if (progress != null)   progress.put("delete directory",directory.getName());  return directory.delete();}  }
class C{  public void parseJSON(File jsonFile) throws AdeInternalException, AdeUsageException {  InputStream jsonInputStream=null;  try {    jsonInputStream=new FileInputStream(jsonFile);    JSONObject jsonData=new JSONObject(jsonInputStream);    JSONObject groups=jsonData.getJSONObject("groups");    for (    GroupType group : GroupType.values()) {      List<Group> parsedGroups;      JSONArray groupsArray=groups.getJSONArray(group.name().toLowerCase());      parsedGroups=parseGroups(groupsArray,group.name());      parsedGroupsByType.put(group.getValue(),parsedGroups);    }    JSONArray rules=jsonData.getJSONArray("rules");    parsedRules=parseRules(rules);    validateGroupRules(parsedGroupsByType,parsedRules);  } catch (  IOException e) {    throw new AdeInternalException("Cannot read file into a string",e);  }catch (  JSONException e) {    throw new AdeInternalException("Cannot convert to JSONObject",e);  } finally {    if (jsonInputStream != null) {      try {        jsonInputStream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Boolean isEnough(List<Protos.Resource> resourcesList,double requiredValue){  Protos.Resource resource=getResource(resourcesList);  return resource != null && resource.getScalar() != null && resource.getScalar().getValue() >= requiredValue;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SocketException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  protected AODE(AODE toClone){  if (toClone.odes != null) {    this.odes=new ODE[toClone.odes.length];    for (int i=0; i < this.odes.length; i++)     this.odes[i]=toClone.odes[i].clone();    this.predicting=toClone.predicting.clone();  }  this.m=toClone.m;}  }
class C{  private void writeTimeStamp(byte[] buffer,int offset,long time){  long seconds=time / 1000L;  long milliseconds=time - seconds * 1000L;  seconds+=OFFSET_1900_TO_1970;  buffer[offset++]=(byte)(seconds >> 24);  buffer[offset++]=(byte)(seconds >> 16);  buffer[offset++]=(byte)(seconds >> 8);  buffer[offset++]=(byte)(seconds >> 0);  long fraction=milliseconds * 0x100000000L / 1000L;  buffer[offset++]=(byte)(fraction >> 24);  buffer[offset++]=(byte)(fraction >> 16);  buffer[offset++]=(byte)(fraction >> 8);  buffer[offset++]=(byte)(Math.random() * 255.0);}  }
class C{  public void addComment(String comment){  try {    comment=comment.replace("<","&lt;").replace(">","&gt;");    kit.insertHTML(doc,doc.getLength(),"[" + comment + "]\n",0,0,null);  } catch (  Exception e) {    log.warning("text area exception: " + e);  }}  }
class C{  @Override public int applyIntersections(){  Hashtable<IPoint,List<ILineSegment>> lineIntersections=detector.intersections(boxes);  Hashtable<IPoint,ICircle[]> circleIntersections=new Hashtable<IPoint,ICircle[]>();  for (  IPoint pt : lineIntersections.keySet()) {    List<ILineSegment> ints=lineIntersections.get(pt);    ArrayList<ICircle> circs=new ArrayList<ICircle>();    for (    ILineSegment ils : ints) {      BoxLineSegment bls=(BoxLineSegment)ils;      ICircle c=bls.circle();      if (!circs.contains(c)) {        circs.add(c);      }    }    if (circs.size() > 1) {      circleIntersections.put(pt,circs.toArray(new ICircle[]{}));    }  }  this.intersections=filter(circleIntersections);  return this.intersections.size();}  }
class C{  public static Rectangle nextBoxNear(Polygon polygon){  final double point1[];  final double point2[];  Polygon holes[]=polygon.getHoles();  if (holes.length > 0 && random().nextInt(3) == 0) {    return nextBoxNear(holes[random().nextInt(holes.length)]);  }  int surpriseMe=random().nextInt(97);  if (surpriseMe == 0) {    point1=nextPointNear(polygon);    point2=nextPointNear(polygon);  } else {    point1=nextPointNear(polygon);    point2=new double[2];    double polyLats[]=polygon.getPolyLats();    double polyLons[]=polygon.getPolyLons();    int vertex=random().nextInt(polyLats.length - 1);    double deltaX=polyLons[vertex + 1] - polyLons[vertex];    double deltaY=polyLats[vertex + 1] - polyLats[vertex];    double edgeLength=Math.sqrt(deltaX * deltaX + deltaY * deltaY);    point2[0]=nextLatitudeNear(point1[0],edgeLength);    point2[1]=nextLongitudeNear(point1[1],edgeLength);  }  double minLat=Math.min(point1[0],point2[0]);  double maxLat=Math.max(point1[0],point2[0]);  double minLon=Math.min(point1[1],point2[1]);  double maxLon=Math.max(point1[1],point2[1]);  return new Rectangle(minLat,maxLat,minLon,maxLon);}  }
class C{  @Override public boolean canMakePayments(){  if (iapHelper != null) {    return iapHelper.canMakePayments();  }  return false;}  }
class C{  private XErrorHandlerUtil(){}  }
class C{  public List<Entry> filter(List<Entry> points){  return filter(points,mTolerance);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.VARIABLE_REFERENCE__VARIABLE_NAME:    setVariableName(VARIABLE_NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public NbtTagInt(String name){  super(name);}  }
class C{  private void addToExpression(String value){  if (value == null) {    return;  }  String selectedText=currentExpression.getSelectedText();  if (selectedText != null && selectedText.length() > 0) {    if (value.endsWith("()")) {      int selectionStart=currentExpression.getSelectionStart();      int selectionEnd=currentExpression.getSelectionEnd();      String text=currentExpression.getText();      String firstPart=text.substring(0,selectionStart);      String lastPart=text.substring(selectionEnd);      currentExpression.setText(firstPart + value + lastPart);      int lengthForCaretPosition=value.length();      if (value.endsWith("()")) {        lengthForCaretPosition--;      }      currentExpression.setCaretPosition(selectionStart + lengthForCaretPosition);      addToExpression(selectedText);      currentExpression.setCaretPosition(currentExpression.getCaretPosition() + 1);      validateExpression();      requestExpressionFocus();    } else {      int selectionStart=currentExpression.getSelectionStart();      int selectionEnd=currentExpression.getSelectionEnd();      String text=currentExpression.getText();      String firstPart=text.substring(0,selectionStart);      String lastPart=text.substring(selectionEnd);      currentExpression.setText(firstPart + value + lastPart);      int lengthForCaretPosition=value.length();      if (value.endsWith("()")) {        lengthForCaretPosition--;      }      currentExpression.setCaretPosition(selectionStart + lengthForCaretPosition);      validateExpression();      requestExpressionFocus();    }  } else {    int caretPosition=currentExpression.getCaretPosition();    String text=currentExpression.getText();    if (text != null && text.length() > 0) {      String firstPart=text.substring(0,caretPosition);      String lastPart=text.substring(caretPosition);      currentExpression.setText(firstPart + value + lastPart);      int lengthForCaretPosition=value.length();      if (value.endsWith("()")) {        lengthForCaretPosition--;      }      currentExpression.setCaretPosition(caretPosition + lengthForCaretPosition);    } else {      currentExpression.setText(value);      int lengthForCaretPosition=value.length();      if (value.endsWith("()")) {        lengthForCaretPosition--;      }      currentExpression.setCaretPosition(caretPosition + lengthForCaretPosition);      currentExpression.setCaretPosition(lengthForCaretPosition);    }    validateExpression();    requestExpressionFocus();  }}  }
class C{  public RemoveByNameTest(String name){  super(name);}  }
class C{  public static void readyGoForResult(Activity activity,Class<?> className,Bundle bundle,int requestCode){  activity.startActivityForResult(getIntent(activity,className).putExtras(bundle),requestCode);}  }
class C{  @Inject protected PreferencesViewImpl(org.eclipse.che.ide.Resources resources,PreferenceViewImplUiBinder uiBinder,CoreLocalizationConstant locale){  this.resources=resources;  this.locale=locale;  Widget widget=uiBinder.createAndBindUi(this);  this.setTitle("Preferences");  this.setWidget(widget);  TableElement tableElement=Elements.createTableElement();  tableElement.setAttribute("style","width: 100%");  list=new CategoriesList(resources);  preferences.add(list);  createButtons();}  }
class C{  private boolean hasTargetConnection(){  return (this.target != null);}  }
class C{  public LocationOperand(){  type=ALENGTH_ACCESS;}  }
class C{  public Boolean isD8On(){  return this.isDigitalOn(8);}  }
class C{  public boolean isIncluded(int M_Product_ID){  if (getRestrictions(false).length == 0)   return true;  for (int i=0; i < m_restrictions.length; i++) {    MRfQTopicSubscriberOnly restriction=m_restrictions[i];    if (!restriction.isActive())     continue;    if (restriction.getM_Product_ID() == M_Product_ID)     return true;    if (MProductCategory.isCategory(restriction.getM_Product_Category_ID(),M_Product_ID))     return true;  }  return false;}  }
class C{  public EnuFrame(double[] ecefv,LatLonPoint llpt){  double lat_=llpt.getY();  double lon_=llpt.getX();  double latitude=ProjMath.degToRad(lat_);  double longitude=ProjMath.degToRad(lon_);  double ecefVector[]=new double[3];  double enuVector[]=new double[3];  ecefVector[0]=ecefv[0];  ecefVector[1]=ecefv[1];  ecefVector[2]=ecefv[2];  ecef2enu(ecefVector,latitude,longitude,enuVector);  this.x=(float)enuVector[0];  this.y=(float)enuVector[1];  this.z=(float)enuVector[2];}  }
class C{  public boolean isPublic(){  return getRawClass().isPublic();}  }
class C{  public void test_syn_bad_03() throws MalformedQueryException {  final String query="SELECT (1 AS ?X) (1 AS ?X) {}";  negativeTest(query);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument08.class,args);}  }
class C{  public MiniMap(Container d,IGame g,IBoardView bview) throws IOException {  m_game=g;  m_bview=bview;  m_dialog=d;  m_board=m_game.getBoard();  m_bview.addBoardViewListener(boardViewListener);  m_game.addGameListener(gameListener);  m_board.addBoardListener(boardListener);  initialize();}  }
class C{  public static DTMIterator newDTMIterator(Compiler compiler,int opPos,boolean isTopLevel) throws javax.xml.transform.TransformerException {  int firstStepPos=OpMap.getFirstChildPos(opPos);  int analysis=analyze(compiler,firstStepPos,0);  boolean isOneStep=isOneStep(analysis);  DTMIterator iter;  if (isOneStep && walksSelfOnly(analysis) && isWild(analysis)&& !hasPredicate(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("SelfIteratorNoPredicate",analysis,compiler);    iter=new SelfIteratorNoPredicate(compiler,opPos,analysis);  } else   if (walksChildrenOnly(analysis) && isOneStep) {    if (isWild(analysis) && !hasPredicate(analysis)) {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildIterator",analysis,compiler);      iter=new ChildIterator(compiler,opPos,analysis);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("ChildTestIterator",analysis,compiler);      iter=new ChildTestIterator(compiler,opPos,analysis);    }  } else   if (isOneStep && walksAttributes(analysis)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("AttributeIterator",analysis,compiler);    iter=new AttributeIterator(compiler,opPos,analysis);  } else   if (isOneStep && !walksFilteredList(analysis)) {    if (!walksNamespaces(analysis) && (walksInDocOrder(analysis) || isSet(analysis,BIT_PARENT))) {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIteratorForward",analysis,compiler);      iter=new OneStepIteratorForward(compiler,opPos,analysis);    } else {      if (false || DEBUG_ITERATOR_CREATION)       diagnoseIterator("OneStepIterator",analysis,compiler);      iter=new OneStepIterator(compiler,opPos,analysis);    }  } else   if (isOptimizableForDescendantIterator(compiler,firstStepPos,0)) {    if (DEBUG_ITERATOR_CREATION)     diagnoseIterator("DescendantIterator",analysis,compiler);    iter=new DescendantIterator(compiler,opPos,analysis);  } else {    if (isNaturalDocOrder(compiler,firstStepPos,0,analysis)) {      if (false || DEBUG_ITERATOR_CREATION) {        diagnoseIterator("WalkingIterator",analysis,compiler);      }      iter=new WalkingIterator(compiler,opPos,analysis,true);    } else {      if (DEBUG_ITERATOR_CREATION)       diagnoseIterator("WalkingIteratorSorted",analysis,compiler);      iter=new WalkingIteratorSorted(compiler,opPos,analysis,true);    }  }  if (iter instanceof LocPathIterator)   ((LocPathIterator)iter).setIsTopLevel(isTopLevel);  return iter;}  }
class C{  @DebugLog private void deletePlay(Play play){  persister.delete(play);}  }
class C{  private ScenarioResult createImplementationScenario(){switch (specification.getSupplierType()) {case CLASS:case ABSTRACT_CLASS:    throw new IllegalArgumentException("Invalid Scenario: Classes cannot be implemented");case INTERFACE:case DEFAULT_INTERFACE:{    Interface supplier=new Interface("S").setVisibility(specification.getSupplierVisibility());switch (specification.getClientType()) {case CLASS:      return new ScenarioResult(supplier,new Class("C").addInterface(supplier));case ABSTRACT_CLASS:    return new ScenarioResult(supplier,new Class("C").makeAbstract().addInterface(supplier));case INTERFACE:case DEFAULT_INTERFACE:  throw new IllegalArgumentException("Invalid Scenario: A class cannot extend an interface");}break;}}throw new IllegalArgumentException("Unexpected supplier type: " + specification.getSupplierType());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Map<String,Object> calculatePurchasePrice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  List<GenericValue> orderItemPriceInfos=FastList.newInstance();  boolean validPriceFound=false;  BigDecimal price=BigDecimal.ZERO;  GenericValue product=(GenericValue)context.get("product");  String productId=product.getString("productId");  String currencyUomId=(String)context.get("currencyUomId");  String partyId=(String)context.get("partyId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  Locale locale=(Locale)context.get("locale");  if (!validPriceFound) {    Map<String,Object> priceContext=UtilMisc.toMap("currencyUomId",currencyUomId,"partyId",partyId,"productId",productId,"quantity",quantity);    List<GenericValue> productSuppliers=null;    try {      Map<String,Object> priceResult=dispatcher.runSync("getSuppliersForProduct",priceContext);      if (ServiceUtil.isError(priceResult)) {        String errMsg=ServiceUtil.getErrorMessage(priceResult);        Debug.logError(errMsg,module);        return ServiceUtil.returnError(errMsg);      }      productSuppliers=UtilGenerics.checkList(priceResult.get("supplierProducts"));    } catch (    GenericServiceException gse) {      Debug.logError(gse,module);      return ServiceUtil.returnError(gse.getMessage());    }    if (productSuppliers != null) {      for (      GenericValue productSupplier : productSuppliers) {        if (!validPriceFound) {          price=((BigDecimal)productSupplier.get("lastPrice"));          validPriceFound=true;        }        StringBuilder priceInfoDescription=new StringBuilder();        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplier",locale));        priceInfoDescription.append(" [");        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplierMinimumOrderQuantity",locale));        priceInfoDescription.append(productSupplier.getBigDecimal("minimumOrderQuantity"));        priceInfoDescription.append(UtilProperties.getMessage(resource,"ProductSupplierLastPrice",locale));        priceInfoDescription.append(productSupplier.getBigDecimal("lastPrice"));        priceInfoDescription.append("]");        GenericValue orderItemPriceInfo=delegator.makeValue("OrderItemPriceInfo");        String priceInfoDescriptionString=priceInfoDescription.toString();        if (priceInfoDescriptionString.length() > 250) {          priceInfoDescriptionString=priceInfoDescriptionString.substring(0,250);        }        orderItemPriceInfo.set("description",priceInfoDescriptionString);        orderItemPriceInfos.add(orderItemPriceInfo);      }    }  }  if (!validPriceFound) {    List<GenericValue> prices=null;    try {      prices=EntityQuery.use(delegator).from("ProductPrice").where("productId",productId,"productPricePurposeId","PURCHASE").orderBy("-fromDate").queryList();      if (UtilValidate.isEmpty(prices)) {        GenericValue parentProduct=ProductWorker.getParentProduct(productId,delegator);        if (parentProduct != null) {          String parentProductId=parentProduct.getString("productId");          prices=EntityQuery.use(delegator).from("ProductPrice").where("productId",parentProductId,"productPricePurposeId","PURCHASE").orderBy("-fromDate").queryList();        }      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }    prices=EntityUtil.filterByDate(prices);    List<GenericValue> pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","AVERAGE_COST"));    if (UtilValidate.isEmpty(pricesToUse)) {      pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","DEFAULT_PRICE"));      if (UtilValidate.isEmpty(pricesToUse)) {        pricesToUse=EntityUtil.filterByAnd(prices,UtilMisc.toMap("productPriceTypeId","LIST_PRICE"));      }    }    GenericValue thisPrice=EntityUtil.getFirst(pricesToUse);    if (thisPrice != null) {      price=thisPrice.getBigDecimal("price");      validPriceFound=true;    }  }  result.put("price",price);  result.put("validPriceFound",Boolean.valueOf(validPriceFound));  result.put("orderItemPriceInfos",orderItemPriceInfos);  return result;}  }
class C{  public static void trace(final String message,final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.trace(message,t);  } else {    System.err.printf("TRACE: %s : %s\n",message,t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public Wine runForeground(File workingDirectory,String executableToRun) throws CancelException {  runForeground(workingDirectory,executableToRun,null,null);  return this;}  }
class C{  public boolean storeAll(File file){  boolean result=true;  Element root=initStore();  if (!addConfigStore(root)) {    result=false;  }  if (!addToolsStore(root)) {    result=false;  }  if (!addUserStore(root)) {    result=false;  }  addConfigStore(root);  addToolsStore(root);  addUserStore(root);  includeHistory(root);  if (!finalStore(root,file)) {    result=false;  }  return result;}  }
class C{  private void completeExceptionHandlers(boolean isOutermost){  if (method.isSynchronized() && !options.ESCAPE_INVOKEE_THREAD_LOCAL) {    ExceptionHandlerBasicBlock rethrow=new ExceptionHandlerBasicBlock(SYNTH_CATCH_BCI,inlineSequence,new TypeOperand(RVMType.JavaLangThrowableType),cfg);    rethrow.setExceptionHandlers(enclosingHandlers);    RegisterOperand ceo=temps.makeTemp(TypeReference.JavaLangThrowable);    Instruction s=Nullary.create(GET_CAUGHT_EXCEPTION,ceo);    appendInstruction(rethrow,s,SYNTH_CATCH_BCI);    Operand lockObject=getLockObject();    RVMMethod target=Entrypoints.unlockAndThrowMethod;    MethodOperand methodOp=MethodOperand.STATIC(target);    methodOp.setIsNonReturningCall(true);    s=Call.create2(CALL,null,new AddressConstantOperand(target.getOffset()),methodOp,lockObject,ceo.copyD2U());    appendInstruction(rethrow,s,RUNTIME_SERVICES_BCI);    cfg.insertBeforeInCodeOrder(epilogue,rethrow);    if (enclosingHandlers != null) {      for (Enumeration<BasicBlock> e=enclosingHandlers.enumerator(); e.hasMoreElements(); ) {        BasicBlock eh=e.nextElement();        rethrow.insertOut(eh);      }    }    rethrow.setCanThrowExceptions();    rethrow.setMayThrowUncaughtException();    rethrow.insertOut(exit);    unlockAndRethrow=rethrow;    ExceptionHandlerBasicBlock[] sh=new ExceptionHandlerBasicBlock[1];    sh[0]=rethrow;    enclosingHandlers=new ExceptionHandlerBasicBlockBag(sh,enclosingHandlers);    generatedExceptionHandlers=true;  }}  }
class C{  public boolean remove(int val){  return remove_int(val);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public SQLRecoverableException(Throwable cause){  super(cause);}  }
class C{  public static boolean checkOcclusion(Face face,boolean[] drawSides){  boolean x=true, y=true, z=true;  for (int i=1; i < 4; i++) {    if (!similar(face.vertices[i].x,face.vertices[0].x))     x=false;    if (!similar(face.vertices[i].y,face.vertices[0].y))     y=false;    if (!similar(face.vertices[i].z,face.vertices[0].z))     z=false;  }  float val;  if (x) {    val=face.vertices[0].x;    if (similar(val,-0.5f) && !drawSides[3])     return true;    if (similar(val,0.5f) && !drawSides[4])     return true;    return false;  } else   if (y) {    val=face.vertices[0].y;    if (similar(val,-0.5f) && !drawSides[5])     return true;    if (similar(val,0.5f) && !drawSides[0])     return true;    return false;  } else   if (z) {    val=face.vertices[0].z;    if (similar(val,-0.5f) && !drawSides[1])     return true;    if (similar(val,0.5f) && !drawSides[2])     return true;    return false;  }  return false;}  }
class C{  public boolean isAttachment(String fileName){  return fileName.startsWith(ENTRY_ATTACHMENT);}  }
class C{  protected CallImpl(){  super();}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PersistentLayoutImpl(Layout<V,E> layout){  super(layout);  this.locations=Maps.asMap(ImmutableSet.copyOf(layout.getGraph().getVertices()),new RandomPointFactory<V>(getSize()));  this.dontmove=new HashSet<V>();}  }
class C{  LocationInfo(TotalCaptureResult captureInfo){  if (captureInfo != null) {    Location loc=(Location)captureInfo.get(CaptureResult.JPEG_GPS_LOCATION);    if (loc != null) {      Longitude=loc.getLongitude();      Latitude=loc.getLatitude();      TagMask|=1;      if (loc.hasAltitude()) {        Altitude=loc.getAltitude();        TagMask|=2;      }      if (loc.hasAccuracy()) {        Accuracy=loc.getAccuracy();        TagMask|=4;      }      if (loc.hasSpeed()) {        Speed=loc.getSpeed();        TagMask|=8;      }    }  }}  }
class C{  public int compare(Object o1,Object o2){  if (o1 == null)   throw new IllegalArgumentException("o1 = null");  if (o2 == null)   throw new IllegalArgumentException("o2 = null");  MRfQResponseLineQty q1=null;  MRfQResponseLineQty q2=null;  if (o1 instanceof MRfQResponseLineQty)   q1=(MRfQResponseLineQty)o1; else   throw new ClassCastException("o1");  if (o2 instanceof MRfQResponseLineQty)   q2=(MRfQResponseLineQty)o2; else   throw new ClassCastException("o2");  if (!q1.isValidAmt())   return -99;  if (!q2.isValidAmt())   return +99;  BigDecimal net1=q1.getNetAmt();  if (net1 == null)   return -9;  BigDecimal net2=q2.getNetAmt();  if (net2 == null)   return +9;  return net1.compareTo(net2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.414 -0500",hash_original_method="FAA0316A71F66D005638E2A277415AFB",hash_generated_method="580877947D20840DFCDE16EC41EA7F37") private void scrollListItemsBy(int amount){  offsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final AbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    int numChildren=getChildCount();    View last=getChildAt(numChildren - 1);    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        last=addViewBelow(last,lastVisiblePosition);        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      offsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      AbsListView.LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first,mFirstPosition);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      offsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      AbsListView.LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last,mFirstPosition + lastIndex);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  ReasonsMask(ReasonFlags reasons){  _reasons=reasons.intValue();}  }
class C{  public void sortGrammar(List<FeatureFunction> models){  Trie root=getTrieRoot();  if (root != null) {    sort(root,models);    setSorted(true);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"STATISTICS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"SUCCEEDED\" INTEGER,"+ "\"TIME\" INTEGER,"+ "\"USER_ID\" INTEGER NOT NULL ,"+ "\"CHALLENGE_ID\" INTEGER NOT NULL );");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.UNARY_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean testWeAreOnLastStep(){synchronized (m_currentStepMutex) {    return m_currentIndex + 1 >= m_steps.size();  }}  }
class C{  public static void main(String args[]){  long from=Long.parseLong(args[0]);  long to=Long.parseLong(args[1]);  int times=Integer.parseInt(args[2]);  int runs=Integer.parseInt(args[3]);  for (int i=0; i < runs; i++) {    benchmark(times);  }}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){}  }
class C{  public MExtensionFileFilter(final String[] newFilters,final String newDescription){  this();  for (  final String filter : newFilters) {    addExtension(filter);  }  if (newDescription != null) {    setDescription(newDescription);  }}  }
class C{  public BucketMovedException(Throwable cause){  super(cause);}  }
class C{  @Nonnull public static <T>T checkNotNull(T value,@Nonnull String errorMessage){  if (value == null) {    throw new NullPointerException(errorMessage);  }  return value;}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  w.simpleElement(Namespaces.gSpreadNs,TAG_NAME,null,String.valueOf(count));}  }
class C{  public final ReadonlyVec3D clear(){  x=y=z=0;  return this;}  }
class C{  static public SocksPortListener createSocksPortListener(TorConfig config,CircuitManager circuitManager){  return new SocksPortListenerImpl(config,circuitManager);}  }
class C{  private void checkSelection(){  boolean oldIsSelection=isSelection;  isSelection=text.getSelectionCount() > 0;  if (oldIsSelection != isSelection) {    fireEnablementChanged(COPY);    fireEnablementChanged(CUT);  }}  }
class C{  public List<Integer> generateLocaList(){  List<Integer> locas=new ArrayList<Integer>(this.getGlyphBuilders().size());  locas.add(0);  if (this.getGlyphBuilders().size() == 0) {    locas.add(0);  } else {    int total=0;    for (    Glyph.Builder<? extends Glyph> b : this.getGlyphBuilders()) {      int size=b.subDataSizeToSerialize();      locas.add(total + size);      total+=size;    }  }  return locas;}  }
class C{  public ConvexDTLZ2(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public void realtimeBar(int reqId,long time,double open,double high,double low,double close,long volume,double vwap,int tradeCount){  try {    volume=volume * 100;    ZonedDateTime date=TradingCalendar.getZonedDateTimeFromMilli(time * 1000);    if (m_realTimeBarsRequests.containsKey(reqId)) {      Contract contract=m_realTimeBarsRequests.get(reqId);synchronized (contract) {        Collections.sort(contract.getTradestrategies(),Tradestrategy.TRADINGDAY_CONTRACT);        boolean updateCandleDB=true;        for (        Tradestrategy tradestrategy : contract.getTradestrategies()) {          StrategyData strategyData=tradestrategy.getStrategyData();          if (TradingCalendar.isMarketHours(tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose(),date)) {            if (!this.isMarketDataRunning(contract)) {              BigDecimal price=(new BigDecimal(close)).setScale(SCALE,BigDecimal.ROUND_HALF_EVEN);              strategyData.getBaseCandleSeries().getContract().setLastAskPrice(price);              strategyData.getBaseCandleSeries().getContract().setLastBidPrice(price);              strategyData.getBaseCandleSeries().getContract().setLastPrice(price);            }            ZonedDateTime lastUpdateDate=date.plusNanos(4999);            strategyData.buildCandle(date,open,high,low,close,volume,vwap,tradeCount,(tradestrategy.getBarSize() / 5),lastUpdateDate);            if (!strategyData.getBaseCandleSeries().isEmpty()) {              CandleItem candleItem=(CandleItem)strategyData.getBaseCandleSeries().getDataItem(strategyData.getBaseCandleSeries().getItemCount() - 1);              if (updateCandleDB) {                m_tradePersistentModel.persistCandle(candleItem.getCandle());                updateCandleDB=false;              }            }          }        }      }    }  } catch (  Exception ex) {    error(reqId,3270,ex.getMessage());  }}  }
class C{  public BasicTextVectorCreator(Tokenizer tokenizer,Map<String,Integer> wordIndex,WordWeighting weighting){  this.tokenizer=tokenizer;  this.wordIndex=wordIndex;  this.weighting=weighting;}  }
class C{  public VNXeCommandJob createLunSnap(String lunID,String name){  _logger.info("creating lun snap:" + lunID);  LunSnapCreateParam parm=new LunSnapCreateParam();  parm.setStorageResource(new VNXeBase(lunID));  parm.setName(name);  LunSnapRequests req=new LunSnapRequests(_khClient);  return req.createLunSnap(parm);}  }
class C{  private void logSummary(int migrationSuccessCount,long executionTime){  if (migrationSuccessCount == 0) {    LOG.info("Keyspace " + schemaVersionDAO.getKeyspace().getName() + " is up to date. No migration necessary.");    return;  }  if (migrationSuccessCount == 1) {    LOG.info("Successfully applied 1 migration to keyspace " + schemaVersionDAO.getKeyspace().getName() + " (execution time "+ TimeFormat.format(executionTime)+ ").");  } else {    LOG.info("Successfully applied " + migrationSuccessCount + " migrations to keyspace "+ schemaVersionDAO.getKeyspace().getName()+ " (execution time "+ TimeFormat.format(executionTime)+ ").");  }}  }
class C{  private Automaton naiveLev1T(String s){  Automaton a=naiveLev1(s);  a=Operations.union(a,transpositionsOf(s));  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  public DecoratedBinding bindText(Control control,int event,Object bean,String propertyName,IValidator validator,IConverter targetToModelConverter,IConverter modelToTargetConverter){  IObservableValue widgetValue=SWTObservables.observeText(control,event);  IObservableValue modelValue=BeansObservables.observeValue(bean,propertyName);  UpdateValueStrategy targetToModel=new UpdateValueStrategy();  UpdateValueStrategy modelToTarget=new UpdateValueStrategy();  if (validator != null) {    targetToModel.setBeforeSetValidator(validator);  }  if (targetToModelConverter != null) {    targetToModel.setConverter(targetToModelConverter);  }  if (modelToTargetConverter != null) {    modelToTarget.setConverter(modelToTargetConverter);  }  Binding bindValue=context.bindValue(widgetValue,modelValue,targetToModel,modelToTarget);  ControlDecorationSupport decorationSupport=ControlDecorationSupport.create(bindValue,SWT.TOP | SWT.LEFT);  return new DecoratedBinding(bindValue,decorationSupport);}  }
class C{  public void removeParameters(){  authParams=new NameValueList();}  }
class C{  public void fireDataChanged(){  taxonSetsPanel.dataChanged();  statisticsPanel.dataChanged();}  }
class C{  public static <T>Key<T> of(Type type,Class<? extends Annotation>[] annTypes){  return new Key<>(type,annTypes);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributeaftercreate.class,args);}  }
class C{  public void actionPerformed(ActionEvent e){  log.fine("Event " + e);  log.fine("Event Source " + e.getSource());  if (e.getSource().equals(fieldProcess)) {    KeyNamePair pp=(KeyNamePair)fieldProcess.getSelectedItem();    if (pp != null) {      m_HR_Process_ID=pp.getKey();      m_process=new MHRProcess(Env.getCtx(),m_HR_Process_ID,null);      if (m_process.getHR_Period_ID() > 0) {        MHRPeriod period=MHRPeriod.get(Env.getCtx(),m_process.getHR_Period_ID());        m_dateStart=period.getStartDate();        m_dateEnd=period.getEndDate();      } else {        m_dateEnd=m_process.getDateAcct();      }      m_HR_Payroll_ID=m_process.getHR_Payroll_ID();      fieldEmployee.removeAllItems();      for (      KeyNamePair ppt : getEmployeeValid(m_process)) {        fieldEmployee.addItem(ppt);      }      fieldEmployee.setSelectedIndex(0);      fieldEmployee.setReadWrite(true);    }  } else   if (e.getSource().equals(fieldEmployee)) {    KeyNamePair pp=(KeyNamePair)fieldEmployee.getSelectedItem();    if (pp != null)     m_C_BPartner_ID=pp.getKey();    if (m_C_BPartner_ID > 0) {      fieldValidFrom.setValue(m_dateEnd);      fieldValidFrom.setReadWrite(true);      ArrayList<ValueNamePair> conceptData=getConcept(m_process,fieldProcess != null);      for (      ValueNamePair vp : conceptData)       fieldConcept.addItem(vp);      fieldConcept.setReadWrite(true);      executeQuery();    }  } else   if (e.getSource().equals(fieldConcept)) {    ValueNamePair pp=(ValueNamePair)fieldConcept.getSelectedItem();    if (pp != null) {      try {        m_HR_Concept_ID=Integer.parseInt(pp.getValue());      } catch (      Exception ex) {        m_HR_Concept_ID=0;      }    }    if (m_HR_Concept_ID > 0) {      MHRConcept concept=MHRConcept.get(Env.getCtx(),m_HR_Concept_ID);      fieldColumnType.setValue(DB.getSQLValueStringEx(null,getSQL_ColumnType(Env.getCtx(),"?"),concept.getColumnType()));      sHR_Movement_ID=seekMovement((Timestamp)fieldValidFrom.getValue());      if (sHR_Movement_ID > 0) {        MHRMovement movementFound=new MHRMovement(Env.getCtx(),sHR_Movement_ID,null);        fieldDescription.setValue(movementFound.getDescription());        fieldText.setValue("");        fieldDate.setValue(null);        fieldQty.setValue(Env.ZERO);        fieldAmount.setValue(Env.ZERO);        if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Quantity))         fieldQty.setValue(movementFound.getQty()); else         if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Amount))         fieldAmount.setValue(movementFound.getAmount()); else         if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Text))         fieldText.setValue(movementFound.getTextMsg()); else         if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Date))         fieldDate.setValue(movementFound.getServiceDate());      }      if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Quantity)) {        fieldQty.setVisible(true);        fieldQty.setReadWrite(true);        fieldAmount.setVisible(false);        fieldDate.setVisible(false);        fieldText.setVisible(false);        fieldRuleE.setVisible(false);      } else       if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Amount)) {        fieldQty.setVisible(false);        fieldAmount.setVisible(true);        fieldAmount.setReadWrite(true);        fieldDate.setVisible(false);        fieldText.setVisible(false);        fieldRuleE.setVisible(false);      } else       if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Date)) {        fieldQty.setVisible(false);        fieldAmount.setVisible(false);        fieldDate.setVisible(true);        fieldDate.setReadWrite(true);        fieldText.setVisible(false);        fieldRuleE.setVisible(false);      } else       if (concept.getColumnType().equals(MHRConcept.COLUMNTYPE_Text)) {        fieldText.setVisible(true);        fieldText.setReadWrite(true);        fieldAmount.setVisible(false);        fieldDate.setVisible(false);        fieldRuleE.setVisible(false);      }      fieldDescription.setReadWrite(true);    }  } else   if (e instanceof ActionEvent && e.getSource().equals(bOk)) {    ValueNamePair pp=(ValueNamePair)fieldConcept.getSelectedItem();    m_HR_Concept_ID=Integer.parseInt(pp.getValue());    if (m_HR_Concept_ID <= 0 || fieldProcess.getValue() == null || ((Integer)fieldProcess.getValue()).intValue() <= 0 || fieldEmployee.getValue() == null || ((Integer)fieldEmployee.getValue()).intValue() <= 0) {      ADialog.error(m_WindowNo,this.mainPanel,Msg.translate(Env.getCtx(),"FillMandatory") + Msg.translate(Env.getCtx(),"HR_Process_ID") + ", "+ Msg.translate(Env.getCtx(),"HR_Employee_ID")+ ", "+ Msg.translate(Env.getCtx(),"HR_Concept_ID"));    } else {      saveMovement();    }  }  executeQuery();  return;}  }
class C{  public E[] toArray(){  int pos=0;  E[] array=(E[])new Object[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5){  return construct(e1,e2,e3,e4,e5);}  }
class C{  private RPRecommendation buildRpRecommendationFromExistingVolume(Volume volume,VirtualPool vpool,VirtualPoolCapabilityValuesWrapper capabilities,Long journalSize){  RPRecommendation rec=new RPRecommendation();  rec.setVirtualPool(vpool);  rec.setVirtualArray(volume.getVirtualArray());  rec.setSourceStoragePool(volume.getPool());  rec.setSourceStorageSystem(volume.getStorageController());  rec.setInternalSiteName(volume.getInternalSiteName());  rec.setRpCopyName(volume.getRpCopyName());  rec.setSize((journalSize == null) ? capabilities.getSize() : journalSize);  rec.setResourceCount(capabilities.getResourceCount());  if (VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {    VPlexRecommendation vplexRec=new VPlexRecommendation();    vplexRec.setVirtualPool(vpool);    vplexRec.setVirtualArray(volume.getVirtualArray());    vplexRec.setVPlexStorageSystem(volume.getStorageController());    vplexRec.setResourceCount(1);    if (null == volume.getAssociatedVolumes() || volume.getAssociatedVolumes().isEmpty()) {      _log.error("VPLEX volume {} has no backend volumes.",volume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(volume.forDisplay());    }    for (    String backingVolumeId : volume.getAssociatedVolumes()) {      Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(backingVolumeId));      if (backingVolume.getVirtualArray().equals(volume.getVirtualArray())) {        rec.setSourceStoragePool(backingVolume.getPool());        rec.setSourceStorageSystem(backingVolume.getStorageController());        vplexRec.setSourceStoragePool(backingVolume.getPool());        vplexRec.setSourceStorageSystem(backingVolume.getStorageController());      } else {        if (journalSize == null) {          RPRecommendation haRec=new RPRecommendation();          VirtualPool haVpool=dbClient.queryObject(VirtualPool.class,backingVolume.getVirtualPool());          haRec.setVirtualPool(haVpool);          haRec.setVirtualArray(backingVolume.getVirtualArray());          haRec.setSourceStoragePool(backingVolume.getPool());          haRec.setSourceStorageSystem(backingVolume.getStorageController());          haRec.setResourceCount(capabilities.getResourceCount());          haRec.setSize(capabilities.getSize());          haRec.setInternalSiteName(backingVolume.getInternalSiteName());          haRec.setRpCopyName(backingVolume.getRpCopyName());          VPlexRecommendation haVPlexRec=new VPlexRecommendation();          haVPlexRec.setVirtualPool(haRec.getVirtualPool());          haVPlexRec.setVirtualArray(haRec.getVirtualArray());          haVPlexRec.setVPlexStorageSystem(volume.getStorageController());          haVPlexRec.setSourceStoragePool(haRec.getSourceStoragePool());          haVPlexRec.setSourceStorageSystem(haRec.getSourceStorageSystem());          haVPlexRec.setResourceCount(1);          haRec.setVirtualVolumeRecommendation(haVPlexRec);          rec.setHaRecommendation(haRec);        }      }    }    rec.setVirtualVolumeRecommendation(vplexRec);  }  return rec;}  }
class C{  public boolean equals(Object other){  if (_set.equals(other)) {    return true;  } else   if (other instanceof Set) {    Set that=(Set)other;    if (that.size() != _set.size()) {      return false;    } else {      Iterator it=that.iterator();      for (int i=that.size(); i-- > 0; ) {        Object val=it.next();        if (val instanceof Long) {          long v=unwrap(val);          if (_set.contains(v)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  static public Name2Addr create(final IRawStore store){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(Name2Addr.class.getName());  final Properties p=new Properties();  p.setProperty(KeyBuilder.Options.STRENGTH,StrengthEnum.Identical.name());  metadata.setTupleSerializer(new Name2AddrTupleSerializer(new DefaultKeyBuilderFactory(p)));  return (Name2Addr)BTree.create(store,metadata);}  }
class C{  public boolean visit(SingleMemberAnnotation node){  return true;}  }
class C{  public Utf8Writer(File file,boolean append) throws FileNotFoundException {  this(new FileOutputStream(file,append));}  }
class C{  @FromString public static Years parseYears(String periodStr){  if (periodStr == null) {    return Years.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Years.years(p.getYears());}  }
class C{  public boolean isPurchased(){  Object oo=get_Value(COLUMNNAME_IsPurchased);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapBean) {    Debug.message("mousedelegator","MouseDelegator found a map.");    setMap((MapBean)someObj);  }  if (someObj instanceof MapMouseMode) {    Debug.message("mousedelegator","MouseDelegator found a MapMouseMode.");    addMouseMode((MapMouseMode)someObj);  }}  }
class C{  public void put(double x,double y,double w){  if (sumWe <= 0.) {    meanX=x;    meanY=y;    sumWe=w;    return;  }  sumWe+=w;  final double deltaX=x - meanX;  final double deltaY=y - meanY;  meanX+=deltaX * w / sumWe;  meanY+=deltaY * w / sumWe;  final double neltaX=x - meanX;  final double neltaY=y - meanY;  sumXX+=w * deltaX * neltaX;  sumYY+=w * deltaY * neltaY;  sumXY+=w * deltaX * neltaY;}  }
class C{  public void clearWarnings(){  crsInternal.clearWarnings();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public DataFormatException(String s){  super(s);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  public void reset(){  this.result.setLength(0);}  }
class C{  String value(){  return val;}  }
class C{  public static StringSet extractValuesFromStringSet(String key,StringSetMap volumeInformation){  try {    StringSet returnSet=new StringSet();    StringSet availableValueSet=volumeInformation.get(key);    if (null != availableValueSet) {      for (      String value : availableValueSet) {        returnSet.add(value);      }    }    return returnSet;  } catch (  Exception e) {    _logger.error(e.getMessage(),e);  }  return null;}  }
class C{  public Classifier(){  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  setClassifierTemplate(m_ClassifierTemplate);}  }
class C{  public String readScript(String fname) throws IOException {  StringBuilder sb=new StringBuilder();  BufferedReader in=null;  try {    if (fname.startsWith("hdfs:") || fname.startsWith("gpfs:")) {      FileSystem fs=FileSystem.get(ConfigurationManager.getCachedJobConf());      Path scriptPath=new Path(fname);      in=new BufferedReader(new InputStreamReader(fs.open(scriptPath)));    } else {      in=new BufferedReader(new FileReader(fname));    }    String tmp=null;    while ((tmp=in.readLine()) != null) {      sb.append(tmp);      sb.append("\n");    }  }  finally {    IOUtilFunctions.closeSilently(in);  }  return sb.toString();}  }
class C{  void recordUndeployed(@Nullable UUID leftNodeId){  assert !Thread.holdsLock(mux);  for (  Map.Entry<String,Class<?>> depCls : deployedClassMap().entrySet()) {    boolean isTask=isTask(depCls.getValue());    String msg=(isTask ? "Task" : "Class") + " was undeployed in SHARED or CONTINUOUS mode " + "[cls="+ depCls.getValue()+ ", alias="+ depCls.getKey()+ ']';    int type=isTask ? EVT_TASK_UNDEPLOYED : EVT_CLASS_UNDEPLOYED;    if (ctx.event().isRecordable(type)) {      DeploymentEvent evt=new DeploymentEvent();      evt.node(ctx.discovery().localNode());      evt.message(msg);      evt.type(type);      evt.alias(depCls.getKey());      ctx.event().record(evt);    }    if (log.isInfoEnabled())     log.info(msg);  }  if (obsolete()) {    ctx.resource().onUndeployed(this);    ClassLoader ldr=classLoader();    ctx.cache().onUndeployed(ldr);    if (ctx.config().getMarshaller() instanceof AbstractMarshaller)     ((AbstractMarshaller)ctx.config().getMarshaller()).onUndeploy(ldr);    clearSerializationCaches();    GridAnnotationsCache.onUndeployed(ldr);    GridClassLoaderCache.onUndeployed(ldr);  }}  }
class C{  private static boolean isPointInRing(Coordinate p,LinearRing ring){  if (!ring.getEnvelopeInternal().intersects(p))   return false;  return CGAlgorithms.isPointInRing(p,ring.getCoordinates());}  }
class C{  public String variableName(int i){  return getConstPool().getUtf8Info(nameIndex(i));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.492 -0500",hash_original_method="DE96EEBF0F3556789E0EE7EC3C8C89E3",hash_generated_method="F5F44E5AF2FF70EBF213A4EA1344F183") public void firePropertyChange(PropertyChangeEvent event){  String propertyName=event.getPropertyName();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (newValue != null && oldValue != null && newValue.equals(oldValue)) {    return;  }  notifyEachListener:   for (  PropertyChangeListener p : listeners) {    while (p instanceof PropertyChangeListenerProxy) {      PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)p;      if (!Objects.equal(proxy.getPropertyName(),propertyName)) {        continue notifyEachListener;      }      p=(PropertyChangeListener)proxy.getListener();    }    p.propertyChange(event);  }}  }
class C{  @Override public String toString(){  return "Image{" + "imageId=" + imageId + ", imageFile="+ imageFile+ ", mImageIsVisible="+ mImageIsVisible+ '}';}  }
class C{  public boolean loadSchema(InputSource in) throws SAXException, IOException {  try {    schema=sr.createSchema(new SAXSource(in),schemaProperties);    validator=null;    return true;  } catch (  IncorrectSchemaException e) {    return false;  }}  }
class C{  protected void submitCloudlets(){  int vmIndex=0;  List<Cloudlet> successfullySubmitted=new ArrayList<Cloudlet>();  for (  Cloudlet cloudlet : getCloudletList()) {    Vm vm;    if (cloudlet.getVmId() == -1) {      vm=getVmsCreatedList().get(vmIndex);    } else {      vm=VmList.getById(getVmsCreatedList(),cloudlet.getVmId());      if (vm == null) {        if (!Log.isDisabled()) {          Log.printConcatLine(CloudSim.clock(),": ",getName(),": Postponing execution of cloudlet ",cloudlet.getCloudletId(),": bount VM not available");        }        continue;      }    }    if (!Log.isDisabled()) {      Log.printConcatLine(CloudSim.clock(),": ",getName(),": Sending cloudlet ",cloudlet.getCloudletId()," to VM #",vm.getId());    }    cloudlet.setVmId(vm.getId());    sendNow(getVmsToDatacentersMap().get(vm.getId()),CloudSimTags.CLOUDLET_SUBMIT,cloudlet);    cloudletsSubmitted++;    vmIndex=(vmIndex + 1) % getVmsCreatedList().size();    getCloudletSubmittedList().add(cloudlet);    successfullySubmitted.add(cloudlet);  }  getCloudletList().removeAll(successfullySubmitted);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ENUM_ATTRIBUTE_SOURCE__ATTRIBUTE:    return attribute != ATTRIBUTE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void generateDocumentationForContainer(String containerId) throws Exception {  Writer writer=new FileWriter(System.getProperty("basedir") + "/target/" + containerId+ ".log");  writer.write(this.generator.generateDocumentation(containerId));  writer.close();}  }
class C{  public EventSetDescriptor(Class<?> sourceClass,String eventSetName,Class<?> listenerType,String listenerMethodName) throws IntrospectionException {  this(sourceClass,eventSetName,listenerType,new String[]{listenerMethodName},Introspector.ADD_PREFIX + getListenerClassName(listenerType),Introspector.REMOVE_PREFIX + getListenerClassName(listenerType),Introspector.GET_PREFIX + getListenerClassName(listenerType) + "s");  String eventName=NameGenerator.capitalize(eventSetName) + "Event";  Method[] listenerMethods=getListenerMethods();  if (listenerMethods.length > 0) {    Class[] args=getParameterTypes(getClass0(),listenerMethods[0]);    if (!"vetoableChange".equals(eventSetName) && !args[0].getName().endsWith(eventName)) {      throw new IntrospectionException("Method \"" + listenerMethodName + "\" should have argument \""+ eventName+ "\"");    }  }}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);  centerDrawable.draw(canvas);}  }
class C{  public static void showError(Activity activity,String message){  String errorMessage=getErrorMessage(message);  showErrorInternal(activity,errorMessage);}  }
class C{  public void downloadAttachment(String entryId,String directory) throws IOException, ServiceException {  AttachmentEntry attachment=service.getEntry(new URL(getContentFeedUrl() + entryId),AttachmentEntry.class);  String url=((OutOfLineContent)attachment.getContent()).getUri();  downloadFile(url,directory + attachment.getTitle().getPlainText());}  }
class C{  public Map<String,Integer> typesForColumns(List<QuerySource> relations){  HashMap<String,Integer> colType=new HashMap<String,Integer>();  colType.put(Heading.ID,Types.VARCHAR);  colType.put(Heading.TYPE,Types.VARCHAR);  colType.put(Heading.INDEX,Types.VARCHAR);  for (  QuerySource table : relations) {    if (!tableColumnInfo.containsKey(table.getSource()))     continue;    colType.putAll(tableColumnInfo.get(table.getSource()));  }  return colType;}  }
class C{  DirectCompactOrderedSketch(UpdateSketch sketch,Memory dstMem){  super(sketch.isEmpty(),sketch.getSeedHash(),sketch.getRetainedEntries(true),sketch.getThetaLong());  int emptyBit=isEmpty() ? (byte)EMPTY_FLAG_MASK : 0;  byte flags=(byte)(emptyBit | READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK| ORDERED_FLAG_MASK);  boolean ordered=true;  long[] compactOrderedCache=CompactSketch.compactCache(sketch.getCache(),getRetainedEntries(false),getThetaLong(),ordered);  mem_=loadCompactMemory(compactOrderedCache,isEmpty(),getSeedHash(),getRetainedEntries(false),getThetaLong(),dstMem,flags);  preLongs_=mem_.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;}  }
class C{  public static void LogFilesListToFile(File folder){  String str="System folder Files list :\n";  File app=new File(folder.getAbsolutePath() + File.separator + "app");  File privApp=new File(folder.getAbsolutePath() + File.separator + "priv-app");  File framework=new File(folder.getAbsolutePath() + File.separator + "framework");  if (app.exists())   for (  File f : listAllFiles(app)) {    str=str + (f.getAbsolutePath().substring(app.getAbsolutePath().length() + 1)) + "\n";  }  if (privApp.exists())   for (  File f : listAllFiles(privApp)) {    str=str + (f.getAbsolutePath().substring(privApp.getAbsolutePath().length() + 1)) + "\n";  }  if (framework.exists())   for (  File f : listAllFiles(framework)) {    str=str + (f.getAbsolutePath().substring(framework.getAbsolutePath().length() + 1)) + "\n";  }  Logger.writeSystemFolderFiles("[FilesUtils][D]\n" + str);}  }
class C{  public DrawerBuilder withItemAnimator(@NonNull RecyclerView.ItemAnimator itemAnimator){  mItemAnimator=itemAnimator;  return this;}  }
class C{  public static Matrix fromImageToGeographic(java.awt.geom.Point2D[] imagePoints,LatLon[] geoPoints){  if (imagePoints == null) {    String message=Logging.getMessage("nullValue.ImagePointsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (geoPoints == null) {    String message=Logging.getMessage("nullValue.GeoPointsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (imagePoints.length < 3) {    String message=Logging.getMessage("generic.ArrayInvalidLength","imagePoints.length < 3");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (geoPoints.length < 3) {    String message=Logging.getMessage("generic.ArrayInvalidLength","geoPoints.length < 3");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=geoPoints[0].getLatitude().degrees;  double lat2=geoPoints[1].getLatitude().degrees;  double lat3=geoPoints[2].getLatitude().degrees;  double lon1=geoPoints[0].getLongitude().degrees;  double lon2=geoPoints[1].getLongitude().degrees;  double lon3=geoPoints[2].getLongitude().degrees;  double x1=imagePoints[0].getX();  double x2=imagePoints[1].getX();  double x3=imagePoints[2].getX();  double y1=imagePoints[0].getY();  double y2=imagePoints[1].getY();  double y3=imagePoints[2].getY();  double a0=(x3 - x1) - (x2 - x1) * (y3 - y1) / (y2 - y1);  double a=(1 / a0) * ((lon3 - lon1) - (lon2 - lon1) * (y3 - y1) / (y2 - y1));  double b=(lon2 - lon1) / (y2 - y1) - a * (x2 - x1) / (y2 - y1);  double c=lon1 - a * x1 - b * y1;  double d0=(x3 - x1) - (x2 - x1) * (y3 - y1) / (y2 - y1);  double d=(1 / d0) * ((lat3 - lat1) - (lat2 - lat1) * (y3 - y1) / (y2 - y1));  double e=(lat2 - lat1) / (y2 - y1) - d * (x2 - x1) / (y2 - y1);  double f=lat1 - d * x1 - e * y1;  return new Matrix(a,b,c,0.0,d,e,f,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0);}  }
class C{  private void buildGetStorageResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  Pattern pattern=Pattern.compile("/herd-app/rest/storages/(.*)");  Matcher matcher=pattern.matcher(uri.getPath());  if (matcher.find()) {    Storage storage=getNewStorage(matcher.group(1));    response.setEntity(getHttpEntity(storage));  }}  }
class C{  public static int waitingRemainingGuessed(final String hostname,final int port,final String hosthash,final RobotsTxt robots,final ClientIdentification.Agent agent){  final Host host=map.get(hosthash);  if (host == null)   return Integer.MIN_VALUE;  int waiting=agent.minimumDelta;  waiting+=host.flux(waiting);  waiting=Math.max(waiting,(int)(host.average() * Switchboard.getSwitchboard().getConfigFloat(SwitchboardConstants.CRAWLER_LATENCY_FACTOR,0.5f)));  if (Switchboard.getSwitchboard().crawlQueues.hostcount(hostname) > Switchboard.getSwitchboard().getConfigInt(SwitchboardConstants.CRAWLER_MAX_SAME_HOST_IN_QUEUE,20))   waiting+=3000;  final int timeSinceLastAccess=(int)(System.currentTimeMillis() - host.lastacc());  if (robots != null) {    int robotsDelay=waitingRobots(hostname + ":" + port,robots,agent,false);    if (robotsDelay < 0)     return -timeSinceLastAccess;    waiting=Math.max(waiting,robotsDelay);  }  return Math.min(60000,waiting) - timeSinceLastAccess;}  }
class C{  public int read(final byte[] data){  init();  if (data != null) {    rawData=ByteBuffer.wrap(data);    rawData.rewind();    rawData.order(ByteOrder.LITTLE_ENDIAN);    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  return status;}  }
class C{  public static Properties readProperties(String resourceName) throws Exception {  Properties defaultProps=new Properties();  try {    defaultProps.load(ClassLoader.getSystemResourceAsStream(resourceName));  } catch (  Exception ex) {    System.err.println("Warning, unable to load properties file from " + "system resource (Utils.java)");  }  int slInd=resourceName.lastIndexOf('/');  if (slInd != -1) {    resourceName=resourceName.substring(slInd + 1);  }  Properties userProps=new Properties(defaultProps);  File propFile=new File(System.getProperties().getProperty("user.home") + File.separatorChar + resourceName);  if (propFile.exists()) {    try {      userProps.load(new FileInputStream(propFile));    } catch (    Exception ex) {      throw new Exception("Problem reading user properties: " + propFile);    }  }  Properties localProps=new Properties(userProps);  propFile=new File(resourceName);  if (propFile.exists()) {    try {      localProps.load(new FileInputStream(propFile));    } catch (    Exception ex) {      throw new Exception("Problem reading local properties: " + propFile);    }  }  return localProps;}  }
class C{  public boolean exists(String name){  name=fixFileName(name);  return Util.getImplementation().storageFileExists(name);}  }
class C{  public static void sendFile(HttpServletRequest request,HttpServletResponse response,File file) throws IOException {  try (OutputStream out=response.getOutputStream();RandomAccessFile raf=new RandomAccessFile(file,"r")){    long fileSize=raf.length();    long rangeStart=0;    long rangeFinish=fileSize - 1;    String range=request.getHeader("Range");    if (range != null && range.startsWith("bytes=")) {      String pureRange=range.replaceAll("bytes=","");      int rangeSep=pureRange.indexOf("-");      try {        rangeStart=Long.parseLong(pureRange.substring(0,rangeSep));        if (rangeStart > fileSize || rangeStart < 0) {          rangeStart=0;        }      } catch (      NumberFormatException e) {        logger.trace("",e);      }      if (rangeSep < pureRange.length() - 1) {        try {          rangeFinish=Long.parseLong(pureRange.substring(rangeSep + 1));          if (rangeFinish < 0 || rangeFinish >= fileSize) {            rangeFinish=fileSize - 1;          }        } catch (        NumberFormatException e) {          logger.trace("",e);        }      }    }    response.setContentType("application/x-download");    response.setHeader("Content-Disposition","attachment; filename=" + file.getName());    response.setHeader("Accept-Ranges","bytes");    response.setHeader("Content-Length",Long.toString(rangeFinish - rangeStart + 1));    response.setHeader("Content-Range","bytes " + rangeStart + "-"+ rangeFinish+ "/"+ fileSize);    raf.seek(rangeStart);    byte[] buffer=new byte[4096];    long len;    int totalRead=0;    boolean nomore=false;    while (true) {      len=raf.read(buffer);      if (len > 0 && totalRead + len > rangeFinish - rangeStart + 1) {        len=rangeFinish - rangeStart + 1 - totalRead;        nomore=true;      }      if (len > 0) {        out.write(buffer,0,(int)len);        totalRead+=len;        if (nomore) {          break;        }      } else {        break;      }    }  } }  }
class C{  public void sub(BigIntPolynomial b){  if (b.coeffs.length > coeffs.length) {    int N=coeffs.length;    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);    for (int i=N; i < coeffs.length; i++) {      coeffs[i]=Constants.BIGINT_ZERO;    }  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=coeffs[i].subtract(b.coeffs[i]);  }}  }
class C{  protected void createPTRoutes(){  log.info("Creating pt routes...");  Counter counter=new Counter("route # ");  this.router=new PTLRFastAStarLandmarksSimpleRouting(this.network);  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      counter.incCounter();      assignRoute(route);    }  }  counter.printCounter();  log.info("  Add artificial links and nodes...");  for (  ArtificiallyConnectedStopFacility newFacility : artificiallyConnectedStopFacilities.values()) {    this.network.addNode(newFacility.myNode);  }  for (  ArtificiallyConnectedStopFacility newFacility : artificiallyConnectedStopFacilities.values()) {    this.network.addLink(newFacility.myLink);    for (    Link newLink : newFacility.getLinks()) {      this.network.addLink(newLink);    }  }  for (  Link newLink : artificiallyAddedLinks.values()) {    this.network.addLink(newLink);  }  log.info("  Add artificial links and nodes... done.");  log.info("Creating pt routes... done.");}  }
class C{  public IllegalAccessException(@Nullable String s){  super(s);}  }
class C{  public boolean startProcess(Properties ctx,ProcessInfo pi,Trx trx){  processInfo=pi;  String Name=pi.getTitle();  int AD_PInstance_ID=pi.getAD_PInstance_ID();  int Record_ID=pi.getRecord_ID();  log.info("Name=" + Name + "  AD_PInstance_ID="+ AD_PInstance_ID+ " Record_ID="+ Record_ID);  String trxName=null;  if (trx != null) {    trxName=trx.getTrxName();  }  ReportData reportData=getReportData(pi,trxName);  if (reportData == null) {    reportResult(AD_PInstance_ID,"Can not find report data",trxName);    return false;  }  String reportPath=reportData.getReportFilePath();  if (Util.isEmpty(reportPath,true)) {    reportResult(AD_PInstance_ID,"Can not find report",trxName);    return false;  }  JasperData data=null;  File reportFile=null;  String fileExtension="";  HashMap<String,Object> params=new HashMap<String,Object>();  addProcessParameters(AD_PInstance_ID,params,trxName);  addProcessInfoParameters(params,pi.getParameter());  reportFile=getReportFile(reportPath,(String)params.get("ReportType"));  if (reportFile == null || reportFile.exists() == false) {    log.severe("No report file found for given type, falling back to " + reportPath);    reportFile=getReportFile(reportPath);  }  if (reportFile == null || reportFile.exists() == false) {    String tmp="Can not find report file at path - " + reportPath;    log.severe(tmp);    reportResult(AD_PInstance_ID,tmp,trxName);  }  if (reportFile != null) {    data=processReport(reportFile);    fileExtension=reportFile.getName().substring(reportFile.getName().lastIndexOf("."),reportFile.getName().length());  } else {    return false;  }  JasperReport jasperReport=data.getJasperReport();  String jasperName=data.getJasperName();  String name=jasperReport.getName();  File reportDir=data.getReportDir();  ClassLoader scl=ClassLoader.getSystemClassLoader();  try {    java.net.URLClassLoader ucl=new java.net.URLClassLoader(new java.net.URL[]{reportDir.toURI().toURL()},scl);    net.sf.jasperreports.engine.util.JRResourcesUtil.setThreadClassLoader(ucl);  } catch (  MalformedURLException me) {    log.warning("Could not add report directory to classpath: " + me.getMessage());  }  if (jasperReport != null) {    File[] subreports;    if (reportPath.startsWith("http://") || reportPath.startsWith("https://")) {      subreports=getHttpSubreports(jasperName + "Subreport",reportPath,fileExtension);    } else     if (reportPath.startsWith("attachment:")) {      subreports=getAttachmentSubreports(reportPath);    } else     if (reportPath.startsWith("resource:")) {      subreports=getResourceSubreports(name + "Subreport",reportPath,fileExtension);    } else {      subreports=reportDir.listFiles(new FileFilter(jasperName + "Subreport",reportDir,fileExtension));    }    for (int i=0; i < subreports.length; i++) {      if (subreports[i].getName().toLowerCase().endsWith(".jasper") || subreports[i].getName().toLowerCase().endsWith(".jrxml")) {        JasperData subData=processReport(subreports[i]);        if (subData.getJasperReport() != null) {          params.put(subData.getJasperName(),subData.getJasperFile().getAbsolutePath());        }      }    }    if (Record_ID > 0)     params.put("RECORD_ID",new Integer(Record_ID));    params.put("AD_PINSTANCE_ID",new Integer(AD_PInstance_ID));    params.put("AD_CLIENT_ID",new Integer(Env.getAD_Client_ID(Env.getCtx())));    params.put("AD_ROLE_ID",new Integer(Env.getAD_Role_ID(Env.getCtx())));    params.put("AD_USER_ID",new Integer(Env.getAD_User_ID(Env.getCtx())));    Language currLang=Env.getLanguage(Env.getCtx());    String printerName=null;    MPrintFormat printFormat=null;    PrintInfo printInfo=null;    ProcessInfoParameter[] pip=pi.getParameter();    if (pip != null) {      for (int i=0; i < pip.length; i++) {        if (ServerReportCtl.PARAM_PRINT_FORMAT.equalsIgnoreCase(pip[i].getParameterName())) {          printFormat=(MPrintFormat)pip[i].getParameter();        }        if (ServerReportCtl.PARAM_PRINT_INFO.equalsIgnoreCase(pip[i].getParameterName())) {          printInfo=(PrintInfo)pip[i].getParameter();        }        if (ServerReportCtl.PARAM_PRINTER_NAME.equalsIgnoreCase(pip[i].getParameterName())) {          printerName=(String)pip[i].getParameter();        }      }    }    if (printFormat != null) {      if (printInfo != null) {        if (printInfo.isDocument()) {          currLang=printFormat.getLanguage();        }      }      if (printerName == null) {        printerName=printFormat.getPrinterName();      }    }    params.put("CURRENT_LANG",currLang.getAD_Language());    params.put(JRParameter.REPORT_LOCALE,currLang.getLocale());    File resFile=null;    if (reportPath.startsWith("attachment:") && attachment != null) {      resFile=getAttachmentResourceFile(jasperName,currLang);    } else     if (reportPath.startsWith("resource:")) {      resFile=getResourcesForResourceFile(jasperName,currLang);    } else {      resFile=new File(jasperName + "_" + currLang.getLocale().getLanguage()+ ".properties");      if (!resFile.exists()) {        resFile=null;      }      if (resFile == null) {        resFile=new File(jasperName + ".properties");        if (!resFile.exists()) {          resFile=null;        }      }    }    if (resFile != null) {      try {        PropertyResourceBundle res=new PropertyResourceBundle(new FileInputStream(resFile));        params.put("RESOURCE",res);      } catch (      IOException e) {        ;      }    }    Connection conn=null;    try {      conn=getConnection(trx);      jasperPrint=JasperFillManager.fillReport(jasperReport,params,conn);      if (reportData.isDirectPrint() && !processInfo.isPrintPreview()) {        log.info("ReportStarter.startProcess print report -" + jasperPrint.getName());        if (!processInfo.isBatch()) {          PrinterJob printerJob=org.compiere.print.CPrinter.getPrinterJob(printerName);          PrintRequestAttributeSet prats=new HashPrintRequestAttributeSet();          if (printInfo == null || printInfo.isDocumentCopy() || printInfo.getCopies() < 1)           prats.add(new Copies(1)); else           prats.add(new Copies(printInfo.getCopies()));          Locale locale=Language.getLoginLanguage().getLocale();          String printFormat_name=printFormat == null ? "" : printFormat.getName();          int numCopies=printInfo == null ? 0 : printInfo.getCopies();          prats.add(new JobName(printFormat_name + "_" + pi.getRecord_ID(),locale));          prats.add(PrintUtil.getJobPriority(jasperPrint.getPages().size(),numCopies,true));          JRPrintServiceExporter exporter=new JRPrintServiceExporter();          ;          exporter.setParameter(JRExporterParameter.JASPER_PRINT,jasperPrint);          exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE,printerJob.getPrintService());          exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET,printerJob.getPrintService().getAttributes());          exporter.setParameter(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET,prats);          exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG,Boolean.FALSE);          exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG,Boolean.FALSE);          exporter.exportReport();        } else {          try {            File PDF=File.createTempFile("mail",".pdf");            JasperExportManager.exportReportToPdfFile(jasperPrint,PDF.getAbsolutePath());            processInfo.setPDFReport(PDF);          } catch (          IOException e) {            log.severe("ReportStarter.startProcess: Can not make PDF File - " + e.getMessage());          }        }      } else {        log.info("ReportStarter.startProcess run report -" + jasperPrint.getName());        JRViewerProvider viewerLauncher=getReportViewerProvider();        viewerLauncher.openViewer(jasperPrint,pi.getTitle() + "_" + pi.getRecord_ID()+ ".pdf");      }    } catch (    JRException e) {      log.severe("ReportStarter.startProcess: Can not run report - " + e.getMessage());    } finally {      if (conn != null)       try {        conn.close();      } catch (      SQLException e) {      }    }  }  reportResult(AD_PInstance_ID,null,trxName);  return true;}  }
class C{  public int freeMemory(){  return memSemaphore.availablePermits();}  }
class C{  public Sensor(final int row,final int col,final ReceptiveField receptiveField){  this(row,col,NO_FILTER,receptiveField);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:24:54.448 -0400",hash_original_method="6B1695BB3639B4DC9DF8C7FE916CF44D",hash_generated_method="7868EEA8931B795FB4B15250D9317781") public static boolean stopFilteringMulticastV4Packets(){  double taintDouble=0;  return ((taintDouble) == 1);}  }
class C{  public void testConstructorSignBytesException2(){  byte aBytes[]={123,45,-3,-76};  int aSign=0;  try {    new BigInteger(aSign,aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {    assertEquals("Improper exception message","signum-magnitude mismatch",e.getMessage());  }}  }
class C{  private void loadFetchers(){  Document document=Utils.loadXMLDoc(FETCHERS_CONF);  _fetchersConfData=new FetcherConfiguration(document.getDocumentElement()).getFetchersConfigurationData();  for (  FetcherConfigurationData data : _fetchersConfData) {    try {      Class<?> fetcherClass=Play.current().classloader().loadClass(data.getClassName());      Object instance=fetcherClass.getConstructor(FetcherConfigurationData.class).newInstance(data);      if (!(instance instanceof ElephantFetcher)) {        throw new IllegalArgumentException("Class " + fetcherClass.getName() + " is not an implementation of "+ ElephantFetcher.class.getName());      }      ApplicationType type=data.getAppType();      if (_typeToFetcher.get(type) == null) {        _typeToFetcher.put(type,(ElephantFetcher)instance);      }      logger.info("Load Fetcher : " + data.getClassName());    } catch (    ClassNotFoundException e) {      throw new RuntimeException("Could not find class " + data.getClassName(),e);    }catch (    InstantiationException e) {      throw new RuntimeException("Could not instantiate class " + data.getClassName(),e);    }catch (    IllegalAccessException e) {      throw new RuntimeException("Could not access constructor for class" + data.getClassName(),e);    }catch (    RuntimeException e) {      throw new RuntimeException(data.getClassName() + " is not a valid Fetcher class.",e);    }catch (    InvocationTargetException e) {      throw new RuntimeException("Could not invoke class " + data.getClassName(),e);    }catch (    NoSuchMethodException e) {      throw new RuntimeException("Could not find constructor for class " + data.getClassName(),e);    }  }}  }
class C{  protected MyAbstractList(){}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  getDeclaredModifiers().addAll((Collection<? extends N4Modifier>)newValue);return;case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void receivedServerFinished(Finished message) throws HandshakeException, GeneralSecurityException {  message.verifyData(getMasterSecret(),false,handshakeHash);  state=HandshakeType.FINISHED.getCode();  sessionEstablished();  handshakeCompleted();}  }
class C{  private static String unsignedLongToString(long value){  if (value >= 0) {    return Long.toString(value);  } else {    int max_dig=20;    char[] cbuf=new char[max_dig];    int radix=10;    int dst=max_dig;    long top=value >>> 32;    long bot=value & 0xffffffffl;    bot+=(top % radix) << 32;    top/=radix;    while (bot > 0 || top > 0) {      cbuf[--dst]=Character.forDigit((int)(bot % radix),radix);      bot=(bot / radix) + ((top % radix) << 32);      top/=radix;    }    return new String(cbuf,dst,max_dig - dst);  }}  }
class C{  public static List<String> findRepos(List<String> args,boolean remove){  ArrayList<String> repos=new ArrayList<String>(args.size() / 2);  for (Iterator<String> iter=args.iterator(); iter.hasNext(); ) {    String s=iter.next();    if ("-rep".equals(s)) {      if (remove) {        iter.remove();      }      if (iter.hasNext()) {        s=iter.next();        repos.add(s);        if (remove) {          iter.remove();        }      }    }  }  return repos;}  }
class C{  public static boolean hasMoved(Location first,Location second){  return first.getX() != second.getX() || first.getY() != second.getY() || first.getZ() != second.getZ();}  }
class C{  public boolean shouldPause(){  return getProcessState() == PROCESS_STATE_PAUSED;}  }
class C{  public synchronized void run(){  final long end=System.currentTimeMillis() + timeout;  long now;  while (watch && (end > (now=System.currentTimeMillis()))) {    try {      wait(end - now);    } catch (    InterruptedException ignored) {    }  }  if (watch) {    try {      cancellable.cancel();    } catch (    Exception e) {      LOG.error(e.getMessage(),e);    }    watch=false;  }}  }
class C{  public static synchronized String generateId(){  if (id == Long.MAX_VALUE) {    id=0;  } else {    id++;  }  return Long.toHexString(id);}  }
class C{  @Override protected Boolean compute(Date left,Date right){  if (left == null || right == null) {    return null;  }  return left.after(right);}  }
class C{  public TDoubleLongHashMap(TDoubleHashingStrategy strategy){  super(strategy);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodevalue.class,args);}  }
class C{  private static int hashIntArray(int[] oid){  int intHash=0;  for (int i=0; i < oid.length && i < 4; i++) {    intHash+=oid[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  public static byte[] packInt(final int value){  if ((value & 0xFFFFFF80) == 0) {    return new byte[]{(byte)value};  } else   if ((value & 0xFFFF0000) == 0) {    return new byte[]{(byte)0x80,(byte)(value >>> 8),(byte)value};  } else {    return new byte[]{(byte)0x81,(byte)(value >>> 24),(byte)(value >>> 16),(byte)(value >>> 8),(byte)value};  }}  }
class C{  public synchronized static String call(PageContext pc,String input,String key,String algorithm,String encoding,Object ivOrSalt,double iterations) throws PageException {  return invoke(input,key,algorithm,encoding,ivOrSalt,Caster.toInteger(iterations));}  }
class C{  public PTBLexer(Reader r,FeatureLabelTokenFactory tf,boolean tokenizeCRs,boolean suppressEscaping){  this(r);  this.invertable=false;  tokenFactory=tf;  this.tokenizeCRs=tokenizeCRs;  this.suppressEscaping=suppressEscaping;}  }
class C{  public Builder fieldNameConverter(Function<String,String> converter){  this.converter=converter;  return this;}  }
class C{  @Override public List<EvaluationStatistics> evaluate(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  m_ActualNumThreads=ThreadUtils.getActualNumThreads(m_NumThreads,m_UpperRuns - m_LowerRuns + 1);  log("Number of threads (" + ThreadUtils.SEQUENTIAL + " = sequential): "+ m_ActualNumThreads);  if (m_ActualNumThreads == ThreadUtils.SEQUENTIAL)   result=evaluateSequential(classifier,dataset); else   result=evaluateParallel(classifier,dataset);  if (m_Stopped)   result.clear();  return result;}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,short[] sdata){}  }
class C{  private static Set<String> writeMessageBulkNoDump(Collection<MessageWrapper> mws){  if (mws.size() == 0)   return new HashSet<>();  List<IndexEntry<UserEntry>> userBulk=new ArrayList<>();  List<IndexEntry<MessageEntry>> messageBulk=new ArrayList<>();  for (  MessageWrapper mw : mws) {    if (messages.existsCache(mw.t.getIdStr()))     continue;synchronized (DAO.class) {      userBulk.add(new IndexEntry<UserEntry>(mw.u.getScreenName(),mw.t.getSourceType(),mw.u));      messageBulk.add(new IndexEntry<MessageEntry>(mw.t.getIdStr(),mw.t.getSourceType(),mw.t));    }    Classifier.learnPhrase(mw.t.getText(Integer.MAX_VALUE,""));  }  ElasticsearchClient.BulkWriteResult result=null;  try {    final Date limitDate=new Date();    List<IndexEntry<MessageEntry>> macc;    final Set<String> existed=new HashSet<>();    limitDate.setTime(DateParser.oneHourAgo().getTime());    macc=messageBulk.stream().filter(null).collect(Collectors.toList());    result=messages_hour.writeEntries(macc);    for (    IndexEntry<MessageEntry> i : macc)     if (!(result.getCreated().contains(i.getId())))     existed.add(i.getId());    limitDate.setTime(DateParser.oneDayAgo().getTime());    macc=messageBulk.stream().filter(null).filter(null).collect(Collectors.toList());    result=messages_day.writeEntries(macc);    for (    IndexEntry<MessageEntry> i : macc)     if (!(result.getCreated().contains(i.getId())))     existed.add(i.getId());    limitDate.setTime(DateParser.oneWeekAgo().getTime());    macc=messageBulk.stream().filter(null).filter(null).collect(Collectors.toList());    result=messages_week.writeEntries(macc);    for (    IndexEntry<MessageEntry> i : macc)     if (!(result.getCreated().contains(i.getId())))     existed.add(i.getId());    macc=messageBulk.stream().filter(null).collect(Collectors.toList());    result=messages.writeEntries(macc);    for (    IndexEntry<MessageEntry> i : macc)     if (!(result.getCreated().contains(i.getId())))     existed.add(i.getId());    users.writeEntries(userBulk);  } catch (  IOException e) {    Log.getLog().warn(e);  }  if (result == null)   return new HashSet<String>();  return result.getCreated();}  }
class C{  public static final void shuffle(float[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  protected void reportError(CSSParseException e){  errorHandler.error(e);  int cbraces=1;  for (; ; ) {switch (current) {case LexicalUnits.EOF:      return;case LexicalUnits.SEMI_COLON:case LexicalUnits.RIGHT_CURLY_BRACE:    if (--cbraces == 0) {      nextIgnoreSpaces();      return;    }case LexicalUnits.LEFT_CURLY_BRACE:  cbraces++;}nextIgnoreSpaces();}}  }
class C{  public static float max(final float a,final float b,final float c){  return max(max(a,b),c);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public boolean isDrawBorder(){  return drawBorder;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssVolInfo[");  buffer.append("m_repType = ").append(m_repType);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_maxSize = ").append(m_maxSize);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean isRegenerate(){  return trapCode == RuntimeEntrypoints.TRAP_REGENERATE;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setEnablePC(evalBool(stack.pop()));  return null;}  }
class C{  private CarbonDictionaryWriterImpl prepareWriter() throws IOException {  initDictionaryDirPaths();  return new CarbonDictionaryWriterImpl(this.carbonStorePath,carbonTableIdentifier,columnIdentifier);}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public static String processApidGapsInfo(String gapStart,String gapStop){  String stringParsed="";  if (gapStart != null && gapStop != null) {    String[] gapStartList=gapStart.trim().split(";");    String[] gapStopList=gapStop.trim().split(";");    if (gapStartList.length == gapStopList.length) {      for (int i=0; i < gapStartList.length; i++) {        stringParsed=stringParsed + "Gap Start Time: " + (gapStartList[i].isEmpty() ? "-" : gapStartList[i])+ " Gap Stop Time: "+ (gapStopList[i].isEmpty() ? "-" : gapStopList[i])+ "; ";      }    } else {      for (int i=0; i < gapStartList.length; i++) {        stringParsed=stringParsed + "Gap Start Time: " + (gapStartList[i].isEmpty() ? "-" : gapStartList[i])+ "; ";      }    }  } else {    logger.error("Error getting Information on missing ISPs APID");  }  logger.debug(" *************  missing ISPs APID:  " + stringParsed);  stringParsed=stringParsed.replace("Gap Start Time: - Gap Stop Time: -;","N/A").replace("Gap Start Time: -;","N/A");  if (stringParsed.length() > MAX_METADATA_SIZE) {    stringParsed=stringParsed.substring(0,MAX_METADATA_SIZE - 4) + "...";  }  return stringParsed;}  }
class C{  private Entry createEntry(User user,Entry source,String type,String id,String quotation,String note,Long modTime,Long createTime,String relatedId,TreeRelType relationshipType,boolean insertAboveParentsChildren,boolean insertAsFirstChild,boolean isPublic,boolean skipNeedRelationshipCheck,boolean rootWillBeCreatedLater,boolean isAdmin,Errors errors){  if (relationshipType != null) {    if (relatedId == null) {      Errors.add(errors,errorMessages.errorRelatedIdIsNull());      return null;    }    if (relatedId.isEmpty()) {      Errors.add(errors,errorMessages.errorRelatedIdIsEmpty());      return null;    }  }  if ((relatedId == null || relatedId.isEmpty()) && relationshipType != null) {    Errors.add(errors,errorMessages.errorRelatedTypeIsNull());    return null;  }  if (relationshipType != TreeRelType.Parent && insertAboveParentsChildren) {    Errors.add(errors,errorMessages.errorInsertingANewEntryAboveChildrenCanOnlyBeDoneWhenTheRelatedEntryIsAParent());    return null;  }  if (type == null || (!type.equals(Constants.quotation) && !type.equals(Constants.note) && !type.equals(Constants.notebook)&& !type.equals(Constants.root)&& !type.equals(Constants.tableofcontents))) {    Errors.add(errors,errorMessages.errorTheTypeOfTheEntryIsNotAllowed(null));    return null;  }  if (createTime == null) {    Errors.add(errors,errorMessages.errorCreateTimeIsNull());    return null;  }  if (modTime == null) {    Errors.add(errors,errorMessages.errorModTimeIsNull());    return null;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return null;  }  if (id != null && !idGenerator.isIdWellFormed(id)) {    Errors.add(errors,errorMessages.errorIdIsInvalid());    return null;  }  if (relatedId != null && !idGenerator.isIdWellFormed(relatedId)) {    Errors.add(errors,errorMessages.errorRelatedIdIsInInvalidFormat());    return null;  }  if (source != null && !canUserModifyEntry(user,source,isAdmin)) {    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSource());    return null;  }  if (createTime.longValue() > modTime.longValue()) {    modTime=createTime;  }  if (relationshipType == null && relatedId == null) {    if (type.equals(Constants.notebook)) {      relationshipType=TreeRelType.Parent;      relatedId=user.getTableOfContentsId();    } else     if (type.equals(Constants.note) && !skipNeedRelationshipCheck) {      Errors.add(errors,errorMessages.errorCanNotCreateParentlessNote());      return null;    }  }  if ((type.equals(Constants.root) || type.equals(Constants.tableofcontents)) && relationshipType != null) {    Errors.add(errors,errorMessages.errorRootsAndTableOfContentsCanNotBeCreatedWithARelationship(null));    return null;  }  String parentId=null;  Entry parent=null;  Entry related=null;  if ((relationshipType == TreeRelType.Child || relationshipType == TreeRelType.Previous || relationshipType == TreeRelType.Next) && relatedId != null) {    related=getEntryById(relatedId);    if (related == null) {      Errors.add(errors,errorMessages.errorTheProposedRelatedEntryCouldNotBeFound());      return null;    }    parentId=related.getParentId();    parent=getEntryById(parentId);    if ((relationshipType == TreeRelType.Previous || relationshipType == TreeRelType.Next) && parentId == null) {      Errors.add(errors,errorMessages.errorTheProposedSiblingEntryHasNoParent());      return null;    }  } else   if (relationshipType == TreeRelType.Parent && relatedId != null) {    parentId=relatedId;    related=parent=getEntryById(parentId);    if (parent == null) {      Errors.add(errors,errorMessages.errorTheProposedParentEntryCouldNotBeFound());      return null;    }  }  if (related != null && !canUserModifyEntry(user,related,isAdmin)) {    Errors.add(errors,errorMessages.errorNotEntitledToModifyRelatedEntry());    return null;  }  if (parent != null) {    if (!verifyTypesForParentChildRelationship(type,parent.getType(),null,errors)) {      return null;    }  }  final Entry entry=new Entry();  entry.setDb(db);  if (id == null) {    id=idGenerator.getAnotherId();  }  entry.setId(id);  entry.setType(type);  if (note != null) {    note=cleanUpText(note);  }  if (entry.isNotebook()) {    entry.setNotebookTitle(note);  } else {    entry.setNote(note);  }  if (quotation != null) {    quotation=cleanUpText(quotation);    entry.setQuotation(quotation);  }  entry.setParentId(parentId);  entry.setModTime(modTime);  entry.setCreateTime(createTime);  entry.setIsPublic(isPublic);  entry.setUserId(user.getId());  if (type.equals(Constants.quotation)) {    if (source != null) {      entry.setSourceId(source.getId());    }  }  if (parent != null && insertAboveParentsChildren) {    for (    Object objectChild : getEntriesByParentId(parent.getId())) {      Entry child=(Entry)objectChild;      if (!id.equals(child.getId())) {        child.setParentId(id);      }    }    entry.setFirstChildId(parent.getFirstChildId());    entry.setLastChildId(parent.getLastChildId());    parent.setFirstChildId(id);    parent.setLastChildId(id);  } else   if (relationshipType == TreeRelType.Child) {    final String childIdToReparent=relatedId;    final Entry child=getEntryById(childIdToReparent);    if (child != null) {      if (parent != null) {        if (childIdToReparent.equals(parent.getLastChildId())) {          parent.setLastChildId(id);        }        if (childIdToReparent.equals(parent.getFirstChildId())) {          parent.setFirstChildId(id);        }      }      String childsPreviousId=null;      if (child.hasPreviousSiblingId()) {        childsPreviousId=child.getPreviousSiblingId();        final Entry childsPrevious=getEntryById(childsPreviousId);        if (childsPrevious != null) {          childsPrevious.setNextSiblingId(id);        }      }      String childsNextId=null;      if (child.hasNextSiblingId()) {        childsNextId=child.getNextSiblingId();        final Entry childsNext=getEntryById(childsNextId);        if (childsNext != null) {          childsNext.setPreviousSiblingId(id);        }      }      entry.setFirstChildId(childIdToReparent);      entry.setLastChildId(childIdToReparent);      if (childsPreviousId != null) {        entry.setPreviousSiblingId(childsPreviousId);      }      if (childsNextId != null) {        entry.setNextSiblingId(childsNextId);      }      child.setParentId(id);      child.setNextSiblingId(null);      child.setPreviousSiblingId(null);    }  } else   if ((relationshipType == TreeRelType.Previous || relationshipType == TreeRelType.Next) && relatedId != null) {    final Entry sibling=getEntryById(relatedId);    if (sibling == null) {      Errors.add(errors,errorMessages.errorTheSiblingEntryCouldNotBeFound());      return null;    }    parentId=sibling.getParentId();    parent=getEntryById(parentId);    if (parent == null) {      Errors.add(errors,errorMessages.errorSiblingParentNotFound());      return null;    }    if (relationshipType == TreeRelType.Previous) {      final String parentsLastChildId=parent.getLastChildId();      if (parentsLastChildId != null && parentsLastChildId.equals(relatedId)) {        parent.setLastChildId(id);      }      final String siblingsNextId=sibling.getNextSiblingId();      sibling.setNextSiblingId(id);      entry.setPreviousSiblingId(relatedId);      if (siblingsNextId != null) {        entry.setNextSiblingId(siblingsNextId);        final Entry siblingsNext=getEntryById(siblingsNextId);        siblingsNext.setPreviousSiblingId(id);      }    } else {      final String parentsFirstChildId=parent.getFirstChildId();      if (parentsFirstChildId != null && parentsFirstChildId.equals(relatedId)) {        parent.setFirstChildId(id);      }      final String siblingsPreviousId=sibling.getPreviousSiblingId();      sibling.setPreviousSiblingId(id);      entry.setNextSiblingId(relatedId);      if (siblingsPreviousId != null) {        entry.setPreviousSiblingId(siblingsPreviousId);        final Entry siblingsPrevious=getEntryById(siblingsPreviousId);        siblingsPrevious.setNextSiblingId(id);      }    }  } else   if (parent != null) {    if (insertAsFirstChild) {      if (!parent.hasLastChildId()) {        parent.setLastChildId(id);      }      if (parent.hasFirstChildId()) {        final String parentsFirstChildId=parent.getFirstChildId();        final Entry parentsFirstChild=getEntryById(parentsFirstChildId);        if (parentsFirstChildId != null) {          parentsFirstChild.setPreviousSiblingId(id);        }        entry.setNextSiblingId(parentsFirstChildId);      }      parent.setFirstChildId(id);    } else {      if (!parent.hasFirstChildId()) {        parent.setFirstChildId(id);      }      if (parent.hasLastChildId()) {        final String parentsLastChildId=parent.getLastChildId();        final Entry parentsLastChild=getEntryById(parentsLastChildId);        if (parentsLastChild != null) {          parentsLastChild.setNextSiblingId(id);        }        entry.setPreviousSiblingId(parentsLastChildId);      }      parent.setLastChildId(id);    }  }  db.persistEntry(entry);  if (!rootWillBeCreatedLater && entry.getType("").equals(Constants.notebook)) {    Entry root=createRoot(user,null,Constants.root,entry.getId(),createTime,createTime,errors);    entry.setRootId(root.getId());  }  return entry;}  }
class C{  public OldDoFn<InputT,OutputT>.Context context(){  return new NoOpDoFnContext();}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all metrics for account");  System.out.println("=================================================================");  Metadata metrics=adExchangeSeller.metadata().metrics().list().execute();  if (metrics.getItems() != null && !metrics.getItems().isEmpty()) {    for (    ReportingMetadataEntry metric : metrics.getItems()) {      boolean firstProduct=true;      StringBuilder products=new StringBuilder();      for (      String product : metric.getSupportedProducts()) {        if (!firstProduct) {          products.append(", ");        }        products.append(product);        firstProduct=false;      }      System.out.printf("Metric id \"%s\" for product(s): [%s] was found.\n",metric.getId(),products.toString());    }  } else {    System.out.println("No metrics found.");  }  System.out.println();}  }
class C{  public String explain(String sql,Explain explain,String... indexes) throws SQLException {  com.facebook.presto.sql.tree.Statement explanSt=explain.getStatement();  if (!(explanSt instanceof Query))   throw new SQLException("Can only EXPLAIN SELECT ... statements");  this.buildRequest(sql,((Query)explanSt).getQueryBody(),indexes);  return this.request.toString();}  }
class C{  public void put(String key,Cursor cursor){  if (get(key) != null) {    throw new IllegalArgumentException("Cursor " + key + " already in use.");  } else {    map.put(key,cursor);  }}  }
class C{  public void testCertStore16() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect type",certS.getType(),dValid[i]);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect type",certS.getType(),dValid[i]);    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  public void addTableModelListener(TableModelListener l){  listener.add(l);}  }
class C{  public boolean dispatchKeyShortcutEvent(KeyEvent event){  if (mWindow.superDispatchKeyShortcutEvent(event)) {    return true;  }  return onKeyShortcut(event.getKeyCode(),event);}  }
class C{  public void handleActionKey(){  BTDownload[] selectedDownloaders=getSelectedDownloaders();  if (selectedDownloaders.length == 1) {    playSingleMediaFileAction.setEnabled(selectionHasMediaFiles(selectedDownloaders[0]));  }  if (playSingleMediaFileAction.isEnabled()) {    playSingleMediaFileAction.actionPerformed(null);  }  if (showInLibraryAction.isEnabled()) {    showInLibraryAction.actionPerformed(null);  }}  }
class C{  public Builder client(DistributedLogClient client){  this._client=client;  return this;}  }
class C{  public void addTreeModelListener(TreeModelListener l){  this.listeners.add(l);}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private static byte[] lmv2Hash(final String domain,final String user,final byte[] ntlmHash) throws AuthenticationException {  try {    final HMACMD5 hmacMD5=new HMACMD5(ntlmHash);    hmacMD5.update(user.toUpperCase(Locale.US).getBytes("UnicodeLittleUnmarked"));    if (domain != null) {      hmacMD5.update(domain.toUpperCase(Locale.US).getBytes("UnicodeLittleUnmarked"));    }    return hmacMD5.getOutput();  } catch (  UnsupportedEncodingException e) {    throw new AuthenticationException("Unicode not supported! " + e.getMessage(),e);  }}  }
class C{  protected Cloudformation.CloudFormationOutput applyCloudFormation(Deployment deployment) throws Exception {  Cloudformation cloudformation=new Cloudformation(deployment);  cloudformation.setLog(getLog());  return cloudformation.createOrUpdateStack();}  }
class C{  protected Lock lockFactory(final T name){  if (name == null)   throw new IllegalArgumentException();  ReentrantLock lock;synchronized (locks) {    lock=locks.get(name);    if (lock == null) {      lock=new ReentrantLock();      locks.put(name,lock);    }  }  return lock;}  }
class C{  public void countSortFromTo(int from,int to){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  boolean[] theElements=elements;  int trues=0;  for (int i=from; i <= to; )   if (theElements[i++])   trues++;  int falses=to - from + 1 - trues;  if (falses > 0)   fillFromToWith(from,from + falses - 1,false);  if (trues > 0)   fillFromToWith(from + falses,from + falses - 1 + trues,true);}  }
class C{  public final boolean contains(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
